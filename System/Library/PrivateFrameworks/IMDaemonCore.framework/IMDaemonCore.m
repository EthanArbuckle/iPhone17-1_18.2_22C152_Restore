uint64_t sub_1D967D694(uint64_t a1, void *a2)
{
  return [a2 isActive];
}

uint64_t sub_1D967D69C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1D9685EC8(a1, *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(void (**)(void *))(v2 + 56), a2);
}

uint64_t sub_1D967D6B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D6C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D6D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D6E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D700(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D720(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D730(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D740(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D750(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D760(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D780(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D790(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1D967D7F0()
{
  return swift_release();
}

uint64_t sub_1D967D7F8()
{
  return swift_release();
}

uint64_t sub_1D967D800()
{
  return swift_release();
}

uint64_t sub_1D967D808()
{
  return swift_release();
}

uint64_t sub_1D967D810()
{
  return swift_release();
}

uint64_t sub_1D967D818()
{
  return swift_release();
}

uint64_t sub_1D967D820()
{
  return swift_release();
}

uint64_t sub_1D967D828()
{
  return swift_release();
}

uint64_t sub_1D967D830()
{
  return swift_release();
}

uint64_t sub_1D967D838()
{
  return swift_release();
}

uint64_t sub_1D967D840()
{
  return swift_release();
}

uint64_t sub_1D967D848()
{
  return swift_release();
}

uint64_t sub_1D967D850()
{
  return swift_release();
}

uint64_t sub_1D967D858()
{
  return swift_release();
}

uint64_t sub_1D967D860()
{
  return swift_release();
}

uint64_t sub_1D967D868()
{
  return swift_release();
}

uint64_t sub_1D967D870()
{
  return swift_release();
}

uint64_t sub_1D967D878()
{
  return swift_release();
}

uint64_t sub_1D967D880()
{
  return swift_release();
}

uint64_t sub_1D967D888()
{
  return swift_release();
}

uint64_t sub_1D967D898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9907030();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1D9907020();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(void *)(a3 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_3;
  }
  sub_1D968E508(a1, (uint64_t *)&unk_1EBE2B000);
  if (*(void *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1D9906FC0();
    swift_unknownObjectRelease();
  }
LABEL_5:
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a2;
  *(void *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t initializeWithCopy for ClientConnection.State(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1D967DAD4(uint64_t a1, uint64_t a2)
{
  swift_retain();
  uint64_t v4 = sub_1D9681674(a2);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = v4;
  return result;
}

uint64_t destroy for ClientConnection.State(uint64_t a1)
{
  sub_1D9686484(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SyncedSettingsServiceManager()
{
  return self;
}

uint64_t type metadata accessor for XPCClientConnectionRouteProvider()
{
  return self;
}

uint64_t sub_1D967E34C(void *a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  a1[6] = v4;
  a1[7] = v3;
  a1[5] = v5;
  return result;
}

void sub_1D967E550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D967E6B8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1D96867CC(&qword_1EBE2B0A0);
    v10 = (char *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E4FBC860];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D99076A0();
  __break(1u);
  return result;
}

unint64_t sub_1D967E824(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC868];
    goto LABEL_9;
  }
  sub_1D96867CC(&qword_1EBE2AF28);
  uint64_t v2 = sub_1D9907690();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_1D968E16C(v6, (uint64_t)v15, &qword_1EBE2AF10);
    unint64_t result = sub_1D968DD3C((uint64_t)v15);
    if (v8) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v9 = v3[6] + 40 * result;
    long long v10 = v15[0];
    long long v11 = v15[1];
    *(void *)(v9 + 32) = v16;
    *(_OWORD *)uint64_t v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    unint64_t result = (unint64_t)sub_1D968DAA0(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1D967E968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[11] = a7;
  v8[12] = a8;
  v8[9] = a5;
  v8[10] = a6;
  v8[7] = a3;
  v8[8] = a4;
  v8[6] = a2;
  long long v10 = (void *)swift_task_alloc();
  v8[13] = v10;
  void *v10 = v8;
  v10[1] = sub_1D967EBA0;
  v10[8] = a1;
  return MEMORY[0x1F4188298](sub_1D9681DD4, 0, 0);
}

uint64_t sub_1D967EBA0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 112) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D9684C14, 0, 0);
}

uint64_t sub_1D967EFF8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1D967F0F4()
{
  uint64_t v2 = *v0;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1D968D6C0;
  v3[2] = v2;
  return MEMORY[0x1F4188298](sub_1D96823C0, v2, 0);
}

void sub_1D967F19C(uint64_t a1, uint64_t a2)
{
  sub_1D9683CC4();
  id v4 = objc_msgSend(self, sel_sharedInstance);
  unsigned int v5 = objc_msgSend(v4, sel_cloudKitSyncingEnabled);

  if (v5)
  {
    sub_1D98ACC98(0);
    uint64_t v6 = swift_allocObject();
    swift_unknownObjectWeakInit();
    int64_t v7 = (void *)swift_allocObject();
    v7[2] = v6;
    v7[3] = a1;
    v7[4] = a2;
    swift_retain();
    sub_1D98AED08(a1);
    sub_1D98AE408((uint64_t)sub_1D98AECFC, (uint64_t)v7);
    swift_release();
    swift_release();
  }
}

uint64_t sub_1D967F30C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v8 = v0[9];
  long long v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  void *v10 = v1;
  v10[1] = sub_1D968026C;
  return sub_1D967E968(v2, v3, v4, v5, v6, v7, v9, v8);
}

void sub_1D967F434(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Notification Center post badge number with error: [%@]", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_1D967F508()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR___IMDKeyTransparencyController_state);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  os_unfair_lock_lock((os_unfair_lock_t)(v1 + 20));
  sub_1D968DF40((unsigned __int8 *)(v1 + 16), &v4);
  os_unfair_lock_unlock((os_unfair_lock_t)(v1 + 20));
  uint64_t v2 = v4;
  swift_release();
  swift_release_n();
  return v2;
}

uint64_t sub_1D967F5C4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = a4[2];
  if (v7 <= v8) {
    uint64_t v9 = a4[2];
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    sub_1D96867CC(&qword_1EBE2B098);
    long long v10 = (void *)swift_allocObject();
    int64_t v11 = j__malloc_size(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    long long v10 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v10 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8) {
      memmove(v10 + 4, a4 + 4, 16 * v8);
    }
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    sub_1D96867CC((uint64_t *)&unk_1EBE2AF90);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  uint64_t result = sub_1D99076A0();
  __break(1u);
  return result;
}

void sub_1D967F960(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D967F8E8);
  }
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(exc_buf);
}

id sub_1D967FD78@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_processIdentifier);
  *a2 = result;
  return result;
}

id sub_1D967FEB0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  unsigned __int8 v4 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v3, "count"));
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v5 = v3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v6)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)v15;
    uint64_t v9 = *MEMORY[0x1E4F6CE40];
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v5);
        }
        int64_t v11 = [MEMORY[0x1E4F28F60] predicateWithFormat:@"%K = %@", v9, *(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14];
        [v4 addObject:v11];
      }
      uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }

  uint64_t v12 = [MEMORY[0x1E4F28BA0] orPredicateWithSubpredicates:v4];

  return v12;
}

uint64_t sub_1D9680048(void *a1)
{
  uint64_t v3 = sub_1D99071E0();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D99071D0();
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = sub_1D9906C80();
  MEMORY[0x1F4188790](v8 - 8);
  id v9 = a1;
  sub_1D9906C70();
  id v12 = (id)MEMORY[0x1E4FBC860];
  sub_1D968E02C();
  sub_1D96867CC((uint64_t *)&unk_1EBE2AFE0);
  sub_1D968E0C0();
  sub_1D99073F0();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E4FBCC58], v3);
  id v12 = v9;
  sub_1D96867CC((uint64_t *)&unk_1EBE2B468);
  swift_allocObject();
  *(void *)(v1 + 16) = sub_1D9906870();
  return v1;
}

uint64_t sub_1D968026C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_1D96804B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9680874()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release();
  id v2 = objc_msgSend(self, sel_sharedController);
  id v3 = objc_msgSend(v2, sel_allServices);

  sub_1D968E084(0, &qword_1EBE2A898);
  unint64_t v4 = sub_1D9906F20();

  uint64_t v5 = sub_1D9682AFC(v4);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 128) = sub_1D968311C(v5);
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4188298](sub_1D9682C78, v1, 0);
}

uint64_t sub_1D9680990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a8;
  uint64_t v27 = a7;
  uint64_t v32 = a5;
  uint64_t v29 = a4;
  uint64_t v31 = a3;
  uint64_t v28 = a2;
  uint64_t v30 = sub_1D99071E0();
  uint64_t v10 = *(void *)(v30 - 8);
  MEMORY[0x1F4188790](v30);
  id v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_1D99071D0();
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = sub_1D9906C80();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v15 = sub_1D9906590();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44[3] = a6(0);
  v44[4] = v27;
  v44[0] = a1;
  sub_1D9684AD0((uint64_t)v44, (uint64_t)v37);
  sub_1D9906580();
  uint64_t v19 = sub_1D9906560();
  uint64_t v21 = v20;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  sub_1D968E340(v37, (uint64_t)v38);
  uint64_t v39 = v28;
  uint64_t v40 = v19;
  uint64_t v41 = v21;
  uint64_t v42 = v29;
  uint64_t v22 = MEMORY[0x1E4FBC860];
  uint64_t v43 = MEMORY[0x1E4FBC860];
  sub_1D968E418((uint64_t)v38, (uint64_t)v37);
  sub_1D9906C70();
  uint64_t v36 = v22;
  sub_1D968E37C((unint64_t *)&qword_1EBE2B040, MEMORY[0x1E4FBCC10]);
  sub_1D96867CC((uint64_t *)&unk_1EBE2AFE0);
  sub_1D968E0C0();
  sub_1D99073F0();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E4FBCC58], v30);
  sub_1D96867CC((uint64_t *)&unk_1EBE2ADB8);
  swift_allocObject();
  uint64_t v23 = sub_1D9906870();
  uint64_t v24 = v32;
  *(void *)(v32 + 16) = v23;
  uint64_t v34 = v31;
  uint64_t v35 = v24;
  sub_1D9906860();
  sub_1D9686484((uint64_t)v44);
  sub_1D968E3C4((uint64_t)v38);
  return v24;
}

uint64_t sub_1D9680D68(uint64_t a1)
{
  *(void *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return MEMORY[0x1F4188298](sub_1D9684568, 0, 0);
}

uint64_t sub_1D9680F88()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  *(void *)(v0 + 48) = sub_1D9906A30();
  return MEMORY[0x1F4188298](sub_1D9680FFC, v1, 0);
}

uint64_t sub_1D9680FFC()
{
  *(void *)(v0 + 56) = sub_1D9907000();
  uint64_t v2 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D96815F4, v2, v1);
}

uint64_t sub_1D9681088()
{
  swift_beginAccess();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v1 = swift_bridgeObjectRetain();
  return v3(v1);
}

uint64_t sub_1D96811B0(void *a1)
{
  uint64_t v2 = v1;
  sub_1D96867CC((uint64_t *)&unk_1EBE2B000);
  MEMORY[0x1F4188790]();
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EBE2AFC8 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_1D9906BA0();
  sub_1D9686810(v6, (uint64_t)qword_1EBE2C2E0);
  swift_retain();
  uint64_t v7 = sub_1D9906B80();
  os_log_type_t v8 = sub_1D9907120();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v30 = a1;
    id v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v32 = v10;
    *(_DWORD *)id v9 = 136315138;
    uint64_t v29 = v9 + 4;
    uint64_t v11 = v5;
    uint64_t v13 = *(void *)(v2 + 112);
    unint64_t v12 = *(void *)(v2 + 120);
    swift_bridgeObjectRetain();
    uint64_t v14 = v13;
    uint64_t v5 = v11;
    uint64_t v31 = sub_1D96863B0(v14, v12, &v32);
    sub_1D9907370();
    swift_release();
    a1 = v30;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D967A000, v7, v8, "Incoming XPC connection for %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v10, -1, -1);
    MEMORY[0x1E016AD90](v9, -1, -1);
  }
  else
  {

    swift_release();
  }
  char v15 = sub_1D9684078(a1);
  if (v15)
  {
    uint64_t v16 = sub_1D9907030();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
    uint64_t v17 = (void *)swift_allocObject();
    v17[2] = 0;
    v17[3] = 0;
    v17[4] = v2;
    v17[5] = a1;
    swift_retain();
    id v18 = a1;
    sub_1D967D898((uint64_t)v5, (uint64_t)&unk_1EA8C8CE0, (uint64_t)v17);
    swift_release();
  }
  else
  {
    swift_retain_n();
    id v19 = a1;
    uint64_t v20 = sub_1D9906B80();
    os_log_type_t v21 = sub_1D9907140();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v32 = v23;
      *(_DWORD *)uint64_t v22 = 67109378;
      LODWORD(v31) = objc_msgSend(v19, sel_processIdentifier);
      sub_1D9907370();

      *(_WORD *)(v22 + 8) = 2080;
      uint64_t v24 = swift_bridgeObjectRetain();
      uint64_t v25 = MEMORY[0x1E0167A70](v24, MEMORY[0x1E4FBB1A0]);
      unint64_t v27 = v26;
      swift_bridgeObjectRelease();
      uint64_t v31 = sub_1D96863B0(v25, v27, &v32);
      sub_1D9907370();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D967A000, v20, v21, "Client %d does not have any of allowed entitlements %s, invalidating connection", (uint8_t *)v22, 0x12u);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v23, -1, -1);
      MEMORY[0x1E016AD90](v22, -1, -1);
    }
    else
    {

      swift_release_n();
    }
  }
  return v15 & 1;
}

uint64_t sub_1D96815F4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_release();
  *(unsigned char *)(v0 + 64) = sub_1D9906A20() & 1;
  swift_release();
  return MEMORY[0x1F4188298](sub_1D968D6C4, v1, 0);
}

uint64_t sub_1D9681674(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1D968DE68(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*v4 + 40);
      uint64_t v8 = swift_retain();
      uint64_t v9 = v7(v8, v5, v6);
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_1D968DE68(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v9;
      *(void *)(v12 + 40) = v6;
      v4 += 2;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1D9681778(uint64_t a1)
{
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  uint64_t v2 = *(void *)(a1 + 40);

  return MEMORY[0x1F40CD9C0](v2, 0);
}

uint64_t sub_1D96817C0(uint64_t a1)
{
  int64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t sub_1D9681804()
{
  return sub_1D9686B5C(*(void *)(v0 + 16), *(const char **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void (**)(unint64_t *))(v0 + 64));
}

uint64_t sub_1D9681B30()
{
  uint64_t v20 = v0;
  if (qword_1EBE2AFC8 != -1) {
    swift_once();
  }
  int64_t v1 = (void *)v0[10];
  uint64_t v2 = sub_1D9906BA0();
  v0[12] = sub_1D9686810(v2, (uint64_t)qword_1EBE2C2E0);
  swift_retain();
  id v3 = v1;
  uint64_t v4 = sub_1D9906B80();
  os_log_type_t v5 = sub_1D9907120();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = (void *)v0[10];
  uint64_t v8 = v0[11];
  if (v6)
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v19 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v12 = *(void *)(v8 + 112);
    unint64_t v11 = *(void *)(v8 + 120);
    swift_bridgeObjectRetain();
    v0[2] = sub_1D96863B0(v12, v11, &v19);
    sub_1D9907370();
    swift_bridgeObjectRelease();
    swift_release();
    *(_WORD *)(v9 + 12) = 1024;
    *((_DWORD *)v0 + 4) = objc_msgSend(v7, sel_processIdentifier);
    sub_1D9907370();

    _os_log_impl(&dword_1D967A000, v4, v5, "Configuring XPC connection for %s from PID %d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v10, -1, -1);
    MEMORY[0x1E016AD90](v9, -1, -1);
  }
  else
  {
    swift_release();
  }
  uint64_t v13 = (void *)v0[10];
  uint64_t v14 = v0[11];
  type metadata accessor for XPCClientConnectionRouteProvider();
  swift_allocObject();
  id v15 = v13;
  v0[13] = sub_1D9680048(v15);

  v0[14] = *(void *)(v14 + 152);
  sub_1D9907010();
  swift_bridgeObjectRetain();
  v0[15] = sub_1D9907000();
  uint64_t v17 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D9680874, v17, v16);
}

uint64_t sub_1D9681DD4()
{
  v0[7] = MEMORY[0x1E4FBC860];
  uint64_t v1 = *(void *)(v0[8] + OBJC_IVAR___IMDClientConnectionManager_connectionListeners);
  v0[9] = v1;
  uint64_t v2 = *(void *)(v1 + 16);
  v0[10] = v2;
  if (v2)
  {
    v0[11] = 0;
    uint64_t v3 = v1 + 32;
    swift_bridgeObjectRetain();
    sub_1D9684AD0(v3, (uint64_t)(v0 + 2));
    uint64_t v4 = v0[5];
    uint64_t v5 = v0[6];
    sub_1D968636C(v0 + 2, v4);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v5 + 8) + **(int **)(v5 + 8));
    BOOL v6 = (void *)swift_task_alloc();
    v0[12] = v6;
    *BOOL v6 = v0;
    v6[1] = sub_1D9680D68;
    return v10(v4, v5);
  }
  else
  {
    uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v9 = MEMORY[0x1E4FBC860];
    return v8(v9);
  }
}

char *SyncedSettingsServiceManager.init()()
{
  uint64_t v26 = sub_1D99071E0();
  uint64_t v1 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_1D99071D0();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = sub_1D9906C80();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v25 = OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_ubiquitousStoreQueue;
  v24[1] = sub_1D968E084(0, (unint64_t *)&qword_1EBE2B050);
  BOOL v6 = v0;
  sub_1D9906C70();
  uint64_t v28 = MEMORY[0x1E4FBC860];
  sub_1D968DFE4((unint64_t *)&qword_1EBE2B040, MEMORY[0x1E4FBCC10]);
  sub_1D96867CC((uint64_t *)&unk_1EBE2AFE0);
  sub_1D968E11C((unint64_t *)&qword_1EBE2AFF0, (uint64_t *)&unk_1EBE2AFE0);
  sub_1D99073F0();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v26);
  *(void *)(v24[2] + v25) = sub_1D9907220();
  uint64_t v7 = OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_sharedOTPDefaults;
  id v8 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  uint64_t v9 = (void *)sub_1D9906D70();
  id v10 = objc_msgSend(v8, sel_initWithSuiteName_, v9);

  *(void *)&v6[v7] = v10;
  if (qword_1EBE2AFA8 != -1) {
    swift_once();
  }
  uint64_t v11 = (void *)qword_1EBE2AFA0;
  *(void *)&v6[OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_remoteStorageDelegate] = qword_1EBE2AFA0;
  uint64_t v12 = self;
  id v13 = v11;
  id v14 = objc_msgSend(v12, sel_sharedInstance);
  *(void *)&v6[OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_localStorageDelegate] = v14;
  id v15 = &v6[OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_localDomain];
  *(void *)id v15 = 0xD000000000000013;
  *((void *)v15 + 1) = 0x80000001D9930820;
  uint64_t v16 = &v6[OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_remoteDomain];
  *(void *)uint64_t v16 = 0xD000000000000021;
  *((void *)v16 + 1) = 0x80000001D9930840;

  uint64_t v17 = (objc_class *)type metadata accessor for SyncedSettingsServiceManager();
  v27.receiver = v6;
  v27.super_class = v17;
  id v18 = objc_msgSendSuper2(&v27, sel_init);
  uint64_t v19 = self;
  uint64_t v20 = (char *)v18;
  id v21 = objc_msgSend(v19, sel_defaultCenter);
  objc_msgSend(v21, sel_addObserver_selector_name_object_, v20, sel_handleDidChangeWithNotification_, *MEMORY[0x1E4F28A30], *(void *)&v20[OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_remoteStorageDelegate]);

  id v22 = objc_msgSend(v19, sel_defaultCenter);
  objc_msgSend(v22, sel_addObserver_selector_name_object_, v20, sel_cloudkitStateEnabledReturnedWithNotification_, @"com.apple.IMDaemonCore.IMDCKUtilities.MiCEnabledStateReturned", 0);

  sub_1D967F19C(0, 0);
  return v20;
}

uint64_t sub_1D96823C0()
{
  v0[3] = sub_1D9906A40();
  v0[4] = sub_1D9907010();
  v0[5] = sub_1D9907000();
  uint64_t v2 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D9680F88, v2, v1);
}

void sub_1D9682464(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  BOOL v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      uint64_t v33 = (uint64_t)v5;
      __int16 v34 = 2112;
      uint64_t v35 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "accountInfoWithCompletionHandler called with accountInfo %@, error %@", buf, 0x16u);
    }
  }
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v33 = (uint64_t)v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Checking for cloudkit account info failed with error: %@ ", buf, 0xCu);
      }
    }
LABEL_10:
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    uint64_t v9 = [MEMORY[0x1E4F6E720] sharedInstance];
    int v10 = [v9 getBoolFromDomain:*MEMORY[0x1E4F6CF00] forKey:@"ForceInvalidCredentials"];

    uint64_t v11 = [MEMORY[0x1E4F6C360] sharedInstance];
    int v12 = [v11 isInternalInstall];

    if ((v12 & v10) != 0)
    {
      id v13 = [*(id *)(a1 + 32) syncState];
      [v13 removeObjectFromAnalyticSyncDatesDictionaryForKey:*MEMORY[0x1E4F6CFD8]];

      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      switch([v5 accountStatus])
      {
        case 0:
          uint64_t v26 = [*(id *)(a1 + 32) _createAccountError:@"failed fetching account status"];
          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();

          break;
        case 1:
        case 2:
        case 4:
          int v14 = [*(id *)(a1 + 32) _checkEligibilityWithAccountInfo:v5];
          uint64_t v15 = [v5 accountPartition];
          if (IMOSLoggingEnabled())
          {
            uint64_t v16 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              uint64_t v17 = @"NO";
              if (v14) {
                id v18 = @"YES";
              }
              else {
                id v18 = @"NO";
              }
              if (v15 == 2) {
                uint64_t v17 = @"YES";
              }
              *(_DWORD *)buf = 138412546;
              uint64_t v33 = (uint64_t)v18;
              __int16 v34 = 2112;
              uint64_t v35 = v17;
              _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Checking for cloudkit eligibility returned: %@ inCarry: %@", buf, 0x16u);
            }
          }
          BOOL v19 = v15 == 2;
          uint64_t v20 = [MEMORY[0x1E4F6E890] sharedInstance];
          id v21 = v20;
          if (v19) {
            id v22 = &unk_1F33C5670;
          }
          else {
            id v22 = &unk_1F33C5640;
          }
          [v20 trackEvent:*MEMORY[0x1E4F6D7B8] withCount:v22];

          char v23 = [v5 hasValidCredentials];
          uint64_t v24 = *(void *)(a1 + 40);
          if (v23)
          {
            if (v14) {
              uint64_t v25 = 4;
            }
            else {
              uint64_t v25 = 3;
            }
            (*(void (**)(uint64_t, uint64_t, void))(v24 + 16))(v24, v25, 0);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, void))(v24 + 16))(v24, 2, 0);
          }
          break;
        case 3:
          goto LABEL_10;
        default:
          if (IMOSLoggingEnabled())
          {
            objc_super v27 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              uint64_t v28 = [v5 accountStatus];
              *(_DWORD *)buf = 134217984;
              uint64_t v33 = v28;
              _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "Unrecognized account status %ld", buf, 0xCu);
            }
          }
          uint64_t v29 = *(void **)(a1 + 32);
          uint64_t v30 = objc_msgSend(NSString, "stringWithFormat:", @"Unrecognized account status %ld", objc_msgSend(v5, "accountStatus"));
          uint64_t v31 = [v29 _createAccountError:v30];

          (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
          break;
      }
    }
  }
}

void sub_1D9682950(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (!v6) {
      goto LABEL_16;
    }
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      if (a2 > 4) {
        id v8 = 0;
      }
      else {
        id v8 = off_1E6B73050[a2];
      }
      int v11 = 138412546;
      int v12 = v8;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Fetched cloud kit account status: %@, error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  else
  {
    if (!v6) {
      goto LABEL_16;
    }
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      if (a2 > 4) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = off_1E6B73050[a2];
      }
      int v11 = 138412290;
      int v12 = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Fetched cloud kit account status: %@", (uint8_t *)&v11, 0xCu);
    }
  }

LABEL_16:
  uint64_t v10 = *(void *)(a1 + 32);
  if (v10) {
    (*(void (**)(uint64_t, unint64_t, id))(v10 + 16))(v10, a2, v5);
  }
}

uint64_t sub_1D9682AFC(unint64_t a1)
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
    if (!v2) {
      return v3;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t result = sub_1D968DE48(0, v2 & ~(v2 >> 63), 0);
    if (v2 < 0) {
      break;
    }
    uint64_t v5 = 0;
    uint64_t v3 = v15;
    while (v2 != v5)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x1E01680D0](v5, a1);
      }
      else {
        id v6 = *(id *)(a1 + 8 * v5 + 32);
      }
      uint64_t v7 = v6;
      id v8 = objc_msgSend(v6, sel_internalName);
      uint64_t v9 = sub_1D9906DA0();
      uint64_t v11 = v10;

      unint64_t v13 = *(void *)(v15 + 16);
      unint64_t v12 = *(void *)(v15 + 24);
      if (v13 >= v12 >> 1) {
        sub_1D968DE48(v12 > 1, v13 + 1, 1);
      }
      ++v5;
      *(void *)(v15 + 16) = v13 + 1;
      uint64_t v14 = v15 + 16 * v13;
      *(void *)(v14 + 32) = v9;
      *(void *)(v14 + 40) = v11;
      if (v2 == v5) {
        return v3;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1D9907660();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_1D9682C78()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v5 = (void *)v0[10];
  uint64_t v4 = v0[11];
  type metadata accessor for ClientConnection();
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = sub_1D968E4D4(v2, 0, v3, v1, v6);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel__setQueue_, *(void *)(v4 + 160));
  sub_1D968E084(0, (unint64_t *)&unk_1EBE2B010);
  id v8 = (void *)sub_1D9907170();
  objc_msgSend(v5, sel_setExportedInterface_, v8);

  id v9 = objc_allocWithZone(MEMORY[0x1E4F6E7E8]);
  v0[6] = sub_1D96852EC;
  v0[7] = v7;
  uint64_t v10 = MEMORY[0x1E4F143A8];
  v0[2] = MEMORY[0x1E4F143A8];
  v0[3] = 1107296256;
  v0[4] = sub_1D9685248;
  v0[5] = &unk_1F3393220;
  uint64_t v11 = _Block_copy(v0 + 2);
  swift_retain();
  id v12 = objc_msgSend(v9, sel_initWithProtocol_forwardingHandler_, &unk_1F342B3A8, v11);
  _Block_release(v11);
  swift_release();
  v0[9] = &unk_1F342B3A8;
  objc_msgSend(v5, sel_setExportedObject_, swift_dynamicCastObjCProtocolUnconditional());

  unint64_t v13 = (void *)sub_1D9907180();
  objc_msgSend(v5, sel_setRemoteObjectInterface_, v13);

  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v5;
  v0[6] = sub_1D989A51C;
  v0[7] = v14;
  v0[2] = v10;
  v0[3] = 1107296256;
  v0[4] = sub_1D96817C0;
  v0[5] = &unk_1F3393270;
  uint64_t v15 = _Block_copy(v0 + 2);
  id v16 = v5;
  swift_release();
  objc_msgSend(v16, sel_setInterruptionHandler_, v15);
  _Block_release(v15);
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = v16;
  v17[3] = v7;
  v17[4] = v4;
  v0[6] = sub_1D989A56C;
  v0[7] = v17;
  v0[2] = v10;
  v0[3] = 1107296256;
  v0[4] = sub_1D96817C0;
  v0[5] = &unk_1F33932C0;
  id v18 = _Block_copy(v0 + 2);
  swift_retain();
  id v19 = v16;
  swift_retain();
  swift_release();
  objc_msgSend(v19, sel_setInvalidationHandler_, v18);
  _Block_release(v18);
  swift_beginAccess();
  uint64_t v20 = swift_retain();
  MEMORY[0x1E0167A30](v20);
  if (*(void *)((*(void *)(v4 + 144) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v4 + 144) & 0xFFFFFFFFFFFFFF8)
                                                                                      + 0x18) >> 1)
    sub_1D9906F60();
  id v21 = (void *)v0[10];
  sub_1D9906F80();
  sub_1D9906F40();
  swift_endAccess();
  objc_msgSend(v21, sel_resume);
  id v22 = v21;
  char v23 = sub_1D9906B80();
  os_log_type_t v24 = sub_1D9907120();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v26 = (void *)v0[10];
  if (v25)
  {
    objc_super v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)objc_super v27 = 67109120;
    *((_DWORD *)v0 + 4) = objc_msgSend(v26, sel_processIdentifier);
    sub_1D9907370();

    _os_log_impl(&dword_1D967A000, v23, v24, "Resumed connection for PID %d", v27, 8u);
    MEMORY[0x1E016AD90](v27, -1, -1);

    swift_release();
  }
  else
  {
    swift_release();
  }
  uint64_t v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t sub_1D968311C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_1D9907090();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1D96831B4(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1D96831B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  sub_1D99077C0();
  swift_bridgeObjectRetain();
  sub_1D9906DF0();
  uint64_t v8 = sub_1D99077F0();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    id v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (sub_1D9907710() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = (uint64_t *)(*(void *)(*v3 + 48) + 16 * v10);
      uint64_t v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      id v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (sub_1D9907710() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  sub_1D9683364(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t sub_1D9683364(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    sub_1D98FA76C();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1D98FBB04();
      goto LABEL_22;
    }
    sub_1D98FC1C4();
  }
  uint64_t v11 = *v4;
  sub_1D99077C0();
  sub_1D9906DF0();
  uint64_t result = sub_1D99077F0();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    uint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = sub_1D9907710(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = sub_1D9907750();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        id v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = sub_1D9907710();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (uint64_t *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t sub_1D9683CC4()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)(sub_1D9907280() + 16);
  if (v2)
  {
    uint64_t v3 = 0;
    uint64_t v24 = OBJC_IVAR___IMDSyncedSettingsServiceManager_Impl_localStorageDelegate;
    while (1)
    {
      uint64_t v4 = sub_1D9907250();
      unint64_t v6 = v5;
      swift_bridgeObjectRetain();
      sub_1D9907240();
      if (v7)
      {
        if (qword_1EBE2A878 != -1) {
          swift_once();
        }
        uint64_t v12 = sub_1D9906BA0();
        sub_1D9686810(v12, (uint64_t)qword_1EBE2C250);
        swift_bridgeObjectRetain_n();
        uint64_t v13 = sub_1D9906B80();
        os_log_type_t v14 = sub_1D9907140();
        if (os_log_type_enabled(v13, v14))
        {
          uint64_t v15 = swift_slowAlloc();
          uint64_t v16 = v2;
          uint64_t v17 = v1;
          uint64_t v18 = swift_slowAlloc();
          *(void *)&long long v26 = v18;
          *(_DWORD *)uint64_t v15 = 136315138;
          swift_bridgeObjectRetain();
          *(void *)(v15 + 4) = sub_1D96863B0(v4, v6, (uint64_t *)&v26);
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1D967A000, v13, v14, "SyncedSettingsManager tried to get a local synced setting with an unknown key: %s", (uint8_t *)v15, 0xCu);
          swift_arrayDestroy();
          uint64_t v19 = v18;
          uint64_t v1 = v17;
          uint64_t v2 = v16;
          MEMORY[0x1E016AD90](v19, -1, -1);
          MEMORY[0x1E016AD90](v15, -1, -1);
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        uint64_t v8 = *(void **)(v1 + v24);
        if (v8)
        {
          unint64_t v9 = (void *)sub_1D9906D70();
          unint64_t v10 = (void *)sub_1D9906D70();
          id v11 = objc_msgSend(v8, sel_getValueFromDomain_forKey_, v9, v10);

          if (v11)
          {
            sub_1D99073D0();
            swift_unknownObjectRelease();
          }
          else
          {
            memset(v25, 0, sizeof(v25));
          }
          sub_1D9684014((uint64_t)v25, (uint64_t)&v26, &qword_1EBE2B0C0);
          goto LABEL_16;
        }
      }
      long long v26 = 0u;
      long long v27 = 0u;
LABEL_16:
      swift_bridgeObjectRelease();
      uint64_t v20 = *((void *)&v27 + 1);
      sub_1D9684460((uint64_t)&v26);
      if (!v20)
      {
        sub_1D9907260();
        uint64_t v21 = sub_1D9907250();
        sub_1D98AC634(&v26, v21, v22);
        swift_bridgeObjectRelease();
        sub_1D9686484((uint64_t)&v26);
      }
      if (v2 == ++v3) {
        return swift_bridgeObjectRelease();
      }
    }
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D9684014(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1D96867CC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D9684078(void *a1)
{
  uint64_t v3 = *(void *)(*(void *)(v1 + 128) + 16);
  if (!v3)
  {
    if (qword_1EBE2AFC8 != -1) {
      swift_once();
    }
    uint64_t v10 = sub_1D9906BA0();
    sub_1D9686810(v10, (uint64_t)qword_1EBE2C2E0);
    id v11 = sub_1D9906B80();
    os_log_type_t v12 = sub_1D9907120();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl(&dword_1D967A000, v11, v12, "No required entitlements have been specified, allowing all clients", v13, 2u);
      MEMORY[0x1E016AD90](v13, -1, -1);
    }

    return 1;
  }
  for (uint64_t i = (unint64_t *)(swift_bridgeObjectRetain() + 40); ; i += 2)
  {
    uint64_t v6 = *(i - 1);
    unint64_t v5 = *i;
    swift_bridgeObjectRetain();
    char v7 = (void *)sub_1D9906D70();
    id v8 = objc_msgSend(a1, sel_valueForEntitlement_, v7);

    if (v8)
    {
      sub_1D99073D0();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v22, 0, sizeof(v22));
    }
    sub_1D96844C0((uint64_t)v22, (uint64_t)v23);
    if (!v23[3])
    {
      swift_bridgeObjectRelease();
      sub_1D9684460((uint64_t)v23);
      goto LABEL_4;
    }
    sub_1D968E084(0, (unint64_t *)&qword_1EBE2B080);
    if (swift_dynamicCast()) {
      break;
    }
LABEL_3:
    swift_bridgeObjectRelease();
LABEL_4:
    if (!--v3)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  if (!objc_msgSend(v21, sel_BOOLValue))
  {

    goto LABEL_3;
  }
  swift_bridgeObjectRelease();
  if (qword_1EBE2AFC8 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_1D9906BA0();
  sub_1D9686810(v15, (uint64_t)qword_1EBE2C2E0);
  swift_bridgeObjectRetain();
  id v16 = a1;
  uint64_t v17 = sub_1D9906B80();
  os_log_type_t v18 = sub_1D9907120();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    v23[0] = v20;
    *(_DWORD *)uint64_t v19 = 67109378;
    LODWORD(v22[0]) = objc_msgSend(v16, sel_processIdentifier);
    sub_1D9907370();

    *(_WORD *)(v19 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(void *)&v22[0] = sub_1D96863B0(v6, v5, v23);
    sub_1D9907370();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D967A000, v17, v18, "Client %d has entitlement %s", (uint8_t *)v19, 0x12u);
    uint64_t v9 = 1;
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v20, -1, -1);
    MEMORY[0x1E016AD90](v19, -1, -1);

    return v9;
  }

  swift_bridgeObjectRelease_n();
  return 1;
}

uint64_t sub_1D9684460(uint64_t a1)
{
  uint64_t v2 = sub_1D96867CC(&qword_1EBE2B0C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1D96844C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D96867CC(&qword_1EBE2B0C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

BOOL sub_1D9684528(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 service];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t sub_1D9684568()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[11] + 1;
  sub_1D9684700(v0[13]);
  sub_1D9686484((uint64_t)(v0 + 2));
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = v0[7];
    BOOL v4 = (uint64_t (*)(uint64_t))v0[1];
    return v4(v3);
  }
  else
  {
    uint64_t v6 = v0[11] + 1;
    v0[11] = v6;
    sub_1D9684AD0(v0[9] + 40 * v6 + 32, (uint64_t)(v0 + 2));
    uint64_t v7 = v0[5];
    uint64_t v8 = v0[6];
    sub_1D968636C(v0 + 2, v7);
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v8 + 8) + **(int **)(v8 + 8));
    uint64_t v9 = (void *)swift_task_alloc();
    v0[12] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1D9680D68;
    return v10(v7, v8);
  }
}

uint64_t sub_1D9684700(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1D9907660();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1D9907660();
    swift_bridgeObjectRelease();
    uint64_t v6 = v5 + v3;
    if (!__OFADD__(v5, v3)) {
      goto LABEL_5;
    }
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3)) {
    goto LABEL_25;
  }
LABEL_5:
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  unint64_t *v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x1E01680E0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    unint64_t *v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    uint64_t result = sub_1D96848CC(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1D9907660();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return sub_1D9906F40();
}

uint64_t sub_1D96848CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1D9907660();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1D9907660();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_1D98EFFD0();
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_1D96867CC(&qword_1EA8CA1E8);
          uint64_t v12 = sub_1D9899CBC(v16, i, a3);
          uint64_t v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for ClientConnection();
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = sub_1D99076A0();
  __break(1u);
  return result;
}

uint64_t sub_1D9684AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for ClientConnection()
{
  return self;
}

uint64_t sub_1D9684B58(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [a2 unreadCount];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

BOOL sub_1D9684BD4(uint64_t a1, void *a2)
{
  uint64_t v3 = [a2 service];
  BOOL v4 = v3 == *(void **)(a1 + 32);

  return v4;
}

uint64_t sub_1D9684C14()
{
  uint64_t v34 = v0;
  unint64_t v1 = *(void *)(v0 + 112);
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v2 = sub_1D9685040(v1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  if (qword_1EBE2AFC8 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_1D9906BA0();
  sub_1D9686810(v3, (uint64_t)qword_1EBE2C2E0);
  swift_bridgeObjectRetain();
  BOOL v4 = sub_1D9906B80();
  os_log_type_t v5 = sub_1D9907130();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (const char *)v31[12];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    uint64_t v32 = v29;
    *(_DWORD *)uint64_t v7 = 136315394;
    uint64_t v8 = NSStringFromSelector(v6);
    uint64_t v9 = sub_1D9906DA0();
    unint64_t v11 = v10;

    v31[4] = sub_1D96863B0(v9, v11, &v32);
    uint64_t v28 = (uint64_t *)(v0 + 40);
    sub_1D9907370();
    swift_bridgeObjectRelease();
    uint64_t v30 = (uint8_t *)v7;
    *(_WORD *)(v7 + 12) = 2080;
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v12 = sub_1D9907660();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v12 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v13 = MEMORY[0x1E4FBC860];
    if (v12)
    {
      uint64_t v33 = MEMORY[0x1E4FBC860];
      uint64_t result = sub_1D968DE48(0, v12 & ~(v12 >> 63), 0);
      if (v12 < 0)
      {
        __break(1u);
        return result;
      }
      long long v27 = v4;
      uint64_t v15 = 0;
      uint64_t v13 = v33;
      unint64_t v16 = v2 & 0xC000000000000001;
      unint64_t v17 = v2;
      do
      {
        if (v16) {
          MEMORY[0x1E01680D0](v15, v2);
        }
        else {
          swift_retain();
        }
        sub_1D9906860();
        swift_release();
        uint64_t v18 = v31[2];
        uint64_t v19 = v31[3];
        uint64_t v33 = v13;
        unint64_t v21 = *(void *)(v13 + 16);
        unint64_t v20 = *(void *)(v13 + 24);
        if (v21 >= v20 >> 1)
        {
          sub_1D968DE48(v20 > 1, v21 + 1, 1);
          uint64_t v13 = v33;
        }
        ++v15;
        *(void *)(v13 + 16) = v21 + 1;
        uint64_t v22 = v13 + 16 * v21;
        *(void *)(v22 + 32) = v18;
        *(void *)(v22 + 40) = v19;
        unint64_t v2 = v17;
      }
      while (v12 != v15);
      BOOL v4 = v27;
    }
    uint64_t v23 = MEMORY[0x1E0167A70](v13, MEMORY[0x1E4FBB1A0]);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    *uint64_t v28 = sub_1D96863B0(v23, v25, &v32);
    sub_1D9907370();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1D967A000, v4, v5, "Broadcasting %s to: %s", v30, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v29, -1, -1);
    MEMORY[0x1E016AD90](v30, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  long long v26 = (uint64_t (*)(void))v31[1];
  return v26();
}

uint64_t sub_1D9685040(unint64_t a1)
{
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (a1 >> 62)
  {
LABEL_16:
    uint64_t v2 = sub_1D9907660();
    if (v2) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      for (unint64_t i = 0; ; ++i)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1E01680D0](i, a1);
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1))
          {
LABEL_13:
            __break(1u);
            return v8;
          }
        }
        else
        {
          if (i >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_16;
          }
          swift_retain();
          unint64_t v4 = i + 1;
          if (__OFADD__(i, 1)) {
            goto LABEL_13;
          }
        }
        uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
        MEMORY[0x1F4188790](v5);
        sub_1D9906860();
        if (v7 == 1)
        {
          sub_1D99075C0();
          sub_1D99075F0();
          sub_1D9907600();
          sub_1D99075D0();
        }
        else
        {
          swift_release();
        }
        if (v4 == v2) {
          return v8;
        }
      }
    }
  }
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1D9685248(uint64_t a1, uint64_t a2, void *aBlock)
{
  unint64_t v4 = *(void (**)(uint64_t, uint64_t (*)(void *), uint64_t))(a1 + 32);
  uint64_t v5 = _Block_copy(aBlock);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = v5;
  swift_retain();
  v4(a2, sub_1D96871B0, v6);
  swift_release();

  return swift_release();
}

void sub_1D96852F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v7 = objc_msgSend(self, sel_currentConnection);
  if (v7)
  {
    uint64_t v8 = v7;
    objc_msgSend(v7, sel_auditToken);
    long long v11 = v14;
    long long v12 = aBlock;
  }
  else
  {
    long long v11 = 0u;
    long long v12 = 0u;
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = a1;
  *(_OWORD *)(v9 + 32) = v12;
  *(_OWORD *)(v9 + 48) = v11;
  *(void *)(v9 + 64) = a2;
  *(void *)(v9 + 72) = a3;
  uint64_t v15 = sub_1D9681804;
  uint64_t v16 = v9;
  *(void *)&long long aBlock = MEMORY[0x1E4F143A8];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v14 = sub_1D96817C0;
  *((void *)&v14 + 1) = &unk_1F33956E0;
  unint64_t v10 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  IMDSynchronouslyPerformBlockOnMainQueueWithDependency(v10);
  _Block_release(v10);
}

uint64_t sub_1D9685440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1D968544C(a1, a2, a3, *(void **)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40));
}

uint64_t sub_1D968544C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (a4)
  {
    swift_retain();
    id v15 = objc_msgSend(a4, sel_internalName);
    uint64_t v16 = sub_1D9906DA0();
    uint64_t v18 = v17;

    self;
    uint64_t v19 = swift_dynamicCastObjCClass();
    if (v19)
    {
      unint64_t v20 = (void *)v19;
      id v21 = a4;
      if (objc_msgSend(v20, sel_isSubService))
      {
        unsigned __int8 v22 = objc_msgSend(v20, sel_demandsBroadcasting);

        if ((v22 & 1) == 0)
        {
          swift_release();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
      }
    }
  }
  else
  {
    swift_retain();
    uint64_t v16 = 0;
    uint64_t v18 = 0;
  }
  unint64_t v24 = (void *)swift_allocObject();
  v24[2] = a5;
  void v24[3] = sub_1D9685FD8;
  v24[4] = v14;
  v24[5] = v16;
  v24[6] = v18;
  v24[7] = a6;
  v24[8] = a7;
  v24[9] = a1;
  id v25 = a5;
  swift_retain();
  sub_1D9906910();
  swift_release();

  return swift_release();
}

id sub_1D96859E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unint64_t v4 = +[IMDAccountController sharedInstance];
  uint64_t v5 = [v3 accountID];
  uint64_t v6 = [v4 accountForAccountID:v5];

  if (*(unsigned char *)(a1 + 40)
    && (!v6
     || ([v6 service],
         id v7 = objc_claimAutoreleasedReturnValue(),
         char v8 = [v7 supportsDatabase],
         v7,
         (v8 & 1) != 0)
     || (uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8),
         uint64_t v10 = *(void *)(v9 + 24),
         *(void *)(v9 + 24) = v10 + 1,
         v10 > 24)))
  {
    long long v11 = 0;
  }
  else
  {
    long long v11 = [v3 _dictionaryRepresentation];
  }

  return v11;
}

uint64_t sub_1D9685AE0(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v7 = 0;
  char v8 = &v7;
  uint64_t v9 = 0x2020000000;
  char v10 = 0;
  id v3 = (void *)MEMORY[0x1E016A370]();
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1D9684B58;
  v6[3] = &unk_1E6B76448;
  v6[4] = &v7;
  [v2 enumerateObjectsUsingBlock:v6];
  uint64_t v4 = *((unsigned __int8 *)v8 + 24);
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1D9685BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9685BC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = [a3 sortedArrayUsingComparator:&unk_1F3391680];
  [*(id *)(a1 + 32) setObject:v6 forKey:v5];
}

BOOL sub_1D9685C40(uint64_t a1, void *a2)
{
  return *(unsigned __int8 *)(a1 + 32) == [a2 isBlackholed];
}

uint64_t sub_1D9685EC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, void (*a6)(void *)@<X6>, char *a7@<X8>)
{
  char v10 = (void *)result;
  if (!a3 || (uint64_t result = sub_1D98DE648(a2, a3, *(void *)(result + 64)), (result))
    && ((uint64_t v12 = v10[5], v13 = a4 & ~v12, v14 = v12 & a5, !v13) ? (v15 = v14 == 0) : (v15 = 0), v15))
  {
    uint64_t v17 = v10[3];
    uint64_t v18 = v10[4];
    sub_1D968636C(v10, v17);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18);
    v20[3] = swift_getObjectType();
    v20[0] = v19;
    a6(v20);
    uint64_t result = sub_1D9686484((uint64_t)v20);
    char v16 = 1;
  }
  else
  {
    char v16 = 0;
  }
  *a7 = v16;
  return result;
}

uint64_t sub_1D9685FB0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D9685FD8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1D9686000(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, const char *a5, void *a6, void *a7, void *a8)
{
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_1D968636C(a1, v14);
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v14, v15);
  uint64_t v18 = v17;
  swift_beginAccess();
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v18;
  swift_bridgeObjectRelease();
  if (qword_1EBE2AFC8 != -1) {
    swift_once();
  }
  uint64_t v19 = sub_1D9906BA0();
  sub_1D9686810(v19, (uint64_t)qword_1EBE2C2E0);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  unint64_t v20 = sub_1D9906B80();
  os_log_type_t v21 = sub_1D9907120();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v34 = a7;
    uint64_t v22 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v38 = v23;
    *(_DWORD *)uint64_t v22 = 136315650;
    swift_beginAccess();
    uint64_t v35 = a8;
    uint64_t v25 = *(void *)(a2 + 16);
    unint64_t v24 = *(void *)(a2 + 24);
    swift_bridgeObjectRetain();
    sub_1D96863B0(v25, v24, &v38);
    sub_1D9907370();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    swift_bridgeObjectRetain();
    sub_1D96863B0(a3, a4, &v38);
    sub_1D9907370();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v22 + 22) = 2080;
    long long v26 = NSStringFromSelector(a5);
    uint64_t v27 = sub_1D9906DA0();
    unint64_t v29 = v28;

    a8 = v35;
    sub_1D96863B0(v27, v29, &v38);
    sub_1D9907370();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D967A000, v20, v21, "Receiving message from client with route: %s id: %s selector: %s", (uint8_t *)v22, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v23, -1, -1);
    uint64_t v30 = v22;
    a7 = v34;
    MEMORY[0x1E016AD90](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  *a6 = a1[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a7 = a1[5];
  uint64_t v31 = a1[3];
  uint64_t v32 = a1[4];
  sub_1D968636C(a1, v31);
  *a8 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v31, v32);
  return swift_unknownObjectRelease();
}

void *sub_1D968636C(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1D96863B0(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1D96864D4(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_1D9686690((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_1D9686690((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  sub_1D9686484((uint64_t)v12);
  return v7;
}

uint64_t sub_1D9686484(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t sub_1D96864D4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1D9907380();
            uint64_t result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    uint64_t result = sub_1D9686848(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  uint64_t v8 = sub_1D99075B0();
  if (!v8)
  {
    sub_1D9907640();
    __break(1u);
LABEL_17:
    uint64_t result = sub_1D99076A0();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

uint64_t sub_1D9686690(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_1D96866EC()
{
  sub_1D96867CC((uint64_t *)&unk_1EBE2B060);
  sub_1D9906860();
  return v1;
}

uint64_t sub_1D968674C(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_remoteObjectProxy);
  sub_1D99073D0();
  swift_unknownObjectRelease();
  sub_1D96867CC((uint64_t *)&unk_1EBE2B060);
  return swift_dynamicCast();
}

uint64_t sub_1D96867CC(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t sub_1D9686810(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_1D9686848(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1D96868E0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_1D9882844(0, *(void *)(v2 + 16) + 1, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1D9882844(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1D96868E0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v2 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = sub_1D9686A58(v2, 0);
      if (v2 < 0) {
        break;
      }
      unint64_t v4 = v3;
      uint64_t v5 = sub_1D9907560();
      if (v6) {
        goto LABEL_14;
      }
      if (v5 == v2) {
        return (uint64_t)v4;
      }
      sub_1D9907640();
      __break(1u);
LABEL_10:
      uint64_t v2 = sub_1D9906E80();
      if (!v2) {
        return MEMORY[0x1E4FBC860];
      }
    }
    sub_1D99076A0();
    __break(1u);
LABEL_14:
    uint64_t result = sub_1D9907640();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void *sub_1D9686A58(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1D96867CC((uint64_t *)&unk_1EBE2B0A8);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_1D9686AC4()
{
  return 0x203A444950;
}

uint64_t sub_1D9686B5C(uint64_t a1, const char *a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, void (*a7)(unint64_t *))
{
  sub_1D9906860();
  unint64_t v13 = v60;
  unint64_t v12 = v61;
  uint64_t v66 = 0;
  uint64_t v67 = MEMORY[0x1E4FBC860];
  uint64_t v65 = 0;
  uint64_t v14 = swift_allocObject();
  strcpy((char *)(v14 + 16), "uninitialized");
  *(_WORD *)(v14 + 30) = -4864;
  uint64_t v57 = v13;
  sub_1D9906860();
  uint64_t v15 = *(void *)(v67 + 16);
  if (v15)
  {
    unint64_t v59 = v12;
    unint64_t v51 = HIDWORD(a3);
    unsigned int v52 = a3;
    unsigned int v53 = a4;
    int v54 = a5;
    unint64_t v49 = HIDWORD(a5);
    unint64_t v50 = HIDWORD(a4);
    unsigned int v55 = a6;
    unint64_t v48 = HIDWORD(a6);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    uint64_t v16 = (uint64_t *)(v67 + 40);
    uint64_t v17 = &selRef_setSyncTaskFactory_;
    aSelector = a2;
    do
    {
      unint64_t v18 = *(v16 - 1);
      uint64_t v19 = *v16;
      uint64_t ObjectType = swift_getObjectType();
      if (objc_msgSend((id)swift_unknownObjectRetain(), v17[124], a2))
      {
        uint64_t v21 = v66;
        if ((*(uint64_t (**)(uint64_t, const char *, uint64_t, uint64_t))(v19 + 24))(v66, a2, ObjectType, v19))
        {
          uint64_t v22 = v65;
          id v23 = objc_allocWithZone((Class)IMDClientRequestContext);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v24 = (void *)sub_1D9906D70();
          swift_bridgeObjectRelease();
          unint64_t v60 = __PAIR64__(v51, v52);
          unint64_t v61 = __PAIR64__(v50, v53);
          int v62 = v54;
          int v63 = v49;
          unint64_t v64 = __PAIR64__(v48, v55);
          id v25 = objc_msgSend(v23, sel_initWithListenerID_auditToken_capabilities_replyProxy_, v24, &v60, v21, v22);

          a2 = aSelector;
          swift_unknownObjectRelease();
          long long v26 = self;
          objc_msgSend(v26, sel_setCurrentContext_, v25);
          unint64_t v64 = ObjectType;
          unint64_t v60 = v18;
          swift_unknownObjectRetain();
          a7(&v60);
          sub_1D9686484((uint64_t)&v60);
          objc_msgSend(v26, sel_setCurrentContext_, 0);
          swift_unknownObjectRelease();

          uint64_t v17 = &selRef_setSyncTaskFactory_;
        }
        else
        {
          if (qword_1EBE2AFC8 != -1) {
            swift_once();
          }
          uint64_t v27 = sub_1D9906BA0();
          sub_1D9686810(v27, (uint64_t)qword_1EBE2C2E0);
          swift_unknownObjectRetain_n();
          swift_bridgeObjectRetain_n();
          unint64_t v28 = sub_1D9906B80();
          os_log_type_t v29 = sub_1D9907120();
          if (os_log_type_enabled(v28, v29))
          {
            uint64_t v30 = swift_slowAlloc();
            uint64_t v47 = swift_slowAlloc();
            unint64_t v60 = v47;
            *(_DWORD *)uint64_t v30 = 136315906;
            log = v28;
            uint64_t v31 = NSStringFromSelector(aSelector);
            os_log_type_t type = v29;
            uint64_t v32 = sub_1D9906DA0();
            unint64_t v34 = v33;

            *(void *)(v30 + 4) = sub_1D96863B0(v32, v34, (uint64_t *)&v60);
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 12) = 2080;
            swift_bridgeObjectRetain();
            *(void *)(v30 + 14) = sub_1D96863B0(v57, v59, (uint64_t *)&v60);
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v30 + 22) = 2080;
            id v35 = (id)IMStringFromClientCapabilities();
            uint64_t v36 = sub_1D9906DA0();
            unint64_t v38 = v37;

            *(void *)(v30 + 24) = sub_1D96863B0(v36, v38, (uint64_t *)&v60);
            swift_bridgeObjectRelease();
            *(_WORD *)(v30 + 32) = 2080;
            (*(void (**)(uint64_t, uint64_t))(v19 + 8))(ObjectType, v19);
            id v39 = (id)IMStringFromClientCapabilities();
            uint64_t v40 = sub_1D9906DA0();
            unint64_t v42 = v41;

            *(void *)(v30 + 34) = sub_1D96863B0(v40, v42, (uint64_t *)&v60);
            swift_unknownObjectRelease_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1D967A000, log, type, "Rejecting %s for client %s as it has insufficient capabilities %s, needs %s", (uint8_t *)v30, 0x2Au);
            swift_arrayDestroy();
            MEMORY[0x1E016AD90](v47, -1, -1);
            uint64_t v43 = v30;
            a2 = aSelector;
            MEMORY[0x1E016AD90](v43, -1, -1);
            swift_unknownObjectRelease();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease_n();
          }
          uint64_t v17 = &selRef_setSyncTaskFactory_;
        }
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v16 += 2;
      --v15;
    }
    while (v15);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_release();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1D96871B0(void *a1)
{
  return sub_1D96871B8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1D96871B8(void *a1, uint64_t a2)
{
  sub_1D968636C(a1, a1[3]);
  uint64_t v3 = sub_1D9907700();
  (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v3);

  return swift_unknownObjectRelease();
}

BOOL sub_1D9687218(uint64_t a1, uint64_t a2, uint64_t (**a3)(uint64_t, uint64_t))
{
  uint64_t v6 = a3[2](a2, (uint64_t)a3);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    unint64_t v12 = a3[4];
    uint64_t v8 = v6 + 40;
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = v12(a2, (uint64_t)a3);
      MEMORY[0x1F4188790](v9);
      sub_1D9906860();
      swift_release();
      swift_bridgeObjectRelease();
      if (v13 != 1) {
        break;
      }
      v8 += 16;
      if (!--v7) {
        goto LABEL_5;
      }
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v10 = a3[1];
    return (v10(a2, (uint64_t)a3) & ~a1) == 0 || ((v10(a2, (uint64_t)a3) & 0xFFFFFFFFFBFFFFFBLL | 0x4000000) & ~a1) == 0;
  }
}

uint64_t ClientRequestHandling.requiredEntitlements.getter()
{
  return MEMORY[0x1E4FBC860];
}

BOOL ClientRequestHandling.requirementsMet(by:for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (**a4)(uint64_t, uint64_t))
{
  return sub_1D9687218(a1, a3, a4);
}

void sub_1D9688658(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    size_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "fetchCloudKitAccountStatusAndCheckForAccountNeedsRepairWithCompletion failed with error: %@", (uint8_t *)&v8, 0xCu);
    }
  }
  uint64_t v6 = [*(id *)(a1 + 32) syncState];
  [v6 _startBatchChange];
  [*(id *)(a1 + 32) syncStateWillUpdate:v6];
  [v6 _finishBatchChange];
  uint64_t v7 = [*(id *)(a1 + 32) logHandle];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_1D98FDD0C(v6);
  }

  [v6 broadcastSyncState];
}

void sub_1D96887F8(uint64_t a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) serializedRepresentation];
  uint64_t v3 = [*(id *)(a1 + 32) logHandle];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
  {
    int v13 = 138412290;
    uint64_t v14 = v2;
    _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "broadcasting sync state changed event: %@", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v4 = *MEMORY[0x1E4F6D148];
  size_t v5 = [v2 objectForKey:*MEMORY[0x1E4F6D148]];

  uint64_t v6 = [*(id *)(a1 + 32) logHandle];
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_INFO);
  if (v5)
  {
    if (v7)
    {
      int v8 = [v2 objectForKey:v4];
      [v8 unsignedIntValue];
      id v9 = IMStringFromIMCloudKitSyncJobState();
      int v13 = 138412290;
      uint64_t v14 = v9;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "broadcasting sync job state: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else if (v7)
  {
    LOWORD(v13) = 0;
    _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "broadcasting sync job state: nil", (uint8_t *)&v13, 2u);
  }

  uint64_t v10 = +[IMDBroadcastController sharedProvider];
  uint64_t v11 = [v10 broadcasterForCloudSyncListeners];
  [v11 updateCloudKitStateWithDictionary:v2];

  unint64_t v12 = [MEMORY[0x1E4F28EB8] defaultCenter];
  objc_msgSend(v12, "__mainThreadPostNotificationName:object:", @"com.apple.IMCore.IMCloudKitHooks.ValuesChanged", 0);
}

void sub_1D9688DA0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        id v11 = v5;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Not checking account for needed repair because fetching account status returned an error: %@", (uint8_t *)&v10, 0xCu);
      }
    }
  }
  else
  {
    BOOL v7 = [*(id *)(a1 + 32) syncState];
    [v7 _startBatchChange];
    [v7 setAccountStatus:a2];
    [v7 setEligibleForTruthZone:a2 == 4];
    [*(id *)(a1 + 32) _setEligibleToToggleMiCSwitch:a2 == 4];
    if ([*(id *)(a1 + 32) shouldRepairAccountWithAccountStatus:a2 securityLevel:*(void *)(a1 + 48)])
    {
      int v8 = [*(id *)(a1 + 32) syncState];
      [v8 setErrorToAccountNeedsRepair];
    }
    [v7 _finishBatchChange];
    [v7 broadcastSyncState];
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

uint64_t sub_1D968A024(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  BOOL v7 = (void *)MEMORY[0x1E016A370]();
  int v8 = [v5 firstObject];
  uint64_t v9 = [v6 firstObject];
  int v10 = *(void **)(a1 + 32);
  id v11 = [v8 pinningIdentifier];
  int v12 = [v10 containsObject:v11];

  int v13 = *(void **)(a1 + 32);
  uint64_t v14 = [v9 pinningIdentifier];
  int v15 = [v13 containsObject:v14];

  if (!v12 || v15)
  {
    if ((v12 | v15 ^ 1) == 1) {
      uint64_t v16 = [v8 compareBySequenceNumberAndDateDescending:v9];
    }
    else {
      uint64_t v16 = 1;
    }
  }
  else
  {
    uint64_t v16 = -1;
  }

  return v16;
}

void sub_1D968A278(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 supportsCapability:*(void *)(a1 + 32)]) {
    [*(id *)(a1 + 40) addObject:v4];
  }
}

void sub_1D968B388(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (*(unsigned char *)(a1 + 48)) {
    [*(id *)(a1 + 32) repairInconsistentMergedChatsIfNecessary:v5];
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v17;
    uint64_t v11 = *MEMORY[0x1E4F6CDD8];
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        int v13 = *(void **)(*((void *)&v16 + 1) + 8 * v12);
        uint64_t v14 = (void *)MEMORY[0x1E016A370](v8);
        int v15 = objc_msgSend(v13, "copyDictionaryRepresentation:", 1, (void)v16);
        if (v15)
        {
          if ([v6 count]) {
            [v15 setObject:v6 forKeyedSubscript:v11];
          }
          [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) addObject:v15];
        }

        ++v12;
      }
      while (v9 != v12);
      uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
      uint64_t v9 = v8;
    }
    while (v8);
  }
}

void sub_1D968CD20(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    id v2 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory("Chat");
      id v4 = objc_claimAutoreleasedReturnValue(v3);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v5 = 138412290;
        id v6 = v2;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "*********** Caught exception while fixing up chat participants on client connection %@ **********", (uint8_t *)&v5, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D968CCD8);
  }
  _Unwind_Resume(a1);
}

void sub_1D968CD3C()
{
}

id sub_1D968D3E0(void *a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  if (v1)
  {
    id v2 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA80]), "initWithCapacity:", objc_msgSend(v1, "count"));
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = v1;
    uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v14 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          uint64_t v9 = objc_msgSend(v8, "ID", (void)v13);
          uint64_t v10 = [v9 length];

          if (v10)
          {
            uint64_t v11 = [v8 ID];
            [v2 addObject:v11];
          }
        }
        uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v5);
    }
  }
  else
  {
    id v2 = 0;
  }

  return v2;
}

void IMDSynchronouslyPerformBlockOnMainQueueWithDependency(void *a1)
{
  id v1 = a1;
  id v2 = MEMORY[0x1E4F14428];
  dispatch_assert_queue_not_V2(MEMORY[0x1E4F14428]);
  v7[0] = 0;
  v7[1] = 0;
  pthread_main_thread_np();
  pthread_dependency_init_np();
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1D9681778;
  v4[3] = &unk_1E6B77118;
  id v5 = v1;
  uint64_t v6 = v7;
  id v3 = v1;
  dispatch_async(v2, v4);

  pthread_dependency_wait_np();
}

uint64_t sub_1D968D690(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

uint64_t sub_1D968D698@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 56);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1D968D6A4(void *a1)
{
  return sub_1D9686000(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(const char **)(v1 + 40), *(void **)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64));
}

uint64_t sub_1D968D6C4()
{
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 16);
    sub_1D96867CC(&qword_1EBE2B630);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_1D991D710;
    *(void *)(v2 + 32) = *(void *)(v1 + 128);
    uint64_t v6 = v2;
    sub_1D9906F40();
    uint64_t v3 = v6;
    swift_retain();
  }
  else
  {
    uint64_t v3 = MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v4(v3);
}

uint64_t sub_1D968D788()
{
  uint64_t v2 = *v0;
  *(void *)(v1 + 40) = *v0;
  return MEMORY[0x1F4188298](sub_1D9681088, v2, 0);
}

uint64_t sub_1D968D9C0(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Clear failure badge notification", v5, 2u);
    }
  }
  [a2 clearFailureBadge];
  return [a2 checkIfUnexpectedlyLoggedOut];
}

__n128 initializeWithTake for ClientConnection.State(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

void sub_1D968DA80(uint64_t a1, void *a2)
{
}

uint64_t sub_1D968DA90(uint64_t a1)
{
  return [*(id *)(a1 + 32) _checkIfUnexpectedlyLoggedOut];
}

uint64_t sub_1D968DA98(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__clearFailureBadge);
}

_OWORD *sub_1D968DAA0(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_1D968DAB0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1D968DBA8(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_1D968DAB0;
  return v6(a1);
}

uint64_t sub_1D968DC84(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  id v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *id v5 = v2;
  v5[1] = sub_1D968D850;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1EA8C9DD8 + dword_1EA8C9DD8);
  return v6(a1, v4);
}

unint64_t sub_1D968DD3C(uint64_t a1)
{
  uint64_t v2 = sub_1D99074D0();

  return sub_1D968DD80(a1, v2);
}

unint64_t sub_1D968DD80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_1D989FC90(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x1E0168020](v9, a1);
      sub_1D988F068((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1D968DE48(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D967E6B8(a1, a2, a3, *v3);
  *uint64_t v3 = (char *)result;
  return result;
}

uint64_t sub_1D968DE68(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1D967F5C4(a1, a2, a3, (void *)*v3);
  *uint64_t v3 = result;
  return result;
}

uint64_t sub_1D968DEE4@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  if (a1[1]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(v4 | *a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1D968DF40@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_1D968DEE4(a1, a2);
}

uint64_t sub_1D968DF58()
{
  swift_getAtKeyPath();
  return v1;
}

uint64_t sub_1D968DF9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D968DFE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D968E02C()
{
  unint64_t result = qword_1EBE2B040;
  if (!qword_1EBE2B040)
  {
    sub_1D99071D0();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE2B040);
  }
  return result;
}

uint64_t sub_1D968E084(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_1D968E0C0()
{
  unint64_t result = qword_1EBE2AFF0;
  if (!qword_1EBE2AFF0)
  {
    sub_1D9882B74((uint64_t *)&unk_1EBE2AFE0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE2AFF0);
  }
  return result;
}

uint64_t sub_1D968E11C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1D9882B74(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D968E16C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_1D96867CC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1D968E1D0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1D968D850;
  return sub_1D968E290(a1, v4, v5, v7, v6);
}

uint64_t sub_1D968E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v8;
  *uint64_t v8 = v5;
  v8[1] = sub_1D968D850;
  v8[10] = a5;
  v8[11] = a4;
  return MEMORY[0x1F4188298](sub_1D9681B30, a4, 0);
}

uint64_t sub_1D968E340(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_1D968E37C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D968E3C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_1D968E418(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ClientConnection.set(id:capabilities:)()
{
  return sub_1D9906860();
}

uint64_t sub_1D968E4CC(uint64_t a1)
{
  return sub_1D967DAD4(a1, *(void *)(v1 + 16));
}

uint64_t sub_1D968E4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1D9680990(a1, a2, a3, a4, a5, (uint64_t (*)(void))type metadata accessor for XPCClientConnectionRouteProvider, (uint64_t)&off_1F3392FA8, (uint64_t)sub_1D968E4CC);
}

uint64_t sub_1D968E508(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = sub_1D96867CC(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1D968EB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K == %ld", *MEMORY[0x1E4F6CD78], a3);
}

__CFString *sub_1D9691038(unint64_t a1)
{
  if (a1 >= 5)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"Invalid Ingestion State: %ld", a1);
    uint64_t v1 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    uint64_t v1 = off_1E6B72AB8[a1];
  }

  return v1;
}

uint64_t sub_1D96936E4()
{
  uint64_t v0 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:1];
  uint64_t v1 = [v0 objectForKey:@"read-receipt-tracking"];
  char v2 = [v1 BOOLValue];

  if (v2) {
    return 0;
  }
  uint64_t v4 = [MEMORY[0x1E4F6C360] sharedInstance];
  uint64_t v5 = [v4 isInternalInstall];

  return v5;
}

uint64_t sub_1D9693A0C()
{
  qword_1EBE2B920 = objc_alloc_init(IMDAccountController);

  return MEMORY[0x1F41817F8]();
}

BOOL sub_1D9696820(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 service];
  if (v4 == *(void **)(a1 + 32))
  {
    uint64_t v6 = [v3 loginID];
    BOOL v5 = [v6 caseInsensitiveCompare:*(void *)(a1 + 40)] == 0;
  }
  else
  {
    BOOL v5 = 0;
  }

  return v5;
}

uint64_t sub_1D9696BCC(uint64_t a1, void *a2)
{
  id v3 = [a2 service];
  uint64_t v4 = [v3 supportsCapability:*(void *)(a1 + 32)];

  return v4;
}

BOOL sub_1D9696C64(uint64_t a1, void *a2)
{
  return [a2 loginStatus] == 4;
}

BOOL sub_1D9696CDC(uint64_t a1, void *a2)
{
  return [a2 loginStatus] == 4;
}

BOOL sub_1D9696D54(uint64_t a1, void *a2)
{
  return [a2 loginStatus] == 3;
}

BOOL sub_1D9696DCC(uint64_t a1, void *a2)
{
  return [a2 loginStatus] == 3;
}

uint64_t sub_1D96970CC(uint64_t a1, void *a2)
{
  return [a2 session];
}

BOOL sub_1D96970D4(uint64_t a1, void *a2)
{
  id v2 = a2;
  BOOL v4 = 0;
  if ([v2 isActive])
  {
    [v2 createSessionIfNecessary];
    id v3 = [v2 session];

    if (v3) {
      BOOL v4 = 1;
    }
  }

  return v4;
}

void sub_1D9698AEC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9698AA4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96992AC()
{
  qword_1EBE2BA50 = (uint64_t)os_log_create("com.apple.Messages", "IMDCKUtilities");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D96994A8()
{
  qword_1EBE2B928 = (uint64_t)objc_alloc_init((Class)objc_opt_class());

  return MEMORY[0x1F41817F8]();
}

void sub_1D9699654(uint64_t a1, int a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    BOOL v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      BOOL v5 = @"NO";
      if (a2) {
        BOOL v5 = @"YES";
      }
      int v7 = 138412290;
      uint64_t v8 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "key roll pending check returned: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  if (a2)
  {
    [*(id *)(a1 + 32) setErrorToKeyRollingError];
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v7) = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Added key roll pending error to sync state", (uint8_t *)&v7, 2u);
      }
    }
  }
}

uint64_t sub_1D9699BBC(uint64_t a1, int a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, a2 ^ 1u);
  }
  return result;
}

void sub_1D969A284(uint64_t a1, int a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = @"NO";
      if (a2) {
        int v7 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      unint64_t v20 = v7;
      __int16 v21 = 2112;
      id v22 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "isFirstSyncWithCompletion for checking account storage: %@, error: %@", buf, 0x16u);
    }
  }
  uint64_t v8 = *(void *)(a1 + 32);
  if (v5)
  {
    if (v8)
    {
      uint64_t v9 = (void *)MEMORY[0x1E4F28C58];
      uint64_t v10 = [v5 domain];
      uint64_t v11 = [v5 code];
      uint64_t v17 = *MEMORY[0x1E4F28568];
      uint64_t v18 = @"Is first sync check failed";
      uint64_t v12 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v18 forKeys:&v17 count:1];
      long long v13 = [v9 errorWithDomain:v10 code:v11 userInfo:v12];
      (*(void (**)(uint64_t, void, void, void *))(v8 + 16))(v8, 0, 0, v13);
    }
  }
  else if (a2)
  {
    if (v8)
    {
      long long v14 = +[IMDCKUtilities sharedInstance];
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 3221225472;
      _OWORD v15[2] = sub_1D969A4F0;
      v15[3] = &unk_1E6B72C88;
      id v16 = *(id *)(a1 + 32);
      [v14 checkiCloudQuota:v15];
    }
  }
  else if (v8)
  {
    (*(void (**)(void, void, void, void))(v8 + 16))(*(void *)(a1 + 32), 0, 0, 0);
  }
}

uint64_t sub_1D969A4F0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D969A670(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v11 = 134218242;
      unint64_t v12 = a2;
      __int16 v13 = 2112;
      unint64_t v14 = (unint64_t)v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "User quota completion block return with available Quota %llu, and Error: %@", (uint8_t *)&v11, 0x16u);
    }
  }
  if (v5)
  {
    uint64_t v7 = *(void *)(a1 + 40);
    if (v7) {
      (*(void (**)(uint64_t, void, void, id))(v7 + 16))(v7, 0, 0, v5);
    }
  }
  else
  {
    unint64_t v8 = [*(id *)(a1 + 32) currentStorageOnDevice];
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v11 = 134218240;
        unint64_t v12 = a2;
        __int16 v13 = 2048;
        unint64_t v14 = v8;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Available Quota in bytes:  and message database size: %llu, %llu", (uint8_t *)&v11, 0x16u);
      }
    }
    uint64_t v10 = *(void *)(a1 + 40);
    if (v8 <= a2)
    {
      if (v10) {
        (*(void (**)(uint64_t, void, void, void))(v10 + 16))(v10, 0, 0, 0);
      }
    }
    else if (v10)
    {
      (*(void (**)(uint64_t, unint64_t, void, void))(v10 + 16))(v10, v8 - a2, 0, 0);
    }
  }
}

void sub_1D969AB50(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D969AAA0);
  }
  _Unwind_Resume(a1);
}

void sub_1D969AE78(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v16 = v5;
      __int16 v17 = 2112;
      id v18 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Setting cloudkit enabled, exit record state: %@, error (%@)", buf, 0x16u);
    }
  }
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      unint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v16 = v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Unable to request exit record when trying to change iCloud enabled state.  Error: %@", buf, 0xCu);
      }
    }
    uint64_t v9 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v9 autoBugCaptureWithSubType:@"setCloudKitEnabled" errorPayload:v6];

    [*(id *)(a1 + 32) _didAttemptToUpdateCloudKitEnablementTo:*(unsigned __int8 *)(a1 + 40) result:0];
  }
  else if (v5)
  {
    uint64_t v10 = +[IMDCKExitManager sharedInstance];
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1D969B0C4;
    v13[3] = &unk_1E6B72CD8;
    v13[4] = *(void *)(a1 + 32);
    char v14 = *(unsigned char *)(a1 + 40);
    [v10 deleteExitRecordWithCompletion:v13];
  }
  else
  {
    unint64_t v12 = *(void **)(a1 + 32);
    uint64_t v11 = a1 + 32;
    [v12 setCloudKitSyncingEnabled:*(unsigned __int8 *)(v11 + 8)];
    [*(id *)v11 _didAttemptToUpdateCloudKitEnablementTo:*(unsigned __int8 *)(v11 + 8) result:1];
  }
}

void sub_1D969B0C4(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) setCloudKitSyncingEnabled:*(unsigned __int8 *)(a1 + 40)];
    [*(id *)(a1 + 32) _didAttemptToUpdateCloudKitEnablementTo:*(unsigned __int8 *)(a1 + 40) result:1];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        id v9 = v5;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Unable to delete exit record when trying to change iCloud enabled state.  Error: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    uint64_t v7 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v7 autoBugCaptureWithSubType:@"setCloudKitEnabled" errorPayload:v5];

    [*(id *)(a1 + 32) _didAttemptToUpdateCloudKitEnablementTo:*(unsigned __int8 *)(a1 + 40) result:0];
  }
}

uint64_t sub_1D969C724()
{
  qword_1EBE2BCB8 = (uint64_t)dispatch_queue_create("com.apple.private.IMDCKUtilitiesInternal", 0);

  return MEMORY[0x1F41817F8]();
}

void sub_1D969CA98(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  v4[2] = sub_1D969CB30;
  v4[3] = &unk_1E6B72D40;
  long long v3 = *(_OWORD *)(a1 + 40);
  id v2 = (id)v3;
  long long v5 = v3;
  [v1 fetchCloudKitAccountStatusWithCompletion:v4];
}

void sub_1D969CB30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = [NSNumber numberWithInteger:a2];
      int v8 = 138412546;
      id v9 = v5;
      __int16 v10 = 2112;
      uint64_t v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Return account validForCD with error: %@ accountStatus: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  if (!v5) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 4;
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

objc_class *sub_1D969CCC0()
{
  uint64_t result = (objc_class *)MEMORY[0x1E0169C30](@"AKAppleIDAuthenticationController", @"AuthKit");
  if (result)
  {
    qword_1EBE2BAC8 = (uint64_t)objc_alloc_init(result);
    return (objc_class *)MEMORY[0x1F41817F8]();
  }
  return result;
}

__CFString *NSStringFromIMDCKAccountStatus(unint64_t a1)
{
  if (a1 > 4) {
    return 0;
  }
  else {
    return off_1E6B73050[a1];
  }
}

void sub_1D969CE2C()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v1 = [v0 objectForKey:@"ck-account-repair-override"];

  if (v1 && [v1 BOOLValue]) {
    byte_1EA8CA350 = 1;
  }
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (byte_1EA8CA350) {
        long long v3 = @"YES";
      }
      else {
        long long v3 = @"NO";
      }
      int v4 = 138412290;
      id v5 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "account needs repair override is: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_1D969D974()
{
  uint64_t result = MEMORY[0x1E0169C30](@"LSApplicationWorkspace", @"CoreServices");
  qword_1EA8CA358 = result;
  return result;
}

void sub_1D969D9A4(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (![v3 response])
  {
    int v4 = NSString;
    id v5 = [MEMORY[0x1E4F61740] sharedInstance];
    uint64_t v6 = [v5 productBuildVersion];
    uint64_t v7 = [v4 stringWithFormat:@"TTR:%@ MoIC Sync Fail %@", v6, *(void *)(a1 + 32)];

    int v8 = [NSString stringWithFormat:@"tap-to-radar://new?Title=%@&ComponentID=644010&ComponentName=Messages Frameworks&ComponentVersion=iOS&Classification=Serious Bug&Description=%@&Reproducibility=I Didn't Try", v7, v7];
    id v9 = [v8 stringByAddingURLEscapes];

    __int16 v10 = [MEMORY[0x1E4F1CB10] URLWithString:v9];
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        char v14 = v10;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "User tapped file a radar. Opening URL %@", buf, 0xCu);
      }
    }
    uint64_t v12 = [(id)qword_1EA8CA358 defaultWorkspace];
    [v12 openURL:v10 configuration:0 completionHandler:0];
  }
}

objc_class *sub_1D969DFBC()
{
  uint64_t result = (objc_class *)MEMORY[0x1E0169C30](@"ACAccountStore", @"AppleAccount");
  if (result)
  {
    qword_1EBE2BAE0 = (uint64_t)objc_alloc_init(result);
    return (objc_class *)MEMORY[0x1F41817F8]();
  }
  return result;
}

void sub_1D969E3D8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        __int16 v9 = 0;
        uint64_t v6 = "Error saving enabling for kAccountDataclassMessages.";
        uint64_t v7 = (uint8_t *)&v9;
LABEL_8:
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
        goto LABEL_9;
      }
      goto LABEL_9;
    }
  }
  else if (v4)
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      __int16 v8 = 0;
      uint64_t v6 = "Success saving enabling for kAccountDataclassMessages.";
      uint64_t v7 = (uint8_t *)&v8;
      goto LABEL_8;
    }
LABEL_9:
  }
}

void sub_1D969E568(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      __int16 v8 = [v6 localizedDescription];
      int v10 = 138412546;
      id v11 = v5;
      __int16 v12 = 2112;
      __int16 v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Found primary account: %@ error: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  uint64_t v9 = *(void *)(a1 + 32);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v5, v6);
  }
}

void sub_1D969E734(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        __int16 v8 = [v6 localizedDescription];
        int v13 = 138412290;
        uint64_t v14 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "fetchiCloudAccountPersonID returning with error: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    uint64_t v9 = *(void *)(a1 + 40);
    if (v9) {
      (*(void (**)(uint64_t, void, id))(v9 + 16))(v9, 0, v6);
    }
  }
  else
  {
    int v10 = [*(id *)(a1 + 32) _personIdFromAccount:v5];
    if (IMOSLoggingEnabled())
    {
      id v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v13 = 138412290;
        uint64_t v14 = v10;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Found DSID: %@", (uint8_t *)&v13, 0xCu);
      }
    }
    uint64_t v12 = *(void *)(a1 + 40);
    if (v12) {
      (*(void (**)(uint64_t, void *, void))(v12 + 16))(v12, v10, 0);
    }
  }
}

void sub_1D969E9AC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6) {
    int v7 = 0;
  }
  else {
    int v7 = [v5 isEnabledForDataclass:*MEMORY[0x1E4F17A68]];
  }
  if (IMOSLoggingEnabled())
  {
    __int16 v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = @"NO";
      if (v7) {
        uint64_t v9 = @"YES";
      }
      int v10 = 138412290;
      id v11 = v9;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Account has backup enabled: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D969EAF8()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F1CB18] standardUserDefaults];
  uint64_t v1 = [v0 objectForKey:@"ck-sync-paused"];

  if (v1 && [v1 BOOLValue]) {
    byte_1EA8CA368 = 1;
  }
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (byte_1EA8CA368) {
        id v3 = @"YES";
      }
      else {
        id v3 = @"NO";
      }
      int v4 = 138412290;
      id v5 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Is syncing paused override: %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D969F628(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 response];
  int v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "User chose to show pop up before sending logs", v9, 2u);
      }
    }
  }
  else if (v5)
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "User chose to always auto send logs", buf, 2u);
    }
  }
  IMSetDomainIntForKey();
  uint64_t v8 = *(void *)(a1 + 32);
  if (v8) {
    (*(void (**)(void))(v8 + 16))();
  }
}

void *sub_1D96A0490()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("PLLogRegisteredEvent", @"PowerLog");
  off_1EA8CA370 = result;
  return result;
}

void *sub_1D96A06D8()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("PLLogRegisteredEvent", @"PowerLog");
  off_1EA8CA380 = result;
  return result;
}

void *sub_1D96A0A14()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("PLLogRegisteredEvent", @"PowerLog");
  off_1EA8CA390 = result;
  return result;
}

void sub_1D96A0E54(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96A0D54);
  }
  _Unwind_Resume(a1);
}

void sub_1D96A0F8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1D96A10B4;
  v10[3] = &unk_1E6B72F40;
  id v11 = v5;
  id v12 = *(id *)(a1 + 32);
  id v13 = v6;
  int v7 = *(void **)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = v7;
  char v19 = *(unsigned char *)(a1 + 76);
  int v18 = *(_DWORD *)(a1 + 72);
  id v17 = *(id *)(a1 + 64);
  id v16 = *(id *)(a1 + 56);
  id v8 = v6;
  id v9 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v10);
}

void sub_1D96A10B4(uint64_t a1)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = [*(id *)(a1 + 32) length];
  int v2 = IMOSLoggingEnabled();
  if (v1)
  {
    if (!v2) {
      goto LABEL_10;
    }
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void **)(a1 + 32);
      id v5 = *(void **)(a1 + 40);
      *(_DWORD *)buf = 138412546;
      v45 = v4;
      __int16 v46 = 2112;
      id v47 = v5;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "<StartDeviceID> Device ID: %@ <EndDeviceID> logDumpGuid %@", buf, 0x16u);
    }
  }
  else
  {
    if (!v2) {
      goto LABEL_10;
    }
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      id v6 = *(void **)(a1 + 48);
      *(_DWORD *)buf = 138412290;
      v45 = v6;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "We didn't get a device ID back from cloudkit error: %@", buf, 0xCu);
    }
  }

LABEL_10:
  id v7 = objc_alloc_init(MEMORY[0x1E4F28C10]);
  [v7 setDateFormat:@"dd-MM-yyyy_HH:mm"];
  id v8 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v32 = [v7 stringFromDate:v8];

  id v9 = +[IMDAccountController sharedInstance];
  int v10 = [v9 anySessionForServiceName:*MEMORY[0x1E4F6E1B0]];

  uint64_t v31 = [*(id *)(a1 + 56) deviceActiveString];
  id v11 = NSString;
  id v12 = [v10 loginID];
  if (v12)
  {
    id v13 = [v10 loginID];
  }
  else
  {
    id v13 = @"Unknown";
  }
  if (*(unsigned char *)(a1 + 92)) {
    uint64_t v14 = @"RestoreFailure";
  }
  else {
    uint64_t v14 = @"_";
  }
  uint64_t v30 = [v11 stringWithFormat:@"%@_MT_%@_%@_%@_%@_Messages", v13, *(void *)(a1 + 64), v14, v32, v31];
  if (v12) {

  }
  id v15 = IMSafeTemporaryDirectory();
  id v16 = [v15 path];

  if (!*(unsigned char *)(a1 + 92))
  {
    id v17 = v16;
LABEL_26:
    [*(id *)(a1 + 56) logToPowerLogForLogDumpGUID:*(void *)(a1 + 40) logDumpCompleted:0 logDumpSucceeded:0 logDumpSendingCompleted:0 logDumpSendingSucceeded:0 reason:*(void *)(a1 + 64)];
    unint64_t v24 = [MEMORY[0x1E4F6E810] sharedInstance];
    unsigned int v29 = *(_DWORD *)(a1 + 88);
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = sub_1D96A1690;
    v34[3] = &unk_1E6B72F18;
    id v25 = v30;
    uint64_t v26 = *(void *)(a1 + 56);
    id v35 = v25;
    uint64_t v36 = v26;
    id v41 = *(id *)(a1 + 80);
    id v37 = *(id *)(a1 + 40);
    id v38 = *(id *)(a1 + 64);
    id v39 = v10;
    id v40 = *(id *)(a1 + 72);
    char v42 = *(unsigned char *)(a1 + 92);
    [v24 dumpLogsToFolderAtPath:v17 withFileName:v25 lastHours:v29 predicate:@"subsystem CONTAINS[cd] \"com.apple.messages\"" includeCKDebug:1 withCompletion:v34];

    id v20 = v35;
    goto LABEL_27;
  }
  id v17 = [NSString stringWithFormat:@"%@/CKMessagesLogDump/", v16];

  int v18 = [MEMORY[0x1E4F28CB8] defaultManager];
  id v43 = 0;
  char v19 = [v18 createDirectoryAtPath:v17 withIntermediateDirectories:1 attributes:0 error:&v43];
  id v20 = v43;

  int v21 = IMOSLoggingEnabled();
  if (v19)
  {
    if (v21)
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(void **)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        v45 = v17;
        __int16 v46 = 2112;
        id v47 = v23;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "Succeeded creating dir at path %@ for logDumpGuid %@", buf, 0x16u);
      }
    }
    goto LABEL_26;
  }
  if (v21)
  {
    uint64_t v27 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
    {
      uint64_t v28 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412802;
      v45 = v17;
      __int16 v46 = 2112;
      id v47 = v20;
      __int16 v48 = 2112;
      uint64_t v49 = v28;
      _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "Could not create dir at path %@, failed with error %@. Aborting log dump with logDumpGuid %@", buf, 0x20u);
    }
  }
LABEL_27:
}

void sub_1D96A1690(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        id v35 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Error occurred trying to log dump messages logs: %@", buf, 0xCu);
      }
LABEL_9:
    }
  }
  else if (v7)
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v35 = v5;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Succeeded logging messages log to file at path %@", buf, 0xCu);
    }
    goto LABEL_9;
  }
  if (IMGetDomainBoolForKey() && IMGetDomainIntForKey() == 1)
  {
    if (v6)
    {
      [*(id *)(a1 + 40) logToPowerLogForLogDumpGUID:*(void *)(a1 + 48) logDumpCompleted:1 logDumpSucceeded:0 logDumpSendingCompleted:0 logDumpSendingSucceeded:0 reason:*(void *)(a1 + 56)];
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 80);
      if (v14) {
        (*(void (**)(void))(v14 + 16))();
      }
      id v15 = (void *)(a1 + 40);
      id v16 = (id *)(a1 + 48);
      id v17 = (id *)(a1 + 56);
      [*(id *)(a1 + 40) logToPowerLogForLogDumpGUID:*(void *)(a1 + 48) logDumpCompleted:1 logDumpSucceeded:1 logDumpSendingCompleted:0 logDumpSendingSucceeded:0 reason:*(void *)(a1 + 56)];
      int v18 = *(void **)(a1 + 64);
      uint64_t v19 = *(void *)(a1 + 72);
      BOOL v20 = *(unsigned char *)(a1 + 88) == 0;
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1D96A1BD4;
      v21[3] = &unk_1E6B72EC8;
      v21[4] = *v15;
      id v22 = *v16;
      id v23 = *v17;
      [v18 sendLogDumpMessageAtFilePath:v5 toRecipient:v19 shouldDeleteFile:v20 withCompletion:v21];
    }
  }
  else
  {
    IMSetDomainBoolForKey();
    int v10 = *(void **)(a1 + 40);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1D96A1A68;
    void v24[3] = &unk_1E6B72EF0;
    id v25 = v6;
    id v11 = *(id *)(a1 + 80);
    uint64_t v12 = *(void *)(a1 + 40);
    id v13 = *(void **)(a1 + 48);
    id v32 = v11;
    uint64_t v26 = v12;
    id v27 = v13;
    id v28 = *(id *)(a1 + 56);
    id v29 = *(id *)(a1 + 64);
    id v30 = v5;
    id v31 = *(id *)(a1 + 72);
    char v33 = *(unsigned char *)(a1 + 88);
    [v10 _showCKLogNotificationWithCompletion:v24];
  }
}

void sub_1D96A1A68(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    int v2 = *(void **)(a1 + 40);
    uint64_t v3 = *(void *)(a1 + 48);
    uint64_t v4 = *(void *)(a1 + 56);
    [v2 logToPowerLogForLogDumpGUID:v3 logDumpCompleted:1 logDumpSucceeded:0 logDumpSendingCompleted:0 logDumpSendingSucceeded:0 reason:v4];
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 88);
    if (v5) {
      (*(void (**)(void))(v5 + 16))();
    }
    [*(id *)(a1 + 40) logToPowerLogForLogDumpGUID:*(void *)(a1 + 48) logDumpCompleted:1 logDumpSucceeded:1 logDumpSendingCompleted:0 logDumpSendingSucceeded:0 reason:*(void *)(a1 + 56)];
    id v6 = *(void **)(a1 + 64);
    uint64_t v7 = *(void *)(a1 + 72);
    uint64_t v8 = *(void *)(a1 + 80);
    BOOL v9 = *(unsigned char *)(a1 + 96) == 0;
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    v11[2] = sub_1D96A1BB4;
    v11[3] = &unk_1E6B72EC8;
    int v10 = *(void **)(a1 + 48);
    v11[4] = *(void *)(a1 + 40);
    id v12 = v10;
    id v13 = *(id *)(a1 + 56);
    [v6 sendLogDumpMessageAtFilePath:v7 toRecipient:v8 shouldDeleteFile:v9 withCompletion:v11];
  }
}

uint64_t sub_1D96A1BB4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) logToPowerLogForLogDumpGUID:*(void *)(a1 + 40) logDumpCompleted:1 logDumpSucceeded:1 logDumpSendingCompleted:1 logDumpSendingSucceeded:a2 reason:*(void *)(a1 + 48)];
}

uint64_t sub_1D96A1BD4(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) logToPowerLogForLogDumpGUID:*(void *)(a1 + 40) logDumpCompleted:1 logDumpSucceeded:1 logDumpSendingCompleted:1 logDumpSendingSucceeded:a2 reason:*(void *)(a1 + 48)];
}

void sub_1D96A2630()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  off_1EBE2BFC0 = (_UNKNOWN *)MEMORY[0x1E0169C40]("PCSReportKeyRollPending", @"ProtectedCloudStorage");
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EBE2BFC0) {
        uint64_t v1 = @"YES";
      }
      else {
        uint64_t v1 = @"NO";
      }
      int v2 = 138412290;
      uint64_t v3 = v1;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Linked linkedPCSReportKeyRollPending ok: %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

void sub_1D96A28CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96A28E4(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    if (*(void *)(result + 32))
    {
      *(unsigned char *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
    }
  }
  return result;
}

void sub_1D96A291C(uint64_t a1)
{
  char v2 = [*(id *)(a1 + 32) PCSKeyRollPending];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D96A29C8;
  block[3] = &unk_1E6B72FB8;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  char v7 = v2;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D96A29C8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    if (*(void *)(result + 32))
    {
      *(unsigned char *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void, void))(*(void *)(result + 32) + 16))(*(void *)(result + 32), *(unsigned __int8 *)(result + 48));
    }
  }
  return result;
}

void sub_1D96A2AF4()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  off_1EA8CA3A0 = (_UNKNOWN *)MEMORY[0x1E0169C40]("PCSReportManateeStatus", @"ProtectedCloudStorage");
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EA8CA3A0) {
        uint64_t v1 = @"YES";
      }
      else {
        uint64_t v1 = @"NO";
      }
      int v2 = 138412290;
      id v3 = v1;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Linked linkedPCSReportManateeStatus ok: %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

void sub_1D96A2D90(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96A2DA8(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    if (*(void *)(result + 32))
    {
      *(unsigned char *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void))(*(void *)(result + 32) + 16))();
    }
  }
  return result;
}

void sub_1D96A2DE0(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) PCSReportManateeStatus];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D96A2E8C;
  block[3] = &unk_1E6B73008;
  long long v4 = *(_OWORD *)(a1 + 40);
  id v3 = (id)v4;
  long long v6 = v4;
  int v7 = v2;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D96A2E8C(uint64_t result)
{
  uint64_t v1 = *(void *)(*(void *)(result + 40) + 8);
  if (!*(unsigned char *)(v1 + 24))
  {
    if (*(void *)(result + 32))
    {
      *(unsigned char *)(v1 + 24) = 1;
      return (*(uint64_t (**)(void, void))(*(void *)(result + 32) + 16))(*(void *)(result + 32), *(unsigned int *)(result + 48));
    }
  }
  return result;
}

void *sub_1D96A2F1C()
{
  uint64_t result = (void *)MEMORY[0x1E0169C30](@"AKAccountManager", @"AuthKit");
  if (result)
  {
    qword_1EBE2BAF8 = [result sharedInstance];
    return (void *)MEMORY[0x1F41817F8]();
  }
  return result;
}

void sub_1D96A3CD4(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2 == 4;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    long long v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Not eligible for truth zone", v7, 2u);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1D96A3DF0()
{
  uint64_t result = IMGetDomainBoolForKey();
  byte_1EA8CA3B0 = result;
  return result;
}

void sub_1D96A3F7C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) setCloudKitSyncingEnabled:1];
    long long v6 = +[IMDCKBackupController sharedInstance];
    [v6 setICloudBackupsDisabled:0];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        id v11 = v5;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Unable to request exit record when trying to disable all devices. Error: %@", (uint8_t *)&v10, 0xCu);
      }
    }
    uint64_t v8 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v8 autoBugCaptureWithSubType:@"DisableAllDevices" errorPayload:v5];
  }
  IMSetDomainBoolForKey();
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(v9 + 16))(v9, a2);
  }
}

void sub_1D96A4148()
{
  if (!qword_1EA8CA3C0)
  {
    uint64_t v0 = (void **)MEMORY[0x1E0169C40]("AKAuthenticationSecurityLevelKey", @"AuthKit");
    if (v0) {
      uint64_t v1 = *v0;
    }
    else {
      uint64_t v1 = 0;
    }
    objc_storeStrong((id *)&qword_1EA8CA3C0, v1);
  }
}

uint64_t sub_1D96A4200()
{
  id v0 = objc_alloc(MEMORY[0x1E4F6AAC8]);
  qword_1EBE2BCA0 = [v0 initWithService:*MEMORY[0x1E4F6AA78]];

  return MEMORY[0x1F41817F8]();
}

void sub_1D96A4928(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, v9, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_1D96A4F6C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    long long v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      *(_DWORD *)buf = 138412546;
      uint64_t v20 = v7;
      __int16 v21 = 2048;
      uint64_t v22 = [a2 count];
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "%@:Received a batch of %lu messages to process.", buf, 0x16u);
    }
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  uint64_t result = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  uint64_t v9 = result;
  if (result)
  {
    uint64_t v10 = *(void *)v15;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v15 != v10) {
          objc_enumerationMutation(a2);
        }
        [*(id *)(a1 + 40) replayMessage:*(void *)(*((void *)&v14 + 1) + 8 * v11++)];
      }
      while (v9 != v11);
      uint64_t result = [a2 countByEnumeratingWithState:&v14 objects:v18 count:16];
      uint64_t v9 = result;
    }
    while (result);
  }
  if (a3)
  {
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    v13[2] = sub_1D96A5154;
    v13[3] = &unk_1E6B730E0;
    uint64_t v12 = *(void **)(a1 + 40);
    v13[4] = *(void *)(a1 + 32);
    void v13[5] = a2;
    v13[6] = a3;
    return [v12 enqueReplayMessageCallback:v13];
  }
  return result;
}

uint64_t sub_1D96A5154(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v4 = [*(id *)(a1 + 40) count];
      int v6 = 138412546;
      uint64_t v7 = v3;
      __int16 v8 = 2048;
      uint64_t v9 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "%@: Finished processing batch of %lu messages.", (uint8_t *)&v6, 0x16u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1D96A525C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, MEMORY[0x1E4F1CBF0]);
  }
  return result;
}

uint64_t sub_1D96A52E8(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "service"), "internalName");
      int v12 = 138412802;
      uint64_t v13 = v5;
      __int16 v14 = 2112;
      uint64_t v15 = v6;
      __int16 v16 = 2112;
      uint64_t v17 = a2;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@: Finished sync task for %@ service. Error: %@", (uint8_t *)&v12, 0x20u);
    }
  }
  uint64_t v7 = [*(id *)(*(void *)(a1 + 32) + 24) count];
  uint64_t v8 = *(void *)(a1 + 32);
  if (v7 == 1 && *(void *)(v8 + 32))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
        int v12 = 138412290;
        uint64_t v13 = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "%@: Finished Syncing all services for task", (uint8_t *)&v12, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(*(void *)(a1 + 32) + 32) + 16))();
    uint64_t v8 = *(void *)(a1 + 32);
  }
  return objc_msgSend(*(id *)(v8 + 24), "removeObjectForKey:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "service"), "internalName"));
}

uint64_t sub_1D96A5D24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a1 + 32) + 16) + 16))();
}

id sub_1D96A5D4C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  v14.receiver = a1;
  v14.super_class = (Class)&off_1F34060D0;
  id v5 = objc_msgSendSuper2(&v14, sel_init);
  if (v5)
  {
    uint64_t v6 = [v4 chatIdentifier];
    [v5 setChatIdentifier:v6];

    if ([v4 chatStyle])
    {
      if ([v4 chatStyle] == 1) {
        uint64_t v7 = 45;
      }
      else {
        uint64_t v7 = 43;
      }
      [v5 setChatStyle:v7];
    }
    uint64_t v8 = [v4 senderLastAddressedHandle];
    [v5 setSenderLastAddressedHandle:v8];

    uint64_t v9 = [v4 senderLastAddressedSIMID];
    uint64_t v10 = [v9 UUIDString];
    [v5 setSenderLastAddressedSIMID:v10];

    uint64_t v11 = [v4 lastUsedServiceName];
    [v5 setLastUsedServiceName:v11];

    int v12 = [v4 serviceOfLastMessage];
    [v5 setServiceOfLastMessage:v12];

    objc_msgSend(v5, "setConversationWasDowngraded:", objc_msgSend(v4, "conversationWasDowngraded"));
    objc_msgSend(v5, "setHasConversationHistory:", objc_msgSend(v4, "hasConversationHistory"));
    objc_msgSend(v5, "setShouldForceServerStatusRefresh:", objc_msgSend(v4, "shouldForceServerStatusRefresh"));
    objc_msgSend(v5, "setForceMMS:", objc_msgSend(v4, "forceMMS"));
    objc_msgSend(v5, "setIsForPendingConversation:", objc_msgSend(v4, "isForPendingConversation"));
  }

  return v5;
}

uint64_t sub_1D96A774C()
{
  qword_1EA8CA3D0 = objc_alloc_init(IMPendingReplicatedMessageCache);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96A7944(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) pendingMessages];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  if (v3 && IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Attempting to cache pending replicated message %@ but one is already present", buf, 0xCu);
    }
  }
  uint64_t v6 = objc_alloc_init(IMPendingReplicatedMessage);
  [(IMPendingReplicatedMessage *)v6 setMessageGUID:*(void *)(a1 + 40)];
  [(IMPendingReplicatedMessage *)v6 setReplicatedFallbackGUIDs:*(void *)(a1 + 48)];
  [(IMPendingReplicatedMessage *)v6 setReleaseBlock:*(void *)(a1 + 56)];
  uint64_t v7 = [MEMORY[0x1E4F1C9C8] now];
  [(IMPendingReplicatedMessage *)v6 setDate:v7];

  uint64_t v8 = [*(id *)(a1 + 32) pendingMessages];
  [v8 setObject:v6 forKeyedSubscript:*(void *)(a1 + 40)];

  uint64_t v9 = [*(id *)(a1 + 32) replicatedFallbackHistory];
  [v9 setObject:*(void *)(a1 + 40) forKey:*(void *)(a1 + 40)];

  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v10 = *(id *)(a1 + 48);
  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v20;
    do
    {
      uint64_t v13 = 0;
      do
      {
        if (*(void *)v20 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void *)(*((void *)&v19 + 1) + 8 * v13);
        uint64_t v15 = objc_msgSend(*(id *)(a1 + 32), "pendingMessages", (void)v19);
        [v15 setObject:v6 forKeyedSubscript:v14];

        __int16 v16 = [*(id *)(a1 + 32) replicatedFallbackHistory];
        [v16 setObject:*(void *)(a1 + 40) forKey:v14];

        ++v13;
      }
      while (v11 != v13);
      uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v11);
  }

  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = *(void *)(a1 + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v25 = v18;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Caching pending replicated message %@", buf, 0xCu);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_enforceCacheLimit", (void)v19);
  [*(id *)(a1 + 32) _scheduleTimeout];
}

void sub_1D96A7D80(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) pendingMessages];
  uint64_t v3 = [v2 objectForKeyedSubscript:*(void *)(a1 + 40)];

  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        uint64_t v6 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v18 = v6;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Releasing pending replicated message %@", buf, 0xCu);
      }
    }
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v3 messageGUID];
    [v7 _removePendingMessageWithGUID:v8];

    uint64_t v9 = [v3 releaseBlock];
    uint64_t v10 = *(void *)(a1 + 48);
    uint64_t v11 = *(void *)(a1 + 56);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D96A7FD0;
    v15[3] = &unk_1E6B731C8;
    id v16 = *(id *)(a1 + 64);
    ((void (**)(void, uint64_t, uint64_t, void *))v9)[2](v9, v10, v11, v15);
  }
  else
  {
    if (v4)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412290;
        uint64_t v18 = v13;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Attempted to release pending replicated message %@ but no message pending", buf, 0xCu);
      }
    }
    uint64_t v14 = *(void *)(a1 + 64);
    if (v14) {
      (*(void (**)(uint64_t, void))(v14 + 16))(v14, 0);
    }
  }
}

uint64_t sub_1D96A7FD0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D96A8098(uint64_t a1)
{
  return [*(id *)(a1 + 32) _removePendingMessageWithGUID:*(void *)(a1 + 40)];
}

void sub_1D96A81D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96A81E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96A81F8(uint64_t a1)
{
}

void sub_1D96A8200(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) replicatedFallbackHistory];
  uint64_t v2 = [v5 objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1D96A862C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D96A8648(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  uint64_t v2 = [WeakRetained queue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D96A86DC;
  block[3] = &unk_1E6B73268;
  void block[4] = WeakRetained;
  dispatch_async(v2, block);
}

uint64_t sub_1D96A86DC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__enforceTimeout);
}

void sub_1D96A89C8(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  int v4 = [v9 date];
  [v4 timeIntervalSinceNow];
  double v6 = v5;

  if (v6 < -7200.0)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = [v9 messageGUID];
    [v7 addObject:v8];
  }
}

void sub_1D96AB8D4(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) _handleDeleteCommandWithMessageDictionary:*(void *)(a1 + 40)];
  uint64_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    uint64_t v3 = v4;
  }
}

void sub_1D96ABC9C(uint64_t a1, void *a2)
{
  id v4 = a2;
  [*(id *)(a1 + 32) recoverChatsForCommandDictionary:*(void *)(a1 + 40)];
  uint64_t v3 = v4;
  if (v4)
  {
    (*((void (**)(id))v4 + 2))(v4);
    uint64_t v3 = v4;
  }
}

void sub_1D96AC514(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v3 = (void *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  double v5 = [v3 arrayWithObjects:&v6 count:1];
  objc_msgSend(v2, "permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:", v5, v4, v6, v7);
}

void sub_1D96AD0B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsIndex:", objc_msgSend(v3, "messagePartIndex")))
  {
    id v4 = [v3 messagePartBody];

    if (v4)
    {
      double v5 = [MEMORY[0x1E4F6BF48] database];
      uint64_t v6 = [v3 messagePartBody];
      uint64_t v7 = [*(id *)(a1 + 40) guid];
      [v5 storeRecoverableMessagePartWithBody:v6 forMessageWithGUID:v7 deleteDate:*(void *)(a1 + 48)];
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v9 = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery", v9, 2u);
      }
    }
  }
}

void sub_1D96AD75C(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = a2;
  uint64_t v6 = +[IMDServiceController sharedController];
  uint64_t v7 = [v6 serviceWithName:v5];

  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 32) broadcasterForChatListenersForService:v7 withBlackholeStatus:0];
    [v8 recoveredMessagesFromRecentlyDeletedForChatsWithGUIDs:v9];
  }
}

uint64_t sub_1D96ADE7C(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (([*(id *)(a1 + 32) groupsMergeDisplayNames] & 1) != 0
    || ([v3 displayName],
        id v4 = objc_claimAutoreleasedReturnValue(),
        uint64_t v5 = [v4 length],
        v4,
        !v5))
  {
    uint64_t v8 = 1;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [v3 guid];
        int v10 = 138412290;
        uint64_t v11 = v7;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Rejecting chat %@ as it has a display name and service does not merge display names", (uint8_t *)&v10, 0xCu);
      }
    }
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t sub_1D96AE3A8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [a2 guid];
  uint64_t v4 = [v2 containsObject:v3];

  return v4;
}

void sub_1D96AE3F0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a3;
  id v5 = a2;
  uint64_t v6 = +[IMDServiceController sharedController];
  uint64_t v7 = [v6 serviceWithName:v5];

  if (v7)
  {
    uint64_t v8 = [*(id *)(a1 + 32) broadcasterForChatListenersForService:v7];
    [v8 historicalMessageGUIDsDeleted:v9 chatGUIDs:0 queryID:0];
  }
}

void -[IMDRelayDeletionController _blocklistIfNeededForChatDict:](IMDRelayDeletionController *self, SEL a2, id a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  uint64_t v4 = [v3 objectForKeyedSubscript:@"wasReportedAsJunk"];
  int v5 = [v4 BOOLValue];

  if (v5)
  {
    uint64_t v6 = [v3 objectForKeyedSubscript:@"groupID"];
    if (v6)
    {
      uint64_t v7 = [MEMORY[0x1E4F6E7A0] sharedInstance];
      [v7 blocklistGroupId:v6];

      if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          int v9 = 138412290;
          int v10 = v6;
          _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Blocklisted GroupID: %@", (uint8_t *)&v9, 0xCu);
        }
LABEL_10:
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        int v10 = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "IMDRelayDeletionController | Expected to blocklist chat for chatDict: %@ but groupID nil", (uint8_t *)&v9, 0xCu);
      }
      goto LABEL_10;
    }
  }
}

void sub_1D96AF7CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96AF740);
  }
  _Unwind_Resume(a1);
}

IMDOneTimeCodeManager *sub_1D96B00CC()
{
  uint64_t result = objc_alloc_init(IMDOneTimeCodeManager);
  qword_1EBE2B930 = (uint64_t)result;
  return result;
}

void sub_1D96B0200(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E016A370]();
  if (a2) {
    [a2 setAutoDeletionPreference:1];
  }
}

void sub_1D96B024C(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E016A370]();
  if (a2) {
    [a2 setAutoDeletionPreference:0];
  }
}

void sub_1D96B087C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Delete Verification Codes | Onboarding completed.", (uint8_t *)v11, 2u);
    }
  }
  if (a2 != 2)
  {
    if (a2 != 1)
    {
      if (a2)
      {
        if (IMOSLoggingEnabled())
        {
          int v10 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            LOWORD(v11[0]) = 0;
            _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Delete Verification Codes | Undefined response for onboarding. No action will be taken", (uint8_t *)v11, 2u);
          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          int v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            LOWORD(v11[0]) = 0;
            _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Delete Verification Codes | Keeping auto-filled verification codes", (uint8_t *)v11, 2u);
          }
        }
        [*(id *)(a1 + 32) setAutoDeletionPreference:0];
      }
      return;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11[0]) = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Delete Verification Codes | Moving auto-filled verification codes to Recently Deleted", (uint8_t *)v11, 2u);
      }
    }
    [*(id *)(a1 + 32) setAutoDeletionPreference:1];
    goto LABEL_20;
  }
  int v6 = [*(id *)(a1 + 32) autoDeletionPreference];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v11[0] = 67109120;
      v11[1] = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Delete Verification Codes | Onboarding already presented before. Reading current deletion preference: %{BOOL}d", (uint8_t *)v11, 8u);
    }
  }
  if (v6)
  {
LABEL_20:
    if (IMOSLoggingEnabled())
    {
      int v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11[0]) = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Delete Verification Codes | Delete Verification Codes is enabled", (uint8_t *)v11, 2u);
      }
    }
    [*(id *)(a1 + 32) moveOneTimeCodeToRecentlyDeleted:*(void *)(a1 + 40)];
  }
}

void sub_1D96B127C(uint64_t a1, void *a2)
{
  [*(id *)(a1 + 32) setInteger:1 forKey:*MEMORY[0x1E4F6DEC0]];
  uint64_t v4 = [a2 response];
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v4 == 0);
  }
  int v6 = *(void **)(a1 + 32);
}

uint64_t sub_1D96B1E5C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Timer fired to clear code with GUID: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  return [*(id *)(a1 + 40) consumeCodeWithGuid:*(void *)(a1 + 32) codeExpired:1];
}

void sub_1D96B2840(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96B27F8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96B2B74()
{
  uint64_t result = +[IMDSoundUtilities _installSystemSound:@"Sent Scheduled Message.caf"];
  dword_1EA8CA3E8 = result;
  return result;
}

__CFString *sub_1D96B2D04(int a1)
{
  switch(a1)
  {
    case '#':
      uint64_t v2 = &IMDRelayMessageDictionaryChatStyleRoom;
      goto LABEL_7;
    case '-':
      uint64_t v2 = &IMDRelayMessageDictionaryChatStyleInstantMessage;
LABEL_7:
      uint64_t v3 = *v2;
      return v3;
    case '+':
      uint64_t v2 = &IMDRelayMessageDictionaryChatStyleGroup;
      goto LABEL_7;
  }
  uint64_t v3 = 0;
  return v3;
}

void sub_1D96B3E34(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96B3D88);
  }
  _Unwind_Resume(a1);
}

void sub_1D96B46D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_1D96B470C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96B471C(uint64_t a1)
{
}

void sub_1D96B4724(uint64_t a1, void *a2)
{
}

id sub_1D96B4734()
{
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x2050000000;
  id v0 = (void *)qword_1EA8CA3F8;
  uint64_t v6 = qword_1EA8CA3F8;
  if (!qword_1EA8CA3F8)
  {
    sub_1D96B483C();
    v4[3] = (uint64_t)objc_getClass("Libsysdiagnose");
    qword_1EA8CA3F8 = v4[3];
    id v0 = (void *)v4[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v3, 8);

  return v1;
}

void sub_1D96B4824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96B483C()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = 0;
  uint64_t v3 = &v2;
  uint64_t v4 = 0x2020000000;
  uint64_t v0 = qword_1EA8CA3F0;
  uint64_t v5 = qword_1EA8CA3F0;
  if (!qword_1EA8CA3F0)
  {
    long long v6 = xmmword_1E6B73440;
    v3[3] = _sl_dlopen();
    qword_1EA8CA3F0 = v3[3];
    uint64_t v0 = v3[3];
  }
  _Block_object_dispose(&v2, 8);
  return v0;
}

void sub_1D96B494C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96B4964(uint64_t a1)
{
  uint64_t result = _sl_dlopen();
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA8CA3F0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1D96B49F4(uint64_t a1)
{
  sub_1D96B483C();
  Class result = objc_getClass("Libsysdiagnose");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_1EA8CA3F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

id sub_1D96B52D4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 40);
      int v7 = 134217984;
      uint64_t v8 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Setting timer to evaluate deferred message processing in: %f", (uint8_t *)&v7, 0xCu);
    }
  }
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 16);
  if (v5)
  {
    [v5 invalidate];

    *(void *)(*(void *)(a1 + 32) + 16) = 0;
    uint64_t v4 = *(void *)(a1 + 32);
  }
  id result = (id)[MEMORY[0x1E4F1CB00] scheduledTimerWithTimeInterval:v4 target:sel__processingTimerFired selector:0 userInfo:0 repeats:*(double *)(a1 + 40)];
  *(void *)(*(void *)(a1 + 32) + 16) = result;
  return result;
}

uint64_t sub_1D96B589C()
{
  qword_1EA8CA400 = objc_alloc_init(IMDCollaborationNoticeTypeGenerator);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96B6130(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D96B5DDCLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D96B61C0(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = [v8 rootHash];
  int v10 = [*(id *)(a1 + 32) rootHash];
  int v11 = [v9 isEqual:v10];

  if (v11)
  {
    int v12 = [*(id *)(a1 + 40) containsObject:v7];
    int v13 = IMOSLoggingEnabled();
    if (v12)
    {
      if (v13)
      {
        uint64_t v14 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          int v17 = 138412290;
          id v18 = v7;
          _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Found a matching handle for the mentioned identity, and it is a valid alias: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      uint64_t v15 = 3;
    }
    else
    {
      if (v13)
      {
        id v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v17 = 138412290;
          id v18 = v7;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Found a matching handle for mentioned identity, but it does not match any of the user's aliases: %@", (uint8_t *)&v17, 0xCu);
        }
      }
      uint64_t v15 = -1;
    }
    *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v15;
    *a4 = 1;
  }
}

void *sub_1D96B7B40()
{
  id result = (void *)MEMORY[0x1E0169C40]("PKPeerPaymentMessageTypeFromDataURL", @"PassKitCore");
  off_1EA8CA410 = result;
  return result;
}

void *sub_1D96B7BFC()
{
  id result = (void *)MEMORY[0x1E0169C40]("PKPeerPaymentMessageDictionaryRepresentationFromDataURL", @"PassKitCore");
  off_1EA8CA420 = result;
  return result;
}

uint64_t sub_1D96B7E38()
{
  return IDSReportiMessageSpam();
}

void sub_1D96B7F00(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 32) reportSpamMessage:*(void *)(*((void *)&v9 + 1) + 8 * v8++)];
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

uint64_t sub_1D96B846C()
{
  qword_1EBE2BB10 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA48]);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96B84A8(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v3 = [v4 object];

  if (!v3) {
    [*(id *)(a1 + 32) addObject:v4];
  }
}

uint64_t sub_1D96B85A0(uint64_t a1, void *a2)
{
  return [a2 object];
}

void sub_1D96B86D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96B86E8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96B86F8(uint64_t a1)
{
}

void sub_1D96B8700(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v9 = a2;
  uint64_t v7 = [v9 service];
  if ([v7 isEqual:*(void *)(a1 + 32)])
  {
    char v8 = [v9 isReplicating];

    if ((v8 & 1) == 0)
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
      *a4 = 1;
    }
  }
  else
  {
  }
}

void sub_1D96B94C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96B9474);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96BA1EC(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Forcing an invocation of networkMonitorDidUpdate 10 seconds after setting it up.", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) networkMonitorDidUpdate:*(void *)(*(void *)(a1 + 32) + 96)];
}

uint64_t sub_1D96BB54C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (*(unsigned char *)(result + 140)) {
    return MEMORY[0x1F4181798](result, sel__processPotentialNetworkChange);
  }
  return result;
}

uint64_t sub_1D96BB5D8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (*(unsigned char *)(result + 140)) {
    return MEMORY[0x1F4181798](result, sel__processPotentialNetworkChange);
  }
  return result;
}

void -[IMDServiceSession _blocklistIfNeededForChatDict:](IMDServiceSession *self, SEL a2, id a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 objectForKeyedSubscript:@"wasReportedAsJunk"];
  int v5 = [v4 BOOLValue];

  if (v5)
  {
    uint64_t v6 = [v3 objectForKeyedSubscript:@"groupID"];
    if (v6)
    {
      uint64_t v7 = [MEMORY[0x1E4F6E7A0] sharedInstance];
      [v7 blocklistGroupId:v6];

      if (IMOSLoggingEnabled())
      {
        char v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          int v9 = 138412290;
          long long v10 = v6;
          _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Blocklisted GroupID: %@", (uint8_t *)&v9, 0xCu);
        }
LABEL_10:
      }
    }
    else if (IMOSLoggingEnabled())
    {
      char v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        long long v10 = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "IMDServiceSession | Expected to blocklist chat for chatDict: %@ but groupID nil", (uint8_t *)&v9, 0xCu);
      }
      goto LABEL_10;
    }
  }
}

void sub_1D96BCCF4(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  id v3 = (void *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  int v5 = [v3 arrayWithObjects:&v6 count:1];
  objc_msgSend(v2, "permanentlyDeletedRecoverableMessagesForChatsWithGUIDs:deletedChatGUIDs:", v5, v4, v6, v7);
}

void sub_1D96BDB34(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "containsIndex:", objc_msgSend(v3, "messagePartIndex")))
  {
    id v4 = [v3 messagePartBody];

    if (v4)
    {
      int v5 = [MEMORY[0x1E4F6BF48] database];
      uint64_t v6 = [v3 messagePartBody];
      uint64_t v7 = [*(id *)(a1 + 40) guid];
      [v5 storeRecoverableMessagePartWithBody:v6 forMessageWithGUID:v7 deleteDate:*(void *)(a1 + 48)];
    }
    else if (IMOSLoggingEnabled())
    {
      char v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Recently Deleted | Mardid: deleting message part: found no message-part body-text to store for recovery", v9, 2u);
      }
    }
  }
}

uint64_t sub_1D96BE2CC(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) service];
  if ([v4 groupsMergeDisplayNames])
  {

LABEL_9:
    uint64_t v9 = 1;
    goto LABEL_10;
  }
  int v5 = [v3 displayName];
  uint64_t v6 = [v5 length];

  if (!v6) {
    goto LABEL_9;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      char v8 = [v3 guid];
      int v11 = 138412290;
      long long v12 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Rejecting chat %@ as it has a display name and service does not merge display names", (uint8_t *)&v11, 0xCu);
    }
  }
  uint64_t v9 = 0;
LABEL_10:

  return v9;
}

void sub_1D96BF078(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t sub_1D96BF0F4()
{
  qword_1EBE2B938 = objc_alloc_init(IMDSpamController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96BF408(uint64_t a1, uint64_t a2, int a3, void *a4, double a5)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  if (IMOSLoggingEnabled())
  {
    long long v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      int v11 = @"NO";
      int v12 = 134218754;
      uint64_t v13 = a2;
      if (a3) {
        int v11 = @"YES";
      }
      __int16 v14 = 2112;
      uint64_t v15 = v11;
      __int16 v16 = 2048;
      double v17 = a5;
      __int16 v18 = 2112;
      id v19 = v9;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Server request returned status: %ld, abusive: %@, delay: %f, error: %@", (uint8_t *)&v12, 0x2Au);
    }
  }
  (*(void (**)(double))(*(void *)(a1 + 32) + 16))(a5);
}

void sub_1D96BF878(uint64_t a1)
{
  IMComponentsFromChatGUID();
  id v2 = 0;
  if ([v2 length]) {
    [*(id *)(a1 + 40) detectSpam:v2 chatGUID:*(void *)(a1 + 32)];
  }
}

void sub_1D96BFD44(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v9 = a4;
  int v10 = IMOSLoggingEnabled();
  if ((a2 == 6002 || a2 == 0) && v9 == 0)
  {
    if (v10)
    {
      __int16 v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        uint64_t v17 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v31 = v17;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "detectSpam for Chat Identifier: %@", buf, 0xCu);
      }
    }
    __int16 v18 = *(void **)(a1 + 40);
    if (v18)
    {
      id v19 = objc_msgSend(NSNumber, "numberWithBool:", a3, @"wasAutoDetectedForSpam");
      id v29 = v19;
      uint64_t v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v29 forKeys:&v28 count:1];
      [v18 updateProperties:v20];

      long long v21 = +[IMDBroadcastController sharedProvider];
      long long v22 = objc_msgSend(v21, "broadcasterForChatListenersUsingBlackholeRegistry:", objc_msgSend(*(id *)(a1 + 40), "isBlackholed"));
      uint64_t v23 = *(void *)(a1 + 32);
      unint64_t v24 = [*(id *)(a1 + 40) properties];
      [v22 chat:v23 propertiesUpdated:v24];

      if (a3)
      {
        uint64_t v25 = +[IMDMessageStore sharedInstance];
        [v25 databaseChatSpamUpdated:*(void *)(a1 + 32)];
      }
    }
    uint64_t v26 = *(void **)(a1 + 48);
    if (a5 >= 0.0)
    {
      [v26 _updateSpamCheckTimerWithInterval:*(void *)(a1 + 32) forChatGUID:a5];
    }
    else
    {
      id v27 = [v26 chatGUIDToCountMap];
      [v27 removeObjectForKey:*(void *)(a1 + 32)];
    }
  }
  else
  {
    if (v10)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v31 = v14;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "shouldn't retry again: %@", buf, 0xCu);
      }
    }
    uint64_t v15 = [*(id *)(a1 + 48) chatGUIDToCountMap];
    [v15 removeObjectForKey:*(void *)(a1 + 32)];
  }
}

void sub_1D96C0E8C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 200), 8);
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96C0F1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96C0F2C(uint64_t a1)
{
}

uint64_t sub_1D96C0F34(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) transferForGUID:a2];
}

void sub_1D96C0F40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  char v8 = objc_msgSend(*(id *)(a1 + 32), "attributedSubstringFromRange:", a3, a4);
  id v9 = [v8 string];
  if (_IMWillLog())
  {
    id v32 = v7;
    _IMAlwaysLog();
  }
  if (objc_msgSend(v9, "isEqualToString:", *MEMORY[0x1E4F6C110], v32))
  {
    v41[0] = 0;
    v41[1] = 0;
    int v10 = [*(id *)(a1 + 32) attribute:*MEMORY[0x1E4F6C188] atIndex:a3 effectiveRange:v41];
    if (_IMWillLog())
    {
      char v33 = v10;
      _IMAlwaysLog();
    }
    if ([(__CFString *)v10 length])
    {
      uint64_t v11 = [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:MEMORY[0x1E4F1CC08]];
      int v12 = *(void **)(a1 + 40);
      uint64_t v13 = [NSNumber numberWithUnsignedInteger:v11];
      [v12 addObject:v13];

      [*(id *)(a1 + 48) addObject:v10];
    }
  }
  else
  {
    if (_IMWillLog())
    {
      if (*(unsigned char *)(a1 + 72)) {
        uint64_t v14 = @"YES";
      }
      else {
        uint64_t v14 = @"NO";
      }
      char v33 = v14;
      _IMAlwaysLog();
    }
    if (*(unsigned char *)(a1 + 72))
    {
      unint64_t v34 = v8;
      id v35 = v7;
      if (objc_msgSend(v8, "__im_isOnlyAdaptiveImageGlyphFileTransfersAndWhitespaceUsingFileTransferProvider:", *(void *)(a1 + 56)))
      {
        uint64_t v15 = objc_msgSend(v8, "__im_transferGUIDsInAttributedString");
        id v16 = [v15 array];
      }
      else
      {
        uint64_t v17 = *(void *)(a1 + 56);
        id v40 = 0;
        uint64_t v15 = objc_msgSend(v8, "__im_attributedStringByReplacingAdaptiveImageGlyphFileTransfersUsingFileTransferProvider:replacementTextProvider:removedTransferGUIDsOut:", v17, &unk_1F3390800, &v40);
        id v16 = v40;
        __int16 v18 = [v15 string];
        id v19 = [v18 dataUsingEncoding:4];
        uint64_t v20 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
        CFDictionarySetValue(v20, @"Type", @"text/plain");
        if (v19) {
          CFDictionarySetValue(v20, @"Data", v19);
        }
        if (@"text") {
          CFDictionarySetValue(v20, @"Tag", @"text");
        }
        long long v21 = objc_msgSend(NSString, "stringWithFormat:", @"text_%d.txt", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), "count", v33));
        if (v21) {
          CFDictionarySetValue(v20, @"Path", v21);
        }
        [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v20];
      }
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      id v22 = v16;
      uint64_t v23 = [v22 countByEnumeratingWithState:&v36 objects:v42 count:16];
      if (v23)
      {
        uint64_t v24 = v23;
        uint64_t v25 = *(void *)v37;
        uint64_t v26 = MEMORY[0x1E4F1CC08];
        do
        {
          for (uint64_t i = 0; i != v24; ++i)
          {
            if (*(void *)v37 != v25) {
              objc_enumerationMutation(v22);
            }
            uint64_t v28 = *(void *)(*((void *)&v36 + 1) + 8 * i);
            uint64_t v29 = objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), "count", v33);
            [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) addObject:v26];
            id v30 = *(void **)(a1 + 40);
            uint64_t v31 = [NSNumber numberWithUnsignedInteger:v29];
            [v30 addObject:v31];

            [*(id *)(a1 + 48) addObject:v28];
          }
          uint64_t v24 = [v22 countByEnumeratingWithState:&v36 objects:v42 count:16];
        }
        while (v24);
      }

      char v8 = v34;
      id v7 = v35;
    }
  }
}

__CFString *sub_1D96C13B4()
{
  return @"\uFFFD";
}

void sub_1D96C13C0(uint64_t a1, void *a2)
{
  id v6 = [a2 guid];
  uint64_t v3 = [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) count];
  [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) addObject:MEMORY[0x1E4F1CC08]];
  id v4 = *(void **)(a1 + 32);
  int v5 = [NSNumber numberWithUnsignedInteger:v3];
  [v4 addObject:v5];

  [*(id *)(a1 + 40) addObject:v6];
}

void sub_1D96C1478(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  int v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  if (_IMWillLog())
  {
    uint64_t v15 = @"NO";
    if (a6) {
      uint64_t v15 = @"YES";
    }
    v72 = v15;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v14;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v12;
    _IMAlwaysLog();
  }
  if (_IMWillLog())
  {
    v72 = v13;
    _IMAlwaysLog();
  }
  if (!a6)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
    uint64_t v73 = *(void *)(a1 + 56);
    _IMWarn();
    objc_msgSend(*(id *)(a1 + 64), "failTransfer:error:", *(void *)(a1 + 72), v14, v73, v14);
    long long v21 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v21 trackMMSTranscodeFailureWithReason:2 sourceFile:*(void *)(a1 + 32) sizeLimits:*(void *)(a1 + 40) lowQualityModeEnabled:0];

    goto LABEL_79;
  }
  id v16 = [(__CFString *)v12 __imFirstObject];
  uint64_t v17 = [v16 path];

  __int16 v18 = [(__CFString *)v13 __imFirstObject];
  if (v17)
  {
    uint64_t v19 = [(__CFString *)v12 firstObject];
    if ((unint64_t)[(__CFString *)v12 count] < 2)
    {
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v20 = [(__CFString *)v12 objectAtIndex:1];
    }
    uint64_t v23 = objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance", v72);
    LOBYTE(v75) = 0;
    v87 = (void *)v20;
    [v23 trackMMSTranscodeWithReason:2 sourceFile:*(void *)(a1 + 32) highQualityFile:v19 lowQualityFile:v20 sizeLimits:*(void *)(a1 + 40) transcoded:a7 lowQualityModeEnabled:v75];

    uint64_t v24 = [v17 lastPathComponent];
    uint64_t v25 = [v24 stringByDeletingPathExtension];

    v89 = v13;
    v90 = v18;
    v88 = (void *)v19;
    v86 = v25;
    if ((unint64_t)[v25 length] < 0xB)
    {
      BOOL v35 = 0;
    }
    else
    {
      if (_IMWillLog())
      {
        v76 = v25;
        _IMAlwaysLog();
      }
      uint64_t v26 = objc_msgSend(v17, "stringByDeletingLastPathComponent", v76);
      id v27 = [v25 substringToIndex:9];
      uint64_t v28 = [v26 stringByAppendingPathComponent:v27];
      uint64_t v29 = [v17 pathExtension];
      id v30 = [v28 stringByAppendingPathExtension:v29];

      uint64_t v31 = [v30 length];
      int v32 = _IMWillLog();
      if (v31)
      {
        if (v32)
        {
          v76 = v30;
          v79 = v17;
          _IMAlwaysLog();
        }
        char v33 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", v76, v79);
        id v94 = 0;
        [v33 moveItemAtPath:v17 toPath:v30 error:&v94];
        id v34 = v94;

        BOOL v35 = v34 == 0;
        if (v34)
        {
          if (_IMWillLog())
          {
            v79 = v30;
            id v82 = v34;
            v76 = v17;
            _IMAlwaysLog();
          }
        }
        else
        {
          id v36 = v30;

          uint64_t v17 = v36;
        }
        __int16 v18 = v90;
      }
      else
      {
        __int16 v18 = v90;
        if (v32) {
          _IMAlwaysLog();
        }
        BOOL v35 = 0;
      }
    }
    long long v37 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    long long v38 = [v18 objectForKey:*MEMORY[0x1E4F6EBD0]];
    [v38 doubleValue];
    double v40 = v39;

    id v41 = [MEMORY[0x1E4F6C348] defaultHFSFileManager];
    value = [v41 MIMETypeOfPath:v17];

    int v42 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E4F22538]);
    int v43 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E4F225F8]);
    int v44 = UTTypeConformsTo(*(CFStringRef *)(a1 + 48), (CFStringRef)*MEMORY[0x1E4F22548]);
    v45 = @"ref";
    if (v42)
    {
      __int16 v46 = SMILPieceAudioTag;
    }
    else
    {
      __int16 v46 = SMILPieceVideoTag;
      if (v43) {
        __int16 v46 = SMILPieceImageTag;
      }
      if (!(v43 | v44)) {
        goto LABEL_40;
      }
    }
    id v47 = *v46;

    v45 = v47;
LABEL_40:
    __int16 v48 = objc_msgSend(*(id *)(a1 + 56), "localPath", v76, v79, v82);
    uint64_t v49 = [v48 lastPathComponent];
    uint64_t v50 = [v49 stringByDeletingPathExtension];

    if (v35)
    {
      if (_IMWillLog())
      {
        v77 = v50;
        _IMAlwaysLog();
      }
      unint64_t v51 = objc_msgSend(v17, "lastPathComponent", v77);
      unsigned int v52 = [v51 stringByDeletingPathExtension];

      if (_IMWillLog())
      {
        v77 = v17;
        v80 = v52;
        _IMAlwaysLog();
      }
    }
    else
    {
      unsigned int v52 = v50;
    }
    unsigned int v53 = objc_msgSend(MEMORY[0x1E4F6C348], "defaultHFSFileManager", v77, v80);
    id v93 = 0;
    int v54 = [v53 attributesOfItemAtPath:v17 error:&v93];
    id v85 = v93;

    v84 = v54;
    uint64_t v55 = [v54 fileSize];
    id v56 = [v17 pathExtension];
    uint64_t v57 = v12;
    v58 = v14;
    uint64_t v59 = v55;
    if ([v56 isEqualToString:@"jpeg"]) {
      unint64_t v60 = @"jpg";
    }
    else {
      unint64_t v60 = (__CFString *)v56;
    }

    v83 = v60;
    unint64_t v61 = [v52 stringByAppendingPathExtension:v60];

    if (value) {
      CFDictionarySetValue(v37, @"Type", value);
    }
    int v62 = (void *)v59;
    if (v45) {
      CFDictionarySetValue(v37, @"Tag", v45);
    }
    uint64_t v14 = v58;
    if (v17) {
      CFDictionarySetValue(v37, @"Filename", v17);
    }
    int v63 = [NSNumber numberWithDouble:v40];
    int v12 = v57;
    if (v63) {
      CFDictionarySetValue(v37, @"Duration", v63);
    }

    if (v61) {
      CFDictionarySetValue(v37, @"Path", v61);
    }
    if (_IMWillLog()) {
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v17;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = *(void **)(a1 + 48);
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v45;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v61;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = value;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v62;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v37;
      _IMAlwaysLog();
    }
    if (_IMWillLog())
    {
      v78 = v37;
      uint64_t v81 = *(void *)(a1 + 120);
      _IMAlwaysLog();
    }
    objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 104) + 8) + 40), "replaceObjectAtIndex:withObject:", *(void *)(a1 + 120), v37, v78, v81);
    unint64_t v64 = [*(id *)(a1 + 64) transferForGUID:*(void *)(a1 + 72)];
    uint64_t v65 = [*(id *)(a1 + 80) guid];
    [v64 setMessageGUID:v65];

    [*(id *)(a1 + 64) updateTransfer:*(void *)(a1 + 72) currentBytes:v62 totalBytes:v62];
    uint64_t v66 = *(void **)(a1 + 64);
    uint64_t v67 = [*(id *)(a1 + 56) guid];
    [v66 startFinalizingTransfer:v67];

    uint64_t v13 = v89;
    __int16 v18 = v90;
    goto LABEL_78;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 112) + 8) + 24) = 1;
  uint64_t v74 = *(void *)(a1 + 56);
  _IMWarn();
  objc_msgSend(*(id *)(a1 + 64), "failTransfer:error:", *(void *)(a1 + 72), v14, v74);
  id v22 = [MEMORY[0x1E4F6E890] sharedInstance];
  [v22 trackMMSTranscodeFailureWithReason:2 sourceFile:*(void *)(a1 + 32) sizeLimits:*(void *)(a1 + 40) lowQualityModeEnabled:0];

LABEL_78:
LABEL_79:
  if (*(void *)(a1 + 88))
  {
    v68 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v69 = *(void *)(a1 + 88);
    id v92 = 0;
    char v70 = [v68 removeItemAtURL:v69 error:&v92];
    id v71 = v92;

    if ((v70 & 1) == 0 && _IMWillLog()) {
      _IMAlwaysLog();
    }
  }
  else
  {
    id v71 = 0;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 96));
}

uint64_t sub_1D96C1F04(uint64_t a1)
{
  if (_IMWillLog())
  {
    id v2 = [*(id *)(a1 + 32) fileTransferGUIDs];
    _IMAlwaysLog();
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1D96C2780(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96C264CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96C645C()
{
  qword_1EBE2BF28 = objc_alloc_init(IMDBackwardCompatibilityMessageIdentifier);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96C6E14(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96C684CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D96C74B0(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F504C8] readMessageStream];
  uint64_t v3 = [v2 source];

  id v4 = (void *)[objc_alloc(MEMORY[0x1E4F503F8]) initWithIDSHandle:*(void *)(a1 + 32)];
  [v3 sendEvent:v4];

  if (IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Donating Read Message Event to Stream for %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

__CFDictionary *sub_1D96C8A70(uint64_t a1, void *a2)
{
  id v2 = a2;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  id v4 = [v2 accessibilityStickerName];
  if (v4) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D3C0], v4);
  }

  if (objc_msgSend(v2, "has_adamID"))
  {
    int v5 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v2, "adamID"));
    if (v5)
    {
      uint64_t v6 = v5;
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D3C8], v5);
    }
  }
  int v7 = [v2 bundleID];
  if (v7) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D3E0], v7);
  }

  uint64_t v8 = [v2 packName];
  if (v8) {
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D3D0], v8);
  }

  if (objc_opt_respondsToSelector())
  {
    if (objc_msgSend(v2, "has_previewGenerationSizeHeight"))
    {
      uint64_t v9 = NSNumber;
      [v2 previewGenerationSizeHeight];
      int v10 = objc_msgSend(v9, "numberWithDouble:");
      if (v10)
      {
        uint64_t v11 = v10;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D408], v10);
      }
    }
    if (objc_msgSend(v2, "has_previewGenerationSizeWidth"))
    {
      int v12 = NSNumber;
      [v2 previewGenerationSizeWidth];
      uint64_t v13 = objc_msgSend(v12, "numberWithDouble:");
      if (v13)
      {
        uint64_t v14 = v13;
        CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D410], v13);
      }
    }
  }
  uint64_t v15 = [v2 previewGenerationConstraints];
  if (v15)
  {
    id v16 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    if (objc_opt_respondsToSelector())
    {
      if (objc_msgSend(v15, "has_maxPixelWidth"))
      {
        uint64_t v17 = NSNumber;
        [v15 maxPixelWidth];
        __int16 v18 = objc_msgSend(v17, "numberWithDouble:");
        if (v18)
        {
          uint64_t v19 = v18;
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F6DF18], v18);
        }
      }
      if (objc_msgSend(v15, "has_minThumbSizeHeight"))
      {
        uint64_t v20 = NSNumber;
        [v15 minThumbSizeHeight];
        long long v21 = objc_msgSend(v20, "numberWithDouble:");
        if (v21)
        {
          id v22 = v21;
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F6DF20], v21);
        }
      }
      if (objc_msgSend(v15, "has_minThumbSizeWidth"))
      {
        uint64_t v23 = NSNumber;
        [v15 minThumbSizeWidth];
        uint64_t v24 = objc_msgSend(v23, "numberWithDouble:");
        if (v24)
        {
          uint64_t v25 = v24;
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F6DF28], v24);
        }
      }
      if (objc_msgSend(v15, "has_scale"))
      {
        uint64_t v26 = NSNumber;
        [v15 scale];
        id v27 = objc_msgSend(v26, "numberWithDouble:");
        if (v27)
        {
          uint64_t v28 = v27;
          CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F6DF30], v27);
        }
      }
    }
    uint64_t v29 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v15, "isSticker"));
    if (v29) {
      CFDictionarySetValue(v16, (const void *)*MEMORY[0x1E4F6DF10], v29);
    }

    if (v16) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6D3F8], v16);
    }
  }

  return Mutable;
}

uint64_t sub_1D96C9A38(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = [v4 expectedFileSize];
  if (v6 == [v5 expectedFileSize])
  {
    uint64_t v7 = 0;
  }
  else
  {
    unint64_t v8 = [v4 expectedFileSize];
    if (v8 < [v5 expectedFileSize]) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = -1;
    }
  }

  return v7;
}

void sub_1D96C9AC0(uint64_t a1, void *a2, uint64_t a3)
{
  id v20 = a2;
  if (a3)
  {
    objc_msgSend(NSString, "stringWithFormat:", @"-%d", a3);
    id v5 = (__CFString *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v5 = &stru_1F3398578;
  }
  uint64_t v6 = [@"mmcs-signature-hex" stringByAppendingString:v5];
  uint64_t v7 = [@"mmcs-owner" stringByAppendingString:v5];
  unint64_t v8 = [@"mmcs-url" stringByAppendingString:v5];
  uint64_t v9 = [@"decryption-key" stringByAppendingString:v5];
  int v10 = [@"file-size" stringByAppendingString:v5];
  uint64_t v11 = [v20 encryptionKey];
  if (v11) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v9, v11);
  }

  int v12 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v20, "expectedFileSize"));
  if (v12) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v12);
  }

  uint64_t v13 = [v20 ownerID];
  if (v13) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, v13);
  }

  uint64_t v14 = [v20 signature];
  if (v14) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v6, v14);
  }

  uint64_t v15 = [v20 attachmentURL];
  id v16 = [v15 absoluteString];

  if (v16) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v8, v16);
  }

  uint64_t v17 = *(const void **)(a1 + 40);
  if (v17) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"name", v17);
  }
  __int16 v18 = [*(id *)(a1 + 48) mimeType];
  if (v18) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"mime-type", v18);
  }

  uint64_t v19 = [*(id *)(a1 + 48) utiType];
  if (v19) {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), @"uti-type", v19);
  }
}

void sub_1D96CA9B8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v109 = *MEMORY[0x1E4F143B8];
  id v98 = a2;
  id v5 = [v98 allKeys];
  v99 = (void *)[v5 mutableCopy];

  uint64_t v6 = *MEMORY[0x1E4F50A50];
  uint64_t v7 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F50A50]];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v9 = [v98 objectForKeyedSubscript:v6];
    int v10 = [*(id *)(a1 + 64) _fileTransferMatchingAttribute:v9 inFileTransfers:*(void *)(a1 + 32)];
    if (!v10)
    {
      int v10 = [*(id *)(a1 + 64) _fileTransferMatchingAttribute:v9 inFileTransfers:*(void *)(a1 + 40)];
      if (!v10)
      {
        int v10 = [*(id *)(a1 + 64) fileTransferForBlastDoorFileTransferAttribute:v9 fileTransferGUIDs:*(void *)(a1 + 48) supportingStickerAttributes:*(unsigned __int8 *)(a1 + 72)];
        if (v10) {
          [*(id *)(a1 + 40) addObject:v10];
        }
      }
    }
    uint64_t v11 = [v10 guid];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v13 = Mutable;
    if (v11) {
      CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E4F6C188], v11);
    }
    uint64_t v14 = [v9 attachmentSubtype];
    uint64_t v15 = [v14 audioMessage];

    if (v15)
    {
      id v16 = [v15 audioTranscription];
      if (v16) {
        CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F6CAD0], v16);
      }
    }
    if ([v10 isAdaptiveImageGlyph]) {
      CFDictionarySetValue(v13, (const void *)*MEMORY[0x1E4F6C170], MEMORY[0x1E4F1CC38]);
    }
    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v6, a3, a4);
    [v99 removeObject:v6];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v13, a3, a4);
    [*(id *)(a1 + 48) addObject:v11];
  }
  uint64_t v17 = *MEMORY[0x1E4F50A58];
  __int16 v18 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F50A58]];
  objc_opt_class();
  char v19 = objc_opt_isKindOfClass();

  if (v19)
  {
    id v20 = [v98 objectForKeyedSubscript:v17];
    long long v21 = [*(id *)(a1 + 64) _fileTransferMatchingAttribute:v20 inFileTransfers:*(void *)(a1 + 32)];
    if (!v21)
    {
      long long v21 = [*(id *)(a1 + 64) _fileTransferMatchingAttribute:v20 inFileTransfers:*(void *)(a1 + 40)];
      if (!v21)
      {
        long long v21 = [*(id *)(a1 + 64) fileTransferForBlastDoorFileTransferAttribute:v20 fileTransferGUIDs:*(void *)(a1 + 48) supportingStickerAttributes:*(unsigned __int8 *)(a1 + 72)];
        if (v21) {
          [*(id *)(a1 + 40) addObject:v21];
        }
      }
    }
    id v22 = [v21 guid];
    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v17, a3, a4);
    [v99 removeObject:v17];
    [*(id *)(a1 + 48) addObject:v22];
  }
  uint64_t v23 = (const void *)*MEMORY[0x1E4F6C120];
  uint64_t v24 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6C120]];
  objc_opt_class();
  char v25 = objc_opt_isKindOfClass();

  if (v25)
  {
    uint64_t v26 = [v98 objectForKeyedSubscript:v23];
    id v27 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    uint64_t v28 = objc_msgSend(NSNumber, "numberWithInteger:", objc_msgSend(v26, "direction"));
    if (v28) {
      CFDictionarySetValue(v27, v23, v28);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v23, a3, a4);
    [v99 removeObject:v23];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v27, a3, a4);
  }
  uint64_t v29 = (const void *)*MEMORY[0x1E4F6C1F8];
  id v30 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6C1F8]];
  objc_opt_class();
  char v31 = objc_opt_isKindOfClass();

  if (v31)
  {
    int v32 = [v98 objectForKeyedSubscript:v29];
    char v33 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    id v34 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v32, "partNumber"));
    if (v34) {
      CFDictionarySetValue(v33, v29, v34);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v29, a3, a4);
    [v99 removeObject:v29];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v33, a3, a4);
  }
  BOOL v35 = (const void *)*MEMORY[0x1E4F6C140];
  id v36 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6C140]];
  objc_opt_class();
  char v37 = objc_opt_isKindOfClass();

  if (v37)
  {
    long long v38 = [v98 objectForKeyedSubscript:v35];
    double v39 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    double v40 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v38, "optionFlags"));
    if (v40) {
      CFDictionarySetValue(v39, v35, v40);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v35, a3, a4);
    [v99 removeObject:v35];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v39, a3, a4);
  }
  id v41 = (const void *)*MEMORY[0x1E4F6C138];
  int v42 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6C138]];
  objc_opt_class();
  char v43 = objc_opt_isKindOfClass();

  if (v43)
  {
    int v44 = [v98 objectForKeyedSubscript:v41];
    v45 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    __int16 v46 = [v44 breadcrumbText];
    if (v46) {
      CFDictionarySetValue(v45, v41, v46);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v41, a3, a4);
    [v99 removeObject:v41];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v45, a3, a4);
  }
  id v47 = (const void *)*MEMORY[0x1E4F6D538];
  __int16 v48 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6D538]];
  objc_opt_class();
  char v49 = objc_opt_isKindOfClass();

  if (v49)
  {
    uint64_t v50 = [v98 objectForKeyedSubscript:v47];
    unint64_t v51 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    unsigned int v52 = [v50 uri];
    if (v52) {
      CFDictionarySetValue(v51, v47, v52);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v47, a3, a4);
    [v99 removeObject:v47];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v51, a3, a4);
  }
  unsigned int v53 = (const void *)*MEMORY[0x1E4F6C1D0];
  int v54 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6C1D0]];
  objc_opt_class();
  char v55 = objc_opt_isKindOfClass();

  if (v55)
  {
    id v56 = [v98 objectForKeyedSubscript:v53];
    uint64_t v57 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    v58 = [v56 link];
    if (v58) {
      CFDictionarySetValue(v57, v53, v58);
    }

    objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v53, a3, a4);
    [v99 removeObject:v53];
    objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v57, a3, a4);
  }
  uint64_t v59 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v60 = [v59 isExpressiveTextEnabled];

  if (v60)
  {
    unint64_t v61 = (const void *)*MEMORY[0x1E4F6E400];
    int v62 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6E400]];
    objc_opt_class();
    char v63 = objc_opt_isKindOfClass();

    if (v63)
    {
      unint64_t v64 = [v98 objectForKeyedSubscript:v61];
      uint64_t v65 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v66 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v64, "type"));
      if (v66) {
        CFDictionarySetValue(v65, v61, v66);
      }

      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v61, a3, a4);
      [v99 removeObject:v61];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v65, a3, a4);
    }
    uint64_t v67 = (const void *)*MEMORY[0x1E4F6E3F8];
    v68 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6E3F8]];
    objc_opt_class();
    char v69 = objc_opt_isKindOfClass();

    if (v69)
    {
      char v70 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v70, v67, &unk_1F33C56D0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v67, a3, a4);
      [v99 removeObject:v67];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v70, a3, a4);
    }
    id v71 = (const void *)*MEMORY[0x1E4F6E408];
    v72 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6E408]];
    objc_opt_class();
    char v73 = objc_opt_isKindOfClass();

    if (v73)
    {
      uint64_t v74 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v74, v71, &unk_1F33C56D0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v71, a3, a4);
      [v99 removeObject:v71];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v74, a3, a4);
    }
    uint64_t v75 = (const void *)*MEMORY[0x1E4F6E420];
    v76 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6E420]];
    objc_opt_class();
    char v77 = objc_opt_isKindOfClass();

    if (v77)
    {
      v78 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v78, v75, &unk_1F33C56D0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v75, a3, a4);
      [v99 removeObject:v75];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v78, a3, a4);
    }
    v79 = (const void *)*MEMORY[0x1E4F6E410];
    v80 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6E410]];
    objc_opt_class();
    char v81 = objc_opt_isKindOfClass();

    if (v81)
    {
      id v82 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFDictionarySetValue(v82, v79, &unk_1F33C56D0);
      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v79, a3, a4);
      [v99 removeObject:v79];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v82, a3, a4);
    }
  }
  v83 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v84 = [v83 isRichLinkImprovementsEnabled];

  if (v84)
  {
    id v85 = (const void *)*MEMORY[0x1E4F6D4F8];
    v86 = [v98 objectForKeyedSubscript:*MEMORY[0x1E4F6D4F8]];
    objc_opt_class();
    char v87 = objc_opt_isKindOfClass();

    if (v87)
    {
      v88 = [v98 objectForKeyedSubscript:v85];
      v89 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      uint64_t v90 = [v88 isRichLink];
      v91 = [NSNumber numberWithBool:v90];
      if (v91) {
        CFDictionarySetValue(v89, v85, v91);
      }

      objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v85, a3, a4);
      [v99 removeObject:v85];
      objc_msgSend(*(id *)(a1 + 56), "addAttributes:range:", v89, a3, a4);
    }
  }
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  id v92 = v99;
  uint64_t v93 = [v92 countByEnumeratingWithState:&v102 objects:v108 count:16];
  if (v93)
  {
    uint64_t v94 = *(void *)v103;
    do
    {
      for (uint64_t i = 0; i != v93; ++i)
      {
        if (*(void *)v103 != v94) {
          objc_enumerationMutation(v92);
        }
        uint64_t v96 = *(void *)(*((void *)&v102 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          v97 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v97, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            uint64_t v107 = v96;
            _os_log_impl(&dword_1D967A000, v97, OS_LOG_TYPE_INFO, "<WARNING> Unhandled attribute, removing it: %@", buf, 0xCu);
          }
        }
        objc_msgSend(*(id *)(a1 + 56), "removeAttribute:range:", v96, a3, a4);
      }
      uint64_t v93 = [v92 countByEnumeratingWithState:&v102 objects:v108 count:16];
    }
    while (v93);
  }
}

uint64_t sub_1D96CC200(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 toIdentifier];
  int v5 = [v3 isEqualToString:v4];

  return v5 ^ 1u;
}

uint64_t sub_1D96CC8A4(uint64_t a1, void *a2)
{
  id v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 toIdentifier];
  int v5 = [v3 isEqualToString:v4];

  return v5 ^ 1u;
}

uint64_t sub_1D96CD124()
{
  qword_1EBE2B940 = objc_alloc_init(IMDCKExitManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96CD324(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) recordZoneManager];
  [v1 createSubscriptionIfNeededOnDeDupeZoneForSubscription:@"ExitRecordKeyManateeZoneSubscription" recordType:@"Exit" completionBlock:0];
}

void sub_1D96CDB1C(id *a1)
{
  v18[1] = *MEMORY[0x1E4F143B8];
  if ([a1[4] _saltZoneCreated])
  {
    if (([a1[4] _subscriptionCreated] & 1) == 0 && IMOSLoggingEnabled())
    {
      id v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "We were not able to create the subscription, we'll still try to write the exit record as we'll retry updating the subscription on imagent launch", buf, 2u);
      }
    }
    id v3 = objc_alloc(MEMORY[0x1E4F1A2D8]);
    id v4 = [a1[4] exitRecordID];
    int v5 = (void *)[v3 initWithRecordType:@"Exit" recordID:v4];

    [v5 setObject:a1[5] forKey:@"CloudKitExitOnDate"];
    id v6 = objc_alloc(MEMORY[0x1E4F1A198]);
    v18[0] = v5;
    uint64_t v7 = [MEMORY[0x1E4F1C978] arrayWithObjects:v18 count:1];
    unint64_t v8 = (void *)[v6 initWithRecordsToSave:v7 recordIDsToDelete:0];

    uint64_t v9 = [a1[4] exitConfiguration];
    [v8 setConfiguration:v9];

    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_1D96CDE98;
    v14[3] = &unk_1E6B73A38;
    v14[4] = a1[4];
    id v15 = a1[5];
    id v16 = a1[6];
    [v8 setModifyRecordsCompletionBlock:v14];
    if (IMOSLoggingEnabled())
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "writeExitRecordWithDate scheduling opperation", buf, 2u);
      }
    }
    [a1[4] _scheduleOperation:v8];

    goto LABEL_18;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "******* Failed writeExitRecordWithDate salt zone was not present *********", buf, 2u);
    }
  }
  if (a1[6])
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1D96CE064;
    uint64_t v12[3] = &unk_1E6B731C8;
    id v13 = a1[6];
    dispatch_async(MEMORY[0x1E4F14428], v12);
    int v5 = v13;
LABEL_18:
  }
}

void sub_1D96CDE98(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (IMOSLoggingEnabled())
  {
    int v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v17 = v9;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "writeExitRecordWithDate returned with error: %@", buf, 0xCu);
    }
  }
  if (!v9)
  {
    [*(id *)(a1 + 32) setExitRecordDate:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) setErrorFetchingExitDate:0];
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  v13[2] = sub_1D96CE03C;
  v13[3] = &unk_1E6B73A10;
  id v11 = *(id *)(a1 + 48);
  id v14 = v9;
  id v15 = v11;
  id v12 = v9;
  dispatch_async(MEMORY[0x1E4F14428], v13);
}

uint64_t sub_1D96CE03C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(void *)(a1 + 32) == 0);
  }
  return result;
}

void sub_1D96CE064(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.Messages.IMDCKExitManagerErrorDomain" code:1 userInfo:0];
  (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
}

void sub_1D96CE450(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = [*(id *)(a1 + 32) fetchedExitDateOnLaunch];
      uint64_t v9 = [*(id *)(a1 + 32) errorFetchingExitDate];
      int v10 = (void *)v9;
      id v11 = @"NO";
      *(_DWORD *)id v15 = 138413058;
      *(void *)&void v15[4] = v5;
      *(_WORD *)&v15[12] = 2112;
      if (v8) {
        id v11 = @"YES";
      }
      *(void *)&v15[14] = v6;
      __int16 v16 = 2112;
      id v17 = v11;
      __int16 v18 = 2112;
      uint64_t v19 = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Updating our exit date to %@  with error %@. fetchedExitDateOnLaunch [%@] or previous errorFetchingDate [%@]", v15, 0x2Au);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "setFetchedExitDateOnLaunch:", 1, *(_OWORD *)v15);
  uint64_t v12 = *(void *)(a1 + 40);
  if (v12)
  {
    id v13 = [*(id *)(a1 + 32) exitRecordDate];
    id v14 = [*(id *)(a1 + 32) errorFetchingExitDate];
    (*(void (**)(uint64_t, void *, void *))(v12 + 16))(v12, v13, v14);
  }
}

void sub_1D96CE5F4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      id v3 = [*(id *)(a1 + 32) exitRecordDate];
      id v4 = [*(id *)(a1 + 32) errorFetchingExitDate];
      int v8 = 138412546;
      id v9 = v3;
      __int16 v10 = 2112;
      id v11 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Dispatching back to main queue exitDate: %@ error: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  id v6 = [*(id *)(a1 + 32) exitRecordDate];
  id v7 = [*(id *)(a1 + 32) errorFetchingExitDate];
  (*(void (**)(uint64_t, void *, void *))(v5 + 16))(v5, v6, v7);
}

void sub_1D96CE844(uint64_t a1)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) setIsSyncing:1];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Calling _fetchExitRecordDateWithCompletion", buf, 2u);
    }
  }
  id v3 = objc_alloc(MEMORY[0x1E4F1A0A8]);
  id v4 = [*(id *)(a1 + 32) exitRecordID];
  v17[0] = v4;
  uint64_t v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
  id v6 = (void *)[v3 initWithRecordIDs:v5];

  id v7 = [*(id *)(a1 + 32) exitConfiguration];
  [v6 setConfiguration:v7];

  uint64_t v9 = MEMORY[0x1E4F143A8];
  uint64_t v10 = 3221225472;
  id v11 = sub_1D96CEA8C;
  uint64_t v12 = &unk_1E6B73B00;
  uint64_t v13 = *(void *)(a1 + 32);
  id v14 = *(id *)(a1 + 40);
  [v6 setFetchRecordsCompletionBlock:&v9];
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      __int16 v16 = v6;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "_fetchExitRecordDateWithCompletion scheduling opperation %@", buf, 0xCu);
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_scheduleOperation:", v6, v9, v10, v11, v12, v13);
}

void sub_1D96CEA8C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v26 = v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "** Error fetching exit record %@", buf, 0xCu);
      }
    }
    uint64_t v9 = (id *)(a1 + 32);
    [*(id *)(a1 + 32) setIsSyncing:0];
    if ([v6 code] == 2)
    {
      uint64_t v10 = [*v9 errorAnalyzer];
      int v11 = [v10 CKPartialError:v6 onlyHasErrorCodes:&unk_1F33C5F70];

      if (v11)
      {

        uint64_t v12 = 0;
        goto LABEL_16;
      }
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Done fetching exit record successfully", buf, 2u);
      }
    }
    uint64_t v9 = (id *)(a1 + 32);
    [*(id *)(a1 + 32) setIsSyncing:0];
  }
  id v14 = [*v9 exitRecordID];
  id v15 = [v5 objectForKeyedSubscript:v14];

  uint64_t v12 = [v15 valueForKey:@"CloudKitExitOnDate"];

  if (v6)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96CEE74;
    block[3] = &unk_1E6B73268;
    id v16 = v6;
    id v24 = v16;
    dispatch_async(MEMORY[0x1E4F14428], block);
    id v17 = v24;
    goto LABEL_23;
  }
LABEL_16:
  id v17 = [*v9 exitRecordDate];
  [*v9 setExitRecordDate:v12];
  if (([v12 isEqualToDate:v17] & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        id v26 = v17;
        __int16 v27 = 2112;
        uint64_t v28 = v12;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exit date has been modified from %@ to %@, attempting to toggle icloud settings toggle", buf, 0x16u);
      }
    }
    [*v9 _evalToggleiCloudSettingsSwitch];
  }
  id v16 = 0;
LABEL_23:

  [*(id *)(a1 + 32) setErrorFetchingExitDate:v16];
  if (*(void *)(a1 + 40))
  {
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1D96CEF6C;
    v19[3] = &unk_1E6B73AD8;
    id v22 = *(id *)(a1 + 40);
    id v20 = v12;
    id v21 = v16;
    dispatch_async(MEMORY[0x1E4F14428], v19);
  }
}

void sub_1D96CEE74(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Unable to fetch exit zone record Error: %@", (uint8_t *)&v5, 0xCu);
    }
  }
  id v4 = [MEMORY[0x1E4F6E890] sharedInstance];
  [v4 autoBugCaptureWithSubType:@"ExitRecord" errorPayload:*(void *)(a1 + 32)];
}

uint64_t sub_1D96CEF6C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1D96CF0A4(uint64_t a1)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1A198]);
  uint64_t v3 = [*(id *)(a1 + 32) exitRecordID];
  v11[0] = v3;
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
  int v5 = (void *)[v2 initWithRecordsToSave:0 recordIDsToDelete:v4];

  [v5 setAtomic:1];
  [v5 setSavePolicy:2];
  uint64_t v6 = [*(id *)(a1 + 32) exitConfiguration];
  [v5 setConfiguration:v6];

  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1D96CF288;
  v9[3] = &unk_1E6B73B28;
  v9[4] = *(void *)(a1 + 32);
  id v10 = *(id *)(a1 + 40);
  [v5 setModifyRecordsCompletionBlock:v9];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "deleteExitRecordWithCompletion scheduling opperation", v8, 2u);
    }
  }
  [*(id *)(a1 + 32) _scheduleOperation:v5];
}

void sub_1D96CF288(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v9)
  {
    if ([v9 code] == 2)
    {
      int v11 = [*(id *)(a1 + 32) errorAnalyzer];
      int v12 = [v11 CKPartialError:v10 onlyHasErrorCodes:&unk_1F33C5F88];

      if (v12)
      {

        id v10 = 0;
      }
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v20 = v10;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "deleteExitRecordWithCompletion returned with error: %@", buf, 0xCu);
    }
  }
  if (!v10)
  {
    [*(id *)(a1 + 32) setExitRecordDate:0];
    [*(id *)(a1 + 32) setErrorFetchingExitDate:0];
  }
  v16[0] = MEMORY[0x1E4F143A8];
  v16[1] = 3221225472;
  v16[2] = sub_1D96CF478;
  v16[3] = &unk_1E6B73A10;
  id v14 = *(id *)(a1 + 40);
  id v17 = v10;
  id v18 = v14;
  id v15 = v10;
  dispatch_async(MEMORY[0x1E4F14428], v16);
}

uint64_t sub_1D96CF478(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL))(result + 16))(result, *(void *)(a1 + 32) == 0);
  }
  return result;
}

void sub_1D96CFAF8(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating salt zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D96CFE58(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating exit zone subscription %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D96D0344(uint64_t a1, int a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = @"NO";
      if (a2) {
        uint64_t v6 = @"YES";
      }
      int v7 = 138412546;
      id v8 = v6;
      __int16 v9 = 2112;
      id v10 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Wrote last sync date to CK first time, success %@, error %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1D96D063C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) errorAnalyzer];
  int v6 = [v5 errorIndicatesZoneNotCreated:v4];

  if (v6)
  {

    id v4 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void *)(a1 + 40);
      int v9 = 138412546;
      uint64_t v10 = v8;
      __int16 v11 = 2112;
      id v12 = v4;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Submitted metric with opGroupName %@ Error %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_1D96D08FC(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    int v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating analytic zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D96D0C48(id *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [a1[4] errorAnalyzer];
  int v6 = [v5 errorIndicatesZoneNotCreated:v4];

  if (v6)
  {
    int v7 = [a1[4] ckQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96D0E9C;
    block[3] = &unk_1E6B73BC8;
    void block[4] = a1[4];
    id v14 = a1[5];
    id v15 = a1[6];
    dispatch_async(v7, block);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v10 = a1[5];
        id v9 = a1[6];
        *(_DWORD *)buf = 138412546;
        id v17 = v9;
        __int16 v18 = 2112;
        id v19 = v10;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Submitted metric with opName %@, dict: %@", buf, 0x16u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      __int16 v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = [a1[5] objectForKeyedSubscript:@"syncErrors"];
        *(_DWORD *)buf = 138412290;
        id v17 = v12;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Reporting errors: %@", buf, 0xCu);
      }
    }
  }
}

void sub_1D96D0E9C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Analytic zone does not exist, so creating it before resubmitting metric.", buf, 2u);
    }
  }
  int v3 = [*(id *)(a1 + 32) _analyticZoneCreated];
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Successfully created analytic zone so trying to submit metric again.", buf, 2u);
      }
    }
    int v6 = *(void **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 40);
    id v8 = *(void **)(a1 + 48);
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1D96D10A4;
    v10[3] = &unk_1E6B73BA0;
    void v10[4] = v6;
    id v11 = v8;
    id v12 = *(id *)(a1 + 40);
    [v6 submitCloudKitAnalyticWithDictionary:v7 operationGroupName:v11 completion:v10];
  }
  else if (v4)
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Failed to create analytic zone.", buf, 2u);
    }
  }
}

void sub_1D96D10A4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) errorAnalyzer];
  int v6 = [v5 errorIndicatesZoneNotCreated:v4];

  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v14) = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Issue, we created the zone and we got back same error again.", (uint8_t *)&v14, 2u);
      }
    }
  }
  else
  {
    if (v7)
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = *(void **)(a1 + 40);
        uint64_t v11 = *(void *)(a1 + 48);
        int v14 = 138412546;
        id v15 = v10;
        __int16 v16 = 2112;
        uint64_t v17 = v11;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Submitted metric with opName %@, dict: %@", (uint8_t *)&v14, 0x16u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = [*(id *)(a1 + 48) objectForKeyedSubscript:@"syncErrors"];
        int v14 = 138412290;
        id v15 = v13;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Reporting errors: %@", (uint8_t *)&v14, 0xCu);
      }
    }
  }
}

void sub_1D96D1270(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96D123CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D96D15B4(void *a1)
{
  v22[1] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1A198]);
  v22[0] = a1[4];
  int v3 = [MEMORY[0x1E4F1C978] arrayWithObjects:v22 count:1];
  id v4 = (void *)[v2 initWithRecordsToSave:v3 recordIDsToDelete:0];

  id v5 = objc_alloc_init(MEMORY[0x1E4F1A208]);
  [v5 setAllowsCellularAccess:1];
  [v5 setQualityOfService:17];
  id v6 = objc_alloc_init(MEMORY[0x1E4F1A218]);
  [v6 setName:a1[5]];
  [v4 setSavePolicy:2];
  [v4 setGroup:v6];
  [v4 setConfiguration:v5];
  int v7 = [v4 operationID];
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v21 = v7;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Trying to submit CK metric operation with ID %@", buf, 0xCu);
    }
  }
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  uint64_t v10 = a1[6];
  id v9 = a1 + 6;
  int v14 = sub_1D96D17F4;
  id v15 = &unk_1E6B73BF0;
  char v19 = *((unsigned char *)v9 + 16);
  uint64_t v16 = v10;
  id v17 = v7;
  id v18 = (id)v9[1];
  id v11 = v7;
  [v4 setModifyRecordsCompletionBlock:&v12];
  objc_msgSend((id)*v9, "_scheduleMetricOperation:", v4, v12, v13, v14, v15, v16);
}

void sub_1D96D17F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (*(unsigned char *)(a1 + 56))
  {
    uint64_t v10 = [*(id *)(a1 + 32) errorAnalyzer];
    int v11 = [v10 CKPartialError:v9 onlyHasErrorCodes:&unk_1F33C5FA0];

    if (v11)
    {

      id v9 = 0;
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      uint64_t v13 = *(void *)(a1 + 40);
      if (*(unsigned char *)(a1 + 56)) {
        int v14 = @"YES";
      }
      else {
        int v14 = @"NO";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v19 = v13;
      __int16 v20 = 2112;
      uint64_t v21 = v14;
      __int16 v22 = 2112;
      id v23 = v9;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Completion called for submittion metric operation with ID %@. ignoreZoneNotFoundError %@ OperationError %@", buf, 0x20u);
    }
  }
  if (*(void *)(a1 + 48))
  {
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D96D19F0;
    v15[3] = &unk_1E6B73A10;
    id v17 = *(id *)(a1 + 48);
    id v16 = v9;
    dispatch_async(MEMORY[0x1E4F14428], v15);
  }
}

uint64_t sub_1D96D19F0(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) == 0);
}

void sub_1D96D23D8(uint64_t a1)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F1A320]);
  int v3 = (void *)[v2 initWithZoneName:@"Messages_Enabled" ownerName:*MEMORY[0x1E4F19C08]];
  id v4 = objc_alloc(MEMORY[0x1E4F1A090]);
  v13[0] = v3;
  id v5 = [MEMORY[0x1E4F1C978] arrayWithObjects:v13 count:1];
  id v6 = (void *)[v4 initWithRecordZoneIDs:v5];

  id v7 = objc_alloc_init(MEMORY[0x1E4F1A208]);
  objc_msgSend(v7, "setQualityOfService:", objc_msgSend(*(id *)(a1 + 32), "derivedQualityOfService"));
  [v7 setAllowsCellularAccess:1];
  id v8 = objc_alloc_init(MEMORY[0x1E4F1A218]);
  [v8 setDefaultConfiguration:v7];
  [v8 setName:@"Messages Enabled Ping"];
  [v8 setQuantity:1];
  [v6 setGroup:v8];
  [v6 setFetchRecordZonesCompletionBlock:&unk_1F33908C0];
  if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = [v6 operationID];
      int v11 = 138412290;
      uint64_t v12 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Scheduling ping cloudkit fetch zone operation %@", (uint8_t *)&v11, 0xCu);
    }
  }
  [*(id *)(a1 + 32) _scheduleOperation:v6];
}

void sub_1D96D25DC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "sendCloudKitZoneFetchRequestToNoteFeatureIsOn: Fetch zone operation error %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

uint64_t sub_1D96D30AC()
{
  qword_1EA8CA430 = objc_alloc_init(IMDCKSyncTokenStore);

  return MEMORY[0x1F41817F8]();
}

IMDRecordZoneManager *sub_1D96D508C()
{
  uint64_t result = objc_alloc_init(IMDRecordZoneManager);
  qword_1EBE2B948 = (uint64_t)result;
  return result;
}

uint64_t sub_1D96D5C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  int v6 = IMOSLoggingEnabled();
  if (a3)
  {
    if (!v6) {
      goto LABEL_9;
    }
    int v7 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    int v13 = 138412546;
    uint64_t v14 = a2;
    __int16 v15 = 2112;
    uint64_t v16 = a3;
    id v8 = "We failed to create the subscription: %@  with error: %@";
    uint64_t v9 = v7;
    uint32_t v10 = 22;
  }
  else
  {
    if (!v6) {
      goto LABEL_9;
    }
    int v11 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_INFO)) {
      goto LABEL_9;
    }
    int v13 = 138412290;
    uint64_t v14 = a2;
    id v8 = "We successfully created subscription: %@";
    uint64_t v9 = v11;
    uint32_t v10 = 12;
  }
  _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
LABEL_9:
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 != 0, a3);
  }
  return result;
}

uint64_t sub_1D96D5E74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        int v12 = 138412290;
        uint64_t v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "We are already subscribed to: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    uint64_t result = *(void *)(a1 + 64);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, 1, a3);
    }
  }
  else
  {
    if (v6)
    {
      uint32_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = 138412290;
        uint64_t v13 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "We are not subscribed to subscriptionID: %@ so let's create it", (uint8_t *)&v12, 0xCu);
      }
    }
    return [*(id *)(a1 + 40) _createSubscriptionForZoneID:*(void *)(a1 + 48) subscriptionID:*(void *)(a1 + 32) recordType:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 64)];
  }
  return result;
}

uint64_t sub_1D96D6318(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = [a2 count];
  if (a3 || !v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint32_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v13 = 138412290;
        uint64_t v14 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Did not get back a zone for recordZoneID %@", (uint8_t *)&v13, 0xCu);
      }
    }
    goto LABEL_10;
  }
  if (![a2 objectForKeyedSubscript:*(void *)(a1 + 32)])
  {
LABEL_10:
    uint64_t v8 = 0;
    goto LABEL_11;
  }
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    uint64_t v8 = 1;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = [a2 objectForKeyedSubscript:*(void *)(a1 + 32)];
      int v13 = 138412290;
      uint64_t v14 = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Found zone %@", (uint8_t *)&v13, 0xCu);
    }
  }
  else
  {
    uint64_t v8 = 1;
  }
LABEL_11:
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v8, a3);
  }
  return result;
}

uint64_t sub_1D96D6610(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  unsigned int v7 = [a2 containsObject:*(void *)(a1 + 32)];
  if (a4) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v7;
  }
  int v9 = IMOSLoggingEnabled();
  if (v8 == 1)
  {
    if (!v9) {
      goto LABEL_12;
    }
    uint32_t v10 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v16 = 138412290;
    uint64_t v17 = a2;
    uint64_t v11 = "Successfully created zone %@ ";
    int v12 = v10;
    uint32_t v13 = 12;
  }
  else
  {
    if (!v9) {
      goto LABEL_12;
    }
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO)) {
      goto LABEL_12;
    }
    int v16 = 138412546;
    uint64_t v17 = a2;
    __int16 v18 = 2112;
    uint64_t v19 = a4;
    uint64_t v11 = "***** Failed to createzone %@ %@ ";
    int v12 = v14;
    uint32_t v13 = 22;
  }
  _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v16, v13);
LABEL_12:
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(result + 16))(result, v8, a4);
  }
  return result;
}

void sub_1D96D6824(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v6 = IMOSLoggingEnabled();
  if (a3 || !a2)
  {
    if (v6)
    {
      uint32_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        int v12 = @"NO";
        *(_DWORD *)buf = 138412802;
        if (a2) {
          int v12 = @"YES";
        }
        uint64_t v20 = v11;
        __int16 v21 = 2112;
        __int16 v22 = v12;
        __int16 v23 = 2112;
        uint64_t v24 = a3;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "createRecordZoneIfNeededWithCompletionBlock zone %@ exists %@ error %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint32_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = [*(id *)(a1 + 40) zoneID];
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = v14;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Attempting to create zone %@", buf, 0xCu);
      }
    }
    uint64_t v15 = (void *)[*(id *)(a1 + 40) copy];
    int v16 = *(void **)(a1 + 48);
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = sub_1D96D6AAC;
    v18[3] = &unk_1E6B73D00;
    uint64_t v17 = *(void *)(a1 + 40);
    v18[4] = v16;
    v18[5] = v17;
    v18[6] = *(void *)(a1 + 56);
    [v16 _createRecordZone:v15 completionBlock:v18];
  }
  else
  {
    if (v6)
    {
      unsigned int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        uint64_t v20 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Zone %@ already exists", buf, 0xCu);
      }
    }
    uint64_t v9 = *(void *)(a1 + 56);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
}

uint64_t sub_1D96D6AAC(uint64_t a1, int a2)
{
  if (a2) {
    objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "ckUtilities"), "reportZoneCreation:", objc_msgSend((id)objc_msgSend(*(id *)(a1 + 40), "zoneID"), "zoneName"));
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v4 = *(uint64_t (**)(void))(result + 16);
    return v4();
  }
  return result;
}

void sub_1D96D6C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  int v6 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v6)
    {
      unsigned int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v12 = 138412546;
        uint64_t v13 = a3;
        __int16 v14 = 2112;
        uint64_t v15 = a4;
        uint64_t v8 = "Failed to delete zone IDs%@ error %@";
        uint64_t v9 = v7;
        uint32_t v10 = 22;
LABEL_8:
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v12, v10);
      }
    }
  }
  else if (v6)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      int v12 = 138412290;
      uint64_t v13 = a3;
      uint64_t v8 = "Successfully deleted zone IDs%@";
      uint64_t v9 = v11;
      uint32_t v10 = 12;
      goto LABEL_8;
    }
  }
}

void sub_1D96D76D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    unsigned int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Result of deleting all zones", (uint8_t *)&v16, 2u);
    }
  }
  int v8 = IMOSLoggingEnabled();
  if (a4)
  {
    if (v8)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        int v16 = 138412802;
        uint64_t v17 = a3;
        __int16 v18 = 2112;
        uint64_t v19 = a4;
        __int16 v20 = 2112;
        uint64_t v21 = v10;
        uint64_t v11 = "Failed to delete zone IDs%@ error %@ DB %@";
        int v12 = v9;
        uint32_t v13 = 32;
LABEL_11:
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v16, v13);
      }
    }
  }
  else if (v8)
  {
    __int16 v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(a1 + 32);
      int v16 = 138412546;
      uint64_t v17 = a3;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      uint64_t v11 = "Successfully deleted zone IDs%@ DB %@";
      int v12 = v14;
      uint32_t v13 = 22;
      goto LABEL_11;
    }
  }
}

void sub_1D96D7B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (!a3) {
    goto LABEL_15;
  }
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v15 = v3;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error obtaining zones %@", buf, 0xCu);
    }
  }
  int v6 = objc_msgSend((id)objc_msgSend(*(id *)(a1 + 32), "errorAnalyzer"), "errorIndicatesDeviceDoesNotHaveKeysToSync:", v3);
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "******* Error indicates device does not have keys to sync *****", buf, 2u);
      }
    }
    char v9 = 0;
    goto LABEL_16;
  }
  if (!v7)
  {
    uint64_t v3 = 0;
LABEL_15:
    char v9 = 1;
    goto LABEL_16;
  }
  uint64_t v10 = OSLogHandleForIMFoundationCategory();
  char v9 = 1;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v15 = v3;
    _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Not a fatal manatee error %@. Proceeding", buf, 0xCu);
  }
  uint64_t v3 = 0;
LABEL_16:
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96D7D84;
    block[3] = &unk_1E6B73D98;
    char v13 = v9;
    void block[4] = v3;
    void block[5] = v11;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t sub_1D96D7D84(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

uint64_t sub_1D96D92F8(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(*(void *)(a1 + 32) + 64)] ^ 1;
}

uint64_t sub_1D96D974C()
{
  qword_1EBE2BCD8 = objc_alloc_init(IMDAvailabilityVerificationManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96D9CD0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = v6;
  if (!v5 || v6)
  {
    char v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1D98FE7F8();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v14 = 138412546;
        id v15 = v5;
        __int16 v16 = 2112;
        uint64_t v17 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Caching subscription validation tokens \"%@\" for handle handleID: %@", (uint8_t *)&v14, 0x16u);
      }
    }
    uint64_t v10 = [IMDAvailabilityVerificationTokens alloc];
    uint64_t v11 = [v5 subscriptionValidationToken];
    int v12 = [v5 encryptionValidationToken];
    char v13 = [(IMDAvailabilityVerificationTokens *)v10 initWithSubscriptionValidationToken:v11 encryptionValidationToken:v12];

    [*(id *)(*(void *)(a1 + 40) + 16) setObject:v13 forKey:*(void *)(a1 + 32)];
  }
}

void sub_1D96D9E74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = v6;
  if (!v5 || v6)
  {
    IMLogHandleForCategory();
    uint64_t v10 = (IMDAvailabilityVerificationTokens *)objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(&v10->super, OS_LOG_TYPE_ERROR)) {
      sub_1D98FE864();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v11 = 138412546;
        id v12 = v5;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Caching subscription validation token \"%@\" and no encryption token for handle handleID: %@", (uint8_t *)&v11, 0x16u);
      }
    }
    uint64_t v10 = [[IMDAvailabilityVerificationTokens alloc] initWithSubscriptionValidationToken:v5 encryptionValidationToken:0];
    [*(id *)(*(void *)(a1 + 40) + 16) setObject:v10 forKey:*(void *)(a1 + 32)];
  }
}

void sub_1D96DA3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D96DA428(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (v5)
  {
    int v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D98FE9C0((uint64_t)v5, v7);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        uint64_t v10 = *(void *)(a1 + 40);
        int v13 = 134218498;
        uint64_t v14 = a2;
        __int16 v15 = 2112;
        uint64_t v16 = v9;
        __int16 v17 = 2112;
        uint64_t v18 = v10;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Received validity response of %ld for validation token \"%@\" from senderHandleID \"%@\"", (uint8_t *)&v13, 0x20u);
      }
    }
    if (a2 != 2)
    {
      if (a2 == 1)
      {
        if (!IMOSLoggingEnabled()) {
          goto LABEL_5;
        }
        int v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Received a valid validity response, no further action needed.", (uint8_t *)&v13, 2u);
        }
      }
      else
      {
        if (a2) {
          goto LABEL_5;
        }
        int v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1D98FE904();
        }
      }

      goto LABEL_5;
    }
    id v12 = IMLogHandleForCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1D98FE938(a1, v12);
    }

    [WeakRetained _inviteSenderHandleID:*(void *)(a1 + 40) fromHandleID:*(void *)(a1 + 48)];
  }
LABEL_5:
}

void sub_1D96DA7D8(uint64_t a1, unsigned int a2, unsigned int a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 134218498;
      uint64_t v9 = a2;
      __int16 v10 = 2048;
      uint64_t v11 = a3;
      __int16 v12 = 2112;
      id v13 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Completed invitation. CanShare: %ld, DidShare: %ld, Error: %@", (uint8_t *)&v8, 0x20u);
    }
  }
}

void sub_1D96DAFFC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_1D96DBBF0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96DBB74);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96DBCF8()
{
  qword_1EBE2BB18 = objc_alloc_init(IMDDistributedNotificationXPCEventStreamHandler);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96DC860(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96DC738);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96DC8D4(uint64_t a1, void *a2)
{
  return [a2 _stripFZIDPrefix];
}

uint64_t sub_1D96DD158(uint64_t a1, void *a2)
{
  return [a2 _stripFZIDPrefix];
}

uint64_t sub_1D96DD160(uint64_t a1, void *a2)
{
  return [a2 isEqualToString:*(void *)(a1 + 32)] ^ 1;
}

uint64_t sub_1D96DD628(void *a1, uint64_t a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = [a1 fileTransferGUIDs];
  id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v7 = [a1 threadOriginator];
    int v8 = [v7 fileTransferGUIDs];

    if (v5)
    {
      uint64_t v9 = [v5 arrayByAddingObjectsFromArray:v8];

      id v5 = (id)v9;
    }
    else
    {
      id v5 = v8;
    }
  }
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v10 = v5;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v20;
    do
    {
      uint64_t v14 = 0;
      do
      {
        if (*(void *)v20 != v13) {
          objc_enumerationMutation(v10);
        }
        __int16 v15 = objc_msgSend(v4, "transferForGUID:", *(void *)(*((void *)&v19 + 1) + 8 * v14), (void)v19);
        uint64_t v16 = [v15 _dictionaryRepresentation];
        if (v16) {
          [v6 addObject:v16];
        }

        ++v14;
      }
      while (v12 != v14);
      uint64_t v12 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
    }
    while (v12);
  }

  uint64_t v17 = [v6 copy];
  return v17;
}

uint64_t sub_1D96DD8A4()
{
  qword_1EBE2B950 = [objc_alloc((Class)objc_opt_class()) initWithChatRegistry:0 vocabulary:0];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D96DE360(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

uint64_t sub_1D96DE368(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  [*(id *)(*(void *)(a1 + 32) + 24) setVocabulary:*(void *)(a1 + 40) ofType:2];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 40) count];
      int v5 = 134217984;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Updated the SiriKit group names vocabulary with %lu named group chats", (uint8_t *)&v5, 0xCu);
    }
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1D96DE610()
{
  qword_1EBE2BE80 = objc_alloc_init(IMDaemonCoreSpotlightManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96DEA14(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state != 2)
  {
    if (!state)
    {
      int v5 = (void *)[*(id *)(a1 + 32) _newSpotlightBatchIndexingXPCCriteria];
      xpc_object_t v6 = xpc_activity_copy_criteria(v3);
      uint64_t v7 = v6;
      if (!v6 || !xpc_equal(v6, v5)) {
        xpc_activity_set_criteria(v3, v5);
      }
      if (IMOSLoggingEnabled())
      {
        int v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v23) = 0;
          _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Got called to index CS in check in state", (uint8_t *)&v23, 2u);
        }
      }
    }
    goto LABEL_11;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = @"YES";
      if (!v3) {
        id v10 = @"NO";
      }
      int v23 = 138412290;
      uint64_t v24 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Got called to index CS in run state with non null activity %@", (uint8_t *)&v23, 0xCu);
    }
  }
  if (![MEMORY[0x1E4F6E700] reindexingSuspended])
  {
    if (!xpc_activity_set_state(v3, 4) && IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LOWORD(v23) = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "We did not set the state of xpc_activity from core duet to continue successfully for CS indexing", (uint8_t *)&v23, 2u);
      }
    }
    if ([*(id *)(a1 + 32) _needsReindexingDueToVersionMismatch])
    {
      if (IMOSLoggingEnabled())
      {
        __int16 v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          LOWORD(v23) = 0;
          _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Initiating reindex!", (uint8_t *)&v23, 2u);
        }
      }
      [*(id *)(a1 + 32) _needsDeferredIndexing];
      IMSetDomainIntForKey();
      [MEMORY[0x1E4F6E700] reindexReason];
      IMCoreSpotlightIndexReasonFromReindexReason();
      IMDCoreSpotlightSetNeedsMessageReindex();
      if (!v3) {
        goto LABEL_11;
      }
      if ([MEMORY[0x1E4F6E700] needsIndexing])
      {
        if ([*(id *)(a1 + 32) _deviceConditionsAllowsSpotlightIndexingForActivity:v3])
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v16 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              LOWORD(v23) = 0;
              _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Starting batch indexing after initial index complete, device state is good", (uint8_t *)&v23, 2u);
            }
          }
          [*(id *)(a1 + 32) _indexNextBatchIfNecessaryForActivity:v3];
        }
        goto LABEL_11;
      }
      BOOL v21 = xpc_activity_set_state(v3, 5);
      if (!IMOSLoggingEnabled()) {
        goto LABEL_11;
      }
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        long long v22 = @"NO";
        if (v21) {
          long long v22 = @"YES";
        }
        int v23 = 138412290;
        uint64_t v24 = v22;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done, no additional batch indexes required after initial indexing. Success: %@", (uint8_t *)&v23, 0xCu);
      }
    }
    else
    {
      int v17 = [MEMORY[0x1E4F6E700] needsIndexing];
      uint64_t v18 = *(void **)(a1 + 32);
      if (v17)
      {
        if ([v18 _deviceConditionsAllowsSpotlightIndexingForActivity:v3])
        {
          [*(id *)(a1 + 32) _reindexResumed];
          [*(id *)(a1 + 32) _indexNextBatchIfNecessaryForActivity:v3];
        }
        goto LABEL_11;
      }
      [v18 _checkSpotlightClientStateForReindexIfNeeded];
      if (!v3) {
        goto LABEL_11;
      }
      BOOL v19 = xpc_activity_set_state(v3, 5);
      if (!IMOSLoggingEnabled()) {
        goto LABEL_11;
      }
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        long long v20 = @"NO";
        if (v19) {
          long long v20 = @"YES";
        }
        int v23 = 138412290;
        uint64_t v24 = v20;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done. Success: %@", (uint8_t *)&v23, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_11;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = [MEMORY[0x1E4F6E700] reindexingSuspendedUntilDate];
      int v23 = 138412290;
      uint64_t v24 = v12;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Reindexing is suspended until %@, not proceeding", (uint8_t *)&v23, 0xCu);
    }
  }
  if (!xpc_activity_set_state(v3, 5) && IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      LOWORD(v23) = 0;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "We did not set the state of xpc_activity from core duet to continue successfully for CS indexing", (uint8_t *)&v23, 2u);
    }
    goto LABEL_61;
  }
LABEL_11:
}

void sub_1D96DF000()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Reindex request complete", v1, 2u);
    }
  }
}

void sub_1D96DF17C(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (xpc_activity_get_state(v2) == 2)
  {
    if (qword_1EBE2C228 != -1) {
      dispatch_once(&qword_1EBE2C228, &unk_1F3390A80);
    }
    if (off_1EBE2C220)
    {
      char v3 = off_1EBE2C220();
      int v4 = IMOSLoggingEnabled();
      if ((v3 & 4) != 0)
      {
        if (v4)
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__int16 v15 = 0;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Clearing IMCoreSpotlight index state due to restore from backup", v15, 2u);
          }
        }
        int v5 = [MEMORY[0x1E4F6BF48] synchronousDatabase];
        [v5 invalidateSpotlightClientStateVersioningWithCompletion:&unk_1F3390AA0];
        goto LABEL_21;
      }
      if (v4)
      {
        int v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          __int16 v14 = 0;
          xpc_object_t v6 = "Not clearing IMCoreSpotlight index state, erase or upgrade install";
          uint64_t v7 = (uint8_t *)&v14;
LABEL_15:
          _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, v6, v7, 2u);
          goto LABEL_21;
        }
        goto LABEL_21;
      }
    }
    else if (IMOSLoggingEnabled())
    {
      int v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        xpc_object_t v6 = "IMDaemon_CoreSpotlight - Failed to weak link DataMigration";
        uint64_t v7 = buf;
        goto LABEL_15;
      }
LABEL_21:
    }
    if (!xpc_activity_set_state(v2, 5) && IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        __int16 v12 = 0;
        uint64_t v9 = "IMDaemon_CoreSpotlight - Failed to mark migration activity done";
        id v10 = (uint8_t *)&v12;
        goto LABEL_26;
      }
      goto LABEL_27;
    }
    goto LABEL_28;
  }
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = 0;
      uint64_t v9 = "IMDaemon_CoreSpotlight - Migration activity not in runs state";
      id v10 = (uint8_t *)&v16;
LABEL_26:
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, v9, v10, 2u);
    }
LABEL_27:
  }
LABEL_28:
}

void *sub_1D96DF3F4()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("DMGetUserDataDisposition", @"DataMigration");
  off_1EBE2C220 = result;
  return result;
}

void sub_1D96DF424(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (v2)
  {
    char v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1D98FEA38((uint64_t)v2, v3);
    }
  }
}

void sub_1D96DF9A0(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      char v3 = [*(id *)(a1 + 32) _currentClientState];
      uint64_t v4 = [v3 lastIndexedRowID];
      int v5 = [MEMORY[0x1E4F6E700] needsIndexing];
      xpc_object_t v6 = @"NO";
      if (v5) {
        xpc_object_t v6 = @"YES";
      }
      int v7 = 134218242;
      uint64_t v8 = v4;
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Index next batch request complete. New lastIndexedRowID %llu needsIndexing %@", (uint8_t *)&v7, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D96DFAB0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96DFA78);
  }
  _Unwind_Resume(a1);
}

void sub_1D96DFACC(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [MEMORY[0x1E4F6E700] lastDonatedRowID];
      int v4 = [MEMORY[0x1E4F6E700] needsDonation];
      int v5 = @"NO";
      if (v4) {
        int v5 = @"YES";
      }
      int v6 = 134218242;
      uint64_t v7 = v3;
      __int16 v8 = 2112;
      __int16 v9 = v5;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Donation next batch request complete. New lastDonatedRowID %lu needsDonation %@", (uint8_t *)&v6, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

uint64_t sub_1D96DFBE8()
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = [MEMORY[0x1E4F6E700] reindexSupplementalBatchSize];
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      int v3 = 134217984;
      uint64_t v4 = v0;
      _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "Running batch request with size %lu", (uint8_t *)&v3, 0xCu);
    }
  }
  if ([MEMORY[0x1E4F6E700] needsIndexing]
    || (uint64_t result = [MEMORY[0x1E4F6E700] needsDonation], result))
  {
    [MEMORY[0x1E4F6E700] reindexReason];
    IMCoreSpotlightIndexReasonFromReindexReason();
    return IMDCoreSpotlightIndexNextMessageBatchIfNeeded();
  }
  return result;
}

void sub_1D96DFD1C(uint64_t a1)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (([MEMORY[0x1E4F6E700] needsIndexing] & 1) != 0
    || [MEMORY[0x1E4F6E700] needsDonation])
  {
    int v2 = [*(id *)(a1 + 32) _deviceConditionsAllowsSpotlightIndexingForActivity:*(void *)(a1 + 40)];
    int v3 = IMOSLoggingEnabled();
    if (v2)
    {
      if (v3)
      {
        uint64_t v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "needsIndexing = YES and device conditions are good, starting next batch request", buf, 2u);
        }
      }
      dispatch_time_t v5 = dispatch_time(0, 500000000);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      void v17[2] = sub_1D96E0060;
      v17[3] = &unk_1E6B73218;
      int v6 = *(void **)(a1 + 40);
      v17[4] = *(void *)(a1 + 32);
      id v18 = v6;
      dispatch_after(v5, MEMORY[0x1E4F14428], v17);
    }
    else
    {
      if (v3)
      {
        uint64_t v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "needsIndexing = YES but device conditions are not good, activity should be in defer state", buf, 2u);
        }
      }
      [*(id *)(a1 + 32) _reindexPaused];
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = [MEMORY[0x1E4F6E700] needsIndexing];
        int v10 = [*(id *)(a1 + 32) _deviceConditionsAllowsSpotlightIndexingForActivity:*(void *)(a1 + 40)];
        uint64_t v11 = @"NO";
        if (v9) {
          __int16 v12 = @"YES";
        }
        else {
          __int16 v12 = @"NO";
        }
        if (v10) {
          uint64_t v11 = @"YES";
        }
        *(_DWORD *)buf = 138412546;
        long long v20 = v12;
        __int16 v21 = 2112;
        long long v22 = v11;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "needsIndexing %@ deviceConditions %@ not kicking off next batch", buf, 0x16u);
      }
    }
    uint64_t v13 = *(_xpc_activity_s **)(a1 + 40);
    if (v13)
    {
      BOOL v14 = xpc_activity_set_state(v13, 5);
      if (IMOSLoggingEnabled())
      {
        __int16 v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          __int16 v16 = @"NO";
          if (v14) {
            __int16 v16 = @"YES";
          }
          *(_DWORD *)buf = 138412290;
          long long v20 = v16;
          _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting CS xpc_activity state to done. Success: %@", buf, 0xCu);
        }
      }
    }
  }
}

uint64_t sub_1D96E0060(uint64_t a1)
{
  return [*(id *)(a1 + 32) _indexNextBatchIfNecessaryForActivity:*(void *)(a1 + 40)];
}

void sub_1D96E0574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96E058C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96E059C(uint64_t a1)
{
}

void sub_1D96E05A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D98FEAB0((uint64_t)v6, v7);
    }
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  int v9 = *(void **)(v8 + 40);
  *(void *)(v8 + 40) = v5;
}

void sub_1D96E07E0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
      sub_1D98FEBA8((uint64_t)v5, v6);
    }
LABEL_13:

    goto LABEL_14;
  }
  int v7 = IMOSLoggingEnabled();
  if (!a2)
  {
    if (v7)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v9 = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Client state is invalid, initiating reindex event", v9, 2u);
      }
    }
    IMSetDomainIntForKey();
    id v6 = [*(id *)(a1 + 32) spotlightIndexQueue];
    dispatch_async(v6, &unk_1F3390AC0);
    goto LABEL_13;
  }
  if (v7)
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "IMDP does not think we need reindexing based on client state", buf, 2u);
    }
    goto LABEL_13;
  }
LABEL_14:
}

uint64_t sub_1D96E0960()
{
  [MEMORY[0x1E4F6E700] reindexReason];
  IMCoreSpotlightIndexReasonFromReindexReason();

  return IMDCoreSpotlightSetNeedsMessageReindex();
}

void sub_1D96E099C()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v1 = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Reindex request for lost client state complete", v1, 2u);
    }
  }
}

void sub_1D96E1484(uint64_t a1, void *a2)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v34 = a2;
  int v3 = [v34 pathExtension];
  if (![v3 length])
  {
    uint64_t v4 = [MEMORY[0x1E4F6C348] defaultHFSFileManager];
    id v5 = [*(id *)(a1 + 32) type];
    id v6 = [v4 pathExtensionForUTIType:v5];

    int v3 = v6;
    if (![v6 length])
    {
      int v7 = [MEMORY[0x1E4F6C348] defaultHFSFileManager];
      uint64_t v8 = [*(id *)(a1 + 32) mimeType];
      uint64_t v9 = [v7 pathExtensionForMIMEType:v8];

      int v3 = (void *)v9;
    }
    if ([v3 length])
    {
      int v10 = v3;
      uint64_t v11 = [v34 absoluteString];
      __int16 v12 = [v11 stringByDeletingPathExtension];

      uint64_t v13 = [v12 stringByAppendingPathExtension:v10];

      if ([v13 length])
      {
        uint64_t v14 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v13];

        id v34 = (id)v14;
      }

      int v3 = v10;
    }
  }
  uint64_t v29 = v3;
  if (v34)
  {
    __int16 v15 = [MEMORY[0x1E4F28CB8] defaultManager];
    __int16 v16 = objc_msgSend(v15, "im_generateCopyForURL:", v34);
  }
  else
  {
    __int16 v16 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    int v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412546;
      id v46 = v34;
      __int16 v47 = 2112;
      __int16 v48 = v16;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Source URL: %@  Link: %@", buf, 0x16u);
    }
  }
  char v33 = +[IMDRelayTranscodeController sharedInstance];
  id v18 = v34;
  if (v16) {
    id v18 = v16;
  }
  id v31 = v18;
  int v32 = [*(id *)(a1 + 32) type];
  BOOL v19 = [*(id *)(a1 + 40) session];
  long long v20 = [v19 service];
  uint64_t v30 = [v20 transcodeTarget];
  __int16 v21 = [*(id *)(a1 + 32) transcoderUserInfo];
  uint64_t v22 = [*(id *)(a1 + 32) isSticker];
  uint64_t v23 = *(void *)(a1 + 112);
  uint64_t v24 = [*(id *)(a1 + 40) shouldSendLowResolutionOnly] ^ 1;
  v35[0] = MEMORY[0x1E4F143A8];
  v35[1] = 3221225472;
  v35[2] = sub_1D96E18BC;
  v35[3] = &unk_1E6B74018;
  id v25 = *(id *)(a1 + 48);
  uint64_t v26 = *(void *)(a1 + 56);
  __int16 v27 = *(void **)(a1 + 64);
  id v36 = v25;
  uint64_t v37 = v26;
  long long v44 = *(_OWORD *)(a1 + 96);
  id v38 = v27;
  id v39 = v16;
  id v43 = *(id *)(a1 + 88);
  id v40 = *(id *)(a1 + 72);
  id v41 = *(id *)(a1 + 32);
  id v42 = *(id *)(a1 + 80);
  id v28 = v16;
  [v33 transcodeFileTransferContents:v31 utiType:v32 target:v30 transcoderUserInfo:v21 isSticker:v22 highQualityMaxByteSize:v23 lowQualityMaxByteSize:v23 representations:v24 completionBlock:v35];
}

void sub_1D96E18BC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  uint64_t v81 = *MEMORY[0x1E4F143B8];
  id v49 = a2;
  id v14 = a3;
  id v51 = a4;
  id v55 = a5;
  id v53 = a8;
  id v56 = [*(id *)(a1 + 32) transferForGUID:*(void *)(a1 + 40)];
  if (IMOSLoggingEnabled())
  {
    __int16 v15 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = @"NO";
      if (a7) {
        __int16 v16 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v78 = v56;
      __int16 v79 = 2112;
      v80 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }
  }
  if (a6)
  {
    if (IMOSLoggingEnabled())
    {
      int v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v78 = v14;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }
    id v18 = objc_msgSend(v56, "localPath", v49, v51);
    BOOL v19 = [v18 lastPathComponent];

    long long v20 = objc_msgSend(v14, "__imFirstObject");
    __int16 v21 = [v20 path];
    uint64_t v22 = [v21 lastPathComponent];

    uint64_t v23 = [v19 pathExtension];
    uint64_t v24 = [v22 pathExtension];
    id v25 = (void *)v24;
    if (v23)
    {
      if (v24)
      {
        if (([v23 isEqualToString:v24] & 1) == 0)
        {
          uint64_t v26 = [v19 stringByAppendingPathExtension:v25];
          [v56 setTransferredFilename:v26];

          if (IMOSLoggingEnabled())
          {
            __int16 v27 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              id v28 = [v19 stringByAppendingPathExtension:v25];
              *(_DWORD *)buf = 138412290;
              id v78 = v28;
              _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);
            }
          }
        }
      }
    }

    if (IMOSLoggingEnabled())
    {
      uint64_t v29 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v78 = v14;
        _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "All URLs: %@", buf, 0xCu);
      }
    }
    uint64_t v30 = dispatch_group_create();
    dispatch_group_enter(v30);
    if ([v14 count])
    {
      uint64_t v31 = 0;
      while (1)
      {
        int v32 = [v14 objectAtIndex:v31];
        char v33 = v32;
        if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24)) {
          break;
        }
        dispatch_group_enter(v30);
        id v34 = [MEMORY[0x1E4F6EBF0] sharedInstance];
        v62[0] = MEMORY[0x1E4F143A8];
        v62[1] = 3221225472;
        v62[2] = sub_1D96E2140;
        v62[3] = &unk_1E6B73FF0;
        id v63 = v56;
        int8x16_t v57 = *(int8x16_t *)(a1 + 32);
        id v35 = (id)v57.i64[0];
        int8x16_t v64 = vextq_s8(v57, v57, 8uLL);
        id v72 = *(id *)(a1 + 88);
        id v65 = v55;
        uint64_t v74 = v31;
        id v66 = *(id *)(a1 + 64);
        id v67 = *(id *)(a1 + 72);
        id v36 = *(id *)(a1 + 80);
        int8x16_t v73 = vextq_s8(*(int8x16_t *)(a1 + 96), *(int8x16_t *)(a1 + 96), 8uLL);
        char v75 = a7;
        id v68 = v36;
        id v69 = v33;
        id v70 = *(id *)(a1 + 56);
        id v71 = v30;
        id v37 = v33;
        [v34 compressFileTransfer:v37 completionBlock:v62];

        if (++v31 >= (unint64_t)[v14 count]) {
          goto LABEL_29;
        }
      }
    }
LABEL_29:
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96E33A4;
    block[3] = &unk_1E6B72D68;
    id v38 = v14;
    uint64_t v39 = *(void *)(a1 + 104);
    id v59 = v38;
    uint64_t v61 = v39;
    id v60 = *(id *)(a1 + 48);
    dispatch_group_notify(v30, MEMORY[0x1E4F14428], block);
    dispatch_group_leave(v30);
  }
  else
  {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = 25;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = 0;
    if (IMOSLoggingEnabled())
    {
      id v40 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v78 = v55;
        _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Transcoding failed with error: %@", buf, 0xCu);
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v41 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v78 = v56;
        _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Failed transcoding transfer: %@", buf, 0xCu);
      }
    }
    id v42 = *(void **)(a1 + 32);
    id v43 = objc_msgSend(v56, "guid", v49, v51);
    [v42 failTransfer:v43 reason:15];

    dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
    if (*(void *)(a1 + 56))
    {
      long long v44 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v45 = *(void *)(a1 + 56);
      id v76 = 0;
      char v46 = [v44 removeItemAtURL:v45 error:&v76];
      uint64_t v30 = v76;

      if ((v46 & 1) == 0 && IMOSLoggingEnabled())
      {
        __int16 v47 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          __int16 v48 = *(void **)(a1 + 56);
          *(_DWORD *)buf = 138412546;
          id v78 = v48;
          __int16 v79 = 2112;
          v80 = v30;
          _os_log_impl(&dword_1D967A000, v47, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      uint64_t v30 = 0;
    }
  }
}

void sub_1D96E2140(uint64_t a1, void *a2, void *a3, void *a4, int a5, int a6)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a2;
  __int16 v12 = a3;
  id v13 = a4;
  if (IMOSLoggingEnabled())
  {
    id v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      __int16 v15 = @"NO";
      if (a6) {
        __int16 v15 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v61 = v15;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Compressed attachment: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    __int16 v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v61 = v11;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "           Input Path: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    int v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v61 = v12;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "          Output Path: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      BOOL v19 = @"NO";
      if (a5) {
        BOOL v19 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v61 = v19;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "              Success: %@", buf, 0xCu);
    }
  }
  if (a6)
  {
    long long v20 = [*(id *)(a1 + 32) localPath];
    __int16 v21 = [v20 lastPathComponent];

    uint64_t v22 = [(__CFString *)v12 path];
    uint64_t v23 = [v22 lastPathComponent];

    uint64_t v24 = [v21 pathExtension];
    uint64_t v25 = [v23 pathExtension];
    uint64_t v26 = (void *)v25;
    if (v24)
    {
      if (v25)
      {
        if (([v24 isEqualToString:v25] & 1) == 0)
        {
          __int16 v27 = *(void **)(a1 + 32);
          id v28 = [v21 stringByAppendingPathExtension:v26];
          [v27 setTransferredFilename:v28];

          if (IMOSLoggingEnabled())
          {
            uint64_t v29 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              uint64_t v30 = [*(id *)(a1 + 32) transferredFilename];
              *(_DWORD *)buf = 138412290;
              uint64_t v61 = v30;
              _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "          Setting transferred filename: %@", buf, 0xCu);
            }
          }
        }
      }
    }
  }
  [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
  uint64_t v32 = v31;
  char v33 = [MEMORY[0x1E4F6EBF8] sharedInstance];
  id v34 = [(__CFString *)v12 path];
  id v35 = [v34 stringByResolvingAndStandardizingPath];
  uint64_t v36 = *MEMORY[0x1E4F6AA68];
  uint64_t v37 = *(void *)(a1 + 40);
  v59[0] = MEMORY[0x1E4F143A8];
  v59[1] = 3221225472;
  v59[2] = sub_1D96E275C;
  v59[3] = &unk_1E6B73FA0;
  v59[4] = v37;
  v43[0] = MEMORY[0x1E4F143A8];
  v43[1] = 3221225472;
  v43[2] = sub_1D96E2880;
  v43[3] = &unk_1E6B73FC8;
  id v38 = *(id *)(a1 + 48);
  uint64_t v39 = *(void *)(a1 + 40);
  id v44 = v38;
  uint64_t v45 = v39;
  uint64_t v56 = v32;
  id v54 = *(id *)(a1 + 112);
  id v40 = *(id *)(a1 + 56);
  uint64_t v41 = *(void *)(a1 + 136);
  id v46 = v40;
  uint64_t v57 = v41;
  id v47 = *(id *)(a1 + 64);
  id v48 = *(id *)(a1 + 72);
  id v49 = *(id *)(a1 + 80);
  long long v55 = *(_OWORD *)(a1 + 120);
  char v58 = *(unsigned char *)(a1 + 144);
  id v50 = *(id *)(a1 + 88);
  id v51 = *(id *)(a1 + 96);
  unsigned int v52 = v12;
  id v53 = *(id *)(a1 + 104);
  id v42 = v12;
  [v33 sendFilePath:v35 topic:v36 userInfo:0 transferID:v37 encryptFile:1 progressBlock:v59 completionBlock:v43];
}

void sub_1D96E275C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218496;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Send progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
  [v9 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_1D96E2880(uint64_t a1, void *a2, char a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v87 = *MEMORY[0x1E4F143B8];
  id v70 = a2;
  double v76 = COERCE_DOUBLE(a4);
  id v71 = a5;
  id value = a6;
  id v73 = a7;
  id v75 = a8;
  id v72 = a9;
  *(double *)&char v77 = [*(id *)(a1 + 32) transferForGUID:*(void *)(a1 + 40)];
  int v17 = IMOSLoggingEnabled();
  if (a3)
  {
    if (v17)
    {
      id v18 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v82 = *(double *)&v77;
        __int16 v83 = 2112;
        int v84 = @"YES";
        __int16 v85 = 2112;
        double v86 = v76;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Finished uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      BOOL v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        double v21 = v20 - *(double *)(a1 + 136);
        *(_DWORD *)buf = 134217984;
        double v82 = v21;
        _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }
    uint64_t v22 = [(__CFString *)v77 userInfo];
    *(double *)&uint64_t v23 = COERCE_DOUBLE([v22 mutableCopy]);

    if (*(double *)&v23 == 0.0) {
      *(double *)&uint64_t v23 = COERCE_DOUBLE(CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]));
    }
    uint64_t v24 = @"file-size";
    uint64_t v25 = *(void *)(a1 + 144);
    uint64_t v26 = @"decryption-key";
    __int16 v27 = @"mmcs-url";
    id v28 = @"mmcs-owner";
    uint64_t v29 = @"mmcs-signature-hex";
    if (v25)
    {
      uint64_t v29 = [NSString stringWithFormat:@"%@-%d", @"mmcs-signature-hex", v25];
      id v28 = [NSString stringWithFormat:@"%@-%d", @"mmcs-owner", *(void *)(a1 + 144)];
      __int16 v27 = [NSString stringWithFormat:@"%@-%d", @"mmcs-url", *(void *)(a1 + 144)];
      uint64_t v26 = [NSString stringWithFormat:@"%@-%d", @"decryption-key", *(void *)(a1 + 144)];
      uint64_t v24 = [NSString stringWithFormat:@"%@-%d", @"file-size", *(void *)(a1 + 144)];
    }
    uint64_t v30 = objc_msgSend(v73, "__imHexString");
    if (v30) {
      CFDictionarySetValue(v23, v29, v30);
    }

    if (value) {
      CFDictionarySetValue(v23, v28, value);
    }
    if (v75) {
      CFDictionarySetValue(v23, v27, v75);
    }
    uint64_t v31 = objc_msgSend(v72, "__imHexString");
    if (v31) {
      CFDictionarySetValue(v23, v26, v31);
    }

    uint64_t v32 = [NSNumber numberWithInteger:a10];
    char v33 = [v32 stringValue];

    if (v33) {
      CFDictionarySetValue(v23, v24, v33);
    }

    if (IMOSLoggingEnabled())
    {
      id v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412546;
        double v82 = *(double *)&v23;
        __int16 v83 = 2112;
        int v84 = v77;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, "  setting userinfo: %@  on transfer: %@", buf, 0x16u);
      }
    }
    [(__CFString *)v77 setUserInfo:v23];
    id v35 = [*(id *)(a1 + 56) guid];
    [(__CFString *)v77 setMessageGUID:v35];

    [*(id *)(a1 + 32) updateTransfer:*(void *)(a1 + 40) currentBytes:a10 totalBytes:a10];
    [*(id *)(a1 + 32) endTransfer:*(void *)(a1 + 40)];
    [(__CFDictionary *)v23 setObject:*(void *)(a1 + 40) forKey:qword_1EA8C70B0];
    uint64_t v36 = [*(id *)(a1 + 64) filename];
    [(__CFDictionary *)v23 setObject:v36 forKey:qword_1EA8C70B8];

    uint64_t v37 = [*(id *)(a1 + 64) type];
    [(__CFDictionary *)v23 setObject:v37 forKey:qword_1EA8C70C0];

    [*(id *)(a1 + 72) addObject:v23];
  }
  else
  {
    if (v17)
    {
      id v38 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412802;
        double v82 = *(double *)&v77;
        __int16 v83 = 2112;
        int v84 = @"NO";
        __int16 v85 = 2112;
        double v86 = v76;
        _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "Failed uploading transfer: %@   success: %@  error: %@", buf, 0x20u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v39 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        double v40 = [(__CFString *)v77 transferDataURL];
        *(_DWORD *)buf = 138412290;
        double v82 = v40;
        _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "transfer data url: %@", buf, 0xCu);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v41 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
        double v43 = v42 - *(double *)(a1 + 136);
        *(_DWORD *)buf = 134217984;
        double v82 = v43;
        _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Time taken: %f", buf, 0xCu);
      }
    }
    uint64_t v44 = *(void *)(a1 + 112);
    if (v44) {
      (*(void (**)(uint64_t, double, id, uint64_t))(v44 + 16))(v44, COERCE_DOUBLE(*(void *)&v76), v75, a10);
    }
    uint64_t v45 = [*(id *)(a1 + 48) code];
    if (v45 == -6)
    {
      [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) reason:23];
    }
    else if (v45 == -5)
    {
      [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) reason:22];
    }
    else
    {
      [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) error:*(void *)&v76];
    }
    if (IMOSLoggingEnabled())
    {
      id v46 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        double v82 = v76;
        _os_log_impl(&dword_1D967A000, v46, OS_LOG_TYPE_INFO, "  setting complete success to NO because of attachment send result. (Error: %@)", buf, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = _FZErrorTypeFromNSError();
  }
  if (*(unsigned char *)(a1 + 152))
  {
    id v47 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v48 = *(void *)(a1 + 80);
    id v80 = 0;
    char v49 = [v47 removeItemAtURL:v48 error:&v80];
    id v50 = (__CFString *)v80;

    if ((v49 & 1) == 0 && IMOSLoggingEnabled())
    {
      id v51 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_INFO))
      {
        double v52 = *(double *)(a1 + 80);
        *(_DWORD *)buf = 138412546;
        double v82 = v52;
        __int16 v83 = 2112;
        int v84 = v50;
        _os_log_impl(&dword_1D967A000, v51, OS_LOG_TYPE_INFO, "Error cleaning up transcoded path: %@  error: %@", buf, 0x16u);
      }
    }
  }
  if (*(void *)(a1 + 88))
  {
    id v53 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v54 = *(void *)(a1 + 88);
    id v79 = 0;
    char v55 = [v53 removeItemAtURL:v54 error:&v79];
    uint64_t v56 = (__CFString *)v79;

    if ((v55 & 1) == 0 && IMOSLoggingEnabled())
    {
      uint64_t v57 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_INFO))
      {
        double v58 = *(double *)(a1 + 88);
        *(_DWORD *)buf = 138412546;
        double v82 = v58;
        __int16 v83 = 2112;
        int v84 = v56;
        _os_log_impl(&dword_1D967A000, v57, OS_LOG_TYPE_INFO, "Error cleaning up linked path: %@  error: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v56 = 0;
  }
  id v59 = [*(id *)(a1 + 96) path];
  if (v59)
  {
    id v60 = [*(id *)(a1 + 96) path];
    uint64_t v61 = IMSafeTemporaryDirectory();
    uint64_t v62 = [v61 path];
    if ([v60 hasPrefix:v62])
    {
      id v63 = [MEMORY[0x1E4F28CB8] defaultManager];
      int8x16_t v64 = [*(id *)(a1 + 96) path];
      id v78 = v56;
      int v65 = [v63 removeItemAtPath:v64 error:&v78];
      id v66 = v78;

      int v67 = v65 ^ 1;
      uint64_t v56 = v66;
    }
    else
    {
      int v67 = 0;
    }

    if (v67)
    {
      if (IMOSLoggingEnabled())
      {
        id v68 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
        {
          double v69 = [*(id *)(a1 + 96) path];
          *(_DWORD *)buf = 138412546;
          double v82 = v69;
          __int16 v83 = 2112;
          int v84 = v56;
          _os_log_impl(&dword_1D967A000, v68, OS_LOG_TYPE_INFO, "Error cleaning up output path: %@  error: %@", buf, 0x16u);
        }
      }
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 104));
}

void sub_1D96E32C8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96E3240);
  }
  _Unwind_Resume(a1);
}

void sub_1D96E33A4(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        uint64_t v4 = @"YES";
      }
      else {
        uint64_t v4 = @"NO";
      }
      int v5 = 138412546;
      uint64_t v6 = v3;
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "  All done url set for: %@   success: %@", (uint8_t *)&v5, 0x16u);
    }
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

uint64_t sub_1D96E34AC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96E34BC(uint64_t a1)
{
}

void sub_1D96E34C4(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = a1[4];
      if (*(unsigned char *)(*(void *)(a1[7] + 8) + 24)) {
        uint64_t v4 = @"YES";
      }
      else {
        uint64_t v4 = @"NO";
      }
      int v8 = 138412546;
      uint64_t v9 = v3;
      __int16 v10 = 2112;
      uint64_t v11 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", (uint8_t *)&v8, 0x16u);
    }
  }
  uint64_t v5 = a1[6];
  if (v5) {
    (*(void (**)(uint64_t, void, void, void))(v5 + 16))(v5, a1[5], *(unsigned __int8 *)(*(void *)(a1[7] + 8) + 24), *(unsigned int *)(*(void *)(a1[8] + 8) + 24));
  }
  uint64_t v6 = *(void *)(a1[9] + 8);
  __int16 v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = 0;
}

void sub_1D96E3998(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D96E37E0);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D96E3A0C(uint64_t a1, char a2)
{
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(__CFString **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      uint64_t v94 = v4;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Network availability check complete: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = @"YES";
      if ((a2 & 2) == 0) {
        uint64_t v6 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v94 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "   Cell available: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    __int16 v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = @"YES";
      if ((a2 & 1) == 0) {
        int v8 = @"NO";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v94 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "   WiFi available: %@", buf, 0xCu);
    }
  }
  uint64_t v61 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v89 = 0;
  uint64_t v90 = &v89;
  uint64_t v91 = 0x2020000000;
  char v92 = 1;
  uint64_t v85 = 0;
  double v86 = &v85;
  uint64_t v87 = 0x2020000000;
  int v88 = 0;
  group = dispatch_group_create();
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      __int16 v10 = [*(id *)(a1 + 32) fileTransferGUIDs];
      *(_DWORD *)buf = 138412290;
      uint64_t v94 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Checking message file tranfers: %@", buf, 0xCu);
    }
  }
  long long v83 = 0u;
  long long v84 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  uint64_t v11 = [*(id *)(a1 + 32) fileTransferGUIDs];
  uint64_t v12 = [v11 countByEnumeratingWithState:&v81 objects:v103 count:16];
  if (!v12) {
    goto LABEL_66;
  }
  id obj = v11;
  uint64_t v50 = v12;
  char v13 = 0;
  uint64_t v14 = *(void *)v82;
  uint64_t v48 = *MEMORY[0x1E4F6AA68];
  do
  {
    for (uint64_t i = 0; i != v50; ++i)
    {
      if (*(void *)v82 != v14) {
        objc_enumerationMutation(obj);
      }
      uint64_t v15 = *(__CFString **)(*((void *)&v81 + 1) + 8 * i);
      uint64_t v16 = [v61 transferForGUID:v15];
      if (v16)
      {
        dispatch_group_enter(group);
        int v17 = [(__CFString *)v16 filename];
        id v59 = [v17 lastPathComponent];

        id v18 = [MEMORY[0x1E4F28CB8] defaultManager];
        BOOL v19 = objc_msgSend(v18, "im_randomTemporaryFileURLWithFileName:", v59);
        uint64_t v57 = [v19 path];

        [(__CFString *)v16 _setNeedsWrapper:0];
        double v20 = [*(id *)(a1 + 32) guid];
        [(__CFString *)v16 setMessageGUID:v20];

        double v21 = [*(id *)(a1 + 32) accountID];
        [v61 assignTransfer:v15 toAccount:v21 otherPerson:*(void *)(a1 + 40)];

        uint64_t v22 = [(__CFString *)v16 userInfo];
        uint64_t v23 = [(__CFString *)v22 _stringForKey:@"mmcs-url"];
        id v60 = v22;
        double v58 = [(__CFString *)v22 _stringForKey:@"mmcs-signature-hex"];
        if (v23)
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v24 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v94 = v58;
              _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, " => Settled on signature: %@", buf, 0xCu);
            }
          }
          char v55 = [(__CFString *)v60 _stringForKey:@"mmcs-owner"];
          uint64_t v25 = [(__CFString *)v60 objectForKey:@"file-size"];
          uint64_t v26 = [v25 stringValue];

          uint64_t v56 = [(__CFString *)v60 _stringForKey:@"decryption-key"];
          if (IMOSLoggingEnabled())
          {
            __int16 v27 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v94 = v16;
              _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, " transfer: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            id v28 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138412290;
              uint64_t v94 = v60;
              _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "    user info: %@", buf, 0xCu);
            }
          }
          if (IMOSLoggingEnabled())
          {
            uint64_t v29 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138413314;
              uint64_t v94 = v23;
              __int16 v95 = 2112;
              uint64_t v96 = v55;
              __int16 v97 = 2112;
              id v98 = v58;
              __int16 v99 = 2112;
              v100 = v56;
              __int16 v101 = 2112;
              long long v102 = v26;
              _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, " urlString: %@   owner: %@    signature: %@  key: %@  fileSizeString: %@", buf, 0x34u);
            }
          }
          if (IMOSLoggingEnabled())
          {
            uint64_t v30 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, " ** Auto downloading file!", buf, 2u);
            }
          }
          [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
          uint64_t v32 = v31;
          char v33 = v15;
          double v52 = v23;
          id v53 = v16;
          int v34 = [*(id *)(a1 + 32) isFromMe];
          id v35 = (void *)MEMORY[0x1E4F6E950];
          uint64_t v36 = *(void **)(a1 + 32);
          if (v34)
          {
            uint64_t v37 = [v36 service];
            [v35 fromMeContextWithServiceName:v37];
          }
          else
          {
            uint64_t v37 = [v36 service];
            [v35 untrustedContextWithServiceName:v37];
          id v51 = };

          uint64_t v41 = [MEMORY[0x1E4F6EBF8] sharedInstance];
          double v42 = [v57 stringByResolvingAndStandardizingPath];
          double v43 = [(__CFString *)v58 _FTDataFromHexString];
          uint64_t v44 = [v56 _FTDataFromHexString];
          uint64_t v45 = [v26 integerValue];
          id v46 = [*(id *)(a1 + 32) balloonBundleID];
          v80[0] = MEMORY[0x1E4F143A8];
          v80[1] = 3221225472;
          v80[2] = sub_1D96E4710;
          v80[3] = &unk_1E6B73FA0;
          v80[4] = v33;
          v70[0] = MEMORY[0x1E4F143A8];
          v70[1] = 3221225472;
          v70[2] = sub_1D96E4834;
          v70[3] = &unk_1E6B74090;
          id v71 = v53;
          uint64_t v79 = v32;
          id v72 = *(id *)(a1 + 32);
          id v47 = v26;
          id v73 = v47;
          id v74 = v61;
          id v75 = v33;
          char v77 = &v89;
          id v78 = &v85;
          double v76 = group;
          [v41 receiveFileTransfer:v33 transferGUID:v33 topic:v48 path:v42 requestURLString:v52 ownerID:v55 signature:v43 decryptionKey:v44 fileSize:v45 balloonBundleID:v46 senderContext:v51 progressBlock:v80 completionBlock:v70];

          uint64_t v23 = v52;
          uint64_t v16 = v53;
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v39 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, " => No signature found, nothing to download here", buf, 2u);
            }
          }
          double v40 = [(__CFString *)v16 guid];
          [v61 failTransfer:v40 error:0];

          *((unsigned char *)v90 + 24) = 0;
          *((_DWORD *)v86 + 6) = 35;
          dispatch_group_leave(group);
        }

        char v13 = 1;
      }
      else if (IMOSLoggingEnabled())
      {
        id v38 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          uint64_t v94 = v15;
          _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "No transfer found for guid: %@", buf, 0xCu);
        }
      }
    }
    uint64_t v50 = [obj countByEnumeratingWithState:&v81 objects:v103 count:16];
  }
  while (v50);

  if (v13)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96E4D60;
    block[3] = &unk_1E6B740B8;
    id v65 = *(id *)(a1 + 32);
    id v68 = &v89;
    id v67 = *(id *)(a1 + 48);
    id v66 = *(id *)(a1 + 40);
    double v69 = &v85;
    dispatch_group_notify(group, MEMORY[0x1E4F14428], block);

    uint64_t v11 = v65;
LABEL_66:
  }
  _Block_object_dispose(&v85, 8);
  _Block_object_dispose(&v89, 8);
}

void sub_1D96E4634(void *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D96E3C78);
  }
  _Block_object_dispose(&v2, 8);
  _Block_object_dispose(&v3, 8);
  JUMPOUT(0x1D96E4708);
}

void sub_1D96E4710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218496;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Receive progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
  [v9 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_1D96E4834(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  __int16 v14 = a6;
  id v15 = a7;
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = @"NO";
      *(_DWORD *)id v38 = 138412802;
      if (a4) {
        id v18 = @"YES";
      }
      *(void *)&v38[4] = v17;
      __int16 v39 = 2112;
      double v40 = v18;
      __int16 v41 = 2112;
      double v42 = v14;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Finished downloading transfer: %@   success: %@  error: %@", v38, 0x20u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    BOOL v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v21 = v20 - *(double *)(a1 + 96);
      *(_DWORD *)id v38 = 134217984;
      *(double *)&v38[4] = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Time taken: %f", v38, 0xCu);
    }
  }
  if (a4)
  {
    uint64_t v22 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v13];
    [*(id *)(a1 + 32) setUserInfo:0];
    if (v22
      && ([MEMORY[0x1E4F28CB8] defaultManager],
          uint64_t v23 = objc_claimAutoreleasedReturnValue(),
          [v22 path],
          uint64_t v24 = objc_claimAutoreleasedReturnValue(),
          int v25 = [v23 fileExistsAtPath:v24],
          v24,
          v23,
          v25))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)id v38 = 138412290;
          *(void *)&v38[4] = v13;
          _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", v38, 0xCu);
        }
      }
      __int16 v27 = +[IMDFileTransferCenter sharedInstance];
      [v27 addDefaultGatekeeperPropertiesToDirectory:v13];

      id v28 = *(void **)(a1 + 32);
      uint64_t v29 = [*(id *)(a1 + 40) guid];
      [v28 setMessageGUID:v29];

      [*(id *)(a1 + 32) _setLocalURL:v22];
      uint64_t v30 = [*(id *)(a1 + 48) integerValue];
      [*(id *)(a1 + 56) updateTransfer:*(void *)(a1 + 64) currentBytes:v30 totalBytes:v30];
      [*(id *)(a1 + 56) endTransfer:*(void *)(a1 + 64)];
      if (IMOSLoggingEnabled())
      {
        uint64_t v31 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)id v38 = 138412290;
          *(void *)&v38[4] = v22;
          _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", v38, 0xCu);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v32 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          uint64_t v33 = *(void *)(a1 + 32);
          *(_DWORD *)id v38 = 138412290;
          *(void *)&v38[4] = v33;
          _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", v38, 0xCu);
        }
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
      *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 35;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = *(void *)(a1 + 32);
        *(_DWORD *)id v38 = 138412546;
        *(void *)&v38[4] = v35;
        __int16 v39 = 2112;
        double v40 = v14;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, "Failed retreiving file transfer: %@   error: %@", v38, 0x16u);
      }
    }
    uint64_t v36 = *(void **)(a1 + 56);
    uint64_t v37 = objc_msgSend(*(id *)(a1 + 32), "guid", *(void *)v38);
    [v36 failTransfer:v37 error:v14];

    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 0;
    *(_DWORD *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 35;
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 72));
}

uint64_t sub_1D96E4D60(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) fileTransferGUIDs];
      uint64_t v4 = (void *)v3;
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24)) {
        uint64_t v5 = @"YES";
      }
      else {
        uint64_t v5 = @"NO";
      }
      int v7 = 138412546;
      uint64_t v8 = v3;
      __int16 v9 = 2112;
      int v10 = v5;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "  All done transfer set for: %@   success: %@", (uint8_t *)&v7, 0x16u);
    }
  }
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(result + 16))(result, *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), *(unsigned int *)(*(void *)(*(void *)(a1 + 64) + 8) + 24));
  }
  return result;
}

uint64_t sub_1D96E67EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1];
}

void sub_1D96E6800(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = IMOSLoggingEnabled();
  if (!v6 || v7)
  {
    if (v8)
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v13 = 138412290;
        id v14 = v7;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "File safe render failed for Peer Relay: %@", (uint8_t *)&v13, 0xCu);
      }
    }
  }
  else if (v8)
  {
    __int16 v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v13 = 138412290;
      id v14 = v6;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "File safe render success with output URLs: %@", (uint8_t *)&v13, 0xCu);
    }
  }
  uint64_t v11 = *(void **)(a1 + 32);
  id v12 = [*(id *)(a1 + 40) guid];
  [v11 _sendFileURL:v6 forMessageGUID:v12 attachmentIndex:*(void *)(a1 + 48)];
}

void sub_1D96E69C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  id v36 = a4;
  id v37 = a5;
  id v38 = a8;
  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = @"NO";
      if (a7) {
        id v18 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v44 = v15;
      __int16 v45 = 2112;
      id v46 = v18;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }
  }
  int v19 = IMOSLoggingEnabled();
  if (a6)
  {
    if (v19)
    {
      double v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v44 = v16;
        _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }
    double v21 = [(__CFString *)v16 lastObject];
    uint64_t v22 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfFile:v21];
    if (IMOSLoggingEnabled())
    {
      uint64_t v23 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(__CFString **)(a1 + 32);
        *(_DWORD *)buf = 138412546;
        uint64_t v44 = v24;
        __int16 v45 = 2112;
        id v46 = v21;
        _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "Forwarding Attachment with guid %@ to local peer. Filepath %@", buf, 0x16u);
      }
    }
    v41[0] = IMDRelayLocalMessageDictionaryGUIDKey;
    int v25 = [*(id *)(a1 + 40) guid];
    v42[0] = v25;
    v41[1] = IMDRelayLocalMessageDictionaryAttachmentIndexKey;
    uint64_t v26 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 48)];
    v42[1] = v26;
    void v41[2] = IMDRelayLocalMessageDictionaryFileDataKey;
    v42[2] = v22;
    __int16 v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v42 forKeys:v41 count:3];

    id v28 = JWEncodeDictionary();
    uint64_t v29 = (void *)[v28 _FTCopyGzippedData];
    v39[0] = IMDRelayLocalMessageDictionaryDictKey;
    v39[1] = IMDRelayLocalMessageDictionaryTypeKey;
    v40[0] = v29;
    v40[1] = IMDRelayLocalMessageTypeRemoteFileResponse;
    uint64_t v30 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v40 forKeys:v39 count:2];
    uint64_t v31 = +[IMDRelayServiceController sharedInstance];
    int v32 = [v31 sendToLocalPeers:v30];

    if (IMOSLoggingEnabled())
    {
      uint64_t v33 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        int v34 = @"NO";
        if (v32) {
          int v34 = @"YES";
        }
        *(_DWORD *)buf = 138412290;
        uint64_t v44 = v34;
        _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Got success? %@", buf, 0xCu);
      }
    }
  }
  else if (v19)
  {
    uint64_t v35 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
    }
  }
}

uint64_t sub_1D96E6E74(uint64_t a1)
{
  return [*(id *)(a1 + 32) remotefileRequest:*(void *)(a1 + 40) attempts:*(void *)(a1 + 48) + 1];
}

void sub_1D96E7354()
{
  uint64_t v0 = [IMDMessageFromStorageController alloc];
  id v3 = +[IMDMessageStore sharedInstance];
  uint64_t v1 = [(IMDMessageFromStorageController *)v0 initWithMessageStore:v3];
  uint64_t v2 = (void *)qword_1EBE2BB20;
  qword_1EBE2BB20 = v1;
}

void sub_1D96E743C()
{
  uint64_t v0 = [IMDMessageFromStorageController alloc];
  id v3 = +[IMDMessageStore sharedInstance];
  uint64_t v1 = [(IMDMessageFromStorageController *)v0 initWithMessageStore:v3];
  uint64_t v2 = (void *)qword_1EBE2BC98;
  qword_1EBE2BC98 = v1;
}

void sub_1D96E83C0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void **)(a1 + 32);
  id v6 = a3;
  id v16 = [v5 objectForKey:a2];
  id v7 = [*(id *)(a1 + 40) broadcaster];
  int v8 = [*(id *)(a1 + 48) lastObject];
  __int16 v9 = [v8 accountID];
  int v10 = [v16 chatIdentifier];
  uint64_t v11 = [v16 style];
  id v12 = [v16 chatProperties];
  int v13 = [v16 groupID];
  id v14 = [v16 personCentricID];
  LOBYTE(v15) = 1;
  [v7 account:v9 chat:v10 style:v11 chatProperties:v12 groupID:v13 chatPersonCentricID:v14 messagesReceived:v6 removed:MEMORY[0x1E4F1CBF0] messagesComingFromStorage:v15];
}

id sub_1D96E8658(void *a1)
{
  uint64_t v1 = [a1 accountRegisteredURIs];
  uint64_t v2 = objc_msgSend(v1, "__imArrayByApplyingBlock:", &unk_1F3390B40);

  return v2;
}

uint64_t sub_1D96E86AC(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4181798](a2, sel_unprefixedURI);
}

void sub_1D96E8AE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96E8A58);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96E8C94()
{
  qword_1EBE2B958 = objc_alloc_init(IMDMomentShareManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D96E8DF4(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) shareURLsToContexts];
  id v3 = (void *)[v2 copy];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1D96E8EAC;
  v5[3] = &unk_1E6B74250;
  uint64_t v4 = *(void **)(a1 + 40);
  v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v3 enumerateKeysAndObjectsUsingBlock:v5];
}

void sub_1D96E8EAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v10;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v10 != v7) {
          objc_enumerationMutation(v4);
        }
        [*(id *)(a1 + 32) _updateContext:*(void *)(*((void *)&v9 + 1) + 8 * v8++) withChange:*(void *)(a1 + 40)];
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v6);
  }
}

void sub_1D96E922C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96E91B0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D96E9390(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleMomentShareFetchForContext_momentShare_error_);
}

void sub_1D96E9E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D96E9C74);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D96E9E8C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = 1;
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = [*(id *)(a1 + 32) guid];
        *(_DWORD *)buf = 138412546;
        id v16 = v5;
        __int16 v17 = 2112;
        id v18 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Fetched moment share %@ for message %@", buf, 0x16u);
      }
    }
  }
  else
  {
    long long v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1D98FEF48(a1);
    }

    if (v6)
    {
      long long v10 = IMLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1D98FEEC4(a1, (uint64_t)v6, v10);
      }
    }
  }
  if (*(void *)(a1 + 48))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96EA0C0;
    block[3] = &unk_1E6B73AD8;
    id v14 = *(id *)(a1 + 48);
    id v12 = v5;
    id v13 = v6;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t sub_1D96EA0C0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_1D96EA0D8(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = [*(id *)(a1 + 40) guid];
      int v5 = 138412546;
      uint64_t v6 = v3;
      __int16 v7 = 2112;
      uint64_t v8 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "IMDMomentShareManager - Request for moment share %@ for message %@ has not completed after 5 seconds", (uint8_t *)&v5, 0x16u);
    }
  }
}

void sub_1D96EA2A8(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if (*(void *)(a1 + 32))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D96EA36C;
    block[3] = &unk_1E6B742C8;
    id v8 = *(id *)(a1 + 32);
    char v9 = a2;
    id v7 = v5;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t sub_1D96EA36C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
}

void sub_1D96EA664(uint64_t a1)
{
  id v4 = [*(id *)(a1 + 32) shareURL];
  uint64_t v2 = [*(id *)(a1 + 40) shareURLsToContexts];
  uint64_t v3 = [v2 objectForKey:v4];
  [v3 removeObject:*(void *)(a1 + 32)];
  if (![v3 count]) {
    [v2 removeObjectForKey:v4];
  }
}

void sub_1D96EB074(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96EAD8CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D96EB3A0(uint64_t a1, int a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      uint64_t v8 = [*(id *)(a1 + 40) guid];
      char v9 = (void *)v8;
      long long v10 = @"NO";
      *(_DWORD *)buf = 138413058;
      uint64_t v24 = v7;
      __int16 v25 = 2112;
      if (a2) {
        long long v10 = @"YES";
      }
      uint64_t v26 = v10;
      __int16 v27 = 2112;
      id v28 = v5;
      __int16 v29 = 2112;
      uint64_t v30 = v8;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Moment share %@ accepted success %@ error %@ for message %@", buf, 0x2Au);
    }
  }
  if (a2)
  {
    [*(id *)(a1 + 48) _fetchAssetsForAcceptedMomentShareWithContext:*(void *)(a1 + 56)];
  }
  else
  {
    long long v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1D98FF2D0(a1, (uint64_t)v5, v11);
    }

    id v12 = [v5 userInfo];
    id v13 = [v12 objectForKey:*MEMORY[0x1E4F19C60]];

    if (*(unsigned char *)(a1 + 64)) {
      BOOL v14 = 1;
    }
    else {
      BOOL v14 = v13 == 0;
    }
    int v15 = !v14;
    id v16 = IMLogHandleForCategory();
    BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    if (v15)
    {
      if (v17) {
        sub_1D98FF1D4();
      }

      [v13 doubleValue];
      dispatch_time_t v19 = dispatch_time(0, (uint64_t)(v18 * 1000000000.0));
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1D96EB644;
      v21[3] = &unk_1E6B73218;
      double v20 = *(void **)(a1 + 56);
      v21[4] = *(void *)(a1 + 48);
      id v22 = v20;
      dispatch_after(v19, MEMORY[0x1E4F14428], v21);
    }
    else
    {
      if (v17) {
        sub_1D98FF23C(a1, v16);
      }

      [*(id *)(a1 + 48) _handleIngestionFailureForContext:*(void *)(a1 + 56)];
    }
  }
}

uint64_t sub_1D96EB644(uint64_t a1)
{
  return [*(id *)(a1 + 32) _acceptMomentShareIfNecessaryForContext:*(void *)(a1 + 40) isRetry:1];
}

void sub_1D96EBD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96EBD54(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [a2 isFinished];
  if ((result & 1) == 0)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

uint64_t sub_1D96EC13C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__handleResourceRequestForContext_asset_transfer_didCompleteWithFileURL_error_);
}

void sub_1D96EC6A4(uint64_t a1)
{
  id v3 = [MEMORY[0x1E4F38ED0] changeRequestForAsset:*(void *)(a1 + 32)];
  uint64_t v2 = [*(id *)(a1 + 40) guid];
  [v3 setSyndicationIdentifierOnMomentSharedAsset:v2];
}

void sub_1D96EC718(uint64_t a1, char a2, void *a3)
{
  id v4 = a3;
  if ((a2 & 1) == 0)
  {
    id v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1D98FF3EC();
    }
  }
}

void sub_1D96ED090(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v5)
  {
    uint64_t v7 = +[IMDFileTransferCenter sharedInstance];
    [v7 updateTransfer:*(void *)(a1 + 32) currentBytes:*(void *)(a1 + 64) totalBytes:*(void *)(a1 + 64)];

    uint64_t v8 = *(void **)(a1 + 72);
    char v9 = [*(id *)(a1 + 40) guid];
    id v16 = 0;
    long long v10 = [v8 _copiedFileURLFromAssetExportFileURLs:v5 transferGUID:v9 error:&v16];
    id v11 = v16;

    if (v10)
    {
      id v12 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    else
    {
      int v15 = IMLogHandleForCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_1D98FF8C0();
      }

      id v12 = *(void (**)(void))(*(void *)(a1 + 56) + 16);
    }
    v12();
  }
  else
  {
    id v13 = IMLogHandleForCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_1D98FF830();
    }

    BOOL v14 = +[IMDFileTransferCenter sharedInstance];
    [v14 updateTransfer:*(void *)(a1 + 32) currentBytes:0 totalBytes:0];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D96EDF78(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96EDECCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D96EDFD8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = [*(id *)(a1 + 64) _fileTransferForAssetUUID:v5 forMessage:*(void *)(a1 + 32) momentShare:*(void *)(a1 + 40) atIndex:*(void *)(a1 + 72) + a3 ofTotal:*(void *)(a1 + 80)];
  [*(id *)(a1 + 48) addObject:v6];
  uint64_t v7 = *(void **)(a1 + 56);
  uint64_t v8 = [v6 guid];
  [v7 addObject:v8];

  if (IMOSLoggingEnabled())
  {
    char v9 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412546;
      id v11 = v6;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Generated transfer %@ for asset %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

void sub_1D96EE684(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1D96EE6A4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_1D96EE6CC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_1D96EE6E4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_1D96EE748(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x20u);
}

void sub_1D96F1304(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v34 = 138412290;
      id v35 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "User Notificaion has been completed with information %@", (uint8_t *)&v34, 0xCu);
    }
  }
  if (![v3 response])
  {
    id v13 = [v3 responseInformation];
    uint64_t v14 = [v13 objectForKey:*MEMORY[0x1E4F6C300]];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v23 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          LOWORD(v34) = 0;
          _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "The user entered no code... or the code entered was not an NSString", (uint8_t *)&v34, 2u);
        }
      }
      [*(id *)(a1 + 32) sendApprovalResponseToDevice:*(void *)(a1 + 40) enteredCorrectly:0 wasCancelled:0];
      goto LABEL_38;
    }
    id v15 = objc_alloc_init(MEMORY[0x1E4F28EE0]);
    id v16 = *(void **)(*(void *)(a1 + 32) + 24);
    BOOL v17 = [*(id *)(a1 + 40) uniqueID];
    double v18 = [v16 _numberForKey:v17];

    dispatch_time_t v19 = [v15 numberFromString:v14];
    if (v19 && v18)
    {
      int v20 = [v18 isEqualToNumber:v19];
      int v21 = IMOSLoggingEnabled();
      if (v20)
      {
        if (v21)
        {
          id v22 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
          {
            LOWORD(v34) = 0;
            _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "The Code Is Correct, Welcome", (uint8_t *)&v34, 2u);
          }
        }
        [*(id *)(a1 + 32) _addDeviceToAllowedSMSRelay:*(void *)(a1 + 40) shouldSendApproval:1];
        goto LABEL_37;
      }
      if (v21)
      {
        __int16 v25 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
        {
          LOWORD(v34) = 0;
          _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "The Code Is Incorrect, Goodbye", (uint8_t *)&v34, 2u);
        }
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        LOWORD(v34) = 0;
        _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Unable to create a code number from the user inputed information or we have no pin to compare against, this will fail validation", (uint8_t *)&v34, 2u);
      }
    }
    [*(id *)(a1 + 32) sendApprovalResponseToDevice:*(void *)(a1 + 40) enteredCorrectly:0 wasCancelled:0];
LABEL_37:

LABEL_38:
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, @"com.apple.sms.smsRelayDevices.changed", 0, 0, 0);
    __int16 v27 = *(void **)(*(void *)(a1 + 32) + 24);
    id v28 = [*(id *)(a1 + 40) uniqueID];
    __int16 v29 = [v27 objectForKey:v28];

    if (v29)
    {
      uint64_t v30 = *(void **)(*(void *)(a1 + 32) + 24);
      uint64_t v31 = [*(id *)(a1 + 40) uniqueID];
      [v30 removeObjectForKey:v31];

      if (![*(id *)(*(void *)(a1 + 32) + 24) count])
      {
        uint64_t v32 = *(void *)(a1 + 32);
        uint64_t v33 = *(void **)(v32 + 24);
        *(void *)(v32 + 24) = 0;
      }
    }

    goto LABEL_42;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      LOWORD(v34) = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "You Tapped Cancel, Goodbye!!", (uint8_t *)&v34, 2u);
    }
  }
  [*(id *)(a1 + 32) sendApprovalResponseToDevice:*(void *)(a1 + 40) enteredCorrectly:0 wasCancelled:1];
  id v6 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(v6, @"com.apple.sms.smsRelayDevices.changed", 0, 0, 0);
  uint64_t v7 = *(void **)(*(void *)(a1 + 32) + 24);
  uint64_t v8 = [*(id *)(a1 + 40) uniqueID];
  uint64_t v9 = [v7 objectForKey:v8];

  if (v9)
  {
    uint64_t v10 = *(void **)(*(void *)(a1 + 32) + 24);
    id v11 = [*(id *)(a1 + 40) uniqueID];
    [v10 removeObjectForKey:v11];

    if (![*(id *)(*(void *)(a1 + 32) + 24) count])
    {
      uint64_t v12 = *(void *)(a1 + 32);
      id v13 = *(void **)(v12 + 24);
      *(void *)(v12 + 24) = 0;
LABEL_42:
    }
  }
}

void sub_1D96F31EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != 4 || a3)
  {
    id v6 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v6();
  }
  else
  {
    id v4 = +[IMDCKUtilities sharedInstance];
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1D96F32D0;
    v7[3] = &unk_1E6B74408;
    uint64_t v5 = *(void **)(a1 + 40);
    v7[4] = *(void *)(a1 + 32);
    id v8 = v5;
    [v4 fetchiCloudAccountPersonID:v7];
  }
}

void sub_1D96F32D0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6 || ![*(id *)(a1 + 32) _areiMessageAndiCloudAccountTheSame:v5])
  {
    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "iCloud and iMessage account is the same, and icloud is HSA2 trusted, auto enabling devices for sms relay", v9, 2u);
      }
    }
    id v8 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v8();
}

void sub_1D96F34B4(uint64_t a1, int a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5 && IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v18 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "_shouldAutoEnableDevicesforSMSRelay received error %@", buf, 0xCu);
    }
  }
  if (a2)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    uint64_t v7 = objc_msgSend(*(id *)(a1 + 32), "serviceDelegate", 0);
    id v8 = [v7 peerDevices];

    uint64_t v9 = [v8 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v13;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v13 != v10) {
            objc_enumerationMutation(v8);
          }
          [*(id *)(a1 + 32) _enableSMSRelayForDevice:*(void *)(*((void *)&v12 + 1) + 8 * v11++)];
        }
        while (v9 != v11);
        uint64_t v9 = [v8 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v9);
    }
  }
}

void sub_1D96F3D40(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "User tapped cancel on the Pin Display Alert, This will not dismiss the entry field on the iPhone", v4, 2u);
    }
  }
}

void sub_1D96F5064(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1D98FFCB0(v3, v4);
    }

    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Successfully updated Safety Monitor about the Notification response", v7, 2u);
      }
    }
    id v5 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v5();
}

id sub_1D96F5170(uint64_t a1)
{
  uint64_t v1 = [MEMORY[0x1E4F1CAD0] setWithArray:a1];
  id v2 = [v1 allObjects];
  id v3 = objc_msgSend(v2, "__imArrayByFilteringWithBlock:", &unk_1F3390BA0);

  id v4 = [v3 sortedArrayUsingComparator:&unk_1F3390BC0];

  return v4;
}

uint64_t sub_1D96F5204(uint64_t a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    uint64_t v3 = [v2 isEqualToNumber:&unk_1F33C5748] ^ 1;
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

uint64_t sub_1D96F5268(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  unint64_t v5 = [a2 unsignedIntegerValue];
  unint64_t v6 = [v4 unsignedIntegerValue];

  if (v5 < v6) {
    return 1;
  }
  else {
    return -1;
  }
}

void *sub_1D96F5A64()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("IMiMessageSizeLimitsForTransferTypeDisableLargeSizeNetworkRestriction", @"IMFoundation");
  off_1EA8CA440 = result;
  return result;
}

id _ClampDate(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v2 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v3 = v2;
  if (!v1)
  {
    id v6 = 0;
    id v1 = v2;
    goto LABEL_20;
  }
  uint64_t v4 = [v2 compare:v1];
  if (v4 != -1)
  {
    if (v4 == 1)
    {
      if (!IMOSLoggingEnabled())
      {
LABEL_19:
        id v6 = v1;
        goto LABEL_20;
      }
      unint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412546;
        id v11 = v1;
        __int16 v12 = 2112;
        long long v13 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, " * Date descending vs current (%@ vs %@)", (uint8_t *)&v10, 0x16u);
      }
    }
    else
    {
      if (v4 || !IMOSLoggingEnabled()) {
        goto LABEL_19;
      }
      unint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412546;
        id v11 = v1;
        __int16 v12 = 2112;
        long long v13 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, " * Date is the same as current (%@ vs %@)", (uint8_t *)&v10, 0x16u);
      }
    }

    goto LABEL_19;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412546;
      id v11 = v1;
      __int16 v12 = 2112;
      long long v13 = v3;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, " * Clamping date %@ to current date (%@)", (uint8_t *)&v10, 0x16u);
    }
  }
  id v6 = v3;

  id v1 = v6;
LABEL_20:
  id v8 = v1;

  return v8;
}

uint64_t sub_1D96F6E64(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) transferForGUID:a2];
}

__CFString *sub_1D96F6E70()
{
  return @"\uFFFD";
}

void sub_1D96FA6A8(uint64_t a1, void *a2)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v25 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Processed message, result: %@", buf, 0xCu);
    }
  }
  if (v3)
  {
    unint64_t v5 = *(void **)(a1 + 32);
    id v6 = [v3 guid];
    [v5 _addOriginatedMessage:v6];

    [v3 setUseStandalone:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 80) + 8) + 24)];
    uint64_t v7 = [*(id *)(a1 + 40) notificationIDSTokenURI];
    LOBYTE(v5) = [v7 length] == 0;

    if ((v5 & 1) == 0)
    {
      id v8 = [*(id *)(a1 + 40) notificationIDSTokenURI];
      [v3 setNotificationIDSTokenURI:v8];
    }
    [v3 setDestinationCallerID:*(void *)(a1 + 48)];
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = [*(id *)(a1 + 40) destinationCallerID];
        uint64_t v11 = *(void *)(a1 + 48);
        *(_DWORD *)buf = 138412546;
        id v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v11;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "sendMessage destinationCallerID: %@ mycallerID: %@", buf, 0x16u);
      }
    }
    uint64_t v12 = *(void *)(a1 + 88);
    uint64_t v13 = [*(id *)(a1 + 32) _sendMessageOverAlternatePath:v3 toChat:*(void *)(a1 + 56)];
    uint64_t v14 = v13;
    if (v13 & 1 | ((v12 & 1) == 0))
    {
      if ((v12 & 2) != 0) {
        char v15 = v13;
      }
      else {
        char v15 = 1;
      }
      if ((v15 & 1) == 0)
      {
        [*(id *)(a1 + 32) didSendMessage:v3 forChat:*(void *)(a1 + 64) style:*(unsigned __int8 *)(a1 + 96)];
        id v16 = *(void **)(a1 + 32);
        BOOL v17 = [v3 guid];
        [v16 _setTimeoutTimerForRelayMessageID:v17 timeout:180.0];

        uint64_t v14 = 0;
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "sendMessageFromIMMessageItem:forChat:chat:style:", v3, *(void *)(a1 + 64), *(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 96), v13);
      uint64_t v14 = 1;
    }
    BYTE2(v22) = (v12 & 4) != 0;
    BYTE1(v22) = *(unsigned char *)(a1 + 98);
    LOBYTE(v22) = (v12 & 8) != 0;
    objc_msgSend(*(id *)(a1 + 32), "_finishSendingMessageItem:chatIdentifier:chatStyle:foundChat:didSendSMS:attemptingReplication:shouldForceFail:watchSendsOverCellular:forceReflection:callerID:", v3, *(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 96), *(void *)(a1 + 56), v14, *(unsigned __int8 *)(a1 + 97), v22, *(void *)(a1 + 48));
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = *(unsigned __int8 *)(a1 + 96);
    uint64_t v20 = *(void *)(a1 + 72);
    v23.receiver = *(id *)(a1 + 32);
    v23.super_class = (Class)IMDTelephonyServiceSession;
    objc_msgSendSuper2(&v23, sel_sendMessage_toChat_style_account_, v3, v18, v19, v20);
  }
  else if (IMOSLoggingEnabled())
  {
    int v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "No message, cannot continue sending!", buf, 2u);
    }
  }
}

uint64_t sub_1D96FAB4C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_setServiceCompatibleContentOn_forChat_style_from_completionBlock_);
}

id sub_1D96FB1EC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v4 = [v3 transferForGUID:v2];

  unint64_t v5 = [v4 localPath];

  return v5;
}

void sub_1D96FB270(uint64_t a1, void *a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v26 = a3;
  id v6 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v7 = *(void **)(a1 + 32);
  id v8 = IMBalloonExtensionIDWithSuffix();
  int v9 = [v7 isEqualToString:v8];

  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v10 = v5;
  uint64_t v11 = [v10 countByEnumeratingWithState:&v27 objects:v31 count:16];
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v13 = *(void *)v28;
    do
    {
      for (uint64_t i = 0; i != v12; ++i)
      {
        if (*(void *)v28 != v13) {
          objc_enumerationMutation(v10);
        }
        char v15 = *(void **)(*((void *)&v27 + 1) + 8 * i);
        if (v9)
        {
          id v16 = [v10 lastObject];

          if (v15 == v16) {
            continue;
          }
        }
        BOOL v17 = +[IMDFileTransferCenter sharedInstance];
        uint64_t v18 = [v17 createNewOutgoingTransferWithLocalFileURL:v15];

        [v6 addObject:v18];
      }
      uint64_t v12 = [v10 countByEnumeratingWithState:&v27 objects:v31 count:16];
    }
    while (v12);
  }

  if ([v6 count])
  {
    uint64_t v19 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3398578];
    uint64_t v20 = (void *)IMCreateSuperFormatStringWithAppendedFileTransfers();
    int v21 = (void *)[v20 mutableCopy];
    [*(id *)(a1 + 40) setBody:v21];
    [*(id *)(a1 + 40) setFileTransferGUIDs:v6];
  }
  if (v26)
  {
    uint64_t v22 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:v26];
    objc_super v23 = [*(id *)(a1 + 40) body];
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = (id)[v23 mutableCopy];
      [v25 appendAttributedString:v22];
    }
    else
    {
      id v25 = v22;
    }
    [*(id *)(a1 + 40) setBody:v25];
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

void sub_1D96FB4F8(uint64_t a1, void *a2)
{
  v23[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    uint64_t v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    id v5 = objc_msgSend(v4, "im_generateCopyForURL:", v3);

    id v6 = v3;
    if (v5)
    {
      id v6 = v5;
    }
  }
  else
  {
    id v6 = 0;
  }
  uint64_t v7 = [MEMORY[0x1E4F6EBE0] sharedInstance];
  id v8 = [*(id *)(a1 + 32) type];
  int v9 = [*(id *)(a1 + 40) service];
  uint64_t v17 = [v9 transcodeTarget];
  id v10 = [NSNumber numberWithLongLong:*(void *)(a1 + 64)];
  v23[0] = v10;
  uint64_t v11 = [MEMORY[0x1E4F1C978] arrayWithObjects:v23 count:1];
  uint64_t v12 = [*(id *)(a1 + 32) transcoderUserInfo];
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1D96FB724;
  v18[3] = &unk_1E6B74558;
  id v19 = v6;
  id v13 = *(id *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 32);
  id v20 = v13;
  uint64_t v21 = v14;
  id v22 = *(id *)(a1 + 56);
  id v15 = v6;
  LOBYTE(v16) = 0;
  [v7 transcodeFallbackFileTransferContents:v15 utiType:v8 allowUnfilteredUTIs:MEMORY[0x1E4F1CBF0] target:v17 sizes:v11 commonCapabilities:0 maxDimension:-1 transcoderUserInfo:v12 representations:0 isLQMEnabled:v16 completionBlock:v18];
}

void sub_1D96FB724(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  id v14 = a3;
  id v15 = a4;
  id v16 = a5;
  id v17 = a8;
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = *(void *)(a1 + 32);
      int v23 = 138412546;
      uint64_t v24 = v19;
      __int16 v25 = 2112;
      id v26 = v14;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "fallback transcoded %@ to %@", (uint8_t *)&v23, 0x16u);
    }
  }
  if ([v14 count])
  {
    id v20 = *(void **)(a1 + 40);
    uint64_t v21 = [v14 lastObject];
    id v22 = [*(id *)(a1 + 48) guid];
    [v20 setObject:v21 forKey:v22];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

void sub_1D96FB8BC(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) fileTransferGUIDs];
  id v3 = (void *)[v2 mutableCopy];
  uint64_t v4 = v3;
  if (v3) {
    id v5 = v3;
  }
  else {
    id v5 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  }
  id v6 = v5;

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id obj = *(id *)(a1 + 40);
  uint64_t v7 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v21 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void *)(*((void *)&v20 + 1) + 8 * i);
        uint64_t v12 = +[IMDFileTransferCenter sharedInstance];
        id v13 = [*(id *)(a1 + 40) objectForKey:v11];
        id v14 = [v12 createNewOutgoingTransferWithLocalFileURL:v13];

        uint64_t v15 = [v6 indexOfObject:v11];
        if (v15 == 0x7FFFFFFFFFFFFFFFLL) {
          [v6 addObject:v14];
        }
        else {
          [v6 replaceObjectAtIndex:v15 withObject:v14];
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v8);
  }

  if ([v6 count])
  {
    id v16 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:&stru_1F3398578];
    id v17 = (void *)IMCreateSuperFormatStringWithAppendedFileTransfers();
    uint64_t v18 = (void *)[*(id *)(a1 + 48) copyForBackwardsCompatibility];
    [v18 setFileTransferGUIDs:v6];
    [v18 setBody:v17];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D96FBE34(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v14;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void *)(*((void *)&v13 + 1) + 8 * v7);
        uint64_t v9 = +[IMDMessageStore sharedInstance];
        id v10 = [v9 messageWithGUID:v8];

        uint64_t v11 = [*(id *)(a1 + 32) broadcasterForChatListeners];
        uint64_t v12 = [v10 accountID];
        [v11 account:v12 chat:0 style:0 chatProperties:0 messageUpdated:v10];

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v5);
  }
}

void sub_1D96FC574(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D96FC3CCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D96FC5BC(uint64_t a1, void *a2, int a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v23 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Message Transcode and Upload complete, Parts: %@", buf, 0xCu);
    }
  }
  if (a3)
  {
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = *(void *)(a1 + 40);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D96FC814;
    v15[3] = &unk_1E6B745D0;
    void v15[4] = v7;
    id v16 = *(id *)(a1 + 48);
    id v17 = *(id *)(a1 + 40);
    int v20 = *(_DWORD *)(a1 + 72);
    char v21 = *(unsigned char *)(a1 + 76);
    id v9 = *(id *)(a1 + 56);
    uint64_t v10 = *(void *)(a1 + 64);
    id v18 = v9;
    uint64_t v19 = v10;
    [v7 waitForChatRelayReadiness:v8 withBlock:v15];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void **)(a1 + 48);
        *(_DWORD *)buf = 138412290;
        id v23 = v12;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Failed to process and upload attachments for peer relay: %@", buf, 0xCu);
      }
    }
    if (!*(unsigned char *)(a1 + 72))
    {
      long long v13 = *(void **)(a1 + 32);
      long long v14 = [*(id *)(a1 + 48) guid];
      [v13 didReceiveError:4 forMessageID:v14 forceError:1];
    }
  }
}

void sub_1D96FC814(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) relayController];
  LOBYTE(v2) = *(unsigned char *)(a1 + 76);
  [v3 relayMessage:*(void *)(a1 + 40) chat:*(void *)(a1 + 48) didSendSMS:*(unsigned __int8 *)(a1 + 72) attemptingReplication:*(unsigned __int8 *)(a1 + 73) forceReflection:*(unsigned __int8 *)(a1 + 74) relayToWatchOnly:*(unsigned __int8 *)(a1 + 75) shouldDisableScreenTimeRestrictions:v2 callerID:*(void *)(a1 + 56) iMessageCapability:*(void *)(a1 + 64) requiredCapabilities:0];
}

void sub_1D96FC88C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Message Failed To Transcode and upload, error: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v8 = *(void **)(a1 + 32);
  id v9 = [*(id *)(a1 + 40) guid];
  [v8 didReceiveError:4 forMessageID:v9 forceError:1];
}

void sub_1D96FC9A4(uint64_t a1)
{
  id v3 = [*(id *)(a1 + 32) relayController];
  LOBYTE(v2) = *(unsigned char *)(a1 + 76);
  [v3 relayMessage:*(void *)(a1 + 40) chat:*(void *)(a1 + 48) didSendSMS:*(unsigned __int8 *)(a1 + 72) attemptingReplication:*(unsigned __int8 *)(a1 + 73) forceReflection:*(unsigned __int8 *)(a1 + 74) relayToWatchOnly:*(unsigned __int8 *)(a1 + 75) shouldDisableScreenTimeRestrictions:v2 callerID:*(void *)(a1 + 56) iMessageCapability:*(void *)(a1 + 64) requiredCapabilities:0];
}

void sub_1D96FE0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D96FE10C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D96FE11C(uint64_t a1)
{
}

void sub_1D96FE124(uint64_t a1, void *a2)
{
}

void sub_1D96FE648(uint64_t a1, void *a2, int a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a4;
  if (a3)
  {
    id v11 = *(void **)(a1 + 32);
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_1D96FE7B8;
    v14[3] = &unk_1E6B74668;
    id v15 = v11;
    int v17 = a5;
    id v16 = v10;
    [v15 buildWith:v9 parts:v16 completion:v14];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long v13 = 0;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Message prepare failed, not sending", v13, 2u);
      }
    }
    [v9 setErrorCode:25];
    [*(id *)(a1 + 40) didSendMessage:v9 forChat:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 56)];
  }
}

uint64_t sub_1D96FE7B8(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v3, sel_sendWithCompletion_);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v6 = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Message build failed, not sending, cleaning up", v6, 2u);
      }
    }
    return [*(id *)(a1 + 32) cleanupFailedBuildWithError:*(unsigned int *)(a1 + 48) forParts:*(void *)(a1 + 40)];
  }
}

void sub_1D96FE888(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = @"NO";
      if (a2) {
        uint64_t v4 = @"YES";
      }
      int v5 = 138412290;
      id v6 = v4;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Message send success %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1D96FFDC8(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  int v5 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    uint64_t v9 = a3;
    _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_DEFAULT, "SMSCTPhoneNumberChangedNotification: %@", buf, 0xCu);
  }

  id v7 = a2;
  id v6 = v7;
  im_dispatch_after();
}

uint64_t sub_1D96FFFB0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updatePhoneNumberCallerID];
}

uint64_t sub_1D9700FCC(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v17 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "handleOperation : %@", buf, 0xCu);
    }
  }
  if ([*(id *)(a1 + 32) isMemberOfClass:objc_opt_class()])
  {
    uint64_t v4 = *(void **)(a1 + 32);
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    int v5 = objc_msgSend(v4, "recordIDs", 0);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v12 != v7) {
            objc_enumerationMutation(v5);
          }
          if (objc_msgSend((id)objc_msgSend(*(id *)(*((void *)&v11 + 1) + 8 * i), "recordName"), "isEqualToString:", @"CloudKitExitRecord"))objc_msgSend(*(id *)(a1 + 40), "_handleFetchingExitRecordOperation:", v4); {
        }
          }
        uint64_t v6 = [v5 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v6);
    }
  }
  uint64_t result = [*(id *)(a1 + 32) isMemberOfClass:objc_opt_class()];
  if (result)
  {
    uint64_t v10 = *(void *)(a1 + 32);
    uint64_t result = [*(id *)(a1 + 40) _operationIsCloudKitMetricsOperation:v10];
    if (result) {
      return [*(id *)(a1 + 40) _handleWritingCloudKitMetrics:v10];
    }
  }
  return result;
}

uint64_t sub_1D970135C(void *a1)
{
  return 1;
}

uint64_t sub_1D9701408()
{
  qword_1EBE2B960 = objc_alloc_init(IMDCKAttachmentSyncController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D970163C()
{
  qword_1EA8CA450 = +[IMDAttachmentStore sharedInstance];

  return MEMORY[0x1F41817F8]();
}

void sub_1D97021A8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 48);
      int v10 = 134217984;
      uint64_t v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "syncAttachmentsWithSyncType with type %ld finished", (uint8_t *)&v10, 0xCu);
    }
  }
  if (a2)
  {
    if (*(void *)(a1 + 48) == 1 && ([*(id *)(a1 + 32) _hasCompletedRecoveryResync] & 1) == 0)
    {
      [*(id *)(a1 + 32) _markResyncForDeleteRecoveryAs:2];
      if (IMOSLoggingEnabled())
      {
        uint64_t v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v10) = 0;
          _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Completed Delete Recovery Resync!", (uint8_t *)&v10, 2u);
        }
      }
    }
  }
  [*(id *)(a1 + 32) setIsDoingDeleteRecoverySync:0];
  [*(id *)(a1 + 32) setIsSyncing:0];
  [*(id *)(a1 + 32) setDeviceConditionsToCheck:0];
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t, id))(v9 + 16))(v9, a2, v5);
  }
}

void sub_1D9702368(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (v5 || !a2)
  {
    if (v6)
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Initial attachment sync failed. skipping metadata only sync.", v12, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Initial attachment sync succeeded. Proceeding with metadata only sync.", buf, 2u);
      }
    }
    uint64_t v8 = *(void **)(a1 + 32);
    uint64_t v9 = [v8 _numberOfMetadataBatchesOfAttachmentsToFetchInInitialSync];
    int v10 = [*(id *)(a1 + 32) latestSyncTokenForSyncType:5];
    [v8 _fetchAttachmentZoneChangesShouldWriteBackChanges:0 desiredKeys:0 syncType:5 currentBatchCount:0 maxBatchCount:v9 syncToken:v10 activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 48)];
  }
}

void sub_1D97024F4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _fetchedAllChangesFromCloudKit]
    && (*(void *)(a1 + 64) | 4) == 5
    && ([*(id *)(a1 + 32) _hasCompletedRecoveryResync] & 1) == 0)
  {
    [*(id *)(a1 + 32) _initResyncForDeleteRecovery];
  }
  if ([*(id *)(a1 + 32) _shouldMarkAllAttachmentsAsNeedingSync])
  {
    [*(id *)(a1 + 32) clearLocalSyncState:3];
    [*(id *)(a1 + 32) _hasMarkedAllAttachmentsAsNeedingSync];
  }
  [*(id *)(a1 + 32) setIsSyncing:1];
  [*(id *)(a1 + 32) setDeviceConditionsToCheck:*(void *)(a1 + 72)];
  uint64_t v2 = *(void *)(a1 + 64);
  if (!v2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "*** Called into to do initial sync ****", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) setLatestSyncToken:0 forSyncType:*(void *)(a1 + 64)];
    uint64_t v2 = *(void *)(a1 + 64);
  }
  switch(v2)
  {
    case 0:
      uint64_t v4 = *(void **)(a1 + 32);
      uint64_t v5 = [v4 _numberOfBatchesOfAttachmentsToFetchInInitialSync];
      int v6 = [*(id *)(a1 + 32) latestSyncTokenForSyncType:*(void *)(a1 + 64)];
      [v4 _fetchAttachmentZoneChangesShouldWriteBackChanges:0 desiredKeys:1 syncType:0 currentBatchCount:0 maxBatchCount:v5 syncToken:v6 activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 56)];
      break;
    case 1:
      [*(id *)(a1 + 32) _markAllFailedAttachmentsAsNeedingSync];
      uint64_t v9 = *(void **)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 64);
      int v6 = [v9 latestSyncTokenForSyncType:v10];
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v11 = v9;
      uint64_t v12 = 1;
      uint64_t v13 = v10;
      goto LABEL_18;
    case 2:
      uint64_t v7 = *(void **)(a1 + 32);
      uint64_t v8 = *(void *)(a1 + 40);
      v17[0] = MEMORY[0x1E4F143A8];
      v17[1] = 3221225472;
      void v17[2] = sub_1D97027D4;
      v17[3] = &unk_1E6B74730;
      id v18 = *(id *)(a1 + 48);
      [v7 _writeAttachmentsToCloudKitWithActivity:v8 completionBlock:v17];
      int v6 = v18;
      break;
    case 5:
      long long v14 = *(void **)(a1 + 32);
      int v6 = [v14 latestSyncTokenForSyncType:5];
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = *(void *)(a1 + 48);
      uint64_t v11 = v14;
      uint64_t v12 = 0;
      uint64_t v13 = 5;
LABEL_18:
      [v11 _fetchAttachmentZoneChangesShouldWriteBackChanges:v12 desiredKeys:0 syncType:v13 currentBatchCount:0 maxBatchCount:-1 syncToken:v6 activity:v15 completionBlock:v16];
      break;
    default:
      int v6 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1E8] code:1 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
      break;
  }
}

void sub_1D97027D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1D9702880;
  v6[3] = &unk_1E6B73A10;
  id v4 = *(id *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async(MEMORY[0x1E4F14428], v6);
}

uint64_t sub_1D9702880(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32) == 0);
}

void sub_1D9702AA4(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v21 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v2 = 0;
  uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v26;
    *(void *)&long long v4 = 138412546;
    long long v19 = v4;
    do
    {
      uint64_t v6 = 0;
      id v7 = v2;
      do
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v25 + 1) + 8 * v6);
        uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "_attachmentZoneID", v19);
        uint64_t v10 = [*(id *)(a1 + 40) _attachmentZoneSalt];
        uint64_t v11 = [v8 recordIDWithZoneID:v9 salt:v10];

        if (v11)
        {
          uint64_t v12 = [*(id *)(a1 + 40) recordIDToTransferMap];
          [v12 setObject:v8 forKey:v11];

          [v21 addObject:v11];
        }
        else if (IMOSLoggingEnabled())
        {
          uint64_t v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            [v8 cloudKitSyncState];
            IMStringFromCKSyncState();
            id v14 = (id)objc_claimAutoreleasedReturnValue();
            uint64_t v15 = [*(id *)(a1 + 40) _attachmentZoneSalt];
            uint64_t v16 = [v15 length];
            *(_DWORD *)buf = v19;
            uint64_t v17 = @"YES";
            if (!v16) {
              uint64_t v17 = @"NO";
            }
            id v30 = v14;
            __int16 v31 = 2112;
            uint64_t v32 = v17;
            _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "fetchAttachmentDataForTransfers: we weren't able to get a CKRecordID from a transfer; transfer sync state "
              "%@, non-empty salt %@",
              buf,
              0x16u);
          }
        }
        uint64_t v2 = @".UserInit";
        if (([v8 fetchOptions] & 4) == 0)
        {
          if (([v8 fetchOptions] & 8) != 0) {
            uint64_t v2 = @".Compute";
          }
          else {
            uint64_t v2 = v7;
          }
        }

        ++v6;
        id v7 = v2;
      }
      while (v3 != v6);
      uint64_t v3 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
    }
    while (v3);
  }

  if (*(void *)(a1 + 56)) {
    objc_msgSend(*(id *)(a1 + 40), "setPerTransferProgress:");
  }
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D9702E04;
  aBlock[3] = &unk_1E6B747A0;
  id v23 = *(id *)(a1 + 32);
  id v24 = *(id *)(a1 + 64);
  id v18 = _Block_copy(aBlock);
  [*(id *)(a1 + 40) _fetchAttachmentZoneRecords:v21 desiredKeys:1 ognSuffix:v2 removeTombstones:0 activity:*(void *)(a1 + 48) completion:v18];
}

void sub_1D9702E04(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1F3390CA0);
  id v8 = objc_msgSend(v7, "__imSetFromArray");

  if ([v8 count])
  {
    uint64_t v9 = [v8 allObjects];
    id v13 = *(id *)(a1 + 40);
    id v11 = v5;
    id v12 = v6;
    IMDCoreSpotlightReindexMessagesWhileBlocking();
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 40);
    if (v10) {
      (*(void (**)(uint64_t, id, id))(v10 + 16))(v10, v5, v6);
    }
  }
}

id sub_1D9702F50(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 guid];
  uint64_t v3 = IMMessageGuidFromIMFileTransferGuid();

  return v3;
}

uint64_t sub_1D9702FA0(void *a1)
{
  uint64_t result = a1[6];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, a1[4], a1[5]);
  }
  return result;
}

void sub_1D97031EC(uint64_t a1, void *a2, float a3, uint64_t a4, void *a5)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v8 = a2;
  id v9 = a5;
  unint64_t v10 = [*(id *)(a1 + 32) totalBytes];
  if (IMOSLoggingEnabled())
  {
    id v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = [v8 guid];
      int v16 = 138412802;
      uint64_t v17 = v12;
      __int16 v18 = 2048;
      double v19 = a3;
      __int16 v20 = 2048;
      unint64_t v21 = v10;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Transfer %@ - %f complete of %llu bytes", (uint8_t *)&v16, 0x20u);
    }
  }
  if ((float)((float)v10 * a3) >= (float)v10) {
    float v13 = (float)v10;
  }
  else {
    float v13 = (float)v10 * a3;
  }
  id v14 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v15 = [v8 guid];
  [v14 updateTransfer:v15 currentBytes:(unint64_t)v13 totalBytes:v10];
}

void sub_1D970337C(uint64_t a1, void *a2, void *a3)
{
  if (*(void *)(a1 + 40))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    id v6 = a2;
    [a3 containsObject:v5];
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
}

uint64_t sub_1D9703590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

void sub_1D9703764(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9703744);
  }
  _Unwind_Resume(a1);
}

void sub_1D9703BE4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  id v54 = a2;
  id v53 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      double v74 = *(double *)&v54;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Finished download of assets with Error: %@", buf, 0xCu);
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) += [*(id *)(a1 + 32) count];
  id v6 = [MEMORY[0x1E4F1CA80] set];
  id v7 = [MEMORY[0x1E4F1CA48] array];
  if (*(void *)(a1 + 40))
  {
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v8 = v53;
    uint64_t v9 = [v8 countByEnumeratingWithState:&v69 objects:v79 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v70;
      do
      {
        for (uint64_t i = 0; i != v9; ++i)
        {
          if (*(void *)v70 != v10) {
            objc_enumerationMutation(v8);
          }
          id v12 = [*(id *)(*((void *)&v69 + 1) + 8 * i) guid];
          [v6 addObject:v12];
        }
        uint64_t v9 = [v8 countByEnumeratingWithState:&v69 objects:v79 count:16];
      }
      while (v9);
    }
  }
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  id v13 = *(id *)(a1 + 32);
  uint64_t v14 = [v13 countByEnumeratingWithState:&v65 objects:v78 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v66;
    do
    {
      for (uint64_t j = 0; j != v14; ++j)
      {
        if (*(void *)v66 != v15) {
          objc_enumerationMutation(v13);
        }
        if (*(void *)(a1 + 40))
        {
          uint64_t v17 = *(void **)(*((void *)&v65 + 1) + 8 * j);
          __int16 v18 = [v17 guid];
          char v19 = [v6 containsObject:v18];

          if ((v19 & 1) == 0)
          {
            __int16 v20 = [v17 guid];
            [v7 addObject:v20];

            unint64_t v21 = [*(id *)(a1 + 48) fileTransferCenter];
            uint64_t v22 = [v17 guid];
            [v21 removeTransferForGUID:v22];
          }
        }
      }
      uint64_t v14 = [v13 countByEnumeratingWithState:&v65 objects:v78 count:16];
    }
    while (v14);
  }

  if (!v54)
  {
    BOOL v42 = [v53 count] == 0;
    unint64_t v23 = *(void *)(a1 + 80);
    [*(id *)(a1 + 48) setAssetDownloadInProgress:0];
    if (!v42) {
      goto LABEL_61;
    }
    double v27 = (double)v23 * 0.5 + 0.5;
LABEL_55:
    if (v23 <= 3) {
      goto LABEL_56;
    }
LABEL_61:
    if (IMOSLoggingEnabled())
    {
      uint64_t v50 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134218242;
        double v74 = *(double *)&v23;
        __int16 v75 = 2112;
        id v76 = v54;
        _os_log_impl(&dword_1D967A000, v50, OS_LOG_TYPE_INFO, "Failed downloading batch of assets, not kicking off another batch. (number of retries: %lu) Error was %@", buf, 0x16u);
      }
    }
    uint64_t v51 = *(void *)(a1 + 64);
    if (v51) {
      (*(void (**)(uint64_t, void, void, void))(v51 + 16))(v51, 0, *(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 24), 0);
    }
    goto LABEL_67;
  }
  unint64_t v23 = *(void *)(a1 + 80);
  int v24 = CKCanRetryForError();
  long long v25 = [v54 domain];
  int v26 = [v25 isEqualToString:*MEMORY[0x1E4F19C40]];

  double v27 = (double)v23 * 0.5 + 0.5;
  if (v26)
  {
    long long v28 = [v54 userInfo];
    uint64_t v29 = *MEMORY[0x1E4F19C60];
    id v30 = [v28 objectForKey:*MEMORY[0x1E4F19C60]];

    if (v30)
    {
      __int16 v31 = [v54 userInfo];
      uint64_t v32 = [v31 objectForKey:v29];
      [v32 doubleValue];
      double v27 = v33;

      int v24 = 1;
    }
    if ([v54 code] == 2)
    {
      long long v64 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v61 = 0u;
      uint64_t v34 = [v54 userInfo];
      id v35 = [v34 objectForKeyedSubscript:*MEMORY[0x1E4F19CD8]];
      uint64_t v36 = [v35 allValues];

      uint64_t v37 = [v36 countByEnumeratingWithState:&v61 objects:v77 count:16];
      if (v37)
      {
        uint64_t v38 = *(void *)v62;
        while (2)
        {
          for (uint64_t k = 0; k != v37; ++k)
          {
            if (*(void *)v62 != v38) {
              objc_enumerationMutation(v36);
            }
            double v40 = *(void **)(*((void *)&v61 + 1) + 8 * k);
            if ((CKCanRetryForError() & 1) == 0 && [v40 code] != 11)
            {
              if (IMOSLoggingEnabled())
              {
                uint64_t v44 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  double v74 = *(double *)&v40;
                  _os_log_impl(&dword_1D967A000, v44, OS_LOG_TYPE_INFO, "Found a fatal partial error: %@", buf, 0xCu);
                }
              }
              char v41 = 0;
              goto LABEL_52;
            }
          }
          uint64_t v37 = [v36 countByEnumeratingWithState:&v61 objects:v77 count:16];
          if (v37) {
            continue;
          }
          break;
        }
      }
      char v41 = 1;
LABEL_52:

      [*(id *)(a1 + 48) setAssetDownloadInProgress:0];
      if ((v41 & 1) == 0) {
        goto LABEL_61;
      }
      goto LABEL_55;
    }
    uint64_t v43 = [v54 code];
    if (!v24 || v43 == 11)
    {
      BOOL v45 = v43 != 11;
      [*(id *)(a1 + 48) setAssetDownloadInProgress:0];
      if (v45) {
        goto LABEL_61;
      }
      goto LABEL_55;
    }
  }
  else if ((v24 & 1) == 0)
  {
    [*(id *)(a1 + 48) setAssetDownloadInProgress:0];
    goto LABEL_61;
  }
  [*(id *)(a1 + 48) setAssetDownloadInProgress:0];
  if (++v23 >= 4) {
    goto LABEL_61;
  }
LABEL_56:
  if (IMOSLoggingEnabled())
  {
    id v46 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      double v74 = v27;
      _os_log_impl(&dword_1D967A000, v46, OS_LOG_TYPE_INFO, "Kicking off another asset download batch in %f seconds", buf, 0xCu);
    }
  }
  dispatch_time_t v47 = dispatch_time(0, (uint64_t)(v27 * 1000000000.0));
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D97043E4;
  block[3] = &unk_1E6B74868;
  uint64_t v48 = *(void **)(a1 + 56);
  void block[4] = *(void *)(a1 + 48);
  char v60 = *(unsigned char *)(a1 + 88);
  id v56 = v48;
  unint64_t v59 = v23;
  long long v52 = *(_OWORD *)(a1 + 64);
  id v49 = (id)v52;
  long long v58 = v52;
  id v57 = v7;
  dispatch_after(v47, MEMORY[0x1E4F14428], block);

LABEL_67:
}

uint64_t sub_1D97043E4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _attachmentDownloadCanStart:*(unsigned __int8 *)(a1 + 80) withActivity:*(void *)(a1 + 40)])
  {
    uint64_t v2 = *(void *)(a1 + 32);
    return MEMORY[0x1F4181798](v2, sel__downloadAttachmentAssetsWithActivity_restoringAttachments_retryCount_numAttachmentsDownloaded_completion_);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Attachment download can't start at this time, so stopping attachment sync", v5, 2u);
      }
    }
    uint64_t result = *(void *)(a1 + 56);
    if (result) {
      return (*(uint64_t (**)(uint64_t, void, void, void))(result + 16))(result, 0, *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 24), *(void *)(a1 + 48));
    }
  }
  return result;
}

uint64_t sub_1D9704600(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1D9704980(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97047C0);
  }
  _Unwind_Resume(a1);
}

void sub_1D9704F40(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a4;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v12 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Done downloading purged attachments for chat %@", buf, 0xCu);
    }
  }
  if (*(void *)(a1 + 40))
  {
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    v8[2] = sub_1D97050A8;
    v8[3] = &unk_1E6B73A10;
    id v10 = *(id *)(a1 + 40);
    id v9 = v5;
    dispatch_async(MEMORY[0x1E4F14428], v8);
  }
}

uint64_t sub_1D97050A8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1D97054CC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D970548CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97063D0(void *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9705EF0);
  }
  JUMPOUT(0x1D9706460);
}

uint64_t sub_1D970646C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D970647C(uint64_t a1)
{
}

uint64_t sub_1D9706484(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40) = [*(id *)(a1 + 32) _updateAttachmentGUIDIfNeededAndReturnTransfersToForceMarkAsSync:*(void *)(a1 + 40) transfersToSyncRowIDs:*(void *)(a1 + 48)];

  return MEMORY[0x1F41817F8]();
}

void sub_1D9706910(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97068A0);
  }
  _Unwind_Resume(a1);
}

void sub_1D970698C(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v19 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Got error %@ writing attachment records. Stopping further writes", buf, 0xCu);
      }
    }
    uint64_t v6 = *(void *)(a1 + 56);
    if (v6) {
      (*(void (**)(uint64_t, id))(v6 + 16))(v6, v3);
    }
  }
  else
  {
    if (v4)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "NO error writing attachment records.", buf, 2u);
      }
    }
    if (IMIsRunningInAutomation())
    {
      id v8 = [MEMORY[0x1E4F6E6E8] sharedInstance];
      objc_msgSend(v8, "addNewAttachmentsSyncedCount:", objc_msgSend(*(id *)(a1 + 32), "count"));
    }
    BOOL v9 = *(unsigned char *)(a1 + 64) == 0;
    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        uint64_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Kicking off another batch of attachments to write", buf, 2u);
        }
      }
      uint64_t v14 = *(void **)(a1 + 40);
      uint64_t v15 = *(void *)(a1 + 48);
      v16[0] = MEMORY[0x1E4F143A8];
      v16[1] = 3221225472;
      v16[2] = sub_1D9706C94;
      v16[3] = &unk_1E6B72C60;
      id v17 = *(id *)(a1 + 56);
      [v14 _kickOffWriteOnCKQueueWithActivity:v15 completion:v16];
    }
    else
    {
      if (v10)
      {
        id v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "** This was the last batch of attachment writes as the number of attachments to write up was less than max batch size Not writing more.", buf, 2u);
        }
      }
      uint64_t v12 = *(void *)(a1 + 56);
      if (v12) {
        (*(void (**)(uint64_t, void))(v12 + 16))(v12, 0);
      }
    }
  }
}

uint64_t sub_1D9706C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

uint64_t sub_1D9706CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(result + 16))(result, a3);
  }
  return result;
}

uint64_t sub_1D9707014(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processAssetFetchPerRecordProgressBlock_progress_);
}

uint64_t sub_1D9707020(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processAssetFetchPerRecordCompletionBlock_recordID_error_);
}

uint64_t sub_1D9707034(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processAssetFetchOperationCompletionBlock_removeTombstones_operationID_error_);
}

uint64_t sub_1D9707A38(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordChanged_);
}

void sub_1D9707A44(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  if (IMOSLoggingEnabled())
  {
    BOOL v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v10 = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "recordZoneChangeTokensUpdatedBlock should not get called", v10, 2u);
    }
  }
}

uint64_t sub_1D9707B08(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordDeletion_);
}

uint64_t sub_1D9707B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return [*(id *)(a1 + 32) _processRecordZoneFetchCompletion:a3 zoneID:a2 clientChangeTokenData:a4 moreComing:a5 shouldWriteBackChanges:*(unsigned __int8 *)(a1 + 88) desiredKeys:*(void *)(a1 + 56) syncType:*(void *)(a1 + 64) error:a6 currentBatchCount:*(void *)(a1 + 72) + 1 maxBatchCount:*(void *)(a1 + 80) activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D9707B6C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processFetchRecordChangesCompleted_completionBlock_);
}

uint64_t sub_1D9707E1C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processModifyPerRecordCallBack_error_);
}

uint64_t sub_1D9707E2C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processModifyRecordCompletion_deletedRecordIDs_error_completionBlock_);
}

void sub_1D9707FE8(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating attachment zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D9708328(uint64_t a1)
{
  id v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1D97083B8;
  v3[3] = &unk_1E6B74730;
  id v4 = *(id *)(a1 + 48);
  [v1 _writeAttachmentsToCloudKitWithActivity:v2 completionBlock:v3];
}

uint64_t sub_1D97083B8(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(result + 16))(result, a2 == 0, a2);
  }
  return result;
}

void sub_1D9708C3C(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 138412290;
      uint64_t v29 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Saving sync token %@", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 40) setLatestSyncToken:*(void *)(a1 + 32) forSyncType:*(void *)(a1 + 64)];
  if (*(void *)(a1 + 64))
  {
    [*(id *)(a1 + 40) _kickOffAssetFetchForTransfersIfNeededWithActivity:*(void *)(a1 + 48)];
    if (*(unsigned char *)(a1 + 96))
    {
      if (IMOSLoggingEnabled())
      {
        id v4 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Kicking off another fetch of attachments", buf, 2u);
        }
      }
      [*(id *)(a1 + 40) syncBatchCompleted:*(void *)(a1 + 80)];
      [*(id *)(a1 + 40) _fetchAttachmentZoneChangesShouldWriteBackChanges:*(unsigned __int8 *)(a1 + 97) desiredKeys:*(void *)(a1 + 72) syncType:*(void *)(a1 + 64) currentBatchCount:*(void *)(a1 + 80) maxBatchCount:*(void *)(a1 + 88) syncToken:*(void *)(a1 + 32) activity:*(void *)(a1 + 48) completionBlock:*(void *)(a1 + 56)];
    }
    else
    {
      BOOL v8 = *(unsigned char *)(a1 + 97) == 0;
      int v9 = IMOSLoggingEnabled();
      if (v8)
      {
        if (v9)
        {
          uint64_t v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "No more attachments to pull down. Should write back changes was no *****", buf, 2u);
          }
        }
        uint64_t v15 = [*(id *)(a1 + 40) ckQueue];
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        void v17[2] = sub_1D97091A4;
        v17[3] = &unk_1E6B731C8;
        id v18 = *(id *)(a1 + 56);
        dispatch_async(v15, v17);
      }
      else
      {
        if (v9)
        {
          int v10 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "No more attachments to pull down. Setting IMCKFinishedFetchingAttachmentsFromCloudKit and kicking off a write", buf, 2u);
          }
        }
        id v11 = [MEMORY[0x1E4F6E720] sharedInstance];
        [v11 setBool:1 forDomain:*MEMORY[0x1E4F6CF00] forKey:*MEMORY[0x1E4F6CC58]];

        [*(id *)(a1 + 40) _kickOffWriteIfNeededForSyncType:*(void *)(a1 + 64) activity:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
      }
    }
  }
  else if (*(unsigned char *)(a1 + 96))
  {
    id v5 = [*(id *)(a1 + 40) ckQueue];
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D9709148;
    block[3] = &unk_1E6B74AD8;
    char v27 = *(unsigned char *)(a1 + 97);
    long long v6 = *(_OWORD *)(a1 + 80);
    int8x16_t v25 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
    long long v26 = v6;
    int8x16_t v16 = *(int8x16_t *)(a1 + 32);
    id v7 = (id)v16.i64[0];
    int8x16_t v22 = vextq_s8(v16, v16, 8uLL);
    id v23 = *(id *)(a1 + 48);
    id v24 = *(id *)(a1 + 56);
    dispatch_async(v5, block);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Done fetching attachments in initial fetch", buf, 2u);
      }
    }
    uint64_t v13 = [*(id *)(a1 + 40) ckQueue];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1D9709184;
    v19[3] = &unk_1E6B731C8;
    id v20 = *(id *)(a1 + 56);
    dispatch_async(v13, v19);
  }
}

uint64_t sub_1D9709148(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchAttachmentZoneChangesShouldWriteBackChanges:*(unsigned __int8 *)(a1 + 96) desiredKeys:*(void *)(a1 + 64) syncType:*(void *)(a1 + 72) currentBatchCount:*(void *)(a1 + 80) maxBatchCount:*(void *)(a1 + 88) syncToken:*(void *)(a1 + 40) activity:*(void *)(a1 + 48) completionBlock:*(void *)(a1 + 56)];
}

uint64_t sub_1D9709184(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

uint64_t sub_1D97091A4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t, void))(result + 16))(result, 1, 0);
  }
  return result;
}

void sub_1D97091C4(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _attachmentZoneCreated])
  {
    [*(id *)(a1 + 32) _fetchAttachmentZoneChangesShouldWriteBackChanges:*(unsigned __int8 *)(a1 + 88) desiredKeys:*(void *)(a1 + 56) syncType:*(void *)(a1 + 64) currentBatchCount:*(void *)(a1 + 72) maxBatchCount:*(void *)(a1 + 80) syncToken:0 activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 48)];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "****** Failed creating attachment zone", buf, 2u);
      }
    }
    uint64_t v3 = *(void *)(a1 + 48);
    id v4 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1E8] code:1 userInfo:0];
    (*(void (**)(uint64_t, void, void *))(v3 + 16))(v3, 0, v4);
  }
}

uint64_t sub_1D9709AC0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

uint64_t sub_1D9709AD0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateTransferUsingCKRecord:*(void *)(a1 + 40) wasFetched:0 dispatchToMain:1];
}

uint64_t sub_1D9709AE4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

void sub_1D9709AF4(id *a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a1[4] recordID];
  uint64_t v3 = [v2 recordName];
  id v4 = [a1[5] recordID];
  id v5 = [v4 recordName];
  int v6 = [v3 isEqualToString:v5];

  if (v6)
  {
    id v7 = [MEMORY[0x1E4F6E780] transferGUIDOfRecord:a1[4]];
    BOOL v8 = [MEMORY[0x1E4F6E780] transferGUIDOfRecord:a1[5]];
    int v9 = [v7 isEqualToString:v8];
    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        id v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v18) = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Server's GUID was different than we expected; aligning with the server's data",
            (uint8_t *)&v18,
            2u);
        }
      }
      [a1[6] _updateTransferUsingCKRecord:a1[5] wasFetched:0 dispatchToMain:1];
    }
    else
    {
      if (v10)
      {
        id v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          int v18 = 138412546;
          id v19 = v8;
          __int16 v20 = 2112;
          unint64_t v21 = v7;
          _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "On conflict, the server record's GUID (%@) was different than the record we tried to update with GUID (%@); "
            "marking local attachment as synced, to skip it",
            (uint8_t *)&v18,
            0x16u);
        }
      }
      [a1[6] _markAttachmentWithROWID:IMDAttachmentRecordRowIDForGUID() withSyncState:1];
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = [a1[5] recordID];
        uint64_t v14 = [v13 recordName];
        uint64_t v15 = [a1[4] recordID];
        int8x16_t v16 = [v15 recordName];
        int v18 = 138412546;
        id v19 = v14;
        __int16 v20 = 2112;
        unint64_t v21 = v16;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Conflicting serverRecord was different than the one being updated (server: %@, local: %@)", (uint8_t *)&v18, 0x16u);
      }
    }
    [a1[6] _resetAttachmentSyncStateForRecord:a1[4] toState:2];
  }
}

uint64_t sub_1D9709DF0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__markTransferAsNotBeingAbleToSyncUsingCKRecord_);
}

uint64_t sub_1D9709DFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAttachmentSyncStateForRecord:*(void *)(a1 + 40) toState:2];
}

uint64_t sub_1D9709E0C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _resetAttachmentSyncStateForRecord:*(void *)(a1 + 40) toState:0];
}

uint64_t sub_1D9709E1C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__markTransferAsNotBeingAbleToSyncUsingCKRecord_);
}

uint64_t sub_1D9709FE0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1D970A2D0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_countRecordOnRead_didSucceed_);
}

uint64_t sub_1D970A2E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateTransferUsingCKRecord:*(void *)(a1 + 40) wasFetched:1 dispatchToMain:1];
}

uint64_t sub_1D970A49C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLatestSyncToken:*(void *)(a1 + 40) forSyncType:*(void *)(a1 + 48)];
}

uint64_t sub_1D970A86C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1D970A984(uint64_t a1)
{
  float v1 = *(double *)(a1 + 48);
  return (*(uint64_t (**)(void, void, void, void, float))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32), 0, 0, v1);
}

uint64_t sub_1D970ABDC(void *a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void, float))(a1[6] + 16))(a1[6], a1[4], 1, a1[5], 100.0);
}

void sub_1D970AD58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D970AD70(uint64_t a1)
{
  uint64_t v82 = *MEMORY[0x1E4F143B8];
  uint64_t v70 = 0;
  long long v71 = &v70;
  uint64_t v72 = 0x3032000000;
  id v73 = sub_1D970646C;
  double v74 = sub_1D970647C;
  id v75 = 0;
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      *(_DWORD *)buf = 138412290;
      char v77 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Attachment batch fetch complete with error %@", buf, 0xCu);
    }
  }
  id v4 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v4)
  {
    if ([v4 code] != 2) {
      goto LABEL_56;
    }
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  }
  else
  {
    uint64_t v5 = 0;
  }
  int v6 = (void *)[*(id *)(a1 + 32) _recordsToProcessWithError:*(void *)(a1 + 40) error:v5];
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      char v77 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Attachments to process %@", buf, 0xCu);
    }
  }
  id v52 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  id obj = v6;
  uint64_t v8 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v67;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v67 != v9) {
          objc_enumerationMutation(obj);
        }
        id v11 = *(void **)(*((void *)&v66 + 1) + 8 * i);
        uint64_t v12 = [*(id *)(a1 + 32) recordIDToTransferMap];
        uint64_t v13 = [v11 recordID];
        uint64_t v14 = [v12 objectForKey:v13];

        if (v14)
        {
          block[0] = MEMORY[0x1E4F143A8];
          block[1] = 3221225472;
          block[2] = sub_1D970B6B0;
          block[3] = &unk_1E6B74B78;
          void block[4] = v11;
          id v62 = v14;
          id v15 = *(id *)(a1 + 40);
          uint64_t v16 = *(void *)(a1 + 56);
          id v63 = v15;
          uint64_t v64 = v16;
          long long v65 = &v70;
          dispatch_sync(MEMORY[0x1E4F14428], block);
        }
        else if (IMOSLoggingEnabled())
        {
          id v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            int v18 = [v11 recordID];
            *(_DWORD *)buf = 138412290;
            char v77 = v18;
            _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Can't find transfer in pre-transfer map, for a CKRecord we fetched an asset for, recordID %@. CAN'T UPDATE!", buf, 0xCu);
          }
        }
        id v19 = [*(id *)(a1 + 32) recordIDToTransferMap];
        __int16 v20 = [v11 recordID];
        [v19 removeObjectForKey:v20];

        [MEMORY[0x1E4F6E780] cleanUpAssetsOnDiskForRecord:v11];
        if (*(unsigned char *)(a1 + 64))
        {
          unint64_t v21 = [v11 recordID];
          uint64_t v22 = [v21 recordName];
          [v52 addObject:v22];
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v66 objects:v81 count:16];
    }
    while (v8);
  }

  if (*(unsigned char *)(a1 + 64))
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40))
    {
      id v23 = [*(id *)(a1 + 32) errorAnalyzer];
      id v24 = [v23 extractRecordIDsNotFoundFromCKPartialError:*(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40)];

      [v52 addObjectsFromArray:v24];
    }
    IMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs();
  }
  int8x16_t v25 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  if (v25)
  {
    long long v26 = [v25 userInfo];
    uint64_t v50 = [v26 objectForKey:*MEMORY[0x1E4F19CD8]];

    if ([v50 count])
    {
      if (!v71[5])
      {
        id v27 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
        long long v28 = (void *)v71[5];
        v71[5] = (uint64_t)v27;
      }
      long long v59 = 0u;
      long long v60 = 0u;
      long long v57 = 0u;
      long long v58 = 0u;
      uint64_t v29 = [v50 allKeys];
      uint64_t v30 = [v29 countByEnumeratingWithState:&v57 objects:v80 count:16];
      if (v30)
      {
        uint64_t v31 = *(void *)v58;
        do
        {
          for (uint64_t j = 0; j != v30; ++j)
          {
            if (*(void *)v58 != v31) {
              objc_enumerationMutation(v29);
            }
            double v33 = *(void **)(*((void *)&v57 + 1) + 8 * j);
            uint64_t v34 = [*(id *)(a1 + 32) recordIDToTransferMap];
            id v35 = [v34 objectForKey:v33];

            if (IMOSLoggingEnabled())
            {
              uint64_t v36 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
              {
                uint64_t v37 = [v35 guid];
                *(_DWORD *)buf = 138412290;
                char v77 = v37;
                _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "We failed to fetch asset from CloudKit -- failing the transfer: %@", buf, 0xCu);
              }
            }
            if (v35)
            {
              [v35 _setFetchOptions:0];
              uint64_t v38 = +[IMDFileTransferCenter sharedInstance];
              [v38 updateTransferAsWaitingForAccept:v35];

              [(id)v71[5] addObject:v35];
              __int16 v39 = [*(id *)(a1 + 32) recordIDToTransferMap];
              [v39 removeObjectForKey:v33];
            }
            else if (IMOSLoggingEnabled())
            {
              double v40 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
              {
                uint64_t v41 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
                *(_DWORD *)buf = 138412546;
                char v77 = v33;
                __int16 v78 = 2112;
                uint64_t v79 = v41;
                _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Can't find transfer in pre-transfer map, for a CKRecord we failed to fetch asset for, recordID %@, error %@", buf, 0x16u);
              }
            }
            BOOL v42 = [*(id *)(a1 + 40) objectForKeyedSubscript:v33];
            [MEMORY[0x1E4F6E780] cleanUpAssetsOnDiskForRecord:v42];
          }
          uint64_t v30 = [v29 countByEnumeratingWithState:&v57 objects:v80 count:16];
        }
        while (v30);
      }

      uint64_t v43 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1E8] code:5 userInfo:0];
      uint64_t v44 = [MEMORY[0x1E4F6E890] sharedInstance];
      [v44 autoBugCaptureWithSubType:qword_1EA8C7128 errorPayload:v43];
    }
  }

LABEL_56:
  BOOL v45 = [*(id *)(a1 + 32) completionBlocksForAssetFetchOperations];
  id v46 = [v45 objectForKey:*(void *)(a1 + 48)];

  if (v46)
  {
    v53[0] = MEMORY[0x1E4F143A8];
    v53[1] = 3221225472;
    v53[2] = sub_1D970B9B0;
    v53[3] = &unk_1E6B74BA0;
    id v47 = v46;
    uint64_t v48 = *(void *)(a1 + 56);
    id v54 = v47;
    uint64_t v55 = v48;
    id v56 = &v70;
    dispatch_sync(MEMORY[0x1E4F14428], v53);
    id v49 = [*(id *)(a1 + 32) completionBlocksForAssetFetchOperations];
    [v49 removeObjectForKey:*(void *)(a1 + 48)];
  }
  _Block_object_dispose(&v70, 8);
}

void sub_1D970B6B0(uint64_t a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [*(id *)(a1 + 32) objectForKey:@"lqa"];
  uint64_t v3 = v2;
  if (v2
    && ([v2 fileURL],
        id v4 = objc_claimAutoreleasedReturnValue(),
        [v4 path],
        uint64_t v5 = objc_claimAutoreleasedReturnValue(),
        uint64_t v6 = [v5 length],
        v5,
        v4,
        v6))
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 40);
        int v25 = 138412290;
        uint64_t v26 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finalizing asset download for transfer %@", (uint8_t *)&v25, 0xCu);
      }
    }
    [*(id *)(a1 + 40) moveAssetFromRecord:*(void *)(a1 + 32)];
    [*(id *)(a1 + 40) _setFetchOptions:0];
    uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
    int v10 = [*(id *)(a1 + 40) guid];
    [v9 endTransfer:v10];

    if ([*(id *)(a1 + 48) count])
    {
      id v11 = +[IMDFileTransferCenter sharedInstance];
      uint64_t v12 = [*(id *)(a1 + 40) guid];
      [v11 removeTransferForGUID:v12];
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = *(void *)(a1 + 40);
        int v25 = 138412290;
        uint64_t v26 = v14;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Asset not found in record, must not be synced to the cloud transfer %@", (uint8_t *)&v25, 0xCu);
      }
    }
    id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v16 = [v15 initWithDomain:*MEMORY[0x1E4F6D1E8] code:6 userInfo:0];
    uint64_t v17 = *(void *)(*(void *)(a1 + 56) + 8);
    int v18 = *(void **)(v17 + 40);
    *(void *)(v17 + 40) = v16;

    id v19 = +[IMDFileTransferCenter sharedInstance];
    __int16 v20 = [*(id *)(a1 + 40) guid];
    [v19 failTransfer:v20 reason:29];

    unint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    if (!v21)
    {
      id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v23 = *(void *)(*(void *)(a1 + 64) + 8);
      id v24 = *(void **)(v23 + 40);
      *(void *)(v23 + 40) = v22;

      unint64_t v21 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    }
    [v21 addObject:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1D970B9B0(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[4] + 16))(a1[4], *(void *)(*(void *)(a1[5] + 8) + 40), *(void *)(*(void *)(a1[6] + 8) + 40));
}

void sub_1D970C07C(uint64_t a1)
{
  uint64_t v2 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v3 = [v2 updateTransfersWithCKRecord:*(void *)(a1 + 32) recordWasFetched:*(unsigned __int8 *)(a1 + 64) downloadAsset:*(void *)(*(void *)(a1 + 56) + 8) + 24];
  uint64_t v4 = [v3 copy];
  uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  if (*(unsigned char *)(a1 + 64) && [*(id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) length])
  {
    id v7 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
    [v7 _removeTransferFromiCloudBackupWithGuid:v8];
  }
}

void sub_1D970C1F4(uint64_t a1)
{
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v3 = [*(id *)(a1 + 32) downloadAssetsForTransferGUIDs];
  uint64_t v6 = MEMORY[0x1E4F143A8];
  uint64_t v7 = 3221225472;
  uint64_t v8 = sub_1D970C2F4;
  uint64_t v9 = &unk_1E6B74C18;
  uint64_t v10 = *(void *)(a1 + 32);
  id v11 = v2;
  id v4 = v2;
  [v3 enumerateObjectsUsingBlock:&v6];

  objc_msgSend(*(id *)(a1 + 32), "fetchAttachmentDataForTransfers:highQuality:perTransferProgress:activity:completion:", v4, 0, &unk_1F3390D00, *(void *)(a1 + 40), 0, v6, v7, v8, v9, v10);
  uint64_t v5 = [*(id *)(a1 + 32) downloadAssetsForTransferGUIDs];
  [v5 removeAllObjects];

  [*(id *)(a1 + 32) setDownloadAssetsForTransferGUIDs:0];
}

void sub_1D970C2F4(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [*(id *)(a1 + 32) fileTransferCenter];
  uint64_t v5 = [v4 transferForGUID:v3];

  if (v5)
  {
    [*(id *)(a1 + 40) addObject:v5];
    uint64_t v6 = [*(id *)(a1 + 32) fileTransferCenter];
    uint64_t v7 = [v5 localPath];
    [v6 acceptTransfer:v3 path:v7];
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v9 = 138412290;
      id v10 = v3;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "** No IMFileTransfer found for GUID %@", (uint8_t *)&v9, 0xCu);
    }
  }
}

void sub_1D970C448(float a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a5;
  unint64_t v9 = [v7 totalBytes];
  if (IMOSLoggingEnabled())
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = [v7 guid];
      int v15 = 138412802;
      uint64_t v16 = v11;
      __int16 v17 = 2048;
      double v18 = a1;
      __int16 v19 = 2048;
      unint64_t v20 = v9;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Transfer %@ - %f complete of %llu bytes", (uint8_t *)&v15, 0x20u);
    }
  }
  if ((float)((float)v9 * a1) >= (float)v9) {
    float v12 = (float)v9;
  }
  else {
    float v12 = (float)v9 * a1;
  }
  uint64_t v13 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v14 = [v7 guid];
  [v13 updateTransfer:v14 currentBytes:(unint64_t)v12 totalBytes:v9];
}

void sub_1D970C674(uint64_t a1)
{
  id v2 = +[IMDFileTransferCenter sharedInstance];
  [v2 markTransferAsNotSyncedSuccessfully:*(void *)(a1 + 32)];
}

void sub_1D970C770(uint64_t a1)
{
  id v2 = +[IMDFileTransferCenter sharedInstance];
  [v2 markTransferAsNotSyncedSuccessfully:*(void *)(a1 + 32)];
}

void sub_1D970C860(uint64_t a1)
{
  id v2 = +[IMDFileTransferCenter sharedInstance];
  [v2 resetSyncStateForRecord:*(void *)(a1 + 32) toState:*(void *)(a1 + 40)];
}

uint64_t sub_1D970CAA4(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordZoneManager];
  [v2 deleteAttachmentZone];

  id v3 = *(void **)(a1 + 32);

  return [v3 clearLocalSyncState:3];
}

void sub_1D970CDE0(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F1CA48] array];
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  char v15 = *(unsigned char *)(a1 + 64);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D970CF14;
  v7[3] = &unk_1E6B74CD8;
  id v3 = *(void **)(a1 + 32);
  id v8 = *(id *)(a1 + 40);
  uint64_t v13 = v14;
  id v9 = *(id *)(a1 + 32);
  id v4 = *(id *)(a1 + 56);
  uint64_t v5 = *(void *)(a1 + 48);
  id v12 = v4;
  uint64_t v10 = v5;
  id v6 = v2;
  id v11 = v6;
  [v3 enumerateObjectsUsingBlock:v7];

  _Block_object_dispose(v14, 8);
}

void sub_1D970CEFC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1D970CF14(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = [v5 recordID];
  id v7 = [v6 recordName];

  id v8 = [*(id *)(a1 + 32) objectForKey:v7];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D970D064;
  block[3] = &unk_1E6B74CB0;
  id v14 = v8;
  id v15 = v7;
  uint64_t v21 = *(void *)(a1 + 72);
  uint64_t v22 = a3;
  id v16 = *(id *)(a1 + 40);
  id v20 = *(id *)(a1 + 64);
  id v9 = *(void **)(a1 + 56);
  uint64_t v17 = *(void *)(a1 + 48);
  id v18 = v5;
  id v19 = v9;
  id v10 = v5;
  id v11 = v7;
  id v12 = v8;
  dispatch_sync(MEMORY[0x1E4F14428], block);
}

void sub_1D970D064(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2)
  {
    id v3 = *(void **)(a1 + 56);
    uint64_t v4 = *(void *)(a1 + 64);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = sub_1D970D34C;
    v17[3] = &unk_1E6B74C88;
    id v18 = *(id *)(a1 + 72);
    id v5 = *(id *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 96);
    id v19 = v5;
    uint64_t v22 = v6;
    uint64_t v23 = v7;
    id v20 = *(id *)(a1 + 48);
    id v21 = *(id *)(a1 + 80);
    [v3 _validateTransferFromCloudKit:v4 localTransfer:v2 validateCompletion:v17];

    id v8 = v18;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = [*(id *)(a1 + 32) guid];
        uint64_t v11 = *(void *)(a1 + 40);
        *(_DWORD *)buf = 138412546;
        int v25 = v10;
        __int16 v26 = 2112;
        uint64_t v27 = v11;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "We fetched a record that we didn't try to fetch!! we wanted (guid %@) for recordName: %@", buf, 0x16u);
      }
    }
    id v8 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1E8] code:2 userInfo:0];
    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24))
    {
      id v12 = [MEMORY[0x1E4F6E890] sharedInstance];
      [v12 autoBugCaptureWithSubType:IMDCKCacheDeleteAutoCaptureSubtype errorPayload:v8];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = 1;
    }
    uint64_t v13 = [MEMORY[0x1E4F6E890] sharedInstance];
    id v14 = [v8 domain];
    id v15 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v8, "code"));
    [v13 metricAttachmentValidation:0 attachmentSize:0 operationalErrorDomain:0 operationalErrorCode:0 validationErrorDomain:v14 validationErrorCode:v15];

    uint64_t v16 = *(void *)(a1 + 96);
    if (v16 == [*(id *)(a1 + 48) count] - 1) {
      (*(void (**)(void))(*(void *)(a1 + 80) + 16))();
    }
  }
}

void sub_1D970D34C(uint64_t a1, int a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5 || !a2)
  {
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = [*(id *)(a1 + 40) guid];
        int v20 = 138412290;
        id v21 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "We failed to validate that we can delete transfer with guid: %@", (uint8_t *)&v20, 0xCu);
      }
    }
    id v12 = [MEMORY[0x1E4F6E890] sharedInstance];
    uint64_t v13 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "totalBytes"));
    id v14 = [v5 domain];
    id v15 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v5, "code"));
    [v12 metricAttachmentValidation:0 attachmentSize:v13 operationalErrorDomain:0 operationalErrorCode:0 validationErrorDomain:v14 validationErrorCode:v15];

    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24))
    {
      uint64_t v16 = [MEMORY[0x1E4F6E890] sharedInstance];
      [v16 autoBugCaptureWithSubType:IMDCKCacheDeleteAutoCaptureSubtype errorPayload:v5];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = 1;
    }
  }
  else
  {
    [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [*(id *)(a1 + 40) guid];
        int v20 = 138412290;
        id v21 = v7;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "We successfully fetched and validated that we can delete the transfer with guid: %@", (uint8_t *)&v20, 0xCu);
      }
    }
    id v8 = [MEMORY[0x1E4F6E890] sharedInstance];
    id v9 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(*(id *)(a1 + 40), "totalBytes"));
    [v8 metricAttachmentValidation:1 attachmentSize:v9 operationalErrorDomain:0 operationalErrorCode:0 validationErrorDomain:0 validationErrorCode:0];
  }
  uint64_t v17 = *(void *)(a1 + 72);
  if (v17 == [*(id *)(a1 + 48) count] - 1)
  {
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        id v19 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 32), "count"));
        int v20 = 138412290;
        id v21 = v19;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "We got to the last object in the array so we will call our completion block with transfers to delete count: %@", (uint8_t *)&v20, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D970D6BC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D970D4E8);
  }
  _Unwind_Resume(a1);
}

void sub_1D970D8A4(uint64_t a1)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      uint64_t v2 = [*(id *)(a1 + 32) count];
      uint64_t v3 = *(void *)(a1 + 32);
      *(_DWORD *)buf = 134218242;
      *(void *)&uint8_t buf[4] = v2;
      *(_WORD *)&buf[12] = 2112;
      *(void *)&buf[14] = v3;
      _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "Validating %lu attachment downloads %@", buf, 0x16u);
    }
  }
  id v22 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v30 objects:v36 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v31;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v31 != v7) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(void **)(*((void *)&v30 + 1) + 8 * i);
        id v10 = [v9 ckRecordIDFromExistingMetadata];
        if (v10)
        {
          [v22 addObject:v10];
          uint64_t v11 = [v10 recordName];
          [v4 setObject:v9 forKey:v11];

          if (!IMOSLoggingEnabled()) {
            goto LABEL_19;
          }
          id v12 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            id v13 = [v9 guid];
            id v14 = [v10 recordName];
            *(_DWORD *)buf = 138412546;
            *(void *)&uint8_t buf[4] = v13;
            *(_WORD *)&buf[12] = 2112;
            *(void *)&buf[14] = v14;
            _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Adding transfer to fetch: %@ with record name: %@", buf, 0x16u);
          }
        }
        else
        {
          if (!IMOSLoggingEnabled()) {
            goto LABEL_19;
          }
          id v12 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v9;
            _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Couldn't retrieve CKRecordID from file transfer %@", buf, 0xCu);
          }
        }

LABEL_19:
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v30 objects:v36 count:16];
    }
    while (v6);
  }

  id v15 = [*(id *)(a1 + 40) _attachmentZoneID];

  if (v15)
  {
    if ([*(id *)(a1 + 40) isDoingDeleteRecoverySync])
    {
      uint64_t v16 = [@"AttachmentSync" stringByAppendingString:@"-DRR"];
    }
    else
    {
      uint64_t v16 = @"AttachmentSync";
    }
    id v18 = [*(id *)(a1 + 40) CKOperationFactory];
    id v19 = [v18 fetchAttachmentZoneRecords:v22 desiredKeys:1 operationGroupName:v16 activity:*(void *)(a1 + 48)];

    *(void *)buf = 0;
    *(void *)&buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x2020000000;
    char v35 = *(unsigned char *)(a1 + 64);
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    v27[2] = sub_1D970DE5C;
    v27[3] = &unk_1E6B74D28;
    id v20 = v4;
    id v28 = v20;
    uint64_t v29 = buf;
    [v19 setPerRecordCompletionBlock:v27];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = sub_1D970E0D0;
    v23[3] = &unk_1E6B74D78;
    uint64_t v23[4] = *(void *)(a1 + 40);
    id v24 = v20;
    __int16 v26 = buf;
    id v25 = *(id *)(a1 + 56);
    [v19 setFetchRecordsCompletionBlock:v23];
    [*(id *)(a1 + 40) _scheduleOperation:v19];

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Attachment zone ID is nil", buf, 2u);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D970DE5C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  id v10 = v9;
  if (v9 && [v9 code] != 2)
  {
    uint64_t v11 = *(void **)(a1 + 32);
    id v12 = [v8 recordName];
    id v13 = [v11 objectForKey:v12];

    if (IMOSLoggingEnabled())
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = [v8 recordName];
        int v21 = 138412802;
        id v22 = v15;
        __int16 v23 = 2112;
        id v24 = v10;
        __int16 v25 = 2112;
        __int16 v26 = v13;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "We got an error back from CloudKit trying to fetch recordID: %@ with error: %@ transfer: %@", (uint8_t *)&v21, 0x20u);
      }
    }
    if (v13)
    {
      uint64_t v16 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v13, "totalBytes"));
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v17 = [MEMORY[0x1E4F6E890] sharedInstance];
    id v18 = [v10 domain];
    id v19 = objc_msgSend(NSNumber, "numberWithLong:", objc_msgSend(v10, "code"));
    [v17 metricAttachmentValidation:0 attachmentSize:v16 operationalErrorDomain:v18 operationalErrorCode:v19 validationErrorDomain:0 validationErrorCode:0];

    if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
    {
      id v20 = [MEMORY[0x1E4F6E890] sharedInstance];
      [v20 autoBugCaptureWithSubType:IMDCKCacheDeleteAutoCaptureSubtype errorPayload:v10];

      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
}

void sub_1D970E0D0(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [a2 allValues];
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 56) + 8) + 24);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D970E19C;
  v7[3] = &unk_1E6B74D50;
  uint64_t v6 = *(void *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  [v3 _processAndValidateAttachmentRecordsEligibleForPurge:v4 recordIDsToTransfers:v6 capturedWithABC:v5 completion:v7];
}

uint64_t sub_1D970E19C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D970E828(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1D970E904;
  v11[3] = &unk_1E6B731A0;
  id v12 = v6;
  id v13 = v7;
  id v8 = *(void **)(a1 + 40);
  uint64_t v14 = *(void *)(a1 + 32);
  id v15 = v8;
  id v9 = v7;
  id v10 = v6;
  dispatch_sync(MEMORY[0x1E4F14428], v11);
}

void sub_1D970E904(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v10 = 138412290;
      uint64_t v11 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Deleting attachment operation deletedRecordIDs %@", (uint8_t *)&v10, 0xCu);
    }
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "__imArrayByApplyingBlock:", &unk_1F3390D20);
  [v4 addObjectsFromArray:v5];

  if (*(void *)(a1 + 40))
  {
    id v6 = [*(id *)(a1 + 48) errorAnalyzer];
    id v7 = [v6 extractRecordIDsDeletedFromCKPartialError:*(void *)(a1 + 40)];

    if ([v7 count])
    {
      if (IMOSLoggingEnabled())
      {
        id v8 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        {
          LOWORD(v10) = 0;
          _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Adding additional deleted record IDs from error", (uint8_t *)&v10, 2u);
        }
      }
      [v4 addObjectsFromArray:v7];
    }
  }
  IMDAttachmentRecordDeleteTombStonedAttachmentsWithRecordIDs();
  uint64_t v9 = *(void *)(a1 + 56);
  if (v9) {
    (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(void *)(a1 + 40));
  }
}

uint64_t sub_1D970EAE8(uint64_t a1, void *a2)
{
  return [a2 recordName];
}

uint64_t sub_1D970F03C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D970F054(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (void *)[*(id *)(a1 + 40) copy];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  v6[2] = sub_1D970F12C;
  v6[3] = &unk_1E6B74E08;
  id v4 = *(id *)(a1 + 64);
  uint64_t v5 = *(void *)(a1 + 32);
  id v9 = v4;
  void v6[4] = v5;
  id v7 = *(id *)(a1 + 48);
  id v8 = *(id *)(a1 + 56);
  [v2 _deleteAttachmentsWithRecordIDs:v3 completion:v6];
}

void sub_1D970F12C(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v19 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "********* Error while deleting attachments %@", buf, 0xCu);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Rate limited while deleting", buf, 2u);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D970F3A8;
    block[3] = &unk_1E6B73A10;
    id v17 = *(id *)(a1 + 56);
    id v16 = v3;
    dispatch_async(MEMORY[0x1E4F14428], block);

    id v6 = &v17;
  }
  else
  {
    id v7 = *(void **)(a1 + 32);
    id v8 = (void *)[*(id *)(a1 + 40) copy];
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    v12[2] = sub_1D970F3CC;
    uint64_t v12[3] = &unk_1E6B74DE0;
    uint64_t v9 = *(void *)(a1 + 48);
    id v10 = *(id *)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 32);
    id v14 = v10;
    void v12[4] = v11;
    id v13 = *(id *)(a1 + 48);
    [v7 _fetchAttachmentZoneRecords:v8 desiredKeys:1 ognSuffix:@"DeleteRecovery" removeTombstones:1 activity:v9 completion:v12];

    id v6 = &v14;
  }
}

uint64_t sub_1D970F3A8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

void sub_1D970F3CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v7)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v18 = v5;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "********* Error while fetching non-orphaned deleted attachments %@", buf, 0xCu);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D970F628;
    block[3] = &unk_1E6B73A10;
    id v16 = *(id *)(a1 + 48);
    id v15 = v5;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    if (v7)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Kicking off another batch delete to cloudKit", buf, 2u);
      }
    }
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1D970F64C;
    v11[3] = &unk_1E6B73A60;
    id v10 = *(void **)(a1 + 40);
    void v11[4] = *(void *)(a1 + 32);
    id v12 = v10;
    id v13 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E4F14428], v11);
  }
}

uint64_t sub_1D970F628(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1D970F64C(uint64_t a1)
{
  return [*(id *)(a1 + 32) syncAttachmentDeletesToCloudKitWithActivity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t sub_1D9710118(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = a2;
  id v4 = [v2 toIdentifier];
  int v5 = [v3 isEqualToString:v4];

  return v5 ^ 1u;
}

uint64_t sub_1D97104EC()
{
  qword_1EBE2BA58 = (uint64_t)os_log_create("com.apple.Messages", "IMDCKSyncState");

  return MEMORY[0x1F41817F8]();
}

void sub_1D971297C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9712994(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D97129A4(uint64_t a1)
{
}

uint64_t sub_1D97129AC(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      v8[0] = 67109120;
      v8[1] = a2;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Received PCSReportManateeStatus from PCS %u", (uint8_t *)v8, 8u);
    }
  }
  int v5 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  id v6 = [NSNumber numberWithUnsignedInt:a2];
  [v5 setObject:v6 forKey:@"pcsStatus"];

  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void))(result + 16))(result, *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40));
  }
  return result;
}

void sub_1D9712E98(_Unwind_Exception *a1)
{
}

void sub_1D9712EB8(void *a1)
{
}

void sub_1D9712FF4(_Unwind_Exception *a1)
{
}

void sub_1D9713014(void *a1)
{
}

void sub_1D9713134(_Unwind_Exception *a1)
{
}

void sub_1D9713154(void *a1)
{
}

void sub_1D971321C(_Unwind_Exception *a1)
{
}

void sub_1D971323C(void *a1)
{
}

void sub_1D9713388(_Unwind_Exception *a1)
{
}

void sub_1D97133B4(void *exc_buf, int a2)
{
  if (a2)
  {
    objc_begin_catch(exc_buf);
    JUMPOUT(0x1D9713340);
  }
  JUMPOUT(0x1D97133ACLL);
}

void sub_1D9713D38(uint64_t a1, void *a2, void *a3)
{
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v47 = a3;
  if (v5
    && ([MEMORY[0x1E4F28CB8] defaultManager],
        id v6 = objc_claimAutoreleasedReturnValue(),
        int v7 = [v6 fileExistsAtPath:v5 isDirectory:0],
        v6,
        v7))
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v61 = v5;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Sticker found in cache %@", buf, 0xCu);
      }
    }
    uint64_t v9 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v5];
    [*(id *)(a1 + 32) setUserInfo:0];
    if (v9
      && ([MEMORY[0x1E4F28CB8] defaultManager],
          id v10 = objc_claimAutoreleasedReturnValue(),
          [v9 path],
          uint64_t v11 = objc_claimAutoreleasedReturnValue(),
          int v12 = [v10 fileExistsAtPath:v11],
          v11,
          v10,
          v12))
    {
      if (IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v61 = v5;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Adding gatekeeper properties to: %@", buf, 0xCu);
        }
      }
      id v14 = +[IMDFileTransferCenter sharedInstance];
      [v14 addDefaultGatekeeperPropertiesToDirectory:v5];

      [*(id *)(a1 + 32) _setLocalURL:v9];
      if (IMOSLoggingEnabled())
      {
        id v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v61 = v9;
          _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", buf, 0xCu);
        }
      }
      id v16 = +[IMDMessageStore sharedInstance];
      id v17 = [*(id *)(a1 + 32) messageGUID];
      id v18 = [v16 messageWithGUID:v17];

      uint64_t v19 = [MEMORY[0x1E4F6E6C8] sharedManager];
      objc_msgSend(v19, "checkExistingAttachmentSensitivityIfNeededFor:attachmentURL:isFromMe:", *(void *)(a1 + 32), v9, objc_msgSend(v18, "isFromMe"));
      uint64_t v20 = *(void **)(a1 + 40);
      int v21 = [*(id *)(a1 + 32) guid];
      [v20 endTransfer:v21];
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v36 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Sticker not in cache. Attempting to download sticker ", buf, 2u);
      }
    }
  }
  else if (*(unsigned char *)(a1 + 72))
  {
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 3221225472;
    aBlock[2] = sub_1D97144F4;
    aBlock[3] = &unk_1E6B74E90;
    id v56 = *(id *)(a1 + 48);
    id v57 = *(id *)(a1 + 32);
    id v58 = *(id *)(a1 + 40);
    id v59 = *(id *)(a1 + 56);
    id v22 = _Block_copy(aBlock);
    __int16 v23 = +[IMDMessageStore sharedInstance];
    id v24 = [*(id *)(a1 + 32) messageGUID];
    __int16 v25 = [v23 messageWithGUID:v24];

    __int16 v26 = [v25 fileTransferGUIDs];
    uint64_t v27 = [v26 indexOfObject:*(void *)(a1 + 56)];

    id v28 = *(void **)(a1 + 64);
    uint64_t v29 = [v25 guid];
    [v28 retrieveLocalFileTransfer:v29 attachmentIndex:v27 path:0 requestURLString:0 ownerID:0 signature:0 decryptionKey:0 requestedSize:@"Small" fileSize:0 progressBlock:0 completionBlock:v22];

    uint64_t v9 = v56;
  }
  else
  {
    [*(id *)(a1 + 40) acceptTransfer:*(void *)(a1 + 56) path:*(void *)(a1 + 48)];
    [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
    uint64_t v31 = v30;
    long long v32 = +[IMDMessageStore sharedInstance];
    long long v33 = [*(id *)(a1 + 32) messageGUID];
    uint64_t v9 = [v32 messageWithGUID:v33];

    if ([v9 isFromMe])
    {
      uint64_t v34 = (void *)MEMORY[0x1E4F6E950];
      char v35 = [v9 service];
      [v34 fromMeContextWithServiceName:v35];
    }
    else
    {
      uint64_t v37 = +[IMDChatRegistry sharedInstance];
      uint64_t v38 = [v9 sender];
      uint64_t v39 = [v37 hasKnownSenderChatWithChatIdentifier:v38];

      double v40 = (void *)MEMORY[0x1E4F6E950];
      char v35 = [v9 service];
      [v40 contextWithKnownSender:v39 serviceName:v35];
    id v46 = };

    uint64_t v41 = *(void *)(a1 + 32);
    BOOL v42 = *(void **)(a1 + 64);
    uint64_t v43 = [v42 session];
    uint64_t v44 = [v43 sessionSpecificTransferIDForTransferID:*(void *)(a1 + 56)];
    BOOL v45 = [v9 balloonBundleID];
    v53[0] = MEMORY[0x1E4F143A8];
    v53[1] = 3221225472;
    v53[2] = sub_1D9714980;
    v53[3] = &unk_1E6B73FA0;
    id v54 = *(id *)(a1 + 56);
    v48[0] = MEMORY[0x1E4F143A8];
    v48[1] = 3221225472;
    v48[2] = sub_1D9714AA4;
    v48[3] = &unk_1E6B74EB8;
    id v49 = *(id *)(a1 + 32);
    uint64_t v52 = v31;
    id v50 = *(id *)(a1 + 40);
    id v51 = *(id *)(a1 + 56);
    [v42 _receiveFileTransfer:v41 transferID:v44 balloonBundleID:v45 senderContext:v46 progressBlock:v53 completionBlock:v48];
  }
}

void sub_1D97144F4(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, int a6, void *a7)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  id v13 = a2;
  id v14 = a4;
  id v15 = a5;
  id v16 = a7;
  int v17 = IMOSLoggingEnabled();
  if (a6)
  {
    if (v17)
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        int v40 = 138412546;
        id v41 = v13;
        __int16 v42 = 2048;
        uint64_t v43 = a3;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Received response for request message GUID %@ attachment index: %lu", (uint8_t *)&v40, 0x16u);
      }
    }
    [v15 writeToFile:*(void *)(a1 + 32) atomically:1];
    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        uint64_t v20 = [*(id *)(a1 + 40) guid];
        int v40 = 138412290;
        id v41 = v20;
        _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Located transfer with GUID: %@", (uint8_t *)&v40, 0xCu);
      }
    }
    [*(id *)(a1 + 40) setUserInfo:0];
    int v21 = *(void **)(a1 + 40);
    id v22 = [MEMORY[0x1E4F1CB10] fileURLWithPath:*(void *)(a1 + 32)];
    [v21 _setLocalURL:v22];

    [*(id *)(a1 + 48) endTransfer:*(void *)(a1 + 56)];
    __int16 v23 = +[IMDMessageStore sharedInstance];
    [v23 updateFileTransfer:*(void *)(a1 + 40)];

    id v24 = +[IMDFileTransferCenter sharedInstance];
    __int16 v25 = [*(id *)(a1 + 40) guid];
    __int16 v26 = [v24 transferForGUID:v25];

    if (IMOSLoggingEnabled())
    {
      uint64_t v27 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        LOWORD(v40) = 0;
        _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "Generating preview for attachment fetched from content after failing fetch from CK", (uint8_t *)&v40, 2u);
      }
    }
    id v28 = +[IMDMessageStore sharedInstance];
    uint64_t v29 = [*(id *)(a1 + 40) messageGUID];
    uint64_t v30 = [v28 messageWithGUID:v29];

    if ([v30 isFromMe])
    {
      uint64_t v31 = (void *)MEMORY[0x1E4F6E950];
      long long v32 = [v30 service];
      [v31 fromMeContextWithServiceName:v32];
    }
    else
    {
      uint64_t v34 = +[IMDChatRegistry sharedInstance];
      char v35 = [v30 sender];
      uint64_t v36 = [v34 hasKnownSenderChatWithChatIdentifier:v35];

      uint64_t v37 = (void *)MEMORY[0x1E4F6E950];
      long long v32 = [v30 service];
      [v37 contextWithKnownSender:v36 serviceName:v32];
    uint64_t v38 = };

    uint64_t v39 = +[IMDFileTransferCenter sharedInstance];
    [v39 generatePreviewForTransfer:v26 messageItem:v30 senderContext:v38];
  }
  else
  {
    if (v17)
    {
      long long v33 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        LOWORD(v40) = 0;
        _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Message has failed to be retrieved from peer for our request", (uint8_t *)&v40, 2u);
      }
    }
    [*(id *)(a1 + 48) resetTransfer:*(void *)(a1 + 56) andPostError:v16];
    __int16 v26 = +[IMDMessageStore sharedInstance];
    [v26 updateFileTransfer:*(void *)(a1 + 40)];
  }
}

void sub_1D9714980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218496;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Receive progress updated to %lld of %lld (%lld bps)", (uint8_t *)&v10, 0x20u);
    }
  }
  uint64_t v9 = +[IMDFileTransferCenter sharedInstance];
  [v9 updateTransfer:*(void *)(a1 + 32) currentBytes:a2 totalBytes:a3];
}

void sub_1D9714AA4(uint64_t a1, void *a2, void *a3, int a4, uint64_t a5, void *a6, void *a7)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  __int16 v14 = a6;
  id v15 = a7;
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      uint64_t v17 = *(void *)(a1 + 32);
      id v18 = @"NO";
      *(_DWORD *)id v41 = 138412802;
      if (a4) {
        id v18 = @"YES";
      }
      *(void *)&v41[4] = v17;
      __int16 v42 = 2112;
      uint64_t v43 = v18;
      __int16 v44 = 2112;
      BOOL v45 = v14;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Finished accepting/downloading transfer: %@   success: %@  error: %@", v41, 0x20u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      [MEMORY[0x1E4F1C9C8] timeIntervalSinceReferenceDate];
      double v21 = v20 - *(double *)(a1 + 56);
      *(_DWORD *)id v41 = 134217984;
      *(double *)&v41[4] = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Time taken: %f", v41, 0xCu);
    }
  }
  if (a4)
  {
    id v22 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v13];
    [*(id *)(a1 + 32) setUserInfo:0];
    if (v22
      && ([MEMORY[0x1E4F28CB8] defaultManager],
          __int16 v23 = objc_claimAutoreleasedReturnValue(),
          [v22 path],
          id v24 = objc_claimAutoreleasedReturnValue(),
          int v25 = [v23 fileExistsAtPath:v24],
          v24,
          v23,
          v25))
    {
      [*(id *)(a1 + 32) _setLocalURL:v22];
      if (IMOSLoggingEnabled())
      {
        __int16 v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)id v41 = 138412290;
          *(void *)&v41[4] = v22;
          _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", v41, 0xCu);
        }
      }
      uint64_t v27 = *(void **)(a1 + 40);
      id v28 = objc_msgSend(*(id *)(a1 + 32), "guid", *(void *)v41);
      [v27 endTransfer:v28];
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v29 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        uint64_t v30 = *(void *)(a1 + 32);
        *(_DWORD *)id v41 = 138412290;
        *(void *)&v41[4] = v30;
        _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", v41, 0xCu);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v32 = *(void *)(a1 + 32);
        *(_DWORD *)id v41 = 138412546;
        *(void *)&v41[4] = v32;
        __int16 v42 = 2112;
        uint64_t v43 = v14;
        _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Failed retreiving file transfer: %@   error: %@", v41, 0x16u);
      }
    }
    long long v33 = v14;
    uint64_t v34 = [(__CFString *)v33 code];
    if (IMOSLoggingEnabled())
    {
      char v35 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)id v41 = 138412546;
        *(void *)&v41[4] = v33;
        __int16 v42 = 1024;
        LODWORD(v43) = v34 != 8;
        _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Checking _IsFileTransferErrorRecoverable %@, (%d)", v41, 0x12u);
      }
    }
    uint64_t v36 = *(void **)(a1 + 40);
    uint64_t v37 = *(void *)(a1 + 48);
    if (v34 != 8)
    {
      [v36 resetTransfer:v37 andPostError:v33];
      goto LABEL_40;
    }
    [v36 failTransfer:v37 error:v33];
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v38 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
    {
      uint64_t v39 = *(void *)(a1 + 32);
      *(_DWORD *)id v41 = 138412290;
      *(void *)&v41[4] = v39;
      _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "Updating clients with final transfer: %@", v41, 0xCu);
    }
  }
  int v40 = +[IMDMessageStore sharedInstance];
  [v40 updateFileTransfer:*(void *)(a1 + 32)];

  [*(id *)(a1 + 40) postHubbleDownloadFinishedIfNeededForTransfer:*(void *)(a1 + 32)];
LABEL_40:
}

void sub_1D9715B80(uint64_t a1, void *a2)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = [v3 objectForKey:@"result"];
  id v5 = v4;
  if (v4)
  {
    id v6 = (void *)MEMORY[0x1E4F1CB10];
    int v7 = [v4 objectForKey:@"fileURL"];
    id v8 = [v6 URLWithString:v7];

    if (v8)
    {
      [*(id *)(a1 + 32) _setLocalURL:v8];
      [*(id *)(a1 + 32) setThumbnailMode:0];
      uint64_t v9 = +[IMDAttachmentStore sharedInstance];
      [v9 storeAttachment:*(void *)(a1 + 32) associateWithMessageWithGUID:0];

      int v10 = [MEMORY[0x1E4F6EBF8] sharedInstance];
      uint64_t v11 = *(void *)(a1 + 32);
      id v12 = [(__CFString *)v8 path];
      uint64_t v13 = *(void *)(a1 + 40);
      uint64_t v14 = *(void *)(a1 + 48);
      id v15 = *(void **)(a1 + 72);
      uint64_t v48 = v15;
      if (v15)
      {
        uint64_t v16 = v49;
        v49[0] = MEMORY[0x1E4F143A8];
        v49[1] = 3221225472;
        v49[2] = sub_1D9716220;
        v49[3] = &unk_1E6B74F08;
        uint64_t v46 = &v51;
        id v51 = v15;
        id v47 = (id *)&v50;
        id v50 = v8;
      }
      else
      {
        uint64_t v16 = 0;
      }
      [v10 generatePreviewForTransfer:v11 attachmentPath:v12 balloonBundleID:v13 senderContext:v14 completionBlock:v16];

      if (*(void *)(a1 + 80))
      {
        if (IMOSLoggingEnabled())
        {
          __int16 v23 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            id v24 = [*(id *)(a1 + 32) guid];
            *(_DWORD *)buf = 138412290;
            id v53 = v24;
            _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "Attempting to relay message after tap to download of %@", buf, 0xCu);
          }
        }
        int v25 = +[IMDAttachmentStore sharedInstance];
        __int16 v26 = [*(id *)(a1 + 32) guid];
        uint64_t v27 = [v25 messageForTransferGUID:v26 shouldLoadAttachments:1];

        id v28 = +[IMDMessageStore sharedInstance];
        uint64_t v29 = [v28 chatForMessage:v27];

        if (v27) {
          BOOL v30 = v29 == 0;
        }
        else {
          BOOL v30 = 1;
        }
        int v31 = !v30;
        int v32 = IMOSLoggingEnabled();
        if (v31)
        {
          if (v32)
          {
            long long v33 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
            {
              uint64_t v34 = [v27 guid];
              char v35 = [v29 guid];
              uint64_t v36 = [*(id *)(a1 + 32) guid];
              *(_DWORD *)buf = 138412802;
              id v53 = v34;
              __int16 v54 = 2112;
              uint64_t v55 = v35;
              __int16 v56 = 2112;
              uint64_t v57 = (uint64_t)v36;
              _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Relaying message %@ for chat %@ after tap to download of %@", buf, 0x20u);
            }
          }
          uint64_t v37 = +[IMDRelayServiceController sharedInstance];
          uint64_t v38 = [*(id *)(a1 + 56) session];
          uint64_t v39 = [v38 service];
          int v40 = [v39 internalName];
          [v37 relayMessageToPeers:v27 forChat:v29 serviceName:v40 reflectOnly:0 requiredCapabilities:0];
        }
        else if (v32)
        {
          id v41 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            uint64_t v42 = [*(id *)(a1 + 32) guid];
            uint64_t v43 = (void *)v42;
            __int16 v44 = @"NO";
            if (v29) {
              BOOL v45 = @"YES";
            }
            else {
              BOOL v45 = @"NO";
            }
            *(_DWORD *)buf = 138412802;
            if (v27) {
              __int16 v44 = @"YES";
            }
            id v53 = v44;
            __int16 v54 = 2112;
            uint64_t v55 = v45;
            __int16 v56 = 2112;
            uint64_t v57 = v42;
            _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Relay after TapToDownload failed, couldn't find msg (%@) or chat (%@) for transfer %@", buf, 0x20u);
          }
        }
      }
      if (v48)
      {

        id v22 = *v46;
        goto LABEL_47;
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "No file found after download from RCS", buf, 2u);
        }
      }
      uint64_t v20 = *(void *)(a1 + 72);
      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 64);
        id v22 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.Messages.AttachmentControllerErrorDomain" code:4 userInfo:0];
        (*(void (**)(uint64_t, uint64_t, void, void, void, void *, void, double, double))(v20 + 16))(v20, v21, 0, 0, 0, v22, 0, 0.0, 0.0);
LABEL_47:
      }
    }
  }
  else
  {
    id v8 = [v3 objectForKey:@"error"];
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v53 = v8;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Failed to download from RCS, error %@", buf, 0xCu);
      }
    }
    uint64_t v18 = *(void *)(a1 + 72);
    if (v18) {
      (*(void (**)(uint64_t, void, void, void, void, __CFString *, void, double, double))(v18 + 16))(v18, *(void *)(a1 + 64), 0, 0, 0, v8, 0, 0.0, 0.0);
    }
  }
}

void sub_1D9716220(uint64_t a1, void *a2, uint64_t a3, void *a4, double a5, double a6)
{
  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v12 = a4;
  id v13 = a2;
  id v14 = [v11 path];
  (*(void (**)(uint64_t, id, id, uint64_t, uint64_t, id, void, double, double))(v10 + 16))(v10, v13, v14, 1, a3, v12, 0, a5, a6);
}

uint64_t sub_1D97162DC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D97162EC(uint64_t a1)
{
}

void sub_1D97162F4(void *a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v21 = a3;
  id v22 = a4;
  id v14 = a5;
  id v15 = a6;
  id v16 = a7;
  if (a2)
  {
    objc_storeStrong((id *)(*(void *)(a1[4] + 8) + 40), a3);
    objc_storeStrong((id *)(*(void *)(a1[5] + 8) + 40), a4);
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), a5);
    objc_storeStrong((id *)(*(void *)(a1[7] + 8) + 40), a7);
    objc_storeStrong((id *)(*(void *)(a1[8] + 8) + 40), a6);
    if (IMOSLoggingEnabled())
    {
      uint64_t v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(*(void *)(a1[5] + 8) + 40);
        uint64_t v19 = *(void *)(*(void *)(a1[7] + 8) + 40);
        *(_DWORD *)buf = 138412546;
        uint64_t v24 = v18;
        __int16 v25 = 2112;
        uint64_t v26 = v19;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "For default file transfer download, using signature %@ file size %@", buf, 0x16u);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Unable to find default file transfer info to download", buf, 2u);
    }
  }
}

void sub_1D9716A10(void *a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [(id)qword_1EA8CA460 objectForKey:a1[4]];
  if (v2)
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = a1[4];
        int v6 = 138412290;
        uint64_t v7 = v4;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Timed out waiting for peer attachment completion for attachment: %@", (uint8_t *)&v6, 0xCu);
      }
    }
    v2[2](v2, a1[5], a1[6], 0, 0, 0, 0);
    [(id)qword_1EA8CA460 removeObjectForKey:a1[4]];
    if (![(id)qword_1EA8CA460 count])
    {
      id v5 = (void *)qword_1EA8CA460;
      qword_1EA8CA460 = 0;
    }
  }
}

uint64_t sub_1D9718870(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

void sub_1D9718888(uint64_t a1, void *a2, void *a3, void *a4, void *a5, int a6, int a7, void *a8)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  id v47 = a2;
  id v15 = a3;
  id v49 = a4;
  id v16 = a5;
  id v17 = a8;
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = @"NO";
      uint64_t v20 = *(__CFString **)(a1 + 32);
      if (a7) {
        uint64_t v19 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v52 = v20;
      __int16 v53 = 2112;
      unint64_t v54 = (unint64_t)v19;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Transcode processing complete for transfer: %@  (Attempted Transcode: %@)", buf, 0x16u);
    }
  }
  int v21 = IMOSLoggingEnabled();
  if (a6)
  {
    if (v21)
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v52 = v15;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "Transcoding succeeded with output URLs: %@", buf, 0xCu);
      }
    }
    __int16 v23 = [(__CFString *)v15 lastObject];
    uint64_t v24 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v23];
    __int16 v25 = v24;
    uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
    if (*(unsigned char *)(v26 + 24))
    {
      BOOL v27 = 1;
    }
    else
    {
      BOOL v27 = (unint64_t)[v24 length] > 0x100000;
      uint64_t v26 = *(void *)(*(void *)(a1 + 64) + 8);
    }
    *(unsigned char *)(v26 + 24) = v27;
    if (IMOSLoggingEnabled())
    {
      uint64_t v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        int v38 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24);
        uint64_t v39 = [v25 length];
        int v40 = @"YES";
        if (!v38) {
          int v40 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v52 = v40;
        __int16 v53 = 2048;
        unint64_t v54 = v39;
        _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%lu", buf, 0x16u);
      }
    }
    [*(id *)(a1 + 40) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 48) messageGuid:*(void *)(a1 + 56) fileURL:v23 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }
  else
  {
    if (v21)
    {
      id v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Transcoding Failed for Peer Relay:", buf, 2u);
      }
    }
    uint64_t v29 = objc_msgSend(*(id *)(a1 + 32), "localURL", v47, v49);
    __int16 v23 = [v29 path];

    if (v23)
    {
      BOOL v30 = [MEMORY[0x1E4F28CB8] defaultManager];
      int v31 = [v30 attributesOfItemAtPath:v23 error:0];

      int v32 = [v31 objectForKeyedSubscript:*MEMORY[0x1E4F28390]];
      unint64_t v33 = [v32 longValue];

      uint64_t v34 = *(void *)(*(void *)(a1 + 64) + 8);
      if (*(unsigned char *)(v34 + 24)) {
        BOOL v35 = 1;
      }
      else {
        BOOL v35 = v33 > 0x100000;
      }
      char v36 = v35;
      *(unsigned char *)(v34 + 24) = v36;
    }
    else
    {
      unint64_t v33 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      id v41 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
          uint64_t v42 = @"YES";
        }
        else {
          uint64_t v42 = @"NO";
        }
        *(_DWORD *)buf = 138412546;
        uint64_t v52 = v42;
        __int16 v53 = 2048;
        unint64_t v54 = v33;
        _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "useLocalPeersFileAPI: %@ fileSize:%ld", buf, 0x16u);
      }
    }
    uint64_t v43 = *(void *)(a1 + 72);
    uint64_t v45 = *(void *)(a1 + 48);
    uint64_t v44 = *(void *)(a1 + 56);
    uint64_t v46 = *(void **)(a1 + 40);
    __int16 v25 = [*(id *)(a1 + 32) localURL];
    [v46 _sendAttachmentToPeerDevice:v43 fileTransferGUID:v45 messageGuid:v44 fileURL:v25 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }
}

void sub_1D9718D94(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = IMOSLoggingEnabled();
  if (!v6 || v7)
  {
    if (v8)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v7;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "File safe render failed for Peer Relay: %@", (uint8_t *)&v16, 0xCu);
      }
    }
    uint64_t v11 = *(void *)(a1 + 72);
    id v13 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    id v15 = [*(id *)(a1 + 56) localURL];
    [v13 _sendAttachmentToPeerDevice:v11 fileTransferGUID:v12 messageGuid:v14 fileURL:v15 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:5];
  }
  else
  {
    if (v8)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v16) = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "File safe render success.", (uint8_t *)&v16, 2u);
      }
    }
    [*(id *)(a1 + 32) _sendAttachmentToPeerDevice:*(void *)(a1 + 72) fileTransferGUID:*(void *)(a1 + 40) messageGuid:*(void *)(a1 + 48) fileURL:v6 useLocalPeersFileAPI:*(unsigned __int8 *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) error:0];
  }
}

uint64_t sub_1D9718F68(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

uint64_t sub_1D9718F80(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_remotefileRequest_attempts_shouldRetry_);
}

void sub_1D971919C(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _runIndividuallyWithInput:*(void *)(a1 + 40)];
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1D9719240;
  v3[3] = &unk_1E6B74FD0;
  id v4 = *(id *)(a1 + 48);
  [v2 registerCompletionBlock:v3];
}

void sub_1D9719240(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = [v3 state];
  id v5 = *(void **)(a1 + 32);
  if (v4 == 1)
  {
    id v6 = [v3 error];

    [v5 failWithError:v6];
  }
  else
  {
    id v6 = [v3 value];

    [v5 fullfillWithValue:v6];
  }
}

void sub_1D9719904(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97198F8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D971A354(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [v4 handleID];
  id v6 = [v4 service];
  uint64_t v7 = [v4 isReachable];

  uint64_t v8 = [a1 initWithHandleID:v5 service:v6 isReachable:v7];
  return v8;
}

uint64_t sub_1D971A3DC(void *a1, uint64_t a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  id v5 = (void *)MEMORY[0x1E4F1CA60];
  id v6 = [v4 handleResults];
  uint64_t v7 = objc_msgSend(v5, "dictionaryWithCapacity:", objc_msgSend(v6, "count"));

  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  uint64_t v8 = objc_msgSend(v4, "handleResults", 0);
  uint64_t v9 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
  if (v9)
  {
    uint64_t v10 = v9;
    uint64_t v11 = *(void *)v23;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v23 != v11) {
          objc_enumerationMutation(v8);
        }
        id v13 = *(void **)(*((void *)&v22 + 1) + 8 * v12);
        uint64_t v14 = (void *)[objc_alloc(MEMORY[0x1E4F6E978]) initWithBlastDoorResult:v13];
        id v15 = [v13 handleID];
        [v7 setObject:v14 forKeyedSubscript:v15];

        ++v12;
      }
      while (v10 != v12);
      uint64_t v10 = [v8 countByEnumeratingWithState:&v22 objects:v26 count:16];
    }
    while (v10);
  }

  int v16 = [v4 service];
  unint64_t v17 = [v4 error];
  if (v17 >= 7) {
    uint64_t v18 = -1;
  }
  else {
    uint64_t v18 = v17;
  }
  uint64_t v19 = (void *)[v7 copy];
  uint64_t v20 = objc_msgSend(a1, "initWithService:error:handleResults:isFinal:allAreReachable:didCheckServer:", v16, v18, v19, objc_msgSend(v4, "isFinal"), objc_msgSend(v4, "allAreReachable"), objc_msgSend(v4, "didCheckServer"));

  return v20;
}

uint64_t sub_1D971A830()
{
  qword_1EA8CA470 = objc_alloc_init(IMDBackgroundMessagingAPIMessageRegistry);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D971AD88()
{
  qword_1EBE2B968 = objc_alloc_init(IMDFileTransferCenter);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D971CA14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateTransferGUID:*(void *)(a1 + 40) toGUID:*(void *)(a1 + 48)];
}

void sub_1D971DC78(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) count];
      int v4 = 134217984;
      uint64_t v5 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Finished re-indexing %ld messages due to preview generation state change", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D971E658(uint64_t a1, void *a2, int a3, void *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = a4;
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = @"NO";
      if (a3) {
        uint64_t v9 = @"YES";
      }
      int v10 = 138412546;
      uint64_t v11 = v9;
      __int16 v12 = 2112;
      id v13 = v7;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Generated preview for SMS attachment part, success %@ error %@", (uint8_t *)&v10, 0x16u);
    }
  }
}

uint64_t sub_1D9721F4C(uint64_t a1, void *a2)
{
  id v7 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v7;
    if ([v3 isFinished])
    {
      int v4 = *(void **)(a1 + 32);
      uint64_t v5 = [v3 guid];
      [v4 addObject:v5];
    }
  }

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9722DA0()
{
  qword_1EBE2B970 = objc_alloc_init(IMDExposureNotificationManager);

  return MEMORY[0x1F41817F8]();
}

id sub_1D9722DDC()
{
  return (id)[(id)qword_1EBE2B970 _enManager];
}

uint64_t sub_1D9722E58()
{
  id v0 = objc_alloc_init(MEMORY[0x1E4F25798]);
  uint64_t v1 = (void *)qword_1EBE2BB30;
  qword_1EBE2BB30 = (uint64_t)v0;

  uint64_t v2 = qword_1EBE2BB30;

  return MEMORY[0x1F4181798](v2, sel_activateWithCompletionHandler_);
}

void sub_1D9722EAC(uint64_t a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = @"NO";
      if (!v2) {
        int v4 = @"YES";
      }
      int v5 = 138412290;
      id v6 = v4;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Activated ENManager: %@", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1D97231E4(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    int v4 = objc_msgSend(*(id *)(a1 + 32), "_allowedDomains", 0);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v10;
      do
      {
        uint64_t v8 = 0;
        do
        {
          if (*(void *)v10 != v7) {
            objc_enumerationMutation(v4);
          }
          if (objc_msgSend(v3, "__im_conformsToDomain:", *(void *)(*((void *)&v9 + 1) + 8 * v8))) {
            [*(id *)(a1 + 40) addObject:v3];
          }
          ++v8;
        }
        while (v6 != v8);
        uint64_t v6 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
      }
      while (v6);
    }
  }
}

uint64_t sub_1D97233E0()
{
  uint64_t result = MEMORY[0x1E0169C30](@"ENTextMessage", @"ExposureNotification");
  qword_1EA8CA478 = result;
  return result;
}

void sub_1D97235F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  v5[2] = sub_1D97236A0;
  v5[3] = &unk_1E6B73AB0;
  id v6 = v3;
  id v7 = *(id *)(a1 + 32);
  id v4 = v3;
  dispatch_async(MEMORY[0x1E4F14428], v5);
}

uint64_t sub_1D97236A0(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = IMOSLoggingEnabled();
  if (v2)
  {
    if (v3)
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v8 = 138412290;
        uint64_t v9 = v5;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Error: %@", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else if (v3)
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8) = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Verified success", (uint8_t *)&v8, 2u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1D972385C()
{
  qword_1EBE2BCE0 = objc_alloc_init(IMDOffGridAvailabilityVerificationManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9723A40(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    long long v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1D990039C(a1, (uint64_t)v7, v11);
    }
  }
  else
  {
    int v8 = [IMDAvailabilityVerificationTokens alloc];
    uint64_t v9 = [v5 subscriptionValidationToken];
    uint64_t v10 = [v5 encryptionValidationToken];
    long long v11 = [(IMDAvailabilityVerificationTokens *)v8 initWithSubscriptionValidationToken:v9 encryptionValidationToken:v10];

    [*(id *)(*(void *)(a1 + 40) + 24) setObject:v11 forKey:*(void *)(a1 + 32)];
  }
}

void sub_1D9723D1C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  switch(a2)
  {
    case 2:
      if (IMOSLoggingEnabled())
      {
        id v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          uint64_t v8 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          int v12 = 138412546;
          uint64_t v13 = v8;
          __int16 v14 = 2112;
          uint64_t v15 = v9;
          _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Received an invalid response when validating tokens, attempting to fix by potentially re-inviting senderHandleID %@ fromHandleID %@", (uint8_t *)&v12, 0x16u);
        }
      }
      uint64_t v10 = [MEMORY[0x1E4F6E8D0] sharedInstance];
      [v10 repairOffGridStatusWithHandleID:*(void *)(a1 + 32) fromHandleID:*(void *)(a1 + 40) completion:&unk_1F3390EC0];

      break;
    case 1:
      if (IMOSLoggingEnabled())
      {
        long long v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v12) = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Received a valid response when validating tokens, no further action needed.", (uint8_t *)&v12, 2u);
        }
      }
      break;
    case 0:
      id v6 = IMLogHandleForCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_1D99004A0(v6);
      }

      break;
  }
}

void sub_1D9723EE8(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, void *a5)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v8 = a5;
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      int v10 = 134218754;
      uint64_t v11 = a2;
      __int16 v12 = 2048;
      uint64_t v13 = a3;
      __int16 v14 = 2048;
      uint64_t v15 = a4;
      __int16 v16 = 2112;
      id v17 = v8;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Completed invitation. didAttemptInvitation: %ld, wasAlreadyInvited: %ld, didShare: %ld Error: %@", (uint8_t *)&v10, 0x2Au);
    }
  }
}

void sub_1D97240AC()
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  qword_1EBE2BB48 = MEMORY[0x1E0169C30](@"PSYSyncCoordinator", @"PairedSync");
  uint64_t v0 = MEMORY[0x1E0169C30](@"PSYServiceSyncSession", @"PairedSync");
  qword_1EBE2BB50 = v0;
  if (qword_1EBE2BB48)
  {
    if (v0) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v1 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"IMPSYSyncCoordinator", "void _IMDPairedSyncAPIInit(void)_block_invoke", IMFileLocationTrimFileName(), 67, objc_msgSend(NSString, "stringWithFormat:", &stru_1F3398578)];
  uint64_t v2 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
  if (v2)
  {
    v2(v1);
  }
  else if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v8 = v1;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
    }
  }
  if (!qword_1EBE2BB50)
  {
LABEL_10:
    uint64_t v4 = [NSString stringWithFormat:@"Unexpected nil '%@' in %s at %s:%d. %@", @"IMPSYServiceSyncSession", "void _IMDPairedSyncAPIInit(void)_block_invoke", IMFileLocationTrimFileName(), 68, objc_msgSend(NSString, "stringWithFormat:", &stru_1F3398578)];
    id v5 = (void (*)(uint64_t))IMGetAssertionFailureHandler();
    if (v5)
    {
      v5(v4);
    }
    else if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        uint64_t v8 = v4;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "ASSERTION FAILED: %@", buf, 0xCu);
      }
    }
  }
}

IMDQuickSwitchController *sub_1D972438C()
{
  uint64_t result = objc_alloc_init(IMDQuickSwitchController);
  qword_1EBE2B978 = (uint64_t)result;
  return result;
}

uint64_t sub_1D972523C(uint64_t a1, void *a2)
{
  IMTimingStopTimingForKey();

  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", *(void *)(a1 + 32)) & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v6 = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "QuickSwitch Could not create zipped DB", v6, 2u);
      }
    }
  }
  [*(id *)(a1 + 40) _getFileSizeAtPath:*(void *)(a1 + 32)];
  uint64_t result = *(void *)(a1 + 48);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

uint64_t sub_1D972557C(uint64_t a1, void *a2)
{
  IMTimingStopTimingForKey();

  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", *(void *)(a1 + 32)) & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v6 = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "QuickSwitch Could not create unzipped DB", v6, 2u);
      }
    }
  }
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1D972622C(uint64_t a1)
{
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", objc_msgSend(*(id *)(a1 + 32), "_getZippedDBPath")) & 1) == 0)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_13;
    }
    int v3 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
      goto LABEL_13;
    }
    __int16 v8 = 0;
    uint64_t v4 = "We could not create zip file for QuickSwitch";
    id v5 = (uint8_t *)&v8;
    goto LABEL_12;
  }
  if (!objc_msgSend(*(id *)(a1 + 32), "_sendZippedFileAtPath:withCommand:", objc_msgSend(*(id *)(a1 + 32), "_getZippedDBPath"), 3))
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_13;
    }
    int v3 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO)) {
      goto LABEL_13;
    }
    LOWORD(v6) = 0;
    uint64_t v4 = "Database QuickSwitch: Could not send file over to gizmo. Bailing";
    id v5 = (uint8_t *)&v6;
LABEL_12:
    _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, v4, v5, 2u);
LABEL_13:
    objc_msgSend(*(id *)(a1 + 32), "_quickSwitchCompleted:", 0, v6);
    return;
  }
  [*(id *)(a1 + 32) _notifyPSYDataSent];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Sent zipped file to watch", buf, 2u);
    }
  }
}

uint64_t sub_1D97265F8(uint64_t a1)
{
  if ((objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager"), "fileExistsAtPath:", *(void *)(a1 + 32)) & 1) == 0)
  {
    if (!IMOSLoggingEnabled()) {
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v7);
    }
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v7);
    }
    __int16 v8 = 0;
    id v5 = "QuickSwitch we could not create zip file";
    uint64_t v6 = (uint8_t *)&v8;
    goto LABEL_12;
  }
  if (![*(id *)(a1 + 40) _sendZippedFileAtPath:*(void *)(a1 + 32) withCommand:6])
  {
    if (!IMOSLoggingEnabled()) {
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v7);
    }
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v7);
    }
    LOWORD(v7) = 0;
    id v5 = "QuickSwitch could not send file over to gizmo. Bailing";
    uint64_t v6 = (uint8_t *)&v7;
LABEL_12:
    _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, v5, v6, 2u);
    return objc_msgSend(*(id *)(a1 + 40), "_quickSwitchCompleted:", 0, v7);
  }
  uint64_t v2 = *(void **)(a1 + 40);

  return [v2 _notifyPSYDataSent];
}

uint64_t sub_1D9727FC4()
{
  qword_1EA8CA488 = objc_alloc_init(IMDCKSyncTokenStore);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9729250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9729270(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9729280(uint64_t a1)
{
}

void sub_1D9729288(uint64_t a1, void *a2)
{
}

uint64_t sub_1D972A320()
{
  uint64_t result = MEMORY[0x1E0169C30](@"SWCollaborationNoticeTransmissionMessage", @"SharedWithYouCore");
  qword_1EA8CA498 = result;
  return result;
}

uint64_t sub_1D972A3A4()
{
  uint64_t result = MEMORY[0x1E0169C30](@"SWCollaborationClearNoticeTransmissionMessage", @"SharedWithYouCore");
  qword_1EA8CA4A8 = result;
  return result;
}

void sub_1D972AFC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  if (v6)
  {
    __int16 v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1D9900914();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 136315650;
        long long v23 = "-[IMDCollaborationNoticeDispatcher sendClearNotice:toHandles:]_block_invoke";
        __int16 v24 = 2112;
        long long v25 = v10;
        __int16 v26 = 2112;
        id v27 = v7;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Clear Collaboration Notice protobuf fromHandle: %@, notice: %@", buf, 0x20u);
      }
    }
    if ([v7 version] < 3)
    {
      id v11 = objc_alloc(MEMORY[0x1E4F6E6A8]);
      __int16 v12 = [v7 collaborationId];
      uint64_t v13 = [v7 date];
      __int16 v14 = [v7 guidString];
      uint64_t v15 = (char *)[v11 initWithCollaborationId:v12 date:v13 guidString:v14];

      if (IMOSLoggingEnabled())
      {
        __int16 v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = [*(id *)(a1 + 40) delegate];
          *(_DWORD *)buf = 138412546;
          long long v23 = v15;
          __int16 v24 = 2112;
          long long v25 = v17;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Passing notice %@ to delegate %@", buf, 0x16u);
        }
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1D972B2E0;
      block[3] = &unk_1E6B73BC8;
      uint64_t v18 = *(void **)(a1 + 32);
      void block[4] = *(void *)(a1 + 40);
      uint64_t v20 = v15;
      id v21 = v18;
      __int16 v8 = v15;
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
    else
    {
      __int16 v8 = IMLogHandleForCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_1D9900860(v7);
      }
    }
  }
}

void sub_1D972B2E0(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 dispatcher:*(void *)(a1 + 32) didReceiveDismissalRequest:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48)];
}

void sub_1D972B850(uint64_t a1, void *a2, void *a3)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    id v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D9900B28();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void **)(a1 + 32);
        *(_DWORD *)buf = 136315650;
        long long v23 = "-[IMDCollaborationNoticeDispatcher handleIncomingNoticeProtobuf:service:account:fromID:context:]_block_invoke";
        __int16 v24 = 2112;
        long long v25 = v9;
        __int16 v26 = 2112;
        id v27 = v5;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Collaboration Notice protobuf fromHandle: %@, notice: %@", buf, 0x20u);
      }
    }
    if ([v5 version] < 2)
    {
      id v10 = objc_alloc(MEMORY[0x1E4F6E6C0]);
      id v11 = [v5 highlightEvent];
      uint64_t v12 = [v5 highlightEventType];
      uint64_t v13 = [v5 guidString];
      __int16 v14 = [v5 noticeDate];
      uint64_t v15 = (char *)[v10 initWithEventData:v11 eventType:v12 guidString:v13 date:v14];

      if (IMOSLoggingEnabled())
      {
        __int16 v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = [*(id *)(a1 + 40) delegate];
          *(_DWORD *)buf = 138412546;
          long long v23 = v15;
          __int16 v24 = 2112;
          long long v25 = v17;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Passing notice %@ to delegate %@", buf, 0x16u);
        }
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1D972BB74;
      block[3] = &unk_1E6B73BC8;
      uint64_t v18 = *(void **)(a1 + 32);
      void block[4] = *(void *)(a1 + 40);
      uint64_t v20 = v15;
      id v21 = v18;
      id v7 = v15;
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
    else
    {
      id v7 = IMLogHandleForCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
        sub_1D9900A74(v5);
      }
    }
  }
}

void sub_1D972BB74(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegate];
  [v2 dispatcher:*(void *)(a1 + 32) didReceiveNotice:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48)];
}

void sub_1D972BE14(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (v8)
  {
    uint64_t v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1D9900CBC();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        id v11 = [NSNumber numberWithInteger:a2];
        int v12 = 136315650;
        uint64_t v13 = "-[IMDCollaborationNoticeDispatcher service:account:incomingMessage:fromID:context:]_block_invoke";
        __int16 v14 = 2112;
        uint64_t v15 = v11;
        __int16 v16 = 2112;
        id v17 = v7;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "%s Blastdoor completed processing Collaboration Notice Action, actionType: %@, guids: %@", (uint8_t *)&v12, 0x20u);
      }
    }
    if (a2)
    {
      uint64_t v9 = IMLogHandleForCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_1D9900C14(a2, v9);
      }
    }
    else
    {
      uint64_t v9 = [*(id *)(a1 + 32) delegate];
      [v9 dispatcher:*(void *)(a1 + 32) didReceiveDismissalReflectionForNoticeGUIDs:v7];
    }
  }
}

id sub_1D972C530()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EA8CA4B8;
  uint64_t v7 = qword_1EA8CA4B8;
  if (!qword_1EA8CA4B8)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1D972C6E0;
    v3[3] = &unk_1E6B73480;
    void v3[4] = &v4;
    sub_1D972C6E0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1D972C5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

Class sub_1D972C6E0(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1EA8CA4C0)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1D972C80C;
    void v3[4] = &unk_1E6B72BE8;
    void v3[5] = v3;
    long long v4 = xmmword_1E6B75248;
    uint64_t v5 = 0;
    qword_1EA8CA4C0 = _sl_dlopen();
  }
  if (!qword_1EA8CA4C0) {
    sub_1D9900E6C(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("_SWHighlightEventAllowList");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1D9900EEC();
  }
  qword_1EA8CA4B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1D972C80C()
{
  uint64_t result = _sl_dlopen();
  qword_1EA8CA4C0 = result;
  return result;
}

void sub_1D972C8AC(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

double IMItemFuzzDateForUnencryptedTime(double a1)
{
  return floor(a1 / 86400.0) * 86400.0;
}

__CFString *sub_1D972C8FC()
{
  return @"MessageEncryptedV3";
}

__CFString *sub_1D972C908()
{
  return @"messageUpdateV1";
}

IMDAccountController *sub_1D972C914()
{
  return +[IMDAccountController sharedInstance];
}

id sub_1D972C920(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  long long v4 = [v3 data];
  if ([v4 length])
  {
    uint64_t v5 = (void *)[v4 _FTCopyGzippedData];
    uint64_t v6 = objc_msgSend(MEMORY[0x1E4F6E648], "paddingForMessageOfSize:", objc_msgSend(v5, "length"));
    [v3 setPadding:v6];
    uint64_t v7 = (void *)[v4 _FTCopyGzippedData];
  }
  else
  {
    uint64_t v7 = 0;
  }

  return v7;
}

id sub_1D972C9D8(void *a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6E9D8]);
    id v3 = a1;
    [v2 setVersion:1];
    long long v4 = [v3 timeExpressiveSendPlayed];
    objc_msgSend(v2, "setTimeExpressiveSentPlayed:", objc_msgSend(v4, "__im_nanosecondTimeInterval"));

    uint64_t v5 = [v3 timePlayed];
    objc_msgSend(v2, "setTimePlayed:", objc_msgSend(v5, "__im_nanosecondTimeInterval"));

    uint64_t v6 = [v3 timeRead];
    objc_msgSend(v2, "setTimeRead:", objc_msgSend(v6, "__im_nanosecondTimeInterval"));

    uint64_t v7 = [v3 timeDelivered];
    objc_msgSend(v2, "setTimeDelivered:", objc_msgSend(v7, "__im_nanosecondTimeInterval"));

    id v8 = [v3 balloonBundleID];
    [v2 setBaloonBundleId:v8];

    uint64_t v9 = [v3 expressiveSendStyleID];
    [v2 setExpressiveSendId:v9];

    id v10 = [v3 body];
    id v11 = [v10 string];
    [v2 setMessageBody:v11];

    int v12 = [v3 bodyData];
    [v2 setMessageBodyData:v12];

    uint64_t v13 = [v3 subject];
    [v2 setMessageSubject:v13];

    __int16 v14 = [v3 messageSummaryInfo];
    uint64_t v15 = JWEncodeDictionary();
    [v2 setMessageSummaryInfo:v15];

    __int16 v16 = [v3 payloadData];
    [v2 setPayloadData:v16];

    objc_msgSend(v2, "setExpireState:", objc_msgSend(v3, "expireState"));
    id v17 = [v3 associatedMessageGUID];
    [v2 setAssociatedMessageGuid:v17];

    objc_msgSend(v2, "setAssociatedMessageType:", objc_msgSend(v3, "associatedMessageType"));
    objc_msgSend(v2, "setAssociatedMessageRangeLocation:", objc_msgSend(v3, "associatedMessageRange"));
    [v3 associatedMessageRange];
    [v2 setAssociatedMessageRangeLength:v18];
    uint64_t v19 = objc_opt_class();

    uint64_t v20 = [v19 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        long long v22 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v24 = 138412546;
        long long v25 = a1;
        __int16 v26 = 2112;
        id v27 = v22;
        _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForMessage called on object %@ %@", (uint8_t *)&v24, 0x16u);
      }
    }
    uint64_t v20 = 0;
  }

  return v20;
}

id sub_1D972CD58(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = a1;
    id v3 = objc_alloc((Class)objc_opt_class());
    long long v4 = [v2 threadIdentifier];
    [v3 setThreadIdentifier:v4];

    uint64_t v5 = objc_opt_class();
    uint64_t v6 = [v5 compressedProtobufDataWithPadding:v3];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v10 = 138412546;
        id v11 = a1;
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForMessageP2 (reply data) called on object %@ %@", (uint8_t *)&v10, 0x16u);
      }
    }
    uint64_t v6 = 0;
  }

  return v6;
}

id sub_1D972CEF4(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = a1;
    id v3 = objc_alloc((Class)objc_opt_class());
    objc_msgSend(v3, "setCmmState:", objc_msgSend(v2, "getCMMState"));
    objc_msgSend(v3, "setCmmAssetOffset:", objc_msgSend(v2, "getCMMAssetOffset"));
    long long v4 = objc_opt_class();

    uint64_t v5 = [v4 compressedProtobufDataWithPadding:v3];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v9 = 138412546;
        int v10 = a1;
        __int16 v11 = 2112;
        __int16 v12 = v7;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForMessageP3 (SWY CMM data) called on object %@ %@", (uint8_t *)&v9, 0x16u);
      }
    }
    uint64_t v5 = 0;
  }

  return v5;
}

id sub_1D972D098(void *a1)
{
  id v2 = objc_alloc((Class)objc_opt_class());
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = a1;
    long long v4 = [v3 associatedMessageEmoji];
    [v2 setAssociatedMessageEmoji:v4];

    objc_msgSend(v2, "setScheduleType:", objc_msgSend(v3, "scheduleType"));
    uint64_t v5 = [v3 scheduleState];

    [v2 setScheduleState:v5];
  }
  uint64_t v6 = [a1 parentChatID];
  [v2 setActualParentChatId:v6];

  uint64_t v7 = [a1 service];
  [v2 setActualService:v7];

  id v8 = [(id)objc_opt_class() compressedProtobufDataWithPadding:v2];

  return v8;
}

id sub_1D972D1B4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 objectForKey:@"MID"];
  uint64_t v6 = [v4 objectForKey:@"TOID"];
  uint64_t v7 = [v4 objectForKey:@"TOPart"];

  id v8 = objc_alloc((Class)objc_opt_class());
  [v8 setMsgid:v5];
  [v8 setThreadGuid:v6];
  [v8 setThreadPart:v7];
  int v9 = [a1 compressedProtobufDataWithPadding:v8];

  return v9;
}

id sub_1D972D2A0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 objectForKey:@"MID"];
  uint64_t v6 = [v4 objectForKey:@"SR"];

  id v7 = objc_alloc((Class)objc_opt_class());
  [v7 setMsgid:v5];
  [v7 setSr:v6];
  id v8 = [a1 compressedProtobufDataWithPadding:v7];

  return v8;
}

id sub_1D972D35C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [v4 objectForKey:@"MID"];
  uint64_t v6 = [v4 objectForKey:@"CHATID"];

  id v7 = objc_alloc((Class)objc_opt_class());
  [v7 setMsgid:v5];
  [v7 setChatid:v6];
  id v8 = [a1 compressedProtobufDataWithPadding:v7];

  return v8;
}

id sub_1D972D418(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9D8];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D494(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9E8];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D510(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9F0];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D58C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9F8];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D608(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6EA08];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D684(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6EA10];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D700(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6EA18];
  id v4 = a3;
  id v5 = [v3 alloc];
  uint64_t v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972D77C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() protobufForCompressedData:v6];

  id v8 = v5;
  int v9 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeExpressiveSentPlayed"));
  [v8 setTimeExpressiveSendPlayed:v9];

  int v10 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timePlayed"));
  [v8 setTimePlayed:v10];

  __int16 v11 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeRead"));
  [v8 setTimeRead:v11];

  __int16 v12 = [v7 baloonBundleId];
  [v8 setBalloonBundleID:v12];

  uint64_t v13 = [v7 expressiveSendId];
  [v8 setExpressiveSendStyleID:v13];

  uint64_t v14 = [v7 messageBodyData];
  [v8 setBodyData:v14];

  uint64_t v15 = [v7 messageSubject];
  [v8 setSubject:v15];

  __int16 v16 = [v7 messageSummaryInfo];
  id v17 = JWDecodeDictionary();
  [v8 setMessageSummaryInfo:v17];

  uint64_t v18 = [v7 payloadData];
  [v8 setPayloadData:v18];

  uint64_t v19 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)(unint64_t)objc_msgSend(v7, "timeDelivered"));
  [v8 setTimeDelivered:v19];

  objc_msgSend(v8, "setExpireState:", objc_msgSend(v7, "expireState"));
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v20 = v8;
    id v21 = [v7 associatedMessageGuid];
    [v20 setAssociatedMessageGUID:v21];

    objc_msgSend(v20, "setAssociatedMessageType:", objc_msgSend(v7, "associatedMessageType"));
    objc_msgSend(v20, "setAssociatedMessageRange:", objc_msgSend(v7, "associatedMessageRangeLocation"), objc_msgSend(v7, "associatedMessageRangeLength"));
  }

  return v8;
}

id sub_1D972DA28(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() protobufForCompressedDataP2:v6];

  id v8 = [v7 threadIdentifier];
  [v5 setThreadIdentifier:v8];

  return v5;
}

id sub_1D972DAB8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() protobufForCompressedDataP3:v6];

  objc_msgSend(v5, "setCMMState:", objc_msgSend(v7, "cmmState"));
  objc_msgSend(v5, "setCMMAssetOffset:", objc_msgSend(v7, "cmmAssetOffset"));

  return v5;
}

id sub_1D972DB50(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() protobufForCompressedDataP4:v6];
  id v8 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v9 = [v8 isEmojiTapbacksEnabled];

  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v10 = v5;
      __int16 v11 = [v7 associatedMessageEmoji];
      [v10 setAssociatedMessageEmoji:v11];
    }
  }
  if ([v7 hasActualService])
  {
    __int16 v12 = [v7 actualService];
    uint64_t v13 = [v5 service];
    char v14 = [v12 isEqualToString:v13];

    if ((v14 & 1) == 0)
    {
      uint64_t v15 = (void *)*MEMORY[0x1E4F6E1A0];
      __int16 v16 = [v5 service];
      LODWORD(v15) = [v15 isEqualToString:v16];

      if (v15)
      {
        id v17 = IMLogHandleForCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG)) {
          sub_1D9900F68(v5, v7, v17);
        }

        uint64_t v18 = [v7 actualService];
        [v5 setService:v18];
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          id v20 = [v5 service];
          id v21 = [v7 actualService];
          int v25 = 138412546;
          __int16 v26 = v20;
          __int16 v27 = 2112;
          uint64_t v28 = v21;
          _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Protobuf4 provides an actualService override but current service is not SMS (current %@, override %@), ignoring!", (uint8_t *)&v25, 0x16u);
        }
      }
    }
  }
  long long v22 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v23 = [v22 isScheduledMessagesCoreEnabled];

  if (v23)
  {
    objc_msgSend(v5, "setScheduleType:", objc_msgSend(v7, "scheduleType"));
    objc_msgSend(v5, "setScheduleState:", objc_msgSend(v7, "scheduleState"));
  }

  return v5;
}

id sub_1D972DE3C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if ([(id)*MEMORY[0x1E4F6E188] containsObject:v3]) {
    id v4 = v3;
  }
  else {
    id v4 = (void *)*MEMORY[0x1E4F6E1A0];
  }
  id v5 = v4;

  return v5;
}

id sub_1D972DE98(void *a1)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v2 = [a1 parentChatID];
  id v3 = v2;
  if (!v2 || ![v2 length])
  {
    id v6 = 0;
    goto LABEL_6;
  }
  id v4 = (void *)*MEMORY[0x1E4F6E188];
  id v5 = [a1 service];
  LODWORD(v4) = [v4 containsObject:v5];

  if (v4)
  {
    id v6 = [a1 parentChatID];
    goto LABEL_6;
  }
  if (!objc_msgSend(v3, "im_isWellFormedChatGUID"))
  {
LABEL_19:
    id v17 = +[IMDChatRegistry sharedInstance];
    uint64_t v18 = [a1 service];
    uint64_t v19 = [v17 _lookupChatUsingParentChatID:v3 service:v18];

    if (v19)
    {
      id v20 = +[IMDChatStore sharedInstance];
      id v21 = [v19 groupID];
      long long v22 = [v20 newestChatWithGroupID:v21 onService:*MEMORY[0x1E4F6E1A0]];

      int v23 = IMOSLoggingEnabled();
      if (v22)
      {
        if (v23)
        {
          int v24 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            int v25 = [v19 groupID];
            __int16 v26 = [v22 guid];
            __int16 v27 = [v22 cloudKitChatID];
            *(_DWORD *)buf = 138413058;
            unint64_t v33 = v3;
            __int16 v34 = 2112;
            BOOL v35 = v25;
            __int16 v36 = 2112;
            uint64_t v37 = v26;
            __int16 v38 = 2112;
            uint64_t v39 = v27;
            _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, using groupID %@, found SMS chat %@, with cloudKitChatID %@", buf, 0x2Au);
          }
        }
        id v6 = [v22 cloudKitChatID];

        goto LABEL_35;
      }
      if (v23)
      {
        uint64_t v28 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          BOOL v30 = [v19 groupID];
          *(_DWORD *)buf = 138412546;
          unint64_t v33 = v3;
          __int16 v34 = 2112;
          BOOL v35 = v30;
          _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, using groupID %@, could NOT find SMS chat, message may be lost on older devices", buf, 0x16u);
        }
LABEL_33:
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        uint64_t v29 = [a1 guid];
        *(_DWORD *)buf = 138412546;
        unint64_t v33 = v3;
        __int16 v34 = 2112;
        BOOL v35 = v29;
        _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Can't find parent chat from %@ for message %@, message may be lost if restored to older devices", buf, 0x16u);
      }
      goto LABEL_33;
    }
    id v6 = v3;
LABEL_35:

    goto LABEL_6;
  }
  id v8 = [a1 parentChatID];
  IMComponentsFromChatGUID();
  id v9 = 0;
  id v10 = 0;

  if (!v9 || !v10)
  {

    goto LABEL_19;
  }
  __int16 v11 = +[IMDChatStore sharedInstance];
  __int16 v12 = [v11 chatsWithIdentifier:v9 onServiceNamed:*MEMORY[0x1E4F6E1A0]];

  if ([v12 count])
  {
    uint64_t v13 = [v12 firstObject];
    if (IMOSLoggingEnabled())
    {
      char v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        uint64_t v15 = [v13 guid];
        __int16 v16 = [v13 cloudKitChatID];
        *(_DWORD *)buf = 138412802;
        unint64_t v33 = v3;
        __int16 v34 = 2112;
        BOOL v35 = v15;
        __int16 v36 = 2112;
        uint64_t v37 = v16;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "For backcompat version of parentChatID %@, found SMS chat %@, with cloudKitChatID %@", buf, 0x20u);
      }
    }
    id v6 = [v13 cloudKitChatID];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Couldn't find the SMS chat, message may be lost if restored to older devices", buf, 2u);
      }
    }
    id v6 = v3;
  }

LABEL_6:

  return v6;
}

void sub_1D972E440(void *a1, uint64_t a2, void *a3)
{
  id v21 = a3;
  id v4 = [a1 guid];
  [v21 _setCKRecordString:v4 forKey:@"guid"];

  id v5 = [a1 service];
  id v6 = [a1 backCompatServiceFor:v5];
  [v21 _setCKRecordString:v6 forKey:@"svc"];

  id v7 = [a1 time];
  [v21 _setCKRecordDate:v7 forKey:@"time"];

  id v8 = [a1 sender];
  [v21 _setCKRecordString:v8 forKey:@"sender"];

  id v9 = [a1 backCompatParentChatID];
  [v21 _setCKRecordString:v9 forKey:@"chatID"];
  id v10 = [a1 destinationCallerID];
  [v21 _setCKRecordString:v10 forKey:@"dcId"];

  if (IMSharedHelperSortUsingReplyToGUIDAlgorithm())
  {
    __int16 v11 = [a1 replyToGUID];
    [v21 _setCKRecordString:v11 forKey:@"rGuid"];
  }
  __int16 v12 = [a1 time];
  [v12 timeIntervalSinceReferenceDate];
  double v14 = floor(v13 / 86400.0) * 86400.0;

  uint64_t v15 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:v14];
  [v21 setValue:v15 forKey:@"utm"];
  __int16 v16 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  if ([v16 isEmojiTapbacksEnabled]) {
    goto LABEL_6;
  }
  id v17 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  if ([v17 isScheduledMessagesCoreEnabled])
  {

LABEL_6:
LABEL_7:
    uint64_t v18 = [a1 compressedProtobufDataForMessageP4];
    [v21 _setCKRecordData:v18 forKey:@"msgProto4"];

    goto LABEL_8;
  }
  uint64_t v19 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  char v20 = [v19 isLazuliEnabled];

  if (v20) {
    goto LABEL_7;
  }
LABEL_8:
}

void sub_1D972E6C8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = a1;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      id v6 = &unk_1F33C5880;
    }
    else {
      id v6 = &unk_1F33C5898;
    }
    [v4 _setUnencryptedCKRecordNumber:v6 forKey:@"msgType"];
    id v7 = objc_msgSend(NSNumber, "numberWithUnsignedLongLong:", objc_msgSend(v5, "flags"));
    [v4 _setCKRecordNumber:v7 forKey:@"flags"];

    id v8 = [v5 compressedProtobufDataForMessage];
    [v4 _setCKRecordData:v8 forKey:@"msgProto"];

    id v9 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v10 = [v9 messageSyncP2Enabled];

    if (v10)
    {
      __int16 v11 = [v5 compressedProtobufDataForMessageP2];
      [v4 _setCKRecordData:v11 forKey:@"msgProto2"];
    }
    __int16 v12 = [v5 compressedProtobufDataForMessageP3];
    [v4 _setCKRecordData:v12 forKey:@"msgProto3"];

    double v13 = objc_msgSend(NSNumber, "numberWithUnsignedInt:", objc_msgSend(v5, "errorCode"));
    [v4 _setUnencryptedCKRecordNumber:v13 forKey:@"eCode"];
  }
  else if (IMOSLoggingEnabled())
  {
    double v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v16 = 138412546;
      id v17 = a1;
      __int16 v18 = 2112;
      uint64_t v19 = v15;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMMessageItemFields called on object %@ %@", (uint8_t *)&v16, 0x16u);
    }
  }
}

id sub_1D972E954(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9C8];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972E9D0(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() groupTitleChangeProtobufForCompressedData:v6];

  id v8 = [v7 groupTitle];
  [v5 setTitle:v8];

  id v9 = [v7 otherHandle];
  [v5 setOtherHandle:v9];

  return v5;
}

id sub_1D972EA80(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6E9C8]);
    id v3 = a1;
    [v2 setVersion:1];
    id v4 = [v3 title];
    [v2 setGroupTitle:v4];

    id v5 = [v3 otherHandle];
    [v2 setOtherHandle:v5];

    id v6 = objc_opt_class();
    id v7 = [v6 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v11 = 138412546;
        __int16 v12 = a1;
        __int16 v13 = 2112;
        double v14 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForGroupTitleChangeItem called on object %@ %@", (uint8_t *)&v11, 0x16u);
      }
    }
    id v7 = 0;
  }

  return v7;
}

void sub_1D972EC40(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [a1 compressedProtobufDataForGroupTitleChangeItem];
    [v4 _setCKRecordData:v5 forKey:@"msgProto"];

    [v4 _setUnencryptedCKRecordNumber:&unk_1F33C58B0 forKey:@"msgType"];
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v8 = 138412546;
      id v9 = a1;
      __int16 v10 = 2112;
      int v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMGroupTitleChangeItemFields called on object %@ %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_1D972EDA8(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6EA20];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972EE24(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6EA00];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972EEA0(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v7 = a3;
  id v8 = a5;
  id v9 = a4;
  __int16 v10 = [(id)objc_opt_class() participantChangeProtobufForCompressedData:v9];

  int v11 = [(id)objc_opt_class() messageSummaryInfoProtobufForCompressedData:v8];

  objc_msgSend(v7, "setChangeType:", objc_msgSend(v10, "participantChangeType"));
  uint64_t v12 = [v10 otherHandle];
  [v7 setOtherHandle:v12];

  __int16 v13 = [v11 messageSummaryInfo];
  double v14 = JWDecodeDictionary();
  [v7 setMessageSummaryInfo:v14];

  return v7;
}

id sub_1D972EFA8(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6EA20]);
    id v3 = a1;
    [v2 setVersion:1];
    objc_msgSend(v2, "setParticipantChangeType:", objc_msgSend(v3, "changeType"));
    id v4 = [v3 otherHandle];
    [v2 setOtherHandle:v4];

    id v5 = objc_opt_class();
    id v6 = [v5 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v10 = 138412546;
        int v11 = a1;
        __int16 v12 = 2112;
        __int16 v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForParticipantChangeItem called on object %@ %@", (uint8_t *)&v10, 0x16u);
      }
    }
    id v6 = 0;
  }

  return v6;
}

id sub_1D972F15C(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = a1;
    id v3 = [v2 messageSummaryInfo];
    id v4 = (void *)[v3 count];

    if (v4)
    {
      id v5 = objc_alloc_init(MEMORY[0x1E4F6EA00]);
      id v6 = [v2 messageSummaryInfo];
      id v7 = JWEncodeDictionary();
      [v5 setMessageSummaryInfo:v7];

      id v4 = [(id)objc_opt_class() compressedProtobufDataWithPadding:v5];
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v11 = 138412546;
        __int16 v12 = a1;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "***Error compressedProtobuf2DataForParticipantChangeItem called on object %@ %@", (uint8_t *)&v11, 0x16u);
      }
    }
    id v4 = 0;
  }

  return v4;
}

void sub_1D972F314(void *a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [a1 compressedProtobufDataForParticipantChangeItem];
    [v4 _setCKRecordData:v5 forKey:@"msgProto"];

    id v6 = [a1 compressedProtobuf2DataForParticipantChangeItem];
    if ([v6 length]) {
      [v4 _setCKRecordData:v6 forKey:@"msgProto2"];
    }
    [v4 _setUnencryptedCKRecordNumber:&unk_1F33C58C8 forKey:@"msgType"];
  }
  else if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v9 = 138412546;
      int v10 = a1;
      __int16 v11 = 2112;
      __int16 v12 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v9, 0x16u);
    }
  }
}

id sub_1D972F4AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9D0];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972F528(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() locationShareStatusChangeProtobufForCompressedData:v6];

  id v8 = [v7 otherHandle];
  uint64_t v9 = [v8 length];

  if (v9)
  {
    int v10 = [v7 otherHandle];
    [v5 setOtherHandle:v10];
  }
  objc_msgSend(v5, "setDirection:", objc_msgSend(v7, "shareDirection"));
  objc_msgSend(v5, "setStatus:", objc_msgSend(v7, "shareStatus"));

  return v5;
}

id sub_1D972F600(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6E9D0]);
    id v3 = a1;
    [v2 setVersion:1];
    objc_msgSend(v2, "setShareStatus:", objc_msgSend(v3, "status"));
    objc_msgSend(v2, "setShareDirection:", objc_msgSend(v3, "direction"));
    id v4 = [v3 otherHandle];
    [v2 setOtherHandle:v4];

    id v5 = objc_opt_class();
    id v6 = [v5 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v10 = 138412546;
        __int16 v11 = a1;
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForLocationShareStatusChangeItem called on object %@ %@", (uint8_t *)&v10, 0x16u);
      }
    }
    id v6 = 0;
  }

  return v6;
}

void sub_1D972F7C8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [a1 compressedProtobufDataForLocationShareStatusChangeItem];
    [v4 _setCKRecordData:v5 forKey:@"msgProto"];

    [v4 _setUnencryptedCKRecordNumber:&unk_1F33C58E0 forKey:@"msgType"];
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v8 = 138412546;
      uint64_t v9 = a1;
      __int16 v10 = 2112;
      __int16 v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_1D972F930(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9C0];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972F9AC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() groupActionProtobufForCompressedData:v6];

  objc_msgSend(v5, "setActionType:", objc_msgSend(v7, "groupActionType"));
  int v8 = [v7 otherHandle];
  [v5 setOtherHandle:v8];

  return v5;
}

id sub_1D972FA50(void *a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6E9C0]);
    id v3 = a1;
    [v2 setVersion:1];
    objc_msgSend(v2, "setGroupActionType:", objc_msgSend(v3, "actionType"));
    id v4 = [v3 otherHandle];
    [v2 setOtherHandle:v4];

    id v5 = objc_opt_class();
    id v6 = [v5 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v10 = 138412546;
        __int16 v11 = a1;
        __int16 v12 = 2112;
        uint64_t v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForGroupActionItem called on object %@ %@", (uint8_t *)&v10, 0x16u);
      }
    }
    id v6 = 0;
  }

  return v6;
}

void sub_1D972FC04(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [a1 compressedProtobufDataForGroupActionItem];
    [v4 _setCKRecordData:v5 forKey:@"msgProto"];

    [v4 _setUnencryptedCKRecordNumber:&unk_1F33C58F8 forKey:@"msgType"];
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v8 = 138412546;
      uint64_t v9 = a1;
      __int16 v10 = 2112;
      __int16 v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_1D972FD6C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = (objc_class *)MEMORY[0x1E4F6E9E0];
  id v4 = a3;
  id v5 = [v3 alloc];
  id v6 = [v4 _FTOptionallyDecompressData];

  id v7 = (void *)[v5 initWithData:v6];

  return v7;
}

id sub_1D972FDE8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v5 = a3;
  id v6 = a4;
  id v7 = [(id)objc_opt_class() messageActionChangeProtobufForCompressedData:v6];

  objc_msgSend(v5, "setActionType:", objc_msgSend(v7, "messageActionType"));
  int v8 = [v7 otherHandle];
  [v5 setOtherHandle:v8];

  uint64_t v9 = [v7 originalMessageGuid];
  [v5 setOriginalMessageGUID:v9];

  return v5;
}

id sub_1D972FEAC(void *a1)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v2 = objc_alloc_init(MEMORY[0x1E4F6E9E0]);
    id v3 = a1;
    [v2 setVersion:1];
    objc_msgSend(v2, "setMessageActionType:", objc_msgSend(v3, "actionType"));
    id v4 = [v3 otherHandle];
    [v2 setOtherHandle:v4];

    id v5 = [v3 originalMessageGUID];
    [v2 setOriginalMessageGuid:v5];

    id v6 = objc_opt_class();
    id v7 = [v6 compressedProtobufDataWithPadding:v2];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [MEMORY[0x1E4F29060] callStackSymbols];
        int v11 = 138412546;
        uint64_t v12 = a1;
        __int16 v13 = 2112;
        uint64_t v14 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "***Error compressedProtobufDataForMessageActionItem called on object %@ %@", (uint8_t *)&v11, 0x16u);
      }
    }
    id v7 = 0;
  }

  return v7;
}

void sub_1D9730080(void *a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v5 = [a1 compressedProtobufDataForMessageActionItem];
    [v4 _setCKRecordData:v5 forKey:@"msgProto"];

    [v4 _setUnencryptedCKRecordNumber:&unk_1F33C5910 forKey:@"msgType"];
  }
  else if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [MEMORY[0x1E4F29060] callStackSymbols];
      int v8 = 138412546;
      uint64_t v9 = a1;
      __int16 v10 = 2112;
      int v11 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***Error _populateCKRecordWithIMParticipantChangeItemFields called on object %@ %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

id sub_1D97301E8(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  int v11 = [v10 objectForKey:@"MID"];
  uint64_t v12 = [v11 stringByAppendingString:@"-UpT1"];
  __int16 v13 = +[CKRecordUtilities recordNameForRecordChangeTag:0 ckRecordID:0 salt:v8 guid:v12];

  id v14 = objc_alloc(MEMORY[0x1E4F1A2D8]);
  uint64_t v15 = [a1 _updateV1RecordType];
  int v16 = +[CKRecordUtilities recordIDUsingName:v13 zoneID:v9];

  id v17 = (void *)[v14 initWithRecordType:v15 recordID:v16];
  __int16 v18 = [a1 compressedProtobufDataForUpdateT1:v10];

  if (v18)
  {
    [v17 _setCKRecordString:@"UT1" forKey:@"ut"];
    [v17 _setCKRecordData:v18 forKey:@"up"];
    id v19 = v17;
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

BOOL sub_1D9730368(void *a1)
{
  id v1 = [a1 destinationCallerID];
  BOOL v2 = [v1 length] != 0;

  return v2;
}

id sub_1D97303A4(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  int v11 = [v10 objectForKey:@"MID"];
  uint64_t v12 = [v11 stringByAppendingString:@"-UpT2"];
  __int16 v13 = +[CKRecordUtilities recordNameForRecordChangeTag:0 ckRecordID:0 salt:v8 guid:v12];

  id v14 = objc_alloc(MEMORY[0x1E4F1A2D8]);
  uint64_t v15 = [a1 _updateV1RecordType];
  int v16 = +[CKRecordUtilities recordIDUsingName:v13 zoneID:v9];

  id v17 = (void *)[v14 initWithRecordType:v15 recordID:v16];
  __int16 v18 = [a1 compressedProtobufDataForUpdateT2:v10];

  if (v18)
  {
    [v17 _setCKRecordString:@"UT2" forKey:@"ut"];
    [v17 _setCKRecordData:v18 forKey:@"up"];
    id v19 = v17;
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

id sub_1D9730524(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a5;
  id v9 = a4;
  id v10 = a3;
  int v11 = [v10 objectForKey:@"MID"];
  uint64_t v12 = [v11 stringByAppendingString:@"-UpT3"];
  __int16 v13 = +[CKRecordUtilities recordNameForRecordChangeTag:0 ckRecordID:0 salt:v8 guid:v12];

  id v14 = objc_alloc(MEMORY[0x1E4F1A2D8]);
  uint64_t v15 = [a1 _updateV1RecordType];
  int v16 = +[CKRecordUtilities recordIDUsingName:v13 zoneID:v9];

  id v17 = (void *)[v14 initWithRecordType:v15 recordID:v16];
  __int16 v18 = [a1 compressedProtobufDataForUpdateT2:v10];

  if (v18)
  {
    [v17 _setCKRecordString:@"UT3" forKey:@"ut"];
    [v17 _setCKRecordData:v18 forKey:@"up"];
    id v19 = v17;
  }
  else
  {
    id v19 = 0;
  }

  return v19;
}

uint64_t sub_1D97306A4(void *a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc(MEMORY[0x1E4F28DC0]);
  id v3 = [a1 cloudKitServerChangeTokenBlob];
  id v9 = 0;
  id v4 = (void *)[v2 initForReadingFromData:v3 error:&v9];
  id v5 = v9;

  uint64_t v6 = [objc_alloc(MEMORY[0x1E4F1A2D8]) initWithCoder:v4];
  if (v5 && IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v11 = v5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Failed to unarchive ckrecord. Error: %@", buf, 0xCu);
    }
  }
  return v6;
}

uint64_t sub_1D97307E8(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = +[IMDMessageStore sharedInstance];
  id v9 = objc_msgSend(v8, "chatForMessageIdentifier:", objc_msgSend(a1, "messageID"));

  id v10 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v11 = [v10 stewieEnabled];

  if (v11) {
    int v12 = [v9 isStewieChat];
  }
  else {
    int v12 = 0;
  }
  __int16 v13 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v14 = [v13 isTranscriptSharingEnabled];

  if ((v14 ^ 1 | v12))
  {
    if (!v12) {
      goto LABEL_6;
    }
  }
  else if (([v9 isStewieSharingChat] & 1) == 0)
  {
LABEL_6:
    uint64_t v15 = [a1 cloudKitRecordChangeTag];
    int v16 = [a1 cloudKitRecordID];
    id v17 = [a1 guid];
    __int16 v18 = +[CKRecordUtilities recordNameForRecordChangeTag:v15 ckRecordID:v16 salt:v7 guid:v17];

    if (![v18 length])
    {
      if (IMOSLoggingEnabled())
      {
        __int16 v27 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          id v34 = v18;
          _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "Cannot create record from recordID because it is nil %@", buf, 0xCu);
        }
      }
      uint64_t v26 = 0;
      goto LABEL_30;
    }
    id v19 = objc_alloc(MEMORY[0x1E4F1A2D8]);
    uint64_t v20 = [a1 _recordType];
    id v21 = +[CKRecordUtilities recordIDUsingName:v18 zoneID:v6];
    long long v22 = (void *)[v19 initWithRecordType:v20 recordID:v21];

    int v23 = [a1 cloudKitRecordChangeTag];

    if (v23)
    {
      int v24 = [a1 cloudKitRecordChangeTag];
      [v22 setEtag:v24];

      [v22 setKnownToServer:1];
    }
    [a1 _populateCKRecordWithIMItemFields:v22];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      [a1 _populateCKRecordWithIMMessageItemFields:v22];
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        [a1 _populateCKRecordWithIMGroupTitleChangeItemFields:v22];
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [a1 _populateCKRecordWithIMParticipantChangeItemFields:v22];
        }
        else
        {
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
          {
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              id v29 = a1;
              if (![v29 actionType])
              {
                [v29 _populateCKRecordWithIMGroupActionItemFields:v22];

                goto LABEL_28;
              }
              if (IMOSLoggingEnabled())
              {
                BOOL v30 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 134217984;
                  id v34 = (id)[v29 actionType];
                  _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "Cannot sync item because it is an incompatible action type %lld", buf, 0xCu);
                }
              }
            }
            else
            {
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                [a1 _populateCKRecordWithIMMessageActionItemFields:v22];
                goto LABEL_28;
              }
              if (IMOSLoggingEnabled())
              {
                int v31 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)buf = 138412290;
                  id v34 = (id)objc_opt_class();
                  id v32 = v34;
                  _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "***** Error Tried to generate a CKRecord from class %@ ******", buf, 0xCu);
                }
              }
            }
            uint64_t v26 = 0;
            goto LABEL_29;
          }
          [a1 _populateCKRecordWithIMLocationShareStatusChangeItemFields:v22];
        }
      }
    }
LABEL_28:
    uint64_t v26 = objc_msgSend(MEMORY[0x1E4F1C978], "arrayWithObjects:", v22, 0);
LABEL_29:

LABEL_30:
    goto LABEL_31;
  }
  if (IMOSLoggingEnabled())
  {
    int v25 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "Do not create record for stewie chats", buf, 2u);
    }
  }
  uint64_t v26 = 0;
LABEL_31:

  return v26;
}

void sub_1D9730D24(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9730D04);
  }
  _Unwind_Resume(a1);
}

id sub_1D9730D80(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v76 = [v3 _stringForKey:@"SubType"];
  id v4 = [v3 objectForKeyedSubscript:@"msgType"];
  uint64_t v5 = [v4 integerValue];

  if ([v76 isEqualToString:@"SubTypeMsg"]) {
    uint64_t v6 = 1;
  }
  else {
    uint64_t v6 = v5;
  }
  id v73 = [v3 _stringForKey:@"sender"];
  id v75 = [v3 _dateForKey:@"time"];
  id v7 = [v3 _stringForKey:@"dcId"];
  double v74 = [v3 _stringForKey:@"guid"];
  uint64_t v72 = [v3 _stringForKey:@"svc"];
  long long v71 = [v3 _stringForKey:@"sender"];
  id v8 = [v3 _stringForKey:@"rGuid"];
  switch(v6)
  {
    case 1:
    case 2:
      long long v68 = [v3 _dateForKey:@"tRead"];
      long long v67 = [v3 _dateForKey:@"tDelivered"];
      long long v66 = [v3 _dateForKey:@"tPlayed"];
      uint64_t v70 = [v3 _stringForKey:@"subject"];
      id v9 = [MEMORY[0x1E4F28B88] whitespaceAndNewlineCharacterSet];
      long long v69 = [v70 stringByRemovingCharactersFromSet:v9];

      if (![v69 length])
      {

        uint64_t v70 = 0;
      }
      id v10 = [v3 _dataForKey:@"body"];
      if ([v10 length])
      {
        int v11 = JWDecodeCodableObjectWithStandardAllowlist();
        objc_opt_class();
        if (objc_opt_isKindOfClass()) {
          uint64_t v12 = objc_msgSend(v11, "__im_countMessageParts");
        }
        else {
          uint64_t v12 = 0;
        }
      }
      else
      {
        uint64_t v12 = 0;
      }
      __int16 v36 = [v3 _numberForKey:@"flags"];
      uint64_t v37 = [v36 integerValue];

      long long v65 = [v3 _stringForKey:@"BID"];
      uint64_t v64 = [v3 _dataForKey:@"pdata"];
      id v63 = [v3 _stringForKey:@"esid"];
      __int16 v38 = [v3 objectForKeyedSubscript:@"eCode"];
      int v39 = [v38 unsignedIntValue];

      id v40 = objc_alloc((Class)objc_opt_class());
      id v41 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v73 forKey:*MEMORY[0x1E4F6C5C8]];
      uint64_t v42 = [MEMORY[0x1E4F1C9C8] date];
      LODWORD(v62) = v39;
      id v13 = (id)objc_msgSend(v40, "initWithSenderInfo:time:timeRead:timeDelivered:timePlayed:subject:body:bodyData:attributes:fileTransferGUIDs:flags:guid:messageID:account:accountID:service:handle:roomName:unformattedID:countryCode:expireState:balloonBundleID:payloadData:expressiveSendStyleID:timeExpressiveSendPlayed:bizIntent:locale:biaReferenceID:errorType:threadIdentifier:syndicationRanges:syncedSyndicationRanges:partCount:dateEdited:scheduleType:scheduleState:", v41, v75, v68, v67, v66, v70, 0, v10, 0, 0, v37, v74, 0,
                  0,
                  0,
                  v72,
                  v71,
                  0,
                  0,
                  0,
                  0,
                  v65,
                  v64,
                  v63,
                  v42,
                  0,
                  0,
                  0,
                  v62,
                  0,
                  0,
                  0,
                  v12,
                  0,
                  0,
                  0);

      uint64_t v43 = [v3 recordType];
      int v44 = [v43 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v44)
      {
        uint64_t v45 = [v3 _dataForKey:@"msgProto"];
        id v46 = (id)[(id)objc_opt_class() populateIMMessageItemWithProtobufFields:v13 withProtobufData:v45];
        id v47 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
        int v48 = [v47 messageSyncP2Enabled];

        if (v48)
        {
          id v49 = [v3 _dataForKey:@"msgProto2"];
          if ([v49 length]) {
            id v50 = (id)[(id)objc_opt_class() populateIMMessageItemWithProtobufFields:v13 withProtobufDataP2:v49];
          }
        }
        id v51 = [v3 _dataForKey:@"msgProto3"];
        if ([v51 length]) {
          id v52 = (id)[(id)objc_opt_class() populateIMMessageItemWithProtobufFields:v13 withProtobufDataP3:v51];
        }
        __int16 v53 = [v3 _dataForKey:@"msgProto4"];
        if ([v53 length]) {
          id v54 = (id)[(id)objc_opt_class() populateIMMessageItemWithProtobufFields:v13 withProtobufDataP4:v53];
        }
      }
      break;
    case 3:
      id v20 = objc_alloc(MEMORY[0x1E4F6E7A8]);
      id v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v73 forKey:*MEMORY[0x1E4F6C5C8]];
      id v13 = (id)[v20 initWithSenderInfo:v21 time:v75 guid:v74 messageID:0 account:0 accountID:0 service:v72 handle:v71 roomName:0 unformattedID:0 countryCode:0 type:2];

      long long v22 = [v3 recordType];
      LODWORD(v21) = [v22 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v21)
      {
        int v16 = [v3 _dataForKey:@"msgProto"];
        id v23 = (id)[(id)objc_opt_class() populateIMGroupTitleChangeItem:v13 withProtobufData:v16];
        goto LABEL_27;
      }
      break;
    case 4:
      id v13 = (id)[objc_alloc(MEMORY[0x1E4F6E800]) initWithSender:0 time:v75 guid:v74 type:4];
      int v14 = [v3 recordType];
      int v15 = [v14 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v15)
      {
        int v16 = [v3 _dataForKey:@"msgProto"];
        id v17 = (id)[(id)objc_opt_class() populateIMLocationShareStatusChangeItem:v13 withProtobufData:v16];
        if ([v73 length]) {
          [v13 setSender:v73];
        }
        goto LABEL_27;
      }
      break;
    case 5:
      id v13 = (id)[objc_alloc(MEMORY[0x1E4F6E828]) initWithSender:v73 time:v75 guid:v74 type:5];
      int v24 = [v3 recordType];
      int v25 = [v24 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v25)
      {
        int v16 = [v3 _dataForKey:@"msgProto"];
        id v26 = (id)[(id)objc_opt_class() populateIMMessageActionItem:v13 withProtobufData:v16];
        goto LABEL_27;
      }
      break;
    case 6:
      __int16 v27 = (void *)[objc_alloc(MEMORY[0x1E4F6E8E0]) initWithSender:v73 time:v75 guid:v74 type:1];
      uint64_t v28 = [v3 _dateForKey:@"tRead"];
      [v27 setTimeRead:v28];

      id v13 = v27;
      id v29 = [v3 recordType];
      LODWORD(v28) = [v29 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v28)
      {
        BOOL v30 = [v3 _dataForKey:@"msgProto"];
        int v31 = [v3 _dataForKey:@"msgProto2"];
        id v32 = (id)[(id)objc_opt_class() populateIMParticipantChangeItem:v13 withProtobufData:v30 protobuf2Data:v31];
      }
      break;
    case 7:
      id v13 = (id)[objc_alloc(MEMORY[0x1E4F6E798]) initWithSender:v73 time:v75 guid:v74 type:3];
      unint64_t v33 = [v3 recordType];
      int v34 = [v33 isEqualToIgnoringCase:@"MessageEncryptedV3"];

      if (v34)
      {
        int v16 = [v3 _dataForKey:@"msgProto"];
        id v35 = (id)[(id)objc_opt_class() populateIMGroupActionItem:v13 withProtobufData:v16];
LABEL_27:
      }
      break;
    default:
      if (IMOSLoggingEnabled())
      {
        __int16 v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          id v19 = [NSNumber numberWithInteger:v6];
          *(_DWORD *)buf = 138412290;
          __int16 v78 = v19;
          _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "****** initiWithCKRecord called with unsupported message type %@ *****", buf, 0xCu);
        }
      }
      id v13 = 0;
      break;
  }
  uint64_t v55 = [v13 service];
  BOOL v56 = [v55 length] == 0;

  if (v56) {
    [v13 setService:v72];
  }
  if ([v7 length]) {
    [v13 setDestinationCallerID:v7];
  }
  if ([v8 length]) {
    [v13 setReplyToGUID:v8];
  }
  uint64_t v57 = [v3 _stringForKey:@"chatID"];
  [v13 setParentChatID:v57];

  uint64_t v58 = [v3 recordID];
  id v59 = [v58 recordName];
  [v13 setCloudKitRecordID:v59];

  long long v60 = [v3 recordChangeTag];
  [v13 setCloudKitRecordChangeTag:v60];

  [v13 setCloudKitSyncState:1];
  [v13 setCloudKitServerChangeTokenBlob:0];

  return v13;
}

void sub_1D9731870(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = [v5 _stringForKey:@"guid"];
  if ([v6 length])
  {
    uint64_t v7 = +[IMDMessageStore sharedInstance];
    id v8 = [(id)v7 itemWithGUID:v6];

    [v8 setCloudKitRecordID:0];
    [v8 setCloudKitRecordChangeTag:0];
    [v8 setCloudKitSyncState:a4];
    [v8 setCloudKitServerChangeTokenBlob:0];
    objc_opt_class();
    LOBYTE(v7) = objc_opt_isKindOfClass();
    id v9 = +[IMDMessageStore sharedInstance];
    id v10 = v9;
    if (v7) {
      id v11 = (id)[v9 storeMessage:v8 forceReplace:0 modifyError:0 modifyFlags:0 flagMask:0x2000];
    }
    else {
      id v13 = (id)[v9 storeItem:v8 forceReplace:0];
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v14 = 138412290;
      id v15 = v5;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "We don't have a valid guid for the message record we want to reset sync state: %@", (uint8_t *)&v14, 0xCu);
    }
  }
}

uint64_t sub_1D9731A4C(void *a1, uint64_t a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (!MEMORY[0x1E0169B60]()) {
    goto LABEL_5;
  }
  id v5 = [MEMORY[0x1E4F61740] sharedInstance];
  if ([v5 deviceType] != 2 || (objc_msgSend(v5, "SIMInserted") & 1) != 0)
  {

LABEL_5:
    uint64_t v6 = 0;
    goto LABEL_6;
  }
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = [a1 guid];
      id v10 = [a1 destinationCallerID];
      int v11 = 138412546;
      id v12 = v9;
      __int16 v13 = 2112;
      int v14 = v10;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Phone number destination callerID [%@] is unselected on phone but phone does not have SIM inserted and caller ID is a phone number so will store message [%@] anyways", (uint8_t *)&v11, 0x16u);
    }
  }

  uint64_t v6 = 1;
LABEL_6:

  return v6;
}

BOOL sub_1D9731BC0(void *a1)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v2 = [a1 destinationCallerID];
  id v3 = +[IMDCKUtilities readAliasesFromDefaults];
  v21[0] = 0;
  v21[1] = v21;
  v21[2] = 0x2020000000;
  char v22 = 0;
  uint64_t v17 = 0;
  __int16 v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 1;
  if ([a1 callerIDShouldBeCheckedForRegistration:v2])
  {
    id v4 = [a1 _accountControllerSharedInstance];
    id v5 = [v4 activeAccounts];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1D9731F50;
    v16[3] = &unk_1E6B75398;
    void v16[4] = a1;
    v16[5] = v21;
    v16[6] = &v17;
    [v5 enumerateObjectsUsingBlock:v16];

    uint64_t v6 = v18;
    if (*((unsigned char *)v18 + 24) || !v3)
    {
      if (*((unsigned char *)v18 + 24))
      {
        char v10 = 1;
      }
      else
      {
        char v10 = [a1 _shouldDownloadIfPhoneNumberAndNoSIM:v2];
        uint64_t v6 = v18;
      }
      *((unsigned char *)v6 + 24) = v10;
    }
    else
    {
      uint64_t v7 = [v3 objectForKeyedSubscript:@"selectedAliases"];
      id v8 = [v3 objectForKeyedSubscript:@"allAliases"];
      if ([v7 containsObject:v2]
        && [v8 containsObject:v2])
      {
        *((unsigned char *)v18 + 24) = 1;
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v24 = v2;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Skipping shouldStore check, destinationCallerID: %@", buf, 0xCu);
    }
  }
  if (!*((unsigned char *)v18 + 24) && IMOSLoggingEnabled())
  {
    int v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      id v12 = [a1 guid];
      __int16 v13 = [a1 destinationCallerID];
      *(_DWORD *)buf = 138412546;
      id v24 = v12;
      __int16 v25 = 2112;
      id v26 = v13;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "We should not store the message [%@] because our destination callerID [%@] has been unselected from list of available aliases", buf, 0x16u);
    }
  }
  BOOL v14 = *((unsigned char *)v18 + 24) != 0;
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(v21, 8);

  return v14;
}

void sub_1D9731EE0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9731E78);
  }
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D9731F50(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  uint64_t v7 = [v6 service];
  id v8 = [v7 internalName];
  int v9 = [v8 isEqualToString:*MEMORY[0x1E4F6E1B0]];

  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      char v10 = [v6 idsAccount];
      long long v47 = 0u;
      long long v48 = 0u;
      long long v45 = 0u;
      long long v46 = 0u;
      int v11 = objc_msgSend(v10, "im_registeredURIs");
      uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v46;
        while (2)
        {
          for (uint64_t i = 0; i != v12; ++i)
          {
            if (*(void *)v46 != v13) {
              objc_enumerationMutation(v11);
            }
            uint64_t v15 = *(void **)(*((void *)&v45 + 1) + 8 * i);
            uint64_t v16 = [*(id *)(a1 + 32) destinationCallerID];
            LODWORD(v15) = [v15 isEqualToString:v16];

            if (v15)
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
              *a4 = 1;
              goto LABEL_26;
            }
          }
          uint64_t v12 = [v11 countByEnumeratingWithState:&v45 objects:v51 count:16];
          if (v12) {
            continue;
          }
          break;
        }
      }

      long long v43 = 0u;
      long long v44 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      int v11 = [v10 vettedAliases];
      uint64_t v17 = [v11 countByEnumeratingWithState:&v41 objects:v50 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v42;
        while (2)
        {
          for (uint64_t j = 0; j != v17; ++j)
          {
            if (*(void *)v42 != v18) {
              objc_enumerationMutation(v11);
            }
            char v20 = *(void **)(*((void *)&v41 + 1) + 8 * j);
            id v21 = [*(id *)(a1 + 32) destinationCallerID];
            LODWORD(v20) = [v20 isEqualToString:v21];

            if (v20)
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 0;
              goto LABEL_26;
            }
          }
          uint64_t v17 = [v11 countByEnumeratingWithState:&v41 objects:v50 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }
LABEL_26:
    }
    else if (IMOSLoggingEnabled())
    {
      char v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "We have an iMessage account that is not backed by an ids account ---- please file a radar", buf, 2u);
      }
    }
  }
  id v23 = [v6 service];
  id v24 = [v23 internalName];
  int v25 = [v24 isEqualToString:*MEMORY[0x1E4F6E1A0]];

  if (v25)
  {
    if (IMSharedHelperDeviceHasMultipleSubscriptions())
    {
      id v26 = [MEMORY[0x1E4F6E660] IMPhoneNumbersEnabledForMultipleSubscriptionDevice];
      long long v38 = 0u;
      long long v39 = 0u;
      long long v36 = 0u;
      long long v37 = 0u;
      uint64_t v27 = [v26 countByEnumeratingWithState:&v36 objects:v49 count:16];
      if (v27)
      {
        uint64_t v28 = *(void *)v37;
        do
        {
          for (uint64_t k = 0; k != v27; ++k)
          {
            if (*(void *)v37 != v28) {
              objc_enumerationMutation(v26);
            }
            BOOL v30 = *(void **)(*((void *)&v36 + 1) + 8 * k);
            int v31 = [*(id *)(a1 + 32) destinationCallerID];
            LODWORD(v30) = [v30 isEqualToString:v31];

            if (v30)
            {
              *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
              *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
              *a4 = 1;
            }
          }
          uint64_t v27 = [v26 countByEnumeratingWithState:&v36 objects:v49 count:16];
        }
        while (v27);
      }
    }
    else
    {
      id v32 = [v6 loginID];
      unint64_t v33 = [v32 _stripFZIDPrefix];
      int v34 = [*(id *)(a1 + 32) destinationCallerID];
      int v35 = [v33 isEqualToString:v34];

      if (v35)
      {
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
        *a4 = 1;
      }
    }
  }
}

uint64_t sub_1D97323D0()
{
  return 1;
}

void sub_1D97323D8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4)
  {
    unint64_t v5 = 0;
    char v19 = 0;
    uint64_t v18 = v4;
    while (1)
    {
      if (v5)
      {
        id v6 = [NSString stringWithFormat:@"%@-%d", @"mmcs-url", v5];
        uint64_t v7 = [a1 _stringForKey:v6];

        id v8 = [NSString stringWithFormat:@"%@-%d", @"mmcs-signature-hex", v5];
        int v9 = [a1 _stringForKey:v8];

        char v10 = [NSString stringWithFormat:@"%@-%d", @"mmcs-owner", v5];
        int v11 = [a1 _stringForKey:v10];

        uint64_t v12 = [NSString stringWithFormat:@"%@-%d", @"decryption-key", v5];
        uint64_t v13 = [a1 _stringForKey:v12];

        BOOL v14 = [NSString stringWithFormat:@"%@-%d", @"file-size", v5];
        uint64_t v15 = [a1 objectForKey:v14];
        uint64_t v16 = [v15 stringValue];

        if (v7) {
          goto LABEL_7;
        }
      }
      else
      {
        uint64_t v7 = [a1 objectForKeyedSubscript:@"mmcs-url"];
        int v9 = [a1 objectForKeyedSubscript:@"mmcs-signature-hex"];
        int v11 = [a1 objectForKeyedSubscript:@"mmcs-owner"];
        uint64_t v13 = [a1 objectForKeyedSubscript:@"decryption-key"];
        uint64_t v16 = [a1 objectForKeyedSubscript:@"file-size"];
        if (v7)
        {
LABEL_7:
          if (v9 && v11 && v13) {
            v18[2](v18, v7, v9, v11, v13, v16, &v19);
          }
        }
      }

      if (!v19 && v5++ < 9) {
        continue;
      }
      id v4 = v18;
      break;
    }
  }
}

void sub_1D9732658(void *a1, uint64_t a2, char a3, void *a4)
{
  id v6 = a4;
  if (v6)
  {
    uint64_t v39 = 0;
    id v40 = &v39;
    uint64_t v41 = 0x2020000000;
    char v42 = 0;
    uint64_t v33 = 0;
    int v34 = &v33;
    uint64_t v35 = 0x3032000000;
    long long v36 = sub_1D9732924;
    long long v37 = sub_1D9732934;
    id v38 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = &v27;
    uint64_t v29 = 0x3032000000;
    BOOL v30 = sub_1D9732924;
    int v31 = sub_1D9732934;
    id v32 = 0;
    uint64_t v21 = 0;
    char v22 = &v21;
    uint64_t v23 = 0x3032000000;
    id v24 = sub_1D9732924;
    int v25 = sub_1D9732934;
    id v26 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = &v15;
    uint64_t v17 = 0x3032000000;
    uint64_t v18 = sub_1D9732924;
    char v19 = sub_1D9732934;
    id v20 = 0;
    uint64_t v9 = 0;
    char v10 = &v9;
    uint64_t v11 = 0x3032000000;
    uint64_t v12 = sub_1D9732924;
    uint64_t v13 = sub_1D9732934;
    id v14 = 0;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1D973293C;
    v7[3] = &unk_1E6B753C0;
    char v8 = a3;
    void v7[4] = &v39;
    void v7[5] = &v9;
    v7[6] = &v33;
    v7[7] = &v27;
    v7[8] = &v21;
    v7[9] = &v15;
    objc_msgSend(a1, "__message_iterateFileTransferUserInfoWithCompletion:", v7);
    v6[2](v6, *((unsigned __int8 *)v40 + 24), v34[5], v28[5], v22[5], v16[5], v10[5]);
    _Block_object_dispose(&v9, 8);

    _Block_object_dispose(&v15, 8);
    _Block_object_dispose(&v21, 8);

    _Block_object_dispose(&v27, 8);
    _Block_object_dispose(&v33, 8);

    _Block_object_dispose(&v39, 8);
  }
}

void sub_1D97328D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  _Block_object_dispose(&a21, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  _Block_object_dispose((const void *)(v33 - 112), 8);
  _Block_object_dispose((const void *)(v33 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9732924(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9732934(uint64_t a1)
{
}

void sub_1D973293C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v19 = a2;
  id v18 = a3;
  id v12 = a4;
  id v13 = a5;
  id v14 = a6;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  uint64_t v15 = [v14 longLongValue];
  uint64_t v16 = v15;
  if (!*(unsigned char *)(a1 + 80) || v15 <= 104857600)
  {
    uint64_t v17 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
    if (!v17 || v16 < objc_msgSend(v17, "longLongValue", v18))
    {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a2);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 56) + 8) + 40), a3);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), a4);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40), a5);
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a6);
    }
  }
}

uint64_t sub_1D9732E84()
{
  qword_1EBE2BB58 = (uint64_t)os_log_create("com.apple.Messages", "BlastdoorReceivePipeline");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97331A0()
{
  id v0 = objc_alloc(MEMORY[0x1E4F77E60]);
  qword_1EBE2BE20 = [v0 initWithBlastDoorInstanceType:*MEMORY[0x1E4F50A40]];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97331EC()
{
  id v0 = objc_alloc(MEMORY[0x1E4F77E60]);
  qword_1EBE2BE28 = [v0 initWithBlastDoorInstanceType:*MEMORY[0x1E4F50A48]];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9733238()
{
  id v0 = objc_alloc(MEMORY[0x1E4F77E60]);
  qword_1EA8CA4D0 = [v0 initWithBlastDoorInstanceType:*MEMORY[0x1E4F50A38]];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9733980()
{
  uint64_t result = MEMORY[0x1E0169C30](@"LSApplicationWorkspace", @"CoreServices");
  qword_1EA8CA4D8 = result;
  return result;
}

void sub_1D97339B0(uint64_t a1, void *a2)
{
  if (![a2 response])
  {
    id v3 = NSString;
    id v4 = [MEMORY[0x1E4F61740] sharedInstance];
    unint64_t v5 = [v4 productBuildVersion];
    id v28 = [v3 stringWithFormat:@"TTR:%@ iMessage BlastDoor Failure: %@", v5, *(void *)(a1 + 32)];

    id v6 = [NSString stringWithFormat:@"An incoming message failed validation inside of BlastDoor.\n\nMessage type: %@\nGUID: %@\n\nError: %@", *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 32)];
    uint64_t v7 = [MEMORY[0x1E4F28B88] URLHostAllowedCharacterSet];
    char v8 = NSString;
    uint64_t v9 = [v28 stringByAddingPercentEncodingWithAllowedCharacters:v7];
    uint64_t v27 = v6;
    char v10 = [v6 stringByAddingPercentEncodingWithAllowedCharacters:v7];
    uint64_t v11 = [@"Crash/Hang/Data Loss" stringByAddingPercentEncodingWithAllowedCharacters:v7];
    id v12 = [@"I Didn't Try" stringByAddingPercentEncodingWithAllowedCharacters:v7];
    id v13 = [@"450305" stringByAddingPercentEncodingWithAllowedCharacters:v7];
    id v14 = [@"Messages" stringByAddingPercentEncodingWithAllowedCharacters:v7];
    uint64_t v15 = [@"all" stringByAddingPercentEncodingWithAllowedCharacters:v7];
    uint64_t v16 = [v8 stringWithFormat:@"tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&", v9, v10, v11, v12, v13, v14, v15];

    if (*(void *)(a1 + 56))
    {
      uint64_t v17 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v18 = [*(id *)(a1 + 56) path];
      int v19 = [v17 fileExistsAtPath:v18];

      id v20 = v27;
      if (v19)
      {
        uint64_t v21 = NSString;
        char v22 = [*(id *)(a1 + 56) path];
        uint64_t v23 = [v22 stringByAddingPercentEncodingWithAllowedCharacters:v7];
        uint64_t v24 = [v21 stringWithFormat:@"%@&Attachments=%@", v16, v23];

        uint64_t v16 = (void *)v24;
      }
    }
    else
    {
      id v20 = v27;
    }
    int v25 = [MEMORY[0x1E4F1CB10] URLWithString:v16];
    id v26 = [(id)qword_1EA8CA4D8 defaultWorkspace];
    [v26 openURL:v25 configuration:0 completionHandler:0];
  }
}

uint64_t sub_1D9734310()
{
  qword_1EA8CA4E8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA80]);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D973434C()
{
  return MEMORY[0x1F4181798](IMBlastdoor, sel__askToTapToRadarForGUID_messageTypeString_sender_errorString_payloadAttachmentURL_);
}

void sub_1D973474C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, long long buf)
{
  if (a2 == 1)
  {
    id v19 = objc_begin_catch(a1);
    id v20 = +[IMBlastdoor logger];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = a10;
      _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_DEFAULT, "Failed processing command through BlastDoor: %ld", (uint8_t *)&buf, 0xCu);
    }

    objc_end_catch();
    JUMPOUT(0x1D97346F4);
  }
  _Unwind_Resume(a1);
}

void sub_1D97347F4(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = +[IMBlastdoor logger];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218498;
    id v20 = v7;
    __int16 v21 = 1024;
    int v22 = a2;
    __int16 v23 = 2112;
    uint64_t v24 = v10;
    _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received (command: %hhu, guid: %@)", buf, 0x1Cu);
  }

  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1D973497C;
  void v14[3] = &unk_1E6B75438;
  id v11 = *(id *)(a1 + 40);
  id v16 = v8;
  id v17 = v11;
  char v18 = a2;
  id v15 = v7;
  id v12 = v8;
  id v13 = v7;
  dispatch_async(MEMORY[0x1E4F14428], v14);
}

uint64_t sub_1D973497C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void))(*(void *)(a1 + 48) + 16))(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1D9734C70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t block, uint64_t a17, uint64_t (*a18)(uint64_t a1), void *a19, void *a20,id a21)
{
  if (a2 == 1)
  {
    id v25 = objc_begin_catch(exception_object);
    id v26 = [*(id *)(v23 + 2528) logger];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = [v25 name];
      id v28 = [v25 reason];
      *(_DWORD *)(v24 - 112) = 138412546;
      *(void *)(v22 + 4) = v27;
      *(_WORD *)(v24 - 100) = 2112;
      *(void *)(v22 + 14) = v28;
      _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_DEFAULT, "Failed processing SMS/MMS dictionary through BlastDoor name=(%@); reason=(%@)",
        (uint8_t *)(v24 - 112),
        0x16u);
    }
    id v29 = objc_alloc(MEMORY[0x1E4F28C58]);
    BOOL v30 = (void *)[v29 initWithDomain:*MEMORY[0x1E4F6BE80] code:3 userInfo:0];
    blocuint64_t k = MEMORY[0x1E4F143A8];
    a17 = 3221225472;
    a18 = sub_1D9734F70;
    a19 = &unk_1E6B73A10;
    id v31 = v21;
    a20 = v30;
    a21 = v31;
    id v32 = v30;
    dispatch_async(MEMORY[0x1E4F14428], &block);

    objc_end_catch();
    JUMPOUT(0x1D9734C28);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D9734DEC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = +[IMBlastdoor logger];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 32);
    *(_DWORD *)buf = 134218242;
    id v17 = v5;
    __int16 v18 = 2112;
    uint64_t v19 = v8;
    _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor response %p received (guid: %@)", buf, 0x16u);
  }

  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D9734F58;
  block[3] = &unk_1E6B73AD8;
  id v9 = *(id *)(a1 + 40);
  id v14 = v6;
  id v15 = v9;
  id v13 = v5;
  id v10 = v6;
  id v11 = v5;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D9734F58(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D9734F70(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

uint64_t sub_1D9734F88(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D97351AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = [*(id *)(v16 + 2528) logger];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = [v18 name];
      __int16 v21 = [v18 reason];
      *(_DWORD *)(v17 - 96) = 138412546;
      uint64_t v22 = v17 - 96;
      *(void *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(void *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Clear Notice through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);
    }
    id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v24 = (void *)[v23 initWithDomain:*MEMORY[0x1E4F6BE80] code:9 userInfo:0];
    blocuint64_t k = MEMORY[0x1E4F143A8];
    a11 = 3221225472;
    a12 = sub_1D97354B4;
    a13 = &unk_1E6B73A10;
    id v25 = v15;
    a14 = v24;
    a15 = v25;
    id v26 = v24;
    dispatch_async(MEMORY[0x1E4F14428], &block);

    objc_end_catch();
    JUMPOUT(0x1D9735168);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D9735328(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D9735340(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = +[IMBlastdoor logger];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v16 = v5;
    _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseClearNoticePayload, notice: %p", buf, 0xCu);
  }

  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D973549C;
  block[3] = &unk_1E6B73AD8;
  id v8 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D973549C(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D97354B4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D97356D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = [*(id *)(v16 + 2528) logger];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = [v18 name];
      __int16 v21 = [v18 reason];
      *(_DWORD *)(v17 - 96) = 138412546;
      uint64_t v22 = v17 - 96;
      *(void *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(void *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Collaboration Notice through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);
    }
    id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v24 = (void *)[v23 initWithDomain:*MEMORY[0x1E4F6BE80] code:5 userInfo:0];
    blocuint64_t k = MEMORY[0x1E4F143A8];
    a11 = 3221225472;
    a12 = sub_1D97359E0;
    a13 = &unk_1E6B73A10;
    id v25 = v15;
    a14 = v24;
    a15 = v25;
    id v26 = v24;
    dispatch_async(MEMORY[0x1E4F14428], &block);

    objc_end_catch();
    JUMPOUT(0x1D9735694);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D9735854(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D973586C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = +[IMBlastdoor logger];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    id v16 = v5;
    _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseCollaborationNoticePayload, notice: %p", buf, 0xCu);
  }

  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D97359C8;
  block[3] = &unk_1E6B73AD8;
  id v8 = *(id *)(a1 + 32);
  id v13 = v6;
  id v14 = v8;
  id v12 = v5;
  id v9 = v6;
  id v10 = v5;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D97359C8(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

uint64_t sub_1D97359E0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D9735C04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t block, uint64_t a11, uint64_t (*a12)(uint64_t a1), void *a13, void *a14, id a15)
{
  if (a2 == 1)
  {
    id v18 = objc_begin_catch(exception_object);
    uint64_t v19 = [*(id *)(v16 + 2528) logger];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = [v18 name];
      __int16 v21 = [v18 reason];
      *(_DWORD *)(v17 - 96) = 138412546;
      uint64_t v22 = v17 - 96;
      *(void *)(v22 + 4) = v20;
      *(_WORD *)(v17 - 84) = 2112;
      *(void *)(v22 + 14) = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_DEFAULT, "Failed processing Collaboration Notice Action through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)(v17 - 96),
        0x16u);
    }
    id v23 = objc_alloc(MEMORY[0x1E4F28C58]);
    uint64_t v24 = (void *)[v23 initWithDomain:*MEMORY[0x1E4F6BE80] code:5 userInfo:0];
    blocuint64_t k = MEMORY[0x1E4F143A8];
    a11 = 3221225472;
    a12 = sub_1D9735F44;
    a13 = &unk_1E6B73A10;
    id v25 = v15;
    a14 = v24;
    a15 = v25;
    id v26 = v24;
    dispatch_async(MEMORY[0x1E4F14428], &block);

    objc_end_catch();
    JUMPOUT(0x1D9735BC0);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D9735D80(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), -1, 0, *(void *)(a1 + 32));
}

void sub_1D9735D9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = +[IMBlastdoor logger];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = [NSNumber numberWithInteger:a2];
    *(_DWORD *)buf = 138412546;
    uint64_t v19 = v10;
    __int16 v20 = 2112;
    id v21 = v7;
    _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEFAULT, "Blastdoor defuseCollaborationNoticeActionDictionary, actionType: %@, guids: %@", buf, 0x16u);
  }
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = sub_1D9735F2C;
  v13[3] = &unk_1E6B75500;
  id v16 = *(id *)(a1 + 32);
  uint64_t v17 = a2;
  id v14 = v7;
  id v15 = v8;
  id v11 = v8;
  id v12 = v7;
  dispatch_async(MEMORY[0x1E4F14428], v13);
}

uint64_t sub_1D9735F2C(void *a1)
{
  return (*(uint64_t (**)(void, void, void, void))(a1[6] + 16))(a1[6], a1[7], a1[4], a1[5]);
}

uint64_t sub_1D9735F44(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), -1, 0, *(void *)(a1 + 32));
}

void sub_1D97360CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = [*(id *)(v10 + 2528) logger];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [v11 name];
      id v14 = [v11 reason];
      LODWORD(a9) = 138412546;
      *(void *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(void *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing lite message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);
    }
    if (v9)
    {
      id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
      *id v9 = (id)[v15 initWithDomain:*MEMORY[0x1E4F6BE80] code:10 userInfo:0];
    }

    objc_end_catch();
    JUMPOUT(0x1D9736078);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D9736340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = [*(id *)(v10 + 2528) logger];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [v11 name];
      id v14 = [v11 reason];
      LODWORD(a9) = 138412546;
      *(void *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(void *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing satellite SMS message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);
    }
    if (v9)
    {
      id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
      *id v9 = (id)[v15 initWithDomain:*MEMORY[0x1E4F6BE80] code:11 userInfo:0];
    }

    objc_end_catch();
    JUMPOUT(0x1D97362ECLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D97365CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = [*(id *)(v10 + 2528) logger];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [v11 name];
      id v14 = [v11 reason];
      LODWORD(a9) = 138412546;
      *(void *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(void *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing group relay message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);
    }
    if (v9)
    {
      id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
      *id v9 = (id)[v15 initWithDomain:*MEMORY[0x1E4F6BE80] code:12 userInfo:0];
    }

    objc_end_catch();
    JUMPOUT(0x1D9736578);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D9736858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = [*(id *)(v10 + 2528) logger];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [v11 name];
      id v14 = [v11 reason];
      LODWORD(a9) = 138412546;
      *(void *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(void *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing relay reachability request message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);
    }
    if (v9)
    {
      id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
      *id v9 = (id)[v15 initWithDomain:*MEMORY[0x1E4F6BE80] code:13 userInfo:0];
    }

    objc_end_catch();
    JUMPOUT(0x1D9736804);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D9736AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v11 = objc_begin_catch(exception_object);
    id v12 = [*(id *)(v10 + 2528) logger];
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = [v11 name];
      id v14 = [v11 reason];
      LODWORD(a9) = 138412546;
      *(void *)((char *)&a9 + 4) = v13;
      WORD6(a9) = 2112;
      *(void *)((char *)&a9 + 14) = v14;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEFAULT, "Failed processing relay reachability response message through Blastdoor name=(%@); reason=(%@)",
        (uint8_t *)&a9,
        0x16u);
    }
    if (v9)
    {
      id v15 = objc_alloc(MEMORY[0x1E4F28C58]);
      *id v9 = (id)[v15 initWithDomain:*MEMORY[0x1E4F6BE80] code:14 userInfo:0];
    }

    objc_end_catch();
    JUMPOUT(0x1D9736A90);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D9737784(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D973750CLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D9737854(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v38 = [v2 count];
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Family IDS lookup result had %lu elements", buf, 0xCu);
    }
  }
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v5 = v2;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v32 objects:v41 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v33;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v32 + 1) + 8 * i);
        uint64_t v10 = [v5 objectForKey:v9];
        if (IMOSLoggingEnabled())
        {
          id v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = [v10 count];
            *(_DWORD *)buf = 134218242;
            uint64_t v38 = v12;
            __int16 v39 = 2112;
            uint64_t v40 = v9;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Found %lu IDS endpoints for Family member with handle %@", buf, 0x16u);
          }
        }
        long long v30 = 0u;
        long long v31 = 0u;
        long long v28 = 0u;
        long long v29 = 0u;
        id v13 = v10;
        uint64_t v14 = [v13 countByEnumeratingWithState:&v28 objects:v36 count:16];
        if (v14)
        {
          uint64_t v15 = *(void *)v29;
          while (2)
          {
            for (uint64_t j = 0; j != v14; ++j)
            {
              if (*(void *)v29 != v15) {
                objc_enumerationMutation(v13);
              }
              uint64_t v17 = [*(id *)(*((void *)&v28 + 1) + 8 * j) senderCorrelationIdentifier];
              if (v17)
              {
                [v4 addObject:v17];

                goto LABEL_24;
              }
            }
            uint64_t v14 = [v13 countByEnumeratingWithState:&v28 objects:v36 count:16];
            if (v14) {
              continue;
            }
            break;
          }
        }
LABEL_24:
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v32 objects:v41 count:16];
    }
    while (v6);
  }

  if (IMOSLoggingEnabled())
  {
    id v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      uint64_t v19 = [v4 count];
      *(_DWORD *)buf = 134217984;
      uint64_t v38 = v19;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "There were %lu SCIs in allFamilyMemberSCIs", buf, 0xCu);
    }
  }
  __int16 v20 = [*(id *)(a1 + 32) idsTrustedData];
  id v21 = [v20 senderCorrelationIdentifier];
  int v22 = [v4 containsObject:v21];

  if (v22)
  {
    if (IMOSLoggingEnabled())
    {
      id v23 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "Found family member relation using SCI", buf, 2u);
      }
    }
    [*(id *)(a1 + 40) fullfillWithValue:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v24 = IMLogHandleForCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      sub_1D99011F8(a1);
    }

    id v25 = *(void **)(a1 + 40);
    id v26 = [*(id *)(a1 + 32) _generateError:@"Could not find sender correlation identifier in SCI list derived from Family"];
    [v25 failWithError:v26];
  }
}

Class sub_1D9738224(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  v3[0] = 0;
  if (!qword_1EA8CA500)
  {
    v3[1] = (void *)MEMORY[0x1E4F143A8];
    v3[2] = (void *)3221225472;
    v3[3] = sub_1D9738350;
    void v3[4] = &unk_1E6B72BE8;
    void v3[5] = v3;
    long long v4 = xmmword_1E6B75570;
    uint64_t v5 = 0;
    qword_1EA8CA500 = _sl_dlopen();
  }
  if (!qword_1EA8CA500) {
    sub_1D9901284(v3);
  }
  if (v3[0]) {
    free(v3[0]);
  }
  Class result = objc_getClass("FAFetchFamilyCircleRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1D9901304();
  }
  qword_1EA8CA4F8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1D9738350()
{
  uint64_t result = _sl_dlopen();
  qword_1EA8CA500 = result;
  return result;
}

void sub_1D97383C4(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

uint64_t sub_1D9738438()
{
  qword_1EBE2B980 = objc_alloc_init(IMDCKCacheDeleteManager);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9738D30(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Registering with cache delete upon launch", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _cacheDeleteSetUp];
}

void sub_1D97390E0(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 64));
  _Unwind_Resume(a1);
}

void sub_1D9739124(uint64_t a1)
{
  objc_copyWeak(&v1, (id *)(a1 + 32));
  CacheDeleteEnumerateRemovedFiles();
  objc_destroyWeak(&v1);
}

void sub_1D97391BC(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  _Unwind_Resume(a1);
}

void sub_1D97391D0(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v20;
    uint64_t v7 = (id *)(a1 + 32);
    *(void *)&long long v5 = 138412290;
    long long v14 = v5;
LABEL_3:
    uint64_t v8 = 0;
    while (1)
    {
      if (*(void *)v20 != v6) {
        objc_enumerationMutation(v3);
      }
      uint64_t v9 = *(void **)(*((void *)&v19 + 1) + 8 * v8);
      if (IMOSLoggingEnabled())
      {
        uint64_t v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v14;
          uint64_t v24 = v9;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Purge event: %@", buf, 0xCu);
        }
      }
      id v11 = objc_msgSend(v9, "objectForKeyedSubscript:", @"rescan", v14);

      if (v11) {
        break;
      }
      uint64_t v12 = [v9 objectForKeyedSubscript:@"historyDone"];

      if (v12)
      {
        v17[0] = MEMORY[0x1E4F143A8];
        v17[1] = 3221225472;
        void v17[2] = sub_1D9739530;
        v17[3] = &unk_1E6B75590;
        objc_copyWeak(&v18, v7);
        dispatch_async(MEMORY[0x1E4F14428], v17);
        if (IMOSLoggingEnabled())
        {
          id v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Purge notification - All done", buf, 2u);
          }
        }
        CacheDeleteSyncDone();
        objc_destroyWeak(&v18);
        break;
      }
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1D9739588;
      block[3] = &unk_1E6B755B8;
      objc_copyWeak(&v16, v7);
      void block[4] = v9;
      dispatch_async(MEMORY[0x1E4F14428], block);
      objc_destroyWeak(&v16);
      if (v4 == ++v8)
      {
        uint64_t v4 = [v3 countByEnumeratingWithState:&v19 objects:v25 count:16];
        if (v4) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
}

void sub_1D9739530(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  id v1 = [WeakRetained purgedAttachmentHandler];
  [v1 complete];
}

void sub_1D9739588(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  uint64_t v2 = [WeakRetained purgedAttachmentHandler];
  id v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"path"];
  [v2 registerPurgedAttachmentAtPath:v3];
}

uint64_t sub_1D9739608(uint64_t a1, int a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = [MEMORY[0x1E4F29060] isMainThread];
      uint64_t v8 = @"NO";
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)long long v28 = 2112;
      if (v7) {
        uint64_t v8 = @"YES";
      }
      *(void *)&v28[2] = v5;
      *(_WORD *)&v28[10] = 2112;
      *(void *)&v28[12] = v8;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "CacheDelete -- purgeable block called with urgency: %d info: %@ isMainThread: %@", buf, 0x1Cu);
    }
  }
  *(void *)buf = 0;
  *(void *)long long v28 = buf;
  *(void *)&v28[8] = 0x3032000000;
  *(void *)&v28[16] = sub_1D9739960;
  long long v29 = sub_1D9739970;
  id v30 = 0;
  uint64_t v9 = [*(id *)(a1 + 32) _ckUtilitiesSharedInstance];
  char v10 = [v9 accountIsVerifiedForMOCAndSafeForCacheDelete];

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D9739978;
  aBlock[3] = &unk_1E6B75630;
  char v24 = v10;
  uint64_t v11 = *(void *)(a1 + 32);
  long long v22 = buf;
  void aBlock[4] = v11;
  id v12 = v5;
  id v21 = v12;
  int v23 = a2;
  id v13 = (void (**)(void))_Block_copy(aBlock);
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    v13[2](v13);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97399E0;
    block[3] = &unk_1E6B731C8;
    long long v19 = v13;
    dispatch_sync(MEMORY[0x1E4F14428], block);
  }
  if (IMOSLoggingEnabled())
  {
    long long v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      uint64_t v15 = *(void *)(*(void *)v28 + 40);
      *(_DWORD *)id v25 = 138412290;
      uint64_t v26 = v15;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "purgeable callback dictionary: %@", v25, 0xCu);
    }
  }
  uint64_t v16 = *(void *)(*(void *)v28 + 40);

  _Block_object_dispose(buf, 8);
  return v16;
}

void sub_1D9739900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D97396E8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D9739960(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9739970(uint64_t a1)
{
}

uint64_t sub_1D9739978(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 60);
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v2) {
    objc_msgSend(v3, "__wrapperAroundCacheDeletePurgeableCallback:urgency:", v4, v5);
  }
  else {
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [v3 createDictionaryForNotDeletingAnyAttachments:v4 urgency:v5];
  }

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97399E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D97399F0(uint64_t a1, int a2, void *a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  if (a2 >= 1) {
    [*(id *)(a1 + 32) setDeviceLowOnDiskSpace:1];
  }
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = [MEMORY[0x1E4F29060] isMainThread];
      uint64_t v9 = @"NO";
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)long long v29 = 2112;
      if (v8) {
        uint64_t v9 = @"YES";
      }
      *(void *)&v29[2] = v6;
      *(_WORD *)&v29[10] = 2112;
      *(void *)&v29[12] = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "CacheDelete -- purge block called with urgency: %d info: %@ isMainThread: %@", buf, 0x1Cu);
    }
  }
  *(void *)buf = 0;
  *(void *)long long v29 = buf;
  *(void *)&v29[8] = 0x3032000000;
  *(void *)&v29[16] = sub_1D9739960;
  id v30 = sub_1D9739970;
  id v31 = 0;
  char v10 = [*(id *)(a1 + 32) _ckUtilitiesSharedInstance];
  char v11 = [v10 accountIsVerifiedForMOCAndSafeForCacheDelete];

  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D9739D64;
  aBlock[3] = &unk_1E6B75630;
  char v25 = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  int v23 = buf;
  void aBlock[4] = v12;
  id v13 = v6;
  id v22 = v13;
  int v24 = a2;
  long long v14 = (void (**)(void))_Block_copy(aBlock);
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    v14[2](v14);
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D9739DCC;
    block[3] = &unk_1E6B731C8;
    long long v20 = v14;
    dispatch_sync(MEMORY[0x1E4F14428], block);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(*(void *)v29 + 40);
      *(_DWORD *)uint64_t v26 = 138412290;
      uint64_t v27 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Purge callback with callback dictionary: %@", v26, 0xCu);
    }
  }
  uint64_t v17 = *(void *)(*(void *)v29 + 40);

  _Block_object_dispose(buf, 8);
  return v17;
}

void sub_1D9739D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D9739AE8);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1D9739D64(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 60);
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(unsigned int *)(a1 + 56);
  if (v2) {
    objc_msgSend(v3, "__wrapperAroundCacheDeletePurgingCallback:urgency:", v4, v5);
  }
  else {
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [v3 createDictionaryForNotDeletingAnyAttachments:v4 urgency:v5];
  }

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9739DCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D9739DE0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = [MEMORY[0x1E4F29060] isMainThread];
      int v8 = @"NO";
      *(_DWORD *)char v11 = 138412802;
      *(void *)&void v11[4] = v5;
      if (v7) {
        int v8 = @"YES";
      }
      *(_WORD *)&v11[12] = 1024;
      *(_DWORD *)&v11[14] = a2;
      __int16 v12 = 2112;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "CacheDelete -- periodic block called with info: %@ and urgency: %d isMainThread: %@", v11, 0x1Cu);
    }
  }
  uint64_t v9 = objc_msgSend(*(id *)(a1 + 32), "createDictionaryForNotDeletingAnyAttachments:urgency:", v5, a2, *(_OWORD *)v11);

  return v9;
}

void sub_1D973A12C()
{
  id v0 = (void *)MEMORY[0x1E4F1CB10];
  id v3 = [@"/var/mobile/Library/SMS" stringByExpandingTildeInPath];
  uint64_t v1 = [v0 fileURLWithPath:v3 isDirectory:1];
  int v2 = (void *)qword_1EA8CA508;
  qword_1EA8CA508 = v1;
}

void sub_1D973C534()
{
  id v0 = +[IMDCKAttachmentSyncController sharedInstance];
  [v0 setIsSyncing:0];
}

uint64_t sub_1D973C9B8(uint64_t a1, char a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 64)];
      id v6 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 72)];
      int v7 = [NSNumber numberWithUnsignedLong:*(void *)(a1 + 80)];
      int v10 = 138412802;
      char v11 = v5;
      __int16 v12 = 2112;
      id v13 = v6;
      __int16 v14 = 2112;
      uint64_t v15 = v7;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Completed fetching batch with starting index: %@ index of next batch: %@ for number of batches: %@", (uint8_t *)&v10, 0x20u);
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = a2;
  if (*(unsigned char *)(a1 + 88)) {
    return [*(id *)(a1 + 32) _fetchTransfersFromCloudKit:*(void *)(a1 + 40) indexOfTransfers:*(void *)(a1 + 72) numberOfBatchesToFetch:*(void *)(a1 + 80) activity:*(void *)(a1 + 48) withCompletion:*(void *)(a1 + 56)];
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "/*-------Fetched all transfers we wanted to validate------*/", (uint8_t *)&v10, 2u);
    }
  }
  uint64_t result = *(void *)(a1 + 56);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

id _MessageDateFromTimeStamp(void *a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  int v2 = [MEMORY[0x1E4F1C9C8] date];
  id v3 = v2;
  if (v1)
  {
    unint64_t v4 = [v1 unsignedLongLongValue];
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v14 = 138412290;
        double v15 = *(double *)&v1;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Converting timestamp: %@ to date", (uint8_t *)&v14, 0xCu);
      }
    }
    double v6 = (double)v4 / 1000000000.0;
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v14 = 134217984;
        double v15 = v6;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "  => seconds: %f", (uint8_t *)&v14, 0xCu);
      }
    }
    if (v6 <= 600000.0)
    {
      if (IMOSLoggingEnabled())
      {
        char v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "  => Returning current date, failed sanity", (uint8_t *)&v14, 2u);
        }
      }
      int v8 = [MEMORY[0x1E4F1C9C8] date];
    }
    else
    {
      int v8 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSince1970:v6];

      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          int v14 = 138412290;
          double v15 = *(double *)&v8;
          _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "  => Returning date: %@", (uint8_t *)&v14, 0xCu);
        }
      }
    }
    _ClampDate(v8);
    id v10 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v10 = v2;
    int v8 = v10;
  }
  __int16 v12 = v10;

  return v12;
}

uint64_t _ChatStyleFromChatStyleString(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:IMDRelayMessageDictionaryChatStyleInstantMessage])
  {
    uint64_t v2 = 45;
  }
  else if ([v1 isEqualToString:IMDRelayMessageDictionaryChatStyleGroup])
  {
    uint64_t v2 = 43;
  }
  else if ([v1 isEqualToString:IMDRelayMessageDictionaryChatStyleRoom])
  {
    uint64_t v2 = 35;
  }
  else
  {
    uint64_t v2 = 45;
  }

  return v2;
}

void sub_1D973D0CC(uint64_t a1, void *a2)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  long long v34 = a2;
  id v35 = *(id *)(a1 + 32);
  uint64_t v33 = a1;
  id v3 = [*(id *)(a1 + 40) relayEnrollmentController];
  [v3 _approveSelfForSMSRelay];

  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 40) service];
      double v6 = [v5 internalName];
      *(_DWORD *)buf = 138412290;
      long long v44 = v6;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ relay received Incoming Plain Text Message From Push Handler", buf, 0xCu);
    }
  }
  int v7 = [*(id *)(a1 + 40) relayController];
  if ([v7 watchConnectedOverBT])
  {
  }
  else
  {
    int v8 = [MEMORY[0x1E4F6B3E8] sharedInstance];
    uint64_t v9 = [v35 objectForKey:IMDCTMessageDictionarySenderKey];
    int v10 = [v8 isPhoneNumberEmergencyNumber:v9];

    if (v10)
    {
      if (IMOSLoggingEnabled())
      {
        char v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "This relay message has come from an emergency number, Not processing message", buf, 2u);
        }
      }
      v34[2]();
      goto LABEL_42;
    }
  }
  if (IMOSLoggingEnabled())
  {
    __int16 v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      id v13 = [v35 objectForKey:IMDCTMessageDictionaryReceipientsKey];
      *(_DWORD *)buf = 138412290;
      long long v44 = v13;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Recipients: %@", buf, 0xCu);
    }
  }
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  int v14 = [v35 objectForKey:IMDCTMessageDictionaryReceipientsKey];
  uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v42 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v39;
    while (2)
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v39 != v16) {
          objc_enumerationMutation(v14);
        }
        id v18 = *(void **)(*((void *)&v38 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          long long v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            long long v44 = v18;
            _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "  Recipient: %@", buf, 0xCu);
          }
        }
        long long v20 = [MEMORY[0x1E4F6B3E8] sharedInstance];
        int v21 = [v20 isPhoneNumberEmergencyNumber:v18];

        if (v21)
        {
          if (IMOSLoggingEnabled())
          {
            id v30 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "One of the recipients was an emergency number, this message should never have been relayed, not processing message", buf, 2u);
            }
          }
          v34[2]();

          goto LABEL_42;
        }
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v38 objects:v42 count:16];
      if (v15) {
        continue;
      }
      break;
    }
  }

  id v22 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v23 = [v22 isSMSFilterSyncEnabled];

  if (v23)
  {
    int v24 = [*(id *)(v33 + 40) relayController];
    char v25 = [v24 idsDeviceFromPushToken:*(void *)(v33 + 48)];

    if (IMOSLoggingEnabled())
    {
      uint64_t v26 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        uint64_t v27 = [v25 name];
        *(_DWORD *)buf = 138412290;
        long long v44 = v27;
        _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, " Incoming plain text message from %@", buf, 0xCu);
      }
    }
    long long v28 = (void *)[v35 mutableCopy];
    long long v29 = [v25 uniqueIDOverride];
    [v28 setObject:v29 forKeyedSubscript:IMDRelayDeviceUniqueIDKey];
  }
  else
  {
    long long v28 = v35;
  }
  id v31 = *(void **)(v33 + 40);
  uint64_t v32 = *(void *)(v33 + 56);
  v36[0] = MEMORY[0x1E4F143A8];
  v36[1] = 3221225472;
  v36[2] = sub_1D973D72C;
  v36[3] = &unk_1E6B756A8;
  long long v37 = v34;
  [v31 _processReceivedDictionary:v28 storageContext:v32 receivedViaRelay:1 withCompletionBlock:v36];

  id v35 = v28;
LABEL_42:
}

uint64_t sub_1D973D72C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D973D824(id *a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v17 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t v4 = [a1[4] service];
      id v5 = [v4 internalName];
      *(_DWORD *)buf = 138412290;
      uint64_t v26 = v5;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "%@ relay Received Incoming download Message From Push Handler", buf, 0xCu);
    }
  }
  double v6 = [a1[4] relayEnrollmentController];
  [v6 _approveSelfForSMSRelay];

  int v7 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v8 = objc_msgSend(v7, "im_randomTemporaryFileURLWithFileName:", IMDRelayDownloadMessageTemporaryPathKey);
  id v18 = [v8 path];

  long long v20 = [MEMORY[0x1E4F6EBF8] sharedInstance];
  long long v19 = [NSString stringGUID];
  uint64_t v9 = [a1[5] objectForKey:IMDRelayMessageAttachmentDictionaryURLStringKey];
  int v10 = [a1[5] objectForKey:IMDRelayMessageAttachmentDictionaryOwnerIDKey];
  char v11 = [a1[5] objectForKey:IMDRelayMessageAttachmentDictionarySignatureKey];
  __int16 v12 = [a1[5] objectForKey:IMDRelayMessageAttachmentDictionaryEncryptionKey];
  id v13 = [a1[5] objectForKey:IMDRelayMessageAttachmentDictionaryOutFileSizeKey];
  uint64_t v14 = [v13 integerValue];
  uint64_t v15 = *MEMORY[0x1E4F6AA68];
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D973DB54;
  void v21[3] = &unk_1E6B756F8;
  v21[4] = a1[4];
  id v24 = v17;
  id v22 = a1[6];
  id v23 = a1[7];
  id v16 = v17;
  [v20 receiveFileTransfer:v19 topic:v15 path:v18 requestURLString:v9 ownerID:v10 signature:v11 decryptionKey:v12 fileSize:v14 progressBlock:0 completionBlock:v21];
}

void sub_1D973DB54(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  id v44 = a2;
  id v11 = a3;
  id v46 = a5;
  id v45 = a6;
  if (!a4)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 138412290;
        id v57 = v46;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Unable to download incoming message: %@", buf, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_49;
  }
  long long v43 = (void *)[objc_alloc(MEMORY[0x1E4F1C9E8]) initWithContentsOfFile:v11];
  if (IMOSLoggingEnabled())
  {
    __int16 v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 138412290;
      id v57 = v11;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Sucessfully Retrieved binary NSDictionary Attachment for incoming message at path %@", buf, 0xCu);
    }
  }
  id v13 = objc_msgSend(*(id *)(a1 + 32), "relayController", a1);
  if ([v13 watchConnectedOverBT])
  {
  }
  else
  {
    uint64_t v15 = [MEMORY[0x1E4F6B3E8] sharedInstance];
    id v16 = [v43 objectForKey:IMDCTMessageDictionarySenderKey];
    int v17 = [v15 isPhoneNumberEmergencyNumber:v16];

    if (v17)
    {
      if (IMOSLoggingEnabled())
      {
        id v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "This relay message has come from an emergency number, Not processing message", buf, 2u);
        }
      }
      (*(void (**)(void))(*(void *)(v42 + 56) + 16))();
LABEL_46:

      goto LABEL_49;
    }
  }
  if (IMOSLoggingEnabled())
  {
    long long v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = [v43 objectForKey:IMDCTMessageDictionaryReceipientsKey];
      *(_DWORD *)buf = 138412290;
      id v57 = v20;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Recipients: %@", buf, 0xCu);
    }
  }
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  int v21 = [v43 objectForKey:IMDCTMessageDictionaryReceipientsKey];
  uint64_t v22 = [v21 countByEnumeratingWithState:&v51 objects:v55 count:16];
  if (v22)
  {
    uint64_t v23 = *(void *)v52;
    while (2)
    {
      for (uint64_t i = 0; i != v22; ++i)
      {
        if (*(void *)v52 != v23) {
          objc_enumerationMutation(v21);
        }
        char v25 = *(void **)(*((void *)&v51 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          uint64_t v26 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            id v57 = v25;
            _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "  Recipient: %@", buf, 0xCu);
          }
        }
        uint64_t v27 = [MEMORY[0x1E4F6B3E8] sharedInstance];
        int v28 = [v27 isPhoneNumberEmergencyNumber:v25];

        if (v28)
        {
          if (IMOSLoggingEnabled())
          {
            long long v40 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "One of the recipients was an emergency number, this message should never have been relayed, not processing message", buf, 2u);
            }
          }
          (*(void (**)(void))(*(void *)(v42 + 56) + 16))();

          goto LABEL_46;
        }
      }
      uint64_t v22 = [v21 countByEnumeratingWithState:&v51 objects:v55 count:16];
      if (v22) {
        continue;
      }
      break;
    }
  }

  long long v29 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v30 = [v29 isSMSFilterSyncEnabled];

  id v31 = *(void **)(v42 + 32);
  if (v30)
  {
    uint64_t v32 = [*(id *)(v42 + 32) relayController];
    uint64_t v33 = [v32 idsDeviceFromPushToken:*(void *)(v42 + 40)];

    if (IMOSLoggingEnabled())
    {
      long long v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        id v35 = [v33 name];
        *(_DWORD *)buf = 138412290;
        id v57 = v35;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, " Incoming download message from %@", buf, 0xCu);
      }
    }
    long long v36 = (void *)[v43 mutableCopy];
    long long v37 = [v33 uniqueIDOverride];
    [v36 setObject:v37 forKeyedSubscript:IMDRelayDeviceUniqueIDKey];

    long long v38 = *(void **)(v42 + 32);
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_1D973E2C8;
    v49[3] = &unk_1E6B756A8;
    uint64_t v39 = *(void *)(v42 + 48);
    id v50 = *(id *)(v42 + 56);
    [v38 _processReceivedDictionary:v36 storageContext:v39 receivedViaRelay:1 withCompletionBlock:v49];
  }
  else
  {
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    v47[2] = sub_1D973E2D8;
    v47[3] = &unk_1E6B756A8;
    uint64_t v41 = *(void *)(v42 + 48);
    id v48 = *(id *)(v42 + 56);
    [v31 _processReceivedDictionary:v43 storageContext:v41 receivedViaRelay:1 withCompletionBlock:v47];
    uint64_t v33 = v48;
  }

LABEL_49:
}

uint64_t sub_1D973E2C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D973E2D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1D973ECF0(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      unint64_t v4 = [v2 objectForKey:IMDRelayMessageDictionaryRecipientIDKey];
      int v7 = 138412290;
      int v8 = v4;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Found Recipient %@", (uint8_t *)&v7, 0xCu);
    }
  }
  id v5 = [v2 objectForKey:IMDRelayMessageDictionaryRecipientIDKey];

  return v5;
}

void sub_1D973F494(uint64_t a1, void *a2)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) service];
      double v6 = [v5 internalName];
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      long long v34 = v6;
      __int16 v35 = 2112;
      uint64_t v36 = v7;
      __int16 v37 = 2112;
      uint64_t v38 = v8;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ relay Received Outgoing Plain Text Message From Push Handler From %@ To %@", buf, 0x20u);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 32) relayEnrollmentController];
  [v9 _approveSelfForSMSRelay];

  uint64_t v18 = MEMORY[0x1E4F143A8];
  uint64_t v19 = 3221225472;
  long long v20 = sub_1D973F778;
  int v21 = &unk_1E6B75770;
  char v31 = *(unsigned char *)(a1 + 96);
  id v10 = *(id *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 32);
  id v22 = v10;
  uint64_t v23 = v11;
  id v24 = *(id *)(a1 + 64);
  char v32 = *(unsigned char *)(a1 + 97);
  id v25 = *(id *)(a1 + 72);
  id v26 = *(id *)(a1 + 80);
  id v27 = *(id *)(a1 + 88);
  id v28 = *(id *)(a1 + 40);
  id v12 = v3;
  id v30 = v12;
  id v29 = *(id *)(a1 + 48);
  id v13 = (void (**)(void *, void))_Block_copy(&v18);
  uint64_t v14 = *(void **)(a1 + 32);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(void *)(a1 + 40);
  int v17 = objc_msgSend(*(id *)(a1 + 56), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey, v18, v19, v20, v21);
  LOBYTE(v14) = [v14 _allowedToProcessMessageFromToken:v15 fromID:v16 reflectOnly:v17 != 0 isInProxyMode:*(unsigned __int8 *)(a1 + 96)];

  if (v14) {
    [*(id *)(a1 + 32) _deferredReplicatedMessageReleaseWithAllowedMessage:*(void *)(a1 + 56) outgoingProxyBlock:v13];
  }
  else {
    v13[2](v13, 0);
  }
}

void sub_1D973F778(uint64_t a1, int a2)
{
  uint64_t v113 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = @"NO";
      if (a2) {
        double v6 = @"YES";
      }
      else {
        double v6 = @"NO";
      }
      if (*(unsigned char *)(a1 + 104)) {
        id v5 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      uint64_t v108 = (uint64_t)v6;
      __int16 v109 = 2112;
      v110 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Is Message from device on the allowed proxy list? %@ isInProxyMode %@", buf, 0x16u);
    }
  }
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Message Type is a plain text outgoing message", buf, 2u);
      }
    }
    uint64_t v8 = [*(id *)(a1 + 32) objectForKey:IMDRelayMessageDictionaryForcedShowOnlyKey];
    BOOL v94 = v8 != 0;

    if (!v8)
    {
      uint64_t v9 = [*(id *)(a1 + 40) relayController];
      id v10 = [v9 idsDeviceFromPushToken:*(void *)(a1 + 48)];

      if (*(unsigned char *)(a1 + 105))
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v11 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void *)(a1 + 56);
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = v12;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Message %@ was being replayed not forwarding to peers", buf, 0xCu);
          }
        }
      }
      else
      {
        uint64_t v13 = *(void *)(a1 + 32);
        uint64_t v14 = [*(id *)(a1 + 40) account];
        uint64_t v15 = [v14 service];
        uint64_t v16 = [v15 internalName];
        int v17 = +[IMDRelayServiceController _updateServiceOfMessageInMessageDict:v13 toService:v16];

        uint64_t v18 = [*(id *)(a1 + 40) relayController];
        [v18 forwardMessageToPeers:v17 messageType:143 guid:*(void *)(a1 + 56) originalSender:v10];
      }
    }
    __int16 v95 = [*(id *)(a1 + 32) objectForKey:IMDRelayMessageItemDictionary];
    uint64_t v19 = +[IMDRelayServiceController _convertIMMessageItemDictionaryToIMMessageItem:v95 timestamp:*(void *)(a1 + 64)];
    long long v20 = *(void **)(a1 + 40);
    uint64_t v21 = *(void *)(a1 + 72);
    id v22 = [v19 guid];
    [v20 _markFromStorageIfNeeded:v21 messageGUID:v22];

    uint64_t v23 = [*(id *)(a1 + 40) chatForOutgoingMessage:*(void *)(a1 + 32) fromIdentifier:*(void *)(a1 + 80) isInProxyMode:*(unsigned __int8 *)(a1 + 104) createIfNotExists:1];
    if (!v23)
    {
      (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
LABEL_107:

      return;
    }
    id v24 = [*(id *)(a1 + 32) objectForKeyedSubscript:IMDRelayMessageDictionarySendOnlyKey];
    int v25 = [v24 BOOLValue];

    id v26 = +[IMDMessageStore sharedInstance];
    id v27 = [v19 guid];
    id v28 = [v26 messageWithGUID:v27];

    int v29 = [v28 errorCode];
    if (v28)
    {
      int v30 = v29;
      if (IMOSLoggingEnabled())
      {
        char v31 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = [v19 guid];
          uint64_t v33 = (void *)v32;
          long long v34 = @"YES";
          if (!v30) {
            long long v34 = @"NO";
          }
          *(_DWORD *)buf = 138412546;
          uint64_t v108 = v32;
          __int16 v109 = 2112;
          v110 = v34;
          _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Found a Message with the same GUID %@ and Fail %@", buf, 0x16u);
        }
      }
      BOOL v35 = v30 == 0;
      uint64_t v36 = *(void **)(a1 + 40);
      __int16 v37 = [v28 service];
      uint64_t v38 = [v19 service];
      LODWORD(v36) = [v36 messageServiceNamed:v37 canProcessMessagesFromServiceNamed:v38];

      if ((v36 & v35) != 0)
      {
        int v39 = [v28 needsRepeatForRelayReplication];
        int v40 = IMOSLoggingEnabled();
        if (!v39)
        {
          if (!v25)
          {
            if (v40)
            {
              id v50 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
              {
                long long v51 = [v19 guid];
                long long v52 = [v19 service];
                long long v53 = [v28 service];
                *(_DWORD *)buf = 138412802;
                uint64_t v108 = (uint64_t)v51;
                __int16 v109 = 2112;
                v110 = v52;
                __int16 v111 = 2112;
                v112 = v53;
                _os_log_impl(&dword_1D967A000, v50, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ and it did not have an error (found msg service %@)", buf, 0x20u);
              }
            }
            (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
            goto LABEL_106;
          }
          if (v40)
          {
            id v48 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
            {
              id v49 = [v19 guid];
              *(_DWORD *)buf = 138412290;
              uint64_t v108 = (uint64_t)v49;
              _os_log_impl(&dword_1D967A000, v48, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but instructed to send message without persistence", buf, 0xCu);
            }
          }
          goto LABEL_44;
        }
        if (v40)
        {
          uint64_t v41 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
          {
            uint64_t v42 = [v19 guid];
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = (uint64_t)v42;
            _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but still needs relay replication", buf, 0xCu);
          }
        }
        [v28 setNeedsRepeatForRelayReplication:0];
      }
      else if (IMOSLoggingEnabled())
      {
        long long v43 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
        {
          id v44 = [v19 guid];
          id v45 = [v19 service];
          *(_DWORD *)buf = 138412546;
          uint64_t v108 = (uint64_t)v44;
          __int16 v109 = 2112;
          v110 = v45;
          _os_log_impl(&dword_1D967A000, v43, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ but allowing it to be processed since original message had an error", buf, 0x16u);
        }
      }
    }
    if (v25)
    {
LABEL_44:
      if (v8 || *(unsigned char *)(a1 + 105))
      {
        if (IMOSLoggingEnabled())
        {
          id v46 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            long long v47 = [v19 guid];
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = (uint64_t)v47;
            _os_log_impl(&dword_1D967A000, v46, OS_LOG_TYPE_INFO, "Sending device requested no persistence for message %@, local device not responsible for sending", buf, 0xCu);
          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          long long v54 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
          {
            uint64_t v55 = [v19 guid];
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = (uint64_t)v55;
            _os_log_impl(&dword_1D967A000, v54, OS_LOG_TYPE_INFO, "Sending device requested no persistence for message %@, sending to CT now", buf, 0xCu);
          }
        }
        BOOL v56 = *(void **)(a1 + 40);
        id v57 = [v23 chatIdentifier];
        objc_msgSend(v56, "sendMessageFromIMMessageItem:forChat:chat:style:", v19, v57, v23, objc_msgSend(v23, "style"));
      }
      uint64_t v58 = *(void *)(a1 + 96);
      if (v58) {
        (*(void (**)(void))(v58 + 16))();
      }
LABEL_106:

      goto LABEL_107;
    }
    if (v8)
    {
      id v59 = [*(id *)(a1 + 32) _numberForKey:IMDRelayMessageDictionaryiMessageCapability];
      int v60 = [v59 intValue];

      if (v60 == 2)
      {
        if (IMOSLoggingEnabled())
        {
          long long v65 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v65, OS_LOG_TYPE_INFO))
          {
            long long v66 = [v23 chatIdentifier];
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = (uint64_t)v66;
            _os_log_impl(&dword_1D967A000, v65, OS_LOG_TYPE_INFO, "We received an outgoing message and we are only reflecting it, setting shouldForceToSMS on chat %@ to YES", buf, 0xCu);
          }
        }
        long long v67 = *(void **)(a1 + 40);
        uint64_t v64 = [v23 chatIdentifier];
        objc_msgSend(v67, "_updateShouldForceToSMSForChatWithIdentifier:style:shouldForceToSMS:", v64, objc_msgSend(v23, "style"), 1);
        goto LABEL_80;
      }
      if (v60 == 1)
      {
        if (IMOSLoggingEnabled())
        {
          id v61 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
          {
            uint64_t v62 = [v23 chatIdentifier];
            *(_DWORD *)buf = 138412290;
            uint64_t v108 = (uint64_t)v62;
            _os_log_impl(&dword_1D967A000, v61, OS_LOG_TYPE_INFO, "We received an outgoing message and we are only reflecting it, setting shouldForceToSMS on chat %@ to NO", buf, 0xCu);
          }
        }
        id v63 = *(void **)(a1 + 40);
        uint64_t v64 = [v23 chatIdentifier];
        objc_msgSend(v63, "_updateShouldForceToSMSForChatWithIdentifier:style:shouldForceToSMS:", v64, objc_msgSend(v23, "style"), 0);
LABEL_80:
      }
    }
    if (v19)
    {
      long long v68 = [*(id *)(a1 + 40) loginID];
      [v19 setSender:v68];

      if (IMSharedHelperDeviceHasMultipleSubscriptions()) {
        [v23 lastAddressedLocalHandle];
      }
      else {
      long long v71 = [*(id *)(a1 + 40) _callerIDUsingFromIdentifier:*(void *)(a1 + 80)];
      }
      BOOL v72 = v8 != 0;
      [v19 setDestinationCallerID:v71];

      id v73 = [*(id *)(a1 + 40) tapbackInterpreter];
      uint64_t v70 = [v73 interpretMessageItem:v19 inChat:v23];

      if (v72)
      {
        if (IMOSLoggingEnabled())
        {
          double v74 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
          {
            id v75 = [v70 guid];
            id v76 = [v23 chatIdentifier];
            *(_DWORD *)buf = 138412802;
            uint64_t v108 = (uint64_t)v75;
            __int16 v109 = 2112;
            v110 = v76;
            __int16 v111 = 2112;
            v112 = v23;
            _os_log_impl(&dword_1D967A000, v74, OS_LOG_TYPE_INFO, "send message with guid: %@  to identifier: %@   chat: %@", buf, 0x20u);
          }
        }
        char v77 = *(void **)(a1 + 40);
        __int16 v78 = [v23 chatIdentifier];
        uint64_t v79 = [v23 style];
        v96[0] = MEMORY[0x1E4F143A8];
        v96[1] = 3221225472;
        v96[2] = sub_1D9740A98;
        v96[3] = &unk_1E6B75748;
        v96[4] = *(void *)(a1 + 40);
        id v97 = v70;
        id v98 = v23;
        id v99 = *(id *)(a1 + 96);
        [v77 processMessageForSending:v97 toChat:v78 style:v79 allowWatchdog:0 completionBlock:v96];
        uint64_t v80 = &v97;
        long long v81 = &v98;
        uint64_t v82 = &v99;
      }
      else
      {
        int v83 = *(unsigned __int8 *)(a1 + 105);
        if (!*(unsigned char *)(a1 + 105))
        {
          long long v84 = [MEMORY[0x1E4F1C9C8] date];
          [v70 setTime:v84];
        }
        uint64_t v85 = *(void **)(a1 + 40);
        double v86 = [v23 chatIdentifier];
        uint64_t v87 = [v23 style];
        v100[0] = MEMORY[0x1E4F143A8];
        v100[1] = 3221225472;
        v100[2] = sub_1D9740788;
        v100[3] = &unk_1E6B75720;
        BOOL v105 = v94;
        char v106 = *(unsigned char *)(a1 + 105);
        v100[4] = *(void *)(a1 + 40);
        id v101 = v70;
        id v102 = v23;
        id v104 = *(id *)(a1 + 96);
        id v103 = *(id *)(a1 + 56);
        [v85 processMessageForSending:v101 toChat:v86 style:v87 allowWatchdog:v83 == 0 completionBlock:v100];

        uint64_t v80 = &v101;
        long long v81 = &v102;
        uint64_t v82 = &v104;
        __int16 v78 = v103;
      }

      if (IMOSLoggingEnabled())
      {
        int v88 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
        {
          uint64_t v89 = [v70 guid];
          *(_DWORD *)buf = 138412290;
          uint64_t v108 = (uint64_t)v89;
          _os_log_impl(&dword_1D967A000, v88, OS_LOG_TYPE_INFO, "Reflecting outgoing message with Guid: %@", buf, 0xCu);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        long long v69 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v69, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_1D967A000, v69, OS_LOG_TYPE_INFO, " Unable to create message item from message dictionary", buf, 2u);
        }
      }
      (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
      uint64_t v70 = 0;
    }
    if ((IMSharedHelperDeviceHasMultipleSubscriptions() & 1) == 0)
    {
      uint64_t v90 = *(void **)(a1 + 40);
      uint64_t v91 = [v23 chatIdentifier];
      uint64_t v92 = [v23 style];
      uint64_t v93 = [*(id *)(a1 + 88) _stripFZIDPrefix];
      [v90 _updateLastAddressedIDsIfNeededForChatWithIdentifier:v91 style:v92 lastAddressedHandle:v93 lastAddressedSIMID:0];
    }
    uint64_t v19 = v70;
    goto LABEL_106;
  }
  [*(id *)(a1 + 40) sendUnapproveToToken:*(void *)(a1 + 48) messageGUID:*(void *)(a1 + 56) completion:*(void *)(a1 + 96)];
}

void sub_1D9740788(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*(unsigned char *)(a1 + 72) || *(unsigned char *)(a1 + 73))
  {
    if (IMOSLoggingEnabled())
    {
      unint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "This messag was addressed to me, however I was told to reflect it only", (uint8_t *)&v17, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v17 = 138412290;
        id v18 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v17, 0xCu);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(a1 + 32);
    uint64_t v8 = [*(id *)(a1 + 48) chatIdentifier];
    uint64_t v9 = [*(id *)(a1 + 48) style];
    id v10 = [*(id *)(a1 + 40) time];
    [v7 didSendMessage:v6 forChat:v8 style:v9 forceDate:v10];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v17 = 138412290;
        id v18 = v3;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v17, 0xCu);
      }
    }
    if (*(unsigned char *)(a1 + 73))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v12 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = *(void **)(a1 + 56);
          int v17 = 138412290;
          id v18 = v13;
          _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Message %@ is being replayed. Not sending out over CT", (uint8_t *)&v17, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = [*(id *)(a1 + 48) chatIdentifier];
      objc_msgSend(v14, "sendMessageFromIMMessageItem:forChat:chat:style:", v15, v16, *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 48), "style"));
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1D9740A98(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 48) chatIdentifier];
  uint64_t v8 = [*(id *)(a1 + 48) style];
  uint64_t v9 = [*(id *)(a1 + 40) time];
  [v6 didSendMessage:v5 forChat:v7 style:v8 forceDate:v9];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1D9740F28(uint64_t a1, void *a2)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) service];
      uint64_t v6 = [v5 internalName];
      *(_DWORD *)buf = 138412290;
      char v31 = v6;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ relay Received Outgoing download Message From Push Handler", buf, 0xCu);
    }
  }
  uint64_t v7 = [*(id *)(a1 + 32) relayEnrollmentController];
  [v7 _approveSelfForSMSRelay];

  uint64_t v16 = MEMORY[0x1E4F143A8];
  uint64_t v17 = 3221225472;
  id v18 = sub_1D97411DC;
  uint64_t v19 = &unk_1E6B757E8;
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 32);
  id v20 = v8;
  uint64_t v21 = v9;
  id v22 = *(id *)(a1 + 48);
  char v29 = *(unsigned char *)(a1 + 96);
  id v23 = *(id *)(a1 + 56);
  id v24 = *(id *)(a1 + 64);
  id v25 = *(id *)(a1 + 72);
  id v26 = *(id *)(a1 + 80);
  id v10 = v3;
  id v28 = v10;
  id v27 = *(id *)(a1 + 88);
  id v11 = (void (**)(void *, void))_Block_copy(&v16);
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 80);
  uint64_t v15 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", IMDRelayMessageDictionaryForcedShowOnlyKey, v16, v17, v18, v19);
  LOBYTE(v12) = [v12 _allowedToProcessMessageFromToken:v13 fromID:v14 reflectOnly:v15 != 0 isInProxyMode:*(unsigned __int8 *)(a1 + 97)];

  if (v12) {
    [*(id *)(a1 + 32) _deferredReplicatedMessageReleaseWithAllowedMessage:*(void *)(a1 + 40) outgoingProxyBlock:v11];
  }
  else {
    v11[2](v11, 0);
  }
}

void sub_1D97411DC(uint64_t a1, int a2)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = @"NO";
      if (a2) {
        uint64_t v5 = @"YES";
      }
      *(_DWORD *)buf = 138412290;
      uint64_t v70 = (uint64_t)v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Is Message from device on the allowed proxy list? %@", buf, 0xCu);
    }
  }
  int v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Message Type is an outgoing download message", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) objectForKey:IMDRelayMessageDictionaryForcedShowOnlyKey];
    BOOL v57 = v8 != 0;

    if (!v8)
    {
      uint64_t v9 = [*(id *)(a1 + 40) relayController];
      id v10 = [v9 idsDeviceFromPushToken:*(void *)(a1 + 48)];

      if (*(unsigned char *)(a1 + 104))
      {
        if (IMOSLoggingEnabled())
        {
          id v11 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void *)(a1 + 56);
            *(_DWORD *)buf = 138412290;
            uint64_t v70 = v12;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Message %@ was being replayed not forwarding to peers", buf, 0xCu);
          }
        }
      }
      else
      {
        uint64_t v19 = *(void *)(a1 + 32);
        id v20 = [*(id *)(a1 + 40) account];
        uint64_t v21 = [v20 service];
        id v22 = [v21 internalName];
        id v23 = +[IMDRelayServiceController _updateServiceOfMessageInMessageDict:v19 toService:v22];

        id v24 = [*(id *)(a1 + 40) relayController];
        [v24 forwardMessageToPeers:v23 messageType:144 guid:*(void *)(a1 + 56) originalSender:v10];
      }
    }
    BOOL v25 = v8 == 0;
    id v26 = [*(id *)(a1 + 32) objectForKey:IMDRelayMessageItemDictionary];
    uint64_t v15 = +[IMDRelayServiceController _convertIMMessageItemDictionaryToIMMessageItem:v26 timestamp:*(void *)(a1 + 64)];

    id v27 = *(void **)(a1 + 40);
    uint64_t v28 = *(void *)(a1 + 72);
    char v29 = [v15 guid];
    [v27 _markFromStorageIfNeeded:v28 messageGUID:v29];

    uint64_t v16 = [*(id *)(a1 + 40) chatForOutgoingMessage:*(void *)(a1 + 32) fromIdentifier:*(void *)(a1 + 80) isInProxyMode:0 createIfNotExists:1];
    if (v16)
    {
      int v30 = +[IMDMessageStore sharedInstance];
      char v31 = [v15 guid];
      uint64_t v32 = [v30 messageWithGUID:v31];

      int v33 = [v32 errorCode];
      if (v32)
      {
        int v34 = v33;
        if (IMOSLoggingEnabled())
        {
          BOOL v35 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            uint64_t v36 = [v15 guid];
            __int16 v37 = (void *)v36;
            uint64_t v38 = @"YES";
            if (!v34) {
              uint64_t v38 = @"NO";
            }
            *(_DWORD *)buf = 138412546;
            uint64_t v70 = v36;
            __int16 v71 = 2112;
            BOOL v72 = v38;
            _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Found a Message with the same GUID %@ and Fail %@", buf, 0x16u);
          }
        }
        BOOL v39 = v34 == 0;
        int v40 = [v32 service];
        uint64_t v41 = [v15 service];
        int v42 = [v40 isEqualToString:v41];

        if ((v42 & v39) != 0)
        {
          int v43 = [v32 needsRepeatForRelayReplication];
          int v44 = IMOSLoggingEnabled();
          if (!v43)
          {
            if (v44)
            {
              long long v54 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
              {
                uint64_t v55 = [v15 guid];
                BOOL v56 = [v15 service];
                *(_DWORD *)buf = 138412546;
                uint64_t v70 = (uint64_t)v55;
                __int16 v71 = 2112;
                BOOL v72 = v56;
                _os_log_impl(&dword_1D967A000, v54, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ and it did not have an error", buf, 0x16u);
              }
            }
            (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
            goto LABEL_47;
          }
          if (v44)
          {
            id v45 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              id v46 = [v15 guid];
              *(_DWORD *)buf = 138412290;
              uint64_t v70 = (uint64_t)v46;
              _os_log_impl(&dword_1D967A000, v45, OS_LOG_TYPE_INFO, "Found message with same GUID %@ but still needs relay replication", buf, 0xCu);
            }
          }
          [v32 setNeedsRepeatForRelayReplication:0];
          uint64_t v47 = 1;
LABEL_46:
          long long v51 = [*(id *)(a1 + 40) attachmentController];
          v58[0] = MEMORY[0x1E4F143A8];
          v58[1] = 3221225472;
          v58[2] = sub_1D9741B0C;
          v58[3] = &unk_1E6B757C0;
          id v52 = v15;
          uint64_t v53 = *(void *)(a1 + 40);
          id v59 = v52;
          uint64_t v60 = v53;
          id v61 = *(id *)(a1 + 80);
          id v62 = v16;
          BOOL v66 = v25;
          BOOL v67 = v57;
          char v68 = *(unsigned char *)(a1 + 104);
          id v65 = *(id *)(a1 + 96);
          id v63 = *(id *)(a1 + 56);
          id v64 = *(id *)(a1 + 88);
          [v51 retrieveAttachmentsForMessage:v52 ignoreStoredTransfers:v47 displayID:0 token:0 completionBlock:v58];

LABEL_47:
          goto LABEL_48;
        }
        if (IMOSLoggingEnabled())
        {
          id v48 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
          {
            id v49 = [v15 guid];
            id v50 = [v15 service];
            *(_DWORD *)buf = 138412546;
            uint64_t v70 = (uint64_t)v49;
            __int16 v71 = 2112;
            BOOL v72 = v50;
            _os_log_impl(&dword_1D967A000, v48, OS_LOG_TYPE_INFO, "Found duplicate message for GUID %@ on Service %@ but allowing it to be processed since original message had an error", buf, 0x16u);
          }
        }
      }
      uint64_t v47 = 0;
      goto LABEL_46;
    }
    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  }
  else
  {
    if (v6)
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Alert said no, sending back a failure ", buf, 2u);
      }
    }
    uint64_t v14 = [*(id *)(a1 + 40) relayController];
    uint64_t v15 = [v14 idsDeviceFromPushToken:*(void *)(a1 + 48)];

    uint64_t v16 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", *(void *)(a1 + 56), IMDRelayMessageDictionaryGUIDKey, MEMORY[0x1E4F1CC38], IMDRelayAuthorizationUnauthorizedDeviceKey, 0);
    uint64_t v17 = [*(id *)(a1 + 40) relayController];
    id v18 = [v17 enrollmentController];
    [v18 sendUnApproveToDevice:v15 extraKeys:v16];

    (*(void (**)(void))(*(void *)(a1 + 96) + 16))();
  }
LABEL_48:
}

void sub_1D9741A58(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9741788);
  }
  _Unwind_Resume(a1);
}

void sub_1D9741B0C(uint64_t a1, void *a2, void *a3, int a4, int a5)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  id v49 = a2;
  id v9 = a3;
  if (IMOSLoggingEnabled())
  {
    id v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      id v11 = @"NO";
      if (a4) {
        id v11 = @"YES";
      }
      *(_DWORD *)buf = 138412546;
      id v61 = v11;
      __int16 v62 = 1024;
      LODWORD(v63) = a5;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "AttachmentController complete, success: %@   error: %d", buf, 0x12u);
    }
  }
  uint64_t v12 = *(void **)(a1 + 32);
  uint64_t v13 = [*(id *)(a1 + 40) loginID];
  [v12 setSender:v13];

  char HasMultipleSubscriptions = IMSharedHelperDeviceHasMultipleSubscriptions();
  uint64_t v15 = *(void **)(a1 + 32);
  if (HasMultipleSubscriptions) {
    [*(id *)(a1 + 56) lastAddressedLocalHandle];
  }
  else {
  uint64_t v16 = [*(id *)(a1 + 48) _stripFZIDPrefix];
  }
  [v15 setDestinationCallerID:v16];

  BOOL v17 = *(unsigned char *)(a1 + 88) == 0;
  int v18 = IMOSLoggingEnabled();
  if (v17)
  {
    if (v18)
    {
      int v33 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        int v34 = [*(id *)(a1 + 32) guid];
        BOOL v35 = [*(id *)(a1 + 56) chatIdentifier];
        uint64_t v36 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        id v61 = v34;
        __int16 v62 = 2112;
        id v63 = v35;
        __int16 v64 = 2112;
        uint64_t v65 = v36;
        _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Noting relayed SMS message with guid %@ to identifier: %@   chat: %@", buf, 0x20u);
      }
    }
    uint64_t v37 = *(void *)(a1 + 32);
    uint64_t v38 = *(void **)(a1 + 40);
    uint64_t v32 = [*(id *)(a1 + 56) chatIdentifier];
    uint64_t v39 = [*(id *)(a1 + 56) style];
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = sub_1D97423B4;
    v50[3] = &unk_1E6B75748;
    int8x16_t v48 = *(int8x16_t *)(a1 + 32);
    id v40 = (id)v48.i64[0];
    int8x16_t v51 = vextq_s8(v48, v48, 8uLL);
    id v52 = *(id *)(a1 + 56);
    id v53 = *(id *)(a1 + 80);
    [v38 processMessageForSending:v37 toChat:v32 style:v39 allowWatchdog:0 completionBlock:v50];
    char v29 = (id *)&v51.i64[1];
    int v30 = &v52;
    char v31 = &v53;
  }
  else
  {
    if (v18)
    {
      uint64_t v19 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        id v20 = [*(id *)(a1 + 32) guid];
        uint64_t v21 = [*(id *)(a1 + 56) chatIdentifier];
        uint64_t v22 = *(void *)(a1 + 56);
        *(_DWORD *)buf = 138412802;
        id v61 = v20;
        __int16 v62 = 2112;
        id v63 = v21;
        __int16 v64 = 2112;
        uint64_t v65 = v22;
        _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Will relay SMS message with guid %@   to identifier: %@   chat: %@", buf, 0x20u);
      }
    }
    if (*(unsigned char *)(a1 + 89) || *(unsigned char *)(a1 + 90))
    {
      uint64_t v23 = 0;
    }
    else
    {
      id v45 = *(void **)(a1 + 32);
      id v46 = [MEMORY[0x1E4F1C9C8] date];
      [v45 setTime:v46];

      uint64_t v23 = 1;
    }
    uint64_t v24 = *(void *)(a1 + 32);
    BOOL v25 = *(void **)(a1 + 40);
    id v26 = [*(id *)(a1 + 56) chatIdentifier];
    uint64_t v27 = [*(id *)(a1 + 56) style];
    v54[0] = MEMORY[0x1E4F143A8];
    v54[1] = 3221225472;
    v54[2] = sub_1D97420A4;
    v54[3] = &unk_1E6B75720;
    __int16 v59 = *(_WORD *)(a1 + 89);
    int8x16_t v47 = *(int8x16_t *)(a1 + 32);
    id v28 = (id)v47.i64[0];
    int8x16_t v55 = vextq_s8(v47, v47, 8uLL);
    id v56 = *(id *)(a1 + 56);
    id v58 = *(id *)(a1 + 80);
    id v57 = *(id *)(a1 + 64);
    [v25 processMessageForSending:v24 toChat:v26 style:v27 allowWatchdog:v23 completionBlock:v54];

    char v29 = (id *)&v55.i64[1];
    int v30 = &v56;
    char v31 = &v58;
    uint64_t v32 = v57;
  }

  if ((IMSharedHelperDeviceHasMultipleSubscriptions() & 1) == 0)
  {
    uint64_t v41 = *(void **)(a1 + 40);
    int v42 = [*(id *)(a1 + 56) chatIdentifier];
    uint64_t v43 = [*(id *)(a1 + 56) style];
    int v44 = [*(id *)(a1 + 72) _stripFZIDPrefix];
    [v41 _updateLastAddressedIDsIfNeededForChatWithIdentifier:v42 style:v43 lastAddressedHandle:v44 lastAddressedSIMID:0];
  }
}

void sub_1D97420A4(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (*(unsigned char *)(a1 + 72) || *(unsigned char *)(a1 + 73))
  {
    if (IMOSLoggingEnabled())
    {
      unint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "This messag was addressed to me, however I was told to reflect it only", (uint8_t *)&v17, 2u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v17 = 138412290;
        id v18 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v17, 0xCu);
      }
    }
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void **)(a1 + 32);
    id v8 = [*(id *)(a1 + 48) chatIdentifier];
    uint64_t v9 = [*(id *)(a1 + 48) style];
    id v10 = [*(id *)(a1 + 40) time];
    [v7 didSendMessage:v6 forChat:v8 style:v9 forceDate:v10];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v11 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v17 = 138412290;
        id v18 = v3;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v17, 0xCu);
      }
    }
    if (*(unsigned char *)(a1 + 73))
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v12 = OSLogHandleForIMEventCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = *(void **)(a1 + 56);
          int v17 = 138412290;
          id v18 = v13;
          _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Message %@ is being replayed. Not sending out over CT", (uint8_t *)&v17, 0xCu);
        }
      }
    }
    else
    {
      uint64_t v14 = *(void **)(a1 + 32);
      uint64_t v15 = *(void *)(a1 + 40);
      uint64_t v16 = [*(id *)(a1 + 48) chatIdentifier];
      objc_msgSend(v14, "sendMessageFromIMMessageItem:forChat:chat:style:", v15, v16, *(void *)(a1 + 48), objc_msgSend(*(id *)(a1 + 48), "style"));
    }
  }
  (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
}

void sub_1D97423B4(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "  => Done marking message as sending: %@", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [*(id *)(a1 + 48) chatIdentifier];
  uint64_t v8 = [*(id *)(a1 + 48) style];
  uint64_t v9 = [*(id *)(a1 + 40) time];
  [v6 didSendMessage:v5 forChat:v7 style:v8 forceDate:v9];

  (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
}

void sub_1D9742698(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) service];
      uint64_t v6 = [v5 internalName];
      uint64_t v7 = *(void *)(a1 + 40);
      int v10 = 138412546;
      id v11 = v6;
      __int16 v12 = 2112;
      uint64_t v13 = v7;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ relay received Message ID sent: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  uint64_t v8 = [*(id *)(a1 + 32) relayEnrollmentController];
  [v8 _approveSelfForSMSRelay];

  if ([*(id *)(a1 + 40) length])
  {
    [*(id *)(a1 + 32) _markFromStorageIfNeeded:*(void *)(a1 + 48) messageGUID:*(void *)(a1 + 40)];
    [*(id *)(a1 + 32) _markMessageAsSent:*(void *)(a1 + 40) wasInterworked:*(unsigned __int8 *)(a1 + 56)];
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v10) = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "  => Empty message ID, ignoring", (uint8_t *)&v10, 2u);
    }
  }
  v3[2](v3);
}

void sub_1D9742A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9742A90(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9742AA0(uint64_t a1)
{
}

void sub_1D9742AA8(uint64_t a1, void *a2)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [*(id *)(a1 + 32) relayEnrollmentController];
  [v4 _approveSelfForSMSRelay];

  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      uint64_t v7 = *(void *)(a1 + 48);
      int v26 = 138412546;
      uint64_t v27 = v6;
      __int16 v28 = 2112;
      uint64_t v29 = v7;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Told to mark message ID %@ as read with timestamp %@", (uint8_t *)&v26, 0x16u);
    }
  }
  [*(id *)(a1 + 32) _markFromStorageIfNeeded:*(void *)(a1 + 56) messageGUID:*(void *)(a1 + 40)];
  BOOL v8 = *(unsigned char *)(a1 + 88) == 0;
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  id v11 = _MessageDateFromTimeStamp(*(void **)(a1 + 48));
  if (v8)
  {
    [v9 didReceiveMessageReadReceiptForMessageID:v10 date:v11 completionBlock:v3];
    goto LABEL_16;
  }
  [v9 didReceiveMessageReadForMessageID:v10 date:v11 completionBlock:v3];

  __int16 v12 = +[IMDMessageStore sharedInstance];
  id v11 = [v12 messageWithGUID:*(void *)(a1 + 40)];

  if (v11)
  {
    uint64_t v13 = [*(id *)(a1 + 32) relayController];
    uint64_t v14 = [v13 idsDeviceFromPushToken:*(void *)(a1 + 64)];

    if (!v14 || *(unsigned char *)(a1 + 89)) {
      goto LABEL_14;
    }
    uint64_t v15 = [*(id *)(a1 + 32) relayController];
    if ([v15 _localDeviceSupportsSMS])
    {
      uint64_t v16 = [MEMORY[0x1E4F6E668] sharedInstance];
      int v17 = [v16 ctSubscriptionInfo];
      id v18 = [*(id *)(a1 + 72) _stripFZIDPrefix];
      int v19 = objc_msgSend(v17, "__im_containsPhoneNumber:", v18);

      if (!v19)
      {
LABEL_14:

        goto LABEL_16;
      }
      id v20 = +[IMDMessageStore sharedInstance];
      uint64_t v15 = [v20 chatForMessage:v11];

      if (v15)
      {
        uint64_t v21 = [*(id *)(a1 + 32) mainSession];
        uint64_t v22 = [v15 guid];
        uint64_t v23 = [v15 chatIdentifier];
        objc_msgSend(v21, "sendReadReceiptForMessage:toChatID:identifier:style:reflectOnly:", v11, v22, v23, objc_msgSend(v15, "style"), 1);
      }
    }

    goto LABEL_14;
  }
LABEL_16:

  uint64_t v24 = *(void *)(*(void *)(a1 + 80) + 8);
  BOOL v25 = *(void **)(v24 + 40);
  *(void *)(v24 + 40) = 0;
}

void sub_1D9742EBC(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  unint64_t v4 = [*(id *)(a1 + 32) relayEnrollmentController];
  [v4 _approveSelfForSMSRelay];

  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = [*(id *)(a1 + 32) service];
      uint64_t v7 = [v6 internalName];
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      uint64_t v10 = *(void *)(a1 + 56);
      int v13 = 138413058;
      uint64_t v14 = v7;
      __int16 v15 = 2112;
      uint64_t v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v9;
      __int16 v19 = 2112;
      uint64_t v20 = v10;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "%@ relay received Message ID:%@ Send Failure Message From Push Handler, from:%@ to:%@", (uint8_t *)&v13, 0x2Au);
    }
  }
  __int16 v12 = *(void **)(a1 + 32);
  uint64_t v11 = a1 + 32;
  [v12 _markFromStorageIfNeeded:*(void *)(v11 + 32) messageGUID:*(void *)(v11 + 8)];
  [*(id *)v11 didReceiveError:4 forMessageID:*(void *)(v11 + 8) forceError:1];
  v3[2](v3);
}

void sub_1D9743A7C(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) service];
      uint64_t v6 = [v5 internalName];
      int v10 = 138412290;
      uint64_t v11 = v6;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ Relay received Message ID Send Failure Message From Push Handler", (uint8_t *)&v10, 0xCu);
    }
  }
  uint64_t v7 = *(void **)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = a1 + 32;
  [v7 _markFromStorageIfNeeded:v8 messageGUID:*(void *)(v9 + 16)];
  [*(id *)v9 didReceiveError:4 forMessageID:*(void *)(v9 + 16) forceError:1];
  v3[2](v3);
}

void sub_1D9743F60(uint64_t a1, void *a2)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    unint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = [*(id *)(a1 + 32) service];
      uint64_t v6 = [v5 internalName];
      *(_DWORD *)buf = 138412290;
      id v58 = v6;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "%@ Relay received group mutation message from push handler", buf, 0xCu);
    }
  }
  char v7 = [*(id *)(a1 + 32) _allowedToProcessMessageFromToken:*(void *)(a1 + 40) fromID:*(void *)(a1 + 48) reflectOnly:0 isInProxyMode:*(unsigned __int8 *)(a1 + 64)];
  uint64_t v8 = *(void **)(a1 + 32);
  if (v7)
  {
    uint64_t v9 = [*(id *)(a1 + 56) groupID];
    int v10 = [*(id *)(a1 + 56) originalGroupID];
    uint64_t v11 = [v8 _chatForGroupID:v9 originalGroupID:v10];

    if (v11)
    {
      uint64_t v12 = *(void **)(a1 + 32);
      int v13 = [*(id *)(a1 + 56) destinationCallerID];
      int v14 = [v12 _canLocallySendWithPhoneNumber:v13];

      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        __int16 v15 = *(void **)(a1 + 32);
        id v16 = *(id *)(a1 + 56);
        id v48 = [v16 updatedName];
        if (v14)
        {
          id v47 = [v11 displayName];
          __int16 v17 = [*(id *)(a1 + 56) destinationCallerID];
          uint64_t v18 = [v11 guid];
          __int16 v19 = [v11 chatIdentifier];
          uint64_t v20 = [v11 style];
          uint64_t v21 = [*(id *)(a1 + 56) guid];
          uint64_t v22 = [v21 UUIDString];
          [v15 updateDisplayName:v48 fromDisplayName:v47 fromID:v17 forChatID:v18 identifier:v19 style:v20 messageID:v22];
        }
        else
        {
          id v47 = [*(id *)(a1 + 56) guid];
          __int16 v17 = [v47 UUIDString];
          uint64_t v18 = [*(id *)(a1 + 56) sender];
          __int16 v19 = [*(id *)(a1 + 56) destinationCallerID];
          uint64_t v21 = [v11 chatIdentifier];
          uint64_t v33 = [v11 style];
          uint64_t v22 = [*(id *)(a1 + 32) account];
          [v15 didReceiveDisplayNameChange:v48 guid:v17 fromID:v18 toIdentifier:v19 forChat:v21 style:v33 account:v22];
        }

        goto LABEL_23;
      }
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v25 = *(id *)(a1 + 56);
        if (!v14)
        {
          int v34 = v25;
          int v35 = [v25 participantChangeType] == 0;
          if ([*(id *)(a1 + 56) failed] != v35) {
            int v36 = 2;
          }
          else {
            int v36 = 3;
          }
          uint64_t v37 = [v34 changedParticipants];
          v49[0] = MEMORY[0x1E4F143A8];
          v49[1] = 3221225472;
          v49[2] = sub_1D97446CC;
          v49[3] = &unk_1E6B758D8;
          id v38 = *(id *)(a1 + 56);
          int v54 = v36;
          uint64_t v39 = *(void *)(a1 + 32);
          id v50 = v38;
          uint64_t v51 = v39;
          id v52 = v11;
          id v48 = v34;
          id v53 = v48;
          [v37 enumerateKeysAndObjectsUsingBlock:v49];

          goto LABEL_24;
        }
        id v48 = v25;
        id v26 = objc_alloc(MEMORY[0x1E4F1CA48]);
        uint64_t v27 = [v48 changedParticipants];
        __int16 v28 = objc_msgSend(v26, "initWithCapacity:", objc_msgSend(v27, "count"));

        uint64_t v29 = [v48 changedParticipants];
        v55[0] = MEMORY[0x1E4F143A8];
        v55[1] = 3221225472;
        v55[2] = sub_1D97445EC;
        v55[3] = &unk_1E6B758B0;
        id v47 = v28;
        id v56 = v47;
        [v29 enumerateKeysAndObjectsUsingBlock:v55];

        if ([v48 participantChangeType])
        {
          uint64_t v30 = *(void **)(a1 + 32);
          char v31 = [v11 guid];
          uint64_t v32 = [v11 chatIdentifier];
          objc_msgSend(v30, "removePersonInfo:chatID:identifier:style:", v47, v31, v32, objc_msgSend(v11, "style"));
        }
        else
        {
          id v40 = objc_alloc(MEMORY[0x1E4F6E850]);
          uint64_t v41 = [MEMORY[0x1E4F1C9C8] date];
          int v42 = (void *)[objc_alloc(MEMORY[0x1E4F28B18]) initWithString:@"join us"];
          uint64_t v43 = [v48 guid];
          int v44 = [v43 UUIDString];
          char v31 = (void *)[v40 initWithSender:0 time:v41 body:v42 attributes:0 fileTransferGUIDs:0 flags:5 error:0 guid:v44 threadIdentifier:0];

          id v45 = *(void **)(a1 + 32);
          uint64_t v32 = [v11 guid];
          id v46 = [v11 chatIdentifier];
          objc_msgSend(v45, "invitePersonInfo:withMessage:toChatID:identifier:style:", v47, v31, v32, v46, objc_msgSend(v11, "style"));
        }
LABEL_23:

LABEL_24:
      }
    }
    v3[2](v3);
    goto LABEL_26;
  }
  uint64_t v23 = *(void *)(a1 + 40);
  uint64_t v11 = [*(id *)(a1 + 56) guid];
  uint64_t v24 = [v11 UUIDString];
  [v8 sendUnapproveToToken:v23 messageGUID:v24 completion:v3];

LABEL_26:
}

void sub_1D97445EC(uint64_t a1, void *a2, void *a3)
{
  v11[3] = *MEMORY[0x1E4F143B8];
  unint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = *MEMORY[0x1E4F6C648];
  v10[0] = *MEMORY[0x1E4F6C5C8];
  v10[1] = v5;
  v11[0] = a2;
  v11[1] = a2;
  v10[2] = *MEMORY[0x1E4F6DF08];
  void v11[2] = a3;
  uint64_t v6 = (void *)MEMORY[0x1E4F1C9E8];
  id v7 = a3;
  id v8 = a2;
  uint64_t v9 = [v6 dictionaryWithObjects:v11 forKeys:v10 count:3];
  [v4 addObject:v9];
}

void sub_1D97446CC(uint64_t a1, void *a2, void *a3)
{
  id v23 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(a1 + 32) destinationCallerID];
  int v7 = [v23 isEqualToString:v6];

  if (v7 && *(_DWORD *)(a1 + 64) == 3)
  {
    id v8 = *(void **)(a1 + 40);
    uint64_t v9 = [*(id *)(a1 + 48) chatIdentifier];
    uint64_t v10 = [*(id *)(a1 + 48) style];
    uint64_t v11 = [*(id *)(a1 + 40) account];
    [v8 didLeaveChat:v9 style:v10 account:v11 messageID:v5];
  }
  uint64_t v12 = [*(id *)(a1 + 40) itemWithGUID:v5];

  int v13 = [*(id *)(a1 + 32) failed];
  int v14 = objc_alloc_init(IMDChatMemberStatusChangeContext);
  [(IMDChatMemberStatusChangeContext *)v14 setStatus:*(unsigned int *)(a1 + 64)];
  [(IMDChatMemberStatusChangeContext *)v14 setHandleID:v23];
  __int16 v15 = [*(id *)(a1 + 56) sender];
  [(IMDChatMemberStatusChangeContext *)v14 setFromHandleID:v15];

  [(IMDChatMemberStatusChangeContext *)v14 setUnformattedNumber:v23];
  id v16 = [*(id *)(a1 + 48) chatIdentifier];
  [(IMDChatMemberStatusChangeContext *)v14 setChatIdentifier:v16];

  -[IMDChatMemberStatusChangeContext setStyle:](v14, "setStyle:", [*(id *)(a1 + 48) style]);
  __int16 v17 = [*(id *)(a1 + 40) account];
  [(IMDChatMemberStatusChangeContext *)v14 setAccount:v17];

  uint64_t v18 = [*(id *)(a1 + 32) destinationCallerID];
  [(IMDChatMemberStatusChangeContext *)v14 setDestinationCallerID:v18];

  [(IMDChatMemberStatusChangeContext *)v14 setMessageID:v5];
  [(IMDChatMemberStatusChangeContext *)v14 setSilently:v12 != 0];
  __int16 v19 = [*(id *)(a1 + 56) sender];
  if (v19) {
    uint64_t v20 = 0;
  }
  else {
    uint64_t v20 = [*(id *)(a1 + 56) fromMe] ^ 1;
  }
  [(IMDChatMemberStatusChangeContext *)v14 setUnattributed:v20];

  id v21 = (id)[*(id *)(a1 + 40) didChangeMemberStatus:v14];
  if (v12) {
    int v22 = v13;
  }
  else {
    int v22 = 0;
  }
  if (v22 == 1) {
    [*(id *)(a1 + 40) markItemFailedWithGUID:v5 errorCode:4];
  }
}

uint64_t sub_1D9744AA8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processMessagesForAvailabilityAutoReply_forIncomingMessageFromIDSID_inChat_);
}

void sub_1D97451A4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97450C4);
  }
  _Unwind_Resume(a1);
}

void sub_1D9745900(uint64_t a1, uint64_t a2)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained _sendTextAutoReplyIfNecessaryForMessages:*(void *)(a1 + 32) withUrgentBreakthroughInstructions:a2 inChat:*(void *)(a1 + 40)];
}

void sub_1D9745AE8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9745AACLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97463B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97463C8(void *a1, void *a2, unint64_t a3, unsigned char *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = [v7 time];
  if ([v8 compare:a1[4]] == -1)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = a1[4];
        int v20 = 138412546;
        id v21 = v8;
        __int16 v22 = 2112;
        uint64_t v23 = v11;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Determined that we have not recently sent an availability auto reply. Message time %@ is older than recency window %@", (uint8_t *)&v20, 0x16u);
      }
      goto LABEL_10;
    }
LABEL_11:
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 0;
    *a4 = 1;
    goto LABEL_12;
  }
  if (a1[6] < a3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = (void *)a1[6];
        int v20 = 134217984;
        id v21 = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Determined that we have not recently sent an availability auto reply. We haven't sent an auto reply in the last %ld messages.", (uint8_t *)&v20, 0xCu);
      }
LABEL_10:

      goto LABEL_11;
    }
    goto LABEL_11;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v12 = v7;
    if ([v12 isFromMe] && objc_msgSend(v12, "isAutoReply"))
    {
      if (IMOSLoggingEnabled())
      {
        int v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          int v14 = [v12 guid];
          int v20 = 138412290;
          id v21 = v14;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Found a recent auto reply message from me: %@", (uint8_t *)&v20, 0xCu);
        }
      }
      *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
      *a4 = 1;
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        __int16 v19 = [v12 guid];
        int v20 = 138412802;
        id v21 = v19;
        __int16 v22 = 2048;
        uint64_t v23 = [v12 isFromMe];
        __int16 v24 = 2048;
        uint64_t v25 = [v12 isAutoReply];
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Message %@ was not an auto reply from me. isFromMe: %ld, isAutoReply: %ld", (uint8_t *)&v20, 0x20u);
      }
    }
  }
  else if (IMOSLoggingEnabled())
  {
    __int16 v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      id v16 = (objc_class *)objc_opt_class();
      __int16 v17 = NSStringFromClass(v16);
      int v20 = 138412290;
      id v21 = v17;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Item is not a message. Item class: %@", (uint8_t *)&v20, 0xCu);
    }
  }
LABEL_12:
}

void sub_1D9746CB4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9746C90);
  }
  _Unwind_Resume(a1);
}

void sub_1D9747184(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9747130);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D9747404(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9747414(uint64_t a1)
{
}

void sub_1D974741C(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v6 = a2;
  id v7 = [v6 time];
  if ([v7 compare:*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40)] == -1)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
        int v21 = 138412546;
        uint64_t v22 = (uint64_t)v7;
        __int16 v23 = 2112;
        uint64_t v24 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Determined that we are not in urgent message grace period. Message time %@ grace period start window %@", (uint8_t *)&v21, 0x16u);
      }
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v8 = v6;
      if (([v8 isFromMe] & 1) != 0
        || ![v8 didNotifyRecipient])
      {
        if (![v8 hasLegacyUrgentTriggerMatchInText])
        {
          if ([v8 isFromMe])
          {
            uint64_t v14 = [v7 dateByAddingTimeInterval:-*(double *)(a1 + 48)];
            uint64_t v15 = *(void *)(*(void *)(a1 + 32) + 8);
            id v16 = *(void **)(v15 + 40);
            *(void *)(v15 + 40) = v14;

            [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) timeIntervalSinceNow];
            double v18 = v17;
            if (!IMOSLoggingEnabled()) {
              goto LABEL_24;
            }
            __int16 v19 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              int v21 = 134217984;
              uint64_t v22 = (uint64_t)(v18 / -60.0);
              _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Found a reply sent by me to the chat within the grace period window, extending grace period to %ld minutes.", (uint8_t *)&v21, 0xCu);
            }
          }
          else
          {
            if (!IMOSLoggingEnabled()) {
              goto LABEL_24;
            }
            __int16 v19 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              int v20 = [v8 guid];
              int v21 = 138412802;
              uint64_t v22 = (uint64_t)v20;
              __int16 v23 = 2048;
              uint64_t v24 = [v8 isFromMe];
              __int16 v25 = 2048;
              uint64_t v26 = [v8 didNotifyRecipient];
              _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Message %@ did not impact grace period. isFromMe: %ld, didNotify: %ld", (uint8_t *)&v21, 0x20u);
            }
          }

          goto LABEL_24;
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v9 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            LOWORD(v21) = 0;
            _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Found a recent message that contains the urgent trigger phrase within the grace period window. Grace period is active.", (uint8_t *)&v21, 2u);
          }
          goto LABEL_22;
        }
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v21) = 0;
          _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Found a recent message that broke through our dnd within the grace period window. Grace period is active.", (uint8_t *)&v21, 2u);
        }
LABEL_22:
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
      *a4 = 1;
LABEL_24:

      goto LABEL_25;
    }
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v12 = (objc_class *)objc_opt_class();
        int v13 = NSStringFromClass(v12);
        int v21 = 138412290;
        uint64_t v22 = (uint64_t)v13;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Item is not a message. Item class: %@", (uint8_t *)&v21, 0xCu);
      }
      goto LABEL_24;
    }
  }
LABEL_25:
}

void sub_1D9747838(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9747690);
  }
  _Unwind_Resume(a1);
}

void sub_1D9747EDC(void *a1)
{
  id v5 = +[IMDMessageStore sharedInstance];
  uint64_t v2 = [v5 itemsWithHandles:a1[4] onServices:a1[5] limit:a1[7]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1D9747F50(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  char v11 = 0;
  uint64_t v7 = a1[4];
  id v8 = *(void (**)(uint64_t, id, uint64_t, char *))(v7 + 16);
  id v9 = a2;
  v8(v7, v9, a3, &v11);
  if (v11)
  {
    *a4 = 1;
    *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = 1;
  }
  uint64_t v10 = [v9 guid];

  if ([v10 length]) {
    objc_storeStrong((id *)(*(void *)(a1[6] + 8) + 40), v10);
  }
}

void sub_1D9748018(void *a1)
{
  id v5 = +[IMDMessageStore sharedInstance];
  uint64_t v2 = [v5 itemsWithHandles:a1[4] onServices:a1[5] messageGUID:*(void *)(*(void *)(a1[7] + 8) + 40) numberOfMessagesBefore:a1[10] numberOfMessagesAfter:0 threadIdentifier:0 hasMessagesBefore:*(void *)(a1[8] + 8) + 24 hasMessagesAfter:*(void *)(a1[9] + 8) + 24];
  uint64_t v3 = *(void *)(a1[6] + 8);
  unint64_t v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1D97489B0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    id v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1D9901518();
    }
  }
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D9748C70(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D9901580();
    }
  }
  uint64_t v8 = [v5 copy];
  uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = v8;

  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D974A390(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v6 = [v3 itemID];
  unint64_t v4 = *(void **)(a1 + 32);
  id v5 = [v3 handleID];

  [v4 setObject:v6 forKeyedSubscript:v5];
}

uint64_t sub_1D974B308()
{
  qword_1EBE2B988 = (uint64_t)objc_alloc_init((Class)objc_opt_class());

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D974B4AC()
{
  qword_1EA8CA518 = objc_alloc_init(IMDCKSyncTokenStore);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D974D524(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Legacy processing completed, marking pipeline component as finished.", v4, 2u);
    }
  }
  [*(id *)(a1 + 32) _updateChatForInput:*(void *)(a1 + 40) hadChat:*(unsigned __int8 *)(a1 + 56)];
  return [*(id *)(a1 + 48) fullfillWithValue:*(void *)(a1 + 40)];
}

void sub_1D974E288(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1D974EA24(uint64_t a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E016A370]();
  id v3 = objc_alloc_init(IMDiMessageIDSDelegateHandlerRegistry);
  unint64_t v4 = (void *)qword_1EBE2BE40;
  qword_1EBE2BE40 = (uint64_t)v3;

  [*(id *)(a1 + 32) addStandardCommandHandlersToRegistry:qword_1EBE2BE40];
  if ([(id)qword_1EBE2BE40 isLockedDown]) {
    [*(id *)(a1 + 32) addLockdownCommandHandlersToRegistry:qword_1EBE2BE40];
  }
}

void sub_1D974F2A4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v76[5] = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  int8x16_t v55 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedDeliveryReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v55, &state);
  uint64_t v65 = 0;
  uint64_t v66 = &v65;
  uint64_t v67 = 0x3032000000;
  char v68 = sub_1D974F940;
  long long v69 = sub_1D974F950;
  id v70 = 0;
  id v54 = v17;
  id v70 = v54;
  if (IMOSLoggingEnabled())
  {
    double v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      __int16 v19 = [v14 fromPushID];
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v19;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Setting up pipeline for delivery receipt fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorDeliveryReceipt", @"BlastDoor");
  if (objc_opt_isKindOfClass()) {
    int v20 = v13;
  }
  else {
    int v20 = 0;
  }
  id v56 = v20;
  id v57 = [[IMDeliveryReceiptPipelineParameter alloc] initWithBD:v56 idsTrustedData:v14];
  if (v57)
  {
    int v21 = [IMFindAccountProcessingPipelineComponent alloc];
    uint64_t v22 = [v15 imdAccount];
    uint64_t v53 = [(IMFindAccountProcessingPipelineComponent *)v21 initWithReceivingAccount:v22];

    __int16 v23 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v24 = [v15 storageController];
    __int16 v25 = [v15 broadcaster];
    id v52 = [(IMMessageFromStoragePipelineComponent *)v23 initWithStorageProcessingType:0 storageController:v24 broadcaster:v25];

    uint64_t v26 = [IMSenderCapabilityPipelineComponent alloc];
    uint64_t v27 = [MEMORY[0x1E4F1CAD0] setWithObject:*MEMORY[0x1E4F6B2C0]];
    __int16 v28 = [v14 fromToken];
    uint64_t v51 = [(IMSenderCapabilityPipelineComponent *)v26 initWithRegistrationProperties:v27 pushToken:v28];

    uint64_t v29 = [IMDeliveryReceiptProcessingPipelineComponent alloc];
    uint64_t v30 = [v15 messageStore];
    id v50 = [(IMDeliveryReceiptProcessingPipelineComponent *)v29 initWithMessageStore:v30];

    char v31 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v32 = [v15 storageController];
    uint64_t v33 = [v15 broadcaster];
    int v34 = [(IMMessageFromStoragePipelineComponent *)v31 initWithStorageProcessingType:1 storageController:v32 broadcaster:v33];

    int v35 = (void *)MEMORY[0x1E4F6BE90];
    v76[0] = v53;
    v76[1] = v52;
    v76[2] = v51;
    v76[3] = v50;
    v76[4] = v34;
    int v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:5];
    id v49 = [v35 pipelineFromComponents:v36];

    uint64_t v37 = [v14 toIdentifier];
    id v38 = [v37 _stripFZIDPrefix];

    uint64_t v39 = [v14 fromIdentifier];
    id v40 = [v39 _stripFZIDPrefix];

    uint64_t v41 = [v12 handler];
    v58[0] = MEMORY[0x1E4F143A8];
    v58[1] = 3221225472;
    v58[2] = sub_1D974F958;
    v58[3] = &unk_1E6B75B28;
    uint64_t v59 = v57;
    id v42 = v40;
    id v60 = v42;
    id v43 = v38;
    id v61 = v43;
    id v62 = v15;
    id v63 = v16;
    __int16 v64 = &v65;
    [v41 handleMessageDeliveryReceiptWithPipeline:v49 input:v59 completionBlock:v58];

    int v44 = (void *)v53;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v45 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        id v46 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        uint64_t v73 = v46;
        __int16 v74 = 2048;
        id v75 = v13;
        id v47 = v46;
        _os_log_impl(&dword_1D967A000, v45, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v48 = [v15 service];
    [v48 sendAckForMessageWithContext:v16];

    int v44 = (void *)v66[5];
    v66[5] = 0;
  }

  _Block_object_dispose(&v65, 8);
  os_activity_scope_leave(&state);
}

void sub_1D974F8B0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D974F7F8);
  }
  _Block_object_dispose(&a29, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v29 - 192));
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D974F940(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D974F950(uint64_t a1)
{
}

void sub_1D974F958(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v18 = 138412290;
      __int16 v19 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v18, 0xCu);
    }
  }
  uint64_t v7 = [MEMORY[0x1E4F6E8F0] sharedInstance];
  uint64_t v8 = [*(id *)(a1 + 32) GUID];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  char v11 = [*(id *)(a1 + 32) chat];
  uint64_t v12 = [v11 powerLogConversationType];
  id v13 = [*(id *)(a1 + 32) chat];
  id v14 = [v13 serviceName];
  [v7 logMessageReceivedWithGUID:v8 fromIdentifier:v9 toIdentifier:v10 conversationType:v12 messageType:6 messageProtocol:v14];

  id v15 = [*(id *)(a1 + 56) service];
  [v15 sendAckForMessageWithContext:*(void *)(a1 + 64)];

  uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0;
}

void sub_1D974FB2C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v73[4] = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v50 = a3;
  id v54 = a4;
  id v13 = a5;
  id v51 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v49 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedChatSessionClose", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v49, &state);
  uint64_t v62 = 0;
  id v63 = &v62;
  uint64_t v64 = 0x3032000000;
  uint64_t v65 = sub_1D974F940;
  uint64_t v66 = sub_1D974F950;
  id v67 = 0;
  id v48 = v14;
  id v67 = v48;
  id v15 = v50;
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      id v17 = [v54 fromPushID];
      *(_DWORD *)buf = 138412290;
      id v70 = v17;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Setting up pipeline for chat session close message fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorChatSessionClose", @"BlastDoor");
  if (objc_opt_isKindOfClass()) {
    int v18 = v50;
  }
  else {
    int v18 = 0;
  }
  id v52 = v18;
  uint64_t v53 = [[IMChatSessionClosePipelineParameter alloc] initWithDefusedMessage:v52 idsTrustedData:v54];
  if (v53)
  {
    __int16 v19 = [IMFindAccountProcessingPipelineComponent alloc];
    uint64_t v20 = [v13 imdAccount];
    int v21 = [(IMFindAccountProcessingPipelineComponent *)v19 initWithReceivingAccount:v20];

    uint64_t v22 = [IMMessageFromStoragePipelineComponent alloc];
    __int16 v23 = [v13 storageController];
    uint64_t v24 = [v13 broadcaster];
    id v47 = [(IMMessageFromStoragePipelineComponent *)v22 initWithStorageProcessingType:0 storageController:v23 broadcaster:v24];

    __int16 v25 = [IMChatSessionCloseProcessingPipelineComponent alloc];
    uint64_t v26 = [v13 messageStore];
    uint64_t v27 = [v13 chatRegistry];
    __int16 v28 = [(IMChatSessionCloseProcessingPipelineComponent *)v25 initWithMessageStore:v26 chatRegistry:v27 idsTrustedData:v54];

    uint64_t v29 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v30 = [v13 storageController];
    char v31 = [v13 broadcaster];
    uint64_t v32 = [(IMMessageFromStoragePipelineComponent *)v29 initWithStorageProcessingType:1 storageController:v30 broadcaster:v31];

    uint64_t v33 = (void *)MEMORY[0x1E4F6BE90];
    v73[0] = v21;
    v73[1] = v47;
    v73[2] = v28;
    v73[3] = v32;
    int v34 = [MEMORY[0x1E4F1C978] arrayWithObjects:v73 count:4];
    int v35 = [v33 pipelineFromComponents:v34];

    int v36 = [v54 toIdentifier];
    uint64_t v37 = [v36 _stripFZIDPrefix];

    id v38 = [v54 fromIdentifier];
    uint64_t v39 = [v38 _stripFZIDPrefix];

    id v40 = [v12 handler];
    v55[0] = MEMORY[0x1E4F143A8];
    v55[1] = 3221225472;
    v55[2] = sub_1D9750168;
    v55[3] = &unk_1E6B75B28;
    id v56 = v53;
    id v41 = v39;
    id v57 = v41;
    id v42 = v37;
    id v58 = v42;
    id v59 = v13;
    id v60 = v51;
    id v61 = &v62;
    id v15 = v50;
    [v40 handleChatSessionCloseWithPipeline:v35 input:v56 completionBlock:v55];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v43 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
      {
        int v44 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        id v70 = v44;
        __int16 v71 = 2048;
        id v72 = v50;
        id v45 = v44;
        _os_log_impl(&dword_1D967A000, v43, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v46 = [v13 service];
    [v46 sendAckForMessageWithContext:v51];

    int v21 = (IMFindAccountProcessingPipelineComponent *)v63[5];
    v63[5] = 0;
  }

  _Block_object_dispose(&v62, 8);
  os_activity_scope_leave(&state);
}

void sub_1D97500D4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9750014);
  }
  _Block_object_dispose(&a27, 8);
  os_activity_scope_leave((os_activity_scope_state_t)(v27 - 176));
  _Unwind_Resume(exc_buf);
}

void sub_1D9750168(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v18 = 138412290;
      __int16 v19 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v18, 0xCu);
    }
  }
  uint64_t v7 = [MEMORY[0x1E4F6E8F0] sharedInstance];
  uint64_t v8 = [*(id *)(a1 + 32) GUID];
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void *)(a1 + 48);
  char v11 = [*(id *)(a1 + 32) chat];
  uint64_t v12 = [v11 powerLogConversationType];
  id v13 = [*(id *)(a1 + 32) chat];
  id v14 = [v13 serviceName];
  [v7 logMessageReceivedWithGUID:v8 fromIdentifier:v9 toIdentifier:v10 conversationType:v12 messageType:8 messageProtocol:v14];

  id v15 = [*(id *)(a1 + 56) service];
  [v15 sendAckForMessageWithContext:*(void *)(a1 + 64)];

  uint64_t v16 = *(void *)(*(void *)(a1 + 72) + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0;
}

void sub_1D975033C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v76[4] = *MEMORY[0x1E4F143B8];
  id v57 = a2;
  id v58 = a3;
  id v12 = a4;
  id v13 = a5;
  id v55 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v54 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedReadReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v54, &state);
  uint64_t v65 = 0;
  uint64_t v66 = &v65;
  uint64_t v67 = 0x3032000000;
  char v68 = sub_1D974F940;
  long long v69 = sub_1D974F950;
  id v70 = 0;
  id v53 = v14;
  id v70 = v53;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = [v12 fromPushID];
      *(_DWORD *)buf = 138412290;
      uint64_t v73 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for read receipt fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorReadReceipt", @"BlastDoor");
  char isKindOfClass = objc_opt_isKindOfClass();
  int v18 = v58;
  if ((isKindOfClass & 1) == 0) {
    int v18 = 0;
  }
  id v56 = v18;
  __int16 v19 = [[IMReadReceiptPipelineParameter alloc] initWithBD:v56 idsTrustedData:v12];
  if (v19)
  {
    -[IMReadReceiptPipelineParameter setIsFromMe:](v19, "setIsFromMe:", [v12 isFromMe]);
    uint64_t v20 = [v12 fromPushID];
    [(IMReadReceiptPipelineParameter *)v19 setFromPushID:v20];

    int v21 = [v12 fromIdentifier];
    [(IMReadReceiptPipelineParameter *)v19 setFromIdentifier:v21];

    uint64_t v22 = [v12 fromToken];
    __int16 v23 = [v13 imdAccount];
    BOOL v24 = +[IMDiMessageIDSDelegate isDefaultPairedDevice:v22 withAccount:v23];

    [(IMReadReceiptPipelineParameter *)v19 setIsFromDefaultPairedDevice:v24];
    __int16 v25 = [IMFindAccountProcessingPipelineComponent alloc];
    uint64_t v26 = [v13 imdAccount];
    uint64_t v27 = [(IMFindAccountProcessingPipelineComponent *)v25 initWithReceivingAccount:v26];

    __int16 v28 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v29 = [v13 storageController];
    uint64_t v30 = [v13 broadcaster];
    id v52 = [(IMMessageFromStoragePipelineComponent *)v28 initWithStorageProcessingType:0 storageController:v29 broadcaster:v30];

    char v31 = [IMReadReceiptProcessingPipelineComponent alloc];
    uint64_t v32 = [v13 messageStore];
    uint64_t v33 = [v13 chatRegistry];
    int v34 = [v13 recentsController];
    int v35 = [v57 idsService];
    int v36 = [(IMReadReceiptProcessingPipelineComponent *)v31 initWithMessageStore:v32 chatRegistry:v33 recents:v34 IDSService:v35];

    uint64_t v37 = [IMMessageFromStoragePipelineComponent alloc];
    id v38 = [v13 storageController];
    uint64_t v39 = [v13 broadcaster];
    id v40 = [(IMMessageFromStoragePipelineComponent *)v37 initWithStorageProcessingType:1 storageController:v38 broadcaster:v39];

    id v41 = (void *)MEMORY[0x1E4F6BE90];
    v76[0] = v27;
    v76[1] = v52;
    v76[2] = v36;
    v76[3] = v40;
    id v42 = [MEMORY[0x1E4F1C978] arrayWithObjects:v76 count:4];
    id v43 = [v41 pipelineFromComponents:v42];

    int v44 = [v12 toIdentifier];
    id v45 = [v44 _stripFZIDPrefix];

    id v46 = [v57 handler];
    v59[0] = MEMORY[0x1E4F143A8];
    v59[1] = 3221225472;
    v59[2] = sub_1D97509F8;
    v59[3] = &unk_1E6B75B50;
    id v60 = v19;
    id v47 = v45;
    id v61 = v47;
    id v62 = v13;
    id v63 = v55;
    uint64_t v64 = &v65;
    [v46 handleMessageReadReceiptWithPipeline:v43 input:v60 completionBlock:v59];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v48 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
      {
        id v49 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        uint64_t v73 = v49;
        __int16 v74 = 2048;
        id v75 = v58;
        id v50 = v49;
        _os_log_impl(&dword_1D967A000, v48, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v51 = [v13 service];
    [v51 sendAckForMessageWithContext:v55];

    uint64_t v27 = (IMFindAccountProcessingPipelineComponent *)v66[5];
    v66[5] = 0;
  }

  _Block_object_dispose(&v65, 8);
  os_activity_scope_leave(&state);
}

void sub_1D975096C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97508ACLL);
  }
  _Block_object_dispose(&a25, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97509F8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v18 = a3;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) GUID];
      *(_DWORD *)buf = 138412290;
      uint64_t v20 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", buf, 0xCu);
    }
  }
  id v6 = [MEMORY[0x1E4F6E8F0] sharedInstance];
  uint64_t v7 = [*(id *)(a1 + 32) GUID];
  uint64_t v8 = [*(id *)(a1 + 32) fromIdentifier];
  uint64_t v9 = [v8 _stripFZIDPrefix];
  uint64_t v10 = *(void *)(a1 + 40);
  char v11 = [*(id *)(a1 + 32) chat];
  uint64_t v12 = [v11 powerLogConversationType];
  id v13 = [*(id *)(a1 + 32) chat];
  id v14 = [v13 serviceName];
  [v6 logMessageReceivedWithGUID:v7 fromIdentifier:v9 toIdentifier:v10 conversationType:v12 messageType:7 messageProtocol:v14];

  id v15 = [*(id *)(a1 + 48) service];
  [v15 sendAckForMessageWithContext:*(void *)(a1 + 56)];

  uint64_t v16 = *(void *)(*(void *)(a1 + 64) + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0;
}

void sub_1D9750BF4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v66[4] = *MEMORY[0x1E4F143B8];
  id v48 = a2;
  id v47 = a3;
  id v49 = a4;
  id v12 = a5;
  id v45 = a6;
  id v13 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  int v44 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedMarkUnreadRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v44, &state);
  uint64_t v55 = 0;
  id v56 = &v55;
  uint64_t v57 = 0x3032000000;
  id v58 = sub_1D974F940;
  id v59 = sub_1D974F950;
  id v60 = 0;
  id v43 = v13;
  id v60 = v43;
  if (IMOSLoggingEnabled())
  {
    id v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = [v49 fromPushID];
      *(_DWORD *)buf = 138412290;
      id v63 = v15;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Setting up pipeline for mark unread request fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorMarkUnreadRequest", @"BlastDoor");
  if (objc_opt_isKindOfClass()) {
    uint64_t v16 = v47;
  }
  else {
    uint64_t v16 = 0;
  }
  id v46 = v16;
  id v17 = [[IMMarkUnreadRequestPipelineParameter alloc] initWithBD:v46 idsTrustedData:v49];
  if (v17)
  {
    id v18 = [IMFindAccountProcessingPipelineComponent alloc];
    __int16 v19 = [v12 imdAccount];
    uint64_t v20 = [(IMFindAccountProcessingPipelineComponent *)v18 initWithReceivingAccount:v19];

    uint64_t v21 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v22 = [v12 storageController];
    __int16 v23 = [v12 broadcaster];
    BOOL v24 = [(IMMessageFromStoragePipelineComponent *)v21 initWithStorageProcessingType:0 storageController:v22 broadcaster:v23];

    __int16 v25 = [IMMarkUnreadRequestProcessingPipelineComponent alloc];
    uint64_t v26 = [v12 messageStore];
    uint64_t v27 = [v12 chatRegistry];
    __int16 v28 = [v12 recentsController];
    uint64_t v29 = [v48 idsService];
    uint64_t v30 = [(IMMarkUnreadRequestProcessingPipelineComponent *)v25 initWithMessageStore:v26 chatRegistry:v27 recents:v28 IDSService:v29];

    char v31 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v32 = [v12 storageController];
    uint64_t v33 = [v12 broadcaster];
    int v34 = [(IMMessageFromStoragePipelineComponent *)v31 initWithStorageProcessingType:1 storageController:v32 broadcaster:v33];

    int v35 = (void *)MEMORY[0x1E4F6BE90];
    v66[0] = v20;
    v66[1] = v24;
    v66[2] = v30;
    v66[3] = v34;
    int v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v66 count:4];
    uint64_t v37 = [v35 pipelineFromComponents:v36];

    id v38 = [v48 handler];
    v50[0] = MEMORY[0x1E4F143A8];
    v50[1] = 3221225472;
    v50[2] = sub_1D97511CC;
    v50[3] = &unk_1E6B75B78;
    id v51 = v17;
    id v52 = v12;
    id v53 = v45;
    id v54 = &v55;
    [v38 handleMessageMarkUnreadRequestWithPipeline:v37 input:v51 completionBlock:v50];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v39 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        id v40 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        id v63 = v40;
        __int16 v64 = 2048;
        id v65 = v47;
        id v41 = v40;
        _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v42 = [v12 service];
    [v42 sendAckForMessageWithContext:v45];

    uint64_t v20 = (IMFindAccountProcessingPipelineComponent *)v56[5];
    v56[5] = 0;
  }

  _Block_object_dispose(&v55, 8);
  os_activity_scope_leave(&state);
}

void sub_1D9751144(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9751080);
  }
  _Block_object_dispose(&a25, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97511CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  int v5 = IMOSLoggingEnabled();
  if (v4)
  {
    if (v5)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [*(id *)(a1 + 32) GUID];
        int v12 = 138412546;
        id v13 = v7;
        __int16 v14 = 2112;
        id v15 = v4;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error processing mark as unread request for message (%@), error: %@", (uint8_t *)&v12, 0x16u);
      }
LABEL_9:
    }
  }
  else if (v5)
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);
    }
    goto LABEL_9;
  }
  uint64_t v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D975135C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97512F8);
  }
  _Unwind_Resume(a1);
}

void sub_1D9751380(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v65[4] = *MEMORY[0x1E4F143B8];
  id v46 = a2;
  id v12 = a3;
  id v48 = a4;
  id v13 = a5;
  id v47 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  int v44 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedPlayedReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v44, &state);
  uint64_t v54 = 0;
  uint64_t v55 = &v54;
  uint64_t v56 = 0x3032000000;
  uint64_t v57 = sub_1D974F940;
  id v58 = sub_1D974F950;
  id v59 = 0;
  id v43 = v14;
  id v59 = v43;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v48, "fromPushID", v43, v44);
      *(_DWORD *)buf = 138412290;
      id v62 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for played receipt fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorPlayedReceipt", @"BlastDoor");
  id v45 = v12;
  if (objc_opt_isKindOfClass()) {
    id v17 = v12;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;
  __int16 v19 = [v48 fromToken];
  uint64_t v20 = [v13 imdAccount];
  BOOL v21 = +[IMDiMessageIDSDelegate isDefaultPairedDevice:v19 withAccount:v20];

  uint64_t v22 = [[IMPlayedReceiptPipelineParameter alloc] initWithDefusedMessage:v18 idsTrustedData:v48 isFromDefaultPairedDevice:v21];
  if (v22)
  {
    __int16 v23 = [IMFindAccountProcessingPipelineComponent alloc];
    BOOL v24 = [v13 imdAccount];
    __int16 v25 = [(IMFindAccountProcessingPipelineComponent *)v23 initWithReceivingAccount:v24];

    uint64_t v26 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v27 = [v13 storageController];
    __int16 v28 = [v13 broadcaster];
    uint64_t v29 = [(IMMessageFromStoragePipelineComponent *)v26 initWithStorageProcessingType:0 storageController:v27 broadcaster:v28];

    uint64_t v30 = [[IMPlayedReceiptProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    char v31 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v32 = [v13 storageController];
    uint64_t v33 = [v13 broadcaster];
    int v34 = [(IMMessageFromStoragePipelineComponent *)v31 initWithStorageProcessingType:1 storageController:v32 broadcaster:v33];

    int v35 = (void *)MEMORY[0x1E4F6BE90];
    v65[0] = v25;
    v65[1] = v29;
    v65[2] = v30;
    v65[3] = v34;
    int v36 = [MEMORY[0x1E4F1C978] arrayWithObjects:v65 count:4];
    uint64_t v37 = [v35 pipelineFromComponents:v36];

    id v38 = [v46 handler];
    v49[0] = MEMORY[0x1E4F143A8];
    v49[1] = 3221225472;
    v49[2] = sub_1D9751938;
    v49[3] = &unk_1E6B75B78;
    id v50 = v22;
    id v51 = v13;
    id v52 = v47;
    id v53 = &v54;
    [v38 handleMessagePlayedReceiptWithPipeline:v37 input:v50 completionBlock:v49];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v39 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        id v40 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        id v62 = v40;
        __int16 v63 = 2048;
        __int16 v64 = v45;
        id v41 = v40;
        _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v42 = objc_msgSend(v13, "service", v43);
    [v42 sendAckForMessageWithContext:v47];

    __int16 v25 = (IMFindAccountProcessingPipelineComponent *)v55[5];
    v55[5] = 0;
  }

  _Block_object_dispose(&v54, 8);
  os_activity_scope_leave(&state);
}

void sub_1D97518B0(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97517F0);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D9751938(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing played receipt: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D9751AC8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97519F0);
  }
  _Unwind_Resume(a1);
}

void sub_1D9751AFC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v63[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v46 = a4;
  id v13 = a5;
  id v44 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v42 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedDeliveredQuietlyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  uint64_t v52 = 0;
  id v53 = &v52;
  uint64_t v54 = 0x3032000000;
  uint64_t v55 = sub_1D974F940;
  uint64_t v56 = sub_1D974F950;
  id v57 = 0;
  id v41 = v14;
  id v57 = v41;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v46, "fromPushID", v41, v42);
      *(_DWORD *)buf = 138412290;
      id v60 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for delivered quietly receipt fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorDeliveredQuietlyReceipt", @"BlastDoor");
  id v45 = v12;
  char isKindOfClass = objc_opt_isKindOfClass();
  id v18 = v12;
  if ((isKindOfClass & 1) == 0) {
    id v18 = 0;
  }
  id v19 = v18;
  uint64_t v20 = [[IMDeliveredQuietlyReceiptPipelineParameter alloc] initWithDefusedMessage:v19 idsTrustedData:v46];
  if (v20)
  {
    BOOL v21 = [IMFindAccountProcessingPipelineComponent alloc];
    uint64_t v22 = [v13 imdAccount];
    __int16 v23 = [(IMFindAccountProcessingPipelineComponent *)v21 initWithReceivingAccount:v22];

    BOOL v24 = [IMMessageFromStoragePipelineComponent alloc];
    __int16 v25 = [v13 storageController];
    uint64_t v26 = [v13 broadcaster];
    uint64_t v27 = [(IMMessageFromStoragePipelineComponent *)v24 initWithStorageProcessingType:0 storageController:v25 broadcaster:v26];

    __int16 v28 = [[IMDeliveredQuietlyReceiptProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v29 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v30 = [v13 storageController];
    char v31 = [v13 broadcaster];
    uint64_t v32 = [(IMMessageFromStoragePipelineComponent *)v29 initWithStorageProcessingType:1 storageController:v30 broadcaster:v31];

    uint64_t v33 = (void *)MEMORY[0x1E4F6BE90];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    int v34 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:4];
    int v35 = [v33 pipelineFromComponents:v34];

    int v36 = [v43 handler];
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    v47[2] = sub_1D975206C;
    v47[3] = &unk_1E6B75B78;
    id v48 = v20;
    id v49 = v13;
    id v50 = v44;
    id v51 = &v52;
    [v36 handleMessageDeliveredQuietlyReceiptWithPipeline:v35 input:v48 completionBlock:v47];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        id v38 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        id v60 = v38;
        __int16 v61 = 2048;
        id v62 = v12;
        id v39 = v38;
        _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Failed getting delivered quietly blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v40 = objc_msgSend(v13, "service", v41);
    [v40 sendAckForMessageWithContext:v44];

    __int16 v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);
}

void sub_1D9751FE8(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9751F28);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D975206C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing delivered quietly receipt: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing delivered quietly and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D97521FC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9752124);
  }
  _Unwind_Resume(a1);
}

void sub_1D9752230(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v63[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v46 = a4;
  id v13 = a5;
  id v44 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v42 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  uint64_t v52 = 0;
  id v53 = &v52;
  uint64_t v54 = 0x3032000000;
  uint64_t v55 = sub_1D974F940;
  uint64_t v56 = sub_1D974F950;
  id v57 = 0;
  id v41 = v14;
  id v57 = v41;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v46, "fromPushID", v41, v42);
      *(_DWORD *)buf = 138412290;
      id v60 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for notify recipient fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorNotifyRecipientCommand", @"BlastDoor");
  id v45 = v12;
  char isKindOfClass = objc_opt_isKindOfClass();
  id v18 = v12;
  if ((isKindOfClass & 1) == 0) {
    id v18 = 0;
  }
  id v19 = v18;
  uint64_t v20 = [[IMNotifyRecipientCommandPipelineParameter alloc] initWithDefusedMessage:v19 idsTrustedData:v46];
  if (v20)
  {
    BOOL v21 = [IMFindAccountProcessingPipelineComponent alloc];
    uint64_t v22 = [v13 imdAccount];
    __int16 v23 = [(IMFindAccountProcessingPipelineComponent *)v21 initWithReceivingAccount:v22];

    BOOL v24 = [IMMessageFromStoragePipelineComponent alloc];
    __int16 v25 = [v13 storageController];
    uint64_t v26 = [v13 broadcaster];
    uint64_t v27 = [(IMMessageFromStoragePipelineComponent *)v24 initWithStorageProcessingType:0 storageController:v25 broadcaster:v26];

    __int16 v28 = [[IMNotifyRecipientCommandProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v29 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v30 = [v13 storageController];
    char v31 = [v13 broadcaster];
    uint64_t v32 = [(IMMessageFromStoragePipelineComponent *)v29 initWithStorageProcessingType:1 storageController:v30 broadcaster:v31];

    uint64_t v33 = (void *)MEMORY[0x1E4F6BE90];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    int v34 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:4];
    int v35 = [v33 pipelineFromComponents:v34];

    int v36 = [v43 handler];
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    v47[2] = sub_1D97527A0;
    v47[3] = &unk_1E6B75B78;
    id v48 = v20;
    id v49 = v13;
    id v50 = v44;
    id v51 = &v52;
    [v36 handleNotifyRecipientCommandWithPipeline:v35 input:v48 completionBlock:v47];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        id v38 = objc_opt_class();
        *(_DWORD *)buf = 138412546;
        id v60 = v38;
        __int16 v61 = 2048;
        id v62 = v12;
        id v39 = v38;
        _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Failed getting notify recipient blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v40 = objc_msgSend(v13, "service", v41);
    [v40 sendAckForMessageWithContext:v44];

    __int16 v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);
}

void sub_1D975271C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D975265CLL);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97527A0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    int v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing notify recipient command: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing notify recipient command and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);
    }
  }
  uint64_t v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D9752930(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9752858);
  }
  _Unwind_Resume(a1);
}

void sub_1D9752964(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v115[15] = *MEMORY[0x1E4F143B8];
  uint64_t v91 = a2;
  id v89 = a3;
  id v92 = a4;
  id v90 = a5;
  id v85 = a6;
  id v12 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  uint64_t v82 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedMessage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v82, &state);
  uint64_t v102 = 0;
  id v103 = &v102;
  uint64_t v104 = 0x3032000000;
  BOOL v105 = sub_1D974F940;
  char v106 = sub_1D974F950;
  id v107 = 0;
  id v81 = v12;
  id v107 = v81;
  if (IMOSLoggingEnabled())
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      __int16 v14 = [v92 fromPushID];
      *(_DWORD *)buf = 138412290;
      v110 = v14;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Setting up pipeline for message fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorTextMessage", @"BlastDoor");
  char isKindOfClass = objc_opt_isKindOfClass();
  uint64_t v16 = v89;
  if ((isKindOfClass & 1) == 0) {
    uint64_t v16 = 0;
  }
  id v83 = v16;
  id v17 = [v83 messageSubType];
  uint64_t v18 = [v17 type];

  switch(v18)
  {
    case 0:
      uint64_t v87 = [[IMTypingIndicatorPipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      id v19 = [IMTypingIndicatorProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v19 initWithMessageStore:v20];
      goto LABEL_16;
    case 2:
      uint64_t v87 = [[IMAssociatedMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      uint64_t v22 = [IMAssociatedMessageProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v22 initWithMessageStore:v20];
      goto LABEL_16;
    case 3:
      uint64_t v87 = [[IMBalloonPluginPipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      __int16 v23 = [IMBalloonPluginProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v23 initWithMessageStore:v20];
      goto LABEL_16;
    case 4:
      uint64_t v87 = [[IMStickerMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      long long v84 = [[IMStickerMessageProcessingPipelineComponent alloc] initWithPipelineResources:v90];
      goto LABEL_17;
    case 5:
      uint64_t v87 = [[IMTextMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      BOOL v24 = [IMAudioMessageProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v24 initWithMessageStore:v20];
      goto LABEL_16;
    case 6:
      uint64_t v87 = [[IMEmojiTapbackMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      __int16 v25 = [IMEmojiTapbackMessageProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v25 initWithMessageStore:v20];
      goto LABEL_16;
    case 7:
      uint64_t v87 = [[IMStickerTapbackMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      uint64_t v26 = [IMStickerTapbackMessageProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v26 initWithMessageStore:v20];
      goto LABEL_16;
    default:
      uint64_t v87 = [[IMTextMessagePipelineParameter alloc] initWithBD:v83 idsTrustedData:v92];
      BOOL v21 = [IMTextMessageProcessingPipelineComponent alloc];
      uint64_t v20 = [v91 messageStore];
      long long v84 = [(IMTextMessageProcessingPipelineComponent *)v21 initWithMessageStore:v20];
LABEL_16:

LABEL_17:
      if (IMOSLoggingEnabled())
      {
        uint64_t v27 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
        {
          __int16 v28 = [(IMTextMessagePipelineParameter *)v87 GUID];
          *(_DWORD *)buf = 138412290;
          v110 = v28;
          _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "messageCreationComponent created for %@", buf, 0xCu);
        }
      }
      int v88 = [v90 imdAccount];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v32 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v88;
            _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Account was not the right class: %@", buf, 0xCu);
          }
        }
        goto LABEL_39;
      }
      double v86 = [v88 session];
      if (objc_opt_respondsToSelector())
      {
        uint64_t v29 = [v88 idsAccount];
        uint64_t v30 = [v86 _pushHandlerForIDSAccount:v29];

        if ((!v30 || (objc_opt_respondsToSelector() & 1) == 0) && IMOSLoggingEnabled())
        {
          char v31 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v30;
            _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Push handler either nil or session did not respond to incomingMessage: %@", buf, 0xCu);
          }
        }
      }
      else
      {
        if (!IMOSLoggingEnabled()) {
          goto LABEL_38;
        }
        uint64_t v30 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v110 = v86;
          _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "Session either nil or did not respond to _pushHandlerForIDSAccount: %@", buf, 0xCu);
        }
      }

LABEL_38:
      if (v86) {
        goto LABEL_44;
      }
LABEL_39:
      uint64_t v33 = +[IMDServiceController sharedController];
      int v34 = [v33 serviceWithName:*MEMORY[0x1E4F6E1B0]];

      double v86 = +[IMDServiceSession existingServiceSessionForService:v34];
      if (IMOSLoggingEnabled())
      {
        int v35 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 138412290;
          v110 = v86;
          _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Falling back to service session: %@", buf, 0xCu);
        }
      }
LABEL_44:
      if (v87 && v84)
      {
        if (IMOSLoggingEnabled())
        {
          int v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            uint64_t v37 = [(IMTextMessagePipelineParameter *)v87 GUID];
            *(_DWORD *)buf = 138412290;
            v110 = v37;
            _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Going through new message processing path: %@, ", buf, 0xCu);
          }
        }
        id v38 = objc_alloc_init(IMDeferReplicatedMessagePipelineComponent);
        id v39 = [IMFindAccountProcessingPipelineComponent alloc];
        id v40 = [v90 imdAccount];
        uint64_t v80 = [(IMFindAccountProcessingPipelineComponent *)v39 initWithReceivingAccount:v40];

        id v41 = [IMSenderCapabilityPipelineComponent alloc];
        id v42 = [MEMORY[0x1E4F1CAD0] setWithObject:*MEMORY[0x1E4F6B2C0]];
        id v43 = [v92 fromToken];
        uint64_t v79 = [(IMSenderCapabilityPipelineComponent *)v41 initWithRegistrationProperties:v42 pushToken:v43];

        id v44 = [IMMessageFromStoragePipelineComponent alloc];
        id v45 = [v91 messageFromStorageController];
        id v46 = [v91 broadcaster];
        __int16 v78 = [(IMMessageFromStoragePipelineComponent *)v44 initWithStorageProcessingType:0 storageController:v45 broadcaster:v46];

        id v47 = [IMFindChatProcessingPipelineComponent alloc];
        id v48 = [v91 chatRegistry];
        char v77 = [(IMFindChatProcessingPipelineComponent *)v47 initWithChatRegistry:v48];

        id v76 = [[IMConvergeGroupProcessingPipelineComponent alloc] initWithIDSTrustedData:v92];
        id v49 = [IMMessageLegacyProcessingPipelineComponent alloc];
        id v50 = [v91 idsService];
        id v75 = [(IMMessageLegacyProcessingPipelineComponent *)v49 initWithIDSTrustedData:v92 messageContext:v85 idsService:v50];

        __int16 v74 = [[IMMessageMomentShareProcessingPipelineComponent alloc] initWithTrustedData:v92];
        uint64_t v73 = [[IMJunkMessageProcessingPipelineComponent alloc] initWithIDSTrustedData:v92];
        id v51 = [IMCheckInMessageProcessingPipelineComponent alloc];
        uint64_t v52 = [v90 imdAccount];
        id v72 = [(IMCheckInMessageProcessingPipelineComponent *)v51 initWithAccount:v52];

        id v53 = [IMFamilySenderMessageProcessingPipelineComponent alloc];
        uint64_t v54 = [v90 imdAccount];
        uint64_t v55 = [(IMFamilySenderMessageProcessingPipelineComponent *)v53 initWithAccount:v54 idsTrustedData:v92];

        uint64_t v56 = objc_alloc_init(IMResolveFallbackHashesProcessingPipelineComponent);
        id v57 = objc_alloc_init(IMSeenAsOffGridProcessingPipelineComponent);
        id v58 = objc_alloc_init(IMOverrideOffGridStatusPipelineComponent);
        id v59 = objc_alloc(MEMORY[0x1E4F1CA48]);
        v115[0] = v38;
        v115[1] = v80;
        v115[2] = v79;
        v115[3] = v78;
        v115[4] = v77;
        v115[5] = v76;
        v115[6] = v56;
        v115[7] = v84;
        v115[8] = v55;
        v115[9] = v72;
        v115[10] = v58;
        v115[11] = v75;
        v115[12] = v74;
        v115[13] = v73;
        v115[14] = v57;
        id v60 = [MEMORY[0x1E4F1C978] arrayWithObjects:v115 count:15];
        __int16 v61 = (void *)[v59 initWithArray:v60];

        id v62 = [MEMORY[0x1E4F6BE90] pipelineFromComponents:v61];
        __int16 v63 = [v91 handler];
        if (!v63 && IMOSLoggingEnabled())
        {
          __int16 v64 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v64, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 138412290;
            v110 = v91;
            _os_log_impl(&dword_1D967A000, v64, OS_LOG_TYPE_INFO, "Handler not found!!! %@, ", buf, 0xCu);
          }
        }
        v93[0] = MEMORY[0x1E4F143A8];
        v93[1] = 3221225472;
        v93[2] = sub_1D9753948;
        v93[3] = &unk_1E6B75C10;
        BOOL v94 = v91;
        __int16 v95 = v87;
        id v96 = v85;
        id v101 = &v102;
        id v65 = v38;
        id v97 = v65;
        id v66 = v63;
        id v98 = v66;
        id v67 = v62;
        id v99 = v67;
        id v100 = v92;
        [v66 handleMessageWithPipeline:v67 input:v95 completionBlock:v93];
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          char v68 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
          {
            long long v69 = objc_opt_class();
            *(_DWORD *)buf = 138412802;
            v110 = v69;
            __int16 v111 = 2048;
            id v112 = v89;
            __int16 v113 = 2112;
            v114 = v84;
            id v70 = v69;
            _os_log_impl(&dword_1D967A000, v68, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, with messageCreationComponent: %@", buf, 0x20u);
          }
        }
        __int16 v71 = [v91 idsService];
        [v71 sendAckForMessageWithContext:v85];

        id v65 = (IMDeferReplicatedMessagePipelineComponent *)v103[5];
        v103[5] = 0;
      }

      _Block_object_dispose(&v102, 8);
      os_activity_scope_leave(&state);

      return;
  }
}

void sub_1D9753948(uint64_t a1, char a2, void *a3)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) idsService];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 40) GUID];
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      uint64_t v30 = v8;
      __int16 v31 = 2112;
      uint64_t v32 = v6;
      __int16 v33 = 2112;
      uint64_t v34 = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up text message: %@ on service %@ with context %@", buf, 0x20u);
    }
  }
  [v6 sendAckForMessageWithContext:*(void *)(a1 + 48)];
  uint64_t v10 = *(void *)(*(void *)(a1 + 88) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;

  if ((a2 & 1) == 0)
  {
    id v12 = [v5 domain];
    if ([v12 isEqualToString:*MEMORY[0x1E4F6BE88]])
    {
      BOOL v13 = [v5 code] == 18;

      if (v13)
      {
        __int16 v14 = +[IMPendingReplicatedMessageCache sharedCache];
        id v15 = [*(id *)(a1 + 40) GUID];
        uint64_t v16 = [*(id *)(a1 + 40) replicatedFallbackGUIDs];
        v21[0] = MEMORY[0x1E4F143A8];
        v21[1] = 3221225472;
        v21[2] = sub_1D9753CBC;
        void v21[3] = &unk_1E6B75BE8;
        id v22 = *(id *)(a1 + 40);
        id v23 = v6;
        id v24 = *(id *)(a1 + 48);
        id v25 = *(id *)(a1 + 56);
        id v26 = *(id *)(a1 + 64);
        id v27 = *(id *)(a1 + 72);
        id v28 = *(id *)(a1 + 80);
        [v14 addPendingMessageWithGUID:v15 replicatedFallbackGUIDs:v16 releaseBlock:v21];

        id v17 = v22;
LABEL_11:

        goto LABEL_12;
      }
    }
    else
    {
    }
    id v17 = [*(id *)(a1 + 40) GUID];
    uint64_t v18 = [NSString stringWithFormat:@"%@", &unk_1F33C5A18];
    id v19 = [*(id *)(a1 + 80) fromIdentifier];
    uint64_t v20 = [*(id *)(a1 + 80) fromToken];
    +[IMBlastdoor sendBlastDoorError:v5 guid:v17 messageTypeString:v18 senderURI:v19 senderToken:v20 messageContext:*(void *)(a1 + 48) payloadAttachmentURL:0];

    goto LABEL_11;
  }
LABEL_12:
}

void sub_1D9753CBC(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      char v11 = [*(id *)(a1 + 32) GUID];
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      *(_DWORD *)buf = 138412802;
      id v24 = v11;
      __int16 v25 = 2112;
      uint64_t v26 = v12;
      __int16 v27 = 2112;
      uint64_t v28 = v13;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Reprocessing pending message: %@ on service %@ with context %@", buf, 0x20u);
    }
  }
  [*(id *)(a1 + 56) setSkipDeferral:1];
  [*(id *)(a1 + 56) setReplicationSourceServiceNameOverride:v7];
  [*(id *)(a1 + 32) setChat:v8];
  __int16 v14 = *(void **)(a1 + 64);
  uint64_t v15 = *(void *)(a1 + 72);
  uint64_t v16 = *(void **)(a1 + 32);
  v18[0] = MEMORY[0x1E4F143A8];
  v18[1] = 3221225472;
  void v18[2] = sub_1D9753EE4;
  v18[3] = &unk_1E6B75BC0;
  id v19 = v16;
  id v20 = *(id *)(a1 + 80);
  id v21 = *(id *)(a1 + 48);
  id v22 = v9;
  id v17 = v9;
  [v14 handleMessageWithPipeline:v15 input:v19 completionBlock:v18];
}

void sub_1D9753EE4(uint64_t a1, int a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [*(id *)(a1 + 32) GUID];
      id v8 = @"NO";
      *(_DWORD *)buf = 138412802;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      if (a2) {
        id v8 = @"YES";
      }
      id v17 = v8;
      __int16 v18 = 2112;
      id v19 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Finished reprocessing pending message: %@ success: %@ error: %@", buf, 0x20u);
    }
  }
  if ((a2 & 1) == 0)
  {
    id v9 = [*(id *)(a1 + 32) GUID];
    uint64_t v10 = [NSString stringWithFormat:@"%@", &unk_1F33C5A18];
    char v11 = [*(id *)(a1 + 40) fromIdentifier];
    uint64_t v12 = [*(id *)(a1 + 40) fromToken];
    +[IMBlastdoor sendBlastDoorError:v5 guid:v9 messageTypeString:v10 senderURI:v11 senderToken:v12 messageContext:*(void *)(a1 + 48) payloadAttachmentURL:0];
  }
  uint64_t v13 = *(void *)(a1 + 56);
  if (v13) {
    (*(void (**)(void))(v13 + 16))();
  }
}

void sub_1D97540D0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  id v38 = a2;
  id v12 = a3;
  id v39 = a4;
  id v13 = a5;
  id v36 = a6;
  id v37 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  uint64_t v35 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedSyndicationAction", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v35, &state);
  MEMORY[0x1E0169C30](@"BlastDoorSyndicationAction", @"BlastDoor");
  if (objc_opt_isKindOfClass()) {
    __int16 v14 = v12;
  }
  else {
    __int16 v14 = 0;
  }
  id v15 = v14;
  if (v15)
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        id v17 = [v39 fromPushID];
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Setting up pipeline for SyndicatedAction fromID: %@, ", (uint8_t *)&buf, 0xCu);
      }
    }
    *(void *)&long long buf = 0;
    *((void *)&buf + 1) = &buf;
    uint64_t v52 = 0x3032000000;
    id v53 = sub_1D974F940;
    uint64_t v54 = sub_1D974F950;
    id v55 = 0;
    id v55 = v37;
    __int16 v18 = [[IMSyndicationActionPipelineParameter alloc] initWithDefusedSyndicationAction:v15 idsTrustedData:v39 pipelineResources:v13];
    if (v18)
    {
      id v19 = [IMFindAccountProcessingPipelineComponent alloc];
      uint64_t v20 = [v13 imdAccount];
      id v21 = [(IMFindAccountProcessingPipelineComponent *)v19 initWithReceivingAccount:v20];

      id v22 = [IMFindChatProcessingPipelineComponent alloc];
      id v23 = [v38 chatRegistry];
      id v24 = [(IMFindChatProcessingPipelineComponent *)v22 initWithChatRegistry:v23];

      __int16 v25 = [[IMSyndicationActionProcessingPipelineComponent alloc] initWithPipelineResources:v13];
      uint64_t v26 = (void *)MEMORY[0x1E4F6BE90];
      v50[0] = v21;
      v50[1] = v24;
      v50[2] = v24;
      v50[3] = v25;
      __int16 v27 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:4];
      uint64_t v28 = [v26 pipelineFromComponents:v27];

      uint64_t v29 = [v38 handler];
      v40[0] = MEMORY[0x1E4F143A8];
      v40[1] = 3221225472;
      void v40[2] = sub_1D97545FC;
      v40[3] = &unk_1E6B75B78;
      id v41 = v18;
      id v42 = v13;
      id v43 = v36;
      p_long long buf = &buf;
      [v29 handleSyndicatedActionWithPipeline:v28 input:v41 completionBlock:v40];
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        __int16 v31 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          uint64_t v32 = objc_opt_class();
          *(_DWORD *)id v46 = 138412546;
          id v47 = v32;
          __int16 v48 = 2048;
          id v49 = v12;
          id v33 = v32;
          _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Failed getting SyndicationAction blastdoor object from result: <%@ %p>, ", v46, 0x16u);
        }
      }
      uint64_t v34 = [v13 service];
      [v34 sendAckForMessageWithContext:v36];

      id v21 = *(IMFindAccountProcessingPipelineComponent **)(*((void *)&buf + 1) + 40);
      *(void *)(*((void *)&buf + 1) + 40) = 0;
    }

    _Block_object_dispose(&buf, 8);
  }
  else
  {
    uint64_t v30 = IMLogHandleForCategory();
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_1D99019B4(v30);
    }
  }
  os_activity_scope_leave(&state);
}

void sub_1D9754574(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97544B8);
  }
  _Block_object_dispose((const void *)(v23 - 144), 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97545FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) syndicationAction];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing SyndicationAction: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) syndicationAction];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D975478C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97546B4);
  }
  _Unwind_Resume(a1);
}

void sub_1D97547C0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v63[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v46 = a4;
  id v13 = a5;
  id v44 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v42 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v42, &state);
  uint64_t v52 = 0;
  id v53 = &v52;
  uint64_t v54 = 0x3032000000;
  id v55 = sub_1D974F940;
  uint64_t v56 = sub_1D974F950;
  id v57 = 0;
  id v41 = v14;
  id v57 = v41;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v46, "fromPushID", v41, v42);
      *(_DWORD *)long long buf = 138412290;
      id v60 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for edited message received fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorEditMessageCommand", @"BlastDoor");
  id v45 = v12;
  char isKindOfClass = objc_opt_isKindOfClass();
  __int16 v18 = v12;
  if ((isKindOfClass & 1) == 0) {
    __int16 v18 = 0;
  }
  id v19 = v18;
  uint64_t v20 = [[IMEditMessageCommandPipelineParameter alloc] initWithDefusedMessage:v19 idsTrustedData:v46];
  if (v20)
  {
    id v21 = [IMFindAccountProcessingPipelineComponent alloc];
    id v22 = [v13 imdAccount];
    uint64_t v23 = [(IMFindAccountProcessingPipelineComponent *)v21 initWithReceivingAccount:v22];

    id v24 = [IMMessageFromStoragePipelineComponent alloc];
    __int16 v25 = [v13 storageController];
    uint64_t v26 = [v13 broadcaster];
    __int16 v27 = [(IMMessageFromStoragePipelineComponent *)v24 initWithStorageProcessingType:0 storageController:v25 broadcaster:v26];

    uint64_t v28 = [[IMEditMessageCommandProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v29 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v30 = [v13 storageController];
    __int16 v31 = [v13 broadcaster];
    uint64_t v32 = [(IMMessageFromStoragePipelineComponent *)v29 initWithStorageProcessingType:1 storageController:v30 broadcaster:v31];

    id v33 = (void *)MEMORY[0x1E4F6BE90];
    v63[0] = v23;
    v63[1] = v27;
    v63[2] = v28;
    v63[3] = v32;
    uint64_t v34 = [MEMORY[0x1E4F1C978] arrayWithObjects:v63 count:4];
    uint64_t v35 = [v33 pipelineFromComponents:v34];

    id v36 = [v43 handler];
    v47[0] = MEMORY[0x1E4F143A8];
    v47[1] = 3221225472;
    v47[2] = sub_1D9754D30;
    v47[3] = &unk_1E6B75B78;
    __int16 v48 = v20;
    id v49 = v13;
    id v50 = v44;
    id v51 = &v52;
    [v36 handleEditMessageCommandWithPipeline:v35 input:v48 completionBlock:v47];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        id v38 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v60 = v38;
        __int16 v61 = 2048;
        id v62 = v12;
        id v39 = v38;
        _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Failed getting edit message blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v40 = objc_msgSend(v13, "service", v41);
    [v40 sendAckForMessageWithContext:v44];

    uint64_t v23 = (IMFindAccountProcessingPipelineComponent *)v53[5];
    v53[5] = 0;
  }

  _Block_object_dispose(&v52, 8);
  os_activity_scope_leave(&state);
}

void sub_1D9754CAC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9754BECLL);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D9754D30(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) editCommandGUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing edit message command: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) editCommandGUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing edit message command and cleaning up: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D9754EC0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9754DE8);
  }
  _Unwind_Resume(a1);
}

void sub_1D9754EF4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  void v62[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v45 = a4;
  id v13 = a5;
  id v44 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v41 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x3032000000;
  uint64_t v54 = sub_1D974F940;
  id v55 = sub_1D974F950;
  id v56 = 0;
  id v40 = v14;
  id v56 = v40;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v45, "fromPushID", v40, v41);
      *(_DWORD *)long long buf = 138412290;
      id v59 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for junk recovery received fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorRecoverJunkCommand", @"BlastDoor");
  id v42 = v12;
  if (objc_opt_isKindOfClass()) {
    id v17 = v12;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;
  id v19 = [[IMRecoverJunkCommandPipelineParameter alloc] initWithDefusedMessage:v18 idsTrustedData:v45];
  if (v19)
  {
    uint64_t v20 = [IMFindAccountProcessingPipelineComponent alloc];
    id v21 = [v13 imdAccount];
    id v22 = [(IMFindAccountProcessingPipelineComponent *)v20 initWithReceivingAccount:v21];

    uint64_t v23 = [IMMessageFromStoragePipelineComponent alloc];
    id v24 = [v13 storageController];
    __int16 v25 = [v13 broadcaster];
    uint64_t v26 = [(IMMessageFromStoragePipelineComponent *)v23 initWithStorageProcessingType:0 storageController:v24 broadcaster:v25];

    __int16 v27 = [[IMRecoverJunkCommandProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v28 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v29 = [v13 storageController];
    uint64_t v30 = [v13 broadcaster];
    __int16 v31 = [(IMMessageFromStoragePipelineComponent *)v28 initWithStorageProcessingType:1 storageController:v29 broadcaster:v30];

    uint64_t v32 = (void *)MEMORY[0x1E4F6BE90];
    v62[0] = v22;
    v62[1] = v26;
    v62[2] = v27;
    v62[3] = v31;
    id v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:4];
    uint64_t v34 = [v32 pipelineFromComponents:v33];

    uint64_t v35 = [v43 handler];
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = sub_1D9755464;
    v46[3] = &unk_1E6B75B78;
    id v47 = v19;
    id v48 = v13;
    id v49 = v44;
    id v50 = &v51;
    [v35 handleRecoverJunkCommandWithPipeline:v34 input:v47 completionBlock:v46];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v36 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        id v37 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v59 = v37;
        __int16 v60 = 2048;
        id v61 = v12;
        id v38 = v37;
        _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Failed getting recover junk command blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v39 = objc_msgSend(v13, "service", v40);
    [v39 sendAckForMessageWithContext:v44];

    id v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);
}

void sub_1D97553DC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D975531CLL);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D9755464(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing recover junk command: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing recover junk command and cleaning up: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D97555F4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D975551CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D9755628(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  void v62[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v45 = a4;
  id v13 = a5;
  id v44 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v41 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x3032000000;
  uint64_t v54 = sub_1D974F940;
  id v55 = sub_1D974F950;
  id v56 = 0;
  id v40 = v14;
  id v56 = v40;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v45, "fromPushID", v40, v41);
      *(_DWORD *)long long buf = 138412290;
      id v59 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for sticker reposition received fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorRepositionStickerCommand", @"BlastDoor");
  id v42 = v12;
  if (objc_opt_isKindOfClass()) {
    id v17 = v12;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;
  id v19 = [[IMRepositionStickerCommandPipelineParameter alloc] initWithDefusedMessage:v18 idsTrustedData:v45];
  if (v19)
  {
    uint64_t v20 = [IMFindAccountProcessingPipelineComponent alloc];
    id v21 = [v13 imdAccount];
    id v22 = [(IMFindAccountProcessingPipelineComponent *)v20 initWithReceivingAccount:v21];

    uint64_t v23 = [IMMessageFromStoragePipelineComponent alloc];
    id v24 = [v13 storageController];
    __int16 v25 = [v13 broadcaster];
    uint64_t v26 = [(IMMessageFromStoragePipelineComponent *)v23 initWithStorageProcessingType:0 storageController:v24 broadcaster:v25];

    __int16 v27 = [[IMRepositionStickerProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v28 = [IMMessageFromStoragePipelineComponent alloc];
    uint64_t v29 = [v13 storageController];
    uint64_t v30 = [v13 broadcaster];
    __int16 v31 = [(IMMessageFromStoragePipelineComponent *)v28 initWithStorageProcessingType:1 storageController:v29 broadcaster:v30];

    uint64_t v32 = (void *)MEMORY[0x1E4F6BE90];
    v62[0] = v22;
    v62[1] = v26;
    v62[2] = v27;
    v62[3] = v31;
    id v33 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:4];
    uint64_t v34 = [v32 pipelineFromComponents:v33];

    uint64_t v35 = [v43 handler];
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = sub_1D9755B98;
    v46[3] = &unk_1E6B75B78;
    id v47 = v19;
    id v48 = v13;
    id v49 = v44;
    id v50 = &v51;
    [v35 handleRepositionStickerCommandWithPipeline:v34 input:v47 completionBlock:v46];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v36 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
      {
        id v37 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v59 = v37;
        __int16 v60 = 2048;
        id v61 = v12;
        id v38 = v37;
        _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v39 = objc_msgSend(v13, "service", v40);
    [v39 sendAckForMessageWithContext:v44];

    id v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);
}

void sub_1D9755B10(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9755A50);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D9755B98(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing reposition sticker command: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D9755D28(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9755C50);
  }
  _Unwind_Resume(a1);
}

void sub_1D9755D5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v50[1] = *MEMORY[0x1E4F143B8];
  id v31 = a2;
  id v12 = a3;
  id v33 = a4;
  id v13 = a5;
  id v32 = a6;
  id v14 = a7;
  id v15 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedNotifyReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v15, &state);
  uint64_t v39 = 0;
  id v40 = &v39;
  uint64_t v41 = 0x3032000000;
  id v42 = sub_1D974F940;
  id v43 = sub_1D974F950;
  id v44 = 0;
  id v16 = v14;
  id v44 = v16;
  if (IMOSLoggingEnabled())
  {
    id v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      id v18 = [v33 fromPushID];
      *(_DWORD *)long long buf = 138412290;
      id v47 = v18;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Setting up pipeline for scheduled message update fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorScheduledMessageUpdate", @"BlastDoor");
  if (objc_opt_isKindOfClass()) {
    id v19 = v12;
  }
  else {
    id v19 = 0;
  }
  id v20 = v19;
  id v21 = [[IMScheduledMessageUpdatePipelineParameter alloc] initWithDefusedMessage:v20 idsTrustedData:v33];
  if (v21)
  {
    id v22 = [[IMScheduledMessageUpdateProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    uint64_t v23 = (void *)MEMORY[0x1E4F6BE90];
    v50[0] = v22;
    id v24 = [MEMORY[0x1E4F1C978] arrayWithObjects:v50 count:1];
    __int16 v25 = [v23 pipelineFromComponents:v24];

    uint64_t v26 = [v31 handler];
    v34[0] = MEMORY[0x1E4F143A8];
    v34[1] = 3221225472;
    v34[2] = sub_1D97561CC;
    v34[3] = &unk_1E6B75B78;
    uint64_t v35 = v21;
    id v36 = v13;
    id v37 = v32;
    id v38 = &v39;
    [v26 handleScheduledMessageUpdateCommandWithPipeline:v25 input:v35 completionBlock:v34];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v27 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        uint64_t v28 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v47 = v28;
        __int16 v48 = 2048;
        id v49 = v12;
        id v29 = v28;
        _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    uint64_t v30 = [v13 service];
    [v30 sendAckForMessageWithContext:v32];

    id v22 = (IMScheduledMessageUpdateProcessingPipelineComponent *)v40[5];
    v40[5] = 0;
  }

  _Block_object_dispose(&v39, 8);
  os_activity_scope_leave(&state);
}

void sub_1D9756150(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D975609CLL);
  }
  _Block_object_dispose(&a21, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97561CC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412546;
      id v13 = v6;
      __int16 v14 = 2112;
      id v15 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing scheduled message update command: %@, %@", (uint8_t *)&v12, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) GUID];
      int v12 = 138412290;
      id v13 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v12, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = *(void *)(*(void *)(a1 + 56) + 8);
  char v11 = *(void **)(v10 + 40);
  *(void *)(v10 + 40) = 0;
}

void sub_1D975635C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9756284);
  }
  _Unwind_Resume(a1);
}

void sub_1D9756390(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  void v62[4] = *MEMORY[0x1E4F143B8];
  id v43 = a2;
  id v12 = a3;
  id v44 = a4;
  id v13 = a5;
  id v45 = a6;
  id v14 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  uint64_t v41 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedCrossServiceAssociationMessage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v41, &state);
  uint64_t v51 = 0;
  uint64_t v52 = &v51;
  uint64_t v53 = 0x3032000000;
  uint64_t v54 = sub_1D974F940;
  id v55 = sub_1D974F950;
  id v56 = 0;
  id v40 = v14;
  id v56 = v40;
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = objc_msgSend(v44, "fromPushID", v40, v41);
      *(_DWORD *)long long buf = 138412290;
      id v59 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Setting up pipeline for iml to im association update fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorCrossServiceAssociationMessage", @"BlastDoor");
  id v42 = v12;
  if (objc_opt_isKindOfClass()) {
    id v17 = v12;
  }
  else {
    id v17 = 0;
  }
  id v18 = v17;
  id v19 = [[IMCrossServiceAssociationMessagePipelineParameter alloc] initWithDefusedMessage:v18 idsTrustedData:v44];
  if (v19)
  {
    id v20 = [IMFindAccountProcessingPipelineComponent alloc];
    id v21 = [v13 imdAccount];
    id v22 = [(IMFindAccountProcessingPipelineComponent *)v20 initWithReceivingAccount:v21];

    uint64_t v23 = [IMFindChatProcessingPipelineComponent alloc];
    id v24 = [v13 chatRegistry];
    __int16 v25 = [(IMFindChatProcessingPipelineComponent *)v23 initWithChatRegistry:v24];

    uint64_t v26 = [IMMessageFromStoragePipelineComponent alloc];
    __int16 v27 = [v13 storageController];
    uint64_t v28 = [v13 broadcaster];
    id v29 = [(IMMessageFromStoragePipelineComponent *)v26 initWithStorageProcessingType:0 storageController:v27 broadcaster:v28];

    uint64_t v30 = [[IMCrossServiceAssociationMessageProcessingPipelineComponent alloc] initWithPipelineResources:v13];
    id v31 = (void *)MEMORY[0x1E4F6BE90];
    v62[0] = v22;
    v62[1] = v25;
    v62[2] = v29;
    v62[3] = v30;
    id v32 = [MEMORY[0x1E4F1C978] arrayWithObjects:v62 count:4];
    id v33 = [v31 pipelineFromComponents:v32];

    uint64_t v34 = [v43 handler];
    v46[0] = MEMORY[0x1E4F143A8];
    v46[1] = 3221225472;
    v46[2] = sub_1D9756914;
    v46[3] = &unk_1E6B75B78;
    id v47 = v19;
    id v48 = v13;
    id v49 = v45;
    id v50 = &v51;
    [v34 handleCrossServiceAssociationCommandWithPipeline:v33 input:v47 completionBlock:v46];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v35 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        id v36 = objc_opt_class();
        *(_DWORD *)long long buf = 138412546;
        id v59 = v36;
        __int16 v60 = 2048;
        id v61 = v12;
        id v37 = v36;
        _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Failed getting command blastdoor object from result: <%@ %p>, ", buf, 0x16u);
      }
    }
    id v38 = objc_msgSend(v13, "service", v40);
    [v38 sendAckForMessageWithContext:v45];

    uint64_t v39 = [v13 service];
    im_sendCertifiedDeliveryReceiptIfPossible();

    id v22 = (IMFindAccountProcessingPipelineComponent *)v52[5];
    v52[5] = 0;
  }

  _Block_object_dispose(&v51, 8);
  os_activity_scope_leave(&state);
}

void sub_1D975688C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97567A0);
  }
  _Block_object_dispose(&a23, 8);
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D9756914(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (v4 && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = [*(id *)(a1 + 32) GUID];
      int v14 = 138412546;
      id v15 = v6;
      __int16 v16 = 2112;
      id v17 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Error while processing iml to im association command: %@, %@", (uint8_t *)&v14, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      id v8 = [*(id *)(a1 + 32) GUID];
      int v14 = 138412290;
      id v15 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Ack'ing command and cleaning up: %@", (uint8_t *)&v14, 0xCu);
    }
  }
  id v9 = [*(id *)(a1 + 40) service];
  [v9 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v10 = [*(id *)(a1 + 40) service];
  char v11 = [*(id *)(a1 + 32) GUID];
  im_sendCertifiedDeliveryReceiptIfPossible();

  uint64_t v12 = *(void *)(*(void *)(a1 + 56) + 8);
  id v13 = *(void **)(v12 + 40);
  *(void *)(v12 + 40) = 0;
}

void sub_1D9756AFC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97569D0);
  }
  _Unwind_Resume(a1);
}

void sub_1D9756B9C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  v89[7] = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v68 = a3;
  id v69 = a4;
  id v64 = a5;
  id v63 = a6;
  id v13 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v59 = _os_activity_create(&dword_1D967A000, "com.apple.messages.iMessageReceivedMessage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v59, &state);
  uint64_t v76 = 0;
  char v77 = &v76;
  uint64_t v78 = 0x3032000000;
  uint64_t v79 = sub_1D974F940;
  uint64_t v80 = sub_1D974F950;
  id v81 = 0;
  id v58 = v13;
  id v81 = v58;
  if (IMOSLoggingEnabled())
  {
    int v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      id v15 = [v69 fromPushID];
      *(_DWORD *)long long buf = 138412290;
      long long v84 = v15;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Setting up pipeline for basic message fromID: %@, ", buf, 0xCu);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorBasicTextMessage", @"BlastDoor");
  char isKindOfClass = objc_opt_isKindOfClass();
  id v17 = v68;
  if ((isKindOfClass & 1) == 0) {
    id v17 = 0;
  }
  id v61 = v17;
  uint64_t v18 = [v61 messageSubType];
  uint64_t v19 = [v18 type];

  switch(v19)
  {
    case 0:
      id v65 = [[IMTypingIndicatorPipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      id v20 = [IMTypingIndicatorProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v20 initWithMessageStore:v21];
      break;
    case 2:
      id v65 = [[IMAssociatedMessagePipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      uint64_t v23 = [IMAssociatedMessageProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v23 initWithMessageStore:v21];
      break;
    case 3:
      id v65 = [[IMTypingIndicatorPipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      id v24 = [IMAudioMessageProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v24 initWithMessageStore:v21];
      break;
    case 4:
      id v65 = [[IMTextMessagePipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      [(IMTextMessagePipelineParameter *)v65 setWasDetonated:1];
      __int16 v25 = [IMTextMessageProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v25 initWithMessageStore:v21];
      break;
    case 5:
      id v65 = [[IMEmojiTapbackMessagePipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      uint64_t v26 = [IMEmojiTapbackMessageProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v26 initWithMessageStore:v21];
      break;
    default:
      id v65 = [[IMTextMessagePipelineParameter alloc] initWithBDBasic:v61 idsTrustedData:v69];
      id v22 = [IMTextMessageProcessingPipelineComponent alloc];
      id v21 = [v12 messageStore];
      id v62 = [(IMTextMessageProcessingPipelineComponent *)v22 initWithMessageStore:v21];
      break;
  }

  id v67 = [v64 imdAccount];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      id v29 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v84 = v67;
        _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Account was not the right class: %@", buf, 0xCu);
      }
    }
    __int16 v60 = 0;
    goto LABEL_33;
  }
  id v66 = [v67 session];
  if (objc_opt_respondsToSelector())
  {
    __int16 v27 = [v67 idsAccount];
    __int16 v60 = [v66 _pushHandlerForIDSAccount:v27];

    if ((!v60 || (objc_opt_respondsToSelector() & 1) == 0) && IMOSLoggingEnabled())
    {
      uint64_t v28 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v84 = v60;
        _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Push handler either nil or session did not respond to incomingMessage: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v30 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v84 = v66;
        _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "Session either nil or did not respond to _pushHandlerForIDSAccount: %@", buf, 0xCu);
      }
    }
    __int16 v60 = 0;
  }
  if (!v66)
  {
LABEL_33:
    id v31 = +[IMDServiceController sharedController];
    id v32 = [v31 serviceWithName:*MEMORY[0x1E4F6E1B0]];

    id v66 = +[IMDServiceSession existingServiceSessionForService:v32];
    if (IMOSLoggingEnabled())
    {
      id v33 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        long long v84 = v66;
        _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Falling back to service session: %@", buf, 0xCu);
      }
    }
  }
  if (v65 && v62)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        uint64_t v35 = [(IMTextMessagePipelineParameter *)v65 GUID];
        *(_DWORD *)long long buf = 138412290;
        long long v84 = v35;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, "Going through new message processing path: %@, ", buf, 0xCu);
      }
    }
    id v36 = [IMFindAccountProcessingPipelineComponent alloc];
    id v37 = [v64 imdAccount];
    id v38 = [(IMFindAccountProcessingPipelineComponent *)v36 initWithReceivingAccount:v37];

    uint64_t v39 = [IMMessageFromStoragePipelineComponent alloc];
    id v40 = [v12 messageFromStorageController];
    uint64_t v41 = [v12 broadcaster];
    id v42 = [(IMMessageFromStoragePipelineComponent *)v39 initWithStorageProcessingType:0 storageController:v40 broadcaster:v41];

    id v43 = [IMFindChatProcessingPipelineComponent alloc];
    id v44 = [v12 chatRegistry];
    id v57 = [(IMFindChatProcessingPipelineComponent *)v43 initWithChatRegistry:v44];

    id v45 = [[IMConvergeGroupProcessingPipelineComponent alloc] initWithIDSTrustedData:v69];
    id v46 = [IMMessageLegacyProcessingPipelineComponent alloc];
    id v47 = [v12 idsService];
    id v48 = [(IMMessageLegacyProcessingPipelineComponent *)v46 initWithIDSTrustedData:v69 messageContext:v63 idsService:v47];

    id v49 = objc_alloc_init(IMResolveFallbackHashesProcessingPipelineComponent);
    v89[0] = v38;
    v89[1] = v42;
    v89[2] = v57;
    v89[3] = v45;
    v89[4] = v49;
    v89[5] = v62;
    v89[6] = v48;
    id v50 = [MEMORY[0x1E4F1C978] arrayWithObjects:v89 count:7];
    uint64_t v51 = [MEMORY[0x1E4F6BE90] pipelineFromComponents:v50];
    uint64_t v52 = [v12 handler];
    v70[0] = MEMORY[0x1E4F143A8];
    v70[1] = 3221225472;
    v70[2] = sub_1D97577D8;
    v70[3] = &unk_1E6B75C38;
    __int16 v71 = v65;
    id v72 = v12;
    id v73 = v63;
    id v75 = &v76;
    id v74 = v69;
    [v52 handleMessageWithPipeline:v51 input:v71 completionBlock:v70];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v53 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
      {
        uint64_t v54 = objc_opt_class();
        *(_DWORD *)long long buf = 138412802;
        long long v84 = v54;
        __int16 v85 = 2048;
        id v86 = v68;
        __int16 v87 = 2112;
        int v88 = v62;
        id v55 = v54;
        _os_log_impl(&dword_1D967A000, v53, OS_LOG_TYPE_INFO, "Failed getting blastdoor object from result: <%@ %p>, with messageCreationComponent: %@", buf, 0x20u);
      }
    }
    id v56 = [v12 idsService];
    [v56 sendAckForMessageWithContext:v63];

    id v38 = (IMFindAccountProcessingPipelineComponent *)v77[5];
    v77[5] = 0;
  }

  _Block_object_dispose(&v76, 8);
  os_activity_scope_leave(&state);
}

void sub_1D97577D8(uint64_t a1, char a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = [*(id *)(a1 + 32) GUID];
      *(_DWORD *)long long buf = 138412290;
      __int16 v16 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Ack'ing and cleaning up: %@, ", buf, 0xCu);
    }
  }
  id v8 = [*(id *)(a1 + 40) idsService];
  [v8 sendAckForMessageWithContext:*(void *)(a1 + 48)];

  uint64_t v9 = *(void *)(*(void *)(a1 + 64) + 8);
  uint64_t v10 = *(void **)(v9 + 40);
  *(void *)(v9 + 40) = 0;

  if ((a2 & 1) == 0)
  {
    char v11 = [*(id *)(a1 + 32) GUID];
    id v12 = [NSString stringWithFormat:@"%@", &unk_1F33C5A18];
    id v13 = [*(id *)(a1 + 56) fromIdentifier];
    int v14 = [*(id *)(a1 + 56) fromToken];
    +[IMBlastdoor sendBlastDoorError:v5 guid:v11 messageTypeString:v12 senderURI:v13 senderToken:v14 messageContext:*(void *)(a1 + 48) payloadAttachmentURL:0];
  }
}

id sub_1D9758B8C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  id v6 = [a2 objectForKey:v5];
  if (objc_opt_isKindOfClass())
  {
    id v7 = v6;
  }
  else
  {
    if (v6)
    {
      id v8 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_FAULT)) {
        sub_1D99019F8((uint64_t)v5, a1, v8);
      }
    }
    id v7 = 0;
  }

  return v7;
}

void sub_1D9758C48(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if ([*(id *)(a1 + 32) command] != a2 && IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(__CFString **)(a1 + 32);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v43 = a2;
      __int16 v44 = 2112;
      id v45 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "<Warning> Incoming command doesn't match BlastDoor command (%ld), trustedData: %@", buf, 0x16u);
    }
  }
  if (!v7)
  {
    if (IMOSLoggingEnabled())
    {
      id v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        __int16 v25 = @"NO";
        uint64_t v26 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 134218754;
        if (!v8) {
          __int16 v25 = @"YES";
        }
        uint64_t v43 = a2;
        __int16 v44 = 2112;
        id v45 = v25;
        __int16 v46 = 2112;
        id v47 = v8;
        __int16 v48 = 2112;
        uint64_t v49 = v26;
        _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "BlastDoor processing for command %ld was successful (%@) with error (%@) while processing GUID (%@)", buf, 0x2Au);
      }
    }
    __int16 v27 = [v8 userInfo];
    uint64_t v28 = [v27 objectForKeyedSubscript:@"explosionDomain"];
    if ([v28 isEqualToString:@"com.apple.BlastDoor.MessagesBlastDoorInterface"])
    {
      id v29 = [v8 userInfo];
      uint64_t v30 = [v29 objectForKeyedSubscript:@"explosionErrorType"];
      int v31 = [v30 isEqualToString:@"UnsupportedAirlockMessageType"];

      if (v31)
      {
        if (IMOSLoggingEnabled())
        {
          id v32 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            id v33 = *(__CFString **)(a1 + 48);
            *(_DWORD *)long long buf = 134218242;
            uint64_t v43 = a2;
            __int16 v44 = 2112;
            id v45 = v33;
            _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "BlastDoor (Airlock) processing for command %ld was skipped because it is unsupported while processing GUID (%@)", buf, 0x16u);
          }
        }
        goto LABEL_40;
      }
    }
    else
    {
    }
    if (([*(id *)(a1 + 56) runningInAutomation] & 1) == 0)
    {
      uint64_t v34 = [NSString stringWithFormat:@"%ld-%@.data", a2, *(void *)(a1 + 48)];
      uint64_t v35 = [MEMORY[0x1E4F6E7E0] writeMessagePayloadToTemporaryDirectory:*(void *)(a1 + 80) fileName:v34];
      uint64_t v36 = *(void *)(a1 + 48);
      id v37 = objc_msgSend(NSString, "stringWithFormat:", @"%ld", a2);
      id v38 = [*(id *)(a1 + 32) fromIdentifier];
      uint64_t v39 = [*(id *)(a1 + 32) fromToken];
      +[IMBlastdoor sendBlastDoorError:v8 guid:v36 messageTypeString:v37 senderURI:v38 senderToken:v39 messageContext:*(void *)(a1 + 72) payloadAttachmentURL:v35];
    }
    goto LABEL_40;
  }
  if (a2 == 100) {
    im_sendMessageCheckpointIfNecessary();
  }
  char v11 = +[IMDiMessageIDSDelegate commandHandlerRegistry];
  id v12 = [NSNumber numberWithInteger:a2];
  id v13 = [v11 objectForKey:v12];

  int v14 = IMOSLoggingEnabled();
  if (!v13)
  {
    if (v14)
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = *(__CFString **)(a1 + 48);
        *(_DWORD *)long long buf = 134218242;
        uint64_t v43 = a2;
        __int16 v44 = 2112;
        id v45 = v23;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "Failure to find BlastDoor handler block for command %ld while processing GUID (%@)", buf, 0x16u);
      }
    }
LABEL_40:
    [*(id *)(a1 + 40) sendAckForMessageWithContext:*(void *)(a1 + 72)];
    uint64_t v40 = *(void *)(*(void *)(a1 + 88) + 8);
    uint64_t v41 = *(void **)(v40 + 40);
    *(void *)(v40 + 40) = 0;

    id v13 = 0;
    goto LABEL_41;
  }
  if (v14)
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      __int16 v16 = *(__CFString **)(a1 + 48);
      *(_DWORD *)long long buf = 134218242;
      uint64_t v43 = a2;
      __int16 v44 = 2112;
      id v45 = v16;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "About to execute block for command %ld for GUID (%@)", buf, 0x16u);
    }
  }
  ((void (**)(void, void, id, void, void, void, void))v13)[2](v13, *(void *)(a1 + 56), v7, *(void *)(a1 + 32), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40));
  uint64_t v17 = *(void *)(*(void *)(a1 + 88) + 8);
  uint64_t v18 = *(void **)(v17 + 40);
  *(void *)(v17 + 40) = 0;

  if (IMOSLoggingEnabled())
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      id v20 = @"NO";
      id v21 = *(void **)(a1 + 48);
      *(_DWORD *)long long buf = 134218498;
      if (!v8) {
        id v20 = @"YES";
      }
      uint64_t v43 = a2;
      __int16 v44 = 2112;
      id v45 = v20;
      __int16 v46 = 2112;
      id v47 = v21;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "BlastDoor processing for command %ld was successful (%@) while processing GUID (%@)", buf, 0x20u);
    }
  }
LABEL_41:
  [*(id *)(a1 + 56) setRunningInAutomation:0];
}

uint64_t sub_1D9759558()
{
  qword_1EBE2B990 = objc_alloc_init(IMDNotificationResponseUtilities);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9759D70(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) notification];
    id v4 = [v3 request];
    id v5 = [v4 content];
    id v11 = [v5 userInfo];

    id v6 = [v11 objectForKeyedSubscript:@"CKBBContextKeyMessageGUID"];
    id v7 = [v11 objectForKeyedSubscript:@"CKBBContextKeyChatGUIDs"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = [v7 firstObject];
      uint64_t v9 = (void *)v8;
      if (v6 && v8) {
        [*(id *)(a1 + 40) _markMessageAsRead:v6 inChat:v8 withCompletionHandler:*(void *)(a1 + 48)];
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v10();
  }
}

void sub_1D9759EB0(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) notification];
    id v4 = [v3 request];
    id v5 = [v4 content];
    id v11 = [v5 userInfo];

    id v6 = [v11 objectForKeyedSubscript:@"CKBBContextKeyMessageGUID"];
    id v7 = [v11 objectForKeyedSubscript:@"CKBBContextKeyChatGUIDs"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = [v7 firstObject];
      uint64_t v9 = (void *)v8;
      if (v6 && v8) {
        [*(id *)(a1 + 40) _markMessageAsRead:v6 inChat:v8 withCompletionHandler:*(void *)(a1 + 48)];
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v10();
  }
}

void sub_1D9759FF0(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) notification];
    id v4 = [v3 request];
    id v5 = [v4 content];
    id v11 = [v5 userInfo];

    id v6 = [v11 objectForKeyedSubscript:@"CKBBContextKeyMessageGUID"];
    id v7 = [v11 objectForKeyedSubscript:@"CKBBContextKeyChatGUIDs"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = [v7 firstObject];
      uint64_t v9 = (void *)v8;
      if (v6 && v8) {
        [*(id *)(a1 + 40) _markMessageAsRead:v6 inChat:v8 withCompletionHandler:*(void *)(a1 + 48)];
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v10();
  }
}

void sub_1D975A130(uint64_t a1, int a2)
{
  if (a2)
  {
    id v3 = [*(id *)(a1 + 32) notification];
    id v4 = [v3 request];
    id v5 = [v4 content];
    id v11 = [v5 userInfo];

    id v6 = [v11 objectForKeyedSubscript:@"CKBBContextKeyMessageGUID"];
    id v7 = [v11 objectForKeyedSubscript:@"CKBBContextKeyChatGUIDs"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      uint64_t v8 = [v7 firstObject];
      uint64_t v9 = (void *)v8;
      if (v6 && v8) {
        [*(id *)(a1 + 40) _markMessageAsRead:v6 inChat:v8 withCompletionHandler:*(void *)(a1 + 48)];
      }
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v10 = *(void (**)(void))(*(void *)(a1 + 48) + 16);
    v10();
  }
}

uint64_t sub_1D975AD10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return objc_msgSend(MEMORY[0x1E4F28F60], "predicateWithFormat:", @"%K = %d", *MEMORY[0x1E4F6CD18], a3);
}

uint64_t sub_1D975ADB4()
{
  qword_1EBE2BC08 = objc_alloc_init(IMDServiceController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D975B3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D975B3D4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D975B3E4(uint64_t a1)
{
}

void sub_1D975B3EC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v7 = a3;
  if ([v7 replicationSourceID] == *(void *)(a1 + 40))
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a3);
    *a4 = 1;
  }
}

void *sub_1D975C7C8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
      v5[0] = 67109120;
      v5[1] = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Listener Client %d connection invalidated", (uint8_t *)v5, 8u);
    }
  }
  [*(id *)(a1 + 32) _clearConnection];
  uint64_t result = *(void **)(a1 + 40);
  if (result) {
    return (void *)[result connectionClosed:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  }
  return result;
}

void *sub_1D975C8B8(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      int v3 = *(_DWORD *)(*(void *)(a1 + 32) + 24);
      v5[0] = 67109120;
      v5[1] = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Listener Client %d connection interrupted", (uint8_t *)v5, 8u);
    }
  }
  uint64_t result = *(void **)(a1 + 40);
  if (result) {
    return (void *)[result connectionClosed:*(unsigned int *)(*(void *)(a1 + 32) + 24)];
  }
  return result;
}

void sub_1D975C9A0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  uint64_t v6 = *(void **)(a1 + 32);
  id v7 = v6[2];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1D975CA4C;
  v9[3] = &unk_1E6B73218;
  uint64_t v10 = v6;
  id v11 = v5;
  id v8 = v5;
  dispatch_async(v7, v9);
}

void sub_1D975CA4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v2 + 72))
  {
    *(unsigned char *)(v2 + 72) = 1;
    dispatch_group_leave(*(dispatch_group_t *)(*(void *)(a1 + 32) + 80));
  }
  int v3 = [*(id *)(a1 + 40) state];
  int v4 = [v3 taskState];

  id v5 = [*(id *)(a1 + 40) state];
  uint64_t v6 = [v5 endowmentNamespaces];
  char v7 = [v6 containsObject:@"com.apple.frontboard.visibility"];

  char v8 = v7 ^ 1;
  if (v4 != 4) {
    char v8 = 0;
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 88) = v8;
}

void sub_1D975CB00(void *a1, void *a2)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a1[4];
  int v3 = (void *)MEMORY[0x1E4F1C978];
  id v4 = a2;
  id v5 = [v3 arrayWithObjects:&v6 count:1];
  objc_msgSend(v4, "setPredicates:", v5, v6, v7);

  [v4 setStateDescriptor:a1[5]];
  [v4 setUpdateHandler:a1[6]];
}

void sub_1D975CE3C(uint64_t a1)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      uint64_t v2 = [*(id *)(a1 + 32) description];
      LODWORD(buf[0]) = 138412290;
      *(CFOptionFlags *)((char *)buf + 4) = (CFOptionFlags)v2;
      _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "requestBackgroundMessagingAuthorizationForRecipients:%@", (uint8_t *)buf, 0xCu);
    }
  }
  id v34 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v45 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
  if (v45)
  {
    uint64_t v44 = *(void *)v49;
    uint64_t v38 = *MEMORY[0x1E4F1ADF0];
    uint64_t v36 = *MEMORY[0x1E4F1AED8];
    uint64_t v37 = *MEMORY[0x1E4F1ADE0];
    uint64_t v43 = *MEMORY[0x1E4F1D990];
    uint64_t v41 = *MEMORY[0x1E4F1DA10];
    uint64_t v42 = *MEMORY[0x1E4F1D9A8];
    uint64_t v40 = *MEMORY[0x1E4F1D9E0];
    CFAllocatorRef allocator = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    do
    {
      for (uint64_t i = 0; i != v45; ++i)
      {
        if (*(void *)v49 != v44) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v48 + 1) + 8 * i);
        SInt32 error = 0;
        buf[0] = 0;
        id v5 = [MEMORY[0x1E4F1CA60] dictionary];
        uint64_t v6 = *(void **)(a1 + 40);
        uint64_t v7 = [v4 phoneNumber];
        char v8 = [v6 _formattedPhoneNumberForNumber:v7];

        uint64_t v9 = [v4 phoneNumber];
        uint64_t v10 = IMDCNFullNameAndOrganizationNameForHandleID();

        if (!v10) {
          goto LABEL_13;
        }
        id v11 = objc_alloc_init(MEMORY[0x1E4F1BA40]);
        id v12 = [v10 objectForKey:v38];
        [v11 setGivenName:v12];

        id v13 = [v10 objectForKey:v37];
        [v11 setFamilyName:v13];

        int v14 = [v10 objectForKey:v36];
        [v11 setOrganizationName:v14];

        id v15 = [MEMORY[0x1E4F6E6D8] displayNameWithCNNickNameOrFullNameOrCompanyNameOrAbbreviatedForContact:v11];

        if (v15)
        {
          [v4 setDisplayName:v15];
          __int16 v16 = [NSString stringWithFormat:@"%@ (%@)", v15, v8];
          uint64_t v17 = NSString;
          uint64_t v18 = IMSharedUtilitiesFrameworkBundle();
          uint64_t v19 = [v18 localizedStringForKey:@"CMAPI_AUTH_BODY" value:&stru_1F3398578 table:@"IMSharedUtilities"];
          id v20 = objc_msgSend(v17, "localizedStringWithFormat:", v19, *(void *)(*(void *)(a1 + 40) + 40), v16);
          [v5 setObject:v20 forKey:v43];
        }
        else
        {
LABEL_13:
          id v21 = NSString;
          id v15 = IMSharedUtilitiesFrameworkBundle();
          __int16 v16 = [v15 localizedStringForKey:@"CMAPI_AUTH_BODY" value:&stru_1F3398578 table:@"IMSharedUtilities"];
          uint64_t v18 = objc_msgSend(v21, "localizedStringWithFormat:", v16, *(void *)(*(void *)(a1 + 40) + 40), v8);
          [v5 setObject:v18 forKey:v43];
        }

        [v5 setObject:*(void *)(*(void *)(a1 + 40) + 48) forKey:v42];
        id v22 = NSString;
        uint64_t v23 = IMSharedUtilitiesFrameworkBundle();
        id v24 = [v23 localizedStringForKey:@"CMAPI_AUTH_CANCEL" value:&stru_1F3398578 table:@"IMSharedUtilities"];
        __int16 v25 = objc_msgSend(v22, "localizedStringWithFormat:", v24, 0);
        [v5 setObject:v25 forKey:v41];

        uint64_t v26 = NSString;
        __int16 v27 = IMSharedUtilitiesFrameworkBundle();
        uint64_t v28 = [v27 localizedStringForKey:@"CMAPI_AUTH_ALLOW" value:&stru_1F3398578 table:@"IMSharedUtilities"];
        id v29 = objc_msgSend(v26, "localizedStringWithFormat:", v28, 0);
        [v5 setObject:v29 forKey:v40];

        uint64_t v30 = CFUserNotificationCreate(allocator, 0.0, 0, &error, (CFDictionaryRef)v5);
        int v31 = v30;
        if (v30)
        {
          if (CFUserNotificationReceiveResponse(v30, 0.0, buf))
          {
            CFUserNotificationCancel(v31);
            CFRelease(v31);
            CFUserNotificationCancel(0);
            goto LABEL_23;
          }
          if (buf[0])
          {
            if (buf[0] == 2)
            {
              id v32 = &unk_1F33C5AD8;
              goto LABEL_21;
            }
          }
          else
          {
            id v32 = &unk_1F33C5AC0;
LABEL_21:
            [v34 setObject:v32 forKey:v4];
          }
          CFUserNotificationCancel(v31);
          CFRelease(v31);
        }
LABEL_23:
      }
      uint64_t v45 = [obj countByEnumeratingWithState:&v48 objects:v52 count:16];
    }
    while (v45);
  }

  [MEMORY[0x1E4F6E618] saveRecipients:v34 forBundleID:*(void *)(*(void *)(a1 + 40) + 32)];
  uint64_t v33 = *(void *)(a1 + 48);
  if (v33) {
    (*(void (**)(uint64_t, id, void))(v33 + 16))(v33, v34, 0);
  }
}

void sub_1D975D538(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      uint64_t v2 = [*(id *)(a1 + 32) description];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v23 = v2;
      _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "checkAuthorizationStatusForRecipients:%@", buf, 0xCu);
    }
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  id v4 = [MEMORY[0x1E4F6E618] recipientsForBundleID:*(void *)(*(void *)(a1 + 40) + 32)];
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = *(id *)(a1 + 32);
  uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        uint64_t v10 = [v4 objectForKey:v9];
        id v11 = (void *)v10;
        if (v10) {
          id v12 = (void *)v10;
        }
        else {
          id v12 = &unk_1F33C5AF0;
        }
        id v13 = v12;

        int v14 = (void *)[v9 copy];
        [v3 setObject:v13 forKey:v14];
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v6);
  }

  uint64_t v15 = *(void *)(a1 + 48);
  if (v15) {
    (*(void (**)(uint64_t, id, void))(v15 + 16))(v15, v3, 0);
  }
}

void sub_1D975D874(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      id v4 = [*(id *)(a1 + 40) description];
      int v22 = 138412546;
      uint64_t v23 = v3;
      __int16 v24 = 2112;
      __int16 v25 = v4;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "sendBackgroundMessage:%@ recipient:%@", (uint8_t *)&v22, 0x16u);
    }
  }
  uint64_t v5 = *(void *)(a1 + 48);
  if (*(unsigned char *)(v5 + 88))
  {
    uint64_t v6 = [MEMORY[0x1E4F6E618] recipientsForBundleID:*(void *)(v5 + 32)];
    uint64_t v7 = [v6 objectForKey:*(void *)(a1 + 40)];
    char v8 = v7;
    if (v7)
    {
      BOOL v9 = [v7 integerValue] == 2;
      int v10 = [*(id *)(a1 + 48) _shouldThrottleMessageToRecipient:*(void *)(a1 + 40)];
      if (v9)
      {
        if (v10)
        {
          id v11 = IMLogHandleForCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
            sub_1D9901B50();
          }

          if (!*(void *)(a1 + 56)) {
            goto LABEL_24;
          }
          id v12 = [MEMORY[0x1E4F28C58] errorWithDomain:@"MSCriticalMessagingErrorDomain" code:4 userInfo:0];
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        }
        else
        {
          uint64_t v16 = a1 + 48;
          uint64_t v15 = *(void **)(a1 + 48);
          long long v17 = [*(id *)(a1 + 32) messageText];
          long long v18 = (id *)(a1 + 40);
          long long v19 = [*(id *)(a1 + 40) phoneNumber];
          [v15 _sendMessageText:v17 toHandle:v19 onService:@"SMS" completion:*(void *)(a1 + 56)];

          long long v20 = *(void **)(*(void *)(a1 + 48) + 96);
          uint64_t v21 = *(void *)(*(void *)v16 + 32);
          id v12 = [*v18 phoneNumber];
          [v20 recordMessageSentFromAppWithBundleID:v21 toRecipientHandle:v12];
        }
LABEL_23:

LABEL_24:
        goto LABEL_25;
      }
    }
    else
    {
      [*(id *)(a1 + 48) _shouldThrottleMessageToRecipient:*(void *)(a1 + 40)];
    }
    int v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1D9901AE8();
    }

    if (!*(void *)(a1 + 56)) {
      goto LABEL_24;
    }
    id v12 = [MEMORY[0x1E4F28C58] errorWithDomain:@"MSCriticalMessagingErrorDomain" code:3 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
    goto LABEL_23;
  }
  id v13 = IMLogHandleForCategory();
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
    sub_1D9901A80();
  }

  if (*(void *)(a1 + 56))
  {
    uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"MSCriticalMessagingErrorDomain" code:2 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
LABEL_25:
  }
}

void sub_1D975E414(uint64_t a1, void *a2)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    id v4 = IMLogHandleForCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_1D9901C90(a1, (uint64_t)v3, v4);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = [*(id *)(a1 + 32) identifier];
      int v7 = 138412290;
      char v8 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Finished posting notification: %@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1D975E618(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1D975EA2C(uint64_t a1, uint64_t a2)
{
  id v4 = [MEMORY[0x1E4F6E6E8] sharedInstance];
  [v4 postCoreAutomationNotificationFinishedTapToDownload:*(void *)(a1 + 32) downloadedFromCloudKitSuccessfully:a2];
}

void sub_1D975EA8C(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  if ((a2 & 1) == 0) {
    [*(id *)(a1 + 32) fallbackToDownloadIfPossible:*(void *)(a1 + 40) transfer:*(void *)(a1 + 48)];
  }
  if (IMIsRunningInAutomation()) {
    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D975EE6C(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v4 = *(id *)(a1 + 32);
  uint64_t v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v13 != v7) {
          objc_enumerationMutation(v4);
        }
        uint64_t v9 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        if (objc_msgSend(v3, "containsObject:", v9, (void)v12))
        {
          int v10 = *(void **)(a1 + 40);
          id v11 = [v9 guid];
          [v10 fallbackToDownloadIfPossible:v11 transfer:v9];
        }
      }
      uint64_t v6 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v6);
  }
}

uint64_t sub_1D975F234()
{
  qword_1EBE2B998 = objc_alloc_init(IMDNicknameController);

  return MEMORY[0x1F41817F8]();
}

BOOL sub_1D975FA00(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKey:@"date"];
  uint64_t v5 = self;
  char isKindOfClass = objc_opt_isKindOfClass();

  if (isKindOfClass)
  {
    uint64_t v7 = [v3 objectForKey:@"date"];
    [v7 timeIntervalSinceNow];
    BOOL v9 = v8 > -1209600.0 && *(unsigned char *)(a1 + 32) == 0;
  }
  else
  {
    BOOL v9 = 0;
  }

  return v9;
}

void sub_1D9760410(uint64_t a1, int a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = @"NO";
      if (a2) {
        uint64_t v7 = @"YES";
      }
      int v12 = 138412546;
      long long v13 = v7;
      __int16 v14 = 2112;
      id v15 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "We successfully reuploaded our local nickname %@ %@", (uint8_t *)&v12, 0x16u);
    }
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  BOOL v9 = WeakRetained;
  if (a2)
  {
    int v10 = [WeakRetained defaults];
    id v11 = [NSNumber numberWithUnsignedInteger:*(void *)(a1 + 40)];
    [v10 setValue:v11 forDomain:*MEMORY[0x1E4F6DE00] forKey:*MEMORY[0x1E4F6DE58]];
  }
  else
  {
    [WeakRetained _tryToReuploadPersonalNicknameWithRetryCount:*(void *)(a1 + 48) + 1 reuploadVersion:*(void *)(a1 + 40)];
  }
}

uint64_t sub_1D97606CC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__newDeviceDidSignIntoiMessageWithRetryCount_);
}

void sub_1D9760898(uint64_t a1)
{
  v12[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = MessageDictionaryNicknameRequestPersonalNicknameInfoKey;
  v12[0] = MEMORY[0x1E4F1CC38];
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v12 forKeys:&v11 count:1];
  if ([*(id *)(a1 + 32) _sendMessageDictionary:v2 toDevice:0])
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Successfully sent request to peers for nickname info", (uint8_t *)&v9, 2u);
      }
    }
    id v4 = [*(id *)(a1 + 32) defaults];
    [v4 setValue:MEMORY[0x1E4F1CC38] forDomain:*MEMORY[0x1E4F6DE00] forKey:*MEMORY[0x1E4F6DE50]];
  }
  else
  {
    BOOL v5 = *(void *)(a1 + 40) < 5uLL;
    int v6 = IMOSLoggingEnabled();
    if (v5)
    {
      if (v6)
      {
        uint64_t v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          int v9 = 138412290;
          int v10 = &unk_1F33C6060;
          _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "We did not have the IDSDevices to send the request to, going to try again in %@", (uint8_t *)&v9, 0xCu);
        }
      }
      [*(id *)(a1 + 32) _retryPeerRequestWithRetry:*(void *)(a1 + 40) + 1];
    }
    else if (v6)
    {
      double v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "We do not have enough retries to get nickname info, not trying again", (uint8_t *)&v9, 2u);
      }
    }
  }
}

void sub_1D9760FD4(uint64_t a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*(unsigned char *)(*(void *)(a1 + 32) + 9))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        int v3 = 138412290;
        id v4 = &unk_1F33C6060;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Nickname is still uploading after time out %@ setting upload to done", (uint8_t *)&v3, 0xCu);
      }
    }
    *(unsigned char *)(*(void *)(a1 + 32) + 9) = 0;
  }
}

void sub_1D9761700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1D976176C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1D9761784(uint64_t a1, int a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  if (a2)
  {
    uint64_t v23 = (id *)(a1 + 40);
    uint64_t v47 = a1;
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    __int16 v25 = [v16 description];
    [WeakRetained _showDebugAlertWithHeader:@"Successfully Uploaded Personal Nickname" message:v25];

    id v26 = objc_loadWeakRetained(v23);
    [v26 setPersonalNickname:v16];

    id v27 = objc_loadWeakRetained(v23);
    [v27 _resetHandleSharingList];

    id v28 = objc_loadWeakRetained(v23);
    id v29 = [v28 personalNickname];
    [v28 _storePublicNickname:v29 nicknameLocation:v17 encryptionKey:v18 wallpaperDataTag:v19 wallpaperLowResDataTag:v20 wallpaperMetadataTag:v21];

    id v30 = objc_loadWeakRetained(v23);
    [v30 _endNicknameUpload];

    int v31 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v31 postNotificationName:IMDMeCardUpdatedNotification object:0 userInfo:0];

    id v32 = objc_loadWeakRetained(v23);
    [v32 sendPersonalNicknameRecordIDAndVersionToAllPeers];

    uint64_t v33 = *(void *)(v47 + 32);
    if (v33)
    {
      id v34 = *(void (**)(void))(v33 + 16);
LABEL_10:
      v34();
    }
  }
  else
  {
    id v46 = v19;
    id v48 = v18;
    if (IMOSLoggingEnabled())
    {
      uint64_t v35 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Unable to store in Public Database, aborting fanout to other devices", buf, 2u);
      }
    }
    uint64_t v36 = (id *)(a1 + 40);
    id v37 = objc_loadWeakRetained((id *)(a1 + 40));
    uint64_t v38 = NSString;
    uint64_t v39 = a1;
    id v40 = v37;
    uint64_t v41 = [v40 personalNickname];
    uint64_t v42 = [v38 stringWithFormat:@"Error: %@\n Fallback nickname: %@", v22, v41];
    [v40 _showDebugAlertWithHeader:@"Failed Uploading Personal Nickname" message:v42];

    id v43 = objc_loadWeakRetained(v36);
    uint64_t v44 = [v43 personalNickname];
    [v43 setPersonalNickname:v44];

    uint64_t v45 = *(void *)(v39 + 32);
    id v19 = v46;
    id v18 = v48;
    if (v45)
    {
      id v34 = *(void (**)(void))(v45 + 16);
      goto LABEL_10;
    }
  }
}

void sub_1D97624D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1D9762528(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void sub_1D9762540(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  int v16 = IMOSLoggingEnabled();
  if (v11)
  {
    if (v16)
    {
      id v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v25 = v11;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Got personal nickname from IMTransferAgent: %@", buf, 0xCu);
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
    id v19 = [v11 description];
    [WeakRetained _showDebugAlertWithHeader:@"Fetched Personal Nickname" message:v19];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (v16)
    {
      id v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        uint64_t v21 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412546;
        id v25 = v15;
        __int16 v26 = 2112;
        uint64_t v27 = v21;
        _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Failed to fetch public nickname {error: %@, recordName: %@}", buf, 0x16u);
      }
    }
    id v22 = objc_loadWeakRetained((id *)(a1 + 56));
    uint64_t v23 = [NSString stringWithFormat:@"recordID: %@\ndecryptionKey: %@\nerror: %@", *(void *)(a1 + 32), *(void *)(a1 + 40), v15];
    [v22 _showDebugAlertWithHeader:@"Failed Personal Nickname Fetch" message:v23];

    (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

void sub_1D9762A84(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) stopTimingForKey:@"Nickname Download"];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 32) totalTimeForKey:@"Nickname Download"];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Public Nickname fetched or failed in time: %f", buf, 0xCu);
    }
  }
  if (!v5)
  {
    if (v6)
    {
      int v9 = [v6 domain];
      int v10 = [v9 lowercaseString];
      int v11 = [v10 containsString:@"blastdoor"];

      if (v11)
      {
        id v12 = [NSString stringGUID];
        id v13 = [NSString stringWithFormat:@"%@", &unk_1F33C5B38];
        +[IMBlastdoor sendBlastDoorError:v6 guid:v12 messageTypeString:v13 senderURI:0 senderToken:0 messageContext:0 payloadAttachmentURL:0];
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14) {
    (*(void (**)(uint64_t, id, void, void, void, id))(v14 + 16))(v14, v5, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v6);
  }
}

void sub_1D9762C74(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) stopTimingForKey:@"Nickname Download"];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      [*(id *)(a1 + 32) totalTimeForKey:@"Nickname Download"];
      *(_DWORD *)long long buf = 134217984;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Public Nickname fetched or failed in time: %f", buf, 0xCu);
    }
  }
  if (!v5)
  {
    if (v6)
    {
      int v9 = [v6 domain];
      int v10 = [v9 lowercaseString];
      int v11 = [v10 containsString:@"blastdoor"];

      if (v11)
      {
        id v12 = [NSString stringGUID];
        id v13 = [NSString stringWithFormat:@"%@", &unk_1F33C5B38];
        +[IMBlastdoor sendBlastDoorError:v6 guid:v12 messageTypeString:v13 senderURI:0 senderToken:0 messageContext:0 payloadAttachmentURL:0];
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 64);
  if (v14) {
    (*(void (**)(uint64_t, id, void, void, void, id))(v14 + 16))(v14, v5, *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), v6);
  }
}

BOOL sub_1D9763AA8(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDChatRegistry sharedInstance];
  int v3 = [v2 allExistingChatsWithIdentifier:*(void *)(a1 + 32)];

  uint64_t v4 = [v3 count];
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = @"NO";
      if (v4) {
        id v6 = @"YES";
      }
      int v8 = 138412290;
      int v9 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Has messages history with sender:%@", (uint8_t *)&v8, 0xCu);
    }
  }
  return v4 != 0;
}

BOOL sub_1D9763BD8(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v2 = [*(id *)(a1 + 32) _appearsToBePhoneNumber];
  id v3 = objc_alloc(MEMORY[0x1E4F57C78]);
  if (v2) {
    uint64_t v4 = 2;
  }
  else {
    uint64_t v4 = 3;
  }
  id v5 = (void *)[v3 initWithType:v4 value:*(void *)(a1 + 32)];
  id v6 = [MEMORY[0x1E4F57C88] predicateForCallsWithRemoteParticipantHandle:v5];
  uint64_t v7 = [*(id *)(a1 + 40) callHistoryManager];
  uint64_t v8 = [v7 countCallsWithPredicate:v6];

  if (IMOSLoggingEnabled())
  {
    int v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = @"NO";
      if (v8) {
        uint64_t v10 = @"YES";
      }
      int v12 = 138412290;
      id v13 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Has call history with sender:%@", (uint8_t *)&v12, 0xCu);
    }
  }
  return v8 != 0;
}

void sub_1D9763D40(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a5;
  id v15 = a6;
  if (v11)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 64));
    uint64_t v17 = [NSString stringWithFormat:@"Fetched Nickname for %@", *(void *)(a1 + 32)];
    id v18 = [v11 description];
    [WeakRetained _showDebugAlertWithHeader:v17 message:v18];

    id v19 = [*(id *)(a1 + 40) _stripFZIDPrefix];
    id v20 = objc_loadWeakRetained((id *)(a1 + 64));
    [v20 saveNicknameForRecordID:*(void *)(a1 + 48) handleID:v19 userNickname:v11];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = *(void *)(a1 + 48);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v27 = v22;
        __int16 v28 = 2112;
        id v29 = v15;
        _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Nicknames - Failed getting nickname for record ID %@ from transfer agent with error %@", buf, 0x16u);
      }
    }
    id v23 = objc_loadWeakRetained((id *)(a1 + 64));
    __int16 v24 = [NSString stringWithFormat:@"Failed Nickname Fetch for %@", *(void *)(a1 + 32)];
    id v25 = [NSString stringWithFormat:@"recordID: %@\nerror:%@", *(void *)(a1 + 48), v15];
    [v23 _showDebugAlertWithHeader:v24 message:v25];

    (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
  }
}

void sub_1D9764200(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Transfer agent succeeded in deleting public nickname from CloudKit", buf, 2u);
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    [WeakRetained _deletePublicNicknameLocationAndKey];

    id v9 = objc_loadWeakRetained((id *)(a1 + 40));
    [v9 setPersonalNickname:0];

    id v10 = objc_loadWeakRetained((id *)(a1 + 40));
    [v10 _resetHandleSharingList];

    if (*(unsigned char *)(a1 + 48))
    {
      id v11 = objc_loadWeakRetained((id *)(a1 + 40));
      [v11 sendPersonalNicknameRecordIDAndVersionToAllPeers];
    }
    uint64_t v12 = *(void *)(a1 + 32);
    if (v12)
    {
      id v13 = *(void (**)(void))(v12 + 16);
LABEL_16:
      v13();
    }
  }
  else
  {
    if (v6)
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Did not succeed in deleting public nickname from CloudKit!", v16, 2u);
      }
    }
    uint64_t v15 = *(void *)(a1 + 32);
    if (v15)
    {
      id v13 = *(void (**)(void))(v15 + 16);
      goto LABEL_16;
    }
  }
}

void sub_1D97664B4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 88));
  _Unwind_Resume(a1);
}

void sub_1D97664D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    uint64_t v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D9901D48();
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v5;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Finished personal nickname fetch with nickname: %@, updating key store", (uint8_t *)&v11, 0xCu);
      }
    }
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 72));
    [WeakRetained _deletePendingNicknameForUpload];

    id v10 = objc_loadWeakRetained((id *)(a1 + 72));
    [v10 setPersonalNickname:v5];

    uint64_t v7 = objc_loadWeakRetained((id *)(a1 + 72));
    [v7 _storePublicNickname:v5 nicknameLocation:*(void *)(a1 + 32) encryptionKey:*(void *)(a1 + 40) wallpaperDataTag:*(void *)(a1 + 48) wallpaperLowResDataTag:*(void *)(a1 + 56) wallpaperMetadataTag:*(void *)(a1 + 64)];
  }
}

void sub_1D9769E3C(uint64_t a1, void *a2)
{
  v38[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 count])
  {
    uint64_t v4 = [v3 objectForKey:@"NicknameServiceDevices"];
    if ([*(id *)(a1 + 32) _appearsToBePhoneNumber])
    {
      uint64_t v5 = IDSCopyIDForPhoneNumber();
    }
    else
    {
      if (![*(id *)(a1 + 32) _appearsToBeEmail])
      {
        uint64_t v8 = IMLogHandleForCategory();
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
          sub_1D9901EC4(a1 + 32, v8, v9, v10, v11, v12, v13, v14);
        }

        uint64_t v7 = 0;
        goto LABEL_14;
      }
      uint64_t v5 = MEMORY[0x1E01687E0](*(void *)(a1 + 32));
    }
    uint64_t v7 = (void *)v5;
LABEL_14:
    uint64_t v15 = (__CFDictionary *)objc_alloc_init(MEMORY[0x1E4F1CA60]);
    uint64_t v16 = [*(id *)(*(void *)(a1 + 40) + 16) firstName];
    if (v16) {
      CFDictionarySetValue(v15, @"FirstName", v16);
    }

    uint64_t v17 = [*(id *)(*(void *)(a1 + 40) + 16) lastName];
    if (v17) {
      CFDictionarySetValue(v15, @"LastName", v17);
    }

    CFDictionarySetValue(v15, @"MessageType", @"NameOnlyUpdate");
    id v18 = (void *)[objc_alloc(NSNumber) initWithUnsignedLong:1];
    if (v18) {
      CFDictionarySetValue(v15, @"UpdateInfoIncluded", v18);
    }

    v37[0] = *MEMORY[0x1E4F6AA10];
    id v19 = [NSNumber numberWithDouble:*MEMORY[0x1E4F6B050]];
    v37[1] = *MEMORY[0x1E4F6A960];
    v38[0] = v19;
    v38[1] = MEMORY[0x1E4F1CC38];
    id v20 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v38 forKeys:v37 count:2];
    uint64_t v21 = (void *)[v20 mutableCopy];

    if (v7) {
      [v21 setObject:v7 forKeyedSubscript:*MEMORY[0x1E4F6A9B8]];
    }
    if (v15 && [v4 count])
    {
      uint64_t v22 = (void *)MEMORY[0x1E4F6E7C0];
      uint64_t v23 = *(void *)(*(void *)(a1 + 40) + 168);
      __int16 v24 = (void *)[v21 copy];
      id v31 = 0;
      id v32 = 0;
      int v25 = [v22 service:v23 sendMessage:v15 toDestinations:v4 priority:300 options:v24 identifier:&v32 error:&v31];
      id v26 = v32;
      id v27 = v31;

      if (v27) {
        int v28 = 0;
      }
      else {
        int v28 = v25;
      }
      if (v28 == 1)
      {
        if (IMOSLoggingEnabled())
        {
          id v29 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            id v34 = v26;
            __int16 v35 = 2112;
            uint64_t v36 = v4;
            _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Successfully sent name only to message (%@) to destinations %@", buf, 0x16u);
          }
        }
      }
      else
      {
        uint64_t v30 = IMLogHandleForCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
          sub_1D9901DE4();
        }
      }
    }
    else
    {
      id v26 = 0;
    }

    goto LABEL_37;
  }
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "devices are nil or empty from IDS so just returning", buf, 2u);
    }
  }
LABEL_37:
}

void sub_1D976A574(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v2 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  id v3 = objc_alloc_init(MEMORY[0x1E4F1CA80]);
  uint64_t v4 = dispatch_group_create();
  uint64_t v5 = dispatch_get_global_queue(25, 0);
  dispatch_group_enter(v4);
  id v6 = (void *)MEMORY[0x1E4F6E7B8];
  uint64_t v7 = *(void *)(a1 + 32);
  v29[0] = MEMORY[0x1E4F143A8];
  v29[1] = 3221225472;
  v29[2] = sub_1D976A950;
  v29[3] = &unk_1E6B75F28;
  id v8 = v2;
  id v30 = v8;
  uint64_t v9 = v4;
  id v31 = v9;
  [v6 currentRemoteDevicesForDestinations:v7 service:@"com.apple.private.alloy.nameandphoto" listenerID:@"IMDNicknameController" queue:v5 completionBlock:v29];
  dispatch_group_enter(v9);
  uint64_t v10 = (void *)MEMORY[0x1E4F6E7B8];
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = *MEMORY[0x1E4F6AA78];
  uint64_t v23 = MEMORY[0x1E4F143A8];
  uint64_t v24 = 3221225472;
  int v25 = sub_1D976AB18;
  id v26 = &unk_1E6B75F28;
  id v13 = v3;
  id v27 = v13;
  uint64_t v14 = v9;
  int v28 = v14;
  [v10 currentRemoteDevicesForDestinations:v11 service:v12 listenerID:@"MessageServiceSession" queue:v5 completionBlock:&v23];
  dispatch_time_t v15 = dispatch_time(0, 60000000000);
  if (dispatch_group_wait(v14, v15))
  {
    uint64_t v16 = IMLogHandleForCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
      sub_1D9901F34();
    }
  }
  if (*(unsigned char *)(a1 + 48)) {
    objc_msgSend(v13, "minusSet:", v8, v23, v24, v25, v26, v27);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      uint64_t v18 = [v8 count];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v35 = v18;
      __int16 v36 = 2112;
      id v37 = v8;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Found %lu newServiceURIs: %@", buf, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      uint64_t v20 = [v13 count];
      *(_DWORD *)long long buf = 134218242;
      uint64_t v35 = v20;
      __int16 v36 = 2112;
      id v37 = v13;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Found %lu iMessageServiceURIs: %@", buf, 0x16u);
    }
  }
  uint64_t v21 = *(void *)(a1 + 40);
  v32[0] = @"NicknameServiceDevices";
  v32[1] = @"iMessageServiceDevices";
  v33[0] = v8;
  v33[1] = v13;
  uint64_t v22 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjects:forKeys:count:", v33, v32, 2, v23, v24, v25, v26);
  (*(void (**)(uint64_t, void *))(v21 + 16))(v21, v22);
}

void sub_1D976A91C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D976A858);
  }
  _Unwind_Resume(a1);
}

void sub_1D976A950(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = [a2 allValues];
  uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v16 = *(void *)v22;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v21 + 1) + 8 * v5);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v7 = v6;
        uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v18;
          do
          {
            uint64_t v11 = 0;
            do
            {
              if (*(void *)v18 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void **)(a1 + 32);
              id v13 = [*(id *)(*((void *)&v17 + 1) + 8 * v11) destinationURIs];
              uint64_t v14 = [v13 allObjects];
              [v12 addObjectsFromArray:v14];

              ++v11;
            }
            while (v9 != v11);
            uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
          }
          while (v9);
        }

        ++v5;
      }
      while (v5 != v4);
      uint64_t v4 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D976AB18(uint64_t a1, void *a2)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id obj = [a2 allValues];
  uint64_t v3 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v16 = *(void *)v22;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(obj);
        }
        id v6 = *(void **)(*((void *)&v21 + 1) + 8 * v5);
        long long v17 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        long long v20 = 0u;
        id v7 = v6;
        uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
        if (v8)
        {
          uint64_t v9 = v8;
          uint64_t v10 = *(void *)v18;
          do
          {
            uint64_t v11 = 0;
            do
            {
              if (*(void *)v18 != v10) {
                objc_enumerationMutation(v7);
              }
              uint64_t v12 = *(void **)(a1 + 32);
              id v13 = [*(id *)(*((void *)&v17 + 1) + 8 * v11) destinationURIs];
              uint64_t v14 = [v13 allObjects];
              [v12 addObjectsFromArray:v14];

              ++v11;
            }
            while (v9 != v11);
            uint64_t v9 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
          }
          while (v9);
        }

        ++v5;
      }
      while (v5 != v4);
      uint64_t v4 = [obj countByEnumeratingWithState:&v21 objects:v26 count:16];
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D976B0F0(uint64_t a1, void *a2)
{
  v51[2] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 count])
  {
    uint64_t v4 = (void *)[*(id *)(a1 + 32) copy];
    BOOL v5 = *(unsigned char *)(a1 + 64) == 0;
    id v6 = [v3 objectForKey:@"NicknameServiceDevices"];
    id v7 = v6;
    if (!v5)
    {
      uint64_t v8 = (void *)[v6 mutableCopy];

      uint64_t v9 = [v3 objectForKey:@"iMessageServiceDevices"];
      [v8 minusSet:v9];

      id v7 = v8;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)long long v49 = v7;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Will attempt to send to newServiceURIs: %@", buf, 0xCu);
      }
    }
    uint64_t v11 = +[IMDChatRegistry sharedInstance];
    uint64_t v45 = [v11 existingChatWithGUID:*(void *)(a1 + 40)];

    if (*(void *)(a1 + 32) || !v45)
    {
      uint64_t v12 = v4;
    }
    else
    {
      uint64_t v12 = [v45 lastAddressedLocalHandle];

      if (IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          *(void *)long long v49 = v12;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Replaced from handle with: %@", buf, 0xCu);
        }
      }
    }
    if ([v12 _appearsToBeEmail]) {
      uint64_t v15 = MEMORY[0x1E01687E0](v12);
    }
    else {
      uint64_t v15 = IDSCopyIDForPhoneNumber();
    }
    uint64_t v16 = (void *)v15;
    if (IMOSLoggingEnabled())
    {
      long long v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)long long v49 = v16;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "From IDS handle: %@", buf, 0xCu);
      }
    }
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 48), @"MessageType", @"NicknameTransfer");
    v50[0] = *MEMORY[0x1E4F6AA10];
    long long v18 = [NSNumber numberWithDouble:*MEMORY[0x1E4F6B050]];
    v50[1] = *MEMORY[0x1E4F6A960];
    v51[0] = v18;
    v51[1] = MEMORY[0x1E4F1CC38];
    long long v19 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v51 forKeys:v50 count:2];
    long long v20 = (void *)[v19 mutableCopy];

    if (v16) {
      [v20 setObject:v16 forKeyedSubscript:*MEMORY[0x1E4F6A9B8]];
    }
    if (*(void *)(a1 + 48) && [v7 count])
    {
      long long v21 = (void *)MEMORY[0x1E4F6E7C0];
      uint64_t v22 = *(void *)(a1 + 48);
      uint64_t v23 = *(void *)(*(void *)(a1 + 56) + 168);
      long long v24 = (void *)[v20 copy];
      id v46 = 0;
      id v47 = 0;
      int v25 = [v21 service:v23 sendMessage:v22 toDestinations:v7 priority:300 options:v24 identifier:&v47 error:&v46];
      id v44 = v47;
      id v26 = v46;

      if (v26) {
        int v27 = 0;
      }
      else {
        int v27 = v25;
      }
      if (v27 != 1)
      {
        __int16 v36 = IMLogHandleForCategory();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
          sub_1D9901DE4();
        }

        goto LABEL_44;
      }
      if (IMOSLoggingEnabled())
      {
        int v28 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          *(void *)long long v49 = v44;
          *(_WORD *)&v49[8] = 2112;
          *(void *)&v49[10] = v7;
          _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Successfully sent personal nickname to message (%@) to destinations %@", buf, 0x16u);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        id v29 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          BOOL v30 = *(void *)(a1 + 48) != 0;
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)long long v49 = v30;
          *(_WORD *)&void v49[4] = 2112;
          *(void *)&v49[6] = v7;
          _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Skipping new service nickname send. Have info to send: %i, NewServiceURIs: %@", buf, 0x12u);
        }
      }
      id v44 = 0;
    }
    id v26 = 0;
LABEL_44:
    id v31 = [MEMORY[0x1E4F6B598] sharedInstanceForBagType:0];
    id v32 = [v31 objectForKey:@"enable-snap-v2-back-compat"];
    int v33 = [v32 BOOLValue];

    if (v33 && !*(unsigned char *)(a1 + 65))
    {
      id v37 = [v3 objectForKey:@"iMessageServiceDevices"];
      uint64_t v38 = +[IMDAccountController sharedAccountController];
      id v43 = [v38 anySessionForServiceName:*MEMORY[0x1E4F6E1B0]];

      int v39 = IMOSLoggingEnabled();
      if (v43)
      {
        if (v39)
        {
          id v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            *(void *)long long v49 = v37;
            _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Sending nickname info to destinations %@", buf, 0xCu);
          }
        }
        if ([v37 count])
        {
          uint64_t v41 = [v37 allObjects];
          [v43 sendNicknameInfoToURIs:v41 chatGUID:*(void *)(a1 + 40)];
        }
      }
      else if (v39)
      {
        uint64_t v42 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v42, OS_LOG_TYPE_INFO, "We didn't have a session to send the nickname info over", buf, 2u);
        }
      }
    }
    else if (IMOSLoggingEnabled())
    {
      id v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        int v35 = *(unsigned __int8 *)(a1 + 65);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)long long v49 = v33;
        *(_WORD *)&void v49[4] = 1024;
        *(_DWORD *)&v49[6] = v35;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, "Skipping iMessage nickname send. isEnabled: %i, onlyUseNicknameSendingService: %i", buf, 0xEu);
      }
    }
    goto LABEL_66;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "devices are nil or empty from IDS so just returning", buf, 2u);
    }
  }
LABEL_66:
}

void sub_1D976C3A0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a4;
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Failed to download nickname with error: %@", (uint8_t *)&v11, 0xCu);
      }
LABEL_9:
    }
  }
  else if (v7)
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = [v5 firstName];
      uint64_t v10 = [v5 lastName];
      int v11 = 138412546;
      id v12 = v9;
      __int16 v13 = 2112;
      uint64_t v14 = v10;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Successfully downloaded and saved nickname for %@ %@.", (uint8_t *)&v11, 0x16u);
    }
    goto LABEL_9;
  }
}

void sub_1D976C514(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D976C4D8);
  }
  _Unwind_Resume(a1);
}

void sub_1D976D8E4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D976D7ECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D9771140(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9771080);
  }
  _Unwind_Resume(a1);
}

void sub_1D9771884(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D977179CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97733B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id location)
{
  objc_destroyWeak(v15);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D9773404(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    int v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      sub_1D99023F8();
    }
  }
  if (v5)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained setPersonalNickname:v5];
  }
}

void sub_1D9778174(uint64_t a1, int a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = @"NO";
      uint64_t v6 = *(void *)(a1 + 32);
      if (a2) {
        id v5 = @"YES";
      }
      int v10 = 138412546;
      uint64_t v11 = v6;
      __int16 v12 = 2112;
      __int16 v13 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Resolved inconsistent GUID to %@ with success: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  if (a2)
  {
    uint64_t v8 = *(void **)(a1 + 40);
    int v7 = (void *)(a1 + 40);
    [v8 setGuid:*(v7 - 1)];
    uint64_t v9 = +[IMDChatStore sharedInstance];
    [v9 storeChat:*v7];
  }
}

uint64_t sub_1D9778C10()
{
  qword_1EBE2B9A0 = objc_alloc_init(IMDMessageStore);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9778FB4()
{
  if (IMOSLoggingEnabled())
  {
    id v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v2 = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Registering for the DB reconnect notification.", v2, 2u);
    }
  }
  return IMDRegisterReconnectBlockWithIdentifier();
}

void sub_1D9779058()
{
  id v0 = [MEMORY[0x1E4F6C360] sharedInstance];
  int v1 = [v0 isInternalInstall];

  if (v1)
  {
    id v2 = [MEMORY[0x1E4F6C410] userNotificationWithIdentifier:@"com.apple.csdbpersistence-mandatory-db-reconnect", @"Messages DB Error", @"INTERNAL: A serious issue has been encountered while migrating your Messages database.  Logs files have been written detailing the problem, please sync them off of your device as soon as possible and file a radar.", @"OK", 0, 0 title message defaultButton alternateButton otherButton];
    id v3 = [MEMORY[0x1E4F6C418] sharedInstance];
    [v3 addUserNotification:v2 listener:0];

    if (qword_1EA8CA530 != -1) {
      dispatch_once(&qword_1EA8CA530, &unk_1F33913C0);
    }
    off_1EA8CA528(0, @"imd-reconnection-log-dump", 12);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Got a mandatory DB reconnect notification, I will now exit.", v6, 2u);
    }
  }
  dispatch_time_t v5 = dispatch_time(0, 2000000000);
  dispatch_after(v5, MEMORY[0x1E4F14428], &unk_1F33913E0);
}

void *sub_1D97791D8()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("MarcoAction", @"Marco");
  off_1EA8CA528 = result;
  return result;
}

void sub_1D9779208()
{
}

uint64_t sub_1D977921C()
{
  if (IMOSLoggingEnabled())
  {
    id v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v2 = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "  => Posting database full", v2, 2u);
    }
  }
  return +[IMDMessageStore databaseFull];
}

uint64_t sub_1D9779414(uint64_t a1)
{
  return [*(id *)(a1 + 32) rebuildUnreadMessageCount];
}

uint64_t IMDCreateIMMessageItemFromIMDMessageRecordRef(uint64_t a1, void *a2)
{
  return IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(a1, a2);
}

void sub_1D977A0E0(int a1, int a2)
{
  uint64_t v13 = 0;
  uint64_t v14 = &v13;
  uint64_t v15 = 0x2020000000;
  char v16 = 0;
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1D978A044;
  int v10 = &unk_1E6B761D0;
  uint64_t v11 = &v13;
  LOBYTE(v12) = a2;
  if (qword_1EBE2BBB8 != -1) {
    dispatch_once(&qword_1EBE2BBB8, &v7);
  }
  if (a1 != a2 || *((unsigned char *)v14 + 24))
  {
    if (qword_1EBE2BBB0)
    {
      uint64_t v4 = (CFPropertyListRef *)MEMORY[0x1E4F1CFD0];
      if (!a2) {
        uint64_t v4 = (CFPropertyListRef *)MEMORY[0x1E4F1CFC8];
      }
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3C8];
      CFPreferencesSetValue((CFStringRef)qword_1EBE2BBB0, *v4, @"com.apple.MobileSMS", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
      CFPreferencesSynchronize(@"com.apple.MobileSMS", @"mobile", v5);
    }
    if (qword_1EBE2BBA8)
    {
      DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
      CFNotificationCenterPostNotificationWithOptions(DarwinNotifyCenter, (CFNotificationName)qword_1EBE2BBA8, 0, 0, 0);
    }
    if (a2) {
      +[IMDMessageStore databaseFull];
    }
    else {
      +[IMDMessageStore databaseNoLongerFull];
    }
  }
  _Block_object_dispose(&v13, 8);
}

void sub_1D977A254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D977A6D4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D977A67CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = IMDCreateIMItemFromIMDMessageRecordRefCopyAttachmentsIfNeededWithAccountLookup();
  CFStringRef v5 = (void *)MEMORY[0x1E016A370]();
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412546;
      uint64_t v9 = v4;
      __int16 v10 = 2112;
      uint64_t v11 = a1;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Built IMItem: %@    from IMDMessageRecordRef: %@", (uint8_t *)&v8, 0x16u);
    }
  }

  return v4;
}

void sub_1D977D87C(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v10;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v3);
        }
        AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(*(void *)(*((void *)&v9 + 1) + 8 * v7), 0);
        if (AttachmentIfNeededRef)
        {
          objc_opt_class();
          if (objc_opt_isKindOfClass()) {
            [*(id *)(a1 + 32) addObject:AttachmentIfNeededRef];
          }
        }

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

uint64_t sub_1D977E758(uint64_t a1, void *a2)
{
  return [a2 internalName];
}

void sub_1D977FFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D977FFCC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D977FFDC(uint64_t a1)
{
}

void sub_1D977FFE4(uint64_t a1, void *a2)
{
  id v7 = a2;
  id v3 = [v7 firstObject];

  uint64_t v4 = v7;
  if (v3)
  {
    uint64_t v5 = [v7 firstObject];
    AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v5, 0);

    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), AttachmentIfNeededRef);
    }

    uint64_t v4 = v7;
  }
}

void sub_1D9780318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9780338(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = *(void **)(v5 + 40);
  *(void *)(v5 + 40) = v4;

  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  char v16 = v3;
  id v7 = [v3 reverseObjectEnumerator];
  uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v18 != v9) {
          objc_enumerationMutation(v7);
        }
        long long v11 = *(void **)(*((void *)&v17 + 1) + 8 * i);
        if (![v11 itemType])
        {
          AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v11, 0);
          if (AttachmentIfNeededRef)
          {
            [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) addObject:AttachmentIfNeededRef];
          }
          else if (IMOSLoggingEnabled())
          {
            uint64_t v13 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              if (v11) {
                uint64_t v14 = @"non-nil";
              }
              else {
                uint64_t v14 = @"nil";
              }
              if (v11) {
                uint64_t v15 = [v11 itemType];
              }
              else {
                uint64_t v15 = 0;
              }
              *(_DWORD *)long long buf = 138412546;
              uint64_t v22 = v14;
              __int16 v23 = 2048;
              uint64_t v24 = v15;
              _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Could not fetch IMMessageItem from IMDMessageRecord with item (%@) and type %lld", buf, 0x16u);
            }
          }
        }
      }
      uint64_t v8 = [v7 countByEnumeratingWithState:&v17 objects:v25 count:16];
    }
    while (v8);
  }
}

void sub_1D9780C08(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v3 = objc_msgSend(a2, "reverseObjectEnumerator", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        if (![v8 itemType])
        {
          uint64_t v9 = [v8 associatedMessageGUID];

          if (!v9)
          {
            long long v10 = [v8 guid];
            long long v11 = [v8 date];
            uint64_t v12 = [v8 partCount];
            if (v10) {
              BOOL v13 = v11 == 0;
            }
            else {
              BOOL v13 = 1;
            }
            if (!v13)
            {
              uint64_t v14 = (void *)[objc_alloc(MEMORY[0x1E4F6E848]) initWithGUID:v10 date:v11 messagePartCount:v12];
              [*(id *)(a1 + 32) addObject:v14];
            }
          }
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v5);
  }
}

void sub_1D9781014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9781040(uint64_t a1, void *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = objc_msgSend(a2, "reverseObjectEnumerator", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v12;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v12 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(*((void *)&v11 + 1) + 8 * v7) date];
        uint64_t v9 = v8;
        if (v8)
        {
          uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
          if (*(void *)(v10 + 40))
          {
            if (objc_msgSend(v8, "compare:") != -1) {
              goto LABEL_11;
            }
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
          }
          objc_storeStrong((id *)(v10 + 40), v9);
        }
LABEL_11:

        ++v7;
      }
      while (v5 != v7);
      uint64_t v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v5);
  }
}

void sub_1D9781290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97812A8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id obj = (id)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef(a2, 0);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && ![obj type]) {
      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), obj);
    }
  }
}

void sub_1D9781534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9781554(uint64_t a1, void *a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v2 = a2;
  uint64_t v3 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        if ([v7 itemType] == 6)
        {
          AttachmentIfNeededRef = (void *)IMDCreateIMMessageItemFromIMDMessageRecordLoadAttachmentIfNeededRef((uint64_t)v7, 0);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0 && [AttachmentIfNeededRef type] == 6)
          {
            uint64_t v10 = *(void *)(*(void *)(a1 + 32) + 8);
            long long v11 = *(void **)(v10 + 40);
            *(void *)(v10 + 40) = AttachmentIfNeededRef;

            goto LABEL_16;
          }
          uint64_t v9 = IMLogHandleForCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138412546;
            long long v18 = v7;
            __int16 v19 = 2112;
            uint64_t v20 = AttachmentIfNeededRef;
            _os_log_error_impl(&dword_1D967A000, v9, OS_LOG_TYPE_ERROR, "Record of itemType TUConversation did not recover as IMTUConversationItem record: %@ recovered as: %@", buf, 0x16u);
          }
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v13 objects:v21 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
LABEL_16:
}

uint64_t sub_1D9781E00()
{
  qword_1EBE2BB98 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F1CA80]);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9783F28(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  id v2 = (void *)MEMORY[0x1E016A370]();
  uint64_t v3 = *(void *)(a1 + 88);
  if ((unint64_t)(*(void *)(a1 + 80) - v3) >= 0x3E8) {
    LODWORD(v4) = 1000;
  }
  else {
    uint64_t v4 = *(void *)(a1 + 80) - v3;
  }
  uint64_t v5 = objc_msgSend(*(id *)(a1 + 32), "subarrayWithRange:");
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 96);
      uint64_t v8 = *(void *)(a1 + 40);
      uint64_t v9 = *(void *)(a1 + 48);
      *(_DWORD *)long long buf = 67109890;
      int v26 = v7;
      __int16 v27 = 2112;
      uint64_t v28 = v8;
      __int16 v29 = 2112;
      uint64_t v30 = v9;
      __int16 v31 = 1024;
      int v32 = v4;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Deleting batch %d of messages for chatIdentifiers %@ onServices %@. %d messages will be deleted.", buf, 0x22u);
    }
  }
  int IsFull = IMDSMSRecordIsFull();
  long long v11 = [MEMORY[0x1E4F6E7C8] sharedInstance];
  [v11 deleteInteractionsWithMessageGUIDs:v5];

  IMDMessageRecordDeleteMessagesWithGUIDsChatIdentifiersOnServices();
  long long v12 = +[IMDBroadcastController sharedProvider];
  long long v13 = [v12 broadcasterForChatListeners];
  [v13 historicalMessageGUIDsDeleted:v5 chatGUIDs:*(void *)(a1 + 56) queryID:0];

  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  id v14 = v5;
  uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v21;
    do
    {
      for (uint64_t i = 0; i != v15; ++i)
      {
        if (*(void *)v21 != v16) {
          objc_enumerationMutation(v14);
        }
        +[IMDMessageStore _updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:](IMDMessageStore, "_updateCacheForMessageGUID:fromMessage:toMessage:updateLastMessage:calculateUnreadCount:", *(void *)(*((void *)&v20 + 1) + 8 * i), 0, 0, 1, 1, (void)v20);
      }
      uint64_t v15 = [v14 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v15);
  }

  BOOL v18 = IMDSMSRecordIsFull() != 0;
  [*(id *)(a1 + 64) updateStamp];
  sub_1D977A0E0(IsFull != 0, v18);

  return [*(id *)(a1 + 64) _deleteMessagesWithGUIDs:*(void *)(a1 + 32) chatIdentifiers:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 104) onServices:*(void *)(a1 + 48) batchNumber:*(void *)(a1 + 96) + 1 completion:*(void *)(a1 + 72)];
}

void sub_1D97846DC(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F504C8] readMessageStream];
  uint64_t v3 = [v2 source];

  uint64_t v4 = (void *)[objc_alloc(MEMORY[0x1E4F503F8]) initMarkUnreadWithIDSHandle:*(void *)(a1 + 32)];
  [v3 sendEvent:v4];
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 40);
      int v7 = 138412290;
      uint64_t v8 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Donating Unread Message Event to Stream for %@.", (uint8_t *)&v7, 0xCu);
    }
  }
}

uint64_t sub_1D978552C(uint64_t a1, void *a2)
{
  return [a2 ID];
}

void sub_1D97858B4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9785868);
  }
  _Unwind_Resume(a1);
}

void sub_1D9785B2C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Scheduling a suppress DB invalidation timer", v6, 2u);
    }
  }
  uint64_t v3 = [MEMORY[0x1E4F1CB00] scheduledTimerWithTimeInterval:*(void *)(a1 + 32) target:sel__suppressDBUpdateTimerFired selector:0 userInfo:0 repeats:60.0];
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v4 + 40);
  *(void *)(v4 + 40) = v3;
}

void sub_1D9787138(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([v3 length]) {
    [*(id *)(a1 + 32) addObject:v3];
  }
}

uint64_t sub_1D978824C(uint64_t a1, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) = [*(id *)(a1 + 32) addEditHistoryToMessage:*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40) editedPartIndex:a2 editType:*(void *)(a1 + 56) previousMessage:*(void *)(a1 + 40)];

  return MEMORY[0x1F41817F8]();
}

void sub_1D9788510(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  long long v13 = [NSString stringWithFormat:@"p:%ld/%@", a2, *(void *)(a1 + 32)];
  uint64_t v4 = [WeakRetained messagesWithAssociatedGUID:v13 shouldLoadAttachments:0];
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134218498;
      uint64_t v20 = [v4 count];
      __int16 v21 = 2048;
      long long v22 = a2;
      __int16 v23 = 2112;
      uint64_t v24 = v13;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Found %ld associated message items for retracted message part %ld in edited message %@", buf, 0x20u);
    }
  }
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v6 = v4;
  uint64_t v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; ++i)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = [*(id *)(*((void *)&v14 + 1) + 8 * i) guid];
        if (IMOSLoggingEnabled())
        {
          long long v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v20 = (uint64_t)v10;
            __int16 v21 = 2112;
            long long v22 = v13;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Associated message item %@ refers to messagePartGUID %@ that was retracted. Deleting the associated message item.", buf, 0x16u);
          }
        }
        [*(id *)(a1 + 40) addObject:v10];
      }
      uint64_t v7 = [v6 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v7);
  }
}

BOOL sub_1D978905C(uint64_t a1, void *a2)
{
  return [a2 associatedMessageType] == 2;
}

uint64_t sub_1D9789080(uint64_t a1, void *a2)
{
  id v3 = [a2 balloonBundleID];
  uint64_t v4 = [*(id *)(a1 + 32) balloonBundleID];
  uint64_t v5 = [v3 isEqualToString:v4];

  return v5;
}

id sub_1D9789EDC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = v8;
  if (v6)
  {
    uint64_t v10 = +[IMDAccountController sharedAccountController];
    long long v11 = [v10 accountForAccountID:v6];
LABEL_9:

    goto LABEL_10;
  }
  if (v7 && v8)
  {
    long long v12 = +[IMDServiceController sharedController];
    uint64_t v10 = [v12 serviceWithName:v9];

    long long v13 = +[IMDAccountController sharedAccountController];
    long long v14 = [v13 accountsForLoginID:v7 onService:v10];
LABEL_8:
    long long v16 = v14;
    long long v11 = [v14 lastObject];

    goto LABEL_9;
  }
  if (v8)
  {
    long long v15 = +[IMDServiceController sharedController];
    uint64_t v10 = [v15 serviceWithName:v9];

    long long v13 = +[IMDAccountController sharedAccountController];
    long long v14 = [v13 accountsForService:v10];
    goto LABEL_8;
  }
  long long v11 = 0;
LABEL_10:

  return v11;
}

void sub_1D978A044(uint64_t a1)
{
  if (!qword_1EBE2BBA8)
  {
    id v2 = (void **)MEMORY[0x1E0169C40]("kCTMessageDatabaseFullNotification", @"CoreTelephony");
    if (v2) {
      id v3 = *v2;
    }
    else {
      id v3 = 0;
    }
    objc_storeStrong((id *)&qword_1EBE2BBA8, v3);
  }
  CFStringRef v4 = (const __CFString *)qword_1EBE2BBB0;
  if (qword_1EBE2BBB0
    || ((uint64_t v5 = (void **)MEMORY[0x1E0169C40]("kCTMessageDatabaseFullPreference", @"CoreTelephony")) == 0
      ? (id v6 = 0)
      : (id v6 = *v5),
        objc_storeStrong((id *)&qword_1EBE2BBB0, v6),
        (CFStringRef v4 = (const __CFString *)qword_1EBE2BBB0) != 0))
  {
    CFBooleanRef v7 = (const __CFBoolean *)CFPreferencesCopyValue(v4, @"com.apple.MobileSMS", @"mobile", (CFStringRef)*MEMORY[0x1E4F1D3C8]);
    if (v7)
    {
      CFBooleanRef v8 = v7;
      CFTypeID v9 = CFGetTypeID(v7);
      int v10 = v9 == CFBooleanGetTypeID() && CFBooleanGetValue(v8) != 0;
      CFRelease(v8);
    }
    else
    {
      int v10 = 0;
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v10 != *(unsigned __int8 *)(a1 + 40);
  }
}

uint64_t sub_1D978A1C0()
{
  qword_1EBE2B9A8 = objc_alloc_init(IMDPhotosSyndicationLibraryChangeListener);

  return MEMORY[0x1F41817F8]();
}

void sub_1D978A6B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
}

void sub_1D978A8AC(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  long long v13 = [*(id *)(a1 + 32) analysisFetchOptions];
  id v2 = [MEMORY[0x1E4F38EB8] fetchAssetsWithOptions:v13];
  if ([v2 count])
  {
    id v3 = 0;
    while (1)
    {
      CFStringRef v4 = [v2 objectAtIndexedSubscript:v3];
      uint64_t v5 = [*(id *)(a1 + 40) changeDetailsForObject:v4];
      if (v5) {
        break;
      }
LABEL_18:

      if ((unint64_t)++v3 >= [v2 count]) {
        goto LABEL_19;
      }
    }
    id v6 = [v4 curationProperties];
    CFBooleanRef v7 = [v6 syndicationIdentifier];

    if (IMOSLoggingEnabled())
    {
      CFBooleanRef v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 134218242;
        long long v15 = v3;
        __int16 v16 = 2112;
        long long v17 = v7;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Asset at index %lu had changes! syndicationIdentifier: %@", buf, 0x16u);
      }
    }
    CFTypeID v9 = +[IMDFileTransferCenter sharedInstance];
    int v10 = [v9 transferForGUID:v7];

    int v11 = IMOSLoggingEnabled();
    if (v10)
    {
      if (v11)
      {
        long long v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          long long v15 = v10;
          __int16 v16 = 2112;
          long long v17 = v4;
          _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Ingesting new analysis data. transfer %@, asset: %@", buf, 0x16u);
        }
LABEL_16:
      }
    }
    else if (v11)
    {
      long long v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        long long v15 = (char *)v7;
        __int16 v16 = 2112;
        long long v17 = v4;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "A syndication library change was received for a particular asset, but a corresponding file transfer was not found using the asset's syndicationIdentifier. syndicationIdentifier: %@, asset: %@", buf, 0x16u);
      }
      goto LABEL_16;
    }

    goto LABEL_18;
  }
LABEL_19:
}

void sub_1D978ACB4(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E016A370]();
  id v4 = a2;
  pthread_mutex_lock(&stru_1EA8C7790);
  uid_t v5 = geteuid();
  if (!v5) {
    uid_t v5 = getuid();
  }
  if (qword_1EA8CA550)
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)qword_1EA8CA550, (const void *)v5);
    if (Value) {
      goto LABEL_13;
    }
  }
  else
  {
    qword_1EA8CA550 = (uint64_t)CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
  }
  pw_dir = getenv("IPHONE_SHARED_RESOURCES_DIRECTORY");
  if (pw_dir || (CFBooleanRef v8 = getpwuid(v5)) != 0 && (pw_dir = v8->pw_dir) != 0)
  {
    Value = CFStringCreateWithFileSystemRepresentation(0, pw_dir);
    if (Value)
    {
      CFDictionarySetValue((CFMutableDictionaryRef)qword_1EA8CA550, (const void *)v5, Value);
      CFRelease(Value);
    }
  }
  else
  {
    Value = 0;
  }
LABEL_13:
  pthread_mutex_unlock(&stru_1EA8C7790);
  CFStringRef v9 = CFStringCreateWithFormat(0, 0, @"%@/Library/Preferences/%@", Value, @"com.apple.MobileSMS");
  CFRelease(v9);
  if (IMOSLoggingEnabled())
  {
    int v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Refresh: User setting for MMS changed", buf, 2u);
    }
  }
  [v4 updateMMSCapability];
}

void sub_1D978AE5C(uint64_t a1, void *a2)
{
  id v3 = (void *)MEMORY[0x1E016A370]();
  id v4 = a2;
  if (IMOSLoggingEnabled())
  {
    uid_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v6 = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Refresh: CT MMS info changed", v6, 2u);
    }
  }
  [v4 updateMMSCapability];
}

uint64_t sub_1D978B9D4()
{
  return notify_register_check("com.apple.MobileSMS.MMSCapable", &dword_1EA8CA540);
}

id _IMDHashParticipants(void *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1 arrayByApplyingSelector:sel_ID];
  uid_t v5 = (__CFArray *)[v4 mutableCopy];

  if (![v3 length])
  {
    uint64_t v6 = [NSString stringGUID];

    id v3 = (id)v6;
  }
  if (v5) {
    BOOL v7 = v3 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7) {
    CFArrayAppendValue(v5, v3);
  }
  [(__CFArray *)v5 sortUsingSelector:sel_caseInsensitiveCompare_];
  CFBooleanRef v8 = [(__CFArray *)v5 componentsJoinedByString:@","];
  CFStringRef v9 = [v8 dataUsingEncoding:4];
  int v10 = [v9 SHA1HexString];

  return v10;
}

void sub_1D978FFE4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D978FFA0);
  }
  _Unwind_Resume(a1);
}

void sub_1D9790F44(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9790E74);
  }
  _Unwind_Resume(a1);
}

void sub_1D97916BC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9791554);
  }
  _Unwind_Resume(a1);
}

id SMSCopySanitizedContentLocation(void *a1)
{
  id v1 = a1;
  if ([v1 hasPrefix:@"cid:"])
  {
    id v2 = (id)[v1 mutableCopy];
    [v2 replaceOccurrencesOfString:@"cid:", &stru_1F3398578, 2, 0, objc_msgSend(@"cid:", "length") withString options range];
  }
  else
  {
    id v2 = v1;
  }

  return v2;
}

void *SMSCopySanitizedContentID(void *a1)
{
  id v1 = (void *)[a1 mutableCopy];
  if ([v1 hasPrefix:@"<"]) {
    objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @"<", &stru_1F3398578, 2, 0, 1);
  }
  if ([v1 hasSuffix:@">"]) {
    objc_msgSend(v1, "replaceOccurrencesOfString:withString:options:range:", @">", &stru_1F3398578, 2, objc_msgSend(v1, "length") - 1, 1);
  }
  return v1;
}

uint64_t sub_1D97965B8()
{
  qword_1EBE2BB60 = (uint64_t)os_log_create("com.apple.Messages", "IMBalloonPluginPipelineParameter");

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9796CF4()
{
  qword_1EBE2B9B0 = objc_alloc_init(IMDCKRecordSaltManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9796F98(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_1D97971AC;
    uint64_t v12[3] = &unk_1E6B73A60;
    id v9 = v5;
    uint64_t v10 = *(void *)(a1 + 32);
    int v11 = *(void **)(a1 + 40);
    v13[0] = v9;
    v13[1] = v10;
    id v14 = v11;
    dispatch_async(MEMORY[0x1E4F14428], v12);

    CFBooleanRef v8 = (id *)v13;
    goto LABEL_9;
  }
  if (IMOSLoggingEnabled())
  {
    BOOL v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v19 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "*** Error fetching user ID %@", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 32) setCachedSalt:0];
  if (*(void *)(a1 + 40))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D9797194;
    block[3] = &unk_1E6B73A10;
    id v17 = *(id *)(a1 + 40);
    id v16 = v6;
    dispatch_async(MEMORY[0x1E4F14428], block);

    CFBooleanRef v8 = &v17;
LABEL_9:
  }
}

uint64_t sub_1D9797194(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, *(void *)(a1 + 32));
}

void sub_1D97971AC(uint64_t a1)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) recordName];
  if ([v2 length])
  {
    [*(id *)(a1 + 40) setCachedSalt:v2];
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        id v4 = [*(id *)(a1 + 40) cachedSalt];
        int v9 = 138412290;
        uint64_t v10 = v4;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Cached salt : %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      (*(void (**)(uint64_t, uint64_t, void))(v5 + 16))(v5, 1, 0);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9) = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "** Fetched salt was 0 length **", (uint8_t *)&v9, 2u);
      }
    }
    [*(id *)(a1 + 40) setCachedSalt:0];
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7)
    {
      CFBooleanRef v8 = [MEMORY[0x1E4F28C58] errorWithDomain:@"IMDCKRecordSaltManager" code:1 userInfo:0];
      (*(void (**)(uint64_t, void, void *))(v7 + 16))(v7, 0, v8);
    }
  }
}

void sub_1D9797650(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v3 = objc_alloc(MEMORY[0x1E4F28C58]);
    if (*(unsigned char *)(a1 + 40)) {
      uint64_t v4 = 5;
    }
    else {
      uint64_t v4 = 6;
    }
    id v5 = (id)[v3 initWithDomain:*MEMORY[0x1E4F6D200] code:v4 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v5);
  }
}

void sub_1D97976F0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_1D9797780;
  v2[3] = &unk_1E6B73030;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _fetchLatestSaltFromCloudKitAndPersistWithCompletion:v2];
}

void sub_1D9797780(uint64_t a1, char a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = [*(id *)(a1 + 32) cachedSalt];
      *(_DWORD *)long long buf = 138412546;
      long long v15 = v7;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Fetched salt %@, error %@", buf, 0x16u);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D9797910;
  block[3] = &unk_1E6B742C8;
  id v8 = *(id *)(a1 + 40);
  char v13 = a2;
  id v11 = v5;
  id v12 = v8;
  id v9 = v5;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

uint64_t sub_1D9797910(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1D97979E8(void *a1, int a2)
{
  uint64_t v192 = *MEMORY[0x1E4F143B8];
  if (a1)
  {
    int v3 = [a1 style];
    uint64_t v120 = [a1 state];
    v134 = objc_msgSend((id)objc_msgSend(a1, "accountID"), "copy");
    v139 = objc_msgSend((id)objc_msgSend(a1, "properties"), "copy");
    v138 = objc_msgSend((id)objc_msgSend(a1, "chatIdentifier"), "copy");
    id v173 = (id)objc_msgSend((id)objc_msgSend(a1, "serviceName"), "copy");
    v135 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "displayName"), "copy");
    v136 = objc_msgSend((id)objc_msgSend(a1, "guid"), "copy");
    v137 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "groupID"), "copy");
    v131 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "engramID"), "copy");
    uint64_t v4 = objc_msgSend((id)objc_msgSend(a1, "account"), "accountDefaults");
    v133 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(v4, "objectForKey:", *MEMORY[0x1E4F6C738]), "copy");
    id obj = (id)objc_msgSend((id)objc_msgSend(a1, "participants"), "copy");
    v132 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "lastAddressedLocalHandle"), "copy");
    v122 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "lastAddressedSIMID"), "copy");
    unsigned int v5 = [a1 isArchived];
    uint64_t v118 = [a1 isFiltered];
    unsigned int v6 = [a1 isBlackholed];
    unsigned int v7 = [a1 hasHadSuccessfulQuery];
    v130 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "roomName"), "copy");
    v129 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "serverChangeToken"), "copy");
    uint64_t v117 = [a1 cloudKitSyncState];
    v126 = (CFTypeRef *)[a1 originalGroupID];
    uint64_t v116 = [a1 lastReadMessageTimeStamp];
    uint64_t v141 = [a1 autoDonationBehavior];
    unsigned int v8 = [a1 isRecovered];
    unsigned int v9 = [a1 isDeletingIncomingMessages];
    if ([a1 autoDonationBehaviorLastModificationDate]) {
      uint64_t v115 = objc_msgSend((id)objc_msgSend(a1, "autoDonationBehaviorLastModificationDate"), "__im_nanosecondTimeInterval");
    }
    else {
      uint64_t v115 = 0;
    }
    if (v141)
    {
      if (![a1 autoDonationBehaviorLastModificationDate])
      {
        id v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
          sub_1D99032B8(v11);
        }
      }
    }
    v128 = (CFTypeRef *)objc_msgSend((id)objc_msgSend(a1, "cloudKitRecordID"), "copy");
    if ([v139 count]) {
      id v123 = (id)[(id)JWEncodeDictionary() copy];
    }
    else {
      id v123 = objc_alloc_init(MEMORY[0x1E4F1C9B8]);
    }
    uint64_t v143 = IMDChatRecordCopyChatForGUID();
    int v140 = v3;
    unint64_t v119 = v5;
    unint64_t v113 = v6;
    unint64_t v114 = v7;
    unint64_t v111 = v9;
    unint64_t v112 = v8;
    if (!v143)
    {
      if ([a1 rowID] == -1) {
        goto LABEL_38;
      }
      [a1 rowID];
      uint64_t v143 = IMDChatRecordCopyChatRecord();
      if (IMOSLoggingEnabled())
      {
        uint64_t v18 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          uint64_t v19 = [a1 guid];
          uint64_t v20 = [a1 rowID];
          __int16 v21 = @"YES";
          *(_DWORD *)long long buf = 138412802;
          *(void *)&uint8_t buf[4] = v19;
          if (!v143) {
            __int16 v21 = @"NO";
          }
          __int16 v184 = 2048;
          uint64_t v185 = v20;
          __int16 v186 = 2112;
          uint64_t v187 = (uint64_t)v21;
          _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Failed to find chat by guid %@, tried rowid %lld instead, found? %@", buf, 0x20u);
        }
      }
      if (!v143)
      {
LABEL_38:
        long long v22 = (const void *)IMDChatRecordCopyNewestChatForGroupIDOnService();
        if (v22)
        {
          __int16 v23 = (void *)IMDChatRecordCopyDisplayName();
          if (IMOSLoggingEnabled())
          {
            uint64_t v24 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              uint64_t Identifier = IMDChatRecordGetIdentifier();
              *(_DWORD *)long long buf = 138413314;
              *(void *)&uint8_t buf[4] = v137;
              __int16 v184 = 2112;
              uint64_t v185 = (uint64_t)v173;
              __int16 v186 = 2048;
              uint64_t v187 = Identifier;
              __int16 v188 = 2112;
              v189 = v23;
              __int16 v190 = 2112;
              v191 = v135;
              _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Found chat fork with same groupID (%@) and service (%@) at rowID: %lld, existing display name is (%@) and new display name is (%@)", buf, 0x34u);
            }
          }

          CFRelease(v22);
        }
        if (![v173 length])
        {
          int v26 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v181 = *MEMORY[0x1E4F28228];
          v182 = @"[IMCreateIMDChat] Chat was missing a service when being inserted into the database.";
          uint64_t v27 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v182 forKeys:&v181 count:1];
          uint64_t v28 = [v26 errorWithDomain:*MEMORY[0x1E4F6C158] code:0 userInfo:v27];
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:type:context:", @"Missing chat service name at insert", v28, @"MissingChatService", 0);
          IMComponentsFromChatGUID();
        }
        __int16 v109 = (void *)v112;
        unint64_t v110 = v9;
        id v107 = (uint64_t *)v141;
        uint64_t v108 = (uint64_t *)v115;
        BOOL v105 = v122;
        unint64_t v106 = v6;
        id v103 = (uint64_t *)v116;
        uint64_t v104 = v128;
        id v101 = (uint64_t *)v117;
        uint64_t v102 = v126;
        id v99 = v131;
        id v100 = v129;
        id v97 = (uint64_t *)v118;
        unint64_t v98 = v7;
        __int16 v95 = v137;
        id v96 = (uint64_t *)v119;
        uint64_t v93 = v132;
        BOOL v94 = v133;
        uint64_t v91 = v130;
        id v92 = v135;
        uint64_t v143 = IMDChatRecordCreate();
        if (!v143)
        {
          uint64_t v143 = 0;
LABEL_228:

          return v143;
        }
LABEL_174:
        if (IMOSLoggingEnabled())
        {
          id v61 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v61, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            *(void *)&uint8_t buf[4] = v138;
            __int16 v184 = 2112;
            uint64_t v185 = (uint64_t)obj;
            _os_log_impl(&dword_1D967A000, v61, OS_LOG_TYPE_INFO, "Updating chat %@ with participants: %@", buf, 0x16u);
          }
        }
        if (v140 == 45 && [obj count] != 1)
        {
          id v62 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v179 = *MEMORY[0x1E4F28228];
          v180 = @"1-1 chat has wrong number of participants while storing";
          uint64_t v63 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v180 forKeys:&v179 count:1];
          uint64_t v64 = [v62 errorWithDomain:*MEMORY[0x1E4F6C158] code:0 userInfo:v63];
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", @"Invalid Chat Participants", v64);
        }
        v125 = (void *)IMDChatRecordCopyGUID();
        uint64_t v65 = *MEMORY[0x1E4F6CE18];
        char v66 = objc_msgSend((id)objc_msgSend(v139, "objectForKeyedSubscript:", *MEMORY[0x1E4F6CE18]), "integerValue");
        if (v125) {
          char v67 = objc_msgSend(v136, "isEqualToString:");
        }
        else {
          char v67 = 0;
        }
        v121 = (void *)IMCopyGUIDForChat();
        if (([a1 style] == 45 || objc_msgSend(a1, "style") == 43)
          && objc_msgSend(v138, "length", v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104, v105, v106, v107,
               v108,
               v109,
               v110)
          && [v173 length]
          && !([v136 isEqualToString:v121] & 1 | v66 & 1 | v67 & 1))
        {
          id v68 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v177 = *MEMORY[0x1E4F28228];
          v178 = @"[IMCreateIMDChat] Chat GUID did not match chat properties";
          uint64_t v69 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v178 forKeys:&v177 count:1];
          uint64_t v70 = [v68 errorWithDomain:*MEMORY[0x1E4F6C158] code:0 userInfo:v69];
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", @"Invalid Chat GUID", v70);
        }
        v127 = (void *)IMDChatRecordCopyHandles();
        __int16 v71 = (void *)[v127 mutableCopy];
        char v72 = [a1 isStewieChat];
        unint64_t v73 = objc_msgSend((id)objc_msgSend(v139, "objectForKeyedSubscript:", v65), "integerValue");
        if (!([a1 isBusinessChat] & 1 | (v140 != 45) | v72 & 1u)
          && [obj count] == 1
          && !(+[IMDChat identifier:equalsIdentifier:](IMDChat, "identifier:equalsIdentifier:", v138, objc_msgSend((id)objc_msgSend(obj, "firstObject"), "ID")) | (v73 >> 1) & 1)&& !+[IMDChat identifier:equalsIdentifier:](IMDChat, "identifier:equalsIdentifier:", objc_msgSend((id)objc_msgSend(obj, "firstObject"), "ID"), objc_msgSend((id)objc_msgSend(v127, "firstObject"), "canonicalizedURIString")))
        {
          id v74 = (void *)MEMORY[0x1E4F28C58];
          uint64_t v175 = *MEMORY[0x1E4F28228];
          v176 = @"[IMCreateIMDChat] [v2] Chat identifier for 1-1 chat did not match the participant's handle ID.";
          uint64_t v75 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v176 forKeys:&v175 count:1];
          uint64_t v76 = [v74 errorWithDomain:*MEMORY[0x1E4F6C158] code:0 userInfo:v75];
          objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F6E890], "sharedInstance"), "forceAutoBugCaptureWithSubType:errorPayload:", @"Incorrect Chat Participant", v76);
        }
        long long v146 = 0u;
        long long v147 = 0u;
        long long v144 = 0u;
        long long v145 = 0u;
        uint64_t v77 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v144, v174, 16, v91, v92, v93, v94, v95, v96, v97, v98, v99, v100, v101, v102, v103, v104,
                v105,
                v106,
                v107,
                v108,
                v109,
                v110);
        if (v77)
        {
          uint64_t v78 = *(void *)v145;
          do
          {
            for (uint64_t i = 0; i != v77; ++i)
            {
              if (*(void *)v145 != v78) {
                objc_enumerationMutation(obj);
              }
              uint64_t v80 = *(void **)(*((void *)&v144 + 1) + 8 * i);
              [v80 ID];
              id v81 = (const void *)IMDHandleRecordCopyHandleForIDOnService();
              [v80 ID];
              if (v81)
              {
                [v80 countryCode];
                [v80 unformattedID];
                IMDHandleRecordBulkUpdate();
              }
              else
              {
                IMCountryCodeForIncomingTextMessage();
                [v80 unformattedID];
                [v80 personCentricID];
                id v81 = (const void *)IMDHandleRecordCreate();
              }
              int v82 = IMDHandleRecordGetIdentifier();
              uint64_t v83 = [v71 count];
              if (v83 - 1 < 0)
              {
LABEL_206:
                if (IMOSLoggingEnabled())
                {
                  long long v84 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long buf = 138412546;
                    *(void *)&uint8_t buf[4] = v81;
                    __int16 v184 = 2112;
                    uint64_t v185 = (uint64_t)v80;
                    _os_log_impl(&dword_1D967A000, v84, OS_LOG_TYPE_INFO, " Adding handle: %@   (%@)", buf, 0x16u);
                  }
                }
                IMDChatRecordAddHandle();
              }
              else
              {
                while (1)
                {
                  if ([v71 objectAtIndex:--v83])
                  {
                    if (IMDHandleRecordGetIdentifier() == v82) {
                      break;
                    }
                  }
                  if (v83 <= 0) {
                    goto LABEL_206;
                  }
                }
                [v71 removeObjectAtIndex:v83];
              }
              if (v81) {
                CFRelease(v81);
              }
            }
            uint64_t v77 = [obj countByEnumeratingWithState:&v144 objects:v174 count:16];
          }
          while (v77);
        }
        int v85 = [v71 count];
        if (v71 && v85 >= 1)
        {
          uint64_t v86 = v85;
          for (uint64_t j = 0; j != v86; ++j)
          {
            uint64_t v88 = [v71 objectAtIndex:j];
            if (v88)
            {
              if (IMOSLoggingEnabled())
              {
                id v89 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v89, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138412290;
                  *(void *)&uint8_t buf[4] = v88;
                  _os_log_impl(&dword_1D967A000, v89, OS_LOG_TYPE_INFO, " Removing handle: %@", buf, 0xCu);
                }
              }
              IMDChatRecordRemoveHandle();
            }
          }
        }
        if (v71) {
          CFRelease(v71);
        }

        goto LABEL_228;
      }
    }
    *(void *)long long buf = 0;
    uint64_t v172 = 0;
    uint64_t v171 = 0;
    uint64_t v170 = 0;
    v169 = 0;
    v168 = 0;
    CFTypeRef cf = 0;
    CFTypeRef v166 = 0;
    CFTypeRef v165 = 0;
    CFTypeRef v164 = 0;
    CFTypeRef v163 = 0;
    CFTypeRef v162 = 0;
    CFTypeRef v161 = 0;
    CFTypeRef v160 = 0;
    id v159 = 0;
    CFTypeRef v158 = 0;
    id v12 = (void *)[(id)JWDecodeDictionary() copy];
    CFTypeRef v157 = 0;
    uint64_t v156 = 0;
    CFTypeRef v155 = 0;
    uint64_t v154 = 0;
    CFTypeRef v153 = 0;
    uint64_t v151 = 0;
    CFTypeRef v152 = 0;
    v149 = 0;
    uint64_t v150 = 0;
    v148 = 0;
    __int16 v109 = &v149;
    unint64_t v110 = (unint64_t)&v148;
    id v107 = &v151;
    uint64_t v108 = &v150;
    BOOL v105 = &v152;
    unint64_t v106 = (unint64_t)&v169;
    id v103 = &v154;
    uint64_t v104 = &v153;
    id v101 = &v156;
    uint64_t v102 = &v155;
    id v99 = &v162;
    id v100 = &v157;
    id v97 = &v170;
    unint64_t v98 = (unint64_t)&v168;
    __int16 v95 = &v163;
    id v96 = &v171;
    uint64_t v93 = &v161;
    BOOL v94 = &v165;
    uint64_t v91 = &v158;
    id v92 = &v164;
    _IMDChatRecordBulkCopy();
    BOOL v15 = *(void *)buf != v3 || v172 != v120 || v171 != v5;
    __int16 v16 = (void *)cf;
    if (cf == v134) {
      goto LABEL_30;
    }
    if (!objc_msgSend((id)cf, "length", &v158, &v164, &v161, &v165, &v163, &v171, &v170, &v168, &v162, &v157, &v156, &v155, &v154, &v153, &v152, &v169, &v151,
            &v150,
            &v149,
            &v148))
    {
      int v17 = 1;
      goto LABEL_48;
    }
    if (![v134 length]) {
LABEL_30:
    }
      int v17 = 0;
    else {
      int v17 = [v16 isEqualToString:v134] ^ 1;
    }
LABEL_48:
    if (v12 == v139) {
      goto LABEL_52;
    }
    if (![v12 count])
    {
      int v29 = 1;
      goto LABEL_54;
    }
    if (![v139 count]) {
LABEL_52:
    }
      int v29 = 0;
    else {
      int v29 = [v12 isEqualToDictionary:v139] ^ 1;
    }
LABEL_54:
    uint64_t v30 = (void *)v165;
    if (v165 == v133) {
      goto LABEL_58;
    }
    if (![(id)v165 length])
    {
      int v31 = 1;
      goto LABEL_60;
    }
    if (![(CFTypeRef *)v133 length]) {
LABEL_58:
    }
      int v31 = 0;
    else {
      int v31 = [v30 isEqualToString:v133] ^ 1;
    }
LABEL_60:
    int v32 = (void *)v161;
    if (v161 == v132) {
      goto LABEL_64;
    }
    if (![(id)v161 length])
    {
      int v33 = 1;
      goto LABEL_66;
    }
    if (![(CFTypeRef *)v132 length]) {
LABEL_64:
    }
      int v33 = 0;
    else {
      int v33 = [v32 isEqualToString:v132] ^ 1;
    }
LABEL_66:
    id v34 = (void *)v164;
    if (v164 == v135) {
      goto LABEL_70;
    }
    if (![(id)v164 length])
    {
      int v35 = 1;
      goto LABEL_72;
    }
    if (![(CFTypeRef *)v135 length]) {
LABEL_70:
    }
      int v35 = 0;
    else {
      int v35 = [v34 isEqualToString:v135] ^ 1;
    }
LABEL_72:
    __int16 v36 = (void *)v160;
    if (v160 == v138) {
      goto LABEL_76;
    }
    if (![(id)v160 length])
    {
      int v37 = 1;
      goto LABEL_78;
    }
    if (![v138 length]) {
LABEL_76:
    }
      int v37 = 0;
    else {
      int v37 = [v36 isEqualToString:v138] ^ 1;
    }
LABEL_78:
    uint64_t v38 = (void *)v158;
    if (v158 == v130) {
      goto LABEL_82;
    }
    if (![(id)v158 length])
    {
      int v39 = 1;
      goto LABEL_84;
    }
    if (![(CFTypeRef *)v130 length]) {
LABEL_82:
    }
      int v39 = 0;
    else {
      int v39 = [v38 isEqualToString:v130] ^ 1;
    }
LABEL_84:
    int v40 = v15 | v17 | v29 | v31 | v33 | v35 | v37 | v39;
    if (v170 != v118) {
      int v40 = 1;
    }
    if (v168 == (void *)v114) {
      int v41 = v40;
    }
    else {
      int v41 = 1;
    }
    uint64_t v42 = (void *)v163;
    if (v163 == v137) {
      goto LABEL_93;
    }
    if (![(id)v163 length])
    {
      int v43 = 1;
      goto LABEL_95;
    }
    if (![(CFTypeRef *)v137 length]) {
LABEL_93:
    }
      int v43 = 0;
    else {
      int v43 = [v42 isEqualToString:v137] ^ 1;
    }
LABEL_95:
    id v44 = (void *)v162;
    if (v162 == v131) {
      goto LABEL_99;
    }
    if (![(id)v162 length])
    {
      int v45 = 1;
      goto LABEL_101;
    }
    if (![(CFTypeRef *)v131 length]) {
LABEL_99:
    }
      int v45 = 0;
    else {
      int v45 = [v44 isEqualToString:v131] ^ 1;
    }
LABEL_101:
    id v46 = (void *)v157;
    if (v157 == v129) {
      goto LABEL_105;
    }
    if (![(id)v157 length])
    {
      int v47 = 1;
      goto LABEL_107;
    }
    if (![(CFTypeRef *)v129 length]) {
LABEL_105:
    }
      int v47 = 0;
    else {
      int v47 = [v46 isEqualToString:v129] ^ 1;
    }
LABEL_107:
    int v48 = v41 | v43 | v45 | v47;
    if (v156 == v117) {
      int v49 = v48;
    }
    else {
      int v49 = 1;
    }
    long long v50 = (void *)v155;
    if (v155 == v126) {
      goto LABEL_114;
    }
    if (![(id)v155 length])
    {
      int v51 = 1;
      goto LABEL_116;
    }
    if (![(CFTypeRef *)v126 length]) {
LABEL_114:
    }
      int v51 = 0;
    else {
      int v51 = [v50 isEqualToString:v126] ^ 1;
    }
LABEL_116:
    int v52 = v49 | v51;
    if (v154 == v116) {
      int v53 = v52;
    }
    else {
      int v53 = 1;
    }
    uint64_t v54 = (void *)v153;
    if (v153 == v128) {
      goto LABEL_123;
    }
    if (![(id)v153 length])
    {
      int v55 = 1;
      goto LABEL_125;
    }
    if (![(CFTypeRef *)v128 length]) {
LABEL_123:
    }
      int v55 = 0;
    else {
      int v55 = [v54 isEqualToString:v128] ^ 1;
    }
LABEL_125:
    int v56 = v53 | v55;
    if (v169 != (void *)v113) {
      int v56 = 1;
    }
    if (v150 != v115) {
      int v56 = 1;
    }
    if (v151 != v141) {
      int v56 = 1;
    }
    if (v149 != (void *)v112) {
      int v56 = 1;
    }
    if (v148 == (void *)v111) {
      int v57 = v56;
    }
    else {
      int v57 = 1;
    }
    if (!a2)
    {
      if ((v57 & 1) == 0) {
        goto LABEL_146;
      }
      goto LABEL_145;
    }
    id v58 = v159;
    id v59 = v173;
    if (v159 == v173) {
      goto LABEL_143;
    }
    if (![v159 length]) {
      goto LABEL_145;
    }
    if (![v59 length]) {
LABEL_143:
    }
      int v60 = 0;
    else {
      int v60 = [v58 isEqualToString:v59] ^ 1;
    }
    if (((v57 | v60) & 1) == 0)
    {
LABEL_146:
      if (cf)
      {
        CFRelease(cf);
        CFTypeRef cf = 0;
      }
      if (v12) {
        CFRelease(v12);
      }
      if (v166)
      {
        CFRelease(v166);
        CFTypeRef v166 = 0;
      }
      if (v165)
      {
        CFRelease(v165);
        CFTypeRef v165 = 0;
      }
      if (v161)
      {
        CFRelease(v161);
        CFTypeRef v161 = 0;
      }
      if (v164)
      {
        CFRelease(v164);
        CFTypeRef v164 = 0;
      }
      if (v163)
      {
        CFRelease(v163);
        CFTypeRef v163 = 0;
      }
      if (v162)
      {
        CFRelease(v162);
        CFTypeRef v162 = 0;
      }
      if (v160)
      {
        CFRelease(v160);
        CFTypeRef v160 = 0;
      }
      if (v158)
      {
        CFRelease(v158);
        CFTypeRef v158 = 0;
      }
      if (v157)
      {
        CFRelease(v157);
        CFTypeRef v157 = 0;
      }
      if (v155)
      {
        CFRelease(v155);
        CFTypeRef v155 = 0;
      }
      if (v153)
      {
        CFRelease(v153);
        CFTypeRef v153 = 0;
      }
      if (v152) {
        CFRelease(v152);
      }
      goto LABEL_174;
    }
LABEL_145:
    __int16 v109 = (void *)v112;
    unint64_t v110 = v111;
    id v107 = (uint64_t *)v141;
    uint64_t v108 = (uint64_t *)v115;
    BOOL v105 = v122;
    unint64_t v106 = v113;
    id v103 = (uint64_t *)v116;
    uint64_t v104 = v128;
    id v101 = (uint64_t *)v117;
    uint64_t v102 = v126;
    id v99 = v131;
    id v100 = v129;
    id v97 = (uint64_t *)v118;
    unint64_t v98 = v114;
    __int16 v95 = v137;
    id v96 = (uint64_t *)v119;
    uint64_t v93 = v132;
    BOOL v94 = v133;
    uint64_t v91 = v130;
    id v92 = v135;
    IMDChatRecordBulkUpdate();
    goto LABEL_146;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Attempted to create IMDChatRecordRef from NIL IMDChat.", buf, 2u);
    }
  }
  return 0;
}

IMDChat *sub_1D9798E78(uint64_t a1)
{
  if (a1)
  {
    id v63 = 0;
    *(void *)long long buf = 0;
    id v61 = 0;
    id v62 = 0;
    id v59 = 0;
    id v60 = 0;
    id v57 = 0;
    id v58 = 0;
    id v55 = 0;
    id v56 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    id v47 = 0;
    id v48 = 0;
    uint64_t v46 = 0;
    uint64_t v44 = 0;
    id v45 = 0;
    id v42 = 0;
    id v43 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    uint64_t v38 = 0;
    uint64_t v39 = 0;
    _IMDChatRecordBulkCopy();
    uint64_t v1 = +[IMDAccountController sharedInstance](IMDAccountController, "sharedInstance", &v58, &v55, &v59, &v62, &v57, &v52, &v51, &v49, &v56, &v47, &v46, &v45, &v44, &v43, &v42, &v50, &v41,
           &v40,
           &v39,
           &v38);
    uint64_t v2 = [(IMDAccountController *)v1 accountForAccountID:*(void *)buf];
    if (v2)
    {
      int v3 = (void *)v2;

      *(void *)long long buf = (id)[v3 accountID];
      id v62 = (id)[v3 loginID];
    }
    uint64_t v4 = (void *)IMDChatRecordCopyHandles();
    int v5 = [v4 count];
    int v37 = (void *)[objc_alloc(MEMORY[0x1E4F1CA48]) initWithCapacity:v5];
    if (v5 >= 1)
    {
      uint64_t v6 = 0;
      uint64_t v7 = v5;
      do
      {
        if ([v4 objectAtIndex:v6])
        {
          unsigned int v8 = (void *)IMDHandleRecordCopyID();
          unsigned int v9 = (void *)IMDHandleRecordCopyCountry();
          uint64_t v10 = (void *)IMDHandleRecordCopyUncanonicalizedID();
          id v11 = (void *)IMDHandleRecordCopyPersonCentricID();
          id v12 = [[IMDHandle alloc] initWithID:v8 unformattedID:v10 countryCode:v9 personCentricID:v11];
          [v37 addObject:v12];
        }
        ++v6;
      }
      while (v7 != v6);
    }

    uint64_t MessageTimeStampOnLoad = IMDChatRecordLastMessageTimeStampOnLoad();
    if (v40) {
      uint64_t v13 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)v40);
    }
    else {
      uint64_t v13 = 0;
    }
    int v35 = [IMDChat alloc];
    id v17 = v63;
    id v16 = *(id *)buf;
    id v18 = v60;
    uint64_t v19 = [v57 uppercaseString];
    id v20 = v61;
    uint64_t v21 = [v58 lowercaseString];
    id v22 = v55;
    id v23 = v59;
    id v24 = v42;
    uint64_t v25 = JWDecodeDictionary();
    BYTE1(v34) = v38 != 0;
    LOBYTE(v34) = v39 != 0;
    LOBYTE(v33) = v50 != 0;
    LOBYTE(v32) = v49 != 0;
    LOBYTE(v31) = v53;
    BOOL v15 = -[IMDChat initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:isRecovered:isDeletingIncomingMessages:](v35, "initWithAccountID:service:guid:groupID:chatIdentifier:participants:roomName:displayName:lastAddressedLocalHandle:lastAddressedSIMID:properties:state:style:isFiltered:hasHadSuccessfulQuery:engramID:serverChangeToken:cloudKitSyncState:originalGroupID:lastReadMessageTimeStamp:lastMessageTimeStampOnLoad:cloudKitRecordID:isBlackholed:autoDonationBehavior:autoDonationBehaviorLastModificationDate:isRecovered:isDeletingIncomingMessages:", v16, v17, v18, v19, v20, v37, v21, v22, v23, v24, v25, v54, v31, v51,
            v32,
            v56,
            v47,
            v46,
            v45,
            v44,
            MessageTimeStampOnLoad,
            v43,
            v33,
            v41,
            v13,
            v34);
    [(IMDChat *)v15 _setRowID:IMDChatRecordGetIdentifier()];
    uint64_t v26 = IMDChatRecordCachedUnreadCount();
    if ((v26 & 0x8000000000000000) == 0) {
      [(IMDChat *)v15 _setUnreadCount:v26];
    }
    uint64_t Message = IMDChatRecordCopyCachedLastMessage();
    if (Message)
    {
      uint64_t v28 = (const void *)Message;
      int v29 = (void *)IMDCreateIMMessageItemFromIMDMessageRecordRef(Message, 0);
      if (![v29 type]) {
        [(IMDChat *)v15 setLastMessage:v29];
      }

      CFRelease(v28);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "You passed me a NULL chat record ref. No IMDSavedChat for you!", buf, 2u);
      }
    }
    return 0;
  }
  return v15;
}

uint64_t sub_1D9799350()
{
  qword_1EBE2B9B8 = objc_alloc_init(IMDChatRegistry);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9799864(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__reloadChatsForDatabaseMergeOrDatabaseSwitch);
}

uint64_t sub_1D979986C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Deleted history automatically, re-syncing chats", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _forceReloadChats:1];
}

uint64_t sub_1D979990C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Last addressed handle/simIDs of chats got modified, force reloading chats", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _forceReloadChats:1];
}

uint64_t sub_1D97999AC(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Looks like we passed first unlock before chat registry was initialized. Doing first-unlock tasks", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _performPostUnlockHousekeeping];
}

void sub_1D979A188(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9799EDCLL);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1D979AB00(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = [*(id *)(a1 + 32) allExistingChatsWithIdentifier:a2];
  BOOL v3 = [v2 count] != 0;

  return v3;
}

uint64_t sub_1D979C8F8(uint64_t a1, void *a2)
{
  return [a2 ID];
}

void sub_1D979CD2C()
{
}

uint64_t sub_1D979CD74(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D979CD84(uint64_t a1)
{
}

void sub_1D979CD8C(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if ([v4 style] == 43)
  {
    int v5 = [v4 serviceName];
    char v6 = [v5 isEqualToString:*(void *)(a1 + 32)];

    if (v6)
    {
      uint64_t v7 = *(void **)(a1 + 40);
      unsigned int v8 = [v4 participants];
      unsigned int v9 = [v7 _participantIDSetFromHandles:v8 toIdentifier:*(void *)(a1 + 48)];

      if ([*(id *)(a1 + 56) isEqualToSet:v9])
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
          && ![v4 isNewerThan:*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)])
        {
          goto LABEL_30;
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v10 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            int v19 = 138412290;
            id v20 = v4;
            _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, " ==> Found exact match based on groupID and participants: %@", (uint8_t *)&v19, 0xCu);
          }
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = 1;
        uint64_t v11 = a1 + 80;
      }
      else
      {
        uint64_t v11 = a1 + 80;
        if (*(void *)(*(void *)(*(void *)(a1 + 80) + 8) + 40)
          && (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)
           || !objc_msgSend(v4, "isNewerThan:")))
        {
          goto LABEL_30;
        }
        if (IMOSLoggingEnabled())
        {
          id v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            int v19 = 138412290;
            id v20 = v4;
            _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, " ==> Found a newer chat based on groupID: %@", (uint8_t *)&v19, 0xCu);
          }
        }
      }
      objc_storeStrong((id *)(*(void *)(*(void *)v11 + 8) + 40), a2);
LABEL_30:

      goto LABEL_31;
    }
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
    if (*(void *)(v13 + 40))
    {
      if (!objc_msgSend(v4, "isNewerThan:"))
      {
        if (!IMOSLoggingEnabled()) {
          goto LABEL_31;
        }
        id v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          id v17 = [v4 guid];
          id v18 = [v4 serviceName];
          int v19 = 138412546;
          id v20 = v17;
          __int16 v21 = 2112;
          id v22 = v18;
          _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, " ==> Ignoring %@, has incorrect service: %@", (uint8_t *)&v19, 0x16u);
        }
LABEL_35:

        goto LABEL_31;
      }
      uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
    }
    objc_storeStrong((id *)(v13 + 40), a2);
    if (IMOSLoggingEnabled())
    {
      id v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v14 = [v4 guid];
        BOOL v15 = [v4 serviceName];
        int v19 = 138412546;
        id v20 = v14;
        __int16 v21 = 2112;
        id v22 = v15;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, " ==> Fallback %@, has incorrect service: %@", (uint8_t *)&v19, 0x16u);
      }
      goto LABEL_35;
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v12 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
    {
      int v19 = 138412290;
      id v20 = v4;
      _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, " ==> ERROR sanity check failed: ChatRegistry returned chat that did not match inputs: %@", (uint8_t *)&v19, 0xCu);
    }
    goto LABEL_35;
  }
LABEL_31:
}

id sub_1D979DC50()
{
  id v0 = IMChatCanonicalIDSIDsForAddress();
  uint64_t v1 = [v0 _stripFZIDPrefix];

  return v1;
}

void sub_1D979E250(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D979DEF4);
  }
  _Unwind_Resume(a1);
}

void sub_1D979F304(uint64_t a1, void *a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    char v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Reporting message: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  IDSReportiMessageSpam();
}

void sub_1D979F658(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v15 = a2;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v5 = a3;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v26 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v17;
    *(void *)&long long v7 = 138412802;
    long long v14 = v7;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v5);
        }
        uint64_t v10 = *(void *)(*((void *)&v16 + 1) + 8 * i);
        int v11 = objc_msgSend(*(id *)(a1 + 32), "reportSpamMessage:", v10, v14);
        if (IMOSLoggingEnabled())
        {
          id v12 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = v14;
            uint64_t v13 = @"NO";
            if (v11) {
              uint64_t v13 = @"YES";
            }
            __int16 v21 = v13;
            __int16 v22 = 2112;
            uint64_t v23 = v10;
            __int16 v24 = 2112;
            id v25 = v15;
            _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Was message successfully reported - %@. Dictionary Reported - %@. Receiver URI - %@", buf, 0x20u);
          }
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v16 objects:v26 count:16];
    }
    while (v6);
  }
}

void sub_1D979FB64(uint64_t a1, void *a2)
{
  id v5 = a2;
  if ([v5 count])
  {
    BOOL v3 = [v5 firstObject];
    id v4 = [v3 date];
    objc_msgSend(*(id *)(a1 + 32), "setLastMessageTimeStampOnLoad:", objc_msgSend(v4, "__im_nanosecondTimeInterval"));
  }
}

id sub_1D979FCC8(uint64_t a1, void *a2)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = *(void **)(*(void *)(a1 + 32) + 32);
  id v5 = [v3 guid];
  uint64_t v6 = [v4 objectForKey:v5];

  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    uint64_t v8 = v6;
    if (v7)
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = [v3 guid];
        int v15 = 138412290;
        long long v16 = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Adding cache missed chat but existing chat found with GUID %@, preferring existing chat", (uint8_t *)&v15, 0xCu);
      }
      uint64_t v8 = v6;
    }
  }
  else
  {
    if (v7)
    {
      int v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        id v12 = [v3 guid];
        int v15 = 138412290;
        long long v16 = v12;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Adding cache missed chat, no existing chat found with GUID %@", (uint8_t *)&v15, 0xCu);
      }
    }
    [*(id *)(a1 + 32) addChat:v3 firstLoad:0 store:0];
    uint64_t v8 = v3;
  }
  id v13 = v8;

  return v13;
}

void sub_1D979FE90(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D979FE20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D97A03D4(uint64_t a1, void *a2)
{
  return [a2 ID];
}

uint64_t sub_1D97A1954(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "compareBySequenceNumberAndDateDescending:");
}

void sub_1D97A2098(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 40) && !*(unsigned char *)(v2 + 42))
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Setting up observer for loaded notification...", buf, 2u);
      }
    }
    *(void *)long long buf = 0;
    long long v14 = buf;
    uint64_t v15 = 0x3032000000;
    long long v16 = sub_1D979CD74;
    uint64_t v17 = sub_1D979CD84;
    id v18 = 0;
    id v5 = [MEMORY[0x1E4F28EB8] defaultCenter];
    uint64_t v6 = [MEMORY[0x1E4F28F08] mainQueue];
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 3221225472;
    v10[2] = sub_1D97A228C;
    void v10[3] = &unk_1E6B76338;
    int v7 = *(void **)(a1 + 40);
    void v10[4] = *(void *)(a1 + 32);
    id v12 = buf;
    id v11 = v7;
    uint64_t v8 = [v5 addObserverForName:@"__kIMDChatsLoadedNotification" object:0 queue:v6 usingBlock:v10];
    uint64_t v9 = (void *)*((void *)v14 + 5);
    *((void *)v14 + 5) = v8;

    _Block_object_dispose(buf, 8);
  }
  else
  {
    id v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
    v3();
  }
}

void sub_1D97A228C(void *a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Notified that chats were loaded", buf, 2u);
    }
  }
  int v5 = *(unsigned __int8 *)(a1[4] + 42);
  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      int v7 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Chats are done loading! Calling completionHandler", v11, 2u);
      }
    }
    uint64_t v8 = [MEMORY[0x1E4F28EB8] defaultCenter];
    [v8 removeObserver:*(void *)(*(void *)(a1[6] + 8) + 40)];

    (*(void (**)(void))(a1[5] + 16))();
  }
  else if (v6)
  {
    uint64_t v9 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Chats aren't done loading, this is likely because of first unlock. Continuing to wait", v10, 2u);
    }
  }
}

void sub_1D97A3814(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    id v5 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)(v4 - 96) = 138412290;
        *(void *)(v3 + 4) = v5;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Unable to add IMDHandle to _idToHandlesMap due to exception %@ -- nilling idToHandlesMap", (uint8_t *)(v4 - 96), 0xCu);
      }
    }
    [*(id *)(v2 + 56) removeAllObjects];

    objc_end_catch();
    JUMPOUT(0x1D97A37D8);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D97A40F0(uint64_t a1, int a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = @"NO";
      if (a2) {
        int v6 = @"YES";
      }
      int v7 = 138412546;
      uint64_t v8 = v6;
      __int16 v9 = 2112;
      id v10 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Done fetching latest salt after unlock, fetched %@ error %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1D97A4384()
{
  v22[1] = *MEMORY[0x1E4F143B8];
  uint64_t v15 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  if ([v15 isUnderFirstDataProtectionLock])
  {
  }
  else
  {
    char v0 = IMGetDomainBoolForKey();

    if ((v0 & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v1 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "Making all attachments class C", buf, 2u);
        }
      }
      uint64_t v2 = [MEMORY[0x1E4F28CB8] defaultManager];
      uint64_t v3 = [v2 enumeratorAtPath:@"/var/mobile/Library/SMS/Attachments"];

      id v4 = [v3 nextObject];
      if (v4)
      {
        uint64_t v5 = *MEMORY[0x1E4F28370];
        uint64_t v6 = *MEMORY[0x1E4F28358];
        do
        {
          int v7 = (void *)MEMORY[0x1E016A370]();
          uint64_t v8 = [MEMORY[0x1E4F28CB8] defaultManager];
          uint64_t v21 = v5;
          v22[0] = v6;
          __int16 v9 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v22 forKeys:&v21 count:1];
          id v10 = [@"/var/mobile/Library/SMS/Attachments" stringByAppendingPathComponent:v4];
          id v16 = 0;
          char v11 = [v8 setAttributes:v9 ofItemAtPath:v10 error:&v16];
          id v12 = v16;

          if ((v11 & 1) == 0 && IMOSLoggingEnabled())
          {
            id v13 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              id v18 = v4;
              __int16 v19 = 2112;
              id v20 = v12;
              _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }
          }
          uint64_t v14 = [v3 nextObject];

          id v4 = (void *)v14;
        }
        while (v14);
      }
      IMSetDomainBoolForKey();
    }
  }
}

uint64_t sub_1D97A5160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _compareDuplicateChatsWithFirstChat:a2 secondChat:a3];
}

void sub_1D97A676C(uint64_t a1, void *a2, unsigned char *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  if ((unint64_t)[*(id *)(a1 + 32) count] < *(void *)(a1 + 40))
  {
    uint64_t v6 = [v5 _ckUniqueID];
    if (v6)
    {
      int v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v6];
      if (v7)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v8 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
          {
            int v18 = 138412290;
            __int16 v19 = v6;
            _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "We already have a chat to upload for groupID: %@ so we need to compare last message time's", (uint8_t *)&v18, 0xCu);
          }
        }
        int v9 = [v5 isOlderThan:v7];
        int v10 = IMOSLoggingEnabled();
        if (v9)
        {
          if (v10)
          {
            char v11 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              id v12 = [v7 guid];
              id v13 = [v5 guid];
              int v18 = 138412546;
              __int16 v19 = v12;
              __int16 v20 = 2112;
              id v21 = v13;
              _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "The current chat we have stored has a last message that is later than it's sibling so we don't want to write it to CloudKit and want to replace it with it's sibling. Current GUID: %@ Sibling GUID: %@", (uint8_t *)&v18, 0x16u);
            }
          }
          [v5 updateCloudKitSyncState:1];
          goto LABEL_25;
        }
        if (v10)
        {
          uint64_t v15 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            id v16 = [v7 guid];
            uint64_t v17 = [v5 guid];
            int v18 = 138412546;
            __int16 v19 = v16;
            __int16 v20 = 2112;
            id v21 = v17;
            _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "We are going to replace the current chat: %@ with: %@ so we should mark it as modified so we don't modify it twice", (uint8_t *)&v18, 0x16u);
          }
        }
        [v7 updateCloudKitSyncState:1];
      }
      [*(id *)(a1 + 32) setObject:v5 forKeyedSubscript:v6];
    }
    else
    {
      if (!IMOSLoggingEnabled())
      {
LABEL_26:

        goto LABEL_27;
      }
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = NSStringFromSelector(*(SEL *)(a1 + 48));
        int v18 = 138412546;
        __int16 v19 = v14;
        __int16 v20 = 2112;
        id v21 = v5;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "%@: Chat's _ckUniqueID is nil: %@", (uint8_t *)&v18, 0x16u);
      }
    }
LABEL_25:

    goto LABEL_26;
  }
  *a3 = 1;
LABEL_27:
}

void sub_1D97A8410(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Marking existing chat %@ as needing sync from deferred state ", (uint8_t *)&v4, 0xCu);
    }
  }
  [v2 updateCloudKitSyncState:0];
}

void sub_1D97A9664(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412546;
      id v7 = v4;
      __int16 v8 = 2048;
      uint64_t v9 = a3;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Found GUID for attachment part, associating with attachment: %@ at part id %lu", (uint8_t *)&v6, 0x16u);
    }
  }
  IMDMessageRecordAssociateMessageWithGUIDToAttachmentWithGUID();
}

uint64_t sub_1D97AAFE4()
{
  uint64_t result = IMSharedHelperContactsBasedMergingEnabled();
  byte_1EBE2C181 = result;
  return result;
}

void sub_1D97AC7AC(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = [v4 count];
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      __int16 v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Computed chats to merge. Broadcasting to clients", buf, 2u);
      }
    }
    uint64_t v9 = +[IMDBroadcastController sharedProvider];
    uint64_t v10 = [v9 broadcasterForChatListeners];
    [v10 chatsNeedRemerging:v4 groupedChats:v5];
  }
  else
  {
    if (!v7) {
      goto LABEL_8;
    }
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)char v11 = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "No chats to merge/un-merge. NOT Broadcasting to clients", v11, 2u);
    }
  }

LABEL_8:
}

void sub_1D97AC99C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 objectForKey:@"aliasMap"];
  id v5 = [v3 objectForKey:@"historyToken"];

  [*(id *)(a1 + 32) setHistoryToken:v5];
  uint64_t v6 = *(void **)(a1 + 32);
  id v10 = 0;
  id v11 = 0;
  [v6 _chatGUIDsThatNeedRemerging:&v11 chatDictionaryArray:&v10 aliasMap:v4];
  id v7 = v11;
  id v8 = v10;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9) {
    (*(void (**)(uint64_t, id, id))(v9 + 16))(v9, v7, v8);
  }
}

uint64_t sub_1D97AD200(uint64_t a1, void *a2)
{
  return [a2 ID];
}

void sub_1D97ADB78(uint64_t a1, void *a2)
{
  uint64_t v52 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  uint64_t v23 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", objc_msgSend(v2, "count"));
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id obj = v2;
  uint64_t v35 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
  if (v35)
  {
    uint64_t v34 = *(void *)v45;
    uint64_t v33 = *MEMORY[0x1E4F6CD38];
    uint64_t v32 = *MEMORY[0x1E4F6CCF0];
    uint64_t v31 = *MEMORY[0x1E4F6CE40];
    uint64_t v30 = *MEMORY[0x1E4F6CD40];
    uint64_t v29 = *MEMORY[0x1E4F6CDE0];
    uint64_t v28 = *MEMORY[0x1E4F6CCD8];
    uint64_t v27 = *MEMORY[0x1E4F6CE48];
    uint64_t v26 = *MEMORY[0x1E4F6CD98];
    uint64_t v25 = *MEMORY[0x1E4F6CDA0];
    uint64_t v24 = *MEMORY[0x1E4F6CE08];
    do
    {
      for (uint64_t i = 0; i != v35; ++i)
      {
        if (*(void *)v45 != v34) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        id v5 = [v4 objectForKeyedSubscript:v33];
        __int16 v36 = [v4 objectForKeyedSubscript:v32];
        uint64_t v38 = [v4 objectForKeyedSubscript:v31];
        int v37 = [v4 objectForKeyedSubscript:v30];
        uint64_t v6 = [v4 objectForKeyedSubscript:v29];
        id v7 = [v4 objectForKeyedSubscript:v28];
        id v8 = [v4 objectForKeyedSubscript:v27];
        unsigned __int8 v9 = [v8 integerValue];

        id v10 = [v4 objectForKeyedSubscript:v26];
        id v11 = [v4 objectForKeyedSubscript:v25];
        id v12 = [v4 objectForKeyedSubscript:v24];
        if (v5)
        {
          [v23 addObject:v5];
          id v13 = [*(id *)(a1 + 32) _bestServiceSessionForService:v38 accountID:v7];
          [v13 didDeleteChatGUID:v5 chatIdentifier:v36 style:v9 groupID:v37 originalGroupID:v6 properties:v12 lastAddressedLocalHandle:v10 lastAddressedSIMID:v11];
          uint64_t v14 = [*(id *)(a1 + 32) _cachedChatWithGUID:v5];
          if (v14) {
            [*(id *)(a1 + 32) _evictCachedChat:v14];
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v15 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412290;
              uint64_t v50 = v4;
              _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Received incomplete deleted chat fragment %@ - skipping", buf, 0xCu);
            }
          }
          id v13 = [MEMORY[0x1E4F6E890] sharedInstance];
          [v13 forceAutoBugCaptureWithSubType:@"ChatDeletion" errorPayload:0 type:@"Functional" context:@"Received incomplete deleted chat fragment"];
        }
      }
      uint64_t v35 = [obj countByEnumeratingWithState:&v44 objects:v51 count:16];
    }
    while (v35);
  }

  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id v16 = v23;
  uint64_t v17 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
  if (v17)
  {
    uint64_t v18 = *(void *)v41;
    do
    {
      for (uint64_t j = 0; j != v17; ++j)
      {
        if (*(void *)v41 != v18) {
          objc_enumerationMutation(v16);
        }
        __int16 v20 = [*(id *)(a1 + 32) _cachedChatWithGUID:*(void *)(*((void *)&v40 + 1) + 8 * j)];
        if (v20) {
          [*(id *)(a1 + 32) _evictCachedChat:v20];
        }
      }
      uint64_t v17 = [v16 countByEnumeratingWithState:&v40 objects:v48 count:16];
    }
    while (v17);
  }

  uint64_t v21 = *(void *)(a1 + 40);
  if (v21) {
    (*(void (**)(uint64_t, id))(v21 + 16))(v21, v16);
  }
}

uint64_t sub_1D97AE514()
{
  qword_1EBE2C190 = objc_alloc_init(IMDBackgroundMessagingAPIListener);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97AE640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = *MEMORY[0x1E4F6D608];
  id v6 = a5;
  id v10 = [v6 objectForKeyedSubscript:v5];
  id v7 = [v6 objectForKeyedSubscript:*MEMORY[0x1E4F6D610]];

  uint64_t v8 = [v7 BOOLValue];
  unsigned __int8 v9 = +[IMDBackgroundMessagingAPIListener sharedListener];
  [v9 handleSMSSendResult:v10 sent:v8];
}

void sub_1D97AEAD8(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = objc_msgSend(*(id *)(*(void *)(a1 + 32) + 24), "allValues", 0);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v8;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v8 != v5) {
          objc_enumerationMutation(v2);
        }
        [*(id *)(*((void *)&v7 + 1) + 8 * v6++) handleSMSSendResult:*(void *)(a1 + 40) sent:*(unsigned __int8 *)(a1 + 48)];
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
    }
    while (v4);
  }
}

uint64_t sub_1D97AF3A0()
{
  qword_1EBE2B9C0 = objc_alloc_init(IMDCKDatabaseManager);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97AFCB0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D97AFD14(void *a1)
{
  id v2 = (void *)[objc_alloc(MEMORY[0x1E4F28DB0]) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v2];
  [v2 finishEncoding];
  uint64_t v3 = [v2 encodedData];
  uint64_t v4 = [v3 copy];

  return v4;
}

void *sub_1D97B0B90()
{
  uint64_t result = (void *)MEMORY[0x1E0169C40]("PLLogRegisteredEvent", @"PowerLog");
  off_1EBE2BBC8 = result;
  return result;
}

void sub_1D97B1B2C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97B1A8CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D97B1B60(uint64_t a1)
{
  if ([*(id *)(a1 + 32) isMemberOfClass:objc_opt_class()]) {
    [*(id *)(a1 + 40) _handleFetchZoneChangesOperation:*(void *)(a1 + 32)];
  }
  uint64_t result = [*(id *)(a1 + 32) isMemberOfClass:objc_opt_class()];
  if (result)
  {
    uint64_t v3 = *(void *)(a1 + 40);
    return MEMORY[0x1F4181798](v3, sel__handleModifyRecordsOperation_);
  }
  return result;
}

uint64_t sub_1D97B27B0()
{
  qword_1EBE2B9C8 = objc_alloc_init(IMDCKRampManager);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97B2CDC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    long long v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v20 = v5;
      __int16 v21 = 2112;
      id v22 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Fetch operation records %@ fetchError %@", buf, 0x16u);
    }
  }
  if (!v6)
  {
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1D97B2F00;
    v16[3] = &unk_1E6B73A60;
    id v10 = v5;
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v12 = *(void **)(a1 + 40);
    v17[0] = v10;
    v17[1] = v11;
    id v18 = v12;
    dispatch_async(MEMORY[0x1E4F14428], v16);

    long long v9 = (id *)v17;
    goto LABEL_9;
  }
  long long v8 = [MEMORY[0x1E4F6E890] sharedInstance];
  [v8 autoBugCaptureWithSubType:@"FetchRampState" errorPayload:v6];

  if (*(void *)(a1 + 40))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97B310C;
    block[3] = &unk_1E6B73A10;
    id v15 = *(id *)(a1 + 40);
    id v14 = v6;
    dispatch_async(MEMORY[0x1E4F14428], block);

    long long v9 = &v15;
LABEL_9:
  }
}

void sub_1D97B2F00(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) _rampUpRecordID];
  uint64_t v4 = [v2 objectForKey:v3];

  if (v4)
  {
    id v5 = [v4 objectForKey:@"FeaturePromoted"];
    uint64_t v6 = [v5 BOOLValue];

    long long v7 = [v4 objectForKey:@"RetryAfter"];
    uint64_t v8 = [v7 integerValue];

    if (IMOSLoggingEnabled())
    {
      long long v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = @"NO";
        if (v6) {
          id v10 = @"YES";
        }
        int v13 = 138412546;
        id v14 = v10;
        __int16 v15 = 2048;
        uint64_t v16 = v8;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Fetch ramp state - featurePromoted: %@ retryAfter: %ld", (uint8_t *)&v13, 0x16u);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Couldn't find CKRecord for ramp. Defaulting to not ramped in", (uint8_t *)&v13, 2u);
      }
    }
    uint64_t v6 = 0;
    uint64_t v8 = 3600;
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v12 + 16))(v12, v6, v8, 0);
  }
}

uint64_t sub_1D97B310C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, uint64_t, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 3600, *(void *)(a1 + 32));
}

void sub_1D97B35F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "retry timer fired", buf, 2u);
    }
  }
  id v5 = *(id *)(a1 + 40);
  im_dispatch_after();
}

uint64_t sub_1D97B3704(uint64_t a1)
{
  return [*(id *)(a1 + 32) fetchLatestRampStateFromCK:*(void *)(a1 + 40)];
}

uint64_t sub_1D97B3908(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, 0);
  }
  return result;
}

void sub_1D97B3928(uint64_t a1, int a2, int a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  if (!a2 || (a3 & 1) != 0)
  {
    uint64_t v8 = [*(id *)(a1 + 32) retryTimer];
    int v9 = [v8 isValid];

    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          uint64_t v12 = [*(id *)(a1 + 32) retryTimer];
          int v13 = [v12 fireDate];
          *(_DWORD *)long long buf = 138412290;
          id v22 = v13;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Not fetching from server, next one is firing at %@", buf, 0xCu);
        }
      }
      if (*(void *)(a1 + 40))
      {
        if (IMOSLoggingEnabled())
        {
          id v14 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", buf, 2u);
          }
        }
        goto LABEL_12;
      }
    }
    else
    {
      if (v10)
      {
        __int16 v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          uint64_t v16 = @"NO";
          if (a2) {
            uint64_t v17 = @"YES";
          }
          else {
            uint64_t v17 = @"NO";
          }
          if (a3) {
            uint64_t v16 = @"YES";
          }
          *(_DWORD *)long long buf = 138412546;
          id v22 = v17;
          __int16 v23 = 2112;
          uint64_t v24 = v16;
          _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Cached values: featurePromoted(%@) is not YES, or we had a server error last time(%@) so fetching from server", buf, 0x16u);
        }
      }
      id v18 = [*(id *)(a1 + 32) ckQueue];
      v19[0] = MEMORY[0x1E4F143A8];
      v19[1] = 3221225472;
      v19[2] = sub_1D97B3D00;
      v19[3] = &unk_1E6B73AB0;
      void v19[4] = *(void *)(a1 + 32);
      id v20 = *(id *)(a1 + 40);
      dispatch_async(v18, v19);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Cached featureAllowed is true, and there wasn't an error fetching state from the server last time. Not fetching again", buf, 2u);
      }
    }
    if (*(void *)(a1 + 40))
    {
      if (IMOSLoggingEnabled())
      {
        long long v7 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", buf, 2u);
        }
      }
LABEL_12:
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
}

void sub_1D97B3D00(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 3221225472;
  v2[2] = sub_1D97B3D90;
  v2[3] = &unk_1E6B76610;
  v2[4] = v1;
  id v3 = *(id *)(a1 + 40);
  [v1 _fetchLatestRampStateFromCK:v2];
}

void sub_1D97B3D90(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  id v7 = a4;
  uint64_t v8 = v7;
  if (!v7)
  {
    if (IMOSLoggingEnabled())
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Fetched ramp record", buf, 2u);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97B3FFC;
    block[3] = &unk_1E6B75F50;
    __int16 v15 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    char v24 = a2;
    id v23 = v15;
    dispatch_async(MEMORY[0x1E4F14428], block);
    uint64_t v16 = v23;
    goto LABEL_27;
  }
  int v9 = [v7 domain];
  int v10 = [v9 isEqualToString:*MEMORY[0x1E4F19C40]];

  if (v10 && ([v8 code] == 7 || objc_msgSend(v8, "code") == 23))
  {
    uint64_t v11 = [v8 userInfo];
    uint64_t v12 = [v11 objectForKey:*MEMORY[0x1E4F19C60]];

    if (v12) {
      uint64_t v13 = [v12 integerValue];
    }
    else {
      uint64_t v13 = 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  if (v13) {
    BOOL v17 = 1;
  }
  else {
    BOOL v17 = a3 <= 0;
  }
  if (v17) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = a3;
  }
  if (v18) {
    uint64_t v19 = v18;
  }
  else {
    uint64_t v19 = 3600;
  }
  [*(id *)(a1 + 32) _persistRampFetchServerError:1];
  if (v19 < 1)
  {
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 3221225472;
    v20[2] = sub_1D97B40C0;
    v20[3] = &unk_1E6B731C8;
    id v21 = *(id *)(a1 + 40);
    dispatch_async(MEMORY[0x1E4F14428], v20);
    uint64_t v16 = v21;
LABEL_27:

    goto LABEL_28;
  }
  [*(id *)(a1 + 32) _performRampCheckWithRetryAfter:*(void *)(a1 + 40) recordFetchedCompletionBlock:(double)v19];
LABEL_28:
}

uint64_t sub_1D97B3FFC(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _writeRampStatePromoted:*(unsigned __int8 *)(a1 + 48) hadServerError:0];
  if (*(void *)(a1 + 40))
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v4 = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "calling recordFetchedCompletionBlock", v4, 2u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  return result;
}

uint64_t sub_1D97B40C0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, uint64_t))(result + 16))(result, 0, 1);
  }
  return result;
}

uint64_t sub_1D97B47B0()
{
  qword_1EBE2BE88 = objc_alloc_init(IMDDaemonPropertyManager);

  return MEMORY[0x1F41817F8]();
}

void IMDSetInconsistencyHandler(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Setting inconsistency handler", buf, 2u);
    }
  }
  if (qword_1EBE2BBF0 != -1) {
    dispatch_once(&qword_1EBE2BBF0, &unk_1F33917E0);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D97B4FAC;
  block[3] = &unk_1E6B76660;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1EBE2BBD8, block);
}

void *sub_1D97B4FAC(uint64_t a1)
{
  if (qword_1EBE2BBE0) {
    _Block_release((const void *)qword_1EBE2BBE0);
  }
  uint64_t result = *(void **)(a1 + 32);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  qword_1EBE2BBE0 = (uint64_t)result;
  return result;
}

void IMDNoticedInconsistency(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  if (qword_1EBE2BBF0 != -1) {
    dispatch_once(&qword_1EBE2BBF0, &unk_1F33917E0);
  }
  void v14[5] = &a9;
  uint64_t v11 = (void *)[[NSString alloc] initWithFormat:a2 arguments:&a9];
  uint64_t v12 = [MEMORY[0x1E4F6C3B8] registration];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
    sub_1D9903374((uint64_t)v11, v12);
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v11;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "%@", buf, 0xCu);
    }
  }

  IMLogBacktrace();
  v14[0] = MEMORY[0x1E4F143A8];
  v14[1] = 3221225472;
  v14[2] = sub_1D97B5194;
  void v14[3] = &unk_1E6B73178;
  void v14[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1EBE2BBD8, v14);
}

void sub_1D97B5194(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v2 = sub_1D97B52D0(*(void *)(a1 + 32), 1);
  objc_msgSend(v2, "setCount:", objc_msgSend(v2, "count") + 1);
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      int v5 = 138412546;
      uint64_t v6 = v4;
      __int16 v7 = 2048;
      uint64_t v8 = [v2 count];
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Noticed inconsistency at context %@ (count = %llu)", (uint8_t *)&v5, 0x16u);
    }
  }
}

id sub_1D97B52D0(uint64_t a1, int a2)
{
  uint64_t v9 = 0;
  int v10 = &v9;
  uint64_t v11 = 0x3052000000;
  uint64_t v12 = sub_1D97B58DC;
  uint64_t v13 = sub_1D97B58EC;
  uint64_t v14 = 0;
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D97B58F8;
  v8[3] = &unk_1E6B76688;
  void v8[4] = a1;
  v8[5] = &v9;
  [(id)qword_1EBE2BBE8 enumerateObjectsUsingBlock:v8];
  uint64_t v4 = (void *)v10[5];
  if (!v4 && a2)
  {
    int v5 = objc_alloc_init(IMDInconsistency);
    void v10[5] = (uint64_t)v5;
    [(IMDInconsistency *)v5 setContext:a1];
    [(id)qword_1EBE2BBE8 addObject:v10[5]];

    sub_1D97B55C0();
    uint64_t v4 = (void *)v10[5];
  }
  id v6 = v4;
  _Block_object_dispose(&v9, 8);
  return v6;
}

void sub_1D97B5408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void IMDInconsistencyResolved(uint64_t a1)
{
  if (qword_1EBE2BBF0 != -1) {
    dispatch_once(&qword_1EBE2BBF0, &unk_1F33917E0);
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D97B54C8;
  block[3] = &unk_1E6B73178;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)qword_1EBE2BBD8, block);
}

void sub_1D97B54C8(uint64_t a1)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  id v2 = sub_1D97B52D0(*(void *)(a1 + 32), 0);
  if (v2)
  {
    id v3 = v2;
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v6 = 138412290;
        uint64_t v7 = v5;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Resolving inconsistency at context %@", (uint8_t *)&v6, 0xCu);
      }
    }
    [(id)qword_1EBE2BBE8 removeObject:v3];
    sub_1D97B55C0();
  }
}

void sub_1D97B55C0()
{
  if (qword_1EA8CA560)
  {
LABEL_2:
    if (![(id)qword_1EBE2BBE8 count])
    {
      if (IMOSLoggingEnabled())
      {
        char v0 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)id v3 = 0;
          _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Disabling timer, all inconsistencies resolved", v3, 2u);
        }
      }
      dispatch_source_set_event_handler((dispatch_source_t)qword_1EA8CA560, 0);
      dispatch_release((dispatch_object_t)qword_1EA8CA560);
      qword_1EA8CA560 = 0;
    }
    return;
  }
  if (![(id)qword_1EBE2BBE8 count])
  {
    if (!qword_1EA8CA560) {
      return;
    }
    goto LABEL_2;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v1 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "Enabling timer, since we have inconsistencies we need to check up on", buf, 2u);
    }
  }
  qword_1EA8CA560 = (uint64_t)dispatch_source_create(MEMORY[0x1E4F14490], 0, 0, (dispatch_queue_t)qword_1EBE2BBD8);
  dispatch_time_t v2 = dispatch_time(0, 0xDF8476000);
  dispatch_source_set_timer((dispatch_source_t)qword_1EA8CA560, v2, 0xFFFFFFFFFFFFFFFFLL, 0x1BF08EC000uLL);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1EA8CA560, &unk_1F3391800);
  dispatch_resume((dispatch_object_t)qword_1EA8CA560);
}

void sub_1D97B5760()
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  qword_1EBE2BBD8 = (uint64_t)dispatch_queue_create(0, 0);
  qword_1EBE2BBE8 = (uint64_t)(id)[MEMORY[0x1E4F1CA48] array];
  char v0 = (void *)CFPreferencesCopyValue(@"LastJettisonTimeInterval", @"com.apple.imagent", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
  if (v0)
  {
    uint64_t v1 = v0;
    dispatch_time_t v2 = (void *)MEMORY[0x1E4F1C9C8];
    [v0 doubleValue];
    qword_1EA8CA558 = (uint64_t)(id)objc_msgSend(v2, "dateWithTimeIntervalSinceReferenceDate:");
  }
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      uint64_t v5 = qword_1EA8CA558;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Finished initialization, last jettison was %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D97B58DC(uint64_t a1, uint64_t a2)
{
}

void sub_1D97B58EC(uint64_t a1)
{
}

uint64_t sub_1D97B58F8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  uint64_t result = [a2 context];
  if (result == *(void *)(a1 + 32))
  {
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = a2;
    *a4 = 1;
  }
  return result;
}

void sub_1D97B5950()
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  dispatch_source_set_event_handler((dispatch_source_t)qword_1EA8CA560, 0);
  dispatch_release((dispatch_object_t)qword_1EA8CA560);
  qword_1EA8CA560 = 0;
  if (IMOSLoggingEnabled())
  {
    char v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11[0]) = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Checking our inconsistencies to see if it's time to jettison state", (uint8_t *)v11, 2u);
    }
  }
  uint64_t v30 = 0;
  uint64_t v31 = &v30;
  uint64_t v32 = 0x2020000000;
  char v33 = 0;
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3052000000;
  uint64_t v27 = sub_1D97B58DC;
  uint64_t v28 = sub_1D97B58EC;
  uint64_t v29 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = &v18;
  uint64_t v20 = 0x3052000000;
  id v21 = sub_1D97B58DC;
  id v22 = sub_1D97B58EC;
  uint64_t v23 = 0;
  uint64_t v23 = [MEMORY[0x1E4F1CA48] array];
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x3052000000;
  __int16 v15 = sub_1D97B58DC;
  uint64_t v16 = sub_1D97B58EC;
  uint64_t v17 = 0;
  uint64_t v17 = [MEMORY[0x1E4F1CA48] array];
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  void v11[2] = sub_1D97B5E5C;
  v11[3] = &unk_1E6B766B0;
  void v11[4] = &v12;
  void v11[5] = &v24;
  v11[6] = &v30;
  v11[7] = &v18;
  [(id)qword_1EBE2BBE8 enumerateObjectsUsingBlock:v11];
  if (*((unsigned char *)v31 + 24))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v1 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
      {
        uint64_t v2 = v25[5];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v35 = v2;
        _os_log_impl(&dword_1D967A000, v1, OS_LOG_TYPE_INFO, "Too many inconsistencies found in imagent, jettisoning state and starting over (reason: %@)", buf, 0xCu);
      }
    }

    qword_1EBE2BBE8 = (uint64_t)(id)[MEMORY[0x1E4F1CA48] array];
    sub_1D97B55C0();
    if (qword_1EBE2BBE0)
    {

      qword_1EA8CA558 = (uint64_t)(id)[MEMORY[0x1E4F1C9C8] date];
      id v3 = NSNumber;
      [(id)qword_1EA8CA558 timeIntervalSinceReferenceDate];
      int v4 = (const void *)objc_msgSend(v3, "numberWithDouble:");
      CFStringRef v5 = (const __CFString *)*MEMORY[0x1E4F1D3F0];
      CFStringRef v6 = (const __CFString *)*MEMORY[0x1E4F1D3E0];
      CFPreferencesSetValue(@"LastJettisonTimeInterval", v4, @"com.apple.imagent", (CFStringRef)*MEMORY[0x1E4F1D3F0], (CFStringRef)*MEMORY[0x1E4F1D3E0]);
      CFPreferencesSynchronize(@"com.apple.imagent", v5, v6);
      dispatch_async(MEMORY[0x1E4F14428], (dispatch_block_t)qword_1EBE2BBE0);
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = v19[5];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v35 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Inconsistencies aren't bad enough to merit a jettison (reasons: %@)", buf, 0xCu);
      }
    }
    if ([(id)v13[5] count])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          uint64_t v10 = v13[5];
          *(_DWORD *)long long buf = 138412290;
          uint64_t v35 = v10;
          _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Removing expired inconsistencies: %@", buf, 0xCu);
        }
      }
      [(id)qword_1EBE2BBE8 removeObjectsInArray:v13[5]];
    }
    sub_1D97B55C0();
  }
  _Block_object_dispose(&v12, 8);
  _Block_object_dispose(&v18, 8);
  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v30, 8);
}

uint64_t sub_1D97B5E5C(void *a1, void *a2, uint64_t a3, unsigned char *a4)
{
  if (![a2 context])
  {
    uint64_t v8 = *(void **)(*(void *)(a1[4] + 8) + 40);
    uint64_t v9 = a2;
LABEL_7:
    return [v8 addObject:v9];
  }
  uint64_t result = [a2 shouldJettison:*(void *)(a1[5] + 8) + 40];
  if (result)
  {
    *(unsigned char *)(*(void *)(a1[6] + 8) + 24) = 1;
    *a4 = 1;
    return result;
  }
  uint64_t v9 = *(void **)(*(void *)(a1[5] + 8) + 40);
  if (v9)
  {
    uint64_t v8 = *(void **)(*(void *)(a1[7] + 8) + 40);
    goto LABEL_7;
  }
  return result;
}

id IMFileTransferFromIMDAttachmentRecordRef(void *a1)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    CFStringRef v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    CFStringRef v6 = "Unable to create IMFileTransfer from NULL IMDAttachmentRecordRef.";
    goto LABEL_14;
  }
  id v28 = 0;
  id v29 = 0;
  id v26 = 0;
  id v27 = 0;
  id v24 = 0;
  id v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = 0;
  char v20 = 0;
  uint64_t v19 = 0;
  char v18 = 0;
  id v17 = 0;
  id v16 = 0;
  char v15 = 0;
  id v13 = 0;
  uint64_t v14 = 0;
  id v11 = 0;
  id v12 = 0;
  id v9 = 0;
  uint64_t v10 = 0;
  id v8 = 0;
  uint64_t v2 = [a1 previewGenerationState];
  _IMDAttachmentRecordBulkCopy();
  if (!objc_msgSend(v29, "length", &v21, &v20, &v19, &v24, &v18, &v17, &v16, &v15, &v14, &v13, &v12, &v11, &v10, &v9, &v8))
  {

    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    CFStringRef v5 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    CFStringRef v6 = "This transfer doesn't have a guid, returning nil.";
LABEL_14:
    _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, v6, buf, 2u);
    return 0;
  }
  id v3 = objc_alloc_init(MEMORY[0x1E4F6E780]);
  [v3 setGuid:v29];
  [v3 _setLocalPath:v27];
  [v3 setType:v26];
  objc_msgSend(v3, "setCreatedDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", (double)v23));
  objc_msgSend(v3, "_setStartDate:", objc_msgSend(MEMORY[0x1E4F1C9C8], "dateWithTimeIntervalSinceReferenceDate:", (double)v22));
  [v3 _setTransferState:v21];
  [v3 setPreviewGenerationState:v2];
  [v3 setIsIncoming:v20 == 0];
  [v3 setUserInfo:v24];
  [v3 setTotalBytes:v19];
  if ([v28 length]) {
    [v3 setFilename:v28];
  }
  [v3 setIsSticker:v18 != 0];
  [v3 setStickerUserInfo:v17];
  [v3 setAttributionInfo:v16];
  [v3 setHideAttachment:v15 != 0];
  [v3 setCloudKitSyncState:v14];
  [v3 setCloudKitServerChangeTokenBlob:v13];
  [v3 setCloudKitRecordID:v12];
  [v3 setOriginalGUID:v11];
  [v3 setCommSafetySensitive:v10];
  [v3 setAdaptiveImageGlyphContentIdentifier:v9];
  [v3 setAdaptiveImageGlyphContentDescription:v8];

  if (IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v31 = v3;
      __int16 v32 = 2112;
      char v33 = a1;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Created: %@ from attachment record: %@", buf, 0x16u);
    }
  }
  return v3;
}

void sub_1D97B635C(_Unwind_Exception *exception_object, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exception_object);
    objc_end_catch();
    JUMPOUT(0x1D97B6320);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D97B63A4(void *exc_buf, int a2)
{
  if (a2 == 1)
  {
    id v4 = objc_begin_catch(exc_buf);
    if (IMOSLoggingEnabled())
    {
      CFStringRef v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)(v3 - 80) = 138412290;
        *(void *)(v3 - 76) = v4;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Exception raised while attempting to create IMFileTransfer: %@", (uint8_t *)(v3 - 80), 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x1D97B6180);
  }
  JUMPOUT(0x1D97B639CLL);
}

uint64_t IMDAttachmentRecordRefFromIMFileTransfer(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = *MEMORY[0x1E4F143B8];
  int v6 = IMOSLoggingEnabled();
  if (!a1)
  {
    if (!v6) {
      return 0;
    }
    id v9 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v10 = "Unable to create IMDAttachmentRecordRef from nil IMFileTransfer.";
    id v11 = v9;
    uint32_t v12 = 2;
LABEL_12:
    _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, v10, buf, v12);
    return 0;
  }
  if (v6)
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = [a1 localPath];
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = [a1 filename];
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Local path: %@, filename: %@", buf, 0x16u);
    }
  }
  if ([a1 isIncoming] && objc_msgSend(a1, "transferState") < 4)
  {
    BOOL v8 = 0;
    if (a3) {
      goto LABEL_15;
    }
LABEL_14:
    if (!v8) {
      goto LABEL_25;
    }
    goto LABEL_15;
  }
  BOOL v8 = [a1 transferState] != 0;
  if ((a3 & 1) == 0) {
    goto LABEL_14;
  }
LABEL_15:
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x3052000000;
  id v26 = sub_1D97B6C78;
  id v27 = sub_1D97B6C88;
  uint64_t v28 = 0;
  id v13 = (void *)[MEMORY[0x1E4F6BF78] sharedInstance];
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1D97B6C94;
  void v24[3] = &unk_1E6B766D8;
  void v24[4] = buf;
  [v13 saveAttachmentsForTransfer:a1 chatGUID:a2 storeAtExternalLocation:a3 completion:v24];
  if (*(void *)(*(void *)&buf[8] + 40)
    && (uint64_t v14 = (void *)[MEMORY[0x1E4F28CB8] defaultManager],
        [v14 fileExistsAtPath:*(void *)(*(void *)&buf[8] + 40)]))
  {
    if (!objc_msgSend((id)objc_msgSend(a1, "localPath"), "length")
      || (char v15 = (void *)[a1 localPath],
          ![v15 isEqualToString:*(void *)(*(void *)&buf[8] + 40)])
      || [a1 isSticker])
    {
      [a1 _setLocalPath:*(void *)(*(void *)&buf[8] + 40)];
      objc_msgSend(a1, "_setTransferState:", objc_msgSend(MEMORY[0x1E4F6E780], "finalTransferStateForThumbnailMode:success:", objc_msgSend(a1, "thumbnailMode"), 1));
      -[IMDFileTransferCenter updateTransfer:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "updateTransfer:", [a1 guid]);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Persisting transfer failed.", v23, 2u);
    }
  }
  _Block_object_dispose(buf, 8);
LABEL_25:
  if ([a1 isAuxVideo])
  {
    if (IMOSLoggingEnabled())
    {
      id v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = a1;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Not creating entry in DB for Aux video transfer %@", buf, 0xCu);
      }
    }
    if (![a1 isFinished]) {
      return 0;
    }
    id v18 = -[IMDFileTransferCenter transferForGUID:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "transferForGUID:", objc_msgSend(MEMORY[0x1E4F6E780], "guidByStrippingAuxPrefix:", objc_msgSend(a1, "guid")));
    if (objc_msgSend((id)objc_msgSend(v18, "createAndPersistLivePhotoBundleIfNecessary"), "length")) {
      return 0;
    }
    if (!IMOSLoggingEnabled()) {
      return 0;
    }
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO)) {
      return 0;
    }
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = a1;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v18;
    uint64_t v10 = " ** Error creating video complement for file transfer: %@ imageTransfer: %@";
    id v11 = v19;
    uint32_t v12 = 22;
    goto LABEL_12;
  }
  [a1 guid];
  objc_msgSend((id)objc_msgSend(a1, "createdDate"), "timeIntervalSinceReferenceDate");
  objc_msgSend((id)objc_msgSend(a1, "startDate"), "timeIntervalSinceReferenceDate");
  [a1 filename];
  [a1 localPath];
  [a1 type];
  [a1 mimeType];
  [a1 transferState];
  [a1 isIncoming];
  [a1 totalBytes];
  [a1 userInfo];
  [a1 isSticker];
  [a1 stickerUserInfo];
  [a1 attributionInfo];
  [a1 hideAttachment];
  [a1 cloudKitSyncState];
  [a1 cloudKitServerChangeTokenBlob];
  [a1 cloudKitRecordID];
  [a1 guid];
  [a1 commSafetySensitive];
  [a1 adaptiveImageGlyphContentIdentifier];
  [a1 adaptiveImageGlyphContentDescription];
  [a1 previewGenerationState];
  uint64_t v20 = IMDAttachmentRecordCreate();
  if (IMOSLoggingEnabled())
  {
    uint64_t v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = a1;
      _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Created: %@ from imfiletransfer: %@", buf, 0x16u);
    }
  }
  return v20;
}

void sub_1D97B6B10(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97B6518);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D97B6B30()
{
}

uint64_t _IMDShouldSaveAttachmentStoreAtExternalLocation(void *a1, void *a2, int a3)
{
  if (a2)
  {
    if ([a2 transferState] || objc_msgSend(a1, "transferState") != 5)
    {
      uint64_t v6 = 1;
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        CFStringRef v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "We are downgrading an attachment from finished to waiting accept --> so we've deleted the path on disk and should not store the attachment", v10, 2u);
        }
      }
      uint64_t v6 = 0;
    }
    if ([a2 isIncoming])
    {
      if ([a2 transferState] >= 4) {
        return v6;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    BOOL v8 = (![a1 isIncoming] || objc_msgSend(a1, "transferState") >= 4)
      && [a1 transferState] != 0;
    return a3 | v8;
  }
  return v6;
}

void sub_1D97B6C78(uint64_t a1, uint64_t a2)
{
}

void sub_1D97B6C88(uint64_t a1)
{
}

uint64_t sub_1D97B6C94(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

uint64_t IMDUpdateIMFileTransferFromIMFileTransfer(void *a1, const void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = a1;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = a3;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Updating %@ from %@", buf, 0x16u);
    }
  }
  uint64_t v11 = [a1 cloudKitSyncState];
  BOOL v12 = v11 != [a3 cloudKitSyncState];
  uint64_t v13 = [a1 transferState];
  if (v13 != [a3 transferState]) {
    BOOL v12 = 1;
  }
  objc_msgSend(a1, "setGuid:", objc_msgSend(a3, "guid"));
  objc_msgSend(a1, "setMessageGUID:", objc_msgSend(a3, "messageGUID"));
  objc_msgSend(a1, "setCreatedDate:", objc_msgSend(a3, "createdDate"));
  objc_msgSend(a1, "_setStartDate:", objc_msgSend(a3, "startDate"));
  objc_msgSend(a1, "setType:", objc_msgSend(a3, "type"));
  objc_msgSend(a1, "setFilename:", objc_msgSend(a3, "filename"));
  objc_msgSend(a1, "_setTransferState:", objc_msgSend(a3, "transferState"));
  objc_msgSend(a1, "setIsIncoming:", objc_msgSend(a3, "isIncoming"));
  objc_msgSend(a1, "setUserInfo:", objc_msgSend(a3, "userInfo"));
  objc_msgSend(a1, "setStickerUserInfo:", objc_msgSend(a3, "stickerUserInfo"));
  objc_msgSend(a1, "setAttributionInfo:", objc_msgSend(a3, "attributionInfo"));
  objc_msgSend(a1, "setIsSticker:", objc_msgSend(a3, "isSticker"));
  objc_msgSend(a1, "setAdaptiveImageGlyphContentIdentifier:", objc_msgSend(a3, "adaptiveImageGlyphContentIdentifier"));
  objc_msgSend(a1, "setAdaptiveImageGlyphContentDescription:", objc_msgSend(a3, "adaptiveImageGlyphContentDescription"));
  objc_msgSend(a1, "setHideAttachment:", objc_msgSend(a3, "hideAttachment"));
  objc_msgSend(a1, "setCloudKitSyncState:", objc_msgSend(a3, "cloudKitSyncState"));
  objc_msgSend(a1, "setCloudKitServerChangeTokenBlob:", objc_msgSend(a3, "cloudKitServerChangeTokenBlob"));
  objc_msgSend(a1, "setCloudKitRecordID:", objc_msgSend(a3, "cloudKitRecordID"));
  objc_msgSend(a1, "setOriginalGUID:", objc_msgSend(a3, "originalGUID"));
  objc_msgSend(a1, "setCommSafetySensitive:", objc_msgSend(a3, "commSafetySensitive"));
  objc_msgSend(a1, "setPreviewGenerationState:", objc_msgSend(a3, "previewGenerationState"));
  [a1 _migratePreviewGenerationState];
  if (_IMDShouldSaveAttachmentStoreAtExternalLocation(a1, a3, 0))
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3052000000;
    uint64_t v35 = sub_1D97B6C78;
    uint64_t v36 = sub_1D97B6C88;
    uint64_t v37 = 0;
    uint64_t v14 = (void *)[MEMORY[0x1E4F6BF78] sharedInstance];
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1D97B75FC;
    v29[3] = &unk_1E6B766D8;
    void v29[4] = buf;
    [v14 saveAttachmentsForTransfer:a3 chatGUID:a5 storeAtExternalLocation:a4 completion:v29];
    if (*(void *)(*(void *)&buf[8] + 40)
      && (char v15 = (void *)[MEMORY[0x1E4F28CB8] defaultManager],
          [v15 fileExistsAtPath:*(void *)(*(void *)&buf[8] + 40)]))
    {
      if (IMOSLoggingEnabled())
      {
        id v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          id v17 = *(void **)(*(void *)&buf[8] + 40);
          *(_DWORD *)uint64_t v30 = 138412290;
          id v31 = v17;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, " Storing transfer at path: %@", v30, 0xCu);
        }
      }
      [a1 _setLocalPath:*(void *)(*(void *)&buf[8] + 40)];
      [a3 _setLocalPath:*(void *)(*(void *)&buf[8] + 40)];
      uint64_t v18 = [a1 finalTransferStateForSuccess:1];
      [a1 _setTransferState:v18];
      [a3 _setTransferState:v18];
      -[IMDFileTransferCenter updateTransfer:](+[IMDFileTransferCenter sharedInstance](IMDFileTransferCenter, "sharedInstance"), "updateTransfer:", [a3 guid]);
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v30 = 0;
        _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Persisting transfer failed.", v30, 2u);
      }
    }
    if ([+[IMDCKCacheDeleteManager sharedInstance] isUsingCentralizeCacheDelete])
    {
      if (v12 && [a1 canMarkPurgeable])
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v21 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)uint64_t v30 = 138412290;
            id v31 = a1;
            _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, " File eligible for purging: %@", v30, 0xCu);
          }
        }
        if (*(void *)(*(void *)&buf[8] + 40))
        {
          uint64_t v22 = +[IMDAttachmentStore sharedInstance];
          [(IMDAttachmentStore *)v22 markAttachmentPurgeable:*(void *)(*(void *)&buf[8] + 40)];
        }
      }
      else if (IMOSLoggingEnabled())
      {
        uint64_t v23 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          id v24 = @"NO";
          if (v12) {
            id v24 = @"YES";
          }
          *(_DWORD *)uint64_t v30 = 138412546;
          id v31 = a1;
          __int16 v32 = 2112;
          char v33 = v24;
          _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, " File NOT eligible for purging: %@, updatedPurgeableState: %@", v30, 0x16u);
        }
      }
    }
    _Block_object_dispose(buf, 8);
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, " ** Not storing transfer", buf, 2u);
    }
  }
  CFTypeRef cf = a2;
  if (a2 || ([a1 guid], (CFTypeRef cf = (CFTypeRef)IMDAttachmentRecordCopyAttachmentForGUID()) != 0))
  {
    [a1 guid];
    objc_msgSend((id)objc_msgSend(a3, "createdDate"), "timeIntervalSinceReferenceDate");
    objc_msgSend((id)objc_msgSend(a1, "startDate"), "timeIntervalSinceReferenceDate");
    [a1 filename];
    [a1 localPath];
    [a1 type];
    [a1 mimeType];
    [a1 transferState];
    [a1 isIncoming];
    [a3 totalBytes];
    [a1 userInfo];
    [a1 isSticker];
    [a1 stickerUserInfo];
    [a1 attributionInfo];
    [a1 hideAttachment];
    [a1 cloudKitSyncState];
    [a1 cloudKitServerChangeTokenBlob];
    [a1 cloudKitRecordID];
    [a1 originalGUID];
    [a1 commSafetySensitive];
    [a1 adaptiveImageGlyphContentIdentifier];
    [a1 adaptiveImageGlyphContentDescription];
    [a1 previewGenerationState];
    IMDAttachmentRecordBulkUpdate();
    if (!a2) {
      CFRelease(cf);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v26 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = [a1 guid];
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v27;
      _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Unable to find an attachment record for guid: %@.", buf, 0xCu);
    }
  }
  return 1;
}

uint64_t _IMDShouldSaveAttachment(void *a1, void *a2)
{
  return _IMDShouldSaveAttachmentStoreAtExternalLocation(a1, a2, 0);
}

uint64_t sub_1D97B75FC(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 40) = a2;
  return result;
}

IMDAttachmentStore *sub_1D97B7650()
{
  uint64_t result = objc_alloc_init(IMDAttachmentStore);
  qword_1EBE2B9D0 = (uint64_t)result;
  return result;
}

void sub_1D97B847C(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = 0;
  id v4 = 0;
  uint64_t v1 = (void *)[MEMORY[0x1E4F1CB10] fileURLWithPath:*(void *)(a1 + 32)];
  [v1 getResourceValue:&v4 forKey:*MEMORY[0x1E4F1C8C8] error:&v3];
  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v6 = v3;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Error checking if filesystem supports case sensitivity: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    byte_1EBE2BFD0 = [v4 BOOLValue];
  }
}

uint64_t sub_1D97B8818()
{
  uint64_t result = MEMORY[0x1E0169C30](@"LSApplicationWorkspace", @"CoreServices");
  qword_1EA8CA568 = result;
  return result;
}

uint64_t sub_1D97B8848(uint64_t a1, void *a2)
{
  uint64_t result = [a2 response];
  if (!result)
  {
    id v4 = (void *)[NSString stringWithFormat:@"TTR:%@ Messages storage issue: %@", objc_msgSend((id)objc_msgSend(MEMORY[0x1E4F61740], "sharedInstance"), "productBuildVersion"), *(void *)(a1 + 32)];
    CFStringRef v5 = (void *)[NSString stringWithFormat:@"A Messages attachment was unexpectedly removed from purgable state %@.", *(void *)(a1 + 40)];
    uint64_t v6 = [MEMORY[0x1E4F28B88] URLHostAllowedCharacterSet];
    uint64_t v7 = [NSString stringWithFormat:@"tap-to-radar://new?Title=%@&Description=%@&Classification=%@&Reproducibility=%@&ComponentID=%@&ComponentName=%@&ComponentVersion=%@&AutoDiagnostics=phone", objc_msgSend(v4, "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(v5, "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(@"Serious Bug", "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(@"I Didn't Try", "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(@"450305", "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(@"Messages", "stringByAddingPercentEncodingWithAllowedCharacters:", v6), objc_msgSend(@"all", "stringByAddingPercentEncodingWithAllowedCharacters:", v6)];
    uint64_t v8 = [MEMORY[0x1E4F1CB10] URLWithString:v7];
    id v9 = (void *)[(id)qword_1EA8CA568 defaultWorkspace];
    return [v9 openURL:v8 configuration:0 completionHandler:0];
  }
  return result;
}

void sub_1D97B8C48(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97B8C18);
  }
  _Unwind_Resume(a1);
}

void sub_1D97B9270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1D97B929C(uint64_t a1, void *a2)
{
  id result = a2;
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = result;
  return result;
}

void sub_1D97BA108(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Finished reindexing %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D97BB3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97BB3F4(uint64_t a1, uint64_t a2)
{
  if (a2 == -1)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v2 = *(void **)(a1 + 32);
    objc_msgSend(NSString, "stringWithFormat:", @"%tu", a2);
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    [v2 addObject:v3];
  }
}

void sub_1D97BB484(uint64_t a1, void *a2, void *a3)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  uint64_t v6 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", 2 * objc_msgSend(v5, "count"));
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v7 = v5;
  uint64_t v8 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)v21;
    do
    {
      uint64_t v11 = 0;
      do
      {
        if (*(void *)v21 != v10) {
          objc_enumerationMutation(v7);
        }
        uint64_t v12 = [*(id *)(*((void *)&v20 + 1) + 8 * v11) rangeValue];
        uint64_t v14 = v13;
        char v15 = objc_msgSend(NSString, "stringWithFormat:", @"%tu", v12);
        [v6 addObject:v15];

        id v16 = objc_msgSend(NSString, "stringWithFormat:", @"%tu", v14);
        [v6 addObject:v16];

        ++v11;
      }
      while (v9 != v11);
      uint64_t v9 = [v7 countByEnumeratingWithState:&v20 objects:v24 count:16];
    }
    while (v9);
  }

  id v17 = *(void **)(a1 + 32);
  uint64_t v18 = [v4 stringValue];
  [v17 setObject:v6 forKey:v18];
}

void sub_1D97BB930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97BB960(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  id v27 = a2;
  id v7 = a3;
  uint64_t v8 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CA48]), "initWithCapacity:", (unint64_t)objc_msgSend(v7, "count") >> 1);
  id v26 = v7;
  uint64_t v9 = [v7 count];
  unint64_t v10 = v9;
  if (v9)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
    *a4 = 1;
  }
  else
  {
    id v11 = v27;
    if (v9)
    {
      unint64_t v12 = 0;
      unint64_t v13 = v9 - 1;
      do
      {
        if (v12 < v13)
        {
          uint64_t v14 = (void *)MEMORY[0x1E4F29238];
          char v15 = v8;
          id v16 = *(void **)(a1 + 48);
          id v17 = [v26 objectAtIndexedSubscript:v12];
          uint64_t v18 = [v16 _unsignedIntegerFromString:v17];
          uint64_t v19 = *(void **)(a1 + 48);
          long long v20 = [v26 objectAtIndexedSubscript:v12 + 1];
          uint64_t v21 = [v19 _unsignedIntegerFromString:v20];
          uint64_t v22 = v18;
          uint64_t v8 = v15;
          long long v23 = objc_msgSend(v14, "valueWithRange:", v22, v21);
          [v15 addObject:v23];

          id v11 = v27;
        }
        v12 += 2;
      }
      while (v12 < v10);
    }
    id v24 = *(void **)(a1 + 32);
    uint64_t v25 = objc_msgSend(NSNumber, "numberWithUnsignedInteger:", objc_msgSend(*(id *)(a1 + 48), "_unsignedIntegerFromString:", v11));
    [v24 setObject:v8 forKey:v25];
  }
}

void sub_1D97BBB2C(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  id v8 = a5;
  if (qword_1EBE2BC00 != -1) {
    dispatch_once(&qword_1EBE2BC00, &unk_1F3391860);
  }
  if ([(id)qword_1EBE2BBF8 addBlock:v7 withTimeout:@"com.apple.madrid" forKey:v8 description:a1]&& IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      unint64_t v10 = [(id)qword_1EBE2BBF8 loggableOverviewForKey:@"com.apple.madrid"];
      int v11 = 138412290;
      unint64_t v12 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Messages ahead in the receive queue: %@", (uint8_t *)&v11, 0xCu);
    }
  }
}

uint64_t sub_1D97BBC90()
{
  qword_1EBE2BBF8 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F6C388]);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97BBCCC(double a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v7 = qword_1EA8CA580;
  id v8 = a5;
  id v9 = a4;
  id v11 = v9;
  if (v7 == -1)
  {
    id v10 = v9;
  }
  else
  {
    dispatch_once(&qword_1EA8CA580, &unk_1F3391880);
    id v10 = v11;
  }
  [(id)qword_1EA8CA578 addBlock:v10 withTimeout:@"com.apple.sms" forKey:v8 description:a1];
}

uint64_t sub_1D97BBD7C()
{
  qword_1EA8CA578 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F6C388]);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97BCB5C()
{
  qword_1EA8CA588 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1CAD0]), "initWithObjects:", @"uti-type", @"decryption-key", @"mmcs-url", @"mmcs-signature-hex", @"mmcs-owner", @"file-size", 0);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97BCBE0(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if ([(id)qword_1EA8CA588 containsObject:v9])
  {
    uint64_t v6 = (void *)IMCreateEscapedAttributeValueFromString();
    uint64_t v7 = IMCreateEscapedAttributeValueFromString();
    id v8 = (void *)v7;
    if (v6 && v7) {
      [*(id *)(*(void *)(a1 + 32) + 40) appendFormat:@" %@=\"%@\"", v6, v7];
    }
  }
}

void sub_1D97C1D5C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, char a6, uint64_t a7, void *a8)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a8;
  if (v17 || (a6 & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      long long v23 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        id v24 = [*(id *)(a1 + 32) localURL];
        *(_DWORD *)long long buf = 138412546;
        id v27 = v24;
        __int16 v28 = 2112;
        id v29 = v17;
        _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "Failed to transcode HQ asset %@ to LQ for watch relay with error %@", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v19 = [v15 firstObject];
    long long v20 = [MEMORY[0x1E4F1C9B8] dataWithContentsOfURL:v19];
    if (IMOSLoggingEnabled())
    {
      uint64_t v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        uint64_t v22 = [*(id *)(a1 + 32) guid];
        *(_DWORD *)long long buf = 138412802;
        id v27 = v22;
        __int16 v28 = 2112;
        id v29 = v19;
        __int16 v30 = 2048;
        uint64_t v31 = [v20 length];
        _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Relaying LQ transcode of transfer GUID %@ at path %@ size %llu to watch", buf, 0x20u);
      }
    }
    LOBYTE(v25) = 1;
    [*(id *)(a1 + 40) _relayMessageToPeers:*(void *)(a1 + 48) forChat:*(void *)(a1 + 56) serviceName:*(void *)(a1 + 64) requiredCapabilities:*(void *)(a1 + 72) reflectOnly:*(unsigned __int8 *)(a1 + 80) excludesWatch:0 onlyWatch:v25 overridingAttachmentData:v20];
  }
}

void sub_1D97C1F94(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97C1F44);
  }
  _Unwind_Resume(a1);
}

void sub_1D97C2384(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97C22DCLL);
  }
  os_activity_scope_leave(&state);
  _Unwind_Resume(exc_buf);
}

void sub_1D97C3500(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  id v33 = a2;
  id v35 = a4;
  id v34 = a5;
  id value = a6;
  id v37 = a7;
  id v17 = a8;
  id v18 = a9;
  if (IMOSLoggingEnabled())
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      long long v20 = @"NO";
      if (a3) {
        long long v20 = @"YES";
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v39 = v20;
      __int16 v40 = 2112;
      id v41 = v35;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "MMS dictionary uploaded complected with success: %@ and error %@", buf, 0x16u);
    }
  }
  if (a3)
  {
    if (value) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryOwnerIDKey, value);
    }
    if (v37) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionarySignatureKey, v37);
    }
    if (v17) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryURLStringKey, v17);
    }
    if (v18) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryEncryptionKey, v18);
    }
    uint64_t v21 = [NSNumber numberWithInteger:a10];
    if (v21) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageAttachmentDictionaryOutFileSizeKey, v21);
    }

    uint64_t v22 = *(const void **)(a1 + 40);
    if (v22) {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), IMDRelayMessageItemDictionaryServiceKey, v22);
    }
    long long v23 = JWEncodeDictionary();
    if ([v23 length])
    {
      id v24 = (void *)MEMORY[0x1E4F1CA60];
      uint64_t v25 = [NSNumber numberWithInteger:141];
      id v26 = [*(id *)(a1 + 48) objectForKey:IMDCTMessageDictionaryGUIDKey];
      id v27 = IDSGetUUIDData();
      __int16 v28 = [NSNumber numberWithDouble:*MEMORY[0x1E4F6B050]];
      id v29 = [NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 80)];
      __int16 v30 = objc_msgSend(v24, "dictionaryWithObjectsAndKeys:", *MEMORY[0x1E4F6AA18], MEMORY[0x1E4F1CC38], *MEMORY[0x1E4F6AA00], v25, *MEMORY[0x1E4F6A978], v27, *MEMORY[0x1E4F6AA20], v23, *MEMORY[0x1E4F6A988], v28, *MEMORY[0x1E4F6AA10], @"_SMSServiceRelayToWatchOnly", v29, 0);

      if ([*(id *)(a1 + 56) count]) {
        [v30 setObject:*(void *)(a1 + 56) forKey:@"requiredCapabilitiesForSMSRelay"];
      }
      uint64_t v31 = *(void **)(a1 + 64);
      uint64_t v32 = [MEMORY[0x1E4F6E660] myCTPhoneNumber];
      [v31 sendDataToPeers:v30 forcedCallerID:v32 shouldFilterRecepients:1 requestProxySend:0 dontSendTo:*(void *)(a1 + 72)];
    }
  }
}

uint64_t sub_1D97C5D94()
{
  qword_1EBE2B9D8 = objc_alloc_init(IMDChatStore);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97C702C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D97C703C(uint64_t a1)
{
}

uint64_t sub_1D97C7044(uint64_t a1, uint64_t a2)
{
  id v3 = sub_1D9798E78(a2);
  if (v3) {
    [*(id *)(a1 + 32) addObject:v3];
  }

  return MEMORY[0x1F41817F8]();
}

void sub_1D97C70A0(uint64_t a1, void *a2)
{
  id v9 = a2;
  [*(id *)(a1 + 32) _processIncomingChat:v9];
  id v3 = [v9 serviceName];
  int v4 = [v3 isEqualToString:*MEMORY[0x1E4F6E1A0]];

  if (v4) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  if (!v5)
  {
    id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    uint64_t v7 = *(void *)(*(void *)(a1 + 48) + 8);
    id v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;

    id v5 = *(void **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
  }
  [v5 addObject:v9];
}

void sub_1D97C76C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97C76E0(uint64_t a1, void *a2)
{
}

void sub_1D97C7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D97C7980(uint64_t a1, void *a2)
{
}

void sub_1D97CBA14(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97CBA00);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D97CBA88()
{
  qword_1EBE2BC10 = objc_alloc_init(IMDChorosController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97CC510(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v13 = 138412546;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", (uint8_t *)&v13, 0x16u);
    }
  }
  int v8 = [(__CFString *)v5 success];
  if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (v8) {
        id v10 = @"YES";
      }
      else {
        id v10 = @"NO";
      }
      id v11 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 32), "messageID"));
      int v13 = 138412546;
      id v14 = v10;
      __int16 v15 = 2112;
      id v16 = v11;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Message sent notification: success %@ messageID %@", (uint8_t *)&v13, 0x16u);
    }
  }
  if (*(void *)(a1 + 40))
  {
    unint64_t v12 = *(void **)(a1 + 48);
    if (v8) {
      objc_msgSend(v12, "_processMessageSent:forSession:");
    }
    else {
      objc_msgSend(v12, "_processMessageSendFailure:forSession:");
    }
  }
}

uint64_t sub_1D97CC708(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processMessageSendFailure:*(void *)(a1 + 40) forSession:*(void *)(a1 + 48)];
}

void sub_1D97CCB78(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97CCA9CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97CEEA0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v27 = v5;
      __int16 v28 = 2112;
      id v29 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", buf, 0x16u);
    }
  }
  int v8 = [(__CFString *)v5 success];
  if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (v8) {
        id v10 = @"YES";
      }
      else {
        id v10 = @"NO";
      }
      id v11 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(*(id *)(a1 + 32), "messageID"));
      *(_DWORD *)long long buf = 138412546;
      id v27 = v10;
      __int16 v28 = 2112;
      id v29 = v11;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Message sent notification: success %@ messageID %@", buf, 0x16u);
    }
  }
  if (*(void *)(a1 + 40))
  {
    unint64_t v12 = *(void **)(a1 + 48);
    if (v8)
    {
      objc_msgSend(v12, "_processMessageSent:forSession:");
      uint64_t v13 = *(void *)(a1 + 72);
      if (v13 == 8)
      {
        id v18 = *(void **)(a1 + 48);
        uint64_t v19 = +[IMDChorosController serviceTypeKey];
        long long v20 = objc_msgSend(NSNumber, "numberWithInteger:", *(void *)(a1 + 72), v19);
        v22[1] = *MEMORY[0x1E4F24278];
        v23[0] = v20;
        v23[1] = *(void *)(a1 + 64);
        uint64_t v21 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v23 forKeys:v22 count:2];
        [v18 locationUpdateDelivered:v21];
      }
      else if (v13 == 1)
      {
        id v14 = *(void **)(a1 + 48);
        __int16 v15 = +[IMDChorosController serviceTypeKey];
        id v24 = v15;
        id v16 = [NSNumber numberWithInteger:*(void *)(a1 + 72)];
        uint64_t v25 = v16;
        uint64_t v17 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v25 forKeys:&v24 count:1];
        [v14 locationUpdateDelivered:v17];
      }
    }
    else
    {
      objc_msgSend(v12, "_processMessageSendFailure:forSession:");
    }
  }
}

uint64_t sub_1D97CF1A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _processMessageSendFailure:*(void *)(a1 + 40) forSession:*(void *)(a1 + 48)];
}

void sub_1D97CF5CC(uint64_t a1, void *a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  int v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412546;
      id v11 = v4;
      __int16 v12 = 2112;
      id v13 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Received ack: %@, metadata: %@", (uint8_t *)&v10, 0x16u);
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = [(__CFString *)v4 success];
      id v9 = @"NO";
      if (v8) {
        id v9 = @"YES";
      }
      int v10 = 138412290;
      id v11 = v9;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Message sent notification: success %@", (uint8_t *)&v10, 0xCu);
    }
  }
}

uint64_t sub_1D97D1200()
{
  uint64_t result = MEMORY[0x1E0169C30](@"LSApplicationWorkspace", @"CoreServices");
  qword_1EA8CA598 = result;
  return result;
}

void sub_1D97D24D8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v6 = +[IMDChorosController chatIdentifierForEmergency];
  uint64_t v3 = [*(id *)(a1 + 40) conversationID];
  uint64_t v4 = [*(id *)(a1 + 40) sequenceNum];
  id v5 = [*(id *)(a1 + 40) text];
  [v2 _processReceivedTextMessageForService:1 chatIdentifier:v6 conversationID:v3 sequenceNum:v4 text:v5];
}

void sub_1D97D2794(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting delivery receipt pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D28C4;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D28C4(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        __int16 v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing delivery receipt %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D2BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting chat session close pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D2CE0;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D2CE0(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        __int16 v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing chat session close %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D3000(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting read receipt pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D3130;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D3130(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (([v6 isFromStorage] & 1) != 0 || objc_msgSend(v6, "isLastFromStorage"))
    {
      uint64_t v7 = +[IMDMessageFromStorageController iMessageStorageController];
      [v7 decrementPendingReadReceiptFromStorageCount];
    }
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        id v9 = [v6 GUID];
        int v12 = 138412290;
        uint64_t v13 = v9;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Finished processing read receipt %@", (uint8_t *)&v12, 0xCu);
      }
    }

    uint64_t v10 = *(void *)(a1 + 32);
    if (v10) {
      (*(void (**)(uint64_t, uint64_t, void))(v10 + 16))(v10, 1, 0);
    }
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(void))(v11 + 16))();
  }
}

void sub_1D97D344C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting mark unread request pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D357C;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D357C(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing mark unread request %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D3868(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting played receipt pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D3998;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D3998(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing played receipt %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D3C84(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting delivered quietly receipt pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D3DB4;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D3DB4(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing delivered quietly receipt %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D40A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting notify recipient command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D41D0;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D41D0(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing notify recipient command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D44BC(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting edit message command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D45EC;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D45EC(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 editCommandGUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing edit message command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D48D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting edit message command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D4A08;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D4A08(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing recover junk command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D4CF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting reposition sticker command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D4E24;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D4E24(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished reposition sticker command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D5110(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting scheduled message update command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D5240;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D5240(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished scheduled message update command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D552C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting iml to im association command pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D565C;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D565C(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v11 = 138412290;
        int v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished iml to im association command %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

void sub_1D97D5A28(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97D590CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97D5A5C(uint64_t a1, void *a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [*(id *)(a1 + 32) GUID];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v25 = v5;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting message pipeline (%@)", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      qos_class_t v7 = qos_class_self();
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v25) = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Starting message qos is (%u)", buf, 8u);
    }
  }
  id v8 = *(id *)(a1 + 40);
  uint64_t v9 = v8;
  os_signpost_id_t v10 = *(void *)(a1 + 64);
  if (v10 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v8))
  {
    *(_WORD *)long long buf = 0;
    _os_signpost_emit_with_name_impl(&dword_1D967A000, v9, OS_SIGNPOST_INTERVAL_BEGIN, v10, "receivePipeline", "", buf, 2u);
  }

  uint64_t v11 = 0;
  if ([*(id *)(a1 + 32) isFromStorage])
  {
    IMTimeOfDay();
    uint64_t v11 = v12;
  }
  uint64_t v13 = [*(id *)(a1 + 48) runWithInput:*(void *)(a1 + 32)];
  v17[0] = MEMORY[0x1E4F143A8];
  v17[1] = 3221225472;
  void v17[2] = sub_1D97D5D2C;
  v17[3] = &unk_1E6B76AB8;
  id v18 = *(id *)(a1 + 32);
  uint64_t v22 = v11;
  id v20 = *(id *)(a1 + 56);
  id v21 = v3;
  id v14 = *(id *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 64);
  id v19 = v14;
  uint64_t v23 = v15;
  id v16 = v3;
  [v13 registerCompletionBlock:v17];
}

void sub_1D97D5CF8(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97D5B70);
  }
  _Unwind_Resume(a1);
}

void sub_1D97D5D2C(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 48);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      qos_class_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 GUID];
        int v21 = 138412290;
        uint64_t v22 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing message %@", (uint8_t *)&v21, 0xCu);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        qos_class_t v10 = qos_class_self();
        int v21 = 67109120;
        LODWORD(v22) = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Finished message qos is (%u)", (uint8_t *)&v21, 8u);
      }
    }
    if ([*(id *)(a1 + 32) isFromStorage])
    {
      IMTimeOfDay();
      double v12 = v11;
      double v13 = *(double *)(a1 + 64);
      if (IMOSLoggingEnabled())
      {
        id v14 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          uint64_t v15 = [v6 GUID];
          int v21 = 138412546;
          uint64_t v22 = v15;
          __int16 v23 = 2048;
          double v24 = v12 - v13;
          _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "From-storage message %@ took %f seconds to process", (uint8_t *)&v21, 0x16u);
        }
      }
    }

    uint64_t v16 = *(void *)(a1 + 48);
    if (v16) {
      (*(void (**)(uint64_t, uint64_t, void))(v16 + 16))(v16, 1, 0);
    }
  }
  uint64_t v17 = *(void *)(a1 + 56);
  if (v17) {
    (*(void (**)(void))(v17 + 16))();
  }
  id v18 = *(id *)(a1 + 40);
  id v19 = v18;
  os_signpost_id_t v20 = *(void *)(a1 + 72);
  if (v20 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v18))
  {
    LOWORD(v21) = 0;
    _os_signpost_emit_with_name_impl(&dword_1D967A000, v19, OS_SIGNPOST_INTERVAL_END, v20, "receivePipeline", "", (uint8_t *)&v21, 2u);
  }
}

void sub_1D97D61B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Starting SyndicationAction pipeline", buf, 2u);
    }
  }
  id v5 = [*(id *)(a1 + 32) runWithInput:*(void *)(a1 + 40)];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D97D62E0;
  v7[3] = &unk_1E6B76A68;
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v6 = v3;
  [v5 registerCompletionBlock:v7];
}

void sub_1D97D62E0(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if ([v3 state])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    if (v4)
    {
      id v5 = [v3 error];
      (*(void (**)(uint64_t, void, void *))(v4 + 16))(v4, 0, v5);
    }
  }
  else
  {
    id v6 = [v3 value];
    if (IMOSLoggingEnabled())
    {
      qos_class_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [v6 syndicationAction];
        int v11 = 138412290;
        double v12 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished processing SyndicationAction %@", (uint8_t *)&v11, 0xCu);
      }
    }

    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, uint64_t, void))(v9 + 16))(v9, 1, 0);
    }
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10) {
    (*(void (**)(void))(v10 + 16))();
  }
}

IMDLocationSharingController *sub_1D97D64A8()
{
  uint64_t result = objc_alloc_init(IMDLocationSharingController);
  qword_1EBE2B9E0 = (uint64_t)result;
  return result;
}

void sub_1D97D6868(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1D97D688C(uint64_t a1, uint64_t a2, void *a3)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D97D6934;
  block[3] = &unk_1E6B76B08;
  objc_copyWeak(v6, (id *)(a1 + 32));
  void block[4] = a2;
  v6[1] = a3;
  dispatch_async(MEMORY[0x1E4F14428], block);
  objc_destroyWeak(v6);
}

uint64_t sub_1D97D6934(uint64_t a1)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  Weauint64_t k = objc_loadWeak((id *)(a1 + 40));
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 48);
      int v10 = 138412546;
      uint64_t v11 = v4;
      __int16 v12 = 2048;
      uint64_t v13 = v5;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "FindMyLocateSession friendShipUpdateCallback. updateFriend: %@, updateType: %lu", (uint8_t *)&v10, 0x16u);
    }
  }
  uint64_t v6 = [*(id *)(a1 + 32) originatedFromTheSameClient];
  qos_class_t v7 = (void *)[*(id *)(a1 + 32) handle];
  if (objc_opt_respondsToSelector()) {
    uint64_t v8 = [v7 comparisonIdentifier];
  }
  else {
    uint64_t v8 = 0;
  }
  return objc_msgSend(Weak, "_postFMLFriendshipChangeForHandleID:handleType:updateType:isFromMessages:", v8, objc_msgSend(*(id *)(a1 + 32), "handleType"), *(void *)(a1 + 48), v6);
}

void sub_1D97D6B84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v3 = IMLogHandleForCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_1D9904250(a2, v3);
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "FindMyLocateSession startUpdatingFriendsWithCompletion completed without an error", v5, 2u);
    }
  }
}

void sub_1D97D7ACC(uint64_t a1, int a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *(void *)(a1 + 32);
        uint64_t v5 = [*(id *)(a1 + 40) identifier];
        int v12 = 138412546;
        uint64_t v13 = v4;
        __int16 v14 = 2112;
        uint64_t v15 = v5;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, " ** Sent location sharing payload: %@  to ID: %@", (uint8_t *)&v12, 0x16u);
      }
    }
  }
  else
  {
    id v6 = objc_alloc(MEMORY[0x1E4F1C9E8]);
    qos_class_t v7 = objc_msgSend(v6, "initWithObjectsAndKeys:", @"Couldn't find compatible destination.", *MEMORY[0x1E4F28568], 0);
    uint64_t v8 = (void *)[objc_alloc(MEMORY[0x1E4F28C58]) initWithDomain:@"com.apple.messages" code:3 userInfo:v7];
    [*(id *)(*(void *)(a1 + 48) + 8) mappingPacketSendFailed:*(void *)(a1 + 56) toHandle:*(void *)(a1 + 40) withError:v8];
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        uint64_t v10 = *(void *)(a1 + 32);
        uint64_t v11 = [*(id *)(a1 + 40) identifier];
        int v12 = 138412546;
        uint64_t v13 = v10;
        __int16 v14 = 2112;
        uint64_t v15 = v11;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, " ** Could not send location sharing payload: %@  to ID: %@ - immediately failed.", (uint8_t *)&v12, 0x16u);
      }
    }
  }
}

void sub_1D97D7F54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412546;
      uint64_t v7 = a2;
      __int16 v8 = 2112;
      uint64_t v9 = a3;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Mapping packet ingested by FMF: responseID %@ error %@", (uint8_t *)&v6, 0x16u);
    }
  }
}

uint64_t sub_1D97D8B10()
{
  qword_1EBE2B9E8 = objc_alloc_init(IMDCKMessageSyncController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97D9118(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = (id *)(a1 + 32);
  id v3 = [*(id *)(a1 + 32) _chatRegistry];
  uint64_t v4 = objc_msgSend(v3, "messagesToUploadToCloudKitWithLimit:", objc_msgSend(*v2, "_numberOfMessagesToUpload"));

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v4;
  uint64_t v5 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(obj);
        }
        __int16 v8 = *(void **)(*((void *)&v25 + 1) + 8 * i);
        uint64_t v9 = (void *)MEMORY[0x1E016A370]();
        uint64_t v10 = [*(id *)(a1 + 32) _messageZoneID];
        uint64_t v11 = [*(id *)(a1 + 32) _messageRecordSalt];
        int v12 = (void *)[v8 copyCKRecordRepresentationWithZoneID:v10 salt:v11];

        if (!v12)
        {
          if (IMOSLoggingEnabled())
          {
            id v19 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              os_signpost_id_t v20 = [v8 guid];
              *(_DWORD *)long long buf = 138412290;
              uint64_t v30 = v20;
              _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "**** Message [%@] could not be converted to CKRecord, marking it as clean and moving on.", buf, 0xCu);
            }
          }
          goto LABEL_20;
        }
        uint64_t v13 = *(void **)(a1 + 32);
        __int16 v14 = [v12 firstObject];
        LODWORD(v13) = [v13 _isValidCKRecordToSync:v14];

        if (!v13)
        {
          if (IMOSLoggingEnabled())
          {
            int v21 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              uint64_t v22 = [v12 objectAtIndexedSubscript:0];
              __int16 v23 = [v22 _stringForKey:@"guid"];
              *(_DWORD *)long long buf = 138412290;
              uint64_t v30 = v23;
              _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "**** Message %@ is too big. Marking it as clean and moving on", buf, 0xCu);
            }
          }
LABEL_20:
          *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
          id v18 = [*(id *)(a1 + 32) _sharedIMDMessageStore];
          objc_msgSend(v18, "markMessageAsCleanWithROWID:", objc_msgSend(v8, "messageID"));
          goto LABEL_21;
        }
        if (*(void *)(a1 + 40))
        {
          uint64_t v15 = [v12 firstObject];
          BOOL v16 = v15 == 0;

          if (!v16)
          {
            uint64_t v17 = *(__CFArray **)(a1 + 40);
            id v18 = [v12 firstObject];
            CFArrayAppendValue(v17, v18);
LABEL_21:
          }
        }
      }
      uint64_t v5 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v5);
  }
}

void sub_1D97D9680(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating message zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1D97D9D14(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) _chatRegistry];
  [v2 processMessageUsingCKRecord:*(void *)(a1 + 40)];

  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = [v3 recordsWritten] + 1;

  return [v3 setRecordsWritten:v4];
}

void sub_1D97D9D74(uint64_t a1)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  uint64_t v2 = [*(id *)(a1 + 32) _ckUtilitiesInstance];
  id v3 = [v2 extractServerRecordFromCKServerErrorRecordChanged:*(void *)(a1 + 40)];

  uint64_t v4 = [*(id *)(a1 + 48) recordID];
  id v5 = [v4 recordName];
  uint64_t v6 = [v3 recordID];
  int v7 = [v6 recordName];
  int v8 = [v5 isEqualToString:v7];

  if (v8)
  {
    uint64_t v9 = [*(id *)(a1 + 32) _chatRegistry];
    [v9 processMessageUsingCKRecord:v3];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = [v3 recordID];
        int v12 = [v11 recordName];
        uint64_t v13 = [*(id *)(a1 + 48) recordID];
        __int16 v14 = [v13 recordName];
        int v15 = 138412546;
        BOOL v16 = v12;
        __int16 v17 = 2112;
        id v18 = v14;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Conflicting serverRecord was different than the one being updated (server: %@, local: %@)", (uint8_t *)&v15, 0x16u);
      }
    }
    [MEMORY[0x1E4F6E7F0] resetSyncStateForMessage:*(void *)(a1 + 48) toState:2];
  }
}

uint64_t sub_1D97D9F80(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  uint64_t v2 = (void *)MEMORY[0x1E4F6E7F0];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 resetSyncStateForMessage:v3 toState:0];
}

uint64_t sub_1D97D9FD8(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  uint64_t v2 = (void *)MEMORY[0x1E4F6E7F0];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 resetSyncStateForMessage:v3 toState:2];
}

uint64_t sub_1D97DA030(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  uint64_t v2 = (void *)MEMORY[0x1E4F6E7F0];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 resetSyncStateForMessage:v3 toState:1];
}

uint64_t sub_1D97DA088(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRecordsWriteFailed:", objc_msgSend(*(id *)(a1 + 32), "recordsWriteFailed") + 1);
  uint64_t v2 = (void *)MEMORY[0x1E4F6E7F0];
  uint64_t v3 = *(void *)(a1 + 40);

  return [v2 resetSyncStateForMessage:v3 toState:2];
}

uint64_t sub_1D97DA534(uint64_t a1)
{
  return [*(id *)(a1 + 32) _writeDirtyMessagesToCloudKitWithActivity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

uint64_t sub_1D97DAB00(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordWriteCompletionForRecord_NSError_);
}

uint64_t sub_1D97DAB10(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processModifyRecordsCompletion_deletedRecordIDs_operationError_isLastBatchOfWrite_activity_writeCompletionBlock_);
}

void sub_1D97DAC9C(uint64_t a1)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = a1 + 32;
  objc_msgSend(*(id *)(a1 + 32), "setRecordsRead:", objc_msgSend(*(id *)(a1 + 32), "recordsRead") + 1);
  uint64_t v3 = [*(id *)(v2 + 8) _stringForKey:@"chatID"];
  uint64_t v4 = *(id **)v2;
  if (v3)
  {
    id v5 = [v4[13] objectForKey:v3];
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 32);
    int v8 = *(void **)(v7 + 104);
    if (v5)
    {
      uint64_t v9 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v5, "intValue") + 1);
      [v8 setObject:v9 forKey:v3];
    }
    else
    {
      [*(id *)(v7 + 104) setObject:&unk_1F33C5D90 forKey:v3];
    }
    uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 104) objectForKey:v3];

    if (IMOSLoggingEnabled())
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        int v14 = 138412546;
        int v15 = v3;
        __int16 v16 = 1024;
        int v17 = [v11 intValue];
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Found parentChatID: %@, updatedLastMessageCount: %d", (uint8_t *)&v14, 0x12u);
      }
    }
    uint64_t v13 = [*(id *)(a1 + 32) _chatRegistry];
    objc_msgSend(v13, "processMessageUsingCKRecord:updatedLastMessageCount:", *(void *)(a1 + 40), objc_msgSend(v11, "intValue"));
  }
  else
  {
    uint64_t v10 = [v4 _chatRegistry];
    [v10 processMessageUsingCKRecord:*(void *)(a1 + 40)];
  }
}

void sub_1D97DB044(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97DB004);
  }
  _Unwind_Resume(a1);
}

void sub_1D97DB6DC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97DB694);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D97DB9E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setArchivedRecordSyncToken:0];
}

void sub_1D97DBBF0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) ckUtilities];
  id v4 = [v2 logCollectorAddress];

  uint64_t v3 = [*(id *)(a1 + 32) ckUtilities];
  [v3 reportMOCDebuggingErrorWithString:@"ChangeTokenExpired" internalOnly:1 initialSync:0 sendToHandle:v4 reasonString:@"ChangeTokenExpired"];

  [*(id *)(a1 + 32) setLatestSyncToken:0];
}

void sub_1D97DBDCC(uint64_t a1)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a1 + 88)) {
        uint64_t v3 = @"YES";
      }
      else {
        uint64_t v3 = @"NO";
      }
      uint64_t v4 = *(void *)(a1 + 32);
      uint64_t v5 = *(void *)(a1 + 40);
      *(_DWORD *)long long buf = 138412802;
      uint64_t v30 = v4;
      __int16 v31 = 2112;
      uint64_t v32 = v3;
      __int16 v33 = 2112;
      uint64_t v34 = v5;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "processArchivedRecordsFetchCompletionZoneID serverChangeToken %@ moreComing %@ recordZoneError %@", buf, 0x20u);
    }
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    uint64_t v7 = [v6 errorAnalyzer];
    int v8 = [v7 CKPartialError:*(void *)(a1 + 40) hasErrorCode:&unk_1F33C5DA8];

    int v9 = IMOSLoggingEnabled();
    if (v8)
    {
      if (v9)
      {
        uint64_t v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Record Zone Error says that the change token has expired", buf, 2u);
        }
      }
      [*(id *)(a1 + 48) _resetArvchivedRecordSyncToken];
      uint64_t v11 = [*(id *)(a1 + 48) ckQueue];
      v21[0] = MEMORY[0x1E4F143A8];
      v21[1] = 3221225472;
      v21[2] = sub_1D97DC2B0;
      void v21[3] = &unk_1E6B76BA0;
      void v21[4] = *(void *)(a1 + 48);
      long long v24 = *(_OWORD *)(a1 + 72);
      id v22 = *(id *)(a1 + 56);
      id v23 = *(id *)(a1 + 64);
      dispatch_async(v11, v21);
    }
    else
    {
      if (v9)
      {
        __int16 v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          uint64_t v17 = *(void *)(a1 + 40);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v30 = v17;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "//---** Error fetching archived messages: %@", buf, 0xCu);
        }
      }
      uint64_t v18 = *(void *)(a1 + 64);
      if (v18) {
        (*(void (**)(uint64_t, void, void, void))(v18 + 16))(v18, 0, 0, *(void *)(a1 + 40));
      }
    }
  }
  else
  {
    [v6 setArchivedRecordSyncToken:*(void *)(a1 + 32)];
    BOOL v12 = *(unsigned char *)(a1 + 88) == 0;
    int v13 = IMOSLoggingEnabled();
    if (v12)
    {
      if (v13)
      {
        uint64_t v19 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "No more archived records to fetch. Resetting defaults to fetch archived records", buf, 2u);
        }
      }
      IMSetDomainBoolForKey();
      uint64_t v20 = *(void *)(a1 + 64);
      if (v20) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v20 + 16))(v20, 1, 1, 0);
      }
    }
    else
    {
      if (v13)
      {
        int v14 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "There are more changes to fetch from archived zone. Kicking off another batch of fetching", buf, 2u);
        }
      }
      int v15 = [*(id *)(a1 + 48) ckQueue];
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1D97DC294;
      block[3] = &unk_1E6B76BA0;
      void block[4] = *(void *)(a1 + 48);
      long long v28 = *(_OWORD *)(a1 + 72);
      id v26 = *(id *)(a1 + 56);
      id v27 = *(id *)(a1 + 64);
      dispatch_async(v15, block);
    }
  }
}

uint64_t sub_1D97DC294(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchArchivedRecordsIfNeeded:1 currentBatchCount:*(void *)(a1 + 56) + 1 maxNumberOfBatches:*(void *)(a1 + 64) activity:*(void *)(a1 + 40) withCompletionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D97DC2B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchArchivedRecordsIfNeeded:1 currentBatchCount:*(void *)(a1 + 56) + 1 maxNumberOfBatches:*(void *)(a1 + 64) activity:*(void *)(a1 + 40) withCompletionBlock:*(void *)(a1 + 48)];
}

void sub_1D97DC870(uint64_t a1, void *a2)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      id v5 = [v3 recordID];
      uint64_t v6 = [v3 _stringForKey:@"guid"];
      int v7 = 138412546;
      id v8 = v5;
      __int16 v9 = 2112;
      uint64_t v10 = v6;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Fetch archived record %@ guid %@", (uint8_t *)&v7, 0x16u);
    }
  }
  [*(id *)(a1 + 32) _processRecordChange:v3];
}

void sub_1D97DC9B0(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "** THIS SHOULD NOT GET CALLED WHILE FETCHING ARCHIVED RECORDS **", v7, 2u);
    }
  }
}

uint64_t sub_1D97DCA64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return [*(id *)(a1 + 32) _processArchivedRecordsFetchCompletionZoneID:a2 serverChangeToken:a3 moreComing:a4 currentBatchCount:*(void *)(a1 + 56) maxNumberOfBatches:*(void *)(a1 + 64) activity:*(void *)(a1 + 40) error:a5 completionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D97DCAA8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processFetchArchivedRecordCompletionWithError_WithCompletionBlock_);
}

void sub_1D97DCD84(uint64_t a1)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(a1 + 96)) {
        id v3 = @"YES";
      }
      else {
        id v3 = @"NO";
      }
      id v5 = *(__CFString **)(a1 + 32);
      uint64_t v4 = *(void *)(a1 + 40);
      if (*(unsigned char *)(a1 + 97)) {
        uint64_t v6 = @"YES";
      }
      else {
        uint64_t v6 = @"NO";
      }
      int v7 = [NSNumber numberWithInteger:*(void *)(a1 + 72)];
      id v8 = [NSNumber numberWithInteger:*(void *)(a1 + 80)];
      *(_DWORD *)long long buf = 138413570;
      uint64_t v49 = v5;
      __int16 v50 = 2112;
      uint64_t v51 = v3;
      __int16 v52 = 2112;
      uint64_t v53 = v4;
      __int16 v54 = 2112;
      id v55 = v6;
      __int16 v56 = 2112;
      id v57 = v7;
      __int16 v58 = 2112;
      id v59 = v8;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "recordZoneFetchCompletionBlock serverChangeToken %@ moreComing %@ recordZoneError %@ archivedRecordsHintIsPresent %@, currentBatchCount %@ maxNumberOfBatches:%@", buf, 0x3Eu);
    }
  }
  if (*(unsigned char *)(a1 + 97))
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Setting shouldFetchArchivedRecords to true", buf, 2u);
      }
    }
    IMSetDomainBoolForKey();
  }
  uint64_t v10 = [*(id *)(a1 + 48) errorAnalyzer];
  int v11 = [v10 errorIndicatesZoneNotCreated:*(void *)(a1 + 40)];

  BOOL v12 = [*(id *)(a1 + 48) errorAnalyzer];
  int v13 = [v12 errorIndicatesUserDeletedZone:*(void *)(a1 + 40)];

  int v14 = *(void **)(a1 + 48);
  if (*(void *)(a1 + 40))
  {
    int v15 = [v14 errorAnalyzer];
    int v16 = [v15 CKPartialError:*(void *)(a1 + 40) hasErrorCode:&unk_1F33C5DA8];

    if (v16)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Record Zone Error says that the change token has expired", buf, 2u);
        }
      }
      [*(id *)(a1 + 48) clearLocalSyncState:17];
      uint64_t v18 = *(void *)(a1 + 64);
      if (v18) {
LABEL_24:
      }
        (*(void (**)(uint64_t, void, void, void, void))(v18 + 16))(v18, 0, 0, 0, *(void *)(a1 + 40));
    }
    else
    {
      int v24 = IMOSLoggingEnabled();
      if (v11 | v13)
      {
        if (v24)
        {
          long long v25 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            id v26 = @"zone not created";
            id v27 = *(__CFString **)(a1 + 40);
            if (v13) {
              id v26 = @"user deleted zone";
            }
            *(_DWORD *)long long buf = 138412546;
            uint64_t v49 = v26;
            __int16 v50 = 2112;
            uint64_t v51 = v27;
            _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "We got a %@ error while fetching messages. %@", buf, 0x16u);
          }
        }
        if (v13)
        {
          if (IMOSLoggingEnabled())
          {
            long long v28 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Resetting local message sync state & last sync date after received user deleted zone error", buf, 2u);
            }
          }
          [*(id *)(a1 + 48) clearLocalSyncState:3];
          id v29 = [*(id *)(a1 + 48) ckUtilities];
          [v29 resetLastSyncDate];
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v30 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "Messages zone does not exist. Attempting to create one", buf, 2u);
          }
        }
        if ([*(id *)(a1 + 48) _messageZoneCreated])
        {
          [*(id *)(a1 + 48) _fetchMessageZoneChangesSyncType:*(void *)(a1 + 88) currentBatchCount:*(void *)(a1 + 72) + 1 maxNumberOfBatches:*(void *)(a1 + 80) activity:*(void *)(a1 + 56) completionBlock:*(void *)(a1 + 64)];
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v36 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "//---** Error creating  messages zone", buf, 2u);
            }
          }
          uint64_t v37 = *(void *)(a1 + 64);
          if (v37)
          {
            uint64_t v38 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D208] code:1 userInfo:0];
            (*(void (**)(uint64_t, void, void, void, void *))(v37 + 16))(v37, 0, 0, 0, v38);
          }
        }
      }
      else
      {
        if (v24)
        {
          __int16 v31 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
          {
            uint64_t v32 = *(__CFString **)(a1 + 40);
            *(_DWORD *)long long buf = 138412290;
            uint64_t v49 = v32;
            _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "//---** Error fetching messages: %@", buf, 0xCu);
          }
        }
        uint64_t v18 = *(void *)(a1 + 64);
        if (v18) {
          goto LABEL_24;
        }
      }
    }
  }
  else
  {
    [v14 setLatestSyncToken:*(void *)(a1 + 32)];
    BOOL v19 = *(unsigned char *)(a1 + 96) == 0;
    int v20 = IMOSLoggingEnabled();
    if (v19)
    {
      if (v20)
      {
        __int16 v33 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Done fetching changes from message zone.", buf, 2u);
        }
      }
      uint64_t v34 = *(void *)(a1 + 80);
      if (v34 >= 1 && *(void *)(a1 + 72) <= v34)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v39 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Done fetching changes from message zone during an initial sync. Let's not write up", buf, 2u);
          }
        }
        uint64_t v35 = 0;
      }
      else
      {
        uint64_t v35 = 1;
      }
      uint64_t v40 = IMGetDomainBoolForKeyWithDefaultValue();
      if (v40 && IMOSLoggingEnabled())
      {
        id v41 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Done fetching live records. Will now fetch archived records", buf, 2u);
        }
      }
      uint64_t v42 = *(void *)(a1 + 64);
      if (v42) {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(v42 + 16))(v42, 1, v40, v35, 0);
      }
    }
    else
    {
      if (v20)
      {
        int v21 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "There are more changes to fetch. Kicking off another batch of fetching", buf, 2u);
        }
      }
      [*(id *)(a1 + 48) syncBatchCompleted:*(void *)(a1 + 72)];
      id v22 = [*(id *)(a1 + 48) ckQueue];
      v43[0] = MEMORY[0x1E4F143A8];
      v43[1] = 3221225472;
      v43[2] = sub_1D97DD6AC;
      v43[3] = &unk_1E6B76C38;
      uint64_t v23 = *(void *)(a1 + 88);
      void v43[4] = *(void *)(a1 + 48);
      uint64_t v46 = v23;
      long long v47 = *(_OWORD *)(a1 + 72);
      id v44 = *(id *)(a1 + 56);
      id v45 = *(id *)(a1 + 64);
      dispatch_async(v22, v43);
    }
  }
}

uint64_t sub_1D97DD6AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _fetchMessageZoneChangesSyncType:*(void *)(a1 + 56) currentBatchCount:*(void *)(a1 + 64) + 1 maxNumberOfBatches:*(void *)(a1 + 72) activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D97DD90C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), 0, 0, 0, *(void *)(a1 + 32));
}

void sub_1D97DE1F4(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97DE010);
  }
  _Block_object_dispose((const void *)(v2 - 176), 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D97DE2E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _processRecordChange:a2];
}

void sub_1D97DE2F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v7 = a3;
  id v8 = a4;
  if (IMOSLoggingEnabled())
  {
    __int16 v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "***recordZoneChangeTokensUpdatedBlock should not get called", v10, 2u);
    }
  }
}

void sub_1D97DE3B8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412546;
      id v8 = v4;
      __int16 v9 = 2112;
      id v10 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "*** Deleted recordID %@ type %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

uint64_t sub_1D97DE4B0(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D97DE4C0(uint64_t a1)
{
}

void sub_1D97DE4C8(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  id v13 = a6;
  id v14 = a4;
  id v15 = a3;
  id v17 = a2;
  LOBYTE(v16) = [v11 _shouldFetchArchivedRecords:v12];
  [*(id *)(a1 + 32) _processRecordZoneFetchCompletionZoneID:v17 serverChangeToken:v15 clientChangeTokenData:v14 moreComing:a5 NSError:v13 syncType:*(void *)(a1 + 64) currentBatchCount:*(void *)(a1 + 72) maxNumberOfBatches:*(void *)(a1 + 80) shouldFetchArchivedRecords:v16 activity:*(void *)(a1 + 40) completionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D97DE5AC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processFetchRecordZoneChangesCompletionWithError_completionBlock_);
}

void sub_1D97DE68C(uint64_t a1, int a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = @"NO";
      if (a2) {
        id v6 = @"YES";
      }
      int v7 = 138412546;
      id v8 = v6;
      __int16 v9 = 2112;
      id v10 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Finished a sync of deletes because we had an incompatible message earlier (%@): %@", (uint8_t *)&v7, 0x16u);
    }
  }
}

void sub_1D97DEBA8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 3221225472;
  v3[2] = sub_1D97DEC3C;
  v3[3] = &unk_1E6B73030;
  void v3[4] = v1;
  id v4 = *(id *)(a1 + 48);
  [v1 _writeDirtyMessagesToCloudKitWithActivity:v2 completion:v3];
}

void sub_1D97DEC3C(uint64_t a1, int a2, void *a3)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = @"NO";
      if (a2) {
        int v7 = @"YES";
      }
      *(_DWORD *)long long buf = 138412546;
      id v15 = v7;
      __int16 v16 = 2112;
      id v17 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Completed message write %@ %@", buf, 0x16u);
    }
  }
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1D97DEDC8;
  void v10[3] = &unk_1E6B76CD0;
  id v8 = *(void **)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  char v13 = a2;
  id v11 = v5;
  id v12 = v8;
  id v9 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v10);
}

uint64_t sub_1D97DEDC8(uint64_t a1)
{
  [*(id *)(a1 + 32) _noteSyncEnded];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    id v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1D97DF078(uint64_t a1)
{
  return [*(id *)(a1 + 32) _noteSyncEnded];
}

void sub_1D97DF268(uint64_t a1)
{
  if ([*(id *)(a1 + 32) _shouldMarkAllMessagesAsNeedingSync])
  {
    [*(id *)(a1 + 32) clearLocalSyncState:2];
    [*(id *)(a1 + 32) _hasMarkedAllMessagesAsNeedingSync];
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2)
  {
    uint64_t v3 = -1;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "*** We were called to do an initial sync. Let's only fetch the first set of messages ***", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) setLatestSyncToken:0];
    uint64_t v3 = [*(id *)(a1 + 32) _numberOfBatchesOfMessagesToFetchInInitialSync];
    unint64_t v2 = *(void *)(a1 + 56);
  }
  int v5 = IMOSLoggingEnabled();
  if (v2 > 1)
  {
    if (v5)
    {
      id v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Unsupported sync type", buf, 2u);
      }
    }
    uint64_t v11 = *(void *)(a1 + 48);
    if (v11) {
      (*(void (**)(uint64_t, void, void))(v11 + 16))(v11, 0, 0);
    }
  }
  else
  {
    if (v5)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Marking any unsuccessfully synced messages as needing sync", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) _markAllUnsuccessFullSyncMessagesAsNeedingSync];
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished Marking any unsuccessfully synced messages as needing sync", buf, 2u);
      }
    }
    *(void *)long long buf = 0;
    id v22 = buf;
    uint64_t v23 = 0x2020000000;
    char v24 = 0;
    v19[0] = 0;
    v19[1] = v19;
    v19[2] = 0x2020000000;
    char v20 = 0;
    id v9 = *(void **)(a1 + 32);
    id v8 = *(void **)(a1 + 40);
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 3221225472;
    void v12[2] = sub_1D97DF5DC;
    uint64_t v12[3] = &unk_1E6B76D48;
    void v12[4] = v9;
    uint64_t v17 = v3;
    id v13 = v8;
    id v14 = *(id *)(a1 + 48);
    id v15 = buf;
    uint64_t v18 = *(void *)(a1 + 56);
    __int16 v16 = v19;
    [v9 _fetchMessageZoneChangesSyncType:1 currentBatchCount:0 maxNumberOfBatches:v3 activity:v13 completionBlock:v12];

    _Block_object_dispose(v19, 8);
    _Block_object_dispose(buf, 8);
  }
}

void sub_1D97DF5DC(uint64_t a1, int a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  id v9 = a5;
  if (v9 || !a2)
  {
    if (IMOSLoggingEnabled())
    {
      char v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24)) {
          int v21 = @"YES";
        }
        else {
          int v21 = @"NO";
        }
        *(_DWORD *)long long buf = 138412546;
        id v36 = v9;
        __int16 v37 = 2112;
        uint64_t v38 = v21;
        _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "******** Failed fetching live messages with CKError %@ completionBlockCalledWhenFetchFailed %@", buf, 0x16u);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97DFCF4;
    block[3] = &unk_1E6B76CF8;
    void block[4] = *(void *)(a1 + 32);
    uint64_t v18 = (id *)v26;
    id v22 = *(id *)(a1 + 48);
    uint64_t v23 = *(void *)(a1 + 64);
    v26[0] = v22;
    v26[1] = v23;
    char v27 = a2;
    BOOL v19 = &v25;
    id v25 = v9;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + 72);
    uint64_t v11 = *(void **)(a1 + 32);
    uint64_t v12 = *(void *)(a1 + 40);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1D97DF86C;
    v28[3] = &unk_1E6B76D20;
    char v32 = a3;
    char v33 = a4;
    v28[4] = v11;
    id v13 = *(id *)(a1 + 48);
    char v34 = a2;
    uint64_t v29 = 0;
    uint64_t v14 = *(void *)(a1 + 56);
    uint64_t v15 = *(void *)(a1 + 80);
    v31[0] = v13;
    v31[1] = v14;
    v31[3] = v15;
    id v16 = *(id *)(a1 + 40);
    uint64_t v17 = *(void *)(a1 + 64);
    id v30 = v16;
    v31[2] = v17;
    [v11 _fetchArchivedRecordsIfNeeded:a3 currentBatchCount:0 maxNumberOfBatches:v10 activity:v12 withCompletionBlock:v28];

    uint64_t v18 = (id *)v31;
    BOOL v19 = (id *)&v29;
  }
}

void sub_1D97DF86C(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v6 = a4;
  if (v6 || !a3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        if (*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24)) {
          uint64_t v11 = @"YES";
        }
        else {
          uint64_t v11 = @"NO";
        }
        *(_DWORD *)long long buf = 138412546;
        id v25 = v6;
        __int16 v26 = 2112;
        char v27 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "******** Failed fetching archived messages with CKError %@ completionBlockCalledWhenFetchFailed %@", buf, 0x16u);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97DFC80;
    block[3] = &unk_1E6B76CF8;
    void block[4] = *(void *)(a1 + 32);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 72);
    id v17 = v12;
    uint64_t v18 = v13;
    char v19 = a3;
    id v16 = v6;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    if (*(unsigned char *)(a1 + 88) && IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Done fetching archived records.", buf, 2u);
      }
    }
    if (*(unsigned char *)(a1 + 89))
    {
      uint64_t v8 = *(void *)(*(void *)(a1 + 64) + 8);
      if (*(unsigned char *)(v8 + 24))
      {
        if (IMOSLoggingEnabled())
        {
          id v9 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Not calling write messages on second callback from fetch archived records", buf, 2u);
          }
        }
      }
      else
      {
        *(unsigned char *)(v8 + 24) = 1;
        [*(id *)(a1 + 32) _kickOffWriteIfNeededForSyncType:*(void *)(a1 + 80) activity:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v14 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, " ****** This was an initial fetch. Not writing messages *****", buf, 2u);
        }
      }
      v20[0] = MEMORY[0x1E4F143A8];
      v20[1] = 3221225472;
      v20[2] = sub_1D97DFC24;
      v20[3] = &unk_1E6B76CD0;
      void v20[4] = *(void *)(a1 + 32);
      id v22 = *(id *)(a1 + 56);
      char v23 = *(unsigned char *)(a1 + 90);
      id v21 = *(id *)(a1 + 40);
      dispatch_async(MEMORY[0x1E4F14428], v20);
    }
  }
}

uint64_t sub_1D97DFC24(uint64_t a1)
{
  [*(id *)(a1 + 32) _noteSyncEnded];
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(result + 16);
    return v3();
  }
  return result;
}

uint64_t sub_1D97DFC80(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _noteSyncEnded];
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    if (!*(unsigned char *)(v3 + 24))
    {
      *(unsigned char *)(v3 + 24) = 1;
      id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
      return v4();
    }
  }
  return result;
}

uint64_t sub_1D97DFCF4(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _noteSyncEnded];
  if (*(void *)(a1 + 48))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 56) + 8);
    if (!*(unsigned char *)(v3 + 24))
    {
      *(unsigned char *)(v3 + 24) = 1;
      id v4 = *(uint64_t (**)(void))(*(void *)(a1 + 48) + 16);
      return v4();
    }
  }
  return result;
}

uint64_t sub_1D97DFEF8(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) recordZoneManager];
  [v2 deleteMessageZone];

  uint64_t v3 = *(void **)(a1 + 32);

  return [v3 clearLocalSyncState:3];
}

void sub_1D97E027C(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v3);
        }
        if (v2)
        {
          int v7 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          uint64_t v8 = [v7 recordName];
          BOOL v9 = v8 == 0;

          if (!v9)
          {
            uint64_t v10 = [v7 recordName];
            CFArrayAppendValue(v2, v10);
          }
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v32 count:16];
    }
    while (v4);
  }

  if (*(void *)(a1 + 40))
  {
    uint64_t v11 = [*(id *)(a1 + 48) errorAnalyzer];
    id v12 = [v11 extractRecordIDsDeletedFromCKPartialError:*(void *)(a1 + 40)];

    if ([v12 count])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Adding additional deleted record IDs from error", buf, 2u);
        }
      }
      [(__CFArray *)v2 addObjectsFromArray:v12];
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  uint64_t v14 = v2;
  uint64_t v15 = [(__CFArray *)v14 countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void *)(*((void *)&v21 + 1) + 8 * j);
        if (IMOSLoggingEnabled())
        {
          char v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v30 = v18;
            _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Deleted recordIDs %@", buf, 0xCu);
          }
        }
      }
      uint64_t v15 = [(__CFArray *)v14 countByEnumeratingWithState:&v21 objects:v31 count:16];
    }
    while (v15);
  }

  char v20 = [*(id *)(a1 + 48) _sharedIMDMessageStore];
  [v20 deleteMessagesFromTombStoneTableWithRecordIDs:v14];
}

uint64_t sub_1D97E05AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1D97E07EC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordDeletionCompletion_error_completionBlock_);
}

void sub_1D97E0D34(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1D97E0DD4;
  v5[3] = &unk_1E6B74478;
  id v4 = *(id *)(a1 + 48);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v2 _deleteMessagesWithRecordIDs:v3 completion:v5];
}

void sub_1D97E0DD4(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "********* Error while deleting messages %@", buf, 0xCu);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97E1008;
    block[3] = &unk_1E6B73A10;
    id v12 = *(id *)(a1 + 40);
    id v11 = v3;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    if (v4)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Kicking off another batch delete to cloudKit", buf, 2u);
      }
    }
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1D97E102C;
    v8[3] = &unk_1E6B73AB0;
    int v7 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v7;
    dispatch_async(MEMORY[0x1E4F14428], v8);
  }
}

uint64_t sub_1D97E1008(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1D97E102C(uint64_t a1)
{
  return [*(id *)(a1 + 32) syncDeletedMessagesToCloudKitWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1D97E122C()
{
  qword_1EBE2B9F0 = objc_alloc_init(IMDCKRecoverableMessageSyncController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97E1698(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordRead_);
}

uint64_t sub_1D97E16A4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordDeleted_type_);
}

uint64_t sub_1D97E16B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _onChangeTokenUpdated:a2 token:a3 data:a4];
}

uint64_t sub_1D97E16C8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordZoneFetchComplete_token_tokenData_moreComing_error_);
}

uint64_t sub_1D97E16E4(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onReadComplete_error_activity_completion_);
}

void sub_1D97E1870(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  objc_msgSend(*(id *)(a1 + 32), "setRecordsRead:", objc_msgSend(*(id *)(a1 + 32), "recordsRead") + 1);
  unint64_t v2 = [*(id *)(a1 + 40) _dateForKey:@"deleteDate"];
  uint64_t v3 = [*(id *)(a1 + 40) _stringForKey:@"guid"];
  int v4 = (void *)v3;
  if (v2) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        uint64_t v13 = v2;
        __int16 v14 = 2112;
        uint64_t v15 = v4;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | Failed reading recoverable message record. deleteDate: %@ and messageGUID:%@ cannot be nil", buf, 0x16u);
      }
    }
  }
  else
  {
    uint64_t v7 = [*(id *)(a1 + 40) _dataForKey:@"partBody"];
    uint64_t v8 = (void *)v7;
    if (v7 && (JWDecodeCodableObjectWithStandardAllowlist(), (id v9 = objc_claimAutoreleasedReturnValue()) != 0))
    {
      [*(id *)(a1 + 32) _onRecoverableMessagePartRecordReadWithDeleteDate:v2 messageGUID:v4 partBody:v9];
    }
    else
    {
      id v9 = +[IMDChatRegistry sharedInstance];
      id v11 = v4;
      uint64_t v10 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v11 count:1];
      [v9 moveMessagesWithGUIDsToRecentlyDeleted:v10 deleteDate:v2];
    }
  }
}

void sub_1D97E1EBC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97E1E10);
  }
  _Block_object_dispose(&a17, 8);
  _Block_object_dispose((const void *)(v23 - 160), 8);
  _Block_object_dispose(&a23, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D97E1F54(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D97E1F64(uint64_t a1)
{
}

void sub_1D97E1F6C(void *a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  id v13 = a2;
  if ([v13 integerValue] == a1[7])
  {
    *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = 1;
    uint64_t v9 = [objc_alloc(MEMORY[0x1E4F28D60]) initWithIndex:a1[7]];
    uint64_t v10 = *(void *)(a1[5] + 8);
    id v11 = *(void **)(v10 + 40);
    *(void *)(v10 + 40) = v9;

    id v12 = objc_msgSend(MEMORY[0x1E4F29238], "valueWithRange:", a3, a4);
    [*(id *)(*(void *)(a1[6] + 8) + 40) setObject:v12 forKeyedSubscript:v13];

    *a5 = 1;
  }
}

uint64_t sub_1D97E229C(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLatestSyncToken:*(void *)(a1 + 40)];
}

void sub_1D97E2880(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Attempting to create recoverable message zone", buf, 2u);
    }
  }
  if ([*(id *)(a1 + 32) _zoneCreated])
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    int v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      BOOL v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "** Failed to create recoverable message zone **", v8, 2u);
      }
    }
    uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:@"com.apple.Messages.recoverableMessageSync" code:1 userInfo:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    int v4 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

uint64_t sub_1D97E2B14(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    unint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }
  }
  [*(id *)(a1 + 32) setLatestSyncToken:0];
  return [*(id *)(a1 + 32) deleteChatBotRecoverableMessageSyncToken];
}

void sub_1D97E2D7C(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating recoverable message zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1D97E3154(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordWrite_error_recordNameToPartIndexAndRowID_);
}

void sub_1D97E3170(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
  id v6 = a4;
  objc_msgSend(*(id *)(a1 + 32), "_onWriteComplete:error:shouldWriteMore:activity:completion:", *(void *)(a1 + 64), v6, objc_msgSend(v5, "count") == 200, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1D97E39F4(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1D97E3A94;
  v5[3] = &unk_1E6B74478;
  id v4 = *(id *)(a1 + 48);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  [v2 _deleteRecoverableMessagesWithRecordIDs:v3 completion:v5];
}

void sub_1D97E3A94(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v14 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Recently Deleted | ********* Error while deleting recoverable messages %@", buf, 0xCu);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97E3CC8;
    block[3] = &unk_1E6B73A10;
    id v12 = *(id *)(a1 + 40);
    id v11 = v3;
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    if (v4)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Recently Deleted | kicking off another batch delete to cloudKit", buf, 2u);
      }
    }
    v8[0] = MEMORY[0x1E4F143A8];
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_1D97E3CEC;
    v8[3] = &unk_1E6B73AB0;
    int v7 = *(void **)(a1 + 40);
    void v8[4] = *(void *)(a1 + 32);
    id v9 = v7;
    dispatch_async(MEMORY[0x1E4F14428], v8);
  }
}

uint64_t sub_1D97E3CC8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, 0, *(void *)(a1 + 32));
  }
  return result;
}

uint64_t sub_1D97E3CEC(uint64_t a1)
{
  return [*(id *)(a1 + 32) syncRemovedRecoverableMessagesToCloudKitWithCompletion:*(void *)(a1 + 40)];
}

uint64_t sub_1D97E3F24(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordDeletionCompletion_error_completionBlock_);
}

void sub_1D97E4990(uint64_t a1)
{
  unint64_t v2 = +[IMDChatRegistry sharedInstance];
  id v3 = [v2 recoverableMessagesMetadataPendingCloudKitSaveWithLimit:200];

  if (v3 && [v3 count])
  {
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    id v6[2] = sub_1D97E4AFC;
    v6[3] = &unk_1E6B76EE0;
    int v4 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    id v7 = v4;
    id v8 = *(id *)(a1 + 48);
    id v9 = *(id *)(a1 + 56);
    [v3 enumerateObjectsUsingBlock:v6];
  }
  else if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Recently Deleted | No recoverable messages data to sync", buf, 2u);
    }
  }
}

void sub_1D97E4AFC(uint64_t a1, void *a2)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  int v4 = [*(id *)(a1 + 32) createCKRecordforRecoverableMessageMetadata:v3 zoneID:*(void *)(a1 + 40) recordNameToPartIndexAndRowID:*(void *)(a1 + 48)];
  if (v4)
  {
    [*(id *)(a1 + 56) addObject:v4];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v3;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "IMDCKRecoverableMessageSyncController | Recently Deleted: marking clean: Using partIndex fallback: could not convert message to CKRecord with metadata: %@", (uint8_t *)&v11, 0xCu);
      }
    }
    id v6 = [v3 objectForKey:@"messageRowID"];
    uint64_t v7 = [v6 longLongValue];
    id v8 = [v3 objectForKey:@"partIndex"];
    uint64_t v9 = [v8 longLongValue];
    uint64_t v10 = +[IMDChatRegistry sharedInstance];
    [v10 updateRecoverableMessageSyncState:1 forMessageRowID:v7 onPartIndex:v9];
  }
}

void sub_1D97E4EA0(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = (__CFArray *)objc_alloc_init(MEMORY[0x1E4F1CA48]);
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  id v3 = *(id *)(a1 + 32);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v32 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v26;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v26 != v5) {
          objc_enumerationMutation(v3);
        }
        if (v2)
        {
          uint64_t v7 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          id v8 = [v7 recordName];
          BOOL v9 = v8 == 0;

          if (!v9)
          {
            uint64_t v10 = [v7 recordName];
            CFArrayAppendValue(v2, v10);
          }
        }
      }
      uint64_t v4 = [v3 countByEnumeratingWithState:&v25 objects:v32 count:16];
    }
    while (v4);
  }

  if (*(void *)(a1 + 40))
  {
    int v11 = [*(id *)(a1 + 48) errorAnalyzer];
    id v12 = [v11 extractRecordIDsDeletedFromCKPartialError:*(void *)(a1 + 40)];

    if ([v12 count])
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Adding additional deleted recoverable record IDs from error", buf, 2u);
        }
      }
      [(__CFArray *)v2 addObjectsFromArray:v12];
    }
  }
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v14 = v2;
  uint64_t v15 = [(__CFArray *)v14 countByEnumeratingWithState:&v21 objects:v31 count:16];
  if (v15)
  {
    uint64_t v16 = *(void *)v22;
    do
    {
      for (uint64_t j = 0; j != v15; ++j)
      {
        if (*(void *)v22 != v16) {
          objc_enumerationMutation(v14);
        }
        uint64_t v18 = *(void *)(*((void *)&v21 + 1) + 8 * j);
        if (IMOSLoggingEnabled())
        {
          char v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v30 = v18;
            _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Deleted recoverable recordIDs %@", buf, 0xCu);
          }
        }
      }
      uint64_t v15 = [(__CFArray *)v14 countByEnumeratingWithState:&v21 objects:v31 count:16];
    }
    while (v15);
  }

  char v20 = +[IMDChatRegistry sharedInstance];
  [v20 clearRecoverableMessageTombStones];
}

uint64_t sub_1D97E51D0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

uint64_t sub_1D97E57C0(uint64_t a1)
{
  unint64_t v2 = [*(id *)(a1 + 32) recordZoneManager];
  [v2 deleteRecoverableMessageZone];

  id v3 = *(void **)(a1 + 32);

  return [v3 clearLocalSyncState:3];
}

uint64_t sub_1D97E59F4()
{
  qword_1EBE2B9F8 = objc_alloc_init(IMDRelayTranscodeController);

  return MEMORY[0x1F41817F8]();
}

id IMDaemonCoreBundle()
{
  if (qword_1EA8CA5A8 != -1) {
    dispatch_once(&qword_1EA8CA5A8, &unk_1F3391AC0);
  }
  char v0 = (void *)qword_1EA8CA5B0;

  return v0;
}

uint64_t sub_1D97E5E78()
{
  qword_1EA8CA5B0 = [MEMORY[0x1E4F28B50] bundleForClass:objc_opt_class()];

  return MEMORY[0x1F41817F8]();
}

id sub_1D97E5ED4()
{
  if (qword_1EBE2BC40 != -1) {
    dispatch_once(&qword_1EBE2BC40, &unk_1F3391AE0);
  }
  char v0 = (void *)qword_1EBE2BC38;

  return v0;
}

uint64_t sub_1D97E5F28()
{
  qword_1EBE2BC38 = (uint64_t)objc_alloc_init(MEMORY[0x1E4F6C3F8]);

  return MEMORY[0x1F41817F8]();
}

void sub_1D97E5F64(void *a1)
{
  _DWORD v5[2] = *MEMORY[0x1E4F143B8];
  v4[0] = @"action";
  v4[1] = @"time";
  v5[0] = @"incomingMessageProcessedByDaemon";
  unint64_t v2 = objc_msgSend(NSNumber, "numberWithDouble:");
  v5[1] = v2;
  id v3 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];

  [a1 postCoreAutomationNotificationWithDictionary:v3 withVerboseLogging:1];
}

void sub_1D97E641C()
{
}

uint64_t sub_1D97E6A34(uint64_t a1, void *a2)
{
  id v8 = a2;
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v3 = v8;
    uint64_t v4 = [*(id *)(a1 + 32) toIdentifier];
    uint64_t v5 = [v4 _stripFZIDPrefix];
    int v6 = [v3 isEqualToString:v5];

    if (v6) {
      *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) |= 0x10000000uLL;
    }
  }

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97E9DF8()
{
  qword_1EBE2BA00 = (uint64_t)objc_alloc_init((Class)objc_opt_class());

  return MEMORY[0x1F41817F8]();
}

void sub_1D97EA61C(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  [*(id *)(a1 + 32) _savePreviousDeviceState:*(void *)(a1 + 40)];
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      NSStringFromIMDCKBackupControllerResult(a2);
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      if (v6)
      {
        BOOL v9 = NSString;
        id v3 = [v6 localizedDescription];
        uint64_t v10 = [v9 stringWithFormat:@"Error: %@", v3];
      }
      else
      {
        uint64_t v10 = &stru_1F3398578;
      }
      *(_DWORD *)long long buf = 138412546;
      id v13 = v8;
      __int16 v14 = 2112;
      uint64_t v15 = v10;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Finished checking iCloud backup state with result: %@ %@", buf, 0x16u);
      if (v6)
      {
      }
    }
  }
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11) {
    (*(void (**)(uint64_t, unint64_t, id))(v11 + 16))(v11, a2, v6);
  }
}

__CFString *NSStringFromIMDCKBackupControllerResult(unint64_t a1)
{
  if (a1 > 0xB) {
    return 0;
  }
  else {
    return off_1E6B76FA0[a1];
  }
}

void sub_1D97EA7D0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
LABEL_2:
    uint64_t v6 = 8;
  }
  else
  {
    switch(a2)
    {
      case 0:
        goto LABEL_2;
      case 1:
        [*(id *)(a1 + 32) writeUserDefault:0 forKey:@"IMDCKBackupControllerWrittenQuotaRecordKeyV2"];
        id v5 = 0;
        goto LABEL_10;
      case 2:
LABEL_10:
        uint64_t v6 = 4;
        break;
      case 3:
        if ([*(id *)(a1 + 32) iCloudBackupsDisabled])
        {
          [*(id *)(a1 + 32) setICloudBackupsDisabled:0];
          uint64_t v6 = 2;
        }
        else
        {
          uint64_t v6 = 7;
        }
        goto LABEL_18;
      case 4:
        if ([*(id *)(a1 + 32) iCloudBackupsDisabled]) {
          uint64_t v6 = 6;
        }
        else {
          uint64_t v6 = [*(id *)(a1 + 32) _attemptToDisableiCloudBackupsWithCurrentDeviceState:*(void *)(a1 + 40)];
        }
LABEL_18:
        id v5 = 0;
        break;
      default:
        uint64_t v6 = 0;
        break;
    }
  }
  uint64_t v7 = *(void *)(a1 + 48);
  if (v7)
  {
    id v8 = v5;
    (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v7, v6);
    id v5 = v8;
  }
}

void sub_1D97EB8DC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97EB8A4);
  }
  _Unwind_Resume(a1);
}

void sub_1D97EBBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9)
{
  if (a2 == 1)
  {
    id v9 = objc_begin_catch(exception_object);
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = [v9 description];
        LODWORD(a9) = 138412290;
        *(void *)((char *)&a9 + 4) = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Exception creating weak ref for MBManager: %@", (uint8_t *)&a9, 0xCu);
      }
    }

    objc_end_catch();
    JUMPOUT(0x1D97EBB6CLL);
  }
  _Unwind_Resume(exception_object);
}

void sub_1D97EBCA8()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  qword_1EA8CA5B8 = MEMORY[0x1E0169C30](@"MBManager", @"MobileBackup");
  if (IMOSLoggingEnabled())
  {
    char v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (qword_1EA8CA5B8) {
        uint64_t v1 = @"YES";
      }
      else {
        uint64_t v1 = @"NO";
      }
      int v2 = 138412290;
      id v3 = v1;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Loaded MBManagerClass: %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

void sub_1D97EBE84()
{
  uint64_t v4 = *MEMORY[0x1E4F143B8];
  off_1EA8CA5C8 = (_UNKNOWN *)MEMORY[0x1E0169C40]("BYSetupAssistantNeedsToRun", @"SetupAssistant");
  if (IMOSLoggingEnabled())
  {
    char v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      if (off_1EA8CA5C8) {
        uint64_t v1 = @"YES";
      }
      else {
        uint64_t v1 = @"NO";
      }
      int v2 = 138412290;
      id v3 = v1;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Linked BYSetupAssistantNeedsToRun ok: %@", (uint8_t *)&v2, 0xCu);
    }
  }
}

id _IMCreatePredicateWithDeviceUDIDAndDeviceUUID(void *a1, void *a2)
{
  id v3 = a1;
  id v4 = a2;
  id v5 = v4;
  if (v3 && v4)
  {
    [MEMORY[0x1E4F28F60] predicateWithFormat:@"deviceId = %@ AND deviceUDID = %@ AND domain = %@", v3, v4, @"MediaDomain"];
    uint64_t v6 = LABEL_8:;
    goto LABEL_9;
  }
  if (v4)
  {
    [MEMORY[0x1E4F28F60] predicateWithFormat:@"deviceUDID = %@ AND domain = %@", v4, @"MediaDomain", v9];
    goto LABEL_8;
  }
  if (v3)
  {
    [MEMORY[0x1E4F28F60] predicateWithFormat:@"deviceId = %@ AND domain = %@", v3, @"MediaDomain", v9];
    goto LABEL_8;
  }
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Failed to create predicate because both deviceUDID and deviceUUID are nil", buf, 2u);
    }
  }
  uint64_t v6 = 0;
LABEL_9:

  return v6;
}

void sub_1D97EC8F0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v7)
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = [*(id *)(a1 + 32) predicateFormat];
        int v13 = 138412546;
        __int16 v14 = v9;
        __int16 v15 = 2112;
        id v16 = v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Failed to update cloudkit with query '%@', with error: %@", (uint8_t *)&v13, 0x16u);
      }
    }
  }
  else
  {
    if (v7)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = [*(id *)(a1 + 32) predicateFormat];
        int v13 = 138412290;
        __int16 v14 = v11;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Successfully updated cloudkit with query: '%@'", (uint8_t *)&v13, 0xCu);
      }
    }
    [*(id *)(a1 + 40) writeUserDefault:MEMORY[0x1E4F1CC38] forKey:@"IMDCKBackupControllerWrittenQuotaRecordKeyV2"];
  }
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, BOOL, id))(v12 + 16))(v12, v6 == 0, v6);
  }
}

void sub_1D97ECAA0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97ECA2CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97EE008()
{
  id v2 = [(id)*MEMORY[0x1E4F6D1C8] stringByResolvingAndStandardizingPath];
  IMSharedHelperEnsureDirectoryExistsAtPath();
  uint64_t v0 = [v2 stringByAppendingPathComponent:@"rateLimiter.plist"];
  uint64_t v1 = (void *)qword_1EBE2BE58;
  qword_1EBE2BE58 = v0;
}

void sub_1D97EE3A8(uint64_t a1)
{
  id v2 = (void *)MEMORY[0x1E4F1CB10];
  id v3 = +[IMDCollaborationNoticeRateLimiter peristencePath];
  id v4 = [v2 fileURLWithPath:v3];

  id v5 = [*(id *)(a1 + 32) noticeEventHistory];
  id v10 = 0;
  int v6 = [v5 writeToURL:v4 error:&v10];
  id v7 = v10;

  if (v6) {
    BOOL v8 = v7 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8)
  {
    uint64_t v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1D9904888((uint64_t)v7, v9);
    }
  }
}

__CFString *sub_1D97EE50C()
{
  return @"attachment";
}

id sub_1D97EE518(void *a1)
{
  uint64_t v2 = [a1 permanentHighQualityLocalPath];
  if (v2)
  {
    id v3 = (void *)v2;
    id v4 = [a1 _fileManager];
    id v5 = [a1 permanentHighQualityLocalPath];
    int v6 = [v4 fileExistsAtPath:v5];

    if (v6)
    {
      id v7 = (void *)MEMORY[0x1E4F1CB10];
      uint64_t v8 = [a1 permanentHighQualityLocalPath];
LABEL_7:
      int v13 = (void *)v8;
      uint64_t v9 = [v7 fileURLWithPath:v8];

      goto LABEL_9;
    }
  }
  uint64_t v9 = [a1 localPath];
  if (!v9) {
    goto LABEL_9;
  }
  id v10 = [a1 _fileManager];
  uint64_t v11 = [a1 localPath];
  int v12 = [v10 fileExistsAtPath:v11];

  if (v12)
  {
    id v7 = (void *)MEMORY[0x1E4F1CB10];
    uint64_t v8 = [a1 localPath];
    goto LABEL_7;
  }
  uint64_t v9 = 0;
LABEL_9:

  return v9;
}

uint64_t sub_1D97EE650(void *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = [a1 cloudKitServerChangeTokenBlob];
  uint64_t v3 = [v2 length];

  if (v3)
  {
    id v4 = objc_alloc(MEMORY[0x1E4F28DC0]);
    id v5 = [a1 cloudKitServerChangeTokenBlob];
    id v10 = 0;
    int v6 = (void *)[v4 initForReadingFromData:v5 error:&v10];
    id v7 = v10;

    uint64_t v3 = [objc_alloc(MEMORY[0x1E4F1A2D8]) initWithCoder:v6];
    if (v7 && IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v12 = v7;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Failed to unarchive ckrecord. Error: %@", buf, 0xCu);
      }
    }
  }
  return v3;
}

id sub_1D97EE7B0(void *a1)
{
  uint64_t v1 = (void *)[a1 _copyCKRecordFromExistingCKMetadata];
  uint64_t v2 = [v1 recordID];
  uint64_t v3 = (void *)[v2 copy];

  return v3;
}

id sub_1D97EE80C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  if (v3
    && ([MEMORY[0x1E4F28CB8] defaultManager],
        id v4 = objc_claimAutoreleasedReturnValue(),
        [v3 path],
        id v5 = objc_claimAutoreleasedReturnValue(),
        int v6 = [v4 fileExistsAtPath:v5],
        v5,
        v4,
        v6))
  {
    id v7 = [v3 path];
    uint64_t v8 = IMSharedHelperMD5HashOfFileAtPath();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

void sub_1D97EE9A0(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == v2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97EE948);
  }
  objc_end_catch();
  _Unwind_Resume(exc_buf);
}

id sub_1D97EE9DC(void *a1)
{
  int v2 = [a1 _assetURLToInsertToRecord];
  id v3 = [a1 md5HashForURL:v2];

  return v3;
}

void sub_1D97EEA34(void *a1, uint64_t a2, void *a3)
{
  id v8 = a3;
  id v4 = [a1 cloudKitServerChangeTokenBlob];
  uint64_t v5 = [v4 length];

  if (v5)
  {
    int v6 = (void *)[a1 _copyCKRecordFromExistingCKMetadata];
    id v7 = [v6 etag];
    [v8 setEtag:v7];

    [v8 setKnownToServer:1];
  }
}

id sub_1D97EEAD8(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  id v8 = [a1 cloudKitRecordID];
  if (v8)
  {

    goto LABEL_4;
  }
  if ([v7 length])
  {
LABEL_4:
    uint64_t v9 = [a1 cloudKitRecordID];

    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        uint64_t v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          id v12 = [a1 cloudKitRecordID];
          int v20 = 138412290;
          long long v21 = v12;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Record ID from existing cloudKitRecordID: %@", (uint8_t *)&v20, 0xCu);
        }
      }
      id v13 = objc_alloc(MEMORY[0x1E4F1A2F8]);
      __int16 v14 = [a1 cloudKitRecordID];
      __int16 v15 = (void *)[v13 initWithRecordName:v14 zoneID:v6];
    }
    else
    {
      if (v10)
      {
        id v16 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          LOWORD(v20) = 0;
          _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "No cloudKitRecordID, derived record ID", (uint8_t *)&v20, 2u);
        }
      }
      uint64_t v17 = [a1 _ckUniqueID];
      __int16 v15 = +[CKRecordUtilities recordIDUsingSalt:v7 zoneID:v6 guid:v17];
    }
    goto LABEL_20;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Cannot generate record ID because salt is nil.", (uint8_t *)&v20, 2u);
    }
  }
  __int16 v15 = 0;
LABEL_20:

  return v15;
}

uint64_t sub_1D97EED80(void *a1)
{
  if ([a1 transferState] == 9) {
    return 5;
  }

  return [a1 transferState];
}

id sub_1D97EEDD0(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v99 = *MEMORY[0x1E4F143B8];
  id v94 = a3;
  id v6 = a4;
  uint64_t v7 = [a1 _copyCKRecordFromExistingCKMetadata];
  if (v7)
  {
    id v8 = (void *)v7;
    if (IMOSLoggingEnabled())
    {
      uint64_t v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v10 = [v8 recordID];
        id v11 = [v10 recordName];
        id v12 = [a1 guid];
        *(_DWORD *)long long buf = 138412546;
        id v96 = v11;
        __int16 v97 = 2112;
        unint64_t v98 = v12;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Initialed CKRecord %@ for transfer %@ using record data from DB", buf, 0x16u);
      }
    }
    goto LABEL_12;
  }
  uint64_t v13 = [v6 length];
  int v14 = IMOSLoggingEnabled();
  if (v13)
  {
    if (v14)
    {
      __int16 v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Initializing CKRecord using derived record ID", buf, 2u);
      }
    }
    id v16 = [a1 _ckUniqueID];
    uint64_t v17 = +[CKRecordUtilities recordIDUsingSalt:v6 zoneID:v94 guid:v16];

    id v18 = objc_alloc(MEMORY[0x1E4F1A2D8]);
    char v19 = [MEMORY[0x1E4F6E780] _recordType];
    id v8 = (void *)[v18 initWithRecordType:v19 recordID:v17];

    [a1 _setRecordPropertiesBasedOnExistingRecord:v8];
LABEL_12:
    id v20 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
    [v20 setObject:&unk_1F33C5DD8 forKey:@"vers"];
    long long v21 = [a1 guid];
    [v20 setObject:v21 forKey:@"aguid"];

    uint64_t v22 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a1, "hideAttachment"));
    [v20 setObject:v22 forKey:@"ha"];

    long long v23 = [a1 userInfo];

    if (v23)
    {
      long long v24 = [a1 userInfo];
      [v20 setObject:v24 forKey:@"ui"];
    }
    long long v25 = [a1 stickerUserInfo];

    if (v25)
    {
      long long v26 = [a1 stickerUserInfo];
      [v20 setObject:v26 forKey:@"sui"];
    }
    long long v27 = [a1 attributionInfo];

    if (!v27) {
      goto LABEL_34;
    }
    long long v28 = [a1 attributionInfo];
    uint64_t v29 = IMStripTransferConstraintAndSizeKeys();

    uint64_t v30 = [a1 previewGenerationState];
    if ((unint64_t)(v30 - 1) >= 2)
    {
      if (v30)
      {
LABEL_33:
        [v20 setObject:v29 forKey:@"aui"];

LABEL_34:
        uint64_t v42 = NSNumber;
        long long v43 = [a1 createdDate];
        [v43 timeIntervalSinceReferenceDate];
        id v45 = [v42 numberWithLongLong:(uint64_t)v44];
        [v20 setObject:v45 forKey:@"cdt"];

        uint64_t v46 = NSNumber;
        long long v47 = [a1 startDate];
        [v47 timeIntervalSinceReferenceDate];
        uint64_t v49 = [v46 numberWithLongLong:(uint64_t)v48];
        [v20 setObject:v49 forKey:@"sdt"];

        __int16 v50 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(a1, "totalBytes"));
        [v20 setObject:v50 forKey:@"tb"];

        uint64_t v51 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a1, "isSticker"));
        [v20 setObject:v51 forKey:@"is"];

        __int16 v52 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(a1, "isIncoming"));
        [v20 setObject:v52 forKey:@"ig"];

        uint64_t v53 = [a1 filename];
        BOOL v54 = [v53 length] == 0;

        if (!v54)
        {
          id v55 = [a1 filename];
          [v20 setObject:v55 forKey:@"tn"];
        }
        __int16 v56 = [a1 localPath];
        BOOL v57 = [v56 length] == 0;

        if (!v57)
        {
          __int16 v58 = [a1 localPath];
          [v20 setObject:v58 forKey:@"fn"];
        }
        uint64_t v59 = [a1 backwardsCompatibleTransferState];
        uint64_t v60 = [NSNumber numberWithInteger:v59];
        [v20 setObject:v60 forKey:@"st"];

        id v61 = [a1 type];
        BOOL v62 = [v61 length] == 0;

        if (!v62)
        {
          id v63 = [a1 type];
          [v20 setObject:v63 forKey:@"t"];
        }
        uint64_t v64 = [a1 mimeType];
        BOOL v65 = [v64 length] == 0;

        if (!v65)
        {
          char v66 = [a1 mimeType];
          [v20 setObject:v66 forKey:@"mimet"];
        }
        char v67 = [a1 _assetURLToInsertToRecord];
        if (v67
          && ([MEMORY[0x1E4F28CB8] defaultManager],
              id v68 = objc_claimAutoreleasedReturnValue(),
              [v67 path],
              uint64_t v69 = objc_claimAutoreleasedReturnValue(),
              int v70 = [v68 fileExistsAtPath:v69],
              v69,
              v68,
              v70))
        {
          __int16 v71 = (void *)[objc_alloc(MEMORY[0x1E4F19E50]) initWithFileURL:v67];
          [v8 _setCKRecordAsset:v71 forKey:@"lqa"];
          char v72 = [v67 path];
          unint64_t v73 = [v72 lastPathComponent];

          if (v73)
          {
            if (![v73 length] && IMOSLoggingEnabled())
            {
              id v74 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138412546;
                id v96 = v73;
                __int16 v97 = 2112;
                unint64_t v98 = v67;
                _os_log_impl(&dword_1D967A000, v74, OS_LOG_TYPE_INFO, "**** File a radar **** Asset last path component %@ from url %@ is empty", buf, 0x16u);
              }
            }
            [v20 setObject:v73 forKey:@"pathc"];
          }
          else if (IMOSLoggingEnabled())
          {
            uint64_t v76 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412290;
              id v96 = v67;
              _os_log_impl(&dword_1D967A000, v76, OS_LOG_TYPE_INFO, "**** File a radar **** Asset last path component from url %@ is nil so cannot save it to metadata", buf, 0xCu);
            }
          }
          uint64_t v77 = [a1 md5HashForURL:v67];
          if ([v77 length]) {
            [v20 setObject:v77 forKey:@"mdh"];
          }
        }
        else if (IMOSLoggingEnabled())
        {
          uint64_t v75 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v75, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v96 = v67;
            _os_log_impl(&dword_1D967A000, v75, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord **** Transfer did not have URL or asset was missing on disk. URL %@", buf, 0xCu);
          }
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v78 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v78, OS_LOG_TYPE_INFO))
          {
            uint64_t v79 = [a1 localPath];
            *(_DWORD *)long long buf = 138412290;
            id v96 = v79;
            _os_log_impl(&dword_1D967A000, v78, OS_LOG_TYPE_INFO, "Transfer file path %@", buf, 0xCu);
          }
        }
        uint64_t v80 = [a1 _auxVideoPathIfItExists];
        if ([v80 length])
        {
          id v81 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v80];
          if (v81)
          {
            int v82 = [MEMORY[0x1E4F28CB8] defaultManager];
            uint64_t v83 = [v81 path];
            int v84 = [v82 fileExistsAtPath:v83];

            if (v84)
            {
              if (IMOSLoggingEnabled())
              {
                int v85 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
                {
                  uint64_t v86 = [a1 guid];
                  *(_DWORD *)long long buf = 138412290;
                  id v96 = v86;
                  _os_log_impl(&dword_1D967A000, v85, OS_LOG_TYPE_INFO, "%@ transfer has an aux video asset", buf, 0xCu);
                }
              }
              __int16 v87 = (void *)[objc_alloc(MEMORY[0x1E4F19E50]) initWithFileURL:v81];
              [v8 _setCKRecordAsset:v87 forKey:@"avid"];
              uint64_t v88 = [v81 path];
              id v89 = [v88 lastPathComponent];

              if (v89)
              {
                [v20 setObject:v89 forKey:@"auxpathc"];
              }
              else if (IMOSLoggingEnabled())
              {
                id v90 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v90, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138412290;
                  id v96 = v81;
                  _os_log_impl(&dword_1D967A000, v90, OS_LOG_TYPE_INFO, "**** File a radar **** Aux asset last path component from url %@ is nil so cannot save it to metadata", buf, 0xCu);
                }
              }
            }
          }
        }
        uint64_t v91 = JWEncodeDictionary();
        id v92 = (void *)[v91 _FTCopyGzippedData];
        [v8 _setCKRecordData:v92 forKey:@"cm"];
        id v38 = v8;

        goto LABEL_82;
      }
      char v34 = (void *)[v29 mutableCopy];
      uint64_t v35 = v34;
      if (v34) {
        id v36 = v34;
      }
      else {
        id v36 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      uint64_t v39 = v36;

      [v39 setObject:MEMORY[0x1E4F1CC38] forKeyedSubscript:*MEMORY[0x1E4F6D400]];
    }
    else
    {
      __int16 v31 = (void *)[v29 mutableCopy];
      char v32 = v31;
      if (v31) {
        id v33 = v31;
      }
      else {
        id v33 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
      }
      uint64_t v39 = v33;

      uint64_t v40 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(a1, "previewGenerationState") == 1);
      [v39 setObject:v40 forKeyedSubscript:*MEMORY[0x1E4F6D418]];
    }
    uint64_t v41 = [v39 copy];

    uint64_t v29 = (void *)v41;
    goto LABEL_33;
  }
  if (v14)
  {
    __int16 v37 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Cannot initialize CKRecord using derived record ID because salt is nil.", buf, 2u);
    }
  }
  id v38 = 0;
LABEL_82:

  return v38;
}

id sub_1D97EFAAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  id v4 = [v3 _dataForKey:@"cm"];
  uint64_t v5 = [v4 length];

  if (v5)
  {
    id v6 = [v3 _dataForKey:@"cm"];
    uint64_t v7 = [v6 _FTOptionallyDecompressData];
  }
  else
  {
    id v8 = [v3 _dataForKey:@"m"];
    uint64_t v9 = [v8 length];

    if (v9)
    {
      uint64_t v7 = [v3 _dataForKey:@"m"];
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        int v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          int v12 = 138412290;
          id v13 = v3;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "No transfer metadata found for record:%@", (uint8_t *)&v12, 0xCu);
        }
      }
      uint64_t v7 = 0;
    }
  }

  return v7;
}

void sub_1D97EFC34(void *a1, uint64_t a2, void *a3)
{
  id v4 = [a3 fileURL];
  [a1 cleanUpAssetURL:v4];
}

void sub_1D97EFC8C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if (v3)
  {
    id v4 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v5 = [v3 path];
    int v6 = [v4 fileExistsAtPath:v5];

    if (v6)
    {
      uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
      id v12 = 0;
      char v8 = [v7 removeItemAtURL:v3 error:&v12];
      id v9 = v12;

      int v10 = IMOSLoggingEnabled();
      if (v8)
      {
        if (v10)
        {
          id v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v14 = v3;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Cleaned up attachment asset at %@", buf, 0xCu);
          }
LABEL_11:
        }
      }
      else if (v10)
      {
        id v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          id v14 = v3;
          __int16 v15 = 2112;
          id v16 = v9;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Failed cleaning up attachment asset at %@, error %@", buf, 0x16u);
        }
        goto LABEL_11;
      }
    }
  }
}

uint64_t sub_1D97EFE60(void *a1, uint64_t a2, void *a3)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 _assetForKey:@"lqa"];
  if (!v5) {
    goto LABEL_42;
  }
  if ([a1 transferState]
    && ([MEMORY[0x1E4F28CB8] defaultManager],
        int v6 = objc_claimAutoreleasedReturnValue(),
        [a1 localPath],
        uint64_t v7 = objc_claimAutoreleasedReturnValue(),
        int v8 = [v6 fileExistsAtPath:v7],
        v7,
        v6,
        v8))
  {
    id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
    int v10 = [a1 localPath];
    id v41 = 0;
    id v11 = [v9 attributesOfItemAtPath:v10 error:&v41];
    id v12 = (__CFString *)v41;

    if (v12)
    {
      if (IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          id v14 = [a1 localPath];
          *(_DWORD *)long long buf = 138412546;
          long long v43 = v14;
          __int16 v44 = 2112;
          id v45 = v12;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Could not read file attributes of existing attachment at %@, %@", buf, 0x16u);
        }
      }
      goto LABEL_41;
    }
    char v19 = [v5 fileURL];
    if (!v19
      || ([MEMORY[0x1E4F28CB8] defaultManager],
          id v20 = objc_claimAutoreleasedReturnValue(),
          [v19 path],
          long long v21 = objc_claimAutoreleasedReturnValue(),
          int v22 = [v20 fileExistsAtPath:v21],
          v21,
          v20,
          !v22))
    {
      if (IMOSLoggingEnabled())
      {
        long long v28 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
        {
          uint64_t v29 = [v19 path];
          *(_DWORD *)long long buf = 138412546;
          long long v43 = v29;
          __int16 v44 = 2112;
          id v45 = 0;
          _os_log_impl(&dword_1D967A000, v28, OS_LOG_TYPE_INFO, "Could not find file of the asset at %@, %@", buf, 0x16u);
        }
      }
      id v12 = 0;
      goto LABEL_40;
    }
    long long v23 = [MEMORY[0x1E4F28CB8] defaultManager];
    long long v24 = [v19 path];
    id v40 = 0;
    long long v25 = [v23 attributesOfItemAtPath:v24 error:&v40];
    id v12 = (__CFString *)v40;

    if (v12)
    {
      if (IMOSLoggingEnabled())
      {
        long long v26 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
        {
          long long v27 = [v19 path];
          *(_DWORD *)long long buf = 138412546;
          long long v43 = v27;
          __int16 v44 = 2112;
          id v45 = v12;
          _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Could not read file attributes of new attachment at %@, %@", buf, 0x16u);
        }
      }
LABEL_39:

LABEL_40:
LABEL_41:

LABEL_42:
      uint64_t v18 = 0;
      goto LABEL_43;
    }
    uint64_t v30 = *MEMORY[0x1E4F28390];
    __int16 v31 = [v11 objectForKey:*MEMORY[0x1E4F28390]];
    uint64_t v32 = [v25 objectForKey:v30];
    id v33 = (__CFString *)v32;
    if (!v31 || !v32)
    {
      if (IMOSLoggingEnabled())
      {
        id v38 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          long long v43 = v33;
          __int16 v44 = 2112;
          id v45 = v31;
          _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "Missing file size to compare: cloud size %@ local size %@", buf, 0x16u);
        }
      }
      goto LABEL_39;
    }
    unint64_t v34 = [(__CFString *)v31 unsignedLongValue];
    unint64_t v35 = [(__CFString *)v33 unsignedLongValue];
    BOOL v36 = v34 >= v35;
    uint64_t v18 = v34 < v35;
    if (!v36 && IMOSLoggingEnabled())
    {
      __int16 v37 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412802;
        long long v43 = @"YES";
        __int16 v44 = 2112;
        id v45 = v33;
        __int16 v46 = 2112;
        long long v47 = v31;
        _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Found a better asset in CKRecord %@, cloud size %@ local size %@", buf, 0x20u);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        id v16 = [a1 guid];
        uint64_t v17 = [a1 localPath];
        *(_DWORD *)long long buf = 138412546;
        long long v43 = v16;
        __int16 v44 = 2112;
        id v45 = v17;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "For attachment %@ local file not found at %@", buf, 0x16u);
      }
    }
    uint64_t v18 = [MEMORY[0x1E4F6E780] attachmentRecordHasAsset:v4];
  }
LABEL_43:

  return v18;
}

BOOL sub_1D97F0484(void *a1, uint64_t a2, void *a3)
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  uint64_t v5 = [v4 _assetForKey:@"lqa"];
  if (v5)
  {
    int v6 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v7 = [a1 localPath];
    int v8 = [v6 fileExistsAtPath:v7];

    if (v8)
    {
      id v9 = [MEMORY[0x1E4F28CB8] defaultManager];
      int v10 = [a1 localPath];
      id v36 = 0;
      id v11 = [v9 attributesOfItemAtPath:v10 error:&v36];
      id v12 = v36;

      if (v12)
      {
        if (IMOSLoggingEnabled())
        {
          id v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            id v14 = [a1 localPath];
            *(_DWORD *)long long buf = 138412546;
            id v38 = v14;
            __int16 v39 = 2112;
            id v40 = v12;
            _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Could not read file attributes of local attachment at %@, %@", buf, 0x16u);
          }
        }
      }
      else
      {
        id v16 = [v5 fileURL];
        if (v16
          && ([MEMORY[0x1E4F28CB8] defaultManager],
              uint64_t v17 = objc_claimAutoreleasedReturnValue(),
              [v16 path],
              uint64_t v18 = objc_claimAutoreleasedReturnValue(),
              int v19 = [v17 fileExistsAtPath:v18],
              v18,
              v17,
              v19))
        {
          id v20 = [MEMORY[0x1E4F28CB8] defaultManager];
          long long v21 = [v16 path];
          id v35 = 0;
          int v22 = [v20 attributesOfItemAtPath:v21 error:&v35];
          id v12 = v35;

          if (v12)
          {
            if (IMOSLoggingEnabled())
            {
              long long v23 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              {
                long long v24 = [v16 path];
                *(_DWORD *)long long buf = 138412546;
                id v38 = v24;
                __int16 v39 = 2112;
                id v40 = v12;
                _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "Could not read file attributes of new attachment at %@, %@", buf, 0x16u);
              }
            }
          }
          else
          {
            uint64_t v27 = *MEMORY[0x1E4F28390];
            long long v28 = [v11 objectForKey:*MEMORY[0x1E4F28390]];
            uint64_t v29 = [v22 objectForKey:v27];
            uint64_t v30 = v29;
            if (v28 && v29)
            {
              unint64_t v31 = [v28 unsignedLongValue];
              unint64_t v32 = [v30 unsignedLongValue];
              BOOL v15 = v31 > v32;
              if (v31 > v32 && IMOSLoggingEnabled())
              {
                id v33 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138412802;
                  id v38 = @"YES";
                  __int16 v39 = 2112;
                  id v40 = v28;
                  __int16 v41 = 2112;
                  uint64_t v42 = v30;
                  _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Local asset is bigger than the one in CKRecord %@, taking %@ over %@", buf, 0x20u);
                }
              }
              id v12 = v11;
              goto LABEL_33;
            }
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            long long v25 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
            {
              long long v26 = [v16 path];
              *(_DWORD *)long long buf = 138412290;
              id v38 = v26;
              _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "Can't find incoming attachment from CKRecord at %@", buf, 0xCu);
            }
          }
          id v12 = 0;
        }
      }
      BOOL v15 = 0;
      id v16 = v11;
LABEL_33:

      goto LABEL_34;
    }
  }
  BOOL v15 = 0;
LABEL_34:

  return v15;
}

void sub_1D97F0954(void *a1, uint64_t a2, void *a3)
{
  v101[1] = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Moving transfer asset from CK cache to final spot", buf, 2u);
    }
  }
  uint64_t v83 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v4];
  int v6 = JWDecodeDictionary();
  int v82 = [v6 objectForKey:@"aguid"];
  uint64_t v80 = [v6 objectForKey:@"t"];
  uint64_t v79 = [v6 objectForKey:@"mimet"];
  id v81 = [v6 objectForKey:@"fn"];
  uint64_t v7 = [v6 objectForKey:@"vers"];
  BOOL v8 = [v7 integerValue] > 0;

  if (v8)
  {
    uint64_t v77 = [v4 _assetForKey:@"lqa"];
    if (v77)
    {
      id v9 = [v6 objectForKey:@"pathc"];
      if ([(__CFString *)v9 length])
      {
        int v10 = v9;
      }
      else
      {
        uint64_t v17 = [a1 filename];
        objc_msgSend(v17, "im_lastPathComponent");
        int v10 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled())
        {
          uint64_t v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v93 = v10;
            _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "CKRecord did not have a lastPathComponent, using %@ from filename", buf, 0xCu);
          }
        }
      }
      uint64_t v78 = (__CFString *)IMDCopyAttachmentPersistentPath();
      if ([(__CFString *)v10 length]
        && [(__CFString *)v78 length]
        && ([v77 fileURL],
            int v19 = objc_claimAutoreleasedReturnValue(),
            BOOL v20 = v19 == 0,
            v19,
            !v20))
      {
        long long v21 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v89 = 0;
        int v22 = [v21 removeItemAtPath:v78 error:&v89];
        long long v23 = (__CFString *)v89;

        if (v23) {
          char v24 = 0;
        }
        else {
          char v24 = v22;
        }
        if ((v24 & 1) == 0 && IMOSLoggingEnabled())
        {
          long long v25 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            long long v26 = @"NO";
            *(_DWORD *)long long buf = 138412802;
            uint64_t v93 = v78;
            __int16 v94 = 2112;
            if (v22) {
              long long v26 = @"YES";
            }
            __int16 v95 = v26;
            __int16 v96 = 2112;
            __int16 v97 = v23;
            _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "Failed to remove existing file at %@ to replace with version from CKRecord, sucess %@ error %@", buf, 0x20u);
          }
        }
        uint64_t v27 = [(__CFString *)v78 stringByDeletingLastPathComponent];
        IMSharedHelperEnsureDirectoryExistsAtPath();

        long long v28 = [MEMORY[0x1E4F28CB8] defaultManager];
        uint64_t v29 = [v77 fileURL];
        uint64_t v30 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v78];
        id v88 = 0;
        LOBYTE(v27) = [v28 moveItemAtURL:v29 toURL:v30 error:&v88];
        unint64_t v73 = (__CFString *)v88;

        if (v27)
        {
          [a1 _setLocalPath:v78];
          if (IMOSLoggingEnabled())
          {
            unint64_t v31 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              uint64_t v93 = v82;
              __int16 v94 = 2112;
              __int16 v95 = v78;
              _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Created transfer %@, finalAssetPath %@", buf, 0x16u);
            }
          }
          unint64_t v32 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", v73);
          uint64_t v100 = *MEMORY[0x1E4F28370];
          v101[0] = *MEMORY[0x1E4F28358];
          id v33 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v101 forKeys:&v100 count:1];
          id v87 = 0;
          char v34 = [v32 setAttributes:v33 ofItemAtPath:v78 error:&v87];
          id v35 = (__CFString *)v87;

          if ((v34 & 1) == 0 && IMOSLoggingEnabled())
          {
            id v36 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              uint64_t v93 = v78;
              __int16 v94 = 2112;
              __int16 v95 = v35;
              _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }
          }
        }
        else
        {
          id v40 = [v77 fileURL];
          id v35 = [v40 path];

          if (IMOSLoggingEnabled())
          {
            __int16 v41 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412802;
              uint64_t v93 = v35;
              __int16 v94 = 2112;
              __int16 v95 = v78;
              __int16 v96 = 2112;
              __int16 v97 = v73;
              _os_log_impl(&dword_1D967A000, v41, OS_LOG_TYPE_INFO, "Failed to move file from %@ to %@, error %@", buf, 0x20u);
            }
          }
          objc_msgSend(MEMORY[0x1E4F6E780], "cleanUpAsset:", v77, v73);
        }
      }
      else if (IMOSLoggingEnabled())
      {
        __int16 v37 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          id v38 = [v77 fileURL];
          *(_DWORD *)long long buf = 138413058;
          uint64_t v93 = v82;
          __int16 v94 = 2112;
          __int16 v95 = v10;
          __int16 v96 = 2112;
          __int16 v97 = v78;
          __int16 v98 = 2112;
          uint64_t v99 = v38;
          _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Failed to write asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@", buf, 0x2Au);
        }
      }
    }
    else
    {
      uint64_t v78 = 0;
    }
    uint64_t v42 = [v4 _assetForKey:@"avid"];
    if (v42)
    {
      uint64_t v43 = [v6 objectForKey:@"auxpathc"];
      if ([(__CFString *)v43 length])
      {
        __int16 v44 = v43;
      }
      else
      {
        id v45 = [a1 _auxVideoPathIfItExists];
        objc_msgSend(v45, "im_lastPathComponent");
        __int16 v44 = (__CFString *)objc_claimAutoreleasedReturnValue();

        if (IMOSLoggingEnabled())
        {
          __int16 v46 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v93 = v44;
            _os_log_impl(&dword_1D967A000, v46, OS_LOG_TYPE_INFO, "CKRecord did not have a auxVideoLastPathComponent, using %@ from auxVideoPath", buf, 0xCu);
          }
        }
      }
      long long v47 = [(__CFString *)v78 stringByDeletingLastPathComponent];
      uint64_t v48 = [(__CFString *)v44 im_lastPathComponent];
      uint64_t v49 = [v47 stringByAppendingPathComponent:v48];

      if ([(__CFString *)v44 length]
        && [(__CFString *)v49 length]
        && ([v42 fileURL],
            __int16 v50 = objc_claimAutoreleasedReturnValue(),
            BOOL v51 = v50 == 0,
            v50,
            !v51))
      {
        __int16 v52 = [MEMORY[0x1E4F28CB8] defaultManager];
        id v86 = 0;
        int v53 = [v52 removeItemAtPath:v49 error:&v86];
        BOOL v54 = (__CFString *)v86;

        if (v54) {
          char v55 = 0;
        }
        else {
          char v55 = v53;
        }
        if ((v55 & 1) == 0 && IMOSLoggingEnabled())
        {
          __int16 v56 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
          {
            BOOL v57 = @"NO";
            *(_DWORD *)long long buf = 138412802;
            uint64_t v93 = v49;
            __int16 v94 = 2112;
            if (v53) {
              BOOL v57 = @"YES";
            }
            __int16 v95 = v57;
            __int16 v96 = 2112;
            __int16 v97 = v54;
            _os_log_impl(&dword_1D967A000, v56, OS_LOG_TYPE_INFO, "Failed to remove existing aux file at %@ to replace with version from CKRecord, success %@ error %@", buf, 0x20u);
          }
        }
        uint64_t v58 = [(__CFString *)v49 stringByDeletingLastPathComponent];
        IMSharedHelperEnsureDirectoryExistsAtPath();

        uint64_t v59 = [MEMORY[0x1E4F28CB8] defaultManager];
        uint64_t v60 = [v42 fileURL];
        id v61 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v49];
        id v85 = 0;
        LOBYTE(v58) = [v59 moveItemAtURL:v60 toURL:v61 error:&v85];
        uint64_t v75 = (__CFString *)v85;

        int v62 = IMOSLoggingEnabled();
        if (v58)
        {
          if (v62)
          {
            id v63 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              uint64_t v93 = v82;
              __int16 v94 = 2112;
              __int16 v95 = v49;
              _os_log_impl(&dword_1D967A000, v63, OS_LOG_TYPE_INFO, "Stored aux video for transfer %@, finalAssetPath %@", buf, 0x16u);
            }
          }
          uint64_t v64 = objc_msgSend(MEMORY[0x1E4F28CB8], "defaultManager", v75);
          uint64_t v90 = *MEMORY[0x1E4F28370];
          uint64_t v91 = *MEMORY[0x1E4F28358];
          BOOL v65 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v91 forKeys:&v90 count:1];
          id v84 = 0;
          char v66 = [v64 setAttributes:v65 ofItemAtPath:v49 error:&v84];
          char v67 = (__CFString *)v84;

          if ((v66 & 1) == 0 && IMOSLoggingEnabled())
          {
            id v68 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v68, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              uint64_t v93 = v49;
              __int16 v94 = 2112;
              __int16 v95 = v67;
              _os_log_impl(&dword_1D967A000, v68, OS_LOG_TYPE_INFO, "Failed making file class C: %@ with error %@", buf, 0x16u);
            }
          }
        }
        else
        {
          if (v62)
          {
            __int16 v71 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
            {
              char v72 = [v42 fileURL];
              *(_DWORD *)long long buf = 138412802;
              uint64_t v93 = v72;
              __int16 v94 = 2112;
              __int16 v95 = v49;
              __int16 v96 = 2112;
              __int16 v97 = v75;
              _os_log_impl(&dword_1D967A000, v71, OS_LOG_TYPE_INFO, "Failed to move file from %@ to %@ error %@", buf, 0x20u);
            }
          }
          objc_msgSend(MEMORY[0x1E4F6E780], "cleanUpAsset:", v42, v75);
        }
      }
      else
      {
        uint64_t v69 = [v42 fileURL];
        BOOL v54 = [v69 path];

        if (IMOSLoggingEnabled())
        {
          int v70 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v70, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138413058;
            uint64_t v93 = v82;
            __int16 v94 = 2112;
            __int16 v95 = v44;
            __int16 v96 = 2112;
            __int16 v97 = v49;
            __int16 v98 = 2112;
            uint64_t v99 = v54;
            _os_log_impl(&dword_1D967A000, v70, OS_LOG_TYPE_INFO, "Failed to write aux asset to disk because of nil path! Asset from ckrecord with guid %@ has path %@, finalAssetPath %@ and asset fileURL %@", buf, 0x2Au);
          }
        }
        [MEMORY[0x1E4F6E780] cleanUpAsset:v42];
      }
    }
  }
  else if (v81)
  {
    id v11 = [v4 _assetForKey:@"lqa"];
    id v12 = v11;
    if (v11)
    {
      id v13 = [v11 fileURL];
      id v14 = (void *)[objc_alloc(MEMORY[0x1E4F1C9B8]) initWithContentsOfURL:v13];
      if (v14)
      {
        BOOL v15 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v81];
        if (([v14 writeToURL:v15 atomically:0] & 1) == 0 && IMOSLoggingEnabled())
        {
          id v16 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            uint64_t v93 = v81;
            __int16 v94 = 2112;
            __int16 v95 = v82;
            _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Failed to write record image asset to %@ GUID:%@", buf, 0x16u);
          }
        }
      }
      [MEMORY[0x1E4F6E780] cleanUpAsset:v12];
    }
  }
  else if (IMOSLoggingEnabled())
  {
    __int16 v39 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v93 = v82;
      _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Got IMFileTransfer record with guid %@ with no file name", buf, 0xCu);
    }
  }
  [MEMORY[0x1E4F6E780] cleanUpAssetsOnDiskForRecord:v4];
}

id sub_1D97F1890(id a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  uint64_t v7 = v6;
  if (v6
    && ([v6 recordType],
        BOOL v8 = objc_claimAutoreleasedReturnValue(),
        [MEMORY[0x1E4F6E780] _recordType],
        id v9 = objc_claimAutoreleasedReturnValue(),
        char v10 = [v8 isEqualToString:v9],
        v9,
        v8,
        (v10 & 1) != 0))
  {
    v44.receiver = a1;
    v44.super_class = (Class)&off_1F340DE80;
    id v11 = objc_msgSendSuper2(&v44, sel_init);
    if (v11)
    {
      __int16 v41 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v7];
      id v12 = JWDecodeDictionary();
      uint64_t v42 = [v12 objectForKey:@"aguid"];
      uint64_t v43 = [v12 objectForKey:@"tn"];
      id v36 = [v12 objectForKey:@"fn"];
      id v40 = [v12 objectForKey:@"t"];
      __int16 v39 = [v12 objectForKey:@"ui"];
      id v13 = [v12 objectForKey:@"cdt"];
      uint64_t v35 = [v13 longLongValue];

      id v14 = [v12 objectForKey:@"sdt"];
      uint64_t v34 = [v14 longLongValue];

      BOOL v15 = [v12 objectForKey:@"st"];
      uint64_t v33 = [v15 integerValue];

      id v16 = [v12 objectForKey:@"ig"];
      uint64_t v17 = [v16 BOOLValue];

      uint64_t v18 = [v12 objectForKey:@"tb"];
      uint64_t v19 = [v18 longLongValue];

      BOOL v20 = [v12 objectForKey:@"is"];
      uint64_t v21 = [v20 BOOLValue];

      id v38 = [v12 objectForKey:@"sui"];
      __int16 v37 = [v12 objectForKey:@"aui"];
      int v22 = [v12 objectForKey:@"ha"];
      uint64_t v23 = [v22 BOOLValue];

      [v11 setGuid:v42];
      [v11 setType:v40];
      char v24 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v35];
      [v11 setCreatedDate:v24];

      long long v25 = [MEMORY[0x1E4F1C9C8] dateWithTimeIntervalSinceReferenceDate:(double)v34];
      [v11 _setStartDate:v25];

      [v11 _setTransferState:v33];
      [v11 setIsIncoming:v17];
      [v11 setUserInfo:v39];
      [v11 setTotalBytes:v19];
      if ([v43 length]) {
        [v11 setFilename:v43];
      }
      [v11 setIsSticker:v21];
      [v11 setStickerUserInfo:v38];
      [v11 setAttributionInfo:v37];
      [v11 setHideAttachment:v23];
      [v11 setCloudKitSyncState:1];
      long long v26 = (void *)[v7 copyEncodedSystemFields];
      [v11 setCloudKitServerChangeTokenBlob:v26];
      uint64_t v27 = [v7 recordID];
      long long v28 = [v27 recordName];
      [v11 setCloudKitRecordID:v28];

      if (IMOSLoggingEnabled())
      {
        uint64_t v29 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          __int16 v46 = v42;
          __int16 v47 = 2112;
          uint64_t v48 = v36;
          _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Trying to create imfiletransfer ckrecord with guid %@ and filename %@", buf, 0x16u);
        }
      }
      if (a4) {
        [v11 moveAssetFromRecord:v7];
      }
    }
    a1 = v11;
    id v30 = a1;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      unint64_t v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        __int16 v46 = v7;
        _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Invalid record passed to initWithCKRecord %@", buf, 0xCu);
      }
    }
    id v30 = 0;
  }

  return v30;
}

uint64_t sub_1D97F1DF0(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a3) {
    return 1;
  }
  id v3 = [a3 recordType];
  id v4 = [MEMORY[0x1E4F6E780] _recordType];
  uint64_t v5 = [v3 isEqualToString:v4] ^ 1;

  return v5;
}

id sub_1D97F1E60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to utiTypeForRecord %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v3];
    uint64_t v7 = JWDecodeDictionary();
    uint64_t v5 = [v7 objectForKey:@"t"];
  }

  return v5;
}

uint64_t sub_1D97F1FA8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v10 = 138412290;
        id v11 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to sizeOfAssetForRecord %@", (uint8_t *)&v10, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v3];
    uint64_t v7 = JWDecodeDictionary();
    BOOL v8 = [v7 objectForKey:@"tb"];
    uint64_t v5 = [v8 longLongValue];
  }
  return v5;
}

id sub_1D97F20F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to transferGUIDOfRecord %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v3];
    uint64_t v7 = JWDecodeDictionary();
    uint64_t v5 = [v7 objectForKey:@"aguid"];
  }

  return v5;
}

uint64_t sub_1D97F223C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v11 = 138412290;
        id v12 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to attachmentRecordHasAsset %@", (uint8_t *)&v11, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [v3 _assetForKey:@"lqa"];
    if (v6)
    {
      uint64_t v7 = [MEMORY[0x1E4F28CB8] defaultManager];
      BOOL v8 = [v6 fileURL];
      int v9 = [v8 path];
      uint64_t v5 = [v7 fileExistsAtPath:v9];
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  return v5;
}

void sub_1D97F23B4(void *a1, uint64_t a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v4])
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        id v9 = v4;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Invalid record passed to cleanUpAssetsOnDiskForRecord: %@", (uint8_t *)&v8, 0xCu);
      }
    }
  }
  else
  {
    id v6 = [v4 _assetForKey:@"lqa"];
    [a1 cleanUpAsset:v6];

    uint64_t v7 = [v4 _assetForKey:@"avid"];
    [a1 cleanUpAsset:v7];
  }
}

id sub_1D97F24FC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        id v10 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to md5HashForRecord: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v3];
    uint64_t v7 = JWDecodeDictionary();
    uint64_t v5 = [v7 objectForKey:@"mdh"];
  }

  return v5;
}

uint64_t sub_1D97F2644(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v31 = *MEMORY[0x1E4F143B8];
  id v3 = a3;
  if ([MEMORY[0x1E4F6E780] _recordIsInvalid:v3])
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v28 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Invalid record passed to md5HashForRecord: %@", buf, 0xCu);
      }
    }
    uint64_t v5 = 0;
  }
  else
  {
    id v6 = [MEMORY[0x1E4F6E780] transferMetaDataFromRecord:v3];
    uint64_t v7 = JWDecodeDictionary();
    int v8 = [v7 objectForKey:@"mdh"];
    if ([v8 length])
    {
      int v9 = [v7 objectForKey:@"fn"];
      id v10 = [v7 objectForKey:@"t"];
      if ([v9 length] && objc_msgSend(v10, "length"))
      {
        uint64_t v11 = [v3 _assetForKey:@"lqa"];
        id v12 = v11;
        if (v11)
        {
          uint64_t v13 = [v11 fileURL];
          if (v13)
          {
            id v14 = [MEMORY[0x1E4F28CB8] defaultManager];
            BOOL v15 = [v13 path];
            long long v26 = v12;
            int v16 = [v14 fileExistsAtPath:v15];

            if (v16)
            {
              uint64_t v17 = [v13 path];
              uint64_t v18 = IMSharedHelperMD5HashOfFileAtPath();
            }
            else
            {
              uint64_t v18 = 0;
            }
            id v12 = v26;
          }
          else
          {
            uint64_t v18 = 0;
          }
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v21 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
            {
              int v22 = [v3 recordID];
              uint64_t v23 = [v22 recordName];
              *(_DWORD *)long long buf = 138412290;
              id v28 = v23;
              _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord *** asset was nil for record id: %@", buf, 0xCu);
            }
          }
          uint64_t v18 = 0;
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            id v28 = v9;
            __int16 v29 = 2112;
            id v30 = v10;
            _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "IMFileTransfer_CKRecord *** fileName [%@] or utiType [%@] is nil", buf, 0x16u);
          }
        }
        uint64_t v18 = 0;
      }
      uint64_t v5 = [v18 isEqualToString:v8];
      if ((v5 & 1) == 0 && IMOSLoggingEnabled())
      {
        char v24 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412546;
          id v28 = v18;
          __int16 v29 = 2112;
          id v30 = v8;
          _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "We failed to validate md5HashOfCKAsset: %@ md5HashStoredOnRecord: %@", buf, 0x16u);
        }
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        BOOL v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v28 = v3;
          _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "We didn't have an md5 hash for fetched record: %@", buf, 0xCu);
        }
      }
      uint64_t v5 = 1;
    }
  }
  return v5;
}

void sub_1D97F2B40(_Unwind_Exception *exc_buf, int a2)
{
  if (a2 == v2)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D97F2A4CLL);
  }
  objc_end_catch();
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D97F2BEC()
{
  return [MEMORY[0x1E4F28CB8] defaultManager];
}

IMDReplayController *sub_1D97F2C3C()
{
  uint64_t result = objc_alloc_init(IMDReplayController);
  qword_1EBE2BA08 = (uint64_t)result;
  return result;
}

void sub_1D97F3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
}

void sub_1D97F35A0(uint64_t a1)
{
  if (!--*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D97F363C;
    block[3] = &unk_1E6B73178;
    void block[4] = *(void *)(a1 + 32);
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t sub_1D97F363C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__fetchNexBatchOfMessagesAndReplay);
}

dispatch_workloop_t IMDCreateWorkloop(void *a1)
{
  uint64_t v1 = (const char *)[a1 UTF8String];

  return dispatch_workloop_create(v1);
}

void sub_1D97F7524(id *a1)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      id v3 = a1[4];
      *(_DWORD *)long long buf = 138412290;
      id v12 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Releasing replicated message %@", buf, 0xCu);
    }
  }
  id v4 = +[IMPendingReplicatedMessageCache sharedCache];
  id v5 = a1[4];
  id v6 = [a1[5] service];
  uint64_t v7 = [v6 internalName];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D97F76D8;
  v8[3] = &unk_1E6B77140;
  id v9 = a1[4];
  id v10 = a1[6];
  [v4 releasePendingMessageWithGUID:v5 serviceName:v7 chat:0 completion:v8];
}

uint64_t sub_1D97F76D8(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Processing %@ after replicated message release", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 40) + 16))();
}

void sub_1D97F7BB4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97F7B3CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D97F7C00(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) guid];
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "** Performing delayed replication for %@", (uint8_t *)&v5, 0xCu);
    }
  }
  id v4 = [*(id *)(a1 + 40) replicationProxy];
  [v4 sendMessage:*(void *)(a1 + 32) toChat:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 56)];
}

void sub_1D97F88A4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97F8868);
  }
  _Unwind_Resume(a1);
}

void sub_1D97F89D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D97F89F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned char *a5)
{
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D97F8A98;
  v8[3] = &unk_1E6B77168;
  uint64_t v10 = *(void *)(a1 + 48);
  long long v9 = *(_OWORD *)(a1 + 32);
  uint64_t result = [a2 enumerateKeysAndObjectsUsingBlock:v8];
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a5 = 1;
  }
  return result;
}

void sub_1D97F8A98(uint64_t a1, void *a2, void *a3, unsigned char *a4)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  id v7 = a2;
  id v8 = a3;
  if ([v7 isEqualToString:*MEMORY[0x1E4F6C1F8]])
  {
    if (++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) < 2uLL) {
      goto LABEL_14;
    }
    if (IMOSLoggingEnabled())
    {
      long long v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        LOWORD(v12) = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Message body has more than one message part", (uint8_t *)&v12, 2u);
      }
    }
    char v10 = [*(id *)(a1 + 32) replicationRequiredForMultipleMessageParts];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = 138412290;
        id v13 = v7;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Message body has attribute %@", (uint8_t *)&v12, 0xCu);
      }
    }
    char v10 = [*(id *)(a1 + 32) replicationRequiredForMessageBodyAttributeName:v7];
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v10;
LABEL_14:
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    *a4 = 1;
  }
}

uint64_t sub_1D97F94F4()
{
  qword_1EBE2BA10 = objc_alloc_init(IMDCKSyncController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D97F95F8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
}

uint64_t sub_1D97F9698(uint64_t a1)
{
  int v2 = objc_alloc_init(IMDCKInitialMessageSyncController);
  uint64_t v3 = (void *)qword_1EA8CA5D8;
  qword_1EA8CA5D8 = (uint64_t)v2;

  id v4 = (void *)qword_1EA8CA5D8;
  uint64_t v5 = *(void *)(a1 + 32);

  return [v4 setDelegate:v5];
}

uint64_t sub_1D97F97CC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
}

uint64_t sub_1D97F98A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) setDelegate:*(void *)(a1 + 40)];
}

uint64_t sub_1D97F994C(uint64_t a1)
{
  int v2 = objc_alloc_init(IMDCKInitialAttachmentSyncController);
  uint64_t v3 = (void *)qword_1EA8CA5F0;
  qword_1EA8CA5F0 = (uint64_t)v2;

  id v4 = (void *)qword_1EA8CA5F0;
  uint64_t v5 = *(void *)(a1 + 32);

  return [v4 setDelegate:v5];
}

void sub_1D97F9B68(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D97F9B24);
  }
  _Unwind_Resume(a1);
}

void sub_1D97F9E4C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v15 = 134218242;
      uint64_t v16 = a2;
      __int16 v17 = 2112;
      id v18 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Account status is: %ld. Error: %@", (uint8_t *)&v15, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 40))
  {
    if (a2 == 4)
    {
      long long v9 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
      int v10 = [v9 isMessagesIniCloudVersion2];

      if (v10)
      {
        uint64_t v11 = [*(id *)(a1 + 32) syncResumer];
        [v11 attemptToResumeSyncOnAccountUpdateIfAppropriate];
      }
      else
      {
        int v12 = [MEMORY[0x1E4F6E720] sharedInstance];
        int v13 = [v12 getBoolFromDomain:*MEMORY[0x1E4F6CF00] forKey:*MEMORY[0x1E4F6CF68]];

        if (v13)
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v14 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              LOWORD(v15) = 0;
              _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Account status update, and we stopped syncing due to bad account status.", (uint8_t *)&v15, 2u);
            }
          }
          [*(id *)(a1 + 32) beginPeriodicSyncWithChecks:1 priority:*MEMORY[0x1E4F142D0] reason:@"Account.update"];
        }
      }
    }
    else if (a2 == 1)
    {
      id v7 = +[IMDCKRecordSaltManager sharedInstance];
      [v7 clearLocalSyncState];

      id v8 = +[IMDAttachmentStore sharedInstance];
      [v8 markAllAttachmentsAsNotPurgeable];
    }
    [*(id *)(a1 + 32) _attemptToMigrateACAccountEnablementOnce];
  }
  else if (a2 == 4)
  {
    [*(id *)(a1 + 32) _attemptToEnableMiCByDefaultOnce];
  }
}

void sub_1D97FA8A8(uint64_t a1, void *a2, void *a3)
{
  *(void *)&void v19[5] = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) setIsFetchingExitForEnablement:0];
  if (v6)
  {
    int v7 = *(_DWORD *)(a1 + 40);
    if (v7 < (int)[*(id *)(a1 + 32) _maxRetryAttemptsToEnableMiCByDefault])
    {
      [*(id *)(a1 + 32) _retryIntervalToEnableMicByDefaultForAttempt:*(unsigned int *)(a1 + 40)];
      uint64_t v9 = v8;
      if (IMOSLoggingEnabled())
      {
        int v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          int v11 = *(_DWORD *)(a1 + 40);
          *(_DWORD *)long long buf = 67109376;
          v19[0] = v11;
          LOWORD(v19[1]) = 2048;
          *(void *)((char *)&v19[1] + 2) = v9;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Enable MiC by default: failed to get exit record attempt %d, trying again in %0.02f seconds", buf, 0x12u);
        }
      }
      im_dispatch_after();
      goto LABEL_24;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v15 = *(_DWORD *)(a1 + 40);
        *(_DWORD *)long long buf = 67109120;
        v19[0] = v15;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Enable MiC by default: failed to get exit record attempt %d, done", buf, 8u);
      }
    }
LABEL_13:
    [*(id *)(a1 + 32) _setHasTriedToEnableMiCByDefault];
    goto LABEL_24;
  }
  int v12 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v12)
    {
      int v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        *(void *)uint64_t v19 = v5;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Enable MiC by default: Exit record found with date %@, won't try again", buf, 0xCu);
      }
    }
    goto LABEL_13;
  }
  if (v12)
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Enable MiC by default: All Checks Passed, Enabling!!", buf, 2u);
    }
  }
  __int16 v17 = [*(id *)(a1 + 32) ckUtilities];
  [v17 setCloudKitSyncingEnabled:1];

  [*(id *)(a1 + 32) _setHasTriedToEnableMiCByDefault];
LABEL_24:
}

uint64_t sub_1D97FABD8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__attemptToEnableMiCByDefaultOnceAttempt_);
}

void sub_1D97FB7BC(uint64_t a1)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  int v2 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  int v3 = [v2 isUnderFirstDataProtectionLock];

  int v4 = [*(id *)(a1 + 32) isSyncing];
  id v5 = [*(id *)(a1 + 32) syncState];
  id v6 = [v5 lastSyncDate];

  int v7 = [*(id *)(a1 + 32) ckUtilities];
  int v8 = [v7 deviceConditionsAllowPeriodicSync];

  int v9 = IMOSLoggingEnabled();
  if (((v4 | v3) & 1) != 0 || v6 || !v8)
  {
    if (v9)
    {
      int v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = @"NO";
        if (v4) {
          int v15 = @"YES";
        }
        else {
          int v15 = @"NO";
        }
        int v17 = 138413058;
        id v18 = v15;
        if (v3) {
          uint64_t v16 = @"YES";
        }
        else {
          uint64_t v16 = @"NO";
        }
        __int16 v19 = 2112;
        BOOL v20 = v16;
        __int16 v21 = 2112;
        if (v8) {
          uint64_t v14 = @"YES";
        }
        int v22 = v6;
        __int16 v23 = 2112;
        char v24 = v14;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Not kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@", (uint8_t *)&v17, 0x2Au);
      }
    }
  }
  else
  {
    if (v9)
    {
      int v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        int v17 = 138413058;
        id v18 = @"NO";
        __int16 v19 = 2112;
        BOOL v20 = @"NO";
        __int16 v21 = 2112;
        int v22 = 0;
        __int16 v23 = 2112;
        char v24 = @"YES";
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Kicking off a sync on power and wifi isSyncing %@ isUnderFirstUnlock %@ lastSyncDate %@ deviceConditionsAllowSync %@", (uint8_t *)&v17, 0x2Au);
      }
    }
    int v11 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v12 = [v11 isMessagesIniCloudVersion2];

    if (v12)
    {
      if (IMGetDomainBoolForKeyWithDefaultValue()) {
        [*(id *)(a1 + 32) beginPeriodicSyncWithActivity:0];
      }
    }
    else
    {
      [*(id *)(a1 + 32) beginPeriodicSyncWithChecks:1 priority:*MEMORY[0x1E4F142E0] reason:@"postInitialSync"];
    }
  }
}

uint64_t sub_1D97FBE80(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Got notified to kick off a sync due to IMAutomaticDeletionAgent", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _kickOffNightlyPeriodicSyncIfApplicable];
}

void sub_1D97FBF1C()
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v0 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v0, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v2 = 0;
      _os_log_impl(&dword_1D967A000, v0, OS_LOG_TYPE_INFO, "Received key roll pending state did change event notification", v2, 2u);
    }
  }
  uint64_t v1 = +[IMDCKUtilities sharedInstance];
  [v1 keyRollPendingStateDidChange];
}

void sub_1D97FBFC8(uint64_t a1, void *a2)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Handling Backup State Did Change", (uint8_t *)&v12, 2u);
    }
  }
  id v4 = a2;
  if (v4)
  {
    id v5 = +[IMDCKBackupController sharedInstance];
    int v6 = [v5 iCloudBackupEnabledSystemWide];

    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        int v8 = @"NO";
        if (v6) {
          int v8 = @"YES";
        }
        int v12 = 138412290;
        int v13 = v8;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "System wide backup is enabled: %@", (uint8_t *)&v12, 0xCu);
      }
    }
    if ((v6 & 1) == 0)
    {
      int v9 = [v4 exitManager];
      [v9 submitCloudKitMetricWithOperationGroupName:@"PCSBackupDisabledKeyroll"];

      int v10 = [v4 exitManager];
      [v10 submitCloudKitMetricWithOperationGroupName:@"PCSBackupDisabledUserToggledKeyroll"];
    }
  }
  else if (IMOSLoggingEnabled())
  {
    int v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      LOWORD(v12) = 0;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSBackupStateDidChange", (uint8_t *)&v12, 2u);
    }
  }
}

void sub_1D97FC208(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Handling Test Backup State Did Change", buf, 2u);
    }
  }
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    int v6 = [v4 exitManager];
    [v6 submitCloudKitMetricWithOperationGroupName:@"PCSBackupDisabledKeyroll"];

    int v7 = [v5 exitManager];
    [v7 submitCloudKitMetricWithOperationGroupName:@"PCSBackupDisabledTestToggledKeyroll"];
  }
  else
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_8;
    }
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSTestBackupStateDidChange", v8, 2u);
    }
  }

LABEL_8:
}

void sub_1D97FC35C(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Handling Successful Keyroll from Backup", buf, 2u);
    }
  }
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    int v6 = [v4 exitManager];
    [v6 submitCloudKitMetricWithOperationGroupName:@"PCSBackupDisabledSuccessfulKeyroll"];
  }
  else
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_8;
    }
    int v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSBackupStateKeyrollSuccessful", v7, 2u);
    }
  }

LABEL_8:
}

void sub_1D97FC48C(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Handling Pending Keyroll Notification", buf, 2u);
    }
  }
  id v4 = a2;
  id v5 = v4;
  if (v4)
  {
    int v6 = [v4 exitManager];
    [v6 submitCloudKitMetricWithOperationGroupName:@"PCSPendingKeyroll"];
  }
  else
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_8;
    }
    int v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "We did not have an IMDCKSyncController when trying report _PCSPendingKeyroll", v7, 2u);
    }
  }

LABEL_8:
}

void sub_1D97FC5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v15 = 138412546;
      uint64_t v16 = a3;
      __int16 v17 = 2112;
      uint64_t v18 = a5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Handling Identity/TLK keys available notification, name: %@, userInfo: %@", (uint8_t *)&v15, 0x16u);
    }
  }
  int v8 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v9 = [v8 isMessagesIniCloudVersion2];

  if (v9)
  {
    int v10 = +[IMDCKSyncController sharedInstance];
    int v11 = [v10 syncResumer];
    [v11 attemptToResumeSyncOnIdentityUpdateIfAppropriate];
  }
  else
  {
    int v12 = [MEMORY[0x1E4F6E720] sharedInstance];
    int v13 = [v12 getBoolFromDomain:*MEMORY[0x1E4F6CF00] forKey:*MEMORY[0x1E4F6CF78]];

    if (!v13) {
      return;
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        LOWORD(v15) = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Identity/TLK update, and we stopped sync due to missing TLKs.", (uint8_t *)&v15, 2u);
      }
    }
    int v10 = +[IMDCKSyncController sharedInstance];
    [v10 beginPeriodicSyncWithChecks:1 priority:*MEMORY[0x1E4F142D0] reason:@"Identity.update"];
  }
}

void sub_1D97FCEB8(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      int v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int v8 = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "We are on power and wifi. Kicking off a sync", v8, 2u);
      }
    }
    [*(id *)(a1 + 32) _noteSyncStarted:0];
    [*(id *)(a1 + 32) _noteMetricsForSyncStartFrom:@"ContinuingManualFullSyncAfterLaunch" fullSync:1];
    int v7 = [*(id *)(a1 + 32) ckUtilities];
    [v7 logCloudKitSyncToPowerLogForSyncType:1 isCoreDuetSync:0 didStartSync:0 didFinishSync:0 didSucceedSyncing:0];

    [*(id *)(a1 + 32) beginPeriodicSyncWithChecks:1 priority:*MEMORY[0x1E4F142D0] reason:@"startedWhileInProgress"];
  }
}

void sub_1D97FD3A0(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      LOWORD(v31) = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Registering CloudSync dependencies", (uint8_t *)&v31, 2u);
    }
  }
  int v3 = [MEMORY[0x1E4F77E68] configureWithDelegate:*(void *)(a1 + 32)];
  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        int v31 = 138412290;
        unint64_t v32 = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Failed to configure IMDMessagesSyncCoordinator properly with error %@", (uint8_t *)&v31, 0xCu);
      }
LABEL_13:
    }
  }
  else
  {
    id v5 = (void *)MEMORY[0x1E4F77E68];
    int v6 = [MEMORY[0x1E4F6EA68] sharedInstance];
    [v5 registerErrorAnalyzer:v6];

    int v7 = (void *)MEMORY[0x1E4F77E68];
    int v8 = objc_alloc_init(_TtC12IMDaemonCore17IMDPreReqsChecker);
    [v7 registerPreReqsVerifier:v8];

    int v9 = (void *)MEMORY[0x1E4F77E68];
    int v10 = objc_alloc_init(IMDCKSyncTokenStore);
    [v9 registerSyncTokenStore:v10];

    int v11 = (void *)MEMORY[0x1E4F77E68];
    int v12 = [*(id *)(a1 + 32) syncState];
    [v11 registerSyncStateManager:v12];

    int v13 = (void *)MEMORY[0x1E4F77E68];
    uint64_t v14 = +[IMDCKBackupControllerProxy sharedInstance];
    [v13 registerBackupController:v14];

    int v15 = (void *)MEMORY[0x1E4F77E68];
    uint64_t v16 = +[IMDChatStore sharedInstance];
    [v15 registerStore:v16 asType:0];

    __int16 v17 = (void *)MEMORY[0x1E4F77E68];
    uint64_t v18 = +[IMDMessageStore sharedInstance];
    [v17 registerStore:v18 asType:1];

    uint64_t v19 = (void *)MEMORY[0x1E4F77E68];
    BOOL v20 = objc_alloc_init(IMDUpdateV1RecordStore);
    [v19 registerStore:v20 asType:3];

    __int16 v21 = (void *)MEMORY[0x1E4F77E68];
    int v22 = objc_alloc_init(IMDUpdateV2RecordStore);
    [v21 registerStore:v22 asType:4];

    __int16 v23 = (void *)MEMORY[0x1E4F77E68];
    char v24 = objc_alloc_init(IMDUpdateV3RecordStore);
    [v23 registerStore:v24 asType:5];

    uint64_t v25 = (void *)MEMORY[0x1E4F77E68];
    long long v26 = +[IMDAttachmentStore sharedInstance];
    [v25 registerStore:v26 asType:2];

    uint64_t v27 = (void *)MEMORY[0x1E4F77E68];
    id v28 = objc_alloc_init(IMDRecoverableMessageStore);
    [v27 registerStore:v28 asType:6];

    __int16 v29 = (void *)MEMORY[0x1E4F77E68];
    id v30 = objc_alloc_init(IMDScheduledMessageStore);
    [v29 registerStore:v30 asType:7];

    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        LOWORD(v31) = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Registered CloudSync dependencies", (uint8_t *)&v31, 2u);
      }
      goto LABEL_13;
    }
  }
}

void sub_1D97FDC8C(id *a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    [a1[4] _didPassAccountAndIdentityUpdateNeeds];
    id v6 = a1[4];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1D97FDF3C;
    void v19[3] = &unk_1E6B73BA0;
    void v19[4] = v6;
    id v20 = a1[5];
    id v21 = a1[6];
    [v6 _ifCloudKitAbleToSyncWithActivity:0 callBlock:v19];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v18 = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "*** Manatee keys not available not kicking off initial sync", v18, 2u);
      }
    }
    int v8 = [a1[4] ckUtilities];
    [v8 reportErrorForSyncType:0 syncStep:@"FirstSyncInitiated" response:4 error:v5];

    [a1[4] _needsSyncOnIdentityUpdate];
    int v9 = [a1[4] ckUtilities];
    [v9 logCloudKitSyncToPowerLogForSyncType:0 isCoreDuetSync:0 didStartSync:0 didFinishSync:0 didSucceedSyncing:0];

    int v10 = [a1[4] ckUtilities];
    int v11 = [a1[4] ckUtilities];
    int v12 = [v11 logCollectorAddress];
    [v10 reportMOCDebuggingErrorWithString:@"MissingTLK" internalOnly:1 initialSync:1 sendToHandle:v12 reasonString:@"MissingTLKNoInitalSync"];

    int v13 = [MEMORY[0x1E4F6E890] sharedInstance];
    uint64_t v14 = [a1[4] _keychainErrorWithCause:v5];
    [v13 forceAutoBugCaptureWithSubType:@"Restore Fail" errorPayload:v14];

    int v15 = [a1[4] ckUtilities];
    uint64_t v16 = *((void *)a1[4] + 10);
    __int16 v17 = [MEMORY[0x1E4F1C9C8] now];
    [v17 timeIntervalSinceDate:a1[6]];
    objc_msgSend(v15, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v16, 0);

    [a1[4] setBroadcastedSyncStateStateToFinished];
  }
}

void sub_1D97FDF3C(uint64_t a1, int a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    IMSetDomainBoolForKey();
    [*(id *)(a1 + 32) _noteMetricsForSyncStartFrom:@"InitialSync" fullSync:0];
    id v6 = [*(id *)(a1 + 32) ckUtilities];
    [v6 logCloudKitSyncToPowerLogForSyncType:0 isCoreDuetSync:0 didStartSync:0 didFinishSync:0 didSucceedSyncing:0];

    [*(id *)(a1 + 32) beginInitialSyncAttemptCount:0 withActivity:*(void *)(a1 + 40)];
  }
  else
  {
    BOOL v7 = +[IMDCKSyncController initialSyncAllowed];
    int v8 = *(void **)(a1 + 32);
    if (v7)
    {
      uint64_t v9 = v8[10];
      int v10 = IMOSLoggingEnabled();
      if (v9 > 99)
      {
        if (v10)
        {
          int v13 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 80);
            int v20 = 134217984;
            uint64_t v21 = v14;
            _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "We'e tried %ld times to begin an initial sync.  Giving up.", (uint8_t *)&v20, 0xCu);
          }
        }
        [*(id *)(a1 + 32) setBroadcastedSyncStateStateToFinished];
        int v15 = [*(id *)(a1 + 32) ckUtilities];
        uint64_t v16 = [*(id *)(a1 + 32) _retryError];
        [v15 reportErrorForSyncType:0 syncStep:@"BeginInitialSync" response:1 error:v16];

        __int16 v17 = [*(id *)(a1 + 32) ckUtilities];
        uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 80);
        uint64_t v19 = [MEMORY[0x1E4F1C9C8] now];
        [v19 timeIntervalSinceDate:*(void *)(a1 + 48)];
        objc_msgSend(v17, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v18, 0);

        [*(id *)(a1 + 32) setInitialSyncAttempts:0];
      }
      else
      {
        if (v10)
        {
          int v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void *)(*(void *)(a1 + 32) + 80);
            int v20 = 134218240;
            uint64_t v21 = v12;
            __int16 v22 = 2048;
            uint64_t v23 = 30;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "We aren't ready to perform an initial sync.  We've tried %ld times.  We'll try again in %ld seconds ", (uint8_t *)&v20, 0x16u);
          }
        }
        [*(id *)(a1 + 32) setInitialSyncAttempts:*(void *)(*(void *)(a1 + 32) + 80) + 1];
        [*(id *)(a1 + 32) performSelector:sel_beginInitialSyncWithActivity_ withObject:0 afterDelay:30.0];
      }
    }
    else
    {
      [v8 setBroadcastedSyncStateStateToFinished];
      [*(id *)(a1 + 32) setInitialSyncAttempts:0];
    }
  }
}

void sub_1D97FE5F4(uint64_t a1, int a2)
{
  int v3 = *(void **)(a1 + 32);
  if (a2)
  {
    id v4 = [v3 _recordManager];
    v6[0] = MEMORY[0x1E4F143A8];
    v6[1] = 3221225472;
    id v6[2] = sub_1D97FE6C4;
    v6[3] = &unk_1E6B77230;
    id v5 = *(void **)(a1 + 40);
    void v6[4] = *(void *)(a1 + 32);
    char v8 = *(unsigned char *)(a1 + 48);
    id v7 = v5;
    [v4 fetchChatZoneToCheckManateeStatus:v6];
  }
  else
  {
    [v3 setBroadcastedSyncStateStateToFinished];
  }
}

void sub_1D97FE6C4(uint64_t a1, int a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    if (*(unsigned char *)(a1 + 48)) {
      id v6 = @"CoreduetChatPeriodic";
    }
    else {
      id v6 = @"ManualChatSync";
    }
    [*(id *)(a1 + 32) _noteMetricsForSyncStartFrom:v6 fullSync:0];
    [*(id *)(a1 + 32) _syncChatsWithActivity:*(void *)(a1 + 40)];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v11[0]) = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "We dont have manatee TLK. Not kicking off chat only sync", (uint8_t *)v11, 2u);
      }
    }
    [*(id *)(a1 + 32) setBroadcastedSyncStateStateToFinished];
    char v8 = *(_xpc_activity_s **)(a1 + 40);
    if (v8)
    {
      BOOL v9 = xpc_activity_set_state(v8, 5);
      if (IMOSLoggingEnabled())
      {
        int v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          v11[0] = 67109120;
          v11[1] = v9;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Set state for chat syncing with result %d", (uint8_t *)v11, 8u);
        }
      }
    }
  }
}

void sub_1D97FEB54(uint64_t a1, void *a2)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  int v3 = a2;
  xpc_activity_state_t state = xpc_activity_get_state(v3);
  if (state == 2)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Run a User-Initiated periodic sync", (uint8_t *)&v13, 2u);
      }
    }
    char v8 = +[IMDCKUtilities sharedInstance];
    char v9 = [v8 cloudKitSyncingEnabled];

    if (v9)
    {
      if (!xpc_activity_set_state(v3, 4) && IMOSLoggingEnabled())
      {
        int v10 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
        {
          LOWORD(v13) = 0;
          _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "We did not set the state of a user-initiated xpc_activity to continue successfully for message syncing", (uint8_t *)&v13, 2u);
        }
      }
      int v11 = +[IMDCKSyncController sharedInstance];
      [v11 beginPeriodicSyncWithActivity:v3];
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        LOWORD(v13) = 0;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Ignoring activity request to sync messages, as syncing is disabled", (uint8_t *)&v13, 2u);
      }
    }
  }
  else if (!state && IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      uint64_t v6 = *(void *)(a1 + 32);
      int v13 = 136315138;
      uint64_t v14 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Check-in for a periodic sync at priority %s", (uint8_t *)&v13, 0xCu);
    }
  }
}

void sub_1D97FF0A0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v8 = 0;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "CloudKit allows sync, beginning periodic sync attempt 0", v8, 2u);
      }
    }
    [*(id *)(a1 + 32) _noteSyncStarted:1];
    [*(id *)(a1 + 32) _noteMetricsForSyncStartFrom:@"CoreduetFullPeriodic" fullSync:1];
    id v7 = [*(id *)(a1 + 32) ckUtilities];
    [v7 logCloudKitSyncToPowerLogForSyncType:1 isCoreDuetSync:*(void *)(a1 + 40) != 0 didStartSync:0 didFinishSync:0 didSucceedSyncing:0];

    [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:0];
  }
  else
  {
    [*(id *)(a1 + 32) setBroadcastedSyncStateStateToFinished];
  }
}

uint64_t sub_1D97FFC94(uint64_t a1, int a2)
{
  int v3 = *(void **)(a1 + 32);
  if (a2)
  {
    [v3 _noteMetricsForSyncStartFrom:@"ComingBackOnlineChatSync" fullSync:0];
    id v4 = *(void **)(a1 + 32);
    return [v4 _syncChatsWithActivity:0];
  }
  else
  {
    return [v3 setBroadcastedSyncStateStateToFinished];
  }
}

void sub_1D98003D0(uint64_t a1)
{
  int v2 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  char v3 = [v2 isSystemLocked];

  if ((v3 & 1) == 0)
  {
    id v4 = [*(id *)(a1 + 32) reloadTimer];

    if (!v4)
    {
      if (IMOSLoggingEnabled())
      {
        id v5 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Setting up a timer to reload the UI", buf, 2u);
        }
      }
      uint64_t v6 = (void *)MEMORY[0x1E4F1CB00];
      [*(id *)(a1 + 32) reloadTimeInterval];
      v8[0] = MEMORY[0x1E4F143A8];
      v8[1] = 3221225472;
      _DWORD v8[2] = sub_1D980052C;
      v8[3] = &unk_1E6B77278;
      void v8[4] = *(void *)(a1 + 32);
      id v7 = objc_msgSend(v6, "scheduledTimerWithTimeInterval:repeats:block:", 0, v8);
      [*(id *)(a1 + 32) setReloadTimer:v7];
    }
  }
}

void sub_1D980052C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [MEMORY[0x1E4F6EAB8] sharedInstance];
  char v5 = [v4 isSystemLocked];

  int v6 = IMOSLoggingEnabled();
  if (v5)
  {
    if (v6)
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v9 = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Not Refreshing UI after time because device is locked", v9, 2u);
      }
    }
  }
  else
  {
    if (v6)
    {
      char v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Refreshing UI after time because device is unlocked", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) _refreshUIWhileSyncing];
  }
}

void sub_1D98006F8(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) reloadTimer];

  if (v2)
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v8 = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Invalidating reload timer.", v8, 2u);
      }
    }
    id v4 = [*(id *)(a1 + 32) reloadTimer];
    [v4 invalidate];

    [*(id *)(a1 + 32) setReloadTimer:0];
  }
  char v5 = (void *)MEMORY[0x1E4FBA8A8];
  int v6 = +[IMDChatRegistry sharedInstance];
  [v5 cancelPreviousPerformRequestsWithTarget:v6 selector:sel_refreshUIWhileSyncing object:0];

  id v7 = +[IMDChatRegistry sharedInstance];
  [v7 performSelector:sel_refreshUIWhileSyncing withObject:0 afterDelay:0.5];
}

void sub_1D9801020(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9800FE8);
  }
  _Unwind_Resume(a1);
}

void sub_1D98014E0(uint64_t a1, uint64_t a2)
{
  id v4 = +[IMDCKUtilities sharedInstance];
  [v4 logToPowerLogForLogDumpGUID:*(void *)(a1 + 32) logDumpCompleted:1 logDumpSucceeded:1 logDumpSendingCompleted:1 logDumpSendingSucceeded:a2 reason:@"RestoreFailuresDump"];
}

uint64_t sub_1D9802448(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D9802A8C(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) ckUtilities];
  [v2 postSyncStateToCloudKit:@"InitialChatSyncInitiated"];

  id v3 = [*(id *)(a1 + 32) chatSyncController];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D9802B80;
  v7[3] = &unk_1E6B772A0;
  uint64_t v4 = *(void *)(a1 + 40);
  int v6 = *(void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  void v7[4] = *(void *)(a1 + 32);
  uint64_t v10 = v5;
  id v8 = v6;
  id v9 = *(id *)(a1 + 40);
  [v3 syncChatsWithType:0 withActivity:v4 completion:v7];
}

void sub_1D9802B80(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v16) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 0, 0, 1, a2, 0, 0, v16, *(void *)(a1 + 56));

  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced chats after new device bringup", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) ckUtilities];
    [v8 postSyncStateToCloudKit:@"InitialMessageSyncInitiated"];

    id v9 = [*(id *)(a1 + 32) initialMessageSyncController];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1D9802DD8;
    void v19[3] = &unk_1E6B772C8;
    char v23 = a2;
    uint64_t v10 = *(void *)(a1 + 56);
    int v11 = *(void **)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    uint64_t v22 = v10;
    uint64_t v12 = &v20;
    id v20 = v11;
    id v21 = *(id *)(a1 + 48);
    [v9 syncMessagesWithSyncType:0 deviceConditionsToCheck:0 activity:0 completionBlock:v19];
  }
  else
  {
    uint64_t v13 = *(void *)(a1 + 56);
    uint64_t v14 = *(void **)(a1 + 32);
    uint64_t v15 = *(void *)(a1 + 40);
    v17[0] = MEMORY[0x1E4F143A8];
    v17[1] = 3221225472;
    void v17[2] = sub_1D98032C8;
    v17[3] = &unk_1E6B74108;
    void v17[4] = v14;
    v18[1] = v13;
    uint64_t v12 = (id *)v18;
    v18[0] = *(id *)(a1 + 48);
    [v14 _handleSyncFailureType:0 step:2 activity:0 attemptCount:v13 startTime:v15 error:v5 retry:v17];
  }
}

void sub_1D9802DD8(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v20) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 0, 0, 1, *(unsigned __int8 *)(a1 + 64), 1, a2, v20, *(void *)(a1 + 56));

  if (v5 || !a2)
  {
    uint64_t v17 = *(void *)(a1 + 56);
    uint64_t v18 = *(void **)(a1 + 32);
    uint64_t v19 = *(void *)(a1 + 40);
    v21[0] = MEMORY[0x1E4F143A8];
    v21[1] = 3221225472;
    v21[2] = sub_1D98032B4;
    void v21[3] = &unk_1E6B74108;
    void v21[4] = v18;
    v22[1] = v17;
    uint64_t v13 = (id *)v22;
    v22[0] = *(id *)(a1 + 48);
    [v18 _handleSyncFailureType:0 step:3 activity:0 attemptCount:v17 startTime:v19 error:v5 retry:v21];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced messages after new device bringup", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) chatSyncController];
    int v9 = [v8 fetchedChatsDuringLastSync];

    if (v9) {
      IMSetDomainBoolForKey();
    }
    uint64_t v10 = [*(id *)(a1 + 32) ckUtilities];
    [v10 postSyncStateToCloudKit:@"InitialAttachmentSyncInitiated"];

    int v11 = [*(id *)(a1 + 32) initialAttachmentSyncController];
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = sub_1D980306C;
    v23[3] = &unk_1E6B772A0;
    uint64_t v12 = *(void **)(a1 + 40);
    uint64_t v23[4] = *(void *)(a1 + 32);
    uint64_t v13 = &v24;
    id v14 = v12;
    uint64_t v16 = *(void **)(a1 + 48);
    uint64_t v15 = *(void *)(a1 + 56);
    id v24 = v14;
    uint64_t v26 = v15;
    id v25 = v16;
    [v11 syncAttachmentsWithSyncType:0 deviceConditionsToCheck:0 activity:0 completionBlock:v23];
  }
}

void sub_1D980306C(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  int v6 = *(void **)(a1 + 32);
  if (v5 || !a2)
  {
    uint64_t v13 = *(void *)(a1 + 56);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D98032A0;
    v15[3] = &unk_1E6B74108;
    void v15[4] = v6;
    uint64_t v17 = v13;
    uint64_t v14 = *(void *)(a1 + 40);
    id v16 = *(id *)(a1 + 48);
    [v6 _handleSyncFailureType:0 step:5 activity:0 attemptCount:v13 startTime:v14 error:v5 retry:v15];
  }
  else
  {
    [*(id *)(a1 + 32) setIsSyncing:0];
    [*(id *)(a1 + 32) _reloadChatRegistryOnMainThread];
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced attachments after new device bringup", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) syncState];
    int v9 = [MEMORY[0x1E4F1C9C8] date];
    [v8 setAnalyticSyncDatesDictionaryObject:v9 forKey:*MEMORY[0x1E4F6D008] shouldOverrideIfExists:0];

    IMSetDomainBoolForKey();
    [*(id *)(a1 + 32) _noteMeticsForSyncEndedWithSuccces:1];
    uint64_t v10 = [*(id *)(a1 + 32) ckUtilities];
    uint64_t v11 = *(void *)(*(void *)(a1 + 32) + 80);
    uint64_t v12 = [MEMORY[0x1E4F1C9C8] now];
    [v12 timeIntervalSinceDate:*(void *)(a1 + 40)];
    objc_msgSend(v10, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 0, 0, v11, 1);

    [*(id *)(a1 + 32) kickOffEagerSyncIfApplicable];
  }
}

uint64_t sub_1D98032A0(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginInitialSyncAttemptCount:*(void *)(a1 + 48) + 1 withActivity:*(void *)(a1 + 40)];
}

uint64_t sub_1D98032B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginInitialSyncAttemptCount:*(void *)(a1 + 48) + 1 withActivity:*(void *)(a1 + 40)];
}

uint64_t sub_1D98032C8(uint64_t a1)
{
  return [*(id *)(a1 + 32) beginInitialSyncAttemptCount:*(void *)(a1 + 48) + 1 withActivity:*(void *)(a1 + 40)];
}

void sub_1D98034B4()
{
  id v0 = +[IMDChatRegistry sharedInstance];
  [v0 _forceReloadChats:1];
}

void sub_1D9803714(uint64_t a1, int a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    [*(id *)(a1 + 32) _didPassAccountAndIdentityUpdateNeeds];
    id v7 = *(void **)(a1 + 32);
    int v6 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 56);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D980390C;
    v15[3] = &unk_1E6B75FE8;
    void v15[4] = v7;
    id v16 = v6;
    [v7 _beginPeriodicSyncWithActivity:v16 attemptCount:v8 syncChatsCompletionBlock:v15];
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v18 = v5;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "****** Manatee keys not available. Not syncing %@ ******", buf, 0xCu);
      }
    }
    uint64_t v10 = *(void **)(a1 + 32);
    uint64_t v11 = *(void *)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = sub_1D9803C3C;
    v13[3] = &unk_1E6B73268;
    id v14 = v5;
    [v10 _handleSyncFailureType:1 step:0 activity:v11 attemptCount:0 startTime:v12 error:v14 retry:v13];
  }
}

void sub_1D980390C(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [*(id *)(a1 + 32) ckUtilities];
  [v4 logCloudKitSyncToPowerLogForSyncType:1 isCoreDuetSync:*(void *)(a1 + 40) != 0 didStartSync:1 didFinishSync:1 didSucceedSyncing:a2];

  if (a2)
  {
    id v5 = [*(id *)(a1 + 32) ckUtilities];
    int v6 = [v5 enableAttachmentMetricCollection];

    if (v6)
    {
      id v7 = +[IMDCKCacheDeleteManager sharedInstance];
      [v7 metricAttachmentsToPurge:300000000 withActivity:*(void *)(a1 + 40)];
    }
    uint64_t v8 = [MEMORY[0x1E4F1C9C8] date];
    if (IMOSLoggingEnabled())
    {
      int v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        int v20 = 138412290;
        id v21 = v8;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "First full sync is complete, noting down date %@", (uint8_t *)&v20, 0xCu);
      }
    }
    uint64_t v10 = [*(id *)(a1 + 32) syncState];
    [v10 setAnalyticSyncDatesDictionaryObject:v8 forKey:*MEMORY[0x1E4F6CFE0] shouldOverrideIfExists:0];

    uint64_t v11 = [*(id *)(a1 + 32) syncState];
    [v11 setAnalyticSyncDatesDictionaryObject:v8 forKey:*MEMORY[0x1E4F6CFC8] shouldOverrideIfExists:0];
  }
  uint64_t v12 = [MEMORY[0x1E4F6E810] sharedInstance];
  [v12 noteCoreDuetSyncEnded];

  uint64_t v13 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v12) = [v13 logDumpIsNecessaryAfterSync];

  int v14 = IMOSLoggingEnabled();
  if (v12)
  {
    if (v14)
    {
      uint64_t v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "We need to dump logs after syncing", (uint8_t *)&v20, 2u);
      }
    }
    id v16 = [*(id *)(a1 + 32) ckUtilities];
    uint64_t v17 = [*(id *)(a1 + 32) ckUtilities];
    id v18 = [v17 logCollectorAddress];
    [v16 reportMOCDebuggingErrorWithString:@"LowSyncStats" internalOnly:1 initialSync:0 sendToHandle:v18 reasonString:@"LowSyncStats"];
  }
  else if (v14)
  {
    uint64_t v19 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "We don't need to dump logs", (uint8_t *)&v20, 2u);
    }
  }
}

void sub_1D9803C3C(uint64_t a1)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(a1 + 32);
      int v4 = 138412290;
      uint64_t v5 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Could retry periodic sync based on error %@", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D9803F10(uint64_t a1, char a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8) = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Attachment metadata only sync succeeded", (uint8_t *)&v8, 2u);
      }
LABEL_9:
    }
  }
  else if (v6)
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Attachment metadata only sync failed with error: %@", (uint8_t *)&v8, 0xCu);
    }
    goto LABEL_9;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D98047C8(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  int v2 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  id v6[2] = sub_1D980489C;
  v6[3] = &unk_1E6B77390;
  void v6[4] = v3;
  id v4 = v2;
  uint64_t v5 = *(void *)(a1 + 64);
  id v7 = v4;
  uint64_t v10 = v5;
  id v8 = *(id *)(a1 + 48);
  id v9 = *(id *)(a1 + 56);
  [v3 syncAttachmentMetadataFirstSyncWithActivity:v4 deviceConditionsToCheck:0 completionBlock:v6];
}

void sub_1D980489C(uint64_t a1, char a2, uint64_t a3)
{
  id v4 = *(void **)(a1 + 32);
  if (a2)
  {
    uint64_t v5 = [*(id *)(a1 + 32) chatSyncController];
    v19[0] = MEMORY[0x1E4F143A8];
    v19[1] = 3221225472;
    v19[2] = sub_1D9804A7C;
    void v19[3] = &unk_1E6B77390;
    int v6 = *(void **)(a1 + 40);
    void v19[4] = *(void *)(a1 + 32);
    id v7 = &v20;
    id v8 = v6;
    uint64_t v9 = *(void *)(a1 + 64);
    id v20 = v8;
    uint64_t v23 = v9;
    uint64_t v10 = &v21;
    id v21 = *(id *)(a1 + 48);
    id v22 = *(id *)(a1 + 56);
    [v5 syncChatsWithType:1 withActivity:v8 completion:v19];
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 64);
    uint64_t v13 = *(void **)(a1 + 40);
    uint64_t v14 = *(void *)(a1 + 48);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1D9804A68;
    void v24[3] = &unk_1E6B76D70;
    void v24[4] = v4;
    id v7 = &v25;
    id v15 = v13;
    uint64_t v17 = *(void **)(a1 + 56);
    uint64_t v16 = *(void *)(a1 + 64);
    id v25 = v15;
    v26[1] = v16;
    uint64_t v10 = (id *)v26;
    v26[0] = v17;
    if (([v4 _handleSyncFailureType:1 step:2 activity:v15 attemptCount:v12 startTime:v14 error:a3 retry:v24] & 1) == 0)
    {
      uint64_t v18 = *(void *)(a1 + 56);
      if (v18) {
        (*(void (**)(uint64_t, void))(v18 + 16))(v18, 0);
      }
    }
  }
}

uint64_t sub_1D9804A68(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

void sub_1D9804A7C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v22) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(void *)(a1 + 40) != 0, 1, a2, 0, 0, v22, *(void *)(a1 + 64));

  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced chats", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) messageSyncController];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = sub_1D9804D0C;
    v26[3] = &unk_1E6B77368;
    uint64_t v9 = *(void **)(a1 + 40);
    uint8_t v26[4] = *(void *)(a1 + 32);
    uint64_t v10 = &v27;
    id v11 = v9;
    char v31 = a2;
    uint64_t v12 = *(void *)(a1 + 64);
    id v27 = v11;
    uint64_t v30 = v12;
    uint64_t v13 = &v28;
    id v28 = *(id *)(a1 + 48);
    id v29 = *(id *)(a1 + 56);
    [v8 syncMessagesWithSyncType:1 deviceConditionsToCheck:0 activity:v11 completionBlock:v26];
  }
  else
  {
    id v15 = *(void **)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 48);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = sub_1D9805964;
    v23[3] = &unk_1E6B76D70;
    uint64_t v23[4] = v15;
    uint64_t v10 = &v24;
    id v18 = v14;
    id v20 = *(void **)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    id v24 = v18;
    v25[1] = v19;
    uint64_t v13 = (id *)v25;
    v25[0] = v20;
    if (([v15 _handleSyncFailureType:1 step:2 activity:v18 attemptCount:v16 startTime:v17 error:v5 retry:v23] & 1) == 0)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void))(v21 + 16))(v21, 0);
      }
    }
  }
}

void sub_1D9804D0C(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v22) = 0;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(void *)(a1 + 40) != 0, 1, *(unsigned __int8 *)(a1 + 72), 1, a2, v22, *(void *)(a1 + 64));

  if (v5 || !a2)
  {
    id v15 = *(void **)(a1 + 32);
    uint64_t v14 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 64);
    uint64_t v17 = *(void *)(a1 + 48);
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 3221225472;
    void v23[2] = sub_1D9805950;
    v23[3] = &unk_1E6B76D70;
    uint64_t v23[4] = v15;
    uint64_t v10 = &v24;
    id v18 = v14;
    id v20 = *(void **)(a1 + 56);
    uint64_t v19 = *(void *)(a1 + 64);
    id v24 = v18;
    v25[1] = v19;
    uint64_t v13 = (id *)v25;
    v25[0] = v20;
    if (([v15 _handleSyncFailureType:1 step:3 activity:v18 attemptCount:v16 startTime:v17 error:v5 retry:v23] & 1) == 0)
    {
      uint64_t v21 = *(void *)(a1 + 56);
      if (v21) {
        (*(void (**)(uint64_t, void))(v21 + 16))(v21, 0);
      }
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced messages", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) updateSyncController];
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = sub_1D9804FA0;
    v26[3] = &unk_1E6B77340;
    uint64_t v9 = *(void **)(a1 + 40);
    uint8_t v26[4] = *(void *)(a1 + 32);
    uint64_t v10 = &v27;
    id v11 = v9;
    char v31 = *(unsigned char *)(a1 + 72);
    char v32 = a2;
    uint64_t v12 = *(void *)(a1 + 64);
    id v27 = v11;
    uint64_t v30 = v12;
    uint64_t v13 = &v28;
    id v28 = *(id *)(a1 + 48);
    id v29 = *(id *)(a1 + 56);
    [v8 syncWithType:0 withActivity:0 withCompletion:v26];
  }
}

void sub_1D9804FA0(uint64_t a1, int a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (v5 || !a2)
  {
    if (v6)
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v35 = v5;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Failed syncing updates with error %@", buf, 0xCu);
      }
    }
    uint64_t v17 = *(void **)(a1 + 32);
    uint64_t v16 = *(void **)(a1 + 40);
    uint64_t v18 = *(void *)(a1 + 64);
    uint64_t v19 = *(void *)(a1 + 48);
    v25[0] = MEMORY[0x1E4F143A8];
    v25[1] = 3221225472;
    void v25[2] = sub_1D980593C;
    v25[3] = &unk_1E6B76D70;
    uint8_t v25[4] = v17;
    id v20 = v16;
    uint64_t v22 = *(void **)(a1 + 56);
    uint64_t v21 = *(void *)(a1 + 64);
    id v26 = v20;
    v27[1] = v21;
    v27[0] = v22;
    char v23 = [v17 _handleSyncFailureType:1 step:4 activity:v20 attemptCount:v18 startTime:v19 error:v5 retry:v25];
    uint64_t v13 = &v26;
    uint64_t v14 = (id *)v27;
    if ((v23 & 1) == 0)
    {
      uint64_t v24 = *(void *)(a1 + 56);
      if (v24) {
        (*(void (**)(uint64_t, void))(v24 + 16))(v24, 0);
      }
    }
  }
  else
  {
    if (v6)
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Successfully synced updates", buf, 2u);
      }
    }
    id v8 = [*(id *)(a1 + 32) ckUtilities];
    [v8 postSyncStateToCloudKit:@"AttachmentSyncStarted"];

    uint64_t v9 = [*(id *)(a1 + 32) attachmentSyncController];
    uint64_t v10 = *(void **)(a1 + 40);
    v28[0] = MEMORY[0x1E4F143A8];
    v28[1] = 3221225472;
    v28[2] = sub_1D98052B8;
    v28[3] = &unk_1E6B77340;
    v28[4] = *(void *)(a1 + 32);
    id v11 = v10;
    __int16 v33 = *(_WORD *)(a1 + 72);
    uint64_t v12 = *(void *)(a1 + 64);
    id v29 = v11;
    uint64_t v32 = v12;
    id v30 = *(id *)(a1 + 48);
    id v31 = *(id *)(a1 + 56);
    [v9 syncAttachmentsWithSyncType:1 deviceConditionsToCheck:0 activity:v11 completionBlock:v28];

    uint64_t v13 = &v29;
    uint64_t v14 = &v30;
  }
}

void sub_1D98052B8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = [*(id *)(a1 + 32) ckUtilities];
  BYTE3(v28) = 0;
  *(_WORD *)((char *)&v28 + 1) = v4 == 0;
  LOBYTE(v28) = 1;
  objc_msgSend(v5, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(void *)(a1 + 40) != 0, 1, *(unsigned __int8 *)(a1 + 72), 1, *(unsigned __int8 *)(a1 + 73), v28, *(void *)(a1 + 64));

  if (v4)
  {
    id v7 = *(void **)(a1 + 32);
    int v6 = *(void **)(a1 + 40);
    uint64_t v8 = *(void *)(a1 + 64);
    uint64_t v9 = *(void *)(a1 + 48);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    v29[2] = sub_1D9805928;
    v29[3] = &unk_1E6B76D70;
    void v29[4] = v7;
    id v10 = v6;
    uint64_t v12 = *(void **)(a1 + 56);
    uint64_t v11 = *(void *)(a1 + 64);
    id v30 = v10;
    uint64_t v32 = v11;
    id v31 = v12;
    LOBYTE(v7) = [v7 _handleSyncFailureType:1 step:5 activity:v10 attemptCount:v8 startTime:v9 error:v4 retry:v29];

    if (v7) {
      goto LABEL_15;
    }
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Successfully synced attachments", buf, 2u);
      }
    }
    uint64_t v14 = [MEMORY[0x1E4F6E6E8] sharedInstance];
    id v15 = [*(id *)(a1 + 32) syncStartDate];
    [v14 postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:v15 chatsDidsync:1 messagesDidSync:1 attachmentsDidSync:1 recoverableMessagesDidSync:1];

    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Successfully synced attachments", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) _reloadChatRegistryOnMainThread];
    uint64_t v17 = [MEMORY[0x1E4F6E890] sharedInstance];
    uint64_t v18 = *MEMORY[0x1E4F6D790];
    uint64_t v19 = NSNumber;
    id v20 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v21 = [*(id *)(a1 + 32) syncStartDate];
    [v20 timeIntervalSinceDate:v21];
    uint64_t v22 = objc_msgSend(v19, "numberWithDouble:");
    [v17 trackEvent:v18 withStatistic:v22];

    [*(id *)(a1 + 32) _noteMeticsForSyncEndedWithSuccces:1];
    [*(id *)(a1 + 32) _writeDownSyncDate];
    uint64_t v24 = *(void **)(a1 + 32);
    char v23 = *(void **)(a1 + 40);
    v33[0] = MEMORY[0x1E4F143A8];
    v33[1] = 3221225472;
    void v33[2] = sub_1D9805698;
    v33[3] = &unk_1E6B77318;
    v33[4] = v24;
    id v25 = v23;
    uint64_t v26 = *(void *)(a1 + 64);
    id v34 = v25;
    uint64_t v37 = v26;
    id v35 = *(id *)(a1 + 48);
    id v36 = *(id *)(a1 + 56);
    [v24 syncDeletesToCloudKitWithActivity:v25 completion:v33];
  }
  [*(id *)(a1 + 32) setIsSyncing:0];
  uint64_t v27 = *(void *)(a1 + 56);
  if (v27) {
    (*(void (**)(uint64_t, BOOL))(v27 + 16))(v27, v4 == 0);
  }
LABEL_15:
}

void sub_1D9805698(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    int v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Completed syncing deletes", buf, 2u);
    }
  }
  uint64_t v7 = MEMORY[0x1E4F143A8];
  uint64_t v8 = 3221225472;
  uint64_t v9 = sub_1D98057C8;
  id v10 = &unk_1E6B772F0;
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 32);
  id v4 = v3;
  uint64_t v5 = *(void *)(a1 + 64);
  id v12 = v4;
  uint64_t v14 = v5;
  id v13 = *(id *)(a1 + 48);
  int v6 = _Block_copy(&v7);
  objc_msgSend(*(id *)(a1 + 32), "_syncRecoverableMessagesToCloudKitWithActivity:syncAttemptCount:startTime:syncCompletionBlock:retryCompletionBock:", *(void *)(a1 + 40), *(void *)(a1 + 64), *(void *)(a1 + 48), v6, *(void *)(a1 + 56), v7, v8, v9, v10, v11);
}

void sub_1D98057C8(uint64_t a1)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) _resetSyncStateAndAttemptCounts];
  [*(id *)(a1 + 32) setIsSyncing:0];
  int v2 = *(_xpc_activity_s **)(a1 + 40);
  if (v2)
  {
    BOOL v3 = xpc_activity_set_state(v2, 5);
    if (IMOSLoggingEnabled())
    {
      id v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v9[0] = 67109120;
        v9[1] = v3;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Set state full sync activity result %d", (uint8_t *)v9, 8u);
      }
    }
  }
  uint64_t v5 = [*(id *)(a1 + 32) ckUtilities];
  BOOL v6 = *(void *)(a1 + 40) != 0;
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = [MEMORY[0x1E4F1C9C8] now];
  [v8 timeIntervalSinceDate:*(void *)(a1 + 48)];
  objc_msgSend(v5, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 1, v6, v7, 1);
}

uint64_t sub_1D9805928(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D980593C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D9805950(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

uint64_t sub_1D9805964(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

void sub_1D9805ABC(id *a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Done deleteing chat with error %@", buf, 0xCu);
    }
  }
  if (v3)
  {
    uint64_t v5 = [a1[4] ckUtilities];
    [v5 reportErrorForSyncType:4 syncStep:@"ChatDeletionComplete" response:0 error:v3];
  }
  BOOL v6 = [a1[4] messageSyncController];
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D9805C78;
  v7[3] = &unk_1E6B74708;
  void v7[4] = a1[4];
  id v8 = a1[5];
  id v9 = a1[6];
  [v6 syncDeletedMessagesToCloudKitWithCompletion:v7];
}

void sub_1D9805C78(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v12 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Done deleteing messages with error %@", buf, 0xCu);
    }
  }
  if (v4)
  {
    BOOL v6 = [*(id *)(a1 + 32) ckUtilities];
    [v6 reportErrorForSyncType:4 syncStep:@"MessageDeletionComplete" response:0 error:v4];
  }
  uint64_t v7 = [*(id *)(a1 + 32) attachmentSyncController];
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1D9805E20;
  v9[3] = &unk_1E6B73030;
  void v9[4] = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  id v10 = *(id *)(a1 + 48);
  [v7 syncAttachmentDeletesToCloudKitWithActivity:v8 completion:v9];
}

void sub_1D9805E20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v11 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Done deleteing attachments with error %@", buf, 0xCu);
    }
  }
  if (v4)
  {
    BOOL v6 = [*(id *)(a1 + 32) ckUtilities];
    [v6 reportErrorForSyncType:4 syncStep:@"AttachmentDeletionComplete" response:0 error:v4];
  }
  uint64_t v7 = [*(id *)(a1 + 32) recoverableMessageSyncController];
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D9805FC4;
  v8[3] = &unk_1E6B73030;
  void v8[4] = *(void *)(a1 + 32);
  id v9 = *(id *)(a1 + 40);
  [v7 syncRemovedRecoverableMessagesToCloudKitWithCompletion:v8];
}

void sub_1D9805FC4(uint64_t a1, uint64_t a2, void *a3)
{
  id v6 = a3;
  if (v6)
  {
    id v4 = [*(id *)(a1 + 32) ckUtilities];
    [v4 reportErrorForSyncType:4 syncStep:@"RecoverableMessageDeletionComplete" response:0 error:v6];
  }
  uint64_t v5 = *(void *)(a1 + 40);
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
}

void sub_1D9806184(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) ckUtilities];
  LODWORD(v24) = 16843009;
  objc_msgSend(v6, "logCloudKitSyncToPowerLogForSyncType:isCoreDuetSync:didCompleteChatSync:didSucceedSyncingChats:didCompleteMessageSync:didSucceedSyncingMessages:didCompleteAttachmentSync:didSucceedSyncingAttachments:didCompleteRecoverableMessageSync:didSucceedSyncingRecoverableMessageSync:syncAttemptCount:", 1, *(void *)(a1 + 40) != 0, 1, 1, 1, 1, v24, *(void *)(a1 + 72));

  if (a2)
  {
    uint64_t v7 = [MEMORY[0x1E4F6E6E8] sharedInstance];
    uint64_t v8 = [*(id *)(a1 + 32) syncStartDate];
    [v7 postCoreAutomationNotificationFinishedPeriodicSyncNotificationWithStartTime:v8 chatsDidsync:1 messagesDidSync:1 attachmentsDidSync:1 recoverableMessagesDidSync:1];

    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "[Recently Deleted] Successfully synced recoverable messages", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) _reloadChatRegistryOnMainThread];
    id v10 = [MEMORY[0x1E4F6E890] sharedInstance];
    uint64_t v11 = *MEMORY[0x1E4F6D790];
    uint64_t v12 = NSNumber;
    uint64_t v13 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v14 = [*(id *)(a1 + 32) syncStartDate];
    [v13 timeIntervalSinceDate:v14];
    id v15 = objc_msgSend(v12, "numberWithDouble:");
    [v10 trackEvent:v11 withStatistic:v15];

    [*(id *)(a1 + 32) _noteMeticsForSyncEndedWithSuccces:1];
    [*(id *)(a1 + 32) _writeDownSyncDate];
    goto LABEL_14;
  }
  uint64_t v17 = *(void **)(a1 + 32);
  uint64_t v16 = *(void **)(a1 + 40);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v19 = *(void *)(a1 + 48);
  v25[0] = MEMORY[0x1E4F143A8];
  v25[1] = 3221225472;
  void v25[2] = sub_1D98064B8;
  v25[3] = &unk_1E6B76D70;
  uint8_t v25[4] = v17;
  id v20 = v16;
  uint64_t v21 = *(void *)(a1 + 72);
  id v26 = v20;
  uint64_t v28 = v21;
  id v27 = *(id *)(a1 + 56);
  if (![v17 _handleSyncFailureType:1 step:6 activity:v20 attemptCount:v18 startTime:v19 error:v5 retry:v25])
  {

LABEL_14:
    uint64_t v23 = *(void *)(a1 + 64);
    if (v23) {
      (*(void (**)(void))(v23 + 16))();
    }
    goto LABEL_16;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v22 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "[Recently Deleted] Recoverable messages sync unsuccessful. Will Retry", buf, 2u);
    }
  }
LABEL_16:
}

uint64_t sub_1D98064B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _beginPeriodicSyncWithActivity:*(void *)(a1 + 40) attemptCount:*(void *)(a1 + 56) + 1 syncChatsCompletionBlock:*(void *)(a1 + 48)];
}

void sub_1D9806718(uint64_t a1)
{
  int v2 = [*(id *)(a1 + 32) ckUtilities];
  [v2 postSyncStateToCloudKit:@"PeriodicChatSyncStarted"];

  id v3 = [*(id *)(a1 + 32) chatSyncController];
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1D9806808;
  void v5[3] = &unk_1E6B73BA0;
  id v4 = *(void **)(a1 + 40);
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v4;
  id v7 = *(id *)(a1 + 48);
  [v3 syncChatsWithType:1 withActivity:v6 completion:v5];
}

void sub_1D9806808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = @"NO";
      if (a2) {
        id v7 = @"YES";
      }
      int v20 = 138412290;
      uint64_t v21 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Synced chats with success:%@", (uint8_t *)&v20, 0xCu);
    }
  }
  uint64_t v8 = [MEMORY[0x1E4F6E890] sharedInstance];
  if (a2) {
    id v9 = (void *)MEMORY[0x1E4F6D7A0];
  }
  else {
    id v9 = (void *)MEMORY[0x1E4F6D7A8];
  }
  id v10 = NSNumber;
  uint64_t v11 = [MEMORY[0x1E4F1C9C8] date];
  uint64_t v12 = [*(id *)(a1 + 32) syncStartDate];
  [v11 timeIntervalSinceDate:v12];
  uint64_t v13 = objc_msgSend(v10, "numberWithDouble:");
  [v8 trackEvent:*v9 withStatistic:v13];

  [*(id *)(a1 + 32) _noteMeticsForSyncEndedWithSuccces:a2];
  uint64_t v14 = *(_xpc_activity_s **)(a1 + 40);
  if (v14)
  {
    BOOL v15 = xpc_activity_set_state(v14, 5);
    if (IMOSLoggingEnabled())
    {
      uint64_t v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        int v20 = 67109120;
        LODWORD(v21) = v15;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Set state for chat syncing with result %d", (uint8_t *)&v20, 8u);
      }
    }
  }
  uint64_t v17 = [*(id *)(a1 + 32) ckUtilities];
  BOOL v18 = *(void *)(a1 + 40) != 0;
  uint64_t v19 = [MEMORY[0x1E4F1C9C8] now];
  [v19 timeIntervalSinceDate:*(void *)(a1 + 48)];
  objc_msgSend(v17, "reportCompletionForSyncType:isCoreDuetSync:onAttempt:wasSuccessful:duration:", 3, v18, 0, a2);

  [*(id *)(a1 + 32) setIsSyncing:0];
}

void sub_1D9806BC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = IMGetCachedDomainValueForKey();
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v6;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Unable to check exit zone record Error: %@", (uint8_t *)&v16, 0xCu);
      }
    }
    goto LABEL_15;
  }
  if (v5 || *(unsigned char *)(a1 + 56))
  {
    if (IMOSLoggingEnabled())
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        id v10 = @"YES";
        if (!*(unsigned char *)(a1 + 56)) {
          id v10 = @"NO";
        }
        int v16 = 138412546;
        id v17 = v5;
        __int16 v18 = 2112;
        uint64_t v19 = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Entered exit zone at %@. Aborting sync, downloading all attachments. {shouldDownloadAssets: %@}", (uint8_t *)&v16, 0x16u);
      }
    }
LABEL_14:
    [*(id *)(a1 + 32) _beginExitStateCleanupIfNeededWithActivity:*(void *)(a1 + 40)];
LABEL_15:
    uint64_t v11 = 0;
    goto LABEL_16;
  }
  int v13 = IMOSLoggingEnabled();
  if (v7)
  {
    if (v13)
    {
      uint64_t v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v7;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "We are downgrading the security level, downgrade date %@. We can't download at this time. When the Identity is restored, we will kick sync appropriately", (uint8_t *)&v16, 0xCu);
      }
    }
    goto LABEL_14;
  }
  if (v13)
  {
    BOOL v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LOWORD(v16) = 0;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Not in exit state, continuing sync", (uint8_t *)&v16, 2u);
    }
  }
  uint64_t v11 = 1;
LABEL_16:
  uint64_t v12 = *(void *)(a1 + 48);
  if (v12) {
    (*(void (**)(uint64_t, uint64_t, id))(v12 + 16))(v12, v11, v6);
  }
}

void sub_1D98072D4(uint64_t a1, int a2, void *a3)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (a2)
  {
    id v6 = [*(id *)(a1 + 32) attachmentSyncController];
    [v6 downloadAttachmentAssetsWithActivity:*(void *)(a1 + 40) restoringAttachments:1 completion:0];
  }
  else if (IMOSLoggingEnabled())
  {
    id v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v5;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Could not fetch salt due to error %@ aborting cleaning up MOC", (uint8_t *)&v8, 0xCu);
    }
  }
}

void sub_1D98076AC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D98075B4);
  }
  _Unwind_Resume(a1);
}

void sub_1D98078EC(uint64_t a1)
{
  uint64_t v1 = NSString;
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = (id *)(a1 + 40);
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  id v5 = [WeakRetained syncStartDate];
  id v7 = [v1 stringWithFormat:@"Started by %@, running since: %@:", v2, v5];

  id v6 = objc_loadWeakRetained(v3);
  [v6 _autoBugCaptureWithSubType:@"LongRunningSync" debugDescription:v7];
}

void sub_1D9807E8C(uint64_t a1, int a2, void *a3)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      id v6 = @"NO";
      if (a2) {
        id v7 = @"YES";
      }
      else {
        id v7 = @"NO";
      }
      if (v4) {
        id v6 = @"YES";
      }
      int v8 = 138412546;
      id v9 = v7;
      __int16 v10 = 2112;
      uint64_t v11 = v6;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Wrote sync date success to CloudKit %@ error %@", (uint8_t *)&v8, 0x16u);
    }
  }
}

uint64_t sub_1D9808098(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = result;
    [*(id *)(result + 32) _noteMetricsForSyncStartFrom:@"ManualChatSync" fullSync:0];
    id v3 = *(void **)(v2 + 32);
    return [v3 _syncChatsWithActivity:0];
  }
  return result;
}

void sub_1D980877C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      id v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v20 = v6;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "exitRecordDateWithCompletion in updateDowngradedDateIfNeeded failed with error: %@", buf, 0xCu);
      }
    }
    uint64_t v8 = *(void *)(a1 + 40);
    if (v8) {
      (*(void (**)(uint64_t, id))(v8 + 16))(v8, v6);
    }
  }
  else
  {
    int v9 = IMGetDomainBoolForKeyWithDefaultValue();
    __int16 v10 = [*(id *)(a1 + 32) ckUtilities];
    uint64_t v11 = [v10 _primaryiCloudAccountSecurityLevel];

    if (v9 != (v11 == 4))
    {
      IMCloudKitSetEligibleToToggleMiCSwitch();
      IMSetDomainBoolForKey();
      uint64_t v12 = IMGetCachedDomainValueForKey();
      if ((v9 ^ 1) & 1 | (v11 == 4))
      {
        int v13 = 0;
      }
      else
      {
        int v13 = [MEMORY[0x1E4F1C9C8] date];
      }
      if (([v12 isEqualToDate:v13] & 1) == 0) {
        IMSetDomainValueForKey();
      }
    }
    uint64_t v14 = +[IMDCKUtilities sharedInstance];
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1D9808A18;
    v16[3] = &unk_1E6B77458;
    id v15 = *(id *)(a1 + 40);
    id v17 = 0;
    id v18 = v15;
    [v14 fetchCloudKitAccountStatusAndUpdateEligibilityAndNeedsRepairStatusWithCompletion:v16];
  }
}

void sub_1D9808A18(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v4 = a3;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v4;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Finished updating security level with error: %@", (uint8_t *)&v7, 0xCu);
    }
  }
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6) {
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, *(void *)(a1 + 32));
  }
}

void sub_1D9808E90(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    id v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Finished checking for possible security level downgraded with error: %@. Broadcasting new state if needed.", (uint8_t *)&v4, 0xCu);
    }
  }
}

uint64_t sub_1D98092FC(uint64_t a1)
{
  [*(id *)(a1 + 32) verifyAccountsMatchForMoc];

  return IMSetDomainBoolForKey();
}

void sub_1D980B5A0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D980B260);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D980C73C()
{
  qword_1EBE2BA18 = objc_alloc_init(IMMessagesToTrack);

  return MEMORY[0x1F41817F8]();
}

void sub_1D980C8B8(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recentMessageIDs];
  [v2 addObject:*(void *)(a1 + 40)];

  id v3 = [*(id *)(a1 + 32) recentMessageIDs];
  unint64_t v4 = [v3 count];
  unint64_t v5 = [*(id *)(a1 + 32) maxNumberOfMessages];

  if (v4 > v5)
  {
    id v6 = [*(id *)(a1 + 32) recentMessageIDs];
    [v6 removeObjectAtIndex:0];
  }
}

void sub_1D980CA58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = [*(id *)(a1 + 32) recentMessageIDs];
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v2, [v3 containsObject:*(void *)(a1 + 40)]);
}

void sub_1D980D344(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D980D204);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D980E3B8(uint64_t a1, uint64_t a2)
{
  LOBYTE(v3) = *(unsigned char *)(a1 + 97);
  return [*(id *)(a1 + 32) registerChat:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 96) displayName:*(void *)(a1 + 48) groupID:*(void *)(a1 + 56) originalGroupID:*(void *)(a1 + 64) lastAddressedHandle:*(void *)(a1 + 72) lastAddressedSIMID:*(void *)(a1 + 80) handleInfo:a2 account:*(void *)(a1 + 88) isBlackholed:v3];
}

uint64_t sub_1D980F308(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__messageStoreCompletion_inputMessage_outputMessage_originalMessage_completionBlock_);
}

void sub_1D98102E8(uint64_t a1, void *a2)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (([v3 isTypingMessage] & 1) == 0 && (objc_msgSend(v3, "isSuggestedActionResponse") & 1) == 0)
  {
    unint64_t v4 = +[IMDChatRegistry sharedInstance];
    [v4 addMessage:v3 toChat:*(void *)(a1 + 32)];

    unint64_t v5 = +[IMDChatRegistry sharedInstance];
    [v5 updateStateForChat:*(void *)(a1 + 32) hintMessage:v3 shouldRebuildFailedMessageDate:1 shouldCalculateUnreadCount:0];

    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v6 = +[IMDMessageStore sharedInstance];
    int v7 = [v6 chatsForMessage:v3];

    uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v24 count:16];
    if (v8)
    {
      uint64_t v10 = *(void *)v17;
      *(void *)&long long v9 = 138412546;
      long long v15 = v9;
      do
      {
        uint64_t v11 = 0;
        do
        {
          if (*(void *)v17 != v10) {
            objc_enumerationMutation(v7);
          }
          uint64_t v12 = *(void *)(*((void *)&v16 + 1) + 8 * v11);
          if (v12 != *(void *)(a1 + 32))
          {
            if (IMOSLoggingEnabled())
            {
              int v13 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = v15;
                id v21 = v3;
                __int16 v22 = 2112;
                uint64_t v23 = v12;
                _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Removing message: %@   from chat: %@ due to send on different service", buf, 0x16u);
              }
            }
            uint64_t v14 = +[IMDChatRegistry sharedInstance];
            [v14 removeMessage:v3 fromChat:v12];
          }
          ++v11;
        }
        while (v8 != v11);
        uint64_t v8 = [v7 countByEnumeratingWithState:&v16 objects:v24 count:16];
      }
      while (v8);
    }
  }
}

void sub_1D9810534(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  long long v9 = v8;
  if (a2)
  {
    uint64_t v10 = [v8 scheduleType];
    BOOL v11 = [v9 scheduleState] != 1 && objc_msgSend(v7, "scheduleState") != 2;
    if (v10 == 2 && !v11)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v12 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          uint64_t v13 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v25 = v13;
          _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Updating lastScheduledMessageCreatedDate for sent scheduled message in chat: %@", buf, 0xCu);
        }
      }
      uint64_t v14 = *(void **)(a1 + 32);
      long long v15 = [MEMORY[0x1E4F1C9C8] date];
      [v14 setLastScheduledMessageCreatedDate:v15];
    }
    long long v16 = (id *)(a1 + 32);
    long long v17 = objc_msgSend(*(id *)(a1 + 40), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    long long v18 = [*(id *)(a1 + 48) accountID];
    uint64_t v19 = *(void *)(a1 + 56);
    uint64_t v20 = *(unsigned __int8 *)(a1 + 64);
    id v21 = [*(id *)(a1 + 32) chatProperties];
    __int16 v22 = [*v16 groupID];
    uint64_t v23 = [*v16 personCentricID];
    [v17 account:v18 chat:v19 style:v20 chatProperties:v21 groupID:v22 chatPersonCentricID:v23 messageReceived:v9];
  }
}

void sub_1D981183C(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D981176CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D9812D2C(void *a1)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  uint64_t v2 = +[IMDChatRegistry sharedInstance];
  id v3 = [v2 chats];

  long long v15 = v3;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = (id)[v3 copy];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v17;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v17 != v7) {
          objc_enumerationMutation(v4);
        }
        long long v9 = *(void **)(*((void *)&v16 + 1) + 8 * v8);
        uint64_t v10 = (void *)MEMORY[0x1E016A370]();
        BOOL v11 = [v9 lastMessage];
        uint64_t v12 = [v11 guid];
        int v13 = [v12 isEqualToString:v1];

        if (v13)
        {
          uint64_t v14 = +[IMDChatRegistry sharedInstance];
          [v14 updateStateForChat:v9 hintMessage:0 shouldRebuildFailedMessageDate:0 shouldCalculateUnreadCount:0];
        }
        ++v8;
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v6);
  }
}

uint64_t sub_1D9816600(uint64_t a1)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  long long v50 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  uint64_t v2 = +[IMDChatRegistry sharedInstance];
  id v3 = [v2 chats];

  uint64_t v4 = [v3 countByEnumeratingWithState:&v50 objects:v60 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v51;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v51 != v5) {
        objc_enumerationMutation(v3);
      }
      uint64_t v7 = *(void **)(*((void *)&v50 + 1) + 8 * v6);
      uint64_t v8 = (void *)MEMORY[0x1E016A370]();
      long long v9 = [v7 lastMessage];
      uint64_t v10 = [v9 guid];
      int v11 = [v10 isEqualToIgnoringCase:*(void *)(a1 + 32)];

      if (v11) {
        break;
      }
      if (v4 == ++v6)
      {
        uint64_t v4 = [v3 countByEnumeratingWithState:&v50 objects:v60 count:16];
        if (v4) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        double v55 = *(double *)&v7;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "   Found message from chat: %@", buf, 0xCu);
      }
    }
    double v13 = [v7 lastMessage];

    if (v13 != 0.0) {
      goto LABEL_16;
    }
  }
  else
  {
LABEL_9:
  }
  uint64_t v14 = +[IMDMessageStore sharedInstance];
  double v13 = [v14 messageWithGUID:*(void *)(a1 + 32)];

LABEL_16:
  if ([*(id *)&v13 isDelivered])
  {
    if (IMOSLoggingEnabled())
    {
      long long v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "   Message was already marked as delivered, ignoring", buf, 2u);
      }
LABEL_25:

      goto LABEL_26;
    }
    goto LABEL_26;
  }
  if ([*(id *)&v13 errorCode] != 43)
  {
    long long v17 = [*(id *)&v13 service];
    long long v18 = [*(id *)(a1 + 40) service];
    long long v19 = [v18 internalName];

    uint64_t v16 = 0;
    if (v13 != 0.0 && v17 && v19)
    {
      if ([*(id *)(a1 + 40) messageServiceNamed:v19 canProcessMessagesFromServiceNamed:v17])
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v20 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            double v55 = v13;
            _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Found old message for delivery receipt: %@", buf, 0xCu);
          }
        }
        if (![*(id *)&v13 isDelivered]
          || ([*(id *)&v13 timeDelivered],
              uint64_t v21 = objc_claimAutoreleasedReturnValue(),
              BOOL v22 = v21 == 0,
              v21,
              v22))
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v24 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              double v25 = *(double *)(a1 + 32);
              *(_DWORD *)long long buf = 138412290;
              double v55 = v25;
              _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Received delivery receipt for message: %@", buf, 0xCu);
            }
          }
          sub_1D9816E8C(*(void **)&v13, *(void *)(a1 + 48));
          uint64_t v26 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
          int v27 = [v26 isScheduledMessagesCoreEnabled];

          if (v27)
          {
            [*(id *)&v13 setScheduleType:0];
            [*(id *)&v13 setScheduleState:0];
          }
          uint64_t v28 = [*(id *)&v13 time];
          id v29 = [*(id *)&v13 timeDelivered];
          [v29 timeIntervalSinceDate:v28];
          double v31 = v30;
          if (IMOSLoggingEnabled())
          {
            uint64_t v32 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 134217984;
              double v55 = v31;
              _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Delivery receipt time was: %f", buf, 0xCu);
            }
          }
          if (v31 > 0.0)
          {
            __int16 v33 = [MEMORY[0x1E4F6E890] sharedInstance];
            id v34 = [NSNumber numberWithDouble:v31];
            [v33 trackEvent:*MEMORY[0x1E4F6DD80] withStatistic:v34];

            id v35 = [NSNumber numberWithDouble:v31];
            uint64_t v58 = *MEMORY[0x1E4F6D728];
            uint64_t v59 = v35;
            id v36 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v59 forKeys:&v58 count:1];
            uint64_t v37 = [MEMORY[0x1E4F6E890] sharedInstance];
            [v37 trackEvent:*MEMORY[0x1E4F6D890] withDictionary:v36];

            id v38 = [MEMORY[0x1E4F6E8F0] sharedInstance];
            [v38 logMessageDelivered:*(void *)(a1 + 32) deliveryDuration:v35 messageProtocol:v17];
          }
          if (![*(id *)&v13 errorCode])
          {
            uint64_t v23 = @"NO";
LABEL_59:
            __int16 v41 = +[IMDMessageStore sharedInstance];
            uint64_t v42 = [v41 storeMessage:*(void *)&v13 forceReplace:0 modifyError:1 modifyFlags:1 flagMask:36873];

            uint64_t v43 = [v42 guid];
            sub_1D9812D2C(v43);

            uint64_t v16 = 1;
            double v13 = *(double *)&v42;
            goto LABEL_60;
          }
        }
        else if (![*(id *)&v13 errorCode])
        {
          uint64_t v16 = 0;
          uint64_t v23 = @"NO";
LABEL_60:
          if (IMOSLoggingEnabled())
          {
            objc_super v44 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412546;
              double v55 = v13;
              __int16 v56 = 2112;
              BOOL v57 = v23;
              _os_log_impl(&dword_1D967A000, v44, OS_LOG_TYPE_INFO, "Updated message: %@  had error: %@", buf, 0x16u);
            }
          }
          char v45 = [*(id *)(a1 + 40) isAwaitingStorageTimer];
          __int16 v46 = *(void **)(a1 + 40);
          if (v45)
          {
            __int16 v47 = [*(id *)&v13 guid];
            [v46 noteSuppressedMessageUpdate:v47];
          }
          else
          {
            __int16 v47 = [*(id *)(a1 + 40) broadcasterForChatListeners];
            uint64_t v48 = [*(id *)(a1 + 56) accountID];
            [v47 account:v48 chat:0 style:0 chatProperties:0 messageUpdated:*(void *)&v13];
          }
          goto LABEL_68;
        }
        if (IMOSLoggingEnabled())
        {
          __int16 v39 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
          {
            int v40 = [*(id *)&v13 errorCode];
            *(_DWORD *)long long buf = 67109120;
            LODWORD(v55) = v40;
            _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Message had error: %d", buf, 8u);
          }
        }
        [*(id *)&v13 setErrorCode:0];
        uint64_t v23 = @"YES";
        goto LABEL_59;
      }
      uint64_t v16 = 0;
    }
LABEL_68:

    goto LABEL_69;
  }
  if (IMOSLoggingEnabled())
  {
    long long v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "   Message was already marked as black holed, ignoring", buf, 2u);
    }
    goto LABEL_25;
  }
LABEL_26:
  uint64_t v16 = 0;
LABEL_69:

  return v16;
}

void sub_1D9816E8C(void *a1, uint64_t a2)
{
  id v4 = a1;
  if (a2)
  {
    [v4 setTimeDelivered:a2];
  }
  else
  {
    id v3 = [MEMORY[0x1E4F1C9C8] date];
    [v4 setTimeDelivered:v3];
  }
  objc_msgSend(v4, "setFlags:", objc_msgSend(v4, "flags") | 0x9000);
}

uint64_t sub_1D9816F20(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveMessageDeliveryReceiptForMessageID:*(void *)(a1 + 40) attempts:*(void *)(a1 + 64) + 1 date:*(void *)(a1 + 48) account:*(void *)(a1 + 56)];
}

void sub_1D981720C(uint64_t a1, uint64_t a2)
{
  id v9 = [*(id *)(a1 + 32) historyForMessagePart:a2];
  id v3 = [v9 firstObject];
  id v4 = [v3 messagePartText];

  uint64_t v5 = [v4 attribute:*MEMORY[0x1E4F6C1F8] atIndex:0 effectiveRange:0];
  uint64_t v6 = *(void **)(a1 + 32);
  uint64_t v7 = [v6 body];
  uint64_t v8 = objc_msgSend(v7, "__im_messageTextByAddingMessagePart:atIndex:", v4, (int)objc_msgSend(v5, "intValue"));
  [v6 setBody:v8];
}

void sub_1D9817BF8(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDMessageStore sharedInstance];
  id v3 = [v2 chatsForMessageGUID:*(void *)(a1 + 32)];

  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v29 = v5;
      __int16 v30 = 2112;
      double v31 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }
  }
  if (![v3 count] && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMEventCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412290;
      uint64_t v29 = v7;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Found no chats for messageID: %@", buf, 0xCu);
    }
  }
  uint64_t v8 = dispatch_group_create();
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v3;
  uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (v9)
  {
    uint64_t v11 = *(void *)v24;
    *(void *)&long long v10 = 138412546;
    long long v19 = v10;
    do
    {
      uint64_t v12 = 0;
      do
      {
        if (*(void *)v24 != v11) {
          objc_enumerationMutation(obj);
        }
        double v13 = *(void **)(*((void *)&v23 + 1) + 8 * v12);
        if (v13)
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v14 = OSLogHandleForIMEventCategory();
            if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            {
              uint64_t v15 = *(void *)(a1 + 32);
              *(_DWORD *)long long buf = v19;
              uint64_t v29 = v15;
              __int16 v30 = 2112;
              double v31 = v13;
              _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Found chat for messageID: %@, chat: %@", buf, 0x16u);
            }
          }
          objc_msgSend(v13, "tearDownToneNotificationSessionIfNeeded", v19);
          dispatch_group_enter(v8);
          uint64_t v16 = *(void **)(a1 + 32);
          long long v17 = *(void **)(a1 + 40);
          long long v18 = *(void **)(a1 + 48);
          v21[0] = MEMORY[0x1E4F143A8];
          v21[1] = 3221225472;
          v21[2] = sub_1D9818680;
          void v21[3] = &unk_1E6B73268;
          BOOL v22 = v8;
          sub_1D9817F94(v17, v13, v16, 0, v18, v21);
        }
        ++v12;
      }
      while (v9 != v12);
      uint64_t v9 = [obj countByEnumeratingWithState:&v23 objects:v27 count:16];
    }
    while (v9);
  }

  if (*(void *)(a1 + 56)) {
    dispatch_group_notify(v8, MEMORY[0x1E4F14428], *(dispatch_block_t *)(a1 + 56));
  }
}

void sub_1D9817F94(void *a1, void *a2, void *a3, unsigned int a4, void *a5, void *a6)
{
  v84[1] = *MEMORY[0x1E4F143B8];
  id v10 = a1;
  id v63 = a2;
  id v62 = a3;
  id v65 = a5;
  uint64_t v11 = a6;
  uint64_t v12 = v11;
  uint64_t v64 = v10;
  if (v10
    && (uint64_t v61 = v11,
        [v10 service],
        double v13 = objc_claimAutoreleasedReturnValue(),
        int v14 = [v13 supportsDatabase],
        v13,
        uint64_t v12 = v61,
        v14))
  {
    uint64_t v15 = +[IMDMessageStore sharedInstance];
    uint64_t v16 = [v63 guid];
    v84[0] = v16;
    long long v17 = [MEMORY[0x1E4F1C978] arrayWithObjects:v84 count:1];
    uint64_t v59 = [v15 markMessagesAsReadWithChatGUIDs:v17 upToGUID:v62 readDate:v65 fromMe:a4];

    if (IMOSLoggingEnabled())
    {
      long long v18 = OSLogHandleForIMEventCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v83 = v59;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Found messages guids to mark as read: %@", buf, 0xCu);
      }
    }
    if ([v59 count])
    {
      long long v19 = +[IMDMessageStore sharedInstance];
      [v19 retractPostedNotificationsForMessageGUIDs:v59];

      uint64_t v20 = +[IMDMessageStore sharedInstance];
      uint64_t v21 = [v20 messagesWithGUIDs:v59];

      long long v77 = 0u;
      long long v78 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      id v22 = v21;
      uint64_t v23 = 0;
      long long v24 = 0;
      uint64_t v25 = [v22 countByEnumeratingWithState:&v75 objects:v81 count:16];
      if (v25)
      {
        uint64_t v26 = *(void *)v76;
        do
        {
          for (uint64_t i = 0; i != v25; ++i)
          {
            if (*(void *)v76 != v26) {
              objc_enumerationMutation(v22);
            }
            uint64_t v28 = *(void **)(*((void *)&v75 + 1) + 8 * i);
            uint64_t v29 = [v28 timeDelivered];
            BOOL v30 = v29 == 0;

            if (v30) {
              sub_1D9816E8C(v28, (uint64_t)v65);
            }
            double v31 = [v28 timeRead];
            BOOL v32 = v31 == 0;

            if (v32)
            {
              id v33 = v65;
              if (v65
                && (id v34 = v33,
                    [v28 time],
                    id v35 = objc_claimAutoreleasedReturnValue(),
                    [v35 laterDate:v34],
                    id v36 = objc_claimAutoreleasedReturnValue(),
                    v34,
                    v35,
                    v36))
              {
                [v28 setTimeRead:v36];
              }
              else
              {
                id v36 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithCurrentServerTime");
                [v28 setTimeRead:v36];
              }
            }
            if ([v28 errorCode]) {
              [v28 setErrorCode:0];
            }
            uint64_t v37 = [v28 timeRead];
            uint64_t v38 = objc_msgSend(v37, "__im_nanosecondTimeInterval");

            if (v38 >= v23)
            {
              uint64_t v39 = [v28 guid];

              uint64_t v23 = v38;
              long long v24 = (void *)v39;
            }
          }
          uint64_t v25 = [v22 countByEnumeratingWithState:&v75 objects:v81 count:16];
        }
        while (v25);
      }

      long long v73 = 0u;
      long long v74 = 0u;
      long long v71 = 0u;
      long long v72 = 0u;
      id v40 = v22;
      uint64_t v41 = [v40 countByEnumeratingWithState:&v71 objects:v80 count:16];
      if (v41)
      {
        uint64_t v42 = *(void *)v72;
        do
        {
          for (uint64_t j = 0; j != v41; ++j)
          {
            if (*(void *)v72 != v42) {
              objc_enumerationMutation(v40);
            }
            uint64_t v44 = *(void *)(*((void *)&v71 + 1) + 8 * j);
            char v45 = +[IMDMessageStore sharedInstance];
            id v46 = (id)[v45 storeMessage:v44 forceReplace:0 modifyError:1 modifyFlags:0 flagMask:4096];
          }
          uint64_t v41 = [v40 countByEnumeratingWithState:&v71 objects:v80 count:16];
        }
        while (v41);
      }

      [v64 updateChatGUID:v62 withLastReadTimeStamp:v23 withLastSeenMessageGUID:v24 fromMe:a4 ^ 1];
      if (IMOSLoggingEnabled())
      {
        __int16 v47 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v47, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v83 = v40;
          _os_log_impl(&dword_1D967A000, v47, OS_LOG_TYPE_INFO, "Notifying about messages: %@", buf, 0xCu);
        }
      }
      uint64_t v48 = [v63 roomName];
      if ([v63 style] == 45) {
        uint8_t v49 = 45;
      }
      else {
        uint8_t v49 = 43;
      }
      buf[0] = v49;
      id v70 = v48;
      [v64 _mapRoomChatToGroupChat:&v70 style:buf];
      id v50 = v70;

      long long v51 = (void *)IMCreateSerializedItemsFromArray();
      if ([v64 isAwaitingStorageTimer])
      {
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        id v52 = v40;
        uint64_t v53 = [v52 countByEnumeratingWithState:&v66 objects:v79 count:16];
        if (v53)
        {
          uint64_t v54 = *(void *)v67;
          do
          {
            for (uint64_t k = 0; k != v53; ++k)
            {
              if (*(void *)v67 != v54) {
                objc_enumerationMutation(v52);
              }
              __int16 v56 = [*(id *)(*((void *)&v66 + 1) + 8 * k) guid];
              [v64 noteSuppressedMessageUpdate:v56];
            }
            uint64_t v53 = [v52 countByEnumeratingWithState:&v66 objects:v79 count:16];
          }
          while (v53);
        }
      }
      else
      {
        id v52 = [v64 broadcasterForChatListeners];
        BOOL v57 = [v63 account];
        uint64_t v58 = [v57 accountID];
        [v52 account:v58 chat:v50 style:buf[0] chatProperties:0 messagesUpdated:v51];
      }
      if (v61) {
        ((void (*)(void))v61[2])();
      }
    }
    else if (v61)
    {
      ((void (*)(void))v61[2])();
    }

    uint64_t v12 = v61;
  }
  else if (v12)
  {
    v12[2](v12);
  }
}

void sub_1D9818680(uint64_t a1)
{
}

uint64_t sub_1D9818688(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__didReceiveMessageReadForMessageID_date_attempts_completionBlock_);
}

void sub_1D9818B88(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDMessageStore sharedInstance];
  uint64_t v23 = [v2 messageWithGUID:*(void *)(a1 + 32)];

  id v3 = [v23 service];
  id v4 = [*(id *)(a1 + 40) service];
  id v22 = [v4 internalName];

  uint64_t v5 = dispatch_group_create();
  if (!v23 || !v3 || !v22) {
    goto LABEL_20;
  }
  if (![*(id *)(a1 + 40) messageServiceNamed:v22 canProcessMessagesFromServiceNamed:v3])
  {
    if (([*(id *)(a1 + 40) messageServiceNamed:v22 canProcessMessagesFromServiceNamed:v3] & 1) == 0)
    {
      if (!IMOSLoggingEnabled()) {
        goto LABEL_24;
      }
      uint64_t v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        id v34 = v3;
        __int16 v35 = 2112;
        id v36 = v22;
        _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Unable notify about message, message is on an incompatible service: %@ vs %@", buf, 0x16u);
      }
LABEL_23:

      goto LABEL_24;
    }
LABEL_20:
    if (!IMOSLoggingEnabled()) {
      goto LABEL_24;
    }
    uint64_t v21 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Unable notify about message, no message found", buf, 2u);
    }
    goto LABEL_23;
  }
  group = v5;
  uint64_t v6 = +[IMDMessageStore sharedInstance];
  uint64_t v7 = [v6 chatsForMessageGUID:*(void *)(a1 + 32)];

  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = v7;
  uint64_t v8 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
  if (v8)
  {
    uint64_t v26 = *(void *)v30;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v30 != v26) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v29 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = *(void **)(a1 + 32);
            *(_DWORD *)long long buf = 138412546;
            id v34 = v12;
            __int16 v35 = 2112;
            id v36 = v10;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
          }
        }
        if (v10)
        {
          dispatch_group_enter(group);
          double v13 = (void *)a1;
          int v14 = v3;
          uint64_t v15 = a1;
          uint64_t v16 = *(void **)(a1 + 32);
          long long v17 = *(void **)(a1 + 40);
          v13 += 4;
          long long v18 = (void *)v13[2];
          v27[0] = MEMORY[0x1E4F143A8];
          v27[1] = 3221225472;
          void v27[2] = sub_1D9818FEC;
          v27[3] = &unk_1E6B73268;
          uint64_t v28 = group;
          long long v19 = v17;
          a1 = v15;
          id v3 = v14;
          sub_1D9817F94(v19, v10, v16, 1u, v18, v27);
          uint64_t v20 = [MEMORY[0x1E4F6E8F0] sharedInstance];
          [v20 logMessageRead:*v13 messageProtocol:v14];
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v29 objects:v37 count:16];
    }
    while (v8);
  }

  uint64_t v5 = group;
LABEL_24:
  if (*(void *)(a1 + 56)) {
    dispatch_group_notify(v5, MEMORY[0x1E4F14428], *(dispatch_block_t *)(a1 + 56));
  }
}

void sub_1D9818FEC(uint64_t a1)
{
}

uint64_t sub_1D9818FF4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveMessageReadReceiptForMessageID:*(void *)(a1 + 40) date:*(void *)(a1 + 48) attempts:*(void *)(a1 + 56) + 1 completionBlock:0];
}

void sub_1D9819598(uint64_t a1)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDMessageStore sharedInstance];
  id v3 = [v2 chatsForMessageGUID:*(void *)(a1 + 32)];

  if (IMOSLoggingEnabled())
  {
    id v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      uint64_t v5 = *(void *)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      uint64_t v23 = v5;
      __int16 v24 = 2112;
      uint64_t v25 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }
  }
  uint64_t v6 = dispatch_group_create();
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id obj = v3;
  uint64_t v7 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v18;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v18 != v8) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v17 + 1) + 8 * v9);
        if (v10)
        {
          dispatch_group_enter(v6);
          uint64_t v12 = *(void **)(a1 + 32);
          uint64_t v11 = *(void **)(a1 + 40);
          double v13 = *(void **)(a1 + 48);
          v15[0] = MEMORY[0x1E4F143A8];
          v15[1] = 3221225472;
          _OWORD v15[2] = sub_1D981A090;
          v15[3] = &unk_1E6B73268;
          uint64_t v16 = v6;
          sub_1D981980C(v11, v10, v12, v13, v15);
        }
        ++v9;
      }
      while (v7 != v9);
      uint64_t v7 = [obj countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v7);
  }

  if (*(void *)(a1 + 56)) {
    dispatch_group_notify(v6, MEMORY[0x1E4F14428], *(dispatch_block_t *)(a1 + 56));
  }
}

void sub_1D981980C(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  id v9 = a1;
  id v61 = a2;
  id v62 = a3;
  id v60 = a4;
  id v10 = a5;
  uint64_t v11 = v10;
  id v63 = v9;
  if (v9)
  {
    uint64_t v59 = v10;
    uint64_t v12 = [v9 service];
    int v13 = [v12 supportsDatabase];

    uint64_t v11 = v59;
    if (v13)
    {
      int v14 = +[IMDMessageStore sharedInstance];
      id v64 = [v14 messageWithGUID:v62];

      if (IMOSLoggingEnabled())
      {
        uint64_t v15 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v72 = v64;
          _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Found message to mark as played: %@", buf, 0xCu);
        }
      }
      uint64_t v16 = v64;
      if (!v64)
      {
        if (!v59)
        {
LABEL_64:

          uint64_t v11 = v59;
          goto LABEL_65;
        }
        ((void (*)(void))v59[2])();
LABEL_63:
        uint64_t v16 = v64;
        goto LABEL_64;
      }
      objc_msgSend(v64, "setFlags:", objc_msgSend(v64, "flags") | 0x400000);
      id v17 = v60;
      if (v17)
      {
        long long v18 = v17;
        long long v19 = [v64 time];
        uint64_t v58 = [v19 laterDate:v18];
      }
      else
      {
        uint64_t v58 = 0;
      }
      long long v20 = [v64 timeDelivered];
      BOOL v21 = v20 == 0;

      if (v21) {
        sub_1D9816E8C(v64, (uint64_t)v58);
      }
      id v22 = [v64 timeRead];
      BOOL v23 = v22 == 0;

      if (v23)
      {
        if (v58)
        {
          objc_msgSend(v64, "setTimeRead:");
        }
        else
        {
          __int16 v24 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithCurrentServerTime");
          [v64 setTimeRead:v24];
        }
      }
      uint64_t v25 = [v64 timePlayed];
      BOOL v26 = v25 == 0;

      if (v26)
      {
        if (v58)
        {
          objc_msgSend(v64, "setTimePlayed:");
        }
        else
        {
          int v27 = [MEMORY[0x1E4F1C9C8] date];
          [v64 setTimePlayed:v27];
        }
      }
      if ([v64 errorCode]) {
        [v64 setErrorCode:0];
      }
      if (![v64 isExpirable]
        || ([v64 isFromMe] & 1) != 0
        || [v64 expireState] > 0)
      {
        uint64_t v55 = 0;
LABEL_31:
        uint64_t v28 = +[IMDMessageStore sharedInstance];
        id v29 = (id)[v28 storeMessage:v64 forceReplace:0 modifyError:1 modifyFlags:1 flagMask:4198400];

        long long v30 = +[IMDMessageStore sharedInstance];
        long long v31 = [v30 chatsForMessageGUID:v62];

        if (IMOSLoggingEnabled())
        {
          long long v32 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v72 = v31;
            _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Found chats to mark as played: %@", buf, 0xCu);
          }
        }
        long long v68 = 0u;
        long long v69 = 0u;
        long long v66 = 0u;
        long long v67 = 0u;
        id v33 = v31;
        uint64_t v34 = [v33 countByEnumeratingWithState:&v66 objects:v70 count:16];
        if (v34)
        {
          uint64_t v35 = *(void *)v67;
          do
          {
            for (uint64_t i = 0; i != v34; ++i)
            {
              if (*(void *)v67 != v35) {
                objc_enumerationMutation(v33);
              }
              uint64_t v37 = *(void **)(*((void *)&v66 + 1) + 8 * i);
              if (IMOSLoggingEnabled())
              {
                uint64_t v38 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138412290;
                  id v72 = v37;
                  _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "Updating chat: %@", buf, 0xCu);
                }
              }
              uint64_t v39 = +[IMDChatRegistry sharedInstance];
              [v39 updateStateForChat:v37 hintMessage:0 shouldRebuildFailedMessageDate:0];
            }
            uint64_t v34 = [v33 countByEnumeratingWithState:&v66 objects:v70 count:16];
          }
          while (v34);
        }

        if (IMOSLoggingEnabled())
        {
          id v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v72 = v64;
            _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Notifying about message: %@", buf, 0xCu);
          }
        }
        uint64_t v41 = [v61 roomName];
        if ([v61 style] == 45) {
          uint8_t v42 = 45;
        }
        else {
          uint8_t v42 = 43;
        }
        buf[0] = v42;
        id v65 = v41;
        [v63 _mapRoomChatToGroupChat:&v65 style:buf];
        id v43 = v65;

        if ([v63 isAwaitingStorageTimer])
        {
          uint64_t v44 = [v64 guid];
          [v63 noteSuppressedMessageUpdate:v44];
        }
        else
        {
          uint64_t v44 = [v63 broadcasterForChatListeners];
          char v45 = [v61 account];
          id v46 = [v45 accountID];
          [v44 account:v46 chat:v43 style:buf[0] chatProperties:0 messageUpdated:v64];
        }
        if (v56)
        {
          __int16 v47 = [v64 guid];
          [v63 _updateExpireStateForMessageGUID:v47];
        }
        if (v57) {
          [v63 sendSavedReceiptForMessage:v64 toChatID:0 identifier:v43 style:buf[0]];
        }
        if (v59) {
          ((void (*)(void))v59[2])();
        }

        goto LABEL_63;
      }
      HIDWORD(v55) = IMMessageItemShouldAutomaticallySave();
      int v48 = IMOSLoggingEnabled();
      if (HIDWORD(v55))
      {
        uint8_t v49 = v64;
        if (!v48)
        {
          uint64_t v52 = 3;
          goto LABEL_78;
        }
        id v50 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v50, OS_LOG_TYPE_INFO))
        {
          long long v51 = [v64 guid];
          *(_DWORD *)long long buf = 138412290;
          id v72 = v51;
          _os_log_impl(&dword_1D967A000, v50, OS_LOG_TYPE_INFO, "Automatically saving received message played on linked device: %@", buf, 0xCu);
        }
        uint64_t v52 = 3;
      }
      else
      {
        uint8_t v49 = v64;
        if (!v48)
        {
          uint64_t v52 = 1;
          goto LABEL_78;
        }
        uint64_t v53 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          uint64_t v54 = [v64 guid];
          *(_DWORD *)long long buf = 138412290;
          id v72 = v54;
          _os_log_impl(&dword_1D967A000, v53, OS_LOG_TYPE_INFO, "Expire received message played on linked device: %@", buf, 0xCu);
        }
        uint64_t v52 = 1;
      }
      uint8_t v49 = v64;
LABEL_78:
      [v49 setExpireState:v52];
      LODWORD(v55) = HIDWORD(v55) ^ 1;
      goto LABEL_31;
    }
  }
  if (v11) {
    v11[2](v11);
  }
LABEL_65:
}

void sub_1D981A020(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9819FECLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D981A090(uint64_t a1)
{
}

uint64_t sub_1D981A098(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__didReceiveMessagePlayedForMessageID_date_attempts_completionBlock_);
}

void sub_1D981A598(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDMessageStore sharedInstance];
  long long v19 = [v2 messageWithGUID:*(void *)(a1 + 32)];

  long long v18 = [v19 service];
  id v3 = [*(id *)(a1 + 40) service];
  id v4 = [v3 internalName];

  uint64_t v5 = dispatch_group_create();
  if (!v19 || !v18 || !v4) {
    goto LABEL_20;
  }
  if (![*(id *)(a1 + 40) messageServiceNamed:v4 canProcessMessagesFromServiceNamed:v18])
  {
    if (([*(id *)(a1 + 40) messageServiceNamed:v4 canProcessMessagesFromServiceNamed:v18] & 1) == 0)
    {
      if (!IMOSLoggingEnabled()) {
        goto LABEL_24;
      }
      id v17 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        id v29 = v18;
        __int16 v30 = 2112;
        long long v31 = v4;
        _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Unable notify about message, message is on an incompatible service: %@ vs %@", buf, 0x16u);
      }
LABEL_23:

      goto LABEL_24;
    }
LABEL_20:
    if (!IMOSLoggingEnabled()) {
      goto LABEL_24;
    }
    id v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Unable notify about message, no message found", buf, 2u);
    }
    goto LABEL_23;
  }
  group = v5;
  uint64_t v6 = +[IMDMessageStore sharedInstance];
  uint64_t v7 = [v6 chatsForMessageGUID:*(void *)(a1 + 32)];

  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  id obj = v7;
  uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v25;
    do
    {
      for (uint64_t i = 0; i != v8; ++i)
      {
        if (*(void *)v25 != v9) {
          objc_enumerationMutation(obj);
        }
        uint64_t v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          uint64_t v12 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
          {
            int v13 = *(void **)(a1 + 32);
            *(_DWORD *)long long buf = 138412546;
            id v29 = v13;
            __int16 v30 = 2112;
            long long v31 = v11;
            _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
          }
        }
        if (v11)
        {
          dispatch_group_enter(group);
          int v14 = *(void **)(a1 + 32);
          uint64_t v15 = *(void **)(a1 + 40);
          uint64_t v16 = *(void **)(a1 + 48);
          v22[0] = MEMORY[0x1E4F143A8];
          v22[1] = 3221225472;
          void v22[2] = sub_1D981A9B8;
          v22[3] = &unk_1E6B73268;
          BOOL v23 = group;
          sub_1D981980C(v15, v11, v14, v16, v22);
        }
      }
      uint64_t v8 = [obj countByEnumeratingWithState:&v24 objects:v32 count:16];
    }
    while (v8);
  }

  uint64_t v5 = group;
LABEL_24:
  if (*(void *)(a1 + 56)) {
    dispatch_group_notify(v5, MEMORY[0x1E4F14428], *(dispatch_block_t *)(a1 + 56));
  }
}

void sub_1D981A9B8(uint64_t a1)
{
}

uint64_t sub_1D981A9C0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__didReceiveMessagePlayedReceiptForMessageID_date_attempts_completionBlock_);
}

void sub_1D981B170(uint64_t a1)
{
  uint64_t v95 = *MEMORY[0x1E4F143B8];
  id v1 = +[IMDMessageStore sharedInstance];
  uint64_t v2 = [v1 chatsForMessageGUID:*(void *)(a1 + 32)];

  if (![v2 count] && !*(unsigned char *)(a1 + 96))
  {
    uint64_t v3 = *(void *)(a1 + 48);
    if (v3)
    {
      uint64_t v4 = 43;
    }
    else
    {
      uint64_t v3 = *(void *)(a1 + 56);
      uint64_t v4 = 45;
    }
    uint64_t v5 = [*(id *)(a1 + 40) chatForChatIdentifier:v3 style:v4];
    if (v5)
    {
      uint64_t v6 = [MEMORY[0x1E4F1C978] arrayWithObject:v5];

      uint64_t v2 = (void *)v6;
    }
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = *(void **)(a1 + 32);
      *(_DWORD *)long long buf = 138412546;
      id v92 = v8;
      __int16 v93 = 2112;
      __int16 v94 = v2;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Found chats for messageID: %@   chats: %@", buf, 0x16u);
    }
  }
  group = dispatch_group_create();
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  id obj = v2;
  uint64_t v58 = [obj countByEnumeratingWithState:&v80 objects:v89 count:16];
  if (v58)
  {
    uint64_t v57 = *(void *)v81;
    do
    {
      for (uint64_t i = 0; i != v58; ++i)
      {
        if (*(void *)v81 != v57) {
          objc_enumerationMutation(obj);
        }
        id v10 = *(void **)(*((void *)&v80 + 1) + 8 * i);
        uint64_t v11 = a1;
        if (*(unsigned char *)(a1 + 96))
        {
          dispatch_group_enter(group);
          int v13 = *(void **)(a1 + 32);
          uint64_t v12 = *(void **)(a1 + 40);
          int v14 = *(void **)(a1 + 64);
          v76[0] = MEMORY[0x1E4F143A8];
          v76[1] = 3221225472;
          long long v77 = sub_1D981BB34;
          long long v78 = &unk_1E6B73268;
          uint64_t v79 = group;
          id v66 = v12;
          id v60 = v10;
          id v15 = v10;
          id v63 = v13;
          id v61 = v14;
          uint64_t v16 = v76;
          id v62 = v15;
          if (v15)
          {
            if (v66
              && (int v56 = v16,
                  [v66 service],
                  id v17 = objc_claimAutoreleasedReturnValue(),
                  int v18 = [v17 supportsDatabase],
                  v17,
                  uint64_t v16 = v56,
                  v18))
            {
              long long v19 = +[IMDMessageStore sharedInstance];
              uint64_t v59 = [v19 messageWithGUID:v63];

              if (IMOSLoggingEnabled())
              {
                long long v20 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
                {
                  *(_DWORD *)long long buf = 138412290;
                  id v92 = v59;
                  _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Found message to mark as saved: %@", buf, 0xCu);
                }
              }
              if (v59)
              {
                [v59 setExpireState:3];
                id v21 = v61;
                if (v21)
                {
                  id v22 = v21;
                  BOOL v23 = [v59 time];
                  uint64_t v54 = [v23 laterDate:v22];
                }
                else
                {
                  uint64_t v54 = 0;
                }
                long long v25 = [v59 timeDelivered];
                BOOL v26 = v25 == 0;

                if (v26) {
                  sub_1D9816E8C(v59, (uint64_t)v54);
                }
                long long v27 = [v59 timeRead];
                BOOL v28 = v27 == 0;

                if (v28)
                {
                  if (v54)
                  {
                    objc_msgSend(v59, "setTimeRead:");
                  }
                  else
                  {
                    id v29 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithCurrentServerTime");
                    [v59 setTimeRead:v29];
                  }
                }
                __int16 v30 = [v59 timePlayed];
                BOOL v31 = v30 == 0;

                if (v31)
                {
                  if (v54)
                  {
                    objc_msgSend(v59, "setTimePlayed:");
                  }
                  else
                  {
                    long long v32 = [MEMORY[0x1E4F1C9C8] date];
                    [v59 setTimePlayed:v32];
                  }
                }
                if ([v59 errorCode]) {
                  [v59 setErrorCode:0];
                }
                uint64_t v33 = +[IMDMessageStore sharedInstance];
                id v34 = (id)[v33 storeMessage:v59 forceReplace:0 modifyError:1 modifyFlags:0 flagMask:4096];

                uint64_t v35 = +[IMDMessageStore sharedInstance];
                id v36 = [v35 chatsForMessageGUID:v63];

                if (IMOSLoggingEnabled())
                {
                  uint64_t v37 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)long long buf = 138412290;
                    id v92 = v36;
                    _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Found chats to mark as saved: %@", buf, 0xCu);
                  }
                }
                long long v87 = 0u;
                long long v88 = 0u;
                long long v85 = 0u;
                long long v86 = 0u;
                id v38 = v36;
                uint64_t v39 = [v38 countByEnumeratingWithState:&v85 objects:buf count:16];
                if (v39)
                {
                  uint64_t v40 = *(void *)v86;
                  do
                  {
                    for (uint64_t j = 0; j != v39; ++j)
                    {
                      if (*(void *)v86 != v40) {
                        objc_enumerationMutation(v38);
                      }
                      uint64_t v42 = *(void *)(*((void *)&v85 + 1) + 8 * j);
                      if (IMOSLoggingEnabled())
                      {
                        id v43 = OSLogHandleForIMFoundationCategory();
                        if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
                        {
                          *(_DWORD *)uint64_t v90 = 138412290;
                          *(void *)&v90[4] = v42;
                          _os_log_impl(&dword_1D967A000, v43, OS_LOG_TYPE_INFO, "Updating chat: %@", v90, 0xCu);
                        }
                      }
                      uint64_t v44 = +[IMDChatRegistry sharedInstance];
                      [v44 updateStateForChat:v42 hintMessage:0 shouldRebuildFailedMessageDate:0];
                    }
                    uint64_t v39 = [v38 countByEnumeratingWithState:&v85 objects:buf count:16];
                  }
                  while (v39);
                }

                if (IMOSLoggingEnabled())
                {
                  char v45 = OSLogHandleForIMFoundationCategory();
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
                  {
                    *(_DWORD *)uint64_t v90 = 138412290;
                    *(void *)&v90[4] = v59;
                    _os_log_impl(&dword_1D967A000, v45, OS_LOG_TYPE_INFO, "Notifying about message: %@", v90, 0xCu);
                  }
                }
                id v46 = [v62 roomName];
                if ([v62 style] == 45) {
                  char v47 = 45;
                }
                else {
                  char v47 = 43;
                }
                unsigned __int8 v84 = v47;
                *(void *)uint64_t v90 = v46;
                [v66 _mapRoomChatToGroupChat:v90 style:&v84];
                id v48 = *(id *)v90;

                if ([v66 isAwaitingStorageTimer])
                {
                  uint8_t v49 = [v59 guid];
                  [v66 noteSuppressedMessageUpdate:v49];
                }
                else
                {
                  uint8_t v49 = [v66 broadcasterForChatListeners];
                  id v50 = [v62 account];
                  long long v51 = [v50 accountID];
                  [v49 account:v51 chat:v48 style:v84 chatProperties:0 messageUpdated:v59];
                }
                v77((uint64_t)v56);
              }
              else
              {
                v77((uint64_t)v56);
              }

              uint64_t v16 = v56;
            }
            else
            {
              long long v24 = v16;
              ((void (*)(void))v77)();
              uint64_t v16 = v24;
            }
          }

          uint64_t v11 = a1;
          id v10 = v60;
        }
        block[0] = MEMORY[0x1E4F143A8];
        block[1] = 3221225472;
        block[2] = sub_1D981BB3C;
        block[3] = &unk_1E6B775E8;
        id v68 = *(id *)(v11 + 32);
        char v75 = *(unsigned char *)(v11 + 96);
        id v69 = *(id *)(v11 + 56);
        id v52 = *(id *)(v11 + 64);
        uint64_t v74 = *(void *)(v11 + 88);
        uint64_t v53 = *(void *)(v11 + 40);
        id v70 = v52;
        uint64_t v71 = v53;
        id v72 = *(id *)(v11 + 72);
        uint64_t v73 = v10;
        dispatch_group_async(group, MEMORY[0x1E4F14428], block);
      }
      uint64_t v58 = [obj countByEnumeratingWithState:&v80 objects:v89 count:16];
    }
    while (v58);
  }

  if (*(void *)(a1 + 80)) {
    dispatch_group_notify(group, MEMORY[0x1E4F14428], *(dispatch_block_t *)(a1 + 80));
  }
}

void sub_1D981BB34(uint64_t a1)
{
}

void sub_1D981BB3C(uint64_t a1)
{
  uint64_t v2 = +[IMDMessageStore sharedInstance];
  id v7 = [v2 messageWithGUID:*(void *)(a1 + 32)];

  if (!*(unsigned char *)(a1 + 88))
  {
    uint64_t v3 = (void *)[objc_alloc(MEMORY[0x1E4F6E828]) initWithSender:*(void *)(a1 + 40) time:*(void *)(a1 + 48) guid:0 type:5];
    [v3 setActionType:*(void *)(a1 + 80)];
    if ([v7 isFromMe])
    {
      [v3 setOtherHandle:0];
    }
    else
    {
      uint64_t v4 = [v7 sender];
      [v3 setOtherHandle:v4];
    }
    [v3 setOriginalMessageGUID:*(void *)(a1 + 32)];
    [*(id *)(a1 + 56) _configureAccountInformationOnItem:v3 withAccount:*(void *)(a1 + 64)];
    uint64_t v5 = [v7 balloonBundleID];
    [v3 setBalloonBundleID:v5];

    uint64_t v6 = [v7 destinationCallerID];
    [v3 setDestinationCallerID:v6];

    [*(id *)(a1 + 56) _storeTranscriptItem:v3 inChat:*(void *)(a1 + 72) account:*(void *)(a1 + 64)];
  }
}

uint64_t sub_1D981BC80(uint64_t a1)
{
  return [*(id *)(a1 + 32) _didReceiveMessageSavedForMessageID:*(void *)(a1 + 40) ofType:*(void *)(a1 + 80) forChat:*(void *)(a1 + 48) fromHandle:*(void *)(a1 + 56) fromMe:*(unsigned __int8 *)(a1 + 96) date:*(void *)(a1 + 64) attempts:*(void *)(a1 + 88) + 1 account:*(void *)(a1 + 72) completionBlock:0];
}

void sub_1D981DA34(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {

    objc_end_catch();
    JUMPOUT(0x1D981DA18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D981DBA0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_didReplaceMessage_newMessage_);
}

uint64_t sub_1D981DBB0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_didSendMessage_forChat_style_account_forceDate_itemIsComingFromStorage_);
}

void sub_1D981F198()
{
  uint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_t v0 = dispatch_queue_create("com.apple.imagent.CollaborationProcessing", v2);
  id v1 = (void *)qword_1EA8CA600;
  qword_1EA8CA600 = (uint64_t)v0;
}

id sub_1D981F41C(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v4 = [v3 transferForGUID:v2];

  uint64_t v5 = [v4 localURL];

  return v5;
}

void sub_1D981F4A0(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [MEMORY[0x1E4F6E9A8] linkMetadataForPluginPayload:*(void *)(a1 + 32)];
  uint64_t v3 = [v2 collaborationMetadata];

  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = [*(id *)(a1 + 40) guid];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v16 = v5;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Collaboration metadata detected in message %@, broadcasting to listeners", buf, 0xCu);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D981F6DC;
    block[3] = &unk_1E6B776D0;
    int8x16_t v9 = *(int8x16_t *)(a1 + 40);
    id v6 = (id)v9.i64[0];
    int8x16_t v11 = vextq_s8(v9, v9, 8uLL);
    id v12 = *(id *)(a1 + 56);
    char v14 = *(unsigned char *)(a1 + 72);
    id v13 = *(id *)(a1 + 64);
    dispatch_sync(MEMORY[0x1E4F14428], block);
  }
  else
  {
    id v7 = IMLogHandleForCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = [*(id *)(a1 + 40) guid];
      *(_DWORD *)long long buf = 138412290;
      uint64_t v16 = v8;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Collaboration metadata not detected in message %@", buf, 0xCu);
    }
  }
}

void sub_1D981F6DC(uint64_t a1)
{
  id v6 = [*(id *)(a1 + 32) broadcasterForCollaborationListeners];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 48);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v5 = [*(id *)(a1 + 56) accountID];
  [v6 didReceiveCollaborationMessage:v2 inChat:v3 style:v4 account:v5];
}

void sub_1D981FE28(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void sub_1D981FE78(uint64_t a1, int a2)
{
  uint64_t v50 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = [*(id *)(a1 + 32) chatForChatIdentifier:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 88)];
  if ([v4 state] != 3 && objc_msgSend(*(id *)(a1 + 48), "isFromMe"))
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v38) = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Fixing chat join state", (uint8_t *)&v38, 2u);
      }
    }
    [v4 setState:3];
  }
  id v6 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)objc_msgSend(v4, "lastReadMessageTimeStamp"));
  id v7 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithCurrentServerTime");
  uint64_t v8 = [*(id *)(a1 + 48) time];
  if (IMOSLoggingEnabled())
  {
    int8x16_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      id v10 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v4, "lastReadMessageTimeStamp"));
      id v11 = [v4 lastSeenMessageGuid];
      id v12 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v8, "__im_nanosecondTimeInterval"));
      int v38 = 138413570;
      uint64_t v39 = v10;
      __int16 v40 = 2112;
      id v41 = v11;
      __int16 v42 = 2112;
      id v43 = v6;
      __int16 v44 = 2112;
      char v45 = v8;
      __int16 v46 = 2112;
      char v47 = v12;
      __int16 v48 = 2112;
      uint8_t v49 = v7;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Chat's last read message time date (%@) guid (%@) timestamp: (%@) Messages time date (%@) timestamp: (%@) Server timestamp: (%@)", (uint8_t *)&v38, 0x3Eu);
    }
  }
  if ([v6 compare:v8] == 1)
  {
    id v13 = [v7 dateByAddingTimeInterval:60.0];
    if ([v6 compare:v13] == 1)
    {
      if (!IMOSLoggingEnabled())
      {
LABEL_31:

        goto LABEL_32;
      }
      char v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        id v15 = [*(id *)(a1 + 48) guid];
        int v38 = 138412290;
        uint64_t v39 = v15;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Last read message time is in the future. Not marking incoming message %@ as read", (uint8_t *)&v38, 0xCu);
      }
LABEL_17:

      goto LABEL_31;
    }
    uint64_t v16 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v17 = [v16 isCarrierPigeonEnabled];

    if (v17 && [*(id *)(a1 + 48) sentOrReceivedOffGrid])
    {
      char v14 = [v7 dateByAddingTimeInterval:3600.0];
      BOOL v18 = [v6 compare:v14] == -1;
      int v19 = IMOSLoggingEnabled();
      if (v18)
      {
        if (v19)
        {
          id v36 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v36, OS_LOG_TYPE_INFO))
          {
            uint64_t v37 = [*(id *)(a1 + 48) guid];
            int v38 = 138412546;
            uint64_t v39 = v14;
            __int16 v40 = 2112;
            id v41 = v37;
            _os_log_impl(&dword_1D967A000, v36, OS_LOG_TYPE_INFO, "Satellite message time for GUID %@ is within grace period (%@). Not marking it as read.", (uint8_t *)&v38, 0x16u);
          }
        }
        goto LABEL_17;
      }
      if (v19)
      {
        long long v20 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
        {
          id v21 = [*(id *)(a1 + 48) guid];
          int v38 = 138412290;
          uint64_t v39 = v21;
          _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Satellite message with GUID %@ will be marked as read because it's time is older than the chat's last read message time including the grace period.", (uint8_t *)&v38, 0xCu);
        }
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        BOOL v23 = [*(id *)(a1 + 48) guid];
        int v38 = 138412290;
        uint64_t v39 = v23;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "Setting message %@ as read as incoming message is older than the chat's last read message time", (uint8_t *)&v38, 0xCu);
      }
    }
    objc_msgSend(*(id *)(a1 + 48), "setFlags:", objc_msgSend(*(id *)(a1 + 48), "flags") | 0x2000);
    goto LABEL_31;
  }
LABEL_32:
  if (a2 == 42)
  {
    if (IMOSLoggingEnabled())
    {
      long long v24 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
      {
        LOWORD(v38) = 0;
        _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Marking message as failed due to preflight rendering", (uint8_t *)&v38, 2u);
      }
    }
    objc_msgSend(*(id *)(a1 + 48), "setFlags:", objc_msgSend(*(id *)(a1 + 48), "flags") | 0x4000000);
  }
  [*(id *)(a1 + 32) _setReplyGUIDOnMessage:*(void *)(a1 + 48) forChat:v4];
  [*(id *)(a1 + 32) _setSortIDForMessage:*(void *)(a1 + 48) forChat:v4];
  if ([*(id *)(a1 + 32) isReplicating])
  {
    long long v25 = +[IMDMessageStore sharedInstance];
    BOOL v26 = [*(id *)(a1 + 48) guid];
    long long v27 = [v25 messageWithGUID:v26];

    BOOL v28 = [v27 service];
    id v29 = [*(id *)(a1 + 32) service];
    __int16 v30 = [v29 internalName];
    int v31 = [v28 isEqualToString:v30];

    if (v31)
    {
      long long v32 = [*(id *)(a1 + 48) replicatedFallbackGUIDs];
    }
    else
    {
      long long v32 = 0;
    }
  }
  else
  {
    long long v32 = 0;
  }
  int v33 = [*(id *)(a1 + 32) _storeMessage:*(void *)(a1 + 48) chatIdentifier:*(void *)(a1 + 40) localChat:v4 style:*(unsigned __int8 *)(a1 + 88) account:*(void *)(a1 + 56) messagesToPostArray:*(void *)(a1 + 64)];
  uint64_t v34 = *(void *)(*(void *)(a1 + 80) + 8);
  if (*(unsigned char *)(v34 + 24)) {
    char v35 = v33;
  }
  else {
    char v35 = 0;
  }
  *(unsigned char *)(v34 + 24) = v35;
  if (v33) {
    [*(id *)(a1 + 72) addObjectsFromArray:v32];
  }
}

void sub_1D9820508(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D98204FCLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D98205AC(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  if ([*(id *)(a1 + 32) count])
  {
    uint64_t v2 = [*(id *)(a1 + 40) _revokeSiblingMessagesForReplication:*(void *)(a1 + 32)];
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v3 = [*(id *)(a1 + 40) chatForChatIdentifier:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 88)];
  uint64_t v4 = +[IMDMessageStore sharedInstance];
  uint64_t v5 = [v4 updatedMessagesForMessages:*(void *)(a1 + 56)];

  if ([v5 count])
  {
    objc_msgSend(*(id *)(a1 + 40), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(v3, "isBlackholed"));
    id v6 = v31 = v5;
    id v7 = [*(id *)(a1 + 64) accountID];
    uint64_t v8 = [v3 chatIdentifier];
    uint64_t v9 = [v3 style];
    id v10 = [v3 chatProperties];
    id v11 = [v3 groupID];
    [v3 personCentricID];
    v13 = uint64_t v12 = v2;
    LOBYTE(v29) = 0;
    [v6 account:v7 chat:v8 style:v9 chatProperties:v10 groupID:v11 chatPersonCentricID:v13 messagesReceived:v31 removed:v12 messagesComingFromStorage:v29];

    uint64_t v2 = v12;
    uint64_t v5 = v31;
  }
  long long v32 = (void *)v2;
  char v14 = [*(id *)(a1 + 40) _autoReplier];
  __int16 v30 = v3;
  [v14 processMessages:*(void *)(a1 + 72) inChat:v3 fromIDSID:*(void *)(a1 + 80)];

  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  id v15 = *(id *)(a1 + 72);
  uint64_t v16 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
  int v17 = v5;
  BOOL v18 = v5;
  if (v16)
  {
    uint64_t v19 = v16;
    uint64_t v20 = *(void *)v34;
    uint64_t v21 = *MEMORY[0x1E4F6CC10];
    do
    {
      for (uint64_t i = 0; i != v19; ++i)
      {
        if (*(void *)v34 != v20) {
          objc_enumerationMutation(v15);
        }
        BOOL v23 = *(void **)(*((void *)&v33 + 1) + 8 * i);
        long long v24 = [v23 balloonBundleID];
        int v25 = [v24 isEqualToString:v21];

        if (v25) {
          [*(id *)(a1 + 40) _didReceivePotentialCollaborationMessage:v23 forChat:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 88) account:*(void *)(a1 + 64)];
        }
      }
      int v17 = v18;
      uint64_t v19 = [v15 countByEnumeratingWithState:&v33 objects:v37 count:16];
    }
    while (v19);
  }

  if (*(unsigned char *)(a1 + 89) == 45 && [*(id *)(a1 + 72) count])
  {
    BOOL v26 = [*(id *)(a1 + 72) firstObject];
    long long v27 = [v26 handle];

    BOOL v28 = +[IMDMessageStore sharedInstance];
    [v28 signalUnreadChangeForHandle:v27];

    int v17 = v18;
  }
}

void sub_1D9820E68(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9820E48);
  }
  _Block_object_dispose(&a51, 8);
  _Block_object_dispose((const void *)(v51 - 256), 8);
  _Block_object_dispose((const void *)(v51 - 208), 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D9820EFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9820F0C(uint64_t a1)
{
}

id sub_1D9820F14(uint64_t a1, void *a2)
{
  v141[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  uint64_t v4 = +[IMDMessageStore sharedInstance];
  uint64_t v5 = [v3 guid];
  uint64_t v6 = [v4 messageWithGUID:v5];
  uint64_t v7 = *(void *)(*(void *)(a1 + 72) + 8);
  uint64_t v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      double v10 = *(double *)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      double v132 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEBUG, "Found existing message: %@", buf, 0xCu);
    }
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
  }
  id v11 = [MEMORY[0x1E4F6C310] sharedInstance];
  double v130 = [v11 dateLastCallEnded];

  if (v130 == 0.0)
  {
    double v13 = 14400.0;
  }
  else
  {
    [*(id *)&v130 timeIntervalSinceNow];
    double v13 = 14400.0;
    if (fabs(v12) < 14400.0) {
      double v13 = 28800.0;
    }
  }
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 138412290;
      double v132 = v130;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_DEBUG, "Date last call ended: %@", buf, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134217984;
      double v132 = v13;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_DEBUG, "Looking for a similar message %f seconds back", buf, 0xCu);
    }
  }
  uint64_t v16 = +[IMDMessageStore sharedInstance];
  int v17 = [*(id *)(a1 + 32) service];
  BOOL v18 = IMSingleObjectArray();
  uint64_t v19 = [v3 guid];
  uint64_t v20 = IMSingleObjectArray();
  uint64_t v21 = [*(id *)(a1 + 40) participants];
  uint64_t v22 = [v16 existingMessageSimilarToMessage:v3 skipServices:v18 skipGUIDs:v20 withinTimeInterval:v21 participants:v13];
  uint64_t v23 = *(void *)(*(void *)(a1 + 88) + 8);
  long long v24 = *(void **)(v23 + 40);
  *(void *)(v23 + 40) = v22;

  if (!*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    int v25 = [v3 service];
    int v26 = [v25 isEqualToString:*MEMORY[0x1E4F6E1A0]];

    if (v26)
    {
      long long v27 = +[IMDMessageStore sharedInstance];
      BOOL v28 = [v3 service];
      uint64_t v29 = [v27 existingSOSMessageSimilarToMessage:v3 matchingService:v28 withinTimeInterval:v13];
      uint64_t v30 = *(void *)(*(void *)(a1 + 96) + 8);
      int v31 = *(void **)(v30 + 40);
      *(void *)(v30 + 40) = v29;
    }
  }
  if (IMOSLoggingEnabled())
  {
    long long v32 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      double v33 = *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      double v132 = v33;
      _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_DEBUG, "Found similar message? %@", buf, 0xCu);
    }
  }
  [*(id *)(a1 + 32) _updateInputMessage:v3 forExistingMessage:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  if (*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40))
  {
    if (IMOSLoggingEnabled())
    {
      long long v34 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v34, OS_LOG_TYPE_INFO))
      {
        double v35 = *(double *)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
        *(_DWORD *)long long buf = 138412290;
        double v132 = v35;
        _os_log_impl(&dword_1D967A000, v34, OS_LOG_TYPE_INFO, "Bailing, we had a similar message: %@", buf, 0xCu);
      }
    }
    long long v36 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) service];
    uint64_t v37 = (void *)MEMORY[0x1E4F6E1B8];
    if ([v36 isEqualToString:*MEMORY[0x1E4F6E1B8]])
    {
      uint64_t v38 = [*(id *)(a1 + 32) service];
      uint64_t v39 = [v38 internalName];
      int v40 = [v39 isEqualToString:*MEMORY[0x1E4F6E1B0]];
    }
    else
    {
      int v40 = 0;
    }

    id v41 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) service];
    if ([v41 isEqualToString:*MEMORY[0x1E4F6E1B0]])
    {
      __int16 v42 = [*(id *)(a1 + 32) service];
      id v43 = [v42 internalName];
      int v44 = [v43 isEqualToString:*v37];
    }
    else
    {
      int v44 = 0;
    }

    char v45 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) service];
    __int16 v46 = (void *)MEMORY[0x1E4F6E1A8];
    if ([v45 isEqualToString:*MEMORY[0x1E4F6E1A8]])
    {
      char v47 = [*(id *)(a1 + 32) service];
      __int16 v48 = [v47 internalName];
      int v49 = [v48 isEqualToString:*MEMORY[0x1E4F6E1A0]];
    }
    else
    {
      int v49 = 0;
    }

    uint64_t v50 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) service];
    if ([v50 isEqualToString:*MEMORY[0x1E4F6E1A0]])
    {
      uint64_t v51 = [*(id *)(a1 + 32) service];
      id v52 = [v51 internalName];
      int v53 = [v52 isEqualToString:*v46];
    }
    else
    {
      int v53 = 0;
    }

    if ((v40 | v44 | v49 | v53) == 1)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v54 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v54, OS_LOG_TYPE_INFO, "Ignoring existing message, will deduplicate using content association message", buf, 2u);
        }
      }
      goto LABEL_48;
    }
    id v68 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) service];
    if ([v68 isEqualToString:*MEMORY[0x1E4F6E1B0]])
    {
      id v69 = [*(id *)(a1 + 32) service];
      id v70 = [v69 internalName];
      int v71 = [v70 isEqualToString:*MEMORY[0x1E4F6E1A0]];

      if (!v71)
      {
LABEL_113:
        unint64_t v112 = +[IMDMessageStore sharedInstance];
        [v112 markMessageAsDeduplicated:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];

        id v113 = objc_alloc_init(MEMORY[0x1E4F1C9C8]);
        unint64_t v114 = NSNumber;
        uint64_t v115 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) time];
        [v113 timeIntervalSinceDate:v115];
        uint64_t v116 = objc_msgSend(v114, "numberWithDouble:");

        uint64_t v140 = *MEMORY[0x1E4F6D720];
        v141[0] = v116;
        uint64_t v117 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v141 forKeys:&v140 count:1];
        uint64_t v118 = [MEMORY[0x1E4F6E890] sharedInstance];
        [v118 trackEvent:*MEMORY[0x1E4F6D888] withDictionary:v117];

        goto LABEL_114;
      }
      if (IMOSLoggingEnabled())
      {
        id v72 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v72, OS_LOG_TYPE_INFO, "Service was iMessage, downgrading to SMS", buf, 2u);
        }
      }
      [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) setService:*MEMORY[0x1E4F6E1A0]];
      uint64_t v73 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      uint64_t v74 = [v3 account];
      [v73 setAccount:v74];

      char v75 = *(void **)(*(void *)(*(void *)(a1 + 88) + 8) + 40);
      long long v76 = [v3 accountID];
      [v75 setAccountID:v76];

      long long v77 = +[IMDMessageStore sharedInstance];
      id v68 = [v77 storeMessage:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) forceReplace:1 modifyError:1 modifyFlags:1 flagMask:0x2000];

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40), v68);
      if ([*(id *)(a1 + 32) isAwaitingStorageTimer])
      {
        long long v78 = *(void **)(a1 + 32);
        uint64_t v79 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) guid];
        [v78 noteSuppressedMessageUpdate:v79];
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          BOOL v105 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v105, OS_LOG_TYPE_INFO))
          {
            double v106 = [*(id *)(*(void *)(*(void *)(a1 + 88) + 8) + 40) guid];
            *(_DWORD *)long long buf = 138412290;
            double v132 = v106;
            _os_log_impl(&dword_1D967A000, v105, OS_LOG_TYPE_INFO, "Broadcasting service update for message with GUID %@ after suppression", buf, 0xCu);
          }
        }
        uint64_t v79 = [*(id *)(a1 + 32) chatForChatIdentifier:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 104)];
        id v107 = [*(id *)(a1 + 32) broadcasterForChatListeners];
        uint64_t v108 = [*(id *)(a1 + 56) accountID];
        __int16 v109 = [v79 chatIdentifier];
        uint64_t v110 = [v79 style];
        unint64_t v111 = [v79 chatProperties];
        [v107 account:v108 chat:v109 style:v110 chatProperties:v111 messageUpdated:*(void *)(*(void *)(*(void *)(a1 + 88) + 8) + 40)];
      }
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
    }

    goto LABEL_113;
  }
LABEL_48:
  if ([v3 isSOS])
  {
    uint64_t v55 = [MEMORY[0x1E4F6E890] sharedInstance];
    v138 = @"markedCritical";
    int v56 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(v3, "isCritical"));
    v139 = v56;
    uint64_t v57 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v139 forKeys:&v138 count:1];
    [v55 trackEvent:*MEMORY[0x1E4F6DAD8] withDictionary:v57];
  }
  if (*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40))
  {
    int v58 = [v3 isSOS];
    int v59 = IMOSLoggingEnabled();
    if (v58)
    {
      if (v59)
      {
        id v60 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v60, OS_LOG_TYPE_INFO))
        {
          double v61 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)long long buf = 138412290;
          double v132 = v61;
          _os_log_impl(&dword_1D967A000, v60, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message, tagging existing message; existingMessage: %@",
            buf,
            0xCu);
        }
      }
      objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), "setIsSOS:", objc_msgSend(v3, "isSOS"));
      objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), "setIsCritical:", objc_msgSend(v3, "isCritical"));
      id v62 = +[IMDMessageStore sharedInstance];
      id v63 = [v62 storeMessage:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) forceReplace:1 modifyError:1 modifyFlags:1 flagMask:0xC000002000];

      objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), v63);
      *(unsigned char *)(*(void *)(*(void *)(a1 + 80) + 8) + 24) = 1;
      if (![*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) isCritical])
      {
        if (!IMOSLoggingEnabled()) {
          goto LABEL_104;
        }
        id v66 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          double v84 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)long long buf = 138412290;
          double v132 = v84;
          _os_log_impl(&dword_1D967A000, v66, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message not marked critical (SOS "
            "only) -- NOT re-alerting; existingMessage: %@",
            buf,
            0xCu);
        }
        goto LABEL_61;
      }
      int v64 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) isRead];
      int v65 = IMOSLoggingEnabled();
      if (!v64)
      {
        if (v65)
        {
          __int16 v96 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v96, OS_LOG_TYPE_INFO))
          {
            double v97 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
            *(_DWORD *)long long buf = 138412290;
            double v132 = v97;
            _os_log_impl(&dword_1D967A000, v96, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message marked critical, existi"
              "ng message unread -- RE-ALERTING; existingMessage: %@",
              buf,
              0xCu);
          }
        }
        __int16 v98 = [*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40) guid];
        v137 = v98;
        uint64_t v99 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v137 count:1];
        IMDNotificationsPostUrgentNotificationsForMessages();

        goto LABEL_104;
      }
      if (v65)
      {
        id v66 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_INFO))
        {
          double v67 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
          *(_DWORD *)long long buf = 138412290;
          double v132 = v67;
          _os_log_impl(&dword_1D967A000, v66, OS_LOG_TYPE_INFO, "Incoming isSOS message found a matching stored non-isSOS message; incoming message marked critical, but exis"
            "ting message already read -- NOT re-alerting; existingMessage: %@",
            buf,
            0xCu);
        }
LABEL_61:
      }
    }
    else
    {
      if (!v59)
      {
LABEL_105:
        uint64_t v100 = [MEMORY[0x1E4F6E890] sharedInstance];
        v135[0] = @"markedCritical";
        id v101 = objc_msgSend(NSNumber, "numberWithBool:", objc_msgSend(*(id *)(*(void *)(*(void *)(a1 + 96) + 8) + 40), "isCritical"));
        v135[1] = @"firstCopyMarkedSOS";
        v136[0] = v101;
        uint64_t v102 = objc_msgSend(NSNumber, "numberWithInt:", objc_msgSend(v3, "isSOS") ^ 1);
        v136[1] = v102;
        id v103 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v136 forKeys:v135 count:2];
        [v100 trackEvent:*MEMORY[0x1E4F6DAC0] withDictionary:v103];

        uint64_t v104 = +[IMDMessageStore sharedInstance];
        [v104 markMessageAsDeduplicated:*(void *)(*(void *)(*(void *)(a1 + 96) + 8) + 40)];

LABEL_114:
        id v119 = 0;
LABEL_115:
        double v93 = v130;
        goto LABEL_116;
      }
      id v63 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
      {
        double v81 = *(double *)(*(void *)(*(void *)(a1 + 96) + 8) + 40);
        *(_DWORD *)long long buf = 138412290;
        double v132 = v81;
        _os_log_impl(&dword_1D967A000, v63, OS_LOG_TYPE_INFO, "Incoming SOS message found a matching message already tagged isSOS, discarding incoming message; existingMessage: %@",
          buf,
          0xCu);
      }
    }
LABEL_104:

    goto LABEL_105;
  }
  if (![*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) isFinished])
  {
    if (*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) && IMOSLoggingEnabled())
    {
      long long v82 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_INFO))
      {
        double v83 = [*(id *)(a1 + 64) guid];
        *(_DWORD *)long long buf = 138412290;
        double v132 = v83;
        _os_log_impl(&dword_1D967A000, v82, OS_LOG_TYPE_INFO, "Allowing upgrade of unfinished message for %@", buf, 0xCu);
      }
    }
    goto LABEL_124;
  }
  if ([*(id *)(a1 + 32) isReplicating]) {
    int v80 = [*(id *)(a1 + 32) _canUpgradeExistingMessageItem:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) replacementReplicatedMessageItem:*(void *)(a1 + 64)];
  }
  else {
    int v80 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    long long v85 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
    {
      *(double *)&uint64_t v86 = [*(id *)(a1 + 64) guid];
      long long v87 = (void *)v86;
      long long v88 = @"NO";
      if (v80) {
        long long v88 = @"YES";
      }
      *(_DWORD *)long long buf = 138412546;
      double v132 = *(double *)&v86;
      __int16 v133 = 2112;
      v134 = v88;
      _os_log_impl(&dword_1D967A000, v85, OS_LOG_TYPE_INFO, "Found existing message, checking upgrade permissibility of %@ allowUpgrade: %@", buf, 0x16u);
    }
  }
  if (!v80)
  {
    if (IMOSLoggingEnabled())
    {
      v128 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v128, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v128, OS_LOG_TYPE_INFO, "*** Bailing, we already had a finished message for this in the database. ***", buf, 2u);
      }
    }
    goto LABEL_114;
  }
  id v89 = +[IMDMessageStore sharedInstance];
  uint64_t v90 = [*(id *)(*(void *)(*(void *)(a1 + 72) + 8) + 40) guid];
  int v91 = [v89 wasMessageDeduplicatedWithGUID:v90];

  int v92 = IMOSLoggingEnabled();
  if (!v91)
  {
    if (v92)
    {
      v121 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
      {
        double v122 = [*(id *)(a1 + 64) guid];
        *(_DWORD *)long long buf = 138412290;
        double v132 = v122;
        _os_log_impl(&dword_1D967A000, v121, OS_LOG_TYPE_INFO, "Allowing upgrade of finished message for %@", buf, 0xCu);
      }
    }
    id v123 = +[IMDMessageStore sharedInstance];
    [v123 markMessageAsDeduplicated:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];

LABEL_124:
    LOBYTE(v129) = 0;
    [*(id *)(a1 + 32) registerChat:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 104) displayName:0 groupID:0 originalGroupID:0 lastAddressedHandle:0 lastAddressedSIMID:0 handleInfo:0 account:*(void *)(a1 + 56) isBlackholed:v129];
    v124 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
    if (v124)
    {
      int v125 = [v124 isFromMe];
      if (v125 != [v3 isFromMe])
      {
        v126 = [NSString stringGUID];
        [v3 setGuid:v126];

        if (IMOSLoggingEnabled())
        {
          v127 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v127, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v127, OS_LOG_TYPE_INFO, "The input message disagrees with the \"from me\" attribute, creating a new message ID", buf, 2u);
          }
        }
      }
    }
    id v119 = v3;
    goto LABEL_115;
  }
  double v93 = v130;
  if (v92)
  {
    __int16 v94 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v94, OS_LOG_TYPE_INFO))
    {
      double v95 = [*(id *)(a1 + 64) guid];
      *(_DWORD *)long long buf = 138412290;
      double v132 = v95;
      _os_log_impl(&dword_1D967A000, v94, OS_LOG_TYPE_INFO, "*** Bailing on replicated upgrade, message %@ was already deduplicated ***", buf, 0xCu);
    }
    goto LABEL_114;
  }
  id v119 = 0;
LABEL_116:

  return v119;
}

void sub_1D9822434(uint64_t a1, void *a2)
{
  v11[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3) {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
  }
  uint64_t v4 = [*(id *)(a1 + 32) chatForChatIdentifier:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 56)];
  if (([v3 isTypingMessage] & 1) == 0 && (objc_msgSend(v3, "isSuggestedActionResponse") & 1) == 0)
  {
    if (v3)
    {
      uint64_t v5 = +[IMDChatRegistry sharedInstance];
      objc_msgSend(v5, "addMessage:toChat:deferSpotlightIndexing:", v3, v4, objc_msgSend(*(id *)(a1 + 32), "isAwaitingStorageTimer"));

      if ([v4 isDeletingIncomingMessages])
      {
        uint64_t v6 = +[IMDChatRegistry sharedInstance];
        uint64_t v7 = [v3 guid];
        v11[0] = v7;
        uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v11 count:1];
        uint64_t v9 = [MEMORY[0x1E4F1C9C8] now];
        [v6 moveMessagesWithGUIDsToRecentlyDeleted:v8 deleteDate:v9];
      }
    }
    double v10 = +[IMDChatRegistry sharedInstance];
    [v10 updateStateForChat:v4 hintMessage:v3];
  }
}

void sub_1D98225C8(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v71 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a3;
  uint64_t v8 = a4;
  kdebug_trace();
  if (([(__CFString *)v8 isTypingMessage] & 1) == 0
    && ([(__CFString *)v8 isSuggestedActionResponse] & 1) == 0
    && ([(__CFString *)v8 flags] & 4) == 0)
  {
    uint64_t v9 = [(__CFString *)v8 guid];
    os_signpost_id_t v10 = _MessageGUIDToSignpostId();

    if (v10)
    {
      _iMessageTelemetryLogHandle();
      id v11 = (id)objc_claimAutoreleasedReturnValue();
      double v12 = v11;
      if (v10 != -1 && os_signpost_enabled(v11))
      {
        *(_WORD *)long long buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1D967A000, v12, OS_SIGNPOST_INTERVAL_END, v10, "IncomingMessage", " enableTelemetry=YES ", buf, 2u);
      }

      double v13 = [MEMORY[0x1E4F6C3F8] IMDaemonCoreMessageReceivedTimingCollection];
      char v14 = [NSNumber numberWithUnsignedLongLong:v10];
      [v13 stopTimingForKey:v14];

      id v15 = [NSNumber numberWithUnsignedLongLong:v10];
      [v13 totalTimeForKey:v15];
      double v17 = v16;

      if (v17 <= 0.0)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v19 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
          {
            uint64_t v20 = [(__CFString *)v8 guid];
            *(_DWORD *)long long buf = 138412290;
            id v66 = v20;
            _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "No timing information available for incoming message processing with guid %@", buf, 0xCu);
          }
        }
      }
      else
      {
        BOOL v18 = [MEMORY[0x1E4F6E6E8] sharedInstance];
        [v18 postCoreAutomationNotificationIncomingMessageProcessedWithDuration:v17];
      }
      uint64_t v21 = [NSNumber numberWithUnsignedLongLong:v10];
      [v13 removeTimingForKey:v21];
    }
  }
  if (a2)
  {
    if (!v8)
    {
      uint64_t v8 = v7;
      if (!v8) {
        uint64_t v8 = (__CFString *)*(id *)(a1 + 32);
      }
    }
    if (([(__CFString *)v7 isTypingMessage] & 1) != 0
      || ([(__CFString *)v7 isFromMe] & 1) != 0)
    {
      goto LABEL_36;
    }
    uint64_t v22 = [*(id *)(a1 + 40) service];
    if ([v22 supportsDatabase])
    {
      uint64_t v23 = +[IMDDaemonPropertyManager sharedManager];
      long long v24 = [v23 valueOfPersistentProperty:*MEMORY[0x1E4F6C490]];
      BOOL v25 = [v24 intValue] == 0;

      if (!v25)
      {
LABEL_34:
        [*(id *)(a1 + 40) _checkMessageForOneTimeCodes:v8];
        uint64_t v29 = [MEMORY[0x1E4F6EAB8] sharedInstance];
        char v30 = [v29 isUnderFirstDataProtectionLock];

        if ((v30 & 1) == 0) {
          [*(id *)(a1 + 40) _checkMessageForENURL:v8];
        }
LABEL_36:
        int v31 = [*(id *)(a1 + 40) chatForChatIdentifier:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 80)];
        if (IMOSLoggingEnabled())
        {
          long long v32 = OSLogHandleForIMEventCategory();
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412546;
            id v66 = v7;
            __int16 v67 = 2112;
            id v68 = v8;
            _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Stored message: %@     Actually stored: %@", buf, 0x16u);
          }
        }
        if ([(__CFString *)v8 containsRichLink])
        {
          double v33 = [*(id *)(a1 + 32) syndicationRanges];
          BOOL v34 = v33 == 0;

          if (v34)
          {
            uint64_t v35 = [*(id *)(a1 + 40) _isMessageSWYSpamMessage:v8 inChat:v31];
            long long v36 = *(void **)(a1 + 40);
            id v63 = 0;
            id v64 = 0;
            int v37 = [v36 _shouldShowSWYQuickActionForMessage:v8 outAppName:&v64 outBundleID:&v63];
            id v38 = v64;
            id v39 = v63;
            if ((v35 | v37) == 1)
            {
              if (IMOSLoggingEnabled())
              {
                int v40 = OSLogHandleForIMFoundationCategory();
                if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
                {
                  id v41 = @"NO";
                  if (v35) {
                    __int16 v42 = @"YES";
                  }
                  else {
                    __int16 v42 = @"NO";
                  }
                  *(_DWORD *)long long buf = 138412802;
                  id v66 = v8;
                  __int16 v67 = 2112;
                  id v68 = v42;
                  if (v37) {
                    id v41 = @"YES";
                  }
                  __int16 v69 = 2112;
                  id v70 = v41;
                  _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Not donating to Message: %@ to CoreSpotlight. isSWYSpam %@, showQuickAction: %@", buf, 0x20u);
                }
              }
              [*(id *)(a1 + 40) _configureSyndicationRangesForMessage:v8 forChat:v31 withSyndicationStatus:2];
              [(__CFString *)v8 setWasDetectedAsSWYSpam:v35];
              [(__CFString *)v8 setSwyAppName:v38];
              [(__CFString *)v8 setSwyBundleID:v39];
              id v43 = +[IMDMessageStore sharedInstance];
              LOWORD(v62) = 256;
              id v44 = (id)objc_msgSend(v43, "storeMessage:forceReplace:modifyError:modifyFlags:flagMask:updateMessageCache:calculateUnreadCount:reindexMessage:", v8, 1, 0, 0, 0, 1, v62);
            }
          }
        }
        if (IMOSLoggingEnabled())
        {
          char v45 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v66 = v8;
            _os_log_impl(&dword_1D967A000, v45, OS_LOG_TYPE_INFO, "Posting received message: %@", buf, 0xCu);
          }
        }
        if (*(void *)(a1 + 56)) {
          -[__CFString setConsumedSessionPayloads:](v8, "setConsumedSessionPayloads:");
        }
        if (([v31 isDeletingIncomingMessages] & 1) != 0
          || ([*(id *)(a1 + 40) isAwaitingStorageTimer] & 1) != 0)
        {
          __int16 v46 = *(void **)(a1 + 40);
          char v47 = [(__CFString *)v8 guid];
          [v46 noteSuppressedMessageUpdate:v47];
        }
        else
        {
          [*(id *)(a1 + 64) addObject:v8];
        }
        if (*(unsigned char *)(a1 + 81))
        {
          __int16 v48 = *(void **)(a1 + 40);
          int v49 = [*(id *)(a1 + 32) guid];
          [v48 _updateExpireStateForMessageGUID:v49];
        }
        if ([v31 state] == 4)
        {
          uint64_t v50 = *(void **)(a1 + 40);
          uint64_t v51 = [v31 chatIdentifier];
          objc_msgSend(v50, "didUpdateChatStatus:chat:style:account:", 7, v51, objc_msgSend(v31, "style"), *(void *)(a1 + 72));
        }
        if (*(unsigned char *)(a1 + 82)) {
          [*(id *)(a1 + 40) sendSavedReceiptForMessage:v8 toChatID:0 identifier:*(void *)(a1 + 48) style:*(unsigned __int8 *)(a1 + 80)];
        }
        if ([(__CFString *)v7 isAssociatedMessageItem])
        {
          unint64_t v52 = [(__CFString *)v7 associatedMessageType] & 0xFFFFFFFFFFFFFFF8;
          if (v52 == 3000 || v52 == 2000)
          {
            int v53 = IMLogHandleForCategory();
            if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
            {
              uint64_t v54 = [(__CFString *)v7 guid];
              uint64_t v55 = [(__CFString *)v7 associatedMessageGUID];
              int v56 = [(__CFString *)v7 sender];
              *(_DWORD *)long long buf = 138412802;
              id v66 = v54;
              __int16 v67 = 2112;
              id v68 = v55;
              __int16 v69 = 2112;
              id v70 = v56;
              _os_log_impl(&dword_1D967A000, v53, OS_LOG_TYPE_INFO, "Replacing previous message acknowledgements with new acknowledgment for received message; sender: '%@':'%@':'%@'",
                buf,
                0x20u);
            }
            uint64_t v57 = +[IMDMessageStore sharedInstance];
            int v58 = [(__CFString *)v7 guid];
            int v59 = [(__CFString *)v7 associatedMessageGUID];
            id v60 = [(__CFString *)v7 sender];
            id v61 = (id)[v57 replaceMessageAcknowledgmentsWithNewMessageAcknowledgment:v58 associatedMessageGUID:v59 sender:v60];
          }
        }

        goto LABEL_77;
      }
    }
    else
    {
    }
    if (IMOSLoggingEnabled())
    {
      long long v27 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v27, OS_LOG_TYPE_INFO, "  Ensuring the app is alive here", buf, 2u);
      }
    }
    BOOL v28 = +[IMDLocalDaemon sharedDaemon];
    [v28 launchListenerForCapability:*MEMORY[0x1E4F6C508]];

    goto LABEL_34;
  }
  if (IMOSLoggingEnabled())
  {
    int v26 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Message was not stored, ignoring", buf, 2u);
    }
  }
LABEL_77:
}

void sub_1D98232A4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D982315CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D9823730(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (([v5 isTypingMessage] & 1) == 0)
  {
    id v3 = +[IMDChatRegistry sharedInstance];
    [v3 addMessage:v5 toChat:*(void *)(a1 + 32)];

    uint64_t v4 = +[IMDChatRegistry sharedInstance];
    [v4 updateStateForChat:*(void *)(a1 + 32) hintMessage:0];
  }
}

void sub_1D98237C8(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (a2)
  {
    if (([v7 isEqual:v8] & 1) == 0)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v24 = v8;
          _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Updating invitation message after DB store: %@", buf, 0xCu);
        }
      }
      if (([*(id *)(a1 + 32) isAwaitingStorageTimer] & 1) == 0)
      {
        os_signpost_id_t v10 = [*(id *)(a1 + 32) broadcasterForChatListeners];
        id v11 = [*(id *)(a1 + 32) accountID];
        uint64_t v12 = *(void *)(a1 + 40);
        uint64_t v13 = *(unsigned __int8 *)(a1 + 72);
        char v14 = [*(id *)(a1 + 48) chatProperties];
        id v15 = [*(id *)(a1 + 48) groupID];
        double v16 = [*(id *)(a1 + 48) personCentricID];
        [v10 account:v11 chat:v12 style:v13 chatProperties:v14 groupID:v15 chatPersonCentricID:v16 messageReceived:v8];
      }
    }
    if (([*(id *)(a1 + 32) isAwaitingStorageTimer] & 1) == 0)
    {
      double v17 = [*(id *)(a1 + 32) broadcasterForChatListeners];
      uint64_t v18 = *(void *)(a1 + 56);
      uint64_t v19 = *(unsigned __int8 *)(a1 + 72);
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = [*(id *)(a1 + 48) chatProperties];
      [v17 account:v18 chat:v20 style:v19 chatProperties:v21 invitationReceived:v8];
    }
    if (*(void *)(a1 + 64))
    {
      uint64_t v22 = [*(id *)(a1 + 32) broadcasterForChatListeners];
      [v22 account:*(void *)(a1 + 56) chat:*(void *)(a1 + 40) style:*(unsigned __int8 *)(a1 + 72) chatProperties:0 updateProperties:*(void *)(a1 + 64)];
    }
  }
}

void sub_1D9824AF0(uint64_t a1)
{
  unsigned int v13 = *(_DWORD *)(a1 + 56);
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 60);
  id v14 = [*(id *)(a1 + 48) displayName];
  uint64_t v4 = [*(id *)(a1 + 48) groupID];
  id v5 = [*(id *)(a1 + 48) lastAddressedHandle];
  uint64_t v6 = [*(id *)(a1 + 48) lastAddressedSIMID];
  id v7 = [*(id *)(a1 + 48) handleInfo];
  id v8 = [*(id *)(a1 + 48) account];
  uint64_t v9 = [*(id *)(a1 + 48) category];
  os_signpost_id_t v10 = [*(id *)(a1 + 48) extensionName];
  LOBYTE(v11) = [*(id *)(a1 + 48) isBlackholed];
  [v2 didUpdateChatStatus:v13 chat:v12 style:v3 displayName:v14 groupID:v4 lastAddressedHandle:v5 lastAddressedSIMID:v6 handleInfo:v7 account:v8 category:v9 spamExtensionName:v10 isBlackholed:v11];
}

uint64_t sub_1D9826908(uint64_t a1, void *a2)
{
  return [a2 ID];
}

void sub_1D9826C1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[IMDChatRegistry sharedInstance];
  [v4 addItem:v3 toChat:*(void *)(a1 + 32)];

  id v5 = +[IMDChatRegistry sharedInstance];
  [v5 updateStateForChat:*(void *)(a1 + 32) hintMessage:0];
}

void sub_1D9826CB0(id *a1, int a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  id v9 = v8;
  if (a2)
  {
    if (!v8)
    {
      id v9 = v7;
      if (!v9) {
        id v9 = a1[4];
      }
    }
    if (IMOSLoggingEnabled())
    {
      os_signpost_id_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        id v25 = v7;
        __int16 v26 = 2112;
        id v27 = v9;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Stored item: %@     Actually stored: %@", buf, 0x16u);
      }
    }
    if (IMOSLoggingEnabled())
    {
      uint64_t v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v25 = v9;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Posting received message: %@", buf, 0xCu);
      }
    }
    char v12 = [a1[5] isAwaitingStorageTimer];
    id v13 = a1[5];
    if (v12)
    {
      id v14 = [v9 guid];
      [v13 noteSuppressedMessageUpdate:v14];
    }
    else
    {
      double v16 = a1 + 6;
      double v17 = objc_msgSend(v13, "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(a1[6], "isBlackholed"));
      uint64_t v18 = [a1[7] accountID];
      uint64_t v19 = [*v16 chatIdentifier];
      uint64_t v20 = [*v16 style];
      uint64_t v21 = [*v16 chatProperties];
      uint64_t v22 = [*v16 groupID];
      uint64_t v23 = [*v16 personCentricID];
      [v17 account:v18 chat:v19 style:v20 chatProperties:v21 groupID:v22 chatPersonCentricID:v23 messageReceived:v9];
    }
  }
  else if (IMOSLoggingEnabled())
  {
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Item was not stored, ignoring", buf, 2u);
    }
  }
}

uint64_t sub_1D9827014()
{
  uint64_t result = MEMORY[0x1E0169C30](@"_CDSpotlightItemRecorder", @"CoreDuet");
  qword_1EA8CA610 = result;
  return result;
}

void sub_1D98271DC(uint64_t a1, int a2, void *a3)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      uint64_t v7 = *(void *)(a1 + 32);
      id v8 = @"NO";
      int v9 = 138412802;
      if (a2) {
        id v8 = @"YES";
      }
      uint64_t v10 = v7;
      __int16 v11 = 2112;
      char v12 = v8;
      __int16 v13 = 2112;
      id v14 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "done deleting searchable items with domain identifiers %@. success %@ error %@", (uint8_t *)&v9, 0x20u);
    }
  }
}

void sub_1D9827674(uint64_t a1, void *a2, void *a3)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  int v9 = [v8 objectForKey:*MEMORY[0x1E4F6BEB8]];
  uint64_t v10 = [v8 objectForKey:*MEMORY[0x1E4F6BEB0]];
  uint64_t v11 = [v10 unsignedLongLongValue];

  char v12 = [v8 objectForKey:*MEMORY[0x1E4F6BEC0]];
  char v13 = [v12 BOOLValue];

  if (v9)
  {
    id v14 = [*(id *)(a1 + 32) _sharedAccountController];
    uint64_t v15 = [v14 anySessionForServiceName:v9];

    if (!v15)
    {
      if (IMOSLoggingEnabled())
      {
        char v30 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v43 = v7;
          _os_log_impl(&dword_1D967A000, v30, OS_LOG_TYPE_INFO, "Chat: could not find a session to route message GUID: %@", buf, 0xCu);
        }
      }
      goto LABEL_35;
    }
    double v16 = [*(id *)(a1 + 32) _sharedMessageStore];
    double v17 = [v16 messageWithGUID:v7];

    if (!v17)
    {
      if (IMOSLoggingEnabled())
      {
        int v31 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138412290;
          id v43 = v7;
          _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Chat: Could not re-route missing message GUID: %@", buf, 0xCu);
        }
      }
      goto LABEL_34;
    }
    uint64_t v18 = [*(id *)(a1 + 32) _sharedMessageStore];
    uint64_t v19 = [v18 chatForMessage:v17];

    if (v19)
    {
      if (([v17 isSent] & 1) != 0 || objc_msgSend(v17, "errorCode"))
      {
        uint64_t v20 = [v17 time];
        [v20 timeIntervalSinceNow];
        uint64_t v22 = v21;

        [v17 setErrorCode:0];
        objc_msgSend(v17, "setFlags:", objc_msgSend(v17, "flags") & 0xFFFFFFFFFFFF4FFFLL);
        [v17 setTime:0];
        [v17 setTimeRead:0];
        [v17 setTimeDelivered:0];
        [v17 setTimePlayed:0];
        objc_msgSend(v17, "setFlags:", objc_msgSend(v17, "flags") | v11);
        if ((v11 & 0x80000) != 0)
        {
          uint64_t v23 = [v17 service];
          [v17 setOriginalServiceName:v23];

          if (IMOSLoggingEnabled())
          {
            id v24 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
            {
              id v25 = [v17 service];
              *(_DWORD *)long long buf = 138412546;
              id v43 = v25;
              __int16 v44 = 2112;
              id v45 = v7;
              _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Setting original service name to: %@ on downgraded message: %@", buf, 0x16u);
            }
          }
        }
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 3221225472;
        aBlock[2] = sub_1D9827CB8;
        aBlock[3] = &unk_1E6B77888;
        id v35 = v7;
        id v36 = v19;
        id v37 = v9;
        id v26 = v15;
        char v41 = v13;
        uint64_t v27 = *(void *)(a1 + 32);
        id v38 = v26;
        uint64_t v39 = v27;
        uint64_t v40 = v22;
        uint64_t v28 = _Block_copy(aBlock);
        [*(id *)(a1 + 32) storeMessage:v17 forceReplace:1 modifyError:1 modifyFlags:1 calculateUnreadCount:1 flagMask:0 didReplaceBlock:0 shouldStoreBlock:0 didStoreBlock:0 block:v28];

        goto LABEL_33;
      }
      if (IMOSLoggingEnabled())
      {
        long long v32 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          double v33 = [v17 guid];
          *(_DWORD *)long long buf = 138412290;
          id v43 = v33;
          _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Not routing message (%@) because it is not sent and has no error, not a candidate for routing", buf, 0xCu);
        }
LABEL_32:
      }
    }
    else if (IMOSLoggingEnabled())
    {
      long long v32 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v43 = v17;
        _os_log_impl(&dword_1D967A000, v32, OS_LOG_TYPE_INFO, "Chat: Could not find a chat for message: %@", buf, 0xCu);
      }
      goto LABEL_32;
    }
LABEL_33:

LABEL_34:
LABEL_35:

    goto LABEL_36;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v29 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412546;
      id v43 = v7;
      __int16 v44 = 2112;
      id v45 = v8;
      _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Chat: Got a missing service in routing dictionary for GUID (%@): %@", buf, 0x16u);
    }
  }
LABEL_36:
}

void sub_1D9827C44(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9827BE4);
  }
  _Unwind_Resume(a1);
}

void sub_1D9827CB8(void *a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v72 = *MEMORY[0x1E4F143B8];
  id v44 = a3;
  id v49 = a4;
  unint64_t v52 = (double *)a1;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      id v7 = (void *)a1[4];
      uint64_t v8 = a1[5];
      uint64_t v9 = a1[6];
      uint64_t v10 = a1[7];
      *(_DWORD *)long long buf = 138413314;
      id v65 = v7;
      __int16 v66 = 2112;
      id v67 = v49;
      __int16 v68 = 2112;
      *(void *)__int16 v69 = v8;
      *(_WORD *)&v69[8] = 2112;
      *(void *)&v69[10] = v9;
      __int16 v70 = 2112;
      uint64_t v71 = v10;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Re-routing message (guid:%@):%@   chat:%@   service:%@   session:%@", buf, 0x34u);
    }
  }
  char v12 = (void *)a1[5];
  uint64_t v11 = (id *)(a1 + 5);
  uint64_t v51 = [v12 chatIdentifier];
  unsigned int v50 = [*v11 style];
  __int16 v48 = [*v11 serviceName];
  char v13 = +[IMDAccountController sharedInstance];
  char v47 = [v13 anySessionForServiceName:v48];

  id v45 = (void *)IMCopyGUIDForChat();
  uint64_t v46 = [*((id *)v52 + 7) chatForChatIdentifier:v51 style:v50];
  if (v46)
  {
    if (IMOSLoggingEnabled())
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v65 = v46;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Chat already exists for the other session, nothing to do here: %@", buf, 0xCu);
      }
    }
  }
  else
  {
    uint64_t v15 = [*((id *)v52 + 5) participants];
    [0 addParticipants:v15];

    if (IMOSLoggingEnabled())
    {
      double v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138413058;
        id v65 = v48;
        __int16 v66 = 2112;
        id v67 = v51;
        __int16 v68 = 1024;
        *(_DWORD *)__int16 v69 = v50;
        *(_WORD *)&v69[4] = 2112;
        *(void *)&v69[6] = 0;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "No chat registered, creating on one on service %@  identifier: %@   style: %c  (Chat: %@)", buf, 0x26u);
      }
    }
    id v56 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
    long long v59 = 0u;
    long long v60 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    id obj = [*((id *)v52 + 5) participants];
    uint64_t v17 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
    if (v17)
    {
      uint64_t v55 = *(void *)v58;
      uint64_t v54 = *MEMORY[0x1E4F6C5C8];
      uint64_t v18 = *MEMORY[0x1E4F6C458];
      uint64_t v19 = *MEMORY[0x1E4F6C648];
      uint64_t v20 = *MEMORY[0x1E4F6C5A0];
      do
      {
        for (uint64_t i = 0; i != v17; ++i)
        {
          if (*(void *)v58 != v55) {
            objc_enumerationMutation(obj);
          }
          uint64_t v22 = *(void **)(*((void *)&v57 + 1) + 8 * i);
          uint64_t v23 = (void *)MEMORY[0x1E4F1C9E8];
          id v24 = [v22 ID];
          id v25 = [NSNumber numberWithInt:2];
          id v26 = [v22 unformattedID];
          uint64_t v27 = [v22 countryCode];
          uint64_t v28 = objc_msgSend(v23, "dictionaryWithObjectsAndKeys:", v24, v54, v25, v18, v26, v19, v27, v20, 0);
          [v56 addObject:v28];
        }
        uint64_t v17 = [obj countByEnumeratingWithState:&v57 objects:v63 count:16];
      }
      while (v17);
    }

    if (IMOSLoggingEnabled())
    {
      uint64_t v29 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
      {
        char v30 = [*((id *)v52 + 5) participants];
        *(_DWORD *)long long buf = 138412546;
        id v65 = v56;
        __int16 v66 = 2112;
        id v67 = v30;
        _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Generated handle info: %@ for group chat: %@", buf, 0x16u);
      }
    }
    if (v47)
    {
      int v31 = [v47 chatForChatIdentifier:v51 style:v50];
      long long v32 = v31;
      if (v31)
      {
        double v33 = [v31 lastAddressedLocalHandle];
        BOOL v34 = [v32 lastAddressedSIMID];
        if (IMOSLoggingEnabled())
        {
          id v35 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            id v36 = [v32 guid];
            *(_DWORD *)long long buf = 138412802;
            id v65 = v36;
            __int16 v66 = 2112;
            id v67 = v33;
            __int16 v68 = 2112;
            *(void *)__int16 v69 = v34;
            _os_log_impl(&dword_1D967A000, v35, OS_LOG_TYPE_INFO, "Found original chat [%@], will use lastAddressedHandle %@ lastSIMID %@", buf, 0x20u);
          }
        }
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          id v38 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            id v65 = v51;
            _os_log_impl(&dword_1D967A000, v38, OS_LOG_TYPE_INFO, "No iMessage chat found for chat identifier: %@", buf, 0xCu);
          }
        }
        double v33 = 0;
        BOOL v34 = 0;
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        id v37 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "Chat: could not find iMessage session to find iMessage chat.", buf, 2u);
        }
      }
      double v33 = 0;
      BOOL v34 = 0;
    }
    [*((id *)v52 + 7) didJoinChat:v51 style:v50 displayName:0 groupID:0 lastAddressedHandle:v33 lastAddressedSIMID:v34 handleInfo:v56];
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v39 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
    {
      uint64_t v40 = (void *)*((void *)v52 + 7);
      *(_DWORD *)long long buf = 138412546;
      id v65 = v40;
      __int16 v66 = 2112;
      id v67 = v45;
      _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Sending message to session: %@  chatGUID: %@", buf, 0x16u);
    }
  }
  [*((id *)v52 + 7) sendMessage:v49 toChat:v51 style:v50];
  [v47 revokeSentMessage:v49 inChat:*((void *)v52 + 5)];
  if (*((unsigned char *)v52 + 80))
  {
    [*((id *)v52 + 8) _markChatAsDowngraded:*((void *)v52 + 5)];
    v61[0] = *MEMORY[0x1E4F6D730];
    char v41 = [NSNumber numberWithDouble:v52[9]];
    v61[1] = *MEMORY[0x1E4F6DD00];
    v62[0] = v41;
    v62[1] = MEMORY[0x1E4F1CC28];
    __int16 v42 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v62 forKeys:v61 count:2];

    id v43 = [MEMORY[0x1E4F6E890] sharedInstance];
    [v43 trackEvent:*MEMORY[0x1E4F6D898] withDictionary:v42];
  }
}

void sub_1D9828720(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F6BED0] sharedInstance];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  id v5 = [*(id *)(a1 + 48) _downgradableServiceNames];
  uint64_t v6 = *(unsigned int *)(a1 + 56);
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  void v7[2] = sub_1D98287F0;
  v7[3] = &unk_1E6B778B0;
  void v7[4] = *(void *)(a1 + 48);
  [v2 requestRoutingForMessageGuid:v3 inChat:v4 downgradableServices:v5 error:v6 completionBlock:v7];
}

uint64_t sub_1D98287F0(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleRoutingWithDictionary:a2];
  if (a3 > 0.0)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 _updateRoutingTimerWithInterval:a3];
  }
  return result;
}

uint64_t sub_1D9828A94(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleRoutingWithDictionary:a2];
  if (a3 > 0.0)
  {
    uint64_t v6 = *(void **)(a1 + 32);
    return [v6 _updateRoutingTimerWithInterval:a3];
  }
  return result;
}

void sub_1D9828DB0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  uint64_t v9 = [v8 objectForKey:*MEMORY[0x1E4F6BEA0]];
  uint64_t v10 = [v9 longLongValue];

  uint64_t v11 = [v8 objectForKey:*MEMORY[0x1E4F6BEA8]];
  int v12 = [v11 BOOLValue];

  char v13 = [*(id *)(a1 + 32) _sharedMessageStore];
  id v14 = [v13 messageWithGUID:v7];

  if (v14)
  {
    uint64_t v15 = [*(id *)(a1 + 32) _sharedMessageStore];
    double v16 = [v15 chatForMessage:v14];

    if (v16)
    {
      if (v10 == 3) {
        int v17 = v12;
      }
      else {
        int v17 = 0;
      }
      if (v17 == 1)
      {
        if (IMOSLoggingEnabled())
        {
          uint64_t v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            uint64_t v19 = [v14 guid];
            *(_DWORD *)long long buf = 138412290;
            id v31 = v19;
            _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Not deleting message (%@) because was already saved", buf, 0xCu);
          }
LABEL_23:
        }
      }
      else
      {
        if ([v14 expireState] <= v10)
        {
          [v14 setExpireState:v10];
          if (v12)
          {
            [*(id *)(a1 + 40) addObject:v7];
          }
          else
          {
            uint64_t v22 = *(void **)(a1 + 32);
            v25[0] = MEMORY[0x1E4F143A8];
            v25[1] = 3221225472;
            void v25[2] = sub_1D98291FC;
            v25[3] = &unk_1E6B77900;
            id v26 = v7;
            id v23 = v16;
            uint64_t v24 = *(void *)(a1 + 32);
            id v27 = v23;
            uint64_t v28 = v24;
            id v29 = v14;
            [v22 storeMessage:v29 forceReplace:0 modifyError:0 modifyFlags:0 calculateUnreadCount:1 flagMask:0 didReplaceBlock:0 shouldStoreBlock:0 didStoreBlock:0 block:v25];
          }
          goto LABEL_27;
        }
        if (IMOSLoggingEnabled())
        {
          uint64_t v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            id v21 = [v14 guid];
            *(_DWORD *)long long buf = 138412802;
            id v31 = v21;
            __int16 v32 = 1024;
            int v33 = [v14 expireState];
            __int16 v34 = 1024;
            int v35 = v10;
            _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Not expiring message (%@) because its expire state %d is already %d", buf, 0x18u);
          }
          goto LABEL_23;
        }
      }
    }
    else if (IMOSLoggingEnabled())
    {
      uint64_t v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v31 = v14;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Chat: Could not find a chat for message: %@", buf, 0xCu);
      }
      goto LABEL_23;
    }
LABEL_27:

    goto LABEL_28;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v31 = v7;
      _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Chat: Could not expire missing message GUID: %@", buf, 0xCu);
    }
  }
LABEL_28:
}

void sub_1D98291C0(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9829170);
  }
  _Unwind_Resume(a1);
}

void sub_1D98291FC(uint64_t a1, int a2, void *a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void *)(a1 + 40);
      uint64_t v12 = *(void *)(a1 + 48);
      int v20 = 138413058;
      uint64_t v21 = v10;
      __int16 v22 = 2112;
      id v23 = v8;
      __int16 v24 = 2112;
      uint64_t v25 = v11;
      __int16 v26 = 2112;
      uint64_t v27 = v12;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Expire message (guid:%@):%@   chat:%@   session:%@", (uint8_t *)&v20, 0x2Au);
    }
  }
  if (a2)
  {
    char v13 = [*(id *)(a1 + 48) broadcasterForChatListeners];
    id v14 = [*(id *)(a1 + 56) accountID];
    double v16 = *(void **)(a1 + 40);
    uint64_t v15 = (id *)(a1 + 40);
    int v17 = [v16 chatIdentifier];
    uint64_t v18 = [*v15 style];
    uint64_t v19 = [*v15 chatProperties];
    [v13 account:v14 chat:v17 style:v18 chatProperties:v19 messageUpdated:v8];
  }
}

void sub_1D9829458(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F6BED0] sharedInstance];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1D98294EC;
  v4[3] = &unk_1E6B778B0;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  [v2 requestExpireStateForMessageGuid:v3 completionBlock:v4];
}

uint64_t sub_1D98294EC(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleExpireStateDictionary:a2];
  if (a3 > 0.0)
  {
    id v6 = *(void **)(a1 + 32);
    return [v6 _updateExpireStateTimerWithInterval:a3];
  }
  return result;
}

uint64_t sub_1D98298A4(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleExpireStateDictionary:a2];
  if (a3 > 0.0)
  {
    id v6 = *(void **)(a1 + 32);
    double v7 = 1.0;
    if (a3 >= 1.0) {
      double v7 = a3;
    }
    return [v6 _updateExpireStateTimerWithInterval:v7];
  }
  return result;
}

void sub_1D9829A48(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = [a3 objectForKeyedSubscript:*MEMORY[0x1E4F6BEC8]];
  int v6 = [v5 BOOLValue];

  if (v6)
  {
    double v7 = *(void **)(a1 + 32);
    id v8 = [v7 account];
    [v7 didReceiveError:3 forMessageID:v9 forceError:1 account:v8];
  }
}

void sub_1D9829B9C(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F6BED0] sharedInstance];
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 3221225472;
  void v4[2] = sub_1D9829C30;
  v4[3] = &unk_1E6B778B0;
  uint64_t v3 = *(void *)(a1 + 32);
  void v4[4] = *(void *)(a1 + 40);
  [v2 requestWatchdogForMessageGuid:v3 completionBlock:v4];
}

uint64_t sub_1D9829C30(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleWatchdogWithDictionary:a2];
  if (a3 > 0.0)
  {
    int v6 = *(void **)(a1 + 32);
    return [v6 _updateWatchdogTimerWithInterval:a3];
  }
  return result;
}

uint64_t sub_1D9829FE8(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t result = [*(id *)(a1 + 32) _handleWatchdogWithDictionary:a2];
  if (a3 > 0.0)
  {
    int v6 = *(void **)(a1 + 32);
    return [v6 _updateWatchdogTimerWithInterval:a3];
  }
  return result;
}

void sub_1D982A180(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    id v2 = objc_alloc(MEMORY[0x1E4F6E850]);
    uint64_t v3 = [*(id *)(a1 + 40) accountID];
    id v6 = (id)[v2 initWithSender:v3 time:0 body:*(void *)(a1 + 32) attributes:0 fileTransferGUIDs:0 flags:69 error:0 guid:0 threadIdentifier:0];

    uint64_t v4 = *(void **)(a1 + 40);
    id v5 = [*(id *)(a1 + 48) chatIdentifier];
    [v4 sendMessage:v6 toChat:v5 style:45];
  }
}

void sub_1D982A2F0(uint64_t a1)
{
  if (IMSupportsUserNotifications())
  {
    if (IMOSLoggingEnabled())
    {
      id v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Going to user user notifications to notify for urgent messages", buf, 2u);
      }
    }
    uint64_t v3 = +[IMDAccountController sharedInstance];
    uint64_t v4 = [v3 activeAliases];

    id v5 = [MEMORY[0x1E4F1C9E8] dictionaryWithObject:v4 forKey:*MEMORY[0x1E4F6BF28]];
    IMDNotificationsPostUrgentNotificationsForMessages();
  }
  else
  {
    id v6 = [*(id *)(a1 + 40) broadcasterForNotificationsListeners];
    [v6 receivedUrgentRequestForMessages:*(void *)(a1 + 32)];
  }
}

void sub_1D982A540(uint64_t a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) guid];
  uint64_t v4 = [*v2 chatIdentifier];
  uint64_t v5 = [*v2 style];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = *(id *)(a1 + 40);
  uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v16;
    *(void *)&long long v7 = 138412546;
    long long v13 = v7;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (IMOSLoggingEnabled())
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = [v10 guid];
            *(_DWORD *)long long buf = v13;
            int v20 = v12;
            __int16 v21 = 2112;
            __int16 v22 = v3;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Auto Replier sending delivered quietly receipt for messageGuid %@ in chatGuid %@", buf, 0x16u);
          }
        }
        objc_msgSend(*(id *)(a1 + 48), "sendDeliveredQuietlyReceiptForMessage:forIncomingMessageFromIDSID:toChatGuid:identifier:style:withWillSendToDestinationsHandler:", v10, *(void *)(a1 + 56), v3, v4, v5, *(void *)(a1 + 64), v13);
        ++v9;
      }
      while (v6 != v9);
      uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v23 count:16];
    }
    while (v6);
  }
}

void sub_1D982A804(id *a1)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v2 = a1 + 4;
  uint64_t v3 = [a1[4] guid];
  uint64_t v4 = [*v2 chatIdentifier];
  uint64_t v5 = [*v2 style];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = a1[5];
  uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v23 count:16];
  if (v6)
  {
    uint64_t v8 = *(void *)v16;
    *(void *)&long long v7 = 138412546;
    long long v13 = v7;
    do
    {
      uint64_t v9 = 0;
      do
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(obj);
        }
        uint64_t v10 = *(void **)(*((void *)&v15 + 1) + 8 * v9);
        if (IMOSLoggingEnabled())
        {
          uint64_t v11 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
          {
            uint64_t v12 = [v10 guid];
            *(_DWORD *)long long buf = v13;
            int v20 = v12;
            __int16 v21 = 2112;
            __int16 v22 = v3;
            _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Auto Replier sending notify recipient command for messageGuid %@ in chatGuid %@", buf, 0x16u);
          }
        }
        objc_msgSend(a1[6], "sendNotifyRecipientCommandForMessage:toChatGuid:identifier:style:", v10, v3, v4, v5, v13);
        ++v9;
      }
      while (v6 != v9);
      uint64_t v6 = [obj countByEnumeratingWithState:&v15 objects:v23 count:16];
    }
    while (v6);
  }
}

void sub_1D982AC28(uint64_t a1, int a2)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        uint64_t v4 = *(void **)(a1 + 32);
        *(_DWORD *)long long buf = 138412290;
        __int16 v22 = v4;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Successfully consumed EN url, marking message as read: %@", buf, 0xCu);
      }
    }
    uint64_t v5 = [*(id *)(a1 + 32) guid];
    if ([v5 length])
    {
      uint64_t v6 = +[IMDMessageStore sharedInstance];
      long long v7 = [v6 chatsForMessageGUID:v5];

      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v8 = v7;
      uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v25 count:16];
      if (v9)
      {
        uint64_t v10 = *(void *)v18;
        do
        {
          for (uint64_t i = 0; i != v9; ++i)
          {
            if (*(void *)v18 != v10) {
              objc_enumerationMutation(v8);
            }
            uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
            if (IMOSLoggingEnabled())
            {
              long long v13 = OSLogHandleForIMFoundationCategory();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)long long buf = 138412546;
                __int16 v22 = v5;
                __int16 v23 = 2112;
                uint64_t v24 = v12;
                _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Found chat for messageID: %@   chat: %@", buf, 0x16u);
              }
            }
            if (v12)
            {
              id v14 = *(void **)(a1 + 40);
              long long v15 = objc_msgSend(MEMORY[0x1E4F1C9C8], "__im_dateWithCurrentServerTime");
              v16[0] = MEMORY[0x1E4F143A8];
              v16[1] = 3221225472;
              v16[2] = sub_1D982AF0C;
              v16[3] = &unk_1E6B73268;
              void v16[4] = v12;
              sub_1D9817F94(v14, v12, v5, 1u, v15, v16);
            }
          }
          uint64_t v9 = [v8 countByEnumeratingWithState:&v17 objects:v25 count:16];
        }
        while (v9);
      }
    }
  }
}

void sub_1D982AF0C(uint64_t a1)
{
  id v2 = +[IMDChatRegistry sharedInstance];
  [v2 updateStateForChat:*(void *)(a1 + 32) hintMessage:0 shouldRebuildFailedMessageDate:0 shouldCalculateUnreadCount:1];
}

void sub_1D982B150(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v16 = a4;
    uint64_t v6 = [v5 lastMessage];
    long long v7 = [v6 guid];
    id v8 = [*(id *)(a1 + 40) guid];
    int v9 = [v7 isEqualToString:v8];

    if (v9)
    {
      uint64_t v10 = +[IMDChatRegistry sharedInstance];
      [v10 updateLastMessageForChat:*(void *)(a1 + 32) hintMessage:0];
    }
    uint64_t v11 = objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 80);
    long long v15 = [*(id *)(a1 + 32) chatProperties];
    [v11 account:v12 chat:v13 style:v14 chatProperties:v15 messageUpdated:v16];

    (*(void (**)(void))(*(void *)(a1 + 72) + 16))();
  }
}

void sub_1D982B448(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  if (a2)
  {
    uint64_t v5 = *(void **)(a1 + 32);
    id v6 = a4;
    long long v7 = [v5 lastMessage];
    id v8 = [v7 guid];
    int v9 = [*(id *)(a1 + 40) guid];
    int v10 = [v8 isEqualToString:v9];

    if (v10)
    {
      uint64_t v11 = +[IMDChatRegistry sharedInstance];
      [v11 updateLastMessageForChat:*(void *)(a1 + 32) hintMessage:0];
    }
    objc_msgSend(*(id *)(a1 + 48), "broadcasterForChatListenersWithBlackholeStatus:", objc_msgSend(*(id *)(a1 + 32), "isBlackholed"));
    id v16 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v12 = *(void *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    uint64_t v14 = *(unsigned __int8 *)(a1 + 72);
    long long v15 = [*(id *)(a1 + 32) chatProperties];
    [v16 account:v12 chat:v13 style:v14 chatProperties:v15 messageUpdated:v6];
  }
}

uint64_t sub_1D982C440(uint64_t a1, void *a2)
{
  return [a2 ID];
}

uint64_t sub_1D982CCEC(uint64_t a1, void *a2)
{
  return [a2 objectForKeyedSubscript:*MEMORY[0x1E4F6C5C8]];
}

void sub_1D982D224(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D982D1A4);
  }
  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D982D2A4(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_1D982D698(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6)
{
  uint64_t v15 = *MEMORY[0x1E4F143B8];
  id v8 = a6;
  id v9 = a5;
  int v10 = IMLogHandleForCategory();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v13 = 138412290;
    uint64_t v14 = v11;
    _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Executing NOOP command handler for command: %@", (uint8_t *)&v13, 0xCu);
  }

  uint64_t v12 = [v9 service];

  [v12 sendAckForMessageWithContext:v8];
}

void *sub_1D982D78C(void *a1)
{
  uint64_t v1 = (void *)[a1 mutableCopy];
  uint64_t v2 = *MEMORY[0x1E4F6B020];
  uint64_t v3 = [v1 objectForKey:*MEMORY[0x1E4F6B020]];
  uint64_t v4 = [v3 length];

  if (v4)
  {
    uint64_t v5 = NSString;
    id v6 = [v1 objectForKey:v2];
    long long v7 = objc_msgSend(v5, "stringWithFormat:", @"<data of length %lu>", objc_msgSend(v6, "length"));

    [v1 setObject:v7 forKey:v2];
  }
  return v1;
}

uint64_t sub_1D982D898()
{
  qword_1EBE2BCE8 = objc_alloc_init(IMDRelayPushHandler);

  return MEMORY[0x1F41817F8]();
}

void sub_1D982DBAC()
{
  dispatch_queue_t v0 = (void *)MEMORY[0x1E016A370]();
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  uint64_t v2 = [NSNumber numberWithInteger:140];
  [v1 setObject:&unk_1F3391D20 forKey:v2];

  uint64_t v3 = [NSNumber numberWithInteger:141];
  [v1 setObject:&unk_1F3391D40 forKey:v3];

  uint64_t v4 = [NSNumber numberWithInteger:143];
  [v1 setObject:&unk_1F3391D60 forKey:v4];

  uint64_t v5 = [NSNumber numberWithInteger:144];
  [v1 setObject:&unk_1F3391D80 forKey:v5];

  id v6 = [NSNumber numberWithInteger:146];
  [v1 setObject:&unk_1F3391DA0 forKey:v6];

  long long v7 = [NSNumber numberWithInteger:101];
  [v1 setObject:&unk_1F3391DC0 forKey:v7];

  id v8 = [NSNumber numberWithInteger:147];
  [v1 setObject:&unk_1F3391DE0 forKey:v8];

  id v9 = [NSNumber numberWithInteger:102];
  [v1 setObject:&unk_1F3391E00 forKey:v9];

  int v10 = [NSNumber numberWithInteger:149];
  [v1 setObject:&unk_1F3391E20 forKey:v10];

  uint64_t v11 = [NSNumber numberWithInteger:142];
  [v1 setObject:&unk_1F3391E40 forKey:v11];

  uint64_t v12 = [NSNumber numberWithInteger:148];
  [v1 setObject:&unk_1F3391E60 forKey:v12];

  int v13 = [NSNumber numberWithInteger:181];
  [v1 setObject:&unk_1F3391E80 forKey:v13];

  uint64_t v14 = [NSNumber numberWithInteger:182];
  [v1 setObject:&unk_1F3391EA0 forKey:v14];

  uint64_t v15 = [NSNumber numberWithInteger:145];
  [v1 setObject:&unk_1F3391EC0 forKey:v15];

  id v16 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v17 = [v16 isSMSFilterSyncEnabled];

  if (v17)
  {
    long long v18 = [NSNumber numberWithInteger:139];
    [v1 setObject:&unk_1F3391EE0 forKey:v18];
  }
  long long v19 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v20 = [v19 isLazuliEnabled];

  if (v20)
  {
    __int16 v21 = [NSNumber numberWithInteger:190];
    [v1 setObject:&unk_1F3391F00 forKey:v21];
  }
  __int16 v22 = (void *)qword_1EBE2BB80;
  qword_1EBE2BB80 = (uint64_t)v1;
}

void sub_1D982DF1C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  uint64_t v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayMessage", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incoming Message", buf, 2u);
    }
  }
  uint64_t v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    int v17 = (void *)MEMORY[0x1E4F1C9B8];
    long long v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    int v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  long long v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  int v20 = 0;
LABEL_11:
  __int16 v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  __int16 v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D982E3FC;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

id sub_1D982E340(uint64_t a1, void *a2, void *a3)
{
  id v4 = a3;
  uint64_t v5 = [a2 objectForKey:v4];
  if (objc_opt_isKindOfClass())
  {
    id v6 = v5;
  }
  else
  {
    if (v5)
    {
      long long v7 = [MEMORY[0x1E4F6C3B8] registration];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT)) {
        sub_1D9904E18();
      }
    }
    id v6 = 0;
  }

  return v6;
}

void sub_1D982E3FC(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = a2;
  uint64_t v29 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v33;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v33 != v28) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v32 + 1) + 8 * v3);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v26 = *(void *)(a1 + 40);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v5 = objc_opt_class();
          id v31 = sub_1D982E340(v5, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v6 = objc_opt_class();
          long long v7 = sub_1D982E340(v6, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          id v8 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            int v10 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v11 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v12 = [v10 _IDSDataFromBase64String:v11];
            __int16 v23 = (void *)v12;
            id v25 = (void *)v11;
            goto LABEL_14;
          }
          uint64_t v14 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
            char v30 = (void *)v14;
            uint64_t v22 = (void *)v12;
LABEL_14:
            char v15 = isKindOfClass ^ 1;
          }
          else
          {
            char v15 = 0;
            uint64_t v12 = 0;
            char v30 = (void *)v14;
          }
          uint64_t v16 = objc_opt_class();
          int v17 = sub_1D982E340(v16, *(void **)(a1 + 48), @"e");
          uint64_t v18 = objc_opt_class();
          uint64_t v19 = sub_1D982E340(v18, *(void **)(a1 + 48), @"H");
          [v4 handler:v27 incomingPlainTextMessage:v26 toIdentifier:v31 fromIdentifier:v7 fromToken:v12 timeStamp:v17 storageContext:v19];

          if (v15) {
          int v20 = v30;
          }
          if (isKindOfClass)
          {

            int v20 = v25;
          }

          goto LABEL_21;
        }
        id v13 = IMLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          __int16 v21 = NSStringFromSelector(sel_handler_incomingPlainTextMessage_toIdentifier_fromIdentifier_fromToken_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          id v37 = v21;
          __int16 v38 = 2112;
          uint64_t v39 = v4;
          _os_log_debug_impl(&dword_1D967A000, v13, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v3;
      }
      while (v29 != v3);
      uint64_t v29 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v29);
  }
}

void sub_1D982E8A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  uint64_t v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayDownloadRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incoming Downlaod Message", buf, 2u);
    }
  }
  char v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    int v17 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    int v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  int v20 = 0;
LABEL_11:
  __int16 v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  __int16 v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D982ECC4;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D982ECC4(uint64_t a1, void *a2)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id obj = a2;
  uint64_t v29 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v29)
  {
    uint64_t v28 = *(void *)v33;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v33 != v28) {
          objc_enumerationMutation(obj);
        }
        id v4 = *(void **)(*((void *)&v32 + 1) + 8 * v3);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v26 = *(void *)(a1 + 40);
          uint64_t v27 = *(void *)(a1 + 32);
          uint64_t v5 = objc_opt_class();
          id v31 = sub_1D982E340(v5, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v6 = objc_opt_class();
          long long v7 = sub_1D982E340(v6, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          id v8 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            int v10 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v11 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v12 = [v10 _IDSDataFromBase64String:v11];
            __int16 v23 = (void *)v12;
            id v25 = (void *)v11;
            goto LABEL_14;
          }
          uint64_t v14 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
            char v30 = (void *)v14;
            uint64_t v22 = (void *)v12;
LABEL_14:
            char v15 = isKindOfClass ^ 1;
          }
          else
          {
            char v15 = 0;
            uint64_t v12 = 0;
            char v30 = (void *)v14;
          }
          uint64_t v16 = objc_opt_class();
          int v17 = sub_1D982E340(v16, *(void **)(a1 + 48), @"e");
          uint64_t v18 = objc_opt_class();
          uint64_t v19 = sub_1D982E340(v18, *(void **)(a1 + 48), @"H");
          [v4 handler:v27 incomingDownloadMessage:v26 toIdentifier:v31 fromIdentifier:v7 fromToken:v12 timeStamp:v17 storageContext:v19];

          if (v15) {
          int v20 = v30;
          }
          if (isKindOfClass)
          {

            int v20 = v25;
          }

          goto LABEL_21;
        }
        id v13 = IMLogHandleForCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        {
          __int16 v21 = NSStringFromSelector(sel_handler_incomingDownloadMessage_toIdentifier_fromIdentifier_fromToken_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          id v37 = v21;
          __int16 v38 = 2112;
          uint64_t v39 = v4;
          _os_log_debug_impl(&dword_1D967A000, v13, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v3;
      }
      while (v29 != v3);
      uint64_t v29 = [obj countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v29);
  }
}

void sub_1D982F168(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a3;
  id v32 = a4;
  id v16 = a5;
  id v29 = a6;
  id v30 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v31 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelaySendRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v31, &state);
  if (IMOSLoggingEnabled())
  {
    int v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Using Block Outgoing Message", buf, 2u);
    }
  }
  char v28 = a8;
  uint64_t v18 = [v16 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    int v20 = (void *)MEMORY[0x1E4F1C9B8];
    __int16 v21 = [v16 objectForKey:@"U"];
    uint64_t v22 = [v20 _IDSDataFromBase64String:v21];
LABEL_9:
    __int16 v23 = (void *)v22;
    char v27 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  __int16 v21 = [v16 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v22 = [v16 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v27 = 0;
  __int16 v23 = 0;
LABEL_11:
  char v24 = JWUUIDPushObjectToString();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = sub_1D982E340(v25, v16, (void *)qword_1EA8C7C70);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = sub_1D982F5CC;
  v33[3] = &unk_1E6B77A58;
  id v34 = v14;
  id v35 = v32;
  id v36 = v16;
  char v37 = v28;
  [v34 _calculateHandlersForMessage:v35 messageGUID:v24 fromIdentifier:v26 command:v15 completionBlock:v33];

  if (v27) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D982F5CC(uint64_t a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v49;
    uint64_t v33 = *(void *)v49;
    do
    {
      uint64_t v5 = 0;
      uint64_t v34 = v3;
      do
      {
        if (*(void *)v49 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v48 + 1) + 8 * v5);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v39 = *(void *)(a1 + 40);
          uint64_t v40 = *(void *)(a1 + 32);
          uint64_t v7 = objc_opt_class();
          id v45 = sub_1D982E340(v7, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v8 = objc_opt_class();
          id v44 = sub_1D982E340(v8, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          uint64_t v46 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            id v9 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v43 = [v9 _IDSDataFromBase64String:v10];
            id v32 = (void *)v43;
            char v37 = (void *)v10;
            goto LABEL_14;
          }
          uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v43 = [*(id *)(a1 + 48) objectForKey:@"t"];
            __int16 v42 = (void *)v12;
            id v30 = (void *)v43;
LABEL_14:
            char v38 = isKindOfClass ^ 1;
          }
          else
          {
            char v38 = 0;
            __int16 v42 = (void *)v12;
            uint64_t v43 = 0;
          }
          id v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            id v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            id v31 = [v15 _IDSDataFromBase64String:v16];
            id v36 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            id v29 = v41 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            uint64_t v41 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          uint64_t v20 = objc_opt_class();
          __int16 v21 = sub_1D982E340(v20, *(void **)(a1 + 48), @"e");
          int v22 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v23 = objc_opt_class();
          char v24 = sub_1D982E340(v23, *(void **)(a1 + 48), @"H");
          LOBYTE(v28) = v22 != 0;
          [v6 handler:v40 outgoingPlainTextMessage:v39 toIdentifier:v45 fromIdentifier:v44 fromToken:v43 messageGUID:v19 timeStamp:v21 isBeingReplayed:v28 storageContext:v24];

          uint64_t v4 = v33;
          uint64_t v3 = v34;

          if (v18) {
          uint64_t v25 = v41;
          }
          if (v14)
          {

            uint64_t v25 = v36;
          }

          if (v38) {
          uint64_t v26 = v42;
          }
          if (isKindOfClass)
          {

            uint64_t v26 = v37;
          }

          goto LABEL_31;
        }
        uint64_t v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          char v27 = NSStringFromSelector(sel_handler_outgoingPlainTextMessage_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_isBeingReplayed_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          int v53 = v27;
          __int16 v54 = 2112;
          uint64_t v55 = v6;
          _os_log_debug_impl(&dword_1D967A000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
    }
    while (v3);
  }
}

void sub_1D982FBC0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a3;
  id v32 = a4;
  id v16 = a5;
  id v29 = a6;
  id v30 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v31 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelaySendDownloadRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v31, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v17 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Using Block Outgoing Download Message", buf, 2u);
    }
  }
  char v28 = a8;
  char v18 = [v16 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v20 = (void *)MEMORY[0x1E4F1C9B8];
    __int16 v21 = [v16 objectForKey:@"U"];
    uint64_t v22 = [v20 _IDSDataFromBase64String:v21];
LABEL_9:
    uint64_t v23 = (void *)v22;
    char v27 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  __int16 v21 = [v16 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v22 = [v16 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v27 = 0;
  uint64_t v23 = 0;
LABEL_11:
  char v24 = JWUUIDPushObjectToString();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = sub_1D982E340(v25, v16, (void *)qword_1EA8C7C70);
  v33[0] = MEMORY[0x1E4F143A8];
  v33[1] = 3221225472;
  void v33[2] = sub_1D9830024;
  v33[3] = &unk_1E6B77A58;
  id v34 = v14;
  id v35 = v32;
  id v36 = v16;
  char v37 = v28;
  [v34 _calculateHandlersForMessage:v35 messageGUID:v24 fromIdentifier:v26 command:v15 completionBlock:v33];

  if (v27) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9830024(uint64_t a1, void *a2)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  long long v48 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v49;
    uint64_t v33 = *(void *)v49;
    do
    {
      uint64_t v5 = 0;
      uint64_t v34 = v3;
      do
      {
        if (*(void *)v49 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v48 + 1) + 8 * v5);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v39 = *(void *)(a1 + 40);
          uint64_t v40 = *(void *)(a1 + 32);
          uint64_t v7 = objc_opt_class();
          id v45 = sub_1D982E340(v7, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v8 = objc_opt_class();
          id v44 = sub_1D982E340(v8, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          uint64_t v46 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            id v9 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v43 = [v9 _IDSDataFromBase64String:v10];
            id v32 = (void *)v43;
            char v37 = (void *)v10;
            goto LABEL_14;
          }
          uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v43 = [*(id *)(a1 + 48) objectForKey:@"t"];
            __int16 v42 = (void *)v12;
            id v30 = (void *)v43;
LABEL_14:
            char v38 = isKindOfClass ^ 1;
          }
          else
          {
            char v38 = 0;
            __int16 v42 = (void *)v12;
            uint64_t v43 = 0;
          }
          id v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            id v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            id v31 = [v15 _IDSDataFromBase64String:v16];
            id v36 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            id v29 = v41 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            uint64_t v41 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          uint64_t v20 = objc_opt_class();
          __int16 v21 = sub_1D982E340(v20, *(void **)(a1 + 48), @"e");
          int v22 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v23 = objc_opt_class();
          char v24 = sub_1D982E340(v23, *(void **)(a1 + 48), @"H");
          BYTE1(v28) = 0;
          LOBYTE(v28) = v22 != 0;
          objc_msgSend(v6, "handler:outgoingDownloadMessage:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:isBeingReplayed:isInProxyMode:storageContext:", v40, v39, v45, v44, v43, v19, v21, v28, v24);

          uint64_t v4 = v33;
          uint64_t v3 = v34;

          if (v18) {
          uint64_t v25 = v41;
          }
          if (v14)
          {

            uint64_t v25 = v36;
          }

          if (v38) {
          uint64_t v26 = v42;
          }
          if (isKindOfClass)
          {

            uint64_t v26 = v37;
          }

          goto LABEL_31;
        }
        uint64_t v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          char v27 = NSStringFromSelector(sel_handler_outgoingDownloadMessage_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_isBeingReplayed_isInProxyMode_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          int v53 = v27;
          __int16 v54 = 2112;
          uint64_t v55 = v6;
          _os_log_debug_impl(&dword_1D967A000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [obj countByEnumeratingWithState:&v48 objects:v56 count:16];
    }
    while (v3);
  }
}

void sub_1D983061C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v29 = a6;
  id v30 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v31 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelaySentReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v31, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Using Block Message Sent Message", buf, 2u);
    }
  }
  uint64_t v17 = [v14 objectForKeyedSubscript:IMDRelayMessageDictionaryInterworkedKey];
  char v28 = [v17 BOOLValue];

  char v18 = [v15 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v20 = (void *)MEMORY[0x1E4F1C9B8];
    __int16 v21 = [v15 objectForKey:@"U"];
    uint64_t v22 = [v20 _IDSDataFromBase64String:v21];
LABEL_9:
    uint64_t v23 = (void *)v22;
    char v27 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  __int16 v21 = [v15 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v22 = [v15 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v27 = 0;
  uint64_t v23 = 0;
LABEL_11:
  char v24 = JWUUIDPushObjectToString();
  uint64_t v25 = objc_opt_class();
  uint64_t v26 = sub_1D982E340(v25, v15, (void *)qword_1EA8C7C70);
  v32[0] = MEMORY[0x1E4F143A8];
  v32[1] = 3221225472;
  void v32[2] = sub_1D9830A8C;
  v32[3] = &unk_1E6B77A80;
  id v33 = v12;
  id v34 = v15;
  char v35 = v28;
  [v33 _calculateHandlersForMessage:v14 messageGUID:v24 fromIdentifier:v26 command:v13 completionBlock:v32];

  if (v27) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9830A8C(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v3)
  {
    uint64_t v30 = *(void *)v34;
    do
    {
      uint64_t v4 = 0;
      uint64_t v25 = v3;
      do
      {
        if (*(void *)v34 != v30) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v33 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v29 = *(void *)(a1 + 32);
          id v32 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v7 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v8 = [*(id *)(a1 + 40) objectForKey:@"U"];
            char v24 = [v7 _IDSDataFromBase64String:v8];
            char v27 = (void *)v8;
            goto LABEL_14;
          }
          uint64_t v10 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 40) objectForKey:@"U"];
            uint64_t v23 = v31 = (void *)v10;
LABEL_14:
            char v28 = isKindOfClass ^ 1;
          }
          else
          {
            char v28 = 0;
            id v31 = (void *)v10;
          }
          uint64_t v11 = JWUUIDPushObjectToString();
          int v12 = *(unsigned __int8 *)(a1 + 48);
          uint64_t v13 = objc_opt_class();
          id v14 = sub_1D982E340(v13, *(void **)(a1 + 40), (void *)qword_1EA8C7C68);
          uint64_t v15 = objc_opt_class();
          uint64_t v16 = sub_1D982E340(v15, *(void **)(a1 + 40), (void *)qword_1EA8C7C70);
          uint64_t v17 = objc_opt_class();
          char v18 = sub_1D982E340(v17, *(void **)(a1 + 40), @"e");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_1D982E340(v19, *(void **)(a1 + 40), @"H");
          [v5 handler:v29 messageIDSent:v11 wasInterworked:v12 != 0 toIdentifier:v14 fromIdentifier:v16 timeStamp:v18 storageContext:v20];

          uint64_t v3 = v25;
          if (v28) {

          }
          __int16 v21 = v31;
          if (isKindOfClass)
          {

            __int16 v21 = v27;
          }

          goto LABEL_21;
        }
        id v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = NSStringFromSelector(sel_handler_messageIDSent_wasInterworked_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v38 = v22;
          __int16 v39 = 2112;
          uint64_t v40 = v5;
          _os_log_debug_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v4;
      }
      while (v3 != v4);
      uint64_t v3 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v3);
  }
}

void sub_1D9830F48(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v27 = a2;
  id v28 = a3;
  id v29 = a4;
  id v12 = a5;
  id v25 = a6;
  id v26 = a7;
  uint64_t v13 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelaySentReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled())
  {
    id v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Message Delivered Message", buf, 2u);
    }
  }
  uint64_t v15 = [v12 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    char v18 = [v12 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v21 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  char v18 = [v12 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v12 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v12, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D9831340;
  v30[3] = &unk_1E6B73308;
  id v31 = v27;
  id v32 = v12;
  [v31 _calculateHandlersForMessage:v29 messageGUID:v22 fromIdentifier:v24 command:v28 completionBlock:v30];

  if (v21) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9831340(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = a2;
  uint64_t v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v30)
  {
    uint64_t v29 = *(void *)v34;
    *(void *)&long long v3 = 138412802;
    long long v23 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v34 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v33 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v28 = *(void *)(a1 + 32);
          id v32 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", @"U", v23);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v7 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v8 = [*(id *)(a1 + 40) objectForKey:@"U"];
            id v25 = [v7 _IDSDataFromBase64String:v8];
            id v27 = (void *)v8;
            goto LABEL_14;
          }
          uint64_t v10 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 40) objectForKey:@"U"];
            char v24 = v31 = (void *)v10;
LABEL_14:
            char v11 = isKindOfClass ^ 1;
          }
          else
          {
            char v11 = 0;
            id v31 = (void *)v10;
          }
          id v12 = JWUUIDPushObjectToString();
          uint64_t v13 = objc_opt_class();
          id v14 = sub_1D982E340(v13, *(void **)(a1 + 40), (void *)qword_1EA8C7C68);
          uint64_t v15 = objc_opt_class();
          uint64_t v16 = sub_1D982E340(v15, *(void **)(a1 + 40), (void *)qword_1EA8C7C70);
          uint64_t v17 = objc_opt_class();
          char v18 = sub_1D982E340(v17, *(void **)(a1 + 40), @"e");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_1D982E340(v19, *(void **)(a1 + 40), @"H");
          [v5 handler:v28 messageIDDelivered:v12 toIdentifier:v14 fromIdentifier:v16 timeStamp:v18 storageContext:v20];

          if (v11) {
          char v21 = v31;
          }
          if (isKindOfClass)
          {

            char v21 = v27;
          }

          goto LABEL_21;
        }
        id v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = NSStringFromSelector(sel_handler_messageIDDelivered_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v38 = v22;
          __int16 v39 = 2112;
          uint64_t v40 = v5;
          _os_log_debug_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v4;
      }
      while (v30 != v4);
      uint64_t v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v30);
  }
}

void sub_1D98317E4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v30 = a4;
  id v12 = a5;
  id v25 = a6;
  id v27 = a7;
  uint64_t v13 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayReadReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled())
  {
    id v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Outgoing Read Reciept Message", buf, 2u);
    }
  }
  uint64_t v15 = objc_msgSend(v12, "objectForKey:", @"U", v25);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    char v18 = [v12 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v21 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  char v18 = [v12 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v12 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v12, (void *)qword_1EA8C7C70);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = sub_1D9831BF4;
  v31[3] = &unk_1E6B77A30;
  id v32 = v28;
  id v33 = v12;
  id v34 = v30;
  [v32 _calculateHandlersForMessage:v34 messageGUID:v22 fromIdentifier:v24 command:v29 completionBlock:v31];

  if (v21) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9831BF4(uint64_t a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = a2;
  uint64_t v37 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v37)
  {
    uint64_t v36 = *(void *)v46;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v46 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v45 + 1) + 8 * v3);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v35 = *(void *)(a1 + 32);
          uint64_t v43 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v5 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v6 = [*(id *)(a1 + 40) objectForKey:@"U"];
            id v30 = [v5 _IDSDataFromBase64String:v6];
            id v33 = (void *)v6;
            goto LABEL_14;
          }
          uint64_t v8 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 40) objectForKey:@"U"];
            id v27 = v39 = (void *)v8;
LABEL_14:
            char v34 = isKindOfClass ^ 1;
          }
          else
          {
            char v34 = 0;
            __int16 v39 = (void *)v8;
          }
          uint64_t v42 = JWUUIDPushObjectToString();
          uint64_t v9 = objc_opt_class();
          uint64_t v41 = sub_1D982E340(v9, *(void **)(a1 + 40), @"e");
          uint64_t v10 = objc_opt_class();
          uint64_t v40 = sub_1D982E340(v10, *(void **)(a1 + 40), (void *)qword_1EA8C7C68);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 40), (void *)qword_1EA8C7C70);
          uint64_t v13 = [*(id *)(a1 + 40) objectForKey:@"t"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 40) objectForKey:@"t"];
            uint64_t v17 = [v15 _IDSDataFromBase64String:v16];
            id v29 = (void *)v17;
            id v32 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v18 = [*(id *)(a1 + 40) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v17 = [*(id *)(a1 + 40) objectForKey:@"t"];
            uint64_t v38 = (void *)v18;
            id v28 = (void *)v17;
LABEL_20:
            char v19 = v14 ^ 1;
          }
          else
          {
            char v19 = 0;
            uint64_t v17 = 0;
            uint64_t v38 = (void *)v18;
          }
          uint64_t v20 = [*(id *)(a1 + 48) objectForKey:IMDRelayMessageDictionaryForcedShowOnlyKey];
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_1D982E340(v21, *(void **)(a1 + 40), @"H");
          LOBYTE(v26) = v20 != 0;
          [v4 handler:v35 messageIDRead:v42 readByMe:1 timeStamp:v41 toIdentifier:v40 fromIdentifier:v12 fromToken:v17 reflectOnly:v26 storageContext:v22];

          if (v19) {
          uint64_t v23 = v38;
          }
          if (v14)
          {

            uint64_t v23 = v32;
          }

          if (v34) {
          char v24 = v39;
          }
          if (isKindOfClass)
          {

            char v24 = v33;
          }

          goto LABEL_31;
        }
        uint64_t v7 = IMLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          id v25 = NSStringFromSelector(sel_handler_messageIDRead_readByMe_timeStamp_toIdentifier_fromIdentifier_fromToken_reflectOnly_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          long long v50 = v25;
          __int16 v51 = 2112;
          unint64_t v52 = v4;
          _os_log_debug_impl(&dword_1D967A000, v7, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v3;
      }
      while (v37 != v3);
      uint64_t v37 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v37);
  }
}

void sub_1D9832200(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v30 = a4;
  id v12 = a5;
  id v25 = a6;
  id v27 = a7;
  uint64_t v13 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayReadReceipt", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incoming Read Reciept Message", buf, 2u);
    }
  }
  uint64_t v15 = objc_msgSend(v12, "objectForKey:", @"U", v25);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v18 = [v12 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v21 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v18 = [v12 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v12 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v12, (void *)qword_1EA8C7C70);
  v31[0] = MEMORY[0x1E4F143A8];
  v31[1] = 3221225472;
  v31[2] = sub_1D9832610;
  v31[3] = &unk_1E6B77A30;
  id v32 = v28;
  id v33 = v12;
  id v34 = v30;
  [v32 _calculateHandlersForMessage:v34 messageGUID:v22 fromIdentifier:v24 command:v29 completionBlock:v31];

  if (v21) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9832610(uint64_t a1, void *a2)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  id obj = a2;
  uint64_t v37 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
  if (v37)
  {
    uint64_t v36 = *(void *)v46;
    do
    {
      uint64_t v3 = 0;
      do
      {
        if (*(void *)v46 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v4 = *(void **)(*((void *)&v45 + 1) + 8 * v3);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v35 = *(void *)(a1 + 32);
          uint64_t v43 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v5 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v6 = [*(id *)(a1 + 40) objectForKey:@"U"];
            id v30 = [v5 _IDSDataFromBase64String:v6];
            id v33 = (void *)v6;
            goto LABEL_14;
          }
          uint64_t v8 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 40) objectForKey:@"U"];
            id v27 = v39 = (void *)v8;
LABEL_14:
            char v34 = isKindOfClass ^ 1;
          }
          else
          {
            char v34 = 0;
            __int16 v39 = (void *)v8;
          }
          uint64_t v42 = JWUUIDPushObjectToString();
          uint64_t v9 = objc_opt_class();
          uint64_t v41 = sub_1D982E340(v9, *(void **)(a1 + 40), @"e");
          uint64_t v10 = objc_opt_class();
          uint64_t v40 = sub_1D982E340(v10, *(void **)(a1 + 40), (void *)qword_1EA8C7C68);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 40), (void *)qword_1EA8C7C70);
          uint64_t v13 = [*(id *)(a1 + 40) objectForKey:@"t"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 40) objectForKey:@"t"];
            uint64_t v17 = [v15 _IDSDataFromBase64String:v16];
            id v29 = (void *)v17;
            id v32 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v18 = [*(id *)(a1 + 40) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v17 = [*(id *)(a1 + 40) objectForKey:@"t"];
            uint64_t v38 = (void *)v18;
            id v28 = (void *)v17;
LABEL_20:
            char v19 = v14 ^ 1;
          }
          else
          {
            char v19 = 0;
            uint64_t v17 = 0;
            uint64_t v38 = (void *)v18;
          }
          uint64_t v20 = [*(id *)(a1 + 48) objectForKey:IMDRelayMessageDictionaryForcedShowOnlyKey];
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_1D982E340(v21, *(void **)(a1 + 40), @"H");
          LOBYTE(v26) = v20 != 0;
          [v4 handler:v35 messageIDRead:v42 readByMe:0 timeStamp:v41 toIdentifier:v40 fromIdentifier:v12 fromToken:v17 reflectOnly:v26 storageContext:v22];

          if (v19) {
          uint64_t v23 = v38;
          }
          if (v14)
          {

            uint64_t v23 = v32;
          }

          if (v34) {
          char v24 = v39;
          }
          if (isKindOfClass)
          {

            char v24 = v33;
          }

          goto LABEL_31;
        }
        uint64_t v7 = IMLogHandleForCategory();
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        {
          id v25 = NSStringFromSelector(sel_handler_messageIDRead_readByMe_timeStamp_toIdentifier_fromIdentifier_fromToken_reflectOnly_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          long long v50 = v25;
          __int16 v51 = 2112;
          unint64_t v52 = v4;
          _os_log_debug_impl(&dword_1D967A000, v7, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v3;
      }
      while (v37 != v3);
      uint64_t v37 = [obj countByEnumeratingWithState:&v45 objects:v53 count:16];
    }
    while (v37);
  }
}

void sub_1D9832C1C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  id v27 = a2;
  id v28 = a3;
  id v29 = a4;
  id v12 = a5;
  id v25 = a6;
  id v26 = a7;
  uint64_t v13 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayFailure", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  os_activity_scope_enter(v13, &state);
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Message Failures Message", buf, 2u);
    }
  }
  uint64_t v15 = [v12 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v18 = [v12 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v21 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v18 = [v12 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v12 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v21 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v12, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D9833014;
  v30[3] = &unk_1E6B73308;
  id v31 = v27;
  id v32 = v12;
  [v31 _calculateHandlersForMessage:v29 messageGUID:v22 fromIdentifier:v24 command:v28 completionBlock:v30];

  if (v21) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9833014(uint64_t a1, void *a2)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  id obj = a2;
  uint64_t v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
  if (v30)
  {
    uint64_t v29 = *(void *)v34;
    *(void *)&long long v3 = 138412802;
    long long v23 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v34 != v29) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v33 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v28 = *(void *)(a1 + 32);
          id v32 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", @"U", v23);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v7 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v8 = [*(id *)(a1 + 40) objectForKey:@"U"];
            id v25 = [v7 _IDSDataFromBase64String:v8];
            id v27 = (void *)v8;
            goto LABEL_14;
          }
          uint64_t v10 = [*(id *)(a1 + 40) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 40) objectForKey:@"U"];
            char v24 = v31 = (void *)v10;
LABEL_14:
            char v11 = isKindOfClass ^ 1;
          }
          else
          {
            char v11 = 0;
            id v31 = (void *)v10;
          }
          id v12 = JWUUIDPushObjectToString();
          uint64_t v13 = objc_opt_class();
          char v14 = sub_1D982E340(v13, *(void **)(a1 + 40), (void *)qword_1EA8C7C68);
          uint64_t v15 = objc_opt_class();
          uint64_t v16 = sub_1D982E340(v15, *(void **)(a1 + 40), (void *)qword_1EA8C7C70);
          uint64_t v17 = objc_opt_class();
          uint64_t v18 = sub_1D982E340(v17, *(void **)(a1 + 40), @"e");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_1D982E340(v19, *(void **)(a1 + 40), @"H");
          [v5 handler:v28 messageIDSendFailure:v12 toIdentifier:v14 fromIdentifier:v16 timeStamp:v18 storageContext:v20];

          if (v11) {
          char v21 = v31;
          }
          if (isKindOfClass)
          {

            char v21 = v27;
          }

          goto LABEL_21;
        }
        uint64_t v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = NSStringFromSelector(sel_handler_messageIDSendFailure_toIdentifier_fromIdentifier_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v38 = v22;
          __int16 v39 = 2112;
          uint64_t v40 = v5;
          _os_log_debug_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v4;
      }
      while (v30 != v4);
      uint64_t v30 = [obj countByEnumeratingWithState:&v33 objects:v41 count:16];
    }
    while (v30);
  }
}

void sub_1D98334B8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  id v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayPinCode", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incomming Display Pin Code ", buf, 2u);
    }
  }
  uint64_t v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  uint64_t v20 = 0;
LABEL_11:
  char v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  long long v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D98338DC;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D98338DC(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = a2;
  uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v47;
    *(void *)&long long v3 = 138412802;
    long long v27 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v47 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v46 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v36 = *(void *)(a1 + 40);
          uint64_t v37 = *(void *)(a1 + 32);
          uint64_t v6 = objc_opt_class();
          uint64_t v43 = sub_1D982E340(v6, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v7 = objc_opt_class();
          uint64_t v42 = sub_1D982E340(v7, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          id v44 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v8 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v9 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v10 = [v8 _IDSDataFromBase64String:v9];
            id v31 = (void *)v10;
            long long v34 = (void *)v9;
            goto LABEL_14;
          }
          uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v41 = (void *)v12;
            id v29 = (void *)v10;
LABEL_14:
            char v35 = isKindOfClass ^ 1;
          }
          else
          {
            char v35 = 0;
            uint64_t v10 = 0;
            uint64_t v41 = (void *)v12;
          }
          id v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            uint64_t v30 = [v15 _IDSDataFromBase64String:v16];
            id v33 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            id v28 = v40 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            uint64_t v40 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          uint64_t v20 = objc_opt_class();
          char v21 = sub_1D982E340(v20, *(void **)(a1 + 48), @"e");
          uint64_t v22 = objc_opt_class();
          long long v23 = sub_1D982E340(v22, *(void **)(a1 + 48), @"H");
          objc_msgSend(v5, "handler:incomingDisplayPinCode:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if (v18) {
          char v24 = v40;
          }
          if (v14)
          {

            char v24 = v33;
          }

          if (v35) {
          id v25 = v41;
          }
          if (isKindOfClass)
          {

            id v25 = v34;
          }

          goto LABEL_31;
        }
        char v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id v26 = NSStringFromSelector(sel_handler_incomingDisplayPinCode_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          __int16 v51 = v26;
          __int16 v52 = 2112;
          int v53 = v5;
          _os_log_debug_impl(&dword_1D967A000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
    }
    while (v39);
  }
}

void sub_1D9833EB8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayEnrollRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incomming Enroll Me Request", buf, 2u);
    }
  }
  uint64_t v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    char v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  char v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  uint64_t v20 = 0;
LABEL_11:
  char v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  long long v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D98342DC;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D98342DC(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = a2;
  uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v47;
    *(void *)&long long v3 = 138412802;
    long long v27 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v47 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v46 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v36 = *(void *)(a1 + 40);
          uint64_t v37 = *(void *)(a1 + 32);
          uint64_t v6 = objc_opt_class();
          uint64_t v43 = sub_1D982E340(v6, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v7 = objc_opt_class();
          uint64_t v42 = sub_1D982E340(v7, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          id v44 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v8 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v9 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v10 = [v8 _IDSDataFromBase64String:v9];
            id v31 = (void *)v10;
            long long v34 = (void *)v9;
            goto LABEL_14;
          }
          uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v41 = (void *)v12;
            id v29 = (void *)v10;
LABEL_14:
            char v35 = isKindOfClass ^ 1;
          }
          else
          {
            char v35 = 0;
            uint64_t v10 = 0;
            uint64_t v41 = (void *)v12;
          }
          id v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            uint64_t v30 = [v15 _IDSDataFromBase64String:v16];
            id v33 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            id v28 = v40 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            uint64_t v40 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          uint64_t v20 = objc_opt_class();
          char v21 = sub_1D982E340(v20, *(void **)(a1 + 48), @"e");
          uint64_t v22 = objc_opt_class();
          long long v23 = sub_1D982E340(v22, *(void **)(a1 + 48), @"H");
          objc_msgSend(v5, "handler:incomingEnrollMeRequest:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if (v18) {
          char v24 = v40;
          }
          if (v14)
          {

            char v24 = v33;
          }

          if (v35) {
          id v25 = v41;
          }
          if (isKindOfClass)
          {

            id v25 = v34;
          }

          goto LABEL_31;
        }
        char v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id v26 = NSStringFromSelector(sel_handler_incomingEnrollMeRequest_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          __int16 v51 = v26;
          __int16 v52 = 2112;
          int v53 = v5;
          _os_log_debug_impl(&dword_1D967A000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
    }
    while (v39);
  }
}

void sub_1D98348B8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v28 = a4;
  id v14 = a5;
  id v26 = a6;
  id v29 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayDeleteRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v37 = v14;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "_handleDeleteCommand: %@", buf, 0xCu);
    }
  }
  uint64_t v16 = [v14 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    char v18 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v19 = [v14 objectForKey:@"U"];
    uint64_t v20 = [v18 _IDSDataFromBase64String:v19];
LABEL_9:
    char v21 = (void *)v20;
    char v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v19 = [v14 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v20 = [v14 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v25 = 0;
  char v21 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v14, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D9834D2C;
  v30[3] = &unk_1E6B77AA8;
  id v31 = v12;
  id v32 = v28;
  id v33 = v14;
  id v34 = v29;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v22 fromIdentifier:v24 command:v13 completionBlock:v30];

  if (v25) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9834D2C(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = a2;
  uint64_t v34 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v40;
    *(void *)&long long v3 = 138412802;
    long long v25 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v40 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v39 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v31 = *(void *)(a1 + 40);
          uint64_t v32 = *(void *)(a1 + 32);
          uint64_t v6 = objc_opt_class();
          id v37 = sub_1D982E340(v6, *(void **)(a1 + 48), @"tP");
          uint64_t v7 = objc_opt_class();
          uint64_t v36 = sub_1D982E340(v7, *(void **)(a1 + 48), @"sP");
          uint64_t v38 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v9 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v11 = [v9 _IDSDataFromBase64String:v10];
            long long v27 = (void *)v11;
            id v29 = (void *)v10;
            goto LABEL_14;
          }
          uint64_t v13 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v11 = [*(id *)(a1 + 48) objectForKey:@"t"];
            char v35 = (void *)v13;
            id v26 = (void *)v11;
LABEL_14:
            char v30 = isKindOfClass ^ 1;
          }
          else
          {
            char v30 = 0;
            uint64_t v11 = 0;
            char v35 = (void *)v13;
          }
          uint64_t v14 = *(void *)(a1 + 56);
          uint64_t v15 = objc_opt_class();
          uint64_t v16 = sub_1D982E340(v15, *(void **)(a1 + 48), @"e");
          uint64_t v17 = objc_opt_class();
          char v18 = sub_1D982E340(v17, *(void **)(a1 + 48), @"D");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_1D982E340(v19, *(void **)(a1 + 48), @"Dc");
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_1D982E340(v21, *(void **)(a1 + 48), @"H");
          objc_msgSend(v5, "handler:deleteCommand:toIdentifier:fromIdentifier:fromToken:fromIDSID:timeStamp:needsDeliveryReceipt:deliveryContext:storageContext:", v32, v31, v37, v36, v11, v14, v16, v18, v20, v22, v25);

          if (v30) {
          uint64_t v23 = v35;
          }
          if (isKindOfClass)
          {

            uint64_t v23 = v29;
          }

          goto LABEL_21;
        }
        id v12 = IMLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          char v24 = NSStringFromSelector(sel_handler_deleteCommand_toIdentifier_fromIdentifier_fromToken_fromIDSID_timeStamp_needsDeliveryReceipt_deliveryContext_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          id v44 = v24;
          __int16 v45 = 2112;
          long long v46 = v5;
          _os_log_debug_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v4;
      }
      while (v34 != v4);
      uint64_t v34 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
    }
    while (v34);
  }
}

void sub_1D9835234(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v28 = a4;
  id v14 = a5;
  id v26 = a6;
  id v29 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayDeleteRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v37 = v14;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "_handleRecoverCommand: %@", buf, 0xCu);
    }
  }
  uint64_t v16 = [v14 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    char v18 = (void *)MEMORY[0x1E4F1C9B8];
    uint64_t v19 = [v14 objectForKey:@"U"];
    uint64_t v20 = [v18 _IDSDataFromBase64String:v19];
LABEL_9:
    uint64_t v21 = (void *)v20;
    char v25 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  uint64_t v19 = [v14 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v20 = [v14 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v25 = 0;
  uint64_t v21 = 0;
LABEL_11:
  uint64_t v22 = JWUUIDPushObjectToString();
  uint64_t v23 = objc_opt_class();
  char v24 = sub_1D982E340(v23, v14, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D98356A8;
  v30[3] = &unk_1E6B77AA8;
  id v31 = v12;
  id v32 = v28;
  id v33 = v14;
  id v34 = v29;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v22 fromIdentifier:v24 command:v13 completionBlock:v30];

  if (v25) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D98356A8(uint64_t a1, void *a2)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  id obj = a2;
  uint64_t v34 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v40;
    *(void *)&long long v3 = 138412802;
    long long v25 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v40 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v39 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v31 = *(void *)(a1 + 40);
          uint64_t v32 = *(void *)(a1 + 32);
          uint64_t v6 = objc_opt_class();
          id v37 = sub_1D982E340(v6, *(void **)(a1 + 48), @"tP");
          uint64_t v7 = objc_opt_class();
          uint64_t v36 = sub_1D982E340(v7, *(void **)(a1 + 48), @"sP");
          uint64_t v38 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v9 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v11 = [v9 _IDSDataFromBase64String:v10];
            long long v27 = (void *)v11;
            id v29 = (void *)v10;
            goto LABEL_14;
          }
          uint64_t v13 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v11 = [*(id *)(a1 + 48) objectForKey:@"t"];
            char v35 = (void *)v13;
            id v26 = (void *)v11;
LABEL_14:
            char v30 = isKindOfClass ^ 1;
          }
          else
          {
            char v30 = 0;
            uint64_t v11 = 0;
            char v35 = (void *)v13;
          }
          uint64_t v14 = *(void *)(a1 + 56);
          uint64_t v15 = objc_opt_class();
          uint64_t v16 = sub_1D982E340(v15, *(void **)(a1 + 48), @"e");
          uint64_t v17 = objc_opt_class();
          char v18 = sub_1D982E340(v17, *(void **)(a1 + 48), @"D");
          uint64_t v19 = objc_opt_class();
          uint64_t v20 = sub_1D982E340(v19, *(void **)(a1 + 48), @"Dc");
          uint64_t v21 = objc_opt_class();
          uint64_t v22 = sub_1D982E340(v21, *(void **)(a1 + 48), @"H");
          objc_msgSend(v5, "handler:recoverCommand:toIdentifier:fromIdentifier:fromToken:fromIDSID:timeStamp:needsDeliveryReceipt:deliveryContext:storageContext:", v32, v31, v37, v36, v11, v14, v16, v18, v20, v22, v25);

          if (v30) {
          uint64_t v23 = v35;
          }
          if (isKindOfClass)
          {

            uint64_t v23 = v29;
          }

          goto LABEL_21;
        }
        id v12 = IMLogHandleForCategory();
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          char v24 = NSStringFromSelector(sel_handler_recoverCommand_toIdentifier_fromIdentifier_fromToken_fromIDSID_timeStamp_needsDeliveryReceipt_deliveryContext_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          id v44 = v24;
          __int16 v45 = 2112;
          long long v46 = v5;
          _os_log_debug_impl(&dword_1D967A000, v12, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v4;
      }
      while (v34 != v4);
      uint64_t v34 = [obj countByEnumeratingWithState:&v39 objects:v47 count:16];
    }
    while (v34);
  }
}

void sub_1D9835BB0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelayPinCodeApproval", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    uint64_t v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block Incomming pin Code Approval Response", buf, 2u);
    }
  }
  uint64_t v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    char v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  char v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  uint64_t v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D9835FD4;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D9835FD4(uint64_t a1, void *a2)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  long long v46 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  id obj = a2;
  uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
  if (v39)
  {
    uint64_t v38 = *(void *)v47;
    *(void *)&long long v3 = 138412802;
    long long v27 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v47 != v38) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v46 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v36 = *(void *)(a1 + 40);
          uint64_t v37 = *(void *)(a1 + 32);
          uint64_t v6 = objc_opt_class();
          uint64_t v43 = sub_1D982E340(v6, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v7 = objc_opt_class();
          long long v42 = sub_1D982E340(v7, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          id v44 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v8 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v9 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v10 = [v8 _IDSDataFromBase64String:v9];
            id v31 = (void *)v10;
            uint64_t v34 = (void *)v9;
            goto LABEL_14;
          }
          uint64_t v12 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
            long long v41 = (void *)v12;
            id v29 = (void *)v10;
LABEL_14:
            char v35 = isKindOfClass ^ 1;
          }
          else
          {
            char v35 = 0;
            uint64_t v10 = 0;
            long long v41 = (void *)v12;
          }
          id v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            char v30 = [v15 _IDSDataFromBase64String:v16];
            id v33 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            id v28 = v40 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            long long v40 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          uint64_t v20 = objc_opt_class();
          uint64_t v21 = sub_1D982E340(v20, *(void **)(a1 + 48), @"e");
          uint64_t v22 = objc_opt_class();
          uint64_t v23 = sub_1D982E340(v22, *(void **)(a1 + 48), @"H");
          objc_msgSend(v5, "handler:incomingResponseForApproval:toIdentifier:fromIdentifier:fromToken:messageGUID:timeStamp:storageContext:", v37, v36, v43, v42, v10, v19, v21, v23, v27);

          if (v18) {
          char v24 = v40;
          }
          if (v14)
          {

            char v24 = v33;
          }

          if (v35) {
          id v25 = v41;
          }
          if (isKindOfClass)
          {

            id v25 = v34;
          }

          goto LABEL_31;
        }
        uint64_t v11 = IMLogHandleForCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        {
          id v26 = NSStringFromSelector(sel_handler_incomingResponseForApproval_toIdentifier_fromIdentifier_fromToken_messageGUID_timeStamp_storageContext_);
          *(_DWORD *)long long buf = 138412546;
          __int16 v51 = v26;
          __int16 v52 = 2112;
          int v53 = v5;
          _os_log_debug_impl(&dword_1D967A000, v11, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v4;
      }
      while (v39 != v4);
      uint64_t v39 = [obj countByEnumeratingWithState:&v46 objects:v54 count:16];
    }
    while (v39);
  }
}

void sub_1D98365B0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v28 = a2;
  id v29 = a3;
  id v12 = a4;
  id v13 = a5;
  id v25 = a6;
  id v26 = a7;
  state.opaque[0] = 0;
  state.opaque[1] = 0;
  long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.SMSReceivedRelaySMSFilteringSettings", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, &state);
  if (IMOSLoggingEnabled())
  {
    char v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Using Block SMS Filtering Settings", buf, 2u);
    }
  }
  uint64_t v15 = [v13 objectForKey:@"U"];
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass)
  {
    uint64_t v17 = (void *)MEMORY[0x1E4F1C9B8];
    char v18 = [v13 objectForKey:@"U"];
    uint64_t v19 = [v17 _IDSDataFromBase64String:v18];
LABEL_9:
    uint64_t v20 = (void *)v19;
    char v24 = isKindOfClass ^ 1;
    goto LABEL_11;
  }
  char v18 = [v13 objectForKey:@"U"];
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v19 = [v13 objectForKey:@"U"];
    goto LABEL_9;
  }
  char v24 = 0;
  uint64_t v20 = 0;
LABEL_11:
  uint64_t v21 = JWUUIDPushObjectToString();
  uint64_t v22 = objc_opt_class();
  uint64_t v23 = sub_1D982E340(v22, v13, (void *)qword_1EA8C7C70);
  v30[0] = MEMORY[0x1E4F143A8];
  v30[1] = 3221225472;
  v30[2] = sub_1D98369D4;
  v30[3] = &unk_1E6B77A30;
  id v31 = v28;
  id v32 = v12;
  id v33 = v13;
  [v31 _calculateHandlersForMessage:v32 messageGUID:v21 fromIdentifier:v23 command:v29 completionBlock:v30];

  if (v24) {
  if (isKindOfClass)
  }

  os_activity_scope_leave(&state);
}

void sub_1D98369D4(uint64_t a1, void *a2)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
  if (v3)
  {
    uint64_t v25 = *(void *)v28;
    *(void *)&long long v4 = 138412802;
    long long v20 = v4;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v28 != v25) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v27 + 1) + 8 * v5);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v7 = v3;
          uint64_t v8 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v10 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", @"t", v20);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            id v12 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v13 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v14 = [v12 _IDSDataFromBase64String:v13];
            uint64_t v22 = (void *)v14;
            char v24 = (void *)v13;
            goto LABEL_14;
          }
          uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v14 = [*(id *)(a1 + 48) objectForKey:@"t"];
            id v26 = (void *)v16;
            uint64_t v21 = (void *)v14;
LABEL_14:
            char v17 = isKindOfClass ^ 1;
          }
          else
          {
            char v17 = 0;
            uint64_t v14 = 0;
            id v26 = (void *)v16;
          }
          [v6 handler:v8 incomingSMSFilteringSettingsMessage:v9 fromToken:v14];
          uint64_t v3 = v7;
          if (v17) {

          }
          char v18 = v26;
          if (isKindOfClass)
          {

            char v18 = v24;
          }

          goto LABEL_21;
        }
        uint64_t v15 = IMLogHandleForCategory();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v19 = NSStringFromSelector(sel_handler_incomingSMSFilteringSettingsMessage_fromToken_);
          *(_DWORD *)long long buf = 138412546;
          id v32 = v19;
          __int16 v33 = 2112;
          uint64_t v34 = v6;
          _os_log_debug_impl(&dword_1D967A000, v15, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_21:
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [obj countByEnumeratingWithState:&v27 objects:v35 count:16];
    }
    while (v3);
  }
}

void sub_1D9836DC0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  id v63 = a2;
  id v62 = a3;
  id v12 = a4;
  id v65 = a5;
  id v60 = a6;
  id v61 = a7;
  uint64_t v13 = [v12 objectForKeyedSubscript:@"C"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
LABEL_5:
    id v64 = [v12 objectForKeyedSubscript:@"D"];
    id v77 = 0;
    uint64_t v15 = +[IMDRelayGroupMutationMessage mutationMessageFromData:v64 error:&v77];
    uint64_t v16 = v77;
    if (v16 || !v15)
    {
      char v17 = v15;
      uint64_t v15 = v16;
LABEL_33:

      goto LABEL_34;
    }
    char v17 = _os_activity_create(&dword_1D967A000, "com.apple.messages.ReceivedRelayGroupMutation", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
    state.opaque[0] = 0;
    state.opaque[1] = 0;
    os_activity_scope_enter(v17, &state);
    if (IMOSLoggingEnabled())
    {
      char v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Using Block relay group mutation", buf, 2u);
      }
    }
    uint64_t v19 = [v15 service];
    long long v20 = [v63 _handlerForServiceName:v19];

    if ((objc_opt_respondsToSelector() & 1) == 0)
    {
LABEL_32:

      os_activity_scope_leave(&state);
      goto LABEL_33;
    }
    uint64_t v21 = objc_opt_class();
    uint64_t v55 = sub_1D982E340(v21, v65, @"e");
    uint64_t v22 = objc_opt_class();
    int v53 = sub_1D982E340(v22, v65, @"H");
    uint64_t v57 = [v65 objectForKey:@"t"];
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass)
    {
      char v24 = (void *)MEMORY[0x1E4F1C9B8];
      uint64_t v25 = [v65 objectForKey:@"t"];
      uint64_t v26 = [v24 _IDSDataFromBase64String:v25];
    }
    else
    {
      uint64_t v25 = [v65 objectForKey:@"t"];
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        char v41 = 0;
        long long v40 = 0;
        goto LABEL_27;
      }
      uint64_t v26 = [v65 objectForKey:@"t"];
    }
    long long v40 = (void *)v26;
    char v41 = isKindOfClass ^ 1;
LABEL_27:
    uint64_t v42 = objc_opt_class();
    uint64_t v43 = sub_1D982E340(v42, v65, (void *)qword_1EA8C7C70);
    LOBYTE(v52) = 0;
    [v20 handler:v63 incomingGroupMutationMessage:v15 timeStamp:v55 storageContext:v53 fromToken:v40 fromID:v43 isInProxyMode:v52];

    if (v41) {
    if (isKindOfClass)
    }

    goto LABEL_32;
  }
  int v14 = [v13 intValue];
  switch(v14)
  {
    case 2:
      id v64 = [v12 objectForKeyedSubscript:@"D"];
      id v70 = 0;
      char v17 = +[IMDRelayServiceReachabilityResponse responseFromData:v64 error:&v70];
      uint64_t v15 = v70;
      if (v15 || !v17) {
        goto LABEL_33;
      }
      __int16 v33 = v17;
      uint64_t v34 = _os_activity_create(&dword_1D967A000, "com.apple.messages.RelayReachabilityResponse", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      id v56 = v34;
      os_activity_scope_enter(v34, &state);
      char v35 = [v65 objectForKey:@"U"];
      objc_opt_class();
      char v36 = objc_opt_isKindOfClass();
      if (v36)
      {
        uint64_t v37 = (void *)MEMORY[0x1E4F1C9B8];
        uint64_t v38 = [v65 objectForKey:@"U"];
        uint64_t v39 = [v37 _IDSDataFromBase64String:v38];
      }
      else
      {
        uint64_t v38 = [v65 objectForKey:@"U"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          char v59 = 0;
          __int16 v45 = 0;
          goto LABEL_48;
        }
        uint64_t v39 = [v65 objectForKey:@"U"];
      }
      __int16 v45 = (void *)v39;
      char v59 = v36 ^ 1;
LABEL_48:
      long long v49 = JWUUIDPushObjectToString();
      uint64_t v50 = objc_opt_class();
      __int16 v51 = sub_1D982E340(v50, v65, (void *)qword_1EA8C7C70);
      v66[0] = MEMORY[0x1E4F143A8];
      v66[1] = 3221225472;
      v66[2] = sub_1D9837D10;
      v66[3] = &unk_1E6B77A30;
      id v67 = v63;
      uint64_t v15 = v33;
      __int16 v68 = v15;
      id v69 = v65;
      [v67 _calculateHandlersForMessage:v12 messageGUID:v49 fromIdentifier:v51 command:v62 completionBlock:v66];

      if (v59) {
      if (v36)
      }

      os_activity_scope_leave(&state);
      char v17 = v56;
      goto LABEL_33;
    case 1:
      id v64 = [v12 objectForKeyedSubscript:@"D"];
      id v75 = 0;
      char v17 = +[IMDRelayServiceReachabilityRequest requestFromData:v64 error:&v75];
      uint64_t v15 = v75;
      if (v15 || !v17) {
        goto LABEL_33;
      }
      long long v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.RelayReachabilityRequest", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
      state.opaque[0] = 0;
      state.opaque[1] = 0;
      uint64_t v54 = v27;
      os_activity_scope_enter(v27, &state);
      long long v28 = [v65 objectForKey:@"U"];
      objc_opt_class();
      char v29 = objc_opt_isKindOfClass();
      if (v29)
      {
        long long v30 = (void *)MEMORY[0x1E4F1C9B8];
        id v31 = [v65 objectForKey:@"U"];
        uint64_t v32 = [v30 _IDSDataFromBase64String:v31];
      }
      else
      {
        id v31 = [v65 objectForKey:@"U"];
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
        {
          char v58 = 0;
          id v44 = 0;
          goto LABEL_42;
        }
        uint64_t v32 = [v65 objectForKey:@"U"];
      }
      id v44 = (void *)v32;
      char v58 = v29 ^ 1;
LABEL_42:
      long long v46 = JWUUIDPushObjectToString();
      uint64_t v47 = objc_opt_class();
      long long v48 = sub_1D982E340(v47, v65, (void *)qword_1EA8C7C70);
      v71[0] = MEMORY[0x1E4F143A8];
      v71[1] = 3221225472;
      v71[2] = sub_1D9837790;
      v71[3] = &unk_1E6B77A30;
      id v72 = v63;
      uint64_t v15 = v17;
      uint64_t v73 = v15;
      id v74 = v65;
      [v72 _calculateHandlersForMessage:v12 messageGUID:v46 fromIdentifier:v48 command:v62 completionBlock:v71];

      if (v58) {
      if (v29)
      }

      os_activity_scope_leave(&state);
      char v17 = v54;
      goto LABEL_33;
    case 0:
      goto LABEL_5;
  }
LABEL_34:
}

void sub_1D9837790(uint64_t a1, void *a2)
{
  uint64_t v51 = *MEMORY[0x1E4F143B8];
  long long v42 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = a2;
  uint64_t v37 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
  if (v37)
  {
    uint64_t v36 = *(void *)v43;
    *(void *)&long long v3 = 138412802;
    long long v25 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v43 != v36) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v42 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v34 = *(void *)(a1 + 40);
          uint64_t v35 = *(void *)(a1 + 32);
          long long v40 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", @"t", v25);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v6 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v7 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v8 = [v6 _IDSDataFromBase64String:v7];
            char v29 = (void *)v8;
            uint64_t v32 = (void *)v7;
            goto LABEL_14;
          }
          uint64_t v10 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v8 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v39 = (void *)v10;
            uint64_t v26 = (void *)v8;
LABEL_14:
            char v33 = isKindOfClass ^ 1;
          }
          else
          {
            char v33 = 0;
            uint64_t v8 = 0;
            uint64_t v39 = (void *)v10;
          }
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), (void *)qword_1EA8C7C70);
          uint64_t v13 = objc_opt_class();
          int v14 = sub_1D982E340(v13, *(void **)(a1 + 48), (void *)qword_1EA8C7C68);
          uint64_t v15 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v16 = objc_opt_isKindOfClass();
          if (v16)
          {
            char v17 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v18 = [*(id *)(a1 + 48) objectForKey:@"U"];
            long long v28 = [v17 _IDSDataFromBase64String:v18];
            id v31 = (void *)v18;
            goto LABEL_20;
          }
          uint64_t v19 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            long long v27 = v38 = (void *)v19;
LABEL_20:
            char v20 = v16 ^ 1;
          }
          else
          {
            char v20 = 0;
            uint64_t v38 = (void *)v19;
          }
          uint64_t v21 = JWUUIDPushObjectToString();
          [v5 handler:v35 incomingReachabilityRequest:v34 fromToken:v8 fromIdentifier:v12 toIdentifier:v14 messageGUID:v21];

          if (v20) {
          uint64_t v22 = v38;
          }
          if (v16)
          {

            uint64_t v22 = v31;
          }

          if (v33) {
          uint64_t v23 = v39;
          }
          if (isKindOfClass)
          {

            uint64_t v23 = v32;
          }

          goto LABEL_31;
        }
        uint64_t v9 = IMLogHandleForCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          char v24 = NSStringFromSelector(sel_handler_incomingReachabilityRequest_fromToken_fromIdentifier_toIdentifier_messageGUID_);
          *(_DWORD *)long long buf = 138412546;
          uint64_t v47 = v24;
          __int16 v48 = 2112;
          long long v49 = v5;
          _os_log_debug_impl(&dword_1D967A000, v9, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v4;
      }
      while (v37 != v4);
      uint64_t v37 = [obj countByEnumeratingWithState:&v42 objects:v50 count:16];
    }
    while (v37);
  }
}

void sub_1D9837D10(uint64_t a1, void *a2)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  id obj = a2;
  uint64_t v34 = [obj countByEnumeratingWithState:&v38 objects:v46 count:16];
  if (v34)
  {
    uint64_t v33 = *(void *)v39;
    *(void *)&long long v3 = 138412802;
    long long v23 = v3;
    do
    {
      uint64_t v4 = 0;
      do
      {
        if (*(void *)v39 != v33) {
          objc_enumerationMutation(obj);
        }
        uint64_t v5 = *(void **)(*((void *)&v38 + 1) + 8 * v4);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v31 = *(void *)(a1 + 40);
          uint64_t v32 = *(void *)(a1 + 32);
          uint64_t v37 = objc_msgSend(*(id *)(a1 + 48), "objectForKey:", @"t", v23);
          objc_opt_class();
          char isKindOfClass = objc_opt_isKindOfClass();
          if (isKindOfClass)
          {
            uint64_t v7 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v8 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v9 = [v7 _IDSDataFromBase64String:v8];
            long long v27 = (void *)v9;
            long long v30 = (void *)v8;
            goto LABEL_14;
          }
          uint64_t v11 = [*(id *)(a1 + 48) objectForKey:@"t"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            uint64_t v9 = [*(id *)(a1 + 48) objectForKey:@"t"];
            uint64_t v36 = (void *)v11;
            long long v25 = (void *)v9;
LABEL_14:
            char v12 = isKindOfClass ^ 1;
          }
          else
          {
            char v12 = 0;
            uint64_t v9 = 0;
            uint64_t v36 = (void *)v11;
          }
          uint64_t v13 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          char v14 = objc_opt_isKindOfClass();
          if (v14)
          {
            uint64_t v15 = (void *)MEMORY[0x1E4F1C9B8];
            uint64_t v16 = [*(id *)(a1 + 48) objectForKey:@"U"];
            uint64_t v26 = [v15 _IDSDataFromBase64String:v16];
            char v29 = (void *)v16;
            goto LABEL_20;
          }
          uint64_t v17 = [*(id *)(a1 + 48) objectForKey:@"U"];
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            [*(id *)(a1 + 48) objectForKey:@"U"];
            char v24 = v35 = (void *)v17;
LABEL_20:
            char v18 = v14 ^ 1;
          }
          else
          {
            char v18 = 0;
            uint64_t v35 = (void *)v17;
          }
          uint64_t v19 = JWUUIDPushObjectToString();
          [v5 handler:v32 incomingReachabilityResponse:v31 fromToken:v9 messageGUID:v19];

          if (v18) {
          char v20 = v35;
          }
          if (v14)
          {

            char v20 = v29;
          }

          if (v12) {
          uint64_t v21 = v36;
          }
          if (isKindOfClass)
          {

            uint64_t v21 = v30;
          }

          goto LABEL_31;
        }
        uint64_t v10 = IMLogHandleForCategory();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = NSStringFromSelector(sel_handler_incomingReachabilityResponse_fromToken_messageGUID_);
          *(_DWORD *)long long buf = 138412546;
          long long v43 = v22;
          __int16 v44 = 2112;
          long long v45 = v5;
          _os_log_debug_impl(&dword_1D967A000, v10, OS_LOG_TYPE_DEBUG, "Can't find selector %@ in handler: %@", buf, 0x16u);
        }
LABEL_31:
        ++v4;
      }
      while (v34 != v4);
      uint64_t v34 = [obj countByEnumeratingWithState:&v38 objects:v46 count:16];
    }
    while (v34);
  }
}

void sub_1D9838278()
{
  dispatch_queue_t v0 = (void *)MEMORY[0x1E016A370]();
  id v1 = objc_alloc_init(MEMORY[0x1E4F1CA60]);
  [v1 setObject:&unk_1F3391F40 forKey:IMDRelayLocalMessageTypeIncomingTextMessage];
  [v1 setObject:&unk_1F3391F60 forKey:IMDRelayLocalMessageTypeOutgoing];
  [v1 setObject:&unk_1F3391F80 forKey:IMDRelayLocalMessageTypeOutgoingDownload];
  [v1 setObject:&unk_1F3391FA0 forKey:IMDRelayLocalMessageTypeIncomingDownloadMessage];
  [v1 setObject:&unk_1F3391FC0 forKey:IMDRelayLocalMessageTypeSent];
  [v1 setObject:&unk_1F3391FE0 forKey:IMDRelayLocalMessageTypeRead];
  [v1 setObject:&unk_1F3392000 forKey:IMDRelayLocalMessageTypeRemoteRead];
  [v1 setObject:&unk_1F3392020 forKey:IMDRelayLocalMessageTypeError];
  [v1 setObject:&unk_1F3392040 forKey:IMDRelayLocalMessageTypeRemoteFileRequest];
  [v1 setObject:&unk_1F3392060 forKey:IMDRelayLocalMessageTypeRemoteFileResponse];
  uint64_t v2 = (void *)qword_1EA8CA620;
  qword_1EA8CA620 = (uint64_t)v1;
}

void sub_1D98383E4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D9838608;
  void v21[3] = &unk_1E6B77A30;
  id v18 = v12;
  id v22 = v18;
  id v19 = v14;
  id v23 = v19;
  id v20 = v15;
  id v24 = v20;
  [v18 _calculateHandlersForLocalMessage:v19 userInfo:v20 completionBlock:v21];
}

void sub_1D9838544(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local incoming dl push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D98384F0);
  }
  _Unwind_Resume(a1);
}

void sub_1D9838608(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v5 = 138412802;
    long long v13 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v8, "handler:localIncommingMessage:storageContext:", v10, v9, v12, v13, (void)v14);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1D983885C(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  v23[0] = MEMORY[0x1E4F143A8];
  v23[1] = 3221225472;
  void v23[2] = sub_1D9838A88;
  v23[3] = &unk_1E6B77A58;
  id v20 = v14;
  id v24 = v20;
  id v21 = v16;
  id v25 = v21;
  char v27 = a8;
  id v22 = v17;
  id v26 = v22;
  [v20 _calculateHandlersForLocalMessage:v21 userInfo:v22 completionBlock:v23];
}

void sub_1D98389C4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local outgoing push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D9838970);
  }
  _Unwind_Resume(a1);
}

void sub_1D9838A88(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v16;
    *(void *)&long long v4 = 138412802;
    long long v13 = v4;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8 * v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(a1 + 40);
          int v10 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v7, "handler:localOutgoingMessage:isBeingReplayed:storageContext:", v9, v8, v10 != 0, v12, v13);
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
}

void sub_1D9838CF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, char a8)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v14 = a2;
  id v15 = a3;
  id v16 = a4;
  id v17 = a5;
  id v18 = a6;
  id v19 = a7;
  if (IMOSLoggingEnabled())
  {
    uint64_t v20 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "Using outDownloadMessageBlock", buf, 2u);
    }
  }
  v24[0] = MEMORY[0x1E4F143A8];
  v24[1] = 3221225472;
  v24[2] = sub_1D9838F8C;
  void v24[3] = &unk_1E6B77A58;
  id v21 = v14;
  id v25 = v21;
  id v22 = v16;
  id v26 = v22;
  char v28 = a8;
  id v23 = v17;
  id v27 = v23;
  [v21 _calculateHandlersForLocalMessage:v22 userInfo:v23 completionBlock:v24];
}

void sub_1D9838F8C(uint64_t a1, void *a2)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v16;
    *(void *)&long long v4 = 138412802;
    long long v13 = v4;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v15 + 1) + 8 * v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v8 = *(void *)(a1 + 40);
          int v10 = *(unsigned __int8 *)(a1 + 56);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v7, "handler:localOutgoingDownloadMessage:isBeingReplayed:storageContext:", v9, v8, v10 != 0, v12, v13);
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v3);
  }
}

void sub_1D98391F4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (IMOSLoggingEnabled())
  {
    long long v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Using localIncomingDownloadMessageBlock", buf, 2u);
    }
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = sub_1D9839488;
  v22[3] = &unk_1E6B77A30;
  id v19 = v12;
  id v23 = v19;
  id v20 = v14;
  id v24 = v20;
  id v21 = v15;
  id v25 = v21;
  [v19 _calculateHandlersForLocalMessage:v20 userInfo:v21 completionBlock:v22];
}

void sub_1D9839488(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v5 = 138412802;
    long long v13 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v8, "handler:localIncomingDownloadMessage:storageContext:", v10, v9, v12, v13, (void)v14);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1D98396DC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D9839900;
  void v21[3] = &unk_1E6B77A30;
  id v18 = v12;
  id v22 = v18;
  id v19 = v14;
  id v23 = v19;
  id v20 = v15;
  id v24 = v20;
  [v18 _calculateHandlersForLocalMessage:v19 userInfo:v20 completionBlock:v21];
}

void sub_1D983983C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local sent message push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D98397E8);
  }
  _Unwind_Resume(a1);
}

void sub_1D9839900(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    uint64_t v15 = *(void *)v17;
    *(void *)&long long v4 = 138412802;
    long long v13 = v4;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v17 != v15) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v16 + 1) + 8 * v5);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v7 = *(void *)(a1 + 32);
          uint64_t v8 = objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v13);
          uint64_t v9 = [*(id *)(a1 + 40) objectForKeyedSubscript:IMDRelayMessageDictionaryInterworkedKey];
          uint64_t v10 = [v9 BOOLValue];
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          [v6 handler:v7 localMessageSent:v8 wasInterworked:v10 storageContext:v12];
        }
        ++v5;
      }
      while (v3 != v5);
      uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v3);
  }
}

void sub_1D9839BAC(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D9839DD0;
  void v21[3] = &unk_1E6B77A30;
  id v18 = v12;
  id v22 = v18;
  id v19 = v14;
  id v23 = v19;
  id v20 = v15;
  id v24 = v20;
  [v18 _calculateHandlersForLocalMessage:v19 userInfo:v20 completionBlock:v21];
}

void sub_1D9839D0C(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local message read push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D9839CB8);
  }
  _Unwind_Resume(a1);
}

void sub_1D9839DD0(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v17;
    *(void *)&long long v4 = 138412802;
    long long v14 = v4;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v8 = *(void *)(a1 + 32);
          uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v14);
          uint64_t v10 = objc_opt_class();
          uint64_t v11 = sub_1D982E340(v10, *(void **)(a1 + 48), @"e");
          uint64_t v12 = objc_opt_class();
          id v13 = sub_1D982E340(v12, *(void **)(a1 + 48), @"H");
          [v7 handler:v8 localMessageRead:v9 readByMe:1 timeStamp:v11 storageContext:v13];
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v3);
  }
}

void sub_1D983A078(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D983A29C;
  void v21[3] = &unk_1E6B77A30;
  id v18 = v12;
  id v22 = v18;
  id v19 = v14;
  id v23 = v19;
  id v20 = v15;
  id v24 = v20;
  [v18 _calculateHandlersForLocalMessage:v19 userInfo:v20 completionBlock:v21];
}

void sub_1D983A1D8(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incomming local message read push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D983A184);
  }
  _Unwind_Resume(a1);
}

void sub_1D983A29C(uint64_t a1, void *a2)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id obj = a2;
  uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v3)
  {
    uint64_t v5 = *(void *)v17;
    *(void *)&long long v4 = 138412802;
    long long v14 = v4;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v17 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v16 + 1) + 8 * v6);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v8 = *(void *)(a1 + 32);
          uint64_t v9 = objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v14);
          uint64_t v10 = objc_opt_class();
          uint64_t v11 = sub_1D982E340(v10, *(void **)(a1 + 48), @"e");
          uint64_t v12 = objc_opt_class();
          id v13 = sub_1D982E340(v12, *(void **)(a1 + 48), @"H");
          [v7 handler:v8 localMessageRead:v9 readByMe:0 timeStamp:v11 storageContext:v13];
        }
        ++v6;
      }
      while (v3 != v6);
      uint64_t v3 = [obj countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v3);
  }
}

void sub_1D983A544(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  v21[0] = MEMORY[0x1E4F143A8];
  v21[1] = 3221225472;
  v21[2] = sub_1D983A768;
  void v21[3] = &unk_1E6B77A30;
  id v18 = v12;
  id v22 = v18;
  id v19 = v14;
  id v23 = v19;
  id v20 = v15;
  id v24 = v20;
  [v18 _calculateHandlersForLocalMessage:v19 userInfo:v20 completionBlock:v21];
}

void sub_1D983A6A4(_Unwind_Exception *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, long long buf)
{
  if (a2 == 1)
  {
    id v17 = objc_begin_catch(a1);
    if (IMOSLoggingEnabled())
    {
      id v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v17;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Exception handling incoming local message error push: %@", (uint8_t *)&buf, 0xCu);
      }
    }
    objc_end_catch();
    JUMPOUT(0x1D983A650);
  }
  _Unwind_Resume(a1);
}

void sub_1D983A768(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v5 = 138412802;
    long long v13 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v9 = *(void *)(a1 + 32);
          uint64_t v10 = objc_msgSend(*(id *)(a1 + 40), "_stringForKey:", IMDRelayLocalMessageDictionaryGUIDKey, v13, (void)v14);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          [v8 handler:v9 localMessageError:v10 storageContext:v12];
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1D983A9D8(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (IMOSLoggingEnabled())
  {
    id v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Using block local remote file request", buf, 2u);
    }
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = sub_1D983AC6C;
  v22[3] = &unk_1E6B77A30;
  id v19 = v12;
  id v23 = v19;
  id v20 = v14;
  id v24 = v20;
  id v21 = v15;
  id v25 = v21;
  [v19 _calculateHandlersForLocalMessage:v20 userInfo:v21 completionBlock:v22];
}

void sub_1D983AC6C(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v5 = 138412802;
    long long v13 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v8, "handler:localFileRequest:storageContext:", v10, v9, v12, v13, (void)v14);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1D983AEC0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v12 = a2;
  id v13 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a6;
  id v17 = a7;
  if (IMOSLoggingEnabled())
  {
    id v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Using block local remote file response", buf, 2u);
    }
  }
  v22[0] = MEMORY[0x1E4F143A8];
  v22[1] = 3221225472;
  void v22[2] = sub_1D983B154;
  v22[3] = &unk_1E6B77A30;
  id v19 = v12;
  id v23 = v19;
  id v20 = v14;
  id v24 = v20;
  id v21 = v15;
  id v25 = v21;
  [v19 _calculateHandlersForLocalMessage:v20 userInfo:v21 completionBlock:v22];
}

void sub_1D983B154(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = a2;
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v15;
    *(void *)&long long v5 = 138412802;
    long long v13 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * v7);
        if (objc_opt_respondsToSelector())
        {
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v9 = *(void *)(a1 + 40);
          uint64_t v11 = objc_opt_class();
          id v12 = sub_1D982E340(v11, *(void **)(a1 + 48), @"H");
          objc_msgSend(v8, "handler:localFileResponse:storageContext:", v10, v9, v12, v13, (void)v14);
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }
}

void sub_1D983D890()
{
  void v3[4] = *MEMORY[0x1E4F143B8];
  v2[0] = IMDRelayLocalMessageTypeOutgoing;
  v2[1] = IMDRelayLocalMessageTypeOutgoingDownload;
  v3[0] = IMDRelayLocalMessageDictionaryOutgoingDictKey;
  v3[1] = IMDRelayLocalMessageDictionaryOutgoingDictKey;
  v2[2] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v2[3] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v3[2] = IMDRelayLocalMessageDictionaryIncomingDictKey;
  v3[3] = IMDRelayLocalMessageDictionaryIncomingDictKey;
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:4];
  id v1 = (void *)qword_1EA8CA630;
  qword_1EA8CA630 = v0;
}

void sub_1D983E414(uint64_t a1, void *a2)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (![v3 count])
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v4 = *(id *)(a1 + 32);
    uint64_t v9 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)v19;
LABEL_13:
      uint64_t v12 = 0;
      long long v13 = v3;
      while (1)
      {
        if (*(void *)v19 != v11) {
          objc_enumerationMutation(v4);
        }
        id v3 = [*(id *)(a1 + 40) _cachedListenersForGUID:*(void *)(*((void *)&v18 + 1) + 8 * v12)];

        if ([v3 count]) {
          break;
        }
        ++v12;
        long long v13 = v3;
        if (v10 == v12)
        {
          uint64_t v10 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
          if (v10) {
            goto LABEL_13;
          }
          goto LABEL_19;
        }
      }
    }
    goto LABEL_19;
  }
  if ((*(unsigned char *)(a1 + 56) & 8) != 0)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v4 = *(id *)(a1 + 32);
    uint64_t v5 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)v15;
      do
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v15 != v7) {
            objc_enumerationMutation(v4);
          }
          objc_msgSend(*(id *)(a1 + 40), "_cacheListeners:forGUID:", v3, *(void *)(*((void *)&v14 + 1) + 8 * i), (void)v14);
        }
        uint64_t v6 = [v4 countByEnumeratingWithState:&v14 objects:v22 count:16];
      }
      while (v6);
    }
LABEL_19:
  }
  (*(void (**)(void))(*(void *)(a1 + 48) + 16))();
}

uint64_t sub_1D983E5F4(uint64_t a1, void *a2)
{
  return [a2 objectForKey:IMDRelayMessageDictionaryRecipientIDKey];
}

void sub_1D983E608(void *a1, void *a2)
{
  v17[1] = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  id v4 = (void *)a1[4];
  uint64_t v5 = [v3 bestResult];
  uint64_t v6 = [v5 service];
  uint64_t v7 = [v4 _handlerForServiceName:v6];

  if (v7)
  {
    v17[0] = v7;
    uint64_t v8 = [MEMORY[0x1E4F1C978] arrayWithObjects:v17 count:1];
  }
  else
  {
    uint64_t v8 = 0;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      uint64_t v10 = a1[5];
      int v11 = 138412803;
      uint64_t v12 = v7;
      __int16 v13 = 2117;
      uint64_t v14 = v10;
      __int16 v15 = 2112;
      id v16 = v3;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Routing outgoing payload to %@ as it is the most optimal path. payload=%{sensitive}@ reachability results=%@", (uint8_t *)&v11, 0x20u);
    }
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1D983EA00()
{
  void v7[10] = *MEMORY[0x1E4F143B8];
  v6[0] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v6[1] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v7[0] = &unk_1F33C5E50;
  v7[1] = &unk_1F33C5E50;
  id v6[2] = IMDRelayLocalMessageTypeOutgoing;
  v6[3] = IMDRelayLocalMessageTypeOutgoingDownload;
  void v7[2] = &unk_1F33C5E50;
  v7[3] = &unk_1F33C5E50;
  void v6[4] = IMDRelayLocalMessageTypeSent;
  void v6[5] = IMDRelayLocalMessageTypeRead;
  void v7[4] = &unk_1F33C5E68;
  void v7[5] = &unk_1F33C5E68;
  v6[6] = IMDRelayLocalMessageTypeRemoteRead;
  v6[7] = IMDRelayLocalMessageTypeError;
  v7[6] = &unk_1F33C5E68;
  v7[7] = &unk_1F33C5E68;
  v6[8] = IMDRelayLocalMessageTypeDelivered;
  v6[9] = IMDRelayLocalMessageTypeRemoteFileRequest;
  v7[8] = &unk_1F33C5E68;
  v7[9] = &unk_1F33C5E68;
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v7 forKeys:v6 count:10];
  id v1 = (void *)qword_1EA8CA640;
  qword_1EA8CA640 = v0;

  v4[0] = IMDRelayLocalMessageTypeOutgoing;
  v4[1] = IMDRelayLocalMessageTypeOutgoingDownload;
  v5[0] = &unk_1F33C5E80;
  v5[1] = &unk_1F33C5E80;
  uint64_t v2 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v5 forKeys:v4 count:2];
  id v3 = (void *)qword_1EA8CA648;
  qword_1EA8CA648 = v2;
}

void sub_1D983EC64()
{
  void v3[5] = *MEMORY[0x1E4F143B8];
  v2[0] = IMDRelayLocalMessageTypeSent;
  v2[1] = IMDRelayLocalMessageTypeIncomingTextMessage;
  v3[0] = &unk_1F33C5E98;
  v3[1] = &unk_1F33C5EB0;
  v2[2] = IMDRelayLocalMessageTypeOutgoing;
  v2[3] = IMDRelayLocalMessageTypeIncomingDownloadMessage;
  v3[2] = &unk_1F33C5EB0;
  v3[3] = &unk_1F33C5EB0;
  void v2[4] = IMDRelayLocalMessageTypeOutgoingDownload;
  void v3[4] = &unk_1F33C5EB0;
  uint64_t v0 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:v3 forKeys:v2 count:5];
  id v1 = (void *)qword_1EA8CA658;
  qword_1EA8CA658 = v0;
}

void sub_1D983EE3C(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7)
{
  uint64_t v75 = *MEMORY[0x1E4F143B8];
  id v11 = a3;
  id v12 = a4;
  id v13 = a5;
  id v48 = a6;
  id v14 = a7;
  __int16 v15 = [v11 filename];
  id v16 = IMUTITypeForFilename();

  int v17 = IMIsSupportedUTIType();
  int v18 = [v11 isFromMomentShare];
  long long v68 = 0u;
  long long v69 = 0u;
  IMClientPreviewConstraints();
  uint64_t v70 = [v11 isSticker];
  *(_DWORD *)((char *)&v70 + 2) = [v11 isAdaptiveImageGlyph];
  BYTE1(v70) = 1;
  if ([v13 hasPrefix:*MEMORY[0x1E4F6CBE8]])
  {
    long long v19 = [v11 type];
    if ([v19 length])
    {
      long long v20 = (void *)MEMORY[0x1E4F442D8];
      long long v21 = [v11 type];
      id v22 = [v20 typeWithIdentifier:v21];
      LODWORD(v20) = [v22 conformsToType:*MEMORY[0x1E4F44400]];

      if (v20)
      {
        id v23 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v12];
        uint64_t v24 = [MEMORY[0x1E4F6EBE0] sharedInstance];
        v64[0] = MEMORY[0x1E4F143A8];
        v64[1] = 3221225472;
        v64[2] = sub_1D983F808;
        v64[3] = &unk_1E6B74708;
        id v65 = v13;
        id v66 = v11;
        id v67 = v14;
        *(_OWORD *)long long buf = v68;
        *(_OWORD *)&uint8_t buf[16] = v69;
        *(void *)id v74 = v70;
        [v24 replaceTransferWithSafeTransfer:v23 constraints:buf completionBlock:v64];

LABEL_27:
        goto LABEL_28;
      }
    }
    else
    {
    }
LABEL_26:
    id v23 = [v11 guid];
    (*((void (**)(id, void *, uint64_t, void, double, double))v14 + 2))(v14, v23, 1, 0, 0.0, 0.0);
    goto LABEL_27;
  }
  if (v17)
  {
    char v25 = *(double *)&v68 <= 0.0 ? 1 : v18;
    if ((v25 & 1) == 0 && (objc_msgSend(v11, "isAuxVideo", *(double *)&v68) & 1) == 0)
    {
      id v23 = IMPreviewExtension();
      if ([v11 isSticker])
      {
        uint64_t v31 = [v11 stickerUserInfo];
        [v11 isAdaptiveImageGlyph];
        uint64_t v47 = IMSharedHelperCachePathForStickerWithProperties();
      }
      else
      {
        [v11 guid];
        [v11 filename];
        [v11 mimeType];
        uint64_t v47 = (void *)IMDCopyAttachmentPersistentPath();
      }
      if (![v47 length])
      {
        uint64_t v32 = IMLogHandleForCategory();
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR)) {
          sub_1D9904E94(v11, v32);
        }

        if (v14)
        {
          long long v46 = [v11 guid];
          (*((void (**)(id, void *, uint64_t, void, double, double))v14 + 2))(v14, v46, 1, 0, 0.0, 0.0);
        }
        goto LABEL_60;
      }
      long long v45 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v47];
      if ([v11 isAdaptiveImageGlyph]) {
        IMAttachmentEmojiImagePreviewFileURL();
      }
      else {
      __int16 v44 = IMAttachmentPreviewFileURL();
      }
      long long v43 = [MEMORY[0x1E4F1CB10] fileURLWithPath:v12];
      if (IMOSLoggingEnabled())
      {
        uint64_t v33 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 138413314;
          *(void *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v45;
          *(_WORD *)&buf[22] = 2112;
          *(void *)&uint8_t buf[24] = v44;
          *(_WORD *)id v74 = 2048;
          *(void *)&v74[2] = v68;
          *(_WORD *)&v74[10] = 2048;
          *(void *)&v74[12] = *((void *)&v69 + 1);
          _os_log_impl(&dword_1D967A000, v33, OS_LOG_TYPE_INFO, "Generating preview OOP with tmpURL %@ finalURL %@ previewURL %@ maxWidth %f scale %f", buf, 0x34u);
        }
      }
      if (v44)
      {
        id v42 = objc_alloc_init(MEMORY[0x1E4F6EA98]);
        [v42 emitPreviewGenerationBeginFromUTI:v16];
        uint64_t v60 = 0;
        id v61 = &v60;
        uint64_t v62 = 0x2020000000;
        char v63 = 0;
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = buf;
        *(void *)&uint8_t buf[16] = 0x3010000000;
        *(void *)id v74 = 0;
        *(void *)&v74[8] = 0;
        *(void *)&uint8_t buf[24] = &unk_1D99B037D;
        uint64_t v54 = 0;
        uint64_t v55 = &v54;
        uint64_t v56 = 0x3032000000;
        uint64_t v57 = sub_1D983FA4C;
        char v58 = sub_1D983FA5C;
        id v59 = 0;
        uint64_t v34 = [MEMORY[0x1E4F6EBE0] sharedInstance];
        uint64_t v35 = [v11 guid];
        v49[0] = MEMORY[0x1E4F143A8];
        v49[1] = 3221225472;
        v49[2] = sub_1D983FA64;
        v49[3] = &unk_1E6B77B20;
        uint64_t v51 = &v60;
        uint64_t v52 = &v54;
        id v50 = v44;
        int v53 = buf;
        v71[0] = v68;
        v71[1] = v69;
        uint64_t v72 = v70;
        LOBYTE(v41) = 1;
        id v36 = v50;
        objc_msgSend(v34, "generatePreview:previewURL:senderContext:constraints:balloonBundleID:transferGUID:completionBlock:blockUntilReply:", v43, v49, v41);

        [v42 emitPreviewGenerationEndFromUTI:v16];
        if (IMOSLoggingEnabled())
        {
          uint64_t v37 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
            LODWORD(v71[0]) = 138412290;
            *(void *)((char *)v71 + 4) = v36;
            _os_log_impl(&dword_1D967A000, v37, OS_LOG_TYPE_INFO, "persistedPreviewURL: %@", (uint8_t *)v71, 0xCu);
          }
        }
        long long v38 = [MEMORY[0x1E4F6E6C8] sharedManager];
        objc_msgSend(v38, "checkPreviewSensitivityIfNeededFor:attachmentURL:persistedPreviewURL:isFromMe:", v11, v43, v36, objc_msgSend(v48, "isFromMe"));
        if (v14)
        {
          long long v39 = [v11 guid];
          (*((void (**)(id, void *, void, uint64_t, double, double))v14 + 2))(v14, v39, *((unsigned __int8 *)v61 + 24), v55[5], *(double *)(*(void *)&buf[8] + 32), *(double *)(*(void *)&buf[8] + 40));
        }
        _Block_object_dispose(&v54, 8);

        _Block_object_dispose(buf, 8);
        _Block_object_dispose(&v60, 8);
      }
      else
      {
        if (IMOSLoggingEnabled())
        {
          long long v40 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v40, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl(&dword_1D967A000, v40, OS_LOG_TYPE_INFO, "Not pregenerating preview, no persistedPreviewURL", buf, 2u);
          }
        }
        if (!v14) {
          goto LABEL_59;
        }
        id v42 = [v11 guid];
        (*((void (**)(id, id, uint64_t, void, double, double))v14 + 2))(v14, v42, 1, 0, 0.0, 0.0);
      }

LABEL_59:
LABEL_60:

      goto LABEL_27;
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v26 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
    {
      int v27 = [v11 isAuxVideo];
      char v28 = @"NO";
      if (v18) {
        char v29 = @"YES";
      }
      else {
        char v29 = @"NO";
      }
      if (v17) {
        uint64_t v30 = @"YES";
      }
      else {
        uint64_t v30 = @"NO";
      }
      *(_DWORD *)long long buf = 138412802;
      *(void *)&uint8_t buf[4] = v30;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v29;
      if (v27) {
        char v28 = @"YES";
      }
      *(_WORD *)&buf[22] = 2112;
      *(void *)&uint8_t buf[24] = v28;
      _os_log_impl(&dword_1D967A000, v26, OS_LOG_TYPE_INFO, "Not pregenerating preview, utiSupported %@ isCMM %@ aux Video %@, calling completion directly", buf, 0x20u);
    }
  }
  if (v14) {
    goto LABEL_26;
  }
LABEL_28:
}

void sub_1D983F808(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  int v6 = IMOSLoggingEnabled();
  if (a2)
  {
    if (v6)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        uint64_t v9 = [*(id *)(a1 + 40) guid];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v18 = v8;
        __int16 v19 = 2112;
        long long v20 = v9;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Replaced iMessage app template image with BlastDoor copy for %@ and transfer %@", buf, 0x16u);
      }
    }
  }
  else
  {
    if (v6)
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v11 = *(void *)(a1 + 32);
        id v12 = [*(id *)(a1 + 40) guid];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v18 = v11;
        __int16 v19 = 2112;
        long long v20 = v12;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Failed replacing iMessage app template image with BlastDoor copy for %@ and transfer %@", buf, 0x16u);
      }
    }
    id v13 = [NSString stringGUID];
    id v14 = [NSString stringWithFormat:@"iMessageApp-TemplateLayoutImage"];
    +[IMBlastdoor sendBlastDoorError:v5 guid:v13 messageTypeString:v14 senderURI:0 senderToken:0 messageContext:0 payloadAttachmentURL:0];
  }
  uint64_t v15 = *(void *)(a1 + 48);
  id v16 = [*(id *)(a1 + 40) guid];
  (*(void (**)(uint64_t, void *, uint64_t, id, double, double))(v15 + 16))(v15, v16, a2, v5, 0.0, 0.0);
}

void sub_1D983FA18(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D983F948);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D983FA4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D983FA5C(uint64_t a1)
{
}

void sub_1D983FA64(void *a1, char a2, void *a3, double a4, double a5)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v9 = a3;
  *(unsigned char *)(*(void *)(a1[5] + 8) + 24) = a2;
  uint64_t v10 = [v9 copy];
  uint64_t v11 = *(void *)(a1[6] + 8);
  id v12 = *(void **)(v11 + 40);
  *(void *)(v11 + 40) = v10;

  if (IMOSLoggingEnabled())
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = *(void **)(*(void *)(a1[6] + 8) + 40);
      *(_DWORD *)long long buf = 138412290;
      id v31 = v14;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "IMTranscoderAgent OOP generation completed with error %@", buf, 0xCu);
    }
  }
  if (v9) {
    char v15 = 0;
  }
  else {
    char v15 = a2;
  }
  id v16 = [MEMORY[0x1E4F6E890] sharedInstance];
  int v17 = v16;
  if ((v15 & 1) == 0)
  {
    [v16 trackEvent:*MEMORY[0x1E4F6DA70]];

    if (IMOSLoggingEnabled())
    {
      id v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v31 = v9;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "OOP preview generation failed in imagent with error %@", buf, 0xCu);
      }
    }
    id v23 = [v9 domain];
    if (([v23 isEqual:*MEMORY[0x1E4F6D1D8]] & 1) == 0)
    {
      uint64_t v24 = [v9 domain];
      if (![v24 containsString:@"com.apple.BlastDoor"])
      {
        int v27 = [v9 domain];
        char v28 = [v27 containsString:@"BlastDoor.Explosion"];

        if ((v28 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_22;
      }
    }
LABEL_22:
    char v25 = [NSString stringGUID];
    id v26 = [NSString stringWithFormat:@"%@", &unk_1F33C5EC8];
    +[IMBlastdoor sendBlastDoorError:v9 guid:v25 messageTypeString:v26 senderURI:0 senderToken:0 messageContext:0 payloadAttachmentURL:0];

    goto LABEL_23;
  }
  [v16 trackEvent:*MEMORY[0x1E4F6DA78]];

  if (IMOSLoggingEnabled())
  {
    uint64_t v18 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(double *)char v29 = a4;
      *(double *)&v29[1] = a5;
      __int16 v19 = [MEMORY[0x1E4F29238] valueWithBytes:v29 objCType:"{CGSize=dd}"];
      uint64_t v20 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      id v31 = v19;
      __int16 v32 = 2112;
      uint64_t v33 = v20;
      _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Storing size value %@ for previewURL %@", buf, 0x16u);
    }
  }
  uint64_t v21 = *(void *)(a1[7] + 8);
  *(double *)(v21 + 32) = a4;
  *(double *)(v21 + 40) = a5;
LABEL_23:
}

void sub_1D983FE00(void *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9, void *a10, uint64_t a11, void *a12, void *a13, void *a14, void *a15)
{
  id v34 = a3;
  id v20 = a4;
  id v21 = a5;
  id v40 = a6;
  id v39 = a7;
  id v38 = a8;
  id v37 = a9;
  id v36 = a10;
  id v22 = v21;
  id v23 = a12;
  id v24 = a13;
  id v25 = a14;
  id v26 = a15;
  uint64_t v48 = 0;
  long long v49 = (os_activity_scope_state_s *)&v48;
  uint64_t v50 = 0x3010000000;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  uint64_t v51 = &unk_1D99B037D;
  int v27 = _os_activity_create(&dword_1D967A000, "com.apple.messages.AttachmentDownload", MEMORY[0x1E4F144F0], OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v27, v49 + 2);
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1D9840084;
  aBlock[3] = &unk_1E6B77B70;
  id v28 = v20;
  id v42 = v28;
  uint64_t v47 = &v48;
  id v29 = v26;
  id v46 = v29;
  long long v43 = a1;
  id v30 = v23;
  id v44 = v30;
  id v31 = v24;
  id v45 = v31;
  __int16 v32 = _Block_copy(aBlock);
  uint64_t v33 = [a1 transferServicesController];
  [v33 receiveFileTransfer:v34 topic:v22 path:v40 requestURLString:v39 ownerID:v38 signature:v37 decryptionKey:v36 fileSize:a11 progressBlock:v25 completionBlock:v32];

  _Block_object_dispose(&v48, 8);
}

void sub_1D984006C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_1D9840084(uint64_t a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  uint64_t v34 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a5;
  id v14 = a6;
  char v15 = +[IMDFileTransferCenter sharedInstance];
  id v16 = [v15 transferForGUID:*(void *)(a1 + 32)];

  if (a4)
  {
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v24 = 3221225472;
    id v25 = sub_1D9840384;
    id v26 = &unk_1E6B77B48;
    long long v22 = *(_OWORD *)(a1 + 64);
    id v17 = (id)v22;
    long long v30 = v22;
    id v27 = v11;
    id v18 = v12;
    id v28 = v18;
    char v31 = 1;
    id v29 = v14;
    __int16 v19 = _Block_copy(&aBlock);
    if (IMOSLoggingEnabled())
    {
      id v20 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v33 = v16;
        _os_log_impl(&dword_1D967A000, v20, OS_LOG_TYPE_INFO, "receiveFileTransfer: completed, will generate preview for transfer %@", buf, 0xCu);
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "generatePreviewForTransfer:attachmentPath:balloonBundleID:senderContext:completionBlock:", v16, v18, *(void *)(a1 + 48), *(void *)(a1 + 56), v19, v22, aBlock, v24, v25, v26);
  }
  else if (*(void *)(a1 + 64))
  {
    if (IMOSLoggingEnabled())
    {
      id v21 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v33 = @"NO";
        _os_log_impl(&dword_1D967A000, v21, OS_LOG_TYPE_INFO, "Not pregenerating preview: downloadSucceeded %@", buf, 0xCu);
      }
    }
    os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
    (*(void (**)(double, double))(*(void *)(a1 + 64) + 16))(0.0, 0.0);
  }
  else
  {
    os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 72) + 8) + 32));
  }
}

void sub_1D9840384(uint64_t a1, void *a2, int a3, void *a4, double a5, double a6)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a4;
  if (IMOSLoggingEnabled())
  {
    id v13 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      id v14 = @"NO";
      if (a3) {
        id v14 = @"YES";
      }
      int v15 = 138412546;
      id v16 = v14;
      __int16 v17 = 2112;
      id v18 = v12;
      _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Generated preview, success %@ error %@", (uint8_t *)&v15, 0x16u);
    }
  }
  os_activity_scope_leave((os_activity_scope_state_t)(*(void *)(*(void *)(a1 + 64) + 8) + 32));
  (*(void (**)(double, double))(*(void *)(a1 + 56) + 16))(a5, a6);
}

uint64_t sub_1D98404EC()
{
  return [MEMORY[0x1E4F6EBF8] sharedInstance];
}

uint64_t sub_1D98404F8()
{
  return IMGetCachedDomainBoolForKey();
}

void sub_1D984161C(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D98415CCLL);
  }
  _Unwind_Resume(exc_buf);
}

void sub_1D984168C(uint64_t a1, uint64_t a2)
{
}

void sub_1D984169C(uint64_t a1)
{
}

uint64_t sub_1D98416A8(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Finished Sync", v4, 2u);
    }
  }
  return [*(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) _scheduleNextEvaluation];
}

uint64_t sub_1D9841880(uint64_t a1)
{
  return [*(id *)(a1 + 32) _evaluateStateAndActIfNeeded];
}

uint64_t sub_1D984192C()
{
  qword_1EBE2BA20 = objc_alloc_init(IMDCKChatSyncController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9841B48(uint64_t result)
{
  if (!*(void *)(*(void *)(result + 32) + 72))
  {
    uint64_t v1 = result;
    *(void *)(*(void *)(v1 + 32) + 72) = +[IMDChatRegistry sharedInstance];
    return MEMORY[0x1F41817F8]();
  }
  return result;
}

uint64_t sub_1D9841CB8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9841CC8(uint64_t a1)
{
}

uint64_t sub_1D9841CD0(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40) = +[IMDChatStore sharedInstance];

  return MEMORY[0x1F41817F8]();
}

void sub_1D9842154(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) chatRegistry];
  uint64_t v2 = [v5 chatsToUploadToCloudKitWithLimit:*(void *)(a1 + 48)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1D98422E8(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = *(id *)(a1 + 32);
  uint64_t v2 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v24;
    *(void *)&long long v3 = 138412546;
    long long v20 = v3;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v24 != v4) {
          objc_enumerationMutation(obj);
        }
        int v6 = *(void **)(*((void *)&v23 + 1) + 8 * v5);
        uint64_t v7 = objc_msgSend(MEMORY[0x1E4F6E778], "sharedFeatureFlags", v20);
        int v8 = [v7 stewieEnabled];

        if (v8 && ([v6 isStewieChat] & 1) != 0
          || ([MEMORY[0x1E4F6E778] sharedFeatureFlags],
              id v9 = objc_claimAutoreleasedReturnValue(),
              int v10 = [v9 isTranscriptSharingEnabled],
              v9,
              v10)
          && [v6 isStewieSharingChat])
        {
          if (IMOSLoggingEnabled())
          {
            id v11 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Set cloud kit sync state to synced for stewie chats", buf, 2u);
            }
          }
          [v6 setCloudKitSyncState:1];
          [v6 storeAndBroadcastChatChanges];
        }
        else
        {
          id v12 = +[IMDRecordZoneManager sharedInstance];
          id v13 = [v12 chatRecordZoneID];
          id v14 = [*(id *)(a1 + 40) _randomSalt];
          id v22 = 0;
          int v15 = (void *)[v6 copyCKRecordRepresentationWithZoneID:v13 salt:v14 error:&v22];
          id v16 = v22;

          __int16 v17 = *(__CFArray **)(*(void *)(*(void *)(a1 + 48) + 8) + 40);
          if (v17 && v15)
          {
            CFArrayAppendValue(v17, v15);
          }
          else if (!v15)
          {
            id v18 = IMLogHandleForCategory();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
            {
              uint64_t v19 = [v6 guid];
              *(_DWORD *)long long buf = v20;
              id v28 = v19;
              __int16 v29 = 2112;
              id v30 = v16;
              _os_log_error_impl(&dword_1D967A000, v18, OS_LOG_TYPE_ERROR, "Error creating CKRecord for chat with guid (%@), error: %@", buf, 0x16u);
            }
          }
        }
        ++v5;
      }
      while (v2 != v5);
      uint64_t v2 = [obj countByEnumeratingWithState:&v23 objects:v31 count:16];
    }
    while (v2);
  }
}

uint64_t sub_1D9842780(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) chatRegistry];
  [v2 updateChatUsingSyncData:*(void *)(a1 + 40)];

  uint64_t v3 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v3, sel_countRecordOnRead_didSucceed_);
}

void sub_1D984289C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) chatRegistry];
  [v2 resolveChatConflictUsingSyncData:*(void *)(a1 + 40) localGUID:*(void *)(a1 + 48)];
}

void sub_1D9842988(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) chatRegistry];
  [v2 markChatAsDeferredForSyncingUsingSyncData:*(void *)(a1 + 40)];
}

void sub_1D9842B80(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    int v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating chat zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D9842E88(uint64_t a1)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  id v2 = *(void **)(a1 + 32);
  if (v2)
  {
    if ([v2 code] == 12
      || [*(id *)(a1 + 32) code] == 26
      || [*(id *)(a1 + 32) code] == 11)
    {
      uint64_t v3 = [*(id *)(a1 + 40) recordType];
      char v4 = [v3 isEqualToString:@"chatLockRecordType"];

      if (v4)
      {
        if (IMOSLoggingEnabled())
        {
          id v5 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            int v6 = *(void **)(a1 + 32);
            int v26 = 138412290;
            id v27 = v6;
            _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "We got back error [%@] on the lock record, setting the lock record to nil to re-generate on next sync", (uint8_t *)&v26, 0xCu);
          }
        }
        [*(id *)(a1 + 48) setLockRecord:0];
      }
      else
      {
        uint64_t v10 = *(void *)(a1 + 48);
        MEMORY[0x1F4181798](v10, sel__markChatAsDefferedForSyncingUsingRecord_);
      }
    }
    else
    {
      if (IMOSLoggingEnabled())
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          id v14 = *(void **)(a1 + 32);
          uint64_t v15 = *(void *)(a1 + 40);
          int v26 = 138412546;
          id v27 = v14;
          __int16 v28 = 2112;
          uint64_t v29 = v15;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Error %@ while writing up record %@ ", (uint8_t *)&v26, 0x16u);
        }
      }
      id v16 = [*(id *)(a1 + 48) ckUtilities];
      __int16 v17 = [v16 extractServerRecordFromCKServerErrorRecordChanged:*(void *)(a1 + 32)];

      if (v17)
      {
        if (IMOSLoggingEnabled())
        {
          id v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            int v26 = 138412290;
            id v27 = v17;
            _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Extracted record from server error%@ ", (uint8_t *)&v26, 0xCu);
          }
        }
        uint64_t v19 = [v17 recordType];
        int v20 = [v19 isEqualToString:@"chatLockRecordType"];

        id v21 = *(void **)(a1 + 48);
        if (v20)
        {
          [*(id *)(a1 + 48) setLockRecord:v17];
        }
        else
        {
          id v22 = *(void **)(a1 + 56);
          long long v23 = [*(id *)(a1 + 40) recordID];
          long long v24 = [v23 recordName];
          long long v25 = [v22 objectForKey:v24];
          [v21 _resolveChatConflictUsingCKRecord:v17 localGUID:v25];
        }
      }
    }
  }
  else
  {
    int v7 = [*(id *)(a1 + 40) recordType];
    int v8 = [v7 isEqualToString:@"chatLockRecordType"];

    if (v8)
    {
      if (IMOSLoggingEnabled())
      {
        uint64_t v9 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        {
          LOWORD(v26) = 0;
          _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "We are setting the lock record on the callback for processing records", (uint8_t *)&v26, 2u);
        }
      }
      [*(id *)(a1 + 48) setLockRecord:*(void *)(a1 + 40)];
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 40);
      id v11 = *(void **)(a1 + 48);
      [v11 _updateChatUsingCKRecord:v12 onRead:0 didSucceed:1 dispatchToMain:1];
    }
  }
}

uint64_t sub_1D9843878(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1D9843D90(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1F0] code:4 userInfo:0];
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_1D9843E0C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processModifyPerRecordCallBack_error_recordIDtoGUIDmap_);
}

uint64_t sub_1D9843E20(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processModifyRecordCompletion_deletedRecordIDs_error_completionBlock_);
}

void sub_1D9844858(uint64_t a1, void *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (v3)
  {
    if (IMOSLoggingEnabled())
    {
      char v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        int v14 = 138412546;
        id v15 = v3;
        __int16 v16 = 2112;
        uint64_t v17 = v5;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "**** Error %@ writing chat records %@ to cloudKit *****", (uint8_t *)&v14, 0x16u);
      }
    }
    if (([*(id *)(a1 + 40) _shouldResyncChatsForError:v3] & 1) == 0)
    {
      int v6 = [MEMORY[0x1E4F6E890] sharedInstance];
      [v6 autoBugCaptureWithSubType:@"ChatSync" errorPayload:v3];
    }
    uint64_t v7 = *(void *)(a1 + 56);
    if (v7) {
      (*(void (**)(uint64_t, void, id))(v7 + 16))(v7, 0, v3);
    }
  }
  else
  {
    if (IMIsRunningInAutomation())
    {
      int v8 = [MEMORY[0x1E4F6E6E8] sharedInstance];
      objc_msgSend(v8, "addNewChatsSyncedCount:", objc_msgSend(*(id *)(a1 + 32), "count") - 1);
    }
    int v9 = *(unsigned __int8 *)(a1 + 64);
    int v10 = IMOSLoggingEnabled();
    if (v9)
    {
      if (v10)
      {
        id v11 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "*** This was the last batch of chats to write up. Done writing up chats", (uint8_t *)&v14, 2u);
        }
      }
      uint64_t v12 = *(void *)(a1 + 56);
      if (v12) {
        (*(void (**)(uint64_t, uint64_t, void))(v12 + 16))(v12, 1, 0);
      }
    }
    else
    {
      if (v10)
      {
        id v13 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
        {
          LOWORD(v14) = 0;
          _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Kicking off another batch of chats to write up", (uint8_t *)&v14, 2u);
        }
      }
      [*(id *)(a1 + 40) _writeDirtyChatsToCloudKitWithActivity:*(void *)(a1 + 48) completion:*(void *)(a1 + 56)];
    }
  }
}

void sub_1D9844E00(uint64_t a1)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v2 = [*(id *)(a1 + 32) recordType];
  int v3 = [v2 isEqualToString:@"chatLockRecordType"];

  int v4 = IMOSLoggingEnabled();
  if (v3)
  {
    if (v4)
    {
      uint64_t v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        int v6 = *(void **)(a1 + 32);
        int v13 = 138412290;
        id v14 = v6;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "** We got the lock record %@ **", (uint8_t *)&v13, 0xCu);
      }
    }
    [*(id *)(a1 + 40) setLockRecord:*(void *)(a1 + 32)];
  }
  else
  {
    if (v4)
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = [*(id *)(a1 + 32) recordID];
        int v9 = [*(id *)(a1 + 32) _stringForKey:@"guid"];
        int v13 = 138412546;
        id v14 = v8;
        __int16 v15 = 2112;
        __int16 v16 = v9;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "_processRecordChanged changed recordID:%@ for ChatGUID %@", (uint8_t *)&v13, 0x16u);
      }
    }
    id v11 = *(void **)(a1 + 40);
    int v10 = (id *)(a1 + 40);
    [v11 _updateChatUsingCKRecord:*(v10 - 1) onRead:1 didSucceed:1 dispatchToMain:1];
    [*v10 setFetchedChatsDuringLastSync:1];
    uint64_t v12 = [*(v10 - 1) _assetForKey:@"gp"];
    [MEMORY[0x1E4F6E780] cleanUpAsset:v12];
  }
}

uint64_t sub_1D98451B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLatestSyncToken:*(void *)(a1 + 40)];
}

uint64_t sub_1D98453DC(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLatestSyncToken:*(void *)(a1 + 40)];
}

uint64_t sub_1D984552C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _writeDirtyChatsToCloudKitWithActivity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

void sub_1D9845B04(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    if (IMOSLoggingEnabled())
    {
      id v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Resetting local chat sync state & last sync date after receiving user deleted zone error", buf, 2u);
      }
    }
    int v3 = [*(id *)(a1 + 32) recordStore];
    [v3 clearLocalSyncState:3];

    int v4 = [*(id *)(a1 + 32) ckUtilities];
    [v4 resetLastSyncDate];
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Attempting to create chat zone", v19, 2u);
    }
  }
  int v6 = [*(id *)(a1 + 32) _chatZoneCreated];
  int v7 = v6;
  if (*(unsigned char *)(a1 + 49))
  {
    if (v6)
    {
      id v8 = [*(id *)(a1 + 32) syncState];
      char v9 = [v8 createdChatZone];

      if ((v9 & 1) == 0)
      {
        if (IMOSLoggingEnabled())
        {
          int v10 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)uint64_t v18 = 0;
            _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Attempting to create chat zone so setting createdChatZone BOOL to YES", v18, 2u);
          }
        }
        id v11 = [*(id *)(a1 + 32) syncState];
        [v11 setCreatedChatZone:1];
      }
    }
  }
  if (v7)
  {
    uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
    int v13 = *(void **)(v12 + 40);
    *(void *)(v12 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "** Failed to create chat zone **", v17, 2u);
      }
    }
    uint64_t v15 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1F0] code:1 userInfo:0];
    uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
    int v13 = *(void **)(v16 + 40);
    *(void *)(v16 + 40) = v15;
  }
}

uint64_t sub_1D9845E40(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) setLatestSyncToken:0];
}

uint64_t sub_1D9846204(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordChanged_);
}

uint64_t sub_1D9846210(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordDeletion_);
}

uint64_t sub_1D984621C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordZoneChangeTokenUpdated_zoneID_clienChangeToken_);
}

uint64_t sub_1D984622C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processRecordZoneFetchCompletion_zoneID_clientChangeTokenData_moreComing_error_);
}

uint64_t sub_1D9846244(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processFetchRecordChangesCompleted_activity_completion_syncType_);
}

void sub_1D98466B4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D98465C8);
  }
  _Block_object_dispose((const void *)(v10 - 176), 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D9846718(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  if (IMOSLoggingEnabled())
  {
    int v4 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      int v8 = 138412290;
      id v9 = v3;
      _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Fetched record %@", (uint8_t *)&v8, 0xCu);
    }
  }
  id v5 = *(id *)(a1 + 32);
  objc_sync_enter(v5);
  if (v3)
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 48) + 8);
    if (!*(unsigned char *)(v6 + 24))
    {
      *(unsigned char *)(v6 + 24) = 1;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7) {
        (*(void (**)(uint64_t, uint64_t, void))(v7 + 16))(v7, 1, 0);
      }
    }
  }
  objc_sync_exit(v5);
}

void sub_1D9846834(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D984686C(uint64_t a1, void *a2, void *a3, void *a4, int a5, void *a6)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v11 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  if (IMOSLoggingEnabled())
  {
    uint64_t v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      uint64_t v16 = *(void *)(a1 + 32);
      int v17 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 72) + 8) + 24);
      int v22 = 138412802;
      uint64_t v23 = v16;
      __int16 v24 = 2112;
      id v25 = v14;
      __int16 v26 = 1024;
      int v27 = v17;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Completed query %@ with error: %@, foundRecord: %d", (uint8_t *)&v22, 0x1Cu);
    }
  }
  id v18 = *(id *)(a1 + 40);
  objc_sync_enter(v18);
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24))
  {
    if (a5)
    {
      int v19 = *(_DWORD *)(a1 + 80);
      if (v19 >= 20) {
        uint64_t v20 = 200;
      }
      else {
        uint64_t v20 = (10 * v19);
      }
      [*(id *)(a1 + 48) _anyChatExistsOnServerWithResultsLimit:v20 changeToken:v12 activity:*(void *)(a1 + 56) completion:*(void *)(a1 + 64)];
    }
    else if (*(void *)(a1 + 64))
    {
      id v21 = v14;
      if (!v21)
      {
        id v21 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1F0] code:4 userInfo:0];
      }
      (*(void (**)(void))(*(void *)(a1 + 64) + 16))();
    }
  }
  objc_sync_exit(v18);
}

void sub_1D9846A54(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D9846B38(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordZoneManager];
  [v2 deleteChatZone];

  id v3 = [*(id *)(a1 + 32) recordZoneManager];
  [v3 deleteChat1Zone];
}

void sub_1D9846EAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v13 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  uint64_t v6 = v5;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = a2 == 4;
  if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
    goto LABEL_2;
  }
  if (!v5)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_2;
    }
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      LOWORD(v11) = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Not eligible for truth zone", (uint8_t *)&v11, 2u);
    }
    goto LABEL_14;
  }
  uint64_t v7 = [*(id *)(a1 + 32) syncState];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = [v7 isEligibleForTruthZone];

  if (IMOSLoggingEnabled())
  {
    int v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      int v11 = 138412290;
      id v12 = v6;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Received error checking eligibility: %@", (uint8_t *)&v11, 0xCu);
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if (*(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24)) {
        uint64_t v10 = @"YES";
      }
      else {
        uint64_t v10 = @"NO";
      }
      int v11 = 138412290;
      id v12 = v10;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "Returning cached value: %@", (uint8_t *)&v11, 0xCu);
    }
LABEL_14:
  }
LABEL_2:
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

void sub_1D98474B0(uint64_t a1)
{
  id v1 = [*(id *)(a1 + 32) recordStore];
  [v1 resetLocalSyncStateIfAppropriate];
}

void sub_1D9847908(uint64_t a1)
{
  id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1F0] code:6 userInfo:0];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D9847984(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  [*(id *)(a1 + 32) setIsSyncing:0];
  if (a2)
  {
    id v5 = +[IMDCKBackupController sharedInstance];
    [v5 setFirstSyncDateToNow];

    uint64_t v6 = +[IMDCKBackupController sharedInstance];
    [v6 toggleiCloudBackupsIfNeeded:0];
  }
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = v9;
  if (v7)
  {
    (*(void (**)(uint64_t, uint64_t, id))(v7 + 16))(v7, a2, v9);
    int v8 = v9;
  }
}

void sub_1D9847A3C(uint64_t a1)
{
  if (([*(id *)(a1 + 32) _eligibleForTruthZone] & 1) == 0 && IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "**** Not Eligible For Truth Zone, but earlier we were able to fetch the chat zone. Something is up! ****", buf, 2u);
    }
  }
  uint64_t v3 = *(void *)(a1 + 56);
  if (!v3)
  {
    if (IMOSLoggingEnabled())
    {
      int v4 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v4, OS_LOG_TYPE_INFO, "Syncing chats in new device bring up scenario", buf, 2u);
      }
    }
    [*(id *)(a1 + 32) setLatestSyncToken:0];
    uint64_t v3 = *(void *)(a1 + 56);
  }
  uint64_t v6 = *(void **)(a1 + 32);
  id v5 = *(void **)(a1 + 40);
  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D9847BF4;
  v8[3] = &unk_1E6B77D28;
  void v8[4] = v6;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v11 = v3;
  uint64_t v12 = v7;
  id v9 = v5;
  id v10 = *(id *)(a1 + 48);
  [v6 _syncChatsWithCloudKitWithCompletionType:v3 activity:v9 syncChatsCompletionBlock:v8];
}

void sub_1D9847BF4(uint64_t a1, char a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v18 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Chat sync error %@", buf, 0xCu);
    }
  }
  if ([*(id *)(a1 + 32) _shouldResyncChatsForError:v5])
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v18 = v5;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "*********** we failed to sync Chats due to op lock %@, kicking off another chat sync", buf, 0xCu);
      }
    }
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D9847E78;
    block[3] = &unk_1E6B76BA0;
    int v8 = *(void **)(a1 + 40);
    void block[4] = *(void *)(a1 + 32);
    long long v16 = *(_OWORD *)(a1 + 56);
    id v14 = v8;
    id v15 = *(id *)(a1 + 48);
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  else
  {
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 3221225472;
    _DWORD v9[2] = sub_1D9847E90;
    v9[3] = &unk_1E6B742C8;
    id v11 = *(id *)(a1 + 48);
    char v12 = a2;
    id v10 = v5;
    dispatch_async(MEMORY[0x1E4F14428], v9);
  }
}

uint64_t sub_1D9847E78(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "__syncChatsWithCloudKit:attemptCount:activity:withCompletion:", *(void *)(a1 + 56), *(void *)(a1 + 64) + 1, *(void *)(a1 + 40), *(void *)(a1 + 48));
}

uint64_t sub_1D9847E90(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 40);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void))(result + 16))(result, *(unsigned __int8 *)(a1 + 48), *(void *)(a1 + 32));
  }
  return result;
}

void sub_1D9847EB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    id v2 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D1F0] code:3 userInfo:0];
    (*(void (**)(uint64_t, void, id))(v1 + 16))(v1, 0, v2);
  }
}

void sub_1D984856C(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 32);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        if (IMOSLoggingEnabled())
        {
          uint64_t v7 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 138412290;
            uint64_t v14 = v6;
            _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Deleted chat with recordID %@", buf, 0xCu);
          }
        }
      }
      uint64_t v3 = [v2 countByEnumeratingWithState:&v9 objects:v15 count:16];
    }
    while (v3);
  }

  int v8 = [*(id *)(a1 + 40) chatRegistry];
  [v8 clearPendingDeleteTable];
}

void sub_1D9848988(uint64_t a1, void *a2, void *a3)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (v5 || !v6)
  {
    if (IMOSLoggingEnabled())
    {
      int v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        int v9 = 138412290;
        id v10 = v5;
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Failed to filter record IDs for chat deletion sync, error: %@", (uint8_t *)&v9, 0xCu);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  }
  else
  {
    [*(id *)(a1 + 32) _deleteChatRecordsWithRecordIDs:v6 completion:*(void *)(a1 + 40)];
  }
}

void sub_1D9848C40(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (IMOSLoggingEnabled())
  {
    id v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "***** WE should not get record completion block in delete operation", v7, 2u);
    }
  }
}

void sub_1D9848CF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v6 = a4;
  [*(id *)(a1 + 32) _handleChatDeletionCompletionForRecordIDs:a3 error:v6];
  if (*(void *)(a1 + 40))
  {
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    void v7[2] = sub_1D9848DC4;
    v7[3] = &unk_1E6B73A10;
    id v9 = *(id *)(a1 + 40);
    id v8 = v6;
    dispatch_async(MEMORY[0x1E4F14428], v7);
  }
}

uint64_t sub_1D9848DC4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1D9848FC4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v7 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134218242;
      uint64_t v19 = [v5 count];
      __int16 v20 = 2112;
      id v21 = v6;
      _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Completed chat record fetch with %llu results, error: %@", buf, 0x16u);
    }
  }
  id v8 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
  uint64_t v12 = MEMORY[0x1E4F143A8];
  uint64_t v13 = 3221225472;
  uint64_t v14 = sub_1D9849190;
  id v15 = &unk_1E6B77D50;
  id v16 = *(id *)(a1 + 32);
  id v17 = v8;
  id v9 = v8;
  [v5 enumerateKeysAndObjectsUsingBlock:&v12];
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = objc_msgSend(v9, "copy", v12, v13, v14, v15);
  (*(void (**)(uint64_t, id, void *))(v10 + 16))(v10, v6, v11);
}

void sub_1D9849190(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = [v6 modificationDate];
  id v8 = v7;
  if (v7
    && ([v7 earlierDate:*(void *)(a1 + 32)],
        id v9 = objc_claimAutoreleasedReturnValue(),
        v9,
        v9 == v8))
  {
    [*(id *)(a1 + 40) addObject:v5];
    if (IMOSLoggingEnabled())
    {
      uint64_t v10 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        int v13 = 138412802;
        id v14 = v5;
        __int16 v15 = 2112;
        id v16 = v8;
        __int16 v17 = 2112;
        uint64_t v18 = v12;
        _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Including chat with record ID %@ modification date %@ since it is before %@", (uint8_t *)&v13, 0x20u);
      }
      goto LABEL_10;
    }
  }
  else if (IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = *(void *)(a1 + 32);
      int v13 = 138412802;
      id v14 = v5;
      __int16 v15 = 2112;
      id v16 = v8;
      __int16 v17 = 2112;
      uint64_t v18 = v11;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Filtering out chat with record ID %@ modification date %@ since it is after %@", (uint8_t *)&v13, 0x20u);
    }
LABEL_10:
  }
}

void sub_1D9849500(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8 = a3;
  id v9 = a4;
  uint64_t v10 = [v9 path];
  uint64_t v11 = [MEMORY[0x1E4F28CB8] defaultManager];
  int v12 = [v11 fileExistsAtPath:v10];

  if (v12)
  {
    uint64_t v13 = IMCommSafetyContentAttachmentTypeForURL();
    if (v13 != 2)
    {
      uint64_t v14 = v13;
      id v15 = v9;
      id v16 = v15;
      if (!v14)
      {
        uint64_t v18 = IMPreviewExtension();
        id v16 = IMAttachmentPreviewFileURL();

        if (!v16
          || ([v16 path],
              uint64_t v19 = objc_claimAutoreleasedReturnValue(),
              [MEMORY[0x1E4F28CB8] defaultManager],
              __int16 v20 = objc_claimAutoreleasedReturnValue(),
              char v21 = [v20 fileExistsAtPath:v19],
              v20,
              v19,
              (v21 & 1) == 0))
        {

LABEL_13:
          goto LABEL_14;
        }
      }
      if (IMOSLoggingEnabled())
      {
        __int16 v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Checking sensitivity for existing attachment preview", buf, 2u);
        }
      }
      [a1 checkPreviewSensitivityIfNeededFor:v8 attachmentURL:v15 persistedPreviewURL:v16 isFromMe:a5];
      goto LABEL_13;
    }
  }
LABEL_14:
}

void sub_1D98496C4(void *a1, uint64_t a2, void *a3, void *a4, void *a5, int a6)
{
  id v10 = a3;
  id v11 = a4;
  id v12 = a5;
  uint64_t v13 = [MEMORY[0x1E4F6E6D0] sharedManager];
  uint64_t v14 = v13;
  if (a6)
  {
    char v15 = [v13 checksForSensitivityOnSend];

    if ((v15 & 1) == 0) {
      goto LABEL_19;
    }
  }
  else
  {
    int v16 = [v13 checksForSensitivityOnReceive];

    if (!v16) {
      goto LABEL_19;
    }
  }
  if ([a1 _shouldForceSensitivityResult])
  {
    if (a6) {
      uint64_t v17 = 2;
    }
    else {
      uint64_t v17 = 1;
    }
    [v10 setCommSafetySensitive:v17];
  }
  else
  {
    uint64_t v18 = dispatch_group_create();
    dispatch_group_enter(v18);
    uint64_t v19 = IMCommSafetyContentAttachmentTypeForURL();
    if (v19 == 1) {
      __int16 v20 = v11;
    }
    else {
      __int16 v20 = v12;
    }
    id v21 = v20;
    uint64_t v22 = [MEMORY[0x1E4F6E6C8] sharedManager];
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 3221225472;
    void v27[2] = sub_1D98498F4;
    v27[3] = &unk_1E6B77230;
    char v30 = a6;
    id v28 = v10;
    uint64_t v23 = v18;
    uint64_t v29 = v23;
    [v22 isSensitiveContent:v21 contentAttachmentType:v19 useBlastDoor:1 withChatID:0 completionHandler:v27];
    dispatch_time_t v24 = dispatch_time(0, 30000000000);
    if (dispatch_group_wait(v23, v24) && IMOSLoggingEnabled())
    {
      id v25 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)__int16 v26 = 0;
        _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "Timed out waiting for sensitive image check", v26, 2u);
      }
    }
  }
LABEL_19:
}

void sub_1D98498F4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  if (v5)
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        int v16 = 138412290;
        id v17 = v5;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Received CommSafety response from Media-Analysis-Daemon with error %@", (uint8_t *)&v16, 0xCu);
      }
    }
  }
  else
  {
    if (a2)
    {
      if (*(unsigned char *)(a1 + 48)) {
        uint64_t v7 = 2;
      }
      else {
        uint64_t v7 = 1;
      }
      id v8 = (id *)MEMORY[0x1E4F6DD78];
      if (!*(unsigned char *)(a1 + 48)) {
        id v8 = (id *)MEMORY[0x1E4F6DD70];
      }
      id v9 = (void *)MEMORY[0x1E4F6E890];
      id v10 = *v8;
      id v11 = [v9 sharedInstance];
      [v11 trackEvent:v10];
    }
    else
    {
      uint64_t v7 = 0;
    }
    id v12 = [MEMORY[0x1E4F6E710] sharedInstance];
    [v12 logPrivatizedImageReceivedEvent:a2];

    if (IMOSLoggingEnabled())
    {
      uint64_t v13 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
      {
        uint64_t v14 = [NSNumber numberWithBool:a2];
        char v15 = [NSNumber numberWithInteger:v7];
        int v16 = 138412546;
        id v17 = v14;
        __int16 v18 = 2112;
        uint64_t v19 = v15;
        _os_log_impl(&dword_1D967A000, v13, OS_LOG_TYPE_INFO, "Received CommSafety response from Media-Analysis-Daemon with result %@, %@", (uint8_t *)&v16, 0x16u);
      }
    }
    [*(id *)(a1 + 32) setCommSafetySensitive:v7];
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_1D984A2AC(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D984A200);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D984A548()
{
  qword_1EBE2BC18 = objc_alloc_init(IMDCollaborationNoticeController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D984A8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D984A900(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D984A910(uint64_t a1)
{
}

uint64_t sub_1D984A918(uint64_t a1)
{
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:*(void *)(*(void *)(a1 + 32) + 16)];

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D984AA4C(uint64_t a1)
{
  *(void *)(*(void *)(a1 + 32) + 16) = [MEMORY[0x1E4F1C9E8] dictionaryWithDictionary:*(void *)(a1 + 40)];

  return MEMORY[0x1F41817F8]();
}

void sub_1D984AFA4(uint64_t a1, void *a2)
{
  id v3 = a2;
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D984B054;
  block[3] = &unk_1E6B73BC8;
  id v4 = *(void **)(a1 + 40);
  void block[4] = *(void *)(a1 + 32);
  id v7 = v3;
  id v8 = v4;
  id v5 = v3;
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void sub_1D984B054(uint64_t a1)
{
  v5[1] = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) broadcastNoticesDidChangeForChatGUIDs:*(void *)(a1 + 40)];
  id v2 = [*(id *)(a1 + 32) noticeDispatcher];
  id v3 = [*(id *)(a1 + 48) guidString];
  v5[0] = v3;
  id v4 = [MEMORY[0x1E4F1C978] arrayWithObjects:v5 count:1];
  [v2 reflectDismissalForNoticeGUIDs:v4];
}

void sub_1D984B5D8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v14 = IMLogHandleForCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
      sub_1D9905054();
    }
  }
  else
  {
    id v8 = (void *)MEMORY[0x1E4F22398];
    id v9 = *(void **)(a1 + 32);
    v15[0] = MEMORY[0x1E4F143A8];
    v15[1] = 3221225472;
    _OWORD v15[2] = sub_1D984B734;
    v15[3] = &unk_1E6B77DC8;
    id v10 = v9;
    uint64_t v11 = *(void *)(a1 + 72);
    int v16 = v10;
    uint64_t v22 = v11;
    id v17 = v5;
    id v18 = *(id *)(a1 + 40);
    id v19 = *(id *)(a1 + 48);
    id v12 = *(id *)(a1 + 56);
    uint64_t v13 = *(void *)(a1 + 64);
    id v20 = v12;
    uint64_t v21 = v13;
    [v8 getAppLinkWithURL:v10 completionHandler:v15];

    uint64_t v14 = v16;
  }
}

void sub_1D984B734(uint64_t a1, void *a2, void *a3)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v28 = a3;
  if (!v5 || v28)
  {
    id v6 = IMLogHandleForCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
      sub_1D9905140(a1);
    }
  }
  id v7 = [v5 targetApplicationRecord];
  id v8 = [v7 bundleIdentifier];

  if (![v8 length])
  {
    id v9 = IMLogHandleForCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_1D99050C8();
    }
  }
  if ([v8 isEqualToString:@"com.apple.CloudKit.ShareBear"])
  {
    id v27 = objc_alloc_init(MEMORY[0x1E4F6EA70]);
    [v27 bundleIDsForCollaborationURL:*(void *)(a1 + 32)];
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    id v10 = (id)objc_claimAutoreleasedReturnValue();
    uint64_t v11 = [v10 countByEnumeratingWithState:&v29 objects:v35 count:16];
    if (v11)
    {
      uint64_t v12 = *(void *)v30;
      while (2)
      {
        for (uint64_t i = 0; i != v11; ++i)
        {
          if (*(void *)v30 != v12) {
            objc_enumerationMutation(v10);
          }
          uint64_t v14 = *(void **)(*((void *)&v29 + 1) + 8 * i);
          char v15 = (void *)[objc_alloc(MEMORY[0x1E4F223C8]) initWithBundleIdentifier:v14 allowPlaceholder:0 error:0];
          if (v15)
          {
            id v16 = v14;

            id v8 = v16;
            goto LABEL_21;
          }
        }
        uint64_t v11 = [v10 countByEnumeratingWithState:&v29 objects:v35 count:16];
        if (v11) {
          continue;
        }
        break;
      }
    }
LABEL_21:

    if ([v8 isEqualToString:@"com.apple.CloudKit.ShareBear"])
    {
      if (IMOSLoggingEnabled())
      {
        id v17 = OSLogHandleForIMFoundationCategory();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          uint64_t v18 = *(void *)(a1 + 32);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v34 = v18;
          _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Could not find an app record for the notice URL: %@", buf, 0xCu);
        }
      }
      uint64_t v19 = [v10 firstObject];

      id v8 = (void *)v19;
    }
  }
  id v20 = (void *)MEMORY[0x1E4F6E6B8];
  uint64_t v21 = *(void *)(a1 + 80);
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = [*(id *)(a1 + 40) title];
  dispatch_time_t v24 = [*(id *)(a1 + 40) contentType];
  id v25 = [v20 metadataWithType:v21 bundleIdentifier:v8 contentURL:v22 contentTitle:v23 contentType:v24 messageGUID:0];

  __int16 v26 = [MEMORY[0x1E4F6E6B0] noticeWithGUIDString:*(void *)(a1 + 48) sender:*(void *)(a1 + 56) metadata:v25 date:*(void *)(a1 + 64) dateViewed:0];
  [*(id *)(a1 + 72) _processNotice:v26];
}

void sub_1D984BB60(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1D984BBFC;
  void v5[3] = &unk_1E6B73218;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  dispatch_async(MEMORY[0x1E4F14428], v5);
}

uint64_t sub_1D984BBFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) broadcastNoticesDidChangeForChatGUIDs:*(void *)(a1 + 40)];
}

void sub_1D984BCDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  void v5[2] = sub_1D984BD78;
  void v5[3] = &unk_1E6B73218;
  void v5[4] = *(void *)(a1 + 32);
  id v6 = v3;
  id v4 = v3;
  dispatch_async(MEMORY[0x1E4F14428], v5);
}

uint64_t sub_1D984BD78(uint64_t a1)
{
  return [*(id *)(a1 + 32) broadcastNoticesDidChangeForChatGUIDs:*(void *)(a1 + 40)];
}

void sub_1D984C020(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D984C114;
  block[3] = &unk_1E6B75410;
  id v7 = *(id *)(a1 + 40);
  id v8 = *(id *)(a1 + 48);
  id v9 = v3;
  id v10 = *(id *)(a1 + 56);
  id v11 = *(id *)(a1 + 64);
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1D984C114(uint64_t a1)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  [*(id *)(a1 + 32) addObject:*(void *)(a1 + 40)];
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v2 = *(id *)(a1 + 48);
  uint64_t v3 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; ++i)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        id v8 = objc_msgSend(*(id *)(a1 + 56), "objectForKeyedSubscript:", v7, (void)v11);

        id v9 = *(void **)(a1 + 56);
        if (v8)
        {
          id v10 = [*(id *)(a1 + 56) objectForKeyedSubscript:v7];
          [v10 addObject:*(void *)(a1 + 40)];
        }
        else
        {
          id v10 = [MEMORY[0x1E4F1CA80] setWithObject:*(void *)(a1 + 40)];
          [v9 setValue:v10 forKey:v7];
        }
      }
      uint64_t v4 = [v2 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 64));
}

void sub_1D984C290(id *a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  id v2 = [a1[4] highlightURLs];
  uint64_t v3 = (void *)[v2 mutableCopy];

  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = a1[5];
  uint64_t v5 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v4);
        }
        objc_msgSend(v3, "removeObject:", *(void *)(*((void *)&v15 + 1) + 8 * v8++), (void)v15);
      }
      while (v6 != v8);
      uint64_t v6 = [v4 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  id v9 = [v3 allObjects];
  uint64_t v10 = [v9 count];

  if (v10)
  {
    long long v11 = [a1[4] noticeStore];
    long long v12 = [v3 allObjects];
    [v11 deleteNoticesForURLs:v12];
  }
  long long v13 = objc_msgSend(a1[5], "copy", (void)v15);
  [a1[4] setHighlightURLs:v13];

  long long v14 = (void *)[a1[6] copy];
  [a1[4] setHighlightURLsForChatGUID:v14];

  [a1[4] setHasPopulatedHighlightTracking:1];
}

void sub_1D984C80C(id *a1, void *a2)
{
  id v3 = a2;
  id v4 = [a1[4] collaborationNoticeDispatcherQueue];
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D984C8E8;
  block[3] = &unk_1E6B73BC8;
  id v7 = v3;
  id v8 = a1[5];
  id v9 = a1[6];
  id v5 = v3;
  dispatch_async(v4, block);
}

void sub_1D984C8E8(uint64_t a1)
{
  if ([*(id *)(a1 + 32) count]) {
    [*(id *)(a1 + 40) addObjectsFromArray:*(void *)(a1 + 32)];
  }
  id v2 = *(NSObject **)(a1 + 48);

  dispatch_group_leave(v2);
}

void sub_1D984C930(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  id v2 = [*(id *)(a1 + 40) allObjects];
  [v1 broadcastNoticesDidChangeForChatGUIDs:v2];
}

void sub_1D984CCDC(uint64_t a1, uint64_t a2)
{
  [*(id *)(a1 + 32) broadcastNoticesDidChangeForChatGUIDs:a2];
  id v3 = [*(id *)(a1 + 32) noticeDispatcher];
  [v3 reflectDismissalForNoticeGUIDs:*(void *)(a1 + 40)];
}

void sub_1D984CE2C(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v4 = [MEMORY[0x1E4F1CA48] array];
  if (a2)
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v5 = objc_msgSend(*(id *)(a1 + 32), "attributions", 0);
    uint64_t v6 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = *(void *)v15;
      while (2)
      {
        for (uint64_t i = 0; i != v7; ++i)
        {
          if (*(void *)v15 != v8) {
            objc_enumerationMutation(v5);
          }
          uint64_t v10 = *(void **)(*((void *)&v14 + 1) + 8 * i);
          long long v11 = [v10 conversationIdentifier];
          long long v12 = v11;
          if (v11)
          {
            if (![v11 length])
            {
              long long v13 = IMLogHandleForCategory();
              if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
                sub_1D990531C((uint64_t)v10);
              }

              goto LABEL_18;
            }
            [v4 addObject:v12];
          }
        }
        uint64_t v7 = [v5 countByEnumeratingWithState:&v14 objects:v18 count:16];
        if (v7) {
          continue;
        }
        break;
      }
    }
  }
  else
  {
    id v5 = IMLogHandleForCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_1D99052E8();
    }
  }
LABEL_18:

  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
}

uint64_t sub_1D984D0C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1D984D230(id *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    uint64_t v10 = IMLogHandleForCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      sub_1D99053C0((uint64_t)a1);
    }

    (*((void (**)(void))a1[7] + 2))();
  }
  else
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F6EA70]);
    id v9 = [a1[5] highlightCenter];
    v11[0] = MEMORY[0x1E4F143A8];
    v11[1] = 3221225472;
    void v11[2] = sub_1D984D384;
    v11[3] = &unk_1E6B77EE0;
    id v12 = a1[6];
    id v13 = a1[7];
    [v8 fetchAttributionsForHighlight:v9 highlight:v5 completionBlock:v11];
  }
}

void sub_1D984D384(uint64_t a1, void *a2)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v3 = objc_msgSend(a2, "attributions", 0);
  uint64_t v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v9 = [v8 conversationIdentifier];
        uint64_t v10 = v9;
        if (v9)
        {
          if (![v9 length])
          {
            long long v11 = IMLogHandleForCategory();
            if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
              sub_1D990531C((uint64_t)v8);
            }

            goto LABEL_15;
          }
          [*(id *)(a1 + 32) addObject:v10];
        }
      }
      uint64_t v5 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_15:

  uint64_t v12 = *(void *)(a1 + 40);
  id v13 = (void *)[*(id *)(a1 + 32) copy];
  (*(void (**)(uint64_t, void *))(v12 + 16))(v12, v13);
}

void sub_1D984DBC8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        id v13 = [v7 localizedDescription];
        *(_DWORD *)long long buf = 138412546;
        id v21 = v5;
        __int16 v22 = 2112;
        uint64_t v23 = v13;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Could not get collaborationHighlight: %@, error: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v8 = objc_alloc_init(MEMORY[0x1E4F6EA70]);
    id v9 = [*(id *)(a1 + 32) highlightCenter];
    v14[0] = MEMORY[0x1E4F143A8];
    v14[1] = 3221225472;
    v14[2] = sub_1D984DDBC;
    void v14[3] = &unk_1E6B77F80;
    id v10 = *(id *)(a1 + 40);
    uint64_t v19 = *(void *)(a1 + 64);
    uint64_t v11 = *(void *)(a1 + 32);
    id v15 = v10;
    uint64_t v16 = v11;
    id v17 = v5;
    long long v18 = *(_OWORD *)(a1 + 48);
    [v8 fetchAttributionsForHighlight:v9 highlight:v17 completionBlock:v14];
  }
}

void sub_1D984DDBC(uint64_t a1, void *a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  uint64_t v4 = [v3 attributions];
  id v5 = (void *)[v4 countByEnumeratingWithState:&v31 objects:v37 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v32;
LABEL_3:
    uint64_t v7 = 0;
    while (1)
    {
      if (*(void *)v32 != v6) {
        objc_enumerationMutation(v4);
      }
      id v8 = *(void **)(*((void *)&v31 + 1) + 8 * v7);
      if ([v8 isGroupConversation])
      {
        id v9 = [*(id *)(a1 + 32) guid];
        id v10 = [v8 conversationIdentifier];
        int v11 = [v9 isEqualToString:v10];

        if (v11) {
          break;
        }
      }
      if (v5 == (void *)++v7)
      {
        id v5 = (void *)[v4 countByEnumeratingWithState:&v31 objects:v37 count:16];
        if (v5) {
          goto LABEL_3;
        }
        goto LABEL_16;
      }
    }
    id v5 = [v8 uniqueIdentifier];
    uint64_t v12 = [v8 collaborationMetadata];
    id v13 = [v12 containerSetupInfo];

    if (v13) {
      goto LABEL_17;
    }
    if (IMOSLoggingEnabled())
    {
      long long v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        uint64_t v36 = v5;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "containerSetupInfo is nil for messageGUID: %@", buf, 0xCu);
      }
    }
  }
LABEL_16:
  id v13 = 0;
LABEL_17:

  if (*(void *)(a1 + 72) == 8
    && ([*(id *)(a1 + 40) _highlightEligibleForSuggestAddingUser:*(void *)(a1 + 48)] & 1) == 0)
  {
    if (IMOSLoggingEnabled())
    {
      __int16 v22 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v36) = 90;
        _os_log_impl(&dword_1D967A000, v22, OS_LOG_TYPE_INFO, "Collaboration highlight is older than %d days, ineligible for add notice.", buf, 8u);
      }
    }
  }
  else
  {
    id v15 = *(void **)(a1 + 40);
    uint64_t v16 = *(void *)(a1 + 56);
    v24[0] = MEMORY[0x1E4F143A8];
    v24[1] = 3221225472;
    v24[2] = sub_1D984E130;
    void v24[3] = &unk_1E6B77F58;
    void v24[4] = v16;
    id v17 = v13;
    uint64_t v18 = *(void *)(a1 + 72);
    id v25 = v17;
    uint64_t v30 = v18;
    int8x16_t v23 = *(int8x16_t *)(a1 + 32);
    id v19 = (id)v23.i64[0];
    int8x16_t v26 = vextq_s8(v23, v23, 8uLL);
    id v20 = *(id *)(a1 + 48);
    uint64_t v21 = *(void *)(a1 + 64);
    id v27 = v20;
    uint64_t v28 = v21;
    id v29 = v5;
    [v15 _isShareBearURL:v16 completionHandler:v24];
  }
}

void sub_1D984E130(uint64_t a1, int a2)
{
  if (a2)
  {
    if (IMOSLoggingEnabled())
    {
      id v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "CloudKit/iCloud Drive collaboration", buf, 2u);
      }
    }
    uint64_t v4 = (void *)MEMORY[0x1E0169C30](@"CSCloudSharing", @"CloudSharing");
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    v13[0] = MEMORY[0x1E4F143A8];
    v13[1] = 3221225472;
    void v13[2] = sub_1D984E328;
    v13[3] = &unk_1E6B77F30;
    uint64_t v18 = *(void *)(a1 + 88);
    uint64_t v7 = *(void *)(a1 + 48);
    id v8 = *(void **)(a1 + 56);
    void v13[4] = v5;
    void v13[5] = v7;
    id v14 = v8;
    id v9 = *(id *)(a1 + 64);
    uint64_t v10 = *(void *)(a1 + 72);
    int v11 = *(void **)(a1 + 80);
    id v15 = v9;
    uint64_t v16 = v10;
    id v17 = v11;
    [v4 ckMetadataFromShareURL:v5 containerSetupInfo:v6 completionHandler:v13];
  }
  else
  {
    [*(id *)(a1 + 48) _generateParticipantChangeNoticesForChat:*(void *)(a1 + 56) highlight:*(void *)(a1 + 64) participant:*(void *)(a1 + 72) noticeType:*(void *)(a1 + 88) checkedPrivileges:0 messageGUID:*(void *)(a1 + 80)];
    if (IMOSLoggingEnabled())
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "3rd party collaboration", buf, 2u);
      }
    }
  }
}

void sub_1D984E328(uint64_t a1, void *a2, void *a3)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    int v11 = IMLogHandleForCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      sub_1D9905434((uint64_t)v5);
    }

    goto LABEL_29;
  }
  if (IMOSLoggingEnabled())
  {
    id v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      int v17 = 138412290;
      uint64_t v18 = v9;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Checking permissions for URL: %@", (uint8_t *)&v17, 0xCu);
    }
  }
  uint64_t v10 = [v5 share];
  if ([v10 publicPermission] == 2)
  {
  }
  else
  {
    uint64_t v12 = [v5 share];
    BOOL v13 = [v12 publicPermission] == 3;

    if (!v13) {
      goto LABEL_22;
    }
  }
  if (IMOSLoggingEnabled())
  {
    id v14 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Public share, show public sharing banner", (uint8_t *)&v17, 2u);
    }
  }
  if (*(void *)(a1 + 80) == 9)
  {
    if (IMOSLoggingEnabled())
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17) = 0;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Not displaying remove banner for public sharing", (uint8_t *)&v17, 2u);
      }
LABEL_21:

      goto LABEL_29;
    }
    goto LABEL_29;
  }
LABEL_22:
  if ([v5 participantRole] != 1 && objc_msgSend(v5, "participantRole") != 2)
  {
    if (!IMOSLoggingEnabled()) {
      goto LABEL_29;
    }
    id v15 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, "Does not have admin rights to add/remove from the share", (uint8_t *)&v17, 2u);
    }
    goto LABEL_21;
  }
  if (IMOSLoggingEnabled())
  {
    uint64_t v16 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Has admin rights to add/remove from the share", (uint8_t *)&v17, 2u);
    }
  }
  [*(id *)(a1 + 40) _generateParticipantChangeNoticesForChat:*(void *)(a1 + 48) highlight:*(void *)(a1 + 56) participant:*(void *)(a1 + 64) noticeType:*(void *)(a1 + 80) checkedPrivileges:1 messageGUID:*(void *)(a1 + 72)];
LABEL_29:
}

void sub_1D984E860(uint64_t a1, void *a2, void *a3)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  uint64_t v41 = v5;
  id v42 = a3;
  if (v42)
  {
    if (IMOSLoggingEnabled())
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = [*(id *)(a1 + 32) URL];
        *(_DWORD *)long long buf = 138412546;
        id v44 = v7;
        __int16 v45 = 2112;
        id v46 = v42;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Could not get appLink from url: %@ with error: %@", buf, 0x16u);
      }
    }
  }
  else
  {
    id v8 = [v5 targetApplicationRecord];
    uint64_t v9 = [v8 bundleIdentifier];

    if (![v9 length])
    {
      uint64_t v10 = IMLogHandleForCategory();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_1D99054A4(a1);
      }
    }
    if ([v9 isEqualToString:@"com.apple.CloudKit.ShareBear"])
    {
      int v11 = [MEMORY[0x1E4F6EA28] sharedManager];
      uint64_t v12 = [*(id *)(a1 + 32) URL];
      BOOL v13 = [v11 lsAppRecordForShareBearURL:v12];

      if (v13)
      {
        id v14 = [v13 bundleIdentifier];
        BOOL v15 = [v14 length] == 0;

        if (!v15)
        {
          uint64_t v16 = [v13 bundleIdentifier];

          uint64_t v9 = (void *)v16;
        }
      }
    }
    id v17 = objc_alloc(MEMORY[0x1E4F1CAD0]);
    uint64_t v18 = [*(id *)(a1 + 40) participantHandles];
    id v40 = (void *)[v17 initWithArray:v18];

    if (IMOSLoggingEnabled())
    {
      uint64_t v19 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        id v44 = v9;
        __int16 v45 = 2112;
        id v46 = v40;
        _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "Bundle identifier for notice: %@ with participants: %@", buf, 0x16u);
      }
    }
    id v20 = (void *)MEMORY[0x1E4F6E6B8];
    uint64_t v21 = *(void *)(a1 + 72);
    __int16 v22 = [*(id *)(a1 + 32) URL];
    int8x16_t v23 = [*(id *)(a1 + 32) title];
    uint64_t v24 = [*(id *)(a1 + 32) contentType];
    id v25 = [v20 metadataWithType:v21 bundleIdentifier:v9 contentURL:v22 contentTitle:v23 contentType:v24 messageGUID:*(void *)(a1 + 48)];

    if (*(void *)(a1 + 72) == 8) {
      int8x16_t v26 = @"add";
    }
    else {
      int8x16_t v26 = @"remove";
    }
    id v27 = v26;
    uint64_t v28 = NSString;
    id v29 = [*(id *)(a1 + 56) ID];
    uint64_t v30 = [*(id *)(a1 + 40) groupID];
    long long v31 = [*(id *)(a1 + 32) URL];
    long long v32 = [v28 stringWithFormat:@"%@:%@/%@/%@", v27, v29, v30, v31];

    long long v33 = [v32 dataUsingEncoding:4];
    long long v34 = IMSharedHelperMD5OfData();

    uint64_t v35 = (void *)MEMORY[0x1E4F6E6B0];
    uint64_t v36 = [*(id *)(a1 + 56) ID];
    id v37 = [MEMORY[0x1E4F1C9C8] date];
    uint64_t v38 = [v35 noticeWithGUIDString:v34 sender:v36 metadata:v25 date:v37 dateViewed:0];

    if (IMOSLoggingEnabled())
    {
      id v39 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412290;
        id v44 = v38;
        _os_log_impl(&dword_1D967A000, v39, OS_LOG_TYPE_INFO, "Sending notice to process: %@", buf, 0xCu);
      }
    }
    [*(id *)(a1 + 64) _processNotice:v38];
  }
}

void sub_1D984F0F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  if (!v5 || v6)
  {
    id v8 = IMLogHandleForCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_1D9905140(a1);
    }
  }
  uint64_t v9 = [v5 targetApplicationRecord];
  uint64_t v10 = [v9 bundleIdentifier];

  LODWORD(v9) = [v10 isEqualToString:@"com.apple.CloudKit.ShareBear"];
  int v11 = IMOSLoggingEnabled();
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "ShareBear identifier: CloudKit or iCloud Drive app", buf, 2u);
      }
    }
    BOOL v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (v11)
    {
      id v14 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)BOOL v15 = 0;
        _os_log_impl(&dword_1D967A000, v14, OS_LOG_TYPE_INFO, "Share URL is coming from a 3rd party app", v15, 2u);
      }
    }
    BOOL v13 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v13();
}

IMDStickerRegistry *sub_1D984F45C()
{
  uint64_t result = objc_alloc_init(IMDStickerRegistry);
  qword_1EBE2BA28 = (uint64_t)result;
  return result;
}

uint64_t sub_1D984FC2C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  if (a5 && [a2 count])
  {
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        uint64_t v9 = *(void *)(a1 + 32);
        int v12 = 138412546;
        uint64_t v13 = v9;
        __int16 v14 = 2112;
        uint64_t v15 = [a2 objectAtIndexedSubscript:0];
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "Received transcoded output from balloon bundle id %@ path %@", (uint8_t *)&v12, 0x16u);
      }
    }
    objc_msgSend((id)objc_msgSend(a2, "objectAtIndexedSubscript:", 0), "path");
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      int v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        int v12 = 138412546;
        uint64_t v13 = a4;
        __int16 v14 = 2112;
        uint64_t v15 = (uint64_t)a2;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "IMDStickerRegistry. Failed retrieving sticker me-sticker with error %@, outputURLS %@", (uint8_t *)&v12, 0x16u);
      }
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 48) + 16))();
  }
}

id SMSSafeMimeTypeForMimeType(void *a1)
{
  uint64_t v1 = qword_1EA8CA678;
  id v2 = a1;
  if (v1 != -1) {
    dispatch_once(&qword_1EA8CA678, &unk_1F33921A0);
  }
  id v3 = [v2 lowercaseString];

  if ([v3 length])
  {
    uint64_t v4 = [(id)qword_1EA8CA670 objectForKey:v3];
    id v5 = (void *)v4;
    if (v4) {
      id v6 = (void *)v4;
    }
    else {
      id v6 = v3;
    }
    id v7 = v6;
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

uint64_t sub_1D984FEBC()
{
  qword_1EA8CA670 = objc_msgSend(objc_alloc(MEMORY[0x1E4F1C9E8]), "initWithObjectsAndKeys:", @"text/x-vcalendar", @"text/x-vcalendar", @"text/vcalendar", @"text/x-vcalendar", @"text/x-calendar", @"text/x-vcalendar", @"text/calendar", @"text/x-vcard", @"text/x-vlocation", @"text/x-vcard", @"text/x-location", @"text/x-vcard", @"text/x-vcard", @"text/x-vcard", @"text/vcard", @"text/plain", @"text/plain",
                      @"image/jpeg",
                      @"image/jpg",
                      @"image/x-bmp",
                      @"image/bmp",
                      @"image/x-bmp",
                      @"image/x-bmp",
                      @"audio/x-aac",
                      @"audio/x-aac",
                      @"audio/x-aac",
                      @"audio/aac",
                      @"video/3gpp",
                      @"video/3gp",
                      @"video/3gpp",
                      @"video/3gpp",
                      0);

  return MEMORY[0x1F41817F8]();
}

id CreateSMILStringForMessageParts(void *a1)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  id v1 = a1;
  id v28 = objc_alloc_init(MEMORY[0x1E4F28E78]);
  if (qword_1EA8CA688 != -1) {
    dispatch_once(&qword_1EA8CA688, &unk_1F33921C0);
  }
  [v28 appendString:qword_1EA8CA680];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      id v3 = MarcoLoggingStringForMessageData();
      *(_DWORD *)long long buf = 138412290;
      id v35 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Generating SMIL for pieces: %@", buf, 0xCu);
    }
  }
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  id obj = v1;
  uint64_t v4 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
  if (!v4)
  {

    goto LABEL_34;
  }
  char v27 = 0;
  char v5 = 0;
  char v6 = 1;
  uint64_t v7 = *(void *)v30;
  do
  {
    uint64_t v8 = 0;
    do
    {
      if (*(void *)v30 != v7) {
        objc_enumerationMutation(obj);
      }
      uint64_t v9 = *(void **)(*((void *)&v29 + 1) + 8 * v8);
      uint64_t v10 = [v9 objectForKey:@"Type"];
      int v11 = SMSSafeMimeTypeForMimeType(v10);

      int v12 = [v9 objectForKey:@"Path"];
      uint64_t v13 = [v12 lastPathComponent];

      __int16 v14 = [v9 objectForKey:@"Tag"];
      char v15 = [v14 isEqualToString:@"text"];
      v6 |= v5;
      if (v15)
      {
        unsigned int v16 = 0;
        id v17 = @"Text";
      }
      else
      {
        if ([v11 isEqualToString:@"vcard"]) {
          goto LABEL_27;
        }
        if ([v14 isEqualToString:@"img"])
        {
          unsigned int v16 = 0;
        }
        else
        {
          char v18 = [v14 isEqualToString:@"video"];
          uint64_t v19 = [v9 objectForKey:@"Duration"];
          unsigned int v16 = [v19 intValue];

          if ((v18 & 1) == 0)
          {
            id v20 = [NSString stringWithFormat:@"<%@ src=\"%@\"/>\n", v14, v13];
LABEL_20:
            if (v27) {
              [v28 appendString:@"</par>\n"];
            }
            if (v16) {
              uint64_t v21 = v16;
            }
            else {
              uint64_t v21 = 10;
            }
            __int16 v22 = objc_msgSend(NSString, "stringWithFormat:", @"<par dur=\"%ds\">\n", v21);
            [v28 appendString:v22];

            char v27 = 1;
            goto LABEL_26;
          }
        }
        char v6 = 1;
        id v17 = @"Image";
      }
      id v20 = [NSString stringWithFormat:@"<%@ src=\"%@\" region=\"%@\"/>\n", v14, v13, v17];
      if (v6) {
        goto LABEL_20;
      }
LABEL_26:
      [v28 appendString:v20];

      char v6 = 0;
      char v5 = v15;
LABEL_27:

      ++v8;
    }
    while (v4 != v8);
    uint64_t v23 = [obj countByEnumeratingWithState:&v29 objects:v33 count:16];
    uint64_t v4 = v23;
  }
  while (v23);

  if (v27) {
    [v28 appendString:@"</par>\n"];
  }
LABEL_34:
  if (qword_1EA8CA698 != -1) {
    dispatch_once(&qword_1EA8CA698, &unk_1F33921E0);
  }
  [v28 appendString:qword_1EA8CA690];
  if (IMOSLoggingEnabled())
  {
    uint64_t v24 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138412290;
      id v35 = v28;
      _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "proposed smil: %@", buf, 0xCu);
    }
  }

  return v28;
}

void sub_1D9850488()
{
  uint64_t v0 = (void *)qword_1EA8CA680;
  qword_1EA8CA680 = @"<smil>\n<head>\n<layout>\n <root-layout/>\n<region id=\"Text\" top=\"70%\" left=\"0%\" height=\"30%\" width=\"100%\" fit=\"scroll\"/>\n<region id=\"Image\" top=\"0%\" left=\"0%\" height=\"70%\" width=\"100%\" fit=\"meet\"/>\n</layout>\n</head>\n<body>\n";
}

void sub_1D98504A0()
{
  uint64_t v0 = (void *)qword_1EA8CA690;
  qword_1EA8CA690 = @"</body>\n</smil>\n";
}

uint64_t sub_1D985050C()
{
  qword_1EBE2BA30 = objc_alloc_init(IMDRecentsController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D98507CC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D98507F8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9850808(uint64_t a1)
{
}

void sub_1D9850810(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  if (sub_1D98508A8(a3))
  {
    char v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      char v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    [v5 addObject:v9];
  }
}

BOOL sub_1D98508A8(void *a1)
{
  id v1 = a1;
  id v2 = v1;
  if (v1)
  {
    [v1 timeIntervalSinceNow];
    BOOL v4 = v3 < 0.0;
  }
  else
  {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1D98508F4(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  if (sub_1D98508A8(a3))
  {
    char v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      id v6 = objc_alloc_init(MEMORY[0x1E4F1CA48]);
      uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
      uint64_t v8 = *(void **)(v7 + 40);
      *(void *)(v7 + 40) = v6;

      char v5 = *(void **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    [v5 addObject:v9];
  }
}

id sub_1D9850F18(void *a1)
{
  id v1 = [a1 recordID];
  id v2 = [v1 recordName];

  return v2;
}

id sub_1D9850F70(void *a1)
{
  id v1 = objc_msgSend(a1, "_dataForKey:");
  id v2 = JWDecodeDictionary();

  return v2;
}

id sub_1D9850FC0(void *a1)
{
  id v1 = objc_msgSend(a1, "_arrayForKey:");
  id v2 = objc_msgSend(v1, "__imArrayByApplyingBlock:", &unk_1F3392220);

  return v2;
}

uint64_t sub_1D9851014()
{
  return JWDecodeDictionary();
}

id sub_1D985101C(void *a1)
{
  id v1 = objc_msgSend(a1, "_assetForKey:");
  id v2 = [v1 fileURL];

  return v2;
}

void sub_1D9851534(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D98514E8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D9851D60()
{
  qword_1EBE2BA38 = objc_alloc_init(IMDCKUpdateSyncController);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D9851F30(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) recordZoneManager];
  [v2 deleteUpdateZone];

  double v3 = *(void **)(a1 + 32);

  return [v3 clearLocalSyncState:3];
}

uint64_t sub_1D98520F0(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)BOOL v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Resetting the sync token to nil", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) setLatestSyncToken:0];
}

uint64_t sub_1D98525DC(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordRead_);
}

uint64_t sub_1D98525E8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordDeleted_type_);
}

uint64_t sub_1D98525F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _onChangeTokenUpdated:a2 token:a3 data:a4];
}

uint64_t sub_1D985260C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordZoneFetchComplete_token_tokenData_moreComing_error_);
}

uint64_t sub_1D9852628(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onReadComplete_error_activity_completion_);
}

void sub_1D98527CC(uint64_t a1)
{
  id v2 = +[IMDChatRegistry sharedInstance];
  [v2 handleMessageUpdate:*(void *)(a1 + 32)];
}

uint64_t sub_1D9852A70(uint64_t a1)
{
  return [*(id *)(a1 + 32) setLatestSyncToken:*(void *)(a1 + 40)];
}

uint64_t sub_1D9853054(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9853064(uint64_t a1)
{
}

void sub_1D985306C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Attempting to create update zone", buf, 2u);
    }
  }
  if ([*(id *)(a1 + 32) _zoneCreated])
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v4 = *(void **)(v3 + 40);
    *(void *)(v3 + 40) = 0;
  }
  else
  {
    if (IMOSLoggingEnabled())
    {
      char v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "** Failed to create update zone **", v8, 2u);
      }
    }
    uint64_t v6 = [MEMORY[0x1E4F28C58] errorWithDomain:IMDCKUpdateSyncControllerErrorDomain code:1 userInfo:0];
    uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
    BOOL v4 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
}

void sub_1D9853384(uint64_t a1, char a2, void *a3)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  id v5 = a3;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = a2;
  if (!*(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) && IMOSLoggingEnabled())
  {
    uint64_t v6 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      int v7 = 138412290;
      id v8 = v5;
      _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Error creating update zone %@", (uint8_t *)&v7, 0xCu);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1D98535FC(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = a3;
  if (a2
    && (int64_t v5 = +[IMDCKUpdateSyncController stepAfter:*(void *)(a1 + 56)]) != 0)
  {
    [*(id *)(a1 + 32) _writeUpdatesWithType:*(void *)(a1 + 64) updateStep:v5 activity:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 48);
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, id))(v6 + 16))(v6, a2, v7);
    }
  }
}

void sub_1D9853940(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1D9853A08;
  void v10[3] = &unk_1E6B780F0;
  uint64_t v7 = *(void *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v10);
}

uint64_t sub_1D9853A08(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordT1Write_error_recordNameToRowIDMap_);
}

void sub_1D9853A20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1D9853AEC;
  v9[3] = &unk_1E6B78118;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = v6;
  uint64_t v7 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v5;
  id v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v8 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v9);
}

uint64_t sub_1D9853AEC(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count];
  [*(id *)(a1 + 32) _numberOfRecordsToFetchPerBatch];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel__onWriteT1Complete_error_shouldWriteMore_activity_completion_);
}

void sub_1D9854328(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = MEMORY[0x1E4F143A8];
  v10[1] = 3221225472;
  v10[2] = sub_1D98543F0;
  void v10[3] = &unk_1E6B780F0;
  uint64_t v7 = *(void *)(a1 + 40);
  void v10[4] = *(void *)(a1 + 32);
  id v11 = v5;
  id v12 = v6;
  uint64_t v13 = v7;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v10);
}

uint64_t sub_1D98543F0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__onRecordT2Write_error_recordNameToItemMap_);
}

void sub_1D9854408(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  id v5 = a4;
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1D98544D4;
  v9[3] = &unk_1E6B78118;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v14 = v6;
  uint64_t v7 = *(void **)(a1 + 40);
  void v9[4] = *(void *)(a1 + 32);
  id v10 = v5;
  id v11 = v7;
  id v12 = *(id *)(a1 + 48);
  id v8 = v5;
  dispatch_async(MEMORY[0x1E4F14428], v9);
}

uint64_t sub_1D98544D4(uint64_t a1)
{
  [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) count];
  [*(id *)(a1 + 32) _numberOfRecordsToFetchPerBatch];
  uint64_t v2 = *(void *)(a1 + 32);

  return MEMORY[0x1F4181798](v2, sel__onWriteT2Complete_error_shouldWriteMore_activity_completion_);
}

void sub_1D9855308(uint64_t a1)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDChatRegistry sharedInstance];
  uint64_t v3 = objc_msgSend(v2, "messagesPendingUpdateT1ToCloudKitWithLimit:", objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch"));

  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v26;
    *(void *)&long long v5 = 138412290;
    long long v23 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v26 != v6) {
          objc_enumerationMutation(obj);
        }
        id v8 = *(void **)(*((void *)&v25 + 1) + 8 * v7);
        id v9 = (void *)MEMORY[0x1E4F6E7F0];
        id v10 = +[IMDRecordZoneManager sharedInstance];
        id v11 = [v10 updateRecordZoneID];
        id v12 = +[IMDCKRecordSaltManager sharedInstance];
        uint64_t v13 = [v12 cachedSalt];
        uint64_t v14 = (void *)[v9 createCKRecordForUpdateT1:v8 zoneID:v11 salt:v13];

        if (v14)
        {
          char v15 = *(void **)(a1 + 40);
          unsigned int v16 = [v8 objectForKey:@"ROWID"];
          id v17 = [v14 recordID];
          char v18 = [v17 recordName];
          [v15 setObject:v16 forKey:v18];

          [*(id *)(a1 + 48) addObject:v14];
        }
        else
        {
          if (IMOSLoggingEnabled())
          {
            uint64_t v19 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = v23;
              long long v30 = v8;
              _os_log_impl(&dword_1D967A000, v19, OS_LOG_TYPE_INFO, "**** T1 Update item [%@] could not be converted to CKRecord, marking it as clean and moving on.", buf, 0xCu);
            }
          }
          id v20 = [v8 objectForKey:@"ROWID"];
          uint64_t v21 = [v20 longLongValue];

          __int16 v22 = +[IMDMessageStore sharedInstance];
          [v22 markMessageAsCleanWithROWID:v21];
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [obj countByEnumeratingWithState:&v25 objects:v31 count:16];
    }
    while (v4);
  }
}

void sub_1D98558F4(uint64_t a1)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = +[IMDChatRegistry sharedInstance];
  uint64_t v3 = objc_msgSend(v2, "messagesPendingUpdateT2ToCloudKitWithLimit:", objc_msgSend(*(id *)(a1 + 32), "_numberOfRecordsToFetchPerBatch"));

  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id obj = v3;
  uint64_t v4 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
  if (v4)
  {
    uint64_t v6 = *(void *)v22;
    *(void *)&long long v5 = 138412290;
    long long v19 = v5;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v22 != v6) {
          objc_enumerationMutation(obj);
        }
        uint64_t v8 = *(void *)(*((void *)&v21 + 1) + 8 * v7);
        id v9 = (void *)MEMORY[0x1E4F6E7F0];
        id v10 = +[IMDRecordZoneManager sharedInstance];
        id v11 = [v10 updateRecordZoneID];
        id v12 = +[IMDCKRecordSaltManager sharedInstance];
        uint64_t v13 = [v12 cachedSalt];
        uint64_t v14 = (void *)[v9 createCKRecordForUpdateT2:v8 zoneID:v11 salt:v13];

        if (v14)
        {
          char v15 = *(void **)(a1 + 40);
          unsigned int v16 = [v14 recordID];
          id v17 = [v16 recordName];
          [v15 setObject:v8 forKey:v17];

          [*(id *)(a1 + 48) addObject:v14];
        }
        else if (IMOSLoggingEnabled())
        {
          char v18 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = v19;
            uint64_t v26 = v8;
            _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "**** T2 Update item [%@] could not be converted to CKRecord.", buf, 0xCu);
          }
        }
        ++v7;
      }
      while (v4 != v7);
      uint64_t v4 = [obj countByEnumeratingWithState:&v21 objects:v27 count:16];
    }
    while (v4);
  }
}

void sub_1D9855FA8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  if (v4)
  {
    long long v5 = v4;
    if (xpc_activity_get_state(v4) == 4) {
      _IMWarn();
    }
    else {
      [a1 setXPCActivity:v5];
    }
    uint64_t v4 = v5;
  }
}

void sub_1D985615C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  int v7 = IMOSLoggingEnabled();
  if (!v5)
  {
    if (v7)
    {
      long long v23 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        uint64_t v24 = *(void *)(a1 + 32);
        long long v25 = @"NO";
        *(_DWORD *)long long buf = 138412802;
        if (!v6) {
          long long v25 = @"YES";
        }
        uint64_t v33 = v24;
        __int16 v34 = 2112;
        id v35 = v25;
        __int16 v36 = 2112;
        id v37 = v6;
        _os_log_impl(&dword_1D967A000, v23, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMS/MMS message with GUID (%@). Success = (%@), SInt32 error = (%@).", buf, 0x20u);
      }
    }
    uint64_t v14 = [*(id *)(a1 + 48) objectForKey:IMDCTMessageDictionaryTypeKey];
    long long v22 = [*(id *)(a1 + 48) objectForKey:IMDCTMessageDictionarySenderKey];
    uint64_t v26 = [NSString stringWithFormat:@"%@-%@.smsdata", v14, *(void *)(a1 + 32)];
    long long v27 = [MEMORY[0x1E4F6E7E0] writeMessagePayloadToTemporaryDirectory:*(void *)(a1 + 48) fileName:v26];
    +[IMBlastdoor sendBlastDoorError:v6 guid:*(void *)(a1 + 32) messageTypeString:v14 senderURI:v22 senderToken:0 messageContext:0 payloadAttachmentURL:v27];
    uint64_t v28 = *(void *)(a1 + 64);
    if (v28) {
      (*(void (**)(uint64_t, void, void, void))(v28 + 16))(v28, 0, 0, 0);
    }

    goto LABEL_19;
  }
  if (v7)
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      id v9 = @"NO";
      uint64_t v10 = *(void *)(a1 + 32);
      if (!v6) {
        id v9 = @"YES";
      }
      *(_DWORD *)long long buf = 138412546;
      uint64_t v33 = v10;
      __int16 v34 = 2112;
      id v35 = v9;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMS/MMS message with GUID (%@). Success = (%@).", buf, 0x16u);
    }
  }
  MEMORY[0x1E0169C30](@"BlastDoorSMSMessage", @"BlastDoor");
  if (objc_opt_isKindOfClass())
  {
    id v11 = *(void **)(a1 + 40);
    uint64_t v12 = *(void *)(a1 + 48);
    id v13 = v5;
    uint64_t v14 = [v11 _messageDictionaryToRelayWithIncomingMessageDictionary:v12 smsMessage:v13];
    char v15 = [*(id *)(a1 + 40) relayController];
    unsigned int v16 = [v13 GUID];
    id v17 = [*(id *)(a1 + 40) service];
    char v18 = [v17 internalName];
    [v15 _prepareSMSRelayBlockForMessageDictionary:v14 messageGUID:v16 serviceName:v18];

    long long v19 = *(void **)(a1 + 40);
    uint64_t v20 = *(void *)(a1 + 56);
    uint64_t v21 = *(unsigned __int8 *)(a1 + 72);
    v29[0] = MEMORY[0x1E4F143A8];
    v29[1] = 3221225472;
    void v29[2] = sub_1D9856550;
    v29[3] = &unk_1E6B78140;
    id v30 = *(id *)(a1 + 32);
    id v31 = *(id *)(a1 + 64);
    [v19 _releasePendingMessagesAndProcessReceivedSMSMessage:v13 storageContext:v20 receivedViaRelay:v21 completionBlock:v29];

    long long v22 = v30;
LABEL_19:
  }
}

void sub_1D9856550(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  if (IMOSLoggingEnabled())
  {
    uint64_t v8 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = @"NO";
      int v12 = 138412802;
      if (a2) {
        uint64_t v10 = @"YES";
      }
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      id v15 = v7;
      __int16 v16 = 2112;
      id v17 = v10;
      _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "_processReceivedSMSMessage for original GUID (%@) parsed GUID (%@) returned (%@).", (uint8_t *)&v12, 0x20u);
    }
  }
  uint64_t v11 = *(void *)(a1 + 40);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t, id, uint64_t))(v11 + 16))(v11, a2, v7, a4);
  }
}

uint64_t sub_1D98567F0(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__processReceivedSMSMessage_storageContext_receivedViaRelay_completionBlock_);
}

uint64_t sub_1D985BF80(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D985BF90(uint64_t a1)
{
}

void sub_1D985BF98(uint64_t a1, char a2, void *a3, void *a4)
{
  uint64_t v37 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = [*(id *)(a1 + 48) accountID];
  int v12 = [*(id *)(a1 + 56) sender];
  [v10 assignTransfer:v9 toAccount:v11 otherPerson:v12];

  uint64_t v13 = *(void **)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 40);
  id v15 = [v7 path];
  [v13 acceptTransfer:v14 path:v15];

  __int16 v16 = +[IMDFileTransferCenter sharedInstance];
  uint64_t v17 = [v16 transferForGUID:*(void *)(a1 + 40)];
  uint64_t v18 = *(void *)(*(void *)(a1 + 72) + 8);
  long long v19 = *(void **)(v18 + 40);
  *(void *)(v18 + 40) = v17;

  [*(id *)(a1 + 64) addObject:*(void *)(*(void *)(*(void *)(a1 + 72) + 8) + 40)];
  if (a2)
  {
    uint64_t v20 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v21 = [v7 path];
    int v22 = [v20 fileExistsAtPath:v21];

    if (v22)
    {
      long long v23 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
      if (v23)
      {
        [v23 _setLocalURL:v7];
        if (IMOSLoggingEnabled())
        {
          uint64_t v24 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v24, OS_LOG_TYPE_INFO))
          {
            int v35 = 138412290;
            id v36 = v7;
            _os_log_impl(&dword_1D967A000, v24, OS_LOG_TYPE_INFO, "Set transfer local url to: %@", (uint8_t *)&v35, 0xCu);
          }
        }
        if (IMOSLoggingEnabled())
        {
          long long v25 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v25, OS_LOG_TYPE_INFO))
          {
            uint64_t v26 = *(void **)(*(void *)(*(void *)(a1 + 72) + 8) + 40);
            int v35 = 138412290;
            id v36 = v26;
            _os_log_impl(&dword_1D967A000, v25, OS_LOG_TYPE_INFO, "  => Start finalizing file transfer: %@", (uint8_t *)&v35, 0xCu);
          }
        }
        [*(id *)(a1 + 32) startFinalizingTransfer:*(void *)(a1 + 40)];
        goto LABEL_33;
      }
      [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) error:0];
      if (!IMOSLoggingEnabled()) {
        goto LABEL_33;
      }
      id v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        __int16 v34 = *(void **)(a1 + 40);
        int v35 = 138412290;
        id v36 = v34;
        _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "No file transfer generated for guid: %@", (uint8_t *)&v35, 0xCu);
      }
    }
    else
    {
      [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) error:0];
      if (!IMOSLoggingEnabled()) {
        goto LABEL_33;
      }
      id v31 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
      {
        uint64_t v33 = *(void **)(a1 + 40);
        int v35 = 138412290;
        id v36 = v33;
        _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", (uint8_t *)&v35, 0xCu);
      }
    }
LABEL_32:

    goto LABEL_33;
  }
  long long v27 = [v8 domain];
  if (![v27 isEqualToString:*MEMORY[0x1E4F6D430]])
  {

    goto LABEL_21;
  }
  uint64_t v28 = [v8 code];

  if (v28 != 28)
  {
LABEL_21:
    [*(id *)(a1 + 32) failTransfer:*(void *)(a1 + 40) error:v8];
    if (!IMOSLoggingEnabled()) {
      goto LABEL_33;
    }
    id v31 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v31, OS_LOG_TYPE_INFO))
    {
      uint64_t v32 = *(void **)(a1 + 40);
      int v35 = 138412290;
      id v36 = v32;
      _os_log_impl(&dword_1D967A000, v31, OS_LOG_TYPE_INFO, "Could not locate file for transfer: %@", (uint8_t *)&v35, 0xCu);
    }
    goto LABEL_32;
  }
  if (IMOSLoggingEnabled())
  {
    long long v29 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
    {
      id v30 = *(void **)(a1 + 40);
      int v35 = 138412290;
      id v36 = v30;
      _os_log_impl(&dword_1D967A000, v29, OS_LOG_TYPE_INFO, "Transfer rejected: %@", (uint8_t *)&v35, 0xCu);
    }
  }
  [*(id *)(a1 + 32) rejectTransfer:*(void *)(a1 + 40)];
LABEL_33:
}

void sub_1D985C484(void *a1, int a2, void *a3, void *a4)
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  id v7 = a3;
  id v8 = a4;
  if (IMOSLoggingEnabled())
  {
    uint64_t v9 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "MMS safe render generation complete.", buf, 2u);
    }
  }
  if (v8 && IMOSLoggingEnabled())
  {
    uint64_t v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      uint64_t v11 = a1[4];
      *(_DWORD *)long long buf = 138412546;
      uint64_t v23 = v11;
      __int16 v24 = 2112;
      id v25 = v8;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Error decontaminating MMS transfer: %@ error: %@", buf, 0x16u);
    }
  }
  if (a2 && ([(id)a1[5] isEqual:v7] & 1) != 0)
  {
    if (IMOSLoggingEnabled())
    {
      int v12 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
      {
        uint64_t v13 = a1[5];
        *(_DWORD *)long long buf = 138412290;
        uint64_t v23 = v13;
        _os_log_impl(&dword_1D967A000, v12, OS_LOG_TYPE_INFO, "Generating safe render succeeded, but still using the original path since we cannot transcode the entire asset: %@", buf, 0xCu);
      }
    }
    id v14 = 0;
  }
  else
  {
    id v15 = [MEMORY[0x1E4F28CB8] defaultManager];
    uint64_t v16 = a1[5];
    id v21 = 0;
    char v17 = [v15 removeItemAtURL:v16 error:&v21];
    id v14 = v21;

    if ((v17 & 1) == 0 && IMOSLoggingEnabled())
    {
      uint64_t v18 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
      {
        uint64_t v19 = a1[5];
        *(_DWORD *)long long buf = 138412546;
        uint64_t v23 = v19;
        __int16 v24 = 2112;
        id v25 = v14;
        _os_log_impl(&dword_1D967A000, v18, OS_LOG_TYPE_INFO, "Error removing MMS transfer: %@ error: %@", buf, 0x16u);
      }
    }
    uint64_t v20 = [MEMORY[0x1E4F28C58] errorWithDomain:*MEMORY[0x1E4F6D430] code:28 userInfo:0];

    id v8 = (id)v20;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1D985C7AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  id v7 = a4;
  [*(id *)(a1 + 32) setCategory:a2];
  [*(id *)(a1 + 32) setSubCategory:a3];
  [*(id *)(a1 + 32) setSpamExtensionName:v7];
  id v8 = [*(id *)(a1 + 40) findChatAndLinkMessage:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) context:*(void *)(a1 + 32)];
  uint64_t v9 = [v8 chatIdentifier];
  uint64_t v10 = [MEMORY[0x1E4F6E858] sharedInstance];
  [v10 sendNotificationMessageIfNeededForIncomingMessageFromChatIdentifier:v9];

  if (*(void *)(a1 + 48))
  {
    uint64_t v11 = [*(id *)(a1 + 40) tapbackInterpreter];
    uint64_t v12 = [v11 interpretMessageItem:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) inChat:*(void *)(a1 + 48)];
    uint64_t v13 = *(void *)(*(void *)(a1 + 64) + 8);
    id v14 = *(void **)(v13 + 40);
    *(void *)(v13 + 40) = v12;
  }
  if (*(int *)(a1 + 72) >= 1)
  {
    if (IMOSLoggingEnabled())
    {
      id v15 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
      {
        int v16 = *(_DWORD *)(a1 + 72);
        v27[0] = 67109120;
        v27[1] = v16;
        _os_log_impl(&dword_1D967A000, v15, OS_LOG_TYPE_INFO, " => This is a replace message for ID: %d", (uint8_t *)v27, 8u);
      }
    }
    objc_msgSend(*(id *)(a1 + 40), "didReceiveReplaceMessageID:forChat:style:", *(unsigned int *)(a1 + 72), v9, objc_msgSend(*(id *)(a1 + 32), "style"));
  }
  char v17 = [*(id *)(a1 + 32) senderUnformatted];

  if (v17)
  {
    uint64_t v18 = [*(id *)(a1 + 32) senderUnformatted];
    [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) setOriginalUnformattedID:v18];
  }
  uint64_t v19 = [*(id *)(a1 + 32) displayName];

  if (v8 && v19)
  {
    uint64_t v20 = [*(id *)(a1 + 32) displayName];
    [v8 setDisplayName:v20];
  }
  objc_msgSend(*(id *)(a1 + 40), "didReceiveMessage:forChat:style:fromIDSID:", *(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v9, objc_msgSend(*(id *)(a1 + 32), "style"), 0);
  id v21 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v22 = [v21 isSMSFilterSyncEnabled];

  if (v22)
  {
    BOOL v23 = *(unsigned char *)(a1 + 76) == 0;
    __int16 v24 = [*(id *)(a1 + 40) relayController];
    id v25 = v24;
    uint64_t v26 = *(void *)(a1 + 56);
    if (v23) {
      [v24 _executeSMSRelayBlockForMessageWithGUID:v26 category:a2 subCategory:a3];
    }
    else {
      [v24 _clearSMSRelayMapForMessageWithGUID:v26];
    }
  }
}

void sub_1D985D534(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D985D4E0);
  }
  _Unwind_Resume(a1);
}

void sub_1D985F9D4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1D985FB58(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1D985FF40(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Initial sync device Not writing up messages", v5, 2u);
    }
  }
  uint64_t v3 = *(void *)(a1 + 40);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, 1, 0);
  }
  return [*(id *)(a1 + 32) _noteSyncEnded];
}

uint64_t sub_1D9860B60(uint64_t a1)
{
  return [*(id *)(a1 + 32) fullfillWithValue:*(void *)(a1 + 40)];
}

void sub_1D9860DD8(uint64_t a1, void *a2)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  id v3 = a2;
  string = xpc_dictionary_get_string(v3, (const char *)*MEMORY[0x1E4F14560]);
  if (string)
  {
    id v5 = [NSString stringWithUTF8String:string];
    id v6 = xpc_dictionary_get_value(v3, "UserInfo");
    if (v6) {
      id v7 = (void *)_CFXPCCreateCFObjectFromXPCObject();
    }
    else {
      id v7 = 0;
    }
    if (IMOSLoggingEnabled())
    {
      id v8 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v10 = 138412802;
        *(void *)&void v10[4] = objc_opt_class();
        *(_WORD *)&v10[12] = 2112;
        *(void *)&v10[14] = v5;
        *(_WORD *)&v10[22] = 2112;
        uint64_t v11 = v7;
        id v9 = *(id *)&v10[4];
        _os_log_impl(&dword_1D967A000, v8, OS_LOG_TYPE_INFO, "%@ received event with name %@ and user info %@.", v10, 0x20u);
      }
    }
    objc_msgSend(*(id *)(a1 + 32), "didReceiveEventWithName:userInfo:", v5, v7, *(_OWORD *)v10, *(void *)&v10[16], v11);
  }
}

void sub_1D9861044(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) delegateToQueue];
  id v4 = v2;
  if (*(void *)(a1 + 40)) {
    uint64_t v3 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v3 = MEMORY[0x1E4F14428];
  }
  [v2 setObject:v3 forKey:*(void *)(a1 + 48)];
}

void sub_1D986115C(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) delegateToQueue];
  [v2 removeObjectForKey:*(void *)(a1 + 40)];
}

void sub_1D98612DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1D98612F4(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9861304(uint64_t a1)
{
}

void sub_1D986130C(uint64_t a1)
{
  id v5 = [*(id *)(a1 + 32) delegateToQueue];
  uint64_t v2 = [v5 objectForKey:*(void *)(a1 + 40)];
  uint64_t v3 = *(void *)(*(void *)(a1 + 48) + 8);
  id v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1D9861450(uint64_t a1)
{
  uint64_t v20 = *MEMORY[0x1E4F143B8];
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  uint64_t v2 = [*(id *)(a1 + 32) delegateToQueue];
  uint64_t v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = *(void *)v16;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v16 != v5) {
          objc_enumerationMutation(v2);
        }
        uint64_t v7 = *(void *)(*((void *)&v15 + 1) + 8 * v6);
        id v8 = [*(id *)(a1 + 32) delegateToQueue];
        id v9 = [v8 objectForKey:v7];

        if (v9)
        {
          v12[0] = MEMORY[0x1E4F143A8];
          v12[1] = 3221225472;
          void v12[2] = sub_1D9861604;
          uint64_t v12[3] = &unk_1E6B75928;
          uint64_t v10 = *(void *)(a1 + 32);
          uint64_t v11 = *(void **)(a1 + 40);
          void v12[4] = v7;
          void v12[5] = v10;
          id v13 = v11;
          id v14 = *(id *)(a1 + 48);
          dispatch_async(v9, v12);
        }
        ++v6;
      }
      while (v4 != v6);
      uint64_t v4 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v4);
  }
}

uint64_t sub_1D9861604(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_eventStreamHandler_didReceiveEventWithName_userInfo_);
}

uint64_t sub_1D9861740()
{
  qword_1EBE2BF30 = objc_alloc_init(IMDOffGridAvailabilityTracker);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9861C88(uint64_t a1)
{
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  [WeakRetained _updateTracker];
}

void sub_1D9861EA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  uint64_t v4 = [v3 handle];
  uint64_t v5 = [v3 expirationDate];

  v8[0] = MEMORY[0x1E4F143A8];
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1D9861F6C;
  v8[3] = &unk_1E6B75FE8;
  id v9 = v4;
  id v10 = v5;
  id v6 = v5;
  id v7 = v4;
  [v7 isOffGridModeWithCompletion:v8];
}

void sub_1D9861F6C(uint64_t a1, char a2)
{
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D9862018;
  block[3] = &unk_1E6B76578;
  id v5 = *(id *)(a1 + 32);
  char v7 = a2;
  id v6 = *(id *)(a1 + 40);
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void sub_1D9862018(uint64_t a1)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [*(id *)(a1 + 32) ID];
      uint64_t v4 = (void *)v3;
      id v5 = @"YES";
      if (!*(unsigned char *)(a1 + 48)) {
        id v5 = @"NO";
      }
      int v18 = 138412546;
      uint64_t v19 = v3;
      __int16 v20 = 2112;
      id v21 = v5;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Handle %@ is off grid %@", (uint8_t *)&v18, 0x16u);
    }
  }
  if (*(unsigned char *)(a1 + 48))
  {
    id v6 = +[IMDAccountController sharedInstance];
    char v7 = [v6 anySessionForServiceName:*MEMORY[0x1E4F6E1B0]];

    id v9 = *(void **)(a1 + 32);
    uint64_t v8 = a1 + 32;
    BOOL v10 = *(unsigned char *)(v8 + 16) != 0;
    uint64_t v11 = [v9 ID];
    [v7 didReceiveOffGridStatus:v10 forID:v11 messageGUID:0 account:0];

    uint64_t v12 = +[IMDOffGridAvailabilityTracker sharedTracker];
    [v12 stopTrackingHandle:*(void *)v8];

LABEL_9:
    return;
  }
  id v13 = [MEMORY[0x1E4F1C9C8] date];
  id v14 = [v13 earlierDate:*(void *)(a1 + 40)];
  BOOL v15 = v14 == *(void **)(a1 + 40);

  if (v15)
  {
    if (IMOSLoggingEnabled())
    {
      long long v16 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
      {
        long long v17 = [*(id *)(a1 + 32) ID];
        int v18 = 138412290;
        uint64_t v19 = (uint64_t)v17;
        _os_log_impl(&dword_1D967A000, v16, OS_LOG_TYPE_INFO, "Handle %@ is expiring from tracking", (uint8_t *)&v18, 0xCu);
      }
    }
    char v7 = +[IMDOffGridAvailabilityTracker sharedTracker];
    [v7 stopTrackingHandle:*(void *)(a1 + 32)];
    goto LABEL_9;
  }
}

void sub_1D98629B8(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  id v6 = a3;
  id v7 = a4;
  int v8 = IMOSLoggingEnabled();
  if (v6)
  {
    if (v8)
    {
      id v9 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        BOOL v10 = @"NO";
        if (!v7) {
          BOOL v10 = @"YES";
        }
        int v13 = 138412290;
        id v14 = v10;
        _os_log_impl(&dword_1D967A000, v9, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMSFIlteringSettingsMessage. Success = (%@).", (uint8_t *)&v13, 0xCu);
      }
    }
    MEMORY[0x1E0169C30](@"BlastDoorSMSFilteringSettingsMessage", @"BlastDoor");
    if (objc_opt_isKindOfClass()) {
      [*(id *)(a1 + 32) _processReceivedSMSFilteringSettingsMessage:v6 deviceID:*(void *)(a1 + 40)];
    }
  }
  else if (v8)
  {
    uint64_t v11 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = @"NO";
      if (!v7) {
        uint64_t v12 = @"YES";
      }
      int v13 = 138412546;
      id v14 = v12;
      __int16 v15 = 2112;
      id v16 = v7;
      _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "BlastDoor finished processing SMSFilteringSettingsMessage. Success = (%@), SInt32 error = (%@).", (uint8_t *)&v13, 0x16u);
    }
  }
}

uint64_t sub_1D9862D9C()
{
  qword_1EBE2BCF0 = objc_alloc_init(IMDFilteringController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9862F00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = (void *)MEMORY[0x1E016A370]();
  id v8 = a2;
  id v9 = a5;
  if (IMOSLoggingEnabled())
  {
    BOOL v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "handleThirdPartyFilterUnregistered", buf, 2u);
    }
  }
  int v13 = v8;
  id v14 = v9;
  id v11 = v9;
  id v12 = v8;
  im_dispatch_after();
}

void sub_1D986303C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v7 = (void *)MEMORY[0x1E016A370]();
  id v8 = a2;
  id v9 = a5;
  if (IMOSLoggingEnabled())
  {
    BOOL v10 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "handleThirdPartyFilterUnregistered", buf, 2u);
    }
  }
  int v13 = v8;
  id v14 = v9;
  id v11 = v9;
  id v12 = v8;
  im_dispatch_after();
}

void sub_1D9863178(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)MEMORY[0x1E016A370]();
  id v4 = a2;
  if (IMOSLoggingEnabled())
  {
    id v5 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "handleChangeOfFilterParamsStatus", buf, 2u);
    }
  }
  id v7 = v4;
  id v6 = v4;
  im_dispatch_after();
}

void sub_1D9863A40(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D986392CLL);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D9864430(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9864440(uint64_t a1)
{
}

id sub_1D9864448()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EA8CA6B0;
  uint64_t v7 = qword_1EA8CA6B0;
  if (!qword_1EA8CA6B0)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1D98675F0;
    v3[3] = &unk_1E6B73480;
    void v3[4] = &v4;
    sub_1D98675F0((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1D9864514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D986452C(void *a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        id v8 = (void *)a1[4];
        *(_DWORD *)long long buf = 138412546;
        __int16 v24 = v8;
        __int16 v25 = 2112;
        id v26 = v6;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request for: %@ and received error: %@", buf, 0x16u);
      }
    }
    id v9 = 0;
    BOOL v10 = 0;
  }
  else
  {
    BOOL v10 = [v5 transactionalSubActions];
    id v9 = [v5 promotionalSubActions];
    if (IMOSLoggingEnabled())
    {
      id v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 138412546;
        __int16 v24 = v10;
        __int16 v25 = 2112;
        id v26 = v9;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Spam extension query response received: %@, %@", buf, 0x16u);
      }
    }
  }
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    [MEMORY[0x1E4F6E928] executeCompletionBlockForFilterParamsUpdate:v10 promo:v9];
    id v12 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v13 = [v12 isSMSFilterSyncEnabled];

    if (v13)
    {
      block[0] = MEMORY[0x1E4F143A8];
      block[1] = 3221225472;
      block[2] = sub_1D986482C;
      block[3] = &unk_1E6B73268;
      void block[4] = a1[5];
      dispatch_async(MEMORY[0x1E4F14428], block);
    }
  }
  else
  {
    v18[0] = MEMORY[0x1E4F143A8];
    v18[1] = 3221225472;
    void v18[2] = sub_1D98648CC;
    v18[3] = &unk_1E6B73BC8;
    id v19 = v10;
    id v14 = v9;
    uint64_t v15 = a1[5];
    id v20 = v14;
    uint64_t v21 = v15;
    dispatch_async(MEMORY[0x1E4F14428], v18);
  }
  uint64_t v16 = *(void *)(a1[6] + 8);
  uint64_t v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = 0;
}

uint64_t sub_1D986482C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request. Relaying updated sms filter settings", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _relaySMSFilteringSettingsForFilterState:1];
}

void sub_1D98648CC(void *a1)
{
  [MEMORY[0x1E4F6E928] executeCompletionBlockForFilterParamsUpdate:a1[4] promo:a1[5]];
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isSMSFilterSyncEnabled];

  if (v3)
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D986498C;
    block[3] = &unk_1E6B73268;
    void block[4] = a1[6];
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
}

uint64_t sub_1D986498C(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Performed spam extension capabilities query request. Relaying updated sms filter settings", v4, 2u);
    }
  }
  return [*(id *)(a1 + 32) _relaySMSFilteringSettingsForFilterState:1];
}

uint64_t sub_1D9864E70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _executeSpamCompletionBlockForMessageGuid:*(void *)(a1 + 40) category:0 subCategory:0 receivedViaRelay:*(unsigned __int8 *)(a1 + 48)];
}

id sub_1D9864E88()
{
  uint64_t v4 = 0;
  id v5 = &v4;
  uint64_t v6 = 0x2050000000;
  uint64_t v0 = (void *)qword_1EA8CA6B8;
  uint64_t v7 = qword_1EA8CA6B8;
  if (!qword_1EA8CA6B8)
  {
    v3[0] = MEMORY[0x1E4F143A8];
    v3[1] = 3221225472;
    v3[2] = sub_1D9867648;
    v3[3] = &unk_1E6B73480;
    void v3[4] = &v4;
    sub_1D9867648((uint64_t)v3);
    uint64_t v0 = (void *)v5[3];
  }
  id v1 = v0;
  _Block_object_dispose(&v4, 8);

  return v1;
}

void sub_1D9864F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1D9864F6C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v27 = *MEMORY[0x1E4F143B8];
  id v5 = a2;
  id v6 = a3;
  if (v6)
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v7 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
      {
        uint64_t v8 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412546;
        uint64_t v22 = v8;
        __int16 v23 = 2112;
        uint64_t v24 = (uint64_t)v6;
        _os_log_impl(&dword_1D967A000, v7, OS_LOG_TYPE_INFO, "Performed spam extension query request for: %@ and received error: %@", buf, 0x16u);
      }
    }
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = [v5 action];
    uint64_t v9 = objc_msgSend(MEMORY[0x1E4F6E928], "localizeSubAction:", objc_msgSend(v5, "subAction"));
    if (v9)
    {
      if ([MEMORY[0x1E4F6E928] isValidSubAction:v10 subAction:v9])
      {
        if (![MEMORY[0x1E4F6E938] isValidActiveFilterAction:v10 subAction:v9]) {
          uint64_t v9 = 0;
        }
      }
      else
      {
        uint64_t v9 = 0;
      }
    }
    if (IMOSLoggingEnabled())
    {
      id v11 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 138412802;
        uint64_t v22 = v12;
        __int16 v23 = 2048;
        uint64_t v24 = v10;
        __int16 v25 = 2048;
        uint64_t v26 = v9;
        _os_log_impl(&dword_1D967A000, v11, OS_LOG_TYPE_INFO, "Performed spam extension query request for: %@ and received response actionResponse: %ld, subActionResponse: %ld", buf, 0x20u);
      }
    }
  }
  if ([MEMORY[0x1E4F29060] isMainThread])
  {
    [*(id *)(a1 + 40) _executeSpamCompletionBlockForMessageGuid:*(void *)(a1 + 48) category:v10 subCategory:v9 receivedViaRelay:*(unsigned __int8 *)(a1 + 64)];
  }
  else
  {
    block[0] = MEMORY[0x1E4F143A8];
    block[1] = 3221225472;
    block[2] = sub_1D986522C;
    block[3] = &unk_1E6B782A8;
    int v13 = *(void **)(a1 + 48);
    void block[4] = *(void *)(a1 + 40);
    id v17 = v13;
    uint64_t v18 = v10;
    uint64_t v19 = v9;
    char v20 = *(unsigned char *)(a1 + 64);
    dispatch_async(MEMORY[0x1E4F14428], block);
  }
  uint64_t v14 = *(void *)(*(void *)(a1 + 56) + 8);
  uint64_t v15 = *(void **)(v14 + 40);
  *(void *)(v14 + 40) = 0;
}

uint64_t sub_1D986522C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _executeSpamCompletionBlockForMessageGuid:*(void *)(a1 + 40) category:*(void *)(a1 + 48) subCategory:*(void *)(a1 + 56) receivedViaRelay:*(unsigned __int8 *)(a1 + 64)];
}

void sub_1D9865608(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 32) + 8)
    && [*(id *)(a1 + 40) isEqualToString:*(void *)(a1 + 48)])
  {
    uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
    int v3 = [v2 isSMSFilterSyncEnabled];

    uint64_t v4 = *(void **)(a1 + 32);
    if (v3) {
      [v4 _disableSpamFilteringAndRelay];
    }
    else {
      [v4 _disableSpamFiltering];
    }
    if (IMOSLoggingEnabled())
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)id v6 = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Spam filter state changed to None", v6, 2u);
      }
    }
  }
  *(unsigned char *)(*(void *)(a1 + 32) + 8) = 0;
}

uint64_t sub_1D9866304(uint64_t a1)
{
  return [*(id *)(a1 + 32) _relaySMSFilteringSettingsForFilterState:0];
}

Class sub_1D9867430(uint64_t a1)
{
  sub_1D9867488();
  Class result = objc_getClass("ILMessageFilterCapabilitiesQueryRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1D9905648();
  }
  qword_1EA8CA6A0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1D9867488()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  v0[0] = 0;
  if (!qword_1EA8CA6A8)
  {
    v0[1] = (void *)MEMORY[0x1E4F143A8];
    v0[2] = (void *)3221225472;
    v0[3] = sub_1D986757C;
    v0[4] = &unk_1E6B72BE8;
    v0[5] = v0;
    long long v1 = xmmword_1E6B782F0;
    uint64_t v2 = 0;
    qword_1EA8CA6A8 = _sl_dlopen();
  }
  if (!qword_1EA8CA6A8) {
    sub_1D99056C4(v0);
  }
  if (v0[0]) {
    free(v0[0]);
  }
}

uint64_t sub_1D986757C()
{
  uint64_t result = _sl_dlopen();
  qword_1EA8CA6A8 = result;
  return result;
}

Class sub_1D98675F0(uint64_t a1)
{
  sub_1D9867488();
  Class result = objc_getClass("ILMessageFilter");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1D9905744();
  }
  qword_1EA8CA6B0 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1D9867648(uint64_t a1)
{
  sub_1D9867488();
  Class result = objc_getClass("ILMessageFilterQueryRequest");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24)) {
    sub_1D99057C0();
  }
  qword_1EA8CA6B8 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1D98676A0(uint64_t a1)
{
  uint64_t v2 = [MEMORY[0x1E4F6E778] sharedFeatureFlags];
  int v3 = [v2 isSMSFilterSyncEnabled];

  uint64_t v4 = *(void **)(a1 + 32);
  if (v3)
  {
    return MEMORY[0x1F4181798](v4, sel__checkAndUpdateFilterParamsForFilterExtension);
  }
  else
  {
    return [v4 _updateFilterParamsForFilterExtension];
  }
}

uint64_t sub_1D9867720(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__checkAndUpdateSMSSpamFilterExtensionForUnregisteredOrUpdatedPlugins_arePluginsRegistered_);
}

uint64_t sub_1D9867730(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__checkAndUpdateSMSSpamFilterExtensionForUnregisteredOrUpdatedPlugins_arePluginsRegistered_);
}

void sub_1D98690A0(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v28 = a2;
  id v16 = a3;
  id v17 = a4;
  id v18 = a5;
  id v19 = a6;
  id v20 = a7;
  id v21 = a8;
  id v22 = a9;
  uint64_t v23 = *(void *)(a1 + 32);
  id v24 = *(id *)(v23 + 200);
  if (v24 != v20)
  {
    *(void *)(v23 + 200) = 0;

    if ([v20 length])
    {
      uint64_t v25 = [[NSString alloc] initWithString:v20];
      uint64_t v26 = *(void *)(a1 + 32);
      uint64_t v27 = *(void **)(v26 + 200);
      *(void *)(v26 + 200) = v25;
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "_login_usernameAndPasswordReadyWithAccount:", *(void *)(a1 + 40));
}

void sub_1D98698C4(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D9869734);
  }
  _Unwind_Resume(a1);
}

void sub_1D9869914(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, char a9, unsigned __int8 a10, char a11)
{
  id v24 = a3;
  id v13 = a7;
  uint64_t v14 = *(void *)(a1 + 32);
  uint64_t v15 = *(void **)(v14 + 120);
  *(void *)(v14 + 120) = 0;

  if (*(unsigned char *)(*(void *)(a1 + 32) + 140))
  {
    if (a9)
    {
      [*(id *)(a1 + 40) setLoginStatus:0 message:0];
      [*(id *)(a1 + 32) disallowReconnection];
    }
    else if ([v13 length] && objc_msgSend(v24, "length"))
    {
      if (([v24 isEqualToString:*(void *)(*(void *)(a1 + 32) + 112)] & 1) == 0)
      {
        id v16 = objc_msgSend(MEMORY[0x1E4F1C9E8], "dictionaryWithObjectsAndKeys:", v24, *MEMORY[0x1E4F6C738], 0);
        [*(id *)(a1 + 40) writeAccountDefaults:v16];
      }
      if (*(id *)(*(void *)(a1 + 32) + 200) != v13)
      {
        uint64_t v17 = [v13 copy];
        uint64_t v18 = *(void *)(a1 + 32);
        id v19 = *(void **)(v18 + 200);
        *(void *)(v18 + 200) = v17;
      }
      id v20 = +[IMDDaemonPropertyManager sharedManager];
      id v21 = [NSNumber numberWithBool:a10];
      [v20 setValue:v21 ofPersistentProperty:@"RememberPassword"];

      *(unsigned char *)(*(void *)(a1 + 32) + 141) = 1;
      *(unsigned char *)(*(void *)(a1 + 32) + 141) = a10;
      objc_msgSend(*(id *)(a1 + 32), "_login_checkUsernameAndPasswordWithAccount:", *(void *)(a1 + 40));
    }
    else
    {
      if (a11)
      {
        id v22 = [*(id *)(a1 + 32) broadcaster];
        uint64_t v23 = [*(id *)(a1 + 40) accountID];
        [v22 showForgotPasswordNotificationForAccount:v23];
      }
      [*(id *)(a1 + 40) setLoginStatus:0 message:0];
      [*(id *)(a1 + 32) autoReconnectWithAccount:*(void *)(a1 + 40)];
    }
  }
}

uint64_t sub_1D9869C78(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__doLoginIgnoringProxy_);
}

void sub_1D986A664(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D986A61CLL);
  }
  _Unwind_Resume(a1);
}

void sub_1D986BD74(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D986BCC0);
  }
  _Unwind_Resume(a1);
}

void sub_1D986C368(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D986C350);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D986C990(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1D986CA78(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1D986DBE0(uint64_t a1, void *a2)
{
  uint64_t v2 = [a2 handleInfo];
  int v3 = JWEncodeDictionary();

  return v3;
}

IMDHandle *sub_1D986E8E0(uint64_t a1, void *a2)
{
  id v2 = a2;
  int v3 = [IMDHandle alloc];
  uint64_t v4 = [v2 objectForKey:*MEMORY[0x1E4F6C5C8]];
  id v5 = [v2 objectForKey:*MEMORY[0x1E4F6C648]];
  id v6 = [v2 objectForKey:*MEMORY[0x1E4F6C5A0]];

  uint64_t v7 = [(IMDHandle *)v3 initWithID:v4 unformattedID:v5 countryCode:v6 personCentricID:0];

  return v7;
}

uint64_t sub_1D986F0F8()
{
  qword_1EBE2BA40 = objc_alloc_init(IMDBadgeUtilities);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D986F4A0(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    int v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)id v5 = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Rebuild unread message count", v5, 2u);
    }
  }
  return [a2 _rebuildUnreadMessageCount];
}

uint64_t sub_1D986F674(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__updateBadgeForUnreadCountChangeIfNeeded_);
}

void sub_1D986F6F4(uint64_t a1)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
  int v4 = IMOSLoggingEnabled();
  if (v3 == v2)
  {
    if (v4)
    {
      id v5 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      {
        LOWORD(v9[0]) = 0;
        _os_log_impl(&dword_1D967A000, v5, OS_LOG_TYPE_INFO, "Not updating badge for unread count change.", (uint8_t *)v9, 2u);
      }
    }
  }
  else
  {
    if (v4)
    {
      id v6 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        uint64_t v7 = *(void *)(a1 + 40);
        uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 24);
        v9[0] = 67109376;
        v9[1] = v8;
        __int16 v10 = 1024;
        int v11 = v7;
        _os_log_impl(&dword_1D967A000, v6, OS_LOG_TYPE_INFO, "Unread count changed from %d to %d", (uint8_t *)v9, 0xEu);
      }
    }
    *(void *)(*(void *)(a1 + 32) + 24) = *(void *)(a1 + 40);
    [*(id *)(a1 + 32) _updateBadge];
  }
}

uint64_t sub_1D986F90C(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__updateBadgeForLastFailedMessageDateChangeIfNeeded_);
}

uint64_t sub_1D986F98C(uint64_t result)
{
  uint64_t v11 = *MEMORY[0x1E4F143B8];
  if (*(void *)(*(void *)(result + 32) + 32) != *(void *)(result + 40))
  {
    uint64_t v1 = result;
    if (IMOSLoggingEnabled())
    {
      uint64_t v2 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
      {
        uint64_t v3 = *(void *)(v1 + 40);
        uint64_t v4 = *(void *)(*(void *)(v1 + 32) + 32);
        int v7 = 134218240;
        uint64_t v8 = v4;
        __int16 v9 = 2048;
        uint64_t v10 = v3;
        _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Failed message date changed from %lld to %lld", (uint8_t *)&v7, 0x16u);
      }
    }
    id v6 = *(void **)(v1 + 32);
    uint64_t v5 = v1 + 32;
    [v6 _cacheFailureDate:*(void *)(v5 + 8)];
    [*(id *)v5 _compareLastFailureDateAndUpdateBadge:*(void *)(v5 + 8)];
    return [*(id *)v5 _stopSuppressingSound];
  }
  return result;
}

uint64_t sub_1D986FB14(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateBadge];
}

uint64_t sub_1D986FBC4(uint64_t a1)
{
  uint64_t v2 = [NSNumber numberWithInteger:*(void *)(a1 + 48)];
  uint64_t v3 = [*(id *)(a1 + 32) pendingSatelliteMessagesPerService];
  [v3 setObject:v2 forKeyedSubscript:*(void *)(a1 + 40)];

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _updateBadge];
}

uint64_t sub_1D986FC3C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result = [a3 integerValue];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += result;
  return result;
}

uint64_t sub_1D986FDE8(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel_setBadgeString_withCompletionHandler_);
}

void sub_1D986FDFC(uint64_t a1, void *a2)
{
  uint64_t v6 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      int v4 = 138412290;
      id v5 = v2;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Notification Center post badge string with error: [%@]", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1D986FED0()
{
  id v0 = (id)CFPreferencesCopyAppValue(@"StoreDemoMode", @"com.apple.demo-settings");
  byte_1EBE2BCD0 = [v0 BOOLValue];
}

void sub_1D987003C(uint64_t a1)
{
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(DarwinNotifyCenter, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D987012C, @"com.apple.IMSharedUtilities.IMUserLoginIntentChangedInternal", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v3, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D987012C, @"__kIMDBadgeUtilitiesLoginStatusChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  int v4 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterAddObserver(v4, *(const void **)(a1 + 32), (CFNotificationCallback)sub_1D987012C, @"__kIMDBadgeUtilitiesOperationalAccountsChangedNotification", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(NSObject **)(v5 + 8);
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D98701C8;
  block[3] = &unk_1E6B73268;
  void block[4] = v5;
  dispatch_async(v6, block);
}

uint64_t sub_1D987012C(uint64_t a1, void *a2)
{
  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Unexpected log out dependent value changed", v5, 2u);
    }
  }
  return [a2 checkIfUnexpectedlyLoggedOut];
}

uint64_t sub_1D98701C8(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _checkIfUnexpectedlyLoggedOut];
  *(unsigned char *)(*(void *)(a1 + 32) + 18) = 1;
  return result;
}

uint64_t sub_1D98701FC(uint64_t a1)
{
  uint64_t result = [*(id *)(a1 + 32) _isUnexpectedlyLoggedOut];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1D98705C4(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 19) = *(unsigned char *)(a1 + 40);
  return [*(id *)(a1 + 32) _updateBadge];
}

id sub_1D9870794(void *a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = [a1 remoteMembers];
      int v7 = 138412290;
      uint64_t v8 = v3;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "Filtering down participant list %@ to remove associated members", (uint8_t *)&v7, 0xCu);
    }
  }
  int v4 = [a1 remoteMembers];
  uint64_t v5 = objc_msgSend(v4, "__imSetByApplyingBlock:", &unk_1F3392380);

  return v5;
}

id sub_1D98708BC(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = [v2 association];
  int v4 = v3;
  if (v3 && ![v3 isPrimary]) {
    id v5 = 0;
  }
  else {
    id v5 = v2;
  }

  return v5;
}

void sub_1D9870A28(uint64_t a1)
{
  if (IMOSLoggingEnabled())
  {
    id v2 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_1D967A000, v2, OS_LOG_TYPE_INFO, "TUConversation registered", buf, 2u);
    }
  }
  block[0] = MEMORY[0x1E4F143A8];
  block[1] = 3221225472;
  block[2] = sub_1D9870B18;
  block[3] = &unk_1E6B73268;
  void block[4] = *(void *)(a1 + 32);
  dispatch_async(MEMORY[0x1E4F14428], block);
}

void sub_1D9870B18(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) conversationManager];
  [v2 addDelegate:*(void *)(a1 + 32) queue:MEMORY[0x1E4F14428]];

  if (IMOSLoggingEnabled())
  {
    uint64_t v3 = OSLogHandleForIMFoundationCategory();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int v4 = 0;
      _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "Completed conversation manager setup for imagent", v4, 2u);
    }
  }
}

void sub_1D98714E4(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9871458);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

uint64_t sub_1D9871584(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1D9871594(uint64_t a1)
{
}

void sub_1D987159C(uint64_t a1, void *a2)
{
  id v13 = a2;
  int v4 = [v13 serviceName];
  int v5 = [v4 isEqualToString:*MEMORY[0x1E4F6E1B0]];

  uint64_t v6 = v13;
  if (v5)
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v10 = *(void **)(v7 + 40);
    uint64_t v8 = (id *)(v7 + 40);
    uint64_t v9 = v10;
    if (v10)
    {
      uint64_t v11 = [v9 lastMessageTimeStampOnLoad];
      BOOL v12 = v11 < [v13 lastMessageTimeStampOnLoad];
      uint64_t v6 = v13;
      if (!v12) {
        goto LABEL_7;
      }
      uint64_t v8 = (id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
    objc_storeStrong(v8, a2);
    uint64_t v6 = v13;
  }
LABEL_7:
}

id sub_1D987165C(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4FADBD8];
  uint64_t v3 = [a2 ID];
  int v4 = [v2 normalizedHandleWithDestinationID:v3];

  return v4;
}

uint64_t sub_1D98716BC(uint64_t a1, void *a2)
{
  return [a2 handle];
}

void sub_1D9871CAC(_Unwind_Exception *exc_buf, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a2 == 1)
  {
    objc_begin_catch(exc_buf);
    objc_end_catch();
    JUMPOUT(0x1D9871C1CLL);
  }
  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(exc_buf);
}

void sub_1D9871D34(uint64_t a1, void *a2, unsigned char *a3)
{
  id v10 = a2;
  uint64_t v6 = [v10 messagesGroupUUID];
  uint64_t v7 = [v6 UUIDString];
  uint64_t v8 = [*(id *)(a1 + 32) groupID];
  int v9 = [v7 isEqualToString:v8];

  if (v9)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a3 = 1;
  }
}

id sub_1D9871DFC(uint64_t a1, void *a2)
{
  id v2 = (void *)MEMORY[0x1E4FADBD8];
  uint64_t v3 = [a2 ID];
  int v4 = [v2 normalizedHandleWithDestinationID:v3];

  return v4;
}

uint64_t sub_1D9871E5C(uint64_t a1, void *a2)
{
  return [a2 handle];
}

id sub_1D9872A48(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if ([v2 isLightweightMember])
  {
    if (IMOSLoggingEnabled())
    {
      uint64_t v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        id v9 = v2;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "This is a lightweight member - skipping: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    int v4 = 0;
  }
  else
  {
    int v5 = [v2 handle];
    uint64_t v6 = [v5 value];
    int v4 = IMChatCanonicalIDSIDsForAddress();
  }

  return v4;
}

void sub_1D9872B78(uint64_t a1, void *a2)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v22 = a2;
  id obj = [v22 allKeys];
  uint64_t v2 = [obj countByEnumeratingWithState:&v23 objects:v32 count:16];
  if (v2)
  {
    uint64_t v4 = *(void *)v24;
    uint64_t v19 = *MEMORY[0x1E4F6C5C8];
    *(void *)&long long v3 = 138412290;
    long long v18 = v3;
    do
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v24 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v23 + 1) + 8 * i);
        uint64_t v7 = objc_msgSend(v22, "objectForKeyedSubscript:", v6, v18);
        uint64_t v8 = [v7 integerValue];

        int v9 = IMOSLoggingEnabled();
        if (v8 == 1)
        {
          if (v9)
          {
            uint64_t v10 = OSLogHandleForIMFoundationCategory();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = v18;
              id v31 = v6;
              _os_log_impl(&dword_1D967A000, v10, OS_LOG_TYPE_INFO, "Destination is registered for iMessage, adding to group: %@", buf, 0xCu);
            }
          }
          uint64_t v11 = *(void **)(a1 + 32);
          uint64_t v27 = v19;
          BOOL v12 = [v6 _stripFZIDPrefix];
          id v28 = v12;
          id v13 = [MEMORY[0x1E4F1C9E8] dictionaryWithObjects:&v28 forKeys:&v27 count:1];
          long long v29 = v13;
          uint64_t v14 = [MEMORY[0x1E4F1C978] arrayWithObjects:&v29 count:1];
          uint64_t v15 = [*(id *)(a1 + 40) guid];
          id v16 = [*(id *)(a1 + 40) chatIdentifier];
          objc_msgSend(v11, "invitePersonInfo:withMessage:toChatID:identifier:style:", v14, 0, v15, v16, objc_msgSend(*(id *)(a1 + 40), "style"));
        }
        else if (v9)
        {
          uint64_t v17 = OSLogHandleForIMFoundationCategory();
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = v18;
            id v31 = v6;
            _os_log_impl(&dword_1D967A000, v17, OS_LOG_TYPE_INFO, "Destination is NOT registered for iMessage, skipping adding to group: %@", buf, 0xCu);
          }
        }
      }
      uint64_t v2 = [obj countByEnumeratingWithState:&v23 objects:v32 count:16];
    }
    while (v2);
  }
}

id sub_1D98732E0(uint64_t a1, void *a2)
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  id v2 = a2;
  if ([v2 isLightweightMember])
  {
    if (IMOSLoggingEnabled())
    {
      long long v3 = OSLogHandleForIMFoundationCategory();
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        int v8 = 138412290;
        id v9 = v2;
        _os_log_impl(&dword_1D967A000, v3, OS_LOG_TYPE_INFO, "This is a lightweight member - skipping: %@", (uint8_t *)&v8, 0xCu);
      }
    }
    uint64_t v4 = 0;
  }
  else
  {
    int v5 = [v2 handle];
    uint64_t v6 = [v5 value];
    uint64_t v4 = IMChatCanonicalIDSIDsForAddress();
  }

  return v4;
}

void sub_1D9873BF8(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a4;
  id v7 = a3;
  id v8 = [a1 encryptedValuesByKey];
  [v8 setObject:v7 forKeyedSubscript:v6];
}

void sub_1D9873C74(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a3;
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = &stru_1F3398578;
  }
  id v6 = v5;
  objc_msgSend(a1, "_setValue:forKey:");
}

void sub_1D9873CD8(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4) {
    int v5 = v4;
  }
  else {
    int v5 = &unk_1F33C5F10;
  }
  id v6 = v5;
  objc_msgSend(a1, "_setValue:forKey:");
}

void sub_1D9873D3C(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  if (!v6) {
    id v6 = &unk_1F33C5F10;
  }
  id v9 = v6;
  id v7 = a4;
  id v8 = [a1 valuesByKey];
  [v8 setObject:v9 forKeyedSubscript:v7];
}

void sub_1D9873DC0(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v6 = a4;
  uint64_t v7 = (uint64_t)v9;
  id v8 = v6;
  if (!v9)
  {
    uint64_t v7 = [MEMORY[0x1E4F1C9B8] data];
  }
  id v10 = (id)v7;
  [a1 _setValue:v7 forKey:v8];
}

void sub_1D9873E44(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (v4) {
    id v5 = v4;
  }
  else {
    id v5 = (id)MEMORY[0x1E4F1CBF0];
  }
  id v6 = v5;
  objc_msgSend(a1, "_setValue:forKey:");
}

void *sub_1D9873EA8(void *a1, const char *a2, uint64_t a3)
{
  if (a3) {
    return objc_msgSend(a1, "setObject:forKey:");
  }
  return a1;
}

void sub_1D9873EB4(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v9 = a3;
  id v6 = a4;
  uint64_t v7 = v9;
  if (!v9)
  {
    uint64_t v7 = [MEMORY[0x1E4F1C9C8] date];
  }
  id v10 = v7;
  id v8 = objc_msgSend(NSNumber, "numberWithLongLong:", objc_msgSend(v7, "__im_nanosecondTimeInterval"));
  [a1 _setCKRecordNumber:v8 forKey:v6];
}

id sub_1D9873F60(void *a1)
{
  uint64_t v1 = (void *)MEMORY[0x1E4F1C9C8];
  id v2 = objc_msgSend(a1, "_numberForKey:");
  long long v3 = objc_msgSend(v1, "__im_dateWithNanosecondTimeIntervalSinceReferenceDate:", (double)objc_msgSend(v2, "longLongValue"));

  return v3;
}

id sub_1D9873FC0(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = [a1 encryptedValuesByKey];
    id v6 = [v5 objectForKeyedSubscript:v4];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

id sub_1D9874040(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = [a1 _valueForKey:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1D98740A4(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = [a1 _valueForKey:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1D9874108(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = [a1 _valueForKey:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1D987416C(void *a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 length])
  {
    id v5 = [a1 objectForKey:v4];
  }
  else
  {
    id v5 = 0;
  }

  return v5;
}

id sub_1D98741D0(void *a1)
{
  id v2 = [a1 _dataForKey:@"msgProto4"];
  long long v3 = [MEMORY[0x1E4F6E7F0] protobufForCompressedDataP4:v2];
  id v4 = v3;
  if (!v3
    || ![v3 hasActualParentChatId]
    || ([v4 actualParentChatId], (id v5 = objc_claimAutoreleasedReturnValue()) == 0))
  {
    id v5 = [a1 _stringForKey:@"chatID"];
  }

  return v5;
}

uint64_t sub_1D98746AC()
{
  qword_1EBE2BA48 = objc_alloc_init(IMDSpotlightIndexDelegate);

  return MEMORY[0x1F41817F8]();
}

uint64_t sub_1D98750F0(void *a1)
{
  if (![a1 isSubService]
    || (id v2 = objc_msgSend((id)objc_msgSend(a1, "mainService"), "serviceProperties"),
        (uint64_t result = [v2 objectForKey:*MEMORY[0x1E4F6E208]]) == 0))
  {
    id v4 = (void *)[a1 serviceProperties];
    id v5 = (void *)[v4 objectForKey:*MEMORY[0x1E4F6E200]];
    return [v5 firstObject];
  }
  return result;
}

uint64_t sub_1D9876DD0(uint64_t a1)
{
  objc_msgSend(+[IMDAccountController sharedAccountController](IMDAccountController, "sharedAccountController"), "removeAccount:", *(void *)(a1 + 32));
  uint64_t v1 = [(IMLocalDaemonProtocol *)+[IMDLocalDaemon sharedDaemon] parentalControls];

  return MEMORY[0x1F4181798](v1, sel_updateAccountActivation);
}

uint64_t sub_1D9876FBC()
{
  qword_1EBE2BCF8 = objc_alloc_init(IMDRelayServiceReachabilityController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9877920(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D98778C0);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D9877D2C(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 reachabilityRequest:a2 updatedWithResult:*(void *)(a1 + 32)];
}

uint64_t sub_1D987852C()
{
  qword_1EBE2BD00 = objc_alloc_init(IMDRelayServiceController);

  return MEMORY[0x1F41817F8]();
}

void sub_1D9879360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id location)
{
  objc_destroyWeak(v16);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1D987937C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v10 = (id)[*(id *)(a1 + 32) mutableCopy];
  id v6 = [NSNumber numberWithInteger:a2];
  [v10 setObject:v6 forKeyedSubscript:IMDRelaySpamCategoryKey];

  uint64_t v7 = [NSNumber numberWithInteger:a3];
  [v10 setObject:v7 forKeyedSubscript:IMDRelaySpamSubCategoryKey];

  uint64_t v8 = [MEMORY[0x1E4F6E660] shouldUploadToMMCS:*(void *)(a1 + 32)];
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  [WeakRetained relayDictionaryToPeers:v10 requiresUpload:v8 serviceName:*(void *)(a1 + 40) requiredCapabilities:0];
}

void sub_1D987AA78(_Unwind_Exception *a1, int a2)
{
  if (a2 == 1)
  {
    objc_begin_catch(a1);
    objc_end_catch();
    JUMPOUT(0x1D987A904);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1D987B260(uint64_t a1)
{
  return MEMORY[0x1F4181798](*(void *)(a1 + 32), sel__convertIMDHandleToDictionary_);
}

void *sub_1D987D08C(uint64_t a1, void *a2)
{
  if ([a2 objectForKey:*MEMORY[0x1E4F6B710]]) {
    return a2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1D987D3E8(uint64_t a1, void *a2)
{
  uint64_t v2 = objc_msgSend((id)objc_msgSend(a2, "trimmedString"), "lowercaseString");
  if (!MEMORY[0x1E0169B60]()) {
    return v2;
  }

  return IMCanonicalizeFormattedString();
}

uint64_t sub_1D987E7A8(uint64_t a1, void *a2)
{
  if ([a2 isEqualToIgnoringCase:*MEMORY[0x1E4F6B7D0]]) {
    return 0;
  }

  return [a2 _stripFZIDPrefix];
}

uint64_t sub_1D987E898()
{
  id v0 = objc_alloc(MEMORY[0x1E4F6AB90]);
  qword_1EBE2BC78 = [v0 initWithService:*MEMORY[0x1E4F6AA78]];
  id v1 = objc_alloc(MEMORY[0x1E4F6AB90]);
  uint64_t result = [v1 initWithService:*MEMORY[0x1E4F6AA80]];
  qword_1EBE2BC80 = result;
  return result;
}

uint64_t sub_1D987EBE0()
{
  qword_1EA8CA6C0 = objc_alloc_init(IMDLiteMessageCompressor);

  return MEMORY[0x1F41817F8]();
}

uint64_t IMDServiceSession.deleteAllData()()
{
  sub_1D9907010();
  *(void *)(v0 + 16) = sub_1D9907000();
  uint64_t v2 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D987ED3C, v2, v1);
}

uint64_t sub_1D987ED3C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void type metadata accessor for MessagesClientCapabilities(uint64_t a1)
{
}

void type metadata accessor for IMAssociatedMessageType(uint64_t a1)
{
}

void type metadata accessor for SyncedSettingsKey(uint64_t a1)
{
}

uint64_t sub_1D987EF40(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  void v2[4] = sub_1D9907010();
  void v2[5] = sub_1D9907000();
  uint64_t v4 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D987EFDC, v4, v3);
}

uint64_t sub_1D987EFDC()
{
  uint64_t v1 = (const void *)v0[2];
  uint64_t v2 = (void *)v0[3];
  swift_release();
  v0[6] = _Block_copy(v1);
  id v3 = v2;
  v0[7] = sub_1D9907000();
  uint64_t v5 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D987F088, v5, v4);
}

uint64_t sub_1D987F088()
{
  uint64_t v1 = (void (**)(void))v0[6];
  uint64_t v2 = (void *)v0[3];
  swift_release();

  v1[2](v1);
  _Block_release(v1);
  id v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1D987F10C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    uint64_t v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

void sub_1D987F164(void *a1@<X8>)
{
  *a1 = *v1;
}

void sub_1D987F170(void *a1@<X8>)
{
  *a1 = 0;
}

void *sub_1D987F178@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1D987F18C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1D987F1A0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1D987F1D0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1D987F1FC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1D987F220(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1D987F234@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1D987F248(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1D987F25C(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1D987F270(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1D987F284()
{
  return *v0 == 0;
}

uint64_t sub_1D987F294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

void *sub_1D987F2AC(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1D987F2C0(uint64_t a1, uint64_t a2)
{
  return sub_1D987F45C(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1D987F2E4(uint64_t a1, uint64_t a2)
{
  return sub_1D987F45C(a1, a2, MEMORY[0x1E4FBB198]);
}

void *sub_1D987F304@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_1D987F310@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1D987F320(uint64_t a1, id *a2)
{
  uint64_t result = sub_1D9906D80();
  *a2 = 0;
  return result;
}

uint64_t sub_1D987F398(uint64_t a1, id *a2)
{
  char v3 = sub_1D9906D90();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1D987F418@<X0>(uint64_t *a1@<X8>)
{
  sub_1D9906DA0();
  uint64_t v2 = sub_1D9906D70();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D987F45C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1D9906DA0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1D987F4A0()
{
  sub_1D9906DA0();
  sub_1D9906DF0();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1D987F4F4()
{
  sub_1D9906DA0();
  sub_1D99077C0();
  sub_1D9906DF0();
  uint64_t v0 = sub_1D99077F0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1D987F568@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1D987F9E0(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

void *sub_1D987F5AC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1D987F5C0(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1D987F5D4(void *result)
{
  *v1 &= *result;
  return result;
}

uint64_t sub_1D987F5E8()
{
  return sub_1D987F678(&qword_1EA8C8150, type metadata accessor for MessagesClientCapabilities);
}

uint64_t sub_1D987F630()
{
  return sub_1D987F678(&qword_1EA8C8158, type metadata accessor for MessagesClientCapabilities);
}

uint64_t sub_1D987F678(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1D987F6C0()
{
  return sub_1D987F678(&qword_1EA8C8160, type metadata accessor for MessagesClientCapabilities);
}

uint64_t sub_1D987F708()
{
  return sub_1D987F678((unint64_t *)&unk_1EA8C8168, type metadata accessor for MessagesClientCapabilities);
}

uint64_t sub_1D987F750()
{
  uint64_t v0 = sub_1D9906DA0();
  uint64_t v2 = v1;
  if (v0 == sub_1D9906DA0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1D9907710();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1D987F7E0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1D9906DA0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D987F80C(uint64_t a1)
{
  uint64_t v2 = sub_1D987F678(&qword_1EA8C8218, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1D987F678((unint64_t *)&unk_1EA8C8220, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

BOOL sub_1D987F8C8(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1D987F8DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1D9906D70();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1D987F924(uint64_t a1)
{
  uint64_t v2 = sub_1D987F678(&qword_1EA8C8208, type metadata accessor for Key);
  uint64_t v3 = sub_1D987F678(&qword_1EA8C8210, type metadata accessor for Key);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1D987F9E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1D987FA18()
{
  _Block_release(*(const void **)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1D987FA58()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1D968D850;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1EA8C8178 + dword_1EA8C8178);
  return v5(v2, v3);
}

uint64_t sub_1D987FB08()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = (int *)v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_1D968D850;
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1EA8C95E8 + dword_1EA8C95E8);
  return v6(v2, v3, v4);
}

uint64_t sub_1D987FBCC()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1D987FC0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (int *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1D968026C;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1EA8C95F0 + dword_1EA8C95F0);
  return v8(a1, v4, v5, v6);
}

void type metadata accessor for IMDCKAccountStatus(uint64_t a1)
{
}

__n128 initializeWithTake for FileEventStream.PathFilter(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1D987FCFC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D987FD1C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for _NSRange(uint64_t a1)
{
}

void type metadata accessor for Key(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for FileEvent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

__n128 sub_1D987FDA0(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_1D987FDAC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1D987FDCC(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for audit_token_t(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

void type metadata accessor for FZChatMemberStatus(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CMFItemType(uint64_t a1)
{
}

void sub_1D987FE5C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_1D987FEA4()
{
  return sub_1D987F678(&qword_1EA8C81D8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D987FEEC()
{
  return sub_1D987F678(&qword_1EA8C81E0, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D987FF34()
{
  return sub_1D987F678(&qword_1EA8C81E8, type metadata accessor for URLResourceKey);
}

uint64_t sub_1D987FF7C()
{
  return sub_1D987F678(&qword_1EA8C81F0, type metadata accessor for Key);
}

uint64_t sub_1D987FFC4()
{
  return sub_1D987F678(&qword_1EA8C81F8, type metadata accessor for Key);
}

uint64_t sub_1D988000C()
{
  return sub_1D987F678(&qword_1EA8C8200, type metadata accessor for Key);
}

uint64_t sub_1D988007C()
{
  uint64_t v0 = sub_1D9906BA0();
  sub_1D9883A64(v0, qword_1EBE2B208);
  sub_1D9686810(v0, (uint64_t)qword_1EBE2B208);
  sub_1D9906B70();
  return sub_1D9906B90();
}

uint64_t sub_1D98800E8()
{
  return 1;
}

uint64_t sub_1D98800F0()
{
  return sub_1D99077F0();
}

uint64_t sub_1D9880134()
{
  return sub_1D99077D0();
}

uint64_t sub_1D988015C()
{
  return sub_1D99077F0();
}

void sub_1D988019C(void *a1@<X8>)
{
  *a1 = &unk_1F33925A0;
}

id BackwardCompatibilityMessageIdentifier.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id BackwardCompatibilityMessageIdentifier.init()()
{
  uint64_t v1 = OBJC_IVAR_____IMDBackwardCompatibilityMessageIdentifier_parser;
  sub_1D96867CC(&qword_1EBE2B200);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = MEMORY[0x1E4FBC860];
  *(void *)&v0[v1] = v2;
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for BackwardCompatibilityMessageIdentifier();
  id v3 = objc_msgSendSuper2(&v5, sel_init);
  sub_1D9881900();

  return v3;
}

uint64_t type metadata accessor for BackwardCompatibilityMessageIdentifier()
{
  return self;
}

void sub_1D9880308(void *a1, void *a2)
{
  uint64_t v76 = sub_1D9906BA0();
  uint64_t v4 = *(void *)(v76 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v76);
  uint64_t v7 = (char *)&v75 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v75 - v9;
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  id v13 = (char *)&v75 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (_DWORD *)((char *)&v75 - v14);
  id v16 = objc_msgSend(a1, sel_plainBody);
  uint64_t v75 = v4;
  if (!v16)
  {
    id v17 = objc_msgSend(a1, sel_body);
    if (!v17)
    {
      if (qword_1EBE2B220 != -1) {
        swift_once();
      }
      uint64_t v51 = v76;
      uint64_t v63 = sub_1D9686810(v76, (uint64_t)qword_1EBE2B208);
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v63, v51);
      uint64_t v15 = a1;
      id v64 = sub_1D9906B80();
      os_log_type_t v65 = sub_1D9907120();
      if (os_log_type_enabled(v64, v65))
      {
        id v66 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        uint64_t v78 = v67;
        *(_DWORD *)id v66 = 136315138;
        id v68 = objc_msgSend(v15, sel_guid);
        if (v68)
        {
          long long v69 = v68;
          uint64_t v70 = sub_1D9906DA0();
          unint64_t v72 = v71;

          uint64_t v77 = sub_1D96863B0(v70, v72, &v78);
          sub_1D9907370();

          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1D967A000, v64, v65, "No plain body found for message %s", v66, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1E016AD90](v67, -1, -1);
          MEMORY[0x1E016AD90](v66, -1, -1);

          (*(void (**)(char *, uint64_t))(v75 + 8))(v7, v76);
          return;
        }
        goto LABEL_34;
      }

      uint64_t v73 = *(void (**)(char *, uint64_t))(v4 + 8);
      id v74 = v7;
      goto LABEL_30;
    }
    long long v18 = v17;
    id v16 = objc_msgSend(v17, sel_string);
  }
  uint64_t v19 = sub_1D9906DA0();
  unint64_t v21 = v20;

  id v22 = sub_1D98823A0(v19, v21);
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  if (v24)
  {
    sub_1D9880CB4(a1, v22, v24, a2);
    char v26 = v25;
    swift_bridgeObjectRelease();
    if (v26)
    {
      uint64_t v27 = v76;
      if (qword_1EBE2B220 != -1) {
        swift_once();
      }
      uint64_t v28 = sub_1D9686810(v27, (uint64_t)qword_1EBE2B208);
      uint64_t v29 = v75;
      (*(void (**)(_DWORD *, uint64_t, uint64_t))(v75 + 16))(v15, v28, v27);
      id v30 = a1;
      id v31 = sub_1D9906B80();
      os_log_type_t v32 = sub_1D9907120();
      if (!os_log_type_enabled(v31, v32))
      {

        (*(void (**)(_DWORD *, uint64_t))(v29 + 8))(v15, v27);
        return;
      }
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      uint64_t v78 = v34;
      *(_DWORD *)uint64_t v33 = 136315138;
      id v35 = objc_msgSend(v30, sel_guid);
      if (v35)
      {
        id v36 = v35;
        uint64_t v37 = sub_1D9906DA0();
        unint64_t v39 = v38;

        uint64_t v77 = sub_1D96863B0(v37, v39, &v78);
        sub_1D9907370();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D967A000, v31, v32, "Found edited message matching backward compatibility message %s. Message can be dropped.", v33, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1E016AD90](v34, -1, -1);
        MEMORY[0x1E016AD90](v33, -1, -1);

        (*(void (**)(_DWORD *, uint64_t))(v75 + 8))(v15, v76);
        return;
      }
      goto LABEL_32;
    }
    uint64_t v51 = v76;
    if (qword_1EBE2B220 != -1) {
      swift_once();
    }
    uint64_t v52 = sub_1D9686810(v51, (uint64_t)qword_1EBE2B208);
    uint64_t v53 = v75;
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v13, v52, v51);
    uint64_t v15 = a1;
    uint64_t v54 = sub_1D9906B80();
    os_log_type_t v55 = sub_1D9907120();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      uint64_t v57 = swift_slowAlloc();
      uint64_t v78 = v57;
      *(_DWORD *)uint64_t v56 = 136315138;
      id v58 = objc_msgSend(v15, sel_guid);
      if (v58)
      {
        id v59 = v58;
        uint64_t v60 = sub_1D9906DA0();
        unint64_t v62 = v61;

        uint64_t v77 = sub_1D96863B0(v60, v62, &v78);
        sub_1D9907370();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1D967A000, v54, v55, "Could not find edited message matching backward compatibility message %s. Message cannot be dropped.", v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1E016AD90](v57, -1, -1);
        MEMORY[0x1E016AD90](v56, -1, -1);

        (*(void (**)(char *, uint64_t))(v75 + 8))(v13, v76);
        return;
      }
      goto LABEL_33;
    }

    uint64_t v73 = *(void (**)(char *, uint64_t))(v53 + 8);
    id v74 = v13;
LABEL_30:
    v73(v74, v51);
    return;
  }
  if (qword_1EBE2B220 != -1) {
    swift_once();
  }
  uint64_t v40 = v76;
  uint64_t v41 = sub_1D9686810(v76, (uint64_t)qword_1EBE2B208);
  uint64_t v42 = v75;
  (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v10, v41, v40);
  id v30 = a1;
  long long v43 = sub_1D9906B80();
  os_log_type_t v44 = sub_1D9907120();
  if (!os_log_type_enabled(v43, v44))
  {

    (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v40);
    return;
  }
  uint64_t v15 = (_DWORD *)swift_slowAlloc();
  uint64_t v45 = swift_slowAlloc();
  uint64_t v78 = v45;
  *uint64_t v15 = 136315138;
  id v46 = objc_msgSend(v30, sel_guid);
  if (v46)
  {
    uint64_t v47 = v46;
    uint64_t v48 = sub_1D9906DA0();
    unint64_t v50 = v49;

    uint64_t v77 = sub_1D96863B0(v48, v50, &v78);
    sub_1D9907370();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D967A000, v43, v44, "No backward compatibility message match found %s", (uint8_t *)v15, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v45, -1, -1);
    MEMORY[0x1E016AD90](v15, -1, -1);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v10, v76);
    return;
  }

  __break(1u);
LABEL_32:

  __break(1u);
LABEL_33:

  __break(1u);
LABEL_34:

  __break(1u);
}

void sub_1D9880CB4(void *a1, NSObject *a2, uint64_t a3, void *a4)
{
  uint64_t v100 = a2;
  uint64_t v101 = a3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v6 = sub_1D9906BA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  __int16 v98 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D96867CC(&qword_1EBE2AD70);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v87 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v102 = sub_1D9906550();
  uint64_t v12 = *(void *)(v102 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v102);
  uint64_t v15 = (char *)&v87 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x1F4188790](v13);
  long long v18 = (char *)&v87 - v17;
  MEMORY[0x1F4188790](v16);
  unint64_t v20 = (char *)&v87 - v19;
  id v21 = objc_msgSend(a4, sel_guid);
  if (!v21) {
    return;
  }
  id v22 = v21;
  double v97 = a1;
  id v23 = objc_msgSend(a1, sel_time);
  if (!v23)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v11, 1, 1, v102);
    goto LABEL_7;
  }
  uint64_t v24 = v23;
  __int16 v96 = v15;
  sub_1D9906520();

  char v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  uint64_t v26 = v102;
  v25(v11, v18, v102);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v11, 0, 1, v26);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v26) == 1)
  {
LABEL_7:

    sub_1D968E508((uint64_t)v11, &qword_1EBE2AD70);
    return;
  }
  uint64_t v87 = v7;
  uint64_t v88 = v6;
  uint64_t v89 = v12;
  v25(v20, v11, v26);
  sub_1D99064B0();
  sub_1D968E084(0, &qword_1EA8C88B0);
  __int16 v94 = v20;
  sub_1D96867CC((uint64_t *)&unk_1EBE2B250);
  uint64_t v27 = swift_allocObject();
  long long v95 = xmmword_1D991D6F0;
  *(_OWORD *)(v27 + 16) = xmmword_1D991D6F0;
  uint64_t v28 = sub_1D9906DA0();
  uint64_t v30 = v29;
  uint64_t v31 = MEMORY[0x1E4FBB1A0];
  *(void *)(v27 + 56) = MEMORY[0x1E4FBB1A0];
  unint64_t v32 = sub_1D9882C14();
  *(void *)(v27 + 32) = v28;
  *(void *)(v27 + 40) = v30;
  uint64_t v33 = MEMORY[0x1E4FBC240];
  *(void *)(v27 + 96) = MEMORY[0x1E4FBC1C8];
  *(void *)(v27 + 104) = v33;
  *(void *)(v27 + 64) = v32;
  *(void *)(v27 + 72) = 0;
  id v93 = (id)sub_1D9907100();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = v95;
  uint64_t v35 = sub_1D9906DA0();
  *(void *)(v34 + 56) = v31;
  *(void *)(v34 + 64) = v32;
  *(void *)(v34 + 32) = v35;
  *(void *)(v34 + 40) = v36;
  uint64_t v37 = sub_1D99064C0();
  uint64_t v38 = sub_1D968E084(0, &qword_1EA8C9A40);
  *(void *)(v34 + 96) = v38;
  unint64_t v39 = sub_1D9882C68();
  *(void *)(v34 + 104) = v39;
  *(void *)(v34 + 72) = v37;
  uint64_t v40 = (void *)sub_1D9907100();
  uint64_t v41 = swift_allocObject();
  *(_OWORD *)(v41 + 16) = v95;
  uint64_t v42 = sub_1D9906DA0();
  *(void *)(v41 + 56) = v31;
  *(void *)(v41 + 64) = v32;
  *(void *)(v41 + 32) = v42;
  *(void *)(v41 + 40) = v43;
  uint64_t v44 = sub_1D99064C0();
  *(void *)(v41 + 96) = v38;
  *(void *)(v41 + 104) = v39;
  *(void *)(v41 + 72) = v44;
  uint64_t v45 = (void *)sub_1D9907100();
  sub_1D96867CC(&qword_1EBE2B630);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_1D991D700;
  id v47 = v93;
  *(void *)(v46 + 32) = v93;
  *(void *)(v46 + 40) = v40;
  *(void *)(v46 + 48) = v45;
  aBlock[0] = v46;
  sub_1D9906F40();
  id v92 = v47;
  id v93 = v40;
  id v90 = v45;
  uint64_t v48 = (void *)sub_1D9906F00();
  swift_bridgeObjectRelease();
  id v49 = objc_msgSend(self, sel_andPredicateWithSubpredicates_, v48);

  sub_1D9906DA0();
  id v50 = objc_allocWithZone(MEMORY[0x1E4F29008]);
  uint64_t v51 = (void *)sub_1D9906D70();
  swift_bridgeObjectRelease();
  id v52 = objc_msgSend(v50, sel_initWithKey_ascending_, v51, 0);

  uint64_t v53 = swift_allocObject();
  *(_OWORD *)(v53 + 16) = xmmword_1D991D710;
  *(void *)(v53 + 32) = v52;
  aBlock[0] = v53;
  sub_1D9906F40();
  uint64_t v54 = swift_allocObject();
  *(unsigned char *)(v54 + 16) = 0;
  os_log_type_t v55 = self;
  id v91 = v52;
  *(void *)&long long v95 = objc_msgSend(v55, sel_synchronousDatabase);
  sub_1D968E084(0, &qword_1EA8C88C0);
  id v56 = v49;
  uint64_t v57 = (void *)sub_1D9906F00();
  swift_bridgeObjectRelease();
  id v58 = (void *)swift_allocObject();
  id v59 = v97;
  uint64_t v60 = v100;
  uint64_t v61 = v101;
  v58[2] = v97;
  v58[3] = v60;
  void v58[4] = v61;
  v58[5] = v54;
  v58[6] = ObjectType;
  void aBlock[4] = sub_1D9882D28;
  void aBlock[5] = v58;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D98BC824;
  aBlock[3] = &unk_1F3392E40;
  unint64_t v62 = _Block_copy(aBlock);
  id v63 = v59;
  id v64 = (void *)v95;
  id v65 = v63;
  swift_bridgeObjectRetain();
  uint64_t v101 = v54;
  swift_retain();
  swift_release();
  objc_msgSend(v64, sel_fetchMessageRecordsForChatRecordWithGUID_filteredUsingPredicate_sortedUsingDescriptors_limit_completionHandler_, v22, v56, v57, 50, v62);
  _Block_release(v62);

  swift_beginAccess();
  if (*(unsigned char *)(v54 + 16))
  {

    swift_unknownObjectRelease();
LABEL_15:
    long long v85 = *(void (**)(char *, uint64_t))(v89 + 8);
    uint64_t v86 = v102;
    v85(v96, v102);
    v85(v94, v86);
    swift_release();
    return;
  }
  id v66 = v90;
  if (qword_1EBE2B220 != -1) {
    swift_once();
  }
  uint64_t v67 = v88;
  uint64_t v68 = sub_1D9686810(v88, (uint64_t)qword_1EBE2B208);
  uint64_t v69 = v87;
  uint64_t v70 = v98;
  (*(void (**)(char *, uint64_t, uint64_t))(v87 + 16))(v98, v68, v67);
  id v71 = v65;
  unint64_t v72 = sub_1D9906B80();
  os_log_type_t v73 = sub_1D9907140();
  uint64_t v100 = v72;
  BOOL v74 = os_log_type_enabled(v72, v73);
  id v75 = v93;
  id v76 = v91;
  if (!v74)
  {

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v67);
    goto LABEL_15;
  }
  uint64_t v77 = (uint8_t *)swift_slowAlloc();
  uint64_t v78 = swift_slowAlloc();
  uint64_t v104 = v78;
  *(_DWORD *)uint64_t v77 = 136315138;
  id v79 = objc_msgSend(v71, sel_guid);
  if (v79)
  {
    int v80 = v79;
    uint64_t v81 = sub_1D9906DA0();
    unint64_t v83 = v82;

    uint64_t v103 = sub_1D96863B0(v81, v83, &v104);
    sub_1D9907370();

    swift_bridgeObjectRelease();
    double v84 = v100;
    _os_log_impl(&dword_1D967A000, v100, v73, "Backward compatibility message %s does not match any edited message in our database.", v77, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v78, -1, -1);
    MEMORY[0x1E016AD90](v77, -1, -1);

    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t))(v87 + 8))(v98, v88);
    goto LABEL_15;
  }

  __break(1u);
}

uint64_t sub_1D9881734(unint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 >> 62)
  {
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t result = sub_1D9907660();
    uint64_t v10 = result;
    if (!result) {
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v10) {
      goto LABEL_19;
    }
  }
  uint64_t v22 = a5;
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v12 = (id)MEMORY[0x1E01680D0](0, a1);
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v12 = *(id *)(a1 + 32);
  }
  uint64_t v13 = v12;
  sub_1D9882D38(a2, a3, a4, v12);
  char v15 = v14;

  if (v15)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(v22 + 16) = 1;
    return result;
  }
  uint64_t v16 = 0;
  a5 = v10 - 1;
  while (a5 != v16)
  {
    unint64_t v17 = v16 + 1;
    if ((a1 & 0xC000000000000001) != 0)
    {
      id v18 = (id)MEMORY[0x1E01680D0](v16 + 1, a1);
    }
    else
    {
      if (v17 >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_17;
      }
      id v18 = *(id *)(a1 + 8 * v16 + 40);
    }
    uint64_t v19 = v18;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    sub_1D9882D38(a2, a3, a4, v18);
    char v21 = v20;

    ++v16;
    if (v21) {
      goto LABEL_15;
    }
  }
LABEL_19:

  return swift_bridgeObjectRelease();
}

id sub_1D9881900()
{
  id result = (id)IMSharedUtilitiesFrameworkBundle();
  uint64_t v78 = result;
  if (result)
  {
    id v1 = objc_msgSend(result, sel_localizations);
    uint64_t v2 = sub_1D9906F20();

    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v4 = 0;
      uint64_t v71 = OBJC_IVAR_____IMDBackwardCompatibilityMessageIdentifier_parser;
      uint64_t v5 = v2 + 32;
      uint64_t v76 = v2 + 32;
      uint64_t v77 = *(void *)(v2 + 16);
      while (1)
      {
        uint64_t v6 = (uint64_t *)(v5 + 16 * v4);
        uint64_t v8 = *v6;
        unint64_t v7 = v6[1];
        swift_bridgeObjectRetain_n();
        uint64_t v9 = (void *)sub_1D9906D70();
        uint64_t v10 = (void *)sub_1D9906D70();
        uint64_t v11 = (void *)sub_1D9906D70();
        id v12 = objc_msgSend(v78, sel_localizedStringForKey_value_table_localization_, v9, 0, v10, v11);

        uint64_t v13 = sub_1D9906DA0();
        uint64_t v15 = v14;

        if (v13 == 0xD00000000000002CLL && v15 == 0x80000001D992F710) {
          break;
        }
        char v16 = sub_1D9907710();
        swift_bridgeObjectRelease();
        if (v16) {
          goto LABEL_10;
        }
        swift_bridgeObjectRetain();
        uint64_t v22 = (void *)sub_1D9906D70();
        id v23 = (void *)sub_1D9906D70();
        uint64_t v24 = (void *)sub_1D9906D70();
        id v25 = objc_msgSend(v78, sel_localizedStringForKey_value_table_localization_, v22, 0, v23, v24);

        uint64_t v26 = sub_1D9906DA0();
        uint64_t v28 = v27;

        if (v26 == 0xD00000000000002CLL && v28 == 0x80000001D992F740)
        {
          swift_bridgeObjectRelease();
LABEL_19:
          swift_bridgeObjectRelease();
          uint64_t v5 = v76;
          uint64_t v3 = v77;
          swift_bridgeObjectRelease();
          if (qword_1EBE2B220 != -1) {
            swift_once();
          }
          uint64_t v30 = sub_1D9906BA0();
          sub_1D9686810(v30, (uint64_t)qword_1EBE2B208);
          swift_bridgeObjectRetain();
          id v18 = sub_1D9906B80();
          os_log_type_t v31 = sub_1D9907140();
          if (os_log_type_enabled(v18, v31))
          {
            uint64_t v20 = swift_slowAlloc();
            uint64_t v21 = swift_slowAlloc();
            v79[0] = v21;
            *(_DWORD *)uint64_t v20 = 136315138;
            swift_bridgeObjectRetain();
            *(void *)(v20 + 4) = sub_1D96863B0(v8, v7, v79);
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1D967A000, v18, v31, "Backward compatibility message prefix is unlocalized in %s", (uint8_t *)v20, 0xCu);
            goto LABEL_14;
          }
LABEL_4:

          swift_bridgeObjectRelease_n();
          goto LABEL_5;
        }
        char v29 = sub_1D9907710();
        swift_bridgeObjectRelease();
        if (v29) {
          goto LABEL_19;
        }
        swift_bridgeObjectRelease();
        sub_1D96867CC((uint64_t *)&unk_1EBE2B250);
        uint64_t v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_1D991D6F0;
        uint64_t v33 = MEMORY[0x1E4FBB1A0];
        *(void *)(v32 + 56) = MEMORY[0x1E4FBB1A0];
        unint64_t v34 = sub_1D9882C14();
        *(void *)(v32 + 32) = v26;
        *(void *)(v32 + 40) = v28;
        *(void *)(v32 + 96) = v33;
        *(void *)(v32 + 104) = v34;
        *(void *)(v32 + 64) = v34;
        *(void *)(v32 + 72) = 16421;
        *(void *)(v32 + 80) = 0xE200000000000000;
        uint64_t v35 = sub_1D9906DB0();
        unint64_t v37 = v36;
        swift_bridgeObjectRelease();
        uint64_t v38 = *(void *)(v72 + v71);
        if ((v37 & 0x2000000000000000) != 0) {
          uint64_t v39 = HIBYTE(v37) & 0xF;
        }
        else {
          uint64_t v39 = v35 & 0xFFFFFFFFFFFFLL;
        }
        swift_bridgeObjectRetain();
        if (v39)
        {
          while (1)
          {
            swift_bridgeObjectRetain();
            uint64_t v40 = sub_1D9906EB0();
            uint64_t v42 = v41;
            swift_bridgeObjectRelease();
            if (v40 == 37 && v42 == 0xE100000000000000) {
              break;
            }
            char v43 = sub_1D9907710();
            swift_bridgeObjectRelease();
            if ((v43 & 1) != 0 || 4 * v39 == (unint64_t)sub_1D9906E20() >> 14) {
              goto LABEL_34;
            }
          }
          swift_bridgeObjectRelease();
        }
LABEL_34:
        uint64_t v44 = sub_1D9906ED0();
        uint64_t v46 = v45;
        uint64_t v48 = v47;
        uint64_t v50 = v49;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v51 = sub_1D9907340();
        id result = (id)swift_bridgeObjectRelease();
        if (__OFADD__(v51, 2))
        {
          __break(1u);
          goto LABEL_45;
        }
        v79[0] = v35;
        v79[1] = v37;
        sub_1D9883A10();
        uint64_t v73 = v38;
        swift_bridgeObjectRetain();
        unint64_t v52 = sub_1D9906E00();
        unint64_t v53 = sub_1D98A9AD0(v52, v35, v37);
        uint64_t v55 = v54;
        uint64_t v57 = v56;
        uint64_t v59 = v58;
        swift_bridgeObjectRelease();
        uint64_t v60 = MEMORY[0x1E0167920](v44, v46, v48, v50);
        uint64_t v74 = v61;
        uint64_t v75 = v60;
        swift_bridgeObjectRelease();
        uint64_t v62 = MEMORY[0x1E0167920](v53, v55, v57, v59);
        uint64_t v64 = v63;
        swift_bridgeObjectRelease();
        id v65 = (void *)(v73 + 16);
        swift_beginAccess();
        id v66 = *(void **)(v73 + 16);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v73 + 16) = v66;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          id v66 = sub_1D9895270(0, v66[2] + 1, 1, v66);
          *id v65 = v66;
        }
        uint64_t v5 = v76;
        uint64_t v3 = v77;
        unint64_t v69 = v66[2];
        unint64_t v68 = v66[3];
        if (v69 >= v68 >> 1)
        {
          id v66 = sub_1D9895270((void *)(v68 > 1), v69 + 1, 1, v66);
          *id v65 = v66;
        }
        v66[2] = v69 + 1;
        uint64_t v70 = &v66[4 * v69];
        void v70[4] = v75;
        v70[5] = v74;
        v70[6] = v62;
        v70[7] = v64;
        swift_endAccess();
        swift_bridgeObjectRelease();
LABEL_5:
        if (++v4 == v3)
        {

          return (id)swift_bridgeObjectRelease();
        }
      }
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      if (qword_1EBE2B220 != -1) {
        swift_once();
      }
      uint64_t v17 = sub_1D9906BA0();
      sub_1D9686810(v17, (uint64_t)qword_1EBE2B208);
      swift_bridgeObjectRetain();
      id v18 = sub_1D9906B80();
      os_log_type_t v19 = sub_1D9907140();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        v79[0] = v21;
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        *(void *)(v20 + 4) = sub_1D96863B0(v8, v7, v79);
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1D967A000, v18, v19, "Backward compatibility message format is unlocalized in %s", (uint8_t *)v20, 0xCu);
LABEL_14:
        swift_arrayDestroy();
        MEMORY[0x1E016AD90](v21, -1, -1);
        MEMORY[0x1E016AD90](v20, -1, -1);

        goto LABEL_5;
      }
      goto LABEL_4;
    }

    return (id)swift_bridgeObjectRelease();
  }
  else
  {
LABEL_45:
    __break(1u);
  }
  return result;
}

void sub_1D98821B0(void *a1)
{
  unsigned __int8 v3 = objc_msgSend(v1, sel_isFromMe);
  unsigned __int8 v4 = objc_msgSend(a1, sel_isFromMe);
  if ((v3 & 1) == 0 && (v4 & 1) == 0)
  {
    id v5 = objc_msgSend(v1, sel_sender);
    if (v5)
    {
      uint64_t v6 = v5;
      id v7 = objc_msgSend(a1, sel_sender);
      if (v7)
      {
        uint64_t v8 = v7;
        id v9 = objc_msgSend(v6, sel__stripFZIDPrefix);

        if (v9)
        {
          id v10 = objc_msgSend(v9, sel_im_stripCategoryLabel);

          sub_1D9906DA0();
          id v11 = objc_msgSend(v8, sel__stripFZIDPrefix);

          if (v11)
          {
            id v12 = objc_msgSend(v11, sel_im_stripCategoryLabel);

            sub_1D9906DA0();
            sub_1D9883A10();
            sub_1D99073A0();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
        }
        else
        {

          __break(1u);
        }
        __break(1u);
      }
      else
      {
      }
    }
  }
}

id BackwardCompatibilityMessageIdentifier.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BackwardCompatibilityMessageIdentifier();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1D98823A0(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = v5 + 56;
    while (1)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v8 = sub_1D9906E90();
      swift_bridgeObjectRelease();
      if (v8)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v9 = sub_1D9906EA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v9) {
          break;
        }
      }
      v7 += 32;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v10 = sub_1D9906E10();
    swift_bridgeObjectRelease();
    unint64_t v11 = sub_1D98A9B1C(v10, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1D9906E10();
    uint64_t result = swift_bridgeObjectRelease();
    if (v12 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = sub_1D9907330();
      if (v14) {
        unint64_t v15 = v11;
      }
      else {
        unint64_t v15 = result;
      }
      if (v15 >> 14 >= v11 >> 14)
      {
        uint64_t v16 = sub_1D9907350();
        uint64_t v18 = v17;
        uint64_t v20 = v19;
        uint64_t v22 = v21;
        swift_bridgeObjectRelease();
        uint64_t v23 = MEMORY[0x1E0167920](v16, v18, v20, v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v23;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1D98825EC(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  uint64_t v5 = *(void *)(*(void *)(v2 + 16) + 16);
  if (v5)
  {
    uint64_t v6 = swift_bridgeObjectRetain() + 64;
    while (1)
    {
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      char v7 = sub_1D9906E90();
      swift_bridgeObjectRelease();
      if (v7)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char v8 = sub_1D9906EA0();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v8) {
          break;
        }
      }
      v6 += 40;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        swift_bridgeObjectRelease();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = sub_1D9906E10();
    swift_bridgeObjectRelease();
    unint64_t v10 = sub_1D98A9B1C(v9, a1, a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_1D9906E10();
    uint64_t result = swift_bridgeObjectRelease();
    if (v11 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = sub_1D9907330();
      if (v13) {
        unint64_t v14 = v10;
      }
      else {
        unint64_t v14 = result;
      }
      if (v14 >> 14 >= v10 >> 14)
      {
        uint64_t v15 = sub_1D9907350();
        uint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        uint64_t v22 = MEMORY[0x1E0167920](v15, v17, v19, v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return v22;
      }
    }
    __break(1u);
  }
  else
  {
    return 0;
  }
  return result;
}

uint64_t sub_1D9882844(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    sub_1D96867CC((uint64_t *)&unk_1EBE2B0A8);
    unint64_t v10 = (char *)swift_allocObject();
    size_t v11 = j__malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (a1)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  uint64_t result = sub_1D99076A0();
  __break(1u);
  return result;
}

uint64_t method lookup function for BackwardCompatibilityMessageIdentifier(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for BackwardCompatibilityMessageIdentifier);
}

uint64_t dispatch thunk of BackwardCompatibilityMessageIdentifier.isIgnorableBackwardCompatibilityMessage(_:in:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x58))();
}

uint64_t getEnumTagSinglePayload for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1D9882AD0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1D9882AF8()
{
  return 0;
}

ValueMetadata *type metadata accessor for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType()
{
  return &type metadata for BackwardCompatibilityMessageIdentifier.BackwardCompatibilityMessageType;
}

unint64_t sub_1D9882B18()
{
  unint64_t result = qword_1EA8C8898;
  if (!qword_1EA8C8898)
  {
    sub_1D9882B74(&qword_1EA8C88A0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8C8898);
  }
  return result;
}

uint64_t sub_1D9882B74(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t sub_1D9882BC0()
{
  unint64_t result = qword_1EA8C88A8;
  if (!qword_1EA8C88A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8C88A8);
  }
  return result;
}

unint64_t sub_1D9882C14()
{
  unint64_t result = qword_1EBE2B228;
  if (!qword_1EBE2B228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE2B228);
  }
  return result;
}

unint64_t sub_1D9882C68()
{
  unint64_t result = qword_1EA8C88B8;
  if (!qword_1EA8C88B8)
  {
    sub_1D968E084(255, &qword_1EA8C9A40);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EA8C88B8);
  }
  return result;
}

uint64_t sub_1D9882CD0()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1D9882CE0()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 56, 7);
}

uint64_t sub_1D9882D28(unint64_t a1)
{
  return sub_1D9881734(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

void sub_1D9882D38(void *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v113 = a2;
  uint64_t v114 = a3;
  id v111 = a1;
  uint64_t v5 = sub_1D9906BA0();
  uint64_t v103 = *(void *)(v5 - 8);
  uint64_t v104 = (char *)v5;
  MEMORY[0x1F4188790](v5);
  uint64_t v102 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_1D99065E0();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v108 = v7;
  uint64_t v109 = v8;
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  id v107 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  double v106 = (char *)&v91 - v11;
  uint64_t v12 = sub_1D96867CC(&qword_1EA8C88C8);
  MEMORY[0x1F4188790](v12);
  uint64_t v110 = (uint64_t)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_1D96867CC(&qword_1EBE2AD78);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = sub_1D9906640();
  uint64_t v17 = *(void *)(v112 - 8);
  uint64_t v18 = MEMORY[0x1F4188790](v112);
  uint64_t v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  BOOL v105 = (char *)&v91 - v21;
  uint64_t v22 = sub_1D9906550();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  id v25 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_1D96867CC(&qword_1EBE2AD70);
  MEMORY[0x1F4188790](v26 - 8);
  uint64_t v28 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = objc_msgSend(a4, sel_dateEdited);
  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v28, 1, 1, v22);
    goto LABEL_10;
  }
  uint64_t v30 = v29;
  sub_1D9906520();

  (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v28, v25, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v28, 0, 1, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v28, 1, v22) == 1)
  {
LABEL_10:
    uint64_t v45 = &qword_1EBE2AD70;
    uint64_t v46 = (uint64_t)v28;
LABEL_11:
    sub_1D968E508(v46, v45);
    return;
  }
  sub_1D968E508((uint64_t)v28, &qword_1EBE2AD70);
  uint64_t v31 = sub_1D9907190();
  if (!v31) {
    return;
  }
  uint64_t v32 = (void *)v31;
  self;
  uint64_t v33 = (void *)swift_dynamicCastObjCClass();
  if (!v33 || (unint64_t v34 = v33, sub_1D98821B0(v33), (v35 & 1) == 0))
  {

    return;
  }
  id v36 = objc_msgSend(v34, sel_editedPartIndexes);
  if (!v36)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v16, 1, 1, v112);
    goto LABEL_35;
  }
  unint64_t v37 = v36;
  sub_1D9906610();

  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  uint64_t v39 = v112;
  v38(v16, v20, v112);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, v39);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v16, 1, v39) == 1)
  {
LABEL_35:

    uint64_t v45 = &qword_1EBE2AD78;
    uint64_t v46 = (uint64_t)v16;
    goto LABEL_11;
  }
  id v92 = v32;
  id v99 = v34;
  v38(v105, v16, v112);
  uint64_t v40 = v110;
  sub_1D99065F0();
  uint64_t v41 = v40 + *(int *)(v12 + 36);
  uint64_t v42 = *(void (**)(void, void, void))(v109 + 16);
  char v43 = (void (**)(id, uint64_t))(v109 + 8);
  __int16 v98 = (void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  uint64_t v100 = (void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v44 = (uint64_t)&qword_1EA8C88D0;
  v109 += 16;
  id v93 = (void (**)(id, uint64_t))(v109 - 8);
  uint64_t v95 = v41;
  __int16 v94 = v42;
  while (1)
  {
    uint64_t v47 = v106;
    uint64_t v48 = v108;
    v42(v106, v41, v108);
    id v49 = (id)sub_1D98839C8((unint64_t *)&unk_1EA8C9AA0, MEMORY[0x1E4F27D00]);
    id v50 = v107;
    sub_1D99070C0();
    sub_1D98839C8(&qword_1EA8C88D0, MEMORY[0x1E4F27CC8]);
    char v51 = sub_1D9906D60();
    unint64_t v52 = *v43;
    (*v43)(v50, v48);
    v52(v47, v48);
    if (v51)
    {

      sub_1D968E508(v110, &qword_1EA8C88C8);
      (*v100)(v105, v112);
      return;
    }
    uint64_t v53 = v110;
    uint64_t v54 = v112;
    uint64_t v55 = (void (*)(uint64_t *, void))sub_1D99070E0();
    id v57 = *v56;
    v55(v116, 0);
    (*v98)(v20, v53, v54);
    sub_1D99070D0();
    uint64_t v58 = *v100;
    (*v100)(v20, v54);
    id v59 = objc_msgSend(v99, sel_historyForMessagePart_, v57);
    if (!v59)
    {
      __break(1u);
      goto LABEL_48;
    }
    uint64_t v60 = v59;
    sub_1D968E084(0, (unint64_t *)&unk_1EA8C9AB0);
    unint64_t v61 = sub_1D9906F20();

    double v97 = v58;
    uint64_t v96 = (uint64_t)v57;
    if (v61 >> 62) {
      break;
    }
    uint64_t v62 = *(void *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v62) {
      goto LABEL_19;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    uint64_t v41 = v95;
    uint64_t v42 = v94;
    char v43 = v93;
    uint64_t v44 = (uint64_t)&qword_1EA8C88D0;
  }
  swift_bridgeObjectRetain();
  uint64_t v62 = sub_1D9907660();
  swift_bridgeObjectRelease();
  if (!v62) {
    goto LABEL_14;
  }
LABEL_19:
  unint64_t v101 = v61 & 0xC000000000000001;
  uint64_t v63 = 4;
  while (1)
  {
    uint64_t v64 = v63 - 4;
    if (v101)
    {
      id v65 = (void (*)(char *, uint64_t))MEMORY[0x1E01680D0](v63 - 4, v61);
      uint64_t v66 = v63 - 3;
      if (__OFADD__(v64, 1)) {
        goto LABEL_45;
      }
    }
    else
    {
      id v65 = (void (*)(char *, uint64_t))*(id *)(v61 + 8 * v63);
      uint64_t v66 = v63 - 3;
      if (__OFADD__(v64, 1))
      {
LABEL_45:
        __break(1u);
        goto LABEL_46;
      }
    }
    uint64_t v58 = v65;
    id v57 = objc_msgSend(v65, sel_messagePartText);
    id v67 = objc_msgSend(v57, sel_string);
    uint64_t v68 = sub_1D9906DA0();
    uint64_t v70 = v69;

    if (v68 == v113 && v70 == v114) {
      break;
    }
    uint64_t v44 = sub_1D9907710();
    swift_bridgeObjectRelease();
    if (v44) {
      goto LABEL_37;
    }

    ++v63;
    if (v66 == v62) {
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRelease();
LABEL_37:
  uint64_t v64 = v103;
  swift_bridgeObjectRelease();
  uint64_t v20 = v104;
  uint64_t v44 = (uint64_t)v102;
  uint64_t v63 = v112;
  if (qword_1EBE2B220 == -1) {
    goto LABEL_38;
  }
LABEL_46:
  swift_once();
LABEL_38:
  uint64_t v72 = sub_1D9686810((uint64_t)v20, (uint64_t)qword_1EBE2B208);
  (*(void (**)(uint64_t, uint64_t, char *))(v64 + 16))(v44, v72, v20);
  id v73 = v111;
  id v74 = v92;
  id v50 = v73;
  id v49 = v74;
  uint64_t v75 = sub_1D9906B80();
  int v76 = sub_1D9907120();
  if (!os_log_type_enabled(v75, (os_log_type_t)v76))
  {

    (*(void (**)(uint64_t, char *))(v64 + 8))(v44, v20);
    sub_1D968E508(v110, &qword_1EA8C88C8);
    uint64_t v89 = v105;
    uint64_t v90 = v63;
    goto LABEL_43;
  }
  LODWORD(v114) = v76;
  uint64_t v77 = swift_slowAlloc();
  uint64_t v113 = swift_slowAlloc();
  v116[0] = v113;
  *(_DWORD *)uint64_t v77 = 136315650;
  id v78 = objc_msgSend(v50, sel_guid);
  if (!v78)
  {
LABEL_48:

    __break(1u);
    goto LABEL_49;
  }
  id v79 = v78;
  uint64_t v80 = sub_1D9906DA0();
  unint64_t v82 = v81;

  uint64_t v115 = sub_1D96863B0(v80, v82, v116);
  sub_1D9907370();

  swift_bridgeObjectRelease();
  *(_WORD *)(v77 + 12) = 2080;
  id v83 = objc_msgSend(v99, sel_guid);
  if (v83)
  {
    double v84 = v83;
    uint64_t v85 = sub_1D9906DA0();
    unint64_t v87 = v86;

    uint64_t v115 = sub_1D96863B0(v85, v87, v116);
    sub_1D9907370();

    swift_bridgeObjectRelease();
    *(_WORD *)(v77 + 22) = 2048;
    uint64_t v115 = v96;
    sub_1D9907370();
    _os_log_impl(&dword_1D967A000, v75, (os_log_type_t)v114, "Backward compatibility message %s matches an existing message %s at message part %ld.", (uint8_t *)v77, 0x20u);
    uint64_t v88 = v113;
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v88, -1, -1);
    MEMORY[0x1E016AD90](v77, -1, -1);

    (*(void (**)(char *, char *))(v103 + 8))(v102, v104);
    sub_1D968E508(v110, &qword_1EA8C88C8);
    uint64_t v89 = v105;
    uint64_t v90 = v112;
LABEL_43:
    v97(v89, v90);
    return;
  }
LABEL_49:

  __break(1u);
}

uint64_t sub_1D98839C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1D9883A10()
{
  unint64_t result = qword_1EBE2AE08;
  if (!qword_1EBE2AE08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EBE2AE08);
  }
  return result;
}

uint64_t *sub_1D9883A64(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void *sub_1D9883B4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1D96867CC(&qword_1EBE2B0A0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1D9883D1C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D9885428();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

void *sub_1D9883C34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  sub_1D96867CC(&qword_1EBE2B0A0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_1D9883F1C((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_1D9885428();
  if (v6 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t sub_1D9883D1C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1D9883F1C(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    void v5[2] = ~v7;
    void v5[3] = v12;
    void v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    unint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void sub_1D988411C(uint64_t a1)
{
  v151[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1D9906BA0();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  if (!*(void *)(a1 + 16))
  {
    if (qword_1EA8C8010 == -1)
    {
LABEL_49:
      sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
      os_log_t v148 = (os_log_t)sub_1D9906B80();
      os_log_type_t v87 = sub_1D9907140();
      if (os_log_type_enabled(v148, v87))
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v88 = 0;
        _os_log_impl(&dword_1D967A000, v148, v87, "Tried to update chats with summaries, but there were no summaries provided.", v88, 2u);
        MEMORY[0x1E016AD90](v88, -1, -1);
      }
      os_log_t v89 = v148;

      return;
    }
LABEL_81:
    swift_once();
    goto LABEL_49;
  }
  v124 = (char *)&v123 - v7;
  uint64_t v8 = swift_bridgeObjectRetain();
  v128 = sub_1D9883B4C(v8);
  swift_bridgeObjectRelease();
  id v9 = objc_msgSend(self, sel_sharedProvider);
  if (!v9)
  {
    if (qword_1EA8C8010 != -1) {
      swift_once();
    }
    sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
    swift_retain();
    uint64_t v90 = sub_1D9906B80();
    os_log_type_t v91 = sub_1D9907140();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = swift_slowAlloc();
      id v93 = (void *)swift_slowAlloc();
      v151[0] = v93;
      *(_DWORD *)uint64_t v92 = 136315394;
      uint64_t v149 = sub_1D96863B0(0xD00000000000002BLL, 0x80000001D992F780, (uint64_t *)v151);
      sub_1D9907370();
      *(_WORD *)(v92 + 12) = 2080;
      uint64_t v94 = swift_retain();
      uint64_t v95 = MEMORY[0x1E0167A70](v94, MEMORY[0x1E4FBB1A0]);
      unint64_t v97 = v96;
      swift_release();
      uint64_t v149 = sub_1D96863B0(v95, v97, (uint64_t *)v151);
      sub_1D9907370();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D967A000, v90, v91, "%s No broadcaster for messages with GUIDs %s", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v93, -1, -1);
      MEMORY[0x1E016AD90](v92, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    return;
  }
  id v125 = objc_msgSend(v9, sel_broadcasterForChatListeners);
  swift_unknownObjectRelease();
  v126 = (void *)sub_1D9896E14(MEMORY[0x1E4FBC860]);
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v143 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v145 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = *MEMORY[0x1E4F6CD08];
  uint64_t v136 = *MEMORY[0x1E4F6CD10];
  uint64_t v137 = v14;
  uint64_t v135 = *MEMORY[0x1E4F6CCF8];
  uint64_t v15 = *MEMORY[0x1E4F6CD00];
  v142 = (void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  uint64_t v140 = v15;
  uint64_t v141 = (void (**)(char *, uint64_t))(v3 + 8);
  double v130 = &v150;
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  uint64_t v129 = 0;
  *((void *)&v17 + 1) = 2;
  long long v139 = xmmword_1D991D850;
  uint64_t v138 = MEMORY[0x1E4FBC840] + 8;
  *(void *)&long long v17 = 136315138;
  long long v133 = v17;
  *(void *)&long long v17 = 138412290;
  long long v127 = v17;
  long long v134 = xmmword_1D991D840;
  uint64_t v131 = a1;
  uint64_t v132 = v2;
  long long v144 = v6;
  while (1)
  {
    if (v13)
    {
      long long v147 = (void *)((v13 - 1) & v13);
      os_log_t v148 = v16;
      unint64_t v18 = __clz(__rbit64(v13)) | ((void)v16 << 6);
      goto LABEL_21;
    }
    BOOL v19 = __OFADD__(v16, 1);
    uint64_t v20 = ((char *)&v16->isa + 1);
    if (v19)
    {
      __break(1u);
      goto LABEL_80;
    }
    if ((uint64_t)v20 >= v145) {
      goto LABEL_58;
    }
    unint64_t v21 = *(void *)(v143 + 8 * (void)v20);
    if (v21) {
      goto LABEL_20;
    }
    uint64_t v22 = (char *)&v20->isa + 1;
    if ((uint64_t)&v20->isa + 1 >= v145) {
      goto LABEL_58;
    }
    unint64_t v21 = *(void *)(v143 + 8 * (void)v22);
    if (!v21)
    {
      uint64_t v22 = (char *)&v20->isa + 2;
      if ((uint64_t)&v20->isa + 2 >= v145) {
        goto LABEL_58;
      }
      unint64_t v21 = *(void *)(v143 + 8 * (void)v22);
      if (!v21)
      {
        uint64_t v22 = (char *)&v20->isa + 3;
        if ((uint64_t)&v20->isa + 3 < v145)
        {
          unint64_t v21 = *(void *)(v143 + 8 * (void)v22);
          if (v21) {
            goto LABEL_19;
          }
          while (1)
          {
            uint64_t v20 = (v22 + 1);
            if (__OFADD__(v22, 1)) {
              break;
            }
            if ((uint64_t)v20 >= v145) {
              goto LABEL_58;
            }
            unint64_t v21 = *(void *)(v143 + 8 * (void)v20);
            ++v22;
            if (v21) {
              goto LABEL_20;
            }
          }
LABEL_80:
          __break(1u);
          goto LABEL_81;
        }
LABEL_58:
        swift_release();
        if (v126[2])
        {
          sub_1D96867CC(&qword_1EBE2B4B0);
          __int16 v98 = (void *)sub_1D9906CB0();
          swift_bridgeObjectRelease();
          objc_msgSend(v125, sel_updatedSummariesForChatsWithGUIDsAndProperties_, v98);

          if (qword_1EA8C8010 != -1) {
            swift_once();
          }
          sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
          swift_retain();
          id v99 = sub_1D9906B80();
          os_log_type_t v100 = sub_1D9907120();
          if (os_log_type_enabled(v99, v100))
          {
            uint64_t v101 = swift_slowAlloc();
            uint64_t v102 = (void *)swift_slowAlloc();
            v151[0] = v102;
            *(_DWORD *)uint64_t v101 = 136315394;
            uint64_t v149 = sub_1D96863B0(0xD00000000000002BLL, 0x80000001D992F780, (uint64_t *)v151);
            sub_1D9907370();
            *(_WORD *)(v101 + 12) = 2080;
            uint64_t v103 = swift_retain();
            uint64_t v104 = MEMORY[0x1E0167A70](v103, MEMORY[0x1E4FBB1A0]);
            unint64_t v106 = v105;
            swift_release();
            uint64_t v149 = sub_1D96863B0(v104, v106, (uint64_t *)v151);
            sub_1D9907370();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1D967A000, v99, v100, "%s Broadcasted messagesUpdated for GUIDs %s", (uint8_t *)v101, 0x16u);
            swift_arrayDestroy();
            MEMORY[0x1E016AD90](v102, -1, -1);
            uint64_t v107 = v101;
LABEL_75:
            MEMORY[0x1E016AD90](v107, -1, -1);
            swift_unknownObjectRelease();

            return;
          }

          swift_release_n();
        }
        else
        {
          swift_release();
          swift_bridgeObjectRelease();
          if (qword_1EA8C8010 != -1) {
            swift_once();
          }
          sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
          id v99 = sub_1D9906B80();
          os_log_type_t v121 = sub_1D9907140();
          if (os_log_type_enabled(v99, v121))
          {
            double v122 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)double v122 = 0;
            _os_log_impl(&dword_1D967A000, v99, v121, "There were no chats to update after processing the summary dictionary.", v122, 2u);
            uint64_t v107 = (uint64_t)v122;
            goto LABEL_75;
          }
        }
        swift_unknownObjectRelease();
        return;
      }
    }
LABEL_19:
    uint64_t v20 = v22;
LABEL_20:
    long long v147 = (void *)((v21 - 1) & v21);
    os_log_t v148 = v20;
    unint64_t v18 = __clz(__rbit64(v21)) + ((void)v20 << 6);
LABEL_21:
    uint64_t v23 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v18);
    uint64_t v25 = *v23;
    uint64_t v24 = v23[1];
    uint64_t v26 = *(void **)(*(void *)(a1 + 56) + 8 * v18);
    uint64_t v27 = self;
    swift_bridgeObjectRetain();
    id v28 = v26;
    id v29 = objc_msgSend(v27, sel_sharedInstance);
    uint64_t v30 = (void *)sub_1D9906D70();
    id v31 = objc_msgSend(v29, sel_chatForMessageGUID_, v30);

    if (!v31)
    {
      swift_bridgeObjectRelease();

      goto LABEL_7;
    }
    id v146 = v28;
    if (!objc_msgSend(v31, sel_unreadCount))
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      id v108 = v146;
      if (qword_1EA8C8010 != -1) {
        swift_once();
      }
      uint64_t v109 = sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
      uint64_t v110 = v124;
      (*v142)(v124, v109, v2);
      id v57 = v31;
      id v111 = sub_1D9906B80();
      os_log_type_t v112 = sub_1D9907120();
      if (os_log_type_enabled(v111, v112))
      {
        os_log_t v148 = v111;
        uint64_t v113 = (uint8_t *)swift_slowAlloc();
        long long v147 = (void *)swift_slowAlloc();
        v151[0] = v147;
        *(_DWORD *)uint64_t v113 = v133;
        id v114 = objc_msgSend(v57, sel_guid);
        if (!v114) {
          goto LABEL_84;
        }
        uint64_t v115 = v114;
        uint64_t v116 = sub_1D9906DA0();
        unint64_t v118 = v117;

        uint64_t v149 = sub_1D96863B0(v116, v118, (uint64_t *)v151);
        sub_1D9907370();

        swift_bridgeObjectRelease();
        os_log_t v119 = v148;
        _os_log_impl(&dword_1D967A000, v148, v112, "Received summary for chat with GUID %s but chat is already marked as read (likely via another device). Not writing summary to chat.", v113, 0xCu);
        uint64_t v120 = v147;
        swift_arrayDestroy();
        MEMORY[0x1E016AD90](v120, -1, -1);
        MEMORY[0x1E016AD90](v113, -1, -1);

        swift_unknownObjectRelease();
        (*v141)(v124, v2);
      }
      else
      {

        swift_unknownObjectRelease();
        (*v141)(v110, v2);
      }
      swift_release();
      return;
    }
    id v32 = v146;
    id v33 = objc_msgSend(v146, sel_string);
    uint64_t v34 = sub_1D9906DA0();
    unint64_t v36 = v35;

    swift_bridgeObjectRelease();
    uint64_t v37 = HIBYTE(v36) & 0xF;
    if ((v36 & 0x2000000000000000) == 0) {
      uint64_t v37 = v34 & 0xFFFFFFFFFFFFLL;
    }
    if (!v37) {
      break;
    }
    uint64_t v38 = self;
    v151[0] = 0;
    id v39 = objc_msgSend(v38, sel_archivedDataWithRootObject_requiringSecureCoding_error_, v32, 1, v151);
    id v40 = v151[0];
    if (v39)
    {
      uint64_t v41 = sub_1D9906490();
      unint64_t v43 = v42;

      sub_1D96867CC((uint64_t *)&unk_1EA8C9A50);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v134;
      *(void *)(inited + 32) = sub_1D9906DA0();
      *(void *)(inited + 40) = v45;
      *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
      *(void *)(inited + 48) = v25;
      *(void *)(inited + 56) = v24;
      *(void *)(inited + 80) = sub_1D9906DA0();
      *(void *)(inited + 88) = v46;
      *(void *)(inited + 120) = MEMORY[0x1E4F277C0];
      *(void *)(inited + 96) = v41;
      *(void *)(inited + 104) = v43;
      *(void *)(inited + 128) = sub_1D9906DA0();
      *(void *)(inited + 136) = v47;
      *(void *)(inited + 168) = MEMORY[0x1E4FBB390];
      *(unsigned char *)(inited + 144) = 0;
      sub_1D9885378(v41, v43);
      unint64_t v48 = sub_1D9896F30(inited);
      uint64_t v49 = swift_initStackObject();
      *(_OWORD *)(v49 + 16) = v139;
      *(void *)(v49 + 32) = sub_1D9906DA0();
      *(void *)(v49 + 40) = v50;
      *(void *)(v49 + 72) = sub_1D96867CC(&qword_1EA8C9AC0);
      *(void *)(v49 + 48) = v48;
      unint64_t v51 = sub_1D9896F30(v49);
      sub_1D98853D0(v41, v43);
      goto LABEL_29;
    }
    uint64_t v69 = v40;
    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)sub_1D9906350();

    swift_willThrow();
    if (qword_1EA8C8010 != -1) {
      swift_once();
    }
    sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
    id v71 = v70;
    id v72 = v70;
    id v73 = sub_1D9906B80();
    os_log_type_t v74 = sub_1D9907140();
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = swift_slowAlloc();
      int v76 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v75 = v127;
      id v77 = v70;
      uint64_t v78 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v75 + 4) = v78;
      void *v76 = v78;

      _os_log_impl(&dword_1D967A000, v73, v74, "Failed to encode summary: %@", (uint8_t *)v75, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v76, -1, -1);
      MEMORY[0x1E016AD90](v75, -1, -1);
    }
    else
    {
    }
    uint64_t v129 = 0;
LABEL_7:
    unint64_t v13 = (unint64_t)v147;
    unint64_t v16 = v148;
  }
  swift_bridgeObjectRelease();
  sub_1D96867CC((uint64_t *)&unk_1EA8C9A50);
  uint64_t v52 = swift_initStackObject();
  *(_OWORD *)(v52 + 16) = v139;
  *(void *)(v52 + 32) = sub_1D9906DA0();
  *(void *)(v52 + 40) = v53;
  id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CA98]), sel_init);
  *(void *)(v52 + 72) = sub_1D968E084(0, &qword_1EA8C88E0);
  *(void *)(v52 + 48) = v54;
  unint64_t v51 = sub_1D9896F30(v52);
LABEL_29:
  uint64_t v55 = v144;
  sub_1D98E894C(v51);
  uint64_t v56 = (void *)sub_1D9906CB0();
  swift_bridgeObjectRelease();
  id v57 = objc_msgSend(v31, sel_updateProperties_, v56);

  if (!v57)
  {
    swift_bridgeObjectRelease();
    if (qword_1EA8C8010 != -1) {
      swift_once();
    }
    uint64_t v58 = sub_1D9686810(v2, (uint64_t)qword_1EA8CDC98);
    (*v142)(v55, v58, v2);
    id v59 = v31;
    uint64_t v60 = sub_1D9906B80();
    os_log_type_t v61 = sub_1D9907140();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      uint64_t v63 = (void *)swift_slowAlloc();
      v151[0] = v63;
      *(_DWORD *)uint64_t v62 = v133;
      id v64 = objc_msgSend(v59, sel_guid);
      if (!v64)
      {

        __break(1u);
      }
      id v65 = v64;
      uint64_t v66 = sub_1D9906DA0();
      unint64_t v68 = v67;

      uint64_t v149 = sub_1D96863B0(v66, v68, (uint64_t *)v151);
      sub_1D9907370();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1D967A000, v60, v61, "Failed to update summary property on chat with guid %s.", v62, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v63, -1, -1);
      MEMORY[0x1E016AD90](v62, -1, -1);

      uint64_t v2 = v132;
      (*v141)(v144, v132);
      a1 = v131;
    }
    else
    {

      (*v141)(v55, v2);
    }
    goto LABEL_7;
  }
  id v79 = objc_msgSend(v31, sel_guid);
  if (v79)
  {
    uint64_t v80 = v79;
    uint64_t v81 = sub_1D9906DA0();
    uint64_t v83 = v82;

    uint64_t v84 = sub_1D98E894C(v51);
    swift_bridgeObjectRelease();
    uint64_t v85 = v126;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v151[0] = v85;
    sub_1D98E11DC(v84, v81, v83, isUniquelyReferenced_nonNull_native);
    v126 = v151[0];

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  __break(1u);
LABEL_84:

  __break(1u);
}

uint64_t sub_1D9885378(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t sub_1D98853D0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1D9885428()
{
  return swift_release();
}

NSNumber __swiftcall NSNumber.round(toSignificantDigit:)(Swift::Int64 toSignificantDigit)
{
  if (toSignificantDigit <= 1) {
    Swift::Int64 v2 = 1;
  }
  else {
    Swift::Int64 v2 = toSignificantDigit;
  }
  uint64_t v3 = (uint64_t)objc_msgSend(v1, sel_longLongValue);
  if (v3 && (v3 <= 9 ? (BOOL v4 = (unint64_t)v2 > 1) : (BOOL v4 = 1), v4))
  {
    double v5 = log10(fabs((double)v3));
    __exp10(round(v5) - (double)v2 + 1.0);
    return (NSNumber)sub_1D9907050();
  }
  else
  {
    sub_1D988550C();
    return (NSNumber)sub_1D99072F0();
  }
}

unint64_t sub_1D988550C()
{
  unint64_t result = qword_1EBE2B080;
  if (!qword_1EBE2B080)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EBE2B080);
  }
  return result;
}

Class sub_1D988554C(void *a1, uint64_t a2, Swift::Int64 a3)
{
  id v4 = a1;
  v5.super.super.isa = NSNumber.round(toSignificantDigit:)(a3).super.super.isa;

  return v5.super.super.isa;
}

NSNumber __swiftcall NSNumber.bucket()()
{
  if ((uint64_t)objc_msgSend(v0, sel_longLongValue) < 100) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = 2;
  }
  id v2 = objc_msgSend(v0, sel_roundToSignificantDigit_, v1);

  return (NSNumber)v2;
}

id sub_1D98855EC(void *a1)
{
  id v1 = a1;
  if ((uint64_t)objc_msgSend(v1, sel_longLongValue) < 100) {
    uint64_t v2 = 1;
  }
  else {
    uint64_t v2 = 2;
  }
  id v3 = objc_msgSend(v1, sel_roundToSignificantDigit_, v2);

  return v3;
}

uint64_t sub_1D988565C()
{
  return sub_1D99067C0();
}

id DaemonCoreHelloWorldClass.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id DaemonCoreHelloWorldClass.init()()
{
  uint64_t v1 = OBJC_IVAR___IMDaemonCoreHelloWorldClass_Impl_sharedUtilitiesHelloWorld;
  id v2 = objc_allocWithZone((Class)sub_1D9906820());
  id v3 = v0;
  *(void *)&v0[v1] = objc_msgSend(v2, sel_init);
  uint64_t v4 = OBJC_IVAR___IMDaemonCoreHelloWorldClass_Impl_persistenceHelloWorld;
  *(void *)&v3[v4] = objc_msgSend(objc_allocWithZone((Class)sub_1D99067D0()), sel_init);

  v6.receiver = v3;
  v6.super_class = (Class)type metadata accessor for DaemonCoreHelloWorldClass();
  return objc_msgSendSuper2(&v6, sel_init);
}

uint64_t type metadata accessor for DaemonCoreHelloWorldClass()
{
  return self;
}

id DaemonCoreHelloWorldClass.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DaemonCoreHelloWorldClass();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t IMDaemonCoreHelloWorld.init()()
{
  return sub_1D99067A0();
}

uint64_t type metadata accessor for IMDaemonCoreHelloWorld()
{
  uint64_t result = qword_1EA8C88F8;
  if (!qword_1EA8C88F8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

Swift::Void __swiftcall IMDaemonCoreHelloWorld.printGreeting()()
{
}

uint64_t method lookup function for DaemonCoreHelloWorldClass(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for DaemonCoreHelloWorldClass);
}

uint64_t dispatch thunk of DaemonCoreHelloWorldClass.printGreeting()()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x60))();
}

uint64_t *initializeBufferWithCopyOfBuffer for IMDaemonCoreHelloWorld(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_1D9906800();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    id v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_1D99067B0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1D9906800();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = sub_1D99067B0();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t initializeWithCopy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9906800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1D99067B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9906800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1D99067B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9906800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1D99067B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9906800();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = sub_1D99067B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1D9885EC4);
}

uint64_t sub_1D9885EC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1D9906800();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = sub_1D99067B0();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t storeEnumTagSinglePayload for IMDaemonCoreHelloWorld(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1D9885FD0);
}

uint64_t sub_1D9885FD0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = sub_1D9906800();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = sub_1D99067B0();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_1D98860D4()
{
  uint64_t result = sub_1D9906800();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_1D99067B0();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1D988619C()
{
  uint64_t v0 = sub_1D9906BA0();
  sub_1D9883A64(v0, qword_1EBE2C268);
  sub_1D9686810(v0, (uint64_t)qword_1EBE2C268);
  return sub_1D9906B90();
}

char *CallManager.__allocating_init(serviceSession:)(void *a1)
{
  unint64_t v2 = v1;
  id v4 = objc_allocWithZone(v2);
  id v5 = objc_msgSend(self, sel_sharedInstance);
  id v6 = objc_msgSend(v5, sel_conversationManager);

  id v7 = objc_msgSend(self, sel_sharedFeatureFlags);
  id v8 = objc_allocWithZone((Class)type metadata accessor for CallManager());
  uint64_t v9 = sub_1D98864DC(a1, v6, v7);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v9;
}

char *CallManager.init(serviceSession:)(void *a1)
{
  id v2 = objc_msgSend(self, sel_sharedInstance);
  id v3 = objc_msgSend(v2, sel_conversationManager);

  id v4 = objc_msgSend(self, sel_sharedFeatureFlags);
  id v5 = objc_allocWithZone((Class)type metadata accessor for CallManager());
  id v6 = sub_1D98864DC(a1, v3, v4);
  swift_getObjectType();
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t type metadata accessor for CallManager()
{
  return self;
}

char *sub_1D98864DC(void *a1, void *a2, void *a3)
{
  uint64_t v37 = a2;
  uint64_t v38 = a3;
  unint64_t v36 = a1;
  uint64_t v4 = sub_1D96867CC((uint64_t *)&unk_1EBE2B000);
  MEMORY[0x1F4188790](v4 - 8);
  id v39 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_1D99071E0();
  uint64_t v6 = *(void *)(v35 - 8);
  MEMORY[0x1F4188790](v35);
  id v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_1D99071D0();
  MEMORY[0x1F4188790](v9);
  uint64_t v10 = sub_1D9906C80();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v34 = OBJC_IVAR___IMDCallManager_Impl_queue;
  sub_1D968E084(0, (unint64_t *)&qword_1EBE2B050);
  uint64_t v11 = v3;
  sub_1D99071F0();
  sub_1D9906C70();
  aBlock[0] = MEMORY[0x1E4FBC860];
  sub_1D988EDA8((unint64_t *)&qword_1EBE2B040, MEMORY[0x1E4FBCC10]);
  sub_1D96867CC((uint64_t *)&unk_1EBE2AFE0);
  sub_1D968E0C0();
  sub_1D99073F0();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E4FBCC58], v35);
  *(void *)(v33[1] + v34) = sub_1D9907220();
  *(void *)&v11[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask] = 0;
  uint64_t v12 = v36;
  uint64_t v13 = v37;
  *(void *)&v11[OBJC_IVAR___IMDCallManager_Impl_serviceSession] = v36;
  *(void *)&v11[OBJC_IVAR___IMDCallManager_Impl_conversationManager] = v13;
  uint64_t v14 = v38;
  *(void *)&v11[OBJC_IVAR___IMDCallManager_Impl_featureFlags] = v38;
  id v15 = v12;
  id v16 = v13;
  id v17 = v14;

  unint64_t v18 = (objc_class *)type metadata accessor for CallManager();
  v41.receiver = v11;
  v41.super_class = v18;
  BOOL v19 = (char *)objc_msgSendSuper2(&v41, sel_init);
  uint64_t v20 = *(void **)&v19[OBJC_IVAR___IMDCallManager_Impl_conversationManager];
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = v19;
  void aBlock[4] = sub_1D988EF34;
  void aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D96817C0;
  aBlock[3] = &unk_1F3392F30;
  uint64_t v22 = _Block_copy(aBlock);
  uint64_t v23 = v19;
  id v24 = v20;
  swift_release();
  objc_msgSend(v24, sel_registerWithCompletionHandler_, v22);
  _Block_release(v22);

  uint64_t v25 = sub_1D9907030();
  uint64_t v26 = (uint64_t)v39;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v39, 1, 1, v25);
  uint64_t v27 = swift_allocObject();
  swift_unknownObjectWeakInit();
  sub_1D9907010();
  swift_retain();
  uint64_t v28 = sub_1D9907000();
  id v29 = (void *)swift_allocObject();
  uint64_t v30 = MEMORY[0x1E4FBCFD8];
  void v29[2] = v28;
  v29[3] = v30;
  void v29[4] = v27;
  swift_release();
  uint64_t v31 = sub_1D967D898(v26, (uint64_t)&unk_1EA8C8A60, (uint64_t)v29);

  *(void *)&v23[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask] = v31;
  swift_release();
  return v23;
}

id sub_1D98869CC(uint64_t a1)
{
  if (qword_1EBE2AFC0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D9906BA0();
  sub_1D9686810(v2, (uint64_t)qword_1EBE2C2C8);
  id v3 = sub_1D9906B80();
  os_log_type_t v4 = sub_1D9907160();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1D967A000, v3, v4, "TUConversationManager registered", v5, 2u);
    MEMORY[0x1E016AD90](v5, -1, -1);
  }

  uint64_t v6 = *(void **)(a1 + OBJC_IVAR___IMDCallManager_Impl_conversationManager);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR___IMDCallManager_Impl_queue);

  return objc_msgSend(v6, sel_addDelegate_queue_, a1, v7);
}

uint64_t sub_1D9886ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[42] = a4;
  uint64_t v5 = sub_1D99062E0();
  v4[43] = v5;
  v4[44] = *(void *)(v5 - 8);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  sub_1D96867CC(&qword_1EBE2AF58);
  v4[47] = swift_task_alloc();
  uint64_t v6 = sub_1D99072A0();
  v4[48] = v6;
  v4[49] = *(void *)(v6 - 8);
  v4[50] = swift_task_alloc();
  v4[51] = sub_1D9907010();
  v4[52] = sub_1D9907000();
  uint64_t v8 = sub_1D9906FC0();
  v4[53] = v8;
  v4[54] = v7;
  return MEMORY[0x1F4188298](sub_1D9886C70, v8, v7);
}

uint64_t sub_1D9886C70()
{
  id v1 = objc_msgSend(self, sel_sharedInstance);
  v0[55] = v1;
  if (qword_1EBE2AFC0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_1D9906BA0();
  v0[56] = sub_1D9686810(v2, (uint64_t)qword_1EBE2C2C8);
  id v3 = sub_1D9906B80();
  os_log_type_t v4 = sub_1D9907160();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1D967A000, v3, v4, "Waiting for new chats ", v5, 2u);
    MEMORY[0x1E016AD90](v5, -1, -1);
  }

  v0[2] = v0;
  v0[7] = v0 + 70;
  v0[3] = sub_1D9886E48;
  uint64_t v6 = swift_continuation_init();
  v0[20] = MEMORY[0x1E4F143A8];
  v0[21] = 0x40000000;
  v0[22] = sub_1D988806C;
  v0[23] = &unk_1E6B786B8;
  v0[24] = v6;
  objc_msgSend(v1, sel_waitForLoadedChatsWithCompletionHandler_, v0 + 20);
  return MEMORY[0x1F41881E8](v0 + 2);
}

uint64_t sub_1D9886E48()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 432);
  uint64_t v2 = *(void *)(*(void *)v0 + 424);
  return MEMORY[0x1F4188298](sub_1D9886F50, v2, v1);
}

uint64_t sub_1D9886F50()
{
  uint64_t v1 = sub_1D9906B80();
  os_log_type_t v2 = sub_1D9907160();
  if (os_log_type_enabled(v1, v2))
  {
    id v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v3 = 0;
    _os_log_impl(&dword_1D967A000, v1, v2, "Notified that all IMDChats are loaded.", v3, 2u);
    MEMORY[0x1E016AD90](v3, -1, -1);
  }
  uint64_t v4 = v0[42];

  swift_beginAccess();
  uint64_t v5 = MEMORY[0x1E016AE80](v4 + 16);
  v0[57] = v5;
  if (!v5) {
    goto LABEL_34;
  }
  id v6 = objc_msgSend(*(id *)(v5 + OBJC_IVAR___IMDCallManager_Impl_conversationManager), sel_activeConversations);
  v0[58] = sub_1D968E084(0, (unint64_t *)&unk_1EBE2B020);
  sub_1D988ED58((unint64_t *)&unk_1EBE2B030, (unint64_t *)&unk_1EBE2B020);
  uint64_t v7 = sub_1D9907070();

  if ((v7 & 0xC000000000000001) == 0)
  {
    uint64_t v13 = 0;
    uint64_t v21 = -1;
    uint64_t v22 = -1 << *(unsigned char *)(v7 + 32);
    uint64_t v12 = ~v22;
    uint64_t v11 = v7 + 56;
    uint64_t v23 = *(void *)(v7 + 56);
    uint64_t v24 = -v22;
    BOOL v25 = v24 < 64;
    uint64_t v26 = -1 << v24;
    v0[60] = v7 + 56;
    v0[61] = v12;
    if (v25) {
      uint64_t v21 = ~v26;
    }
    unint64_t v14 = v21 & v23;
    v0[59] = v7;
    if ((v21 & v23) != 0) {
      goto LABEL_7;
    }
    goto LABEL_17;
  }
  sub_1D9907430();
  uint64_t v8 = sub_1D99070A0();
  uint64_t v7 = v0[10];
  uint64_t v11 = v0[11];
  uint64_t v12 = v0[12];
  uint64_t v13 = v0[13];
  unint64_t v14 = v0[14];
  v0[60] = v11;
  v0[61] = v12;
  v0[59] = v7;
  if ((v7 & 0x8000000000000000) == 0)
  {
    if (v14)
    {
LABEL_7:
      uint64_t v15 = (v14 - 1) & v14;
      unint64_t v16 = __clz(__rbit64(v14)) | (v13 << 6);
      uint64_t v17 = v13;
LABEL_8:
      id v18 = *(id *)(*(void *)(v7 + 48) + 8 * v16);
      goto LABEL_9;
    }
LABEL_17:
    int64_t v27 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      return MEMORY[0x1F4187C78](v8, v9, v10);
    }
    int64_t v28 = (unint64_t)(v12 + 64) >> 6;
    if (v27 >= v28) {
      goto LABEL_33;
    }
    unint64_t v29 = *(void *)(v11 + 8 * v27);
    uint64_t v17 = v13 + 1;
    if (!v29)
    {
      uint64_t v17 = v13 + 2;
      if (v13 + 2 >= v28) {
        goto LABEL_33;
      }
      unint64_t v29 = *(void *)(v11 + 8 * v17);
      if (!v29)
      {
        uint64_t v17 = v13 + 3;
        if (v13 + 3 >= v28) {
          goto LABEL_33;
        }
        unint64_t v29 = *(void *)(v11 + 8 * v17);
        if (!v29)
        {
          uint64_t v17 = v13 + 4;
          if (v13 + 4 >= v28) {
            goto LABEL_33;
          }
          unint64_t v29 = *(void *)(v11 + 8 * v17);
          if (!v29)
          {
            uint64_t v31 = v13 + 5;
            while (v28 != v31)
            {
              unint64_t v29 = *(void *)(v11 + 8 * v31++);
              if (v29)
              {
                uint64_t v17 = v31 - 1;
                goto LABEL_20;
              }
            }
            goto LABEL_33;
          }
        }
      }
    }
LABEL_20:
    uint64_t v15 = (v29 - 1) & v29;
    unint64_t v16 = __clz(__rbit64(v29)) + (v17 << 6);
    goto LABEL_8;
  }
  uint64_t v30 = sub_1D99074A0();
  if (!v30) {
    goto LABEL_33;
  }
  v0[38] = v30;
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v18 = (id)v0[41];
  swift_unknownObjectRelease();
  uint64_t v17 = v13;
  uint64_t v15 = v14;
LABEL_9:
  v0[63] = v17;
  v0[64] = v15;
  v0[62] = v18;
  if (!v18)
  {
LABEL_33:
    id v32 = (void *)v0[57];
    sub_1D9885428();

LABEL_34:
    id v33 = objc_msgSend(self, sel_defaultCenter);
    sub_1D99072B0();

    sub_1D9907290();
    swift_beginAccess();
    v0[66] = @"__kIMDChatRegistryChatKey";
    v0[67] = sub_1D9907000();
    uint64_t v34 = sub_1D988EDA8((unint64_t *)&unk_1EBE2AE80, MEMORY[0x1E4F27FA0]);
    uint64_t v35 = (void *)swift_task_alloc();
    v0[68] = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1D9887898;
    uint64_t v8 = v0[47];
    uint64_t v9 = v0[48];
    uint64_t v10 = v34;
    return MEMORY[0x1F4187C78](v8, v9, v10);
  }
  BOOL v19 = (void *)swift_task_alloc();
  v0[65] = v19;
  *BOOL v19 = v0;
  v19[1] = sub_1D9887424;
  return sub_1D9888090((uint64_t)v18);
}

uint64_t sub_1D9887424()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 432);
  uint64_t v3 = *(void *)(v1 + 424);
  return MEMORY[0x1F4188298](sub_1D9887544, v3, v2);
}

uint64_t sub_1D9887544()
{
  uint64_t v4 = *(void *)(v0 + 504);
  unint64_t v5 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 472);
  if ((v6 & 0x8000000000000000) == 0)
  {
    if (v5)
    {
      uint64_t v7 = (v5 - 1) & v5;
      unint64_t v8 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v9 = *(void *)(v0 + 504);
LABEL_4:
      id v10 = *(id *)(*(void *)(v6 + 48) + 8 * v8);
      goto LABEL_7;
    }
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      return MEMORY[0x1F4187C78](v1, v2, v3);
    }
    int64_t v15 = (unint64_t)(*(void *)(v0 + 488) + 64) >> 6;
    if (v14 < v15)
    {
      uint64_t v16 = *(void *)(v0 + 480);
      unint64_t v17 = *(void *)(v16 + 8 * v14);
      uint64_t v9 = v4 + 1;
      if (v17)
      {
LABEL_14:
        uint64_t v7 = (v17 - 1) & v17;
        unint64_t v8 = __clz(__rbit64(v17)) + (v9 << 6);
        goto LABEL_4;
      }
      uint64_t v9 = v4 + 2;
      if (v4 + 2 < v15)
      {
        unint64_t v17 = *(void *)(v16 + 8 * v9);
        if (v17) {
          goto LABEL_14;
        }
        uint64_t v9 = v4 + 3;
        if (v4 + 3 < v15)
        {
          unint64_t v17 = *(void *)(v16 + 8 * v9);
          if (v17) {
            goto LABEL_14;
          }
          uint64_t v9 = v4 + 4;
          if (v4 + 4 < v15)
          {
            unint64_t v17 = *(void *)(v16 + 8 * v9);
            if (!v17)
            {
              uint64_t v18 = v4 + 5;
              while (v15 != v18)
              {
                unint64_t v17 = *(void *)(v16 + 8 * v18++);
                if (v17)
                {
                  uint64_t v9 = v18 - 1;
                  goto LABEL_14;
                }
              }
              goto LABEL_25;
            }
            goto LABEL_14;
          }
        }
      }
    }
LABEL_25:
    BOOL v19 = *(void **)(v0 + 456);
    sub_1D9885428();

    id v20 = objc_msgSend(self, sel_defaultCenter);
    sub_1D99072B0();

    sub_1D9907290();
    swift_beginAccess();
    *(void *)(v0 + 528) = @"__kIMDChatRegistryChatKey";
    *(void *)(v0 + 536) = sub_1D9907000();
    uint64_t v21 = sub_1D988EDA8((unint64_t *)&unk_1EBE2AE80, MEMORY[0x1E4F27FA0]);
    uint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1D9887898;
    uint64_t v1 = *(void *)(v0 + 376);
    uint64_t v2 = *(void *)(v0 + 384);
    uint64_t v3 = v21;
    return MEMORY[0x1F4187C78](v1, v2, v3);
  }
  uint64_t v11 = sub_1D99074A0();
  if (!v11) {
    goto LABEL_25;
  }
  *(void *)(v0 + 304) = v11;
  swift_unknownObjectRetain();
  swift_dynamicCast();
  id v10 = *(id *)(v0 + 328);
  swift_unknownObjectRelease();
  uint64_t v9 = v4;
  uint64_t v7 = v5;
LABEL_7:
  *(void *)(v0 + 504) = v9;
  *(void *)(v0 + 512) = v7;
  *(void *)(v0 + 496) = v10;
  if (!v10) {
    goto LABEL_25;
  }
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 520) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1D9887424;
  return sub_1D9888090((uint64_t)v10);
}

uint64_t sub_1D9887898()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 552) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 536);
  if (v0)
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = sub_1D9906FC0();
      uint64_t v6 = v5;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1D9887FE4;
  }
  else
  {
    if (v3)
    {
      swift_getObjectType();
      uint64_t v4 = sub_1D9906FC0();
      uint64_t v6 = v8;
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v6 = 0;
    }
    uint64_t v7 = sub_1D9887A30;
  }
  return MEMORY[0x1F4188298](v7, v4, v6);
}

uint64_t sub_1D9887A30()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  return MEMORY[0x1F4188298](sub_1D9887A94, v1, v2);
}

uint64_t sub_1D9887A94()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 352);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v4 = *(void **)(v0 + 440);
    (*(void (**)(void, void))(*(void *)(v0 + 392) + 8))(*(void *)(v0 + 400), *(void *)(v0 + 384));

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  uint64_t v7 = (_OWORD *)(v0 + 200);
  (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 368), v1, v2);
  uint64_t v8 = sub_1D99062D0();
  if (!v8)
  {
    *uint64_t v7 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
LABEL_15:
    sub_1D968E508(v0 + 200, &qword_1EBE2B0C0);
    goto LABEL_16;
  }
  uint64_t v9 = v8;
  *(void *)(v0 + 280) = sub_1D9906DA0();
  *(void *)(v0 + 288) = v10;
  sub_1D99074F0();
  if (*(void *)(v9 + 16) && (unint64_t v11 = sub_1D968DD3C(v0 + 120), (v12 & 1) != 0))
  {
    sub_1D9686690(*(void *)(v9 + 56) + 32 * v11, v0 + 200);
  }
  else
  {
    *uint64_t v7 = 0u;
    *(_OWORD *)(v0 + 216) = 0u;
  }
  swift_bridgeObjectRelease();
  sub_1D988F068(v0 + 120);
  if (!*(void *)(v0 + 224)) {
    goto LABEL_15;
  }
  sub_1D968E084(0, (unint64_t *)&unk_1EBE2B070);
  if (swift_dynamicCast())
  {
    uint64_t v13 = *(id *)(v0 + 320);
    int64_t v14 = sub_1D9906B80();
    os_log_type_t v15 = sub_1D9907160();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      unint64_t v17 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 138412290;
      *(void *)(v16 + 4) = v13;
      *unint64_t v17 = v13;
      _os_log_impl(&dword_1D967A000, v14, v15, "Notified that chat was added %@", (uint8_t *)v16, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v17, -1, -1);
      MEMORY[0x1E016AD90](v16, -1, -1);
    }
    else
    {

      int64_t v14 = v13;
    }
    uint64_t v31 = *(void *)(v0 + 336);

    uint64_t v32 = MEMORY[0x1E016AE80](v31 + 16);
    if (v32)
    {
      id v33 = (void *)v32;
      sub_1D9888990(v13);
    }
    (*(void (**)(void, void))(*(void *)(v0 + 352) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 344));
    goto LABEL_23;
  }
LABEL_16:
  (*(void (**)(void, void, void))(*(void *)(v0 + 352) + 16))(*(void *)(v0 + 360), *(void *)(v0 + 368), *(void *)(v0 + 344));
  uint64_t v18 = sub_1D9906B80();
  os_log_type_t v19 = sub_1D9907150();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 368);
  uint64_t v23 = *(void *)(v0 + 344);
  uint64_t v24 = *(void *)(v0 + 352);
  if (v20)
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v38 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    *(void *)(v0 + 296) = sub_1D99062D0();
    sub_1D96867CC(&qword_1EA8C8A68);
    uint64_t v27 = sub_1D9906DD0();
    *(void *)(v25 + 4) = sub_1D96863B0(v27, v28, &v38);
    swift_bridgeObjectRelease();
    unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v29(v21, v23);
    _os_log_impl(&dword_1D967A000, v18, v19, "Received invalid object type from IMDChatAddedNotification %s", (uint8_t *)v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v26, -1, -1);
    MEMORY[0x1E016AD90](v25, -1, -1);

    v29(v22, v23);
  }
  else
  {

    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v30(v21, v23);
    v30(v22, v23);
  }
LABEL_23:
  *(void *)(v0 + 536) = sub_1D9907000();
  uint64_t v34 = sub_1D988EDA8((unint64_t *)&unk_1EBE2AE80, MEMORY[0x1E4F27FA0]);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 544) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_1D9887898;
  uint64_t v36 = *(void *)(v0 + 376);
  uint64_t v37 = *(void *)(v0 + 384);
  return MEMORY[0x1F4187C78](v36, v37, v34);
}

uint64_t sub_1D9887FE4()
{
  *(void *)(v0 + 312) = *(void *)(v0 + 552);
  sub_1D96867CC(&qword_1EBE2B7E8);
  uint64_t v1 = MEMORY[0x1E4FBC248];
  uint64_t v2 = swift_dynamicCast();
  uint64_t v3 = MEMORY[0x1E4FBC278];
  return MEMORY[0x1F41868E8](v2, v1, v3);
}

uint64_t sub_1D988806C(uint64_t a1, char a2)
{
  **(unsigned char **)(*(void *)(*(void *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_1D9888090(uint64_t a1)
{
  void v2[4] = a1;
  void v2[5] = v1;
  sub_1D9907010();
  v2[6] = sub_1D9907000();
  uint64_t v4 = sub_1D9906FC0();
  v2[7] = v4;
  v2[8] = v3;
  return MEMORY[0x1F4188298](sub_1D9888128, v4, v3);
}

uint64_t sub_1D9888128()
{
  uint64_t v38 = v0;
  uint64_t v1 = (id *)(v0 + 4);
  uint64_t v2 = sub_1D988CE0C(v0[4]);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    swift_release();
    uint64_t v4 = (void *)v0[4];
    uint64_t v5 = v3;
    sub_1D988BEF8(v4, v5);

LABEL_18:
    uint64_t v32 = (uint64_t (*)(void))v0[1];
    return v32();
  }
  id v6 = objc_msgSend(*v1, sel_remoteMembers);
  sub_1D968E084(0, &qword_1EA8C89C8);
  sub_1D988ED58(&qword_1EA8C89D0, &qword_1EA8C89C8);
  uint64_t v7 = sub_1D9907070();

  if ((v7 & 0xC000000000000001) != 0) {
    uint64_t v8 = sub_1D9907470();
  }
  else {
    uint64_t v8 = *(void *)(v7 + 16);
  }
  swift_bridgeObjectRelease();
  if (v8 != 1
    || objc_msgSend(*v1, sel_avMode)
    || (id v9 = objc_msgSend(*v1, sel_presentationContext),
        id v10 = objc_msgSend(v9, sel_mode),
        v9,
        v10 != (id)1))
  {
    swift_release();
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    id v23 = *v1;
    uint64_t v24 = sub_1D9906BA0();
    sub_1D9686810(v24, (uint64_t)qword_1EBE2C2C8);
    id v25 = v23;
    uint64_t v5 = sub_1D9906B80();
    os_log_type_t v26 = sub_1D9907140();
    BOOL v27 = os_log_type_enabled(v5, v26);
    id v28 = *v1;
    if (v27)
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v29 = 138412290;
      v0[2] = v28;
      id v31 = v28;
      sub_1D9907370();
      *uint64_t v30 = v28;

      _os_log_impl(&dword_1D967A000, v5, v26, "Couldn't find chat for conversation %@", v29, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v30, -1, -1);
      MEMORY[0x1E016AD90](v29, -1, -1);
    }
    else
    {

      uint64_t v5 = *v1;
    }
    goto LABEL_18;
  }
  if (qword_1EBE2AFC0 != -1) {
    swift_once();
  }
  id v11 = *v1;
  uint64_t v12 = sub_1D9906BA0();
  sub_1D9686810(v12, (uint64_t)qword_1EBE2C2C8);
  id v13 = v11;
  int64_t v14 = sub_1D9906B80();
  os_log_type_t v15 = sub_1D9907160();
  BOOL v16 = os_log_type_enabled(v14, v15);
  id v17 = *v1;
  if (v16)
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    uint64_t v37 = v36;
    *(_DWORD *)uint64_t v18 = 136315138;
    id v19 = objc_msgSend(v17, sel_remoteMembers);
    sub_1D9907070();

    uint64_t v20 = sub_1D9907080();
    unint64_t v22 = v21;
    swift_bridgeObjectRelease();
    v0[3] = sub_1D96863B0(v20, v22, &v37);
    sub_1D9907370();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1D967A000, v14, v15, "Couldn't find chat for 1-1 conversation with %s, attempting chat creation!", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v36, -1, -1);
    MEMORY[0x1E016AD90](v18, -1, -1);
  }
  else
  {
  }
  uint64_t v34 = (void *)swift_task_alloc();
  v0[9] = v34;
  *uint64_t v34 = v0;
  v34[1] = sub_1D9888660;
  uint64_t v35 = v0[4];
  return sub_1D988AACC(v35);
}

uint64_t sub_1D9888660(uint64_t a1)
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 80) = a1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(v2 + 56);
  return MEMORY[0x1F4188298](sub_1D9888788, v4, v3);
}

uint64_t sub_1D9888788()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_release();
  if (v1)
  {
    uint64_t v2 = *(void **)(v0 + 32);
    uint64_t v3 = *(id *)(v0 + 80);
    sub_1D988BEF8(v2, v3);
  }
  else
  {
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void **)(v0 + 32);
    uint64_t v5 = sub_1D9906BA0();
    sub_1D9686810(v5, (uint64_t)qword_1EBE2C2C8);
    id v6 = v4;
    uint64_t v3 = sub_1D9906B80();
    os_log_type_t v7 = sub_1D9907140();
    BOOL v8 = os_log_type_enabled(v3, v7);
    id v9 = *(void **)(v0 + 32);
    if (v8)
    {
      id v10 = (uint8_t *)swift_slowAlloc();
      id v11 = (void *)swift_slowAlloc();
      *(_DWORD *)id v10 = 138412290;
      *(void *)(v0 + 16) = v9;
      id v12 = v9;
      sub_1D9907370();
      *id v11 = v9;

      _os_log_impl(&dword_1D967A000, v3, v7, "Couldn't find chat for conversation %@", v10, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v11, -1, -1);
      MEMORY[0x1E016AD90](v10, -1, -1);
    }
    else
    {

      uint64_t v3 = *(NSObject **)(v0 + 32);
    }
  }

  id v13 = *(uint64_t (**)(void))(v0 + 8);
  return v13();
}

void sub_1D9888990(void *a1)
{
  id v3 = objc_msgSend(*(id *)&v1[OBJC_IVAR___IMDCallManager_Impl_conversationManager], sel_activeConversations);
  sub_1D968E084(0, (unint64_t *)&unk_1EBE2B020);
  sub_1D988ED58((unint64_t *)&unk_1EBE2B030, (unint64_t *)&unk_1EBE2B020);
  uint64_t v4 = sub_1D9907070();

  uint64_t v5 = v1;
  id v6 = a1;
  sub_1D988E480(v4, v6);
  BOOL v8 = v7;
  swift_bridgeObjectRelease();

  if (v8)
  {
    id v15 = v8;
    sub_1D988BEF8(v15, v6);
  }
  else
  {
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_1D9906BA0();
    sub_1D9686810(v9, (uint64_t)qword_1EBE2C2C8);
    id v15 = v6;
    id v10 = sub_1D9906B80();
    os_log_type_t v11 = sub_1D9907160();
    if (os_log_type_enabled(v10, v11))
    {
      id v12 = (uint8_t *)swift_slowAlloc();
      id v13 = (void *)swift_slowAlloc();
      *(_DWORD *)id v12 = 138412290;
      id v14 = v15;
      sub_1D9907370();
      void *v13 = v15;

      _os_log_impl(&dword_1D967A000, v10, v11, "Couldn't find conversation for chat %@", v12, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v13, -1, -1);
      MEMORY[0x1E016AD90](v12, -1, -1);

      return;
    }
  }
}

id CallManager.__deallocating_deinit()
{
  if (*(void *)&v0[OBJC_IVAR___IMDCallManager_Impl_newChatListenerTask])
  {
    swift_retain();
    sub_1D9907040();
    swift_release();
  }
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CallManager();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CallManager.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CallManager.init()()
{
}

void sub_1D9888E34(void *a1, void *a2)
{
  uint64_t v5 = sub_1D9906590();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  BOOL v8 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend(*(id *)(v2 + OBJC_IVAR___IMDCallManager_Impl_featureFlags), sel_isAVLessSharePlayEnabled))return; {
  if (qword_1EBE2AFC0 != -1)
  }
    swift_once();
  uint64_t v9 = sub_1D9906BA0();
  uint64_t v10 = sub_1D9686810(v9, (uint64_t)qword_1EBE2C2C8);
  id v11 = a1;
  id v12 = a2;
  id v13 = v11;
  id v14 = v12;
  uint64_t v77 = v10;
  id v15 = sub_1D9906B80();
  os_log_type_t v16 = sub_1D9907160();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v74 = v5;
  uint64_t v75 = v8;
  uint64_t v76 = v6;
  id v72 = v14;
  if (v17)
  {
    uint64_t v18 = v13;
    id v19 = v14;
    uint64_t v20 = swift_slowAlloc();
    unint64_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138412546;
    uint64_t v79 = (uint64_t)v18;
    id v22 = v18;
    sub_1D9907370();
    *unint64_t v21 = v18;

    *(_WORD *)(v20 + 12) = 2112;
    uint64_t v79 = (uint64_t)v19;
    id v23 = v19;
    sub_1D9907370();
    v21[1] = v19;
    id v13 = v18;

    _os_log_impl(&dword_1D967A000, v15, v16, "Received request to post notification for conversation %@ on chat %@", (uint8_t *)v20, 0x16u);
    sub_1D96867CC(&qword_1EBE2B090);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v21, -1, -1);
    MEMORY[0x1E016AD90](v20, -1, -1);
  }
  else
  {
  }
  id v24 = objc_msgSend(v13, sel_initiator);
  id v25 = objc_msgSend(v24, sel_normalizedValue);

  id v73 = v25;
  if (!v25)
  {
    id v30 = v13;
    id v31 = sub_1D9906B80();
    os_log_type_t v32 = sub_1D9907140();
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)id v33 = 138412290;
      uint64_t v79 = (uint64_t)v30;
      id v35 = v30;
      sub_1D9907370();
      *uint64_t v34 = v30;

      _os_log_impl(&dword_1D967A000, v31, v32, "Can't post notification since we couldn't fetch initiator from conversation %@", v33, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v34, -1, -1);
      MEMORY[0x1E016AD90](v33, -1, -1);
    }
    else
    {
    }
    return;
  }
  uint64_t v81 = 0;
  uint64_t v82 = 0;
  id v26 = objc_msgSend(v13, sel_stagedActivitySession);
  if (v26)
  {
    BOOL v27 = v26;
    id v28 = objc_msgSend(v26, sel_activity);
    id v29 = objc_msgSend(v28, sel_localizedApplicationName);
LABEL_14:
    id v38 = v29;

    if (v38)
    {
      uint64_t v39 = sub_1D9906DA0();
      uint64_t v41 = v40;
    }
    else
    {

      uint64_t v41 = 0;
      uint64_t v39 = 0;
    }
    uint64_t v81 = v39;
    uint64_t v82 = v41;
    goto LABEL_18;
  }
  id v36 = objc_msgSend(v13, sel_activitySessions);
  sub_1D968E084(0, &qword_1EA8C89F0);
  sub_1D988ED58(&qword_1EA8C89F8, &qword_1EA8C89F0);
  uint64_t v37 = sub_1D9907070();

  BOOL v27 = (void *)sub_1D9889788(v37, &qword_1EA8C89F0);
  swift_bridgeObjectRelease();
  if (v27)
  {
    id v28 = objc_msgSend(v27, sel_activity);
    id v29 = objc_msgSend(v28, sel_localizedApplicationName);
    goto LABEL_14;
  }
  uint64_t v39 = 0;
  uint64_t v41 = 0;
LABEL_18:
  unint64_t v42 = v72;
  swift_bridgeObjectRetain_n();
  id v43 = v13;
  id v44 = v42;
  id v45 = v43;
  id v46 = v44;
  uint64_t v47 = sub_1D9906B80();
  os_log_type_t v48 = sub_1D9907160();
  int v49 = v48;
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v50 = swift_slowAlloc();
    unint64_t v51 = (void *)swift_slowAlloc();
    uint64_t v77 = swift_slowAlloc();
    uint64_t v78 = v77;
    *(_DWORD *)uint64_t v50 = 136315650;
    uint64_t v79 = v39;
    uint64_t v80 = v41;
    swift_bridgeObjectRetain();
    sub_1D96867CC(&qword_1EA8C8A00);
    uint64_t v52 = sub_1D9906DD0();
    LODWORD(v72) = v49;
    uint64_t v79 = sub_1D96863B0(v52, v53, &v78);
    sub_1D9907370();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v50 + 12) = 2112;
    uint64_t v79 = (uint64_t)v46;
    id v54 = v46;
    sub_1D9907370();
    *unint64_t v51 = v46;
    uint64_t v55 = v51;

    *(_WORD *)(v50 + 22) = 2080;
    v71[1] = v50 + 24;
    id v56 = objc_msgSend(v45, sel_UUID);
    id v57 = v75;
    sub_1D9906570();

    sub_1D988EDA8(&qword_1EA8C8A08, MEMORY[0x1E4F27990]);
    uint64_t v58 = v74;
    uint64_t v59 = sub_1D99076E0();
    unint64_t v61 = v60;
    (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v58);
    uint64_t v79 = sub_1D96863B0(v59, v61, &v78);
    sub_1D9907370();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D967A000, v47, (os_log_type_t)v72, "SharePlay notification will be posted for \"%s\" app in chat %@ and conversation %s", (uint8_t *)v50, 0x20u);
    sub_1D96867CC(&qword_1EBE2B090);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v55, -1, -1);
    uint64_t v62 = v77;
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v62, -1, -1);
    MEMORY[0x1E016AD90](v50, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v58 = v74;
  }
  id v63 = objc_msgSend(self, sel_synchronousDatabase);
  id v64 = objc_msgSend(v46, sel_guid);
  if (v64)
  {
    id v65 = v64;
    id v66 = objc_msgSend(v45, sel_UUID);
    unint64_t v67 = v75;
    sub_1D9906570();

    sub_1D9906560();
    (*(void (**)(char *, uint64_t))(v76 + 8))(v67, v58);
    unint64_t v68 = (void *)sub_1D9906D70();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    if (v82)
    {
      uint64_t v69 = (void *)sub_1D9906D70();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v69 = 0;
    }
    id v70 = v73;
    objc_msgSend(v63, sel_postSharePlayNotificationForChatGUID_faceTimeConversationUUID_handleIdentifier_localizedApplicationName_, v65, v68, v73, v69);
    swift_unknownObjectRelease();
  }
  else
  {

    __break(1u);
  }
}

uint64_t sub_1D9889788(uint64_t a1, unint64_t *a2)
{
  unint64_t v4 = a1 & 0xC000000000000001;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = sub_1D9907420();
    uint64_t v7 = v6;
    uint64_t v8 = sub_1D99074C0();
    char v10 = MEMORY[0x1E0167F80](v5, v7, v8, v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
LABEL_3:
      sub_1D988ED4C(v5, v7, v4 != 0);
      return 0;
    }
LABEL_7:
    sub_1D988C2C8(v5, v7, v4 != 0, a1, a2);
    uint64_t v11 = v15;
    sub_1D988ED4C(v5, v7, v4 != 0);
    return v11;
  }
  uint64_t result = sub_1D988C538(a1);
  if ((v14 & 1) == 0)
  {
    uint64_t v7 = v13;
    if (*(_DWORD *)(a1 + 36) == v13)
    {
      uint64_t v5 = result;
      if (result == 1 << *(unsigned char *)(a1 + 32)) {
        goto LABEL_3;
      }
      goto LABEL_7;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t CallManager.conversationManager(_:addedActiveConversation:)(uint64_t a1, void *a2)
{
  return sub_1D988E894(a2, "Received notification that conversation was added: %@", (uint64_t)&unk_1F3392EF0, (uint64_t)&unk_1EA8C8A48);
}

uint64_t sub_1D98898F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = sub_1D9907010();
  void v5[3] = sub_1D9907000();
  uint64_t v7 = (void *)swift_task_alloc();
  void v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1D98899AC;
  return sub_1D9888090(a5);
}

uint64_t sub_1D98899AC()
{
  swift_task_dealloc();
  uint64_t v1 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D988F0C4, v1, v0);
}

uint64_t CallManager.conversationManager(_:conversationUpdatedMessagesGroupUUID:)(uint64_t a1, void *a2)
{
  return sub_1D988E894(a2, "Received notification that conversation messagesGroupUUID was added: %@", (uint64_t)&unk_1F3392E78, (uint64_t)&unk_1EA8C89B0);
}

uint64_t sub_1D9889BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void v5[2] = sub_1D9907010();
  void v5[3] = sub_1D9907000();
  uint64_t v7 = (void *)swift_task_alloc();
  void v5[4] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1D9889C80;
  return sub_1D9888090(a5);
}

uint64_t sub_1D9889C80()
{
  swift_task_dealloc();
  uint64_t v1 = sub_1D9906FC0();
  return MEMORY[0x1F4188298](sub_1D9889DBC, v1, v0);
}

uint64_t sub_1D9889DBC()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_1D9889EB8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v25 = MEMORY[0x1E4FBC860];
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    sub_1D9907430();
    sub_1D968E084(0, &qword_1EA8C89C8);
    sub_1D988ED58(&qword_1EA8C89D0, &qword_1EA8C89C8);
    sub_1D99070A0();
    uint64_t v1 = v20;
    uint64_t v18 = v21;
    uint64_t v2 = v22;
    int64_t v3 = v23;
    unint64_t v4 = v24;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v18 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    int64_t v3 = 0;
  }
  uint64_t v17 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  while (v1 < 0)
  {
    if (!sub_1D99074A0()) {
      goto LABEL_36;
    }
    sub_1D968E084(0, &qword_1EA8C89C8);
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v12 = v19;
    swift_unknownObjectRelease();
    int64_t v11 = v3;
    uint64_t v9 = v4;
    if (!v19) {
      goto LABEL_36;
    }
LABEL_26:
    id v15 = objc_msgSend(v12, sel_handle, v17);

    int64_t v3 = v11;
    unint64_t v4 = v9;
    if (v15)
    {
      MEMORY[0x1E0167A30]();
      if (*(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_1D9906F60();
      }
      sub_1D9906F80();
      sub_1D9906F40();
      int64_t v3 = v11;
      unint64_t v4 = v9;
    }
  }
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    int64_t v11 = v3;
LABEL_25:
    id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
    if (!v12) {
      goto LABEL_36;
    }
    goto LABEL_26;
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v11 >= v8) {
      goto LABEL_36;
    }
    unint64_t v13 = *(void *)(v18 + 8 * v11);
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      int64_t v14 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13) {
        goto LABEL_23;
      }
      int64_t v14 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_36;
      }
      unint64_t v13 = *(void *)(v18 + 8 * v14);
      if (v13)
      {
LABEL_23:
        int64_t v11 = v14;
      }
      else
      {
        int64_t v11 = v3 + 5;
        if (v3 + 5 >= v8) {
          goto LABEL_36;
        }
        unint64_t v13 = *(void *)(v18 + 8 * v11);
        if (!v13)
        {
          int64_t v16 = v3 + 6;
          while (v8 != v16)
          {
            unint64_t v13 = *(void *)(v18 + 8 * v16++);
            if (v13)
            {
              int64_t v11 = v16 - 1;
              goto LABEL_24;
            }
          }
LABEL_36:
          sub_1D9885428();
          return;
        }
      }
    }
LABEL_24:
    uint64_t v9 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
    goto LABEL_25;
  }
  __break(1u);
}

uint64_t sub_1D988A1F8(id *a1, char a2, void *a3, uint64_t a4)
{
  id v6 = *a1;
  id v7 = objc_msgSend(*a1, sel_serviceName);
  if (v7)
  {
    int64_t v8 = v7;
    uint64_t v9 = sub_1D9906DA0();
    uint64_t v11 = v10;

    if (v9 == 0x6567617373654D69 && v11 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
    char v13 = sub_1D9907710();
    swift_bridgeObjectRelease();
    if (v13) {
      goto LABEL_13;
    }
  }
  if (a2)
  {
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_1D9906BA0();
    sub_1D9686810(v14, (uint64_t)qword_1EBE2C2C8);
    id v15 = a3;
    id v16 = v6;
    id v17 = v15;
    id v18 = v16;
    id v19 = sub_1D9906B80();
    os_log_type_t v20 = sub_1D9907130();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138412546;
      loga = v19;
      id v23 = v17;
      sub_1D9907370();
      *uint64_t v22 = v17;

      *(_WORD *)(v21 + 12) = 2112;
      unint64_t v62 = (unint64_t)v18;
      id v24 = v18;
      sub_1D9907370();
      v22[1] = v18;

      _os_log_impl(&dword_1D967A000, loga, v20, "Not mapping %@ to chat %@ because an iMessage variant of the chat exists", (uint8_t *)v21, 0x16u);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v22, -1, -1);
      MEMORY[0x1E016AD90](v21, -1, -1);
    }
    else
    {
    }
    return 0;
  }
LABEL_13:
  uint64_t result = (uint64_t)objc_msgSend(v6, sel_participants);
  if (!result)
  {
LABEL_45:
    __break(1u);
    return result;
  }
  id v26 = (void *)result;
  sub_1D968E084(0, (unint64_t *)&qword_1EA8C8A20);
  unint64_t v27 = sub_1D9906F20();

  unint64_t v62 = MEMORY[0x1E4FBC860];
  if (v27 >> 62)
  {
LABEL_43:
    swift_bridgeObjectRetain();
    uint64_t v28 = sub_1D9907660();
  }
  else
  {
    uint64_t v28 = *(void *)((v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v55 = a3;
  id v56 = v6;
  if (v28)
  {
    os_log_type_t type = self;
    a3 = (void *)(v27 & 0xC000000000000001);
    uint64_t v29 = 4;
    uint64_t v30 = v28;
    while (1)
    {
      if (a3) {
        id v31 = (id)MEMORY[0x1E01680D0](v29 - 4, v27);
      }
      else {
        id v31 = *(id *)(v27 + 8 * v29);
      }
      os_log_type_t v32 = v31;
      uint64_t v33 = v29 - 3;
      if (__OFADD__(v29 - 4, 1))
      {
        __break(1u);
        goto LABEL_43;
      }
      uint64_t result = (uint64_t)objc_msgSend(v31, sel_ID, v55, v56);
      if (!result) {
        break;
      }
      uint64_t v34 = (void *)result;
      sub_1D9906DA0();
      id v6 = v35;

      id v36 = (void *)sub_1D9906D70();
      swift_bridgeObjectRelease();
      id v37 = objc_msgSend(type, sel_normalizedHandleWithDestinationID_, v36);

      if (v37)
      {
        MEMORY[0x1E0167A30]();
        if (*(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v62 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_1D9906F60();
        }
        sub_1D9906F80();
        sub_1D9906F40();
      }
      ++v29;
      if (v33 == v30)
      {
        swift_bridgeObjectRelease();
        unint64_t v38 = v62;
        goto LABEL_30;
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  unint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_30:
  swift_bridgeObjectRelease();
  uint64_t v39 = sub_1D98A18B4(v38);
  swift_bridgeObjectRelease();
  uint64_t v40 = sub_1D988A9C4(a4, v39);
  if ((v40 & 0xC000000000000001) == 0)
  {
    if (*(void *)(v40 + 16)) {
      goto LABEL_32;
    }
LABEL_37:
    swift_bridgeObjectRelease();
    return 1;
  }
  if (!sub_1D9907470()) {
    goto LABEL_37;
  }
LABEL_32:
  if (qword_1EBE2AFC0 != -1) {
    swift_once();
  }
  uint64_t v41 = sub_1D9906BA0();
  sub_1D9686810(v41, (uint64_t)qword_1EBE2C2C8);
  id v42 = v55;
  id v43 = v56;
  id v44 = v42;
  id v45 = v43;
  swift_bridgeObjectRetain();
  id v46 = sub_1D9906B80();
  os_log_type_t v47 = sub_1D9907140();
  typea = v46;
  if (os_log_type_enabled(v46, v47))
  {
    uint64_t v48 = swift_slowAlloc();
    int v49 = (void *)swift_slowAlloc();
    os_log_t logb = (os_log_t)swift_slowAlloc();
    unint64_t v62 = (unint64_t)logb;
    *(_DWORD *)uint64_t v48 = 138412802;
    id v50 = v44;
    sub_1D9907370();
    *int v49 = v44;

    *(_WORD *)(v48 + 12) = 2112;
    id v51 = v45;
    sub_1D9907370();
    v49[1] = v45;

    *(_WORD *)(v48 + 22) = 2080;
    sub_1D968E084(0, (unint64_t *)&unk_1EA8C9670);
    sub_1D988ED58((unint64_t *)&qword_1EA8C8A30, (unint64_t *)&unk_1EA8C9670);
    swift_bridgeObjectRetain();
    uint64_t v52 = sub_1D9907080();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    sub_1D96863B0(v52, v54, (uint64_t *)&v62);
    sub_1D9907370();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1D967A000, typea, v47, "Not mapping conversation %@ to chat %@ because of remaining handles %s", (uint8_t *)v48, 0x20u);
    sub_1D96867CC(&qword_1EBE2B090);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](v49, -1, -1);
    swift_arrayDestroy();
    MEMORY[0x1E016AD90](logb, -1, -1);
    MEMORY[0x1E016AD90](v48, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 0;
}

uint64_t sub_1D988A9C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = sub_1D9907470();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_1D988BFD0(a1);
    return v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= sub_1D9907470() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1D9907470();
  uint64_t v7 = sub_1D98FA128(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_1D98AED18(a1, v2);
}

uint64_t sub_1D988AACC(uint64_t a1)
{
  void v2[5] = a1;
  v2[6] = v1;
  v2[7] = sub_1D9907010();
  v2[8] = sub_1D9907000();
  uint64_t v4 = sub_1D9906FC0();
  v2[9] = v4;
  v2[10] = v3;
  return MEMORY[0x1F4188298](sub_1D988AB68, v4, v3);
}

uint64_t sub_1D988AB68()
{
  id v1 = objc_msgSend(*(id *)(v0 + 40), sel_remoteMembers);
  sub_1D968E084(0, &qword_1EA8C89C8);
  sub_1D988ED58(&qword_1EA8C89D0, &qword_1EA8C89C8);
  uint64_t v2 = sub_1D9907070();

  if ((v2 & 0xC000000000000001) != 0) {
    uint64_t v3 = sub_1D9907470();
  }
  else {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  swift_bridgeObjectRelease();
  if (v3 != 1) {
    goto LABEL_10;
  }
  id v4 = objc_msgSend(*(id *)(v0 + 40), sel_remoteMembers);
  uint64_t v5 = sub_1D9907070();

  uint64_t v6 = (void *)sub_1D9889788(v5, &qword_1EA8C89C8);
  swift_bridgeObjectRelease();
  if (!v6) {
    goto LABEL_10;
  }
  id v7 = objc_msgSend(v6, sel_handle);

  id v8 = objc_msgSend(v7, sel_normalizedValue);
  if (v8)
  {
    uint64_t v9 = sub_1D9906DA0();
    uint64_t v11 = v10;

    *(void *)(v0 + 88) = v9;
    *(void *)(v0 + 96) = v11;
    uint64_t v12 = sub_1D9907000();
    *(void *)(v0 + 104) = v12;
    uint64_t v13 = swift_task_alloc();
    *(void *)(v0 + 112) = v13;
    *(void *)(v13 + 16) = v9;
    *(void *)(v13 + 24) = v11;
    uint64_t v14 = (void *)swift_task_alloc();
    *(void *)(v0 + 120) = v14;
    void *v14 = v0;
    v14[1] = sub_1D988AF84;
    uint64_t v15 = MEMORY[0x1E4FBCFD8];
    uint64_t v16 = MEMORY[0x1E4FBB390];
    return MEMORY[0x1F41880D8](v0 + 128, v12, v15, 0xD000000000000012, 0x80000001D992F930, sub_1D988EC1C, v13, v16);
  }
  else
  {
LABEL_10:
    swift_release();
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    id v17 = *(void **)(v0 + 40);
    uint64_t v18 = sub_1D9906BA0();
    sub_1D9686810(v18, (uint64_t)qword_1EBE2C2C8);
    id v19 = v17;
    os_log_type_t v20 = sub_1D9906B80();
    os_log_type_t v21 = sub_1D9907150();
    BOOL v22 = os_log_type_enabled(v20, v21);
    id v23 = *(void **)(v0 + 40);
    if (v22)
    {
      id v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)id v24 = 138412290;
      *(void *)(v0 + 16) = v23;
      id v26 = v23;
      sub_1D9907370();
      *uint64_t v25 = v23;

      _os_log_impl(&dword_1D967A000, v20, v21, "Invalid call to CallManager's registerChat function for conversation %@", v24, 0xCu);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v25, -1, -1);
      MEMORY[0x1E016AD90](v24, -1, -1);
    }
    else
    {
    }
    unint64_t v27 = *(uint64_t (**)(void))(v0 + 8);
    return v27(0);
  }
}

uint64_t sub_1D988AF84()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 72);
  return MEMORY[0x1F4188298](sub_1D988B0E4, v3, v2);
}

uint64_t sub_1D988B0E4()
{
  uint64_t v22 = v0;
  swift_release();
  if (*(unsigned char *)(v0 + 128) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void **)(*(void *)(v0 + 48) + OBJC_IVAR___IMDCallManager_Impl_serviceSession);
    uint64_t v3 = (void *)sub_1D9906D70();
    swift_bridgeObjectRelease();
    objc_msgSend(v2, sel_registerChat_style_, v3, 45);

    uint64_t v4 = sub_1D988CE0C(v1);
  }
  else
  {
    if (qword_1EBE2AFC0 != -1) {
      swift_once();
    }
    uint64_t v5 = *(void **)(v0 + 40);
    uint64_t v6 = sub_1D9906BA0();
    sub_1D9686810(v6, (uint64_t)qword_1EBE2C2C8);
    id v7 = v5;
    swift_bridgeObjectRetain();
    id v8 = sub_1D9906B80();
    os_log_type_t v9 = sub_1D9907140();
    BOOL v10 = os_log_type_enabled(v8, v9);
    unint64_t v11 = *(void *)(v0 + 96);
    if (v10)
    {
      uint64_t v19 = *(void *)(v0 + 88);
      uint64_t v12 = *(void **)(v0 + 40);
      uint64_t v13 = swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      uint64_t v21 = v20;
      *(_DWORD *)uint64_t v13 = 138412546;
      *(void *)(v0 + 24) = v12;
      id v14 = v12;
      sub_1D9907370();
      void *v18 = v12;

      *(_WORD *)(v13 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 32) = sub_1D96863B0(v19, v11, &v21);
      sub_1D9907370();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1D967A000, v8, v9, "Can't create chat for conversation %@ since the remoteMember %s isn't iMessage-able", (uint8_t *)v13, 0x16u);
      sub_1D96867CC(&qword_1EBE2B090);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v18, -1, -1);
      swift_arrayDestroy();
      MEMORY[0x1E016AD90](v20, -1, -1);
      MEMORY[0x1E016AD90](v13, -1, -1);
    }
    else
    {
      uint64_t v15 = *(void **)(v0 + 40);

      swift_bridgeObjectRelease_n();
    }

    uint64_t v4 = 0;
  }
  uint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v16(v4);
}

void sub_1D988B3DC(uint64_t a1)
{
  uint64_t v2 = sub_1D96867CC((uint64_t *)&unk_1EA8C89E0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  MEMORY[0x1F4188790](v2);
  id v14 = self;
  uint64_t v5 = (void *)sub_1D9906D70();
  id v6 = (id)IMChatCanonicalIDSIDsForAddress();

  id v7 = (id)*MEMORY[0x1E4F6AA78];
  id v8 = (void *)sub_1D9906D70();
  sub_1D968E084(0, (unint64_t *)&qword_1EBE2B050);
  os_log_type_t v9 = (void *)sub_1D99071F0();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v11 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v11 + v10, (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  void aBlock[4] = sub_1D988ECB8;
  void aBlock[5] = v11;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1D988B640;
  aBlock[3] = &unk_1F3392EB8;
  uint64_t v12 = _Block_copy(aBlock);
  swift_release();
  objc_msgSend(v14, sel_refreshIDStatusForDestination_service_listenerID_queue_completionBlock_, v6, v7, v8, v9, v12);
  _Block_release(v12);
}