void type metadata accessor for Result(uint64_t a1)
{
  sub_22CFF279C(a1, &qword_26853D4A8);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for HKClinicalSharingReason(uint64_t a1)
{
}

void type metadata accessor for HKSignedClinicalDataProcessingOptions(uint64_t a1)
{
}

void type metadata accessor for HKClinicalSharingOptions(uint64_t a1)
{
}

void type metadata accessor for HKClinicalSharingQueryDiagnosticOptions(uint64_t a1)
{
}

BOOL sub_22CFF0660(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_22CFF0678()
{
  return sub_22D2BD760();
}

uint64_t sub_22CFF06C0()
{
  return sub_22D2BD740();
}

uint64_t sub_22CFF06EC()
{
  return sub_22D2BD760();
}

uint64_t sub_22CFF0730()
{
  if (*v0) {
    return 1635017060;
  }
  else {
    return 0x54746E65746E6F63;
  }
}

uint64_t sub_22CFF076C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_22CFF18EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22CFF0794()
{
  return 0;
}

void sub_22CFF07A0(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_22CFF07AC(uint64_t a1)
{
  unint64_t v2 = sub_22CFF2888();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22CFF07E8(uint64_t a1)
{
  unint64_t v2 = sub_22CFF2888();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22CFF0824@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_22CFF19E8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_22CFF0854()
{
  return sub_22D2BD760();
}

uint64_t sub_22CFF089C()
{
  return sub_22D2BD740();
}

uint64_t sub_22CFF08C8()
{
  return sub_22D2BD760();
}

BOOL sub_22CFF090C(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_22CFF093C(void *result)
{
  *v1 |= *result;
  return result;
}

uint64_t sub_22CFF0950(uint64_t a1, uint64_t a2)
{
  return sub_22CFF1754(a1, a2, MEMORY[0x263F07B58]);
}

id sub_22CFF0974()
{
  return *v0;
}

uint64_t sub_22CFF097C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_22CFF0984(uint64_t a1, id *a2)
{
  uint64_t result = sub_22D2BCBB0();
  *a2 = 0;
  return result;
}

uint64_t sub_22CFF09FC(uint64_t a1, id *a2)
{
  char v3 = sub_22D2BCBC0();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_22CFF0A7C@<X0>(uint64_t *a1@<X8>)
{
  sub_22D2BCBD0();
  uint64_t v2 = sub_22D2BCBA0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_22CFF0AC0(uint64_t a1, uint64_t a2)
{
  return sub_22CFF1754(a1, a2, MEMORY[0x263F8D308]);
}

void sub_22CFF0AE4(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_22CFF0AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x270F9E7D8](a1, a4, a2, a5, a3);
}

void *sub_22CFF0B04@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_22CFF0B14(void *a1@<X8>)
{
  *a1 = *v1;
}

void *sub_22CFF0B20@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void *sub_22CFF0B2C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_22CFF0B40@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

void *sub_22CFF0B54@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_22CFF0B80@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_22CFF0BA4(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_22CFF0BB8@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_22CFF0BCC(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_22CFF0BE0()
{
  return *v0 == 0;
}

void *sub_22CFF0BF0(void *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_22CFF0C04()
{
  return sub_22D2BCBD0();
}

uint64_t sub_22CFF0C14(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  return MEMORY[0x270EEF7E8](a1, v2);
}

uint64_t sub_22CFF0C80(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  return MEMORY[0x270EEF7A0](a1, v2);
}

uint64_t sub_22CFF0CEC(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  id v5 = a1;
  return MEMORY[0x270EEF790](v5, a2, v4);
}

uint64_t sub_22CFF0D7C()
{
  id v1 = *v0;
  uint64_t v2 = sub_22D2BD1B0();

  return v2;
}

uint64_t sub_22CFF0DB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  return MEMORY[0x270EEF7D0](a1, a2, v4);
}

uint64_t sub_22CFF0E30()
{
  return sub_22D2BD760();
}

void *sub_22CFF0E94@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_22CFF0EA8(void *result)
{
  *v1 &= *result;
  return result;
}

BOOL sub_22CFF0EBC(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_22CFF0ED0(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

uint64_t sub_22CFF0EE4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_22CFF249C(a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t sub_22CFF0F24()
{
  return sub_22CFF0FB4(&qword_26853D4C8, type metadata accessor for HKClinicalSharingQueryDiagnosticOptions);
}

uint64_t sub_22CFF0F6C()
{
  return sub_22CFF0FB4(&qword_26853D4D0, type metadata accessor for HKClinicalSharingQueryDiagnosticOptions);
}

uint64_t sub_22CFF0FB4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CFF0FFC()
{
  return sub_22CFF0FB4(&qword_26853D4D8, type metadata accessor for HKClinicalSharingQueryDiagnosticOptions);
}

uint64_t sub_22CFF1044()
{
  return sub_22CFF0FB4(&qword_26853D4E0, type metadata accessor for HKClinicalSharingQueryDiagnosticOptions);
}

uint64_t sub_22CFF108C()
{
  return sub_22CFF0FB4((unint64_t *)&unk_26853D4E8, type metadata accessor for HKClinicalSharingOptions);
}

uint64_t sub_22CFF10D4()
{
  return sub_22CFF0FB4((unint64_t *)&unk_26AEC3080, type metadata accessor for HKClinicalSharingOptions);
}

uint64_t sub_22CFF111C()
{
  return sub_22CFF0FB4(&qword_26853D4F8, type metadata accessor for HKClinicalSharingOptions);
}

uint64_t sub_22CFF1164()
{
  return sub_22CFF0FB4(&qword_26853D500, type metadata accessor for HKClinicalSharingOptions);
}

uint64_t sub_22CFF11AC()
{
  return sub_22CFF0FB4(&qword_26853D508, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_22CFF11F4()
{
  return sub_22CFF0FB4(&qword_26853D510, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_22CFF123C()
{
  return sub_22CFF0FB4(&qword_26853D518, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_22CFF1284()
{
  return sub_22CFF0FB4(&qword_26853D520, type metadata accessor for HKSignedClinicalDataProcessingOptions);
}

uint64_t sub_22CFF12CC(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D680, type metadata accessor for HKClinicalGatewayFeatureName);
  uint64_t v3 = sub_22CFF0FB4(&qword_26853D688, type metadata accessor for HKClinicalGatewayFeatureName);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_22CFF1388(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D620, type metadata accessor for HKError);
  return MEMORY[0x270EF2670](a1, v2);
}

uint64_t sub_22CFF13F4(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D620, type metadata accessor for HKError);
  return MEMORY[0x270EF2668](a1, v2);
}

uint64_t sub_22CFF1464(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  return MEMORY[0x270EEF788](a1, v2);
}

uint64_t sub_22CFF14D0()
{
  sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
  return sub_22D2BB970();
}

BOOL sub_22CFF1554(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_22CFF1568(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4(&qword_26853D660, type metadata accessor for FileProtectionType);
  uint64_t v3 = sub_22CFF0FB4(&qword_26853D668, type metadata accessor for FileProtectionType);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_22CFF1624@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_22D2BCBA0();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_22CFF166C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22D2BCBD0();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_22CFF1698(uint64_t a1)
{
  uint64_t v2 = sub_22CFF0FB4((unint64_t *)&qword_26853D670, type metadata accessor for FileAttributeKey);
  uint64_t v3 = sub_22CFF0FB4(&qword_26853D678, type metadata accessor for FileAttributeKey);
  uint64_t v4 = MEMORY[0x263F8D320];
  return MEMORY[0x270F9F1A8](a1, v2, v3, v4);
}

uint64_t sub_22CFF1754(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_22D2BCBD0();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_22CFF1798()
{
  sub_22D2BCBD0();
  sub_22D2BCC70();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22CFF17EC()
{
  sub_22D2BCBD0();
  sub_22D2BD730();
  sub_22D2BCC70();
  uint64_t v0 = sub_22D2BD760();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_22CFF1860()
{
  uint64_t v0 = sub_22D2BCBD0();
  uint64_t v2 = v1;
  if (v0 == sub_22D2BCBD0() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_22D2BD660();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_22CFF18EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x54746E65746E6F63 && a2 == 0xEB00000000657079;
  if (v2 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_22CFF19E8(void *a1)
{
  sub_22CFF282C();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388]();
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22CFF2888();
  sub_22D2BD7A0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    char v12 = 0;
    uint64_t v8 = sub_22D2BD540();
    char v11 = 1;
    swift_bridgeObjectRetain();
    sub_22D2BD500();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

void type metadata accessor for AuthChallengeDisposition(uint64_t a1)
{
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
}

void type metadata accessor for HKVerifiableHealthRecordsParsingOptions(uint64_t a1)
{
}

void type metadata accessor for HKError(uint64_t a1)
{
}

void type metadata accessor for HDXPCGatedActivityResult(uint64_t a1)
{
}

void type metadata accessor for CFString(uint64_t a1)
{
}

void type metadata accessor for SecCertificate(uint64_t a1)
{
}

void type metadata accessor for CFError(uint64_t a1)
{
}

void type metadata accessor for HKMCDaySummarySymptoms(uint64_t a1)
{
}

void type metadata accessor for Lead(uint64_t a1)
{
}

void type metadata accessor for HKClinicalGatewayFeatureName(uint64_t a1)
{
}

uint64_t sub_22CFF1CE0()
{
  return sub_22CFF0FB4(&qword_26853D588, type metadata accessor for HKClinicalGatewayFeatureName);
}

uint64_t sub_22CFF1D28()
{
  return sub_22CFF0FB4(&qword_26853D590, type metadata accessor for HKClinicalGatewayFeatureName);
}

uint64_t sub_22CFF1D70()
{
  return sub_22CFF0FB4(&qword_26853D598, type metadata accessor for HKClinicalGatewayFeatureName);
}

uint64_t sub_22CFF1DB8()
{
  return sub_22CFF0FB4(&qword_26853D5A0, type metadata accessor for HKMCDaySummarySymptoms);
}

uint64_t sub_22CFF1E00()
{
  return sub_22CFF0FB4(&qword_26853D5A8, type metadata accessor for HKMCDaySummarySymptoms);
}

uint64_t sub_22CFF1E48()
{
  return sub_22CFF0FB4(&qword_26853D5B0, type metadata accessor for HKMCDaySummarySymptoms);
}

uint64_t sub_22CFF1E90()
{
  return sub_22CFF0FB4(&qword_26853D5B8, type metadata accessor for HKMCDaySummarySymptoms);
}

uint64_t sub_22CFF1ED8()
{
  return sub_22CFF0FB4(&qword_26853D5C0, type metadata accessor for HKError);
}

uint64_t sub_22CFF1F20()
{
  return sub_22CFF0FB4(&qword_26853D5C8, type metadata accessor for HKError);
}

uint64_t sub_22CFF1F68()
{
  return sub_22CFF0FB4(&qword_26853D5D0, type metadata accessor for HKVerifiableHealthRecordsParsingOptions);
}

uint64_t sub_22CFF1FB0()
{
  return sub_22CFF0FB4(&qword_26853D5D8, type metadata accessor for HKVerifiableHealthRecordsParsingOptions);
}

uint64_t sub_22CFF1FF8()
{
  return sub_22CFF0FB4(&qword_26853D5E0, type metadata accessor for HKVerifiableHealthRecordsParsingOptions);
}

uint64_t sub_22CFF2040()
{
  return sub_22CFF0FB4(&qword_26853D5E8, type metadata accessor for HKVerifiableHealthRecordsParsingOptions);
}

uint64_t sub_22CFF2088()
{
  return sub_22CFF0FB4(&qword_26853D5F0, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22CFF20D0()
{
  return sub_22CFF0FB4(&qword_26853D5F8, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22CFF2118()
{
  return sub_22CFF0FB4(&qword_26853D600, type metadata accessor for FileProtectionType);
}

uint64_t sub_22CFF2160()
{
  return sub_22CFF0FB4(&qword_26853D608, type metadata accessor for FileProtectionType);
}

uint64_t sub_22CFF21A8()
{
  return sub_22CFF0FB4(&qword_26853D610, type metadata accessor for FileProtectionType);
}

uint64_t sub_22CFF21F0()
{
  return sub_22CFF0FB4(&qword_26853D618, type metadata accessor for FileAttributeKey);
}

uint64_t sub_22CFF2238()
{
  return sub_22CFF0FB4(&qword_26853D620, type metadata accessor for HKError);
}

uint64_t sub_22CFF2280()
{
  return sub_22CFF0FB4(&qword_26853D628, type metadata accessor for HKError);
}

uint64_t sub_22CFF22C8()
{
  return sub_22CFF0FB4(&qword_26853D630, type metadata accessor for HKError);
}

uint64_t sub_22CFF2310()
{
  return sub_22CFF0FB4(&qword_26853D638, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_22CFF236C()
{
  return sub_22CFF0FB4(&qword_26853D640, type metadata accessor for Code);
}

unint64_t sub_22CFF23B8()
{
  unint64_t result = qword_26853D648;
  if (!qword_26853D648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D648);
  }
  return result;
}

uint64_t sub_22CFF240C()
{
  return sub_22CFF0FB4(&qword_26853D650, type metadata accessor for Code);
}

uint64_t sub_22CFF2454()
{
  return sub_22CFF0FB4(&qword_26853D658, type metadata accessor for HKError);
}

uint64_t sub_22CFF249C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t result = 0;
  uint64_t v4 = (uint64_t *)(a1 + 32);
  do
  {
    uint64_t v6 = *v4++;
    uint64_t v5 = v6;
    if ((v6 & ~result) == 0) {
      uint64_t v5 = 0;
    }
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

void type metadata accessor for HKCategoryValueSleepAnalysis(uint64_t a1)
{
}

void type metadata accessor for HKInspectableValueCollectionType(uint64_t a1)
{
}

void type metadata accessor for HKInspectableValueType(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for ClinicalSharingFHIRAttachment(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for ClinicalSharingFHIRAttachment()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for ClinicalSharingFHIRAttachment(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ClinicalSharingFHIRAttachment(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void *assignWithTake for ClinicalSharingFHIRAttachment(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRAttachment(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRAttachment(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRAttachment()
{
  return &type metadata for ClinicalSharingFHIRAttachment;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_22CFF272C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22CFF274C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for HKDayIndexRange(uint64_t a1)
{
}

void type metadata accessor for HKMedicalRecordCategoryType(uint64_t a1)
{
}

void sub_22CFF279C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t sub_22CFF27E4()
{
  return sub_22CFF0FB4(&qword_26853D6C0, type metadata accessor for HKCategoryValueSleepAnalysis);
}

void sub_22CFF282C()
{
  if (!qword_26853D6C8)
  {
    sub_22CFF2888();
    unint64_t v0 = sub_22D2BD570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853D6C8);
    }
  }
}

unint64_t sub_22CFF2888()
{
  unint64_t result = qword_26853D6D0;
  if (!qword_26853D6D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D6D0);
  }
  return result;
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRAttachment.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingFHIRAttachment.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22CFF2AD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_22CFF2B00(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_22CFF2B0C(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRAttachment.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRAttachment.CodingKeys;
}

unint64_t sub_22CFF2B2C()
{
  unint64_t result = qword_26853D6D8;
  if (!qword_26853D6D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D6D8);
  }
  return result;
}

unint64_t sub_22CFF2B84()
{
  unint64_t result = qword_26853D6E0;
  if (!qword_26853D6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D6E0);
  }
  return result;
}

unint64_t sub_22CFF2BDC()
{
  unint64_t result = qword_26853D6E8;
  if (!qword_26853D6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D6E8);
  }
  return result;
}

uint64_t *sub_22CFF2C88(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_22D2BB6F0();
    char v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = *(int *)(a3 + 24);
    v14 = *(void **)((char *)a2 + v13);
    *(uint64_t *)((char *)v7 + v13) = (uint64_t)v14;
    id v15 = v14;
  }
  return v7;
}

void sub_22CFF2D8C(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_22D2BB6F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  unsigned int v6 = *(void **)(a1 + *(int *)(a2 + 24));
}

void *sub_22CFF2E18(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = *(int *)(a3 + 24);
  char v12 = *(void **)((char *)a2 + v11);
  *(void *)((char *)a1 + v11) = v12;
  id v13 = v12;
  return a1;
}

void *sub_22CFF2ED0(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void **)((char *)a2 + v10);
  char v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  return a1;
}

void *sub_22CFF2F84(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_22CFF301C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);

  return a1;
}

uint64_t sub_22CFF30C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22CFF30D8);
}

uint64_t sub_22CFF30D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BB6F0();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_22CFF3188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22CFF319C);
}

void *sub_22CFF319C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BB6F0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery()
{
  uint64_t result = qword_26853D750;
  if (!qword_26853D750) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22CFF3290()
{
  uint64_t result = sub_22D2BB6F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22CFF3338()
{
  uint64_t v1 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  uint64_t v2 = v1 - 8;
  uint64_t v47 = *(void *)(v1 - 8);
  uint64_t v46 = *(void *)(v47 + 64);
  MEMORY[0x270FA5388](v1);
  uint64_t v45 = (uint64_t)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_22D2BCF90();
  uint64_t v5 = *(uint64_t (**)())(v4 - 8);
  uint64_t v43 = v4;
  v44 = v5;
  MEMORY[0x270FA5388](v4);
  v42 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF4A54(0, (unint64_t *)&qword_26853D760, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  uint64_t v51 = v7;
  uint64_t v53 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  v48 = (char *)&v41 - v8;
  sub_22CFF4A54(0, &qword_26853D788, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  uint64_t v50 = v9;
  uint64_t v52 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v49 = (char *)&v41 - v10;
  uint64_t v11 = sub_22D2BBC30();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(int *)(v2 + 32);
  v54 = (void *)v0;
  v16 = *(void **)(v0 + v15);
  v17 = self;
  id v18 = v16;
  sub_22D2BB6C0();
  v19 = (void *)sub_22D2BBBC0();
  v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v14, v11);
  sub_22D2BB690();
  v21 = (void *)sub_22D2BBBC0();
  v20(v14, v11);
  id v22 = objc_msgSend(v17, sel_predicateForSamplesWithStartDate_endDate_options_, v19, v21, 0);

  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A678]), sel_initWithSampleType_predicate_, v18, v22);
  v24 = v54;
  sub_22D229C70(0xD000000000000021, 0x800000022D2D5900, *(void *)((char *)v54 + v15), 5, 1);
  sub_22CFF4B00(*v24 + 16, (uint64_t)v56);
  __swift_project_boxed_opaque_existential_1(v56, v56[3]);
  sub_22CFF4B64();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_22D2BFBE0;
  *(void *)(v25 + 32) = v23;
  uint64_t v55 = v25;
  sub_22D2BCE20();
  id v41 = v23;
  v26 = v42;
  sub_22D2BCFA0();
  sub_22CFF4BC0(&qword_26853D790, MEMORY[0x263F44AA8]);
  uint64_t v27 = v43;
  uint64_t v28 = sub_22D2BC720();
  (*((void (**)(char *, uint64_t))v44 + 1))(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v55 = v28;
  v44 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery;
  uint64_t v29 = (uint64_t)v24;
  uint64_t v30 = v45;
  sub_22CFF4ED0(v29, v45, (uint64_t (*)(void))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  unint64_t v31 = (*(unsigned __int8 *)(v47 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v32 = swift_allocObject();
  sub_22CFF5068(v30, v32 + v31, (uint64_t (*)(void))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_22CFF4C0C;
  *(void *)(v33 + 24) = v32;
  sub_22CFF491C();
  type metadata accessor for PBTypedData(0);
  sub_22CFF4BC0(&qword_26853D780, (void (*)(uint64_t))sub_22CFF491C);
  v34 = v48;
  sub_22D2BC730();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v56);
  sub_22CFF4ED0((uint64_t)v54, v30, (uint64_t (*)(void))v44);
  uint64_t v35 = swift_allocObject();
  sub_22CFF5068(v30, v35 + v31, (uint64_t (*)(void))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  v36 = v49;
  uint64_t v37 = v51;
  sub_22D2BC3C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v37);
  sub_22CFF4E3C();
  uint64_t v38 = v50;
  uint64_t v39 = sub_22D2BC720();

  (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v38);
  return v39;
}

uint64_t sub_22CFF3A44@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery();
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF4F94(0, &qword_26853D7A0, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = type metadata accessor for PBDateRange(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v45 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for PBCategorySeries(0);
  uint64_t v15 = MEMORY[0x270FA5388](v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  v19 = (char *)&v42 - v18;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_22D2BD470();
    swift_bridgeObjectRelease();
    if (v36)
    {
LABEL_3:
      uint64_t v43 = v6;
      uint64_t v20 = sub_22D0A9500(a1);
      if (v20)
      {
        unint64_t v21 = v20;
        MEMORY[0x270FA5388](v20);
        uint64_t v41 = v3;
        uint64_t v22 = sub_22D29C70C((void (*)(id *))sub_22CFF4EB0, (uint64_t)(&v42 - 4), v21, (uint64_t)v48);
        swift_bridgeObjectRelease();
        sub_22D2BBFE0();
        uint64_t v23 = *(int *)(v14 + 20);
        if (qword_26853CFA8 != -1) {
          swift_once();
        }
        *(void *)&v19[v23] = qword_2685401B0;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBCategorySeries._StorageClass(0);
          swift_allocObject();
          uint64_t v24 = swift_retain();
          *(void *)&v19[v23] = sub_22D165828(v24);
          swift_release();
        }
        v44 = v17;
        uint64_t v25 = (uint64_t *)(*(void *)&v19[v23]
                        + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
        swift_beginAccess();
        *uint64_t v25 = v22;
        swift_bridgeObjectRelease();
        sub_22D2BBFE0();
        uint64_t v26 = type metadata accessor for PBTypedData(0);
        uint64_t v27 = *(int *)(v26 + 20);
        if (qword_26853CCD0 != -1) {
          swift_once();
        }
        *(void *)(a2 + v27) = qword_26853D990;
        uint64_t v28 = v3 + *(int *)(v43 + 20);
        uint64_t v29 = sub_22D2BB6F0();
        uint64_t v30 = *(void *)(v29 - 8);
        (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v11, v28, v29);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v11, 0, 1, v29);
        swift_retain();
        uint64_t v31 = (uint64_t)v45;
        sub_22D22BA04(5, 1, v11);
        sub_22CFF4FF8((uint64_t)v11, &qword_26853D7A0, MEMORY[0x263F062D0]);
        PBTypedData.dateRange.setter(v31);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBTypedData._StorageClass(0);
          swift_allocObject();
          uint64_t v32 = swift_retain();
          *(void *)(a2 + v27) = sub_22D0040E0(v32);
          swift_release();
        }
        uint64_t v33 = *(void *)(a2 + v27);
        swift_beginAccess();
        *(void *)(v33 + 16) = 125;
        *(unsigned char *)(v33 + 24) = 1;
        uint64_t v34 = (uint64_t)v44;
        sub_22CFF4ED0((uint64_t)v19, (uint64_t)v44, type metadata accessor for PBCategorySeries);
        PBTypedData.categorySeries.setter(v34);
        sub_22CFF4F38((uint64_t)v19);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a2, 0, 1, v26);
      }
      else
      {
        sub_22CFF4ED0(v3, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery);
        unint64_t v46 = 0;
        unint64_t v47 = 0xE000000000000000;
        sub_22D2BD310();
        swift_bridgeObjectRelease();
        unint64_t v46 = 0xD000000000000023;
        unint64_t v47 = 0x800000022D2D5980;
        id v39 = *(id *)&v8[*(int *)(v43 + 24)];
        id v40 = objc_msgSend(v39, sel_description);
        sub_22D2BCBD0();

        sub_22D2BCCB0();
        swift_bridgeObjectRelease();
        uint64_t result = sub_22D2BD460();
        __break(1u);
      }
      return result;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  uint64_t v37 = type metadata accessor for PBTypedData(0);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  return v38(a2, 1, 1, v37);
}

void sub_22CFF40E4(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22CFF4F94(0, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData, MEMORY[0x263F8D8F0]);
  uint64_t v6 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  uint64_t v61 = (uint64_t)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  v60 = (uint64_t *)((char *)&v60 - v8);
  sub_22CFF4F94(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v5);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v67 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v66 = (uint64_t)&v60 - v12;
  sub_22CFF4F94(0, &qword_26AEC0F48, MEMORY[0x263F07490], v5);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v60 - v17;
  uint64_t v19 = type metadata accessor for PBDateRange(0);
  uint64_t v63 = *(void *)(v19 - 8);
  uint64_t v64 = v19;
  MEMORY[0x270FA5388](v19);
  unint64_t v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *a1;
  sub_22D2BBFE0();
  uint64_t v23 = *(int *)(type metadata accessor for PBCategorySeries.Event(0) + 20);
  if (qword_26853CFD0 != -1) {
    swift_once();
  }
  *(void *)(a3 + v23) = qword_268540208;
  swift_retain();
  id v24 = objc_msgSend(v22, sel_startDate);
  sub_22D2BBC00();

  uint64_t v25 = sub_22D2BBC30();
  uint64_t v26 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56);
  v26(v18, 0, 1, v25);
  id v68 = v22;
  id v27 = objc_msgSend(v22, sel_endDate);
  sub_22D2BBC00();

  v26(v16, 0, 1, v25);
  sub_22D24D984(v18, v16);
  uint64_t v28 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_22CFF4FF8((uint64_t)v16, &qword_26AEC0F48, MEMORY[0x263F07490]);
  sub_22CFF4FF8((uint64_t)v18, &qword_26AEC0F48, v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    uint64_t v29 = swift_retain();
    *(void *)(a3 + v23) = sub_22D1674C4(v29);
    swift_release();
  }
  uint64_t v30 = *(void *)(a3 + v23);
  uint64_t v31 = (uint64_t)v21;
  uint64_t v32 = v66;
  sub_22CFF5068(v31, v66, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v32, 0, 1, v64);
  uint64_t v33 = v67;
  sub_22CFF50D0(v32, v67, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v34 = v30
      + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
  swift_beginAccess();
  swift_retain();
  sub_22CFF5150(v33, v34, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_endAccess();
  swift_release();
  id v35 = v68;
  id v36 = objc_msgSend(v68, sel_quantity);
  id v37 = objc_msgSend(self, sel_percentUnit);
  objc_msgSend(v36, sel_doubleValueForUnit_, v37);
  double v39 = v38;

  double v40 = v39 * 100.0;
  if ((~COERCE__INT64(v39 * 100.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  if (v40 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v40 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    return;
  }
  int v41 = (int)v40;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    uint64_t v42 = swift_retain();
    *(void *)(a3 + v23) = sub_22D1674C4(v42);
    swift_release();
  }
  uint64_t v43 = *(void *)(a3 + v23);
  swift_beginAccess();
  *(_DWORD *)(v43 + 16) = v41;
  id v44 = objc_msgSend(v35, sel_quantity);
  uint64_t v45 = v62;
  uint64_t v46 = sub_22D2BD170();
  if (v45)
  {
  }
  else
  {
    uint64_t v47 = v46;
    unint64_t v48 = v46 - 1;
    switch(v46)
    {
      case 1:
        unint64_t v49 = 0xE200000000000000;
        uint64_t v50 = 27503;
        break;
      case 3:
        unint64_t v49 = 0xE700000000000000;
        uint64_t v50 = 0x776F4C79726576;
        break;
      case 2:
        unint64_t v49 = 0xE300000000000000;
        uint64_t v50 = 7827308;
        break;
      default:
        unint64_t v49 = 0xE600000000000000;
        uint64_t v50 = 0x746553746F6ELL;
        break;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      uint64_t v51 = swift_retain();
      *(void *)(a3 + v23) = sub_22D1674C4(v51);
      swift_release();
    }
    uint64_t v52 = *(void *)(a3 + v23);
    swift_beginAccess();
    *(void *)(v52 + 24) = v50;
    *(void *)(v52 + 32) = v49;
    swift_bridgeObjectRelease();
    if (v48 >= 3) {
      uint64_t v53 = 0;
    }
    else {
      uint64_t v53 = v47;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      uint64_t v54 = swift_retain();
      *(void *)(a3 + v23) = sub_22D1674C4(v54);
      swift_release();
    }
    uint64_t v55 = *(void *)(a3 + v23);
    uint64_t v56 = (uint64_t)v60;
    uint64_t *v60 = v53;
    *(unsigned char *)(v56 + 8) = 1;
    uint64_t v57 = type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
    uint64_t v58 = v61;
    sub_22CFF50D0(v56, v61, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    uint64_t v59 = v55
        + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__additionalData;
    swift_beginAccess();
    swift_retain();
    sub_22CFF5150(v58, v59, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    swift_endAccess();
    swift_release();
  }
}

void sub_22CFF491C()
{
  if (!qword_26853D768)
  {
    sub_22CFF4F94(255, (unint64_t *)&qword_26853D770, (uint64_t (*)(uint64_t))sub_22CFF49BC, MEMORY[0x263F8D488]);
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853D768);
    }
  }
}

unint64_t sub_22CFF49BC()
{
  unint64_t result = qword_26853D778;
  if (!qword_26853D778)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26853D778);
  }
  return result;
}

unint64_t sub_22CFF49FC()
{
  unint64_t result = qword_26AEC1FB0;
  if (!qword_26AEC1FB0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEC1FB0);
  }
  return result;
}

void sub_22CFF4A54(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_22CFF491C();
    a3(255);
    sub_22CFF4BC0(&qword_26853D780, (void (*)(uint64_t))sub_22CFF491C);
    unint64_t v5 = sub_22D2BC3D0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_22CFF4B00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

void sub_22CFF4B64()
{
  if (!qword_2685426B0)
  {
    unint64_t v0 = sub_22D2BD640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_2685426B0);
    }
  }
}

uint64_t sub_22CFF4BC0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CFF4C0C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22CFF3A44(a1, a2);
}

uint64_t sub_22CFF4C80()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22CFF4CB8(void *a1)
{
  return sub_22D0E821C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t objectdestroyTm()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingWalkingSteadinessClassificationQuery() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = sub_22D2BB6F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22CFF4DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D229DD8(a1, 0, a2);
}

unint64_t sub_22CFF4E3C()
{
  unint64_t result = qword_26853D798;
  if (!qword_26853D798)
  {
    sub_22CFF4A54(255, &qword_26853D788, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D798);
  }
  return result;
}

void sub_22CFF4EB0(void **a1@<X0>, uint64_t a2@<X8>)
{
  sub_22CFF40E4(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_22CFF4ED0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22CFF4F38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PBCategorySeries(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_22CFF4F94(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22CFF4FF8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_22CFF4F94(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22CFF5068(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22CFF50D0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22CFF4F94(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22CFF5150(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22CFF4F94(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_22CFF51D0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v16 = *a1;
  char v7 = *((unsigned char *)a1 + 8);
  uint64_t v8 = sub_22D2BBFC0();
  unint64_t v10 = v9;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = 0;
  *(unsigned char *)(a4 + 24) = 1;
  *(void *)(a4 + 32) = 0;
  *(unsigned char *)(a4 + 40) = 1;
  *(void *)(a4 + 48) = 0;
  *(void *)(a4 + 56) = 0xE000000000000000;
  type metadata accessor for PBRevocationAuthorization();
  sub_22D2BBFE0();
  sub_22D2BB800();
  swift_allocObject();
  *(void *)&long long v15 = 0x2000000000;
  *((void *)&v15 + 1) = sub_22D2BB7D0() | 0x4000000000000000;
  int v11 = sub_22CFF532C((uint64_t *)&v15, 0x20uLL);
  if (v11)
  {
    uint64_t v12 = v11;
    sub_22CFF55DC();
    swift_allocError();
    *uint64_t v13 = v12;
    swift_willThrow();
    sub_22CFF5630(v15, *((unint64_t *)&v15 + 1));
    swift_bridgeObjectRelease();
    return sub_22CFF5688(a4);
  }
  else
  {
    uint64_t result = sub_22CFF5630(v8, v10);
    *(_OWORD *)a4 = v15;
    *(void *)(a4 + 48) = a2;
    *(void *)(a4 + 56) = a3;
    *(void *)(a4 + 16) = 1;
    *(unsigned char *)(a4 + 24) = 1;
    *(void *)(a4 + 32) = v16;
    *(unsigned char *)(a4 + 40) = v7;
  }
  return result;
}

uint64_t sub_22CFF532C(uint64_t *a1, size_t count)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v8 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_22D2BFC50;
      uint64_t v9 = v3 >> 32;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_11;
      }
      if (v9 < (int)v3) {
        goto LABEL_15;
      }
      if (sub_22D2BB7C0() && __OFSUB__((int)v3, sub_22D2BB7F0())) {
        goto LABEL_16;
      }
      sub_22D2BB800();
      swift_allocObject();
      uint64_t v11 = sub_22D2BB7A0();
      swift_release();
      uint64_t v8 = v11;
LABEL_11:
      if (v9 < (int)v3)
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
      }
      uint64_t result = sub_22CFF56E4((int)v3, v3 >> 32, v8, count);
      *a1 = v3;
      a1[1] = v8 | 0x4000000000000000;
      return result;
    case 2uLL:
      *(void *)&long long bytes = *a1;
      *((void *)&bytes + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_22D2BBAB0();
      uint64_t v10 = *((void *)&bytes + 1);
      uint64_t result = sub_22CFF56E4(*(void *)(bytes + 16), *(void *)(bytes + 24), *((uint64_t *)&bytes + 1), count);
      *a1 = bytes;
      a1[1] = v10 | 0x8000000000000000;
      return result;
    case 3uLL:
      *(void *)((char *)&bytes + 7) = 0;
      *(void *)&long long bytes = 0;
      return SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
    default:
      LOWORD(bytes) = *a1;
      BYTE2(bytes) = BYTE2(v3);
      BYTE3(bytes) = BYTE3(v3);
      BYTE4(bytes) = BYTE4(v3);
      BYTE5(bytes) = BYTE5(v3);
      BYTE6(bytes) = BYTE6(v3);
      BYTE7(bytes) = HIBYTE(v3);
      WORD4(bytes) = v2;
      BYTE10(bytes) = BYTE2(v2);
      BYTE11(bytes) = BYTE3(v2);
      BYTE12(bytes) = BYTE4(v2);
      BYTE13(bytes) = BYTE5(v2);
      BYTE14(bytes) = BYTE6(v2);
      uint64_t result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], count, &bytes);
      unint64_t v7 = DWORD2(bytes) | ((unint64_t)BYTE12(bytes) << 32) | ((unint64_t)BYTE13(bytes) << 40) | ((unint64_t)BYTE14(bytes) << 48);
      *a1 = bytes;
      a1[1] = v7;
      return result;
  }
}

unint64_t sub_22CFF55DC()
{
  unint64_t result = qword_26853D7B8;
  if (!qword_26853D7B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D7B8);
  }
  return result;
}

uint64_t sub_22CFF5630(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t sub_22CFF5688(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PBRevocationAuthorization();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22CFF56E4(uint64_t a1, uint64_t a2, uint64_t a3, size_t a4)
{
  uint64_t result = sub_22D2BB7C0();
  if (result)
  {
    uint64_t v8 = result;
    uint64_t result = sub_22D2BB7F0();
    uint64_t v9 = a1 - result;
    if (__OFSUB__(a1, result))
    {
      __break(1u);
    }
    else if (!__OFSUB__(a2, a1))
    {
      sub_22D2BB7E0();
      return SecRandomCopyBytes((SecRandomRef)*MEMORY[0x263F17510], a4, (void *)(v8 + v9));
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_22CFF5778()
{
  id v1 = objc_msgSend(v0, sel_sampleType);
  id v2 = objc_msgSend(v1, sel_code);

  if (v2 != (id)147 && v2 != (id)140) {
    return;
  }
  id v3 = objc_msgSend(v0, sel_metadata);
  if (!v3)
  {
    long long v14 = 0u;
    long long v15 = 0u;
    goto LABEL_14;
  }
  uint64_t v4 = v3;
  uint64_t v5 = sub_22D2BCB00();

  uint64_t v6 = sub_22D2BCBD0();
  if (!*(void *)(v5 + 16) || (unint64_t v8 = sub_22D04EB7C(v6, v7), (v9 & 1) == 0))
  {
    long long v14 = 0u;
    long long v15 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  sub_22CFF5A90(*(void *)(v5 + 56) + 32 * v8, (uint64_t)&v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!*((void *)&v15 + 1))
  {
LABEL_14:
    sub_22CFF5998((uint64_t)&v14);
    return;
  }
  sub_22CFF5A50();
  if (swift_dynamicCast())
  {
    id v10 = objc_msgSend(self, sel__countPerMinuteUnit);
    objc_msgSend(v13, sel_doubleValueForUnit_, v10);
    double v12 = v11;

    if ((~*(void *)&v12 & 0x7FF0000000000000) != 0)
    {
      if (v12 > -9.22337204e18)
      {
        if (v12 < 9.22337204e18)
        {
          *(void *)&long long v14 = (uint64_t)v12;
          sub_22D2BD630();

          return;
        }
        goto LABEL_18;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_18:
    __break(1u);
  }
}

uint64_t sub_22CFF5998(uint64_t a1)
{
  sub_22CFF59F4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_22CFF59F4()
{
  if (!qword_26AEC1FF0)
  {
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1FF0);
    }
  }
}

unint64_t sub_22CFF5A50()
{
  unint64_t result = qword_26853D7C0;
  if (!qword_26853D7C0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26853D7C0);
  }
  return result;
}

uint64_t sub_22CFF5A90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

id sub_22CFF5B1C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for DefaultDaemonXPCService();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for DefaultDaemonXPCService()
{
  return self;
}

id sub_22CFF5CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v9 = &v6[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_identifier];
  *(void *)char v9 = a1;
  *((void *)v9 + 1) = a2;
  id v10 = &v6[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_requiredEntitlementOverride];
  *(void *)id v10 = a3;
  *((void *)v10 + 1) = a4;
  id v11 = objc_allocWithZone(MEMORY[0x263F434E0]);
  double v12 = v6;
  swift_bridgeObjectRetain();
  uint64_t v13 = (void *)sub_22D2BCBA0();
  swift_bridgeObjectRelease();
  id v14 = objc_msgSend(v11, sel_initWithLabel_, v13);

  *(void *)&v12[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_listener] = v14;
  long long v15 = &v12[OBJC_IVAR____TtC19HealthRecordsDaemon23DefaultDaemonXPCService_serverGenerator];
  *(void *)long long v15 = a5;
  *((void *)v15 + 1) = a6;
  swift_retain();

  v17.receiver = v12;
  v17.super_class = (Class)type metadata accessor for DefaultDaemonXPCService();
  return objc_msgSendSuper2(&v17, sel_init);
}

uint64_t sub_22CFF5DC4(char a1, uint64_t a2)
{
  char v3 = a1 & 1;
  sub_22CFFA1E4(0, &qword_26853D928);
  sub_22CFFA24C(0, &qword_26853D930, sub_22CFF7DC0, (void (*)(void))sub_22CFF7DE0);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)v17 - v7;
  uint64_t v9 = sub_22D2BBAA0();
  MEMORY[0x270FA5388](v9 - 8);
  id v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D27F194(v3, (uint64_t)v11);
  uint64_t v19 = type metadata accessor for IssuerDirectoryWebRequest();
  uint64_t v20 = &off_26E05D0C8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v18);
  sub_22CFF6068((uint64_t)v11, (uint64_t)boxed_opaque_existential_1);
  sub_22CFF8C10(&v18, (uint64_t)v21);
  uint64_t v13 = __swift_project_boxed_opaque_existential_1(v21, v21[3]);
  v17[0] = sub_22CFF8C28((uint64_t)v13, 0, 1, 0, 1, 0, a2);
  sub_22CFF4B00((uint64_t)v21, (uint64_t)&v18);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  sub_22CFF8C10(&v18, v14 + 24);
  sub_22CFF7DC0(0);
  sub_22CFF7DE0();
  swift_retain();
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22CFF9A94(&qword_26853D938, &qword_26853D930);
  uint64_t v15 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  return v15;
}

uint64_t sub_22CFF6068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = 2;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = (int *)type metadata accessor for IssuerDirectoryWebRequest();
  *(_OWORD *)(a2 + v4[7]) = xmmword_22D2BFCE0;
  uint64_t v5 = a2 + v4[6];
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, a1, v6);
  sub_22D2BD310();
  swift_bridgeObjectRelease();
  sub_22D2BB9E0();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
  uint64_t v9 = (void *)(a2 + v4[8]);
  void *v9 = 0xD00000000000001ELL;
  v9[1] = 0x800000022D2D5A90;
  return result;
}

uint64_t sub_22CFF61B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_22D2BBAA0();
  uint64_t v60 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v51[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  double v12 = &v51[-v11];
  unint64_t v13 = *(void *)(a1 + 48);
  if (v13 >> 60 == 15)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_22D2BC390();
    __swift_project_value_buffer(v14, (uint64_t)qword_26AEC3C90);
    sub_22CFF4B00(a2, (uint64_t)v62);
    swift_retain_n();
    uint64_t v15 = sub_22D2BC380();
    os_log_type_t v16 = sub_22D2BD060();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v59 = (unsigned char *)swift_slowAlloc();
      uint64_t v65 = v59;
      *(_DWORD *)uint64_t v18 = 136315394;
      LODWORD(v58) = v17;
      uint64_t v61 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_22CFF8BD4();
      uint64_t v19 = sub_22D2BCC30();
      uint64_t v20 = v7;
      uint64_t v61 = (ValueMetadata *)sub_22D0A4D24(v19, v21, (uint64_t *)&v65);
      uint64_t v57 = v62;
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      os_log_t v56 = (os_log_t)(v18 + 14);
      uint64_t v22 = v63;
      uint64_t v23 = v64;
      __swift_project_boxed_opaque_existential_1(v62, v63);
      (*(void (**)(uint64_t, uint64_t))(v23 + 40))(v22, v23);
      sub_22D2BB9D0();
      id v24 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
      v24(v10, v20);
      sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
      uint64_t v25 = sub_22D2BD630();
      unint64_t v27 = v26;
      v24(v12, v20);
      uint64_t v61 = (ValueMetadata *)sub_22D0A4D24(v25, v27, (uint64_t *)&v65);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      _os_log_impl(&dword_22CFEE000, v15, (os_log_type_t)v58, "%s: No response data received from URL %s", (uint8_t *)v18, 0x16u);
      uint64_t v28 = v59;
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v28, -1, -1);
      MEMORY[0x230F7BDF0](v18, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
    }

    sub_22CFF9B10();
    swift_allocError();
    *uint64_t v47 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v59 = &v51[-v11];
    uint64_t v29 = *(void *)(a1 + 40);
    sub_22D2BB600();
    swift_allocObject();
    sub_22CFF9B64(v29, v13);
    sub_22D2BB5F0();
    sub_22CFFA330();
    sub_22D2BB5E0();
    if (v3)
    {
      uint64_t v58 = v29;
      swift_release();
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v30 = sub_22D2BC390();
      __swift_project_value_buffer(v30, (uint64_t)qword_26AEC3C90);
      sub_22CFF4B00(a2, (uint64_t)v62);
      swift_retain_n();
      uint64_t v31 = sub_22D2BC380();
      os_log_type_t v32 = sub_22D2BD060();
      int v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v57 = (void *)swift_slowAlloc();
        uint64_t v65 = v57;
        *(_DWORD *)uint64_t v34 = 136315394;
        uint64_t v54 = v7;
        uint64_t v61 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_22CFF8BD4();
        uint64_t v35 = sub_22D2BCC30();
        os_log_t v56 = v31;
        uint64_t v61 = (ValueMetadata *)sub_22D0A4D24(v35, v36, (uint64_t *)&v65);
        uint64_t v55 = v62;
        sub_22D2BD220();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2080;
        uint64_t v53 = v34 + 14;
        uint64_t v37 = v63;
        uint64_t v38 = v64;
        __swift_project_boxed_opaque_existential_1(v62, v63);
        (*(void (**)(uint64_t, uint64_t))(v38 + 40))(v37, v38);
        int v52 = v33;
        double v39 = v59;
        sub_22D2BB9D0();
        double v40 = *(void (**)(unsigned char *, uint64_t))(v60 + 8);
        int v41 = v10;
        uint64_t v42 = v54;
        v40(v41, v54);
        sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
        uint64_t v43 = sub_22D2BD630();
        unint64_t v45 = v44;
        v40(v39, v42);
        uint64_t v61 = (ValueMetadata *)sub_22D0A4D24(v43, v45, (uint64_t *)&v65);
        sub_22D2BD220();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
        uint64_t v31 = v56;
        _os_log_impl(&dword_22CFEE000, v56, (os_log_type_t)v52, "%s: CHR Catalog parsing failed for URL %s", (uint8_t *)v34, 0x16u);
        uint64_t v46 = v57;
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v46, -1, -1);
        MEMORY[0x230F7BDF0](v34, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      }

      uint64_t v49 = v58;
      sub_22CFF9B10();
      swift_allocError();
      *uint64_t v50 = 1;
      swift_willThrow();

      return sub_22CFF9C10(v49, v13);
    }
    else
    {
      swift_release();
      uint64_t result = sub_22CFF9C10(v29, v13);
      *a3 = v62[0];
    }
  }
  return result;
}

uint64_t sub_22CFF690C(uint64_t a1, uint64_t a2)
{
  sub_22CFFA1E4(0, &qword_26853D900);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v20 - v5;
  uint64_t v6 = type metadata accessor for CatalogEntry();
  MEMORY[0x270FA5388](v6);
  sub_22CFFA24C(0, &qword_26853D908, sub_22CFF7DC0, (void (*)(void))sub_22CFF7DE0);
  uint64_t v8 = v7;
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_22D2BBAA0();
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1 + *(int *)(v6 + 24), v11);
  uint64_t v26 = type metadata accessor for IssuerDirectoryWebRequest();
  unint64_t v27 = &off_26E05D0C8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  sub_22CFF6068((uint64_t)v13, (uint64_t)boxed_opaque_existential_1);
  sub_22CFF8C10(&v25, (uint64_t)v28);
  os_log_type_t v16 = __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  uint64_t v24 = sub_22CFF8C28((uint64_t)v16, 0, 1, 0, 1, 0, a2);
  sub_22CFF4B00((uint64_t)v28, (uint64_t)&v25);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  sub_22CFF8C10(&v25, v17 + 24);
  sub_22CFF7DC0(0);
  sub_22CFF7DE0();
  swift_retain();
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22CFF9A94(&qword_26853D918, &qword_26853D908);
  uint64_t v18 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v18;
}

uint64_t sub_22CFF6FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v7 = sub_22D2BBAA0();
  uint64_t v61 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v52[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = &v52[-v11];
  unint64_t v13 = *(void *)(a1 + 48);
  if (v13 >> 60 == 15)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v14 = sub_22D2BC390();
    __swift_project_value_buffer(v14, (uint64_t)qword_26AEC3C90);
    sub_22CFF4B00(a2, (uint64_t)v63);
    swift_retain_n();
    uint64_t v15 = sub_22D2BC380();
    os_log_type_t v16 = sub_22D2BD060();
    int v17 = v16;
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v60 = (unsigned char *)swift_slowAlloc();
      uint64_t v66 = v60;
      *(_DWORD *)uint64_t v18 = 136315394;
      LODWORD(v59) = v17;
      v62 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_22CFF8BD4();
      uint64_t v19 = sub_22D2BCC30();
      uint64_t v20 = v7;
      v62 = (ValueMetadata *)sub_22D0A4D24(v19, v21, (uint64_t *)&v66);
      uint64_t v58 = v63;
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v18 + 12) = 2080;
      os_log_t v57 = (os_log_t)(v18 + 14);
      uint64_t v22 = v64;
      uint64_t v23 = v65;
      __swift_project_boxed_opaque_existential_1(v63, v64);
      (*(void (**)(uint64_t, uint64_t))(v23 + 40))(v22, v23);
      sub_22D2BB9D0();
      uint64_t v24 = *(void (**)(unsigned char *, uint64_t))(v61 + 8);
      v24(v10, v20);
      sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
      uint64_t v25 = sub_22D2BD630();
      unint64_t v27 = v26;
      v24(v12, v20);
      v62 = (ValueMetadata *)sub_22D0A4D24(v25, v27, (uint64_t *)&v66);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      _os_log_impl(&dword_22CFEE000, v15, (os_log_type_t)v59, "%s: No response data received from URL %s", (uint8_t *)v18, 0x16u);
      uint64_t v28 = v60;
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v28, -1, -1);
      MEMORY[0x230F7BDF0](v18, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
    }

    sub_22CFF9B10();
    swift_allocError();
    *uint64_t v47 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v60 = &v52[-v11];
    uint64_t v29 = *(void *)(a1 + 40);
    sub_22D2BB600();
    swift_allocObject();
    sub_22CFF9B64(v29, v13);
    sub_22D2BB5F0();
    sub_22CFFA190();
    sub_22D2BB5E0();
    if (v3)
    {
      uint64_t v59 = v29;
      swift_release();
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v30 = sub_22D2BC390();
      __swift_project_value_buffer(v30, (uint64_t)qword_26AEC3C90);
      sub_22CFF4B00(a2, (uint64_t)v63);
      swift_retain_n();
      uint64_t v31 = sub_22D2BC380();
      os_log_type_t v32 = sub_22D2BD060();
      int v33 = v32;
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v34 = swift_slowAlloc();
        uint64_t v58 = (void *)swift_slowAlloc();
        uint64_t v66 = v58;
        *(_DWORD *)uint64_t v34 = 136315394;
        uint64_t v55 = v7;
        v62 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_22CFF8BD4();
        uint64_t v35 = sub_22D2BCC30();
        os_log_t v57 = v31;
        v62 = (ValueMetadata *)sub_22D0A4D24(v35, v36, (uint64_t *)&v66);
        os_log_t v56 = v63;
        sub_22D2BD220();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v34 + 12) = 2080;
        uint64_t v54 = v34 + 14;
        uint64_t v37 = v64;
        uint64_t v38 = v65;
        __swift_project_boxed_opaque_existential_1(v63, v64);
        (*(void (**)(uint64_t, uint64_t))(v38 + 40))(v37, v38);
        int v53 = v33;
        double v39 = v60;
        sub_22D2BB9D0();
        double v40 = *(void (**)(unsigned char *, uint64_t))(v61 + 8);
        int v41 = v10;
        uint64_t v42 = v55;
        v40(v41, v55);
        sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
        uint64_t v43 = sub_22D2BD630();
        unint64_t v45 = v44;
        v40(v39, v42);
        v62 = (ValueMetadata *)sub_22D0A4D24(v43, v45, (uint64_t *)&v66);
        sub_22D2BD220();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
        uint64_t v31 = v57;
        _os_log_impl(&dword_22CFEE000, v57, (os_log_type_t)v53, "%s: VHRDirectory parsing failed for URL %s", (uint8_t *)v34, 0x16u);
        uint64_t v46 = v58;
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v46, -1, -1);
        MEMORY[0x230F7BDF0](v34, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v63);
      }

      uint64_t v50 = v59;
      sub_22CFF9B10();
      swift_allocError();
      *uint64_t v51 = 2;
      swift_willThrow();

      return sub_22CFF9C10(v50, v13);
    }
    else
    {
      swift_release();
      uint64_t result = sub_22CFF9C10(v29, v13);
      uint64_t v49 = v63[1];
      *a3 = v63[0];
      a3[1] = v49;
    }
  }
  return result;
}

uint64_t sub_22CFF7710(uint64_t a1, uint64_t a2)
{
  sub_22CFFA1E4(0, &qword_26853D860);
  uint64_t v23 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v22 = (char *)&v20 - v5;
  uint64_t v6 = type metadata accessor for CatalogEntry();
  MEMORY[0x270FA5388](v6);
  sub_22CFFA24C(0, &qword_26853D868, sub_22CFF7DC0, (void (*)(void))sub_22CFF7DE0);
  uint64_t v8 = v7;
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = sub_22D2BBAA0();
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v13, a1 + *(int *)(v6 + 24), v11);
  uint64_t v26 = type metadata accessor for IssuerDirectoryWebRequest();
  unint64_t v27 = &off_26E05D0C8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v25);
  sub_22CFF6068((uint64_t)v13, (uint64_t)boxed_opaque_existential_1);
  sub_22CFF8C10(&v25, (uint64_t)v28);
  os_log_type_t v16 = __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  uint64_t v24 = sub_22CFF8C28((uint64_t)v16, 0, 1, 0, 1, 0, a2);
  sub_22CFF4B00((uint64_t)v28, (uint64_t)&v25);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  sub_22CFF8C10(&v25, v17 + 24);
  sub_22CFF7DC0(0);
  sub_22CFF7DE0();
  swift_retain();
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22CFF9A94(&qword_26853D8A0, &qword_26853D868);
  uint64_t v18 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v10, v8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  return v18;
}

void sub_22CFF7DC0(uint64_t a1)
{
}

uint64_t sub_22CFF7DE0()
{
  return sub_22CFF7E14(&qword_26853D880, sub_22CFF7DC0);
}

uint64_t sub_22CFF7E14(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for IssuerDirectoryWebRequest()
{
  uint64_t result = qword_26853D948;
  if (!qword_26853D948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(void *)(*(void *)(result + 24) - 8) + 80) & 0x20000) != 0) {
    JUMPOUT(0x230F7BDF0);
  }
  return result;
}

uint64_t sub_22CFF7F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v9 = sub_22D2BBAA0();
  uint64_t v71 = *(void *)(v9 - 8);
  uint64_t v72 = v9;
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  v69 = (char *)v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  v70 = (char *)v63 - v12;
  uint64_t v13 = sub_22D2BB5C0();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  os_log_type_t v16 = (char *)v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *(void *)(a1 + 48);
  if (v17 >> 60 == 15)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_22D2BC390();
    __swift_project_value_buffer(v18, (uint64_t)qword_26AEC3C90);
    sub_22CFF4B00(a3, (uint64_t)v74);
    swift_retain_n();
    uint64_t v19 = sub_22D2BC380();
    os_log_type_t v20 = sub_22D2BD060();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v68 = swift_slowAlloc();
      uint64_t v77 = v68;
      *(_DWORD *)uint64_t v22 = 136315394;
      LODWORD(v67) = v21;
      v73 = &type metadata for IssuerDirectoryWebRequestHandler;
      sub_22CFF8BD4();
      uint64_t v23 = sub_22D2BCC30();
      v73 = (ValueMetadata *)sub_22D0A4D24(v23, v24, &v77);
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      uint64_t v66 = v22 + 14;
      uint64_t v25 = v75;
      uint64_t v26 = v76;
      __swift_project_boxed_opaque_existential_1(v74, v75);
      unint64_t v27 = v69;
      (*(void (**)(uint64_t, uint64_t))(v26 + 40))(v25, v26);
      uint64_t v28 = v70;
      sub_22D2BB9D0();
      uint64_t v29 = *(void (**)(char *, uint64_t))(v71 + 8);
      uint64_t v30 = v27;
      uint64_t v31 = v72;
      v29(v30, v72);
      sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
      uint64_t v32 = sub_22D2BD630();
      unint64_t v34 = v33;
      v29(v28, v31);
      v73 = (ValueMetadata *)sub_22D0A4D24(v32, v34, &v77);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
      _os_log_impl(&dword_22CFEE000, v19, (os_log_type_t)v67, "%s: No response data received from URL %s", (uint8_t *)v22, 0x16u);
      uint64_t v35 = v68;
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v35, -1, -1);
      MEMORY[0x230F7BDF0](v22, -1, -1);
    }
    else
    {
      swift_release_n();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
    }

    sub_22CFF9B10();
    swift_allocError();
    *uint64_t v59 = 0;
    return swift_willThrow();
  }
  else
  {
    uint64_t v68 = a2;
    uint64_t v36 = *(void *)(a1 + 40);
    sub_22D2BB600();
    swift_allocObject();
    sub_22CFF9B64(v36, v17);
    sub_22D2BB5F0();
    (*(void (**)(char *, void, uint64_t))(v14 + 104))(v16, *MEMORY[0x263F060E0], v13);
    sub_22D2BB5D0();
    sub_22CFF9BBC();
    sub_22D2BB5E0();
    if (v4)
    {
      swift_release();
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v37 = sub_22D2BC390();
      __swift_project_value_buffer(v37, (uint64_t)qword_26AEC3C90);
      sub_22CFF4B00(a3, (uint64_t)v74);
      swift_retain();
      id v38 = v4;
      swift_retain();
      id v39 = v4;
      double v40 = sub_22D2BC380();
      os_log_type_t v41 = sub_22D2BD060();
      int v42 = v41;
      if (os_log_type_enabled(v40, v41))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        uint64_t v77 = v66;
        *(_DWORD *)uint64_t v43 = 136315650;
        os_log_t v65 = v40;
        v73 = &type metadata for IssuerDirectoryWebRequestHandler;
        sub_22CFF8BD4();
        uint64_t v67 = v36;
        uint64_t v44 = sub_22D2BCC30();
        int v64 = v42;
        v73 = (ValueMetadata *)sub_22D0A4D24(v44, v45, &v77);
        v63[1] = v74;
        sub_22D2BD220();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v43 + 12) = 2080;
        uint64_t v68 = v43 + 14;
        uint64_t v46 = v75;
        uint64_t v47 = v76;
        __swift_project_boxed_opaque_existential_1(v74, v75);
        unint64_t v48 = v69;
        (*(void (**)(uint64_t, uint64_t))(v47 + 40))(v46, v47);
        uint64_t v49 = v70;
        sub_22D2BB9D0();
        uint64_t v50 = *(void (**)(char *, uint64_t))(v71 + 8);
        uint64_t v51 = v48;
        uint64_t v52 = v72;
        v50(v51, v72);
        sub_22CFF7E14((unint64_t *)&qword_26853D898, MEMORY[0x263F06EA8]);
        uint64_t v53 = sub_22D2BD630();
        unint64_t v55 = v54;
        v50(v49, v52);
        uint64_t v36 = v67;
        v73 = (ValueMetadata *)sub_22D0A4D24(v53, v55, &v77);
        sub_22D2BD220();
        swift_bridgeObjectRelease();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
        *(_WORD *)(v43 + 22) = 2080;
        swift_getErrorValue();
        uint64_t v56 = sub_22D2BD6D0();
        v73 = (ValueMetadata *)sub_22D0A4D24(v56, v57, &v77);
        sub_22D2BD220();
        swift_bridgeObjectRelease();

        double v40 = v65;
        _os_log_impl(&dword_22CFEE000, v65, (os_log_type_t)v64, "%s: EUDCCPublicKeys parsing failed for URL %s - %s", (uint8_t *)v43, 0x20u);
        uint64_t v58 = v66;
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v58, -1, -1);
        MEMORY[0x230F7BDF0](v43, -1, -1);
      }
      else
      {
        swift_release_n();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v74);
      }
      sub_22CFF9B10();
      swift_allocError();
      unsigned char *v62 = 5;
      swift_willThrow();

      return sub_22CFF9C10(v36, v17);
    }
    else
    {
      swift_release();
      uint64_t result = sub_22CFF9C10(v36, v17);
      uint64_t v61 = v74[1];
      *a4 = v74[0];
      a4[1] = v61;
    }
  }
  return result;
}

void sub_22CFF87F4(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_22CFF8800()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_22CFF8808(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*sub_22CFF8834())()
{
  return nullsub_1;
}

uint64_t sub_22CFF8854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_22D2BBAA0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_22CFF88C4(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 28);
  uint64_t v3 = *(void *)v2;
  sub_22CFFA158(*(void *)v2, *(void *)(v2 + 8));
  return v3;
}

uint64_t sub_22CFF8900(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 32));
  swift_bridgeObjectRetain();
  return v2;
}

BOOL sub_22CFF8938(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

uint64_t sub_22CFF8990(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22CFFA1E4(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22CFF89E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  v17[0] = a2;
  v17[1] = a4;
  uint64_t v8 = sub_22D2BBAA0();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for IssuerDirectoryWebRequest();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v5 + *(int *)(v12 + 24), v8);
  sub_22D2BB560();
  sub_22D2BB530();
  sub_22D2BB520();
  sub_22CFFA158(*(void *)(v5 + *(int *)(v12 + 28)), *(void *)(v5 + *(int *)(v12 + 28) + 8));
  uint64_t result = sub_22D2BB590();
  uint64_t v14 = *(void *)(v5 + 8);
  if (v14)
  {
    uint64_t v15 = *(void *)(v14 + 16);
    if (v15)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = v14 + 56;
      do
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_22D2BB580();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v16 += 32;
        --v15;
      }
      while (v15);
      uint64_t result = swift_bridgeObjectRelease();
    }
  }
  if ((a3 & 1) == 0) {
    uint64_t result = sub_22D2BB550();
  }
  if ((a5 & 1) == 0) {
    return sub_22D2BB540();
  }
  return result;
}

unint64_t sub_22CFF8BD4()
{
  unint64_t result = qword_26853D890;
  if (!qword_26853D890)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26853D890);
  }
  return result;
}

uint64_t sub_22CFF8C10(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_22CFF8C28(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v88 = a7;
  uint64_t v101 = a6;
  int v82 = a5;
  uint64_t v80 = a4;
  int v81 = a3;
  v76[1] = a2;
  uint64_t v91 = sub_22D2BCF60();
  uint64_t v90 = *(void *)(v91 - 8);
  MEMORY[0x270FA5388](v91);
  v89 = (char *)v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFFA24C(0, (unint64_t *)&qword_26853D8B8, MEMORY[0x263F07C30], (void (*)(void))sub_22CFF9C24);
  uint64_t v94 = v9;
  uint64_t v93 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  v92 = (char *)v76 - v10;
  sub_22CFF9C58();
  uint64_t v85 = v11;
  uint64_t v83 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  v95 = (char *)v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF9DDC();
  uint64_t v86 = v13;
  uint64_t v87 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  v84 = (char *)v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = sub_22D2BBAA0();
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  v76[0] = (char *)v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF9E78();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v77 = (char *)v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF9ED0(0, &qword_26853D8E8, MEMORY[0x263EFDDE8]);
  v98 = *(char **)(v18 - 8);
  uint64_t v99 = v18;
  MEMORY[0x270FA5388](v18);
  os_log_t v97 = (os_log_t)((char *)v76 - v19);
  uint64_t v20 = type metadata accessor for WebRequestResponseError(0);
  uint64_t v21 = MEMORY[0x270FA5388](v20);
  v96 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v23 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x270FA5388](v23);
  uint64_t v24 = sub_22D2BB5B0();
  uint64_t v100 = *(void *)(v24 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  unint64_t v27 = (char *)v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)v76 - v28;
  v105[3] = type metadata accessor for IssuerDirectoryWebRequest();
  v105[4] = (uint64_t)&off_26E05D0C8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v105);
  sub_22CFF9F74(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for IssuerDirectoryWebRequest);
  uint64_t v102 = swift_allocBox();
  uint64_t v32 = v31;
  sub_22CFF89E0(v101, 0, 1, 0, 1);
  v98 = v27;
  uint64_t v99 = v24;
  uint64_t v101 = v20;
  uint64_t v33 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v32, v29, v24);
  if ((v81 & 1) == 0) {
    sub_22D2BB550();
  }
  unint64_t v34 = v95;
  uint64_t v35 = v94;
  uint64_t v36 = v93;
  uint64_t v37 = v92;
  if ((v82 & 1) == 0) {
    sub_22D2BB540();
  }
  uint64_t v38 = v100;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v39 = sub_22D2BC390();
  __swift_project_value_buffer(v39, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  double v40 = sub_22D2BC380();
  int v41 = sub_22D2BD050();
  if (os_log_type_enabled(v40, (os_log_type_t)v41))
  {
    LODWORD(v96) = v41;
    os_log_t v97 = v40;
    uint64_t v42 = swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v104 = v43;
    *(_DWORD *)uint64_t v42 = 136315394;
    swift_beginAccess();
    uint64_t v44 = sub_22D2BB510();
    unint64_t v46 = v45;
    swift_endAccess();
    if (v46) {
      uint64_t v47 = v44;
    }
    else {
      uint64_t v47 = 0xD000000000000010;
    }
    if (v46) {
      unint64_t v48 = v46;
    }
    else {
      unint64_t v48 = 0x800000022D2D5A70;
    }
    *(void *)&v103[0] = sub_22D0A4D24(v47, v48, &v104);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 12) = 2080;
    swift_beginAccess();
    uint64_t v49 = (uint64_t)v77;
    sub_22D2BB570();
    uint64_t v50 = v78;
    uint64_t v51 = v79;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v49, 1, v79))
    {
      sub_22CFFA0A0(v49, (uint64_t (*)(void))sub_22CFF9E78);
      swift_endAccess();
      uint64_t v52 = 0;
      uint64_t v53 = 0;
    }
    else
    {
      uint64_t v54 = v76[0];
      (*(void (**)(void, uint64_t, uint64_t))(v50 + 16))(v76[0], v49, v51);
      sub_22CFFA0A0(v49, (uint64_t (*)(void))sub_22CFF9E78);
      swift_endAccess();
      uint64_t v52 = sub_22D2BB9E0();
      uint64_t v53 = v55;
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v54, v51);
    }
    *(void *)&v103[0] = v52;
    *((void *)&v103[0] + 1) = v53;
    sub_22CFFA100();
    sub_22D2BD680();
    id v56 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v57 = sub_22D2BCC30();
    *(void *)&v103[0] = sub_22D0A4D24(v57, v58, &v104);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    os_log_t v59 = v97;
    _os_log_impl(&dword_22CFEE000, v97, (os_log_type_t)v96, "WebRequestPerformer: making request: %s %s", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v43, -1, -1);
    MEMORY[0x230F7BDF0](v42, -1, -1);

    unint64_t v34 = v95;
    uint64_t v35 = v94;
    uint64_t v36 = v93;
    uint64_t v37 = v92;
  }
  else
  {

    swift_release_n();
  }
  uint64_t v60 = v91;
  uint64_t v61 = v98;
  swift_beginAccess();
  v62 = *(void (**)(char *, uint64_t, uint64_t))(v38 + 16);
  uint64_t v63 = v61;
  uint64_t v64 = v33;
  os_log_t v65 = v61;
  uint64_t v66 = v38;
  uint64_t v67 = v99;
  v62(v63, v64, v99);
  uint64_t v68 = v89;
  sub_22D2BCF70();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
  sub_22CFF9C24();
  sub_22D2BC7F0();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v68, v60);
  sub_22CFF4B00((uint64_t)v105, (uint64_t)v103);
  uint64_t v69 = swift_allocObject();
  sub_22CFF8C10(v103, v69 + 16);
  sub_22CFF9D4C();
  sub_22CFF7E14(&qword_26853D878, (void (*)(uint64_t))type metadata accessor for WebRequestResponseError);
  sub_22D2BC840();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v35);
  sub_22CFF4B00((uint64_t)v105, (uint64_t)v103);
  uint64_t v70 = swift_allocObject();
  *(void *)(v70 + 16) = v102;
  sub_22CFF8C10(v103, v70 + 24);
  sub_22CFF7E14(&qword_26853D8E0, (void (*)(uint64_t))sub_22CFF9C58);
  swift_retain();
  uint64_t v71 = v84;
  uint64_t v72 = v85;
  sub_22D2BC780();
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v34, v72);
  sub_22CFF7E14(&qword_26853D8F8, (void (*)(uint64_t))sub_22CFF9DDC);
  uint64_t v73 = v86;
  uint64_t v74 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v71, v73);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v105);
  return v74;
}

uint64_t sub_22CFF9A74@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_22CFF7F60(a1, *(void *)(v2 + 16), v2 + 24, a2);
}

uint64_t sub_22CFF9A94(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22CFFA24C(255, a2, sub_22CFF7DC0, (void (*)(void))sub_22CFF7DE0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22CFF9B10()
{
  unint64_t result = qword_26853D8A8;
  if (!qword_26853D8A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D8A8);
  }
  return result;
}

uint64_t sub_22CFF9B64(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }
  return swift_retain();
}

unint64_t sub_22CFF9BBC()
{
  unint64_t result = qword_26853D8B0;
  if (!qword_26853D8B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D8B0);
  }
  return result;
}

uint64_t sub_22CFF9C10(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_22CFF5630(a1, a2);
  }
  return a1;
}

uint64_t sub_22CFF9C24()
{
  return sub_22CFF7E14(&qword_26853D8C0, MEMORY[0x263F07C30]);
}

void sub_22CFF9C58()
{
  if (!qword_26853D8C8)
  {
    sub_22CFFA24C(255, (unint64_t *)&qword_26853D8B8, MEMORY[0x263F07C30], (void (*)(void))sub_22CFF9C24);
    type metadata accessor for WebRequestResponseError(255);
    sub_22CFF9D4C();
    sub_22CFF7E14(&qword_26853D878, (void (*)(uint64_t))type metadata accessor for WebRequestResponseError);
    unint64_t v0 = sub_22D2BC530();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853D8C8);
    }
  }
}

unint64_t sub_22CFF9D4C()
{
  unint64_t result = qword_26853D8D0;
  if (!qword_26853D8D0)
  {
    sub_22CFFA24C(255, (unint64_t *)&qword_26853D8B8, MEMORY[0x263F07C30], (void (*)(void))sub_22CFF9C24);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D8D0);
  }
  return result;
}

void sub_22CFF9DDC()
{
  if (!qword_26853D8D8)
  {
    sub_22CFF9C58();
    sub_22CFF7E14(&qword_26853D8E0, (void (*)(uint64_t))sub_22CFF9C58);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853D8D8);
    }
  }
}

void sub_22CFF9E78()
{
  if (!qword_26AEC0F28)
  {
    sub_22D2BBAA0();
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC0F28);
    }
  }
}

void sub_22CFF9ED0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for WebRequestResponseError(255);
    uint64_t v7 = sub_22CFF7E14(&qword_26853D878, (void (*)(uint64_t))type metadata accessor for WebRequestResponseError);
    unint64_t v8 = a3(a1, &type metadata for WebRequestResponse, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22CFF9F74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_22CFF9FDC()
{
  unint64_t result = qword_26853D8F0;
  if (!qword_26853D8F0)
  {
    sub_22CFF9ED0(255, &qword_26853D8E8, MEMORY[0x263EFDDE8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D8F0);
  }
  return result;
}

uint64_t sub_22CFFA050()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22CFFA088@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D2B6060(a1, v2 + 16, a2);
}

id sub_22CFFA094@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_22D2B643C(a1, v2 + 24, a2);
}

uint64_t sub_22CFFA0A0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_22CFFA100()
{
  if (!qword_26AEC1E60)
  {
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1E60);
    }
  }
}

uint64_t sub_22CFFA158(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_22CFF9B64(a1, a2);
  }
  return a1;
}

uint64_t sub_22CFFA170@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_22CFF6FBC(a1, v2 + 24, a2);
}

unint64_t sub_22CFFA190()
{
  unint64_t result = qword_26853D920;
  if (!qword_26853D920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D920);
  }
  return result;
}

void sub_22CFFA1E4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_22CFF49FC();
    unint64_t v3 = sub_22D2BC670();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_22CFFA24C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = sub_22D2BC500();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t objectdestroyTm_0()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return MEMORY[0x270FA0238](v0, 64, 7);
}

uint64_t sub_22CFFA310@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_22CFF61B8(a1, v2 + 24, a2);
}

unint64_t sub_22CFFA330()
{
  unint64_t result = qword_26853D940;
  if (!qword_26853D940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D940);
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryWebRequestHandler()
{
  return &type metadata for IssuerDirectoryWebRequestHandler;
}

uint64_t *initializeBufferWithCopyOfBuffer for WellKnownJWKSRequest(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    a1[1] = a2[1];
    uint64_t v7 = a3[6];
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_22D2BBAA0();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = (char *)v4 + v12;
    uint64_t v14 = (char *)a2 + v12;
    unint64_t v15 = *((void *)v14 + 1);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    }
    else
    {
      uint64_t v17 = *(void *)v14;
      sub_22CFF9B64(*(void *)v14, *((void *)v14 + 1));
      *(void *)uint64_t v13 = v17;
      *((void *)v13 + 1) = v15;
    }
    uint64_t v18 = a3[8];
    uint64_t v19 = (uint64_t *)((char *)v4 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  unint64_t v6 = (uint64_t *)(a1 + *(int *)(a2 + 28));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_22CFF5630(*v6, v7);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_22D2BBAA0();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = v13[1];
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  }
  else
  {
    uint64_t v15 = *v13;
    sub_22CFF9B64(*v13, v13[1]);
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v14;
  }
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a2 + v10 + 8);
  if (*(void *)(a1 + v10 + 8) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_22CFF9B64(v15, v13);
      uint64_t v16 = *v11;
      unint64_t v17 = v11[1];
      *uint64_t v11 = v15;
      v11[1] = v13;
      sub_22CFF5630(v16, v17);
      goto LABEL_8;
    }
    sub_22CFFA7EC((uint64_t)v11);
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v14 = *v12;
  sub_22CFF9B64(v14, v13);
  *uint64_t v11 = v14;
  v11[1] = v13;
LABEL_8:
  uint64_t v18 = a3[8];
  uint64_t v19 = (void *)(a1 + v18);
  uint64_t v20 = (void *)(a2 + v18);
  void *v19 = *v20;
  v19[1] = v20[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22CFFA7EC(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  return a1;
}

uint64_t assignWithTake for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v11;
      *uint64_t v11 = *v12;
      v11[1] = v14;
      sub_22CFF5630(v15, v13);
      goto LABEL_6;
    }
    sub_22CFFA7EC((uint64_t)v11);
  }
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
LABEL_6:
  uint64_t v16 = a3[8];
  unint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  void *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22CFFA9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22CFFAA04);
}

uint64_t sub_22CFFAA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_22CFFAACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22CFFAAE0);
}

uint64_t sub_22CFFAAE0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBAA0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_22CFFABA4()
{
  uint64_t result = sub_22D2BBAA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for HTTPMethod(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for IssuerDirectoryWebRequestHandlerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22CFFADB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

unsigned char *sub_22CFFADDC(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryWebRequestHandlerError()
{
  return &type metadata for IssuerDirectoryWebRequestHandlerError;
}

unint64_t sub_22CFFADF8()
{
  unint64_t result = qword_26853D958;
  if (!qword_26853D958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853D958);
  }
  return result;
}

uint64_t PBNodeType.deletionCommitmentType.getter()
{
  if (*(unsigned char *)(v0 + 8) == 1)
  {
    uint64_t result = 808482864;
    switch(*(void *)v0)
    {
      case 1:
        uint64_t result = 825260080;
        break;
      case 2:
        uint64_t result = 842037296;
        break;
      case 3:
        uint64_t result = 858814512;
        break;
      default:
        return result;
    }
  }
  else
  {
    sub_22D2BD630();
    sub_22D2BCCB0();
    swift_bridgeObjectRelease();
    return 3176496;
  }
  return result;
}

uint64_t PBTypedData.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0032B0(type metadata accessor for PBTypedData, &qword_26853CCD0, &qword_26853D990, a1);
}

uint64_t type metadata accessor for PBTypedData(uint64_t a1)
{
  return sub_22D01234C(a1, qword_26AEC2460);
}

uint64_t PBTypedData.dateRange.setter(uint64_t a1)
{
  return sub_22D00151C(a1, type metadata accessor for PBTypedData, (void (*)(void))type metadata accessor for PBTypedData._StorageClass, sub_22D0040E0, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t PBTypedData.type.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = sub_22D0040E0(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 16) = v2;
  *(unsigned char *)(v6 + 24) = v3;
  return result;
}

uint64_t PBTypedData.categorySeries.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBCategorySeries);
}

uint64_t PBRawData.blob.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_22CFF9B64(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t PBRawData.blob.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_22CFF5630(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PBRawData.blob.modify())()
{
  return nullsub_1;
}

uint64_t PBRawData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0033A4(type metadata accessor for PBRawData, a1);
}

uint64_t PBRawData.unknownFields.setter(uint64_t a1)
{
  return sub_22D00343C(a1, type metadata accessor for PBRawData);
}

uint64_t (*PBRawData.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBRawData.init()@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_22D2BBFC0();
  a1[1] = v2;
  type metadata accessor for PBRawData(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20));
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 24);
  *(void *)a1 = *(void *)(v3 + 16);
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_22CFFB230(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D0040E0(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = v4;
  return result;
}

void (*PBTypedData.type.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  *((unsigned char *)v3 + 80) = v6;
  return sub_22CFFB374;
}

void sub_22CFFB374(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = sub_22D0040E0(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = v5;
  free((void *)v3);
}

uint64_t PBTypedData.dateRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00131C(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, a1);
}

void (*PBTypedData.dateRange.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  char v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBDateRange(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D012010(v10, (uint64_t)v5, &qword_26853D7B0, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    *((unsigned char *)v9 + 40) = 1;
    sub_22D2BBFE0();
    sub_22D018504((uint64_t)v5, &qword_26853D7B0, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D01849C((uint64_t)v5, (uint64_t)v9, type metadata accessor for PBDateRange);
  }
  return sub_22CFFB694;
}

void sub_22CFFB694(uint64_t a1, char a2)
{
}

BOOL PBTypedData.hasDateRange.getter()
{
  return sub_22D001A68(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

Swift::Void __swiftcall PBTypedData.clearDateRange()()
{
}

uint64_t PBTypedData.raw.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0021E8(type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, a1);
}

uint64_t sub_22CFFB778(uint64_t a1, uint64_t a2)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - v5;
  sub_22D012010(a1, (uint64_t)&v11 - v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(a2 + v7) = sub_22D0040E0(v8);
    swift_release();
  }
  uint64_t v9 = *(void *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v6, v9, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

uint64_t PBTypedData.raw.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = sub_22D0040E0(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0(a1, v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

void (*PBTypedData.raw.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[11] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  uint64_t v8 = *(void *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v6, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  return sub_22CFFBB04;
}

void sub_22CFFBB04(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_22D012010(*(void *)(v2 + 88), *(void *)(v2 + 80), &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v3 = *(int *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 72);
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v5 = swift_retain();
      *(void *)(v4 + v3) = sub_22D0040E0(v5);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    uint64_t v6 = *(void **)(v2 + 88);
    uint64_t v8 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_22D0120B0((uint64_t)v7, v8, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    swift_release();
    sub_22D018504((uint64_t)v6, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 72);
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D0040E0(v11);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    uint64_t v6 = *(void **)(v2 + 88);
    uint64_t v12 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_22D0120B0((uint64_t)v6, v12, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBTypedData.timeSeries.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload()) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBTimeSeries);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v8 = *(int *)(type metadata accessor for PBTimeSeries(0) + 20);
  if (qword_26853CF38 != -1) {
    swift_once();
  }
  *(void *)(a1 + v8) = qword_268540090;
  return swift_retain();
}

uint64_t PBTypedData.timeSeries.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBTimeSeries);
}

uint64_t sub_22CFFBF5C(uint64_t a1, uint64_t (*a2)(void))
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v12 = swift_retain();
    *(void *)(v2 + v11) = sub_22D0040E0(v12);
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v11);
  sub_22D01849C(a1, (uint64_t)v10, a2);
  uint64_t v14 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 0, 1, v14);
  sub_22D018574((uint64_t)v10, (uint64_t)v8, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v8, v15, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  return swift_release();
}

void (*PBTypedData.timeSeries.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBTimeSeries(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBTimeSeries);
      return sub_22CFFC3D4;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853CF38 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_268540090;
  swift_retain();
  return sub_22CFFC3D4;
}

void sub_22CFFC3D4(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.categorySeries.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBCategorySeries);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBCategorySeries(0) + 20);
  if (qword_26853CFA8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_2685401B0;
  return swift_retain();
}

void (*PBTypedData.categorySeries.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBCategorySeries(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBCategorySeries);
      return sub_22CFFC87C;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853CFA8 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_2685401B0;
  swift_retain();
  return sub_22CFFC87C;
}

void sub_22CFFC87C(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.workout.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBWorkout);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBWorkout(0) + 20);
  if (qword_26853CFE8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_268540240;
  return swift_retain();
}

uint64_t PBTypedData.workout.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBWorkout);
}

void (*PBTypedData.workout.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBWorkout(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBWorkout);
      return sub_22CFFCD40;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853CFE8 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_268540240;
  swift_retain();
  return sub_22CFFCD40;
}

void sub_22CFFCD40(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.characteristics.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 3) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBCharacteristics);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0xE000000000000000;
  type metadata accessor for PBCharacteristics(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.characteristics.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBCharacteristics);
}

void (*PBTypedData.characteristics.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBCharacteristics(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = 0;
    v7[1] = 0xE000000000000000;
    v7[2] = 0;
    v7[3] = 0xE000000000000000;
    v7[4] = 0;
    v7[5] = 0xE000000000000000;
    sub_22D2BBFE0();
    return sub_22CFFD1A4;
  }
  if (swift_getEnumCaseMultiPayload() != 3)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBCharacteristics);
  return sub_22CFFD1A4;
}

void sub_22CFFD1A4(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.record.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 4) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBAllClinicalRecords);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBAllClinicalRecords(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.record.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBAllClinicalRecords);
}

void (*PBTypedData.record.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBAllClinicalRecords(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22CFFD600;
  }
  if (swift_getEnumCaseMultiPayload() != 4)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBAllClinicalRecords);
  return sub_22CFFD600;
}

void sub_22CFFD600(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.ecgs.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 5) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBECGs);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBECGs(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.ecgs.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBECGs);
}

void (*PBTypedData.ecgs.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBECGs(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22CFFDA5C;
  }
  if (swift_getEnumCaseMultiPayload() != 5)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBECGs);
  return sub_22CFFDA5C;
}

void sub_22CFFDA5C(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.cycleTracking.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBCycleTracking);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBCycleTracking(0) + 20);
  if (qword_26853D158 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_268540560;
  return swift_retain();
}

uint64_t PBTypedData.cycleTracking.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBCycleTracking);
}

void (*PBTypedData.cycleTracking.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBCycleTracking(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 6)
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBCycleTracking);
      return sub_22CFFDF20;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853D158 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_268540560;
  swift_retain();
  return sub_22CFFDF20;
}

void sub_22CFFDF20(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.ecg.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 7) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBECGMeasurement);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xE000000000000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xE000000000000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xE000000000000000;
  uint64_t v9 = MEMORY[0x263F8EE78];
  *(void *)(a1 + 88) = MEMORY[0x263F8EE78];
  *(void *)(a1 + 96) = v9;
  *(_DWORD *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 1;
  type metadata accessor for PBECGMeasurement(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.ecg.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBECGMeasurement);
}

void (*PBTypedData.ecg.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for PBECGMeasurement(0) - 8) + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  PBTypedData.ecg.getter((uint64_t)v4);
  return sub_22CFFE208;
}

void sub_22CFFE208(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.activitySummaries.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBActivitySummarySeries);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBActivitySummarySeries(0) + 20);
  if (qword_26853D1E0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_2685406B8;
  return swift_retain();
}

uint64_t PBTypedData.activitySummaries.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBActivitySummarySeries);
}

void (*PBTypedData.activitySummaries.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBActivitySummarySeries(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 8)
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBActivitySummarySeries);
      return sub_22CFFE6CC;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853D1E0 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_2685406B8;
  swift_retain();
  return sub_22CFFE6CC;
}

void sub_22CFFE6CC(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.patientMeta.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBPatientMeta);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBPatientMeta(0) + 20);
  if (qword_26853D200 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_268540700;
  return swift_retain();
}

uint64_t PBTypedData.patientMeta.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBPatientMeta);
}

void (*PBTypedData.patientMeta.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBPatientMeta(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v9, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v10 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 9)
    {
      sub_22D01849C((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBPatientMeta);
      return sub_22CFFEB90;
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853D200 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_268540700;
  swift_retain();
  return sub_22CFFEB90;
}

void sub_22CFFEB90(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.sleepSummary.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 10) {
      return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBSleepSummary);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *(void *)a1 = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 8) = 0;
  type metadata accessor for PBSleepSummary(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.sleepSummary.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBSleepSummary);
}

void (*PBTypedData.sleepSummary.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBSleepSummary(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *(void *)uint64_t v7 = MEMORY[0x263F8EE78];
    v7[2] = 0;
    sub_22D2BBFE0();
    return sub_22CFFEFF4;
  }
  if (swift_getEnumCaseMultiPayload() != 10)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBSleepSummary);
  return sub_22CFFEFF4;
}

void sub_22CFFEFF4(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.sleepSeries.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 11) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBSleepSeries);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBSleepSeries(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.sleepSeries.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBSleepSeries);
}

void (*PBTypedData.sleepSeries.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBSleepSeries(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22CFFF450;
  }
  if (swift_getEnumCaseMultiPayload() != 11)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBSleepSeries);
  return sub_22CFFF450;
}

void sub_22CFFF450(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.histogramSeries.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 12) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBHistogramSeries);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  a1[1] = 0;
  a1[2] = 0xE000000000000000;
  type metadata accessor for PBHistogramSeries(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.histogramSeries.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBHistogramSeries);
}

void (*PBTypedData.histogramSeries.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBHistogramSeries(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    v7[1] = 0;
    v7[2] = 0xE000000000000000;
    sub_22D2BBFE0();
    return sub_22CFFF8BC;
  }
  if (swift_getEnumCaseMultiPayload() != 12)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBHistogramSeries);
  return sub_22CFFF8BC;
}

void sub_22CFFF8BC(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.medicationTrackings.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 13) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackings);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBMedicationTrackings(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.medicationTrackings.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBMedicationTrackings);
}

void (*PBTypedData.medicationTrackings.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBMedicationTrackings(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22CFFFD18;
  }
  if (swift_getEnumCaseMultiPayload() != 13)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackings);
  return sub_22CFFFD18;
}

void sub_22CFFFD18(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.medicationTrackingDoseEvents.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 14) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackingDoseEvents);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBMedicationTrackingDoseEvents(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.medicationTrackingDoseEvents.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBMedicationTrackingDoseEvents);
}

void (*PBTypedData.medicationTrackingDoseEvents.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22D000174;
  }
  if (swift_getEnumCaseMultiPayload() != 14)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvents);
  return sub_22D000174;
}

void sub_22D000174(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.medicationTrackingSchedules.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 15) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBMedicationTrackingSchedules);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBMedicationTrackingSchedules(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.medicationTrackingSchedules.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBMedicationTrackingSchedules);
}

void (*PBTypedData.medicationTrackingSchedules.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBMedicationTrackingSchedules(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22D0005D0;
  }
  if (swift_getEnumCaseMultiPayload() != 15)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBMedicationTrackingSchedules);
  return sub_22D0005D0;
}

void sub_22D0005D0(uint64_t a1, char a2)
{
}

uint64_t PBTypedData.activeMedications.getter@<X0>(void *a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v7 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 16) {
      return sub_22D01849C((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBActiveMedications);
    }
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
  }
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBActiveMedications(0);
  return sub_22D2BBFE0();
}

uint64_t PBTypedData.activeMedications.setter(uint64_t a1)
{
  return sub_22CFFBF5C(a1, type metadata accessor for PBActiveMedications);
}

void (*PBTypedData.activeMedications.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBActiveMedications(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBTypedData(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v9 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D018504((uint64_t)v5, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_6:
    *uint64_t v7 = MEMORY[0x263F8EE78];
    sub_22D2BBFE0();
    return sub_22D000A2C;
  }
  if (swift_getEnumCaseMultiPayload() != 16)
  {
    sub_22D010254((uint64_t)v5, type metadata accessor for PBTypedData.OneOf_Raw);
    goto LABEL_6;
  }
  sub_22D01849C((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBActiveMedications);
  return sub_22D000A2C;
}

void sub_22D000A2C(uint64_t a1, char a2)
{
}

uint64_t (*PBTypedData.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBReference.dlid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D000AF8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D000B54(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    size_t v6 = (void *)swift_retain();
    *(void *)(a2 + v5) = sub_22D00D3F4(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBReference.dlid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    size_t v6 = (void *)swift_retain();
    *(void *)(v2 + v5) = sub_22D00D3F4(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBReference.dlid.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D000D58;
}

void sub_22D000D58(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = (void *)swift_retain();
      *(void *)(v6 + v5) = sub_22D00D3F4(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 16) = v3;
    *(void *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = (void *)swift_retain();
      *(void *)(v10 + v9) = sub_22D00D3F4(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 16) = v3;
    *(void *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBReference.aesGcmKey.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  sub_22CFF9B64(v2, *(void *)(v1 + 40));
  return v2;
}

uint64_t sub_22D000F28@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t v5 = *(void *)(v3 + 40);
  *a2 = v4;
  a2[1] = v5;
  return sub_22CFF9B64(v4, v5);
}

uint64_t sub_22D000F84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  sub_22CFF9B64(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = (void *)swift_retain();
    *(void *)(a2 + v5) = sub_22D00D3F4(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v7 + 40);
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  return sub_22CFF5630(v8, v9);
}

uint64_t PBReference.aesGcmKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = (void *)swift_retain();
    *(void *)(v2 + v5) = sub_22D00D3F4(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v7 + 40);
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  return sub_22CFF5630(v8, v9);
}

void (*PBReference.aesGcmKey.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = *(void *)(v5 + 40);
  v3[9] = v6;
  v3[10] = v7;
  sub_22CFF9B64(v6, v7);
  return sub_22D001188;
}

void sub_22D001188(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    sub_22CFF9B64(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      unint64_t v7 = (void *)swift_retain();
      *(void *)(v6 + v5) = sub_22D00D3F4(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 32);
    unint64_t v10 = *(void *)(v8 + 40);
    *(void *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = v4;
    sub_22CFF5630(v9, v10);
    uint64_t v11 = *(void *)(v2 + 72);
    unint64_t v12 = *(void *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = *(int *)(v2 + 96);
      uint64_t v14 = *(void *)(v2 + 88);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      uint64_t v15 = (void *)swift_retain();
      *(void *)(v14 + v13) = sub_22D00D3F4(v15);
      swift_release();
    }
    uint64_t v16 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v11 = *(void *)(v16 + 32);
    unint64_t v12 = *(void *)(v16 + 40);
    *(void *)(v16 + 32) = v3;
    *(void *)(v16 + 40) = v4;
  }
  sub_22CFF5630(v11, v12);
  free((void *)v2);
}

uint64_t PBReference.dateRange.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00131C(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, a1);
}

uint64_t sub_22D00131C@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(v3 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_22D012010(v10, (uint64_t)v9, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v11 = type metadata accessor for PBDateRange(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v9, 1, v11) != 1) {
    return sub_22D01849C((uint64_t)v9, a3, type metadata accessor for PBDateRange);
  }
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0xE000000000000000;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0xE000000000000000;
  *(void *)(a3 + 32) = 0;
  *(unsigned char *)(a3 + 40) = 1;
  sub_22D2BBFE0();
  return sub_22D018504((uint64_t)v9, &qword_26853D7B0, type metadata accessor for PBDateRange);
}

uint64_t PBReference.dateRange.setter(uint64_t a1)
{
  return sub_22D00151C(a1, type metadata accessor for PBReference, (void (*)(void))type metadata accessor for PBReference._StorageClass, (uint64_t (*)(uint64_t))sub_22D00D3F4, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

uint64_t sub_22D00151C(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void), uint64_t (*a4)(uint64_t), void *a5)
{
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = *(int *)(a2(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a3(0);
    swift_allocObject();
    uint64_t v18 = swift_retain();
    *(void *)(v5 + v17) = a4(v18);
    swift_release();
  }
  uint64_t v19 = *(void *)(v5 + v17);
  sub_22D01849C(a1, (uint64_t)v16, type metadata accessor for PBDateRange);
  uint64_t v20 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v16, 0, 1, v20);
  sub_22D018574((uint64_t)v16, (uint64_t)v14, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v21 = v19 + *a5;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v14, v21, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.dateRange.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBDateRange(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D012010(v10, (uint64_t)v5, &qword_26853D7B0, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    v9[4] = 0;
    *((unsigned char *)v9 + 40) = 1;
    sub_22D2BBFE0();
    sub_22D018504((uint64_t)v5, &qword_26853D7B0, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D01849C((uint64_t)v5, (uint64_t)v9, type metadata accessor for PBDateRange);
  }
  return sub_22D001958;
}

void sub_22D001958(uint64_t a1, char a2)
{
}

void sub_22D001998(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  size_t v8 = *(void **)(*(void *)a1 + 48);
  uint64_t v9 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_22D018654(*(void *)(*(void *)a1 + 48), (uint64_t)v7, a4);
    a3(v7);
    sub_22D010254((uint64_t)v8, a5);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v8);
  free(v7);
  free(v9);
  free(v6);
}

BOOL PBReference.hasDateRange.getter()
{
  return sub_22D001A68(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange);
}

BOOL sub_22D001A68(uint64_t (*a1)(void), void *a2)
{
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = *(void *)(v2 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v7, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v9 = type metadata accessor for PBDateRange(0);
  BOOL v10 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v7, 1, v9) != 1;
  sub_22D018504((uint64_t)v7, &qword_26853D7B0, type metadata accessor for PBDateRange);
  return v10;
}

Swift::Void __swiftcall PBReference.clearDateRange()()
{
}

uint64_t sub_22D001C00(uint64_t (*a1)(void), void (*a2)(void), uint64_t (*a3)(uint64_t), void *a4)
{
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(int *)(a1(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a2(0);
    swift_allocObject();
    uint64_t v13 = swift_retain();
    *(void *)(v4 + v12) = a3(v13);
    swift_release();
  }
  uint64_t v14 = *(void *)(v4 + v12);
  uint64_t v15 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v11, 1, 1, v15);
  uint64_t v16 = v14 + *a4;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v11, v16, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_endAccess();
  return swift_release();
}

uint64_t PBReference.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a1 = *(void *)v3;
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t sub_22D001E28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 8);
  *(void *)a2 = *(void *)v3;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_22D001E94(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = (void *)swift_retain();
    *(void *)(a2 + v5) = sub_22D00D3F4(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v7 = v3;
  *(unsigned char *)(v7 + 8) = v4;
  return result;
}

uint64_t PBReference.type.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = (void *)swift_retain();
    *(void *)(v1 + v4) = sub_22D00D3F4(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  uint64_t result = swift_beginAccess();
  *(void *)uint64_t v6 = v2;
  *(unsigned char *)(v6 + 8) = v3;
  return result;
}

void (*PBReference.type.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 8);
  v3[9] = *(void *)v5;
  *((unsigned char *)v3 + 80) = v6;
  return sub_22D0020B0;
}

void sub_22D0020B0(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = (void *)swift_retain();
    *(void *)(v8 + v7) = sub_22D00D3F4(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  *(void *)uint64_t v10 = v4;
  *(unsigned char *)(v10 + 8) = v5;
  free((void *)v3);
}

uint64_t PBReference.metadata.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0021E8(type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, a1);
}

uint64_t sub_22D0021E8@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, unint64_t *a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9 = *(void *)(v5 + *(int *)(a1(0) + 20)) + *a2;
  swift_beginAccess();
  return sub_22D012010(v9, a5, a3, a4);
}

uint64_t sub_22D002274@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X3>, void *a3@<X4>, unint64_t *a4@<X5>, uint64_t (*a5)(uint64_t)@<X6>, uint64_t a6@<X8>)
{
  uint64_t v9 = *(void *)(a1 + *(int *)(a2(0) + 20)) + *a3;
  swift_beginAccess();
  return sub_22D012010(v9, a6, a4, a5);
}

uint64_t sub_22D002300(uint64_t a1, uint64_t a2)
{
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  char v6 = (char *)&v11 - v5;
  sub_22D012010(a1, (uint64_t)&v11 - v5, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v7 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = (void *)swift_retain();
    *(void *)(a2 + v7) = sub_22D00D3F4(v8);
    swift_release();
  }
  uint64_t v9 = *(void *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v6, v9, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

uint64_t PBReference.metadata.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = (void *)swift_retain();
    *(void *)(v1 + v3) = sub_22D00D3F4(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0(a1, v5, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.metadata.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  char v6 = malloc(v5);
  v3[11] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for PBReference(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  uint64_t v8 = *(void *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  sub_22D012010(v8, (uint64_t)v6, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  return sub_22D00268C;
}

void sub_22D00268C(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_22D012010(*(void *)(v2 + 88), *(void *)(v2 + 80), &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v3 = *(int *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 72);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      size_t v5 = (void *)swift_retain();
      *(void *)(v4 + v3) = sub_22D00D3F4(v5);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    char v6 = *(void **)(v2 + 88);
    uint64_t v8 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
    swift_beginAccess();
    swift_retain();
    sub_22D0120B0((uint64_t)v7, v8, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
    swift_endAccess();
    swift_release();
    sub_22D018504((uint64_t)v6, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 72);
      type metadata accessor for PBReference._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = (void *)swift_retain();
      *(void *)(v10 + v9) = sub_22D00D3F4(v11);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    char v6 = *(void **)(v2 + 88);
    uint64_t v12 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
    swift_beginAccess();
    swift_retain();
    sub_22D0120B0((uint64_t)v6, v12, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBReference.ecgMeta.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  size_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBReference(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  sub_22D012010(v6, (uint64_t)v5, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v7 = type metadata accessor for PBReference.OneOf_Metadata(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_22D01849C((uint64_t)v5, a1, type metadata accessor for PBECGMeta);
  }
  sub_22D018504((uint64_t)v5, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0xE000000000000000;
  *(_DWORD *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0xE000000000000000;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0xE000000000000000;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0xE000000000000000;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0xE000000000000000;
  *(void *)(a1 + 88) = MEMORY[0x263F8EE78];
  *(_DWORD *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  type metadata accessor for PBECGMeta(0);
  return sub_22D2BBFE0();
}

uint64_t sub_22D002A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  sub_22D018654(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

uint64_t PBReference.ecgMeta.setter(uint64_t a1)
{
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = (void *)swift_retain();
    *(void *)(v1 + v9) = sub_22D00D3F4(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  sub_22D01849C(a1, (uint64_t)v8, type metadata accessor for PBECGMeta);
  uint64_t v12 = type metadata accessor for PBReference.OneOf_Metadata(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_22D018574((uint64_t)v8, (uint64_t)v6, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  swift_retain();
  sub_22D0120B0((uint64_t)v6, v13, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  swift_endAccess();
  return swift_release();
}

void (*PBReference.ecgMeta.modify(void *a1))(uint64_t a1, char a2)
{
  *a1 = v1;
  size_t v3 = *(void *)(*(void *)(type metadata accessor for PBECGMeta(0) - 8) + 64);
  a1[1] = malloc(v3);
  uint64_t v4 = malloc(v3);
  a1[2] = v4;
  PBReference.ecgMeta.getter((uint64_t)v4);
  return sub_22D002DC4;
}

void sub_22D002DC4(uint64_t a1, char a2)
{
}

void sub_22D002E04(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void **)(a1 + 16);
  if (a2)
  {
    sub_22D018654(*(void *)(a1 + 16), (uint64_t)v6, a4);
    a3(v6);
    sub_22D010254((uint64_t)v7, a5);
  }
  else
  {
    a3(*(void **)(a1 + 16));
  }
  free(v7);
  free(v6);
}

uint64_t _s19HealthRecordsDaemon11PBTypedDataV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvg_0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t _s19HealthRecordsDaemon11PBTypedDataV13unknownFields21InternalSwiftProtobuf14UnknownStorageVvs_0(uint64_t a1)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PBReference.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t static PBReference.OneOf_Metadata.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0185F4(0, &qword_26853DA08, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = (char *)&v13 + *(int *)(v8 + 56) - v9;
  sub_22D018654(a1, (uint64_t)&v13 - v9, type metadata accessor for PBReference.OneOf_Metadata);
  sub_22D018654(a2, (uint64_t)v11, type metadata accessor for PBReference.OneOf_Metadata);
  sub_22D01849C((uint64_t)v10, (uint64_t)v6, type metadata accessor for PBECGMeta);
  LOBYTE(a2) = _s19HealthRecordsDaemon9PBECGMetaV2eeoiySbAC_ACtFZ_0((uint64_t)v6, (uint64_t)v11);
  sub_22D010254((uint64_t)v11, type metadata accessor for PBECGMeta);
  sub_22D010254((uint64_t)v6, type metadata accessor for PBECGMeta);
  return a2 & 1;
}

uint64_t sub_22D003104(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0185F4(0, &qword_26853DA08, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v10 = (char *)&v13 - v9;
  uint64_t v11 = (char *)&v13 + *(int *)(v8 + 56) - v9;
  sub_22D018654(a1, (uint64_t)&v13 - v9, type metadata accessor for PBReference.OneOf_Metadata);
  sub_22D018654(a2, (uint64_t)v11, type metadata accessor for PBReference.OneOf_Metadata);
  sub_22D01849C((uint64_t)v10, (uint64_t)v6, type metadata accessor for PBECGMeta);
  LOBYTE(a2) = static PBECGMeta.== infix(_:_:)((uint64_t)v6, (uint64_t)v11);
  sub_22D010254((uint64_t)v11, type metadata accessor for PBECGMeta);
  sub_22D010254((uint64_t)v6, type metadata accessor for PBECGMeta);
  return a2 & 1;
}

uint64_t PBReference.init()@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0032B0(type metadata accessor for PBReference, &qword_26853CCE0, &qword_26853D9B0, a1);
}

uint64_t sub_22D0032B0@<X0>(uint64_t (*a1)(void)@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v8 = *(int *)(a1(0) + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

uint64_t PBReferences.references.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PBReferences.references.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  void *v1 = a1;
  return result;
}

uint64_t (*PBReferences.references.modify())()
{
  return nullsub_1;
}

uint64_t PBReferences.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D0033A4(type metadata accessor for PBReferences, a1);
}

uint64_t sub_22D0033A4@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1(0) + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t PBReferences.unknownFields.setter(uint64_t a1)
{
  return sub_22D00343C(a1, type metadata accessor for PBReferences);
}

uint64_t sub_22D00343C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v4 = v2 + *(int *)(a2(0) + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*PBReferences.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBReferences.init()@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  type metadata accessor for PBReferences(0);
  return sub_22D2BBFE0();
}

unint64_t static PBRawData.protoMessageName.getter()
{
  return 0xD000000000000022;
}

uint64_t sub_22D00355C(uint64_t a1)
{
  return sub_22D00F938(a1, qword_26853D960, (uint64_t)"blob", 4);
}

uint64_t static PBRawData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CCC0, (uint64_t)qword_26853D960, a1);
}

uint64_t PBRawData.decodeMessage<A>(decoder:)()
{
  while (1)
  {
    uint64_t result = sub_22D2BC080();
    if (v0 || (v2 & 1) != 0) {
      break;
    }
    if (result == 1) {
      sub_22D2BC110();
    }
  }
  return result;
}

uint64_t PBRawData.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_22D2BC260();
      if (!v1)
      {
LABEL_8:
        type metadata accessor for PBRawData(0);
        return sub_22D2BBFD0();
      }
      return result;
  }
}

uint64_t PBRawData.hashValue.getter()
{
  return sub_22D00FDA0((void (*)(void))type metadata accessor for PBRawData, &qword_26853DA10, (void (*)(uint64_t))type metadata accessor for PBRawData);
}

uint64_t sub_22D003744@<X0>(uint64_t *a1@<X8>)
{
  *a1 = sub_22D2BBFC0();
  a1[1] = v2;
  return sub_22D2BBFE0();
}

unint64_t sub_22D00377C()
{
  return 0xD000000000000022;
}

uint64_t (*sub_22D0037A4())()
{
  return nullsub_1;
}

uint64_t sub_22D0037C8()
{
  return PBRawData.decodeMessage<A>(decoder:)();
}

uint64_t sub_22D0037E0()
{
  return PBRawData.traverse<A>(visitor:)();
}

uint64_t sub_22D0037FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D012384(&qword_26853DB18, (void (*)(uint64_t))type metadata accessor for PBRawData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D00387C@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CCC0, (uint64_t)qword_26853D960, a1);
}

uint64_t sub_22D0038A0(uint64_t a1)
{
  uint64_t v2 = sub_22D012384(&qword_26853DA40, (void (*)(uint64_t))type metadata accessor for PBRawData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D003910()
{
  sub_22D012384(&qword_26853DA40, (void (*)(uint64_t))type metadata accessor for PBRawData);
  return sub_22D2BC200();
}

unint64_t static PBTypedData.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_22D0039B0()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853D978);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853D978);
  sub_22D0043D0(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_22D2BFF20;
  unint64_t v5 = v44 + v4;
  unint64_t v6 = v44 + v4 + *(int *)(v2 + 56);
  *(void *)(v44 + v4) = 1;
  *(void *)unint64_t v6 = "type";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_22D2BC2F0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v44 + v4 + v3 + *(int *)(v2 + 56);
  *(void *)(v5 + v3) = 2;
  *(void *)unint64_t v10 = "date_range";
  *(void *)(v10 + 8) = 10;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v44 + v4 + 2 * v3);
  uint64_t v12 = (char *)v11 + *(int *)(v2 + 56);
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "time_series";
  *((void *)v12 + 1) = 11;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v44 + v4 + 3 * v3);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 56);
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "category_series";
  *((void *)v14 + 1) = 15;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v44 + v4 + 4 * v3);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 56);
  *uint64_t v15 = 5;
  *(void *)uint64_t v16 = "workout";
  *((void *)v16 + 1) = 7;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v44 + v4 + 5 * v3);
  uint64_t v18 = (char *)v17 + *(int *)(v2 + 56);
  void *v17 = 6;
  *(void *)uint64_t v18 = "characteristics";
  *((void *)v18 + 1) = 15;
  v18[16] = 2;
  v9();
  uint64_t v19 = (void *)(v44 + v4 + 6 * v3);
  uint64_t v20 = (char *)v19 + *(int *)(v2 + 56);
  void *v19 = 7;
  *(void *)uint64_t v20 = "record";
  *((void *)v20 + 1) = 6;
  v20[16] = 2;
  v9();
  uint64_t v21 = (void *)(v44 + v4 + 7 * v3);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 56);
  void *v21 = 13;
  *(void *)uint64_t v22 = "ecgs";
  *((void *)v22 + 1) = 4;
  v22[16] = 2;
  v9();
  uint64_t v23 = v44 + v4 + 8 * v3 + *(int *)(v2 + 56);
  *(void *)(v5 + 8 * v3) = 14;
  *(void *)uint64_t v23 = "cycleTracking";
  *(void *)(v23 + 8) = 13;
  *(unsigned char *)(v23 + 16) = 2;
  v9();
  uint64_t v24 = (void *)(v44 + v4 + 9 * v3);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 56);
  void *v24 = 15;
  *(void *)uint64_t v25 = "ecg";
  *((void *)v25 + 1) = 3;
  v25[16] = 2;
  v9();
  uint64_t v26 = (void *)(v44 + v4 + 10 * v3);
  unint64_t v27 = (char *)v26 + *(int *)(v2 + 56);
  void *v26 = 16;
  *(void *)unint64_t v27 = "activitySummaries";
  *((void *)v27 + 1) = 17;
  v27[16] = 2;
  v9();
  uint64_t v28 = (void *)(v44 + v4 + 11 * v3);
  uint64_t v29 = (char *)v28 + *(int *)(v2 + 56);
  *uint64_t v28 = 17;
  *(void *)uint64_t v29 = "patient_meta";
  *((void *)v29 + 1) = 12;
  v29[16] = 2;
  v9();
  uint64_t v30 = (void *)(v44 + v4 + 12 * v3);
  uint64_t v31 = (char *)v30 + *(int *)(v2 + 56);
  *uint64_t v30 = 18;
  *(void *)uint64_t v31 = "sleep_summary";
  *((void *)v31 + 1) = 13;
  v31[16] = 2;
  v9();
  uint64_t v32 = (void *)(v44 + v4 + 13 * v3);
  uint64_t v33 = (char *)v32 + *(int *)(v2 + 56);
  *uint64_t v32 = 19;
  *(void *)uint64_t v33 = "sleep_series";
  *((void *)v33 + 1) = 12;
  v33[16] = 2;
  v9();
  unint64_t v34 = (void *)(v44 + v4 + 14 * v3);
  uint64_t v35 = (char *)v34 + *(int *)(v2 + 56);
  void *v34 = 20;
  *(void *)uint64_t v35 = "histogram_series";
  *((void *)v35 + 1) = 16;
  v35[16] = 2;
  v9();
  uint64_t v36 = (void *)(v44 + v4 + 15 * v3);
  uint64_t v37 = (char *)v36 + *(int *)(v2 + 56);
  void *v36 = 21;
  *(void *)uint64_t v37 = "medication_trackings";
  *((void *)v37 + 1) = 20;
  v37[16] = 2;
  v9();
  uint64_t v38 = v44 + v4 + 16 * v3 + *(int *)(v2 + 56);
  *(void *)(v5 + 16 * v3) = 22;
  *(void *)uint64_t v38 = "medication_tracking_dose_events";
  *(void *)(v38 + 8) = 31;
  *(unsigned char *)(v38 + 16) = 2;
  v9();
  uint64_t v39 = (void *)(v44 + v4 + 17 * v3);
  double v40 = (char *)v39 + *(int *)(v2 + 56);
  *uint64_t v39 = 23;
  *(void *)double v40 = "medication_tracking_schedules";
  *((void *)v40 + 1) = 29;
  v40[16] = 2;
  v9();
  int v41 = (void *)(v44 + v4 + 18 * v3);
  uint64_t v42 = (char *)v41 + *(int *)(v2 + 56);
  *int v41 = 24;
  *(void *)uint64_t v42 = "active_medications";
  *((void *)v42 + 1) = 18;
  v42[16] = 2;
  v9();
  return sub_22D2BC300();
}

uint64_t static PBTypedData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CCC8, (uint64_t)qword_26853D978, a1);
}

uint64_t sub_22D003FE0()
{
  type metadata accessor for PBTypedData._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  uint64_t v2 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  uint64_t v3 = v0 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  uint64_t v4 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  qword_26853D990 = v0;
  return result;
}

uint64_t type metadata accessor for PBTypedData._StorageClass(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAE0);
}

uint64_t sub_22D0040E0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v21 = type metadata accessor for PBTypedData.OneOf_Raw;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v21 - v6;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v4);
  MEMORY[0x270FA5388](v8 - 8);
  unint64_t v10 = (char *)&v21 - v9;
  *(void *)(v2 + 16) = 0;
  *(unsigned char *)(v2 + 24) = 1;
  uint64_t v11 = v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  uint64_t v12 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v2 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  uint64_t v14 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 16);
  char v16 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v2 + 16) = v15;
  *(unsigned char *)(v2 + 24) = v16;
  uint64_t v17 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D012010(v17, (uint64_t)v10, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_beginAccess();
  sub_22D0120B0((uint64_t)v10, v11, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_endAccess();
  uint64_t v18 = a1 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  uint64_t v19 = v21;
  sub_22D012010(v18, (uint64_t)v7, &qword_26853D9D8, v21);
  swift_release();
  swift_beginAccess();
  sub_22D0120B0((uint64_t)v7, v13, &qword_26853D9D8, v19);
  swift_endAccess();
  return v2;
}

void sub_22D0043D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for PBTypedData.OneOf_Raw(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAA0);
}

uint64_t type metadata accessor for PBRawData(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DA90);
}

uint64_t sub_22D004474()
{
  sub_22D018504(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, &qword_26853D7B0, type metadata accessor for PBDateRange);
  sub_22D018504(v0 + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  return swift_deallocClassInstance();
}

uint64_t PBTypedData.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22D00D908(a1, a2, a3, type metadata accessor for PBTypedData, (void (*)(void))type metadata accessor for PBTypedData._StorageClass, sub_22D0040E0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_22D004588);
}

uint64_t sub_22D004588(unsigned int (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v790 = a4;
  uint64_t v793 = a2;
  uint64_t v794 = a3;
  v800 = a1;
  uint64_t v765 = type metadata accessor for PBActiveMedications(0);
  v780 = *(void (***)(uint64_t, void, uint64_t, uint64_t))(v765 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v765);
  v714 = (char *)&v614 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v656 = (uint64_t)&v614 - v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853DBF8, type metadata accessor for PBActiveMedications, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  v715 = (char *)&v614 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v736 = (uint64_t)&v614 - v11;
  uint64_t v786 = type metadata accessor for PBMedicationTrackingSchedules(0);
  v754 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v786 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v786);
  uint64_t v672 = (uint64_t)&v614 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v655 = (uint64_t)&v614 - v14;
  sub_22D0043D0(0, &qword_26853DC00, type metadata accessor for PBMedicationTrackingSchedules, v7);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  v788 = (char *)&v614 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v779 = (uint64_t)&v614 - v18;
  uint64_t v734 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  v753 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v734 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v734);
  uint64_t v671 = (uint64_t)&v614 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v654 = (uint64_t)&v614 - v21;
  sub_22D0043D0(0, &qword_26853DC08, type metadata accessor for PBMedicationTrackingDoseEvents, v7);
  uint64_t v23 = MEMORY[0x270FA5388](v22 - 8);
  uint64_t v713 = (uint64_t)&v614 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v23);
  uint64_t v778 = (uint64_t)&v614 - v25;
  uint64_t v764 = type metadata accessor for PBMedicationTrackings(0);
  v752 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v764 - 8);
  uint64_t v26 = MEMORY[0x270FA5388](v764);
  uint64_t v670 = (uint64_t)&v614 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v26);
  uint64_t v653 = (uint64_t)&v614 - v28;
  sub_22D0043D0(0, &qword_26853DC10, type metadata accessor for PBMedicationTrackings, v7);
  uint64_t v30 = MEMORY[0x270FA5388](v29 - 8);
  uint64_t v712 = (uint64_t)&v614 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v30);
  uint64_t v735 = (uint64_t)&v614 - v32;
  uint64_t v763 = type metadata accessor for PBHistogramSeries(0);
  v751 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v763 - 8);
  uint64_t v33 = MEMORY[0x270FA5388](v763);
  uint64_t v669 = (uint64_t)&v614 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v33);
  uint64_t v652 = (uint64_t)&v614 - v35;
  sub_22D0043D0(0, &qword_26853DC18, type metadata accessor for PBHistogramSeries, v7);
  uint64_t v37 = MEMORY[0x270FA5388](v36 - 8);
  uint64_t v711 = (uint64_t)&v614 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v37);
  uint64_t v777 = (uint64_t)&v614 - v39;
  uint64_t v789 = type metadata accessor for PBSleepSeries(0);
  v750 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v789 - 8);
  uint64_t v40 = MEMORY[0x270FA5388](v789);
  uint64_t v668 = (uint64_t)&v614 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v40);
  uint64_t v651 = (uint64_t)&v614 - v42;
  sub_22D0043D0(0, &qword_26853DC20, type metadata accessor for PBSleepSeries, v7);
  uint64_t v44 = MEMORY[0x270FA5388](v43 - 8);
  uint64_t v710 = (uint64_t)&v614 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v44);
  uint64_t v776 = (uint64_t)&v614 - v46;
  uint64_t v762 = type metadata accessor for PBSleepSummary(0);
  v749 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v762 - 8);
  uint64_t v47 = MEMORY[0x270FA5388](v762);
  uint64_t v667 = (uint64_t)&v614 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v47);
  uint64_t v650 = (uint64_t)&v614 - v49;
  sub_22D0043D0(0, &qword_26853DC28, type metadata accessor for PBSleepSummary, v7);
  uint64_t v51 = MEMORY[0x270FA5388](v50 - 8);
  uint64_t v709 = (uint64_t)&v614 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v51);
  uint64_t v775 = (uint64_t)&v614 - v53;
  uint64_t v761 = type metadata accessor for PBPatientMeta(0);
  v748 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v761 - 8);
  uint64_t v54 = MEMORY[0x270FA5388](v761);
  uint64_t v666 = (uint64_t)&v614 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v54);
  uint64_t v649 = (uint64_t)&v614 - v56;
  sub_22D0043D0(0, &qword_26853DC30, type metadata accessor for PBPatientMeta, v7);
  uint64_t v58 = MEMORY[0x270FA5388](v57 - 8);
  uint64_t v708 = (uint64_t)&v614 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v58);
  uint64_t v774 = (uint64_t)&v614 - v60;
  uint64_t v732 = type metadata accessor for PBActivitySummarySeries(0);
  v747 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v732 - 8);
  uint64_t v61 = MEMORY[0x270FA5388](v732);
  uint64_t v665 = (uint64_t)&v614 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v61);
  uint64_t v648 = (uint64_t)&v614 - v63;
  sub_22D0043D0(0, &qword_26853DC38, type metadata accessor for PBActivitySummarySeries, v7);
  uint64_t v65 = MEMORY[0x270FA5388](v64 - 8);
  uint64_t v707 = (uint64_t)&v614 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v65);
  uint64_t v773 = (uint64_t)&v614 - v67;
  uint64_t v785 = type metadata accessor for PBECGMeasurement(0);
  v746 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v785 - 8);
  uint64_t v68 = MEMORY[0x270FA5388](v785);
  uint64_t v664 = (uint64_t)&v614 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v68);
  uint64_t v647 = (uint64_t)&v614 - v70;
  sub_22D0043D0(0, &qword_26853DC40, type metadata accessor for PBECGMeasurement, v7);
  uint64_t v72 = MEMORY[0x270FA5388](v71 - 8);
  uint64_t v706 = (uint64_t)&v614 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v72);
  uint64_t v772 = (uint64_t)&v614 - v74;
  uint64_t v733 = type metadata accessor for PBCycleTracking(0);
  v745 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v733 - 8);
  uint64_t v75 = MEMORY[0x270FA5388](v733);
  uint64_t v663 = (uint64_t)&v614 - ((v76 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v75);
  uint64_t v646 = (uint64_t)&v614 - v77;
  sub_22D0043D0(0, &qword_26853DC48, type metadata accessor for PBCycleTracking, v7);
  uint64_t v79 = MEMORY[0x270FA5388](v78 - 8);
  uint64_t v705 = (uint64_t)&v614 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v79);
  uint64_t v771 = (uint64_t)&v614 - v81;
  uint64_t v760 = type metadata accessor for PBECGs(0);
  v743 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v760 - 8);
  uint64_t v82 = MEMORY[0x270FA5388](v760);
  uint64_t v662 = (uint64_t)&v614 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v82);
  uint64_t v645 = (uint64_t)&v614 - v84;
  sub_22D0043D0(0, &qword_26853DC50, type metadata accessor for PBECGs, v7);
  uint64_t v86 = MEMORY[0x270FA5388](v85 - 8);
  uint64_t v704 = (uint64_t)&v614 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v86);
  uint64_t v770 = (uint64_t)&v614 - v88;
  uint64_t v759 = type metadata accessor for PBAllClinicalRecords(0);
  v744 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v759 - 8);
  uint64_t v89 = MEMORY[0x270FA5388](v759);
  uint64_t v661 = (uint64_t)&v614 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v89);
  uint64_t v644 = (uint64_t)&v614 - v91;
  sub_22D0043D0(0, &qword_26853DC58, type metadata accessor for PBAllClinicalRecords, v7);
  uint64_t v93 = MEMORY[0x270FA5388](v92 - 8);
  uint64_t v703 = (uint64_t)&v614 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v93);
  uint64_t v769 = (uint64_t)&v614 - v95;
  uint64_t v758 = type metadata accessor for PBCharacteristics(0);
  v742 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v758 - 8);
  uint64_t v96 = MEMORY[0x270FA5388](v758);
  uint64_t v660 = (uint64_t)&v614 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v96);
  uint64_t v643 = (uint64_t)&v614 - v98;
  sub_22D0043D0(0, &qword_26853DC60, type metadata accessor for PBCharacteristics, v7);
  uint64_t v100 = MEMORY[0x270FA5388](v99 - 8);
  uint64_t v702 = (uint64_t)&v614 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v100);
  uint64_t v768 = (uint64_t)&v614 - v102;
  uint64_t v757 = type metadata accessor for PBWorkout(0);
  v741 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v757 - 8);
  uint64_t v103 = MEMORY[0x270FA5388](v757);
  uint64_t v659 = (uint64_t)&v614 - ((v104 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v103);
  uint64_t v642 = (uint64_t)&v614 - v105;
  sub_22D0043D0(0, &qword_26853DC68, type metadata accessor for PBWorkout, v7);
  uint64_t v107 = MEMORY[0x270FA5388](v106 - 8);
  uint64_t v701 = (uint64_t)&v614 - ((v108 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v107);
  uint64_t v767 = (uint64_t)&v614 - v109;
  uint64_t v756 = type metadata accessor for PBCategorySeries(0);
  v740 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v756 - 8);
  uint64_t v110 = MEMORY[0x270FA5388](v756);
  uint64_t v658 = (uint64_t)&v614 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v110);
  uint64_t v641 = (uint64_t)&v614 - v112;
  sub_22D0043D0(0, &qword_26853DC70, type metadata accessor for PBCategorySeries, v7);
  uint64_t v114 = MEMORY[0x270FA5388](v113 - 8);
  uint64_t v700 = (uint64_t)&v614 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v114);
  uint64_t v766 = (uint64_t)&v614 - v116;
  uint64_t v755 = type metadata accessor for PBTimeSeries(0);
  v739 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v755 - 8);
  uint64_t v117 = MEMORY[0x270FA5388](v755);
  uint64_t v657 = (uint64_t)&v614 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v117);
  uint64_t v640 = (uint64_t)&v614 - v119;
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, v7);
  uint64_t v121 = MEMORY[0x270FA5388](v120 - 8);
  uint64_t v731 = (uint64_t)&v614 - ((v122 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = MEMORY[0x270FA5388](v121);
  uint64_t v730 = (uint64_t)&v614 - v124;
  uint64_t v125 = MEMORY[0x270FA5388](v123);
  uint64_t v729 = (uint64_t)&v614 - v126;
  uint64_t v127 = MEMORY[0x270FA5388](v125);
  v787 = (char *)&v614 - v128;
  uint64_t v129 = MEMORY[0x270FA5388](v127);
  uint64_t v728 = (uint64_t)&v614 - v130;
  uint64_t v131 = MEMORY[0x270FA5388](v129);
  uint64_t v727 = (uint64_t)&v614 - v132;
  uint64_t v133 = MEMORY[0x270FA5388](v131);
  uint64_t v726 = (uint64_t)&v614 - v134;
  uint64_t v135 = MEMORY[0x270FA5388](v133);
  uint64_t v725 = (uint64_t)&v614 - v136;
  uint64_t v137 = MEMORY[0x270FA5388](v135);
  uint64_t v724 = (uint64_t)&v614 - v138;
  uint64_t v139 = MEMORY[0x270FA5388](v137);
  uint64_t v723 = (uint64_t)&v614 - v140;
  uint64_t v141 = MEMORY[0x270FA5388](v139);
  uint64_t v722 = (uint64_t)&v614 - v142;
  uint64_t v143 = MEMORY[0x270FA5388](v141);
  uint64_t v721 = (uint64_t)&v614 - v144;
  uint64_t v145 = MEMORY[0x270FA5388](v143);
  uint64_t v720 = (uint64_t)&v614 - v146;
  uint64_t v147 = MEMORY[0x270FA5388](v145);
  uint64_t v719 = (uint64_t)&v614 - v148;
  uint64_t v149 = MEMORY[0x270FA5388](v147);
  uint64_t v718 = (uint64_t)&v614 - v150;
  uint64_t v151 = MEMORY[0x270FA5388](v149);
  uint64_t v717 = (uint64_t)&v614 - v152;
  uint64_t v153 = MEMORY[0x270FA5388](v151);
  uint64_t v782 = (uint64_t)&v614 - v154;
  uint64_t v155 = MEMORY[0x270FA5388](v153);
  uint64_t v781 = (uint64_t)&v614 - v156;
  MEMORY[0x270FA5388](v155);
  uint64_t v716 = (uint64_t)&v614 - v157;
  uint64_t v792 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  v738 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v792 - 8);
  uint64_t v158 = MEMORY[0x270FA5388](v792);
  uint64_t v686 = (uint64_t)&v614 - ((v159 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = MEMORY[0x270FA5388](v158);
  uint64_t v699 = (uint64_t)&v614 - v161;
  uint64_t v162 = MEMORY[0x270FA5388](v160);
  uint64_t v685 = (uint64_t)&v614 - v163;
  uint64_t v164 = MEMORY[0x270FA5388](v162);
  uint64_t v698 = (uint64_t)&v614 - v165;
  uint64_t v166 = MEMORY[0x270FA5388](v164);
  uint64_t v684 = (uint64_t)&v614 - v167;
  uint64_t v168 = MEMORY[0x270FA5388](v166);
  uint64_t v697 = (uint64_t)&v614 - v169;
  uint64_t v170 = MEMORY[0x270FA5388](v168);
  uint64_t v683 = (uint64_t)&v614 - v171;
  uint64_t v172 = MEMORY[0x270FA5388](v170);
  v783 = (char *)&v614 - v173;
  uint64_t v174 = MEMORY[0x270FA5388](v172);
  uint64_t v682 = (uint64_t)&v614 - v175;
  uint64_t v176 = MEMORY[0x270FA5388](v174);
  uint64_t v696 = (uint64_t)&v614 - v177;
  uint64_t v178 = MEMORY[0x270FA5388](v176);
  uint64_t v681 = (uint64_t)&v614 - v179;
  uint64_t v180 = MEMORY[0x270FA5388](v178);
  uint64_t v695 = (uint64_t)&v614 - v181;
  uint64_t v182 = MEMORY[0x270FA5388](v180);
  uint64_t v680 = (uint64_t)&v614 - v183;
  uint64_t v184 = MEMORY[0x270FA5388](v182);
  uint64_t v694 = (uint64_t)&v614 - v185;
  uint64_t v186 = MEMORY[0x270FA5388](v184);
  uint64_t v679 = (uint64_t)&v614 - v187;
  uint64_t v188 = MEMORY[0x270FA5388](v186);
  uint64_t v693 = (uint64_t)&v614 - v189;
  uint64_t v190 = MEMORY[0x270FA5388](v188);
  uint64_t v678 = (uint64_t)&v614 - v191;
  uint64_t v192 = MEMORY[0x270FA5388](v190);
  uint64_t v692 = (uint64_t)&v614 - v193;
  uint64_t v194 = MEMORY[0x270FA5388](v192);
  uint64_t v677 = (uint64_t)&v614 - v195;
  uint64_t v196 = MEMORY[0x270FA5388](v194);
  uint64_t v691 = (uint64_t)&v614 - v197;
  uint64_t v198 = MEMORY[0x270FA5388](v196);
  uint64_t v676 = (uint64_t)&v614 - v199;
  uint64_t v200 = MEMORY[0x270FA5388](v198);
  uint64_t v690 = (uint64_t)&v614 - v201;
  uint64_t v202 = MEMORY[0x270FA5388](v200);
  uint64_t v675 = (uint64_t)&v614 - v203;
  uint64_t v204 = MEMORY[0x270FA5388](v202);
  uint64_t v689 = (uint64_t)&v614 - v205;
  uint64_t v206 = MEMORY[0x270FA5388](v204);
  uint64_t v674 = (uint64_t)&v614 - v207;
  uint64_t v208 = MEMORY[0x270FA5388](v206);
  uint64_t v688 = (uint64_t)&v614 - v209;
  uint64_t v210 = MEMORY[0x270FA5388](v208);
  uint64_t v673 = (uint64_t)&v614 - v211;
  uint64_t v212 = MEMORY[0x270FA5388](v210);
  uint64_t v687 = (uint64_t)&v614 - v213;
  uint64_t v214 = MEMORY[0x270FA5388](v212);
  v216 = (char *)&v614 - v215;
  uint64_t v217 = MEMORY[0x270FA5388](v214);
  v219 = (char *)&v614 - v218;
  uint64_t v220 = MEMORY[0x270FA5388](v217);
  v222 = (char *)&v614 - v221;
  uint64_t v223 = MEMORY[0x270FA5388](v220);
  v225 = (char *)&v614 - v224;
  uint64_t v226 = MEMORY[0x270FA5388](v223);
  v228 = (char *)&v614 - v227;
  MEMORY[0x270FA5388](v226);
  v230 = (char *)&v614 - v229;
  sub_22D0043D0(0, &qword_26853DC78, type metadata accessor for PBTimeSeries, v7);
  uint64_t v232 = MEMORY[0x270FA5388](v231 - 8);
  v234 = (char *)&v614 - ((v233 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v232);
  v236 = (char *)&v614 - v235;
  v737 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  uint64_t v791 = (uint64_t)v800
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  v237 = v784;
  uint64_t result = sub_22D2BC080();
  v240 = v237;
  if (v237) {
    goto LABEL_2;
  }
  v636 = v234;
  v639 = v236;
  v617 = v230;
  v614 = v228;
  v618 = v225;
  v615 = v222;
  v619 = v219;
  v616 = v216;
  v638 = (char *)v737 + (void)v800;
  v637 = v800 + 2;
  v737 = v780 + 7;
  v784 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v738 + 6);
  v635 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v780 + 6);
  v780 = v738 + 7;
  v738 = v754 + 7;
  v634 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v754 + 6);
  v754 = v753 + 7;
  v633 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v753 + 6);
  v753 = v752 + 7;
  v632 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v752 + 6);
  v752 = v751 + 7;
  v631 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v751 + 6);
  v751 = v750 + 7;
  v630 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v750 + 6);
  v750 = v749 + 7;
  v629 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v749 + 6);
  v749 = v748 + 7;
  v628 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v748 + 6);
  v748 = v747 + 7;
  v627 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v747 + 6);
  v747 = v746 + 7;
  v626 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v746 + 6);
  v746 = v745 + 7;
  v625 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v745 + 6);
  v745 = v743 + 7;
  v624 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v743 + 6);
  v241 = &qword_26853D9D8;
  v743 = v744 + 7;
  v623 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v744 + 6);
  v744 = v742 + 7;
  v622 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v742 + 6);
  v742 = v741 + 7;
  v621 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v741 + 6);
  v741 = v740 + 7;
  v620 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v740 + 6);
  v740 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v739 + 7);
  v739 += 6;
  uint64_t v242 = v789;
  uint64_t v243 = v785;
  uint64_t v244 = v786;
  v246 = v787;
  uint64_t v245 = (uint64_t)v788;
  uint64_t v247 = (uint64_t)v783;
  v800 = 0;
  while (2)
  {
    if (v239) {
      return result;
    }
    switch(result)
    {
      case 1:
        v251 = v246;
        uint64_t v252 = v245;
        uint64_t v253 = v244;
        uint64_t v254 = v243;
        uint64_t v255 = v247;
        uint64_t v256 = v242;
        swift_beginAccess();
        sub_22D0183D0();
        v257 = v800;
        sub_22D2BC0D0();
        v800 = v257;
        if (v257) {
          return swift_endAccess();
        }
        swift_endAccess();
        v241 = &qword_26853D9D8;
        uint64_t v242 = v256;
        uint64_t v247 = v255;
        uint64_t v243 = v254;
        uint64_t v244 = v253;
        uint64_t v245 = v252;
        v246 = v251;
        goto LABEL_9;
      case 2:
        uint64_t v258 = v242;
        swift_beginAccess();
        type metadata accessor for PBDateRange(0);
        sub_22D012384(&qword_26853DB58, (void (*)(uint64_t))type metadata accessor for PBDateRange);
        v259 = v800;
        sub_22D2BC1A0();
        v800 = v259;
        if (v259) {
          return swift_endAccess();
        }
        swift_endAccess();
        v241 = &qword_26853D9D8;
        uint64_t v242 = v258;
        goto LABEL_8;
      case 3:
        v260 = *v740;
        (*v740)((uint64_t)v639, 1, 1, v755);
        uint64_t v261 = v716;
        sub_22D012010(v791, v716, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v261, 1, v792) == 1)
        {
          sub_22D018504(v261, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v262 = v792;
          goto LABEL_198;
        }
        uint64_t v312 = v261;
        uint64_t v313 = (uint64_t)v617;
        sub_22D01849C(v312, (uint64_t)v617, type metadata accessor for PBTypedData.OneOf_Raw);
        v314 = v800;
        sub_22D2BC090();
        v800 = v314;
        if (v314)
        {
          sub_22D010254(v313, type metadata accessor for PBTypedData.OneOf_Raw);
          v611 = &qword_26853DC78;
          v612 = type metadata accessor for PBTimeSeries;
          v613 = &v671;
          return sub_22D018504(*(v613 - 32), v611, v612);
        }
        uint64_t v315 = (uint64_t)v614;
        sub_22D01849C(v313, (uint64_t)v614, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v262 = v792;
        if (swift_getEnumCaseMultiPayload())
        {
          sub_22D010254(v315, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v590 = (uint64_t)v639;
          sub_22D018504((uint64_t)v639, &qword_26853DC78, type metadata accessor for PBTimeSeries);
          uint64_t v591 = v315;
          uint64_t v592 = v640;
          sub_22D01849C(v591, v640, type metadata accessor for PBTimeSeries);
          sub_22D01849C(v592, v590, type metadata accessor for PBTimeSeries);
          v260(v590, 0, 1, v755);
        }
LABEL_198:
        uint64_t v243 = v785;
        sub_22D012384(&qword_26853DBF0, (void (*)(uint64_t))type metadata accessor for PBTimeSeries);
        uint64_t v470 = (uint64_t)v639;
        uint64_t v593 = v755;
        v594 = v800;
        sub_22D2BC1A0();
        uint64_t v244 = v786;
        v800 = v594;
        if (!v594)
        {
          uint64_t v595 = (uint64_t)v636;
          sub_22D018574(v470, (uint64_t)v636, &qword_26853DC78, type metadata accessor for PBTimeSeries);
          if ((*v739)(v595, 1, v593) == 1)
          {
            sub_22D018504(v595, &qword_26853DC78, type metadata accessor for PBTimeSeries);
            v241 = &qword_26853D9D8;
            goto LABEL_203;
          }
          uint64_t v596 = v595;
          uint64_t v597 = v657;
          sub_22D01849C(v596, v657, type metadata accessor for PBTimeSeries);
          uint64_t v598 = v597;
          uint64_t v599 = v781;
          sub_22D01849C(v598, v781, type metadata accessor for PBTimeSeries);
          swift_storeEnumTagMultiPayload();
          (*v780)(v599, 0, 1, v262);
          uint64_t v540 = v599;
          uint64_t v541 = v782;
          uint64_t v542 = v782;
          v241 = &qword_26853D9D8;
LABEL_202:
          sub_22D018574(v540, v542, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v600 = v791;
          swift_beginAccess();
          sub_22D0120B0(v541, v600, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
          goto LABEL_203;
        }
        v609 = &qword_26853DC78;
        v610 = type metadata accessor for PBTimeSeries;
        return sub_22D018504(v470, v609, v610);
      case 4:
        v263 = *v741;
        (*v741)(v766, 1, 1, v756);
        v264 = v241;
        uint64_t v265 = v717;
        sub_22D012010(v791, v717, v264, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v265, 1, v792) == 1)
        {
          sub_22D018504(v265, v264, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v316 = v265;
          uint64_t v317 = (uint64_t)v618;
          sub_22D01849C(v316, (uint64_t)v618, type metadata accessor for PBTypedData.OneOf_Raw);
          v318 = v800;
          sub_22D2BC090();
          v800 = v318;
          if (v318)
          {
            sub_22D010254(v317, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC70;
            v612 = type metadata accessor for PBCategorySeries;
            v613 = (uint64_t *)&v795;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v319 = (uint64_t)v615;
          sub_22D01849C(v317, (uint64_t)v615, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 1)
          {
            uint64_t v320 = v766;
            sub_22D018504(v766, &qword_26853DC70, type metadata accessor for PBCategorySeries);
            uint64_t v321 = v319;
            uint64_t v322 = v641;
            sub_22D01849C(v321, v641, type metadata accessor for PBCategorySeries);
            sub_22D01849C(v322, v320, type metadata accessor for PBCategorySeries);
            v263(v320, 0, 1, v756);
          }
          else
          {
            sub_22D010254(v319, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DBE8, (void (*)(uint64_t))type metadata accessor for PBCategorySeries);
        uint64_t v423 = v766;
        uint64_t v424 = v756;
        v425 = v800;
        sub_22D2BC1A0();
        uint64_t v244 = v786;
        v800 = v425;
        if (!v425)
        {
          uint64_t v426 = v423;
          uint64_t v427 = v700;
          v428 = &qword_26853DC70;
          sub_22D018574(v426, v700, &qword_26853DC70, type metadata accessor for PBCategorySeries);
          if ((*v620)(v427, 1, v424) == 1)
          {
            v429 = type metadata accessor for PBCategorySeries;
LABEL_160:
            sub_22D018504(v427, v428, v429);
            v241 = &qword_26853D9D8;
            goto LABEL_7;
          }
          uint64_t v430 = v427;
          uint64_t v431 = v658;
          sub_22D01849C(v430, v658, type metadata accessor for PBCategorySeries);
          uint64_t v432 = v431;
          uint64_t v433 = v781;
          sub_22D01849C(v432, v781, type metadata accessor for PBCategorySeries);
          uint64_t v434 = v792;
          goto LABEL_162;
        }
        v601 = &qword_26853DC70;
        v602 = type metadata accessor for PBCategorySeries;
        return sub_22D018504(v423, v601, v602);
      case 5:
        v266 = v246;
        v267 = *v742;
        (*v742)(v767, 1, 1, v757);
        uint64_t v268 = v718;
        sub_22D012010(v791, v718, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v268, 1, v792) == 1)
        {
          sub_22D018504(v268, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v323 = v268;
          uint64_t v324 = (uint64_t)v619;
          sub_22D01849C(v323, (uint64_t)v619, type metadata accessor for PBTypedData.OneOf_Raw);
          v325 = v800;
          sub_22D2BC090();
          v800 = v325;
          if (v325)
          {
            sub_22D010254(v324, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC68;
            v612 = type metadata accessor for PBWorkout;
            v613 = (uint64_t *)&v796;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v326 = (uint64_t)v616;
          sub_22D01849C(v324, (uint64_t)v616, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v327 = v767;
            sub_22D018504(v767, &qword_26853DC68, type metadata accessor for PBWorkout);
            uint64_t v328 = v326;
            uint64_t v329 = v642;
            sub_22D01849C(v328, v642, type metadata accessor for PBWorkout);
            sub_22D01849C(v329, v327, type metadata accessor for PBWorkout);
            v267(v327, 0, 1, v757);
          }
          else
          {
            sub_22D010254(v326, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        v246 = v266;
        sub_22D012384(&qword_26853DBE0, (void (*)(uint64_t))type metadata accessor for PBWorkout);
        uint64_t v300 = v767;
        uint64_t v435 = v757;
        v436 = v800;
        sub_22D2BC1A0();
        v800 = v436;
        if (v436)
        {
          v603 = &qword_26853DC68;
          v604 = type metadata accessor for PBWorkout;
          return sub_22D018504(v300, v603, v604);
        }
        uint64_t v437 = v701;
        sub_22D018574(v300, v701, &qword_26853DC68, type metadata accessor for PBWorkout);
        if ((*v621)(v437, 1, v435) == 1)
        {
          sub_22D018504(v437, &qword_26853DC68, type metadata accessor for PBWorkout);
        }
        else
        {
          uint64_t v438 = v437;
          uint64_t v439 = v659;
          sub_22D01849C(v438, v659, type metadata accessor for PBWorkout);
          uint64_t v440 = v439;
          uint64_t v441 = v781;
          sub_22D01849C(v440, v781, type metadata accessor for PBWorkout);
          uint64_t v442 = v792;
          swift_storeEnumTagMultiPayload();
          (*v780)(v441, 0, 1, v442);
          uint64_t v443 = v441;
          uint64_t v444 = v782;
          sub_22D018574(v443, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v445 = v791;
          swift_beginAccess();
          sub_22D0120B0(v444, v445, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
        }
        uint64_t v244 = v786;
        uint64_t v245 = (uint64_t)v788;
LABEL_155:
        uint64_t v247 = (uint64_t)v783;
        uint64_t v242 = v789;
LABEL_9:
        v248 = v800;
        uint64_t v249 = v247;
        uint64_t v250 = v242;
        uint64_t result = sub_22D2BC080();
        uint64_t v242 = v250;
        uint64_t v247 = v249;
        v800 = v248;
        if (v248)
        {
          v240 = v800;
LABEL_2:
          v800 = v240;
          return result;
        }
        continue;
      case 6:
        v269 = *v744;
        (*v744)(v768, 1, 1, v758);
        uint64_t v270 = v719;
        sub_22D012010(v791, v719, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v270, 1, v792) == 1)
        {
          sub_22D018504(v270, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v330 = v270;
          uint64_t v331 = v687;
          sub_22D01849C(v330, v687, type metadata accessor for PBTypedData.OneOf_Raw);
          v332 = v800;
          sub_22D2BC090();
          v800 = v332;
          if (v332)
          {
            sub_22D010254(v331, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC60;
            v612 = type metadata accessor for PBCharacteristics;
            v613 = (uint64_t *)&v797;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v333 = v673;
          sub_22D01849C(v331, v673, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 3)
          {
            uint64_t v334 = v768;
            sub_22D018504(v768, &qword_26853DC60, type metadata accessor for PBCharacteristics);
            uint64_t v335 = v333;
            uint64_t v336 = v643;
            sub_22D01849C(v335, v643, type metadata accessor for PBCharacteristics);
            sub_22D01849C(v336, v334, type metadata accessor for PBCharacteristics);
            v269(v334, 0, 1, v758);
          }
          else
          {
            sub_22D010254(v333, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DBD8, (void (*)(uint64_t))type metadata accessor for PBCharacteristics);
        uint64_t v446 = v768;
        uint64_t v447 = v758;
        v448 = v800;
        sub_22D2BC1A0();
        v800 = v448;
        if (!v448)
        {
          uint64_t v449 = v702;
          sub_22D018574(v446, v702, &qword_26853DC60, type metadata accessor for PBCharacteristics);
          if ((*v622)(v449, 1, v447) == 1)
          {
            sub_22D018504(v449, &qword_26853DC60, type metadata accessor for PBCharacteristics);
          }
          else
          {
            uint64_t v450 = v449;
            uint64_t v451 = v660;
            sub_22D01849C(v450, v660, type metadata accessor for PBCharacteristics);
            uint64_t v452 = v451;
            uint64_t v453 = v781;
            sub_22D01849C(v452, v781, type metadata accessor for PBCharacteristics);
            uint64_t v454 = v792;
            swift_storeEnumTagMultiPayload();
            (*v780)(v453, 0, 1, v454);
            uint64_t v455 = v453;
            uint64_t v456 = v782;
            sub_22D018574(v455, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v457 = v791;
            swift_beginAccess();
            sub_22D0120B0(v456, v457, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          uint64_t v247 = (uint64_t)v783;
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v789;
          v246 = v787;
          uint64_t v243 = v785;
          goto LABEL_9;
        }
        v605 = &qword_26853DC60;
        v606 = type metadata accessor for PBCharacteristics;
        return sub_22D018504(v446, v605, v606);
      case 7:
        v271 = *v743;
        (*v743)(v769, 1, 1, v759);
        uint64_t v272 = v792;
        v241 = &qword_26853D9D8;
        uint64_t v273 = v720;
        sub_22D012010(v791, v720, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v273, 1, v272) == 1)
        {
          sub_22D018504(v273, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v337 = v273;
          uint64_t v338 = v688;
          sub_22D01849C(v337, v688, type metadata accessor for PBTypedData.OneOf_Raw);
          v339 = v800;
          sub_22D2BC090();
          v800 = v339;
          if (v339)
          {
            sub_22D010254(v338, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC58;
            v612 = type metadata accessor for PBAllClinicalRecords;
            v613 = (uint64_t *)&v798;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v340 = v674;
          sub_22D01849C(v338, v674, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 4)
          {
            uint64_t v341 = v769;
            sub_22D018504(v769, &qword_26853DC58, type metadata accessor for PBAllClinicalRecords);
            uint64_t v342 = v340;
            uint64_t v343 = v644;
            sub_22D01849C(v342, v644, type metadata accessor for PBAllClinicalRecords);
            sub_22D01849C(v343, v341, type metadata accessor for PBAllClinicalRecords);
            v271(v341, 0, 1, v759);
          }
          else
          {
            sub_22D010254(v340, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        uint64_t v458 = v789;
        sub_22D012384(&qword_26853DBD0, (void (*)(uint64_t))type metadata accessor for PBAllClinicalRecords);
        uint64_t v311 = v769;
        uint64_t v459 = v759;
        v460 = v800;
        sub_22D2BC1A0();
        uint64_t v244 = v786;
        v800 = v460;
        if (!v460)
        {
          uint64_t v461 = v703;
          sub_22D018574(v311, v703, &qword_26853DC58, type metadata accessor for PBAllClinicalRecords);
          if ((*v623)(v461, 1, v459) == 1)
          {
            sub_22D018504(v461, &qword_26853DC58, type metadata accessor for PBAllClinicalRecords);
          }
          else
          {
            uint64_t v462 = v461;
            uint64_t v463 = v661;
            sub_22D01849C(v462, v661, type metadata accessor for PBAllClinicalRecords);
            uint64_t v464 = v463;
            uint64_t v465 = v781;
            sub_22D01849C(v464, v781, type metadata accessor for PBAllClinicalRecords);
            uint64_t v466 = v792;
            swift_storeEnumTagMultiPayload();
            (*v780)(v465, 0, 1, v466);
            uint64_t v467 = v465;
            uint64_t v468 = v782;
            sub_22D018574(v467, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v469 = v791;
            swift_beginAccess();
            sub_22D0120B0(v468, v469, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          uint64_t v243 = v785;
          v246 = v787;
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v458;
          uint64_t v247 = (uint64_t)v783;
          goto LABEL_9;
        }
        v607 = &qword_26853DC58;
        v608 = type metadata accessor for PBAllClinicalRecords;
        return sub_22D018504(v311, v607, v608);
      case 13:
        v274 = *v745;
        (*v745)(v770, 1, 1, v760);
        v275 = v241;
        uint64_t v276 = v792;
        uint64_t v277 = v721;
        sub_22D012010(v791, v721, v275, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v278 = v276;
        if ((*v784)(v277, 1, v276) == 1)
        {
          sub_22D018504(v277, v275, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v344 = v277;
          uint64_t v345 = v689;
          sub_22D01849C(v344, v689, type metadata accessor for PBTypedData.OneOf_Raw);
          v346 = v800;
          sub_22D2BC090();
          v800 = v346;
          if (v346)
          {
            sub_22D010254(v345, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC50;
            v612 = type metadata accessor for PBECGs;
            v613 = &v799;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v347 = v675;
          sub_22D01849C(v345, v675, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 5)
          {
            uint64_t v348 = v770;
            sub_22D018504(v770, &qword_26853DC50, type metadata accessor for PBECGs);
            uint64_t v349 = v347;
            uint64_t v350 = v645;
            sub_22D01849C(v349, v645, type metadata accessor for PBECGs);
            sub_22D01849C(v350, v348, type metadata accessor for PBECGs);
            v274(v348, 0, 1, v760);
          }
          else
          {
            sub_22D010254(v347, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        v241 = v275;
        sub_22D012384(&qword_26853DBC8, (void (*)(uint64_t))type metadata accessor for PBECGs);
        uint64_t v470 = v770;
        uint64_t v471 = v760;
        v472 = v800;
        sub_22D2BC1A0();
        v800 = v472;
        if (v472)
        {
          v609 = &qword_26853DC50;
          v610 = type metadata accessor for PBECGs;
          return sub_22D018504(v470, v609, v610);
        }
        uint64_t v473 = v704;
        sub_22D018574(v470, v704, &qword_26853DC50, type metadata accessor for PBECGs);
        if ((*v624)(v473, 1, v471) == 1)
        {
          sub_22D018504(v473, &qword_26853DC50, type metadata accessor for PBECGs);
        }
        else
        {
          uint64_t v474 = v473;
          uint64_t v475 = v662;
          sub_22D01849C(v474, v662, type metadata accessor for PBECGs);
          uint64_t v476 = v475;
          uint64_t v477 = v781;
          sub_22D01849C(v476, v781, type metadata accessor for PBECGs);
          swift_storeEnumTagMultiPayload();
          (*v780)(v477, 0, 1, v278);
          uint64_t v478 = v477;
          uint64_t v479 = v782;
          sub_22D018574(v478, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v480 = v791;
          swift_beginAccess();
          sub_22D0120B0(v479, v480, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
        }
        v246 = v787;
        uint64_t v247 = (uint64_t)v783;
        uint64_t v243 = v785;
        goto LABEL_204;
      case 14:
        uint64_t v279 = v244;
        v280 = *v746;
        (*v746)(v771, 1, 1, v733);
        v281 = v241;
        uint64_t v282 = v722;
        sub_22D012010(v791, v722, v281, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v282, 1, v792) == 1)
        {
          sub_22D018504(v282, v281, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v351 = v282;
          uint64_t v352 = v690;
          sub_22D01849C(v351, v690, type metadata accessor for PBTypedData.OneOf_Raw);
          v353 = v800;
          sub_22D2BC090();
          v800 = v353;
          if (v353)
          {
            sub_22D010254(v352, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC48;
            v612 = type metadata accessor for PBCycleTracking;
            v613 = (uint64_t *)&v800;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v354 = v676;
          sub_22D01849C(v352, v676, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 6)
          {
            uint64_t v355 = v771;
            sub_22D018504(v771, &qword_26853DC48, type metadata accessor for PBCycleTracking);
            uint64_t v356 = v354;
            uint64_t v357 = v646;
            sub_22D01849C(v356, v646, type metadata accessor for PBCycleTracking);
            sub_22D01849C(v357, v355, type metadata accessor for PBCycleTracking);
            uint64_t v358 = v733;
            v280(v355, 0, 1, v733);
LABEL_132:
            sub_22D012384(&qword_26853DBC0, (void (*)(uint64_t))type metadata accessor for PBCycleTracking);
            uint64_t v423 = v771;
            v481 = v800;
            sub_22D2BC1A0();
            v800 = v481;
            if (!v481)
            {
              uint64_t v482 = v279;
              uint64_t v483 = v705;
              sub_22D018574(v423, v705, &qword_26853DC48, type metadata accessor for PBCycleTracking);
              if ((*v625)(v483, 1, v358) == 1)
              {
                sub_22D018504(v483, &qword_26853DC48, type metadata accessor for PBCycleTracking);
                v241 = &qword_26853D9D8;
              }
              else
              {
                uint64_t v484 = v483;
                uint64_t v485 = v663;
                sub_22D01849C(v484, v663, type metadata accessor for PBCycleTracking);
                uint64_t v486 = v485;
                uint64_t v487 = v781;
                sub_22D01849C(v486, v781, type metadata accessor for PBCycleTracking);
                uint64_t v488 = v792;
                swift_storeEnumTagMultiPayload();
                (*v780)(v487, 0, 1, v488);
                uint64_t v489 = v487;
                uint64_t v490 = v782;
                v241 = &qword_26853D9D8;
                sub_22D018574(v489, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
                uint64_t v491 = v791;
                swift_beginAccess();
                sub_22D0120B0(v490, v491, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
                swift_endAccess();
              }
              uint64_t v245 = (uint64_t)v788;
              uint64_t v242 = v789;
              v246 = v787;
              uint64_t v244 = v482;
              uint64_t v243 = v785;
              goto LABEL_9;
            }
            v601 = &qword_26853DC48;
            v602 = type metadata accessor for PBCycleTracking;
            return sub_22D018504(v423, v601, v602);
          }
          sub_22D010254(v354, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        uint64_t v358 = v733;
        goto LABEL_132;
      case 15:
        v283 = v246;
        v284 = *v747;
        (*v747)(v772, 1, 1, v243);
        uint64_t v285 = v723;
        sub_22D012010(v791, v723, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v285, 1, v792) == 1)
        {
          sub_22D018504(v285, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v359 = v285;
          uint64_t v360 = v691;
          sub_22D01849C(v359, v691, type metadata accessor for PBTypedData.OneOf_Raw);
          v361 = v800;
          sub_22D2BC090();
          v800 = v361;
          if (v361)
          {
            sub_22D010254(v360, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC40;
            v612 = type metadata accessor for PBECGMeasurement;
            v613 = &v801;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v362 = v677;
          sub_22D01849C(v360, v677, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 7)
          {
            uint64_t v363 = v772;
            sub_22D018504(v772, &qword_26853DC40, type metadata accessor for PBECGMeasurement);
            uint64_t v364 = v362;
            uint64_t v365 = v647;
            sub_22D01849C(v364, v647, type metadata accessor for PBECGMeasurement);
            sub_22D01849C(v365, v363, type metadata accessor for PBECGMeasurement);
            v284(v363, 0, 1, v243);
          }
          else
          {
            sub_22D010254(v362, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        v246 = v283;
        sub_22D012384(&qword_26853DBB8, (void (*)(uint64_t))type metadata accessor for PBECGMeasurement);
        uint64_t v300 = v772;
        v492 = v800;
        sub_22D2BC1A0();
        v800 = v492;
        if (!v492)
        {
          uint64_t v493 = v706;
          sub_22D018574(v300, v706, &qword_26853DC40, type metadata accessor for PBECGMeasurement);
          if ((*v626)(v493, 1, v243) == 1)
          {
            sub_22D018504(v493, &qword_26853DC40, type metadata accessor for PBECGMeasurement);
          }
          else
          {
            uint64_t v494 = v493;
            uint64_t v495 = v664;
            sub_22D01849C(v494, v664, type metadata accessor for PBECGMeasurement);
            uint64_t v496 = v495;
            uint64_t v497 = v781;
            sub_22D01849C(v496, v781, type metadata accessor for PBECGMeasurement);
            uint64_t v498 = v792;
            swift_storeEnumTagMultiPayload();
            (*v780)(v497, 0, 1, v498);
            uint64_t v499 = v497;
            uint64_t v500 = v782;
            sub_22D018574(v499, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v501 = v791;
            swift_beginAccess();
            sub_22D0120B0(v500, v501, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          uint64_t v244 = v786;
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v789;
          goto LABEL_9;
        }
        v603 = &qword_26853DC40;
        v604 = type metadata accessor for PBECGMeasurement;
        return sub_22D018504(v300, v603, v604);
      case 16:
        v286 = *v748;
        uint64_t v287 = v732;
        (*v748)(v773, 1, 1, v732);
        uint64_t v288 = v724;
        sub_22D012010(v791, v724, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v288, 1, v792) == 1)
        {
          sub_22D018504(v288, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v366 = v288;
          uint64_t v367 = v692;
          sub_22D01849C(v366, v692, type metadata accessor for PBTypedData.OneOf_Raw);
          v368 = v800;
          sub_22D2BC090();
          v800 = v368;
          if (v368)
          {
            sub_22D010254(v367, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC38;
            v612 = type metadata accessor for PBActivitySummarySeries;
            v613 = &v802;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v369 = v678;
          sub_22D01849C(v367, v678, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 8)
          {
            uint64_t v370 = v773;
            sub_22D018504(v773, &qword_26853DC38, type metadata accessor for PBActivitySummarySeries);
            uint64_t v371 = v369;
            uint64_t v372 = v648;
            sub_22D01849C(v371, v648, type metadata accessor for PBActivitySummarySeries);
            sub_22D01849C(v372, v370, type metadata accessor for PBActivitySummarySeries);
            v286(v370, 0, 1, v287);
          }
          else
          {
            sub_22D010254(v369, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DBB0, (void (*)(uint64_t))type metadata accessor for PBActivitySummarySeries);
        uint64_t v446 = v773;
        v502 = v800;
        sub_22D2BC1A0();
        v800 = v502;
        if (v502)
        {
          v605 = &qword_26853DC38;
          v606 = type metadata accessor for PBActivitySummarySeries;
          return sub_22D018504(v446, v605, v606);
        }
        uint64_t v503 = v707;
        sub_22D018574(v446, v707, &qword_26853DC38, type metadata accessor for PBActivitySummarySeries);
        if ((*v627)(v503, 1, v287) == 1)
        {
          sub_22D018504(v503, &qword_26853DC38, type metadata accessor for PBActivitySummarySeries);
        }
        else
        {
          uint64_t v504 = v503;
          uint64_t v505 = v665;
          sub_22D01849C(v504, v665, type metadata accessor for PBActivitySummarySeries);
          uint64_t v506 = v505;
          uint64_t v507 = v781;
          sub_22D01849C(v506, v781, type metadata accessor for PBActivitySummarySeries);
          uint64_t v508 = v792;
          swift_storeEnumTagMultiPayload();
          (*v780)(v507, 0, 1, v508);
          uint64_t v509 = v507;
          uint64_t v510 = v782;
          sub_22D018574(v509, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v511 = v791;
          swift_beginAccess();
          sub_22D0120B0(v510, v511, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
        }
        uint64_t v243 = v785;
        uint64_t v247 = (uint64_t)v783;
LABEL_6:
        uint64_t v244 = v786;
        goto LABEL_7;
      case 17:
        v289 = *v749;
        (*v749)(v774, 1, 1, v761);
        uint64_t v290 = v725;
        sub_22D012010(v791, v725, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v290, 1, v792) == 1)
        {
          sub_22D018504(v290, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v373 = v290;
          uint64_t v374 = v693;
          sub_22D01849C(v373, v693, type metadata accessor for PBTypedData.OneOf_Raw);
          v375 = v800;
          sub_22D2BC090();
          v800 = v375;
          if (v375)
          {
            sub_22D010254(v374, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC30;
            v612 = type metadata accessor for PBPatientMeta;
            v613 = &v803;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v376 = v679;
          sub_22D01849C(v374, v679, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 9)
          {
            uint64_t v377 = v774;
            sub_22D018504(v774, &qword_26853DC30, type metadata accessor for PBPatientMeta);
            uint64_t v378 = v376;
            uint64_t v379 = v649;
            sub_22D01849C(v378, v649, type metadata accessor for PBPatientMeta);
            sub_22D01849C(v379, v377, type metadata accessor for PBPatientMeta);
            v289(v377, 0, 1, v761);
          }
          else
          {
            sub_22D010254(v376, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        v246 = v787;
        uint64_t v245 = (uint64_t)v788;
        sub_22D012384(&qword_26853DBA8, (void (*)(uint64_t))type metadata accessor for PBPatientMeta);
        uint64_t v311 = v774;
        uint64_t v512 = v761;
        v513 = v800;
        sub_22D2BC1A0();
        uint64_t v244 = v786;
        v800 = v513;
        if (v513)
        {
          v607 = &qword_26853DC30;
          v608 = type metadata accessor for PBPatientMeta;
          return sub_22D018504(v311, v607, v608);
        }
        uint64_t v514 = v708;
        sub_22D018574(v311, v708, &qword_26853DC30, type metadata accessor for PBPatientMeta);
        if ((*v628)(v514, 1, v512) == 1)
        {
          sub_22D018504(v514, &qword_26853DC30, type metadata accessor for PBPatientMeta);
        }
        else
        {
          uint64_t v515 = v514;
          uint64_t v516 = v666;
          sub_22D01849C(v515, v666, type metadata accessor for PBPatientMeta);
          uint64_t v517 = v516;
          uint64_t v518 = v781;
          sub_22D01849C(v517, v781, type metadata accessor for PBPatientMeta);
          uint64_t v519 = v792;
          swift_storeEnumTagMultiPayload();
          (*v780)(v518, 0, 1, v519);
          uint64_t v520 = v518;
          uint64_t v521 = v782;
          sub_22D018574(v520, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v522 = v791;
          swift_beginAccess();
          sub_22D0120B0(v521, v522, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
        }
        uint64_t v243 = v785;
        goto LABEL_155;
      case 18:
        v291 = *v750;
        (*v750)(v775, 1, 1, v762);
        v292 = v241;
        uint64_t v293 = v726;
        sub_22D012010(v791, v726, v292, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v293, 1, v792) == 1)
        {
          sub_22D018504(v293, v292, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v380 = v293;
          uint64_t v381 = v694;
          sub_22D01849C(v380, v694, type metadata accessor for PBTypedData.OneOf_Raw);
          v382 = v800;
          sub_22D2BC090();
          v800 = v382;
          if (v382)
          {
            sub_22D010254(v381, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC28;
            v612 = type metadata accessor for PBSleepSummary;
            v613 = &v804;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v383 = v680;
          sub_22D01849C(v381, v680, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 10)
          {
            uint64_t v384 = v775;
            sub_22D018504(v775, &qword_26853DC28, type metadata accessor for PBSleepSummary);
            uint64_t v385 = v383;
            uint64_t v386 = v650;
            sub_22D01849C(v385, v650, type metadata accessor for PBSleepSummary);
            sub_22D01849C(v386, v384, type metadata accessor for PBSleepSummary);
            v291(v384, 0, 1, v762);
          }
          else
          {
            sub_22D010254(v383, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DBA0, (void (*)(uint64_t))type metadata accessor for PBSleepSummary);
        uint64_t v423 = v775;
        uint64_t v523 = v762;
        v524 = v800;
        sub_22D2BC1A0();
        uint64_t v244 = v786;
        v800 = v524;
        if (!v524)
        {
          uint64_t v525 = v423;
          uint64_t v427 = v709;
          v428 = &qword_26853DC28;
          sub_22D018574(v525, v709, &qword_26853DC28, type metadata accessor for PBSleepSummary);
          if ((*v629)(v427, 1, v523) == 1)
          {
            v429 = type metadata accessor for PBSleepSummary;
            goto LABEL_160;
          }
          uint64_t v526 = v427;
          uint64_t v527 = v667;
          sub_22D01849C(v526, v667, type metadata accessor for PBSleepSummary);
          uint64_t v528 = v527;
          uint64_t v433 = v781;
          sub_22D01849C(v528, v781, type metadata accessor for PBSleepSummary);
          uint64_t v434 = v792;
LABEL_162:
          swift_storeEnumTagMultiPayload();
          (*v780)(v433, 0, 1, v434);
          uint64_t v529 = v433;
          uint64_t v530 = v782;
          v241 = &qword_26853D9D8;
          sub_22D018574(v529, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v531 = v791;
          swift_beginAccess();
          sub_22D0120B0(v530, v531, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
LABEL_7:
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v789;
LABEL_8:
          v246 = v787;
          goto LABEL_9;
        }
        v601 = &qword_26853DC28;
        v602 = type metadata accessor for PBSleepSummary;
        return sub_22D018504(v423, v601, v602);
      case 19:
        v294 = *v751;
        (*v751)(v776, 1, 1, v242);
        uint64_t v295 = v727;
        sub_22D012010(v791, v727, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v295, 1, v792) == 1)
        {
          sub_22D018504(v295, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v387 = v295;
          uint64_t v388 = v695;
          sub_22D01849C(v387, v695, type metadata accessor for PBTypedData.OneOf_Raw);
          v389 = v800;
          sub_22D2BC090();
          v800 = v389;
          if (v389)
          {
            sub_22D010254(v388, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC20;
            v612 = type metadata accessor for PBSleepSeries;
            v613 = &v805;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v390 = v681;
          sub_22D01849C(v388, v681, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 11)
          {
            uint64_t v391 = v776;
            sub_22D018504(v776, &qword_26853DC20, type metadata accessor for PBSleepSeries);
            uint64_t v392 = v390;
            uint64_t v393 = v651;
            sub_22D01849C(v392, v651, type metadata accessor for PBSleepSeries);
            sub_22D01849C(v393, v391, type metadata accessor for PBSleepSeries);
            v294(v391, 0, 1, v789);
          }
          else
          {
            sub_22D010254(v390, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DB98, (void (*)(uint64_t))type metadata accessor for PBSleepSeries);
        uint64_t v470 = v776;
        uint64_t v532 = v789;
        v533 = v800;
        sub_22D2BC1A0();
        uint64_t v243 = v785;
        v800 = v533;
        if (v533)
        {
          v609 = &qword_26853DC20;
          v610 = type metadata accessor for PBSleepSeries;
          return sub_22D018504(v470, v609, v610);
        }
        uint64_t v534 = v710;
        sub_22D018574(v470, v710, &qword_26853DC20, type metadata accessor for PBSleepSeries);
        if ((*v630)(v534, 1, v532) == 1)
        {
          sub_22D018504(v534, &qword_26853DC20, type metadata accessor for PBSleepSeries);
LABEL_203:
          v246 = v787;
          uint64_t v247 = (uint64_t)v783;
LABEL_204:
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v789;
          goto LABEL_9;
        }
        uint64_t v535 = v534;
        uint64_t v536 = v668;
        sub_22D01849C(v535, v668, type metadata accessor for PBSleepSeries);
        uint64_t v537 = v536;
        uint64_t v538 = v781;
        sub_22D01849C(v537, v781, type metadata accessor for PBSleepSeries);
        uint64_t v539 = v792;
        swift_storeEnumTagMultiPayload();
        (*v780)(v538, 0, 1, v539);
        uint64_t v540 = v538;
        uint64_t v541 = v782;
        uint64_t v542 = v782;
        goto LABEL_202;
      case 20:
        v296 = *v752;
        (*v752)(v777, 1, 1, v763);
        uint64_t v297 = v728;
        sub_22D012010(v791, v728, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v297, 1, v792) == 1)
        {
          sub_22D018504(v297, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v394 = v297;
          uint64_t v395 = v696;
          sub_22D01849C(v394, v696, type metadata accessor for PBTypedData.OneOf_Raw);
          v396 = v800;
          sub_22D2BC090();
          v800 = v396;
          if (v396)
          {
            sub_22D010254(v395, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC18;
            v612 = type metadata accessor for PBHistogramSeries;
            v613 = &v806;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v397 = v682;
          sub_22D01849C(v395, v682, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 12)
          {
            uint64_t v398 = v777;
            sub_22D018504(v777, &qword_26853DC18, type metadata accessor for PBHistogramSeries);
            uint64_t v399 = v397;
            uint64_t v400 = v652;
            sub_22D01849C(v399, v652, type metadata accessor for PBHistogramSeries);
            sub_22D01849C(v400, v398, type metadata accessor for PBHistogramSeries);
            v296(v398, 0, 1, v763);
          }
          else
          {
            sub_22D010254(v397, type metadata accessor for PBTypedData.OneOf_Raw);
          }
        }
        sub_22D012384(&qword_26853DB90, (void (*)(uint64_t))type metadata accessor for PBHistogramSeries);
        uint64_t v300 = v777;
        uint64_t v543 = v763;
        v544 = v800;
        sub_22D2BC1A0();
        v800 = v544;
        if (!v544)
        {
          uint64_t v545 = v711;
          sub_22D018574(v300, v711, &qword_26853DC18, type metadata accessor for PBHistogramSeries);
          if ((*v631)(v545, 1, v543) == 1)
          {
            sub_22D018504(v545, &qword_26853DC18, type metadata accessor for PBHistogramSeries);
          }
          else
          {
            uint64_t v546 = v545;
            uint64_t v547 = v669;
            sub_22D01849C(v546, v669, type metadata accessor for PBHistogramSeries);
            uint64_t v548 = v547;
            uint64_t v549 = v781;
            sub_22D01849C(v548, v781, type metadata accessor for PBHistogramSeries);
            uint64_t v550 = v792;
            swift_storeEnumTagMultiPayload();
            (*v780)(v549, 0, 1, v550);
            uint64_t v551 = v549;
            uint64_t v552 = v782;
            sub_22D018574(v551, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v553 = v791;
            swift_beginAccess();
            sub_22D0120B0(v552, v553, v241, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
          }
          uint64_t v245 = (uint64_t)v788;
          uint64_t v242 = v789;
          uint64_t v244 = v786;
          v246 = v787;
          goto LABEL_9;
        }
        v603 = &qword_26853DC18;
        v604 = type metadata accessor for PBHistogramSeries;
        return sub_22D018504(v300, v603, v604);
      case 21:
        uint64_t v298 = (uint64_t)v246;
        v299 = *v753;
        (*v753)(v735, 1, 1, v764);
        sub_22D012010(v791, v298, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v298, 1, v792) == 1)
        {
          sub_22D018504(v298, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v300 = v735;
        }
        else
        {
          sub_22D01849C(v298, v247, type metadata accessor for PBTypedData.OneOf_Raw);
          v401 = v800;
          sub_22D2BC090();
          v800 = v401;
          if (v401)
          {
            sub_22D010254(v247, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC10;
            v612 = type metadata accessor for PBMedicationTrackings;
            v613 = &v767;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v402 = v683;
          sub_22D01849C(v247, v683, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 13)
          {
            uint64_t v300 = v735;
            sub_22D018504(v735, &qword_26853DC10, type metadata accessor for PBMedicationTrackings);
            uint64_t v403 = v402;
            uint64_t v404 = v653;
            sub_22D01849C(v403, v653, type metadata accessor for PBMedicationTrackings);
            sub_22D01849C(v404, v300, type metadata accessor for PBMedicationTrackings);
            v299(v300, 0, 1, v764);
          }
          else
          {
            sub_22D010254(v402, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v300 = v735;
          }
        }
        uint64_t v243 = v785;
        sub_22D012384(&qword_26853DB88, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackings);
        uint64_t v554 = v764;
        v555 = v800;
        sub_22D2BC1A0();
        v800 = v555;
        if (v555)
        {
          v603 = &qword_26853DC10;
          v604 = type metadata accessor for PBMedicationTrackings;
          return sub_22D018504(v300, v603, v604);
        }
        uint64_t v556 = v712;
        sub_22D018574(v300, v712, &qword_26853DC10, type metadata accessor for PBMedicationTrackings);
        if ((*v632)(v556, 1, v554) == 1)
        {
          sub_22D018504(v556, &qword_26853DC10, type metadata accessor for PBMedicationTrackings);
        }
        else
        {
          uint64_t v557 = v556;
          uint64_t v558 = v670;
          sub_22D01849C(v557, v670, type metadata accessor for PBMedicationTrackings);
          uint64_t v559 = v558;
          uint64_t v560 = v781;
          sub_22D01849C(v559, v781, type metadata accessor for PBMedicationTrackings);
          uint64_t v561 = v792;
          swift_storeEnumTagMultiPayload();
          (*v780)(v560, 0, 1, v561);
          uint64_t v562 = v560;
          uint64_t v563 = v782;
          sub_22D018574(v562, v782, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v564 = v791;
          swift_beginAccess();
          sub_22D0120B0(v563, v564, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          swift_endAccess();
        }
        goto LABEL_6;
      case 22:
        v301 = *v754;
        (*v754)(v778, 1, 1, v734);
        uint64_t v302 = v792;
        uint64_t v303 = v729;
        sub_22D012010(v791, v729, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v303, 1, v302) == 1)
        {
          sub_22D018504(v303, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v405 = v303;
          uint64_t v406 = v697;
          sub_22D01849C(v405, v697, type metadata accessor for PBTypedData.OneOf_Raw);
          v407 = v800;
          sub_22D2BC090();
          v800 = v407;
          if (v407)
          {
            sub_22D010254(v406, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC08;
            v612 = type metadata accessor for PBMedicationTrackingDoseEvents;
            v613 = &v807;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v408 = v406;
          uint64_t v409 = v684;
          sub_22D01849C(v408, v684, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 14)
          {
            uint64_t v410 = v778;
            sub_22D018504(v778, &qword_26853DC08, type metadata accessor for PBMedicationTrackingDoseEvents);
            uint64_t v411 = v409;
            uint64_t v412 = v654;
            sub_22D01849C(v411, v654, type metadata accessor for PBMedicationTrackingDoseEvents);
            sub_22D01849C(v412, v410, type metadata accessor for PBMedicationTrackingDoseEvents);
            uint64_t v413 = v734;
            v301(v410, 0, 1, v734);
LABEL_180:
            sub_22D012384(&qword_26853DB80, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingDoseEvents);
            uint64_t v470 = v778;
            v565 = v800;
            sub_22D2BC1A0();
            v800 = v565;
            if (v565)
            {
              v609 = &qword_26853DC08;
              v610 = type metadata accessor for PBMedicationTrackingDoseEvents;
              return sub_22D018504(v470, v609, v610);
            }
            uint64_t v566 = v713;
            sub_22D018574(v470, v713, &qword_26853DC08, type metadata accessor for PBMedicationTrackingDoseEvents);
            if ((*v633)(v566, 1, v413) == 1)
            {
              sub_22D018504(v566, &qword_26853DC08, type metadata accessor for PBMedicationTrackingDoseEvents);
              uint64_t v242 = v789;
              uint64_t v243 = v785;
              v246 = v787;
              uint64_t v247 = (uint64_t)v783;
              v241 = &qword_26853D9D8;
            }
            else
            {
              uint64_t v567 = v566;
              uint64_t v568 = v671;
              sub_22D01849C(v567, v671, type metadata accessor for PBMedicationTrackingDoseEvents);
              uint64_t v569 = v568;
              uint64_t v570 = v781;
              sub_22D01849C(v569, v781, type metadata accessor for PBMedicationTrackingDoseEvents);
              uint64_t v571 = v792;
              swift_storeEnumTagMultiPayload();
              (*v780)(v570, 0, 1, v571);
              uint64_t v572 = v570;
              uint64_t v573 = v782;
              v241 = &qword_26853D9D8;
              sub_22D018574(v572, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
              uint64_t v574 = v791;
              swift_beginAccess();
              sub_22D0120B0(v573, v574, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
              swift_endAccess();
              uint64_t v242 = v789;
              uint64_t v243 = v785;
              v246 = v787;
              uint64_t v247 = (uint64_t)v783;
            }
            uint64_t v244 = v786;
            uint64_t v245 = (uint64_t)v788;
            goto LABEL_9;
          }
          sub_22D010254(v409, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        uint64_t v413 = v734;
        goto LABEL_180;
      case 23:
        v304 = *v738;
        (*v738)(v779, 1, 1, v244);
        uint64_t v305 = v792;
        uint64_t v306 = v730;
        sub_22D012010(v791, v730, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v306, 1, v305) == 1)
        {
          sub_22D018504(v306, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        else
        {
          uint64_t v414 = v698;
          sub_22D01849C(v306, v698, type metadata accessor for PBTypedData.OneOf_Raw);
          v415 = v800;
          sub_22D2BC090();
          v800 = v415;
          if (v415)
          {
            sub_22D010254(v414, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DC00;
            v612 = type metadata accessor for PBMedicationTrackingSchedules;
            v613 = &v808;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v416 = v685;
          sub_22D01849C(v414, v685, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 15)
          {
            uint64_t v417 = v779;
            sub_22D018504(v779, &qword_26853DC00, type metadata accessor for PBMedicationTrackingSchedules);
            uint64_t v418 = v655;
            sub_22D01849C(v416, v655, type metadata accessor for PBMedicationTrackingSchedules);
            uint64_t v244 = v786;
            uint64_t v245 = (uint64_t)v788;
            sub_22D01849C(v418, v417, type metadata accessor for PBMedicationTrackingSchedules);
            v304(v417, 0, 1, v244);
            v246 = v787;
LABEL_187:
            sub_22D012384(&qword_26853DB78, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingSchedules);
            uint64_t v470 = v779;
            v575 = v800;
            sub_22D2BC1A0();
            v800 = v575;
            if (v575)
            {
              v609 = &qword_26853DC00;
              v610 = type metadata accessor for PBMedicationTrackingSchedules;
              return sub_22D018504(v470, v609, v610);
            }
            sub_22D018574(v470, v245, &qword_26853DC00, type metadata accessor for PBMedicationTrackingSchedules);
            if ((*v634)(v245, 1, v244) == 1)
            {
              sub_22D018504(v245, &qword_26853DC00, type metadata accessor for PBMedicationTrackingSchedules);
              v241 = &qword_26853D9D8;
            }
            else
            {
              uint64_t v576 = v672;
              sub_22D01849C(v245, v672, type metadata accessor for PBMedicationTrackingSchedules);
              uint64_t v577 = v576;
              uint64_t v578 = v781;
              sub_22D01849C(v577, v781, type metadata accessor for PBMedicationTrackingSchedules);
              uint64_t v579 = v792;
              swift_storeEnumTagMultiPayload();
              (*v780)(v578, 0, 1, v579);
              uint64_t v580 = v578;
              uint64_t v581 = v782;
              v241 = &qword_26853D9D8;
              sub_22D018574(v580, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
              uint64_t v582 = v791;
              swift_beginAccess();
              sub_22D0120B0(v581, v582, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
              swift_endAccess();
            }
            uint64_t v247 = (uint64_t)v783;
            uint64_t v243 = v785;
            uint64_t v242 = v789;
            goto LABEL_9;
          }
          sub_22D010254(v416, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        v246 = v787;
        uint64_t v245 = (uint64_t)v788;
        goto LABEL_187;
      case 24:
        v307 = *v737;
        (*v737)(v736, 1, 1, v765);
        uint64_t v308 = v731;
        sub_22D012010(v791, v731, v241, type metadata accessor for PBTypedData.OneOf_Raw);
        if ((*v784)(v308, 1, v792) == 1)
        {
          uint64_t v309 = (uint64_t)v715;
          uint64_t v310 = (uint64_t)v714;
          sub_22D018504(v308, v241, type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v311 = v736;
        }
        else
        {
          uint64_t v419 = v699;
          sub_22D01849C(v308, v699, type metadata accessor for PBTypedData.OneOf_Raw);
          v420 = v800;
          sub_22D2BC090();
          v800 = v420;
          if (v420)
          {
            sub_22D010254(v419, type metadata accessor for PBTypedData.OneOf_Raw);
            v611 = &qword_26853DBF8;
            v612 = type metadata accessor for PBActiveMedications;
            v613 = &v768;
            return sub_22D018504(*(v613 - 32), v611, v612);
          }
          uint64_t v309 = (uint64_t)v715;
          uint64_t v421 = v686;
          sub_22D01849C(v419, v686, type metadata accessor for PBTypedData.OneOf_Raw);
          if (swift_getEnumCaseMultiPayload() == 16)
          {
            uint64_t v310 = (uint64_t)v714;
            uint64_t v311 = v736;
            sub_22D018504(v736, &qword_26853DBF8, type metadata accessor for PBActiveMedications);
            uint64_t v422 = v656;
            sub_22D01849C(v421, v656, type metadata accessor for PBActiveMedications);
            sub_22D01849C(v422, v311, type metadata accessor for PBActiveMedications);
            v307(v311, 0, 1, v765);
          }
          else
          {
            uint64_t v310 = (uint64_t)v714;
            sub_22D010254(v421, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v311 = v736;
          }
        }
        sub_22D012384(&qword_26853DB70, (void (*)(uint64_t))type metadata accessor for PBActiveMedications);
        uint64_t v583 = v765;
        v584 = v800;
        sub_22D2BC1A0();
        v800 = v584;
        if (!v584)
        {
          sub_22D018574(v311, v309, &qword_26853DBF8, type metadata accessor for PBActiveMedications);
          if ((*v635)(v309, 1, v583) == 1)
          {
            sub_22D018504(v309, &qword_26853DBF8, type metadata accessor for PBActiveMedications);
            uint64_t v243 = v785;
            uint64_t v244 = v786;
            uint64_t v245 = (uint64_t)v788;
            uint64_t v242 = v789;
            v246 = v787;
            uint64_t v247 = (uint64_t)v783;
            v241 = &qword_26853D9D8;
          }
          else
          {
            sub_22D01849C(v309, v310, type metadata accessor for PBActiveMedications);
            uint64_t v585 = v781;
            sub_22D01849C(v310, v781, type metadata accessor for PBActiveMedications);
            uint64_t v586 = v792;
            swift_storeEnumTagMultiPayload();
            (*v780)(v585, 0, 1, v586);
            uint64_t v587 = v585;
            uint64_t v588 = v782;
            v241 = &qword_26853D9D8;
            sub_22D018574(v587, v782, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
            uint64_t v589 = v791;
            swift_beginAccess();
            sub_22D0120B0(v588, v589, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
            swift_endAccess();
            uint64_t v243 = v785;
            uint64_t v244 = v786;
            uint64_t v245 = (uint64_t)v788;
            uint64_t v242 = v789;
            v246 = v787;
            uint64_t v247 = (uint64_t)v783;
          }
          goto LABEL_9;
        }
        v607 = &qword_26853DBF8;
        v608 = type metadata accessor for PBActiveMedications;
        return sub_22D018504(v311, v607, v608);
      default:
        goto LABEL_9;
    }
  }
}

uint64_t PBTypedData.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22D00E32C(a1, a2, a3, (void (*)(void))type metadata accessor for PBTypedData, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_22D00AF18);
}

uint64_t sub_22D00AF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v83 = a3;
  uint64_t v88 = a4;
  uint64_t v85 = a2;
  uint64_t v80 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x270FA5388](v80);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x270FA5388](v78);
  uint64_t v79 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x270FA5388](v76);
  uint64_t v77 = (uint64_t)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x270FA5388](v74);
  uint64_t v75 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x270FA5388](v72);
  uint64_t v73 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x270FA5388](v70);
  uint64_t v71 = (uint64_t)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v68 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x270FA5388](v68);
  uint64_t v69 = (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x270FA5388](v66);
  uint64_t v67 = (uint64_t)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x270FA5388](v64);
  uint64_t v65 = (uint64_t)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x270FA5388](v62);
  uint64_t v63 = (uint64_t)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x270FA5388](v60);
  uint64_t v61 = (uint64_t)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for PBECGs(0);
  MEMORY[0x270FA5388](v58);
  uint64_t v59 = (uint64_t)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x270FA5388](v56);
  uint64_t v57 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x270FA5388](v54);
  uint64_t v55 = (uint64_t)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for PBWorkout(0);
  MEMORY[0x270FA5388](v52);
  uint64_t v53 = (uint64_t)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x270FA5388](v50);
  uint64_t v51 = (uint64_t)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x270FA5388](v48);
  uint64_t v49 = (uint64_t)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v82 = (char *)&v48 - v25;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v23);
  MEMORY[0x270FA5388](v26 - 8);
  uint64_t v28 = (char *)&v48 - v27;
  uint64_t v29 = type metadata accessor for PBDateRange(0);
  uint64_t v30 = *(void *)(v29 - 8);
  MEMORY[0x270FA5388](v29);
  uint64_t v32 = (char *)&v48 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t v33 = *(void *)(a1 + 16);
  uint64_t v34 = a1;
  char v35 = *(unsigned char *)(a1 + 24);
  uint64_t v86 = v33;
  char v87 = v35;
  if (PBDataType.rawValue.getter())
  {
    uint64_t v86 = v33;
    char v87 = v35;
    sub_22D0183D0();
    uint64_t v36 = v84;
    uint64_t result = sub_22D2BC240();
    if (v36) {
      return result;
    }
    uint64_t v81 = v6;
    uint64_t v38 = 0;
  }
  else
  {
    uint64_t v81 = v6;
    uint64_t v38 = v84;
  }
  uint64_t v39 = v34
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D012010(v39, (uint64_t)v28, &qword_26853D7B0, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_22D018504((uint64_t)v28, &qword_26853D7B0, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D01849C((uint64_t)v28, (uint64_t)v32, type metadata accessor for PBDateRange);
    sub_22D012384(&qword_26853DB58, (void (*)(uint64_t))type metadata accessor for PBDateRange);
    sub_22D2BC2E0();
    if (v38)
    {
      uint64_t v40 = type metadata accessor for PBDateRange;
      uint64_t v41 = (uint64_t)v32;
      return sub_22D010254(v41, v40);
    }
    sub_22D010254((uint64_t)v32, type metadata accessor for PBDateRange);
  }
  uint64_t v42 = (uint64_t)v81;
  uint64_t v43 = (uint64_t)v82;
  uint64_t v44 = v34
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D012010(v44, v43, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v45 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v43, 1, v45);
  if (result == 1) {
    return result;
  }
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v46 = v51;
      sub_22D01849C(v43, v51, type metadata accessor for PBCategorySeries);
      sub_22D012384(&qword_26853DBE8, (void (*)(uint64_t))type metadata accessor for PBCategorySeries);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBCategorySeries;
      goto LABEL_28;
    case 2u:
      uint64_t v46 = v53;
      sub_22D01849C(v43, v53, type metadata accessor for PBWorkout);
      sub_22D012384(&qword_26853DBE0, (void (*)(uint64_t))type metadata accessor for PBWorkout);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBWorkout;
      goto LABEL_28;
    case 3u:
      uint64_t v46 = v55;
      sub_22D01849C(v43, v55, type metadata accessor for PBCharacteristics);
      sub_22D012384(&qword_26853DBD8, (void (*)(uint64_t))type metadata accessor for PBCharacteristics);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBCharacteristics;
      goto LABEL_28;
    case 4u:
      uint64_t v46 = v57;
      sub_22D01849C(v43, v57, type metadata accessor for PBAllClinicalRecords);
      sub_22D012384(&qword_26853DBD0, (void (*)(uint64_t))type metadata accessor for PBAllClinicalRecords);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBAllClinicalRecords;
      goto LABEL_28;
    case 5u:
      uint64_t v46 = v59;
      sub_22D01849C(v43, v59, type metadata accessor for PBECGs);
      sub_22D012384(&qword_26853DBC8, (void (*)(uint64_t))type metadata accessor for PBECGs);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBECGs;
      goto LABEL_28;
    case 6u:
      uint64_t v46 = v61;
      sub_22D01849C(v43, v61, type metadata accessor for PBCycleTracking);
      sub_22D012384(&qword_26853DBC0, (void (*)(uint64_t))type metadata accessor for PBCycleTracking);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBCycleTracking;
      goto LABEL_28;
    case 7u:
      uint64_t v46 = v63;
      sub_22D01849C(v43, v63, type metadata accessor for PBECGMeasurement);
      sub_22D012384(&qword_26853DBB8, (void (*)(uint64_t))type metadata accessor for PBECGMeasurement);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBECGMeasurement;
      goto LABEL_28;
    case 8u:
      uint64_t v46 = v65;
      sub_22D01849C(v43, v65, type metadata accessor for PBActivitySummarySeries);
      sub_22D012384(&qword_26853DBB0, (void (*)(uint64_t))type metadata accessor for PBActivitySummarySeries);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBActivitySummarySeries;
      goto LABEL_28;
    case 9u:
      uint64_t v46 = v67;
      sub_22D01849C(v43, v67, type metadata accessor for PBPatientMeta);
      sub_22D012384(&qword_26853DBA8, (void (*)(uint64_t))type metadata accessor for PBPatientMeta);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBPatientMeta;
      goto LABEL_28;
    case 0xAu:
      uint64_t v46 = v69;
      sub_22D01849C(v43, v69, type metadata accessor for PBSleepSummary);
      sub_22D012384(&qword_26853DBA0, (void (*)(uint64_t))type metadata accessor for PBSleepSummary);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBSleepSummary;
      goto LABEL_28;
    case 0xBu:
      uint64_t v46 = v71;
      sub_22D01849C(v43, v71, type metadata accessor for PBSleepSeries);
      sub_22D012384(&qword_26853DB98, (void (*)(uint64_t))type metadata accessor for PBSleepSeries);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBSleepSeries;
      goto LABEL_28;
    case 0xCu:
      uint64_t v46 = v73;
      sub_22D01849C(v43, v73, type metadata accessor for PBHistogramSeries);
      sub_22D012384(&qword_26853DB90, (void (*)(uint64_t))type metadata accessor for PBHistogramSeries);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBHistogramSeries;
      goto LABEL_28;
    case 0xDu:
      uint64_t v46 = v75;
      sub_22D01849C(v43, v75, type metadata accessor for PBMedicationTrackings);
      sub_22D012384(&qword_26853DB88, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackings);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBMedicationTrackings;
      goto LABEL_28;
    case 0xEu:
      uint64_t v46 = v77;
      sub_22D01849C(v43, v77, type metadata accessor for PBMedicationTrackingDoseEvents);
      sub_22D012384(&qword_26853DB80, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingDoseEvents);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBMedicationTrackingDoseEvents;
      goto LABEL_28;
    case 0xFu:
      uint64_t v46 = v79;
      sub_22D01849C(v43, v79, type metadata accessor for PBMedicationTrackingSchedules);
      sub_22D012384(&qword_26853DB78, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingSchedules);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBMedicationTrackingSchedules;
      goto LABEL_28;
    case 0x10u:
      sub_22D01849C(v43, v42, type metadata accessor for PBActiveMedications);
      sub_22D012384(&qword_26853DB70, (void (*)(uint64_t))type metadata accessor for PBActiveMedications);
      sub_22D2BC2E0();
      uint64_t v40 = type metadata accessor for PBActiveMedications;
      uint64_t v41 = v42;
      return sub_22D010254(v41, v40);
    default:
      uint64_t v46 = v49;
      sub_22D01849C(v43, v49, type metadata accessor for PBTimeSeries);
      sub_22D012384(&qword_26853DBF0, (void (*)(uint64_t))type metadata accessor for PBTimeSeries);
      sub_22D2BC2E0();
      uint64_t v47 = type metadata accessor for PBTimeSeries;
LABEL_28:
      uint64_t v40 = v47;
      uint64_t v41 = v46;
      break;
  }
  return sub_22D010254(v41, v40);
}

uint64_t static PBTypedData.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_22D012130(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_22D00C3B4) & 1;
}

BOOL sub_22D00C3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v59 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  uint64_t v58 = *(void *)(v59 - 8);
  MEMORY[0x270FA5388](v59);
  uint64_t v61 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D018424(0, &qword_26853DB68, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v65 = v5;
  MEMORY[0x270FA5388](v5);
  uint64_t v60 = (uint64_t)&v55 - v6;
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v57 = (uint64_t)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v55 - v11;
  uint64_t v13 = type metadata accessor for PBDateRange(0);
  uint64_t v63 = *(void *)(v13 - 8);
  uint64_t v64 = v13;
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D018424(0, &qword_26853DB28, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v62 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v55 - v17;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v7);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v55 - v23;
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 16);
  uint64_t v26 = a1;
  LOBYTE(v7) = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  uint64_t v27 = *(void *)(a2 + 16);
  char v28 = *(unsigned char *)(a2 + 24);
  uint64_t v68 = v25;
  char v69 = (char)v7;
  uint64_t v66 = v27;
  char v67 = v28;
  uint64_t v29 = PBDataType.rawValue.getter();
  if (v29 != PBDataType.rawValue.getter()) {
    return 0;
  }
  uint64_t v55 = v15;
  uint64_t v56 = v12;
  uint64_t v30 = a2;
  uint64_t v31 = v26
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D012010(v31, (uint64_t)v24, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v32 = a2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  uint64_t v33 = (uint64_t)&v18[*(int *)(v62 + 48)];
  sub_22D012010((uint64_t)v24, (uint64_t)v18, &qword_26853D7B0, type metadata accessor for PBDateRange);
  sub_22D012010(v32, v33, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v34 = v64;
  char v35 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  uint64_t v36 = (uint64_t)v18;
  if (v35((uint64_t)v18, 1, v64) != 1)
  {
    uint64_t v41 = v26;
    sub_22D012010(v36, (uint64_t)v22, &qword_26853D7B0, type metadata accessor for PBDateRange);
    int v42 = v35(v33, 1, v34);
    uint64_t v40 = v65;
    if (v42 != 1)
    {
      uint64_t v43 = (uint64_t)v55;
      sub_22D01849C(v33, (uint64_t)v55, type metadata accessor for PBDateRange);
      uint64_t v38 = v41;
      swift_retain();
      swift_retain();
      char v44 = static PBDateRange.== infix(_:_:)(v22, v43);
      sub_22D010254(v43, type metadata accessor for PBDateRange);
      sub_22D018504((uint64_t)v24, &qword_26853D7B0, type metadata accessor for PBDateRange);
      sub_22D010254((uint64_t)v22, type metadata accessor for PBDateRange);
      uint64_t v39 = v61;
      sub_22D018504(v36, &qword_26853D7B0, type metadata accessor for PBDateRange);
      if (v44) {
        goto LABEL_10;
      }
LABEL_8:
      swift_release();
      swift_release();
      return 0;
    }
    swift_retain();
    swift_retain();
    sub_22D018504((uint64_t)v24, &qword_26853D7B0, type metadata accessor for PBDateRange);
    sub_22D010254((uint64_t)v22, type metadata accessor for PBDateRange);
LABEL_7:
    sub_22D0182A8(v36, &qword_26853DB28, &qword_26853D7B0, type metadata accessor for PBDateRange);
    goto LABEL_8;
  }
  swift_retain();
  swift_retain();
  sub_22D018504((uint64_t)v24, &qword_26853D7B0, type metadata accessor for PBDateRange);
  int v37 = v35(v33, 1, v34);
  uint64_t v38 = v26;
  uint64_t v39 = v61;
  uint64_t v40 = v65;
  if (v37 != 1) {
    goto LABEL_7;
  }
  sub_22D018504((uint64_t)v18, &qword_26853D7B0, type metadata accessor for PBDateRange);
LABEL_10:
  uint64_t v45 = v38
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  uint64_t v46 = (uint64_t)v56;
  sub_22D012010(v45, (uint64_t)v56, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v47 = v30
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  uint64_t v48 = v60;
  uint64_t v49 = v60 + *(int *)(v40 + 48);
  sub_22D012010(v46, v60, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_22D012010(v47, v49, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48);
  uint64_t v51 = v59;
  if (v50(v48, 1, v59) == 1)
  {
    swift_release();
    swift_release();
    sub_22D018504(v46, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    if (v50(v49, 1, v51) == 1)
    {
      sub_22D018504(v48, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
      return 1;
    }
    goto LABEL_15;
  }
  uint64_t v52 = v57;
  sub_22D012010(v48, v57, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  if (v50(v49, 1, v51) == 1)
  {
    swift_release();
    swift_release();
    sub_22D018504((uint64_t)v56, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    sub_22D010254(v52, type metadata accessor for PBTypedData.OneOf_Raw);
LABEL_15:
    sub_22D0182A8(v48, &qword_26853DB68, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    return 0;
  }
  sub_22D01849C(v49, (uint64_t)v39, type metadata accessor for PBTypedData.OneOf_Raw);
  char v54 = _s19HealthRecordsDaemon11PBTypedDataV9OneOf_RawO2eeoiySbAE_AEtFZ_0(v52, v39);
  swift_release();
  swift_release();
  sub_22D010254((uint64_t)v39, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_22D018504((uint64_t)v56, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_22D010254(v52, type metadata accessor for PBTypedData.OneOf_Raw);
  sub_22D018504(v48, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  return (v54 & 1) != 0;
}

uint64_t PBTypedData.hashValue.getter()
{
  return sub_22D00FDA0((void (*)(void))type metadata accessor for PBTypedData, &qword_26853DA18, (void (*)(uint64_t))type metadata accessor for PBTypedData);
}

uint64_t sub_22D00CD9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D00F670(a1, &qword_26853CCD0, &qword_26853D990, a2);
}

unint64_t sub_22D00CDC0()
{
  return 0xD000000000000024;
}

uint64_t (*sub_22D00CDE4())()
{
  return nullsub_1;
}

uint64_t sub_22D00CE04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBTypedData.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_22D00CE1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBTypedData.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_22D00CE34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D012384(&qword_26853DB10, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D00CEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CCC8, (uint64_t)qword_26853D978, a1);
}

uint64_t sub_22D00CED4(uint64_t a1)
{
  uint64_t v2 = sub_22D012384(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D00CF40()
{
  sub_22D012384(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  return sub_22D2BC200();
}

uint64_t sub_22D00CFBC(uint64_t a1, uint64_t a2)
{
  return sub_22D012130(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_22D00C3B4) & 1;
}

unint64_t static PBReference.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_22D00D01C()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853D998);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853D998);
  sub_22D0043D0(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_22D2BFF30;
  unint64_t v5 = v17 + v4;
  unint64_t v6 = v17 + v4 + *(int *)(v2 + 56);
  *(void *)(v17 + v4) = 1;
  *(void *)unint64_t v6 = "dlid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_22D2BC2F0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v3 + *(int *)(v2 + 56);
  *(void *)(v5 + v3) = 2;
  *(void *)unint64_t v10 = "aes_gcm_key";
  *(void *)(v10 + 8) = 11;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v3);
  uint64_t v12 = (char *)v11 + *(int *)(v2 + 56);
  *uint64_t v11 = 3;
  *(void *)uint64_t v12 = "date_range";
  *((void *)v12 + 1) = 10;
  v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v3);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 56);
  *uint64_t v13 = 4;
  *(void *)uint64_t v14 = "type";
  *((void *)v14 + 1) = 4;
  v14[16] = 2;
  v9();
  uint64_t v15 = v5 + 4 * v3 + *(int *)(v2 + 56);
  *(void *)(v5 + 4 * v3) = 5;
  *(void *)uint64_t v15 = "ecgMeta";
  *(void *)(v15 + 8) = 7;
  *(unsigned char *)(v15 + 16) = 2;
  v9();
  return sub_22D2BC300();
}

uint64_t static PBReference._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CCD8, (uint64_t)qword_26853D998, a1);
}

uint64_t sub_22D00D2F0()
{
  type metadata accessor for PBReference._StorageClass(0);
  uint64_t v0 = (void *)swift_allocObject();
  v0[2] = 0;
  v0[3] = 0xE000000000000000;
  v0[4] = sub_22D2BBFC0();
  v0[5] = v1;
  uint64_t v2 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  uint64_t v3 = type metadata accessor for PBDateRange(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  unint64_t v4 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  *(void *)unint64_t v4 = 0;
  v4[8] = 1;
  unint64_t v5 = (char *)v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  uint64_t v6 = type metadata accessor for PBReference.OneOf_Metadata(0);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  qword_26853D9B0 = (uint64_t)v0;
  return result;
}

void *sub_22D00D3F4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v36 = type metadata accessor for PBReference.OneOf_Metadata;
  unint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v35 = (uint64_t)&v33 - v6;
  uint64_t v33 = type metadata accessor for PBDateRange;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v4);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v33 - v8;
  v1[2] = 0;
  unint64_t v10 = v1 + 2;
  v1[3] = 0xE000000000000000;
  v1[4] = sub_22D2BBFC0();
  uint64_t v11 = v1 + 4;
  v2[5] = v12;
  uint64_t v13 = (uint64_t)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  uint64_t v14 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = (char *)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = (char *)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  uint64_t v34 = (uint64_t)v2
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  uint64_t v17 = type metadata accessor for PBReference.OneOf_Metadata(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  swift_beginAccess();
  uint64_t v19 = a1[2];
  uint64_t v18 = a1[3];
  swift_beginAccess();
  *unint64_t v10 = v19;
  v2[3] = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v20 = a1[4];
  unint64_t v21 = a1[5];
  swift_beginAccess();
  uint64_t v22 = *v11;
  unint64_t v23 = v2[5];
  *uint64_t v11 = v20;
  v2[5] = v21;
  sub_22CFF9B64(v20, v21);
  sub_22CFF5630(v22, v23);
  uint64_t v24 = (uint64_t)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  uint64_t v25 = v33;
  sub_22D012010(v24, (uint64_t)v9, &qword_26853D7B0, v33);
  swift_beginAccess();
  sub_22D0120B0((uint64_t)v9, v13, &qword_26853D7B0, v25);
  swift_endAccess();
  uint64_t v26 = (char *)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  uint64_t v27 = *(void *)v26;
  LOBYTE(v26) = v26[8];
  swift_beginAccess();
  *(void *)uint64_t v15 = v27;
  v15[8] = (char)v26;
  uint64_t v28 = (uint64_t)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
  swift_beginAccess();
  uint64_t v29 = v35;
  uint64_t v30 = v36;
  sub_22D012010(v28, v35, &qword_26853DA00, v36);
  swift_release();
  uint64_t v31 = v34;
  swift_beginAccess();
  sub_22D0120B0(v29, v31, &qword_26853DA00, v30);
  swift_endAccess();
  return v2;
}

uint64_t sub_22D00D7E4()
{
  swift_bridgeObjectRelease();
  sub_22CFF5630(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_22D018504(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange, &qword_26853D7B0, type metadata accessor for PBDateRange);
  sub_22D018504(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  return swift_deallocClassInstance();
}

uint64_t PBReference.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22D00D908(a1, a2, a3, type metadata accessor for PBReference, (void (*)(void))type metadata accessor for PBReference._StorageClass, (uint64_t (*)(uint64_t))sub_22D00D3F4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_22D00D9FC);
}

uint64_t sub_22D00D908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), void (*a5)(void), uint64_t (*a6)(uint64_t), void (*a7)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v13 = *(int *)(a4(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    a5(0);
    swift_allocObject();
    uint64_t v14 = swift_retain();
    *(void *)(v7 + v13) = a6(v14);
    swift_release();
  }
  uint64_t v15 = swift_retain();
  a7(v15, a1, a2, a3);
  return swift_release();
}

uint64_t sub_22D00D9FC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a4;
  uint64_t v67 = type metadata accessor for PBECGMeta(0);
  uint64_t v61 = *(void *)(v67 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v67);
  uint64_t v65 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v59 = (uint64_t)&v49 - v8;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v58 = (uint64_t)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v57 = (uint64_t)&v49 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v66 = (char *)&v49 - v15;
  uint64_t v16 = type metadata accessor for PBReference.OneOf_Metadata(0);
  uint64_t v60 = *(char **)(v16 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v68 = (uint64_t)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v49 - v19;
  sub_22D0043D0(0, &qword_26853DB60, type metadata accessor for PBECGMeta, v9);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v49 - v25;
  uint64_t v63 = a1;
  uint64_t v27 = (uint64_t)&a1[OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata];
  uint64_t v28 = OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  uint64_t v29 = OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  uint64_t v30 = v70;
  uint64_t v70 = a3;
  uint64_t result = sub_22D2BC080();
  uint64_t v33 = v30;
  if (!v30)
  {
    uint64_t v64 = v26;
    uint64_t v50 = v20;
    uint64_t v62 = v16;
    uint64_t v56 = &v63[v28];
    uint64_t v55 = &v63[v29];
    char v54 = (void (**)(void, void, void, void))(v63 + 32);
    uint64_t v53 = (void (**)(void, void, void, void))(v63 + 16);
    uint64_t v63 = (char *)(v61 + 56);
    uint64_t v52 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48);
    uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
    uint64_t v49 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v60 + 56);
    uint64_t v35 = v67;
    uint64_t v34 = v68;
    uint64_t v36 = (uint64_t)v24;
    uint64_t v61 = v27;
    uint64_t v37 = (uint64_t)v66;
    while ((v32 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          swift_beginAccess();
          uint64_t v38 = v33;
          sub_22D2BC170();
          goto LABEL_5;
        case 2:
          swift_beginAccess();
          uint64_t v38 = v33;
          sub_22D2BC110();
          goto LABEL_5;
        case 3:
          swift_beginAccess();
          type metadata accessor for PBDateRange(0);
          sub_22D012384(&qword_26853DB58, (void (*)(uint64_t))type metadata accessor for PBDateRange);
          sub_22D2BC1A0();
          swift_endAccess();
          uint64_t v34 = v68;
          break;
        case 4:
          swift_beginAccess();
          sub_22D0183D0();
          uint64_t v38 = v33;
          sub_22D2BC0D0();
LABEL_5:
          uint64_t v33 = v38;
          swift_endAccess();
          break;
        case 5:
          uint64_t v39 = (uint64_t)v64;
          uint64_t v60 = *(char **)v63;
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v64, 1, 1, v35);
          sub_22D012010(v61, v37, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          if ((*v52)(v37, 1, v62) == 1)
          {
            sub_22D018504(v37, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          }
          else
          {
            uint64_t v40 = (uint64_t)v50;
            sub_22D01849C(v37, (uint64_t)v50, type metadata accessor for PBReference.OneOf_Metadata);
            sub_22D2BC090();
            sub_22D01849C(v40, v34, type metadata accessor for PBReference.OneOf_Metadata);
            uint64_t v39 = (uint64_t)v64;
            sub_22D018504((uint64_t)v64, &qword_26853DB60, type metadata accessor for PBECGMeta);
            uint64_t v41 = v59;
            sub_22D01849C(v68, v59, type metadata accessor for PBECGMeta);
            uint64_t v42 = v41;
            uint64_t v35 = v67;
            uint64_t v34 = v68;
            sub_22D01849C(v42, v39, type metadata accessor for PBECGMeta);
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v60)(v39, 0, 1, v35);
          }
          sub_22D012384(&qword_26853DB50, (void (*)(uint64_t))type metadata accessor for PBECGMeta);
          sub_22D2BC1A0();
          uint64_t v43 = v39;
          uint64_t v44 = (uint64_t)v65;
          sub_22D018574(v43, v36, &qword_26853DB60, type metadata accessor for PBECGMeta);
          if ((*v51)(v36, 1, v35) == 1)
          {
            sub_22D018504(v36, &qword_26853DB60, type metadata accessor for PBECGMeta);
          }
          else
          {
            sub_22D01849C(v36, v44, type metadata accessor for PBECGMeta);
            uint64_t v45 = v57;
            sub_22D01849C(v44, v57, type metadata accessor for PBECGMeta);
            (*v49)(v45, 0, 1, v62);
            uint64_t v46 = v45;
            uint64_t v47 = v58;
            sub_22D018574(v46, v58, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
            uint64_t v48 = v61;
            swift_beginAccess();
            uint64_t v34 = v68;
            sub_22D0120B0(v47, v48, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
            swift_endAccess();
          }
          uint64_t v35 = v67;
          break;
        default:
          break;
      }
      uint64_t result = sub_22D2BC080();
    }
  }
  return result;
}

uint64_t PBReference.traverse<A>(visitor:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_22D00E32C(a1, a2, a3, (void (*)(void))type metadata accessor for PBReference, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_22D00E3CC);
}

uint64_t sub_22D00E32C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a4(0);
  uint64_t v10 = swift_retain();
  a5(v10, a1, a2, a3);
  uint64_t result = swift_release();
  if (!v5) {
    return sub_22D2BBFD0();
  }
  return result;
}

uint64_t sub_22D00E3CC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v37 = (uint64_t)&v35 - v10;
  uint64_t v35 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x270FA5388](v35);
  uint64_t v36 = (uint64_t)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v8);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v35 - v13;
  uint64_t v39 = type metadata accessor for PBDateRange(0);
  uint64_t v15 = *(void *)(v39 - 8);
  MEMORY[0x270FA5388](v39);
  uint64_t v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  unint64_t v18 = a1[3];
  uint64_t v19 = HIBYTE(v18) & 0xF;
  if ((v18 & 0x2000000000000000) == 0) {
    uint64_t v19 = a1[2] & 0xFFFFFFFFFFFFLL;
  }
  uint64_t v43 = a4;
  uint64_t v40 = a3;
  uint64_t v38 = v17;
  if (!v19 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v4))
  {
    swift_beginAccess();
    uint64_t v21 = a1[4];
    unint64_t v22 = a1[5];
    switch(v22 >> 62)
    {
      case 1uLL:
        if ((int)v21 != v21 >> 32) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 2uLL:
        if (*(void *)(v21 + 16) != *(void *)(v21 + 24)) {
          goto LABEL_11;
        }
        goto LABEL_12;
      case 3uLL:
        goto LABEL_12;
      default:
        if ((v22 & 0xFF000000000000) == 0) {
          goto LABEL_12;
        }
LABEL_11:
        sub_22CFF9B64(a1[4], a1[5]);
        sub_22D2BC260();
        uint64_t result = sub_22CFF5630(v21, v22);
        if (v4) {
          return result;
        }
LABEL_12:
        uint64_t v23 = (uint64_t)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
        swift_beginAccess();
        sub_22D012010(v23, (uint64_t)v14, &qword_26853D7B0, type metadata accessor for PBDateRange);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v39) == 1)
        {
          sub_22D018504((uint64_t)v14, &qword_26853D7B0, type metadata accessor for PBDateRange);
        }
        else
        {
          uint64_t v24 = (uint64_t)v14;
          uint64_t v25 = (uint64_t)v38;
          sub_22D01849C(v24, (uint64_t)v38, type metadata accessor for PBDateRange);
          sub_22D012384(&qword_26853DB58, (void (*)(uint64_t))type metadata accessor for PBDateRange);
          sub_22D2BC2E0();
          uint64_t result = sub_22D010254(v25, type metadata accessor for PBDateRange);
          if (v4) {
            return result;
          }
        }
        uint64_t v26 = (char *)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
        swift_beginAccess();
        uint64_t v27 = *(void *)v26;
        char v28 = v26[8];
        uint64_t v41 = *(void *)v26;
        char v42 = v28;
        if (!PBDataType.rawValue.getter() || (v41 = v27, v42 = v28, sub_22D0183D0(), uint64_t result = sub_22D2BC240(), !v4))
        {
          uint64_t v29 = (char *)a1
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
          swift_beginAccess();
          uint64_t v30 = (uint64_t)v29;
          uint64_t v31 = v37;
          sub_22D012010(v30, v37, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          uint64_t v32 = type metadata accessor for PBReference.OneOf_Metadata(0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 48))(v31, 1, v32) == 1)
          {
            uint64_t result = sub_22D018504(v31, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          }
          else
          {
            uint64_t v33 = v31;
            uint64_t v34 = v36;
            sub_22D01849C(v33, v36, type metadata accessor for PBECGMeta);
            sub_22D012384(&qword_26853DB50, (void (*)(uint64_t))type metadata accessor for PBECGMeta);
            sub_22D2BC2E0();
            uint64_t result = sub_22D010254(v34, type metadata accessor for PBECGMeta);
          }
        }
        break;
    }
  }
  return result;
}

uint64_t static PBReference.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_22D012130(a1, a2, type metadata accessor for PBReference, (uint64_t (*)(uint64_t, uint64_t))sub_22D00EA38) & 1;
}

BOOL sub_22D00EA38(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for PBECGMeta(0);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0185F4(0, &qword_26853DA08, (void (*)(uint64_t))type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v68 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v69 = (uint64_t)&v65 - v8;
  uint64_t v74 = type metadata accessor for PBReference.OneOf_Metadata(0);
  uint64_t v73 = *(void *)(v74 - 8);
  MEMORY[0x270FA5388](v74);
  uint64_t v70 = (uint64_t)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D018424(0, &qword_26853DB20, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
  uint64_t v72 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v65 - v11;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0043D0(0, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v71 = (uint64_t)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v75 = (uint64_t)&v65 - v17;
  uint64_t v79 = type metadata accessor for PBDateRange(0);
  uint64_t v78 = *(void *)(v79 - 8);
  MEMORY[0x270FA5388](v79);
  uint64_t v76 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D018424(0, &qword_26853DB28, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v20 = v19;
  MEMORY[0x270FA5388](v19);
  unint64_t v22 = (char *)&v65 - v21;
  sub_22D0043D0(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v13);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v77 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v65 - v26;
  swift_beginAccess();
  uint64_t v29 = a1[2];
  uint64_t v28 = a1[3];
  swift_beginAccess();
  if (v29 == a2[2] && v28 == a2[3] || (v30 = sub_22D2BD660(), BOOL result = 0, (v30 & 1) != 0))
  {
    uint64_t v66 = v6;
    uint64_t v67 = v12;
    swift_beginAccess();
    uint64_t v32 = a1[4];
    unint64_t v33 = a1[5];
    swift_beginAccess();
    uint64_t v35 = a2[4];
    unint64_t v34 = a2[5];
    swift_retain();
    swift_retain();
    sub_22CFF9B64(v32, v33);
    sub_22CFF9B64(v35, v34);
    char v36 = sub_22D1158DC(v32, v33, v35, v34);
    sub_22CFF5630(v35, v34);
    sub_22CFF5630(v32, v33);
    if ((v36 & 1) == 0) {
      goto LABEL_16;
    }
    uint64_t v37 = (uint64_t)a1
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    sub_22D012010(v37, (uint64_t)v27, &qword_26853D7B0, type metadata accessor for PBDateRange);
    uint64_t v38 = (uint64_t)a2
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    uint64_t v39 = (uint64_t)&v22[*(int *)(v20 + 48)];
    sub_22D012010((uint64_t)v27, (uint64_t)v22, &qword_26853D7B0, type metadata accessor for PBDateRange);
    sub_22D012010(v38, v39, &qword_26853D7B0, type metadata accessor for PBDateRange);
    uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48);
    uint64_t v41 = v79;
    if (v40((uint64_t)v22, 1, v79) == 1)
    {
      sub_22D018504((uint64_t)v27, &qword_26853D7B0, type metadata accessor for PBDateRange);
      if (v40(v39, 1, v41) == 1)
      {
        sub_22D018504((uint64_t)v22, &qword_26853D7B0, type metadata accessor for PBDateRange);
LABEL_12:
        uint64_t v45 = (char *)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
        swift_beginAccess();
        uint64_t v46 = *(void *)v45;
        char v47 = v45[8];
        uint64_t v48 = (char *)a2
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
        swift_beginAccess();
        uint64_t v49 = *(void *)v48;
        char v50 = v48[8];
        uint64_t v82 = v46;
        char v83 = v47;
        uint64_t v80 = v49;
        char v81 = v50;
        uint64_t v51 = PBDataType.rawValue.getter();
        if (v51 == PBDataType.rawValue.getter())
        {
          uint64_t v52 = (uint64_t)a1
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
          swift_beginAccess();
          uint64_t v53 = v75;
          sub_22D012010(v52, v75, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          uint64_t v54 = (uint64_t)a2
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata;
          swift_beginAccess();
          uint64_t v55 = (uint64_t)v67;
          uint64_t v56 = (uint64_t)&v67[*(int *)(v72 + 48)];
          sub_22D012010(v53, (uint64_t)v67, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          sub_22D012010(v54, v56, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48);
          uint64_t v58 = v74;
          if (v57(v55, 1, v74) == 1)
          {
            swift_release();
            swift_release();
            sub_22D018504(v53, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
            if (v57(v56, 1, v58) == 1)
            {
              sub_22D018504(v55, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
              return 1;
            }
          }
          else
          {
            uint64_t v59 = v71;
            sub_22D012010(v55, v71, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
            if (v57(v56, 1, v58) != 1)
            {
              uint64_t v60 = v70;
              sub_22D01849C(v56, v70, type metadata accessor for PBReference.OneOf_Metadata);
              uint64_t v61 = v69;
              uint64_t v62 = v69 + *(int *)(v68 + 48);
              sub_22D018654(v59, v69, type metadata accessor for PBReference.OneOf_Metadata);
              sub_22D018654(v60, v62, type metadata accessor for PBReference.OneOf_Metadata);
              uint64_t v63 = (uint64_t)v66;
              sub_22D01849C(v61, (uint64_t)v66, type metadata accessor for PBECGMeta);
              char v64 = _s19HealthRecordsDaemon9PBECGMetaV2eeoiySbAC_ACtFZ_0(v63, v62);
              sub_22D010254(v62, type metadata accessor for PBECGMeta);
              sub_22D010254(v63, type metadata accessor for PBECGMeta);
              swift_release();
              swift_release();
              sub_22D010254(v60, type metadata accessor for PBReference.OneOf_Metadata);
              sub_22D018504(v53, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
              sub_22D010254(v59, type metadata accessor for PBReference.OneOf_Metadata);
              sub_22D018504(v55, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
              return (v64 & 1) != 0;
            }
            swift_release();
            swift_release();
            sub_22D018504(v53, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
            sub_22D010254(v59, type metadata accessor for PBReference.OneOf_Metadata);
          }
          sub_22D0182A8(v55, &qword_26853DB20, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata);
          return 0;
        }
LABEL_16:
        swift_release();
        swift_release();
        return 0;
      }
    }
    else
    {
      char v42 = v77;
      sub_22D012010((uint64_t)v22, (uint64_t)v77, &qword_26853D7B0, type metadata accessor for PBDateRange);
      if (v40(v39, 1, v41) != 1)
      {
        uint64_t v43 = v76;
        sub_22D01849C(v39, v76, type metadata accessor for PBDateRange);
        char v44 = static PBDateRange.== infix(_:_:)(v42, v43);
        sub_22D010254(v43, type metadata accessor for PBDateRange);
        sub_22D018504((uint64_t)v27, &qword_26853D7B0, type metadata accessor for PBDateRange);
        sub_22D010254((uint64_t)v42, type metadata accessor for PBDateRange);
        sub_22D018504((uint64_t)v22, &qword_26853D7B0, type metadata accessor for PBDateRange);
        if ((v44 & 1) == 0) {
          goto LABEL_16;
        }
        goto LABEL_12;
      }
      sub_22D018504((uint64_t)v27, &qword_26853D7B0, type metadata accessor for PBDateRange);
      sub_22D010254((uint64_t)v42, type metadata accessor for PBDateRange);
    }
    sub_22D0182A8((uint64_t)v22, &qword_26853DB28, &qword_26853D7B0, type metadata accessor for PBDateRange);
    goto LABEL_16;
  }
  return result;
}

uint64_t PBReference.hashValue.getter()
{
  return sub_22D00FDA0((void (*)(void))type metadata accessor for PBReference, &qword_26853DA20, (void (*)(uint64_t))type metadata accessor for PBReference);
}

uint64_t sub_22D00F64C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D00F670(a1, &qword_26853CCE0, &qword_26853D9B0, a2);
}

uint64_t sub_22D00F670@<X0>(uint64_t a1@<X0>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v8 = *(int *)(a1 + 20);
  if (*a2 != -1) {
    swift_once();
  }
  *(void *)(a4 + v8) = *a3;
  return swift_retain();
}

unint64_t sub_22D00F6EC()
{
  return 0xD000000000000024;
}

uint64_t sub_22D00F708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBReference.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_22D00F720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBReference.traverse<A>(visitor:)(a1, a2, a3);
}

uint64_t sub_22D00F738(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D012384(&qword_26853DB08, (void (*)(uint64_t))type metadata accessor for PBReference);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D00F7B4@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CCD8, (uint64_t)qword_26853D998, a1);
}

uint64_t sub_22D00F7D8(uint64_t a1)
{
  uint64_t v2 = sub_22D012384(&qword_26853DA28, (void (*)(uint64_t))type metadata accessor for PBReference);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D00F844()
{
  sub_22D012384(&qword_26853DA28, (void (*)(uint64_t))type metadata accessor for PBReference);
  return sub_22D2BC200();
}

uint64_t sub_22D00F8C0(uint64_t a1, uint64_t a2)
{
  return sub_22D012130(a1, a2, type metadata accessor for PBReference, (uint64_t (*)(uint64_t, uint64_t))sub_22D00EA38) & 1;
}

unint64_t static PBReferences.protoMessageName.getter()
{
  return 0xD000000000000025;
}

uint64_t sub_22D00F920(uint64_t a1)
{
  return sub_22D00F938(a1, qword_26853D9B8, (uint64_t)"references", 10);
}

uint64_t sub_22D00F938(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_22D2BC310();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  sub_22D0043D0(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v9 = v8 - 8;
  unint64_t v10 = (*(unsigned __int8 *)(*(void *)(v8 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_22D2BFF40;
  unint64_t v12 = v11 + v10 + *(int *)(v9 + 56);
  *(void *)(v11 + v10) = 1;
  *(void *)unint64_t v12 = a3;
  *(void *)(v12 + 8) = a4;
  *(unsigned char *)(v12 + 16) = 2;
  uint64_t v13 = *MEMORY[0x263F50718];
  uint64_t v14 = sub_22D2BC2F0();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 104))(v12, v13, v14);
  return sub_22D2BC300();
}

uint64_t static PBReferences._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CCE8, (uint64_t)qword_26853D9B8, a1);
}

uint64_t sub_22D00FAE0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_22D2BC310();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t PBReferences.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_22D2BC080();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 1)
      {
        type metadata accessor for PBReference(0);
        sub_22D012384(&qword_26853DA28, (void (*)(uint64_t))type metadata accessor for PBReference);
        sub_22D2BC190();
      }
      uint64_t result = sub_22D2BC080();
    }
  }
  return result;
}

uint64_t PBReferences.traverse<A>(visitor:)()
{
  if (!*(void *)(*(void *)v0 + 16)
    || (type metadata accessor for PBReference(0),
        sub_22D012384(&qword_26853DA28, (void (*)(uint64_t))type metadata accessor for PBReference),
        uint64_t result = sub_22D2BC2D0(),
        !v1))
  {
    type metadata accessor for PBReferences(0);
    return sub_22D2BBFD0();
  }
  return result;
}

uint64_t PBReferences.hashValue.getter()
{
  return sub_22D00FDA0((void (*)(void))type metadata accessor for PBReferences, &qword_26853DA30, (void (*)(uint64_t))type metadata accessor for PBReferences);
}

uint64_t sub_22D00FDA0(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_22D2BD760();
}

uint64_t sub_22D00FE28@<X0>(void *a1@<X8>)
{
  *a1 = MEMORY[0x263F8EE78];
  return sub_22D2BBFE0();
}

unint64_t sub_22D00FE54()
{
  return 0xD000000000000025;
}

uint64_t sub_22D00FE70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_22D00FEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t sub_22D00FF50()
{
  return PBReferences.decodeMessage<A>(decoder:)();
}

uint64_t sub_22D00FF68()
{
  return PBReferences.traverse<A>(visitor:)();
}

uint64_t sub_22D00FF80(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D012384(&qword_26853DB00, (void (*)(uint64_t))type metadata accessor for PBReferences);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D00FFFC@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CCE8, (uint64_t)qword_26853D9B8, a1);
}

uint64_t sub_22D010020@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v5 = sub_22D2BC310();
  uint64_t v6 = __swift_project_value_buffer(v5, a2);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v7(a3, v6, v5);
}

uint64_t sub_22D0100BC(uint64_t a1)
{
  uint64_t v2 = sub_22D012384(&qword_26853DA80, (void (*)(uint64_t))type metadata accessor for PBReferences);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D010128()
{
  return sub_22D2BD760();
}

uint64_t sub_22D010180()
{
  sub_22D012384(&qword_26853DA80, (void (*)(uint64_t))type metadata accessor for PBReferences);
  return sub_22D2BC200();
}

uint64_t sub_22D0101FC()
{
  return sub_22D2BD760();
}

uint64_t sub_22D010254(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s19HealthRecordsDaemon9PBRawDataV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (sub_22D1158DC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)))
  {
    uint64_t v11 = type metadata accessor for PBRawData(0);
    unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v12(v10, a1 + *(int *)(v11 + 20), v4);
    v12(v8, a2 + *(int *)(v11 + 20), v4);
    sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
    char v13 = sub_22D2BCB90();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t _s19HealthRecordsDaemon12PBReferencesV2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v16 - v9;
  if (sub_22D112408(*a1, *a2))
  {
    uint64_t v11 = type metadata accessor for PBReferences(0);
    unint64_t v12 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v12(v10, (char *)a1 + *(int *)(v11 + 20), v4);
    v12(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
    char v13 = sub_22D2BCB90();
    uint64_t v14 = *(void (**)(char *, uint64_t))(v5 + 8);
    v14(v8, v4);
    v14(v10, v4);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_22D010624(uint64_t a1, uint64_t a2)
{
  return sub_22D012130(a1, a2, type metadata accessor for PBTypedData, (uint64_t (*)(uint64_t, uint64_t))sub_22D00C3B4);
}

uint64_t _s19HealthRecordsDaemon11PBTypedDataV9OneOf_RawO2eeoiySbAE_AEtFZ_0(uint64_t a1, char *a2)
{
  uint64_t v149 = a1;
  uint64_t v150 = a2;
  uint64_t v120 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x270FA5388](v120);
  uint64_t v137 = (float *)((char *)&v112 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v119 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x270FA5388](v119);
  uint64_t v136 = (float *)((char *)&v112 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v118 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x270FA5388](v118);
  uint64_t v135 = (float *)((char *)&v112 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v117 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x270FA5388](v117);
  uint64_t v133 = (float *)((char *)&v112 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v113 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x270FA5388](v113);
  uint64_t v134 = (float *)((char *)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v116 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x270FA5388](v116);
  uint64_t v132 = (float *)((char *)&v112 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v112 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x270FA5388](v112);
  uint64_t v131 = (float *)((char *)&v112 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v130 = (uint64_t)&v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v129 = (uint64_t)&v112 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v127 = (uint64_t)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x270FA5388](v15 - 8);
  uint64_t v125 = (uint64_t)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = type metadata accessor for PBECGs(0);
  MEMORY[0x270FA5388](v115);
  uint64_t v128 = (float *)((char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v114 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x270FA5388](v114);
  uint64_t v126 = (float *)((char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v124 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for PBWorkout(0);
  MEMORY[0x270FA5388](v21 - 8);
  uint64_t v123 = (uint64_t)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v122 = (uint64_t)&v112 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x270FA5388](v25 - 8);
  uint64_t v121 = (uint64_t)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  uint64_t v28 = MEMORY[0x270FA5388](v27);
  uint64_t v148 = (float *)((char *)&v112 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v146 = (float *)((char *)&v112 - v31);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v145 = (float *)((char *)&v112 - v33);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v144 = (float *)((char *)&v112 - v35);
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v147 = (float *)((char *)&v112 - v37);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v143 = (float *)((char *)&v112 - v39);
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v142 = (float *)((char *)&v112 - v41);
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v139 = (char *)&v112 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v138 = (char *)&v112 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v112 - v47;
  uint64_t v49 = MEMORY[0x270FA5388](v46);
  uint64_t v51 = (char *)&v112 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49);
  uint64_t v141 = (float *)((char *)&v112 - v53);
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v140 = (float *)((char *)&v112 - v55);
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v58 = (char *)&v112 - v57;
  uint64_t v59 = MEMORY[0x270FA5388](v56);
  uint64_t v61 = (char *)&v112 - v60;
  uint64_t v62 = MEMORY[0x270FA5388](v59);
  char v64 = (char *)&v112 - v63;
  MEMORY[0x270FA5388](v62);
  uint64_t v66 = (char *)&v112 - v65;
  sub_22D0185F4(0, &qword_26853DC80, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v68 = MEMORY[0x270FA5388](v67 - 8);
  uint64_t v70 = (char *)&v112 - v69;
  uint64_t v71 = (char *)&v112 + *(int *)(v68 + 56) - v69;
  sub_22D018654(v149, (uint64_t)&v112 - v69, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v72 = (uint64_t)v150;
  uint64_t v150 = v71;
  sub_22D018654(v72, (uint64_t)v71, type metadata accessor for PBTypedData.OneOf_Raw);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_22D018654((uint64_t)v70, (uint64_t)v64, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v76 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v77 = v122;
        sub_22D01849C(v76, v122, type metadata accessor for PBCategorySeries);
        char v78 = sub_22D1B63B0((uint64_t)v64, v77);
        uint64_t v79 = type metadata accessor for PBCategorySeries;
        sub_22D010254(v77, type metadata accessor for PBCategorySeries);
        uint64_t v80 = (uint64_t)v64;
        goto LABEL_82;
      }
      uint64_t v74 = type metadata accessor for PBCategorySeries;
      uint64_t v75 = (uint64_t)v64;
      goto LABEL_78;
    case 2u:
      sub_22D018654((uint64_t)v70, (uint64_t)v61, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v81 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 2)
      {
        uint64_t v82 = v123;
        sub_22D01849C(v81, v123, type metadata accessor for PBWorkout);
        char v78 = sub_22D1B4014((uint64_t)v61, v82);
        uint64_t v79 = type metadata accessor for PBWorkout;
        sub_22D010254(v82, type metadata accessor for PBWorkout);
        uint64_t v80 = (uint64_t)v61;
        goto LABEL_82;
      }
      uint64_t v74 = type metadata accessor for PBWorkout;
      uint64_t v75 = (uint64_t)v61;
      goto LABEL_78;
    case 3u:
      sub_22D018654((uint64_t)v70, (uint64_t)v58, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v83 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v84 = v124;
        sub_22D01849C(v83, (uint64_t)v124, type metadata accessor for PBCharacteristics);
        char v78 = sub_22D1B51F0(v58, v84);
        uint64_t v79 = type metadata accessor for PBCharacteristics;
        sub_22D010254((uint64_t)v84, type metadata accessor for PBCharacteristics);
        uint64_t v80 = (uint64_t)v58;
        goto LABEL_82;
      }
      uint64_t v74 = type metadata accessor for PBCharacteristics;
      uint64_t v75 = (uint64_t)v58;
      goto LABEL_78;
    case 4u:
      uint64_t v85 = v140;
      sub_22D018654((uint64_t)v70, (uint64_t)v140, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v86 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 4)
      {
        uint64_t v106 = type metadata accessor for PBAllClinicalRecords;
        goto LABEL_77;
      }
      char v87 = v126;
      sub_22D01849C(v86, (uint64_t)v126, type metadata accessor for PBAllClinicalRecords);
      if (sub_22D113024(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBAllClinicalRecords;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBAllClinicalRecords;
      goto LABEL_91;
    case 5u:
      uint64_t v85 = v141;
      sub_22D018654((uint64_t)v70, (uint64_t)v141, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v89 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 5)
      {
        uint64_t v106 = type metadata accessor for PBECGs;
        goto LABEL_77;
      }
      char v87 = v128;
      sub_22D01849C(v89, (uint64_t)v128, type metadata accessor for PBECGs);
      if (sub_22D10EF1C(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBECGs;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBECGs;
      goto LABEL_91;
    case 6u:
      sub_22D018654((uint64_t)v70, (uint64_t)v51, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v90 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 6)
      {
        uint64_t v91 = v125;
        sub_22D01849C(v90, v125, type metadata accessor for PBCycleTracking);
        char v78 = sub_22D1B6AC0((uint64_t)v51, v91);
        uint64_t v92 = type metadata accessor for PBCycleTracking;
        goto LABEL_26;
      }
      uint64_t v107 = type metadata accessor for PBCycleTracking;
      goto LABEL_69;
    case 7u:
      sub_22D018654((uint64_t)v70, (uint64_t)v48, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v93 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 7)
      {
        uint64_t v94 = v127;
        sub_22D01849C(v93, v127, type metadata accessor for PBECGMeasurement);
        char v78 = _s19HealthRecordsDaemon16PBECGMeasurementV2eeoiySbAC_ACtFZ_0((uint64_t)v48, v94);
        sub_22D010254(v94, type metadata accessor for PBECGMeasurement);
        uint64_t v80 = (uint64_t)v48;
        uint64_t v95 = type metadata accessor for PBECGMeasurement;
        goto LABEL_83;
      }
      uint64_t v74 = type metadata accessor for PBECGMeasurement;
      uint64_t v75 = (uint64_t)v48;
      goto LABEL_78;
    case 8u:
      uint64_t v51 = v138;
      sub_22D018654((uint64_t)v70, (uint64_t)v138, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v96 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 8)
      {
        uint64_t v91 = v129;
        sub_22D01849C(v96, v129, type metadata accessor for PBActivitySummarySeries);
        char v78 = sub_22D1B4784((uint64_t)v51, v91);
        uint64_t v92 = type metadata accessor for PBActivitySummarySeries;
        goto LABEL_26;
      }
      uint64_t v107 = type metadata accessor for PBActivitySummarySeries;
      goto LABEL_69;
    case 9u:
      uint64_t v51 = v139;
      sub_22D018654((uint64_t)v70, (uint64_t)v139, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v97 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() == 9)
      {
        uint64_t v91 = v130;
        sub_22D01849C(v97, v130, type metadata accessor for PBPatientMeta);
        char v78 = sub_22D1B7504((uint64_t)v51, v91);
        uint64_t v92 = type metadata accessor for PBPatientMeta;
LABEL_26:
        uint64_t v79 = v92;
        sub_22D010254(v91, v92);
        uint64_t v80 = (uint64_t)v51;
        goto LABEL_82;
      }
      uint64_t v107 = type metadata accessor for PBPatientMeta;
LABEL_69:
      uint64_t v74 = v107;
      uint64_t v75 = (uint64_t)v51;
      goto LABEL_78;
    case 0xAu:
      uint64_t v85 = v142;
      sub_22D018654((uint64_t)v70, (uint64_t)v142, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v98 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 10)
      {
        uint64_t v106 = type metadata accessor for PBSleepSummary;
        goto LABEL_77;
      }
      char v87 = v131;
      sub_22D01849C(v98, (uint64_t)v131, type metadata accessor for PBSleepSummary);
      if ((sub_22D1113E0(*(void *)v85, *(void *)v87) & 1) != 0 && v85[2] == v87[2])
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBSleepSummary;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBSleepSummary;
      goto LABEL_91;
    case 0xBu:
      uint64_t v85 = v143;
      sub_22D018654((uint64_t)v70, (uint64_t)v143, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v99 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 11)
      {
        uint64_t v106 = type metadata accessor for PBSleepSeries;
        goto LABEL_77;
      }
      char v87 = v132;
      sub_22D01849C(v99, (uint64_t)v132, type metadata accessor for PBSleepSeries);
      if (sub_22D1116A8(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBSleepSeries;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBSleepSeries;
      goto LABEL_91;
    case 0xCu:
      uint64_t v85 = v147;
      sub_22D018654((uint64_t)v70, (uint64_t)v147, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v100 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 12)
      {
        uint64_t v106 = type metadata accessor for PBHistogramSeries;
        goto LABEL_77;
      }
      char v87 = v134;
      sub_22D01849C(v100, (uint64_t)v134, type metadata accessor for PBHistogramSeries);
      if ((sub_22D110BD4(*(void *)v85, *(void *)v87) & 1) != 0
        && (*((void *)v85 + 1) == *((void *)v87 + 1) && *((void *)v85 + 2) == *((void *)v87 + 2)
         || (sub_22D2BD660() & 1) != 0))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBHistogramSeries;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBHistogramSeries;
      goto LABEL_91;
    case 0xDu:
      uint64_t v85 = v144;
      sub_22D018654((uint64_t)v70, (uint64_t)v144, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v101 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 13)
      {
        uint64_t v106 = type metadata accessor for PBMedicationTrackings;
        goto LABEL_77;
      }
      char v87 = v133;
      sub_22D01849C(v101, (uint64_t)v133, type metadata accessor for PBMedicationTrackings);
      if (sub_22D1105B0(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBMedicationTrackings;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBMedicationTrackings;
      goto LABEL_91;
    case 0xEu:
      uint64_t v85 = v145;
      sub_22D018654((uint64_t)v70, (uint64_t)v145, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v102 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 14)
      {
        uint64_t v106 = type metadata accessor for PBMedicationTrackingDoseEvents;
        goto LABEL_77;
      }
      char v87 = v135;
      sub_22D01849C(v102, (uint64_t)v135, type metadata accessor for PBMedicationTrackingDoseEvents);
      if (sub_22D10F508(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBMedicationTrackingDoseEvents;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBMedicationTrackingDoseEvents;
      goto LABEL_91;
    case 0xFu:
      uint64_t v85 = v146;
      sub_22D018654((uint64_t)v70, (uint64_t)v146, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v103 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 15)
      {
        uint64_t v106 = type metadata accessor for PBMedicationTrackingSchedules;
        goto LABEL_77;
      }
      char v87 = v136;
      sub_22D01849C(v103, (uint64_t)v136, type metadata accessor for PBMedicationTrackingSchedules);
      if (sub_22D10F55C(*(void *)v85, *(void *)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBMedicationTrackingSchedules;
          goto LABEL_59;
        }
      }
      uint64_t v108 = type metadata accessor for PBMedicationTrackingSchedules;
      goto LABEL_91;
    case 0x10u:
      uint64_t v85 = v148;
      sub_22D018654((uint64_t)v70, (uint64_t)v148, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v104 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload() != 16)
      {
        uint64_t v106 = type metadata accessor for PBActiveMedications;
LABEL_77:
        uint64_t v74 = v106;
        uint64_t v75 = (uint64_t)v85;
        goto LABEL_78;
      }
      char v87 = v137;
      sub_22D01849C(v104, (uint64_t)v137, type metadata accessor for PBActiveMedications);
      if (sub_22D10F3F8(*(void **)v85, *(void **)v87))
      {
        sub_22D2BBFF0();
        sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
        if (sub_22D2BCB90())
        {
          uint64_t v88 = type metadata accessor for PBActiveMedications;
LABEL_59:
          uint64_t v105 = v88;
          sub_22D010254((uint64_t)v87, v88);
          sub_22D010254((uint64_t)v85, v105);
          sub_22D010254((uint64_t)v70, type metadata accessor for PBTypedData.OneOf_Raw);
          char v78 = 1;
          return v78 & 1;
        }
      }
      uint64_t v108 = type metadata accessor for PBActiveMedications;
LABEL_91:
      uint64_t v110 = v108;
      sub_22D010254((uint64_t)v87, v108);
      sub_22D010254((uint64_t)v85, v110);
      sub_22D010254((uint64_t)v70, type metadata accessor for PBTypedData.OneOf_Raw);
      goto LABEL_92;
    default:
      sub_22D018654((uint64_t)v70, (uint64_t)v66, type metadata accessor for PBTypedData.OneOf_Raw);
      uint64_t v73 = (uint64_t)v150;
      if (swift_getEnumCaseMultiPayload())
      {
        uint64_t v74 = type metadata accessor for PBTimeSeries;
        uint64_t v75 = (uint64_t)v66;
LABEL_78:
        sub_22D010254(v75, v74);
        sub_22D0186BC((uint64_t)v70);
LABEL_92:
        char v78 = 0;
      }
      else
      {
        uint64_t v109 = v121;
        sub_22D01849C(v73, v121, type metadata accessor for PBTimeSeries);
        char v78 = sub_22D1B7E40((uint64_t)v66, v109);
        uint64_t v79 = type metadata accessor for PBTimeSeries;
        sub_22D010254(v109, type metadata accessor for PBTimeSeries);
        uint64_t v80 = (uint64_t)v66;
LABEL_82:
        uint64_t v95 = v79;
LABEL_83:
        sub_22D010254(v80, v95);
        sub_22D010254((uint64_t)v70, type metadata accessor for PBTypedData.OneOf_Raw);
      }
      return v78 & 1;
  }
}

uint64_t type metadata accessor for PBReference(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAB0);
}

uint64_t type metadata accessor for PBReference._StorageClass(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAF0);
}

uint64_t sub_22D012010(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D0043D0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t type metadata accessor for PBReference.OneOf_Metadata(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAC0);
}

uint64_t sub_22D0120B0(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D0043D0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D012130(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8 = sub_22D2BBFF0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = *(int *)(a3(0) + 20);
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  if (v16 == v17
    || (swift_retain(), swift_retain(), char v18 = a4(v16, v17), swift_release(), swift_release(), (v18 & 1) != 0))
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v19(v14, a1, v8);
    v19(v12, a2, v8);
    sub_22D012384(&qword_26853DB30, MEMORY[0x263F50560]);
    char v20 = sub_22D2BCB90();
    uint64_t v21 = *(void (**)(char *, uint64_t))(v9 + 8);
    v21(v12, v8);
    v21(v14, v8);
  }
  else
  {
    char v20 = 0;
  }
  return v20 & 1;
}

uint64_t type metadata accessor for PBReferences(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DAD0);
}

uint64_t sub_22D01234C(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22D012384(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0123CC()
{
  return sub_22D012384(&qword_26853DA38, (void (*)(uint64_t))type metadata accessor for PBRawData);
}

uint64_t sub_22D012414()
{
  return sub_22D012384(&qword_26853DA40, (void (*)(uint64_t))type metadata accessor for PBRawData);
}

uint64_t sub_22D01245C()
{
  return sub_22D012384(&qword_26853DA10, (void (*)(uint64_t))type metadata accessor for PBRawData);
}

uint64_t sub_22D0124A4()
{
  return sub_22D012384(&qword_26853DA48, (void (*)(uint64_t))type metadata accessor for PBRawData);
}

uint64_t sub_22D0124EC()
{
  return sub_22D012384(&qword_26853DA50, (void (*)(uint64_t))type metadata accessor for PBTypedData);
}

uint64_t sub_22D012534()
{
  return sub_22D012384(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
}

uint64_t sub_22D01257C()
{
  return sub_22D012384(&qword_26853DA18, (void (*)(uint64_t))type metadata accessor for PBTypedData);
}

uint64_t sub_22D0125C4()
{
  return sub_22D012384(&qword_26853DA60, (void (*)(uint64_t))type metadata accessor for PBTypedData);
}

uint64_t sub_22D01260C()
{
  return sub_22D012384(&qword_26853DA68, (void (*)(uint64_t))type metadata accessor for PBReference);
}

uint64_t sub_22D012654()
{
  return sub_22D012384(&qword_26853DA28, (void (*)(uint64_t))type metadata accessor for PBReference);
}

uint64_t sub_22D01269C()
{
  return sub_22D012384(&qword_26853DA20, (void (*)(uint64_t))type metadata accessor for PBReference);
}

uint64_t sub_22D0126E4()
{
  return sub_22D012384(&qword_26853DA70, (void (*)(uint64_t))type metadata accessor for PBReference);
}

uint64_t sub_22D01272C()
{
  return sub_22D012384(&qword_26853DA78, (void (*)(uint64_t))type metadata accessor for PBReferences);
}

uint64_t sub_22D012774()
{
  return sub_22D012384(&qword_26853DA80, (void (*)(uint64_t))type metadata accessor for PBReferences);
}

uint64_t sub_22D0127BC()
{
  return sub_22D012384(&qword_26853DA30, (void (*)(uint64_t))type metadata accessor for PBReferences);
}

uint64_t sub_22D012804()
{
  return sub_22D012384(&qword_26853DA88, (void (*)(uint64_t))type metadata accessor for PBReferences);
}

uint64_t sub_22D01284C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBTypedData(0) + 20));
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 24);
  *(void *)a2 = *(void *)(v3 + 16);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_22D0128B0@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.dateRange.getter(a1);
}

uint64_t sub_22D0128D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBDateRange, type metadata accessor for PBDateRange, (uint64_t (*)(char *))PBTypedData.dateRange.setter);
}

uint64_t sub_22D012928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D002274(a1, type metadata accessor for PBTypedData, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, a2);
}

uint64_t sub_22D01297C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.timeSeries.getter(a1);
}

uint64_t sub_22D0129A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBTimeSeries, type metadata accessor for PBTimeSeries, (uint64_t (*)(char *))PBTypedData.timeSeries.setter);
}

uint64_t sub_22D0129F4@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.categorySeries.getter(a1);
}

uint64_t sub_22D012A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBCategorySeries, type metadata accessor for PBCategorySeries, (uint64_t (*)(char *))PBTypedData.categorySeries.setter);
}

uint64_t sub_22D012A6C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.workout.getter(a1);
}

uint64_t sub_22D012A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBWorkout, type metadata accessor for PBWorkout, (uint64_t (*)(char *))PBTypedData.workout.setter);
}

uint64_t sub_22D012AE4@<X0>(void *a1@<X8>)
{
  return PBTypedData.characteristics.getter(a1);
}

uint64_t sub_22D012B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBCharacteristics, type metadata accessor for PBCharacteristics, (uint64_t (*)(char *))PBTypedData.characteristics.setter);
}

uint64_t sub_22D012B5C@<X0>(void *a1@<X8>)
{
  return PBTypedData.record.getter(a1);
}

uint64_t sub_22D012B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBAllClinicalRecords, type metadata accessor for PBAllClinicalRecords, (uint64_t (*)(char *))PBTypedData.record.setter);
}

uint64_t sub_22D012BD4@<X0>(void *a1@<X8>)
{
  return PBTypedData.ecgs.getter(a1);
}

uint64_t sub_22D012BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBECGs, type metadata accessor for PBECGs, (uint64_t (*)(char *))PBTypedData.ecgs.setter);
}

uint64_t sub_22D012C4C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.cycleTracking.getter(a1);
}

uint64_t sub_22D012C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBCycleTracking, type metadata accessor for PBCycleTracking, (uint64_t (*)(char *))PBTypedData.cycleTracking.setter);
}

uint64_t sub_22D012CC4@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.ecg.getter(a1);
}

uint64_t sub_22D012CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBECGMeasurement, type metadata accessor for PBECGMeasurement, (uint64_t (*)(char *))PBTypedData.ecg.setter);
}

uint64_t sub_22D012D3C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.activitySummaries.getter(a1);
}

uint64_t sub_22D012D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBActivitySummarySeries, type metadata accessor for PBActivitySummarySeries, (uint64_t (*)(char *))PBTypedData.activitySummaries.setter);
}

uint64_t sub_22D012DB4@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.patientMeta.getter(a1);
}

uint64_t sub_22D012DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBPatientMeta, type metadata accessor for PBPatientMeta, (uint64_t (*)(char *))PBTypedData.patientMeta.setter);
}

uint64_t sub_22D012E2C@<X0>(uint64_t a1@<X8>)
{
  return PBTypedData.sleepSummary.getter(a1);
}

uint64_t sub_22D012E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBSleepSummary, type metadata accessor for PBSleepSummary, (uint64_t (*)(char *))PBTypedData.sleepSummary.setter);
}

uint64_t sub_22D012EA4@<X0>(void *a1@<X8>)
{
  return PBTypedData.sleepSeries.getter(a1);
}

uint64_t sub_22D012EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBSleepSeries, type metadata accessor for PBSleepSeries, (uint64_t (*)(char *))PBTypedData.sleepSeries.setter);
}

uint64_t sub_22D012F1C@<X0>(void *a1@<X8>)
{
  return PBTypedData.histogramSeries.getter(a1);
}

uint64_t sub_22D012F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBHistogramSeries, type metadata accessor for PBHistogramSeries, (uint64_t (*)(char *))PBTypedData.histogramSeries.setter);
}

uint64_t sub_22D012F94@<X0>(void *a1@<X8>)
{
  return PBTypedData.medicationTrackings.getter(a1);
}

uint64_t sub_22D012FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackings, type metadata accessor for PBMedicationTrackings, (uint64_t (*)(char *))PBTypedData.medicationTrackings.setter);
}

uint64_t sub_22D01300C@<X0>(void *a1@<X8>)
{
  return PBTypedData.medicationTrackingDoseEvents.getter(a1);
}

uint64_t sub_22D013030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackingDoseEvents, type metadata accessor for PBMedicationTrackingDoseEvents, (uint64_t (*)(char *))PBTypedData.medicationTrackingDoseEvents.setter);
}

uint64_t sub_22D013084@<X0>(void *a1@<X8>)
{
  return PBTypedData.medicationTrackingSchedules.getter(a1);
}

uint64_t sub_22D0130A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBMedicationTrackingSchedules, type metadata accessor for PBMedicationTrackingSchedules, (uint64_t (*)(char *))PBTypedData.medicationTrackingSchedules.setter);
}

uint64_t sub_22D0130FC@<X0>(void *a1@<X8>)
{
  return PBTypedData.activeMedications.getter(a1);
}

uint64_t sub_22D013120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBActiveMedications, type metadata accessor for PBActiveMedications, (uint64_t (*)(char *))PBTypedData.activeMedications.setter);
}

uint64_t sub_22D013184@<X0>(uint64_t a1@<X8>)
{
  return PBReference.dateRange.getter(a1);
}

uint64_t sub_22D0131A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBDateRange, type metadata accessor for PBDateRange, (uint64_t (*)(char *))PBReference.dateRange.setter);
}

uint64_t sub_22D013204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D002274(a1, type metadata accessor for PBReference, &OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__metadata, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, a2);
}

uint64_t sub_22D013258@<X0>(uint64_t a1@<X8>)
{
  return PBReference.ecgMeta.getter(a1);
}

uint64_t sub_22D01327C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D002A8C(a1, a2, a3, a4, type metadata accessor for PBECGMeta, type metadata accessor for PBECGMeta, (uint64_t (*)(char *))PBReference.ecgMeta.setter);
}

uint64_t *initializeBufferWithCopyOfBuffer for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_22CFF9B64(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_22D2BBFF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for PBRawData(uint64_t a1, uint64_t a2)
{
  sub_22CFF5630(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t *initializeWithCopy for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_22CFF9B64(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *assignWithCopy for PBRawData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_22CFF9B64(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_22CFF5630(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *initializeWithTake for PBRawData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *assignWithTake for PBRawData(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_22CFF5630(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBRawData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D01368C);
}

uint64_t sub_22D01368C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_22D2BBFF0();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PBRawData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D01375C);
}

void *sub_22D01375C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D01380C()
{
  return sub_22D017F90();
}

uint64_t getEnumTagSinglePayload for PBTypedData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, j____swift_get_extra_inhabitant_index_52Tm);
}

uint64_t storeEnumTagSinglePayload for PBTypedData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, j____swift_store_extra_inhabitant_index_53Tm);
}

uint64_t initializeBufferWithCopyOfBuffer for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = v8 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v9 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
        uint64_t v10 = type metadata accessor for PBCategorySeries(0);
        *(void *)(a1 + *(int *)(v10 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v10 + 20));
        swift_retain();
        break;
      case 2u:
        uint64_t v11 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        uint64_t v12 = type metadata accessor for PBWorkout(0);
        *(void *)(a1 + *(int *)(v12 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v12 + 20));
        swift_retain();
        break;
      case 3u:
        uint64_t v13 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v13;
        uint64_t v14 = a2[3];
        *(void *)(a1 + 16) = a2[2];
        *(void *)(a1 + 24) = v14;
        uint64_t v15 = a2[5];
        *(void *)(a1 + 32) = a2[4];
        *(void *)(a1 + 40) = v15;
        uint64_t v16 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
        uint64_t v17 = a1 + v16;
        uint64_t v18 = (uint64_t)a2 + v16;
        uint64_t v19 = sub_22D2BBFF0();
        char v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v20(v17, v18, v19);
        break;
      case 4u:
        *(void *)a1 = *a2;
        uint64_t v21 = *(int *)(type metadata accessor for PBAllClinicalRecords(0) + 20);
        uint64_t v22 = a1 + v21;
        uint64_t v23 = (uint64_t)a2 + v21;
        uint64_t v24 = sub_22D2BBFF0();
        uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16);
        swift_bridgeObjectRetain();
        v25(v22, v23, v24);
        break;
      case 5u:
        *(void *)a1 = *a2;
        uint64_t v26 = *(int *)(type metadata accessor for PBECGs(0) + 20);
        uint64_t v27 = a1 + v26;
        uint64_t v28 = (uint64_t)a2 + v26;
        uint64_t v29 = sub_22D2BBFF0();
        uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        v30(v27, v28, v29);
        break;
      case 6u:
        uint64_t v31 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v31 - 8) + 16))(a1, a2, v31);
        uint64_t v32 = type metadata accessor for PBCycleTracking(0);
        *(void *)(a1 + *(int *)(v32 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v32 + 20));
        swift_retain();
        break;
      case 7u:
        uint64_t v33 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v33;
        *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
        uint64_t v34 = a2[4];
        *(void *)(a1 + 24) = a2[3];
        *(void *)(a1 + 32) = v34;
        uint64_t v35 = a2[6];
        *(void *)(a1 + 40) = a2[5];
        *(void *)(a1 + 48) = v35;
        uint64_t v36 = a2[8];
        *(void *)(a1 + 56) = a2[7];
        *(void *)(a1 + 64) = v36;
        uint64_t v37 = a2[10];
        *(void *)(a1 + 72) = a2[9];
        *(void *)(a1 + 80) = v37;
        uint64_t v38 = a2[12];
        *(void *)(a1 + 88) = a2[11];
        *(void *)(a1 + 96) = v38;
        *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
        *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
        *(void *)(a1 + 112) = a2[14];
        uint64_t v39 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
        uint64_t v83 = (uint64_t)a2 + v39;
        uint64_t v84 = a1 + v39;
        uint64_t v40 = sub_22D2BBFF0();
        uint64_t v82 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v82(v84, v83, v40);
        break;
      case 8u:
        uint64_t v41 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v41 - 8) + 16))(a1, a2, v41);
        uint64_t v42 = type metadata accessor for PBActivitySummarySeries(0);
        *(void *)(a1 + *(int *)(v42 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v42 + 20));
        swift_retain();
        break;
      case 9u:
        uint64_t v43 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v43 - 8) + 16))(a1, a2, v43);
        uint64_t v44 = type metadata accessor for PBPatientMeta(0);
        *(void *)(a1 + *(int *)(v44 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v44 + 20));
        swift_retain();
        break;
      case 0xAu:
        *(void *)a1 = *a2;
        *(_DWORD *)(a1 + 8) = *((_DWORD *)a2 + 2);
        uint64_t v45 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
        uint64_t v46 = a1 + v45;
        uint64_t v47 = (uint64_t)a2 + v45;
        uint64_t v48 = sub_22D2BBFF0();
        uint64_t v49 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 16);
        swift_bridgeObjectRetain();
        v49(v46, v47, v48);
        break;
      case 0xBu:
        *(void *)a1 = *a2;
        uint64_t v50 = *(int *)(type metadata accessor for PBSleepSeries(0) + 20);
        uint64_t v51 = a1 + v50;
        uint64_t v52 = (uint64_t)a2 + v50;
        uint64_t v53 = sub_22D2BBFF0();
        uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 16);
        swift_bridgeObjectRetain();
        v54(v51, v52, v53);
        break;
      case 0xCu:
        uint64_t v55 = a2[1];
        *(void *)a1 = *a2;
        *(void *)(a1 + 8) = v55;
        *(void *)(a1 + 16) = a2[2];
        uint64_t v56 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
        uint64_t v57 = a1 + v56;
        uint64_t v58 = (uint64_t)a2 + v56;
        uint64_t v59 = sub_22D2BBFF0();
        uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v60(v57, v58, v59);
        break;
      case 0xDu:
        *(void *)a1 = *a2;
        uint64_t v61 = *(int *)(type metadata accessor for PBMedicationTrackings(0) + 20);
        uint64_t v62 = a1 + v61;
        uint64_t v63 = (uint64_t)a2 + v61;
        uint64_t v64 = sub_22D2BBFF0();
        uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 16);
        swift_bridgeObjectRetain();
        v65(v62, v63, v64);
        break;
      case 0xEu:
        *(void *)a1 = *a2;
        uint64_t v66 = *(int *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) + 20);
        uint64_t v67 = a1 + v66;
        uint64_t v68 = (uint64_t)a2 + v66;
        uint64_t v69 = sub_22D2BBFF0();
        uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 16);
        swift_bridgeObjectRetain();
        v70(v67, v68, v69);
        break;
      case 0xFu:
        *(void *)a1 = *a2;
        uint64_t v71 = *(int *)(type metadata accessor for PBMedicationTrackingSchedules(0) + 20);
        uint64_t v72 = a1 + v71;
        uint64_t v73 = (uint64_t)a2 + v71;
        uint64_t v74 = sub_22D2BBFF0();
        uint64_t v75 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 16);
        swift_bridgeObjectRetain();
        v75(v72, v73, v74);
        break;
      case 0x10u:
        *(void *)a1 = *a2;
        uint64_t v76 = *(int *)(type metadata accessor for PBActiveMedications(0) + 20);
        uint64_t v77 = a1 + v76;
        uint64_t v78 = (uint64_t)a2 + v76;
        uint64_t v79 = sub_22D2BBFF0();
        uint64_t v80 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16);
        swift_bridgeObjectRetain();
        v80(v77, v78, v79);
        break;
      default:
        uint64_t v6 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for PBTimeSeries(0);
        *(void *)(a1 + *(int *)(v7 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v7 + 20));
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PBTypedData.OneOf_Raw(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for PBTimeSeries(0);
      goto LABEL_12;
    case 1:
      uint64_t v4 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for PBCategorySeries(0);
      goto LABEL_12;
    case 2:
      uint64_t v5 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
      type metadata accessor for PBWorkout(0);
      goto LABEL_12;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
      goto LABEL_23;
    case 4:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBAllClinicalRecords(0);
      goto LABEL_22;
    case 5:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBECGs(0);
      goto LABEL_22;
    case 6:
      uint64_t v8 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(a1, v8);
      type metadata accessor for PBCycleTracking(0);
      goto LABEL_12;
    case 7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
      goto LABEL_23;
    case 8:
      uint64_t v9 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
      type metadata accessor for PBActivitySummarySeries(0);
      goto LABEL_12;
    case 9:
      uint64_t v10 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a1, v10);
      type metadata accessor for PBPatientMeta(0);
LABEL_12:
      return swift_release();
    case 10:
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
      goto LABEL_23;
    case 11:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBSleepSeries(0);
      goto LABEL_22;
    case 12:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
      goto LABEL_23;
    case 13:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBMedicationTrackings(0);
      goto LABEL_22;
    case 14:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
      goto LABEL_22;
    case 15:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBMedicationTrackingSchedules(0);
      goto LABEL_22;
    case 16:
      swift_bridgeObjectRelease();
      uint64_t v7 = type metadata accessor for PBActiveMedications(0);
LABEL_22:
      uint64_t v6 = *(int *)(v7 + 20);
LABEL_23:
      uint64_t v11 = a1 + v6;
      uint64_t v12 = sub_22D2BBFF0();
      uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
      uint64_t result = v13(v11, v12);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for PBCategorySeries(0);
      *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
      swift_retain();
      break;
    case 2u:
      uint64_t v8 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = type metadata accessor for PBWorkout(0);
      *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
      swift_retain();
      break;
    case 3u:
      uint64_t v10 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v10;
      uint64_t v11 = *(void *)(a2 + 24);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      *(void *)(a1 + 24) = v11;
      uint64_t v12 = *(void *)(a2 + 40);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = v12;
      uint64_t v13 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
      uint64_t v14 = a1 + v13;
      uint64_t v15 = a2 + v13;
      uint64_t v16 = sub_22D2BBFF0();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
      break;
    case 4u:
      *(void *)a1 = *(void *)a2;
      uint64_t v18 = *(int *)(type metadata accessor for PBAllClinicalRecords(0) + 20);
      uint64_t v19 = a1 + v18;
      uint64_t v20 = a2 + v18;
      uint64_t v21 = sub_22D2BBFF0();
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16);
      swift_bridgeObjectRetain();
      v22(v19, v20, v21);
      break;
    case 5u:
      *(void *)a1 = *(void *)a2;
      uint64_t v23 = *(int *)(type metadata accessor for PBECGs(0) + 20);
      uint64_t v24 = a1 + v23;
      uint64_t v25 = a2 + v23;
      uint64_t v26 = sub_22D2BBFF0();
      uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 16);
      swift_bridgeObjectRetain();
      v27(v24, v25, v26);
      break;
    case 6u:
      uint64_t v28 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 16))(a1, a2, v28);
      uint64_t v29 = type metadata accessor for PBCycleTracking(0);
      *(void *)(a1 + *(int *)(v29 + 20)) = *(void *)(a2 + *(int *)(v29 + 20));
      swift_retain();
      break;
    case 7u:
      uint64_t v30 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v30;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t v31 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v31;
      uint64_t v32 = *(void *)(a2 + 48);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v32;
      uint64_t v33 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v33;
      uint64_t v34 = *(void *)(a2 + 80);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = v34;
      uint64_t v35 = *(void *)(a2 + 96);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = v35;
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v36 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
      uint64_t v80 = a2 + v36;
      uint64_t v81 = a1 + v36;
      uint64_t v37 = sub_22D2BBFF0();
      uint64_t v79 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v79(v81, v80, v37);
      break;
    case 8u:
      uint64_t v38 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 16))(a1, a2, v38);
      uint64_t v39 = type metadata accessor for PBActivitySummarySeries(0);
      *(void *)(a1 + *(int *)(v39 + 20)) = *(void *)(a2 + *(int *)(v39 + 20));
      swift_retain();
      break;
    case 9u:
      uint64_t v40 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 16))(a1, a2, v40);
      uint64_t v41 = type metadata accessor for PBPatientMeta(0);
      *(void *)(a1 + *(int *)(v41 + 20)) = *(void *)(a2 + *(int *)(v41 + 20));
      swift_retain();
      break;
    case 0xAu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v42 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
      uint64_t v43 = a1 + v42;
      uint64_t v44 = a2 + v42;
      uint64_t v45 = sub_22D2BBFF0();
      uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 16);
      swift_bridgeObjectRetain();
      v46(v43, v44, v45);
      break;
    case 0xBu:
      *(void *)a1 = *(void *)a2;
      uint64_t v47 = *(int *)(type metadata accessor for PBSleepSeries(0) + 20);
      uint64_t v48 = a1 + v47;
      uint64_t v49 = a2 + v47;
      uint64_t v50 = sub_22D2BBFF0();
      uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 16);
      swift_bridgeObjectRetain();
      v51(v48, v49, v50);
      break;
    case 0xCu:
      uint64_t v52 = *(void *)(a2 + 8);
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v52;
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      uint64_t v53 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
      uint64_t v54 = a1 + v53;
      uint64_t v55 = a2 + v53;
      uint64_t v56 = sub_22D2BBFF0();
      uint64_t v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v57(v54, v55, v56);
      break;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v58 = *(int *)(type metadata accessor for PBMedicationTrackings(0) + 20);
      uint64_t v59 = a1 + v58;
      uint64_t v60 = a2 + v58;
      uint64_t v61 = sub_22D2BBFF0();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 16);
      swift_bridgeObjectRetain();
      v62(v59, v60, v61);
      break;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v63 = *(int *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) + 20);
      uint64_t v64 = a1 + v63;
      uint64_t v65 = a2 + v63;
      uint64_t v66 = sub_22D2BBFF0();
      uint64_t v67 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 16);
      swift_bridgeObjectRetain();
      v67(v64, v65, v66);
      break;
    case 0xFu:
      *(void *)a1 = *(void *)a2;
      uint64_t v68 = *(int *)(type metadata accessor for PBMedicationTrackingSchedules(0) + 20);
      uint64_t v69 = a1 + v68;
      uint64_t v70 = a2 + v68;
      uint64_t v71 = sub_22D2BBFF0();
      uint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v71 - 8) + 16);
      swift_bridgeObjectRetain();
      v72(v69, v70, v71);
      break;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      uint64_t v73 = *(int *)(type metadata accessor for PBActiveMedications(0) + 20);
      uint64_t v74 = a1 + v73;
      uint64_t v75 = a2 + v73;
      uint64_t v76 = sub_22D2BBFF0();
      uint64_t v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 16);
      swift_bridgeObjectRetain();
      v77(v74, v75, v76);
      break;
    default:
      uint64_t v4 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = type metadata accessor for PBTimeSeries(0);
      *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_22D010254(a1, type metadata accessor for PBTypedData.OneOf_Raw);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for PBCategorySeries(0);
        *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
        swift_retain();
        break;
      case 2u:
        uint64_t v8 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
        uint64_t v9 = type metadata accessor for PBWorkout(0);
        *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
        swift_retain();
        break;
      case 3u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        uint64_t v10 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
        uint64_t v11 = a1 + v10;
        uint64_t v12 = a2 + v10;
        uint64_t v13 = sub_22D2BBFF0();
        uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v14(v11, v12, v13);
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v15 = *(int *)(type metadata accessor for PBAllClinicalRecords(0) + 20);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = sub_22D2BBFF0();
        uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16);
        swift_bridgeObjectRetain();
        v19(v16, v17, v18);
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        uint64_t v20 = *(int *)(type metadata accessor for PBECGs(0) + 20);
        uint64_t v21 = a1 + v20;
        uint64_t v22 = a2 + v20;
        uint64_t v23 = sub_22D2BBFF0();
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 16);
        swift_bridgeObjectRetain();
        v24(v21, v22, v23);
        break;
      case 6u:
        uint64_t v25 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(a1, a2, v25);
        uint64_t v26 = type metadata accessor for PBCycleTracking(0);
        *(void *)(a1 + *(int *)(v26 + 20)) = *(void *)(a2 + *(int *)(v26 + 20));
        swift_retain();
        break;
      case 7u:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(void *)(a1 + 24) = *(void *)(a2 + 24);
        *(void *)(a1 + 32) = *(void *)(a2 + 32);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = *(void *)(a2 + 48);
        *(void *)(a1 + 56) = *(void *)(a2 + 56);
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(void *)(a1 + 80) = *(void *)(a2 + 80);
        *(void *)(a1 + 88) = *(void *)(a2 + 88);
        *(void *)(a1 + 96) = *(void *)(a2 + 96);
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
        uint64_t v27 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v27;
        uint64_t v28 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
        uint64_t v71 = a2 + v28;
        uint64_t v72 = a1 + v28;
        uint64_t v29 = sub_22D2BBFF0();
        uint64_t v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v70(v72, v71, v29);
        break;
      case 8u:
        uint64_t v30 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(a1, a2, v30);
        uint64_t v31 = type metadata accessor for PBActivitySummarySeries(0);
        *(void *)(a1 + *(int *)(v31 + 20)) = *(void *)(a2 + *(int *)(v31 + 20));
        swift_retain();
        break;
      case 9u:
        uint64_t v32 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 16))(a1, a2, v32);
        uint64_t v33 = type metadata accessor for PBPatientMeta(0);
        *(void *)(a1 + *(int *)(v33 + 20)) = *(void *)(a2 + *(int *)(v33 + 20));
        swift_retain();
        break;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v34 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
        uint64_t v35 = a1 + v34;
        uint64_t v36 = a2 + v34;
        uint64_t v37 = sub_22D2BBFF0();
        uint64_t v38 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 16);
        swift_bridgeObjectRetain();
        v38(v35, v36, v37);
        break;
      case 0xBu:
        *(void *)a1 = *(void *)a2;
        uint64_t v39 = *(int *)(type metadata accessor for PBSleepSeries(0) + 20);
        uint64_t v40 = a1 + v39;
        uint64_t v41 = a2 + v39;
        uint64_t v42 = sub_22D2BBFF0();
        uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16);
        swift_bridgeObjectRetain();
        v43(v40, v41, v42);
        break;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(void *)(a1 + 8) = *(void *)(a2 + 8);
        *(void *)(a1 + 16) = *(void *)(a2 + 16);
        uint64_t v44 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
        uint64_t v45 = a1 + v44;
        uint64_t v46 = a2 + v44;
        uint64_t v47 = sub_22D2BBFF0();
        uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v48(v45, v46, v47);
        break;
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        uint64_t v49 = *(int *)(type metadata accessor for PBMedicationTrackings(0) + 20);
        uint64_t v50 = a1 + v49;
        uint64_t v51 = a2 + v49;
        uint64_t v52 = sub_22D2BBFF0();
        uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 16);
        swift_bridgeObjectRetain();
        v53(v50, v51, v52);
        break;
      case 0xEu:
        *(void *)a1 = *(void *)a2;
        uint64_t v54 = *(int *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) + 20);
        uint64_t v55 = a1 + v54;
        uint64_t v56 = a2 + v54;
        uint64_t v57 = sub_22D2BBFF0();
        uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 16);
        swift_bridgeObjectRetain();
        v58(v55, v56, v57);
        break;
      case 0xFu:
        *(void *)a1 = *(void *)a2;
        uint64_t v59 = *(int *)(type metadata accessor for PBMedicationTrackingSchedules(0) + 20);
        uint64_t v60 = a1 + v59;
        uint64_t v61 = a2 + v59;
        uint64_t v62 = sub_22D2BBFF0();
        uint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v62 - 8) + 16);
        swift_bridgeObjectRetain();
        v63(v60, v61, v62);
        break;
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        uint64_t v64 = *(int *)(type metadata accessor for PBActiveMedications(0) + 20);
        uint64_t v65 = a1 + v64;
        uint64_t v66 = a2 + v64;
        uint64_t v67 = sub_22D2BBFF0();
        uint64_t v68 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v67 - 8) + 16);
        swift_bridgeObjectRetain();
        v68(v65, v66, v67);
        break;
      default:
        uint64_t v4 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = type metadata accessor for PBTimeSeries(0);
        *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t initializeWithTake for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v6 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for PBCategorySeries(0);
      *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
      break;
    case 2u:
      uint64_t v8 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
      uint64_t v9 = type metadata accessor for PBWorkout(0);
      *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
      break;
    case 3u:
      long long v10 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v10;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      uint64_t v11 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
      uint64_t v12 = a1 + v11;
      uint64_t v13 = a2 + v11;
      uint64_t v14 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      break;
    case 4u:
      *(void *)a1 = *(void *)a2;
      uint64_t v15 = *(int *)(type metadata accessor for PBAllClinicalRecords(0) + 20);
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
      break;
    case 5u:
      *(void *)a1 = *(void *)a2;
      uint64_t v19 = *(int *)(type metadata accessor for PBECGs(0) + 20);
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
      break;
    case 6u:
      uint64_t v23 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
      uint64_t v24 = type metadata accessor for PBCycleTracking(0);
      *(void *)(a1 + *(int *)(v24 + 20)) = *(void *)(a2 + *(int *)(v24 + 20));
      break;
    case 7u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
      uint64_t v25 = *(void *)(a2 + 112);
      *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
      *(void *)(a1 + 112) = v25;
      uint64_t v26 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
      uint64_t v27 = a1 + v26;
      uint64_t v28 = a2 + v26;
      uint64_t v29 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
      break;
    case 8u:
      uint64_t v30 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32))(a1, a2, v30);
      uint64_t v31 = type metadata accessor for PBActivitySummarySeries(0);
      *(void *)(a1 + *(int *)(v31 + 20)) = *(void *)(a2 + *(int *)(v31 + 20));
      break;
    case 9u:
      uint64_t v32 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(a1, a2, v32);
      uint64_t v33 = type metadata accessor for PBPatientMeta(0);
      *(void *)(a1 + *(int *)(v33 + 20)) = *(void *)(a2 + *(int *)(v33 + 20));
      break;
    case 0xAu:
      *(void *)a1 = *(void *)a2;
      *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
      uint64_t v34 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
      uint64_t v35 = a1 + v34;
      uint64_t v36 = a2 + v34;
      uint64_t v37 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
      break;
    case 0xBu:
      *(void *)a1 = *(void *)a2;
      uint64_t v38 = *(int *)(type metadata accessor for PBSleepSeries(0) + 20);
      uint64_t v39 = a1 + v38;
      uint64_t v40 = a2 + v38;
      uint64_t v41 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
      break;
    case 0xCu:
      *(void *)a1 = *(void *)a2;
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
      uint64_t v42 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
      uint64_t v43 = a1 + v42;
      uint64_t v44 = a2 + v42;
      uint64_t v45 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
      break;
    case 0xDu:
      *(void *)a1 = *(void *)a2;
      uint64_t v46 = *(int *)(type metadata accessor for PBMedicationTrackings(0) + 20);
      uint64_t v47 = a1 + v46;
      uint64_t v48 = a2 + v46;
      uint64_t v49 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v48, v49);
      break;
    case 0xEu:
      *(void *)a1 = *(void *)a2;
      uint64_t v50 = *(int *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) + 20);
      uint64_t v51 = a1 + v50;
      uint64_t v52 = a2 + v50;
      uint64_t v53 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
      break;
    case 0xFu:
      *(void *)a1 = *(void *)a2;
      uint64_t v54 = *(int *)(type metadata accessor for PBMedicationTrackingSchedules(0) + 20);
      uint64_t v55 = a1 + v54;
      uint64_t v56 = a2 + v54;
      uint64_t v57 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
      break;
    case 0x10u:
      *(void *)a1 = *(void *)a2;
      uint64_t v58 = *(int *)(type metadata accessor for PBActiveMedications(0) + 20);
      uint64_t v59 = a1 + v58;
      uint64_t v60 = a2 + v58;
      uint64_t v61 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
      break;
    default:
      uint64_t v4 = sub_22D2BBFF0();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
      uint64_t v5 = type metadata accessor for PBTimeSeries(0);
      *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_22D010254(a1, type metadata accessor for PBTypedData.OneOf_Raw);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v6 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for PBCategorySeries(0);
        *(void *)(a1 + *(int *)(v7 + 20)) = *(void *)(a2 + *(int *)(v7 + 20));
        break;
      case 2u:
        uint64_t v8 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a1, a2, v8);
        uint64_t v9 = type metadata accessor for PBWorkout(0);
        *(void *)(a1 + *(int *)(v9 + 20)) = *(void *)(a2 + *(int *)(v9 + 20));
        break;
      case 3u:
        long long v10 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v10;
        *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
        uint64_t v11 = *(int *)(type metadata accessor for PBCharacteristics(0) + 28);
        uint64_t v12 = a1 + v11;
        uint64_t v13 = a2 + v11;
        uint64_t v14 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
        break;
      case 4u:
        *(void *)a1 = *(void *)a2;
        uint64_t v15 = *(int *)(type metadata accessor for PBAllClinicalRecords(0) + 20);
        uint64_t v16 = a1 + v15;
        uint64_t v17 = a2 + v15;
        uint64_t v18 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(v16, v17, v18);
        break;
      case 5u:
        *(void *)a1 = *(void *)a2;
        uint64_t v19 = *(int *)(type metadata accessor for PBECGs(0) + 20);
        uint64_t v20 = a1 + v19;
        uint64_t v21 = a2 + v19;
        uint64_t v22 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
        break;
      case 6u:
        uint64_t v23 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 32))(a1, a2, v23);
        uint64_t v24 = type metadata accessor for PBCycleTracking(0);
        *(void *)(a1 + *(int *)(v24 + 20)) = *(void *)(a2 + *(int *)(v24 + 20));
        break;
      case 7u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
        uint64_t v25 = *(void *)(a2 + 112);
        *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
        *(void *)(a1 + 112) = v25;
        uint64_t v26 = *(int *)(type metadata accessor for PBECGMeasurement(0) + 56);
        uint64_t v27 = a1 + v26;
        uint64_t v28 = a2 + v26;
        uint64_t v29 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
        break;
      case 8u:
        uint64_t v30 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 32))(a1, a2, v30);
        uint64_t v31 = type metadata accessor for PBActivitySummarySeries(0);
        *(void *)(a1 + *(int *)(v31 + 20)) = *(void *)(a2 + *(int *)(v31 + 20));
        break;
      case 9u:
        uint64_t v32 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 32))(a1, a2, v32);
        uint64_t v33 = type metadata accessor for PBPatientMeta(0);
        *(void *)(a1 + *(int *)(v33 + 20)) = *(void *)(a2 + *(int *)(v33 + 20));
        break;
      case 0xAu:
        *(void *)a1 = *(void *)a2;
        *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
        uint64_t v34 = *(int *)(type metadata accessor for PBSleepSummary(0) + 24);
        uint64_t v35 = a1 + v34;
        uint64_t v36 = a2 + v34;
        uint64_t v37 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 32))(v35, v36, v37);
        break;
      case 0xBu:
        *(void *)a1 = *(void *)a2;
        uint64_t v38 = *(int *)(type metadata accessor for PBSleepSeries(0) + 20);
        uint64_t v39 = a1 + v38;
        uint64_t v40 = a2 + v38;
        uint64_t v41 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32))(v39, v40, v41);
        break;
      case 0xCu:
        *(void *)a1 = *(void *)a2;
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        uint64_t v42 = *(int *)(type metadata accessor for PBHistogramSeries(0) + 24);
        uint64_t v43 = a1 + v42;
        uint64_t v44 = a2 + v42;
        uint64_t v45 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 32))(v43, v44, v45);
        break;
      case 0xDu:
        *(void *)a1 = *(void *)a2;
        uint64_t v46 = *(int *)(type metadata accessor for PBMedicationTrackings(0) + 20);
        uint64_t v47 = a1 + v46;
        uint64_t v48 = a2 + v46;
        uint64_t v49 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 32))(v47, v48, v49);
        break;
      case 0xEu:
        *(void *)a1 = *(void *)a2;
        uint64_t v50 = *(int *)(type metadata accessor for PBMedicationTrackingDoseEvents(0) + 20);
        uint64_t v51 = a1 + v50;
        uint64_t v52 = a2 + v50;
        uint64_t v53 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 32))(v51, v52, v53);
        break;
      case 0xFu:
        *(void *)a1 = *(void *)a2;
        uint64_t v54 = *(int *)(type metadata accessor for PBMedicationTrackingSchedules(0) + 20);
        uint64_t v55 = a1 + v54;
        uint64_t v56 = a2 + v54;
        uint64_t v57 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
        break;
      case 0x10u:
        *(void *)a1 = *(void *)a2;
        uint64_t v58 = *(int *)(type metadata accessor for PBActiveMedications(0) + 20);
        uint64_t v59 = a1 + v58;
        uint64_t v60 = a2 + v58;
        uint64_t v61 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 32))(v59, v60, v61);
        break;
      default:
        uint64_t v4 = sub_22D2BBFF0();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
        uint64_t v5 = type metadata accessor for PBTimeSeries(0);
        *(void *)(a1 + *(int *)(v5 + 20)) = *(void *)(a2 + *(int *)(v5 + 20));
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PBTypedData.OneOf_Raw(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_22D016764()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_22D016774()
{
  uint64_t result = type metadata accessor for PBTimeSeries(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PBCategorySeries(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PBWorkout(319);
      if (v3 <= 0x3F)
      {
        uint64_t result = type metadata accessor for PBCharacteristics(319);
        if (v4 <= 0x3F)
        {
          uint64_t result = type metadata accessor for PBAllClinicalRecords(319);
          if (v5 <= 0x3F)
          {
            uint64_t result = type metadata accessor for PBECGs(319);
            if (v6 <= 0x3F)
            {
              uint64_t result = type metadata accessor for PBCycleTracking(319);
              if (v7 <= 0x3F)
              {
                uint64_t result = type metadata accessor for PBECGMeasurement(319);
                if (v8 <= 0x3F)
                {
                  uint64_t result = type metadata accessor for PBActivitySummarySeries(319);
                  if (v9 <= 0x3F)
                  {
                    uint64_t result = type metadata accessor for PBPatientMeta(319);
                    if (v10 <= 0x3F)
                    {
                      uint64_t result = type metadata accessor for PBSleepSummary(319);
                      if (v11 <= 0x3F)
                      {
                        uint64_t result = type metadata accessor for PBSleepSeries(319);
                        if (v12 <= 0x3F)
                        {
                          uint64_t result = type metadata accessor for PBHistogramSeries(319);
                          if (v13 <= 0x3F)
                          {
                            uint64_t result = type metadata accessor for PBMedicationTrackings(319);
                            if (v14 <= 0x3F)
                            {
                              uint64_t result = type metadata accessor for PBMedicationTrackingDoseEvents(319);
                              if (v15 <= 0x3F)
                              {
                                uint64_t result = type metadata accessor for PBMedicationTrackingSchedules(319);
                                if (v16 <= 0x3F)
                                {
                                  uint64_t result = type metadata accessor for PBActiveMedications(319);
                                  if (v17 <= 0x3F)
                                  {
                                    swift_initEnumMetadataMultiPayload();
                                    return 0;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBPlainText(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for PBPlainText(uint64_t a1)
{
  uint64_t v2 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return swift_release();
}

uint64_t initializeWithCopy for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReference(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D016F1C);
}

uint64_t __swift_get_extra_inhabitant_index_52Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PBReference(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D016FF4);
}

uint64_t __swift_store_extra_inhabitant_index_53Tm(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBFF0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_22D0170B4()
{
  uint64_t result = sub_22D2BBFF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PBReference.OneOf_Metadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v6;
    *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
    uint64_t v7 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v7;
    uint64_t v8 = a2[6];
    *(void *)(a1 + 40) = a2[5];
    *(void *)(a1 + 48) = v8;
    uint64_t v9 = a2[8];
    *(void *)(a1 + 56) = a2[7];
    *(void *)(a1 + 64) = v9;
    uint64_t v10 = a2[10];
    *(void *)(a1 + 72) = a2[9];
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = a2[11];
    *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
    *(unsigned char *)(a1 + 112) = *((unsigned char *)a2 + 112);
    *(void *)(a1 + 104) = a2[13];
    uint64_t v11 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
    uint64_t v16 = (uint64_t)a2 + v11;
    unint64_t v17 = (char *)v4 + v11;
    uint64_t v12 = sub_22D2BBFF0();
    unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v13(v17, v16, v12);
  }
  return v4;
}

uint64_t destroy for PBReference.OneOf_Metadata(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  uint64_t v3 = sub_22D2BBFF0();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
  return v4(v2, v3);
}

uint64_t initializeWithCopy for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v9 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  uint64_t v13 = a2 + v9;
  uint64_t v14 = a1 + v9;
  uint64_t v10 = sub_22D2BBFF0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11(v14, v13, v10);
  return a1;
}

uint64_t assignWithCopy for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v4;
  uint64_t v5 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}

uint64_t initializeWithTake for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  uint64_t v4 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v4;
  uint64_t v5 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v9 = *(int *)(type metadata accessor for PBECGMeta(0) + 52);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBECGMeta(0);
  return MEMORY[0x270FA0340](a1, a2, v4, sub_22D017804);
}

uint64_t sub_22D017804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BBFF0();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 52);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PBReference.OneOf_Metadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PBECGMeta(0);
  return MEMORY[0x270FA0580](a1, a2, a3, v6, sub_22D01791C);
}

uint64_t sub_22D01791C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 52);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D0179C4()
{
  return 0;
}

uint64_t sub_22D0179CC(uint64_t a1)
{
  uint64_t result = type metadata accessor for PBECGMeta(319);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8);
    swift_initEnumMetadataSingleCase();
    uint64_t result = 0;
    *(_DWORD *)(*(void *)(a1 - 8) + 84) = *(_DWORD *)(v4 + 84);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBReferences(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = sub_22D2BBFF0();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t destroy for PBReferences(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for PBReferences(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_22D2BBFF0();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for PBReferences(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *initializeWithTake for PBReferences(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for PBReferences(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBReferences(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D017E14);
}

uint64_t sub_22D017E14(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BBFF0();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PBReferences(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D017ED8);
}

void *sub_22D017ED8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D017F80()
{
  return sub_22D017F90();
}

uint64_t sub_22D017F90()
{
  uint64_t result = sub_22D2BBFF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D018020()
{
  return type metadata accessor for PBTypedData._StorageClass(0);
}

void sub_22D018028()
{
  sub_22D0043D0(319, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_22D0043D0(319, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_22D01815C()
{
  return type metadata accessor for PBReference._StorageClass(0);
}

void sub_22D018164()
{
  sub_22D0043D0(319, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F)
  {
    sub_22D0043D0(319, &qword_26853DA00, type metadata accessor for PBReference.OneOf_Metadata, MEMORY[0x263F8D8F0]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_22D0182A8(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D018424(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

void sub_22D018368()
{
  if (!qword_26853DB40)
  {
    sub_22D2BC2F0();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853DB40);
    }
  }
}

unint64_t sub_22D0183D0()
{
  unint64_t result = qword_26853DB48;
  if (!qword_26853DB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DB48);
  }
  return result;
}

void sub_22D018424(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  if (!*a2)
  {
    sub_22D0043D0(255, a3, a4, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v6) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_22D01849C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D018504(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_22D0043D0(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22D018574(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D0043D0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_22D0185F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t sub_22D018654(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D0186BC(uint64_t a1)
{
  sub_22D0185F4(0, &qword_26853DC80, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22D018734(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v18 = sub_22D2BBC90();
  uint64_t v4 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    if (!v7) {
      return v8;
    }
    uint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t result = sub_22D24B7A4(0, v7 & ~(v7 >> 63), 0);
    if (v7 < 0) {
      break;
    }
    uint64_t v10 = 0;
    uint64_t v8 = v19;
    v16[1] = v2;
    unint64_t v17 = a1 & 0xC000000000000001;
    unint64_t v11 = a1;
    while (v7 != v10)
    {
      if (v17) {
        id v12 = (id)MEMORY[0x230F7AF90](v10, a1);
      }
      else {
        id v12 = *(id *)(a1 + 8 * v10 + 32);
      }
      uint64_t v13 = v12;
      id v14 = objc_msgSend(v12, sel_identifier);
      sub_22D2BBC70();

      uint64_t v19 = v8;
      unint64_t v2 = *(void *)(v8 + 16);
      unint64_t v15 = *(void *)(v8 + 24);
      if (v2 >= v15 >> 1)
      {
        sub_22D24B7A4(v15 > 1, v2 + 1, 1);
        uint64_t v8 = v19;
      }
      ++v10;
      *(void *)(v8 + 16) = v2 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v2, v6, v18);
      a1 = v11;
      if (v7 == v10) {
        return v8;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_22D01895C@<X0>(long long *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v29 = a3;
  uint64_t v27 = a1;
  uint64_t v5 = sub_22D2BBAA0();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v24 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = sub_22D2BB620();
  MEMORY[0x270FA5388](v10);
  sub_22D2BBC80();
  DiagnosticsTask = (int *)type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  uint64_t v12 = DiagnosticsTask[5];
  *(void *)(a4 + v12) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08850]), sel_init);
  uint64_t v23 = DiagnosticsTask[6];
  sub_22D2BB660();
  swift_allocObject();
  uint64_t v13 = sub_22D2BB650();
  id v14 = (uint64_t (*)(uint64_t))MEMORY[0x263F06130];
  sub_22D021D7C(0, &qword_26853DD70, MEMORY[0x263F06130], MEMORY[0x263F8E0F8]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22D2BFF40;
  sub_22D2BB610();
  uint64_t v30 = v15;
  sub_22D019888(&qword_26853DD78, MEMORY[0x263F06130]);
  sub_22D021D7C(0, &qword_26853DD80, v14, MEMORY[0x263F8D488]);
  sub_22D022E78();
  sub_22D2BD280();
  sub_22D2BB630();
  *(void *)(a4 + v23) = v13;
  uint64_t v16 = NSTemporaryDirectory();
  sub_22D2BCBD0();

  sub_22D2BBA00();
  swift_bridgeObjectRelease();
  sub_22D2BBC40();
  unint64_t v17 = v24;
  sub_22D2BBA20();
  swift_bridgeObjectRelease();
  uint64_t v19 = v25;
  uint64_t v18 = v26;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(a4 + DiagnosticsTask[7], v17, v18);
  sub_22CFF8C10(v27, a4 + DiagnosticsTask[8]);
  *(void *)(a4 + DiagnosticsTask[9]) = v28;
  uint64_t v20 = a4 + DiagnosticsTask[10];
  uint64_t v21 = sub_22D2BBC30();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, v29, v21);
}

uint64_t sub_22D018D3C()
{
  uint64_t DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  uint64_t v91 = *(void *)(DiagnosticsTask - 8);
  uint64_t v2 = DiagnosticsTask - 8;
  uint64_t v90 = *(void *)(v91 + 64);
  MEMORY[0x270FA5388](DiagnosticsTask - 8);
  uint64_t v89 = (uint64_t)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021A10(0, &qword_26853DC88, (void (*)(uint64_t))sub_22D0197DC, (void (*)(void))sub_22D019854);
  uint64_t v79 = v4;
  uint64_t v80 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v76 = (char *)&v62 - v5;
  uint64_t v93 = sub_22D2BBE00();
  uint64_t v6 = *(void *)(v93 - 8);
  uint64_t v70 = *(void (**)(unint64_t, char *, uint64_t))(v6 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v93);
  uint64_t v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v62 - v10;
  sub_22D021604(0, &qword_26853DC90, type metadata accessor for QueryOutput, MEMORY[0x263EFDB28]);
  uint64_t v81 = v12;
  uint64_t v83 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v78 = (char *)&v62 - v13;
  sub_22D0198F0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v87 = v14;
  uint64_t v88 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v77 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = MEMORY[0x263F8EE60] + 8;
  sub_22D0223F0(0, &qword_26853DCA8, (void (*)(uint64_t))sub_22D0198F0, (void (*)(void))sub_22D019A0C);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v85 = v17;
  uint64_t v86 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v82 = (char *)&v62 - v19;
  uint64_t v92 = sub_22D2BBC30();
  uint64_t v20 = *(void *)(v92 - 8);
  uint64_t v21 = *(void *)(v20 + 64);
  uint64_t v22 = MEMORY[0x270FA5388](v92);
  uint64_t v23 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v21;
  MEMORY[0x270FA5388](v22);
  uint64_t v75 = (char *)&v62 - v24;
  sub_22D2BBC20();
  uint64_t v25 = sub_22D019A40();
  uint64_t v65 = v25;
  uint64_t v68 = v2;
  uint64_t v26 = (void *)(v0 + *(int *)(v2 + 40));
  uint64_t v27 = v0;
  uint64_t v67 = v0;
  uint64_t v28 = __swift_project_boxed_opaque_existential_1(v26, v26[3]) + 3;
  v96[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v96[4] = &off_26E0655E0;
  v96[0] = swift_allocObject();
  sub_22D01A08C((uint64_t)v28, v96[0] + 16);
  uint64_t v64 = v11;
  sub_22D2BBDA0();
  uint64_t v29 = v27 + *(int *)(v2 + 48);
  uint64_t v95 = v25;
  sub_22CFF4B00((uint64_t)v96, (uint64_t)&v94);
  uint64_t v30 = v6;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v32 = v9;
  uint64_t v33 = v93;
  v31(v9, v11, v93);
  uint64_t v72 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v73 = v20 + 16;
  uint64_t v66 = v23;
  uint64_t v34 = v92;
  v72(v23, v29, v92);
  uint64_t v35 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v36 = v30;
  uint64_t v63 = v30;
  uint64_t v37 = (v35 + 56) & ~v35;
  uint64_t v38 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v74 = v20;
  unint64_t v39 = ((unint64_t)v70 + v38 + v37) & ~v38;
  uint64_t v40 = swift_allocObject();
  sub_22CFF8C10(&v94, v40 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v40 + v37, v32, v33);
  uint64_t v41 = *(void (**)(unint64_t, char *, uint64_t))(v20 + 32);
  uint64_t v69 = v20 + 32;
  uint64_t v70 = v41;
  v41(v40 + v39, v23, v34);
  sub_22D2BC5D0();
  sub_22D0197DC();
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_22D01975C();
  sub_22D019854();
  sub_22D019888(&qword_26AEC2E68, (void (*)(uint64_t))sub_22D01975C);
  uint64_t v42 = v76;
  sub_22D2BC830();
  swift_release();
  sub_22D01BC34();
  uint64_t v43 = v79;
  uint64_t v44 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v43);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v93);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
  swift_release();
  uint64_t v45 = v67;
  id v46 = sub_22D01A0E8(v67 + *(int *)(v68 + 36), *(void *)(v67 + *(int *)(v68 + 44)), v44);
  swift_release();
  v96[0] = v46;
  type metadata accessor for QueryOutput(0);
  uint64_t v47 = v78;
  sub_22D2BC780();
  swift_release();
  sub_22D019984();
  uint64_t v48 = v77;
  uint64_t v49 = v81;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v47, v49);
  uint64_t v50 = v89;
  sub_22D021744(v45, v89, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  uint64_t v51 = v66;
  uint64_t v52 = v75;
  uint64_t v53 = v92;
  v72(v66, (uint64_t)v75, v92);
  unint64_t v54 = (*(unsigned __int8 *)(v91 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
  unint64_t v55 = (v90 + v38 + v54) & ~v38;
  uint64_t v56 = swift_allocObject();
  sub_22D02159C(v50, v56 + v54, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  v70(v56 + v55, v51, v53);
  sub_22D019A0C();
  uint64_t v57 = v82;
  uint64_t v58 = v87;
  sub_22D2BC7F0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v88 + 8))(v48, v58);
  sub_22D01BF88();
  uint64_t v59 = v85;
  uint64_t v60 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v57, v59);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v53);
  return v60;
}

uint64_t type metadata accessor for ClinicalSharingQueryDiagnosticsTask(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DDB0);
}

void sub_22D01975C()
{
  if (!qword_26AEC2E70)
  {
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v0 = sub_22D2BC5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E70);
    }
  }
}

void sub_22D0197DC()
{
  if (!qword_26AEC1D98)
  {
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v0 = sub_22D2BC5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1D98);
    }
  }
}

uint64_t sub_22D019854()
{
  return sub_22D019888(&qword_26AEC1D90, (void (*)(uint64_t))sub_22D0197DC);
}

uint64_t sub_22D019888(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for QueryOutput(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DDA0);
}

void sub_22D0198F0()
{
  if (!qword_26853DC98)
  {
    sub_22D021604(255, &qword_26853DC90, type metadata accessor for QueryOutput, MEMORY[0x263EFDB28]);
    sub_22D019984();
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DC98);
    }
  }
}

unint64_t sub_22D019984()
{
  unint64_t result = qword_26853DCA0;
  if (!qword_26853DCA0)
  {
    sub_22D021604(255, &qword_26853DC90, type metadata accessor for QueryOutput, MEMORY[0x263EFDB28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DCA0);
  }
  return result;
}

uint64_t sub_22D019A0C()
{
  return sub_22D019888(&qword_26853DCB0, (void (*)(uint64_t))sub_22D0198F0);
}

uint64_t sub_22D019A40()
{
  uint64_t DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  uint64_t v2 = DiagnosticsTask - 8;
  uint64_t v38 = *(void *)(DiagnosticsTask - 8);
  uint64_t v37 = *(void *)(v38 + 64);
  MEMORY[0x270FA5388](DiagnosticsTask);
  uint64_t v36 = (uint64_t)v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021DE0();
  v32[0] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021F18();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  MEMORY[0x270FA5388](v8);
  unint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0220CC();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v39 = v12;
  uint64_t v40 = v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v35 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (void *)__swift_project_boxed_opaque_existential_1((void *)(v0 + *(int *)(v2 + 40)), *(void *)(v0 + *(int *)(v2 + 40) + 24))[2];
  v42[3] = &type metadata for ClinicalSharingAccountStore;
  v42[4] = &off_26E05DAE8;
  v42[0] = v15;
  uint64_t v16 = (void *)*__swift_project_boxed_opaque_existential_1(v42, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  *(void *)(swift_allocObject() + 16) = v16;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDE20];
  sub_22D022014(0, (unint64_t *)&qword_26AEC1E18, MEMORY[0x263EFDE20]);
  sub_22D021ED4((unint64_t *)&qword_26AEC1E10, (unint64_t *)&qword_26AEC1E18, v17);
  id v18 = v15;
  id v19 = v16;
  sub_22D2BC700();
  sub_22D019888(&qword_26AEC1E30, (void (*)(uint64_t))sub_22D021DE0);
  uint64_t v20 = v32[0];
  uint64_t v21 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v20);
  uint64_t v41 = v21;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D022014(0, &qword_26AEC1DC8, MEMORY[0x263EFDCF0]);
  sub_22D021D7C(0, (unint64_t *)&qword_26AEC1ED0, (uint64_t (*)(uint64_t))sub_22D021E94, MEMORY[0x263F8D488]);
  sub_22D021ED4((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, v22);
  sub_22D2BC780();
  swift_release();
  sub_22D019888(&qword_26AEC1CA8, (void (*)(uint64_t))sub_22D021F18);
  uint64_t v23 = v33;
  uint64_t v24 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v23);
  uint64_t v41 = v24;
  uint64_t v25 = v36;
  sub_22D021744(v32[1], v36, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  unint64_t v26 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  uint64_t v27 = swift_allocObject();
  sub_22D02159C(v25, v27 + v26, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  sub_22D2BC5D0();
  sub_22D0197DC();
  sub_22D019854();
  uint64_t v28 = v35;
  sub_22D2BC830();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  sub_22D019888(&qword_26853DD30, (void (*)(uint64_t))sub_22D0220CC);
  uint64_t v29 = v39;
  uint64_t v30 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v29);
  return v30;
}

uint64_t sub_22D01A03C()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 5));
  return MEMORY[0x270FA0238](v0, 80, 7);
}

uint64_t sub_22D01A08C(uint64_t a1, uint64_t a2)
{
  return a2;
}

id sub_22D01A0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a2;
  uint64_t v45 = a1;
  sub_22D021604(0, &qword_26853DCD0, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDC00]);
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v42 = (char *)&v40 - v5;
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for PublisherOutputWriter();
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v41 + 64);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v40 - v14;
  uint64_t v49 = a3;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v17 = result;
    unsigned int v18 = objc_msgSend(result, sel_isAppleInternalInstall);

    sub_22D01975C();
    uint64_t v20 = v19;
    uint64_t v21 = sub_22D019888(&qword_26AEC2E68, (void (*)(uint64_t))sub_22D01975C);
    uint64_t v40 = v20;
    uint64_t v46 = v21;
    uint64_t v22 = sub_22D2BC720();
    if (!v18) {
      return (id)v22;
    }
    uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v23(v9, v45, v6);
    v23(v13, (uint64_t)v9, v6);
    id v24 = objc_allocWithZone(MEMORY[0x263F08850]);
    swift_retain();
    id v25 = objc_msgSend(v24, sel_init);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)&v13[*(int *)(v10 + 20)] = v25;
    sub_22D02159C((uint64_t)v13, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
    char v26 = v47;
    if (v47)
    {
      uint64_t v27 = swift_allocObject();
      *(void *)(v27 + 16) = sub_22D08F460;
      *(void *)(v27 + 24) = 0;
      *(void *)(v27 + 32) = 1852797802;
      *(void *)(v27 + 40) = 0xE400000000000000;
      uint64_t v48 = v22;
      sub_22D021744((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
      unint64_t v28 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = sub_22D026488;
      *(void *)(v29 + 24) = v27;
      sub_22D02159C((uint64_t)v13, v29 + v28, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
      type metadata accessor for ClinicalSharingQueryOutput(0);
      swift_retain();
      uint64_t v30 = v42;
      sub_22D2BC7F0();
      swift_release();
      sub_22D0217C8();
      uint64_t v31 = v44;
      uint64_t v32 = sub_22D2BC720();
      (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v31);
      swift_release_n();
      LOBYTE(v27) = v47;
      swift_release();
      uint64_t v22 = v32;
      if ((v27 & 2) == 0)
      {
LABEL_8:
        uint64_t v48 = v22;
        uint64_t v39 = sub_22D2BC720();
        swift_release();
        sub_22D0216C0((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
        return (id)v39;
      }
    }
    else
    {
      swift_release();
      if ((v26 & 2) == 0) {
        goto LABEL_8;
      }
    }
    uint64_t v33 = (void *)swift_allocObject();
    v33[2] = sub_22D08F59C;
    v33[3] = 0;
    v33[4] = 25200;
    v33[5] = 0xE200000000000000;
    uint64_t v48 = v22;
    sub_22D021744((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
    unint64_t v34 = (*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    uint64_t v35 = swift_allocObject();
    *(void *)(v35 + 16) = sub_22D021724;
    *(void *)(v35 + 24) = v33;
    sub_22D02159C((uint64_t)v13, v35 + v34, (uint64_t (*)(void))type metadata accessor for PublisherOutputWriter);
    type metadata accessor for ClinicalSharingQueryOutput(0);
    swift_retain();
    swift_retain();
    uint64_t v36 = v42;
    sub_22D2BC7F0();
    swift_release();
    sub_22D0217C8();
    uint64_t v37 = v44;
    uint64_t v38 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v36, v37);
    swift_release_n();
    swift_release();
    uint64_t v22 = v38;
    goto LABEL_8;
  }
  __break(1u);
  return result;
}

uint64_t sub_22D01A770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D021D7C(0, &qword_26853D7B0, type metadata accessor for PBDateRange, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = &v19[-v5];
  uint64_t v7 = type metadata accessor for PBDateRange(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  MEMORY[0x270FA5388](Output - 8);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22D021744(a1, (uint64_t)v13, type metadata accessor for ClinicalSharingQueryOutput);
  uint64_t v14 = *(void *)&v13[*(int *)(type metadata accessor for PBTypedData(0) + 20)];
  swift_beginAccess();
  char v15 = *(unsigned char *)(v14 + 24);
  *(void *)a2 = *(void *)(v14 + 16);
  *(unsigned char *)(a2 + 8) = v15;
  uint64_t v16 = v14
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D022D7C(v16, (uint64_t)v6, &qword_26853D7B0, type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    *(void *)uint64_t v10 = 0;
    *((void *)v10 + 1) = 0xE000000000000000;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = 0xE000000000000000;
    *((void *)v10 + 4) = 0;
    v10[40] = 1;
    sub_22D2BBFE0();
    sub_22D022DFC((uint64_t)v6, &qword_26853D7B0, type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D02159C((uint64_t)v6, (uint64_t)v10, type metadata accessor for PBDateRange);
  }
  sub_22D0216C0((uint64_t)v13, type metadata accessor for ClinicalSharingQueryOutput);
  uint64_t v17 = type metadata accessor for QueryOutput(0);
  return sub_22D02159C((uint64_t)v10, a2 + *(int *)(v17 + 20), type metadata accessor for PBDateRange);
}

uint64_t sub_22D01AA50(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBC30();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = *a1;
  uint64_t DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a2 + *(int *)(DiagnosticsTask + 40), v4);
  sub_22D2BBC20();
  sub_22D2BBBA0();
  double v14 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v15 = *(void *)(a2 + *(int *)(DiagnosticsTask + 36));
  swift_bridgeObjectRetain();
  sub_22D020E18((uint64_t)v10, v15, v11, (uint64_t *)v17, v14);
  swift_bridgeObjectRelease();
  sub_22D01AC14(v17, 0x2E7972616D6D7573, 0xEC0000006E6F736ALL);
  return sub_22D021478((uint64_t)v17);
}

uint64_t sub_22D01AC14(long long *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v21 = a2;
  uint64_t v22 = a3;
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_22D2BBAA0();
  uint64_t v23 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v10 = a1[3];
  long long v27 = a1[2];
  long long v28 = v10;
  long long v29 = a1[4];
  long long v11 = a1[1];
  long long v25 = *a1;
  long long v26 = v11;
  uint64_t v12 = *(void **)(v5 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 20));
  double v13 = (void *)sub_22D2BBA10();
  id v24 = 0;
  LODWORD(v12) = objc_msgSend(v12, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v13, 1, 0, &v24, v21, v22);

  id v14 = v24;
  if (v12)
  {
    sub_22D0214E0();
    id v15 = v14;
    uint64_t result = sub_22D2BB640();
    if (!v4)
    {
      uint64_t v18 = result;
      unint64_t v19 = v17;
      sub_22D2BBA30();
      sub_22D2BBB40();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
      return sub_22CFF5630(v18, v19);
    }
  }
  else
  {
    id v20 = v24;
    sub_22D2BB9C0();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_22D01AE38(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  v22[2] = *(id *)MEMORY[0x263EF8340];
  uint64_t v7 = sub_22D2BBAA0();
  uint64_t v21 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = a1;
  long long v10 = *(void **)(v5 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 20));
  long long v11 = (void *)sub_22D2BBA10();
  v22[0] = 0;
  LODWORD(v10) = objc_msgSend(v10, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v11, 1, 0, v22, v19, v20);

  id v12 = v22[0];
  if (v10)
  {
    sub_22D021D7C(0, &qword_26853DD58, type metadata accessor for AccountSummary, MEMORY[0x263F8D488]);
    sub_22D022CAC();
    id v13 = v12;
    uint64_t result = sub_22D2BB640();
    if (!v4)
    {
      uint64_t v16 = result;
      unint64_t v17 = v15;
      sub_22D2BBA30();
      sub_22D2BBB40();
      (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v7);
      return sub_22CFF5630(v16, v17);
    }
  }
  else
  {
    id v18 = v22[0];
    sub_22D2BB9C0();

    return swift_willThrow();
  }
  return result;
}

uint64_t sub_22D01B080@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v23 = a3;
  uint64_t DiagnosticsTask = type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0);
  uint64_t v6 = DiagnosticsTask - 8;
  uint64_t v22 = *(void *)(DiagnosticsTask - 8);
  uint64_t v7 = *(void *)(v22 + 64);
  MEMORY[0x270FA5388](DiagnosticsTask);
  sub_22D0223F0(0, &qword_26853DD38, (void (*)(uint64_t))sub_22D0197DC, (void (*)(void))sub_22D019854);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v12 = (char *)&v21 - v11;
  unint64_t v13 = *a1;
  id v14 = (id)*__swift_project_boxed_opaque_existential_1((void *)(a2 + *(int *)(v6 + 40)), *(void *)(a2 + *(int *)(v6 + 40) + 24));
  uint64_t v15 = sub_22D018734(v13);
  uint64_t v16 = sub_22D2A8F10(v15);

  swift_bridgeObjectRelease();
  uint64_t v24 = v16;
  sub_22D021744(a2, (uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  unint64_t v17 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v13;
  sub_22D02159C((uint64_t)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for ClinicalSharingQueryDiagnosticsTask);
  sub_22D0197DC();
  sub_22D019854();
  swift_bridgeObjectRetain();
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22D022680();
  uint64_t v19 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  *uint64_t v23 = v19;
  return result;
}

uint64_t sub_22D01B340@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *a1;
  if (a2 < 0 || (a2 & 0x4000000000000000) != 0)
  {
    unint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v8 = (uint64_t)sub_22D248E9C(v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
  }
  unint64_t v18 = v8;
  sub_22D01DAC4((uint64_t *)&v18);
  if (v4)
  {
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
    unint64_t v9 = v18;
    swift_bridgeObjectRetain();
    uint64_t v10 = (void *)sub_22D020AF8(v9, v7);
    swift_release();
    swift_bridgeObjectRelease();
    sub_22D01AE38(v10, 0x73746E756F636361, 0xED00006E6F736A2ELL);
    swift_bridgeObjectRelease();
    if ((*(unsigned char *)(a3 + *(int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) + 36)) & 4) != 0)
    {
      sub_22D021D7C(0, &qword_26853DD48, MEMORY[0x263F07508], MEMORY[0x263F8E0F8]);
      sub_22D2BBC90();
      uint64_t v12 = swift_allocObject();
      *(_OWORD *)(v12 + 16) = xmmword_22D2BFF40;
      sub_22D2BBC80();
      uint64_t v13 = sub_22D2BBEF0();
      id v14 = (void *)sub_22D0D30B4(MEMORY[0x263F8EE78]);
      swift_bridgeObjectRetain();
      uint64_t v15 = sub_22D022710(v14, v12, v13);
      swift_bridgeObjectRelease_n();
      uint64_t v16 = sub_22D01FA60(v15);
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      swift_arrayDestroy();
      uint64_t result = swift_deallocClassInstance();
      *a4 = v16;
    }
    else
    {
      *a4 = v7;
      return swift_bridgeObjectRetain();
    }
  }
  return result;
}

uint64_t sub_22D01B5D0@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  sub_22D021A10(0, (unint64_t *)&qword_26853DCE0, (void (*)(uint64_t))sub_22D021ADC, (void (*)(void))sub_22D021C70);
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v29 - v7;
  uint64_t v9 = sub_22D2BBC30();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_22D2BBE00();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF4B00(a1, (uint64_t)v34);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  uint64_t v17 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v34, v34[3]);
  MEMORY[0x270FA5388](v17);
  uint64_t v19 = (_OWORD *)((char *)&v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v20 + 16))(v19);
  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_22D0205BC(v21, v19, (uint64_t)v16, (uint64_t)v12);
  uint64_t v24 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
  uint64_t result = sub_22D23CEB0(v22, v24);
  v34[0] = result;
  if (v24 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_22D021BA8();
    sub_22D01975C();
    sub_22D019888(&qword_26853DD00, (void (*)(uint64_t))sub_22D021BA8);
    sub_22D019888(&qword_26AEC2E68, (void (*)(uint64_t))sub_22D01975C);
    sub_22D2BC880();
    swift_release();
    sub_22D021CF4();
    uint64_t v26 = v31;
    uint64_t v27 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v8, v26);
    uint64_t v28 = sub_22D23D8B4(v27, v22, v24);
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v32 = v28;
  }
  return result;
}

uint64_t sub_22D01B9F4()
{
  uint64_t v1 = sub_22D2BBE00();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = sub_22D2BBC30();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return MEMORY[0x270FA0238](v0, v10, v11);
}

uint64_t sub_22D01BB4C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_22D2BBE00() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(sub_22D2BBC30() - 8);
  uint64_t v7 = v1 + ((v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return sub_22D01B5D0(v1 + 16, v1 + v4, v7, a1);
}

unint64_t sub_22D01BC34()
{
  unint64_t result = qword_26853DCB8;
  if (!qword_26853DCB8)
  {
    sub_22D021A10(255, &qword_26853DC88, (void (*)(uint64_t))sub_22D0197DC, (void (*)(void))sub_22D019854);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DCB8);
  }
  return result;
}

uint64_t sub_22D01BCBC()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  uint64_t v5 = sub_22D2BBC30();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(v6 + 64);
  uint64_t v10 = v2 | v7 | 7;
  uint64_t v11 = v0 + v3;
  uint64_t v12 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);

  swift_release();
  uint64_t v13 = v11 + v1[9];
  uint64_t v14 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  __swift_destroy_boxed_opaque_existential_1(v11 + v1[10]);
  uint64_t v15 = v11 + v1[12];
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v16(v15, v5);
  v16(v0 + v8, v5);
  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t sub_22D01BEA8(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_22D2BBC30();
  return sub_22D01AA50(a1, v1 + v4);
}

unint64_t sub_22D01BF88()
{
  unint64_t result = qword_26853DCC0;
  if (!qword_26853DCC0)
  {
    sub_22D0223F0(255, &qword_26853DCA8, (void (*)(uint64_t))sub_22D0198F0, (void (*)(void))sub_22D019A0C);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DCC0);
  }
  return result;
}

uint64_t sub_22D01C01C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[2] = a5;
  v13[1] = a4;
  sub_22D025564(0, &qword_26853DE20, (void (*)(void))sub_22D0255C4);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v13 - v9;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D0255C4();
  sub_22D2BD7B0();
  char v15 = 0;
  uint64_t v11 = v13[3];
  sub_22D2BD5C0();
  if (!v11)
  {
    char v14 = 1;
    sub_22D2BD5C0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_22D01C1AC()
{
  if (*v0) {
    return 6581861;
  }
  else {
    return 0x7472617473;
  }
}

uint64_t sub_22D01C1DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_22D025D5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22D01C204(uint64_t a1)
{
  unint64_t v2 = sub_22D0255C4();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D01C240(uint64_t a1)
{
  unint64_t v2 = sub_22D0255C4();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22D01C27C(void *a1)
{
  return sub_22D01C01C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_22D01C29C(void *a1)
{
  uint64_t v3 = v1;
  sub_22D025564(0, &qword_26853DDC0, (void (*)(void))sub_22D025190);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D025190();
  sub_22D2BD7B0();
  char v17 = 0;
  sub_22D2BD5C0();
  if (!v2)
  {
    char v16 = 1;
    sub_22D2BD5C0();
    char v15 = 2;
    sub_22D2BD5D0();
    char v14 = 3;
    sub_22D2BD5C0();
    char v13 = 4;
    sub_22D2BD5C0();
    v11[1] = *(void *)(v3 + 72);
    char v12 = 5;
    sub_22D0251E4();
    sub_22D0252F8(&qword_26853DDE8, (void (*)(uint64_t))sub_22D0251E4, (void (*)(void))sub_22D0252C4);
    sub_22D2BD5F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_22D01C518()
{
  uint64_t result = 1702125924;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    case 2:
      uint64_t result = 0x64657370616C65;
      break;
    case 3:
      uint64_t result = 0x646C697562;
      break;
    case 4:
      uint64_t result = 0x656369766564;
      break;
    case 5:
      uint64_t result = 0x74757074756FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22D01C5CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_22D025E38(a1, a2);
  *a3 = result;
  return result;
}

void sub_22D01C5F4(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_22D01C600(uint64_t a1)
{
  unint64_t v2 = sub_22D025190();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D01C63C(uint64_t a1)
{
  unint64_t v2 = sub_22D025190();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22D01C678(void *a1)
{
  return sub_22D01C29C(a1);
}

void sub_22D01C6BC(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v141 = a2;
  uint64_t v140 = sub_22D2BBF00();
  uint64_t v137 = *(void *)(v140 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v140);
  uint64_t v128 = (char *)&v122 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v139 = (id *)((char *)&v122 - v8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v138 = (char *)&v122 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v136 = (char *)&v122 - v11;
  uint64_t v12 = sub_22D2BBC30();
  uint64_t v142 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v134 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021D7C(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v15 = MEMORY[0x270FA5388](v14 - 8);
  uint64_t v133 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v122 - v18;
  uint64_t v20 = MEMORY[0x270FA5388](v17);
  uint64_t v132 = (uint64_t)&v122 - v21;
  MEMORY[0x270FA5388](v20);
  uint64_t v135 = (uint64_t)&v122 - v22;
  uint64_t v23 = sub_22D2BBE60();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  uint64_t v26 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v27 = objc_msgSend(a1, sel_identifier);
  sub_22D2BBC70();

  id v28 = objc_msgSend(a1, sel_provenance);
  id v29 = objc_msgSend(v28, sel_title);

  uint64_t v30 = sub_22D2BCBD0();
  uint64_t v32 = v31;

  uint64_t v33 = (int *)type metadata accessor for AccountSummary(0);
  unint64_t v34 = (uint64_t *)(a3 + v33[5]);
  uint64_t *v34 = v30;
  v34[1] = v32;
  id v122 = a1;
  id v35 = objc_msgSend(a1, sel_clinicalSharingStatus);
  id v36 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  sub_22D2BBE50();
  uint64_t v37 = (void *)sub_22D2BBE30();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  id v123 = v36;
  objc_msgSend(v36, sel_setTimeZone_, v37);

  objc_msgSend(v35, sel_featureStatus);
  id v38 = (id)HKClinicalSharingFeatureStatusToString();
  uint64_t v39 = sub_22D2BCBD0();
  uint64_t v41 = v40;

  uint64_t v42 = (uint64_t *)(a3 + v33[6]);
  uint64_t *v42 = v39;
  v42[1] = v41;
  objc_msgSend(v35, sel_userStatus);
  id v43 = (id)HKClinicalSharingUserStatusToString();
  uint64_t v44 = sub_22D2BCBD0();
  uint64_t v46 = v45;

  uint64_t v47 = (uint64_t *)(a3 + v33[7]);
  *uint64_t v47 = v44;
  v47[1] = v46;
  objc_msgSend(v35, sel_multiDeviceStatus);
  id v48 = (id)HKClinicalSharingMultiDeviceStatusToString();
  uint64_t v49 = sub_22D2BCBD0();
  uint64_t v51 = v50;

  uint64_t v125 = v33;
  uint64_t v126 = a3;
  uint64_t v52 = (uint64_t *)(a3 + v33[8]);
  *uint64_t v52 = v49;
  v52[1] = v51;
  id v124 = v35;
  id v53 = objc_msgSend(v35, sel_primaryDeviceName);
  if (v53)
  {
    unint64_t v54 = v53;
    uint64_t v55 = sub_22D2BCBD0();
    uint64_t v57 = v56;
  }
  else
  {
    uint64_t v55 = 0;
    uint64_t v57 = 0;
  }
  uint64_t v58 = (uint64_t *)(v126 + v125[9]);
  *uint64_t v58 = v55;
  v58[1] = v57;
  id v59 = objc_msgSend(v124, sel_firstSharedDate);
  uint64_t v60 = v140;
  uint64_t v61 = v135;
  if (v59)
  {
    uint64_t v62 = v59;
    sub_22D2BBC00();

    uint64_t v63 = v142;
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
    v64(v61, 0, 1, v12);
  }
  else
  {
    uint64_t v63 = v142;
    uint64_t v64 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56);
    v64(v135, 1, 1, v12);
  }
  uint64_t v65 = v132;
  sub_22D022D7C(v61, v132, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  if (v66(v65, 1, v12) == 1)
  {
    uint64_t v67 = 0;
    uint64_t v68 = 0;
  }
  else
  {
    uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t))(v63 + 32);
    uint64_t v131 = v19;
    uint64_t v70 = v134;
    v69(v134, v65, v12);
    id v71 = v123;
    uint64_t v72 = (void *)sub_22D2BBBC0();
    id v73 = objc_msgSend(v71, sel_stringFromDate_, v72);

    uint64_t v67 = sub_22D2BCBD0();
    uint64_t v68 = v74;

    uint64_t v75 = v70;
    uint64_t v19 = v131;
    (*(void (**)(char *, uint64_t))(v142 + 8))(v75, v12);

    uint64_t v63 = v142;
  }
  uint64_t v76 = v139;
  sub_22D022DFC(v135, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v77 = (uint64_t *)(v126 + v125[10]);
  *uint64_t v77 = v67;
  v77[1] = v68;
  id v78 = objc_msgSend(v124, sel_lastSharedDate);
  if (v78)
  {
    uint64_t v79 = v78;
    sub_22D2BBC00();

    uint64_t v80 = 0;
  }
  else
  {
    uint64_t v80 = 1;
  }
  uint64_t v81 = (uint64_t)v133;
  v64((uint64_t)v19, v80, 1, v12);
  sub_22D022D7C((uint64_t)v19, v81, &qword_26AEC0F48, MEMORY[0x263F07490]);
  if (v66(v81, 1, v12) == 1)
  {
    sub_22D022DFC((uint64_t)v19, &qword_26AEC0F48, MEMORY[0x263F07490]);
    uint64_t v82 = (void *)(v126 + v125[11]);
    *uint64_t v82 = 0;
    v82[1] = 0;
  }
  else
  {
    uint64_t v83 = v134;
    (*(void (**)(char *, uint64_t, uint64_t))(v63 + 32))(v134, v81, v12);
    uint64_t v84 = v63;
    id v85 = v123;
    uint64_t v86 = (void *)sub_22D2BBBC0();
    uint64_t v87 = (uint64_t)v19;
    id v88 = objc_msgSend(v85, sel_stringFromDate_, v86);

    uint64_t v89 = sub_22D2BCBD0();
    uint64_t v91 = v90;

    (*(void (**)(char *, uint64_t))(v84 + 8))(v83, v12);
    sub_22D022DFC(v87, &qword_26AEC0F48, MEMORY[0x263F07490]);
    uint64_t v92 = (uint64_t *)(v126 + v125[11]);
    uint64_t *v92 = v89;
    v92[1] = v91;
  }
  uint64_t v93 = v141;
  int64_t v94 = *(void *)(v141 + 16);
  uint64_t v95 = v138;
  if (v94)
  {
    uint64_t v143 = MEMORY[0x263F8EE78];
    sub_22D24B86C(0, v94, 0);
    int64_t v96 = sub_22D020974(v93);
    int v98 = v97;
    int v100 = v99 & 1;
    uint64_t v135 = v93 + 56;
    uint64_t v132 = v137 + 88;
    uint64_t v133 = (char *)(v137 + 32);
    LODWORD(v131) = *MEMORY[0x263F44A40];
    uint64_t v127 = (void (**)(id *, uint64_t))(v137 + 96);
    uint64_t v130 = (void (**)(char *, uint64_t))(v137 + 8);
    uint64_t v129 = (v137 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v134 = (char *)(v137 + 16);
    while ((v96 & 0x8000000000000000) == 0 && v96 < 1 << *(unsigned char *)(v93 + 32))
    {
      if (((*(void *)(v135 + (((unint64_t)v96 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v96) & 1) == 0) {
        goto LABEL_34;
      }
      if (*(_DWORD *)(v93 + 36) != v98) {
        goto LABEL_35;
      }
      LODWORD(v142) = v100;
      uint64_t v101 = *(void *)(v93 + 48);
      uint64_t v103 = v136;
      uint64_t v102 = v137;
      uint64_t v104 = *(void (**)(char *, uint64_t, uint64_t))(v137 + 16);
      v104(v136, v101 + *(void *)(v137 + 72) * v96, v60);
      (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v95, v103, v60);
      v104((char *)v76, (uint64_t)v95, v60);
      int v105 = (*(uint64_t (**)(id *, uint64_t))(v102 + 88))(v76, v60);
      if (v105 == v131)
      {
        (*v127)(v76, v60);
        id v106 = *v76;
        id v107 = objc_msgSend(*v76, sel_identifier);
        uint64_t v108 = sub_22D2BCBD0();
        uint64_t v110 = v109;

        (*v130)(v95, v60);
      }
      else
      {
        v104(v128, (uint64_t)v95, v60);
        uint64_t v111 = sub_22D2BCC30();
        uint64_t v112 = v76;
        uint64_t v108 = v111;
        uint64_t v110 = v113;
        uint64_t v114 = *v130;
        (*v130)((char *)v112, v60);
        v114(v95, v60);
      }
      uint64_t v115 = v143;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v115 + 16) + 1, 1);
        uint64_t v115 = v143;
      }
      unint64_t v117 = *(void *)(v115 + 16);
      unint64_t v116 = *(void *)(v115 + 24);
      if (v117 >= v116 >> 1)
      {
        sub_22D24B86C(v116 > 1, v117 + 1, 1);
        uint64_t v115 = v143;
      }
      *(void *)(v115 + 16) = v117 + 1;
      uint64_t v118 = v115 + 16 * v117;
      *(void *)(v118 + 32) = v108;
      *(void *)(v118 + 40) = v110;
      uint64_t v93 = v141;
      int64_t v119 = sub_22D020A14(v96, v98, v142 & 1, v141);
      int64_t v96 = v119;
      int v98 = v120;
      int v100 = v121 & 1;
      --v94;
      uint64_t v76 = v139;
      uint64_t v60 = v140;
      uint64_t v95 = v138;
      if (!v94)
      {
        sub_22D022E6C(v119, v120, v100);
        swift_bridgeObjectRelease();
        goto LABEL_32;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v115 = MEMORY[0x263F8EE78];
LABEL_32:
    uint64_t v143 = v115;
    swift_bridgeObjectRetain();
    sub_22D01DB40(&v143);
    swift_bridgeObjectRelease();

    *(void *)(v126 + v125[12]) = v143;
  }
}

unint64_t sub_22D01D288(char a1)
{
  unint64_t result = 1684632949;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656C746974;
      break;
    case 2:
      unint64_t result = 0x5365727574616566;
      break;
    case 3:
      unint64_t result = 0x7461745372657375;
      break;
    case 4:
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x6168537473726966;
      break;
    case 7:
      unint64_t result = 0x726168537473616CLL;
      break;
    case 8:
      unint64_t result = 0x7A69726F68747561;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_22D01D3C0(void *a1)
{
  uint64_t v3 = v1;
  sub_22D025564(0, &qword_26853DE08, (void (*)(void))sub_22D025450);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = &v12[-v8];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D025450();
  sub_22D2BD7B0();
  LOBYTE(v13) = 0;
  sub_22D2BBC90();
  sub_22D019888(&qword_26AEC22D0, MEMORY[0x263F07508]);
  sub_22D2BD5F0();
  if (!v2)
  {
    uint64_t v10 = type metadata accessor for AccountSummary(0);
    LOBYTE(v13) = 1;
    sub_22D2BD5C0();
    LOBYTE(v13) = 2;
    sub_22D2BD5C0();
    LOBYTE(v13) = 3;
    sub_22D2BD5C0();
    LOBYTE(v13) = 4;
    sub_22D2BD5C0();
    LOBYTE(v13) = 5;
    sub_22D2BD580();
    LOBYTE(v13) = 6;
    sub_22D2BD580();
    LOBYTE(v13) = 7;
    sub_22D2BD580();
    uint64_t v13 = *(void *)(v3 + *(int *)(v10 + 48));
    v12[15] = 8;
    sub_22D0254A4(0, (unint64_t *)&qword_26AEC1EC0);
    sub_22D0254EC();
    sub_22D2BD5F0();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_22D01D71C()
{
  return sub_22D01D288(*v0);
}

uint64_t sub_22D01D724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_22D026094(a1, a2);
  *a3 = result;
  return result;
}

void sub_22D01D74C(unsigned char *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_22D01D758(uint64_t a1)
{
  unint64_t v2 = sub_22D025450();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D01D794(uint64_t a1)
{
  unint64_t v2 = sub_22D025450();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22D01D7D0(void *a1)
{
  return sub_22D01D3C0(a1);
}

uint64_t sub_22D01D7E8@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v37 = a3;
  v38[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = sub_22D2BBAA0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v30 - v13;
  uint64_t result = a2(a1);
  if (!v4)
  {
    uint64_t v33 = v8;
    uint64_t v34 = v9;
    uint64_t v31 = a1;
    uint64_t v32 = a4;
    uint64_t v35 = result;
    unint64_t v36 = v16;
    uint64_t v17 = v37;
    sub_22D2BBA20();
    sub_22D2BBA40();
    uint64_t v18 = *(void **)(v17 + *(int *)(type metadata accessor for PublisherOutputWriter() + 20));
    uint64_t v19 = (void *)sub_22D2BBA10();
    v38[0] = 0;
    LODWORD(v18) = objc_msgSend(v18, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v19, 1, 0, v38);

    if (v18)
    {
      id v20 = v38[0];
      uint64_t v21 = v35;
      unint64_t v22 = v36;
      sub_22D2BBB40();
      uint64_t v23 = v33;
      id v27 = *(void (**)(char *, uint64_t))(v34 + 8);
      v27(v12, v33);
      v27(v14, v23);
      sub_22D021744(v31, v32, type metadata accessor for ClinicalSharingQueryOutput);
      swift_bridgeObjectRelease();
      uint64_t v28 = v21;
      unint64_t v29 = v22;
    }
    else
    {
      id v24 = v38[0];
      sub_22D2BB9C0();

      swift_willThrow();
      uint64_t v25 = v33;
      uint64_t v26 = *(void (**)(char *, uint64_t))(v34 + 8);
      v26(v12, v33);
      v26(v14, v25);
      swift_bridgeObjectRelease();
      uint64_t v28 = v35;
      unint64_t v29 = v36;
    }
    return sub_22CFF5630(v28, v29);
  }
  return result;
}

uint64_t sub_22D01DAC4(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_22D237C14();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_22D01DBAC(v6);
  return sub_22D2BD3B0();
}

uint64_t sub_22D01DB40(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_22D237C28(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  uint64_t result = sub_22D01E730(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_22D01DBAC(uint64_t *a1)
{
  uint64_t v161 = sub_22D2BBC90();
  uint64_t v3 = *(void *)(v161 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v161);
  uint64_t v158 = (char *)&v141 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v157 = (char *)&v141 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v151 = (char *)&v141 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v150 = (char *)&v141 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v147 = (char *)&v141 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v146 = (char *)&v141 - v14;
  uint64_t v148 = a1;
  uint64_t v15 = a1[1];
  uint64_t result = sub_22D2BD620();
  if (result >= v15)
  {
    if (v15 < 0) {
      goto LABEL_142;
    }
    if (v15) {
      return sub_22D01EE1C(0, v15, 1, v148);
    }
    return result;
  }
  if (v15 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v15 + 1;
  }
  if (v15 < -1) {
    goto LABEL_150;
  }
  uint64_t v145 = result;
  uint64_t v153 = v15;
  uint64_t v156 = v1;
  if (v15 < 2)
  {
    id v20 = (char *)MEMORY[0x263F8EE78];
    uint64_t v166 = MEMORY[0x263F8EE78];
    uint64_t v155 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v15 != 1)
    {
      unint64_t v24 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_108:
      if (v24 >= 2)
      {
        uint64_t v134 = *v148;
        do
        {
          unint64_t v135 = v24 - 2;
          if (v24 < 2) {
            goto LABEL_137;
          }
          if (!v134) {
            goto LABEL_149;
          }
          uint64_t v136 = *(void *)&v20[16 * v135 + 32];
          uint64_t v137 = *(void *)&v20[16 * v24 + 24];
          uint64_t v138 = v156;
          sub_22D01F19C((void **)(v134 + 8 * v136), (id *)(v134 + 8 * *(void *)&v20[16 * v24 + 16]), (id *)(v134 + 8 * v137), v155);
          uint64_t v156 = v138;
          if (v138) {
            break;
          }
          if (v137 < v136) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v20 = sub_22D237C00((uint64_t)v20);
          }
          if (v135 >= *((void *)v20 + 2)) {
            goto LABEL_139;
          }
          uint64_t v139 = &v20[16 * v135 + 32];
          *(void *)uint64_t v139 = v136;
          *((void *)v139 + 1) = v137;
          unint64_t v140 = *((void *)v20 + 2);
          if (v24 > v140) {
            goto LABEL_140;
          }
          memmove(&v20[16 * v24 + 16], &v20[16 * v24 + 32], 16 * (v140 - v24));
          *((void *)v20 + 2) = v140 - 1;
          unint64_t v24 = v140 - 1;
        }
        while (v140 > 2);
      }
LABEL_119:
      swift_bridgeObjectRelease();
      *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_22D2BCE20();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v18 = v17 >> 1;
    sub_22D021E94();
    uint64_t v19 = sub_22D2BCE40();
    *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10) = v18;
    uint64_t v155 = (void **)((v19 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v166 = v19;
  }
  uint64_t v21 = 0;
  uint64_t v22 = *v148;
  uint64_t v159 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v142 = v22 + 16;
  uint64_t v143 = v22 - 8;
  id v20 = (char *)MEMORY[0x263F8EE78];
  uint64_t v23 = v153;
  uint64_t v160 = v22;
  while (2)
  {
    uint64_t v25 = v21 + 1;
    uint64_t v152 = v21;
    if (v21 + 1 >= v23) {
      goto LABEL_40;
    }
    uint64_t v26 = *(void **)(v22 + 8 * v21);
    id v27 = *(id *)(v22 + 8 * v25);
    id v28 = v26;
    id v165 = v27;
    id v29 = objc_msgSend(v27, sel_identifier);
    uint64_t v30 = v146;
    sub_22D2BBC70();

    uint64_t v163 = sub_22D2BBC40();
    uint64_t v32 = v31;
    uint64_t v33 = (char *)*v159;
    uint64_t v34 = v161;
    (*v159)(v30, v161);
    id v164 = v28;
    id v35 = objc_msgSend(v28, sel_identifier);
    unint64_t v36 = v147;
    sub_22D2BBC70();

    uint64_t v37 = sub_22D2BBC40();
    uint64_t v39 = v38;
    uint64_t v154 = v33;
    ((void (*)(char *, uint64_t))v33)(v36, v34);
    if (v163 == v37 && v32 == v39) {
      LODWORD(v163) = 0;
    }
    else {
      LODWORD(v163) = sub_22D2BD660();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    uint64_t v25 = v21 + 2;
    uint64_t v22 = v160;
    if (v21 + 2 >= v153) {
      goto LABEL_31;
    }
    uint64_t v144 = v20;
    uint64_t v40 = (id *)(v142 + 8 * v21);
    while (1)
    {
      uint64_t v162 = v25;
      uint64_t v42 = *(v40 - 1);
      id v43 = *v40;
      id v44 = v42;
      id v164 = v43;
      id v45 = objc_msgSend(v43, sel_identifier);
      uint64_t v46 = v150;
      sub_22D2BBC70();

      uint64_t v47 = sub_22D2BBC40();
      uint64_t v49 = v48;
      uint64_t v50 = v161;
      uint64_t v51 = (void (*)(char *, uint64_t))v154;
      ((void (*)(char *, uint64_t))v154)(v46, v161);
      id v165 = v44;
      id v52 = objc_msgSend(v44, sel_identifier);
      id v53 = v151;
      sub_22D2BBC70();

      uint64_t v54 = sub_22D2BBC40();
      uint64_t v56 = v55;
      v51(v53, v50);
      if (v47 == v54 && v49 == v56)
      {

        swift_bridgeObjectRelease_n();
        uint64_t v22 = v160;
        if (v163)
        {
          id v20 = v144;
          uint64_t v25 = v162;
          uint64_t v21 = v152;
          goto LABEL_32;
        }
        goto LABEL_23;
      }
      int v41 = sub_22D2BD660();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v22 = v160;
      if ((v163 ^ v41)) {
        break;
      }
LABEL_23:
      uint64_t v25 = v162 + 1;
      ++v40;
      if (v153 == v162 + 1)
      {
        uint64_t v25 = v153;
        id v20 = v144;
        goto LABEL_30;
      }
    }
    id v20 = v144;
    uint64_t v25 = v162;
LABEL_30:
    uint64_t v21 = v152;
LABEL_31:
    if (v163)
    {
LABEL_32:
      if (v25 < v21) {
        goto LABEL_143;
      }
      if (v21 < v25)
      {
        uint64_t v57 = (uint64_t *)(v143 + 8 * v25);
        uint64_t v58 = v25;
        uint64_t v59 = v21;
        uint64_t v60 = (uint64_t *)(v22 + 8 * v21);
        do
        {
          if (v59 != --v58)
          {
            if (!v22) {
              goto LABEL_148;
            }
            uint64_t v61 = *v60;
            uint64_t *v60 = *v57;
            *uint64_t v57 = v61;
          }
          ++v59;
          --v57;
          ++v60;
        }
        while (v59 < v58);
      }
    }
LABEL_40:
    if (v25 >= v153) {
      goto LABEL_60;
    }
    if (__OFSUB__(v25, v21)) {
      goto LABEL_141;
    }
    if (v25 - v21 >= v145)
    {
LABEL_60:
      if (v25 < v21) {
        goto LABEL_136;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v20 = sub_22D23775C(0, *((void *)v20 + 2) + 1, 1, v20);
      }
      unint64_t v85 = *((void *)v20 + 2);
      unint64_t v84 = *((void *)v20 + 3);
      unint64_t v24 = v85 + 1;
      if (v85 >= v84 >> 1) {
        id v20 = sub_22D23775C((char *)(v84 > 1), v85 + 1, 1, v20);
      }
      *((void *)v20 + 2) = v24;
      uint64_t v86 = v20 + 32;
      uint64_t v87 = &v20[16 * v85 + 32];
      *(void *)uint64_t v87 = v21;
      *((void *)v87 + 1) = v25;
      uint64_t v162 = v25;
      if (!v85)
      {
        unint64_t v24 = 1;
LABEL_14:
        uint64_t v23 = v153;
        uint64_t v21 = v162;
        if (v162 >= v153) {
          goto LABEL_108;
        }
        continue;
      }
      while (1)
      {
        unint64_t v88 = v24 - 1;
        if (v24 >= 4)
        {
          uint64_t v93 = &v86[16 * v24];
          uint64_t v94 = *((void *)v93 - 8);
          uint64_t v95 = *((void *)v93 - 7);
          BOOL v99 = __OFSUB__(v95, v94);
          uint64_t v96 = v95 - v94;
          if (v99) {
            goto LABEL_125;
          }
          uint64_t v98 = *((void *)v93 - 6);
          uint64_t v97 = *((void *)v93 - 5);
          BOOL v99 = __OFSUB__(v97, v98);
          uint64_t v91 = v97 - v98;
          char v92 = v99;
          if (v99) {
            goto LABEL_126;
          }
          unint64_t v100 = v24 - 2;
          uint64_t v101 = &v86[16 * v24 - 32];
          uint64_t v103 = *(void *)v101;
          uint64_t v102 = *((void *)v101 + 1);
          BOOL v99 = __OFSUB__(v102, v103);
          uint64_t v104 = v102 - v103;
          if (v99) {
            goto LABEL_128;
          }
          BOOL v99 = __OFADD__(v91, v104);
          uint64_t v105 = v91 + v104;
          if (v99) {
            goto LABEL_131;
          }
          if (v105 >= v96)
          {
            id v123 = &v86[16 * v88];
            uint64_t v125 = *(void *)v123;
            uint64_t v124 = *((void *)v123 + 1);
            BOOL v99 = __OFSUB__(v124, v125);
            uint64_t v126 = v124 - v125;
            if (v99) {
              goto LABEL_135;
            }
            BOOL v116 = v91 < v126;
            goto LABEL_97;
          }
        }
        else
        {
          if (v24 != 3)
          {
            uint64_t v117 = *((void *)v20 + 4);
            uint64_t v118 = *((void *)v20 + 5);
            BOOL v99 = __OFSUB__(v118, v117);
            uint64_t v110 = v118 - v117;
            char v111 = v99;
            goto LABEL_91;
          }
          uint64_t v90 = *((void *)v20 + 4);
          uint64_t v89 = *((void *)v20 + 5);
          BOOL v99 = __OFSUB__(v89, v90);
          uint64_t v91 = v89 - v90;
          char v92 = v99;
        }
        if (v92) {
          goto LABEL_127;
        }
        unint64_t v100 = v24 - 2;
        id v106 = &v86[16 * v24 - 32];
        uint64_t v108 = *(void *)v106;
        uint64_t v107 = *((void *)v106 + 1);
        BOOL v109 = __OFSUB__(v107, v108);
        uint64_t v110 = v107 - v108;
        char v111 = v109;
        if (v109) {
          goto LABEL_130;
        }
        uint64_t v112 = &v86[16 * v88];
        uint64_t v114 = *(void *)v112;
        uint64_t v113 = *((void *)v112 + 1);
        BOOL v99 = __OFSUB__(v113, v114);
        uint64_t v115 = v113 - v114;
        if (v99) {
          goto LABEL_133;
        }
        if (__OFADD__(v110, v115)) {
          goto LABEL_134;
        }
        if (v110 + v115 >= v91)
        {
          BOOL v116 = v91 < v115;
LABEL_97:
          if (v116) {
            unint64_t v88 = v100;
          }
          goto LABEL_99;
        }
LABEL_91:
        if (v111) {
          goto LABEL_129;
        }
        int64_t v119 = &v86[16 * v88];
        uint64_t v121 = *(void *)v119;
        uint64_t v120 = *((void *)v119 + 1);
        BOOL v99 = __OFSUB__(v120, v121);
        uint64_t v122 = v120 - v121;
        if (v99) {
          goto LABEL_132;
        }
        if (v122 < v110) {
          goto LABEL_14;
        }
LABEL_99:
        unint64_t v127 = v88 - 1;
        if (v88 - 1 >= v24)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        if (!v22) {
          goto LABEL_147;
        }
        uint64_t v128 = &v86[16 * v127];
        uint64_t v129 = *(void *)v128;
        uint64_t v130 = &v86[16 * v88];
        uint64_t v131 = *((void *)v130 + 1);
        uint64_t v132 = v156;
        sub_22D01F19C((void **)(v22 + 8 * *(void *)v128), (id *)(v22 + 8 * *(void *)v130), (id *)(v22 + 8 * v131), v155);
        uint64_t v156 = v132;
        if (v132) {
          goto LABEL_119;
        }
        if (v131 < v129) {
          goto LABEL_122;
        }
        if (v88 > *((void *)v20 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v128 = v129;
        *(void *)&v86[16 * v127 + 8] = v131;
        unint64_t v133 = *((void *)v20 + 2);
        if (v88 >= v133) {
          goto LABEL_124;
        }
        unint64_t v24 = v133 - 1;
        memmove(&v86[16 * v88], v130 + 16, 16 * (v133 - 1 - v88));
        *((void *)v20 + 2) = v133 - 1;
        if (v133 <= 2) {
          goto LABEL_14;
        }
      }
    }
    break;
  }
  if (__OFADD__(v21, v145)) {
    goto LABEL_144;
  }
  uint64_t v62 = v153;
  if (v21 + v145 < v153) {
    uint64_t v62 = v21 + v145;
  }
  if (v62 >= v21)
  {
    if (v25 != v62)
    {
      uint64_t v144 = v20;
      uint64_t v63 = (char *)(v143 + 8 * v25);
      uint64_t v149 = v62;
      do
      {
        uint64_t v65 = *(void **)(v22 + 8 * v25);
        uint64_t v154 = v63;
        uint64_t v162 = v25;
        while (1)
        {
          uint64_t v66 = *(void **)v63;
          id v67 = v65;
          id v68 = v66;
          id v164 = v67;
          id v69 = objc_msgSend(v67, sel_identifier);
          uint64_t v70 = v157;
          sub_22D2BBC70();

          uint64_t v71 = sub_22D2BBC40();
          uint64_t v163 = v72;
          id v73 = *v159;
          uint64_t v74 = v161;
          (*v159)(v70, v161);
          id v165 = v68;
          id v75 = objc_msgSend(v68, sel_identifier);
          uint64_t v76 = v158;
          sub_22D2BBC70();

          uint64_t v77 = sub_22D2BBC40();
          uint64_t v79 = v78;
          uint64_t v80 = v76;
          uint64_t v81 = v163;
          v73(v80, v74);
          if (v71 == v77 && v81 == v79) {
            break;
          }
          char v82 = sub_22D2BD660();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v22 = v160;
          if ((v82 & 1) == 0) {
            goto LABEL_50;
          }
          uint64_t v64 = v162;
          if (!v160) {
            goto LABEL_146;
          }
          uint64_t v83 = *(void *)v63;
          uint64_t v65 = (void *)*((void *)v63 + 1);
          *(void *)uint64_t v63 = v65;
          *((void *)v63 + 1) = v83;
          v63 -= 8;
          if (v64 == ++v21) {
            goto LABEL_51;
          }
        }

        swift_bridgeObjectRelease_n();
        uint64_t v22 = v160;
LABEL_50:
        uint64_t v64 = v162;
LABEL_51:
        uint64_t v25 = v64 + 1;
        uint64_t v63 = v154 + 8;
        uint64_t v21 = v152;
      }
      while (v25 != v149);
      uint64_t v25 = v149;
      id v20 = v144;
    }
    goto LABEL_60;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  uint64_t result = sub_22D2BD450();
  __break(1u);
  return result;
}

uint64_t sub_22D01E730(uint64_t *a1)
{
  uint64_t v3 = a1[1];
  uint64_t result = sub_22D2BD620();
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_152;
    }
    if (v3) {
      return sub_22D01F0CC(0, v3, 1, a1);
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_160;
  }
  uint64_t v105 = result;
  uint64_t v102 = a1;
  if (v3 < 2)
  {
    uint64_t v8 = MEMORY[0x263F8EE78];
    __dst = (char *)(MEMORY[0x263F8EE78] + 32);
    if (v3 != 1)
    {
      unint64_t v12 = *(void *)(MEMORY[0x263F8EE78] + 16);
      uint64_t v11 = (char *)MEMORY[0x263F8EE78];
LABEL_118:
      uint64_t v94 = v11;
      uint64_t v104 = v8;
      if (v12 >= 2)
      {
        uint64_t v95 = *v102;
        do
        {
          unint64_t v96 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_147;
          }
          if (!v95) {
            goto LABEL_159;
          }
          uint64_t v97 = v94;
          uint64_t v98 = *(void *)&v94[16 * v96 + 32];
          uint64_t v99 = *(void *)&v94[16 * v12 + 24];
          sub_22D01F7C4((char *)(v95 + 16 * v98), (char *)(v95 + 16 * *(void *)&v94[16 * v12 + 16]), v95 + 16 * v99, __dst);
          if (v1) {
            break;
          }
          if (v99 < v98) {
            goto LABEL_148;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v97 = sub_22D237C00((uint64_t)v97);
          }
          if (v96 >= *((void *)v97 + 2)) {
            goto LABEL_149;
          }
          unint64_t v100 = &v97[16 * v96 + 32];
          *(void *)unint64_t v100 = v98;
          *((void *)v100 + 1) = v99;
          unint64_t v101 = *((void *)v97 + 2);
          if (v12 > v101) {
            goto LABEL_150;
          }
          memmove(&v97[16 * v12 + 16], &v97[16 * v12 + 32], 16 * (v101 - v12));
          uint64_t v94 = v97;
          *((void *)v97 + 2) = v101 - 1;
          unint64_t v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_115:
      swift_bridgeObjectRelease();
      *(void *)(v104 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v104 = MEMORY[0x263F8EE78];
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = sub_22D2BCE40();
    *(void *)(v7 + 16) = v6;
    uint64_t v104 = v7;
    __dst = (char *)(v7 + 32);
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a1;
  uint64_t v103 = v10 + 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v106 = v3;
  while (1)
  {
    uint64_t v13 = v9++;
    if (v9 >= v3) {
      goto LABEL_46;
    }
    uint64_t v14 = (uint64_t *)(v10 + 16 * v9);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    uint64_t v17 = (void *)(v10 + 16 * v13);
    if (v15 == *v17 && v16 == v17[1])
    {
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_45;
      }
      int v19 = 0;
    }
    else
    {
      int v19 = sub_22D2BD660();
      uint64_t v20 = v13 + 2;
      if (v13 + 2 >= v3) {
        goto LABEL_36;
      }
    }
    uint64_t v21 = (void *)(v103 + 16 * v20);
    do
    {
      uint64_t v23 = (void *)(v10 + 16 * v9);
      if (*(v21 - 1) == *v23 && *v21 == v23[1])
      {
        if (v19) {
          goto LABEL_37;
        }
      }
      else if ((v19 ^ sub_22D2BD660()))
      {
        goto LABEL_36;
      }
      v21 += 2;
      uint64_t v22 = v20 + 1;
      uint64_t v9 = v20;
      uint64_t v20 = v22;
    }
    while (v22 < v3);
    uint64_t v20 = v22;
LABEL_36:
    uint64_t v9 = v20;
    if (v19)
    {
LABEL_37:
      if (v20 < v13) {
        goto LABEL_155;
      }
      if (v13 < v20)
      {
        uint64_t v25 = 16 * v20;
        uint64_t v26 = 16 * v13;
        uint64_t v27 = v20;
        uint64_t v28 = v13;
        do
        {
          if (v28 != --v27)
          {
            if (!v10) {
              goto LABEL_158;
            }
            uint64_t v29 = v10 + v25;
            uint64_t v30 = *(void *)(v10 + v26);
            uint64_t v31 = *(void *)(v10 + v26 + 8);
            *(_OWORD *)(v10 + v26) = *(_OWORD *)(v10 + v25 - 16);
            *(void *)(v29 - 16) = v30;
            *(void *)(v29 - 8) = v31;
          }
          ++v28;
          v25 -= 16;
          v26 += 16;
        }
        while (v28 < v27);
      }
LABEL_45:
      uint64_t v9 = v20;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13)) {
        goto LABEL_151;
      }
      if (v9 - v13 < v105) {
        break;
      }
    }
LABEL_67:
    if (v9 < v13) {
      goto LABEL_146;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_22D23775C(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v41 = *((void *)v11 + 2);
    unint64_t v40 = *((void *)v11 + 3);
    unint64_t v12 = v41 + 1;
    if (v41 >= v40 >> 1) {
      uint64_t v11 = sub_22D23775C((char *)(v40 > 1), v41 + 1, 1, v11);
    }
    *((void *)v11 + 2) = v12;
    uint64_t v42 = v11 + 32;
    id v43 = &v11[16 * v41 + 32];
    *(void *)id v43 = v13;
    *((void *)v43 + 1) = v9;
    if (v41)
    {
      uint64_t v107 = v9;
      while (1)
      {
        unint64_t v44 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v49 = &v42[16 * v12];
          uint64_t v50 = *((void *)v49 - 8);
          uint64_t v51 = *((void *)v49 - 7);
          BOOL v55 = __OFSUB__(v51, v50);
          uint64_t v52 = v51 - v50;
          if (v55) {
            goto LABEL_135;
          }
          uint64_t v54 = *((void *)v49 - 6);
          uint64_t v53 = *((void *)v49 - 5);
          BOOL v55 = __OFSUB__(v53, v54);
          uint64_t v47 = v53 - v54;
          char v48 = v55;
          if (v55) {
            goto LABEL_136;
          }
          unint64_t v56 = v12 - 2;
          uint64_t v57 = &v42[16 * v12 - 32];
          uint64_t v59 = *(void *)v57;
          uint64_t v58 = *((void *)v57 + 1);
          BOOL v55 = __OFSUB__(v58, v59);
          uint64_t v60 = v58 - v59;
          if (v55) {
            goto LABEL_138;
          }
          BOOL v55 = __OFADD__(v47, v60);
          uint64_t v61 = v47 + v60;
          if (v55) {
            goto LABEL_141;
          }
          if (v61 >= v52)
          {
            uint64_t v79 = &v42[16 * v44];
            uint64_t v81 = *(void *)v79;
            uint64_t v80 = *((void *)v79 + 1);
            BOOL v55 = __OFSUB__(v80, v81);
            uint64_t v82 = v80 - v81;
            if (v55) {
              goto LABEL_145;
            }
            BOOL v72 = v47 < v82;
            goto LABEL_105;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v73 = *((void *)v11 + 4);
            uint64_t v74 = *((void *)v11 + 5);
            BOOL v55 = __OFSUB__(v74, v73);
            uint64_t v66 = v74 - v73;
            char v67 = v55;
            goto LABEL_99;
          }
          uint64_t v46 = *((void *)v11 + 4);
          uint64_t v45 = *((void *)v11 + 5);
          BOOL v55 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          char v48 = v55;
        }
        if (v48) {
          goto LABEL_137;
        }
        unint64_t v56 = v12 - 2;
        uint64_t v62 = &v42[16 * v12 - 32];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v65 = __OFSUB__(v63, v64);
        uint64_t v66 = v63 - v64;
        char v67 = v65;
        if (v65) {
          goto LABEL_140;
        }
        id v68 = &v42[16 * v44];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v55 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v55) {
          goto LABEL_143;
        }
        if (__OFADD__(v66, v71)) {
          goto LABEL_144;
        }
        if (v66 + v71 >= v47)
        {
          BOOL v72 = v47 < v71;
LABEL_105:
          if (v72) {
            unint64_t v44 = v56;
          }
          goto LABEL_107;
        }
LABEL_99:
        if (v67) {
          goto LABEL_139;
        }
        id v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        uint64_t v76 = *((void *)v75 + 1);
        BOOL v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_142;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_107:
        unint64_t v83 = v44 - 1;
        if (v44 - 1 >= v12)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        uint64_t v84 = v10;
        if (!v10) {
          goto LABEL_157;
        }
        unint64_t v85 = v11;
        uint64_t v86 = &v42[16 * v83];
        uint64_t v87 = *(void *)v86;
        unint64_t v88 = v42;
        unint64_t v89 = v44;
        uint64_t v90 = &v42[16 * v44];
        uint64_t v91 = *((void *)v90 + 1);
        uint64_t v92 = v84;
        sub_22D01F7C4((char *)(v84 + 16 * *(void *)v86), (char *)(v84 + 16 * *(void *)v90), v84 + 16 * v91, __dst);
        if (v1) {
          goto LABEL_115;
        }
        if (v91 < v87) {
          goto LABEL_132;
        }
        if (v89 > *((void *)v85 + 2)) {
          goto LABEL_133;
        }
        *(void *)uint64_t v86 = v87;
        *(void *)&v88[16 * v83 + 8] = v91;
        unint64_t v93 = *((void *)v85 + 2);
        if (v89 >= v93) {
          goto LABEL_134;
        }
        uint64_t v11 = v85;
        unint64_t v12 = v93 - 1;
        memmove(v90, v90 + 16, 16 * (v93 - 1 - v89));
        uint64_t v42 = v88;
        *((void *)v85 + 2) = v93 - 1;
        uint64_t v10 = v92;
        uint64_t v9 = v107;
        if (v93 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    uint64_t v3 = v106;
    if (v9 >= v106)
    {
      uint64_t v8 = v104;
      goto LABEL_118;
    }
  }
  if (__OFADD__(v13, v105)) {
    goto LABEL_153;
  }
  if (v13 + v105 >= v3) {
    uint64_t v32 = v3;
  }
  else {
    uint64_t v32 = v13 + v105;
  }
  if (v32 >= v13)
  {
    if (v9 != v32)
    {
      uint64_t v33 = (void *)(v10 + 16 * v9);
      do
      {
        uint64_t v34 = (uint64_t *)(v10 + 16 * v9);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        uint64_t v37 = v13;
        uint64_t v38 = v33;
        do
        {
          BOOL v39 = v35 == *(v38 - 2) && v36 == *(v38 - 1);
          if (v39 || (sub_22D2BD660() & 1) == 0) {
            break;
          }
          if (!v10) {
            goto LABEL_156;
          }
          uint64_t v35 = *v38;
          uint64_t v36 = v38[1];
          *(_OWORD *)uint64_t v38 = *((_OWORD *)v38 - 1);
          *(v38 - 1) = v36;
          *(v38 - 2) = v35;
          v38 -= 2;
          ++v37;
        }
        while (v9 != v37);
        ++v9;
        v33 += 2;
      }
      while (v9 != v32);
      uint64_t v9 = v32;
    }
    goto LABEL_67;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  __break(1u);
LABEL_160:
  uint64_t result = sub_22D2BD450();
  __break(1u);
  return result;
}

uint64_t sub_22D01EE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a1;
  uint64_t v43 = sub_22D2BBC90();
  uint64_t v7 = MEMORY[0x270FA5388](v43);
  uint64_t v42 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v7);
  unint64_t v41 = (char *)&v36 - v11;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v12 = *a4;
    uint64_t v40 = v10 + 8;
    uint64_t v44 = v12;
    uint64_t v13 = v12 + 8 * a3 - 8;
    uint64_t v14 = (void (**)(char *, uint64_t))(v10 + 8);
    uint64_t v15 = v43;
LABEL_6:
    uint64_t v17 = *(void **)(v44 + 8 * a3);
    uint64_t v18 = v38;
    uint64_t v39 = v13;
    uint64_t v45 = a3;
    while (1)
    {
      int v19 = *(void **)v13;
      id v20 = v17;
      id v21 = v19;
      id v47 = v20;
      id v22 = objc_msgSend(v20, sel_identifier);
      uint64_t v23 = v41;
      sub_22D2BBC70();

      uint64_t v24 = sub_22D2BBC40();
      uint64_t v46 = v25;
      uint64_t v26 = *v14;
      (*v14)(v23, v15);
      id v48 = v21;
      id v27 = objc_msgSend(v21, sel_identifier);
      uint64_t v28 = v42;
      sub_22D2BBC70();

      uint64_t v29 = sub_22D2BBC40();
      uint64_t v31 = v30;
      uint64_t v32 = v28;
      uint64_t v33 = v46;
      v26(v32, v15);
      if (v24 == v29 && v33 == v31)
      {

        uint64_t result = swift_bridgeObjectRelease_n();
        uint64_t v16 = v45;
LABEL_5:
        a3 = v16 + 1;
        uint64_t v13 = v39 + 8;
        if (a3 == v37) {
          return result;
        }
        goto LABEL_6;
      }
      char v34 = sub_22D2BD660();

      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v16 = v45;
      if ((v34 & 1) == 0) {
        goto LABEL_5;
      }
      if (!v44) {
        break;
      }
      uint64_t v35 = *(void **)v13;
      uint64_t v17 = *(void **)(v13 + 8);
      *(void *)uint64_t v13 = v17;
      *(void *)(v13 + 8) = v35;
      v13 -= 8;
      if (v16 == ++v18) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22D01F0CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
LABEL_5:
    uint64_t v9 = (uint64_t *)(v7 + 16 * v4);
    uint64_t result = *v9;
    uint64_t v10 = v9[1];
    uint64_t v11 = v6;
    uint64_t v12 = (uint64_t *)v8;
    while (1)
    {
      BOOL v13 = result == *(v12 - 2) && v10 == *(v12 - 1);
      if (v13 || (uint64_t result = sub_22D2BD660(), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2) {
          return result;
        }
        goto LABEL_5;
      }
      if (!v7) {
        break;
      }
      uint64_t result = *v12;
      uint64_t v10 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22D01F19C(void **a1, id *a2, id *a3, void **a4)
{
  uint64_t v81 = sub_22D2BBC90();
  uint64_t v8 = MEMORY[0x270FA5388](v81);
  uint64_t v76 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v75 = (char *)&v73 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v79 = (char *)&v73 - v13;
  MEMORY[0x270FA5388](v12);
  uint64_t v78 = (char *)&v73 - v15;
  uint64_t v16 = (char *)a2 - (char *)a1;
  uint64_t v17 = (char *)a2 - (char *)a1 + 7;
  if ((char *)a2 - (char *)a1 >= 0) {
    uint64_t v17 = (char *)a2 - (char *)a1;
  }
  uint64_t v18 = v17 >> 3;
  int v19 = a2;
  uint64_t v20 = (char *)a3 - (char *)a2;
  uint64_t v21 = v20 / 8;
  unint64_t v88 = a1;
  uint64_t v84 = a4;
  uint64_t v87 = a4;
  if (v17 >> 3 >= v20 / 8)
  {
    if (v20 < -7) {
      goto LABEL_48;
    }
    uint64_t v45 = v84;
    uint64_t v46 = v19;
    if (v84 != v19 || &v19[v21] <= v84)
    {
      id v47 = v19;
      uint64_t v48 = v14;
      memmove(v84, v47, 8 * v21);
      uint64_t v14 = v48;
    }
    uint64_t v49 = &v45[v21];
    uint64_t v86 = v49;
    unint64_t v88 = v46;
    if (v20 < 8 || a1 >= v46)
    {
LABEL_47:
      sub_22D237854(&v88, &v87, &v86);
      return 1;
    }
    uint64_t v74 = (void (**)(char *, uint64_t))(v14 + 8);
    uint64_t v50 = v46;
    unint64_t v83 = a1;
    while (1)
    {
      unint64_t v85 = v46;
      uint64_t v82 = a3;
      uint64_t v80 = v49;
      uint64_t v51 = *--v49;
      uint64_t v52 = *(v50 - 1);
      uint64_t v77 = v50 - 1;
      uint64_t v53 = v51;
      uint64_t v54 = v52;
      uint64_t v78 = v53;
      id v55 = objc_msgSend(v53, sel_identifier);
      unint64_t v56 = v75;
      sub_22D2BBC70();

      uint64_t v57 = sub_22D2BBC40();
      uint64_t v59 = v58;
      uint64_t v60 = *v74;
      uint64_t v61 = v56;
      uint64_t v62 = v81;
      (*v74)(v61, v81);
      uint64_t v79 = v54;
      id v63 = objc_msgSend(v54, sel_identifier);
      uint64_t v64 = v76;
      sub_22D2BBC70();

      uint64_t v65 = sub_22D2BBC40();
      uint64_t v67 = v66;
      v60(v64, v62);
      if (v57 == v65 && v59 == v67)
      {

        swift_bridgeObjectRelease_n();
        id v68 = v82;
        a3 = v82 - 1;
      }
      else
      {
        char v69 = sub_22D2BD660();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        id v68 = v82;
        a3 = v82 - 1;
        if (v69)
        {
          uint64_t v70 = v84;
          uint64_t v71 = v83;
          uint64_t v49 = v80;
          uint64_t v50 = v77;
          if (v82 != v85 || a3 >= v85) {
            *a3 = *v77;
          }
          unint64_t v88 = v50;
          goto LABEL_45;
        }
      }
      uint64_t v71 = v83;
      uint64_t v70 = v84;
      uint64_t v50 = v85;
      uint64_t v86 = v49;
      if (v68 < v80 || a3 >= v80 || v68 != v80) {
        *a3 = *v49;
      }
LABEL_45:
      if (v49 > v70)
      {
        uint64_t v46 = v50;
        if (v50 > v71) {
          continue;
        }
      }
      goto LABEL_47;
    }
  }
  if (v16 >= -7)
  {
    id v22 = v84;
    if (v84 != a1 || &a1[v18] <= v84)
    {
      uint64_t v23 = v14;
      memmove(v84, a1, 8 * v18);
      uint64_t v14 = v23;
    }
    uint64_t v77 = &v22[v18];
    uint64_t v86 = v77;
    if (v16 >= 8 && v19 < a3)
    {
      uint64_t v76 = (char *)(v14 + 8);
      uint64_t v82 = a3;
      uint64_t v24 = v81;
      while (1)
      {
        unint64_t v83 = a1;
        uint64_t v84 = v22;
        unint64_t v85 = v19;
        uint64_t v25 = *v22;
        id v26 = *v19;
        id v27 = v25;
        id v28 = objc_msgSend(v26, sel_identifier);
        uint64_t v29 = v78;
        sub_22D2BBC70();

        uint64_t v30 = sub_22D2BBC40();
        uint64_t v32 = v31;
        uint64_t v33 = *(void (**)(char *, uint64_t))v76;
        (*(void (**)(char *, uint64_t))v76)(v29, v24);
        uint64_t v80 = v27;
        id v34 = objc_msgSend(v27, sel_identifier);
        uint64_t v35 = v79;
        sub_22D2BBC70();

        uint64_t v36 = sub_22D2BBC40();
        uint64_t v38 = v37;
        v33(v35, v24);
        if (v30 == v36 && v32 == v38)
        {

          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v39 = sub_22D2BD660();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v39)
          {
            uint64_t v40 = v85 + 1;
            uint64_t v42 = v82;
            unint64_t v41 = v83;
            if (v83 < v85 || v83 >= v40 || v83 != v85) {
              *unint64_t v83 = *v85;
            }
            id v22 = v84;
            goto LABEL_23;
          }
        }
        unint64_t v41 = v83;
        uint64_t v43 = v84;
        uint64_t v42 = v82;
        uint64_t v44 = v85;
        if (v83 != v84) {
          *unint64_t v83 = *v84;
        }
        id v22 = v43 + 1;
        uint64_t v87 = v22;
        uint64_t v40 = v44;
LABEL_23:
        a1 = v41 + 1;
        unint64_t v88 = a1;
        if (v22 < v77)
        {
          int v19 = v40;
          if (v40 < v42) {
            continue;
          }
        }
        goto LABEL_47;
      }
    }
    goto LABEL_47;
  }
LABEL_48:
  uint64_t result = sub_22D2BD4C0();
  __break(1u);
  return result;
}

uint64_t sub_22D01F7C4(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 15;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 4;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 15;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 4;
  id v27 = __src;
  id v26 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst) {
        memmove(__dst, a2, 16 * v13);
      }
      uint64_t v17 = &v4[16 * v13];
      uint64_t v25 = v17;
      id v27 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        uint64_t v18 = (char *)(a3 - 16);
        int v19 = v6;
        while (1)
        {
          uint64_t v20 = v18 + 16;
          uint64_t v21 = *((void *)v19 - 2);
          uint64_t v22 = *((void *)v19 - 1);
          v19 -= 16;
          BOOL v23 = *((void *)v17 - 2) == v21 && *((void *)v17 - 1) == v22;
          if (v23 || (sub_22D2BD660() & 1) == 0)
          {
            uint64_t v25 = v17 - 16;
            if (v20 < v17 || v18 >= v17 || v20 != v17) {
              *(_OWORD *)uint64_t v18 = *((_OWORD *)v17 - 1);
            }
            int v19 = v6;
            v17 -= 16;
            if (v6 <= v7) {
              goto LABEL_50;
            }
          }
          else
          {
            if (v20 != v6 || v18 >= v6) {
              *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
            }
            id v27 = v19;
            if (v19 <= v7) {
              goto LABEL_50;
            }
          }
          v18 -= 16;
          uint64_t v6 = v19;
          if (v17 <= v4) {
            goto LABEL_50;
          }
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst) {
      memmove(__dst, __src, 16 * v10);
    }
    uint64_t v14 = &v4[16 * v10];
    uint64_t v25 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        BOOL v15 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
        if (v15 || (sub_22D2BD660() & 1) == 0)
        {
          if (v7 != v4) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
          }
          v4 += 16;
          id v26 = v4;
          uint64_t v16 = v6;
        }
        else
        {
          uint64_t v16 = v6 + 16;
          if (v7 < v6 || v7 >= v16 || v7 != v6) {
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
          }
        }
        v7 += 16;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v16;
      }
      while ((unint64_t)v16 < a3);
      id v27 = v7;
    }
LABEL_50:
    sub_22D237858((void **)&v27, (const void **)&v26, &v25);
    return 1;
  }
  uint64_t result = sub_22D2BD4C0();
  __break(1u);
  return result;
}

uint64_t sub_22D01FA60(uint64_t a1)
{
  uint64_t v2 = sub_22D2BBF00();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v75 = (char *)&v49 - v7;
  uint64_t v8 = sub_22D2BBC90();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v56 = (char *)&v49 - v13;
  sub_22D022B4C();
  uint64_t result = sub_22D2BD480();
  int64_t v15 = 0;
  uint64_t v60 = a1;
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v51 = a1 + 64;
  uint64_t v17 = 1 << *(unsigned char *)(a1 + 32);
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  int64_t v52 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v54 = v9 + 16;
  uint64_t v58 = v9;
  uint64_t v67 = v9 + 32;
  uint64_t v74 = v3 + 16;
  uint64_t v50 = v3;
  BOOL v72 = (void (**)(char *, uint64_t))(v3 + 8);
  uint64_t v53 = result + 64;
  uint64_t v55 = result;
  uint64_t v59 = v8;
  uint64_t v57 = v12;
  if (!v19) {
    goto LABEL_6;
  }
LABEL_5:
  uint64_t v61 = (v19 - 1) & v19;
  int64_t v62 = v15;
  for (unint64_t i = __clz(__rbit64(v19)) | (v15 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = v60;
    uint64_t v26 = *(void *)(v60 + 48);
    uint64_t v27 = v58;
    unint64_t v65 = *(void *)(v58 + 72) * i;
    id v28 = v56;
    (*(void (**)(char *, unint64_t, uint64_t))(v58 + 16))(v56, v26 + v65, v8);
    uint64_t v29 = *(void *)(v25 + 56);
    unint64_t v66 = i;
    uint64_t v30 = *(void *)(v29 + 8 * i);
    uint64_t v64 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v64(v12, v28, v8);
    uint64_t v31 = *(void *)(v30 + 16);
    uint64_t v32 = sub_22D019888(&qword_26AEC2068, MEMORY[0x263F44A78]);
    swift_bridgeObjectRetain();
    uint64_t v69 = v32;
    uint64_t v33 = sub_22D2BCF30();
    uint64_t v70 = v31;
    uint64_t v63 = v30;
    if (v31)
    {
      uint64_t v34 = 0;
      uint64_t v68 = v30 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80));
      uint64_t v73 = *(void *)(v50 + 72);
      uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
      do
      {
        uint64_t v71 = v34;
        v35(v75, v68 + v73 * v34, v2);
        swift_bridgeObjectRetain();
        uint64_t v38 = sub_22D2BCB30();
        uint64_t v39 = -1 << *(unsigned char *)(v33 + 32);
        unint64_t v40 = v38 & ~v39;
        if ((*(void *)(v33 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40))
        {
          uint64_t v41 = ~v39;
          while (1)
          {
            v35(v6, *(void *)(v33 + 48) + v40 * v73, v2);
            sub_22D019888(&qword_26853DD50, MEMORY[0x263F44A78]);
            char v42 = sub_22D2BCB90();
            uint64_t v43 = *v72;
            (*v72)(v6, v2);
            if (v42) {
              break;
            }
            unint64_t v40 = (v40 + 1) & v41;
            if (((*(void *)(v33 + 56 + ((v40 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v40) & 1) == 0) {
              goto LABEL_22;
            }
          }
          swift_bridgeObjectRelease();
          v43(v75, v2);
        }
        else
        {
LABEL_22:
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v37 = v75;
          v35(v6, (uint64_t)v75, v2);
          uint64_t v76 = v33;
          sub_22D233C10((uint64_t)v6, v40, isUniquelyReferenced_nonNull_native);
          uint64_t v33 = v76;
          swift_bridgeObjectRelease();
          (*v72)(v37, v2);
        }
        uint64_t v34 = v71 + 1;
      }
      while (v71 + 1 != v70);
    }
    swift_bridgeObjectRelease();
    unint64_t v44 = v66;
    *(void *)(v53 + ((v66 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v66;
    uint64_t v45 = v55;
    uint64_t v12 = v57;
    uint64_t v8 = v59;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v64)(*(void *)(v55 + 48) + v65, v57, v59);
    *(void *)(*(void *)(v45 + 56) + 8 * v44) = v33;
    uint64_t v46 = *(void *)(v45 + 16);
    BOOL v47 = __OFADD__(v46, 1);
    uint64_t v48 = v46 + 1;
    if (v47)
    {
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
    uint64_t result = v45;
    *(void *)(v45 + 16) = v48;
    unint64_t v19 = v61;
    int64_t v15 = v62;
    if (v61) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      goto LABEL_35;
    }
    if (v21 >= v52) {
      return result;
    }
    unint64_t v22 = *(void *)(v51 + 8 * v21);
    int64_t v23 = v15 + 1;
    if (!v22)
    {
      int64_t v23 = v15 + 2;
      if (v15 + 2 >= v52) {
        return result;
      }
      unint64_t v22 = *(void *)(v51 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v15 + 3;
        if (v15 + 3 >= v52) {
          return result;
        }
        unint64_t v22 = *(void *)(v51 + 8 * v23);
        if (!v22) {
          break;
        }
      }
    }
LABEL_19:
    uint64_t v61 = (v22 - 1) & v22;
    int64_t v62 = v23;
  }
  uint64_t v24 = v15 + 4;
  if (v15 + 4 >= v52) {
    return result;
  }
  unint64_t v22 = *(void *)(v51 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v15 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v52) {
      return result;
    }
    unint64_t v22 = *(void *)(v51 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_19;
    }
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_22D0200FC(_OWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v38 = a3;
  sub_22D021D7C(0, &qword_26853DD18, MEMORY[0x263F07690], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  v36[2] = (char *)v36 - v10;
  uint64_t v11 = sub_22D2BBE60();
  MEMORY[0x270FA5388](v11 - 8);
  v36[1] = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_22D2BBCB0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  unint64_t v19 = (char *)v36 - v18;
  uint64_t v37 = sub_22D2BBE00();
  uint64_t v20 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  char v42 = (char *)v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v43[4] = &off_26E0655E0;
  unint64_t v22 = (_OWORD *)swift_allocObject();
  v43[0] = v22;
  long long v23 = a1[1];
  v22[1] = *a1;
  v22[2] = v23;
  long long v24 = a1[3];
  id v22[3] = a1[2];
  v22[4] = v24;
  uint64_t v25 = OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter;
  *(void *)(a5 + v25) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  *(void *)(a5 + 56) = a2;
  sub_22CFF4B00((uint64_t)v43, a5 + 16);
  uint64_t v41 = a5;
  uint64_t v26 = a5 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
  uint64_t v27 = sub_22D2BBC30();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  uint64_t v40 = a4;
  v29(v26, a4, v27);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v19, *MEMORY[0x263F07740], v13);
  uint64_t v30 = v38;
  sub_22D2BBCD0();
  sub_22D019888(&qword_26853DD20, MEMORY[0x263F07748]);
  LOBYTE(v26) = sub_22D2BCB90();
  uint64_t v31 = *(void (**)(char *, uint64_t))(v14 + 8);
  uint64_t v39 = v14 + 8;
  v31(v17, v13);
  if (v26)
  {
    uint64_t v32 = v30;
    uint64_t v33 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v42, v30, v37);
  }
  else
  {
    v36[0] = v20;
    sub_22D2BBCC0();
    uint64_t v32 = v30;
    sub_22D2BBDC0();
    sub_22D2BBDD0();
    sub_22D2BBD80();
    uint64_t v20 = v36[0];
    sub_22D2BBD90();
    uint64_t v33 = v37;
  }
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v40, v27);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v32, v33);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  v31(v19, v13);
  uint64_t v34 = v41;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v41 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v42, v33);
  return v34;
}

uint64_t sub_22D0205BC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4;
  uint64_t v33 = a3;
  uint64_t v34 = a1;
  uint64_t v7 = sub_22D2BBC30();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_22D2BBE00();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v38[4] = &off_26E0655E0;
  uint64_t v15 = (_OWORD *)swift_allocObject();
  v38[0] = v15;
  long long v16 = a2[1];
  v15[1] = *a2;
  v15[2] = v16;
  long long v17 = a2[3];
  v15[3] = a2[2];
  v15[4] = v17;
  sub_22CFF4B00((uint64_t)v38, (uint64_t)v36);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a4, v7);
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v36, v37);
  MEMORY[0x270FA5388](v18);
  uint64_t v20 = (_OWORD *)((char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v21 + 16))(v20);
  v35[3] = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  v35[4] = &off_26E0655E0;
  unint64_t v22 = (_OWORD *)swift_allocObject();
  v35[0] = v22;
  long long v23 = v20[1];
  v22[1] = *v20;
  v22[2] = v23;
  long long v24 = v20[3];
  id v22[3] = v20[2];
  v22[4] = v24;
  type metadata accessor for ClinicalSharingQueryContext(0);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v35, (uint64_t)&type metadata for ClinicalSharingQueryDefaultDataProvider);
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (_OWORD *)((char *)&v32 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v29 + 16))(v28);
  uint64_t v30 = sub_22D0200FC(v28, v34, (uint64_t)v14, (uint64_t)v10, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v32, v7);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v33, v11);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  return v30;
}

uint64_t sub_22D020974(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 56);
  if (v1)
  {
    uint64_t v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  char v5 = *(unsigned char *)(a1 + 32);
  unsigned int v6 = v5 & 0x3F;
  uint64_t v3 = 1 << v5;
  if (v6 < 7) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1)
  {
    uint64_t v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8) {
    return v3;
  }
  unint64_t v1 = *(void *)(a1 + 72);
  if (v1)
  {
    uint64_t v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  unint64_t v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3) {
    unint64_t v7 = 3;
  }
  unint64_t v8 = v7 - 3;
  uint64_t v9 = (unint64_t *)(a1 + 80);
  uint64_t v2 = 128;
  while (v8)
  {
    unint64_t v10 = *v9++;
    unint64_t v1 = v10;
    --v8;
    v2 += 64;
    if (v10) {
      return __clz(__rbit64(v1)) + v2;
    }
  }
  return v3;
}

int64_t sub_22D020A14(int64_t result, int a2, char a3, uint64_t a4)
{
  if (a3) {
    goto LABEL_20;
  }
  unint64_t v4 = result;
  if (result < 0 || (uint64_t result = 1 << *(unsigned char *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = v4 >> 6;
  uint64_t v6 = a4 + 56;
  unint64_t v7 = *(void *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  unint64_t v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8) {
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  }
  unint64_t v9 = v5 + 1;
  unint64_t v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    unint64_t v11 = *(void *)(v6 + 8 * v9);
    if (v11) {
      return __clz(__rbit64(v11)) + (v9 << 6);
    }
    unint64_t v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      unint64_t v11 = *(void *)(v6 + 8 * v9);
      if (v11) {
        return __clz(__rbit64(v11)) + (v9 << 6);
      }
      while (v10 - 3 != v5)
      {
        unint64_t v11 = *(void *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          unint64_t v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_22D020AF8(unint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v30 = sub_22D2BBC90();
  uint64_t v6 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  unint64_t v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccountSummary(0);
  uint64_t v29 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9 - 8);
  unint64_t v11 = (void (**)(char *, uint64_t))((char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62) {
    goto LABEL_19;
  }
  uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    if (!v12) {
      return v13;
    }
    uint64_t v31 = MEMORY[0x263F8EE78];
    uint64_t result = sub_22D24B7EC(0, v12 & ~(v12 >> 63), 0);
    if (v12 < 0) {
      break;
    }
    uint64_t v27 = v11;
    unint64_t v28 = a1;
    v24[1] = v3;
    uint64_t v3 = 0;
    uint64_t v13 = v31;
    unint64_t v25 = a1 & 0xC000000000000001;
    uint64_t v26 = v12;
    unint64_t v11 = (void (**)(char *, uint64_t))(v6 + 8);
    while (v12 != v3)
    {
      if (v25) {
        id v15 = (id)MEMORY[0x230F7AF90](v3, a1);
      }
      else {
        id v15 = *(id *)(a1 + 8 * v3 + 32);
      }
      id v16 = v15;
      id v17 = objc_msgSend(v16, sel_identifier);
      sub_22D2BBC70();

      if (*(void *)(a2 + 16))
      {
        unint64_t v18 = sub_22D04EA20((uint64_t)v8);
        uint64_t v19 = MEMORY[0x263F8EE88];
        if (v20)
        {
          uint64_t v19 = *(void *)(*(void *)(a2 + 56) + 8 * v18);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v19 = MEMORY[0x263F8EE88];
      }
      uint64_t v6 = a2;
      (*v11)(v8, v30);
      uint64_t v21 = (uint64_t)v27;
      sub_22D01C6BC(v16, v19, (uint64_t)v27);

      uint64_t v31 = v13;
      unint64_t v23 = *(void *)(v13 + 16);
      unint64_t v22 = *(void *)(v13 + 24);
      if (v23 >= v22 >> 1)
      {
        sub_22D24B7EC(v22 > 1, v23 + 1, 1);
        uint64_t v13 = v31;
      }
      ++v3;
      *(void *)(v13 + 16) = v23 + 1;
      sub_22D02159C(v21, v13+ ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))+ *(void *)(v29 + 72) * v23, type metadata accessor for AccountSummary);
      uint64_t v12 = v26;
      a2 = v6;
      a1 = v28;
      if (v26 == v3) {
        return v13;
      }
    }
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

id sub_22D020E18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  unint64_t v85 = a4;
  uint64_t Output = type metadata accessor for QueryOutput(0);
  uint64_t v10 = *(void *)(Output - 8);
  uint64_t v11 = MEMORY[0x270FA5388](Output);
  uint64_t v88 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v89 = (uint64_t)&v74 - v13;
  uint64_t v14 = sub_22D2BBE60();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  id v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  sub_22D2BBE50();
  uint64_t v19 = (void *)sub_22D2BBE30();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  objc_msgSend(v18, sel_setTimeZone_, v19);

  uint64_t v84 = a1;
  char v20 = (void *)sub_22D2BBBC0();
  id v21 = objc_msgSend(v18, sel_stringFromDate_, v20);

  uint64_t v22 = sub_22D2BCBD0();
  uint64_t v83 = v23;

  uint64_t v24 = sub_22D0BC6C4(&unk_26E059FD8, a2);
  uint64_t v81 = v25;
  uint64_t v82 = v24;
  sub_22D021534();
  swift_arrayDestroy();
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (!result)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v27 = result;
  uint64_t v80 = v22;
  id result = objc_msgSend(result, sel_currentOSBuild);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v28 = result;
  uint64_t v29 = sub_22D2BCBD0();
  uint64_t v78 = v30;
  uint64_t v79 = v29;

  id result = objc_msgSend(v27, sel_currentInternalDeviceModel);
  uint64_t v31 = v89;
  if (!result)
  {
LABEL_23:
    __break(1u);
    return result;
  }
  uint64_t v32 = result;
  id v77 = v27;
  uint64_t v76 = sub_22D2BCBD0();
  uint64_t v75 = v33;

  unint64_t v34 = sub_22D0D2F48(MEMORY[0x263F8EE78]);
  uint64_t v35 = *(void *)(a3 + 16);
  if (v35)
  {
    uint64_t v36 = a3 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v86 = *(void *)(v10 + 72);
    uint64_t v87 = Output;
    do
    {
      sub_22D021744(v36, v31, type metadata accessor for QueryOutput);
      char v37 = *(unsigned char *)(v31 + 8);
      unint64_t v95 = *(void *)v31;
      char v96 = v37;
      uint64_t v38 = sub_22D2BCC30();
      uint64_t v40 = v39;
      uint64_t v41 = *(void *)(v34 + 16);
      swift_bridgeObjectRetain();
      uint64_t v92 = v38;
      if (v41 && (unint64_t v42 = sub_22D04EB7C(v38, v40), (v43 & 1) != 0))
      {
        unint64_t v44 = *(void *)(*(void *)(v34 + 56) + 8 * v42);
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v44 = sub_22D0D2F68(MEMORY[0x263F8EE78]);
      }
      swift_bridgeObjectRelease();
      uint64_t v45 = v31 + *(int *)(Output + 20);
      unint64_t v46 = *(void *)(v45 + 32);
      LOBYTE(v45) = *(unsigned char *)(v45 + 40);
      unint64_t v95 = v46;
      char v96 = v45;
      uint64_t v47 = sub_22D2BCC30();
      uint64_t v49 = v48;
      uint64_t v50 = *(void *)(v44 + 16);
      uint64_t v93 = v35;
      unint64_t v94 = v34;
      uint64_t v91 = v47;
      if (v50)
      {
        uint64_t v51 = v47;
        swift_bridgeObjectRetain();
        unint64_t v52 = sub_22D04EB7C(v51, v49);
        uint64_t v53 = (void *)MEMORY[0x263F8EE78];
        if (v54)
        {
          uint64_t v53 = *(void **)(*(void *)(v44 + 56) + 8 * v52);
          swift_bridgeObjectRetain();
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v53 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v55 = v31;
      uint64_t v56 = v88;
      sub_22D021744(v55, v88, type metadata accessor for QueryOutput);
      uint64_t v57 = (uint64_t *)(v56 + *(int *)(Output + 20));
      uint64_t v59 = *v57;
      uint64_t v58 = v57[1];
      uint64_t v60 = v57[3];
      uint64_t v90 = v57[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_22D0216C0((uint64_t)v57, type metadata accessor for PBDateRange);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v53 = sub_22D2811F0(0, v53[2] + 1, 1, v53);
      }
      unint64_t v62 = v53[2];
      unint64_t v61 = v53[3];
      if (v62 >= v61 >> 1) {
        uint64_t v53 = sub_22D2811F0((void *)(v61 > 1), v62 + 1, 1, v53);
      }
      v53[2] = v62 + 1;
      uint64_t v63 = &v53[4 * v62];
      v63[4] = v59;
      v63[5] = v58;
      v63[6] = v90;
      v63[7] = v60;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v95 = v44;
      sub_22D0538D4((uint64_t)v53, v91, v49, isUniquelyReferenced_nonNull_native);
      uint64_t v65 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      unint64_t v66 = v94;
      char v67 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v95 = v66;
      sub_22D0538A8(v65, v92, v40, v67);
      unint64_t v34 = v95;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v31 = v89;
      sub_22D0216C0(v89, type metadata accessor for QueryOutput);
      swift_bridgeObjectRelease();
      uint64_t Output = v87;
      v36 += v86;
      uint64_t v35 = v93 - 1;
    }
    while (v93 != 1);
  }

  uint64_t v68 = sub_22D2BBC30();
  id result = (id)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v68 - 8) + 8))(v84, v68);
  uint64_t v69 = (double *)v85;
  uint64_t v70 = v83;
  *unint64_t v85 = v80;
  *((void *)v69 + 1) = v70;
  uint64_t v71 = v81;
  *((void *)v69 + 2) = v82;
  *((void *)v69 + 3) = v71;
  v69[4] = a5;
  uint64_t v72 = v78;
  *((void *)v69 + 5) = v79;
  *((void *)v69 + 6) = v72;
  uint64_t v73 = v75;
  *((void *)v69 + 7) = v76;
  *((void *)v69 + 8) = v73;
  *((void *)v69 + 9) = v34;
  return result;
}

uint64_t sub_22D021478(uint64_t a1)
{
  return a1;
}

unint64_t sub_22D0214E0()
{
  unint64_t result = qword_26853DCC8;
  if (!qword_26853DCC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DCC8);
  }
  return result;
}

void sub_22D021534()
{
  if (!qword_26853F3C0)
  {
    type metadata accessor for HKClinicalSharingQueryDiagnosticOptions(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853F3C0);
    }
  }
}

uint64_t sub_22D02159C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_22D021604(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_22D01975C();
    uint64_t v9 = v8;
    uint64_t v10 = a3(255);
    uint64_t v11 = sub_22D019888(&qword_26AEC2E68, (void (*)(uint64_t))sub_22D01975C);
    unint64_t v12 = a4(a1, v9, v10, v11);
    if (!v13) {
      atomic_store(v12, a2);
    }
  }
}

uint64_t sub_22D0216C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t (*sub_22D021724(uint64_t a1))(char *)
{
  return sub_22D08F61C(a1, *(uint64_t (**)(char *))(v1 + 16));
}

uint64_t sub_22D021744(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D0217B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D021990(a1, a2);
}

unint64_t sub_22D0217C8()
{
  unint64_t result = qword_26853DCD8;
  if (!qword_26853DCD8)
  {
    sub_22D021604(255, &qword_26853DCD0, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDC00]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DCD8);
  }
  return result;
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t objectdestroy_11Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for PublisherOutputWriter() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22D021990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PublisherOutputWriter() - 8);
  return sub_22D01D7E8(a1, *(uint64_t (**)(uint64_t))(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

void sub_22D021A10(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    sub_22D01975C();
    a3(255);
    sub_22D019888(&qword_26AEC2E68, (void (*)(uint64_t))sub_22D01975C);
    a4();
    unint64_t v7 = sub_22D2BC520();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_22D021ADC()
{
  if (!qword_26853DCE8)
  {
    sub_22D021BA8();
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    sub_22D019888(&qword_26853DD00, (void (*)(uint64_t))sub_22D021BA8);
    unint64_t v0 = sub_22D2BC430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DCE8);
    }
  }
}

void sub_22D021BA8()
{
  if (!qword_26853DCF0)
  {
    sub_22D021C20(255, (unint64_t *)&qword_26853DCF8);
    unint64_t v0 = sub_22D2BC5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DCF0);
    }
  }
}

uint64_t sub_22D021C20(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_22D021C70()
{
  return sub_22D019888(&qword_26853DD08, (void (*)(uint64_t))sub_22D021ADC);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_22D021CF4()
{
  unint64_t result = qword_26853DD10;
  if (!qword_26853DD10)
  {
    sub_22D021A10(255, (unint64_t *)&qword_26853DCE0, (void (*)(uint64_t))sub_22D021ADC, (void (*)(void))sub_22D021C70);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DD10);
  }
  return result;
}

void sub_22D021D7C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D021DE0()
{
  if (!qword_26AEC0EB0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDE20];
    sub_22D022014(255, (unint64_t *)&qword_26AEC1E18, MEMORY[0x263EFDE20]);
    sub_22D021ED4((unint64_t *)&qword_26AEC1E10, (unint64_t *)&qword_26AEC1E18, v0);
    unint64_t v1 = sub_22D2BC710();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC0EB0);
    }
  }
}

unint64_t sub_22D021E94()
{
  unint64_t result = qword_26AEC1EE8;
  if (!qword_26AEC1EE8)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEC1EE8);
  }
  return result;
}

uint64_t sub_22D021ED4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D022014(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D021F18()
{
  if (!qword_26AEC1CB0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D022014(255, &qword_26AEC1DC8, MEMORY[0x263EFDCF0]);
    sub_22D021D7C(255, (unint64_t *)&qword_26AEC1ED0, (uint64_t (*)(uint64_t))sub_22D021E94, MEMORY[0x263F8D488]);
    sub_22D021ED4((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, v0);
    unint64_t v1 = sub_22D2BC450();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC1CB0);
    }
  }
}

void sub_22D022014(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    sub_22D021D7C(255, (unint64_t *)&qword_26AEC1ED0, (uint64_t (*)(uint64_t))sub_22D021E94, MEMORY[0x263F8D488]);
    uint64_t v7 = v6;
    uint64_t v8 = sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D0220CC()
{
  if (!qword_26853DD28)
  {
    sub_22D0197DC();
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D022014(255, &qword_26AEC1DC8, MEMORY[0x263EFDCF0]);
    sub_22D019854();
    sub_22D021ED4((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, v0);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DD28);
    }
  }
}

uint64_t sub_22D0221A8()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D0221E0@<X0>(uint64_t *a1@<X8>)
{
  return sub_22D284D18(*(void **)(v1 + 16), a1);
}

uint64_t sub_22D0221E8()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();
  uint64_t v8 = v6 + v1[9];
  uint64_t v9 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  __swift_destroy_boxed_opaque_existential_1(v6 + v1[10]);
  uint64_t v10 = v6 + v1[12];
  uint64_t v11 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22D022370@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  uint64_t v6 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return sub_22D01B080(a1, v6, a2);
}

void sub_22D0223F0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = sub_22D2BC500();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_22D022470()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  swift_release();
  uint64_t v8 = v6 + v1[9];
  uint64_t v9 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  __swift_destroy_boxed_opaque_existential_1(v6 + v1[10]);
  uint64_t v10 = v6 + v1[12];
  uint64_t v11 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22D022600@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClinicalSharingQueryDiagnosticsTask(0) - 8);
  return sub_22D01B340(a1, *(void *)(v2 + 16), v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

unint64_t sub_22D022680()
{
  unint64_t result = qword_26853DD40;
  if (!qword_26853DD40)
  {
    sub_22D0223F0(255, &qword_26853DD38, (void (*)(uint64_t))sub_22D0197DC, (void (*)(void))sub_22D019854);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DD40);
  }
  return result;
}

uint64_t sub_22D022710(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a3;
  uint64_t v6 = sub_22D2BBC90();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v51 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v49 = (char *)v40 - v10;
  sub_22D021D7C(0, &qword_26AEC22D8, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)v40 - v12;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    id v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    uint64_t v16 = v7 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = a2 + ((*(unsigned __int8 *)(v16 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 64));
    uint64_t v46 = *(void *)(v16 + 56);
    char v43 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    unint64_t v44 = (unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 32);
    v40[2] = v3;
    uint64_t v41 = (void (**)(uint64_t, uint64_t))(v16 - 8);
    v40[1] = a2;
    swift_bridgeObjectRetain();
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 40);
    v40[0] = (v16 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v47 = v6;
    while (1)
    {
      v15(v13, v18, v6);
      unint64_t v42 = *v45;
      v42(v13, 0, 1, v6);
      if ((*v44)(v13, 1, v6) == 1) {
        break;
      }
      uint64_t v48 = v14;
      uint64_t v22 = v49;
      uint64_t v23 = v13;
      (*v43)(v49, v13, v6);
      uint64_t v24 = (uint64_t)v51;
      uint64_t v25 = v16;
      v15(v51, (uint64_t)v22, v6);
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v52 = a1;
      unint64_t v28 = sub_22D04EA20(v24);
      uint64_t v29 = a1[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_20:
        __break(1u);
LABEL_21:
        uint64_t result = sub_22D2BD6A0();
        __break(1u);
        return result;
      }
      char v32 = v27;
      if (a1[3] >= v31)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_22D056530();
        }
      }
      else
      {
        sub_22D053050(v31, isUniquelyReferenced_nonNull_native);
        unint64_t v33 = sub_22D04EA20((uint64_t)v51);
        if ((v32 & 1) != (v34 & 1)) {
          goto LABEL_21;
        }
        unint64_t v28 = v33;
      }
      uint64_t v16 = v25;
      a1 = v52;
      uint64_t v13 = v23;
      if (v32)
      {
        uint64_t v19 = v52[7];
        swift_bridgeObjectRelease();
        *(void *)(v19 + 8 * v28) = v50;
        uint64_t v20 = v48;
      }
      else
      {
        v52[(v28 >> 6) + 8] |= 1 << v28;
        v15((char *)(a1[6] + v28 * v46), (uint64_t)v51, v47);
        *(void *)(a1[7] + 8 * v28) = v50;
        uint64_t v35 = a1[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        uint64_t v20 = v48;
        if (v36) {
          goto LABEL_20;
        }
        a1[2] = v37;
      }
      swift_bridgeObjectRelease();
      id v21 = *v41;
      uint64_t v6 = v47;
      (*v41)((uint64_t)v51, v47);
      v21((uint64_t)v49, v6);
      v18 += v46;
      uint64_t v14 = v20 - 1;
      if (!v14)
      {
        v42(v13, 1, 1, v6);
        break;
      }
    }
  }
  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56);
    swift_bridgeObjectRetain();
    v38(v13, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)a1;
}

void sub_22D022B4C()
{
  if (!qword_26AEC2298)
  {
    sub_22D2BBC90();
    sub_22D022BF8();
    sub_22D019888((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2298);
    }
  }
}

void sub_22D022BF8()
{
  if (!qword_26AEC2278)
  {
    sub_22D2BBF00();
    sub_22D019888(&qword_26AEC2068, MEMORY[0x263F44A78]);
    unint64_t v0 = sub_22D2BCF40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2278);
    }
  }
}

uint64_t type metadata accessor for AccountSummary(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853DD90);
}

unint64_t sub_22D022CAC()
{
  unint64_t result = qword_26853DD60;
  if (!qword_26853DD60)
  {
    sub_22D021D7C(255, &qword_26853DD58, type metadata accessor for AccountSummary, MEMORY[0x263F8D488]);
    sub_22D019888(&qword_26853DD68, (void (*)(uint64_t))type metadata accessor for AccountSummary);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DD60);
  }
  return result;
}

uint64_t sub_22D022D7C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D021D7C(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D022DFC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_22D021D7C(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22D022E6C(uint64_t a1, uint64_t a2, char a3)
{
  if (a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t sub_22D022E78()
{
  unint64_t result = qword_26853DD88;
  if (!qword_26853DD88)
  {
    sub_22D021D7C(255, &qword_26853DD80, MEMORY[0x263F06130], MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DD88);
  }
  return result;
}

uint64_t *sub_22D022F00(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v37 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v37 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_22D2BBC90();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)a1 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    uint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    id v21 = (uint64_t *)((char *)a1 + v17);
    uint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    char v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (uint64_t *)((char *)a1 + v25);
    BOOL v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    *uint64_t v29 = *v30;
    v29[1] = v31;
    uint64_t v32 = a3[11];
    uint64_t v33 = a3[12];
    char v34 = (uint64_t *)((char *)a1 + v32);
    uint64_t v35 = (uint64_t *)((char *)a2 + v32);
    uint64_t v36 = v35[1];
    void *v34 = *v35;
    v34[1] = v36;
    *(uint64_t *)((char *)a1 + v33) = *(uint64_t *)((char *)a2 + v33);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_22D023094(uint64_t a1)
{
  uint64_t v2 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D023178(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  void *v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  uint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  void *v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  id v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)(a1 + v24);
  uint64_t v29 = (void *)(a2 + v24);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  uint64_t v31 = a3[11];
  uint64_t v32 = a3[12];
  uint64_t v33 = (void *)(a1 + v31);
  char v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  *(void *)(a1 + v32) = *(void *)(a2 + v32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22D0232BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  void *v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  id v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  void *v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22D02347C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  uint64_t v10 = a3[12];
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t sub_22D02353C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  char v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  uint64_t v37 = a3[11];
  uint64_t v38 = (void *)(a1 + v37);
  uint64_t v39 = (uint64_t *)(a2 + v37);
  uint64_t v41 = *v39;
  uint64_t v40 = v39[1];
  *uint64_t v38 = v41;
  v38[1] = v40;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[12]) = *(void *)(a2 + a3[12]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22D023684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D023698);
}

uint64_t sub_22D023698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBC90();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_22D02375C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D023770);
}

uint64_t sub_22D023770(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBC90();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_22D023830()
{
  uint64_t result = sub_22D2BBC90();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.QueryOutputDescription()
{
  return &type metadata for QuerySummary.QueryOutputDescription;
}

uint64_t destroy for QuerySummary()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for QuerySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for QuerySummary(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy80_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for QuerySummary(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for QuerySummary(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuerySummary(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary()
{
  return &type metadata for QuerySummary;
}

void *sub_22D023BE4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *long long v3 = *a2;
    long long v3 = (void *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
    *(void *)uint64_t v6 = *(uint64_t *)((char *)a2 + v5);
    *(void *)(v6 + 8) = v8;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v5 + 24);
    *(void *)(v6 + 16) = *(uint64_t *)((char *)a2 + v5 + 16);
    *(void *)(v6 + 24) = v9;
    *(void *)(v6 + 32) = *(uint64_t *)((char *)a2 + v5 + 32);
    *(unsigned char *)(v6 + 40) = *((unsigned char *)a2 + v5 + 40);
    uint64_t v10 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
    uint64_t v11 = v6 + v10;
    uint64_t v12 = v7 + v10;
    uint64_t v13 = sub_22D2BBFF0();
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14(v11, v12, v13);
  }
  return v3;
}

uint64_t sub_22D023D10(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + *(int *)(type metadata accessor for PBDateRange(0) + 28);
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  return v5(v3, v4);
}

uint64_t sub_22D023D98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void *)(a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)(a2 + v4);
  *(void *)(v5 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + v4 + 24);
  *(void *)(v5 + 16) = *(void *)(a2 + v4 + 16);
  *(void *)(v5 + 24) = v8;
  *(void *)(v5 + 32) = *(void *)(a2 + v4 + 32);
  *(unsigned char *)(v5 + 40) = *(unsigned char *)(a2 + v4 + 40);
  uint64_t v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  uint64_t v10 = v5 + v9;
  uint64_t v11 = v6 + v9;
  uint64_t v12 = sub_22D2BBFF0();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13(v10, v11, v12);
  return a1;
}

uint64_t sub_22D023E74(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  *(void *)uint64_t v6 = *(uint64_t *)((char *)a2 + v5);
  *(void *)(v6 + 8) = *(uint64_t *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v6 + 16) = *(void *)(v7 + 16);
  *(void *)(v6 + 24) = *(void *)(v7 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v7 + 32);
  *(unsigned char *)(v6 + 40) = *(unsigned char *)(v7 + 40);
  *(void *)(v6 + 32) = v8;
  uint64_t v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = v7 + v9;
  uint64_t v12 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

uint64_t sub_22D023F5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  long long v7 = *(_OWORD *)(a2 + v4 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a2 + v4);
  *(_OWORD *)(v5 + 16) = v7;
  *(void *)(v5 + 32) = *(void *)(a2 + v4 + 32);
  *(unsigned char *)(v5 + 40) = *(unsigned char *)(a2 + v4 + 40);
  uint64_t v8 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v11 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_22D02400C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = *(void *)(a2 + v4 + 8);
  *(void *)uint64_t v5 = *(void *)(a2 + v4);
  *(void *)(v5 + 8) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(v6 + 24);
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  *(void *)(v5 + 24) = v8;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 32) = *(void *)(v6 + 32);
  *(unsigned char *)(v5 + 40) = *(unsigned char *)(v6 + 40);
  uint64_t v9 = *(int *)(type metadata accessor for PBDateRange(0) + 28);
  uint64_t v10 = v5 + v9;
  uint64_t v11 = v6 + v9;
  uint64_t v12 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_22D0240D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D0240E8);
}

uint64_t sub_22D0240E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for PBDateRange(0);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);
  return v6(v4, a2, v5);
}

uint64_t sub_22D024158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D02416C);
}

uint64_t sub_22D02416C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for PBDateRange(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);
  return v7(v5, a2, a2, v6);
}

uint64_t sub_22D0241E0()
{
  uint64_t result = type metadata accessor for PBDateRange(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_22D024278(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_22D2BBC90();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v11 = a3[7];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_22D2BBAA0();
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    id v16 = v10;
    swift_retain();
    v15(v12, v13, v14);
    uint64_t v17 = a3[8];
    long long v18 = *(_OWORD *)((char *)a2 + v17 + 24);
    *(_OWORD *)((char *)a1 + v17 + 24) = v18;
    (**(void (***)(void))(v18 - 8))();
    uint64_t v19 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    uint64_t v20 = (char *)a1 + v19;
    uint64_t v21 = (char *)a2 + v19;
    uint64_t v22 = sub_22D2BBC30();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
  }
  return a1;
}

uint64_t sub_22D024460(uint64_t a1, int *a2)
{
  uint64_t v4 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);

  swift_release();
  uint64_t v5 = a1 + a2[7];
  uint64_t v6 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[8]);
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = sub_22D2BBC30();
  uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  return v9(v7, v8);
}

uint64_t sub_22D024574(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = sub_22D2BBAA0();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  id v15 = v9;
  swift_retain();
  v14(v11, v12, v13);
  uint64_t v16 = a3[8];
  long long v17 = *(_OWORD *)(a2 + v16 + 24);
  *(_OWORD *)(a1 + v16 + 24) = v17;
  (**(void (***)(void))(v17 - 8))();
  uint64_t v18 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 16))(v19, v20, v21);
  return a1;
}

uint64_t sub_22D02470C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a2 + v7);
  uint64_t v9 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = v8;
  id v10 = v8;

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_retain();
  swift_release();
  uint64_t v11 = a3[7];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + a3[8]), (uint64_t *)(a2 + a3[8]));
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        uint64_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

uint64_t sub_22D024A94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[8];
  uint64_t v13 = a3[9];
  uint64_t v14 = a1 + v12;
  uint64_t v15 = (long long *)(a2 + v12);
  long long v16 = *v15;
  long long v17 = v15[1];
  *(void *)(v14 + 32) = *((void *)v15 + 4);
  uint64_t v18 = *(void *)(a2 + v13);
  *(_OWORD *)uint64_t v14 = v16;
  *(_OWORD *)(v14 + 16) = v17;
  *(void *)(a1 + v13) = v18;
  uint64_t v19 = a3[10];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 32))(v20, v21, v22);
  return a1;
}

uint64_t sub_22D024BD4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  swift_release();
  uint64_t v9 = a3[7];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  __swift_destroy_boxed_opaque_existential_1(a1 + v13);
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(void *)(v14 + 32) = *(void *)(v15 + 32);
  uint64_t v17 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_22D024D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D024D44);
}

uint64_t sub_22D024D44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC90();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_9:
    return v9(v10, a2, v8);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v11 = *(void *)(a1 + a3[5]);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v13 = sub_22D2BBAA0();
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a2)
    {
      uint64_t v8 = v13;
      uint64_t v10 = a1 + a3[7];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
      goto LABEL_9;
    }
    uint64_t v15 = sub_22D2BBC30();
    long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[10];
    return v16(v18, a2, v17);
  }
}

uint64_t sub_22D024EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D024ED8);
}

uint64_t sub_22D024ED8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_22D2BBC90();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[5]) = (a2 - 1);
    return result;
  }
  uint64_t v13 = sub_22D2BBAA0();
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[7];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  uint64_t v15 = sub_22D2BBC30();
  long long v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[10];
  return v16(v18, a2, a2, v17);
}

uint64_t sub_22D025058()
{
  uint64_t result = sub_22D2BBC90();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_22D2BBAA0();
    if (v2 <= 0x3F)
    {
      uint64_t result = sub_22D2BBC30();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

unint64_t sub_22D025190()
{
  unint64_t result = qword_26853DDC8;
  if (!qword_26853DDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DDC8);
  }
  return result;
}

void sub_22D0251E4()
{
  if (!qword_26853DDD0)
  {
    sub_22D02524C();
    unint64_t v0 = sub_22D2BCB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DDD0);
    }
  }
}

void sub_22D02524C()
{
  if (!qword_26853DDD8)
  {
    sub_22D0254A4(255, (unint64_t *)&qword_26853DDE0);
    unint64_t v0 = sub_22D2BCB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DDD8);
    }
  }
}

uint64_t sub_22D0252C4()
{
  return sub_22D0252F8(&qword_26853DDF0, (void (*)(uint64_t))sub_22D02524C, (void (*)(void))sub_22D02537C);
}

uint64_t sub_22D0252F8(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22D02537C()
{
  unint64_t result = qword_26853DDF8;
  if (!qword_26853DDF8)
  {
    sub_22D0254A4(255, (unint64_t *)&qword_26853DDE0);
    sub_22D0253FC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DDF8);
  }
  return result;
}

unint64_t sub_22D0253FC()
{
  unint64_t result = qword_26853DE00;
  if (!qword_26853DE00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE00);
  }
  return result;
}

unint64_t sub_22D025450()
{
  unint64_t result = qword_26853DE10;
  if (!qword_26853DE10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE10);
  }
  return result;
}

void sub_22D0254A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_22D2BCE60();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_22D0254EC()
{
  unint64_t result = qword_26853DE18;
  if (!qword_26853DE18)
  {
    sub_22D0254A4(255, (unint64_t *)&qword_26AEC1EC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE18);
  }
  return result;
}

void sub_22D025564(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_22D2BD600();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_22D0255C4()
{
  unint64_t result = qword_26853DE28;
  if (!qword_26853DE28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE28);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for QuerySummary.QueryOutputDescription.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D0256E4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.QueryOutputDescription.CodingKeys()
{
  return &type metadata for QuerySummary.QueryOutputDescription.CodingKeys;
}

uint64_t getEnumTagSinglePayload for AccountSummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_17;
  }
  if (a2 + 8 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 8) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 8;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 8;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v8 = v6 - 9;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccountSummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D025878);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccountSummary.CodingKeys()
{
  return &type metadata for AccountSummary.CodingKeys;
}

uint64_t getEnumTagSinglePayload for QuerySummary.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 5 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 5) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 5;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 5;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 6;
  int v8 = v6 - 6;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for QuerySummary.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D025A0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for QuerySummary.CodingKeys()
{
  return &type metadata for QuerySummary.CodingKeys;
}

unint64_t sub_22D025A48()
{
  unint64_t result = qword_26853DE30;
  if (!qword_26853DE30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE30);
  }
  return result;
}

unint64_t sub_22D025AA0()
{
  unint64_t result = qword_26853DE38;
  if (!qword_26853DE38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE38);
  }
  return result;
}

unint64_t sub_22D025AF8()
{
  unint64_t result = qword_26853DE40;
  if (!qword_26853DE40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE40);
  }
  return result;
}

unint64_t sub_22D025B50()
{
  unint64_t result = qword_26853DE48;
  if (!qword_26853DE48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE48);
  }
  return result;
}

unint64_t sub_22D025BA8()
{
  unint64_t result = qword_26853DE50;
  if (!qword_26853DE50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE50);
  }
  return result;
}

unint64_t sub_22D025C00()
{
  unint64_t result = qword_26853DE58;
  if (!qword_26853DE58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE58);
  }
  return result;
}

unint64_t sub_22D025C58()
{
  unint64_t result = qword_26853DE60;
  if (!qword_26853DE60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE60);
  }
  return result;
}

unint64_t sub_22D025CB0()
{
  unint64_t result = qword_26853DE68;
  if (!qword_26853DE68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE68);
  }
  return result;
}

unint64_t sub_22D025D08()
{
  unint64_t result = qword_26853DE70;
  if (!qword_26853DE70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DE70);
  }
  return result;
}

uint64_t sub_22D025D5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7472617473 && a2 == 0xE500000000000000;
  if (v2 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 6581861 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_22D025E38(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1702125924 && a2 == 0xE400000000000000;
  if (v2 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x736E6F6974706FLL && a2 == 0xE700000000000000 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64657370616C65 && a2 == 0xE700000000000000 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646C697562 && a2 == 0xE500000000000000 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656369766564 && a2 == 0xE600000000000000 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x74757074756FLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_22D026094(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1684632949 && a2 == 0xE400000000000000;
  if (v2 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C746974 && a2 == 0xE500000000000000 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x5365727574616566 && a2 == 0xED00007375746174 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7461745372657375 && a2 == 0xEA00000000007375 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022D2D5E70 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x800000022D2D5E90 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6168537473726966 && a2 == 0xEB00000000646572 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x726168537473616CLL && a2 == 0xEA00000000006465 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7A69726F68747561 && a2 == 0xEE00736E6F697461)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t (*sub_22D026488(uint64_t a1))(char *)
{
  return sub_22D021724(a1);
}

void *sub_22D0264B0(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    BOOL v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    BOOL v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_22D2BB6F0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_retain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v13);
    *(void *)((char *)v7 + v13) = v15;
    *(void *)((char *)v7 + v14) = *(void *)((char *)a2 + v14);
    uint64_t v16 = a3[9];
    *((unsigned char *)v7 + a3[8]) = *((unsigned char *)a2 + a3[8]);
    uint64_t v17 = (char *)v7 + v16;
    uint64_t v18 = (char *)a2 + v16;
    *(void *)uint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    id v19 = v15;
  }
  return v7;
}

void *sub_22D0265E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_retain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void **)((char *)a2 + v11);
  *(void *)((char *)a1 + v11) = v13;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  uint64_t v14 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  *(void *)uint64_t v15 = *(void *)v16;
  v15[8] = v16[8];
  id v17 = v13;
  return a1;
}

void *sub_22D0266C4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = a3[5];
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a2 + v10);
  uint64_t v12 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = v11;
  id v13 = v11;

  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v14 = a3[9];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  return a1;
}

void *sub_22D0267AC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
  uint64_t v11 = a3[9];
  *((unsigned char *)a1 + a3[8]) = *((unsigned char *)a2 + a3[8]);
  uint64_t v12 = (char *)a1 + v11;
  id v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  return a1;
}

void *sub_22D026870(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = a3[5];
  BOOL v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BB6F0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)((char *)a1 + v10);
  *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);

  uint64_t v12 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  *(void *)uint64_t v14 = *(void *)v15;
  v14[8] = v15[8];
  return a1;
}

uint64_t sub_22D026948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D02695C);
}

uint64_t sub_22D02695C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BB6F0();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_22D026A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D026A20);
}

void *sub_22D026A20(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BB6F0();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingSampleQuery()
{
  uint64_t result = qword_26853DE78;
  if (!qword_26853DE78) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22D026B14()
{
  uint64_t result = sub_22D2BB6F0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D026BE0()
{
  uint64_t v1 = type metadata accessor for ClinicalSharingSampleQuery();
  uint64_t v65 = *(void *)(v1 - 8);
  uint64_t v2 = v1 - 8;
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v66 = v3;
  uint64_t v67 = (uint64_t)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x263EFDB28];
  sub_22D02A930(0, &qword_26853DE88, (uint64_t (*)(uint64_t))sub_22CFF491C, sub_22D02A7B0, MEMORY[0x263EFDB28]);
  uint64_t v71 = v5;
  uint64_t v69 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v68 = (char *)&v52 - v6;
  sub_22D02A7E4();
  uint64_t v72 = *(void *)(v7 - 8);
  uint64_t v73 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v70 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02A8CC();
  uint64_t v57 = v9;
  uint64_t v55 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v53 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02A930(0, &qword_26853DEA8, (uint64_t (*)(uint64_t))sub_22D02A8CC, sub_22D02A9F0, v4);
  uint64_t v58 = v11;
  uint64_t v56 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  char v54 = (char *)&v52 - v12;
  uint64_t v13 = sub_22D2BCFB0();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v63 = v13;
  uint64_t v64 = v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v61 = (char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_22D2BBC30();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  id v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v2;
  uint64_t v20 = *(int *)(v2 + 32);
  uint64_t v59 = v0;
  uint64_t v21 = *(void **)((char *)v0 + v20);
  uint64_t v22 = self;
  id v23 = v21;
  sub_22D2BB6C0();
  uint64_t v24 = (void *)sub_22D2BBBC0();
  uint64_t v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v25(v19, v16);
  sub_22D2BB690();
  uint64_t v26 = (void *)sub_22D2BBBC0();
  v25(v19, v16);
  id v27 = objc_msgSend(v22, sel_predicateForSamplesWithStartDate_endDate_options_, v24, v26, 0);

  id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A678]), sel_initWithSampleType_predicate_, v23, v27);
  uint64_t v29 = v59;
  uint64_t v30 = *(void **)((char *)v59 + v20);
  id v31 = v30;
  sub_22D229C70(0x73656C706D6173, 0xE700000000000000, v30, 5, 1);

  uint64_t v32 = (uint64_t)v29;
  sub_22CFF4B00(*v29 + 16, (uint64_t)v75);
  __swift_project_boxed_opaque_existential_1(v75, v75[3]);
  sub_22D02D2A4(0, (unint64_t *)&qword_2685426B0);
  uint64_t v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_22D2BFBE0;
  *(void *)(v33 + 32) = v28;
  uint64_t v74 = v33;
  sub_22D2BCE20();
  id v62 = v28;
  sub_22D090418();
  uint64_t v34 = v60;
  uint64_t v35 = v61;
  sub_22D2BCFE0();
  sub_22D02D4A8(&qword_26853DEB8, MEMORY[0x263F44AE8]);
  uint64_t v36 = v63;
  uint64_t v37 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v35, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v75);
  if (*(unsigned char *)(v32 + *(int *)(v34 + 44) + 8) == 1)
  {
    swift_retain();
    uint64_t v38 = v37;
  }
  else
  {
    v75[0] = v37;
    sub_22CFF491C();
    sub_22D02A7B0();
    swift_retain();
    uint64_t v39 = v53;
    sub_22D2BC800();
    sub_22D02D36C(0, (unint64_t *)&qword_26853D770, (uint64_t (*)(uint64_t))sub_22CFF49BC, MEMORY[0x263F8D488]);
    sub_22D02A9F0();
    uint64_t v40 = v54;
    uint64_t v41 = v57;
    sub_22D2BC780();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v39, v41);
    sub_22D02C6A0(&qword_26853DEC8, &qword_26853DEA8, (uint64_t (*)(uint64_t))sub_22D02A8CC, sub_22D02A9F0);
    uint64_t v42 = v58;
    uint64_t v38 = sub_22D2BC720();
    swift_release();
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v42);
  }
  v75[0] = v38;
  sub_22CFF491C();
  sub_22D02D36C(0, (unint64_t *)&qword_26853D770, (uint64_t (*)(uint64_t))sub_22CFF49BC, MEMORY[0x263F8D488]);
  sub_22D02A7B0();
  swift_retain();
  char v43 = v68;
  sub_22D2BC780();
  swift_release();
  uint64_t v44 = v67;
  sub_22D02C84C(v32, v67, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
  unint64_t v45 = (*(unsigned __int8 *)(v65 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80);
  uint64_t v46 = swift_allocObject();
  sub_22D02C704(v44, v46 + v45, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_22D02C6A0(&qword_26853DE98, &qword_26853DE88, (uint64_t (*)(uint64_t))sub_22CFF491C, sub_22D02A7B0);
  uint64_t v48 = v70;
  uint64_t v47 = v71;
  sub_22D2BC730();
  swift_release();
  (*(void (**)(char *, uint64_t))(v69 + 8))(v43, v47);
  sub_22D02D4A8(&qword_26853DEC0, (void (*)(uint64_t))sub_22D02A7E4);
  uint64_t v49 = v73;
  uint64_t v50 = sub_22D2BC720();
  swift_release();
  swift_release();

  (*(void (**)(char *, uint64_t))(v72 + 8))(v48, v49);
  return v50;
}

uint64_t sub_22D027618@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = MEMORY[0x263F8EE78];
  uint64_t v7 = MEMORY[0x263F8EE78];
  uint64_t v4 = *(void *)(*(void *)result + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      unint64_t v6 = swift_bridgeObjectRetain();
      sub_22D23E840(v6);
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v3 = v7;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_22D0276A4(uint64_t a1)
{
  sub_22D02D3D0();
  uint64_t v41 = v2;
  uint64_t v3 = MEMORY[0x270FA5388](v2);
  uint64_t v40 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = MEMORY[0x270FA5388](v3);
  uint64_t v38 = (char *)&v35 - v6;
  MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v35 - v7;
  uint64_t v44 = MEMORY[0x263F8EE78];
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v36 = a1 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v37 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v42 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v13 = 0;
  uint64_t v14 = (uint64_t)v38;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      int64_t v43 = v13;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_5;
    }
    int64_t v31 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v31 >= v37) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v36 + 8 * v31);
    int64_t v33 = v13 + 1;
    if (!v32)
    {
      int64_t v33 = v13 + 2;
      if (v13 + 2 >= v37) {
        goto LABEL_23;
      }
      unint64_t v32 = *(void *)(v36 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v13 + 3;
        if (v13 + 3 >= v37) {
          goto LABEL_23;
        }
        unint64_t v32 = *(void *)(v36 + 8 * v33);
        if (!v32)
        {
          int64_t v33 = v13 + 4;
          if (v13 + 4 >= v37) {
            goto LABEL_23;
          }
          unint64_t v32 = *(void *)(v36 + 8 * v33);
          if (!v32) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v32 - 1) & v32;
    int64_t v43 = v33;
    unint64_t v16 = __clz(__rbit64(v32)) + (v33 << 6);
LABEL_5:
    uint64_t v17 = v42;
    uint64_t v18 = *(void *)(v42 + 48);
    uint64_t v19 = sub_22D2BB6F0();
    uint64_t v20 = *(void *)(v19 - 8);
    uint64_t v21 = v20;
    uint64_t v22 = v18 + *(void *)(v20 + 72) * v16;
    id v23 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    uint64_t v24 = (uint64_t)v39;
    v23(v39, v22, v19);
    uint64_t v25 = *(void *)(*(void *)(v17 + 56) + 8 * v16);
    uint64_t v26 = v41;
    *(void *)(v24 + *(int *)(v41 + 48)) = v25;
    sub_22D02C704(v24, v14, (uint64_t (*)(void))sub_22D02D3D0);
    uint64_t v27 = *(int *)(v26 + 48);
    id v28 = v40;
    v23(v40, v14, v19);
    unint64_t v29 = *(void *)(v14 + v27);
    *(void *)&v28[v27] = v29;
    uint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v30(v28, v19);
    sub_22D02C76C(v14, (uint64_t (*)(void))sub_22D02D3D0);
    uint64_t result = sub_22D23E840(v29);
    int64_t v13 = v43;
  }
  uint64_t v34 = v13 + 5;
  if (v13 + 5 >= v37)
  {
LABEL_23:
    swift_release();
    return v44;
  }
  unint64_t v32 = *(void *)(v36 + 8 * v34);
  if (v32)
  {
    int64_t v33 = v13 + 5;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v33 = v34 + 1;
    if (__OFADD__(v34, 1)) {
      break;
    }
    if (v33 >= v37) {
      goto LABEL_23;
    }
    unint64_t v32 = *(void *)(v36 + 8 * v33);
    ++v34;
    if (v32) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

unint64_t sub_22D027A30@<X0>(unint64_t *a1@<X8>)
{
  unint64_t v2 = swift_bridgeObjectRetain();
  unint64_t result = sub_22D027A60(v2);
  *a1 = result;
  return result;
}

unint64_t sub_22D027A60(unint64_t a1)
{
  unint64_t v1 = a1;
  if ((a1 & 0x8000000000000000) != 0 || (a1 & 0x4000000000000000) != 0) {
    goto LABEL_39;
  }
  uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  unint64_t v20 = v1 & 0xFFFFFFFFFFFFFF8;
LABEL_4:
  if ((v2 & 0x4000000000000000) == 0)
  {
    uint64_t v3 = *(void *)(v2 + 16);
    swift_bridgeObjectRelease();
    unint64_t v4 = (unint64_t)v3 >> 1;
    goto LABEL_6;
  }
  while (1)
  {
    swift_retain();
    uint64_t v3 = sub_22D2BD470();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v19 = v3 >= 0 ? v3 : v3 + 1;
    if (v3 < -1) {
      __break(1u);
    }
    unint64_t v4 = v19 >> 1;
LABEL_6:
    if ((unint64_t)(v3 + 1) < 3) {
      return v2;
    }
    unint64_t v5 = 0;
    while (1)
    {
      unint64_t v7 = v5 + 1;
      unint64_t v1 = v3 - (v5 + 1);
      if (__OFSUB__(v3, v5 + 1)) {
        break;
      }
      if (v5 != v1)
      {
        unint64_t v8 = v20;
        if ((v20 & 0xC000000000000001) != 0)
        {
          uint64_t v11 = MEMORY[0x230F7AF90](v5, v20);
          id v12 = (id)MEMORY[0x230F7AF90](v3 - (v5 + 1), v20);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0) {
            goto LABEL_33;
          }
          unint64_t v9 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
          if (v5 >= v9) {
            goto LABEL_34;
          }
          id v10 = *(id *)(v20 + 8 * v5 + 32);
          if ((v1 & 0x8000000000000000) != 0) {
            goto LABEL_35;
          }
          if (v1 >= v9) {
            goto LABEL_37;
          }
          uint64_t v11 = (uint64_t)v10;
          id v12 = *(id *)(v20 + 32 + 8 * v1);
        }
        id v13 = v12;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v20 & 0x8000000000000000) != 0
          || (v20 & 0x4000000000000000) != 0)
        {
          sub_22D02BB70(v20);
          unint64_t v8 = v14;
          unint64_t v20 = v14;
        }
        uint64_t v15 = (v8 & 0xFFFFFFFFFFFFFF8) + 8 * v5;

        *(void *)(v15 + 32) = v13;
        sub_22D2BCE20();
        unint64_t v16 = v20;
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v20 & 0x8000000000000000) != 0
          || (v20 & 0x4000000000000000) != 0)
        {
          sub_22D02BB70(v20);
          unint64_t v16 = v17;
          unint64_t v20 = v17;
        }
        if ((v1 & 0x8000000000000000) != 0) {
          goto LABEL_36;
        }
        if (v1 >= *(void *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_38;
        }
        uint64_t v6 = (v16 & 0xFFFFFFFFFFFFFF8) + 8 * v1;

        *(void *)(v6 + 32) = v11;
        sub_22D2BCE20();
      }
      unint64_t v5 = v7;
      if (v4 == v7) {
        return v20;
      }
    }
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    uint64_t v2 = (uint64_t)sub_22D249014(v1);
    unint64_t v20 = v2;
    if ((v2 & 0x8000000000000000) == 0) {
      goto LABEL_4;
    }
  }
}

uint64_t sub_22D027C7C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v4 = sub_22D2BBC30();
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v36 = sub_22D2BB6F0();
  uint64_t v6 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  unint64_t v8 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02D36C(0, &qword_26853DED0, type metadata accessor for PBTypedData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (void (**)(unint64_t *, char *, char *))((char *)v31 - v10);
  uint64_t v12 = type metadata accessor for PBTypedData(0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0285D4(a1, v11);
  if ((*(unsigned int (**)(void, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_22D02C8B4((uint64_t)v11, &qword_26853DED0, type metadata accessor for PBTypedData);
    uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Output - 8) + 56))(v32, 1, 1, Output);
  }
  sub_22D02C704((uint64_t)v11, (uint64_t)v15, type metadata accessor for PBTypedData);
  uint64_t v18 = type metadata accessor for ClinicalSharingSampleQuery();
  uint64_t v19 = 0;
  uint64_t v20 = (uint64_t)v15;
  uint64_t v21 = v32;
  if (*(unsigned char *)(v2 + *(int *)(v18 + 32)) != 1) {
    goto LABEL_16;
  }
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v20 = (uint64_t)v15;
    uint64_t v22 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v19 = MEMORY[0x263F8EE78];
  if (!v22) {
    goto LABEL_16;
  }
  v31[0] = v20;
  v31[1] = v2;
  unint64_t v35 = a1;
  uint64_t v37 = MEMORY[0x263F8EE78];
  uint64_t result = sub_22D24B8D4(0, v22 & ~(v22 >> 63), 0);
  if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v23 = 0;
    uint64_t v19 = v37;
    uint64_t v33 = v6 + 32;
    unint64_t v34 = v35 & 0xC000000000000001;
    uint64_t v24 = v22;
    do
    {
      if (v34) {
        id v25 = (id)MEMORY[0x230F7AF90](v23, v35);
      }
      else {
        id v25 = *(id *)(v35 + 8 * v23 + 32);
      }
      uint64_t v26 = v25;
      id v27 = objc_msgSend(v25, sel_startDate);
      sub_22D2BBC00();

      id v28 = objc_msgSend(v26, sel_endDate);
      sub_22D2BBC00();

      sub_22D2BB6A0();
      uint64_t v37 = v19;
      unint64_t v30 = *(void *)(v19 + 16);
      unint64_t v29 = *(void *)(v19 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_22D24B8D4(v29 > 1, v30 + 1, 1);
        uint64_t v19 = v37;
      }
      ++v23;
      *(void *)(v19 + 16) = v30 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v30, v8, v36);
    }
    while (v24 != v23);
    uint64_t v21 = v32;
    uint64_t v20 = v31[0];
LABEL_16:
    sub_22D22A058(v20, v19, v21);
    swift_bridgeObjectRelease();
    return sub_22D02C76C(v20, type metadata accessor for PBTypedData);
  }
  __break(1u);
  return result;
}

uint64_t sub_22D028144(uint64_t a1)
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D02D36C(0, &qword_26853DEE0, MEMORY[0x263F079C8], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v33 - v5;
  sub_22D02D36C(0, &qword_26853DEE8, MEMORY[0x263F07920], v3);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = sub_22D2BB8E0();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_22D2BBC30();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = v1 + *(int *)(type metadata accessor for ClinicalSharingSampleQuery() + 36);
  if (*(unsigned char *)(v18 + 8))
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v34 = *(void *)v18;
    sub_22D2BB6C0();
    sub_22D2BBDA0();
    uint64_t v19 = sub_22D2BBE00();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 0, 1, v19);
    uint64_t v20 = sub_22D2BBE60();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v6, 1, 1, v20);
    sub_22D2BB8C0();
    id v21 = objc_allocWithZone(MEMORY[0x263F0A9A0]);
    uint64_t v22 = (void *)sub_22D2BBBC0();
    uint64_t v23 = (void *)sub_22D2BB810();
    id v24 = objc_msgSend(v21, sel_initWithAnchorDate_intervalComponents_, v22, v23);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    id v25 = v24;
    unint64_t v26 = swift_bridgeObjectRetain();
    uint64_t v27 = sub_22D02C94C(v26, v25);
    swift_bridgeObjectRelease();

    uint64_t v28 = sub_22D02BBEC(v27, v34);
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_22D0276A4(v28);
    swift_release();
    if (v29 < 0 || (v29 & 0x4000000000000000) != 0)
    {
      unint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v30 = (uint64_t)sub_22D249014(v32);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v30 = v29 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    uint64_t v35 = v30;
    sub_22D02AA24(&v35);
    swift_bridgeObjectRelease();

    return v35;
  }
  return a1;
}

uint64_t sub_22D0285D4@<X0>(unint64_t a1@<X0>, void (**a2)(unint64_t *, char *, char *)@<X8>)
{
  uint64_t v127 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x270FA5388](v127);
  uint64_t v128 = (char *)&v123 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v138 = type metadata accessor for ClinicalSharingSampleQuery();
  uint64_t v6 = MEMORY[0x270FA5388](v138);
  uint64_t v8 = (char *)&v123 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v125 = (uint64_t)&v123 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v126 = (uint64_t)&v123 - v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v124 = (uint64_t)&v123 - v13;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D02D36C(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v16 = MEMORY[0x270FA5388](v15 - 8);
  uint64_t v137 = (uint64_t)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v136 = (uint64_t)&v123 - v18;
  uint64_t v19 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v132 = (uint64_t)&v123 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v155 = sub_22D2BB6F0();
  uint64_t v21 = *(void *)(v155 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v155);
  uint64_t v146 = (char *)&v123 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  id v25 = (unint64_t *)((char *)&v123 - v24);
  uint64_t v26 = sub_22D2BBC30();
  uint64_t v27 = MEMORY[0x270FA5388](v26 - 8);
  uint64_t v153 = (char *)&v123 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v27);
  uint64_t v152 = (char *)&v123 - v29;
  sub_22D02D36C(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v14);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v135 = (uint64_t)&v123 - v31;
  uint64_t v140 = type metadata accessor for PBTypedData(0);
  uint64_t v139 = *(void *)(v140 - 8);
  MEMORY[0x270FA5388](v140);
  uint64_t v143 = (uint64_t)&v123 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = type metadata accessor for PBDateRange(0);
  uint64_t v133 = *(void *)(v134 - 8);
  MEMORY[0x270FA5388](v134);
  uint64_t v142 = (uint64_t)&v123 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02D36C(0, &qword_26853D7A0, MEMORY[0x263F062D0], v14);
  uint64_t v35 = MEMORY[0x270FA5388](v34 - 8);
  uint64_t v145 = (char *)&v123 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v151 = (uint64_t)&v123 - v38;
  uint64_t v39 = MEMORY[0x270FA5388](v37);
  uint64_t v41 = (unint64_t *)((char *)&v123 - v40);
  uint64_t v42 = MEMORY[0x270FA5388](v39);
  uint64_t v44 = (char *)&v123 - v43;
  MEMORY[0x270FA5388](v42);
  uint64_t v141 = (uint64_t)&v123 - v45;
  if (a1 >> 62) {
    goto LABEL_16;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_17:
    uint64_t v59 = *(uint64_t (**)(void (**)(unint64_t *, char *, char *), uint64_t, uint64_t, uint64_t))(v139 + 56);
    uint64_t v60 = v140;
    return v59(a2, 1, 1, v60);
  }
  while (1)
  {
    uint64_t v154 = (char *)v41;
    unint64_t v46 = sub_22D028144(a1);
    uint64_t v158 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
    uint64_t v159 = v21 + 56;
    v158(v44, 1, 1, v155);
    unint64_t v156 = v46;
    uint64_t v131 = (uint64_t)a2;
    uint64_t v130 = (uint64_t)v2;
    uint64_t v129 = v8;
    if (v46 >> 62) {
      break;
    }
    uint64_t v47 = *(void *)((v156 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v47) {
      goto LABEL_21;
    }
LABEL_5:
    uint64_t v149 = (unsigned int (**)(char *, uint64_t, char *))(v21 + 48);
    unint64_t v150 = v156 & 0xC000000000000001;
    a2 = (void (**)(unint64_t *, char *, char *))(v21 + 32);
    uint64_t v144 = (unint64_t *)(v21 + 8);
    a1 = 4;
    uint64_t v147 = (void (**)(unint64_t *, char *, char *))(v21 + 32);
    uint64_t v148 = v25;
    uint64_t v8 = (char *)v155;
    while (1)
    {
      id v49 = v150 ? (id)MEMORY[0x230F7AF90](a1 - 4, v156) : *(id *)(v156 + 8 * a1);
      uint64_t v2 = v49;
      if (__OFADD__(a1 - 4, 1)) {
        break;
      }
      unint64_t v157 = a1 - 3;
      id v50 = objc_msgSend(v49, sel_startDate);
      sub_22D2BBC00();

      id v51 = objc_msgSend(v2, sel_endDate);
      sub_22D2BBC00();

      uint64_t v52 = v154;
      sub_22D2BB6A0();

      v158(v52, 0, 1, (uint64_t)v8);
      uint64_t v53 = *v149;
      if ((*v149)(v52, 1, v8) == 1) {
        goto LABEL_22;
      }
      a2 = v147;
      uint64_t v41 = v148;
      char v54 = *v147;
      (*v147)(v148, v52, v8);
      uint64_t v21 = v151;
      sub_22D02D1E4((uint64_t)v44, v151);
      if (v53((char *)v21, 1, v8) == 1)
      {
        uint64_t v48 = (uint64_t (*)(uint64_t))MEMORY[0x263F062D0];
        id v25 = &qword_26853D7A0;
        sub_22D02C8B4((uint64_t)v44, &qword_26853D7A0, MEMORY[0x263F062D0]);
        sub_22D02C8B4(v21, &qword_26853D7A0, v48);
        v54((unint64_t *)v44, (char *)v41, v8);
        v158(v44, 0, 1, (uint64_t)v8);
      }
      else
      {
        uint64_t v55 = v146;
        v54((unint64_t *)v146, (char *)v21, v8);
        uint64_t v21 = (uint64_t)v145;
        sub_22D2BB6E0();
        id v25 = v144;
        uint64_t v56 = (void (*)(unint64_t *, char *))*v144;
        ((void (*)(char *, char *))*v144)(v55, v8);
        v56(v41, v8);
        uint64_t v57 = (uint64_t (*)(uint64_t))MEMORY[0x263F062D0];
        sub_22D02C8B4((uint64_t)v44, &qword_26853D7A0, MEMORY[0x263F062D0]);
        v158((char *)v21, 0, 1, (uint64_t)v8);
        sub_22D02C7CC(v21, (uint64_t)v44, &qword_26853D7A0, v57);
      }
      ++a1;
      if (v157 == v47) {
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
    uint64_t v58 = sub_22D2BD470();
    swift_bridgeObjectRelease();
    if (!v58) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain_n();
  uint64_t v47 = sub_22D2BD470();
  if (v47) {
    goto LABEL_5;
  }
LABEL_21:
  v158(v154, 1, 1, v155);
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v62 = v141;
  sub_22D02C7CC((uint64_t)v44, v141, &qword_26853D7A0, MEMORY[0x263F062D0]);
  swift_bridgeObjectRelease();
  uint64_t v63 = v142;
  uint64_t v64 = v130;
  sub_22D22BA04(5, 1, v62);
  uint64_t v65 = v63;
  uint64_t v66 = v135;
  sub_22D02C84C(v65, v135, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v133 + 56))(v66, 0, 1, v134);
  uint64_t v67 = v143;
  sub_22D22CD50(v66, v143);
  sub_22D02C8B4(v66, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v68 = v138;
  uint64_t v69 = *(int *)(v138 + 24);
  uint64_t v70 = *(void **)(v64 + v69);
  self;
  uint64_t v71 = swift_dynamicCastObjCClass();
  if (v71)
  {
    uint64_t v72 = (void *)v71;
    id v73 = v70;
    id v74 = sub_22D272B14();
    uint64_t v75 = v140;
    if (v74)
    {
      uint64_t v76 = v74;
      uint64_t v77 = sub_22D0A9500(v156);
      swift_bridgeObjectRelease();
      uint64_t v78 = v132;
      if (v77)
      {
        uint64_t v79 = v64;
        sub_22D029A88(v77, v76, v132);
        swift_bridgeObjectRelease();
        uint64_t v80 = *(int *)(v75 + 20);
        uint64_t v81 = v143;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBTypedData._StorageClass(0);
          swift_allocObject();
          uint64_t v82 = swift_retain();
          *(void *)(v81 + v80) = sub_22D0040E0(v82);
          swift_release();
        }
        uint64_t v83 = *(void *)(v81 + v80);
        uint64_t v84 = v136;
        sub_22D02C704(v78, v136, type metadata accessor for PBTimeSeries);
        uint64_t v85 = type metadata accessor for PBTypedData.OneOf_Raw(0);
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v84, 0, 1, v85);
        uint64_t v86 = v137;
        sub_22D02C7CC(v84, v137, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v87 = v83
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
        swift_beginAccess();
        swift_retain();
        sub_22D02D2EC(v86, v87, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
        swift_endAccess();

        uint64_t v88 = v131;
        uint64_t v64 = v79;
        goto LABEL_37;
      }
      unint64_t v160 = 0;
      unint64_t v161 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v160 = 0xD000000000000023;
      unint64_t v161 = 0x800000022D2D5980;
      id v114 = objc_msgSend(v72, sel_description);
      sub_22D2BCBD0();

      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      int v122 = 0;
    }
    else
    {
      uint64_t v111 = v124;
      sub_22D02C84C(v64, v124, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
      unint64_t v160 = 0;
      unint64_t v161 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v160 = 0xD00000000000001ALL;
      unint64_t v161 = 0x800000022D2D5F10;
      id v112 = *(id *)(v111 + *(int *)(v138 + 24));
      id v113 = objc_msgSend(v112, sel_description);
      sub_22D2BCBD0();

      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      int v122 = 0;
    }
LABEL_48:
    uint64_t result = sub_22D2BD460();
    __break(1u);
  }
  else
  {
    self;
    uint64_t v89 = swift_dynamicCastObjCClass();
    uint64_t v75 = v140;
    if (!v89)
    {
      uint64_t v115 = v125;
      sub_22D02C84C(v64, v125, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
      unint64_t v160 = 0;
      unint64_t v161 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v160 = 0xD000000000000016;
      unint64_t v161 = 0x800000022D2D5EF0;
      id v116 = *(id *)(v115 + *(int *)(v68 + 24));
      id v117 = objc_msgSend(v116, sel_description);
      sub_22D2BCBD0();

      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      int v122 = 0;
      goto LABEL_48;
    }
    uint64_t v90 = sub_22D0A950C(v156);
    swift_bridgeObjectRelease();
    uint64_t v91 = (uint64_t)v128;
    if (!v90)
    {
      uint64_t v118 = v126;
      sub_22D02C84C(v64, v126, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
      unint64_t v160 = 0;
      unint64_t v161 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v160 = 0xD000000000000023;
      unint64_t v161 = 0x800000022D2D5980;
      id v119 = *(id *)(v118 + *(int *)(v68 + 24));
      id v120 = objc_msgSend(v119, sel_description);
      sub_22D2BCBD0();

      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      int v122 = 0;
      goto LABEL_48;
    }
    sub_22D2BBFE0();
    uint64_t v92 = *(int *)(v127 + 20);
    if (qword_26853CFA8 != -1) {
      swift_once();
    }
    uint64_t v93 = qword_2685401B0;
    *(void *)(v91 + v92) = qword_2685401B0;
    MEMORY[0x270FA5388](v93);
    uint64_t v121 = v64;
    swift_retain();
    uint64_t v94 = sub_22D02CD9C(v90, (void (*)(void **))sub_22D02C924, (uint64_t)(&v123 - 4), (uint64_t)v162, type metadata accessor for PBCategorySeries.Event, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_22D24B75C, type metadata accessor for PBCategorySeries.Event);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries._StorageClass(0);
      swift_allocObject();
      uint64_t v95 = swift_retain();
      *(void *)(v91 + v92) = sub_22D165828(v95);
      swift_release();
    }
    char v96 = (uint64_t *)(*(void *)(v91 + v92)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events);
    swift_beginAccess();
    uint64_t *v96 = v94;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v97 = *(int *)(v75 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v98 = swift_retain();
      *(void *)(v67 + v97) = sub_22D0040E0(v98);
      swift_release();
    }
    uint64_t v99 = *(void *)(v67 + v97);
    uint64_t v100 = v136;
    sub_22D02C704(v91, v136, type metadata accessor for PBCategorySeries);
    uint64_t v101 = type metadata accessor for PBTypedData.OneOf_Raw(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v101 - 8) + 56))(v100, 0, 1, v101);
    uint64_t v102 = v137;
    sub_22D02C7CC(v100, v137, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    uint64_t v103 = v99
         + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_22D02D2EC(v102, v103, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    uint64_t v88 = v131;
LABEL_37:
    uint64_t v104 = (uint64_t)v129;
    swift_release();
    id v105 = objc_msgSend(*(id *)(v64 + v69), sel_code);
    sub_22D02C84C(v64, v104, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
    if (v105 == (id)15)
    {
      char v106 = *(unsigned char *)(v104 + *(int *)(v138 + 36) + 8);
      sub_22D02C76C(v104, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
      uint64_t v107 = v143;
      if ((v106 & 1) == 0)
      {
        uint64_t v108 = *(int *)(v75 + 20);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          type metadata accessor for PBTypedData._StorageClass(0);
          swift_allocObject();
          uint64_t v109 = swift_retain();
          *(void *)(v107 + v108) = sub_22D0040E0(v109);
          swift_release();
        }
        uint64_t v110 = *(void *)(v107 + v108);
        swift_beginAccess();
        *(void *)(v110 + 16) = 131;
        *(unsigned char *)(v110 + 24) = 1;
      }
    }
    else
    {
      sub_22D02C76C(v104, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSampleQuery);
      uint64_t v107 = v143;
    }
    sub_22D02C76C(v142, type metadata accessor for PBDateRange);
    sub_22D02C8B4(v141, &qword_26853D7A0, MEMORY[0x263F062D0]);
    sub_22D02C704(v107, v88, type metadata accessor for PBTypedData);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v139 + 56))(v88, 0, 1, v75);
  }
  return result;
}

uint64_t sub_22D029A88@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  sub_22D2BBFE0();
  uint64_t v8 = *(int *)(type metadata accessor for PBTimeSeries(0) + 20);
  if (qword_26853CF38 != -1) {
    swift_once();
  }
  *(void *)(a3 + v8) = qword_268540090;
  swift_retain();
  id v9 = objc_msgSend(a2, sel_unitString);
  uint64_t v10 = sub_22D2BCBD0();
  uint64_t v12 = v11;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTimeSeries._StorageClass(0);
    swift_allocObject();
    uint64_t v13 = swift_retain();
    *(void *)(a3 + v8) = sub_22D160258(v13);
    swift_release();
  }
  uint64_t v14 = (uint64_t *)(*(void *)(a3 + v8)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unit);
  swift_beginAccess();
  uint64_t *v14 = v10;
  v14[1] = v12;
  uint64_t v15 = swift_bridgeObjectRelease();
  MEMORY[0x270FA5388](v15);
  v20[2] = v4;
  v20[3] = a2;
  uint64_t v16 = sub_22D02CD9C(a1, (void (*)(void **))sub_22D02D278, (uint64_t)v20, (uint64_t)v21, type metadata accessor for PBTimeSeries.Value, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_22D24B88C, type metadata accessor for PBTimeSeries.Value);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTimeSeries._StorageClass(0);
    swift_allocObject();
    uint64_t v17 = swift_retain();
    *(void *)(a3 + v8) = sub_22D160258(v17);
    swift_release();
  }
  uint64_t v18 = (uint64_t *)(*(void *)(a3 + v8)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__values);
  swift_beginAccess();
  *uint64_t v18 = v16;
  return swift_bridgeObjectRelease();
}

void sub_22D029CD8(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D02D36C(0, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v57 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v56 = (void **)((char *)&v56 - v8);
  sub_22D02D36C(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v4);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v61 = (uint64_t)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v60 = (uint64_t)&v56 - v12;
  sub_22D02D36C(0, &qword_26AEC0F48, MEMORY[0x263F07490], v4);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = type metadata accessor for PBDateRange(0);
  uint64_t v58 = *(void *)(v19 - 8);
  uint64_t v59 = v19;
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v22 = *(int *)(type metadata accessor for PBCategorySeries.Event(0) + 20);
  if (qword_26853CFD0 != -1) {
    swift_once();
  }
  *(void *)(a2 + v22) = qword_268540208;
  swift_retain();
  id v23 = objc_msgSend(a1, sel_startDate);
  sub_22D2BBC00();

  uint64_t v24 = sub_22D2BBC30();
  id v25 = *(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56);
  v25(v18, 0, 1, v24);
  id v62 = a1;
  id v26 = objc_msgSend(a1, sel_endDate);
  sub_22D2BBC00();

  v25(v16, 0, 1, v24);
  sub_22D24D984(v18, v16);
  uint64_t v27 = (uint64_t (*)(uint64_t))MEMORY[0x263F07490];
  sub_22D02C8B4((uint64_t)v16, &qword_26AEC0F48, MEMORY[0x263F07490]);
  sub_22D02C8B4((uint64_t)v18, &qword_26AEC0F48, v27);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    uint64_t v28 = swift_retain();
    *(void *)(a2 + v22) = sub_22D1674C4(v28);
    swift_release();
  }
  uint64_t v29 = *(void *)(a2 + v22);
  uint64_t v30 = v60;
  sub_22D02C704((uint64_t)v21, v60, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v30, 0, 1, v59);
  uint64_t v31 = v61;
  sub_22D02C7CC(v30, v61, &qword_26853D7B0, type metadata accessor for PBDateRange);
  uint64_t v32 = v29
      + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
  swift_beginAccess();
  swift_retain();
  sub_22D02D2EC(v31, v32, &qword_26853D7B0, type metadata accessor for PBDateRange);
  swift_endAccess();
  swift_release();
  id v33 = v62;
  id v34 = objc_msgSend(v62, sel_sourceRevision);
  id v35 = objc_msgSend(v34, sel_source);

  id v36 = objc_msgSend(v35, sel_name);
  uint64_t v37 = sub_22D2BCBD0();
  uint64_t v39 = v38;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    uint64_t v40 = swift_retain();
    *(void *)(a2 + v22) = sub_22D1674C4(v40);
    swift_release();
  }
  uint64_t v41 = (uint64_t *)(*(void *)(a2 + v22)
                  + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
  swift_beginAccess();
  *uint64_t v41 = v37;
  v41[1] = v39;
  swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t)objc_msgSend(v33, sel_value);
  if (v42 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_17;
  }
  int v43 = v42;
  if (v42 > 0x7FFFFFFF)
  {
LABEL_17:
    __break(1u);
    return;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBCategorySeries.Event._StorageClass(0);
    swift_allocObject();
    uint64_t v44 = swift_retain();
    *(void *)(a2 + v22) = sub_22D1674C4(v44);
    swift_release();
  }
  uint64_t v45 = *(void *)(a2 + v22);
  swift_beginAccess();
  *(_DWORD *)(v45 + 16) = v43;
  sub_22CFF5778();
  if (v47)
  {
    uint64_t v48 = v46;
    uint64_t v49 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBCategorySeries.Event._StorageClass(0);
      swift_allocObject();
      uint64_t v50 = swift_retain();
      *(void *)(a2 + v22) = sub_22D1674C4(v50);
      swift_release();
    }
    uint64_t v51 = *(void *)(a2 + v22);
    uint64_t v52 = (uint64_t)v56;
    *uint64_t v56 = v48;
    *(void *)(v52 + 8) = v49;
    uint64_t v53 = type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v52, 0, 1, v53);
    uint64_t v54 = v57;
    sub_22D02C7CC(v52, v57, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    uint64_t v55 = v51
        + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__additionalData;
    swift_beginAccess();
    swift_retain();
    sub_22D02D2EC(v54, v55, &qword_26853D7A8, type metadata accessor for PBCategorySeries.Event.OneOf_AdditionalData);
    swift_endAccess();
    swift_release();
  }
}

id sub_22D02A460@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_22D2BBC30();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0xE000000000000000;
  *(_DWORD *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0xE000000000000000;
  *(void *)(a3 + 64) = 0;
  *(void *)(a3 + 72) = 0xE000000000000000;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_OWORD *)(a3 + 96) = 0u;
  *(void *)(a3 + 120) = MEMORY[0x263F8EE78];
  *(void *)(a3 + 128) = 0;
  *(_WORD *)(a3 + 136) = 256;
  type metadata accessor for PBTimeSeries.Value(0);
  sub_22D2BBFE0();
  id v11 = objc_msgSend(a1, sel_quantity);
  objc_msgSend(v11, sel_doubleValueForUnit_, a2);
  uint64_t v13 = v12;

  *(void *)(a3 + 112) = v13;
  id v14 = objc_msgSend(a1, sel_startDate);
  sub_22D2BBC00();

  id v15 = *(id *)(*v3 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  uint64_t v16 = (void *)sub_22D2BBBC0();
  id v17 = objc_msgSend(v15, sel_stringFromDate_, v16);

  uint64_t v18 = sub_22D2BCBD0();
  uint64_t v20 = v19;

  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_bridgeObjectRelease();
  *(void *)(a3 + 24) = v18;
  *(void *)(a3 + 32) = v20;
  id v21 = objc_msgSend(a1, sel_sourceRevision);
  id v22 = objc_msgSend(v21, sel_source);

  id v23 = objc_msgSend(v22, sel_name);
  uint64_t v24 = sub_22D2BCBD0();
  unint64_t v26 = v25;

  swift_bridgeObjectRelease();
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (v27)
  {
    sub_22D02D2A4(0, &qword_26853DED8);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_22D2BFF40;
    id v29 = objc_msgSend(a1, sel_sourceRevision);
    id v30 = objc_msgSend(v29, sel_source);

    id v31 = objc_msgSend(v30, sel_name);
    uint64_t v32 = sub_22D2BCBD0();
    uint64_t v34 = v33;

    *(void *)(v28 + 32) = v32;
    *(void *)(v28 + 40) = v34;
    swift_bridgeObjectRelease();
    *(void *)(a3 + 120) = v28;
  }
  id result = sub_22D297A28();
  if ((v36 & 1) == 0)
  {
    uint64_t v37 = result == (id)1;
    if (result == (id)2) {
      uint64_t v37 = 2;
    }
    *(void *)(a3 + 128) = v37;
    *(_WORD *)(a3 + 136) = 1;
  }
  return result;
}

uint64_t sub_22D02A7B0()
{
  return sub_22D02D4A8(&qword_26853D780, (void (*)(uint64_t))sub_22CFF491C);
}

void sub_22D02A7E4()
{
  if (!qword_26853DE90)
  {
    sub_22D02A930(255, &qword_26853DE88, (uint64_t (*)(uint64_t))sub_22CFF491C, sub_22D02A7B0, MEMORY[0x263EFDB28]);
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_22D02C6A0(&qword_26853DE98, &qword_26853DE88, (uint64_t (*)(uint64_t))sub_22CFF491C, sub_22D02A7B0);
    unint64_t v0 = sub_22D2BC3D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DE90);
    }
  }
}

void sub_22D02A8CC()
{
  if (!qword_26853DEA0)
  {
    sub_22CFF491C();
    sub_22D02A7B0();
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DEA0);
    }
  }
}

void sub_22D02A930(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    sub_22D02D36C(255, (unint64_t *)&qword_26853D770, (uint64_t (*)(uint64_t))sub_22CFF49BC, MEMORY[0x263F8D488]);
    uint64_t v11 = v10;
    uint64_t v12 = a4();
    unint64_t v13 = a5(a1, v9, v11, v12);
    if (!v14) {
      atomic_store(v13, a2);
    }
  }
}

uint64_t sub_22D02A9F0()
{
  return sub_22D02D4A8(&qword_26853DEB0, (void (*)(uint64_t))sub_22D02A8CC);
}

uint64_t sub_22D02AA24(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    sub_22D23A094();
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_22D02AAA0(v6);
  return sub_22D2BD3B0();
}

void sub_22D02AAA0(uint64_t *a1)
{
  uint64_t v136 = sub_22D2BBC30();
  uint64_t v2 = *(void *)(v136 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v136);
  uint64_t v135 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v134 = (char *)&v121 - v5;
  uint64_t v6 = a1[1];
  uint64_t v7 = sub_22D2BD620();
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_134;
    }
    if (v6) {
      sub_22D02B428(0, v6, 1, a1);
    }
    return;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_142;
  }
  uint64_t v126 = v7;
  if (v6 < 2)
  {
    uint64_t v11 = (char *)MEMORY[0x263F8EE78];
    uint64_t v139 = MEMORY[0x263F8EE78];
    uint64_t v131 = (void **)((MEMORY[0x263F8EE78] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v6 != 1)
    {
      unint64_t v14 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_100:
      uint64_t v112 = v132;
      if (v14 >= 2)
      {
        uint64_t v113 = *a1;
        do
        {
          unint64_t v114 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_129;
          }
          if (!v113) {
            goto LABEL_141;
          }
          uint64_t v115 = v11;
          id v116 = v11 + 32;
          uint64_t v117 = *(void *)&v11[16 * v114 + 32];
          uint64_t v118 = *(void *)&v11[16 * v14 + 24];
          sub_22D02B660(v113 + 8 * v117, (id *)(v113 + 8 * *(void *)&v116[16 * v14 - 16]), (id *)(v113 + 8 * v118), v131);
          if (v112) {
            break;
          }
          if (v118 < v117) {
            goto LABEL_130;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v115 = sub_22D237C00((uint64_t)v115);
          }
          if (v114 >= *((void *)v115 + 2)) {
            goto LABEL_131;
          }
          id v119 = &v115[16 * v114 + 32];
          *(void *)id v119 = v117;
          *((void *)v119 + 1) = v118;
          unint64_t v120 = *((void *)v115 + 2);
          if (v14 > v120) {
            goto LABEL_132;
          }
          uint64_t v11 = v115;
          memmove(&v115[16 * v14 + 16], &v115[16 * v14 + 32], 16 * (v120 - v14));
          *((void *)v115 + 2) = v120 - 1;
          unint64_t v14 = v120 - 1;
        }
        while (v120 > 2);
      }
LABEL_111:
      swift_bridgeObjectRelease();
      *(void *)((v139 & 0xFFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_22D2BCE20();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_22CFF49BC();
    uint64_t v10 = sub_22D2BCE40();
    *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10) = v9;
    uint64_t v131 = (void **)((v10 & 0xFFFFFFFFFFFFFF8) + 32);
    uint64_t v139 = v10;
  }
  uint64_t v12 = 0;
  uint64_t v13 = *a1;
  uint64_t v133 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v124 = v13 + 16;
  int v122 = a1;
  uint64_t v123 = v13 - 8;
  uint64_t v11 = (char *)MEMORY[0x263F8EE78];
  uint64_t v129 = v6;
  uint64_t v137 = v13;
  while (1)
  {
    uint64_t v15 = v12;
    uint64_t v16 = v12 + 1;
    uint64_t v128 = v12;
    if (v12 + 1 < v6)
    {
      id v17 = *(void **)(v13 + 8 * v12);
      id v18 = *(id *)(v13 + 8 * v16);
      id v19 = v17;
      id v20 = objc_msgSend(v18, sel_startDate);
      id v21 = v134;
      sub_22D2BBC00();

      id v22 = objc_msgSend(v19, sel_startDate);
      id v23 = v135;
      sub_22D2BBC00();

      LODWORD(v138) = sub_22D2BBBD0();
      uint64_t v24 = *v133;
      unint64_t v25 = v23;
      uint64_t v26 = v136;
      (*v133)(v25, v136);
      v24(v21, v26);

      uint64_t v6 = v129;
      uint64_t v16 = v15 + 2;
      if (v15 + 2 < v6)
      {
        uint64_t v125 = v11;
        uint64_t v27 = (id *)(v124 + 8 * v15);
        while (1)
        {
          uint64_t v28 = *(v27 - 1);
          id v29 = *v27;
          id v30 = v28;
          id v31 = objc_msgSend(v29, sel_startDate);
          uint64_t v32 = v134;
          sub_22D2BBC00();

          id v33 = objc_msgSend(v30, sel_startDate);
          uint64_t v34 = v135;
          sub_22D2BBC00();

          LODWORD(v33) = sub_22D2BBBD0();
          id v35 = v34;
          uint64_t v36 = v136;
          v24(v35, v136);
          v24(v32, v36);

          if ((v138 ^ v33)) {
            break;
          }
          ++v27;
          uint64_t v6 = v129;
          if (v129 == ++v16)
          {
            uint64_t v16 = v129;
            uint64_t v11 = v125;
            goto LABEL_22;
          }
        }
        uint64_t v11 = v125;
        uint64_t v6 = v129;
LABEL_22:
        uint64_t v15 = v128;
      }
      uint64_t v13 = v137;
      if (v138)
      {
        if (v16 < v15) {
          goto LABEL_135;
        }
        if (v15 < v16)
        {
          uint64_t v37 = (uint64_t *)(v123 + 8 * v16);
          uint64_t v38 = v16;
          uint64_t v39 = v15;
          uint64_t v40 = (uint64_t *)(v137 + 8 * v15);
          do
          {
            if (v39 != --v38)
            {
              if (!v13) {
                goto LABEL_140;
              }
              uint64_t v41 = *v40;
              *uint64_t v40 = *v37;
              *uint64_t v37 = v41;
            }
            ++v39;
            --v37;
            ++v40;
          }
          while (v39 < v38);
        }
      }
    }
    if (v16 >= v6) {
      goto LABEL_50;
    }
    if (__OFSUB__(v16, v15)) {
      goto LABEL_133;
    }
    if (v16 - v15 >= v126) {
      goto LABEL_50;
    }
    if (__OFADD__(v15, v126)) {
      goto LABEL_136;
    }
    uint64_t v42 = v15 + v126 >= v6 ? v6 : v15 + v126;
    if (v42 < v15) {
      break;
    }
    if (v16 != v42)
    {
      uint64_t v125 = v11;
      uint64_t v43 = v123 + 8 * v16;
      uint64_t v127 = v42;
      do
      {
        uint64_t v44 = *(void **)(v13 + 8 * v16);
        uint64_t v45 = v15;
        uint64_t v130 = v43;
        while (1)
        {
          uint64_t v46 = v16;
          uint64_t v47 = *(void **)v43;
          id v48 = v44;
          id v138 = v48;
          id v49 = v47;
          id v50 = objc_msgSend(v48, sel_startDate);
          uint64_t v51 = v134;
          sub_22D2BBC00();

          id v52 = objc_msgSend(v49, sel_startDate);
          uint64_t v53 = v135;
          sub_22D2BBC00();

          LOBYTE(v52) = sub_22D2BBBD0();
          uint64_t v54 = *v133;
          uint64_t v55 = v53;
          uint64_t v56 = v136;
          (*v133)(v55, v136);
          v54(v51, v56);

          if ((v52 & 1) == 0) {
            break;
          }
          uint64_t v13 = v137;
          if (!v137) {
            goto LABEL_138;
          }
          uint64_t v16 = v46;
          uint64_t v57 = *(void **)v43;
          uint64_t v44 = *(void **)(v43 + 8);
          *(void *)uint64_t v43 = v44;
          *(void *)(v43 + 8) = v57;
          v43 -= 8;
          if (v46 == ++v45) {
            goto LABEL_43;
          }
        }
        uint64_t v13 = v137;
        uint64_t v16 = v46;
LABEL_43:
        ++v16;
        uint64_t v43 = v130 + 8;
        uint64_t v15 = v128;
      }
      while (v16 != v127);
      uint64_t v16 = v127;
      uint64_t v11 = v125;
    }
LABEL_50:
    if (v16 < v15) {
      goto LABEL_128;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v138 = (id)v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v11 = sub_22D23775C(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v60 = *((void *)v11 + 2);
    unint64_t v59 = *((void *)v11 + 3);
    unint64_t v14 = v60 + 1;
    uint64_t v13 = v137;
    if (v60 >= v59 >> 1)
    {
      uint64_t v111 = sub_22D23775C((char *)(v59 > 1), v60 + 1, 1, v11);
      uint64_t v13 = v137;
      uint64_t v11 = v111;
    }
    *((void *)v11 + 2) = v14;
    uint64_t v61 = v11 + 32;
    id v62 = &v11[16 * v60 + 32];
    id v63 = v138;
    *(void *)id v62 = v15;
    *((void *)v62 + 1) = v63;
    if (v60)
    {
      while (1)
      {
        unint64_t v64 = v14 - 1;
        if (v14 >= 4)
        {
          uint64_t v69 = &v61[16 * v14];
          uint64_t v70 = *((void *)v69 - 8);
          uint64_t v71 = *((void *)v69 - 7);
          BOOL v75 = __OFSUB__(v71, v70);
          uint64_t v72 = v71 - v70;
          if (v75) {
            goto LABEL_117;
          }
          uint64_t v74 = *((void *)v69 - 6);
          uint64_t v73 = *((void *)v69 - 5);
          BOOL v75 = __OFSUB__(v73, v74);
          uint64_t v67 = v73 - v74;
          char v68 = v75;
          if (v75) {
            goto LABEL_118;
          }
          unint64_t v76 = v14 - 2;
          uint64_t v77 = &v61[16 * v14 - 32];
          uint64_t v79 = *(void *)v77;
          uint64_t v78 = *((void *)v77 + 1);
          BOOL v75 = __OFSUB__(v78, v79);
          uint64_t v80 = v78 - v79;
          if (v75) {
            goto LABEL_120;
          }
          BOOL v75 = __OFADD__(v67, v80);
          uint64_t v81 = v67 + v80;
          if (v75) {
            goto LABEL_123;
          }
          if (v81 >= v72)
          {
            uint64_t v99 = &v61[16 * v64];
            uint64_t v101 = *(void *)v99;
            uint64_t v100 = *((void *)v99 + 1);
            BOOL v75 = __OFSUB__(v100, v101);
            uint64_t v102 = v100 - v101;
            if (v75) {
              goto LABEL_127;
            }
            BOOL v92 = v67 < v102;
            goto LABEL_87;
          }
        }
        else
        {
          if (v14 != 3)
          {
            uint64_t v93 = *((void *)v11 + 4);
            uint64_t v94 = *((void *)v11 + 5);
            BOOL v75 = __OFSUB__(v94, v93);
            uint64_t v86 = v94 - v93;
            char v87 = v75;
            goto LABEL_81;
          }
          uint64_t v66 = *((void *)v11 + 4);
          uint64_t v65 = *((void *)v11 + 5);
          BOOL v75 = __OFSUB__(v65, v66);
          uint64_t v67 = v65 - v66;
          char v68 = v75;
        }
        if (v68) {
          goto LABEL_119;
        }
        unint64_t v76 = v14 - 2;
        uint64_t v82 = &v61[16 * v14 - 32];
        uint64_t v84 = *(void *)v82;
        uint64_t v83 = *((void *)v82 + 1);
        BOOL v85 = __OFSUB__(v83, v84);
        uint64_t v86 = v83 - v84;
        char v87 = v85;
        if (v85) {
          goto LABEL_122;
        }
        uint64_t v88 = &v61[16 * v64];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v75 = __OFSUB__(v89, v90);
        uint64_t v91 = v89 - v90;
        if (v75) {
          goto LABEL_125;
        }
        if (__OFADD__(v86, v91)) {
          goto LABEL_126;
        }
        if (v86 + v91 >= v67)
        {
          BOOL v92 = v67 < v91;
LABEL_87:
          if (v92) {
            unint64_t v64 = v76;
          }
          goto LABEL_89;
        }
LABEL_81:
        if (v87) {
          goto LABEL_121;
        }
        uint64_t v95 = &v61[16 * v64];
        uint64_t v97 = *(void *)v95;
        uint64_t v96 = *((void *)v95 + 1);
        BOOL v75 = __OFSUB__(v96, v97);
        uint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_124;
        }
        if (v98 < v86) {
          goto LABEL_14;
        }
LABEL_89:
        unint64_t v103 = v64 - 1;
        if (v64 - 1 >= v14)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        if (!v13) {
          goto LABEL_139;
        }
        uint64_t v104 = v11;
        id v105 = &v61[16 * v103];
        uint64_t v106 = *(void *)v105;
        uint64_t v107 = &v61[16 * v64];
        uint64_t v108 = *((void *)v107 + 1);
        uint64_t v109 = v132;
        sub_22D02B660(v13 + 8 * *(void *)v105, (id *)(v13 + 8 * *(void *)v107), (id *)(v13 + 8 * v108), v131);
        uint64_t v132 = v109;
        if (v109) {
          goto LABEL_111;
        }
        if (v108 < v106) {
          goto LABEL_114;
        }
        if (v64 > *((void *)v104 + 2)) {
          goto LABEL_115;
        }
        *(void *)id v105 = v106;
        *(void *)&v61[16 * v103 + 8] = v108;
        unint64_t v110 = *((void *)v104 + 2);
        if (v64 >= v110) {
          goto LABEL_116;
        }
        uint64_t v11 = v104;
        unint64_t v14 = v110 - 1;
        memmove(&v61[16 * v64], v107 + 16, 16 * (v110 - 1 - v64));
        *((void *)v104 + 2) = v110 - 1;
        uint64_t v13 = v137;
        if (v110 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v14 = 1;
LABEL_14:
    uint64_t v6 = v129;
    uint64_t v12 = (uint64_t)v138;
    if ((uint64_t)v138 >= v129)
    {
      a1 = v122;
      goto LABEL_100;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  sub_22D2BD450();
  __break(1u);
}

void sub_22D02B428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v30 = a1;
  uint64_t v35 = sub_22D2BBC30();
  uint64_t v7 = MEMORY[0x270FA5388](v35);
  uint64_t v34 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v33 = (char *)&v28 - v10;
  uint64_t v29 = a2;
  if (a3 != a2)
  {
    uint64_t v11 = *a4;
    uint64_t v32 = v9 + 8;
    uint64_t v36 = v11;
    uint64_t v12 = v11 + 8 * a3 - 8;
    uint64_t v13 = (void (**)(char *, uint64_t))(v9 + 8);
LABEL_5:
    unint64_t v14 = *(void **)(v36 + 8 * a3);
    uint64_t v15 = v30;
    uint64_t v31 = v12;
    while (1)
    {
      uint64_t v16 = *(void **)v12;
      id v17 = v14;
      id v37 = v17;
      id v18 = v16;
      id v19 = objc_msgSend(v17, sel_startDate);
      id v20 = v33;
      sub_22D2BBC00();

      id v21 = objc_msgSend(v18, sel_startDate);
      id v22 = v34;
      sub_22D2BBC00();

      LOBYTE(v21) = sub_22D2BBBD0();
      uint64_t v23 = a3;
      uint64_t v24 = *v13;
      unint64_t v25 = v22;
      uint64_t v26 = v35;
      (*v13)(v25, v35);
      v24(v20, v26);
      a3 = v23;

      if ((v21 & 1) == 0)
      {
LABEL_4:
        a3 = v23 + 1;
        uint64_t v12 = v31 + 8;
        if (v23 + 1 == v29) {
          return;
        }
        goto LABEL_5;
      }
      if (!v36) {
        break;
      }
      uint64_t v27 = *(void **)v12;
      unint64_t v14 = *(void **)(v12 + 8);
      *(void *)uint64_t v12 = v14;
      *(void *)(v12 + 8) = v27;
      v12 -= 8;
      if (v23 == ++v15) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t sub_22D02B660(uint64_t a1, id *a2, id *a3, void **a4)
{
  uint64_t v57 = sub_22D2BBC30();
  uint64_t v8 = *(void *)(v57 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v57);
  uint64_t v56 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v54 = a3;
  uint64_t v55 = (char *)&v48 - v12;
  uint64_t v13 = (uint64_t)a2 - a1;
  uint64_t v14 = v13 / 8;
  uint64_t v15 = a2;
  uint64_t v16 = (char *)a3 - (char *)a2;
  uint64_t v17 = v16 / 8;
  uint64_t v61 = v11;
  unint64_t v60 = a4;
  uint64_t v58 = v11;
  if (v13 / 8 >= v16 / 8)
  {
    if (v16 < -7) {
      goto LABEL_41;
    }
    if (a4 != v15 || &v15[v17] <= a4)
    {
      memmove(a4, v15, 8 * v17);
      uint64_t v11 = v58;
    }
    uint64_t v31 = &a4[v17];
    unint64_t v59 = v31;
    uint64_t v61 = v15;
    if (v16 < 8 || v11 >= v15) {
      goto LABEL_40;
    }
    id v49 = (void (**)(char *, uint64_t))(v8 + 8);
    id v50 = a4;
    uint64_t v32 = v54 - 1;
    id v33 = v15;
    while (1)
    {
      uint64_t v54 = v15;
      id v52 = v31;
      uint64_t v53 = v32 + 1;
      uint64_t v35 = v31 - 1;
      uint64_t v36 = *--v33;
      id v37 = *(v31 - 1);
      id v51 = v37;
      id v38 = v36;
      id v39 = objc_msgSend(v37, sel_startDate);
      uint64_t v40 = v55;
      sub_22D2BBC00();

      id v41 = objc_msgSend(v38, sel_startDate);
      uint64_t v42 = v56;
      sub_22D2BBC00();

      LOBYTE(v41) = sub_22D2BBBD0();
      uint64_t v43 = *v49;
      uint64_t v44 = v42;
      uint64_t v45 = v57;
      (*v49)(v44, v57);
      v43(v40, v45);

      if (v41) {
        break;
      }
      unint64_t v59 = v35;
      if (v53 < v52 || v32 >= v52)
      {
        *uint64_t v32 = *v35;
        id v33 = v54;
        uint64_t v31 = v35;
        goto LABEL_28;
      }
      unint64_t v46 = (unint64_t)v50;
      uint64_t v34 = v58;
      id v33 = v54;
      if (v53 != v52) {
        *uint64_t v32 = *v35;
      }
      uint64_t v31 = v35;
      if ((unint64_t)v35 <= v46) {
        goto LABEL_40;
      }
LABEL_29:
      --v32;
      uint64_t v15 = v33;
      if (v33 <= v34) {
        goto LABEL_40;
      }
    }
    uint64_t v31 = v52;
    if (v53 != v54 || v32 >= v54) {
      *uint64_t v32 = *v33;
    }
    uint64_t v61 = v33;
LABEL_28:
    uint64_t v34 = v58;
    if (v31 <= v50) {
      goto LABEL_40;
    }
    goto LABEL_29;
  }
  if (v13 >= -7)
  {
    if (a4 != v11 || &v11[v14] <= a4)
    {
      memmove(a4, v58, 8 * v14);
      uint64_t v11 = v58;
    }
    uint64_t v53 = &a4[v14];
    unint64_t v59 = v53;
    if (v13 >= 8 && v15 < v54)
    {
      id v52 = (void **)(v8 + 8);
      id v18 = v55;
      do
      {
        uint64_t v58 = v11;
        id v19 = *a4;
        id v20 = *v15;
        id v21 = v19;
        id v22 = a4;
        id v23 = objc_msgSend(v20, sel_startDate);
        sub_22D2BBC00();

        id v24 = objc_msgSend(v21, sel_startDate);
        unint64_t v25 = v56;
        sub_22D2BBC00();

        LOBYTE(v24) = sub_22D2BBBD0();
        uint64_t v26 = (void (*)(char *, uint64_t))*v52;
        uint64_t v27 = v25;
        uint64_t v28 = v57;
        ((void (*)(char *, uint64_t))*v52)(v27, v57);
        v26(v18, v28);

        if (v24)
        {
          a4 = v22;
          unint64_t v29 = (unint64_t)(v15 + 1);
          uint64_t v30 = v58;
          if (v58 < v15 || (unint64_t)v58 >= v29 || v58 != v15) {
            *uint64_t v58 = *v15;
          }
        }
        else
        {
          uint64_t v30 = v58;
          if (v58 != v22) {
            *uint64_t v58 = *v22;
          }
          a4 = v22 + 1;
          unint64_t v60 = v22 + 1;
          unint64_t v29 = (unint64_t)v15;
        }
        uint64_t v11 = v30 + 1;
        uint64_t v61 = v11;
        if (a4 >= v53) {
          break;
        }
        uint64_t v15 = (id *)v29;
      }
      while (v29 < (unint64_t)v54);
    }
LABEL_40:
    sub_22D237854(&v61, &v60, &v59);
    return 1;
  }
LABEL_41:
  uint64_t result = sub_22D2BD4C0();
  __break(1u);
  return result;
}

void sub_22D02BB70(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x230F7AFA0);
}

uint64_t sub_22D02BBEC(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v4 = isStackAllocationSafe;
  v11[1] = *MEMORY[0x263EF8340];
  char v5 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v6 = (unint64_t)((1 << v5) + 63) >> 6;
  size_t v7 = 8 * v6;
  if ((v5 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0), v7);
    uint64_t v8 = sub_22D02BD58((void *)((char *)v11 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0)), v6, v4, a2);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v8;
    }
  }
  else
  {
    uint64_t v9 = (void *)swift_slowAlloc();
    bzero(v9, v7);
    a2 = sub_22D02BD58((unint64_t *)v9, v6, v4, a2);
    MEMORY[0x230F7BDF0](v9, -1, -1);
  }
  return a2;
}

uint64_t sub_22D02BD58(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a2;
  uint64_t v46 = a4;
  id v38 = a1;
  sub_22D02D3D0();
  uint64_t v45 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  id v51 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v50 = (char *)&v36 - v8;
  uint64_t v9 = sub_22D2BB6F0();
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v14 = 0;
  uint64_t v47 = (void *)a3;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v39 = 0;
  uint64_t v40 = a3 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v43 = v11 + 16;
  uint64_t v44 = v11;
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = (void (**)(char *, uint64_t))(v11 + 8);
  while (v18)
  {
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = v14;
    unint64_t v19 = __clz(__rbit64(v18)) | (v14 << 6);
LABEL_17:
    id v24 = v47;
    unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v44 + 16);
    v25(v13, v47[6] + *(void *)(v44 + 72) * v19, v9);
    unint64_t v26 = *(void *)(v24[7] + 8 * v19);
    uint64_t v27 = v9;
    uint64_t v28 = (uint64_t)v50;
    unint64_t v29 = v13;
    v25(v50, (unint64_t)v13, v27);
    uint64_t v30 = v45;
    *(void *)(v28 + *(int *)(v45 + 48)) = v26;
    uint64_t v31 = *(int *)(v30 + 48);
    uint64_t v32 = v51;
    uint64_t v33 = v28;
    uint64_t v9 = v27;
    v25(v51, v33, v27);
    *(void *)&v32[v31] = v26;
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain_n();
      uint64_t v34 = sub_22D2BD470();
    }
    else
    {
      uint64_t v34 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
    }
    uint64_t v13 = v29;
    unint64_t v18 = v48;
    int64_t v14 = v49;
    sub_22D02C76C((uint64_t)v50, (uint64_t (*)(void))sub_22D02D3D0);
    uint64_t v35 = *v42;
    (*v42)(v51, v9);
    swift_bridgeObjectRelease();
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v35)(v13, v9);
    if (v34 <= v46)
    {
      *(unint64_t *)((char *)v38 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      BOOL v20 = __OFADD__(v39++, 1);
      if (v20) {
        goto LABEL_31;
      }
    }
  }
  BOOL v20 = __OFADD__(v14, 1);
  int64_t v21 = v14 + 1;
  if (v20)
  {
    __break(1u);
    goto LABEL_30;
  }
  if (v21 >= v41) {
    return sub_22D02C144(v38, v37, v39, v47);
  }
  unint64_t v22 = *(void *)(v40 + 8 * v21);
  if (v22)
  {
LABEL_16:
    uint64_t v48 = (v22 - 1) & v22;
    int64_t v49 = v21;
    unint64_t v19 = __clz(__rbit64(v22)) + (v21 << 6);
    goto LABEL_17;
  }
  int64_t v23 = v21 + 1;
  if (v21 + 1 >= v41) {
    return sub_22D02C144(v38, v37, v39, v47);
  }
  unint64_t v22 = *(void *)(v40 + 8 * v23);
  if (v22) {
    goto LABEL_15;
  }
  int64_t v23 = v21 + 2;
  if (v21 + 2 >= v41) {
    return sub_22D02C144(v38, v37, v39, v47);
  }
  unint64_t v22 = *(void *)(v40 + 8 * v23);
  if (v22) {
    goto LABEL_15;
  }
  int64_t v23 = v21 + 3;
  if (v21 + 3 >= v41) {
    return sub_22D02C144(v38, v37, v39, v47);
  }
  unint64_t v22 = *(void *)(v40 + 8 * v23);
  if (v22)
  {
LABEL_15:
    int64_t v21 = v23;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v21 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v21 >= v41) {
      return sub_22D02C144(v38, v37, v39, v47);
    }
    unint64_t v22 = *(void *)(v40 + 8 * v21);
    ++v23;
    if (v22) {
      goto LABEL_16;
    }
  }
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_22D02C144(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v47 = sub_22D2BB6F0();
  uint64_t v42 = *(void *)(v47 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v47);
  uint64_t v46 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  int64_t v41 = (char *)&v36 - v10;
  if (!a3) {
    return MEMORY[0x263F8EE80];
  }
  if (a4[2] == a3)
  {
    swift_retain();
    return (uint64_t)a4;
  }
  sub_22D02A930(0, (unint64_t *)&qword_26853DEF8, MEMORY[0x263F062D0], sub_22D02D474, MEMORY[0x263F8DFB0]);
  uint64_t result = sub_22D2BD4A0();
  uint64_t v12 = result;
  uint64_t v37 = a1;
  uint64_t v38 = a2;
  if (a2 < 1) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *a1;
  }
  uint64_t v14 = 0;
  uint64_t v39 = a4;
  uint64_t v40 = v42 + 16;
  uint64_t v45 = v42 + 32;
  uint64_t v15 = result + 64;
  uint64_t v16 = v47;
  while (1)
  {
    if (v13)
    {
      uint64_t v43 = (v13 - 1) & v13;
      uint64_t v44 = v14;
      unint64_t v17 = __clz(__rbit64(v13)) | (v14 << 6);
    }
    else
    {
      uint64_t v18 = v14 + 1;
      if (__OFADD__(v14, 1)) {
        goto LABEL_40;
      }
      if (v18 >= v38) {
        return v12;
      }
      unint64_t v19 = v37[v18];
      uint64_t v20 = v14 + 1;
      if (!v19)
      {
        uint64_t v20 = v14 + 2;
        if (v14 + 2 >= v38) {
          return v12;
        }
        unint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v14 + 3;
          if (v14 + 3 >= v38) {
            return v12;
          }
          unint64_t v19 = v37[v20];
          if (!v19)
          {
            uint64_t v21 = v14 + 4;
            if (v14 + 4 >= v38) {
              return v12;
            }
            unint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v20 >= v38) {
                  return v12;
                }
                unint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v20 = v14 + 4;
          }
        }
      }
LABEL_24:
      uint64_t v43 = (v19 - 1) & v19;
      uint64_t v44 = v20;
      unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
    }
    int64_t v23 = v41;
    uint64_t v22 = v42;
    uint64_t v24 = *(void *)(v42 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v42 + 16))(v41, a4[6] + v24 * v17, v16);
    uint64_t v25 = *(void *)(a4[7] + 8 * v17);
    unint64_t v26 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    v26(v46, v23, v16);
    sub_22D02D474();
    swift_bridgeObjectRetain();
    uint64_t result = sub_22D2BCB30();
    uint64_t v27 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v28 = result & ~v27;
    unint64_t v29 = v28 >> 6;
    if (((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6))) != 0)
    {
      unint64_t v30 = __clz(__rbit64((-1 << v28) & ~*(void *)(v15 + 8 * (v28 >> 6)))) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v33 = v29 == v32;
        if (v29 == v32) {
          unint64_t v29 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v15 + 8 * v29);
      }
      while (v34 == -1);
      unint64_t v30 = __clz(__rbit64(~v34)) + (v29 << 6);
    }
    *(void *)(v15 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v30;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(*(void *)(v12 + 48) + v30 * v24, v46, v47);
    *(void *)(*(void *)(v12 + 56) + 8 * v30) = v25;
    ++*(void *)(v12 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v39;
    unint64_t v13 = v43;
    uint64_t v14 = v44;
    if (!a3) {
      return v12;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22D02C52C()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingSampleQuery() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_release();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = sub_22D2BB6F0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);

  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22D02C62C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D027C7C(*a1, a2);
}

uint64_t sub_22D02C6A0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D02A930(255, a2, a3, a4, MEMORY[0x263EFDB28]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D02C704(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D02C76C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D02C7CC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D02D36C(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D02C84C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D02C8B4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_22D02D36C(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_22D02C924(void **a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_22D02C94C(unint64_t a1, void *a2)
{
  id v44 = a2;
  uint64_t v43 = sub_22D2BBC30();
  uint64_t v3 = *(void **)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v42 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_22D2BB6F0();
  uint64_t v38 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  uint64_t v45 = (uint64_t)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = (void *)MEMORY[0x263F8EE80];
  if (a1 >> 62)
  {
LABEL_22:
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_22D2BD470();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v6)
    {
LABEL_3:
      uint64_t v39 = (void (**)(char *, uint64_t))(v3 + 1);
      unint64_t v40 = a1 & 0xC000000000000001;
      uint64_t v37 = v38 + 32;
      uint64_t v7 = (void *)MEMORY[0x263F8EE80];
      uint64_t v36 = (uint64_t (**)(uint64_t, uint64_t))(v38 + 8);
      uint64_t v8 = 4;
      uint64_t v35 = MEMORY[0x263F8EE50] + 8;
      long long v34 = xmmword_22D2BFBE0;
      while (1)
      {
        uint64_t v3 = (void *)(v8 - 4);
        if (v40) {
          id v11 = (id)MEMORY[0x230F7AF90](v8 - 4, a1);
        }
        else {
          id v11 = *(id *)(a1 + 8 * v8);
        }
        id v12 = v11;
        uint64_t v13 = v8 - 3;
        if (__OFADD__(v3, 1))
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
        unint64_t v14 = a1;
        id v15 = objc_msgSend(v11, sel_startDate);
        uint64_t v16 = v42;
        sub_22D2BBC00();

        unint64_t v17 = (void *)sub_22D2BBBC0();
        (*v39)(v16, v43);
        a1 = (unint64_t)objc_msgSend(v44, sel_dateIntervalContainingDate_index_, v17, 0);

        uint64_t v18 = v45;
        sub_22D2BB680();

        uint64_t v19 = v18;
        uint64_t v3 = v7;
        unint64_t v21 = sub_22D04EC38(v19);
        uint64_t v22 = v7[2];
        BOOL v23 = (v20 & 1) == 0;
        uint64_t v24 = v22 + v23;
        if (__OFADD__(v22, v23)) {
          goto LABEL_20;
        }
        a1 = v20;
        if (v7[3] < v24)
        {
          sub_22D0500A8(v24, 1);
          uint64_t v7 = v47;
          unint64_t v25 = sub_22D04EC38(v45);
          if ((a1 & 1) != (v26 & 1))
          {

            uint64_t result = sub_22D2BD6A0();
            __break(1u);
            return result;
          }
          unint64_t v21 = v25;
        }
        if (a1)
        {
          uint64_t v9 = (*v36)(v45, v41);
          uint64_t v7 = v47;
          uint64_t v10 = (void *)(v47[7] + 8 * v21);
          MEMORY[0x230F7AA40](v9);
          if (*(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v10 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_22D2BCE30();
          }
          sub_22D2BCE50();
          sub_22D2BCE20();
        }
        else
        {
          sub_22D02D2A4(0, (unint64_t *)&qword_2685426B0);
          uint64_t v27 = swift_allocObject();
          *(_OWORD *)(v27 + 16) = v34;
          *(void *)(v27 + 32) = v12;
          uint64_t v46 = v27;
          sub_22D2BCE20();
          uint64_t v28 = v45;
          uint64_t v3 = (void *)v46;
          v7[(v21 >> 6) + 8] |= 1 << v21;
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v38 + 32))(v7[6] + *(void *)(v38 + 72) * v21, v28, v41);
          *(void *)(v7[7] + 8 * v21) = v3;
          uint64_t v29 = v7[2];
          BOOL v30 = __OFADD__(v29, 1);
          uint64_t v31 = v29 + 1;
          if (v30) {
            goto LABEL_21;
          }
          v7[2] = v31;
        }
        a1 = v14;
        ++v8;
        if (v13 == v6) {
          return (uint64_t)v7;
        }
      }
    }
  }
  return MEMORY[0x263F8EE80];
}

uint64_t sub_22D02CD9C(uint64_t a1, void (*a2)(void **), uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(BOOL, uint64_t, uint64_t), uint64_t (*a7)(void))
{
  uint64_t v36 = a6;
  uint64_t v9 = v7;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v11 = a5(0);
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (unint64_t)v35 - v15;
  unint64_t v40 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_44;
  }
  uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v46 = MEMORY[0x263F8EE78];
    uint64_t result = v36(0, v17 & ~(v17 >> 63), 0);
    if (v17 < 0)
    {
      __break(1u);
      return result;
    }
    v35[1] = v9;
    uint64_t v9 = v46;
    if (!v17) {
      break;
    }
    v35[0] = v16;
    uint64_t v37 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v40)
    {
      swift_bridgeObjectRetain();
      uint64_t v39 = sub_22D2BD470();
    }
    else
    {
      uint64_t v39 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v16 = 0;
    unint64_t v44 = a1 & 0xC000000000000001;
    uint64_t v38 = a7;
    while ((v17 & ~(v17 >> 63)) != v16)
    {
      if (v39 == v16) {
        goto LABEL_42;
      }
      if (v44)
      {
        id v19 = (id)MEMORY[0x230F7AF90](v16, a1);
      }
      else
      {
        if (v16 >= *(void *)(v37 + 16)) {
          goto LABEL_43;
        }
        id v19 = *(id *)(a1 + 8 * v16 + 32);
      }
      unint64_t v20 = v19;
      unint64_t v21 = (void *)MEMORY[0x230F7B690]();
      uint64_t v45 = v20;
      v42(&v45);

      uint64_t v46 = v9;
      unint64_t v23 = *(void *)(v9 + 16);
      unint64_t v22 = *(void *)(v9 + 24);
      if (v23 >= v22 >> 1)
      {
        v36(v22 > 1, v23 + 1, 1);
        uint64_t v9 = v46;
      }
      ++v16;
      *(void *)(v9 + 16) = v23 + 1;
      uint64_t v24 = v9
          + ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))
          + *(void *)(v41 + 72) * v23;
      a7 = v38;
      sub_22D02C704((uint64_t)v14, v24, v38);
      if (v17 == v16)
      {
        unint64_t v16 = v35[0];
        unint64_t v14 = (char *)v37;
        goto LABEL_20;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  unint64_t v14 = (char *)(a1 & 0xFFFFFFFFFFFFFF8);
  unint64_t v44 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_20:
  if (a1 < 0) {
    unint64_t v25 = (char *)a1;
  }
  else {
    unint64_t v25 = v14;
  }
  uint64_t v39 = (uint64_t)v25;
  if (v40)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v26 = sub_22D2BD470();
      swift_bridgeObjectRelease();
      if (v17 == v26) {
        break;
      }
LABEL_27:
      if (v44)
      {
        id v27 = (id)MEMORY[0x230F7AF90](v17, a1);
      }
      else
      {
        if (v17 < 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if ((unint64_t)v17 >= *((void *)v14 + 2)) {
          goto LABEL_39;
        }
        id v27 = *(id *)(a1 + 8 * v17 + 32);
      }
      uint64_t v28 = v27;
      if (__OFADD__(v17, 1)) {
        goto LABEL_40;
      }
      uint64_t v29 = a1;
      BOOL v30 = v14;
      uint64_t v31 = v16;
      unint64_t v32 = (void *)MEMORY[0x230F7B690]();
      uint64_t v45 = v28;
      v42(&v45);

      uint64_t v46 = v9;
      unint64_t v34 = *(void *)(v9 + 16);
      unint64_t v33 = *(void *)(v9 + 24);
      if (v34 >= v33 >> 1)
      {
        v36(v33 > 1, v34 + 1, 1);
        uint64_t v9 = v46;
      }
      *(void *)(v9 + 16) = v34 + 1;
      sub_22D02C704(v31, v9+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ *(void *)(v41 + 72) * v34, a7);
      ++v17;
      unint64_t v16 = v31;
      unint64_t v14 = v30;
      a1 = v29;
      if (!v40) {
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    if (v17 != *((void *)v14 + 2)) {
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_22D02D1E4(uint64_t a1, uint64_t a2)
{
  sub_22D02D36C(0, &qword_26853D7A0, MEMORY[0x263F062D0], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_22D02D278@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D02A460(*a1, *(void *)(v2 + 24), a2);
}

void sub_22D02D2A4(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_22D2BD640();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t sub_22D02D2EC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D02D36C(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void sub_22D02D36C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D02D3D0()
{
  if (!qword_26853DEF0)
  {
    sub_22D2BB6F0();
    sub_22D02D36C(255, (unint64_t *)&qword_26853D770, (uint64_t (*)(uint64_t))sub_22CFF49BC, MEMORY[0x263F8D488]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853DEF0);
    }
  }
}

uint64_t sub_22D02D474()
{
  return sub_22D02D4A8(&qword_26853DF00, MEMORY[0x263F062D0]);
}

uint64_t sub_22D02D4A8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D02D4F0@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  sub_22D02DA2C();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D02F258(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = *a1;
  v40[0] = v16;
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_22D2BC6B0();
  sub_22CFF49FC();
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_22D02F2D0((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v10);
  uint64_t v17 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v18 = v16 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_22CFF4B00(v18, (uint64_t)v40);
  uint64_t v19 = v41;
  uint64_t v20 = v42;
  __swift_project_boxed_opaque_existential_1(v40, v41);
  (*(void (**)(uint64_t, uint64_t))(v20 + 16))(v19, v20);
  uint64_t v22 = v21;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
  swift_bridgeObjectRelease();
  if (v22)
  {
    if (sub_22D0CB25C())
    {
LABEL_6:
      uint64_t v25 = sub_22D02F35C(v36, v16, v37, 0);
      goto LABEL_13;
    }
    id v23 = objc_retain(*(id *)(v16
                            + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus));
    if (objc_msgSend(v23, sel_userStatus, v36, v37) == (id)4)
    {

      goto LABEL_6;
    }
    id v24 = objc_msgSend(v23, sel_userStatus);

    if (v24 == (id)5) {
      goto LABEL_6;
    }
  }
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_22D2BC390();
  __swift_project_value_buffer(v26, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  id v27 = sub_22D2BC380();
  os_log_type_t v28 = sub_22D2BD050();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v29 = 136315138;
    v40[0] = v30;
    sub_22D2BBC90();
    sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v31 = sub_22D2BD630();
    uint64_t v39 = sub_22D0A4D24(v31, v32, v40);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v27, v28, "No DocRef exists to update. Account: %s", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v30, -1, -1);
    MEMORY[0x230F7BDF0](v29, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  v40[0] = v17;
  unint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D02F258(0, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
  sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v33);
  uint64_t v25 = sub_22D2BC720();
LABEL_13:
  uint64_t v34 = v25;
  uint64_t result = swift_release();
  *uint64_t v38 = v34;
  return result;
}

void sub_22D02DA2C()
{
  if (!qword_26853DF08)
  {
    type metadata accessor for ClinicalSharingSyncContext();
    unint64_t v0 = sub_22D2BC6A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DF08);
    }
  }
}

uint64_t sub_22D02DA84(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v62) = a4;
  uint64_t v79 = a3;
  sub_22D02FBA4();
  uint64_t v64 = v6;
  uint64_t v70 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v63 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FCD0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v69 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FE0C();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  uint64_t v76 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v71 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FF18();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  uint64_t v78 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v74 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02DA2C();
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D02F258(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v61 = v23;
  uint64_t v68 = *(void *)(v23 - 8);
  uint64_t v67 = *(void *)(v68 + 64);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v65 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  id v27 = (char *)&v58 - v26;
  uint64_t v66 = a2;
  uint64_t v80 = a2;
  uint64_t v28 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  uint64_t v60 = v28;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = v62;
  *(void *)(v29 + 24) = a1;
  id v30 = a1;
  sub_22D2BC5D0();
  uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D02F258(0, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
  uint64_t v33 = v32;
  sub_22D02F2D0((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v22);
  sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v31);
  uint64_t v34 = v63;
  uint64_t v35 = v27;
  unint64_t v59 = v27;
  sub_22D2BC830();
  swift_release();
  uint64_t v62 = MEMORY[0x263EFDC28];
  sub_22D02F314(&qword_26853DF60, (void (*)(uint64_t))sub_22D02FBA4);
  uint64_t v36 = v64;
  uint64_t v37 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v36);
  uint64_t v80 = v37;
  sub_22D02FD9C();
  uint64_t v38 = v69;
  uint64_t v58 = v33;
  sub_22D2BC7F0();
  swift_release();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v30;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = sub_22D030A64;
  *(void *)(v40 + 24) = v39;
  id v41 = v30;
  sub_22D2BC5D0();
  sub_22D02F314(&qword_26853DF48, (void (*)(uint64_t))sub_22D02FCD0);
  uint64_t v43 = v71;
  uint64_t v42 = v72;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v42);
  uint64_t v44 = v68;
  uint64_t v45 = v65;
  uint64_t v46 = v35;
  uint64_t v47 = v61;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v46, v61);
  unint64_t v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v49 = (v67 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v66;
  *(void *)(v50 + 16) = v79;
  *(void *)(v50 + 24) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v50 + v48, v45, v47);
  *(void *)(v50 + v49) = v41;
  sub_22D02F314(&qword_26853DF58, (void (*)(uint64_t))sub_22D02FE0C);
  swift_retain();
  id v52 = v41;
  uint64_t v54 = v74;
  uint64_t v53 = v75;
  sub_22D2BC850();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v43, v53);
  sub_22D02F314(&qword_26853DF68, (void (*)(uint64_t))sub_22D02FF18);
  uint64_t v55 = v77;
  uint64_t v56 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v47);
  return v56;
}

uint64_t sub_22D02E2CC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v5 = *a1;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_22D2BC390();
  __swift_project_value_buffer(v6, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  uint64_t v7 = sub_22D2BC380();
  os_log_type_t v8 = sub_22D2BD050();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315138;
    v19[0] = v10;
    uint64_t v22 = a2;
    sub_22D2BBC90();
    sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v11 = sub_22D2BD630();
    sub_22D0A4D24(v11, v12, v19);
    a2 = v22;
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v7, v8, "Preparing update request. Account: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v10, -1, -1);
    uint64_t v13 = v9;
    uint64_t v3 = v2;
    MEMORY[0x230F7BDF0](v13, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v14 = v5 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_docRefInfo;
  swift_beginAccess();
  sub_22CFF4B00(v14, (uint64_t)v19);
  uint64_t v15 = v20;
  uint64_t v16 = v21;
  __swift_project_boxed_opaque_existential_1(v19, v20);
  sub_22D1DA610(v15, v16, a2);
  if (!v3)
  {
    sub_22D02FD9C();
    *(void *)(a2 + *(int *)(v17 + 48)) = v5;
    swift_retain();
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
}

uint64_t sub_22D02E570(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_22D2BB5B0();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](v6);
  sub_22D030340();
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D030528();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v27 = v14;
  uint64_t v28 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v26 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_22D2B2614(a1, a2, 3, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v18 + v17, (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_22D0307A8;
  *(void *)(v19 + 24) = v18;
  sub_22D030624(0, (unint64_t *)&qword_26853DF78, (unint64_t *)&qword_26853DF80, (unint64_t *)&qword_26853DF88);
  sub_22D0303F4(0, &qword_26853DF90, (unint64_t *)&qword_26853DF98);
  sub_22D0304B0();
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22D02F314(&qword_26853DFC0, (void (*)(uint64_t))sub_22D030340);
  uint64_t v20 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v29 = v20;
  sub_22D2BC5D0();
  sub_22D030624(0, &qword_26853DFB0, &qword_26853DF90, (unint64_t *)&qword_26853DF98);
  type metadata accessor for ClinicalSharingSyncContext();
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D02F258(0, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
  sub_22D0306A0();
  sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v21);
  uint64_t v22 = v26;
  sub_22D2BC830();
  swift_release();
  sub_22D02F314(&qword_26853DFC8, (void (*)(uint64_t))sub_22D030528);
  uint64_t v23 = v27;
  uint64_t v24 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v22, v23);
  return v24;
}

uint64_t sub_22D02EA18@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22D030858();
  *a1 = result;
  return result;
}

void sub_22D02EA44(id *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X4>, uint64_t *a5@<X8>)
{
  id v56 = *a1;
  id v9 = v56;
  id v10 = v56;
  sub_22CFF49FC();
  if (swift_dynamicCast())
  {
    if (v55 == 2)
    {
      sub_22D030094(v52, v53, v54, v55);
      if (a2 < 1)
      {
        if (qword_26AEC1C58 != -1) {
          swift_once();
        }
        uint64_t v35 = sub_22D2BC390();
        __swift_project_value_buffer(v35, (uint64_t)qword_26AEC3C90);
        id v36 = v56;
        swift_retain();
        id v37 = v56;
        swift_retain();
        uint64_t v38 = sub_22D2BC380();
        os_log_type_t v39 = sub_22D2BD060();
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc();
          uint64_t v50 = swift_slowAlloc();
          uint64_t v51 = v50;
          *(_DWORD *)uint64_t v40 = 136315394;
          sub_22D2BBC90();
          sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
          uint64_t v41 = sub_22D2BD630();
          sub_22D0A4D24(v41, v42, &v51);
          sub_22D2BD220();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2080;
          id v43 = v9;
          uint64_t v44 = sub_22D2BCC30();
          sub_22D0A4D24(v44, v45, &v51);
          sub_22D2BD220();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_22CFEE000, v38, v39, "Could not update DocRef because of conflictResponseError. Account: %s. No retries left. Error: %s", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x230F7BDF0](v50, -1, -1);
          MEMORY[0x230F7BDF0](v40, -1, -1);
        }
        else
        {
          swift_release_n();
        }
        id v46 = v9;
        swift_willThrow();
      }
      else
      {
        if (qword_26AEC1C58 != -1) {
          swift_once();
        }
        uint64_t v11 = sub_22D2BC390();
        __swift_project_value_buffer(v11, (uint64_t)qword_26AEC3C90);
        id v12 = v56;
        swift_retain();
        id v13 = v56;
        swift_retain();
        uint64_t v14 = sub_22D2BC380();
        os_log_type_t type = sub_22D2BD050();
        if (os_log_type_enabled(v14, type))
        {
          unint64_t v48 = a5;
          uint64_t v15 = swift_slowAlloc();
          uint64_t v47 = swift_slowAlloc();
          uint64_t v51 = v47;
          *(_DWORD *)uint64_t v15 = 136315650;
          sub_22D2BBC90();
          sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
          uint64_t v16 = sub_22D2BD630();
          sub_22D0A4D24(v16, v17, &v51);
          sub_22D2BD220();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v15 + 12) = 2048;
          sub_22D2BD220();
          *(_WORD *)(v15 + 22) = 2080;
          id v18 = v9;
          uint64_t v19 = sub_22D2BCC30();
          sub_22D0A4D24(v19, v20, &v51);
          sub_22D2BD220();
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_22CFEE000, v14, type, "Could not update DocRef because of conflictResponseError. Retrying with no-cache header. Account: %s. Retries left: %ld. Error: %s", (uint8_t *)v15, 0x20u);
          swift_arrayDestroy();
          MEMORY[0x230F7BDF0](v47, -1, -1);
          uint64_t v21 = v15;
          a5 = v48;
          MEMORY[0x230F7BDF0](v21, -1, -1);
        }
        else
        {
          swift_release_n();
        }
        *a5 = sub_22D02DA84(a4, a3, a2 - 1, 1);
      }
      return;
    }
    sub_22D030094(v52, v53, v54, v55);
  }

  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_22D2BC390();
  __swift_project_value_buffer(v22, (uint64_t)qword_26AEC3C90);
  id v23 = v56;
  swift_retain();
  id v24 = v56;
  swift_retain();
  uint64_t v25 = sub_22D2BC380();
  os_log_type_t v26 = sub_22D2BD060();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    uint64_t v52 = v28;
    *(_DWORD *)uint64_t v27 = 136315394;
    sub_22D2BBC90();
    sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v29 = sub_22D2BD630();
    id v56 = (id)sub_22D0A4D24(v29, v30, &v52);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    id v56 = v9;
    id v31 = v9;
    uint64_t v32 = sub_22D2BCC30();
    id v56 = (id)sub_22D0A4D24(v32, v33, &v52);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v25, v26, "Could not update DocRef due to unknown error. Account: %s. Error: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v28, -1, -1);
    MEMORY[0x230F7BDF0](v27, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  id v34 = v9;
  swift_willThrow();
}

void sub_22D02F258(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ClinicalSharingSyncContext();
    unint64_t v7 = sub_22CFF49FC();
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D02F2D0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D02F258(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D02F314(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D02F35C(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  LODWORD(v62) = a4;
  uint64_t v79 = a3;
  sub_22D02FBA4();
  uint64_t v64 = v6;
  uint64_t v70 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v63 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FCD0();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v72 = v8;
  uint64_t v73 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v69 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FE0C();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v75 = v11;
  uint64_t v76 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v71 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02FF18();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v77 = v14;
  uint64_t v78 = v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v74 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D02DA2C();
  uint64_t v18 = v17;
  uint64_t v19 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D02F258(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v61 = v23;
  uint64_t v68 = *(void *)(v23 - 8);
  uint64_t v67 = *(void *)(v68 + 64);
  uint64_t v24 = MEMORY[0x270FA5388](v23);
  uint64_t v65 = (char *)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v66 = a2;
  uint64_t v80 = a2;
  uint64_t v28 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  uint64_t v60 = v28;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v29 = swift_allocObject();
  *(unsigned char *)(v29 + 16) = v62;
  *(void *)(v29 + 24) = a1;
  id v30 = a1;
  sub_22D2BC5D0();
  id v31 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D02F258(0, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
  uint64_t v33 = v32;
  sub_22D02F2D0((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v22);
  sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v31);
  id v34 = v63;
  uint64_t v35 = v27;
  unint64_t v59 = v27;
  sub_22D2BC830();
  swift_release();
  uint64_t v62 = MEMORY[0x263EFDC28];
  sub_22D02F314(&qword_26853DF60, (void (*)(uint64_t))sub_22D02FBA4);
  uint64_t v36 = v64;
  uint64_t v37 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v70 + 8))(v34, v36);
  uint64_t v80 = v37;
  sub_22D02FD9C();
  uint64_t v38 = v69;
  uint64_t v58 = v33;
  sub_22D2BC7F0();
  swift_release();
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = v30;
  uint64_t v40 = swift_allocObject();
  *(void *)(v40 + 16) = sub_22D030068;
  *(void *)(v40 + 24) = v39;
  id v41 = v30;
  sub_22D2BC5D0();
  sub_22D02F314(&qword_26853DF48, (void (*)(uint64_t))sub_22D02FCD0);
  id v43 = v71;
  uint64_t v42 = v72;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v42);
  uint64_t v44 = v68;
  unint64_t v45 = v65;
  id v46 = v35;
  uint64_t v47 = v61;
  (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v65, v46, v61);
  unint64_t v48 = (*(unsigned __int8 *)(v44 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v49 = (v67 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v66;
  *(void *)(v50 + 16) = v79;
  *(void *)(v50 + 24) = v51;
  (*(void (**)(unint64_t, char *, uint64_t))(v44 + 32))(v50 + v48, v45, v47);
  *(void *)(v50 + v49) = v41;
  sub_22D02F314(&qword_26853DF58, (void (*)(uint64_t))sub_22D02FE0C);
  swift_retain();
  id v52 = v41;
  uint64_t v54 = v74;
  uint64_t v53 = v75;
  sub_22D2BC850();
  swift_release();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v43, v53);
  sub_22D02F314(&qword_26853DF68, (void (*)(uint64_t))sub_22D02FF18);
  uint64_t v55 = v77;
  uint64_t v56 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v54, v55);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v59, v47);
  return v56;
}

void sub_22D02FBA4()
{
  if (!qword_26853DF28)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D02F258(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
    sub_22D02F258(255, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
    sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v0);
    sub_22D02F2D0((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v1);
    unint64_t v2 = sub_22D2BC520();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_26853DF28);
    }
  }
}

void sub_22D02FCD0()
{
  if (!qword_26853DF30)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D02F258(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    sub_22D02FD9C();
    sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v0);
    unint64_t v1 = sub_22D2BC500();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DF30);
    }
  }
}

void sub_22D02FD9C()
{
  if (!qword_26853DF38)
  {
    sub_22D2BB5B0();
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853DF38);
    }
  }
}

void sub_22D02FE0C()
{
  if (!qword_26853DF40)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D02F258(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    sub_22D02FCD0();
    sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v0);
    sub_22D02F314(&qword_26853DF48, (void (*)(uint64_t))sub_22D02FCD0);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DF40);
    }
  }
}

void sub_22D02FF18()
{
  if (!qword_26853DF50)
  {
    sub_22D02FE0C();
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D02F258(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    sub_22D02F314(&qword_26853DF58, (void (*)(uint64_t))sub_22D02FE0C);
    sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v0);
    unint64_t v1 = sub_22D2BC570();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DF50);
    }
  }
}

uint64_t sub_22D030024()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D03005C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D2B0A44(a1, *(unsigned __int8 *)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_22D030068(uint64_t a1, uint64_t a2)
{
  return sub_22D02E570(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_22D030070@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D0BCB24(a1, *(uint64_t (**)(uint64_t, void))(v2 + 16), a2);
}

void sub_22D03007C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D030094(uint64_t a1, uint64_t a2, void *a3, char a4)
{
  if (a4 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease();
    return;
  }
  if (a4 != 1)
  {
    if (a4) {
      return;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_22D030100()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D030138()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t objectdestroy_8Tm_0()
{
  sub_22D02F258(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = v4 | 7;
  unint64_t v7 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);

  return MEMORY[0x270FA0238](v0, v7 + 8, v6);
}

void sub_22D030278(id *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_22D02F258(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  sub_22D02EA44(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2+ ((*(void *)(*(void *)(v5 - 8) + 64)+ ((*(unsigned __int8 *)(*(void *)(v5 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80))+ 7) & 0xFFFFFFFFFFFFFFF8)), a2);
}

void sub_22D030340()
{
  if (!qword_26853DF70)
  {
    sub_22D030624(255, (unint64_t *)&qword_26853DF78, (unint64_t *)&qword_26853DF80, (unint64_t *)&qword_26853DF88);
    sub_22D0303F4(255, &qword_26853DF90, (unint64_t *)&qword_26853DF98);
    sub_22D0304B0();
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DF70);
    }
  }
}

void sub_22D0303F4(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_22D030474(255, a3);
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v5) {
      atomic_store(TupleTypeMetadata3, a2);
    }
  }
}

uint64_t sub_22D030474(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

unint64_t sub_22D0304B0()
{
  unint64_t result = qword_26853DFA0;
  if (!qword_26853DFA0)
  {
    sub_22D030624(255, (unint64_t *)&qword_26853DF78, (unint64_t *)&qword_26853DF80, (unint64_t *)&qword_26853DF88);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DFA0);
  }
  return result;
}

void sub_22D030528()
{
  if (!qword_26853DFA8)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D02F258(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    sub_22D030624(255, &qword_26853DFB0, &qword_26853DF90, (unint64_t *)&qword_26853DF98);
    sub_22D02F2D0((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v0);
    sub_22D0306A0();
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DFA8);
    }
  }
}

void sub_22D030624(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_22D0303F4(255, a3, a4);
    sub_22CFF49FC();
    unint64_t v5 = sub_22D2BC5E0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_22D0306A0()
{
  unint64_t result = qword_26853DFB8;
  if (!qword_26853DFB8)
  {
    sub_22D030624(255, &qword_26853DFB0, &qword_26853DF90, (unint64_t *)&qword_26853DF98);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853DFB8);
  }
  return result;
}

uint64_t sub_22D030718()
{
  uint64_t v1 = sub_22D2BB5B0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

uint64_t sub_22D0307A8(uint64_t a1, unint64_t a2, void *a3)
{
  return sub_22D2B2C80(a1, a2, a3);
}

uint64_t sub_22D03083C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D0BDC8C(a1, *(uint64_t (**)(void, void, void, void))(v2 + 16), a2);
}

uint64_t sub_22D030858()
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_22D2BC390();
  __swift_project_value_buffer(v0, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  uint64_t v1 = sub_22D2BC380();
  os_log_type_t v2 = sub_22D2BD050();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    uint64_t v8 = v4;
    sub_22D2BBC90();
    sub_22D02F314((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v5 = sub_22D2BD630();
    sub_22D0A4D24(v5, v6, &v8);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v1, v2, "Successfully updated DocRef. Account: %s", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v4, -1, -1);
    MEMORY[0x230F7BDF0](v3, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  return sub_22D0BE948();
}

void destroy for IssuerDirectoryDownloadTask(uint64_t a1)
{
  swift_release();

  if (*(void *)(a1 + 48))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
}

uint64_t initializeWithCopy for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void **)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = (_OWORD *)(a1 + 24);
  uint64_t v6 = a2 + 24;
  uint64_t v7 = *(void *)(a2 + 48);
  swift_retain();
  id v8 = v4;
  if (v7)
  {
    uint64_t v9 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v7;
    *(void *)(a1 + 56) = v9;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v7 - 8))(a1 + 24, v6, v7);
  }
  else
  {
    long long v10 = *(_OWORD *)(v6 + 16);
    *uint64_t v5 = *(_OWORD *)v6;
    *(_OWORD *)(a1 + 40) = v10;
    *(void *)(a1 + 56) = *(void *)(v6 + 32);
  }
  return a1;
}

uint64_t assignWithCopy for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void **)(a2 + 16);
  uint64_t v5 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 48);
  if (!*(void *)(a1 + 48))
  {
    if (v7)
    {
      *(void *)(a1 + 48) = v7;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 24, a2 + 24);
      return a1;
    }
LABEL_7:
    long long v8 = *(_OWORD *)(a2 + 24);
    long long v9 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 24) = v8;
    *(_OWORD *)(a1 + 40) = v9;
    return a1;
  }
  if (!v7)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
    goto LABEL_7;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for IssuerDirectoryDownloadTask(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  long long v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  if (*(void *)(a1 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  }
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for IssuerDirectoryDownloadTask(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IssuerDirectoryDownloadTask(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryDownloadTask()
{
  return &type metadata for IssuerDirectoryDownloadTask;
}

uint64_t sub_22D030DAC()
{
  uint64_t v1 = v0;
  sub_22D031BBC();
  uint64_t v80 = v2;
  uint64_t v78 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v77 = (char *)v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D032350();
  uint64_t v81 = *(void *)(v4 - 8);
  uint64_t v82 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v79 = (char *)v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D032198(0, &qword_26853E058, &qword_26853E060, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_26853E068);
  uint64_t v71 = v6;
  uint64_t v70 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v69 = (char *)v56 - v7;
  sub_22D0320C0();
  uint64_t v76 = v8;
  uint64_t v75 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v74 = (char *)v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D031D7C();
  uint64_t v68 = v10;
  uint64_t v67 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D032198(0, &qword_26853DFE0, &qword_26853DFE8, (uint64_t)&type metadata for VHRDirectory, &qword_26853E028);
  uint64_t v66 = v13;
  uint64_t v65 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v64 = (char *)v56 - v14;
  sub_22D031CA4();
  uint64_t v73 = v15;
  uint64_t v72 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v83 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D031F30(0, &qword_26853E0A8, (uint64_t)&type metadata for CatalogDownloadResult, MEMORY[0x263EFDDE8]);
  uint64_t v18 = v17;
  uint64_t v61 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)v56 - v19;
  uint64_t v21 = *(void *)(v0 + 8);
  char v22 = *(unsigned char *)v0;
  swift_retain();
  uint64_t v84 = v21;
  *(void *)&long long v85 = sub_22CFF5DC4(v22, v21);
  sub_22D031F30(0, &qword_26853E008, (uint64_t)&type metadata for Catalog, MEMORY[0x263EFDCF0]);
  sub_22D033620(&qword_26853E010, &qword_26853E008, (uint64_t)&type metadata for Catalog);
  uint64_t v23 = sub_22D2BC7C0();
  swift_release();
  sub_22D0336D8(v1 + 24, (uint64_t)&v89, (uint64_t (*)(void))sub_22D0323EC);
  if (!v90)
  {
    sub_22D033740((uint64_t)&v89, (uint64_t (*)(void))sub_22D0323EC);
LABEL_6:
    *(void *)&long long v89 = v23;
    uint64_t v62 = v1;
    sub_22D032454(v1, (uint64_t)&v85);
    uint64_t v27 = (_OWORD *)swift_allocObject();
    long long v28 = v86;
    v27[1] = v85;
    v27[2] = v28;
    long long v29 = v88;
    v27[3] = v87;
    v27[4] = v29;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_22D032490;
    *(void *)(v30 + 24) = v27;
    sub_22D2BC5D0();
    sub_22D031E88();
    uint64_t v61 = v31;
    uint64_t v60 = type metadata accessor for CatalogEntry();
    uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0334D8(0, &qword_26853DFF8, MEMORY[0x263EFDCF0]);
    uint64_t v59 = v33;
    uint64_t v58 = sub_22D031FB0(&qword_26853E020, (void (*)(uint64_t))sub_22D031E88);
    v56[1] = sub_22D033818(&qword_26853E018, &qword_26853DFF8, v32);
    sub_22D2BC830();
    swift_release();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_22D032B34;
    *(void *)(v34 + 24) = v84;
    swift_retain();
    sub_22D2BC5D0();
    uint64_t v63 = v23;
    uint64_t v57 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D031F30(0, &qword_26853DFE8, (uint64_t)&type metadata for VHRDirectory, MEMORY[0x263EFDCF0]);
    v56[0] = sub_22D031FB0(&qword_26853E030, (void (*)(uint64_t))sub_22D031D7C);
    sub_22D033620(&qword_26853E028, &qword_26853DFE8, (uint64_t)&type metadata for VHRDirectory);
    uint64_t v35 = v64;
    uint64_t v36 = v68;
    sub_22D2BC830();
    swift_release();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v67 + 8);
    v37(v12, v36);
    sub_22D032290(0, &qword_26853E038);
    sub_22D031FF8();
    sub_22D032070(&qword_26853E048, &qword_26853E038);
    uint64_t v38 = v66;
    sub_22D2BC850();
    (*(void (**)(char *, uint64_t))(v65 + 8))(v35, v38);
    *(void *)&long long v89 = v23;
    sub_22D032454(v62, (uint64_t)&v85);
    uint64_t v39 = (_OWORD *)swift_allocObject();
    long long v40 = v86;
    v39[1] = v85;
    v39[2] = v40;
    long long v41 = v88;
    v39[3] = v87;
    v39[4] = v41;
    uint64_t v42 = swift_allocObject();
    *(void *)(v42 + 16) = sub_22D032C08;
    *(void *)(v42 + 24) = v39;
    sub_22D2BC5D0();
    sub_22D2BC830();
    swift_release();
    uint64_t v43 = swift_allocObject();
    uint64_t v44 = v84;
    *(void *)(v43 + 16) = sub_22D0332F0;
    *(void *)(v43 + 24) = v44;
    swift_retain();
    sub_22D2BC5D0();
    sub_22D031F30(0, &qword_26853E060, (uint64_t)&type metadata for EUDCCPublicKeys, v57);
    sub_22D033620(&qword_26853E068, &qword_26853E060, (uint64_t)&type metadata for EUDCCPublicKeys);
    unint64_t v45 = v69;
    sub_22D2BC830();
    swift_release();
    v37(v12, v36);
    sub_22D032290(0, &qword_26853E070);
    sub_22D0322D8();
    sub_22D032070(&qword_26853E080, &qword_26853E070);
    id v46 = v74;
    uint64_t v47 = v71;
    sub_22D2BC850();
    (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v47);
    sub_22D031FB0(&qword_26853E088, (void (*)(uint64_t))sub_22D031CA4);
    sub_22D031FB0(&qword_26853E090, (void (*)(uint64_t))sub_22D0320C0);
    unint64_t v48 = v77;
    uint64_t v49 = v73;
    uint64_t v50 = v76;
    uint64_t v51 = v83;
    sub_22D2BC770();
    sub_22D031FB0(&qword_26853E0A0, (void (*)(uint64_t))sub_22D031BBC);
    uint64_t v53 = v79;
    uint64_t v52 = v80;
    sub_22D2BC780();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v52);
    sub_22D031FB0(&qword_26853E0C0, (void (*)(uint64_t))sub_22D032350);
    uint64_t v54 = v82;
    uint64_t v26 = sub_22D2BC720();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v81 + 8))(v53, v54);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v46, v50);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v51, v49);
    return v26;
  }
  sub_22CFF8C10(&v89, (uint64_t)&v85);
  uint64_t v24 = *((void *)&v86 + 1);
  uint64_t v25 = v87;
  __swift_project_boxed_opaque_existential_1(&v85, *((uint64_t *)&v86 + 1));
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25) & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
    goto LABEL_6;
  }
  sub_22D033408();
  *(void *)&long long v89 = swift_allocError();
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  sub_22D2BC650();
  sub_22D03345C();
  uint64_t v26 = sub_22D2BC720();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v20, v18);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v85);
  return v26;
}

void sub_22D031BBC()
{
  if (!qword_26853DFD0)
  {
    sub_22D031CA4();
    sub_22D0320C0();
    sub_22D031FB0(&qword_26853E088, (void (*)(uint64_t))sub_22D031CA4);
    sub_22D031FB0(&qword_26853E090, (void (*)(uint64_t))sub_22D0320C0);
    unint64_t v0 = sub_22D2BC3B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DFD0);
    }
  }
}

void sub_22D031CA4()
{
  if (!qword_26853DFD8)
  {
    sub_22D032198(255, &qword_26853DFE0, &qword_26853DFE8, (uint64_t)&type metadata for VHRDirectory, &qword_26853E028);
    sub_22D032290(255, &qword_26853E038);
    sub_22D031FF8();
    sub_22D032070(&qword_26853E048, &qword_26853E038);
    unint64_t v0 = sub_22D2BC570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DFD8);
    }
  }
}

void sub_22D031D7C()
{
  if (!qword_26853DFF0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0334D8(255, &qword_26853DFF8, MEMORY[0x263EFDCF0]);
    sub_22D031E88();
    sub_22D033818(&qword_26853E018, &qword_26853DFF8, v0);
    sub_22D031FB0(&qword_26853E020, (void (*)(uint64_t))sub_22D031E88);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853DFF0);
    }
  }
}

void sub_22D031E88()
{
  if (!qword_26853E000)
  {
    sub_22D031F30(255, &qword_26853E008, (uint64_t)&type metadata for Catalog, MEMORY[0x263EFDCF0]);
    sub_22D033620(&qword_26853E010, &qword_26853E008, (uint64_t)&type metadata for Catalog);
    unint64_t v0 = sub_22D2BC4E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E000);
    }
  }
}

void sub_22D031F30(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v8 = sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v9 = a4(a1, a3, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D031FB0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22D031FF8()
{
  unint64_t result = qword_26853E040;
  if (!qword_26853E040)
  {
    sub_22D032198(255, &qword_26853DFE0, &qword_26853DFE8, (uint64_t)&type metadata for VHRDirectory, &qword_26853E028);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E040);
  }
  return result;
}

uint64_t sub_22D032070(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D032290(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D0320C0()
{
  if (!qword_26853E050)
  {
    sub_22D032198(255, &qword_26853E058, &qword_26853E060, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_26853E068);
    sub_22D032290(255, &qword_26853E070);
    sub_22D0322D8();
    sub_22D032070(&qword_26853E080, &qword_26853E070);
    unint64_t v0 = sub_22D2BC570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E050);
    }
  }
}

void sub_22D032198(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, unint64_t *a5)
{
  if (!*a2)
  {
    sub_22D031F30(255, a3, a4, MEMORY[0x263EFDCF0]);
    sub_22D031D7C();
    sub_22D033620(a5, a3, a4);
    sub_22D031FB0(&qword_26853E030, (void (*)(uint64_t))sub_22D031D7C);
    unint64_t v9 = sub_22D2BC520();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D032290(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_22D2BC6A0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t sub_22D0322D8()
{
  unint64_t result = qword_26853E078;
  if (!qword_26853E078)
  {
    sub_22D032198(255, &qword_26853E058, &qword_26853E060, (uint64_t)&type metadata for EUDCCPublicKeys, &qword_26853E068);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E078);
  }
  return result;
}

void sub_22D032350()
{
  if (!qword_26853E098)
  {
    sub_22D031BBC();
    sub_22D031FB0(&qword_26853E0A0, (void (*)(uint64_t))sub_22D031BBC);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E098);
    }
  }
}

void sub_22D0323EC()
{
  if (!qword_26853E0B0)
  {
    sub_22D021C20(255, &qword_26853E0B8);
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E0B0);
    }
  }
}

uint64_t sub_22D032454(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22D032490(uint64_t *a1)
{
  return sub_22D032C20(a1, sub_22D0324A8);
}

uint64_t sub_22D0324A8(uint64_t *a1)
{
  sub_22D0334D8(0, &qword_26853E0D8, MEMORY[0x263EFDDE8]);
  uint64_t v3 = v2;
  uint64_t v53 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v52 = (char *)&v43 - v4;
  sub_22D033560();
  uint64_t v6 = v5;
  uint64_t v54 = *(uint64_t (**)())(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D033684(0, &qword_26853E0E8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for CatalogEntry();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v43 - v17);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = *a1;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v49 = v22;
  uint64_t v50 = (uint64_t)&v43 - v21;
  if (v20)
  {
    uint64_t v45 = v3;
    uint64_t v46 = v12;
    uint64_t v47 = v8;
    uint64_t v48 = v6;
    uint64_t v23 = v19 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v44 = v13;
    uint64_t v24 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_22D0336D8(v23, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
      if (*v18 == 0xD000000000000014 && v18[1] == 0x800000022D2D5F70) {
        break;
      }
      if (sub_22D2BD660()) {
        break;
      }
      sub_22D033740((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
      v23 += v24;
      if (!--v20)
      {
        uint64_t v25 = 1;
        goto LABEL_9;
      }
    }
    sub_22D03385C((uint64_t)v18, (uint64_t)v11);
    uint64_t v25 = 0;
LABEL_9:
    uint64_t v8 = v47;
    uint64_t v6 = v48;
    uint64_t v26 = v54;
    uint64_t v3 = v45;
    uint64_t v12 = v46;
    uint64_t v27 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = 1;
    uint64_t v27 = v13;
    uint64_t v26 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v11, v25, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v12) == 1)
  {
    sub_22D0337A0((uint64_t)v11);
    sub_22CFF9B10();
    uint64_t v28 = swift_allocError();
    *long long v29 = 3;
    *(void *)&v55[0] = v28;
    sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
    uint64_t v30 = v52;
    sub_22D2BC650();
    sub_22D033818(&qword_26853E0F0, &qword_26853E0D8, MEMORY[0x263EFDDE8]);
    uint64_t v31 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v3);
  }
  else
  {
    uint64_t v32 = (uint64_t)v11;
    uint64_t v33 = v50;
    sub_22D03385C(v32, v50);
    uint64_t v34 = v51;
    uint64_t v56 = sub_22D0339F0("%s - fetchCurrentRegistryIssuerContentVersion starting");
    uint64_t v54 = type metadata accessor for CatalogEntry;
    uint64_t v35 = v49;
    sub_22D0336D8(v33, v49, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
    sub_22D032454(v34, (uint64_t)v55);
    unint64_t v36 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v37 = swift_allocObject();
    sub_22D03385C(v35, v37 + v36);
    uint64_t v38 = (_OWORD *)(v37 + ((v14 + v36 + 7) & 0xFFFFFFFFFFFFFFF8));
    long long v39 = v55[1];
    *uint64_t v38 = v55[0];
    v38[1] = v39;
    long long v40 = v55[3];
    id v38[2] = v55[2];
    v38[3] = v40;
    uint64_t v41 = MEMORY[0x263F8D6C8];
    sub_22D031F30(0, &qword_26AEC2218, MEMORY[0x263F8D6C8], MEMORY[0x263EFDCF0]);
    sub_22D033620((unint64_t *)&qword_26AEC2210, &qword_26AEC2218, v41);
    sub_22D2BC7F0();
    swift_release();
    swift_release();
    sub_22D031FB0(&qword_26853E0F8, (void (*)(uint64_t))sub_22D033560);
    uint64_t v31 = sub_22D2BC720();
    (*((void (**)(char *, uint64_t))v26 + 1))(v8, v6);
    sub_22D033740(v33, (uint64_t (*)(void))v54);
  }
  return v31;
}

uint64_t sub_22D032B04@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_22D032B34(uint64_t a1)
{
  return sub_22CFF690C(a1, v1);
}

uint64_t sub_22D032B3C(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  if (swift_dynamicCast() && v5 == 4) {
    return sub_22D2BC6B0();
  }
  id v4 = v1;
  return swift_willThrow();
}

uint64_t sub_22D032C08(uint64_t *a1)
{
  return sub_22D032C20(a1, sub_22D032C94);
}

uint64_t sub_22D032C20(uint64_t *a1, uint64_t (*a2)(uint64_t *))
{
  uint64_t v3 = *a1;
  return a2(&v3);
}

uint64_t sub_22D032C5C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D032C94(uint64_t *a1)
{
  sub_22D0334D8(0, &qword_26853E0D8, MEMORY[0x263EFDDE8]);
  uint64_t v3 = v2;
  uint64_t v53 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v52 = (char *)&v43 - v4;
  sub_22D033560();
  uint64_t v6 = v5;
  uint64_t v54 = *(uint64_t (**)())(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D033684(0, &qword_26853E0E8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = type metadata accessor for CatalogEntry();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = MEMORY[0x270FA5388](v15);
  uint64_t v18 = (uint64_t *)((char *)&v43 - v17);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = *a1;
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v49 = v22;
  uint64_t v50 = (uint64_t)&v43 - v21;
  if (v20)
  {
    uint64_t v45 = v3;
    uint64_t v46 = v12;
    uint64_t v47 = v8;
    uint64_t v48 = v6;
    uint64_t v23 = v19 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v44 = v13;
    uint64_t v24 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_22D0336D8(v23, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
      if (*v18 == 0xD000000000000012 && v18[1] == 0x800000022D2D5F30) {
        break;
      }
      if (sub_22D2BD660()) {
        break;
      }
      sub_22D033740((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
      v23 += v24;
      if (!--v20)
      {
        uint64_t v25 = 1;
        goto LABEL_9;
      }
    }
    sub_22D03385C((uint64_t)v18, (uint64_t)v11);
    uint64_t v25 = 0;
LABEL_9:
    uint64_t v8 = v47;
    uint64_t v6 = v48;
    uint64_t v26 = v54;
    uint64_t v3 = v45;
    uint64_t v12 = v46;
    uint64_t v27 = v44;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = 1;
    uint64_t v27 = v13;
    uint64_t v26 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v11, v25, 1, v12);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v12) == 1)
  {
    sub_22D0337A0((uint64_t)v11);
    sub_22CFF9B10();
    uint64_t v28 = swift_allocError();
    *long long v29 = 6;
    *(void *)&v55[0] = v28;
    sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
    uint64_t v30 = v52;
    sub_22D2BC650();
    sub_22D033818(&qword_26853E0F0, &qword_26853E0D8, MEMORY[0x263EFDDE8]);
    uint64_t v31 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v30, v3);
  }
  else
  {
    uint64_t v32 = (uint64_t)v11;
    uint64_t v33 = v50;
    sub_22D03385C(v32, v50);
    uint64_t v34 = v51;
    uint64_t v56 = sub_22D0339F0("%s - fetchCurrentRegistryPublicKeyContentVersion starting");
    uint64_t v54 = type metadata accessor for CatalogEntry;
    uint64_t v35 = v49;
    sub_22D0336D8(v33, v49, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
    sub_22D032454(v34, (uint64_t)v55);
    unint64_t v36 = (*(unsigned __int8 *)(v27 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v37 = swift_allocObject();
    sub_22D03385C(v35, v37 + v36);
    uint64_t v38 = (_OWORD *)(v37 + ((v14 + v36 + 7) & 0xFFFFFFFFFFFFFFF8));
    long long v39 = v55[1];
    *uint64_t v38 = v55[0];
    v38[1] = v39;
    long long v40 = v55[3];
    id v38[2] = v55[2];
    v38[3] = v40;
    uint64_t v41 = MEMORY[0x263F8D6C8];
    sub_22D031F30(0, &qword_26AEC2218, MEMORY[0x263F8D6C8], MEMORY[0x263EFDCF0]);
    sub_22D033620((unint64_t *)&qword_26AEC2210, &qword_26AEC2218, v41);
    sub_22D2BC7F0();
    swift_release();
    swift_release();
    sub_22D031FB0(&qword_26853E0F8, (void (*)(uint64_t))sub_22D033560);
    uint64_t v31 = sub_22D2BC720();
    (*((void (**)(char *, uint64_t))v26 + 1))(v8, v6);
    sub_22D033740(v33, (uint64_t (*)(void))v54);
  }
  return v31;
}

uint64_t sub_22D0332F0(uint64_t a1)
{
  return sub_22CFF7710(a1, v1);
}

uint64_t sub_22D0332F8(id *a1)
{
  id v1 = *a1;
  id v2 = *a1;
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  if (swift_dynamicCast() && v5 == 7) {
    return sub_22D2BC6B0();
  }
  id v4 = v1;
  return swift_willThrow();
}

uint64_t sub_22D0333C0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

unint64_t sub_22D033408()
{
  unint64_t result = qword_26853E0C8;
  if (!qword_26853E0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E0C8);
  }
  return result;
}

unint64_t sub_22D03345C()
{
  unint64_t result = qword_26853E0D0;
  if (!qword_26853E0D0)
  {
    sub_22D031F30(255, &qword_26853E0A8, (uint64_t)&type metadata for CatalogDownloadResult, MEMORY[0x263EFDDE8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E0D0);
  }
  return result;
}

void sub_22D0334D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for CatalogEntry();
    uint64_t v7 = sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D033560()
{
  if (!qword_26853E0E0)
  {
    uint64_t v0 = MEMORY[0x263F8D6C8];
    sub_22D031F30(255, &qword_26AEC2218, MEMORY[0x263F8D6C8], MEMORY[0x263EFDCF0]);
    type metadata accessor for CatalogEntry();
    sub_22D033620((unint64_t *)&qword_26AEC2210, &qword_26AEC2218, v0);
    unint64_t v1 = sub_22D2BC500();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853E0E0);
    }
  }
}

uint64_t sub_22D033620(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D031F30(255, a2, a3, MEMORY[0x263EFDCF0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D033684(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_22D0336D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D033740(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D0337A0(uint64_t a1)
{
  sub_22D033684(0, &qword_26853E0E8, (void (*)(uint64_t))type metadata accessor for CatalogEntry);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22D033818(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D0334D8(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D03385C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CatalogEntry();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_22D0338C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void **)(a3 + 16);
  sub_22D032454(a3, (uint64_t)v13);
  uint64_t v8 = swift_allocObject();
  long long v9 = v13[1];
  *(_OWORD *)(v8 + 16) = v13[0];
  *(_OWORD *)(v8 + 32) = v9;
  long long v10 = v13[3];
  *(_OWORD *)(v8 + 48) = v13[2];
  *(_OWORD *)(v8 + 64) = v10;
  *(void *)(v8 + 80) = sub_22D0348C4;
  *(void *)(v8 + 88) = v6;
  v12[4] = sub_22D034C48;
  v12[5] = v8;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = sub_22D061D84;
  v12[3] = &block_descriptor_44;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_fetchCurrentRegistryIssuerContentVersionWithCompletion_, v11);
  _Block_release(v11);
}

uint64_t sub_22D0339F0(const char *a1)
{
  uint64_t v3 = v1;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_22D2BC390();
  __swift_project_value_buffer(v4, (uint64_t)qword_26AEC3C90);
  uint64_t v5 = sub_22D2BC380();
  os_log_type_t v6 = sub_22D2BD080();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)&v16[0] = v8;
    sub_22D034800();
    uint64_t v9 = sub_22D2BCC30();
    sub_22D0A4D24(v9, v10, (uint64_t *)v16);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v5, v6, a1, v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v8, -1, -1);
    MEMORY[0x230F7BDF0](v7, -1, -1);
  }

  sub_22D032454(v3, (uint64_t)v16);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = v16[1];
  v11[1] = v16[0];
  void v11[2] = v12;
  long long v13 = v16[3];
  v11[3] = v16[2];
  v11[4] = v13;
  sub_22D031F30(0, &qword_26853E108, MEMORY[0x263F8D6C8], MEMORY[0x263EFDE20]);
  swift_allocObject();
  *(void *)&v16[0] = sub_22D2BC6F0();
  sub_22D034848();
  uint64_t v14 = sub_22D2BC720();
  swift_release();
  return v14;
}

uint64_t sub_22D033C48@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const char *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = type metadata accessor for CatalogEntry();
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  uint64_t v16 = *(void *)(a2 + 16);
  if (v15 >= v16)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v20 = sub_22D2BC390();
    __swift_project_value_buffer(v20, (uint64_t)qword_26AEC3C90);
    sub_22D0336D8(a2, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
    uint64_t v21 = sub_22D2BC380();
    os_log_type_t v22 = sub_22D2BD080();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v37[0] = v34;
      *(_DWORD *)uint64_t v23 = 136315906;
      *(void *)&long long v35 = &type metadata for IssuerDirectoryDownloadTask;
      sub_22D034800();
      int v40 = a5;
      uint64_t v24 = sub_22D2BCC30();
      uint64_t v33 = a4;
      *(void *)&long long v35 = sub_22D0A4D24(v24, v25, v37);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)&long long v35 = v15;
      uint64_t v26 = sub_22D2BD630();
      *(void *)&long long v35 = sub_22D0A4D24(v26, v27, v37);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 22) = 2080;
      if (v16 == v15) {
        uint64_t v28 = 0x6F74206C61757165;
      }
      else {
        uint64_t v28 = 0x2072657461657267;
      }
      if (v16 == v15) {
        unint64_t v29 = 0xE800000000000000;
      }
      else {
        unint64_t v29 = 0xEC0000006E616874;
      }
      *(void *)&long long v35 = sub_22D0A4D24(v28, v29, v37);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 32) = 2048;
      uint64_t v30 = *((void *)v14 + 2);
      sub_22D033740((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
      *(void *)&long long v35 = v30;
      LOBYTE(a5) = v40;
      sub_22D2BD220();
      _os_log_impl(&dword_22CFEE000, v21, v22, v33, (uint8_t *)v23, 0x2Au);
      uint64_t v31 = v34;
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v31, -1, -1);
      MEMORY[0x230F7BDF0](v23, -1, -1);
    }
    else
    {
      sub_22D033740((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
    }

    sub_22CFF9B10();
    swift_allocError();
    *uint64_t v32 = a5;
    return swift_willThrow();
  }
  else
  {
    sub_22D0336D8(a3 + 24, (uint64_t)&v35, (uint64_t (*)(void))sub_22D0323EC);
    if (v36)
    {
      sub_22CFF8C10(&v35, (uint64_t)v37);
      uint64_t v17 = v38;
      uint64_t v18 = v39;
      __swift_project_boxed_opaque_existential_1(v37, v38);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v18 + 24))(v17, v18))
      {
        sub_22D033408();
        swift_allocError();
        swift_willThrow();
        return __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    }
    else
    {
      sub_22D033740((uint64_t)&v35, (uint64_t (*)(void))sub_22D0323EC);
    }
    return sub_22D0336D8(a2, a6, (uint64_t (*)(void))type metadata accessor for CatalogEntry);
  }
}

uint64_t sub_22D0340C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D034A90(a1, "%s - current public key registry content version (%s) is %s the latest catalog version (%ld). SKIPPING Download", 7, a2);
}

void sub_22D0340E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = *(void **)(a3 + 16);
  sub_22D032454(a3, (uint64_t)v13);
  uint64_t v8 = swift_allocObject();
  long long v9 = v13[1];
  *(_OWORD *)(v8 + 16) = v13[0];
  *(_OWORD *)(v8 + 32) = v9;
  long long v10 = v13[3];
  *(_OWORD *)(v8 + 48) = v13[2];
  *(_OWORD *)(v8 + 64) = v10;
  *(void *)(v8 + 80) = sub_22D0348C4;
  *(void *)(v8 + 88) = v6;
  v12[4] = sub_22D0348CC;
  v12[5] = v8;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1107296256;
  v12[2] = sub_22D061D84;
  v12[3] = &block_descriptor_2;
  uint64_t v11 = _Block_copy(v12);
  swift_retain();
  swift_release();
  objc_msgSend(v7, sel_fetchCurrentRegistryPublicKeyContentVersionWithCompletion_, v11);
  _Block_release(v11);
}

void sub_22D034214(void *a1, void *a2, uint64_t a3, void (*a4)(id, void), uint64_t a5, const char *a6)
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_22D2BC390();
  __swift_project_value_buffer(v10, (uint64_t)qword_26AEC3C90);
  id v11 = a1;
  uint64_t v12 = sub_22D2BC380();
  os_log_type_t v13 = sub_22D2BD080();
  if (!os_log_type_enabled(v12, v13))
  {

    if (a2) {
      goto LABEL_5;
    }
LABEL_8:
    id v33 = v11;
    uint64_t v34 = sub_22D2BC380();
    os_log_type_t v35 = sub_22D2BD080();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 136315394;
      uint64_t v47 = v37;
      sub_22D034800();
      uint64_t v38 = sub_22D2BCC30();
      sub_22D0A4D24(v38, v39, &v47);
      sub_22D2BD220();
      swift_bridgeObjectRelease();
      *(_WORD *)(v36 + 12) = 2080;
      sub_22D033684(0, (unint64_t *)&qword_268542660, (void (*)(uint64_t))sub_22D03490C);
      id v40 = v33;
      uint64_t v41 = sub_22D2BCC30();
      sub_22D0A4D24(v41, v42, &v47);
      sub_22D2BD220();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22CFEE000, v34, v35, "%s - FINISHED: Success with currentVersion: %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v37, -1, -1);
      MEMORY[0x230F7BDF0](v36, -1, -1);

      if (a1)
      {
LABEL_10:
        id v43 = objc_msgSend(v33, sel_integerValue);
LABEL_15:
        a4(v43, 0);
        return;
      }
    }
    else
    {

      if (a1) {
        goto LABEL_10;
      }
    }
    id v43 = 0;
    goto LABEL_15;
  }
  uint64_t v45 = a4;
  uint64_t v14 = swift_slowAlloc();
  uint64_t v15 = swift_slowAlloc();
  *(_DWORD *)uint64_t v14 = 136315394;
  uint64_t v47 = v15;
  sub_22D034800();
  uint64_t v16 = sub_22D2BCC30();
  sub_22D0A4D24(v16, v17, &v47);
  sub_22D2BD220();
  swift_bridgeObjectRelease();
  *(_WORD *)(v14 + 12) = 2080;
  sub_22D033684(0, (unint64_t *)&qword_268542660, (void (*)(uint64_t))sub_22D03490C);
  id v18 = v11;
  uint64_t v19 = sub_22D2BCC30();
  sub_22D0A4D24(v19, v20, &v47);
  sub_22D2BD220();

  swift_bridgeObjectRelease();
  _os_log_impl(&dword_22CFEE000, v12, v13, a6, (uint8_t *)v14, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x230F7BDF0](v15, -1, -1);
  uint64_t v21 = v14;
  a4 = v45;
  MEMORY[0x230F7BDF0](v21, -1, -1);

  if (!a2) {
    goto LABEL_8;
  }
LABEL_5:
  id v22 = a2;
  id v23 = a2;
  id v24 = a2;
  unint64_t v25 = sub_22D2BC380();
  os_log_type_t v26 = sub_22D2BD060();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    uint64_t v47 = v28;
    sub_22D034800();
    uint64_t v29 = sub_22D2BCC30();
    sub_22D0A4D24(v29, v30, &v47);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    *(_WORD *)(v27 + 12) = 2080;
    swift_getErrorValue();
    uint64_t v31 = sub_22D1E40E8(v46);
    sub_22D0A4D24(v31, v32, &v47);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v25, v26, "%s - ERROR: %s", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v28, -1, -1);
    MEMORY[0x230F7BDF0](v27, -1, -1);
  }
  else
  {
  }
  id v44 = a2;
  a4(a2, 1);
}

unint64_t sub_22D034800()
{
  unint64_t result = qword_26853E100;
  if (!qword_26853E100)
  {
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26853E100);
  }
  return result;
}

void sub_22D034840(uint64_t a1, uint64_t a2)
{
  sub_22D0340E4(a1, a2, v2 + 16);
}

unint64_t sub_22D034848()
{
  unint64_t result = qword_26853E110;
  if (!qword_26853E110)
  {
    sub_22D031F30(255, &qword_26853E108, MEMORY[0x263F8D6C8], MEMORY[0x263EFDE20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E110);
  }
  return result;
}

void sub_22D0348CC(void *a1, void *a2)
{
  sub_22D034214(a1, a2, v2 + 16, *(void (**)(id, void))(v2 + 80), *(void *)(v2 + 88), "%s - fetchCurrentRegistryPublicKeyContentVersion finished with version %s");
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

unint64_t sub_22D03490C()
{
  unint64_t result = qword_26AEC1F28;
  if (!qword_26AEC1F28)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEC1F28);
  }
  return result;
}

uint64_t objectdestroy_18Tm()
{
  uint64_t v1 = (int *)(type metadata accessor for CatalogEntry() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + v1[8];
  uint64_t v7 = sub_22D2BBAA0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_release();

  if (*(void *)(v0 + v4 + 48)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + v4 + 24);
  }
  return MEMORY[0x270FA0238](v0, v4 + 64, v2 | 7);
}

uint64_t sub_22D034A6C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D034A90(a1, "%s - current issuer registry content version (%s) is %s the latest catalog version (%ld). SKIPPING Download", 4, a2);
}

uint64_t sub_22D034A90@<X0>(uint64_t *a1@<X0>, const char *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(type metadata accessor for CatalogEntry() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  return sub_22D033C48(a1, v4 + v10, v4 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8), a2, a3, a4);
}

uint64_t objectdestroyTm_1()
{
  swift_release();

  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  return MEMORY[0x270FA0238](v0, 80, 7);
}

void sub_22D034BA4(uint64_t a1, uint64_t a2)
{
  sub_22D0338C0(a1, a2, v2 + 16);
}

uint64_t sub_22D034BAC(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t objectdestroy_27Tm()
{
  swift_release();

  if (*(void *)(v0 + 64)) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 40);
  }
  swift_release();
  return MEMORY[0x270FA0238](v0, 96, 7);
}

void sub_22D034C48(void *a1, void *a2)
{
  sub_22D034214(a1, a2, v2 + 16, *(void (**)(id, void))(v2 + 80), *(void *)(v2 + 88), "%s - fetchCurrentRegistryIssuerContentVersion finished with version %s");
}

uint64_t PBPlainText.type.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 24);
  *(void *)a1 = *(void *)(v3 + 16);
  *(unsigned char *)(a1 + 8) = v5;
  return result;
}

uint64_t type metadata accessor for PBPlainText(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E168);
}

uint64_t sub_22D034D0C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t result = swift_beginAccess();
  *(void *)(v7 + 16) = v3;
  *(unsigned char *)(v7 + 24) = v4;
  return result;
}

uint64_t PBPlainText.type.setter(uint64_t *a1)
{
  uint64_t v2 = *a1;
  char v3 = *((unsigned char *)a1 + 8);
  uint64_t v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v1 + v4) = sub_22D0378B8(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v1 + v4);
  uint64_t result = swift_beginAccess();
  *(void *)(v6 + 16) = v2;
  *(unsigned char *)(v6 + 24) = v3;
  return result;
}

uint64_t type metadata accessor for PBPlainText._StorageClass(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E188);
}

void (*PBPlainText.type.modify(void *a1))(uint64_t *a1, char a2)
{
  char v3 = malloc(0x60uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  char v6 = *(unsigned char *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  *((unsigned char *)v3 + 80) = v6;
  return sub_22D034F24;
}

void sub_22D034F24(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 72);
  char v5 = *(unsigned char *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v7 = *(int *)(v3 + 84);
    uint64_t v8 = *(void *)(v3 + 88);
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v9 = swift_retain();
    *(void *)(v8 + v7) = sub_22D0378B8(v9);
    swift_release();
  }
LABEL_4:
  uint64_t v10 = *(void *)(*(void *)(v3 + 88) + *(int *)(v3 + 84));
  swift_beginAccess();
  *(void *)(v10 + 16) = v4;
  *(unsigned char *)(v10 + 24) = v5;
  free((void *)v3);
}

uint64_t PBPlainText.healthInstituteID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D035070@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 40);
  *a2 = *(void *)(v3 + 32);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D0350CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 32) = v4;
  *(void *)(v7 + 40) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.healthInstituteID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 40);
  v3[9] = *(void *)(v5 + 32);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D0352D0;
}

void sub_22D0352D0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D0378B8(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D0378B8(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 32) = v3;
    *(void *)(v12 + 40) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.patientID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 48);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D03549C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 56);
  *a2 = *(void *)(v3 + 48);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D0354F8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.patientID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 48) = a1;
  *(void *)(v7 + 56) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.patientID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 56);
  v3[9] = *(void *)(v5 + 48);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D0356FC;
}

void sub_22D0356FC(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D0378B8(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 48) = v3;
    *(void *)(v8 + 56) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D0378B8(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 48) = v3;
    *(void *)(v12 + 56) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.dateLastModified.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D0358C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D035924(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 64) = v4;
  *(void *)(v7 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBPlainText.dateLastModified.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D0378B8(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBPlainText.dateLastModified.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 72);
  v3[9] = *(void *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D035B28;
}

void sub_22D035B28(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D0378B8(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 64) = v3;
    *(void *)(v8 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D0378B8(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 64) = v3;
    *(void *)(v12 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBPlainText.plaintext.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  return sub_22D037B64(v3, a1);
}

uint64_t sub_22D035CFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  return sub_22D037B64(v3, a2);
}

uint64_t sub_22D035D64(uint64_t a1, uint64_t a2)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v11 - v5;
  sub_22D037B64(a1, (uint64_t)&v11 - v5);
  uint64_t v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(a2 + v7) = sub_22D0378B8(v8);
    swift_release();
  }
  uint64_t v9 = *(void *)(a2 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_22D037C18((uint64_t)v6, v9);
  swift_endAccess();
  return swift_release();
}

uint64_t PBPlainText.plaintext.setter(uint64_t a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = sub_22D0378B8(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_22D037C18(a1, v5);
  swift_endAccess();
  return swift_release();
}

void (*PBPlainText.plaintext.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[9] = v1;
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  size_t v5 = *(void *)(*(void *)(v4 - 8) + 64);
  v3[10] = malloc(v5);
  uint64_t v6 = malloc(v5);
  v3[11] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  *((_DWORD *)v3 + 24) = v7;
  uint64_t v8 = *(void *)(v1 + v7)
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v8, (uint64_t)v6);
  return sub_22D036090;
}

void sub_22D036090(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    sub_22D037B64(*(void *)(v2 + 88), *(void *)(v2 + 80));
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v3 = *(int *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 72);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v5 = swift_retain();
      *(void *)(v4 + v3) = sub_22D0378B8(v5);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    uint64_t v6 = *(void **)(v2 + 88);
    uint64_t v8 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
    swift_beginAccess();
    swift_retain();
    sub_22D037C18((uint64_t)v7, v8);
    swift_endAccess();
    swift_release();
    sub_22D03BBA8((uint64_t)v6, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 72);
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D0378B8(v11);
      swift_release();
    }
    uint64_t v7 = *(void **)(v2 + 80);
    uint64_t v6 = *(void **)(v2 + 88);
    uint64_t v12 = *(void *)(*(void *)(v2 + 72) + *(int *)(v2 + 96))
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
    swift_beginAccess();
    swift_retain();
    sub_22D037C18((uint64_t)v6, v12);
    swift_endAccess();
    swift_release();
  }
  free(v6);
  free(v7);
  free((void *)v2);
}

uint64_t PBPlainText.references.getter@<X0>(void *a1@<X8>)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_5:
    *a1 = MEMORY[0x263F8EE78];
    type metadata accessor for PBReferences(0);
    return sub_22D2BBFE0();
  }
  if (swift_getEnumCaseMultiPayload())
  {
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
    goto LABEL_5;
  }
  return sub_22D03BA88((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBReferences);
}

uint64_t PBPlainText.references.setter(uint64_t a1)
{
  return sub_22D0368A8(a1, type metadata accessor for PBReferences);
}

void (*PBPlainText.references.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBReferences(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v8, (uint64_t)v5);
  uint64_t v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (!swift_getEnumCaseMultiPayload())
    {
      sub_22D03BA88((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBReferences);
      return sub_22D036658;
    }
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  *uint64_t v7 = MEMORY[0x263F8EE78];
  sub_22D2BBFE0();
  return sub_22D036658;
}

void sub_22D036658(uint64_t a1, char a2)
{
}

uint64_t PBPlainText.data.getter@<X0>(uint64_t a1@<X8>)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1) {
      return sub_22D03BA88((uint64_t)v5, a1, type metadata accessor for PBTypedData);
    }
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  sub_22D2BBFE0();
  uint64_t v9 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if (qword_26853CCD0 != -1) {
    swift_once();
  }
  *(void *)(a1 + v9) = qword_26853D990;
  return swift_retain();
}

uint64_t PBPlainText.data.setter(uint64_t a1)
{
  return sub_22D0368A8(a1, type metadata accessor for PBTypedData);
}

uint64_t sub_22D0368A8(uint64_t a1, uint64_t (*a2)(void))
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v12 = swift_retain();
    *(void *)(v2 + v11) = sub_22D0378B8(v12);
    swift_release();
  }
  uint64_t v13 = *(void *)(v2 + v11);
  sub_22D03BA88(a1, (uint64_t)v10, a2);
  uint64_t v14 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v10, 0, 1, v14);
  sub_22D03BC18((uint64_t)v10, (uint64_t)v8, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  uint64_t v15 = v13
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  swift_retain();
  sub_22D037C18((uint64_t)v8, v15);
  swift_endAccess();
  return swift_release();
}

void (*PBPlainText.data.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBTypedData(0);
  size_t v7 = *(void *)(*(void *)(v6 - 8) + 64);
  v3[5] = malloc(v7);
  uint64_t v8 = (char *)malloc(v7);
  v3[6] = v8;
  uint64_t v9 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v9, (uint64_t)v5);
  uint64_t v10 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v5, 1, v10) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_22D03BA88((uint64_t)v5, (uint64_t)v8, type metadata accessor for PBTypedData);
      return sub_22D036CFC;
    }
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  sub_22D2BBFE0();
  uint64_t v11 = *(int *)(v6 + 20);
  if (qword_26853CCD0 != -1) {
    swift_once();
  }
  *(void *)&v8[v11] = qword_26853D990;
  swift_retain();
  return sub_22D036CFC;
}

void sub_22D036CFC(uint64_t a1, char a2)
{
}

uint64_t PBPlainText.rawData.getter@<X0>(uint64_t *a1@<X8>)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 2) {
      return sub_22D03BA88((uint64_t)v5, (uint64_t)a1, type metadata accessor for PBRawData);
    }
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
  }
  *a1 = sub_22D2BBFC0();
  a1[1] = v9;
  type metadata accessor for PBRawData(0);
  return sub_22D2BBFE0();
}

uint64_t sub_22D036EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(char *))
{
  uint64_t v10 = a5(0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v14 - v11;
  sub_22D03BCFC(a1, (uint64_t)&v14 - v11, a6);
  return a7(v12);
}

uint64_t PBPlainText.rawData.setter(uint64_t a1)
{
  return sub_22D0368A8(a1, type metadata accessor for PBRawData);
}

void (*PBPlainText.rawData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  size_t v6 = *(void *)(*(void *)(type metadata accessor for PBRawData(0) - 8) + 64);
  v3[5] = malloc(v6);
  uint64_t v7 = malloc(v6);
  v3[6] = v7;
  uint64_t v8 = *(void *)(v1 + *(int *)(type metadata accessor for PBPlainText(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v8, (uint64_t)v5);
  uint64_t v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_22D03BBA8((uint64_t)v5, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_6:
    *uint64_t v7 = sub_22D2BBFC0();
    v7[1] = v10;
    sub_22D2BBFE0();
    return sub_22D0371C4;
  }
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBPlainText.OneOf_Plaintext);
    goto LABEL_6;
  }
  sub_22D03BA88((uint64_t)v5, (uint64_t)v7, type metadata accessor for PBRawData);
  return sub_22D0371C4;
}

void sub_22D0371C4(uint64_t a1, char a2)
{
}

void sub_22D037204(uint64_t a1, char a2, void (*a3)(void *), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  size_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)(*(void *)a1 + 40);
  uint64_t v8 = *(void **)(*(void *)a1 + 48);
  uint64_t v9 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_22D03BCFC(*(void *)(*(void *)a1 + 48), (uint64_t)v7, a4);
    a3(v7);
    sub_22D03BD64((uint64_t)v8, a5);
  }
  else
  {
    a3(*(void **)(*(void *)a1 + 48));
  }
  free(v8);
  free(v7);
  free(v9);
  free(v6);
}

uint64_t PBPlainText.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PBPlainText.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PBPlainText.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBPlainText.init()@<X0>(uint64_t a1@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v2 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if (qword_26853CCF8 != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = qword_26853E130;
  return swift_retain();
}

unint64_t static PBPlainText.protoMessageName.getter()
{
  return 0xD000000000000024;
}

uint64_t sub_22D037444()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853E118);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853E118);
  sub_22D03BB44(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_22D2C0BB0;
  unint64_t v5 = v21 + v4 + *(int *)(v2 + 56);
  *(void *)(v21 + v4) = 1;
  *(void *)unint64_t v5 = "type";
  *(void *)(v5 + 8) = 4;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_22D2BC2F0();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v21 + v4 + v3 + *(int *)(v2 + 56);
  *(void *)(v21 + v4 + v3) = 2;
  *(void *)unint64_t v9 = "health_institute_id";
  *(void *)(v9 + 8) = 19;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v21 + v4 + 2 * v3);
  uint64_t v11 = (char *)v10 + *(int *)(v2 + 56);
  *uint64_t v10 = 3;
  *(void *)uint64_t v11 = "patient_id";
  *((void *)v11 + 1) = 10;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v21 + v4 + 3 * v3);
  uint64_t v13 = (char *)v12 + *(int *)(v2 + 56);
  *uint64_t v12 = 4;
  *(void *)uint64_t v13 = "date_last_modified";
  *((void *)v13 + 1) = 18;
  v13[16] = 2;
  v8();
  uint64_t v14 = (void *)(v21 + v4 + 4 * v3);
  uint64_t v15 = (char *)v14 + *(int *)(v2 + 56);
  void *v14 = 5;
  *(void *)uint64_t v15 = "references";
  *((void *)v15 + 1) = 10;
  v15[16] = 2;
  v8();
  uint64_t v16 = (void *)(v21 + v4 + 5 * v3);
  uint64_t v17 = (char *)v16 + *(int *)(v2 + 56);
  void *v16 = 6;
  *(void *)uint64_t v17 = "data";
  *((void *)v17 + 1) = 4;
  v17[16] = 2;
  v8();
  id v18 = (void *)(v21 + v4 + 6 * v3);
  uint64_t v19 = (char *)v18 + *(int *)(v2 + 56);
  *id v18 = 7;
  *(void *)uint64_t v19 = "raw_data";
  *((void *)v19 + 1) = 8;
  v19[16] = 2;
  v8();
  return sub_22D2BC300();
}

uint64_t static PBPlainText._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  if (qword_26853CCF0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_22D2BC310();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26853E118);
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_22D037814()
{
  type metadata accessor for PBPlainText._StorageClass(0);
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(void *)(v0 + 40) = 0xE000000000000000;
  *(void *)(v0 + 48) = 0;
  *(void *)(v0 + 56) = 0xE000000000000000;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  uint64_t v1 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  uint64_t v2 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  qword_26853E130 = v0;
  return result;
}

uint64_t sub_22D0378B8(uint64_t a1)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  unint64_t v5 = (char *)&v18 - v4;
  *(void *)(v1 + 16) = 0;
  *(unsigned char *)(v1 + 24) = 1;
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0xE000000000000000;
  *(void *)(v1 + 48) = 0;
  *(void *)(v1 + 56) = 0xE000000000000000;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0xE000000000000000;
  uint64_t v6 = v1
     + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  uint64_t v7 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 16);
  char v9 = *(unsigned char *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v8;
  *(unsigned char *)(v1 + 24) = v9;
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  swift_beginAccess();
  *(void *)(v1 + 32) = v11;
  *(void *)(v1 + 40) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  swift_beginAccess();
  *(void *)(v1 + 48) = v13;
  *(void *)(v1 + 56) = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v14 = *(void *)(a1 + 72);
  swift_beginAccess();
  *(void *)(v1 + 64) = v15;
  *(void *)(v1 + 72) = v14;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  sub_22D037B64(v16, (uint64_t)v5);
  swift_release();
  swift_beginAccess();
  sub_22D037C18((uint64_t)v5, v6);
  swift_endAccess();
  return v1;
}

uint64_t sub_22D037B64(uint64_t a1, uint64_t a2)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for PBPlainText.OneOf_Plaintext(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E178);
}

uint64_t sub_22D037C18(uint64_t a1, uint64_t a2)
{
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D037CAC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22D03BBA8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
  return swift_deallocClassInstance();
}

uint64_t PBPlainText.decodeMessage<A>(decoder:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v3 + v7) = sub_22D0378B8(v8);
    swift_release();
  }
  char v9 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))swift_retain();
  sub_22D037E10(v9, a1, a2, a3);
  return swift_release();
}

uint64_t sub_22D037E10(unsigned int (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v156 = a4;
  uint64_t v157 = a3;
  uint64_t v146 = type metadata accessor for PBRawData(0);
  uint64_t v136 = *(void (***)(uint64_t, void, uint64_t, uint64_t))(v146 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v146);
  uint64_t v140 = (char *)&v115 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v131 = (uint64_t)&v115 - v8;
  char v9 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D03BB44(0, &qword_26853E1B0, type metadata accessor for PBRawData, MEMORY[0x263F8D8F0]);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  id v138 = (char *)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v148 = (uint64_t)&v115 - v13;
  uint64_t v144 = type metadata accessor for PBTypedData(0);
  uint64_t v135 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v144 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v144);
  uint64_t v139 = (char *)&v115 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v130 = (uint64_t)&v115 - v16;
  sub_22D03BB44(0, &qword_26853DED0, type metadata accessor for PBTypedData, v9);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v137 = (uint64_t)&v115 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v152 = (uint64_t)&v115 - v20;
  uint64_t v154 = type metadata accessor for PBReferences(0);
  uint64_t v134 = *(unsigned int (***)(uint64_t, uint64_t, uint64_t))(v154 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v154);
  uint64_t v132 = (uint64_t)&v115 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v21);
  uint64_t v129 = (uint64_t)&v115 - v23;
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, v9);
  uint64_t v25 = MEMORY[0x270FA5388](v24 - 8);
  uint64_t v143 = (uint64_t)&v115 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v142 = (uint64_t)&v115 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v145 = (uint64_t)&v115 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v151 = (uint64_t)&v115 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v141 = (uint64_t)&v115 - v33;
  uint64_t v155 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  uint64_t v133 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 - 8);
  uint64_t v34 = MEMORY[0x270FA5388](v155);
  uint64_t v36 = (char *)&v115 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  unint64_t v39 = (char *)&v115 - v38;
  uint64_t v40 = MEMORY[0x270FA5388](v37);
  unint64_t v42 = (char *)&v115 - v41;
  uint64_t v43 = MEMORY[0x270FA5388](v40);
  uint64_t v45 = (char *)&v115 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43);
  uint64_t v48 = (char *)&v115 - v47;
  MEMORY[0x270FA5388](v46);
  uint64_t v50 = (char *)&v115 - v49;
  sub_22D03BB44(0, &qword_26853E1B8, type metadata accessor for PBReferences, v9);
  uint64_t v52 = MEMORY[0x270FA5388](v51 - 8);
  unint64_t v150 = (char *)&v115 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v52);
  uint64_t v149 = (uint64_t)&v115 - v54;
  uint64_t v147 = a1;
  uint64_t v55 = (uint64_t)a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
  swift_beginAccess();
  uint64_t v158 = a2;
  uint64_t v56 = v153;
  uint64_t result = sub_22D2BC080();
  if (!v56)
  {
    uint64_t v118 = v50;
    id v119 = v48;
    unint64_t v120 = v45;
    id v116 = v42;
    uint64_t v121 = v39;
    uint64_t v117 = v36;
    uint64_t v127 = v147 + 8;
    uint64_t v126 = v147 + 6;
    uint64_t v125 = v147 + 4;
    uint64_t v124 = v147 + 2;
    uint64_t v128 = v136 + 7;
    uint64_t v147 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 6);
    uint64_t v123 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 6);
    uint64_t v136 = v133 + 7;
    uint64_t v133 = v135 + 7;
    int v122 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 6);
    uint64_t v135 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v134 + 7);
    v134 += 6;
    uint64_t v59 = v154;
    uint64_t v60 = (uint64_t)v150;
    uint64_t v153 = v55;
    while (1)
    {
      if (v58) {
        return result;
      }
      switch(result)
      {
        case 1:
          uint64_t v65 = v59;
          swift_beginAccess();
          sub_22D03BAF0();
          sub_22D2BC0D0();
          goto LABEL_14;
        case 2:
          uint64_t v65 = v59;
          goto LABEL_13;
        case 3:
          uint64_t v65 = v59;
          goto LABEL_13;
        case 4:
          uint64_t v65 = v59;
LABEL_13:
          swift_beginAccess();
          sub_22D2BC170();
LABEL_14:
          swift_endAccess();
          uint64_t v59 = v65;
          goto LABEL_6;
        case 5:
          uint64_t v66 = v151;
          uint64_t v67 = *v135;
          (*v135)(v149, 1, 1, v59);
          uint64_t v68 = v141;
          sub_22D037B64(v153, v141);
          if ((*v147)(v68, 1, v155) == 1)
          {
            sub_22D03BBA8(v68, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
LABEL_23:
            uint64_t v82 = v149;
            goto LABEL_24;
          }
          uint64_t v79 = v68;
          uint64_t v80 = (uint64_t)v118;
          sub_22D03BA88(v79, (uint64_t)v118, type metadata accessor for PBPlainText.OneOf_Plaintext);
          sub_22D2BC090();
          uint64_t v81 = (uint64_t)v119;
          sub_22D03BA88(v80, (uint64_t)v119, type metadata accessor for PBPlainText.OneOf_Plaintext);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_22D03BD64(v81, type metadata accessor for PBPlainText.OneOf_Plaintext);
            goto LABEL_23;
          }
          uint64_t v82 = v149;
          sub_22D03BBA8(v149, &qword_26853E1B8, type metadata accessor for PBReferences);
          uint64_t v113 = v81;
          uint64_t v114 = v129;
          sub_22D03BA88(v113, v129, type metadata accessor for PBReferences);
          uint64_t v60 = (uint64_t)v150;
          sub_22D03BA88(v114, v82, type metadata accessor for PBReferences);
          v67(v82, 0, 1, v154);
LABEL_24:
          sub_22D03A9B0(&qword_26853DA80, (void (*)(uint64_t))type metadata accessor for PBReferences);
          sub_22D2BC1A0();
          uint64_t v59 = v154;
          sub_22D03BC18(v82, v60, &qword_26853E1B8, type metadata accessor for PBReferences);
          if ((*v134)(v60, 1, v59) == 1)
          {
            sub_22D03BBA8(v60, &qword_26853E1B8, type metadata accessor for PBReferences);
          }
          else
          {
            uint64_t v99 = v132;
            sub_22D03BA88(v60, v132, type metadata accessor for PBReferences);
            uint64_t v59 = v154;
            uint64_t v100 = v155;
            sub_22D03BA88(v99, v66, type metadata accessor for PBReferences);
            swift_storeEnumTagMultiPayload();
            (*v136)(v66, 0, 1, v100);
            uint64_t v101 = v66;
            uint64_t v102 = v145;
            sub_22D03BC18(v101, v145, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v103 = v153;
            swift_beginAccess();
            sub_22D037C18(v102, v103);
            swift_endAccess();
          }
LABEL_6:
          uint64_t result = sub_22D2BC080();
          break;
        case 6:
          uint64_t v69 = *v133;
          uint64_t v70 = v144;
          (*v133)(v152, 1, 1, v144);
          uint64_t v71 = v142;
          sub_22D037B64(v153, v142);
          if ((*v147)(v71, 1, v155) == 1)
          {
            sub_22D03BBA8(v71, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v72 = (uint64_t)v139;
          }
          else
          {
            uint64_t v83 = v71;
            uint64_t v84 = (uint64_t)v120;
            sub_22D03BA88(v83, (uint64_t)v120, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_22D2BC090();
            uint64_t v85 = v84;
            uint64_t v86 = (uint64_t)v116;
            sub_22D03BA88(v85, (uint64_t)v116, type metadata accessor for PBPlainText.OneOf_Plaintext);
            if (swift_getEnumCaseMultiPayload() == 1)
            {
              sub_22D03BBA8(v152, &qword_26853DED0, type metadata accessor for PBTypedData);
              uint64_t v87 = v130;
              sub_22D03BA88(v86, v130, type metadata accessor for PBTypedData);
              uint64_t v88 = v87;
              uint64_t v70 = v144;
              uint64_t v89 = v152;
              sub_22D03BA88(v88, v152, type metadata accessor for PBTypedData);
              v69(v89, 0, 1, v70);
              uint64_t v72 = (uint64_t)v139;
              goto LABEL_33;
            }
            sub_22D03BD64(v86, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v72 = (uint64_t)v139;
          }
          uint64_t v89 = v152;
LABEL_33:
          sub_22D03A9B0(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
          sub_22D2BC1A0();
          uint64_t v104 = v155;
          uint64_t v105 = v151;
          uint64_t v106 = v137;
          sub_22D03BC18(v89, v137, &qword_26853DED0, type metadata accessor for PBTypedData);
          if ((*v122)(v106, 1, v70) == 1)
          {
            sub_22D03BBA8(v106, &qword_26853DED0, type metadata accessor for PBTypedData);
          }
          else
          {
            sub_22D03BA88(v106, v72, type metadata accessor for PBTypedData);
            sub_22D03BA88(v72, v105, type metadata accessor for PBTypedData);
            swift_storeEnumTagMultiPayload();
            (*v136)(v105, 0, 1, v104);
            uint64_t v107 = v105;
            uint64_t v108 = v145;
            sub_22D03BC18(v107, v145, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v109 = v153;
            swift_beginAccess();
            sub_22D037C18(v108, v109);
            swift_endAccess();
          }
          uint64_t v59 = v154;
          uint64_t v60 = (uint64_t)v150;
          goto LABEL_6;
        case 7:
          uint64_t v73 = *v128;
          uint64_t v74 = v146;
          (*v128)(v148, 1, 1, v146);
          uint64_t v75 = v143;
          sub_22D037B64(v153, v143);
          if ((*v147)(v75, 1, v155) == 1)
          {
            sub_22D03BBA8(v75, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v76 = (uint64_t)v140;
            uint64_t v77 = v148;
            uint64_t v78 = (uint64_t)v138;
          }
          else
          {
            uint64_t v90 = v75;
            uint64_t v91 = (uint64_t)v121;
            sub_22D03BA88(v90, (uint64_t)v121, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_22D2BC090();
            uint64_t v92 = v91;
            uint64_t v93 = (uint64_t)v117;
            sub_22D03BA88(v92, (uint64_t)v117, type metadata accessor for PBPlainText.OneOf_Plaintext);
            if (swift_getEnumCaseMultiPayload() == 2)
            {
              uint64_t v94 = v148;
              sub_22D03BBA8(v148, &qword_26853E1B0, type metadata accessor for PBRawData);
              uint64_t v95 = v93;
              uint64_t v77 = v94;
              uint64_t v96 = v131;
              sub_22D03BA88(v95, v131, type metadata accessor for PBRawData);
              uint64_t v97 = v96;
              uint64_t v60 = (uint64_t)v150;
              uint64_t v78 = (uint64_t)v138;
              uint64_t v98 = v94;
              uint64_t v59 = v154;
              uint64_t v74 = v146;
              sub_22D03BA88(v97, v98, type metadata accessor for PBRawData);
              v73(v77, 0, 1, v74);
              uint64_t v76 = (uint64_t)v140;
            }
            else
            {
              sub_22D03BD64(v93, type metadata accessor for PBPlainText.OneOf_Plaintext);
              uint64_t v76 = (uint64_t)v140;
              uint64_t v77 = v148;
              uint64_t v78 = (uint64_t)v138;
              uint64_t v74 = v146;
            }
          }
          sub_22D03A9B0(&qword_26853DA40, (void (*)(uint64_t))type metadata accessor for PBRawData);
          sub_22D2BC1A0();
          uint64_t v110 = v77;
          uint64_t v111 = v59;
          uint64_t v112 = v155;
          sub_22D03BC18(v110, v78, &qword_26853E1B0, type metadata accessor for PBRawData);
          if ((*v123)(v78, 1, v74) == 1)
          {
            sub_22D03BBA8(v78, &qword_26853E1B0, type metadata accessor for PBRawData);
          }
          else
          {
            sub_22D03BA88(v78, v76, type metadata accessor for PBRawData);
            uint64_t v61 = v76;
            uint64_t v62 = v151;
            sub_22D03BA88(v61, v151, type metadata accessor for PBRawData);
            swift_storeEnumTagMultiPayload();
            (*v136)(v62, 0, 1, v112);
            uint64_t v63 = v145;
            sub_22D03BC18(v62, v145, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            uint64_t v64 = v153;
            swift_beginAccess();
            sub_22D037C18(v63, v64);
            swift_endAccess();
          }
          uint64_t v59 = v111;
          goto LABEL_6;
        default:
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t PBPlainText.traverse<A>(visitor:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PBPlainText(0);
  uint64_t v5 = swift_retain();
  sub_22D039348(v5, a1, a2);
  uint64_t result = swift_release();
  if (!v2) {
    return sub_22D2BBFD0();
  }
  return result;
}

uint64_t sub_22D039348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = type metadata accessor for PBRawData(0);
  MEMORY[0x270FA5388](v31);
  uint64_t v32 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for PBTypedData(0);
  MEMORY[0x270FA5388](v30);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PBReferences(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v14 = (char *)&v30 - v13;
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v35 = a3;
  if (!v15 || (v16 = *(unsigned char *)(a1 + 24), v33 = v15, v34 = v16, sub_22D03BAF0(), uint64_t result = sub_22D2BC240(), !v3))
  {
    swift_beginAccess();
    unint64_t v18 = *(void *)(a1 + 40);
    uint64_t v19 = HIBYTE(v18) & 0xF;
    if ((v18 & 0x2000000000000000) == 0) {
      uint64_t v19 = *(void *)(a1 + 32) & 0xFFFFFFFFFFFFLL;
    }
    if (!v19 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v3))
    {
      swift_beginAccess();
      unint64_t v20 = *(void *)(a1 + 56);
      uint64_t v21 = HIBYTE(v20) & 0xF;
      if ((v20 & 0x2000000000000000) == 0) {
        uint64_t v21 = *(void *)(a1 + 48) & 0xFFFFFFFFFFFFLL;
      }
      if (!v21 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v3))
      {
        swift_beginAccess();
        unint64_t v22 = *(void *)(a1 + 72);
        uint64_t v23 = HIBYTE(v22) & 0xF;
        if ((v22 & 0x2000000000000000) == 0) {
          uint64_t v23 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
        }
        if (!v23 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v3))
        {
          uint64_t v24 = a1
              + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
          swift_beginAccess();
          sub_22D037B64(v24, (uint64_t)v14);
          uint64_t v25 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
          uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v14, 1, v25);
          if (result != 1)
          {
            int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
            if (EnumCaseMultiPayload)
            {
              if (EnumCaseMultiPayload == 1)
              {
                sub_22D03BA88((uint64_t)v14, (uint64_t)v8, type metadata accessor for PBTypedData);
                sub_22D03A9B0(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
                sub_22D2BC2E0();
                uint64_t v27 = type metadata accessor for PBTypedData;
                uint64_t v28 = (uint64_t)v8;
              }
              else
              {
                uint64_t v29 = v32;
                sub_22D03BA88((uint64_t)v14, v32, type metadata accessor for PBRawData);
                sub_22D03A9B0(&qword_26853DA40, (void (*)(uint64_t))type metadata accessor for PBRawData);
                sub_22D2BC2E0();
                uint64_t v27 = type metadata accessor for PBRawData;
                uint64_t v28 = v29;
              }
            }
            else
            {
              sub_22D03BA88((uint64_t)v14, (uint64_t)v11, type metadata accessor for PBReferences);
              sub_22D03A9B0(&qword_26853DA80, (void (*)(uint64_t))type metadata accessor for PBReferences);
              sub_22D2BC2E0();
              uint64_t v27 = type metadata accessor for PBReferences;
              uint64_t v28 = (uint64_t)v11;
            }
            return sub_22D03BD64(v28, v27);
          }
        }
      }
    }
  }
  return result;
}

BOOL sub_22D0398D4(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D03B9F4();
  uint64_t v9 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D03BB44(0, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v35 - v16;
  swift_beginAccess();
  uint64_t v18 = a1[2];
  swift_beginAccess();
  uint64_t v19 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a2 + 24) == 1)
  {
    switch(v19)
    {
      case 1:
        if (v18 != 1) {
          return 0;
        }
        goto LABEL_12;
      case 2:
        if (v18 != 2) {
          return 0;
        }
        goto LABEL_12;
      case 3:
        if (v18 == 3) {
          goto LABEL_12;
        }
        return 0;
      default:
        if (!v18) {
          goto LABEL_12;
        }
        return 0;
    }
  }
  if (v18 != v19) {
    return 0;
  }
LABEL_12:
  uint64_t v35 = v5;
  swift_beginAccess();
  uint64_t v20 = a1[4];
  uint64_t v21 = a1[5];
  swift_beginAccess();
  if (v20 == *(void *)(a2 + 32) && v21 == *(void *)(a2 + 40)
    || (v22 = sub_22D2BD660(), BOOL result = 0, (v22 & 1) != 0))
  {
    if ((swift_beginAccess(), v24 = a1[6], uint64_t v25 = a1[7], swift_beginAccess(), v24 == *(void *)(a2 + 48))
      && v25 == *(void *)(a2 + 56)
      || (v26 = sub_22D2BD660(), BOOL result = 0, (v26 & 1) != 0))
    {
      if ((swift_beginAccess(), uint64_t v27 = a1[8], v28 = a1[9], swift_beginAccess(), v27 == *(void *)(a2 + 64))
        && v28 == *(void *)(a2 + 72)
        || (v29 = sub_22D2BD660(), BOOL result = 0, (v29 & 1) != 0))
      {
        uint64_t v30 = (uint64_t)a1
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
        swift_beginAccess();
        sub_22D037B64(v30, (uint64_t)v17);
        uint64_t v31 = a2
            + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBPlainTextP33_3ECAB67A0DFC3A57AF94D1182EC4571713_StorageClass__plaintext;
        swift_beginAccess();
        uint64_t v32 = (uint64_t)&v11[*(int *)(v9 + 48)];
        sub_22D037B64((uint64_t)v17, (uint64_t)v11);
        sub_22D037B64(v31, v32);
        uint64_t v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
        if (v33((uint64_t)v11, 1, v4) == 1)
        {
          sub_22D03BBA8((uint64_t)v17, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
          if (v33(v32, 1, v4) == 1)
          {
            sub_22D03BBA8((uint64_t)v11, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            return 1;
          }
        }
        else
        {
          sub_22D037B64((uint64_t)v11, (uint64_t)v15);
          if (v33(v32, 1, v4) != 1)
          {
            sub_22D03BA88(v32, (uint64_t)v7, type metadata accessor for PBPlainText.OneOf_Plaintext);
            char v34 = _s19HealthRecordsDaemon11PBPlainTextV15OneOf_PlaintextO2eeoiySbAE_AEtFZ_0((uint64_t)v15, (uint64_t)v7);
            sub_22D03BD64((uint64_t)v7, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_22D03BBA8((uint64_t)v17, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_22D03BD64((uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
            sub_22D03BBA8((uint64_t)v11, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
            return (v34 & 1) != 0;
          }
          sub_22D03BBA8((uint64_t)v17, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext);
          sub_22D03BD64((uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
        }
        sub_22D03BD64((uint64_t)v11, (uint64_t (*)(void))sub_22D03B9F4);
        return 0;
      }
    }
  }
  return result;
}

uint64_t PBPlainText.hashValue.getter()
{
  return sub_22D2BD760();
}

uint64_t sub_22D039EEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_26853CCF8 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_26853E130;
  return swift_retain();
}

unint64_t sub_22D039F64()
{
  return 0xD000000000000024;
}

uint64_t sub_22D039F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return PBPlainText.decodeMessage<A>(decoder:)(a1, a2, a3);
}

uint64_t sub_22D039F98(uint64_t a1, uint64_t a2)
{
  return PBPlainText.traverse<A>(visitor:)(a1, a2);
}

uint64_t sub_22D039FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D03A9B0(&qword_26853E198, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D03A02C@<X0>(uint64_t a1@<X8>)
{
  if (qword_26853CCF0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_22D2BC310();
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)qword_26853E118);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);
  return v4(a1, v3, v2);
}

uint64_t sub_22D03A0D4(uint64_t a1)
{
  uint64_t v2 = sub_22D03A9B0(&qword_26853E158, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D03A140()
{
  sub_22D03A9B0(&qword_26853E158, (void (*)(uint64_t))type metadata accessor for PBPlainText);
  return sub_22D2BC200();
}

uint64_t _s19HealthRecordsDaemon11PBPlainTextV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  uint64_t v12 = *(void **)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == (void *)v13
    || (swift_retain(), swift_retain(), BOOL v14 = sub_22D0398D4(v12, v13), swift_release(), swift_release(), v14))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_22D03A9B0(&qword_26853DB30, MEMORY[0x263F50560]);
    char v16 = sub_22D2BCB90();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t _s19HealthRecordsDaemon11PBPlainTextV15OneOf_PlaintextO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  uint64_t v34 = type metadata accessor for PBRawData(0);
  MEMORY[0x270FA5388](v34);
  uint64_t v35 = (uint64_t)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for PBTypedData(0);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PBReferences(0);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (uint64_t *)((char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = type metadata accessor for PBPlainText.OneOf_Plaintext(0);
  uint64_t v10 = MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v34 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (uint64_t *)((char *)&v34 - v16);
  sub_22D03BC98();
  uint64_t v19 = MEMORY[0x270FA5388](v18 - 8);
  uint64_t v21 = (char *)&v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (uint64_t)&v21[*(int *)(v19 + 56)];
  sub_22D03BCFC(v36, (uint64_t)v21, type metadata accessor for PBPlainText.OneOf_Plaintext);
  sub_22D03BCFC(v37, v22, type metadata accessor for PBPlainText.OneOf_Plaintext);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_22D03BCFC((uint64_t)v21, (uint64_t)v17, type metadata accessor for PBPlainText.OneOf_Plaintext);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v25 = type metadata accessor for PBReferences;
      uint64_t v26 = (uint64_t)v17;
      goto LABEL_13;
    }
    sub_22D03BA88(v22, (uint64_t)v8, type metadata accessor for PBReferences);
    if (sub_22D112408(*v17, *v8))
    {
      sub_22D2BBFF0();
      sub_22D03A9B0(&qword_26853DB30, MEMORY[0x263F50560]);
      if (sub_22D2BCB90())
      {
        uint64_t v28 = type metadata accessor for PBReferences;
        sub_22D03BD64((uint64_t)v8, type metadata accessor for PBReferences);
        uint64_t v29 = (uint64_t)v17;
        goto LABEL_17;
      }
    }
    uint64_t v31 = type metadata accessor for PBReferences;
    sub_22D03BD64((uint64_t)v8, type metadata accessor for PBReferences);
    uint64_t v32 = (uint64_t)v17;
LABEL_20:
    sub_22D03BD64(v32, v31);
    char v24 = 0;
    goto LABEL_21;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_22D03BCFC((uint64_t)v21, (uint64_t)v12, type metadata accessor for PBPlainText.OneOf_Plaintext);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      uint64_t v25 = type metadata accessor for PBRawData;
      uint64_t v26 = (uint64_t)v12;
      goto LABEL_13;
    }
    uint64_t v27 = v35;
    sub_22D03BA88(v22, v35, type metadata accessor for PBRawData);
    if (sub_22D1158DC(*(void *)v12, *((void *)v12 + 1), *(void *)v27, *(void *)(v27 + 8)))
    {
      sub_22D2BBFF0();
      sub_22D03A9B0(&qword_26853DB30, MEMORY[0x263F50560]);
      if (sub_22D2BCB90())
      {
        uint64_t v28 = type metadata accessor for PBRawData;
        sub_22D03BD64(v27, type metadata accessor for PBRawData);
        uint64_t v29 = (uint64_t)v12;
LABEL_17:
        sub_22D03BD64(v29, v28);
        char v24 = 1;
        goto LABEL_21;
      }
    }
    uint64_t v31 = type metadata accessor for PBRawData;
    sub_22D03BD64(v27, type metadata accessor for PBRawData);
    uint64_t v32 = (uint64_t)v12;
    goto LABEL_20;
  }
  sub_22D03BCFC((uint64_t)v21, (uint64_t)v15, type metadata accessor for PBPlainText.OneOf_Plaintext);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_22D03BA88(v22, (uint64_t)v5, type metadata accessor for PBTypedData);
    char v24 = sub_22D010624((uint64_t)v15, (uint64_t)v5);
    sub_22D03BD64((uint64_t)v5, type metadata accessor for PBTypedData);
    sub_22D03BD64((uint64_t)v15, type metadata accessor for PBTypedData);
LABEL_21:
    uint64_t v30 = type metadata accessor for PBPlainText.OneOf_Plaintext;
    goto LABEL_22;
  }
  uint64_t v25 = type metadata accessor for PBTypedData;
  uint64_t v26 = (uint64_t)v15;
LABEL_13:
  sub_22D03BD64(v26, v25);
  char v24 = 0;
  uint64_t v30 = (uint64_t (*)(void))sub_22D03BC98;
LABEL_22:
  sub_22D03BD64((uint64_t)v21, v30);
  return v24 & 1;
}

uint64_t sub_22D03A968()
{
  return sub_22D03A9B0(&qword_26853E150, (void (*)(uint64_t))type metadata accessor for PBPlainText);
}

uint64_t sub_22D03A9B0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D03A9F8()
{
  return sub_22D03A9B0(&qword_26853E158, (void (*)(uint64_t))type metadata accessor for PBPlainText);
}

uint64_t sub_22D03AA40()
{
  return sub_22D03A9B0(&qword_26853E148, (void (*)(uint64_t))type metadata accessor for PBPlainText);
}

uint64_t sub_22D03AA88()
{
  return sub_22D03A9B0(&qword_26853E160, (void (*)(uint64_t))type metadata accessor for PBPlainText);
}

uint64_t sub_22D03AAD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBPlainText(0) + 20));
  uint64_t result = swift_beginAccess();
  char v5 = *(unsigned char *)(v3 + 24);
  *(void *)a2 = *(void *)(v3 + 16);
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_22D03AB54@<X0>(void *a1@<X8>)
{
  return PBPlainText.references.getter(a1);
}

uint64_t sub_22D03AB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D036EF8(a1, a2, a3, a4, type metadata accessor for PBReferences, type metadata accessor for PBReferences, (uint64_t (*)(char *))PBPlainText.references.setter);
}

uint64_t sub_22D03ABCC@<X0>(uint64_t a1@<X8>)
{
  return PBPlainText.data.getter(a1);
}

uint64_t sub_22D03ABF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D036EF8(a1, a2, a3, a4, type metadata accessor for PBTypedData, type metadata accessor for PBTypedData, (uint64_t (*)(char *))PBPlainText.data.setter);
}

uint64_t sub_22D03AC44@<X0>(uint64_t *a1@<X8>)
{
  return PBPlainText.rawData.getter(a1);
}

uint64_t sub_22D03AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_22D036EF8(a1, a2, a3, a4, type metadata accessor for PBRawData, type metadata accessor for PBRawData, (uint64_t (*)(char *))PBPlainText.rawData.setter);
}

uint64_t getEnumTagSinglePayload for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D03ACD0);
}

uint64_t sub_22D03ACD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PBPlainText(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D03ADA4);
}

uint64_t sub_22D03ADA4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBFF0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v10 = *a2;
      unint64_t v11 = a2[1];
      sub_22CFF9B64(*a2, v11);
      *a1 = v10;
      a1[1] = v11;
      uint64_t v12 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      uint64_t v13 = (char *)a1 + v12;
      uint64_t v14 = (char *)a2 + v12;
      uint64_t v15 = sub_22D2BBFF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = sub_22D2BBFF0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for PBTypedData(0);
      *(uint64_t *)((char *)a1 + *(int *)(v8 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v8 + 20));
      swift_retain();
    }
    else
    {
      *a1 = *a2;
      uint64_t v16 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      uint64_t v17 = (char *)a1 + v16;
      uint64_t v18 = (char *)a2 + v16;
      uint64_t v19 = sub_22D2BBFF0();
      uint64_t v20 = *(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16);
      swift_bridgeObjectRetain();
      v20(v17, v18, v19);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for PBPlainText.OneOf_Plaintext(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
    sub_22CFF5630(*(void *)a1, *(void *)(a1 + 8));
    uint64_t v3 = type metadata accessor for PBRawData(0);
LABEL_6:
    uint64_t v4 = a1 + *(int *)(v3 + 20);
    uint64_t v5 = sub_22D2BBFF0();
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v6(v4, v5);
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    swift_bridgeObjectRelease();
    uint64_t v3 = type metadata accessor for PBReferences(0);
    goto LABEL_6;
  }
  uint64_t v7 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  type metadata accessor for PBTypedData(0);
  return swift_release();
}

uint64_t *initializeWithCopy for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_22CFF9B64(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(type metadata accessor for PBRawData(0) + 20);
    uint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = sub_22D2BBFF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_22D2BBFF0();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for PBTypedData(0);
    *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v13 = *(int *)(type metadata accessor for PBReferences(0) + 20);
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_22D2BBFF0();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for PBPlainText.OneOf_Plaintext(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    sub_22D03BD64((uint64_t)a1, type metadata accessor for PBPlainText.OneOf_Plaintext);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v7 = *a2;
      unint64_t v8 = a2[1];
      sub_22CFF9B64(*a2, v8);
      *a1 = v7;
      a1[1] = v8;
      uint64_t v9 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      uint64_t v10 = (char *)a1 + v9;
      unint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = sub_22D2BBFF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_22D2BBFF0();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for PBTypedData(0);
      *(uint64_t *)((char *)a1 + *(int *)(v6 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(v6 + 20));
      swift_retain();
    }
    else
    {
      *a1 = *a2;
      uint64_t v13 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      uint64_t v14 = (char *)a1 + v13;
      uint64_t v15 = (char *)a2 + v13;
      uint64_t v16 = sub_22D2BBFF0();
      uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
      swift_bridgeObjectRetain();
      v17(v14, v15, v16);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_OWORD *initializeWithTake for PBPlainText.OneOf_Plaintext(_OWORD *a1, _OWORD *a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(type metadata accessor for PBRawData(0) + 20);
    unint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_22D2BBFF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  }
  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v5 = sub_22D2BBFF0();
    (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
    uint64_t v6 = type metadata accessor for PBTypedData(0);
    *(void *)((char *)a1 + *(int *)(v6 + 20)) = *(void *)((char *)a2 + *(int *)(v6 + 20));
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    uint64_t v11 = *(int *)(type metadata accessor for PBReferences(0) + 20);
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = sub_22D2BBFF0();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

_OWORD *assignWithTake for PBPlainText.OneOf_Plaintext(_OWORD *a1, _OWORD *a2)
{
  if (a1 != a2)
  {
    sub_22D03BD64((uint64_t)a1, type metadata accessor for PBPlainText.OneOf_Plaintext);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      *a1 = *a2;
      uint64_t v7 = *(int *)(type metadata accessor for PBRawData(0) + 20);
      unint64_t v8 = (char *)a1 + v7;
      uint64_t v9 = (char *)a2 + v7;
      uint64_t v10 = sub_22D2BBFF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    }
    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v5 = sub_22D2BBFF0();
      (*(void (**)(_OWORD *, _OWORD *, uint64_t))(*(void *)(v5 - 8) + 32))(a1, a2, v5);
      uint64_t v6 = type metadata accessor for PBTypedData(0);
      *(void *)((char *)a1 + *(int *)(v6 + 20)) = *(void *)((char *)a2 + *(int *)(v6 + 20));
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      uint64_t v11 = *(int *)(type metadata accessor for PBReferences(0) + 20);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = sub_22D2BBFF0();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_22D03B814()
{
  uint64_t result = type metadata accessor for PBReferences(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PBTypedData(319);
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for PBRawData(319);
      if (v3 <= 0x3F)
      {
        swift_initEnumMetadataMultiPayload();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22D03B914()
{
  return type metadata accessor for PBPlainText._StorageClass(0);
}

void sub_22D03B91C()
{
  sub_22D03BB44(319, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_22D03B9F4()
{
  if (!qword_26853E1A0)
  {
    sub_22D03BB44(255, &qword_26853E140, type metadata accessor for PBPlainText.OneOf_Plaintext, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E1A0);
    }
  }
}

uint64_t sub_22D03BA88(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_22D03BAF0()
{
  unint64_t result = qword_26853E1A8;
  if (!qword_26853E1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E1A8);
  }
  return result;
}

void sub_22D03BB44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D03BBA8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_22D03BB44(0, a2, a3, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22D03BC18(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D03BB44(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void sub_22D03BC98()
{
  if (!qword_26853E1C0)
  {
    type metadata accessor for PBPlainText.OneOf_Plaintext(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E1C0);
    }
  }
}

uint64_t sub_22D03BCFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D03BD64(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D03BDC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t *a11)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v40 = a6;
  uint64_t v39 = type metadata accessor for PBDateRange(0);
  uint64_t v17 = MEMORY[0x270FA5388](v39);
  uint64_t v19 = &v33[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = &v33[-v20];
  uint64_t v37 = *a5;
  int v36 = *((unsigned __int8 *)a5 + 8);
  uint64_t v35 = *a11;
  int v34 = *((unsigned __int8 *)a11 + 8);
  int v38 = *((unsigned __int8 *)a11 + 9);
  sub_22D2BBFE0();
  uint64_t v22 = *(int *)(type metadata accessor for PBReference(0) + 20);
  if (qword_26853CCE0 != -1) {
    swift_once();
  }
  *(void *)(a9 + v22) = qword_26853D9B0;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v23 = (void *)swift_retain();
    *(void *)(a9 + v22) = sub_22D00D3F4(v23);
    swift_release();
  }
  uint64_t v24 = *(void *)(a9 + v22);
  swift_beginAccess();
  *(void *)(v24 + 16) = a1;
  *(void *)(v24 + 24) = a2;
  swift_bridgeObjectRelease();
  sub_22CFF9B64(a3, a4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v25 = (void *)swift_retain();
    *(void *)(a9 + v22) = sub_22D00D3F4(v25);
    swift_release();
  }
  uint64_t v26 = *(void *)(a9 + v22);
  swift_beginAccess();
  uint64_t v27 = *(void *)(v26 + 32);
  unint64_t v28 = *(void *)(v26 + 40);
  *(void *)(v26 + 32) = a3;
  *(void *)(v26 + 40) = a4;
  sub_22CFF5630(v27, v28);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBReference._StorageClass(0);
    swift_allocObject();
    uint64_t v29 = (void *)swift_retain();
    *(void *)(a9 + v22) = sub_22D00D3F4(v29);
    swift_release();
  }
  uint64_t v30 = *(void *)(a9 + v22)
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
  swift_beginAccess();
  *(void *)uint64_t v30 = v37;
  *(unsigned char *)(v30 + 8) = v36;
  *((void *)v19 + 4) = 0;
  v19[40] = 1;
  sub_22D2BBFE0();
  uint64_t v31 = v41;
  *(void *)uint64_t v19 = v40;
  *((void *)v19 + 1) = v31;
  *((void *)v19 + 2) = v42;
  *((void *)v19 + 3) = a10;
  if ((v38 & 1) == 0)
  {
    *((void *)v19 + 4) = v35;
    v19[40] = v34 & 1;
  }
  sub_22D03C0E4((uint64_t)v19, (uint64_t)v21);
  PBReference.dateRange.setter((uint64_t)v21);
  return sub_22CFF5630(a3, a4);
}

uint64_t sub_22D03C0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBDateRange(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D03C148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16 = sub_22D2BBC30();
  uint64_t v44 = *(void *)(v16 - 8);
  uint64_t v45 = v16;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = *(void *)a7;
  char v19 = *(unsigned char *)(a7 + 8);
  *a8 = a1;
  uint64_t v46 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
  uint64_t v47 = a2;
  uint64_t v20 = *(int *)(v46 + 24);
  uint64_t v52 = a8;
  uint64_t v21 = (uint64_t *)((char *)a8 + v20);
  uint64_t *v21 = a2;
  v21[1] = a3;
  v21[2] = a4;
  v21[3] = a5;
  uint64_t v48 = a1;
  swift_bridgeObjectRetain();
  uint64_t v49 = a3;
  swift_bridgeObjectRetain();
  uint64_t v50 = a4;
  unint64_t v51 = a5;
  sub_22CFF9B64(a4, a5);
  uint64_t v53 = a6;
  sub_22D2BC920();
  unint64_t v42 = v57;
  uint64_t v43 = v56;
  uint64_t v54 = v41;
  char v55 = v19;
  uint64_t v56 = 0;
  LOWORD(v57) = 256;
  sub_22D2BBB80();
  if (qword_26853D3D0 != -1) {
    swift_once();
  }
  uint64_t v22 = (void *)qword_268568488;
  uint64_t v23 = (void *)sub_22D2BBBC0();
  id v24 = objc_msgSend(v22, sel_stringFromDate_, v23);

  uint64_t v25 = sub_22D2BCBD0();
  uint64_t v27 = v26;

  uint64_t v28 = v45;
  uint64_t v29 = *(void (**)(char *, uint64_t))(v44 + 8);
  v29(v18, v45);
  sub_22D2BBB90();
  uint64_t v30 = (void *)qword_268568488;
  uint64_t v31 = (void *)sub_22D2BBBC0();
  id v32 = objc_msgSend(v30, sel_stringFromDate_, v31);

  uint64_t v33 = sub_22D2BCBD0();
  uint64_t v35 = v34;

  v29(v18, v28);
  uint64_t v36 = v46;
  uint64_t v37 = v52;
  sub_22D03BDC4(v47, v49, v43, v42, &v54, v25, v27, v33, (uint64_t)v52 + *(int *)(v46 + 20), v35, &v56);
  uint64_t v38 = sub_22D0AF648(v48);
  swift_bridgeObjectRelease();
  sub_22CFF5630(v50, v51);
  uint64_t v39 = sub_22D2BC940();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v53, v39);
  *(uint64_t *)((char *)v37 + *(int *)(v36 + 28)) = v38;
  return result;
}

uint64_t type metadata accessor for ClinicalSharingCategoryNodeInfo()
{
  uint64_t result = qword_26853E1C8;
  if (!qword_26853E1C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_22D03C4B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = sub_22D2BBFF0();
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = type metadata accessor for PBReference(0);
    *(void *)&v9[*(int *)(v13 + 20)] = *(void *)&v10[*(int *)(v13 + 20)];
    uint64_t v14 = a3[6];
    uint64_t v15 = (uint64_t *)((char *)v7 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v16[2];
    unint64_t v19 = v16[3];
    swift_retain();
    swift_bridgeObjectRetain();
    sub_22CFF9B64(v18, v19);
    v15[2] = v18;
    v15[3] = v19;
    *(uint64_t *)((char *)v7 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_22D03C604(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  type metadata accessor for PBReference(0);
  swift_release();
  uint64_t v6 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  sub_22CFF5630(*(void *)(v6 + 16), *(void *)(v6 + 24));
  return swift_bridgeObjectRelease();
}

void *sub_22D03C6BC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = type metadata accessor for PBReference(0);
  *(void *)&v7[*(int *)(v11 + 20)] = *(void *)&v8[*(int *)(v11 + 20)];
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v14[2];
  unint64_t v17 = v14[3];
  swift_retain();
  swift_bridgeObjectRetain();
  sub_22CFF9B64(v16, v17);
  v13[2] = v16;
  v13[3] = v17;
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_22D03C7BC(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for PBReference(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  swift_retain();
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  *uint64_t v12 = *(void *)((char *)a2 + v11);
  v12[1] = *(void *)((char *)a2 + v11 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *((void *)v13 + 2);
  unint64_t v15 = *((void *)v13 + 3);
  sub_22CFF9B64(v14, v15);
  uint64_t v16 = v12[2];
  unint64_t v17 = v12[3];
  v12[2] = v14;
  v12[3] = v15;
  sub_22CFF5630(v16, v17);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_22D03C8E0(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for PBReference(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (_OWORD *)((char *)a1 + v11);
  uint64_t v14 = (_OWORD *)((char *)a2 + v11);
  long long v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  *(void *)((char *)a1 + v12) = *(void *)((char *)a2 + v12);
  return a1;
}

void *sub_22D03C99C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = type metadata accessor for PBReference(0);
  *(void *)&v7[*(int *)(v10 + 20)] = *(void *)&v8[*(int *)(v10 + 20)];
  swift_release();
  uint64_t v11 = a3[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = *(void *)((char *)a2 + v11 + 8);
  *uint64_t v12 = *(void *)((char *)a2 + v11);
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v15 = v12[2];
  unint64_t v16 = v12[3];
  *((_OWORD *)v12 + 1) = *((_OWORD *)v13 + 1);
  sub_22CFF5630(v15, v16);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22D03CA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D03CAA0);
}

uint64_t sub_22D03CAA0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for PBReference(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_22D03CB50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D03CB64);
}

void *sub_22D03CB64(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for PBReference(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D03CC0C()
{
  uint64_t result = type metadata accessor for PBReference(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D03CCB4@<X0>(char *a1@<X8>)
{
  v216 = a1;
  uint64_t v180 = type metadata accessor for PBActiveMedications(0);
  MEMORY[0x270FA5388](v180);
  uint64_t v211 = (char **)((char *)&v164 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v179 = type metadata accessor for PBMedicationTrackingSchedules(0);
  MEMORY[0x270FA5388](v179);
  uint64_t v210 = (char **)((char *)&v164 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v178 = type metadata accessor for PBMedicationTrackingDoseEvents(0);
  MEMORY[0x270FA5388](v178);
  uint64_t v209 = (uint64_t *)((char *)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v215 = type metadata accessor for PBMedicationTracking(0);
  uint64_t v165 = *(void *)(v215 - 8);
  MEMORY[0x270FA5388](v215);
  uint64_t v214 = (uint64_t)&v164 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v177 = type metadata accessor for PBMedicationTrackings(0);
  MEMORY[0x270FA5388](v177);
  uint64_t v212 = (uint64_t)&v164 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v176 = type metadata accessor for PBHistogramSeries(0);
  MEMORY[0x270FA5388](v176);
  uint64_t v208 = (uint64_t *)((char *)&v164 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v175 = type metadata accessor for PBSleepSeries(0);
  MEMORY[0x270FA5388](v175);
  uint64_t v207 = (uint64_t *)((char *)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v174 = type metadata accessor for PBSleepSummary(0);
  MEMORY[0x270FA5388](v174);
  uint64_t v205 = (char **)((char *)&v164 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v173 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x270FA5388](v173);
  uint64_t v206 = (char **)((char *)&v164 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v172 = type metadata accessor for PBActivitySummarySeries(0);
  MEMORY[0x270FA5388](v172);
  uint64_t v204 = (uint64_t *)((char *)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v182 = (char *)&v164 - v13;
  uint64_t v14 = type metadata accessor for PBECGMeasurement(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v203 = (uint64_t)&v164 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v171 = type metadata accessor for PBCycleTracking(0);
  MEMORY[0x270FA5388](v171);
  uint64_t v202 = (char **)((char *)&v164 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v170 = type metadata accessor for PBECGs(0);
  MEMORY[0x270FA5388](v170);
  uint64_t v200 = (uint64_t *)((char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v169 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x270FA5388](v169);
  uint64_t v201 = (uint64_t *)((char *)&v164 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v168 = type metadata accessor for PBCharacteristics(0);
  MEMORY[0x270FA5388](v168);
  uint64_t v199 = (char **)((char *)&v164 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v167 = type metadata accessor for PBWorkout(0);
  MEMORY[0x270FA5388](v167);
  uint64_t v198 = (uint64_t *)((char *)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v166 = type metadata accessor for PBCategorySeries(0);
  MEMORY[0x270FA5388](v166);
  uint64_t v197 = (uint64_t *)((char *)&v164 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v181 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x270FA5388](v181);
  uint64_t v196 = (uint64_t *)((char *)&v164 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22D0433F4(0, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v195 = (uint64_t)&v164 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v194 = (uint64_t)&v164 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v193 = (uint64_t)&v164 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v192 = (uint64_t)&v164 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v191 = (uint64_t)&v164 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v190 = (uint64_t)&v164 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v189 = (uint64_t)&v164 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v188 = (uint64_t)&v164 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v187 = (uint64_t)&v164 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v186 = (uint64_t)&v164 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v185 = (uint64_t)&v164 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v184 = (uint64_t)&v164 - v47;
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v183 = (uint64_t)&v164 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v52 = (char *)&v164 - v51;
  uint64_t v53 = MEMORY[0x270FA5388](v50);
  char v55 = (char *)&v164 - v54;
  uint64_t v56 = MEMORY[0x270FA5388](v53);
  char v58 = (char *)&v164 - v57;
  MEMORY[0x270FA5388](v56);
  uint64_t v60 = (char *)&v164 - v59;
  uint64_t v61 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  uint64_t v62 = *(void *)(v61 - 8);
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  uint64_t v65 = (char *)&v164 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v63);
  uint64_t v67 = (char *)&v164 - v66;
  uint64_t v68 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  uint64_t v213 = v1;
  uint64_t v69 = *(void *)&v1[v68];
  uint64_t v70 = v61;
  uint64_t v71 = v69
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  sub_22D0432D4(v71, (uint64_t)v60, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v72 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
  if (v72(v60, 1, v70) != 1)
  {
    sub_22D03F2B8((uint64_t)v60, (uint64_t)v67, type metadata accessor for PBTypedData.OneOf_Raw);
    id v164 = v67;
    sub_22D03F1F0((uint64_t)v67, (uint64_t)v65, type metadata accessor for PBTypedData.OneOf_Raw);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_22D0432D4(v71, (uint64_t)v55, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72(v55, 1, v70) == 1)
        {
          sub_22D043340((uint64_t)v55, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v75 = v197;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v75 = v197;
          if (EnumCaseMultiPayload == 1)
          {
            sub_22D03F2B8((uint64_t)v55, (uint64_t)v197, type metadata accessor for PBCategorySeries);
LABEL_82:
            sub_22D03F534((uint64_t)v75, v216);
            uint64_t v114 = type metadata accessor for PBCategorySeries;
            goto LABEL_135;
          }
          sub_22D03F258((uint64_t)v55, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v134 = *(int *)(v166 + 20);
        if (qword_26853CFA8 != -1) {
          swift_once();
        }
        *(uint64_t *)((char *)v75 + v134) = qword_2685401B0;
        swift_retain();
        goto LABEL_82;
      case 2u:
        sub_22D0432D4(v71, (uint64_t)v52, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72(v52, 1, v70) == 1)
        {
          sub_22D043340((uint64_t)v52, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v75 = v198;
        }
        else
        {
          int v116 = swift_getEnumCaseMultiPayload();
          uint64_t v75 = v198;
          if (v116 == 2)
          {
            sub_22D03F2B8((uint64_t)v52, (uint64_t)v198, type metadata accessor for PBWorkout);
            goto LABEL_87;
          }
          sub_22D03F258((uint64_t)v52, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v135 = *(int *)(v167 + 20);
        if (qword_26853CFE8 != -1) {
          swift_once();
        }
        *(uint64_t *)((char *)v75 + v135) = qword_268540240;
        swift_retain();
LABEL_87:
        sub_22D03F948((uint64_t)v75, (uint64_t)v216);
        uint64_t v114 = type metadata accessor for PBWorkout;
        goto LABEL_135;
      case 3u:
        uint64_t v76 = v183;
        sub_22D0432D4(v71, v183, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v76, 1, v70) == 1)
        {
          sub_22D043340(v76, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v77 = (uint64_t)v164;
          uint64_t v78 = v199;
        }
        else
        {
          int v117 = swift_getEnumCaseMultiPayload();
          uint64_t v77 = (uint64_t)v164;
          uint64_t v78 = v199;
          if (v117 == 3)
          {
            sub_22D03F2B8(v76, (uint64_t)v199, type metadata accessor for PBCharacteristics);
            goto LABEL_90;
          }
          sub_22D03F258(v76, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v78 = 0;
        v78[1] = 0xE000000000000000;
        v78[2] = 0;
        v78[3] = 0xE000000000000000;
        v78[4] = 0;
        v78[5] = 0xE000000000000000;
        sub_22D2BBFE0();
LABEL_90:
        sub_22D03F258(v77, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v136 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56))(v216, 1, 1, v136);
        uint64_t v137 = type metadata accessor for PBCharacteristics;
        goto LABEL_144;
      case 4u:
        uint64_t v79 = v184;
        sub_22D0432D4(v71, v184, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v79, 1, v70) == 1)
        {
          sub_22D043340(v79, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v80 = v201;
        }
        else
        {
          int v118 = swift_getEnumCaseMultiPayload();
          uint64_t v80 = v201;
          if (v118 == 4)
          {
            uint64_t v119 = sub_22D03F2B8(v79, (uint64_t)v201, type metadata accessor for PBAllClinicalRecords);
            goto LABEL_93;
          }
          sub_22D03F258(v79, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v80 = MEMORY[0x263F8EE78];
        uint64_t v119 = sub_22D2BBFE0();
LABEL_93:
        uint64_t v138 = *v80;
        MEMORY[0x270FA5388](v119);
        *(&v164 - 2) = v213;
        swift_bridgeObjectRetain();
        unint64_t v139 = sub_22D23FC5C((void (*)(void))sub_22D0432A8, (uint64_t)(&v164 - 4), v138);
        swift_bridgeObjectRelease();
        sub_22D042D40(v139, v216);
        swift_bridgeObjectRelease();
        uint64_t v140 = type metadata accessor for PBAllClinicalRecords;
        uint64_t v141 = (uint64_t)v80;
        goto LABEL_136;
      case 5u:
        uint64_t v81 = v71;
        uint64_t v82 = v185;
        sub_22D0432D4(v81, v185, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v82, 1, v70) == 1)
        {
          sub_22D043340(v82, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v83 = v216;
          uint64_t v75 = v200;
        }
        else
        {
          int v120 = swift_getEnumCaseMultiPayload();
          uint64_t v83 = v216;
          uint64_t v75 = v200;
          if (v120 == 5)
          {
            sub_22D03F2B8(v82, (uint64_t)v200, type metadata accessor for PBECGs);
            goto LABEL_96;
          }
          sub_22D03F258(v82, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v75 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_96:
        sub_22D03FEE4(v75, type metadata accessor for PBECGMeasurement, type metadata accessor for PBECGMeasurement, type metadata accessor for PBECGMeasurement, v83);
        uint64_t v114 = type metadata accessor for PBECGs;
        goto LABEL_135;
      case 6u:
        uint64_t v84 = v186;
        sub_22D0432D4(v71, v186, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v84, 1, v70) == 1)
        {
          sub_22D043340(v84, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v85 = (uint64_t)v164;
          uint64_t v78 = v202;
        }
        else
        {
          int v121 = swift_getEnumCaseMultiPayload();
          uint64_t v85 = (uint64_t)v164;
          uint64_t v78 = v202;
          if (v121 == 6)
          {
            sub_22D03F2B8(v84, (uint64_t)v202, type metadata accessor for PBCycleTracking);
            goto LABEL_101;
          }
          sub_22D03F258(v84, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v142 = *(int *)(v171 + 20);
        if (qword_26853D158 != -1) {
          swift_once();
        }
        *(void *)((char *)v78 + v142) = qword_268540560;
        swift_retain();
LABEL_101:
        sub_22D03F258(v85, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v143 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v143 - 8) + 56))(v216, 1, 1, v143);
        uint64_t v137 = type metadata accessor for PBCycleTracking;
        goto LABEL_144;
      case 7u:
        uint64_t v86 = v203;
        PBTypedData.ecg.getter(v203);
        if (qword_26853D3D0 != -1) {
          swift_once();
        }
        uint64_t v87 = (void *)qword_268568488;
        uint64_t v88 = (void *)sub_22D2BCBA0();
        id v89 = objc_msgSend(v87, sel_dateFromString_, v88);

        if (v89)
        {
          uint64_t v90 = (uint64_t)v182;
          sub_22D2BBC00();

          uint64_t v91 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v91 - 8) + 56))(v90, 0, 1, v91);
        }
        else
        {
          uint64_t v131 = sub_22D2BBC30();
          uint64_t v90 = (uint64_t)v182;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v182, 1, 1, v131);
        }
        uint64_t v132 = (uint64_t)v164;
        sub_22D043228(v90, (uint64_t)v216);
        sub_22D03F258(v86, type metadata accessor for PBECGMeasurement);
        uint64_t v133 = v132;
        goto LABEL_137;
      case 8u:
        uint64_t v92 = v187;
        sub_22D0432D4(v71, v187, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v92, 1, v70) == 1)
        {
          sub_22D043340(v92, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v75 = v204;
        }
        else
        {
          int v122 = swift_getEnumCaseMultiPayload();
          uint64_t v75 = v204;
          if (v122 == 8)
          {
            sub_22D03F2B8(v92, (uint64_t)v204, type metadata accessor for PBActivitySummarySeries);
            goto LABEL_106;
          }
          sub_22D03F258(v92, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v144 = *(int *)(v172 + 20);
        if (qword_26853D1E0 != -1) {
          swift_once();
        }
        *(uint64_t *)((char *)v75 + v144) = qword_2685406B8;
        swift_retain();
LABEL_106:
        sub_22D03FCD0((uint64_t)v75, v216);
        uint64_t v114 = type metadata accessor for PBActivitySummarySeries;
        goto LABEL_135;
      case 9u:
        uint64_t v93 = v188;
        sub_22D0432D4(v71, v188, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v93, 1, v70) == 1)
        {
          sub_22D043340(v93, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v94 = (uint64_t)v164;
          uint64_t v78 = v206;
        }
        else
        {
          int v123 = swift_getEnumCaseMultiPayload();
          uint64_t v94 = (uint64_t)v164;
          uint64_t v78 = v206;
          if (v123 == 9)
          {
            sub_22D03F2B8(v93, (uint64_t)v206, type metadata accessor for PBPatientMeta);
            goto LABEL_111;
          }
          sub_22D03F258(v93, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v145 = *(int *)(v173 + 20);
        if (qword_26853D200 != -1) {
          swift_once();
        }
        *(void *)((char *)v78 + v145) = qword_268540700;
        swift_retain();
LABEL_111:
        sub_22D03F258(v94, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v146 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v146 - 8) + 56))(v216, 1, 1, v146);
        uint64_t v137 = type metadata accessor for PBPatientMeta;
        goto LABEL_144;
      case 0xAu:
        uint64_t v95 = v189;
        sub_22D0432D4(v71, v189, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v95, 1, v70) == 1)
        {
          sub_22D043340(v95, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v96 = (uint64_t)v164;
          uint64_t v78 = v205;
        }
        else
        {
          int v124 = swift_getEnumCaseMultiPayload();
          uint64_t v96 = (uint64_t)v164;
          uint64_t v78 = v205;
          if (v124 == 10)
          {
            sub_22D03F2B8(v95, (uint64_t)v205, type metadata accessor for PBSleepSummary);
            goto LABEL_114;
          }
          sub_22D03F258(v95, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v78 = MEMORY[0x263F8EE78];
        *((_DWORD *)v78 + 2) = 0;
        sub_22D2BBFE0();
LABEL_114:
        sub_22D03F258(v96, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v147 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v216, 1, 1, v147);
        uint64_t v137 = type metadata accessor for PBSleepSummary;
        goto LABEL_144;
      case 0xBu:
        uint64_t v97 = v71;
        uint64_t v98 = v190;
        sub_22D0432D4(v97, v190, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v98, 1, v70) == 1)
        {
          sub_22D043340(v98, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v99 = v216;
          uint64_t v75 = v207;
        }
        else
        {
          int v125 = swift_getEnumCaseMultiPayload();
          uint64_t v99 = v216;
          uint64_t v75 = v207;
          if (v125 == 11)
          {
            sub_22D03F2B8(v98, (uint64_t)v207, type metadata accessor for PBSleepSeries);
            goto LABEL_117;
          }
          sub_22D03F258(v98, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v75 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_117:
        sub_22D03FEE4(v75, type metadata accessor for PBSleepSeries.Value, type metadata accessor for PBSleepSeries.Value, type metadata accessor for PBSleepSeries.Value, v99);
        uint64_t v114 = type metadata accessor for PBSleepSeries;
        goto LABEL_135;
      case 0xCu:
        uint64_t v100 = v71;
        uint64_t v101 = v191;
        sub_22D0432D4(v100, v191, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v101, 1, v70) == 1)
        {
          sub_22D043340(v101, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v102 = v216;
          uint64_t v75 = v208;
        }
        else
        {
          int v126 = swift_getEnumCaseMultiPayload();
          uint64_t v102 = v216;
          uint64_t v75 = v208;
          if (v126 == 12)
          {
            sub_22D03F2B8(v101, (uint64_t)v208, type metadata accessor for PBHistogramSeries);
            goto LABEL_120;
          }
          sub_22D03F258(v101, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v75 = MEMORY[0x263F8EE78];
        v75[1] = 0;
        v75[2] = 0xE000000000000000;
        sub_22D2BBFE0();
LABEL_120:
        sub_22D03FEE4(v75, type metadata accessor for PBHistogramSeries.Value, type metadata accessor for PBHistogramSeries.Value, type metadata accessor for PBHistogramSeries.Value, v102);
        uint64_t v114 = type metadata accessor for PBHistogramSeries;
        goto LABEL_135;
      case 0xDu:
        uint64_t v103 = v192;
        sub_22D0432D4(v71, v192, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v103, 1, v70) == 1)
        {
          sub_22D043340(v103, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v104 = v212;
        }
        else
        {
          int v127 = swift_getEnumCaseMultiPayload();
          uint64_t v104 = v212;
          if (v127 == 13)
          {
            sub_22D03F2B8(v103, v212, type metadata accessor for PBMedicationTrackings);
            goto LABEL_123;
          }
          sub_22D03F258(v103, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *(void *)uint64_t v104 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_123:
        uint64_t v148 = *(void *)v104;
        int64_t v149 = *(void *)(*(void *)v104 + 16);
        uint64_t v150 = MEMORY[0x263F8EE78];
        if (v149)
        {
          uint64_t v151 = v65;
          uint64_t v217 = MEMORY[0x263F8EE78];
          swift_bridgeObjectRetain();
          sub_22D24B86C(0, v149, 0);
          uint64_t v152 = v148 + ((*(unsigned __int8 *)(v165 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80));
          uint64_t v153 = *(void *)(v165 + 72);
          uint64_t v150 = v217;
          do
          {
            uint64_t v154 = v214;
            sub_22D03F1F0(v152, v214, type metadata accessor for PBMedicationTracking);
            uint64_t v155 = *(void *)(v154 + *(int *)(v215 + 20));
            swift_beginAccess();
            uint64_t v157 = *(void *)(v155 + 208);
            uint64_t v156 = *(void *)(v155 + 216);
            swift_bridgeObjectRetain();
            sub_22D03F258(v154, type metadata accessor for PBMedicationTracking);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_22D24B86C(0, *(void *)(v150 + 16) + 1, 1);
              uint64_t v150 = v217;
            }
            unint64_t v159 = *(void *)(v150 + 16);
            unint64_t v158 = *(void *)(v150 + 24);
            if (v159 >= v158 >> 1)
            {
              sub_22D24B86C(v158 > 1, v159 + 1, 1);
              uint64_t v150 = v217;
            }
            *(void *)(v150 + 16) = v159 + 1;
            uint64_t v160 = v150 + 16 * v159;
            *(void *)(v160 + 32) = v157;
            *(void *)(v160 + 40) = v156;
            v152 += v153;
            --v149;
          }
          while (v149);
          swift_bridgeObjectRelease();
          uint64_t v65 = v151;
          uint64_t v104 = v212;
        }
        sub_22D04029C(v150, v216);
        swift_bridgeObjectRelease();
        uint64_t v140 = type metadata accessor for PBMedicationTrackings;
        uint64_t v141 = v104;
        goto LABEL_136;
      case 0xEu:
        uint64_t v105 = v71;
        uint64_t v106 = v193;
        sub_22D0432D4(v105, v193, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v106, 1, v70) == 1)
        {
          sub_22D043340(v106, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v107 = v216;
          uint64_t v75 = v209;
        }
        else
        {
          int v128 = swift_getEnumCaseMultiPayload();
          uint64_t v107 = v216;
          uint64_t v75 = v209;
          if (v128 == 14)
          {
            sub_22D03F2B8(v106, (uint64_t)v209, type metadata accessor for PBMedicationTrackingDoseEvents);
            goto LABEL_134;
          }
          sub_22D03F258(v106, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v75 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_134:
        sub_22D0400B8(v75, v107);
        uint64_t v114 = type metadata accessor for PBMedicationTrackingDoseEvents;
        goto LABEL_135;
      case 0xFu:
        uint64_t v108 = v194;
        sub_22D0432D4(v71, v194, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v108, 1, v70) == 1)
        {
          sub_22D043340(v108, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v109 = (uint64_t)v164;
          uint64_t v78 = v210;
        }
        else
        {
          int v129 = swift_getEnumCaseMultiPayload();
          uint64_t v109 = (uint64_t)v164;
          uint64_t v78 = v210;
          if (v129 == 15)
          {
            sub_22D03F2B8(v108, (uint64_t)v210, type metadata accessor for PBMedicationTrackingSchedules);
            goto LABEL_140;
          }
          sub_22D03F258(v108, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v78 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_140:
        sub_22D03F258(v109, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v162 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v162 - 8) + 56))(v216, 1, 1, v162);
        uint64_t v137 = type metadata accessor for PBMedicationTrackingSchedules;
        goto LABEL_144;
      case 0x10u:
        uint64_t v110 = v195;
        sub_22D0432D4(v71, v195, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72((char *)v110, 1, v70) == 1)
        {
          sub_22D043340(v110, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v111 = (uint64_t)v164;
          uint64_t v78 = v211;
        }
        else
        {
          int v130 = swift_getEnumCaseMultiPayload();
          uint64_t v111 = (uint64_t)v164;
          uint64_t v78 = v211;
          if (v130 == 16)
          {
            sub_22D03F2B8(v110, (uint64_t)v211, type metadata accessor for PBActiveMedications);
            goto LABEL_143;
          }
          sub_22D03F258(v110, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        *uint64_t v78 = MEMORY[0x263F8EE78];
        sub_22D2BBFE0();
LABEL_143:
        sub_22D03F258(v111, type metadata accessor for PBTypedData.OneOf_Raw);
        uint64_t v163 = sub_22D2BBC30();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v163 - 8) + 56))(v216, 1, 1, v163);
        uint64_t v137 = type metadata accessor for PBActiveMedications;
LABEL_144:
        unint64_t v161 = v137;
        uint64_t v133 = (uint64_t)v78;
        goto LABEL_145;
      default:
        sub_22D0432D4(v71, (uint64_t)v58, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
        if (v72(v58, 1, v70) == 1)
        {
          sub_22D043340((uint64_t)v58, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
          uint64_t v75 = v196;
        }
        else
        {
          int v112 = swift_getEnumCaseMultiPayload();
          uint64_t v75 = v196;
          if (!v112)
          {
            sub_22D03F2B8((uint64_t)v58, (uint64_t)v196, type metadata accessor for PBTimeSeries);
            goto LABEL_45;
          }
          sub_22D03F258((uint64_t)v58, type metadata accessor for PBTypedData.OneOf_Raw);
        }
        sub_22D2BBFE0();
        uint64_t v113 = *(int *)(v181 + 20);
        if (qword_26853CF38 != -1) {
          swift_once();
        }
        *(uint64_t *)((char *)v75 + v113) = qword_268540090;
        swift_retain();
LABEL_45:
        sub_22D03F320((uint64_t)v75, v216);
        uint64_t v114 = type metadata accessor for PBTimeSeries;
LABEL_135:
        uint64_t v140 = v114;
        uint64_t v141 = (uint64_t)v75;
LABEL_136:
        sub_22D03F258(v141, v140);
        uint64_t v133 = (uint64_t)v164;
LABEL_137:
        unint64_t v161 = type metadata accessor for PBTypedData.OneOf_Raw;
LABEL_145:
        sub_22D03F258(v133, v161);
        return sub_22D03F258((uint64_t)v65, type metadata accessor for PBTypedData.OneOf_Raw);
    }
  }
  sub_22D043340((uint64_t)v60, &qword_26853D9D8, (void (*)(uint64_t))type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v73 = sub_22D2BBC30();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56))(v216, 1, 1, v73);
}

uint64_t sub_22D03F1F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D03F258(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D03F2B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D03F320@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PBTimeSeries.Value(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for PBTimeSeries(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBTimeSeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__values;
  swift_beginAccess();
  uint64_t v9 = *(void *)v8;
  int64_t v10 = *(void *)(*(void *)v8 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = a2;
    uint64_t v22 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22D24B86C(0, v10, 0);
    uint64_t v12 = v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v13 = *(void *)(v5 + 72);
    uint64_t v11 = v22;
    do
    {
      sub_22D03F1F0(v12, (uint64_t)v7, type metadata accessor for PBTimeSeries.Value);
      uint64_t v15 = *((void *)v7 + 3);
      uint64_t v14 = *((void *)v7 + 4);
      swift_bridgeObjectRetain();
      sub_22D03F258((uint64_t)v7, type metadata accessor for PBTimeSeries.Value);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v22;
      }
      unint64_t v17 = *(void *)(v11 + 16);
      unint64_t v16 = *(void *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_22D24B86C(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v22;
      }
      *(void *)(v11 + 16) = v17 + 1;
      uint64_t v18 = v11 + 16 * v17;
      *(void *)(v18 + 32) = v15;
      *(void *)(v18 + 40) = v14;
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a2 = v21;
  }
  sub_22D04029C(v11, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D03F534@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  sub_22D0433F4(0, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v28 - v5;
  uint64_t v7 = type metadata accessor for PBDateRange(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  int64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for PBCategorySeries.Event(0);
  uint64_t v11 = *(void *)(v33 - 8);
  MEMORY[0x270FA5388](v33);
  uint64_t v13 = (char *)v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + *(int *)(type metadata accessor for PBCategorySeries(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBCategorySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__events;
  swift_beginAccess();
  uint64_t v15 = *(void *)v14;
  int64_t v16 = *(void *)(*(void *)v14 + 16);
  uint64_t v17 = MEMORY[0x263F8EE78];
  if (v16)
  {
    uint64_t v29 = a2;
    uint64_t v34 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22D24B86C(0, v16, 0);
    unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v28[1] = v15;
    uint64_t v19 = v15 + v18;
    uint64_t v20 = *(void *)(v11 + 72);
    uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v31 = v20;
    uint64_t v32 = v7;
    do
    {
      sub_22D03F1F0(v19, (uint64_t)v13, type metadata accessor for PBCategorySeries.Event);
      uint64_t v21 = *(void *)&v13[*(int *)(v33 + 20)]
          + OBJC_IVAR____TtCVV19HealthRecordsDaemon16PBCategorySeries5EventP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__recordedTime;
      swift_beginAccess();
      sub_22D0432D4(v21, (uint64_t)v6, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
      if ((*v30)(v6, 1, v7) == 1)
      {
        *(void *)int64_t v10 = 0;
        *((void *)v10 + 1) = 0xE000000000000000;
        *((void *)v10 + 2) = 0;
        *((void *)v10 + 3) = 0xE000000000000000;
        *((void *)v10 + 4) = 0;
        v10[40] = 1;
        sub_22D2BBFE0();
        sub_22D043340((uint64_t)v6, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
      }
      else
      {
        sub_22D03F2B8((uint64_t)v6, (uint64_t)v10, type metadata accessor for PBDateRange);
      }
      uint64_t v22 = *((void *)v10 + 2);
      uint64_t v23 = *((void *)v10 + 3);
      swift_bridgeObjectRetain();
      sub_22D03F258((uint64_t)v10, type metadata accessor for PBDateRange);
      sub_22D03F258((uint64_t)v13, type metadata accessor for PBCategorySeries.Event);
      uint64_t v17 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v34;
      }
      unint64_t v25 = *(void *)(v17 + 16);
      unint64_t v24 = *(void *)(v17 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_22D24B86C(v24 > 1, v25 + 1, 1);
        uint64_t v17 = v34;
      }
      *(void *)(v17 + 16) = v25 + 1;
      uint64_t v26 = v17 + 16 * v25;
      *(void *)(v26 + 32) = v22;
      *(void *)(v26 + 40) = v23;
      uint64_t v7 = v32;
      v19 += v31;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease();
    a2 = v29;
  }
  sub_22D04029C(v17, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D03F948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v21 - v5;
  sub_22D0433F4(0, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = type metadata accessor for PBDateRange(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + *(int *)(type metadata accessor for PBWorkout(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon9PBWorkoutP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D0432D4(v14, (uint64_t)v9, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0xE000000000000000;
    *((void *)v13 + 2) = 0;
    *((void *)v13 + 3) = 0xE000000000000000;
    *((void *)v13 + 4) = 0;
    v13[40] = 1;
    sub_22D2BBFE0();
    sub_22D043340((uint64_t)v9, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D03F2B8((uint64_t)v9, (uint64_t)v13, type metadata accessor for PBDateRange);
  }
  swift_bridgeObjectRetain();
  sub_22D03F258((uint64_t)v13, type metadata accessor for PBDateRange);
  if (qword_26853D3D0 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_268568488;
  int64_t v16 = (void *)sub_22D2BCBA0();
  id v17 = objc_msgSend(v15, sel_dateFromString_, v16);

  if (v17)
  {
    sub_22D2BBC00();

    uint64_t v18 = sub_22D2BBC30();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v6, 0, 1, v18);
  }
  else
  {
    uint64_t v19 = sub_22D2BBC30();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v6, 1, 1, v19);
  }
  sub_22D043228((uint64_t)v6, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D03FCD0@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PBActivitySummarySeries.ActivitySummary(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + *(int *)(type metadata accessor for PBActivitySummarySeries(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon23PBActivitySummarySeriesP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__activitySummaries;
  swift_beginAccess();
  uint64_t v9 = *(void *)v8;
  int64_t v10 = *(void *)(*(void *)v8 + 16);
  uint64_t v11 = MEMORY[0x263F8EE78];
  if (v10)
  {
    uint64_t v21 = a2;
    uint64_t v22 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22D24B86C(0, v10, 0);
    uint64_t v12 = v9 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v13 = *(void *)(v5 + 72);
    uint64_t v11 = v22;
    do
    {
      sub_22D03F1F0(v12, (uint64_t)v7, type metadata accessor for PBActivitySummarySeries.ActivitySummary);
      uint64_t v15 = *((void *)v7 + 3);
      uint64_t v14 = *((void *)v7 + 4);
      swift_bridgeObjectRetain();
      sub_22D03F258((uint64_t)v7, type metadata accessor for PBActivitySummarySeries.ActivitySummary);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v11 + 16) + 1, 1);
        uint64_t v11 = v22;
      }
      unint64_t v17 = *(void *)(v11 + 16);
      unint64_t v16 = *(void *)(v11 + 24);
      if (v17 >= v16 >> 1)
      {
        sub_22D24B86C(v16 > 1, v17 + 1, 1);
        uint64_t v11 = v22;
      }
      *(void *)(v11 + 16) = v17 + 1;
      uint64_t v18 = v11 + 16 * v17;
      *(void *)(v18 + 32) = v15;
      *(void *)(v18 + 40) = v14;
      v12 += v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    a2 = v21;
  }
  sub_22D04029C(v11, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D03FEE4@<X0>(uint64_t *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t (*a3)(void)@<X2>, uint64_t (*a4)(void)@<X3>, char *a5@<X8>)
{
  uint64_t v26 = a4;
  uint64_t v8 = a2(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v24 - v10);
  uint64_t v12 = *a1;
  int64_t v13 = *(void *)(*a1 + 16);
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (v13)
  {
    unint64_t v25 = a5;
    uint64_t v27 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22D24B86C(0, v13, 0);
    uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v24 = v12;
    uint64_t v16 = v12 + ((v15 + 32) & ~v15);
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v14 = v27;
    do
    {
      sub_22D03F1F0(v16, (uint64_t)v11, a3);
      uint64_t v18 = *v11;
      uint64_t v19 = v11[1];
      swift_bridgeObjectRetain();
      sub_22D03F258((uint64_t)v11, v26);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v27;
      }
      unint64_t v21 = *(void *)(v14 + 16);
      unint64_t v20 = *(void *)(v14 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_22D24B86C(v20 > 1, v21 + 1, 1);
        uint64_t v14 = v27;
      }
      *(void *)(v14 + 16) = v21 + 1;
      uint64_t v22 = v14 + 16 * v21;
      *(void *)(v22 + 32) = v18;
      *(void *)(v22 + 40) = v19;
      v16 += v17;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    a5 = v25;
  }
  sub_22D04029C(v14, a5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D0400B8@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PBMedicationTrackingDoseEvent(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *a1;
  int64_t v9 = *(void *)(*a1 + 16);
  uint64_t v10 = MEMORY[0x263F8EE78];
  if (v9)
  {
    uint64_t v19 = a2;
    uint64_t v20 = MEMORY[0x263F8EE78];
    swift_bridgeObjectRetain();
    sub_22D24B86C(0, v9, 0);
    uint64_t v11 = v8 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v12 = *(void *)(v5 + 72);
    uint64_t v10 = v20;
    do
    {
      sub_22D03F1F0(v11, (uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvent);
      uint64_t v14 = *((void *)v7 + 11);
      uint64_t v13 = *((void *)v7 + 12);
      swift_bridgeObjectRetain();
      sub_22D03F258((uint64_t)v7, type metadata accessor for PBMedicationTrackingDoseEvent);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24B86C(0, *(void *)(v10 + 16) + 1, 1);
        uint64_t v10 = v20;
      }
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_22D24B86C(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v20;
      }
      *(void *)(v10 + 16) = v16 + 1;
      uint64_t v17 = v10 + 16 * v16;
      *(void *)(v17 + 32) = v14;
      *(void *)(v17 + 40) = v13;
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    a2 = v19;
  }
  sub_22D04029C(v10, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D04029C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v92 = sub_22D2BBC30();
  uint64_t v3 = *(void *)(v92 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v92);
  uint64_t v83 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v90 = (char *)&v78 - v7;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v87 = (char *)&v78 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v85 = (char *)&v78 - v10;
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  unint64_t v91 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v84 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v78 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  id v89 = (void (*)(char *, uint64_t, uint64_t, uint64_t))((char *)&v78 - v18);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v82 = (char *)&v78 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v78 - v22;
  MEMORY[0x270FA5388](v21);
  unint64_t v25 = (char *)&v78 - v24;
  int64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = MEMORY[0x263F8EE78];
  uint64_t v88 = v3;
  if (v26)
  {
    uint64_t v86 = v16;
    uint64_t v93 = MEMORY[0x263F8EE78];
    sub_22D24B91C(0, v26, 0);
    uint64_t v27 = v93;
    uint64_t v28 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    uint64_t v29 = a1 + 40;
    do
    {
      uint64_t v30 = qword_26853D3D0;
      swift_bridgeObjectRetain();
      if (v30 != -1) {
        swift_once();
      }
      uint64_t v31 = (void *)qword_268568488;
      uint64_t v32 = (void *)sub_22D2BCBA0();
      id v33 = objc_msgSend(v31, sel_dateFromString_, v32);

      if (v33)
      {
        sub_22D2BBC00();

        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v34 = 1;
      }
      (*v28)(v23, v34, 1, v92);
      sub_22D043228((uint64_t)v23, (uint64_t)v25);
      swift_bridgeObjectRelease();
      uint64_t v93 = v27;
      unint64_t v36 = *(void *)(v27 + 16);
      unint64_t v35 = *(void *)(v27 + 24);
      if (v36 >= v35 >> 1)
      {
        sub_22D24B91C(v35 > 1, v36 + 1, 1);
        uint64_t v27 = v93;
      }
      v29 += 16;
      *(void *)(v27 + 16) = v36 + 1;
      sub_22D043228((uint64_t)v25, v27+ ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80))+ *(void *)(v91 + 72) * v36);
      --v26;
    }
    while (v26);
    uint64_t v37 = v92;
    uint64_t v3 = v88;
    uint64_t v38 = v83;
    unint64_t v16 = v86;
    uint64_t v39 = *(void *)(v27 + 16);
    if (v39) {
      goto LABEL_12;
    }
LABEL_24:
    swift_bridgeObjectRelease();
    unint64_t v43 = MEMORY[0x263F8EE78];
    goto LABEL_25;
  }
  uint64_t v37 = v92;
  uint64_t v38 = v83;
  uint64_t v39 = *(void *)(MEMORY[0x263F8EE78] + 16);
  if (!v39) {
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v40 = v27 + ((*(unsigned __int8 *)(v91 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80));
  uint64_t v41 = *(void *)(v91 + 72);
  uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  unint64_t v91 = v3 + 32;
  swift_bridgeObjectRetain();
  unint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v86 = (char *)(v3 + 48);
  do
  {
    uint64_t v44 = v89;
    sub_22D0432D4(v40, (uint64_t)v89, &qword_26AEC0F48, MEMORY[0x263F07490]);
    sub_22D043228((uint64_t)v44, (uint64_t)v16);
    if ((*v42)(v16, 1, v37) == 1)
    {
      sub_22D043340((uint64_t)v16, &qword_26AEC0F48, MEMORY[0x263F07490]);
    }
    else
    {
      uint64_t v45 = *(void (**)(char *))v91;
      uint64_t v46 = v16;
      uint64_t v47 = v87;
      uint64_t v48 = v46;
      (*(void (**)(char *))v91)(v87);
      ((void (*)(char *, char *, uint64_t))v45)(v90, v47, v37);
      if (swift_isUniquelyReferenced_nonNull_native()) {
        unint64_t v49 = v43;
      }
      else {
        unint64_t v49 = sub_22D2812B0(0, *(void *)(v43 + 16) + 1, 1, v43);
      }
      unint64_t v51 = *(void *)(v49 + 16);
      unint64_t v50 = *(void *)(v49 + 24);
      if (v51 >= v50 >> 1) {
        unint64_t v49 = sub_22D2812B0(v50 > 1, v51 + 1, 1, v49);
      }
      *(void *)(v49 + 16) = v51 + 1;
      unint64_t v43 = v49;
      uint64_t v37 = v92;
      ((void (*)(unint64_t, char *, uint64_t))v45)(v49+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(void *)(v88 + 72) * v51, v90, v92);
      unint64_t v16 = v48;
      uint64_t v42 = (unsigned int (**)(char *, uint64_t, uint64_t))v86;
    }
    v40 += v41;
    --v39;
  }
  while (v39);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = v88;
  uint64_t v38 = v83;
LABEL_25:
  uint64_t v52 = (uint64_t)v82;
  uint64_t v90 = *(char **)(v43 + 16);
  unint64_t v91 = v43;
  if (!v90)
  {
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
    v56(v82, 1, 1, v37);
    goto LABEL_29;
  }
  uint64_t v53 = v37;
  uint64_t v54 = v3 + 16;
  char v55 = *(void (**)(char *))(v3 + 16);
  unint64_t v79 = v43 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v55(v82);
  uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
  v56((char *)v52, 0, 1, v53);
  char v58 = (char *)(v3 + 48);
  uint64_t v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v57(v52, 1, v53) == 1)
  {
    uint64_t v37 = v53;
LABEL_29:
    uint64_t v59 = v80;
    sub_22D043340(v52, &qword_26AEC0F48, MEMORY[0x263F07490]);
    v56(v59, 1, 1, v37);
    return swift_bridgeObjectRelease();
  }
  id v89 = v56;
  uint64_t v86 = *(char **)(v3 + 32);
  uint64_t v87 = (char *)(v3 + 32);
  ((void (*)(char *, uint64_t, uint64_t))v86)(v85, v52, v53);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v61 = (uint64_t)v84;
  unint64_t v62 = v79;
  if (v90 == (char *)1)
  {
LABEL_31:
    uint64_t v63 = v92;
    v89((char *)v61, 1, 1, v92);
LABEL_32:
    swift_bridgeObjectRelease();
    sub_22D043340(v61, &qword_26AEC0F48, MEMORY[0x263F07490]);
    uint64_t v64 = v80;
    ((void (*)(char *, char *, uint64_t))v86)(v80, v85, v63);
    v89(v64, 0, 1, v63);
    return swift_bridgeObjectRelease();
  }
  uint64_t v65 = result;
  uint64_t v66 = v55;
  uint64_t v67 = v54;
  uint64_t v68 = v57;
  uint64_t v81 = (void (**)(char *, uint64_t))(v88 + 8);
  uint64_t v82 = (char *)v57;
  unint64_t v69 = 1;
  uint64_t v83 = v58;
  uint64_t v63 = v92;
  while (v69 < *(void *)(v65 + 16))
  {
    unint64_t v70 = v62;
    uint64_t v71 = v66;
    uint64_t v72 = v67;
    ((void (*)(uint64_t, unint64_t, uint64_t))v66)(v61, v62 + *(void *)(v88 + 72) * v69, v63);
    v89((char *)v61, 0, 1, v63);
    if (v68(v61, 1, v63) == 1) {
      goto LABEL_32;
    }
    uint64_t v73 = (uint64_t (*)(char *, char *, uint64_t))v86;
    ((void (*)(char *, uint64_t, uint64_t))v86)(v38, v61, v63);
    uint64_t v74 = v38;
    uint64_t v75 = v85;
    char v76 = sub_22D2BBBD0();
    uint64_t v77 = *v81;
    if (v76)
    {
      v77(v75, v63);
      uint64_t result = v73(v75, v74, v63);
    }
    else
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v77)(v74, v63);
    }
    uint64_t v38 = v74;
    ++v69;
    uint64_t v65 = v91;
    unint64_t v62 = v70;
    uint64_t v66 = v71;
    uint64_t v67 = v72;
    uint64_t v61 = (uint64_t)v84;
    uint64_t v68 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v82;
    if (v90 == (char *)v69) {
      goto LABEL_31;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22D040BB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v211 = a2;
  uint64_t v202 = type metadata accessor for PBHKMedicationRecord(0);
  MEMORY[0x270FA5388](v202);
  uint64_t v208 = (uint64_t)&v175 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v200 = type metadata accessor for PBHKProcedureRecord(0);
  MEMORY[0x270FA5388](v200);
  uint64_t v207 = (uint64_t)&v175 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v175 = type metadata accessor for PBHKAccountOwner(0);
  MEMORY[0x270FA5388](v175);
  uint64_t v199 = (uint64_t *)((char *)&v175 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v198 = type metadata accessor for PBHKDiagnosticTestReport(0);
  MEMORY[0x270FA5388](v198);
  uint64_t v206 = (uint64_t)&v175 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v194 = type metadata accessor for PBHKDiagnosticTestResult(0);
  MEMORY[0x270FA5388](v194);
  uint64_t v205 = (uint64_t)&v175 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = type metadata accessor for PBHKMedicationOrder(0);
  MEMORY[0x270FA5388](v191);
  uint64_t v204 = (uint64_t)&v175 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v187 = type metadata accessor for PBHKMedicationDispenseRecord(0);
  MEMORY[0x270FA5388](v187);
  uint64_t v203 = (uint64_t)&v175 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v209 = type metadata accessor for PBHKVaccinationRecord(0);
  MEMORY[0x270FA5388](v209);
  uint64_t v201 = (uint64_t)&v175 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v184 = type metadata accessor for PBHKConditionRecord(0);
  MEMORY[0x270FA5388](v184);
  uint64_t v210 = (uint64_t)&v175 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v197 = (char *)&v175 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v196 = (char *)&v175 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v195 = (char *)&v175 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v193 = (char *)&v175 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v192 = (char *)&v175 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v190 = (char *)&v175 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v189 = (char *)&v175 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v188 = (char *)&v175 - v28;
  MEMORY[0x270FA5388](v27);
  uint64_t v186 = (char *)&v175 - v29;
  uint64_t v183 = type metadata accessor for PBHKAllergyRecord(0);
  MEMORY[0x270FA5388](v183);
  uint64_t v185 = (uint64_t)&v175 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0433F4(0, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v182 = (uint64_t)&v175 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v181 = (uint64_t)&v175 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v180 = (uint64_t)&v175 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v179 = (uint64_t)&v175 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v178 = (uint64_t)&v175 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v177 = (uint64_t)&v175 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v176 = (uint64_t)&v175 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v175 - v47;
  uint64_t v49 = MEMORY[0x270FA5388](v46);
  unint64_t v51 = (char *)&v175 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49);
  uint64_t v54 = (char *)&v175 - v53;
  MEMORY[0x270FA5388](v52);
  uint64_t v56 = (char *)&v175 - v55;
  uint64_t v57 = type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord(0);
  uint64_t v58 = *(void *)(v57 - 8);
  uint64_t v59 = MEMORY[0x270FA5388](v57);
  uint64_t v61 = (char *)&v175 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v59);
  uint64_t v63 = (char *)&v175 - v62;
  uint64_t v64 = *(void *)(a1 + *(int *)(type metadata accessor for PBClinicalRecord(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecord;
  swift_beginAccess();
  sub_22D0432D4(v64, (uint64_t)v56, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  uint64_t v65 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48);
  if (v65(v56, 1, v57) != 1)
  {
    sub_22D03F2B8((uint64_t)v56, (uint64_t)v63, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
    uint64_t v68 = (uint64_t)v63;
    sub_22D03F1F0((uint64_t)v63, (uint64_t)v61, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
    uint64_t v69 = (uint64_t)v61;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        sub_22D0432D4(v64, (uint64_t)v51, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65(v51, 1, v57) == 1)
        {
          sub_22D043340((uint64_t)v51, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v72 = v184;
        }
        else
        {
          int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
          uint64_t v72 = v184;
          if (EnumCaseMultiPayload == 1)
          {
            uint64_t v97 = (uint64_t)v51;
            uint64_t v70 = v210;
            sub_22D03F2B8(v97, v210, type metadata accessor for PBHKConditionRecord);
LABEL_57:
            swift_beginAccess();
            uint64_t v109 = qword_26853D3D0;
            swift_bridgeObjectRetain();
            if (v109 != -1) {
              swift_once();
            }
            uint64_t v110 = (void *)qword_268568488;
            uint64_t v111 = (void *)sub_22D2BCBA0();
            id v112 = objc_msgSend(v110, sel_dateFromString_, v111);

            if (v112)
            {
              uint64_t v113 = (uint64_t)v188;
              sub_22D2BBC00();

              uint64_t v114 = sub_22D2BBC30();
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v114 - 8) + 56))(v113, 0, 1, v114);
            }
            else
            {
              uint64_t v115 = sub_22D2BBC30();
              uint64_t v113 = (uint64_t)v188;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v115 - 8) + 56))(v188, 1, 1, v115);
            }
            sub_22D043228(v113, v211);
            swift_bridgeObjectRelease();
            uint64_t v107 = type metadata accessor for PBHKConditionRecord;
            goto LABEL_136;
          }
          sub_22D03F258((uint64_t)v51, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        uint64_t v70 = v210;
        sub_22D2BBFE0();
        uint64_t v108 = *(int *)(v72 + 20);
        if (qword_26853D050 != -1) {
          swift_once();
        }
        *(void *)(v70 + v108) = qword_268540328;
        swift_retain();
        goto LABEL_57;
      case 2u:
        sub_22D0432D4(v64, (uint64_t)v48, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65(v48, 1, v57) == 1)
        {
          sub_22D043340((uint64_t)v48, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v201;
        }
        else
        {
          int v98 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v201;
          if (v98 == 2)
          {
            sub_22D03F2B8((uint64_t)v48, v201, type metadata accessor for PBHKVaccinationRecord);
            goto LABEL_67;
          }
          sub_22D03F258((uint64_t)v48, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v116 = *(int *)(v209 + 20);
        if (qword_26853D060 != -1) {
          swift_once();
        }
        *(void *)(v70 + v116) = qword_268540348;
        swift_retain();
LABEL_67:
        swift_beginAccess();
        uint64_t v117 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v117 != -1) {
          swift_once();
        }
        int v118 = (void *)qword_268568488;
        uint64_t v119 = (void *)sub_22D2BCBA0();
        id v120 = objc_msgSend(v118, sel_dateFromString_, v119);

        if (v120)
        {
          uint64_t v121 = (uint64_t)v189;
          sub_22D2BBC00();

          uint64_t v122 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v122 - 8) + 56))(v121, 0, 1, v122);
        }
        else
        {
          uint64_t v123 = sub_22D2BBC30();
          uint64_t v121 = (uint64_t)v189;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56))(v189, 1, 1, v123);
        }
        sub_22D043228(v121, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKVaccinationRecord;
        goto LABEL_136;
      case 3u:
        uint64_t v73 = v176;
        sub_22D0432D4(v64, v176, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v73, 1, v57) == 1)
        {
          sub_22D043340(v73, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v203;
          uint64_t v74 = v187;
        }
        else
        {
          int v99 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v203;
          uint64_t v74 = v187;
          if (v99 == 3)
          {
            sub_22D03F2B8(v73, v203, type metadata accessor for PBHKMedicationDispenseRecord);
            goto LABEL_77;
          }
          sub_22D03F258(v73, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v124 = *(int *)(v74 + 20);
        if (qword_26853D0B0 != -1) {
          swift_once();
        }
        *(void *)(v70 + v124) = qword_2685403F8;
        swift_retain();
LABEL_77:
        swift_beginAccess();
        uint64_t v125 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v125 != -1) {
          swift_once();
        }
        int v126 = (void *)qword_268568488;
        int v127 = (void *)sub_22D2BCBA0();
        id v128 = objc_msgSend(v126, sel_dateFromString_, v127);

        if (v128)
        {
          uint64_t v129 = (uint64_t)v190;
          sub_22D2BBC00();

          uint64_t v130 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v130 - 8) + 56))(v129, 0, 1, v130);
        }
        else
        {
          uint64_t v131 = sub_22D2BBC30();
          uint64_t v129 = (uint64_t)v190;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v131 - 8) + 56))(v190, 1, 1, v131);
        }
        sub_22D043228(v129, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKMedicationDispenseRecord;
        goto LABEL_136;
      case 4u:
        uint64_t v75 = v177;
        sub_22D0432D4(v64, v177, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v75, 1, v57) == 1)
        {
          sub_22D043340(v75, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v204;
          uint64_t v76 = v191;
        }
        else
        {
          int v100 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v204;
          uint64_t v76 = v191;
          if (v100 == 4)
          {
            sub_22D03F2B8(v75, v204, type metadata accessor for PBHKMedicationOrder);
            goto LABEL_87;
          }
          sub_22D03F258(v75, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v132 = *(int *)(v76 + 20);
        if (qword_26853D0C0 != -1) {
          swift_once();
        }
        *(void *)(v70 + v132) = qword_268540418;
        swift_retain();
LABEL_87:
        swift_beginAccess();
        uint64_t v133 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v133 != -1) {
          swift_once();
        }
        uint64_t v134 = (void *)qword_268568488;
        uint64_t v135 = (void *)sub_22D2BCBA0();
        id v136 = objc_msgSend(v134, sel_dateFromString_, v135);

        if (v136)
        {
          uint64_t v137 = (uint64_t)v192;
          sub_22D2BBC00();

          uint64_t v138 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v138 - 8) + 56))(v137, 0, 1, v138);
        }
        else
        {
          uint64_t v139 = sub_22D2BBC30();
          uint64_t v137 = (uint64_t)v192;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v192, 1, 1, v139);
        }
        sub_22D043228(v137, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKMedicationOrder;
        goto LABEL_136;
      case 5u:
        uint64_t v77 = v178;
        sub_22D0432D4(v64, v178, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v77, 1, v57) == 1)
        {
          sub_22D043340(v77, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v205;
          uint64_t v78 = v194;
        }
        else
        {
          int v101 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v205;
          uint64_t v78 = v194;
          if (v101 == 5)
          {
            sub_22D03F2B8(v77, v205, type metadata accessor for PBHKDiagnosticTestResult);
            goto LABEL_97;
          }
          sub_22D03F258(v77, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v140 = *(int *)(v78 + 20);
        if (qword_26853D0D0 != -1) {
          swift_once();
        }
        *(void *)(v70 + v140) = qword_268540438;
        swift_retain();
LABEL_97:
        swift_beginAccess();
        uint64_t v141 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v141 != -1) {
          swift_once();
        }
        uint64_t v142 = (void *)qword_268568488;
        uint64_t v143 = (void *)sub_22D2BCBA0();
        id v144 = objc_msgSend(v142, sel_dateFromString_, v143);

        if (v144)
        {
          uint64_t v145 = (uint64_t)v193;
          sub_22D2BBC00();

          uint64_t v146 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v146 - 8) + 56))(v145, 0, 1, v146);
        }
        else
        {
          uint64_t v147 = sub_22D2BBC30();
          uint64_t v145 = (uint64_t)v193;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v147 - 8) + 56))(v193, 1, 1, v147);
        }
        sub_22D043228(v145, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKDiagnosticTestResult;
        goto LABEL_136;
      case 6u:
        uint64_t v79 = v179;
        sub_22D0432D4(v64, v179, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v79, 1, v57) == 1)
        {
          sub_22D043340(v79, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v206;
          uint64_t v80 = v198;
        }
        else
        {
          int v102 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v206;
          uint64_t v80 = v198;
          if (v102 == 6)
          {
            sub_22D03F2B8(v79, v206, type metadata accessor for PBHKDiagnosticTestReport);
            goto LABEL_107;
          }
          sub_22D03F258(v79, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v148 = *(int *)(v80 + 20);
        if (qword_26853D130 != -1) {
          swift_once();
        }
        *(void *)(v70 + v148) = qword_268540508;
        swift_retain();
LABEL_107:
        swift_beginAccess();
        uint64_t v149 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v149 != -1) {
          swift_once();
        }
        uint64_t v150 = (void *)qword_268568488;
        uint64_t v151 = (void *)sub_22D2BCBA0();
        id v152 = objc_msgSend(v150, sel_dateFromString_, v151);

        if (v152)
        {
          uint64_t v153 = (uint64_t)v195;
          sub_22D2BBC00();

          uint64_t v154 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v154 - 8) + 56))(v153, 0, 1, v154);
        }
        else
        {
          uint64_t v155 = sub_22D2BBC30();
          uint64_t v153 = (uint64_t)v195;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v155 - 8) + 56))(v195, 1, 1, v155);
        }
        sub_22D043228(v153, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKDiagnosticTestReport;
        goto LABEL_136;
      case 7u:
        uint64_t v81 = v180;
        sub_22D0432D4(v64, v180, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v81, 1, v57) == 1)
        {
          sub_22D043340(v81, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v82 = v211;
          uint64_t v83 = v199;
        }
        else
        {
          int v103 = swift_getEnumCaseMultiPayload();
          uint64_t v82 = v211;
          uint64_t v83 = v199;
          if (v103 == 7)
          {
            sub_22D03F2B8(v81, (uint64_t)v199, type metadata accessor for PBHKAccountOwner);
            goto LABEL_115;
          }
          sub_22D03F258(v81, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        *uint64_t v83 = 0;
        v83[1] = 0xE000000000000000;
        v83[2] = 0;
        v83[3] = 0xE000000000000000;
        sub_22D2BBFE0();
LABEL_115:
        sub_22D03F258(v68, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        uint64_t v156 = sub_22D2BBC30();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v156 - 8) + 56))(v82, 1, 1, v156);
        uint64_t v157 = type metadata accessor for PBHKAccountOwner;
        uint64_t v158 = (uint64_t)v83;
        goto LABEL_137;
      case 8u:
        uint64_t v84 = v181;
        sub_22D0432D4(v64, v181, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v84, 1, v57) == 1)
        {
          sub_22D043340(v84, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v207;
          uint64_t v85 = v200;
        }
        else
        {
          int v104 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v207;
          uint64_t v85 = v200;
          if (v104 == 8)
          {
            sub_22D03F2B8(v84, v207, type metadata accessor for PBHKProcedureRecord);
            goto LABEL_120;
          }
          sub_22D03F258(v84, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v159 = *(int *)(v85 + 20);
        if (qword_26853D148 != -1) {
          swift_once();
        }
        *(void *)(v70 + v159) = qword_268540540;
        swift_retain();
LABEL_120:
        swift_beginAccess();
        uint64_t v160 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v160 != -1) {
          swift_once();
        }
        unint64_t v161 = (void *)qword_268568488;
        uint64_t v162 = (void *)sub_22D2BCBA0();
        id v163 = objc_msgSend(v161, sel_dateFromString_, v162);

        if (v163)
        {
          uint64_t v164 = (uint64_t)v196;
          sub_22D2BBC00();

          uint64_t v165 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 0, 1, v165);
        }
        else
        {
          uint64_t v166 = sub_22D2BBC30();
          uint64_t v164 = (uint64_t)v196;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v166 - 8) + 56))(v196, 1, 1, v166);
        }
        sub_22D043228(v164, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKProcedureRecord;
        goto LABEL_136;
      case 9u:
        uint64_t v86 = v182;
        sub_22D0432D4(v64, v182, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65((char *)v86, 1, v57) == 1)
        {
          sub_22D043340(v86, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v208;
          uint64_t v87 = v202;
        }
        else
        {
          int v105 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v208;
          uint64_t v87 = v202;
          if (v105 == 9)
          {
            sub_22D03F2B8(v86, v208, type metadata accessor for PBHKMedicationRecord);
            goto LABEL_130;
          }
          sub_22D03F258(v86, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v167 = *(int *)(v87 + 20);
        if (qword_26853D098 != -1) {
          swift_once();
        }
        *(void *)(v70 + v167) = qword_2685403C0;
        swift_retain();
LABEL_130:
        swift_beginAccess();
        uint64_t v168 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v168 != -1) {
          swift_once();
        }
        uint64_t v169 = (void *)qword_268568488;
        uint64_t v170 = (void *)sub_22D2BCBA0();
        id v171 = objc_msgSend(v169, sel_dateFromString_, v170);

        if (v171)
        {
          uint64_t v172 = (uint64_t)v197;
          sub_22D2BBC00();

          uint64_t v173 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v173 - 8) + 56))(v172, 0, 1, v173);
        }
        else
        {
          uint64_t v174 = sub_22D2BBC30();
          uint64_t v172 = (uint64_t)v197;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v174 - 8) + 56))(v197, 1, 1, v174);
        }
        sub_22D043228(v172, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKMedicationRecord;
        goto LABEL_136;
      default:
        sub_22D0432D4(v64, (uint64_t)v54, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        if (v65(v54, 1, v57) == 1)
        {
          sub_22D043340((uint64_t)v54, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
          uint64_t v70 = v185;
          uint64_t v71 = v183;
        }
        else
        {
          int v88 = swift_getEnumCaseMultiPayload();
          uint64_t v70 = v185;
          uint64_t v71 = v183;
          if (!v88)
          {
            sub_22D03F2B8((uint64_t)v54, v185, type metadata accessor for PBHKAllergyRecord);
            goto LABEL_29;
          }
          sub_22D03F258((uint64_t)v54, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
        }
        sub_22D2BBFE0();
        uint64_t v89 = *(int *)(v71 + 20);
        if (qword_26853D030 != -1) {
          swift_once();
        }
        *(void *)(v70 + v89) = qword_2685402E8;
        swift_retain();
LABEL_29:
        swift_beginAccess();
        uint64_t v90 = qword_26853D3D0;
        swift_bridgeObjectRetain();
        if (v90 != -1) {
          swift_once();
        }
        unint64_t v91 = (void *)qword_268568488;
        uint64_t v92 = (void *)sub_22D2BCBA0();
        id v93 = objc_msgSend(v91, sel_dateFromString_, v92);

        if (v93)
        {
          uint64_t v94 = (uint64_t)v186;
          sub_22D2BBC00();

          uint64_t v95 = sub_22D2BBC30();
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v95 - 8) + 56))(v94, 0, 1, v95);
        }
        else
        {
          uint64_t v106 = sub_22D2BBC30();
          uint64_t v94 = (uint64_t)v186;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56))(v186, 1, 1, v106);
        }
        sub_22D043228(v94, v211);
        swift_bridgeObjectRelease();
        uint64_t v107 = type metadata accessor for PBHKAllergyRecord;
LABEL_136:
        sub_22D03F258(v70, v107);
        uint64_t v158 = v68;
        uint64_t v157 = type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord;
LABEL_137:
        sub_22D03F258(v158, v157);
        return sub_22D03F258(v69, type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
    }
  }
  sub_22D043340((uint64_t)v56, &qword_26853E1E0, (void (*)(uint64_t))type metadata accessor for PBClinicalRecord.OneOf_MedicalRecord);
  uint64_t v66 = sub_22D2BBC30();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v211, 1, 1, v66);
}

uint64_t sub_22D042D40@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v10 = sub_22D2BBC30();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v19(v9, 1, 1, v10);
    goto LABEL_5;
  }
  unint64_t v18 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  uint64_t v37 = v11 + 16;
  v36(v9, a1 + v18, v10);
  uint64_t v31 = a1;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v38(v9, 0, 1, v10);
  uint64_t v34 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v35 = v11 + 48;
  if (v34(v9, 1, v10) == 1)
  {
    uint64_t v19 = v38;
LABEL_5:
    sub_22D043340((uint64_t)v9, &qword_26AEC0F48, MEMORY[0x263F07490]);
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v19)(a2, 1, 1, v10);
  }
  uint64_t v30 = a2;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v33(v16, v9, v10);
  swift_bridgeObjectRetain();
  uint64_t v21 = v17 - 1;
  if (v21)
  {
    uint64_t v23 = *(void *)(v11 + 72);
    uint64_t v24 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v32 = v23;
    unint64_t v25 = v31 + v23 + v18;
    uint64_t v26 = v33;
    while (1)
    {
      v36(v7, v25, v10);
      v38(v7, 0, 1, v10);
      if (v34(v7, 1, v10) == 1) {
        break;
      }
      v26(v14, v7, v10);
      sub_22D04339C();
      char v27 = sub_22D2BCB70();
      uint64_t v28 = *v24;
      if (v27)
      {
        v28(v16, v10);
        v26(v16, v14, v10);
      }
      else
      {
        v28(v14, v10);
      }
      v25 += v32;
      if (!--v21) {
        goto LABEL_7;
      }
    }
  }
  else
  {
LABEL_7:
    v38(v7, 1, 1, v10);
  }
  swift_bridgeObjectRelease();
  sub_22D043340((uint64_t)v7, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v22 = v30;
  v33(v30, v16, v10);
  return ((uint64_t (*)(char *, void, uint64_t, uint64_t))v38)(v22, 0, 1, v10);
}

int64_t sub_22D043174(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  int64_t v2 = *(void *)(a1 + 32);
  unint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    if (v1 >= 5)
    {
      unint64_t v4 = v3 & 0xFFFFFFFFFFFFFFFCLL | 1;
      int64x2_t v5 = vdupq_n_s64(v2);
      uint64_t v6 = (int64x2_t *)(a1 + 56);
      unint64_t v7 = v3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v8 = v5;
      do
      {
        int64x2_t v5 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v5, v6[-1]), (int8x16_t)v5, (int8x16_t)v6[-1]);
        int64x2_t v8 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_s64(v8, *v6), (int8x16_t)v8, *(int8x16_t *)v6);
        v6 += 2;
        v7 -= 4;
      }
      while (v7);
      int8x16_t v9 = vbslq_s8((int8x16_t)vcgtq_s64(v5, v8), (int8x16_t)v5, (int8x16_t)v8);
      uint64_t v10 = vextq_s8(v9, v9, 8uLL).u64[0];
      int64_t v2 = (int64_t)vbsl_s8((int8x8_t)vcgtd_s64(v9.i64[0], v10), *(int8x8_t *)v9.i8, (int8x8_t)v10);
      if (v3 == (v3 & 0xFFFFFFFFFFFFFFFCLL)) {
        return v2;
      }
    }
    else
    {
      unint64_t v4 = 1;
    }
    unint64_t v11 = v1 - v4;
    uint64_t v12 = (int64_t *)(a1 + 8 * v4 + 32);
    do
    {
      int64_t v14 = *v12++;
      int64_t v13 = v14;
      if (v2 <= v14) {
        int64_t v2 = v13;
      }
      --v11;
    }
    while (v11);
  }
  return v2;
}

uint64_t sub_22D043228(uint64_t a1, uint64_t a2)
{
  sub_22D0433F4(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D0432A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D040BB8(a1, a2);
}

uint64_t sub_22D0432D4(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_22D0433F4(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D043340(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_22D0433F4(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

unint64_t sub_22D04339C()
{
  unint64_t result = qword_26853E1D8;
  if (!qword_26853E1D8)
  {
    sub_22D2BBC30();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E1D8);
  }
  return result;
}

void sub_22D0433F4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_22D04344C()
{
  unint64_t result = qword_26853E1E8;
  if (!qword_26853E1E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E1E8);
  }
  return result;
}

uint64_t sub_22D0434A0(long long *a1, long long *a2)
{
  sub_22D0437D4(a1, (uint64_t)v4);
  sub_22D0437D4(a2, (uint64_t)v5);
  return sub_22D043ADC(v4, v5) & 1;
}

unint64_t sub_22D0434EC()
{
  sub_22D0437D4(v0, (uint64_t)v5);
  switch(v6)
  {
    case 1:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD000000000000027;
      goto LABEL_6;
    case 2:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD00000000000002DLL;
      goto LABEL_6;
    case 3:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v2 = 0xD000000000000029;
LABEL_6:
      unint64_t v4 = v2;
      sub_22D2BD630();
      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      return v4;
    case 4:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v4 = 0xD000000000000016;
      sub_22D2BCCB0();
      sub_22D2BCCB0();
      goto LABEL_10;
    case 5:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000018;
      goto LABEL_9;
    case 6:
      if (v5[3] | v5[2] | v5[1] | v5[0]) {
        return 0xD00000000000001FLL;
      }
      else {
        return 0xD000000000000023;
      }
    default:
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD00000000000001ALL;
LABEL_9:
      unint64_t v4 = v1;
LABEL_10:
      sub_22D2BCCB0();
      return v4;
  }
}

unint64_t sub_22D043790()
{
  sub_22D0437D4(v0, (uint64_t)v2);
  return sub_22D0434EC();
}

uint64_t sub_22D0437D4(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(unsigned char *)(a2 + 32) = *((unsigned char *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_22D0437EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 && a5 != 5)
  {
    if (a5 != 4) {
      return result;
    }
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ClinicalSharingCloudSyncError(uint64_t a1)
{
  return sub_22D043868(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t sub_22D043868(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5 && a5 != 5)
  {
    if (a5 != 4) {
      return result;
    }
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_22D0437EC(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_22D0437EC(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_22D043868(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ClinicalSharingCloudSyncError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_22D043868(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingCloudSyncError(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 6) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingCloudSyncError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 250;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFA) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_22D043A98(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 5u) {
    return *(unsigned __int8 *)(a1 + 32);
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_22D043AB0(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(void *)__n128 result = a2 - 6;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 6;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
  }
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingCloudSyncError()
{
  return &type metadata for ClinicalSharingCloudSyncError;
}

uint64_t sub_22D043ADC(long long *a1, long long *a2)
{
  sub_22D0437D4(a1, (uint64_t)&v22);
  uint64_t v3 = v22;
  switch(v26)
  {
    case 1:
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 == 1) {
        goto LABEL_9;
      }
      goto LABEL_39;
    case 2:
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 != 2) {
        goto LABEL_39;
      }
      goto LABEL_9;
    case 3:
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 != 3) {
        goto LABEL_39;
      }
LABEL_9:
      char v5 = v3 == v19.i64[0];
      return v5 & 1;
    case 4:
      uint64_t v7 = v23;
      uint64_t v6 = v24;
      uint64_t v8 = v25;
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 != 4) {
        goto LABEL_39;
      }
      int8x16_t v9 = v20;
      if (v3 != v19.i64[0] || v7 != v19.i64[1])
      {
        char v11 = sub_22D2BD660();
        char v5 = 0;
        if ((v11 & 1) == 0) {
          return v5 & 1;
        }
      }
      if (v6 != v9.i64[0] || v8 != v9.i64[1]) {
        goto LABEL_26;
      }
      goto LABEL_34;
    case 5:
      uint64_t v4 = v23;
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 == 5) {
        goto LABEL_22;
      }
      goto LABEL_39;
    case 6:
      if (!(v24 | v25 | v22 | v23))
      {
        sub_22D0437D4(a2, (uint64_t)&v19);
        int8x16_t v15 = vorrq_s8(v19, v20);
        int8x8_t v16 = vorr_s8(*(int8x8_t *)v15.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL));
        if (v21 != 6 || *(void *)&v16 != 0) {
          goto LABEL_39;
        }
LABEL_34:
        char v5 = 1;
        return v5 & 1;
      }
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21 == 6 && v19.i64[0] == 1 && (v20.i64[0] | v20.i64[1] | v19.i64[1]) == 0) {
        goto LABEL_34;
      }
LABEL_39:
      char v5 = 0;
      return v5 & 1;
    default:
      uint64_t v4 = v23;
      sub_22D0437D4(a2, (uint64_t)&v19);
      if (v21) {
        goto LABEL_39;
      }
LABEL_22:
      if (v3 == v19.i64[0] && v4 == v19.i64[1]) {
        goto LABEL_34;
      }
LABEL_26:
      char v5 = sub_22D2BD660();
      return v5 & 1;
  }
}

uint64_t PBTestFlowData.testGatewayID.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBTestFlowData.testGatewayID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *long long v2 = a1;
  v2[1] = a2;
  return result;
}

uint64_t (*PBTestFlowData.testGatewayID.modify())()
{
  return nullsub_1;
}

uint64_t PBTestFlowData.testMcVersion.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBTestFlowData.testMcVersion.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return result;
}

uint64_t (*PBTestFlowData.testMcVersion.modify())()
{
  return nullsub_1;
}

uint64_t PBTestFlowData.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PBTestFlowData(0) + 24);
  uint64_t v4 = sub_22D2BBFF0();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for PBTestFlowData(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E278);
}

uint64_t PBTestFlowData.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PBTestFlowData(0) + 24);
  uint64_t v4 = sub_22D2BBFF0();
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*PBTestFlowData.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBTestFlowData.init()@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  type metadata accessor for PBTestFlowData(0);
  return sub_22D2BBFE0();
}

uint64_t PBLookupInfo.dlid.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t type metadata accessor for PBLookupInfo(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E288);
}

uint64_t sub_22D044034@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 24);
  *a2 = *(void *)(v3 + 16);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D044090(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = v4;
  *(void *)(v7 + 24) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.dlid.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for PBLookupInfo._StorageClass(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E298);
}

void (*PBLookupInfo.dlid.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 24);
  v3[9] = *(void *)(v5 + 16);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D0442B4;
}

void sub_22D0442B4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 16) = v3;
    *(void *)(v8 + 24) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 16) = v3;
    *(void *)(v12 + 24) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.key.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 32);
  sub_22CFF9B64(v2, *(void *)(v1 + 40));
  return v2;
}

uint64_t sub_22D044484@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 32);
  unint64_t v5 = *(void *)(v3 + 40);
  *a2 = v4;
  a2[1] = v5;
  return sub_22CFF9B64(v4, v5);
}

uint64_t sub_22D0444E0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  sub_22CFF9B64(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v7 + 40);
  *(void *)(v7 + 32) = v3;
  *(void *)(v7 + 40) = v4;
  return sub_22CFF5630(v8, v9);
}

uint64_t PBLookupInfo.key.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 32);
  unint64_t v9 = *(void *)(v7 + 40);
  *(void *)(v7 + 32) = a1;
  *(void *)(v7 + 40) = a2;
  return sub_22CFF5630(v8, v9);
}

void (*PBLookupInfo.key.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 32);
  unint64_t v7 = *(void *)(v5 + 40);
  v3[9] = v6;
  v3[10] = v7;
  sub_22CFF9B64(v6, v7);
  return sub_22D0446E4;
}

void sub_22D0446E4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    sub_22CFF9B64(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 32);
    unint64_t v10 = *(void *)(v8 + 40);
    *(void *)(v8 + 32) = v3;
    *(void *)(v8 + 40) = v4;
    sub_22CFF5630(v9, v10);
    uint64_t v11 = *(void *)(v2 + 72);
    unint64_t v12 = *(void *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = *(int *)(v2 + 96);
      uint64_t v14 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v15 = swift_retain();
      *(void *)(v14 + v13) = sub_22D047BCC(v15);
      swift_release();
    }
    uint64_t v16 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v11 = *(void *)(v16 + 32);
    unint64_t v12 = *(void *)(v16 + 40);
    *(void *)(v16 + 32) = v3;
    *(void *)(v16 + 40) = v4;
  }
  sub_22CFF5630(v11, v12);
  free((void *)v2);
}

uint64_t PBLookupInfo.vkHr.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 48);
  sub_22CFF9B64(v2, *(void *)(v1 + 56));
  return v2;
}

uint64_t sub_22D0448B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 48);
  unint64_t v5 = *(void *)(v3 + 56);
  *a2 = v4;
  a2[1] = v5;
  return sub_22CFF9B64(v4, v5);
}

uint64_t sub_22D044914(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  sub_22CFF9B64(v3, v4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 48);
  unint64_t v9 = *(void *)(v7 + 56);
  *(void *)(v7 + 48) = v3;
  *(void *)(v7 + 56) = v4;
  return sub_22CFF5630(v8, v9);
}

uint64_t PBLookupInfo.vkHr.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 48);
  unint64_t v9 = *(void *)(v7 + 56);
  *(void *)(v7 + 48) = a1;
  *(void *)(v7 + 56) = a2;
  return sub_22CFF5630(v8, v9);
}

void (*PBLookupInfo.vkHr.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 48);
  unint64_t v7 = *(void *)(v5 + 56);
  v3[9] = v6;
  v3[10] = v7;
  sub_22CFF9B64(v6, v7);
  return sub_22D044B18;
}

void sub_22D044B18(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  unint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    sub_22CFF9B64(*(void *)(*a1 + 72), v4);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v9 = *(void *)(v8 + 48);
    unint64_t v10 = *(void *)(v8 + 56);
    *(void *)(v8 + 48) = v3;
    *(void *)(v8 + 56) = v4;
    sub_22CFF5630(v9, v10);
    uint64_t v11 = *(void *)(v2 + 72);
    unint64_t v12 = *(void *)(v2 + 80);
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v13 = *(int *)(v2 + 96);
      uint64_t v14 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v15 = swift_retain();
      *(void *)(v14 + v13) = sub_22D047BCC(v15);
      swift_release();
    }
    uint64_t v16 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    uint64_t v11 = *(void *)(v16 + 48);
    unint64_t v12 = *(void *)(v16 + 56);
    *(void *)(v16 + 48) = v3;
    *(void *)(v16 + 56) = v4;
  }
  sub_22CFF5630(v11, v12);
  free((void *)v2);
}

uint64_t PBLookupInfo.lastSyncTime.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 64);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D044CE8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 72);
  *a2 = *(void *)(v3 + 64);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D044D44(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 64) = v4;
  *(void *)(v7 + 72) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.lastSyncTime.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 64) = a1;
  *(void *)(v7 + 72) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.lastSyncTime.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 72);
  v3[9] = *(void *)(v5 + 64);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D044F48;
}

void sub_22D044F48(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 64) = v3;
    *(void *)(v8 + 72) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 64) = v3;
    *(void *)(v12 + 72) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.deviceID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 80);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D045114@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 88);
  *a2 = *(void *)(v3 + 80);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D045170(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 80) = v4;
  *(void *)(v7 + 88) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.deviceID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 80) = a1;
  *(void *)(v7 + 88) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.deviceID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 88);
  v3[9] = *(void *)(v5 + 80);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D045374;
}

void sub_22D045374(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 80) = v3;
    *(void *)(v8 + 88) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 80) = v3;
    *(void *)(v12 + 88) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.deviceName.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 96);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D045540@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 104);
  *a2 = *(void *)(v3 + 96);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D04559C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 96) = v4;
  *(void *)(v7 + 104) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.deviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 96) = a1;
  *(void *)(v7 + 104) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.deviceName.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 104);
  v3[9] = *(void *)(v5 + 96);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D0457A0;
}

void sub_22D0457A0(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 96) = v3;
    *(void *)(v8 + 104) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 96) = v3;
    *(void *)(v12 + 104) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.timesShared.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  return *(unsigned int *)(v1 + 112);
}

uint64_t sub_22D04595C(int *a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(a2 + v4) = sub_22D047BCC(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(a2 + v4);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v6 + 112) = v3;
  return result;
}

uint64_t PBLookupInfo.timesShared.setter(int a1)
{
  uint64_t v3 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v4 = swift_retain();
    *(void *)(v1 + v3) = sub_22D047BCC(v4);
    swift_release();
  }
  uint64_t v5 = *(void *)(v1 + v3);
  uint64_t result = swift_beginAccess();
  *(_DWORD *)(v5 + 112) = a1;
  return result;
}

void (*PBLookupInfo.timesShared.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x58uLL);
  *a1 = v3;
  v3[9] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 21) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  *((_DWORD *)v3 + 20) = *(_DWORD *)(v5 + 112);
  return sub_22D045B3C;
}

void sub_22D045B3C(uint64_t *a1, char a2)
{
  uint64_t v3 = *a1;
  int v4 = *(_DWORD *)(*a1 + 80);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a2)
  {
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
LABEL_3:
    uint64_t v6 = *(int *)(v3 + 84);
    uint64_t v7 = *(void *)(v3 + 72);
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v8 = swift_retain();
    *(void *)(v7 + v6) = sub_22D047BCC(v8);
    swift_release();
  }
LABEL_4:
  uint64_t v9 = (_DWORD *)(*(void *)(*(void *)(v3 + 72) + *(int *)(v3 + 84)) + 112);
  swift_beginAccess();
  _DWORD *v9 = v4;
  free((void *)v3);
}

uint64_t PBLookupInfo.expiresAt.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 120);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D045C84@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 128);
  *a2 = *(void *)(v3 + 120);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D045CE0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 120) = v4;
  *(void *)(v7 + 128) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.expiresAt.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 120) = a1;
  *(void *)(v7 + 128) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.expiresAt.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 128);
  v3[9] = *(void *)(v5 + 120);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D045EE4;
}

void sub_22D045EE4(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 120) = v3;
    *(void *)(v8 + 128) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 120) = v3;
    *(void *)(v12 + 128) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.healthInstituteID.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_22D0460B0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  swift_beginAccess();
  uint64_t v4 = *(void *)(v3 + 144);
  *a2 = *(void *)(v3 + 136);
  a2[1] = v4;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D04610C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(a2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(a2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 136) = v4;
  *(void *)(v7 + 144) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t PBLookupInfo.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v6 = swift_retain();
    *(void *)(v2 + v5) = sub_22D047BCC(v6);
    swift_release();
  }
  uint64_t v7 = *(void *)(v2 + v5);
  swift_beginAccess();
  *(void *)(v7 + 136) = a1;
  *(void *)(v7 + 144) = a2;
  return swift_bridgeObjectRelease();
}

void (*PBLookupInfo.healthInstituteID.modify(void *a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = malloc(0x68uLL);
  *a1 = v3;
  v3[11] = v1;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  *((_DWORD *)v3 + 24) = v4;
  uint64_t v5 = *(void *)(v1 + v4);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 144);
  v3[9] = *(void *)(v5 + 136);
  v3[10] = v6;
  swift_bridgeObjectRetain();
  return sub_22D046310;
}

void sub_22D046310(uint64_t *a1, char a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + 72);
  uint64_t v4 = *(void *)(*a1 + 80);
  if (a2)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v5 = *(int *)(v2 + 96);
      uint64_t v6 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v7 = swift_retain();
      *(void *)(v6 + v5) = sub_22D047BCC(v7);
      swift_release();
    }
    uint64_t v8 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v8 + 136) = v3;
    *(void *)(v8 + 144) = v4;
    swift_bridgeObjectRelease();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v9 = *(int *)(v2 + 96);
      uint64_t v10 = *(void *)(v2 + 88);
      type metadata accessor for PBLookupInfo._StorageClass(0);
      swift_allocObject();
      uint64_t v11 = swift_retain();
      *(void *)(v10 + v9) = sub_22D047BCC(v11);
      swift_release();
    }
    uint64_t v12 = *(void *)(*(void *)(v2 + 88) + *(int *)(v2 + 96));
    swift_beginAccess();
    *(void *)(v12 + 136) = v3;
    *(void *)(v12 + 144) = v4;
  }
  swift_bridgeObjectRelease();
  free((void *)v2);
}

uint64_t PBLookupInfo.testFlowData.getter@<X0>(void *a1@<X8>)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v9 - v4;
  uint64_t v6 = *(void *)(v1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_22D048064(v6, (uint64_t)v5);
  uint64_t v7 = type metadata accessor for PBTestFlowData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v5, 1, v7) != 1) {
    return sub_22D048184((uint64_t)v5, (uint64_t)a1);
  }
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  sub_22D2BBFE0();
  return sub_22D0480F8((uint64_t)v5);
}

uint64_t sub_22D0465D4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v10 - v5;
  uint64_t v7 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_22D048064(v7, (uint64_t)v6);
  uint64_t v8 = type metadata accessor for PBTestFlowData(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) != 1) {
    return sub_22D048184((uint64_t)v6, (uint64_t)a2);
  }
  *a2 = 0;
  a2[1] = 0xE000000000000000;
  a2[2] = 0;
  a2[3] = 0xE000000000000000;
  sub_22D2BBFE0();
  return sub_22D0480F8((uint64_t)v6);
}

uint64_t sub_22D04672C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PBTestFlowData(0);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D048310(a1, (uint64_t)v4);
  return PBLookupInfo.testFlowData.setter((uint64_t)v4);
}

uint64_t PBLookupInfo.testFlowData.setter(uint64_t a1)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  uint64_t v4 = MEMORY[0x270FA5388](v3 - 8);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v15 - v7;
  uint64_t v9 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v10 = swift_retain();
    *(void *)(v1 + v9) = sub_22D047BCC(v10);
    swift_release();
  }
  uint64_t v11 = *(void *)(v1 + v9);
  sub_22D048184(a1, (uint64_t)v8);
  uint64_t v12 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 0, 1, v12);
  sub_22D0481E8((uint64_t)v8, (uint64_t)v6);
  uint64_t v13 = v11
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  swift_retain();
  sub_22D04827C((uint64_t)v6, v13);
  swift_endAccess();
  return swift_release();
}

void (*PBLookupInfo.testFlowData.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  uint64_t v5 = malloc(*(void *)(*(void *)(v4 - 8) + 64));
  v3[4] = v5;
  uint64_t v6 = type metadata accessor for PBTestFlowData(0);
  uint64_t v7 = *(void *)(v6 - 8);
  size_t v8 = *(void *)(v7 + 64);
  v3[5] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v3[6] = v9;
  uint64_t v10 = *(void *)(v1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_22D048064(v10, (uint64_t)v5);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    void *v9 = 0;
    v9[1] = 0xE000000000000000;
    v9[2] = 0;
    v9[3] = 0xE000000000000000;
    sub_22D2BBFE0();
    sub_22D0480F8((uint64_t)v5);
  }
  else
  {
    sub_22D048184((uint64_t)v5, (uint64_t)v9);
  }
  return sub_22D046B3C;
}

void sub_22D046B3C(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 40);
  uint64_t v4 = *(void **)(*(void *)a1 + 48);
  uint64_t v5 = *(void **)(*(void *)a1 + 32);
  if (a2)
  {
    sub_22D048310((uint64_t)v4, (uint64_t)v3);
    PBLookupInfo.testFlowData.setter((uint64_t)v3);
    sub_22D04A9DC((uint64_t)v4, type metadata accessor for PBTestFlowData);
  }
  else
  {
    PBLookupInfo.testFlowData.setter((uint64_t)v4);
  }
  free(v4);
  free(v3);
  free(v5);
  free(v2);
}

BOOL PBLookupInfo.hasTestFlowData.getter()
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v8 - v2;
  uint64_t v4 = *(void *)(v0 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20))
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  sub_22D048064(v4, (uint64_t)v3);
  uint64_t v5 = type metadata accessor for PBTestFlowData(0);
  BOOL v6 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v3, 1, v5) != 1;
  sub_22D0480F8((uint64_t)v3);
  return v6;
}

Swift::Void __swiftcall PBLookupInfo.clearTestFlowData()()
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v9 - v2;
  uint64_t v4 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v5 = swift_retain();
    *(void *)(v0 + v4) = sub_22D047BCC(v5);
    swift_release();
  }
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v3, 1, 1, v7);
  uint64_t v8 = v6
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  swift_retain();
  sub_22D04827C((uint64_t)v3, v8);
  swift_endAccess();
  swift_release();
}

uint64_t PBLookupInfo.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);
  return v4(a1, v1, v3);
}

uint64_t PBLookupInfo.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = sub_22D2BBFF0();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 40);
  return v4(v1, a1, v3);
}

uint64_t (*PBLookupInfo.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBLookupInfo.init()@<X0>(uint64_t a1@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v2 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if (qword_26853CD10 != -1) {
    swift_once();
  }
  *(void *)(a1 + v2) = qword_26853E220;
  return swift_retain();
}

unint64_t static PBTestFlowData.protoMessageName.getter()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_22D047008()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853E1F0);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853E1F0);
  sub_22D04AA3C(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22D2C0F10;
  uint64_t v6 = (void *)(v5 + v4);
  unint64_t v7 = v5 + v4 + *(int *)(v2 + 56);
  *uint64_t v6 = 1;
  *(void *)unint64_t v7 = "test_gateway_id";
  *(void *)(v7 + 8) = 15;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x263F50728];
  uint64_t v9 = sub_22D2BC2F0();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  uint64_t v11 = (char *)v6 + v3 + *(int *)(v2 + 56);
  *(void *)((char *)v6 + v3) = 2;
  *(void *)uint64_t v11 = "test_mc_version";
  *((void *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  return sub_22D2BC300();
}

uint64_t static PBTestFlowData._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CD00, (uint64_t)qword_26853E1F0, a1);
}

uint64_t PBTestFlowData.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_22D2BC080();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1) {
        sub_22D2BC170();
      }
      uint64_t result = sub_22D2BC080();
    }
  }
  return result;
}

uint64_t PBTestFlowData.traverse<A>(visitor:)()
{
  unint64_t v2 = v0[1];
  uint64_t v3 = HIBYTE(v2) & 0xF;
  if ((v2 & 0x2000000000000000) == 0) {
    uint64_t v3 = *v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v3 || (uint64_t result = sub_22D2BC2B0(), !v1))
  {
    unint64_t v5 = v0[3];
    uint64_t v6 = HIBYTE(v5) & 0xF;
    if ((v5 & 0x2000000000000000) == 0) {
      uint64_t v6 = v0[2] & 0xFFFFFFFFFFFFLL;
    }
    if (!v6 || (uint64_t result = sub_22D2BC2B0(), !v1))
    {
      type metadata accessor for PBTestFlowData(0);
      return sub_22D2BBFD0();
    }
  }
  return result;
}

uint64_t PBTestFlowData.hashValue.getter()
{
  return sub_22D0496C8((void (*)(void))type metadata accessor for PBTestFlowData, &qword_26853E238, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
}

uint64_t sub_22D0473C8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  return sub_22D2BBFE0();
}

unint64_t sub_22D0473F4()
{
  return 0xD00000000000002CLL;
}

uint64_t sub_22D047410@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_22D047480(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 24);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_22D0474F0())()
{
  return nullsub_1;
}

uint64_t sub_22D047514()
{
  return PBTestFlowData.decodeMessage<A>(decoder:)();
}

uint64_t sub_22D04752C()
{
  return PBTestFlowData.traverse<A>(visitor:)();
}

uint64_t sub_22D047544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D049D74(&qword_26853E2B0, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D0475C0@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CD00, (uint64_t)qword_26853E1F0, a1);
}

uint64_t sub_22D0475E4(uint64_t a1)
{
  uint64_t v2 = sub_22D049D74(&qword_26853E250, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D047650()
{
  sub_22D049D74(&qword_26853E250, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
  return sub_22D2BC200();
}

unint64_t static PBLookupInfo.protoMessageName.getter()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_22D0476EC()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853E208);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853E208);
  sub_22D04AA3C(0, (unint64_t *)&qword_26853DB38, (uint64_t (*)(uint64_t))sub_22D018368, MEMORY[0x263F8E0F8]);
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_22D2C0F20;
  unint64_t v5 = v27 + v4;
  unint64_t v6 = v27 + v4 + *(int *)(v2 + 56);
  *(void *)(v27 + v4) = 2;
  *(void *)unint64_t v6 = "dlid";
  *(void *)(v6 + 8) = 4;
  *(unsigned char *)(v6 + 16) = 2;
  uint64_t v7 = *MEMORY[0x263F50718];
  uint64_t v8 = sub_22D2BC2F0();
  uint64_t v9 = *(void (**)(void))(*(void *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  unint64_t v10 = v5 + v3 + *(int *)(v2 + 56);
  *(void *)(v5 + v3) = 3;
  *(void *)unint64_t v10 = "key";
  *(void *)(v10 + 8) = 3;
  *(unsigned char *)(v10 + 16) = 2;
  v9();
  uint64_t v11 = (void *)(v5 + 2 * v3);
  uint64_t v12 = (char *)v11 + *(int *)(v2 + 56);
  *uint64_t v11 = 4;
  *(void *)uint64_t v12 = "vk_hr";
  *((void *)v12 + 1) = 5;
  unsigned char v12[16] = 2;
  v9();
  uint64_t v13 = (void *)(v5 + 3 * v3);
  uint64_t v14 = (char *)v13 + *(int *)(v2 + 56);
  *uint64_t v13 = 5;
  *(void *)uint64_t v14 = "last_sync_time";
  *((void *)v14 + 1) = 14;
  v14[16] = 2;
  v9();
  uint64_t v15 = (void *)(v5 + 4 * v3);
  uint64_t v16 = (char *)v15 + *(int *)(v2 + 56);
  *uint64_t v15 = 6;
  *(void *)uint64_t v16 = "device_id";
  *((void *)v16 + 1) = 9;
  v16[16] = 2;
  v9();
  uint64_t v17 = (void *)(v5 + 5 * v3);
  unint64_t v18 = (char *)v17 + *(int *)(v2 + 56);
  void *v17 = 7;
  *(void *)unint64_t v18 = "device_name";
  *((void *)v18 + 1) = 11;
  v18[16] = 2;
  v9();
  int8x16_t v19 = (void *)(v5 + 6 * v3);
  int8x16_t v20 = (char *)v19 + *(int *)(v2 + 56);
  void *v19 = 8;
  *(void *)int8x16_t v20 = "times_shared";
  *((void *)v20 + 1) = 12;
  v20[16] = 2;
  v9();
  char v21 = (void *)(v5 + 7 * v3);
  uint64_t v22 = (char *)v21 + *(int *)(v2 + 56);
  void *v21 = 9;
  *(void *)uint64_t v22 = "expires_at";
  *((void *)v22 + 1) = 10;
  v22[16] = 2;
  v9();
  uint64_t v23 = v5 + 8 * v3 + *(int *)(v2 + 56);
  *(void *)(v5 + 8 * v3) = 10;
  *(void *)uint64_t v23 = "health_institute_id";
  *(void *)(v23 + 8) = 19;
  *(unsigned char *)(v23 + 16) = 2;
  v9();
  uint64_t v24 = (void *)(v5 + 9 * v3);
  uint64_t v25 = (char *)v24 + *(int *)(v2 + 56);
  void *v24 = 11;
  *(void *)uint64_t v25 = "test_flow_data";
  *((void *)v25 + 1) = 14;
  v25[16] = 2;
  v9();
  return sub_22D2BC300();
}

uint64_t static PBLookupInfo._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CD08, (uint64_t)qword_26853E208, a1);
}

uint64_t sub_22D047AE8()
{
  type metadata accessor for PBLookupInfo._StorageClass(0);
  swift_allocObject();
  uint64_t result = sub_22D047B28();
  qword_26853E220 = result;
  return result;
}

uint64_t sub_22D047B28()
{
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0xE000000000000000;
  *(void *)(v0 + 32) = sub_22D2BBFC0();
  *(void *)(v0 + 40) = v1;
  *(void *)(v0 + 48) = sub_22D2BBFC0();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(void *)(v0 + 72) = 0xE000000000000000;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 88) = 0xE000000000000000;
  *(void *)(v0 + 96) = 0;
  *(void *)(v0 + 104) = 0xE000000000000000;
  *(_DWORD *)(v0 + 112) = 0;
  *(void *)(v0 + 120) = 0;
  *(void *)(v0 + 128) = 0xE000000000000000;
  uint64_t v3 = v0
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  *(void *)(v0 + 136) = 0;
  *(void *)(v0 + 144) = 0xE000000000000000;
  uint64_t v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v3, 1, 1, v4);
  return v0;
}

uint64_t sub_22D047BCC(uint64_t a1)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v45 = (uint64_t)&v39 - v4;
  *(void *)(v1 + 16) = 0;
  *(void *)(v1 + 24) = 0xE000000000000000;
  *(void *)(v1 + 32) = sub_22D2BBFC0();
  *(void *)(v1 + 40) = v5;
  *(void *)(v1 + 48) = sub_22D2BBFC0();
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 56) = v6;
  *(void *)(v1 + 72) = 0xE000000000000000;
  *(void *)(v1 + 80) = 0;
  uint64_t v39 = (void *)(v1 + 80);
  *(void *)(v1 + 88) = 0xE000000000000000;
  *(void *)(v1 + 96) = 0;
  uint64_t v40 = (void *)(v1 + 96);
  *(_DWORD *)(v1 + 112) = 0;
  uint64_t v41 = (_DWORD *)(v1 + 112);
  *(void *)(v1 + 104) = 0xE000000000000000;
  *(void *)(v1 + 120) = 0;
  uint64_t v42 = (void *)(v1 + 120);
  *(void *)(v1 + 128) = 0xE000000000000000;
  *(void *)(v1 + 144) = 0xE000000000000000;
  uint64_t v7 = v1
     + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  *(void *)(v1 + 136) = 0;
  uint64_t v43 = (void *)(v1 + 136);
  uint64_t v44 = v7;
  uint64_t v8 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v7, 1, 1, v8);
  swift_beginAccess();
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  swift_beginAccess();
  *(void *)(v1 + 16) = v10;
  *(void *)(v1 + 24) = v9;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  swift_beginAccess();
  uint64_t v13 = *(void *)(v1 + 32);
  unint64_t v14 = *(void *)(v1 + 40);
  *(void *)(v1 + 32) = v11;
  *(void *)(v1 + 40) = v12;
  sub_22CFF9B64(v11, v12);
  sub_22CFF5630(v13, v14);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a1 + 48);
  unint64_t v16 = *(void *)(a1 + 56);
  swift_beginAccess();
  uint64_t v17 = *(void *)(v1 + 48);
  unint64_t v18 = *(void *)(v1 + 56);
  *(void *)(v1 + 48) = v15;
  *(void *)(v1 + 56) = v16;
  sub_22CFF9B64(v15, v16);
  sub_22CFF5630(v17, v18);
  swift_beginAccess();
  uint64_t v20 = *(void *)(a1 + 64);
  uint64_t v19 = *(void *)(a1 + 72);
  swift_beginAccess();
  *(void *)(v1 + 64) = v20;
  *(void *)(v1 + 72) = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v22 = *(void *)(a1 + 80);
  uint64_t v21 = *(void *)(a1 + 88);
  uint64_t v23 = v39;
  swift_beginAccess();
  *uint64_t v23 = v22;
  *(void *)(v1 + 88) = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v25 = *(void *)(a1 + 96);
  uint64_t v24 = *(void *)(a1 + 104);
  char v26 = v40;
  swift_beginAccess();
  void *v26 = v25;
  *(void *)(v1 + 104) = v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  LODWORD(v24) = *(_DWORD *)(a1 + 112);
  uint64_t v27 = v41;
  swift_beginAccess();
  *uint64_t v27 = v24;
  swift_beginAccess();
  uint64_t v29 = *(void *)(a1 + 120);
  uint64_t v28 = *(void *)(a1 + 128);
  uint64_t v30 = v42;
  swift_beginAccess();
  *uint64_t v30 = v29;
  *(void *)(v1 + 128) = v28;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  uint64_t v32 = *(void *)(a1 + 136);
  uint64_t v31 = *(void *)(a1 + 144);
  uint64_t v33 = v43;
  swift_beginAccess();
  *uint64_t v33 = v32;
  *(void *)(v1 + 144) = v31;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a1
      + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
  swift_beginAccess();
  uint64_t v35 = v34;
  uint64_t v36 = v45;
  sub_22D048064(v35, v45);
  swift_release();
  uint64_t v37 = v44;
  swift_beginAccess();
  sub_22D04827C(v36, v37);
  swift_endAccess();
  return v1;
}

uint64_t sub_22D048064(uint64_t a1, uint64_t a2)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D0480F8(uint64_t a1)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22D048184(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D0481E8(uint64_t a1, uint64_t a2)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D04827C(uint64_t a1, uint64_t a2)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D048310(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBTestFlowData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D048374()
{
  swift_bridgeObjectRelease();
  sub_22CFF5630(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_22CFF5630(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22D0480F8(v0+ OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData);
  return v0;
}

uint64_t sub_22D0483DC()
{
  sub_22D048374();
  return swift_deallocClassInstance();
}

uint64_t PBLookupInfo.decodeMessage<A>(decoder:)()
{
  uint64_t v1 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBLookupInfo._StorageClass(0);
    swift_allocObject();
    uint64_t v2 = swift_retain();
    *(void *)(v0 + v1) = sub_22D047BCC(v2);
    swift_release();
  }
  swift_retain();
  sub_22D0484FC();
  return swift_release();
}

uint64_t sub_22D0484FC()
{
  uint64_t result = sub_22D2BC080();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 2:
        case 5:
        case 6:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_22D2BC170();
          goto LABEL_5;
        case 3:
        case 4:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_22D2BC110();
          goto LABEL_5;
        case 7:
        case 9:
        case 10:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_22D2BC170();
          goto LABEL_5;
        case 8:
          swift_beginAccess();
          uint64_t v4 = v3;
          sub_22D2BC130();
LABEL_5:
          uint64_t v3 = v4;
          swift_endAccess();
          break;
        case 11:
          swift_beginAccess();
          type metadata accessor for PBTestFlowData(0);
          sub_22D049D74(&qword_26853E250, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
          sub_22D2BC1A0();
          swift_endAccess();
          break;
        default:
          break;
      }
      uint64_t result = sub_22D2BC080();
    }
  }
  return result;
}

uint64_t PBLookupInfo.traverse<A>(visitor:)()
{
  type metadata accessor for PBLookupInfo(0);
  uint64_t v1 = swift_retain();
  sub_22D048884(v1);
  uint64_t result = swift_release();
  if (!v0) {
    return sub_22D2BBFD0();
  }
  return result;
}

uint64_t sub_22D048884(uint64_t a1)
{
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v5 = (char *)&v27 - v4;
  uint64_t v6 = type metadata accessor for PBTestFlowData(0);
  uint64_t v28 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 24);
  uint64_t v10 = HIBYTE(v9) & 0xF;
  if ((v9 & 0x2000000000000000) == 0) {
    uint64_t v10 = *(void *)(a1 + 16) & 0xFFFFFFFFFFFFLL;
  }
  if (v10)
  {
    swift_bridgeObjectRetain();
    sub_22D2BC2B0();
    if (v1) {
      return swift_bridgeObjectRelease();
    }
    uint64_t v27 = v6;
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v27 = v6;
  }
  swift_beginAccess();
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v12 = *(void *)(a1 + 40);
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v13 != v13 >> 32) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 2uLL:
      if (*(void *)(v13 + 16) != *(void *)(v13 + 24)) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_15;
    default:
      if ((v12 & 0xFF000000000000) == 0) {
        goto LABEL_15;
      }
LABEL_14:
      sub_22CFF9B64(*(void *)(a1 + 32), *(void *)(a1 + 40));
      sub_22D2BC260();
      uint64_t result = sub_22CFF5630(v13, v12);
      if (!v1)
      {
LABEL_15:
        swift_beginAccess();
        uint64_t v15 = *(void *)(a1 + 48);
        unint64_t v14 = *(void *)(a1 + 56);
        switch(v14 >> 62)
        {
          case 1uLL:
            if ((int)v15 != v15 >> 32) {
              goto LABEL_21;
            }
            goto LABEL_22;
          case 2uLL:
            if (*(void *)(v15 + 16) != *(void *)(v15 + 24)) {
              goto LABEL_21;
            }
            goto LABEL_22;
          case 3uLL:
            goto LABEL_22;
          default:
            if ((v14 & 0xFF000000000000) == 0) {
              goto LABEL_22;
            }
LABEL_21:
            sub_22CFF9B64(*(void *)(a1 + 48), *(void *)(a1 + 56));
            sub_22D2BC260();
            uint64_t result = sub_22CFF5630(v15, v14);
            if (!v1)
            {
LABEL_22:
              swift_beginAccess();
              unint64_t v16 = *(void *)(a1 + 72);
              uint64_t v17 = HIBYTE(v16) & 0xF;
              if ((v16 & 0x2000000000000000) == 0) {
                uint64_t v17 = *(void *)(a1 + 64) & 0xFFFFFFFFFFFFLL;
              }
              if (!v17 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v1))
              {
                swift_beginAccess();
                unint64_t v18 = *(void *)(a1 + 88);
                uint64_t v19 = HIBYTE(v18) & 0xF;
                if ((v18 & 0x2000000000000000) == 0) {
                  uint64_t v19 = *(void *)(a1 + 80) & 0xFFFFFFFFFFFFLL;
                }
                if (!v19 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v1))
                {
                  swift_beginAccess();
                  unint64_t v20 = *(void *)(a1 + 104);
                  uint64_t v21 = HIBYTE(v20) & 0xF;
                  if ((v20 & 0x2000000000000000) == 0) {
                    uint64_t v21 = *(void *)(a1 + 96) & 0xFFFFFFFFFFFFLL;
                  }
                  if (!v21 || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v1))
                  {
                    swift_beginAccess();
                    if (!*(_DWORD *)(a1 + 112) || (uint64_t result = sub_22D2BC280(), !v1))
                    {
                      swift_beginAccess();
                      unint64_t v22 = *(void *)(a1 + 128);
                      uint64_t v23 = HIBYTE(v22) & 0xF;
                      if ((v22 & 0x2000000000000000) == 0) {
                        uint64_t v23 = *(void *)(a1 + 120) & 0xFFFFFFFFFFFFLL;
                      }
                      if (!v23
                        || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v1))
                      {
                        swift_beginAccess();
                        unint64_t v24 = *(void *)(a1 + 144);
                        uint64_t v25 = HIBYTE(v24) & 0xF;
                        if ((v24 & 0x2000000000000000) == 0) {
                          uint64_t v25 = *(void *)(a1 + 136) & 0xFFFFFFFFFFFFLL;
                        }
                        if (!v25
                          || (swift_bridgeObjectRetain(), sub_22D2BC2B0(), uint64_t result = swift_bridgeObjectRelease(), !v1))
                        {
                          uint64_t v26 = a1
                              + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
                          swift_beginAccess();
                          sub_22D048064(v26, (uint64_t)v5);
                          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v5, 1, v27) == 1)
                          {
                            uint64_t result = sub_22D0480F8((uint64_t)v5);
                          }
                          else
                          {
                            sub_22D048184((uint64_t)v5, (uint64_t)v8);
                            sub_22D049D74(&qword_26853E250, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
                            sub_22D2BC2E0();
                            uint64_t result = sub_22D04A9DC((uint64_t)v8, type metadata accessor for PBTestFlowData);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            break;
        }
      }
      break;
  }
  return result;
}

uint64_t sub_22D048EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBTestFlowData(0);
  uint64_t v56 = *(void *)(v4 - 8);
  uint64_t v57 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D04A948();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D04AA3C(0, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  unint64_t v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v53 - v15;
  swift_beginAccess();
  uint64_t v18 = *(void *)(a1 + 16);
  uint64_t v17 = *(void *)(a1 + 24);
  swift_beginAccess();
  if (v18 == *(void *)(a2 + 16) && v17 == *(void *)(a2 + 24)
    || (v19 = sub_22D2BD660(), uint64_t result = 0, (v19 & 1) != 0))
  {
    uint64_t v53 = v6;
    uint64_t v54 = v14;
    uint64_t v55 = v10;
    swift_beginAccess();
    uint64_t v21 = *(void *)(a1 + 32);
    unint64_t v22 = *(void *)(a1 + 40);
    swift_beginAccess();
    uint64_t v23 = *(void *)(a2 + 32);
    unint64_t v24 = *(void *)(a2 + 40);
    swift_retain();
    swift_retain();
    sub_22CFF9B64(v21, v22);
    sub_22CFF9B64(v23, v24);
    char v25 = sub_22D1158DC(v21, v22, v23, v24);
    sub_22CFF5630(v23, v24);
    sub_22CFF5630(v21, v22);
    if ((v25 & 1) == 0) {
      goto LABEL_25;
    }
    swift_beginAccess();
    uint64_t v26 = *(void *)(a1 + 48);
    unint64_t v27 = *(void *)(a1 + 56);
    swift_beginAccess();
    uint64_t v28 = *(void *)(a2 + 48);
    unint64_t v29 = *(void *)(a2 + 56);
    sub_22CFF9B64(v26, v27);
    sub_22CFF9B64(v28, v29);
    char v30 = sub_22D1158DC(v26, v27, v28, v29);
    sub_22CFF5630(v28, v29);
    sub_22CFF5630(v26, v27);
    if ((v30 & 1) == 0) {
      goto LABEL_25;
    }
    swift_beginAccess();
    uint64_t v31 = *(void *)(a1 + 64);
    uint64_t v32 = *(void *)(a1 + 72);
    swift_beginAccess();
    if ((v31 != *(void *)(a2 + 64) || v32 != *(void *)(a2 + 72)) && (sub_22D2BD660() & 1) == 0) {
      goto LABEL_25;
    }
    swift_beginAccess();
    uint64_t v33 = *(void *)(a1 + 80);
    uint64_t v34 = *(void *)(a1 + 88);
    swift_beginAccess();
    if ((v33 != *(void *)(a2 + 80) || v34 != *(void *)(a2 + 88)) && (sub_22D2BD660() & 1) == 0) {
      goto LABEL_25;
    }
    swift_beginAccess();
    uint64_t v35 = *(void *)(a1 + 96);
    uint64_t v36 = *(void *)(a1 + 104);
    swift_beginAccess();
    if ((v35 != *(void *)(a2 + 96) || v36 != *(void *)(a2 + 104)) && (sub_22D2BD660() & 1) == 0) {
      goto LABEL_25;
    }
    swift_beginAccess();
    int v37 = *(_DWORD *)(a1 + 112);
    swift_beginAccess();
    if (v37 != *(_DWORD *)(a2 + 112)) {
      goto LABEL_25;
    }
    swift_beginAccess();
    uint64_t v38 = *(void *)(a1 + 120);
    uint64_t v39 = *(void *)(a1 + 128);
    swift_beginAccess();
    if ((v38 != *(void *)(a2 + 120) || v39 != *(void *)(a2 + 128)) && (sub_22D2BD660() & 1) == 0) {
      goto LABEL_25;
    }
    if ((swift_beginAccess(),
          uint64_t v40 = *(void *)(a1 + 136),
          uint64_t v41 = *(void *)(a1 + 144),
          swift_beginAccess(),
          v40 == *(void *)(a2 + 136))
      && v41 == *(void *)(a2 + 144)
      || (sub_22D2BD660() & 1) != 0)
    {
      uint64_t v42 = a1
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
      swift_beginAccess();
      sub_22D048064(v42, (uint64_t)v16);
      uint64_t v43 = a2
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBLookupInfoP33_7F26719F6460C689CB3D83DDA4DE2FF013_StorageClass__testFlowData;
      swift_beginAccess();
      uint64_t v44 = (uint64_t)v55;
      uint64_t v45 = (uint64_t)&v55[*(int *)(v8 + 48)];
      sub_22D048064((uint64_t)v16, (uint64_t)v55);
      sub_22D048064(v43, v45);
      uint64_t v46 = v57;
      uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
      if (v47(v44, 1, v57) == 1)
      {
        swift_release();
        swift_release();
        sub_22D0480F8((uint64_t)v16);
        if (v47(v45, 1, v46) == 1)
        {
          sub_22D0480F8(v44);
          return 1;
        }
      }
      else
      {
        uint64_t v48 = v54;
        sub_22D048064(v44, (uint64_t)v54);
        if (v47(v45, 1, v46) != 1)
        {
          uint64_t v49 = v45;
          uint64_t v50 = v53;
          sub_22D048184(v49, (uint64_t)v53);
          if (*v48 == *v50 && v48[1] == v50[1] || (sub_22D2BD660())
            && (v54[2] == v50[2] && v54[3] == v50[3] || (sub_22D2BD660() & 1) != 0))
          {
            uint64_t v51 = (uint64_t)v54;
            sub_22D2BBFF0();
            sub_22D049D74(&qword_26853DB30, MEMORY[0x263F50560]);
            char v52 = sub_22D2BCB90();
            swift_release();
            swift_release();
            sub_22D04A9DC((uint64_t)v50, type metadata accessor for PBTestFlowData);
            sub_22D0480F8((uint64_t)v16);
            sub_22D04A9DC(v51, type metadata accessor for PBTestFlowData);
            sub_22D0480F8(v44);
            if (v52) {
              return 1;
            }
          }
          else
          {
            swift_release();
            swift_release();
            sub_22D04A9DC((uint64_t)v50, type metadata accessor for PBTestFlowData);
            sub_22D0480F8((uint64_t)v16);
            sub_22D04A9DC((uint64_t)v54, type metadata accessor for PBTestFlowData);
            sub_22D0480F8(v44);
          }
          return 0;
        }
        swift_release();
        swift_release();
        sub_22D0480F8((uint64_t)v16);
        sub_22D04A9DC((uint64_t)v48, type metadata accessor for PBTestFlowData);
      }
      sub_22D04A9DC(v44, (uint64_t (*)(void))sub_22D04A948);
    }
    else
    {
LABEL_25:
      swift_release();
      swift_release();
    }
    return 0;
  }
  return result;
}

uint64_t PBLookupInfo.hashValue.getter()
{
  return sub_22D0496C8((void (*)(void))type metadata accessor for PBLookupInfo, &qword_26853E240, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
}

uint64_t sub_22D0496C8(void (*a1)(void), unint64_t *a2, void (*a3)(uint64_t))
{
  return sub_22D2BD760();
}

uint64_t sub_22D049750@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D2BBFE0();
  uint64_t v4 = *(int *)(a1 + 20);
  if (qword_26853CD10 != -1) {
    swift_once();
  }
  *(void *)(a2 + v4) = qword_26853E220;
  return swift_retain();
}

unint64_t sub_22D0497C8()
{
  return 0xD00000000000002ALL;
}

uint64_t sub_22D0497E4()
{
  return PBLookupInfo.decodeMessage<A>(decoder:)();
}

uint64_t sub_22D0497FC()
{
  return PBLookupInfo.traverse<A>(visitor:)();
}

uint64_t sub_22D049814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D049D74(&qword_26853E2A8, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D049890@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CD08, (uint64_t)qword_26853E208, a1);
}

uint64_t sub_22D0498B4(uint64_t a1)
{
  uint64_t v2 = sub_22D049D74((unint64_t *)&qword_26853E268, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D049920()
{
  sub_22D049D74((unint64_t *)&qword_26853E268, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
  return sub_22D2BC200();
}

uint64_t _s19HealthRecordsDaemon14PBTestFlowDataV2eeoiySbAC_ACtFZ_0(char *a1, char *a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v18 - v9;
  BOOL v11 = *(void *)a1 == *(void *)a2 && *((void *)a1 + 1) == *((void *)a2 + 1);
  if (v11 || (char v12 = 0, (sub_22D2BD660() & 1) != 0))
  {
    BOOL v13 = *((void *)a1 + 2) == *((void *)a2 + 2) && *((void *)a1 + 3) == *((void *)a2 + 3);
    if (v13 || (char v12 = 0, (sub_22D2BD660() & 1) != 0))
    {
      uint64_t v14 = type metadata accessor for PBTestFlowData(0);
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
      v15(v10, &a1[*(int *)(v14 + 24)], v4);
      v15(v8, &a2[*(int *)(v14 + 24)], v4);
      sub_22D049D74(&qword_26853DB30, MEMORY[0x263F50560]);
      char v12 = sub_22D2BCB90();
      unint64_t v16 = *(void (**)(char *, uint64_t))(v5 + 8);
      v16(v8, v4);
      v16(v10, v4);
    }
  }
  return v12 & 1;
}

uint64_t _s19HealthRecordsDaemon12PBLookupInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v19 - v9;
  uint64_t v11 = *(int *)(type metadata accessor for PBLookupInfo(0) + 20);
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  if (v12 == v13
    || (swift_retain(), swift_retain(), char v14 = sub_22D048EB4(v12, v13), swift_release(), swift_release(), (v14 & 1) != 0))
  {
    uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v15(v10, a1, v4);
    v15(v8, a2, v4);
    sub_22D049D74(&qword_26853DB30, MEMORY[0x263F50560]);
    char v16 = sub_22D2BCB90();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    char v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_22D049D74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D049DBC()
{
  return sub_22D049D74(&qword_26853E248, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
}

uint64_t sub_22D049E04()
{
  return sub_22D049D74(&qword_26853E250, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
}

uint64_t sub_22D049E4C()
{
  return sub_22D049D74(&qword_26853E238, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
}

uint64_t sub_22D049E94()
{
  return sub_22D049D74(&qword_26853E258, (void (*)(uint64_t))type metadata accessor for PBTestFlowData);
}

uint64_t sub_22D049EDC()
{
  return sub_22D049D74(&qword_26853E260, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
}

uint64_t sub_22D049F24()
{
  return sub_22D049D74((unint64_t *)&qword_26853E268, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
}

uint64_t sub_22D049F6C()
{
  return sub_22D049D74(&qword_26853E240, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
}

uint64_t sub_22D049FB4()
{
  return sub_22D049D74(&qword_26853E270, (void (*)(uint64_t))type metadata accessor for PBLookupInfo);
}

uint64_t sub_22D04A02C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for PBLookupInfo(0) + 20));
  uint64_t result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 112);
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PBTestFlowData(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v12 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = sub_22D2BBFF0();
    uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v11(v8, v9, v10);
  }
  return v3;
}

uint64_t destroy for PBTestFlowData(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

void *initializeWithCopy for PBTestFlowData(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  return a1;
}

void *assignWithCopy for PBTestFlowData(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_OWORD *initializeWithTake for PBTestFlowData(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

void *assignWithTake for PBTestFlowData(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_22D2BBFF0();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBTestFlowData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D04A4A8);
}

uint64_t sub_22D04A4A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BBFF0();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PBTestFlowData(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D04A56C);
}

uint64_t sub_22D04A56C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D04A614()
{
  uint64_t result = sub_22D2BBFF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PBLookupInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D04A6C0);
}

uint64_t sub_22D04A6C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBFF0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for PBLookupInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D04A794);
}

uint64_t sub_22D04A794(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBFF0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_22D04A850()
{
  return type metadata accessor for PBLookupInfo._StorageClass(0);
}

void sub_22D04A858()
{
  sub_22D04AA3C(319, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_22D04A948()
{
  if (!qword_26853E2B8)
  {
    sub_22D04AA3C(255, &qword_26853E228, type metadata accessor for PBTestFlowData, MEMORY[0x263F8D8F0]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E2B8);
    }
  }
}

uint64_t sub_22D04A9DC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_22D04AA3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D04AAA0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (!((unint64_t)*a1 >> 62))
  {
    uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v4) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = MEMORY[0x263F8EE78];
LABEL_16:
    *a2 = v11;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_22D2BD470();
  uint64_t v4 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v4 >= 1)
  {
    for (uint64_t i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x230F7AF90](i, v3);
      }
      else {
        id v7 = *(id *)(v3 + 8 * i + 32);
      }
      unint64_t v8 = v7;
      if ((sub_22D2BD0F0() & 1) != 0
        && (id v9 = objc_msgSend(v8, sel_clinicalSharingStatus),
            id v10 = objc_msgSend(v9, sel_userStatus),
            v9,
            v10))
      {
        sub_22D2BD3A0();
        sub_22D2BD3E0();
        sub_22D2BD3F0();
        sub_22D2BD3B0();
      }
      else
      {
      }
    }
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v11 = v12;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t sub_22D04AC20(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_22D2BBC90();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  unint64_t v8 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v10 = (char *)&v25 - v9;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v11 = sub_22D2BC390();
  __swift_project_value_buffer(v11, (uint64_t)qword_26AEC3C90);
  unint64_t v29 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v30 = a1;
  v29(v10, a1, v4);
  uint64_t v12 = sub_22D2BC380();
  os_log_type_t v13 = sub_22D2BD080();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v28 = a2;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v32 = v26;
    unint64_t v27 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)uint64_t v15 = 136315138;
    char v25 = v15 + 4;
    sub_22D04C210((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v16 = sub_22D2BD630();
    uint64_t v31 = sub_22D0A4D24(v16, v17, &v32);
    unint64_t v8 = v27;
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    _os_log_impl(&dword_22CFEE000, v12, v13, "ClinicalSharingAccountStore: refreshing access token for %s", v15, 0xCu);
    uint64_t v18 = v26;
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v18, -1, -1);
    uint64_t v19 = v15;
    a2 = v28;
    MEMORY[0x230F7BDF0](v19, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }

  v29(v8, v30, v4);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v21 + v20, v8, v4);
  sub_22D04BFCC();
  swift_allocObject();
  id v22 = a2;
  uint64_t v32 = sub_22D2BC6F0();
  sub_22D04C210(&qword_26AEC3070, (void (*)(uint64_t))sub_22D04BFCC);
  uint64_t v23 = sub_22D2BC720();
  swift_release();
  return v23;
}

uint64_t sub_22D04AFE8(unint64_t a1, void *a2)
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v4 = sub_22D2BC390();
  __swift_project_value_buffer(v4, (uint64_t)qword_26AEC3C90);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = sub_22D2BC380();
  os_log_type_t v6 = sub_22D2BD080();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 134217984;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v5, v6, "ClinicalSharingAccountStore: refreshing connection info for %ld accounts", v7, 0xCu);
    MEMORY[0x230F7BDF0](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  sub_22D04C07C();
  swift_allocObject();
  swift_bridgeObjectRetain();
  id v9 = a2;
  sub_22D2BC6F0();
  sub_22D04C210(&qword_26AEC2F40, (void (*)(uint64_t))sub_22D04C07C);
  uint64_t v10 = sub_22D2BC720();
  swift_release();
  return v10;
}

uint64_t sub_22D04B228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a4;
  sub_22D04C11C(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v61 = (uint64_t)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v54 - v11;
  uint64_t v13 = MEMORY[0x270FA5388](v10);
  uint64_t v15 = (char *)&v54 - v14;
  MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v54 - v16;
  uint64_t v18 = sub_22D2BBC90();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_22D2BC390();
  __swift_project_value_buffer(v22, (uint64_t)qword_26AEC3C90);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  uint64_t v62 = a1;
  v23(v21, a1, v18);
  sub_22D04BDE8(a2, (uint64_t)v17);
  sub_22D04BDE8(a3, (uint64_t)v15);
  unint64_t v24 = sub_22D2BC380();
  int v25 = sub_22D2BD080();
  if (os_log_type_enabled(v24, (os_log_type_t)v25))
  {
    uint64_t v59 = a3;
    uint64_t v60 = v15;
    int v56 = v25;
    os_log_t v57 = v24;
    uint64_t v58 = a2;
    uint64_t v26 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v65 = v55;
    *(_DWORD *)uint64_t v26 = 136315650;
    sub_22D04C210((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v27 = sub_22D2BD630();
    uint64_t v64 = sub_22D0A4D24(v27, v28, &v65);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    *(_WORD *)(v26 + 12) = 2080;
    sub_22D04BDE8((uint64_t)v17, (uint64_t)v12);
    uint64_t v29 = sub_22D2BBC30();
    uint64_t v30 = *(void *)(v29 - 8);
    uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
    if (v31(v12, 1, v29) == 1)
    {
      sub_22D04BD5C((uint64_t)v12);
      unint64_t v32 = 0xE500000000000000;
      uint64_t v33 = 0x7D6C696E7BLL;
    }
    else
    {
      if (qword_26853D3D0 != -1) {
        swift_once();
      }
      uint64_t v35 = (void *)qword_268568488;
      uint64_t v36 = (void *)sub_22D2BBBC0();
      id v37 = objc_msgSend(v35, sel_stringFromDate_, v36);

      uint64_t v33 = sub_22D2BCBD0();
      unint64_t v32 = v38;

      (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v29);
    }
    uint64_t v64 = sub_22D0A4D24(v33, v32, &v65);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    sub_22D04BD5C((uint64_t)v17);
    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v39 = (uint64_t)v60;
    uint64_t v40 = v61;
    sub_22D04BDE8((uint64_t)v60, v61);
    unsigned int v41 = v31((char *)v40, 1, v29);
    a2 = v58;
    if (v41 == 1)
    {
      sub_22D04BD5C(v40);
      unint64_t v42 = 0xE500000000000000;
      os_log_type_t v43 = v56;
      uint64_t v44 = 0x7D6C696E7BLL;
    }
    else
    {
      uint64_t v54 = v30;
      os_log_type_t v43 = v56;
      if (qword_26853D3D0 != -1) {
        swift_once();
      }
      uint64_t v45 = (void *)qword_268568488;
      uint64_t v46 = (void *)sub_22D2BBBC0();
      id v47 = objc_msgSend(v45, sel_stringFromDate_, v46);

      uint64_t v44 = sub_22D2BCBD0();
      unint64_t v42 = v48;

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v40, v29);
      uint64_t v39 = (uint64_t)v60;
    }
    uint64_t v64 = sub_22D0A4D24(v44, v42, &v65);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    sub_22D04BD5C(v39);
    os_log_t v49 = v57;
    _os_log_impl(&dword_22CFEE000, v57, v43, "ClinicalSharingAccountStore: updating clinical sharing dates for account %s. First shared: %s, last shared: %s", (uint8_t *)v26, 0x20u);
    uint64_t v50 = v55;
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v50, -1, -1);
    MEMORY[0x230F7BDF0](v26, -1, -1);

    a3 = v59;
    uint64_t v34 = v62;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_22D04BD5C((uint64_t)v17);
    sub_22D04BD5C((uint64_t)v15);

    uint64_t v34 = v62;
  }
  uint64_t v51 = (void *)sub_22D2BCF50();
  uint64_t v52 = sub_22D1F163C(v34, a2, a3, 0, v51, 0, 0);

  return v52;
}

uint64_t sub_22D04B8CC(uint64_t a1, void *a2, uint64_t a3)
{
  sub_22D04C11C(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v7 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  unint64_t v38 = (char *)&v33 - v10;
  uint64_t v11 = sub_22D2BBC90();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_22D2BC390();
  __swift_project_value_buffer(v15, (uint64_t)qword_26AEC3C90);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  id v16 = a2;
  unint64_t v17 = sub_22D2BC380();
  int v18 = sub_22D2BD080();
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    int v35 = v18;
    uint64_t v36 = v9;
    uint64_t v37 = a1;
    uint64_t v33 = a3;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    uint64_t v40 = v34;
    *(_DWORD *)uint64_t v19 = 136315394;
    sub_22D04C210((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v20 = sub_22D2BD630();
    uint64_t v39 = sub_22D0A4D24(v20, v21, &v40);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v22 = a2;
    if (a2)
    {
      objc_msgSend(v16, sel_integerValue);
      id v23 = (id)HKClinicalSharingUserStatusToString();
      uint64_t v24 = sub_22D2BCBD0();
      unint64_t v26 = v25;
    }
    else
    {
      unint64_t v26 = 0xE500000000000000;
      uint64_t v24 = 0x7D6C696E7BLL;
    }
    uint64_t v39 = sub_22D0A4D24(v24, v26, &v40);
    sub_22D2BD220();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v17, (os_log_type_t)v35, "ClinicalSharingAccountStore: updating clinical sharing user status for account %s: %s", (uint8_t *)v19, 0x16u);
    uint64_t v27 = v34;
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v27, -1, -1);
    MEMORY[0x230F7BDF0](v19, -1, -1);

    a2 = v22;
    uint64_t v9 = v36;
    a1 = v37;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  uint64_t v28 = sub_22D2BBC30();
  uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);
  uint64_t v30 = (uint64_t)v38;
  v29(v38, 1, 1, v28);
  v29(v9, 1, 1, v28);
  uint64_t v31 = sub_22D1F163C(a1, v30, (uint64_t)v9, a2, 0, 0, 0);
  sub_22D04BD5C((uint64_t)v9);
  sub_22D04BD5C(v30);
  return v31;
}

uint64_t sub_22D04BD5C(uint64_t a1)
{
  sub_22D04C11C(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_22D04BDE8(uint64_t a1, uint64_t a2)
{
  sub_22D04C11C(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D04BE7C()
{
  uint64_t v1 = sub_22D2BBC90();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return MEMORY[0x270FA0238](v0, v5, v6);
}

void sub_22D04BF48(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(sub_22D2BBC90() - 8);
  uint64_t v6 = *(void **)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  sub_22D285A54(a1, a2, v6, v7);
}

void sub_22D04BFCC()
{
  if (!qword_26AEC3078)
  {
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC6E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC3078);
    }
  }
}

uint64_t sub_22D04C034()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_22D04C074(uint64_t a1, uint64_t a2)
{
  sub_22D28506C(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_22D04C07C()
{
  if (!qword_26AEC2F48)
  {
    sub_22D04C11C(255, &qword_26AEC2F80, (uint64_t (*)(uint64_t))sub_22D04C180, MEMORY[0x263F8D488]);
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC6E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2F48);
    }
  }
}

void sub_22D04C11C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D04C180()
{
  if (!qword_26AEC2FB0)
  {
    sub_22D030474(255, (unint64_t *)&qword_26AEC1EE8);
    sub_22D030474(255, (unint64_t *)&qword_26AEC2FA8);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26AEC2FB0);
    }
  }
}

uint64_t sub_22D04C210(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingAccountStore()
{
  return &type metadata for ClinicalSharingAccountStore;
}

uint64_t sub_22D04C268@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v6;
  v7[4] = a2;
  sub_22D04C5D8();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v8 = a2;
  sub_22D2BC6F0();
  sub_22D04C640();
  uint64_t v9 = sub_22D2BC720();
  uint64_t result = swift_release();
  *a3 = v9;
  return result;
}

uint64_t sub_22D04C34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a1;
  *(void *)(v9 + 24) = a2;
  sub_22D2BB660();
  swift_allocObject();
  swift_retain();
  sub_22D2BB650();
  sub_22D04C710();
  uint64_t v10 = sub_22D2BB640();
  unint64_t v12 = v11;
  swift_release();
  uint64_t v13 = (void *)sub_22D2BBB00();
  uint64_t v14 = (void *)sub_22D2BCBA0();
  uint64_t v15 = (void *)swift_allocObject();
  v15[2] = sub_22D04C6D0;
  v15[3] = v9;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_22D04C86C;
  aBlock[5] = v15;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_22D1F193C;
  aBlock[3] = &block_descriptor_3;
  id v16 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a5, sel_setData_forKey_completion_, v13, v14, v16);
  _Block_release(v16);

  return sub_22CFF5630(v10, v12);
}

uint64_t sub_22D04C584()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t sub_22D04C5CC(uint64_t a1, uint64_t a2)
{
  return sub_22D04C34C(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32));
}

void sub_22D04C5D8()
{
  if (!qword_26AEC2F38)
  {
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC6E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2F38);
    }
  }
}

unint64_t sub_22D04C640()
{
  unint64_t result = qword_26AEC2F30;
  if (!qword_26AEC2F30)
  {
    sub_22D04C5D8();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2F30);
  }
  return result;
}

uint64_t sub_22D04C698()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D04C6D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = *(uint64_t (**)(void *))(v3 + 16);
  v6[0] = a1;
  v6[1] = a2;
  char v7 = a3 & 1;
  return v4(v6);
}

unint64_t sub_22D04C710()
{
  unint64_t result = qword_26AEC16E8;
  if (!qword_26AEC16E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16E8);
  }
  return result;
}

void sub_22D04C764(char a1, id a2, void (*a3)(id, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  if (a1)
  {
    a3(a5, a6, 0);
  }
  else
  {
    if (a2)
    {
      id v8 = a2;
    }
    else
    {
      sub_22D04C890();
      id v8 = (id)swift_allocError();
      *(void *)uint64_t v9 = 0;
      *(void *)(v9 + 8) = 0;
      *(unsigned char *)(v9 + 16) = 2;
    }
    id v10 = a2;
    a3(v8, 0, 1);
  }
}

uint64_t sub_22D04C824()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_22D04C86C(char a1, void *a2)
{
  sub_22D04C764(a1, a2, *(void (**)(id, uint64_t, uint64_t))(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t sub_22D04C890()
{
  unint64_t result = qword_26853ED10;
  if (!qword_26853ED10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853ED10);
  }
  return result;
}

HealthRecordsDaemon::HTTPHeader_optional __swiftcall HKFHIRCredential.asAuthorizationHeader()()
{
  uint64_t v2 = v0;
  id v3 = objc_msgSend(v1, sel_accessToken);
  if (v3)
  {
    uint64_t v4 = v3;
    sub_22D2BCBD0();

    sub_22D2BCCB0();
    uint64_t v5 = swift_bridgeObjectRelease();
    *(_OWORD *)uint64_t v2 = xmmword_22D2C1330;
    *(void *)(v2 + 16) = 0x20726572616542;
    *(void *)(v2 + 24) = 0xE700000000000000;
  }
  else
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_22D2BC390();
    __swift_project_value_buffer(v9, (uint64_t)qword_26AEC3C90);
    id v10 = sub_22D2BC380();
    os_log_type_t v11 = sub_22D2BD060();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl(&dword_22CFEE000, v10, v11, "HKFHIRCredential.asAuthorizationHeader: No accessToken", v12, 2u);
      MEMORY[0x230F7BDF0](v12, -1, -1);
    }

    *(_OWORD *)uint64_t v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
  }
  result.value.value._object = v8;
  result.value.value._countAndFlagsBits = v7;
  result.value.name._object = v6;
  result.value.name._countAndFlagsBits = v5;
  return result;
}

HealthRecordsDaemon::HTTPHeader __swiftcall HTTPHeader.init(name:value:)(Swift::String name, Swift::String value)
{
  *uint64_t v2 = name;
  v2[1] = value;
  result.value = value;
  result.name = name;
  return result;
}

uint64_t HTTPHeader.name.getter()
{
  uint64_t v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPHeader.value.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t HTTPHeader.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_22D2BCC70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22D2BCC70();
  return swift_bridgeObjectRelease();
}

uint64_t HTTPHeader.hashValue.getter()
{
  return sub_22D2BD760();
}

uint64_t sub_22D04CBC8()
{
  return sub_22D2BD760();
}

uint64_t sub_22D04CC50()
{
  swift_bridgeObjectRetain();
  sub_22D2BCC70();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_22D2BCC70();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D04CCD4()
{
  return sub_22D2BD760();
}

Swift::Void __swiftcall URLRequest.add(header:)(HealthRecordsDaemon::HTTPHeader header)
{
}

uint64_t _s19HealthRecordsDaemon10HTTPHeaderV2eeoiySbAC_ACtFZ_0(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  BOOL v6 = *a1 == *a2 && a1[1] == a2[1];
  if (v6 || (v7 = sub_22D2BD660(), uint64_t result = 0, (v7 & 1) != 0))
  {
    if (v2 == v4 && v3 == v5)
    {
      return 1;
    }
    else
    {
      return sub_22D2BD660();
    }
  }
  return result;
}

unint64_t sub_22D04CE10()
{
  unint64_t result = qword_26853E2C0;
  if (!qword_26853E2C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E2C0);
  }
  return result;
}

ValueMetadata *type metadata accessor for HTTPHeader()
{
  return &type metadata for HTTPHeader;
}

void *initializeBufferWithCopyOfBuffer for SexMetricField(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for SexMetricField()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for SexMetricField(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for SexMetricField(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SexMetricField(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SexMetricField(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SexMetricField()
{
  return &type metadata for SexMetricField;
}

ValueMetadata *type metadata accessor for IHAMetricField()
{
  return &type metadata for IHAMetricField;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(unsigned char *)(result + 8) = *((unsigned char *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PBDataType(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PBTimeSeries.Value.OneOf_AdditionalData(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for AgeMetricField()
{
  return &type metadata for AgeMetricField;
}

void *__swift_memcpy8_8(void *result, void *a2)
{
  *unint64_t result = *a2;
  return result;
}

ValueMetadata *type metadata accessor for ErrorMessageMetricField()
{
  return &type metadata for ErrorMessageMetricField;
}

void *initializeBufferWithCopyOfBuffer for ErrorDomainMetricField(void *a1, id *a2)
{
  id v3 = *a2;
  id v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for ErrorDomainMetricField(id *a1)
{
}

void **assignWithCopy for ErrorDomainMetricField(void **a1, id *a2)
{
  id v3 = *a1;
  id v4 = *a2;
  id v5 = *a2;
  *a1 = v4;

  return a1;
}

void **assignWithTake for ErrorDomainMetricField(void **a1, void **a2)
{
  id v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingFHIRSearchResult(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingFHIRSearchResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ErrorDomainMetricField()
{
  return &type metadata for ErrorDomainMetricField;
}

uint64_t getEnumTagSinglePayload for SyncSuccessMetricField(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 1 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 1;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 1;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *_s19HealthRecordsDaemon14IHAMetricFieldVwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D04D36CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IHRMetricField()
{
  return &type metadata for IHRMetricField;
}

_UNKNOWN **sub_22D04D3A4()
{
  return &off_26E05E5B0;
}

_UNKNOWN **sub_22D04D3B0()
{
  return &off_26E05E5F8;
}

_UNKNOWN **sub_22D04D3BC()
{
  return &off_26E05E5E0;
}

uint64_t sub_22D04D3C8()
{
  return 1;
}

void *static ContentVariables.asValueMap(substituting:)(uint64_t a1)
{
  uint64_t v1 = qword_26E05A270;
  if (qword_26E05A270)
  {
    uint64_t v2 = a1;
    int v3 = (void *)MEMORY[0x263F8EE80];
    unsigned int v4 = &byte_26E05A280;
    while (1)
    {
      int v8 = *v4;
      unsigned int v6 = v4 + 1;
      int v7 = v8;
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x4449746E65696C63;
      switch(v8)
      {
        case 1:
          uint64_t v10 = 0x6553746E65696C63;
          unint64_t v9 = 0xEC00000074657263;
          break;
        case 2:
          unint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1701080931;
          break;
        case 3:
          os_log_type_t v11 = "CE";
          goto LABEL_15;
        case 4:
          unint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1734431845;
          break;
        case 5:
          uint64_t v10 = 0xD000000000000011;
          unint64_t v9 = 0x800000022D2D5810;
          break;
        case 6:
          os_log_type_t v11 = "geLastFetchedDate";
LABEL_15:
          unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
          uint64_t v10 = 0xD000000000000015;
          break;
        case 7:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x746E6569746170;
          break;
        case 8:
          uint64_t v10 = 0x5468736572666572;
          unint64_t v9 = 0xEC0000006E656B6FLL;
          break;
        case 9:
          uint64_t v10 = 0x656372756F736572;
          unint64_t v9 = 0xEA00000000004449;
          break;
        case 10:
          uint64_t v10 = 0x44494C44746F6F72;
          break;
        case 11:
          unint64_t v9 = 0xE500000000000000;
          uint64_t v10 = 0x6574617473;
          break;
        default:
          break;
      }
      uint64_t v34 = v6;
      if (*(void *)(v2 + 16) && (unint64_t v12 = sub_22D04EB7C(v10, v9), (v13 & 1) != 0))
      {
        uint64_t v14 = (unint64_t *)(*(void *)(v2 + 56) + 16 * v12);
        unint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        unint64_t v16 = 0xE800000000000000;
        unint64_t v15 = 0x4449746E65696C63;
        switch(v7)
        {
          case 0:
            break;
          case 1:
            unint64_t v15 = 0x6553746E65696C63;
            unint64_t v16 = 0xEC00000074657263;
            break;
          case 2:
            unint64_t v16 = 0xE400000000000000;
            unint64_t v15 = 1701080931;
            break;
          case 3:
            unint64_t v17 = "CE";
            goto LABEL_31;
          case 4:
            unint64_t v16 = 0xE400000000000000;
            unint64_t v15 = 1734431845;
            break;
          case 5:
            unint64_t v15 = 0xD000000000000011;
            unint64_t v16 = 0x800000022D2D5810;
            break;
          case 6:
            unint64_t v17 = "geLastFetchedDate";
LABEL_31:
            unint64_t v16 = (unint64_t)v17 | 0x8000000000000000;
            unint64_t v15 = 0xD000000000000015;
            break;
          case 7:
            unint64_t v16 = 0xE700000000000000;
            unint64_t v15 = 0x746E6569746170;
            break;
          case 8:
            unint64_t v15 = 0x5468736572666572;
            unint64_t v16 = 0xEC0000006E656B6FLL;
            break;
          case 9:
            unint64_t v15 = 0x656372756F736572;
            unint64_t v16 = 0xEA00000000004449;
            break;
          case 10:
            unint64_t v15 = 0x44494C44746F6F72;
            break;
          case 11:
            unint64_t v16 = 0xE500000000000000;
            unint64_t v15 = 0x6574617473;
            break;
          default:
            JUMPOUT(0);
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v20 = sub_22D04EB7C(v10, v9);
      uint64_t v21 = v3[2];
      BOOL v22 = (v19 & 1) == 0;
      uint64_t v23 = v21 + v22;
      if (__OFADD__(v21, v22))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        sub_22D2BD6A0();
        __break(1u);
        JUMPOUT(0x22D04D84CLL);
      }
      char v24 = v19;
      if (v3[3] >= v23)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v19) {
            goto LABEL_3;
          }
        }
        else
        {
          sub_22D054AC8();
          if (v24) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        sub_22D0504C8(v23, isUniquelyReferenced_nonNull_native);
        unint64_t v25 = sub_22D04EB7C(v10, v9);
        if ((v24 & 1) != (v26 & 1)) {
          goto LABEL_49;
        }
        unint64_t v20 = v25;
        if (v24)
        {
LABEL_3:
          uint64_t v5 = (unint64_t *)(v3[7] + 16 * v20);
          swift_bridgeObjectRelease();
          *uint64_t v5 = v15;
          v5[1] = v16;
          goto LABEL_4;
        }
      }
      v3[(v20 >> 6) + 8] |= 1 << v20;
      uint64_t v27 = (uint64_t *)(v3[6] + 16 * v20);
      *uint64_t v27 = v10;
      v27[1] = v9;
      uint64_t v28 = (unint64_t *)(v3[7] + 16 * v20);
      *uint64_t v28 = v15;
      v28[1] = v16;
      uint64_t v29 = v3[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_48;
      }
      v3[2] = v31;
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v1;
      uint64_t v2 = a1;
      unsigned int v4 = v34;
      if (!v1) {
        return v3;
      }
    }
  }
  return (void *)MEMORY[0x263F8EE80];
}

{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  char *v4;
  unint64_t *v5;
  char *v6;
  int v7;
  int v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  char v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  unint64_t *v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  char *v34;

  uint64_t v1 = qword_26E05A270;
  if (qword_26E05A270)
  {
    uint64_t v2 = a1;
    int v3 = (void *)MEMORY[0x263F8EE80];
    unsigned int v4 = &byte_26E05A280;
    while (1)
    {
      int v8 = *v4;
      unsigned int v6 = v4 + 1;
      int v7 = v8;
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x4449746E65696C63;
      switch(v8)
      {
        case 1:
          uint64_t v10 = 0x6553746E65696C63;
          unint64_t v9 = 0xEC00000074657263;
          break;
        case 2:
          unint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1701080931;
          break;
        case 3:
          os_log_type_t v11 = "CE";
          goto LABEL_15;
        case 4:
          unint64_t v9 = 0xE400000000000000;
          uint64_t v10 = 1734431845;
          break;
        case 5:
          uint64_t v10 = 0xD000000000000011;
          unint64_t v9 = 0x800000022D2D5810;
          break;
        case 6:
          os_log_type_t v11 = "geLastFetchedDate";
LABEL_15:
          unint64_t v9 = (unint64_t)v11 | 0x8000000000000000;
          uint64_t v10 = 0xD000000000000015;
          break;
        case 7:
          unint64_t v9 = 0xE700000000000000;
          uint64_t v10 = 0x746E6569746170;
          break;
        case 8:
          uint64_t v10 = 0x5468736572666572;
          unint64_t v9 = 0xEC0000006E656B6FLL;
          break;
        case 9:
          uint64_t v10 = 0x656372756F736572;
          unint64_t v9 = 0xEA00000000004449;
          break;
        case 10:
          uint64_t v10 = 0x44494C44746F6F72;
          break;
        case 11:
          unint64_t v9 = 0xE500000000000000;
          uint64_t v10 = 0x6574617473;
          break;
        default:
          break;
      }
      uint64_t v34 = v6;
      if (*(void *)(v2 + 16) && (unint64_t v12 = sub_22D04ED0C(v7), (v13 & 1) != 0))
      {
        uint64_t v14 = (unint64_t *)(*(void *)(v2 + 56) + 16 * v12);
        unint64_t v15 = *v14;
        unint64_t v16 = v14[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v16 = 0xE800000000000000;
        unint64_t v15 = 0x4449746E65696C63;
        switch(v7)
        {
          case 0:
            break;
          case 1:
            unint64_t v15 = 0x6553746E65696C63;
            unint64_t v16 = 0xEC00000074657263;
            break;
          case 2:
            unint64_t v16 = 0xE400000000000000;
            unint64_t v15 = 1701080931;
            break;
          case 3:
            unint64_t v17 = "CE";
            goto LABEL_31;
          case 4:
            unint64_t v16 = 0xE400000000000000;
            unint64_t v15 = 1734431845;
            break;
          case 5:
            unint64_t v15 = 0xD000000000000011;
            unint64_t v16 = 0x800000022D2D5810;
            break;
          case 6:
            unint64_t v17 = "geLastFetchedDate";
LABEL_31:
            unint64_t v16 = (unint64_t)v17 | 0x8000000000000000;
            unint64_t v15 = 0xD000000000000015;
            break;
          case 7:
            unint64_t v16 = 0xE700000000000000;
            unint64_t v15 = 0x746E6569746170;
            break;
          case 8:
            unint64_t v15 = 0x5468736572666572;
            unint64_t v16 = 0xEC0000006E656B6FLL;
            break;
          case 9:
            unint64_t v15 = 0x656372756F736572;
            unint64_t v16 = 0xEA00000000004449;
            break;
          case 10:
            unint64_t v15 = 0x44494C44746F6F72;
            break;
          case 11:
            unint64_t v16 = 0xE500000000000000;
            unint64_t v15 = 0x6574617473;
            break;
          default:
            JUMPOUT(0);
        }
      }
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v20 = sub_22D04EB7C(v10, v9);
      uint64_t v21 = v3[2];
      BOOL v22 = (v19 & 1) == 0;
      uint64_t v23 = v21 + v22;
      if (__OFADD__(v21, v22))
      {
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        sub_22D2BD6A0();
        __break(1u);
        JUMPOUT(0x22D04DE78);
      }
      char v24 = v19;
      if (v3[3] >= v23)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if (v19) {
            goto LABEL_3;
          }
        }
        else
        {
          sub_22D054AC8();
          if (v24) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        sub_22D0504C8(v23, isUniquelyReferenced_nonNull_native);
        unint64_t v25 = sub_22D04EB7C(v10, v9);
        if ((v24 & 1) != (v26 & 1)) {
          goto LABEL_49;
        }
        unint64_t v20 = v25;
        if (v24)
        {
LABEL_3:
          uint64_t v5 = (unint64_t *)(v3[7] + 16 * v20);
          swift_bridgeObjectRelease();
          *uint64_t v5 = v15;
          v5[1] = v16;
          goto LABEL_4;
        }
      }
      v3[(v20 >> 6) + 8] |= 1 << v20;
      uint64_t v27 = (uint64_t *)(v3[6] + 16 * v20);
      *uint64_t v27 = v10;
      v27[1] = v9;
      uint64_t v28 = (unint64_t *)(v3[7] + 16 * v20);
      *uint64_t v28 = v15;
      v28[1] = v16;
      uint64_t v29 = v3[2];
      BOOL v30 = __OFADD__(v29, 1);
      uint64_t v31 = v29 + 1;
      if (v30) {
        goto LABEL_48;
      }
      v3[2] = v31;
      swift_bridgeObjectRetain();
LABEL_4:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v1;
      uint64_t v2 = a1;
      unsigned int v4 = v34;
      if (!v1) {
        return v3;
      }
    }
  }
  return (void *)MEMORY[0x263F8EE80];
}

void *static ContentVariables.allCases.getter()
{
  return &unk_26E05A260;
}

unint64_t ContentVariables.rawValue.getter()
{
  unint64_t result = 0x4449746E65696C63;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x6553746E65696C63;
      break;
    case 2:
      unint64_t result = 1701080931;
      break;
    case 3:
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 1734431845;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 7:
      unint64_t result = 0x746E6569746170;
      break;
    case 8:
      unint64_t result = 0x5468736572666572;
      break;
    case 9:
      unint64_t result = 0x656372756F736572;
      break;
    case 0xA:
      unint64_t result = 0x44494C44746F6F72;
      break;
    case 0xB:
      unint64_t result = 0x6574617473;
      break;
    default:
      return result;
  }
  return result;
}

HealthRecordsDaemon::ContentVariables_optional __swiftcall ContentVariables.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  unint64_t v3 = sub_22D2BD4E0();
  result.value = swift_bridgeObjectRelease();
  char v5 = 12;
  if (v3 < 0xC) {
    char v5 = v3;
  }
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_22D04DF34()
{
  return sub_22D0B9380();
}

uint64_t sub_22D04DF40()
{
  return sub_22D2BD760();
}

uint64_t sub_22D04DFA8()
{
  ContentVariables.rawValue.getter();
  sub_22D2BCC70();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D04E00C()
{
  return sub_22D2BD760();
}

HealthRecordsDaemon::ContentVariables_optional sub_22D04E070(Swift::String *a1)
{
  return ContentVariables.init(rawValue:)(*a1);
}

unint64_t sub_22D04E07C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = ContentVariables.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_22D04E0A4(void *a1@<X8>)
{
  *a1 = &unk_26E05A260;
}

uint64_t static SchemaSubstitutions.geLastFetchedDate(_:)(char *a1)
{
  return sub_22D04E548(a1, 275);
}

uint64_t static SchemaSubstitutions.determineSinceDate(lastFetchDate:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_22D2BBDE0();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v36 = v4;
  MEMORY[0x270FA5388](v4);
  uint64_t v34 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_22D2BBCB0();
  uint64_t v6 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v31);
  int v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_22D2BBE00();
  uint64_t v32 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  MEMORY[0x270FA5388](v9);
  os_log_type_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D055080(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  uint64_t v37 = (uint64_t)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  unint64_t v16 = (char *)v29 - v15;
  uint64_t v17 = sub_22D2BBC30();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  unint64_t v20 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D04BDE8(a1, (uint64_t)v16);
  uint64_t v21 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  if (v21((uint64_t)v16, 1, v17) == 1)
  {
    sub_22D04BD5C((uint64_t)v16);
    return sub_22D2BBB80();
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v29[1] = v18 + 32;
    uint64_t v30 = a2;
    v29[0] = v23;
    v23(v20, v16, v17);
    uint64_t v24 = v31;
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, *MEMORY[0x263F07740], v31);
    sub_22D2BBCC0();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v24);
    unint64_t v25 = v34;
    uint64_t v26 = v35;
    uint64_t v27 = v36;
    (*(void (**)(char *, void, uint64_t))(v35 + 104))(v34, *MEMORY[0x263F078A8], v36);
    uint64_t v28 = v37;
    sub_22D2BBD70();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
    if (v21(v28, 1, v17) == 1)
    {
      sub_22D2BBB80();
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      return sub_22D04BD5C(v37);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v29[0])(v30, v37, v17);
    }
  }
}

uint64_t static SchemaSubstitutions.lastFetchedDate(_:)(uint64_t a1)
{
  return sub_22D04E814(a1, 275);
}

uint64_t static SchemaSubstitutions.geLastFetchedDateTime(_:)(char *a1)
{
  return sub_22D04E548(a1, 1907);
}

uint64_t sub_22D04E548(char *a1, uint64_t a2)
{
  sub_22D055080(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v22 - v5;
  uint64_t v7 = sub_22D2BBC30();
  int v8 = *(void **)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  os_log_type_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v22 - v12;
  uint64_t v14 = (void (*)(char *, char *, uint64_t))v8[2];
  v14(v6, a1, v7);
  uint64_t v15 = (void (*)(char *, void, uint64_t, uint64_t))v8[7];
  v15(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v13);
  sub_22D04BD5C((uint64_t)v6);
  v22[0] = 25959;
  v22[1] = 0xE200000000000000;
  v14(v6, v13, v7);
  v15(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v11);
  sub_22D04BD5C((uint64_t)v6);
  id v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  objc_msgSend(v16, sel_setFormatOptions_, a2);
  uint64_t v17 = (void *)sub_22D2BBBC0();
  id v18 = objc_msgSend(v16, sel_stringFromDate_, v17);

  sub_22D2BCBD0();
  uint64_t v19 = (void (*)(char *, uint64_t))v8[1];
  v19(v11, v7);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  uint64_t v20 = v22[0];
  v19(v13, v7);
  return v20;
}

uint64_t static SchemaSubstitutions.lastFetchedDateTime(_:)(uint64_t a1)
{
  return sub_22D04E814(a1, 1907);
}

uint64_t sub_22D04E814(uint64_t a1, uint64_t a2)
{
  sub_22D055080(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - v5;
  uint64_t v7 = sub_22D2BBC30();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v6, a1, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  static SchemaSubstitutions.determineSinceDate(lastFetchDate:)((uint64_t)v6, (uint64_t)v10);
  sub_22D04BD5C((uint64_t)v6);
  id v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F088C0]), sel_init);
  objc_msgSend(v11, sel_setFormatOptions_, a2);
  uint64_t v12 = (void *)sub_22D2BBBC0();
  id v13 = objc_msgSend(v11, sel_stringFromDate_, v12);

  uint64_t v14 = sub_22D2BCBD0();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v14;
}

unint64_t sub_22D04EA20(uint64_t a1)
{
  sub_22D2BBC90();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07508];
  sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
  uint64_t v3 = sub_22D2BCB30();
  return sub_22D04F898(a1, v3, MEMORY[0x263F07508], &qword_26853E318, v2, MEMORY[0x263F07528]);
}

unint64_t sub_22D04EAF4(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_22D2BD730();
  sub_22D054F04();
  sub_22D2BCB40();
  uint64_t v4 = sub_22D2BD760();
  return sub_22D04EF44(a1, v3, v4);
}

unint64_t sub_22D04EB7C(uint64_t a1, uint64_t a2)
{
  sub_22D2BD730();
  sub_22D2BCC70();
  uint64_t v4 = sub_22D2BD760();
  return sub_22D04F058(a1, a2, v4);
}

unint64_t sub_22D04EBF4(uint64_t a1)
{
  uint64_t v2 = sub_22D2BD190();
  return sub_22D04F13C(a1, v2);
}

unint64_t sub_22D04EC38(uint64_t a1)
{
  sub_22D2BB6F0();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F062D0];
  sub_22D055F68(&qword_26853DF00, MEMORY[0x263F062D0]);
  uint64_t v3 = sub_22D2BCB30();
  return sub_22D04F898(a1, v3, MEMORY[0x263F062D0], &qword_26853E3A8, v2, MEMORY[0x263F062F0]);
}

unint64_t sub_22D04ED0C(unsigned __int8 a1)
{
  sub_22D2BD730();
  ContentVariables.rawValue.getter();
  sub_22D2BCC70();
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_22D2BD760();
  return sub_22D04F258(a1, v2);
}

unint64_t sub_22D04ED98(uint64_t a1)
{
  uint64_t v2 = sub_22D2BD2A0();
  return sub_22D04F658(a1, v2);
}

unint64_t sub_22D04EDDC(uint64_t a1)
{
  sub_22D2BCBD0();
  sub_22D2BD730();
  sub_22D2BCC70();
  uint64_t v2 = sub_22D2BD760();
  swift_bridgeObjectRelease();
  return sub_22D04F720(a1, v2);
}

unint64_t sub_22D04EE70(uint64_t a1)
{
  sub_22D2BBC30();
  uint64_t v2 = (void (*)(uint64_t))MEMORY[0x263F07490];
  sub_22D055F68(&qword_26853E398, MEMORY[0x263F07490]);
  uint64_t v3 = sub_22D2BCB30();
  return sub_22D04F898(a1, v3, MEMORY[0x263F07490], &qword_26853E3A0, v2, MEMORY[0x263F074B0]);
}

unint64_t sub_22D04EF44(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(*(void *)(v3 + 48) + 16 * result);
      if (a2)
      {
        switch(a1)
        {
          case 0:
            if (!v8) {
              return result;
            }
            goto LABEL_4;
          case 1:
            if (v8 == 1) {
              return result;
            }
            goto LABEL_4;
          case 2:
            if (v8 == 2) {
              return result;
            }
            goto LABEL_4;
          case 3:
            if (v8 == 3) {
              return result;
            }
            goto LABEL_4;
          case 4:
            if (v8 == 4) {
              return result;
            }
            goto LABEL_4;
          case 5:
            if (v8 == 5) {
              return result;
            }
            goto LABEL_4;
          case 6:
            if (v8 == 6) {
              return result;
            }
            goto LABEL_4;
          case 7:
            if (v8 == 7) {
              return result;
            }
            goto LABEL_4;
          default:
            JUMPOUT(0);
        }
      }
      if (v8 == a1) {
        break;
      }
LABEL_4:
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_22D04F058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_22D2BD660() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        id v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_22D2BD660() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_22D04F13C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_22D030474(0, (unint64_t *)&qword_26853E2F8);
    id v6 = *(id *)(*(void *)(v2 + 48) + 8 * i);
    char v7 = sub_22D2BD1A0();

    if ((v7 & 1) == 0)
    {
      uint64_t v8 = ~v4;
      for (unint64_t i = (i + 1) & v8; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v8)
      {
        id v9 = *(id *)(*(void *)(v2 + 48) + 8 * i);
        char v10 = sub_22D2BD1A0();

        if (v10) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_22D04F258(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE800000000000000;
      unint64_t v8 = 0x4449746E65696C63;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v8 = 0x6553746E65696C63;
          unint64_t v7 = 0xEC00000074657263;
          break;
        case 2:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1701080931;
          break;
        case 3:
          unint64_t v7 = 0x800000022D2D57F0;
          goto LABEL_10;
        case 4:
          unint64_t v7 = 0xE400000000000000;
          unint64_t v8 = 1734431845;
          break;
        case 5:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x800000022D2D5810;
          break;
        case 6:
          unint64_t v7 = 0x800000022D2D5830;
LABEL_10:
          unint64_t v8 = 0xD000000000000015;
          break;
        case 7:
          unint64_t v7 = 0xE700000000000000;
          unint64_t v8 = 0x746E6569746170;
          break;
        case 8:
          unint64_t v8 = 0x5468736572666572;
          unint64_t v7 = 0xEC0000006E656B6FLL;
          break;
        case 9:
          unint64_t v8 = 0x656372756F736572;
          unint64_t v7 = 0xEA00000000004449;
          break;
        case 0xA:
          unint64_t v8 = 0x44494C44746F6F72;
          break;
        case 0xB:
          unint64_t v7 = 0xE500000000000000;
          unint64_t v8 = 0x6574617473;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE800000000000000;
      switch(v6)
      {
        case 1:
          uint64_t v11 = 0x6553746E65696C63;
          uint64_t v12 = 1952805475;
          goto LABEL_36;
        case 2:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1701080931) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 3:
          unint64_t v9 = 0x800000022D2D57F0;
          goto LABEL_31;
        case 4:
          unint64_t v9 = 0xE400000000000000;
          if (v8 != 1734431845) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 5:
          unint64_t v9 = 0x800000022D2D5810;
          if (v8 != 0xD000000000000011) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 6:
          unint64_t v9 = 0x800000022D2D5830;
LABEL_31:
          if (v8 != 0xD000000000000015) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 7:
          unint64_t v9 = 0xE700000000000000;
          if (v8 != 0x746E6569746170) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 8:
          uint64_t v11 = 0x5468736572666572;
          uint64_t v12 = 1852140399;
LABEL_36:
          unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          if (v8 != v11) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 9:
          unint64_t v9 = 0xEA00000000004449;
          if (v8 != 0x656372756F736572) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 10:
          if (v8 != 0x44494C44746F6F72) {
            goto LABEL_19;
          }
          goto LABEL_18;
        case 11:
          unint64_t v9 = 0xE500000000000000;
          if (v8 != 0x6574617473) {
            goto LABEL_19;
          }
          goto LABEL_18;
        default:
          if (v8 != 0x4449746E65696C63) {
            goto LABEL_19;
          }
LABEL_18:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_19:
          char v10 = sub_22D2BD660();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v10) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_22D04F658(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      sub_22D056AAC(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      char v7 = MEMORY[0x230F7AF10](v9, a1);
      sub_22D056B18((uint64_t)v9);
      if (v7) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_22D04F720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = sub_22D2BCBD0();
    uint64_t v8 = v7;
    if (v6 == sub_22D2BCBD0() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = sub_22D2BCBD0();
          uint64_t v15 = v14;
          if (v13 == sub_22D2BCBD0() && v15 == v16) {
            break;
          }
          char v18 = sub_22D2BD660();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_22D04F898(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  char v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    uint64_t v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_22D055F68(v23, v24);
      char v19 = sub_22D2BCB90();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

uint64_t sub_22D04FA38(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056B6C(0, &qword_26853E2E8, (void (*)(uint64_t))sub_22D02524C);
  char v36 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    uint64_t result = sub_22D2BD760();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D04FD68(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D054F58(0, &qword_26853E2F0, (uint64_t)&qword_26853DDE0, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription, (void (*)(uint64_t, uint64_t, uint64_t))sub_22D0254A4);
  char v36 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v35 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v34) {
      break;
    }
    uint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v35 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v34) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v35 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v34)
        {
LABEL_33:
          swift_release();
          if ((v36 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v35 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v34) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v35 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + 8 * v20);
    if ((v36 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    uint64_t result = sub_22D2BD760();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *uint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v22 = (void *)(v5 + 64);
  if ((v36 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
  if (v33 >= 64) {
    bzero(v22, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v22 = -1 << v33;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D0500A8(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22D2BB6F0();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_22D056ECC();
  int v46 = a2;
  uint64_t v10 = sub_22D2BD490();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  unint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  uint64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  os_log_type_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    char v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_22D055F68(&qword_26853DF00, MEMORY[0x263F062D0]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  char v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *char v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_22D0504C8(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056CE0(0, &qword_26853E370);
  char v42 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v41 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  uint64_t v39 = v2;
  int64_t v40 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v21 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v22 = v21 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v23 >= v40) {
      break;
    }
    int64_t v24 = (void *)(v5 + 64);
    unint64_t v25 = *(void *)(v41 + 8 * v23);
    ++v13;
    if (!v25)
    {
      int64_t v13 = v23 + 1;
      if (v23 + 1 >= v40) {
        goto LABEL_33;
      }
      unint64_t v25 = *(void *)(v41 + 8 * v13);
      if (!v25)
      {
        int64_t v26 = v23 + 2;
        if (v26 >= v40)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v39;
          if ((v42 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v25 = *(void *)(v41 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            int64_t v13 = v26 + 1;
            if (__OFADD__(v26, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v40) {
              goto LABEL_33;
            }
            unint64_t v25 = *(void *)(v41 + 8 * v13);
            ++v26;
            if (v25) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v26;
      }
    }
LABEL_30:
    unint64_t v10 = (v25 - 1) & v25;
    unint64_t v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_31:
    uint64_t v31 = 16 * v22;
    unint64_t v32 = (uint64_t *)(*(void *)(v5 + 48) + v31);
    uint64_t v34 = *v32;
    uint64_t v33 = v32[1];
    unint64_t v35 = (uint64_t *)(*(void *)(v5 + 56) + v31);
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    if ((v42 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    uint64_t result = sub_22D2BD760();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v29 = v16 == v28;
        if (v16 == v28) {
          unint64_t v16 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v11 + 8 * v16);
      }
      while (v30 == -1);
      unint64_t v17 = __clz(__rbit64(~v30)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    uint64_t v18 = 16 * v17;
    unint64_t v19 = (void *)(*(void *)(v7 + 48) + v18);
    void *v19 = v34;
    v19[1] = v33;
    int64_t v20 = (void *)(*(void *)(v7 + 56) + v18);
    *int64_t v20 = v36;
    v20[1] = v37;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v39;
  int64_t v24 = (void *)(v5 + 64);
  if ((v42 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v38 = 1 << *(unsigned char *)(v5 + 32);
  if (v38 >= 64) {
    bzero(v24, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    void *v24 = -1 << v38;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D050808(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v47 = sub_22D2BBC30();
  uint64_t v5 = *(void *)(v47 - 8);
  MEMORY[0x270FA5388](v47);
  int v46 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *v2;
  sub_22D0568EC();
  int v44 = a2;
  uint64_t v8 = sub_22D2BD490();
  uint64_t v9 = v8;
  if (*(void *)(v7 + 16))
  {
    int64_t v40 = v2;
    uint64_t v10 = 1 << *(unsigned char *)(v7 + 32);
    uint64_t v11 = *(void *)(v7 + 64);
    char v42 = (void *)(v7 + 64);
    if (v10 < 64) {
      uint64_t v12 = ~(-1 << v10);
    }
    else {
      uint64_t v12 = -1;
    }
    unint64_t v13 = v12 & v11;
    int64_t v41 = (unint64_t)(v10 + 63) >> 6;
    os_log_type_t v43 = (void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v45 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v14 = v8 + 64;
    uint64_t result = swift_retain();
    int64_t v16 = 0;
    while (1)
    {
      if (v13)
      {
        unint64_t v19 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v20 = v19 | (v16 << 6);
      }
      else
      {
        int64_t v21 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v21 >= v41) {
          goto LABEL_34;
        }
        unint64_t v22 = v42[v21];
        ++v16;
        if (!v22)
        {
          int64_t v16 = v21 + 1;
          if (v21 + 1 >= v41) {
            goto LABEL_34;
          }
          unint64_t v22 = v42[v16];
          if (!v22)
          {
            int64_t v23 = v21 + 2;
            if (v23 >= v41)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v40;
              if (v44)
              {
                uint64_t v39 = 1 << *(unsigned char *)(v7 + 32);
                if (v39 >= 64) {
                  bzero(v42, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v42 = -1 << v39;
                }
                *(void *)(v7 + 16) = 0;
              }
              break;
            }
            unint64_t v22 = v42[v23];
            if (!v22)
            {
              while (1)
              {
                int64_t v16 = v23 + 1;
                if (__OFADD__(v23, 1)) {
                  goto LABEL_41;
                }
                if (v16 >= v41) {
                  goto LABEL_34;
                }
                unint64_t v22 = v42[v16];
                ++v23;
                if (v22) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v16 = v23;
          }
        }
LABEL_21:
        unint64_t v13 = (v22 - 1) & v22;
        unint64_t v20 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      uint64_t v24 = *(void *)(v7 + 56);
      uint64_t v25 = v7;
      uint64_t v26 = *(void *)(v7 + 48) + 16 * v20;
      uint64_t v27 = *(void *)v26;
      char v28 = *(unsigned char *)(v26 + 8);
      uint64_t v29 = v5;
      uint64_t v30 = *(void *)(v5 + 72);
      uint64_t v31 = v24 + v30 * v20;
      if (v44) {
        (*v45)(v46, v31, v47);
      }
      else {
        (*v43)(v46, v31, v47);
      }
      uint64_t v48 = v27;
      char v49 = v28;
      sub_22D2BD730();
      sub_22D054F04();
      sub_22D2BCB40();
      uint64_t result = sub_22D2BD760();
      uint64_t v32 = -1 << *(unsigned char *)(v9 + 32);
      unint64_t v33 = result & ~v32;
      unint64_t v34 = v33 >> 6;
      if (((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6))) != 0)
      {
        unint64_t v17 = __clz(__rbit64((-1 << v33) & ~*(void *)(v14 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v35 = 0;
        unint64_t v36 = (unint64_t)(63 - v32) >> 6;
        do
        {
          if (++v34 == v36 && (v35 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v37 = v34 == v36;
          if (v34 == v36) {
            unint64_t v34 = 0;
          }
          v35 |= v37;
          uint64_t v38 = *(void *)(v14 + 8 * v34);
        }
        while (v38 == -1);
        unint64_t v17 = __clz(__rbit64(~v38)) + (v34 << 6);
      }
      *(void *)(v14 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      uint64_t v18 = *(void *)(v9 + 48) + 16 * v17;
      *(void *)uint64_t v18 = v27;
      *(unsigned char *)(v18 + 8) = v28;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v45)(*(void *)(v9 + 56) + v30 * v17, v46, v47);
      ++*(void *)(v9 + 16);
      uint64_t v7 = v25;
      uint64_t v5 = v29;
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v9;
  return result;
}

uint64_t sub_22D050C00(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22D2BBC90();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_22D0567E0();
  int v46 = a2;
  uint64_t v10 = sub_22D2BD490();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  char v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  int64_t v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  os_log_type_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  unint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    uint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  uint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_22D051020(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056CE0(0, &qword_26AEC1F60);
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_41;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v14 << 6);
      goto LABEL_22;
    }
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v21 >= v11) {
      break;
    }
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v36 + 8 * v21);
    ++v14;
    if (!v23)
    {
      int64_t v14 = v21 + 1;
      if (v21 + 1 >= v11) {
        goto LABEL_34;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v14);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v11)
        {
LABEL_34:
          swift_release();
          if ((a2 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v14 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_43;
            }
            if (v14 >= v11) {
              goto LABEL_34;
            }
            unint64_t v23 = *(void *)(v36 + 8 * v14);
            ++v24;
            if (v23) {
              goto LABEL_21;
            }
          }
        }
        int64_t v14 = v24;
      }
    }
LABEL_21:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v14 << 6);
LABEL_22:
    uint64_t v25 = *(void *)(v5 + 48) + 40 * v20;
    if (a2)
    {
      long long v26 = *(_OWORD *)v25;
      long long v27 = *(_OWORD *)(v25 + 16);
      uint64_t v40 = *(void *)(v25 + 32);
      long long v38 = v26;
      long long v39 = v27;
      sub_22D056B08((_OWORD *)(*(void *)(v5 + 56) + 32 * v20), v37);
    }
    else
    {
      sub_22D056AAC(v25, (uint64_t)&v38);
      sub_22CFF5A90(*(void *)(v5 + 56) + 32 * v20, (uint64_t)v37);
    }
    uint64_t result = sub_22D2BD2A0();
    uint64_t v28 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v29 = result & ~v28;
    unint64_t v30 = v29 >> 6;
    if (((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6))) != 0)
    {
      unint64_t v15 = __clz(__rbit64((-1 << v29) & ~*(void *)(v12 + 8 * (v29 >> 6)))) | v29 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v31 = 0;
      unint64_t v32 = (unint64_t)(63 - v28) >> 6;
      do
      {
        if (++v30 == v32 && (v31 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v33 = v30 == v32;
        if (v30 == v32) {
          unint64_t v30 = 0;
        }
        v31 |= v33;
        uint64_t v34 = *(void *)(v12 + 8 * v30);
      }
      while (v34 == -1);
      unint64_t v15 = __clz(__rbit64(~v34)) + (v30 << 6);
    }
    *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    uint64_t v16 = *(void *)(v7 + 48) + 40 * v15;
    long long v17 = v38;
    long long v18 = v39;
    *(void *)(v16 + 32) = v40;
    *(_OWORD *)uint64_t v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    uint64_t result = (uint64_t)sub_22D056B08(v37, (_OWORD *)(*(void *)(v7 + 56) + 32 * v15));
    ++*(void *)(v7 + 16);
  }
  swift_release();
  unint64_t v22 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v35 = 1 << *(unsigned char *)(v5 + 32);
  if (v35 >= 64) {
    bzero(v22, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v22 = -1 << v35;
  }
  *(void *)(v5 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D051358(uint64_t a1, char a2)
{
  return sub_22D051370(a1, a2, (void (*)(void))sub_22D056958);
}

uint64_t sub_22D051370(uint64_t a1, char a2, void (*a3)(void))
{
  uint64_t v4 = v3;
  uint64_t v6 = *v3;
  a3(0);
  char v37 = a2;
  uint64_t v7 = sub_22D2BD490();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_40;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v36 = v6 + 64;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  else {
    uint64_t v10 = -1;
  }
  unint64_t v11 = v10 & *(void *)(v6 + 64);
  int64_t v35 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v12 = v7 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v35) {
      break;
    }
    unint64_t v23 = (void *)(v6 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v35) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_33:
          swift_release();
          if ((v37 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v35) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v11 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    unint64_t v30 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v21);
    uint64_t v32 = *v30;
    uint64_t v31 = v30[1];
    uint64_t v33 = *(void *)(*(void *)(v6 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    uint64_t result = sub_22D2BD760();
    uint64_t v15 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    unint64_t v19 = (void *)(*(void *)(v8 + 48) + 16 * v18);
    void *v19 = v32;
    v19[1] = v31;
    *(void *)(*(void *)(v8 + 56) + 8 * v18) = v33;
    ++*(void *)(v8 + 16);
  }
  swift_release();
  unint64_t v23 = (void *)(v6 + 64);
  if ((v37 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v6 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v23 = -1 << v34;
  }
  *(void *)(v6 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v4 = v8;
  return result;
}

uint64_t sub_22D051688(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056CE0(0, &qword_26AEC1F58);
  char v6 = a2;
  uint64_t v7 = sub_22D2BD490();
  uint64_t v8 = v7;
  if (*(void *)(v5 + 16))
  {
    uint64_t v9 = 1 << *(unsigned char *)(v5 + 32);
    int64_t v35 = (void *)(v5 + 64);
    if (v9 < 64) {
      uint64_t v10 = ~(-1 << v9);
    }
    else {
      uint64_t v10 = -1;
    }
    unint64_t v11 = v10 & *(void *)(v5 + 64);
    int64_t v34 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v12 = v7 + 64;
    uint64_t result = swift_retain();
    int64_t v14 = 0;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v14 << 6);
      }
      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v19 >= v34) {
          goto LABEL_34;
        }
        unint64_t v20 = v35[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v34) {
            goto LABEL_34;
          }
          unint64_t v20 = v35[v14];
          if (!v20)
          {
            int64_t v21 = v19 + 2;
            if (v21 >= v34)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (v6)
              {
                uint64_t v33 = 1 << *(unsigned char *)(v5 + 32);
                if (v33 >= 64) {
                  bzero(v35, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  *int64_t v35 = -1 << v33;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v20 = v35[v21];
            if (!v20)
            {
              while (1)
              {
                int64_t v14 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_41;
                }
                if (v14 >= v34) {
                  goto LABEL_34;
                }
                unint64_t v20 = v35[v14];
                ++v21;
                if (v20) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v14 = v21;
          }
        }
LABEL_21:
        unint64_t v11 = (v20 - 1) & v20;
        unint64_t v18 = __clz(__rbit64(v20)) + (v14 << 6);
      }
      int64_t v22 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v18);
      uint64_t v24 = *v22;
      uint64_t v23 = v22[1];
      int64_t v25 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v18);
      if (v6)
      {
        sub_22D056B08(v25, v36);
      }
      else
      {
        sub_22CFF5A90((uint64_t)v25, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      sub_22D2BD730();
      sub_22D2BCC70();
      uint64_t result = sub_22D2BD760();
      uint64_t v26 = -1 << *(unsigned char *)(v8 + 32);
      unint64_t v27 = result & ~v26;
      unint64_t v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        unint64_t v15 = __clz(__rbit64((-1 << v27) & ~*(void *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v29 = 0;
        unint64_t v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v31 = v28 == v30;
          if (v28 == v30) {
            unint64_t v28 = 0;
          }
          v29 |= v31;
          uint64_t v32 = *(void *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        unint64_t v15 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(void *)(v12 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      unint64_t v16 = (void *)(*(void *)(v8 + 48) + 16 * v15);
      void *v16 = v24;
      v16[1] = v23;
      uint64_t result = (uint64_t)sub_22D056B08(v36, (_OWORD *)(*(void *)(v8 + 56) + 32 * v15));
      ++*(void *)(v8 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v8;
  return result;
}

uint64_t sub_22D0519AC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056C7C(0, &qword_26853E368);
  char v36 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_39;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  int64_t v35 = (void *)(v5 + 64);
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v34 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  swift_retain();
  int64_t v12 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v12 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      goto LABEL_40;
    }
    if (v21 >= v34) {
      break;
    }
    unint64_t v22 = v35[v21];
    ++v12;
    if (!v22)
    {
      int64_t v12 = v21 + 1;
      if (v21 + 1 >= v34) {
        break;
      }
      unint64_t v22 = v35[v12];
      if (!v22)
      {
        int64_t v23 = v21 + 2;
        if (v23 >= v34) {
          break;
        }
        unint64_t v22 = v35[v23];
        if (!v22)
        {
          while (1)
          {
            int64_t v12 = v23 + 1;
            if (__OFADD__(v23, 1)) {
              goto LABEL_41;
            }
            if (v12 >= v34) {
              goto LABEL_34;
            }
            unint64_t v22 = v35[v12];
            ++v23;
            if (v22) {
              goto LABEL_30;
            }
          }
        }
        int64_t v12 = v23;
      }
    }
LABEL_30:
    unint64_t v10 = (v22 - 1) & v22;
    unint64_t v20 = __clz(__rbit64(v22)) + (v12 << 6);
LABEL_31:
    char v28 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
    char v29 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v20);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    if ((v36 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_22D2BD760();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = v13 & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      goto LABEL_8;
    }
    char v24 = 0;
    unint64_t v25 = (unint64_t)(63 - v14) >> 6;
    do
    {
      if (++v16 == v25 && (v24 & 1) != 0)
      {
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        JUMPOUT(0x22D051E00);
      }
      BOOL v26 = v16 == v25;
      if (v16 == v25) {
        unint64_t v16 = 0;
      }
      v24 |= v26;
      uint64_t v27 = *(void *)(v11 + 8 * v16);
    }
    while (v27 == -1);
    unint64_t v17 = __clz(__rbit64(~v27)) + (v16 << 6);
LABEL_8:
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    *(unsigned char *)(*(void *)(v7 + 48) + v17) = v28;
    unint64_t v18 = (void *)(*(void *)(v7 + 56) + 16 * v17);
    *unint64_t v18 = v30;
    v18[1] = v31;
    ++*(void *)(v7 + 16);
  }
LABEL_34:
  swift_release();
  uint64_t v3 = v2;
  if (v36)
  {
    uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
    if (v32 >= 64) {
      bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
    }
    else {
      *int64_t v35 = -1 << v32;
    }
    *(void *)(v5 + 16) = 0;
  }
LABEL_39:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D051E30(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056C7C(0, (unint64_t *)&qword_26853E358);
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_42;
  }
  uint64_t v33 = v2;
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v34 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  swift_retain();
  int64_t v13 = 0;
LABEL_9:
  if (v10)
  {
    unint64_t v19 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v20 = v19 | (v13 << 6);
    goto LABEL_31;
  }
  int64_t v21 = v13 + 1;
  if (__OFADD__(v13, 1)) {
    goto LABEL_43;
  }
  if (v21 >= v11)
  {
    swift_release();
    uint64_t v3 = v33;
    unint64_t v22 = (void *)(v5 + 64);
    if (a2)
    {
LABEL_38:
      uint64_t v31 = 1 << *(unsigned char *)(v5 + 32);
      if (v31 >= 64) {
        bzero(v22, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
      }
      else {
        *unint64_t v22 = -1 << v31;
      }
      *(void *)(v5 + 16) = 0;
    }
  }
  else
  {
    unint64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v34 + 8 * v21);
    ++v13;
    if (v23) {
      goto LABEL_30;
    }
    int64_t v13 = v21 + 1;
    if (v21 + 1 >= v11) {
      goto LABEL_35;
    }
    unint64_t v23 = *(void *)(v34 + 8 * v13);
    if (v23)
    {
LABEL_30:
      unint64_t v10 = (v23 - 1) & v23;
      unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
      char v29 = *(unsigned char *)(*(void *)(v5 + 48) + v20);
      uint64_t v30 = (_OWORD *)(*(void *)(v5 + 56) + 32 * v20);
      if (a2) {
        sub_22D056B08(v30, v35);
      }
      else {
        sub_22CFF5A90((uint64_t)v30, (uint64_t)v35);
      }
      sub_22D2BD730();
      sub_22D2BCC70();
      swift_bridgeObjectRelease();
      uint64_t v14 = sub_22D2BD760();
      uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v16 = v14 & ~v15;
      unint64_t v17 = v16 >> 6;
      if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
      {
        unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        goto LABEL_8;
      }
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v15) >> 6;
      while (++v17 != v26 || (v25 & 1) == 0)
      {
        BOOL v27 = v17 == v26;
        if (v17 == v26) {
          unint64_t v17 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v12 + 8 * v17);
        if (v28 != -1)
        {
          unint64_t v18 = __clz(__rbit64(~v28)) + (v17 << 6);
LABEL_8:
          *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
          *(unsigned char *)(*(void *)(v7 + 48) + v18) = v29;
          sub_22D056B08(v35, (_OWORD *)(*(void *)(v7 + 56) + 32 * v18));
          ++*(void *)(v7 + 16);
          goto LABEL_9;
        }
      }
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      JUMPOUT(0x22D052290);
    }
    int64_t v24 = v21 + 2;
    if (v24 < v11)
    {
      unint64_t v23 = *(void *)(v34 + 8 * v24);
      if (!v23)
      {
        while (1)
        {
          int64_t v13 = v24 + 1;
          if (__OFADD__(v24, 1)) {
            goto LABEL_44;
          }
          if (v13 >= v11) {
            goto LABEL_35;
          }
          unint64_t v23 = *(void *)(v34 + 8 * v13);
          ++v24;
          if (v23) {
            goto LABEL_30;
          }
        }
      }
      int64_t v13 = v24;
      goto LABEL_30;
    }
LABEL_35:
    swift_release();
    uint64_t v3 = v33;
    if (a2) {
      goto LABEL_38;
    }
  }
LABEL_42:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D0522C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D056B6C(0, &qword_26AEC1F48, (void (*)(uint64_t))sub_22D056BD0);
  char v35 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (*(void *)(v5 + 16))
  {
    uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
    uint64_t v34 = (void *)(v5 + 64);
    if (v8 < 64) {
      uint64_t v9 = ~(-1 << v8);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & *(void *)(v5 + 64);
    int64_t v33 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 64;
    uint64_t result = swift_retain();
    int64_t v13 = 0;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }
      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_40:
          __break(1u);
LABEL_41:
          __break(1u);
          return result;
        }
        if (v18 >= v33) {
          goto LABEL_34;
        }
        unint64_t v19 = v34[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v33) {
            goto LABEL_34;
          }
          unint64_t v19 = v34[v13];
          if (!v19)
          {
            int64_t v20 = v18 + 2;
            if (v20 >= v33)
            {
LABEL_34:
              swift_release();
              uint64_t v3 = v2;
              if (v35)
              {
                uint64_t v32 = 1 << *(unsigned char *)(v5 + 32);
                if (v32 >= 64) {
                  bzero(v34, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                }
                else {
                  void *v34 = -1 << v32;
                }
                *(void *)(v5 + 16) = 0;
              }
              break;
            }
            unint64_t v19 = v34[v20];
            if (!v19)
            {
              while (1)
              {
                int64_t v13 = v20 + 1;
                if (__OFADD__(v20, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_34;
                }
                unint64_t v19 = v34[v13];
                ++v20;
                if (v19) {
                  goto LABEL_21;
                }
              }
            }
            int64_t v13 = v20;
          }
        }
LABEL_21:
        unint64_t v10 = (v19 - 1) & v19;
        unint64_t v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      int64_t v21 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v17);
      uint64_t v23 = *v21;
      uint64_t v22 = v21[1];
      int64_t v24 = (long long *)(*(void *)(v5 + 56) + 40 * v17);
      if (v35)
      {
        sub_22CFF8C10(v24, (uint64_t)v36);
      }
      else
      {
        sub_22CFF4B00((uint64_t)v24, (uint64_t)v36);
        swift_bridgeObjectRetain();
      }
      sub_22D2BD730();
      sub_22D2BCC70();
      uint64_t result = sub_22D2BD760();
      uint64_t v25 = -1 << *(unsigned char *)(v7 + 32);
      unint64_t v26 = result & ~v25;
      unint64_t v27 = v26 >> 6;
      if (((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6))) != 0)
      {
        unint64_t v14 = __clz(__rbit64((-1 << v26) & ~*(void *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        char v28 = 0;
        unint64_t v29 = (unint64_t)(63 - v25) >> 6;
        do
        {
          if (++v27 == v29 && (v28 & 1) != 0)
          {
            __break(1u);
            goto LABEL_40;
          }
          BOOL v30 = v27 == v29;
          if (v27 == v29) {
            unint64_t v27 = 0;
          }
          v28 |= v30;
          uint64_t v31 = *(void *)(v11 + 8 * v27);
        }
        while (v31 == -1);
        unint64_t v14 = __clz(__rbit64(~v31)) + (v27 << 6);
      }
      *(void *)(v11 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      uint64_t v15 = (void *)(*(void *)(v7 + 48) + 16 * v14);
      *uint64_t v15 = v23;
      v15[1] = v22;
      uint64_t result = sub_22CFF8C10(v36, *(void *)(v7 + 56) + 40 * v14);
      ++*(void *)(v7 + 16);
    }
  }
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D0525EC(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D054FC4();
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  char v35 = v2;
  uint64_t v36 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v12 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v14 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v20 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v21 = v20 | (v14 << 6);
      goto LABEL_31;
    }
    int64_t v22 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v22 >= v11) {
      break;
    }
    uint64_t v23 = (void *)(v5 + 64);
    unint64_t v24 = *(void *)(v36 + 8 * v22);
    ++v14;
    if (!v24)
    {
      int64_t v14 = v22 + 1;
      if (v22 + 1 >= v11) {
        goto LABEL_33;
      }
      unint64_t v24 = *(void *)(v36 + 8 * v14);
      if (!v24)
      {
        int64_t v25 = v22 + 2;
        if (v25 >= v11)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((a2 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v24 = *(void *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            int64_t v14 = v25 + 1;
            if (__OFADD__(v25, 1)) {
              goto LABEL_42;
            }
            if (v14 >= v11) {
              goto LABEL_33;
            }
            unint64_t v24 = *(void *)(v36 + 8 * v14);
            ++v25;
            if (v24) {
              goto LABEL_30;
            }
          }
        }
        int64_t v14 = v25;
      }
    }
LABEL_30:
    unint64_t v10 = (v24 - 1) & v24;
    unint64_t v21 = __clz(__rbit64(v24)) + (v14 << 6);
LABEL_31:
    uint64_t v30 = 8 * v21;
    uint64_t v31 = *(void **)(*(void *)(v5 + 48) + v30);
    uint64_t v32 = *(void *)(*(void *)(v5 + 56) + v30);
    if ((a2 & 1) == 0)
    {
      id v33 = v31;
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_22D2BD190();
    uint64_t v15 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v16 = result & ~v15;
    unint64_t v17 = v16 >> 6;
    if (((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      unint64_t v18 = __clz(__rbit64((-1 << v16) & ~*(void *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v26 = 0;
      unint64_t v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v28 = v17 == v27;
        if (v17 == v27) {
          unint64_t v17 = 0;
        }
        v26 |= v28;
        uint64_t v29 = *(void *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      unint64_t v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(void *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    uint64_t v19 = 8 * v18;
    *(void *)(*(void *)(v7 + 48) + v19) = v31;
    *(void *)(*(void *)(v7 + 56) + v19) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  uint64_t v23 = (void *)(v5 + 64);
  if ((a2 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v23 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D0528C0(uint64_t a1, char a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = *v2;
  sub_22D054F58(0, &qword_26AEC1F50, (uint64_t)&qword_26AEC1F30, 0x263F8C6D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_22D030474);
  char v38 = a2;
  uint64_t v6 = sub_22D2BD490();
  uint64_t v7 = v6;
  if (!*(void *)(v5 + 16)) {
    goto LABEL_40;
  }
  uint64_t v8 = 1 << *(unsigned char *)(v5 + 32);
  uint64_t v37 = v5 + 64;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v5 + 64);
  char v35 = v2;
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 64;
  uint64_t result = swift_retain();
  int64_t v13 = 0;
  while (1)
  {
    if (v10)
    {
      unint64_t v19 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v20 = v19 | (v13 << 6);
      goto LABEL_31;
    }
    int64_t v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
    if (v21 >= v36) {
      break;
    }
    int64_t v22 = (void *)(v5 + 64);
    unint64_t v23 = *(void *)(v37 + 8 * v21);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v21 + 1;
      if (v21 + 1 >= v36) {
        goto LABEL_33;
      }
      unint64_t v23 = *(void *)(v37 + 8 * v13);
      if (!v23)
      {
        int64_t v24 = v21 + 2;
        if (v24 >= v36)
        {
LABEL_33:
          swift_release();
          uint64_t v3 = v35;
          if ((v38 & 1) == 0) {
            goto LABEL_40;
          }
          goto LABEL_36;
        }
        unint64_t v23 = *(void *)(v37 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            int64_t v13 = v24 + 1;
            if (__OFADD__(v24, 1)) {
              goto LABEL_42;
            }
            if (v13 >= v36) {
              goto LABEL_33;
            }
            unint64_t v23 = *(void *)(v37 + 8 * v13);
            ++v24;
            if (v23) {
              goto LABEL_30;
            }
          }
        }
        int64_t v13 = v24;
      }
    }
LABEL_30:
    unint64_t v10 = (v23 - 1) & v23;
    unint64_t v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_31:
    uint64_t v29 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v20);
    uint64_t v31 = *v29;
    uint64_t v30 = v29[1];
    uint64_t v32 = *(void **)(*(void *)(v5 + 56) + 8 * v20);
    if ((v38 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      id v33 = v32;
    }
    sub_22D2BD730();
    sub_22D2BCC70();
    uint64_t result = sub_22D2BD760();
    uint64_t v14 = -1 << *(unsigned char *)(v7 + 32);
    unint64_t v15 = result & ~v14;
    unint64_t v16 = v15 >> 6;
    if (((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6))) != 0)
    {
      unint64_t v17 = __clz(__rbit64((-1 << v15) & ~*(void *)(v11 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v25 = 0;
      unint64_t v26 = (unint64_t)(63 - v14) >> 6;
      do
      {
        if (++v16 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v27 = v16 == v26;
        if (v16 == v26) {
          unint64_t v16 = 0;
        }
        v25 |= v27;
        uint64_t v28 = *(void *)(v11 + 8 * v16);
      }
      while (v28 == -1);
      unint64_t v17 = __clz(__rbit64(~v28)) + (v16 << 6);
    }
    *(void *)(v11 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
    unint64_t v18 = (void *)(*(void *)(v7 + 48) + 16 * v17);
    *unint64_t v18 = v31;
    v18[1] = v30;
    *(void *)(*(void *)(v7 + 56) + 8 * v17) = v32;
    ++*(void *)(v7 + 16);
  }
  swift_release();
  uint64_t v3 = v35;
  int64_t v22 = (void *)(v5 + 64);
  if ((v38 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_36:
  uint64_t v34 = 1 << *(unsigned char *)(v5 + 32);
  if (v34 >= 64) {
    bzero(v22, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *int64_t v22 = -1 << v34;
  }
  *(void *)(v5 + 16) = 0;
LABEL_40:
  uint64_t result = swift_release();
  *uint64_t v3 = v7;
  return result;
}

uint64_t sub_22D052BF8(uint64_t a1, int a2)
{
  return sub_22D052C14(a1, a2, (unint64_t *)&qword_26853E348, (unint64_t *)&qword_26AEC2FC8);
}

uint64_t sub_22D052C14(uint64_t a1, int a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v7 = v4;
  uint64_t v9 = sub_22D2BBC90();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *v4;
  sub_22D0569F0(0, a3, a4);
  int v50 = a2;
  uint64_t v14 = sub_22D2BD490();
  uint64_t v15 = v13;
  uint64_t v16 = v14;
  if (!*(void *)(v13 + 16)) {
    goto LABEL_41;
  }
  uint64_t v17 = 1 << *(unsigned char *)(v13 + 32);
  uint64_t v18 = *(void *)(v13 + 64);
  int v46 = (void *)(v13 + 64);
  if (v17 < 64) {
    uint64_t v19 = ~(-1 << v17);
  }
  else {
    uint64_t v19 = -1;
  }
  unint64_t v20 = v19 & v18;
  int v44 = v7;
  int64_t v45 = (unint64_t)(v17 + 63) >> 6;
  uint64_t v47 = (void (**)(char *, unint64_t, uint64_t))(v10 + 16);
  uint64_t v49 = v10;
  int64_t v21 = (void (**)(char *, unint64_t, uint64_t))(v10 + 32);
  uint64_t v22 = v14 + 64;
  uint64_t result = swift_retain();
  int64_t v24 = 0;
  for (i = v15; ; uint64_t v15 = i)
  {
    if (v20)
    {
      unint64_t v26 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_22;
    }
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v28 >= v45) {
      break;
    }
    uint64_t v29 = v46;
    unint64_t v30 = v46[v28];
    ++v24;
    if (!v30)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v45) {
        goto LABEL_34;
      }
      unint64_t v30 = v46[v24];
      if (!v30)
      {
        int64_t v31 = v28 + 2;
        if (v31 >= v45)
        {
LABEL_34:
          swift_release();
          uint64_t v7 = v44;
          if ((v50 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v30 = v46[v31];
        if (!v30)
        {
          while (1)
          {
            int64_t v24 = v31 + 1;
            if (__OFADD__(v31, 1)) {
              goto LABEL_43;
            }
            if (v24 >= v45) {
              goto LABEL_34;
            }
            unint64_t v30 = v46[v24];
            ++v31;
            if (v30) {
              goto LABEL_21;
            }
          }
        }
        int64_t v24 = v31;
      }
    }
LABEL_21:
    unint64_t v20 = (v30 - 1) & v30;
    unint64_t v27 = __clz(__rbit64(v30)) + (v24 << 6);
LABEL_22:
    uint64_t v32 = *(void *)(v49 + 72);
    unint64_t v33 = *(void *)(v15 + 48) + v32 * v27;
    if (v50)
    {
      (*v21)(v12, v33, v9);
      id v34 = *(id *)(*(void *)(v15 + 56) + 8 * v27);
    }
    else
    {
      (*v47)(v12, v33, v9);
      id v34 = *(id *)(*(void *)(v15 + 56) + 8 * v27);
    }
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v35 = -1 << *(unsigned char *)(v16 + 32);
    unint64_t v36 = result & ~v35;
    unint64_t v37 = v36 >> 6;
    if (((-1 << v36) & ~*(void *)(v22 + 8 * (v36 >> 6))) != 0)
    {
      unint64_t v25 = __clz(__rbit64((-1 << v36) & ~*(void *)(v22 + 8 * (v36 >> 6)))) | v36 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v38 = 0;
      unint64_t v39 = (unint64_t)(63 - v35) >> 6;
      do
      {
        if (++v37 == v39 && (v38 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v40 = v37 == v39;
        if (v37 == v39) {
          unint64_t v37 = 0;
        }
        v38 |= v40;
        uint64_t v41 = *(void *)(v22 + 8 * v37);
      }
      while (v41 == -1);
      unint64_t v25 = __clz(__rbit64(~v41)) + (v37 << 6);
    }
    *(void *)(v22 + ((v25 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v25;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v21)(*(void *)(v16 + 48) + v32 * v25, v12, v9);
    *(void *)(*(void *)(v16 + 56) + 8 * v25) = v34;
    ++*(void *)(v16 + 16);
  }
  swift_release();
  uint64_t v7 = v44;
  uint64_t v29 = v46;
  if ((v50 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v42 = 1 << *(unsigned char *)(v15 + 32);
  if (v42 >= 64) {
    bzero(v29, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *uint64_t v29 = -1 << v42;
  }
  *(void *)(v15 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v7 = v16;
  return result;
}

uint64_t sub_22D053050(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22D2BBC90();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_22D055FB0();
  int v46 = a2;
  uint64_t v10 = sub_22D2BD490();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_22D053470(uint64_t a1, char a2)
{
  return sub_22D051370(a1, a2, (void (*)(void))sub_22D056D30);
}

uint64_t sub_22D053488(uint64_t a1, int a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_22D2BBC30();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v2;
  sub_22D056E08();
  int v46 = a2;
  uint64_t v10 = sub_22D2BD490();
  uint64_t v11 = v9;
  uint64_t v12 = v10;
  if (!*(void *)(v11 + 16)) {
    goto LABEL_41;
  }
  uint64_t v13 = 1 << *(unsigned char *)(v11 + 32);
  uint64_t v14 = *(void *)(v11 + 64);
  uint64_t v42 = (void *)(v11 + 64);
  if (v13 < 64) {
    uint64_t v15 = ~(-1 << v13);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v14;
  BOOL v40 = v3;
  int64_t v41 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v43 = (void (**)(char *, unint64_t, uint64_t))(v6 + 16);
  uint64_t v45 = v6;
  uint64_t v17 = (void (**)(char *, unint64_t, uint64_t))(v6 + 32);
  uint64_t v18 = v10 + 64;
  uint64_t result = swift_retain();
  int64_t v20 = 0;
  for (i = v11; ; uint64_t v11 = i)
  {
    if (v16)
    {
      unint64_t v22 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      goto LABEL_22;
    }
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
      return result;
    }
    if (v24 >= v41) {
      break;
    }
    unint64_t v25 = v42;
    unint64_t v26 = v42[v24];
    ++v20;
    if (!v26)
    {
      int64_t v20 = v24 + 1;
      if (v24 + 1 >= v41) {
        goto LABEL_34;
      }
      unint64_t v26 = v42[v20];
      if (!v26)
      {
        int64_t v27 = v24 + 2;
        if (v27 >= v41)
        {
LABEL_34:
          swift_release();
          uint64_t v3 = v40;
          if ((v46 & 1) == 0) {
            goto LABEL_41;
          }
          goto LABEL_37;
        }
        unint64_t v26 = v42[v27];
        if (!v26)
        {
          while (1)
          {
            int64_t v20 = v27 + 1;
            if (__OFADD__(v27, 1)) {
              goto LABEL_43;
            }
            if (v20 >= v41) {
              goto LABEL_34;
            }
            unint64_t v26 = v42[v20];
            ++v27;
            if (v26) {
              goto LABEL_21;
            }
          }
        }
        int64_t v20 = v27;
      }
    }
LABEL_21:
    unint64_t v16 = (v26 - 1) & v26;
    unint64_t v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_22:
    uint64_t v28 = *(void *)(v45 + 72);
    unint64_t v29 = *(void *)(v11 + 48) + v28 * v23;
    if (v46)
    {
      (*v17)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
    }
    else
    {
      (*v43)(v8, v29, v5);
      uint64_t v30 = *(void *)(*(void *)(v11 + 56) + 8 * v23);
      swift_bridgeObjectRetain();
    }
    sub_22D055F68(&qword_26853E398, MEMORY[0x263F07490]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v31 = -1 << *(unsigned char *)(v12 + 32);
    unint64_t v32 = result & ~v31;
    unint64_t v33 = v32 >> 6;
    if (((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      unint64_t v21 = __clz(__rbit64((-1 << v32) & ~*(void *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v34 = 0;
      unint64_t v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_42;
        }
        BOOL v36 = v33 == v35;
        if (v33 == v35) {
          unint64_t v33 = 0;
        }
        v34 |= v36;
        uint64_t v37 = *(void *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      unint64_t v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(void *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))*v17)(*(void *)(v12 + 48) + v28 * v21, v8, v5);
    *(void *)(*(void *)(v12 + 56) + 8 * v21) = v30;
    ++*(void *)(v12 + 16);
  }
  swift_release();
  uint64_t v3 = v40;
  unint64_t v25 = v42;
  if ((v46 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_37:
  uint64_t v38 = 1 << *(unsigned char *)(v11 + 32);
  if (v38 >= 64) {
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  }
  else {
    *unint64_t v25 = -1 << v38;
  }
  *(void *)(v11 + 16) = 0;
LABEL_41:
  uint64_t result = swift_release();
  *uint64_t v3 = v12;
  return result;
}

uint64_t sub_22D0538A8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_22D053900(a1, a2, a3, a4, (void (*)(void))sub_22D054714, (void (*)(void))sub_22D04FA38);
}

uint64_t sub_22D0538D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  return sub_22D053900(a1, a2, a3, a4, (void (*)(void))sub_22D0548E4, (void (*)(void))sub_22D04FD68);
}

uint64_t sub_22D053900(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  uint64_t v9 = v6;
  uint64_t v14 = *v6;
  unint64_t v16 = sub_22D04EB7C(a2, a3);
  uint64_t v17 = *(void *)(v14 + 16);
  BOOL v18 = (v15 & 1) == 0;
  uint64_t v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v20 = v15;
  uint64_t v21 = *(void *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    unint64_t v22 = (void *)*v9;
    if (v20)
    {
LABEL_8:
      uint64_t v23 = v22[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v23 + 8 * v16) = a1;
      return result;
    }
    goto LABEL_11;
  }
  a6();
  unint64_t v25 = sub_22D04EB7C(a2, a3);
  if ((v20 & 1) != (v26 & 1))
  {
LABEL_17:
    uint64_t result = sub_22D2BD6A0();
    __break(1u);
    return result;
  }
  unint64_t v16 = v25;
  unint64_t v22 = (void *)*v9;
  if (v20) {
    goto LABEL_8;
  }
LABEL_11:
  v22[(v16 >> 6) + 8] |= 1 << v16;
  int64_t v27 = (uint64_t *)(v22[6] + 16 * v16);
  *int64_t v27 = a2;
  v27[1] = a3;
  *(void *)(v22[7] + 8 * v16) = a1;
  uint64_t v28 = v22[2];
  BOOL v29 = __OFADD__(v28, 1);
  uint64_t v30 = v28 + 1;
  if (v29)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  void v22[2] = v30;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D053A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *v5;
  unint64_t v14 = sub_22D04EB7C(a3, a4);
  uint64_t v15 = *(void *)(v12 + 16);
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_16;
  }
  char v18 = v13;
  uint64_t v19 = *(void *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0) {
    goto LABEL_7;
  }
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    sub_22D054AC8();
LABEL_7:
    char v20 = (void *)*v6;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = (void *)(v20[7] + 16 * v14);
      uint64_t result = swift_bridgeObjectRelease();
      void *v21 = a1;
      v21[1] = a2;
      return result;
    }
    goto LABEL_11;
  }
  sub_22D0504C8(v17, a5 & 1);
  unint64_t v23 = sub_22D04EB7C(a3, a4);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_17:
    uint64_t result = sub_22D2BD6A0();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = (void *)*v6;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  v20[(v14 >> 6) + 8] |= 1 << v14;
  unint64_t v25 = (uint64_t *)(v20[6] + 16 * v14);
  *unint64_t v25 = a3;
  v25[1] = a4;
  char v26 = (void *)(v20[7] + 16 * v14);
  void *v26 = a1;
  v26[1] = a2;
  uint64_t v27 = v20[2];
  BOOL v28 = __OFADD__(v27, 1);
  uint64_t v29 = v27 + 1;
  if (v28)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v20[2] = v29;
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D053C14(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_22D2BBC90();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (void *)*v3;
  unint64_t v14 = sub_22D04EA20(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v21 + 8 * v14) = a1;
      return result;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_22D056548((void (*)(void))sub_22D0567E0);
    goto LABEL_7;
  }
  sub_22D050C00(v17, a3 & 1);
  unint64_t v23 = sub_22D04EA20(a2);
  if ((v18 & 1) != (v24 & 1))
  {
LABEL_14:
    uint64_t result = sub_22D2BD6A0();
    __break(1u);
    return result;
  }
  unint64_t v14 = v23;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_22D0544C4(v14, (uint64_t)v11, a1, v20);
}

_OWORD *sub_22D053DD0(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_22D04ED98(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_22D055424();
      goto LABEL_7;
    }
    sub_22D051020(v13, a3 & 1);
    unint64_t v19 = sub_22D04ED98(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      BOOL v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      sub_22D056AAC(a2, (uint64_t)v21);
      return sub_22D05457C(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)sub_22D2BD6A0();
    __break(1u);
    return result;
  }
LABEL_7:
  BOOL v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return sub_22D056B08(a1, v17);
}

_OWORD *sub_22D053F1C(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v12 = sub_22D04EB7C(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v11 & 1) == 0;
  uint64_t v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v16 = v11;
  uint64_t v17 = v10[3];
  if (v17 < v15 || (a4 & 1) == 0)
  {
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_22D05562C();
      goto LABEL_7;
    }
    sub_22D051688(v15, a4 & 1);
    unint64_t v21 = sub_22D04EB7C(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      unint64_t v12 = v21;
      char v18 = *v5;
      if (v16) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_22D2BD6A0();
    __break(1u);
    return result;
  }
LABEL_7:
  char v18 = *v5;
  if (v16)
  {
LABEL_8:
    unint64_t v19 = (_OWORD *)(v18[7] + 32 * v12);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
    return sub_22D056B08(a1, v19);
  }
LABEL_13:
  sub_22D0545F8(v12, a2, a3, a1, v18);
  return (_OWORD *)swift_bridgeObjectRetain();
}

uint64_t sub_22D054070(uint64_t a1, uint64_t a2, unsigned __int8 a3, char a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  unint64_t v12 = sub_22D04ED0C(a3);
  uint64_t v13 = *(void *)(v10 + 16);
  BOOL v14 = (v11 & 1) == 0;
  uint64_t result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  char v16 = v11;
  uint64_t v17 = *(void *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0) {
    goto LABEL_7;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_22D055834();
LABEL_7:
    char v18 = (void *)*v5;
    if (v16)
    {
LABEL_8:
      unint64_t v19 = (void *)(v18[7] + 16 * v12);
      uint64_t result = swift_bridgeObjectRelease();
      void *v19 = a1;
      v19[1] = a2;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    *(unsigned char *)(v18[6] + v12) = a3;
    unint64_t v21 = (void *)(v18[7] + 16 * v12);
    void *v21 = a1;
    v21[1] = a2;
    uint64_t v22 = v18[2];
    BOOL v23 = __OFADD__(v22, 1);
    uint64_t v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      return result;
    }
    goto LABEL_14;
  }
  sub_22D0519AC(result, a4 & 1);
  uint64_t result = sub_22D04ED0C(a3);
  if ((v16 & 1) == (v20 & 1))
  {
    unint64_t v12 = result;
    char v18 = (void *)*v5;
    if (v16) {
      goto LABEL_8;
    }
    goto LABEL_11;
  }
LABEL_15:
  uint64_t result = sub_22D2BD6A0();
  __break(1u);
  return result;
}

_OWORD *sub_22D0541B0(_OWORD *a1, char a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = sub_22D04ED0C(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_22D0559EC();
      goto LABEL_7;
    }
    sub_22D051E30(v13, a3 & 1);
    unint64_t v19 = sub_22D04ED0C(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      char v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (_OWORD *)sub_22D2BD6A0();
    __break(1u);
    return result;
  }
LABEL_7:
  char v16 = *v4;
  if (v14)
  {
LABEL_8:
    uint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return sub_22D056B08(a1, v17);
  }
LABEL_13:
  return sub_22D054664(v10, a2, a1, v16);
}

void sub_22D0542EC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = sub_22D2BBC90();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  unint64_t v14 = sub_22D04EA20(a2);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    char v20 = *v4;
    if (v18)
    {
LABEL_8:
      uint64_t v21 = v20[7];

      *(void *)(v21 + 8 * v14) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_22D056288(&qword_26853E350, (unint64_t *)&qword_26AEC2FA8);
    goto LABEL_7;
  }
  sub_22D052C14(v17, a3 & 1, &qword_26853E350, (unint64_t *)&qword_26AEC2FA8);
  unint64_t v22 = sub_22D04EA20(a2);
  if ((v18 & 1) != (v23 & 1))
  {
LABEL_14:
    sub_22D2BD6A0();
    __break(1u);
    return;
  }
  unint64_t v14 = v22;
  char v20 = *v4;
  if (v18) {
    goto LABEL_8;
  }
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  sub_22D0544C4(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_22D0544C4(unint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  uint64_t v9 = sub_22D2BBC90();
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  *(void *)(a4[7] + 8 * a1) = a3;
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

_OWORD *sub_22D05457C(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = sub_22D056B08(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

_OWORD *sub_22D0545F8(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  long long v6 = (void *)(a5[6] + 16 * a1);
  *long long v6 = a2;
  v6[1] = a3;
  uint64_t result = sub_22D056B08(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

_OWORD *sub_22D054664(unint64_t a1, char a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(unsigned char *)(a4[6] + a1) = a2;
  uint64_t result = sub_22D056B08(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v6 = a4[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

unint64_t sub_22D0546CC(unint64_t result, uint64_t a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  uint64_t v4 = 8 * result;
  *(void *)(a4[6] + v4) = a2;
  *(void *)(a4[7] + v4) = a3;
  uint64_t v5 = a4[2];
  BOOL v6 = __OFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (v6) {
    __break(1u);
  }
  else {
    a4[2] = v7;
  }
  return result;
}

void *sub_22D054714()
{
  uint64_t v1 = v0;
  sub_22D056B6C(0, &qword_26853E2E8, (void (*)(uint64_t))sub_22D02524C);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (void *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v18 = v17[1];
    uint64_t v19 = 8 * v15;
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + v19);
    uint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = *v17;
    v21[1] = v18;
    *(void *)(*(void *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22D0548E4()
{
  uint64_t v1 = v0;
  sub_22D054F58(0, &qword_26853E2F0, (uint64_t)&qword_26853DDE0, (uint64_t)&type metadata for QuerySummary.QueryOutputDescription, (void (*)(uint64_t, uint64_t, uint64_t))sub_22D0254A4);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v12) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v8;
    if (!v22)
    {
      int64_t v8 = v21 + 1;
      if (v21 + 1 >= v12) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v8);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v11 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_9:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (void *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v17 = v16[1];
    uint64_t v18 = 8 * v14;
    uint64_t v19 = *(void *)(*(void *)(v2 + 56) + v18);
    uint64_t v20 = (void *)(*(void *)(v4 + 48) + v15);
    *uint64_t v20 = *v16;
    v20[1] = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v12) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v8 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v8);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void *sub_22D054AC8()
{
  uint64_t v1 = v0;
  sub_22D056CE0(0, &qword_26853E370);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v25 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v26 - 1) & v26;
    unint64_t v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + v16);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = (uint64_t *)(*(void *)(v2 + 56) + v16);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    int64_t v23 = (void *)(*(void *)(v4 + 48) + v16);
    *int64_t v23 = v19;
    v23[1] = v18;
    int64_t v24 = (void *)(*(void *)(v4 + 56) + v16);
    void *v24 = v21;
    v24[1] = v22;
    swift_bridgeObjectRetain();
    uint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v13) {
    goto LABEL_26;
  }
  unint64_t v26 = *(void *)(v6 + 8 * v27);
  if (v26)
  {
    int64_t v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v9);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

unint64_t sub_22D054CA0()
{
  unint64_t result = qword_26853E2C8;
  if (!qword_26853E2C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E2C8);
  }
  return result;
}

unint64_t sub_22D054CF8()
{
  unint64_t result = qword_26853E2D0;
  if (!qword_26853E2D0)
  {
    sub_22D0254A4(255, &qword_26853E2D8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E2D0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ContentVariables(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF5) {
    goto LABEL_17;
  }
  if (a2 + 11 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 11) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 11;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 11;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xC;
  int v8 = v6 - 12;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ContentVariables(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *unint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D054EBCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ContentVariables()
{
  return &type metadata for ContentVariables;
}

ValueMetadata *type metadata accessor for SchemaSubstitutions()
{
  return &type metadata for SchemaSubstitutions;
}

unint64_t sub_22D054F04()
{
  unint64_t result = qword_26853E2E0;
  if (!qword_26853E2E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E2E0);
  }
  return result;
}

void sub_22D054F58(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = sub_22D2BD4B0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_22D054FC4()
{
  if (!qword_26853E300)
  {
    sub_22D030474(255, (unint64_t *)&qword_26853E2F8);
    sub_22D055080(255, &qword_26853E308, MEMORY[0x263F062D0], MEMORY[0x263F8D488]);
    sub_22D0550E4();
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E300);
    }
  }
}

void sub_22D055080(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_22D0550E4()
{
  unint64_t result = qword_26853E310;
  if (!qword_26853E310)
  {
    sub_22D030474(255, (unint64_t *)&qword_26853E2F8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E310);
  }
  return result;
}

void *sub_22D05514C()
{
  uint64_t v36 = sub_22D2BBC30();
  uint64_t v1 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  int v3 = (char *)&v30 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0568EC();
  uint64_t v31 = v0;
  uint64_t v4 = *v0;
  uint64_t v5 = sub_22D2BD480();
  uint64_t v6 = *(void *)(v4 + 16);
  uint64_t v37 = v5;
  if (!v6)
  {
    unint64_t result = (void *)swift_release();
    uint64_t v29 = v37;
    BOOL v28 = v31;
LABEL_28:
    *BOOL v28 = v29;
    return result;
  }
  uint64_t v7 = v5;
  unint64_t result = (void *)(v5 + 64);
  unint64_t v9 = (unint64_t)((1 << *(unsigned char *)(v7 + 32)) + 63) >> 6;
  if (v7 != v4 || (unint64_t)result >= v4 + 64 + 8 * v9)
  {
    unint64_t result = memmove(result, (const void *)(v4 + 64), 8 * v9);
    uint64_t v7 = v37;
  }
  uint64_t v32 = v4 + 64;
  int64_t v11 = 0;
  *(void *)(v7 + 16) = *(void *)(v4 + 16);
  uint64_t v12 = 1 << *(unsigned char *)(v4 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & *(void *)(v4 + 64);
  uint64_t v35 = v1 + 16;
  int64_t v33 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v34 = v1 + 32;
  for (uint64_t i = v36;
        ;
        unint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v1 + 32))(*(void *)(v23 + 56) + v22, v3, i))
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v17 = v16 | (v11 << 6);
      goto LABEL_12;
    }
    int64_t v25 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v25);
    ++v11;
    if (!v26)
    {
      int64_t v11 = v25 + 1;
      if (v25 + 1 >= v33) {
        goto LABEL_26;
      }
      unint64_t v26 = *(void *)(v32 + 8 * v11);
      if (!v26) {
        break;
      }
    }
LABEL_25:
    unint64_t v14 = (v26 - 1) & v26;
    unint64_t v17 = __clz(__rbit64(v26)) + (v11 << 6);
LABEL_12:
    uint64_t v18 = 16 * v17;
    uint64_t v19 = *(void *)(v4 + 48) + 16 * v17;
    uint64_t v20 = *(void *)v19;
    char v21 = *(unsigned char *)(v19 + 8);
    unint64_t v22 = *(void *)(v1 + 72) * v17;
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v3, *(void *)(v4 + 56) + v22, i);
    uint64_t v23 = v37;
    uint64_t v24 = *(void *)(v37 + 48) + v18;
    *(void *)uint64_t v24 = v20;
    *(unsigned char *)(v24 + 8) = v21;
  }
  int64_t v27 = v25 + 2;
  if (v27 >= v33)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    BOOL v28 = v31;
    uint64_t v29 = v37;
    goto LABEL_28;
  }
  unint64_t v26 = *(void *)(v32 + 8 * v27);
  if (v26)
  {
    int64_t v11 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v11 = v27 + 1;
    if (__OFADD__(v27, 1)) {
      break;
    }
    if (v11 >= v33) {
      goto LABEL_26;
    }
    unint64_t v26 = *(void *)(v32 + 8 * v11);
    ++v27;
    if (v26) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22D05540C()
{
  return sub_22D056548((void (*)(void))sub_22D0567E0);
}

void *sub_22D055424()
{
  uint64_t v1 = v0;
  sub_22D056CE0(0, &qword_26AEC1F60);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v22 - 1) & v22;
    unint64_t v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 40 * v15;
    sub_22D056AAC(*(void *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    uint64_t v17 = 32 * v15;
    sub_22CFF5A90(*(void *)(v2 + 56) + v17, (uint64_t)v24);
    uint64_t v18 = *(void *)(v4 + 48) + v16;
    long long v19 = v25[0];
    long long v20 = v25[1];
    *(void *)(v18 + 32) = v26;
    *(_OWORD *)uint64_t v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    unint64_t result = sub_22D056B08(v24, (_OWORD *)(*(void *)(v4 + 56) + v17));
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v13) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v9);
    ++v23;
    if (v22) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22D05562C()
{
  uint64_t v1 = v0;
  sub_22D056CE0(0, &qword_26AEC1F58);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    uint64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 32 * v15;
    sub_22CFF5A90(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    int64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_22D056B08(v26, (_OWORD *)(*(void *)(v4 + 56) + v20));
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22D055834()
{
  uint64_t v1 = v0;
  sub_22D056C7C(0, &qword_26853E368);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = (uint64_t *)(*(void *)(v2 + 56) + 16 * v15);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    uint64_t v19 = (void *)(*(void *)(v4 + 56) + 16 * v15);
    void *v19 = v18;
    v19[1] = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22D0559EC()
{
  uint64_t v1 = v0;
  sub_22D056C7C(0, (unint64_t *)&qword_26853E358);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v18 - 1) & v18;
    unint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    char v16 = *(unsigned char *)(*(void *)(v2 + 48) + v15);
    sub_22CFF5A90(*(void *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(unsigned char *)(*(void *)(v4 + 48) + v15) = v16;
    unint64_t result = sub_22D056B08(v20, (_OWORD *)(*(void *)(v4 + 56) + 32 * v15));
  }
  int64_t v19 = v17 + 2;
  if (v19 >= v13) {
    goto LABEL_26;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22D055BBC()
{
  uint64_t v1 = v0;
  sub_22D056B6C(0, &qword_26AEC1F48, (void (*)(uint64_t))sub_22D056BD0);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    unint64_t result = (void *)swift_release();
LABEL_28:
    uint64_t *v1 = v4;
    return result;
  }
  int64_t v25 = v1;
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      int64_t v9 = v22 + 1;
      if (v22 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v6 + 8 * v9);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v23 - 1) & v23;
    unint64_t v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 16 * v15;
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * v15);
    uint64_t v19 = *v17;
    uint64_t v18 = v17[1];
    uint64_t v20 = 40 * v15;
    sub_22CFF4B00(*(void *)(v2 + 56) + 40 * v15, (uint64_t)v26);
    unint64_t v21 = (void *)(*(void *)(v4 + 48) + v16);
    void *v21 = v19;
    v21[1] = v18;
    sub_22CFF8C10(v26, *(void *)(v4 + 56) + v20);
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t v1 = v25;
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v6 + 8 * v24);
  if (v23)
  {
    int64_t v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v6 + 8 * v9);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

void *sub_22D055DC0()
{
  uint64_t v1 = v0;
  sub_22D054FC4();
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_26:
    unint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  unint64_t result = (void *)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7) {
    unint64_t result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = -1;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 64);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_26;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21) {
        break;
      }
    }
LABEL_25:
    unint64_t v12 = (v21 - 1) & v21;
    unint64_t v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    uint64_t v16 = 8 * v15;
    int64_t v17 = *(void **)(*(void *)(v2 + 48) + v16);
    uint64_t v18 = *(void *)(*(void *)(v2 + 56) + v16);
    *(void *)(*(void *)(v4 + 48) + v16) = v17;
    *(void *)(*(void *)(v4 + 56) + v16) = v18;
    id v19 = v17;
    unint64_t result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v22 = v20 + 2;
  if (v22 >= v13) {
    goto LABEL_26;
  }
  unint64_t v21 = *(void *)(v6 + 8 * v22);
  if (v21)
  {
    int64_t v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v9 >= v13) {
      goto LABEL_26;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v9);
    ++v22;
    if (v21) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_22D055F68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D055FB0()
{
  if (!qword_26853E320)
  {
    sub_22D2BBC90();
    sub_22D055080(255, &qword_26AEC2268, MEMORY[0x263F44A78], MEMORY[0x263F8D488]);
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E320);
    }
  }
}

id sub_22D05608C()
{
  uint64_t v1 = v0;
  sub_22D054F58(0, &qword_26AEC1F50, (uint64_t)&qword_26AEC1F30, 0x263F8C6D0, (void (*)(uint64_t, uint64_t, uint64_t))sub_22D030474);
  uint64_t v2 = *v0;
  uint64_t v3 = sub_22D2BD480();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_23:
    id result = (id)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  id result = (id)(v3 + 64);
  uint64_t v6 = v2 + 64;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v6 + 8 * v7) {
    id result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  }
  int64_t v8 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v9 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(v2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_9;
    }
    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v21 >= v12) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v8;
    if (!v22)
    {
      int64_t v8 = v21 + 1;
      if (v21 + 1 >= v12) {
        goto LABEL_23;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v8);
      if (!v22) {
        break;
      }
    }
LABEL_22:
    unint64_t v11 = (v22 - 1) & v22;
    unint64_t v14 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_9:
    uint64_t v15 = 16 * v14;
    uint64_t v16 = (void *)(*(void *)(v2 + 48) + 16 * v14);
    uint64_t v17 = v16[1];
    uint64_t v18 = 8 * v14;
    id v19 = *(void **)(*(void *)(v2 + 56) + v18);
    int64_t v20 = (void *)(*(void *)(v4 + 48) + v15);
    *int64_t v20 = *v16;
    v20[1] = v17;
    *(void *)(*(void *)(v4 + 56) + v18) = v19;
    swift_bridgeObjectRetain();
    id result = v19;
  }
  int64_t v23 = v21 + 2;
  if (v23 >= v12) {
    goto LABEL_23;
  }
  unint64_t v22 = *(void *)(v6 + 8 * v23);
  if (v22)
  {
    int64_t v8 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v8 >= v12) {
      goto LABEL_23;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v8);
    ++v23;
    if (v22) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_22D05626C()
{
  return sub_22D056288((unint64_t *)&qword_26853E348, (unint64_t *)&qword_26AEC2FC8);
}

id sub_22D056288(unint64_t *a1, unint64_t *a2)
{
  uint64_t v5 = sub_22D2BBC90();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  int64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0569F0(0, a1, a2);
  BOOL v28 = v2;
  uint64_t v9 = *v2;
  uint64_t v10 = sub_22D2BD480();
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
LABEL_26:
    id result = (id)swift_release();
    *BOOL v28 = v11;
    return result;
  }
  id result = (id)(v10 + 64);
  unint64_t v13 = (unint64_t)((1 << *(unsigned char *)(v11 + 32)) + 63) >> 6;
  if (v11 != v9 || (unint64_t)result >= v9 + 64 + 8 * v13) {
    id result = memmove(result, (const void *)(v9 + 64), 8 * v13);
  }
  uint64_t v29 = v9 + 64;
  int64_t v15 = 0;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v16 = 1 << *(unsigned char *)(v9 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & *(void *)(v9 + 64);
  uint64_t v32 = v6 + 16;
  int64_t v30 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v31 = v6 + 32;
  while (1)
  {
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v20 = v19 | (v15 << 6);
      goto LABEL_12;
    }
    int64_t v24 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v24 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v24);
    ++v15;
    if (!v25)
    {
      int64_t v15 = v24 + 1;
      if (v24 + 1 >= v30) {
        goto LABEL_26;
      }
      unint64_t v25 = *(void *)(v29 + 8 * v15);
      if (!v25) {
        break;
      }
    }
LABEL_25:
    unint64_t v18 = (v25 - 1) & v25;
    unint64_t v20 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_12:
    unint64_t v21 = *(void *)(v6 + 72) * v20;
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v8, *(void *)(v9 + 48) + v21, v5);
    uint64_t v22 = 8 * v20;
    int64_t v23 = *(void **)(*(void *)(v9 + 56) + v22);
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(*(void *)(v11 + 48) + v21, v8, v5);
    *(void *)(*(void *)(v11 + 56) + v22) = v23;
    id result = v23;
  }
  int64_t v26 = v24 + 2;
  if (v26 >= v30) {
    goto LABEL_26;
  }
  unint64_t v25 = *(void *)(v29 + 8 * v26);
  if (v25)
  {
    int64_t v15 = v26;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v15 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v15 >= v30) {
      goto LABEL_26;
    }
    unint64_t v25 = *(void *)(v29 + 8 * v15);
    ++v26;
    if (v25) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_22D056530()
{
  return sub_22D056548((void (*)(void))sub_22D055FB0);
}

void *sub_22D056548(void (*a1)(void))
{
  uint64_t v3 = sub_22D2BBC90();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(0);
  int64_t v26 = v1;
  uint64_t v7 = *v1;
  uint64_t v8 = sub_22D2BD480();
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
LABEL_26:
    id result = (void *)swift_release();
    uint64_t *v26 = v9;
    return result;
  }
  id result = (void *)(v8 + 64);
  unint64_t v11 = (unint64_t)((1 << *(unsigned char *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11) {
    id result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  }
  int64_t v13 = 0;
  *(void *)(v9 + 16) = *(void *)(v7 + 16);
  uint64_t v14 = 1 << *(unsigned char *)(v7 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & *(void *)(v7 + 64);
  uint64_t v27 = v7 + 64;
  int64_t v28 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v29 = v4 + 32;
  uint64_t v30 = v4 + 16;
  while (1)
  {
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v18 = v17 | (v13 << 6);
      goto LABEL_12;
    }
    int64_t v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v22);
    ++v13;
    if (!v23)
    {
      int64_t v13 = v22 + 1;
      if (v22 + 1 >= v28) {
        goto LABEL_26;
      }
      unint64_t v23 = *(void *)(v27 + 8 * v13);
      if (!v23) {
        break;
      }
    }
LABEL_25:
    unint64_t v16 = (v23 - 1) & v23;
    unint64_t v18 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    unint64_t v19 = *(void *)(v4 + 72) * v18;
    (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v6, *(void *)(v7 + 48) + v19, v3);
    uint64_t v20 = 8 * v18;
    uint64_t v21 = *(void *)(*(void *)(v7 + 56) + 8 * v18);
    (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(*(void *)(v9 + 48) + v19, v6, v3);
    *(void *)(*(void *)(v9 + 56) + v20) = v21;
    id result = (void *)swift_bridgeObjectRetain();
  }
  int64_t v24 = v22 + 2;
  if (v24 >= v28) {
    goto LABEL_26;
  }
  unint64_t v23 = *(void *)(v27 + 8 * v24);
  if (v23)
  {
    int64_t v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v13 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v13 >= v28) {
      goto LABEL_26;
    }
    unint64_t v23 = *(void *)(v27 + 8 * v13);
    ++v24;
    if (v23) {
      goto LABEL_25;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_22D0567E0()
{
  if (!qword_26853E328)
  {
    sub_22D2BBC90();
    sub_22D05688C();
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E328);
    }
  }
}

void sub_22D05688C()
{
  if (!qword_26AEC2F98)
  {
    unint64_t v0 = sub_22D2BCF40();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2F98);
    }
  }
}

void sub_22D0568EC()
{
  if (!qword_26853E330)
  {
    sub_22D2BBC30();
    sub_22D054F04();
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E330);
    }
  }
}

void sub_22D056958()
{
  if (!qword_26853E338)
  {
    sub_22D055080(255, &qword_26853E340, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, MEMORY[0x263F8D488]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E338);
    }
  }
}

void sub_22D0569F0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_22D2BBC90();
    sub_22D030474(255, a3);
    sub_22D055F68((unint64_t *)&qword_26AEC0F50, MEMORY[0x263F07508]);
    unint64_t v5 = sub_22D2BD4B0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_22D056AAC(uint64_t a1, uint64_t a2)
{
  return a2;
}

_OWORD *sub_22D056B08(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_22D056B18(uint64_t a1)
{
  return a1;
}

void sub_22D056B6C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD4B0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_22D056BD0()
{
  unint64_t result = qword_26AEC1130;
  if (!qword_26AEC1130)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEC1130);
  }
  return result;
}

unint64_t sub_22D056C28()
{
  unint64_t result = qword_26853E360;
  if (!qword_26853E360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E360);
  }
  return result;
}

void sub_22D056C7C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_22D056C28();
    unint64_t v3 = sub_22D2BD4B0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_22D056CE0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = sub_22D2BD4B0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_22D056D30()
{
  if (!qword_26853E378)
  {
    sub_22D056DB0(255, &qword_26853E380, &qword_26853E388);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E378);
    }
  }
}

void sub_22D056DB0(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_22D030474(255, a3);
    unint64_t v4 = sub_22D2BCE60();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void sub_22D056E08()
{
  if (!qword_26853E390)
  {
    sub_22D2BBC30();
    sub_22D056DB0(255, &qword_26853E380, &qword_26853E388);
    sub_22D055F68(&qword_26853E398, MEMORY[0x263F07490]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E390);
    }
  }
}

void sub_22D056ECC()
{
  if (!qword_26853DEF8)
  {
    sub_22D2BB6F0();
    sub_22D056DB0(255, (unint64_t *)&qword_26853D770, (unint64_t *)&qword_26853D778);
    sub_22D055F68(&qword_26853DF00, MEMORY[0x263F062D0]);
    unint64_t v0 = sub_22D2BD4B0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DEF8);
    }
  }
}

unint64_t sub_22D056F94()
{
  unint64_t result = qword_26AEC3068;
  if (!qword_26AEC3068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC3068);
  }
  return result;
}

uint64_t sub_22D056FE8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBC90();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v90 = a3;
  if (a1 >> 62) {
    goto LABEL_57;
  }
  uint64_t v10 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  for (; v10; uint64_t v10 = sub_22D2BD470())
  {
    unint64_t v11 = 0;
    unint64_t v87 = a1 & 0xC000000000000001;
    unint64_t v83 = a1 + 32;
    uint64_t v84 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v66 = (void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    uint64_t v85 = (void (**)(char *, uint64_t))(v7 + 8);
    int64_t v12 = (SEL *)&property descriptor for PBUpdateParameters.mailboxID;
    uint64_t v68 = v6;
    uint64_t v67 = v7;
    uint64_t v78 = v9;
    uint64_t v86 = v10;
    while (v87)
    {
      uint64_t v14 = MEMORY[0x230F7AF90](v11, a1);
      BOOL v15 = __OFADD__(v11++, 1);
      if (v15) {
        goto LABEL_55;
      }
LABEL_13:
      uint64_t v16 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v14 + v16), v12[227]) == (id)2)
      {
        if (objc_msgSend(*(id *)(v14 + v16), sel_multiDeviceStatus) != (id)2
          && objc_msgSend(*(id *)(v14 + v16), sel_multiDeviceStatus) != (id)4
          && ((uint64_t v23 = *(void *)(v14
                               + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo
                               + 8)) == 0
           || (*(void *)(v14
                         + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(void *)(v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)
             ? (BOOL v24 = v23 == *(void *)(v14
                                       + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID
                                       + 8))
             : (BOOL v24 = 0),
               v24 || (sub_22D2BD660() & 1) != 0))
          || objc_msgSend(*(id *)(v14 + v16), sel_multiDeviceStatus) == (id)3)
        {
          if (!*(void *)(v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error))
          {
            int64_t v26 = (void *)(v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
            uint64_t v27 = *(void *)(v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
            if (v27)
            {
              uint64_t v77 = a2;
              uint64_t v29 = v26[1];
              uint64_t v28 = v26[2];
              uint64_t v30 = v26[3];
              uint64_t v31 = v26[4];
              unint64_t v33 = v26[5];
              uint64_t v32 = v26[6];
              uint64_t v34 = v26[7];
              uint64_t v35 = v26[8];
              uint64_t v37 = v26[9];
              uint64_t v36 = v26[10];
              int v88 = (void *)v27;
              uint64_t v70 = v36;
              uint64_t v71 = v37;
              uint64_t v72 = v35;
              uint64_t v82 = v28;
              uint64_t v73 = v34;
              uint64_t v74 = v32;
              sub_22D057BD8(v27, v29, v28, v30, v31, v33);
              uint64_t v76 = v27;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v75 = v29;
              sub_22D23E858(v29);
              uint64_t v38 = v88;
              swift_bridgeObjectRetain();
              sub_22CFF9B64(v31, v33);
              uint64_t v81 = v30;
              swift_bridgeObjectRetain();
              unint64_t v79 = v33;
              uint64_t v80 = v31;
              sub_22CFF9B64(v31, v33);
              swift_bridgeObjectRetain();
              uint64_t v39 = v38;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v39 = sub_22D2812F8(0, v38[2] + 1, 1, v38);
              }
              unint64_t v41 = v39[2];
              unint64_t v40 = v39[3];
              uint64_t v42 = (uint64_t)v78;
              if (v41 >= v40 >> 1) {
                uint64_t v39 = sub_22D2812F8((void *)(v40 > 1), v41 + 1, 1, v39);
              }
              v39[2] = v41 + 1;
              uint64_t v43 = &v39[4 * v41];
              uint64_t v44 = v81;
              v43[4] = v82;
              void v43[5] = v44;
              unint64_t v46 = v79;
              uint64_t v45 = v80;
              v43[6] = v80;
              v43[7] = v46;
              swift_bridgeObjectRelease();
              sub_22CFF5630(v45, v46);
              swift_bridgeObjectRelease();
              (*v66)(v42, v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v6);
              uint64_t v47 = v39;
              int64_t v48 = v39[2];
              uint64_t v69 = v47;
              if (v48)
              {
                unint64_t v65 = a1;
                int v88 = (void *)MEMORY[0x263F8EE78];
                sub_22D24B86C(0, v48, 0);
                uint64_t v49 = (uint64_t)v88;
                int v50 = v47 + 5;
                do
                {
                  uint64_t v51 = *(v50 - 1);
                  uint64_t v52 = *v50;
                  int v88 = (void *)v49;
                  unint64_t v54 = *(void *)(v49 + 16);
                  unint64_t v53 = *(void *)(v49 + 24);
                  swift_bridgeObjectRetain();
                  if (v54 >= v53 >> 1)
                  {
                    sub_22D24B86C(v53 > 1, v54 + 1, 1);
                    uint64_t v49 = (uint64_t)v88;
                  }
                  v50 += 4;
                  *(void *)(v49 + 16) = v54 + 1;
                  uint64_t v55 = v49 + 16 * v54;
                  *(void *)(v55 + 32) = v51;
                  *(void *)(v55 + 40) = v52;
                  --v48;
                }
                while (v48);
                a1 = v65;
              }
              else
              {
                uint64_t v49 = MEMORY[0x263F8EE78];
              }
              uint64_t v89 = sub_22D2BCF30();
              uint64_t v56 = *(void *)(v49 + 16);
              uint64_t v57 = v77;
              if (v56)
              {
                uint64_t v58 = (uint64_t *)(v49 + 40);
                do
                {
                  uint64_t v59 = *(v58 - 1);
                  uint64_t v60 = *v58;
                  swift_bridgeObjectRetain();
                  sub_22D232188((uint64_t *)&v88, v59, v60);
                  swift_bridgeObjectRelease();
                  v58 += 2;
                  --v56;
                }
                while (v56);
              }
              swift_bridgeObjectRelease();
              uint64_t v61 = v89;
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              int v88 = (void *)v57;
              uint64_t v9 = v78;
              sub_22D053C14(v61, (uint64_t)v78, isUniquelyReferenced_nonNull_native);
              a2 = (uint64_t)v88;
              swift_bridgeObjectRelease();
              uint64_t v6 = v68;
              (*v85)(v9, v68);
              uint64_t v63 = swift_bridgeObjectRetain();
              sub_22D23E858(v63);
              swift_bridgeObjectRelease();
              swift_release();
              sub_22D057C70(v76, v75, v82, v81, v80, v79);
              uint64_t v7 = v67;
              goto LABEL_5;
            }
          }
        }
      }
      id v17 = *(id *)(v14 + v16);
      if ([v17 v12[227]] == (id)3
        || [v17 v12[227]] == (id)4
        || [v17 v12[227]] == (id)5
        || objc_msgSend(v17, sel_featureStatus) == (id)4)
      {

LABEL_24:
        uint64_t v18 = v14 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID;
        swift_bridgeObjectRetain();
        unint64_t v19 = sub_22D04EA20(v18);
        char v21 = v20;
        swift_bridgeObjectRelease();
        if (v21)
        {
          char v22 = swift_isUniquelyReferenced_nonNull_native();
          int v88 = (void *)a2;
          uint64_t v13 = v86;
          if ((v22 & 1) == 0)
          {
            sub_22D05540C();
            a2 = (uint64_t)v88;
          }
          (*(void (**)(unint64_t, uint64_t))(v7 + 8))(*(void *)(a2 + 48) + *(void *)(v7 + 72) * v19, v6);
          a2 = (uint64_t)v88;
          sub_22D1E518C(v19, (uint64_t)v88);
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
        goto LABEL_4;
      }
      id v25 = objc_msgSend(v17, sel_featureStatus);

      if (v25 == (id)2 || objc_msgSend(*(id *)(v14 + v16), sel_multiDeviceStatus) == (id)2) {
        goto LABEL_24;
      }
LABEL_4:
      swift_release();
LABEL_5:
      uint64_t v13 = v86;
LABEL_6:
      int64_t v12 = (SEL *)&property descriptor for PBUpdateParameters.mailboxID;
      if (v11 == v13) {
        goto LABEL_58;
      }
    }
    if (v11 >= *(void *)(v84 + 16)) {
      goto LABEL_56;
    }
    uint64_t v14 = *(void *)(v83 + 8 * v11);
    swift_retain();
    BOOL v15 = __OFADD__(v11++, 1);
    if (!v15) {
      goto LABEL_13;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
LABEL_58:
  swift_bridgeObjectRelease();
  return a2;
}

uint64_t sub_22D057798(void *a1, uint64_t a2, uint64_t a3)
{
  sub_22D058C6C(0, &qword_26AEC1F78, MEMORY[0x263F8E0C0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v11 = (char *)&v13 - v10;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D05868C();
  sub_22D2BD7B0();
  uint64_t v15 = a2;
  char v14 = 0;
  sub_22D0586E0();
  sub_22D058778();
  sub_22D2BD5F0();
  if (!v3)
  {
    uint64_t v15 = a3;
    char v14 = 1;
    sub_22D058830();
    sub_22D058E2C(&qword_26AEC1EB0, (void (*)(void))sub_22D058888);
    sub_22D2BD5F0();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_22D057980()
{
  if (*v0) {
    return 0xD000000000000014;
  }
  else {
    return 0x5079427365646F6ELL;
  }
}

uint64_t sub_22D0579CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_22D0588DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_22D0579F4(uint64_t a1)
{
  unint64_t v2 = sub_22D05868C();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D057A30(uint64_t a1)
{
  unint64_t v2 = sub_22D05868C();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22D057A6C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_22D0589F0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_22D057A98(void *a1)
{
  return sub_22D057798(a1, *v1, v1[1]);
}

uint64_t sub_22D057AB4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a2[1];
  if ((sub_22D10E4BC(*a1, *a2) & 1) == 0) {
    return 0;
  }
  return sub_22D10F7F8(v2, v3);
}

uint64_t sub_22D057B10()
{
  return sub_22D2BD760();
}

uint64_t sub_22D057B54()
{
  return sub_22D2BD740();
}

uint64_t sub_22D057B7C()
{
  return sub_22D2BD760();
}

unint64_t sub_22D057BBC()
{
  return 0xD000000000000030;
}

uint64_t sub_22D057BD8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_22CFF9B64(a5, a6);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_22D057C70(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_22CFF5630(a5, a6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_22D057D08(unint64_t a1)
{
  uint64_t v2 = sub_22D2BBC90();
  uint64_t v3 = *(uint64_t **)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_44;
  }
  for (uint64_t i = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10); i; uint64_t i = sub_22D2BD470())
  {
    unint64_t v7 = 0;
    unint64_t v8 = a1 & 0xC000000000000001;
    unint64_t v76 = a1 + 32;
    uint64_t v77 = a1 & 0xFFFFFFFFFFFFFF8;
    uint64_t v58 = (void (**)(char *, uint64_t, uint64_t))(v3 + 2);
    uint64_t v9 = MEMORY[0x263F8EE80];
    uint64_t v57 = (void (**)(char *, uint64_t))(v3 + 1);
    uint64_t v71 = v2;
    uint64_t v61 = v5;
    uint64_t v60 = i;
    unint64_t v59 = a1 & 0xC000000000000001;
    while (v8)
    {
      uint64_t v10 = MEMORY[0x230F7AF90](v7, a1);
      BOOL v11 = __OFADD__(v7++, 1);
      if (v11) {
        goto LABEL_42;
      }
LABEL_10:
      uint64_t v3 = (uint64_t *)OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)((char *)v3 + v10), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)((char *)v3 + v10), sel_multiDeviceStatus) != (id)2&& objc_msgSend(*(id *)((char *)v3 + v10), sel_multiDeviceStatus) != (id)4&& ((v12 = *(void *)(v10+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(void *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(void *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (v13 = v12 == *(void *)(v10+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (v13 = 0), v13 || (sub_22D2BD660() & 1) != 0))|| objc_msgSend(*(id *)((char *)v3 + v10), sel_multiDeviceStatus) == (id)3)&& !*(void *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error)&& (v14 = (void *)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode), (uint64_t v3 = *(uint64_t **)(v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode)) != 0))
      {
        uint64_t v70 = v9;
        uint64_t v16 = v14[1];
        uint64_t v15 = v14[2];
        uint64_t v17 = v14[3];
        uint64_t v18 = v14[4];
        unint64_t v20 = v14[5];
        uint64_t v19 = v14[6];
        uint64_t v21 = v14[7];
        uint64_t v22 = v14[8];
        uint64_t v24 = v14[9];
        uint64_t v23 = v14[10];
        uint64_t v78 = v3;
        uint64_t v63 = v23;
        uint64_t v64 = v24;
        uint64_t v65 = v22;
        uint64_t v75 = v15;
        uint64_t v66 = v21;
        uint64_t v67 = v19;
        sub_22D057BD8((uint64_t)v3, v16, v15, v17, v18, v20);
        uint64_t v69 = v3;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v68 = v16;
        sub_22D23E858(v16);
        id v25 = v78;
        swift_bridgeObjectRetain();
        sub_22CFF9B64(v18, v20);
        uint64_t v74 = v17;
        swift_bridgeObjectRetain();
        unint64_t v72 = v20;
        uint64_t v73 = v18;
        sub_22CFF9B64(v18, v20);
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v27 = v25;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v27 = sub_22D2812F8(0, v25[2] + 1, 1, v25);
        }
        unint64_t v29 = v27[2];
        unint64_t v28 = v27[3];
        uint64_t v2 = v71;
        if (v29 >= v28 >> 1) {
          uint64_t v27 = sub_22D2812F8((void *)(v28 > 1), v29 + 1, 1, v27);
        }
        uint64_t v30 = MEMORY[0x263F8EE78];
        v27[2] = v29 + 1;
        uint64_t v31 = &v27[4 * v29];
        uint64_t v32 = v74;
        v31[4] = v75;
        v31[5] = v32;
        unint64_t v34 = v72;
        uint64_t v33 = v73;
        v31[6] = v73;
        v31[7] = v34;
        uint64_t v35 = v27;
        swift_bridgeObjectRelease();
        sub_22CFF5630(v33, v34);
        swift_bridgeObjectRelease();
        (*v58)(v5, v10 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v2);
        int64_t v36 = v35[2];
        uint64_t v62 = v35;
        if (v36)
        {
          unint64_t v56 = a1;
          uint64_t v78 = (void *)v30;
          sub_22D24B86C(0, v36, 0);
          uint64_t v37 = (uint64_t)v78;
          uint64_t v38 = v35 + 5;
          do
          {
            uint64_t v40 = *(v38 - 1);
            uint64_t v39 = *v38;
            uint64_t v78 = (void *)v37;
            unint64_t v42 = *(void *)(v37 + 16);
            unint64_t v41 = *(void *)(v37 + 24);
            swift_bridgeObjectRetain();
            if (v42 >= v41 >> 1)
            {
              sub_22D24B86C(v41 > 1, v42 + 1, 1);
              uint64_t v37 = (uint64_t)v78;
            }
            v38 += 4;
            *(void *)(v37 + 16) = v42 + 1;
            uint64_t v43 = v37 + 16 * v42;
            *(void *)(v43 + 32) = v40;
            *(void *)(v43 + 40) = v39;
            --v36;
          }
          while (v36);
          a1 = v56;
          uint64_t v2 = v71;
        }
        else
        {
          uint64_t v37 = v30;
        }
        uint64_t v79 = sub_22D2BCF30();
        uint64_t v44 = *(void *)(v37 + 16);
        if (v44)
        {
          uint64_t v45 = (uint64_t *)(v37 + 40);
          do
          {
            uint64_t v46 = *(v45 - 1);
            uint64_t v47 = *v45;
            swift_bridgeObjectRetain();
            sub_22D232188((uint64_t *)&v78, v46, v47);
            swift_bridgeObjectRelease();
            v45 += 2;
            --v44;
          }
          while (v44);
        }
        swift_bridgeObjectRelease();
        uint64_t v48 = v79;
        uint64_t v49 = v70;
        char v50 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v78 = (void *)v49;
        uint64_t v5 = v61;
        sub_22D053C14(v48, (uint64_t)v61, v50);
        uint64_t v9 = (uint64_t)v78;
        swift_bridgeObjectRelease();
        (*v57)(v5, v2);
        uint64_t v51 = swift_bridgeObjectRetain();
        uint64_t v3 = &v80;
        sub_22D23E858(v51);
        swift_bridgeObjectRelease();
        swift_release();
        sub_22D057C70((uint64_t)v69, v68, v75, v74, v73, v72);
        uint64_t i = v60;
        unint64_t v8 = v59;
        if (v7 == v60)
        {
LABEL_41:
          swift_bridgeObjectRelease();
          uint64_t v52 = v80;
          goto LABEL_46;
        }
      }
      else
      {
        swift_release();
        if (v7 == i) {
          goto LABEL_41;
        }
      }
    }
    if (v7 >= *(void *)(v77 + 16)) {
      goto LABEL_43;
    }
    uint64_t v10 = *(void *)(v76 + 8 * v7);
    swift_retain();
    BOOL v11 = __OFADD__(v7++, 1);
    if (!v11) {
      goto LABEL_10;
    }
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    ;
  }
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x263F8EE80];
  uint64_t v52 = MEMORY[0x263F8EE78];
LABEL_46:
  uint64_t v53 = sub_22D2390A4(v52);
  swift_bridgeObjectRelease();
  sub_22D249144(v53);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t destroy for ClinicalSharingGraphMetadata()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *_s19HealthRecordsDaemon28ClinicalSharingGraphMetadataVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for ClinicalSharingGraphMetadata(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for ClinicalSharingGraphMetadata(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingGraphMetadata(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingGraphMetadata(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadata()
{
  return &type metadata for ClinicalSharingGraphMetadata;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingGraphMetadataError(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingGraphMetadataError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22D0585FCLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadataError()
{
  return &type metadata for ClinicalSharingGraphMetadataError;
}

unint64_t sub_22D058638()
{
  unint64_t result = qword_26853E3B0;
  if (!qword_26853E3B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E3B0);
  }
  return result;
}

unint64_t sub_22D05868C()
{
  unint64_t result = qword_26AEC16D0;
  if (!qword_26AEC16D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16D0);
  }
  return result;
}

void sub_22D0586E0()
{
  if (!qword_26AEC2F50)
  {
    sub_22D2BBC90();
    sub_22D05688C();
    sub_22D058D88((unint64_t *)&qword_26AEC0F50);
    unint64_t v0 = sub_22D2BCB20();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2F50);
    }
  }
}

unint64_t sub_22D058778()
{
  unint64_t result = qword_26AEC2F58;
  if (!qword_26AEC2F58)
  {
    sub_22D0586E0();
    sub_22D058D88(&qword_26AEC22D0);
    sub_22D058DCC(&qword_26AEC2FA0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2F58);
  }
  return result;
}

void sub_22D058830()
{
  if (!qword_26AEC1EA8)
  {
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1EA8);
    }
  }
}

unint64_t sub_22D058888()
{
  unint64_t result = qword_26AEC16C0;
  if (!qword_26AEC16C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16C0);
  }
  return result;
}

uint64_t sub_22D0588DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x5079427365646F6ELL && a2 == 0xEF72656469766F72;
  if (v2 || (sub_22D2BD660() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x800000022D2D6400)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_22D0589F0(void *a1)
{
  sub_22D058C6C(0, &qword_26AEC1F68, MEMORY[0x263F8E040]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  unint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = a1[3];
  __swift_project_boxed_opaque_existential_1(a1, v8);
  sub_22D05868C();
  sub_22D2BD7A0();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    sub_22D0586E0();
    HIBYTE(v10) = 0;
    sub_22D058CD0();
    sub_22D2BD560();
    uint64_t v8 = v11;
    sub_22D058830();
    HIBYTE(v10) = 1;
    sub_22D058E2C(&qword_26AEC1EB8, (void (*)(void))sub_22D058E98);
    swift_bridgeObjectRetain();
    sub_22D2BD560();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v8;
}

void sub_22D058C6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_22D05868C();
    unint64_t v7 = a3(a1, &type metadata for ClinicalSharingGraphMetadata.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_22D058CD0()
{
  unint64_t result = qword_26AEC2248;
  if (!qword_26AEC2248)
  {
    sub_22D0586E0();
    sub_22D058D88(&qword_26AEC2058);
    sub_22D058DCC(&qword_26AEC2280);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2248);
  }
  return result;
}

uint64_t sub_22D058D88(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D2BBC90();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D058DCC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D05688C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D058E2C(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D058830();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_22D058E98()
{
  unint64_t result = qword_26AEC16C8;
  if (!qword_26AEC16C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16C8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingGraphMetadata.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D058FB8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingGraphMetadata.CodingKeys()
{
  return &type metadata for ClinicalSharingGraphMetadata.CodingKeys;
}

unint64_t sub_22D058FF4()
{
  unint64_t result = qword_26853E3B8;
  if (!qword_26853E3B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E3B8);
  }
  return result;
}

unint64_t sub_22D05904C()
{
  unint64_t result = qword_26AEC16E0;
  if (!qword_26AEC16E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16E0);
  }
  return result;
}

unint64_t sub_22D0590A4()
{
  unint64_t result = qword_26AEC16D8;
  if (!qword_26AEC16D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC16D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingPatientMetadataQuery()
{
  return &type metadata for ClinicalSharingPatientMetadataQuery;
}

uint64_t sub_22D059108(uint64_t a1)
{
  uint64_t v34 = a1;
  sub_22D05BE10();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v37 = v2;
  uint64_t v38 = v3;
  MEMORY[0x270FA5388](v2);
  uint64_t v35 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D05C18C();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  uint64_t v40 = v6;
  MEMORY[0x270FA5388](v5);
  int64_t v36 = (char *)v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021DE0();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v13 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D05C534(0, &qword_26853E430, MEMORY[0x263EFDE20]);
  swift_allocObject();
  v43[0] = sub_22D2BC6F0();
  sub_22D05C0E4(&qword_26853E438, &qword_26853E430, v13);
  uint64_t v33 = sub_22D2BC720();
  swift_release();
  uint64_t v14 = a1 + 16;
  sub_22CFF4B00(a1 + 16, (uint64_t)v43);
  uint64_t v15 = __swift_project_boxed_opaque_existential_1(v43, v44);
  uint64_t v16 = (void *)*__swift_project_boxed_opaque_existential_1(v15 + 3, v15[6]);
  *(void *)(swift_allocObject() + 16) = v16;
  uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D05C000(0, (unint64_t *)&qword_26AEC1E18, (uint64_t (*)(uint64_t))sub_22D05BF98, MEMORY[0x263EFDE20]);
  sub_22D05C4D0((unint64_t *)&qword_26AEC1E10, (unint64_t *)&qword_26AEC1E18, (uint64_t (*)(uint64_t))sub_22D05BF98);
  id v18 = v16;
  sub_22D2BC700();
  sub_22D05C7F4(&qword_26AEC1E30, (void (*)(uint64_t))sub_22D021DE0);
  uint64_t v19 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  sub_22CFF4B00(v14, (uint64_t)v43);
  __swift_project_boxed_opaque_existential_1(v43, v44);
  uint64_t v42 = sub_22D2BD0B0();
  sub_22D05C000(0, &qword_26853E440, (uint64_t (*)(uint64_t))sub_22D05C07C, v17);
  sub_22D05C4D0(&qword_26853E448, &qword_26853E440, (uint64_t (*)(uint64_t))sub_22D05C07C);
  uint64_t v20 = sub_22D2BC720();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
  void v32[2] = v19;
  uint64_t v42 = v33;
  v43[0] = v19;
  uint64_t v41 = v20;
  uint64_t v21 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D05C000(0, &qword_26AEC1DC8, (uint64_t (*)(uint64_t))sub_22D05BF98, MEMORY[0x263EFDCF0]);
  v32[1] = v22;
  uint64_t v23 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D05C534(0, &qword_26853E3C8, MEMORY[0x263EFDCF0]);
  v32[0] = v24;
  sub_22D05C000(0, &qword_26853E3D0, (uint64_t (*)(uint64_t))sub_22D05C07C, v21);
  sub_22D05C128((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, (uint64_t (*)(uint64_t))sub_22D05BF98);
  sub_22D05C0E4(&qword_26853E3E0, &qword_26853E3C8, v23);
  sub_22D05C128(&qword_26853E3E8, &qword_26853E3D0, (uint64_t (*)(uint64_t))sub_22D05C07C);
  swift_retain();
  swift_retain();
  swift_retain();
  id v25 = v35;
  sub_22D2BC490();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_22D05C5DC;
  *(void *)(v26 + 24) = v34;
  swift_retain();
  sub_22D2BC5D0();
  sub_22D05C334();
  sub_22D05C7F4(&qword_26853E428, (void (*)(uint64_t))sub_22D05BE10);
  sub_22D05C7F4(&qword_26853E418, (void (*)(uint64_t))sub_22D05C334);
  uint64_t v27 = v36;
  uint64_t v28 = v37;
  sub_22D2BC820();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v28);
  sub_22D05C7F4(&qword_26853E450, (void (*)(uint64_t))sub_22D05C18C);
  uint64_t v29 = v39;
  uint64_t v30 = sub_22D2BC720();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v27, v29);
  return v30;
}

uint64_t sub_22D059814(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return swift_bridgeObjectRelease();
}

unint64_t sub_22D0598B0(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v87 = a6;
  uint64_t v86 = a5;
  uint64_t v85 = a4;
  uint64_t v84 = a3;
  unint64_t v83 = a1;
  int v82 = a2 & 1;
  uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
  uint64_t v91 = *(void *)(Output - 8);
  uint64_t v8 = MEMORY[0x270FA5388](Output);
  uint64_t v90 = (uint64_t)v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v89 = (uint64_t)v80 - v10;
  sub_22D05C65C(0);
  uint64_t v92 = v11;
  uint64_t v81 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v93 = (uint64_t)v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v94 = (uint64_t)v80 - v14;
  uint64_t v15 = sub_22D2BBC90();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  int v98 = (char *)v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v97 = (uint64_t)v80 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)v80 - v21;
  sub_22D05C3E4(0, &qword_26AEC22D8, MEMORY[0x263F07508], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v23 - 8);
  id v25 = (char *)v80 - v24;
  uint64_t v88 = a7;
  uint64_t v26 = *(void *)(a7 + 56);
  uint64_t v27 = sub_22D2A958C(v26);
  uint64_t v105 = sub_22D05C690(v27);
  uint64_t v109 = MEMORY[0x263F8EE88];
  uint64_t v110 = MEMORY[0x263F8EE88];
  uint64_t v28 = swift_bridgeObjectRetain();
  size_t v29 = sub_22D248EB4(v28);
  uint64_t v107 = v26;
  swift_bridgeObjectRelease();
  uint64_t v30 = *(void *)(v29 + 16);
  v80[1] = v29;
  if (v30)
  {
    uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v31 = v16 + 16;
    uint64_t v106 = v32;
    size_t v33 = v29 + ((*(unsigned __int8 *)(v31 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 64));
    uint64_t v34 = *(void *)(v31 + 56);
    int v104 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 40);
    uint64_t v102 = v34;
    int v103 = (unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 32);
    int v101 = (void (**)(char *, char *, uint64_t))(v31 + 16);
    uint64_t v108 = v31;
    int v99 = (void (**)(uint64_t, uint64_t))(v31 - 8);
    uint64_t v35 = MEMORY[0x263F8EE88];
    int v100 = v22;
    uint64_t v96 = v25;
    v32(v25, (char *)v33, v15);
    while (1)
    {
      uint64_t v40 = *v104;
      (*v104)(v25, 0, 1, v15);
      if ((*v103)(v25, 1, v15) == 1) {
        break;
      }
      (*v101)(v22, v25, v15);
      if (*(void *)(v107 + 16))
      {
        unint64_t v41 = sub_22D04EA20((uint64_t)v22);
        uint64_t v42 = v35;
        if (v43)
        {
          uint64_t v42 = *(void *)(*(void *)(v107 + 56) + 8 * v41);
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        uint64_t v42 = v35;
      }
      if (sub_22D05A2CC(v105, v42))
      {
        swift_bridgeObjectRelease();
        int64_t v36 = v98;
        v106(v98, v22, v15);
        uint64_t v37 = v97;
        sub_22D231DF8(v97, v36);
        uint64_t v38 = *v99;
        uint64_t v39 = v37;
        uint64_t v22 = v100;
        (*v99)(v39, v15);
        v38((uint64_t)v22, v15);
      }
      else
      {
        uint64_t v44 = *(void *)(v42 + 16);
        swift_bridgeObjectRelease();
        if (v44)
        {
          uint64_t v45 = v98;
          uint64_t v46 = v100;
          v106(v98, v100, v15);
          id v25 = v96;
          uint64_t v47 = v97;
          uint64_t v48 = v45;
          uint64_t v22 = v46;
          sub_22D231DF8(v97, v48);
          uint64_t v49 = *v99;
          (*v99)(v47, v15);
          v49((uint64_t)v46, v15);
        }
        else
        {
          uint64_t v22 = v100;
          (*v99)((uint64_t)v100, v15);
        }
      }
      v33 += v102;
      if (!--v30)
      {
        v40(v25, 1, 1, v15);
        break;
      }
      v106(v25, (char *)v33, v15);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v25, 1, 1, v15);
  }
  swift_release();
  swift_release();
  sub_22D05C3E4(0, &qword_26853E460, (uint64_t (*)(uint64_t))sub_22D05C65C, MEMORY[0x263F8E0F8]);
  uint64_t v50 = *(void *)(v81 + 72);
  unint64_t v51 = (*(unsigned __int8 *)(v81 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v81 + 80);
  uint64_t v52 = swift_allocObject();
  *(_OWORD *)(v52 + 16) = xmmword_22D2C0F10;
  uint64_t v53 = v52 + v51;
  uint64_t v54 = v110;
  swift_bridgeObjectRetain();
  int v55 = v82;
  uint64_t v56 = v84;
  uint64_t v57 = v85;
  uint64_t v58 = v86;
  uint64_t v59 = v87;
  uint64_t v60 = v88;
  sub_22D05A754(MEMORY[0x263F8EE78], v82, v84, v85, v86, v87, v54, v88, v53);
  swift_bridgeObjectRelease();
  uint64_t v61 = v53 + v50;
  uint64_t v62 = v109;
  swift_bridgeObjectRetain();
  sub_22D05A754(v83, v55, v56, v57, v58, v59, v62, v60, v61);
  swift_bridgeObjectRelease();
  uint64_t v63 = v94;
  sub_22D05C928(v53, v94, (uint64_t (*)(void))sub_22D05C65C);
  uint64_t v64 = v93;
  sub_22D05D3A4(v63, v93, (uint64_t (*)(void))sub_22D05C65C);
  uint64_t v65 = v91;
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
  if (v66(v64, 1, Output) == 1)
  {
    sub_22D05C878(v64, (uint64_t (*)(void))sub_22D05C65C);
    unint64_t v67 = MEMORY[0x263F8EE78];
    uint64_t v68 = v90;
  }
  else
  {
    uint64_t v69 = v64;
    uint64_t v70 = v89;
    sub_22D05D3A4(v69, v89, type metadata accessor for ClinicalSharingQueryOutput);
    uint64_t v68 = v90;
    sub_22D05D3A4(v70, v90, type metadata accessor for ClinicalSharingQueryOutput);
    unint64_t v67 = MEMORY[0x263F8EE78];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v67 = sub_22D281414(0, *(void *)(v67 + 16) + 1, 1, v67);
    }
    unint64_t v72 = *(void *)(v67 + 16);
    unint64_t v71 = *(void *)(v67 + 24);
    if (v72 >= v71 >> 1) {
      unint64_t v67 = sub_22D281414(v71 > 1, v72 + 1, 1, v67);
    }
    *(void *)(v67 + 16) = v72 + 1;
    sub_22D05D3A4(v68, v67+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v72, type metadata accessor for ClinicalSharingQueryOutput);
    uint64_t v64 = v93;
  }
  uint64_t v73 = v61;
  uint64_t v74 = v94;
  sub_22D05C928(v73, v94, (uint64_t (*)(void))sub_22D05C65C);
  sub_22D05D3A4(v74, v64, (uint64_t (*)(void))sub_22D05C65C);
  if (v66(v64, 1, Output) == 1)
  {
    sub_22D05C878(v64, (uint64_t (*)(void))sub_22D05C65C);
  }
  else
  {
    uint64_t v75 = v64;
    uint64_t v76 = v89;
    sub_22D05D3A4(v75, v89, type metadata accessor for ClinicalSharingQueryOutput);
    sub_22D05D3A4(v76, v68, type metadata accessor for ClinicalSharingQueryOutput);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v67 = sub_22D281414(0, *(void *)(v67 + 16) + 1, 1, v67);
    }
    unint64_t v78 = *(void *)(v67 + 16);
    unint64_t v77 = *(void *)(v67 + 24);
    if (v78 >= v77 >> 1) {
      unint64_t v67 = sub_22D281414(v77 > 1, v78 + 1, 1, v67);
    }
    *(void *)(v67 + 16) = v78 + 1;
    sub_22D05D3A4(v68, v67+ ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80))+ *(void *)(v65 + 72) * v78, type metadata accessor for ClinicalSharingQueryOutput);
  }
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v67;
}

uint64_t sub_22D05A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBF00();
  uint64_t v47 = *(void *)(v4 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v5);
  uint64_t v10 = (char *)&v39 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (char *)&v39 - v11;
  unint64_t v12 = *(void *)(a2 + 16);
  if (!v12) {
    return 1;
  }
  unint64_t v13 = *(void *)(a1 + 16);
  if (!v13) {
    return 1;
  }
  if (v12 >= v13) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a2;
  }
  if (v12 >= v13) {
    a1 = a2;
  }
  uint64_t v15 = *(void *)(v14 + 56);
  uint64_t v41 = v14 + 56;
  uint64_t v16 = -1 << *(unsigned char *)(v14 + 32);
  uint64_t v39 = ~v16;
  if (-v16 < 64) {
    uint64_t v17 = ~(-1 << -(char)v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v40 = (unint64_t)(63 - v16) >> 6;
  uint64_t v42 = v47 + 32;
  uint64_t v50 = a1 + 56;
  uint64_t v51 = v47 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v47 + 8);
  uint64_t v45 = v14;
  swift_bridgeObjectRetain();
  uint64_t v52 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v49)
  {
    unint64_t v43 = v18;
    uint64_t v44 = i;
    if (!v18) {
      break;
    }
    uint64_t v48 = (v18 - 1) & v18;
    int64_t v49 = i;
    unint64_t v22 = __clz(__rbit64(v18)) | (i << 6);
LABEL_29:
    uint64_t v27 = v46;
    uint64_t v28 = v47;
    uint64_t v29 = *(void *)(v47 + 72);
    uint64_t v30 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
    v30(v46, *(void *)(v45 + 48) + v29 * v22, v4);
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v10, v27, v4);
    if (*(void *)(v52 + 16))
    {
      uint64_t v31 = v52;
      sub_22D05C7F4(&qword_26AEC2068, MEMORY[0x263F44A78]);
      uint64_t v32 = sub_22D2BCB30();
      uint64_t v33 = -1 << *(unsigned char *)(v31 + 32);
      unint64_t v34 = v32 & ~v33;
      if ((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34))
      {
        uint64_t v35 = ~v33;
        while (1)
        {
          v30(v7, *(void *)(v52 + 48) + v34 * v29, v4);
          sub_22D05C7F4(&qword_26853DD50, MEMORY[0x263F44A78]);
          char v36 = sub_22D2BCB90();
          uint64_t v37 = (uint64_t (*)(char *, uint64_t))*v19;
          (*v19)(v7, v4);
          if (v36) {
            break;
          }
          unint64_t v34 = (v34 + 1) & v35;
          if (((*(void *)(v50 + ((v34 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v34) & 1) == 0) {
            goto LABEL_12;
          }
        }
        swift_bridgeObjectRelease();
        v37(v10, v4);
        uint64_t v38 = 0;
        goto LABEL_37;
      }
    }
LABEL_12:
    uint64_t result = ((uint64_t (*)(char *, uint64_t))*v19)(v10, v4);
    unint64_t v18 = v48;
  }
  int64_t v23 = i + 1;
  if (__OFADD__(i, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  if (v23 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v23);
  int64_t v25 = i + 1;
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 2;
  if (i + 2 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24) {
    goto LABEL_28;
  }
  int64_t v25 = i + 3;
  if (i + 3 >= v40) {
    goto LABEL_39;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v25);
  if (v24)
  {
LABEL_28:
    uint64_t v48 = (v24 - 1) & v24;
    int64_t v49 = v25;
    unint64_t v22 = __clz(__rbit64(v24)) + (v25 << 6);
    goto LABEL_29;
  }
  uint64_t v26 = i + 4;
  if (i + 4 >= v40)
  {
LABEL_39:
    swift_bridgeObjectRelease();
    uint64_t v38 = 1;
LABEL_37:
    sub_22D05C83C();
    return v38;
  }
  unint64_t v24 = *(void *)(v41 + 8 * v26);
  if (v24)
  {
    int64_t v25 = i + 4;
    goto LABEL_28;
  }
  while (1)
  {
    int64_t v25 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v25 >= v40) {
      goto LABEL_39;
    }
    unint64_t v24 = *(void *)(v41 + 8 * v25);
    ++v26;
    if (v24) {
      goto LABEL_28;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22D05A754@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v81 = a8;
  uint64_t v77 = a4;
  uint64_t v78 = a5;
  unint64_t v74 = a1;
  uint64_t v75 = a3;
  int v68 = a2;
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D05C3E4(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v80 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v79 = (uint64_t)&v65 - v16;
  uint64_t v17 = type metadata accessor for PBPatientMeta(0);
  MEMORY[0x270FA5388](v17 - 8);
  uint64_t v76 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D05C3E4(0, &qword_26853D7B0, type metadata accessor for PBDateRange, v12);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v73 = (uint64_t)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  uint64_t v72 = (uint64_t)&v65 - v22;
  uint64_t v23 = sub_22D2BBC30();
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v65 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v65 - v28;
  sub_22D05C844(0);
  MEMORY[0x270FA5388](v30 - 8);
  uint64_t v32 = (char *)&v65 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for PBDateRange(0);
  uint64_t v70 = *(void *)(v33 - 8);
  uint64_t v71 = v33;
  MEMORY[0x270FA5388](v33);
  uint64_t v69 = (char *)&v65 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for PBTypedData(0);
  MEMORY[0x270FA5388](v35);
  uint64_t v37 = (char *)&v65 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a7 + 16))
  {
    uint64_t v66 = a7;
    sub_22D2BBFE0();
    uint64_t v38 = *(int *)(v35 + 20);
    if (qword_26853CCD0 != -1) {
      swift_once();
    }
    uint64_t v65 = a6;
    uint64_t v67 = a9;
    v68 &= 1u;
    *(void *)&v37[v38] = qword_26853D990;
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v39 = swift_retain();
      *(void *)&v37[v38] = sub_22D0040E0(v39);
      swift_release();
    }
    uint64_t v40 = *(void *)&v37[v38];
    swift_beginAccess();
    *(void *)(v40 + 16) = 112;
    *(unsigned char *)(v40 + 24) = 1;
    uint64_t v41 = v81;
    uint64_t v42 = v81 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
    unint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
    v43(v29, v81 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date, v23);
    v43(v27, v42, v23);
    sub_22D2BB6A0();
    uint64_t v44 = sub_22D2BB6F0();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v32, 0, 1, v44);
    uint64_t v45 = (uint64_t)v69;
    sub_22D22BDC4(5, 1, v32, v41);
    sub_22D05C878((uint64_t)v32, (uint64_t (*)(void))sub_22D05C844);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v46 = swift_retain();
      *(void *)&v37[v38] = sub_22D0040E0(v46);
      swift_release();
    }
    uint64_t v47 = *(void *)&v37[v38];
    uint64_t v48 = v72;
    sub_22D05D3A4(v45, v72, type metadata accessor for PBDateRange);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v70 + 56))(v48, 0, 1, v71);
    uint64_t v49 = v73;
    sub_22D05C990(v48, v73, &qword_26853D7B0, type metadata accessor for PBDateRange);
    uint64_t v50 = v47
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    swift_retain();
    sub_22D05CA10(v49, v50, &qword_26853D7B0, type metadata accessor for PBDateRange);
    swift_endAccess();
    swift_release();
    uint64_t v51 = v76;
    sub_22D05AFD8(v74, v68, v75, v77, v78, v65, v81, v76);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v53 = v67;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v54 = swift_retain();
      *(void *)&v37[v38] = sub_22D0040E0(v54);
      swift_release();
    }
    uint64_t v55 = *(void *)&v37[v38];
    uint64_t v56 = v79;
    sub_22D05D3A4(v51, v79, type metadata accessor for PBPatientMeta);
    uint64_t v57 = type metadata accessor for PBTypedData.OneOf_Raw(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56))(v56, 0, 1, v57);
    uint64_t v58 = v80;
    sub_22D05C990(v56, v80, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    uint64_t v59 = v55
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
    swift_beginAccess();
    swift_retain();
    sub_22D05CA10(v58, v59, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
    swift_endAccess();
    swift_release();
    sub_22D05D3A4((uint64_t)v37, v53, type metadata accessor for PBTypedData);
    uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(void *)(v53 + *(int *)(Output + 20)) = v66;
    uint64_t v61 = (void *)(v53 + *(int *)(Output + 24));
    *uint64_t v61 = 0;
    v61[1] = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(Output - 8) + 56))(v53, 0, 1, Output);
    return swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v63 = type metadata accessor for ClinicalSharingQueryOutput(0);
    uint64_t v64 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56);
    return v64(a9, 1, 1, v63);
  }
}

uint64_t sub_22D05AFD8@<X0>(unint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v85 = a6;
  uint64_t v78 = a5;
  uint64_t v84 = a4;
  uint64_t v77 = a3;
  unint64_t v93 = a1;
  sub_22D05C3E4(0, &qword_26853E468, type metadata accessor for PBPatientMeta.HumanName, MEMORY[0x263F8D8F0]);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v90 = (uint64_t)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v88 = (uint64_t)&v77 - v14;
  uint64_t v87 = type metadata accessor for PBPatientMeta.HumanName(0);
  uint64_t v86 = *(void *)(v87 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v87);
  unint64_t v83 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v89 = (char *)&v77 - v17;
  sub_22D05C8D8(0);
  MEMORY[0x270FA5388](v18 - 8);
  uint64_t v79 = (uint64_t)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = sub_22D2BBC30();
  uint64_t v81 = *(void *)(v82 - 8);
  MEMORY[0x270FA5388](v82);
  uint64_t v80 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_22D2BBF00();
  uint64_t v21 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v23 = (uint64_t *)((char *)&v77 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = sub_22D2BBE60();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v27 = (char *)&v77 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v28 = *(int *)(type metadata accessor for PBPatientMeta(0) + 20);
  if (qword_26853D200 != -1) {
    swift_once();
  }
  int v91 = a2 & 1;
  *(void *)(a8 + v28) = qword_268540700;
  uint64_t v94 = a7;
  swift_retain();
  sub_22D2BBDC0();
  uint64_t v29 = sub_22D2BBE10();
  uint64_t v31 = v30;
  (*(void (**)(char *, uint64_t))(v25 + 8))(v27, v24);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    uint64_t v32 = swift_retain();
    *(void *)(a8 + v28) = sub_22D1A7000(v32);
    swift_release();
  }
  uint64_t v33 = *(void *)(a8 + v28);
  swift_beginAccess();
  *(void *)(v33 + 32) = v29;
  *(void *)(v33 + 40) = v31;
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    uint64_t v34 = swift_retain();
    *(void *)(a8 + v28) = sub_22D1A7000(v34);
    swift_release();
  }
  uint64_t v35 = *(void *)(a8 + v28);
  swift_beginAccess();
  *(unsigned char *)(v35 + 16) = v91;
  uint64_t v36 = v94;
  uint64_t v37 = *(void *)(v94 + 56);
  sub_22D030474(0, &qword_26853E470);
  *uint64_t v23 = MEMORY[0x230F7AD20]((id)*MEMORY[0x263F09F20]);
  uint64_t v38 = v92;
  uint64_t v39 = (*(uint64_t (**)(void *, void, uint64_t))(v21 + 104))(v23, *MEMORY[0x263F44A40], v92);
  MEMORY[0x270FA5388](v39);
  *(&v77 - 2) = (uint64_t)v23;
  swift_bridgeObjectRetain();
  uint64_t v40 = sub_22D22E468(MEMORY[0x263F8EE78], (void (*)(uint64_t *, char *))sub_22D05C90C, (uint64_t)(&v77 - 4), v37);
  swift_bridgeObjectRelease();
  uint64_t v41 = *(void *)(v40 + 16);
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v21 + 8))(v23, v38);
  if (v41)
  {
    unint64_t v43 = (void *)(v36 + 16);
    __swift_project_boxed_opaque_existential_1((void *)(v36 + 16), *(void *)(v36 + 40));
    uint64_t v44 = v79;
    sub_22D2722F4(v79);
    uint64_t v45 = v81;
    uint64_t v46 = v82;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v44, 1, v82) == 1)
    {
      sub_22D05C878(v44, (uint64_t (*)(void))sub_22D05C8D8);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v80, v44, v46);
      if (qword_26853D3D0 != -1) {
        swift_once();
      }
      uint64_t v47 = (void *)qword_268568488;
      uint64_t v48 = (void *)sub_22D2BBBC0();
      id v49 = objc_msgSend(v47, sel_stringFromDate_, v48);

      uint64_t v50 = sub_22D2BCBD0();
      uint64_t v52 = v51;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBPatientMeta._StorageClass(0);
        swift_allocObject();
        uint64_t v53 = swift_retain();
        *(void *)(a8 + v28) = sub_22D1A7000(v53);
        swift_release();
      }
      uint64_t v54 = (uint64_t *)(*(void *)(a8 + v28)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon13PBPatientMetaP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dob);
      swift_beginAccess();
      uint64_t *v54 = v50;
      v54[1] = v52;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v45 + 8))(v80, v46);
      uint64_t v36 = v94;
    }
    __swift_project_boxed_opaque_existential_1(v43, *(void *)(v36 + 40));
    uint64_t v55 = sub_22D272050();
    uint64_t v57 = v89;
    if (v56)
    {
      uint64_t v58 = v55;
      uint64_t v59 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBPatientMeta._StorageClass(0);
        swift_allocObject();
        uint64_t v60 = swift_retain();
        *(void *)(a8 + v28) = sub_22D1A7000(v60);
        swift_release();
      }
      uint64_t v61 = *(void *)(a8 + v28);
      swift_beginAccess();
      *(void *)(v61 + 48) = v58;
      *(void *)(v61 + 56) = v59;
      swift_bridgeObjectRelease();
    }
    *uint64_t v57 = 0;
    v57[1] = 0xE000000000000000;
    v57[2] = 0;
    v57[3] = 0xE000000000000000;
    uint64_t v62 = v87;
    sub_22D2BBFE0();
    uint64_t v63 = v84;
    if (v84)
    {
      *uint64_t v57 = v77;
      v57[1] = v63;
    }
    uint64_t v64 = v85;
    uint64_t v65 = (uint64_t)v83;
    if (v85)
    {
      v57[2] = v78;
      v57[3] = v64;
    }
    sub_22D05C928((uint64_t)v57, v65, type metadata accessor for PBPatientMeta.HumanName);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBPatientMeta._StorageClass(0);
      swift_allocObject();
      uint64_t v66 = swift_retain();
      *(void *)(a8 + v28) = sub_22D1A7000(v66);
      swift_release();
    }
    uint64_t v67 = *(void *)(a8 + v28);
    uint64_t v68 = v65;
    uint64_t v69 = v88;
    sub_22D05D3A4(v68, v88, type metadata accessor for PBPatientMeta.HumanName);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v86 + 56))(v69, 0, 1, v62);
    uint64_t v70 = v90;
    sub_22D05C990(v69, v90, &qword_26853E468, type metadata accessor for PBPatientMeta.HumanName);
    uint64_t v71 = v67
        + OBJC_IVAR____TtCV19HealthRecordsDaemon13PBPatientMetaP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__name;
    swift_beginAccess();
    swift_retain();
    sub_22D05CA10(v70, v71, &qword_26853E468, type metadata accessor for PBPatientMeta.HumanName);
    swift_endAccess();
    swift_release();
    uint64_t result = sub_22D05C878((uint64_t)v57, type metadata accessor for PBPatientMeta.HumanName);
    uint64_t v36 = v94;
  }
  unint64_t v72 = v93;
  if (v93 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = sub_22D2BD470();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v76) {
      return result;
    }
  }
  else if (!*(void *)((v93 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return result;
  }
  swift_retain();
  uint64_t v73 = sub_22D05D1A4(v72, v36);
  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPatientMeta._StorageClass(0);
    swift_allocObject();
    uint64_t v74 = swift_retain();
    *(void *)(a8 + v28) = sub_22D1A7000(v74);
    swift_release();
  }
  uint64_t v75 = *(void *)(a8 + v28);
  swift_beginAccess();
  *(void *)(v75 + 24) = v73;
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D05BABC@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v37 = a2;
  sub_22D05C8D8(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_22D2BBC30();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v36 - v13;
  a3[2] = 0;
  a3[3] = 0xE000000000000000;
  a3[4] = 0;
  a3[5] = 0xE000000000000000;
  type metadata accessor for PBPatientMeta.CHRMeta(0);
  sub_22D2BBFE0();
  id v15 = objc_msgSend(a1, sel_title);
  uint64_t v16 = sub_22D2BCBD0();
  uint64_t v18 = v17;

  *a3 = v16;
  a3[1] = v18;
  id v19 = objc_msgSend(a1, sel_gateway);
  if (v19)
  {
    uint64_t v20 = v19;
    id v21 = objc_msgSend(v19, sel_externalID);

    uint64_t v22 = sub_22D2BCBD0();
    uint64_t v24 = v23;

    a3[4] = v22;
    a3[5] = v24;
  }
  id v25 = objc_msgSend(a1, sel_lastFetchDate);
  if (v25)
  {
    uint64_t v26 = v25;
    sub_22D2BBC00();

    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v27(v7, v12, v8);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      uint64_t v28 = v14;
      v27(v14, v7, v8);
      id v29 = *(id *)(v37 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
      uint64_t v30 = (void *)sub_22D2BBBC0();
      id v31 = objc_msgSend(v29, sel_stringFromDate_, v30);

      uint64_t v32 = sub_22D2BCBD0();
      uint64_t v34 = v33;

      (*(void (**)(char *, uint64_t))(v9 + 8))(v28, v8);
      uint64_t result = swift_bridgeObjectRelease();
      a3[2] = v32;
      a3[3] = v34;
      return result;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  return sub_22D05C878((uint64_t)v7, (uint64_t (*)(void))sub_22D05C8D8);
}

uint64_t sub_22D05BE08()
{
  return sub_22D059108(*v0);
}

void sub_22D05BE10()
{
  if (!qword_26853E3C0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D05C000(255, &qword_26AEC1DC8, (uint64_t (*)(uint64_t))sub_22D05BF98, MEMORY[0x263EFDCF0]);
    uint64_t v1 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D05C534(255, &qword_26853E3C8, MEMORY[0x263EFDCF0]);
    sub_22D05C000(255, &qword_26853E3D0, (uint64_t (*)(uint64_t))sub_22D05C07C, v0);
    sub_22D05C128((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, (uint64_t (*)(uint64_t))sub_22D05BF98);
    sub_22D05C0E4(&qword_26853E3E0, &qword_26853E3C8, v1);
    sub_22D05C128(&qword_26853E3E8, &qword_26853E3D0, (uint64_t (*)(uint64_t))sub_22D05C07C);
    unint64_t v2 = sub_22D2BC480();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_26853E3C0);
    }
  }
}

void sub_22D05BF98()
{
  if (!qword_26AEC1ED0)
  {
    sub_22D030474(255, (unint64_t *)&qword_26AEC1EE8);
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1ED0);
    }
  }
}

void sub_22D05C000(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a4(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D05C07C()
{
  if (!qword_26853E3D8)
  {
    sub_22CFFA100();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E3D8);
    }
  }
}

uint64_t sub_22D05C0E4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D05C534(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D05C128(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D05C000(255, a2, a3, MEMORY[0x263EFDCF0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D05C18C()
{
  if (!qword_26853E3F0)
  {
    sub_22D05C278();
    sub_22D05BE10();
    sub_22D05C7F4(&qword_26853E420, (void (*)(uint64_t))sub_22D05C278);
    sub_22D05C7F4(&qword_26853E428, (void (*)(uint64_t))sub_22D05BE10);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E3F0);
    }
  }
}

void sub_22D05C278()
{
  if (!qword_26853E3F8)
  {
    sub_22D05C334();
    sub_22CFF49FC();
    sub_22D05C7F4(&qword_26853E418, (void (*)(uint64_t))sub_22D05C334);
    unint64_t v0 = sub_22D2BC430();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E3F8);
    }
  }
}

void sub_22D05C334()
{
  if (!qword_26853E400)
  {
    sub_22D05C3E4(255, &qword_26853E408, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263F8D488]);
    sub_22D05C448();
    unint64_t v0 = sub_22D2BC560();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E400);
    }
  }
}

void sub_22D05C3E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_22D05C448()
{
  unint64_t result = qword_26853E410;
  if (!qword_26853E410)
  {
    sub_22D05C3E4(255, &qword_26853E408, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E410);
  }
  return result;
}

uint64_t sub_22D05C4D0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D05C000(255, a2, a3, MEMORY[0x263EFDE20]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D05C534(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t, void))
{
  if (!*a2)
  {
    unint64_t v6 = sub_22CFF49FC();
    unint64_t v7 = a3(a1, &type metadata for PairedWatchStatus, v6, MEMORY[0x263F8E4E0]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_22D05C5A4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D05C5DC(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_22D059814(a1, a2 & 1, a3, a4, a5, a6, v6);
}

uint64_t sub_22D05C5E8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D05C620(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void, void, void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_22D05C65C(uint64_t a1)
{
}

uint64_t sub_22D05C690(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  v9[1] = *MEMORY[0x263EF8340];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x270FA5388](isStackAllocationSafe);
    bzero((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_22D05CA90((void *)((char *)v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    swift_release();
    if (v1) {
      swift_willThrow();
    }
  }
  else
  {
    unint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v6 = sub_22D05CA90((unint64_t *)v7, v4, v2);
    swift_release();
    MEMORY[0x230F7BDF0](v7, -1, -1);
  }
  return v6;
}

uint64_t sub_22D05C7F4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D05C83C()
{
  return swift_release();
}

void sub_22D05C844(uint64_t a1)
{
}

uint64_t sub_22D05C878(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_22D05C8D8(uint64_t a1)
{
}

uint64_t sub_22D05C90C(unint64_t *a1, uint64_t a2)
{
  return sub_22D2A99CC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_22D05C928(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D05C990(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D05C3E4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D05CA10(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D05C3E4(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D05CA90(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v4 = sub_22D2BBF00();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (void **)((char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v34 = 0;
  int64_t v12 = 0;
  uint64_t v42 = a3;
  uint64_t v15 = *(void *)(a3 + 56);
  uint64_t v14 = a3 + 56;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 24);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v36 = v14;
  int64_t v37 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v40 = v5 + 88;
  uint64_t v41 = v5 + 16;
  int v39 = *MEMORY[0x263F44A40];
  uint64_t v38 = (void (**)(void **, uint64_t))(v5 + 8);
  uint64_t v35 = (void (**)(void **, uint64_t))(v5 + 96);
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v12 << 6);
      goto LABEL_22;
    }
    int64_t v22 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v22 >= v37) {
      goto LABEL_27;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v22);
    ++v12;
    if (!v23)
    {
      int64_t v12 = v22 + 1;
      if (v22 + 1 >= v37) {
        goto LABEL_27;
      }
      unint64_t v23 = *(void *)(v36 + 8 * v12);
      if (!v23)
      {
        int64_t v12 = v22 + 2;
        if (v22 + 2 >= v37) {
          goto LABEL_27;
        }
        unint64_t v23 = *(void *)(v36 + 8 * v12);
        if (!v23) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_22:
    id v25 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v25(v11, *(void *)(v42 + 48) + *(void *)(v5 + 72) * v21, v4);
    v25((char *)v8, (unint64_t)v11, v4);
    int v26 = (*(uint64_t (**)(void **, uint64_t))(v5 + 88))(v8, v4);
    if (v26 != v39)
    {
      id v19 = *v38;
      (*v38)(v8, v4);
      goto LABEL_5;
    }
    (*v35)(v8, v4);
    uint64_t v27 = *v8;
    self;
    uint64_t v28 = swift_dynamicCastObjCClass();

    id v19 = *v38;
    if (v28)
    {
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v4);
      *(unint64_t *)((char *)v33 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      if (__OFADD__(v34++, 1))
      {
        __break(1u);
LABEL_27:
        uint64_t v30 = v42;
        swift_retain();
        return sub_22D05CE1C(v33, v32, v34, v30);
      }
    }
    else
    {
LABEL_5:
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v19)(v11, v4);
    }
  }
  int64_t v24 = v22 + 3;
  if (v24 >= v37) {
    goto LABEL_27;
  }
  unint64_t v23 = *(void *)(v36 + 8 * v24);
  if (v23)
  {
    int64_t v12 = v24;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v37) {
      goto LABEL_27;
    }
    unint64_t v23 = *(void *)(v36 + 8 * v12);
    ++v24;
    if (v23) {
      goto LABEL_21;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_22D05CE1C(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v34 = a1;
  uint64_t v7 = sub_22D2BBF00();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    swift_release();
    return MEMORY[0x263F8EE88];
  }
  if (*(void *)(a4 + 16) == a3) {
    return a4;
  }
  sub_22D05D40C();
  uint64_t result = sub_22D2BD2F0();
  uint64_t v10 = result;
  uint64_t v33 = a2;
  if (a2 < 1) {
    unint64_t v12 = 0;
  }
  else {
    unint64_t v12 = *v34;
  }
  uint64_t v13 = 0;
  uint64_t v14 = result + 56;
  uint64_t v35 = (uint64_t (**)(unint64_t, char *, uint64_t))(v37 + 32);
  uint64_t v36 = v37 + 16;
  while (1)
  {
    if (v12)
    {
      unint64_t v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v16 = v15 | (v13 << 6);
    }
    else
    {
      uint64_t v17 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      if (v17 >= v33)
      {
LABEL_37:
        swift_release();
        return v10;
      }
      unint64_t v18 = v34[v17];
      ++v13;
      if (!v18)
      {
        uint64_t v13 = v17 + 1;
        if (v17 + 1 >= v33) {
          goto LABEL_37;
        }
        unint64_t v18 = v34[v13];
        if (!v18)
        {
          uint64_t v13 = v17 + 2;
          if (v17 + 2 >= v33) {
            goto LABEL_37;
          }
          unint64_t v18 = v34[v13];
          if (!v18)
          {
            uint64_t v19 = v17 + 3;
            if (v19 >= v33) {
              goto LABEL_37;
            }
            unint64_t v18 = v34[v19];
            if (!v18)
            {
              while (1)
              {
                uint64_t v13 = v19 + 1;
                if (__OFADD__(v19, 1)) {
                  goto LABEL_41;
                }
                if (v13 >= v33) {
                  goto LABEL_37;
                }
                unint64_t v18 = v34[v13];
                ++v19;
                if (v18) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v13 = v19;
          }
        }
      }
LABEL_24:
      unint64_t v12 = (v18 - 1) & v18;
      unint64_t v16 = __clz(__rbit64(v18)) + (v13 << 6);
    }
    uint64_t v20 = a4;
    uint64_t v21 = *(void *)(a4 + 48);
    uint64_t v22 = *(void *)(v37 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v37 + 16))(v9, v21 + v22 * v16, v7);
    sub_22D05C7F4(&qword_26AEC2068, MEMORY[0x263F44A78]);
    uint64_t result = sub_22D2BCB30();
    uint64_t v23 = -1 << *(unsigned char *)(v10 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6))) != 0)
    {
      unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v27 = 0;
      unint64_t v28 = (unint64_t)(63 - v23) >> 6;
      do
      {
        if (++v25 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        BOOL v29 = v25 == v28;
        if (v25 == v28) {
          unint64_t v25 = 0;
        }
        v27 |= v29;
        uint64_t v30 = *(void *)(v14 + 8 * v25);
      }
      while (v30 == -1);
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
    }
    *(void *)(v14 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    uint64_t result = (*v35)(*(void *)(v10 + 48) + v26 * v22, v9, v7);
    ++*(void *)(v10 + 16);
    if (__OFSUB__(a3--, 1)) {
      break;
    }
    a4 = v20;
    if (!a3) {
      goto LABEL_37;
    }
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_22D05D1A4(unint64_t a1, uint64_t a2)
{
  unint64_t v3 = v2;
  uint64_t v18 = a2;
  uint64_t v5 = type metadata accessor for PBPatientMeta.CHRMeta(0);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v10 = MEMORY[0x263F8EE78];
    if (!v9) {
      return v10;
    }
    uint64_t v19 = MEMORY[0x263F8EE78];
    uint64_t result = sub_22D24B9EC(0, v9 & ~(v9 >> 63), 0);
    if (v9 < 0) {
      break;
    }
    unint64_t v17 = v3;
    uint64_t v12 = 0;
    uint64_t v10 = v19;
    unint64_t v3 = a1 & 0xC000000000000001;
    while (v9 != v12)
    {
      if (v3) {
        id v13 = (id)MEMORY[0x230F7AF90](v12, a1);
      }
      else {
        id v13 = *(id *)(a1 + 8 * v12 + 32);
      }
      uint64_t v14 = v13;
      sub_22D05BABC(v13, v18, v8);

      uint64_t v19 = v10;
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_22D24B9EC(v15 > 1, v16 + 1, 1);
        uint64_t v10 = v19;
      }
      ++v12;
      *(void *)(v10 + 16) = v16 + 1;
      sub_22D05D3A4((uint64_t)v8, v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v16, type metadata accessor for PBPatientMeta.CHRMeta);
      if (v9 == v12) {
        return v10;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_22D05D3A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_22D05D40C()
{
  if (!qword_26853E478)
  {
    sub_22D2BBF00();
    sub_22D05C7F4(&qword_26AEC2068, MEMORY[0x263F44A78]);
    unint64_t v0 = sub_22D2BD300();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E478);
    }
  }
}

void destroy for ClinicalSharingMedicationScheduleQuery(uint64_t a1)
{
  swift_release();

  unint64_t v2 = *(void **)(a1 + 24);
}

void *initializeWithCopy for ClinicalSharingMedicationScheduleQuery(void *a1, void *a2)
{
  unint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = (void *)a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  id v5 = v3;
  id v6 = v4;
  return a1;
}

void *assignWithCopy for ClinicalSharingMedicationScheduleQuery(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v4 = (void *)a2[1];
  id v5 = (void *)a1[1];
  a1[1] = v4;
  id v6 = v4;

  a1[2] = a2[2];
  uint64_t v7 = (void *)a2[3];
  uint64_t v8 = (void *)a1[3];
  a1[3] = v7;
  id v9 = v7;

  return a1;
}

uint64_t assignWithTake for ClinicalSharingMedicationScheduleQuery(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  uint64_t v5 = *(void *)(a2 + 24);
  id v6 = *(void **)(a1 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingMedicationScheduleQuery(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ClinicalSharingMedicationScheduleQuery(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingMedicationScheduleQuery()
{
  return &type metadata for ClinicalSharingMedicationScheduleQuery;
}

uint64_t sub_22D05D68C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v33 = a3;
  sub_22D05FA84(0, &qword_26853E480, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v38 = v6;
  uint64_t v39 = v7;
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v32 - v8;
  sub_22D05FA84(0, &qword_26853E4A8, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  uint64_t v37 = v11;
  MEMORY[0x270FA5388](v10);
  id v13 = (char *)&v32 - v12;
  sub_22CFF4B00(a1 + 16, (uint64_t)v41);
  uint64_t v14 = (void *)*__swift_project_boxed_opaque_existential_1(v41, v41[3]);
  *(void *)(swift_allocObject() + 16) = v14;
  unint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D05FB90(0, &qword_26853E4B0, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v16 = v14;
  uint64_t v40 = sub_22D2BC6F0();
  sub_22D05FC08(&qword_26853E4B8, &qword_26853E4B0, v15);
  uint64_t v17 = sub_22D2BC720();
  swift_release();
  uint64_t v40 = v17;
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v20 = v34;
  uint64_t v19 = v35;
  v18[2] = a1;
  v18[3] = v20;
  v18[4] = a3;
  v18[5] = v19;
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_22D05FC50;
  *(void *)(v21 + 24) = v18;
  uint64_t v22 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D05FB90(0, &qword_26853E488, MEMORY[0x263EFDCF0]);
  type metadata accessor for PBTypedData(0);
  sub_22D05FC08(&qword_26853E4A0, &qword_26853E488, v22);
  swift_retain();
  id v23 = v20;
  id v24 = v19;
  sub_22D2BC730();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  unint64_t v25 = (void *)swift_allocObject();
  _OWORD v25[2] = a1;
  v25[3] = v23;
  v25[4] = v33;
  v25[5] = v24;
  type metadata accessor for ClinicalSharingQueryOutput(0);
  swift_retain();
  id v26 = v23;
  id v27 = v24;
  uint64_t v28 = v38;
  sub_22D2BC3C0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v28);
  sub_22D05FD14();
  uint64_t v29 = v36;
  uint64_t v30 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v29);
  return v30;
}

uint64_t sub_22D05DAC8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  id v42 = a5;
  uint64_t v43 = a4;
  sub_22D05FD88(0, &qword_26853D7A0, MEMORY[0x263F062D0]);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = type metadata accessor for PBDateRange(0);
  MEMORY[0x270FA5388](v13 - 8);
  unint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for PBMedicationTrackingSchedules(0);
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (uint64_t *)((char *)&v39 - v20);
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v36 = sub_22D2BD470();
    swift_bridgeObjectRelease();
    if (v36) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    uint64_t v40 = v15;
    uint64_t v41 = v19;
    id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08790]), sel_init);
    id v23 = (void *)sub_22D2BCBA0();
    objc_msgSend(v22, sel_setDateFormat_, v23);

    swift_retain();
    id v24 = a3;
    id v25 = v42;
    id v26 = v22;
    uint64_t v27 = sub_22D05FDDC(a1, a2, (uint64_t)v24, v43, (uint64_t)v25, (uint64_t)v26, (uint64_t)v44, type metadata accessor for PBMedicationTrackingSchedule, (void (*)(BOOL, unint64_t, uint64_t))sub_22D24BA34, (void (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_22D05E210, type metadata accessor for PBMedicationTrackingSchedule);

    swift_release();
    id v42 = v26;

    sub_22D2BBFE0();
    uint64_t *v21 = v27;
    sub_22D2BBFE0();
    uint64_t v28 = type metadata accessor for PBTypedData(0);
    uint64_t v29 = *(int *)(v28 + 20);
    if (qword_26853CCD0 != -1) {
      swift_once();
    }
    *(void *)(a6 + v29) = qword_26853D990;
    uint64_t v30 = sub_22D2BB6F0();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v12, 1, 1, v30);
    swift_retain();
    uint64_t v31 = (uint64_t)v40;
    sub_22D22BDC4(5, 1, v12, a2);
    sub_22D060028((uint64_t)v12, &qword_26853D7A0, MEMORY[0x263F062D0]);
    PBTypedData.dateRange.setter(v31);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v32 = swift_retain();
      *(void *)(a6 + v29) = sub_22D0040E0(v32);
      swift_release();
    }
    uint64_t v33 = *(void *)(a6 + v29);
    swift_beginAccess();
    *(void *)(v33 + 16) = 129;
    *(unsigned char *)(v33 + 24) = 1;
    uint64_t v34 = (uint64_t)v41;
    sub_22D060084((uint64_t)v21, (uint64_t)v41, type metadata accessor for PBMedicationTrackingSchedules);
    PBTypedData.medicationTrackingSchedules.setter(v34);

    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(a6, 0, 1, v28);
    return sub_22D0600EC((uint64_t)v21, type metadata accessor for PBMedicationTrackingSchedules);
  }
  uint64_t v37 = type metadata accessor for PBTypedData(0);
  uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56);
  return v38(a6, 1, 1, v37);
}

uint64_t sub_22D05DFEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_22D2BBF00();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  id v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void *)(a2 + 56);
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v9, *MEMORY[0x263F44A70], v6);
  uint64_t v18 = v9;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_22D22E468(MEMORY[0x263F8EE78], (void (*)(uint64_t *, char *))sub_22D05C90C, (uint64_t)v17, v10);
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  if (*(void *)(v11 + 16))
  {
    sub_22D060084(a1, a3, type metadata accessor for PBTypedData);
    uint64_t v12 = sub_22D237C78(v11);
    swift_bridgeObjectRelease();
    uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(void *)(a3 + *(int *)(Output + 20)) = v12;
    uint64_t v14 = (void *)(a3 + *(int *)(Output + 24));
    void *v14 = 0;
    v14[1] = 0;
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(Output - 8) + 56))(a3, 0, 1, Output);
  }
  else
  {
    uint64_t v16 = type metadata accessor for ClinicalSharingQueryOutput(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(a3, 1, 1, v16);
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_22D05E210@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, uint64_t a7@<X8>)
{
  id v127 = a6;
  id v126 = a5;
  uint64_t v128 = a4;
  id v125 = a3;
  uint64_t v135 = a2;
  sub_22D05FD88(0, &qword_26853E4C8, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v120 = (uint64_t)&v117 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v119 = (uint64_t)&v117 - v12;
  uint64_t v131 = type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange(0);
  uint64_t v118 = *(void *)(v131 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v131);
  uint64_t v130 = (char *)&v117 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v132 = (char *)&v117 - v15;
  sub_22D05FD88(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v124 = (char *)&v117 - v17;
  uint64_t v136 = sub_22D2BBC30();
  uint64_t v134 = *(void *)(v136 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v136);
  uint64_t v117 = (char *)&v117 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v21 = (char *)&v117 - v20;
  uint64_t v123 = sub_22D2BBE60();
  uint64_t v122 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v121 = (char *)&v117 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_22D2BBC90();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x270FA5388](v23);
  id v26 = (char *)&v117 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *a1;
  sub_22D2BBFE0();
  uint64_t v28 = *(int *)(type metadata accessor for PBMedicationTrackingSchedule(0) + 20);
  if (qword_26853D290 != -1) {
    swift_once();
  }
  *(void *)(a7 + v28) = qword_268540878;
  swift_retain();
  id v137 = v27;
  id v29 = objc_msgSend(v27, sel_UUID);
  sub_22D2BBC70();

  uint64_t v30 = sub_22D2BBC40();
  uint64_t v32 = v31;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v33 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v33);
    swift_release();
  }
  uint64_t v34 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v34 + 16) = v30;
  *(void *)(v34 + 24) = v32;
  swift_bridgeObjectRelease();
  id v35 = v137;
  id v36 = objc_msgSend(v137, sel_medicationIdentifier);
  if (v36)
  {
    uint64_t v37 = v36;
    uint64_t v38 = sub_22D2BCBD0();
    uint64_t v40 = v39;

    uint64_t v142 = v38;
    uint64_t v143 = v40;
    uint64_t v140 = sub_22D2BCBD0();
    uint64_t v141 = v41;
    uint64_t v138 = 124;
    unint64_t v139 = 0xE100000000000000;
    sub_22D06014C();
    uint64_t v42 = sub_22D2BD240();
    unint64_t v44 = v43;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v42 = 0;
    unint64_t v44 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v45 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v45);
    swift_release();
  }
  uint64_t v46 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v46 + 32) = v42;
  *(void *)(v46 + 40) = v44;
  swift_bridgeObjectRelease();
  id v47 = objc_msgSend(v35, sel_note);
  if (v47)
  {
    uint64_t v48 = v47;
    uint64_t v49 = sub_22D2BCBD0();
    unint64_t v51 = v50;
  }
  else
  {
    uint64_t v49 = 0;
    unint64_t v51 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v52 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v52);
    swift_release();
  }
  uint64_t v53 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v53 + 96) = v49;
  *(void *)(v53 + 104) = v51;
  swift_bridgeObjectRelease();
  id v54 = objc_msgSend(v35, sel_frequencyType);
  if ((unint64_t)v54 >= 5) {
    id v55 = 0;
  }
  else {
    id v55 = v54;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v56 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v56);
    swift_release();
  }
  uint64_t v57 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v57 + 120) = v55;
  *(unsigned char *)(v57 + 128) = 1;
  id v58 = objc_msgSend(v35, sel_createdUTCOffset);
  uint64_t v59 = v121;
  sub_22D2BBE40();

  sub_22D2BBC20();
  uint64_t v60 = sub_22D2BBE20();
  unint64_t v62 = v61;
  uint64_t v133 = *(void (**)(char *, uint64_t))(v134 + 8);
  v133(v21, v136);
  (*(void (**)(char *, uint64_t))(v122 + 8))(v59, v123);
  if (v62) {
    uint64_t v63 = v60;
  }
  else {
    uint64_t v63 = 0;
  }
  if (v62) {
    unint64_t v64 = v62;
  }
  else {
    unint64_t v64 = 0xE000000000000000;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v65 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v65);
    swift_release();
  }
  uint64_t v66 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v66 + 48) = v63;
  *(void *)(v66 + 56) = v64;
  swift_bridgeObjectRelease();
  id v67 = objc_msgSend(v35, sel_startDateTime);
  sub_22D2BBC00();

  id v68 = *(id *)(v135 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  uint64_t v69 = (void *)sub_22D2BBBC0();
  id v70 = objc_msgSend(v68, sel_stringFromDate_, v69);

  uint64_t v71 = sub_22D2BCBD0();
  uint64_t v73 = v72;

  v133(v21, v136);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v74 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v74);
    swift_release();
  }
  uint64_t v75 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v75 + 64) = v71;
  *(void *)(v75 + 72) = v73;
  swift_bridgeObjectRelease();
  id v76 = objc_msgSend(v137, sel_endDateTime);
  if (!v76)
  {
    uint64_t v80 = (uint64_t)v124;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v134 + 56))(v124, 1, 1, v136);
    goto LABEL_36;
  }
  uint64_t v77 = v76;
  sub_22D2BBC00();

  uint64_t v78 = v134;
  uint64_t v79 = *(void (**)(char *, char *, uint64_t))(v134 + 32);
  uint64_t v80 = (uint64_t)v124;
  uint64_t v81 = v21;
  uint64_t v82 = v136;
  v79(v124, v81, v136);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v78 + 56))(v80, 0, 1, v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v80, 1, v82) == 1)
  {
LABEL_36:
    sub_22D060028(v80, &qword_26AEC0F48, MEMORY[0x263F07490]);
    goto LABEL_37;
  }
  v79(v117, (char *)v80, v82);
  id v83 = v68;
  uint64_t v84 = (void *)sub_22D2BBBC0();
  id v85 = objc_msgSend(v83, sel_stringFromDate_, v84);

  uint64_t v86 = sub_22D2BCBD0();
  uint64_t v88 = v87;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v89 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v89);
    swift_release();
  }
  uint64_t v90 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v90 + 80) = v86;
  *(void *)(v90 + 88) = v88;
  swift_bridgeObjectRelease();
  v133(v117, v82);
LABEL_37:
  id v91 = v137;
  id v92 = objc_msgSend(v137, sel_timeIntervals);
  sub_22D030474(0, &qword_26853E4D0);
  unint64_t v93 = sub_22D2BCE00();

  uint64_t v94 = v135;
  swift_retain();
  id v95 = v125;
  id v96 = v126;
  id v97 = v127;
  uint64_t v98 = v129;
  uint64_t v99 = sub_22D05FDDC(v93, v94, (uint64_t)v95, v128, (uint64_t)v96, (uint64_t)v97, (uint64_t)v144, type metadata accessor for PBHKMedicationScheduleIntervalData, (void (*)(BOOL, unint64_t, uint64_t))sub_22D24BA7C, (void (*)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_22D05F184, type metadata accessor for PBHKMedicationScheduleIntervalData);
  uint64_t v136 = v98;
  swift_bridgeObjectRelease();

  swift_release();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v100 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v100);
    swift_release();
  }
  uint64_t v101 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(void *)(v101 + 112) = v99;
  swift_bridgeObjectRelease();
  unsigned __int8 v102 = objc_msgSend(v91, sel_isUnavailable);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  int v104 = v132;
  uint64_t v105 = (uint64_t)v130;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v106 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v106);
    swift_release();
  }
  uint64_t v107 = *(void *)(a7 + v28);
  swift_beginAccess();
  *(unsigned char *)(v107 + 129) = v102;
  uint64_t v108 = v131;
  sub_22D2BBFE0();
  uint64_t result = (uint64_t)objc_msgSend(v91, sel_compatibilityRange);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_49;
  }
  if (result > 0x7FFFFFFF)
  {
LABEL_49:
    __break(1u);
    goto LABEL_50;
  }
  *int v104 = result;
  uint64_t result = (uint64_t)objc_msgSend(v91, sel_compatibilityRange);
  if (v110 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }
  if (v110 > 0x7FFFFFFF)
  {
LABEL_51:
    __break(1u);
    return result;
  }
  v104[1] = v110;
  sub_22D060084((uint64_t)v104, v105, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBMedicationTrackingSchedule._StorageClass(0);
    swift_allocObject();
    uint64_t v111 = swift_retain();
    *(void *)(a7 + v28) = sub_22D1AF328(v111);
    swift_release();
  }
  uint64_t v112 = *(void *)(a7 + v28);
  uint64_t v113 = v105;
  uint64_t v114 = v119;
  sub_22D0601A0(v113, v119, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v118 + 56))(v114, 0, 1, v108);
  uint64_t v115 = v120;
  sub_22D060208(v114, v120, &qword_26853E4C8, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  uint64_t v116 = v112
       + OBJC_IVAR____TtCV19HealthRecordsDaemon28PBMedicationTrackingScheduleP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__compatibilityVersionRange;
  swift_beginAccess();
  swift_retain();
  sub_22D060274(v115, v116, &qword_26853E4C8, (void (*)(uint64_t))type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
  swift_endAccess();
  swift_release();
  return sub_22D0600EC((uint64_t)v104, type metadata accessor for PBMedicationTrackingScheduleCompatibilityVersionRange);
}

uint64_t sub_22D05F184@<X0>(void **a1@<X0>, uint64_t a2@<X1>, void *a3@<X5>, uint64_t a4@<X8>)
{
  id v56 = a3;
  uint64_t v58 = a2;
  uint64_t v6 = sub_22D2BBC30();
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v63 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_22D2BB8E0();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x270FA5388](v61);
  uint64_t v57 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D05FD88(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v60 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  unint64_t v62 = (char *)&v55 - v12;
  sub_22D05FD88(0, &qword_26853E4D8, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v55 - v17;
  uint64_t v19 = type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions(0);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v55 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *a1;
  sub_22D2BBFE0();
  uint64_t v24 = *(int *)(type metadata accessor for PBHKMedicationScheduleIntervalData(0) + 20);
  if (qword_26853D2B8 != -1) {
    swift_once();
  }
  *(void *)(a4 + v24) = qword_2685408E0;
  swift_retain();
  sub_22D2800A8((char)objc_msgSend(v23, sel_daysOfWeek), (uint64_t)v22);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    uint64_t v25 = swift_retain();
    *(void *)(a4 + v24) = sub_22D1B211C(v25);
    swift_release();
  }
  uint64_t v26 = *(void *)(a4 + v24);
  sub_22D0601A0((uint64_t)v22, (uint64_t)v18, type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_22D060208((uint64_t)v18, (uint64_t)v16, &qword_26853E4D8, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  uint64_t v27 = v26
      + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__daysOfWeek;
  swift_beginAccess();
  swift_retain();
  sub_22D060274((uint64_t)v16, v27, &qword_26853E4D8, (void (*)(uint64_t))type metadata accessor for PBHKMedicationScheduleIntervalData.HKReminderWeekdayOptions);
  swift_endAccess();
  swift_release();
  id v28 = objc_msgSend(v23, sel_cycleIndex);
  if (!v28)
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    id v28 = (id)sub_22D2BD180();
  }
  int v29 = sub_22D2BD720();

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v31 = v65;
  uint64_t v32 = (uint64_t)v62;
  uint64_t v33 = (uint64_t)v60;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    uint64_t v34 = swift_retain();
    *(void *)(a4 + v24) = sub_22D1B211C(v34);
    swift_release();
  }
  id v35 = (_DWORD *)(*(void *)(a4 + v24)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__cycleIndex);
  swift_beginAccess();
  *id v35 = v29;
  id v36 = objc_msgSend(v23, sel_cycleIntervalDays);
  if (!v36)
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    id v36 = (id)sub_22D2BD180();
  }
  int v37 = sub_22D2BD720();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    uint64_t v38 = swift_retain();
    *(void *)(a4 + v24) = sub_22D1B211C(v38);
    swift_release();
  }
  uint64_t v39 = (_DWORD *)(*(void *)(a4 + v24)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__cycleIntervalDays);
  swift_beginAccess();
  *uint64_t v39 = v37;
  id v40 = objc_msgSend(v23, sel_dose);
  if (!v40)
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    id v40 = (id)sub_22D2BD180();
  }
  int v41 = sub_22D2BD720();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
    swift_allocObject();
    uint64_t v42 = swift_retain();
    *(void *)(a4 + v24) = sub_22D1B211C(v42);
    swift_release();
  }
  unint64_t v43 = (_DWORD *)(*(void *)(a4 + v24)
                 + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dose);
  swift_beginAccess();
  *unint64_t v43 = v41;
  id v44 = objc_msgSend(v23, sel_startTimeComponent);
  uint64_t v45 = v57;
  sub_22D2BB820();

  sub_22D2BBD50();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v61);
  sub_22D04BDE8(v32, v33);
  uint64_t v46 = v64;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v33, 1, v31) == 1)
  {
    sub_22D060028(v32, &qword_26AEC0F48, MEMORY[0x263F07490]);
    uint64_t v32 = v33;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 32))(v63, v33, v31);
    id v47 = (void *)sub_22D2BBBC0();
    id v48 = objc_msgSend(v56, sel_stringFromDate_, v47);

    uint64_t v49 = sub_22D2BCBD0();
    uint64_t v51 = v50;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKMedicationScheduleIntervalData._StorageClass(0);
      swift_allocObject();
      uint64_t v52 = swift_retain();
      *(void *)(a4 + v24) = sub_22D1B211C(v52);
      swift_release();
    }
    uint64_t v53 = (uint64_t *)(*(void *)(a4 + v24)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon34PBHKMedicationScheduleIntervalDataP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__startTime);
    swift_beginAccess();
    *uint64_t v53 = v49;
    v53[1] = v51;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v46 + 8))(v63, v31);
  }
  return sub_22D060028(v32, &qword_26AEC0F48, MEMORY[0x263F07490]);
}

uint64_t sub_22D05FA10()
{
  return sub_22D05D68C(*(void *)v0, *(void **)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
}

void sub_22D05FA1C()
{
  if (!qword_26853E490)
  {
    sub_22D030474(255, (unint64_t *)&qword_26853E498);
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E490);
    }
  }
}

void sub_22D05FA84(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D05FB90(255, &qword_26853E488, MEMORY[0x263EFDCF0]);
    a3(255);
    sub_22D05FC08(&qword_26853E4A0, &qword_26853E488, v5);
    unint64_t v6 = sub_22D2BC3D0();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t sub_22D05FB50()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22D05FB88(uint64_t a1, uint64_t a2)
{
  sub_22D2BB1F0(a1, a2, *(void *)(v2 + 16));
}

void sub_22D05FB90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_22D05FA1C();
    uint64_t v7 = v6;
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D05FC08(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D05FB90(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D05FC50@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D05DAC8(a1, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void **)(v2 + 40), a2);
}

uint64_t sub_22D05FC5C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D05FC94(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t objectdestroy_2Tm()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t sub_22D05FD0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D05DFEC(a1, *(void *)(v2 + 16), a2);
}

unint64_t sub_22D05FD14()
{
  unint64_t result = qword_26853E4C0;
  if (!qword_26853E4C0)
  {
    sub_22D05FA84(255, &qword_26853E4A8, (void (*)(uint64_t))type metadata accessor for ClinicalSharingQueryOutput);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E4C0);
  }
  return result;
}

void sub_22D05FD88(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_22D05FDDC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void), void (*a9)(BOOL, unint64_t, uint64_t), void (*a10)(id *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a11)(void))
{
  uint64_t v12 = v11;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a2;
  uint64_t v14 = a8(0);
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v17 = (char *)&v26 - v16;
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v19 = MEMORY[0x263F8EE78];
    if (!v18) {
      return v19;
    }
    uint64_t v36 = MEMORY[0x263F8EE78];
    uint64_t v26 = a9;
    uint64_t result = ((uint64_t (*)(void, uint64_t, void))a9)(0, v18 & ~(v18 >> 63), 0);
    if (v18 < 0) {
      break;
    }
    uint64_t v21 = 0;
    int v29 = a10;
    uint64_t v27 = a11;
    unint64_t v28 = a1 & 0xC000000000000001;
    uint64_t v19 = v36;
    while (v18 != v21)
    {
      if (v28) {
        id v22 = (id)MEMORY[0x230F7AF90](v21, a1);
      }
      else {
        id v22 = *(id *)(a1 + 8 * v21 + 32);
      }
      uint64_t v23 = v22;
      id v35 = v22;
      v29(&v35, v30, v31, v32, v33, v34);
      if (v12)
      {
        swift_release();

        return v19;
      }
      uint64_t v12 = 0;

      uint64_t v36 = v19;
      unint64_t v25 = *(void *)(v19 + 16);
      unint64_t v24 = *(void *)(v19 + 24);
      if (v25 >= v24 >> 1)
      {
        v26(v24 > 1, v25 + 1, 1);
        uint64_t v19 = v36;
      }
      ++v21;
      *(void *)(v19 + 16) = v25 + 1;
      sub_22D0601A0((uint64_t)v17, v19+ ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80))+ *(void *)(v15 + 72) * v25, v27);
      if (v18 == v21) {
        return v19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v18 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_22D060028(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_22D05FD88(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22D060084(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D0600EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_22D06014C()
{
  unint64_t result = qword_26AEC0F20;
  if (!qword_26AEC0F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC0F20);
  }
  return result;
}

uint64_t sub_22D0601A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D060208(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_22D05FD88(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D060274(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_22D05FD88(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

unint64_t sub_22D0602E0()
{
  return 0xD000000000000020;
}

unint64_t sub_22D060374()
{
  return sub_22D0602E0();
}

uint64_t sub_22D06037C(uint64_t a1, unint64_t a2)
{
  v20[3] = *MEMORY[0x263EF8340];
  uint64_t v4 = sub_22D2BCA90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_22D2BC910();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D060E7C(&qword_26853E4E0, MEMORY[0x263F047F8]);
  sub_22D2BC900();
  switch(a2 >> 62)
  {
    case 1uLL:
      uint64_t v19 = v8;
      if (a1 >> 32 < (int)a1) {
        __break(1u);
      }
      unint64_t v18 = a2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_22CFF9B64(a1, a2);
      sub_22D0B1AF8((int)a1, a1 >> 32);
      sub_22CFF5630(a1, a2);
      uint64_t v8 = v19;
      goto LABEL_9;
    case 2uLL:
      uint64_t v19 = v8;
      uint64_t v12 = *(void *)(a1 + 16);
      unint64_t v18 = *(void *)(a1 + 24);
      sub_22CFF9B64(a1, a2);
      swift_retain();
      swift_retain();
      sub_22D0B1AF8(v12, v18);
      uint64_t v8 = v19;
      swift_release();
      swift_release();
      goto LABEL_8;
    case 3uLL:
      memset(v20, 0, 14);
      goto LABEL_7;
    default:
      v20[0] = a1;
      LOWORD(v20[1]) = a2;
      BYTE2(v20[1]) = BYTE2(a2);
      BYTE3(v20[1]) = BYTE3(a2);
      BYTE4(v20[1]) = BYTE4(a2);
      BYTE5(v20[1]) = BYTE5(a2);
LABEL_7:
      sub_22D2BC8E0();
LABEL_8:
      sub_22CFF5630(a1, a2);
LABEL_9:
      sub_22D2BC8F0();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      sub_22D060E7C(&qword_26853E4E8, MEMORY[0x263F045C0]);
      uint64_t v13 = sub_22D2BCA80();
      uint64_t v14 = v8;
      unint64_t v16 = v15;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v14);
      return sub_22D060760(v13, v16);
  }
}

uint64_t sub_22D060760(uint64_t a1, unint64_t a2)
{
  v16[5] = *MEMORY[0x263EF8340];
  *(void *)&long long v15 = a1;
  *((void *)&v15 + 1) = a2;
  sub_22D060A58();
  sub_22D060B44();
  swift_bridgeObjectRetain();
  if (swift_dynamicCast())
  {
    sub_22CFF8C10(v13, (uint64_t)v16);
    __swift_project_boxed_opaque_existential_1(v16, v16[3]);
    sub_22D2BB930();
    swift_bridgeObjectRelease();
    v13[0] = v15;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
    return *(void *)&v13[0];
  }
  uint64_t v14 = 0;
  memset(v13, 0, sizeof(v13));
  sub_22D060B9C((uint64_t)v13);
  v13[0] = xmmword_22D2BFC50;
  memset(v16, 0, 15);
  uint64_t v4 = sub_22D060A0C(v16, 0, a1, a2);
  uint64_t v7 = v4;
  if (v6)
  {
    if (v6 <= 0)
    {
      sub_22D2BBAE0();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    goto LABEL_22;
  }
  unint64_t v8 = v5;
  memset(v16, 0, 15);
  uint64_t v9 = *((void *)v4 + 2);
  if (v5 == v9) {
    goto LABEL_17;
  }
  if ((v5 & 0x8000000000000000) != 0) {
LABEL_23:
  }
    __break(1u);
  if (v5 >= *((void *)v4 + 2))
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  LOBYTE(v10) = 0;
  uint64_t v11 = v9 - 1;
  while (1)
  {
    *((unsigned char *)v16 + v10) = v7[v8 + 32];
    __int16 v10 = v10 + 1;
    if ((v10 & 0x100) != 0) {
      goto LABEL_21;
    }
    if (v10 != 14) {
      break;
    }
    *(void *)&long long v15 = v16[0];
    DWORD2(v15) = v16[1];
    WORD6(v15) = WORD2(v16[1]);
    sub_22D2BBAF0();
    if (v11 == v8) {
      goto LABEL_17;
    }
    LOBYTE(v10) = 0;
LABEL_11:
    if (++v8 >= *((void *)v7 + 2)) {
      goto LABEL_20;
    }
  }
  if (v11 != v8) {
    goto LABEL_11;
  }
  *(void *)&long long v15 = v16[0];
  DWORD2(v15) = v16[1];
  WORD6(v15) = WORD2(v16[1]);
  sub_22D2BBAF0();
LABEL_17:
  swift_bridgeObjectRelease();
LABEL_18:
  swift_bridgeObjectRelease();
  return *(void *)&v13[0];
}

unsigned char *sub_22D060A0C(unsigned char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t result = sub_22D060D18(a1, a2, a3, a4);
  if (!v4) {
    return (unsigned char *)swift_bridgeObjectRetain();
  }
  return result;
}

void sub_22D060A58()
{
  if (!qword_26853E4F0)
  {
    sub_22D060AEC();
    sub_22D060E7C(&qword_26853E500, (void (*)(uint64_t))sub_22D060AEC);
    unint64_t v0 = sub_22D2BD440();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E4F0);
    }
  }
}

void sub_22D060AEC()
{
  if (!qword_26853E4F8)
  {
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E4F8);
    }
  }
}

unint64_t sub_22D060B44()
{
  unint64_t result = qword_26853E508;
  if (!qword_26853E508)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26853E508);
  }
  return result;
}

uint64_t sub_22D060B9C(uint64_t a1)
{
  sub_22D060BF8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_22D060BF8()
{
  if (!qword_26853E510)
  {
    sub_22D060B44();
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E510);
    }
  }
}

uint64_t sub_22D060C50(uint64_t a1)
{
  sub_22D060AEC();
  uint64_t v3 = v2;
  v10[3] = v2;
  v10[4] = sub_22D060E7C(&qword_26853E518, (void (*)(uint64_t))sub_22D060AEC);
  v10[0] = a1;
  uint64_t v4 = __swift_project_boxed_opaque_existential_1(v10, v3);
  unint64_t v5 = (unsigned char *)(*v4 + 32);
  uint64_t v6 = &v5[*(void *)(*v4 + 16)];
  swift_bridgeObjectRetain();
  sub_22D23CC2C(v5, v6, &v9);
  uint64_t v7 = v9;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  return v7;
}

unsigned char *sub_22D060D18(unsigned char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (!result || !a2) {
    return (unsigned char *)a3;
  }
  if (a2 < 0)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  unint64_t v4 = *(void *)(a3 + 16);
  if (v4 == a4) {
    return (unsigned char *)a3;
  }
  if (v4 <= a4) {
    goto LABEL_32;
  }
  uint64_t v5 = a3 + 32;
  unint64_t v6 = a4 + 1;
  *unint64_t result = *(unsigned char *)(a3 + 32 + a4);
  if (a2 == 1 || v6 == v4) {
    return (unsigned char *)a3;
  }
  if (v6 >= v4) {
    goto LABEL_33;
  }
  unint64_t v7 = a4 + 2;
  result[1] = *(unsigned char *)(v5 + v6);
  if (a2 == 2 || v7 == v4) {
    return (unsigned char *)a3;
  }
  if (v7 < v4)
  {
    result[2] = *(unsigned char *)(v5 + v7);
    unint64_t v8 = result + 2;
    unint64_t v9 = a4 + 3;
    if (a2 != 3)
    {
      uint64_t v10 = a2 - 4;
      if (a2 - 4 >= v4 - a4 - 3) {
        uint64_t v10 = v4 - a4 - 3;
      }
      unint64_t v11 = v10 + 1;
      if (v11 < 0x11 || ((unint64_t)&result[-a3 - a4] & 0xFFFFFFFFFFFFFFF0) == 0x20)
      {
        uint64_t v12 = 3;
      }
      else
      {
        uint64_t v13 = v11 & 0xF;
        if ((v11 & 0xF) == 0) {
          uint64_t v13 = 16;
        }
        unint64_t v14 = v11 - v13;
        v9 += v14;
        long long v15 = &v8[v14];
        uint64_t v12 = v14 + 3;
        unint64_t v16 = result + 3;
        uint64_t v17 = (long long *)(a4 + a3 + 35);
        do
        {
          long long v18 = *v17++;
          *v16++ = v18;
          v14 -= 16;
        }
        while (v14);
        unint64_t v8 = v15;
      }
      uint64_t v19 = v8 + 1;
      do
      {
        if (v4 == v9) {
          break;
        }
        ++v12;
        *v19++ = *(unsigned char *)(v5 + v9++);
      }
      while (a2 != v12);
    }
    return (unsigned char *)a3;
  }
LABEL_34:
  __break(1u);
  return result;
}

uint64_t sub_22D060E7C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DataError(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DataError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 8) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DataError()
{
  return &type metadata for DataError;
}

uint64_t sub_22D060F20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v11 = sub_22D2BBC30();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *a1;
  int v31 = *((unsigned __int8 *)a1 + 8);
  sub_22D2BBFE0();
  uint64_t v16 = *(int *)(type metadata accessor for PBPlainText(0) + 20);
  if (qword_26853CCF8 != -1) {
    swift_once();
  }
  *(void *)(a6 + v16) = qword_26853E130;
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    int v29 = v14;
    uint64_t v17 = swift_retain();
    unint64_t v14 = v29;
    *(void *)(a6 + v16) = sub_22D0378B8(v17);
    swift_release();
  }
  uint64_t v18 = *(void *)(a6 + v16);
  swift_beginAccess();
  *(void *)(v18 + 16) = v15;
  *(unsigned char *)(v18 + 24) = v31;
  if (a3)
  {
    uint64_t v19 = v30;
  }
  else
  {
    if (qword_26853D3D0 != -1) {
      swift_once();
    }
    uint64_t v20 = (void *)qword_268568488;
    sub_22D2BBC20();
    uint64_t v21 = (void *)sub_22D2BBBC0();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    id v22 = objc_msgSend(v20, sel_stringFromDate_, v21);

    uint64_t v19 = sub_22D2BCBD0();
    a3 = v23;
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBPlainText._StorageClass(0);
    swift_allocObject();
    uint64_t v24 = swift_retain();
    *(void *)(a6 + v16) = sub_22D0378B8(v24);
    swift_release();
  }
  uint64_t v25 = *(void *)(a6 + v16);
  swift_beginAccess();
  *(void *)(v25 + 64) = v19;
  *(void *)(v25 + 72) = a3;
  uint64_t result = swift_bridgeObjectRelease();
  if (a5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBPlainText._StorageClass(0);
      swift_allocObject();
      uint64_t v27 = swift_retain();
      *(void *)(a6 + v16) = sub_22D0378B8(v27);
      swift_release();
    }
    uint64_t v28 = *(void *)(a6 + v16);
    swift_beginAccess();
    *(void *)(v28 + 48) = a4;
    *(void *)(v28 + 56) = a5;
    return swift_bridgeObjectRelease();
  }
  return result;
}

unint64_t HKHealthRecordsEnvironment.clinicalSharingEndpoint.getter(unint64_t a1)
{
  unint64_t result = 0xD000000000000023;
  if (a1 <= 0xD)
  {
    uint64_t v3 = 1 << a1;
    uint64_t v4 = 1 << a1;
    if (((1 << a1) & 0x820) != 0) {
      unint64_t v5 = 0xD000000000000022;
    }
    else {
      unint64_t v5 = 0xD000000000000023;
    }
    if ((v4 & 3) != 0) {
      unint64_t v5 = 0xD00000000000001FLL;
    }
    if ((v3 & 0x2184) != 0) {
      return 0xD000000000000027;
    }
    else {
      return v5;
    }
  }
  return result;
}

id sub_22D061320()
{
  sub_22D0616A4(0, &qword_26853E520, (uint64_t (*)(uint64_t))sub_22D061670, MEMORY[0x263EFDDF8]);
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  unint64_t v5 = (char *)&v17 - v4;
  sub_22D061A4C(0, &qword_26853E538, MEMORY[0x263EFDEA0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v17 - v9;
  id result = objc_msgSend(self, sel_sharedBehavior);
  if (result)
  {
    uint64_t v12 = result;
    unsigned int v13 = objc_msgSend(result, sel_hksp_supportsSleepDaemon);

    if (v13)
    {
      *(void *)(swift_allocObject() + 16) = v0;
      unint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
      sub_22D061A4C(0, &qword_26853E548, MEMORY[0x263EFDE20]);
      swift_allocObject();
      id v15 = v0;
      uint64_t v18 = sub_22D2BC6F0();
      sub_22D061AC4(&qword_26853E550, &qword_26853E548, v14);
      uint64_t v16 = sub_22D2BC720();
      swift_release();
    }
    else
    {
      uint64_t v18 = 0;
      sub_22D061670(0);
      sub_22D2BC6B0();
      sub_22CFF49FC();
      sub_22D2BC680();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_22D061AC4(&qword_26853E540, &qword_26853E538, MEMORY[0x263EFDEA0]);
      uint64_t v16 = sub_22D2BC720();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    }
    return (id)v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_22D061670(uint64_t a1)
{
}

void sub_22D0616A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_22D061708()
{
  unint64_t result = qword_26853E530;
  if (!qword_26853E530)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26853E530);
  }
  return result;
}

void sub_22D061748(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;
  uint64_t v7 = qword_26AEC1C58;
  swift_retain();
  if (v7 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_22D2BC390();
  __swift_project_value_buffer(v8, (uint64_t)qword_26AEC3C90);
  id v9 = a3;
  uint64_t v10 = sub_22D2BC380();
  os_log_type_t v11 = sub_22D2BD080();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    id v14 = objc_msgSend(v9, sel_description);
    uint64_t v15 = sub_22D2BCBD0();
    unint64_t v17 = v16;

    sub_22D0A4D24(v15, v17, aBlock);
    sub_22D2BD220();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v10, v11, "Requesting sleep schedule from %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v13, -1, -1);
    MEMORY[0x230F7BDF0](v12, -1, -1);
  }
  else
  {
  }
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v9;
  v18[3] = sub_22D034BAC;
  v18[4] = v6;
  aBlock[4] = (uint64_t)sub_22D061E50;
  aBlock[5] = (uint64_t)v18;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_22D061D84;
  aBlock[3] = (uint64_t)&block_descriptor_4;
  uint64_t v19 = _Block_copy(aBlock);
  id v20 = v9;
  swift_release();
  objc_msgSend(v20, sel_currentSleepScheduleWithCompletion_, v19);
  _Block_release(v19);
}

uint64_t sub_22D061A0C()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22D061A44(uint64_t a1, uint64_t a2)
{
  sub_22D061748(a1, a2, *(void **)(v2 + 16));
}

void sub_22D061A4C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_22D061670(255);
    uint64_t v7 = v6;
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D061AC4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D061A4C(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D061B08()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_22D061B40(uint64_t a1, void *a2, void *a3, void (*a4)(void, void))
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_22D2BC390();
  __swift_project_value_buffer(v8, (uint64_t)qword_26AEC3C90);
  id v9 = a3;
  uint64_t v10 = sub_22D2BC380();
  os_log_type_t v11 = sub_22D2BD080();
  if (os_log_type_enabled(v10, v11))
  {
    id v20 = a4;
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    uint64_t v21 = v18;
    *(_DWORD *)uint64_t v12 = 136315138;
    id v13 = objc_msgSend(v9, sel_description);
    uint64_t v14 = sub_22D2BCBD0();
    uint64_t v19 = a1;
    unint64_t v16 = v15;

    a4 = v20;
    sub_22D0A4D24(v14, v16, &v21);
    sub_22D2BD220();

    a1 = v19;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v10, v11, "Done with sleep schedule from %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v18, -1, -1);
    MEMORY[0x230F7BDF0](v12, -1, -1);

    if (a2)
    {
LABEL_5:
      id v17 = a2;
      a4(a2, 1);

      return;
    }
  }
  else
  {

    if (a2) {
      goto LABEL_5;
    }
  }
  a4(a1, 0);
}

void sub_22D061D84(uint64_t a1, void *a2, void *a3)
{
  unint64_t v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  id v7 = a2;
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_22D061E10()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_22D061E50(uint64_t a1, void *a2)
{
  sub_22D061B40(a1, a2, *(void **)(v2 + 16), *(void (**)(void, void))(v2 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

void PBRevocationVersion.init()(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t PBRevocationVersion.init(rawValue:)@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t PBRevocationVersion.rawValue.getter()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void sub_22D061EB8(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

unint64_t sub_22D061EC8@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = result < 2;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_22D061EE0()
{
  if (v0[8]) {
    return *(void *)v0 != 0;
  }
  else {
    return *(void *)v0;
  }
}

void *sub_22D061EFC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2 = *result >= 2uLL;
  *(void *)a2 = *result;
  char v3 = !v2;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = 0;
  return result;
}

void sub_22D061F18(void *a1@<X8>)
{
  uint64_t v2 = *v1;
  if (*((unsigned char *)v1 + 8)) {
    uint64_t v2 = *v1 != 0;
  }
  *a1 = v2;
}

uint64_t sub_22D061F38()
{
  return sub_22D2BD760();
}

uint64_t sub_22D061FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_22D062BE4();
  return MEMORY[0x270F44AF0](a1, a2, v4);
}

uint64_t sub_22D061FF0()
{
  return sub_22D2BD760();
}

BOOL sub_22D062058(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  if (*((unsigned char *)a1 + 8)) {
    uint64_t v2 = *a1 != 0;
  }
  uint64_t v3 = *a2 != 0;
  if (!*((unsigned char *)a2 + 8)) {
    uint64_t v3 = *a2;
  }
  return v2 == v3;
}

void sub_22D062094()
{
  qword_26853E558 = (uint64_t)&unk_26E05A290;
}

uint64_t static PBRevocationVersion.allCases.getter()
{
  if (qword_26853CD18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static PBRevocationVersion.allCases.setter(uint64_t a1)
{
  if (qword_26853CD18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  qword_26853E558 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static PBRevocationVersion.allCases.modify())()
{
  if (qword_26853CD18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  return j__swift_endAccess;
}

uint64_t sub_22D06222C@<X0>(void *a1@<X8>)
{
  if (qword_26853CD18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  *a1 = qword_26853E558;
  return swift_bridgeObjectRetain();
}

uint64_t PBRevocationAuthorization.rv.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_22CFF9B64(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t PBRevocationAuthorization.rv.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_22CFF5630(*(void *)v2, *(void *)(v2 + 8));
  *(void *)uint64_t v2 = a1;
  *(void *)(v2 + 8) = a2;
  return result;
}

uint64_t (*PBRevocationAuthorization.rv.modify())()
{
  return nullsub_1;
}

void PBRevocationAuthorization.rvVersion.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 24);
  *(void *)a1 = *(void *)(v1 + 16);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PBRevocationAuthorization.rvVersion.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 16) = *(void *)result;
  *(unsigned char *)(v1 + 24) = v2;
  return result;
}

uint64_t (*PBRevocationAuthorization.rvVersion.modify())()
{
  return nullsub_1;
}

void PBRevocationAuthorization.type.getter(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 40);
  *(void *)a1 = *(void *)(v1 + 32);
  *(unsigned char *)(a1 + 8) = v2;
}

uint64_t PBRevocationAuthorization.type.setter(uint64_t result)
{
  char v2 = *(unsigned char *)(result + 8);
  *(void *)(v1 + 32) = *(void *)result;
  *(unsigned char *)(v1 + 40) = v2;
  return result;
}

uint64_t (*PBRevocationAuthorization.type.modify())()
{
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.healthInstituteID.getter()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PBRevocationAuthorization.healthInstituteID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v2 + 48) = a1;
  *(void *)(v2 + 56) = a2;
  return result;
}

uint64_t (*PBRevocationAuthorization.healthInstituteID.modify())()
{
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.unknownFields.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PBRevocationAuthorization() + 32);
  uint64_t v4 = sub_22D2BBFF0();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for PBRevocationAuthorization()
{
  uint64_t result = qword_26853E5E0;
  if (!qword_26853E5E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t PBRevocationAuthorization.unknownFields.setter(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for PBRevocationAuthorization() + 32);
  uint64_t v4 = sub_22D2BBFF0();
  unint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40);
  return v5(v3, a1, v4);
}

uint64_t (*PBRevocationAuthorization.unknownFields.modify())()
{
  return nullsub_1;
}

uint64_t PBRevocationAuthorization.init()@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_22D2BBFC0();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  type metadata accessor for PBRevocationAuthorization();
  return sub_22D2BBFE0();
}

uint64_t sub_22D06262C()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853E560);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853E560);
  sub_22D063EBC();
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_22D2C0F10;
  id v6 = (void *)(v5 + v4);
  unint64_t v7 = v5 + v4 + *(int *)(v2 + 56);
  *id v6 = 0;
  *(void *)unint64_t v7 = "RV_VERSION_X";
  *(void *)(v7 + 8) = 12;
  *(unsigned char *)(v7 + 16) = 2;
  uint64_t v8 = *MEMORY[0x263F50718];
  uint64_t v9 = sub_22D2BC2F0();
  uint64_t v10 = *(void (**)(void))(*(void *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  os_log_type_t v11 = (char *)v6 + v3 + *(int *)(v2 + 56);
  *(void *)((char *)v6 + v3) = 1;
  *(void *)os_log_type_t v11 = "RV_VERSION_1";
  *((void *)v11 + 1) = 12;
  v11[16] = 2;
  v10();
  return sub_22D2BC300();
}

uint64_t static PBRevocationVersion._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(&qword_26853CD20, (uint64_t)qword_26853E560, a1);
}

uint64_t sub_22D062800@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(&qword_26853CD20, (uint64_t)qword_26853E560, a1);
}

unint64_t static PBRevocationAuthorization.protoMessageName.getter()
{
  return 0xD000000000000037;
}

uint64_t sub_22D062840()
{
  uint64_t v0 = sub_22D2BC310();
  __swift_allocate_value_buffer(v0, qword_26853E578);
  __swift_project_value_buffer(v0, (uint64_t)qword_26853E578);
  sub_22D063EBC();
  sub_22D018368();
  uint64_t v2 = v1 - 8;
  uint64_t v3 = *(void *)(*(void *)(v1 - 8) + 72);
  unint64_t v4 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_22D2C1A90;
  unint64_t v5 = v15 + v4 + *(int *)(v2 + 56);
  *(void *)(v15 + v4) = 1;
  *(void *)unint64_t v5 = "rv";
  *(void *)(v5 + 8) = 2;
  *(unsigned char *)(v5 + 16) = 2;
  uint64_t v6 = *MEMORY[0x263F50718];
  uint64_t v7 = sub_22D2BC2F0();
  uint64_t v8 = *(void (**)(void))(*(void *)(v7 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v8)(v5, v6, v7);
  unint64_t v9 = v15 + v4 + v3 + *(int *)(v2 + 56);
  *(void *)(v15 + v4 + v3) = 2;
  *(void *)unint64_t v9 = "rv_version";
  *(void *)(v9 + 8) = 10;
  *(unsigned char *)(v9 + 16) = 2;
  v8();
  uint64_t v10 = (void *)(v15 + v4 + 2 * v3);
  os_log_type_t v11 = (char *)v10 + *(int *)(v2 + 56);
  *uint64_t v10 = 3;
  *(void *)os_log_type_t v11 = "type";
  *((void *)v11 + 1) = 4;
  v11[16] = 2;
  v8();
  uint64_t v12 = (void *)(v15 + v4 + 3 * v3);
  id v13 = (char *)v12 + *(int *)(v2 + 56);
  *uint64_t v12 = 4;
  *(void *)id v13 = "health_institute_id";
  *((void *)v13 + 1) = 19;
  v13[16] = 2;
  v8();
  return sub_22D2BC300();
}

uint64_t static PBRevocationAuthorization._protobuf_nameMap.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22D00FAE0(qword_26853CD28, (uint64_t)qword_26853E578, a1);
}

uint64_t PBRevocationAuthorization.decodeMessage<A>(decoder:)()
{
  uint64_t result = sub_22D2BC080();
  uint64_t v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          uint64_t v4 = v3;
          sub_22D2BC110();
          goto LABEL_5;
        case 2:
          sub_22D062BE4();
          goto LABEL_11;
        case 3:
          sub_22D03BAF0();
LABEL_11:
          uint64_t v4 = v3;
          sub_22D2BC0D0();
          goto LABEL_5;
        case 4:
          uint64_t v4 = v3;
          sub_22D2BC170();
LABEL_5:
          uint64_t v3 = v4;
          break;
        default:
          break;
      }
      uint64_t result = sub_22D2BC080();
    }
  }
  return result;
}

unint64_t sub_22D062BE4()
{
  unint64_t result = qword_26853E590;
  if (!qword_26853E590)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E590);
  }
  return result;
}

uint64_t PBRevocationAuthorization.traverse<A>(visitor:)()
{
  uint64_t v2 = *v0;
  unint64_t v3 = v0[1];
  switch(v3 >> 62)
  {
    case 1uLL:
      if ((int)v2 != v2 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 2uLL:
      if (*(void *)(v2 + 16) != *(void *)(v2 + 24)) {
        goto LABEL_7;
      }
      goto LABEL_8;
    case 3uLL:
      goto LABEL_8;
    default:
      if ((v3 & 0xFF000000000000) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      uint64_t result = sub_22D2BC260();
      if (!v1)
      {
LABEL_8:
        if (!v0[2] || (sub_22D062BE4(), uint64_t result = sub_22D2BC240(), !v1))
        {
          if (!v0[4] || (sub_22D03BAF0(), uint64_t result = sub_22D2BC240(), !v1))
          {
            unint64_t v5 = v0[7];
            uint64_t v6 = HIBYTE(v5) & 0xF;
            if ((v5 & 0x2000000000000000) == 0) {
              uint64_t v6 = v0[6] & 0xFFFFFFFFFFFFLL;
            }
            if (!v6 || (uint64_t result = sub_22D2BC2B0(), !v1))
            {
              type metadata accessor for PBRevocationAuthorization();
              return sub_22D2BBFD0();
            }
          }
        }
      }
      return result;
  }
}

uint64_t PBRevocationAuthorization.hashValue.getter()
{
  return sub_22D2BD760();
}

uint64_t sub_22D062E78@<X0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_22D2BBFC0();
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0xE000000000000000;
  return sub_22D2BBFE0();
}

unint64_t sub_22D062ECC()
{
  return 0xD000000000000037;
}

uint64_t sub_22D062EE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 32);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  return v6(a2, v4, v5);
}

uint64_t sub_22D062F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + *(int *)(a2 + 32);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);
  return v6(v4, a1, v5);
}

uint64_t (*sub_22D062FC8())()
{
  return nullsub_1;
}

uint64_t sub_22D062FEC()
{
  return PBRevocationAuthorization.decodeMessage<A>(decoder:)();
}

uint64_t sub_22D063004()
{
  return PBRevocationAuthorization.traverse<A>(visitor:)();
}

uint64_t sub_22D06301C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D063E74(&qword_26853E5F0, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
  return MEMORY[0x270F44AE8](a1, a2, v4);
}

uint64_t sub_22D063098@<X0>(uint64_t a1@<X8>)
{
  return sub_22D010020(qword_26853CD28, (uint64_t)qword_26853E578, a1);
}

uint64_t sub_22D0630BC(uint64_t a1)
{
  uint64_t v2 = sub_22D063E74((unint64_t *)&qword_26853E5D0, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
  return MEMORY[0x270F44CC0](a1, v2);
}

uint64_t sub_22D063128()
{
  sub_22D063E74((unint64_t *)&qword_26853E5D0, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
  return sub_22D2BC200();
}

uint64_t _s19HealthRecordsDaemon25PBRevocationAuthorizationV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBFF0();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v20 - v9;
  if ((sub_22D1158DC(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0) {
    goto LABEL_14;
  }
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a2 + 16);
  if (*(unsigned char *)(a1 + 24)) {
    uint64_t v11 = v11 != 0;
  }
  if (*(unsigned char *)(a2 + 24) != 1)
  {
    if (v11 == v12) {
      goto LABEL_11;
    }
LABEL_14:
    char v15 = 0;
    return v15 & 1;
  }
  if (!v12)
  {
    if (!v11) {
      goto LABEL_11;
    }
    goto LABEL_14;
  }
  if (v11 != 1) {
    goto LABEL_14;
  }
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = *(void *)(a2 + 32);
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    switch(v14)
    {
      case 1:
        if (v13 == 1) {
          goto LABEL_17;
        }
        goto LABEL_14;
      case 2:
        if (v13 == 2) {
          goto LABEL_17;
        }
        goto LABEL_14;
      case 3:
        if (v13 == 3) {
          goto LABEL_17;
        }
        goto LABEL_14;
      default:
        if (v13) {
          goto LABEL_14;
        }
        goto LABEL_17;
    }
  }
  if (v13 != v14) {
    goto LABEL_14;
  }
LABEL_17:
  if (*(void *)(a1 + 48) == *(void *)(a2 + 48) && *(void *)(a1 + 56) == *(void *)(a2 + 56)
    || (char v15 = 0, (sub_22D2BD660() & 1) != 0))
  {
    uint64_t v17 = type metadata accessor for PBRevocationAuthorization();
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v10, a1 + *(int *)(v17 + 32), v4);
    v18(v8, a2 + *(int *)(v17 + 32), v4);
    sub_22D063E74(&qword_26853DB30, MEMORY[0x263F50560]);
    char v15 = sub_22D2BCB90();
    uint64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  return v15 & 1;
}

unint64_t sub_22D063448()
{
  unint64_t result = qword_26853E5A0;
  if (!qword_26853E5A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E5A0);
  }
  return result;
}

unint64_t sub_22D0634A0()
{
  unint64_t result = qword_26853E5A8;
  if (!qword_26853E5A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E5A8);
  }
  return result;
}

unint64_t sub_22D0634F8()
{
  unint64_t result = qword_26853E5B0;
  if (!qword_26853E5B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E5B0);
  }
  return result;
}

uint64_t sub_22D06354C()
{
  return sub_22D063E74(&qword_26853E5B8, (void (*)(uint64_t))sub_22D063594);
}

void sub_22D063594()
{
  if (!qword_26853E5C0)
  {
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E5C0);
    }
  }
}

uint64_t sub_22D0635EC()
{
  return sub_22D063E74(&qword_26853E5C8, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
}

uint64_t sub_22D063634()
{
  return sub_22D063E74((unint64_t *)&qword_26853E5D0, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
}

uint64_t sub_22D06367C()
{
  return sub_22D063E74(&qword_26853E598, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
}

uint64_t sub_22D0636C4()
{
  return sub_22D063E74(&qword_26853E5D8, (void (*)(uint64_t))type metadata accessor for PBRevocationAuthorization);
}

uint64_t storeEnumTagSinglePayload for PBDataType(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)unint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 9) = v3;
  return result;
}

uint64_t sub_22D06373C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_22D063758(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)unint64_t result = (a2 - 1);
    *(unsigned char *)(result + 8) = 1;
  }
  else
  {
    *(unsigned char *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PBRevocationVersion()
{
  return &type metadata for PBRevocationVersion;
}

unint64_t initializeBufferWithCopyOfBuffer for PBRevocationAuthorization(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_22CFF9B64(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
    uint64_t v9 = *(void *)(a2 + 48);
    uint64_t v10 = *(void *)(a2 + 56);
    uint64_t v11 = *(int *)(a3 + 32);
    uint64_t v12 = a2 + v11;
    uint64_t v13 = a1 + v11;
    *(void *)(a1 + 48) = v9;
    *(void *)(a1 + 56) = v10;
    uint64_t v14 = sub_22D2BBFF0();
    char v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v13, v12, v14);
  }
  return a1;
}

uint64_t destroy for PBRevocationAuthorization(uint64_t a1, uint64_t a2)
{
  sub_22CFF5630(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = sub_22D2BBFF0();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_22CFF9B64(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  uint64_t v10 = *(int *)(a3 + 32);
  uint64_t v11 = a2 + v10;
  uint64_t v12 = a1 + v10;
  *(void *)(a1 + 48) = v8;
  *(void *)(a1 + 56) = v9;
  uint64_t v13 = sub_22D2BBFF0();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v12, v11, v13);
  return a1;
}

uint64_t assignWithCopy for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_22CFF9B64(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_22CFF5630(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 32);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

uint64_t initializeWithTake for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = *(int *)(a3 + 32);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  uint64_t v7 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t assignWithTake for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_22CFF5630(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 32);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D063C5C);
}

uint64_t sub_22D063C5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_22D2BBFF0();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 32);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for PBRevocationAuthorization(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D063D20);
}

uint64_t sub_22D063D20(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_22D2BBFF0();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D063DC8()
{
  uint64_t result = sub_22D2BBFF0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D063E74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D063EBC()
{
  if (!qword_26853DB38)
  {
    sub_22D018368();
    unint64_t v0 = sub_22D2BD640();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DB38);
    }
  }
}

uint64_t WebRequestResponse.request.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22CFF4B00(v1, a1);
}

id WebRequestResponse.response.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1[5];
  unint64_t v3 = v1[6];
  id v5 = (id)v1[7];
  *a1 = v2;
  a1[1] = v3;
  a1[2] = (uint64_t)v5;
  sub_22CFFA158(v2, v3);
  return v5;
}

uint64_t WebRequestResponseError.request.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_22CFF4B00(v1, a1);
}

uint64_t WebRequestResponseError.error.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WebRequestResponseError(0) + 20);
  return sub_22D063FD8(v3, a1);
}

uint64_t type metadata accessor for WebRequestResponseError(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E608);
}

uint64_t sub_22D063FD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for WebRequestResponseError.ErrorType(uint64_t a1)
{
  return sub_22D01234C(a1, (uint64_t *)&unk_26853E618);
}

uint64_t WebRequestResponseError.completeDescription.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  sub_22D2BD310();
  swift_bridgeObjectRelease();
  uint64_t v13 = 0x2074736575716572;
  unint64_t v14 = 0xE800000000000000;
  uint64_t v5 = v0[3];
  uint64_t v6 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_22D280158(v5, v6);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  uint64_t v7 = type metadata accessor for WebRequestResponseError(0);
  sub_22D063FD8((uint64_t)v1 + *(int *)(v7 + 20), (uint64_t)v4);
  sub_22D064220();
  uint64_t v8 = (void *)swift_allocError();
  sub_22D0645FC((uint64_t)v4, v9, type metadata accessor for WebRequestResponseError.ErrorType);
  uint64_t v10 = (void *)sub_22D2BB9B0();
  id v11 = objc_msgSend(v10, sel_hrs_completeDescription);

  sub_22D2BCBD0();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  return v13;
}

unint64_t sub_22D064220()
{
  unint64_t result = qword_26853E5F8;
  if (!qword_26853E5F8)
  {
    type metadata accessor for WebRequestResponseError.ErrorType(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E5F8);
  }
  return result;
}

uint64_t WebRequestResponseError.safelyLoggableDescription.getter()
{
  uint64_t v1 = v0;
  sub_22D2BD310();
  swift_bridgeObjectRelease();
  uint64_t v2 = v0[3];
  uint64_t v3 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_22D280470(v2, v3);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  type metadata accessor for WebRequestResponseError(0);
  WebRequestResponseError.ErrorType.safelyLoggableDescription.getter();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  return 0x2074736575716572;
}

unint64_t WebRequestResponseError.ErrorType.safelyLoggableDescription.getter()
{
  uint64_t v1 = type metadata accessor for HTTPError();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (void **)((char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22D063FD8(v0, (uint64_t)v6);
  unint64_t v7 = 0xD000000000000014;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_22D0645FC((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HTTPError);
      unint64_t v12 = 0x7272652050545448;
      unint64_t v13 = 0xEB0000000020726FLL;
      HTTPError.safelyLoggableDescription.getter();
      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      unint64_t v7 = v12;
      sub_22D065434((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HTTPError);
      break;
    case 2u:
      uint64_t v9 = *v6;
      unint64_t v12 = 0;
      unint64_t v13 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD000000000000012;
      unint64_t v13 = 0x800000022D2D65C0;
      swift_getErrorValue();
      sub_22D1E40E8(v11[3]);
      sub_22D2BCCB0();
      swift_bridgeObjectRelease();

      goto LABEL_5;
    case 3u:
      return v7;
    default:
      uint64_t v8 = *v6;
      unint64_t v12 = 0;
      unint64_t v13 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v12 = 0xD00000000000002ELL;
      unint64_t v13 = 0x800000022D2D65E0;
      v11[1] = swift_getObjectType();
      sub_22D06493C();
      sub_22D2BCC30();
      sub_22D2BCCB0();

      swift_bridgeObjectRelease();
LABEL_5:
      unint64_t v7 = v12;
      break;
  }
  return v7;
}

uint64_t sub_22D0645FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t WebRequestResponseError.ErrorType.errorDescription.getter()
{
  uint64_t v1 = type metadata accessor for HTTPError();
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (void **)((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22D063FD8(v0, (uint64_t)v6);
  unint64_t v7 = 0xD000000000000014;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_22D0645FC((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HTTPError);
      unint64_t v14 = 0x7272652050545448;
      unint64_t v15 = 0xEB0000000020726FLL;
      HTTPError.errorDescription.getter();
      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
      unint64_t v7 = v14;
      sub_22D065434((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for HTTPError);
      break;
    case 2u:
      id v11 = *v6;
      unint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      sub_22D2BD310();
      sub_22D2BCCB0();
      v13[1] = v11;
      sub_22CFF49FC();
      sub_22D2BD430();

      goto LABEL_5;
    case 3u:
      return v7;
    default:
      uint64_t v8 = *v6;
      unint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
      sub_22D2BD310();
      swift_bridgeObjectRelease();
      unint64_t v14 = 0xD00000000000002DLL;
      unint64_t v15 = 0x800000022D2D6630;
      id v9 = v8;
      id v10 = objc_msgSend(v9, sel_description);
      sub_22D2BCBD0();

      sub_22D2BCCB0();
      swift_bridgeObjectRelease();
LABEL_5:
      unint64_t v7 = v14;
      break;
  }
  return v7;
}

unint64_t sub_22D06493C()
{
  unint64_t result = qword_26853E600;
  if (!qword_26853E600)
  {
    sub_22D064978();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26853E600);
  }
  return result;
}

unint64_t sub_22D064978()
{
  unint64_t result = qword_26853DF88;
  if (!qword_26853DF88)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26853DF88);
  }
  return result;
}

void destroy for WebRequestResponse(uint64_t *a1)
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  unint64_t v2 = a1[6];
  if (v2 >> 60 != 15) {
    sub_22CFF5630(a1[5], v2);
  }
  uint64_t v3 = (void *)a1[7];
}

uint64_t initializeWithCopy for WebRequestResponse(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = (uint64_t *)(a2 + 40);
  unint64_t v6 = *(void *)(a2 + 48);
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
  }
  else
  {
    uint64_t v7 = *v5;
    sub_22CFF9B64(*v5, *(void *)(a2 + 48));
    *(void *)(a1 + 40) = v7;
    *(void *)(a1 + 48) = v6;
  }
  uint64_t v8 = *(void **)(a2 + 56);
  *(void *)(a1 + 56) = v8;
  id v9 = v8;
  return a1;
}

uint64_t *assignWithCopy for WebRequestResponse(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  long long v4 = a2 + 5;
  unint64_t v5 = a2[6];
  if ((unint64_t)a1[6] >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      uint64_t v7 = *v4;
      sub_22CFF9B64(*v4, a2[6]);
      uint64_t v8 = a1[5];
      unint64_t v9 = a1[6];
      a1[5] = v7;
      a1[6] = v5;
      sub_22CFF5630(v8, v9);
      goto LABEL_8;
    }
    sub_22CFFA7EC((uint64_t)(a1 + 5));
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v4;
    goto LABEL_8;
  }
  uint64_t v6 = *v4;
  sub_22CFF9B64(*v4, a2[6]);
  a1[5] = v6;
  a1[6] = v5;
LABEL_8:
  id v10 = (void *)a1[7];
  id v11 = (void *)a2[7];
  a1[7] = (uint64_t)v11;
  id v12 = v11;

  return a1;
}

uint64_t assignWithTake for WebRequestResponse(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  unint64_t v5 = (void *)(a2 + 40);
  unint64_t v6 = *(void *)(a1 + 48);
  if (v6 >> 60 != 15)
  {
    unint64_t v7 = *(void *)(a2 + 48);
    if (v7 >> 60 != 15)
    {
      uint64_t v8 = *(void *)(a1 + 40);
      *(void *)(a1 + 40) = *v5;
      *(void *)(a1 + 48) = v7;
      sub_22CFF5630(v8, v6);
      goto LABEL_6;
    }
    sub_22CFFA7EC(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)v5;
LABEL_6:
  unint64_t v9 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);

  return a1;
}

uint64_t getEnumTagSinglePayload for WebRequestResponse(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WebRequestResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebRequestResponse()
{
  return &type metadata for WebRequestResponse;
}

void *initializeBufferWithCopyOfBuffer for WebRequestResponseError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  long long v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *long long v4 = *a2;
    long long v4 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t *))(v7 - 8))(a1, a2);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (void **)((char *)v4 + v8);
    id v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v19 = *v10;
        id v20 = v19;
        void *v9 = v19;
        goto LABEL_16;
      case 1:
        uint64_t v16 = type metadata accessor for HTTPError();
        int v17 = swift_getEnumCaseMultiPayload();
        if (v17 == 3 || v17 == 2)
        {
          uint64_t v21 = v10[1];
          void *v9 = *v10;
          v9[1] = v21;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v17)
        {
          memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
        }
        else
        {
          uint64_t v18 = sub_22D2BBEC0();
          (*(void (**)(void **, void **, uint64_t))(*(void *)(v18 - 8) + 16))(v9, v10, v18);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      case 0:
        unint64_t v13 = *v10;
        void *v9 = *v10;
        id v14 = v13;
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return v4;
    }
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  return v4;
}

void destroy for WebRequestResponseError(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = (void **)(a1 + *(int *)(a2 + 20));
  type metadata accessor for WebRequestResponseError.ErrorType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      unint64_t v6 = *v4;
      goto LABEL_6;
    case 1:
      type metadata accessor for HTTPError();
      int v7 = swift_getEnumCaseMultiPayload();
      if (v7 == 3 || v7 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (!v7)
      {
        uint64_t v8 = sub_22D2BBEC0();
        unint64_t v9 = *(void (**)(void **, uint64_t))(*(void *)(v8 - 8) + 8);
        v9(v4, v8);
      }
      break;
    case 0:
      unint64_t v6 = *v4;
LABEL_6:

      break;
  }
}

uint64_t initializeWithCopy for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  (**(void (***)(void))(v6 - 8))();
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void **)(a1 + v7);
  unint64_t v9 = (void **)(a2 + v7);
  uint64_t v10 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      int v17 = *v9;
      id v18 = v17;
      *uint64_t v8 = v17;
      goto LABEL_14;
    case 1:
      uint64_t v14 = type metadata accessor for HTTPError();
      int v15 = swift_getEnumCaseMultiPayload();
      if (v15 == 3 || v15 == 2)
      {
        uint64_t v19 = v9[1];
        *uint64_t v8 = *v9;
        v8[1] = v19;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v15)
      {
        memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v16 = sub_22D2BBEC0();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v16 - 8) + 16))(v8, v9, v16);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_14;
    case 0:
      id v12 = *v9;
      *uint64_t v8 = *v9;
      id v13 = v12;
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  return a1;
}

uint64_t *assignWithCopy for WebRequestResponseError(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  if (a1 != a2)
  {
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (void **)((char *)a1 + v6);
    uint64_t v8 = (void **)((char *)a2 + v6);
    sub_22D065434((uint64_t)a1 + v6, type metadata accessor for WebRequestResponseError.ErrorType);
    uint64_t v9 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v16 = *v8;
        id v17 = v16;
        *uint64_t v7 = v16;
        goto LABEL_15;
      case 1:
        uint64_t v13 = type metadata accessor for HTTPError();
        int v14 = swift_getEnumCaseMultiPayload();
        if (v14 == 3 || v14 == 2)
        {
          *uint64_t v7 = *v8;
          v7[1] = v8[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v14)
        {
          memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64));
        }
        else
        {
          uint64_t v15 = sub_22D2BBEC0();
          (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v7, v8, v15);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_15;
      case 0:
        uint64_t v11 = *v8;
        *uint64_t v7 = *v8;
        id v12 = v11;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  return a1;
}

uint64_t sub_22D065434(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t initializeWithTake for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for WebRequestResponseError.ErrorType(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v9 = type metadata accessor for HTTPError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v10 = sub_22D2BBEC0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v6, v7, v10);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v6, v7, *(void *)(*(void *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t assignWithTake for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (a1 != a2)
  {
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (const void *)(a2 + v7);
    sub_22D065434(a1 + v7, type metadata accessor for WebRequestResponseError.ErrorType);
    uint64_t v10 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v11 = type metadata accessor for HTTPError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
      }
      else
      {
        uint64_t v12 = sub_22D2BBEC0();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v8, v9, v12);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D065738);
}

uint64_t sub_22D065738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 24);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for WebRequestResponseError(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D0657FC);
}

uint64_t sub_22D0657FC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 24) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for WebRequestResponseError.ErrorType(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 20);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_22D0658A4()
{
  uint64_t result = type metadata accessor for WebRequestResponseError.ErrorType(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for WebRequestResponseError.ErrorType(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = &v10[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        int v14 = *a2;
        uint64_t v15 = v14;
        *(void *)a1 = v14;
        goto LABEL_16;
      case 1:
        uint64_t v11 = type metadata accessor for HTTPError();
        int v12 = swift_getEnumCaseMultiPayload();
        if (v12 == 3 || v12 == 2)
        {
          uint64_t v16 = a2[1];
          *(void *)a1 = *a2;
          *((void *)a1 + 1) = v16;
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v12)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
        }
        else
        {
          uint64_t v13 = sub_22D2BBEC0();
          (*(void (**)(char *, char **, uint64_t))(*(void *)(v13 - 8) + 16))(a1, a2, v13);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_16;
      case 0:
        uint64_t v8 = *a2;
        *(void *)a1 = *a2;
        uint64_t v9 = v8;
LABEL_16:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void destroy for WebRequestResponseError.ErrorType(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      uint64_t v3 = *a1;
      goto LABEL_6;
    case 1:
      type metadata accessor for HTTPError();
      int v4 = swift_getEnumCaseMultiPayload();
      if (v4 == 3 || v4 == 2)
      {
        swift_bridgeObjectRelease();
      }
      else if (!v4)
      {
        uint64_t v5 = sub_22D2BBEC0();
        uint64_t v6 = *(void (**)(void **, uint64_t))(*(void *)(v5 - 8) + 8);
        v6(a1, v5);
      }
      break;
    case 0:
      uint64_t v3 = *a1;
LABEL_6:

      break;
  }
}

void **initializeWithCopy for WebRequestResponseError.ErrorType(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 2:
      int v12 = *a2;
      id v13 = v12;
      *a1 = v12;
      goto LABEL_14;
    case 1:
      uint64_t v9 = type metadata accessor for HTTPError();
      int v10 = swift_getEnumCaseMultiPayload();
      if (v10 == 3 || v10 == 2)
      {
        int v14 = a2[1];
        *a1 = *a2;
        a1[1] = v14;
        swift_bridgeObjectRetain();
        swift_storeEnumTagMultiPayload();
      }
      else if (v10)
      {
        memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      }
      else
      {
        uint64_t v11 = sub_22D2BBEC0();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
        swift_storeEnumTagMultiPayload();
      }
      goto LABEL_14;
    case 0:
      uint64_t v7 = *a2;
      *a1 = *a2;
      id v8 = v7;
LABEL_14:
      swift_storeEnumTagMultiPayload();
      return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void **assignWithCopy for WebRequestResponseError.ErrorType(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_22D065434((uint64_t)a1, type metadata accessor for WebRequestResponseError.ErrorType);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch(EnumCaseMultiPayload)
    {
      case 2:
        int v12 = *a2;
        id v13 = v12;
        *a1 = v12;
        goto LABEL_15;
      case 1:
        uint64_t v9 = type metadata accessor for HTTPError();
        int v10 = swift_getEnumCaseMultiPayload();
        if (v10 == 3 || v10 == 2)
        {
          *a1 = *a2;
          a1[1] = a2[1];
          swift_bridgeObjectRetain();
          swift_storeEnumTagMultiPayload();
        }
        else if (v10)
        {
          memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
        }
        else
        {
          uint64_t v11 = sub_22D2BBEC0();
          (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
          swift_storeEnumTagMultiPayload();
        }
        goto LABEL_15;
      case 0:
        uint64_t v7 = *a2;
        *a1 = *a2;
        id v8 = v7;
LABEL_15:
        swift_storeEnumTagMultiPayload();
        return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *initializeWithTake for WebRequestResponseError.ErrorType(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for HTTPError();
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = sub_22D2BBEC0();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for WebRequestResponseError.ErrorType(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_22D065434((uint64_t)a1, type metadata accessor for WebRequestResponseError.ErrorType);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for HTTPError();
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = sub_22D2BBEC0();
        (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
        swift_storeEnumTagMultiPayload();
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_22D0661D8()
{
  uint64_t result = type metadata accessor for HTTPError();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_22D066278(uint64_t a1, char a2)
{
  if (a2)
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
  else
  {
    if (a1 >= 18)
    {
      if ((unint64_t)a1 >= 0x14)
      {
        if ((unint64_t)a1 <= 0x50)
        {
        }
        else if (((v2 ^ (2 * v2)) & 0x4000000000000000) != 0)
        {
          __break(0xC471u);
        }
      }
      else if (((v2 ^ (2 * v2)) & 0x4000000000000000) != 0)
      {
        __break(0xC471u);
      }
    }
    else if (((v2 ^ (2 * v2)) & 0x4000000000000000) != 0)
    {
      __break(0xC471u);
    }
    return sub_22D2BCF50();
  }
}

uint64_t sub_22D06633C(uint64_t a1)
{
  if (!a1) {
    goto LABEL_8;
  }
  uint64_t v2 = swift_bridgeObjectRetain();
  size_t v3 = sub_22D248EB4(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_22D066EF0(v3, a1);
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v4 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  while (1)
  {
    uint64_t v9 = *(void *)(v4 + 8 * v7 + 32);
    BOOL v10 = __OFADD__(v8, v9);
    v8 += v9;
    if (v10) {
      break;
    }
    if (v6 == ++v7)
    {
      swift_bridgeObjectRelease();
      return sub_22D2BCF50();
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_22D066424(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = swift_bridgeObjectRetain();
    unint64_t v2 = sub_22D06703C(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_22D2BCF50();
  }
  else
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
}

uint64_t sub_22D0664FC(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = swift_bridgeObjectRetain();
    unint64_t v2 = sub_22D06703C(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v3 = sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x270EF1BD8](v3 != 0);
  }
  else
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
}

uint64_t sub_22D0665D8()
{
  uint64_t v0 = sub_22D2BCBA0();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_22D066710(unint64_t a1)
{
  if (a1)
  {
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v1 = sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v1 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    return MEMORY[0x270EF1BD8](v1 != 0);
  }
  else
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
}

uint64_t sub_22D0667B4(uint64_t a1)
{
  if (a1)
  {
    unint64_t v1 = swift_bridgeObjectRetain();
    unint64_t v2 = sub_22D06703C(v1);
    swift_bridgeObjectRelease();
    if (v2 >> 62)
    {
      swift_bridgeObjectRetain();
      sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    return sub_22D2BCF50();
  }
  else
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
}

uint64_t sub_22D066890()
{
  return MEMORY[0x270EF1BD8](*v0);
}

uint64_t sub_22D066898()
{
  if (*v0)
  {
    unint64_t v1 = (void *)sub_22D2BB9B0();
    id v2 = objc_msgSend(v1, sel_domain);

    sub_22D2BCBD0();
    uint64_t v3 = sub_22D2BCBA0();
    swift_bridgeObjectRelease();
    return v3;
  }
  else
  {
    sub_22D030474(0, &qword_26AEC2290);
    return sub_22D2BD1C0();
  }
}

uint64_t sub_22D066948()
{
  if (*v0)
  {
    swift_getErrorValue();
    sub_22D2BD6D0();
    uint64_t v1 = sub_22D2BCBA0();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    sub_22D030474(0, &qword_26AEC2290);
    return sub_22D2BD1C0();
  }
}

uint64_t sub_22D0669D4()
{
  return sub_22D066278(*(void *)v0, *(unsigned char *)(v0 + 8));
}

uint64_t sub_22D0669E0()
{
  if (*(void *)(v0 + 8))
  {
    swift_bridgeObjectRetain();
    uint64_t v1 = sub_22D2BCBA0();
    swift_bridgeObjectRelease();
    return v1;
  }
  else
  {
    sub_22D030474(0, &qword_26AEC2290);
    return sub_22D2BD1C0();
  }
}

uint64_t sub_22D066A60()
{
  return sub_22D06633C(*v0);
}

uint64_t sub_22D066A68()
{
  return sub_22D066424(*v0);
}

uint64_t sub_22D066A70()
{
  return sub_22D0664FC(*v0);
}

uint64_t sub_22D066A78(uint64_t a1, uint64_t a2)
{
  return sub_22D066AA8(a1, a2, (void (*)(uint64_t))sub_22D043174);
}

uint64_t sub_22D066A90(uint64_t a1, uint64_t a2)
{
  return sub_22D066AA8(a1, a2, (void (*)(uint64_t))sub_22D24E720);
}

uint64_t sub_22D066AA8(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4 = *v3;
  if (v4)
  {
    uint64_t v6 = swift_bridgeObjectRetain();
    size_t v7 = sub_22D248EB4(v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_22D066EF0(v7, v4);
    swift_release();
    swift_bridgeObjectRelease();
    a3(v8);
    char v10 = v9;
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0) {
      return sub_22D2BCF50();
    }
  }
  sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
  return sub_22D2BD180();
}

uint64_t sub_22D066B78()
{
  sub_22D0C2BC8(*v0);
  if (v1)
  {
    sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
    return sub_22D2BD180();
  }
  else
  {
    return sub_22D2BCF50();
  }
}

uint64_t sub_22D066BE0()
{
  if (*v0)
  {
    sub_22D09C084(*v0);
    swift_bridgeObjectRelease();
  }
  return sub_22D2BCF50();
}

uint64_t sub_22D066C44(uint64_t a1, uint64_t a2)
{
  return sub_22D066E7C(a1, a2, (void (*)(void))sub_22D0C310C);
}

uint64_t sub_22D066C5C()
{
  return sub_22D0665D8();
}

uint64_t sub_22D066C64(uint64_t a1, uint64_t a2)
{
  return sub_22D066CB4(a1, a2, (void (*)(void *__return_ptr, char *))sub_22D066C7C);
}

uint64_t sub_22D066C7C@<X0>(void *a1@<X8>)
{
  return sub_22D1FB1E8(a1);
}

uint64_t sub_22D066C9C(uint64_t a1, uint64_t a2)
{
  return sub_22D066CB4(a1, a2, (void (*)(void *__return_ptr, char *))sub_22D066D94);
}

uint64_t sub_22D066CB4(uint64_t a1, uint64_t a2, void (*a3)(void *__return_ptr, char *))
{
  sub_22D05C8D8(0);
  MEMORY[0x270FA5388](v5 - 8);
  size_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22D04BDE8(v3, (uint64_t)v7);
  uint64_t v12 = v3;
  sub_22D265280(a3);
  char v9 = v8;
  sub_22D04BD5C((uint64_t)v7);
  if ((v9 & 1) == 0) {
    return sub_22D2BCF50();
  }
  sub_22D030474(0, (unint64_t *)&qword_26AEC1F28);
  return sub_22D2BD180();
}

uint64_t sub_22D066D94@<X0>(void *a1@<X8>)
{
  return sub_22D1FB214(a1);
}

uint64_t sub_22D066DB4()
{
  uint64_t result = sub_22D2BBBA0();
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v1 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v1 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  return sub_22D2BCF50();
}

uint64_t sub_22D066E48()
{
  return sub_22D2BCBA0();
}

uint64_t sub_22D066E58()
{
  return sub_22D0667B4(*v0);
}

uint64_t sub_22D066E60()
{
  return sub_22D066710(*v0);
}

uint64_t sub_22D066E7C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3();
  if (v3)
  {
    uint64_t v4 = sub_22D2BCBA0();
    swift_bridgeObjectRelease();
    return v4;
  }
  else
  {
    sub_22D030474(0, &qword_26AEC2290);
    return sub_22D2BD1C0();
  }
}

uint64_t sub_22D066EF0(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x263F8EE78];
  if (v2)
  {
    uint64_t v15 = MEMORY[0x263F8EE78];
    sub_22D24B9AC(0, v2, 0);
    uint64_t v3 = v15;
    uint64_t v6 = 0;
    uint64_t v14 = *(void *)(sub_22D2BBC90() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    do
    {
      if (*(void *)(a2 + 16) && (unint64_t v8 = sub_22D04EA20(v7 + *(void *)(v14 + 72) * v6), (v9 & 1) != 0)) {
        uint64_t v10 = *(void *)(*(void *)(*(void *)(a2 + 56) + 8 * v8) + 16);
      }
      else {
        uint64_t v10 = 0;
      }
      unint64_t v12 = *(void *)(v15 + 16);
      unint64_t v11 = *(void *)(v15 + 24);
      if (v12 >= v11 >> 1) {
        sub_22D24B9AC(v11 > 1, v12 + 1, 1);
      }
      ++v6;
      *(void *)(v15 + 16) = v12 + 1;
      *(void *)(v15 + 8 * v12 + 32) = v10;
    }
    while (v2 != v6);
  }
  return v3;
}

uint64_t sub_22D06703C(unint64_t a1)
{
  uint64_t v8 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v2)
  {
    while (1)
    {
      unint64_t v3 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        id v4 = (id)MEMORY[0x230F7AF90](v3, a1);
LABEL_9:
        uint64_t v5 = v4;
        unint64_t v6 = v3 + 1;
        if (__OFADD__(v3, 1)) {
          goto LABEL_15;
        }
        if (sub_22D2BD100())
        {
          sub_22D2BD3A0();
          sub_22D2BD3E0();
          sub_22D2BD3F0();
          sub_22D2BD3B0();
        }
        else
        {
        }
        ++v3;
        if (v6 == v2) {
          return v8;
        }
      }
      if (v3 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        break;
      }
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      uint64_t v2 = sub_22D2BD470();
      if (!v2) {
        return MEMORY[0x263F8EE78];
      }
    }
    id v4 = *(id *)(a1 + 8 * v3 + 32);
    goto LABEL_9;
  }
  return MEMORY[0x263F8EE78];
}

uint64_t *sub_22D067188(uint64_t *a1, uint64_t *a2, int *a3)
{
  id v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v59 = *a2;
    *id v4 = *a2;
    id v4 = (uint64_t *)(v59 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    char v9 = (char *)a2 + v7;
    uint64_t v10 = sub_22D2BBC30();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    long long v12 = *(_OWORD *)((char *)a2 + v11 + 24);
    *(_OWORD *)((char *)v4 + v11 + 24) = v12;
    (**(void (***)(void))(v12 - 8))();
    uint64_t v13 = a3[8];
    uint64_t v14 = (char *)v4 + v13;
    uint64_t v15 = (char *)a2 + v13;
    uint64_t v16 = sub_22D2BBC90();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[9];
    uint64_t v18 = a3[10];
    uint64_t v19 = (uint64_t *)((char *)v4 + v17);
    id v20 = (uint64_t *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    id v22 = *(void **)((char *)a2 + v18);
    void *v19 = *v20;
    v19[1] = v21;
    *(uint64_t *)((char *)v4 + v18) = (uint64_t)v22;
    uint64_t v23 = a3[11];
    uint64_t v24 = (char *)v4 + v23;
    uint64_t v25 = (char *)a2 + v23;
    uint64_t v26 = *((void *)v25 + 1);
    *(void *)uint64_t v24 = *(void *)v25;
    *((void *)v24 + 1) = v26;
    uint64_t v27 = *((void *)v25 + 3);
    *((void *)v24 + 2) = *((void *)v25 + 2);
    *((void *)v24 + 3) = v27;
    uint64_t v28 = *((void *)v25 + 5);
    *((void *)v24 + 4) = *((void *)v25 + 4);
    *((void *)v24 + 5) = v28;
    unint64_t v62 = v24 + 48;
    uint64_t v61 = v25 + 48;
    long long v29 = *(_OWORD *)(v25 + 72);
    *(_OWORD *)(v24 + 72) = v29;
    uint64_t v30 = v29;
    int v31 = **(void (***)(char *, char *, uint64_t))(v29 - 8);
    swift_bridgeObjectRetain();
    id v32 = v22;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v62, v61, v30);
    uint64_t v33 = a3[12];
    uint64_t v34 = (char *)v4 + v33;
    id v35 = (char *)a2 + v33;
    uint64_t v36 = sub_22D2BBAA0();
    int v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
    v37(v34, v35, v36);
    uint64_t v38 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
    v37(&v34[v38[5]], &v35[v38[5]], v36);
    uint64_t v39 = v38[6];
    id v40 = *(void **)&v35[v39];
    *(void *)&v34[v39] = v40;
    *(void *)&v34[v38[7]] = *(void *)&v35[v38[7]];
    uint64_t v41 = v38[8];
    uint64_t v42 = &v34[v41];
    unint64_t v43 = &v35[v41];
    uint64_t v44 = *((void *)v43 + 1);
    *(void *)uint64_t v42 = *(void *)v43;
    *((void *)v42 + 1) = v44;
    uint64_t v45 = v38[9];
    uint64_t v46 = &v34[v45];
    id v47 = &v35[v45];
    uint64_t v48 = *((void *)v47 + 1);
    *(void *)uint64_t v46 = *(void *)v47;
    *((void *)v46 + 1) = v48;
    uint64_t v49 = a3[13];
    uint64_t v50 = a3[14];
    uint64_t v51 = *(void **)((char *)a2 + v49);
    *(uint64_t *)((char *)v4 + v49) = (uint64_t)v51;
    *(uint64_t *)((char *)v4 + v50) = *(uint64_t *)((char *)a2 + v50);
    uint64_t v52 = a3[15];
    uint64_t v53 = (uint64_t *)((char *)v4 + v52);
    id v54 = (uint64_t *)((char *)a2 + v52);
    uint64_t v55 = *v54;
    id v56 = v40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v57 = v51;
    swift_retain();
    if (v55)
    {
      uint64_t v58 = v54[1];
      *uint64_t v53 = v55;
      v53[1] = v58;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    }
  }
  return v4;
}

uint64_t sub_22D0674EC(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  __swift_destroy_boxed_opaque_existential_1(a1 + a2[7]);
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  uint64_t v8 = a1 + a2[11];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v8 + 48);
  uint64_t v9 = a1 + a2[12];
  uint64_t v10 = sub_22D2BBAA0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  uint64_t v12 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v11(v9 + *(int *)(v12 + 20), v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_release();
  if (*(void *)(a1 + a2[15]))
  {
    return swift_release();
  }
  return result;
}

_OWORD *sub_22D0676E0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBC30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  long long v11 = *(_OWORD *)((char *)a2 + v10 + 24);
  *(_OWORD *)((char *)a1 + v10 + 24) = v11;
  (**(void (***)(void))(v11 - 8))();
  uint64_t v12 = a3[8];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = (char *)a2 + v12;
  uint64_t v15 = sub_22D2BBC90();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[9];
  uint64_t v17 = a3[10];
  uint64_t v18 = (void *)((char *)a1 + v16);
  uint64_t v19 = (void *)((char *)a2 + v16);
  uint64_t v20 = v19[1];
  uint64_t v21 = *(void **)((char *)a2 + v17);
  *uint64_t v18 = *v19;
  v18[1] = v20;
  *(void *)((char *)a1 + v17) = v21;
  uint64_t v22 = a3[11];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = *(void *)v24;
  *((void *)v23 + 1) = v25;
  uint64_t v26 = *((void *)v24 + 3);
  *((void *)v23 + 2) = *((void *)v24 + 2);
  *((void *)v23 + 3) = v26;
  uint64_t v27 = *((void *)v24 + 5);
  *((void *)v23 + 4) = *((void *)v24 + 4);
  *((void *)v23 + 5) = v27;
  uint64_t v60 = v23 + 48;
  uint64_t v59 = v24 + 48;
  long long v28 = *(_OWORD *)(v24 + 72);
  *(_OWORD *)(v23 + 72) = v28;
  uint64_t v29 = v28;
  uint64_t v30 = **(void (***)(char *, char *, uint64_t))(v28 - 8);
  swift_bridgeObjectRetain();
  id v31 = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v30(v60, v59, v29);
  uint64_t v32 = a3[12];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = sub_22D2BBAA0();
  uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
  v36(v33, v34, v35);
  int v37 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v36(&v33[v37[5]], &v34[v37[5]], v35);
  uint64_t v38 = v37[6];
  uint64_t v39 = *(void **)&v34[v38];
  *(void *)&v33[v38] = v39;
  *(void *)&v33[v37[7]] = *(void *)&v34[v37[7]];
  uint64_t v40 = v37[8];
  uint64_t v41 = &v33[v40];
  uint64_t v42 = &v34[v40];
  uint64_t v43 = *((void *)v42 + 1);
  *(void *)uint64_t v41 = *(void *)v42;
  *((void *)v41 + 1) = v43;
  uint64_t v44 = v37[9];
  uint64_t v45 = &v33[v44];
  uint64_t v46 = &v34[v44];
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = *(void *)v46;
  *((void *)v45 + 1) = v47;
  uint64_t v48 = a3[13];
  uint64_t v49 = a3[14];
  uint64_t v50 = *(void **)((char *)a2 + v48);
  *(void *)((char *)a1 + v48) = v50;
  *(void *)((char *)a1 + v49) = *(void *)((char *)a2 + v49);
  uint64_t v51 = a3[15];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  uint64_t v54 = *v53;
  id v55 = v39;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v56 = v50;
  swift_retain();
  if (v54)
  {
    uint64_t v57 = v53[1];
    *uint64_t v52 = v54;
    v52[1] = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
  }
  return a1;
}

void *sub_22D0679F4(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBC30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  __swift_assign_boxed_opaque_existential_1((void *)((char *)a1 + a3[7]), (void *)((char *)a2 + a3[7]));
  uint64_t v10 = a3[8];
  long long v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = sub_22D2BBC90();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = (void *)((char *)a1 + v14);
  uint64_t v16 = (void *)((char *)a2 + v14);
  *uint64_t v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[10];
  uint64_t v18 = *(void **)((char *)a2 + v17);
  uint64_t v19 = *(void **)((char *)a1 + v17);
  *(void *)((char *)a1 + v17) = v18;
  id v20 = v18;

  uint64_t v21 = a3[11];
  uint64_t v22 = (void *)((char *)a1 + v21);
  uint64_t v23 = (void *)((char *)a2 + v21);
  *uint64_t v22 = *(void *)((char *)a2 + v21);
  v22[1] = *(void *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  void v22[2] = v23[2];
  id v22[3] = v23[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[4] = v23[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22[5] = v23[5];
  __swift_assign_boxed_opaque_existential_1(v22 + 6, v23 + 6);
  uint64_t v24 = a3[12];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = sub_22D2BBAA0();
  long long v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 24);
  v28(v25, v26, v27);
  uint64_t v29 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v28(&v25[v29[5]], &v26[v29[5]], v27);
  uint64_t v30 = v29[6];
  id v31 = *(void **)&v26[v30];
  uint64_t v32 = *(void **)&v25[v30];
  *(void *)&v25[v30] = v31;
  id v33 = v31;

  *(void *)&v25[v29[7]] = *(void *)&v26[v29[7]];
  uint64_t v34 = v29[8];
  uint64_t v35 = &v25[v34];
  uint64_t v36 = &v26[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  *((void *)v35 + 1) = *((void *)v36 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = v29[9];
  uint64_t v38 = &v25[v37];
  uint64_t v39 = &v26[v37];
  *(void *)uint64_t v38 = *(void *)v39;
  *((void *)v38 + 1) = *((void *)v39 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[13];
  uint64_t v41 = *(void **)((char *)a2 + v40);
  uint64_t v42 = *(void **)((char *)a1 + v40);
  *(void *)((char *)a1 + v40) = v41;
  id v43 = v41;

  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_retain();
  swift_release();
  uint64_t v44 = a3[15];
  uint64_t v45 = (void *)((char *)a1 + v44);
  uint64_t v46 = (void *)((char *)a2 + v44);
  uint64_t v47 = *(void *)((char *)a1 + v44);
  uint64_t v48 = *v46;
  if (!v47)
  {
    if (v48)
    {
      uint64_t v50 = v46[1];
      *uint64_t v45 = v48;
      v45[1] = v50;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    return a1;
  }
  if (!v48)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v49 = v46[1];
  *uint64_t v45 = v48;
  v45[1] = v49;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *sub_22D067D2C(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBC30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (char *)a1 + v10;
  uint64_t v13 = (char *)a2 + v10;
  long long v14 = *((_OWORD *)v13 + 1);
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((_OWORD *)v12 + 1) = v14;
  *((void *)v12 + 4) = *((void *)v13 + 4);
  uint64_t v15 = (char *)a1 + v11;
  uint64_t v16 = (char *)a2 + v11;
  uint64_t v17 = sub_22D2BBC90();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(v15, v16, v17);
  uint64_t v18 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  uint64_t v19 = a3[11];
  uint64_t v20 = a3[12];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  *((void *)v21 + 10) = *((void *)v22 + 10);
  long long v23 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v23;
  *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
  long long v24 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v24;
  uint64_t v25 = (char *)a1 + v20;
  uint64_t v26 = (char *)a2 + v20;
  uint64_t v27 = sub_22D2BBAA0();
  long long v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
  v28(v25, v26, v27);
  uint64_t v29 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v28(&v25[v29[5]], &v26[v29[5]], v27);
  *(void *)&v25[v29[6]] = *(void *)&v26[v29[6]];
  *(void *)&v25[v29[7]] = *(void *)&v26[v29[7]];
  *(_OWORD *)&v25[v29[8]] = *(_OWORD *)&v26[v29[8]];
  *(_OWORD *)&v25[v29[9]] = *(_OWORD *)&v26[v29[9]];
  uint64_t v30 = a3[14];
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + v30) = *(void *)((char *)a2 + v30);
  uint64_t v31 = a3[15];
  uint64_t v32 = (void *)((char *)a1 + v31);
  id v33 = (uint64_t *)((char *)a2 + v31);
  uint64_t v34 = *v33;
  if (*v33)
  {
    uint64_t v35 = v33[1];
    *uint64_t v32 = v34;
    v32[1] = v35;
  }
  else
  {
    *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  }
  return a1;
}

_OWORD *sub_22D067F44(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = sub_22D2BBC30();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1 + v10);
  long long v13 = *((_OWORD *)v12 + 1);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *((_OWORD *)v11 + 1) = v13;
  *((void *)v11 + 4) = *((void *)v12 + 4);
  uint64_t v14 = a3[8];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = sub_22D2BBC90();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 40))(v15, v16, v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  void *v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[10];
  long long v24 = *(void **)((char *)a1 + v23);
  *(void *)((char *)a1 + v23) = *(void *)((char *)a2 + v23);

  uint64_t v25 = a3[11];
  uint64_t v26 = (char *)a1 + v25;
  uint64_t v27 = (char *)a2 + v25;
  uint64_t v28 = *(void *)((char *)a2 + v25 + 8);
  *(void *)uint64_t v26 = *(void *)((char *)a2 + v25);
  *((void *)v26 + 1) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *((void *)v27 + 3);
  *((void *)v26 + 2) = *((void *)v27 + 2);
  *((void *)v26 + 3) = v29;
  swift_bridgeObjectRelease();
  *((void *)v26 + 4) = *((void *)v27 + 4);
  swift_bridgeObjectRelease();
  *((void *)v26 + 5) = *((void *)v27 + 5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v26 + 48));
  long long v30 = *((_OWORD *)v27 + 4);
  *((_OWORD *)v26 + 3) = *((_OWORD *)v27 + 3);
  *((_OWORD *)v26 + 4) = v30;
  *((void *)v26 + 10) = *((void *)v27 + 10);
  uint64_t v31 = a3[12];
  uint64_t v32 = (char *)a1 + v31;
  id v33 = (char *)a2 + v31;
  uint64_t v34 = sub_22D2BBAA0();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 40);
  v35(v32, v33, v34);
  uint64_t v36 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  v35(&v32[v36[5]], &v33[v36[5]], v34);
  uint64_t v37 = v36[6];
  uint64_t v38 = *(void **)&v32[v37];
  *(void *)&v32[v37] = *(void *)&v33[v37];

  *(void *)&v32[v36[7]] = *(void *)&v33[v36[7]];
  uint64_t v39 = v36[8];
  uint64_t v40 = &v32[v39];
  uint64_t v41 = &v33[v39];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  *(void *)uint64_t v40 = v43;
  *((void *)v40 + 1) = v42;
  swift_bridgeObjectRelease();
  uint64_t v44 = v36[9];
  uint64_t v45 = &v32[v44];
  uint64_t v46 = &v33[v44];
  uint64_t v48 = *(void *)v46;
  uint64_t v47 = *((void *)v46 + 1);
  *(void *)uint64_t v45 = v48;
  *((void *)v45 + 1) = v47;
  swift_bridgeObjectRelease();
  uint64_t v49 = a3[13];
  uint64_t v50 = *(void **)((char *)a1 + v49);
  *(void *)((char *)a1 + v49) = *(void *)((char *)a2 + v49);

  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_release();
  uint64_t v51 = a3[15];
  uint64_t v52 = (void *)((char *)a1 + v51);
  uint64_t v53 = (uint64_t *)((char *)a2 + v51);
  uint64_t v54 = *(void *)((char *)a1 + v51);
  uint64_t v55 = *v53;
  if (!v54)
  {
    if (v55)
    {
      uint64_t v57 = v53[1];
      *uint64_t v52 = v55;
      v52[1] = v57;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
    return a1;
  }
  if (!v55)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v56 = v53[1];
  *uint64_t v52 = v55;
  v52[1] = v56;
  swift_release();
  return a1;
}

uint64_t sub_22D06821C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D068230);
}

uint64_t sub_22D068230(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBC30();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_9:
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + a3[7] + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v12 = sub_22D2BBC90();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
    {
      uint64_t v7 = v12;
      uint64_t v8 = *(void *)(v12 - 8);
      uint64_t v9 = a3[8];
      goto LABEL_9;
    }
    uint64_t v14 = type metadata accessor for ClinicalSharingCloudStandardAPI();
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 48);
    uint64_t v16 = v14;
    uint64_t v17 = a1 + a3[12];
    return v15(v17, a2, v16);
  }
}

uint64_t sub_22D0683B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D0683C4);
}

uint64_t sub_22D0683C4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = sub_22D2BBC30();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[6];
LABEL_7:
    long long v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v13(a1 + v11, a2, a2, v9);
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[7] + 24) = (a2 - 1);
    return result;
  }
  uint64_t v12 = sub_22D2BBC90();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[8];
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56);
  uint64_t v16 = v14;
  uint64_t v17 = a1 + a4[12];
  return v15(v17, a2, a2, v16);
}

uint64_t type metadata accessor for ClinicalSharingSyncTask()
{
  uint64_t result = qword_26AEC1308;
  if (!qword_26AEC1308) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22D068590()
{
  uint64_t result = sub_22D2BBC30();
  if (v1 <= 0x3F)
  {
    uint64_t result = sub_22D2BBC90();
    if (v2 <= 0x3F)
    {
      uint64_t result = type metadata accessor for ClinicalSharingCloudStandardAPI();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_22D0686E4(unint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_22D2BBC90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    if (!v8) {
      return v9;
    }
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t result = sub_22D24B7A4(0, v8 & ~(v8 >> 63), 0);
    if (v8 < 0) {
      break;
    }
    uint64_t v11 = 0;
    uint64_t v9 = v17;
    unint64_t v15 = a1 & 0xC000000000000001;
    unint64_t v16 = a1;
    v14[0] = v2;
    v14[1] = v5 + 32;
    while (v8 != v11)
    {
      if (v15)
      {
        uint64_t v12 = MEMORY[0x230F7AF90](v11, a1);
      }
      else
      {
        uint64_t v12 = *(void *)(a1 + 8 * v11 + 32);
        swift_retain();
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v4);
      swift_release();
      uint64_t v17 = v9;
      unint64_t v2 = *(void *)(v9 + 16);
      unint64_t v13 = *(void *)(v9 + 24);
      if (v2 >= v13 >> 1)
      {
        sub_22D24B7A4(v13 > 1, v2 + 1, 1);
        uint64_t v9 = v17;
      }
      ++v11;
      *(void *)(v9 + 16) = v2 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v2, v7, v4);
      a1 = v16;
      if (v8 == v11) {
        return v9;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v8 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_22D068920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v73 = a4;
  uint64_t v66 = a6;
  uint64_t v10 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v67 = (uint64_t)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  unint64_t v15 = (void **)((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = (void *)((char *)v15 + *(int *)(v13 + 60));
  uint64_t *v16 = 0;
  v16[1] = 0;
  uint64_t v71 = v16;
  *unint64_t v15 = a1;
  v15[1] = a2;
  uint64_t v17 = (char *)v15 + *(int *)(v13 + 24);
  uint64_t v18 = sub_22D2BBC30();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  id v70 = v17;
  uint64_t v74 = a3;
  v20(v17, a3, v18);
  uint64_t v21 = (uint64_t)v15 + v12[7];
  uint64_t v77 = a5;
  uint64_t v68 = v21;
  sub_22CFF4B00((uint64_t)a5, v21);
  uint64_t v22 = (char *)v15 + v12[8];
  sub_22D2BBC80();
  *(void *)&v75[0] = v12;
  sub_22D06E114();
  *(void *)&v75[0] = sub_22D2BCC30();
  *((void *)&v75[0] + 1) = v23;
  sub_22D2BCCB0();
  uint64_t v69 = v22;
  sub_22D2BBC40();
  uint64_t v24 = sub_22D07051C(8);
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  MEMORY[0x230F7A8B0](v24, v26, v28, v30);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  uint64_t v31 = *((void *)&v75[0] + 1);
  uint64_t v32 = (void *)((char *)v15 + v12[9]);
  *uint64_t v32 = *(void *)&v75[0];
  v32[1] = v31;
  uint64_t v33 = v72;
  sub_22D1D9878(0xD000000000000018, 0x800000022D2D66A0, (uint64_t)v75);
  if (v33)
  {
    swift_release();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v34(v74, v18);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    v34((uint64_t)v70, v18);
    __swift_destroy_boxed_opaque_existential_1(v68);
    uint64_t v51 = sub_22D2BBC90();
    (*(void (**)(char *, uint64_t))(*(void *)(v51 - 8) + 8))(v69, v51);
    swift_bridgeObjectRelease();
    return sub_22D074520(*v71);
  }
  else
  {
    uint64_t v72 = v18;
    uint64_t v35 = (char *)v15 + v12[11];
    long long v36 = v75[3];
    *((_OWORD *)v35 + 2) = v75[2];
    *((_OWORD *)v35 + 3) = v36;
    *((_OWORD *)v35 + 4) = v75[4];
    *((void *)v35 + 10) = v76;
    long long v37 = v75[1];
    *(_OWORD *)uint64_t v35 = v75[0];
    *((_OWORD *)v35 + 1) = v37;
    unint64_t v38 = HKHealthRecordsCurrentEnvironment();
    if (v38 > 0xD)
    {
      unint64_t v64 = 0x800000022D2D6470;
      unint64_t v65 = 0xD000000000000023;
    }
    else
    {
      if (((1 << v38) & 0x820) != 0) {
        unint64_t v39 = 0xD000000000000022;
      }
      else {
        unint64_t v39 = 0xD000000000000023;
      }
      if (((1 << v38) & 0x820) != 0) {
        unint64_t v40 = 0x800000022D2D64F0;
      }
      else {
        unint64_t v40 = 0x800000022D2D6470;
      }
      if (((1 << v38) & 3) != 0) {
        unint64_t v41 = 0xD00000000000001FLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (((1 << v38) & 3) != 0) {
        unint64_t v42 = 0x800000022D2D64A0;
      }
      else {
        unint64_t v42 = v40;
      }
      if (((1 << v38) & 0x2184) != 0) {
        unint64_t v43 = 0xD000000000000027;
      }
      else {
        unint64_t v43 = v41;
      }
      unint64_t v65 = v43;
      if (((1 << v38) & 0x2184) != 0) {
        unint64_t v44 = 0x800000022D2D64C0;
      }
      else {
        unint64_t v44 = v42;
      }
      unint64_t v64 = v44;
    }
    uint64_t v45 = v19;
    uint64_t v63 = v32;
    sub_22D030474(0, (unint64_t *)&qword_26AEC2FB8);
    id v46 = static NSURLSessionConfiguration.defaultPublicSessionConfiguration.getter();
    id v47 = (id)HKSecPolicyNameAppleHealthProviderService();
    if (!v47)
    {
      sub_22D2BCBD0();
      id v47 = (id)sub_22D2BCBA0();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v46, sel_set_tlsTrustPinningPolicyName_, v47);

    uint64_t v48 = self;
    id v49 = objc_msgSend(v48, sel_sessionWithConfiguration_, v46);

    uint64_t v50 = v67;
    sub_22D08B494(v65, v64, v49, 3, v67);
    sub_22D074584(v50, (uint64_t)v15 + v12[12], (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
    id v53 = static NSURLSessionConfiguration.defaultPublicSessionConfiguration.getter();
    uint64_t v54 = v45;
    id v55 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for URLSessionCertVerificationDelegate()), sel_init);
    id v56 = objc_msgSend(v48, sel_sessionWithConfiguration_delegate_delegateQueue_, v53, v55, 0);

    *(void *)((char *)v15 + v12[13]) = v56;
    uint64_t v57 = v77;
    uint64_t v58 = (void *)*__swift_project_boxed_opaque_existential_1(v77, v77[3]);
    id v59 = objc_allocWithZone(MEMORY[0x263F0A470]);
    id v60 = v58;
    uint64_t v61 = (void *)sub_22D2BCBA0();
    id v62 = objc_msgSend(v59, sel_initWithCategory_domainName_healthStore_, 3, v61, v60);

    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v74, v72);
    *(void *)((char *)v15 + v12[10]) = v62;
    *(void *)((char *)v15 + v12[14]) = v73;
    sub_22D071BF4((uint64_t)v15, v66, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v57);
    return sub_22D072164((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  }
}

uint64_t sub_22D068FA0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ClinicalSharingSyncTask();
  unint64_t v3 = (int *)(v2 - 8);
  uint64_t v38 = *(void *)(v2 - 8);
  uint64_t v37 = *(void *)(v38 + 64);
  MEMORY[0x270FA5388](v2);
  uint64_t v36 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0705B8();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v41 = v5;
  uint64_t v42 = v6;
  MEMORY[0x270FA5388](v5);
  unint64_t v40 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = sub_22D2BBC30();
  uint64_t v35 = *(void *)(v43 - 8);
  uint64_t v8 = *(void *)(v35 + 64);
  uint64_t v9 = MEMORY[0x270FA5388](v43);
  uint64_t v34 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v33 - v10;
  unint64_t v39 = (char *)&v33 - v10;
  sub_22D2BBC20();
  uint64_t v12 = type metadata accessor for ClinicalSharingSyncContext();
  uint64_t v13 = (void *)__swift_project_boxed_opaque_existential_1((void *)(v0 + v3[9]), *(void *)(v0 + v3[9] + 24))[2];
  v44[3] = &type metadata for ClinicalSharingAccountStore;
  v44[4] = &off_26E05DAE8;
  v44[0] = v13;
  uint64_t v14 = *(void **)(v0 + v3[15]);
  unint64_t v15 = *(void **)(v0 + v3[12]);
  uint64_t v16 = v0 + v3[17];
  uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))v16;
  uint64_t v17 = *(void *)(v16 + 8);
  uint64_t v19 = (void *)*__swift_project_boxed_opaque_existential_1(v44, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  id v20 = v13;
  uint64_t v21 = sub_22D06E150(v19, v14, v15, v18, v17, v12);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  v44[0] = v21;
  uint64_t v22 = v36;
  sub_22D071BF4(v1, v36, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  uint64_t v24 = v34;
  uint64_t v23 = v35;
  uint64_t v25 = v43;
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v34, v11, v43);
  unint64_t v26 = (*(unsigned __int8 *)(v38 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v27 = (v37 + *(unsigned __int8 *)(v23 + 80) + v26) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  uint64_t v28 = swift_allocObject();
  sub_22D074584(v22, v28 + v26, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v28 + v27, v24, v25);
  sub_22D2BC5D0();
  sub_22D074020(0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
  sub_22D056DB0(0, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
  sub_22D074130(0, (unint64_t *)&unk_26AEC2EF0, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
  sub_22D070760((unint64_t *)&qword_26AEC1DB0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4);
  sub_22D0706E8();
  uint64_t v29 = v40;
  sub_22D2BC830();
  swift_release();
  swift_release();
  sub_22D074388(&qword_26AEC2E48, (void (*)(uint64_t))sub_22D0705B8);
  uint64_t v30 = v41;
  uint64_t v31 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v39, v43);
  return v31;
}

uint64_t sub_22D06945C@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v102 = a3;
  uint64_t v113 = a4;
  uint64_t v101 = sub_22D2BBC30();
  uint64_t v99 = *(void *)(v101 - 8);
  uint64_t v100 = *(void *)(v99 + 64);
  MEMORY[0x270FA5388](v101);
  uint64_t v98 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0708AC();
  uint64_t v88 = v7;
  uint64_t v89 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  id v85 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v10 = v9 - 8;
  uint64_t v11 = *(void *)(v9 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFDA80];
  sub_22D0742CC(0, &qword_26AEC1C60, MEMORY[0x263EFDA80]);
  uint64_t v15 = v14;
  uint64_t v86 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v85 - v16;
  uint64_t v90 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263EFDC20];
  sub_22D072558(0, &qword_26AEC1CE0, MEMORY[0x263EFDC20]);
  uint64_t v91 = v18;
  uint64_t v92 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v87 = (char *)&v85 - v19;
  sub_22D070A1C();
  uint64_t v93 = v20;
  uint64_t v94 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v117 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D070AD0();
  uint64_t v95 = v22;
  uint64_t v96 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v119 = (char *)&v85 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D070C68();
  uint64_t v103 = v24;
  uint64_t v105 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v118 = (char *)&v85 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D070D74();
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v107 = v26;
  uint64_t v108 = v27;
  MEMORY[0x270FA5388](v26);
  id v97 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D070F14();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v109 = v29;
  uint64_t v110 = v30;
  MEMORY[0x270FA5388](v29);
  int v104 = (char *)&v85 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D071020();
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v111 = v32;
  uint64_t v112 = v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v106 = (char *)&v85 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_22D06A45C(*a1);
  uint64_t v124 = a2;
  uint64_t v125 = v35;
  uint64_t v120 = (uint64_t)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = type metadata accessor for ClinicalSharingSyncTask;
  sub_22D071BF4(a2, v120, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  uint64_t v36 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v37 = (v36 + 16) & ~v36;
  uint64_t v115 = v37;
  uint64_t v121 = v36 | 7;
  uint64_t v122 = v37 + v12;
  uint64_t v38 = swift_allocObject();
  sub_22D074584((uint64_t)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v38 + v37, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  uint64_t v123 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D074020(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
  sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  sub_22D2BC740();
  swift_release();
  swift_release();
  unint64_t v39 = *(void **)(a2 + *(int *)(v10 + 60));
  *(void *)(swift_allocObject() + 16) = v39;
  id v40 = v39;
  sub_22D2BC5D0();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_22D0709D8(&qword_26AEC2C08, &qword_26AEC1C60, v13);
  uint64_t v41 = v85;
  uint64_t v42 = v15;
  sub_22D2BC830();
  swift_release();
  uint64_t v116 = MEMORY[0x263EFDC28];
  sub_22D074388(&qword_26AEC2D78, (void (*)(uint64_t))sub_22D0708AC);
  uint64_t v43 = v88;
  uint64_t v44 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v89 + 8))(v41, v43);
  (*(void (**)(char *, uint64_t))(v86 + 8))(v17, v42);
  uint64_t v125 = v44;
  uint64_t v45 = v124;
  uint64_t v46 = *(void *)(v124 + *(int *)(v10 + 64));
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = sub_22D071140;
  *(void *)(v47 + 24) = v46;
  swift_retain();
  sub_22D2BC5D0();
  uint64_t v48 = v87;
  sub_22D2BC830();
  swift_release();
  swift_release();
  sub_22D0729E4(&qword_26AEC1CD8, &qword_26AEC1CE0, v90);
  uint64_t v49 = v91;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v92 + 8))(v48, v49);
  uint64_t v50 = v120;
  uint64_t v51 = v114;
  sub_22D071BF4(v45, v120, (uint64_t (*)(void))v114);
  uint64_t v52 = v122;
  uint64_t v53 = swift_allocObject();
  uint64_t v54 = v115;
  sub_22D074584(v50, v53 + v115, (uint64_t (*)(void))v51);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = sub_22D07117C;
  *(void *)(v55 + 24) = v53;
  sub_22D2BC5D0();
  sub_22D070BDC(0);
  sub_22D074020(0, &qword_26AEC2EB0, (uint64_t (*)(uint64_t))sub_22D070BDC, v123);
  sub_22D074388(&qword_26AEC2D28, (void (*)(uint64_t))sub_22D070A1C);
  sub_22D070760(&qword_26AEC2EA8, &qword_26AEC2EB0, (uint64_t (*)(uint64_t))sub_22D070BDC);
  uint64_t v56 = v93;
  uint64_t v57 = v117;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v57, v56);
  uint64_t v58 = v120;
  id v59 = v114;
  sub_22D071BF4(v124, v120, (uint64_t (*)(void))v114);
  uint64_t v60 = v99;
  uint64_t v61 = v98;
  uint64_t v62 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v99 + 16))(v98, v102, v101);
  uint64_t v63 = v60;
  unint64_t v64 = (v52 + *(unsigned __int8 *)(v60 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
  uint64_t v65 = swift_allocObject();
  uint64_t v66 = v59;
  sub_22D074584(v58, v65 + v54, (uint64_t (*)(void))v59);
  (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v65 + v64, v61, v62);
  sub_22D2BC5D0();
  sub_22D0706B4(0);
  uint64_t v102 = v67;
  sub_22D074020(0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, v123);
  uint64_t v101 = v68;
  sub_22D074388(&qword_26AEC2DF8, (void (*)(uint64_t))sub_22D070AD0);
  uint64_t v117 = (char *)sub_22D070760((unint64_t *)&qword_26AEC1DB0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4);
  uint64_t v69 = v95;
  id v70 = v119;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v70, v69);
  uint64_t v71 = v120;
  sub_22D071BF4(v124, v120, (uint64_t (*)(void))v59);
  uint64_t v72 = swift_allocObject();
  sub_22D074584(v71, v72 + v54, (uint64_t (*)(void))v59);
  uint64_t v73 = swift_allocObject();
  *(void *)(v73 + 16) = sub_22D0715B0;
  *(void *)(v73 + 24) = v72;
  sub_22D2BC5D0();
  sub_22D070E80(0);
  sub_22D074020(0, &qword_26AEC2EA0, (uint64_t (*)(uint64_t))sub_22D070E80, v123);
  sub_22D074388(&qword_26AEC2E18, (void (*)(uint64_t))sub_22D070C68);
  sub_22D070760(&qword_26AEC2E98, &qword_26AEC2EA0, (uint64_t (*)(uint64_t))sub_22D070E80);
  uint64_t v74 = v97;
  uint64_t v75 = v103;
  uint64_t v76 = v118;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v76, v75);
  sub_22D071BF4(v124, v71, (uint64_t (*)(void))v66);
  uint64_t v77 = swift_allocObject();
  sub_22D074584(v71, v77 + v115, (uint64_t (*)(void))v66);
  sub_22D2BC5D0();
  sub_22D074388(&qword_26AEC2DE8, (void (*)(uint64_t))sub_22D070D74);
  uint64_t v78 = v104;
  uint64_t v79 = v107;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v108 + 8))(v74, v79);
  sub_22D056DB0(0, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
  sub_22D074388(&qword_26AEC2E08, (void (*)(uint64_t))sub_22D070F14);
  uint64_t v80 = v106;
  uint64_t v81 = v109;
  sub_22D2BC7F0();
  (*(void (**)(char *, uint64_t))(v110 + 8))(v78, v81);
  sub_22D074388(&qword_26AEC2CE8, (void (*)(uint64_t))sub_22D071020);
  uint64_t v82 = v111;
  uint64_t v83 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v80, v82);
  *uint64_t v113 = v83;
  return result;
}

uint64_t sub_22D06A45C(unint64_t a1)
{
  sub_22D0716C4();
  uint64_t v135 = *(void *)(v2 - 8);
  uint64_t v136 = v2;
  MEMORY[0x270FA5388](v2);
  unint64_t v139 = (char *)&v107 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073920(0, (unint64_t *)&qword_26AEC1D10, (uint64_t (*)(uint64_t))sub_22D0706B4, sub_22D071744, MEMORY[0x263EFDC58]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v107 - v7;
  sub_22D072E90(0, &qword_26AEC2F08, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDDF8]);
  uint64_t v133 = v9;
  uint64_t v118 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v115 = (char *)&v107 - v10;
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D074020(0, &qword_26AEC3018, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDEA0]);
  uint64_t v117 = v12;
  uint64_t v116 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v114 = (char *)&v107 - v13;
  sub_22D074020(0, &qword_26AEC3008, (uint64_t (*)(uint64_t))sub_22D0721C4, v11);
  uint64_t v121 = v14;
  uint64_t v120 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v141 = (char *)&v107 - v15;
  sub_22D0721F8();
  uint64_t v124 = v16;
  uint64_t v123 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v122 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0723B8();
  uint64_t v129 = v18;
  uint64_t v127 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v142 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D07244C();
  uint64_t v128 = v20;
  uint64_t v126 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v125 = (char *)&v107 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072558(0, &qword_26AEC2C00, MEMORY[0x263EFDA60]);
  uint64_t v131 = *(void *)(v22 - 8);
  uint64_t v132 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v130 = (char *)&v107 - v23;
  uint64_t v140 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v112 = *((void *)v140 - 1);
  uint64_t v24 = MEMORY[0x270FA5388](v140);
  uint64_t v25 = MEMORY[0x270FA5388](v24);
  uint64_t v119 = (uint64_t)&v107 - v26;
  uint64_t v113 = v27;
  MEMORY[0x270FA5388](v25);
  uint64_t v111 = (char *)&v107 - v28;
  uint64_t v29 = MEMORY[0x263F8EE78];
  uint64_t v145 = MEMORY[0x263F8EE78];
  uint64_t v137 = v6;
  uint64_t v138 = v5;
  uint64_t v134 = v8;
  uint64_t v110 = v30;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_22D2BD470();
  }
  else
  {
    uint64_t v31 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v31)
  {
    if (v31 < 1)
    {
      __break(1u);
LABEL_73:
      swift_once();
LABEL_53:
      uint64_t v44 = sub_22D2BC390();
      __swift_project_value_buffer(v44, (uint64_t)qword_26AEC3C90);
      sub_22D071BF4(v143, v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      uint64_t v45 = v109;
      swift_retain_n();
      swift_retain_n();
      uint64_t v46 = sub_22D2BC380();
      os_log_type_t v47 = sub_22D2BD080();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v110 = v29;
      if (v48)
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        uint64_t v145 = v107;
        *(_DWORD *)uint64_t v49 = 136315650;
        uint64_t v50 = (uint64_t *)(v6 + v140[9]);
        uint64_t v51 = *v50;
        unint64_t v52 = v50[1];
        swift_bridgeObjectRetain();
        uint64_t v144 = sub_22D0A4D24(v51, v52, &v145);
        sub_22D2BD220();
        swift_bridgeObjectRelease();
        sub_22D072164(v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
        *(_WORD *)(v49 + 12) = 2048;
        if (v108)
        {
          swift_bridgeObjectRetain();
          uint64_t v53 = sub_22D2BD470();
          swift_release();
        }
        else
        {
          uint64_t v53 = *(void *)(v45 + 16);
        }
        swift_release();
        uint64_t v144 = v53;
        sub_22D2BD220();
        swift_release();
        *(_WORD *)(v49 + 22) = 2048;
        if (v29 < 0 || (v29 & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v54 = sub_22D2BD470();
          swift_release();
        }
        else
        {
          uint64_t v54 = *(void *)(v29 + 16);
        }
        swift_release();
        uint64_t v144 = v54;
        sub_22D2BD220();
        swift_release();
        _os_log_impl(&dword_22CFEE000, v46, v47, "%s Starting data collection and node upload for %ld accounts. %ld accounts should not sync.", (uint8_t *)v49, 0x20u);
        uint64_t v55 = v107;
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v55, -1, -1);
        MEMORY[0x230F7BDF0](v49, -1, -1);
      }
      else
      {
        swift_release();
        swift_release();
        sub_22D072164(v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);

        swift_release();
        swift_release();
      }
      uint64_t v145 = v45;
      sub_22D0706B4(0);
      uint64_t v111 = v56;
      uint64_t v57 = v115;
      sub_22D2BC6B0();
      uint64_t v109 = sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
      uint64_t v58 = v114;
      uint64_t v59 = v133;
      sub_22D2BC680();
      (*(void (**)(char *, uint64_t))(v118 + 8))(v57, v59);
      sub_22D0721C4(0);
      uint64_t v60 = v117;
      sub_22D2BD770();
      (*(void (**)(char *, uint64_t))(v116 + 8))(v58, v60);
      uint64_t v61 = v119;
      sub_22D071BF4(v143, v119, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      uint64_t v62 = *(unsigned __int8 *)(v112 + 80);
      uint64_t v117 = ((v62 + 16) & ~v62) + v113;
      uint64_t v63 = (v62 + 16) & ~v62;
      uint64_t v118 = v63;
      uint64_t v133 = v62 | 7;
      uint64_t v64 = swift_allocObject();
      sub_22D074584(v61, v64 + v63, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      sub_22D2BC5D0();
      sub_22D071F28(0, (unint64_t *)&qword_26AEC1D98);
      sub_22D072354(&qword_26AEC3000, &qword_26AEC3008, (uint64_t (*)(uint64_t))sub_22D0721C4);
      sub_22D072304(&qword_26AEC1D90, (unint64_t *)&qword_26AEC1D98);
      uint64_t v65 = v122;
      uint64_t v66 = v121;
      uint64_t v67 = v141;
      sub_22D2BC830();
      swift_release();
      (*(void (**)(char *, uint64_t))(v120 + 8))(v67, v66);
      uint64_t v68 = v143;
      sub_22D071BF4(v143, v61, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      uint64_t v69 = swift_allocObject();
      uint64_t v70 = v118;
      sub_22D074584(v61, v69 + v118, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      sub_22D074388(&qword_26AEC2DD8, (void (*)(uint64_t))sub_22D0721F8);
      uint64_t v71 = v124;
      sub_22D2BC740();
      swift_release();
      (*(void (**)(char *, uint64_t))(v123 + 8))(v65, v71);
      sub_22D071BF4(v68, v61, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      uint64_t v72 = swift_allocObject();
      sub_22D074584(v61, v72 + v70, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
      sub_22D2BC5D0();
      type metadata accessor for ClinicalSharingQueryOutput(0);
      uint64_t v73 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
      sub_22D074020(0, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDCF0]);
      sub_22D074388(&qword_26AEC2C28, (void (*)(uint64_t))sub_22D0723B8);
      sub_22D070760(&qword_26AEC2E68, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput);
      uint64_t v74 = (uint64_t)v125;
      uint64_t v75 = v129;
      uint64_t v76 = v142;
      sub_22D2BC830();
      swift_release();
      (*(void (**)(char *, uint64_t))(v127 + 8))(v76, v75);
      uint64_t v77 = v143 + v140[12];
      uint64_t v78 = v143 + v140[11];
      uint64_t v79 = sub_22D06F0C8(v77, v78, v74);
      (*(void (**)(uint64_t, uint64_t))(v126 + 8))(v74, v128);
      uint64_t v80 = sub_22D06F89C(v77, v78, v79);
      swift_release();
      uint64_t v81 = sub_22D07002C(v77, v78, a1, v80);
      swift_release();
      uint64_t v145 = v81;
      uint64_t v144 = v110;
      sub_22D071744();
      uint64_t v82 = v139;
      sub_22D2BCD80();
      swift_release();
      uint64_t v83 = v134;
      uint64_t v84 = v136;
      sub_22D2BC540();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v82, v84);
      sub_22D071898();
      uint64_t v85 = v138;
      uint64_t v86 = sub_22D2BC720();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v83, v85);
      uint64_t v144 = v86;
      sub_22D074020(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, v73);
      sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
      uint64_t v87 = v130;
      sub_22D2BC7E0();
      swift_release();
      swift_release();
      sub_22D0729E4(&qword_26853E628, &qword_26AEC2C00, MEMORY[0x263EFDA60]);
      uint64_t v88 = v132;
      uint64_t v89 = sub_22D2BC720();
      (*(void (**)(char *, uint64_t))(v131 + 8))(v87, v88);
      return v89;
    }
    for (uint64_t i = 0; i != v31; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        uint64_t v33 = MEMORY[0x230F7AF90](i, a1);
      }
      else
      {
        uint64_t v33 = *(void *)(a1 + 8 * i + 32);
        swift_retain();
      }
      uint64_t v34 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
      if (objc_msgSend(*(id *)(v33 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v33 + v34), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)(v33 + v34), sel_multiDeviceStatus) != (id)2&& objc_msgSend(*(id *)(v33 + v34), sel_multiDeviceStatus) != (id)4&& ((uint64_t v35 = *(void *)(v33+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(void *)(v33 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(void *)(v33 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (v36 = v35 == *(void *)(v33+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (v36 = 0), v36 || (sub_22D2BD660() & 1) != 0))|| objc_msgSend(*(id *)(v33 + v34), sel_multiDeviceStatus) == (id)3))
      {
        sub_22D2BD3A0();
        sub_22D2BD3E0();
        sub_22D2BD3F0();
        sub_22D2BD3B0();
      }
      else
      {
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v37 = v145;
    uint64_t v29 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v37 = MEMORY[0x263F8EE78];
  }
  BOOL v38 = v37 < 0 || (v37 & 0x4000000000000000) != 0;
  if (v38)
  {
    swift_retain();
    uint64_t v90 = sub_22D2BD470();
    swift_release();
    if (v90)
    {
LABEL_31:
      uint64_t v145 = v29;
      uint64_t v109 = v37;
      BOOL v108 = v38;
      if (v31)
      {
        swift_bridgeObjectRetain();
        for (uint64_t j = 0; j != v31; ++j)
        {
          if ((a1 & 0xC000000000000001) != 0)
          {
            uint64_t v40 = MEMORY[0x230F7AF90](j, a1);
          }
          else
          {
            uint64_t v40 = *(void *)(a1 + 8 * j + 32);
            swift_retain();
          }
          uint64_t v41 = OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus;
          if (objc_msgSend(*(id *)(v40 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_clinicalSharingStatus), sel_featureStatus) == (id)1&& objc_msgSend(*(id *)(v40 + v41), sel_userStatus) == (id)2&& (objc_msgSend(*(id *)(v40 + v41), sel_multiDeviceStatus) != (id)2&& objc_msgSend(*(id *)(v40 + v41), sel_multiDeviceStatus) != (id)4&& ((v42 = *(void *)(v40+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo+ 8)) == 0|| (*(void *)(v40+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_existingMultiDeviceInfo) == *(void *)(v40 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID)? (BOOL v43 = v42 == *(void *)(v40+ OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_deviceID+ 8)): (BOOL v43 = 0), v43 || (sub_22D2BD660() & 1) != 0))|| objc_msgSend(*(id *)(v40 + v41), sel_multiDeviceStatus) == (id)3))
          {
            swift_release();
          }
          else
          {
            sub_22D2BD3A0();
            sub_22D2BD3E0();
            sub_22D2BD3F0();
            sub_22D2BD3B0();
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v29 = v145;
      }
      uint64_t v6 = (uint64_t)v111;
      if (qword_26AEC1C58 == -1) {
        goto LABEL_53;
      }
      goto LABEL_73;
    }
  }
  else if (*(void *)(v37 + 16))
  {
    goto LABEL_31;
  }
  swift_release();
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v91 = sub_22D2BC390();
  __swift_project_value_buffer(v91, (uint64_t)qword_26AEC3C90);
  uint64_t v92 = v110;
  sub_22D071BF4(v143, v110, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  uint64_t v93 = sub_22D2BC380();
  os_log_type_t v94 = sub_22D2BD080();
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v95 = (uint8_t *)swift_slowAlloc();
    uint64_t v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v95 = 136315138;
    uint64_t v145 = v96;
    id v97 = (uint64_t *)(v92 + v140[9]);
    uint64_t v98 = *v97;
    unint64_t v99 = v97[1];
    swift_bridgeObjectRetain();
    uint64_t v144 = sub_22D0A4D24(v98, v99, &v145);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    sub_22D072164(v92, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
    _os_log_impl(&dword_22CFEE000, v93, v94, "%s No accounts available to sync for", v95, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v96, -1, -1);
    MEMORY[0x230F7BDF0](v95, -1, -1);
  }
  else
  {
    sub_22D072164(v92, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  }

  uint64_t v101 = v137;
  uint64_t v100 = v138;
  uint64_t v103 = v135;
  uint64_t v102 = v136;
  int v104 = v134;
  uint64_t v145 = a1;
  sub_22D0706B4(0);
  sub_22D071744();
  uint64_t v105 = v139;
  sub_22D2BCD80();
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  sub_22D2BC540();
  (*(void (**)(char *, uint64_t))(v103 + 8))(v105, v102);
  sub_22D071898();
  uint64_t v89 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v101 + 8))(v104, v100);
  return v89;
}

void sub_22D06BA24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v6 = sub_22D2BC390();
  __swift_project_value_buffer(v6, (uint64_t)qword_26AEC3C90);
  sub_22D071BF4(a2, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  swift_retain_n();
  uint64_t v7 = sub_22D2BC380();
  os_log_type_t v8 = sub_22D2BD080();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v11 = (uint64_t *)&v5[*(int *)(v3 + 36)];
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_22D0A4D24(v12, v13, &v17);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    sub_22D072164((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
    *(_WORD *)(v9 + 12) = 2080;
    sub_22D2BBC90();
    sub_22D074388((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
    uint64_t v14 = sub_22D2BD630();
    uint64_t v16 = sub_22D0A4D24(v14, v15, &v17);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v7, v8, "%s will now attempt to update DocumentReference for account %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v10, -1, -1);
    MEMORY[0x230F7BDF0](v9, -1, -1);
  }
  else
  {
    sub_22D072164((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);

    swift_release_n();
  }
}

uint64_t sub_22D06BD24(uint64_t a1)
{
  uint64_t v2 = sub_22D2BBC30();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072058();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ClinicalSharingSyncTask();
  sub_22D2BBC20();
  uint64_t v11 = sub_22D286C74((uint64_t)v5);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v14[1] = v11;
  *(void *)(swift_allocObject() + 16) = a1;
  sub_22D074020(0, &qword_26AEC2E80, (uint64_t (*)(uint64_t))sub_22D070C10, MEMORY[0x263EFDCF0]);
  sub_22D070BDC(0);
  sub_22D070760((unint64_t *)&qword_26AEC2E78, &qword_26AEC2E80, (uint64_t (*)(uint64_t))sub_22D070C10);
  swift_bridgeObjectRetain();
  sub_22D2BC780();
  swift_release();
  swift_release();
  sub_22D074388(&qword_26AEC2C48, (void (*)(uint64_t))sub_22D072058);
  uint64_t v12 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v12;
}

uint64_t sub_22D06BFD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v51 = a3;
  sub_22D071D68();
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v54 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072E90(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v48 - v10;
  uint64_t v12 = sub_22D2BBC30();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v48 - v17;
  uint64_t v19 = (int *)type metadata accessor for ClinicalSharingOperationalAnalyticsSubmissionTask();
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D071E94();
  uint64_t v58 = v22;
  uint64_t v56 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v53 = (char *)&v48 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D071FA0();
  uint64_t v57 = v24;
  uint64_t v55 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v52 = (char *)&v48 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for ClinicalSharingSyncTask();
  sub_22CFF4B00(v4 + *(int *)(v26 + 28), (uint64_t)&v61);
  uint64_t v49 = *(void *)(v4 + 8);
  uint64_t v50 = v18;
  sub_22D2BBC20();
  if (a2 && (unint64_t v27 = *(void *)(a2 + 16), v28 = v27 >= 2, v29 = v27 - 2, v28))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v11, a2+ ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))+ *(void *)(v13 + 72) * v29, v12);
    uint64_t v30 = 0;
  }
  else
  {
    uint64_t v30 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v30, 1, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v51, v12);
  uint64_t v31 = (void *)*__swift_project_boxed_opaque_existential_1(&v61, v62);
  id v32 = objc_allocWithZone(MEMORY[0x263F0A470]);
  swift_bridgeObjectRetain();
  id v33 = v31;
  uint64_t v34 = (uint64_t)v11;
  uint64_t v35 = a1;
  BOOL v36 = (void *)sub_22D2BCBA0();
  id v37 = objc_msgSend(v32, sel_initWithCategory_domainName_healthStore_, 3, v36, v33);

  *(void *)&v21[v19[6]] = v37;
  BOOL v38 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v38(&v21[v19[5]], v50, v12);
  *(void *)&v21[v19[7]] = v35;
  sub_22D043228(v34, (uint64_t)&v21[v19[9]]);
  v38(&v21[v19[10]], v16, v12);
  *(void *)&v21[v19[8]] = v49;
  sub_22CFF8C10(&v61, (uint64_t)v21);
  *(void *)&long long v61 = sub_22D0AC404();
  sub_22D071E04();
  sub_22D074388(&qword_26AEC1D50, (void (*)(uint64_t))sub_22D071E04);
  unint64_t v39 = v54;
  sub_22D2BC780();
  swift_release();
  sub_22D074388((unint64_t *)&unk_26AEC1C90, (void (*)(uint64_t))sub_22D071D68);
  uint64_t v40 = v60;
  uint64_t v41 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v40);
  sub_22D072164((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for ClinicalSharingOperationalAnalyticsSubmissionTask);
  *(void *)&long long v61 = v41;
  sub_22D071F28(0, (unint64_t *)&qword_26AEC1DE0);
  sub_22D072304((unint64_t *)&qword_26AEC1DD0, (unint64_t *)&qword_26AEC1DE0);
  uint64_t v42 = v53;
  sub_22D2BC800();
  swift_release();
  *(void *)(swift_allocObject() + 16) = v35;
  sub_22D0706B4(0);
  sub_22D074388(&qword_26AEC2D08, (void (*)(uint64_t))sub_22D071E94);
  swift_bridgeObjectRetain();
  BOOL v43 = v52;
  uint64_t v44 = v58;
  sub_22D2BC780();
  swift_release();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v42, v44);
  sub_22D074388(&qword_26AEC2CB8, (void (*)(uint64_t))sub_22D071FA0);
  uint64_t v45 = v57;
  uint64_t v46 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v43, v45);
  return v46;
}

uint64_t sub_22D06C728(uint64_t a1)
{
  uint64_t v2 = v1;
  sub_22D071A3C();
  uint64_t v37 = v4;
  uint64_t v39 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072E90(0, &qword_26AEC2F08, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDDF8]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v33 - v10;
  id v33 = sub_22D0706B4;
  sub_22D074020(0, &qword_26AEC3018, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDEA0]);
  uint64_t v34 = v12;
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v33 - v13;
  sub_22D071B48();
  uint64_t v38 = v15;
  uint64_t v40 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = a1;
  *(void *)&v41[0] = a1;
  sub_22D0706B4(0);
  swift_bridgeObjectRetain();
  sub_22D2BC6B0();
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v18 = (int *)type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v19 = *(void **)(v2 + v18[10]);
  uint64_t v20 = v2 + v18[12];
  v44[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v44[4] = (uint64_t)&off_26E05F2B0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  sub_22D071BF4(v20, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  uint64_t v22 = v2 + v18[11];
  sub_22CFF4B00((uint64_t)v44, (uint64_t)v43);
  sub_22D071C5C(v22, (uint64_t)v41);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v19;
  sub_22CFF8C10(v43, v23 + 24);
  long long v24 = v41[3];
  *(_OWORD *)(v23 + 96) = v41[2];
  *(_OWORD *)(v23 + 112) = v24;
  *(_OWORD *)(v23 + 128) = v41[4];
  *(void *)(v23 + 144) = v42;
  long long v25 = v41[1];
  *(_OWORD *)(v23 + 64) = v41[0];
  *(_OWORD *)(v23 + 80) = v25;
  id v26 = v19;
  sub_22D2BC5D0();
  sub_22D071F28(0, &qword_26AEC2E90);
  sub_22D072354((unint64_t *)&qword_26AEC3010, &qword_26AEC3018, (uint64_t (*)(uint64_t))v33);
  sub_22D072304((unint64_t *)&qword_26AEC2E88, &qword_26AEC2E90);
  uint64_t v27 = v34;
  sub_22D2BC830();
  swift_release();
  sub_22D074388(&qword_26AEC2DC8, (void (*)(uint64_t))sub_22D071A3C);
  uint64_t v28 = v37;
  uint64_t v29 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v44);
  *(void *)&v41[0] = v29;
  *(void *)(swift_allocObject() + 16) = v35;
  sub_22D070E80(0);
  swift_bridgeObjectRetain();
  sub_22D2BC780();
  swift_release();
  swift_release();
  sub_22D074388(&qword_26AEC2C68, (void (*)(uint64_t))sub_22D071B48);
  uint64_t v30 = v38;
  uint64_t v31 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v17, v30);
  return v31;
}

uint64_t sub_22D06CD40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22D0716C4();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073920(0, (unint64_t *)&qword_26AEC1D10, (uint64_t (*)(uint64_t))sub_22D0706B4, sub_22D071744, MEMORY[0x263EFDC58]);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v30 = v11;
  uint64_t v31 = v12;
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v29 - v13;
  sub_22D071778();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v32 = v15;
  uint64_t v33 = v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D071934();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v34 = v19;
  uint64_t v35 = v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1;
  sub_22D0706B4(0);
  sub_22D071744();
  sub_22D2BCD80();
  sub_22D021C20(0, (unint64_t *)&qword_26AEC1FB0);
  sub_22D2BC540();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = a2;
  *(void *)(v23 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_22D2BC5D0();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_22D074020(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
  sub_22D071898();
  sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  uint64_t v24 = v30;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v24);
  sub_22D074388(&qword_26AEC2D88, (void (*)(uint64_t))sub_22D071778);
  uint64_t v25 = v32;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v25);
  sub_22D074388(&qword_26AEC2D18, (void (*)(uint64_t))sub_22D071934);
  uint64_t v26 = v34;
  uint64_t v27 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v22, v26);
  return v27;
}

uint64_t sub_22D06D1F0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_22D2BBC90();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a1;
  if ((unint64_t)*a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_22D2BD470();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v12 = MEMORY[0x263F8EE78];
  if (!v11)
  {
LABEL_20:
    *a2 = v12;
    return result;
  }
  uint64_t v50 = MEMORY[0x263F8EE78];
  uint64_t result = sub_22D2BD3D0();
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v35 = a2;
    uint64_t v36 = v2;
    uint64_t v13 = 0;
    uint64_t v45 = v9;
    unint64_t v46 = v10 & 0xC000000000000001;
    uint64_t v38 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v39 = (void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v44 = v10;
    uint64_t v47 = v11;
    uint64_t v37 = v5;
    do
    {
      if (v46)
      {
        uint64_t v22 = MEMORY[0x230F7AF90](v13, v10);
      }
      else
      {
        uint64_t v22 = *(void *)(v10 + 8 * v13 + 32);
        swift_retain();
      }
      uint64_t v23 = *(void **)(v22 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error);
      if (v23)
      {
        swift_getErrorValue();
        uint64_t v14 = v48;
        uint64_t v15 = v49;
        id v16 = v23;
        id v17 = sub_22D1E4268(v14, v15);
        id v18 = objc_allocWithZone(MEMORY[0x263F45CC8]);
        uint64_t v19 = (void *)sub_22D2BBC50();
        uint64_t v20 = (void *)sub_22D2BB9B0();
        uint64_t v21 = v18;
        uint64_t v10 = v44;
        objc_msgSend(v21, sel_initWithAccountID_error_, v19, v20);

        uint64_t v9 = v45;
      }
      else
      {
        (*v39)(v9, v22 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_accountID, v5);
        uint64_t v24 = (void *)(v22 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
        uint64_t v25 = *(void *)(v22 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_rootNode);
        if (v25)
        {
          uint64_t v26 = v24[10];
          uint64_t v27 = v24[7];
          uint64_t v40 = v24[8];
          uint64_t v41 = v26;
          unint64_t v28 = v24[5];
          uint64_t v29 = v24[3];
          uint64_t v42 = v24[4];
          unint64_t v43 = v28;
          uint64_t v30 = v24[1];
          uint64_t v31 = v24[2];
          sub_22D057BD8(v25, v30, v31, v29, v42, v28);
          swift_bridgeObjectRetain();
          uint64_t v9 = v45;
          sub_22D057C70(v25, v30, v31, v29, v42, v43);
          uint64_t v32 = (void *)sub_22D2BBC50();
          if (v27)
          {
            uint64_t v33 = (void *)sub_22D2BCBA0();
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v33 = 0;
          }
          uint64_t v5 = v37;
          uint64_t v10 = v44;
        }
        else
        {
          uint64_t v32 = (void *)sub_22D2BBC50();
          uint64_t v33 = 0;
        }
        objc_msgSend(objc_allocWithZone(MEMORY[0x263F45CC8]), sel_initWithAccountID_lookupInfo_, v32, v33);

        (*v38)(v9, v5);
      }
      swift_release();
      ++v13;
      sub_22D2BD3A0();
      sub_22D2BD3E0();
      sub_22D2BD3F0();
      uint64_t result = sub_22D2BD3B0();
    }
    while (v47 != v13);
    uint64_t v12 = v50;
    a2 = v35;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_22D06D5E0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  *a3 = a2;
  a3[1] = v3;
  a3[2] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D06D62C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_22D0686E4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_22D06D670@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = type metadata accessor for ClinicalSharingSyncTask();
  id v7 = (id)*__swift_project_boxed_opaque_existential_1((void *)(a2 + *(int *)(v6 + 28)), *(void *)(a2 + *(int *)(v6 + 28) + 24));
  sub_22D2A8F10(v5);

  sub_22D071F28(0, (unint64_t *)&qword_26AEC1D98);
  sub_22D072304(&qword_26AEC1D90, (unint64_t *)&qword_26AEC1D98);
  uint64_t v8 = sub_22D2BC720();
  uint64_t result = swift_release();
  *a3 = v8;
  return result;
}

void sub_22D06D740(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClinicalSharingSyncTask();
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *a1;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v8 = sub_22D2BC390();
  __swift_project_value_buffer(v8, (uint64_t)qword_26AEC3C90);
  sub_22D071BF4(a2, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
  swift_bridgeObjectRetain_n();
  uint64_t v9 = sub_22D2BC380();
  os_log_type_t v10 = sub_22D2BD080();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = v12;
    *(_DWORD *)uint64_t v11 = 136315394;
    uint64_t v13 = (uint64_t *)&v6[*(int *)(v4 + 36)];
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    swift_bridgeObjectRetain();
    uint64_t v17 = sub_22D0A4D24(v14, v15, &v18);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    sub_22D072164((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);
    *(_WORD *)(v11 + 12) = 2048;
    uint64_t v16 = *(void *)(sub_22D2A958C(v7) + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v16;
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v9, v10, "%s %ld authorized sharing identifiers", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v12, -1, -1);
    MEMORY[0x230F7BDF0](v11, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_22D072164((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClinicalSharingSyncTask);

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_22D06D9F0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v32 = a3;
  sub_22D073800();
  uint64_t v31 = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_22D2BBE00();
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_22D2BBC30();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  unint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *a1;
  uint64_t v17 = type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v18 = __swift_project_boxed_opaque_existential_1((void *)(a2 + *(int *)(v17 + 28)), *(void *)(a2 + *(int *)(v17 + 28) + 24))+ 3;
  uint64_t v34 = &type metadata for ClinicalSharingQueryDefaultDataProvider;
  uint64_t v35 = &off_26E0655E0;
  v33[0] = swift_allocObject();
  sub_22D01A08C((uint64_t)v18, v33[0] + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + *(int *)(v17 + 24), v12);
  swift_bridgeObjectRetain();
  sub_22D2BBDA0();
  uint64_t v19 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v33, (uint64_t)v34);
  MEMORY[0x270FA5388](v19);
  uint64_t v21 = (_OWORD *)((char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(_OWORD *))(v22 + 16))(v21);
  uint64_t v23 = sub_22D0205BC(v16, v21, (uint64_t)v11, (uint64_t)v15);
  uint64_t v25 = v24;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v33);
  uint64_t result = sub_22D23CEB0(v23, v25);
  v33[0] = result;
  if (v25 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_22D021BA8();
    sub_22D074020(0, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDCF0]);
    sub_22D0739D0();
    sub_22D070760(&qword_26AEC2E68, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput);
    sub_22D2BC880();
    swift_release();
    sub_22D074388((unint64_t *)&qword_26853DD10, (void (*)(uint64_t))sub_22D073800);
    uint64_t v27 = v31;
    uint64_t v28 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v27);
    uint64_t v29 = sub_22D23D8B4(v28, v23, v25);
    swift_release();
    uint64_t result = swift_release();
    *uint64_t v32 = v29;
  }
  return result;
}

uint64_t sub_22D06DE14()
{
  sub_22D2BD310();
  swift_bridgeObjectRelease();
  type metadata accessor for ClinicalSharingSyncTask();
  sub_22D06E114();
  sub_22D2BCC30();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  sub_22D2BBC40();
  uint64_t v1 = sub_22D07051C(8);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  MEMORY[0x230F7A8B0](v1, v3, v5, v7);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  sub_22D0BC6C4(&unk_26E059F00, *v0);
  sub_22D070EA8(0, &qword_26AEC1F20, type metadata accessor for HKClinicalSharingOptions);
  swift_arrayDestroy();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  return 60;
}

unint64_t sub_22D06E114()
{
  unint64_t result = qword_26AEC13C0;
  if (!qword_26AEC13C0)
  {
    type metadata accessor for ClinicalSharingSyncTask();
    unint64_t result = swift_getMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26AEC13C0);
  }
  return result;
}

uint64_t sub_22D06E150(void *a1, void *a2, void *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void), uint64_t a5, uint64_t a6)
{
  uint64_t v81 = a5;
  uint64_t v80 = a4;
  uint64_t v88 = a3;
  int v104 = a2;
  sub_22D073A54();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v105 = v8;
  uint64_t v106 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v103 = (char *)&v75 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021DE0();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021F18();
  uint64_t v17 = v16;
  uint64_t v76 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0740AC();
  uint64_t v82 = v20;
  uint64_t v83 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v77 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073F14();
  uint64_t v85 = v22;
  uint64_t v86 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22);
  uint64_t v79 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073DAC();
  uint64_t v89 = v24;
  uint64_t v91 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  uint64_t v84 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073D00();
  uint64_t v93 = v26;
  uint64_t v94 = *(void *)(v26 - 8);
  MEMORY[0x270FA5388](v26);
  uint64_t v87 = (char *)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073BF4();
  uint64_t v95 = v28;
  uint64_t v96 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v90 = (char *)&v75 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073B60();
  uint64_t v97 = v30;
  uint64_t v99 = *(void *)(v30 - 8);
  MEMORY[0x270FA5388](v30);
  uint64_t v92 = (char *)&v75 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v100 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFDC10];
  sub_22D0742CC(0, &qword_26AEC1CC0, MEMORY[0x263EFDC10]);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v101 = v32;
  uint64_t v102 = v33;
  MEMORY[0x270FA5388](v32);
  uint64_t v98 = (char *)&v75 - v34;
  v109[3] = &type metadata for ClinicalSharingAccountStore;
  v109[4] = &off_26E05DAE8;
  v109[0] = a1;
  *(void *)&long long v108 = a6;
  swift_getMetatypeMetadata();
  id v35 = a1;
  uint64_t v36 = sub_22D2BCC30();
  uint64_t v78 = v36;
  uint64_t v107 = v37;
  uint64_t v38 = (void *)*__swift_project_boxed_opaque_existential_1(v109, (uint64_t)&type metadata for ClinicalSharingAccountStore);
  *(void *)(swift_allocObject() + 16) = v38;
  sub_22D074234();
  sub_22D074388((unint64_t *)&qword_26AEC1E10, (void (*)(uint64_t))sub_22D074234);
  id v39 = v38;
  sub_22D2BC700();
  sub_22D074388(&qword_26AEC1E30, (void (*)(uint64_t))sub_22D021DE0);
  uint64_t v40 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(void *)&long long v108 = v40;
  sub_22D074130(0, &qword_26AEC1DC8, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
  sub_22D056DB0(0, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
  sub_22D0741BC();
  sub_22D2BC780();
  swift_release();
  sub_22D074388(&qword_26AEC1CA8, (void (*)(uint64_t))sub_22D021F18);
  uint64_t v41 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v76 + 8))(v19, v17);
  *(void *)&long long v108 = v41;
  uint64_t v42 = (void *)swift_allocObject();
  v42[2] = v36;
  unint64_t v43 = v80;
  v42[3] = v107;
  v42[4] = v43;
  void v42[5] = v81;
  swift_bridgeObjectRetain();
  sub_22D074424((uint64_t)v43);
  uint64_t v44 = v77;
  sub_22D2BC740();
  swift_release();
  swift_release();
  sub_22CFF4B00((uint64_t)v109, (uint64_t)&v108);
  uint64_t v45 = swift_allocObject();
  sub_22CFF8C10(&v108, v45 + 16);
  sub_22D2BC5D0();
  sub_22D073EE0(0);
  unint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D074020(0, &qword_26AEC2EE0, (uint64_t (*)(uint64_t))sub_22D073EE0, MEMORY[0x263EFDCF0]);
  uint64_t v81 = MEMORY[0x263EFDA88];
  sub_22D074388(&qword_26AEC1C68, (void (*)(uint64_t))sub_22D0740AC);
  sub_22D070760(&qword_26AEC2ED8, &qword_26AEC2EE0, (uint64_t (*)(uint64_t))sub_22D073EE0);
  uint64_t v47 = v79;
  uint64_t v48 = v82;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v83 + 8))(v44, v48);
  uint64_t v49 = swift_allocObject();
  uint64_t v50 = v88;
  *(void *)(v49 + 16) = v88;
  id v51 = v50;
  sub_22D2BC5D0();
  sub_22D073EB8(0);
  sub_22D074020(0, &qword_26AEC2ED0, (uint64_t (*)(uint64_t))sub_22D073EB8, v46);
  sub_22D074388(&qword_26AEC2E38, (void (*)(uint64_t))sub_22D073F14);
  sub_22D070760(&qword_26AEC2EC8, &qword_26AEC2ED0, (uint64_t (*)(uint64_t))sub_22D073EB8);
  unint64_t v52 = v84;
  uint64_t v53 = v85;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v86 + 8))(v47, v53);
  sub_22CFF4B00((uint64_t)v109, (uint64_t)&v108);
  uint64_t v54 = swift_allocObject();
  sub_22CFF8C10(&v108, v54 + 16);
  uint64_t v55 = swift_allocObject();
  *(void *)(v55 + 16) = sub_22D07447C;
  *(void *)(v55 + 24) = v54;
  sub_22D0706B4(0);
  sub_22D074388(&qword_26AEC2E28, (void (*)(uint64_t))sub_22D073DAC);
  uint64_t v56 = v87;
  uint64_t v57 = v89;
  sub_22D2BC7F0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v91 + 8))(v52, v57);
  sub_22D2BC5D0();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_22D074020(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, v80);
  sub_22D074388(&qword_26AEC2CF8, (void (*)(uint64_t))sub_22D073D00);
  sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  uint64_t v58 = v90;
  uint64_t v59 = v93;
  sub_22D2BC830();
  (*(void (**)(char *, uint64_t))(v94 + 8))(v56, v59);
  uint64_t v60 = swift_allocObject();
  uint64_t v61 = v107;
  *(void *)(v60 + 16) = v78;
  *(void *)(v60 + 24) = v61;
  sub_22D074388(&qword_26AEC2D58, (void (*)(uint64_t))sub_22D073BF4);
  uint64_t v62 = v95;
  uint64_t v63 = v92;
  sub_22D2BC740();
  swift_release();
  (*(void (**)(char *, uint64_t))(v96 + 8))(v58, v62);
  uint64_t v64 = swift_allocObject();
  uint64_t v65 = v104;
  *(void *)(v64 + 16) = v104;
  id v66 = v65;
  sub_22D2BC5D0();
  sub_22D074388(&qword_26AEC2C18, (void (*)(uint64_t))sub_22D073B60);
  uint64_t v67 = v103;
  uint64_t v68 = v97;
  sub_22D2BC830();
  swift_release();
  sub_22D074388(&qword_26AEC2D68, (void (*)(uint64_t))sub_22D073A54);
  uint64_t v69 = v105;
  uint64_t v70 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v67, v69);
  (*(void (**)(char *, uint64_t))(v99 + 8))(v63, v68);
  *(void *)&long long v108 = v70;
  uint64_t v71 = v98;
  sub_22D2BC800();
  swift_release();
  sub_22D0709D8(&qword_26AEC1CB8, &qword_26AEC1CC0, v100);
  uint64_t v72 = v101;
  uint64_t v73 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v71, v72);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v109);
  return v73;
}

uint64_t sub_22D06F0C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v38 = a2;
  sub_22D073320();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072FA4(0, &qword_26853E720, &qword_26853E728, (uint64_t (*)(uint64_t))sub_22D0733CC, &qword_26853E730);
  uint64_t v43 = v10;
  uint64_t v44 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v37 - v11;
  sub_22D073400();
  uint64_t v45 = v13;
  uint64_t v46 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D07358C();
  uint64_t v47 = v16;
  uint64_t v49 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v41 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073620();
  uint64_t v48 = v18;
  uint64_t v50 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v42 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  uint64_t v60 = &off_26E05F2B0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58);
  sub_22D071BF4(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  sub_22D071C5C(a2, (uint64_t)&v52);
  uint64_t v21 = swift_allocObject();
  long long v22 = v55;
  *(_OWORD *)(v21 + 48) = v54;
  *(_OWORD *)(v21 + 64) = v22;
  *(_OWORD *)(v21 + 80) = v56;
  *(void *)(v21 + 96) = v57;
  long long v23 = v53;
  *(_OWORD *)(v21 + 16) = v52;
  *(_OWORD *)(v21 + 32) = v23;
  sub_22D07244C();
  sub_22D0733CC(0);
  uint64_t v39 = MEMORY[0x263EFDC28];
  sub_22D074388(&qword_26853E718, (void (*)(uint64_t))sub_22D07244C);
  sub_22D2BC7F0();
  swift_release();
  sub_22D074388(&qword_26853E768, (void (*)(uint64_t))sub_22D073320);
  uint64_t v24 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&long long v52 = v24;
  __swift_project_boxed_opaque_existential_1(v58, v59);
  uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D074020(0, &qword_26853E728, (uint64_t (*)(uint64_t))sub_22D0733CC, MEMORY[0x263EFDCF0]);
  sub_22D070760(&qword_26853E730, &qword_26853E728, (uint64_t (*)(uint64_t))sub_22D0733CC);
  sub_22D2BC810();
  swift_release();
  sub_22CFF4B00((uint64_t)v58, (uint64_t)v51);
  sub_22D071C5C(v38, (uint64_t)&v52);
  uint64_t v26 = swift_allocObject();
  sub_22CFF8C10(v51, v26 + 16);
  long long v27 = v55;
  *(_OWORD *)(v26 + 88) = v54;
  *(_OWORD *)(v26 + 104) = v27;
  *(_OWORD *)(v26 + 120) = v56;
  *(void *)(v26 + 136) = v57;
  long long v28 = v53;
  *(_OWORD *)(v26 + 56) = v52;
  *(_OWORD *)(v26 + 72) = v28;
  sub_22D2BC5D0();
  sub_22D072E5C(0);
  sub_22D074020(0, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C, v25);
  sub_22D073508();
  sub_22D070760(&qword_26853E6A8, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C);
  uint64_t v29 = v43;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v12, v29);
  sub_22D074388(&qword_26853E750, (void (*)(uint64_t))sub_22D073400);
  uint64_t v30 = v41;
  uint64_t v31 = v45;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v15, v31);
  sub_22D2BC5D0();
  sub_22D074388(&qword_26853E760, (void (*)(uint64_t))sub_22D07358C);
  uint64_t v32 = v42;
  uint64_t v33 = v47;
  sub_22D2BC830();
  (*(void (**)(char *, uint64_t))(v49 + 8))(v30, v33);
  sub_22D074388(&qword_26853E770, (void (*)(uint64_t))sub_22D073620);
  uint64_t v34 = v48;
  uint64_t v35 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v32, v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v58);
  return v35;
}

uint64_t sub_22D06F89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a2;
  sub_22D072D90();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072FA4(0, &qword_26853E6B0, &qword_26853E6B8, (uint64_t (*)(uint64_t))sub_22D072EF4, &qword_26853E6C0);
  uint64_t v40 = v10;
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v35 = (char *)&v34 - v11;
  sub_22D073044();
  uint64_t v42 = v12;
  uint64_t v43 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v36 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0731D0();
  uint64_t v44 = v14;
  uint64_t v45 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v38 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D073264();
  uint64_t v46 = v16;
  uint64_t v47 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v39 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  long long v53 = &off_26E05F2B0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v51);
  sub_22D071BF4(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  *(void *)&v48[0] = a3;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D074020(0, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C, MEMORY[0x263EFDCF0]);
  sub_22D072EF4(0);
  sub_22D070760(&qword_26853E6A8, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C);
  sub_22D2BC7F0();
  sub_22D074388(&qword_26853E6F8, (void (*)(uint64_t))sub_22D072D90);
  uint64_t v20 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  *(void *)&v48[0] = v20;
  __swift_project_boxed_opaque_existential_1(v51, v52);
  sub_22D074020(0, &qword_26853E6B8, (uint64_t (*)(uint64_t))sub_22D072EF4, v19);
  sub_22D070760(&qword_26853E6C0, &qword_26853E6B8, (uint64_t (*)(uint64_t))sub_22D072EF4);
  uint64_t v21 = v35;
  sub_22D2BC810();
  swift_release();
  sub_22CFF4B00((uint64_t)v51, (uint64_t)v50);
  sub_22D071C5C(v37, (uint64_t)v48);
  uint64_t v22 = swift_allocObject();
  sub_22CFF8C10(v50, v22 + 16);
  long long v23 = v48[3];
  *(_OWORD *)(v22 + 88) = v48[2];
  *(_OWORD *)(v22 + 104) = v23;
  *(_OWORD *)(v22 + 120) = v48[4];
  *(void *)(v22 + 136) = v49;
  long long v24 = v48[1];
  *(_OWORD *)(v22 + 56) = v48[0];
  *(_OWORD *)(v22 + 72) = v24;
  sub_22D2BC5D0();
  sub_22D072AF4(0);
  sub_22D074020(0, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4, v19);
  sub_22D07314C();
  sub_22D070760(&qword_26853E660, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4);
  uint64_t v25 = v36;
  uint64_t v26 = v40;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v21, v26);
  sub_22D074388(&qword_26853E6E0, (void (*)(uint64_t))sub_22D073044);
  long long v27 = v38;
  uint64_t v28 = v42;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v25, v28);
  sub_22D074388(&qword_26853E6F0, (void (*)(uint64_t))sub_22D0731D0);
  uint64_t v29 = v39;
  uint64_t v30 = v44;
  sub_22D2BC780();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v27, v30);
  sub_22D074388(&qword_26853E700, (void (*)(uint64_t))sub_22D073264);
  uint64_t v31 = v46;
  uint64_t v32 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v29, v31);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v51);
  return v32;
}

uint64_t sub_22D07002C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a2;
  sub_22D072A28();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072BFC();
  uint64_t v31 = v13;
  uint64_t v32 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v30 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v41[4] = (uint64_t)&off_26E05F2B0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
  sub_22D071BF4(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  *(void *)&v33[0] = a4;
  sub_22D071C5C(a2, (uint64_t)&v35);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a3;
  long long v17 = v38;
  *(_OWORD *)(v16 + 56) = v37;
  *(_OWORD *)(v16 + 72) = v17;
  *(_OWORD *)(v16 + 88) = v39;
  *(void *)(v16 + 104) = v40;
  long long v18 = v36;
  *(_OWORD *)(v16 + 24) = v35;
  *(_OWORD *)(v16 + 40) = v18;
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D074020(0, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4, MEMORY[0x263EFDCF0]);
  sub_22D072B28(0);
  sub_22D070760(&qword_26853E660, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4);
  swift_bridgeObjectRetain();
  sub_22D2BC780();
  swift_release();
  sub_22D074388(&qword_26853E680, (void (*)(uint64_t))sub_22D072A28);
  uint64_t v20 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v34 = v20;
  sub_22CFF4B00((uint64_t)v41, (uint64_t)v33);
  sub_22D071C5C(v29, (uint64_t)&v35);
  uint64_t v21 = swift_allocObject();
  sub_22CFF8C10(v33, v21 + 16);
  long long v22 = v38;
  *(_OWORD *)(v21 + 88) = v37;
  *(_OWORD *)(v21 + 104) = v22;
  *(_OWORD *)(v21 + 120) = v39;
  *(void *)(v21 + 136) = v40;
  long long v23 = v36;
  *(_OWORD *)(v21 + 56) = v35;
  *(_OWORD *)(v21 + 72) = v23;
  sub_22D2BC5D0();
  sub_22D074020(0, &qword_26853E670, (uint64_t (*)(uint64_t))sub_22D072B28, v19);
  type metadata accessor for ClinicalSharingSyncContext();
  sub_22D074020(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, v19);
  sub_22D070760(&qword_26853E678, &qword_26853E670, (uint64_t (*)(uint64_t))sub_22D072B28);
  sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
  long long v24 = v30;
  sub_22D2BC830();
  swift_release();
  swift_release();
  sub_22D074388(&qword_26853E688, (void (*)(uint64_t))sub_22D072BFC);
  uint64_t v25 = v31;
  uint64_t v26 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v32 + 8))(v24, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return v26;
}

uint64_t sub_22D07051C(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    sub_22D2BCC90();
    return sub_22D2BCD50();
  }
  return result;
}

void sub_22D0705B8()
{
  if (!qword_26AEC2E50)
  {
    sub_22D074130(255, (unint64_t *)&unk_26AEC2EF0, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
    sub_22D074020(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    sub_22D0706E8();
    sub_22D070760((unint64_t *)&qword_26AEC1DB0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E50);
    }
  }
}

void sub_22D0706B4(uint64_t a1)
{
}

unint64_t sub_22D0706E8()
{
  unint64_t result = qword_26AEC2EE8;
  if (!qword_26AEC2EE8)
  {
    sub_22D074130(255, (unint64_t *)&unk_26AEC2EF0, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2EE8);
  }
  return result;
}

uint64_t sub_22D070760(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D074020(255, a2, a3, MEMORY[0x263EFDCF0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0707C8@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_22D2BBC30() - 8);
  uint64_t v9 = v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return sub_22D06945C(a1, v2 + v6, v9, a2);
}

void sub_22D0708AC()
{
  if (!qword_26AEC2D80)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x263EFDA80];
    sub_22D0742CC(255, &qword_26AEC1C60, MEMORY[0x263EFDA80]);
    sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_22D0709D8(&qword_26AEC2C08, &qword_26AEC1C60, v0);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC2D80);
    }
  }
}

uint64_t sub_22D0709D8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D0742CC(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D070A1C()
{
  if (!qword_26AEC2D30)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, void *))MEMORY[0x263EFDC20];
    sub_22D072558(255, &qword_26AEC1CE0, MEMORY[0x263EFDC20]);
    sub_22D0729E4(&qword_26AEC1CD8, &qword_26AEC1CE0, v0);
    unint64_t v1 = sub_22D2BC510();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC2D30);
    }
  }
}

void sub_22D070AD0()
{
  if (!qword_26AEC2E00)
  {
    sub_22D074020(255, &qword_26AEC2EB0, (uint64_t (*)(uint64_t))sub_22D070BDC, MEMORY[0x263EFDCF0]);
    sub_22D070A1C();
    sub_22D070760(&qword_26AEC2EA8, &qword_26AEC2EB0, (uint64_t (*)(uint64_t))sub_22D070BDC);
    sub_22D074388(&qword_26AEC2D28, (void (*)(uint64_t))sub_22D070A1C);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E00);
    }
  }
}

void sub_22D070BDC(uint64_t a1)
{
}

void sub_22D070C10()
{
  if (!qword_26AEC2880)
  {
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2880);
    }
  }
}

void sub_22D070C68()
{
  if (!qword_26AEC2E20)
  {
    sub_22D074020(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    sub_22D070AD0();
    sub_22D070760((unint64_t *)&qword_26AEC1DB0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4);
    sub_22D074388(&qword_26AEC2DF8, (void (*)(uint64_t))sub_22D070AD0);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E20);
    }
  }
}

void sub_22D070D74()
{
  if (!qword_26AEC2DF0)
  {
    sub_22D074020(255, &qword_26AEC2EA0, (uint64_t (*)(uint64_t))sub_22D070E80, MEMORY[0x263EFDCF0]);
    sub_22D070C68();
    sub_22D070760(&qword_26AEC2E98, &qword_26AEC2EA0, (uint64_t (*)(uint64_t))sub_22D070E80);
    sub_22D074388(&qword_26AEC2E18, (void (*)(uint64_t))sub_22D070C68);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2DF0);
    }
  }
}

void sub_22D070E80(uint64_t a1)
{
}

void sub_22D070EA8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_22D070F14()
{
  if (!qword_26AEC2E10)
  {
    sub_22D074020(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    sub_22D070D74();
    sub_22D070760((unint64_t *)&qword_26AEC1DB0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4);
    sub_22D074388(&qword_26AEC2DE8, (void (*)(uint64_t))sub_22D070D74);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E10);
    }
  }
}

void sub_22D071020()
{
  if (!qword_26AEC2CF0)
  {
    sub_22D070F14();
    sub_22D056DB0(255, (unint64_t *)&qword_26AEC2F90, &qword_26AEC2FC0);
    sub_22D074388(&qword_26AEC2E08, (void (*)(uint64_t))sub_22D070F14);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2CF0);
    }
  }
}

uint64_t sub_22D0710E8(uint64_t a1)
{
  return sub_22D072658(a1, (uint64_t (*)(uint64_t, uint64_t))sub_22D06BA24);
}

uint64_t sub_22D071100()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22D071138(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_22D0E9FDC(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_22D071144@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_22D07117C(uint64_t a1)
{
  type metadata accessor for ClinicalSharingSyncTask();
  return sub_22D06BD24(a1);
}

uint64_t sub_22D0711EC()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t objectdestroyTm_2()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  uint64_t v20 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v18 = *(void *)(*(void *)v1 + 64);
  uint64_t v2 = sub_22D2BBC30();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v16 = *(void *)(v3 + 64);
  long long v17 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  uint64_t v21 = v0;
  uint64_t v19 = (v20 + 16) & ~v20;
  uint64_t v5 = v0 + v19;
  v17(v0 + v19 + v1[8], v2);
  __swift_destroy_boxed_opaque_existential_1(v0 + v19 + v1[9]);
  uint64_t v6 = v0 + v19 + v1[10];
  uint64_t v7 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  uint64_t v8 = v0 + v19 + v1[13];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v8 + 48);
  uint64_t v9 = v0 + v19 + v1[14];
  uint64_t v10 = sub_22D2BBAA0();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8);
  v11(v9, v10);
  uint64_t v12 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v11(v9 + *(int *)(v12 + 20), v10);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(void *)(v5 + v1[17])) {
    swift_release();
  }
  uint64_t v13 = (v19 + v18 + v4) & ~v4;
  uint64_t v14 = v13 + v16;
  v17(v21 + v13, v2);
  return MEMORY[0x270FA0238](v21, v14, v20 | v4 | 7);
}

uint64_t sub_22D0714D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_22D2BBC30() - 8);
  uint64_t result = sub_22D06BFD0(*a1, a1[1], v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
  *a2 = result;
  return result;
}

uint64_t sub_22D0715B0(uint64_t a1)
{
  return sub_22D06C728(a1);
}

uint64_t sub_22D071614@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void))(v2 + 16))(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_22D07164C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for ClinicalSharingSyncTask();
  uint64_t result = sub_22D06CD40(*a1, a1[1], a1[2]);
  *a2 = result;
  return result;
}

void sub_22D0716C4()
{
  if (!qword_26AEC0EA8)
  {
    sub_22D0706B4(255);
    sub_22D071744();
    unint64_t v0 = sub_22D2BC560();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC0EA8);
    }
  }
}

uint64_t sub_22D071744()
{
  return sub_22D074388(&qword_26AEC1EA0, sub_22D0706B4);
}

void sub_22D071778()
{
  if (!qword_26AEC2D90)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    sub_22D073920(255, (unint64_t *)&qword_26AEC1D10, (uint64_t (*)(uint64_t))sub_22D0706B4, sub_22D071744, MEMORY[0x263EFDC58]);
    sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_22D071898();
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D90);
    }
  }
}

unint64_t sub_22D071898()
{
  unint64_t result = qword_26AEC1D08;
  if (!qword_26AEC1D08)
  {
    sub_22D073920(255, (unint64_t *)&qword_26AEC1D10, (uint64_t (*)(uint64_t))sub_22D0706B4, sub_22D071744, MEMORY[0x263EFDC58]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1D08);
  }
  return result;
}

void sub_22D071934()
{
  if (!qword_26AEC2D20)
  {
    sub_22D071778();
    sub_22D074388(&qword_26AEC2D88, (void (*)(uint64_t))sub_22D071778);
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D20);
    }
  }
}

uint64_t sub_22D0719C8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D071A08@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_22D0C0D0C(*(void *)(v1 + 16));
  *a1 = result;
  return result;
}

void sub_22D071A3C()
{
  if (!qword_26AEC2DD0)
  {
    sub_22D071F28(255, &qword_26AEC2E90);
    sub_22D074020(255, &qword_26AEC3018, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDEA0]);
    sub_22D072304((unint64_t *)&qword_26AEC2E88, &qword_26AEC2E90);
    sub_22D072354((unint64_t *)&qword_26AEC3010, &qword_26AEC3018, (uint64_t (*)(uint64_t))sub_22D0706B4);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2DD0);
    }
  }
}

void sub_22D071B48()
{
  if (!qword_26AEC2C70)
  {
    sub_22D071F28(255, &qword_26AEC2E90);
    sub_22D070E80(255);
    sub_22D072304((unint64_t *)&qword_26AEC2E88, &qword_26AEC2E90);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C70);
    }
  }
}

uint64_t sub_22D071BF4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D071C5C(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_22D071CB8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  return MEMORY[0x270FA0238](v0, 152, 7);
}

uint64_t sub_22D071D18@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D074940(a1, *(void **)(v2 + 16), v2 + 24, v2 + 64, a2);
}

uint64_t sub_22D071D28()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D071D60@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_22D06D5E0(a1, *(void *)(v2 + 16), a2);
}

void sub_22D071D68()
{
  if (!qword_26AEC1CA0)
  {
    sub_22D071E04();
    sub_22D074388(&qword_26AEC1D50, (void (*)(uint64_t))sub_22D071E04);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1CA0);
    }
  }
}

void sub_22D071E04()
{
  if (!qword_26AEC1D58)
  {
    sub_22D021C20(255, &qword_26AEC1270);
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v0 = sub_22D2BC5E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1D58);
    }
  }
}

void sub_22D071E94()
{
  if (!qword_26AEC2D10)
  {
    sub_22D071F28(255, (unint64_t *)&qword_26AEC1DE0);
    sub_22D072304((unint64_t *)&qword_26AEC1DD0, (unint64_t *)&qword_26AEC1DE0);
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D10);
    }
  }
}

void sub_22D071F28(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v3 = sub_22D2BC5E0();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void sub_22D071FA0()
{
  if (!qword_26AEC2CC0)
  {
    sub_22D071E94();
    sub_22D0706B4(255);
    sub_22D074388(&qword_26AEC2D08, (void (*)(uint64_t))sub_22D071E94);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2CC0);
    }
  }
}

uint64_t sub_22D07204C@<X0>(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 16);
  return swift_bridgeObjectRetain();
}

void sub_22D072058()
{
  if (!qword_26AEC2C50)
  {
    sub_22D074020(255, &qword_26AEC2E80, (uint64_t (*)(uint64_t))sub_22D070C10, MEMORY[0x263EFDCF0]);
    sub_22D070BDC(255);
    sub_22D070760((unint64_t *)&qword_26AEC2E78, &qword_26AEC2E80, (uint64_t (*)(uint64_t))sub_22D070C10);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C50);
    }
  }
}

uint64_t sub_22D072124@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  *a2 = *(void *)(v2 + 16);
  a2[1] = v3;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t sub_22D072164(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_22D0721C4(uint64_t a1)
{
}

void sub_22D0721F8()
{
  if (!qword_26AEC2DE0)
  {
    sub_22D071F28(255, (unint64_t *)&qword_26AEC1D98);
    sub_22D074020(255, &qword_26AEC3008, (uint64_t (*)(uint64_t))sub_22D0721C4, MEMORY[0x263EFDEA0]);
    sub_22D072304(&qword_26AEC1D90, (unint64_t *)&qword_26AEC1D98);
    sub_22D072354(&qword_26AEC3000, &qword_26AEC3008, (uint64_t (*)(uint64_t))sub_22D0721C4);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2DE0);
    }
  }
}

uint64_t sub_22D072304(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D071F28(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D072354(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D074020(255, a2, a3, MEMORY[0x263EFDEA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D0723B8()
{
  if (!qword_26AEC2C30)
  {
    sub_22D0721F8();
    sub_22D074388(&qword_26AEC2DD8, (void (*)(uint64_t))sub_22D0721F8);
    unint64_t v0 = sub_22D2BC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C30);
    }
  }
}

void sub_22D07244C()
{
  if (!qword_26AEC2D50)
  {
    sub_22D074020(255, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDCF0]);
    sub_22D0723B8();
    sub_22D070760(&qword_26AEC2E68, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput);
    sub_22D074388(&qword_26AEC2C28, (void (*)(uint64_t))sub_22D0723B8);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D50);
    }
  }
}

void sub_22D072558(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    v9[0] = v6;
    v9[1] = v6;
    uint64_t v10 = sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    uint64_t v11 = v10;
    unint64_t v7 = a3(a1, v9);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_22D072624(uint64_t a1)
{
  return sub_22D072950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_22D06D670);
}

uint64_t sub_22D072640(uint64_t a1)
{
  return sub_22D072658(a1, (uint64_t (*)(uint64_t, uint64_t))sub_22D06D740);
}

uint64_t sub_22D072658(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5);
}

uint64_t objectdestroy_3Tm()
{
  uint64_t v1 = type metadata accessor for ClinicalSharingSyncTask();
  uint64_t v2 = (int *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v15 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v6 = sub_22D2BBC30();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  __swift_destroy_boxed_opaque_existential_1(v0 + v4 + v2[9]);
  uint64_t v7 = v0 + v4 + v2[10];
  uint64_t v8 = sub_22D2BBC90();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  uint64_t v9 = v0 + v4 + v2[13];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v9 + 48);
  uint64_t v10 = v0 + v4 + v2[14];
  uint64_t v11 = sub_22D2BBAA0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  uint64_t v13 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v12(v10 + *(int *)(v13 + 20), v11);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  if (*(void *)(v0 + v4 + v2[17])) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, v4 + v15, v3 | 7);
}

uint64_t sub_22D072938(uint64_t a1)
{
  return sub_22D072950(a1, (uint64_t (*)(uint64_t, uint64_t))sub_22D06D9F0);
}

uint64_t sub_22D072950(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for ClinicalSharingSyncTask() - 8);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a2(a1, v5);
}

uint64_t sub_22D0729E4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D072558(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D072A28()
{
  if (!qword_26853E630)
  {
    sub_22D074020(255, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4, MEMORY[0x263EFDCF0]);
    sub_22D072B28(255);
    sub_22D070760(&qword_26853E660, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E630);
    }
  }
}

void sub_22D072AF4(uint64_t a1)
{
}

void sub_22D072B28(uint64_t a1)
{
}

void sub_22D072B5C()
{
  if (!qword_26853E650)
  {
    sub_22D072E90(255, &qword_26853E658, type metadata accessor for PBNode, MEMORY[0x263F8D8F0]);
    type metadata accessor for ClinicalSharingSyncContext();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E650);
    }
  }
}

void sub_22D072BFC()
{
  if (!qword_26853E668)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    sub_22D074020(255, &qword_26853E670, (uint64_t (*)(uint64_t))sub_22D072B28, v0);
    sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_22D070760(&qword_26853E678, &qword_26853E670, (uint64_t (*)(uint64_t))sub_22D072B28);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853E668);
    }
  }
}

uint64_t sub_22D072D1C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return MEMORY[0x270FA0238](v0, 112, 7);
}

uint64_t sub_22D072D74@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D29E0E4(a1, *(void *)(v2 + 16), v2 + 24, a2);
}

uint64_t sub_22D072D84@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D096074(a1, (void *)(v2 + 16), v2 + 56, a2);
}

void sub_22D072D90()
{
  if (!qword_26853E690)
  {
    sub_22D074020(255, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C, MEMORY[0x263EFDCF0]);
    sub_22D072EF4(255);
    sub_22D070760(&qword_26853E6A8, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E690);
    }
  }
}

void sub_22D072E5C(uint64_t a1)
{
}

void sub_22D072E90(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D072EF4(uint64_t a1)
{
}

void sub_22D072F28(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_22D072FA4(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    sub_22D074020(255, a3, a4, MEMORY[0x263EFDCF0]);
    sub_22D070760(a5, a3, a4);
    unint64_t v9 = sub_22D2BC420();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D073044()
{
  if (!qword_26853E6C8)
  {
    sub_22D074020(255, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4, MEMORY[0x263EFDCF0]);
    sub_22D072FA4(255, &qword_26853E6B0, &qword_26853E6B8, (uint64_t (*)(uint64_t))sub_22D072EF4, &qword_26853E6C0);
    sub_22D070760(&qword_26853E660, &qword_26853E638, (uint64_t (*)(uint64_t))sub_22D072AF4);
    sub_22D07314C();
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E6C8);
    }
  }
}

unint64_t sub_22D07314C()
{
  unint64_t result = qword_26853E6D0;
  if (!qword_26853E6D0)
  {
    sub_22D072FA4(255, &qword_26853E6B0, &qword_26853E6B8, (uint64_t (*)(uint64_t))sub_22D072EF4, &qword_26853E6C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E6D0);
  }
  return result;
}

void sub_22D0731D0()
{
  if (!qword_26853E6D8)
  {
    sub_22D073044();
    sub_22D074388(&qword_26853E6E0, (void (*)(uint64_t))sub_22D073044);
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E6D8);
    }
  }
}

void sub_22D073264()
{
  if (!qword_26853E6E8)
  {
    sub_22D0731D0();
    sub_22D072AF4(255);
    sub_22D074388(&qword_26853E6F0, (void (*)(uint64_t))sub_22D0731D0);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E6E8);
    }
  }
}

uint64_t sub_22D073314@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D095484(a1, (void *)(v2 + 16), v2 + 56, a2);
}

void sub_22D073320()
{
  if (!qword_26853E708)
  {
    sub_22D07244C();
    sub_22D0733CC(255);
    sub_22D074388(&qword_26853E718, (void (*)(uint64_t))sub_22D07244C);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E708);
    }
  }
}

void sub_22D0733CC(uint64_t a1)
{
}

void sub_22D073400()
{
  if (!qword_26853E738)
  {
    sub_22D074020(255, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C, MEMORY[0x263EFDCF0]);
    sub_22D072FA4(255, &qword_26853E720, &qword_26853E728, (uint64_t (*)(uint64_t))sub_22D0733CC, &qword_26853E730);
    sub_22D070760(&qword_26853E6A8, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C);
    sub_22D073508();
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E738);
    }
  }
}

unint64_t sub_22D073508()
{
  unint64_t result = qword_26853E740;
  if (!qword_26853E740)
  {
    sub_22D072FA4(255, &qword_26853E720, &qword_26853E728, (uint64_t (*)(uint64_t))sub_22D0733CC, &qword_26853E730);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E740);
  }
  return result;
}

void sub_22D07358C()
{
  if (!qword_26853E748)
  {
    sub_22D073400();
    sub_22D074388(&qword_26853E750, (void (*)(uint64_t))sub_22D073400);
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E748);
    }
  }
}

void sub_22D073620()
{
  if (!qword_26853E758)
  {
    sub_22D074020(255, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C, MEMORY[0x263EFDCF0]);
    sub_22D07358C();
    sub_22D070760(&qword_26853E6A8, &qword_26853E698, (uint64_t (*)(uint64_t))sub_22D072E5C);
    sub_22D074388(&qword_26853E760, (void (*)(uint64_t))sub_22D07358C);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E758);
    }
  }
}

uint64_t sub_22D07372C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t sub_22D07377C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_22D29CE30(a1, v2 + 16, a2);
}

uint64_t objectdestroy_57Tm()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return MEMORY[0x270FA0238](v0, 144, 7);
}

uint64_t sub_22D0737F4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D094274(a1, (void *)(v2 + 16), v2 + 56, a2);
}

void sub_22D073800()
{
  if (!qword_26853DCE0)
  {
    sub_22D074020(255, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput, MEMORY[0x263EFDCF0]);
    sub_22D073920(255, (unint64_t *)&qword_26853DCE8, (uint64_t (*)(uint64_t))sub_22D021BA8, sub_22D0739D0, MEMORY[0x263EFDAC8]);
    sub_22D070760(&qword_26AEC2E68, (unint64_t *)&qword_26AEC2E70, type metadata accessor for ClinicalSharingQueryOutput);
    sub_22D021C70();
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853DCE0);
    }
  }
}

void sub_22D073920(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, void *))
{
  if (!*a2)
  {
    v11[0] = a3(255);
    v11[1] = sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    void v11[2] = a4();
    v11[3] = MEMORY[0x263F8E4E0];
    unint64_t v9 = a5(a1, v11);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D0739D0()
{
  return sub_22D074388(&qword_26853DD00, (void (*)(uint64_t))sub_22D021BA8);
}

uint64_t sub_22D073A04()
{
  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 5));
  return MEMORY[0x270FA0238](v0, 80, 7);
}

void sub_22D073A54()
{
  if (!qword_26AEC2D70)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    sub_22D073B60();
    sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_22D074388(&qword_26AEC2C18, (void (*)(uint64_t))sub_22D073B60);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D70);
    }
  }
}

void sub_22D073B60()
{
  if (!qword_26AEC2C20)
  {
    sub_22D073BF4();
    sub_22D074388(&qword_26AEC2D58, (void (*)(uint64_t))sub_22D073BF4);
    unint64_t v0 = sub_22D2BC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C20);
    }
  }
}

void sub_22D073BF4()
{
  if (!qword_26AEC2D60)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    sub_22D073D00();
    sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    sub_22D074388(&qword_26AEC2CF8, (void (*)(uint64_t))sub_22D073D00);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D60);
    }
  }
}

void sub_22D073D00()
{
  if (!qword_26AEC2D00)
  {
    sub_22D073DAC();
    sub_22D0706B4(255);
    sub_22D074388(&qword_26AEC2E28, (void (*)(uint64_t))sub_22D073DAC);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D00);
    }
  }
}

void sub_22D073DAC()
{
  if (!qword_26AEC2E30)
  {
    sub_22D074020(255, &qword_26AEC2ED0, (uint64_t (*)(uint64_t))sub_22D073EB8, MEMORY[0x263EFDCF0]);
    sub_22D073F14();
    sub_22D070760(&qword_26AEC2EC8, &qword_26AEC2ED0, (uint64_t (*)(uint64_t))sub_22D073EB8);
    sub_22D074388(&qword_26AEC2E38, (void (*)(uint64_t))sub_22D073F14);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E30);
    }
  }
}

void sub_22D073EB8(uint64_t a1)
{
}

void sub_22D073EE0(uint64_t a1)
{
}

void sub_22D073F14()
{
  if (!qword_26AEC2E40)
  {
    sub_22D074020(255, &qword_26AEC2EE0, (uint64_t (*)(uint64_t))sub_22D073EE0, MEMORY[0x263EFDCF0]);
    sub_22D0740AC();
    sub_22D070760(&qword_26AEC2ED8, &qword_26AEC2EE0, (uint64_t (*)(uint64_t))sub_22D073EE0);
    sub_22D074388(&qword_26AEC1C68, (void (*)(uint64_t))sub_22D0740AC);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2E40);
    }
  }
}

void sub_22D074020(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    uint64_t v8 = sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v9 = a4(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D0740AC()
{
  if (!qword_26AEC1C70)
  {
    sub_22D074130(255, &qword_26AEC1DC8, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
    sub_22D0741BC();
    unint64_t v0 = sub_22D2BC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1C70);
    }
  }
}

void sub_22D074130(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  if (!*a2)
  {
    sub_22D056DB0(255, a3, a4);
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v5 = sub_22D2BC5E0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_22D0741BC()
{
  unint64_t result = qword_26AEC1DC0;
  if (!qword_26AEC1DC0)
  {
    sub_22D074130(255, &qword_26AEC1DC8, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1DC0);
  }
  return result;
}

void sub_22D074234()
{
  if (!qword_26AEC1E18)
  {
    sub_22D056DB0(255, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
    sub_22D021C20(255, (unint64_t *)&qword_26AEC1FB0);
    unint64_t v0 = sub_22D2BC6E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1E18);
    }
  }
}

void sub_22D0742CC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    sub_22D074020(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    uint64_t v7 = v6;
    uint64_t v8 = sub_22D070760((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D074388(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0743D0()
{
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 32)) {
    swift_release();
  }
  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_22D074418(unint64_t *a1)
{
  sub_22D2B8A6C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void (**)(void))(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_22D074424(uint64_t result)
{
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t sub_22D074434()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22D07446C@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D2B8EB4(a1, (void *)(v2 + 16), a2);
}

uint64_t sub_22D074474@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D2B8EF8(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_22D07447C(uint64_t a1)
{
  return sub_22D2B90E8(a1);
}

uint64_t sub_22D074498@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(void, void, void))(v2 + 16))(*a1, a1[1], a1[2]);
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_22D0744D8()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

void sub_22D074510(uint64_t a1)
{
  sub_22D2B93F0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_22D074518@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D090D00(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_22D074520(uint64_t result)
{
  if (result) {
    return swift_release();
  }
  return result;
}

uint64_t sub_22D074530(uint64_t a1)
{
  return a1;
}

uint64_t sub_22D074584(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t WebResponse.data.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_22CFFA158(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

void *WebResponse.response.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  id v2 = v1;
  return v1;
}

uint64_t WebResponse.init(data:response:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = result;
  a4[1] = a2;
  a4[2] = a3;
  return result;
}

void destroy for WebResponse(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_22CFF5630(*a1, v2);
  }
  uint64_t v3 = (void *)a1[2];
}

uint64_t _s19HealthRecordsDaemon11WebResponseVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_22CFF9B64(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = (void *)a2[2];
  *(void *)(a1 + 16) = v6;
  id v7 = v6;
  return a1;
}

uint64_t *assignWithCopy for WebResponse(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v6 = *a2;
      sub_22CFF9B64(*a2, a2[1]);
      uint64_t v7 = *a1;
      unint64_t v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_22CFF5630(v7, v8);
      goto LABEL_8;
    }
    sub_22CFFA7EC((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v5 = *a2;
  sub_22CFF9B64(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  unint64_t v9 = (void *)a1[2];
  uint64_t v10 = (void *)a2[2];
  a1[2] = (uint64_t)v10;
  id v11 = v10;

  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for WebResponse(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    unint64_t v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      uint64_t v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_22CFF5630(v6, v4);
      goto LABEL_6;
    }
    sub_22CFFA7EC((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  uint64_t v7 = (void *)a1[2];
  a1[2] = a2[2];

  return a1;
}

uint64_t getEnumTagSinglePayload for WebResponse(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WebResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WebResponse()
{
  return &type metadata for WebResponse;
}

uint64_t sub_22D074940@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v36 = a3;
  uint64_t v44 = a5;
  sub_22D076D2C();
  uint64_t v35 = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D076E7C();
  uint64_t v43 = v11;
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  long long v39 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D077034(0, &qword_26AEC2DB0, (void (*)(uint64_t))sub_22D076E7C, (void (*)(void))sub_22D077170);
  uint64_t v42 = v13;
  uint64_t v40 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  long long v38 = (char *)&v34 - v14;
  unint64_t v15 = *a1;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v16 = sub_22D2BC390();
  __swift_project_value_buffer(v16, (uint64_t)qword_26AEC3C90);
  swift_bridgeObjectRetain_n();
  long long v17 = sub_22D2BC380();
  os_log_type_t v18 = sub_22D2BD050();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 134217984;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v20 = sub_22D2BD470();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v20 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    *(void *)&v45[0] = v20;
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v17, v18, "Updating ClinicalSharingGraphMetadata. No of Accounts: %ld", v19, 0xCu);
    MEMORY[0x230F7BDF0](v19, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *(void *)&v45[0] = sub_22D2BD0D0();
  sub_22D076F1C(0, &qword_26AEC1DF8, &qword_26AEC0F30, MEMORY[0x263F06F78], MEMORY[0x263EFDE20]);
  sub_22D077F20(0, qword_26AEC16F8, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263F8D8F0]);
  sub_22D076DF8();
  sub_22D2BC780();
  swift_release();
  sub_22D078740(&qword_26AEC2CA8, (void (*)(uint64_t))sub_22D076D2C);
  uint64_t v21 = v35;
  uint64_t v22 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  *(void *)&v45[0] = v22;
  *(void *)(swift_allocObject() + 16) = v15;
  sub_22D076F1C(0, &qword_26AEC1D88, qword_26AEC16F8, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
  sub_22D076FB0();
  swift_bridgeObjectRetain();
  long long v23 = v39;
  sub_22D2BC780();
  swift_release();
  swift_release();
  sub_22CFF4B00(v36, (uint64_t)v47);
  sub_22D071C5C(v37, (uint64_t)v45);
  uint64_t v24 = swift_allocObject();
  sub_22CFF8C10(v47, v24 + 16);
  long long v25 = v45[3];
  *(_OWORD *)(v24 + 88) = v45[2];
  *(_OWORD *)(v24 + 104) = v25;
  *(_OWORD *)(v24 + 120) = v45[4];
  uint64_t v26 = v46;
  long long v27 = v45[1];
  *(_OWORD *)(v24 + 56) = v45[0];
  *(_OWORD *)(v24 + 72) = v27;
  *(void *)(v24 + 136) = v26;
  *(void *)(v24 + 144) = a2;
  id v28 = a2;
  sub_22D2BC5D0();
  sub_22D0784F8(0, &qword_26AEC2E90, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
  sub_22D077170();
  sub_22D0770F4();
  uint64_t v29 = v38;
  uint64_t v30 = v43;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v23, v30);
  sub_22D0777C8(&qword_26AEC2DA8, &qword_26AEC2DB0, (void (*)(uint64_t))sub_22D076E7C, (void (*)(void))sub_22D077170);
  uint64_t v31 = v42;
  uint64_t v32 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v29, v31);
  uint64_t *v44 = v32;
  return result;
}

uint64_t sub_22D075018@<X0>(uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (*a1)
  {
    uint64_t result = sub_22D056FE8(a2, *a1, a1[1]);
  }
  else
  {
    unint64_t v6 = swift_bridgeObjectRetain();
    uint64_t result = sub_22D057D08(v6);
  }
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_22D075064@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  long long v56 = a5;
  sub_22D077034(0, &qword_26AEC2DC0, (void (*)(uint64_t))sub_22D077254, (void (*)(void))sub_22D077310);
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v52 = (char *)&v43 - v8;
  sub_22D077254();
  uint64_t v53 = v9;
  uint64_t v51 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v50 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v46 = __swift_project_boxed_opaque_existential_1(a2, a2[3]);
  unint64_t v13 = *(void *)(v11 + 16);
  swift_bridgeObjectRetain_n();
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v47 = v11;
  if (v13)
  {
    unint64_t v15 = 0;
    uint64_t v58 = -(uint64_t)v13;
    uint64_t v16 = v11 + 56;
    uint64_t v17 = MEMORY[0x263F8EE78];
    uint64_t v44 = v11 + 56;
    unint64_t v45 = v13;
    do
    {
      uint64_t v57 = v17;
      if (v15 <= v13) {
        unint64_t v18 = v13;
      }
      else {
        unint64_t v18 = v15;
      }
      uint64_t v19 = -(uint64_t)v18;
      uint64_t v20 = (unint64_t *)(v16 + 32 * v15++);
      while (1)
      {
        if (v19 + v15 == 1)
        {
          __break(1u);
          return result;
        }
        uint64_t v22 = *(v20 - 3);
        uint64_t v21 = *(v20 - 2);
        uint64_t v24 = *(v20 - 1);
        unint64_t v23 = *v20;
        swift_bridgeObjectRetain();
        sub_22CFF9B64(v24, v23);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_22CFF9B64(v24, v23);
        char v25 = sub_22D077344(v12, v22, v21);
        swift_bridgeObjectRelease();
        sub_22CFF5630(v24, v23);
        swift_bridgeObjectRelease();
        if ((v25 & 1) == 0) {
          break;
        }
        swift_bridgeObjectRelease();
        uint64_t result = sub_22CFF5630(v24, v23);
        ++v15;
        v20 += 4;
        if (v58 + v15 == 1)
        {
          uint64_t v17 = v57;
          goto LABEL_18;
        }
      }
      uint64_t v17 = v57;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v59 = v17;
      if ((result & 1) == 0)
      {
        uint64_t result = sub_22D24B9CC(0, *(void *)(v17 + 16) + 1, 1);
        uint64_t v17 = v59;
      }
      unint64_t v13 = v45;
      unint64_t v27 = *(void *)(v17 + 16);
      unint64_t v26 = *(void *)(v17 + 24);
      uint64_t v28 = v27 + 1;
      if (v27 >= v26 >> 1)
      {
        uint64_t v57 = v27 + 1;
        uint64_t result = sub_22D24B9CC(v26 > 1, v27 + 1, 1);
        uint64_t v28 = v57;
        uint64_t v17 = v59;
      }
      *(void *)(v17 + 16) = v28;
      uint64_t v29 = (void *)(v17 + 32 * v27);
      v29[4] = v22;
      v29[5] = v21;
      v29[6] = v24;
      v29[7] = v23;
      uint64_t v16 = v44;
    }
    while (v58 + v15);
  }
  else
  {
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
LABEL_18:
  uint64_t v30 = v47;
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_22D07560C(v17, v48);
  swift_release();
  uint64_t v59 = v31;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v12;
  *(void *)(v32 + 24) = v30;
  uint64_t v33 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D07815C(0, &qword_26AEC2EC0, MEMORY[0x263EFDCF0]);
  sub_22D078338(&qword_26AEC2EB8, &qword_26AEC2EC0, v33);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v34 = v50;
  sub_22D2BC780();
  swift_release();
  swift_release();
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v49;
  *(void *)(v35 + 16) = v49;
  id v37 = v36;
  sub_22D2BC5D0();
  sub_22D0784F8(0, &qword_26AEC2E90, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
  sub_22D077310();
  sub_22D0770F4();
  long long v39 = v52;
  uint64_t v38 = v53;
  sub_22D2BC830();
  swift_release();
  sub_22D0777C8(&qword_26AEC2DB8, &qword_26AEC2DC0, (void (*)(uint64_t))sub_22D077254, (void (*)(void))sub_22D077310);
  uint64_t v40 = v55;
  uint64_t v41 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v54 + 8))(v39, v40);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v34, v38);
  uint64_t v59 = v41;
  uint64_t v42 = sub_22D2BC720();
  uint64_t result = swift_release();
  *long long v56 = v42;
  return result;
}

uint64_t sub_22D07560C(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a2;
  sub_22D077A8C();
  uint64_t v69 = v3;
  uint64_t v67 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v63 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D077DB0();
  uint64_t v70 = v5;
  uint64_t v68 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v65 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0780F0(0, &qword_26AEC2F10, (unint64_t *)&qword_26AEC1EA8, (uint64_t)&type metadata for ClinicalSharingNodeMetadata);
  uint64_t v8 = v7;
  uint64_t v52 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v51 - v9;
  sub_22D077C44(0, &qword_26AEC2FF8, (uint64_t (*)(uint64_t))sub_22D077CC0, MEMORY[0x263EFDEA0]);
  uint64_t v55 = v11;
  uint64_t v54 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  unint64_t v13 = (char *)&v51 - v12;
  sub_22D077B38();
  uint64_t v58 = v14;
  uint64_t v57 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D077F6C();
  uint64_t v62 = v16;
  uint64_t v61 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v59 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D07805C();
  uint64_t v66 = v18;
  uint64_t v64 = *(void *)(v18 - 8);
  MEMORY[0x270FA5388](v18);
  uint64_t v60 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0780F0(0, &qword_26AEC2F18, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D310]);
  uint64_t v21 = v20;
  uint64_t v22 = *(void *)(v20 - 8);
  MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v51 - v23;
  sub_22D07815C(0, &qword_26AEC3028, MEMORY[0x263EFDEA0]);
  uint64_t v26 = v25;
  uint64_t v27 = *(void *)(v25 - 8);
  MEMORY[0x270FA5388](v25);
  uint64_t v29 = (char *)&v51 - v28;
  if (*(void *)(a1 + 16))
  {
    *(void *)&long long v73 = a1;
    uint64_t v51 = (uint64_t (*)(void, uint64_t))MEMORY[0x263F8D488];
    sub_22D077F20(0, (unint64_t *)&qword_26AEC1EA8, (uint64_t)&type metadata for ClinicalSharingNodeMetadata, MEMORY[0x263F8D488]);
    swift_bridgeObjectRetain();
    sub_22D2BC6B0();
    sub_22D077CC0();
    sub_22D2BC690();
    (*(void (**)(char *, uint64_t))(v52 + 8))(v10, v8);
    sub_22D071C5C(v53, (uint64_t)&v73);
    uint64_t v30 = swift_allocObject();
    long long v31 = v76;
    *(_OWORD *)(v30 + 48) = v75;
    *(_OWORD *)(v30 + 64) = v31;
    *(_OWORD *)(v30 + 80) = v77;
    *(void *)(v30 + 96) = v78;
    long long v32 = v74;
    *(_OWORD *)(v30 + 16) = v73;
    *(_OWORD *)(v30 + 32) = v32;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = sub_22D078248;
    *(void *)(v33 + 24) = v30;
    sub_22D2BC5D0();
    type metadata accessor for PBDeleteBlobsRequest(0);
    uint64_t v34 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D077C44(0, (unint64_t *)&unk_26AEC1D40, type metadata accessor for PBDeleteBlobsRequest, MEMORY[0x263EFDCF0]);
    sub_22D077D28();
    sub_22D077EBC(&qword_26AEC1D38, (unint64_t *)&unk_26AEC1D40, type metadata accessor for PBDeleteBlobsRequest);
    uint64_t v35 = v55;
    sub_22D2BC830();
    swift_release();
    (*(void (**)(char *, uint64_t))(v54 + 8))(v13, v35);
    *((void *)&v74 + 1) = type metadata accessor for ClinicalSharingCloudStandardAPI();
    *(void *)&long long v75 = &off_26E05F2B0;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v73);
    sub_22D078568(v56, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
    sub_22CFF4B00((uint64_t)&v73, (uint64_t)v72);
    uint64_t v37 = swift_allocObject();
    sub_22CFF8C10(v72, v37 + 16);
    sub_22D2BB5B0();
    sub_22D078740(&qword_26AEC2D38, (void (*)(uint64_t))sub_22D077B38);
    uint64_t v38 = v63;
    uint64_t v39 = v58;
    sub_22D2BC7F0();
    swift_release();
    sub_22CFF4B00((uint64_t)&v73, (uint64_t)v72);
    uint64_t v40 = swift_allocObject();
    sub_22CFF8C10(v72, v40 + 16);
    sub_22D2BC5D0();
    type metadata accessor for PBDeleteBlobsResponse(0);
    sub_22D077C44(0, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse, v34);
    sub_22D078740(&qword_26AEC2CD8, (void (*)(uint64_t))sub_22D077A8C);
    sub_22D077EBC(&qword_26AEC1D60, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse);
    uint64_t v41 = v65;
    uint64_t v42 = v69;
    sub_22D2BC830();
    swift_release();
    (*(void (**)(char *, uint64_t))(v67 + 8))(v38, v42);
    sub_22D078740(&qword_26853E778, (void (*)(uint64_t))sub_22D077DB0);
    uint64_t v43 = v70;
    uint64_t v44 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v43);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v71, v39);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v73);
    *(void *)&long long v73 = v44;
    sub_22D077F20(0, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D310], v51);
    unint64_t v45 = v59;
    sub_22D2BC780();
    swift_release();
    sub_22D078740(&qword_26AEC2C38, (void (*)(uint64_t))sub_22D077F6C);
    uint64_t v46 = v62;
    uint64_t v47 = v60;
    sub_22D2BC740();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v45, v46);
    sub_22D078740(&qword_26853E780, (void (*)(uint64_t))sub_22D07805C);
    uint64_t v48 = v66;
    uint64_t v49 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v47, v48);
  }
  else
  {
    *(void *)&long long v73 = MEMORY[0x263F8EE78];
    sub_22D077F20(0, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    sub_22D2BC6B0();
    sub_22CFF49FC();
    sub_22D2BC680();
    (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
    sub_22D078338(&qword_26AEC3020, &qword_26AEC3028, MEMORY[0x263EFDEA0]);
    uint64_t v49 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  }
  return v49;
}

uint64_t sub_22D076280@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_22D23916C(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t v7 = sub_22D077818(v6, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a2 = a1;
  a2[1] = v7;
  return result;
}

uint64_t sub_22D07631C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PBDeleteBlobs(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t result = sub_22D078E60(v6, v5);
  if (!v1)
  {
    sub_22D078740(&qword_26853E7B8, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobs);
    uint64_t v8 = sub_22D2BC1E0();
    uint64_t v10 = v9;
    sub_22D077CC0();
    uint64_t v12 = (uint64_t *)(a1 + *(int *)(v11 + 48));
    uint64_t result = sub_22D0787FC((uint64_t)v5, a1, type metadata accessor for PBDeleteBlobs);
    *uint64_t v12 = v8;
    v12[1] = v10;
  }
  return result;
}

uint64_t sub_22D076470(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v25 = a1;
  uint64_t v7 = type metadata accessor for PBDeleteBlobs(0);
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v8 = *(void *)(v24 + 64);
  MEMORY[0x270FA5388](v7 - 8);
  sub_22D07837C();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v27 = v9;
  uint64_t v28 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v26 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22CFF4B00(a4 + 48, (uint64_t)v30);
  uint64_t v12 = *(void *)(a4 + 32);
  sub_22CFF4B00((uint64_t)v30, (uint64_t)v29);
  uint64_t v13 = (void *)swift_allocObject();
  sub_22CFF8C10(v29, (uint64_t)(v13 + 2));
  v13[7] = a2;
  v13[8] = a3;
  v13[9] = 3;
  v13[10] = v12;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D0784F8(0, &qword_26853E7A0, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, MEMORY[0x263EFDE20]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_22CFF9B64(a2, a3);
  *(void *)&v29[0] = sub_22D2BC6F0();
  sub_22D078450(&qword_26853E7A8, &qword_26853E7A0, v14);
  uint64_t v15 = sub_22D2BC720();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
  v30[0] = v15;
  sub_22D078568(v25, (uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PBDeleteBlobs);
  unint64_t v16 = (*(unsigned __int8 *)(v24 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v17 = swift_allocObject();
  sub_22D0787FC((uint64_t)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v17 + v16, type metadata accessor for PBDeleteBlobs);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D0784F8(0, &qword_26853E790, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, MEMORY[0x263EFDCF0]);
  type metadata accessor for PBDeleteBlobsRequest(0);
  sub_22D078450(&qword_26853E798, &qword_26853E790, v18);
  uint64_t v19 = v26;
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  sub_22D078740(&qword_26853E7B0, (void (*)(uint64_t))sub_22D07837C);
  uint64_t v20 = v27;
  uint64_t v21 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v20);
  return v21;
}

uint64_t sub_22D07684C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PBDeleteBlobs(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  unint64_t v11 = a1[2];
  sub_22D078568(a2, (uint64_t)v8, type metadata accessor for PBDeleteBlobs);
  swift_bridgeObjectRetain();
  sub_22CFF9B64(v10, v11);
  return sub_22D269864((uint64_t)v8, v9, v10, v11, a3);
}

uint64_t sub_22D076930@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PBBlobDeleteResult(0) - 8;
  uint64_t v5 = MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v10 = (uint64_t *)((char *)&v23 - v9);
  uint64_t result = *a1;
  uint64_t v12 = *(void *)(*a1 + 16);
  if (!v12)
  {
    uint64_t v15 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_18;
  }
  uint64_t v23 = *a1;
  uint64_t v24 = a2;
  uint64_t v13 = result + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v14 = *(void *)(v8 + 72);
  swift_bridgeObjectRetain_n();
  uint64_t v15 = (void *)MEMORY[0x263F8EE78];
  do
  {
    sub_22D078568(v13, (uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
    uint64_t v16 = v10[4];
    sub_22D078568((uint64_t)v10, (uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
    if (!v16) {
      goto LABEL_9;
    }
    uint64_t v17 = *((void *)v7 + 4);
    if (v7[40] == 1)
    {
      if (v17 != 3)
      {
        sub_22D078864((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
LABEL_4:
        sub_22D078864((uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
        goto LABEL_5;
      }
LABEL_9:
      sub_22D078864((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
      goto LABEL_11;
    }
    sub_22D078864((uint64_t)v7, type metadata accessor for PBBlobDeleteResult);
    if (v17 != 4) {
      goto LABEL_4;
    }
LABEL_11:
    uint64_t v18 = *v10;
    uint64_t v19 = v10[1];
    swift_bridgeObjectRetain();
    sub_22D078864((uint64_t)v10, type metadata accessor for PBBlobDeleteResult);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v15 = sub_22D2810D4(0, v15[2] + 1, 1, v15);
    }
    unint64_t v21 = v15[2];
    unint64_t v20 = v15[3];
    if (v21 >= v20 >> 1) {
      uint64_t v15 = sub_22D2810D4((void *)(v20 > 1), v21 + 1, 1, v15);
    }
    v15[2] = v21 + 1;
    uint64_t v22 = &v15[2 * v21];
    v22[4] = v18;
    v22[5] = v19;
LABEL_5:
    v13 += v14;
    --v12;
  }
  while (v12);
  uint64_t result = swift_bridgeObjectRelease_n();
  a2 = v24;
LABEL_18:
  *a2 = v15;
  return result;
}

void sub_22D076BD4()
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v0 = sub_22D2BC390();
  __swift_project_value_buffer(v0, (uint64_t)qword_26AEC3C90);
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_22D2BC380();
  os_log_type_t v2 = sub_22D2BD080();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 134217984;
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v1, v2, "Number of deleted nodes: %ld", v3, 0xCu);
    MEMORY[0x230F7BDF0](v3, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
}

void sub_22D076D2C()
{
  if (!qword_26AEC2CB0)
  {
    sub_22D076F1C(255, &qword_26AEC1DF8, &qword_26AEC0F30, MEMORY[0x263F06F78], MEMORY[0x263EFDE20]);
    sub_22D077F20(255, qword_26AEC16F8, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263F8D8F0]);
    sub_22D076DF8();
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2CB0);
    }
  }
}

unint64_t sub_22D076DF8()
{
  unint64_t result = qword_26AEC1DF0;
  if (!qword_26AEC1DF0)
  {
    sub_22D076F1C(255, &qword_26AEC1DF8, &qword_26AEC0F30, MEMORY[0x263F06F78], MEMORY[0x263EFDE20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1DF0);
  }
  return result;
}

void sub_22D076E7C()
{
  if (!qword_26AEC2C60)
  {
    sub_22D076F1C(255, &qword_26AEC1D88, qword_26AEC16F8, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
    sub_22D076FB0();
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C60);
    }
  }
}

void sub_22D076F1C(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_22D077F20(255, a3, a4, MEMORY[0x263F8D8F0]);
    uint64_t v9 = v8;
    unint64_t v10 = sub_22CFF49FC();
    unint64_t v11 = a5(a1, v9, v10, MEMORY[0x263F8E4E0]);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t sub_22D076FB0()
{
  unint64_t result = qword_26AEC1D80;
  if (!qword_26AEC1D80)
  {
    sub_22D076F1C(255, &qword_26AEC1D88, qword_26AEC16F8, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1D80);
  }
  return result;
}

void sub_22D077034(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    sub_22D0784F8(255, &qword_26AEC2E90, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
    a3(255);
    sub_22D0770F4();
    a4();
    unint64_t v7 = sub_22D2BC520();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_22D0770F4()
{
  unint64_t result = qword_26AEC2E88;
  if (!qword_26AEC2E88)
  {
    sub_22D0784F8(255, &qword_26AEC2E90, (uint64_t)&type metadata for ClinicalSharingGraphMetadata, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2E88);
  }
  return result;
}

uint64_t sub_22D077170()
{
  return sub_22D078740(&qword_26AEC2C58, (void (*)(uint64_t))sub_22D076E7C);
}

uint64_t sub_22D0771A4()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D0771DC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D075018(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_22D0771E4()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);

  return MEMORY[0x270FA0238](v0, 152, 7);
}

uint64_t sub_22D077244@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D075064(a1, (void *)(v2 + 16), v2 + 56, *(void **)(v2 + 144), a2);
}

void sub_22D077254()
{
  if (!qword_26AEC2C90)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D07815C(255, &qword_26AEC2EC0, MEMORY[0x263EFDCF0]);
    sub_22D078338(&qword_26AEC2EB8, &qword_26AEC2EC0, v0);
    unint64_t v1 = sub_22D2BC450();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC2C90);
    }
  }
}

uint64_t sub_22D077310()
{
  return sub_22D078740(&qword_26AEC2C88, (void (*)(uint64_t))sub_22D077254);
}

uint64_t sub_22D077344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_22D078788();
  uint64_t v7 = v6;
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v37 - v11;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v40 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  int64_t v42 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v38 = v7;
  uint64_t v39 = v12;
  uint64_t v41 = v10;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      int64_t v43 = v18;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_24;
    }
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_45;
    }
    if (v21 >= v42) {
      goto LABEL_43;
    }
    unint64_t v22 = *(void *)(v40 + 8 * v21);
    int64_t v23 = v18 + 1;
    if (!v22)
    {
      int64_t v23 = v18 + 2;
      if (v18 + 2 >= v42) {
        goto LABEL_43;
      }
      unint64_t v22 = *(void *)(v40 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v18 + 3;
        if (v18 + 3 >= v42) {
          goto LABEL_43;
        }
        unint64_t v22 = *(void *)(v40 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v18 + 4;
          if (v18 + 4 >= v42) {
            goto LABEL_43;
          }
          unint64_t v22 = *(void *)(v40 + 8 * v23);
          if (!v22)
          {
            uint64_t v24 = v18 + 5;
            if (v18 + 5 >= v42)
            {
LABEL_43:
              swift_release();
              return 0;
            }
            unint64_t v22 = *(void *)(v40 + 8 * v24);
            int64_t v23 = v18 + 5;
            if (!v22) {
              break;
            }
          }
        }
      }
    }
LABEL_23:
    unint64_t v16 = (v22 - 1) & v22;
    int64_t v43 = v23;
    unint64_t v20 = __clz(__rbit64(v22)) + (v23 << 6);
LABEL_24:
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v26 = sub_22D2BBC90();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16))(v12, v25 + *(void *)(*(void *)(v26 - 8) + 72) * v20, v26);
    *(void *)&v12[*(int *)(v7 + 48)] = *(void *)(*(void *)(a1 + 56) + 8 * v20);
    sub_22D0787FC((uint64_t)v12, (uint64_t)v10, (uint64_t (*)(void))sub_22D078788);
    uint64_t v27 = *(void *)&v10[*(int *)(v7 + 48)];
    if (*(void *)(v27 + 16))
    {
      sub_22D2BD730();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_22D2BCC70();
      uint64_t v28 = sub_22D2BD760();
      uint64_t v29 = -1 << *(unsigned char *)(v27 + 32);
      unint64_t v30 = v28 & ~v29;
      if ((*(void *)(v27 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30))
      {
        uint64_t v31 = a1;
        uint64_t v32 = *(void *)(v27 + 48);
        uint64_t v33 = (void *)(v32 + 16 * v30);
        BOOL v34 = *v33 == a2 && v33[1] == a3;
        if (v34 || (sub_22D2BD660() & 1) != 0)
        {
LABEL_41:
          swift_bridgeObjectRelease();
          sub_22D078864((uint64_t)v41, (uint64_t (*)(void))sub_22D078788);
          swift_release();
          return 1;
        }
        while (1)
        {
          unint64_t v30 = (v30 + 1) & ~v29;
          if (((*(void *)(v27 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v30) & 1) == 0) {
            break;
          }
          uint64_t v35 = (void *)(v32 + 16 * v30);
          BOOL v36 = *v35 == a2 && v35[1] == a3;
          if (v36 || (sub_22D2BD660() & 1) != 0) {
            goto LABEL_41;
          }
        }
        swift_bridgeObjectRelease();
        a1 = v31;
        uint64_t v7 = v38;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v10 = v41;
      uint64_t v12 = v39;
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t result = sub_22D078864((uint64_t)v10, (uint64_t (*)(void))sub_22D078788);
    int64_t v18 = v43;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v42) {
      goto LABEL_43;
    }
    unint64_t v22 = *(void *)(v40 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_23;
    }
  }
LABEL_45:
  __break(1u);
  return result;
}

uint64_t sub_22D077740()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D077780@<X0>(void *a1@<X8>)
{
  return sub_22D076280(*(void *)(v1 + 16), a1);
}

uint64_t sub_22D077788()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D0777C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D04C268(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_22D0777C8(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D077034(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D077818(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
  uint64_t v3 = a2;
  unint64_t v4 = 0;
  uint64_t v27 = result + 32;
  uint64_t v31 = a2 + 56;
  uint64_t v26 = MEMORY[0x263F8EE78];
  unint64_t v28 = *(void *)(result + 16);
  do
  {
    if (v4 <= v2) {
      unint64_t v5 = v2;
    }
    else {
      unint64_t v5 = v4;
    }
    unint64_t v30 = v5;
    while (1)
    {
      if (v4 == v30)
      {
        __break(1u);
        return result;
      }
      uint64_t v6 = (uint64_t *)(v27 + 32 * v4);
      uint64_t v8 = *v6;
      uint64_t v7 = v6[1];
      uint64_t v10 = v6[2];
      unint64_t v9 = v6[3];
      ++v4;
      if (!*(void *)(v3 + 16)) {
        break;
      }
      sub_22D2BD730();
      swift_bridgeObjectRetain();
      sub_22CFF9B64(v10, v9);
      swift_bridgeObjectRetain();
      sub_22D2BCC70();
      uint64_t v11 = sub_22D2BD760();
      uint64_t v12 = -1 << *(unsigned char *)(v3 + 32);
      unint64_t v13 = v11 & ~v12;
      if (((*(void *)(v31 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v14 = *(void *)(v3 + 48);
      uint64_t v15 = (void *)(v14 + 16 * v13);
      BOOL v16 = *v15 == v8 && v15[1] == v7;
      if (!v16 && (sub_22D2BD660() & 1) == 0)
      {
        uint64_t v17 = ~v12;
        for (unint64_t i = v13 + 1; ; unint64_t i = v19 + 1)
        {
          uint64_t v19 = i & v17;
          if (((*(void *)(v31 + (((i & v17) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v17)) & 1) == 0) {
            break;
          }
          unint64_t v20 = (void *)(v14 + 16 * v19);
          BOOL v21 = *v20 == v8 && v20[1] == v7;
          if (v21 || (sub_22D2BD660() & 1) != 0) {
            goto LABEL_7;
          }
        }
LABEL_24:
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
LABEL_7:
      swift_bridgeObjectRelease_n();
      uint64_t result = sub_22CFF5630(v10, v9);
      uint64_t v3 = a2;
      if (v4 == v28) {
        return v26;
      }
    }
    swift_bridgeObjectRetain();
    sub_22CFF9B64(v10, v9);
LABEL_26:
    uint64_t v22 = v26;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_22D24B9CC(0, *(void *)(v26 + 16) + 1, 1);
      uint64_t v22 = v26;
    }
    unint64_t v24 = *(void *)(v22 + 16);
    unint64_t v23 = *(void *)(v22 + 24);
    if (v24 >= v23 >> 1)
    {
      uint64_t result = sub_22D24B9CC(v23 > 1, v24 + 1, 1);
      uint64_t v22 = v26;
    }
    *(void *)(v22 + 16) = v24 + 1;
    uint64_t v26 = v22;
    uint64_t v25 = (void *)(v22 + 32 * v24);
    v25[4] = v8;
    v25[5] = v7;
    v25[6] = v10;
    v25[7] = v9;
    unint64_t v2 = v28;
    uint64_t v3 = a2;
  }
  while (v4 != v28);
  return v26;
}

void sub_22D077A8C()
{
  if (!qword_26AEC2CE0)
  {
    sub_22D077B38();
    sub_22D2BB5B0();
    sub_22D078740(&qword_26AEC2D38, (void (*)(uint64_t))sub_22D077B38);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2CE0);
    }
  }
}

void sub_22D077B38()
{
  if (!qword_26AEC2D40)
  {
    sub_22D077C44(255, (unint64_t *)&unk_26AEC1D40, type metadata accessor for PBDeleteBlobsRequest, MEMORY[0x263EFDCF0]);
    sub_22D077C44(255, &qword_26AEC2FF8, (uint64_t (*)(uint64_t))sub_22D077CC0, MEMORY[0x263EFDEA0]);
    sub_22D077EBC(&qword_26AEC1D38, (unint64_t *)&unk_26AEC1D40, type metadata accessor for PBDeleteBlobsRequest);
    sub_22D077D28();
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D40);
    }
  }
}

void sub_22D077C44(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a4(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void sub_22D077CC0()
{
  if (!qword_26AEC11D0)
  {
    type metadata accessor for PBDeleteBlobs(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26AEC11D0);
    }
  }
}

unint64_t sub_22D077D28()
{
  unint64_t result = qword_26AEC2FF0;
  if (!qword_26AEC2FF0)
  {
    sub_22D077C44(255, &qword_26AEC2FF8, (uint64_t (*)(uint64_t))sub_22D077CC0, MEMORY[0x263EFDEA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2FF0);
  }
  return result;
}

void sub_22D077DB0()
{
  if (!qword_26AEC2D48)
  {
    sub_22D077C44(255, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse, MEMORY[0x263EFDCF0]);
    sub_22D077A8C();
    sub_22D077EBC(&qword_26AEC1D60, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse);
    sub_22D078740(&qword_26AEC2CD8, (void (*)(uint64_t))sub_22D077A8C);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2D48);
    }
  }
}

uint64_t sub_22D077EBC(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D077C44(255, a2, a3, MEMORY[0x263EFDCF0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D077F20(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_22D077F6C()
{
  if (!qword_26AEC2C40)
  {
    sub_22D077C44(255, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse, MEMORY[0x263EFDCF0]);
    sub_22D077F20(255, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    sub_22D077EBC(&qword_26AEC1D60, &qword_26AEC1D68, type metadata accessor for PBDeleteBlobsResponse);
    unint64_t v0 = sub_22D2BC450();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C40);
    }
  }
}

void sub_22D07805C()
{
  if (!qword_26AEC2C10)
  {
    sub_22D077F6C();
    sub_22D078740(&qword_26AEC2C38, (void (*)(uint64_t))sub_22D077F6C);
    unint64_t v0 = sub_22D2BC3F0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC2C10);
    }
  }
}

void sub_22D0780F0(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    sub_22D077F20(255, a3, a4, MEMORY[0x263F8D488]);
    unint64_t v5 = sub_22D2BC6A0();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_22D07815C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_22D077F20(255, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D310], MEMORY[0x263F8D488]);
    uint64_t v7 = v6;
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D0781F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 64);
  return MEMORY[0x270FA0238](v0, 104, 7);
}

uint64_t sub_22D078248(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_22D076470(a1, a2, a3, v3 + 16);
}

uint64_t sub_22D078250()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D078288@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v5 = *(uint64_t (**)(uint64_t, void, void))(v2 + 16);
  sub_22D077CC0();
  uint64_t result = v5(a1, *(void *)(a1 + *(int *)(v6 + 48)), *(void *)(a1 + *(int *)(v6 + 48) + 8));
  *a2 = result;
  return result;
}

uint64_t sub_22D0782DC()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return MEMORY[0x270FA0238](v0, 56, 7);
}

uint64_t sub_22D078314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D2227C8(a1, (void *)(v2 + 16), a2);
}

uint64_t sub_22D078330@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D222D50(a1, (void *)(v2 + 16), a2);
}

uint64_t sub_22D078338(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D07815C(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D07837C()
{
  if (!qword_26853E788)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0784F8(255, &qword_26853E790, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, MEMORY[0x263EFDCF0]);
    type metadata accessor for PBDeleteBlobsRequest(255);
    sub_22D078450(&qword_26853E798, &qword_26853E790, v0);
    unint64_t v1 = sub_22D2BC500();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853E788);
    }
  }
}

uint64_t sub_22D078450(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D0784F8(255, a2, (uint64_t)&type metadata for ClinicalSharingEncryption.BAACertSignature, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0784A0()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  sub_22CFF5630(*(void *)(v0 + 56), *(void *)(v0 + 64));
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 88, 7);
}

uint64_t sub_22D0784E8(uint64_t a1, uint64_t a2)
{
  return sub_22D0A9864(a1, a2, v2 + 2, v2[7], v2[8], v2[9], v2[10]);
}

void sub_22D0784F8(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a4(a1, a3, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D078568(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D0785D0()
{
  unint64_t v1 = (int *)(type metadata accessor for PBDeleteBlobs(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[7];
  uint64_t v8 = sub_22D2BBFF0();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return MEMORY[0x270FA0238](v0, v4, v5);
}

uint64_t sub_22D0786C4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(type metadata accessor for PBDeleteBlobs(0) - 8);
  return sub_22D07684C(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), a2);
}

uint64_t sub_22D078740(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D078788()
{
  if (!qword_26853E7C0)
  {
    sub_22D2BBC90();
    sub_22D05688C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E7C0);
    }
  }
}

uint64_t sub_22D0787FC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D078864(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void sub_22D0788C8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5, uint64_t a6, void *a7)
{
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a1;
  *(void *)(v14 + 24) = a2;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = MEMORY[0x263F8EE78];
  if (a5) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = a4;
  }
  sub_22D030474(0, &qword_26853E7C8);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = sub_22D034BAC;
  v17[3] = v14;
  v17[4] = v15;
  swift_bridgeObjectRetain();
  swift_retain();
  id v18 = a3;
  swift_retain();
  id v19 = sub_22D078C3C(a3, 0, v16, a6, (uint64_t)sub_22D078C30, (uint64_t)v17);
  objc_msgSend(a7, sel_executeQuery_, v19);
  swift_release();
}

uint64_t sub_22D078A3C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D078A74()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22D078AAC(int a1, void *a2, int a3, char a4, id a5, void (*a6)(id, uint64_t), uint64_t a7, uint64_t a8)
{
  if (a5)
  {
    id v10 = a5;
    a6(a5, 1);
  }
  else
  {
    unint64_t v13 = (void *)(a8 + 16);
    if (a2)
    {
      swift_beginAccess();
      id v14 = a2;
      MEMORY[0x230F7AA40]();
      if (*(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_22D2BCE30();
      }
      sub_22D2BCE50();
      sub_22D2BCE20();
      swift_endAccess();
    }
    if (a4)
    {
      swift_beginAccess();
      uint64_t v15 = swift_bridgeObjectRetain();
      a6((id)v15, 0);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_22D078BF0()
{
  swift_release();
  swift_release();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_22D078C30(int a1, void *a2, int a3, char a4, void *a5)
{
  sub_22D078AAC(a1, a2, a3, a4, a5, *(void (**)(id, uint64_t))(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32));
}

id sub_22D078C3C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a4)
  {
    sub_22D030474(0, &qword_26853E7D0);
    uint64_t v11 = (void *)sub_22D2BCDF0();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
  }
  id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  _OWORD v16[4] = a5;
  v16[5] = a6;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1107296256;
  void v16[2] = sub_22D078D7C;
  v16[3] = &block_descriptor_5;
  unint64_t v13 = _Block_copy(v16);
  id v14 = objc_msgSend(v12, sel_initWithPredicate_anchor_limit_sortDescriptors_resultsHandler_, a1, a2, a3, v11, v13);

  _Block_release(v13);
  swift_release();
  return v14;
}

void sub_22D078D7C(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11 = *(void (**)(id, void *, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v15 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  v11(v15, a3, a4, a5, a6);
  swift_release();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t sub_22D078E60@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_22D2BC040();
  MEMORY[0x270FA5388](v6 - 8);
  long long v75 = (char *)v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for PBRevocationAuthorization();
  uint64_t v8 = *(void *)(v84 - 8);
  MEMORY[0x270FA5388](v84);
  uint64_t v82 = (uint64_t)v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0797B0();
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v73 = (uint64_t)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  id v14 = (char *)v67 - v13;
  uint64_t v74 = type metadata accessor for PBDeleteBlob(0);
  uint64_t v72 = *(void *)(v74 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v74);
  uint64_t v86 = (uint64_t)v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v81 = (uint64_t)v67 - v17;
  uint64_t v18 = MEMORY[0x263F8EE78];
  *a2 = MEMORY[0x263F8EE78];
  type metadata accessor for PBDeleteBlobs(0);
  uint64_t v68 = a2;
  sub_22D2BBFE0();
  uint64_t v19 = a1;
  int64_t v20 = *(void *)(a1 + 16);
  if (v20)
  {
    uint64_t v90 = v18;
    uint64_t v21 = v19;
    sub_22D24BAC4(0, v20, 0);
    uint64_t v80 = (void (**)(void))(v8 + 56);
    v67[1] = v21;
    uint64_t v22 = (unint64_t *)(v21 + 56);
    uint64_t v71 = v14;
    while (1)
    {
      long long v76 = v22;
      int64_t v77 = v20;
      uint64_t v23 = *(v22 - 2);
      uint64_t v79 = *(v22 - 3);
      uint64_t v24 = *(v22 - 1);
      unint64_t v25 = *v22;
      swift_bridgeObjectRetain();
      sub_22CFF9B64(v24, v25);
      uint64_t v26 = v86;
      sub_22D2BBFE0();
      uint64_t v27 = *(int *)(v74 + 20);
      if (qword_26853CE50 != -1) {
        swift_once();
      }
      *(void *)(v26 + v27) = qword_26853F878;
      swift_retain();
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v83 = v23;
      uint64_t v85 = v27;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v29 = *(void **)(v86 + v27);
        type metadata accessor for PBDeleteBlob._StorageClass(0);
        unint64_t v30 = (void *)swift_allocObject();
        v30[2] = 0;
        v30[3] = 0xE000000000000000;
        swift_retain();
        v30[4] = sub_22D2BBFC0();
        void v30[5] = v31;
        uint64_t v69 = (char *)v30
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        (*v80)();
        swift_beginAccess();
        uint64_t v78 = v3;
        uint64_t v70 = (char *)v25;
        uint64_t v32 = v29[2];
        uint64_t v33 = v29[3];
        swift_beginAccess();
        v30[2] = v32;
        v30[3] = v33;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v34 = v29[4];
        unint64_t v35 = v29[5];
        swift_beginAccess();
        uint64_t v36 = v30[4];
        unint64_t v37 = v30[5];
        v30[4] = v34;
        void v30[5] = v35;
        unint64_t v38 = v35;
        unint64_t v25 = (unint64_t)v70;
        id v14 = v71;
        sub_22CFF9B64(v34, v38);
        unint64_t v39 = v37;
        uint64_t v3 = v78;
        sub_22CFF5630(v36, v39);
        uint64_t v40 = (char *)v29
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        swift_beginAccess();
        uint64_t v41 = (uint64_t)v40;
        uint64_t v23 = v83;
        sub_22D0798C4(v41, (uint64_t)v14, (uint64_t (*)(void))sub_22D0797B0);
        uint64_t v26 = v86;
        swift_release();
        uint64_t v42 = (uint64_t)v69;
        swift_beginAccess();
        sub_22D079808((uint64_t)v14, v42);
        swift_endAccess();
        *(void *)(v26 + v85) = v30;
        uint64_t v27 = v85;
        swift_release();
      }
      uint64_t v43 = *(void *)(v26 + v27);
      swift_beginAccess();
      *(void *)(v43 + 16) = v79;
      *(void *)(v43 + 24) = v23;
      swift_bridgeObjectRelease();
      uint64_t v89 = 0;
      long long v87 = 0u;
      long long v88 = 0u;
      sub_22CFF9B64(v24, v25);
      sub_22D2BC030();
      sub_22D07986C();
      sub_22D2BC1D0();
      if (v3) {
        break;
      }
      uint64_t v79 = v24;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v44 = *(void **)(v86 + v27);
        type metadata accessor for PBDeleteBlob._StorageClass(0);
        unint64_t v45 = (void *)swift_allocObject();
        v45[2] = 0;
        v45[3] = 0xE000000000000000;
        swift_retain();
        v45[4] = sub_22D2BBFC0();
        _OWORD v45[5] = v46;
        uint64_t v70 = (char *)v45
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        (*v80)();
        swift_beginAccess();
        uint64_t v78 = 0;
        uint64_t v48 = v44[2];
        uint64_t v47 = v44[3];
        swift_beginAccess();
        v45[2] = v48;
        v45[3] = v47;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_beginAccess();
        uint64_t v49 = v44[4];
        unint64_t v50 = v44[5];
        swift_beginAccess();
        uint64_t v51 = v45[4];
        unint64_t v52 = v25;
        unint64_t v53 = v45[5];
        v45[4] = v49;
        id v14 = v71;
        _OWORD v45[5] = v50;
        unint64_t v54 = v50;
        uint64_t v3 = v78;
        sub_22CFF9B64(v49, v54);
        unint64_t v55 = v53;
        unint64_t v25 = v52;
        sub_22CFF5630(v51, v55);
        uint64_t v56 = (uint64_t)v44
            + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
        swift_beginAccess();
        sub_22D0798C4(v56, (uint64_t)v14, (uint64_t (*)(void))sub_22D0797B0);
        uint64_t v26 = v86;
        swift_release();
        uint64_t v57 = (uint64_t)v70;
        swift_beginAccess();
        sub_22D079808((uint64_t)v14, v57);
        swift_endAccess();
        *(void *)(v26 + v85) = v45;
        uint64_t v27 = v85;
        swift_release();
      }
      uint64_t v58 = *(void *)(v26 + v27);
      uint64_t v59 = v82;
      sub_22D0798C4(v82, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for PBRevocationAuthorization);
      ((void (*)(char *, void, uint64_t, uint64_t))*v80)(v14, 0, 1, v84);
      uint64_t v60 = v73;
      sub_22D07998C((uint64_t)v14, v73, (uint64_t (*)(void))sub_22D0797B0);
      uint64_t v61 = v58
          + OBJC_IVAR____TtCV19HealthRecordsDaemon12PBDeleteBlobP33_10BC46EBE4B3F8F600539A521FA688DE13_StorageClass__revocationAuthorization;
      swift_beginAccess();
      swift_retain();
      sub_22D079808(v60, v61);
      swift_endAccess();
      swift_release();
      sub_22D07992C(v59, (uint64_t (*)(void))type metadata accessor for PBRevocationAuthorization);
      sub_22D07998C(v86, v81, type metadata accessor for PBDeleteBlob);
      swift_bridgeObjectRelease();
      sub_22CFF5630(v79, v25);
      uint64_t v18 = v90;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BAC4(0, *(void *)(v18 + 16) + 1, 1);
        uint64_t v18 = v90;
      }
      int64_t v62 = v77;
      unint64_t v64 = *(void *)(v18 + 16);
      unint64_t v63 = *(void *)(v18 + 24);
      if (v64 >= v63 >> 1)
      {
        sub_22D24BAC4(v63 > 1, v64 + 1, 1);
        uint64_t v18 = v90;
      }
      uint64_t v22 = v76 + 4;
      *(void *)(v18 + 16) = v64 + 1;
      sub_22D07998C(v81, v18+ ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80))+ *(void *)(v72 + 72) * v64, type metadata accessor for PBDeleteBlob);
      int64_t v20 = v62 - 1;
      if (!v20) {
        goto LABEL_17;
      }
    }
    sub_22D07992C(v26, type metadata accessor for PBDeleteBlob);
    swift_bridgeObjectRelease();
    sub_22CFF5630(v24, v25);
    swift_bridgeObjectRelease();
    swift_release();
    return sub_22D07992C((uint64_t)v68, type metadata accessor for PBDeleteBlobs);
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    uint64_t v66 = v68;
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v66 = v18;
  }
  return result;
}

void sub_22D0797B0()
{
  if (!qword_26853E7D8)
  {
    type metadata accessor for PBRevocationAuthorization();
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E7D8);
    }
  }
}

uint64_t sub_22D079808(uint64_t a1, uint64_t a2)
{
  sub_22D0797B0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_22D07986C()
{
  unint64_t result = qword_26853E5D0;
  if (!qword_26853E5D0)
  {
    type metadata accessor for PBRevocationAuthorization();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E5D0);
  }
  return result;
}

uint64_t sub_22D0798C4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D07992C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D07998C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D0799F4()
{
  uint64_t v1 = v0;
  sub_22D08326C();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = (int *)type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  uint64_t v114 = *((void *)v125 - 1);
  MEMORY[0x270FA5388](v125);
  uint64_t v115 = v7;
  uint64_t v116 = (uint64_t)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0832DC();
  uint64_t v118 = *(void *)(v8 - 8);
  uint64_t v119 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v117 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D083424();
  uint64_t v11 = v10;
  uint64_t v121 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v120 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_22D2BCF90();
  uint64_t v112 = *(void *)(v113 - 8);
  MEMORY[0x270FA5388](v113);
  uint64_t v111 = (char *)&v89 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v124 = sub_22D2BBC30();
  uint64_t v107 = *(void *)(v124 - 8);
  MEMORY[0x270FA5388](v124);
  uint64_t v106 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_22D2BBE00();
  uint64_t v129 = *(void *)(v123 - 8);
  MEMORY[0x270FA5388](v123);
  uint64_t v122 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v110 = sub_22D2BB8E0();
  uint64_t v109 = *(void *)(v110 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v110);
  long long v108 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v128 = (char *)&v89 - v18;
  sub_22D05C844(0);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_22D2BB6F0();
  uint64_t v126 = *(void *)(v22 - 8);
  uint64_t v127 = v22;
  MEMORY[0x270FA5388](v22);
  uint64_t v130 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D021DE0();
  uint64_t v25 = v24;
  uint64_t v26 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24);
  unint64_t v28 = (char *)&v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_22D07AC1C();
  if (!*(void *)(v29 + 16))
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ClinicalSharingQueryOutput(0);
    sub_22CFF49FC();
    sub_22D2BC6C0();
    sub_22D0833DC((unint64_t *)&qword_26853E828, (void (*)(uint64_t))sub_22D08326C);
    uint64_t v39 = sub_22D2BC720();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    return v39;
  }
  uint64_t v104 = v29;
  uint64_t v105 = v11;
  sub_22CFF4B00(*v0 + 16, (uint64_t)&v132);
  unint64_t v30 = __swift_project_boxed_opaque_existential_1(&v132, v133);
  uint64_t v31 = (void *)*__swift_project_boxed_opaque_existential_1(v30 + 3, v30[6]);
  *(void *)(swift_allocObject() + 16) = v31;
  uint64_t v32 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D0834D0(0, (unint64_t *)&qword_26AEC1E18, MEMORY[0x263EFDE20]);
  sub_22D083560((unint64_t *)&qword_26AEC1E10, (unint64_t *)&qword_26AEC1E18, v32);
  id v33 = v31;
  sub_22D2BC700();
  sub_22D0833DC(&qword_26AEC1E30, (void (*)(uint64_t))sub_22D021DE0);
  uint64_t v34 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  uint64_t v35 = v0[2];
  if (v35 == 2)
  {
    unint64_t v38 = (void *)MEMORY[0x263F09508];
    uint64_t v37 = v126;
    goto LABEL_7;
  }
  uint64_t v36 = 0;
  uint64_t v37 = v126;
  if (v35 == 3)
  {
    unint64_t v38 = (void *)MEMORY[0x263F09510];
LABEL_7:
    uint64_t v36 = (int *)objc_msgSend(self, sel_predicateForDiagnosticTestResultCategory_, *v38);
  }
  sub_22D0835DC((uint64_t)v1 + v125[7], (uint64_t)v21, (uint64_t (*)(void))sub_22D05C844);
  uint64_t v40 = v127;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v21, 1, v127) == 1)
  {
    sub_22D084124((uint64_t)v21, (uint64_t (*)(void))sub_22D05C844);
  }
  else
  {
    uint64_t v102 = v34;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v130, v21, v40);
    uint64_t v103 = v1;
    uint64_t v41 = *(void (**)(void))(v129 + 16);
    uint64_t v91 = v129 + 16;
    uint64_t v101 = v41;
    uint64_t v42 = v122;
    v41();
    sub_22D0840C0(0, &qword_26853E7E0, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
    uint64_t v100 = v43;
    uint64_t v44 = sub_22D2BBDE0();
    uint64_t v45 = *(void *)(v44 - 8);
    uint64_t v46 = *(void *)(v45 + 72);
    uint64_t v47 = *(unsigned __int8 *)(v45 + 80);
    uint64_t v94 = 2 * v46;
    uint64_t v99 = ((v47 + 32) & ~v47) + 3 * v46;
    uint64_t v48 = (v47 + 32) & ~v47;
    uint64_t v97 = v48;
    uint64_t v98 = v47 | 7;
    uint64_t v49 = swift_allocObject();
    long long v96 = xmmword_22D2C20F0;
    *(_OWORD *)(v49 + 16) = xmmword_22D2C20F0;
    unsigned int v95 = *MEMORY[0x263F078A0];
    unint64_t v50 = *(void (**)(uint64_t))(v45 + 104);
    v50(v49 + v48);
    unsigned int v93 = *MEMORY[0x263F078A8];
    v50(v49 + v48 + v46);
    unsigned int v92 = *MEMORY[0x263F07870];
    v50(v49 + v48 + 2 * v46);
    uint64_t v89 = v36;
    sub_22D0B3424(v49);
    uint64_t v125 = v36;
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    uint64_t v51 = v106;
    sub_22D2BB6C0();
    unint64_t v52 = v42;
    sub_22D2BBD00();
    swift_bridgeObjectRelease();
    uint64_t v107 = *(void *)(v107 + 8);
    ((void (*)(char *, uint64_t))v107)(v51, v124);
    unint64_t v53 = *(void (**)(char *, uint64_t))(v129 + 8);
    v129 += 8;
    uint64_t v90 = v53;
    unint64_t v54 = v42;
    uint64_t v55 = v123;
    v53(v54, v123);
    ((void (*)(char *, uint64_t, uint64_t))v101)(v52, *v103 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar, v55);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v96;
    uint64_t v57 = v56 + v97;
    ((void (*)(uint64_t, void, uint64_t))v50)(v56 + v97, v95, v44);
    ((void (*)(uint64_t, void, uint64_t))v50)(v57 + v46, v93, v44);
    ((void (*)(uint64_t, void, uint64_t))v50)(v57 + v94, v92, v44);
    sub_22D0B3424(v56);
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_deallocClassInstance();
    sub_22D2BB690();
    uint64_t v58 = v108;
    uint64_t v59 = v122;
    sub_22D2BBD00();
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v107)(v51, v124);
    v90(v59, v55);
    uint64_t v60 = self;
    uint64_t v61 = (void *)sub_22D2BB810();
    int64_t v62 = (void *)sub_22D2BB810();
    unint64_t v63 = (int *)objc_msgSend(v60, sel_predicateForRecordsWithSortDateFromStartDateComponents_endDateComponents_, v61, v62);

    if (v125)
    {
      sub_22CFF4B64();
      uint64_t v64 = swift_allocObject();
      *(_OWORD *)(v64 + 16) = xmmword_22D2C2100;
      uint64_t v65 = v89;
      *(void *)(v64 + 32) = v89;
      *(void *)(v64 + 40) = v63;
      uint64_t v132 = v64;
      sub_22D2BCE20();
      sub_22D030474(0, &qword_26853E820);
      uint64_t v66 = v65;
      uint64_t v67 = v63;
      uint64_t v68 = (void *)sub_22D2BCDF0();
      swift_bridgeObjectRelease();
      unint64_t v63 = (int *)objc_msgSend(self, sel_andPredicateWithSubpredicates_, v68);
    }
    uint64_t v34 = v102;
    uint64_t v69 = *(void (**)(char *, uint64_t))(v109 + 8);
    uint64_t v70 = v110;
    v69(v58, v110);
    v69(v128, v70);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v130, v127);
    uint64_t v36 = v63;
    uint64_t v1 = v103;
  }
  uint64_t v125 = v36;
  uint64_t v71 = v1[1];
  id v72 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F0A678]), sel_initWithSampleType_predicate_, v71, v36);
  sub_22D229C70(0xD000000000000016, 0x800000022D2D6720, v71, 5, 1);
  sub_22CFF4B00(*v1 + 16, (uint64_t)&v132);
  __swift_project_boxed_opaque_existential_1(&v132, v133);
  sub_22CFF4B64();
  uint64_t v73 = swift_allocObject();
  *(_OWORD *)(v73 + 16) = xmmword_22D2BFBE0;
  *(void *)(v73 + 32) = v72;
  uint64_t v131 = v73;
  sub_22D2BCE20();
  id v74 = v72;
  long long v75 = v111;
  sub_22D2BCFA0();
  sub_22D0833DC(&qword_26853D790, MEMORY[0x263F44AA8]);
  uint64_t v76 = v113;
  uint64_t v77 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v75, v76);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v132);
  uint64_t v132 = v34;
  uint64_t v131 = v77;
  uint64_t v78 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D0834D0(0, &qword_26AEC1DC8, MEMORY[0x263EFDCF0]);
  sub_22CFF491C();
  sub_22D083560((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, v78);
  sub_22D0833DC(&qword_26853D780, (void (*)(uint64_t))sub_22CFF491C);
  swift_retain();
  swift_retain();
  uint64_t v79 = v117;
  sub_22D2BC470();
  uint64_t v80 = v116;
  sub_22D0835DC((uint64_t)v1, v116, (uint64_t (*)(void))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  unint64_t v81 = (*(unsigned __int8 *)(v114 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v114 + 80);
  unint64_t v82 = (v115 + v81 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v83 = swift_allocObject();
  sub_22D0838E8(v80, v83 + v81, (uint64_t (*)(void))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  *(void *)(v83 + v82) = v104;
  uint64_t v84 = swift_allocObject();
  *(void *)(v84 + 16) = sub_22D083798;
  *(void *)(v84 + 24) = v83;
  type metadata accessor for ClinicalSharingQueryOutput(0);
  sub_22D0833DC(&qword_26853E810, (void (*)(uint64_t))sub_22D0832DC);
  uint64_t v86 = v119;
  uint64_t v85 = v120;
  sub_22D2BC730();
  swift_release();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v79, v86);
  sub_22D0833DC(&qword_26853E818, (void (*)(uint64_t))sub_22D083424);
  uint64_t v87 = v105;
  uint64_t v39 = sub_22D2BC720();

  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v121 + 8))(v85, v87);
  return v39;
}

uint64_t sub_22D07AC1C()
{
  sub_22D08408C(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = &v13[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v4 = sub_22D2BBF00();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = &v13[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_22D1DA894(v0[2], v3);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    sub_22D084124((uint64_t)v3, (uint64_t (*)(void))sub_22D08408C);
    return MEMORY[0x263F8EE88];
  }
  else
  {
    uint64_t v9 = (*(uint64_t (**)(unsigned char *, void *, uint64_t))(v5 + 32))(v7, v3, v4);
    uint64_t v10 = *(void *)(*v0 + 56);
    MEMORY[0x270FA5388](v9);
    *(void *)&v13[-16] = v7;
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_22D22E468(MEMORY[0x263F8EE78], (void (*)(uint64_t *, char *))sub_22D05C90C, (uint64_t)&v13[-32], v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_22D237C78(v11);
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  }
  return v8;
}

uint64_t sub_22D07AE2C@<X0>(void (**a1)(void, void, void, void)@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  sub_22D0838B4(0);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for PBTypedData(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D07B060(a2, a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_22D084124((uint64_t)v10, (uint64_t (*)(void))sub_22D0838B4);
    uint64_t Output = type metadata accessor for ClinicalSharingQueryOutput(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(Output - 8) + 56))(a4, 1, 1, Output);
  }
  else
  {
    sub_22D0838E8((uint64_t)v10, (uint64_t)v14, type metadata accessor for PBTypedData);
    sub_22D0838E8((uint64_t)v14, a4, type metadata accessor for PBTypedData);
    uint64_t v17 = type metadata accessor for ClinicalSharingQueryOutput(0);
    *(void *)(a4 + *(int *)(v17 + 20)) = a3;
    uint64_t v18 = (void *)(a4 + *(int *)(v17 + 24));
    *uint64_t v18 = 0;
    v18[1] = 0;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(a4, 0, 1, v17);
    return swift_bridgeObjectRetain();
  }
}

uint64_t sub_22D07B060@<X0>(unint64_t a1@<X0>, void (**a2)(void, void, void, void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v257 = a3;
  uint64_t v5 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v249 = (uint64_t)&v229 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0840C0(0, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw, MEMORY[0x263F8D8F0]);
  uint64_t v9 = MEMORY[0x270FA5388](v8 - 8);
  uint64_t v252 = (uint64_t)&v229 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v250 = (uint64_t)&v229 - v11;
  uint64_t v12 = type metadata accessor for PBTimeSeries(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v243 = (uint64_t)&v229 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D083950(0);
  MEMORY[0x270FA5388](v14 - 8);
  uint64_t v248 = (uint64_t)&v229 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v260 = type metadata accessor for PBTypedData(0);
  uint64_t v256 = *(void *)(v260 - 8);
  MEMORY[0x270FA5388](v260);
  uint64_t v251 = (uint64_t)&v229 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v247 = type metadata accessor for PBDateRange(0);
  uint64_t v246 = *(void *)(v247 - 8);
  MEMORY[0x270FA5388](v247);
  uint64_t v258 = (uint64_t)&v229 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (int *)type metadata accessor for ClinicalSharingMedicalRecordsQuery();
  uint64_t v19 = MEMORY[0x270FA5388](v18);
  unint64_t v21 = (unint64_t)&v229 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  v240 = (char *)&v229 - v22;
  sub_22D0840C0(0, &qword_26853E830, (uint64_t (*)(uint64_t))sub_22D05C8D8, v7);
  uint64_t v24 = MEMORY[0x270FA5388](v23 - 8);
  uint64_t v272 = (char *)&v229 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  unint64_t v286 = (unint64_t)&v229 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v242 = (uint64_t)&v229 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v241 = (uint64_t)&v229 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v277 = (uint64_t)&v229 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v276 = (uint64_t)&v229 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  v294 = (uint64_t *)((char *)&v229 - v37);
  MEMORY[0x270FA5388](v36);
  uint64_t v289 = (uint64_t)&v229 - v38;
  uint64_t v298 = sub_22D2BBC30();
  uint64_t v259 = *(void *)(v298 - 8);
  uint64_t v39 = MEMORY[0x270FA5388](v298);
  char v239 = (char *)&v229 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  v238 = (char *)&v229 - v42;
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v45 = (char *)&v229 - v44;
  uint64_t v46 = MEMORY[0x270FA5388](v43);
  v292 = (char *)&v229 - v47;
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  v275 = (char *)&v229 - v49;
  MEMORY[0x270FA5388](v48);
  uint64_t v278 = (char *)&v229 - v50;
  sub_22D05C8D8(0);
  uint64_t v285 = v51;
  uint64_t v253 = *(void *)(v51 - 8);
  uint64_t v52 = MEMORY[0x270FA5388](v51);
  uint64_t v287 = (char *)&v229 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v236 = (uint64_t)&v229 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v262 = (uint64_t)&v229 - v57;
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v261 = (uint64_t)&v229 - v59;
  uint64_t v60 = MEMORY[0x270FA5388](v58);
  uint64_t v273 = (char *)&v229 - v61;
  uint64_t v62 = MEMORY[0x270FA5388](v60);
  v263 = (char *)&v229 - v63;
  uint64_t v64 = MEMORY[0x270FA5388](v62);
  v271 = (char *)&v229 - v65;
  uint64_t v66 = MEMORY[0x270FA5388](v64);
  uint64_t v235 = (uint64_t)&v229 - v67;
  uint64_t v68 = MEMORY[0x270FA5388](v66);
  uint64_t v234 = (uint64_t)&v229 - v69;
  uint64_t v70 = MEMORY[0x270FA5388](v68);
  v269 = (char *)&v229 - v71;
  uint64_t v72 = MEMORY[0x270FA5388](v70);
  uint64_t v268 = (char *)&v229 - v73;
  uint64_t v74 = MEMORY[0x270FA5388](v72);
  uint64_t v244 = (char *)&v229 - v75;
  uint64_t v76 = MEMORY[0x270FA5388](v74);
  v237 = (char *)&v229 - v77;
  uint64_t v78 = MEMORY[0x270FA5388](v76);
  uint64_t v265 = (uint64_t)&v229 - v79;
  uint64_t v80 = MEMORY[0x270FA5388](v78);
  uint64_t v264 = (uint64_t)&v229 - v81;
  uint64_t v82 = MEMORY[0x270FA5388](v80);
  uint64_t v84 = (char *)&v229 - v83;
  uint64_t v85 = MEMORY[0x270FA5388](v82);
  unint64_t v87 = (unint64_t)&v229 - v86;
  uint64_t v88 = MEMORY[0x270FA5388](v85);
  v281 = (char *)&v229 - v89;
  uint64_t v90 = MEMORY[0x270FA5388](v88);
  uint64_t j = (int *)((char *)&v229 - v91);
  uint64_t v92 = MEMORY[0x270FA5388](v90);
  uint64_t v280 = (uint64_t)&v229 - v93;
  uint64_t v94 = MEMORY[0x270FA5388](v92);
  uint64_t v96 = (uint64_t)&v229 - v95;
  uint64_t v97 = MEMORY[0x270FA5388](v94);
  uint64_t v297 = (uint64_t *)((char *)&v229 - v98);
  uint64_t v99 = MEMORY[0x270FA5388](v97);
  uint64_t v288 = (char *)&v229 - v100;
  MEMORY[0x270FA5388](v99);
  uint64_t v245 = (uint64_t)&v229 - v101;
  sub_22D05C844(0);
  uint64_t v103 = MEMORY[0x270FA5388](v102 - 8);
  uint64_t v104 = MEMORY[0x270FA5388](v103);
  unint64_t v106 = (unint64_t)&v229 - v105;
  MEMORY[0x270FA5388](v104);
  uint64_t v254 = (uint64_t)&v229 - v108;
  if (a1 >> 62) {
    goto LABEL_115;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_116:
    uint64_t v224 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v256 + 56);
    uint64_t v225 = v257;
    uint64_t v226 = v260;
    return v224(v225, 1, 1, v226);
  }
LABEL_3:
  uint64_t v232 = v107;
  uint64_t v293 = v45;
  uint64_t v233 = a2;
  unint64_t v290 = sub_22D0A9554(a1);
  if (!v290) {
    goto LABEL_124;
  }
  uint64_t v109 = v255;
  uint64_t v110 = v254;
  sub_22D0835DC(v255 + v18[7], v254, (uint64_t (*)(void))sub_22D05C844);
  sub_22D0835DC(v110, v106, (uint64_t (*)(void))sub_22D05C844);
  uint64_t v111 = sub_22D2BB6F0();
  uint64_t v230 = *(void *)(v111 - 8);
  uint64_t v112 = *(uint64_t (**)(unint64_t, uint64_t))(v230 + 48);
  uint64_t v231 = v111;
  int v113 = v112(v106, 1);
  uint64_t v114 = v109;
  sub_22D084124(v106, (uint64_t (*)(void))sub_22D05C844);
  uint64_t v115 = v292;
  if (v113 != 1) {
    goto LABEL_97;
  }
  unint64_t v21 = v290 & 0xFFFFFFFFFFFFFF8;
  v274 = v18;
  if (v290 >> 62)
  {
    swift_bridgeObjectRetain_n();
    a1 = sub_22D2BD470();
  }
  else
  {
    a1 = *(void *)((v290 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
  }
  uint64_t v45 = v293;
  unint64_t v291 = v21;
  uint64_t v295 = (int *)a1;
  if (a1)
  {
    unint64_t v106 = 0;
    unint64_t v296 = v290 & 0xC000000000000001;
    a2 = (void (**)(void, void, void, void))(v259 + 56);
    uint64_t v18 = (int *)(v259 + 48);
    while (1)
    {
      if (v296)
      {
        id v116 = (id)MEMORY[0x230F7AF90](v106, v290);
      }
      else
      {
        if (v106 >= *(void *)(v21 + 16)) {
          goto LABEL_112;
        }
        id v116 = *(id *)(v290 + 8 * v106 + 32);
      }
      uint64_t v117 = v116;
      unint64_t v21 = v106 + 1;
      if (__OFADD__(v106, 1)) {
        goto LABEL_111;
      }
      id v118 = objc_msgSend(v116, sel_sortDate);
      id v119 = objc_msgSend(v118, sel_date);

      sub_22D2BBC00();
      uint64_t v120 = v298;
      (*a2)(v96, 0, 1, v298);

      uint64_t v121 = (unsigned int (*)(void, void, void))v297;
      sub_22D0838E8(v96, (uint64_t)v297, (uint64_t (*)(void))sub_22D05C8D8);
      if ((*(unsigned int (**)(void, uint64_t, uint64_t))v18)(v121, 1, v120) != 1) {
        break;
      }
      sub_22D084124((uint64_t)v121, (uint64_t (*)(void))sub_22D05C8D8);
      ++v106;
      a1 = (unint64_t)v295;
      BOOL v122 = v21 == (void)v295;
      uint64_t v115 = v292;
      uint64_t v45 = v293;
      unint64_t v21 = v291;
      if (v122) {
        goto LABEL_18;
      }
    }
    uint64_t v124 = v289;
    sub_22D0838E8((uint64_t)v121, v289, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v123 = v253;
    uint64_t v125 = v285;
    v284 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56);
    v284(v124, 0, 1, v285);
    uint64_t v115 = v292;
    uint64_t v45 = v293;
    a1 = (unint64_t)v295;
  }
  else
  {
LABEL_18:
    uint64_t v123 = v253;
    uint64_t v124 = v289;
    uint64_t v125 = v285;
    v284 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v253 + 56);
    v284(v289, 1, 1, v285);
    unint64_t v21 = a1;
  }
  uint64_t v126 = v124;
  uint64_t v127 = (void (*)(void, void, void, void))v294;
  sub_22D083984(v126, (uint64_t)v294, &qword_26853E830, (uint64_t (*)(uint64_t))sub_22D05C8D8);
  uint64_t v282 = *(uint64_t (**)(void, void, void))(v123 + 48);
  uint64_t v283 = v123 + 48;
  int v128 = v282(v127, 1, v125);
  uint64_t v129 = v259;
  if (v128 == 1)
  {
    a2 = (void (**)(void, void, void, void))v288;
    v294 = *(void **)(v259 + 56);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v294)(v288, 1, 1, v298);
    uint64_t v130 = *(void **)(v129 + 48);
    uint64_t v131 = (v129 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    uint64_t v18 = v274;
  }
  else
  {
    uint64_t v132 = v280;
    sub_22D0838E8((uint64_t)v127, v280, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v133 = (void (*)(void, void, void))j;
    sub_22D0835DC(v132, (uint64_t)j, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v297 = *(void **)(v129 + 48);
    if (((unsigned int (*)(void, uint64_t, uint64_t))v297)(v133, 1, v298) == 1)
    {
LABEL_122:
      __break(1u);
      goto LABEL_123;
    }
    uint64_t v131 = (v129 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    uint64_t v134 = *(void (**)(char *, void, uint64_t))(v129 + 32);
    a2 = (void (**)(void, void, void, void))v288;
    uint64_t v135 = v133;
    uint64_t v136 = v129;
    uint64_t v137 = v298;
    v134(v288, v135, v298);
    sub_22D084124(v280, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v138 = v137;
    uint64_t v129 = v136;
    v294 = *(void **)(v136 + 56);
    ((void (*)(void, void, uint64_t, uint64_t))v294)(a2, 0, 1, v138);
    uint64_t v18 = v274;
    uint64_t v130 = v297;
  }
  unint64_t v296 = v131;
  uint64_t v297 = v130;
  if (((unsigned int (*)(void (**)(void, void, void, void), uint64_t, uint64_t))v130)(a2, 1, v298) != 1)
  {
    uint64_t v142 = v129 + 32;
    uint64_t j = *(int **)(v129 + 32);
    ((void (*)(char *, void (**)(void, void, void, void), uint64_t))j)(v278, a2, v298);
    uint64_t v96 = v290;
    uint64_t v288 = (char *)(v290 & 0xC000000000000001);
    uint64_t v289 = v142 + 24;
    uint64_t v270 = v253 + 56;
    uint64_t v280 = v142;
    v266 = (void (**)(void, void))(v142 - 24);
    for (i = v84; ; uint64_t v84 = i)
    {
      unint64_t v106 = (unint64_t)v281;
      if (v21 != a1) {
        break;
      }
LABEL_30:
      uint64_t v143 = v276;
      unint64_t v21 = a1;
      uint64_t v144 = v285;
      v284(v276, 1, 1, v285);
LABEL_41:
      uint64_t v150 = v143;
      uint64_t v151 = v277;
      sub_22D083984(v150, v277, &qword_26853E830, (uint64_t (*)(uint64_t))sub_22D05C8D8);
      if (v282(v151, 1, v144) == 1)
      {
        ((void (*)(unint64_t, uint64_t, uint64_t, uint64_t))v294)(v106, 1, 1, v298);
        a1 = (unint64_t)v295;
      }
      else
      {
        uint64_t v152 = v151;
        uint64_t v153 = v264;
        sub_22D0838E8(v152, v264, (uint64_t (*)(void))sub_22D05C8D8);
        uint64_t v154 = v265;
        sub_22D0835DC(v153, v265, (uint64_t (*)(void))sub_22D05C8D8);
        unsigned int v155 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v297)(v154, 1, v298);
        a1 = (unint64_t)v295;
        if (v155 == 1)
        {
          __break(1u);
LABEL_121:
          __break(1u);
          goto LABEL_122;
        }
        unint64_t v106 = (unint64_t)v281;
        uint64_t v156 = v298;
        ((void (*)(void))j)();
        sub_22D084124(v153, (uint64_t (*)(void))sub_22D05C8D8);
        ((void (*)(unint64_t, void, uint64_t, uint64_t))v294)(v106, 0, 1, v156);
      }
      uint64_t v18 = v274;
      if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v297)(v106, 1, v298) == 1)
      {
        swift_bridgeObjectRelease();
        sub_22D084124(v106, (uint64_t (*)(void))sub_22D05C8D8);
        uint64_t v141 = v245;
        ((void (*)(uint64_t, char *, uint64_t))j)(v245, v278, v298);
        uint64_t v140 = 0;
        goto LABEL_49;
      }
      unint64_t v157 = v106;
      uint64_t v158 = v275;
      a2 = (void (**)(void, void, void, void))v298;
      uint64_t v159 = (void (*)(void, void, void))j;
      ((void (*)(char *, unint64_t, uint64_t))j)(v275, v157, v298);
      sub_22D0833DC((unint64_t *)&qword_26853E1D8, MEMORY[0x263F07490]);
      uint64_t v18 = (int *)v278;
      char v160 = sub_22D2BCB70();
      unint64_t v161 = *v266;
      if (v160)
      {
        v161(v18, a2);
        v159(v18, v158, a2);
      }
      else
      {
        v161(v158, a2);
      }
      uint64_t v96 = v290;
    }
    while (1)
    {
      if (v288)
      {
        id v145 = (id)MEMORY[0x230F7AF90](v21, v96);
      }
      else
      {
        if ((v21 & 0x8000000000000000) != 0)
        {
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
LABEL_109:
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          uint64_t v232 = v107;
          swift_bridgeObjectRetain();
          uint64_t v223 = sub_22D2BD470();
          swift_bridgeObjectRelease();
          uint64_t v107 = v232;
          if (!v223) {
            goto LABEL_116;
          }
          goto LABEL_3;
        }
        if (v21 >= *(void *)(v291 + 16)) {
          goto LABEL_107;
        }
        id v145 = *(id *)(v96 + 8 * v21 + 32);
      }
      uint64_t v146 = v145;
      uint64_t v18 = (int *)(v21 + 1);
      if (__OFADD__(v21, 1)) {
        goto LABEL_106;
      }
      id v147 = objc_msgSend(v145, sel_sortDate);
      id v148 = objc_msgSend(v147, sel_date);

      sub_22D2BBC00();
      a2 = (void (**)(void, void, void, void))v298;
      ((void (*)(char *, void, uint64_t, uint64_t))v294)(v84, 0, 1, v298);

      sub_22D0838E8((uint64_t)v84, v87, (uint64_t (*)(void))sub_22D05C8D8);
      if (((unsigned int (*)(unint64_t, uint64_t, void (**)(void, void, void, void)))v297)(v87, 1, a2) != 1)
      {
        uint64_t v149 = v276;
        sub_22D0838E8(v87, v276, (uint64_t (*)(void))sub_22D05C8D8);
        uint64_t v144 = v285;
        v284(v149, 0, 1, v285);
        ++v21;
        uint64_t v143 = v149;
        uint64_t v115 = v292;
        uint64_t v45 = v293;
        goto LABEL_41;
      }
      sub_22D084124(v87, (uint64_t (*)(void))sub_22D05C8D8);
      ++v21;
      a1 = (unint64_t)v295;
      uint64_t v115 = v292;
      uint64_t v45 = v293;
      if (v18 == v295) {
        goto LABEL_30;
      }
    }
  }
  unint64_t v139 = v290;
  swift_bridgeObjectRelease();
  sub_22D084124((uint64_t)a2, (uint64_t (*)(void))sub_22D05C8D8);
  uint64_t v96 = v139;
  uint64_t v140 = 1;
  uint64_t v141 = v245;
LABEL_49:
  a1 = 1;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v294)(v141, v140, 1, v298);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  unint64_t v21 = v291;
  unint64_t v87 = (unint64_t)v295;
  if (v295)
  {
    unint64_t v106 = 0;
    a2 = (void (**)(void, void, void, void))(v96 & 0xC000000000000001);
    uint64_t v96 = v298;
    while (1)
    {
      if (a2)
      {
        uint64_t v162 = (char *)MEMORY[0x230F7AF90](v106, v290);
      }
      else
      {
        if (v106 >= *(void *)(v21 + 16)) {
          goto LABEL_114;
        }
        uint64_t v162 = (char *)*(id *)(v290 + 8 * v106 + 32);
      }
      uint64_t v84 = v162;
      unint64_t v87 = v106 + 1;
      if (__OFADD__(v106, 1)) {
        goto LABEL_113;
      }
      id v163 = objc_msgSend(v162, sel_sortDate);
      id v164 = objc_msgSend(v163, sel_date);

      a1 = (unint64_t)v269;
      sub_22D2BBC00();

      ((void (*)(unint64_t, void, uint64_t, uint64_t))v294)(a1, 0, 1, v96);
      uint64_t v84 = v268;
      sub_22D0838E8(a1, (uint64_t)v268, (uint64_t (*)(void))sub_22D05C8D8);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v297)(v84, 1, v96) != 1)
      {
        uint64_t v165 = v241;
        sub_22D0838E8((uint64_t)v84, v241, (uint64_t (*)(void))sub_22D05C8D8);
        a1 = 0;
        uint64_t v115 = v292;
        uint64_t v45 = v293;
        goto LABEL_61;
      }
      sub_22D084124((uint64_t)v84, (uint64_t (*)(void))sub_22D05C8D8);
      ++v106;
      uint64_t v45 = v293;
      if ((int *)v87 == v295)
      {
        unint64_t v87 = (unint64_t)v295;
        a1 = 1;
        uint64_t v115 = v292;
        break;
      }
    }
  }
  uint64_t v165 = v241;
LABEL_61:
  uint64_t v166 = v285;
  uint64_t v280 = v253 + 56;
  v284(v165, a1, 1, v285);
  uint64_t v167 = v242;
  sub_22D083984(v165, v242, &qword_26853E830, (uint64_t (*)(uint64_t))sub_22D05C8D8);
  int v168 = v282(v167, 1, v166);
  uint64_t v169 = 1;
  uint64_t v170 = v259;
  a1 = v286;
  unint64_t v21 = (unint64_t)v287;
  unint64_t v106 = (unint64_t)v263;
  if (v168 == 1) {
    goto LABEL_64;
  }
  uint64_t v171 = v234;
  sub_22D0838E8(v167, v234, (uint64_t (*)(void))sub_22D05C8D8);
  uint64_t v172 = v235;
  sub_22D0835DC(v171, v235, (uint64_t (*)(void))sub_22D05C8D8);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v297)(v172, 1, v298) == 1)
  {
LABEL_123:
    __break(1u);
LABEL_124:
    sub_22D0835DC(v255, v21, (uint64_t (*)(void))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
    unint64_t v299 = 0;
    unint64_t v300 = 0xE000000000000000;
    sub_22D2BD310();
    swift_bridgeObjectRelease();
    unint64_t v299 = 0xD000000000000023;
    unint64_t v300 = 0x800000022D2D5980;
    id v227 = *(id *)(v21 + 8);
    id v228 = objc_msgSend(v227, sel_description);
    sub_22D2BCBD0();

    sub_22D2BCCB0();
    swift_bridgeObjectRelease();
    uint64_t result = sub_22D2BD460();
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v170 + 32))(v244, v172, v298);
  sub_22D084124(v171, (uint64_t (*)(void))sub_22D05C8D8);
  uint64_t v169 = 0;
LABEL_64:
  uint64_t v173 = v170;
  uint64_t v174 = v170 + 56;
  uint64_t v175 = (uint64_t)v244;
  uint64_t v96 = v298;
  uint64_t v289 = v174;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v294)(v244, v169, 1, v298);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v297)(v175, 1, v96) == 1)
  {
    swift_bridgeObjectRelease();
    sub_22D084124(v175, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v176 = 1;
    uint64_t v177 = (uint64_t)v237;
  }
  else
  {
    uint64_t v288 = *(char **)(v173 + 32);
    ((void (*)(char *, uint64_t, uint64_t))v288)(v115, v175, v298);
    uint64_t v18 = (int *)(v290 & 0xC000000000000001);
    v281 = (char *)(v173 + 32);
    uint64_t v278 = (char *)(v173 + 8);
    a2 = (void (**)(void, void, void, void))v272;
    uint64_t v84 = v273;
    for (j = (int *)(v290 & 0xC000000000000001); ; uint64_t v18 = j)
    {
      if ((int *)v87 == v295)
      {
LABEL_70:
        uint64_t v178 = v285;
        v284(a1, 1, 1, v285);
        unint64_t v87 = (unint64_t)v295;
      }
      else
      {
        while (1)
        {
          if (v18)
          {
            id v179 = (id)MEMORY[0x230F7AF90](v87, v290);
          }
          else
          {
            if ((v87 & 0x8000000000000000) != 0) {
              goto LABEL_108;
            }
            if (v87 >= *(void *)(v291 + 16)) {
              goto LABEL_110;
            }
            id v179 = *(id *)(v290 + 8 * v87 + 32);
          }
          uint64_t v180 = v179;
          unint64_t v21 = v87 + 1;
          if (__OFADD__(v87, 1)) {
            goto LABEL_109;
          }
          id v181 = objc_msgSend(v179, sel_sortDate);
          id v182 = objc_msgSend(v181, sel_date);

          sub_22D2BBC00();
          uint64_t v183 = v298;
          ((void (*)(char *, void, uint64_t, uint64_t))v294)(v84, 0, 1, v298);

          sub_22D0838E8((uint64_t)v84, v106, (uint64_t (*)(void))sub_22D05C8D8);
          if (((unsigned int (*)(unint64_t, uint64_t, uint64_t))v297)(v106, 1, v183) != 1) {
            break;
          }
          sub_22D084124(v106, (uint64_t (*)(void))sub_22D05C8D8);
          ++v87;
          BOOL v122 = v21 == (void)v295;
          a1 = v286;
          unint64_t v21 = (unint64_t)v287;
          uint64_t v115 = v292;
          uint64_t v45 = v293;
          if (v122) {
            goto LABEL_70;
          }
        }
        a1 = v286;
        sub_22D0838E8(v106, v286, (uint64_t (*)(void))sub_22D05C8D8);
        uint64_t v178 = v285;
        v284(a1, 0, 1, v285);
        ++v87;
        unint64_t v21 = (unint64_t)v287;
        uint64_t v115 = v292;
        uint64_t v45 = v293;
      }
      sub_22D083984(a1, (uint64_t)a2, &qword_26853E830, (uint64_t (*)(uint64_t))sub_22D05C8D8);
      if (v282(a2, 1, v178) == 1)
      {
        uint64_t v184 = v271;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v294)(v271, 1, 1, v298);
      }
      else
      {
        uint64_t v185 = v261;
        sub_22D0838E8((uint64_t)a2, v261, (uint64_t (*)(void))sub_22D05C8D8);
        uint64_t v186 = v262;
        sub_22D0835DC(v185, v262, (uint64_t (*)(void))sub_22D05C8D8);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v297)(v186, 1, v298) == 1) {
          goto LABEL_121;
        }
        uint64_t v187 = v271;
        uint64_t v188 = v186;
        uint64_t v189 = v298;
        ((void (*)(char *, uint64_t, uint64_t))v288)(v271, v188, v298);
        uint64_t v190 = v185;
        uint64_t v184 = v187;
        sub_22D084124(v190, (uint64_t (*)(void))sub_22D05C8D8);
        ((void (*)(char *, void, uint64_t, uint64_t))v294)(v187, 0, 1, v189);
        unint64_t v106 = (unint64_t)v263;
      }
      unsigned int v191 = ((uint64_t (*)(char *, uint64_t, uint64_t))v297)(v184, 1, v298);
      uint64_t v192 = (uint64_t)v184;
      uint64_t v84 = v273;
      if (v191 == 1) {
        break;
      }
      uint64_t v96 = (uint64_t)v281;
      uint64_t v193 = (void (*)(char *, char *, uint64_t))v288;
      ((void (*)(char *, uint64_t, uint64_t))v288)(v45, v192, v298);
      sub_22D0833DC((unint64_t *)&qword_26853E1D8, MEMORY[0x263F07490]);
      char v194 = sub_22D2BCB70();
      uint64_t v195 = *(void (**)(char *, uint64_t))v278;
      if (v194)
      {
        uint64_t v196 = v298;
        v195(v115, v298);
        v193(v115, v45, v196);
      }
      else
      {
        v195(v45, v298);
      }
      a2 = (void (**)(void, void, void, void))v272;
    }
    swift_bridgeObjectRelease();
    sub_22D084124(v192, (uint64_t (*)(void))sub_22D05C8D8);
    uint64_t v177 = (uint64_t)v237;
    ((void (*)(char *, char *, uint64_t))v288)(v237, v115, v298);
    uint64_t v176 = 0;
    uint64_t v18 = v274;
  }
  uint64_t v197 = v298;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v294)(v177, v176, 1, v298);
  swift_bridgeObjectRelease();
  uint64_t v198 = v245;
  uint64_t v199 = v236;
  sub_22D0835DC(v245, v236, (uint64_t (*)(void))sub_22D05C8D8);
  uint64_t v200 = (unsigned int (*)(unint64_t, uint64_t, uint64_t))v297;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v297)(v199, 1, v197) == 1)
  {
    sub_22D2BBB50();
    sub_22D084124(v199, (uint64_t (*)(void))sub_22D05C8D8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v259 + 32))(v238, v199, v298);
  }
  uint64_t v114 = v255;
  uint64_t v201 = v240;
  uint64_t v202 = v239;
  sub_22D0835DC(v177, v21, (uint64_t (*)(void))sub_22D05C8D8);
  sub_22D0835DC(v114, (uint64_t)v201, (uint64_t (*)(void))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  if (v200(v21, 1, v298) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v259 + 16))(v202, *v201 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date, v298);
    sub_22D084124(v21, (uint64_t (*)(void))sub_22D05C8D8);
  }
  else
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v259 + 32))(v202, v21, v298);
  }
  sub_22D084124((uint64_t)v201, (uint64_t (*)(void))type metadata accessor for ClinicalSharingMedicalRecordsQuery);
  uint64_t v203 = v232;
  sub_22D2BB6A0();
  sub_22D084124(v177, (uint64_t (*)(void))sub_22D05C8D8);
  sub_22D084124(v198, (uint64_t (*)(void))sub_22D05C8D8);
  uint64_t v110 = v254;
  sub_22D084124(v254, (uint64_t (*)(void))sub_22D05C844);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v230 + 56))(v203, 0, 1, v231);
  sub_22D0838E8(v203, v110, (uint64_t (*)(void))sub_22D05C844);
LABEL_97:
  uint64_t v204 = v258;
  sub_22D22BA04(5, 1, v110);
  uint64_t v205 = v204;
  uint64_t v206 = v248;
  sub_22D0835DC(v205, v248, type metadata accessor for PBDateRange);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v246 + 56))(v206, 0, 1, v247);
  uint64_t v207 = v251;
  sub_22D07D598(v206, v251);
  sub_22D084124(v206, (uint64_t (*)(void))sub_22D083950);
  int v208 = *(unsigned __int8 *)(v114 + v18[8]);
  if (v208 == 4)
  {
    sub_22D07DA04(v290, (uint64_t)v233, *(void **)(v114 + 8), v249);
    swift_bridgeObjectRelease();
    uint64_t v209 = *(int *)(v260 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v210 = swift_retain();
      *(void *)(v207 + v209) = sub_22D0040E0(v210);
      swift_release();
    }
    uint64_t v211 = *(void *)(v207 + v209);
    uint64_t v212 = v250;
    sub_22D0838E8(v249, v250, type metadata accessor for PBAllClinicalRecords);
    uint64_t v213 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  }
  else
  {
    uint64_t v214 = v243;
    sub_22D0C32A8(v290, *(void **)(v114 + 8), v208, v243);
    swift_bridgeObjectRelease();
    uint64_t v215 = *(int *)(v260 + 20);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v216 = swift_retain();
      *(void *)(v207 + v215) = sub_22D0040E0(v216);
      swift_release();
    }
    uint64_t v211 = *(void *)(v207 + v215);
    uint64_t v217 = v214;
    uint64_t v212 = v250;
    sub_22D0838E8(v217, v250, type metadata accessor for PBTimeSeries);
    uint64_t v213 = type metadata accessor for PBTypedData.OneOf_Raw(0);
  }
  swift_storeEnumTagMultiPayload();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v213 - 8) + 56))(v212, 0, 1, v213);
  uint64_t v218 = v212;
  uint64_t v219 = v252;
  sub_22D083984(v218, v252, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  uint64_t v220 = v211
       + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__raw;
  swift_beginAccess();
  swift_retain();
  sub_22D083E7C(v219, v220, &qword_26853D9D8, type metadata accessor for PBTypedData.OneOf_Raw);
  swift_endAccess();
  swift_release();
  sub_22D084124(v258, type metadata accessor for PBDateRange);
  sub_22D084124(v110, (uint64_t (*)(void))sub_22D05C844);
  uint64_t v221 = v257;
  sub_22D0838E8(v207, v257, type metadata accessor for PBTypedData);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v256 + 56))(v221, 0, 1, v260);
}

uint64_t sub_22D07D598@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v34 = a1;
  sub_22D083950(0);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v33 = (uint64_t)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v31 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v31 - v10;
  uint64_t v12 = type metadata accessor for PBDateRange(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v32 = (uint64_t)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v31 - v16;
  sub_22D2BBFE0();
  uint64_t v18 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  if (qword_26853CCD0 != -1) {
    swift_once();
  }
  *(void *)(a2 + v18) = qword_26853D990;
  uint64_t v19 = 106;
  switch(*(unsigned char *)(v2 + *(int *)(type metadata accessor for ClinicalSharingMedicalRecordsQuery() + 32)))
  {
    case 1:
      uint64_t v19 = 107;
      break;
    case 2:
      uint64_t v19 = 108;
      break;
    case 3:
      uint64_t v19 = 110;
      break;
    case 4:
      unint64_t v20 = *(void *)(v2 + 16) - 1;
      if (v20 > 5) {
        uint64_t v19 = 0;
      }
      else {
        uint64_t v19 = qword_22D2C21E0[v20];
      }
      break;
    default:
      break;
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBTypedData._StorageClass(0);
    swift_allocObject();
    uint64_t v21 = swift_retain();
    *(void *)(a2 + v18) = sub_22D0040E0(v21);
    swift_release();
  }
  uint64_t v22 = *(void *)(a2 + v18);
  swift_beginAccess();
  *(void *)(v22 + 16) = v19;
  *(unsigned char *)(v22 + 24) = 1;
  sub_22D0835DC(v34, (uint64_t)v11, (uint64_t (*)(void))sub_22D083950);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    uint64_t v23 = (uint64_t (*)(void))sub_22D083950;
    uint64_t v24 = (uint64_t)v11;
  }
  else
  {
    sub_22D0838E8((uint64_t)v11, (uint64_t)v17, type metadata accessor for PBDateRange);
    uint64_t v25 = v32;
    sub_22D0835DC((uint64_t)v17, v32, type metadata accessor for PBDateRange);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBTypedData._StorageClass(0);
      swift_allocObject();
      uint64_t v26 = swift_retain();
      *(void *)(a2 + v18) = sub_22D0040E0(v26);
      swift_release();
    }
    uint64_t v27 = *(void *)(a2 + v18);
    sub_22D0838E8(v25, (uint64_t)v9, type metadata accessor for PBDateRange);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v9, 0, 1, v12);
    uint64_t v28 = v33;
    sub_22D0838E8((uint64_t)v9, v33, (uint64_t (*)(void))sub_22D083950);
    uint64_t v29 = v27
        + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
    swift_beginAccess();
    swift_retain();
    sub_22D083F60(v28, v29);
    swift_endAccess();
    swift_release();
    uint64_t v23 = type metadata accessor for PBDateRange;
    uint64_t v24 = (uint64_t)v17;
  }
  return sub_22D084124(v24, v23);
}

uint64_t sub_22D07DA04@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for PBAllClinicalRecords(0);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (uint64_t *)&v30[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v12 = sub_22D0A9518(a1);
    if (v12) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    *uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v14 = sub_22D2BBFE0();
    MEMORY[0x270FA5388](v14);
    uint64_t v15 = &v30[-32];
    uint64_t v28 = v4;
    uint64_t v29 = a2;
    uint64_t v16 = (void (*)(void **))sub_22D083E44;
LABEL_26:
    uint64_t v25 = sub_22D083A0C(v13, v16, (uint64_t)v15);
    swift_bridgeObjectRelease();
    *uint64_t v11 = v25;
    sub_22D0838E8((uint64_t)v11, a4, type metadata accessor for PBAllClinicalRecords);
    return swift_bridgeObjectRelease();
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v17 = sub_22D0A9524(a1);
    if (v17) {
      uint64_t v13 = v17;
    }
    else {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    *uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v18 = sub_22D2BBFE0();
    MEMORY[0x270FA5388](v18);
    uint64_t v15 = &v30[-32];
    uint64_t v28 = v4;
    uint64_t v29 = a2;
    uint64_t v16 = (void (*)(void **))sub_22D083E3C;
    goto LABEL_26;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v19 = sub_22D0A9530(a1);
    if (v19) {
      uint64_t v13 = v19;
    }
    else {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    *uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v20 = sub_22D2BBFE0();
    MEMORY[0x270FA5388](v20);
    uint64_t v15 = &v30[-32];
    uint64_t v28 = v4;
    uint64_t v29 = a2;
    uint64_t v16 = (void (*)(void **))sub_22D083E34;
    goto LABEL_26;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v21 = sub_22D0A953C(a1);
    if (v21) {
      uint64_t v13 = v21;
    }
    else {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    *uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v22 = sub_22D2BBFE0();
    MEMORY[0x270FA5388](v22);
    uint64_t v15 = &v30[-32];
    uint64_t v28 = v4;
    uint64_t v29 = a2;
    uint64_t v16 = (void (*)(void **))sub_22D083E2C;
    goto LABEL_26;
  }
  self;
  if (swift_dynamicCastObjCClass())
  {
    uint64_t v23 = sub_22D0A9548(a1);
    if (v23) {
      uint64_t v13 = v23;
    }
    else {
      uint64_t v13 = MEMORY[0x263F8EE78];
    }
    *uint64_t v11 = MEMORY[0x263F8EE78];
    uint64_t v24 = sub_22D2BBFE0();
    MEMORY[0x270FA5388](v24);
    uint64_t v15 = &v30[-32];
    uint64_t v28 = v4;
    uint64_t v29 = a2;
    uint64_t v16 = (void (*)(void **))sub_22D083A04;
    goto LABEL_26;
  }
  unint64_t v31 = 0;
  unint64_t v32 = 0xE000000000000000;
  sub_22D2BD310();
  swift_bridgeObjectRelease();
  unint64_t v31 = 0xD000000000000019;
  unint64_t v32 = 0x800000022D2D6780;
  id v27 = objc_msgSend(a3, sel_description);
  sub_22D2BCBD0();

  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  uint64_t result = sub_22D2BD460();
  __break(1u);
  return result;
}

uint64_t sub_22D07DE40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D0840C0(0, &qword_26853E838, type metadata accessor for PBHKInspectableValue, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v55 - v8;
  uint64_t v10 = type metadata accessor for PBHKInspectableValue(0);
  uint64_t v56 = *(void *)(v10 - 8);
  uint64_t v57 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  v55[0] = (uint64_t)v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v55 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)v55 - v16;
  sub_22D2BBFE0();
  uint64_t v18 = *(int *)(type metadata accessor for PBHKInspectableValueCollection(0) + 20);
  if (qword_26853D0F8 != -1) {
    swift_once();
  }
  *(void *)(a2 + v18) = qword_268540490;
  swift_retain();
  id v58 = a1;
  sub_22D0AE464((uint64_t)&v60);
  uint64_t v19 = v60;
  char v20 = v61;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
    swift_allocObject();
    uint64_t v21 = swift_retain();
    *(void *)(a2 + v18) = sub_22D18F1A0(v21);
    swift_release();
  }
  uint64_t v22 = *(void *)(a2 + v18);
  swift_beginAccess();
  *(void *)(v22 + 16) = v19;
  *(unsigned char *)(v22 + 24) = v20;
  id v23 = v58;
  id v24 = objc_msgSend(v58, sel_inspectableValue);
  if (v24)
  {
    uint64_t v25 = v24;
    sub_22D07E630(v24, (uint64_t)v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      uint64_t v26 = swift_retain();
      *(void *)(a2 + v18) = sub_22D18F1A0(v26);
      swift_release();
    }
    uint64_t v27 = *(void *)(a2 + v18);
    sub_22D0838E8((uint64_t)v17, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v9, 0, 1, v57);
    sub_22D083984((uint64_t)v9, (uint64_t)v7, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    uint64_t v28 = v27
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__value;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C((uint64_t)v7, v28, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    swift_endAccess();

    swift_release();
    id v23 = v58;
  }
  id v29 = objc_msgSend(v23, sel_min);
  uint64_t v30 = v55[1];
  if (v29)
  {
    unint64_t v31 = v29;
    sub_22D07E630(v29, (uint64_t)v15);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      uint64_t v32 = swift_retain();
      *(void *)(a2 + v18) = sub_22D18F1A0(v32);
      swift_release();
    }
    uint64_t v33 = *(void *)(a2 + v18);
    sub_22D0838E8((uint64_t)v15, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v9, 0, 1, v57);
    sub_22D083984((uint64_t)v9, (uint64_t)v7, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    uint64_t v34 = v33
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__min;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C((uint64_t)v7, v34, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    swift_endAccess();

    swift_release();
    id v23 = v58;
  }
  id v35 = objc_msgSend(v23, sel_max);
  if (v35)
  {
    uint64_t v36 = v35;
    uint64_t v37 = v55[0];
    sub_22D07E630(v35, v55[0]);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      uint64_t v38 = swift_retain();
      *(void *)(a2 + v18) = sub_22D18F1A0(v38);
      swift_release();
    }
    uint64_t v39 = *(void *)(a2 + v18);
    sub_22D0838E8(v37, (uint64_t)v9, type metadata accessor for PBHKInspectableValue);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v9, 0, 1, v57);
    sub_22D083984((uint64_t)v9, (uint64_t)v7, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    uint64_t v40 = v39
        + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__max;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C((uint64_t)v7, v40, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
    swift_endAccess();

    swift_release();
    id v23 = v58;
  }
  id v41 = objc_msgSend(v23, sel_inspectableValues);
  if (v41)
  {
    uint64_t v42 = v41;
    sub_22D030474(0, &qword_26853E840);
    unint64_t v43 = sub_22D2BCE00();

    MEMORY[0x270FA5388](v44);
    v55[-2] = v30;
    uint64_t v45 = sub_22D29C7B4((void (*)(id *))sub_22D083E4C, (uint64_t)&v55[-4], v43, (uint64_t)v59);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
      swift_allocObject();
      uint64_t v46 = swift_retain();
      *(void *)(a2 + v18) = sub_22D18F1A0(v46);
      swift_release();
    }
    uint64_t v47 = (uint64_t *)(*(void *)(a2 + v18)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__inspectableValues);
    swift_beginAccess();
    *uint64_t v47 = v45;
    swift_bridgeObjectRelease();
  }
  id v48 = objc_msgSend(v23, sel_unitString);
  uint64_t v49 = sub_22D2BCBD0();
  uint64_t v51 = v50;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValueCollection._StorageClass(0);
    swift_allocObject();
    uint64_t v52 = swift_retain();
    *(void *)(a2 + v18) = sub_22D18F1A0(v52);
    swift_release();
  }
  uint64_t v53 = (uint64_t *)(*(void *)(a2 + v18)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon30PBHKInspectableValueCollectionP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unitString);
  swift_beginAccess();
  *uint64_t v53 = v49;
  v53[1] = v51;
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D07E630@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0840C0(0, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v252 = (uint64_t)&v224 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v251 = (uint64_t)&v224 - v8;
  uint64_t v250 = type metadata accessor for PBHKConcept(0);
  uint64_t v249 = *(void *)(v250 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v250);
  uint64_t v235 = (uint64_t)&v224 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v236 = (uint64_t)&v224 - v11;
  sub_22D083EFC(0);
  MEMORY[0x270FA5388](v12 - 8);
  uint64_t v244 = (char *)&v224 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v253 = sub_22D2BB8E0();
  uint64_t v247 = *(void *)(v253 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v253);
  uint64_t v243 = (char *)&v224 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v246 = (char *)&v224 - v16;
  sub_22D083950(0);
  uint64_t v18 = MEMORY[0x270FA5388](v17 - 8);
  uint64_t v231 = (uint64_t)&v224 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  uint64_t v230 = (uint64_t)&v224 - v20;
  sub_22D05C8D8(0);
  uint64_t v22 = MEMORY[0x270FA5388](v21 - 8);
  uint64_t v233 = (char *)&v224 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v226 = (char *)&v224 - v25;
  MEMORY[0x270FA5388](v24);
  uint64_t v225 = (char *)&v224 - v26;
  uint64_t v229 = type metadata accessor for PBDateRange(0);
  uint64_t v228 = *(void *)(v229 - 8);
  MEMORY[0x270FA5388](v229);
  id v227 = (char *)&v224 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v245 = sub_22D2BBC30();
  uint64_t v248 = *(void *)(v245 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v245);
  uint64_t v234 = (char *)&v224 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v242 = (char *)&v224 - v30;
  sub_22D0840C0(0, &qword_26853E858, type metadata accessor for PBHKRatioValue, v4);
  uint64_t v32 = MEMORY[0x270FA5388](v31 - 8);
  uint64_t v241 = (uint64_t)&v224 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v240 = (uint64_t)&v224 - v34;
  uint64_t v239 = type metadata accessor for PBHKRatioValue(0);
  uint64_t v238 = *(void *)(v239 - 8);
  MEMORY[0x270FA5388](v239);
  uint64_t v36 = (uint64_t *)((char *)&v224 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_22D0840C0(0, &qword_26853E860, type metadata accessor for PBHKCodedQuantity, v4);
  uint64_t v38 = MEMORY[0x270FA5388](v37 - 8);
  uint64_t v40 = (char *)&v224 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v38);
  uint64_t v42 = (char *)&v224 - v41;
  uint64_t v43 = type metadata accessor for PBHKCodedQuantity(0);
  uint64_t v255 = *(void *)(v43 - 8);
  MEMORY[0x270FA5388](v43);
  uint64_t v237 = (uint64_t)&v224 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v45 = *(int *)(type metadata accessor for PBHKInspectableValue(0) + 20);
  if (qword_26853D108 != -1) {
    swift_once();
  }
  *(void *)(a2 + v45) = qword_2685404B0;
  swift_retain();
  id v256 = a1;
  sub_22D0CA6E0((uint64_t)&v258);
  uint64_t v46 = v258;
  char v47 = v259;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    uint64_t v48 = swift_retain();
    *(void *)(a2 + v45) = sub_22D191804(v48);
    swift_release();
  }
  uint64_t v49 = *(void *)(a2 + v45);
  swift_beginAccess();
  *(void *)(v49 + 16) = v46;
  *(unsigned char *)(v49 + 24) = v47;
  id v50 = v256;
  id v51 = objc_msgSend(v256, sel_stringValue);
  if (v51)
  {
    uint64_t v52 = v51;
    uint64_t v232 = v42;
    uint64_t v53 = v43;
    uint64_t v54 = v36;
    uint64_t v55 = v40;
    uint64_t v56 = sub_22D2BCBD0();
    uint64_t v58 = v57;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v59 = swift_retain();
      id v50 = v256;
      *(void *)(a2 + v45) = sub_22D191804(v59);
      swift_release();
    }
    uint64_t v60 = *(void *)(a2 + v45);
    swift_beginAccess();
    *(void *)(v60 + 32) = v56;
    *(void *)(v60 + 40) = v58;
    swift_bridgeObjectRelease();
    uint64_t v40 = v55;
    uint64_t v36 = v54;
    uint64_t v43 = v53;
    uint64_t v42 = v232;
  }
  id v61 = objc_msgSend(v50, sel_codedQuantityValue);
  uint64_t v62 = v45;
  if (v61)
  {
    uint64_t v63 = v61;
    uint64_t v64 = v237;
    sub_22D080330(v61, v237);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v65 = swift_retain();
      *(void *)(a2 + v62) = sub_22D191804(v65);
      swift_release();
    }
    uint64_t v66 = *(void *)(a2 + v62);
    sub_22D0838E8(v64, (uint64_t)v42, type metadata accessor for PBHKCodedQuantity);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v255 + 56))(v42, 0, 1, v43);
    sub_22D083984((uint64_t)v42, (uint64_t)v40, &qword_26853E860, type metadata accessor for PBHKCodedQuantity);
    uint64_t v67 = v66
        + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__codedQuantity;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C((uint64_t)v40, v67, &qword_26853E860, type metadata accessor for PBHKCodedQuantity);
    swift_endAccess();

    swift_release();
    id v50 = v256;
  }
  id v68 = objc_msgSend(v50, sel_ratioValue);
  uint64_t v255 = v62;
  uint64_t v69 = v246;
  uint64_t v70 = v245;
  if (v68)
  {
    uint64_t v71 = v68;
    uint64_t v72 = v239;
    sub_22D2BBFE0();
    id v73 = objc_msgSend(v71, sel_numerator);
    id v74 = objc_msgSend(v73, sel_localizedValue);

    uint64_t v75 = sub_22D2BCBD0();
    uint64_t v77 = v76;

    uint64_t *v36 = v75;
    v36[1] = v77;
    id v78 = objc_msgSend(v71, sel_denominator);
    uint64_t v79 = v255;
    id v80 = objc_msgSend(v78, sel_localizedValue);

    uint64_t v81 = sub_22D2BCBD0();
    uint64_t v83 = v82;

    long long v36[2] = v81;
    void v36[3] = v83;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v84 = swift_retain();
      *(void *)(a2 + v79) = sub_22D191804(v84);
      swift_release();
    }
    uint64_t v85 = *(void *)(a2 + v79);
    uint64_t v86 = v240;
    sub_22D0838E8((uint64_t)v36, v240, type metadata accessor for PBHKRatioValue);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v238 + 56))(v86, 0, 1, v72);
    uint64_t v87 = v86;
    uint64_t v88 = v241;
    sub_22D083984(v87, v241, &qword_26853E858, type metadata accessor for PBHKRatioValue);
    uint64_t v89 = v85
        + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__ratioValue;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C(v88, v89, &qword_26853E858, type metadata accessor for PBHKRatioValue);
    swift_endAccess();

    swift_release();
    id v50 = v256;
  }
  id v90 = objc_msgSend(v50, sel_medicalDateValue);
  uint64_t v91 = v253;
  if (v90)
  {
    uint64_t v92 = v90;
    uint64_t v93 = v69;
    uint64_t v94 = *v254;
    uint64_t v95 = (void *)sub_22D2BBD30();
    id v96 = objc_msgSend(v92, sel_adjustedDateForCalendar_, v95);

    uint64_t v97 = v242;
    sub_22D2BBC00();

    id v98 = *(id *)(v94 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
    uint64_t v99 = (void *)sub_22D2BBBC0();
    id v100 = objc_msgSend(v98, sel_stringFromDate_, v99);

    uint64_t v101 = sub_22D2BCBD0();
    uint64_t v103 = v102;

    (*(void (**)(char *, uint64_t))(v248 + 8))(v97, v70);
    uint64_t v104 = v255;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v105 = swift_retain();
      *(void *)(a2 + v104) = sub_22D191804(v105);
      swift_release();
    }
    unint64_t v106 = (uint64_t *)(*(void *)(a2 + v104)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalDateString);
    swift_beginAccess();
    *unint64_t v106 = v101;
    v106[1] = v103;

    swift_bridgeObjectRelease();
    id v50 = v256;
    uint64_t v69 = v93;
    uint64_t v91 = v253;
  }
  id v107 = objc_msgSend(v50, sel_medicalDateIntervalValue);
  uint64_t v108 = v247;
  uint64_t v109 = v244;
  if (v107)
  {
    uint64_t v110 = v107;
    id v111 = objc_msgSend(v107, sel_startDate);

    if (v111)
    {
      id v112 = objc_msgSend(v50, sel_medicalDateIntervalValue);
      if (v112)
      {
        int v113 = v112;
        uint64_t v114 = (char *)objc_msgSend(v112, sel_endDate);

        if (v114)
        {
          uint64_t v115 = (void *)sub_22D2BBD30();
          id v116 = objc_msgSend(v111, sel_adjustedDateForCalendar_, v115);

          uint64_t v117 = (uint64_t)v225;
          sub_22D2BBC00();

          id v118 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v248 + 56);
          v118(v117, 0, 1, v70);
          id v119 = (void *)sub_22D2BBD30();
          uint64_t v242 = v114;
          id v120 = objc_msgSend(v114, sel_adjustedDateForCalendar_, v119);

          uint64_t v121 = (uint64_t)v226;
          sub_22D2BBC00();

          v118(v121, 0, 1, v70);
          uint64_t v122 = (uint64_t)v227;
          sub_22D24D984(v117, v121);
          sub_22D084124(v121, (uint64_t (*)(void))sub_22D05C8D8);
          sub_22D084124(v117, (uint64_t (*)(void))sub_22D05C8D8);
          uint64_t v123 = v255;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            type metadata accessor for PBHKInspectableValue._StorageClass(0);
            swift_allocObject();
            uint64_t v124 = swift_retain();
            *(void *)(a2 + v123) = sub_22D191804(v124);
            swift_release();
          }
          uint64_t v125 = *(void *)(a2 + v123);
          uint64_t v126 = v230;
          sub_22D0838E8(v122, v230, type metadata accessor for PBDateRange);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v228 + 56))(v126, 0, 1, v229);
          uint64_t v127 = v126;
          uint64_t v128 = v231;
          sub_22D0838E8(v127, v231, (uint64_t (*)(void))sub_22D083950);
          uint64_t v129 = v125
               + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalDateIntervalString;
          swift_beginAccess();
          swift_retain();
          sub_22D083F60(v128, v129);
          swift_endAccess();

          swift_release();
          id v50 = v256;
          uint64_t v108 = v247;
          uint64_t v69 = v246;
          uint64_t v70 = v245;
          uint64_t v109 = v244;
        }
        else
        {

          id v50 = v256;
        }
      }
      else
      {
      }
    }
  }
  id v130 = objc_msgSend(v50, sel_dateComponentsValue);
  if (!v130)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v108 + 56))(v109, 1, 1, v91);
    goto LABEL_35;
  }
  uint64_t v131 = v130;
  uint64_t v132 = v243;
  sub_22D2BB820();

  uint64_t v133 = *(void (**)(char *, char *, uint64_t))(v108 + 32);
  v133(v109, v132, v91);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v108 + 56))(v109, 0, 1, v91);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v108 + 48))(v109, 1, v91) == 1)
  {
LABEL_35:
    uint64_t v137 = sub_22D083EFC;
    uint64_t v138 = (uint64_t)v109;
    goto LABEL_36;
  }
  v133(v69, v109, v91);
  uint64_t v134 = *v254;
  uint64_t v135 = v233;
  sub_22D2BBD50();
  uint64_t v136 = v248;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v248 + 48))(v135, 1, v70) == 1)
  {
    (*(void (**)(char *, uint64_t))(v108 + 8))(v69, v91);
    uint64_t v137 = sub_22D05C8D8;
    uint64_t v138 = (uint64_t)v135;
LABEL_36:
    sub_22D084124(v138, (uint64_t (*)(void))v137);
    goto LABEL_37;
  }
  (*(void (**)(char *, char *, uint64_t))(v136 + 32))(v234, v135, v70);
  id v166 = *(id *)(v134 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_isoDateFormatter);
  uint64_t v167 = (void *)sub_22D2BBBC0();
  id v168 = objc_msgSend(v166, sel_stringFromDate_, v167);

  uint64_t v169 = sub_22D2BCBD0();
  uint64_t v171 = v170;

  uint64_t v172 = v255;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    uint64_t v173 = swift_retain();
    *(void *)(a2 + v172) = sub_22D191804(v173);
    swift_release();
  }
  uint64_t v174 = (uint64_t *)(*(void *)(a2 + v172)
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dateFromDateComponents);
  swift_beginAccess();
  *uint64_t v174 = v169;
  v174[1] = v171;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v248 + 8))(v234, v70);
  (*(void (**)(char *, uint64_t))(v108 + 8))(v69, v91);
  id v50 = v256;
LABEL_37:
  id v139 = objc_msgSend(v50, sel_codedValueCollection);
  if (v139)
  {
    uint64_t v140 = v139;
    id v141 = objc_msgSend(v139, sel_codedValues);
    sub_22D030474(0, &qword_26853E870);
    unint64_t v142 = sub_22D2BCE00();

    MEMORY[0x270FA5388](v143);
    *(&v224 - 2) = (uint64_t)v254;
    uint64_t v144 = sub_22D29C760((void (*)(id *))sub_22D083F30, (uint64_t)(&v224 - 4), v142, (uint64_t)v257);
    swift_bridgeObjectRelease();
    uint64_t v145 = v255;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v146 = swift_retain();
      *(void *)(a2 + v145) = sub_22D191804(v146);
      swift_release();
    }
    id v147 = (uint64_t *)(*(void *)(a2 + v145)
                     + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__codedValueCollectionValues);
    swift_beginAccess();
    *id v147 = v144;

    swift_bridgeObjectRelease();
  }
  id v148 = v256;
  id v149 = objc_msgSend(v256, sel_medicalCodings);
  uint64_t v253 = a2;
  if (v149)
  {
    uint64_t v150 = v149;
    sub_22D030474(0, &qword_26853E868);
    unint64_t v151 = sub_22D2BCE00();

    if (v151 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = sub_22D2BD470();
      uint64_t v152 = result;
      if (result) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v152 = *(void *)((v151 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (v152)
      {
LABEL_44:
        if (v152 < 1)
        {
          __break(1u);
          goto LABEL_98;
        }
        uint64_t v154 = 0;
        unsigned int v155 = (void *)MEMORY[0x263F8EE78];
        do
        {
          if ((v151 & 0xC000000000000001) != 0) {
            id v156 = (id)MEMORY[0x230F7AF90](v154, v151);
          }
          else {
            id v156 = *(id *)(v151 + 8 * v154 + 32);
          }
          unint64_t v157 = v156;
          id v158 = objc_msgSend(v156, sel_displayString);
          if (v158)
          {
            uint64_t v159 = v158;
            uint64_t v160 = sub_22D2BCBD0();
            uint64_t v162 = v161;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unsigned int v155 = sub_22D2810D4(0, v155[2] + 1, 1, v155);
            }
            unint64_t v164 = v155[2];
            unint64_t v163 = v155[3];
            if (v164 >= v163 >> 1) {
              unsigned int v155 = sub_22D2810D4((void *)(v163 > 1), v164 + 1, 1, v155);
            }
            v155[2] = v164 + 1;
            uint64_t v165 = &v155[2 * v164];
            v165[4] = v160;
            v165[5] = v162;
          }
          else
          {
          }
          ++v154;
        }
        while (v152 != v154);
        goto LABEL_62;
      }
    }
    unsigned int v155 = (void *)MEMORY[0x263F8EE78];
LABEL_62:
    swift_bridgeObjectRelease_n();
    a2 = v253;
    uint64_t v175 = v255;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v176 = swift_retain();
      *(void *)(a2 + v175) = sub_22D191804(v176);
      swift_release();
    }
    uint64_t v177 = (void *)(*(void *)(a2 + v175)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalCodingsDisplayStrings);
    swift_beginAccess();
    *uint64_t v177 = v155;
    swift_bridgeObjectRelease();
    id v148 = v256;
  }
  id v178 = objc_msgSend(v148, sel_ontologyConcept);
  if (v178)
  {
    id v179 = v178;
    uint64_t v180 = v236;
    sub_22D080C14(v178, 1, v236);
    uint64_t v181 = v255;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v182 = swift_retain();
      *(void *)(a2 + v181) = sub_22D191804(v182);
      swift_release();
    }
    uint64_t v183 = *(void *)(a2 + v181);
    uint64_t v184 = v251;
    sub_22D0838E8(v180, v251, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v249 + 56))(v184, 0, 1, v250);
    uint64_t v185 = v184;
    uint64_t v186 = v252;
    sub_22D083984(v185, v252, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
    uint64_t v187 = v183
         + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__concept;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C(v186, v187, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
    swift_endAccess();

    swift_release();
    id v148 = v256;
  }
  id v188 = objc_msgSend(v148, sel_dataAbsentReasonCodings);
  if (!v188) {
    goto LABEL_90;
  }
  uint64_t v189 = v188;
  sub_22D030474(0, &qword_26853E868);
  unint64_t v190 = sub_22D2BCE00();

  if (v190 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = sub_22D2BD470();
    uint64_t v191 = result;
    if (result)
    {
LABEL_72:
      if (v191 >= 1)
      {
        uint64_t v192 = 0;
        uint64_t v193 = (void *)MEMORY[0x263F8EE78];
        do
        {
          if ((v190 & 0xC000000000000001) != 0) {
            id v194 = (id)MEMORY[0x230F7AF90](v192, v190);
          }
          else {
            id v194 = *(id *)(v190 + 8 * v192 + 32);
          }
          uint64_t v195 = v194;
          id v196 = objc_msgSend(v194, sel_displayString);
          if (v196)
          {
            uint64_t v197 = v196;
            uint64_t v198 = sub_22D2BCBD0();
            uint64_t v200 = v199;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v193 = sub_22D2810D4(0, v193[2] + 1, 1, v193);
            }
            unint64_t v202 = v193[2];
            unint64_t v201 = v193[3];
            if (v202 >= v201 >> 1) {
              uint64_t v193 = sub_22D2810D4((void *)(v201 > 1), v202 + 1, 1, v193);
            }
            v193[2] = v202 + 1;
            uint64_t v203 = &v193[2 * v202];
            v203[4] = v198;
            v203[5] = v200;
          }
          else
          {
          }
          ++v192;
        }
        while (v191 != v192);
        goto LABEL_87;
      }
LABEL_98:
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v191 = *(void *)((v190 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v191) {
      goto LABEL_72;
    }
  }
  uint64_t v193 = (void *)MEMORY[0x263F8EE78];
LABEL_87:
  swift_bridgeObjectRelease_n();
  a2 = v253;
  uint64_t v204 = v255;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    uint64_t v205 = swift_retain();
    *(void *)(a2 + v204) = sub_22D191804(v205);
    swift_release();
  }
  uint64_t v206 = (void *)(*(void *)(a2 + v204)
                  + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dataAbsentReasonCodingsDisplayStrings);
  swift_beginAccess();
  *uint64_t v206 = v193;
  swift_bridgeObjectRelease();
  id v148 = v256;
LABEL_90:
  id v207 = objc_msgSend(v148, sel_dataAbsentReason);
  uint64_t v208 = v255;
  if (v207)
  {
    uint64_t v209 = v207;
    uint64_t v210 = v235;
    sub_22D080C14(v207, 1, v235);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKInspectableValue._StorageClass(0);
      swift_allocObject();
      uint64_t v211 = swift_retain();
      *(void *)(a2 + v208) = sub_22D191804(v211);
      swift_release();
    }
    uint64_t v212 = *(void *)(a2 + v208);
    uint64_t v213 = v210;
    uint64_t v214 = v251;
    sub_22D0838E8(v213, v251, type metadata accessor for PBHKConcept);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v249 + 56))(v214, 0, 1, v250);
    uint64_t v215 = v214;
    uint64_t v216 = v252;
    sub_22D083984(v215, v252, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
    uint64_t v217 = v212
         + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__dataAbsentReasonConcept;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C(v216, v217, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
    swift_endAccess();

    swift_release();
    id v148 = v256;
  }
  id v218 = objc_msgSend(v148, sel_unitString);
  uint64_t v219 = sub_22D2BCBD0();
  uint64_t v221 = v220;

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKInspectableValue._StorageClass(0);
    swift_allocObject();
    uint64_t v222 = swift_retain();
    *(void *)(a2 + v208) = sub_22D191804(v222);
    swift_release();
  }
  uint64_t v223 = (uint64_t *)(*(void *)(a2 + v208)
                   + OBJC_IVAR____TtCV19HealthRecordsDaemon20PBHKInspectableValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__unitString);
  swift_beginAccess();
  *uint64_t v223 = v219;
  v223[1] = v221;
  return swift_bridgeObjectRelease();
}

void sub_22D080330(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0xE000000000000000;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0xE000000000000000;
  type metadata accessor for PBHKCodedQuantity(0);
  sub_22D2BBFE0();
  id v4 = objc_msgSend(a1, sel_localizedValue);
  uint64_t v5 = sub_22D2BCBD0();
  unint64_t v7 = v6;

  id v8 = objc_msgSend(a1, sel_rawValue);
  uint64_t v9 = sub_22D2BCBD0();
  uint64_t v11 = v10;

  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v11;
  *(void *)(a2 + 16) = v5;
  *(void *)(a2 + 24) = v7;
  swift_bridgeObjectRetain();
  objc_msgSend(a1, sel_doubleValue);
  *(float *)&double v12 = v12;
  *(_DWORD *)(a2 + 32) = LODWORD(v12);
  id v13 = objc_msgSend(a1, sel_comparatorCoding);
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = objc_msgSend(v13, sel_displayString);

    if (v15)
    {
      uint64_t v16 = sub_22D2BCBD0();
      uint64_t v18 = v17;

      id v19 = objc_msgSend(a1, sel_comparatorCoding);
      if (v19
        && (uint64_t v20 = v19, v21 = objc_msgSend(v19, sel_code), v20, v21))
      {
        uint64_t v22 = sub_22D2BCBD0();
        uint64_t v24 = v23;

        *(void *)(a2 + 40) = v16;
        *(void *)(a2 + 48) = v18;
        uint64_t v32 = 0;
        unint64_t v33 = 0xE000000000000000;
        if (*(void *)(sub_22D0D33B4((uint64_t)&unk_26E05A2D0) + 16))
        {
          sub_22D04EB7C(v22, v24);
          if (v25) {
            swift_bridgeObjectRetain();
          }
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_22D2BCCB0();
        swift_bridgeObjectRelease();
        sub_22D2BCCB0();
        swift_bridgeObjectRelease();
        uint64_t v5 = 0;
        unint64_t v7 = 0xE000000000000000;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  *(void *)(a2 + 72) = v5;
  *(void *)(a2 + 80) = v7;
  id v26 = objc_msgSend(a1, sel_unitCoding, v32, v33);
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = objc_msgSend(v26, sel_displayString);

    if (v28)
    {
      uint64_t v29 = sub_22D2BCBD0();
      uint64_t v31 = v30;

      *(void *)(a2 + 56) = v29;
      *(void *)(a2 + 64) = v31;
    }
  }
}

id sub_22D0805B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x263F8D8F0];
  sub_22D0840C0(0, &qword_26853E838, type metadata accessor for PBHKInspectableValue, MEMORY[0x263F8D8F0]);
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  uint64_t v47 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v46 = (uint64_t)&v43 - v10;
  uint64_t v11 = type metadata accessor for PBHKInspectableValue(0);
  uint64_t v44 = *(void *)(v11 - 8);
  uint64_t v45 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v43 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0840C0(0, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept, v6);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v43 - v17;
  uint64_t v19 = type metadata accessor for PBHKConcept(0);
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v23 = *(int *)(type metadata accessor for PBHKCodedValue(0) + 20);
  if (qword_26853D118 != -1) {
    swift_once();
  }
  *(void *)(a2 + v23) = qword_2685404D0;
  swift_retain();
  id v49 = a1;
  id v24 = objc_msgSend(a1, sel_ontologyConcept);
  uint64_t v48 = v3;
  sub_22D080C14(v24, 1, (uint64_t)v22);

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKCodedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v25 = swift_retain();
    *(void *)(a2 + v23) = sub_22D195800(v25);
    swift_release();
  }
  uint64_t v26 = *(void *)(a2 + v23);
  sub_22D0838E8((uint64_t)v22, (uint64_t)v18, type metadata accessor for PBHKConcept);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v18, 0, 1, v19);
  sub_22D083984((uint64_t)v18, (uint64_t)v16, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
  uint64_t v27 = v26
      + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__concept;
  swift_beginAccess();
  swift_retain();
  sub_22D083E7C((uint64_t)v16, v27, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
  swift_endAccess();
  swift_release();
  id v28 = objc_msgSend(v49, sel_value);
  uint64_t v29 = (uint64_t)v43;
  uint64_t v30 = v48;
  sub_22D07E630();

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKCodedValue._StorageClass(0);
    swift_allocObject();
    uint64_t v31 = swift_retain();
    *(void *)(a2 + v23) = sub_22D195800(v31);
    swift_release();
  }
  uint64_t v32 = *(void *)(a2 + v23);
  uint64_t v33 = v46;
  sub_22D0838E8(v29, v46, type metadata accessor for PBHKInspectableValue);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v33, 0, 1, v45);
  uint64_t v34 = v47;
  sub_22D083984(v33, v47, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
  uint64_t v35 = v32
      + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__value;
  swift_beginAccess();
  swift_retain();
  sub_22D083E7C(v34, v35, &qword_26853E838, type metadata accessor for PBHKInspectableValue);
  swift_endAccess();
  swift_release();
  id result = objc_msgSend(v49, sel_referenceRanges);
  if (result)
  {
    uint64_t v37 = result;
    sub_22D030474(0, &qword_26853E878);
    unint64_t v38 = sub_22D2BCE00();

    MEMORY[0x270FA5388](v39);
    *(&v43 - 2) = v30;
    uint64_t v40 = sub_22D29C808((void (*)(id *))sub_22D083FC4, (uint64_t)(&v43 - 4), v38, (uint64_t)v50);
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKCodedValue._StorageClass(0);
      swift_allocObject();
      uint64_t v41 = swift_retain();
      *(void *)(a2 + v23) = sub_22D195800(v41);
      swift_release();
    }
    uint64_t v42 = (uint64_t *)(*(void *)(a2 + v23)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon14PBHKCodedValueP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__referenceRanges);
    swift_beginAccess();
    uint64_t *v42 = v40;
    return (id)swift_bridgeObjectRelease();
  }
  return result;
}

id sub_22D080C14@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v52 = a2;
  sub_22D0840C0(0, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v51 = (uint64_t)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = type metadata accessor for PBHKConcept(0);
  uint64_t v50 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v13 = *(int *)(v10 + 20);
  if (qword_26853D020 != -1) {
    swift_once();
  }
  *(void *)(a3 + v13) = qword_2685402C8;
  swift_retain();
  id v14 = objc_msgSend(a1, sel_preferredName);
  if (v14)
  {
    uint64_t v15 = v14;
    uint64_t v16 = sub_22D2BCBD0();
    uint64_t v18 = v17;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKConcept._StorageClass(0);
      swift_allocObject();
      uint64_t v19 = (void *)swift_retain();
      uint64_t v20 = sub_22D1B8D74(v19);
      swift_release();
      *(void *)(a3 + v13) = v20;
      swift_release();
    }
    uint64_t v21 = *(void *)(a3 + v13);
    swift_beginAccess();
    *(void *)(v21 + 16) = v16;
    *(void *)(v21 + 24) = v18;
    swift_bridgeObjectRelease();
  }
  id v22 = objc_msgSend(a1, sel_localizedPreferredName);
  if (v22)
  {
    uint64_t v23 = v22;
    uint64_t v24 = sub_22D2BCBD0();
    uint64_t v26 = v25;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKConcept._StorageClass(0);
      swift_allocObject();
      uint64_t v27 = (void *)swift_retain();
      id v28 = sub_22D1B8D74(v27);
      swift_release();
      *(void *)(a3 + v13) = v28;
      swift_release();
    }
    uint64_t v29 = *(void *)(a3 + v13);
    swift_beginAccess();
    *(void *)(v29 + 32) = v24;
    *(void *)(v29 + 40) = v26;
    swift_bridgeObjectRelease();
  }
  id v30 = objc_msgSend(a1, sel_identifier);
  id v31 = objc_msgSend(v30, sel_rawIdentifier);

  id v53 = v31;
  uint64_t v32 = sub_22D2BD630();
  uint64_t v34 = v33;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKConcept._StorageClass(0);
    swift_allocObject();
    uint64_t v35 = (void *)swift_retain();
    uint64_t v36 = sub_22D1B8D74(v35);
    swift_release();
    *(void *)(a3 + v13) = v36;
    swift_release();
  }
  uint64_t v37 = *(void *)(a3 + v13);
  swift_beginAccess();
  *(void *)(v37 + 48) = v32;
  *(void *)(v37 + 56) = v34;
  swift_bridgeObjectRelease();
  unsigned __int8 v38 = objc_msgSend(a1, sel_isInMemory);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBHKConcept._StorageClass(0);
    swift_allocObject();
    uint64_t v39 = (void *)swift_retain();
    uint64_t v40 = sub_22D1B8D74(v39);
    swift_release();
    *(void *)(a3 + v13) = v40;
    swift_release();
  }
  uint64_t v41 = (unsigned __int8 *)(*(void *)(a3 + v13)
                          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBHKConceptP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__isInMemory);
  id result = (id)swift_beginAccess();
  *uint64_t v41 = v38;
  if (v52)
  {
    id result = objc_msgSend(a1, sel_relationshipsAreLoaded);
    if (result)
    {
      id v43 = objc_msgSend(a1, sel_groupByConcept);
      sub_22D080C14();

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBHKConcept._StorageClass(0);
        swift_allocObject();
        uint64_t v44 = (void *)swift_retain();
        uint64_t v45 = sub_22D1B8D74(v44);
        swift_release();
        *(void *)(a3 + v13) = v45;
        swift_release();
      }
      uint64_t v46 = *(void *)(a3 + v13);
      sub_22D0838E8((uint64_t)v12, (uint64_t)v9, type metadata accessor for PBHKConcept);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v9, 0, 1, v10);
      uint64_t v47 = v51;
      sub_22D083984((uint64_t)v9, v51, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
      uint64_t v48 = v46
          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBHKConceptP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__groupBy;
      swift_beginAccess();
      swift_retain();
      sub_22D083E7C(v47, v48, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
      swift_endAccess();
      return (id)swift_release();
    }
  }
  return result;
}

id sub_22D0811B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_22D0840C0(0, &qword_26853E880, type metadata accessor for PBHKInspectableValueCollection, MEMORY[0x263F8D8F0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = type metadata accessor for PBHKInspectableValueCollection(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v14 = *(int *)(type metadata accessor for PBHKReferenceRange(0) + 20);
  if (qword_26853D0E0 != -1) {
    swift_once();
  }
  *(void *)(a2 + v14) = qword_268540458;
  swift_retain();
  id v15 = objc_msgSend(a1, sel_referenceRangeIdentifier);
  if (v15)
  {
    uint64_t v16 = v15;
    uint64_t v17 = sub_22D2BCBD0();
    uint64_t v29 = v18;
    uint64_t v30 = v17;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKReferenceRange._StorageClass(0);
      swift_allocObject();
      id v28 = v9;
      uint64_t v19 = swift_retain();
      uint64_t v9 = v28;
      *(void *)(a2 + v14) = sub_22D18D7E8(v19);
      swift_release();
    }
    uint64_t v20 = *(void *)(a2 + v14);
    swift_beginAccess();
    uint64_t v21 = v29;
    *(void *)(v20 + 16) = v30;
    *(void *)(v20 + 24) = v21;
    swift_bridgeObjectRelease();
  }
  id result = objc_msgSend(a1, sel_valueRange);
  if (result)
  {
    uint64_t v23 = result;
    sub_22D07DE40();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBHKReferenceRange._StorageClass(0);
      swift_allocObject();
      uint64_t v24 = swift_retain();
      *(void *)(a2 + v14) = sub_22D18D7E8(v24);
      swift_release();
    }
    uint64_t v25 = *(void *)(a2 + v14);
    sub_22D0838E8((uint64_t)v13, (uint64_t)v9, type metadata accessor for PBHKInspectableValueCollection);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    sub_22D083984((uint64_t)v9, (uint64_t)v7, &qword_26853E880, type metadata accessor for PBHKInspectableValueCollection);
    uint64_t v26 = v25
        + OBJC_IVAR____TtCV19HealthRecordsDaemon18PBHKReferenceRangeP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__valueRange;
    swift_beginAccess();
    swift_retain();
    sub_22D083E7C((uint64_t)v7, v26, &qword_26853E880, type metadata accessor for PBHKInspectableValueCollection);
    swift_endAccess();

    return (id)swift_release();
  }
  return result;
}

uint64_t sub_22D081588@<X0>(void *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v57 = a2;
  sub_22D0840C0(0, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept, MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  uint64_t v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t v11 = type metadata accessor for PBHKConcept(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBFE0();
  uint64_t v15 = *(int *)(type metadata accessor for PBClinicalRecord(0) + 20);
  if (qword_26853D000 != -1) {
    swift_once();
  }
  *(void *)(a3 + v15) = qword_268540278;
  swift_retain();
  id v16 = objc_msgSend(a1, sel_primaryConcept);
  sub_22D080C14(v16, 1, (uint64_t)v14);

  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    type metadata accessor for PBClinicalRecord._StorageClass(0);
    swift_allocObject();
    uint64_t v17 = (void *)swift_retain();
    uint64_t v18 = sub_22D1B90F4(v17);
    swift_release();
    *(void *)(a3 + v15) = v18;
    swift_release();
  }
  uint64_t v19 = *(void *)(a3 + v15);
  sub_22D0838E8((uint64_t)v14, (uint64_t)v10, type metadata accessor for PBHKConcept);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  sub_22D083984((uint64_t)v10, (uint64_t)v8, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
  uint64_t v20 = v19
      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__primaryConcept;
  swift_beginAccess();
  swift_retain();
  sub_22D083E7C((uint64_t)v8, v20, (unint64_t *)&qword_26853E848, type metadata accessor for PBHKConcept);
  swift_endAccess();
  swift_release();
  id v21 = a1;
  id v22 = sub_22D082648(v57, v21);

  if (v22)
  {
    id v23 = objc_msgSend(v22, sel_gateway);

    if (v23)
    {
      id v24 = objc_msgSend(v23, sel_title);
      uint64_t v25 = sub_22D2BCBD0();
      uint64_t v27 = v26;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        id v28 = (void *)swift_retain();
        uint64_t v29 = sub_22D1B90F4(v28);
        swift_release();
        *(void *)(a3 + v15) = v29;
        swift_release();
      }
      uint64_t v30 = (uint64_t *)(*(void *)(a3 + v15)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
      swift_beginAccess();
      *uint64_t v30 = v25;
      v30[1] = v27;
      swift_bridgeObjectRelease();
      id v31 = objc_msgSend(v23, sel_externalID);
      uint64_t v32 = sub_22D2BCBD0();
      uint64_t v34 = v33;

      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        uint64_t v35 = (void *)swift_retain();
        uint64_t v36 = sub_22D1B90F4(v35);
        swift_release();
        *(void *)(a3 + v15) = v36;
        swift_release();
      }
      uint64_t v37 = (uint64_t *)(*(void *)(a3 + v15)
                      + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__gatewayID);
      swift_beginAccess();
      *uint64_t v37 = v32;
      v37[1] = v34;

      swift_bridgeObjectRelease();
    }
  }
  id v38 = objc_msgSend(v21, sel_medicalRecordOriginType, v57);
  if (v38 == (id)3)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBClinicalRecord._StorageClass(0);
      swift_allocObject();
      uint64_t v45 = (void *)swift_retain();
      uint64_t v46 = sub_22D1B90F4(v45);
      swift_release();
      *(void *)(a3 + v15) = v46;
      swift_release();
    }
    uint64_t v47 = *(void *)(a3 + v15)
        + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
    swift_beginAccess();
    *(void *)uint64_t v47 = 2;
    *(unsigned char *)(v47 + 8) = 1;
    id v48 = objc_msgSend(v21, sel_sourceRevision);
    id v49 = objc_msgSend(v48, sel_source);

    id v50 = objc_msgSend(v49, sel_name);
    uint64_t v51 = sub_22D2BCBD0();
    uint64_t v53 = v52;

    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      type metadata accessor for PBClinicalRecord._StorageClass(0);
      swift_allocObject();
      uint64_t v54 = (void *)swift_retain();
      uint64_t v55 = sub_22D1B90F4(v54);
      swift_release();
      *(void *)(a3 + v15) = v55;
      swift_release();
    }
    uint64_t v56 = (uint64_t *)(*(void *)(a3 + v15)
                    + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__source);
    swift_beginAccess();
    *uint64_t v56 = v51;
    v56[1] = v53;
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (v38 == (id)1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        uint64_t v39 = (void *)swift_retain();
        uint64_t v40 = sub_22D1B90F4(v39);
        swift_release();
        *(void *)(a3 + v15) = v40;
        swift_release();
      }
      uint64_t v41 = *(void *)(a3 + v15)
          + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
      uint64_t result = swift_beginAccess();
      *(void *)uint64_t v41 = 1;
    }
    else
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        type metadata accessor for PBClinicalRecord._StorageClass(0);
        swift_allocObject();
        id v43 = (void *)swift_retain();
        uint64_t v44 = sub_22D1B90F4(v43);
        swift_release();
        *(void *)(a3 + v15) = v44;
        swift_release();
      }
      uint64_t v41 = *(void *)(a3 + v15)
          + OBJC_IVAR____TtCV19HealthRecordsDaemon16PBClinicalRecordP33_F8BD0C5BAFF9793DC2607055D044CB4F13_StorageClass__medicalRecordOriginType;
      uint64_t result = swift_beginAccess();
      *(void *)uint64_t v41 = 0;
    }
    *(unsigned char *)(v41 + 8) = 1;
  }
  return result;
}

uint64_t sub_22D081C9C(void **a1, void *a2)
{
  uint64_t v4 = sub_22D2BBC90();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v36 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D083FF4();
  uint64_t v38 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D084058(0);
  uint64_t v11 = MEMORY[0x270FA5388](v10 - 8);
  uint64_t v37 = (uint64_t)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v35 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v35 - v16;
  uint64_t v18 = *a1;
  id v19 = objc_msgSend(a2, sel_sourceRevision);
  id v20 = objc_msgSend(v19, sel_source);

  id v21 = objc_msgSend(v20, sel__deducedClinicalAccountIdentifier);
  if (v21)
  {
    sub_22D2BBC70();

    id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v17, 0, 1, v4);
  }
  else
  {
    id v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    v22(v17, 1, 1, v4);
  }
  id v23 = objc_msgSend(v18, sel_identifier);
  sub_22D2BBC70();

  v22(v15, 0, 1, v4);
  uint64_t v24 = (uint64_t)&v9[*(int *)(v38 + 48)];
  sub_22D0835DC((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))sub_22D084058);
  sub_22D0835DC((uint64_t)v15, v24, (uint64_t (*)(void))sub_22D084058);
  uint64_t v25 = v5;
  uint64_t v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v9, 1, v4) == 1)
  {
    uint64_t v27 = (uint64_t (*)(void))sub_22D084058;
    sub_22D084124((uint64_t)v15, (uint64_t (*)(void))sub_22D084058);
    sub_22D084124((uint64_t)v17, (uint64_t (*)(void))sub_22D084058);
    if (v26(v24, 1, v4) == 1)
    {
      char v28 = -1;
    }
    else
    {
      uint64_t v27 = (uint64_t (*)(void))sub_22D083FF4;
      char v28 = 0;
    }
  }
  else
  {
    uint64_t v29 = v37;
    sub_22D0835DC((uint64_t)v9, v37, (uint64_t (*)(void))sub_22D084058);
    if (v26(v24, 1, v4) == 1)
    {
      sub_22D084124((uint64_t)v15, (uint64_t (*)(void))sub_22D084058);
      sub_22D084124((uint64_t)v17, (uint64_t (*)(void))sub_22D084058);
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v29, v4);
      char v28 = 0;
      uint64_t v27 = (uint64_t (*)(void))sub_22D083FF4;
    }
    else
    {
      uint64_t v30 = v25;
      id v31 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
      uint64_t v32 = v36;
      v31(v36, v24, v4);
      sub_22D0833DC(&qword_26853E318, MEMORY[0x263F07508]);
      char v28 = sub_22D2BCB90();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v30 + 8);
      v33(v32, v4);
      uint64_t v27 = (uint64_t (*)(void))sub_22D084058;
      sub_22D084124((uint64_t)v15, (uint64_t (*)(void))sub_22D084058);
      sub_22D084124((uint64_t)v17, (uint64_t (*)(void))sub_22D084058);
      v33((char *)v29, v4);
    }
  }
  sub_22D084124((uint64_t)v9, v27);
  return v28 & 1;
}

uint64_t sub_22D082184@<X0>(uint64_t a1@<X8>)
{
  uint64_t v30 = a1;
  sub_22D05C8D8(0);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v33 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_22D2BB8E0();
  uint64_t v28 = *(void *)(v3 - 8);
  uint64_t v29 = v3;
  MEMORY[0x270FA5388](v3);
  id v31 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_22D2BBE00();
  uint64_t v5 = *(void *)(v32 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v32);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v27 - v9;
  id v11 = objc_msgSend(self, sel_referenceCalendar);
  sub_22D2BBD40();

  sub_22D0840C0(0, &qword_26853E7E0, MEMORY[0x263F07908], MEMORY[0x263F8E0F8]);
  uint64_t v12 = sub_22D2BBDE0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_22D2C0BB0;
  unint64_t v17 = v16 + v15;
  uint64_t v18 = *(void (**)(unint64_t, void, uint64_t))(v13 + 104);
  v18(v17, *MEMORY[0x263F07878], v12);
  v18(v17 + v14, *MEMORY[0x263F078A0], v12);
  v18(v17 + 2 * v14, *MEMORY[0x263F078A8], v12);
  v18(v17 + 3 * v14, *MEMORY[0x263F07870], v12);
  v18(v17 + 4 * v14, *MEMORY[0x263F07890], v12);
  id v19 = v31;
  v18(v17 + 5 * v14, *MEMORY[0x263F078C0], v12);
  v18(v17 + 6 * v14, *MEMORY[0x263F078C8], v12);
  sub_22D239304(v16);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_22D2BBD00();
  id v20 = v33;
  swift_bridgeObjectRelease();
  sub_22D2BBDA0();
  sub_22D2BBD50();
  id v21 = *(void (**)(char *, uint64_t))(v5 + 8);
  id v22 = v8;
  uint64_t v23 = v32;
  v21(v22, v32);
  uint64_t v24 = sub_22D2BBC30();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48))(v20, 1, v24);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v29);
    v21(v10, v23);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v25 + 32))(v30, v20, v24);
  }
  return result;
}

void *sub_22D082648(unint64_t a1, void *a2)
{
  if (a1 >> 62) {
    goto LABEL_16;
  }
  uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = sub_22D2BD470())
  {
    uint64_t v6 = 4;
    while (1)
    {
      id v7 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x230F7AF90](v6 - 4, a1) : *(id *)(a1 + 8 * v6);
      uint64_t v8 = v7;
      uint64_t v9 = v6 - 3;
      if (__OFADD__(v6 - 4, 1)) {
        break;
      }
      uint64_t v12 = v7;
      char v10 = sub_22D081C9C(&v12, a2);
      if (v2)
      {
        swift_bridgeObjectRelease();

        return v8;
      }
      if (v10)
      {
        swift_bridgeObjectRelease();
        return v8;
      }

      ++v6;
      if (v9 == v5) {
        goto LABEL_11;
      }
    }
    __break(1u);
LABEL_16:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  swift_bridgeObjectRelease();
  return 0;
}

void *sub_22D08276C(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    id v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    id v7 = a1;
    uint64_t v9 = (void *)a2[1];
    uint64_t v8 = a2[2];
    a1[1] = v9;
    a1[2] = v8;
    uint64_t v10 = *(int *)(a3 + 28);
    __dst = (char *)a1 + v10;
    id v11 = (char *)a2 + v10;
    uint64_t v12 = sub_22D2BB6F0();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    swift_retain();
    id v15 = v9;
    if (v14(v11, 1, v12))
    {
      sub_22D05C844(0);
      memcpy(__dst, v11, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    *((unsigned char *)v7 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  }
  return v7;
}

uint64_t sub_22D082910(uint64_t a1, uint64_t a2)
{
  swift_release();

  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = sub_22D2BB6F0();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    id v7 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_22D0829E8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = (void *)a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  __dst = (char *)a1 + v7;
  uint64_t v8 = (char *)a2 + v7;
  uint64_t v9 = sub_22D2BB6F0();
  uint64_t v10 = *(void *)(v9 - 8);
  id v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_retain();
  id v12 = v6;
  if (v11(v8, 1, v9))
  {
    sub_22D05C844(0);
    memcpy(__dst, v8, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(__dst, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(__dst, 0, 1, v9);
  }
  *((unsigned char *)a1 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  return a1;
}

void *sub_22D082B40(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[1];
  uint64_t v7 = (void *)a1[1];
  a1[1] = v6;
  id v8 = v6;

  a1[2] = a2[2];
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (char *)a1 + v9;
  id v11 = (char *)a2 + v9;
  uint64_t v12 = sub_22D2BB6F0();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    sub_22D05C844(0);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_22D082CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  id v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_22D2BB6F0();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    sub_22D05C844(0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(unsigned char *)(a1 + *(int *)(a3 + 32)) = *(unsigned char *)(a2 + *(int *)(a3 + 32));
  return a1;
}

void *sub_22D082E30(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (void *)a1[1];
  a1[1] = a2[1];

  a1[2] = a2[2];
  uint64_t v7 = *(int *)(a3 + 28);
  id v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = sub_22D2BB6F0();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    sub_22D05C844(0);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  *((unsigned char *)a1 + *(int *)(a3 + 32)) = *((unsigned char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t sub_22D082FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D082FF4);
}

uint64_t sub_22D082FF4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_22D05C844(0);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 28);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_22D0830A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D0830B8);
}

void *sub_22D0830B8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_22D05C844(0);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 28);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingMedicalRecordsQuery()
{
  uint64_t result = qword_26853E7E8;
  if (!qword_26853E7E8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_22D0831AC()
{
  sub_22D05C844(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_22D08326C()
{
  if (!qword_26853E7F8)
  {
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC6D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E7F8);
    }
  }
}

void sub_22D0832DC()
{
  if (!qword_26853E800)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0834D0(255, &qword_26AEC1DC8, MEMORY[0x263EFDCF0]);
    sub_22CFF491C();
    sub_22D083560((unint64_t *)&qword_26AEC1DC0, &qword_26AEC1DC8, v0);
    sub_22D0833DC(&qword_26853D780, (void (*)(uint64_t))sub_22CFF491C);
    unint64_t v1 = sub_22D2BC460();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26853E800);
    }
  }
}

uint64_t sub_22D0833DC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D083424()
{
  if (!qword_26853E808)
  {
    sub_22D0832DC();
    type metadata accessor for ClinicalSharingQueryOutput(255);
    sub_22D0833DC(&qword_26853E810, (void (*)(uint64_t))sub_22D0832DC);
    unint64_t v0 = sub_22D2BC3D0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E808);
    }
  }
}

void sub_22D0834D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    sub_22D056DB0(255, (unint64_t *)&qword_26AEC1ED0, (unint64_t *)&qword_26AEC1EE8);
    uint64_t v7 = v6;
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a3(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t sub_22D083560(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D0834D0(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0835A4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D0835DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D083644()
{
  uint64_t v1 = (int *)(type metadata accessor for ClinicalSharingMedicalRecordsQuery() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)v1 + 64);
  swift_release();

  uint64_t v5 = v0 + v3 + v1[9];
  uint64_t v6 = sub_22D2BB6F0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_22D083798@<X0>(void (**a1)(void, void, void, void)@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *(void *)(type metadata accessor for ClinicalSharingMedicalRecordsQuery() - 8);
  uint64_t v8 = *(void *)(v3
                 + ((*(void *)(v7 + 64)
                   + ((*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
                   + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_22D07AE2C(a1, a2, v8, a3);
}

uint64_t sub_22D08384C()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D083884(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

void sub_22D0838B4(uint64_t a1)
{
}

uint64_t sub_22D0838E8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_22D083950(uint64_t a1)
{
}

uint64_t sub_22D083984(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D0840C0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D083A04@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D25C92C(a1, *(void **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_22D083A0C(uint64_t a1, void (*a2)(void **), uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v6 = type metadata accessor for PBClinicalRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v6 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v28 - v11;
  unint64_t v33 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62) {
    goto LABEL_44;
  }
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v38 = MEMORY[0x263F8EE78];
    int64_t v32 = v13 & ~(v13 >> 63);
    uint64_t result = sub_22D24BB0C(0, v32, 0);
    if (v13 < 0)
    {
      __break(1u);
      return result;
    }
    uint64_t v28 = v4;
    uint64_t v15 = v38;
    if (!v13) {
      break;
    }
    uint64_t v29 = a1 & 0xFFFFFFFFFFFFFF8;
    if (v33)
    {
      swift_bridgeObjectRetain();
      uint64_t v31 = sub_22D2BD470();
    }
    else
    {
      uint64_t v31 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
    }
    unint64_t v16 = 0;
    unint64_t v36 = a1 & 0xC000000000000001;
    uint64_t v30 = v12;
    while (v32 != v16)
    {
      if (v31 == v16) {
        goto LABEL_42;
      }
      if (v36)
      {
        id v17 = (id)MEMORY[0x230F7AF90](v16, a1);
      }
      else
      {
        if (v16 >= *(void *)(v29 + 16)) {
          goto LABEL_43;
        }
        id v17 = *(id *)(a1 + 8 * v16 + 32);
      }
      uint64_t v18 = v17;
      id v19 = (void *)MEMORY[0x230F7B690]();
      uint64_t v37 = v18;
      v34(&v37);

      uint64_t v38 = v15;
      unint64_t v21 = *(void *)(v15 + 16);
      unint64_t v20 = *(void *)(v15 + 24);
      uint64_t v4 = (void *)(v21 + 1);
      if (v21 >= v20 >> 1)
      {
        sub_22D24BB0C(v20 > 1, v21 + 1, 1);
        uint64_t v15 = v38;
      }
      ++v16;
      *(void *)(v15 + 16) = v4;
      sub_22D0838E8((uint64_t)v10, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v21, type metadata accessor for PBClinicalRecord);
      uint64_t v12 = v30;
      if (v13 == v16)
      {
        uint64_t v10 = (char *)v29;
        goto LABEL_20;
      }
    }
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_22D2BD470();
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = (char *)(a1 & 0xFFFFFFFFFFFFFF8);
  unint64_t v36 = a1 & 0xC000000000000001;
  swift_bridgeObjectRetain();
LABEL_20:
  if (a1 < 0) {
    int64_t v22 = a1;
  }
  else {
    int64_t v22 = (int64_t)v10;
  }
  int64_t v32 = v22;
  if (v33)
  {
    while (1)
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_22D2BD470();
      swift_bridgeObjectRelease();
      if (v13 == v23) {
        break;
      }
LABEL_27:
      if (v36)
      {
        id v24 = (id)MEMORY[0x230F7AF90](v13, a1);
      }
      else
      {
        if (v13 < 0)
        {
          __break(1u);
LABEL_39:
          __break(1u);
LABEL_40:
          __break(1u);
          goto LABEL_41;
        }
        if ((unint64_t)v13 >= *((void *)v10 + 2)) {
          goto LABEL_39;
        }
        id v24 = *(id *)(a1 + 8 * v13 + 32);
      }
      uint64_t v4 = v24;
      if (__OFADD__(v13, 1)) {
        goto LABEL_40;
      }
      uint64_t v25 = (void *)MEMORY[0x230F7B690]();
      uint64_t v37 = v4;
      v34(&v37);

      uint64_t v38 = v15;
      unint64_t v27 = *(void *)(v15 + 16);
      unint64_t v26 = *(void *)(v15 + 24);
      uint64_t v4 = (void *)(v27 + 1);
      if (v27 >= v26 >> 1)
      {
        sub_22D24BB0C(v26 > 1, v27 + 1, 1);
        uint64_t v15 = v38;
      }
      *(void *)(v15 + 16) = v4;
      sub_22D0838E8((uint64_t)v12, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v27, type metadata accessor for PBClinicalRecord);
      ++v13;
      if (!v33) {
        goto LABEL_24;
      }
    }
  }
  else
  {
LABEL_24:
    if (v13 != *((void *)v10 + 2)) {
      goto LABEL_27;
    }
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_22D083E2C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0D6FB4(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_22D083E34@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0D6214(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_22D083E3C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0D4A9C(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_22D083E44@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0AAE20(a1, *(uint64_t **)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_22D083E4C@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D07E630(*a1, a2);
}

uint64_t sub_22D083E7C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_22D0840C0(0, a3, a4, MEMORY[0x263F8D8F0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void sub_22D083EFC(uint64_t a1)
{
}

id sub_22D083F30@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0805B8(*a1, a2);
}

uint64_t sub_22D083F60(uint64_t a1, uint64_t a2)
{
  sub_22D083950(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

id sub_22D083FC4@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D0811B0(*a1, a2);
}

void sub_22D083FF4()
{
  if (!qword_26853E888)
  {
    sub_22D084058(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E888);
    }
  }
}

void sub_22D084058(uint64_t a1)
{
}

void sub_22D08408C(uint64_t a1)
{
}

void sub_22D0840C0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D084124(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for ClinicalSharingMedicalRecordsQuery.ChartablePointType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFD) {
    goto LABEL_17;
  }
  if (a2 + 3 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 3) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 3;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 3;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v8 = v6 - 4;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingMedicalRecordsQuery.ChartablePointType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D0842E0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingMedicalRecordsQuery.ChartablePointType()
{
  return &type metadata for ClinicalSharingMedicalRecordsQuery.ChartablePointType;
}

unint64_t sub_22D08431C()
{
  unint64_t result = qword_26853E898;
  if (!qword_26853E898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E898);
  }
  return result;
}

id HKMedicationUserDomainConcept.freeTextMedicationForm.getter()
{
  return sub_22D084388((SEL *)&selRef_freeTextMedicationFormCode);
}

id HKMedicationUserDomainConcept.freeTextMedicationLoggingUnit.getter()
{
  return sub_22D084388((SEL *)&selRef_freeTextMedicationLoggingUnitCode);
}

id sub_22D084388(SEL *a1)
{
  id v2 = [v1 *a1];
  int v3 = v2;
  if (!v2) {
    return 0;
  }
  id v4 = objc_msgSend(v2, sel_longLongValue);

  return v4;
}

uint64_t sub_22D0843EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_22D2BBCA0();
  id v8 = v3;
  swift_retain();
  uint64_t v9 = sub_22D084A10(v7, v8, a1);
  swift_bridgeObjectRelease();

  swift_release();
  if (v9[2])
  {
    uint64_t v10 = v9[4];
    swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRelease();
    id v11 = v8;
    swift_getAtKeyPath();

    if (*(void *)(v15 + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v12 = sub_22D04EB7C(a2, a3);
      if (v13)
      {
        uint64_t v10 = *(void *)(*(void *)(v15 + 56) + 16 * v12);
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v10 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_22D084524@<X0>(void *a1@<X1>, void *a2@<X8>)
{
  id v4 = objc_allocWithZone(MEMORY[0x263EFF960]);
  swift_bridgeObjectRetain();
  uint64_t v5 = (void *)sub_22D2BCBA0();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithLocaleIdentifier_, v5);

  id v7 = objc_msgSend(v6, sel_languageCode);
  uint64_t v8 = sub_22D2BCBD0();
  uint64_t v10 = v9;

  id v11 = objc_msgSend(v6, sel_regionCode);
  if (v11)
  {
    unint64_t v12 = v11;
    uint64_t v13 = sub_22D2BCBD0();
    unint64_t v15 = v14;
  }
  else
  {
    unint64_t v15 = 0xE200000000000000;
    uint64_t v13 = 21333;
  }
  sub_22D084B6C(0, &qword_26853DED8, MEMORY[0x263F8E0F8]);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_22D2C0F10;
  *(void *)(v16 + 32) = v8;
  *(void *)(v16 + 40) = v10;
  *(void *)(v16 + 48) = v13;
  *(void *)(v16 + 56) = v15;
  sub_22D084B6C(0, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D488]);
  sub_22D084BBC();
  uint64_t v17 = sub_22D2BCB60();
  uint64_t v19 = v18;
  swift_bridgeObjectRelease();

  id v20 = a1;
  swift_getAtKeyPath();

  if (*(void *)(v27 + 16) && (unint64_t v21 = sub_22D04EB7C(v17, v19), (v22 & 1) != 0))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(v27 + 56) + 16 * v21);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v25;
  return result;
}

uint64_t HKMedicationUserDomainConcept.brandName.getter()
{
  return sub_22D084820();
}

char *keypath_get_selector_localizedOntologyBrandNames()
{
  return sel_localizedOntologyBrandNames;
}

void sub_22D084760(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D08476C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t HKMedicationUserDomainConcept.preferredName.getter()
{
  return sub_22D084820();
}

char *keypath_get_selector_localizedOntologyPreferredNames()
{
  return sel_localizedOntologyPreferredNames;
}

void sub_22D0847A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D0847B0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t HKMedicationUserDomainConcept.genericName.getter()
{
  return sub_22D084820();
}

char *keypath_get_selector_localizedOntologyGenericNames()
{
  return sel_localizedOntologyGenericNames;
}

void sub_22D0847E8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D0847F4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t HKMedicationUserDomainConcept.basicDoseForm.getter()
{
  return sub_22D084820();
}

uint64_t sub_22D084820()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v1 = sub_22D2BCBD0();
  uint64_t v3 = sub_22D0843EC(KeyPath, v1, v2);
  swift_release();
  swift_bridgeObjectRelease();
  return v3;
}

char *keypath_get_selector_localizedOntologyBasicDoseForms()
{
  return sel_localizedOntologyBasicDoseForms;
}

void sub_22D0848A0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D0848AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t HKMedicationUserDomainConcept.loggingUnitSingular.getter()
{
  return sub_22D08491C();
}

char *keypath_get_selector_localizedOntologyLoggingUnitSingular()
{
  return sel_localizedOntologyLoggingUnitSingular;
}

void sub_22D0848E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D0848F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t HKMedicationUserDomainConcept.loggingUnitPlural.getter()
{
  return sub_22D08491C();
}

uint64_t sub_22D08491C()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v1 = sub_22D0843EC(KeyPath, 0x53552D6E65, 0xE500000000000000);
  swift_release();
  return v1;
}

char *keypath_get_selector_localizedOntologyLoggingUnitPlural()
{
  return sel_localizedOntologyLoggingUnitPlural;
}

void sub_22D084980(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_22D08498C(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  uint64_t v5 = sub_22D2BCB00();

  *a3 = v5;
}

void sub_22D0849F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void *sub_22D084A10(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v19 = a3;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  id v6 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  id v7 = (void *)MEMORY[0x263F8EE78];
  do
  {
    uint64_t v9 = *v6;
    uint64_t v17 = *(v6 - 1);
    uint64_t v18 = v9;
    swift_bridgeObjectRetain();
    sub_22D084524(a2, &v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    swift_bridgeObjectRelease();
    uint64_t v10 = v16;
    if (v16)
    {
      uint64_t v11 = v15;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        id v7 = sub_22D2810D4(0, v7[2] + 1, 1, v7);
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1) {
        id v7 = sub_22D2810D4((void *)(v12 > 1), v13 + 1, 1, v7);
      }
      v7[2] = v13 + 1;
      uint64_t v8 = &v7[2 * v13];
      v8[4] = v11;
      v8[5] = v10;
    }
    v6 += 2;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v7;
}

void sub_22D084B6C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_22D084BBC()
{
  unint64_t result = qword_26AEC1EC8;
  if (!qword_26AEC1EC8)
  {
    sub_22D084B6C(255, (unint64_t *)&qword_26AEC1EC0, MEMORY[0x263F8D488]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1EC8);
  }
  return result;
}

unint64_t static WellKnownJWKSRequest.wellKnownJWKsPath.getter()
{
  return 0xD000000000000015;
}

void WellKnownJWKSRequest.method.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t WellKnownJWKSRequest.headers.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t WellKnownJWKSRequest.headers.setter(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = a1;
  return result;
}

uint64_t (*WellKnownJWKSRequest.headers.modify())()
{
  return nullsub_1;
}

uint64_t WellKnownJWKSRequest.url.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 24);
  uint64_t v4 = sub_22D2BBAA0();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for WellKnownJWKSRequest()
{
  uint64_t result = qword_26853E8A8;
  if (!qword_26853E8A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t WellKnownJWKSRequest.body.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 28);
  uint64_t v2 = *(void *)v1;
  sub_22CFFA158(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t WellKnownJWKSRequest.title.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for WellKnownJWKSRequest() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t WellKnownJWKSRequest.init(baseURLString:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_22CFF9E78();
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_22D2BBAA0();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  unint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)a3 = 2;
  *(void *)(a3 + 8) = 0;
  unint64_t v13 = (int *)type metadata accessor for WellKnownJWKSRequest();
  uint64_t v24 = a3 + v13[7];
  uint64_t v25 = a1;
  *(_OWORD *)uint64_t v24 = xmmword_22D2BFCE0;
  uint64_t v26 = a2;
  swift_bridgeObjectRetain();
  sub_22D2BCC80();
  uint64_t v14 = sub_22D2BCD30();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  if (v14 == 47 && v16 == 0xE100000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v17 = sub_22D2BD660();
    swift_bridgeObjectRelease();
    if ((v17 & 1) == 0) {
      sub_22D2BCCB0();
    }
  }
  sub_22D2BCCB0();
  swift_bridgeObjectRetain();
  sub_22D2573E4(v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_22D085138((uint64_t)v8);
    type metadata accessor for WebRequestError();
    sub_22D085194();
    swift_allocError();
    uint64_t v18 = v26;
    void *v19 = v25;
    v19[1] = v18;
    swift_storeEnumTagMultiPayload();
    swift_willThrow();
    swift_bridgeObjectRelease();
    return sub_22CFF9C10(*(void *)v24, *(void *)(v24 + 8));
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v21 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    v21(v12, v8, v9);
    uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v21)(a3 + v13[6], v12, v9);
    char v22 = (void *)(a3 + v13[8]);
    *char v22 = 0x6F6E4B2D6C6C6557;
    v22[1] = 0xEF534B574A206E77;
  }
  return result;
}

uint64_t sub_22D085138(uint64_t a1)
{
  sub_22CFF9E78();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_22D085194()
{
  unint64_t result = qword_26853E8A0;
  if (!qword_26853E8A0)
  {
    type metadata accessor for WebRequestError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E8A0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D085200);
}

uint64_t sub_22D085200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for WellKnownJWKSRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D0852DC);
}

uint64_t sub_22D0852DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBAA0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_22D0853A0()
{
  uint64_t result = sub_22D2BBAA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D085454()
{
  return sub_22D2BCC30();
}

uint64_t sub_22D0854AC()
{
  MEMORY[0x230F7BDF0](*(void *)(v0 + 40), -1, -1);

  sub_22D074520(*(void *)(v0 + 24));
  return swift_deallocClassInstance();
}

uint64_t sub_22D0854FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_allocWithZone(MEMORY[0x263F086C0]);
  uint64_t v7 = (void *)sub_22D2BCBA0();
  id v8 = objc_msgSend(v6, sel_initWithIdentifier_, v7);

  objc_msgSend(v8, sel_setPreregistered_, 1);
  uint64_t v9 = swift_allocObject();
  swift_weakInit();
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  *(void *)(v10 + 24) = v8;
  v15[4] = sub_22D086C58;
  v15[5] = v10;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  v15[2] = sub_22D085718;
  v15[3] = &block_descriptor_6;
  uint64_t v11 = _Block_copy(v15);
  id v12 = v8;
  swift_release();
  objc_msgSend(v12, sel_scheduleWithBlock_, v11);

  _Block_release(v11);
  uint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = a2;
  *(void *)(a1 + 32) = a3;
  swift_retain();
  return sub_22D074520(v13);
}

uint64_t sub_22D08568C(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, void *a4)
{
  if (!swift_weakLoadStrong()) {
    return a1(1);
  }
  sub_22D085A58(a4, a1, a2);
  return swift_release();
}

uint64_t sub_22D085718(uint64_t a1, void *aBlock)
{
  uint64_t v2 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  uint64_t v3 = _Block_copy(aBlock);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v3;
  swift_retain();
  v2(sub_22D086CB0, v4);
  swift_release();
  return swift_release();
}

uint64_t sub_22D0857AC()
{
  uint64_t v1 = v0;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_22D2BC390();
  __swift_project_value_buffer(v2, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  uint64_t v3 = sub_22D2BC380();
  os_log_type_t v4 = sub_22D2BD040();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v10 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_getMetatypeMetadata();
    uint64_t v7 = sub_22D2BCC30();
    sub_22D0A4D24(v7, v8, &v10);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v3, v4, "%s: invalidated", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v6, -1, -1);
    MEMORY[0x230F7BDF0](v5, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  uint64_t v10 = *(void *)(v1 + 40);
  sub_22D086DEC(0, &qword_26AEC1F40, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
  sub_22D086B58();
  return sub_22D2BBEE0();
}

void sub_22D085A00(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  sub_22D074520(v2);
  objc_msgSend(*(id *)(a1 + 16), sel_invalidate);
  uint64_t v3 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;
}

uint64_t sub_22D085A58(void *a1, uint64_t (*a2)(void), uint64_t a3)
{
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_22D2BC390();
  __swift_project_value_buffer(v7, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  id v8 = a1;
  uint64_t v9 = sub_22D2BC380();
  os_log_type_t v10 = sub_22D2BD080();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v35 = a2;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v34 = swift_slowAlloc();
    v37[0] = v34;
    *(_DWORD *)uint64_t v11 = 136315394;
    swift_getMetatypeMetadata();
    uint64_t v12 = sub_22D2BCC30();
    os_log_type_t type = v10;
    sub_22D0A4D24(v12, v13, v37);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2080;
    id v14 = objc_msgSend(v8, sel_identifier);
    uint64_t v15 = a3;
    uint64_t v16 = sub_22D2BCBD0();
    unint64_t v18 = v17;

    uint64_t v19 = v16;
    a3 = v15;
    sub_22D0A4D24(v19, v18, v37);
    sub_22D2BD220();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v9, type, "%s: activity \"%s\" fired", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v34, -1, -1);
    uint64_t v20 = v11;
    a2 = v35;
    MEMORY[0x230F7BDF0](v20, -1, -1);
  }
  else
  {

    swift_release_n();
  }
  if (objc_msgSend(v8, sel_shouldDefer))
  {
    swift_retain_n();
    unint64_t v21 = sub_22D2BC380();
    os_log_type_t v22 = sub_22D2BD040();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      unint64_t v36 = a2;
      uint64_t v24 = swift_slowAlloc();
      v37[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_getMetatypeMetadata();
      uint64_t v25 = sub_22D2BCC30();
      sub_22D0A4D24(v25, v26, v37);
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22CFEE000, v21, v22, "%s: shouldDefer is true. Deferring!", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v24, -1, -1);
      MEMORY[0x230F7BDF0](v23, -1, -1);

      return v36(2);
    }

    swift_release_n();
    uint64_t v32 = 2;
  }
  else
  {
    sub_22D086DEC(0, &qword_26AEC1F40, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
    sub_22D086CCC();
    sub_22D086B58();
    sub_22D2BBED0();
    uint64_t v28 = (void (*)(uint64_t *))v37[0];
    if (v37[0])
    {
      uint64_t v29 = (void *)swift_allocObject();
      long long v29[2] = v3;
      v29[3] = a2;
      v29[4] = a3;
      v29[5] = v8;
      uint64_t v30 = swift_allocObject();
      *(void *)(v30 + 16) = sub_22D086E98;
      *(void *)(v30 + 24) = v29;
      v37[0] = (uint64_t)sub_22D086EDC;
      v37[1] = v30;
      swift_retain();
      id v31 = v8;
      swift_retain();
      swift_retain();
      v28(v37);
      swift_release();
      swift_release();
      return sub_22D074520((uint64_t)v28);
    }
    objc_msgSend(v8, sel_setInterval_, 86400.0);
    objc_msgSend(v8, sel_setTolerance_, 43200.0);
    uint64_t v32 = 1;
  }
  return a2(v32);
}

uint64_t sub_22D085FC0@<X0>(uint64_t a1@<X0>, uint64_t (**a2)(uint64_t *a1)@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  if (v3)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = sub_22D086EE4;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)(uint64_t *))v5;
  return sub_22D074424(v3);
}

uint64_t sub_22D086040(uint64_t *a1, void (*a2)(uint64_t (*)(uint64_t a1), uint64_t))
{
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  swift_retain();
  a2(sub_22D086EEC, v5);
  return swift_release();
}

void sub_22D0860D0(void *a1, uint64_t *a2, void (*a3)(void), uint64_t a4, void *a5)
{
  if (a1)
  {
    uint64_t v52 = (uint64_t)a1;
    id v9 = a1;
    id v10 = a1;
    sub_22CFF49FC();
    if (swift_dynamicCast())
    {
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v11 = sub_22D2BC390();
      __swift_project_value_buffer(v11, (uint64_t)qword_26AEC3C90);
      swift_retain_n();
      uint64_t v12 = sub_22D2BC380();
      os_log_type_t v13 = sub_22D2BD040();
      if (os_log_type_enabled(v12, v13))
      {
        id v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v15 = v51;
        *(_DWORD *)id v14 = 136315138;
        uint64_t v52 = *a2;
        swift_getMetatypeMetadata();
        uint64_t v16 = sub_22D2BCC30();
        uint64_t v52 = sub_22D0A4D24(v16, v17, &v51);
        sub_22D2BD220();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22CFEE000, v12, v13, "%s: shouldDefer returned from handler. Deferring!", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v15, -1, -1);
        MEMORY[0x230F7BDF0](v14, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      uint64_t v47 = 2;
    }
    else
    {
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v30 = sub_22D2BC390();
      __swift_project_value_buffer(v30, (uint64_t)qword_26AEC3C90);
      swift_retain();
      id v31 = a5;
      id v32 = a1;
      swift_retain();
      id v33 = v31;
      id v34 = a1;
      uint64_t v35 = sub_22D2BC380();
      os_log_type_t v36 = sub_22D2BD060();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        uint64_t v51 = v48;
        *(_DWORD *)uint64_t v37 = 136315650;
        uint64_t v52 = *a2;
        swift_getMetatypeMetadata();
        uint64_t v38 = sub_22D2BCC30();
        id v50 = a3;
        uint64_t v52 = sub_22D0A4D24(v38, v39, &v51);
        sub_22D2BD220();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2080;
        id v40 = objc_msgSend(v33, sel_identifier);
        uint64_t v41 = sub_22D2BCBD0();
        unint64_t v43 = v42;

        uint64_t v52 = sub_22D0A4D24(v41, v43, &v51);
        sub_22D2BD220();

        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 22) = 2080;
        uint64_t v52 = (uint64_t)a1;
        id v44 = a1;
        uint64_t v45 = sub_22D2BCC30();
        uint64_t v52 = sub_22D0A4D24(v45, v46, &v51);
        sub_22D2BD220();
        a3 = v50;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_22CFEE000, v35, v36, "%s: activity \"%s\" failed: %s", (uint8_t *)v37, 0x20u);
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v48, -1, -1);
        MEMORY[0x230F7BDF0](v37, -1, -1);
      }
      else
      {

        swift_release_n();
      }

      objc_msgSend(v33, sel_setInterval_, 86400.0);
      objc_msgSend(v33, sel_setTolerance_, 43200.0);
      uint64_t v47 = 1;
    }
    a3(v47);
  }
  else
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v18 = sub_22D2BC390();
    __swift_project_value_buffer(v18, (uint64_t)qword_26AEC3C90);
    swift_retain_n();
    id v19 = a5;
    uint64_t v20 = sub_22D2BC380();
    os_log_type_t v21 = sub_22D2BD080();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      uint64_t v23 = v51;
      *(_DWORD *)uint64_t v22 = 136315394;
      uint64_t v52 = *a2;
      swift_getMetatypeMetadata();
      uint64_t v24 = sub_22D2BCC30();
      id v49 = a3;
      uint64_t v52 = sub_22D0A4D24(v24, v25, &v51);
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2080;
      id v26 = objc_msgSend(v19, sel_identifier);
      uint64_t v27 = sub_22D2BCBD0();
      unint64_t v29 = v28;

      a3 = v49;
      uint64_t v52 = sub_22D0A4D24(v27, v29, &v51);
      sub_22D2BD220();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_22CFEE000, v20, v21, "%s: activity \"%s\" succeeded", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v23, -1, -1);
      MEMORY[0x230F7BDF0](v22, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    objc_msgSend(v19, sel_setInterval_, 604800.0);
    objc_msgSend(v19, sel_setTolerance_, 302400.0);
    a3(1);
  }
}

uint64_t sub_22D086888()
{
  return sub_22D2BBEE0();
}

uint64_t sub_22D086928()
{
  return sub_22D0857AC();
}

uint64_t static IssuerDirectoryDownloadTaskSchedulerError.== infix(_:_:)()
{
  return 1;
}

uint64_t IssuerDirectoryDownloadTaskSchedulerError.hash(into:)()
{
  return sub_22D2BD740();
}

uint64_t IssuerDirectoryDownloadTaskSchedulerError.hashValue.getter()
{
  return sub_22D2BD760();
}

unint64_t sub_22D0869C4()
{
  unint64_t result = qword_26853E8B8;
  if (!qword_26853E8B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E8B8);
  }
  return result;
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.activate(handler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.invalidate()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of IssuerDirectoryDownloadTaskScheduling.shouldDefer()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t type metadata accessor for IssuerDirectoryDownloadTaskScheduler()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for IssuerDirectoryDownloadTaskSchedulerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22D086B14);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for IssuerDirectoryDownloadTaskSchedulerError()
{
  return &type metadata for IssuerDirectoryDownloadTaskSchedulerError;
}

uint64_t sub_22D086B4C()
{
  return sub_22D0854FC(v0[2], v0[3], v0[4]);
}

unint64_t sub_22D086B58()
{
  unint64_t result = qword_26AEC2FD0;
  if (!qword_26AEC2FD0)
  {
    sub_22D086DEC(255, &qword_26AEC1F40, (uint64_t (*)(uint64_t))type metadata accessor for os_unfair_lock_s, MEMORY[0x263F8D8D0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC2FD0);
  }
  return result;
}

uint64_t sub_22D086BE0()
{
  swift_weakDestroy();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D086C18()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D086C58(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return sub_22D08568C(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t sub_22D086C78()
{
  _Block_release(*(const void **)(v0 + 16));
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D086CB0()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

uint64_t sub_22D086CC4@<X0>(uint64_t (**a1)(uint64_t *a1)@<X8>)
{
  return sub_22D085FC0(v1, a1);
}

void sub_22D086CCC()
{
  if (!qword_26853E8C0)
  {
    sub_22D086D60(255, &qword_26853E8C8, (void (*)(uint64_t))sub_22D086D40);
    unint64_t v0 = sub_22D2BD200();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E8C0);
    }
  }
}

uint64_t sub_22D086D40(uint64_t a1)
{
  return sub_22D086D60(a1, &qword_26AEC1FF8, sub_22D086DB8);
}

uint64_t sub_22D086D60(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a2;
  if (!*a2)
  {
    a3(255);
    uint64_t result = swift_getFunctionTypeMetadata1();
    atomic_store(result, a2);
  }
  return result;
}

void sub_22D086DB8(uint64_t a1)
{
}

void sub_22D086DEC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D086E50()
{
  swift_release();
  swift_release();

  return MEMORY[0x270FA0238](v0, 48, 7);
}

void sub_22D086E98(void *a1)
{
  sub_22D0860D0(a1, *(uint64_t **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_22D086EA4()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D086EDC(void *a1)
{
  return sub_22D1EC214(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_22D086EE4(uint64_t *a1)
{
  return sub_22D086040(a1, *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v1 + 16));
}

uint64_t sub_22D086EEC(uint64_t a1)
{
  return sub_22D1EC1DC(a1, *(uint64_t (**)(uint64_t *))(v1 + 16));
}

void sub_22D086EF4()
{
  sub_22D085A00(v0);
}

uint64_t sub_22D086F04(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 16);
  swift_getMetatypeMetadata();
  *(void *)(v2 + 16) = sub_22D2BCC30();
  *(void *)(v2 + 24) = v6;
  *(void *)(v2 + 32) = a1;
  *(_OWORD *)(v2 + 40) = *(_OWORD *)a2;
  *(void *)(v2 + 56) = v5;
  return v2;
}

uint64_t sub_22D086F90(uint64_t a1)
{
  v2[51] = a1;
  v2[52] = v1;
  uint64_t v3 = sub_22D2BBC90();
  v2[53] = v3;
  v2[54] = *(void *)(v3 - 8);
  v2[55] = swift_task_alloc();
  uint64_t v4 = sub_22D2BBAA0();
  v2[56] = v4;
  v2[57] = *(void *)(v4 - 8);
  v2[58] = swift_task_alloc();
  sub_22CFF9E78();
  v2[59] = swift_task_alloc();
  v2[60] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_22D0870E8, 0, 0);
}

uint64_t sub_22D0870E8()
{
  uint64_t v38 = v0;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_22D2BC390();
  v0[61] = __swift_project_value_buffer(v1, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  uint64_t v2 = sub_22D2BC380();
  os_log_type_t v3 = sub_22D2BD050();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[52];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v37 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v9 = *(void *)(v5 + 16);
    unint64_t v8 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[47] = sub_22D0A4D24(v9, v8, &v37);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    id v10 = objc_msgSend(*(id *)(v5 + 32), sel_webURL);
    if (v10)
    {
      uint64_t v11 = v10;
      sub_22D2BBA50();

      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v12 = 1;
    }
    uint64_t v14 = v0[59];
    uint64_t v13 = v0[60];
    uint64_t v15 = v0[56];
    uint64_t v16 = v0[57];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v12, 1, v15);
    sub_22D08A690(v14, v13);
    int v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15);
    uint64_t v18 = v0[60];
    if (v17 == 1)
    {
      sub_22D085138(v0[60]);
      uint64_t v19 = 0;
      uint64_t v20 = 0;
    }
    else
    {
      uint64_t v21 = v0[56];
      uint64_t v22 = v0[57];
      uint64_t v19 = sub_22D2BB9E0();
      uint64_t v20 = v23;
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v18, v21);
    }
    v0[42] = v19;
    v0[43] = v20;
    sub_22CFFA100();
    sub_22D2BD680();
    id v24 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v25 = sub_22D2BCC30();
    v0[50] = sub_22D0A4D24(v25, v26, &v37);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22CFEE000, v2, v3, "%s) Calling downloadDocument for %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v7, -1, -1);
    MEMORY[0x230F7BDF0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v27 = (void *)v0[52];
  uint64_t v28 = v27[5];
  v0[62] = v28;
  unint64_t v29 = (void *)v27[6];
  v0[63] = v29;
  uint64_t v30 = (void *)v27[7];
  v0[64] = v30;
  v0[39] = v28;
  v0[40] = v29;
  v0[41] = v30;
  uint64_t v31 = v27[4];
  v0[65] = v31;
  swift_retain();
  id v32 = v29;
  id v33 = v30;
  id v34 = (void *)swift_task_alloc();
  v0[66] = v34;
  void *v34 = v0;
  v34[1] = sub_22D0874D4;
  uint64_t v35 = v0[58];
  return sub_22D0B3B58(v35, v31, 0);
}

uint64_t sub_22D0874D4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
  {
    BOOL v4 = *(void **)(v2 + 504);
    os_log_type_t v3 = *(void **)(v2 + 512);
    swift_release();

    uint64_t v5 = sub_22D087C94;
  }
  else
  {
    uint64_t v7 = *(void **)(v2 + 504);
    uint64_t v6 = *(void **)(v2 + 512);
    swift_release();

    uint64_t v5 = sub_22D087618;
  }
  return MEMORY[0x270FA2498](v5, 0, 0);
}

uint64_t sub_22D087618()
{
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v3 = *(void *)(v0 + 424);
  BOOL v4 = *(void **)(v0 + 408);
  id v5 = objc_msgSend(*(id *)(v0 + 520), sel_identifier);
  sub_22D2BBC70();

  uint64_t v6 = sub_22D2BBC50();
  *(void *)(v0 + 544) = v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v7 = sub_22D2BBA10();
  *(void *)(v0 + 552) = v7;
  *(void *)(v0 + 16) = v0;
  *(void *)(v0 + 24) = sub_22D087790;
  uint64_t v8 = swift_continuation_init();
  *(void *)(v0 + 184) = MEMORY[0x263EF8330];
  *(void *)(v0 + 192) = 0x40000000;
  *(void *)(v0 + 200) = sub_22D1D3D08;
  *(void *)(v0 + 208) = &block_descriptor_12;
  *(void *)(v0 + 216) = v8;
  objc_msgSend(v4, sel_markDownloadCompleteForAttachmentWithIdentifier_fileURL_completion_, v6, v7, v0 + 184);
  return MEMORY[0x270FA23F0](v0 + 16);
}

uint64_t sub_22D087790()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 560) = v1;
  if (v1) {
    uint64_t v2 = sub_22D08809C;
  }
  else {
    uint64_t v2 = sub_22D0878A0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_22D0878A0()
{
  uint64_t v18 = v0;
  uint64_t v1 = *(void **)(v0 + 544);

  swift_retain_n();
  uint64_t v2 = sub_22D2BC380();
  os_log_type_t v3 = sub_22D2BD050();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v14 = *(void *)(v0 + 456);
    uint64_t v15 = *(void *)(v0 + 448);
    uint64_t v16 = *(void *)(v0 + 464);
    uint64_t v4 = *(void *)(v0 + 416);
    id v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    uint64_t v17 = v6;
    *(_DWORD *)id v5 = 136315138;
    uint64_t v7 = *(void *)(v4 + 16);
    unint64_t v8 = *(void *)(v4 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 368) = sub_22D0A4D24(v7, v8, &v17);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22CFEE000, v2, v3, "%s Successfully completed downloadDocument", v5, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v6, -1, -1);
    MEMORY[0x230F7BDF0](v5, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v16, v15);
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 464);
    uint64_t v11 = *(void *)(v0 + 448);

    swift_release_n();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_22D087AD8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 592) = v1;
  if (v1) {
    uint64_t v2 = sub_22D0884DC;
  }
  else {
    uint64_t v2 = sub_22D087BE8;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_22D087BE8()
{
  uint64_t v1 = *(void **)(v0 + 576);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_22D087C94()
{
  id v32 = v0;
  uint64_t v1 = (void *)v0[67];
  v0[71] = v1;
  swift_retain();
  id v2 = v1;
  swift_retain();
  id v3 = v1;
  uint64_t v4 = sub_22D2BC380();
  os_log_type_t v5 = sub_22D2BD060();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[52];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    os_log_type_t type = v5;
    uint64_t v31 = v30;
    uint64_t v8 = *(void *)(v6 + 16);
    unint64_t v9 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    v0[48] = sub_22D0A4D24(v8, v9, &v31);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[45] = v1;
    id v10 = v1;
    id v11 = v1;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v12 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v13 = sub_22D2BCC30();
    unint64_t v15 = v14;

    v0[44] = sub_22D0A4D24(v13, v15, &v31);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v4, type, "%s Error in downloadDocument: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v30, -1, -1);
    MEMORY[0x230F7BDF0](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v16 = (void *)v0[65];
  uint64_t v18 = v0[54];
  uint64_t v17 = v0[55];
  uint64_t v19 = v0[53];
  id v20 = objc_msgSend(v16, sel_identifier);
  sub_22D2BBC70();

  uint64_t v21 = sub_22D2BBC50();
  v0[72] = v21;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_getErrorValue();
  id v22 = sub_22D1E4268(v0[37], v0[38]);
  uint64_t v23 = sub_22D2BB9B0();
  v0[73] = v23;

  id v24 = (char *)objc_msgSend(v16, sel_retryCount);
  uint64_t v25 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    unint64_t v26 = (void *)v0[51];
    v0[10] = v0;
    v0[11] = sub_22D087AD8;
    uint64_t v27 = swift_continuation_init();
    v0[18] = MEMORY[0x263EF8330];
    v0[19] = 0x40000000;
    v0[20] = sub_22D1D3D08;
    v0[21] = &block_descriptor_10;
    v0[22] = v27;
    objc_msgSend(v26, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v21, 1, v23, v25, v0 + 18);
    id v24 = (char *)(v0 + 10);
  }
  return MEMORY[0x270FA23F0](v24);
}

uint64_t sub_22D08809C()
{
  uint64_t v37 = v0;
  uint64_t v1 = (void *)v0[69];
  id v2 = (void *)v0[68];
  uint64_t v4 = v0[57];
  uint64_t v3 = v0[58];
  uint64_t v5 = v0[56];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);

  uint64_t v6 = (void *)v0[70];
  v0[71] = v6;
  swift_retain();
  id v7 = v6;
  swift_retain();
  id v8 = v6;
  unint64_t v9 = sub_22D2BC380();
  os_log_type_t v10 = sub_22D2BD060();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v0[52];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_type_t type = v10;
    v36[0] = v35;
    uint64_t v13 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    v0[48] = sub_22D0A4D24(v13, v14, v36);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[45] = v6;
    id v15 = v6;
    id v16 = v6;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v17 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v18 = sub_22D2BCC30();
    unint64_t v20 = v19;

    v0[44] = sub_22D0A4D24(v18, v20, v36);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v9, type, "%s Error in downloadDocument: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v35, -1, -1);
    MEMORY[0x230F7BDF0](v12, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v21 = (void *)v0[65];
  uint64_t v23 = v0[54];
  uint64_t v22 = v0[55];
  uint64_t v24 = v0[53];
  id v25 = objc_msgSend(v21, sel_identifier);
  sub_22D2BBC70();

  uint64_t v26 = sub_22D2BBC50();
  v0[72] = v26;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_getErrorValue();
  id v27 = sub_22D1E4268(v0[37], v0[38]);
  uint64_t v28 = sub_22D2BB9B0();
  v0[73] = v28;

  unint64_t v29 = (char *)objc_msgSend(v21, sel_retryCount);
  uint64_t v30 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = (void *)v0[51];
    v0[10] = v0;
    v0[11] = sub_22D087AD8;
    uint64_t v32 = swift_continuation_init();
    v0[18] = MEMORY[0x263EF8330];
    v0[19] = 0x40000000;
    v0[20] = sub_22D1D3D08;
    v0[21] = &block_descriptor_10;
    v0[22] = v32;
    objc_msgSend(v31, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v26, 1, v28, v30, v0 + 18);
    unint64_t v29 = (char *)(v0 + 10);
  }
  return MEMORY[0x270FA23F0](v29);
}

uint64_t sub_22D0884DC()
{
  uint64_t v1 = (void *)v0[73];
  id v2 = (void *)v0[72];
  uint64_t v3 = (void *)v0[71];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_22D088594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[68] = v3;
  v4[67] = a3;
  v4[66] = a2;
  v4[65] = a1;
  uint64_t v5 = sub_22D2BBC90();
  v4[69] = v5;
  v4[70] = *(void *)(v5 - 8);
  v4[71] = swift_task_alloc();
  sub_22CFF9E78();
  v4[72] = swift_task_alloc();
  v4[73] = swift_task_alloc();
  v4[74] = swift_task_alloc();
  return MEMORY[0x270FA2498](sub_22D0886A8, 0, 0);
}

uint64_t sub_22D0886A8()
{
  id v34 = v0;
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v1 = sub_22D2BC390();
  v0[75] = __swift_project_value_buffer(v1, (uint64_t)qword_26AEC3C90);
  swift_retain_n();
  id v2 = sub_22D2BC380();
  os_log_type_t v3 = sub_22D2BD050();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[68];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    uint64_t v33 = v7;
    *(_DWORD *)uint64_t v6 = 136315394;
    uint64_t v9 = *(void *)(v5 + 16);
    unint64_t v8 = *(void *)(v5 + 24);
    swift_bridgeObjectRetain();
    v0[61] = sub_22D0A4D24(v9, v8, &v33);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    *(_WORD *)(v6 + 12) = 2080;
    id v10 = objc_msgSend(*(id *)(v5 + 32), sel_webURL);
    uint64_t v11 = v0[73];
    if (v10)
    {
      uint64_t v12 = v10;
      sub_22D2BBA50();

      uint64_t v13 = sub_22D2BBAA0();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 0, 1, v13);
    }
    else
    {
      uint64_t v13 = sub_22D2BBAA0();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v11, 1, 1, v13);
    }
    uint64_t v14 = v0[74];
    sub_22D08A690(v0[73], v14);
    sub_22D2BBAA0();
    uint64_t v15 = *(void *)(v13 - 8);
    int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v13);
    uint64_t v17 = v0[74];
    if (v16 == 1)
    {
      sub_22D085138(v0[74]);
      uint64_t v18 = 0;
      uint64_t v19 = 0;
    }
    else
    {
      uint64_t v18 = sub_22D2BB9E0();
      uint64_t v19 = v20;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v13);
    }
    v0[55] = v18;
    v0[56] = v19;
    sub_22CFFA100();
    sub_22D2BD680();
    id v21 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v22 = sub_22D2BCC30();
    v0[64] = sub_22D0A4D24(v22, v23, &v33);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22CFEE000, v2, v3, "%s Calling queryFHIRServer for %s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v7, -1, -1);
    MEMORY[0x230F7BDF0](v6, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  uint64_t v24 = (void *)v0[68];
  uint64_t v25 = v24[5];
  v0[76] = v25;
  uint64_t v26 = (void *)v24[6];
  v0[77] = v26;
  id v27 = (void *)v24[7];
  v0[78] = v27;
  v0[49] = v25;
  v0[50] = v26;
  v0[51] = v27;
  uint64_t v28 = v24[4];
  v0[79] = v28;
  swift_retain();
  id v29 = v26;
  id v30 = v27;
  uint64_t v31 = (void *)swift_task_alloc();
  v0[80] = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_22D088B04;
  return sub_22D0B4C8C(v28, 0);
}

uint64_t sub_22D088B04(uint64_t a1, uint64_t a2)
{
  BOOL v4 = (void *)*v3;
  v4[81] = a1;
  v4[82] = a2;
  v4[83] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = (void *)v4[78];
    uint64_t v6 = (void *)v4[77];
    swift_release();

    uint64_t v7 = sub_22D089628;
  }
  else
  {
    unint64_t v8 = (void *)v4[78];
    uint64_t v9 = (void *)v4[77];
    swift_release();

    uint64_t v7 = sub_22D088C58;
  }
  return MEMORY[0x270FA2498](v7, 0, 0);
}

uint64_t sub_22D088C58()
{
  unint64_t v1 = v0[82];
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[72];
  BOOL v4 = (void *)v0[66];
  uint64_t v5 = sub_22D2BBAA0();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v3, 1, 1, v5);
  sub_22CFF9B64(v2, v1);
  id v7 = v4;
  unint64_t v8 = (void *)sub_22D2BBB00();
  uint64_t v9 = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v5) != 1)
  {
    uint64_t v10 = v0[72];
    uint64_t v9 = (void *)sub_22D2BBA10();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v10, v5);
  }
  unint64_t v11 = v0[82];
  uint64_t v12 = v0[81];
  id v17 = (id)v0[67];
  uint64_t v13 = (void *)v0[66];
  id v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F45C08]), sel_initWithData_sourceURL_FHIRVersion_, v8, v9, v13);
  v0[84] = v14;

  sub_22CFF5630(v12, v11);
  v0[2] = v0;
  v0[7] = v0 + 57;
  v0[3] = sub_22D088EA0;
  uint64_t v15 = swift_continuation_init();
  v0[26] = MEMORY[0x263EF8330];
  v0[27] = 0x40000000;
  v0[28] = sub_22D08A360;
  v0[29] = &block_descriptor_7;
  v0[30] = v15;
  objc_msgSend(v17, sel_extractAttachmentContentFromFHIRResource_completion_, v14, v0 + 26);
  return MEMORY[0x270FA23F0](v0 + 2);
}

uint64_t sub_22D088EA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 680) = v1;
  if (v1) {
    uint64_t v2 = sub_22D089A34;
  }
  else {
    uint64_t v2 = sub_22D088FB0;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_22D088FB0()
{
  uint64_t v1 = (void *)v0[79];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  uint64_t v5 = (void *)v0[65];
  uint64_t v6 = v0[57];
  v0[86] = v6;
  id v7 = objc_msgSend(v1, sel_identifier);
  sub_22D2BBC70();

  uint64_t v8 = sub_22D2BBC50();
  v0[87] = v8;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  v0[10] = v0;
  v0[11] = sub_22D089120;
  uint64_t v9 = swift_continuation_init();
  v0[36] = MEMORY[0x263EF8330];
  v0[37] = 0x40000000;
  v0[38] = sub_22D1D3D08;
  v0[39] = &block_descriptor_8;
  v0[40] = v9;
  objc_msgSend(v5, sel_markDataAvailableForAttachmentWithIdentifier_attachmentContent_completion_, v8, v6, v0 + 36);
  return MEMORY[0x270FA23F0](v0 + 10);
}

uint64_t sub_22D089120()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 112);
  *(void *)(*(void *)v0 + 704) = v1;
  if (v1) {
    uint64_t v2 = sub_22D089E64;
  }
  else {
    uint64_t v2 = sub_22D089230;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_22D089230()
{
  uint64_t v17 = v0;

  swift_retain_n();
  uint64_t v1 = sub_22D2BC380();
  os_log_type_t v2 = sub_22D2BD050();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v12 = *(void **)(v0 + 688);
    unint64_t v15 = *(void *)(v0 + 656);
    uint64_t v13 = *(void **)(v0 + 672);
    uint64_t v14 = *(void *)(v0 + 648);
    uint64_t v3 = *(void *)(v0 + 544);
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v6 = *(void *)(v3 + 16);
    unint64_t v7 = *(void *)(v3 + 24);
    swift_bridgeObjectRetain();
    *(void *)(v0 + 480) = sub_22D0A4D24(v6, v7, &v16);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_22CFEE000, v1, v2, "%s Successfully completed queryFHIRServer", v4, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v5, -1, -1);
    MEMORY[0x230F7BDF0](v4, -1, -1);

    sub_22CFF5630(v14, v15);
  }
  else
  {
    uint64_t v8 = *(void **)(v0 + 688);
    uint64_t v9 = *(void **)(v0 + 672);
    sub_22CFF5630(*(void *)(v0 + 648), *(void *)(v0 + 656));
    swift_release_n();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_22D089468()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 176);
  *(void *)(*(void *)v0 + 736) = v1;
  if (v1) {
    os_log_type_t v2 = sub_22D08A2A4;
  }
  else {
    os_log_type_t v2 = sub_22D089578;
  }
  return MEMORY[0x270FA2498](v2, 0, 0);
}

uint64_t sub_22D089578()
{
  uint64_t v1 = *(void **)(v0 + 720);

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_22D089628()
{
  uint64_t v32 = v0;
  uint64_t v1 = (void *)v0[83];
  v0[89] = v1;
  swift_retain();
  id v2 = v1;
  swift_retain();
  id v3 = v1;
  uint64_t v4 = sub_22D2BC380();
  os_log_type_t v5 = sub_22D2BD060();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[68];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315394;
    os_log_type_t type = v5;
    uint64_t v31 = v30;
    uint64_t v8 = *(void *)(v6 + 16);
    unint64_t v9 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_22D0A4D24(v8, v9, &v31);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2080;
    v0[59] = v1;
    id v10 = v1;
    id v11 = v1;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v12 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v13 = sub_22D2BCC30();
    unint64_t v15 = v14;

    v0[58] = sub_22D0A4D24(v13, v15, &v31);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v4, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v30, -1, -1);
    MEMORY[0x230F7BDF0](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v16 = (void *)v0[79];
  uint64_t v17 = v0[71];
  uint64_t v18 = v0[70];
  uint64_t v19 = v0[69];
  id v20 = objc_msgSend(v16, sel_identifier);
  sub_22D2BBC70();

  uint64_t v21 = sub_22D2BBC50();
  v0[90] = v21;
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
  swift_getErrorValue();
  id v22 = sub_22D1E4268(v0[53], v0[54]);
  uint64_t v23 = sub_22D2BB9B0();
  v0[91] = v23;

  uint64_t v24 = (char *)objc_msgSend(v16, sel_retryCount);
  uint64_t v25 = v24 + 1;
  if (__OFADD__(v24, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v26 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_22D089468;
    uint64_t v27 = swift_continuation_init();
    v0[31] = MEMORY[0x263EF8330];
    v0[32] = 0x40000000;
    v0[33] = sub_22D1D3D08;
    v0[34] = &block_descriptor;
    v0[35] = v27;
    objc_msgSend(v26, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v21, 1, v23, v25, v0 + 31);
    uint64_t v24 = (char *)(v0 + 18);
  }
  return MEMORY[0x270FA23F0](v24);
}

uint64_t sub_22D089A34()
{
  uint64_t v35 = v0;
  uint64_t v1 = (void *)v0[84];
  unint64_t v2 = v0[82];
  uint64_t v3 = v0[81];
  swift_willThrow();
  sub_22CFF5630(v3, v2);

  uint64_t v4 = (void *)v0[85];
  v0[89] = v4;
  swift_retain();
  id v5 = v4;
  swift_retain();
  id v6 = v4;
  uint64_t v7 = sub_22D2BC380();
  os_log_type_t v8 = sub_22D2BD060();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v0[68];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315394;
    os_log_type_t type = v8;
    v34[0] = v33;
    uint64_t v11 = *(void *)(v9 + 16);
    unint64_t v12 = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_22D0A4D24(v11, v12, v34);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v10 + 12) = 2080;
    v0[59] = v4;
    id v13 = v4;
    id v14 = v4;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v15 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v16 = sub_22D2BCC30();
    unint64_t v18 = v17;

    v0[58] = sub_22D0A4D24(v16, v18, v34);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v7, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v33, -1, -1);
    MEMORY[0x230F7BDF0](v10, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v19 = (void *)v0[79];
  uint64_t v20 = v0[71];
  uint64_t v21 = v0[70];
  uint64_t v22 = v0[69];
  id v23 = objc_msgSend(v19, sel_identifier);
  sub_22D2BBC70();

  uint64_t v24 = sub_22D2BBC50();
  v0[90] = v24;
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  swift_getErrorValue();
  id v25 = sub_22D1E4268(v0[53], v0[54]);
  uint64_t v26 = sub_22D2BB9B0();
  v0[91] = v26;

  uint64_t v27 = (char *)objc_msgSend(v19, sel_retryCount);
  uint64_t v28 = v27 + 1;
  if (__OFADD__(v27, 1))
  {
    __break(1u);
  }
  else
  {
    id v29 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_22D089468;
    uint64_t v30 = swift_continuation_init();
    v0[31] = MEMORY[0x263EF8330];
    v0[32] = 0x40000000;
    v0[33] = sub_22D1D3D08;
    v0[34] = &block_descriptor;
    v0[35] = v30;
    objc_msgSend(v29, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v24, 1, v26, v28, v0 + 31);
    uint64_t v27 = (char *)(v0 + 18);
  }
  return MEMORY[0x270FA23F0](v27);
}

uint64_t sub_22D089E64()
{
  uint64_t v37 = v0;
  uint64_t v1 = (void *)v0[87];
  unint64_t v2 = (void *)v0[86];
  uint64_t v3 = (void *)v0[84];
  unint64_t v4 = v0[82];
  uint64_t v5 = v0[81];
  swift_willThrow();
  sub_22CFF5630(v5, v4);

  id v6 = (void *)v0[88];
  v0[89] = v6;
  swift_retain();
  id v7 = v6;
  swift_retain();
  id v8 = v6;
  uint64_t v9 = sub_22D2BC380();
  os_log_type_t v10 = sub_22D2BD060();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = v0[68];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315394;
    os_log_type_t type = v10;
    v36[0] = v35;
    uint64_t v13 = *(void *)(v11 + 16);
    unint64_t v14 = *(void *)(v11 + 24);
    swift_bridgeObjectRetain();
    v0[62] = sub_22D0A4D24(v13, v14, v36);
    sub_22D2BD220();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v0[59] = v6;
    id v15 = v6;
    id v16 = v6;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v17 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v18 = sub_22D2BCC30();
    unint64_t v20 = v19;

    v0[58] = sub_22D0A4D24(v18, v20, v36);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_22CFEE000, v9, type, "%s Error in queryFHIRServer: %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v35, -1, -1);
    MEMORY[0x230F7BDF0](v12, -1, -1);
  }
  else
  {
    swift_release_n();
  }
  uint64_t v21 = (void *)v0[79];
  uint64_t v22 = v0[71];
  uint64_t v23 = v0[70];
  uint64_t v24 = v0[69];
  id v25 = objc_msgSend(v21, sel_identifier);
  sub_22D2BBC70();

  uint64_t v26 = sub_22D2BBC50();
  v0[90] = v26;
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v22, v24);
  swift_getErrorValue();
  id v27 = sub_22D1E4268(v0[53], v0[54]);
  uint64_t v28 = sub_22D2BB9B0();
  v0[91] = v28;

  id v29 = (char *)objc_msgSend(v21, sel_retryCount);
  uint64_t v30 = v29 + 1;
  if (__OFADD__(v29, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = (void *)v0[65];
    v0[18] = v0;
    v0[19] = sub_22D089468;
    uint64_t v32 = swift_continuation_init();
    v0[31] = MEMORY[0x263EF8330];
    v0[32] = 0x40000000;
    v0[33] = sub_22D1D3D08;
    v0[34] = &block_descriptor;
    v0[35] = v32;
    objc_msgSend(v31, sel_updateErrorStatusAndRetryCountForAttachmentWithIdentifier_errorStatus_lastError_retryCount_completion_, v26, 1, v28, v30, v0 + 31);
    id v29 = (char *)(v0 + 18);
  }
  return MEMORY[0x270FA23F0](v29);
}

uint64_t sub_22D08A2A4()
{
  uint64_t v1 = (void *)v0[91];
  unint64_t v2 = (void *)v0[90];
  uint64_t v3 = (void *)v0[89];
  swift_willThrow();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_22D08A360(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_22CFF49FC();
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    return MEMORY[0x270FA2410](v3, v5);
  }
  else
  {
    if (a2)
    {
      **(void **)(*(void *)(v3 + 64) + 40) = a2;
      id v8 = a2;
      a1 = v3;
    }
    else
    {
      __break(1u);
    }
    return MEMORY[0x270FA2408](a1);
  }
}

uint64_t sub_22D08A41C()
{
  swift_bridgeObjectRelease();

  uint64_t v1 = *(void **)(v0 + 48);
  swift_release();
  return swift_deallocClassInstance();
}

BOOL static ClinicalDocumentDownloadTaskError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t ClinicalDocumentDownloadTaskError.hash(into:)()
{
  return sub_22D2BD740();
}

uint64_t ClinicalDocumentDownloadTaskError.hashValue.getter()
{
  return sub_22D2BD760();
}

unint64_t sub_22D08A514()
{
  unint64_t result = qword_26853E8D0;
  if (!qword_26853E8D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_26853E8D0);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalDocumentDownloadTask()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ClinicalDocumentDownloadTaskError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x22D08A658);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalDocumentDownloadTaskError()
{
  return &type metadata for ClinicalDocumentDownloadTaskError;
}

uint64_t sub_22D08A690(uint64_t a1, uint64_t a2)
{
  sub_22CFF9E78();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRMeta()
{
  return &type metadata for ClinicalSharingFHIRMeta;
}

uint64_t sub_22D08A704()
{
  return 0x616470557473616CLL;
}

uint64_t sub_22D08A724@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x616470557473616CLL && a2 == 0xEB00000000646574)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_22D2BD660();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

void sub_22D08A7D4(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_22D08A7E0(uint64_t a1)
{
  unint64_t v2 = sub_22D08AA28();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D08A81C(uint64_t a1)
{
  unint64_t v2 = sub_22D08AA28();
  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_22D08A858@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_22D08A9CC();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D08AA28();
  sub_22D2BD7A0();
  if (v2) {
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  uint64_t v10 = sub_22D2BD500();
  uint64_t v12 = v11;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  *a2 = v10;
  a2[1] = v12;
  return result;
}

void sub_22D08A9CC()
{
  if (!qword_26853E8E8)
  {
    sub_22D08AA28();
    unint64_t v0 = sub_22D2BD570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E8E8);
    }
  }
}

unint64_t sub_22D08AA28()
{
  unint64_t result = qword_26853E8F0;
  if (!qword_26853E8F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E8F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingFHIRMeta.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22D08AB18);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRMeta.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRMeta.CodingKeys;
}

unint64_t sub_22D08AB54()
{
  unint64_t result = qword_26853E8F8;
  if (!qword_26853E8F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E8F8);
  }
  return result;
}

unint64_t sub_22D08ABAC()
{
  unint64_t result = qword_26853E900;
  if (!qword_26853E900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E900);
  }
  return result;
}

unint64_t sub_22D08AC04()
{
  unint64_t result = qword_26853E908;
  if (!qword_26853E908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E908);
  }
  return result;
}

uint64_t *sub_22D08AC58(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = sub_22D2BBAA0();
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v11;
    *(uint64_t *)((char *)a1 + v10) = *(uint64_t *)((char *)a2 + v10);
    uint64_t v12 = a3[8];
    uint64_t v13 = a3[9];
    uint64_t v14 = (uint64_t *)((char *)a1 + v12);
    id v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    void *v14 = *v15;
    v14[1] = v16;
    id v17 = (uint64_t *)((char *)a1 + v13);
    uint64_t v18 = (uint64_t *)((char *)a2 + v13);
    uint64_t v19 = v18[1];
    void *v17 = *v18;
    v17[1] = v19;
    id v20 = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_22D08AD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_22D2BBAA0();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_22D08AE4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v11 = a3[8];
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)(a1 + v11);
  uint64_t v14 = (void *)(a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = (void *)(a1 + v12);
  id v17 = (void *)(a2 + v12);
  uint64_t v18 = v17[1];
  void *v16 = *v17;
  v16[1] = v18;
  id v19 = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_22D08AF30(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a2 + v8);
  uint64_t v10 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  id v11 = v9;

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  id v17 = (void *)(a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22D08B044(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_22D08B104(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);

  uint64_t v10 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  id v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *id v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[9];
  uint64_t v16 = (void *)(a1 + v15);
  id v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_22D08B1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x270FA0340](a1, a2, a3, sub_22D08B204);
}

uint64_t sub_22D08B204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_22D2BBAA0();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_22D08B2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x270FA0580](a1, a2, a3, a4, sub_22D08B2D8);
}

uint64_t sub_22D08B2D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_22D2BBAA0();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for ClinicalSharingCloudStandardAPI()
{
  uint64_t result = qword_26AEC18A0;
  if (!qword_26AEC18A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_22D08B3E0()
{
  uint64_t result = sub_22D2BBAA0();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_22D08B494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v37 = a4;
  sub_22CFF9E78();
  uint64_t v10 = MEMORY[0x270FA5388](v9 - 8);
  uint64_t v38 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_22D2BBAA0();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v35 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v44 = (char *)&v33 - v18;
  uint64_t v19 = (int *)type metadata accessor for ClinicalSharingCloudStandardAPI();
  id v20 = (void *)(a5 + v19[8]);
  *id v20 = 1414745936;
  v20[1] = 0xE400000000000000;
  uint64_t v41 = v20;
  uint64_t v42 = a1;
  uint64_t v21 = v19[9];
  uint64_t v36 = a5;
  uint64_t v22 = (void *)(a5 + v21);
  *uint64_t v22 = 0xD000000000000016;
  v22[1] = 0x800000022D2D6940;
  uint64_t v40 = a5 + v21;
  uint64_t v43 = a2;
  swift_bridgeObjectRetain();
  sub_22D2BCCB0();
  sub_22D2BBA90();
  swift_bridgeObjectRelease();
  uint64_t v39 = v15;
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v23(v13, 1, v14) == 1)
  {
    uint64_t v24 = (uint64_t)v13;
    uint64_t v25 = a1;
LABEL_5:
    sub_22D08EB20(v24, (uint64_t (*)(void))sub_22CFF9E78);
    sub_22D04344C();
    swift_allocError();
    *(void *)uint64_t v27 = v25;
    *(void *)(v27 + 8) = a2;
    *(void *)(v27 + 16) = 0;
    *(void *)(v27 + 24) = 0;
    *(unsigned char *)(v27 + 32) = 0;
    swift_willThrow();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  id v34 = a3;
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v33(v44, v13, v14);
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  swift_bridgeObjectRetain();
  sub_22D2BCCB0();
  uint64_t v26 = v38;
  sub_22D2BBA90();
  swift_bridgeObjectRelease();
  if (v23(v26, 1, v14) == 1)
  {
    uint64_t v25 = a1;
    (*(void (**)(char *, uint64_t))(v39 + 8))(v44, v14);
    a3 = v34;
    uint64_t v24 = (uint64_t)v26;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  id v29 = v35;
  uint64_t v30 = v26;
  uint64_t v31 = (void (*)(uint64_t, char *, uint64_t))v33;
  v33(v35, v30, v14);
  uint64_t v32 = v36;
  v31(v36, v44, v14);
  uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v32 + v19[5], v29, v14);
  *(void *)(v32 + v19[6]) = v34;
  *(void *)(v32 + v19[7]) = v37;
  return result;
}

uint64_t sub_22D08B870(uint64_t a1, uint64_t a2)
{
  uint64_t v26 = a2;
  uint64_t v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  uint64_t v31 = *(void *)(v4 - 8);
  uint64_t v30 = *(void *)(v31 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v28 = (uint64_t)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_22D2BB5B0();
  uint64_t v6 = *(void *)(v27 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v27);
  uint64_t v32 = (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse;
  sub_22D08E5A4(0, &qword_26853E968, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  uint64_t v34 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)v25 - v10;
  sub_22D08E65C();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v35 = v12;
  uint64_t v36 = v13;
  MEMORY[0x270FA5388](v12);
  id v29 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = sub_22D08BD38(a1, a2);
  sub_22D08E760(0, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  type metadata accessor for PBPushBlobsResponse(0);
  sub_22D08CEB8(&qword_26853E928, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  sub_22D2BC7F0();
  swift_release();
  uint64_t v15 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v27);
  uint64_t v16 = v28;
  sub_22D08EAB8(v25[1], v28, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  unint64_t v17 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v18 = (v7 + *(unsigned __int8 *)(v31 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v19 + v17, (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v15);
  sub_22D08D724(v16, v19 + v18);
  sub_22D08E760(0, &qword_26853E978, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  sub_22D08CE68(&qword_26853E980, &qword_26853E968, v32);
  sub_22D08CEB8((unint64_t *)&qword_26853E988, &qword_26853E978, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  id v20 = v29;
  uint64_t v21 = v33;
  sub_22D2BC850();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v21);
  sub_22D08D7BC(&qword_26853E990, (void (*)(uint64_t))sub_22D08E65C);
  uint64_t v22 = v35;
  uint64_t v23 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v20, v22);
  return v23;
}

uint64_t sub_22D08BD38(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  uint64_t v34 = *(void *)(v4 - 8);
  uint64_t v33 = *(void *)(v34 + 64);
  MEMORY[0x270FA5388](v4);
  uint64_t v32 = (uint64_t)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_22D2BB5B0();
  uint64_t v6 = *(void *)(v30 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v30);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_22D2BCF60();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D08E318();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v35 = v13;
  uint64_t v36 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D08E3C4();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v37 = v17;
  uint64_t v38 = v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v31 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BCF70();
  sub_22D08CCBC();
  sub_22D08D7BC(&qword_26853D8C0, MEMORY[0x263F07C30]);
  sub_22D2BC7F0();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v20 = v30;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v30);
  uint64_t v21 = v32;
  sub_22D08EAB8(v2, v32, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  unint64_t v22 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v23 = (v7 + *(unsigned __int8 *)(v34 + 80) + v22) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v39;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v24 + v22, v8, v20);
  sub_22D08D724(v21, v24 + v23);
  sub_22D08E760(0, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  sub_22D08D7BC(&qword_26853E958, (void (*)(uint64_t))sub_22D08E318);
  sub_22D08CEB8(&qword_26853E928, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  uint64_t v25 = v31;
  uint64_t v26 = v35;
  sub_22D2BC850();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v26);
  sub_22D08D7BC(&qword_26853E960, (void (*)(uint64_t))sub_22D08E3C4);
  uint64_t v27 = v37;
  uint64_t v28 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v25, v27);
  return v28;
}

void sub_22D08C27C(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = type metadata accessor for PBBlobPushResult(0);
  uint64_t v39 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_22D2BC000();
  uint64_t v41 = *(void *)(v12 - 8);
  uint64_t v42 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v40 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v43 = (char *)&v38 - v15;
  uint64_t v16 = sub_22D2BC040();
  MEMORY[0x270FA5388](v16 - 8);
  type metadata accessor for PBPushBlobsResponse(0);
  uint64_t v46 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  sub_22CFF9B64(a2, a3);
  sub_22D2BC030();
  sub_22D08D7BC(&qword_26853E998, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
  sub_22D2BC1D0();
  uint64_t v17 = v4;
  if (!v4)
  {
    uint64_t v18 = v39;
    uint64_t v38 = a4;
    if (objc_msgSend(a1, sel_statusCode) != (id)207) {
      return;
    }
    uint64_t v19 = v38;
    uint64_t v20 = *(void *)(*(void *)v38 + 16);
    if (v20)
    {
      uint64_t v21 = *(void *)v38
          + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
      uint64_t v22 = *(void *)(v18 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_22D08EAB8(v21, (uint64_t)v11, type metadata accessor for PBBlobPushResult);
        uint64_t v23 = *(void *)&v11[*(int *)(v9 + 20)];
        swift_beginAccess();
        uint64_t v24 = *(void *)(v23 + 48);
        LODWORD(v23) = *(unsigned __int8 *)(v23 + 56);
        sub_22D08EB20((uint64_t)v11, type metadata accessor for PBBlobPushResult);
        if (v23 == 1)
        {
          if (v24 == 4)
          {
LABEL_9:
            swift_bridgeObjectRelease();
            sub_22D04344C();
            uint64_t v17 = (void *)swift_allocError();
            *(void *)uint64_t v25 = 1;
            *(void *)(v25 + 8) = 0;
            *(void *)(v25 + 16) = 0;
            *(void *)(v25 + 24) = 0;
            *(unsigned char *)(v25 + 32) = 6;
            swift_willThrow();
            uint64_t v26 = v38;
            goto LABEL_12;
          }
        }
        else if (v24 == 5)
        {
          goto LABEL_9;
        }
        v21 += v22;
        --v20;
      }
      while (v20);
      swift_bridgeObjectRelease();
      uint64_t v19 = v38;
    }
    id v27 = objc_msgSend(a1, sel_statusCode);
    sub_22D04344C();
    uint64_t v17 = (void *)swift_allocError();
    *(void *)uint64_t v28 = v27;
    *(void *)(v28 + 8) = 0;
    *(void *)(v28 + 16) = 0;
    *(void *)(v28 + 24) = 0;
    *(unsigned char *)(v28 + 32) = 1;
    swift_willThrow();
    uint64_t v26 = v19;
LABEL_12:
    sub_22D08EB20(v26, type metadata accessor for PBPushBlobsResponse);
  }
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  id v47 = v17;
  id v31 = v17;
  sub_22CFF49FC();
  if (swift_dynamicCast())
  {

    uint64_t v33 = v40;
    uint64_t v32 = v41;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v40, v30, v29);
    sub_22D08D7BC(&qword_26853E9A0, MEMORY[0x263F50578]);
    uint64_t v34 = sub_22D2BD6D0();
    uint64_t v36 = v35;
    sub_22D04344C();
    swift_allocError();
    *(void *)uint64_t v37 = v34;
    *(void *)(v37 + 8) = v36;
    *(void *)(v37 + 16) = 0xD000000000000013;
    *(void *)(v37 + 24) = 0x800000022D2D6920;
    *(unsigned char *)(v37 + 32) = 4;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v33, v29);
  }
}

void sub_22D08C788(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_22D08C7AC(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = a1;
  uint64_t v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v34 = *(void *)(v35 + 64);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v33 = (uint64_t)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_22D2BB5B0();
  uint64_t v6 = *(void *)(v32 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  MEMORY[0x270FA5388](v32);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse;
  sub_22D08E5A4(0, &qword_26853E910, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v37 = v9;
  uint64_t v38 = v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v28 - v11;
  sub_22D08CD64();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v39 = v13;
  uint64_t v40 = v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = a2;
  uint64_t v41 = sub_22D08BD38(a1, a2);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_22D08CF18;
  *(void *)(v18 + 24) = v17;
  sub_22D08E760(0, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  type metadata accessor for PBDeleteBlobsResponse(0);
  sub_22D08CEB8(&qword_26853E928, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
  sub_22D2BC7F0();
  swift_release();
  swift_release();
  uint64_t v19 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v32);
  uint64_t v20 = v33;
  sub_22D08EAB8(v30, v33, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v22 = (v7 + *(unsigned __int8 *)(v35 + 80) + v21) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v31;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v21, v8, v19);
  sub_22D08D724(v20, v23 + v22);
  sub_22D08E760(0, &qword_26AEC1D68, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  sub_22D08CE68(&qword_26853E938, &qword_26853E910, v36);
  sub_22D08CEB8(&qword_26AEC1D60, &qword_26AEC1D68, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
  uint64_t v24 = v37;
  sub_22D2BC850();
  swift_release();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v24);
  sub_22D08D7BC(&qword_26853E940, (void (*)(uint64_t))sub_22D08CD64);
  uint64_t v25 = v39;
  uint64_t v26 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v25);
  return v26;
}

void sub_22D08CCBC()
{
  if (!qword_26853E920)
  {
    sub_22D08CD24();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26853E920);
    }
  }
}

unint64_t sub_22D08CD24()
{
  unint64_t result = qword_26853DF98;
  if (!qword_26853DF98)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_26853DF98);
  }
  return result;
}

void sub_22D08CD64()
{
  if (!qword_26853E930)
  {
    sub_22D08E5A4(255, &qword_26853E910, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_22D08E760(255, &qword_26AEC1D68, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_22D08CE68(&qword_26853E938, &qword_26853E910, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    sub_22D08CEB8(&qword_26AEC1D60, &qword_26AEC1D68, (void (*)(uint64_t))type metadata accessor for PBDeleteBlobsResponse);
    unint64_t v0 = sub_22D2BC570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E930);
    }
  }
}

uint64_t sub_22D08CE68(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D08E5A4(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D08CEB8(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D08E760(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D08CF08()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

void sub_22D08CF18(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  sub_22D264B78(a1, a2, *(void *)(v3 + 16) > 0, a3);
}

uint64_t sub_22D08CF58()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D08CF90(void *a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*a1, a1[1], a1[2]);
}

uint64_t sub_22D08CFC4@<X0>(void **a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t (*a6)(NSObject *, uint64_t)@<X5>, void *a7@<X8>)
{
  uint64_t v69 = a7;
  uint64_t v70 = a6;
  uint64_t v67 = a5;
  uint64_t v68 = a4;
  uint64_t v72 = a3;
  uint64_t v9 = sub_22D2BB5B0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v62 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  uint64_t v71 = ((char *)&v62 - v18);
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v62 - v19;
  unint64_t v21 = *a1;
  if (a2 >= 1)
  {
    id v78 = *a1;
    id v22 = v21;
    sub_22CFF49FC();
    if (swift_dynamicCast())
    {
      if (v77 == 6 && v73 == (void *)1 && !(v75 | v74 | v76))
      {
        uint64_t v66 = a2 - 1;
        if (qword_26AEC1C58 != -1) {
          swift_once();
        }
        uint64_t v23 = sub_22D2BC390();
        __swift_project_value_buffer(v23, (uint64_t)qword_26AEC3C90);
        uint64_t v24 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
        v24(v20, v72, v9);
        uint64_t v25 = sub_22D2BC380();
        os_log_type_t v26 = sub_22D2BD080();
        int v65 = v26;
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          os_log_t v64 = v25;
          uint64_t v28 = v27;
          uint64_t v63 = swift_slowAlloc();
          id v78 = (void *)v63;
          *(_DWORD *)uint64_t v28 = 134218242;
          id v73 = (void *)a2;
          sub_22D2BD220();
          *(_WORD *)(v28 + 12) = 2080;
          uint64_t v62 = v28 + 14;
          uint64_t v29 = v71;
          v24((char *)v71, v20, v9);
          v24(v16, v29, v9);
          sub_22D2BD680();
          id v30 = (id)HKSensitiveLogItem();
          swift_unknownObjectRelease();
          sub_22D2BD260();
          swift_unknownObjectRelease();
          uint64_t v31 = sub_22D2BCC30();
          unint64_t v33 = v32;
          uint64_t v34 = *(void (**)(char *, uint64_t))(v10 + 8);
          v34((char *)v71, v9);
          id v73 = (void *)sub_22D0A4D24(v31, v33, (uint64_t *)&v78);
          sub_22D2BD220();
          swift_bridgeObjectRelease();
          v34(v20, v9);
          os_log_t v35 = v64;
          _os_log_impl(&dword_22CFEE000, v64, (os_log_type_t)v65, v67, (uint8_t *)v28, 0x16u);
          uint64_t v36 = v63;
          swift_arrayDestroy();
          MEMORY[0x230F7BDF0](v36, -1, -1);
          MEMORY[0x230F7BDF0](v28, -1, -1);
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v10 + 8))(v20, v9);
        }
        uint64_t result = v70(v72, v66);
        void *v69 = result;
        return result;
      }
      sub_22D043868((uint64_t)v73, v74, v75, v76, v77);
    }
  }
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v37 = sub_22D2BC390();
  __swift_project_value_buffer(v37, (uint64_t)qword_26AEC3C90);
  uint64_t v38 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
  v38(v13, v72, v9);
  id v39 = v21;
  id v40 = v21;
  uint64_t v41 = sub_22D2BC380();
  os_log_type_t v42 = sub_22D2BD060();
  int v43 = v42;
  uint64_t v72 = v41;
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v44 = swift_slowAlloc();
    LODWORD(v70) = v43;
    uint64_t v45 = v44;
    uint64_t v69 = (void *)swift_slowAlloc();
    id v78 = v69;
    *(_DWORD *)uint64_t v45 = 136315394;
    uint64_t v67 = (const char *)(v45 + 4);
    uint64_t v46 = v71;
    v38((char *)v71, v13, v9);
    v38(v16, v46, v9);
    sub_22D2BD680();
    id v47 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v68 = MEMORY[0x263F8EE58] + 8;
    uint64_t v48 = sub_22D2BCC30();
    unint64_t v50 = v49;
    uint64_t v51 = *(void (**)(char *, uint64_t))(v10 + 8);
    v51((char *)v46, v9);
    id v73 = (void *)sub_22D0A4D24(v48, v50, (uint64_t *)&v78);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    v51(v13, v9);
    *(_WORD *)(v45 + 12) = 2080;
    id v73 = v21;
    id v52 = v21;
    id v53 = v21;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v54 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v55 = sub_22D2BCC30();
    unint64_t v57 = v56;

    id v73 = (void *)sub_22D0A4D24(v55, v57, (uint64_t *)&v78);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    uint64_t v58 = v72;
    _os_log_impl(&dword_22CFEE000, v72, (os_log_type_t)v70, "Error received for request. Request: %s. Error: %s", (uint8_t *)v45, 0x16u);
    uint64_t v59 = v69;
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v59, -1, -1);
    MEMORY[0x230F7BDF0](v45, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  id v60 = v21;
  return swift_willThrow();
}

uint64_t sub_22D08D724(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ClinicalSharingCloudStandardAPI();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D08D788@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_22D08E9BC(a1, "Partial Server Side Error from Oslo Cloud while deleting. Trying again. Retries left: %ld. Request: %s", (uint64_t (*)(NSObject *, uint64_t))sub_22D08C7AC, a2);
}

uint64_t sub_22D08D7BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D08D804(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  uint64_t v5 = (void *)a1[2];
  sub_22CFF9B64(*a1, v4);
  id v6 = v5;
  sub_22CFF5630(v3, v4);
  self;
  uint64_t v7 = swift_dynamicCastObjCClass();
  if (v7)
  {
    uint64_t v8 = (void *)v7;
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v9 = sub_22D2BC390();
    __swift_project_value_buffer(v9, (uint64_t)qword_26AEC3C90);
    id v10 = v6;
    uint64_t v11 = sub_22D2BC380();
    os_log_type_t v12 = sub_22D2BD050();
    uint64_t v13 = (SEL *)&property descriptor for PBUpdateParameters.mailboxID;
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v25 = a2;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 134217984;
      objc_msgSend(v8, sel_statusCode);
      uint64_t v13 = (SEL *)&property descriptor for PBUpdateParameters.mailboxID;
      sub_22D2BD220();

      _os_log_impl(&dword_22CFEE000, v11, v12, "Received Response from Oslo Cloud: %ld", v14, 0xCu);
      uint64_t v15 = v14;
      a2 = v25;
      MEMORY[0x230F7BDF0](v15, -1, -1);
    }
    else
    {
    }
    if ((char *)[v8 v13[346]] - 200 >= (char *)0x64)
    {
      uint64_t v17 = (char *)[v8 v13[346]] - 500;
      id v18 = [v8 v13[346]];
      id v19 = v18;
      if ((unint64_t)v17 > 0x63)
      {
        unint64_t v21 = (unint64_t)v18 - 400;
        id v22 = [v8 v13[346]];
        sub_22D04344C();
        swift_allocError();
        *(void *)uint64_t v23 = v22;
        *(void *)(v23 + 8) = 0;
        *(void *)(v23 + 16) = 0;
        *(void *)(v23 + 24) = 0;
        if (v21 > 0x63) {
          char v24 = 3;
        }
        else {
          char v24 = 1;
        }
        *(unsigned char *)(v23 + 32) = v24;
      }
      else
      {
        sub_22D04344C();
        swift_allocError();
        *(void *)uint64_t v20 = v19;
        *(void *)(v20 + 8) = 0;
        *(void *)(v20 + 16) = 0;
        *(void *)(v20 + 24) = 0;
        *(unsigned char *)(v20 + 32) = 2;
      }
      swift_willThrow();
    }
    else
    {
      *a2 = v8;
      sub_22CFF9B64(v3, v4);
      a2[1] = v3;
      a2[2] = v4;
    }
  }
  else
  {

    sub_22D04344C();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = 0u;
    *(_OWORD *)(v16 + 16) = 0u;
    *(unsigned char *)(v16 + 32) = 6;
    swift_willThrow();
  }
}

uint64_t sub_22D08DAFC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, NSObject *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v9 = sub_22D2BB5B0();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v69 - v15;
  uint64_t v17 = MEMORY[0x270FA5388](v14);
  id v80 = (char *)&v69 - v18;
  MEMORY[0x270FA5388](v17);
  uint64_t v20 = *a1;
  if (a2 < 1) {
    goto LABEL_11;
  }
  uint64_t v78 = a4;
  uint64_t v79 = (char *)&v69 - v19;
  uint64_t v77 = a2 - 1;
  uint64_t v87 = (uint64_t)v20;
  id v21 = v20;
  sub_22CFF49FC();
  if (!swift_dynamicCast()) {
    goto LABEL_11;
  }
  char v22 = v86;
  if (v86 != 2) {
    goto LABEL_10;
  }
  uint64_t v87 = (uint64_t)v20;
  id v23 = v20;
  if (swift_dynamicCast())
  {
    char v22 = v86;
    if (v86 == 3)
    {
      uint64_t v76 = a5;
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v24 = sub_22D2BC390();
      __swift_project_value_buffer(v24, (uint64_t)qword_26AEC3C90);
      uint64_t v74 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
      v74(v79, v81, v9);
      id v25 = v20;
      id v26 = v20;
      uint64_t v27 = sub_22D2BC380();
      os_log_type_t v28 = sub_22D2BD080();
      int v75 = v28;
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v71 = v10;
        uint64_t v30 = v29;
        uint64_t v73 = swift_slowAlloc();
        uint64_t v87 = v73;
        *(_DWORD *)uint64_t v30 = 136315650;
        uint64_t v70 = v30 + 4;
        uint64_t v82 = (uint64_t)v20;
        id v31 = v20;
        os_log_t v72 = v27;
        uint64_t v32 = sub_22D2BCC30();
        uint64_t v82 = sub_22D0A4D24(v32, v33, &v87);
        sub_22D2BD220();
        swift_bridgeObjectRelease();

        *(_WORD *)(v30 + 12) = 2048;
        uint64_t v82 = a2;
        sub_22D2BD220();
        *(_WORD *)(v30 + 22) = 2080;
        uint64_t v70 = v30 + 24;
        uint64_t v34 = v80;
        os_log_t v35 = (void (*)(char *, char *, uint64_t))v74;
        v74(v80, v79, v9);
        v35(v16, v34, v9);
        sub_22D2BD680();
        id v36 = (id)HKSensitiveLogItem();
        swift_unknownObjectRelease();
        sub_22D2BD260();
        swift_unknownObjectRelease();
        uint64_t v37 = sub_22D2BCC30();
        uint64_t v38 = v9;
        unint64_t v40 = v39;
        uint64_t v41 = *(void (**)(char *, uint64_t))(v71 + 8);
        v41(v34, v38);
        uint64_t v82 = sub_22D0A4D24(v37, v40, &v87);
        sub_22D2BD220();
        swift_bridgeObjectRelease();
        v41(v79, v38);
        os_log_t v42 = v72;
        _os_log_impl(&dword_22CFEE000, v72, (os_log_type_t)v75, "Server Side Error from Oslo Cloud: %s. Trying again. Retries left: %ld. Request: %s", (uint8_t *)v30, 0x20u);
        uint64_t v43 = v73;
        swift_arrayDestroy();
        MEMORY[0x230F7BDF0](v43, -1, -1);
        MEMORY[0x230F7BDF0](v30, -1, -1);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v10 + 8))(v79, v9);
      }
      uint64_t result = sub_22D08BD38(v81, v77);
      *uint64_t v76 = result;
      return result;
    }
LABEL_10:
    sub_22D043868(v82, v83, v84, v85, v22);
  }
LABEL_11:
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v44 = sub_22D2BC390();
  __swift_project_value_buffer(v44, (uint64_t)qword_26AEC3C90);
  uint64_t v45 = *(void (**)(char *, NSObject *, uint64_t))(v10 + 16);
  v45(v13, v81, v9);
  id v46 = v20;
  id v47 = v20;
  uint64_t v48 = sub_22D2BC380();
  os_log_type_t v49 = sub_22D2BD060();
  int v50 = v49;
  uint64_t v81 = v48;
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v51 = swift_slowAlloc();
    LODWORD(v79) = v50;
    uint64_t v52 = v51;
    uint64_t v78 = swift_slowAlloc();
    uint64_t v87 = v78;
    *(_DWORD *)uint64_t v52 = 136315394;
    uint64_t v76 = (uint64_t *)(v52 + 4);
    id v53 = v80;
    v45(v80, v13, v9);
    v45(v16, v53, v9);
    sub_22D2BD680();
    id v54 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v77 = MEMORY[0x263F8EE58] + 8;
    uint64_t v55 = sub_22D2BCC30();
    unint64_t v57 = v56;
    uint64_t v58 = *(void (**)(char *, uint64_t))(v10 + 8);
    v58((char *)v53, v9);
    uint64_t v82 = sub_22D0A4D24(v55, v57, &v87);
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    v58(v13, v9);
    *(_WORD *)(v52 + 12) = 2080;
    uint64_t v82 = (uint64_t)v20;
    id v59 = v20;
    id v60 = v20;
    sub_22CFF49FC();
    sub_22D2BD680();
    id v61 = (id)HKSensitiveLogItem();
    swift_unknownObjectRelease();
    sub_22D2BD260();
    swift_unknownObjectRelease();
    uint64_t v62 = sub_22D2BCC30();
    unint64_t v64 = v63;

    uint64_t v82 = sub_22D0A4D24(v62, v64, &v87);
    sub_22D2BD220();
    swift_bridgeObjectRelease();

    int v65 = v81;
    _os_log_impl(&dword_22CFEE000, v81, (os_log_type_t)v79, "Error received for request. Request: %s. Error: %s", (uint8_t *)v52, 0x16u);
    uint64_t v66 = v78;
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v66, -1, -1);
    MEMORY[0x230F7BDF0](v52, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  id v67 = v20;
  return swift_willThrow();
}

void sub_22D08E318()
{
  if (!qword_26853E948)
  {
    sub_22D2BCF60();
    sub_22D08CCBC();
    sub_22D08D7BC(&qword_26853D8C0, MEMORY[0x263F07C30]);
    unint64_t v0 = sub_22D2BC500();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E948);
    }
  }
}

void sub_22D08E3C4()
{
  if (!qword_26853E950)
  {
    sub_22D08E318();
    sub_22D08E760(255, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
    sub_22D08D7BC(&qword_26853E958, (void (*)(uint64_t))sub_22D08E318);
    sub_22D08CEB8(&qword_26853E928, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
    unint64_t v0 = sub_22D2BC570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E950);
    }
  }
}

uint64_t sub_22D08E4C0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = *(void *)(sub_22D2BB5B0() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for ClinicalSharingCloudStandardAPI() - 8);
  return sub_22D08DAFC(a1, *(void *)(v2 + 16), (v2 + v6), v2 + ((v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), a2);
}

void sub_22D08E5A4(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_22D08E760(255, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
    a3(255);
    sub_22D08CEB8(&qword_26853E928, &qword_26853E918, (void (*)(uint64_t))sub_22D08CCBC);
    unint64_t v5 = sub_22D2BC500();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_22D08E65C()
{
  if (!qword_26853E970)
  {
    sub_22D08E5A4(255, &qword_26853E968, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_22D08E760(255, &qword_26853E978, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_22D08CE68(&qword_26853E980, &qword_26853E968, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    sub_22D08CEB8((unint64_t *)&qword_26853E988, &qword_26853E978, (void (*)(uint64_t))type metadata accessor for PBPushBlobsResponse);
    unint64_t v0 = sub_22D2BC570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E970);
    }
  }
}

void sub_22D08E760(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    sub_22CFF49FC();
    unint64_t v4 = sub_22D2BC5E0();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t objectdestroy_11Tm_0()
{
  uint64_t v1 = sub_22D2BB5B0();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for ClinicalSharingCloudStandardAPI() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = sub_22D2BBAA0();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v0 + v8, v11);
  v12(v0 + v8 + v6[7], v11);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, v9, v10);
}

uint64_t sub_22D08E988@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  return sub_22D08E9BC(a1, "Partial Server Side Error from Oslo Cloud while pushing. Trying again. Retries left: %ld. Request: %s", (uint64_t (*)(NSObject *, uint64_t))sub_22D08B870, a2);
}

uint64_t sub_22D08E9BC@<X0>(void **a1@<X0>, const char *a2@<X1>, uint64_t (*a3)(NSObject *, uint64_t)@<X2>, void *a4@<X8>)
{
  uint64_t v9 = *(void *)(sub_22D2BB5B0() - 8);
  unint64_t v10 = (*(unsigned __int8 *)(v9 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = *(void *)(v9 + 64);
  uint64_t v12 = *(void *)(type metadata accessor for ClinicalSharingCloudStandardAPI() - 8);
  return sub_22D08CFC4(a1, *(void *)(v4 + 16), (v4 + v10), v4 + ((v10 + v11 + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)), a2, a3, a4);
}

uint64_t sub_22D08EAB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D08EB20(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D08EB80@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unsigned int v69 = a2;
  uint64_t v67 = a4;
  uint64_t v68 = a1;
  uint64_t v73 = sub_22D2BBC30();
  uint64_t v76 = *(void *)(v73 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v73);
  uint64_t v66 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  id v60 = (char *)&v58 - v9;
  uint64_t v10 = sub_22D2BBE00();
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v78 = v10;
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  int v65 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  os_log_t v72 = (char *)&v58 - v13;
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_22D2BBDE0();
  uint64_t v15 = (char *)*((void *)v14 - 1);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v71 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v58 - v18;
  sub_22D090714(0, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v21 = MEMORY[0x270FA5388](v20 - 8);
  uint64_t v64 = (uint64_t)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v63 = (uint64_t)&v58 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v58 - v26;
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  id v61 = (char *)&v58 - v29;
  MEMORY[0x270FA5388](v28);
  id v31 = (char *)&v58 - v30;
  uint64_t v32 = OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_gregorianCalendar;
  unint64_t v33 = (void (*)(char *, void, uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((void *)v15 + 13);
  v33(v19, *MEMORY[0x263F078A0], v14);
  if (__OFSUB__(0, a3))
  {
    __break(1u);
LABEL_17:
    swift_once();
LABEL_9:
    uint64_t v44 = sub_22D2BC390();
    __swift_project_value_buffer(v44, (uint64_t)qword_26AEC3C90);
    swift_retain_n();
    uint64_t v45 = sub_22D2BC380();
    os_log_type_t v46 = sub_22D2BD070();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      uint64_t v80 = v48;
      *(_DWORD *)uint64_t v47 = 136315394;
      sub_22D0906CC(&qword_26853E9A8, MEMORY[0x263F07490]);
      uint64_t v49 = sub_22D2BD630();
      uint64_t v79 = sub_22D0A4D24(v49, v50, &v80);
      sub_22D2BD220();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v47 + 12) = 2048;
      uint64_t v79 = v59;
      sub_22D2BD220();
      _os_log_impl(&dword_22CFEE000, v45, v46, "Unable to create end date from %s, offset by %ld years", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      a3 = v73;
      MEMORY[0x230F7BDF0](v48, -1, -1);
      MEMORY[0x230F7BDF0](v47, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_12;
  }
  uint64_t v62 = v5;
  uint64_t v70 = v5 + OBJC_IVAR____TtC19HealthRecordsDaemon27ClinicalSharingQueryContext_date;
  uint64_t v74 = v5 + v32;
  sub_22D2BBD70();
  uint64_t v34 = (void (*)(char *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))*((void *)v15 + 1);
  v34(v19, v14);
  uint64_t v59 = a3;
  BOOL v35 = a3 < 1;
  a3 = v73;
  uint64_t v36 = v76;
  int v75 = v31;
  if (!v35)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v72, v74, v78);
    v33(v71, *MEMORY[0x263F07870], v14);
    sub_22D0905A4((uint64_t)v31, (uint64_t)v27, &qword_26AEC0F48, MEMORY[0x263F07490]);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v27, 1, a3) == 1)
    {
      uint64_t v37 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v60, v70, a3);
      sub_22D090610((uint64_t)v27, &qword_26AEC0F48, MEMORY[0x263F07490]);
    }
    else
    {
      uint64_t v37 = v60;
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v60, v27, a3);
    }
    uint64_t v38 = (uint64_t)v61;
    unint64_t v40 = v71;
    unint64_t v39 = v72;
    sub_22D2BBD70();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, a3);
    v34(v40, v14);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v39, v78);
    id v31 = v75;
    sub_22D090610((uint64_t)v75, &qword_26AEC0F48, MEMORY[0x263F07490]);
    sub_22D043228(v38, (uint64_t)v31);
  }
  uint64_t v41 = (void (*)(uint64_t))MEMORY[0x263F07490];
  uint64_t v42 = v63;
  sub_22D0905A4((uint64_t)v31, v63, &qword_26AEC0F48, MEMORY[0x263F07490]);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
  int v43 = v14(v42, 1, a3);
  sub_22D090610(v42, &qword_26AEC0F48, v41);
  uint64_t v15 = v65;
  if (v43 == 1)
  {
    if (qword_26AEC1C58 == -1) {
      goto LABEL_9;
    }
    goto LABEL_17;
  }
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t))(v77 + 16))(v15, v74, v78);
  uint64_t v51 = (uint64_t)v75;
  uint64_t v52 = v64;
  sub_22D0905A4((uint64_t)v75, v64, &qword_26AEC0F48, MEMORY[0x263F07490]);
  int v53 = v14(v52, 1, a3);
  unsigned int v54 = v69;
  uint64_t v55 = (uint64_t)v66;
  uint64_t v56 = v76;
  if (v53 == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v66, v70, a3);
    sub_22D090610(v52, &qword_26AEC0F48, MEMORY[0x263F07490]);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v76 + 32))(v66, v52, a3);
  }
  sub_22D0B23DC(v55, v54, v67);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, a3);
  (*(void (**)(char *, uint64_t))(v77 + 8))(v15, v78);
  return sub_22D090610(v51, &qword_26AEC0F48, MEMORY[0x263F07490]);
}

uint64_t sub_22D08F460()
{
  uint64_t v0 = sub_22D2BC020();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BC010();
  type metadata accessor for PBTypedData(0);
  sub_22D0906CC(&qword_26853DA58, (void (*)(uint64_t))type metadata accessor for PBTypedData);
  uint64_t v4 = sub_22D2BC1B0();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t sub_22D08F59C()
{
  return sub_22D2BC1E0();
}

uint64_t (*sub_22D08F61C(uint64_t a1, uint64_t (*a2)(char *)))(char *)
{
  uint64_t v5 = type metadata accessor for PBTypedData(0);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D090540(a1, (uint64_t)v7);
  uint64_t v8 = a2(v7);
  if (!v2)
  {
    a2 = (uint64_t (*)(char *))v8;
    v11[0] = sub_22D08F75C();
    v11[1] = v9;
    sub_22D2BCCB0();
    sub_22D2BCCB0();
  }
  sub_22D09066C((uint64_t)v7, type metadata accessor for PBTypedData);
  return a2;
}

uint64_t sub_22D08F75C()
{
  sub_22D090714(0, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v41 = (uint64_t)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v35 - v5;
  MEMORY[0x270FA5388](v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for PBDateRange(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v35 - v15;
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v35 - v17;
  uint64_t v19 = *(int *)(type metadata accessor for PBTypedData(0) + 20);
  uint64_t v40 = v0;
  uint64_t v38 = v19;
  uint64_t v20 = *(void *)(v0 + v19);
  swift_beginAccess();
  char v21 = *(unsigned char *)(v20 + 24);
  uint64_t v46 = *(void *)(v20 + 16);
  char v47 = v21;
  uint64_t v22 = sub_22D2BCC30();
  uint64_t v36 = v23;
  uint64_t v37 = v22;
  uint64_t v24 = v20
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D0905A4(v24, (uint64_t)v8, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  uint64_t v25 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  unsigned int v26 = v25(v8, 1, v9);
  unint64_t v39 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v25;
  if (v26 == 1)
  {
    *(void *)uint64_t v18 = 0;
    *((void *)v18 + 1) = 0xE000000000000000;
    *((void *)v18 + 2) = 0;
    *((void *)v18 + 3) = 0xE000000000000000;
    *((void *)v18 + 4) = 0;
    v18[40] = 1;
    sub_22D2BBFE0();
    sub_22D090610((uint64_t)v8, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D03C0E4((uint64_t)v8, (uint64_t)v18);
  }
  uint64_t v27 = *((void *)v18 + 4);
  char v28 = v18[40];
  sub_22D09066C((uint64_t)v18, type metadata accessor for PBDateRange);
  uint64_t v42 = v27;
  char v43 = v28;
  sub_22D2BCC30();
  uint64_t v44 = v37;
  uint64_t v45 = v36;
  sub_22D2BCCB0();
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  uint64_t v29 = *(void *)(v40 + v38);
  uint64_t v30 = v29
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  sub_22D0905A4(v30, (uint64_t)v6, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  id v31 = v39;
  if (v39((uint64_t)v6, 1, v9) == 1)
  {
    *(void *)uint64_t v16 = 0;
    *((void *)v16 + 1) = 0xE000000000000000;
    *((void *)v16 + 2) = 0;
    *((void *)v16 + 3) = 0xE000000000000000;
    *((void *)v16 + 4) = 0;
    v16[40] = 1;
    sub_22D2BBFE0();
    sub_22D090610((uint64_t)v6, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D03C0E4((uint64_t)v6, (uint64_t)v16);
  }
  swift_bridgeObjectRetain();
  sub_22D09066C((uint64_t)v16, type metadata accessor for PBDateRange);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  sub_22D2BCCB0();
  uint64_t v32 = v29
      + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBTypedDataP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__dateRange;
  swift_beginAccess();
  uint64_t v33 = v41;
  sub_22D0905A4(v32, v41, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  if (v31(v33, 1, v9) == 1)
  {
    *(void *)uint64_t v13 = 0;
    *((void *)v13 + 1) = 0xE000000000000000;
    *((void *)v13 + 2) = 0;
    *((void *)v13 + 3) = 0xE000000000000000;
    *((void *)v13 + 4) = 0;
    v13[40] = 1;
    sub_22D2BBFE0();
    sub_22D090610(v33, &qword_26853D7B0, (void (*)(uint64_t))type metadata accessor for PBDateRange);
  }
  else
  {
    sub_22D03C0E4(v33, (uint64_t)v13);
  }
  swift_bridgeObjectRetain();
  sub_22D09066C((uint64_t)v13, type metadata accessor for PBDateRange);
  sub_22D2BCCB0();
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_22D08FCA4()
{
  sub_22D090714(0, &qword_26853DEE0, MEMORY[0x263F079C8]);
  MEMORY[0x270FA5388](v1 - 8);
  uint64_t v3 = (char *)&v20 - v2;
  sub_22D090714(0, &qword_26853DEE8, MEMORY[0x263F07920]);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v20 - v5;
  uint64_t v7 = *v0;
  int v8 = *((unsigned __int8 *)v0 + 8);
  if (v8 == 1)
  {
    switch(v7)
    {
      case 1:
        uint64_t v9 = sub_22D2BBE00();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
        uint64_t v10 = sub_22D2BBE60();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
        sub_22D2BB8C0();
        return sub_22D2BB860();
      case 2:
      case 3:
        uint64_t v14 = sub_22D2BBE00();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v6, 1, 1, v14);
        uint64_t v15 = sub_22D2BBE60();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v3, 1, 1, v15);
        sub_22D2BB8C0();
        return sub_22D2BB830();
      case 4:
        uint64_t v12 = sub_22D2BBE00();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v6, 1, 1, v12);
        uint64_t v13 = sub_22D2BBE60();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v3, 1, 1, v13);
        sub_22D2BB8C0();
        return sub_22D2BB880();
      case 6:
        uint64_t v16 = sub_22D2BBE00();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v6, 1, 1, v16);
        uint64_t v17 = sub_22D2BBE60();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v3, 1, 1, v17);
        sub_22D2BB8C0();
        return sub_22D2BB8A0();
      default:
        break;
    }
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  uint64_t v18 = v7;
  char v19 = v8;
  sub_22D2BD310();
  sub_22D2BCCB0();
  uint64_t v20 = v18;
  char v21 = v19;
  sub_22D2BD430();
  sub_22D2BD460();
  __break(1u);
  JUMPOUT(0x22D0903FCLL);
}

uint64_t sub_22D090418()
{
  sub_22CFF4B64();
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_22D2C2100;
  sub_22D2BCBD0();
  id v1 = objc_allocWithZone(MEMORY[0x263F08B30]);
  uint64_t v2 = (void *)sub_22D2BCBA0();
  swift_bridgeObjectRelease();
  id v3 = objc_msgSend(v1, sel_initWithKey_ascending_, v2, 0);

  *(void *)(v0 + 32) = v3;
  sub_22D2BCBD0();
  id v4 = objc_allocWithZone(MEMORY[0x263F08B30]);
  uint64_t v5 = (void *)sub_22D2BCBA0();
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v4, sel_initWithKey_ascending_, v5, 0);

  *(void *)(v0 + 40) = v6;
  sub_22D2BCE20();
  return v0;
}

uint64_t sub_22D090540(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PBTypedData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_22D0905A4(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_22D090714(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_22D090610(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_22D090714(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_22D09066C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D0906CC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D090714(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t static VHRDirectory.simpleVHRDirectory()@<X0>(void *a1@<X8>)
{
  uint64_t v34 = a1;
  sub_22D090B84(0, (unint64_t *)&qword_26AEC0F28, MEMORY[0x263F06EA8], MEMORY[0x263F8D8F0]);
  uint64_t v2 = MEMORY[0x270FA5388](v1 - 8);
  uint64_t v36 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v29 - v5;
  uint64_t v7 = MEMORY[0x270FA5388](v4);
  uint64_t v9 = (char *)&v29 - v8;
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v29 - v10;
  sub_22D090B84(0, &qword_26853E9B0, (uint64_t (*)(uint64_t))type metadata accessor for VHRDirectoryIssuer, MEMORY[0x263F8E0F8]);
  uint64_t v12 = (int *)type metadata accessor for VHRDirectoryIssuer();
  unint64_t v13 = (*(unsigned __int8 *)(*((void *)v12 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v12 - 1) + 80);
  uint64_t v33 = *(void *)(*((void *)v12 - 1) + 72);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_22D2C0F10;
  sub_22D2BBA90();
  uint64_t v15 = sub_22D2BBAA0();
  uint64_t v16 = *(void **)(v15 - 8);
  uint64_t v35 = (uint64_t (*)(char *, uint64_t, uint64_t))v16[6];
  uint64_t result = v35(v11, 1, v15);
  if (result == 1)
  {
    __break(1u);
  }
  else
  {
    uint64_t v31 = v14;
    unint64_t v18 = v14 + v13;
    char v19 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v16[7];
    v19(v9, 1, 1, v15);
    v19(v6, 1, 1, v15);
    uint64_t v30 = (void (*)(unint64_t, char *, uint64_t))v16[4];
    v30(v18, v11, v15);
    uint64_t v20 = (void *)(v18 + v12[5]);
    *uint64_t v20 = 0xD000000000000017;
    v20[1] = 0x800000022D2D6A00;
    uint64_t v21 = v18 + v12[6];
    uint64_t v32 = v9;
    sub_22D08A690((uint64_t)v9, v21);
    uint64_t v22 = (uint64_t)v6;
    sub_22D08A690((uint64_t)v6, v18 + v12[7]);
    unint64_t v23 = v36;
    sub_22D2BBA90();
    uint64_t result = v35(v23, 1, v15);
    if (result != 1)
    {
      unint64_t v24 = v18 + v33;
      uint64_t v25 = (uint64_t)v32;
      v19(v32, 1, 1, v15);
      v19((char *)v22, 1, 1, v15);
      v30(v24, v36, v15);
      unsigned int v26 = (void *)(v24 + v12[5]);
      void *v26 = 0xD000000000000021;
      v26[1] = 0x800000022D2D6A50;
      sub_22D08A690(v25, v24 + v12[6]);
      uint64_t result = sub_22D08A690(v22, v24 + v12[7]);
      uint64_t v27 = v34;
      uint64_t v28 = v31;
      void *v34 = 1;
      v27[1] = v28;
      return result;
    }
  }
  __break(1u);
  return result;
}

void sub_22D090B84(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t static VHRDirectory.simpleVHRDirectoryData()()
{
  sub_22D2BB660();
  swift_allocObject();
  sub_22D2BB650();
  static VHRDirectory.simpleVHRDirectory()(&v2);
  sub_22D090CAC();
  uint64_t v0 = sub_22D2BB640();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

unint64_t sub_22D090CAC()
{
  unint64_t result = qword_26853E9B8;
  if (!qword_26853E9B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E9B8);
  }
  return result;
}

uint64_t sub_22D090D00@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v46 = a3;
  sub_22D091318(0, &qword_26AEC1CE0, MEMORY[0x263EFDC20]);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  MEMORY[0x270FA5388](v4);
  unint64_t v39 = (char *)&v36 - v5;
  sub_22D091318(0, &qword_26853E9C0, MEMORY[0x263EFDB60]);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  MEMORY[0x270FA5388](v6);
  uint64_t v42 = (char *)&v36 - v7;
  sub_22D02DA2C();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D0913E0(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v15 = v14;
  uint64_t v16 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  unint64_t v18 = (char *)&v36 - v17;
  uint64_t v47 = *a1;
  uint64_t v19 = v47;
  uint64_t v20 = type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  uint64_t v45 = v20;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_22D091458((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v13);
  uint64_t v21 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  if (!*(void *)(v19 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error))
  {
    uint64_t v47 = v21;
    uint64_t v23 = swift_allocObject();
    unint64_t v24 = v38;
    *(void *)(v23 + 16) = v38;
    id v37 = v24;
    sub_22D2BC5D0();
    uint64_t v38 = (void *)v21;
    uint64_t v25 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0913E0(0, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    sub_22D091458((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v25);
    unsigned int v26 = v39;
    sub_22D2BC830();
    swift_release();
    sub_22D091704(&qword_26AEC1CD8, &qword_26AEC1CE0, MEMORY[0x263EFDC20]);
    uint64_t v27 = v41;
    uint64_t v28 = sub_22D2BC720();
    uint64_t v36 = v28;
    uint64_t v29 = *(void (**)(char *, uint64_t))(v40 + 8);
    v29(v26, v27);
    uint64_t v47 = v28;
    uint64_t v30 = swift_allocObject();
    *(unsigned char *)(v30 + 16) = 0;
    uint64_t v31 = v37;
    *(void *)(v30 + 24) = v37;
    id v32 = v31;
    sub_22D2BC5D0();
    sub_22D2BC830();
    swift_release();
    uint64_t v33 = sub_22D2BC720();
    v29(v26, v27);
    swift_release();
    uint64_t v47 = v33;
    swift_retain();
    uint64_t v34 = v42;
    sub_22D2BC7A0();
    swift_release();
    swift_release();
    sub_22D091704(&qword_26853E9C8, &qword_26853E9C0, MEMORY[0x263EFDB60]);
    uint64_t v35 = v44;
    uint64_t v21 = sub_22D2BC720();
    swift_release();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v34, v35);
  }
  *uint64_t v46 = v21;
  return result;
}

void sub_22D091318(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  if (!*a2)
  {
    uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D0913E0(255, &qword_26AEC1D78, MEMORY[0x263EFDCF0]);
    v10[0] = v7;
    v10[1] = v7;
    uint64_t v11 = sub_22D091458((unint64_t *)&qword_26AEC1D70, &qword_26AEC1D78, v6);
    uint64_t v12 = v11;
    unint64_t v8 = a3(a1, v10);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D0913E0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for ClinicalSharingSyncContext();
    unint64_t v7 = sub_22CFF49FC();
    unint64_t v8 = a3(a1, v6, v7, MEMORY[0x263F8E4E0]);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_22D091458(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D0913E0(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D09149C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v18[0] = a3;
  sub_22D02DA2C();
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDEA0];
  sub_22D0913E0(0, (unint64_t *)&qword_26853DF10, MEMORY[0x263EFDEA0]);
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)v18 - v14;
  sub_22D0BF004(*a1);
  v18[1] = a2;
  type metadata accessor for ClinicalSharingSyncContext();
  swift_retain();
  sub_22D2BC6B0();
  sub_22CFF49FC();
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_22D091458((unint64_t *)&qword_26853DF18, (unint64_t *)&qword_26853DF10, v10);
  uint64_t v16 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  *(void *)v18[0] = v16;
  return result;
}

uint64_t sub_22D0916C4()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D0916FC@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D0C6F58(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_22D091704(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D091318(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D091748()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D091780@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  return sub_22D09149C(a1, v2, a2);
}

void sub_22D091788()
{
  sub_22D092374(0, (unint64_t *)&qword_26AEC1FA0, (uint64_t (*)(uint64_t))sub_22D0923D8, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22D2BFF30;
  *(void *)(inited + 32) = sub_22D2BCBD0();
  *(void *)(inited + 40) = v2;
  uint64_t v3 = (void *)*MEMORY[0x263F171C8];
  type metadata accessor for CFString(0);
  uint64_t v5 = v4;
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 80) = sub_22D2BCBD0();
  *(void *)(inited + 88) = v6;
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  *(void *)(inited + 120) = MEMORY[0x263F8D310];
  *(void *)(inited + 96) = v7;
  *(void *)(inited + 104) = v8;
  *(void *)(inited + 128) = sub_22D2BCBD0();
  *(void *)(inited + 136) = v9;
  uint64_t v10 = (void *)*MEMORY[0x263F16ED0];
  *(void *)(inited + 168) = v5;
  *(void *)(inited + 144) = v10;
  *(void *)(inited + 176) = sub_22D2BCBD0();
  *(void *)(inited + 184) = v11;
  *(void *)(inited + 216) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = sub_22D2BCBD0();
  *(void *)(inited + 232) = v12;
  id v13 = v3;
  swift_bridgeObjectRetain();
  id v14 = v10;
  uint64_t v15 = sub_22D2BC960();
  *(void *)(inited + 264) = MEMORY[0x263F06F78];
  *(void *)(inited + 240) = v15;
  *(void *)(inited + 248) = v16;
  sub_22D0D3660(inited);
  CFDictionaryRef v17 = (const __CFDictionary *)sub_22D2BCAF0();
  swift_bridgeObjectRelease();
  OSStatus v18 = SecItemAdd(v17, 0);

  if (!v18)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v24 = sub_22D2BC390();
    __swift_project_value_buffer(v24, (uint64_t)qword_26AEC3C90);
    uint64_t v20 = sub_22D2BC380();
    os_log_type_t v21 = sub_22D2BD050();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_12;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "Successfully added the private key to keychain";
    goto LABEL_11;
  }
  if (v18 == -25299)
  {
    if (qword_26AEC1C58 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_22D2BC390();
    __swift_project_value_buffer(v19, (uint64_t)qword_26AEC3C90);
    uint64_t v20 = sub_22D2BC380();
    os_log_type_t v21 = sub_22D2BD050();
    if (!os_log_type_enabled(v20, v21)) {
      goto LABEL_12;
    }
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v22 = 0;
    uint64_t v23 = "Private key already exists in keychain";
LABEL_11:
    _os_log_impl(&dword_22CFEE000, v20, v21, v23, v22, 2u);
    MEMORY[0x230F7BDF0](v22, -1, -1);
LABEL_12:

    return;
  }
  sub_22D092444();
  uint64_t v25 = sub_22D2BD250();
  uint64_t v27 = v26;
  sub_22D092498();
  swift_allocError();
  *(void *)uint64_t v28 = v25;
  *(void *)(v28 + 8) = v27;
  *(unsigned char *)(v28 + 16) = 4;
  swift_willThrow();
}

SecAccessControlRef sub_22D091B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v58 = a2;
  uint64_t v59 = a1;
  v70[35] = *(CFTypeRef *)MEMORY[0x263EF8340];
  uint64_t v3 = sub_22D2BBC30();
  uint64_t v64 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v61 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D092374(0, &qword_26AEC0F48, MEMORY[0x263F07490], MEMORY[0x263F8D8F0]);
  uint64_t v6 = MEMORY[0x270FA5388](v5 - 8);
  id v60 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  unint64_t v57 = (char *)&v53 - v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v53 - v10;
  sub_22D092374(0, (unint64_t *)&qword_26AEC1FA0, (uint64_t (*)(uint64_t))sub_22D0923D8, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22D2BFF30;
  *(void *)(inited + 32) = sub_22D2BCBD0();
  *(void *)(inited + 40) = v13;
  id v14 = (void *)*MEMORY[0x263F171C8];
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v15;
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 80) = sub_22D2BCBD0();
  *(void *)(inited + 88) = v16;
  double v17 = *v2;
  uint64_t v18 = *((void *)v2 + 1);
  uint64_t v62 = v2;
  *(void *)(inited + 120) = MEMORY[0x263F8D310];
  *(double *)(inited + 96) = v17;
  *(void *)(inited + 104) = v18;
  *(void *)(inited + 128) = sub_22D2BCBD0();
  *(void *)(inited + 136) = v19;
  uint64_t v20 = MEMORY[0x263F8D4F8];
  *(void *)(inited + 168) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 144) = 1;
  *(void *)(inited + 176) = sub_22D2BCBD0();
  *(void *)(inited + 184) = v21;
  *(void *)(inited + 216) = v20;
  *(unsigned char *)(inited + 192) = 1;
  *(void *)(inited + 224) = sub_22D2BCBD0();
  *(void *)(inited + 232) = v22;
  *(void *)(inited + 264) = v20;
  *(unsigned char *)(inited + 240) = 1;
  uint64_t v23 = (uint64_t)v11;
  id v24 = v14;
  uint64_t v25 = v3;
  swift_bridgeObjectRetain();
  uint64_t v26 = inited;
  uint64_t v27 = v64;
  sub_22D0D3660(v26);
  v70[0] = 0;
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  v28(v11, 1, 1, v3);
  CFDictionaryRef v29 = (const __CFDictionary *)sub_22D2BCAF0();
  swift_bridgeObjectRelease();
  OSStatus v30 = SecItemCopyMatching(v29, v70);

  if (v30 == -25300)
  {
    sub_22D092498();
    swift_allocError();
    *(void *)uint64_t v34 = 0xD000000000000014;
    *(void *)(v34 + 8) = 0x800000022D2D6A80;
LABEL_10:
    *(unsigned char *)(v34 + 16) = 5;
    swift_willThrow();
    goto LABEL_11;
  }
  if (v30)
  {
    LODWORD(v68) = v30;
    sub_22D092444();
    uint64_t v35 = sub_22D2BD250();
    uint64_t v37 = v36;
    sub_22D092498();
    swift_allocError();
    *(void *)uint64_t v34 = v35;
    *(void *)(v34 + 8) = v37;
    goto LABEL_10;
  }
  if (!v70[0])
  {
LABEL_13:
    uint64_t v56 = 0;
    unint64_t v38 = 0xF000000000000000;
    uint64_t v40 = v62;
    uint64_t v39 = v63;
    uint64_t v41 = (uint64_t)v60;
    uint64_t v42 = v61;
    goto LABEL_19;
  }
  swift_unknownObjectRetain();
  self;
  uint64_t v31 = swift_dynamicCastObjCClass();
  if (!v31)
  {
    swift_unknownObjectRelease();
    goto LABEL_13;
  }
  id v32 = (void *)v31;
  uint64_t v55 = v25;
  id v54 = (id)*MEMORY[0x263F175A8];
  SecAccessControlRef result = (SecAccessControlRef)objc_msgSend(v32, sel___swift_objectForKeyedSubscript_);
  if (!result)
  {
    __break(1u);
    goto LABEL_38;
  }
  sub_22D2BD260();
  swift_unknownObjectRelease();
  sub_22D056B08(v67, &v68);
  swift_dynamicCast();
  uint64_t v56 = v65;
  unint64_t v53 = v66;

  id v54 = (id)*MEMORY[0x263F17008];
  if (objc_msgSend(v32, sel___swift_objectForKeyedSubscript_))
  {
    sub_22D2BD260();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_22D04BD5C((uint64_t)v11);
  }
  else
  {
    sub_22D04BD5C((uint64_t)v11);
    swift_unknownObjectRelease();
    memset(v67, 0, sizeof(v67));
  }
  uint64_t v40 = v62;
  uint64_t v25 = v55;
  uint64_t v41 = (uint64_t)v60;
  sub_22D0926B0((uint64_t)v67, (uint64_t)&v68);
  uint64_t v43 = (uint64_t)v57;
  if (v69)
  {
    int v44 = swift_dynamicCast();
    v28((char *)v43, v44 ^ 1u, 1, v25);
  }
  else
  {

    sub_22CFF5998((uint64_t)&v68);
    v28((char *)v43, 1, 1, v25);
  }
  sub_22D043228(v43, v23);
  uint64_t v39 = v63;
  uint64_t v42 = v61;
  unint64_t v38 = v53;
LABEL_19:
  sub_22D04BDE8(v23, v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v41, 1, v25) != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(v42, v41, v25);
    sub_22D2BBBA0();
    if (v45 > v40[5])
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v25);
      goto LABEL_23;
    }
    if (v38 >> 60 == 15)
    {
      sub_22D0924EC();
      if (!v39)
      {
        sub_22D092498();
        swift_allocError();
        *(void *)uint64_t v52 = 0xD000000000000021;
        *(void *)(v52 + 8) = 0x800000022D2D6AA0;
        *(unsigned char *)(v52 + 16) = 5;
        swift_willThrow();
      }
    }
    else
    {
      sub_22D2BC970();
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v42, v25);
LABEL_11:
    sub_22D04BD5C(v23);
    return (SecAccessControlRef)swift_unknownObjectRelease();
  }
  sub_22D04BD5C(v41);
LABEL_23:
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v46 = sub_22D2BC390();
  __swift_project_value_buffer(v46, (uint64_t)qword_26AEC3C90);
  uint64_t v47 = sub_22D2BC380();
  os_log_type_t v48 = sub_22D2BD050();
  if (os_log_type_enabled(v47, v48))
  {
    unint64_t v49 = v38;
    unint64_t v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v50 = 0;
    _os_log_impl(&dword_22CFEE000, v47, v48, "Verification Key expired. Creating and storing a new verification key", v50, 2u);
    uint64_t v51 = v50;
    unint64_t v38 = v49;
    MEMORY[0x230F7BDF0](v51, -1, -1);
  }

  sub_22D0924EC();
  if (v39) {
    goto LABEL_30;
  }
  SecAccessControlRef result = SecAccessControlCreateWithFlags(0, (CFTypeRef)*MEMORY[0x263F16EA0], 0, 0);
  if (result)
  {
    sub_22D2BC980();
LABEL_30:
    sub_22D04BD5C(v23);
    sub_22CFF9C10(v56, v38);
    return (SecAccessControlRef)swift_unknownObjectRelease();
  }
LABEL_38:
  __break(1u);
  return result;
}

void sub_22D092374(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void sub_22D0923D8()
{
  if (!qword_26AEC1E68)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_26AEC1E68);
    }
  }
}

unint64_t sub_22D092444()
{
  unint64_t result = qword_26853E9D0;
  if (!qword_26853E9D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E9D0);
  }
  return result;
}

unint64_t sub_22D092498()
{
  unint64_t result = qword_26853E9D8;
  if (!qword_26853E9D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E9D8);
  }
  return result;
}

void sub_22D0924EC()
{
  sub_22D092374(0, (unint64_t *)&qword_26AEC1FA0, (uint64_t (*)(uint64_t))sub_22D0923D8, MEMORY[0x263F8E0F8]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_22D2C20F0;
  *(void *)(inited + 32) = sub_22D2BCBD0();
  *(void *)(inited + 40) = v2;
  uint64_t v3 = (void *)*MEMORY[0x263F171C8];
  type metadata accessor for CFString(0);
  *(void *)(inited + 72) = v4;
  *(void *)(inited + 48) = v3;
  *(void *)(inited + 80) = sub_22D2BCBD0();
  *(void *)(inited + 88) = v5;
  *(void *)(inited + 120) = MEMORY[0x263F8D4F8];
  *(unsigned char *)(inited + 96) = 1;
  *(void *)(inited + 128) = sub_22D2BCBD0();
  *(void *)(inited + 136) = v6;
  uint64_t v7 = *v0;
  uint64_t v8 = v0[1];
  *(void *)(inited + 168) = MEMORY[0x263F8D310];
  *(void *)(inited + 144) = v7;
  *(void *)(inited + 152) = v8;
  id v9 = v3;
  swift_bridgeObjectRetain();
  sub_22D0D3660(inited);
  CFDictionaryRef v10 = (const __CFDictionary *)sub_22D2BCAF0();
  swift_bridgeObjectRelease();
  OSStatus v11 = SecItemDelete(v10);

  if (v11)
  {
    if (v11 != -25300)
    {
      sub_22D092444();
      uint64_t v12 = sub_22D2BD250();
      uint64_t v14 = v13;
      sub_22D092498();
      swift_allocError();
      *(void *)uint64_t v15 = v12;
      *(void *)(v15 + 8) = v14;
      *(unsigned char *)(v15 + 16) = 6;
      swift_willThrow();
    }
  }
}

uint64_t sub_22D0926B0(uint64_t a1, uint64_t a2)
{
  sub_22CFF59F4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t Error.hdhr_friendlyDescription.getter(uint64_t a1, uint64_t a2)
{
  v25[1] = a2;
  sub_22D092B68(0, &qword_26853E9E0, MEMORY[0x263F8DCD0]);
  uint64_t v5 = MEMORY[0x270FA5388](v4 - 8);
  uint64_t v7 = (char *)v25 - v6;
  uint64_t v8 = *(void *)(a1 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v5);
  OSStatus v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = sub_22D2BD380();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  double v17 = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v13, v2, a1);
  int v19 = swift_dynamicCast();
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if (v19)
  {
    v20(v7, 0, 1, v14);
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v7, v14);
    uint64_t v21 = DecodingError.hdhr_friendlyDescription.getter();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
  else
  {
    v20(v7, 1, 1, v14);
    sub_22D092B0C((uint64_t)v7, &qword_26853E9E0, MEMORY[0x263F8DCD0]);
    v18(v11, v2, a1);
    sub_22D092AB4();
    if (swift_dynamicCast())
    {
      sub_22CFF8C10(&v26, (uint64_t)v29);
      __swift_project_boxed_opaque_existential_1(v29, v29[3]);
      uint64_t v21 = sub_22D2BB8F0();
      uint64_t v23 = v22;
      sub_22CFF4B00((uint64_t)v29, (uint64_t)&v26);
      if (!v23)
      {
        __swift_project_boxed_opaque_existential_1(&v26, *((uint64_t *)&v27 + 1));
        uint64_t v21 = sub_22D2BD6D0();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v26);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    }
    else
    {
      uint64_t v28 = 0;
      long long v26 = 0u;
      long long v27 = 0u;
      sub_22D092B0C((uint64_t)&v26, &qword_26853E9F0, (void (*)(uint64_t))sub_22D092AB4);
      return sub_22D2BD6D0();
    }
  }
  return v21;
}

unint64_t sub_22D092AB4()
{
  unint64_t result = qword_26853E9E8;
  if (!qword_26853E9E8)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_26853E9E8);
  }
  return result;
}

uint64_t sub_22D092B0C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  sub_22D092B68(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_22D092B68(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_22D2BD200();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *initializeBufferWithCopyOfBuffer for ClinicalSharingFHIRSearchResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for ClinicalSharingFHIRSearchResult()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for ClinicalSharingFHIRSearchResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for ClinicalSharingFHIRSearchResult(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchResult()
{
  return &type metadata for ClinicalSharingFHIRSearchResult;
}

uint64_t sub_22D092C74()
{
  return 0x7972746E65;
}

uint64_t sub_22D092C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7972746E65 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_22D2BD660();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_22D092D18(uint64_t a1)
{
  unint64_t v2 = sub_22D092FA0();
  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_22D092D54(uint64_t a1)
{
  unint64_t v2 = sub_22D092FA0();
  return MEMORY[0x270FA00B8](a1, v2);
}

void *sub_22D092D90@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_22D092DBC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

void *sub_22D092DBC(void *a1)
{
  sub_22D092F44();
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  char v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_22D092FA0();
  sub_22D2BD7A0();
  if (!v1)
  {
    sub_22D092FF4();
    sub_22D09304C();
    sub_22D2BD530();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    uint64_t v8 = (void *)v10[1];
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  return v8;
}

void sub_22D092F44()
{
  if (!qword_26853E9F8)
  {
    sub_22D092FA0();
    unint64_t v0 = sub_22D2BD570();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853E9F8);
    }
  }
}

unint64_t sub_22D092FA0()
{
  unint64_t result = qword_26853EA00;
  if (!qword_26853EA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA00);
  }
  return result;
}

void sub_22D092FF4()
{
  if (!qword_26853EA08)
  {
    unint64_t v0 = sub_22D2BCE60();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EA08);
    }
  }
}

unint64_t sub_22D09304C()
{
  unint64_t result = qword_26853EA10;
  if (!qword_26853EA10)
  {
    sub_22D092FF4();
    sub_22D0930BC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA10);
  }
  return result;
}

unint64_t sub_22D0930BC()
{
  unint64_t result = qword_26853EA18;
  if (!qword_26853EA18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ClinicalSharingFHIRSearchResult.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x22D0931ACLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ClinicalSharingFHIRSearchResult.CodingKeys()
{
  return &type metadata for ClinicalSharingFHIRSearchResult.CodingKeys;
}

unint64_t sub_22D0931E8()
{
  unint64_t result = qword_26853EA20;
  if (!qword_26853EA20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA20);
  }
  return result;
}

unint64_t sub_22D093240()
{
  unint64_t result = qword_26853EA28;
  if (!qword_26853EA28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA28);
  }
  return result;
}

unint64_t sub_22D093298()
{
  unint64_t result = qword_26853EA30;
  if (!qword_26853EA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA30);
  }
  return result;
}

uint64_t sub_22D0932F0(void *a1)
{
  sub_22D0935FC();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_22D2BC390();
  __swift_project_value_buffer(v7, (uint64_t)qword_26AEC3C90);
  uint64_t v8 = sub_22D2BC380();
  os_log_type_t v9 = sub_22D2BD050();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_22CFEE000, v8, v9, "Retrieving multi device ID.", v10, 2u);
    MEMORY[0x230F7BDF0](v10, -1, -1);
  }

  v15[1] = sub_22D2BD0E0();
  *(void *)(swift_allocObject() + 16) = a1;
  id v11 = a1;
  sub_22D2BC5D0();
  sub_22D093708();
  uint64_t v12 = (uint64_t (*)(uint64_t, void, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D094168(0, (unint64_t *)&qword_26AEC1DA8, MEMORY[0x263EFDCF0]);
  sub_22D093794(&qword_26AEC1E00, (void (*)(uint64_t))sub_22D093708);
  sub_22D0940D8((unint64_t *)&qword_26AEC1DA0, (unint64_t *)&qword_26AEC1DA8, v12);
  sub_22D2BC830();
  swift_release();
  swift_release();
  sub_22D093794(&qword_26AEC1CE8, (void (*)(uint64_t))sub_22D0935FC);
  uint64_t v13 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return v13;
}

void sub_22D0935FC()
{
  if (!qword_26AEC1CF0)
  {
    unint64_t v0 = (uint64_t (*)(uint64_t, void, unint64_t, void))MEMORY[0x263EFDCF0];
    sub_22D094168(255, (unint64_t *)&qword_26AEC1DA8, MEMORY[0x263EFDCF0]);
    sub_22D093708();
    sub_22D0940D8((unint64_t *)&qword_26AEC1DA0, (unint64_t *)&qword_26AEC1DA8, v0);
    sub_22D093794(&qword_26AEC1E00, (void (*)(uint64_t))sub_22D093708);
    unint64_t v1 = sub_22D2BC520();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_26AEC1CF0);
    }
  }
}

void sub_22D093708()
{
  if (!qword_26AEC1E08)
  {
    sub_22D093D64(255, (unint64_t *)&qword_26AEC1E60, MEMORY[0x263F8D8F0]);
    sub_22CFF49FC();
    unint64_t v0 = sub_22D2BC6E0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26AEC1E08);
    }
  }
}

uint64_t sub_22D093794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D0937DC@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  sub_22D093D64(0, &qword_26AEC1DE8, MEMORY[0x263EFDDF8]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v29 - v9;
  sub_22D094168(0, &qword_26AEC1FD0, MEMORY[0x263EFDEA0]);
  uint64_t v12 = v11;
  MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v29 - v14;
  unint64_t v16 = a1[1];
  if (v16)
  {
    uint64_t v32 = v8;
    uint64_t v33 = v13;
    uint64_t v17 = *a1;
    uint64_t v18 = qword_26AEC1C58;
    swift_bridgeObjectRetain();
    if (v18 != -1) {
      swift_once();
    }
    uint64_t v19 = sub_22D2BC390();
    __swift_project_value_buffer(v19, (uint64_t)qword_26AEC3C90);
    swift_bridgeObjectRetain_n();
    uint64_t v20 = sub_22D2BC380();
    os_log_type_t v21 = sub_22D2BD050();
    if (os_log_type_enabled(v20, v21))
    {
      OSStatus v30 = a3;
      uint64_t v22 = swift_slowAlloc();
      uint64_t v31 = v17;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      v35[0] = v24;
      uint64_t v29 = v7;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v34 = sub_22D0A4D24(v31, v16, v35);
      uint64_t v7 = v29;
      a3 = v30;
      sub_22D2BD220();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_22CFEE000, v20, v21, "Multi device ID found. Device ID: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x230F7BDF0](v24, -1, -1);
      uint64_t v25 = v23;
      uint64_t v17 = v31;
      MEMORY[0x230F7BDF0](v25, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v28 = v32;
    v35[0] = v17;
    v35[1] = v16;
    sub_22D2BC6B0();
    sub_22CFF49FC();
    sub_22D2BC680();
    (*(void (**)(char *, uint64_t))(v28 + 8))(v10, v7);
    sub_22D0940D8(&qword_26AEC1FC8, &qword_26AEC1FD0, MEMORY[0x263EFDEA0]);
    uint64_t v27 = sub_22D2BC720();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v15, v12);
  }
  else
  {
    uint64_t result = sub_22D093DB4(a2);
    uint64_t v27 = result;
  }
  *a3 = v27;
  return result;
}

void sub_22D093BBC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  uint64_t v11 = (void *)sub_22D2BCBA0();
  uint64_t v12 = (void *)sub_22D2BCBA0();
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = sub_22D094210;
  v13[3] = v10;
  _OWORD v13[4] = a4;
  v13[5] = a5;
  v15[4] = sub_22D04C86C;
  v15[5] = v13;
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 1107296256;
  void v15[2] = sub_22D1F193C;
  v15[3] = &block_descriptor_7;
  uint64_t v14 = _Block_copy(v15);
  swift_bridgeObjectRetain();
  swift_release();
  objc_msgSend(a3, sel_setString_forKey_completion_, v11, v12, v14);
  _Block_release(v14);
}

uint64_t sub_22D093D24()
{
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D093D5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D0937DC(a1, *(void **)(v2 + 16), a2);
}

void sub_22D093D64(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, void))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, MEMORY[0x263F8D310]);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_22D093DB4(void *a1)
{
  uint64_t v2 = sub_22D2BBC90();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D2BBC80();
  uint64_t v6 = sub_22D2BBC40();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (qword_26AEC1C58 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_22D2BC390();
  __swift_project_value_buffer(v9, (uint64_t)qword_26AEC3C90);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = sub_22D2BC380();
  os_log_type_t v11 = sub_22D2BD050();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_22D0A4D24(v6, v8, &v20);
    sub_22D2BD220();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_22CFEE000, v10, v11, "Creating and storing a new multi device ID. Device ID: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x230F7BDF0](v13, -1, -1);
    MEMORY[0x230F7BDF0](v12, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a1;
  v14[3] = v6;
  v14[4] = v8;
  uint64_t v15 = (uint64_t (*)(uint64_t, void, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D094168(0, (unint64_t *)&qword_26AEC3078, MEMORY[0x263EFDE20]);
  swift_allocObject();
  id v16 = a1;
  uint64_t v20 = sub_22D2BC6F0();
  sub_22D0940D8(&qword_26AEC3070, (unint64_t *)&qword_26AEC3078, v15);
  uint64_t v17 = sub_22D2BC720();
  swift_release();
  return v17;
}

uint64_t sub_22D0940D8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t, void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_22D094168(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_22D09411C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 40, 7);
}

void sub_22D09415C(uint64_t a1, uint64_t a2)
{
  sub_22D093BBC(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

void sub_22D094168(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t, void))
{
  if (!*a2)
  {
    unint64_t v6 = sub_22CFF49FC();
    unint64_t v7 = a3(a1, MEMORY[0x263F8D310], v6, MEMORY[0x263F8E4E0]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_22D0941D8()
{
  swift_release();
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t sub_22D094210(uint64_t a1, uint64_t a2, char a3)
{
  return sub_22D284CC4(a1, a2, a3 & 1, *(uint64_t (**)(void *))(v3 + 16));
}

uint64_t sub_22D09421C()
{
  swift_release();
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 48, 7);
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t sub_22D094274@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ClinicalSharingDataNodeInfo();
  uint64_t v71 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v73 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D097460(0, &qword_26853EAA8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDDF8]);
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (char *)&v58 - v11;
  sub_22D097714(0, &qword_26853EAB8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDEA0]);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  MEMORY[0x270FA5388](v12);
  id v61 = (char *)&v58 - v13;
  sub_22D09BA00(0, &qword_26853EB88, sub_22D072E5C);
  uint64_t v15 = v14;
  uint64_t v68 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v58 - v16;
  sub_22D0733CC(0);
  uint64_t v75 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  os_log_type_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v58 - v22;
  uint64_t v24 = type metadata accessor for PBNode(0);
  uint64_t v70 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v72 = (uint64_t)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *a1;
  int64_t v27 = *(void *)(*a1 + 16);
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v69 = v15;
  if (v27)
  {
    uint64_t v58 = a2;
    uint64_t v59 = a3;
    id v60 = a4;
    uint64_t v76 = MEMORY[0x263F8EE78];
    sub_22D24BC94(0, v27, 0);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v74 = *(void *)(v18 + 72);
    uint64_t v30 = v76;
    uint64_t v31 = v29;
    int64_t v32 = v27;
    uint64_t v33 = v72;
    do
    {
      sub_22D098E00(v31, (uint64_t)v23, (uint64_t (*)(void))sub_22D0733CC);
      uint64_t v34 = *(int *)(v75 + 48);
      uint64_t v35 = (uint64_t)&v21[v34];
      uint64_t v36 = (uint64_t)&v23[v34];
      sub_22D098E00((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E00(v36, v35, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_22D09BB48((uint64_t)v21, v33, type metadata accessor for PBNode);
      sub_22D098E68(v35, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_22D098E68((uint64_t)v23, (uint64_t (*)(void))sub_22D0733CC);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BC94(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v30 = v76;
      }
      unint64_t v38 = *(void *)(v30 + 16);
      unint64_t v37 = *(void *)(v30 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_22D24BC94(v37 > 1, v38 + 1, 1);
        uint64_t v30 = v76;
      }
      *(void *)(v30 + 16) = v38 + 1;
      uint64_t v39 = v30
          + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))
          + *(void *)(v70 + 72) * v38;
      uint64_t v33 = v72;
      sub_22D09BB48(v72, v39, type metadata accessor for PBNode);
      v31 += v74;
      --v32;
    }
    while (v32);
    uint64_t v76 = MEMORY[0x263F8EE78];
    sub_22D24BC4C(0, v27, 0);
    uint64_t v28 = v76;
    uint64_t v40 = v58;
    uint64_t v41 = v73;
    do
    {
      uint64_t v42 = v40;
      sub_22D098E00(v29, (uint64_t)v23, (uint64_t (*)(void))sub_22D0733CC);
      uint64_t v43 = *(int *)(v75 + 48);
      uint64_t v44 = (uint64_t)&v21[v43];
      uint64_t v45 = (uint64_t)&v23[v43];
      sub_22D098E00((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E00(v45, v44, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_22D09BB48(v44, v41, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      sub_22D098E68((uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E68((uint64_t)v23, (uint64_t (*)(void))sub_22D0733CC);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BC4C(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = v76;
      }
      unint64_t v47 = *(void *)(v28 + 16);
      unint64_t v46 = *(void *)(v28 + 24);
      uint64_t v40 = v42;
      if (v47 >= v46 >> 1)
      {
        sub_22D24BC4C(v46 > 1, v47 + 1, 1);
        uint64_t v40 = v42;
        uint64_t v28 = v76;
      }
      *(void *)(v28 + 16) = v47 + 1;
      uint64_t v48 = v28
          + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
          + *(void *)(v71 + 72) * v47;
      uint64_t v41 = v73;
      sub_22D09BB48(v73, v48, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      v29 += v74;
      --v27;
    }
    while (v27);
    a3 = v59;
    a4 = v60;
  }
  else
  {
    uint64_t v42 = a2;
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  uint64_t v76 = v30;
  sub_22D099090(0);
  unint64_t v49 = v62;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  unint64_t v50 = v61;
  uint64_t v51 = v66;
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v51);
  uint64_t v52 = __swift_project_boxed_opaque_existential_1(v42, v42[3]);
  uint64_t v53 = sub_22D09A9FC((uint64_t)v52, a3);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v64);
  uint64_t v76 = v53;
  *(void *)(swift_allocObject() + 16) = v28;
  sub_22D097714(0, &qword_26853E978, type metadata accessor for PBPushBlobsResponse, MEMORY[0x263EFDCF0]);
  sub_22D072E5C(0);
  sub_22D0990C4();
  id v54 = v67;
  sub_22D2BC780();
  swift_release();
  swift_release();
  sub_22D09BC3C(&qword_26853EB90, &qword_26853EB88, sub_22D072E5C);
  uint64_t v55 = v69;
  uint64_t v56 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v54, v55);
  *a4 = v56;
  return result;
}

uint64_t sub_22D094B5C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v75 = a2;
  sub_22D098F6C(0, &qword_26853EB58, (void (*)(uint64_t))sub_22D09BAAC, (void (*)(void))sub_22D09BB14);
  uint64_t v74 = v3;
  uint64_t v73 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  uint64_t v70 = (char *)&v68 - v4;
  sub_22D098FF8(0, &qword_26853EB70, (void (*)(uint64_t))sub_22D09BAAC, (void (*)(void))sub_22D09BB14);
  uint64_t v72 = v5;
  uint64_t v71 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v69 = (char *)&v68 - v6;
  uint64_t v82 = type metadata accessor for ClinicalSharingDataNodeInfo();
  uint64_t v7 = *(void *)(v82 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v82);
  uint64_t v81 = (uint64_t)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v68 - v10;
  uint64_t v12 = *a1;
  uint64_t v13 = (void *)MEMORY[0x263F8EE78];
  uint64_t v83 = (void *)MEMORY[0x263F8EE78];
  uint64_t v14 = *(void *)(v12 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v16 = swift_bridgeObjectRetain();
      sub_22D23E9AC(v16);
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v83;
  }
  uint64_t v87 = (void *)MEMORY[0x263F8EE80];
  uint64_t v17 = v13[2];
  if (v17)
  {
    uint64_t v18 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v19 = (v18 + 32) & ~v18;
    uint64_t v68 = v13;
    uint64_t v20 = (uint64_t)v13 + v19;
    uint64_t v21 = *(void *)(v7 + 72);
    uint64_t v80 = v19;
    uint64_t v77 = v18 | 7;
    uint64_t v78 = v21 + v19;
    uint64_t v22 = (void *)MEMORY[0x263F8EE80];
    long long v76 = xmmword_22D2BFF40;
    uint64_t v79 = v21;
    while (1)
    {
      sub_22D098E00(v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      uint64_t v85 = 0;
      uint64_t v86 = 0xE000000000000000;
      uint64_t v24 = &v11[*(int *)(v82 + 20)];
      uint64_t v25 = *(void *)&v24[*(int *)(type metadata accessor for PBReference(0) + 20)]
          + OBJC_IVAR____TtCV19HealthRecordsDaemon11PBReferenceP33_0EFE040E969A4F997963A912892EBD4513_StorageClass__type;
      swift_beginAccess();
      char v26 = *(unsigned char *)(v25 + 8);
      uint64_t v83 = *(void **)v25;
      LOBYTE(v84) = v26;
      sub_22D2BD430();
      uint64_t v27 = *(void *)v11;
      uint64_t v28 = *(void *)(*(void *)v11 + 16);
      if (v28)
      {
        sub_22D097460(0, &qword_26853DD48, MEMORY[0x263F07508], MEMORY[0x263F8E0F8]);
        uint64_t v29 = *(void *)(sub_22D2BBC90() - 8);
        uint64_t v30 = *(void *)(v29 + 72);
        unint64_t v31 = (*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80);
        int64_t v32 = (void *)swift_allocObject();
        size_t v33 = _swift_stdlib_malloc_size(v32);
        if (!v30) {
          goto LABEL_37;
        }
        if (v33 - v31 == 0x8000000000000000 && v30 == -1) {
          goto LABEL_40;
        }
        void v32[2] = v28;
        void v32[3] = 2 * ((uint64_t)(v33 - v31) / v30);
        swift_bridgeObjectRetain_n();
        uint64_t v35 = sub_22D24A528(&v83, (char *)v32 + v31, v28, v27);
        sub_22D05C83C();
        if (v35 != v28) {
          goto LABEL_38;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        int64_t v32 = (void *)MEMORY[0x263F8EE78];
      }
      uint64_t v83 = v32;
      sub_22D099244(&v83);
      swift_bridgeObjectRelease();
      uint64_t v36 = v83;
      uint64_t v37 = sub_22D2BBC90();
      MEMORY[0x230F7AA70](v36, v37);
      sub_22D2BCCB0();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v39 = v85;
      uint64_t v38 = v86;
      unint64_t v41 = sub_22D04EB7C(v85, v86);
      uint64_t v42 = v22[2];
      BOOL v43 = (v40 & 1) == 0;
      uint64_t v44 = v42 + v43;
      if (__OFADD__(v42, v43))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      char v45 = v40;
      if (v22[3] < v44)
      {
        sub_22D051358(v44, 1);
        uint64_t v22 = v87;
        unint64_t v46 = sub_22D04EB7C(v39, v38);
        if ((v45 & 1) != (v47 & 1))
        {
          uint64_t result = sub_22D2BD6A0();
          __break(1u);
          return result;
        }
        unint64_t v41 = v46;
      }
      if (v45)
      {
        swift_bridgeObjectRelease();
        uint64_t v48 = v22[7];
        sub_22D09BB48((uint64_t)v11, v81, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
        unint64_t v49 = *(void *)(v48 + 8 * v41);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v48 + 8 * v41) = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v49 = sub_22D2815DC(0, *(void *)(v49 + 16) + 1, 1, v49);
          *(void *)(v48 + 8 * v41) = v49;
        }
        unint64_t v52 = *(void *)(v49 + 16);
        unint64_t v51 = *(void *)(v49 + 24);
        if (v52 >= v51 >> 1)
        {
          unint64_t v49 = sub_22D2815DC(v51 > 1, v52 + 1, 1, v49);
          *(void *)(v48 + 8 * v41) = v49;
        }
        *(void *)(v49 + 16) = v52 + 1;
        uint64_t v23 = v79;
        sub_22D09BB48(v81, v49 + v80 + v52 * v79, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
      }
      else
      {
        sub_22D097460(0, &qword_26853EB78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingDataNodeInfo, MEMORY[0x263F8E0F8]);
        uint64_t v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = v76;
        sub_22D09BB48((uint64_t)v11, v53 + v80, (uint64_t (*)(void))type metadata accessor for ClinicalSharingDataNodeInfo);
        v22[(v41 >> 6) + 8] |= 1 << v41;
        id v54 = (uint64_t *)(v22[6] + 16 * v41);
        uint64_t *v54 = v39;
        v54[1] = v38;
        *(void *)(v22[7] + 8 * v41) = v53;
        uint64_t v55 = v22[2];
        BOOL v56 = __OFADD__(v55, 1);
        uint64_t v57 = v55 + 1;
        if (v56) {
          goto LABEL_39;
        }
        void v22[2] = v57;
        uint64_t v23 = v79;
      }
      v20 += v23;
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        goto LABEL_31;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v22 = (void *)MEMORY[0x263F8EE80];
LABEL_31:
  if (qword_26AEC1C58 != -1) {
LABEL_41:
  }
    swift_once();
  uint64_t v58 = sub_22D2BC390();
  __swift_project_value_buffer(v58, (uint64_t)qword_26AEC3C90);
  swift_retain();
  uint64_t v59 = sub_22D2BC380();
  os_log_type_t v60 = sub_22D2BD050();
  if (os_log_type_enabled(v59, v60))
  {
    id v61 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v61 = 134217984;
    uint64_t v83 = (void *)v22[2];
    sub_22D2BD220();
    swift_release();
    _os_log_impl(&dword_22CFEE000, v59, v60, "Data nodes uploaded. Category Count: %ld", v61, 0xCu);
    MEMORY[0x230F7BDF0](v61, -1, -1);
  }
  else
  {

    swift_release();
  }
  uint64_t v83 = v22;
  sub_22D09BAAC();
  sub_22D09BB14();
  uint64_t v62 = v70;
  sub_22D2BCD80();
  swift_release();
  sub_22CFF49FC();
  uint64_t v63 = v69;
  uint64_t v64 = v74;
  sub_22D2BC540();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v62, v64);
  sub_22D09BBB0();
  uint64_t v65 = v72;
  uint64_t v66 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v63, v65);
  *uint64_t v75 = v66;
  return result;
}

uint64_t sub_22D095484@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ClinicalSharingCategoryNodeInfo();
  uint64_t v71 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8 - 8);
  uint64_t v73 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D097460(0, &qword_26853EAA8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDDF8]);
  uint64_t v65 = *(void *)(v10 - 8);
  uint64_t v66 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v62 = (char *)&v58 - v11;
  sub_22D097714(0, &qword_26853EAB8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDEA0]);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  MEMORY[0x270FA5388](v12);
  id v61 = (char *)&v58 - v13;
  sub_22D09BA00(0, &qword_26853EB48, sub_22D072AF4);
  uint64_t v15 = v14;
  uint64_t v68 = *(void *)(v14 - 8);
  MEMORY[0x270FA5388](v14);
  uint64_t v67 = (char *)&v58 - v16;
  sub_22D072EF4(0);
  uint64_t v75 = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v58 - v22;
  uint64_t v24 = type metadata accessor for PBNode(0);
  uint64_t v70 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v24 - 8);
  uint64_t v72 = (uint64_t)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = *a1;
  int64_t v27 = *(void *)(*a1 + 16);
  uint64_t v28 = MEMORY[0x263F8EE78];
  uint64_t v69 = v15;
  if (v27)
  {
    uint64_t v58 = a2;
    uint64_t v59 = a3;
    os_log_type_t v60 = a4;
    uint64_t v76 = MEMORY[0x263F8EE78];
    sub_22D24BC94(0, v27, 0);
    uint64_t v29 = v26 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v74 = *(void *)(v18 + 72);
    uint64_t v30 = v76;
    uint64_t v31 = v29;
    int64_t v32 = v27;
    uint64_t v33 = v72;
    do
    {
      sub_22D098E00(v31, (uint64_t)v23, (uint64_t (*)(void))sub_22D072EF4);
      uint64_t v34 = *(int *)(v75 + 48);
      uint64_t v35 = (uint64_t)&v21[v34];
      uint64_t v36 = (uint64_t)&v23[v34];
      sub_22D098E00((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E00(v36, v35, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_22D09BB48((uint64_t)v21, v33, type metadata accessor for PBNode);
      sub_22D098E68(v35, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_22D098E68((uint64_t)v23, (uint64_t (*)(void))sub_22D072EF4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BC94(0, *(void *)(v30 + 16) + 1, 1);
        uint64_t v30 = v76;
      }
      unint64_t v38 = *(void *)(v30 + 16);
      unint64_t v37 = *(void *)(v30 + 24);
      if (v38 >= v37 >> 1)
      {
        sub_22D24BC94(v37 > 1, v38 + 1, 1);
        uint64_t v30 = v76;
      }
      *(void *)(v30 + 16) = v38 + 1;
      uint64_t v39 = v30
          + ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))
          + *(void *)(v70 + 72) * v38;
      uint64_t v33 = v72;
      sub_22D09BB48(v72, v39, type metadata accessor for PBNode);
      v31 += v74;
      --v32;
    }
    while (v32);
    uint64_t v76 = MEMORY[0x263F8EE78];
    sub_22D24BCDC(0, v27, 0);
    uint64_t v28 = v76;
    char v40 = v58;
    uint64_t v41 = v73;
    do
    {
      uint64_t v42 = v40;
      sub_22D098E00(v29, (uint64_t)v23, (uint64_t (*)(void))sub_22D072EF4);
      uint64_t v43 = *(int *)(v75 + 48);
      uint64_t v44 = (uint64_t)&v21[v43];
      uint64_t v45 = (uint64_t)&v23[v43];
      sub_22D098E00((uint64_t)v23, (uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E00(v45, v44, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_22D09BB48(v44, v41, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      sub_22D098E68((uint64_t)v21, type metadata accessor for PBNode);
      sub_22D098E68((uint64_t)v23, (uint64_t (*)(void))sub_22D072EF4);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BCDC(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v28 = v76;
      }
      unint64_t v47 = *(void *)(v28 + 16);
      unint64_t v46 = *(void *)(v28 + 24);
      char v40 = v42;
      if (v47 >= v46 >> 1)
      {
        sub_22D24BCDC(v46 > 1, v47 + 1, 1);
        char v40 = v42;
        uint64_t v28 = v76;
      }
      *(void *)(v28 + 16) = v47 + 1;
      uint64_t v48 = v28
          + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80))
          + *(void *)(v71 + 72) * v47;
      uint64_t v41 = v73;
      sub_22D09BB48(v73, v48, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCategoryNodeInfo);
      v29 += v74;
      --v27;
    }
    while (v27);
    a3 = v59;
    a4 = v60;
  }
  else
  {
    uint64_t v42 = a2;
    uint64_t v30 = MEMORY[0x263F8EE78];
  }
  uint64_t v76 = v30;
  sub_22D099090(0);
  unint64_t v49 = v62;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  unint64_t v50 = v61;
  uint64_t v51 = v66;
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v51);
  unint64_t v52 = __swift_project_boxed_opaque_existential_1(v42, v42[3]);
  uint64_t v53 = sub_22D09A9FC((uint64_t)v52, a3);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v50, v64);
  uint64_t v76 = v53;
  *(void *)(swift_allocObject() + 16) = v28;
  sub_22D097714(0, &qword_26853E978, type metadata accessor for PBPushBlobsResponse, MEMORY[0x263EFDCF0]);
  sub_22D072AF4(0);
  sub_22D0990C4();
  id v54 = v67;
  sub_22D2BC780();
  swift_release();
  swift_release();
  sub_22D09BC3C(&qword_26853EB50, &qword_26853EB48, sub_22D072AF4);
  uint64_t v55 = v69;
  uint64_t v56 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v54, v55);
  *a4 = v56;
  return result;
}

void sub_22D095D6C(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(void *)(*a1 + 16);
  if (!v4)
  {
    unint64_t v6 = MEMORY[0x263F8EE78];
LABEL_25:
    if (qword_26AEC1C58 != -1) {
      goto LABEL_34;
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  unint64_t v6 = MEMORY[0x263F8EE78];
  while (1)
  {
    uint64_t v7 = *(void *)(v3 + 8 * v5 + 32);
    uint64_t v8 = *(void *)(v7 + 16);
    int64_t v9 = *(void *)(v6 + 16);
    int64_t v10 = v9 + v8;
    if (__OFADD__(v9, v8)) {
      break;
    }
    swift_bridgeObjectRetain();
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v10 <= *(void *)(v6 + 24) >> 1)
    {
      if (*(void *)(v7 + 16)) {
        goto LABEL_14;
      }
    }
    else
    {
      if (v9 <= v10) {
        int64_t v12 = v9 + v8;
      }
      else {
        int64_t v12 = v9;
      }
      unint64_t v6 = sub_22D281624(isUniquelyReferenced_nonNull_native, v12, 1, v6);
      if (*(void *)(v7 + 16))
      {
LABEL_14:
        uint64_t v13 = *(void *)(v6 + 16);
        uint64_t v14 = (*(void *)(v6 + 24) >> 1) - v13;
        uint64_t v15 = *(void *)(type metadata accessor for ClinicalSharingCategoryNodeInfo() - 8);
        uint64_t v16 = *(void *)(v15 + 72);
        if (v14 < v8) {
          goto LABEL_32;
        }
        unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
        unint64_t v18 = v6 + v17 + v16 * v13;
        unint64_t v19 = v7 + v17;
        uint64_t v20 = v16 * v8;
        unint64_t v21 = v18 + v20;
        unint64_t v22 = v19 + v20;
        if (v19 < v21 && v18 < v22)
        {
          sub_22D2BD4C0();
          __break(1u);
          return;
        }
        swift_arrayInitWithCopy();
        if (v8)
        {
          uint64_t v24 = *(void *)(v6 + 16);
          BOOL v25 = __OFADD__(v24, v8);
          uint64_t v26 = v24 + v8;
          if (v25) {
            goto LABEL_33;
          }
          *(void *)(v6 + 16) = v26;
        }
        goto LABEL_4;
      }
    }
    if (v8) {
      goto LABEL_31;
    }
LABEL_4:
    ++v5;
    swift_bridgeObjectRelease();
    if (v4 == v5)
    {
      swift_bridgeObjectRelease();
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
LABEL_34:
  swift_once();
LABEL_26:
  uint64_t v27 = sub_22D2BC390();
  __swift_project_value_buffer(v27, (uint64_t)qword_26AEC3C90);
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_22D2BC380();
  os_log_type_t v29 = sub_22D2BD050();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 134217984;
    sub_22D2BD220();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_22CFEE000, v28, v29, "Category nodes uploaded. Count: %ld", v30, 0xCu);
    MEMORY[0x230F7BDF0](v30, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease();
  }
  *a2 = v6;
}

uint64_t sub_22D096074@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v111 = a3;
  uint64_t v108 = a2;
  uint64_t v122 = a4;
  sub_22D0971BC(0);
  uint64_t v128 = v5;
  uint64_t v127 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v129 = (uint64_t)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D098F6C(0, &qword_26853EA40, sub_22D0971F0, (void (*)(void))sub_22D097224);
  uint64_t v105 = v7;
  uint64_t v104 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v102 = (char *)&v101 - v8;
  sub_22D098FF8(0, &qword_26853EA58, sub_22D0971F0, (void (*)(void))sub_22D097224);
  uint64_t v107 = v9;
  uint64_t v106 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v103 = (char *)&v101 - v10;
  sub_22D097258();
  uint64_t v113 = v11;
  uint64_t v112 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v109 = (char *)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D097374();
  uint64_t v115 = v13;
  uint64_t v114 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v110 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D097594();
  uint64_t v120 = v15;
  uint64_t v118 = *(void *)(v15 - 8);
  MEMORY[0x270FA5388](v15);
  id v116 = (char *)&v101 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D097628();
  uint64_t v121 = v17;
  uint64_t v119 = *(void *)(v17 - 8);
  MEMORY[0x270FA5388](v17);
  uint64_t v117 = (char *)&v101 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D072B5C();
  uint64_t v20 = v19;
  uint64_t v132 = *(void *)(v19 - 8);
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v101 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v21);
  uint64_t v125 = (char *)&v101 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v28 = (char *)&v101 - v27;
  uint64_t v29 = MEMORY[0x270FA5388](v26);
  uint64_t v126 = (char *)&v101 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v33 = (char *)&v101 - v32;
  uint64_t v34 = MEMORY[0x270FA5388](v31);
  uint64_t v36 = (char *)&v101 - v35;
  uint64_t v37 = MEMORY[0x270FA5388](v34);
  uint64_t v39 = (char *)&v101 - v38;
  MEMORY[0x270FA5388](v37);
  uint64_t v41 = (char *)&v101 - v40;
  uint64_t v42 = *a1;
  uint64_t v43 = MEMORY[0x263F8EE78];
  uint64_t v133 = v42;
  *(void *)&v134[0] = MEMORY[0x263F8EE78];
  uint64_t v44 = *(void *)(v42 + 16);
  swift_bridgeObjectRetain();
  id v130 = v23;
  uint64_t v131 = v44;
  uint64_t v123 = v28;
  if (v44)
  {
    unint64_t v45 = 0;
    uint64_t result = v133;
    uint64_t v124 = v36;
    while (v45 < *(void *)(result + 16))
    {
      uint64_t v47 = v20;
      unint64_t v48 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      uint64_t v49 = *(void *)(v132 + 72);
      sub_22D098E00(result + v48 + v49 * v45, (uint64_t)v41, (uint64_t (*)(void))sub_22D072B5C);
      uint64_t v50 = type metadata accessor for PBNode(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v50 - 8) + 48))(v41, 1, v50) == 1)
      {
        sub_22D09BB48((uint64_t)v41, (uint64_t)v39, (uint64_t (*)(void))sub_22D072B5C);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_22D24BD6C(0, *(void *)(v43 + 16) + 1, 1);
        }
        uint64_t v43 = *(void *)&v134[0];
        unint64_t v52 = *(void *)(*(void *)&v134[0] + 16);
        unint64_t v51 = *(void *)(*(void *)&v134[0] + 24);
        if (v52 >= v51 >> 1)
        {
          sub_22D24BD6C(v51 > 1, v52 + 1, 1);
          uint64_t v43 = *(void *)&v134[0];
        }
        *(void *)(v43 + 16) = v52 + 1;
        sub_22D09BB48((uint64_t)v39, v43 + v48 + v52 * v49, (uint64_t (*)(void))sub_22D072B5C);
        uint64_t v23 = v130;
        uint64_t v36 = v124;
      }
      else
      {
        sub_22D098E68((uint64_t)v41, (uint64_t (*)(void))sub_22D072B5C);
      }
      ++v45;
      uint64_t v20 = v47;
      uint64_t result = v133;
      if (v131 == v45)
      {
        uint64_t v53 = *(void *)&v134[0];
        uint64_t v28 = v123;
        uint64_t v43 = MEMORY[0x263F8EE78];
        goto LABEL_14;
      }
    }
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v53 = v43;
LABEL_14:
  swift_bridgeObjectRelease();
  uint64_t v54 = *(void *)(v53 + 16);
  if (v54)
  {
    *(void *)&v134[0] = v43;
    sub_22D2BD3D0();
    uint64_t v55 = v53 + ((*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80));
    uint64_t v56 = v20;
    uint64_t v57 = *(void *)(v132 + 72);
    do
    {
      sub_22D098E00(v55, (uint64_t)v36, (uint64_t (*)(void))sub_22D072B5C);
      uint64_t v58 = *(int *)(v56 + 48);
      sub_22D098E00((uint64_t)v36, (uint64_t)v33, (uint64_t (*)(void))sub_22D097894);
      *(void *)&v33[v58] = *(void *)&v36[v58];
      swift_retain();
      sub_22D098E68((uint64_t)v33, (uint64_t (*)(void))sub_22D097894);
      sub_22D098E68((uint64_t)v36, (uint64_t (*)(void))sub_22D072B5C);
      sub_22D2BD3A0();
      sub_22D2BD3E0();
      sub_22D2BD3F0();
      sub_22D2BD3B0();
      v55 += v57;
      --v54;
    }
    while (v54);
    uint64_t v59 = *(void *)&v134[0];
    swift_release();
    uint64_t v20 = v56;
    uint64_t v23 = v130;
    uint64_t v28 = v123;
    uint64_t v43 = MEMORY[0x263F8EE78];
  }
  else
  {
    swift_release();
    uint64_t v59 = MEMORY[0x263F8EE78];
  }
  *(void *)&v134[0] = v43;
  swift_bridgeObjectRetain();
  uint64_t v60 = (uint64_t)v126;
  uint64_t v101 = v59;
  if (v131)
  {
    unint64_t v61 = 0;
    uint64_t result = v133;
    while (v61 < *(void *)(result + 16))
    {
      unint64_t v62 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
      uint64_t v63 = *(void *)(v132 + 72);
      sub_22D098E00(result + v62 + v63 * v61, v60, (uint64_t (*)(void))sub_22D072B5C);
      uint64_t v64 = type metadata accessor for PBNode(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v60, 1, v64) == 1)
      {
        sub_22D098E68(v60, (uint64_t (*)(void))sub_22D072B5C);
      }
      else
      {
        sub_22D09BB48(v60, (uint64_t)v28, (uint64_t (*)(void))sub_22D072B5C);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_22D24BD6C(0, *(void *)(v43 + 16) + 1, 1);
        }
        uint64_t v43 = *(void *)&v134[0];
        unint64_t v66 = *(void *)(*(void *)&v134[0] + 16);
        unint64_t v65 = *(void *)(*(void *)&v134[0] + 24);
        if (v66 >= v65 >> 1)
        {
          sub_22D24BD6C(v65 > 1, v66 + 1, 1);
          uint64_t v43 = *(void *)&v134[0];
        }
        *(void *)(v43 + 16) = v66 + 1;
        sub_22D09BB48((uint64_t)v28, v43 + v62 + v66 * v63, (uint64_t (*)(void))sub_22D072B5C);
        uint64_t v23 = v130;
        uint64_t v60 = (uint64_t)v126;
      }
      ++v61;
      uint64_t result = v133;
      if (v131 == v61)
      {
        uint64_t v67 = *(void *)&v134[0];
        uint64_t v43 = MEMORY[0x263F8EE78];
        goto LABEL_32;
      }
    }
LABEL_44:
    __break(1u);
LABEL_45:
    __break(1u);
    return result;
  }
  uint64_t v67 = v43;
LABEL_32:
  swift_bridgeObjectRelease();
  int64_t v68 = *(void *)(v67 + 16);
  if (v68)
  {
    *(void *)&v134[0] = v43;
    sub_22D24BD24(0, v68, 0);
    uint64_t v69 = *(unsigned __int8 *)(v132 + 80);
    uint64_t v133 = v67;
    uint64_t v70 = v67 + ((v69 + 32) & ~v69);
    uint64_t v71 = *(void *)(v132 + 72);
    uint64_t v72 = (uint64_t)v125;
    while (1)
    {
      sub_22D098E00(v70, v72, (uint64_t (*)(void))sub_22D072B5C);
      uint64_t v73 = *(int *)(v20 + 48);
      sub_22D098E00(v72, (uint64_t)v23, (uint64_t (*)(void))sub_22D097894);
      uint64_t v74 = *(void *)(v72 + v73);
      *(void *)&v23[v73] = v74;
      uint64_t v75 = type metadata accessor for PBNode(0);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v75 - 8) + 48))(v23, 1, v75);
      if (result == 1) {
        goto LABEL_45;
      }
      uint64_t v76 = *(int *)(v128 + 48);
      uint64_t v77 = (uint64_t)v23;
      uint64_t v78 = v129;
      sub_22D09BB48(v77, v129, type metadata accessor for PBNode);
      uint64_t v79 = *(int *)(v20 + 48);
      sub_22D098E00(v72, (uint64_t)v36, (uint64_t (*)(void))sub_22D097894);
      *(void *)&v36[v79] = v74;
      *(void *)(v78 + v76) = v74;
      swift_retain();
      sub_22D098E68((uint64_t)v36, (uint64_t (*)(void))sub_22D097894);
      sub_22D098E68(v72, (uint64_t (*)(void))sub_22D072B5C);
      uint64_t v80 = *(void *)&v134[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BD24(0, *(void *)(v80 + 16) + 1, 1);
        uint64_t v72 = (uint64_t)v125;
        uint64_t v80 = *(void *)&v134[0];
      }
      unint64_t v82 = *(void *)(v80 + 16);
      unint64_t v81 = *(void *)(v80 + 24);
      if (v82 >= v81 >> 1)
      {
        sub_22D24BD24(v81 > 1, v82 + 1, 1);
        uint64_t v72 = (uint64_t)v125;
        uint64_t v80 = *(void *)&v134[0];
      }
      *(void *)(v80 + 16) = v82 + 1;
      sub_22D09BB48(v129, v80+ ((*(unsigned __int8 *)(v127 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80))+ *(void *)(v127 + 72) * v82, (uint64_t (*)(void))sub_22D0971BC);
      v70 += v71;
      --v68;
      uint64_t v23 = v130;
      if (!v68)
      {
        swift_release();
        goto LABEL_42;
      }
    }
  }
  swift_release();
  uint64_t v80 = MEMORY[0x263F8EE78];
LABEL_42:
  *(void *)&v134[0] = v80;
  sub_22D0971F0(0);
  sub_22D097224();
  uint64_t v83 = v102;
  sub_22D2BCD80();
  swift_bridgeObjectRelease();
  sub_22CFF49FC();
  uint64_t v84 = v103;
  uint64_t v85 = v105;
  sub_22D2BC540();
  (*(void (**)(char *, uint64_t))(v104 + 8))(v83, v85);
  uint64_t v86 = v108;
  __swift_project_boxed_opaque_existential_1(v108, v108[3]);
  type metadata accessor for ClinicalSharingCloudStandardAPI();
  sub_22D0972EC();
  uint64_t v87 = v109;
  uint64_t v88 = v107;
  sub_22D2BC810();
  (*(void (**)(char *, uint64_t))(v106 + 8))(v84, v88);
  sub_22CFF4B00((uint64_t)v86, (uint64_t)&v136);
  sub_22D071C5C(v111, (uint64_t)v134);
  uint64_t v89 = swift_allocObject();
  sub_22CFF8C10(&v136, v89 + 16);
  long long v90 = v134[3];
  *(_OWORD *)(v89 + 88) = v134[2];
  *(_OWORD *)(v89 + 104) = v90;
  *(_OWORD *)(v89 + 120) = v134[4];
  *(void *)(v89 + 136) = v135;
  long long v91 = v134[1];
  *(_OWORD *)(v89 + 56) = v134[0];
  *(_OWORD *)(v89 + 72) = v91;
  sub_22D2BC5D0();
  sub_22D0706B4(0);
  uint64_t v92 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D097714(0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
  sub_22D09754C(&qword_26853EA78, (void (*)(uint64_t))sub_22D097258);
  sub_22D0974C4();
  uint64_t v93 = v110;
  uint64_t v94 = v113;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v112 + 8))(v87, v94);
  sub_22D09754C(&qword_26853EA88, (void (*)(uint64_t))sub_22D097374);
  uint64_t v95 = v116;
  uint64_t v96 = v115;
  sub_22D2BC800();
  (*(void (**)(char *, uint64_t))(v114 + 8))(v93, v96);
  *(void *)(swift_allocObject() + 16) = v101;
  sub_22D2BC5D0();
  type metadata accessor for ClinicalSharingSyncContext();
  sub_22D097714(0, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, v92);
  sub_22D09754C(&qword_26853EA98, (void (*)(uint64_t))sub_22D097594);
  sub_22D097790();
  uint64_t v97 = v117;
  uint64_t v98 = v120;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v118 + 8))(v95, v98);
  sub_22D09754C(&qword_26853EAA0, (void (*)(uint64_t))sub_22D097628);
  uint64_t v99 = v121;
  uint64_t v100 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v97, v99);
  *uint64_t v122 = v100;
  return result;
}

void sub_22D0971BC(uint64_t a1)
{
}

void sub_22D0971F0(uint64_t a1)
{
}

uint64_t sub_22D097224()
{
  return sub_22D09754C(&qword_26853EA50, sub_22D0971F0);
}

void sub_22D097258()
{
  if (!qword_26853EA60)
  {
    sub_22D098FF8(255, &qword_26853EA58, sub_22D0971F0, (void (*)(void))sub_22D097224);
    sub_22D0972EC();
    unint64_t v0 = sub_22D2BC420();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EA60);
    }
  }
}

unint64_t sub_22D0972EC()
{
  unint64_t result = qword_26853EA68;
  if (!qword_26853EA68)
  {
    sub_22D098FF8(255, &qword_26853EA58, sub_22D0971F0, (void (*)(void))sub_22D097224);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853EA68);
  }
  return result;
}

void sub_22D097374()
{
  if (!qword_26853EA70)
  {
    sub_22D097714(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    sub_22D097258();
    sub_22D0974C4();
    sub_22D09754C(&qword_26853EA78, (void (*)(uint64_t))sub_22D097258);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EA70);
    }
  }
}

void sub_22D097460(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_22D0974C4()
{
  unint64_t result = qword_26AEC1DB0;
  if (!qword_26AEC1DB0)
  {
    sub_22D097714(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1DB0);
  }
  return result;
}

uint64_t sub_22D09754C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_22D097594()
{
  if (!qword_26853EA80)
  {
    sub_22D097374();
    sub_22D09754C(&qword_26853EA88, (void (*)(uint64_t))sub_22D097374);
    unint64_t v0 = sub_22D2BC510();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EA80);
    }
  }
}

void sub_22D097628()
{
  if (!qword_26853EA90)
  {
    sub_22D097714(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    sub_22D097594();
    sub_22D097790();
    sub_22D09754C(&qword_26853EA98, (void (*)(uint64_t))sub_22D097594);
    unint64_t v0 = sub_22D2BC520();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EA90);
    }
  }
}

void sub_22D097714(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t, unint64_t, void))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = sub_22CFF49FC();
    unint64_t v9 = a4(a1, v7, v8, MEMORY[0x263F8E4E0]);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t sub_22D097790()
{
  unint64_t result = qword_26AEC1D70;
  if (!qword_26AEC1D70)
  {
    sub_22D097714(255, &qword_26AEC1D78, (uint64_t (*)(uint64_t))type metadata accessor for ClinicalSharingSyncContext, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26AEC1D70);
  }
  return result;
}

void sub_22D097818(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v7) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_22D097894(uint64_t a1)
{
}

uint64_t sub_22D0978C8@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v59 = a2;
  sub_22D097460(0, &qword_26853EAA8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDDF8]);
  uint64_t v57 = *(void *)(v7 - 8);
  uint64_t v58 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v54 = (char *)&v49 - v8;
  sub_22D097714(0, &qword_26853EAB8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDEA0]);
  uint64_t v55 = *(void *)(v9 - 8);
  uint64_t v56 = v9;
  MEMORY[0x270FA5388](v9);
  uint64_t v53 = (char *)&v49 - v10;
  sub_22D09BA00(0, &qword_26853EAC0, sub_22D0706B4);
  uint64_t v64 = v11;
  uint64_t v62 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v60 = (char *)&v49 - v12;
  sub_22D09914C();
  uint64_t v65 = v13;
  uint64_t v63 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  unint64_t v61 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D0971BC(0);
  uint64_t v52 = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v21 = (char *)&v49 - v20;
  uint64_t v22 = type metadata accessor for PBNode(0);
  uint64_t v68 = *(void *)(v22 - 8);
  MEMORY[0x270FA5388](v22 - 8);
  unint64_t v66 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *a1;
  int64_t v25 = *(void *)(*a1 + 16);
  uint64_t v26 = MEMORY[0x263F8EE78];
  if (v25)
  {
    uint64_t v50 = a3;
    unint64_t v51 = a4;
    uint64_t v69 = MEMORY[0x263F8EE78];
    sub_22D24BC94(0, v25, 0);
    uint64_t v27 = v24 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v67 = *(void *)(v16 + 72);
    uint64_t v28 = v69;
    uint64_t v29 = v27;
    int64_t v30 = v25;
    uint64_t v31 = (uint64_t)v66;
    do
    {
      sub_22D098E00(v29, (uint64_t)v21, (uint64_t (*)(void))sub_22D0971BC);
      sub_22D098E00((uint64_t)v21, (uint64_t)v19, type metadata accessor for PBNode);
      sub_22D09BB48((uint64_t)v19, v31, type metadata accessor for PBNode);
      sub_22D098E68((uint64_t)v21, (uint64_t (*)(void))sub_22D0971BC);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_22D24BC94(0, *(void *)(v28 + 16) + 1, 1);
        uint64_t v31 = (uint64_t)v66;
        uint64_t v28 = v69;
      }
      unint64_t v33 = *(void *)(v28 + 16);
      unint64_t v32 = *(void *)(v28 + 24);
      if (v33 >= v32 >> 1)
      {
        sub_22D24BC94(v32 > 1, v33 + 1, 1);
        uint64_t v31 = (uint64_t)v66;
        uint64_t v28 = v69;
      }
      *(void *)(v28 + 16) = v33 + 1;
      sub_22D09BB48(v31, v28+ ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80))+ *(void *)(v68 + 72) * v33, type metadata accessor for PBNode);
      uint64_t v34 = v67;
      v29 += v67;
      --v30;
    }
    while (v30);
    uint64_t v69 = MEMORY[0x263F8EE78];
    sub_22D2BD3D0();
    uint64_t v35 = v52;
    do
    {
      sub_22D098E00(v27, (uint64_t)v21, (uint64_t (*)(void))sub_22D0971BC);
      uint64_t v36 = *(int *)(v35 + 48);
      sub_22D098E00((uint64_t)v21, (uint64_t)v19, type metadata accessor for PBNode);
      *(void *)&v19[v36] = *(void *)&v21[v36];
      swift_retain();
      sub_22D098E68((uint64_t)v19, type metadata accessor for PBNode);
      sub_22D098E68((uint64_t)v21, (uint64_t (*)(void))sub_22D0971BC);
      sub_22D2BD3A0();
      sub_22D2BD3E0();
      sub_22D2BD3F0();
      sub_22D2BD3B0();
      v27 += v34;
      --v25;
    }
    while (v25);
    uint64_t v26 = v69;
    a3 = v50;
    a4 = v51;
  }
  else
  {
    uint64_t v28 = MEMORY[0x263F8EE78];
  }
  uint64_t v69 = v28;
  sub_22D099090(0);
  uint64_t v37 = v54;
  sub_22D2BC6B0();
  sub_22CFF49FC();
  uint64_t v38 = v53;
  uint64_t v39 = v58;
  sub_22D2BC680();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v37, v39);
  uint64_t v40 = __swift_project_boxed_opaque_existential_1(v59, v59[3]);
  uint64_t v41 = sub_22D09A9FC((uint64_t)v40, a3);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v38, v56);
  uint64_t v69 = v41;
  *(void *)(swift_allocObject() + 16) = v26;
  uint64_t v42 = (uint64_t (*)(uint64_t, uint64_t, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D097714(0, &qword_26853E978, type metadata accessor for PBPushBlobsResponse, MEMORY[0x263EFDCF0]);
  sub_22D0706B4(0);
  sub_22D0990C4();
  swift_bridgeObjectRetain();
  uint64_t v43 = v60;
  sub_22D2BC780();
  swift_release();
  swift_release();
  *(void *)(swift_allocObject() + 16) = v26;
  sub_22D097714(0, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, v42);
  sub_22D09BC3C(&qword_26853EAD0, &qword_26853EAC0, sub_22D0706B4);
  sub_22D0974C4();
  uint64_t v44 = v61;
  uint64_t v45 = v64;
  sub_22D2BC7A0();
  swift_release();
  (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v45);
  sub_22D09754C(&qword_26853EAD8, (void (*)(uint64_t))sub_22D09914C);
  uint64_t v46 = v65;
  uint64_t v47 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v44, v46);
  *a4 = v47;
  return result;
}

uint64_t sub_22D09818C@<X0>(void **a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v38 = a3;
  sub_22D097460(0, &qword_26AEC2F08, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDDF8]);
  uint64_t v36 = *(void *)(v5 - 8);
  uint64_t v37 = v5;
  MEMORY[0x270FA5388](v5);
  unint64_t v33 = (char *)&v32 - v6;
  sub_22D097714(0, &qword_26AEC3018, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDEA0]);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v32 = (char *)&v32 - v8;
  uint64_t v9 = *a1;
  if (!(a2 >> 62))
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v10) {
      goto LABEL_3;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    unint64_t v44 = a2;
    sub_22D0706B4(0);
    swift_bridgeObjectRetain();
    uint64_t v27 = v33;
    sub_22D2BC6B0();
    sub_22CFF49FC();
    uint64_t v28 = v32;
    uint64_t v29 = v37;
    sub_22D2BC680();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v27, v29);
    sub_22D09B0DC();
    uint64_t v30 = v35;
    uint64_t v31 = sub_22D2BC720();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v28, v30);
    *uint64_t v38 = v31;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t result = sub_22D2BD470();
  uint64_t v10 = result;
  if (!result) {
    goto LABEL_15;
  }
LABEL_3:
  if (v10 >= 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = a2 & 0xC000000000000001;
    *(void *)&long long v12 = 136315138;
    long long v40 = v12;
    uint64_t v39 = MEMORY[0x263F8EE58] + 8;
    unint64_t v42 = a2 & 0xC000000000000001;
    uint64_t v43 = v10;
    uint64_t v41 = v9;
    do
    {
      if (v14)
      {
        uint64_t v17 = MEMORY[0x230F7AF90](v13, a2);
      }
      else
      {
        uint64_t v17 = *(void *)(a2 + 8 * v13 + 32);
        swift_retain();
      }
      if (qword_26AEC1C58 != -1) {
        swift_once();
      }
      uint64_t v18 = sub_22D2BC390();
      __swift_project_value_buffer(v18, (uint64_t)qword_26AEC3C90);
      swift_retain_n();
      uint64_t v19 = sub_22D2BC380();
      os_log_type_t v20 = sub_22D2BD050();
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        unint64_t v44 = v22;
        *(_DWORD *)uint64_t v21 = v40;
        sub_22D2BBC90();
        sub_22D09754C((unint64_t *)&qword_26853DF20, MEMORY[0x263F07508]);
        uint64_t v23 = sub_22D2BD630();
        *(void *)(v21 + 4) = sub_22D0A4D24(v23, v24, (uint64_t *)&v44);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_22CFEE000, v19, v20, "Updating error info. Account: %s", (uint8_t *)v21, 0xCu);
        swift_arrayDestroy();
        uint64_t v25 = v22;
        uint64_t v9 = v41;
        unint64_t v14 = v42;
        MEMORY[0x230F7BDF0](v25, -1, -1);
        uint64_t v26 = v21;
        uint64_t v10 = v43;
        MEMORY[0x230F7BDF0](v26, -1, -1);
      }
      else
      {

        swift_release_n();
      }
      ++v13;
      uint64_t v15 = *(void **)(v17 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error);
      *(void *)(v17 + OBJC_IVAR____TtC19HealthRecordsDaemon26ClinicalSharingSyncContext_error) = v9;
      id v16 = v9;

      swift_release();
    }
    while (v10 != v13);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t sub_22D098664@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v24 = a3;
  sub_22D098F6C(0, (unint64_t *)&qword_26AEC0EA8, sub_22D0706B4, (void (*)(void))sub_22D071744);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)v23 - v8;
  sub_22D098FF8(0, (unint64_t *)&qword_26AEC1D10, sub_22D0706B4, (void (*)(void))sub_22D071744);
  uint64_t v11 = v10;
  uint64_t v12 = *(void *)(v10 - 8);
  MEMORY[0x270FA5388](v10);
  unint64_t v14 = (char *)v23 - v13;
  uint64_t v15 = *a1;
  uint64_t v16 = MEMORY[0x263F8EE78];
  uint64_t v25 = MEMORY[0x263F8EE78];
  uint64_t v17 = *(void *)(v15 + 16);
  if (v17)
  {
    v23[1] = a2;
    swift_bridgeObjectRetain();
    for (uint64_t i = 0; i != v17; ++i)
    {
      unint64_t v19 = swift_bridgeObjectRetain();
      sub_22D23E9D8(v19);
    }
    swift_bridgeObjectRelease();
    uint64_t v16 = v25;
  }
  uint64_t v25 = v16;
  unint64_t v20 = swift_bridgeObjectRetain();
  sub_22D23E9D8(v20);
  sub_22D0706B4(0);
  sub_22D071744();
  sub_22D2BCD80();
  swift_bridgeObjectRelease();
  sub_22CFF49FC();
  sub_22D2BC540();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  sub_22D071898();
  uint64_t v21 = sub_22D2BC720();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t *v24 = v21;
  return result;
}

uint64_t sub_22D0988F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for PBBlobs(0);
  MEMORY[0x270FA5388](v3);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = swift_bridgeObjectRetain();
  uint64_t result = sub_22D25AF58(v6, v5);
  if (!v1)
  {
    sub_22D09754C(&qword_26853EB40, (void (*)(uint64_t))type metadata accessor for PBBlobs);
    uint64_t v8 = sub_22D2BC1E0();
    uint64_t v10 = v9;
    sub_22D09B4B8();
    uint64_t v12 = (uint64_t *)(a1 + *(int *)(v11 + 48));
    uint64_t result = sub_22D09BB48((uint64_t)v5, a1, type metadata accessor for PBBlobs);
    *uint64_t v12 = v8;
    v12[1] = v10;
  }
  return result;
}

uint64_t sub_22D098A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v20 = a1;
  uint64_t v21 = a5;
  uint64_t v8 = type metadata accessor for PBBlobs(0);
  uint64_t v19 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v19 + 64);
  MEMORY[0x270FA5388](v8 - 8);
  sub_22CFF4B00(a4 + 48, (uint64_t)v23);
  uint64_t v10 = *(void *)(a4 + 32);
  sub_22CFF4B00((uint64_t)v23, (uint64_t)v22);
  uint64_t v11 = (void *)swift_allocObject();
  sub_22CFF8C10(v22, (uint64_t)(v11 + 2));
  v11[7] = a2;
  v11[8] = a3;
  v11[9] = 3;
  v11[10] = v10;
  uint64_t v12 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, void))MEMORY[0x263EFDE20];
  sub_22D09B81C(0, &qword_26853E7A0, MEMORY[0x263EFDE20]);
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_22CFF9B64(a2, a3);
  *(void *)&v22[0] = sub_22D2BC6F0();
  sub_22D09B3C8(&qword_26853E7A8, &qword_26853E7A0, v12);
  uint64_t v13 = sub_22D2BC720();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
  v23[0] = v13;
  sub_22D098E00(v20, (uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PBBlobs);
  unint64_t v14 = (*(unsigned __int8 *)(v19 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v15 = swift_allocObject();
  sub_22D09BB48((uint64_t)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14, type metadata accessor for PBBlobs);
  uint64_t v16 = (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t, void))MEMORY[0x263EFDCF0];
  sub_22D09B81C(0, &qword_26853E790, MEMORY[0x263EFDCF0]);
  type metadata accessor for PBPushBlobsRequest(0);
  sub_22D09B3C8(&qword_26853E798, &qword_26853E790, v16);
  sub_22D2BC780();
  swift_release();
  return swift_release();
}

uint64_t sub_22D098D2C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for PBBlobs(0);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  unint64_t v11 = a1[2];
  sub_22D098E00(a2, (uint64_t)v8, type metadata accessor for PBBlobs);
  swift_bridgeObjectRetain();
  sub_22CFF9B64(v10, v11);
  return sub_22D284120((uint64_t)v8, v9, v10, v11, a3);
}

uint64_t sub_22D098E00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_22D098E68(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_22D098EC8()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 104);
  return MEMORY[0x270FA0238](v0, 144, 7);
}

uint64_t sub_22D098F20@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D0978C8(a1, (void *)(v2 + 16), v2 + 56, a2);
}

uint64_t sub_22D098F2C()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_22D098F64@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_22D098664(a1, *(void *)(v2 + 16), a2);
}

void sub_22D098F6C(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    a4();
    unint64_t v6 = sub_22D2BC560();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_22D098FF8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  if (!*a2)
  {
    a3(255);
    sub_22CFF49FC();
    a4();
    unint64_t v6 = sub_22D2BC560();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void sub_22D099090(uint64_t a1)
{
}

unint64_t sub_22D0990C4()
{
  unint64_t result = qword_26853E988;
  if (!qword_26853E988)
  {
    sub_22D097714(255, &qword_26853E978, type metadata accessor for PBPushBlobsResponse, MEMORY[0x263EFDCF0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26853E988);
  }
  return result;
}

void sub_22D09914C()
{
  if (!qword_26853EAC8)
  {
    sub_22D09BA00(255, &qword_26853EAC0, sub_22D0706B4);
    sub_22D097714(255, &qword_26AEC1DB8, (uint64_t (*)(uint64_t))sub_22D0706B4, MEMORY[0x263EFDCF0]);
    sub_22D09BC3C(&qword_26853EAD0, &qword_26853EAC0, sub_22D0706B4);
    sub_22D0974C4();
    unint64_t v0 = sub_22D2BC4A0();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_26853EAC8);
    }
  }
}

uint64_t sub_22D099244(void **a1)
{
  uint64_t v2 = *(void *)(sub_22D2BBC90() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_22D237C50(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  uint64_t result = sub_22D0992EC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_22D0992EC(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_22D2BBC90();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v153 = (char *)&v145 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v165 = (char *)&v145 - v9;
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  id v168 = (char *)&v145 - v11;
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v167 = (char *)&v145 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  id v148 = (char *)&v145 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  unsigned int v155 = (char *)&v145 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  unint64_t v151 = (char *)&v145 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v150 = (char *)&v145 - v20;
  uint64_t v170 = a1;
  uint64_t v21 = a1[1];
  uint64_t result = sub_22D2BD620();
  if (result >= v21)
  {
    if (v21 < 0) {
      goto LABEL_151;
    }
    if (v21) {
      return sub_22D099FF4(0, v21, 1, v170);
    }
    return result;
  }
  if (v21 >= 0) {
    uint64_t v23 = v21;
  }
  else {
    uint64_t v23 = v21 + 1;
  }
  if (v21 < -1) {
    goto LABEL_159;
  }
  uint64_t v146 = result;
  if (v21 < 2)
  {
    uint64_t v26 = v5;
    uint64_t v28 = (char *)MEMORY[0x263F8EE78];
    unint64_t v156 = MEMORY[0x263F8EE78]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v145 = MEMORY[0x263F8EE78];
    if (v21 != 1)
    {
      unint64_t v30 = *(void *)(MEMORY[0x263F8EE78] + 16);
LABEL_117:
      if (v30 >= 2)
      {
        uint64_t v136 = *v170;
        do
        {
          unint64_t v137 = v30 - 2;
          if (v30 < 2) {
            goto LABEL_146;
          }
          if (!v136) {
            goto LABEL_158;
          }
          uint64_t v138 = v28;
          id v139 = v28 + 32;
          uint64_t v140 = *(void *)&v28[16 * v137 + 32];
          uint64_t v141 = *(void *)&v28[16 * v30 + 24];
          uint64_t v142 = v26;
          sub_22D09A33C(v136 + *(void *)(v26 + 72) * v140, v136 + *(void *)(v26 + 72) * *(void *)&v139[16 * v30 - 16], v136 + *(void *)(v26 + 72) * v141, v156);
          if (v2) {
            break;
          }
          if (v141 < v140) {
            goto LABEL_147;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v138 = sub_22D237C00((uint64_t)v138);
          }
          if (v137 >= *((void *)v138 + 2)) {
            goto LABEL_148;
          }
          uint64_t v143 = &v138[16 * v137 + 32];
          *(void *)uint64_t v143 = v140;
          *((void *)v143 + 1) = v141;
          unint64_t v144 = *((void *)v138 + 2);
          if (v30 > v144) {
            goto LABEL_149;
          }
          uint64_t v28 = v138;
          memmove(&v138[16 * v30 + 16], &v138[16 * v30 + 32], 16 * (v144 - v30));
          *((void *)v138 + 2) = v144 - 1;
          unint64_t v30 = v144 - 1;
          uint64_t v26 = v142;
        }
        while (v144 > 2);
      }
LABEL_128:
      swift_bridgeObjectRelease();
      *(void *)(v145 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v24 = v23 >> 1;
    uint64_t v25 = sub_22D2BCE40();
    *(void *)(v25 + 16) = v24;
    uint64_t v26 = v5;
    unint64_t v27 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v145 = v25;
    unint64_t v156 = v25 + v27;
  }
  uint64_t v29 = 0;
  uint64_t v161 = v26 + 16;
  uint64_t v162 = (void (**)(char *, uint64_t))(v26 + 8);
  id v166 = (char **)(v26 + 32);
  uint64_t v28 = (char *)MEMORY[0x263F8EE78];
  uint64_t v157 = v26;
  uint64_t v164 = v4;
  while (1)
  {
    uint64_t v31 = v29;
    uint64_t v32 = v29 + 1;
    uint64_t v154 = v29;
    if (v29 + 1 >= v21)
    {
      uint64_t v40 = v29 + 1;
      goto LABEL_69;
    }
    uint64_t v163 = v21;
    id v149 = v28;
    uint64_t v33 = *v170;
    uint64_t v34 = *(void *)(v26 + 72);
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t))(v26 + 16);
    v35(v150, *v170 + v34 * v32, v4);
    id v158 = (char *)v33;
    uint64_t v169 = v34;
    v35(v151, v33 + v34 * v31, v4);
    uint64_t v36 = sub_22D2BBC40();
    uint64_t v38 = v37;
    if (sub_22D2BBC40() != v36) {
      goto LABEL_20;
    }
    if (v39 == v38) {
      LODWORD(v160) = 0;
    }
    else {
LABEL_20:
    }
      LODWORD(v160) = sub_22D2BD660();
    uint64_t v41 = v148;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v42 = *v162;
    uint64_t v43 = v164;
    (*v162)(v151, v164);
    v42(v150, v43);
    uint64_t v40 = v154 + 2;
    if (v154 + 2 >= v163)
    {
      uint64_t v55 = v157;
    }
    else
    {
      uint64_t v147 = v2;
      uint64_t v159 = v169 * v32;
      unint64_t v44 = v158;
      uint64_t v45 = v169 * v40;
      while (1)
      {
        uint64_t v46 = v40;
        uint64_t v47 = v164;
        v35(v155, (uint64_t)&v44[v45], v164);
        v35(v41, (uint64_t)&v44[v159], v47);
        uint64_t v48 = sub_22D2BBC40();
        uint64_t v50 = v49;
        if (sub_22D2BBC40() == v48 && v51 == v50) {
          int v52 = 0;
        }
        else {
          int v52 = sub_22D2BD660();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v53 = v164;
        v42(v41, v164);
        v42(v155, v53);
        if ((v160 ^ v52)) {
          break;
        }
        uint64_t v40 = v46 + 1;
        v44 += v169;
        if (v163 == v46 + 1)
        {
          uint64_t v54 = v163;
          uint64_t v40 = v163;
          uint64_t v2 = v147;
          uint64_t v55 = v157;
          goto LABEL_33;
        }
      }
      uint64_t v2 = v147;
      uint64_t v55 = v157;
      uint64_t v40 = v46;
    }
    uint64_t v54 = v163;
LABEL_33:
    uint64_t v28 = v149;
    uint64_t v31 = v154;
    uint64_t v56 = v158;
    if ((v160 & 1) == 0) {
      break;
    }
    if (v40 < v154) {
      goto LABEL_152;
    }
    if (v154 >= v40) {
      break;
    }
    uint64_t v147 = v2;
    uint64_t v57 = 0;
    uint64_t v58 = v169 * (v40 - 1);
    uint64_t v59 = v40 * v169;
    uint64_t v60 = v154;
    uint64_t v61 = v154 * v169;
    do
    {
      if (v60 != v40 + v57 - 1)
      {
        if (!v56) {
          goto LABEL_157;
        }
        uint64_t v63 = &v56[v58];
        uint64_t v160 = *v166;
        ((void (*)(char *, char *, uint64_t))v160)(v153, &v56[v61], v164);
        if (v61 < v58 || &v56[v61] >= &v56[v59])
        {
          uint64_t v62 = v164;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v62 = v164;
          if (v61 != v58) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        ((void (*)(char *, char *, uint64_t))v160)(v63, v153, v62);
        uint64_t v55 = v157;
        uint64_t v56 = v158;
      }
      ++v60;
      --v57;
      v58 -= v169;
      v59 -= v169;
      v61 += v169;
    }
    while (v60 < v40 + v57);
    uint64_t v2 = v147;
    uint64_t v54 = v163;
    uint64_t v64 = v164;
    uint64_t v28 = v149;
    uint64_t v31 = v154;
    if (v40 < v163) {
      goto LABEL_49;
    }
LABEL_69:
    if (v40 < v31) {
      goto LABEL_145;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v28 = sub_22D23775C(0, *((void *)v28 + 2) + 1, 1, v28);
    }
    unint64_t v85 = *((void *)v28 + 2);
    unint64_t v84 = *((void *)v28 + 3);
    unint64_t v30 = v85 + 1;
    uint64_t v26 = v157;
    uint64_t v163 = v40;
    if (v85 >= v84 >> 1)
    {
      uint64_t v135 = sub_22D23775C((char *)(v84 > 1), v85 + 1, 1, v28);
      uint64_t v26 = v157;
      uint64_t v28 = v135;
    }
    *((void *)v28 + 2) = v30;
    uint64_t v86 = v28 + 32;
    uint64_t v87 = &v28[16 * v85 + 32];
    uint64_t v88 = v163;
    *(void *)uint64_t v87 = v31;
    *((void *)v87 + 1) = v88;
    if (v85)
    {
      while (1)
      {
        unint64_t v89 = v30 - 1;
        if (v30 >= 4)
        {
          uint64_t v94 = &v86[16 * v30];
          uint64_t v95 = *((void *)v94 - 8);
          uint64_t v96 = *((void *)v94 - 7);
          BOOL v100 = __OFSUB__(v96, v95);
          uint64_t v97 = v96 - v95;
          if (v100) {
            goto LABEL_134;
          }
          uint64_t v99 = *((void *)v94 - 6);
          uint64_t v98 = *((void *)v94 - 5);
          BOOL v100 = __OFSUB__(v98, v99);
          uint64_t v92 = v98 - v99;
          char v93 = v100;
          if (v100) {
            goto LABEL_135;
          }
          unint64_t v101 = v30 - 2;
          uint64_t v102 = &v86[16 * v30 - 32];
          uint64_t v104 = *(void *)v102;
          uint64_t v103 = *((void *)v102 + 1);
          BOOL v100 = __OFSUB__(v103, v104);
          uint64_t v105 = v103 - v104;
          if (v100) {
            goto LABEL_137;
          }
          BOOL v100 = __OFADD__(v92, v105);
          uint64_t v106 = v92 + v105;
          if (v100) {
            goto LABEL_140;
          }
          if (v106 >= v97)
          {
            uint64_t v124 = &v86[16 * v89];
            uint64_t v126 = *(void *)v124;
            uint64_t v125 = *((void *)v124 + 1);
            BOOL v100 = __OFSUB__(v125, v126);
            uint64_t v127 = v125 - v126;
            if (v100) {
              goto LABEL_144;
            }
            BOOL v117 = v92 < v127;
            goto LABEL_106;
          }
        }
        else
        {
          if (v30 != 3)
          {
            uint64_t v118 = *((void *)v28 + 4);
            uint64_t v119 = *((void *)v28 + 5);
            BOOL v100 = __OFSUB__(v119, v118);
            uint64_t v111 = v119 - v118;
            char v112 = v100;
            goto LABEL_100;
          }
          uint64_t v91 = *((void *)v28 + 4);
          uint64_t v90 = *((void *)v28 + 5);
          BOOL v100 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          char v93 = v100;
        }
        if (v93) {
          goto LABEL_136;
        }
        unint64_t v101 = v30 - 2;
        uint64_t v107 = &v86[16 * v30 - 32];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v110 = __OFSUB__(v108, v109);
        uint64_t v111 = v108 - v109;
        char v112 = v110;
        if (v110) {
          goto LABEL_139;
        }
        uint64_t v113 = &v86[16 * v89];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v100 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v100) {
          goto LABEL_142;
        }
        if (__OFADD__(v111, v116)) {
          goto LABEL_143;
        }
        if (v111 + v116 >= v92)
        {
          BOOL v117 = v92 < v116;
LABEL_106:
          if (v117) {
            unint64_t v89 = v101;
          }
          goto LABEL_108;
        }
LABEL_100:
        if (v112) {
          goto LABEL_138;
        }
        uint64_t v120 = &v86[16 * v89];
        uint64_t v122 = *(void *)v120;
        uint64_t v121 = *((void *)v120 + 1);
        BOOL v100 = __OFSUB__(v121, v122);
        uint64_t v123 = v121 - v122;
        if (v100) {
          goto LABEL_141;
        }
        if (v123 < v111) {
          goto LABEL_14;
        }
LABEL_108:
        unint64_t v128 = v89 - 1;
        if (v89 - 1 >= v30)
        {
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }
        if (!*v170) {
          goto LABEL_156;
        }
        uint64_t v129 = v28;
        id v130 = &v86[16 * v128];
        uint64_t v131 = *(void *)v130;
        uint64_t v132 = &v86[16 * v89];
        uint64_t v133 = *((void *)v132 + 1);
        sub_22D09A33C(*v170 + *(void *)(v26 + 72) * *(void *)v130, *v170 + *(void *)(v26 + 72) * *(void *)v132, *v170 + *(void *)(v26 + 72) * v133, v156);
        if (v2) {
          goto LABEL_128;
        }
        if (v133 < v131) {
          goto LABEL_131;
        }
        if (v89 > *((void *)v129 + 2)) {
          goto LABEL_132;
        }
        *(void *)id v130 = v131;
        *(void *)&v86[16 * v128 + 8] = v133;
        unint64_t v134 = *((void *)v129 + 2);
        if (v89 >= v134) {
          goto LABEL_133;
        }
        uint64_t v28 = v129;
        unint64_t v30 = v134 - 1;
        memmove(&v86[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
        *((void *)v129 + 2) = v134 - 1;
        uint64_t v26 = v157;
        if (v134 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v30 = 1;
LABEL_14:
    uint64_t v21 = v170[1];
    uint64_t v29 = v163;
    uint64_t v4 = v164;
    if (v163 >= v21) {
      goto LABEL_117;
    }
  }
  uint64_t v64 = v164;
  if (v40 >= v54) {
    goto LABEL_69;
  }
LABEL_49:
  if (__OFSUB__(v40, v31)) {
    goto LABEL_150;
  }
  if (v40 - v31 >= v146) {
    goto LABEL_69;
  }
  if (__OFADD__(v31, v146)) {
    goto LABEL_153;
  }
  if (v31 + v146 >= v54) {
    uint64_t v65 = v54;
  }
  else {
    uint64_t v65 = v31 + v146;
  }
  if (v65 >= v31)
  {
    if (v40 != v65)
    {
      id v149 = v28;
      uint64_t v147 = v2;
      uint64_t v66 = *(void *)(v55 + 72);
      id v158 = *(char **)(v55 + 16);
      uint64_t v159 = v66;
      uint64_t v169 = v66 * (v40 - 1);
      uint64_t v67 = (char *)(v40 * v66);
      uint64_t v152 = v65;
      do
      {
        uint64_t v70 = 0;
        uint64_t v71 = v31;
        uint64_t v163 = v40;
        uint64_t v160 = v67;
        while (1)
        {
          uint64_t v72 = *v170;
          uint64_t v73 = (uint64_t)&v67[v70 + *v170];
          uint64_t v74 = v158;
          ((void (*)(char *, uint64_t, uint64_t))v158)(v167, v73, v64);
          ((void (*)(char *, uint64_t, uint64_t))v74)(v168, v169 + v70 + v72, v64);
          uint64_t v75 = sub_22D2BBC40();
          uint64_t v77 = v76;
          if (sub_22D2BBC40() == v75 && v78 == v77) {
            break;
          }
          char v79 = sub_22D2BD660();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v80 = *v162;
          uint64_t v64 = v164;
          (*v162)(v168, v164);
          v80(v167, v64);
          if ((v79 & 1) == 0) {
            goto LABEL_59;
          }
          uint64_t v81 = *v170;
          uint64_t v67 = v160;
          if (!*v170) {
            goto LABEL_155;
          }
          uint64_t v82 = v81 + v169 + v70;
          uint64_t v83 = *v166;
          ((void (*)(char *, char *, uint64_t))*v166)(v165, &v160[v81 + v70], v64);
          swift_arrayInitWithTakeFrontToBack();
          ((void (*)(uint64_t, char *, uint64_t))v83)(v82, v165, v64);
          v70 -= v159;
          ++v71;
          uint64_t v69 = v163;
          if (v163 == v71) {
            goto LABEL_60;
          }
        }
        swift_bridgeObjectRelease_n();
        uint64_t v68 = *v162;
        uint64_t v64 = v164;
        (*v162)(v168, v164);
        v68(v167, v64);
LABEL_59:
        uint64_t v69 = v163;
        uint64_t v67 = v160;
LABEL_60:
        uint64_t v40 = v69 + 1;
        v169 += v159;
        v67 += v159;
        uint64_t v31 = v154;
      }
      while (v40 != v152);
      uint64_t v40 = v152;
      uint64_t v2 = v147;
      uint64_t v28 = v149;
    }
    goto LABEL_69;
  }
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  __break(1u);
LABEL_158:
  __break(1u);
LABEL_159:
  uint64_t result = sub_22D2BD450();
  __break(1u);
  return result;
}

uint64_t sub_22D099FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v46 = a4;
  uint64_t v34 = a1;
  uint64_t v6 = sub_22D2BBC90();
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  unint64_t v44 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v48 = (char *)&v32 - v10;
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v47 = (char *)&v32 - v13;
  uint64_t v42 = a3;
  uint64_t v33 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    uint64_t v38 = v12 + 16;
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v35 = (void (**)(char *, uint64_t))(v12 + 8);
    uint64_t v36 = v6;
    uint64_t v43 = (void (**)(char *, uint64_t, uint64_t))(v12 + 32);
    uint64_t v15 = v14 * (v42 - 1);
    uint64_t v39 = v14;
    uint64_t v16 = v14 * v42;
LABEL_6:
    uint64_t v18 = 0;
    uint64_t v19 = v34;
    uint64_t v40 = v16;
    uint64_t v41 = v15;
    while (1)
    {
      uint64_t v20 = *v46;
      uint64_t v45 = v16 + v18;
      uint64_t v21 = v16 + v18 + v20;
      uint64_t v22 = v37;
      v37(v47, v21, v6);
      v22(v48, v15 + v18 + v20, v6);
      uint64_t v23 = sub_22D2BBC40();
      uint64_t v25 = v24;
      if (sub_22D2BBC40() == v23 && v26 == v25)
      {
        swift_bridgeObjectRelease_n();
        uint64_t v6 = v36;
        uint64_t v17 = *v35;
        (*v35)(v48, v36);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v17)(v47, v6);
        uint64_t v16 = v40;
        uint64_t v15 = v41;
LABEL_5:
        v15 += v39;
        v16 += v39;
        if (++v42 == v33) {
          return result;
        }
        goto LABEL_6;
      }
      char v27 = sub_22D2BD660();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v6 = v36;
      uint64_t v28 = *v35;
      (*v35)(v48, v36);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v47, v6);
      uint64_t v16 = v40;
      uint64_t v15 = v41;
      if ((v27 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v29 = *v46;
      if (!*v46) {
        break;
      }
      uint64_t v30 = v29 + v41 + v18;
      uint64_t v31 = *v43;
      (*v43)(v44, v29 + v40 + v18, v6);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = ((uint64_t (*)(uint64_t, char *, uint64_t))v31)(v30, v44, v6);
      v18 -= v39;
      if (v42 == ++v19) {
        goto LABEL_5;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_22D09A33C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v66 = sub_22D2BBC90();
  uint64_t v8 = *(void *)(v66 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v66);
  uint64_t v64 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v63 = (char *)&v58 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v62 = (char *)&v58 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v58 - v15;
  uint64_t v65 = *(void *)(v17 + 72);
  if (!v65)
  {
    __break(1u);
LABEL_69:
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  if (a2 - a1 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_69;
  }
  int64_t v18 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v65 == -1) {
    goto LABEL_70;
  }
  uint64_t v19 = (uint64_t)(a2 - a1) / v65;
  unint64_t v69 = a1;
  unint64_t v68 = a4;
  uint64_t v20 = v18 / v65;
  if (v19 >= v18 / v65)
  {
    if ((v20 & 0x8000000000000000) == 0)
    {
      uint64_t v22 = v20 * v65;
      if (a4 < a2 || a2 + v22 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v40 = a4 + v22;
      unint64_t v67 = a4 + v22;
      unint64_t v69 = a2;
      uint64_t v62 = (char *)a1;
      if (v22 >= 1 && a1 < a2)
      {
        uint64_t v42 = -v65;
        uint64_t v65 = *(void *)(v8 + 16);
        unint64_t v60 = a4;
        uint64_t v61 = v8 + 16;
        uint64_t v59 = (void (**)(char *, uint64_t))(v8 + 8);
        do
        {
          unint64_t v43 = a3;
          unint64_t v44 = (void (*)(char *, unint64_t, uint64_t))v65;
          uint64_t v45 = v66;
          ((void (*)(char *, unint64_t, uint64_t))v65)(v63, v40 + v42, v66);
          unint64_t v46 = a2 + v42;
          v44(v64, a2 + v42, v45);
          uint64_t v47 = sub_22D2BBC40();
          uint64_t v49 = v48;
          if (sub_22D2BBC40() == v47 && v50 == v49) {
            char v51 = 0;
          }
          else {
            char v51 = sub_22D2BD660();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v52 = v43 + v42;
          uint64_t v53 = *v59;
          uint64_t v54 = v66;
          (*v59)(v64, v66);
          v53(v63, v54);
          unint64_t v55 = v60;
          if (v51)
          {
            if (v43 < a2 || v52 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v69 += v42;
          }
          else
          {
            unint64_t v56 = v67;
            v67 += v42;
            if (v43 < v56 || v52 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (v43 != v56)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v46 = a2;
          }
          unint64_t v40 = v67;
          if (v67 <= v55) {
            break;
          }
          a2 = v46;
          a3 = v43 + v42;
        }
        while (v46 > (unint64_t)v62);
      }
LABEL_67:
      sub_22D237AA4(&v69, &v68, (uint64_t *)&v67);
      return 1;
    }
  }
  else if ((v19 & 0x8000000000000000) == 0)
  {
    uint64_t v21 = v19 * v65;
    if (a4 < a1 || a1 + v21 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v64 = (char *)(a4 + v21);
    unint64_t v67 = a4 + v21;
    if (v21 >= 1 && a2 < a3)
    {
      uint64_t v63 = *(char **)(v8 + 16);
      uint64_t v61 = v8 + 16;
      uint64_t v24 = (void (**)(char *, uint64_t))(v8 + 8);
      while (1)
      {
        unint64_t v25 = a3;
        uint64_t v26 = v66;
        char v27 = (void (*)(char *, unint64_t, uint64_t))v63;
        ((void (*)(char *, unint64_t, uint64_t))v63)(v16, a2, v66);
        v27(v62, a4, v26);
        uint64_t v28 = sub_22D2BBC40();
        uint64_t v30 = v29;
        if (sub_22D2BBC40() == v28 && v31 == v30) {
          break;
        }
        char v34 = sub_22D2BD660();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v35 = *v24;
        uint64_t v36 = v66;
        (*v24)(v62, v66);
        v35(v16, v36);
        if ((v34 & 1) == 0) {
          goto LABEL_31;
        }
        unint64_t v37 = v69;
        unint64_t v38 = a2 + v65;
        if (v69 < a2 || v69 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack();
          a3 = v25;
        }
        else
        {
          a3 = v25;
          if (v69 == a2) {
            unint64_t v37 = a2;
          }
          else {
            swift_arrayInitWithTakeBackToFront();
          }
        }
LABEL_37:
        unint64_t v69 = v37 + v65;
        a4 = v68;
        if (v68 < (unint64_t)v64)
        {
          a2 = v38;
          if (v38 < a3) {
            continue;
          }
        }
        goto LABEL_67;
      }
      swift_bridgeObjectRelease_n();
      uint64_t v32 = *v24;
      uint64_t v33 = v66;
      (*v24)(v62, v66);
      v32(v16, v33);
LABEL_31:
      unint64_t v37 = v69;
      unint64_t v39 = v68 + v65;
      if (v69 < v68 || v69 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack();
        a3 = v25;
      }
      else
      {
        a3 = v25;
        if (v69 != v68) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v68 = v39;
      unint64_t v38 = a2;
      goto LABEL_37;
    }
    goto LABEL_67;
  }
LABEL_71:
  uint64_t result = sub_22D2BD4C0();
  __break(1u);
  return result;
}

uint64_t sub_22D09A9FC(uint64_t a1, uint64_t a2)
{
  sub_22D09B164();
  uint64_t v34 = v4;
  uint64_t v36 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v31 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D09B5A8();
  uint64_t v35 = v6;
  uint64_t v37 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v32 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D09B40C();
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_22D09B210();
  uint64_t v38 = v13;
  uint64_t v33 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  uint64_t v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[3] = type metadata accessor for ClinicalSharingCloudStandardAPI();
  v41[4] = (uint64_t)&off_26E05F2B0;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
  sub_22D098E00(a1, (uint64_t)boxed_opaque_existential_1, (uint64_t (*)(void))type metadata accessor for ClinicalSharingCloudStandardAPI);
  sub_22D097714(0, &qword_26853EAB8, (uint64_t (*)(uint64_t))sub_22D099090, MEMORY[0x263EFDEA0]);
  sub_22D09B4B8();
  sub_22D09B520();
  sub_22D2BC7F0();
  sub_22D071C5C(a2, (uint64_t)v39);
  uint64_t v17 = swift_allocObject();
  long long v18 = v39[3];
  *(_OWORD *)(v17 + 48) = v39[2];
  *(_OWORD *)(v17 + 64) = v18;
  *(_OWORD *)(v17 + 80) = v39[4];
  *(void *)(v17 + 96) = v40;
  long long v19 = v39[1];
  *(_OWORD *)(v17 + 16) = v39[0];
  *(_OWORD *)(v17 + 32) = v19;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = sub_22D09B6E4;
  *(void *)(v20 + 24) = v17;
  sub_22D2BC5D0();
  type metadata accessor for PBPushBlobsRequest(0);
  sub_22D09B2FC();
  sub_22D09754C(&qword_26853EB18, (void (*)(uint64_t))sub_22D09B40C);
  sub_22D09754C(&qword_26853EB10, (void (*)(uint64_t))sub_22D09B2FC);
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_22CFF4B00((uint64_t)v41, (uint64_t)v39);
  uint64_t v21 = swift_allocObject();
  sub_22CFF8C10(v39, v21 + 16);
  sub_22D2BB5B0();
  uint64_t v30 = MEMORY[0x263EFDC28];
  sub_22D09754C(&qword_26853EB20, (void (*)(uint64_t))sub_22D09B210);
  uint64_t v22 = v31;
  sub_22D2BC7F0();
  swift_release();
  sub_22CFF4B00((uint64_t)v41, (uint64_t)v39);
  uint64_t v23 = swift_allocObject();
  sub_22CFF8C10(v39, v23 + 16);
  sub_22D2BC5D0();
  type metadata accessor for PBPushBlobsResponse(0);
  sub_22D097714(0, &qword_26853E978, type metadata accessor for PBPushBlobsResponse, MEMORY[0x263EFDCF0]);
  sub_22D09754C(&qword_26853EB30, (void (*)(uint64_t))sub_22D09B164);
  sub_22D0990C4();
  uint64_t v24 = v32;
  uint64_t v25 = v34;
  sub_22D2BC830();
  swift_release();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v25);
  sub_22D09754C(&qword_26853EB38, (void (*)(uint64_t))sub_22D09B5A8);
  uint64_t v26 = v35;
  uint64_t v27 = sub_22D2BC720();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v26);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v15, v38);
  *(void *)&v39[0] = v27;
  uint64_t v28 = sub_22D2BC720();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
  return v28;
}