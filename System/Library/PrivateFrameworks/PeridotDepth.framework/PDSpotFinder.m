@interface PDSpotFinder
+ (BOOL)findSpotsInImage:(__CVBuffer *)a3 andUpdateCalib:(void *)a4 forPreset:(int)a5 distance:(float)a6 isSphere:(BOOL)a7 outputFoMs:(id *)a8;
@end

@implementation PDSpotFinder

+ (BOOL)findSpotsInImage:(__CVBuffer *)a3 andUpdateCalib:(void *)a4 forPreset:(int)a5 distance:(float)a6 isSphere:(BOOL)a7 outputFoMs:(id *)a8
{
  uint64_t v277 = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetWidth(a3) != 84
    || CVPixelBufferGetHeight(a3) != 864
    || CVPixelBufferGetPixelFormatType(a3) != 1278226534)
  {
    peridot_depth_log("image must be of width %zu, height %zu, and pixel format 'L00f'");
    return 0;
  }
  MutableBytePtr = CFDataGetMutableBytePtr((CFMutableDataRef)a4);
  if (a5)
  {
    peridot_depth_log("spot finder currently only supports NormalRange preset");
    return 0;
  }
  v16 = MutableBytePtr;
  CVPixelBufferLockBaseAddress(a3, 1uLL);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a3);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a3);
  __dst[0] = 0;
  __dst[1] = 0;
  char v48 = 0;
  uint64_t v49 = 0x11B8000000001;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)__dst, 72576);
  v19 = v16 + 345068;
  v20 = v16 + 344732;
  v21 = v16 + 344396;
  v22 = (char *)__dst[0];
  uint64_t v23 = 864;
  do
  {
    memcpy(v22, BaseAddress, 0x150uLL);
    v22 += 336;
    BaseAddress += BytesPerRow;
    --v23;
  }
  while (v23);
  CVPixelBufferUnlockBaseAddress(a3, 1uLL);
  uint64_t v276 = 0x800000001;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep = std::chrono::steady_clock::now().__d_.__rep_;
  memcpy(&state, &uv, 0x9C4uLL);
  isInitialized_spot_finder_peridot = 1;
  spot_finder_peridot((uint64_t)__dst, (int)a6, (uint64_t)&unk_259134768, v25);
  isInitialized_spot_finder_peridot = 0;
  v26.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  peridot_depth_log("Ran spot finder in %f ms", (double)((v26.__d_.__rep_ - rep) / 1000) * 0.001);
  *((float *)v19 + 56) = a6;
  v19[228] = a7;
  _DWORD *v21 = v52;
  v21[1] = v164;
  v21[2] = v53;
  v21[3] = v165;
  v21[4] = v54;
  v21[5] = v166;
  v21[6] = v55;
  v21[7] = v167;
  v21[8] = v56;
  v21[9] = v168;
  v21[10] = v57;
  v21[11] = v169;
  v21[12] = v58;
  v21[13] = v170;
  v21[14] = v59;
  v21[15] = v171;
  v21[16] = v60;
  v21[17] = v172;
  v21[18] = v61;
  v21[19] = v173;
  v21[20] = v62;
  v21[21] = v174;
  v21[22] = v63;
  v21[23] = v175;
  v21[24] = v64;
  v21[25] = v176;
  v21[26] = v65;
  v21[27] = v177;
  v21[28] = v66;
  v21[29] = v178;
  v21[30] = v67;
  v21[31] = v179;
  v21[32] = v68;
  v21[33] = v180;
  v21[34] = v69;
  v21[35] = v181;
  v21[36] = v70;
  v21[37] = v182;
  v21[38] = v71;
  v21[39] = v183;
  v21[40] = v72;
  v21[41] = v184;
  v21[42] = v73;
  v21[43] = v185;
  v21[44] = v74;
  v21[45] = v186;
  v21[46] = v75;
  v21[47] = v187;
  v21[48] = v76;
  v21[49] = v188;
  v21[50] = v77;
  v21[51] = v189;
  v21[52] = v78;
  v21[53] = v190;
  v21[54] = v79;
  v21[55] = v191;
  v21[56] = v80;
  v21[57] = v192;
  v21[58] = v81;
  v21[59] = v193;
  v21[60] = v82;
  v21[61] = v194;
  v21[62] = v83;
  v21[63] = v195;
  v21[64] = v84;
  v21[65] = v196;
  v21[66] = v85;
  v21[67] = v197;
  v21[68] = v86;
  v21[69] = v198;
  v21[70] = v87;
  v21[71] = v199;
  v21[72] = v88;
  v21[73] = v200;
  v21[74] = v89;
  v21[75] = v201;
  v21[76] = v90;
  v21[77] = v202;
  v21[78] = v91;
  v21[79] = v203;
  v21[80] = v92;
  v21[81] = v204;
  v21[82] = v93;
  v21[83] = v205;
  _DWORD *v20 = v94;
  v20[1] = v206;
  v20[2] = v95;
  v20[3] = v207;
  v20[4] = v96;
  v20[5] = v208;
  v20[6] = v97;
  v20[7] = v209;
  v20[8] = v98;
  v20[9] = v210;
  v20[10] = v99;
  v20[11] = v211;
  v20[12] = v100;
  v20[13] = v212;
  v20[14] = v101;
  v20[15] = v213;
  v20[16] = v102;
  v20[17] = v214;
  v20[18] = v103;
  v20[19] = v215;
  v20[20] = v104;
  v20[21] = v216;
  v20[22] = v105;
  v20[23] = v217;
  v20[24] = v106;
  v20[25] = v218;
  v20[26] = v107;
  v20[27] = v219;
  v20[28] = v108;
  v20[29] = v220;
  v20[30] = v109;
  v20[31] = v221;
  v20[32] = v110;
  v20[33] = v222;
  v20[34] = v111;
  v20[35] = v223;
  v20[36] = v112;
  v20[37] = v224;
  v20[38] = v113;
  v20[39] = v225;
  v20[40] = v114;
  v20[41] = v226;
  v20[42] = v115;
  v20[43] = v227;
  v20[44] = v116;
  v20[45] = v228;
  v20[46] = v117;
  v20[47] = v229;
  v20[48] = v118;
  v20[49] = v230;
  v20[50] = v119;
  v20[51] = v231;
  v20[52] = v120;
  v20[53] = v232;
  v20[54] = v121;
  v20[55] = v233;
  v20[56] = v122;
  v20[57] = v234;
  v20[58] = v123;
  v20[59] = v235;
  v20[60] = v124;
  v20[61] = v236;
  v20[62] = v125;
  v20[63] = v237;
  v20[64] = v126;
  v20[65] = v238;
  v20[66] = v127;
  v20[67] = v239;
  v20[68] = v128;
  v20[69] = v240;
  v20[70] = v129;
  v20[71] = v241;
  v20[72] = v130;
  v20[73] = v242;
  v20[74] = v131;
  v20[75] = v243;
  v20[76] = v132;
  v20[77] = v244;
  v20[78] = v133;
  v20[79] = v245;
  v20[80] = v134;
  v20[81] = v246;
  v20[82] = v135;
  v20[83] = v247;
  *(_DWORD *)v19 = v136;
  *((_DWORD *)v19 + 1) = v248;
  *((_DWORD *)v19 + 2) = v137;
  *((_DWORD *)v19 + 3) = v249;
  *((_DWORD *)v19 + 4) = v138;
  *((_DWORD *)v19 + 5) = v250;
  *((_DWORD *)v19 + 6) = v139;
  *((_DWORD *)v19 + 7) = v251;
  *((_DWORD *)v19 + 8) = v140;
  *((_DWORD *)v19 + 9) = v252;
  *((_DWORD *)v19 + 10) = v141;
  *((_DWORD *)v19 + 11) = v253;
  *((_DWORD *)v19 + 12) = v142;
  *((_DWORD *)v19 + 13) = v254;
  *((_DWORD *)v19 + 14) = v143;
  *((_DWORD *)v19 + 15) = v255;
  *((_DWORD *)v19 + 16) = v144;
  *((_DWORD *)v19 + 17) = v256;
  *((_DWORD *)v19 + 18) = v145;
  *((_DWORD *)v19 + 19) = v257;
  *((_DWORD *)v19 + 20) = v146;
  *((_DWORD *)v19 + 21) = v258;
  *((_DWORD *)v19 + 22) = v147;
  *((_DWORD *)v19 + 23) = v259;
  *((_DWORD *)v19 + 24) = v148;
  *((_DWORD *)v19 + 25) = v260;
  *((_DWORD *)v19 + 26) = v149;
  *((_DWORD *)v19 + 27) = v261;
  *((_DWORD *)v19 + 28) = v150;
  *((_DWORD *)v19 + 29) = v262;
  *((_DWORD *)v19 + 30) = v151;
  *((_DWORD *)v19 + 31) = v263;
  *((_DWORD *)v19 + 32) = v152;
  *((_DWORD *)v19 + 33) = v264;
  *((_DWORD *)v19 + 34) = v153;
  *((_DWORD *)v19 + 35) = v265;
  *((_DWORD *)v19 + 36) = v154;
  *((_DWORD *)v19 + 37) = v266;
  *((_DWORD *)v19 + 38) = v155;
  *((_DWORD *)v19 + 39) = v267;
  *((_DWORD *)v19 + 40) = v156;
  *((_DWORD *)v19 + 41) = v268;
  *((_DWORD *)v19 + 42) = v157;
  *((_DWORD *)v19 + 43) = v269;
  *((_DWORD *)v19 + 44) = v158;
  *((_DWORD *)v19 + 45) = v270;
  *((_DWORD *)v19 + 46) = v159;
  *((_DWORD *)v19 + 47) = v271;
  *((_DWORD *)v19 + 48) = v160;
  *((_DWORD *)v19 + 49) = v272;
  *((_DWORD *)v19 + 50) = v161;
  *((_DWORD *)v19 + 51) = v273;
  *((_DWORD *)v19 + 52) = v162;
  *((_DWORD *)v19 + 53) = v274;
  *((_DWORD *)v19 + 54) = v163;
  *((_DWORD *)v19 + 55) = v275;
  if (a8)
  {
    v50[0] = @"SF_Spots99pDistToNominal";
    v36 = [NSNumber numberWithDouble:v37];
    v51[0] = v36;
    v50[1] = @"SF_numSpotsOutTol";
    v27 = [NSNumber numberWithDouble:v38];
    v51[1] = v27;
    v50[2] = @"SF_missing_spots";
    v28 = [NSNumber numberWithDouble:v39];
    v51[2] = v28;
    v50[3] = @"SF_Rx_mrad";
    v29 = [NSNumber numberWithDouble:v41];
    v51[3] = v29;
    v50[4] = @"SF_Ry_mrad";
    v30 = [NSNumber numberWithDouble:v42];
    v51[4] = v30;
    v50[5] = @"SF_Rz_mrad";
    v31 = [NSNumber numberWithDouble:v43];
    v51[5] = v31;
    v50[6] = @"SF_Tx_mm";
    v32 = [NSNumber numberWithDouble:v44];
    v51[6] = v32;
    v50[7] = @"SF_Ty_mm";
    v33 = [NSNumber numberWithDouble:v45];
    v51[7] = v33;
    v50[8] = @"SF_Tz_mm";
    v34 = [NSNumber numberWithDouble:v40];
    v51[8] = v34;
    v50[9] = @"SF_Rz_center_region_mrads";
    v35 = [NSNumber numberWithDouble:v46];
    v51[9] = v35;
    *a8 = [NSDictionary dictionaryWithObjects:v51 forKeys:v50 count:10];
  }
  if (v48)
  {
    if (__dst[0]) {
      MEMORY[0x25A2D62A0](__dst[0], 0x1000C8052888210);
    }
  }
  return 1;
}

@end