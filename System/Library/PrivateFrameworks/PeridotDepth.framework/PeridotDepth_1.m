__n128 bumpPeridotCalibOneVersion<peridot::CalibHistory::v2::_PeridotCalib,peridot::CalibHistory::v3::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _WORD *v6;
  _WORD *v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  long long v13;
  long long v14;
  uint64_t v15;
  __int16 *v16;
  _WORD *v17;
  uint64_t v18;
  __int16 v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  __n128 result;

  v4 = a2 + 38044;
  v5 = a2 + 37676;
  v6 = (_WORD *)(a1 + 39432);
  v7 = (_WORD *)(a1 + 39152);
  *(void *)a2 = 3;
  v8 = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 8) = v8;
  v9 = *(_OWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a1 + 56);
  v11 = *(_OWORD *)(a1 + 72);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 56) = v10;
  *(_OWORD *)(a2 + 40) = v9;
  *(_DWORD *)(a2 + 104) = 0;
  v12 = *(_OWORD *)(a1 + 108);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a2 + 108) = v12;
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 140);
  memcpy((void *)(a2 + 156), (const void *)(a1 + 156), 0x2150uLL);
  memcpy((void *)(a2 + 8684), (const void *)(a1 + 8684), 0xFD4uLL);
  memcpy((void *)(a2 + 12736), (const void *)(a1 + 12736), 0x710uLL);
  memcpy((void *)(a2 + 14544), (const void *)(a1 + 14544), 0x710uLL);
  v13 = *(_OWORD *)(a1 + 16380);
  v14 = *(_OWORD *)(a1 + 16368);
  *(_OWORD *)(a2 + 16352) = *(_OWORD *)(a1 + 16352);
  *(_OWORD *)(a2 + 16368) = v14;
  *(_OWORD *)(a2 + 16380) = v13;
  memcpy((void *)(a2 + 16396), (const void *)(a1 + 16440), 0x1180uLL);
  memcpy((void *)(a2 + 20876), (const void *)(a1 + 20920), 0x41A0uLL);
  *(unsigned char *)v5 = *(unsigned char *)(a1 + 37720);
  *(unsigned char *)(v5 + 1) = 0;
  v15 = *(void *)(a1 + 37744);
  *(_OWORD *)(a2 + 37684) = *(_OWORD *)(a1 + 37728);
  *(void *)(a2 + 37700) = v15;
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(a1 + 37888);
  v16 = (__int16 *)(a1 + 38194);
  v17 = (_WORD *)(a2 + 37762);
  v18 = 8;
  do
  {
    *(_DWORD *)(v17 - 19) = *(_DWORD *)(v16 - 49);
    *(_DWORD *)(v17 - 17) = *(_DWORD *)(v16 - 41);
    *(v17 - 15) = *(v16 - 33);
    *(v17 - 14) = *(v16 - 27);
    *(v17 - 13) = *(v16 - 21);
    *(v17 - 12) = *(v16 - 15);
    *(v17 - 11) = *(v16 - 9);
    *(v17 - 10) = *(v16 - 3);
    *(_DWORD *)(v17 - 9) = *(_DWORD *)(v16 - 47);
    *(_DWORD *)(v17 - 7) = *(_DWORD *)(v16 - 39);
    *(v17 - 5) = *(v16 - 30);
    *(v17 - 4) = *(v16 - 24);
    *(v17 - 3) = *(v16 - 18);
    *(v17 - 2) = *(v16 - 12);
    *(v17 - 1) = *(v16 - 6);
    v19 = *v16;
    v16 += 52;
    *v17 = v19;
    v17 += 20;
    --v18;
  }
  while (v18);
  *(_WORD *)v4 = *v7;
  *(_WORD *)(v4 + 2) = v7[1];
  *(_WORD *)(v4 + 4) = v7[2];
  *(_WORD *)(v4 + 6) = v7[3];
  *(_WORD *)(v4 + 8) = v7[4];
  *(_WORD *)(v4 + 10) = v7[5];
  *(_WORD *)(v4 + 12) = v7[6];
  *(_WORD *)(v4 + 14) = v7[7];
  *(_WORD *)(v4 + 16) = v7[8];
  *(_WORD *)(v4 + 18) = v7[9];
  *(_WORD *)(v4 + 20) = v7[10];
  *(_WORD *)(v4 + 22) = v7[11];
  *(_WORD *)(v4 + 24) = v7[12];
  *(_WORD *)(v4 + 26) = v7[13];
  *(_WORD *)(v4 + 28) = 0;
  *(_WORD *)(v4 + 30) = v7[28];
  *(_WORD *)(v4 + 32) = v7[29];
  *(_WORD *)(v4 + 34) = v7[30];
  *(_WORD *)(v4 + 36) = v7[31];
  *(_WORD *)(v4 + 38) = v7[32];
  *(_WORD *)(v4 + 40) = v7[33];
  *(_WORD *)(v4 + 42) = v7[34];
  *(_WORD *)(v4 + 44) = v7[35];
  *(_WORD *)(v4 + 46) = v7[36];
  *(_WORD *)(v4 + 48) = v7[37];
  *(_WORD *)(v4 + 50) = v7[38];
  *(_WORD *)(v4 + 52) = v7[39];
  *(_WORD *)(v4 + 54) = v7[40];
  *(_WORD *)(v4 + 56) = v7[41];
  *(_WORD *)(v4 + 58) = 0;
  *(_WORD *)(v4 + 60) = v7[56];
  *(_WORD *)(v4 + 62) = v7[57];
  *(_WORD *)(v4 + 64) = v7[58];
  *(_WORD *)(v4 + 66) = v7[59];
  *(_WORD *)(v4 + 68) = v7[60];
  *(_WORD *)(v4 + 70) = v7[61];
  *(_WORD *)(v4 + 72) = v7[62];
  *(_WORD *)(v4 + 74) = v7[63];
  *(_WORD *)(v4 + 76) = v7[64];
  *(_WORD *)(v4 + 78) = v7[65];
  *(_WORD *)(v4 + 80) = v7[66];
  *(_WORD *)(v4 + 82) = v7[67];
  *(_WORD *)(v4 + 84) = v7[68];
  *(_WORD *)(v4 + 86) = v7[69];
  *(_WORD *)(v4 + 88) = 0;
  *(_WORD *)(v4 + 90) = v7[84];
  *(_WORD *)(v4 + 92) = v7[85];
  *(_WORD *)(v4 + 94) = v7[86];
  *(_WORD *)(v4 + 96) = v7[87];
  *(_WORD *)(v4 + 98) = v7[88];
  *(_WORD *)(v4 + 100) = v7[89];
  *(_WORD *)(v4 + 102) = v7[90];
  *(_WORD *)(v4 + 104) = v7[91];
  *(_WORD *)(v4 + 106) = v7[92];
  *(_WORD *)(v4 + 108) = v7[93];
  *(_WORD *)(v4 + 110) = v7[94];
  *(_WORD *)(v4 + 112) = v7[95];
  *(_WORD *)(v4 + 114) = v7[96];
  *(_WORD *)(v4 + 116) = v7[97];
  *(_WORD *)(v4 + 118) = 0;
  *(_WORD *)(v4 + 120) = v7[112];
  *(_WORD *)(v4 + 122) = v7[113];
  *(_WORD *)(v4 + 124) = v7[114];
  *(_WORD *)(v4 + 126) = v7[115];
  *(_WORD *)(v4 + 128) = v7[116];
  *(_WORD *)(v4 + 130) = v7[117];
  *(_WORD *)(v4 + 132) = v7[118];
  *(_WORD *)(v4 + 134) = v7[119];
  *(_WORD *)(v4 + 136) = v7[120];
  *(_WORD *)(v4 + 138) = v7[121];
  *(_WORD *)(v4 + 140) = v7[122];
  *(_WORD *)(v4 + 142) = v7[123];
  *(_WORD *)(v4 + 144) = v7[124];
  *(_WORD *)(v4 + 146) = v7[125];
  *(_WORD *)(v4 + 148) = 0;
  *(_WORD *)(v4 + 150) = *v6;
  *(_WORD *)(v4 + 152) = v6[1];
  *(_WORD *)(v4 + 154) = v6[2];
  *(_WORD *)(v4 + 156) = v6[3];
  *(_WORD *)(v4 + 158) = v6[4];
  *(_WORD *)(v4 + 160) = v6[5];
  *(_WORD *)(v4 + 162) = v6[6];
  *(_WORD *)(v4 + 164) = v6[7];
  *(_WORD *)(v4 + 166) = v6[8];
  *(_WORD *)(v4 + 168) = v6[9];
  *(_WORD *)(v4 + 170) = v6[10];
  *(_WORD *)(v4 + 172) = v6[11];
  *(_WORD *)(v4 + 174) = v6[12];
  *(_WORD *)(v4 + 176) = v6[13];
  *(_WORD *)(v4 + 178) = 0;
  *(_WORD *)(v4 + 180) = v6[28];
  *(_WORD *)(v4 + 182) = v6[29];
  *(_WORD *)(v4 + 184) = v6[30];
  *(_WORD *)(v4 + 186) = v6[31];
  *(_WORD *)(v4 + 188) = v6[32];
  *(_WORD *)(v4 + 190) = v6[33];
  *(_WORD *)(v4 + 192) = v6[34];
  *(_WORD *)(v4 + 194) = v6[35];
  *(_WORD *)(v4 + 196) = v6[36];
  *(_WORD *)(v4 + 198) = v6[37];
  *(_WORD *)(v4 + 200) = v6[38];
  *(_WORD *)(v4 + 202) = v6[39];
  *(_WORD *)(v4 + 204) = v6[40];
  *(_WORD *)(v4 + 206) = v6[41];
  *(_WORD *)(v4 + 208) = 0;
  *(_WORD *)(v4 + 210) = v6[56];
  *(_WORD *)(v4 + 212) = v6[57];
  *(_WORD *)(v4 + 214) = v6[58];
  *(_WORD *)(v4 + 216) = v6[59];
  *(_WORD *)(v4 + 218) = v6[60];
  *(_WORD *)(v4 + 220) = v6[61];
  *(_WORD *)(v4 + 222) = v6[62];
  *(_WORD *)(v4 + 224) = v6[63];
  *(_WORD *)(v4 + 226) = v6[64];
  *(_WORD *)(v4 + 228) = v6[65];
  *(_WORD *)(v4 + 230) = v6[66];
  *(_WORD *)(v4 + 232) = v6[67];
  *(_WORD *)(v4 + 234) = v6[68];
  *(_WORD *)(v4 + 236) = v6[69];
  *(_WORD *)(v4 + 238) = 0;
  *(_OWORD *)(v4 + 240) = *(_OWORD *)(a1 + 39600);
  memcpy((void *)(a2 + 38304), (const void *)(a1 + 39616), 0x8380uLL);
  memcpy((void *)(a2 + 71968), (const void *)(a1 + 73280), 0x1038uLL);
  v20 = *(_OWORD *)(a1 + 77448);
  *(_OWORD *)(a2 + 76120) = *(_OWORD *)(a1 + 77432);
  *(_OWORD *)(a2 + 76136) = v20;
  v21 = *(_OWORD *)(a1 + 77464);
  v22 = *(_OWORD *)(a1 + 77480);
  v23 = *(_OWORD *)(a1 + 77512);
  *(_OWORD *)(a2 + 76184) = *(_OWORD *)(a1 + 77496);
  *(_OWORD *)(a2 + 76200) = v23;
  *(_OWORD *)(a2 + 76152) = v21;
  *(_OWORD *)(a2 + 76168) = v22;
  v24 = *(_OWORD *)(a1 + 77544);
  *(_OWORD *)(a2 + 76216) = *(_OWORD *)(a1 + 77528);
  *(_OWORD *)(a2 + 76232) = v24;
  v25 = *(_OWORD *)(a1 + 77608);
  v27 = *(_OWORD *)(a1 + 77560);
  v26 = *(_OWORD *)(a1 + 77576);
  *(_OWORD *)(a2 + 76280) = *(_OWORD *)(a1 + 77592);
  *(_OWORD *)(a2 + 76296) = v25;
  *(_OWORD *)(a2 + 76248) = v27;
  *(_OWORD *)(a2 + 76264) = v26;
  v29 = *(_OWORD *)(a1 + 77704);
  v28 = *(_OWORD *)(a1 + 77720);
  v30 = *(_OWORD *)(a1 + 77752);
  *(_OWORD *)(a2 + 76424) = *(_OWORD *)(a1 + 77736);
  *(_OWORD *)(a2 + 76440) = v30;
  *(_OWORD *)(a2 + 76392) = v29;
  *(_OWORD *)(a2 + 76408) = v28;
  v32 = *(_OWORD *)(a1 + 77640);
  v31 = *(_OWORD *)(a1 + 77656);
  v33 = *(_OWORD *)(a1 + 77688);
  *(_OWORD *)(a2 + 76360) = *(_OWORD *)(a1 + 77672);
  *(_OWORD *)(a2 + 76376) = v33;
  *(_OWORD *)(a2 + 76328) = v32;
  *(_OWORD *)(a2 + 76344) = v31;
  result = *(__n128 *)(a1 + 77624);
  *(__n128 *)(a2 + 76312) = result;
  return result;
}

void sub_259087610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, char *a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(a7);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);

  _Unwind_Resume(a1);
}

uint64_t peridot::CalibManager::fillPeridotCalib(uint64_t a1, _PeridotCalib *__dst)
{
  return readPeridotCalibFromBuffer(*(char **)a1, *(void *)(a1 + 8), __dst);
}

void peridot::CalibManager::resetStrayCalib(peridot::CalibManager *this, _PeridotCalib *a2)
{
  *((_DWORD *)this + 1) |= 1u;
}

uint64_t peridot::CalibManager::readMpcUUID(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  v6 = v5;
  v7 = (_OWORD *)v4;
  uint64_t v19 = *MEMORY[0x263EF8340];
  v15 = 0;
  uint64_t v16 = 0;
  HIBYTE(v13) = 4;
  strcpy((char *)&v12, "jlex");
  v8 = operator new(0x48uLL);
  v8[2] = v12;
  uint64_t v9 = v13;
  uint64_t v13 = 0;
  long long v12 = 0uLL;
  *((void *)v8 + 7) = 0;
  *((void *)v8 + 8) = 0;
  *((void *)v8 + 6) = v9;
  *(void *)v8 = 0;
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = &v15;
  v14 = v8;
  v15 = (char *)v8;
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)v8, (uint64_t *)v8);
  ++v16;
  *(_OWORD *)((char *)v8 + 56) = *v7;
  uint64_t JLEX = readJLEX((uint64_t)&v14, (uint64_t)v17);
  if (JLEX) {
    _OWORD *v6 = v18;
  }
  std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(v15);
  return JLEX;
}

void sub_2590877E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char *a14)
{
}

float32x2_t peridot::CalibManager::extrinsicsToFloat4x3(float64x2_t *a1)
{
  float64x2_t v1 = *a1;
  v1.f64[1] = a1[2].f64[0];
  return vcvt_f32_f64(v1);
}

double peridot::CalibManager::extrinsicsFromFloat4x3@<D0>(int8x16_t *this@<X0>, uint64_t a2@<X8>)
{
  int8x16_t v3 = *this;
  int8x16_t v4 = this[1];
  *(double *)a2 = COERCE_FLOAT(*this);
  *(double *)(a2 + 8) = *(float *)v4.i32;
  int8x16_t v5 = this[2];
  int8x16_t v6 = this[3];
  *(double *)(a2 + 16) = *(float *)v5.i32;
  float32x2_t v7 = (float32x2_t)vext_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v3, v3, 8uLL), 4uLL);
  v6.i32[1] = v3.i32[1];
  *(float64x2_t *)(a2 + 24) = vcvtq_f64_f32(*(float32x2_t *)v6.i8);
  *(float64x2_t *)(a2 + 40) = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v4.i8, *(int32x2_t *)v5.i8));
  *(float64x2_t *)(a2 + 56) = vcvtq_f64_f32(v7);
  *(float64x2_t *)(a2 + 72) = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)));
  double result = *(float *)&v6.i32[2];
  *(double *)(a2 + 88) = *(float *)&v6.i32[2];
  return result;
}

__n128 bumpPeridotCalibOneVersion<peridot::CalibHistory::v1::_PeridotCalib,peridot::CalibHistory::v2::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = 2;
  *(_OWORD *)(a2 + 4) = 0u;
  *(_OWORD *)(a2 + 20) = 0u;
  *(_OWORD *)(a2 + 36) = 0u;
  *(_OWORD *)(a2 + 52) = 0u;
  *(_OWORD *)(a2 + 68) = 0u;
  *(_OWORD *)(a2 + 84) = 0u;
  *(void *)(a2 + 100) = 0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  *(_WORD *)(a2 + 24) = *(_WORD *)(a1 + 24);
  long long v4 = *(_OWORD *)(a1 + 28);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 44);
  *(_OWORD *)(a2 + 108) = v4;
  *(void *)(a2 + 148) = 0;
  *(void *)(a2 + 140) = 0;
  memcpy((void *)(a2 + 156), (const void *)(a1 + 60), 0x2150uLL);
  memcpy((void *)(a2 + 8684), (const void *)(a1 + 8588), 0xFD4uLL);
  memcpy((void *)(a2 + 12736), (const void *)(a1 + 12640), 0x710uLL);
  memcpy((void *)(a2 + 14544), (const void *)(a1 + 14448), 0x710uLL);
  long long v5 = *(_OWORD *)(a1 + 16272);
  *(_OWORD *)(a2 + 16352) = *(_OWORD *)(a1 + 16256);
  *(_OWORD *)(a2 + 16368) = v5;
  long long v6 = *(_OWORD *)(a1 + 16304);
  long long v7 = *(_OWORD *)(a1 + 16320);
  uint64_t v8 = *(void *)(a1 + 16336);
  *(_OWORD *)(a2 + 0x4000) = *(_OWORD *)(a1 + 16288);
  *(void *)(a2 + 16432) = v8;
  *(_OWORD *)(a2 + 16416) = v7;
  *(_OWORD *)(a2 + 16400) = v6;
  memcpy((void *)(a2 + 16440), (const void *)(a1 + 16344), 0x1180uLL);
  memcpy((void *)(a2 + 20920), (const void *)(a1 + 20824), 0x4908uLL);
  memcpy((void *)(a2 + 39616), (const void *)(a1 + 39520), 0x8380uLL);
  memcpy((void *)(a2 + 73280), (const void *)(a1 + 73184), 0x1038uLL);
  long long v9 = *(_OWORD *)(a1 + 77352);
  *(_OWORD *)(a2 + 77432) = *(_OWORD *)(a1 + 77336);
  *(_OWORD *)(a2 + 77448) = v9;
  long long v10 = *(_OWORD *)(a1 + 77368);
  long long v11 = *(_OWORD *)(a1 + 77384);
  long long v12 = *(_OWORD *)(a1 + 77416);
  *(_OWORD *)(a2 + 77496) = *(_OWORD *)(a1 + 77400);
  *(_OWORD *)(a2 + 77512) = v12;
  *(_OWORD *)(a2 + 77464) = v10;
  *(_OWORD *)(a2 + 77480) = v11;
  long long v13 = *(_OWORD *)(a1 + 77448);
  *(_OWORD *)(a2 + 77528) = *(_OWORD *)(a1 + 77432);
  *(_OWORD *)(a2 + 77544) = v13;
  long long v14 = *(_OWORD *)(a1 + 77512);
  long long v16 = *(_OWORD *)(a1 + 77464);
  long long v15 = *(_OWORD *)(a1 + 77480);
  *(_OWORD *)(a2 + 77592) = *(_OWORD *)(a1 + 77496);
  *(_OWORD *)(a2 + 77608) = v14;
  *(_OWORD *)(a2 + 77560) = v16;
  *(_OWORD *)(a2 + 77576) = v15;
  long long v18 = *(_OWORD *)(a1 + 77608);
  long long v17 = *(_OWORD *)(a1 + 77624);
  long long v19 = *(_OWORD *)(a1 + 77656);
  *(_OWORD *)(a2 + 77736) = *(_OWORD *)(a1 + 77640);
  *(_OWORD *)(a2 + 77752) = v19;
  *(_OWORD *)(a2 + 77704) = v18;
  *(_OWORD *)(a2 + 77720) = v17;
  long long v21 = *(_OWORD *)(a1 + 77544);
  long long v20 = *(_OWORD *)(a1 + 77560);
  long long v22 = *(_OWORD *)(a1 + 77592);
  *(_OWORD *)(a2 + 77672) = *(_OWORD *)(a1 + 77576);
  *(_OWORD *)(a2 + 77688) = v22;
  *(_OWORD *)(a2 + 77640) = v21;
  *(_OWORD *)(a2 + 77656) = v20;
  __n128 result = *(__n128 *)(a1 + 77528);
  *(__n128 *)(a2 + 77624) = result;
  return result;
}

float64x2_t bumpPeridotCalibOneVersion<peridot::CalibHistory::v3::_PeridotCalib,peridot::CalibHistory::v4::_PeridotCalib>(void *__src, float64x2_t *__dst)
{
  int8x16_t v3 = __dst + 4762;
  memcpy(__dst, __src, 0x12AA8uLL);
  LODWORD(__dst->f64[0]) = 4;
  *int8x16_t v3 = vnegq_f64(*v3);
  float64x2_t result = vnegq_f64(__dst[4768]);
  __dst[4768] = result;
  return result;
}

uint64_t bumpPeridotCalibOneVersion<peridot::CalibHistory::v8::_PeridotCalib,peridot::CalibHistory::v9::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  long long v4 = (unsigned char *)(a2 + 402520);
  long long v5 = (unsigned char *)(a1 + 402488);
  *(void *)a2 = 9;
  long long v6 = *(_OWORD *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 8) = v6;
  long long v8 = *(_OWORD *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v10;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  memcpy((void *)(a2 + 108), (const void *)(a1 + 108), 0x8DC0uLL);
  long long v11 = *(_OWORD *)(a1 + 36412);
  *(_OWORD *)(a2 + 36396) = *(_OWORD *)(a1 + 36396);
  *(_OWORD *)(a2 + 36412) = v11;
  *(_OWORD *)(a2 + 36428) = *(_OWORD *)(a1 + 36428);
  memcpy((void *)(a2 + 36444), (const void *)(a1 + 36444), 0x3150uLL);
  memcpy((void *)(a2 + 49068), (const void *)(a1 + 49068), 0x47A90uLL);
  memcpy((void *)(a2 + 342588), (const void *)(a1 + 342588), 0x710uLL);
  memcpy((void *)(a2 + 344396), (const void *)(a1 + 344396), 0x710uLL);
  long long v12 = *(_OWORD *)(a1 + 346232);
  long long v13 = *(_OWORD *)(a1 + 346220);
  *(_OWORD *)(a2 + 346204) = *(_OWORD *)(a1 + 346204);
  *(_OWORD *)(a2 + 346220) = v13;
  *(_OWORD *)(a2 + 346232) = v12;
  memcpy((void *)(a2 + 346248), (const void *)(a1 + 346248), 0x46A4uLL);
  memcpy((void *)(a2 + 364332), (const void *)(a1 + 364332), 0x8380uLL);
  memcpy((void *)(a2 + 398000), (const void *)(a1 + 398000), 0x1038uLL);
  long long v14 = *(_OWORD *)(a1 + 402168);
  *(_OWORD *)(a2 + 402152) = *(_OWORD *)(a1 + 402152);
  *(_OWORD *)(a2 + 402168) = v14;
  long long v15 = *(_OWORD *)(a1 + 402184);
  long long v16 = *(_OWORD *)(a1 + 402200);
  long long v17 = *(_OWORD *)(a1 + 402232);
  *(_OWORD *)(a2 + 402216) = *(_OWORD *)(a1 + 402216);
  *(_OWORD *)(a2 + 402232) = v17;
  *(_OWORD *)(a2 + 402184) = v15;
  *(_OWORD *)(a2 + 402200) = v16;
  long long v18 = *(_OWORD *)(a1 + 402264);
  *(_OWORD *)(a2 + 402248) = *(_OWORD *)(a1 + 402248);
  *(_OWORD *)(a2 + 402264) = v18;
  long long v19 = *(_OWORD *)(a1 + 402328);
  long long v21 = *(_OWORD *)(a1 + 402280);
  long long v20 = *(_OWORD *)(a1 + 402296);
  *(_OWORD *)(a2 + 402312) = *(_OWORD *)(a1 + 402312);
  *(_OWORD *)(a2 + 402328) = v19;
  *(_OWORD *)(a2 + 402280) = v21;
  *(_OWORD *)(a2 + 402296) = v20;
  long long v23 = *(_OWORD *)(a1 + 402392);
  long long v22 = *(_OWORD *)(a1 + 402408);
  long long v24 = *(_OWORD *)(a1 + 402440);
  *(_OWORD *)(a2 + 402456) = *(_OWORD *)(a1 + 402424);
  *(_OWORD *)(a2 + 402472) = v24;
  *(_OWORD *)(a2 + 402424) = v23;
  *(_OWORD *)(a2 + 402440) = v22;
  long long v25 = *(_OWORD *)(a1 + 402344);
  long long v26 = *(_OWORD *)(a1 + 402376);
  *(_OWORD *)(a2 + 402392) = *(_OWORD *)(a1 + 402360);
  *(_OWORD *)(a2 + 402408) = v26;
  *(_OWORD *)(a2 + 402376) = v25;
  *(_OWORD *)(a2 + 402488) = *(_OWORD *)(a1 + 402456);
  *(_OWORD *)(a2 + 402504) = *(_OWORD *)(a1 + 402472);
  *long long v4 = *v5;
  v4[1] = v5[1];
  v4[2] = v5[2];
  v4[3] = v5[3];
  v4[4] = v5[4];
  v4[5] = v5[5];
  v4[6] = v5[6];
  v4[7] = v5[7];
  return nvmGetModuleSerialNumber((const unsigned __int8 *)(a2 + 365228), 0x8000, (char (*)[32])(a2 + 402344));
}

uint64_t peridot::PeridotDXPRangeEstimation::PeridotDXPRangeEstimation(uint64_t this)
{
  *(_WORD *)this = 257;
  *(unsigned char *)(this + 2) = 0;
  *(void *)(this + 136) = 0;
  *(void *)(this + 144) = 0;
  *(void *)(this + 128) = 0;
  return this;
}

{
  *(_WORD *)this = 257;
  *(unsigned char *)(this + 2) = 0;
  *(void *)(this + 136) = 0;
  *(void *)(this + 144) = 0;
  *(void *)(this + 128) = 0;
  return this;
}

void peridot::PeridotDXPRangeEstimation::~PeridotDXPRangeEstimation(peridot::PeridotDXPRangeEstimation *this)
{
  v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  v2 = (void *)*((void *)this + 16);
  if (v2)
  {
    *((void *)this + 17) = v2;
    operator delete(v2);
  }
}

double peridot::PeridotDXPRangeEstimation::getPulseParams(uint64_t a1, uint64_t a2, _OWORD **a3)
{
  double result = *(double *)&peridot::PeridotDXPRangeEstimation::getPulseParams(std::vector<float> const&,std::vector<float>&)::pulseParamsResult;
  **a3 = peridot::PeridotDXPRangeEstimation::getPulseParams(std::vector<float> const&,std::vector<float>&)::pulseParamsResult;
  return result;
}

uint64_t peridot::PeridotDXPRangeEstimation::setRunMode(uint64_t result, int a2)
{
  *(_WORD *)double result = a2;
  *(unsigned char *)(result + 2) = BYTE2(a2);
  return result;
}

__n128 peridot::PeridotDXPRangeEstimation::configure(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 4) = *(_DWORD *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 5);
  uint64_t v2 = *(void *)(a2 + 3424);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 3432);
  *(void *)(a1 + 12) = v2;
  uint64_t v3 = *(void *)(a2 + 3436);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 3444);
  *(void *)(a1 + 24) = v3;
  long long v4 = *(_OWORD *)(a2 + 3464);
  *(void *)(a1 + 56) = *(void *)(a2 + 3480);
  *(_OWORD *)(a1 + 40) = v4;
  long long v5 = *(_OWORD *)(a2 + 3448);
  *(void *)(a1 + 80) = *(void *)(a2 + 3464);
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = *(__n128 *)(a2 + 3744);
  long long v7 = *(_OWORD *)(a2 + 3776);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 3760);
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t peridot::PeridotDXPRangeEstimation::process(float32x4_t *this, uint64_t a2, const peridot::PeridotDetectorOutput::DetectorOutSpot *a3, const peridot::PeridotPreProcessOutput::PreProcessorOutSpot *a4, const unint64_t *a5, const peridot::PeridotDxpMacro *a6, peridot::PeridotDepth *a7)
{
  return 0;
}

float peridot::PeridotDXPRangeEstimation::weqSnrCompareFunc(peridot::PeridotDXPRangeEstimation *this, float a2)
{
  return 1.0 / (exp((float)(a2 + -40.0) * -0.5) + 1.0);
}

uint64_t peridot::PeridotDXPRangeEstimation::calcBLparamsHS(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4);
  v191 = v5;
  v192 = v6;
  unint64_t v193 = v4;
  uint64_t v195 = v8;
  v196 = v7;
  unint64_t v10 = v9;
  v197 = v11;
  uint64_t v247 = *MEMORY[0x263EF8340];
  if (v9)
  {
    uint64_t v12 = 0;
    float v13 = (float)v4;
    do
    {
      uint64_t v198 = v12;
      long long v14 = (uint64_t *)(*v196 + 24 * v12);
      uint64_t v15 = *v14;
      uint64_t v16 = v14[1] - *v14;
      if (v16)
      {
        unint64_t v17 = 0;
        unint64_t v18 = 0;
        unint64_t v19 = v16 >> 2;
        long long v20 = *v197;
        if (v19 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v19;
        }
        do
        {
          int v22 = *(_DWORD *)(v15 + 4 * v17++);
          if (v22 == 1)
          {
            *(&v241 + v18) = (void *)v17;
            float v23 = (float)v17 * v13;
            *((float *)&v235 + v18) = expf(v23 * v20[1]);
            *((float *)&v229 + v18) = expf(v23 * v20[3]);
            v228[v18++] = 1.0;
          }
        }
        while (v21 != v17);
        v222 = &unk_2707171D8;
        if (v18) {
          operator new[]();
        }
      }
      else
      {
        unint64_t v18 = 0;
        v222 = &unk_2707171D8;
      }
      uint64_t v223 = 0;
      unsigned int v224 = 0;
      unsigned int v225 = 3;
      char v226 = 0;
      unint64_t v227 = 24 * v18;
      if (v18)
      {
        unsigned int v24 = 0;
        uint64_t v25 = 0;
        do
        {
          uint64_t v26 = 8 * v24;
          *(double *)(v223 + v26) = *((float *)&v235 + v25);
          *(double *)(v223 + v26 + 8) = *((float *)&v229 + v25);
          *(double *)(v223 + v26 + 16) = v228[v25++];
          v24 += 3;
        }
        while (v18 > v25);
      }
      v216 = &unk_2707171D8;
      uint64_t v217 = 0;
      int v218 = 0;
      unsigned int v219 = 0;
      char v220 = 0;
      uint64_t v221 = 8 * v18 * v18;
      bzero(0, 0);
      if (v18)
      {
        uint64_t v27 = 0;
        uint64_t v28 = 0;
        double v29 = **v197;
        double v30 = (*v197)[1];
        double v31 = (*v197)[2];
        double v32 = (*v197)[3];
        do
        {
          double v33 = (double)(unint64_t)*(&v241 + v27);
          long double v34 = exp(v33 * v30) * v29;
          long double v35 = exp(v32 * v33);
          *(long double *)(v217 + v28) = 1.0 / (v34 + v35 * v31);
          ++v27;
          v28 += 8;
        }
        while (v18 > v27);
      }
      v206 = &unk_2707171D8;
      __src = 0;
      uint64_t v208 = v225;
      char v209 = 0;
      uint64_t v210 = 8 * v225 * v18;
      v211 = &unk_2707171D8;
      if (v225 * v225) {
        operator new[]();
      }
      v212 = 0;
      LODWORD(v213) = v225;
      HIDWORD(v213) = v225;
      char v214 = 0;
      unint64_t v215 = 8 * v225 * v225;
      Matrix<double>::MultAxBToC((uint64_t)&v206, (uint64_t)&v222, (uint64_t)&v211);
      v206 = &unk_2707171D8;
      uint64_t v36 = v198;
      if (__src && v209) {
        MEMORY[0x25A2D62A0]();
      }
      double v37 = *v212;
      if (v213 == 3) {
        double v38 = -(v212[7] * v212[5] - v212[8] * v212[4]) * v37
      }
            + -(v212[6] * v212[4] - v212[3] * v212[7]) * v212[2]
            + -(v212[3] * v212[8] - v212[6] * v212[5]) * v212[1];
      else {
        double v38 = -(v212[2] * v212[1] - v212[3] * v37);
      }
      if (v38 <= 1.0e-10)
      {
        uint64_t v42 = v224;
        v206 = &unk_2707171D8;
        if (2 * v224) {
          operator new[]();
        }
        unsigned int v43 = v224;
        __src = 0;
        uint64_t v208 = v224 | 0x200000000;
        char v209 = 0;
        unint64_t v44 = 16 * v224;
        uint64_t v210 = v44;
        v45 = (void *)v223;
        if (v224)
        {
          v46 = (_OWORD *)(v223 + 8);
          uint64_t v47 = 8 * v225;
          v48 = 0;
          do
          {
            *v48++ = *v46;
            v46 = (_OWORD *)((char *)v46 + v47);
            --v43;
          }
          while (v43);
        }
        if (v227 < v44)
        {
          if (v45 && v226) {
            MEMORY[0x25A2D62A0]();
          }
          operator new[]();
        }
        unsigned int v225 = 2;
        unsigned int v224 = v42;
        memcpy(v45, 0, 16 * v42);
        v206 = &unk_2707171D8;
        if (__src && v209) {
          MEMORY[0x25A2D62A0]();
        }
        uint64_t v49 = v224;
        uint64_t v50 = v225;
        uint64_t v51 = v219;
        v200 = &unk_2707171D8;
        if (v219 * v225) {
          operator new[]();
        }
        uint64_t v201 = 0;
        unsigned int v202 = v225;
        unsigned int v203 = v219;
        char v204 = 0;
        uint64_t v52 = 8 * v225;
        uint64_t v205 = v52 * v219;
        if (v225 && v219)
        {
          unsigned int v53 = 0;
          uint64_t v54 = 0;
          if (v224)
          {
            uint64_t v55 = v225;
            uint64_t v56 = 2 * v225;
            uint64_t v57 = 8 * v219;
            uint64_t v58 = 16;
            do
            {
              unsigned int v59 = v219;
              if (v49 > 3)
              {
                uint64_t v65 = (v51 * v54);
                if (v55 == 1 && v219 == 1)
                {
                  uint64_t v66 = 0;
                  uint64_t v67 = 16;
                  do
                  {
                    v68 = (float64x2_t *)(v223 + v58);
                    v69 = (float64x2_t *)(v217 + v67);
                    float64x2_t v70 = 0uLL;
                    uint64_t v71 = v49 & 0xFFFFFFFC;
                    float64x2_t v72 = 0uLL;
                    do
                    {
                      float64x2_t v70 = vmlaq_f64(v70, v68[-1], v69[-1]);
                      float64x2_t v72 = vmlaq_f64(v72, *v68, *v69);
                      v68 += 2;
                      v69 += 2;
                      v71 -= 4;
                    }
                    while (v71);
                    double v73 = vaddvq_f64(vaddq_f64(v72, v70));
                    if ((v49 & 0xFFFFFFFC) != v49)
                    {
                      uint64_t v74 = v49 & 0xFFFFFFFC;
                      do
                      {
                        double v73 = v73
                            + *(double *)(v217 + 8 * v66 + 8 * v74)
                            * *(double *)(v223 + 8 * v54 + 8 * v74);
                        ++v74;
                      }
                      while (v49 != v74);
                    }
                    *(double *)(v201 + 8 * v66++ + 8 * v65) = v73;
                    v67 += 8;
                  }
                  while (v66 != v51);
                }
                else
                {
                  uint64_t v75 = 0;
                  do
                  {
                    unsigned int v76 = 0;
                    unsigned int v77 = 0;
                    double v78 = 0.0;
                    uint64_t v79 = v49;
                    do
                    {
                      double v78 = v78 + *(double *)(v217 + 8 * v75 + 8 * v77) * *(double *)(v223 + 8 * v54 + 8 * v76);
                      v77 += v59;
                      v76 += v55;
                      --v79;
                    }
                    while (v79);
                    *(double *)(v201 + 8 * v75++ + 8 * v65) = v78;
                  }
                  while (v75 != v51);
                }
              }
              else
              {
                uint64_t v60 = 0;
                uint64_t v61 = 16 * v219;
                uint64_t v62 = 8 * v219;
                do
                {
                  v63 = (double *)(v223 + 8 * v54);
                  double v64 = *(double *)(v217 + v60) * *v63;
                  if (v49 != 1)
                  {
                    double v64 = v64 + *(double *)(v217 + v62 + v60) * v63[v55];
                    if (v49 != 2) {
                      double v64 = v64 + *(double *)(v217 + v61 + v60) * v63[v56];
                    }
                  }
                  *(double *)(v201 + 8 * v53 + v60) = v64;
                  v60 += 8;
                }
                while (v57 != v60);
              }
              ++v54;
              v58 += 8;
              v53 += v51;
            }
            while (v54 != v50);
          }
          else
          {
            do
            {
              uint64_t v80 = 8 * v53;
              uint64_t v81 = v51;
              do
              {
                *(void *)(v201 + v80) = 0;
                v80 += 8;
                --v81;
              }
              while (v81);
              ++v54;
              v53 += v51;
            }
            while (v54 != v50);
          }
        }
        v206 = &unk_2707171D8;
        if (v225 * v50) {
          operator new[]();
        }
        __src = 0;
        uint64_t v208 = __PAIR64__(v225, v50);
        char v209 = 0;
        uint64_t v210 = v52 * v225;
        Matrix<double>::MultAxBToC((uint64_t)&v200, (uint64_t)&v222, (uint64_t)&v206);
        size_t v82 = 8 * v208 * (unint64_t)HIDWORD(v208);
        if (v215 < v82)
        {
          if (v212 && v214) {
            MEMORY[0x25A2D62A0](v212, 0x1000C8000313F17);
          }
          operator new[]();
        }
        uint64_t v213 = v208;
        memcpy(v212, __src, v82);
        v206 = &unk_2707171D8;
        if (__src && v209)
        {
          MEMORY[0x25A2D62A0]();
          __src = 0;
          uint64_t v210 = 0;
          char v209 = 0;
        }
        uint64_t v208 = 0;
        v200 = &unk_2707171D8;
        if (v201 && v204) {
          MEMORY[0x25A2D62A0]();
        }
        double v83 = *v212;
        if (v213 == 3) {
          double v84 = -(v212[7] * v212[5] - v212[8] * v212[4]) * v83
        }
              + -(v212[6] * v212[4] - v212[3] * v212[7]) * v212[2]
              + -(v212[3] * v212[8] - v212[6] * v212[5]) * v212[1];
        else {
          double v84 = -(v212[2] * v212[1] - v212[3] * v83);
        }
        if (v84 <= 1.0e-10)
        {
          v206 = &unk_2707171D8;
          if (v224) {
            operator new[]();
          }
          __src = 0;
          uint64_t v208 = 0x100000000;
          char v209 = 0;
          uint64_t v210 = 0;
          unsigned int v225 = 1;
          unsigned int v224 = 0;
          v206 = &unk_2707171D8;
          v200 = &unk_2707171D8;
          if (v219) {
            operator new[]();
          }
          uint64_t v201 = 0;
          unsigned int v202 = v225;
          unsigned int v203 = 0;
          char v204 = 0;
          uint64_t v205 = 0;
          v206 = &unk_2707171D8;
          operator new[]();
        }
        Matrix<double>::Inverse((uint64_t)&v206, (uint64_t)&v211);
        uint64_t v36 = v198;
        v85 = (float64x2_t *)__src;
        uint64_t v86 = HIDWORD(v208);
        uint64_t v87 = v195 + 36 * v198;
        *(void *)uint64_t v87 = 0;
        *(_DWORD *)(v87 + 8) = 0;
        *(_DWORD *)(v87 + 12) = 0;
        *(float32x2_t *)(v87 + 16) = vcvt_f32_f64(*v85);
        *(_DWORD *)(v87 + 24) = 0;
        *(float32x2_t *)(v87 + 28) = vcvt_f32_f64(*(float64x2_t *)((char *)v85 + 8 * v86));
      }
      else
      {
        Matrix<double>::Inverse((uint64_t)&v206, (uint64_t)&v211);
        v39 = (float64x2_t *)__src;
        v40 = (float32x4_t *)(v195 + 36 * v198);
        float32x4_t *v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__src), *((float64x2_t *)__src + 1));
        v40[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v39[2]), v39[3]);
        float32_t v41 = v39[4].f64[0];
        v40[2].f32[0] = v41;
      }
      v206 = &unk_2707171D8;
      if (v209) {
        MEMORY[0x25A2D62A0]();
      }
      v211 = &unk_2707171D8;
      if (v212 && v214) {
        MEMORY[0x25A2D62A0]();
      }
      v216 = &unk_2707171D8;
      if (v217 && v220) {
        MEMORY[0x25A2D62A0]();
      }
      v222 = &unk_2707171D8;
      if (v223 && v226) {
        MEMORY[0x25A2D62A0]();
      }
      uint64_t v12 = v36 + 1;
    }
    while (v12 != v10);
  }
  v241 = &unk_2707171D8;
  if (v10 * v10) {
    operator new[]();
  }
  v242 = 0;
  int v243 = v10;
  unsigned int v244 = v10;
  char v245 = 0;
  unint64_t v246 = 8 * v10 * (unint64_t)v10;
  bzero(0, 0);
  uint64_t v88 = 0;
  uint64_t v89 = v10 & ~((int)v10 >> 31);
  uint64_t v194 = (v10 - 1) + 1;
  uint64_t v90 = 8 * (v194 & 0x1FFFFFFFCLL);
  __asm { FMOV            V0.2D, #1.0 }
  int8x16_t v199 = _Q0;
  do
  {
    if (v88 == v89) {
      break;
    }
    v96 = *v197;
    double v97 = **v197;
    uint64_t v98 = v88 + 1;
    double v99 = (double)((int)v88 + 1);
    long double v100 = exp((*v197)[1] * v99) * v97;
    double v101 = v96[2];
    double v102 = v100 + exp(v96[3] * v99) * v101;
    if (v102 == 0.0)
    {
      v235 = &unk_2707171D8;
      v103 = 0;
      v236 = 0;
      unsigned int v237 = v10;
      unsigned int v238 = v10;
      char v239 = 0;
      unint64_t v240 = 8 * v10 * (unint64_t)v10;
      if ((v10 - 1) > 2uLL)
      {
        if (v194 == (v194 & 0x1FFFFFFFCLL))
        {
          unsigned int v107 = 0;
          do
          {
            unint64_t v108 = 0;
            int32x2_t v109 = vdup_n_s32(v107);
            int32x2_t v110 = (int32x2_t)0x100000000;
            do
            {
              v111 = (int8x16_t *)&v103[v108 / 8];
              int32x2_t v112 = vceq_s32(v109, v110);
              v113.i64[0] = v112.i32[0];
              v113.i64[1] = v112.i32[1];
              int8x16_t v114 = v113;
              int32x2_t v115 = vceq_s32(v109, vadd_s32(v110, (int32x2_t)0x200000002));
              v113.i64[0] = v115.i32[0];
              v113.i64[1] = v115.i32[1];
              int8x16_t *v111 = vandq_s8(v199, v114);
              v111[1] = vandq_s8(v199, v113);
              int32x2_t v110 = vadd_s32(v110, (int32x2_t)0x400000004);
              v108 += 32;
            }
            while (8 * (v10 - 1) + 8 != v108);
            v103 = (double *)((char *)v103 + v90);
            ++v107;
          }
          while (v107 != v10);
        }
        else
        {
          unsigned int v116 = 0;
          do
          {
            int32x2_t v117 = vdup_n_s32(v116);
            v118 = (int8x16_t *)(v103 + 2);
            uint64_t v119 = v194 & 0x1FFFFFFFCLL;
            int32x2_t v120 = (int32x2_t)0x100000000;
            do
            {
              int32x2_t v121 = vceq_s32(v117, v120);
              v122.i64[0] = v121.i32[0];
              v122.i64[1] = v121.i32[1];
              int8x16_t v123 = v122;
              int32x2_t v124 = vceq_s32(v117, vadd_s32(v120, (int32x2_t)0x200000002));
              v122.i64[0] = v124.i32[0];
              v122.i64[1] = v124.i32[1];
              v118[-1] = vandq_s8(v199, v123);
              int8x16_t *v118 = vandq_s8(v199, v122);
              int32x2_t v120 = vadd_s32(v120, (int32x2_t)0x400000004);
              v118 += 2;
              v119 -= 4;
            }
            while (v119);
            v103 = (double *)((char *)v103 + v90);
            int v125 = v10 & 0xFFFFFFFC;
            do
            {
              if (v116 == v125) {
                double v126 = 1.0;
              }
              else {
                double v126 = 0.0;
              }
              *v103++ = v126;
              ++v125;
            }
            while (v10 != v125);
            ++v116;
          }
          while (v116 != v10);
        }
      }
      else
      {
        int v104 = 0;
        do
        {
          int v105 = 0;
          do
          {
            if (v104 == v105) {
              double v106 = 1.0;
            }
            else {
              double v106 = 0.0;
            }
            *v103++ = v106;
            ++v105;
          }
          while (v10 != v105);
          ++v104;
        }
        while (v104 != v10);
      }
      size_t v127 = 8 * v237 * (unint64_t)v238;
      if (v246 < v127)
      {
        if (v242)
        {
          if (v245) {
            MEMORY[0x25A2D62A0](v242, 0x1000C8000313F17);
          }
        }
        operator new[]();
      }
      unsigned int v244 = v238;
      int v243 = v237;
      memcpy(v242, v236, v127);
      v235 = &unk_2707171D8;
      if (v236 && v239) {
        MEMORY[0x25A2D62A0]();
      }
      uint64_t v89 = v10 & ~((int)v10 >> 31);
    }
    else
    {
      *((double *)v242 + v88 + v244 * v88) = 1.0 / v102;
    }
    uint64_t v88 = v98;
  }
  while (v102 != 0.0);
  v235 = &unk_2707171D8;
  if (v10) {
    operator new[]();
  }
  v236 = 0;
  unsigned int v237 = 0;
  unsigned int v238 = 3;
  char v239 = 0;
  unint64_t v240 = 0;
  if (v10)
  {
    unsigned int v128 = 0;
    double v129 = (*v197)[1];
    double v130 = (*v197)[3];
    unsigned int v131 = 1;
    do
    {
      double v132 = (double)v131 * (double)v193;
      long double v133 = exp(v132 * v129);
      uint64_t v134 = 8 * v128;
      *(long double *)((char *)v236 + v134) = v133;
      long double v135 = exp(v132 * v130);
      *(long double *)((char *)v236 + v134 + 8) = v135;
      *(void *)((char *)v236 + v134 + 16) = 0x3FF0000000000000;
      unint64_t v136 = v131;
      v128 += 3;
      ++v131;
    }
    while (v136 < v10);
  }
  uint64_t v137 = v244;
  v229 = &unk_2707171D8;
  if (v244) {
    operator new[]();
  }
  v230 = 0;
  int v231 = 3;
  int v232 = 0;
  char v233 = 0;
  uint64_t v234 = 0;
  if (!v10)
  {
    v154 = (char *)v236;
    goto LABEL_187;
  }
  unint64_t v138 = (v10 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  unint64_t v139 = v138 + 1;
  v140 = (float *)v192;
  v141 = (double *)v230;
  if (v138 <= 6) {
    goto LABEL_161;
  }
  v142 = v230 + 2;
  v143 = v192 + 1;
  uint64_t v144 = v139 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v146 = v142[-2];
    float64x2_t v145 = v142[-1];
    float64x2_t v148 = *v142;
    float64x2_t v147 = v142[1];
    v142 += 4;
    v143[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v146), v145);
    float32x4_t *v143 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v148), v147);
    v143 += 2;
    v144 -= 8;
  }
  while (v144);
  if (v139 != (v139 & 0x3FFFFFFFFFFFFFF8))
  {
    v140 = &v192->f32[v139 & 0x3FFFFFFFFFFFFFF8];
    v141 = (double *)(8 * (v139 & 0x3FFFFFFFFFFFFFF8));
    do
    {
LABEL_161:
      double v149 = *v141++;
      float v150 = v149;
      *v140++ = v150;
    }
    while (v141 != (double *)(8 * v10));
  }
  uint64_t v151 = 8 * v137;
  f32 = v192[92].f32;
  if (v138 < 7)
  {
    v153 = (double *)(8 * v137);
    goto LABEL_169;
  }
  v155 = (float64x2_t *)(v151 + 32);
  v156 = v192 + 93;
  uint64_t v157 = v139 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v159 = v155[-2];
    float64x2_t v158 = v155[-1];
    float64x2_t v161 = *v155;
    float64x2_t v160 = v155[1];
    v155 += 4;
    v156[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v159), v158);
    float32x4_t *v156 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v160);
    v156 += 2;
    v157 -= 8;
  }
  while (v157);
  if (v139 != (v139 & 0x3FFFFFFFFFFFFFF8))
  {
    f32 += v139 & 0x3FFFFFFFFFFFFFF8;
    v153 = (double *)(v151 + 8 * (v139 & 0x3FFFFFFFFFFFFFF8));
LABEL_169:
    v162 = (double *)(v151 + 8 * v10);
    do
    {
      double v163 = *v153++;
      float v164 = v163;
      *f32++ = v164;
    }
    while (v153 != v162);
  }
  v165 = v192[184].f32;
  if (v138 < 7)
  {
    v166 = 0;
    goto LABEL_177;
  }
  uint64_t v167 = 32;
  v168 = v192 + 185;
  uint64_t v169 = v139 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v171 = *(float64x2_t *)(v167 - 32);
    float64x2_t v170 = *(float64x2_t *)(v167 - 16);
    float64x2_t v173 = *(float64x2_t *)v167;
    float64x2_t v172 = *(float64x2_t *)(v167 + 16);
    v167 += 64;
    v168[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v171), v170);
    float32x4_t *v168 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v173), v172);
    v168 += 2;
    v169 -= 8;
  }
  while (v169);
  if (v139 != (v139 & 0x3FFFFFFFFFFFFFF8))
  {
    v165 += v139 & 0x3FFFFFFFFFFFFFF8;
    v166 = (double *)(8 * (v139 & 0x3FFFFFFFFFFFFFF8));
    do
    {
LABEL_177:
      double v174 = *v166++;
      float v175 = v174;
      *v165++ = v175;
    }
    while (v166 != (double *)(8 * v10));
  }
  v154 = (char *)v236;
  uint64_t v176 = 24 * v10;
  if (!(24 * v10)) {
    goto LABEL_187;
  }
  if ((unint64_t)(v176 - 8) < 0x38)
  {
    v177 = (double *)v236;
    v178 = (float *)v191;
    goto LABEL_185;
  }
  unint64_t v179 = ((unint64_t)(v176 - 8) >> 3) + 1;
  v180 = (float64x2_t *)((char *)v236 + 32);
  v181 = v191 + 1;
  uint64_t v182 = v179 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v184 = v180[-2];
    float64x2_t v183 = v180[-1];
    float64x2_t v186 = *v180;
    float64x2_t v185 = v180[1];
    v180 += 4;
    v181[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v184), v183);
    float32x4_t *v181 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v186), v185);
    v181 += 2;
    v182 -= 8;
  }
  while (v182);
  if (v179 != (v179 & 0x3FFFFFFFFFFFFFF8))
  {
    v178 = &v191->f32[v179 & 0x3FFFFFFFFFFFFFF8];
    v177 = (double *)&v154[8 * (v179 & 0x3FFFFFFFFFFFFFF8)];
LABEL_185:
    v187 = (double *)&v154[v176];
    do
    {
      double v188 = *v177++;
      float v189 = v188;
      *v178++ = v189;
    }
    while (v177 != v187);
  }
LABEL_187:
  v229 = &unk_2707171D8;
  v235 = &unk_2707171D8;
  if (v154 && v239) {
    MEMORY[0x25A2D62A0](v154, 0x1000C8000313F17, v192);
  }
  v241 = &unk_2707171D8;
  if (v242 && v245) {
    MEMORY[0x25A2D62A0]();
  }
  return 0;
}

void sub_259089DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
}

uint64_t Matrix<double>::Inverse(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  *(void *)a1 = &unk_2707171D8;
  if (v4 * v5) {
    operator new[]();
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 8 * v5 * (unint64_t)v4;
  long long v7 = *(double **)(a2 + 8);
  double v8 = *v7;
  if (v5 == 3)
  {
    double v9 = -(v7[7] * v7[5] - v7[8] * v7[4]) * v8
       + -(v7[6] * v7[4] - v7[3] * v7[7]) * v7[2]
       + -(v7[3] * v7[8] - v7[6] * v7[5]) * v7[1];
    if (v9 == 0.0) {
      return result;
    }
  }
  else
  {
    double v10 = v7[3];
    double v9 = -(v7[2] * v7[1] - v10 * v8);
    if (v9 == 0.0) {
      return result;
    }
    if (v5 == 2)
    {
      double v11 = 1.0 / v9;
      MEMORY[0] = v10 * v11;
      MEMORY[8] = -(v7[1] * v11);
      MEMORY[0x10] = -(v7[2] * v11);
      MEMORY[0x18] = *v7 * v11;
      return result;
    }
  }
  uint64_t v12 = *(unsigned int *)(a2 + 20);
  if (v12)
  {
    uint64_t v13 = 0;
    int v14 = 5;
    unsigned int v15 = 1;
    int v16 = 8;
    unsigned int v17 = 2;
    int v18 = 7;
    int v19 = 4;
    double v20 = 1.0 / v9;
    do
    {
      LODWORD(result) = 0;
      uint64_t v21 = 0;
      unsigned int v22 = 9 * (v15 / 3);
      unsigned int v23 = 9 * (v17 / 3);
      uint64_t v24 = v13 + 1;
      unsigned int v25 = v14 - v22;
      unsigned int v26 = v16 - v23;
      unsigned int v27 = v18 - v23;
      unsigned int v28 = v19 - v22;
      unsigned int v29 = 2;
      unsigned int v30 = 1;
      do
      {
        uint64_t v31 = *(void *)(a2 + 8);
        *(double *)(*(void *)(a1 + 8) + 8 * v13 + 8 * result) = -(*(double *)(v31
                                                                                              + 8
                                                                                              * (v21
                                                                                               + v27
                                                                                               - 3 * (v30 / 3)))
                                                                                  * *(double *)(v31
                                                                                              + 8
                                                                                              * (v21
                                                                                               + v25
                                                                                               - 3 * (v29 / 3)))
                                                                                  - *(double *)(v31
                                                                                              + 8
                                                                                              * (v21
                                                                                               + v26
                                                                                               - 3 * (v29 / 3)))
                                                                                  * *(double *)(v31
                                                                                              + 8
                                                                                              * (v21
                                                                                               + v28
                                                                                               - 3 * (v30 / 3))))
                                                                                * v20;
        uint64_t result = result + v4;
        ++v29;
        ++v30;
        ++v21;
      }
      while (v12 != v21);
      v14 += 3;
      ++v15;
      v16 += 3;
      ++v17;
      v18 += 3;
      v19 += 3;
      ++v13;
    }
    while (v24 != v12);
  }
  return result;
}

uint64_t peridot::PeridotDXPRangeEstimation::calcBLparamsHP(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t *a4, unint64_t a5, uint64_t a6, float32x4_t *a7, float *a8)
{
  unint64_t v8 = a3;
  if (a3)
  {
    uint64_t v9 = 0;
    float v10 = (float)a5;
    while (1)
    {
      uint64_t v11 = *a4;
      uint64_t v12 = *(void *)(*a4 + 24 * v9);
      uint64_t v274 = v9;
      uint64_t v13 = 0;
      int v14 = 0;
      if (*(void *)(*a4 + 24 * v9 + 8) != v12) {
        break;
      }
      unsigned int v15 = 0;
      v281 = 0;
      v290 = 0;
LABEL_117:
      __pa = v15;
      uint64_t v101 = v290 - (char *)v13;
      v314 = &unk_2707171D8;
      if (((unint64_t)(v290 - (char *)v13) >> 3)) {
        operator new[]();
      }
      double v102 = v281;
      v315 = 0;
      unsigned int v316 = 0;
      unsigned int v317 = 3;
      char v318 = 0;
      unint64_t v319 = 3 * (v101 & 0x7FFFFFFF8);
      unint64_t v103 = v101 >> 3;
      if (v290 != (char *)v13)
      {
        unsigned int v104 = 0;
        uint64_t v105 = 0;
        do
        {
          uint64_t v106 = v104;
          v315[v106] = v14[v105];
          v315[v106 + 1] = v15[v105];
          v315[v106 + 2] = *(float *)&v281[4 * v105++];
          v104 += 3;
        }
        while (v103 > v105);
      }
      v308 = &unk_2707171D8;
      v309 = 0;
      unsigned int v310 = 0;
      unsigned int v311 = 0;
      char v312 = 0;
      uint64_t v313 = 0;
      bzero(0, 0);
      if (v290 != (char *)v13)
      {
        uint64_t v107 = 0;
        uint64_t v108 = 0;
        double v109 = *(float *)*a2;
        double v110 = *(float *)(*a2 + 4);
        double v111 = *(float *)(*a2 + 8);
        double v112 = *(float *)(*a2 + 12);
        do
        {
          double v113 = (double)v13[v107];
          long double v114 = exp(v113 * v110) * v109;
          long double v115 = exp(v112 * v113);
          v309[v108] = 1.0 / (v114 + v115 * v111);
          ++v107;
          ++v108;
        }
        while (v103 > v107);
      }
      v298 = &unk_2707171D8;
      __src = 0;
      uint64_t v300 = v317;
      char v301 = 0;
      uint64_t v302 = 8 * v317 * ((unint64_t)v101 >> 3);
      unint64_t v8 = a3;
      v303 = &unk_2707171D8;
      if (v317 * v317) {
        operator new[]();
      }
      v304 = 0;
      LODWORD(v305) = v317;
      HIDWORD(v305) = v317;
      char v306 = 0;
      unint64_t v307 = 8 * v317 * v317;
      Matrix<double>::MultAxBToC((uint64_t)&v298, (uint64_t)&v314, (uint64_t)&v303);
      v298 = &unk_2707171D8;
      unsigned int v116 = v15;
      if (__src && v301) {
        MEMORY[0x25A2D62A0]();
      }
      double v117 = *v304;
      if (v305 == 3) {
        double v118 = -(v304[7] * v304[5] - v304[8] * v304[4]) * v117
      }
             + -(v304[6] * v304[4] - v304[3] * v304[7]) * v304[2]
             + -(v304[3] * v304[8] - v304[6] * v304[5]) * v304[1];
      else {
        double v118 = -(v304[2] * v304[1] - v304[3] * v117);
      }
      if (v118 <= 1.0e-10)
      {
        uint64_t v122 = v316;
        v298 = &unk_2707171D8;
        if (2 * v316) {
          operator new[]();
        }
        unsigned int v123 = v316;
        __src = 0;
        uint64_t v300 = v316 | 0x200000000;
        char v301 = 0;
        unint64_t v124 = 16 * v316;
        uint64_t v302 = v124;
        int v125 = v315;
        if (v316)
        {
          double v126 = v315 + 1;
          uint64_t v127 = 8 * v317;
          unsigned int v128 = 0;
          do
          {
            *v128++ = *v126;
            double v126 = (_OWORD *)((char *)v126 + v127);
            --v123;
          }
          while (v123);
        }
        if (v319 < v124)
        {
          if (v125 && v318) {
            MEMORY[0x25A2D62A0]();
          }
          operator new[]();
        }
        unsigned int v316 = v122;
        unsigned int v317 = 2;
        memcpy(v125, 0, 16 * v122);
        v298 = &unk_2707171D8;
        if (__src && v301) {
          MEMORY[0x25A2D62A0]();
        }
        uint64_t v130 = v316;
        uint64_t v129 = v317;
        uint64_t v131 = v311;
        v292 = &unk_2707171D8;
        if (v311 * v317) {
          operator new[]();
        }
        uint64_t v293 = 0;
        unsigned int v294 = v317;
        unsigned int v295 = v311;
        char v296 = 0;
        uint64_t v132 = 8 * v317;
        uint64_t v297 = v132 * v311;
        if (v317 && v311)
        {
          unsigned int v133 = 0;
          uint64_t v134 = 0;
          if (v316)
          {
            uint64_t v135 = v317;
            uint64_t v136 = 8 * v311;
            uint64_t v137 = 2;
            do
            {
              unsigned int v138 = v311;
              if (v130 > 3)
              {
                uint64_t v144 = (v131 * v134);
                if (v135 == 1 && v311 == 1)
                {
                  uint64_t v145 = 0;
                  uint64_t v146 = 2;
                  do
                  {
                    float64x2_t v147 = (float64x2_t *)&v315[v137];
                    float64x2_t v148 = (float64x2_t *)&v309[v146];
                    float64x2_t v149 = 0uLL;
                    uint64_t v150 = v130 & 0xFFFFFFFC;
                    float64x2_t v151 = 0uLL;
                    do
                    {
                      float64x2_t v149 = vmlaq_f64(v149, v147[-1], v148[-1]);
                      float64x2_t v151 = vmlaq_f64(v151, *v147, *v148);
                      v147 += 2;
                      v148 += 2;
                      v150 -= 4;
                    }
                    while (v150);
                    double v152 = vaddvq_f64(vaddq_f64(v151, v149));
                    if ((v130 & 0xFFFFFFFC) != v130)
                    {
                      uint64_t v153 = v130 & 0xFFFFFFFC;
                      do
                      {
                        double v152 = v152 + v309[v145 + v153] * v315[v134 + v153];
                        ++v153;
                      }
                      while (v130 != v153);
                    }
                    *(double *)(v293 + 8 * v145++ + 8 * v144) = v152;
                    ++v146;
                  }
                  while (v145 != v131);
                }
                else
                {
                  uint64_t v154 = 0;
                  do
                  {
                    unsigned int v155 = 0;
                    unsigned int v156 = 0;
                    double v157 = 0.0;
                    uint64_t v158 = v130;
                    do
                    {
                      double v157 = v157 + v309[v154 + v156] * v315[v134 + v155];
                      v156 += v138;
                      v155 += v135;
                      --v158;
                    }
                    while (v158);
                    *(double *)(v293 + 8 * v154++ + 8 * v144) = v157;
                  }
                  while (v154 != v131);
                }
              }
              else
              {
                unint64_t v139 = 0;
                uint64_t v140 = 2 * v311;
                uint64_t v141 = v311;
                do
                {
                  v142 = &v315[v134];
                  double v143 = v309[v139 / 8] * *v142;
                  if (v130 != 1)
                  {
                    double v143 = v143 + v309[v141 + v139 / 8] * v142[v135];
                    if (v130 != 2) {
                      double v143 = v143 + v309[v140 + v139 / 8] * v142[(2 * v135)];
                    }
                  }
                  *(double *)(v293 + 8 * v133 + v139) = v143;
                  v139 += 8;
                }
                while (v136 != v139);
              }
              ++v134;
              ++v137;
              v133 += v131;
            }
            while (v134 != v129);
          }
          else
          {
            do
            {
              uint64_t v159 = 8 * v133;
              uint64_t v160 = v131;
              do
              {
                *(void *)(v293 + v159) = 0;
                v159 += 8;
                --v160;
              }
              while (v160);
              ++v134;
              v133 += v131;
            }
            while (v134 != v129);
          }
        }
        v298 = &unk_2707171D8;
        if (v317 * v129) {
          operator new[]();
        }
        __src = 0;
        uint64_t v300 = __PAIR64__(v317, v129);
        char v301 = 0;
        uint64_t v302 = v132 * v317;
        Matrix<double>::MultAxBToC((uint64_t)&v292, (uint64_t)&v314, (uint64_t)&v298);
        size_t v161 = 8 * v300 * (unint64_t)HIDWORD(v300);
        if (v307 < v161)
        {
          if (v304 && v306) {
            MEMORY[0x25A2D62A0](v304, 0x1000C8000313F17);
          }
          operator new[]();
        }
        uint64_t v305 = v300;
        memcpy(v304, __src, v161);
        v298 = &unk_2707171D8;
        if (__src && v301)
        {
          MEMORY[0x25A2D62A0]();
          __src = 0;
          uint64_t v302 = 0;
          char v301 = 0;
        }
        uint64_t v300 = 0;
        v292 = &unk_2707171D8;
        unsigned int v116 = __pa;
        double v102 = v281;
        if (v293 && v296) {
          MEMORY[0x25A2D62A0]();
        }
        double v162 = *v304;
        if (v305 == 3) {
          double v163 = -(v304[7] * v304[5] - v304[8] * v304[4]) * v162
        }
               + -(v304[6] * v304[4] - v304[3] * v304[7]) * v304[2]
               + -(v304[3] * v304[8] - v304[6] * v304[5]) * v304[1];
        else {
          double v163 = -(v304[2] * v304[1] - v304[3] * v162);
        }
        if (v163 <= 1.0e-10)
        {
          v298 = &unk_2707171D8;
          if (v316) {
            operator new[]();
          }
          __src = 0;
          uint64_t v300 = 0x100000000;
          char v301 = 0;
          uint64_t v302 = 0;
          unsigned int v316 = 0;
          unsigned int v317 = 1;
          v298 = &unk_2707171D8;
          v292 = &unk_2707171D8;
          if (v311) {
            operator new[]();
          }
          uint64_t v293 = 0;
          unsigned int v294 = v317;
          unsigned int v295 = 0;
          char v296 = 0;
          uint64_t v297 = 0;
          v298 = &unk_2707171D8;
          operator new[]();
        }
        Matrix<double>::Inverse((uint64_t)&v298, (uint64_t)&v303);
        float v164 = (float64x2_t *)__src;
        uint64_t v165 = HIDWORD(v300);
        uint64_t v166 = a6 + 36 * v274;
        *(void *)uint64_t v166 = 0;
        *(_DWORD *)(v166 + 8) = 0;
        *(_DWORD *)(v166 + 12) = 0;
        *(float32x2_t *)(v166 + 16) = vcvt_f32_f64(*v164);
        *(_DWORD *)(v166 + 24) = 0;
        *(float32x2_t *)(v166 + 28) = vcvt_f32_f64(*(float64x2_t *)((char *)v164 + 8 * v165));
      }
      else
      {
        Matrix<double>::Inverse((uint64_t)&v298, (uint64_t)&v303);
        uint64_t v119 = (float64x2_t *)__src;
        int32x2_t v120 = (float32x4_t *)(a6 + 36 * v274);
        *int32x2_t v120 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)__src), *((float64x2_t *)__src + 1));
        v120[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v119[2]), v119[3]);
        float32_t v121 = v119[4].f64[0];
        v120[2].f32[0] = v121;
      }
      v298 = &unk_2707171D8;
      if (v301) {
        MEMORY[0x25A2D62A0]();
      }
      v303 = &unk_2707171D8;
      if (v304 && v306) {
        MEMORY[0x25A2D62A0]();
      }
      v308 = &unk_2707171D8;
      if (v309 && v312) {
        MEMORY[0x25A2D62A0]();
      }
      v314 = &unk_2707171D8;
      if (v315 && v318) {
        MEMORY[0x25A2D62A0]();
      }
      if (v102) {
        operator delete(v102);
      }
      if (v116) {
        operator delete(v116);
      }
      if (v14) {
        operator delete(v14);
      }
      if (v13) {
        operator delete(v13);
      }
      uint64_t v9 = v274 + 1;
      if (v274 + 1 == a3) {
        goto LABEL_222;
      }
    }
    v284 = 0;
    v286 = 0;
    v272 = 0;
    unsigned int v15 = 0;
    v278 = 0;
    v279 = 0;
    v281 = 0;
    int v16 = 0;
    v277 = 0;
    unsigned int v17 = 0;
    int v18 = 0;
    unint64_t v19 = 0;
    double v20 = 0;
    unint64_t v21 = 0;
    while (1)
    {
      int v22 = *(_DWORD *)(v12 + 4 * v21++);
      if (v22 == 1) {
        break;
      }
      v290 = v20;
LABEL_6:
      uint64_t v12 = *(void *)(v11 + 24 * v9);
      if (v21 >= (*(void *)(v11 + 24 * v9 + 8) - v12) >> 2) {
        goto LABEL_117;
      }
    }
    __p = v15;
    v283 = v16;
    if ((unint64_t)v20 < v19)
    {
      v276 = (char *)v19;
      *(void *)double v20 = v21;
      v290 = v20 + 8;
      goto LABEL_27;
    }
    uint64_t v23 = (v20 - v18) >> 3;
    unint64_t v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v19 - (void)v18) >> 2 > v24) {
      unint64_t v24 = (uint64_t)(v19 - (void)v18) >> 2;
    }
    if (v19 - (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25)
    {
      if (v25 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v26 = operator new(8 * v25);
    }
    else
    {
      unsigned int v26 = 0;
    }
    uint64_t v13 = (unint64_t *)&v26[8 * v23];
    *uint64_t v13 = v21;
    v290 = (char *)(v13 + 1);
    if (v20 != v18)
    {
      unint64_t v27 = v20 - 8 - v18;
      if (v27 < 0x168
        || &v26[v20 - v18 - 8 - (v27 & 0xFFFFFFFFFFFFFFF8)] > &v26[v20 - v18 - 8]
        || &v20[-(v27 & 0xFFFFFFFFFFFFFFF8) - 8] > v20 - 8
        || (unint64_t)(v18 - v26) < 0x20)
      {
        unsigned int v28 = v20;
      }
      else
      {
        uint64_t v80 = (v27 >> 3) + 1;
        unsigned int v28 = &v20[-8 * (v80 & 0x3FFFFFFFFFFFFFFCLL)];
        uint64_t v81 = &v26[8 * v23 - 16];
        size_t v82 = v20 - 16;
        uint64_t v83 = v80 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v84 = *(_OWORD *)v82;
          *(v81 - 1) = *((_OWORD *)v82 - 1);
          *uint64_t v81 = v84;
          v81 -= 2;
          v82 -= 32;
          v83 -= 4;
        }
        while (v83);
        v13 -= v80 & 0x3FFFFFFFFFFFFFFCLL;
        if (v80 == (v80 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_24;
        }
      }
      do
      {
        unint64_t v29 = *((void *)v28 - 1);
        v28 -= 8;
        *--uint64_t v13 = v29;
      }
      while (v28 != v18);
    }
LABEL_24:
    v276 = &v26[8 * v25];
    if (v18)
    {
      operator delete(v18);
      v286 = v272;
      unsigned int v17 = v284;
    }
    int v18 = (char *)v13;
LABEL_27:
    uint64_t v30 = *a2;
    float v31 = (float)v21 * v10;
    float v32 = expf(v31 * *(float *)(*a2 + 4));
    float v33 = v32;
    if (v17 < v286)
    {
      *unsigned int v17 = v32;
      v284 = v17 + 1;
      goto LABEL_48;
    }
    long double v34 = v14;
    uint64_t v35 = (char *)v17 - (char *)v14;
    uint64_t v36 = v35 >> 2;
    unint64_t v37 = (v35 >> 2) + 1;
    if (v37 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    double v38 = v34;
    unint64_t v39 = (char *)v286 - (char *)v34;
    unint64_t v40 = ((char *)v286 - (char *)v34) >> 1;
    if (v40 > v37) {
      unint64_t v37 = v40;
    }
    if (v39 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v41 = v37;
    }
    if (v41)
    {
      if (v41 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v42 = operator new(4 * v41);
    }
    else
    {
      uint64_t v42 = 0;
    }
    unsigned int v43 = (float *)&v42[4 * v36];
    *unsigned int v43 = v33;
    v284 = v43 + 1;
    unint64_t v44 = v38;
    if (v17 == v38)
    {
      unsigned int v15 = __p;
      uint64_t v9 = v274;
    }
    else
    {
      unint64_t v45 = (char *)(v17 - 1) - (char *)v38;
      if (v45 < 0xBC
        || &v42[v35 - 4 - (v45 & 0xFFFFFFFFFFFFFFFCLL)] > &v42[v35 - 4]
        || (float *)((char *)v17 - (v45 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v17 - 1
        || (unint64_t)((char *)v17 - &v42[v35]) < 0x20)
      {
        v46 = v17;
        unint64_t v44 = v38;
        unsigned int v15 = __p;
        uint64_t v9 = v274;
      }
      else
      {
        uint64_t v85 = (v45 >> 2) + 1;
        v46 = &v17[-(v85 & 0x7FFFFFFFFFFFFFF8)];
        uint64_t v86 = &v42[4 * v36 - 16];
        uint64_t v87 = v17 - 4;
        uint64_t v88 = v85 & 0x7FFFFFFFFFFFFFF8;
        unint64_t v44 = v38;
        do
        {
          long long v89 = *(_OWORD *)v87;
          *(v86 - 1) = *((_OWORD *)v87 - 1);
          *uint64_t v86 = v89;
          v86 -= 2;
          v87 -= 8;
          v88 -= 8;
        }
        while (v88);
        v43 -= v85 & 0x7FFFFFFFFFFFFFF8;
        unsigned int v15 = __p;
        uint64_t v9 = v274;
        if (v85 == (v85 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_45;
        }
      }
      do
      {
        int v47 = *((_DWORD *)v46-- - 1);
        *((_DWORD *)v43-- - 1) = v47;
      }
      while (v46 != v44);
    }
LABEL_45:
    v272 = (float *)&v42[4 * v41];
    if (v44)
    {
      v48 = (float *)&v42[4 * v41];
      operator delete(v44);
      uint64_t v30 = *a2;
      int v14 = v43;
      v286 = v48;
    }
    else
    {
      int v14 = v43;
      v286 = (float *)&v42[4 * v41];
    }
LABEL_48:
    float v49 = expf(v31 * *(float *)(v30 + 12));
    float v50 = v49;
    if (v278 < v279)
    {
      float *v278 = v49;
      uint64_t v51 = v278 + 1;
      goto LABEL_70;
    }
    uint64_t v52 = v14;
    unsigned int v53 = (char *)((char *)v278 - (char *)v15);
    uint64_t v54 = v15;
    uint64_t v55 = v278 - v15;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v57 = (char *)v279 - (char *)v54;
    unint64_t v58 = ((char *)v279 - (char *)v54) >> 1;
    if (v58 > v56) {
      unint64_t v56 = v58;
    }
    if (v57 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v59 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v56;
    }
    if (v59)
    {
      if (v59 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v60 = operator new(4 * v59);
    }
    else
    {
      uint64_t v60 = 0;
    }
    uint64_t v61 = (float *)((char *)v60 + 4 * v55);
    *uint64_t v61 = v50;
    uint64_t v51 = v61 + 1;
    if (v278 == __p)
    {
      int v14 = v52;
      double v64 = __p;
    }
    else
    {
      unint64_t v62 = (char *)(v278 - 1) - (char *)__p;
      if (v62 >= 0x2C && (unint64_t)((char *)v278 - &v53[(void)v60]) >= 0x20)
      {
        uint64_t v90 = (v62 >> 2) + 1;
        v63 = &v278[-(v90 & 0x7FFFFFFFFFFFFFF8)];
        v91 = (char *)v60 + 4 * v55 - 16;
        v92 = v278 - 4;
        uint64_t v93 = v90 & 0x7FFFFFFFFFFFFFF8;
        int v14 = v52;
        do
        {
          long long v94 = *(_OWORD *)v92;
          *(v91 - 1) = *((_OWORD *)v92 - 1);
          _OWORD *v91 = v94;
          v91 -= 2;
          v92 -= 8;
          v93 -= 8;
        }
        while (v93);
        v61 -= v90 & 0x7FFFFFFFFFFFFFF8;
        _ZF = v90 == (v90 & 0x7FFFFFFFFFFFFFF8);
        double v64 = __p;
        if (_ZF) {
          goto LABEL_67;
        }
      }
      else
      {
        v63 = v278;
        int v14 = v52;
        double v64 = __p;
      }
      do
      {
        int v65 = *((_DWORD *)v63-- - 1);
        *((_DWORD *)v61-- - 1) = v65;
      }
      while (v63 != v64);
    }
LABEL_67:
    v279 = (float *)((char *)v60 + 4 * v59);
    if (v64)
    {
      uint64_t v66 = v51;
      operator delete(v64);
      uint64_t v51 = v66;
    }
    unsigned int v15 = v61;
LABEL_70:
    uint64_t v67 = v283;
    if (v283 < v277)
    {
      *(_DWORD *)v283 = 1065353216;
      int v16 = v283 + 4;
LABEL_92:
      uint64_t v11 = *a4;
      unsigned int v17 = v284;
      v278 = v51;
      double v20 = v290;
      unint64_t v19 = (unint64_t)v276;
      goto LABEL_6;
    }
    v68 = v15;
    uint64_t v69 = (v283 - v281) >> 2;
    unint64_t v70 = v69 + 1;
    if ((unint64_t)(v69 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if ((v277 - v281) >> 1 > v70) {
      unint64_t v70 = (v277 - v281) >> 1;
    }
    if ((unint64_t)(v277 - v281) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v71 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v71 = v70;
    }
    if (v71)
    {
      if (v71 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float64x2_t v72 = v51;
      double v73 = (char *)operator new(4 * v71);
      uint64_t v67 = v283;
      uint64_t v51 = v72;
    }
    else
    {
      double v73 = 0;
    }
    uint64_t v74 = &v73[4 * v69];
    *(_DWORD *)uint64_t v74 = 1065353216;
    int v16 = v74 + 4;
    uint64_t v75 = v281;
    if (v67 == v281)
    {
      unsigned int v15 = v68;
      uint64_t v9 = v274;
    }
    else
    {
      unint64_t v76 = v67 - 4 - v281;
      if (v76 >= 0x2C && (unint64_t)(v67 - &v73[v283 - v281]) >= 0x20)
      {
        uint64_t v96 = (v76 >> 2) + 1;
        unsigned int v77 = &v67[-4 * (v96 & 0x7FFFFFFFFFFFFFF8)];
        double v97 = &v73[4 * v69 - 16];
        uint64_t v98 = v67 - 16;
        uint64_t v99 = v96 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v100 = *(_OWORD *)v98;
          *((_OWORD *)v97 - 1) = *((_OWORD *)v98 - 1);
          *(_OWORD *)double v97 = v100;
          v97 -= 32;
          v98 -= 32;
          v99 -= 8;
        }
        while (v99);
        v74 -= 4 * (v96 & 0x7FFFFFFFFFFFFFF8);
        unsigned int v15 = v68;
        uint64_t v75 = v281;
        uint64_t v9 = v274;
        if (v96 == (v96 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_89;
        }
      }
      else
      {
        unsigned int v77 = v67;
        unsigned int v15 = v68;
        uint64_t v75 = v281;
        uint64_t v9 = v274;
      }
      do
      {
        int v78 = *((_DWORD *)v77 - 1);
        v77 -= 4;
        *((_DWORD *)v74 - 1) = v78;
        v74 -= 4;
      }
      while (v77 != v75);
    }
LABEL_89:
    v277 = &v73[4 * v71];
    if (v75)
    {
      uint64_t v79 = v51;
      operator delete(v75);
      uint64_t v51 = v79;
    }
    v281 = v74;
    goto LABEL_92;
  }
LABEL_222:
  v314 = &unk_2707171D8;
  if (v8 * v8) {
    operator new[]();
  }
  v315 = 0;
  unsigned int v316 = v8;
  unsigned int v317 = v8;
  char v318 = 0;
  uint64_t v280 = v8;
  unint64_t v287 = 8 * v8 * (unint64_t)v8;
  unint64_t v319 = v287;
  bzero(0, 0);
  uint64_t v167 = 0;
  uint64_t v168 = v8 & ~((int)v8 >> 31);
  uint64_t v282 = (v8 - 1) + 1;
  uint64_t v169 = 8 * (v282 & 0x1FFFFFFFCLL);
  unint64_t v285 = (v8 - 1);
  __asm { FMOV            V0.2D, #1.0 }
  int8x16_t v291 = _Q0;
  do
  {
    if (v167 == v168) {
      break;
    }
    uint64_t v174 = *a2;
    double v175 = *(float *)*a2;
    double v176 = (double)((int)v167 + 1);
    long double v177 = exp(*(float *)(*a2 + 4) * v176) * v175;
    double v178 = *(float *)(v174 + 8);
    double v179 = v177 + exp(*(float *)(v174 + 12) * v176) * v178;
    if (v179 == 0.0)
    {
      v308 = &unk_2707171D8;
      v180 = 0;
      v309 = 0;
      unsigned int v310 = v8;
      unsigned int v311 = v8;
      char v312 = 0;
      uint64_t v313 = v287;
      if (v285 > 2)
      {
        if (v282 == (v282 & 0x1FFFFFFFCLL))
        {
          unsigned int v184 = 0;
          do
          {
            unint64_t v185 = 0;
            int32x2_t v186 = vdup_n_s32(v184);
            int32x2_t v187 = (int32x2_t)0x100000000;
            do
            {
              double v188 = (int8x16_t *)&v180[v185 / 8];
              int32x2_t v189 = vceq_s32(v186, v187);
              v190.i64[0] = v189.i32[0];
              v190.i64[1] = v189.i32[1];
              int8x16_t v191 = v190;
              int32x2_t v192 = vceq_s32(v186, vadd_s32(v187, (int32x2_t)0x200000002));
              v190.i64[0] = v192.i32[0];
              v190.i64[1] = v192.i32[1];
              *double v188 = vandq_s8(v291, v191);
              v188[1] = vandq_s8(v291, v190);
              int32x2_t v187 = vadd_s32(v187, (int32x2_t)0x400000004);
              v185 += 32;
            }
            while (8 * v285 + 8 != v185);
            v180 = (double *)((char *)v180 + v169);
            ++v184;
          }
          while (v184 != v8);
        }
        else
        {
          unsigned int v193 = 0;
          do
          {
            int32x2_t v194 = vdup_n_s32(v193);
            uint64_t v195 = (int8x16_t *)(v180 + 2);
            uint64_t v196 = v282 & 0x1FFFFFFFCLL;
            int32x2_t v197 = (int32x2_t)0x100000000;
            do
            {
              int32x2_t v198 = vceq_s32(v194, v197);
              v199.i64[0] = v198.i32[0];
              v199.i64[1] = v198.i32[1];
              int8x16_t v200 = v199;
              int32x2_t v201 = vceq_s32(v194, vadd_s32(v197, (int32x2_t)0x200000002));
              v199.i64[0] = v201.i32[0];
              v199.i64[1] = v201.i32[1];
              v195[-1] = vandq_s8(v291, v200);
              *uint64_t v195 = vandq_s8(v291, v199);
              int32x2_t v197 = vadd_s32(v197, (int32x2_t)0x400000004);
              v195 += 2;
              v196 -= 4;
            }
            while (v196);
            v180 = (double *)((char *)v180 + v169);
            int v202 = v282 & 0xFFFFFFFC;
            do
            {
              if (v193 == v202) {
                double v203 = 1.0;
              }
              else {
                double v203 = 0.0;
              }
              *v180++ = v203;
              ++v202;
            }
            while (v8 != v202);
            ++v193;
          }
          while (v193 != v8);
        }
      }
      else
      {
        int v181 = 0;
        do
        {
          int v182 = 0;
          do
          {
            if (v181 == v182) {
              double v183 = 1.0;
            }
            else {
              double v183 = 0.0;
            }
            *v180++ = v183;
            ++v182;
          }
          while (v8 != v182);
          ++v181;
        }
        while (v181 != v8);
      }
      if (v319 < 8 * v310 * (unint64_t)v311)
      {
        if (v315)
        {
          if (v318) {
            MEMORY[0x25A2D62A0](v315, 0x1000C8000313F17);
          }
        }
        operator new[]();
      }
      unsigned int v316 = v310;
      unsigned int v317 = v311;
      memcpy(v315, v309, 8 * v310 * (unint64_t)v311);
      v308 = &unk_2707171D8;
      if (v309 && v312) {
        MEMORY[0x25A2D62A0]();
      }
      unint64_t v8 = a3;
    }
    else
    {
      v315[v167 + v317 * v167] = 1.0 / v179;
    }
    ++v167;
  }
  while (v179 != 0.0);
  v308 = &unk_2707171D8;
  if (v8) {
    operator new[]();
  }
  v309 = 0;
  unsigned int v310 = 0;
  unsigned int v311 = 3;
  char v312 = 0;
  uint64_t v313 = 24 * v280;
  if (v8)
  {
    unsigned int v204 = 0;
    double v205 = *(float *)(*a2 + 4);
    double v206 = *(float *)(*a2 + 12);
    unsigned int v207 = 1;
    do
    {
      double v208 = (double)v207 * (double)a5;
      long double v209 = exp(v208 * v205);
      uint64_t v210 = v204;
      v309[v210] = v209;
      long double v211 = exp(v208 * v206);
      v309[v210 + 1] = v211;
      v309[v210 + 2] = 1.0;
      unint64_t v212 = v207;
      v204 += 3;
      ++v207;
    }
    while (v212 < v8);
  }
  uint64_t v213 = v317;
  v303 = &unk_2707171D8;
  if (v317) {
    operator new[]();
  }
  v304 = 0;
  uint64_t v305 = 3;
  char v306 = 0;
  unint64_t v307 = 0;
  if (!v8)
  {
    int v231 = v309;
    goto LABEL_301;
  }
  unint64_t v214 = (v8 - 1) & 0x1FFFFFFFFFFFFFFFLL;
  unint64_t v215 = v214 + 1;
  v216 = (float *)a7;
  uint64_t v217 = v304;
  if (v214 <= 6) {
    goto LABEL_275;
  }
  int v218 = (float64x2_t *)(v304 + 4);
  unsigned int v219 = a7 + 1;
  uint64_t v220 = v215 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v222 = v218[-2];
    float64x2_t v221 = v218[-1];
    float64x2_t v224 = *v218;
    float64x2_t v223 = v218[1];
    v218 += 4;
    v219[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v222), v221);
    *unsigned int v219 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v224), v223);
    v219 += 2;
    v220 -= 8;
  }
  while (v220);
  if (v215 != (v215 & 0x3FFFFFFFFFFFFFF8))
  {
    v216 = &a7->f32[v215 & 0x3FFFFFFFFFFFFFF8];
    uint64_t v217 = (double *)(8 * (v215 & 0x3FFFFFFFFFFFFFF8));
    do
    {
LABEL_275:
      double v225 = *v217++;
      float v226 = v225;
      *v216++ = v226;
    }
    while (v217 != (double *)(8 * v8));
  }
  uint64_t v227 = 8 * v213;
  f32 = a7[23].f32;
  if (v214 < 7)
  {
    v229 = (double *)(8 * v213);
    v230 = a8;
    goto LABEL_283;
  }
  int v232 = (float64x2_t *)(v227 + 32);
  char v233 = a7 + 24;
  uint64_t v234 = v215 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v236 = v232[-2];
    float64x2_t v235 = v232[-1];
    float64x2_t v238 = *v232;
    float64x2_t v237 = v232[1];
    v232 += 4;
    v233[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v236), v235);
    *char v233 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v238), v237);
    v233 += 2;
    v234 -= 8;
  }
  while (v234);
  v230 = a8;
  if (v215 != (v215 & 0x3FFFFFFFFFFFFFF8))
  {
    f32 += v215 & 0x3FFFFFFFFFFFFFF8;
    v229 = (double *)(v227 + 8 * (v215 & 0x3FFFFFFFFFFFFFF8));
LABEL_283:
    char v239 = (double *)(v227 + 8 * v8);
    do
    {
      double v240 = *v229++;
      float v241 = v240;
      *f32++ = v241;
    }
    while (v229 != v239);
  }
  v242 = a7[46].f32;
  if (v214 < 7)
  {
    int v243 = 0;
    goto LABEL_291;
  }
  uint64_t v244 = 32;
  char v245 = a7 + 47;
  uint64_t v246 = v215 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v248 = *(float64x2_t *)(v244 - 32);
    float64x2_t v247 = *(float64x2_t *)(v244 - 16);
    float64x2_t v250 = *(float64x2_t *)v244;
    float64x2_t v249 = *(float64x2_t *)(v244 + 16);
    v244 += 64;
    v245[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v248), v247);
    *char v245 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v250), v249);
    v245 += 2;
    v246 -= 8;
  }
  while (v246);
  if (v215 != (v215 & 0x3FFFFFFFFFFFFFF8))
  {
    v242 += v215 & 0x3FFFFFFFFFFFFFF8;
    int v243 = (double *)(8 * (v215 & 0x3FFFFFFFFFFFFFF8));
    do
    {
LABEL_291:
      double v251 = *v243++;
      float v252 = v251;
      *v242++ = v252;
    }
    while (v243 != (double *)(8 * v8));
  }
  int v231 = v309;
  uint64_t v253 = 24 * v8;
  if (!(24 * v8)) {
    goto LABEL_301;
  }
  if ((unint64_t)(v253 - 8) < 0x38)
  {
    v254 = v309;
    goto LABEL_299;
  }
  unint64_t v255 = ((unint64_t)(v253 - 8) >> 3) + 1;
  v256 = (float64x2_t *)(v309 + 4);
  v257 = (float32x4_t *)(v230 + 4);
  uint64_t v258 = v255 & 0x3FFFFFFFFFFFFFF8;
  do
  {
    float64x2_t v260 = v256[-2];
    float64x2_t v259 = v256[-1];
    float64x2_t v262 = *v256;
    float64x2_t v261 = v256[1];
    v256 += 4;
    v257[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v260), v259);
    float32x4_t *v257 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v262), v261);
    v257 += 2;
    v258 -= 8;
  }
  while (v258);
  if (v255 != (v255 & 0x3FFFFFFFFFFFFFF8))
  {
    v230 += v255 & 0x3FFFFFFFFFFFFFF8;
    v254 = &v231[v255 & 0x3FFFFFFFFFFFFFF8];
LABEL_299:
    v263 = &v231[(unint64_t)v253 / 8];
    do
    {
      double v264 = *v254++;
      float v265 = v264;
      *v230++ = v265;
    }
    while (v254 != v263);
  }
LABEL_301:
  v303 = &unk_2707171D8;
  v308 = &unk_2707171D8;
  if (v231 && v312) {
    MEMORY[0x25A2D62A0](v231, 0x1000C8000313F17, a7);
  }
  v314 = &unk_2707171D8;
  if (v315 && v318) {
    MEMORY[0x25A2D62A0]();
  }
  return 0;
}

void sub_25908C578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  Matrix<double>::~Matrix(v41 - 232);
  Matrix<double>::~Matrix(v41 - 192);
  _Unwind_Resume(a1);
}

void sub_25908C610()
{
}

void sub_25908C65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  if (a24)
  {
    operator delete(a24);
    if (!a28)
    {
LABEL_3:
      if (!v29) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!a28)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if (!v29)
  {
LABEL_4:
    if (!v28) {
      goto LABEL_5;
    }
    goto LABEL_9;
  }
LABEL_8:
  operator delete(v29);
  if (!v28) {
LABEL_5:
  }
    _Unwind_Resume(a1);
LABEL_9:
  operator delete(v28);
  _Unwind_Resume(a1);
}

void sub_25908CED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_25908D0C8()
{
}

void sub_25908D0D0()
{
}

void sub_25908D0EC()
{
}

void sub_25908EACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_25908F168()
{
}

void sub_25908F170()
{
}

void sub_25908F178()
{
}

void sub_25908F180()
{
}

void sub_25908F188()
{
}

void sub_25908F190()
{
}

void sub_25908F198()
{
}

void sub_25908F1A0()
{
}

void sub_25908F1A8()
{
}

void sub_25908F1B0()
{
}

void sub_25908F1B8()
{
}

void sub_25908F2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25908F4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25908FE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_259090054()
{
}

void sub_25909005C()
{
}

void sub_259090064()
{
}

void sub_259090604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2590906C8()
{
}

void sub_259090988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, id a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_259090BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_259090D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2590918B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, id a17, void *a18, void *a19, void *a20,void *a21,uint64_t a22,void *a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_25909270C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, id a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19)
{
  _Unwind_Resume(a1);
}

void sub_259093288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, id a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_259093AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_259094E60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, id a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

void sub_259095398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_259095564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_259095618(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_2590956E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_25909583C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_259095900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590959CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_259095ACC(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_259095C28(_Unwind_Exception *a1)
{
  unint64_t v8 = v7;

  _Unwind_Resume(a1);
}

void sub_259095C70()
{
}

void sub_259095C78()
{
}

void sub_259095C80()
{
}

void sub_259095C88()
{
}

void sub_259095D80(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_259095F24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFData *peridot::CalibManager::createIspFirmwareCalibV3(peridot::CalibManager *this, _PeridotCalib *a2, const __CFDictionary *a3)
{
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1104);
  long long v6 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 1104);
    MutableBytePtr = CFDataGetMutableBytePtr(v6);
    bzero(MutableBytePtr, 0x450uLL);
    peridot::CalibManager::getFwSpotLocations((uint64_t)this, a2, (float32x4_t *)__src);
    *(_DWORD *)MutableBytePtr = 3;
    long long v8 = *(_OWORD *)((char *)this + 8);
    long long v9 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(MutableBytePtr + 40) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(MutableBytePtr + 24) = v9;
    *(_OWORD *)(MutableBytePtr + 8) = v8;
    long long v10 = *(_OWORD *)((char *)this + 56);
    long long v11 = *(_OWORD *)((char *)this + 72);
    long long v12 = *(_OWORD *)((char *)this + 88);
    *((_DWORD *)MutableBytePtr + 26) = *((_DWORD *)this + 26);
    *(_OWORD *)(MutableBytePtr + 88) = v12;
    *(_OWORD *)(MutableBytePtr + 72) = v11;
    *(_OWORD *)(MutableBytePtr + 56) = v10;
    long long v13 = *(_OWORD *)((char *)this + 346204);
    long long v14 = *(_OWORD *)((char *)this + 346220);
    *((_OWORD *)MutableBytePtr + 65) = *(_OWORD *)((char *)this + 346232);
    *(_OWORD *)(MutableBytePtr + 1012) = v13;
    *(_OWORD *)(MutableBytePtr + 1028) = v14;
    long long v15 = *(_OWORD *)((char *)this + 346204);
    long long v16 = *(_OWORD *)((char *)this + 346220);
    *(_OWORD *)(MutableBytePtr + 1084) = *(_OWORD *)((char *)this + 346232);
    *((_OWORD *)MutableBytePtr + 67) = v16;
    *((_OWORD *)MutableBytePtr + 66) = v15;
    memcpy(MutableBytePtr + 108, __src, 0x388uLL);
  }
  return v6;
}

void peridot::PeridotDepth::~PeridotDepth(peridot::PeridotDepth *this)
{
  uint64_t v2 = 2688;
  do
  {
    uint64_t v3 = (char *)this + v2;
    unsigned int v4 = *(void **)((char *)this + v2 - 32);
    if (v4)
    {
      *((void *)v3 - 3) = v4;
      operator delete(v4);
    }
    unsigned int v5 = (void *)*((void *)v3 - 8);
    if (v5)
    {
      *(void *)((char *)this + v2 - 56) = v5;
      operator delete(v5);
    }
    long long v6 = (char *)this + v2;
    long long v7 = *(void **)((char *)this + v2 - 96);
    if (v7)
    {
      *((void *)v6 - 11) = v7;
      operator delete(v7);
    }
    long long v8 = (void *)*((void *)v6 - 16);
    if (v8)
    {
      *(void *)((char *)this + v2 - 120) = v8;
      operator delete(v8);
    }
    long long v9 = *(void **)((char *)this + v2 - 160);
    if (v9)
    {
      *(void *)((char *)this + v2 - 152) = v9;
      operator delete(v9);
    }
    long long v10 = (void *)*((void *)v3 - 24);
    if (v10)
    {
      *(void *)((char *)this + v2 - 184) = v10;
      operator delete(v10);
    }
    v2 -= 192;
  }
  while (v2);
}

void sub_2590962DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  long long v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)PDDepthProcessor;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

double peridot::PeridotUserOutput::PeridotUserOutput(peridot::PeridotUserOutput *this)
{
  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_DWORD *)this + 115) = 0;
  *((_DWORD *)this + 136) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_DWORD *)this + 189) = 0;
  *((_DWORD *)this + 210) = 0;
  *((_DWORD *)this + 242) = 0;
  *((_DWORD *)this + 263) = 0;
  *((_DWORD *)this + 284) = 0;
  *((_DWORD *)this + 316) = 0;
  *((_DWORD *)this + 337) = 0;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 390) = 0;
  *((_DWORD *)this + 411) = 0;
  *((_DWORD *)this + 432) = 0;
  *((_DWORD *)this + 464) = 0;
  *((_DWORD *)this + 485) = 0;
  *((_DWORD *)this + 506) = 0;
  *((_DWORD *)this + 538) = 0;
  *((_DWORD *)this + 559) = 0;
  *((_DWORD *)this + 580) = 0;
  *((_DWORD *)this + 612) = 0;
  *((_DWORD *)this + 633) = 0;
  *((_DWORD *)this + 654) = 0;
  *((_DWORD *)this + 686) = 0;
  *((_DWORD *)this + 707) = 0;
  *((_DWORD *)this + 728) = 0;
  *((_DWORD *)this + 760) = 0;
  *((_DWORD *)this + 781) = 0;
  *((_DWORD *)this + 802) = 0;
  *((_DWORD *)this + 834) = 0;
  *((_DWORD *)this + 855) = 0;
  *((_DWORD *)this + 876) = 0;
  *((_DWORD *)this + 908) = 0;
  *((_DWORD *)this + 929) = 0;
  *((_DWORD *)this + 950) = 0;
  *((_DWORD *)this + 982) = 0;
  *((_DWORD *)this + 1003) = 0;
  *((_DWORD *)this + 1024) = 0;
  *((unsigned char *)this + 4144) = -1;
  *((_OWORD *)this + 264) = xmmword_259120090;
  *((_DWORD *)this + 1061) = 16843009;
  *((unsigned char *)this + 4248) = 0;
  *((_DWORD *)this + 1063) = 814313567;
  *((_DWORD *)this + 1066) = 808933364;
  double result = -0.0078125;
  *(_OWORD *)((char *)this + 4276) = xmmword_2591200A0;
  *(void *)((char *)this + 4292) = 0x40E000003F400000;
  *((_DWORD *)this + 1078) = 1065353216;
  *((_WORD *)this + 2162) = 256;
  *((unsigned char *)this + 4326) = 0;
  *((_DWORD *)this + 1082) = 1082130432;
  return result;
}

{
  double result;

  *((_DWORD *)this + 20) = 0;
  *((_DWORD *)this + 41) = 0;
  *((_DWORD *)this + 62) = 0;
  *((_DWORD *)this + 94) = 0;
  *((_DWORD *)this + 115) = 0;
  *((_DWORD *)this + 136) = 0;
  *((_DWORD *)this + 168) = 0;
  *((_DWORD *)this + 189) = 0;
  *((_DWORD *)this + 210) = 0;
  *((_DWORD *)this + 242) = 0;
  *((_DWORD *)this + 263) = 0;
  *((_DWORD *)this + 284) = 0;
  *((_DWORD *)this + 316) = 0;
  *((_DWORD *)this + 337) = 0;
  *((_DWORD *)this + 358) = 0;
  *((_DWORD *)this + 390) = 0;
  *((_DWORD *)this + 411) = 0;
  *((_DWORD *)this + 432) = 0;
  *((_DWORD *)this + 464) = 0;
  *((_DWORD *)this + 485) = 0;
  *((_DWORD *)this + 506) = 0;
  *((_DWORD *)this + 538) = 0;
  *((_DWORD *)this + 559) = 0;
  *((_DWORD *)this + 580) = 0;
  *((_DWORD *)this + 612) = 0;
  *((_DWORD *)this + 633) = 0;
  *((_DWORD *)this + 654) = 0;
  *((_DWORD *)this + 686) = 0;
  *((_DWORD *)this + 707) = 0;
  *((_DWORD *)this + 728) = 0;
  *((_DWORD *)this + 760) = 0;
  *((_DWORD *)this + 781) = 0;
  *((_DWORD *)this + 802) = 0;
  *((_DWORD *)this + 834) = 0;
  *((_DWORD *)this + 855) = 0;
  *((_DWORD *)this + 876) = 0;
  *((_DWORD *)this + 908) = 0;
  *((_DWORD *)this + 929) = 0;
  *((_DWORD *)this + 950) = 0;
  *((_DWORD *)this + 982) = 0;
  *((_DWORD *)this + 1003) = 0;
  *((_DWORD *)this + 1024) = 0;
  *((unsigned char *)this + 4144) = -1;
  *((_OWORD *)this + 264) = xmmword_259120090;
  *((_DWORD *)this + 1061) = 16843009;
  *((unsigned char *)this + 4248) = 0;
  *((_DWORD *)this + 1063) = 814313567;
  *((_DWORD *)this + 1066) = 808933364;
  double result = -0.0078125;
  *(_OWORD *)((char *)this + 4276) = xmmword_2591200A0;
  *(void *)((char *)this + 4292) = 0x40E000003F400000;
  *((_DWORD *)this + 1078) = 1065353216;
  *((_WORD *)this + 2162) = 256;
  *((unsigned char *)this + 4326) = 0;
  *((_DWORD *)this + 1082) = 1082130432;
  return result;
}

double peridot::PeridotUserOutput::SpotFilteringCFG::init(peridot::PeridotUserOutput::SpotFilteringCFG *this, float a2)
{
  *(float32x2_t *)((char *)this + 12) = vmul_n_f32((float32x2_t)0x3FC0000040400000, a2);
  float v2 = a2 * 2.3;
  *((float *)this + 6) = v2;
  *((float *)this + 7) = a2 + a2;
  *((_DWORD *)this + 16) = 1017370378;
  *((void *)this + 7) = 0x4009999A3FD9999ALL;
  double result = 4.60733979e-70;
  *((void *)this + 9) = 0x3189705F2FA4ED3FLL;
  return result;
}

void peridot::PeridotUserOutput::reset(peridot::PeridotUserOutput *this, char a2)
{
  uint64_t v3 = (char *)this + 4140;
  *((unsigned char *)this + 4144) = a2;
  bzero(this, 0x1030uLL);
  *((unsigned char *)this + 588) = 1;
  *((unsigned char *)this + 884) = 2;
  *((unsigned char *)this + 1180) = 3;
  *((unsigned char *)this + 1476) = 4;
  *((unsigned char *)this + 1772) = 5;
  *((unsigned char *)this + 2068) = 6;
  *((unsigned char *)this + 2364) = 7;
  *((unsigned char *)this + 2660) = 8;
  *((unsigned char *)this + 2956) = 9;
  *((unsigned char *)this + 3252) = 10;
  *((unsigned char *)this + 3548) = 11;
  *((unsigned char *)this + 3844) = 12;
  *uint64_t v3 = 13;
}

float peridot::PeridotUserOutput::init(peridot::PeridotUserOutput *this, char a2, unint64_t *a3, float a4)
{
  long long v6 = (char *)this + 4140;
  *((unsigned char *)this + 4144) = a2;
  bzero(this, 0x1030uLL);
  *((unsigned char *)this + 588) = 1;
  *((unsigned char *)this + 884) = 2;
  *((unsigned char *)this + 1180) = 3;
  *((unsigned char *)this + 1476) = 4;
  *((unsigned char *)this + 1772) = 5;
  *((unsigned char *)this + 2068) = 6;
  *((unsigned char *)this + 2364) = 7;
  *((unsigned char *)this + 2660) = 8;
  *((unsigned char *)this + 2956) = 9;
  *((unsigned char *)this + 3252) = 10;
  *((unsigned char *)this + 3548) = 11;
  *((unsigned char *)this + 3844) = 12;
  char *v6 = 13;
  *((void *)this + 519) = *a3;
  *((void *)this + 520) = a3[1];
  *((void *)this + 521) = a3[2];
  *((void *)this + 522) = a3[3];
  *((void *)this + 523) = a3[4];
  *((void *)this + 524) = a3[5];
  *((void *)this + 525) = a3[6];
  *((void *)this + 526) = a3[7];
  *((void *)this + 527) = a3[8];
  *((float *)this + 1060) = a4;
  *((float32x2_t *)this + 532) = vmul_n_f32((float32x2_t)0x3FC0000040400000, a4);
  float v7 = a4 * 2.3;
  *((float *)this + 1067) = v7;
  float result = a4 + a4;
  *((float *)this + 1068) = a4 + a4;
  *((_DWORD *)this + 1077) = 1017370378;
  *((void *)v6 + 20) = 0x4009999A3FD9999ALL;
  *(void *)((char *)this + 4316) = 0x3189705F2FA4ED3FLL;
  return result;
}

__n128 peridot::PeridotUserOutput::switchEchos(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 + 84 * a3;
  long long v19 = *(_OWORD *)(v4 + 16);
  int v20 = *(_DWORD *)(v4 + 32);
  uint64_t v5 = a2 + 84 * a4;
  __n128 v16 = *(__n128 *)v5;
  long long v17 = *(_OWORD *)(v5 + 16);
  int v18 = *(_DWORD *)(v5 + 32);
  int v6 = *(_DWORD *)(v4 + 80);
  int v7 = *(_DWORD *)(v5 + 80);
  long long v13 = *(_OWORD *)(v4 + 32);
  long long v14 = *(_OWORD *)(v4 + 48);
  long long v15 = *(_OWORD *)(v4 + 64);
  __n128 v12 = *(__n128 *)v4;
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v17;
  long long v9 = *(_OWORD *)(v5 + 48);
  long long v8 = *(_OWORD *)(v5 + 64);
  long long v10 = *(_OWORD *)(v5 + 32);
  *(_DWORD *)(v4 + 80) = *(_DWORD *)(v5 + 80);
  *(_OWORD *)(v4 + 48) = v9;
  *(_OWORD *)(v4 + 64) = v8;
  *(_OWORD *)(v4 + 32) = v10;
  *(__n128 *)uint64_t v5 = v12;
  *(_OWORD *)(v5 + 16) = v19;
  *(_DWORD *)(v5 + 80) = v6;
  *(_OWORD *)(v5 + 48) = v14;
  *(_OWORD *)(v5 + 64) = v15;
  *(_OWORD *)(v5 + 32) = v13;
  *(__n128 *)uint64_t v4 = v16;
  *(_OWORD *)(v4 + 16) = v17;
  *(_DWORD *)(v4 + 32) = v18;
  __n128 result = v12;
  *(_DWORD *)(v5 + 32) = v20;
  *(__n128 *)uint64_t v5 = v12;
  *(_OWORD *)(v5 + 16) = v19;
  *(_DWORD *)(v4 + 80) = v7;
  *(_DWORD *)(v5 + 80) = v6;
  return result;
}

char *std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(char *result, char *a2, uint64_t *a3, unint64_t a4, uint64_t *a5)
{
  if (!a4) {
    return result;
  }
  uint64_t v5 = a5;
  int v7 = result;
  if (a4 == 1)
  {
LABEL_9:
    uint64_t *v5 = *(void *)v7;
    return result;
  }
  if (a4 == 2)
  {
    uint64_t v10 = *((void *)a2 - 1);
    float v11 = *(float *)(*a3 + 4 * v10);
    float v12 = *(float *)(*a3 + 4 * *(void *)result);
    if (fabsf(v11 + -1.0) < 0.000001 && fabsf(v12 + -1.0) < 0.000001 || v11 <= v12)
    {
      uint64_t v10 = *(void *)result;
      int v7 = a2 - 8;
    }
    *a5 = v10;
    uint64_t v5 = a5 + 1;
    goto LABEL_9;
  }
  if ((uint64_t)a4 <= 8)
  {
    if (result == a2) {
      return result;
    }
    uint64_t v13 = *a3;
    long long v14 = result + 8;
    *a5 = *(void *)result;
    if (result + 8 == a2) {
      return result;
    }
    uint64_t v15 = 0;
    __n128 v16 = a5;
    long long v17 = a5;
LABEL_18:
    uint64_t v20 = *v17++;
    uint64_t v19 = v20;
    float v21 = *(float *)(v13 + 4 * *(void *)v14);
    float v22 = *(float *)(v13 + 4 * v20);
    if (fabsf(v21 + -1.0) >= 0.000001)
    {
      if (v21 <= v22) {
        goto LABEL_34;
      }
    }
    else if (fabsf(v22 + -1.0) < 0.000001 || v21 <= v22)
    {
LABEL_34:
      *long long v17 = *(void *)v14;
      goto LABEL_17;
    }
    v16[1] = v19;
    int v18 = a5;
    if (v16 == a5) {
      goto LABEL_16;
    }
    uint64_t v24 = v15;
    while (1)
    {
      uint64_t v26 = *(uint64_t *)((char *)a5 + v24 - 8);
      float v27 = *(float *)(v13 + 4 * *(void *)v14);
      float v28 = *(float *)(v13 + 4 * v26);
      if (fabsf(v27 + -1.0) < 0.000001)
      {
        if (fabsf(v28 + -1.0) < 0.000001 || v27 <= v28)
        {
          int v18 = (uint64_t *)((char *)a5 + v24);
LABEL_16:
          *int v18 = *(void *)v14;
LABEL_17:
          v14 += 8;
          v15 += 8;
          __n128 v16 = v17;
          if (v14 == a2) {
            return result;
          }
          goto LABEL_18;
        }
      }
      else if (v27 <= v28)
      {
        int v18 = v16;
        goto LABEL_16;
      }
      --v16;
      *(uint64_t *)((char *)a5 + v24) = v26;
      v24 -= 8;
      if (!v24)
      {
        int v18 = a5;
        goto LABEL_16;
      }
    }
  }
  unint64_t v29 = a4 >> 1;
  uint64_t v30 = 8 * (a4 >> 1);
  float v31 = &result[v30];
  std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(result, &result[v30], a3, a4 >> 1, a5, a4 >> 1);
  __n128 result = (char *)std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(&v7[v30], a2, a3, a4 - v29, &v5[(unint64_t)v30 / 8], a4 - v29);
  uint64_t v32 = *a3;
  uint64_t v33 = -1;
  long double v34 = v5;
  uint64_t v35 = v7;
  uint64_t v36 = &v7[v30];
  do
  {
    if (v36 == a2)
    {
      if (v35 == v31) {
        return result;
      }
      unint64_t v40 = &v7[8 * v29] - v35 - 8;
      if (v40 >= 0x38)
      {
        if ((unint64_t)((char *)&v5[v33 + 1] - v35) >= 0x20)
        {
          uint64_t v44 = 0;
          uint64_t v45 = (v40 >> 3) + 1;
          uint64_t v46 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v41 = &v34[v46];
          uint64_t v47 = v45 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v48 = &v34[v44];
            long long v49 = *(_OWORD *)&v35[v44 * 8 + 16];
            *(_OWORD *)v48 = *(_OWORD *)&v35[v44 * 8];
            *((_OWORD *)v48 + 1) = v49;
            v44 += 4;
            v47 -= 4;
          }
          while (v47);
          if (v45 == (v45 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
          v35 += v46 * 8;
        }
        else
        {
          uint64_t v41 = v34;
        }
      }
      else
      {
        uint64_t v41 = v34;
      }
      do
      {
        uint64_t v50 = *(void *)v35;
        v35 += 8;
        *v41++ = v50;
      }
      while (v35 != v31);
      return result;
    }
    float v37 = *(float *)(v32 + 4 * *(void *)v36);
    float v38 = *(float *)(v32 + 4 * *(void *)v35);
    if (fabsf(v37 + -1.0) >= 0.000001)
    {
      if (v37 > v38) {
        goto LABEL_37;
      }
    }
    else if (fabsf(v38 + -1.0) >= 0.000001 && v37 > v38)
    {
LABEL_37:
      *long double v34 = *(void *)v36;
      v36 += 8;
      goto LABEL_38;
    }
    *long double v34 = *(void *)v35;
    v35 += 8;
LABEL_38:
    ++v34;
    ++v33;
  }
  while (v35 != v31);
  if (v36 == a2) {
    return result;
  }
  unint64_t v42 = a2 - v36 - 8;
  if (v42 < 0x48)
  {
    unsigned int v43 = v34;
    goto LABEL_69;
  }
  if ((unint64_t)((char *)&v5[v33] - v36 + 8) < 0x20)
  {
    unsigned int v43 = v34;
    goto LABEL_69;
  }
  uint64_t v51 = 0;
  uint64_t v52 = (v42 >> 3) + 1;
  uint64_t v53 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  unsigned int v43 = &v34[v53];
  uint64_t v54 = v52 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    uint64_t v55 = &v34[v51];
    long long v56 = *(_OWORD *)&v36[v51 * 8 + 16];
    *(_OWORD *)uint64_t v55 = *(_OWORD *)&v36[v51 * 8];
    *((_OWORD *)v55 + 1) = v56;
    v51 += 4;
    v54 -= 4;
  }
  while (v54);
  if (v52 != (v52 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v36 += v53 * 8;
    do
    {
LABEL_69:
      uint64_t v57 = *(void *)v36;
      v36 += 8;
      *v43++ = v57;
    }
    while (v36 != a2);
  }
  return result;
}

uint64_t *std::__inplace_merge<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(uint64_t *result, uint64_t *a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  float v12 = result;
  do
  {
    if (v9 <= a8 || a5 <= a8)
    {
      if (a5 > v9)
      {
        if (a2 == a3) {
          return result;
        }
        float64x2_t v72 = (char *)(a3 - 1);
        unint64_t v73 = (char *)(a3 - 1) - (char *)a2;
        uint64_t v74 = a7;
        uint64_t v75 = a2;
        if (v73 >= 0x18)
        {
          uint64_t v74 = a7;
          uint64_t v75 = a2;
          if ((unint64_t)(a7 - (char *)a2) > 0x1F)
          {
            uint64_t v76 = (v73 >> 3) + 1;
            uint64_t v77 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v74 = &a7[v77 * 8];
            int v78 = (long long *)(a2 + 2);
            uint64_t v79 = a7 + 16;
            uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v81 = *v78;
              *(v79 - 1) = *(v78 - 1);
              *uint64_t v79 = v81;
              v78 += 2;
              v79 += 2;
              v80 -= 4;
            }
            while (v80);
            if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_93;
            }
            uint64_t v75 = &a2[v77];
          }
        }
        do
        {
          uint64_t v82 = *v75++;
          *(void *)uint64_t v74 = v82;
          v74 += 8;
        }
        while (v75 != a3);
LABEL_93:
        if (v74 == a7) {
          return result;
        }
        uint64_t v83 = 0;
        uint64_t v84 = *a4;
        while (1)
        {
          if (a2 == v12)
          {
            unint64_t v104 = v74 - a7 - 8;
            if (v104 >= 0x58 && (unint64_t)(v74 - v72 + 8 * v83 - 8) >= 0x20)
            {
              uint64_t v108 = 0;
              uint64_t v109 = (v104 >> 3) + 1;
              uint64_t v105 = &v74[-8 * (v109 & 0x3FFFFFFFFFFFFFFCLL)];
              uint64_t v110 = v109 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v111 = *(_OWORD *)&v74[v108 * 8 - 16];
                double v112 = &a3[v108];
                *((_OWORD *)v112 - 2) = *(_OWORD *)&v74[v108 * 8 - 32];
                *((_OWORD *)v112 - 1) = v111;
                v108 -= 4;
                v110 -= 4;
              }
              while (v110);
              if (v109 != (v109 & 0x3FFFFFFFFFFFFFFCLL))
              {
                a3 -= v109 & 0x3FFFFFFFFFFFFFFCLL;
                goto LABEL_132;
              }
            }
            else
            {
              uint64_t v105 = v74;
LABEL_132:
              uint64_t v106 = a3 - 1;
              do
              {
                uint64_t v107 = *((void *)v105 - 1);
                v105 -= 8;
                *v106-- = v107;
              }
              while (v105 != a7);
            }
            return result;
          }
          uint64_t v86 = a2 - 1;
          uint64_t v85 = *(a2 - 1);
          float v87 = *(float *)(v84 + 4 * *((void *)v74 - 1));
          float v88 = *(float *)(v84 + 4 * v85);
          if (fabsf(v87 + -1.0) >= 0.000001)
          {
            if (v87 > v88) {
              goto LABEL_96;
            }
          }
          else if (fabsf(v88 + -1.0) >= 0.000001 && v87 > v88)
          {
            goto LABEL_96;
          }
          uint64_t v85 = *((void *)v74 - 1);
          uint64_t v86 = a2;
          v74 -= 8;
LABEL_96:
          *--a3 = v85;
          ++v83;
          a2 = v86;
          if (v74 == a7) {
            return result;
          }
        }
      }
      if (v12 == a2) {
        return result;
      }
      unint64_t v90 = (char *)a2 - (char *)v12 - 8;
      v91 = a7;
      v92 = v12;
      if (v90 >= 0x18)
      {
        v91 = a7;
        v92 = v12;
        if ((unint64_t)(a7 - (char *)v12) > 0x1F)
        {
          uint64_t v93 = (v90 >> 3) + 1;
          uint64_t v94 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          v91 = &a7[v94 * 8];
          v95 = (long long *)(v12 + 2);
          uint64_t v96 = a7 + 16;
          uint64_t v97 = v93 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v98 = *v95;
            *(v96 - 1) = *(v95 - 1);
            _OWORD *v96 = v98;
            v95 += 2;
            v96 += 2;
            v97 -= 4;
          }
          while (v97);
          if (v93 == (v93 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_114;
          }
          v92 = &v12[v94];
        }
      }
      do
      {
        uint64_t v99 = *v92++;
        *(void *)v91 = v99;
        v91 += 8;
      }
      while (v92 != a2);
LABEL_114:
      if (v91 == a7) {
        return result;
      }
      uint64_t v100 = *a4;
      while (1)
      {
        if (a2 == a3)
        {
          return (uint64_t *)memmove(v12, a7, v91 - a7);
        }
        float v101 = *(float *)(v100 + 4 * *a2);
        float v102 = *(float *)(v100 + 4 * *(void *)a7);
        if (fabsf(v101 + -1.0) >= 0.000001)
        {
          if (v101 <= v102) {
            goto LABEL_127;
          }
        }
        else if (fabsf(v102 + -1.0) < 0.000001 || v101 <= v102)
        {
LABEL_127:
          *float v12 = *(void *)a7;
          a7 += 8;
          goto LABEL_117;
        }
        *float v12 = *a2++;
LABEL_117:
        ++v12;
        if (a7 == v91) {
          return result;
        }
      }
    }
    if (!a5) {
      break;
    }
    uint64_t v13 = *a4;
    float v14 = *(float *)(*a4 + 4 * *a2);
    if (fabsf(v14 + -1.0) >= 0.000001)
    {
      while (1)
      {
        uint64_t v15 = *v12;
        if (v14 > *(float *)(v13 + 4 * *v12)) {
          break;
        }
        ++v12;
        if (!--a5) {
          return result;
        }
      }
    }
    else
    {
      while (1)
      {
        uint64_t v15 = *v12;
        float v16 = *(float *)(v13 + 4 * *v12);
        char v17 = fabsf(v16 + -1.0) < 0.000001 || v14 <= v16;
        if (!v17) {
          break;
        }
        ++v12;
        if (!--a5) {
          return result;
        }
      }
    }
    if (a5 >= v9)
    {
      if (a5 == 1)
      {
        *float v12 = *a2;
        *a2 = v15;
        return result;
      }
      uint64_t v33 = a5 >= 0 ? a5 : a5 + 1;
      uint64_t v34 = v33 >> 1;
      uint64_t v23 = &v12[v33 >> 1];
      if (a3 == a2)
      {
        uint64_t v45 = a3;
        uint64_t v20 = a3;
      }
      else
      {
        float v35 = *(float *)(v13 + 4 * *v23);
        unint64_t v36 = a3 - a2;
        uint64_t v20 = a2;
        if (fabsf(v35 + -1.0) < 0.000001)
        {
          do
          {
            unint64_t v41 = v36 >> 1;
            unint64_t v42 = &v20[v36 >> 1];
            uint64_t v44 = *v42;
            unsigned int v43 = v42 + 1;
            v36 += ~(v36 >> 1);
            if (fabsf(*(float *)(v13 + 4 * v44) + -1.0) >= 0.000001 && *(float *)(v13 + 4 * v44) > v35) {
              uint64_t v20 = v43;
            }
            else {
              unint64_t v36 = v41;
            }
          }
          while (v36);
        }
        else
        {
          do
          {
            unint64_t v37 = v36 >> 1;
            float v38 = &v20[v36 >> 1];
            uint64_t v40 = *v38;
            unint64_t v39 = v38 + 1;
            v36 += ~(v36 >> 1);
            if (*(float *)(v13 + 4 * v40) > v35) {
              uint64_t v20 = v39;
            }
            else {
              unint64_t v36 = v37;
            }
          }
          while (v36);
        }
        uint64_t v45 = a2;
      }
      uint64_t v19 = v20 - v45;
    }
    else
    {
      uint64_t v18 = v9 >= 0 ? v9 : v9 + 1;
      uint64_t v19 = v18 >> 1;
      uint64_t v20 = &a2[v18 >> 1];
      if (a2 == v12)
      {
        uint64_t v32 = a2;
        uint64_t v23 = a2;
      }
      else
      {
        unint64_t v21 = a2 - v12;
        float v22 = *(float *)(v13 + 4 * *v20);
        uint64_t v23 = v12;
        if (fabsf(v22 + -1.0) >= 0.000001)
        {
          do
          {
            unint64_t v28 = v21 >> 1;
            unint64_t v29 = &v23[v21 >> 1];
            uint64_t v31 = *v29;
            uint64_t v30 = v29 + 1;
            v21 += ~(v21 >> 1);
            if (v22 > *(float *)(v13 + 4 * v31)) {
              unint64_t v21 = v28;
            }
            else {
              uint64_t v23 = v30;
            }
          }
          while (v21);
        }
        else
        {
          do
          {
            unint64_t v24 = v21 >> 1;
            unint64_t v25 = &v23[v21 >> 1];
            uint64_t v27 = *v25;
            uint64_t v26 = v25 + 1;
            v21 += ~(v21 >> 1);
            if (fabsf(*(float *)(v13 + 4 * v27) + -1.0) >= 0.000001 && v22 > *(float *)(v13 + 4 * v27)) {
              unint64_t v21 = v24;
            }
            else {
              uint64_t v23 = v26;
            }
          }
          while (v21);
        }
        uint64_t v32 = v12;
      }
      uint64_t v34 = v23 - v32;
    }
    uint64_t v46 = v20;
    if (v23 != a2)
    {
      uint64_t v46 = v23;
      if (a2 != v20)
      {
        if (v23 + 1 == a2)
        {
          uint64_t v113 = *v23;
          long double v115 = a3;
          int64_t v54 = (char *)v20 - (char *)a2;
          uint64_t v55 = a4;
          memmove(v23, a2, (char *)v20 - (char *)a2);
          a4 = v55;
          a3 = v115;
          uint64_t v46 = (uint64_t *)((char *)v23 + v54);
          uint64_t *v46 = v113;
        }
        else if (a2 + 1 == v20)
        {
          uint64_t v56 = *(v20 - 1);
          uint64_t v46 = v23 + 1;
          if (v20 - 1 != v23)
          {
            uint64_t v114 = *(v20 - 1);
            unsigned int v116 = a3;
            uint64_t v57 = a4;
            memmove(v23 + 1, v23, (char *)(v20 - 1) - (char *)v23);
            uint64_t v56 = v114;
            a3 = v116;
            a4 = v57;
          }
          *uint64_t v23 = v56;
        }
        else
        {
          uint64_t v47 = a2 - v23;
          uint64_t v48 = v20 - a2;
          if (v47 == v48)
          {
            uint64_t v49 = 0;
            do
            {
              uint64_t v50 = v23[v49];
              v23[v49] = a2[v49];
              uint64_t v51 = (uint64_t)&v23[v49 + 1];
              a2[v49] = v50;
              uint64_t v52 = (uint64_t)&a2[++v49];
            }
            while ((uint64_t *)v51 != a2 && v52 != (void)v20);
            uint64_t v46 = a2;
          }
          else
          {
            uint64_t v58 = v20 - a2;
            uint64_t v59 = a2 - v23;
            do
            {
              uint64_t v60 = v59;
              uint64_t v59 = v58;
              uint64_t v58 = v60 % v58;
            }
            while (v58);
            if (v59)
            {
              uint64_t v61 = &v23[v59];
              do
              {
                uint64_t v63 = *--v61;
                uint64_t v62 = v63;
                double v64 = &v61[v47];
                int v65 = v61;
                do
                {
                  uint64_t v66 = v65;
                  int v65 = v64;
                  *uint64_t v66 = *v64;
                  uint64_t v67 = v20 - v64;
                  BOOL v68 = __OFSUB__(v47, v67);
                  uint64_t v69 = v47 - v67;
                  char v17 = (v69 < 0) ^ v68;
                  double v64 = &v23[v69];
                  if (v17) {
                    double v64 = &v65[v47];
                  }
                }
                while (v64 != v61);
                *int v65 = v62;
              }
              while (v61 != v23);
            }
            uint64_t v46 = &v23[v48];
          }
        }
      }
    }
    a5 -= v34;
    v9 -= v19;
    unint64_t v70 = a4;
    if (v34 + v19 >= a5 + v9)
    {
      __n128 result = (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(v46, v20, a3);
      uint64_t v20 = v23;
      uint64_t v9 = v19;
      a5 = v34;
      a3 = v46;
    }
    else
    {
      unint64_t v71 = a3;
      __n128 result = (uint64_t *)std::__inplace_merge<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(v12, v23, v46);
      a3 = v71;
      float v12 = v46;
    }
    a2 = v20;
    a4 = v70;
  }
  while (v9);
  return result;
}

void peridot::PeridotUserOutput::fusedTofNormal(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, float *a7, _DWORD *a8)
{
  uint64_t v9 = *a4;
  uint64_t v8 = a4[1];
  if (v8 == *a4)
  {
    unint64_t v30 = 0;
    uint64_t v13 = 0;
    LODWORD(v33) = 1;
    goto LABEL_47;
  }
  uint64_t v89 = a5;
  uint64_t v90 = a6;
  v91 = a2;
  v92 = a7;
  uint64_t v93 = a8;
  uint64_t v10 = 0;
  float v11 = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  float v14 = 0.0;
  do
  {
    float v15 = *(float *)(v9 + 4 * v12) * *(float *)(v9 + 4 * v12);
    if (v10 < v11)
    {
      *v10++ = v15;
      goto LABEL_4;
    }
    uint64_t v16 = ((char *)v10 - (char *)v13) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v11 - (char *)v13) >> 1 > v17) {
      unint64_t v17 = ((char *)v11 - (char *)v13) >> 1;
    }
    if ((unint64_t)((char *)v11 - (char *)v13) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18)
    {
      if (v18 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v19 = operator new(4 * v18);
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (float *)&v19[4 * v16];
    *uint64_t v20 = v15;
    unint64_t v21 = v20 + 1;
    if (v10 != (float *)v13)
    {
      unint64_t v22 = (char *)(v10 - 1) - (char *)v13;
      if (v22 >= 0xBC)
      {
        if (&v19[(char *)v10 - (char *)v13 - 4 - (v22 & 0xFFFFFFFFFFFFFFFCLL)] > &v19[(char *)v10 - (char *)v13 - 4])
        {
          uint64_t v23 = v10;
        }
        else if ((float *)((char *)v10 - (v22 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v10 - 1)
        {
          uint64_t v23 = v10;
        }
        else if ((unint64_t)((char *)v13 - v19) >= 0x20)
        {
          uint64_t v25 = (v22 >> 2) + 1;
          uint64_t v23 = &v10[-(v25 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v26 = &v19[4 * v16 - 16];
          uint64_t v27 = v10 - 4;
          uint64_t v28 = v25 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v29 = *(_OWORD *)v27;
            *(v26 - 1) = *((_OWORD *)v27 - 1);
            *uint64_t v26 = v29;
            v26 -= 2;
            v27 -= 8;
            v28 -= 8;
          }
          while (v28);
          v20 -= v25 & 0x7FFFFFFFFFFFFFF8;
          if (v25 == (v25 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_20;
          }
        }
        else
        {
          uint64_t v23 = v10;
        }
      }
      else
      {
        uint64_t v23 = v10;
      }
      do
      {
        int v24 = *((_DWORD *)v23-- - 1);
        *((_DWORD *)v20-- - 1) = v24;
      }
      while (v23 != (float *)v13);
    }
LABEL_20:
    float v11 = (float *)&v19[4 * v18];
    if (v13)
    {
      operator delete(v13);
      uint64_t v9 = *a4;
      uint64_t v8 = a4[1];
    }
    uint64_t v13 = (float32x4_t *)v20;
    uint64_t v10 = v21;
LABEL_4:
    float v14 = v15 + v14;
    ++v12;
  }
  while (v12 < (v8 - v9) >> 2);
  unint64_t v30 = ((char *)v10 - (char *)v13) >> 2;
  if (v10 == (float *)v13)
  {
    LODWORD(v33) = 1;
    a7 = v92;
    a8 = v93;
    a6 = v90;
    a2 = v91;
    a5 = v89;
  }
  else
  {
    if (v30 <= 1) {
      unint64_t v31 = 1;
    }
    else {
      unint64_t v31 = ((char *)v10 - (char *)v13) >> 2;
    }
    if (v31 <= 7)
    {
      unint64_t v32 = 0;
      a7 = v92;
      a8 = v93;
      a6 = v90;
      a2 = v91;
      a5 = v89;
      goto LABEL_45;
    }
    unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v34 = v13 + 1;
    unint64_t v35 = v31 & 0xFFFFFFFFFFFFFFF8;
    float v36 = 1.0 / v14;
    do
    {
      float32x4_t v37 = vmulq_n_f32(*v34, v36);
      v34[-1] = vmulq_n_f32(v34[-1], v36);
      *uint64_t v34 = v37;
      v34 += 2;
      v35 -= 8;
    }
    while (v35);
    a7 = v92;
    a8 = v93;
    a6 = v90;
    a2 = v91;
    a5 = v89;
    if (v31 == v32)
    {
      LODWORD(v33) = 0;
    }
    else
    {
LABEL_45:
      unint64_t v33 = v31 - v32;
      float v38 = &v13->f32[v32];
      do
      {
        *float v38 = *v38 * (float)(1.0 / v14);
        ++v38;
        --v33;
      }
      while (v33);
    }
  }
LABEL_47:
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(_DWORD *)(a6 + 24) = 0;
  *(void *)(a6 + 16) = 0;
  unint64_t v39 = *(uint64_t **)a5;
  uint64_t v40 = *(void *)(a5 + 8) - *(void *)a5;
  if (v40)
  {
    unint64_t v41 = v40 >> 3;
    if (v41 <= 1) {
      unint64_t v41 = 1;
    }
    unint64_t v42 = v13;
    do
    {
      __int32 v43 = v42->i32[0];
      unint64_t v42 = (float32x4_t *)((char *)v42 + 4);
      int v44 = v43;
      uint64_t v45 = *v39++;
      *(_DWORD *)(a6 + 4 * v45) = v44;
      --v41;
    }
    while (v41);
  }
  if (v33)
  {
    uint64_t v46 = (float32x4_t *)*a2;
    goto LABEL_79;
  }
  if (v30 <= 1) {
    unint64_t v30 = 1;
  }
  if (v30 <= 7)
  {
    unint64_t v47 = 0;
    LOBYTE(v48) = 0;
    goto LABEL_67;
  }
  if (v30 >= 0x20)
  {
    unint64_t v47 = v30 & 0xFFFFFFFFFFFFFFE0;
    uint64_t v49 = v13 + 4;
    int8x16_t v50 = 0uLL;
    unint64_t v51 = v30 & 0xFFFFFFFFFFFFFFE0;
    int8x16_t v52 = 0uLL;
    do
    {
      int8x16_t v50 = vornq_s8(v50, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[-4]), (int8x16_t)vcgezq_f32(v49[-4])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[-3]), (int8x16_t)vcgezq_f32(v49[-3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[-2]), (int8x16_t)vcgezq_f32(v49[-2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[-1]), (int8x16_t)vcgezq_f32(v49[-1])))));
      int8x16_t v52 = vornq_s8(v52, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(*v49), (int8x16_t)vcgezq_f32(*v49)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[1]), (int8x16_t)vcgezq_f32(v49[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[2]), (int8x16_t)vcgezq_f32(v49[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v49[3]), (int8x16_t)vcgezq_f32(v49[3])))));
      v49 += 8;
      v51 -= 32;
    }
    while (v51);
    LODWORD(v48) = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v50, v52), 7uLL))) & 1;
    if (v30 != v47)
    {
      if ((v30 & 0x18) == 0) {
        goto LABEL_67;
      }
      goto LABEL_64;
    }
  }
  else
  {
    LODWORD(v48) = 0;
    unint64_t v47 = 0;
LABEL_64:
    unint64_t v53 = v47;
    unint64_t v47 = v30 & 0xFFFFFFFFFFFFFFF8;
    int8x8_t v54 = vdup_n_s8(v48);
    unint64_t v55 = v53 - (v30 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v56 = (float32x4_t *)((char *)v13 + 4 * v53);
    do
    {
      float32x4_t v57 = *v56;
      float32x4_t v58 = v56[1];
      v56 += 2;
      int8x8_t v54 = vorr_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v57), (int8x16_t)vcgezq_f32(v57)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v58), (int8x16_t)vcgezq_f32(v58))))), v54);
      v55 += 8;
    }
    while (v55);
    uint64_t v48 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v54, 7uLL))) & 1;
    if (v30 != v47)
    {
LABEL_67:
      unint64_t v59 = v30 - v47;
      uint64_t v60 = &v13->i8[4 * v47];
      do
      {
        v60 += 4;
        --v59;
      }
      while (v59);
    }
  }
  uint64_t v46 = (float32x4_t *)*a2;
  if (v48)
  {
    int32x2_t v61 = 0;
    if (a2[1] - (void)v46 == 4) {
      *(float *)v61.i32 = 1.0;
    }
    if (v30 <= 7)
    {
      unint64_t v62 = 0;
      goto LABEL_77;
    }
    unint64_t v62 = v30 & 0xFFFFFFFFFFFFFFF8;
    int32x4_t v63 = vdupq_lane_s32(v61, 0);
    double v64 = (int32x4_t *)&v13[1];
    unint64_t v65 = v30 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v64[-1] = v63;
      *double v64 = v63;
      v64 += 2;
      v65 -= 8;
    }
    while (v65);
    if (v30 != v62)
    {
LABEL_77:
      unint64_t v66 = v30 - v62;
      uint64_t v67 = &v13->i32[v62];
      do
      {
        *v67++ = v61.i32[0];
        --v66;
      }
      while (v66);
    }
  }
LABEL_79:
  *a7 = 0.0;
  uint64_t v68 = a2[1] - (void)v46;
  if (v68)
  {
    unint64_t v69 = v68 >> 2;
    if (v69 <= 1) {
      unint64_t v69 = 1;
    }
    float v70 = 0.0;
    if (v69 <= 0xB)
    {
      unint64_t v71 = 0;
      goto LABEL_84;
    }
    unint64_t v71 = 0;
    uint64_t v79 = (float32x4_t *)(a7 + 1);
    BOOL v81 = &v13->f32[v69] > a7 && v13 < v79;
    if (v46 < v79 && &v46->f32[v69] > a7) {
      goto LABEL_84;
    }
    if (v81) {
      goto LABEL_84;
    }
    unint64_t v71 = v69 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v83 = v13 + 1;
    uint64_t v84 = v46 + 1;
    float32x4_t v85 = 0uLL;
    unint64_t v86 = v69 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v87 = 0uLL;
    do
    {
      float32x4_t v85 = vmlaq_f32(v85, v84[-1], v83[-1]);
      float32x4_t v87 = vmlaq_f32(v87, *v84, *v83);
      v83 += 2;
      v84 += 2;
      v86 -= 8;
    }
    while (v86);
    float32x4_t v88 = vaddq_f32(v87, v85);
    float v70 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v88, v88));
    *a7 = v70;
    if (v69 != v71)
    {
LABEL_84:
      unint64_t v72 = v69 - v71;
      uint64_t v73 = v71;
      uint64_t v74 = &v13->f32[v71];
      uint64_t v75 = &v46->f32[v73];
      do
      {
        float v76 = *v75++;
        float v77 = v76;
        float v78 = *v74++;
        float v70 = v70 + (float)(v78 * v77);
        *a7 = v70;
        --v72;
      }
      while (v72);
    }
    *a8 = 0;
LABEL_88:
    operator delete(v13);
  }
  else
  {
    *a8 = 0;
    if (v13) {
      goto LABEL_88;
    }
  }
}

void sub_259097B74(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void peridot::PeridotUserOutput::fusedTofByEmpiricalStd(uint64_t a1, char **a2, char **a3, char **a4, char **a5, uint64_t a6, float *a7, float *a8)
{
  uint64_t v8 = a8;
  uint64_t v293 = *MEMORY[0x263EF8340];
  unint64_t v12 = *a2;
  float v11 = a2[1];
  uint64_t v13 = v11 - *a2;
  size_t v14 = v13 >> 2;
  if (v11 != *a2)
  {
    size_t v15 = v14 - 1;
    if (v14 <= 1) {
      unint64_t v16 = 1;
    }
    else {
      unint64_t v16 = (v11 - v12) >> 2;
    }
    if (v16 > 7)
    {
      unint64_t v17 = v16 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v20 = (float32x4_t *)(v12 + 16);
      float32x4_t v21 = 0uLL;
      unint64_t v22 = v16 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v23 = 0uLL;
      do
      {
        float32x4_t v21 = vaddq_f32(v20[-1], v21);
        float32x4_t v23 = vaddq_f32(*v20, v23);
        v20 += 2;
        v22 -= 8;
      }
      while (v22);
      float32x4_t v24 = vaddq_f32(v23, v21);
      float v18 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24));
      if (v16 == v17) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v17 = 0;
      float v18 = 0.0;
    }
    unint64_t v25 = v16 - v17;
    uint64_t v26 = (float *)&v12[4 * v17];
    do
    {
      float v27 = *v26++;
      float v18 = v27 + v18;
      --v25;
    }
    while (v25);
LABEL_13:
    v271 = 0;
    uint64_t v272 = 0;
    uint64_t v273 = 0;
    if (v13 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v28 = v11;
    long long v29 = v12;
    size_t v31 = v15 >> 6;
    uint64_t v32 = (v15 >> 6) + 1;
    unint64_t v33 = operator new(8 * v32);
    uint64_t v272 = v13 >> 2;
    uint64_t v273 = v32;
    v271 = v33;
    if ((unint64_t)v13 >= 0x104) {
      size_t v34 = v31;
    }
    else {
      size_t v34 = 0;
    }
    v216 = v33;
    *((void *)v33 + v34) = 0;
    if ((unint64_t)v13 >= 0x100) {
      bzero(v33, 8 * (v14 >> 6));
    }
    float v19 = v18 / (float)v14;
    uint64_t v8 = a8;
    if (v13 >> 2) {
      v216[v14 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v13 >> 2));
    }
    unint64_t v12 = v29;
    float v11 = v28;
    goto LABEL_22;
  }
  v216 = 0;
  float v19 = 0.0 / (float)v14;
  v271 = 0;
  uint64_t v272 = 0;
  uint64_t v273 = 0;
LABEL_22:
  v268 = 0;
  v269 = 0;
  v270 = 0;
  float v265 = 0;
  v266 = 0;
  v267 = 0;
  float64x2_t v262 = 0;
  v263 = 0;
  double v264 = 0;
  float64x2_t v259 = 0;
  float64x2_t v260 = 0;
  float64x2_t v261 = 0;
  if (v19 >= 0.0000000015)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v268, v12, v11, v14);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v265, *a3, a3[1], (a3[1] - *a3) >> 2);
    std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v262, *a5, a5[1], (a5[1] - *a5) >> 3);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(&v259, *a4, a4[1], (a4[1] - *a4) >> 2);
    float v38 = (char *)v262;
    float32x4_t v37 = v263;
    goto LABEL_151;
  }
  if (v11 == v12)
  {
    uint64_t v150 = 0;
    unsigned int v128 = 0;
    float64x2_t v151 = 0;
    *a7 = 0.0;
    goto LABEL_237;
  }
  uint64_t v205 = a6;
  unsigned int v207 = a7;
  unsigned int v204 = v8;
  unint64_t v35 = 0;
  long double v209 = 0;
  uint64_t v210 = 0;
  float v36 = 0;
  float32x4_t v37 = 0;
  float v38 = 0;
  float64x2_t v223 = 0;
  double v225 = 0;
  long double v211 = 0;
  unint64_t v212 = 0;
  unint64_t v39 = 0;
  uint64_t v40 = 0;
  int v231 = 0;
  uint64_t v227 = 0;
  unint64_t v41 = 0;
  unint64_t v42 = 0;
  unsigned int v219 = 0;
  unint64_t v220 = 0;
  unint64_t v221 = 0;
  unint64_t v222 = 0;
  unint64_t v43 = 0;
  int v44 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  __p = 0;
  do
  {
    if (*(void *)&(*a5)[8 * v43] <= 0xAuLL)
    {
      *(void *)((char *)v216 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
      goto LABEL_26;
    }
    int v218 = v46;
    if ((unint64_t)v42 < v222)
    {
      *(_DWORD *)unint64_t v42 = *(_DWORD *)&v12[4 * v43];
      double v225 = v42 + 4;
      goto LABEL_49;
    }
    int64_t v47 = v42 - v44;
    uint64_t v48 = (v42 - v44) >> 2;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 62) {
      goto LABEL_277;
    }
    if ((uint64_t)(v222 - (void)v44) >> 1 > v49) {
      unint64_t v49 = (uint64_t)(v222 - (void)v44) >> 1;
    }
    if (v222 - (unint64_t)v44 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v50 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v50 = v49;
    }
    float64x2_t v235 = v45;
    if (v50)
    {
      int64_t v226 = v42 - v44;
      uint64_t v229 = (v42 - v44) >> 2;
      if (v50 >> 62) {
        goto LABEL_278;
      }
      unint64_t v51 = v42;
      int8x16_t v52 = v41;
      unint64_t v53 = v50;
      int8x8_t v54 = operator new(4 * v50);
      unint64_t v41 = v52;
      unint64_t v42 = v51;
      unint64_t v50 = v53;
      uint64_t v48 = v229;
      int64_t v47 = v226;
    }
    else
    {
      int8x8_t v54 = 0;
    }
    uint64_t v40 = &v54[4 * v48];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)&v12[4 * v43];
    double v225 = v40 + 4;
    if (v42 == v44)
    {
      uint64_t v45 = v235;
    }
    else
    {
      unint64_t v55 = v42 - 4 - v44;
      uint64_t v45 = v235;
      if (v55 >= 0xBC)
      {
        if (&v54[v47 - 4 - (v55 & 0xFFFFFFFFFFFFFFFCLL)] > &v54[v47 - 4])
        {
          uint64_t v56 = v42;
        }
        else if (&v42[-(v55 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v42 - 4)
        {
          uint64_t v56 = v42;
        }
        else if ((unint64_t)(v42 - &v54[v47]) >= 0x20)
        {
          uint64_t v110 = (v55 >> 2) + 1;
          uint64_t v56 = &v42[-4 * (v110 & 0x7FFFFFFFFFFFFFF8)];
          long long v111 = &v54[4 * v48 - 16];
          double v112 = v42 - 16;
          uint64_t v113 = v110 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v114 = *(_OWORD *)v112;
            *(v111 - 1) = *((_OWORD *)v112 - 1);
            _OWORD *v111 = v114;
            v111 -= 2;
            v112 -= 32;
            v113 -= 8;
          }
          while (v113);
          v40 -= 4 * (v110 & 0x7FFFFFFFFFFFFFF8);
          if (v110 == (v110 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_46;
          }
        }
        else
        {
          uint64_t v56 = v42;
        }
      }
      else
      {
        uint64_t v56 = v42;
      }
      do
      {
        int v57 = *((_DWORD *)v56 - 1);
        v56 -= 4;
        *((_DWORD *)v40 - 1) = v57;
        v40 -= 4;
      }
      while (v56 != v44);
    }
LABEL_46:
    float32x4_t v58 = &v54[4 * v50];
    unint64_t v212 = v58;
    if (v44)
    {
      unint64_t v59 = v41;
      operator delete(v44);
      unint64_t v41 = v59;
    }
    unint64_t v222 = (unint64_t)v58;
    int v44 = v40;
    uint64_t v46 = v218;
LABEL_49:
    uint64_t v60 = *a3;
    v230 = v44;
    if ((unint64_t)v41 < v221)
    {
      *(_DWORD *)unint64_t v41 = *(_DWORD *)&v60[4 * v43];
      float64x2_t v223 = v41 + 4;
      goto LABEL_70;
    }
    int64_t v61 = v41 - v45;
    uint64_t v62 = (v41 - v45) >> 2;
    unint64_t v63 = v62 + 1;
    if ((unint64_t)(v62 + 1) >> 62) {
      goto LABEL_277;
    }
    if ((uint64_t)(v221 - (void)v45) >> 1 > v63) {
      unint64_t v63 = (uint64_t)(v221 - (void)v45) >> 1;
    }
    if (v221 - (unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v63;
    }
    if (v64)
    {
      float64x2_t v224 = *a3;
      if (v64 >> 62) {
        goto LABEL_278;
      }
      unint64_t v65 = v41;
      unint64_t v66 = v64;
      uint64_t v67 = operator new(4 * v64);
      unint64_t v41 = v65;
      unint64_t v64 = v66;
      uint64_t v60 = v224;
    }
    else
    {
      uint64_t v67 = 0;
    }
    unint64_t v39 = &v67[4 * v62];
    *(_DWORD *)unint64_t v39 = *(_DWORD *)&v60[4 * v43];
    float64x2_t v223 = v39 + 4;
    if (v41 == v45)
    {
      int v44 = v230;
    }
    else
    {
      unint64_t v68 = v41 - 4 - v45;
      int v44 = v230;
      if (v68 >= 0xBC)
      {
        if (&v67[v61 - 4 - (v68 & 0xFFFFFFFFFFFFFFFCLL)] > &v67[v61 - 4])
        {
          unint64_t v69 = v41;
        }
        else if (&v41[-(v68 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v41 - 4)
        {
          unint64_t v69 = v41;
        }
        else if ((unint64_t)(v41 - &v67[v61]) >= 0x20)
        {
          uint64_t v115 = (v68 >> 2) + 1;
          unint64_t v69 = &v41[-4 * (v115 & 0x7FFFFFFFFFFFFFF8)];
          unsigned int v116 = &v67[4 * v62 - 16];
          double v117 = v41 - 16;
          uint64_t v118 = v115 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v119 = *(_OWORD *)v117;
            *(v116 - 1) = *((_OWORD *)v117 - 1);
            *unsigned int v116 = v119;
            v116 -= 2;
            v117 -= 32;
            v118 -= 8;
          }
          while (v118);
          v39 -= 4 * (v115 & 0x7FFFFFFFFFFFFFF8);
          if (v115 == (v115 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_67;
          }
        }
        else
        {
          unint64_t v69 = v41;
        }
      }
      else
      {
        unint64_t v69 = v41;
      }
      do
      {
        int v70 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *((_DWORD *)v39 - 1) = v70;
        v39 -= 4;
      }
      while (v69 != v45);
    }
LABEL_67:
    unint64_t v71 = &v67[4 * v64];
    long double v211 = v71;
    if (v45) {
      operator delete(v45);
    }
    unint64_t v221 = (unint64_t)v71;
    uint64_t v45 = v39;
    uint64_t v46 = v218;
LABEL_70:
    unint64_t v72 = *a5;
    uint64_t v73 = v227;
    float64x2_t v236 = v45;
    if ((unint64_t)v227 < v220)
    {
      *(void *)uint64_t v227 = *(void *)&v72[8 * v43];
      float32x4_t v37 = v227 + 8;
      goto LABEL_91;
    }
    int64_t v74 = v227 - v46;
    uint64_t v75 = (v227 - v46) >> 3;
    unint64_t v76 = v75 + 1;
    if ((unint64_t)(v75 + 1) >> 61)
    {
      v268 = v40;
      float v265 = v39;
      float64x2_t v262 = v38;
      float64x2_t v259 = v36;
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if ((uint64_t)(v220 - (void)v46) >> 2 > v76) {
      unint64_t v76 = (uint64_t)(v220 - (void)v46) >> 2;
    }
    if (v220 - (unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v77 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v77 = v76;
    }
    if (v77)
    {
      if (v77 >> 61) {
        goto LABEL_278;
      }
      unint64_t v78 = v43;
      uint64_t v79 = v46;
      unint64_t v80 = v77;
      BOOL v81 = (char *)operator new(8 * v77);
      uint64_t v46 = v79;
      unint64_t v43 = v78;
      uint64_t v73 = v227;
      unint64_t v77 = v80;
    }
    else
    {
      BOOL v81 = 0;
    }
    float v38 = &v81[8 * v75];
    *(void *)float v38 = *(void *)&v72[8 * v43];
    float32x4_t v37 = v38 + 8;
    if (v73 == v46)
    {
      int v44 = v230;
      uint64_t v45 = v236;
    }
    else
    {
      unint64_t v82 = v73 - 8 - v46;
      uint64_t v45 = v236;
      if (v82 < 0x168
        || &v81[v74 - 8 - (v82 & 0xFFFFFFFFFFFFFFF8)] > &v81[v74 - 8]
        || &v73[-(v82 & 0xFFFFFFFFFFFFFFF8) - 8] > v73 - 8
        || (unint64_t)(v73 - &v81[v74]) < 0x20)
      {
        uint64_t v83 = v73;
        int v44 = v230;
      }
      else
      {
        uint64_t v100 = (v82 >> 3) + 1;
        uint64_t v83 = &v73[-8 * (v100 & 0x3FFFFFFFFFFFFFFCLL)];
        float v101 = &v81[8 * v75 - 16];
        float v102 = (long long *)(v73 - 16);
        uint64_t v103 = v100 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v104 = *v102;
          *((_OWORD *)v101 - 1) = *(v102 - 1);
          *(_OWORD *)float v101 = v104;
          v101 -= 32;
          v102 -= 2;
          v103 -= 4;
        }
        while (v103);
        v38 -= 8 * (v100 & 0x3FFFFFFFFFFFFFFCLL);
        int v44 = v230;
        if (v100 == (v100 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_88;
        }
      }
      do
      {
        uint64_t v84 = *((void *)v83 - 1);
        v83 -= 8;
        *((void *)v38 - 1) = v84;
        v38 -= 8;
      }
      while (v83 != v46);
    }
LABEL_88:
    float32x4_t v85 = &v81[8 * v77];
    uint64_t v210 = v85;
    if (v46) {
      operator delete(v46);
    }
    unint64_t v220 = (unint64_t)v85;
    uint64_t v46 = v38;
LABEL_91:
    unint64_t v86 = *a4;
    if (v231 >= v219)
    {
      v228 = v37;
      int64_t v87 = v231 - __p;
      uint64_t v88 = (v231 - __p) >> 2;
      unint64_t v89 = v88 + 1;
      if ((unint64_t)(v88 + 1) >> 62)
      {
LABEL_277:
        v268 = v40;
        float v265 = v39;
        float64x2_t v262 = v38;
        float64x2_t v259 = v36;
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      if ((v219 - __p) >> 1 > v89) {
        unint64_t v89 = (v219 - __p) >> 1;
      }
      if ((unint64_t)(v219 - __p) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v90 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v90 = v89;
      }
      if (v90)
      {
        if (v90 >> 62)
        {
LABEL_278:
          v268 = v40;
          float v265 = v39;
          float64x2_t v262 = v38;
          float64x2_t v259 = v36;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v91 = v43;
        v92 = v46;
        unint64_t v93 = v90;
        uint64_t v94 = (char *)operator new(4 * v90);
        uint64_t v46 = v92;
        unint64_t v43 = v91;
        v95 = v231;
        unint64_t v90 = v93;
      }
      else
      {
        uint64_t v94 = 0;
        v95 = v231;
      }
      float v36 = &v94[4 * v88];
      *(_DWORD *)float v36 = *(_DWORD *)&v86[4 * v43];
      unint64_t v35 = v36 + 4;
      if (v95 == __p)
      {
        float32x4_t v37 = v228;
        int v44 = v230;
        goto LABEL_128;
      }
      uint64_t v96 = v95 - 4;
      uint64_t v97 = v95;
      unint64_t v98 = v95 - 4 - __p;
      if (v98 >= 0xBC)
      {
        if (&v94[v87 - 4 - (v98 & 0xFFFFFFFFFFFFFFFCLL)] <= &v94[v87 - 4]
          && &v96[-(v98 & 0xFFFFFFFFFFFFFFFCLL)] <= v96
          && (unint64_t)(v96 - &v94[v87] + 4) >= 0x20)
        {
          uint64_t v120 = (v98 >> 2) + 1;
          uint64_t v99 = &v231[-4 * (v120 & 0x7FFFFFFFFFFFFFF8)];
          float32_t v121 = &v94[4 * v88 - 16];
          uint64_t v122 = v231 - 16;
          uint64_t v123 = v120 & 0x7FFFFFFFFFFFFFF8;
          float32x4_t v37 = v228;
          do
          {
            long long v124 = *(_OWORD *)v122;
            *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
            *(_OWORD *)float32_t v121 = v124;
            v121 -= 32;
            v122 -= 32;
            v123 -= 8;
          }
          while (v123);
          v36 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
          int v44 = v230;
          if (v120 == (v120 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_128:
            uint64_t v45 = v236;
            long double v209 = &v94[4 * v90];
            if (__p)
            {
              uint64_t v106 = v46;
              uint64_t v107 = &v94[4 * v90];
              uint64_t v108 = v37;
              uint64_t v109 = v35;
              operator delete(__p);
              unint64_t v35 = v109;
              float32x4_t v37 = v108;
              uint64_t v45 = v236;
              uint64_t v46 = v106;
              unsigned int v219 = v107;
            }
            else
            {
              unsigned int v219 = &v94[4 * v90];
            }
            __p = v36;
            goto LABEL_132;
          }
          do
          {
LABEL_127:
            int v105 = *((_DWORD *)v99 - 1);
            v99 -= 4;
            *((_DWORD *)v36 - 1) = v105;
            v36 -= 4;
          }
          while (v99 != __p);
          goto LABEL_128;
        }
        uint64_t v99 = v231;
      }
      else
      {
        uint64_t v99 = v97;
      }
      float32x4_t v37 = v228;
      int v44 = v230;
      goto LABEL_127;
    }
    *(_DWORD *)int v231 = *(_DWORD *)&v86[4 * v43];
    unint64_t v35 = v231 + 4;
LABEL_132:
    unint64_t v12 = *a2;
    float v11 = a2[1];
    int v231 = v35;
    uint64_t v227 = v37;
    unint64_t v41 = v223;
    unint64_t v42 = v225;
LABEL_26:
    ++v43;
  }
  while (v43 < (v11 - v12) >> 2);
  v269 = v225;
  v270 = v212;
  v267 = v211;
  v268 = v40;
  float v265 = v39;
  v266 = v223;
  v263 = v37;
  double v264 = v210;
  float64x2_t v261 = v209;
  float64x2_t v262 = v38;
  float64x2_t v259 = v36;
  float64x2_t v260 = v35;
  uint64_t v8 = v204;
  a6 = v205;
  a7 = v207;
LABEL_151:
  unint64_t v125 = v37 - v38;
  unint64_t v126 = (v37 - v38) >> 3;
  if (v37 == v38)
  {
    uint64_t v150 = 0;
    float64x2_t v149 = 0;
    unsigned int v128 = 0;
    float64x2_t v151 = 0;
    if (!v126) {
      goto LABEL_230;
    }
    goto LABEL_228;
  }
  if ((v125 & 0x8000000000000000) != 0) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v127 = v37;
  uint64_t v206 = a6;
  double v208 = a7;
  unint64_t v234 = v37 - v38;
  unsigned int v128 = (float32x4_t *)operator new(v125 >> 1);
  unint64_t v232 = (v37 - v38) >> 3;
  size_t v129 = 4 * v126;
  bzero(v128, 4 * v126);
  uint64_t v130 = 0;
  unint64_t v131 = 0;
  uint64_t v237 = 4 * v126;
  while (2)
  {
    unint64_t v132 = *(void *)&v38[8 * v131];
    if (v132 > 0x13)
    {
      if (*(float *)((char *)v265 + v130) < 2.0)
      {
        v128->i32[v131] = 1176256512;
        goto LABEL_155;
      }
      uint64_t v276 = 0x900000001;
      LOBYTE(v277) = 0;
      uint64_t v279 = 36;
      uint64_t v274 = &unk_270717688;
      v275 = &peridot::g_fWeightsSpatial_shiftVal;
      uint64_t v256 = 0x900000001;
      char v257 = 0;
      uint64_t v258 = 36;
      v254 = &unk_270717688;
      unint64_t v255 = &peridot::g_fWeightsSpatial_stdErr;
      uint64_t v251 = 0x100000001;
      char v252 = 0;
      uint64_t v253 = 4;
      float64x2_t v249 = &unk_270717688;
      float64x2_t v250 = (void **)((char *)v265 + v130);
      LODWORD(v238) = 0;
      uint64_t v246 = 0x100000001;
      char v247 = 0;
      uint64_t v248 = 4;
      uint64_t v244 = &unk_270717688;
      char v245 = &v238;
      Interp1<float,LinearInterpolator<float>>((uint64_t)&v274, (uint64_t)&v254, (float *)((char *)v265 + v130), 1, (uint64_t)&v244);
      v128->i32[v131] = (int)v238;
      uint64_t v244 = &unk_270717340;
      if (v245 && v247) {
        MEMORY[0x25A2D62A0]();
      }
      float64x2_t v249 = &unk_270717340;
      if (v250 && v252) {
        MEMORY[0x25A2D62A0]();
      }
      v254 = &unk_270717340;
      if (v255 && v257) {
        MEMORY[0x25A2D62A0]();
      }
      uint64_t v274 = &unk_270717340;
      if (v275 && (_BYTE)v277) {
        MEMORY[0x25A2D62A0]();
      }
    }
    else
    {
      uint64_t v133 = 7;
      if (v132 == 1) {
        uint64_t v133 = 0;
      }
      if (v132 == 3) {
        uint64_t v133 = 1;
      }
      if (v132 == 2) {
        uint64_t v133 = 2;
      }
      if (v132 == 11) {
        uint64_t v133 = 3;
      }
      if (v132 == 12) {
        uint64_t v133 = 4;
      }
      if (v132 == 14) {
        uint64_t v133 = 5;
      }
      _ZF = v132 == 15;
      uint64_t v135 = 6;
      if (!_ZF) {
        uint64_t v135 = v133;
      }
      float v136 = *(float *)((char *)v265 + v130);
      if (v136 < 2.5)
      {
        v128->i32[v131] = peridot::g_fWeightsTemporal_stdErr[v135];
        goto LABEL_155;
      }
      if (v136 > 950.0)
      {
        v128->i32[v131] = peridot::g_fWeightsTemporal_stdErr[v135 + 154];
        goto LABEL_155;
      }
      unint64_t v255 = &peridot::g_fWeightsTemporal_pmfVal;
      uint64_t v256 = 0x1700000001;
      char v257 = 0;
      uint64_t v258 = 92;
      v254 = &unk_270717688;
      uint64_t v137 = &peridot::g_fWeightsTemporal_stdErr[v135];
      int v138 = v137[7];
      LODWORD(v274) = *v137;
      HIDWORD(v274) = v138;
      int v139 = v137[21];
      LODWORD(v275) = v137[14];
      HIDWORD(v275) = v139;
      int v140 = v137[35];
      LODWORD(v276) = v137[28];
      HIDWORD(v276) = v140;
      int v141 = v137[49];
      int v277 = v137[42];
      int v278 = v141;
      int v142 = v137[63];
      LODWORD(v279) = v137[56];
      HIDWORD(v279) = v142;
      int v143 = v137[77];
      int v280 = v137[70];
      int v281 = v143;
      int v144 = v137[91];
      int v282 = v137[84];
      int v283 = v144;
      int v145 = v137[105];
      int v284 = v137[98];
      int v285 = v145;
      int v146 = v137[119];
      int v286 = v137[112];
      int v287 = v146;
      int v147 = v137[133];
      int v288 = v137[126];
      int v289 = v147;
      int v148 = v137[147];
      int v290 = v137[140];
      int v291 = v148;
      int v292 = v137[154];
      uint64_t v251 = 0x1700000001;
      char v252 = 0;
      uint64_t v253 = 92;
      float64x2_t v249 = &unk_270717688;
      float64x2_t v250 = &v274;
      uint64_t v246 = 0x100000001;
      char v247 = 0;
      uint64_t v248 = 4;
      uint64_t v244 = &unk_270717688;
      char v245 = (void **)((char *)v265 + v130);
      __int32 v243 = 0;
      uint64_t v240 = 0x100000001;
      char v241 = 0;
      uint64_t v242 = 4;
      float64x2_t v238 = &unk_270717688;
      char v239 = &v243;
      Interp1<float,LinearInterpolator<float>>((uint64_t)&v254, (uint64_t)&v249, (float *)((char *)v265 + v130), 1, (uint64_t)&v238);
      v128->i32[v131] = v243;
      float64x2_t v238 = &unk_270717340;
      if (v239 && v241) {
        MEMORY[0x25A2D62A0]();
      }
      uint64_t v244 = &unk_270717340;
      if (v245 && v247) {
        MEMORY[0x25A2D62A0]();
      }
      float64x2_t v249 = &unk_270717340;
      if (v250 && v252) {
        MEMORY[0x25A2D62A0]();
      }
      v254 = &unk_270717340;
      if (v255 && v257) {
        MEMORY[0x25A2D62A0]();
      }
      float v38 = (char *)v262;
      uint64_t v127 = v263;
    }
    size_t v129 = v237;
LABEL_155:
    ++v131;
    unint64_t v126 = (v127 - v38) >> 3;
    v130 += 4;
    if (v131 < v126) {
      continue;
    }
    break;
  }
  a6 = v206;
  a7 = v208;
  if (v234 < 8)
  {
    float64x2_t v149 = 0;
    uint64_t v150 = 0;
    goto LABEL_223;
  }
  double v152 = (float32x4_t *)operator new(v129);
  size_t v153 = v129;
  uint64_t v150 = v152;
  float64x2_t v149 = (float32x4_t *)((char *)v152 + 4 * v232);
  bzero(v152, v153);
  if (v232 <= 1) {
    unint64_t v154 = 1;
  }
  else {
    unint64_t v154 = v232;
  }
  if (v154 <= 7)
  {
    unint64_t v155 = 0;
    float v156 = 0.0;
    goto LABEL_215;
  }
  unint64_t v155 = v154 & 0xFFFFFFFFFFFFFFF8;
  double v157 = v128 + 1;
  float32x4_t v158 = 0uLL;
  __asm { FMOV            V1.4S, #1.0 }
  unint64_t v162 = v154 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v163 = 0uLL;
  do
  {
    float32x4_t v158 = vaddq_f32(vdivq_f32(_Q1, vmulq_f32(v157[-1], v157[-1])), v158);
    float32x4_t v163 = vaddq_f32(vdivq_f32(_Q1, vmulq_f32(*v157, *v157)), v163);
    v157 += 2;
    v162 -= 8;
  }
  while (v162);
  float32x4_t v164 = vaddq_f32(v163, v158);
  float v156 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v164, v164));
  if (v154 != v155)
  {
LABEL_215:
    unint64_t v165 = v154 - v155;
    uint64_t v166 = &v128->f32[v155];
    do
    {
      float v167 = *v166++;
      float v156 = (float)(1.0 / (float)(v167 * v167)) + v156;
      --v165;
    }
    while (v165);
  }
  unint64_t v168 = 0;
  if (v154 < 8) {
    goto LABEL_285;
  }
  if ((unint64_t)((char *)v150 - (char *)v128) <= 0x1F) {
    goto LABEL_285;
  }
  uint64_t v169 = 0;
  unint64_t v168 = v154 & 0xFFFFFFFFFFFFFFF8;
  __asm { FMOV            V1.4S, #1.0 }
  unint64_t v171 = v154 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v172 = vdivq_f32(_Q1, vmulq_n_f32(vmulq_f32(v128[v169 + 1], v128[v169 + 1]), v156));
    float64x2_t v173 = &v150[v169];
    *float64x2_t v173 = vdivq_f32(_Q1, vmulq_n_f32(vmulq_f32(v128[v169], v128[v169]), v156));
    v173[1] = v172;
    v169 += 2;
    v171 -= 8;
  }
  while (v171);
  if (v154 != v168)
  {
LABEL_285:
    do
    {
      v150->f32[v168] = 1.0 / (float)((float)(v128->f32[v168] * v128->f32[v168]) * v156);
      ++v168;
    }
    while (v154 != v168);
  }
LABEL_223:
  if (v127 == v38)
  {
    float64x2_t v151 = 0;
    if (!v126) {
      goto LABEL_230;
    }
    goto LABEL_228;
  }
  if (v127 - v38 < 0) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  float64x2_t v151 = operator new(v127 - v38);
  bzero(v151, v127 - v38);
  if (v126)
  {
LABEL_228:
    uint64_t v174 = v151;
    double v175 = v150;
    do
    {
      uint64_t v176 = *(void *)v38;
      v38 += 8;
      uint64_t v177 = qword_259122008[v176 - 1];
      *v174++ = v177;
      LODWORD(v176) = v175->i32[0];
      double v175 = (float32x4_t *)((char *)v175 + 4);
      *(_DWORD *)(a6 + 4 * v177 - 4) = v176;
      --v126;
    }
    while (v126);
  }
LABEL_230:
  *a7 = 0.0;
  if (v149 != v150)
  {
    unint64_t v178 = ((char *)v149 - (char *)v150) >> 2;
    double v179 = (char *)v268;
    if (v178 <= 1) {
      unint64_t v178 = 1;
    }
    float v180 = 0.0;
    if (v178 <= 0xB)
    {
      unint64_t v181 = 0;
      goto LABEL_235;
    }
    unint64_t v181 = 0;
    unint64_t v194 = (unint64_t)(a7 + 1);
    BOOL v196 = &v150->f32[v178] > a7 && (unint64_t)v150 < v194;
    if ((unint64_t)v268 < v194 && (char *)v268 + 4 * v178 > (char *)a7) {
      goto LABEL_235;
    }
    if (v196) {
      goto LABEL_235;
    }
    unint64_t v181 = v178 & 0xFFFFFFFFFFFFFFF8;
    int32x2_t v198 = v150 + 1;
    int8x16_t v199 = (float32x4_t *)((char *)v268 + 16);
    float32x4_t v200 = 0uLL;
    unint64_t v201 = v178 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v202 = 0uLL;
    do
    {
      float32x4_t v200 = vmlaq_f32(v200, v199[-1], v198[-1]);
      float32x4_t v202 = vmlaq_f32(v202, *v199, *v198);
      v198 += 2;
      v199 += 2;
      v201 -= 8;
    }
    while (v201);
    float32x4_t v203 = vaddq_f32(v202, v200);
    float v180 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v203, v203));
    *a7 = v180;
    if (v178 != v181)
    {
LABEL_235:
      unint64_t v182 = v178 - v181;
      uint64_t v183 = 4 * v181;
      unsigned int v184 = &v150->f32[v181];
      unint64_t v185 = (float *)&v179[v183];
      do
      {
        float v186 = *v185++;
        float v187 = v186;
        float v188 = *v184++;
        float v180 = v180 + (float)(v188 * v187);
        *a7 = v180;
        --v182;
      }
      while (v182);
    }
  }
LABEL_237:
  float *v8 = 0.0;
  if (*a7 > 0.0)
  {
    int32x2_t v189 = (float *)v259;
    float v190 = *(float *)v259;
    if (v260 != v259)
    {
      unint64_t v191 = (v260 - (unsigned char *)v259) >> 2;
      if (v191 <= 1) {
        unint64_t v191 = 1;
      }
      do
      {
        float v192 = *v189++;
        float v193 = v192;
        if (v192 > v190) {
          float v190 = v193;
        }
        --v191;
      }
      while (v191);
    }
    float *v8 = v190;
  }
  if (v151) {
    operator delete(v151);
  }
  if (v150) {
    operator delete(v150);
  }
  if (v128) {
    operator delete(v128);
  }
  if (v259) {
    operator delete(v259);
  }
  if (v262) {
    operator delete(v262);
  }
  if (v265) {
    operator delete(v265);
  }
  if (v268) {
    operator delete(v268);
  }
  if (v271) {
    operator delete(v271);
  }
}

void sub_259098F70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  operator delete(v66);
  if (__p)
  {
    operator delete(__p);
    unint64_t v68 = a57;
    if (!a57)
    {
LABEL_3:
      unint64_t v69 = a60;
      if (!a60) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    unint64_t v68 = a57;
    if (!a57) {
      goto LABEL_3;
    }
  }
  operator delete(v68);
  unint64_t v69 = a60;
  if (!a60)
  {
LABEL_4:
    int v70 = a63;
    if (!a63) {
      goto LABEL_5;
    }
    goto LABEL_10;
  }
LABEL_9:
  operator delete(v69);
  int v70 = a63;
  if (!a63)
  {
LABEL_5:
    unint64_t v71 = a66;
    if (!a66) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
LABEL_10:
  operator delete(v70);
  unint64_t v71 = a66;
  if (!a66) {
LABEL_6:
  }
    _Unwind_Resume(a1);
LABEL_11:
  operator delete(v71);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(void *result, char *__src, char *a3, size_t __sz)
{
  int v6 = __src;
  int v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = v12;
    __n128 result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      __n128 result = memcpy(result, v6, v14);
    }
    size_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  size_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    float v19 = (void *)*result;
LABEL_20:
    __n128 result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  float v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    float v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  void *v15 = &v9[v14];
  return result;
}

void peridot::PeridotUserOutput::fusedTofMacro(uint64_t a1, void *a2, uint64_t a3, float **a4, void *a5, uint64_t a6, float *a7)
{
  uint64_t v9 = a2;
  BOOL v11 = (float32x4_t *)*a2;
  uint64_t v10 = a2[1];
  uint64_t v12 = v10 - *a2;
  double v112 = a4;
  if (v10 != *a2)
  {
    unint64_t v13 = (v12 >> 2) - 1;
    if ((unint64_t)(v12 >> 2) <= 1) {
      unint64_t v14 = 1;
    }
    else {
      unint64_t v14 = v12 >> 2;
    }
    if (v14 > 7)
    {
      unint64_t v15 = v14 & 0xFFFFFFFFFFFFFFF8;
      float v19 = v11 + 1;
      float32x4_t v20 = 0uLL;
      unint64_t v21 = v14 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v22 = 0uLL;
      do
      {
        float32x4_t v20 = vaddq_f32(v19[-1], v20);
        float32x4_t v22 = vaddq_f32(*v19, v22);
        v19 += 2;
        v21 -= 8;
      }
      while (v21);
      float32x4_t v23 = vaddq_f32(v22, v20);
      float v16 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23));
      if (v14 == v15) {
        goto LABEL_13;
      }
    }
    else
    {
      unint64_t v15 = 0;
      float v16 = 0.0;
    }
    unint64_t v24 = v14 - v15;
    unint64_t v25 = &v11->f32[v15];
    do
    {
      float v26 = *v25++;
      float v16 = v26 + v16;
      --v24;
    }
    while (v24);
LABEL_13:
    if (v12 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    float v27 = a5;
    unint64_t v28 = v13 >> 6;
    long long v29 = (char *)operator new(8 * ((v13 >> 6) + 1));
    unint64_t v17 = v29;
    if ((unint64_t)v12 >= 0x104) {
      unint64_t v30 = v28;
    }
    else {
      unint64_t v30 = 0;
    }
    uint64_t v18 = v12 >> 2;
    *(void *)&v29[8 * v30] = 0;
    size_t v31 = 8 * ((unint64_t)(v12 >> 2) >> 6);
    if ((unint64_t)v12 >= 0x100) {
      bzero(v29, v31);
    }
    a5 = v27;
    a4 = v112;
    if (v12 >> 2) {
      *(void *)&v17[v31] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v12 >> 2));
    }
    double v32 = (float)(v16 / (float)(unint64_t)(v12 >> 2));
    if (v32 >= 0.0000000015)
    {
      unint64_t v35 = 0;
      if (v32 >= 0.0000000023)
      {
        do
        {
          *(void *)&v17[(v35 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v35;
          ++v35;
        }
        while (v14 != v35);
      }
      else
      {
        uint64_t v36 = *v27;
        do
        {
          if (*(void *)(v36 + 8 * v35) >= 0xAuLL) {
            *(void *)&v17[(v35 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v35;
          }
          ++v35;
        }
        while (v14 != v35);
      }
    }
    else
    {
      unint64_t v33 = 0;
      uint64_t v34 = *v27;
      do
      {
        if (*(void *)(v34 + 8 * v33) >= 0xBuLL) {
          *(void *)&v17[(v33 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v33;
        }
        ++v33;
      }
      while (v14 != v33);
    }
    goto LABEL_32;
  }
  unint64_t v17 = 0;
  uint64_t v18 = 0;
LABEL_32:
  float32x4_t v37 = (uint64_t *)*a5;
  float v38 = *a4;
  uint64_t v39 = a5[1] - *a5;
  uint64_t v111 = a6;
  if (!v39) {
    goto LABEL_43;
  }
  unint64_t v40 = v39 >> 3;
  if (v40 <= 1) {
    unint64_t v40 = 1;
  }
  do
  {
    uint64_t v42 = *v37;
    if (*v37 == 10)
    {
      float v41 = *v38 * 0.3;
      *float v38 = v41;
LABEL_37:
      *float32x4_t v37 = v42 - 8;
      goto LABEL_38;
    }
    if ((unint64_t)*v37 >= 0xA) {
      goto LABEL_37;
    }
LABEL_38:
    ++v38;
    ++v37;
    --v40;
  }
  while (v40);
  float v38 = *a4;
LABEL_43:
  unint64_t v43 = a4[1];
  if (v43 == v38)
  {
    unint64_t v64 = 0;
    int v44 = 0;
    LOBYTE(v68) = 1;
    uint64_t v65 = a6;
    goto LABEL_93;
  }
  uint64_t v108 = a5;
  uint64_t v109 = v18;
  uint64_t v110 = v9;
  int v44 = 0;
  uint64_t v45 = 0;
  unint64_t v46 = 0;
  int64_t v47 = 0;
  float v48 = 0.0;
  while (2)
  {
    if ((*(void *)&v17[(v46 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v46))
    {
      float v50 = v38[v46] * v38[v46];
      if (v44 < v45)
      {
        *int v44 = v50;
        unint64_t v49 = v44 + 1;
      }
      else
      {
        uint64_t v51 = ((char *)v44 - (char *)v47) >> 2;
        unint64_t v52 = v51 + 1;
        if ((unint64_t)(v51 + 1) >> 62) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v45 - (char *)v47) >> 1 > v52) {
          unint64_t v52 = ((char *)v45 - (char *)v47) >> 1;
        }
        if ((unint64_t)((char *)v45 - (char *)v47) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v52;
        }
        if (v53)
        {
          if (v53 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          int8x8_t v54 = operator new(4 * v53);
        }
        else
        {
          int8x8_t v54 = 0;
        }
        unint64_t v55 = (float *)&v54[4 * v51];
        *unint64_t v55 = v50;
        unint64_t v49 = v55 + 1;
        if (v44 != (float *)v47)
        {
          unint64_t v56 = (char *)(v44 - 1) - (char *)v47;
          if (v56 < 0xBC)
          {
            int v57 = v44;
            goto LABEL_63;
          }
          if (&v54[(char *)v44 - (char *)v47 - 4 - (v56 & 0xFFFFFFFFFFFFFFFCLL)] > &v54[(char *)v44 - (char *)v47 - 4])
          {
            int v57 = v44;
            goto LABEL_63;
          }
          if ((float *)((char *)v44 - (v56 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v44 - 1)
          {
            int v57 = v44;
            goto LABEL_63;
          }
          if ((unint64_t)((char *)v47 - v54) < 0x20)
          {
            int v57 = v44;
            goto LABEL_63;
          }
          uint64_t v59 = (v56 >> 2) + 1;
          int v57 = &v44[-(v59 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v60 = &v54[4 * v51 - 16];
          int64_t v61 = v44 - 4;
          uint64_t v62 = v59 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v63 = *(_OWORD *)v61;
            *(v60 - 1) = *((_OWORD *)v61 - 1);
            *uint64_t v60 = v63;
            v60 -= 2;
            v61 -= 8;
            v62 -= 8;
          }
          while (v62);
          v55 -= v59 & 0x7FFFFFFFFFFFFFF8;
          if (v59 != (v59 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_63:
              int v58 = *((_DWORD *)v57-- - 1);
              *((_DWORD *)v55-- - 1) = v58;
            }
            while (v57 != (float *)v47);
          }
        }
        uint64_t v45 = (float *)&v54[4 * v53];
        if (v47)
        {
          operator delete(v47);
          a4 = v112;
          unint64_t v43 = v112[1];
          int64_t v47 = (float32x4_t *)v55;
        }
        else
        {
          int64_t v47 = (float32x4_t *)v55;
          a4 = v112;
        }
      }
      float v48 = v50 + v48;
      float v38 = *a4;
      int v44 = v49;
    }
    if (++v46 < v43 - v38) {
      continue;
    }
    break;
  }
  unint64_t v64 = ((char *)v44 - (char *)v47) >> 2;
  a5 = v108;
  uint64_t v18 = v109;
  uint64_t v65 = v111;
  if (v44 == (float *)v47)
  {
    LOBYTE(v68) = 1;
  }
  else
  {
    if (v64 <= 1) {
      unint64_t v66 = 1;
    }
    else {
      unint64_t v66 = ((char *)v44 - (char *)v47) >> 2;
    }
    if (v66 <= 7)
    {
      unint64_t v67 = 0;
      goto LABEL_89;
    }
    unint64_t v67 = v66 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v69 = v47 + 1;
    unint64_t v70 = v66 & 0xFFFFFFFFFFFFFFF8;
    float v71 = 1.0 / v48;
    do
    {
      float32x4_t v72 = vmulq_n_f32(*v69, v71);
      v69[-1] = vmulq_n_f32(v69[-1], v71);
      float32x4_t *v69 = v72;
      v69 += 2;
      v70 -= 8;
    }
    while (v70);
    if (v66 == v67)
    {
      LOBYTE(v68) = 0;
    }
    else
    {
LABEL_89:
      unint64_t v68 = v66 - v67;
      uint64_t v73 = &v47->f32[v67];
      do
      {
        *uint64_t v73 = *v73 * (float)(1.0 / v48);
        ++v73;
        --v68;
      }
      while (v68);
    }
    int v44 = (float *)v47;
  }
  uint64_t v9 = v110;
LABEL_93:
  *(void *)uint64_t v65 = 0;
  *(void *)(v65 + 8) = 0;
  *(_DWORD *)(v65 + 24) = 0;
  *(void *)(v65 + 16) = 0;
  uint64_t v74 = *a5;
  uint64_t v75 = a5[1];
  uint64_t v76 = v75 - *a5;
  if (v75 != *a5)
  {
    unint64_t v77 = 0;
    uint64_t v78 = 0;
    unint64_t v79 = v76 >> 3;
    if (v79 <= 1) {
      unint64_t v79 = 1;
    }
    do
    {
      if ((*(void *)&v17[(v77 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v77)) {
        *(float *)(v65 + 4 * *(void *)(v74 + 8 * v77)) = v44[v78++];
      }
      ++v77;
    }
    while (v79 != v77);
  }
  if ((v68 & 1) == 0)
  {
    if (v64 <= 1) {
      unint64_t v64 = 1;
    }
    if (v64 <= 7)
    {
      unint64_t v80 = 0;
      LOBYTE(v81) = 0;
      goto LABEL_114;
    }
    if (v64 >= 0x20)
    {
      unint64_t v80 = v64 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v82 = (float32x4_t *)(v44 + 16);
      int8x16_t v83 = 0uLL;
      unint64_t v84 = v64 & 0xFFFFFFFFFFFFFFE0;
      int8x16_t v85 = 0uLL;
      do
      {
        int8x16_t v83 = vornq_s8(v83, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[-4]), (int8x16_t)vcgezq_f32(v82[-4])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[-3]), (int8x16_t)vcgezq_f32(v82[-3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[-2]), (int8x16_t)vcgezq_f32(v82[-2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[-1]), (int8x16_t)vcgezq_f32(v82[-1])))));
        int8x16_t v85 = vornq_s8(v85, vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(*v82), (int8x16_t)vcgezq_f32(*v82)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[1]), (int8x16_t)vcgezq_f32(v82[1]))), (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[2]), (int8x16_t)vcgezq_f32(v82[2])), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v82[3]), (int8x16_t)vcgezq_f32(v82[3])))));
        v82 += 8;
        v84 -= 32;
      }
      while (v84);
      LODWORD(v81) = vmaxvq_u8((uint8x16_t)vcltzq_s8(vshlq_n_s8(vorrq_s8(v83, v85), 7uLL))) & 1;
      if (v64 != v80)
      {
        if ((v64 & 0x18) == 0) {
          goto LABEL_114;
        }
        goto LABEL_111;
      }
    }
    else
    {
      LODWORD(v81) = 0;
      unint64_t v80 = 0;
LABEL_111:
      unint64_t v86 = v80;
      unint64_t v80 = v64 & 0xFFFFFFFFFFFFFFF8;
      int8x8_t v87 = vdup_n_s8(v81);
      unint64_t v88 = v86 - (v64 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v89 = (float32x4_t *)&v44[v86];
      do
      {
        float32x4_t v90 = *v89;
        float32x4_t v91 = v89[1];
        v89 += 2;
        int8x8_t v87 = vorr_s8(vmovn_s16((int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v90), (int8x16_t)vcgezq_f32(v90)), (int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v91), (int8x16_t)vcgezq_f32(v91))))), v87);
        v88 += 8;
      }
      while (v88);
      uint64_t v81 = vmaxv_u8((uint8x8_t)vcltz_s8(vshl_n_s8(v87, 7uLL))) & 1;
      if (v64 != v80)
      {
LABEL_114:
        unint64_t v92 = v64 - v80;
        unint64_t v93 = &v44[v80];
        do
        {
          ++v93;
          --v92;
        }
        while (v92);
      }
    }
    if (v81)
    {
      int32x2_t v94 = 0;
      if (v18 == 1) {
        *(float *)v94.i32 = 1.0;
      }
      if (v64 <= 7)
      {
        unint64_t v95 = 0;
        goto LABEL_124;
      }
      unint64_t v95 = v64 & 0xFFFFFFFFFFFFFFF8;
      int32x4_t v96 = vdupq_lane_s32(v94, 0);
      uint64_t v97 = (int32x4_t *)(v44 + 4);
      unint64_t v98 = v64 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v97[-1] = v96;
        *uint64_t v97 = v96;
        v97 += 2;
        v98 -= 8;
      }
      while (v98);
      if (v64 != v95)
      {
LABEL_124:
        unint64_t v99 = v64 - v95;
        uint64_t v100 = &v44[v95];
        do
        {
          *v100++ = *(float *)v94.i32;
          --v99;
        }
        while (v99);
      }
    }
  }
  *a7 = 0.0;
  uint64_t v101 = *v9;
  uint64_t v102 = v9[1];
  uint64_t v103 = v102 - *v9;
  if (v102 != *v9)
  {
    unint64_t v104 = 0;
    uint64_t v105 = 0;
    unint64_t v106 = v103 >> 2;
    if (v106 <= 1) {
      unint64_t v106 = 1;
    }
    float v107 = 0.0;
    do
    {
      if ((*(void *)&v17[(v104 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v104))
      {
        float v107 = v107 + (float)(v44[v105] * *(float *)(v101 + 4 * v104));
        *a7 = v107;
        ++v105;
      }
      ++v104;
    }
    while (v106 != v104);
  }
  if (v44) {
    operator delete(v44);
  }
  if (v17)
  {
    operator delete(v17);
  }
}

void sub_259099A20(_Unwind_Exception *a1)
{
  if (v2) {
    operator delete(v2);
  }
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t peridot::PeridotUserOutput::debugPrint(peridot::PeridotUserOutput *this)
{
  puts("tof: ");
  printf("%.15f ", *(float *)this);
  printf("%.15f ", *((float *)this + 74));
  printf("%.15f ", *((float *)this + 148));
  printf("%.15f ", *((float *)this + 222));
  printf("%.15f ", *((float *)this + 296));
  printf("%.15f ", *((float *)this + 370));
  printf("%.15f ", *((float *)this + 444));
  printf("%.15f ", *((float *)this + 518));
  printf("%.15f ", *((float *)this + 592));
  printf("%.15f ", *((float *)this + 666));
  printf("%.15f ", *((float *)this + 740));
  printf("%.15f ", *((float *)this + 814));
  printf("%.15f ", *((float *)this + 888));
  printf("%.15f ", *((float *)this + 962));
  putchar(10);
  printf("%.15f ", *((float *)this + 21));
  printf("%.15f ", *((float *)this + 95));
  printf("%.15f ", *((float *)this + 169));
  printf("%.15f ", *((float *)this + 243));
  printf("%.15f ", *((float *)this + 317));
  printf("%.15f ", *((float *)this + 391));
  printf("%.15f ", *((float *)this + 465));
  printf("%.15f ", *((float *)this + 539));
  printf("%.15f ", *((float *)this + 613));
  printf("%.15f ", *((float *)this + 687));
  printf("%.15f ", *((float *)this + 761));
  printf("%.15f ", *((float *)this + 835));
  printf("%.15f ", *((float *)this + 909));
  printf("%.15f ", *((float *)this + 983));
  putchar(10);
  printf("%.15f ", *((float *)this + 42));
  printf("%.15f ", *((float *)this + 116));
  printf("%.15f ", *((float *)this + 190));
  printf("%.15f ", *((float *)this + 264));
  printf("%.15f ", *((float *)this + 338));
  printf("%.15f ", *((float *)this + 412));
  printf("%.15f ", *((float *)this + 486));
  printf("%.15f ", *((float *)this + 560));
  printf("%.15f ", *((float *)this + 634));
  printf("%.15f ", *((float *)this + 708));
  printf("%.15f ", *((float *)this + 782));
  printf("%.15f ", *((float *)this + 856));
  printf("%.15f ", *((float *)this + 930));
  printf("%.15f ", *((float *)this + 1004));
  putchar(10);
  putchar(10);
  puts("confidence: ");
  printf("%.15f ", *((float *)this + 1));
  printf("%.15f ", *((float *)this + 75));
  printf("%.15f ", *((float *)this + 149));
  printf("%.15f ", *((float *)this + 223));
  printf("%.15f ", *((float *)this + 297));
  printf("%.15f ", *((float *)this + 371));
  printf("%.15f ", *((float *)this + 445));
  printf("%.15f ", *((float *)this + 519));
  printf("%.15f ", *((float *)this + 593));
  printf("%.15f ", *((float *)this + 667));
  printf("%.15f ", *((float *)this + 741));
  printf("%.15f ", *((float *)this + 815));
  printf("%.15f ", *((float *)this + 889));
  printf("%.15f ", *((float *)this + 963));
  putchar(10);
  printf("%.15f ", *((float *)this + 22));
  printf("%.15f ", *((float *)this + 96));
  printf("%.15f ", *((float *)this + 170));
  printf("%.15f ", *((float *)this + 244));
  printf("%.15f ", *((float *)this + 318));
  printf("%.15f ", *((float *)this + 392));
  printf("%.15f ", *((float *)this + 466));
  printf("%.15f ", *((float *)this + 540));
  printf("%.15f ", *((float *)this + 614));
  printf("%.15f ", *((float *)this + 688));
  printf("%.15f ", *((float *)this + 762));
  printf("%.15f ", *((float *)this + 836));
  printf("%.15f ", *((float *)this + 910));
  printf("%.15f ", *((float *)this + 984));
  putchar(10);
  printf("%.15f ", *((float *)this + 43));
  printf("%.15f ", *((float *)this + 117));
  printf("%.15f ", *((float *)this + 191));
  printf("%.15f ", *((float *)this + 265));
  printf("%.15f ", *((float *)this + 339));
  printf("%.15f ", *((float *)this + 413));
  printf("%.15f ", *((float *)this + 487));
  printf("%.15f ", *((float *)this + 561));
  printf("%.15f ", *((float *)this + 635));
  printf("%.15f ", *((float *)this + 709));
  printf("%.15f ", *((float *)this + 783));
  printf("%.15f ", *((float *)this + 857));
  printf("%.15f ", *((float *)this + 931));
  printf("%.15f ", *((float *)this + 1005));
  putchar(10);
  putchar(10);
  puts("SNR: ");
  printf("%.15f ", *((float *)this + 2));
  printf("%.15f ", *((float *)this + 76));
  printf("%.15f ", *((float *)this + 150));
  printf("%.15f ", *((float *)this + 224));
  printf("%.15f ", *((float *)this + 298));
  printf("%.15f ", *((float *)this + 372));
  printf("%.15f ", *((float *)this + 446));
  printf("%.15f ", *((float *)this + 520));
  printf("%.15f ", *((float *)this + 594));
  printf("%.15f ", *((float *)this + 668));
  printf("%.15f ", *((float *)this + 742));
  printf("%.15f ", *((float *)this + 816));
  printf("%.15f ", *((float *)this + 890));
  printf("%.15f ", *((float *)this + 964));
  putchar(10);
  printf("%.15f ", *((float *)this + 23));
  printf("%.15f ", *((float *)this + 97));
  printf("%.15f ", *((float *)this + 171));
  printf("%.15f ", *((float *)this + 245));
  printf("%.15f ", *((float *)this + 319));
  printf("%.15f ", *((float *)this + 393));
  printf("%.15f ", *((float *)this + 467));
  printf("%.15f ", *((float *)this + 541));
  printf("%.15f ", *((float *)this + 615));
  printf("%.15f ", *((float *)this + 689));
  printf("%.15f ", *((float *)this + 763));
  printf("%.15f ", *((float *)this + 837));
  printf("%.15f ", *((float *)this + 911));
  printf("%.15f ", *((float *)this + 985));
  putchar(10);
  printf("%.15f ", *((float *)this + 44));
  printf("%.15f ", *((float *)this + 118));
  printf("%.15f ", *((float *)this + 192));
  printf("%.15f ", *((float *)this + 266));
  printf("%.15f ", *((float *)this + 340));
  printf("%.15f ", *((float *)this + 414));
  printf("%.15f ", *((float *)this + 488));
  printf("%.15f ", *((float *)this + 562));
  printf("%.15f ", *((float *)this + 636));
  printf("%.15f ", *((float *)this + 710));
  printf("%.15f ", *((float *)this + 784));
  printf("%.15f ", *((float *)this + 858));
  printf("%.15f ", *((float *)this + 932));
  printf("%.15f ", *((float *)this + 1006));
  putchar(10);
  putchar(10);
  puts("val: ");
  printf("%.15f ", *((float *)this + 6));
  printf("%.15f ", *((float *)this + 80));
  printf("%.15f ", *((float *)this + 154));
  printf("%.15f ", *((float *)this + 228));
  printf("%.15f ", *((float *)this + 302));
  printf("%.15f ", *((float *)this + 376));
  printf("%.15f ", *((float *)this + 450));
  printf("%.15f ", *((float *)this + 524));
  printf("%.15f ", *((float *)this + 598));
  printf("%.15f ", *((float *)this + 672));
  printf("%.15f ", *((float *)this + 746));
  printf("%.15f ", *((float *)this + 820));
  printf("%.15f ", *((float *)this + 894));
  printf("%.15f ", *((float *)this + 968));
  putchar(10);
  printf("%.15f ", *((float *)this + 27));
  printf("%.15f ", *((float *)this + 101));
  printf("%.15f ", *((float *)this + 175));
  printf("%.15f ", *((float *)this + 249));
  printf("%.15f ", *((float *)this + 323));
  printf("%.15f ", *((float *)this + 397));
  printf("%.15f ", *((float *)this + 471));
  printf("%.15f ", *((float *)this + 545));
  printf("%.15f ", *((float *)this + 619));
  printf("%.15f ", *((float *)this + 693));
  printf("%.15f ", *((float *)this + 767));
  printf("%.15f ", *((float *)this + 841));
  printf("%.15f ", *((float *)this + 915));
  printf("%.15f ", *((float *)this + 989));
  putchar(10);
  printf("%.15f ", *((float *)this + 48));
  printf("%.15f ", *((float *)this + 122));
  printf("%.15f ", *((float *)this + 196));
  printf("%.15f ", *((float *)this + 270));
  printf("%.15f ", *((float *)this + 344));
  printf("%.15f ", *((float *)this + 418));
  printf("%.15f ", *((float *)this + 492));
  printf("%.15f ", *((float *)this + 566));
  printf("%.15f ", *((float *)this + 640));
  printf("%.15f ", *((float *)this + 714));
  printf("%.15f ", *((float *)this + 788));
  printf("%.15f ", *((float *)this + 862));
  printf("%.15f ", *((float *)this + 936));
  printf("%.15f ", *((float *)this + 1010));
  putchar(10);
  putchar(10);
  puts("Qs: ");
  printf("%.15f ", *((float *)this + 3));
  printf("%.15f ", *((float *)this + 77));
  printf("%.15f ", *((float *)this + 151));
  printf("%.15f ", *((float *)this + 225));
  printf("%.15f ", *((float *)this + 299));
  printf("%.15f ", *((float *)this + 373));
  printf("%.15f ", *((float *)this + 447));
  printf("%.15f ", *((float *)this + 521));
  printf("%.15f ", *((float *)this + 595));
  printf("%.15f ", *((float *)this + 669));
  printf("%.15f ", *((float *)this + 743));
  printf("%.15f ", *((float *)this + 817));
  printf("%.15f ", *((float *)this + 891));
  printf("%.15f ", *((float *)this + 965));
  putchar(10);
  printf("%.15f ", *((float *)this + 24));
  printf("%.15f ", *((float *)this + 98));
  printf("%.15f ", *((float *)this + 172));
  printf("%.15f ", *((float *)this + 246));
  printf("%.15f ", *((float *)this + 320));
  printf("%.15f ", *((float *)this + 394));
  printf("%.15f ", *((float *)this + 468));
  printf("%.15f ", *((float *)this + 542));
  printf("%.15f ", *((float *)this + 616));
  printf("%.15f ", *((float *)this + 690));
  printf("%.15f ", *((float *)this + 764));
  printf("%.15f ", *((float *)this + 838));
  printf("%.15f ", *((float *)this + 912));
  printf("%.15f ", *((float *)this + 986));
  putchar(10);
  printf("%.15f ", *((float *)this + 45));
  printf("%.15f ", *((float *)this + 119));
  printf("%.15f ", *((float *)this + 193));
  printf("%.15f ", *((float *)this + 267));
  printf("%.15f ", *((float *)this + 341));
  printf("%.15f ", *((float *)this + 415));
  printf("%.15f ", *((float *)this + 489));
  printf("%.15f ", *((float *)this + 563));
  printf("%.15f ", *((float *)this + 637));
  printf("%.15f ", *((float *)this + 711));
  printf("%.15f ", *((float *)this + 785));
  printf("%.15f ", *((float *)this + 859));
  printf("%.15f ", *((float *)this + 933));
  printf("%.15f ", *((float *)this + 1007));
  putchar(10);
  return putchar(10);
}

void sub_25909AC48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t H16ISPGetCFPreferenceNumber(const __CFString *a1, const __CFString *a2, uint64_t a3)
{
  CFStringRef v4 = (const __CFString *)CFPreferencesCopyValue(a1, a2, (CFStringRef)*MEMORY[0x263EFFE70], (CFStringRef)*MEMORY[0x263EFFE50]);
  if (v4)
  {
    CFStringRef v5 = v4;
    CFTypeID v6 = CFGetTypeID(v4);
    if (v6 == CFStringGetTypeID())
    {
      uint64_t IntValue = CFStringGetIntValue(v5);
      if (!IntValue)
      {
        CFStringEncoding SystemEncoding = CFStringGetSystemEncoding();
        CStringPtr = CFStringGetCStringPtr(v5, SystemEncoding);
        if (!CStringPtr || (uint64_t IntValue = strtol(CStringPtr, 0, 0), !IntValue))
        {
          uint64_t IntValue = 1;
          if (CFStringCompare(v5, @"true", 1uLL))
          {
            uint64_t IntValue = 1;
            if (CFStringCompare(v5, @"yes", 1uLL))
            {
              if (CFStringCompare(v5, @"false", 1uLL) == kCFCompareEqualTo
                || CFStringCompare(v5, @"no", 1uLL) == kCFCompareEqualTo
                || (uint64_t IntValue = a3, CFStringCompare(v5, @"0", 1uLL) == kCFCompareEqualTo))
              {
                uint64_t IntValue = 0;
              }
            }
          }
        }
      }
    }
    else
    {
      CFTypeID v10 = CFGetTypeID(v5);
      if (v10 == CFNumberGetTypeID())
      {
        unsigned int valuePtr = 0;
        if (CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr)) {
          uint64_t IntValue = valuePtr;
        }
        else {
          uint64_t IntValue = a3;
        }
      }
      else
      {
        CFTypeID v11 = CFGetTypeID(v5);
        uint64_t IntValue = a3;
        if (v11 == CFBooleanGetTypeID()) {
          uint64_t IntValue = CFEqual(v5, (CFTypeRef)*MEMORY[0x263EFFB40]);
        }
      }
    }
    CFRelease(v5);
    return IntValue;
  }
  return a3;
}

void sub_25909C0C0(_Unwind_Exception *a1)
{
  MatrixNxPts<2u,double>::~MatrixNxPts(v1 - 208);
  MatrixNxPts<3u,double>::~MatrixNxPts(v1 - 168);
  MatrixNxPts<2u,double>::~MatrixNxPts(v1 - 128);
  _Unwind_Resume(a1);
}

uint64_t MatrixNxPts<2u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t MatrixNxPts<3u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<3u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void MatrixNxPts<2u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void sub_25909CB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  Matrix<double>::~Matrix((uint64_t)&a10);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a15);
  Matrix<double>::~Matrix((uint64_t)&a20);
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a30);
  Matrix<double>::~Matrix((uint64_t)&a35);
  Matrix<double>::~Matrix(v35 - 184);
  _Unwind_Resume(a1);
}

void sub_25909CBFC()
{
}

void sub_25909CC04()
{
}

void sub_25909CC0C()
{
}

uint64_t MatrixNxPts<1u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,double>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void sub_25909F57C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  _Unwind_Resume(a1);
}

float common::utils::prctile<float>(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = (char *)operator new(0x1C0uLL);
  uint64_t v4 = 0;
  CFStringRef v5 = v3 + 448;
  CFTypeID v6 = v3;
  int v7 = (float *)v3;
  do
  {
    int v9 = *(_DWORD *)(a1 + 4 * v4);
    if (v6 < v5)
    {
      *(_DWORD *)CFTypeID v6 = v9;
      v6 += 4;
      uint64_t v8 = v6;
      goto LABEL_3;
    }
    uint64_t v10 = (v6 - (char *)v7) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if ((v5 - (char *)v7) >> 1 > v11) {
      unint64_t v11 = (v5 - (char *)v7) >> 1;
    }
    if ((unint64_t)(v5 - (char *)v7) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v13 = operator new(4 * v12);
    }
    else
    {
      unint64_t v13 = 0;
    }
    unint64_t v14 = (float *)&v13[4 * v10];
    *(_DWORD *)unint64_t v14 = v9;
    uint64_t v8 = (char *)(v14 + 1);
    if (v6 != (char *)v7)
    {
      unint64_t v15 = v6 - 4 - (char *)v7;
      if (v15 >= 0xBC)
      {
        if (&v13[v6 - (char *)v7 - 4 - (v15 & 0xFFFFFFFFFFFFFFFCLL)] > &v13[v6 - (char *)v7 - 4])
        {
          float v16 = (float *)v6;
        }
        else if (&v6[-(v15 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v6 - 4)
        {
          float v16 = (float *)v6;
        }
        else if ((unint64_t)((char *)v7 - v13) >= 0x20)
        {
          uint64_t v18 = (v15 >> 2) + 1;
          float v16 = (float *)&v6[-4 * (v18 & 0x7FFFFFFFFFFFFFF8)];
          float v19 = &v13[4 * v10 - 16];
          float32x4_t v20 = v6 - 16;
          uint64_t v21 = v18 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v22 = *(_OWORD *)v20;
            *(v19 - 1) = *((_OWORD *)v20 - 1);
            *float v19 = v22;
            v19 -= 2;
            v20 -= 32;
            v21 -= 8;
          }
          while (v21);
          v14 -= v18 & 0x7FFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_19;
          }
        }
        else
        {
          float v16 = (float *)v6;
        }
      }
      else
      {
        float v16 = (float *)v6;
      }
      do
      {
        int v17 = *((_DWORD *)v16-- - 1);
        *((_DWORD *)v14-- - 1) = v17;
      }
      while (v16 != v7);
    }
LABEL_19:
    CFStringRef v5 = &v13[4 * v12];
    if (v7) {
      operator delete(v7);
    }
    CFTypeID v6 = v8;
    int v7 = v14;
LABEL_3:
    ++v4;
  }
  while (v4 != 112);
  std::__sort<std::__less<float,float> &,float *>();
  if (v8 == (char *)v7)
  {
    float v28 = 0.0;
    if (v8) {
      goto LABEL_51;
    }
  }
  else
  {
    unint64_t v23 = (v8 - (char *)v7) >> 2;
    float v24 = (double)(v23 * a2) * 0.01 + 0.5;
    float v25 = floorf(v24);
    if (v24 <= (float)v23 && v24 >= 1.0 && v25 == v24)
    {
      unint64_t v29 = (unint64_t)(float)(v25 + -1.0);
      if (v23 <= v29) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      float v28 = v7[v29];
    }
    else if (v24 >= 1.0)
    {
      if (v24 <= (float)v23)
      {
        unint64_t v30 = (int)v25 - 1;
        if (v23 <= v30 || (unint64_t v31 = (int)(vcvtps_s32_f32(v24) - 1), v23 <= v31)) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        float v28 = v7[v30]
            + (double)v23
            * 0.01
            * ((double)a2 + ((double)(int)v25 * -100.0 + 50.0) / (double)v23)
            * (float)(v7[v31] - v7[v30]);
      }
      else
      {
        float v28 = v7[v23 - 1];
      }
    }
    else
    {
      float v28 = *v7;
    }
LABEL_51:
    operator delete(v7);
  }
  return v28;
}

void sub_25909F908(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

float common::utils::prctile<double>(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = 0;
    CFTypeID v6 = (double *)operator new(8 * a2);
    int v7 = v6;
    uint64_t v8 = &v6[v4];
    while (1)
    {
      uint64_t v10 = *(void *)(a1 + 8 * v5);
      if (v6 >= v8) {
        break;
      }
      *(void *)v6++ = v10;
      int v9 = v6;
LABEL_4:
      if (++v5 == v4) {
        goto LABEL_34;
      }
    }
    uint64_t v11 = v6 - v7;
    unint64_t v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v8 - (char *)v7) >> 2 > v12) {
      unint64_t v12 = ((char *)v8 - (char *)v7) >> 2;
    }
    if ((unint64_t)((char *)v8 - (char *)v7) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v14 = operator new(8 * v13);
    }
    else
    {
      unint64_t v14 = 0;
    }
    unint64_t v15 = (double *)&v14[8 * v11];
    *(void *)unint64_t v15 = v10;
    int v9 = v15 + 1;
    if (v6 != v7)
    {
      unint64_t v16 = (char *)(v6 - 1) - (char *)v7;
      if (v16 >= 0x168)
      {
        if (&v14[(char *)v6 - (char *)v7 - 8 - (v16 & 0xFFFFFFFFFFFFFFF8)] > &v14[(char *)v6 - (char *)v7 - 8])
        {
          int v17 = v6;
        }
        else if ((double *)((char *)v6 - (v16 & 0xFFFFFFFFFFFFFFF8) - 8) > v6 - 1)
        {
          int v17 = v6;
        }
        else if ((unint64_t)((char *)v7 - v14) >= 0x20)
        {
          uint64_t v19 = (v16 >> 3) + 1;
          int v17 = &v6[-(v19 & 0x3FFFFFFFFFFFFFFCLL)];
          float32x4_t v20 = &v14[8 * v11 - 16];
          uint64_t v21 = v6 - 2;
          uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v23 = *(_OWORD *)v21;
            *(v20 - 1) = *((_OWORD *)v21 - 1);
            *float32x4_t v20 = v23;
            v20 -= 2;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v15 -= v19 & 0x3FFFFFFFFFFFFFFCLL;
          if (v19 == (v19 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_20;
          }
        }
        else
        {
          int v17 = v6;
        }
      }
      else
      {
        int v17 = v6;
      }
      do
      {
        uint64_t v18 = *((void *)v17-- - 1);
        *((void *)v15-- - 1) = v18;
      }
      while (v17 != v7);
    }
LABEL_20:
    uint64_t v8 = (double *)&v14[8 * v13];
    if (v7) {
      operator delete(v7);
    }
    CFTypeID v6 = v9;
    int v7 = v15;
    goto LABEL_4;
  }
  int v9 = 0;
  int v7 = 0;
LABEL_34:
  std::__sort<std::__less<double,double> &,double *>();
  if (v9 == v7)
  {
    float v30 = 0.0;
    if (!v9) {
      return v30;
    }
  }
  else
  {
    unint64_t v24 = v9 - v7;
    float v25 = (double)(v24 * a3) * 0.01 + 0.5;
    float v26 = floorf(v25);
    if (v25 <= (float)v24 && v25 >= 1.0 && v26 == v25)
    {
      unint64_t v31 = (unint64_t)(float)(v26 + -1.0);
      if (v24 <= v31) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      double v29 = v7[v31];
    }
    else if (v25 >= 1.0)
    {
      if (v25 <= (float)v24)
      {
        unint64_t v32 = (int)v26 - 1;
        if (v24 <= v32 || (unint64_t v33 = (int)(vcvtps_s32_f32(v25) - 1), v24 <= v33)) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        double v29 = v7[v32]
            + (double)v24 * 0.01 * ((double)a3 + ((double)(int)v26 * -100.0 + 50.0) / (double)v24) * (v7[v33] - v7[v32]);
      }
      else
      {
        double v29 = v7[v24 - 1];
      }
    }
    else
    {
      double v29 = *v7;
    }
    float v30 = v29;
  }
  operator delete(v7);
  return v30;
}

void sub_25909FC68(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590A2790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void **a42)
{
}

void ***std::vector<std::vector<std::vector<float>>>::~vector[abi:ne180100](void ***a1)
{
  float v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        uint64_t v8 = (char *)*(v5 - 3);
        v5 -= 3;
        int v7 = v8;
        if (v8)
        {
          int v9 = (char *)*(v3 - 2);
          CFTypeID v6 = v7;
          if (v9 != v7)
          {
            uint64_t v10 = (char *)*(v3 - 2);
            do
            {
              unint64_t v12 = (void *)*((void *)v10 - 3);
              v10 -= 24;
              uint64_t v11 = v12;
              if (v12)
              {
                *((void *)v9 - 2) = v11;
                operator delete(v11);
              }
              int v9 = v10;
            }
            while (v10 != v7);
            CFTypeID v6 = *v5;
          }
          *(v3 - 2) = v7;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void gmoCoreAnalyticsTelemetry::calcHomogStatsInitialData(gmoCoreAnalyticsTelemetry *this)
{
  unsigned int v2 = time(0);
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v5, v2);
  float v3 = CRandomGenerator::UniformRand((CRandomGenerator *)v5);
  *(int32x2_t *)&this->_coreAnalyticsHomographyAzul.bankId = vcvt_s32_f32(vrnda_f32(vmul_n_f32((float32x2_t)0x4150000040E00000, v3)));
  unsigned __int8 v4 = spotMovementBuckets[llroundf(v3 * 9.0)];
  this->_coreAnalyticsHomographyAzul.spotMovePercentile = v4;
  this->_coreAnalyticsHomographyAzul.prctileMoveBuckets = v4;
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v5);
}

void sub_2590A37B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void gmoCoreAnalyticsTelemetry::reportHomogStats(gmoCoreAnalyticsTelemetry *this)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN25gmoCoreAnalyticsTelemetry16reportHomogStatsEv_block_invoke;
  v8[3] = &__block_descriptor_40_e30___NSObject_OS_xpc_object__8__0l;
  v8[4] = this;
  unsigned int v2 = (void *)MEMORY[0x25A2D68D0](v8);
  int v3 = analytics_send_event_lazy();
  BOOL v4 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v4)
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v10 = "reportHomogStats";
      __int16 v11 = 2080;
      unint64_t v12 = "com.apple.JasperDepth.GMO.HomographyAzul";
      uint64_t v5 = &_os_log_internal;
      CFTypeID v6 = "GMO: %s: Sent the %s event into the diagnostics system";
      uint32_t v7 = 22;
LABEL_6:
      _os_log_impl(&dword_258FEE000, v5, OS_LOG_TYPE_DEFAULT, v6, buf, v7);
    }
  }
  else if (v4)
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v10 = "reportHomogStats";
    __int16 v11 = 2080;
    unint64_t v12 = "com.apple.JasperDepth.GMO.HomographyAzul";
    __int16 v13 = 1024;
    int v14 = v3;
    uint64_t v5 = &_os_log_internal;
    CFTypeID v6 = "GMO: %s: Failed to send the %s event into the diagnostics system with err %d";
    uint32_t v7 = 28;
    goto LABEL_6;
  }
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam5 = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.spotsMovementFromOperationalPercentile = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam2 = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.highAmbient = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.spotsMovementFromNominal2 = 0u;
}

void sub_2590A3968(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *___ZN25gmoCoreAnalyticsTelemetry16reportHomogStatsEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  int v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_BOOL(v2, "HighAmbient", *(unsigned char *)v1);
    xpc_dictionary_set_BOOL(v3, "Hok", *(unsigned char *)(v1 + 1));
    xpc_dictionary_set_BOOL(v3, "HighSpotShift", *(unsigned char *)(v1 + 2));
    xpc_dictionary_set_int64(v3, "BankID", *(int *)(v1 + 4));
    xpc_dictionary_set_int64(v3, "Number_of_qualified_spots", *(int *)(v1 + 12));
    xpc_dictionary_set_double(v3, "Spots_movement_from_Nominal", *(float *)(v1 + 16));
    xpc_dictionary_set_double(v3, "NumberAnchorsMoved", *(float *)(v1 + 20));
    xpc_dictionary_set_int64(v3, "spotMovePercentile", *(unsigned __int8 *)(v1 + 25));
    xpc_dictionary_set_double(v3, "Spots_movement_from_Factory_Percentile", *(float *)(v1 + 28));
    xpc_dictionary_set_double(v3, "Spots_movement_from_Operational_Percentile", *(float *)(v1 + 32));
    xpc_dictionary_set_double(v3, "AnchorMovement_Percentile", *(float *)(v1 + 36));
    xpc_dictionary_set_int64(v3, "NumberSpotsClipped", *(int *)(v1 + 40));
    xpc_dictionary_set_int64(v3, "homography_Number_In_Session", *(unsigned int *)(v1 + 92));
    xpc_dictionary_set_double(v3, "HokClassifierParam1", *(float *)(v1 + 44));
    xpc_dictionary_set_double(v3, "HokClassifierParam2", *(float *)(v1 + 48));
    xpc_dictionary_set_double(v3, "HokClassifierParam3", *(float *)(v1 + 52));
    xpc_dictionary_set_double(v3, "HokClassifierParam4", *(float *)(v1 + 56));
    xpc_dictionary_set_double(v3, "HokClassifierParam5", *(float *)(v1 + 60));
    xpc_dictionary_set_double(v3, "HokClassifierParam6", *(float *)(v1 + 64));
    xpc_dictionary_set_double(v3, "HokClassifierFutureParam7", *(float *)(v1 + 68));
    xpc_dictionary_set_double(v3, "HokClassifierFutureParam8", *(float *)(v1 + 72));
  }
  return v3;
}

void sub_2590A3B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void gmoCoreAnalyticsTelemetry::reportLongTermStats(gmoCoreAnalyticsTelemetry *this)
{
  uint64_t v1 = this;
  uint64_t v79 = *MEMORY[0x263EF8340];
  unsigned int sessionCount = this->_longTermEventPersistentData.sessionCount;
  if (sessionCount < 0x1D)
  {
    if (!this->_isFireLongTermEvent) {
      return;
    }
  }
  else
  {
    this->_isFireLongTermEvent = 1;
  }
  this->_coreAnalyticsLongTerm.sstpPercentageSuccessLongTerm = (float)this->_longTermEventPersistentData.hOkNoViolationsCount
                                                             / (float)this->_longTermEventPersistentData.homogDoneCount;
  if (sessionCount == -1)
  {
    uint64_t v8 = 0;
    int v9 = 0;
    this->_coreAnalyticsLongTerm.sstpSpotMoveP95LongTerm = 0.0;
    double v47 = 0.0;
    goto LABEL_78;
  }
  int v3 = 0;
  BOOL v4 = 0;
  unint64_t v5 = 0;
  CFTypeID v6 = 0;
  uint32_t v7 = 0;
  uint64_t v8 = 0;
  int v9 = 0;
  float v71 = this;
  do
  {
    uint64_t v10 = &v1->_longTermEventPersistentData.calibErrP95Arr[v5];
    if (v3 < v7)
    {
      *v3++ = *v10;
      goto LABEL_27;
    }
    __int16 v11 = v4;
    unint64_t v12 = v6;
    int64_t v13 = (char *)v3 - (char *)v8;
    uint64_t v14 = v3 - v8;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      goto LABEL_96;
    }
    if (((char *)v7 - (char *)v8) >> 1 > v15) {
      unint64_t v15 = ((char *)v7 - (char *)v8) >> 1;
    }
    if ((unint64_t)((char *)v7 - (char *)v8) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v15;
    }
    if (v16)
    {
      if (v16 >> 62) {
        goto LABEL_97;
      }
      int v17 = v3;
      uint64_t v18 = operator new(4 * v16);
      int v3 = v17;
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (float *)&v18[4 * v14];
    *uint64_t v19 = *v10;
    float32x4_t v20 = v19 + 1;
    if (v3 == v8)
    {
      uint64_t v1 = v71;
      CFTypeID v6 = v12;
      BOOL v4 = v11;
      uint32_t v7 = (float *)&v18[4 * v16];
      if (!v8) {
        goto LABEL_26;
      }
LABEL_25:
      operator delete(v8);
      goto LABEL_26;
    }
    unint64_t v21 = (char *)(v3 - 1) - (char *)v8;
    if (v21 < 0xBC
      || &v18[v13 - 4 - (v21 & 0xFFFFFFFFFFFFFFFCLL)] > &v18[v13 - 4]
      || (float *)((char *)v3 - (v21 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v3 - 1
      || (unint64_t)((char *)v3 - &v18[v13]) < 0x20)
    {
      uint64_t v22 = v3;
      uint64_t v1 = v71;
      CFTypeID v6 = v12;
      BOOL v4 = v11;
      do
      {
LABEL_23:
        int v23 = *((_DWORD *)v22-- - 1);
        *((_DWORD *)v19-- - 1) = v23;
      }
      while (v22 != v8);
      goto LABEL_24;
    }
    uint64_t v37 = (v21 >> 2) + 1;
    uint64_t v22 = &v3[-(v37 & 0x7FFFFFFFFFFFFFF8)];
    float v38 = &v18[4 * v14 - 16];
    uint64_t v39 = v3 - 4;
    uint64_t v40 = v37 & 0x7FFFFFFFFFFFFFF8;
    CFTypeID v6 = v12;
    do
    {
      long long v41 = *(_OWORD *)v39;
      *(v38 - 1) = *((_OWORD *)v39 - 1);
      *float v38 = v41;
      v38 -= 2;
      v39 -= 8;
      v40 -= 8;
    }
    while (v40);
    v19 -= v37 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v1 = v71;
    BOOL v4 = v11;
    if (v37 != (v37 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_23;
    }
LABEL_24:
    uint32_t v7 = (float *)&v18[4 * v16];
    if (v8) {
      goto LABEL_25;
    }
LABEL_26:
    uint64_t v8 = v19;
    int v3 = v20;
LABEL_27:
    unint64_t v24 = &v1->_longTermEventPersistentData.calibErrP50Arr[v5];
    if (v4 < v6)
    {
      *v4++ = *v24;
      goto LABEL_7;
    }
    uint64_t v25 = v4 - v9;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62) {
LABEL_96:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    if (((char *)v6 - (char *)v9) >> 1 > v26) {
      unint64_t v26 = ((char *)v6 - (char *)v9) >> 1;
    }
    if ((unint64_t)((char *)v6 - (char *)v9) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v27 = v26;
    }
    if (v27)
    {
      if (v27 >> 62) {
LABEL_97:
      }
        std::__throw_bad_array_new_length[abi:ne180100]();
      float v28 = v3;
      double v29 = operator new(4 * v27);
      int v3 = v28;
    }
    else
    {
      double v29 = 0;
    }
    float v30 = (float *)&v29[4 * v25];
    *float v30 = *v24;
    unint64_t v31 = v30 + 1;
    if (v4 == v9)
    {
      uint64_t v1 = v71;
      CFTypeID v6 = (float *)&v29[4 * v27];
      if (!v9) {
        goto LABEL_44;
      }
LABEL_43:
      uint64_t v35 = v9;
      uint64_t v36 = v3;
      operator delete(v35);
      int v3 = v36;
      goto LABEL_44;
    }
    unint64_t v32 = (char *)(v4 - 1) - (char *)v9;
    if (v32 < 0xBC
      || &v29[(char *)v4 - (char *)v9 - 4 - (v32 & 0xFFFFFFFFFFFFFFFCLL)] > &v29[(char *)v4 - (char *)v9 - 4]
      || (float *)((char *)v4 - (v32 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v4 - 1
      || (unint64_t)((char *)v9 - v29) < 0x20)
    {
      unint64_t v33 = v4;
      uint64_t v1 = v71;
      do
      {
LABEL_41:
        int v34 = *((_DWORD *)v33-- - 1);
        *((_DWORD *)v30-- - 1) = v34;
      }
      while (v33 != v9);
      goto LABEL_42;
    }
    uint64_t v42 = (v32 >> 2) + 1;
    unint64_t v33 = &v4[-(v42 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v43 = &v29[4 * v25 - 16];
    int v44 = v4 - 4;
    uint64_t v45 = v42 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *unint64_t v43 = v46;
      v43 -= 2;
      v44 -= 8;
      v45 -= 8;
    }
    while (v45);
    v30 -= v42 & 0x7FFFFFFFFFFFFFF8;
    uint64_t v1 = v71;
    if (v42 != (v42 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_41;
    }
LABEL_42:
    CFTypeID v6 = (float *)&v29[4 * v27];
    if (v9) {
      goto LABEL_43;
    }
LABEL_44:
    int v9 = v30;
    BOOL v4 = v31;
LABEL_7:
    ++v5;
  }
  while (v5 < v1->_longTermEventPersistentData.sessionCount + 1);
  double v47 = 0.0;
  double v48 = 0.0;
  if (v8 != v3)
  {
    char v49 = (_BYTE)v3 - (_BYTE)v8;
    uint64_t v50 = ((char *)v3 - (char *)v8) >> 3;
    uint64_t v51 = &v8[v50];
    if (v51 != v3)
    {
      unint64_t v52 = v3;
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v8, &v8[v50], v3);
      int v3 = v52;
    }
    double v48 = *v51;
    if ((v49 & 4) == 0)
    {
      unint64_t v53 = v51 - 1;
      if (v53 != v3) {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v8, v53, v3);
      }
      double v48 = (*v53 + v48) * 0.5;
    }
  }
  float v54 = v48;
  v1->_coreAnalyticsLongTerm.sstpSpotMoveP95LongTerm = v54;
  if (v9 != v4)
  {
    uint64_t v55 = ((char *)v4 - (char *)v9) >> 3;
    unint64_t v56 = &v9[v55];
    if (v56 != v4) {
      std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v9, &v9[v55], v4);
    }
    double v47 = *v56;
    if ((((_BYTE)v4 - (_BYTE)v9) & 4) == 0)
    {
      int v57 = v56 - 1;
      if (v57 != v4) {
        std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(v9, v57, v4);
      }
      double v47 = (*v57 + v47) * 0.5;
    }
  }
LABEL_78:
  float v58 = v47;
  v1->_coreAnalyticsLongTerm.sstpSpotMoveP50LongTerm = v58;
  uint64_t v59 = objc_msgSend(MEMORY[0x263EFF8F0], "currentCalendar", v71);
  uint64_t v60 = [MEMORY[0x263EFF910] date];
  int64_t v61 = [v59 components:28 fromDate:v60];

  unsigned int lastEventYear = v1->_longTermEventPersistentData.lastEventYear;
  if (lastEventYear
    && v1->_longTermEventPersistentData.lastEventMonth
    && lastEventYear == [v61 year]
    && ((unsigned int v63 = v1->_longTermEventPersistentData.lastEventYear, v63 != [v61 year])
     || (unsigned int lastEventMonth = v1->_longTermEventPersistentData.lastEventMonth,
         lastEventMonth >= [v61 month])))
  {
    v1->_coreAnalyticsLongTerm.firstEventInMonthLongTerm = 0;
  }
  else
  {
    v1->_coreAnalyticsLongTerm.firstEventInMonthLongTerm = 1;
    v1->_longTermEventPersistentData.unsigned int lastEventYear = [v61 year];
    v1->_longTermEventPersistentData.unsigned int lastEventMonth = [v61 month];
  }
  v72[0] = MEMORY[0x263EF8330];
  v72[1] = 3221225472;
  v72[2] = ___ZN25gmoCoreAnalyticsTelemetry19reportLongTermStatsEv_block_invoke;
  v72[3] = &__block_descriptor_40_e30___NSObject_OS_xpc_object__8__0l;
  v72[4] = v1;
  uint64_t v65 = (void *)MEMORY[0x25A2D68D0](v72);
  int v66 = analytics_send_event_lazy();
  BOOL v67 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
  if (v66)
  {
    if (v67)
    {
      *(_DWORD *)buf = 136315394;
      uint64_t v74 = "reportLongTermStats";
      __int16 v75 = 2080;
      uint64_t v76 = "com.apple.JasperDepth.GMO.longTerm";
      unint64_t v68 = &_os_log_internal;
      unint64_t v69 = "GMO: %s: Sent the %s event into the diagnostics system";
      uint32_t v70 = 22;
      goto LABEL_89;
    }
  }
  else if (v67)
  {
    *(_DWORD *)buf = 136315650;
    uint64_t v74 = "reportLongTermStats";
    __int16 v75 = 2080;
    uint64_t v76 = "com.apple.JasperDepth.GMO.longTerm";
    __int16 v77 = 1024;
    int v78 = v66;
    unint64_t v68 = &_os_log_internal;
    unint64_t v69 = "GMO: %s: Failed to send the %s event into the diagnostics system with err %d";
    uint32_t v70 = 28;
LABEL_89:
    _os_log_impl(&dword_258FEE000, v68, OS_LOG_TYPE_DEFAULT, v69, buf, v70);
  }
  *(void *)&v1->_homogTrackingLongTermCounter = 0;

  if (v9) {
    operator delete(v9);
  }
  if (v8) {
    operator delete(v8);
  }
}

void sub_2590A42B0(_Unwind_Exception *a1)
{
  if (v1) {
    operator delete(v1);
  }
  if (!v4) {
    _Unwind_Resume(a1);
  }
  operator delete(v4);
  _Unwind_Resume(a1);
}

float *std::__nth_element[abi:ne180100]<std::_ClassicAlgPolicy,std::__less<void,void> &,std::__wrap_iter<float *>>(float *result, float *a2, float *a3)
{
  if (a3 != a2)
  {
    while (1)
    {
      unint64_t v3 = a3 - result;
      if (v3 < 2) {
        return result;
      }
      if (v3 == 3)
      {
        float v40 = *result;
        float v41 = result[1];
        float v42 = *(a3 - 1);
        if (v41 >= *result)
        {
          if (v42 < v41)
          {
            result[1] = v42;
            *(a3 - 1) = v41;
            float v52 = *result;
            float v51 = result[1];
            if (v51 < *result)
            {
              *__n128 result = v51;
              result[1] = v52;
            }
          }
        }
        else if (v42 >= v41)
        {
          *__n128 result = v41;
          result[1] = v40;
          float v53 = *(a3 - 1);
          if (v53 < v40)
          {
            result[1] = v53;
            *(a3 - 1) = v40;
          }
        }
        else
        {
          *__n128 result = v42;
          *(a3 - 1) = v40;
        }
        return result;
      }
      if (v3 == 2)
      {
        float v38 = *(a3 - 1);
        float v39 = *result;
        if (v38 < *result)
        {
          *__n128 result = v38;
          *(a3 - 1) = v39;
        }
        return result;
      }
      if ((char *)a3 - (char *)result <= 31)
      {
        while (result != a3 - 1)
        {
          unint64_t v43 = result++;
          if (v43 != a3 && result != a3)
          {
            float v44 = *v43;
            float v45 = *v43;
            long long v46 = result;
            double v47 = v43;
            double v48 = result;
            do
            {
              float v49 = *v48++;
              float v50 = v49;
              if (v49 < v45)
              {
                float v45 = v50;
                double v47 = v46;
              }
              long long v46 = v48;
            }
            while (v48 != a3);
            if (v47 != v43)
            {
              *unint64_t v43 = *v47;
              *double v47 = v44;
            }
          }
        }
        return result;
      }
      BOOL v4 = &result[v3 >> 1];
      unint64_t v5 = a3 - 1;
      float v6 = *(a3 - 1);
      float v7 = *v4;
      float v8 = *result;
      if (*v4 < *result) {
        break;
      }
      if (v6 < v7)
      {
        *BOOL v4 = v6;
        float *v5 = v7;
        float v9 = *result;
        if (*v4 < *result)
        {
          *__n128 result = *v4;
          *BOOL v4 = v9;
LABEL_14:
          int v10 = 2;
          goto LABEL_17;
        }
        goto LABEL_15;
      }
      int v10 = 0;
LABEL_17:
      float v11 = *result;
      if (*result < *v4)
      {
LABEL_22:
        unint64_t v16 = result + 1;
        if (result + 1 >= v5)
        {
          uint64_t v19 = result + 1;
        }
        else
        {
          int v17 = result + 1;
          while (1)
          {
            float v18 = *v4;
            do
            {
              uint64_t v19 = v17;
              float v20 = *v17++;
              float v21 = v20;
            }
            while (v20 < v18);
            do
            {
              float v22 = *--v5;
              float v23 = v22;
            }
            while (v22 >= v18);
            if (v19 >= v5) {
              break;
            }
            *uint64_t v19 = v23;
            float *v5 = v21;
            ++v10;
            if (v4 == v19) {
              BOOL v4 = v5;
            }
          }
        }
        if (v19 != v4)
        {
          float v24 = *v19;
          if (*v4 < *v19)
          {
            *uint64_t v19 = *v4;
            *BOOL v4 = v24;
            ++v10;
          }
        }
        if (v19 == a2) {
          return result;
        }
        if (!v10)
        {
          if (v19 <= a2)
          {
            float v30 = v19 + 1;
            while (v30 != a3)
            {
              float v32 = *(v30 - 1);
              float v31 = *v30++;
              if (v31 < v32) {
                goto LABEL_37;
              }
            }
          }
          else
          {
            while (v16 != v19)
            {
              float v27 = *(v16 - 1);
              float v26 = *v16++;
              if (v26 < v27) {
                goto LABEL_37;
              }
            }
          }
          return result;
        }
LABEL_37:
        if (v19 <= a2)
        {
          uint64_t v25 = v19 + 1;
        }
        else
        {
          a3 = v19;
          uint64_t v25 = result;
        }
      }
      else
      {
        unint64_t v12 = a3 - 2;
        while (v12 != result)
        {
          int64_t v13 = v12;
          float v14 = *v12--;
          float v15 = v14;
          if (v14 < *v4)
          {
            *__n128 result = v15;
            *int64_t v13 = v11;
            ++v10;
            unint64_t v5 = v13;
            goto LABEL_22;
          }
        }
        float v28 = result + 1;
        if (v11 >= *v5)
        {
          if (v28 == v5) {
            return result;
          }
          while (1)
          {
            float v29 = *v28;
            if (v11 < *v28) {
              break;
            }
            if (++v28 == v5) {
              return result;
            }
          }
          *v28++ = *v5;
          float *v5 = v29;
        }
        if (v28 == v5) {
          return result;
        }
        while (1)
        {
          float v33 = *result;
          do
          {
            uint64_t v25 = v28;
            float v34 = *v28++;
            float v35 = v34;
          }
          while (v33 >= v34);
          do
          {
            float v36 = *--v5;
            float v37 = v36;
          }
          while (v33 < v36);
          if (v25 >= v5) {
            break;
          }
          *uint64_t v25 = v37;
          float *v5 = v35;
        }
        if (v25 > a2) {
          return result;
        }
      }
      __n128 result = v25;
      if (a3 == a2) {
        return result;
      }
    }
    if (v6 >= v7)
    {
      *__n128 result = v7;
      *BOOL v4 = v8;
      if (*v5 < v8)
      {
        *BOOL v4 = *v5;
        float *v5 = v8;
        goto LABEL_14;
      }
    }
    else
    {
      *__n128 result = v6;
      float *v5 = v8;
    }
LABEL_15:
    int v10 = 1;
    goto LABEL_17;
  }
  return result;
}

void *___ZN25gmoCoreAnalyticsTelemetry19reportLongTermStatsEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  unint64_t v3 = v2;
  if (v2)
  {
    xpc_dictionary_set_BOOL(v2, "longTermEventFirstInMonth", *(unsigned char *)(v1 + 76));
    xpc_dictionary_set_double(v3, "SSTP_Percent_success_long_term", *(float *)(v1 + 88));
    xpc_dictionary_set_double(v3, "SSTP_Spot_move_P95_long_term", *(float *)(v1 + 80));
    xpc_dictionary_set_double(v3, "SSTP_Spot_move_P50_long_term", *(float *)(v1 + 84));
  }
  return v3;
}

void sub_2590A471C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float gmoCoreAnalyticsTelemetry::setHomogMetrics(gmoCoreAnalyticsTelemetry *this, GmoMetrics *a2)
{
  uint64_t sessionCount = this->_longTermEventPersistentData.sessionCount;
  if (sessionCount >= 0x1E) {
    __assert_rtn("setHomogMetrics", "gmoCoreAnalyticsTelemetry.mm", 190, "_longTermEventPersistentData.sessionCount < kGmoCaLongTermEventFireTriggerSessionCount");
  }
  unint64_t v3 = &this->_coreAnalyticsHomographyAzul.highAmbient + 4 * sessionCount;
  *((_DWORD *)v3 + 29) = LODWORD(a2->var6);
  *((_DWORD *)v3 + 59) = LODWORD(a2->var10);
  float var6 = a2->var6;
  double var5 = a2->var5;
  this->_coreAnalyticsHomographyAzul.highAmbient = a2->var0 > 0.15;
  this->_coreAnalyticsHomographyAzul.highSpotShift = var5 > 0.8;
  this->_coreAnalyticsHomographyAzul.hokClassifierParam1 = a2->var8 - var6;
  uint64_t v6 = *(void *)&a2->var1;
  this->_coreAnalyticsHomographyAzul.hokClassifierParam4 = a2->var3;
  *(void *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam2 = v6;
  *(float32x2_t *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam5 = vabs_f32((float32x2_t)vrev64_s32(*(int32x2_t *)&a2->var11));
  float result = vabds_f32(a2->var9, a2->var7);
  *(float *)&double var5 = a2->var4;
  this->_coreAnalyticsHomographyAzul.hokClassifierFutureParam7 = result;
  this->_coreAnalyticsHomographyAzul.hokClassifierFutureParam8 = *(float *)&var5;
  return result;
}

float gmoCoreAnalyticsTelemetry::setHOk(gmoCoreAnalyticsTelemetry *this, BOOL a2, int a3)
{
  this->_coreAnalyticsHomographyAzul.hOk = a2;
  unsigned int homogSuccessfulTrackingLongTermCounter = this->_homogSuccessfulTrackingLongTermCounter;
  if (a2 && a3)
  {
    this->_unsigned int homogSuccessfulTrackingLongTermCounter = ++homogSuccessfulTrackingLongTermCounter;
    ++this->_homogSuccessfulTrackingCounter;
  }
  *(int32x2_t *)&this->_longTermEventPersistentData.hOkNoViolationsCount = vadd_s32(*(int32x2_t *)&this->_longTermEventPersistentData.hOkNoViolationsCount, (int32x2_t)(a2 | 0x100000000));
  unsigned int v4 = this->_homogTrackingLongTermCounter + 1;
  this->_homogTrackingLongTermCounter = v4;
  float result = (float)homogSuccessfulTrackingLongTermCounter / (float)v4;
  this->_coreAnalyticsLongTerm.sstpPercentageSuccessLongTerm = result;
  return result;
}

gmoCoreAnalyticsTelemetry *gmoCoreAnalyticsTelemetry::setNumQualifiedSpots(gmoCoreAnalyticsTelemetry *this, int a2)
{
  this->_coreAnalyticsHomographyAzul.numQualifiedSpots = a2;
  return this;
}

void gmoCoreAnalyticsTelemetry::setSpotsMovement(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  v662[56] = *MEMORY[0x263EF8340];
  float32x2_t v5 = vsub_f32(a4[14 * *(int *)(a1 + 4) + *(int *)(a1 + 8)], a2[14 * *(int *)(a1 + 4) + *(int *)(a1 + 8)]);
  *(float *)(a1 + 16) = sqrtf(vaddv_f32(vmul_f32(v5, v5)));
  float32x2_t v6 = a4[1];
  float32x2_t v7 = vsub_f32(*a4, *a2);
  float32x2_t v8 = vmul_f32(v7, v7);
  float32x2_t v9 = vsub_f32(*a4, *a3);
  float32x2_t v10 = vmul_f32(v9, v9);
  float32x2_t v11 = vsub_f32(v6, a2[1]);
  float32x2_t v12 = vmul_f32(v11, v11);
  float32x2_t v13 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v8, 1), v8), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v12)));
  float32x2_t v14 = vsub_f32(v6, a3[1]);
  float32x2_t v15 = vmul_f32(v14, v14);
  float32x2_t v16 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v15, 1), v15)));
  float32x2_t v17 = a4[2];
  float32x2_t v18 = a4[3];
  float32x2_t v19 = vsub_f32(v17, a2[2]);
  float32x2_t v20 = vmul_f32(v19, v19);
  float32x2_t v21 = vsub_f32(v17, a3[2]);
  float32x2_t v22 = vmul_f32(v21, v21);
  float32x2_t v23 = vsub_f32(v18, a2[3]);
  float32x2_t v24 = vmul_f32(v23, v23);
  float32x2_t v25 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v20, 1), v20), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v24, 1), v24)));
  float32x2_t v26 = vsub_f32(v18, a3[3]);
  float32x2_t v27 = vmul_f32(v26, v26);
  float32x2_t v28 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 1), v22), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27)));
  float32x2_t v29 = a4[4];
  float32x2_t v30 = a4[5];
  float32x2_t v31 = vsub_f32(v29, a2[4]);
  float32x2_t v32 = vmul_f32(v31, v31);
  float32x2_t v33 = a3[5];
  float32x2_t v34 = vsub_f32(v29, a3[4]);
  float32x2_t v35 = vmul_f32(v34, v34);
  float32x2_t v36 = vsub_f32(v30, a2[5]);
  v662[0] = v13;
  v662[1] = v25;
  float32x2_t v37 = vmul_f32(v36, v36);
  float32x2_t v38 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v37, 1), v37)));
  float32x2_t v39 = vsub_f32(v30, v33);
  float32x2_t v40 = vmul_f32(v39, v39);
  float32x2_t v41 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v35, 1), v35), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v40, 1), v40)));
  float32x2_t v42 = a4[6];
  float32x2_t v43 = a4[7];
  float32x2_t v44 = a2[7];
  float32x2_t v45 = vsub_f32(v42, a2[6]);
  float32x2_t v46 = vmul_f32(v45, v45);
  float32x2_t v47 = a3[7];
  float32x2_t v48 = vsub_f32(v42, a3[6]);
  float32x2_t v49 = vmul_f32(v48, v48);
  v661[0] = v16;
  v661[1] = v28;
  float32x2_t v50 = vsub_f32(v43, v44);
  float32x2_t v51 = vmul_f32(v50, v50);
  v662[2] = v38;
  v662[3] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v46, 1), v46), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v51, 1), v51)));
  float32x2_t v52 = vsub_f32(v43, v47);
  float32x2_t v53 = vmul_f32(v52, v52);
  float32x2_t v54 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v49, 1), v49), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v53, 1), v53)));
  float32x2_t v55 = a4[8];
  float32x2_t v56 = a4[9];
  float32x2_t v57 = a2[9];
  float32x2_t v58 = vsub_f32(v55, a2[8]);
  float32x2_t v59 = vmul_f32(v58, v58);
  float32x2_t v60 = a3[9];
  float32x2_t v61 = vsub_f32(v55, a3[8]);
  float32x2_t v62 = vmul_f32(v61, v61);
  v661[2] = v41;
  v661[3] = v54;
  float32x2_t v63 = vsub_f32(v56, v57);
  float32x2_t v64 = vmul_f32(v63, v63);
  float32x2_t v65 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v59, 1), v59), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v64, 1), v64)));
  float32x2_t v66 = vsub_f32(v56, v60);
  float32x2_t v67 = vmul_f32(v66, v66);
  float32x2_t v68 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v62, 1), v62), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v67, 1), v67)));
  float32x2_t v69 = a4[10];
  float32x2_t v70 = a4[11];
  float32x2_t v71 = vsub_f32(v69, a2[10]);
  float32x2_t v72 = vmul_f32(v71, v71);
  float32x2_t v73 = a3[11];
  float32x2_t v74 = vsub_f32(v69, a3[10]);
  float32x2_t v75 = vmul_f32(v74, v74);
  float32x2_t v76 = vsub_f32(v70, a2[11]);
  float32x2_t v77 = vmul_f32(v76, v76);
  v662[4] = v65;
  v662[5] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v72, 1), v72), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v77, 1), v77)));
  float32x2_t v78 = vsub_f32(v70, v73);
  float32x2_t v79 = vmul_f32(v78, v78);
  v661[4] = v68;
  v661[5] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v75, 1), v75), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v79, 1), v79)));
  float32x2_t v80 = a4[12];
  float32x2_t v81 = a4[13];
  float32x2_t v82 = vsub_f32(v80, a2[12]);
  float32x2_t v83 = vmul_f32(v82, v82);
  float32x2_t v84 = vsub_f32(v80, a3[12]);
  float32x2_t v85 = vmul_f32(v84, v84);
  float32x2_t v86 = vsub_f32(v81, a2[13]);
  float32x2_t v87 = vmul_f32(v86, v86);
  float32x2_t v88 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v83, 1), v83), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v87, 1), v87)));
  float32x2_t v89 = vsub_f32(v81, a3[13]);
  float32x2_t v90 = vmul_f32(v89, v89);
  float32x2_t v91 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v85, 1), v85), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v90, 1), v90)));
  float32x2_t v92 = a4[14];
  float32x2_t v93 = a4[15];
  float32x2_t v94 = vsub_f32(v92, a2[14]);
  float32x2_t v95 = vmul_f32(v94, v94);
  float32x2_t v96 = a3[15];
  float32x2_t v97 = vsub_f32(v92, a3[14]);
  float32x2_t v98 = vmul_f32(v97, v97);
  float32x2_t v99 = vsub_f32(v93, a2[15]);
  float32x2_t v100 = vmul_f32(v99, v99);
  v662[6] = v88;
  v662[7] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v95, 1), v95), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v100, 1), v100)));
  float32x2_t v101 = vsub_f32(v93, v96);
  float32x2_t v102 = vmul_f32(v101, v101);
  float32x2_t v103 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v98, 1), v98), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v102, 1), v102)));
  float32x2_t v104 = a4[16];
  float32x2_t v105 = a4[17];
  float32x2_t v106 = a2[17];
  float32x2_t v107 = vsub_f32(v104, a2[16]);
  float32x2_t v108 = vmul_f32(v107, v107);
  v661[6] = v91;
  v661[7] = v103;
  float32x2_t v109 = vsub_f32(v104, a3[16]);
  float32x2_t v110 = vmul_f32(v109, v109);
  float32x2_t v111 = vsub_f32(v105, v106);
  float32x2_t v112 = vmul_f32(v111, v111);
  float32x2_t v113 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v108, 1), v108), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v112, 1), v112)));
  float32x2_t v114 = vsub_f32(v105, a3[17]);
  float32x2_t v115 = vmul_f32(v114, v114);
  float32x2_t v116 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v110, 1), v110), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v115, 1), v115));
  float32x2_t v117 = a4[18];
  float32x2_t v118 = a4[19];
  float32x2_t v119 = vsub_f32(v117, a2[18]);
  float32x2_t v120 = vmul_f32(v119, v119);
  float32x2_t v121 = a3[19];
  float32x2_t v122 = vsub_f32(v117, a3[18]);
  float32x2_t v123 = vmul_f32(v122, v122);
  float32x2_t v124 = vsub_f32(v118, a2[19]);
  float32x2_t v125 = vmul_f32(v124, v124);
  v662[8] = v113;
  v662[9] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v120, 1), v120), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v125, 1), v125)));
  float32x2_t v126 = vsub_f32(v118, v121);
  float32x2_t v127 = vmul_f32(v126, v126);
  v661[8] = vsqrt_f32(v116);
  v661[9] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v123, 1), v123), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v127, 1), v127)));
  float32x2_t v128 = a4[20];
  float32x2_t v129 = a4[21];
  float32x2_t v130 = vsub_f32(v128, a2[20]);
  float32x2_t v131 = vmul_f32(v130, v130);
  float32x2_t v132 = vsub_f32(v128, a3[20]);
  float32x2_t v133 = vmul_f32(v132, v132);
  float32x2_t v134 = vsub_f32(v129, a2[21]);
  float32x2_t v135 = vmul_f32(v134, v134);
  float32x2_t v136 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v131, 1), v131), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v135, 1), v135)));
  float32x2_t v137 = vsub_f32(v129, a3[21]);
  float32x2_t v138 = vmul_f32(v137, v137);
  float32x2_t v139 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v133, 1), v133), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v138, 1), v138)));
  float32x2_t v140 = a4[22];
  float32x2_t v141 = a4[23];
  float32x2_t v142 = vsub_f32(v140, a2[22]);
  float32x2_t v143 = vmul_f32(v142, v142);
  float32x2_t v144 = a3[23];
  float32x2_t v145 = vsub_f32(v140, a3[22]);
  float32x2_t v146 = vmul_f32(v145, v145);
  float32x2_t v147 = vsub_f32(v141, a2[23]);
  float32x2_t v148 = vmul_f32(v147, v147);
  v662[10] = v136;
  v662[11] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v143, 1), v143), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v148, 1), v148)));
  float32x2_t v149 = vsub_f32(v141, v144);
  float32x2_t v150 = vmul_f32(v149, v149);
  v661[10] = v139;
  v661[11] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v146, 1), v146), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v150, 1), v150)));
  float32x2_t v151 = a4[24];
  float32x2_t v152 = a4[25];
  float32x2_t v153 = vsub_f32(v151, a2[24]);
  float32x2_t v154 = vmul_f32(v153, v153);
  float32x2_t v155 = vsub_f32(v151, a3[24]);
  float32x2_t v156 = vmul_f32(v155, v155);
  float32x2_t v157 = vsub_f32(v152, a2[25]);
  float32x2_t v158 = vmul_f32(v157, v157);
  float32x2_t v159 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v154, 1), v154), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v158, 1), v158)));
  float32x2_t v160 = vsub_f32(v152, a3[25]);
  float32x2_t v161 = vmul_f32(v160, v160);
  float32x2_t v162 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v156, 1), v156), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v161, 1), v161)));
  float32x2_t v163 = a4[26];
  float32x2_t v164 = a4[27];
  float32x2_t v165 = vsub_f32(v163, a2[26]);
  float32x2_t v166 = vmul_f32(v165, v165);
  float32x2_t v167 = a3[27];
  float32x2_t v168 = vsub_f32(v163, a3[26]);
  float32x2_t v169 = vmul_f32(v168, v168);
  float32x2_t v170 = vsub_f32(v164, a2[27]);
  float32x2_t v171 = vmul_f32(v170, v170);
  v662[12] = v159;
  v662[13] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v166, 1), v166), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v171, 1), v171)));
  float32x2_t v172 = vsub_f32(v164, v167);
  float32x2_t v173 = vmul_f32(v172, v172);
  float32x2_t v174 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v169, 1), v169), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v173, 1), v173)));
  float32x2_t v175 = a4[28];
  float32x2_t v176 = a4[29];
  float32x2_t v177 = a2[29];
  float32x2_t v178 = vsub_f32(v175, a2[28]);
  float32x2_t v179 = vmul_f32(v178, v178);
  v661[12] = v162;
  v661[13] = v174;
  float32x2_t v180 = vsub_f32(v175, a3[28]);
  float32x2_t v181 = vmul_f32(v180, v180);
  float32x2_t v182 = vsub_f32(v176, v177);
  float32x2_t v183 = vmul_f32(v182, v182);
  float32x2_t v184 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v179, 1), v179), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v183, 1), v183)));
  float32x2_t v185 = vsub_f32(v176, a3[29]);
  float32x2_t v186 = vmul_f32(v185, v185);
  float32x2_t v187 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v181, 1), v181), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v186, 1), v186));
  float32x2_t v188 = a4[30];
  float32x2_t v189 = a4[31];
  float32x2_t v190 = vsub_f32(v188, a2[30]);
  float32x2_t v191 = vmul_f32(v190, v190);
  float32x2_t v192 = a3[31];
  float32x2_t v193 = vsub_f32(v188, a3[30]);
  float32x2_t v194 = vmul_f32(v193, v193);
  float32x2_t v195 = vsub_f32(v189, a2[31]);
  float32x2_t v196 = vmul_f32(v195, v195);
  v662[14] = v184;
  v662[15] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v191, 1), v191), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v196, 1), v196)));
  float32x2_t v197 = vsub_f32(v189, v192);
  float32x2_t v198 = vmul_f32(v197, v197);
  v661[14] = vsqrt_f32(v187);
  v661[15] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v194, 1), v194), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v198, 1), v198)));
  float32x2_t v199 = a4[32];
  float32x2_t v200 = a4[33];
  float32x2_t v201 = vsub_f32(v199, a2[32]);
  float32x2_t v202 = vmul_f32(v201, v201);
  float32x2_t v203 = vsub_f32(v199, a3[32]);
  float32x2_t v204 = vmul_f32(v203, v203);
  float32x2_t v205 = vsub_f32(v200, a2[33]);
  float32x2_t v206 = vmul_f32(v205, v205);
  float32x2_t v207 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v202, 1), v202), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v206, 1), v206)));
  float32x2_t v208 = vsub_f32(v200, a3[33]);
  float32x2_t v209 = vmul_f32(v208, v208);
  float32x2_t v210 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v204, 1), v204), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v209, 1), v209)));
  float32x2_t v211 = a4[34];
  float32x2_t v212 = a4[35];
  float32x2_t v213 = vsub_f32(v211, a2[34]);
  float32x2_t v214 = vmul_f32(v213, v213);
  float32x2_t v215 = a3[35];
  float32x2_t v216 = vsub_f32(v211, a3[34]);
  float32x2_t v217 = vmul_f32(v216, v216);
  float32x2_t v218 = vsub_f32(v212, a2[35]);
  float32x2_t v219 = vmul_f32(v218, v218);
  v662[16] = v207;
  v662[17] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v214, 1), v214), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v219, 1), v219)));
  float32x2_t v220 = vsub_f32(v212, v215);
  float32x2_t v221 = vmul_f32(v220, v220);
  v661[16] = v210;
  v661[17] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v217, 1), v217), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v221, 1), v221)));
  float32x2_t v222 = a4[36];
  float32x2_t v223 = a4[37];
  float32x2_t v224 = vsub_f32(v222, a2[36]);
  float32x2_t v225 = vmul_f32(v224, v224);
  float32x2_t v226 = vsub_f32(v222, a3[36]);
  float32x2_t v227 = vmul_f32(v226, v226);
  float32x2_t v228 = vsub_f32(v223, a2[37]);
  float32x2_t v229 = vmul_f32(v228, v228);
  float32x2_t v230 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v225, 1), v225), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v229, 1), v229)));
  float32x2_t v231 = vsub_f32(v223, a3[37]);
  float32x2_t v232 = vmul_f32(v231, v231);
  float32x2_t v233 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v227, 1), v227), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v232, 1), v232)));
  float32x2_t v234 = a4[38];
  float32x2_t v235 = a4[39];
  float32x2_t v236 = vsub_f32(v234, a2[38]);
  float32x2_t v237 = vmul_f32(v236, v236);
  float32x2_t v238 = a3[39];
  float32x2_t v239 = vsub_f32(v234, a3[38]);
  float32x2_t v240 = vmul_f32(v239, v239);
  float32x2_t v241 = vsub_f32(v235, a2[39]);
  float32x2_t v242 = vmul_f32(v241, v241);
  v662[18] = v230;
  v662[19] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v237, 1), v237), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v242, 1), v242)));
  float32x2_t v243 = vsub_f32(v235, v238);
  float32x2_t v244 = vmul_f32(v243, v243);
  float32x2_t v245 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v240, 1), v240), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v244, 1), v244)));
  float32x2_t v246 = a4[40];
  float32x2_t v247 = a4[41];
  float32x2_t v248 = a2[41];
  float32x2_t v249 = vsub_f32(v246, a2[40]);
  float32x2_t v250 = vmul_f32(v249, v249);
  v661[18] = v233;
  v661[19] = v245;
  float32x2_t v251 = vsub_f32(v246, a3[40]);
  float32x2_t v252 = vmul_f32(v251, v251);
  float32x2_t v253 = vsub_f32(v247, v248);
  float32x2_t v254 = vmul_f32(v253, v253);
  float32x2_t v255 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v250, 1), v250), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v254, 1), v254)));
  float32x2_t v256 = vsub_f32(v247, a3[41]);
  float32x2_t v257 = vmul_f32(v256, v256);
  float32x2_t v258 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v252, 1), v252), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v257, 1), v257));
  float32x2_t v259 = a4[42];
  float32x2_t v260 = a4[43];
  float32x2_t v261 = vsub_f32(v259, a2[42]);
  float32x2_t v262 = vmul_f32(v261, v261);
  float32x2_t v263 = a3[43];
  float32x2_t v264 = vsub_f32(v259, a3[42]);
  float32x2_t v265 = vmul_f32(v264, v264);
  float32x2_t v266 = vsub_f32(v260, a2[43]);
  float32x2_t v267 = vmul_f32(v266, v266);
  v662[20] = v255;
  v662[21] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v262, 1), v262), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v267, 1), v267)));
  float32x2_t v268 = vsub_f32(v260, v263);
  float32x2_t v269 = vmul_f32(v268, v268);
  v661[20] = vsqrt_f32(v258);
  v661[21] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v265, 1), v265), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v269, 1), v269)));
  float32x2_t v270 = a4[44];
  float32x2_t v271 = a4[45];
  float32x2_t v272 = vsub_f32(v270, a2[44]);
  float32x2_t v273 = vmul_f32(v272, v272);
  float32x2_t v274 = vsub_f32(v270, a3[44]);
  float32x2_t v275 = vmul_f32(v274, v274);
  float32x2_t v276 = vsub_f32(v271, a2[45]);
  float32x2_t v277 = vmul_f32(v276, v276);
  float32x2_t v278 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v273, 1), v273), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v277, 1), v277)));
  float32x2_t v279 = vsub_f32(v271, a3[45]);
  float32x2_t v280 = vmul_f32(v279, v279);
  float32x2_t v281 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v275, 1), v275), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v280, 1), v280)));
  float32x2_t v282 = a4[46];
  float32x2_t v283 = a4[47];
  float32x2_t v284 = vsub_f32(v282, a2[46]);
  float32x2_t v285 = vmul_f32(v284, v284);
  float32x2_t v286 = a3[47];
  float32x2_t v287 = vsub_f32(v282, a3[46]);
  float32x2_t v288 = vmul_f32(v287, v287);
  float32x2_t v289 = vsub_f32(v283, a2[47]);
  float32x2_t v290 = vmul_f32(v289, v289);
  v662[22] = v278;
  v662[23] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v285, 1), v285), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v290, 1), v290)));
  float32x2_t v291 = vsub_f32(v283, v286);
  float32x2_t v292 = vmul_f32(v291, v291);
  v661[22] = v281;
  v661[23] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v288, 1), v288), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v292, 1), v292)));
  float32x2_t v293 = a4[48];
  float32x2_t v294 = a4[49];
  float32x2_t v295 = vsub_f32(v293, a2[48]);
  float32x2_t v296 = vmul_f32(v295, v295);
  float32x2_t v297 = vsub_f32(v293, a3[48]);
  float32x2_t v298 = vmul_f32(v297, v297);
  float32x2_t v299 = vsub_f32(v294, a2[49]);
  float32x2_t v300 = vmul_f32(v299, v299);
  float32x2_t v301 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v296, 1), v296), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v300, 1), v300)));
  float32x2_t v302 = vsub_f32(v294, a3[49]);
  float32x2_t v303 = vmul_f32(v302, v302);
  float32x2_t v304 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v298, 1), v298), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v303, 1), v303)));
  float32x2_t v305 = a4[50];
  float32x2_t v306 = a4[51];
  float32x2_t v307 = vsub_f32(v305, a2[50]);
  float32x2_t v308 = vmul_f32(v307, v307);
  float32x2_t v309 = a3[51];
  float32x2_t v310 = vsub_f32(v305, a3[50]);
  float32x2_t v311 = vmul_f32(v310, v310);
  float32x2_t v312 = vsub_f32(v306, a2[51]);
  float32x2_t v313 = vmul_f32(v312, v312);
  v662[24] = v301;
  v662[25] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v308, 1), v308), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v313, 1), v313)));
  float32x2_t v314 = vsub_f32(v306, v309);
  float32x2_t v315 = vmul_f32(v314, v314);
  float32x2_t v316 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v311, 1), v311), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v315, 1), v315)));
  float32x2_t v317 = a4[52];
  float32x2_t v318 = a4[53];
  float32x2_t v319 = a2[53];
  float32x2_t v320 = vsub_f32(v317, a2[52]);
  float32x2_t v321 = vmul_f32(v320, v320);
  v661[24] = v304;
  v661[25] = v316;
  float32x2_t v322 = vsub_f32(v317, a3[52]);
  float32x2_t v323 = vmul_f32(v322, v322);
  float32x2_t v324 = vsub_f32(v318, v319);
  float32x2_t v325 = vmul_f32(v324, v324);
  float32x2_t v326 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v321, 1), v321), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v325, 1), v325)));
  float32x2_t v327 = vsub_f32(v318, a3[53]);
  float32x2_t v328 = vmul_f32(v327, v327);
  float32x2_t v329 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v323, 1), v323), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v328, 1), v328));
  float32x2_t v330 = a4[54];
  float32x2_t v331 = a4[55];
  float32x2_t v332 = vsub_f32(v330, a2[54]);
  float32x2_t v333 = vmul_f32(v332, v332);
  float32x2_t v334 = a3[55];
  float32x2_t v335 = vsub_f32(v330, a3[54]);
  float32x2_t v336 = vmul_f32(v335, v335);
  float32x2_t v337 = vsub_f32(v331, a2[55]);
  float32x2_t v338 = vmul_f32(v337, v337);
  v662[26] = v326;
  v662[27] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v333, 1), v333), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v338, 1), v338)));
  float32x2_t v339 = vsub_f32(v331, v334);
  float32x2_t v340 = vmul_f32(v339, v339);
  v661[26] = vsqrt_f32(v329);
  v661[27] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v336, 1), v336), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v340, 1), v340)));
  float32x2_t v341 = a4[56];
  float32x2_t v342 = a4[57];
  float32x2_t v343 = vsub_f32(v341, a2[56]);
  float32x2_t v344 = vmul_f32(v343, v343);
  float32x2_t v345 = vsub_f32(v341, a3[56]);
  float32x2_t v346 = vmul_f32(v345, v345);
  float32x2_t v347 = vsub_f32(v342, a2[57]);
  float32x2_t v348 = vmul_f32(v347, v347);
  float32x2_t v349 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v344, 1), v344), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v348, 1), v348)));
  float32x2_t v350 = vsub_f32(v342, a3[57]);
  float32x2_t v351 = vmul_f32(v350, v350);
  float32x2_t v352 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v346, 1), v346), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v351, 1), v351)));
  float32x2_t v353 = a4[58];
  float32x2_t v354 = a4[59];
  float32x2_t v355 = vsub_f32(v353, a2[58]);
  float32x2_t v356 = vmul_f32(v355, v355);
  float32x2_t v357 = a3[59];
  float32x2_t v358 = vsub_f32(v353, a3[58]);
  float32x2_t v359 = vmul_f32(v358, v358);
  float32x2_t v360 = vsub_f32(v354, a2[59]);
  float32x2_t v361 = vmul_f32(v360, v360);
  v662[28] = v349;
  v662[29] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v356, 1), v356), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v361, 1), v361)));
  float32x2_t v362 = vsub_f32(v354, v357);
  float32x2_t v363 = vmul_f32(v362, v362);
  v661[28] = v352;
  v661[29] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v359, 1), v359), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v363, 1), v363)));
  float32x2_t v364 = a4[60];
  float32x2_t v365 = a4[61];
  float32x2_t v366 = vsub_f32(v364, a2[60]);
  float32x2_t v367 = vmul_f32(v366, v366);
  float32x2_t v368 = vsub_f32(v364, a3[60]);
  float32x2_t v369 = vmul_f32(v368, v368);
  float32x2_t v370 = vsub_f32(v365, a2[61]);
  float32x2_t v371 = vmul_f32(v370, v370);
  float32x2_t v372 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v367, 1), v367), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v371, 1), v371));
  float32x2_t v373 = vsub_f32(v365, a3[61]);
  float32x2_t v374 = vmul_f32(v373, v373);
  float32x2_t v375 = a4[62];
  float32x2_t v376 = a4[63];
  float32x2_t v377 = vsub_f32(v375, a2[62]);
  float32x2_t v378 = vmul_f32(v377, v377);
  float32x2_t v379 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v369, 1), v369), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v374, 1), v374));
  float32x2_t v380 = a3[63];
  float32x2_t v381 = vsub_f32(v375, a3[62]);
  float32x2_t v382 = vmul_f32(v381, v381);
  float32x2_t v383 = vsub_f32(v376, a2[63]);
  float32x2_t v384 = vmul_f32(v383, v383);
  v662[30] = vsqrt_f32(v372);
  v662[31] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v378, 1), v378), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v384, 1), v384)));
  float32x2_t v385 = vsub_f32(v376, v380);
  float32x2_t v386 = vmul_f32(v385, v385);
  v661[30] = vsqrt_f32(v379);
  v661[31] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v382, 1), v382), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v386, 1), v386)));
  float32x2_t v387 = a4[64];
  float32x2_t v388 = vsub_f32(v387, a2[64]);
  float32x2_t v389 = vmul_f32(v388, v388);
  float32x2_t v390 = vsub_f32(v387, a3[64]);
  float32x2_t v391 = vmul_f32(v390, v390);
  float32x2_t v392 = a4[65];
  float32x2_t v393 = vsub_f32(v392, a2[65]);
  float32x2_t v394 = vmul_f32(v393, v393);
  float32x2_t v395 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v389, 1), v389), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v394, 1), v394)));
  float32x2_t v396 = vsub_f32(v392, a3[65]);
  float32x2_t v397 = vmul_f32(v396, v396);
  float32x2_t v398 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v391, 1), v391), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v397, 1), v397)));
  float32x2_t v399 = a4[66];
  float32x2_t v400 = vsub_f32(v399, a2[66]);
  float32x2_t v401 = vmul_f32(v400, v400);
  float32x2_t v402 = vsub_f32(v399, a3[66]);
  float32x2_t v403 = vmul_f32(v402, v402);
  float32x2_t v404 = a4[67];
  float32x2_t v405 = vsub_f32(v404, a2[67]);
  float32x2_t v406 = vmul_f32(v405, v405);
  v662[32] = v395;
  v662[33] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v401, 1), v401), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v406, 1), v406)));
  float32x2_t v407 = vsub_f32(v404, a3[67]);
  float32x2_t v408 = vmul_f32(v407, v407);
  v661[32] = v398;
  v661[33] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v403, 1), v403), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v408, 1), v408)));
  float32x2_t v409 = a4[68];
  float32x2_t v410 = vsub_f32(v409, a2[68]);
  float32x2_t v411 = vmul_f32(v410, v410);
  float32x2_t v412 = vsub_f32(v409, a3[68]);
  float32x2_t v413 = vmul_f32(v412, v412);
  float32x2_t v414 = a4[69];
  float32x2_t v415 = vsub_f32(v414, a2[69]);
  float32x2_t v416 = vmul_f32(v415, v415);
  float32x2_t v417 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v411, 1), v411), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v416, 1), v416)));
  float32x2_t v418 = vsub_f32(v414, a3[69]);
  float32x2_t v419 = vmul_f32(v418, v418);
  float32x2_t v420 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v413, 1), v413), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v419, 1), v419)));
  float32x2_t v421 = a4[70];
  float32x2_t v422 = vsub_f32(v421, a2[70]);
  float32x2_t v423 = vmul_f32(v422, v422);
  float32x2_t v424 = vsub_f32(v421, a3[70]);
  float32x2_t v425 = vmul_f32(v424, v424);
  float32x2_t v426 = a4[71];
  float32x2_t v427 = vsub_f32(v426, a2[71]);
  float32x2_t v428 = vmul_f32(v427, v427);
  v662[34] = v417;
  v662[35] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v423, 1), v423), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v428, 1), v428)));
  float32x2_t v429 = vsub_f32(v426, a3[71]);
  float32x2_t v430 = vmul_f32(v429, v429);
  float32x2_t v431 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v425, 1), v425), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v430, 1), v430)));
  float32x2_t v432 = a4[72];
  float32x2_t v433 = vsub_f32(v432, a2[72]);
  float32x2_t v434 = vmul_f32(v433, v433);
  v661[34] = v420;
  v661[35] = v431;
  float32x2_t v435 = vsub_f32(v432, a3[72]);
  float32x2_t v436 = vmul_f32(v435, v435);
  int32x2_t v437 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v434, 1), v434);
  float32x2_t v438 = a4[73];
  float32x2_t v439 = vsub_f32(v438, a2[73]);
  float32x2_t v440 = vmul_f32(v439, v439);
  float32x2_t v441 = vsqrt_f32((float32x2_t)vzip1_s32(v437, (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v440, 1), v440)));
  float32x2_t v442 = vsub_f32(v438, a3[73]);
  float32x2_t v443 = vmul_f32(v442, v442);
  float32x2_t v444 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v436, 1), v436), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v443, 1), v443));
  float32x2_t v445 = a4[74];
  float32x2_t v446 = vsub_f32(v445, a2[74]);
  float32x2_t v447 = vmul_f32(v446, v446);
  float32x2_t v448 = vsub_f32(v445, a3[74]);
  float32x2_t v449 = vmul_f32(v448, v448);
  float32x2_t v450 = a4[75];
  float32x2_t v451 = vsub_f32(v450, a2[75]);
  float32x2_t v452 = vmul_f32(v451, v451);
  v662[36] = v441;
  v662[37] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v447, 1), v447), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v452, 1), v452)));
  float32x2_t v453 = vsub_f32(v450, a3[75]);
  float32x2_t v454 = vmul_f32(v453, v453);
  v661[36] = vsqrt_f32(v444);
  v661[37] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v449, 1), v449), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v454, 1), v454)));
  float32x2_t v455 = a4[76];
  float32x2_t v456 = vsub_f32(v455, a2[76]);
  float32x2_t v457 = vmul_f32(v456, v456);
  float32x2_t v458 = vsub_f32(v455, a3[76]);
  float32x2_t v459 = vmul_f32(v458, v458);
  float32x2_t v460 = a4[77];
  float32x2_t v461 = vsub_f32(v460, a2[77]);
  float32x2_t v462 = vmul_f32(v461, v461);
  float32x2_t v463 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v457, 1), v457), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v462, 1), v462)));
  float32x2_t v464 = vsub_f32(v460, a3[77]);
  float32x2_t v465 = vmul_f32(v464, v464);
  float32x2_t v466 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v459, 1), v459), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v465, 1), v465)));
  float32x2_t v467 = a4[78];
  float32x2_t v468 = vsub_f32(v467, a2[78]);
  float32x2_t v469 = vmul_f32(v468, v468);
  float32x2_t v470 = vsub_f32(v467, a3[78]);
  float32x2_t v471 = vmul_f32(v470, v470);
  float32x2_t v472 = a4[79];
  float32x2_t v473 = vsub_f32(v472, a2[79]);
  float32x2_t v474 = vmul_f32(v473, v473);
  v662[38] = v463;
  v662[39] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v469, 1), v469), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v474, 1), v474)));
  float32x2_t v475 = vsub_f32(v472, a3[79]);
  float32x2_t v476 = vmul_f32(v475, v475);
  v661[38] = v466;
  v661[39] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v471, 1), v471), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v476, 1), v476)));
  float32x2_t v477 = a4[80];
  float32x2_t v478 = vsub_f32(v477, a2[80]);
  float32x2_t v479 = vmul_f32(v478, v478);
  float32x2_t v480 = vsub_f32(v477, a3[80]);
  float32x2_t v481 = vmul_f32(v480, v480);
  float32x2_t v482 = a4[81];
  float32x2_t v483 = vsub_f32(v482, a2[81]);
  float32x2_t v484 = vmul_f32(v483, v483);
  float32x2_t v485 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v479, 1), v479), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v484, 1), v484)));
  float32x2_t v486 = vsub_f32(v482, a3[81]);
  float32x2_t v487 = vmul_f32(v486, v486);
  float32x2_t v488 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v481, 1), v481), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v487, 1), v487)));
  float32x2_t v489 = a4[82];
  float32x2_t v490 = vsub_f32(v489, a2[82]);
  float32x2_t v491 = vmul_f32(v490, v490);
  float32x2_t v492 = vsub_f32(v489, a3[82]);
  float32x2_t v493 = vmul_f32(v492, v492);
  float32x2_t v494 = a4[83];
  float32x2_t v495 = vsub_f32(v494, a2[83]);
  float32x2_t v496 = vmul_f32(v495, v495);
  v662[40] = v485;
  v662[41] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v491, 1), v491), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v496, 1), v496)));
  float32x2_t v497 = vsub_f32(v494, a3[83]);
  float32x2_t v498 = vmul_f32(v497, v497);
  float32x2_t v499 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v493, 1), v493), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v498, 1), v498)));
  float32x2_t v500 = a4[84];
  float32x2_t v501 = vsub_f32(v500, a2[84]);
  float32x2_t v502 = vmul_f32(v501, v501);
  v661[40] = v488;
  v661[41] = v499;
  float32x2_t v503 = vsub_f32(v500, a3[84]);
  float32x2_t v504 = vmul_f32(v503, v503);
  int32x2_t v505 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v502, 1), v502);
  float32x2_t v506 = a4[85];
  float32x2_t v507 = vsub_f32(v506, a2[85]);
  float32x2_t v508 = vmul_f32(v507, v507);
  float32x2_t v509 = vsqrt_f32((float32x2_t)vzip1_s32(v505, (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v508, 1), v508)));
  float32x2_t v510 = vsub_f32(v506, a3[85]);
  float32x2_t v511 = vmul_f32(v510, v510);
  float32x2_t v512 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v504, 1), v504), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v511, 1), v511));
  float32x2_t v513 = a4[86];
  float32x2_t v514 = vsub_f32(v513, a2[86]);
  float32x2_t v515 = vmul_f32(v514, v514);
  float32x2_t v516 = vsub_f32(v513, a3[86]);
  float32x2_t v517 = vmul_f32(v516, v516);
  float32x2_t v518 = a4[87];
  float32x2_t v519 = vsub_f32(v518, a2[87]);
  float32x2_t v520 = vmul_f32(v519, v519);
  v662[42] = v509;
  v662[43] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v515, 1), v515), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v520, 1), v520)));
  float32x2_t v521 = vsub_f32(v518, a3[87]);
  float32x2_t v522 = vmul_f32(v521, v521);
  v661[42] = vsqrt_f32(v512);
  v661[43] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v517, 1), v517), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v522, 1), v522)));
  float32x2_t v523 = a4[88];
  float32x2_t v524 = vsub_f32(v523, a2[88]);
  float32x2_t v525 = vmul_f32(v524, v524);
  float32x2_t v526 = vsub_f32(v523, a3[88]);
  float32x2_t v527 = vmul_f32(v526, v526);
  float32x2_t v528 = a4[89];
  float32x2_t v529 = vsub_f32(v528, a2[89]);
  float32x2_t v530 = vmul_f32(v529, v529);
  float32x2_t v531 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v525, 1), v525), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v530, 1), v530)));
  float32x2_t v532 = vsub_f32(v528, a3[89]);
  float32x2_t v533 = vmul_f32(v532, v532);
  float32x2_t v534 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v527, 1), v527), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v533, 1), v533)));
  float32x2_t v535 = a4[90];
  float32x2_t v536 = vsub_f32(v535, a2[90]);
  float32x2_t v537 = vmul_f32(v536, v536);
  float32x2_t v538 = vsub_f32(v535, a3[90]);
  float32x2_t v539 = vmul_f32(v538, v538);
  float32x2_t v540 = a4[91];
  float32x2_t v541 = vsub_f32(v540, a2[91]);
  float32x2_t v542 = vmul_f32(v541, v541);
  v662[44] = v531;
  v662[45] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v537, 1), v537), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v542, 1), v542)));
  float32x2_t v543 = vsub_f32(v540, a3[91]);
  float32x2_t v544 = vmul_f32(v543, v543);
  v661[44] = v534;
  v661[45] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v539, 1), v539), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v544, 1), v544)));
  float32x2_t v545 = a4[92];
  float32x2_t v546 = vsub_f32(v545, a2[92]);
  float32x2_t v547 = vmul_f32(v546, v546);
  float32x2_t v548 = vsub_f32(v545, a3[92]);
  float32x2_t v549 = vmul_f32(v548, v548);
  float32x2_t v550 = a4[93];
  float32x2_t v551 = vsub_f32(v550, a2[93]);
  float32x2_t v552 = vmul_f32(v551, v551);
  float32x2_t v553 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v547, 1), v547), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v552, 1), v552)));
  float32x2_t v554 = vsub_f32(v550, a3[93]);
  float32x2_t v555 = vmul_f32(v554, v554);
  float32x2_t v556 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v549, 1), v549), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v555, 1), v555)));
  float32x2_t v557 = a4[94];
  float32x2_t v558 = vsub_f32(v557, a2[94]);
  float32x2_t v559 = vmul_f32(v558, v558);
  float32x2_t v560 = vsub_f32(v557, a3[94]);
  float32x2_t v561 = vmul_f32(v560, v560);
  float32x2_t v562 = a4[95];
  float32x2_t v563 = vsub_f32(v562, a2[95]);
  float32x2_t v564 = vmul_f32(v563, v563);
  v662[46] = v553;
  v662[47] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v559, 1), v559), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v564, 1), v564)));
  float32x2_t v565 = vsub_f32(v562, a3[95]);
  float32x2_t v566 = vmul_f32(v565, v565);
  float32x2_t v567 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v561, 1), v561), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v566, 1), v566)));
  float32x2_t v568 = a4[96];
  float32x2_t v569 = vsub_f32(v568, a2[96]);
  float32x2_t v570 = vmul_f32(v569, v569);
  v661[46] = v556;
  v661[47] = v567;
  float32x2_t v571 = vsub_f32(v568, a3[96]);
  float32x2_t v572 = vmul_f32(v571, v571);
  int32x2_t v573 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v570, 1), v570);
  float32x2_t v574 = a4[97];
  float32x2_t v575 = vsub_f32(v574, a2[97]);
  float32x2_t v576 = vmul_f32(v575, v575);
  float32x2_t v577 = vsqrt_f32((float32x2_t)vzip1_s32(v573, (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v576, 1), v576)));
  float32x2_t v578 = vsub_f32(v574, a3[97]);
  float32x2_t v579 = vmul_f32(v578, v578);
  float32x2_t v580 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v572, 1), v572), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v579, 1), v579));
  float32x2_t v581 = a4[98];
  float32x2_t v582 = vsub_f32(v581, a2[98]);
  float32x2_t v583 = vmul_f32(v582, v582);
  float32x2_t v584 = vsub_f32(v581, a3[98]);
  float32x2_t v585 = vmul_f32(v584, v584);
  float32x2_t v586 = a4[99];
  float32x2_t v587 = vsub_f32(v586, a2[99]);
  float32x2_t v588 = vmul_f32(v587, v587);
  v662[48] = v577;
  v662[49] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v583, 1), v583), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v588, 1), v588)));
  float32x2_t v589 = vsub_f32(v586, a3[99]);
  float32x2_t v590 = vmul_f32(v589, v589);
  v661[48] = vsqrt_f32(v580);
  v661[49] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v585, 1), v585), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v590, 1), v590)));
  float32x2_t v591 = a4[100];
  float32x2_t v592 = vsub_f32(v591, a2[100]);
  float32x2_t v593 = vmul_f32(v592, v592);
  float32x2_t v594 = vsub_f32(v591, a3[100]);
  float32x2_t v595 = vmul_f32(v594, v594);
  float32x2_t v596 = a4[101];
  float32x2_t v597 = vsub_f32(v596, a2[101]);
  float32x2_t v598 = vmul_f32(v597, v597);
  float32x2_t v599 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v593, 1), v593), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v598, 1), v598)));
  float32x2_t v600 = vsub_f32(v596, a3[101]);
  float32x2_t v601 = vmul_f32(v600, v600);
  float32x2_t v602 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v595, 1), v595), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v601, 1), v601)));
  float32x2_t v603 = a4[102];
  float32x2_t v604 = vsub_f32(v603, a2[102]);
  float32x2_t v605 = vmul_f32(v604, v604);
  float32x2_t v606 = vsub_f32(v603, a3[102]);
  float32x2_t v607 = vmul_f32(v606, v606);
  float32x2_t v608 = a4[103];
  float32x2_t v609 = vsub_f32(v608, a2[103]);
  float32x2_t v610 = vmul_f32(v609, v609);
  v662[50] = v599;
  v662[51] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v605, 1), v605), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v610, 1), v610)));
  float32x2_t v611 = vsub_f32(v608, a3[103]);
  float32x2_t v612 = vmul_f32(v611, v611);
  v661[50] = v602;
  v661[51] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v607, 1), v607), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v612, 1), v612)));
  float32x2_t v613 = a4[104];
  float32x2_t v614 = vsub_f32(v613, a2[104]);
  float32x2_t v615 = vmul_f32(v614, v614);
  float32x2_t v616 = vsub_f32(v613, a3[104]);
  float32x2_t v617 = vmul_f32(v616, v616);
  float32x2_t v618 = a4[105];
  float32x2_t v619 = vsub_f32(v618, a2[105]);
  float32x2_t v620 = vmul_f32(v619, v619);
  float32x2_t v621 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v615, 1), v615), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v620, 1), v620)));
  float32x2_t v622 = vsub_f32(v618, a3[105]);
  float32x2_t v623 = vmul_f32(v622, v622);
  float32x2_t v624 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v617, 1), v617), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v623, 1), v623)));
  float32x2_t v625 = a4[106];
  float32x2_t v626 = vsub_f32(v625, a2[106]);
  float32x2_t v627 = vmul_f32(v626, v626);
  float32x2_t v628 = vsub_f32(v625, a3[106]);
  float32x2_t v629 = vmul_f32(v628, v628);
  float32x2_t v630 = a4[107];
  float32x2_t v631 = vsub_f32(v630, a2[107]);
  float32x2_t v632 = vmul_f32(v631, v631);
  v662[52] = v621;
  v662[53] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v627, 1), v627), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v632, 1), v632)));
  float32x2_t v633 = vsub_f32(v630, a3[107]);
  float32x2_t v634 = vmul_f32(v633, v633);
  float32x2_t v635 = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v629, 1), v629), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v634, 1), v634)));
  float32x2_t v636 = a4[108];
  float32x2_t v637 = vsub_f32(v636, a2[108]);
  float32x2_t v638 = vmul_f32(v637, v637);
  v661[52] = v624;
  v661[53] = v635;
  float32x2_t v639 = vsub_f32(v636, a3[108]);
  float32x2_t v640 = vmul_f32(v639, v639);
  int32x2_t v641 = (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v638, 1), v638);
  float32x2_t v642 = a4[109];
  float32x2_t v643 = vsub_f32(v642, a2[109]);
  float32x2_t v644 = vmul_f32(v643, v643);
  float32x2_t v645 = (float32x2_t)vzip1_s32(v641, (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v644, 1), v644));
  float32x2_t v646 = vsub_f32(v642, a3[109]);
  float32x2_t v647 = vmul_f32(v646, v646);
  float32x2_t v648 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v640, 1), v640), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v647, 1), v647));
  float32x2_t v649 = a4[110];
  float32x2_t v650 = vsub_f32(v649, a2[110]);
  float32x2_t v651 = vmul_f32(v650, v650);
  float32x2_t v652 = a4[111];
  float32x2_t v653 = vsub_f32(v652, a2[111]);
  float32x2_t v654 = vmul_f32(v653, v653);
  float32x2_t v655 = (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v651, 1), v651), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v654, 1), v654));
  float32x2_t v656 = a3[110];
  v662[54] = vsqrt_f32(v645);
  v662[55] = vsqrt_f32(v655);
  float32x2_t v657 = vsub_f32(v649, v656);
  float32x2_t v658 = vmul_f32(v657, v657);
  float32x2_t v659 = vsub_f32(v652, a3[111]);
  float32x2_t v660 = vmul_f32(v659, v659);
  v661[54] = vsqrt_f32(v648);
  v661[55] = vsqrt_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v658, 1), v658), (int32x2_t)vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v660, 1), v660)));
  *(float *)(a1 + 28) = common::utils::prctile<float>((uint64_t)v662, *(unsigned __int8 *)(a1 + 25));
  *(float *)(a1 + 32) = common::utils::prctile<float>((uint64_t)v661, *(unsigned __int8 *)(a1 + 25));
}

float gmoCoreAnalyticsTelemetry::setAnchorMoved(gmoCoreAnalyticsTelemetry *this, unint64_t a2)
{
  float result = (float)a2;
  this->_coreAnalyticsHomographyAzul.numAnchorMoved = (float)a2;
  return result;
}

void gmoCoreAnalyticsTelemetry::setAnchorMovement(gmoCoreAnalyticsTelemetry *this, PDAnchors *a2, PDAnchors *a3)
{
  uint64_t v3 = 0;
  uint64_t v86 = *MEMORY[0x263EF8340];
  unsigned int v4 = &a2->banks[0].anchors[7];
  float32x2_t v5 = &a3->banks[0].anchors[7];
  do
  {
    float v6 = (float)(v4[-7].x - v5[-7].x);
    float v7 = (float)(v4[-7].y - v5[-7].y);
    float v8 = (float)(v4[-6].x - v5[-6].x);
    float v9 = (float)(v4[-6].y - v5[-6].y);
    float v10 = (float)(v4[-5].x - v5[-5].x);
    float v11 = (float)(v4[-5].y - v5[-5].y);
    float v12 = (float)(v4[-4].x - v5[-4].x);
    float v13 = (float)(v4[-4].y - v5[-4].y);
    float v14 = (float)(v4[-3].x - v5[-3].x);
    float v15 = (float)(v4[-3].y - v5[-3].y);
    float v16 = (float)(v6 * v6) + (float)(v7 * v7);
    float v17 = (float)(v4[-2].x - v5[-2].x);
    float v18 = (float)(v4[-2].y - v5[-2].y);
    float v19 = (float)(v8 * v8) + (float)(v9 * v9);
    float v20 = (float)(v10 * v10) + (float)(v11 * v11);
    float v21 = (float)(v4[-1].x - v5[-1].x);
    float v22 = (float)(v12 * v12) + (float)(v13 * v13);
    float v23 = (float)(v4[-1].y - v5[-1].y);
    float v24 = (float)(v14 * v14) + (float)(v15 * v15);
    float v25 = (float)(v4->x - v5->x);
    float v26 = (float)(v17 * v17) + (float)(v18 * v18);
    float v27 = (float)(v4->y - v5->y);
    float v28 = (float)(v21 * v21) + (float)(v23 * v23);
    float v29 = (float)(v4[1].x - v5[1].x);
    float v30 = (float)(v25 * v25) + (float)(v27 * v27);
    float v31 = (float)(v4[1].y - v5[1].y);
    float v32 = (float)(v29 * v29) + (float)(v31 * v31);
    float v33 = (float)(v4[2].x - v5[2].x);
    float v34 = (float)(v4[2].y - v5[2].y);
    unsigned int v35 = sqrtf(v16);
    unsigned int v36 = sqrtf(v19);
    unsigned int v37 = sqrtf(v20);
    float v38 = (float)(v4[3].x - v5[3].x);
    float v39 = (float)(v4[3].y - v5[3].y);
    float v40 = (float)(v38 * v38) + (float)(v39 * v39);
    unsigned int v41 = sqrtf(v26);
    float v42 = (float)(v4[4].x - v5[4].x);
    float v43 = (float)(v4[4].y - v5[4].y);
    float v44 = sqrtf((float)(v42 * v42) + (float)(v43 * v43));
    float v45 = (float)(v4[5].x - v5[5].x);
    unsigned int v46 = v44;
    float v47 = (float)(v4[5].y - v5[5].y);
    float32x2_t v48 = &v85[v3];
    unsigned int *v48 = v35;
    v48[1] = v36;
    int x = v4[6].x;
    v48[2] = v37;
    v48[3] = sqrtf(v22);
    int v50 = x - v5[6].x;
    unsigned int v51 = sqrtf((float)(v45 * v45) + (float)(v47 * v47));
    v48[4] = sqrtf(v24);
    v48[5] = v41;
    int y = v4[6].y;
    float v53 = (float)v50;
    int v54 = v5[6].y;
    v48[6] = sqrtf(v28);
    v48[7] = sqrtf(v30);
    v48[8] = sqrtf(v32);
    v48[9] = sqrtf((float)(v33 * v33) + (float)(v34 * v34));
    v48[10] = sqrtf(v40);
    v48[11] = v46;
    v48[12] = v51;
    v48[13] = sqrtf((float)(v53 * v53) + (float)((float)(y - v54) * (float)(y - v54)));
    v3 += 14;
    v4 += 14;
    v5 += 14;
  }
  while (v3 != 112);
  uint64_t prctileMoveBuckets = this->_coreAnalyticsHomographyAzul.prctileMoveBuckets;
  float32x2_t v55 = (unsigned int *)operator new(0x1C0uLL);
  uint64_t v56 = 0;
  float32x2_t v57 = v55 + 112;
  float32x2_t v58 = v55;
  do
  {
    if (v55 < v57)
    {
      *v55++ = v85[v56];
      goto LABEL_5;
    }
    uint64_t v59 = v55 - v58;
    unint64_t v60 = v59 + 1;
    if ((unint64_t)(v59 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v57 - (char *)v58) >> 1 > v60) {
      unint64_t v60 = ((char *)v57 - (char *)v58) >> 1;
    }
    if ((unint64_t)((char *)v57 - (char *)v58) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v61 = v60;
    }
    if (v61)
    {
      if (v61 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float32x2_t v62 = operator new(4 * v61);
    }
    else
    {
      float32x2_t v62 = 0;
    }
    float32x2_t v63 = (unsigned int *)&v62[4 * v59];
    unsigned int *v63 = v85[v56];
    float32x2_t v64 = v63 + 1;
    if (v55 != v58)
    {
      unint64_t v65 = (char *)(v55 - 1) - (char *)v58;
      if (v65 >= 0xBC)
      {
        if (&v62[(char *)v55 - (char *)v58 - 4 - (v65 & 0xFFFFFFFFFFFFFFFCLL)] > &v62[(char *)v55 - (char *)v58 - 4])
        {
          float32x2_t v66 = v55;
        }
        else if ((unsigned int *)((char *)v55 - (v65 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v55 - 1)
        {
          float32x2_t v66 = v55;
        }
        else if ((unint64_t)((char *)v58 - v62) >= 0x20)
        {
          uint64_t v68 = (v65 >> 2) + 1;
          float32x2_t v66 = &v55[-(v68 & 0x7FFFFFFFFFFFFFF8)];
          float32x2_t v69 = &v62[4 * v59 - 16];
          float32x2_t v70 = v55 - 4;
          uint64_t v71 = v68 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v72 = *(_OWORD *)v70;
            *(v69 - 1) = *((_OWORD *)v70 - 1);
            _OWORD *v69 = v72;
            v69 -= 2;
            v70 -= 8;
            v71 -= 8;
          }
          while (v71);
          v63 -= v68 & 0x7FFFFFFFFFFFFFF8;
          if (v68 == (v68 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_21;
          }
        }
        else
        {
          float32x2_t v66 = v55;
        }
      }
      else
      {
        float32x2_t v66 = v55;
      }
      do
      {
        unsigned int v67 = *--v66;
        *--float32x2_t v63 = v67;
      }
      while (v66 != v58);
    }
LABEL_21:
    float32x2_t v57 = (unsigned int *)&v62[4 * v61];
    if (v58) {
      operator delete(v58);
    }
    float32x2_t v58 = v63;
    float32x2_t v55 = v64;
LABEL_5:
    ++v56;
  }
  while (v56 != 112);
  std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>();
  uint64_t v73 = (char *)v55 - (char *)v58;
  if (v55 == v58)
  {
    float v79 = 0.0;
    if (v55) {
      goto LABEL_53;
    }
  }
  else
  {
    unint64_t v74 = v73 >> 2;
    float v75 = (double)(unint64_t)((v73 >> 2) * prctileMoveBuckets) * 0.01 + 0.5;
    float v76 = floorf(v75);
    if (v75 <= (float)(unint64_t)(v73 >> 2) && v75 >= 1.0 && v76 == v75)
    {
      unint64_t v80 = (unint64_t)(float)(v76 + -1.0);
      if (v74 <= v80) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      float v79 = (float)v58[v80];
    }
    else if (v75 >= 1.0)
    {
      if (v75 <= (float)(unint64_t)(v73 >> 2))
      {
        unint64_t v81 = (int)v76 - 1;
        if (v74 <= v81 || (unint64_t v82 = (int)(vcvtps_s32_f32(v75) - 1), v74 <= v82)) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        float v79 = (double)v58[v81]
            + (double)v74
            * 0.01
            * ((double)prctileMoveBuckets + ((double)(int)v76 * -100.0 + 50.0) / (double)v74)
            * (double)(v58[v82] - v58[v81]);
      }
      else
      {
        float v79 = (float)v58[v74 - 1];
      }
    }
    else
    {
      float v79 = (float)*v58;
    }
LABEL_53:
    operator delete(v58);
  }
  this->_coreAnalyticsHomographyAzul.anchorMovementPercentile = v79;
}

void sub_2590A65F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 gmoCoreAnalyticsTelemetry::loadDataFromPersistentDataLongTerm(gmoCoreAnalyticsTelemetry *this, CoreAnalyticsLongTermPersistentData *a2)
{
  this->_longTermEventPersistentData.homogDoneCount = a2->homogDoneCount;
  *(_OWORD *)&this->_longTermEventPersistentData.uint64_t sessionCount = *(_OWORD *)&a2->sessionCount;
  p_longTermEventPersistentData = &this->_longTermEventPersistentData;
  long long v3 = *(_OWORD *)a2->calibErrP95Arr;
  long long v4 = *(_OWORD *)&a2->calibErrP95Arr[4];
  long long v5 = *(_OWORD *)&a2->calibErrP95Arr[8];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[12] = *(_OWORD *)&a2->calibErrP95Arr[12];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[8] = v5;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[4] = v4;
  *(_OWORD *)p_longTermEventPersistentData->calibErrP95Arr = v3;
  long long v6 = *(_OWORD *)&a2->calibErrP95Arr[16];
  long long v7 = *(_OWORD *)&a2->calibErrP95Arr[20];
  long long v8 = *(_OWORD *)&a2->calibErrP95Arr[24];
  *(void *)&p_longTermEventPersistentData->calibErrP95Arr[28] = *(void *)&a2->calibErrP95Arr[28];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[24] = v8;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[20] = v7;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP95Arr[16] = v6;
  long long v9 = *(_OWORD *)&a2->calibErrP50Arr[20];
  long long v10 = *(_OWORD *)&a2->calibErrP50Arr[24];
  uint64_t v11 = *(void *)&a2->calibErrP50Arr[28];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[16] = *(_OWORD *)&a2->calibErrP50Arr[16];
  *(void *)&p_longTermEventPersistentData->calibErrP50Arr[28] = v11;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[24] = v10;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[20] = v9;
  __n128 result = *(__n128 *)a2->calibErrP50Arr;
  long long v13 = *(_OWORD *)&a2->calibErrP50Arr[4];
  long long v14 = *(_OWORD *)&a2->calibErrP50Arr[8];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[12] = *(_OWORD *)&a2->calibErrP50Arr[12];
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[8] = v14;
  *(_OWORD *)&p_longTermEventPersistentData->calibErrP50Arr[4] = v13;
  *(__n128 *)p_longTermEventPersistentData->calibErrP50Arr = result;
  return result;
}

gmoCoreAnalyticsTelemetry *gmoCoreAnalyticsTelemetry::offloadDataToPersistentDataLongTerm(gmoCoreAnalyticsTelemetry *this, CoreAnalyticsLongTermPersistentData *__dst)
{
  uint64_t v3 = *(void *)&this->_longTermEventPersistentData.lastEventYear;
  if (this->_isFireLongTermEvent)
  {
    __dst->calibErrP50Arr[29] = 0.0;
    *(_OWORD *)&__dst->calibErrP50Arr[21] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[25] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[13] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[17] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[5] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[9] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[27] = 0u;
    *(_OWORD *)&__dst->calibErrP50Arr[1] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[19] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[23] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[11] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[15] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[3] = 0u;
    *(_OWORD *)&__dst->calibErrP95Arr[7] = 0u;
    *(_OWORD *)&__dst->uint64_t sessionCount = 0u;
    *(_OWORD *)&__dst->homogDoneCount = 0u;
    this->_isFireLongTermEvent = 0;
  }
  else
  {
    this = (gmoCoreAnalyticsTelemetry *)memcpy(__dst, &this->_longTermEventPersistentData, sizeof(CoreAnalyticsLongTermPersistentData));
    ++__dst->sessionCount;
  }
  *(void *)&__dst->unsigned int lastEventYear = v3;
  return this;
}

gmoCoreAnalyticsTelemetry *gmoCoreAnalyticsTelemetry::setNumberSpotsClipped(gmoCoreAnalyticsTelemetry *this, int a2)
{
  this->_coreAnalyticsHomographyAzul.numberSpotsClipped = a2;
  return this;
}

const char *peridot::PeridotSP::getName()
{
  return "CPX";
}

uint64_t peridot::PeridotSP::getPixelMask(_WORD *a1, int a2)
{
  switch(a2)
  {
    case 1:
      uint64_t result = *a1 & 1;
      break;
    case 2:
      uint64_t result = ((unsigned __int16)*a1 >> 3) & 1;
      break;
    case 3:
      uint64_t result = ((unsigned __int16)*a1 >> 6) & 1;
      break;
    case 4:
      uint64_t result = ((unsigned __int16)*a1 >> 9) & 1;
      break;
    case 5:
      uint64_t result = ((unsigned __int16)*a1 >> 1) & 1;
      break;
    case 6:
      uint64_t result = ((unsigned __int16)*a1 >> 4) & 1;
      break;
    case 7:
      uint64_t result = ((unsigned __int16)*a1 >> 7) & 1;
      break;
    case 8:
      uint64_t result = ((unsigned __int16)*a1 >> 10) & 1;
      break;
    case 9:
      uint64_t result = ((unsigned __int16)*a1 >> 2) & 1;
      break;
    case 10:
      uint64_t result = ((unsigned __int16)*a1 >> 5) & 1;
      break;
    case 11:
      uint64_t result = HIBYTE(*a1) & 1;
      break;
    case 12:
      uint64_t result = ((unsigned __int16)*a1 >> 11) & 1;
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t peridot::PeridotSP::getMaskEn(unsigned __int8 *a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 1:
      unsigned __int8 v4 = *a1;
      goto LABEL_11;
    case 2:
      uint64_t result = (*a1 >> 3) & 1;
      break;
    case 3:
      uint64_t result = (*a1 >> 6) & 1;
      break;
    case 5:
      uint64_t result = (*a1 >> 1) & 1;
      break;
    case 6:
      uint64_t result = (*a1 >> 4) & 1;
      break;
    case 7:
      uint64_t result = *a1 >> 7;
      break;
    case 9:
      uint64_t result = (*a1 >> 2) & 1;
      break;
    case 10:
      uint64_t result = (*a1 >> 5) & 1;
      break;
    case 11:
      unsigned __int8 v4 = a1[1];
LABEL_11:
      uint64_t result = v4 & 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t peridot::PeridotSP::getMaskHp(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 11:
      return (*(unsigned __int8 *)(a1 + 1) >> 3) & 1;
    case 7:
      return (*(unsigned __int8 *)(a1 + 1) >> 2) & 1;
    case 3:
      return (*(unsigned __int8 *)(a1 + 1) >> 1) & 1;
  }
  return 0;
}

uint64_t peridot::PeridotSP::getMaskHs1(uint64_t a1, int a2)
{
  uint64_t result = 0;
  switch(a2)
  {
    case 1:
      uint64_t result = *(unsigned char *)(a1 + 2) & 1;
      break;
    case 2:
      uint64_t result = (*(unsigned __int8 *)(a1 + 2) >> 3) & 1;
      break;
    case 5:
      uint64_t result = (*(unsigned __int8 *)(a1 + 2) >> 1) & 1;
      break;
    case 6:
      uint64_t result = (*(unsigned __int8 *)(a1 + 2) >> 4) & 1;
      break;
    case 9:
      uint64_t result = (*(unsigned __int8 *)(a1 + 2) >> 2) & 1;
      break;
    case 10:
      uint64_t result = (*(unsigned __int8 *)(a1 + 2) >> 5) & 1;
      break;
    default:
      return result;
  }
  return result;
}

double peridot::HDUnfoldClass::HDUnfoldClass(peridot::HDUnfoldClass *this)
{
  *(void *)this = &unk_2707174A8;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 11) = &unk_270717448;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = &unk_270717448;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = &unk_270717448;
  *((void *)this + 25) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 27) = &unk_270717448;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = &unk_270717448;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *(void *)&double result = 1;
  *((void *)this + 43) = 1;
  *((unsigned char *)this + 352) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 41) = &unk_270717688;
  *((void *)this + 42) = 0;
  return result;
}

{
  double result;

  *(void *)this = &unk_2707174A8;
  *((void *)this + 1) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 2) = 0;
  *((unsigned char *)this + 24) = 0;
  *((void *)this + 11) = &unk_270717448;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((unsigned char *)this + 112) = 0;
  *((void *)this + 15) = 0;
  *((void *)this + 16) = &unk_270717448;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((unsigned char *)this + 152) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = &unk_270717448;
  *((void *)this + 25) = 0;
  *((void *)this + 22) = 0;
  *((void *)this + 23) = 0;
  *((unsigned char *)this + 192) = 0;
  *((void *)this + 27) = &unk_270717448;
  *((void *)this + 28) = 0;
  *((void *)this + 29) = 0;
  *((unsigned char *)this + 240) = 0;
  *((void *)this + 36) = 0;
  *((void *)this + 31) = 0;
  *((void *)this + 32) = &unk_270717448;
  *((void *)this + 33) = 0;
  *((void *)this + 34) = 0;
  *((unsigned char *)this + 280) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 38) = 0;
  *(void *)&double result = 1;
  *((void *)this + 43) = 1;
  *((unsigned char *)this + 352) = 0;
  *((void *)this + 45) = 0;
  *((void *)this + 41) = &unk_270717688;
  *((void *)this + 42) = 0;
  return result;
}

void Matrix<unsigned char>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717448;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

uint64_t Matrix<unsigned char>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717448;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void Matrix<unsigned long>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707174A8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

uint64_t Matrix<unsigned long>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707174A8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void peridot::HDUnfoldClass::~HDUnfoldClass(peridot::HDUnfoldClass *this)
{
  *((void *)this + 41) = &unk_270717340;
  if (*((void *)this + 42) && *((unsigned char *)this + 352))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 42) = 0;
    *((void *)this + 45) = 0;
    *((unsigned char *)this + 352) = 0;
  }
  *((void *)this + 43) = 0;
  xpc_object_t v2 = (void *)*((void *)this + 38);
  if (v2)
  {
    *((void *)this + 39) = v2;
    operator delete(v2);
  }
  *((void *)this + 32) = &unk_270717448;
  if (*((void *)this + 33) && *((unsigned char *)this + 280))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 33) = 0;
    *((void *)this + 36) = 0;
    *((unsigned char *)this + 280) = 0;
  }
  *((void *)this + 34) = 0;
  *((void *)this + 27) = &unk_270717448;
  if (*((void *)this + 28) && *((unsigned char *)this + 240))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 28) = 0;
    *((void *)this + 31) = 0;
    *((unsigned char *)this + 240) = 0;
  }
  *((void *)this + 29) = 0;
  *((void *)this + 21) = &unk_270717448;
  if (*((void *)this + 22) && *((unsigned char *)this + 192))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 22) = 0;
    *((void *)this + 25) = 0;
    *((unsigned char *)this + 192) = 0;
  }
  *((void *)this + 23) = 0;
  *((void *)this + 16) = &unk_270717448;
  if (*((void *)this + 17) && *((unsigned char *)this + 152))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 17) = 0;
    *((void *)this + 20) = 0;
    *((unsigned char *)this + 152) = 0;
  }
  *((void *)this + 18) = 0;
  *((void *)this + 11) = &unk_270717448;
  if (*((void *)this + 12) && *((unsigned char *)this + 112))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 12) = 0;
    *((void *)this + 15) = 0;
    *((unsigned char *)this + 112) = 0;
  }
  *((void *)this + 13) = 0;
  *(void *)this = &unk_2707174A8;
  if (*((void *)this + 1) && *((unsigned char *)this + 24))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 1) = 0;
    *((void *)this + 4) = 0;
    *((unsigned char *)this + 24) = 0;
  }
  *((void *)this + 2) = 0;
}

uint64_t MatrixNxPts<1u,unsigned char>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717448;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t MatrixNxPts<1u,int>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717478;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,int>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717478;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void Matrix<int>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717478;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

uint64_t Matrix<int>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717478;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t std::__inplace_merge<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(uint64_t result, char *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!a5) {
    return result;
  }
  uint64_t v8 = a5;
  long long v10 = (char *)result;
  while (v8 > a7 && a4 > a7)
  {
    if (!a4) {
      return result;
    }
    int v11 = *(_DWORD *)a2;
    while (1)
    {
      int v12 = *(_DWORD *)v10;
      if (v11 > *(_DWORD *)v10) {
        break;
      }
      v10 += 8;
      if (!--a4) {
        return result;
      }
    }
    if (a4 >= v8)
    {
      if (a4 == 1)
      {
        *(_DWORD *)long long v10 = v11;
        *(_DWORD *)a2 = v12;
        int v65 = *((_DWORD *)v10 + 1);
        *((_DWORD *)v10 + 1) = *((_DWORD *)a2 + 1);
        *((_DWORD *)a2 + 1) = v65;
        return result;
      }
      if (a4 >= 0) {
        uint64_t v36 = a4;
      }
      else {
        uint64_t v36 = a4 + 1;
      }
      uint64_t v22 = v36 >> 1;
      float v16 = &v10[8 * (v36 >> 1)];
      float v15 = a2;
      if (a2 != a3)
      {
        unint64_t v37 = (a3 - a2) >> 3;
        float v15 = a2;
        do
        {
          unint64_t v38 = v37 >> 1;
          float v39 = &v15[8 * (v37 >> 1)];
          int v41 = *(_DWORD *)v39;
          float v40 = v39 + 8;
          v37 += ~(v37 >> 1);
          if (v41 > *(_DWORD *)v16) {
            float v15 = v40;
          }
          else {
            unint64_t v37 = v38;
          }
        }
        while (v37);
      }
      uint64_t v14 = (v15 - a2) >> 3;
      if (v16 != a2)
      {
LABEL_21:
        if (v15 == a2)
        {
          float v25 = v16;
        }
        else
        {
          int v23 = *(_DWORD *)v16;
          *(_DWORD *)float v16 = v11;
          *(_DWORD *)a2 = v23;
          int v24 = *((_DWORD *)v16 + 1);
          *((_DWORD *)v16 + 1) = *((_DWORD *)a2 + 1);
          *((_DWORD *)a2 + 1) = v24;
          float v25 = v16 + 8;
          for (i = a2 + 8; i != v15; i += 8)
          {
            if (v25 == a2) {
              a2 = i;
            }
            int v27 = *(_DWORD *)v25;
            *(_DWORD *)float v25 = *(_DWORD *)i;
            *(_DWORD *)i = v27;
            int v28 = *((_DWORD *)v25 + 1);
            *((_DWORD *)v25 + 1) = *((_DWORD *)i + 1);
            *((_DWORD *)i + 1) = v28;
            v25 += 8;
          }
          if (v25 != a2)
          {
            float v29 = v25;
            float v30 = a2;
            while (1)
            {
              int v31 = *(_DWORD *)v29;
              *(_DWORD *)float v29 = *(_DWORD *)v30;
              *(_DWORD *)float v30 = v31;
              int v32 = *((_DWORD *)v29 + 1);
              *((_DWORD *)v29 + 1) = *((_DWORD *)v30 + 1);
              *((_DWORD *)v30 + 1) = v32;
              v29 += 8;
              v30 += 8;
              BOOL v33 = v29 == a2;
              if (v30 == v15)
              {
                if (v29 == a2) {
                  goto LABEL_49;
                }
                float v30 = a2 + 8;
                while (1)
                {
                  int v34 = *(_DWORD *)v29;
                  *(_DWORD *)float v29 = *(_DWORD *)a2;
                  *(_DWORD *)a2 = v34;
                  int v35 = *((_DWORD *)v29 + 1);
                  *((_DWORD *)v29 + 1) = *((_DWORD *)a2 + 1);
                  *((_DWORD *)a2 + 1) = v35;
                  v29 += 8;
                  BOOL v33 = v29 == a2;
                  if (v30 != v15) {
                    break;
                  }
                  if (v29 == a2) {
                    goto LABEL_49;
                  }
                }
              }
              if (v33) {
                a2 = v30;
              }
            }
          }
        }
        goto LABEL_49;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v13 = v8;
      }
      else {
        uint64_t v13 = v8 + 1;
      }
      uint64_t v14 = v13 >> 1;
      float v15 = &a2[8 * (v13 >> 1)];
      float v16 = a2;
      if (a2 != v10)
      {
        unint64_t v17 = (a2 - v10) >> 3;
        float v16 = v10;
        do
        {
          unint64_t v18 = v17 >> 1;
          float v19 = &v16[8 * (v17 >> 1)];
          int v21 = *(_DWORD *)v19;
          float v20 = v19 + 8;
          v17 += ~(v17 >> 1);
          if (*(_DWORD *)v15 > v21) {
            unint64_t v17 = v18;
          }
          else {
            float v16 = v20;
          }
        }
        while (v17);
      }
      uint64_t v22 = (v16 - v10) >> 3;
      if (v16 != a2) {
        goto LABEL_21;
      }
    }
    float v25 = v15;
LABEL_49:
    a4 -= v22;
    v8 -= v14;
    if (v22 + v14 >= a4 + v8)
    {
      uint64_t v44 = a6;
      double result = std::__inplace_merge<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(v25, v15, a3, a4, v8, a6, a7);
      a2 = v16;
      uint64_t v8 = v14;
      a4 = v22;
      a3 = v25;
    }
    else
    {
      float v42 = v10;
      float v43 = a3;
      uint64_t v44 = a6;
      double result = std::__inplace_merge<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(v42, v16, v25, v22, v14, a6, a7);
      a3 = v43;
      long long v10 = v25;
      a2 = v15;
    }
    a6 = v44;
    if (!v8) {
      return result;
    }
  }
  if (a4 <= v8)
  {
    if (v10 == a2) {
      return result;
    }
    unint64_t v55 = a2 - v10 - 8;
    uint64_t v56 = (char *)a6;
    float32x2_t v57 = v10;
    if (v55 >= 0x18)
    {
      uint64_t v56 = (char *)a6;
      float32x2_t v57 = v10;
      if ((unint64_t)(a6 - (void)v10) > 0x1F)
      {
        uint64_t v58 = (v55 >> 3) + 1;
        uint64_t v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v56 = (char *)(a6 + v59);
        unint64_t v60 = (long long *)(v10 + 16);
        unint64_t v61 = (_OWORD *)(a6 + 16);
        uint64_t v62 = v58 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v63 = *v60;
          *(v61 - 1) = *(v60 - 1);
          *unint64_t v61 = v63;
          v60 += 2;
          v61 += 2;
          v62 -= 4;
        }
        while (v62);
        if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v64 = v59 + a6 - 8;
          goto LABEL_98;
        }
        float32x2_t v57 = &v10[v59];
      }
    }
    do
    {
      uint64_t v82 = *(void *)v57;
      v57 += 8;
      *(void *)uint64_t v56 = v82;
      v56 += 8;
    }
    while (v57 != a2);
    uint64_t v64 = (uint64_t)(v56 - 8);
LABEL_98:
    if (v56 == (char *)a6) {
      return result;
    }
    uint64_t v83 = 0;
    float32x2_t v84 = v10;
    float32x2_t v85 = (char *)a6;
    while (a2 != a3)
    {
      int v86 = *(_DWORD *)a2;
      if (*(_DWORD *)a2 > *(_DWORD *)v85)
      {
        float32x2_t v87 = a2;
      }
      else
      {
        int v86 = *(_DWORD *)v85;
        float32x2_t v87 = v85;
      }
      if (*(_DWORD *)a2 > *(_DWORD *)v85) {
        a2 += 8;
      }
      else {
        v85 += 8;
      }
      *(_DWORD *)float32x2_t v84 = v86;
      *((_DWORD *)v84 + 1) = *((_DWORD *)v87 + 1);
      v84 += 8;
      ++v83;
      if (v85 == v56) {
        return result;
      }
    }
    unint64_t v88 = (v55 & 0xFFFFFFFFFFFFFFF8) + a6 - (void)v85;
    if (v88 >= 0x78)
    {
      if (v84 >= &v85[(v88 & 0xFFFFFFFFFFFFFFF8) + 8] || v85 >= &v10[8 * v83 + 8 + (v88 & 0xFFFFFFFFFFFFFFF8)])
      {
        unint64_t v93 = 0;
        uint64_t v94 = (v88 >> 3) + 1;
        uint64_t v95 = 8 * (v94 & 0x3FFFFFFFFFFFFFF8);
        float32x2_t v89 = &v84[v95];
        uint64_t v96 = v94 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          float32x2_t v97 = &v84[v93];
          double result = (uint64_t)&v85[v93];
          long long v98 = *(_OWORD *)&v85[v93 + 16];
          long long v100 = *(_OWORD *)&v85[v93 + 32];
          long long v99 = *(_OWORD *)&v85[v93 + 48];
          *(_OWORD *)float32x2_t v97 = *(_OWORD *)&v85[v93];
          *((_OWORD *)v97 + 1) = v98;
          *((_OWORD *)v97 + 2) = v100;
          *((_OWORD *)v97 + 3) = v99;
          v93 += 64;
          v96 -= 8;
        }
        while (v96);
        if (v94 == (v94 & 0x3FFFFFFFFFFFFFF8)) {
          return result;
        }
        v85 += v95;
      }
      else
      {
        float32x2_t v89 = v84;
      }
    }
    else
    {
      float32x2_t v89 = v84;
    }
    do
    {
      *(_DWORD *)float32x2_t v89 = *(_DWORD *)v85;
      *((_DWORD *)v89 + 1) = *((_DWORD *)v85 + 1);
      v89 += 8;
      BOOL v101 = v85 == (char *)v64;
      v85 += 8;
    }
    while (!v101);
    return result;
  }
  int64_t v45 = a3 - a2;
  if (a3 == a2) {
    return result;
  }
  unint64_t v46 = v45 - 8;
  if ((unint64_t)(v45 - 8) < 0x18)
  {
    float v47 = (void *)a6;
    float32x2_t v48 = a2;
    goto LABEL_71;
  }
  float v47 = (void *)a6;
  float32x2_t v48 = a2;
  if ((unint64_t)(a6 - (void)a2) <= 0x1F)
  {
    do
    {
LABEL_71:
      uint64_t v66 = *(void *)v48;
      v48 += 8;
      *v47++ = v66;
    }
    while (v48 != a3);
  }
  else
  {
    uint64_t v49 = (v46 >> 3) + 1;
    uint64_t v50 = 8 * (v49 & 0x3FFFFFFFFFFFFFFCLL);
    float v47 = (void *)(a6 + v50);
    unsigned int v51 = (long long *)(a2 + 16);
    float32x2_t v52 = (_OWORD *)(a6 + 16);
    uint64_t v53 = v49 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v54 = *v51;
      *(v52 - 1) = *(v51 - 1);
      *float32x2_t v52 = v54;
      v51 += 2;
      v52 += 2;
      v53 -= 4;
    }
    while (v53);
    if (v49 != (v49 & 0x3FFFFFFFFFFFFFFCLL))
    {
      float32x2_t v48 = &a2[v50];
      goto LABEL_71;
    }
  }
  if (v47 != (void *)a6)
  {
    uint64_t v67 = 0;
    unint64_t v68 = (unint64_t)a3;
    while (a2 != v10)
    {
      int v69 = *((_DWORD *)v47 - 2);
      int v70 = *((_DWORD *)a2 - 2);
      BOOL v71 = v69 <= v70;
      if (v69 >= v70) {
        int v69 = *((_DWORD *)a2 - 2);
      }
      *(_DWORD *)(v68 - 8) = v69;
      v68 -= 8;
      if (v71) {
        long long v72 = (char *)v47;
      }
      else {
        long long v72 = a2;
      }
      if (v71) {
        --v47;
      }
      else {
        a2 -= 8;
      }
      *(_DWORD *)(v68 + 4) = *((_DWORD *)v72 - 1);
      ++v67;
      if (v47 == (void *)a6) {
        return result;
      }
    }
    unint64_t v73 = (unint64_t)v47 - a6 - 8;
    if (v73 < 0x58
      || ((unint64_t v74 = v73 >> 3, &a3[-8 * v67 - 8 + -8 * v74] < (char *)v47)
        ? (BOOL v75 = (unint64_t)&v47[-v74 - 1] >= v68)
        : (BOOL v75 = 1),
          !v75))
    {
      float32x2_t v77 = v47;
      goto LABEL_112;
    }
    unint64_t v76 = v74 + 1;
    float32x2_t v77 = &v47[-(v76 & 0x3FFFFFFFFFFFFFFCLL)];
    uint64_t v78 = 0x1FFFFFFFFFFFFFFCLL;
    uint64_t v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      unint64_t v80 = (const float *)&v47[v78];
      float32x4x2_t v102 = vld2q_f32(v80);
      unint64_t v81 = (float *)(v68 + v78 * 8);
      vst2q_f32(v81, v102);
      v78 -= 4;
      v79 -= 4;
    }
    while (v79);
    if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL))
    {
      v68 -= 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
LABEL_112:
      float32x2_t v90 = (_DWORD *)(v68 - 4);
      do
      {
        int v91 = *((_DWORD *)v77-- - 2);
        *(v90 - 1) = v91;
        *float32x2_t v90 = *((_DWORD *)v77 + 1);
        v90 -= 2;
      }
      while (v77 != (void *)a6);
    }
  }
  return result;
}

void MatrixNxPts<1u,unsigned char>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717448;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

uint64_t peridot::HDUnfoldClass::paramsDefault(uint64_t this)
{
  *(_DWORD *)(this + 56) = 1085276160;
  *(unsigned char *)(this + 72) = 2;
  *(_DWORD *)(this + 76) = 1058638150;
  *(_WORD *)(this + 80) = 10;
  *(void *)(this + 64) = 15;
  *(void *)(this + 48) = 600;
  *(void *)(this + 376) = 8;
  *(_DWORD *)(this + 84) = 0x40000000;
  return this;
}

uint64_t peridot::HDUnfoldClass::setParams(uint64_t this, __int16 a2, __int16 a3, float a4, char a5, char a6)
{
  *(_WORD *)(this + 42) = a2;
  *(_WORD *)(this + 40) = a3;
  *(float *)(this + 56) = a4;
  *(unsigned char *)(this + 72) = a5;
  *(unsigned char *)(this + 73) = a6;
  return this;
}

float peridot::HDUnfoldClass::sDiffBLR::remnantFunc(peridot::HDUnfoldClass::sDiffBLR *this, float a2)
{
  float v2 = (float)(a2 + 1.0) + (float)*((int *)this + 19);
  if (v2 < 0.0) {
    float v2 = 0.0;
  }
  if ((float)((float)*((unsigned int *)this + 13) + -1.0) < v2) {
    float v2 = (float)*((unsigned int *)this + 13) + -1.0;
  }
  return *(float *)(*((void *)this + 5) + 4 * v2);
}

void peridot::HDUnfoldClass::HDunfold(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v15 = v4;
  __src[514] = *MEMORY[0x263EF8340];
  float v21 = 0.0;
  bzero(__src, 0x1010uLL);
  *(_WORD *)float v19 = 0;
  peridot::HDUnfoldClass::crtUnfold(v15, v14, v10 + 168, v16, v12, (uint64_t)__src, (uint64_t)&v21, (uint64_t)v20, (uint64_t)&v19[1], v19);
  LOBYTE(v12) = v19[0];
  peridot::HDUnfoldClass::calcConf(v15, v17, __src, v18, v10 + 144, (float *)(v10 + 168), v10, *(void *)(v10 + 184), v21, v19[0], v8, v6);
  *(unsigned char *)(v8 + 235) = v19[1];
  *(unsigned char *)(v8 + 236) = v12;
}

void peridot::HDUnfoldClass::diffBLRprocess(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, float *a10, _DWORD *a11, float *a12, _DWORD *a13)
{
  uint64_t v13 = (int *)MEMORY[0x270FA5388](a1, a2, a3, a4);
  float32x2_t v382 = v19;
  unint64_t v21 = v20;
  uint64_t v385 = v22;
  uint64_t v468 = *MEMORY[0x263EF8340];
  float32x2_t v394 = v13;
  uint64_t v23 = *((void *)v13 + 39) - *((void *)v13 + 38);
  if (v15)
  {
    unint64_t v466 = 0;
    if (v15 == 1)
    {
      uint64_t v384 = 0;
      uint64_t v24 = 1;
    }
    else
    {
      uint64_t v384 = 0;
      unint64_t v467 = 1;
      if (v15 == 2) {
        goto LABEL_8;
      }
      uint64_t v24 = 2;
    }
  }
  else
  {
    uint64_t v384 = 1;
    unint64_t v466 = 1;
    uint64_t v24 = 1;
  }
  *(&v466 + v24) = 2;
LABEL_8:
  float32x2_t v393 = *(uint64_t **)v14;
  float32x2_t v390 = *(void **)(v14 + 40);
  v18.i32[0] = *(_DWORD *)(v14 + 48);
  int32x2_t v391 = v18;
  float v25 = v16[v15];
  float v26 = v16[1];
  v464[0] = v25 - *v16;
  v463[0] = llroundf(v464[0]);
  v462[0] = v464[0] - truncf(roundf(v464[0]));
  v464[1] = v25 - v26;
  v463[1] = llroundf(v25 - v26);
  v462[1] = (float)(v25 - v26) - truncf(roundf(v25 - v26));
  float v465 = v25 - v16[2];
  v463[2] = llroundf(v465);
  v462[2] = v465 - truncf(roundf(v465));
  uint64_t v27 = v23 >> 2;
  uint64_t v28 = *v17;
  float v29 = (float)(unint64_t)((v17[1] - *v17) >> 3);
  float v30 = ceilf(v29 * 0.5);
  unint64_t v31 = vcvtps_u32_f32(v29 * 0.5);
  float v32 = floorf((float)(unint64_t)v27 * 0.5);
  signed int v33 = (int)(float)(-1.0 - (float)(v32 + v30));
  int v34 = (int)(float)((float)(v32 + (float)(v29 + 2.0)) - v30);
  int v35 = v33 - v34;
  unint64_t v383 = v31;
  unint64_t v381 = v15;
  if (v33 > v34)
  {
    unint64_t v36 = 0;
    uint64_t v37 = *(void *)(v28 + 8 * v31);
    unsigned int v38 = v37 - 1;
    uint64_t v389 = v15;
    uint64_t v39 = *(void *)(*((void *)v13 + 1) + 8 * v15);
    unsigned int v40 = (unsigned __int16)v39;
    unint64_t v41 = -2;
    int v388 = v37;
    goto LABEL_23;
  }
  uint64_t v42 = (v34 - v33);
  if (v42 > 6)
  {
    unint64_t v36 = v42 + 1;
    uint64_t v43 = (v42 + 1) & 0x1FFFFFFF8;
    int32x4_t v44 = vaddq_s32(vdupq_n_s32(v33), (int32x4_t)xmmword_259120340);
    int64_t v45 = (int32x4_t *)v461;
    v46.i64[0] = 0x400000004;
    v46.i64[1] = 0x400000004;
    v47.i64[0] = 0x800000008;
    v47.i64[1] = 0x800000008;
    uint64_t v48 = v43;
    do
    {
      v45[-1] = v44;
      int32x4_t *v45 = vaddq_s32(v44, v46);
      int32x4_t v44 = vaddq_s32(v44, v47);
      v45 += 2;
      v48 -= 8;
    }
    while (v48);
    if (v36 == v43)
    {
      uint64_t v49 = v43 - 1;
      goto LABEL_20;
    }
    v33 += v43;
  }
  else
  {
    uint64_t v43 = 0;
  }
  unint64_t v36 = v43;
  do
    *(_DWORD *)&v459[4 * v36++ + 1472] = v33++;
  while (v35 + v36 != 1);
  uint64_t v49 = v36 - 1;
LABEL_20:
  uint64_t v50 = *(void *)(v28 + 8 * v31);
  unint64_t v41 = v49 - 1;
  int v388 = v50;
  if (v49 == 1)
  {
    uint64_t v389 = v15;
    int v397 = 1;
    unint64_t v36 = 2;
    goto LABEL_28;
  }
  unsigned int v38 = v50 - 1;
  uint64_t v389 = v15;
  uint64_t v39 = *(void *)(*((void *)v13 + 1) + 8 * v15);
  unsigned int v40 = (unsigned __int16)v39;
  if (v41 >= 4)
  {
LABEL_23:
    int32x4_t v52 = vdupq_n_s32(v38);
    int32x4_t v53 = vdupq_n_s32(v39);
    int8x16_t v54 = (int8x16_t)vdupq_n_s32(v40);
    unint64_t v51 = v41 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v55 = (int32x4_t *)v460;
    uint64_t v56 = (int32x4_t *)v459;
    v57.i64[0] = 0x100000001;
    v57.i64[1] = 0x100000001;
    unint64_t v58 = v41 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int32x4_t v59 = *v55++;
      int32x4_t v60 = vaddq_s32(v52, v59);
      v60.i32[0] %= v53.i32[0];
      v60.i32[1] %= v53.i32[1];
      v60.i32[2] %= v53.i32[2];
      v60.i32[3] %= v53.i32[3];
      *v56++ = vaddq_s32(vaddq_s32(v60, v57), (int32x4_t)vandq_s8((int8x16_t)vcltzq_s32(v60), v54));
      v58 -= 4;
    }
    while (v58);
    if (v41 == v51) {
      goto LABEL_27;
    }
    goto LABEL_26;
  }
  unint64_t v51 = 0;
  do
  {
LABEL_26:
    uint64_t v61 = 4 * v51;
    unint64_t v62 = v51 + 1;
    int v63 = (int)(v38 + v460[v51]) % (int)v39;
    *(_DWORD *)&v459[v61] = v63 + (v40 & (v63 >> 31)) + 1;
    unint64_t v51 = v62;
  }
  while (v41 != v62);
LABEL_27:
  int v397 = 0;
LABEL_28:
  bzero(v457, 0x5C0uLL);
  bzero(v455, 0x5C0uLL);
  uint64_t v64 = 0;
  unint64_t v380 = v21;
  *(float *)v65.i32 = *(float *)v391.i32 / (float)v21;
  unint64_t v395 = v36 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v66 = vdupq_lane_s32(v391, 0);
  int32x4_t v67 = vdupq_lane_s32(v65, 0);
  unint64_t v398 = v41;
  unint64_t v396 = v41 & 0xFFFFFFFFFFFFFFF8;
  float v68 = 1.0 / (float)v21;
  int64x2_t v386 = vdupq_n_s64(8uLL);
  int64x2_t v387 = vdupq_n_s64(4uLL);
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v392 = _Q0;
  char v73 = 1;
  int32x4_t v399 = v67;
  int32x4_t v400 = v66;
  do
  {
    char v74 = v73;
    if (!v36)
    {
      bzero(v430, 0x2E0uLL);
      goto LABEL_64;
    }
    unint64_t v75 = *(&v466 + v64);
    unsigned int v76 = v388 - v463[v75];
    if (v36 > 7)
    {
      uint64_t v79 = (int32x4_t *)&v452;
      unint64_t v80 = (int32x4_t *)&v454;
      int32x4_t v81 = vdupq_n_s32(v76);
      uint64_t v82 = (int32x4_t *)&v450;
      uint64_t v83 = (int32x4_t *)v461;
      unint64_t v84 = v36 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        int32x4_t v85 = vaddq_s32(v81, *v83);
        v80[-1] = vaddq_s32(v81, v83[-1]);
        *unint64_t v80 = v85;
        v79[-1] = v66;
        *uint64_t v79 = v66;
        v83 += 2;
        v82[-1] = v67;
        *uint64_t v82 = v67;
        v82 += 2;
        v80 += 2;
        v79 += 2;
        v84 -= 8;
      }
      while (v84);
      unint64_t v77 = v36 & 0xFFFFFFFFFFFFFFF8;
      __int32 v78 = v391.i32[0];
      if (v36 == v395) {
        goto LABEL_39;
      }
    }
    else
    {
      unint64_t v77 = 0;
      __int32 v78 = v391.i32[0];
    }
    unint64_t v86 = v36 - v77;
    unint64_t v87 = v77;
    unint64_t v88 = &v449[v77];
    float32x2_t v89 = &v451[v87];
    float32x2_t v90 = &v453[v87];
    int v91 = (int *)&v459[v87 * 4 + 1472];
    do
    {
      int v92 = *v91++;
      *v90++ = v76 + v92;
      *v89++ = v78;
      *v88++ = v65.i32[0];
      --v86;
    }
    while (v86);
LABEL_39:
    bzero(v430, 0x2E0uLL);
    uint64_t v94 = 0;
    int v95 = 0;
    int v96 = 0;
    int v97 = (unsigned __int16)*(void *)(*((void *)v394 + 1) + 8 * v389);
    do
    {
      int v98 = v453[v94];
      if (v98 < 1)
      {
        int v96 = 1;
        if (v98 > v97)
        {
LABEL_40:
          int v95 = 1;
          *((unsigned char *)&v432[77] + v94) = 1;
        }
      }
      else
      {
        v430[v94] = 1;
        if (v98 > v97) {
          goto LABEL_40;
        }
      }
      ++v94;
    }
    while (v36 != v94);
    if ((v96 | v95))
    {
      uint64_t v99 = 0;
      long long v100 = &v430[368 * ((v96 & 1) == 0)];
      BOOL v101 = (float *)v449;
      float32x4x2_t v102 = (float *)v451;
      unint64_t v103 = v36;
      do
      {
        if (*v100++)
        {
          if (v75 >= (v393[1] - *v393) >> 3) {
            std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
          }
          float v105 = *(float *)(*(void *)(*(void *)(*v393 + 8 * v75) + 8) + 4 * v99);
          *float32x4x2_t v102 = v105;
          if (v75 >= (uint64_t)(v390[1] - *v390) >> 3) {
            std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
          }
          *BOOL v101 = (float)(*(float *)(*(void *)(*(void *)(*v390 + 8 * v75) + 8) + 4 * v99++) * v105) * v68;
        }
        ++v101;
        ++v102;
        --v103;
      }
      while (v103);
    }
    else
    {
      if (v75 >= (v393[1] - *v393) >> 3) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v106 = *(void *)(*(void *)(*v393 + 8 * v75) + 8);
      if (v75 >= (uint64_t)(v390[1] - *v390) >> 3)
      {
        v451[0] = *(_DWORD *)(v106 + 4 * v453[0] - 4);
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v107 = *(void *)(*(void *)(*v390 + 8 * v75) + 8);
      float32x2_t v108 = (float *)v449;
      float32x2_t v109 = (float *)v451;
      float32x2_t v110 = v453;
      unint64_t v111 = v36;
      do
      {
        uint64_t v112 = *v110++;
        uint64_t v113 = 4 * v112 - 4;
        float v114 = *(float *)(v106 + v113);
        *v109++ = v114;
        *v108++ = (float)(*(float *)(v107 + v113) * v114) * v68;
        --v111;
      }
      while (v111);
    }
    *(float *)v93.i32 = v462[v75];
    if (v36 < 8)
    {
      unint64_t v115 = 0;
      goto LABEL_63;
    }
    float32x2_t v116 = (float32x4_t *)&v448;
    float32x2_t v117 = (float32x4_t *)&v443;
    float32x4_t v118 = (float32x4_t)vdupq_lane_s32(v93, 0);
    unint64_t v119 = v36 & 0xFFFFFFFFFFFFFFF8;
    int64x2_t v120 = (int64x2_t)xmmword_2591200C0;
    int64x2_t v121 = (int64x2_t)xmmword_2591200D0;
    do
    {
      float32x4_t v122 = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v120)), vcvtq_f64_u64((uint64x2_t)v121)), v392);
      float32x4_t v123 = vaddq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v120, v387))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v121, v387))), v392);
      v116[-1] = v122;
      *float32x2_t v116 = v123;
      v117[-1] = vsubq_f32(v122, v118);
      *float32x2_t v117 = vsubq_f32(v123, v118);
      int64x2_t v121 = vaddq_s64(v121, v386);
      int64x2_t v120 = vaddq_s64(v120, v386);
      v117 += 2;
      v116 += 2;
      v119 -= 8;
    }
    while (v119);
    unint64_t v115 = v36 & 0xFFFFFFFFFFFFFFF8;
    if (v36 != v395)
    {
      do
      {
LABEL_63:
        float v124 = (float)v115 + 1.0;
        unint64_t v125 = v115;
        *(float *)&v446[v125 * 4] = v124;
        v442[v125] = v124 - *(float *)v93.i32;
        ++v115;
      }
      while (v36 != v115);
    }
LABEL_64:
    float32x2_t v426 = v446;
    v427[0] = 1;
    v427[1] = v36;
    char v428 = 0;
    uint64_t v429 = 4 * v36;
    float32x2_t v425 = &unk_270717688;
    float32x2_t v420 = v442;
    int v421 = 1;
    int v422 = v36;
    char v423 = 0;
    uint64_t v424 = v429;
    float32x2_t v419 = &unk_270717688;
    float32x2_t v414 = v451;
    int v415 = 1;
    int v416 = v36;
    char v417 = 0;
    uint64_t v418 = v429;
    float32x2_t v413 = &unk_270717688;
    float32x2_t v408 = v438;
    int v409 = 1;
    int v410 = v36;
    char v411 = 0;
    uint64_t v412 = v429;
    float32x2_t v407 = &unk_270717688;
    Interp1<float,LinearInterpolator<float>>((uint64_t)&v425, (uint64_t)&v413, v442, v36, (uint64_t)&v407);
    if ((v397 & 1) == 0)
    {
      float32x2_t v126 = (float32x4_t *)&v458;
      float32x2_t v127 = (float32x4_t *)&v439;
      unint64_t v128 = v396;
      v129.i64[0] = 0x3F0000003F000000;
      v129.i64[1] = 0x3F0000003F000000;
      if (v398 < 8)
      {
        unint64_t v130 = 0;
        goto LABEL_69;
      }
      do
      {
        float32x4_t v131 = vmlaq_f32(*v126, v129, *v127);
        v126[-1] = vmlaq_f32(v126[-1], v129, v127[-1]);
        *float32x2_t v126 = v131;
        v127 += 2;
        v126 += 2;
        v128 -= 8;
      }
      while (v128);
      unint64_t v130 = v396;
      if (v398 != v396)
      {
LABEL_69:
        unint64_t v132 = v398 - v130;
        uint64_t v133 = 4 * v130;
        float32x2_t v134 = (float *)&v438[4 * v130 + 4];
        float32x2_t v135 = (float *)&v457[v133];
        do
        {
          float v136 = *v134++;
          *float32x2_t v135 = *v135 + (float)(v136 * 0.5);
          ++v135;
          --v132;
        }
        while (v132);
      }
    }
    int v403 = 1;
    int v404 = v36;
    char v405 = 0;
    uint64_t v406 = 4 * v36;
    float32x2_t v401 = &unk_270717688;
    float32x2_t v402 = v449;
    *(void *)&v433[8] = v434;
    *(_DWORD *)&v433[16] = 1;
    *(_DWORD *)&v433[20] = v36;
    v433[24] = 0;
    *(void *)&v433[32] = v406;
    *(void *)float32x2_t v433 = &unk_270717688;
    Interp1<float,LinearInterpolator<float>>((uint64_t)&v425, (uint64_t)&v401, v420, v422, (uint64_t)v433);
    int32x4_t v67 = v399;
    int32x4_t v66 = v400;
    v137.i64[0] = 0x3F0000003F000000;
    v137.i64[1] = 0x3F0000003F000000;
    if ((v397 & 1) == 0)
    {
      float32x2_t v138 = (float32x4_t *)&v456;
      float32x2_t v139 = (float32x4_t *)&v435;
      unint64_t v140 = v396;
      if (v398 < 8)
      {
        unint64_t v141 = 0;
        goto LABEL_76;
      }
      do
      {
        float32x4_t v142 = vmlaq_f32(*v138, v137, *v139);
        v138[-1] = vmlaq_f32(v138[-1], v137, v139[-1]);
        *float32x2_t v138 = v142;
        v139 += 2;
        v138 += 2;
        v140 -= 8;
      }
      while (v140);
      unint64_t v141 = v396;
      if (v398 != v396)
      {
LABEL_76:
        unint64_t v143 = v398 - v141;
        uint64_t v144 = 4 * v141;
        float32x2_t v145 = (float *)&v434[4 * v141 + 4];
        float32x2_t v146 = (float *)&v455[v144];
        do
        {
          float v147 = *v145++;
          *float32x2_t v146 = *v146 + (float)(v147 * 0.5);
          ++v146;
          --v143;
        }
        while (v143);
      }
    }
    *(void *)float32x2_t v433 = &unk_270717340;
    if (*(void *)&v433[8]) {
      _ZF = v433[24] == 0;
    }
    else {
      _ZF = 1;
    }
    if (!_ZF)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    float32x2_t v401 = &unk_270717340;
    if (v402 && v405)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    float32x2_t v407 = &unk_270717340;
    if (v408 && v411)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    float32x2_t v413 = &unk_270717340;
    if (v414 && v417)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    float32x2_t v419 = &unk_270717340;
    if (v420 && v423)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    float32x2_t v425 = &unk_270717340;
    if (v426 && v428)
    {
      MEMORY[0x25A2D62A0]();
      int32x4_t v67 = v399;
      int32x4_t v66 = v400;
    }
    char v73 = 0;
    uint64_t v64 = 1;
    *(float *)v65.i32 = *(float *)v391.i32 / (float)v21;
  }
  while ((v74 & 1) != 0);
  if ((v397 & 1) == 0)
  {
    if (v381 >= (v393[1] - *v393) >> 3) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v149 = v398;
    if (v381 >= (uint64_t)(v390[1] - *v390) >> 3) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v150 = *(void *)(*(void *)(*v393 + 8 * v381) + 8);
    uint64_t v151 = *(void *)(*(void *)(*v390 + 8 * v381) + 8);
    float32x2_t v152 = (float *)v449;
    float32x2_t v153 = (float *)v451;
    float32x2_t v154 = v455;
    float32x2_t v155 = (float *)v453;
    float32x2_t v156 = v457;
    float32x2_t v157 = (int *)v459;
    do
    {
      uint64_t v158 = *v157++;
      uint64_t v159 = 4 * v158 - 4;
      float v160 = *(float *)(v150 + v159);
      LODWORD(v158) = *v156++;
      *v155++ = v160 - *(float *)&v158;
      LODWORD(v158) = *v154++;
      *v153++ = *(float *)&v158 * 1.5;
      *v152++ = (float)(*(float *)&v158 * 0.5) + (float)((float)(*(float *)(v151 + v159) * v160) * v68);
      --v149;
    }
    while (v149);
  }
  float32x2_t v161 = 0;
  float32x2_t v162 = 0;
  float32x2_t v163 = 0;
  float32x2_t v164 = 0;
  unint64_t v165 = *(void *)(v385 + 8 * v467);
  unint64_t v166 = *(void *)(v385 + 8 * v384);
  if (v165 >= v166) {
    uint64_t v167 = *(void *)(v385 + 8 * v384);
  }
  else {
    uint64_t v167 = *(void *)(v385 + 8 * v467);
  }
  if ((int)v167 <= 2) {
    LODWORD(v167) = 2;
  }
  unint64_t v168 = (v167 - 2);
  if (v166 > v165) {
    unint64_t v165 = *(void *)(v385 + 8 * v384);
  }
  unint64_t v169 = v165 + 2;
  while (2)
  {
    if (v164 < v163)
    {
      *v164++ = v168;
    }
    else
    {
      uint64_t v170 = v164 - v162;
      unint64_t v171 = v170 + 1;
      if ((unint64_t)(v170 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v163 - (char *)v162) >> 2 > v171) {
        unint64_t v171 = ((char *)v163 - (char *)v162) >> 2;
      }
      if ((unint64_t)((char *)v163 - (char *)v162) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v172 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v172 = v171;
      }
      if (v172)
      {
        if (v172 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        float32x2_t v173 = operator new(8 * v172);
      }
      else
      {
        float32x2_t v173 = 0;
      }
      float32x2_t v161 = (unint64_t *)&v173[8 * v170];
      *float32x2_t v161 = v168;
      float32x2_t v174 = v161 + 1;
      if (v164 != v162)
      {
        unint64_t v175 = (char *)(v164 - 1) - (char *)v162;
        if (v175 < 0x168)
        {
          float32x2_t v176 = v164;
          goto LABEL_127;
        }
        if (&v173[(char *)v164 - (char *)v162 - 8 - (v175 & 0xFFFFFFFFFFFFFFF8)] > &v173[(char *)v164
                                                                                          - (char *)v162
                                                                                          - 8])
        {
          float32x2_t v176 = v164;
          goto LABEL_127;
        }
        if ((unint64_t *)((char *)v164 - (v175 & 0xFFFFFFFFFFFFFFF8) - 8) > v164 - 1)
        {
          float32x2_t v176 = v164;
          goto LABEL_127;
        }
        if ((unint64_t)((char *)v162 - v173) < 0x20)
        {
          float32x2_t v176 = v164;
          goto LABEL_127;
        }
        uint64_t v178 = (v175 >> 3) + 1;
        float32x2_t v176 = &v164[-(v178 & 0x3FFFFFFFFFFFFFFCLL)];
        float32x2_t v179 = &v173[8 * v170 - 16];
        float32x2_t v180 = v164 - 2;
        uint64_t v181 = v178 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v182 = *(_OWORD *)v180;
          *(v179 - 1) = *((_OWORD *)v180 - 1);
          *float32x2_t v179 = v182;
          v179 -= 2;
          v180 -= 4;
          v181 -= 4;
        }
        while (v181);
        v161 -= v178 & 0x3FFFFFFFFFFFFFFCLL;
        if (v178 != (v178 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_127:
            unint64_t v177 = *--v176;
            *--float32x2_t v161 = v177;
          }
          while (v176 != v162);
        }
      }
      float32x2_t v163 = (unint64_t *)&v173[8 * v172];
      if (v162) {
        operator delete(v162);
      }
      float32x2_t v162 = v161;
      float32x2_t v164 = v174;
    }
    if (++v168 <= v169) {
      continue;
    }
    break;
  }
  if (v164 == v161)
  {
    float v193 = 0.0;
  }
  else
  {
    uint64_t v183 = *v393;
    unint64_t v184 = (v393[1] - *v393) >> 3;
    if (v184 <= v466) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    if (v184 <= v467) {
      std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
    }
    unint64_t v185 = 0;
    unint64_t v186 = v164 - v161;
    uint64_t v187 = *(void *)(v183 + 8 * v467);
    uint64_t v188 = *(void *)(*(void *)(v183 + 8 * v466) + 8);
    uint64_t v189 = *(void *)(v187 + 8);
    if (v186 <= 1) {
      unint64_t v186 = 1;
    }
    float v190 = 0.0;
    float v191 = 0.0;
    do
    {
      uint64_t v192 = 4 * v161[v185];
      if (*(float *)(v188 + v192) > v191)
      {
        float v191 = *(float *)(v188 + v192);
        unint64_t v169 = v185;
      }
      if (*(float *)(v189 + v192) > v190)
      {
        float v190 = *(float *)(v189 + v192);
        unint64_t v168 = v185;
      }
      ++v185;
    }
    while (v186 != v185);
    float v193 = v190 + v191;
  }
  float v194 = v464[v466];
  unint64_t v195 = *v161;
  float v196 = v464[v467];
  bzero(v446, 0x5C0uLL);
  if (v397)
  {
    unint64_t v199 = v398;
    goto LABEL_178;
  }
  float v200 = (float)(v193 * 0.5) * (float)(v193 * 0.5);
  unsigned int v201 = ~(unint64_t)(float)(roundf((float)((float)((float)((float)v169 + (float)v168) + (float)(v194 + v196))+ (float)((float)v195 * 2.0))* 0.5)+ 1.0);
  float v202 = (float)v394[93];
  *(float *)v197.i32 = (float)v394[87] + -1.0;
  uint64_t v203 = *((void *)v394 + 42);
  unint64_t v199 = v398;
  if (v398 > 1)
  {
    unint64_t v204 = v398 & 0xFFFFFFFFFFFFFFFELL;
    float32x2_t v206 = (float32x2_t)vdup_lane_s32(v197, 0);
    int32x2_t v207 = vdup_n_s32(v201);
    *(float *)v198.i32 = v202 + 1.0;
    float32x2_t v208 = (float32x2_t)vdup_lane_s32(v198, 0);
    float32x2_t v209 = (float *)&v447;
    float32x2_t v210 = (int32x2_t *)v459;
    unint64_t v211 = v398 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v205 = v380;
    do
    {
      int32x2_t v212 = *v210++;
      float32x2_t v213 = vadd_f32(v208, vcvt_f32_s32(vadd_s32(v212, v207)));
      float32x2_t v214 = (float32x2_t)vbic_s8((int8x8_t)v213, (int8x8_t)vcltz_f32(v213));
      uint32x2_t v215 = vcvt_u32_f32((float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v214, v206), (int8x8_t)v206, (int8x8_t)v214));
      float v216 = v200 * *(float *)(v203 + 4 * v215.u32[1]);
      *(v209 - 1) = v200 * *(float *)(v203 + 4 * v215.u32[0]);
      *float32x2_t v209 = v216;
      v209 += 2;
      v211 -= 2;
    }
    while (v211);
    if (v398 != v204) {
      goto LABEL_161;
    }
  }
  else
  {
    unint64_t v204 = 0;
    unint64_t v205 = v380;
LABEL_161:
    unint64_t v217 = v398 - v204;
    uint64_t v218 = 4 * v204;
    float32x2_t v219 = (float *)&v446[4 * v204];
    float32x2_t v220 = (int *)&v459[v218];
    do
    {
      int v221 = *v220++;
      float v222 = (float)(int)(v221 + v201) + (float)(v202 + 1.0);
      if (v222 < 0.0) {
        float v222 = 0.0;
      }
      if (*(float *)v197.i32 < v222) {
        float v222 = *(float *)v197.i32;
      }
      *v219++ = v200 * *(float *)(v203 + 4 * v222);
      --v217;
    }
    while (v217);
  }
  *(float *)v197.i32 = 1.0 / (float)(v205 * v205);
  if (v398 > 3)
  {
    unint64_t v223 = v398 & 0xFFFFFFFFFFFFFFFCLL;
    float32x4_t v224 = (float32x4_t)vdupq_lane_s32(v197, 0);
    float32x2_t v225 = (float32x4_t *)v434;
    float32x2_t v226 = (float32x4_t *)v453;
    float32x2_t v227 = (float32x4_t *)v442;
    float32x2_t v228 = (float32x4_t *)v438;
    float32x2_t v229 = (float32x4_t *)v451;
    float32x2_t v230 = (float32x4_t *)v446;
    float32x2_t v231 = (float32x4_t *)v449;
    unint64_t v232 = v398 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float32x4_t v233 = *v231++;
      float32x4_t v234 = v233;
      float32x4_t v235 = *v230++;
      float32x4_t v236 = v235;
      float32x4_t v237 = vaddq_f32(v235, v234);
      float32x4_t v238 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v224, v237), (int8x16_t)v224, (int8x16_t)v237);
      float32x4_t v239 = *v229++;
      float32x4_t v240 = vaddq_f32(v239, v236);
      *v228++ = vdivq_f32(v392, v238);
      *v227++ = vdivq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v224, v240), (int8x16_t)v224, (int8x16_t)v240), vmulq_f32(v238, v238));
      float32x4_t v241 = *v226++;
      *v225++ = vdivq_f32(v241, v238);
      v232 -= 4;
    }
    while (v232);
    if (v398 == v223) {
      goto LABEL_178;
    }
  }
  else
  {
    unint64_t v223 = 0;
  }
  uint64_t v242 = 0;
  float32x2_t v243 = &v434[4 * v223];
  float32x2_t v244 = &v453[v223];
  float32x2_t v245 = &v442[v223];
  float32x2_t v246 = &v438[4 * v223];
  float32x2_t v247 = &v451[v223];
  float32x2_t v248 = &v446[4 * v223];
  float32x2_t v249 = &v449[v223];
  unint64_t v250 = v398 - v223;
  do
  {
    float v251 = *(float *)&v248[4 * v242];
    float v252 = v251 + *(float *)&v249[v242];
    if (v252 < *(float *)v197.i32) {
      float v252 = *(float *)v197.i32;
    }
    float v253 = *(float *)&v247[v242] + v251;
    if (v253 < *(float *)v197.i32) {
      float v253 = *(float *)v197.i32;
    }
    *(float *)&v246[4 * v242] = 1.0 / v252;
    float v254 = *(float *)&v244[v242];
    v245[v242] = v253 / (float)(v252 * v252);
    *(float *)&v243[4 * v242++] = v254 / v252;
  }
  while (v250 != v242);
LABEL_178:
  uint64_t v255 = *((void *)v394 + 38);
  float32x4_t v256 = vmulq_f32(*(float32x4_t *)(v255 + 16), *(float32x4_t *)(v255 + 16));
  *(float32x4_t *)float32x2_t v433 = vmulq_f32(*(float32x4_t *)v255, *(float32x4_t *)v255);
  *(float32x4_t *)&v433[16] = v256;
  *(float32x4_t *)&v433[32] = vmulq_f32(*(float32x4_t *)(v255 + 32), *(float32x4_t *)(v255 + 32));
  *(float32x2_t *)&v433[48] = vmul_f32(*(float32x2_t *)(v255 + 48), *(float32x2_t *)(v255 + 48));
  *(float *)&v433[56] = *(float *)(v255 + 56) * *(float *)(v255 + 56);
  unint64_t v257 = v199 - 14;
  if (v199 - 14 >= 0xF) {
    uint64_t v258 = 15;
  }
  else {
    uint64_t v258 = v199 - 14;
  }
  if (v258)
  {
    int8x16_t v259 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[28]);
    float32x4_t v260 = (float32x4_t)vextq_s8(v259, v259, 8uLL);
    int8x16_t v261 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[44]);
    float32x4_t v262 = (float32x4_t)vextq_s8(v261, v261, 8uLL);
    float v263 = *(float *)&v433[24];
    int8x16_t v264 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[8]);
    float32x4_t v265 = (float32x4_t)vextq_s8(v264, v264, 8uLL);
    float v266 = *(float *)&v433[4];
    float v267 = *(float *)v433;
    float32x2_t v268 = (float *)v440;
    float32x2_t v269 = (float *)v430;
    uint64_t v270 = v258;
    float32x2_t v271 = v440;
    do
    {
      float32x4_t v272 = vmlaq_f32(vmulq_f32(v262, *(float32x4_t *)(v268 - 8)), *(float32x4_t *)(v268 - 4), v260);
      float32x4_t v273 = *(float32x4_t *)(v271 + 4);
      v271 += 4;
      float v274 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v272, v272)) + (float)(v263 * *v268);
      float32x4_t v275 = vmulq_f32(v265, v273);
      *v269++ = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v275, v275)) + (float)(v266 * v268[5]))
              + (float)(v274 + (float)(v267 * v268[6]));
      float32x2_t v268 = (float *)v271;
      --v270;
    }
    while (v270);
  }
  if (v257 >= 0x10) {
    vDSP_conv(&v441, 1, (const float *)&v433[56], -1, v432, 1, v398 - 29, 0xFuLL);
  }
  unint64_t v276 = v36 - 16;
  if (v36 != 16)
  {
    if (v276 <= 7)
    {
      unint64_t v277 = 0;
      goto LABEL_192;
    }
    unint64_t v277 = v276 & 0xFFFFFFFFFFFFFFF8;
    float32x2_t v278 = (float32x4_t *)v427;
    float32x2_t v279 = (float32x4_t *)v431;
    unint64_t v280 = v276 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v281 = vdivq_f32(v392, *v279);
      v278[-1] = vdivq_f32(v392, v279[-1]);
      float32x4_t *v278 = v281;
      v278 += 2;
      v279 += 2;
      v280 -= 8;
    }
    while (v280);
    if (v276 != v277)
    {
LABEL_192:
      uint64_t v282 = v36 - v277 - 16;
      uint64_t v283 = 4 * v277;
      float32x2_t v284 = (float *)&v425 + v277;
      float32x2_t v285 = (float *)&v430[v283];
      do
      {
        float v286 = *v285++;
        *v284++ = 1.0 / v286;
        --v282;
      }
      while (v282);
    }
  }
  uint64_t v287 = *((void *)v394 + 38);
  float32x4_t v288 = vmulq_f32(*(float32x4_t *)(v287 + 16), *(float32x4_t *)(v287 + 16));
  *(float32x4_t *)float32x2_t v433 = vmulq_f32(*(float32x4_t *)v287, *(float32x4_t *)v287);
  *(float32x4_t *)&v433[16] = v288;
  *(float32x4_t *)&v433[32] = vmulq_f32(*(float32x4_t *)(v287 + 32), *(float32x4_t *)(v287 + 32));
  *(float32x2_t *)&v433[48] = vmul_f32(*(float32x2_t *)(v287 + 48), *(float32x2_t *)(v287 + 48));
  *(float *)&v433[56] = *(float *)(v287 + 56) * *(float *)(v287 + 56);
  if (v258)
  {
    int8x16_t v289 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[28]);
    float32x4_t v290 = (float32x4_t)vextq_s8(v289, v289, 8uLL);
    int8x16_t v291 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[44]);
    float32x4_t v292 = (float32x4_t)vextq_s8(v291, v291, 8uLL);
    float v293 = *(float *)&v433[24];
    int8x16_t v294 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v433[8]);
    float32x4_t v295 = (float32x4_t)vextq_s8(v294, v294, 8uLL);
    float v296 = *(float *)&v433[4];
    float v297 = *(float *)v433;
    float32x2_t v298 = (float *)v444;
    float32x2_t v299 = (float *)v430;
    uint64_t v300 = v258;
    float32x2_t v301 = v444;
    do
    {
      float32x4_t v302 = vmlaq_f32(vmulq_f32(v292, *(float32x4_t *)(v298 - 8)), *(float32x4_t *)(v298 - 4), v290);
      float32x4_t v303 = *(float32x4_t *)(v301 + 4);
      v301 += 4;
      float v304 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v302, v302)) + (float)(v293 * *v298);
      float32x4_t v305 = vmulq_f32(v295, v303);
      *v299++ = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v305, v305)) + (float)(v296 * v298[5]))
              + (float)(v304 + (float)(v297 * v298[6]));
      float32x2_t v298 = (float *)v301;
      --v300;
    }
    while (v300);
  }
  if (v257 >= 0x10) {
    vDSP_conv(&v445, 1, (const float *)&v433[56], -1, v432, 1, v398 - 29, 0xFuLL);
  }
  if (v36 != 16)
  {
    if (v276 <= 7)
    {
      unint64_t v306 = 0;
      goto LABEL_205;
    }
    unint64_t v306 = v276 & 0xFFFFFFFFFFFFFFF8;
    float32x2_t v307 = &v421;
    float32x2_t v308 = (float32x4_t *)v427;
    float32x2_t v309 = (float32x4_t *)v431;
    unint64_t v310 = v276 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v311 = vmulq_f32(vmulq_f32(*v308, *v308), *v309);
      *((float32x4_t *)v307 - 1) = vmulq_f32(vmulq_f32(v308[-1], v308[-1]), v309[-1]);
      *(float32x4_t *)float32x2_t v307 = v311;
      v307 += 8;
      v308 += 2;
      v309 += 2;
      v310 -= 8;
    }
    while (v310);
    if (v276 != v306)
    {
LABEL_205:
      uint64_t v312 = v36 - v306 - 16;
      uint64_t v313 = 4 * v306;
      float32x2_t v314 = (float *)&v419 + v306;
      float32x2_t v315 = (float *)((char *)&v425 + v313);
      float32x2_t v316 = (float *)&v430[v313];
      do
      {
        float v317 = *v316++;
        float v318 = v317;
        float v319 = *v315++;
        *v314++ = (float)(v319 * v319) * v318;
        --v312;
      }
      while (v312);
    }
  }
  uint64_t v320 = *((void *)v394 + 38);
  if (v258)
  {
    float32x2_t v321 = (float *)v436;
    float32x2_t v322 = (float *)v430;
    float32x2_t v323 = v436;
    do
    {
      int8x16_t v324 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v320 + 28));
      int8x16_t v325 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v320 + 44));
      float32x4_t v326 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v325, v325, 8uLL), *(float32x4_t *)(v321 - 8)), *(float32x4_t *)(v321 - 4), (float32x4_t)vextq_s8(v324, v324, 8uLL));
      float32x4_t v327 = *(float32x4_t *)(v323 + 4);
      v323 += 4;
      int8x16_t v328 = (int8x16_t)vrev64q_s32(*(int32x4_t *)(v320 + 8));
      float32x4_t v329 = vmulq_f32((float32x4_t)vextq_s8(v328, v328, 8uLL), v327);
      *v322++ = (float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v329, v329))
                      + (float)(*(float *)(v320 + 4) * v321[5]))
              + (float)((float)(vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v326, v326))
                              + (float)(*(float *)(v320 + 24) * *v321))
                      + (float)(*(float *)v320 * v321[6]));
      float32x2_t v321 = (float *)v323;
      --v258;
    }
    while (v258);
  }
  if (v257 >= 0x10) {
    vDSP_conv(&v437, 1, (const float *)(v320 + 56), -1, v432, 1, v398 - 29, 0xFuLL);
  }
  if (v36 == 16) {
    goto LABEL_262;
  }
  if (v276 <= 3)
  {
    unint64_t v330 = 0;
    goto LABEL_218;
  }
  unint64_t v330 = v276 & 0xFFFFFFFFFFFFFFFCLL;
  float32x2_t v331 = (float32x4_t *)&v407;
  float32x2_t v332 = &v413;
  float32x2_t v333 = (float32x4_t *)&v425;
  float32x2_t v334 = (float32x4_t *)v430;
  unint64_t v335 = v276 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    float32x4_t v336 = *v334++;
    float32x4_t v337 = v336;
    float32x4_t v338 = *v333++;
    float32x4_t v339 = vmulq_f32(v338, v337);
    *(float32x4_t *)float32x2_t v332 = v339;
    v332 += 2;
    *v331++ = vdivq_f32(v339, vsqrtq_f32(v338));
    v335 -= 4;
  }
  while (v335);
  if (v276 != v330)
  {
LABEL_218:
    uint64_t v340 = v36 - v330 - 16;
    uint64_t v341 = 4 * v330;
    float32x2_t v342 = (float *)&v407 + v330;
    float32x2_t v343 = (float *)((char *)&v413 + v341);
    float32x2_t v344 = (float *)((char *)&v425 + v341);
    float32x2_t v345 = (float *)&v430[v341];
    do
    {
      float v346 = *v345++;
      float v347 = v346;
      float v348 = *v344++;
      float v349 = v348 * v347;
      *v343++ = v349;
      *v342++ = v349 / sqrtf(v348);
      --v340;
    }
    while (v340);
  }
  uint64_t v350 = 0;
  char v351 = 0;
  do
  {
    float32x2_t v352 = (float *)&v407 + v350;
    while (!v350 || v36 - 17 == v350 || (float)(*v352 - *(v352 - 1)) < 0.0 || (float)(*v352 - v352[1]) < 0.0)
    {
      *((unsigned char *)&v401 + v350++) = 0;
      ++v352;
      if (v276 == v350)
      {
        if (v351) {
          goto LABEL_230;
        }
LABEL_262:
        float32x2_t v353 = (char *)operator new(8uLL);
        unint64_t v372 = v383 + 1;
        *(void *)float32x2_t v353 = v383 + 1;
        float32x2_t v355 = v353 + 8;
        goto LABEL_264;
      }
    }
    char v351 = 1;
    *((unsigned char *)&v401 + v350++) = 1;
  }
  while (v350 != v276);
LABEL_230:
  float32x2_t v353 = 0;
  float32x2_t v354 = 0;
  float32x2_t v355 = 0;
  uint64_t v356 = 0;
  while (2)
  {
    if (*((unsigned __int8 *)&v401 + v356++))
    {
      if (v355 < v354)
      {
        *(void *)float32x2_t v355 = v356;
        v355 += 8;
      }
      else
      {
        uint64_t v358 = (v355 - v353) >> 3;
        unint64_t v359 = v358 + 1;
        if ((unint64_t)(v358 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if ((v354 - v353) >> 2 > v359) {
          unint64_t v359 = (v354 - v353) >> 2;
        }
        if ((unint64_t)(v354 - v353) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v360 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v360 = v359;
        }
        if (v360)
        {
          if (v360 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          float32x2_t v361 = operator new(8 * v360);
        }
        else
        {
          float32x2_t v361 = 0;
        }
        float32x2_t v362 = &v361[8 * v358];
        *(void *)float32x2_t v362 = v356;
        float32x2_t v363 = v362 + 8;
        if (v355 != v353)
        {
          unint64_t v364 = v355 - 8 - v353;
          if (v364 < 0x168)
          {
            float32x2_t v365 = v355;
            goto LABEL_248;
          }
          if (&v361[v355 - v353 - 8 - (v364 & 0xFFFFFFFFFFFFFFF8)] > &v361[v355 - v353 - 8])
          {
            float32x2_t v365 = v355;
            goto LABEL_248;
          }
          if (&v355[-(v364 & 0xFFFFFFFFFFFFFFF8) - 8] > v355 - 8)
          {
            float32x2_t v365 = v355;
            goto LABEL_248;
          }
          if ((unint64_t)(v353 - v361) < 0x20)
          {
            float32x2_t v365 = v355;
            goto LABEL_248;
          }
          uint64_t v367 = (v364 >> 3) + 1;
          float32x2_t v365 = &v355[-8 * (v367 & 0x3FFFFFFFFFFFFFFCLL)];
          float32x2_t v368 = &v361[8 * v358 - 16];
          float32x2_t v369 = v355 - 16;
          uint64_t v370 = v367 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v371 = *(_OWORD *)v369;
            *(v368 - 1) = *((_OWORD *)v369 - 1);
            *float32x2_t v368 = v371;
            v368 -= 2;
            v369 -= 32;
            v370 -= 4;
          }
          while (v370);
          v362 -= 8 * (v367 & 0x3FFFFFFFFFFFFFFCLL);
          if (v367 != (v367 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_248:
              uint64_t v366 = *((void *)v365 - 1);
              v365 -= 8;
              *((void *)v362 - 1) = v366;
              v362 -= 8;
            }
            while (v365 != v353);
          }
        }
        float32x2_t v354 = &v361[8 * v360];
        if (v353) {
          operator delete(v353);
        }
        float32x2_t v353 = v362;
        float32x2_t v355 = v363;
      }
    }
    if (v356 != v276) {
      continue;
    }
    break;
  }
  unint64_t v372 = *(void *)v353;
  if (v355 != v353)
  {
LABEL_264:
    uint64_t v373 = 0;
    unint64_t v374 = (v355 - v353) >> 3;
    float v375 = *((float *)&v407 + v372);
    if (v374 <= 1) {
      unint64_t v374 = 1;
    }
    do
    {
      uint64_t v376 = *(void *)&v353[8 * v373];
      if (*((float *)&v407 + v376) > v375)
      {
        float v375 = *((float *)&v407 + v376);
        unint64_t v372 = *(void *)&v353[8 * v373];
      }
      ++v373;
    }
    while (v374 != v373);
  }
  uint64_t v377 = 4 * v372 - 4;
  int v378 = *(_DWORD *)((char *)&v425 + v377);
  *a10 = *(float *)((char *)&v419 + v377);
  *a11 = v378;
  float v379 = *(float *)((char *)&v413 + v377);
  *a12 = v379;
  *float32x2_t v382 = v379 / sqrtf(*a10);
  *a13 = v372 - 2;
  operator delete(v353);
  operator delete(v161);
}

void sub_2590A9840(_Unwind_Exception *a1)
{
  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

char *std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      uint64_t *v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *((void *)a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *(void *)result);
      if (v12 <= v13) {
        uint64_t v10 = *(void *)result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 8 * (a4 >> 1);
      uint64_t v27 = &result[v26];
      std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(result, &result[v26], a3, a4 >> 1, a5, a4 >> 1);
      double result = (char *)std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
      uint64_t v28 = *a3;
      uint64_t v29 = -1;
      float v30 = v5;
      unint64_t v31 = v7;
      float v32 = &v7[v26];
      do
      {
        ++v29;
        if (v32 == a2)
        {
          if (v31 == v27) {
            return result;
          }
          unint64_t v47 = &v7[8 * v25] - v31 - 8;
          if (v47 >= 0x38)
          {
            if ((unint64_t)((char *)&v5[v29] - v31) >= 0x20)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v47 >> 3) + 1;
              uint64_t v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v48 = &v30[v51];
              uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                int32x4_t v53 = &v30[v49];
                long long v54 = *(_OWORD *)&v31[v49 * 8 + 16];
                *int32x4_t v53 = *(_OWORD *)&v31[v49 * 8];
                v53[1] = v54;
                v49 += 4;
                v52 -= 4;
              }
              while (v52);
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v31 += v51 * 8;
            }
            else
            {
              uint64_t v48 = v30;
            }
          }
          else
          {
            uint64_t v48 = v30;
          }
          do
          {
            uint64_t v55 = *(void *)v31;
            v31 += 8;
            *v48++ = v55;
          }
          while (v31 != v27);
          return result;
        }
        signed int v33 = v32;
        uint64_t v34 = *(void *)v32;
        float v35 = *(float *)(*v28 + 4 * v34);
        uint64_t v36 = *(void *)v31;
        float v37 = *(float *)(*v28 + 4 * *(void *)v31);
        if (v35 > v37) {
          uint64_t v36 = v34;
        }
        float v32 = &v33[8 * (v35 > v37)];
        v31 += 8 * (v35 <= v37);
        *v30++ = v36;
      }
      while (v31 != v27);
      if (v32 == a2) {
        return result;
      }
      uint64_t v38 = -8;
      if (v35 <= v37) {
        uint64_t v38 = 0;
      }
      unint64_t v39 = a2 - v33 + v38 - 8;
      if (v39 < 0x68 || (unint64_t)((char *)&v5[v29] - &v33[8 * (v35 > v37)] + 8) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v40 = 0;
      uint64_t v41 = (v39 >> 3) + 1;
      uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int32x4_t v44 = &v30[v40];
        long long v45 = *(_OWORD *)&v32[v40 * 8 + 16];
        *int32x4_t v44 = *(_OWORD *)&v32[v40 * 8];
        v44[1] = v45;
        v40 += 4;
        v43 -= 4;
      }
      while (v43);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v32 += v42;
        float v30 = (uint64_t *)((char *)v30 + v42);
        do
        {
LABEL_37:
          uint64_t v46 = *(void *)v32;
          v32 += 8;
          *v30++ = v46;
        }
        while (v32 != a2);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *a3;
      unint64_t v15 = result + 8;
      *a5 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *v14;
        int32x2_t v18 = a5;
        float v19 = a5;
        do
        {
          uint64_t v21 = *v19++;
          uint64_t v20 = v21;
          if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v21))
          {
            *float v19 = *(void *)v15;
          }
          else
          {
            v18[1] = v20;
            uint64_t v22 = a5;
            if (v18 != a5)
            {
              uint64_t v23 = v16;
              while (1)
              {
                uint64_t v22 = (uint64_t *)((char *)a5 + v23);
                uint64_t v24 = *(uint64_t *)((char *)a5 + v23 - 8);
                if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v24)) {
                  break;
                }
                *uint64_t v22 = v24;
                v23 -= 8;
                if (!v23)
                {
                  uint64_t v22 = a5;
                  break;
                }
              }
            }
            *uint64_t v22 = *(void *)v15;
          }
          v15 += 8;
          v16 += 8;
          int32x2_t v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8, __n128 result)
{
  if (!a6) {
    return result;
  }
  uint64_t v9 = a6;
  while (v9 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v14 = **a4;
    result.n128_u32[0] = *(_DWORD *)(v14 + 4 * a2->n128_u64[0]);
    while (1)
    {
      unint64_t v15 = a1->n128_u64[0];
      if (result.n128_f32[0] > *(float *)(v14 + 4 * a1->n128_u64[0])) {
        break;
      }
      a1 = (__n128 *)((char *)a1 + 8);
      if (!--a5) {
        return result;
      }
    }
    if (a5 >= v9)
    {
      if (a5 == 1)
      {
        a1->n128_u64[0] = a2->n128_u64[0];
        a2->n128_u64[0] = v15;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v32 = a5;
      }
      else {
        uint64_t v32 = a5 + 1;
      }
      uint64_t v25 = v32 >> 1;
      float v19 = (__n128 *)((char *)a1 + 8 * (v32 >> 1));
      int32x2_t v18 = (char *)a2;
      if (a2 != a3)
      {
        unint64_t v33 = ((char *)a3 - (char *)a2) >> 3;
        int32x2_t v18 = (char *)a2;
        do
        {
          unint64_t v34 = v33 >> 1;
          float v35 = &v18[8 * (v33 >> 1)];
          uint64_t v37 = *(void *)v35;
          uint64_t v36 = v35 + 8;
          v33 += ~(v33 >> 1);
          if (*(float *)(v14 + 4 * v37) > *(float *)(v14 + 4 * v19->n128_u64[0])) {
            int32x2_t v18 = v36;
          }
          else {
            unint64_t v33 = v34;
          }
        }
        while (v33);
      }
      uint64_t v17 = (v18 - (char *)a2) >> 3;
      if (v19 != a2)
      {
LABEL_21:
        uint64_t v26 = v18 - (char *)a2;
        if (v18 == (char *)a2)
        {
          a2 = v19;
        }
        else
        {
          uint64_t v27 = (__n128 *)&v19->n128_i8[8];
          if (&v19->n128_i8[8] == (__int8 *)a2)
          {
            unint64_t v99 = v19->n128_u64[0];
            uint64_t v101 = v17;
            uint64_t v38 = a2;
            size_t v39 = v18 - (char *)a2;
            unint64_t v103 = a7;
            uint64_t v40 = a3;
            uint64_t v41 = a4;
            uint64_t v42 = a8;
            memmove(v19, v38, v39);
            uint64_t v17 = v101;
            a7 = v103;
            a8 = v42;
            a4 = v41;
            a3 = v40;
            a2 = (__n128 *)((char *)v19 + v26);
            *(unint64_t *)((char *)v19->n128_u64 + v26) = v99;
          }
          else
          {
            uint64_t v28 = &a2->n128_i8[8];
            if (&a2->n128_i8[8] == v18)
            {
              unint64_t v43 = *((void *)v18 - 1);
              a2 = (__n128 *)&v19->n128_i8[8];
              if (v18 - 8 != (char *)v19)
              {
                uint64_t v102 = v17;
                float32x2_t v104 = a7;
                int32x4_t v44 = a3;
                long long v100 = a4;
                uint64_t v45 = a8;
                memmove(&v19->n128_i8[8], v19, v18 - 8 - (char *)v19);
                a4 = v100;
                uint64_t v17 = v102;
                a8 = v45;
                a3 = v44;
                a7 = v104;
              }
              v19->n128_u64[0] = v43;
            }
            else
            {
              uint64_t v29 = ((char *)a2 - (char *)v19) >> 3;
              if (v29 == v26 >> 3)
              {
                do
                {
                  uint64_t v30 = v27[-1].n128_i64[1];
                  v27[-1].n128_u64[1] = *((void *)v28 - 1);
                  *((void *)v28 - 1) = v30;
                  if (v27 == a2) {
                    break;
                  }
                  uint64_t v27 = (__n128 *)((char *)v27 + 8);
                  BOOL v31 = v28 == v18;
                  v28 += 8;
                }
                while (!v31);
              }
              else
              {
                uint64_t v46 = v26 >> 3;
                uint64_t v47 = ((char *)a2 - (char *)v19) >> 3;
                do
                {
                  uint64_t v48 = v47;
                  uint64_t v47 = v46;
                  uint64_t v46 = v48 % v46;
                }
                while (v46);
                if (v47)
                {
                  uint64_t v49 = (__n128 *)((char *)v19 + 8 * v47);
                  do
                  {
                    uint64_t v51 = v49[-1].n128_i64[1];
                    uint64_t v49 = (__n128 *)((char *)v49 - 8);
                    uint64_t v50 = v51;
                    uint64_t v52 = (__n128 *)((char *)v49 + 8 * v29);
                    int32x4_t v53 = v49;
                    do
                    {
                      long long v54 = v52;
                      v53->n128_u64[0] = v52->n128_u64[0];
                      uint64_t v55 = (v18 - (char *)v52) >> 3;
                      BOOL v56 = __OFSUB__(v29, v55);
                      uint64_t v58 = v29 - v55;
                      char v57 = (v58 < 0) ^ v56;
                      uint64_t v52 = (__n128 *)((char *)v19 + 8 * v58);
                      if (v57) {
                        uint64_t v52 = (__n128 *)((char *)v54 + 8 * v29);
                      }
                      int32x4_t v53 = v54;
                    }
                    while (v52 != v49);
                    v54->n128_u64[0] = v50;
                  }
                  while (v49 != v19);
                }
                a2 = (__n128 *)((char *)v19 + 8 * (v26 >> 3));
              }
            }
          }
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (v9 >= 0) {
        uint64_t v16 = v9;
      }
      else {
        uint64_t v16 = v9 + 1;
      }
      uint64_t v17 = v16 >> 1;
      int32x2_t v18 = &a2->n128_i8[8 * (v16 >> 1)];
      float v19 = a2;
      if (a2 != a1)
      {
        unint64_t v20 = ((char *)a2 - (char *)a1) >> 3;
        float v19 = a1;
        do
        {
          unint64_t v21 = v20 >> 1;
          uint64_t v22 = &v19->n128_u64[v20 >> 1];
          unint64_t v24 = *v22;
          uint64_t v23 = (__n128 *)(v22 + 1);
          v20 += ~(v20 >> 1);
          if (*(float *)(v14 + 4 * *(void *)v18) > *(float *)(v14 + 4 * v24)) {
            unint64_t v20 = v21;
          }
          else {
            float v19 = v23;
          }
        }
        while (v20);
      }
      uint64_t v25 = ((char *)v19 - (char *)a1) >> 3;
      if (v19 != a2) {
        goto LABEL_21;
      }
    }
    a2 = (__n128 *)v18;
LABEL_56:
    a5 -= v25;
    v9 -= v17;
    if (v25 + v17 >= a5 + v9)
    {
      float v105 = a2;
      int32x4_t v59 = a4;
      uint64_t v63 = v17;
      int32x4_t v60 = a7;
      uint64_t v61 = a8;
      std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a2, v18, a3);
      a2 = v19;
      uint64_t v9 = v63;
      a5 = v25;
      a3 = v105;
    }
    else
    {
      int32x4_t v59 = a4;
      int32x4_t v60 = a7;
      uint64_t v61 = a8;
      unint64_t v62 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, v19, a2);
      a3 = v62;
      a1 = a2;
      a2 = (__n128 *)v18;
    }
    a7 = v60;
    a4 = v59;
    a8 = v61;
    if (!v9) {
      return result;
    }
  }
  if (a5 <= v9)
  {
    if (a1 == a2) {
      return result;
    }
    unint64_t v74 = (char *)a2 - (char *)a1 - 8;
    unint64_t v75 = a7;
    unsigned int v76 = a1;
    if (v74 >= 0x18)
    {
      unint64_t v75 = a7;
      unsigned int v76 = a1;
      if ((unint64_t)(a7 - (char *)a1) > 0x1F)
      {
        uint64_t v77 = (v74 >> 3) + 1;
        uint64_t v78 = 8 * (v77 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v75 = &a7[v78];
        uint64_t v79 = a1 + 1;
        unint64_t v80 = (__n128 *)(a7 + 16);
        uint64_t v81 = v77 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          double result = v79[-1];
          __n128 v82 = *v79;
          v80[-1] = result;
          *unint64_t v80 = v82;
          v79 += 2;
          v80 += 2;
          v81 -= 4;
        }
        while (v81);
        if (v77 == (v77 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          if (v75 != a7)
          {
            unint64_t v84 = *a4;
            while (a2 != a3)
            {
              unint64_t v85 = a2->n128_u64[0];
              result.n128_u32[0] = *(_DWORD *)(*v84 + 4 * a2->n128_u64[0]);
              float v86 = *(float *)(*v84 + 4 * *(void *)a7);
              if (result.n128_f32[0] <= v86) {
                unint64_t v85 = *(void *)a7;
              }
              a2 = (__n128 *)((char *)a2 + 8 * (result.n128_f32[0] > v86));
              a7 += 8 * (result.n128_f32[0] <= v86);
              a1->n128_u64[0] = v85;
              a1 = (__n128 *)((char *)a1 + 8);
              if (a7 == v75) {
                return result;
              }
            }
            memmove(a1, a7, v75 - a7);
          }
          return result;
        }
        unsigned int v76 = (__n128 *)((char *)a1 + v78);
      }
    }
    do
    {
      unint64_t v83 = v76->n128_u64[0];
      unsigned int v76 = (__n128 *)((char *)v76 + 8);
      *(void *)unint64_t v75 = v83;
      v75 += 8;
    }
    while (v76 != a2);
    goto LABEL_77;
  }
  if (a3 == a2) {
    return result;
  }
  uint64_t v64 = &a3[-1].n128_i8[8];
  unint64_t v65 = &a3[-1].n128_i8[8] - (__int8 *)a2;
  if (v65 < 0x18)
  {
    int32x4_t v66 = a7;
    int32x4_t v67 = a2;
    goto LABEL_89;
  }
  int32x4_t v66 = a7;
  int32x4_t v67 = a2;
  if ((unint64_t)(a7 - (char *)a2) <= 0x1F)
  {
    do
    {
LABEL_89:
      unint64_t v87 = v67->n128_u64[0];
      int32x4_t v67 = (__n128 *)((char *)v67 + 8);
      *(void *)int32x4_t v66 = v87;
      v66 += 8;
    }
    while (v67 != a3);
  }
  else
  {
    uint64_t v68 = (v65 >> 3) + 1;
    uint64_t v69 = 8 * (v68 & 0x3FFFFFFFFFFFFFFCLL);
    int32x4_t v66 = &a7[v69];
    int v70 = a2 + 1;
    BOOL v71 = (__n128 *)(a7 + 16);
    uint64_t v72 = v68 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      double result = v70[-1];
      __n128 v73 = *v70;
      v71[-1] = result;
      *BOOL v71 = v73;
      v70 += 2;
      v71 += 2;
      v72 -= 4;
    }
    while (v72);
    if (v68 != (v68 & 0x3FFFFFFFFFFFFFFCLL))
    {
      int32x4_t v67 = (__n128 *)((char *)a2 + v69);
      goto LABEL_89;
    }
  }
  if (v66 != a7)
  {
    uint64_t v88 = 0;
    while (a2 != a1)
    {
      uint64_t v89 = a2[-1].n128_i64[1];
      uint64_t v90 = **a4;
      result.n128_u32[0] = *(_DWORD *)(v90 + 4 * *((void *)v66 - 1));
      if (result.n128_f32[0] > *(float *)(v90 + 4 * v89))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        uint64_t v89 = *((void *)v66 - 1);
        v66 -= 8;
      }
      a3[-1].n128_u64[1] = v89;
      a3 = (__n128 *)((char *)a3 - 8);
      ++v88;
      if (v66 == a7) {
        return result;
      }
    }
    unint64_t v91 = v66 - a7 - 8;
    if (v91 >= 0x58 && (unint64_t)(v66 - v64 + 8 * v88 - 8) >= 0x20)
    {
      uint64_t v95 = 0;
      uint64_t v96 = (v91 >> 3) + 1;
      int v92 = &v66[-8 * (v96 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v97 = v96 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        double result = *(__n128 *)&v66[v95 * 16 - 16];
        int v98 = &a3[v95];
        v98[-2] = *(__n128 *)&v66[v95 * 16 - 32];
        v98[-1] = result;
        v95 -= 2;
        v97 -= 4;
      }
      while (v97);
      if (v96 != (v96 & 0x3FFFFFFFFFFFFFFCLL))
      {
        a3 = (__n128 *)((char *)a3 - 8 * (v96 & 0x3FFFFFFFFFFFFFFCLL));
        goto LABEL_101;
      }
    }
    else
    {
      int v92 = v66;
LABEL_101:
      int32x2_t v93 = &a3[-1].n128_u64[1];
      do
      {
        unint64_t v94 = *((void *)v92 - 1);
        v92 -= 8;
        *v93-- = v94;
      }
      while (v92 != a7);
    }
  }
  return result;
}

void std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v9 = a2[-1].n128_u64[1];
      unint64_t v10 = a1->n128_u64[0];
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * a1->n128_u64[0]))
      {
        a1->n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v23 = a4 >> 1;
      unint64_t v24 = &a1->n128_i8[8 * (a4 >> 1)];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>((char *)a1, v24, a3, v25, a5);
        uint64_t v27 = &a5[v23];
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(&a1->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v27);
        uint64_t v28 = *a3;
        uint64_t v29 = -1;
        uint64_t v30 = v27;
        BOOL v31 = a5;
        uint64_t v32 = a1;
        unint64_t v33 = &a5[a4];
        do
        {
          ++v29;
          if (v30 == v33)
          {
            if (v31 == v27) {
              return;
            }
            unint64_t v48 = (char *)&a5[v23] - (char *)v31 - 8;
            if (v48 >= 0x38)
            {
              if ((unint64_t)((char *)&a1->n128_u64[v29] - (char *)v31) >= 0x20)
              {
                unint64_t v50 = 0;
                uint64_t v51 = (v48 >> 3) + 1;
                uint64_t v52 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v49 = &v31[v52];
                uint64_t v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v54 = &v32[v50 / 2];
                  __n128 v55 = *(__n128 *)&v31[v50 + 2];
                  *long long v54 = *(__n128 *)&v31[v50];
                  v54[1] = v55;
                  v50 += 4;
                  v53 -= 4;
                }
                while (v53);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
                  return;
                }
                uint64_t v32 = (__n128 *)((char *)v32 + v52 * 8);
              }
              else
              {
                uint64_t v49 = v31;
              }
            }
            else
            {
              uint64_t v49 = v31;
            }
            do
            {
              unint64_t v56 = *v49++;
              v32->n128_u64[0] = v56;
              uint64_t v32 = (__n128 *)((char *)v32 + 8);
            }
            while (v49 != v27);
            return;
          }
          unint64_t v34 = v30;
          uint64_t v35 = *v30;
          float v36 = *(float *)(*v28 + 4 * v35);
          uint64_t v37 = *v31;
          float v38 = *(float *)(*v28 + 4 * *v31);
          if (v36 > v38) {
            uint64_t v37 = v35;
          }
          v31 += v36 <= v38;
          uint64_t v30 = &v34[v36 > v38];
          v32->n128_u64[0] = v37;
          uint64_t v32 = (__n128 *)((char *)v32 + 8);
        }
        while (v31 != v27);
        if (v30 == v33) {
          return;
        }
        uint64_t v39 = -8;
        if (v36 <= v38) {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (char *)&a5[a4] - (char *)v34 + v39 - 8;
        if (v40 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v29] - (char *)&v34[v36 > v38] + 8) < 0x20) {
          goto LABEL_35;
        }
        unint64_t v41 = 0;
        uint64_t v42 = (v40 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v44 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v45 = &v32[v41 / 2];
          __n128 v46 = *(__n128 *)&v30[v41 + 2];
          __n128 *v45 = *(__n128 *)&v30[v41];
          v45[1] = v46;
          v41 += 4;
          v44 -= 4;
        }
        while (v44);
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v32 = (__n128 *)((char *)v32 + v43);
          uint64_t v30 = (uint64_t *)((char *)v30 + v43);
          do
          {
LABEL_35:
            unint64_t v47 = *v30++;
            v32->n128_u64[0] = v47;
            uint64_t v32 = (__n128 *)((char *)v32 + 8);
          }
          while (v30 != v33);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(&a1->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, (__n128 *)((char *)a1 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v26);
      }
    }
    else if (a1 != a2)
    {
      float v12 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        unint64_t v15 = a1;
        do
        {
          unint64_t v17 = v15->n128_u64[0];
          unint64_t v15 = (__n128 *)v12;
          unint64_t v18 = *v12;
          float v19 = *(float *)(v14 + 4 * v18);
          if (v19 > *(float *)(v14 + 4 * v17))
          {
            uint64_t v20 = v13;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v20) = v17;
              if (!v20)
              {
                uint64_t v16 = a1;
                goto LABEL_10;
              }
              unint64_t v17 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v20);
              v20 -= 8;
            }
            while (v19 > *(float *)(v14 + 4 * v17));
            uint64_t v16 = (__n128 *)&a1->n128_i8[v20 + 8];
LABEL_10:
            v16->n128_u64[0] = v18;
          }
          float v12 = &v15->n128_u64[1];
          v13 += 8;
        }
        while (&v15->n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

void std::vector<unsigned long>::push_back[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = *(char **)a1;
    uint64_t v9 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v10 = v9 >> 3;
    unint64_t v11 = (v9 >> 3) + 1;
    if (v11 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v4 - (void)v8;
    if (v12 >> 2 > v11) {
      unint64_t v11 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      if (v13 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v14 = operator new(8 * v13);
    }
    else
    {
      uint64_t v14 = 0;
    }
    unint64_t v15 = &v14[8 * v10];
    uint64_t v16 = &v14[8 * v13];
    void *v15 = a2;
    uint64_t v7 = v15 + 1;
    if (v5 != v8)
    {
      unint64_t v17 = v5 - v8 - 8;
      if (v17 < 0x58) {
        goto LABEL_27;
      }
      if ((unint64_t)(v5 - v14 - v9) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v6 = &v5[-8 * (v18 & 0x3FFFFFFFFFFFFFFCLL)];
      float v19 = &v14[8 * v10 - 16];
      uint64_t v20 = v5 - 16;
      uint64_t v21 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v22 = *(_OWORD *)v20;
        *(v19 - 1) = *((_OWORD *)v20 - 1);
        *float v19 = v22;
        v19 -= 2;
        v20 -= 32;
        v21 -= 4;
      }
      while (v21);
      v15 -= v18 & 0x3FFFFFFFFFFFFFFCLL;
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_27:
        do
        {
          uint64_t v23 = *((void *)v6 - 1);
          v6 -= 8;
          *--unint64_t v15 = v23;
        }
        while (v6 != v8);
      }
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(void *)uint64_t v5 = a2;
    uint64_t v7 = v5 + 8;
  }
  *(void *)(a1 + 8) = v7;
}

void std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v9 = a2[-1].n128_u64[1];
      unint64_t v10 = a1->n128_u64[0];
      if (*(void *)(**a3 + 8 * v9) > *(void *)(**a3 + 8 * a1->n128_u64[0]))
      {
        a1->n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v22 = a4 >> 1;
      uint64_t v23 = &a1->n128_i8[8 * (a4 >> 1)];
      unint64_t v24 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>((uint64_t)a1, v23, a3, v24, a5);
        unint64_t v25 = &a5[v22];
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>((uint64_t)&a1->n128_i64[a4 >> 1], (char *)a2, a3, a4 - (a4 >> 1), v25);
        __n128 v26 = *a3;
        uint64_t v27 = -1;
        uint64_t v28 = v25;
        uint64_t v29 = a5;
        uint64_t v30 = a1;
        BOOL v31 = &a5[a4];
        do
        {
          ++v27;
          if (v28 == v31)
          {
            if (v29 == v25) {
              return;
            }
            unint64_t v46 = (char *)&a5[v22] - (char *)v29 - 8;
            if (v46 >= 0x38)
            {
              if ((unint64_t)((char *)&a1->n128_u64[v27] - (char *)v29) >= 0x20)
              {
                unint64_t v48 = 0;
                uint64_t v49 = (v46 >> 3) + 1;
                uint64_t v50 = v49 & 0x3FFFFFFFFFFFFFFCLL;
                unint64_t v47 = &v29[v50];
                uint64_t v51 = v49 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  uint64_t v52 = &v30[v48 / 2];
                  __n128 v53 = *(__n128 *)&v29[v48 + 2];
                  *uint64_t v52 = *(__n128 *)&v29[v48];
                  v52[1] = v53;
                  v48 += 4;
                  v51 -= 4;
                }
                while (v51);
                if (v49 == (v49 & 0x3FFFFFFFFFFFFFFCLL)) {
                  return;
                }
                uint64_t v30 = (__n128 *)((char *)v30 + v50 * 8);
              }
              else
              {
                unint64_t v47 = v29;
              }
            }
            else
            {
              unint64_t v47 = v29;
            }
            do
            {
              unint64_t v54 = *v47++;
              v30->n128_u64[0] = v54;
              uint64_t v30 = (__n128 *)((char *)v30 + 8);
            }
            while (v47 != v25);
            return;
          }
          uint64_t v32 = v28;
          uint64_t v33 = *v28;
          unint64_t v34 = *(void *)(*v26 + 8 * v33);
          uint64_t v35 = *v29;
          unint64_t v36 = *(void *)(*v26 + 8 * *v29);
          if (v34 > v36) {
            uint64_t v35 = v33;
          }
          v29 += v34 <= v36;
          uint64_t v28 = &v32[v34 > v36];
          v30->n128_u64[0] = v35;
          uint64_t v30 = (__n128 *)((char *)v30 + 8);
        }
        while (v29 != v25);
        if (v28 == v31) {
          return;
        }
        uint64_t v37 = -8;
        if (v34 <= v36) {
          uint64_t v37 = 0;
        }
        unint64_t v38 = (char *)&a5[a4] - (char *)v32 + v37 - 8;
        if (v38 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v27] - (char *)&v32[v34 > v36] + 8) < 0x20) {
          goto LABEL_35;
        }
        unint64_t v39 = 0;
        uint64_t v40 = (v38 >> 3) + 1;
        uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v42 = v40 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          uint64_t v43 = &v30[v39 / 2];
          __n128 v44 = *(__n128 *)&v28[v39 + 2];
          *uint64_t v43 = *(__n128 *)&v28[v39];
          v43[1] = v44;
          v39 += 4;
          v42 -= 4;
        }
        while (v42);
        if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v30 = (__n128 *)((char *)v30 + v41);
          uint64_t v28 = (uint64_t *)((char *)v28 + v41);
          do
          {
LABEL_35:
            unint64_t v45 = *v28++;
            v30->n128_u64[0] = v45;
            uint64_t v30 = (__n128 *)((char *)v30 + 8);
          }
          while (v28 != v31);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(a1, v23, a3, v24, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(&a1->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(a1, (__n128 *)((char *)a1 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        unint64_t v15 = a1;
        do
        {
          unint64_t v17 = v15->n128_u64[0];
          unint64_t v15 = (__n128 *)v12;
          unint64_t v18 = *v12;
          if (*(void *)(v14 + 8 * v18) > *(void *)(v14 + 8 * v17))
          {
            uint64_t v19 = v13;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v19) = v17;
              if (!v19)
              {
                uint64_t v16 = a1;
                goto LABEL_10;
              }
              unint64_t v17 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v19);
              v19 -= 8;
            }
            while (*(void *)(v14 + 8 * v18) > *(void *)(v14 + 8 * v17));
            uint64_t v16 = (__n128 *)&a1->n128_i8[v19 + 8];
LABEL_10:
            v16->n128_u64[0] = v18;
          }
          uint64_t v12 = &v15->n128_u64[1];
          v13 += 8;
        }
        while (&v15->n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

void std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v9 = a2[-1].n128_u64[1];
      unint64_t v10 = a1->n128_u64[0];
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * a1->n128_u64[0]))
      {
        a1->n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v23 = a4 >> 1;
      unint64_t v24 = &a1->n128_i8[8 * (a4 >> 1)];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>((char *)a1, v24, a3, v25, a5);
        uint64_t v27 = &a5[v23];
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(&a1->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v27);
        uint64_t v28 = *a3;
        uint64_t v29 = -1;
        uint64_t v30 = v27;
        BOOL v31 = a5;
        uint64_t v32 = a1;
        uint64_t v33 = &a5[a4];
        do
        {
          ++v29;
          if (v30 == v33)
          {
            if (v31 == v27) {
              return;
            }
            unint64_t v48 = (char *)&a5[v23] - (char *)v31 - 8;
            if (v48 >= 0x38)
            {
              if ((unint64_t)((char *)&a1->n128_u64[v29] - (char *)v31) >= 0x20)
              {
                unint64_t v50 = 0;
                uint64_t v51 = (v48 >> 3) + 1;
                uint64_t v52 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                uint64_t v49 = &v31[v52];
                uint64_t v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  unint64_t v54 = &v32[v50 / 2];
                  __n128 v55 = *(__n128 *)&v31[v50 + 2];
                  *unint64_t v54 = *(__n128 *)&v31[v50];
                  v54[1] = v55;
                  v50 += 4;
                  v53 -= 4;
                }
                while (v53);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
                  return;
                }
                uint64_t v32 = (__n128 *)((char *)v32 + v52 * 8);
              }
              else
              {
                uint64_t v49 = v31;
              }
            }
            else
            {
              uint64_t v49 = v31;
            }
            do
            {
              unint64_t v56 = *v49++;
              v32->n128_u64[0] = v56;
              uint64_t v32 = (__n128 *)((char *)v32 + 8);
            }
            while (v49 != v27);
            return;
          }
          unint64_t v34 = v30;
          uint64_t v35 = *v30;
          float v36 = *(float *)(*v28 + 4 * v35);
          uint64_t v37 = *v31;
          float v38 = *(float *)(*v28 + 4 * *v31);
          if (v36 > v38) {
            uint64_t v37 = v35;
          }
          v31 += v36 <= v38;
          uint64_t v30 = &v34[v36 > v38];
          v32->n128_u64[0] = v37;
          uint64_t v32 = (__n128 *)((char *)v32 + 8);
        }
        while (v31 != v27);
        if (v30 == v33) {
          return;
        }
        uint64_t v39 = -8;
        if (v36 <= v38) {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (char *)&a5[a4] - (char *)v34 + v39 - 8;
        if (v40 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v29] - (char *)&v34[v36 > v38] + 8) < 0x20) {
          goto LABEL_35;
        }
        unint64_t v41 = 0;
        uint64_t v42 = (v40 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v44 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v45 = &v32[v41 / 2];
          __n128 v46 = *(__n128 *)&v30[v41 + 2];
          __n128 *v45 = *(__n128 *)&v30[v41];
          v45[1] = v46;
          v41 += 4;
          v44 -= 4;
        }
        while (v44);
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v32 = (__n128 *)((char *)v32 + v43);
          uint64_t v30 = (uint64_t *)((char *)v30 + v43);
          do
          {
LABEL_35:
            unint64_t v47 = *v30++;
            v32->n128_u64[0] = v47;
            uint64_t v32 = (__n128 *)((char *)v32 + 8);
          }
          while (v30 != v33);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(a1, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(&a1->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, (__n128 *)((char *)a1 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v26);
      }
    }
    else if (a1 != a2)
    {
      uint64_t v12 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        unint64_t v15 = a1;
        do
        {
          unint64_t v17 = v15->n128_u64[0];
          unint64_t v15 = (__n128 *)v12;
          unint64_t v18 = *v12;
          float v19 = *(float *)(v14 + 4 * v18);
          if (v19 > *(float *)(v14 + 4 * v17))
          {
            uint64_t v20 = v13;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v20) = v17;
              if (!v20)
              {
                uint64_t v16 = a1;
                goto LABEL_10;
              }
              unint64_t v17 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v20);
              v20 -= 8;
            }
            while (v19 > *(float *)(v14 + 4 * v17));
            uint64_t v16 = (__n128 *)&a1->n128_i8[v20 + 8];
LABEL_10:
            v16->n128_u64[0] = v18;
          }
          uint64_t v12 = &v15->n128_u64[1];
          v13 += 8;
        }
        while (&v15->n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

char *std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      uint64_t *v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *((void *)a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *(void *)result);
      if (v12 <= v13) {
        uint64_t v10 = *(void *)result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 8 * (a4 >> 1);
      uint64_t v27 = &result[v26];
      std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(result, &result[v26], a3, a4 >> 1, a5, a4 >> 1);
      double result = (char *)std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
      uint64_t v28 = *a3;
      uint64_t v29 = -1;
      uint64_t v30 = v5;
      BOOL v31 = v7;
      uint64_t v32 = &v7[v26];
      do
      {
        ++v29;
        if (v32 == a2)
        {
          if (v31 == v27) {
            return result;
          }
          unint64_t v47 = &v7[8 * v25] - v31 - 8;
          if (v47 >= 0x38)
          {
            if ((unint64_t)((char *)&v5[v29] - v31) >= 0x20)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v47 >> 3) + 1;
              uint64_t v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              unint64_t v48 = &v30[v51];
              uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v53 = &v30[v49];
                long long v54 = *(_OWORD *)&v31[v49 * 8 + 16];
                *uint64_t v53 = *(_OWORD *)&v31[v49 * 8];
                v53[1] = v54;
                v49 += 4;
                v52 -= 4;
              }
              while (v52);
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v31 += v51 * 8;
            }
            else
            {
              unint64_t v48 = v30;
            }
          }
          else
          {
            unint64_t v48 = v30;
          }
          do
          {
            uint64_t v55 = *(void *)v31;
            v31 += 8;
            *v48++ = v55;
          }
          while (v31 != v27);
          return result;
        }
        uint64_t v33 = v32;
        uint64_t v34 = *(void *)v32;
        float v35 = *(float *)(*v28 + 4 * v34);
        uint64_t v36 = *(void *)v31;
        float v37 = *(float *)(*v28 + 4 * *(void *)v31);
        if (v35 > v37) {
          uint64_t v36 = v34;
        }
        uint64_t v32 = &v33[8 * (v35 > v37)];
        v31 += 8 * (v35 <= v37);
        *v30++ = v36;
      }
      while (v31 != v27);
      if (v32 == a2) {
        return result;
      }
      uint64_t v38 = -8;
      if (v35 <= v37) {
        uint64_t v38 = 0;
      }
      unint64_t v39 = a2 - v33 + v38 - 8;
      if (v39 < 0x68 || (unint64_t)((char *)&v5[v29] - &v33[8 * (v35 > v37)] + 8) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v40 = 0;
      uint64_t v41 = (v39 >> 3) + 1;
      uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = &v30[v40];
        long long v45 = *(_OWORD *)&v32[v40 * 8 + 16];
        *uint64_t v44 = *(_OWORD *)&v32[v40 * 8];
        v44[1] = v45;
        v40 += 4;
        v43 -= 4;
      }
      while (v43);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v32 += v42;
        uint64_t v30 = (uint64_t *)((char *)v30 + v42);
        do
        {
LABEL_37:
          uint64_t v46 = *(void *)v32;
          v32 += 8;
          *v30++ = v46;
        }
        while (v32 != a2);
      }
    }
    else if (result != a2)
    {
      uint64_t v14 = *a3;
      unint64_t v15 = result + 8;
      *a5 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *v14;
        unint64_t v18 = a5;
        float v19 = a5;
        do
        {
          uint64_t v21 = *v19++;
          uint64_t v20 = v21;
          if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v21))
          {
            *float v19 = *(void *)v15;
          }
          else
          {
            v18[1] = v20;
            unint64_t v22 = a5;
            if (v18 != a5)
            {
              uint64_t v23 = v16;
              while (1)
              {
                unint64_t v22 = (uint64_t *)((char *)a5 + v23);
                uint64_t v24 = *(uint64_t *)((char *)a5 + v23 - 8);
                if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v24)) {
                  break;
                }
                *unint64_t v22 = v24;
                v23 -= 8;
                if (!v23)
                {
                  unint64_t v22 = a5;
                  break;
                }
              }
            }
            *unint64_t v22 = *(void *)v15;
          }
          v15 += 8;
          v16 += 8;
          unint64_t v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(uint64_t result, char *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = (char *)result;
    if (a4 == 1)
    {
LABEL_8:
      uint64_t *v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *((void *)a2 - 1);
      uint64_t v11 = **a3;
      unint64_t v12 = *(void *)(v11 + 8 * v10);
      unint64_t v13 = *(void *)(v11 + 8 * *(void *)result);
      if (v12 <= v13) {
        uint64_t v10 = *(void *)result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 8 * (a4 >> 1);
      uint64_t v27 = (char *)(result + v26);
      std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(result, result + v26, a3, a4 >> 1, a5, a4 >> 1);
      double result = std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
      uint64_t v28 = *a3;
      uint64_t v29 = -1;
      uint64_t v30 = v5;
      BOOL v31 = v7;
      uint64_t v32 = &v7[v26];
      do
      {
        ++v29;
        if (v32 == a2)
        {
          if (v31 == v27) {
            return result;
          }
          unint64_t v47 = &v7[8 * v25] - v31 - 8;
          if (v47 >= 0x38)
          {
            if ((unint64_t)((char *)&v5[v29] - v31) >= 0x20)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v47 >> 3) + 1;
              uint64_t v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              unint64_t v48 = &v30[v51];
              uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v53 = &v30[v49];
                long long v54 = *(_OWORD *)&v31[v49 * 8 + 16];
                *uint64_t v53 = *(_OWORD *)&v31[v49 * 8];
                v53[1] = v54;
                v49 += 4;
                v52 -= 4;
              }
              while (v52);
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v31 += v51 * 8;
            }
            else
            {
              unint64_t v48 = v30;
            }
          }
          else
          {
            unint64_t v48 = v30;
          }
          do
          {
            uint64_t v55 = *(void *)v31;
            v31 += 8;
            *v48++ = v55;
          }
          while (v31 != v27);
          return result;
        }
        uint64_t v33 = v32;
        uint64_t v34 = *(void *)v32;
        unint64_t v35 = *(void *)(*v28 + 8 * v34);
        uint64_t v36 = *(void *)v31;
        unint64_t v37 = *(void *)(*v28 + 8 * *(void *)v31);
        double result = v35 > v37;
        if (v35 > v37) {
          uint64_t v36 = v34;
        }
        uint64_t v32 = &v33[8 * (v35 > v37)];
        v31 += 8 * (v35 <= v37);
        *v30++ = v36;
      }
      while (v31 != v27);
      if (v32 == a2) {
        return result;
      }
      uint64_t v38 = -8;
      if (v35 <= v37) {
        uint64_t v38 = 0;
      }
      unint64_t v39 = a2 - v33 + v38 - 8;
      if (v39 < 0x68 || (unint64_t)((char *)&v5[v29] - &v33[8 * (v35 > v37)] + 8) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v40 = 0;
      uint64_t v41 = (v39 >> 3) + 1;
      uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = &v30[v40];
        long long v45 = *(_OWORD *)&v32[v40 * 8 + 16];
        *uint64_t v44 = *(_OWORD *)&v32[v40 * 8];
        v44[1] = v45;
        v40 += 4;
        v43 -= 4;
      }
      while (v43);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v32 += v42;
        uint64_t v30 = (uint64_t *)((char *)v30 + v42);
        do
        {
LABEL_37:
          uint64_t v46 = *(void *)v32;
          v32 += 8;
          *v30++ = v46;
        }
        while (v32 != a2);
      }
    }
    else if ((char *)result != a2)
    {
      uint64_t v14 = *a3;
      unint64_t v15 = (char *)(result + 8);
      *a5 = *(void *)result;
      if ((char *)(result + 8) != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *v14;
        unint64_t v18 = a5;
        float v19 = a5;
        do
        {
          uint64_t v21 = *v19++;
          uint64_t v20 = v21;
          if (*(void *)(v17 + 8 * *(void *)v15) <= *(void *)(v17 + 8 * v21))
          {
            *float v19 = *(void *)v15;
          }
          else
          {
            v18[1] = v20;
            unint64_t v22 = a5;
            if (v18 != a5)
            {
              uint64_t v23 = v16;
              while (1)
              {
                unint64_t v22 = (uint64_t *)((char *)a5 + v23);
                uint64_t v24 = *(uint64_t *)((char *)a5 + v23 - 8);
                if (*(void *)(v17 + 8 * *(void *)v15) <= *(void *)(v17 + 8 * v24)) {
                  break;
                }
                *unint64_t v22 = v24;
                v23 -= 8;
                if (!v23)
                {
                  unint64_t v22 = a5;
                  break;
                }
              }
            }
            *unint64_t v22 = *(void *)v15;
          }
          v15 += 8;
          v16 += 8;
          unint64_t v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

__n128 std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, __n128 *a3, uint64_t **a4, uint64_t a5, uint64_t a6, char *a7, uint64_t a8)
{
  if (!a6) {
    return result;
  }
  uint64_t v8 = a6;
  while (v8 > a8 && a5 > a8)
  {
    if (!a5) {
      return result;
    }
    uint64_t v13 = **a4;
    while (1)
    {
      unint64_t v14 = a1->n128_u64[0];
      if (*(void *)(v13 + 8 * a2->n128_u64[0]) > *(void *)(v13 + 8 * a1->n128_u64[0])) {
        break;
      }
      a1 = (__n128 *)((char *)a1 + 8);
      if (!--a5) {
        return result;
      }
    }
    if (a5 >= v8)
    {
      if (a5 == 1)
      {
        a1->n128_u64[0] = a2->n128_u64[0];
        a2->n128_u64[0] = v14;
        return result;
      }
      if (a5 >= 0) {
        uint64_t v31 = a5;
      }
      else {
        uint64_t v31 = a5 + 1;
      }
      uint64_t v24 = v31 >> 1;
      unint64_t v18 = (__n128 *)((char *)a1 + 8 * (v31 >> 1));
      uint64_t v17 = (char *)a2;
      if (a2 != a3)
      {
        unint64_t v32 = ((char *)a3 - (char *)a2) >> 3;
        uint64_t v17 = (char *)a2;
        do
        {
          unint64_t v33 = v32 >> 1;
          uint64_t v34 = &v17[8 * (v32 >> 1)];
          uint64_t v36 = *(void *)v34;
          unint64_t v35 = v34 + 8;
          v32 += ~(v32 >> 1);
          if (*(void *)(v13 + 8 * v36) > *(void *)(v13 + 8 * v18->n128_u64[0])) {
            uint64_t v17 = v35;
          }
          else {
            unint64_t v32 = v33;
          }
        }
        while (v32);
      }
      uint64_t v16 = (v17 - (char *)a2) >> 3;
      if (v18 != a2)
      {
LABEL_21:
        uint64_t v25 = v17 - (char *)a2;
        if (v17 == (char *)a2)
        {
          a2 = v18;
        }
        else
        {
          uint64_t v26 = (__n128 *)&v18->n128_i8[8];
          if (&v18->n128_i8[8] == (__int8 *)a2)
          {
            unint64_t v101 = v18->n128_u64[0];
            uint64_t v103 = v16;
            unint64_t v37 = a2;
            size_t v38 = v17 - (char *)a2;
            float v105 = a7;
            unint64_t v39 = a3;
            uint64_t v40 = a4;
            uint64_t v41 = a8;
            memmove(v18, v37, v38);
            uint64_t v16 = v103;
            a7 = v105;
            a8 = v41;
            a4 = v40;
            a3 = v39;
            a2 = (__n128 *)((char *)v18 + v25);
            *(unint64_t *)((char *)v18->n128_u64 + v25) = v101;
          }
          else
          {
            uint64_t v27 = &a2->n128_i8[8];
            if (&a2->n128_i8[8] == v17)
            {
              unint64_t v42 = *((void *)v17 - 1);
              a2 = (__n128 *)&v18->n128_i8[8];
              if (v17 - 8 != (char *)v18)
              {
                uint64_t v104 = v16;
                uint64_t v106 = a7;
                uint64_t v43 = a3;
                uint64_t v102 = a4;
                uint64_t v44 = a8;
                memmove(&v18->n128_i8[8], v18, v17 - 8 - (char *)v18);
                a4 = v102;
                uint64_t v16 = v104;
                a8 = v44;
                a3 = v43;
                a7 = v106;
              }
              v18->n128_u64[0] = v42;
            }
            else
            {
              uint64_t v28 = ((char *)a2 - (char *)v18) >> 3;
              if (v28 == v25 >> 3)
              {
                do
                {
                  uint64_t v29 = v26[-1].n128_i64[1];
                  v26[-1].n128_u64[1] = *((void *)v27 - 1);
                  *((void *)v27 - 1) = v29;
                  if (v26 == a2) {
                    break;
                  }
                  uint64_t v26 = (__n128 *)((char *)v26 + 8);
                  BOOL v30 = v27 == v17;
                  v27 += 8;
                }
                while (!v30);
              }
              else
              {
                uint64_t v45 = v25 >> 3;
                uint64_t v46 = ((char *)a2 - (char *)v18) >> 3;
                do
                {
                  uint64_t v47 = v46;
                  uint64_t v46 = v45;
                  uint64_t v45 = v47 % v45;
                }
                while (v45);
                if (v46)
                {
                  unint64_t v48 = (__n128 *)((char *)v18 + 8 * v46);
                  do
                  {
                    uint64_t v50 = v48[-1].n128_i64[1];
                    unint64_t v48 = (__n128 *)((char *)v48 - 8);
                    uint64_t v49 = v50;
                    uint64_t v51 = (__n128 *)((char *)v48 + 8 * v28);
                    uint64_t v52 = v48;
                    do
                    {
                      uint64_t v53 = v51;
                      v52->n128_u64[0] = v51->n128_u64[0];
                      uint64_t v54 = (v17 - (char *)v51) >> 3;
                      BOOL v55 = __OFSUB__(v28, v54);
                      uint64_t v56 = v28 - v54;
                      char v87 = (v56 < 0) ^ v55;
                      uint64_t v51 = (__n128 *)((char *)v18 + 8 * v56);
                      if (v87) {
                        uint64_t v51 = (__n128 *)((char *)v53 + 8 * v28);
                      }
                      uint64_t v52 = v53;
                    }
                    while (v51 != v48);
                    v53->n128_u64[0] = v49;
                  }
                  while (v48 != v18);
                }
                a2 = (__n128 *)((char *)v18 + 8 * (v25 >> 3));
              }
            }
          }
        }
        goto LABEL_56;
      }
    }
    else
    {
      if (v8 >= 0) {
        uint64_t v15 = v8;
      }
      else {
        uint64_t v15 = v8 + 1;
      }
      uint64_t v16 = v15 >> 1;
      uint64_t v17 = &a2->n128_i8[8 * (v15 >> 1)];
      unint64_t v18 = a2;
      if (a2 != a1)
      {
        unint64_t v19 = ((char *)a2 - (char *)a1) >> 3;
        unint64_t v18 = a1;
        do
        {
          unint64_t v20 = v19 >> 1;
          uint64_t v21 = &v18->n128_u64[v19 >> 1];
          unint64_t v23 = *v21;
          unint64_t v22 = (__n128 *)(v21 + 1);
          v19 += ~(v19 >> 1);
          if (*(void *)(v13 + 8 * *(void *)v17) > *(void *)(v13 + 8 * v23)) {
            unint64_t v19 = v20;
          }
          else {
            unint64_t v18 = v22;
          }
        }
        while (v19);
      }
      uint64_t v24 = ((char *)v18 - (char *)a1) >> 3;
      if (v18 != a2) {
        goto LABEL_21;
      }
    }
    a2 = (__n128 *)v17;
LABEL_56:
    a5 -= v24;
    v8 -= v16;
    if (v24 + v16 >= a5 + v8)
    {
      uint64_t v107 = a2;
      char v57 = a4;
      uint64_t v62 = v16;
      uint64_t v58 = a7;
      uint64_t v59 = a8;
      std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(a2, v17, a3);
      a2 = v18;
      uint64_t v8 = v62;
      a5 = v24;
      a3 = v107;
    }
    else
    {
      char v57 = a4;
      uint64_t v58 = a7;
      uint64_t v59 = a8;
      int32x4_t v60 = a3;
      std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(a1, v18, a2);
      a3 = v60;
      a1 = a2;
      a2 = (__n128 *)v17;
    }
    a7 = v58;
    a4 = v57;
    a8 = v59;
    if (!v8) {
      return result;
    }
  }
  if (a5 <= v8)
  {
    if (a1 == a2) {
      return result;
    }
    unint64_t v73 = (char *)a2 - (char *)a1 - 8;
    unint64_t v74 = a7;
    unint64_t v75 = a1;
    if (v73 >= 0x18)
    {
      unint64_t v74 = a7;
      unint64_t v75 = a1;
      if ((unint64_t)(a7 - (char *)a1) > 0x1F)
      {
        uint64_t v76 = (v73 >> 3) + 1;
        uint64_t v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v74 = &a7[v77];
        uint64_t v78 = a1 + 1;
        uint64_t v79 = (__n128 *)(a7 + 16);
        uint64_t v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          __n128 result = v78[-1];
          __n128 v81 = *v78;
          v79[-1] = result;
          *uint64_t v79 = v81;
          v78 += 2;
          v79 += 2;
          v80 -= 4;
        }
        while (v80);
        if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_77:
          if (v74 != a7)
          {
            unint64_t v83 = *a4;
            while (a2 != a3)
            {
              unint64_t v84 = a2->n128_u64[0];
              unint64_t v85 = *(void *)(*v83 + 8 * a2->n128_u64[0]);
              unint64_t v86 = *(void *)(*v83 + 8 * *(void *)a7);
              char v87 = v85 > v86;
              BOOL v88 = v85 <= v86;
              if (v87) {
                unsigned int v89 = 1;
              }
              else {
                unsigned int v89 = 0;
              }
              if (!v87) {
                unint64_t v84 = *(void *)a7;
              }
              a2 = (__n128 *)((char *)a2 + 8 * v89);
              a7 += 8 * v88;
              a1->n128_u64[0] = v84;
              a1 = (__n128 *)((char *)a1 + 8);
              if (a7 == v74) {
                return result;
              }
            }
            memmove(a1, a7, v74 - a7);
          }
          return result;
        }
        unint64_t v75 = (__n128 *)((char *)a1 + v77);
      }
    }
    do
    {
      unint64_t v82 = v75->n128_u64[0];
      unint64_t v75 = (__n128 *)((char *)v75 + 8);
      *(void *)unint64_t v74 = v82;
      v74 += 8;
    }
    while (v75 != a2);
    goto LABEL_77;
  }
  if (a3 == a2) {
    return result;
  }
  uint64_t v63 = &a3[-1].n128_i8[8];
  unint64_t v64 = &a3[-1].n128_i8[8] - (__int8 *)a2;
  if (v64 < 0x18)
  {
    unint64_t v65 = a7;
    int32x4_t v66 = a2;
    goto LABEL_92;
  }
  unint64_t v65 = a7;
  int32x4_t v66 = a2;
  if ((unint64_t)(a7 - (char *)a2) <= 0x1F)
  {
    do
    {
LABEL_92:
      unint64_t v90 = v66->n128_u64[0];
      int32x4_t v66 = (__n128 *)((char *)v66 + 8);
      *(void *)unint64_t v65 = v90;
      v65 += 8;
    }
    while (v66 != a3);
  }
  else
  {
    uint64_t v67 = (v64 >> 3) + 1;
    uint64_t v68 = 8 * (v67 & 0x3FFFFFFFFFFFFFFCLL);
    unint64_t v65 = &a7[v68];
    uint64_t v69 = a2 + 1;
    int v70 = (__n128 *)(a7 + 16);
    uint64_t v71 = v67 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      __n128 result = v69[-1];
      __n128 v72 = *v69;
      v70[-1] = result;
      *int v70 = v72;
      v69 += 2;
      v70 += 2;
      v71 -= 4;
    }
    while (v71);
    if (v67 != (v67 & 0x3FFFFFFFFFFFFFFCLL))
    {
      int32x4_t v66 = (__n128 *)((char *)a2 + v68);
      goto LABEL_92;
    }
  }
  if (v65 != a7)
  {
    uint64_t v91 = 0;
    while (a2 != a1)
    {
      uint64_t v92 = a2[-1].n128_i64[1];
      if (*(void *)(**a4 + 8 * *((void *)v65 - 1)) > *(void *)(**a4 + 8 * v92))
      {
        a2 = (__n128 *)((char *)a2 - 8);
      }
      else
      {
        uint64_t v92 = *((void *)v65 - 1);
        v65 -= 8;
      }
      a3[-1].n128_u64[1] = v92;
      a3 = (__n128 *)((char *)a3 - 8);
      ++v91;
      if (v65 == a7) {
        return result;
      }
    }
    unint64_t v93 = v65 - a7 - 8;
    if (v93 >= 0x58 && (unint64_t)(v65 - v63 + 8 * v91 - 8) >= 0x20)
    {
      uint64_t v97 = 0;
      uint64_t v98 = (v93 >> 3) + 1;
      unint64_t v94 = &v65[-8 * (v98 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v99 = v98 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        __n128 result = *(__n128 *)&v65[v97 * 16 - 16];
        long long v100 = &a3[v97];
        v100[-2] = *(__n128 *)&v65[v97 * 16 - 32];
        v100[-1] = result;
        v97 -= 2;
        v99 -= 4;
      }
      while (v99);
      if (v98 != (v98 & 0x3FFFFFFFFFFFFFFCLL))
      {
        a3 = (__n128 *)((char *)a3 - 8 * (v98 & 0x3FFFFFFFFFFFFFFCLL));
        goto LABEL_104;
      }
    }
    else
    {
      unint64_t v94 = v65;
LABEL_104:
      uint64_t v95 = &a3[-1].n128_u64[1];
      do
      {
        unint64_t v96 = *((void *)v94 - 1);
        v94 -= 8;
        *v95-- = v96;
      }
      while (v94 != a7);
    }
  }
  return result;
}

char *std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(char *result, char *a2, uint64_t **a3, unint64_t a4, uint64_t *a5)
{
  if (a4)
  {
    uint64_t v5 = a5;
    uint64_t v7 = result;
    if (a4 == 1)
    {
LABEL_8:
      uint64_t *v5 = *(void *)v7;
      return result;
    }
    if (a4 == 2)
    {
      uint64_t v10 = *((void *)a2 - 1);
      uint64_t v11 = **a3;
      float v12 = *(float *)(v11 + 4 * v10);
      float v13 = *(float *)(v11 + 4 * *(void *)result);
      if (v12 <= v13) {
        uint64_t v10 = *(void *)result;
      }
      *a5 = v10;
      uint64_t v5 = a5 + 1;
      if (v12 <= v13) {
        uint64_t v7 = a2 - 8;
      }
      goto LABEL_8;
    }
    if ((uint64_t)a4 > 8)
    {
      unint64_t v25 = a4 >> 1;
      uint64_t v26 = 8 * (a4 >> 1);
      uint64_t v27 = &result[v26];
      std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(result, &result[v26], a3, a4 >> 1, a5, a4 >> 1);
      __n128 result = (char *)std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(&v7[v26], a2, a3, a4 - v25, &v5[(unint64_t)v26 / 8], a4 - v25);
      uint64_t v28 = *a3;
      uint64_t v29 = -1;
      BOOL v30 = v5;
      uint64_t v31 = v7;
      unint64_t v32 = &v7[v26];
      do
      {
        ++v29;
        if (v32 == a2)
        {
          if (v31 == v27) {
            return result;
          }
          unint64_t v47 = &v7[8 * v25] - v31 - 8;
          if (v47 >= 0x38)
          {
            if ((unint64_t)((char *)&v5[v29] - v31) >= 0x20)
            {
              uint64_t v49 = 0;
              uint64_t v50 = (v47 >> 3) + 1;
              uint64_t v51 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              unint64_t v48 = &v30[v51];
              uint64_t v52 = v50 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v53 = &v30[v49];
                long long v54 = *(_OWORD *)&v31[v49 * 8 + 16];
                *uint64_t v53 = *(_OWORD *)&v31[v49 * 8];
                v53[1] = v54;
                v49 += 4;
                v52 -= 4;
              }
              while (v52);
              if (v50 == (v50 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v31 += v51 * 8;
            }
            else
            {
              unint64_t v48 = v30;
            }
          }
          else
          {
            unint64_t v48 = v30;
          }
          do
          {
            uint64_t v55 = *(void *)v31;
            v31 += 8;
            *v48++ = v55;
          }
          while (v31 != v27);
          return result;
        }
        unint64_t v33 = v32;
        uint64_t v34 = *(void *)v32;
        float v35 = *(float *)(*v28 + 4 * v34);
        uint64_t v36 = *(void *)v31;
        float v37 = *(float *)(*v28 + 4 * *(void *)v31);
        if (v35 > v37) {
          uint64_t v36 = v34;
        }
        unint64_t v32 = &v33[8 * (v35 > v37)];
        v31 += 8 * (v35 <= v37);
        *v30++ = v36;
      }
      while (v31 != v27);
      if (v32 == a2) {
        return result;
      }
      uint64_t v38 = -8;
      if (v35 <= v37) {
        uint64_t v38 = 0;
      }
      unint64_t v39 = a2 - v33 + v38 - 8;
      if (v39 < 0x68 || (unint64_t)((char *)&v5[v29] - &v33[8 * (v35 > v37)] + 8) < 0x20) {
        goto LABEL_37;
      }
      uint64_t v40 = 0;
      uint64_t v41 = (v39 >> 3) + 1;
      uint64_t v42 = 8 * (v41 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v43 = v41 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v44 = &v30[v40];
        long long v45 = *(_OWORD *)&v32[v40 * 8 + 16];
        *uint64_t v44 = *(_OWORD *)&v32[v40 * 8];
        v44[1] = v45;
        v40 += 4;
        v43 -= 4;
      }
      while (v43);
      if (v41 != (v41 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v32 += v42;
        BOOL v30 = (uint64_t *)((char *)v30 + v42);
        do
        {
LABEL_37:
          uint64_t v46 = *(void *)v32;
          v32 += 8;
          *v30++ = v46;
        }
        while (v32 != a2);
      }
    }
    else if (result != a2)
    {
      unint64_t v14 = *a3;
      uint64_t v15 = result + 8;
      *a5 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v16 = 0;
        uint64_t v17 = *v14;
        unint64_t v18 = a5;
        unint64_t v19 = a5;
        do
        {
          uint64_t v21 = *v19++;
          uint64_t v20 = v21;
          if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v21))
          {
            *unint64_t v19 = *(void *)v15;
          }
          else
          {
            v18[1] = v20;
            unint64_t v22 = a5;
            if (v18 != a5)
            {
              uint64_t v23 = v16;
              while (1)
              {
                unint64_t v22 = (uint64_t *)((char *)a5 + v23);
                uint64_t v24 = *(uint64_t *)((char *)a5 + v23 - 8);
                if (*(float *)(v17 + 4 * *(void *)v15) <= *(float *)(v17 + 4 * v24)) {
                  break;
                }
                *unint64_t v22 = v24;
                v23 -= 8;
                if (!v23)
                {
                  unint64_t v22 = a5;
                  break;
                }
              }
            }
            *unint64_t v22 = *(void *)v15;
          }
          v15 += 8;
          v16 += 8;
          unint64_t v18 = v19;
        }
        while (v15 != a2);
      }
    }
  }
  return result;
}

uint64_t MatrixNxPts<1u,BOOL>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717270;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,BOOL>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717270;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

float peridot::HDUnfoldClass::confFunc(peridot::HDUnfoldClass *this, float *a2)
{
  return (float)(2.0
               / (float)(powf((float)(2.0/ (float)((float)((float)((float)(a2[1] * *a2) * (float)(1.0 - a2[2])) + 1.0)+ (float)((float)(a2[1] + (float)((float)(1.0 - a2[1]) * *a2)) * a2[2])))+ -1.0, *((float *)this + 19))+ 1.0))+ -1.0;
}

uint64_t peridot::HDUnfoldClass::UnFoldRes::UnFoldRes(uint64_t this)
{
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

{
  *(_DWORD *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

double peridot::PeridotBankTempMeas::PeridotBankTempMeas(peridot::PeridotBankTempMeas *this)
{
  *((_DWORD *)this + 2) = 1109393408;
  *(void *)&double result = vdupq_n_s32(0x42200000u).u64[0];
  *(double *)this = result;
  return result;
}

{
  double result;

  *((_DWORD *)this + 2) = 1109393408;
  *(void *)&double result = vdupq_n_s32(0x42200000u).u64[0];
  *(double *)this = result;
  return result;
}

float *peridot::PeridotBankTempMeas::updateTempMeas(float *result, uint64_t a2, int a3, unsigned int a4, int a5, double a6, double a7, double a8, double a9)
{
  float v9 = 0.0;
  if (a3 && a4)
  {
    unint64_t v10 = 0;
    uint64_t v11 = 0;
    float v12 = (unsigned char *)(a2 + 12);
    do
    {
      float v13 = v12;
      uint64_t v14 = a4;
      do
      {
        if ((*v13 & 7) == 5)
        {
          LOWORD(a9) = *((_WORD *)v13 - 2);
          a9 = (double)*(unint64_t *)&a9;
          float v9 = v9 + -14.969 + a9 * 0.051287;
          ++v10;
        }
        v13 += 9280;
        --v14;
      }
      while (v14);
      ++v11;
      v12 += 9280 * a4;
    }
    while (v11 != a3);
    if (v10) {
      float v9 = v9 / (float)v10;
    }
  }
  if (a5 != 2)
  {
    if (a5 != 1)
    {
      if (a5) {
        return result;
      }
      *double result = v9;
    }
    result[1] = v9;
  }
  result[2] = v9;
  return result;
}

float peridot::PeridotBankTempMeas::getTempMeas(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 2)
    {
      a1 += 8;
    }
    else
    {
      float result = 0.0;
      if (a2 != 1) {
        return result;
      }
      a1 += 4;
    }
  }
  return *(float *)a1;
}

void GlobalEstimationResult::~GlobalEstimationResult(GlobalEstimationResult *this)
{
  float v2 = (void *)*((void *)this + 125);
  if (v2)
  {
    *((void *)this + 126) = v2;
    operator delete(v2);
  }
  *((void *)this + 6) = &unk_2707171D8;
  if (*((void *)this + 7) && *((unsigned char *)this + 72))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 7) = 0;
    *((void *)this + 10) = 0;
    *((unsigned char *)this + 72) = 0;
  }
  *((void *)this + 8) = 0;
  *((void *)this + 1) = &unk_270717370;
  if (*((void *)this + 2) && *((unsigned char *)this + 32))
  {
    MEMORY[0x25A2D62A0]();
    *((void *)this + 2) = 0;
    *((void *)this + 5) = 0;
    *((unsigned char *)this + 32) = 0;
  }
  *((void *)this + 3) = 0;
}

void MatrixNxPts<1u,unsigned int>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717370;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

uint64_t MatrixNxPts<1u,unsigned int>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717370;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

peridot::PFactorCalculator *peridot::PFactorCalculator::PFactorCalculator(peridot::PFactorCalculator *this)
{
  *(void *)this = 0x409000003E19999ALL;
  float v2 = (_OWORD *)((char *)this + 3852);
  memcpy((char *)this + 8, &peridot::gPFactorLUTFixedDxAndMaxRange, 0xF04uLL);
  *(_OWORD *)((char *)this + 3916) = xmmword_2591234B0;
  *(_OWORD *)((char *)this + 3932) = unk_2591234C0;
  *(_OWORD *)((char *)this + 3948) = xmmword_2591234D0;
  *(_OWORD *)((char *)this + 3960) = *(long long *)((char *)&xmmword_2591234D0 + 12);
  _OWORD *v2 = peridot::gPFactorLUTRangeFixedDxAndMaxRange;
  *(_OWORD *)((char *)this + 3868) = unk_259123480;
  *(_OWORD *)((char *)this + 3884) = xmmword_259123490;
  *(_OWORD *)((char *)this + 3900) = unk_2591234A0;
  return this;
}

{
  _OWORD *v2;

  *(void *)this = 0x409000003E19999ALL;
  float v2 = (_OWORD *)((char *)this + 3852);
  memcpy((char *)this + 8, &peridot::gPFactorLUTFixedDxAndMaxRange, 0xF04uLL);
  *(_OWORD *)((char *)this + 3916) = xmmword_2591234B0;
  *(_OWORD *)((char *)this + 3932) = unk_2591234C0;
  *(_OWORD *)((char *)this + 3948) = xmmword_2591234D0;
  *(_OWORD *)((char *)this + 3960) = *(long long *)((char *)&xmmword_2591234D0 + 12);
  _OWORD *v2 = peridot::gPFactorLUTRangeFixedDxAndMaxRange;
  *(_OWORD *)((char *)this + 3868) = unk_259123480;
  *(_OWORD *)((char *)this + 3884) = xmmword_259123490;
  *(_OWORD *)((char *)this + 3900) = unk_2591234A0;
  return this;
}

double peridot::PFactorCalculator::CalcLUT(void *a1, _OWORD *a2, float a3, float a4)
{
  if (fabs(a3 + -0.15) >= 0.00000999999975 || fabs(a4 + -4.5) >= 0.00000999999975) {
    __assert_rtn("CalcLUT", "PFactorCalculator.mm", 40, "!\"Shouldn't calculate LUT in runtime, check CalcLUT if parameters are changed, and if so, update the PFactorLUT buffers accordingly\\n\"");
  }
  memcpy(a1, &peridot::gPFactorLUTFixedDxAndMaxRange, 0xF04uLL);
  a2[4] = xmmword_2591234B0;
  a2[5] = unk_2591234C0;
  a2[6] = xmmword_2591234D0;
  *(_OWORD *)((char *)a2 + 108) = *(long long *)((char *)&xmmword_2591234D0 + 12);
  *a2 = peridot::gPFactorLUTRangeFixedDxAndMaxRange;
  a2[1] = unk_259123480;
  double result = 0.0562500134;
  a2[2] = xmmword_259123490;
  a2[3] = unk_2591234A0;
  return result;
}

void peridot::PeridotAlgo::PeridotAlgo(peridot::PeridotAlgo *this)
{
}

{
  operator new();
}

void sub_2590ACC28(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x10F2C40D843ECF2);
  _Unwind_Resume(a1);
}

void peridot::PeridotAlgo::PeridotUnitInfo::~PeridotUnitInfo(id *this)
{
  uint64_t v1 = this + 50316;
}

void sub_2590ACCD8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x10F2C40D843ECF2);
  _Unwind_Resume(a1);
}

void peridot::PeridotAlgo::~PeridotAlgo(id **this)
{
  float v2 = *this;
  *this = 0;
  if (v2)
  {
    peridot::PeridotAlgo::Impl::~Impl(v2);
    MEMORY[0x25A2D62D0]();
  }
}

{
  id *v2;

  float v2 = *this;
  *this = 0;
  if (v2)
  {
    peridot::PeridotAlgo::Impl::~Impl(v2);
    MEMORY[0x25A2D62D0]();
  }
}

void peridot::PeridotAlgo::Impl::~Impl(id *this)
{
  float v2 = (char *)(this + 234350);
  uint64_t v3 = this + 50317;

  unint64_t v4 = (void *)*((void *)v2 + 2);
  if (v4)
  {
    do
    {
      uint64_t v5 = (void *)*v4;
      operator delete(v4);
      unint64_t v4 = v5;
    }
    while (v5);
  }
  uint64_t v6 = *(void **)v2;
  *(void *)float v2 = 0;
  if (v6) {
    operator delete(v6);
  }
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 209714));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 186960));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 164206));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 141452));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 118698));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 95944));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 73190));
  peridot::PeridotDXP::~PeridotDXP((peridot::PeridotDXP *)(this + 50436));
}

uint64_t peridot::PeridotAlgo::init(uint64_t *a1, _PeridotCalib *a2, void *a3, int a4, int a5)
{
  return peridot::PeridotAlgo::Impl::init(*a1, a2, a3, a4, a5);
}

uint64_t peridot::PeridotAlgo::prepare(void *a1, int a2)
{
  uint64_t v43 = *a1 + 1771256;
  uint64_t v44 = *a1 + 1796400;
  uint64_t v41 = *a1 + 1720176;
  uint64_t v42 = *a1 + 1720980;
  uint64_t v39 = *a1 + 1614368;
  uint64_t v40 = *a1 + 1677712;
  uint64_t v37 = *a1 + 1538948;
  uint64_t v38 = *a1 + 1589224;
  uint64_t v36 = *a1 + 1538144;
  uint64_t v34 = *a1 + 1432336;
  uint64_t v35 = *a1 + 1495680;
  uint64_t v32 = *a1 + 1356916;
  uint64_t v33 = *a1 + 1407192;
  uint64_t v30 = *a1 + 1313648;
  uint64_t v31 = *a1 + 1356112;
  uint64_t v28 = *a1 + 1225160;
  uint64_t v29 = *a1 + 1250304;
  uint64_t v26 = *a1 + 1174080;
  uint64_t v27 = *a1 + 1174884;
  uint64_t v24 = *a1 + 1068272;
  uint64_t v25 = *a1 + 1131616;
  uint64_t v22 = *a1 + 992852;
  uint64_t v23 = *a1 + 1043128;
  uint64_t v20 = *a1 + 949584;
  uint64_t v21 = *a1 + 992048;
  uint64_t v18 = *a1 + 861096;
  uint64_t v19 = *a1 + 886240;
  uint64_t v16 = *a1 + 810016;
  uint64_t v17 = *a1 + 810820;
  uint64_t v15 = *a1 + 767552;
  uint64_t v2 = *a1 + 704208;
  uint64_t v3 = *a1 + 679064;
  uint64_t v4 = *a1 + 628788;
  uint64_t v5 = *a1 + 627984;
  uint64_t v6 = *a1 + 585520;
  uint64_t v7 = *a1 + 522176;
  uint64_t v8 = *a1 + 497032;
  uint64_t v9 = *a1 + 446756;
  uint64_t v10 = *a1 + 442368;
  uint64_t v11 = *a1 + 403464;
  *(_DWORD *)uint64_t v11 = a2;
  uint64_t v12 = v10 + 3584;
  int v13 = peridot::presetToRunMode(a2);
  *(_WORD *)(v11 + 9) = v13;
  *(unsigned char *)(v11 + 11) = BYTE2(v13);
  *(_WORD *)(v11 + 24) = v13;
  *(unsigned char *)(v11 + 26) = BYTE2(v13);
  *(_WORD *)uint64_t v12 = v13;
  *(unsigned char *)(v12 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v9 = v13;
  *(unsigned char *)(v9 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v8 = v13;
  *(unsigned char *)(v8 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v7 = v13;
  *(unsigned char *)(v7 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v6 = v13;
  *(unsigned char *)(v6 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v5 = v13;
  *(unsigned char *)(v5 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v4 = v13;
  *(unsigned char *)(v4 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v3 = v13;
  *(unsigned char *)(v3 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v2 = v13;
  *(unsigned char *)(v2 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v15 = v13;
  *(unsigned char *)(v15 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v16 = v13;
  *(unsigned char *)(v16 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v17 = v13;
  *(unsigned char *)(v17 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v18 = v13;
  *(unsigned char *)(v18 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v19 = v13;
  *(unsigned char *)(v19 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v20 = v13;
  *(unsigned char *)(v20 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v21 = v13;
  *(unsigned char *)(v21 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v22 = v13;
  *(unsigned char *)(v22 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v23 = v13;
  *(unsigned char *)(v23 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v24 = v13;
  *(unsigned char *)(v24 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v25 = v13;
  *(unsigned char *)(v25 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v26 = v13;
  *(unsigned char *)(v26 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v27 = v13;
  *(unsigned char *)(v27 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v28 = v13;
  *(unsigned char *)(v28 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v29 = v13;
  *(unsigned char *)(v29 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v30 = v13;
  *(unsigned char *)(v30 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v31 = v13;
  *(unsigned char *)(v31 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v32 = v13;
  *(unsigned char *)(v32 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v33 = v13;
  *(unsigned char *)(v33 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v34 = v13;
  *(unsigned char *)(v34 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v35 = v13;
  *(unsigned char *)(v35 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v36 = v13;
  *(unsigned char *)(v36 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v37 = v13;
  *(unsigned char *)(v37 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v38 = v13;
  *(unsigned char *)(v38 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v39 = v13;
  *(unsigned char *)(v39 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v40 = v13;
  *(unsigned char *)(v40 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v41 = v13;
  *(unsigned char *)(v41 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v42 = v13;
  *(unsigned char *)(v42 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v43 = v13;
  *(unsigned char *)(v43 + 2) = BYTE2(v13);
  *(_WORD *)uint64_t v44 = v13;
  *(unsigned char *)(v44 + 2) = BYTE2(v13);
  return 0;
}

uint64_t peridot::PeridotAlgo::Impl::prepare(uint64_t a1, int a2)
{
  uint64_t v42 = a1 + 1771256;
  uint64_t v43 = a1 + 1796400;
  uint64_t v40 = a1 + 1720176;
  uint64_t v41 = a1 + 1720980;
  uint64_t v38 = a1 + 1614368;
  uint64_t v39 = a1 + 1677712;
  uint64_t v36 = a1 + 1538948;
  uint64_t v37 = a1 + 1589224;
  uint64_t v35 = a1 + 1538144;
  uint64_t v33 = a1 + 1432336;
  uint64_t v34 = a1 + 1495680;
  uint64_t v31 = a1 + 1356916;
  uint64_t v32 = a1 + 1407192;
  uint64_t v29 = a1 + 1313648;
  uint64_t v30 = a1 + 1356112;
  uint64_t v27 = a1 + 1225160;
  uint64_t v28 = a1 + 1250304;
  uint64_t v25 = a1 + 1174080;
  uint64_t v26 = a1 + 1174884;
  uint64_t v23 = a1 + 1068272;
  uint64_t v24 = a1 + 1131616;
  uint64_t v21 = a1 + 992852;
  uint64_t v22 = a1 + 1043128;
  uint64_t v19 = a1 + 949584;
  uint64_t v20 = a1 + 992048;
  uint64_t v17 = a1 + 861096;
  uint64_t v18 = a1 + 886240;
  uint64_t v15 = a1 + 810016;
  uint64_t v16 = a1 + 810820;
  uint64_t v14 = a1 + 767552;
  uint64_t v2 = a1 + 704208;
  uint64_t v3 = a1 + 679064;
  uint64_t v4 = a1 + 628788;
  uint64_t v5 = a1 + 627984;
  uint64_t v6 = a1 + 585520;
  uint64_t v7 = a1 + 522176;
  uint64_t v8 = a1 + 497032;
  uint64_t v9 = a1 + 446756;
  uint64_t v10 = a1 + 403464;
  *(_DWORD *)(a1 + 403464) = a2;
  uint64_t v11 = a1 + 445952;
  int v12 = peridot::presetToRunMode(a2);
  *(_WORD *)(v10 + 9) = v12;
  *(unsigned char *)(v10 + 11) = BYTE2(v12);
  *(_WORD *)(v10 + 24) = v12;
  *(unsigned char *)(v10 + 26) = BYTE2(v12);
  *(_WORD *)uint64_t v11 = v12;
  *(unsigned char *)(v11 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v9 = v12;
  *(unsigned char *)(v9 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v8 = v12;
  *(unsigned char *)(v8 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v7 = v12;
  *(unsigned char *)(v7 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v6 = v12;
  *(unsigned char *)(v6 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v5 = v12;
  *(unsigned char *)(v5 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v4 = v12;
  *(unsigned char *)(v4 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v3 = v12;
  *(unsigned char *)(v3 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v2 = v12;
  *(unsigned char *)(v2 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v14 = v12;
  *(unsigned char *)(v14 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v15 = v12;
  *(unsigned char *)(v15 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v16 = v12;
  *(unsigned char *)(v16 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v17 = v12;
  *(unsigned char *)(v17 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v18 = v12;
  *(unsigned char *)(v18 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v19 = v12;
  *(unsigned char *)(v19 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v20 = v12;
  *(unsigned char *)(v20 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v21 = v12;
  *(unsigned char *)(v21 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v22 = v12;
  *(unsigned char *)(v22 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v23 = v12;
  *(unsigned char *)(v23 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v24 = v12;
  *(unsigned char *)(v24 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v25 = v12;
  *(unsigned char *)(v25 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v26 = v12;
  *(unsigned char *)(v26 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v27 = v12;
  *(unsigned char *)(v27 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v28 = v12;
  *(unsigned char *)(v28 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v29 = v12;
  *(unsigned char *)(v29 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v30 = v12;
  *(unsigned char *)(v30 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v31 = v12;
  *(unsigned char *)(v31 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v32 = v12;
  *(unsigned char *)(v32 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v33 = v12;
  *(unsigned char *)(v33 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v34 = v12;
  *(unsigned char *)(v34 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v35 = v12;
  *(unsigned char *)(v35 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v36 = v12;
  *(unsigned char *)(v36 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v37 = v12;
  *(unsigned char *)(v37 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v38 = v12;
  *(unsigned char *)(v38 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v39 = v12;
  *(unsigned char *)(v39 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v40 = v12;
  *(unsigned char *)(v40 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v41 = v12;
  *(unsigned char *)(v41 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v42 = v12;
  *(unsigned char *)(v42 + 2) = BYTE2(v12);
  *(_WORD *)uint64_t v43 = v12;
  *(unsigned char *)(v43 + 2) = BYTE2(v12);
  return 0;
}

uint64_t peridot::PeridotAlgo::delegate(peridot::PeridotAlgo *this)
{
  return [*(id *)(*(void *)this + 402544) delegate];
}

uint64_t peridot::PeridotAlgo::Impl::delegate(id *this)
{
  return [this[50318] delegate];
}

uint64_t peridot::PeridotAlgo::setDelegate(uint64_t a1, uint64_t a2)
{
  return [*(id *)(*(void *)a1 + 402544) setDelegate:a2];
}

uint64_t peridot::PeridotAlgo::Impl::setDelegate(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 402544) setDelegate:a2];
}

void peridot::PeridotAlgo::getOptimizedAnchors(peridot::PeridotAlgo *this, unsigned int a2, CGPoint *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  if (!a2) {
    __assert_rtn("translateSpotLocationsToAnchors", "PeridotAlgo.mm", 352, "count > 0");
  }
  if (a2 < 8)
  {
    uint64_t v5 = 0;
    goto LABEL_4;
  }
  uint64_t v5 = 0;
  uint64_t v17 = &a4[a2];
  uint64_t v18 = &a5[a2];
  uint64_t v19 = &a3[a2];
  BOOL v21 = v19 > (CGPoint *)a4 && v17 > (unsigned __int8 *)a3;
  BOOL v23 = v19 > (CGPoint *)a5 && v18 > (unsigned __int8 *)a3;
  BOOL v24 = v17 > a5 && v18 > a4;
  if (v24 || v21 || v23) {
    goto LABEL_4;
  }
  __asm
  {
    FMOV            V0.2D, #-0.5
    FMOV            V1.2D, #0.5
  }
  if (a2 >= 0x10)
  {
    uint64_t v5 = a2 & 0xFFFFFFF0;
    uint64_t v39 = a3;
    uint64_t v40 = (int8x16_t *)a4;
    uint64_t v41 = (int8x16_t *)a5;
    uint64_t v42 = v5;
    do
    {
      p_int x = &v39->x;
      float64x2x2_t v63 = vld2q_f64(p_x);
      p_x += 4;
      float64x2x2_t v65 = vld2q_f64(p_x);
      uint64_t v44 = &v39[4].x;
      float64x2x2_t v67 = vld2q_f64(v44);
      long long v45 = &v39[6].x;
      *(float64x2x2_t *)v74.val[0].i8 = vld2q_f64(v45);
      uint64_t v46 = &v39[8].x;
      *(float64x2x2_t *)v74.val[2].i8 = vld2q_f64(v46);
      unint64_t v47 = &v39[10].x;
      float64x2x2_t v69 = vld2q_f64(v47);
      unint64_t v48 = &v39[12].x;
      float64x2x2_t v71 = vld2q_f64(v48);
      uint64_t v49 = &v39[14].x;
      float64x2x2_t v72 = vld2q_f64(v49);
      v73.val[3] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v71.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v72.val[0], _Q0))));
      v73.val[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v74.val[2], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v69.val[0], _Q0))));
      v73.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v67.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v74.val[0], _Q0))));
      v73.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v63.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v65.val[0], _Q0))));
      *v40++ = vqtbl4q_s8(v73, (int8x16_t)xmmword_259120320);
      v67.val[0] = vrndmq_f64(vaddq_f64((float64x2_t)v74.val[3], _Q1));
      v74.val[3] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v71.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v72.val[1], _Q1))));
      v74.val[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v67.val[0]), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v69.val[1], _Q1))));
      v74.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v67.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v74.val[1], _Q1))));
      v74.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v63.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v65.val[1], _Q1))));
      *v41++ = vqtbl4q_s8(v74, (int8x16_t)xmmword_259120320);
      v39 += 16;
      v42 -= 16;
    }
    while (v42);
    if (v5 == a2) {
      goto LABEL_6;
    }
    if ((a2 & 8) == 0)
    {
LABEL_4:
      uint64_t v6 = a2 - v5;
      uint64_t v7 = &a5[v5];
      p_int y = &a3[v5].y;
      uint64_t v9 = &a4[v5];
      do
      {
        *v9++ = vcvtmd_u64_f64(*(p_y - 1) + -0.5);
        double v10 = *p_y;
        p_y += 2;
        *v7++ = vcvtmd_u64_f64(v10 + 0.5);
        --v6;
      }
      while (v6);
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v31 = v5;
  uint64_t v5 = a2 & 0xFFFFFFF8;
  uint64_t v32 = v31 - v5;
  uint64_t v33 = &a5[v31];
  uint64_t v34 = &a4[v31];
  uint64_t v35 = &a3[v31];
  do
  {
    uint64_t v36 = &v35->x;
    float64x2x2_t v62 = vld2q_f64(v36);
    v36 += 4;
    int8x16x2_t v64 = (int8x16x2_t)vld2q_f64(v36);
    uint64_t v37 = &v35[4].x;
    float64x2x2_t v66 = vld2q_f64(v37);
    uint64_t v38 = &v35[6].x;
    float64x2x2_t v68 = vld2q_f64(v38);
    v70.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v66.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v68.val[0], _Q0))));
    v70.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v62.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v64.val[0], _Q0))));
    *(void *)uint64_t v34 = vqtbl2q_s8(v70, (int8x16_t)xmmword_259120330).u64[0];
    v34 += 8;
    v62.val[0] = vaddq_f64(v62.val[1], _Q1);
    v62.val[1] = vrndmq_f64(vaddq_f64((float64x2_t)v64.val[1], _Q1));
    v64.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v66.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v68.val[1], _Q1))));
    v64.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(v62.val[0])), (int32x4_t)vcvtq_u64_f64(v62.val[1]));
    *(void *)uint64_t v33 = vqtbl2q_s8(v64, (int8x16_t)xmmword_259120330).u64[0];
    v33 += 8;
    v35 += 8;
    v32 += 8;
  }
  while (v32);
  if (v5 != a2) {
    goto LABEL_4;
  }
LABEL_6:
  if (a2 < 8 || &a5[a2] > a4 && &a4[a2] > a5)
  {
    uint64_t v11 = 0;
    goto LABEL_10;
  }
  if (a2 < 0x20)
  {
    uint64_t v11 = 0;
LABEL_54:
    uint64_t v58 = v11;
    uint64_t v11 = a2 & 0xFFFFFFF8;
    uint64_t v59 = v58 - v11;
    int32x4_t v60 = (uint8x8_t *)&a5[v58];
    uint64_t v61 = (uint8x8_t *)&a4[v58];
    do
    {
      *uint64_t v61 = vmin_u8(*v61, (uint8x8_t)0x5454545454545454);
      ++v61;
      *int32x4_t v60 = vmax_u8(vmin_u8(*v60, (uint8x8_t)0x6C6C6C6C6C6C6C6CLL), (uint8x8_t)0x202020202020202);
      ++v60;
      v59 += 8;
    }
    while (v59);
    if (v11 == a2) {
      return;
    }
    goto LABEL_10;
  }
  uint64_t v11 = a2 & 0xFFFFFFE0;
  uint64_t v50 = (uint8x16_t *)(a5 + 16);
  uint64_t v51 = (uint8x16_t *)(a4 + 16);
  v52.i64[0] = 0x5454545454545454;
  v52.i64[1] = 0x5454545454545454;
  v53.i64[0] = 0x6C6C6C6C6C6C6C6CLL;
  v53.i64[1] = 0x6C6C6C6C6C6C6C6CLL;
  v54.i64[0] = 0x202020202020202;
  v54.i64[1] = 0x202020202020202;
  uint64_t v55 = v11;
  do
  {
    uint8x16_t v56 = vminq_u8(*v51, v52);
    v51[-1] = vminq_u8(v51[-1], v52);
    *uint64_t v51 = v56;
    uint8x16_t v57 = vmaxq_u8(vminq_u8(*v50, v53), v54);
    v50[-1] = vmaxq_u8(vminq_u8(v50[-1], v53), v54);
    *uint64_t v50 = v57;
    v50 += 2;
    v51 += 2;
    v55 -= 32;
  }
  while (v55);
  if (v11 == a2) {
    return;
  }
  if ((a2 & 0x18) != 0) {
    goto LABEL_54;
  }
LABEL_10:
  uint64_t v12 = a2 - v11;
  int v13 = &a5[v11];
  uint64_t v14 = &a4[v11];
  do
  {
    unsigned int v15 = *v14;
    if (v15 >= 0x54) {
      LOBYTE(v15) = 84;
    }
    *v14++ = v15;
    unsigned int v16 = *v13;
    if (v16 >= 0x6C) {
      unsigned int v16 = 108;
    }
    if (v16 <= 2) {
      LOBYTE(v16) = 2;
    }
    *v13++ = v16;
    --v12;
  }
  while (v12);
}

const double *peridot::PeridotAlgo::Impl::translateSpotLocationsToAnchors(peridot::PeridotAlgo::Impl *this, unsigned int a2, CGPoint *a3, unsigned __int8 *a4, unsigned __int8 *a5, int a6)
{
  if (!a2) {
    __assert_rtn("translateSpotLocationsToAnchors", "PeridotAlgo.mm", 352, "count > 0");
  }
  unsigned int v6 = a6 != 0;
  if (a6) {
    unsigned int v7 = 83;
  }
  else {
    unsigned int v7 = 84;
  }
  if (a6) {
    unsigned int v8 = 3;
  }
  else {
    unsigned int v8 = 2;
  }
  if (a6) {
    unsigned int v9 = 107;
  }
  else {
    unsigned int v9 = 108;
  }
  if (a2 < 8)
  {
    uint64_t v10 = 0;
    goto LABEL_13;
  }
  uint64_t v10 = 0;
  uint64_t v26 = &a4[a2];
  uint64_t v27 = &a5[a2];
  uint64_t v28 = &a3[a2];
  BOOL v30 = v28 > (CGPoint *)a4 && v26 > (unsigned __int8 *)a3;
  BOOL v32 = v28 > (CGPoint *)a5 && v27 > (unsigned __int8 *)a3;
  BOOL v33 = v26 > a5 && v27 > a4;
  if (v33 || v30 || v32) {
    goto LABEL_13;
  }
  __asm
  {
    FMOV            V0.2D, #-0.5
    FMOV            V1.2D, #0.5
  }
  if (a2 >= 0x10)
  {
    uint64_t v10 = a2 & 0xFFFFFFF0;
    uint8x16_t v56 = a3;
    uint8x16_t v57 = (int8x16_t *)a4;
    uint64_t v58 = (int8x16_t *)a5;
    uint64_t v59 = v10;
    do
    {
      p_int x = &v56->x;
      float64x2x2_t v74 = vld2q_f64(p_x);
      p_x += 4;
      float64x2x2_t v76 = vld2q_f64(p_x);
      uint64_t v61 = &v56[4].x;
      float64x2x2_t v78 = vld2q_f64(v61);
      float64x2x2_t v62 = &v56[6].x;
      *(float64x2x2_t *)v85.val[0].i8 = vld2q_f64(v62);
      float64x2x2_t v63 = &v56[8].x;
      *(float64x2x2_t *)v85.val[2].i8 = vld2q_f64(v63);
      int8x16x2_t v64 = &v56[10].x;
      float64x2x2_t v80 = vld2q_f64(v64);
      float64x2x2_t v65 = &v56[12].x;
      float64x2x2_t v82 = vld2q_f64(v65);
      double result = &v56[14].x;
      float64x2x2_t v83 = vld2q_f64(result);
      v84.val[3] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v82.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v83.val[0], _Q0))));
      v84.val[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v85.val[2], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v80.val[0], _Q0))));
      v84.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v78.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v85.val[0], _Q0))));
      v84.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v74.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v76.val[0], _Q0))));
      *v57++ = vqtbl4q_s8(v84, (int8x16_t)xmmword_259120320);
      v78.val[0] = vrndmq_f64(vaddq_f64((float64x2_t)v85.val[3], _Q1));
      v85.val[3] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v82.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v83.val[1], _Q1))));
      v85.val[2] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v78.val[0]), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v80.val[1], _Q1))));
      v85.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v78.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v85.val[1], _Q1))));
      v85.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v74.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v76.val[1], _Q1))));
      *v58++ = vqtbl4q_s8(v85, (int8x16_t)xmmword_259120320);
      v56 += 16;
      v59 -= 16;
    }
    while (v59);
    if (v10 == a2) {
      goto LABEL_15;
    }
    if ((a2 & 8) == 0)
    {
LABEL_13:
      uint64_t v11 = a2 - v10;
      uint64_t v12 = &a5[v10];
      p_int y = &a3[v10].y;
      uint64_t v14 = &a4[v10];
      do
      {
        *v14++ = vcvtmd_u64_f64(*(p_y - 1) + -0.5);
        double v15 = *p_y;
        p_y += 2;
        *v12++ = vcvtmd_u64_f64(v15 + 0.5);
        --v11;
      }
      while (v11);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v40 = v10;
  uint64_t v10 = a2 & 0xFFFFFFF8;
  uint64_t v41 = v40 - v10;
  uint64_t v42 = &a5[v40];
  uint64_t v43 = &a4[v40];
  uint64_t v44 = &a3[v40];
  do
  {
    long long v45 = &v44->x;
    float64x2x2_t v73 = vld2q_f64(v45);
    v45 += 4;
    int8x16x2_t v75 = (int8x16x2_t)vld2q_f64(v45);
    uint64_t v46 = &v44[4].x;
    float64x2x2_t v77 = vld2q_f64(v46);
    double result = &v44[6].x;
    float64x2x2_t v79 = vld2q_f64(result);
    v81.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v77.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v79.val[0], _Q0))));
    v81.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v73.val[0], _Q0))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64((float64x2_t)v75.val[0], _Q0))));
    *(void *)uint64_t v43 = vqtbl2q_s8(v81, (int8x16_t)xmmword_259120330).u64[0];
    v43 += 8;
    v73.val[0] = vaddq_f64(v73.val[1], _Q1);
    v73.val[1] = vrndmq_f64(vaddq_f64((float64x2_t)v75.val[1], _Q1));
    v75.val[1] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v77.val[1], _Q1))), (int32x4_t)vcvtq_u64_f64(vrndmq_f64(vaddq_f64(v79.val[1], _Q1))));
    v75.val[0] = (int8x16_t)vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vrndmq_f64(v73.val[0])), (int32x4_t)vcvtq_u64_f64(v73.val[1]));
    *(void *)uint64_t v42 = vqtbl2q_s8(v75, (int8x16_t)xmmword_259120330).u64[0];
    v42 += 8;
    v44 += 8;
    v41 += 8;
  }
  while (v41);
  if (v10 != a2) {
    goto LABEL_13;
  }
LABEL_15:
  if (a2 <= 7 || &a5[a2] > a4 && &a4[a2] > a5)
  {
    uint64_t v16 = 0;
    goto LABEL_19;
  }
  if (a2 < 0x10)
  {
    uint64_t v16 = 0;
LABEL_60:
    uint64_t v48 = v16;
    int8x8_t v49 = vdup_n_s8(v6);
    uint8x8_t v50 = (uint8x8_t)vdup_n_s8(v7);
    int8x8_t v51 = vdup_n_s8(v8);
    uint64_t v16 = a2 & 0xFFFFFFF8;
    uint8x8_t v52 = (uint8x8_t)vdup_n_s8(v9);
    uint64_t v53 = v48 - v16;
    uint8x16_t v54 = (uint8x8_t *)&a5[v48];
    uint64_t v55 = (uint8x8_t *)&a4[v48];
    do
    {
      *uint64_t v55 = (uint8x8_t)vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v49, *v55), v49, (int8x8_t)vmin_u8(*v55, v50));
      ++v55;
      *uint8x16_t v54 = (uint8x8_t)vbsl_s8((int8x8_t)vcgt_u8((uint8x8_t)v51, *v54), v51, (int8x8_t)vmin_u8(*v54, v52));
      ++v54;
      v53 += 8;
    }
    while (v53);
    if (v16 == a2) {
      return result;
    }
    goto LABEL_19;
  }
  int8x16_t v66 = vdupq_n_s8(v6);
  uint8x16_t v67 = (uint8x16_t)vdupq_n_s8(v7);
  int8x16_t v68 = vdupq_n_s8(v8);
  uint64_t v16 = a2 & 0xFFFFFFF0;
  uint8x16_t v69 = (uint8x16_t)vdupq_n_s8(v9);
  int8x16x2_t v70 = (uint8x16_t *)a4;
  float64x2x2_t v71 = (uint8x16_t *)a5;
  uint64_t v72 = v16;
  do
  {
    *(int8x16_t *)int8x16x2_t v70 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v66, *v70), v66, (int8x16_t)vminq_u8(*v70, v67));
    ++v70;
    *(int8x16_t *)float64x2x2_t v71 = vbslq_s8((int8x16_t)vcgtq_u8((uint8x16_t)v68, *v71), v68, (int8x16_t)vminq_u8(*v71, v69));
    ++v71;
    v72 -= 16;
  }
  while (v72);
  if (v16 == a2) {
    return result;
  }
  if ((a2 & 8) != 0) {
    goto LABEL_60;
  }
LABEL_19:
  uint64_t v17 = a2 - v16;
  uint64_t v18 = &a5[v16];
  uint64_t v19 = &a4[v16];
  do
  {
    unsigned int v20 = *v19;
    if (v20 >= v7) {
      char v21 = v7;
    }
    else {
      char v21 = *v19;
    }
    if (v20 >= v6) {
      BOOL v22 = v21;
    }
    else {
      BOOL v22 = a6 != 0;
    }
    *v19++ = v22;
    unsigned int v23 = *v18;
    if (v23 >= v9) {
      unsigned __int8 v24 = v9;
    }
    else {
      unsigned __int8 v24 = *v18;
    }
    if (v23 >= v8) {
      unsigned __int8 v25 = v24;
    }
    else {
      unsigned __int8 v25 = v8;
    }
    *v18++ = v25;
    --v17;
  }
  while (v17);
  return result;
}

uint64_t peridot::PeridotAlgo::processSuperFrame(uint64_t *a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  return peridot::PeridotAlgo::Impl::processSuperFrame(*a1, a2, a3, COERCE_FLOAT(*a4));
}

void ***std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = a1[1];
      do
      {
        unsigned int v7 = (char *)*(v5 - 3);
        v5 -= 3;
        unsigned int v6 = v7;
        if (v7)
        {
          unsigned int v8 = (char *)*(v3 - 2);
          unsigned int v9 = v6;
          if (v8 != v6)
          {
            uint64_t v10 = v8 - 24;
            uint64_t v11 = v8 - 24;
            uint64_t v12 = v8 - 24;
            do
            {
              int v13 = *(void (***)(char *))v12;
              v12 -= 24;
              (*v13)(v11);
              v10 -= 24;
              BOOL v14 = v11 == v6;
              uint64_t v11 = v12;
            }
            while (!v14);
            unsigned int v9 = *v5;
          }
          *(v3 - 2) = v6;
          operator delete(v9);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void peridot::PeridotAlgo::Impl::calcT0(uint64_t a1, uint64_t *a2, unsigned int a3)
{
}

void peridot::PeridotAlgo::Impl::calcT0_MPDC(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, int a5, unsigned int a6)
{
}

uint64_t peridot::PeridotAlgo::setGmoCfgBits(id **this, uint64_t a2)
{
  return [**this setCfgBits:a2];
}

uint64_t peridot::PeridotAlgo::startNewStatisticsSession(peridot::PeridotAlgo *this)
{
  return PeridotTelemetry::startSession(*(void *)this + 1875032, *(_DWORD *)(*(void *)this + 403464));
}

uint64_t peridot::PeridotAlgo::Impl::startNewStatisticsSession(peridot::PeridotAlgo::Impl *this)
{
  return PeridotTelemetry::startSession((uint64_t)this + 1875032, *((_DWORD *)this + 100866));
}

void peridot::PeridotAlgo::reportSessionStatistics(peridot::PeridotAlgo *this)
{
  uint64_t v1 = (void **)(*(void *)this + 1875032);
  if (*v1)
  {
    PeridotTelemetry::reportSessionStatistics((PeridotTelemetry *)(*(void *)this + 1875032));
    uint64_t v2 = *v1;
    *uint64_t v1 = 0;
  }
}

void peridot::PeridotAlgo::Impl::reportSessionStatistics(peridot::PeridotAlgo::Impl *this)
{
  uint64_t v1 = (void **)((char *)this + 1875032);
  if (*((void *)this + 234379))
  {
    PeridotTelemetry::reportSessionStatistics((peridot::PeridotAlgo::Impl *)((char *)this + 1875032));
    uint64_t v2 = *v1;
    *uint64_t v1 = 0;
  }
}

id peridot::PeridotAlgo::getInternalState(id **this)
{
  uint64_t v1 = (void *)[**this copySessionState];
  return v1;
}

id peridot::PeridotAlgo::Impl::getInternalState(id *this)
{
  uint64_t v1 = (void *)[*this copySessionState];
  return v1;
}

uint64_t peridot::PeridotAlgo::setInternalState(id **this, NSDictionary *a2)
{
  return [**this setSessionState:a2];
}

uint64_t peridot::PeridotAlgo::Impl::setInternalState(id *this, NSDictionary *a2)
{
  return [*this setSessionState:a2];
}

uint64_t peridot::readFileToArr(uint64_t a1, uint64_t a2, void *a3)
{
  v13[19] = *MEMORY[0x263EF8340];
  uint64_t v4 = MEMORY[0x263F8C308] + 64;
  v13[0] = MEMORY[0x263F8C308] + 64;
  uint64_t v5 = (void *)MEMORY[0x263F8C2A8];
  uint64_t v6 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  v11[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = v6;
  v11[1] = 0;
  unsigned int v7 = (std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24));
  std::ios_base::init(v7, v12);
  uint64_t v8 = MEMORY[0x263F8C308] + 24;
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11[0] = v8;
  v13[0] = v4;
  MEMORY[0x25A2D6050](v12);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)v11 + *(void *)(v11[0] - 24)), *(_DWORD *)((char *)&v12[2] + *(void *)(v11[0] - 24)) | 4);
  }
  if (v12[15])
  {
    std::istream::tellg();
    *a3 = v10;
    operator new[]();
  }
  v11[0] = *v5;
  *(void *)((char *)v11 + *(void *)(v11[0] - 24)) = v5[3];
  MEMORY[0x25A2D6060](v12);
  std::istream::~istream();
  MEMORY[0x25A2D6270](v13);
  return 1;
}

void sub_2590AE6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x25A2D6060](a1 + 2);
  std::istream::~istream();
  MEMORY[0x25A2D6270](a1 + 53);
  return a1;
}

float64_t peridot::grangerPixelsToPeridotCamera(peridot *this, unint64_t a2, const CGPoint *a3, CGPoint *a4, float64x2_t a5)
{
  if ((int)this >= 1)
  {
    if (this <= 3
      || (a2 + 16 * this > (unint64_t)a3
        ? (BOOL v5 = (unint64_t)&a3[this] > a2)
        : (BOOL v5 = 0),
          v5))
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = this & 0x7FFFFFFC;
      unsigned int v7 = (CGPoint *)&a3[2];
      uint64_t v8 = (const double *)(a2 + 32);
      a5 = (float64x2_t)vdupq_n_s64(0x4055000000000000uLL);
      uint64_t v9 = this & 0xFFFFFFFC;
      do
      {
        uint64_t v10 = v8 - 4;
        float64x2x2_t v18 = vld2q_f64(v10);
        float64x2x2_t v19 = vld2q_f64(v8);
        v18.val[0] = vsubq_f64(a5, v18.val[0]);
        p_int x = &v7[-2].x;
        vst2q_f64(p_x, v18);
        v19.val[0] = vsubq_f64(a5, v19.val[0]);
        vst2q_f64(&v7->x, v19);
        v7 += 4;
        v8 += 8;
        v9 -= 4;
      }
      while (v9);
      if (v6 == this) {
        return a5.f64[0];
      }
    }
    uint64_t v12 = this - v6;
    uint64_t v13 = (16 * v6) | 8;
    BOOL v14 = (double *)((char *)&a3->x + v13);
    double v15 = (double *)(a2 + v13);
    do
    {
      double v16 = *v15;
      a5.f64[0] = 84.0 - *(v15 - 1);
      *(v14 - 1) = a5.f64[0];
      double *v14 = v16;
      v14 += 2;
      v15 += 2;
      --v12;
    }
    while (v12);
  }
  return a5.f64[0];
}

float64_t peridot::peridotCameraPixelsToGranger(peridot *this, unint64_t a2, const CGPoint *a3, CGPoint *a4, float64x2_t a5)
{
  if ((int)this >= 1)
  {
    if (this <= 3
      || (a2 + 16 * this > (unint64_t)a3
        ? (BOOL v5 = (unint64_t)&a3[this] > a2)
        : (BOOL v5 = 0),
          v5))
    {
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = this & 0x7FFFFFFC;
      unsigned int v7 = (CGPoint *)&a3[2];
      uint64_t v8 = (const double *)(a2 + 32);
      a5 = (float64x2_t)vdupq_n_s64(0x4055000000000000uLL);
      uint64_t v9 = this & 0xFFFFFFFC;
      do
      {
        uint64_t v10 = v8 - 4;
        float64x2x2_t v18 = vld2q_f64(v10);
        float64x2x2_t v19 = vld2q_f64(v8);
        v18.val[0] = vsubq_f64(a5, v18.val[0]);
        p_int x = &v7[-2].x;
        vst2q_f64(p_x, v18);
        v19.val[0] = vsubq_f64(a5, v19.val[0]);
        vst2q_f64(&v7->x, v19);
        v7 += 4;
        v8 += 8;
        v9 -= 4;
      }
      while (v9);
      if (v6 == this) {
        return a5.f64[0];
      }
    }
    uint64_t v12 = this - v6;
    uint64_t v13 = (16 * v6) | 8;
    BOOL v14 = (double *)((char *)&a3->x + v13);
    double v15 = (double *)(a2 + v13);
    do
    {
      double v16 = *v15;
      a5.f64[0] = 84.0 - *(v15 - 1);
      *(v14 - 1) = a5.f64[0];
      double *v14 = v16;
      v14 += 2;
      v15 += 2;
      --v12;
    }
    while (v12);
  }
  return a5.f64[0];
}

void peridot::optimizeSpotLocationsForAnchors(void *a1, int32x2_t *a2, float32x4_t *a3, int32x2_t a4)
{
  a4.i32[0] = 1161527296;
  peridot::compensateForParallax(a1, a2, 0, a3, a4);
}

float peridot::peridotTempToCelcius(peridot *this, float a2)
{
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    unsigned int v4 = peridot::peridotTempToCelcius(float)::PeridotlutTemp[v2++];
  }
  while ((float)v4 < a2);
  if (v3) {
    return (float)((float)((float)v3
  }
                         + (float)((float)(a2 - (float)v4)
                                 / (float)(int)(v4 - peridot::peridotTempToCelcius(float)::PeridotlutTemp[v3 - 1])))
                 * 5.0)
         + -15.0;
  else {
    return -15.0;
  }
}

uint64_t peridot::getThermalStateString@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v3 = [MEMORY[0x263F08AB0] processInfo];
  unint64_t v4 = [v3 thermalState];

  if (v4 > 3) {
    BOOL v5 = "Unknown";
  }
  else {
    BOOL v5 = off_2654478E8[v4];
  }
  return MEMORY[0x25A2D6010](a1, v5);
}

void sub_2590AEA60(_Unwind_Exception *a1)
{
  unint64_t v2 = v1;

  _Unwind_Resume(a1);
}

void sub_2590AEA74(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590AEB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  objc_sync_exit(v10);

  _Unwind_Resume(a1);
}

float32x2_t common::utils::rotationMatrixFromAngles(float *a1)
{
  __sincosf_stret(*a1);
  float cosval = __sincosf_stret(a1[4]).__cosval;
  __float2 v2 = __sincosf_stret(a1[2]);
  return vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v2.__sinval), LODWORD(v2.__cosval)), cosval);
}

double common::utils::rotationMatrixToAngles(common::utils *this, const simd::float3x3 *a2)
{
  float v3 = *((float *)this + 6);
  float v4 = *((float *)this + 10);
  float v7 = atan2f(v3, v4);
  float v6 = atan2f(-*((float *)this + 2), sqrtf((float)(v3 * v3) + (float)(v4 * v4)));
  atan2f(*((float *)this + 1), *(float *)this);
  return COERCE_DOUBLE(__PAIR64__(LODWORD(v6), LODWORD(v7)));
}

uint64_t common::utils::getCurrentPlatform(common::utils *this)
{
  uint64_t v1 = MGGetProductType();
  if (v1 > 2487868871)
  {
    if (v1 <= 2795618602)
    {
      if (v1 != 2487868872 && v1 != 2619317134) {
        return 0xFFFFFFFFLL;
      }
      return 2;
    }
    if (v1 != 2795618603)
    {
      if (v1 != 3241053352)
      {
        if (v1 != 2941181571) {
          return 0xFFFFFFFFLL;
        }
        return 1;
      }
      return 2;
    }
    return 3;
  }
  if (v1 > 555503453)
  {
    if (v1 != 555503454)
    {
      if (v1 == 689804742) {
        return 0;
      }
      return 0xFFFFFFFFLL;
    }
    return 2;
  }
  if (v1 == 133314240) {
    return 1;
  }
  if (v1 == 330877086) {
    return 3;
  }
  return 0xFFFFFFFFLL;
}

void common::utils::SafeSerialQueue::init(common::utils::SafeSerialQueue *this, const char *a2)
{
}

void common::utils::SafeSerialQueue::~SafeSerialQueue(id **this)
{
  if (*this)
  {
    peridot_depth_log("Safe serial queue is invalidating");
    [(*this)[1] invalidate];
    __float2 v2 = *this;
    if (*this)
    {

      MEMORY[0x25A2D62D0](v2, 0x80C40803F642BLL);
    }
    *this = 0;
    peridot_depth_log("Safe serial queue was invalidated");
  }
}

void common::utils::SafeSerialQueue::invalidate(id **this)
{
  if (*this)
  {
    peridot_depth_log("Safe serial queue is invalidating");
    [(*this)[1] invalidate];
    __float2 v2 = *this;
    if (*this)
    {

      MEMORY[0x25A2D62D0](v2, 0x80C40803F642BLL);
    }
    *this = 0;
    peridot_depth_log("Safe serial queue was invalidated");
  }
}

void common::utils::SafeSerialQueue::queueBlock(NSObject ***a1, void *a2)
{
  id v3 = a2;
  float v4 = (*a1)[1];
  BOOL v5 = **a1;
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 3221225472;
  v8[2] = ___ZN6common5utils15SafeSerialQueue10queueBlockEU13block_pointerFvvE_block_invoke;
  v8[3] = &unk_265447910;
  uint64_t v9 = v4;
  id v10 = v3;
  id v6 = v3;
  float v7 = v4;
  dispatch_async(v5, v8);
}

uint64_t ___ZN6common5utils15SafeSerialQueue10queueBlockEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return [*(id *)(a1 + 32) runBlock:*(void *)(a1 + 40)];
}

double peridot::PeridotDxpDetector::PeridotDxpDetector(peridot::PeridotDxpDetector *this)
{
  *(_WORD *)this = 257;
  *((unsigned char *)this + 2) = 0;
  *((void *)this + 1) = &unk_2707174A8;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 12) = &unk_270717448;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = &unk_270717448;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 160) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = &unk_270717448;
  *((void *)this + 26) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((unsigned char *)this + 200) = 0;
  *((void *)this + 28) = &unk_270717448;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = &unk_270717448;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((unsigned char *)this + 288) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 44) = 1;
  *((unsigned char *)this + 360) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 42) = &unk_270717688;
  *((void *)this + 43) = 0;
  double result = 0.0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  return result;
}

{
  double result;

  *(_WORD *)this = 257;
  *((unsigned char *)this + 2) = 0;
  *((void *)this + 1) = &unk_2707174A8;
  *((void *)this + 2) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 3) = 0;
  *((unsigned char *)this + 32) = 0;
  *((void *)this + 12) = &unk_270717448;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((unsigned char *)this + 120) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = &unk_270717448;
  *((void *)this + 18) = 0;
  *((void *)this + 19) = 0;
  *((unsigned char *)this + 160) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = &unk_270717448;
  *((void *)this + 26) = 0;
  *((void *)this + 23) = 0;
  *((void *)this + 24) = 0;
  *((unsigned char *)this + 200) = 0;
  *((void *)this + 28) = &unk_270717448;
  *((void *)this + 29) = 0;
  *((void *)this + 30) = 0;
  *((unsigned char *)this + 248) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 32) = 0;
  *((void *)this + 33) = &unk_270717448;
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((unsigned char *)this + 288) = 0;
  *((void *)this + 40) = 0;
  *((void *)this + 41) = 0;
  *((void *)this + 39) = 0;
  *((void *)this + 44) = 1;
  *((unsigned char *)this + 360) = 0;
  *((void *)this + 46) = 0;
  *((void *)this + 42) = &unk_270717688;
  *((void *)this + 43) = 0;
  double result = 0.0;
  *((_OWORD *)this + 37) = 0u;
  *((_OWORD *)this + 38) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  return result;
}

void peridot::PeridotDxpDetector::~PeridotDxpDetector(peridot::PeridotDxpDetector *this)
{
  __float2 v2 = (void *)*((void *)this + 75);
  if (v2)
  {
    *((void *)this + 76) = v2;
    operator delete(v2);
  }
  id v3 = (void *)*((void *)this + 72);
  if (v3)
  {
    *((void *)this + 73) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 69);
  if (v4)
  {
    *((void *)this + 70) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 66);
  if (v5)
  {
    *((void *)this + 67) = v5;
    operator delete(v5);
  }
  peridot::HDUnfoldClass::~HDUnfoldClass((peridot::PeridotDxpDetector *)((char *)this + 8));
}

{
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  __float2 v2 = (void *)*((void *)this + 75);
  if (v2)
  {
    *((void *)this + 76) = v2;
    operator delete(v2);
  }
  id v3 = (void *)*((void *)this + 72);
  if (v3)
  {
    *((void *)this + 73) = v3;
    operator delete(v3);
  }
  float v4 = (void *)*((void *)this + 69);
  if (v4)
  {
    *((void *)this + 70) = v4;
    operator delete(v4);
  }
  BOOL v5 = (void *)*((void *)this + 66);
  if (v5)
  {
    *((void *)this + 67) = v5;
    operator delete(v5);
  }
  peridot::HDUnfoldClass::~HDUnfoldClass((peridot::PeridotDxpDetector *)((char *)this + 8));
}

__n128 peridot::PeridotDxpDetector::init(uint64_t a1, __n128 *a2, int a3)
{
  *(_WORD *)a1 = a3;
  *(unsigned char *)(a1 + 2) = BYTE2(a3);
  *(_WORD *)(a1 + 392) = 257;
  *(_OWORD *)(a1 + 400) = xmmword_259120480;
  *(_OWORD *)(a1 + 416) = xmmword_259120490;
  *(_OWORD *)(a1 + 432) = xmmword_2591204A0;
  *(_OWORD *)(a1 + 448) = xmmword_2591204B0;
  *(void *)(a1 + 464) = 2;
  *(_DWORD *)(a1 + 488) = 1085276160;
  *(_OWORD *)(a1 + 472) = xmmword_2591204C0;
  *(_OWORD *)(a1 + 496) = xmmword_2591204D0;
  *(void *)(a1 + 512) = 8;
  __n128 result = a2[250];
  *(__n128 *)(a1 + 680) = result;
  return result;
}

uint64_t peridot::PeridotDxpDetector::setRunMode(uint64_t result, int a2)
{
  *(_WORD *)__n128 result = a2;
  *(unsigned char *)(result + 2) = BYTE2(a2);
  return result;
}

void peridot::Histogram::~Histogram(peridot::Histogram *this)
{
  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x25A2D62D0);
}

{
  uint64_t v2;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

void peridot::Histogram::Histogram(peridot::Histogram *this, uint64_t a2)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = a2;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = a2;
  operator new[]();
}

void peridot::Histogram::Histogram(peridot::Histogram *this, uint64_t a2, float a3)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = a2;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = a2;
  operator new[]();
}

void peridot::Histogram::Histogram(peridot::Histogram *this, const peridot::Histogram *a2)
{
  uint64_t v2 = *((void *)a2 + 2);
  *(void *)this = off_270717568;
  *((void *)this + 2) = v2;
  operator new[]();
}

{
  uint64_t v2;

  uint64_t v2 = *((void *)a2 + 2);
  *(void *)this = off_270717568;
  *((void *)this + 2) = v2;
  operator new[]();
}

void peridot::Histogram::operator=(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) != *(void *)(a1 + 16)) {
    peridot_depth_log("Trying to copy histogram of different size");
  }
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  operator new[]();
}

void *peridot::Histogram::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)a2;
  int64_t v6 = *(void *)(a2 + 8) - (void)v4;
  if (*(void *)(a1 + 16) != v6 >> 2)
  {
    peridot_depth_log("Warning!! Trying to copy histogram of different size");
    uint64_t v4 = *(const void **)a2;
    int64_t v6 = 4 * *(void *)(a1 + 16);
  }
  float v7 = *(void **)(a1 + 8);
  return memcpy(v7, v4, v6);
}

void *peridot::Histogram::copyFrom(peridot::Histogram *this, const float *__src, uint64_t a3)
{
  if (*((void *)this + 2) != a3)
  {
    peridot_depth_log("Warning!! Trying to copy histogram of different size");
    a3 = *((void *)this + 2);
  }
  BOOL v5 = (void *)*((void *)this + 1);
  size_t v6 = 4 * a3;
  return memcpy(v5, __src, v6);
}

void peridot::Histogram::copyFrom(uint64_t a1, void *a2, uint64_t a3, unint64_t a4)
{
  if (a4 + a3 >= (uint64_t)(a2[1] - *a2) >> 2)
  {
    peridot_depth_log("Warning!! Trying to copy from invalid memory");
  }
  else if (*(void *)(a1 + 16) >= a4)
  {
    memcpy(*(void **)(a1 + 8), (const void *)(*a2 + 4 * a3), 4 * a4);
  }
  else
  {
    peridot_depth_log("Warning!! Trying to copy histogram of different size");
  }
}

uint64_t peridot::Histogram::compareTo(peridot::Histogram *this, const peridot::Histogram *a2, float a3, float a4)
{
  unint64_t v4 = *((void *)this + 2);
  if (!v4) {
    return 1;
  }
  uint64_t v9 = 0;
  if (a4 > 0.0)
  {
    while (1)
    {
      float v16 = *(float *)(*((void *)this + 1) + 4 * v9);
      float v17 = *(float *)(*((void *)a2 + 1) + 4 * v9);
      if (v16 == 0.0) {
        break;
      }
      double v18 = *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff;
      if (v17 == 0.0) {
        goto LABEL_26;
      }
      float v20 = vabds_f32(v17, v16);
      float v21 = v20 / v16;
      if (*(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff < v21) {
        *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff = v21;
      }
      if (v21 > a3 && v20 > a4) {
        return 0;
      }
LABEL_21:
      if (++v9 >= v4) {
        return 1;
      }
    }
    if (v17 == 0.0) {
      goto LABEL_21;
    }
    double v18 = *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff;
LABEL_26:
    float v19 = vabds_f32(v17, v16);
    if (v18 < v19)
    {
      *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff = v19;
      peridot_depth_log("maxDiff %.10f", v19);
    }
    if (v19 > a4) {
      return 0;
    }
    unint64_t v4 = *((void *)this + 2);
    goto LABEL_21;
  }
  while (1)
  {
    float v10 = *(float *)(*((void *)this + 1) + 4 * v9);
    float v11 = *(float *)(*((void *)a2 + 1) + 4 * v9);
    if (v10 != 0.0) {
      break;
    }
    if (v11 == 0.0) {
      goto LABEL_5;
    }
    double v12 = *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff;
LABEL_10:
    float v13 = vabds_f32(v11, v10);
    if (v12 < v13)
    {
      *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff = v13;
      peridot_depth_log("maxDiff %.10f", v13);
    }
    if (v13 > a4) {
      return 0;
    }
    unint64_t v4 = *((void *)this + 2);
LABEL_5:
    if (++v9 >= v4) {
      return 1;
    }
  }
  double v12 = *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff;
  if (v11 == 0.0) {
    goto LABEL_10;
  }
  float v14 = vabds_f32(v11, v10) / v10;
  if (*(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff < v14) {
    *(double *)&peridot::Histogram::compareTo(peridot::Histogram const&,float,float)const::maxDiff = v14;
  }
  if (v14 <= a3) {
    goto LABEL_5;
  }
  return 0;
}

void peridot::Histogram::zeros(peridot::Histogram *this)
{
  uint64_t v1 = *((void *)this + 2);
  if (v1) {
    bzero(*((void **)this + 1), 4 * v1);
  }
}

uint64_t peridot::Histogram::debugPrint(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    id v3 = (const char *)a2;
  }
  else {
    id v3 = *(const char **)a2;
  }
  puts(v3);
  if (*(void *)(a1 + 16))
  {
    unint64_t v4 = 0;
    do
    {
      printf("%.15f,", *(float *)(*(void *)(a1 + 8) + 4 * v4));
      if (10 * (v4 / 0xA) + 9 == v4) {
        putchar(10);
      }
      ++v4;
    }
    while (v4 < *(void *)(a1 + 16));
  }
  return putchar(10);
}

uint64_t peridot::Histogram::pprint(peridot::Histogram *this)
{
  if (*((void *)this + 2))
  {
    unint64_t v2 = 0;
    do
    {
      printf("[%zu] %.15f, ", v2, *(float *)(*((void *)this + 1) + 4 * v2));
      if (10 * (v2 / 0xA) + 9 == v2) {
        putchar(10);
      }
      ++v2;
    }
    while (v2 < *((void *)this + 2));
  }
  return putchar(10);
}

uint64_t peridot::Histogram::print(peridot::Histogram *this)
{
  if (*((void *)this + 2))
  {
    unint64_t v2 = 0;
    do
      printf("%.15f\n", *(float *)(*((void *)this + 1) + 4 * v2++));
    while (v2 < *((void *)this + 2));
  }
  return putchar(10);
}

void peridot::RefHistogram::RefHistogram(peridot::RefHistogram *this)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 64;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 64;
  operator new[]();
}

void peridot::RefHistogram::RefHistogram(peridot::RefHistogram *this, float a2)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 64;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 64;
  operator new[]();
}

void peridot::ImgHistogram::ImgHistogram(peridot::ImgHistogram *this)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 92;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 92;
  operator new[]();
}

void peridot::ImgHistogram::ImgHistogram(peridot::ImgHistogram *this, float a2)
{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 92;
  operator new[]();
}

{
  *(void *)this = off_270717568;
  *((void *)this + 2) = 92;
  operator new[]();
}

uint64_t peridot::FullStaticHistogram::FullStaticHistogram(uint64_t this)
{
  *(void *)(this + 1472) = 0;
  return this;
}

{
  *(void *)(this + 1472) = 0;
  return this;
}

uint64_t peridot::FullStaticHistogram::FullStaticHistogram(uint64_t this, float a2)
{
  *(void *)(this + 1472) = (unint64_t)a2;
  return this;
}

{
  *(void *)(this + 1472) = (unint64_t)a2;
  return this;
}

void peridot::FullStaticHistogram::zeros(peridot::FullStaticHistogram *this)
{
  uint64_t v1 = *((void *)this + 184);
  if (v1) {
    bzero(this, 4 * v1);
  }
}

void peridot::FullStaticHistogram::zerosFullCapacity(peridot::FullStaticHistogram *this)
{
  int __pattern4 = 0;
  memset_pattern4(this, &__pattern4, 0x5C0uLL);
}

void *peridot::FullStaticHistogram::copyFrom(peridot::FullStaticHistogram *this, const peridot::Histogram *a2)
{
  unint64_t v4 = *((void *)a2 + 2);
  if (v4 >= 0x171)
  {
    peridot_depth_log("Trying to copy histogram of different size");
    unint64_t v4 = *((void *)a2 + 2);
  }
  *((void *)this + 184) = v4;
  BOOL v5 = (const void *)*((void *)a2 + 1);
  return memcpy(this, v5, 4 * v4);
}

void peridot::PeridotPreProcessOutput::PreProcessorOutSpot::~PreProcessorOutSpot(peridot::PeridotPreProcessOutput::PreProcessorOutSpot *this)
{
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy(this);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 25);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 50);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 75);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 100);
  *((unsigned char *)this + 1000) = 0;
  *((_OWORD *)this + 63) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 800));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 600));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 400));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 200));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut(this);
}

{
  uint64_t vars8;

  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy(this);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 25);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 50);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 75);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 100);
  *((unsigned char *)this + 1000) = 0;
  *((_OWORD *)this + 63) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 800));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 600));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 400));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 200));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut(this);
}

void *peridot::PeridotPreProcessOutput::PreProcessorOut::destroy(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = *this;
  if (this[1] != *this)
  {
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(v2 + 8 * v3);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
      }
      uint64_t v5 = *(void *)(v1[3] + 8 * v3);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
      }
      uint64_t v6 = *(void *)(v1[6] + 8 * v3);
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      }
      uint64_t v7 = *(void *)(v1[15] + 8 * v3);
      if (v7) {
        (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
      }
      uint64_t v8 = *(void *)(v1[18] + 8 * v3);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      this = *(void **)(v1[21] + 8 * v3);
      if (this) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v3;
      uint64_t v2 = *v1;
    }
    while (v3 < (uint64_t)(v1[1] - *v1) >> 3);
  }
  *((_DWORD *)v1 + 48) = 0;
  return this;
}

void peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut(peridot::PeridotPreProcessOutput::PreProcessorOut *this)
{
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  unint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6) {
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 6);
  if (v7)
  {
    *((void *)this + 7) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 3);
  if (v8)
  {
    *((void *)this + 4) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v9;
    operator delete(v9);
  }
}

void peridot::PeridotPreProcessOutput::PreProcessorOutSpot::init(peridot::PeridotPreProcessOutput::PreProcessorOutSpot *this, unint64_t a2)
{
  peridot::PeridotPreProcessOutput::PreProcessorOut::init(this, a2);
  peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 200), a2);
  peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 400), a2);
  peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 600), 1uLL);
  peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 800), 1uLL);
}

void *peridot::PeridotPreProcessOutput::PreProcessorOutSpot::destroy(peridot::PeridotPreProcessOutput::PreProcessorOutSpot *this)
{
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy(this);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 25);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 50);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 75);
  return peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 100);
}

double peridot::PeridotPreProcessOutput::init(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a1 + 14352) = 1;
  *(void *)&double result = 1;
  *(_OWORD *)(a1 + 14336) = xmmword_2591204E0;
  *(unsigned char *)(a1 + 14353) = *(unsigned char *)(a2 + 5);
  return result;
}

uint64_t peridot::PeridotPreProcessOutput::configure(uint64_t result, uint64_t a2)
{
  *(void *)(result + 14344) = 4;
  *(unsigned char *)(result + 14352) = 1;
  *(unsigned char *)(result + 14353) = *(unsigned char *)(a2 + 5);
  return result;
}

peridot::PeridotEstimatorOut *peridot::PeridotEstimatorOut::PeridotEstimatorOut(peridot::PeridotEstimatorOut *this, unint64_t a2)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 4) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
  *((void *)this + 9) = 0;
  *((void *)this + 10) = 0;
  *((void *)this + 12) = 0;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 16) = 0;
  *((void *)this + 17) = 0;
  *((void *)this + 18) = 0;
  *((void *)this + 20) = 0;
  *((void *)this + 21) = 0;
  *((void *)this + 22) = 0;
  peridot::PeridotEstimatorOut::init(this, a2);
  return this;
}

void sub_2590B0BE4(_Unwind_Exception *exception_object)
{
  uint64_t v7 = v2;
  uint64_t v9 = *v7;
  if (*v7)
  {
    *(void *)(v1 + 168) = v9;
    operator delete(v9);
    float v10 = *v6;
    if (!*v6)
    {
LABEL_3:
      float v11 = *v5;
      if (!*v5) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else
  {
    float v10 = *v6;
    if (!*v6) {
      goto LABEL_3;
    }
  }
  *(void *)(v1 + 136) = v10;
  operator delete(v10);
  float v11 = *v5;
  if (!*v5)
  {
LABEL_4:
    double v12 = *v4;
    if (!*v4) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  *(void *)(v1 + 104) = v11;
  operator delete(v11);
  double v12 = *v4;
  if (!*v4)
  {
LABEL_5:
    float v13 = *v3;
    if (!*v3) {
      goto LABEL_6;
    }
    goto LABEL_12;
  }
LABEL_11:
  *(void *)(v1 + 72) = v12;
  operator delete(v12);
  float v13 = *v3;
  if (!*v3)
  {
LABEL_6:
    float v14 = *(void **)v1;
    if (!*(void *)v1) {
      goto LABEL_7;
    }
    goto LABEL_13;
  }
LABEL_12:
  *(void *)(v1 + 40) = v13;
  operator delete(v13);
  float v14 = *(void **)v1;
  if (!*(void *)v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_13:
  *(void *)(v1 + 8) = v14;
  operator delete(v14);
  _Unwind_Resume(exception_object);
}

void peridot::PeridotEstimatorOut::init(peridot::PeridotEstimatorOut *this, unint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t __sz = 8 * a2;
  unint64_t v20 = a2 >> 61;
  do
  {
    uint64_t v4 = (char *)this + 32 * v3;
    uint64_t v5 = *(unsigned char **)v4;
    if (a2 <= (uint64_t)(*((void *)v4 + 2) - *(void *)v4) >> 3) {
      goto LABEL_15;
    }
    if (v20) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v6 = (unsigned char *)*((void *)v4 + 1);
    uint64_t v7 = (char *)operator new(__sz);
    uint64_t v8 = v6 - v5;
    uint64_t v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
    float v10 = v9;
    if (v6 != v5)
    {
      unint64_t v11 = v6 - 8 - v5;
      if (v11 < 0x58)
      {
        float v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
        do
        {
LABEL_12:
          uint64_t v18 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v10 - 1) = v18;
          v10 -= 8;
        }
        while (v6 != v5);
        goto LABEL_13;
      }
      float v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFF8];
      if (v6 - v7 - (v8 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
        goto LABEL_12;
      }
      uint64_t v12 = v8 >> 3;
      uint64_t v13 = (v11 >> 3) + 1;
      float v14 = &v7[8 * v12 - 16];
      double v15 = (long long *)(v6 - 16);
      uint64_t v16 = v13 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v17 = *v15;
        *((_OWORD *)v14 - 1) = *(v15 - 1);
        *(_OWORD *)float v14 = v17;
        v14 -= 32;
        v15 -= 2;
        v16 -= 4;
      }
      while (v16);
      float v10 = &v9[-8 * (v13 & 0x3FFFFFFFFFFFFFFCLL)];
      v6 -= 8 * (v13 & 0x3FFFFFFFFFFFFFFCLL);
      if (v13 != (v13 & 0x3FFFFFFFFFFFFFFCLL)) {
        goto LABEL_12;
      }
    }
LABEL_13:
    *(void *)uint64_t v4 = v10;
    *((void *)v4 + 1) = v9;
    *((void *)v4 + 2) = &v7[8 * a2];
    if (v5) {
      operator delete(v5);
    }
LABEL_15:
    uint64_t v22 = v3;
    if (a2) {
      operator new();
    }
    ++v3;
  }
  while (v22 != 2);
  *((_DWORD *)this + 48) = 0;
}

void sub_2590B12A0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

void peridot::PeridotEstimatorOut::~PeridotEstimatorOut(peridot::PeridotEstimatorOut *this)
{
  peridot::PeridotEstimatorOut::destroy(this);
  uint64_t v2 = (void *)*((void *)this + 20);
  if (v2)
  {
    *((void *)this + 21) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 16);
  if (v3)
  {
    *((void *)this + 17) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 12);
  if (v4)
  {
    *((void *)this + 13) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 8);
  if (v5)
  {
    *((void *)this + 9) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 4);
  if (v6)
  {
    *((void *)this + 5) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)this;
  if (*(void *)this)
  {
    *((void *)this + 1) = v7;
    operator delete(v7);
  }
}

void *peridot::PeridotEstimatorOut::destroy(void *this)
{
  uint64_t v1 = this;
  uint64_t v2 = (void **)*this;
  uint64_t v3 = (void **)this[1];
  if ((void **)*this != v3)
  {
    do
    {
      this = *v2;
      if (*v2) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v2;
    }
    while (v2 != v3);
    uint64_t v2 = (void **)*v1;
  }
  v1[1] = v2;
  uint64_t v4 = (void **)v1[12];
  uint64_t v5 = (void **)v1[13];
  if (v4 != v5)
  {
    do
    {
      this = *v4;
      if (*v4) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v4;
    }
    while (v4 != v5);
    uint64_t v4 = (void **)v1[12];
  }
  v1[13] = v4;
  uint64_t v6 = (void **)v1[4];
  uint64_t v7 = (void **)v1[5];
  if (v6 != v7)
  {
    do
    {
      this = *v6;
      if (*v6) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v6;
    }
    while (v6 != v7);
    uint64_t v6 = (void **)v1[4];
  }
  v1[5] = v6;
  uint64_t v8 = (void **)v1[16];
  uint64_t v9 = (void **)v1[17];
  if (v8 != v9)
  {
    do
    {
      this = *v8;
      if (*v8) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v8;
    }
    while (v8 != v9);
    uint64_t v8 = (void **)v1[16];
  }
  v1[17] = v8;
  float v10 = (void **)v1[8];
  unint64_t v11 = (void **)v1[9];
  if (v10 != v11)
  {
    do
    {
      this = *v10;
      if (*v10) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v10;
    }
    while (v10 != v11);
    float v10 = (void **)v1[8];
  }
  v1[9] = v10;
  uint64_t v12 = (void **)v1[20];
  uint64_t v13 = (void **)v1[21];
  if (v12 != v13)
  {
    do
    {
      this = *v12;
      if (*v12) {
        this = (void *)(*(uint64_t (**)(void *))(*this + 8))(this);
      }
      ++v12;
    }
    while (v12 != v13);
    uint64_t v12 = (void **)v1[20];
  }
  v1[21] = v12;
  return this;
}

_OWORD *peridot::PeridotDetectorOutput::DetectorOutSpot::init(peridot::PeridotDetectorOutput::DetectorOutSpot *this)
{
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 568) = 0u;
  *((unsigned char *)this + 719) = 0;
  *(_DWORD *)((char *)this + 715) = 0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_DWORD *)this + 20) = 0;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  uint64_t v1 = (_OWORD *)((char *)this + 240);
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 392) = 0u;
  *(_OWORD *)((char *)this + 408) = 0u;
  *(_OWORD *)((char *)this + 424) = 0u;
  *(_OWORD *)((char *)this + 440) = 0u;
  *(_OWORD *)((char *)this + 456) = 0u;
  *(_OWORD *)((char *)this + 235) = 0u;
  double result = (_OWORD *)((char *)this + 235);
  *(_OWORD *)((char *)result + 73) = 0u;
  result[3] = 0u;
  result[4] = 0u;
  *(_OWORD *)((char *)v1 + 235) = 0u;
  uint64_t v1 = (_OWORD *)((char *)v1 + 235);
  result[1] = 0u;
  result[2] = 0u;
  *(_OWORD *)((char *)v1 + 73) = 0u;
  v1[3] = 0u;
  v1[4] = 0u;
  v1[1] = 0u;
  v1[2] = 0u;
  return result;
}

double peridot::PeridotDetectorOutput::DetectorTarget::init(peridot::PeridotDetectorOutput::DetectorTarget *this)
{
  *((_DWORD *)this + 20) = 0;
  double result = 0.0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_DWORD *)((char *)this + 235) = 0;
  *((unsigned char *)this + 239) = 0;
  return result;
}

int *peridot::OutputFlags::setBitsValue(int *this, char a2, char a3, int a4)
{
  *this = *this & ((((-1 << a3) + 1) << a2) - 1) | (a4 << a2);
  return this;
}

uint64_t peridot::OutputFlags::getBitsValue(peridot::OutputFlags *this, char a2, char a3)
{
  return (*(_DWORD *)this >> a2) & ~(-1 << a3);
}

_DWORD *peridot::OutputFlags::setBit(_DWORD *this, char a2)
{
  *this |= 1 << a2;
  return this;
}

_DWORD *peridot::OutputFlags::resetBit(_DWORD *this, char a2)
{
  *this &= (-1 << a2) - 1;
  return this;
}

uint64_t peridot::OutputFlags::getBit(peridot::OutputFlags *this, char a2)
{
  return *(_DWORD *)this & (1 << a2);
}

uint64_t peridot::OutputFlags::getHighStray(peridot::OutputFlags *this)
{
  return *(_DWORD *)this & 0x400000;
}

int *peridot::OutputFlags::setHighStray(int *this, int a2)
{
  if (a2) {
    *this = a2 | 0x400000;
  }
  return this;
}

_DWORD *peridot::OutputFlags::setHighStray(_DWORD *this)
{
  *this |= 0x400000u;
  return this;
}

void sub_2590B1A44(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void nvmGrnagerStruct::nvmGrnagerStruct(nvmGrnagerStruct *this)
{
  *(void *)this = 0;
  *((unsigned char *)this + 16) = 0;
}

{
  *(void *)this = 0;
  *((unsigned char *)this + 16) = 0;
}

void nvmGrnagerStruct::initNvmGrnagerStruct(nvmGrnagerStruct *this, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  *((void *)this + 1) = a3;
  operator new[]();
}

void nvmGrnagerStruct::nvmGrnagerStruct(nvmGrnagerStruct *this, CFDataRef theData)
{
  *(void *)this = 0;
  *((unsigned char *)this + 16) = 0;
  if (theData)
  {
    *((void *)this + 1) = CFDataGetLength(theData);
    operator new[]();
  }
  peridot_depth_log_error("NULL cfGrangerNVMBuffer detected");
}

{
  *(void *)this = 0;
  *((unsigned char *)this + 16) = 0;
  if (theData)
  {
    *((void *)this + 1) = CFDataGetLength(theData);
    operator new[]();
  }
  peridot_depth_log_error("NULL cfGrangerNVMBuffer detected");
}

void nvmGrnagerStruct::~nvmGrnagerStruct(nvmGrnagerStruct *this)
{
  uint64_t v1 = *(void *)this;
  if (v1) {
    MEMORY[0x25A2D62A0](v1, 0x1000C8077774924);
  }
}

{
  uint64_t v1;

  uint64_t v1 = *(void *)this;
  if (v1) {
    MEMORY[0x25A2D62A0](v1, 0x1000C8077774924);
  }
}

uint64_t nvmToFDR(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  CFDataRef v10 = v9;
  CFDataRef v11 = (const __CFData *)v4;
  __dst[3904] = *MEMORY[0x263EF8340];
  bzero(v5, 0x256C4uLL);
  if (!v10)
  {
    peridot_depth_log_error("null quark buffer");
    return 0;
  }
  if (!v11)
  {
    peridot_depth_log_error("null granger buffer");
    return 0;
  }
  v12.length = CFDataGetLength(v11);
  *((_DWORD *)v6 + 29903) = 100;
  *((_WORD *)v6 + 59808) = v12.length;
  if (LOWORD(v12.length) <= 0x380uLL)
  {
    v12.location = 0;
    CFDataGetBytes(v11, v12, (UInt8 *)v6 + 119618);
  }
  v13.length = CFDataGetLength(v10);
  *((_WORD *)v6 + 60257) = v13.length;
  if (LOWORD(v13.length) <= 0x8000uLL)
  {
    v13.location = 0;
    CFDataGetBytes(v10, v13, (UInt8 *)v6 + 120516);
    LOWORD(v13.length) = *((_WORD *)v6 + 60257);
  }
  float v14 = &v6[-LOWORD(v13.length)];
  int v15 = v14[154820];
  char v38 = v14[154820];
  int v16 = v14[154792];
  char v40 = v14[154047];
  char v17 = v14[154052];
  char v39 = v16;
  char v41 = v17;
  char v42 = v6[120433] & 0xF;
  if (v16 == 2)
  {
    v18.i64[0] = *(void *)(v14 + 154777);
    v18.i32[2] = *(_DWORD *)(v14 + 154785);
    v18.i32[3] = *(_DWORD *)(v14 + 154766);
    int32x4_t v19 = (int32x4_t)vrev32q_s8(v18);
    *(void *)&long long v20 = vrev64q_s32(v19).u64[0];
    *((void *)&v20 + 1) = v19.i64[1];
    *((_OWORD *)v6 + 1365) = v20;
    if (v15 != 5) {
      goto LABEL_9;
    }
  }
  else
  {
    peridot_depth_log_error("");
    if (v15 != 5)
    {
LABEL_9:
      peridot_depth_log_error("");
      __dst[0] = 0;
      LOBYTE(__dst[2]) = 0;
      __dst[1] = CFDataGetLength(v11);
      operator new[]();
    }
  }
  float v21 = &v6[-*((unsigned __int16 *)v6 + 60257)];
  memcpy(__dst, v21 + 154820, 0x7A00uLL);
  if (v16 == 1)
  {
    memcpy(v43, v21 + 154792, sizeof(v43));
    size_t v26 = strlen(v8);
    if (v26 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v28 = v26;
    if (v26 >= 0x17)
    {
      uint64_t v32 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17) {
        uint64_t v32 = v26 | 7;
      }
      uint64_t v33 = v32 + 1;
      p_p = operator new(v32 + 1);
      size_t v36 = v28;
      unint64_t v37 = v33 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v37) = v26;
      p_p = &__p;
      if (!v26)
      {
LABEL_33:
        *((unsigned char *)p_p + v28) = 0;
        extractFromCalsAndComp<CALS_Calibration_ver005,COMP_ver001,PeridotAFDR>((uint64_t)__dst, (uint64_t)v43, (uint64_t)&__p, v27);
      }
    }
    memcpy(p_p, v8, v28);
    goto LABEL_33;
  }
  if (v16 == 2)
  {
    memcpy(v44, v21 + 154443, sizeof(v44));
    size_t v22 = strlen(v8);
    if (v22 > 0x7FFFFFFFFFFFFFF7) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v24 = v22;
    if (v22 >= 0x17)
    {
      uint64_t v30 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v22 | 7) != 0x17) {
        uint64_t v30 = v22 | 7;
      }
      uint64_t v31 = v30 + 1;
      unsigned __int8 v25 = operator new(v30 + 1);
      size_t v36 = v24;
      unint64_t v37 = v31 | 0x8000000000000000;
      __p = v25;
    }
    else
    {
      HIBYTE(v37) = v22;
      unsigned __int8 v25 = &__p;
      if (!v22)
      {
LABEL_28:
        *((unsigned char *)v25 + v24) = 0;
        extractFromCalsAndComp<CALS_Calibration_ver005,COMP_ver002,PeridotAFDR>((uint64_t)__dst, (uint64_t)v44, (uint64_t)&__p, v23);
      }
    }
    memcpy(v25, v8, v24);
    goto LABEL_28;
  }
  peridot_depth_log_error("unknown comp buffer version in NVM (%d)");
  return 0;
}

void sub_2590B2BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void extractFromCalsAndComp<CALS_Calibration_ver005,COMP_ver002,PeridotAFDR>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v7 = (_DWORD *)v5;
  uint64_t v8 = (_WORD *)v4;
  uint64_t v9 = v5 + 17584;
  *(_DWORD *)uint64_t v5 = 102;
  *(_OWORD *)(v5 + 4) = *(_OWORD *)(v4 + 5);
  *(_WORD *)(v5 + 20) = *(_WORD *)(v4 + 21);
  if (*v10 < 2u) {
    goto LABEL_43;
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v4 + 23);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(v4 + 39);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(v4 + 55);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)(v4 + 71);
  double v11 = *(double *)(v4 + 87);
  *(double *)(v5 + 88) = v11;
  *(_DWORD *)(v5 + 96) = *(_DWORD *)(v4 + 95);
  uint64_t v12 = v5 - *(unsigned __int16 *)(v5 + 120514);
  unsigned int v13 = *(unsigned __int8 *)(v12 + 153514);
  unsigned int v14 = *(unsigned char *)(v12 + 153308) & 7;
  *(_DWORD *)(v5 + 100) = 0;
  switch(v14)
  {
    case 1u:
      LODWORD(v11) = 7.0;
      break;
    case 2u:
      LODWORD(v11) = 1090099610;
      break;
    case 3u:
      double v11 = (double)v13 * 0.05 + 4.75;
      *(float *)&double v11 = v11;
      break;
    default:
      peridot_depth_log_error("Reading quark NVM - unidentified logic mask id: %f", (double)v14);
      LODWORD(v11) = v7[25];
      if (*(float *)&v11 == 0.0) {
        __assert_rtn("extractFromCalsAndComp", "nvmUtils.mm", 905, "afdrDest.jlnl.Tx_VDDLAS != 0");
      }
      goto LABEL_10;
  }
  *(_DWORD *)(v5 + 100) = LODWORD(v11);
LABEL_10:
  LOWORD(v11) = v8[594];
  double v15 = (double)*(unint64_t *)&v11 * 0.00000000390625;
  *(float *)&unint64_t v6 = v15;
  if (fabs(v15) == INFINITY) {
    *(float *)&unint64_t v6 = 1.0;
  }
  v7[2824] = v6;
  LOWORD(v6) = v8[595];
  double v17 = (double)v6 * 0.00000000390625;
  double v16 = fabs(v17);
  *(float *)&double v17 = v17;
  if (v16 == INFINITY) {
    *(float *)&double v17 = 1.0;
  }
  v7[2829] = LODWORD(v17);
  LOWORD(v17) = v8[596];
  double v19 = (double)*(unint64_t *)&v17 * 0.00000000390625;
  double v18 = fabs(v19);
  *(float *)&double v19 = v19;
  if (v18 == INFINITY) {
    *(float *)&double v19 = 1.0;
  }
  v7[2834] = LODWORD(v19);
  LOWORD(v19) = v8[597];
  double v21 = (double)*(unint64_t *)&v19 * 0.00000000390625;
  double v20 = fabs(v21);
  *(float *)&double v21 = v21;
  if (v20 == INFINITY) {
    *(float *)&double v21 = 1.0;
  }
  v7[2839] = LODWORD(v21);
  LOWORD(v21) = v8[598];
  double v23 = (double)*(unint64_t *)&v21 * 0.00000000390625;
  double v22 = fabs(v23);
  *(float *)&double v23 = v23;
  if (v22 == INFINITY) {
    *(float *)&double v23 = 1.0;
  }
  v7[2844] = LODWORD(v23);
  LOWORD(v23) = v8[599];
  double v25 = (double)*(unint64_t *)&v23 * 0.00000000390625;
  double v24 = fabs(v25);
  *(float *)&double v25 = v25;
  if (v24 == INFINITY) {
    *(float *)&double v25 = 1.0;
  }
  v7[2849] = LODWORD(v25);
  LOWORD(v25) = v8[600];
  double v27 = (double)*(unint64_t *)&v25 * 0.00000000390625;
  double v26 = fabs(v27);
  *(float *)&double v27 = v27;
  if (v26 == INFINITY) {
    *(float *)&double v27 = 1.0;
  }
  v7[2854] = LODWORD(v27);
  LOWORD(v27) = v8[601];
  double v29 = (double)*(unint64_t *)&v27 * 0.00000000390625;
  double v28 = fabs(v29);
  *(float *)&double v29 = v29;
  if (v28 == INFINITY) {
    *(float *)&double v29 = 1.0;
  }
  v7[2859] = LODWORD(v29);
  LOWORD(v29) = v8[2170];
  double v31 = (double)*(unint64_t *)&v29 * 0.00000000390625;
  double v30 = fabs(v31);
  *(float *)&double v31 = v31;
  if (v30 == INFINITY) {
    *(float *)&double v31 = 1.0;
  }
  *(_DWORD *)(v9 + 16) = LODWORD(v31);
  LOWORD(v31) = v8[2171];
  double v33 = (double)*(unint64_t *)&v31 * 0.00000000390625;
  double v32 = fabs(v33);
  *(float *)&double v33 = v33;
  if (v32 == INFINITY) {
    *(float *)&double v33 = 1.0;
  }
  *(_DWORD *)(v9 + 36) = LODWORD(v33);
  LOWORD(v33) = v8[2172];
  double v35 = (double)*(unint64_t *)&v33 * 0.00000000390625;
  double v34 = fabs(v35);
  *(float *)&double v35 = v35;
  if (v34 == INFINITY) {
    *(float *)&double v35 = 1.0;
  }
  *(_DWORD *)(v9 + 56) = LODWORD(v35);
  LOWORD(v35) = v8[2173];
  double v37 = (double)*(unint64_t *)&v35 * 0.00000000390625;
  double v36 = fabs(v37);
  *(float *)&double v37 = v37;
  if (v36 == INFINITY) {
    *(float *)&double v37 = 1.0;
  }
  *(_DWORD *)(v9 + 76) = LODWORD(v37);
  LOWORD(v37) = v8[2174];
  double v39 = (double)*(unint64_t *)&v37 * 0.00000000390625;
  double v38 = fabs(v39);
  *(float *)&double v39 = v39;
  if (v38 == INFINITY) {
    *(float *)&double v39 = 1.0;
  }
  *(_DWORD *)(v9 + 96) = LODWORD(v39);
  LOWORD(v39) = v8[2175];
  double v41 = (double)*(unint64_t *)&v39 * 0.00000000390625;
  double v40 = fabs(v41);
  *(float *)&double v41 = v41;
  if (v40 == INFINITY) {
    *(float *)&double v41 = 1.0;
  }
  *(_DWORD *)(v9 + 116) = LODWORD(v41);
  LOWORD(v41) = v8[2176];
  double v43 = (double)*(unint64_t *)&v41 * 0.00000000390625;
  double v42 = fabs(v43);
  *(float *)&double v43 = v43;
  if (v42 == INFINITY) {
    *(float *)&double v43 = 1.0;
  }
  *(_DWORD *)(v9 + 136) = LODWORD(v43);
  LOWORD(v43) = v8[2177];
  double v44 = (double)*(unint64_t *)&v43 * 0.00000000390625;
  double v45 = fabs(v44);
  float v46 = v44;
  if (v45 == INFINITY) {
    float v46 = 1.0;
  }
  *(float *)(v9 + 156) = v46;
LABEL_43:
  v7[2307] = 101;
  operator new[]();
}

void sub_2590BA4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p)
{
  if (!*v53) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v53);
  _Unwind_Resume(exception_object);
}

void extractFromCalsAndComp<CALS_Calibration_ver005,COMP_ver001,PeridotAFDR>(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v7 = (_DWORD *)v5;
  uint64_t v8 = (_WORD *)v4;
  uint64_t v9 = v5 + 17584;
  *(_DWORD *)uint64_t v5 = 102;
  *(_OWORD *)(v5 + 4) = *(_OWORD *)(v4 + 5);
  *(_WORD *)(v5 + 20) = *(_WORD *)(v4 + 21);
  if (*v10 < 2u) {
    goto LABEL_43;
  }
  *(_OWORD *)(v5 + 24) = *(_OWORD *)(v4 + 23);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)(v4 + 39);
  *(_OWORD *)(v5 + 56) = *(_OWORD *)(v4 + 55);
  *(_OWORD *)(v5 + 72) = *(_OWORD *)(v4 + 71);
  double v11 = *(double *)(v4 + 87);
  *(double *)(v5 + 88) = v11;
  *(_DWORD *)(v5 + 96) = *(_DWORD *)(v4 + 95);
  uint64_t v12 = v5 - *(unsigned __int16 *)(v5 + 120514);
  unsigned int v13 = *(unsigned __int8 *)(v12 + 153514);
  unsigned int v14 = *(unsigned char *)(v12 + 153308) & 7;
  *(_DWORD *)(v5 + 100) = 0;
  switch(v14)
  {
    case 1u:
      LODWORD(v11) = 7.0;
      break;
    case 2u:
      LODWORD(v11) = 1090099610;
      break;
    case 3u:
      double v11 = (double)v13 * 0.05 + 4.75;
      *(float *)&double v11 = v11;
      break;
    default:
      peridot_depth_log_error("Reading quark NVM - unidentified logic mask id: %f", (double)v14);
      LODWORD(v11) = v7[25];
      if (*(float *)&v11 == 0.0) {
        __assert_rtn("extractFromCalsAndComp", "nvmUtils.mm", 905, "afdrDest.jlnl.Tx_VDDLAS != 0");
      }
      goto LABEL_10;
  }
  *(_DWORD *)(v5 + 100) = LODWORD(v11);
LABEL_10:
  LOWORD(v11) = v8[594];
  double v15 = (double)*(unint64_t *)&v11 * 0.00000000390625;
  *(float *)&unint64_t v6 = v15;
  if (fabs(v15) == INFINITY) {
    *(float *)&unint64_t v6 = 1.0;
  }
  v7[2824] = v6;
  LOWORD(v6) = v8[595];
  double v17 = (double)v6 * 0.00000000390625;
  double v16 = fabs(v17);
  *(float *)&double v17 = v17;
  if (v16 == INFINITY) {
    *(float *)&double v17 = 1.0;
  }
  v7[2829] = LODWORD(v17);
  LOWORD(v17) = v8[596];
  double v19 = (double)*(unint64_t *)&v17 * 0.00000000390625;
  double v18 = fabs(v19);
  *(float *)&double v19 = v19;
  if (v18 == INFINITY) {
    *(float *)&double v19 = 1.0;
  }
  v7[2834] = LODWORD(v19);
  LOWORD(v19) = v8[597];
  double v21 = (double)*(unint64_t *)&v19 * 0.00000000390625;
  double v20 = fabs(v21);
  *(float *)&double v21 = v21;
  if (v20 == INFINITY) {
    *(float *)&double v21 = 1.0;
  }
  v7[2839] = LODWORD(v21);
  LOWORD(v21) = v8[598];
  double v23 = (double)*(unint64_t *)&v21 * 0.00000000390625;
  double v22 = fabs(v23);
  *(float *)&double v23 = v23;
  if (v22 == INFINITY) {
    *(float *)&double v23 = 1.0;
  }
  v7[2844] = LODWORD(v23);
  LOWORD(v23) = v8[599];
  double v25 = (double)*(unint64_t *)&v23 * 0.00000000390625;
  double v24 = fabs(v25);
  *(float *)&double v25 = v25;
  if (v24 == INFINITY) {
    *(float *)&double v25 = 1.0;
  }
  v7[2849] = LODWORD(v25);
  LOWORD(v25) = v8[600];
  double v27 = (double)*(unint64_t *)&v25 * 0.00000000390625;
  double v26 = fabs(v27);
  *(float *)&double v27 = v27;
  if (v26 == INFINITY) {
    *(float *)&double v27 = 1.0;
  }
  v7[2854] = LODWORD(v27);
  LOWORD(v27) = v8[601];
  double v29 = (double)*(unint64_t *)&v27 * 0.00000000390625;
  double v28 = fabs(v29);
  *(float *)&double v29 = v29;
  if (v28 == INFINITY) {
    *(float *)&double v29 = 1.0;
  }
  v7[2859] = LODWORD(v29);
  LOWORD(v29) = v8[2170];
  double v31 = (double)*(unint64_t *)&v29 * 0.00000000390625;
  double v30 = fabs(v31);
  *(float *)&double v31 = v31;
  if (v30 == INFINITY) {
    *(float *)&double v31 = 1.0;
  }
  *(_DWORD *)(v9 + 16) = LODWORD(v31);
  LOWORD(v31) = v8[2171];
  double v33 = (double)*(unint64_t *)&v31 * 0.00000000390625;
  double v32 = fabs(v33);
  *(float *)&double v33 = v33;
  if (v32 == INFINITY) {
    *(float *)&double v33 = 1.0;
  }
  *(_DWORD *)(v9 + 36) = LODWORD(v33);
  LOWORD(v33) = v8[2172];
  double v35 = (double)*(unint64_t *)&v33 * 0.00000000390625;
  double v34 = fabs(v35);
  *(float *)&double v35 = v35;
  if (v34 == INFINITY) {
    *(float *)&double v35 = 1.0;
  }
  *(_DWORD *)(v9 + 56) = LODWORD(v35);
  LOWORD(v35) = v8[2173];
  double v37 = (double)*(unint64_t *)&v35 * 0.00000000390625;
  double v36 = fabs(v37);
  *(float *)&double v37 = v37;
  if (v36 == INFINITY) {
    *(float *)&double v37 = 1.0;
  }
  *(_DWORD *)(v9 + 76) = LODWORD(v37);
  LOWORD(v37) = v8[2174];
  double v39 = (double)*(unint64_t *)&v37 * 0.00000000390625;
  double v38 = fabs(v39);
  *(float *)&double v39 = v39;
  if (v38 == INFINITY) {
    *(float *)&double v39 = 1.0;
  }
  *(_DWORD *)(v9 + 96) = LODWORD(v39);
  LOWORD(v39) = v8[2175];
  double v41 = (double)*(unint64_t *)&v39 * 0.00000000390625;
  double v40 = fabs(v41);
  *(float *)&double v41 = v41;
  if (v40 == INFINITY) {
    *(float *)&double v41 = 1.0;
  }
  *(_DWORD *)(v9 + 116) = LODWORD(v41);
  LOWORD(v41) = v8[2176];
  double v43 = (double)*(unint64_t *)&v41 * 0.00000000390625;
  double v42 = fabs(v43);
  *(float *)&double v43 = v43;
  if (v42 == INFINITY) {
    *(float *)&double v43 = 1.0;
  }
  *(_DWORD *)(v9 + 136) = LODWORD(v43);
  LOWORD(v43) = v8[2177];
  double v44 = (double)*(unint64_t *)&v43 * 0.00000000390625;
  double v45 = fabs(v44);
  float v46 = v44;
  if (v45 == INFINITY) {
    float v46 = 1.0;
  }
  *(float *)(v9 + 156) = v46;
LABEL_43:
  v7[2307] = 101;
  operator new[]();
}

void sub_2590C1D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p)
{
  if (!*v54) {
    _Unwind_Resume(exception_object);
  }
  operator delete(*v54);
  _Unwind_Resume(exception_object);
}

void unpackPacked7(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = a1;
  uint64_t v65 = *MEMORY[0x263EF8340];
  *(void *)a1 = 0;
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  uint64_t v3 = (char *)operator new(0x1E300uLL);
  *(void *)uint64_t v2 = v3;
  uint64_t v4 = v3 + 123648;
  *((void *)v2 + 2) = v3 + 123648;
  bzero(v3, 0x1E300uLL);
  int v5 = 0;
  *((void *)v2 + 1) = v3;
  unint64_t v6 = v3;
  int v54 = 7;
  uint8x8_t v52 = v2;
  while (2)
  {
    uint64_t v7 = 0;
    int v8 = 0;
    BOOL v63 = 0;
    memset(v64, 32, 7);
    int v9 = 7;
    uint64_t v10 = 6;
    uint64_t v62 = 0;
    while (1)
    {
      char v11 = *(unsigned char *)(a2 + v54 + ~v10);
      int v12 = v11;
      unint64_t v13 = 0x3130303030303030;
      if ((v11 & 1) == 0) {
        unint64_t v13 = 0x3030303030303030;
      }
      if ((*(unsigned char *)(a2 + v54 + ~v10) & 2) != 0) {
        v13 |= 0x31000000000000uLL;
      }
      if ((*(unsigned char *)(a2 + v54 + ~v10) & 4) != 0) {
        v13 |= 0x310000000000uLL;
      }
      if ((*(unsigned char *)(a2 + v54 + ~v10) & 8) != 0) {
        v13 |= 0x3100000000uLL;
      }
      if ((*(unsigned char *)(a2 + v54 + ~v10) & 0x10) != 0) {
        unint64_t v13 = v13 & 0xFFFFFFFF00FFFFFFLL | 0x31000000;
      }
      if ((*(unsigned char *)(a2 + v54 + ~v10) & 0x20) != 0) {
        unint64_t v13 = v13 & 0xFFFFFFFFFF00FFFFLL | 0x310000;
      }
      *((unsigned char *)&__str.__r_.__value_.__s + 23) = 8;
      if ((v11 & 0x40) != 0) {
        unint64_t v14 = v13 & 0xFFFFFFFFFFFF00FFLL | 0x3100;
      }
      else {
        unint64_t v14 = v13;
      }
      strcpy((char *)&__str, "        ");
      if (v12 < 0) {
        unint64_t v14 = v14 & 0xFFFFFFFFFFFFFF00 | 0x31;
      }
      v64[v7] = v14;
      __str.__r_.__value_.__s.__data_[0] = BYTE1(v14);
      __str.__r_.__value_.__s.__data_[1] = BYTE1(v14);
      char v59 = 7;
      __s[6] = HIBYTE(v14);
      *(_WORD *)&__s[4] = HIDWORD(v14) >> 8;
      int v57 = v5;
      *(_DWORD *)__s = v14 >> 8;
      __s[7] = 0;
      std::string::replace(&__str, 2uLL, 7uLL, __s, 7uLL);
      if (v59 < 0) {
        operator delete(*(void **)__s);
      }
      char v15 = std::stoi(&__str, 0, 2);
      if (!*((unsigned char *)&v62 + v7))
      {
        ++v8;
        *((unsigned char *)&v62 + v7) = 1;
      }
      double v16 = (double)v15;
      *(double *)&v61[v7] = v16;
      BOOL v63 = v8 == 8;
      if (v7 == 6)
      {
        std::string::value_type v17 = v64[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        p_str->__r_.__value_.__s.__data_[0] = v64[0];
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          double v19 = &__str;
        }
        else {
          double v19 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        v19->__r_.__value_.__s.__data_[1] = v17;
        char v59 = 6;
        *(_DWORD *)__s = *(_DWORD *)&v64[1];
        *(_WORD *)&__s[4] = *(_WORD *)&v64[5];
        __s[6] = 0;
        std::string::replace(&__str, 2uLL, 7uLL, __s, 6uLL);
        if (v59 < 0) {
          operator delete(*(void **)__s);
        }
        char v20 = std::stoi(&__str, 0, 2);
        if (!HIBYTE(v62))
        {
          ++v8;
          HIBYTE(v62) = 1;
        }
        double v16 = (double)v20;
        *(double *)&v61[7] = v16;
        int v56 = v8;
        BOOL v63 = v8 == 8;
      }
      else
      {
        int v56 = v8;
      }
      BOOL v21 = 0;
      LODWORD(v16) = v62;
      if ((vmaxv_u16((uint16x4_t)vceqz_s16((int16x4_t)(vmovl_u8(*(uint8x8_t *)&v16).u64[0] & 0xFF00FF00FF00FFLL))) & 1) == 0
        && BYTE4(v62)
        && BYTE5(v62))
      {
        BOOL v21 = HIWORD(v62) != 0;
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      int v55 = v9;
      if (v6 < v4)
      {
        *(void *)unint64_t v6 = v61[v7];
        double v22 = v6 + 8;
        goto LABEL_66;
      }
      uint64_t v23 = (v6 - v3) >> 3;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 61) {
        goto LABEL_105;
      }
      if ((v4 - v3) >> 2 > v24) {
        unint64_t v24 = (v4 - v3) >> 2;
      }
      if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v24;
      }
      if (v25)
      {
        if (v25 >> 61) {
          goto LABEL_106;
        }
        double v26 = operator new(8 * v25);
      }
      else
      {
        double v26 = 0;
      }
      double v27 = &v26[8 * v23];
      *(void *)double v27 = v61[v7];
      double v22 = v27 + 8;
      if (v6 == v3)
      {
        uint64_t v2 = v52;
      }
      else
      {
        unint64_t v28 = v6 - 8 - v3;
        if (v28 >= 0x58 && (unint64_t)(v3 - v26) >= 0x20)
        {
          uint64_t v42 = (v28 >> 3) + 1;
          double v29 = &v6[-8 * (v42 & 0x3FFFFFFFFFFFFFFCLL)];
          double v43 = &v26[8 * v23 - 16];
          double v44 = (long long *)(v6 - 16);
          uint64_t v45 = v42 & 0x3FFFFFFFFFFFFFFCLL;
          uint64_t v2 = v52;
          do
          {
            long long v46 = *v44;
            *(v43 - 1) = *(v44 - 1);
            *double v43 = v46;
            v43 -= 2;
            v44 -= 2;
            v45 -= 4;
          }
          while (v45);
          v27 -= 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
          if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_63;
          }
        }
        else
        {
          double v29 = v6;
          uint64_t v2 = v52;
        }
        do
        {
          uint64_t v30 = *((void *)v29 - 1);
          v29 -= 8;
          *((void *)v27 - 1) = v30;
          v27 -= 8;
        }
        while (v29 != v3);
      }
LABEL_63:
      uint64_t v4 = &v26[8 * v25];
      *(void *)uint64_t v2 = v27;
      *((void *)v2 + 1) = v22;
      *((void *)v2 + 2) = v4;
      if (v3) {
        operator delete(v3);
      }
      uint64_t v3 = v27;
LABEL_66:
      *((void *)v2 + 1) = v22;
      ++v7;
      if (v21)
      {
        if (v22 < v4)
        {
          *(void *)double v22 = v61[v7];
          unint64_t v6 = v22 + 8;
          int v31 = v55;
          int v8 = v56;
LABEL_90:
          *((void *)v2 + 1) = v6;
          goto LABEL_91;
        }
        uint64_t v32 = (v22 - v3) >> 3;
        unint64_t v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 61) {
LABEL_105:
        }
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        if ((v4 - v3) >> 2 > v33) {
          unint64_t v33 = (v4 - v3) >> 2;
        }
        if ((unint64_t)(v4 - v3) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v34 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v34 = v33;
        }
        if (v34)
        {
          if (v34 >> 61) {
LABEL_106:
          }
            std::__throw_bad_array_new_length[abi:ne180100]();
          double v35 = operator new(8 * v34);
        }
        else
        {
          double v35 = 0;
        }
        double v36 = &v35[8 * v32];
        *(void *)double v36 = v61[v7];
        unint64_t v6 = v36 + 8;
        if (v22 == v3)
        {
          uint64_t v2 = v52;
          int v31 = v55;
        }
        else
        {
          unint64_t v37 = v22 - 8 - v3;
          if (v37 >= 0x58 && (unint64_t)(v3 - v35) >= 0x20)
          {
            uint64_t v47 = (v37 >> 3) + 1;
            double v38 = &v22[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
            uint64_t v48 = &v35[8 * v32 - 16];
            int8x8_t v49 = (long long *)(v22 - 16);
            uint64_t v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v2 = v52;
            do
            {
              long long v51 = *v49;
              *(v48 - 1) = *(v49 - 1);
              _OWORD *v48 = v51;
              v48 -= 2;
              v49 -= 2;
              v50 -= 4;
            }
            while (v50);
            v36 -= 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL);
            int v31 = v55;
            if (v47 == (v47 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_87;
            }
          }
          else
          {
            double v38 = v22;
            uint64_t v2 = v52;
            int v31 = v55;
          }
          do
          {
            uint64_t v39 = *((void *)v38 - 1);
            v38 -= 8;
            *((void *)v36 - 1) = v39;
            v36 -= 8;
          }
          while (v38 != v3);
        }
LABEL_87:
        uint64_t v4 = &v35[8 * v34];
        *(void *)uint64_t v2 = v36;
        *((void *)v2 + 1) = v6;
        *((void *)v2 + 2) = v4;
        if (v3) {
          operator delete(v3);
        }
        uint64_t v3 = v36;
        int v8 = v56;
        goto LABEL_90;
      }
      unint64_t v6 = v22;
      int v31 = v55;
      int v8 = v56;
LABEL_91:
      int v5 = v57 + 1;
      uint64_t v40 = v10 - 1;
      int v9 = v31 - 1;
      if (v10-- <= 0)
      {
        uint64_t v10 = v40;
        if (v7 != 6)
        {
          uint64_t v10 = v40;
          if (v9 != 1) {
            break;
          }
        }
      }
    }
    v54 += 7;
    if (v57 < 13523) {
      continue;
    }
    break;
  }
}

void sub_2590C2460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  unint64_t v28 = *(void **)a12;
  if (!*(void *)a12) {
    _Unwind_Resume(exception_object);
  }
  *(void *)(a12 + 8) = v28;
  operator delete(v28);
  _Unwind_Resume(exception_object);
}

double getBackglassInfo(const void **a1)
{
  unint64_t v1 = *((unsigned __int8 *)a1 + 23);
  int v2 = (char)v1;
  uint64_t v3 = (const void **)*a1;
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = (unint64_t)a1[1];
  }
  if (v1 >= 3) {
    size_t v4 = 3;
  }
  else {
    size_t v4 = v1;
  }
  char v22 = v4;
  if (v4)
  {
    if (v2 >= 0) {
      int v5 = a1;
    }
    else {
      int v5 = v3;
    }
    memcpy(__dst, v5, v4);
    int v6 = v22;
    *((unsigned char *)__dst + v4) = 0;
    if (v6 < 0)
    {
      if (__dst[1] == 3)
      {
        unint64_t v13 = (void *)__dst[0];
        BOOL v14 = *(_WORD *)__dst[0] == 14404 && *(unsigned char *)(__dst[0] + 2) == 51;
        double v8 = 2.6;
        if (v14) {
          goto LABEL_63;
        }
        if (*(_WORD *)__dst[0] == 14404 && *(unsigned char *)(__dst[0] + 2) == 52) {
          goto LABEL_63;
        }
        if (*(_WORD *)__dst[0] == 14660 && *(unsigned char *)(__dst[0] + 2) == 51) {
          goto LABEL_63;
        }
        if (*(_WORD *)__dst[0] == 14660 && *(unsigned char *)(__dst[0] + 2) == 52) {
          goto LABEL_63;
        }
        if (*(_WORD *)__dst[0] == 14154 && *(unsigned char *)(__dst[0] + 2) == 49)
        {
          double v8 = 0.3;
          goto LABEL_63;
        }
LABEL_57:
        if (*(_WORD *)v13 == 14154 && *((unsigned char *)v13 + 2) == 50)
        {
          double v8 = 0.3;
          if ((v6 & 0x80000000) == 0) {
            return v8;
          }
          goto LABEL_62;
        }
      }
    }
    else if (v6 == 3)
    {
      BOOL v7 = LOWORD(__dst[0]) == 14404 && BYTE2(__dst[0]) == 51;
      double v8 = 2.6;
      if (v7) {
        return v8;
      }
      if (LOWORD(__dst[0]) == 14404 && BYTE2(__dst[0]) == 52) {
        return v8;
      }
      if (LOWORD(__dst[0]) == 14660 && BYTE2(__dst[0]) == 51) {
        return v8;
      }
      if (LOWORD(__dst[0]) == 14660 && BYTE2(__dst[0]) == 52) {
        return v8;
      }
      if (LOWORD(__dst[0]) == 14154 && BYTE2(__dst[0]) == 49) {
        return 0.3;
      }
      unint64_t v13 = __dst;
      int v6 = 3;
      goto LABEL_57;
    }
  }
  else
  {
    int v6 = 0;
    LOBYTE(__dst[0]) = 0;
    if (v2 >= 0) {
      int v5 = a1;
    }
    else {
      int v5 = v3;
    }
  }
  peridot_depth_log_error("No backglass info for device %s. Will use defaults", (const char *)v5);
  double v8 = 0.0;
  if (v6 < 0)
  {
LABEL_62:
    unint64_t v13 = (void *)__dst[0];
LABEL_63:
    operator delete(v13);
  }
  return v8;
}

void sub_2590C2768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getNominalExtrinsics(uint64_t a1, const void **a2)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  int v4 = (char)v3;
  int v5 = (const void **)*a2;
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)a2[1];
  }
  if (v3 >= 3) {
    size_t v6 = 3;
  }
  else {
    size_t v6 = v3;
  }
  char v33 = v6;
  if (!v6)
  {
    int v9 = 0;
    LOBYTE(__dst[0]) = 0;
    if (v4 >= 0) {
      BOOL v7 = a2;
    }
    else {
      BOOL v7 = v5;
    }
    goto LABEL_61;
  }
  if (v4 >= 0) {
    BOOL v7 = a2;
  }
  else {
    BOOL v7 = v5;
  }
  memcpy(__dst, v7, v6);
  int v9 = v33;
  *((unsigned char *)__dst + v6) = 0;
  if ((v9 & 0x80000000) == 0)
  {
    if (v9 != 3) {
      goto LABEL_61;
    }
    if (LOWORD(__dst[0]) == 14404 && BYTE2(__dst[0]) == 51)
    {
      *(void *)&long long v8 = 0x400326E978D4FDF4;
      long long v13 = xmmword_259120530;
    }
    else if (LOWORD(__dst[0]) == 14404 && BYTE2(__dst[0]) == 52)
    {
      *(void *)&long long v8 = 0x4003AE147AE147AELL;
      long long v13 = xmmword_259120540;
    }
    else
    {
      BOOL v12 = LOWORD(__dst[0]) == 14660 && BYTE2(__dst[0]) == 51;
      *(void *)&long long v8 = 0x400570A3D70A3D71;
      long long v13 = xmmword_259120550;
      if (!v12 && (LOWORD(__dst[0]) != 14660 || BYTE2(__dst[0]) != 52))
      {
        if (LOWORD(__dst[0]) != 14154 || BYTE2(__dst[0]) != 49)
        {
          double v16 = __dst;
          int v9 = 3;
          goto LABEL_57;
        }
        long long v13 = xmmword_259120560;
        long long v8 = 0uLL;
      }
    }
    *(_OWORD *)a1 = xmmword_259120570;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = xmmword_259120580;
    *(_OWORD *)(a1 + 48) = 0u;
    *(void *)(a1 + 64) = 0;
    *(void *)(a1 + 72) = 0;
    __asm { FMOV            V2.2D, #1.0 }
    *(_OWORD *)(a1 + 80) = _Q2;
    *(_OWORD *)(a1 + 96) = v13;
    *(_OWORD *)(a1 + 112) = v8;
    return;
  }
  if (__dst[1] != 3) {
    goto LABEL_61;
  }
  double v16 = (void *)__dst[0];
  if (*(_WORD *)__dst[0] == 14404 && *(unsigned char *)(__dst[0] + 2) == 51)
  {
    *(void *)&long long v8 = 0x400326E978D4FDF4;
    long long v20 = xmmword_259120530;
  }
  else if (*(_WORD *)__dst[0] == 14404 && *(unsigned char *)(__dst[0] + 2) == 52)
  {
    *(void *)&long long v8 = 0x4003AE147AE147AELL;
    long long v20 = xmmword_259120540;
  }
  else
  {
    BOOL v19 = *(_WORD *)__dst[0] == 14660 && *(unsigned char *)(__dst[0] + 2) == 51;
    *(void *)&long long v8 = 0x400570A3D70A3D71;
    long long v20 = xmmword_259120550;
    if (!v19 && (*(_WORD *)__dst[0] != 14660 || *(unsigned char *)(__dst[0] + 2) != 52))
    {
      if (*(_WORD *)__dst[0] != 14154 || *(unsigned char *)(__dst[0] + 2) != 49)
      {
LABEL_57:
        if (*(_WORD *)v16 == 14154 && *((unsigned char *)v16 + 2) == 50)
        {
          long long v25 = xmmword_259120560;
          long long v24 = 0uLL;
          goto LABEL_62;
        }
LABEL_61:
        peridot_depth_log_error("No extrinsics info for device %s. Will use zeros", (const char *)v7);
        long long v24 = 0uLL;
        long long v25 = 0uLL;
LABEL_62:
        *(_OWORD *)a1 = xmmword_259120570;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = xmmword_259120580;
        *(_OWORD *)(a1 + 48) = 0u;
        *(void *)(a1 + 64) = 0;
        *(void *)(a1 + 72) = 0;
        __asm { FMOV            V1.2D, #1.0 }
        *(_OWORD *)(a1 + 80) = _Q1;
        *(_OWORD *)(a1 + 96) = v25;
        *(_OWORD *)(a1 + 112) = v24;
        if ((v9 & 0x80000000) == 0) {
          return;
        }
        double v16 = (void *)__dst[0];
        goto LABEL_71;
      }
      long long v20 = xmmword_259120560;
      long long v8 = 0uLL;
    }
  }
  *(_OWORD *)a1 = xmmword_259120570;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = xmmword_259120580;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  __asm { FMOV            V2.2D, #1.0 }
  *(_OWORD *)(a1 + 80) = _Q2;
  *(_OWORD *)(a1 + 96) = v20;
  *(_OWORD *)(a1 + 112) = v8;
LABEL_71:
  operator delete(v16);
}

void sub_2590C2AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (v10 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t nvmGetModuleSerialNumber(const unsigned __int8 *a1, uint64_t a2, char (*__s)[32])
{
  switch(a1[-a2 + 33536])
  {
    case 1u:
    case 4u:
    case 6u:
    case 7u:
    case 8u:
    case 9u:
      int v4 = &a1[-a2 + 33561];
      uint64_t result = (uint64_t)getModuleSerialNumStringBase34((char *)__s, (uint64_t)v4, (const unsigned __int8 *)__s);
      break;
    case 0x24u:
    case 0x26u:
    case 0x36u:
    case 0x40u:
      uint64_t result = (uint64_t)getModuleSerialNumStringBase37((char *)__s, (unsigned __int8 *)&a1[-a2 + 33621], (const unsigned __int8 *)__s);
      if (result)
      {
        (*__s)[18] = 0;
        uint64_t result = 1;
      }
      break;
    default:
      peridot_depth_log_error("unknow VSR buffer version");
      uint64_t result = 0;
      break;
  }
  return result;
}

char *getModuleSerialNumStringBase37(char *a1, unsigned __int8 *a2, const unsigned __int8 *a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  unsigned int v5 = v4 >> 2;
  if (v4 > 0xE3) {
    unsigned int v5 = 0;
  }
  *a1 = a0123456789abcd[v5];
  if (((a2[1] >> 4) & 0xFFFFFFCF | (16 * (*a2 & 3))) <= 0x38) {
    unsigned int v6 = (a2[1] >> 4) & 0xFFFFFFCF | (16 * (*a2 & 3));
  }
  else {
    unsigned int v6 = 0;
  }
  a1[1] = a0123456789abcd[v6];
  if (((a2[2] >> 6) & 0xFFFFFFC3 | (4 * (a2[1] & 0xF))) <= 0x38) {
    unsigned int v7 = (a2[2] >> 6) & 0xFFFFFFC3 | (4 * (a2[1] & 0xF));
  }
  else {
    unsigned int v7 = 0;
  }
  a1[2] = a0123456789abcd[v7];
  unsigned int v8 = a2[2] & 0x3F;
  if (v8 > 0x38) {
    unsigned int v8 = 0;
  }
  a1[3] = a0123456789abcd[v8];
  unsigned int v9 = a2[3];
  if (v9 <= 0xE3) {
    unsigned int v10 = v9 >> 2;
  }
  else {
    unsigned int v10 = 0;
  }
  a1[4] = a0123456789abcd[v10];
  if (((a2[4] >> 4) & 0xFFFFFFCF | (16 * (a2[3] & 3))) <= 0x38) {
    unsigned int v11 = (a2[4] >> 4) & 0xFFFFFFCF | (16 * (a2[3] & 3));
  }
  else {
    unsigned int v11 = 0;
  }
  a1[5] = a0123456789abcd[v11];
  if (((a2[5] >> 6) & 0xFFFFFFC3 | (4 * (a2[4] & 0xF))) <= 0x38) {
    unsigned int v12 = (a2[5] >> 6) & 0xFFFFFFC3 | (4 * (a2[4] & 0xF));
  }
  else {
    unsigned int v12 = 0;
  }
  a1[6] = a0123456789abcd[v12];
  unsigned int v13 = a2[5] & 0x3F;
  if (v13 > 0x38) {
    unsigned int v13 = 0;
  }
  a1[7] = a0123456789abcd[v13];
  unsigned int v14 = a2[6];
  if (v14 <= 0xE3) {
    unsigned int v15 = v14 >> 2;
  }
  else {
    unsigned int v15 = 0;
  }
  a1[8] = a0123456789abcd[v15];
  if (((a2[7] >> 4) & 0xFFFFFFCF | (16 * (a2[6] & 3))) <= 0x38) {
    unsigned int v16 = (a2[7] >> 4) & 0xFFFFFFCF | (16 * (a2[6] & 3));
  }
  else {
    unsigned int v16 = 0;
  }
  a1[9] = a0123456789abcd[v16];
  if (((a2[8] >> 6) & 0xFFFFFFC3 | (4 * (a2[7] & 0xF))) <= 0x38) {
    unsigned int v17 = (a2[8] >> 6) & 0xFFFFFFC3 | (4 * (a2[7] & 0xF));
  }
  else {
    unsigned int v17 = 0;
  }
  a1[10] = a0123456789abcd[v17];
  unsigned int v18 = a2[8] & 0x3F;
  if (v18 > 0x38) {
    unsigned int v18 = 0;
  }
  a1[11] = a0123456789abcd[v18];
  unsigned int v19 = a2[9];
  if (v19 <= 0xE3) {
    unsigned int v20 = v19 >> 2;
  }
  else {
    unsigned int v20 = 0;
  }
  a1[12] = a0123456789abcd[v20];
  if (((a2[10] >> 4) & 0xFFFFFFCF | (16 * (a2[9] & 3))) <= 0x38) {
    unsigned int v21 = (a2[10] >> 4) & 0xFFFFFFCF | (16 * (a2[9] & 3));
  }
  else {
    unsigned int v21 = 0;
  }
  a1[13] = a0123456789abcd[v21];
  unsigned int v22 = (a2[11] >> 6) & 0xFFFFFFC3 | (4 * (a2[10] & 0xF));
  if (v22 > 0x38) {
    unsigned int v22 = 0;
  }
  a1[14] = a0123456789abcd[v22];
  unsigned int v23 = a2[11] & 0x3F;
  if (v23 > 0x38) {
    unsigned int v23 = 0;
  }
  a1[15] = a0123456789abcd[v23];
  unsigned int v24 = a2[12];
  if (v24 <= 0xE3) {
    unsigned int v25 = v24 >> 2;
  }
  else {
    unsigned int v25 = 0;
  }
  a1[16] = a0123456789abcd[v25];
  if (((a2[13] >> 4) & 0xFFFFFFCF | (16 * (a2[12] & 3))) <= 0x38) {
    unsigned int v26 = (a2[13] >> 4) & 0xFFFFFFCF | (16 * (a2[12] & 3));
  }
  else {
    unsigned int v26 = 0;
  }
  char v27 = a0123456789abcd[v26];
  qmemcpy(v48, "0123456789ABCDEFGHJKLMNPQRSTUVWX", sizeof(v48));
  a1[17] = v27;
  unsigned int v28 = (a2[14] >> 6) & 0xFFFFFFC3 | (4 * (a2[13] & 0xF));
  if (v28 > 0x38) {
    unsigned int v28 = 0;
  }
  a1[18] = a0123456789abcd[v28];
  unsigned int v29 = a2[14] & 0x3F;
  if (v29 > 0x38) {
    unsigned int v29 = 0;
  }
  char v30 = a0123456789abcd[v29];
  int v49 = 2841177;
  a1[19] = v30;
  unsigned int v31 = a2[15];
  if (v31 <= 0xE3) {
    unsigned int v32 = v31 >> 2;
  }
  else {
    unsigned int v32 = 0;
  }
  a1[20] = a0123456789abcd[v32];
  if (((a2[16] >> 4) & 0xFFFFFFCF | (16 * (a2[15] & 3))) <= 0x38) {
    unsigned int v33 = (a2[16] >> 4) & 0xFFFFFFCF | (16 * (a2[15] & 3));
  }
  else {
    unsigned int v33 = 0;
  }
  a1[21] = a0123456789abcd[v33];
  if (((a2[17] >> 6) & 0xFFFFFFC3 | (4 * (a2[16] & 0xF))) <= 0x38) {
    unsigned int v34 = (a2[17] >> 6) & 0xFFFFFFC3 | (4 * (a2[16] & 0xF));
  }
  else {
    unsigned int v34 = 0;
  }
  a1[22] = a0123456789abcd[v34];
  unsigned int v35 = a2[17] & 0x3F;
  if (v35 > 0x38) {
    unsigned int v35 = 0;
  }
  a1[23] = a0123456789abcd[v35];
  unsigned int v36 = a2[18];
  if (v36 <= 0xE3) {
    unsigned int v37 = v36 >> 2;
  }
  else {
    unsigned int v37 = 0;
  }
  *((_WORD *)a1 + 12) = a0123456789abcd[v37];
  int v38 = strlen(a1);
  uint64_t result = 0;
  if (v38 >= 3)
  {
    int v40 = 0;
    uint64_t v41 = (v38 - 1);
    uint64_t v42 = v38;
    double v43 = &a1[v41 - 1];
    uint64_t v44 = 1;
    while (1)
    {
      int v45 = *v43--;
      uint64_t result = strchr((char *)v48, v45);
      if (!result) {
        break;
      }
      unsigned int v46 = result - v48;
      if (v44) {
        v46 *= 3;
      }
      v40 += v46;
      if (v42 == ++v44)
      {
        if (v40 % 34 < 1) {
          int v47 = 48;
        }
        else {
          int v47 = ((char *)&v48[2] - (v40 % 34))[2];
        }
        return (char *)(v47 == a1[v41]);
      }
    }
  }
  return result;
}

char *getModuleSerialNumStringBase34(char *__s, uint64_t a2, const unsigned __int8 *a3)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  unsigned int v4 = bswap32(*(_DWORD *)a2);
  int v5 = *(unsigned __int8 *)(a2 + 4);
  int v6 = *(unsigned __int8 *)(a2 + 5);
  int v7 = *(unsigned __int8 *)(a2 + 6);
  unsigned int v8 = *(_DWORD *)(a2 + 7);
  strcpy(v52, "0123456789ABCDEFGHJKLMNPQRSTUVWXYZ");
  *(void *)(__s + 17) = 0;
  *((void *)__s + 3) = 0;
  unsigned int v9 = v4 % 0x2B54A20;
  if (v4 >= 0x5C13D840) {
    char v10 = 63;
  }
  else {
    char v10 = v52[v4 / 0x2B54A20];
  }
  *__s = v10;
  unsigned int v11 = v9 % 0x146410;
  if (v9 >= 0x2B54A20) {
    char v12 = 63;
  }
  else {
    char v12 = v52[v9 / 0x146410];
  }
  __s[1] = v12;
  unsigned int v13 = v11 % 0x9988;
  if (v11 >= 0x146410) {
    char v14 = 63;
  }
  else {
    char v14 = v52[v11 / 0x9988];
  }
  int v15 = v5 << 16;
  __s[2] = v14;
  unsigned int v16 = v13 % 0x484;
  if (v13 > 0x9987) {
    char v17 = 63;
  }
  else {
    char v17 = v52[v13 / 0x484];
  }
  int v18 = v15 | (v6 << 8);
  __s[3] = v17;
  unsigned int v19 = v16 % 0x22;
  if (v16 > 0x483) {
    char v20 = 63;
  }
  else {
    char v20 = v52[v16 / 0x22];
  }
  unsigned int v21 = v18 | v7;
  __s[4] = v20;
  if (v19 > 0x21) {
    char v22 = 63;
  }
  else {
    char v22 = v52[v19];
  }
  __s[5] = v22;
  __s[6] = v52[v21 / 0x146410];
  unsigned int v23 = v21 % 0x146410 % 0x9988;
  if (v21 % 0x146410 >= 0x146410) {
    char v24 = 63;
  }
  else {
    char v24 = v52[v21 % 0x146410 / 0x9988];
  }
  __s[7] = v24;
  unsigned int v25 = v23 % 0x484;
  if (v23 > 0x9987) {
    char v26 = 63;
  }
  else {
    char v26 = v52[v23 / 0x484];
  }
  std::string::value_type __s[8] = v26;
  unsigned int v27 = v25 % 0x22;
  if (v25 > 0x483) {
    char v28 = 63;
  }
  else {
    char v28 = v52[v25 / 0x22];
  }
  unsigned int v29 = bswap32(v8);
  __s[9] = v28;
  if (v27 > 0x21) {
    char v30 = 63;
  }
  else {
    char v30 = v52[v27];
  }
  __s[10] = v30;
  unsigned int v31 = v29 % 0x2B54A20;
  if (v29 >= 0x5C13D840) {
    char v32 = 63;
  }
  else {
    char v32 = v52[v29 / 0x2B54A20];
  }
  __s[11] = v32;
  unsigned int v33 = v31 % 0x146410;
  if (v31 >= 0x2B54A20) {
    char v34 = 63;
  }
  else {
    char v34 = v52[v31 / 0x146410];
  }
  __s[12] = v34;
  unsigned int v35 = v33 % 0x9988;
  if (v33 >= 0x146410) {
    char v36 = 63;
  }
  else {
    char v36 = v52[v33 / 0x9988];
  }
  __s[13] = v36;
  unsigned int v37 = v35 % 0x484;
  if (v35 > 0x9987) {
    char v38 = 63;
  }
  else {
    char v38 = v52[v35 / 0x484];
  }
  __s[14] = v38;
  unsigned int v39 = v37 % 0x22;
  if (v37 > 0x483) {
    char v40 = 63;
  }
  else {
    char v40 = v52[v37 / 0x22];
  }
  __s[15] = v40;
  if (v39 > 0x21) {
    char v41 = 63;
  }
  else {
    char v41 = v52[v39];
  }
  __s[16] = v41;
  int v42 = strlen(__s);
  uint64_t v43 = v42 - 1;
  if (v42 <= 1)
  {
LABEL_57:
    int v51 = 48;
    return (char *)(v51 == __s[v43]);
  }
  else
  {
    int v44 = 0;
    uint64_t v45 = v42;
    unsigned int v46 = &__s[v43 - 1];
    uint64_t v47 = 1;
    while (1)
    {
      int v48 = *v46--;
      uint64_t result = strchr(v52, v48);
      if (!result) {
        break;
      }
      unsigned int v50 = result - v52;
      if (v47) {
        v50 *= 3;
      }
      v44 += v50;
      if (v45 == ++v47)
      {
        if (v44 % 34 < 1) {
          goto LABEL_57;
        }
        int v51 = v52[-(v44 % 34) + 34];
        return (char *)(v51 == __s[v43]);
      }
    }
  }
  return result;
}

void PeridotSuperFrame::PeridotSuperFrame(PeridotSuperFrame *this)
{
  *((void *)this + 578) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

{
  *((void *)this + 578) = 0;
  *(void *)this = 0;
  *((void *)this + 1) = 0;
}

uint64_t PeridotSuperFrame::readSpConfigs<sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 <= 3)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 24);
      uint64_t v15 = a2 + 384 * v3 + 2;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 40);
    int64x2_t v6 = vdupq_n_s64(2uLL);
    int64x2_t v7 = vdupq_n_s64(a2);
    int64x2_t v8 = vdupq_n_s64(0x302uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v7, v11);
      v5[-1] = vaddq_s64(v12, v6);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readSpConfigs<peridot::frameV2_configV7::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 24);
      uint64_t v15 = a2 + 384 * v3 + 2;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 40);
    int64x2_t v6 = vdupq_n_s64(2uLL);
    int64x2_t v7 = vdupq_n_s64(a2);
    int64x2_t v8 = vdupq_n_s64(0x302uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v7, v11);
      v5[-1] = vaddq_s64(v12, v6);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readSpConfigs<peridot::frameV3_configV10::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 24);
      uint64_t v15 = a2 + 384 * v3 + 2;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 40);
    int64x2_t v6 = vdupq_n_s64(2uLL);
    int64x2_t v7 = vdupq_n_s64(a2);
    int64x2_t v8 = vdupq_n_s64(0x302uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v7, v11);
      v5[-1] = vaddq_s64(v12, v6);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readBankConfigs<sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 <= 3)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 920);
      uint64_t v15 = a2 + 384 * v3 + 130;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 936);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0x82uLL);
    int64x2_t v8 = vdupq_n_s64(0x382uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readBankConfigs<peridot::frameV2_configV7::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 920);
      uint64_t v15 = a2 + 384 * v3 + 130;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 936);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0x82uLL);
    int64x2_t v8 = vdupq_n_s64(0x382uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readBankConfigs<peridot::frameV3_configV10::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 920);
      uint64_t v15 = a2 + 384 * v3 + 130;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 936);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0x82uLL);
    int64x2_t v8 = vdupq_n_s64(0x382uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readPriConfigs<sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 <= 3)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 1816);
      uint64_t v15 = a2 + 384 * v3 + 226;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 1832);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0xE2uLL);
    int64x2_t v8 = vdupq_n_s64(0x3E2uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readPriConfigs<peridot::frameV2_configV7::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 1816);
      uint64_t v15 = a2 + 384 * v3 + 226;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 1832);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0xE2uLL);
    int64x2_t v8 = vdupq_n_s64(0x3E2uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readPriConfigs<peridot::frameV3_configV10::sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 < 4)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 1816);
      uint64_t v15 = a2 + 384 * v3 + 226;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 1832);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0xE2uLL);
    int64x2_t v8 = vdupq_n_s64(0x3E2uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

uint64_t PeridotSuperFrame::readOutputParams<sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    if (a3 <= 3)
    {
      unint64_t v3 = 0;
LABEL_7:
      unint64_t v13 = a3 - v3;
      char v14 = (uint64_t *)(result + 8 * v3 + 2712);
      uint64_t v15 = a2 + 384 * v3 + 307;
      do
      {
        *v14++ = v15;
        v15 += 384;
        --v13;
      }
      while (v13);
      return result;
    }
    unint64_t v3 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v4 = (int64x2_t)xmmword_2591200C0;
    int v5 = (int64x2_t *)(result + 2728);
    int64x2_t v6 = vdupq_n_s64(a2);
    int64x2_t v7 = vdupq_n_s64(0x133uLL);
    int64x2_t v8 = vdupq_n_s64(0x433uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v4.i64[0];
      v11.i64[1] = 384 * v4.i64[1];
      int64x2_t v12 = vaddq_s64(v6, v11);
      v5[-1] = vaddq_s64(v12, v7);
      int64x2_t *v5 = vaddq_s64(v12, v8);
      int64x2_t v4 = vaddq_s64(v4, v9);
      v5 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v3 != a3) {
      goto LABEL_7;
    }
  }
  return result;
}

void PeridotSuperFrame::readOutputParams<peridot::frameV2_configV7::sCIspPeridotFrameConfig>(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void PeridotSuperFrame::readOutputParams<peridot::frameV3_configV10::sCIspPeridotFrameConfig>(uint64_t a1, uint64_t a2, unint64_t a3)
{
}

void PeridotSuperFrame::readFrameConfigs<peridot::frameV2_configV7::sCIspPeridotFrameConfig>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a3) {
    goto LABEL_23;
  }
  int64x2_t v3 = vdupq_n_s64(a2);
  if (a3 >= 4)
  {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v5 = (int64x2_t)xmmword_2591200C0;
    int64x2_t v6 = (int64x2_t *)(a1 + 40);
    int64x2_t v7 = vdupq_n_s64(2uLL);
    int64x2_t v8 = vdupq_n_s64(0x302uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v5.i64[0];
      v11.i64[1] = 384 * v5.i64[1];
      int64x2_t v12 = vaddq_s64(v3, v11);
      v6[-1] = vaddq_s64(v12, v7);
      int64x2_t *v6 = vaddq_s64(v12, v8);
      int64x2_t v5 = vaddq_s64(v5, v9);
      v6 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 == a3)
    {
LABEL_9:
      if (a3 >= 4)
      {
        int64x2_t v17 = (int64x2_t)xmmword_2591200C0;
        int64x2_t v18 = vdupq_n_s64(0x82uLL);
        int64x2_t v19 = vdupq_n_s64(0x382uLL);
        unint64_t v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v20 = vdupq_n_s64(4uLL);
        unsigned int v21 = (int64x2_t *)(a1 + 936);
        unint64_t v22 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v23.i64[0] = 384 * v17.i64[0];
          v23.i64[1] = 384 * v17.i64[1];
          int64x2_t v24 = vaddq_s64(v3, v23);
          v21[-1] = vaddq_s64(v24, v18);
          *unsigned int v21 = vaddq_s64(v24, v19);
          int64x2_t v17 = vaddq_s64(v17, v20);
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v16 == a3) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v25 = a3 - v16;
      char v26 = (uint64_t *)(a1 + 8 * v16 + 920);
      uint64_t v27 = a2 + 384 * v16 + 130;
      do
      {
        *v26++ = v27;
        v27 += 384;
        --v25;
      }
      while (v25);
LABEL_16:
      if (a3 < 4)
      {
        unint64_t v28 = 0;
LABEL_21:
        unint64_t v37 = a3 - v28;
        char v38 = (uint64_t *)(a1 + 8 * v28 + 1816);
        uint64_t v39 = a2 + 384 * v28 + 226;
        do
        {
          *v38++ = v39;
          v39 += 384;
          --v37;
        }
        while (v37);
        goto LABEL_23;
      }
      unint64_t v28 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v29 = (int64x2_t)xmmword_2591200C0;
      char v30 = (int64x2_t *)(a1 + 1832);
      int64x2_t v31 = vdupq_n_s64(0xE2uLL);
      int64x2_t v32 = vdupq_n_s64(0x3E2uLL);
      int64x2_t v33 = vdupq_n_s64(4uLL);
      unint64_t v34 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v35.i64[0] = 384 * v29.i64[0];
        v35.i64[1] = 384 * v29.i64[1];
        int64x2_t v36 = vaddq_s64(v3, v35);
        v30[-1] = vaddq_s64(v36, v31);
        *char v30 = vaddq_s64(v36, v32);
        int64x2_t v29 = vaddq_s64(v29, v33);
        v30 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v28 != a3) {
        goto LABEL_21;
      }
LABEL_23:
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v13 = a3 - v4;
  char v14 = (uint64_t *)(a1 + 8 * v4 + 24);
  uint64_t v15 = a2 + 384 * v4 + 2;
  do
  {
    *v14++ = v15;
    v15 += 384;
    --v13;
  }
  while (v13);
  goto LABEL_9;
}

void PeridotSuperFrame::readFrameConfigs<peridot::frameV3_configV10::sCIspPeridotFrameConfig>(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (!a3) {
    goto LABEL_23;
  }
  int64x2_t v3 = vdupq_n_s64(a2);
  if (a3 >= 4)
  {
    unint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    int64x2_t v5 = (int64x2_t)xmmword_2591200C0;
    int64x2_t v6 = (int64x2_t *)(a1 + 40);
    int64x2_t v7 = vdupq_n_s64(2uLL);
    int64x2_t v8 = vdupq_n_s64(0x302uLL);
    int64x2_t v9 = vdupq_n_s64(4uLL);
    unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v11.i64[0] = 384 * v5.i64[0];
      v11.i64[1] = 384 * v5.i64[1];
      int64x2_t v12 = vaddq_s64(v3, v11);
      v6[-1] = vaddq_s64(v12, v7);
      int64x2_t *v6 = vaddq_s64(v12, v8);
      int64x2_t v5 = vaddq_s64(v5, v9);
      v6 += 2;
      v10 -= 4;
    }
    while (v10);
    if (v4 == a3)
    {
LABEL_9:
      if (a3 >= 4)
      {
        int64x2_t v17 = (int64x2_t)xmmword_2591200C0;
        int64x2_t v18 = vdupq_n_s64(0x82uLL);
        int64x2_t v19 = vdupq_n_s64(0x382uLL);
        unint64_t v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v20 = vdupq_n_s64(4uLL);
        unsigned int v21 = (int64x2_t *)(a1 + 936);
        unint64_t v22 = a3 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v23.i64[0] = 384 * v17.i64[0];
          v23.i64[1] = 384 * v17.i64[1];
          int64x2_t v24 = vaddq_s64(v3, v23);
          v21[-1] = vaddq_s64(v24, v18);
          *unsigned int v21 = vaddq_s64(v24, v19);
          int64x2_t v17 = vaddq_s64(v17, v20);
          v21 += 2;
          v22 -= 4;
        }
        while (v22);
        if (v16 == a3) {
          goto LABEL_16;
        }
      }
      else
      {
        unint64_t v16 = 0;
      }
      unint64_t v25 = a3 - v16;
      char v26 = (uint64_t *)(a1 + 8 * v16 + 920);
      uint64_t v27 = a2 + 384 * v16 + 130;
      do
      {
        *v26++ = v27;
        v27 += 384;
        --v25;
      }
      while (v25);
LABEL_16:
      if (a3 < 4)
      {
        unint64_t v28 = 0;
LABEL_21:
        unint64_t v37 = a3 - v28;
        char v38 = (uint64_t *)(a1 + 8 * v28 + 1816);
        uint64_t v39 = a2 + 384 * v28 + 226;
        do
        {
          *v38++ = v39;
          v39 += 384;
          --v37;
        }
        while (v37);
        goto LABEL_23;
      }
      unint64_t v28 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v29 = (int64x2_t)xmmword_2591200C0;
      char v30 = (int64x2_t *)(a1 + 1832);
      int64x2_t v31 = vdupq_n_s64(0xE2uLL);
      int64x2_t v32 = vdupq_n_s64(0x3E2uLL);
      int64x2_t v33 = vdupq_n_s64(4uLL);
      unint64_t v34 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v35.i64[0] = 384 * v29.i64[0];
        v35.i64[1] = 384 * v29.i64[1];
        int64x2_t v36 = vaddq_s64(v3, v35);
        v30[-1] = vaddq_s64(v36, v31);
        *char v30 = vaddq_s64(v36, v32);
        int64x2_t v29 = vaddq_s64(v29, v33);
        v30 += 2;
        v34 -= 4;
      }
      while (v34);
      if (v28 != a3) {
        goto LABEL_21;
      }
LABEL_23:
      operator new[]();
    }
  }
  else
  {
    unint64_t v4 = 0;
  }
  unint64_t v13 = a3 - v4;
  char v14 = (uint64_t *)(a1 + 8 * v4 + 24);
  uint64_t v15 = a2 + 384 * v4 + 2;
  do
  {
    *v14++ = v15;
    v15 += 384;
    --v13;
  }
  while (v13);
  goto LABEL_9;
}

uint64_t PeridotSuperFrame::frameCount(PeridotSuperFrame *this)
{
  return *(void *)this;
}

uint64_t PeridotSuperFrame::frame(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + 2) + 9280 * a2;
}

uint64_t PeridotSuperFrame::spConfig(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 3);
}

uint64_t PeridotSuperFrame::bankConfig(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 115);
}

uint64_t PeridotSuperFrame::priConfig(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 227);
}

uint64_t PeridotSuperFrame::outputParams(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 339);
}

uint64_t PeridotSuperFrame::superFrameOutputParams(PeridotSuperFrame *this)
{
  return *((void *)this + 451);
}

uint64_t PeridotSuperFrame::pllfreq_f_lo(PeridotSuperFrame *this, uint64_t a2)
{
  return *((unsigned __int8 *)this + a2 + 3616);
}

uint64_t PeridotSuperFrame::bankCount(PeridotSuperFrame *this)
{
  return *((void *)this + 1);
}

uint64_t PeridotSuperFrame::bankId(PeridotSuperFrame *this, uint64_t a2)
{
  return (*(unsigned char *)(*((void *)this + *((void *)this + a2 + 466) + 115) + 2) - 1);
}

uint64_t PeridotSuperFrame::framesForBank(PeridotSuperFrame *this, unint64_t a2)
{
  int v2 = (char *)this + 8 * a2;
  if (*((void *)this + 1) - 1 <= a2) {
    int64x2_t v3 = this;
  }
  else {
    int64x2_t v3 = (PeridotSuperFrame *)(v2 + 3736);
  }
  return *(void *)v3 - *((void *)v2 + 466);
}

uint64_t PeridotSuperFrame::firstIndexForBank(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 466);
}

unint64_t PeridotSuperFrame::normalFrameCountForBank(PeridotSuperFrame *this, uint64_t a2)
{
  unint64_t v2 = *(unsigned __int16 *)(*((void *)this + 2) + 9280 * *((void *)this + a2 + 494) + 52);
  return (v2 >> 4) * (unint64_t)(v2 >> 12);
}

uint64_t PeridotSuperFrame::firstNormalIndexForBank(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 494);
}

uint64_t PeridotSuperFrame::macro1IndexForBank(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 522);
}

uint64_t PeridotSuperFrame::macro2IndexForBank(PeridotSuperFrame *this, uint64_t a2)
{
  return *((void *)this + a2 + 550);
}

CFTypeRef PixelBufferUtils::copyAttachment(PixelBufferUtils *this, const __CFString *a2, CVAttachmentMode *a3, CVAttachmentMode *a4)
{
  CFTypeRef v4 = 0;
  if (this)
  {
    if (a2)
    {
      CFTypeRef Attachment = CVBufferGetAttachment(this, a2, a3);
      CFTypeRef v4 = Attachment;
      if (Attachment) {
        CFRetain(Attachment);
      }
    }
  }
  return v4;
}

CFDictionaryRef PixelBufferUtils::copyAttachments(PixelBufferUtils *this, __CVBuffer *a2, CVAttachmentMode a3)
{
  if (!this) {
    return 0;
  }
  CFDictionaryRef Attachments = CVBufferGetAttachments(this, (CVAttachmentMode)a2);
  CFDictionaryRef v4 = Attachments;
  if (Attachments) {
    CFRetain(Attachments);
  }
  return v4;
}

unint64_t PixelBufferUtils::pixelFormatAsString@<X0>(unint64_t this@<X0>, char *a2@<X8>)
{
  if (this == 32)
  {
    a2[23] = 4;
    int v3 = 1111970369;
    goto LABEL_5;
  }
  if (this == 24)
  {
    a2[23] = 4;
    int v3 = 1196569650;
LABEL_5:
    *(_DWORD *)a2 = v3;
    a2[4] = 0;
    return this;
  }
  __s[0] = BYTE3(this);
  __s[1] = BYTE2(this);
  __s[2] = BYTE1(this);
  __s[3] = this;
  __s[4] = 0;
  this = strlen(__s);
  if (this >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v4 = this;
  if (this >= 0x17)
  {
    uint64_t v6 = (this & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((this | 7) != 0x17) {
      uint64_t v6 = this | 7;
    }
    uint64_t v7 = v6 + 1;
    int64x2_t v5 = operator new(v6 + 1);
    *((void *)a2 + 1) = v4;
    *((void *)a2 + 2) = v7 | 0x8000000000000000;
    *(void *)a2 = v5;
    goto LABEL_14;
  }
  a2[23] = this;
  int64x2_t v5 = a2;
  if (this) {
LABEL_14:
  }
    this = (unint64_t)memcpy(v5, __s, v4);
  *((unsigned char *)v5 + v4) = 0;
  if (a2[23] >= 0) {
    int64x2_t v8 = a2;
  }
  else {
    int64x2_t v8 = *(char **)a2;
  }
  if (*v8 <= 31)
  {
    int v19 = a2[23];
    __p = *(void **)a2;
    uint64_t v9 = MEMORY[0x263F8C328] + 104;
    v29[0] = MEMORY[0x263F8C328] + 104;
    uint64_t v10 = MEMORY[0x263F8C328] + 64;
    uint64_t v24 = MEMORY[0x263F8C328] + 64;
    int64x2_t v11 = (void *)MEMORY[0x263F8C2B8];
    uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 24);
    *(void *)__s = *(void *)(MEMORY[0x263F8C2B8] + 16);
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v12;
    uint64_t v23 = 0;
    unint64_t v13 = (std::ios_base *)&__s[*(void *)(*(void *)__s - 24)];
    std::ios_base::init(v13, v25);
    uint64_t v14 = MEMORY[0x263F8C328] + 24;
    v13[1].__vftable = 0;
    v13[1].__fmtflags_ = -1;
    uint64_t v15 = v11[5];
    uint64_t v24 = v11[4];
    *(uint64_t *)((char *)&v25[-1] + *(void *)(v24 - 24)) = v15;
    *(void *)__s = v11[1];
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v11[6];
    v29[0] = v9;
    *(void *)__s = v14;
    uint64_t v24 = v10;
    std::streambuf::basic_streambuf();
    uint64_t v16 = MEMORY[0x263F8C318] + 16;
    v25[0] = MEMORY[0x263F8C318] + 16;
    *(_OWORD *)char v26 = 0u;
    long long v27 = 0u;
    int v28 = 24;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v24, (uint64_t)"0x", 2);
    *(_DWORD *)((char *)v25 + *(void *)(v24 - 24)) = *(_DWORD *)((unsigned char *)v25 + *(void *)(v24 - 24)) & 0xFFFFFFB5 | 8;
    std::ostream::operator<<();
    std::stringbuf::str();
    if (v19 < 0) {
      operator delete(__p);
    }
    *(_OWORD *)a2 = v20;
    *((void *)a2 + 2) = v21;
    *(void *)__s = *v11;
    uint64_t v17 = v11[9];
    *(void *)&__s[*(void *)(*(void *)__s - 24)] = v11[8];
    uint64_t v24 = v17;
    v25[0] = v16;
    if (SBYTE7(v27) < 0) {
      operator delete(v26[0]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return MEMORY[0x25A2D6270](v29);
  }
  return this;
}

void sub_2590C4A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a12 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A2D60E0](v24, a1);
  if (v24[0])
  {
    uint64_t v6 = (char *)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *((void *)v6 + 5);
    int v8 = *((_DWORD *)v6 + 2);
    int v9 = *((_DWORD *)v6 + 36);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&__b, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&__b);
      *((_DWORD *)v6 + 36) = v9;
    }
    uint64_t v11 = a2 + a3;
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v12 = a2 + a3;
    }
    else {
      uint64_t v12 = a2;
    }
    if (!v7) {
      goto LABEL_30;
    }
    uint64_t v13 = *((void *)v6 + 3);
    BOOL v14 = v13 <= a3;
    uint64_t v15 = v13 - a3;
    size_t v16 = v14 ? 0 : v15;
    if (v12 - a2 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, a2, v12 - a2) != v12 - a2)
    {
      goto LABEL_30;
    }
    if ((uint64_t)v16 >= 1)
    {
      if (v16 >= 0x7FFFFFFFFFFFFFF8) {
        std::string::__throw_length_error[abi:ne180100]();
      }
      if (v16 >= 0x17)
      {
        uint64_t v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v16 | 7) != 0x17) {
          uint64_t v18 = v16 | 7;
        }
        uint64_t v19 = v18 + 1;
        p_b = (std::locale::__imp *)operator new(v18 + 1);
        size_t v26 = v16;
        int64_t v27 = v19 | 0x8000000000000000;
        __b.__locale_ = p_b;
      }
      else
      {
        HIBYTE(v27) = v16;
        p_b = (std::locale::__imp *)&__b;
      }
      memset(p_b, v9, v16);
      *((unsigned char *)p_b + v16) = 0;
      if (v27 >= 0) {
        locale = &__b;
      }
      else {
        locale = __b.__locale_;
      }
      uint64_t v21 = (*(uint64_t (**)(uint64_t, void *, size_t))(*(void *)v7 + 96))(v7, locale, v16);
      uint64_t v22 = v21;
      if (SHIBYTE(v27) < 0)
      {
        operator delete(__b.__locale_);
        if (v22 != v16)
        {
LABEL_30:
          std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
          goto LABEL_31;
        }
      }
      else if (v21 != v16)
      {
        goto LABEL_30;
      }
    }
    if (v11 - v12 >= 1
      && (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 96))(v7, v12, v11 - v12) != v11 - v12)
    {
      goto LABEL_30;
    }
    *((void *)v6 + 3) = 0;
  }
LABEL_31:
  MEMORY[0x25A2D60F0](v24);
  return a1;
}

void sub_2590C4D28(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  MEMORY[0x25A2D60F0](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v17 + *(void *)(*v17 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2590C4CF8);
}

void sub_2590C4D94(_Unwind_Exception *a1)
{
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B8];
  uint64_t v3 = *MEMORY[0x263F8C2B8];
  *(void *)a1 = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(v2 + 72);
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 64);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x25A2D6270](a1 + 128);
  return a1;
}

uint64_t PixelBufferUtils::pixelFormatFromString(PixelBufferUtils *this, const char *a2)
{
  if (!strcmp((const char *)this, "24RG")) {
    return 24;
  }
  if (!strcmp((const char *)this, "ARGB")) {
    return 32;
  }
  return bswap32(*(_DWORD *)this);
}

uint64_t PixelBufferUtils::wrapAsDifferentPixelFormat(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef *a3, __CVBuffer **a4)
{
  OSType v5 = a2;
  CVPixelBufferRetain(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  CVPixelBufferCreateWithBytes(v7, Width, Height, v5, BaseAddress, BytesPerRow, (CVPixelBufferReleaseBytesCallback)pixelBufferDeallocator, this, 0, a3);
  return CVPixelBufferUnlockBaseAddress(this, 1uLL);
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, (size_t)a2);
  *(void *)a3 = BaseAddressOfPlane;
  *(void *)(a3 + 8) = CVPixelBufferGetHeightOfPlane(this, (size_t)a2);
  *(void *)(a3 + 16) = CVPixelBufferGetWidthOfPlane(this, (size_t)a2);
  *(void *)(a3 + 24) = CVPixelBufferGetBytesPerRowOfPlane(this, (size_t)a2);
  if (!BaseAddressOfPlane)
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
}

void PixelBufferUtils::asVImageBuffer(PixelBufferUtils *this@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  *(void *)a2 = BaseAddress;
  *(void *)(a2 + 8) = CVPixelBufferGetHeight(this);
  *(void *)(a2 + 16) = CVPixelBufferGetWidth(this);
  *(void *)(a2 + 24) = CVPixelBufferGetBytesPerRow(this);
  if (!BaseAddress)
  {
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
}

void PixelBufferUtils::releasePixelBuffer(CVPixelBufferRef *this, __CVBuffer **a2)
{
  *this = 0;
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(size_t width, size_t height, OSType pixelFormatType, int a4)
{
  CFDictionaryRef BufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (a4) {
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  }
  if (CVPixelBufferCreate(v8, width, height, pixelFormatType, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

uint64_t getBufferAttributes(void)
{
  v3[2] = *MEMORY[0x263EF8340];
  {
    uint64_t v1 = *MEMORY[0x263F04078];
    v2[0] = *MEMORY[0x263F04130];
    v2[1] = v1;
    v3[0] = MEMORY[0x263EFFA78];
    v3[1] = &unk_27071DC78;
    getBufferAttributes(void)::bufAttr = [NSDictionary dictionaryWithObjects:v3 forKeys:v2 count:2];
  }
  return getBufferAttributes(void)::bufAttr;
}

void sub_2590C52D4(_Unwind_Exception *a1)
{
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSizeAndFormat(PixelBufferUtils *this, __CVBuffer *a2)
{
  int v2 = (int)a2;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  CFDictionaryRef BufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (v2) {
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  }
  if (CVPixelBufferCreate(v8, Width, Height, PixelFormatType, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

CVPixelBufferRef PixelBufferUtils::createPixelBufferWithSameSize(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  OSType v4 = a2;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  CFDictionaryRef BufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (a3) {
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  }
  if (CVPixelBufferCreate(v9, Width, Height, v4, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

CVPixelBufferRef PixelBufferUtils::createPixelBuffer(OSType pixelFormatType, CGSize a2, int a3)
{
  double height = a2.height;
  double width = a2.width;
  CFDictionaryRef BufferAttributes = 0;
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  if (a3) {
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  }
  if (CVPixelBufferCreate(v7, (unint64_t)width, (unint64_t)height, pixelFormatType, BufferAttributes, &pixelBufferOut))
  {
    return 0;
  }
  else
  {
    return pixelBufferOut;
  }
}

uint64_t PixelBufferUtils::horizontalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return v4;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return v4;
        }
        int v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return v4;
      }
      int v5 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return v4;
      }
      int v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        goto LABEL_35;
      }
      int v5 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return v4;
      }
      int v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if (this == 825437747 || this == 843264104) {
        return v4;
      }
      if (this != 875704422) {
        goto LABEL_30;
      }
LABEL_35:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    if (this == 32) {
      return v4;
    }
    int v5 = 825306677;
  }
  if (this == v5) {
    return v4;
  }
LABEL_30:
  uint64_t v6 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (v6)
  {
    CFAllocatorRef v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      CFAllocatorRef v8 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
      uint64_t v9 = [v8 objectAtIndexedSubscript:a2];

      CFAllocatorRef v7 = (void *)v9;
    }
    uint64_t v10 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042B8]];
    uint64_t v11 = v10;
    if (v10) {
      uint64_t v4 = (int)[v10 intValue];
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "horizontalSubsamplingForPixelFormat", 315, this, v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_2590C576C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590C5788(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::planeCountForPixelFormat(PixelBufferUtils *this)
{
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return 0;
        }
        int v2 = 1751410032;
      }
      else
      {
        if (this == 1751411059) {
          return 0;
        }
        if (this == 1919365990) {
          return 3;
        }
        int v2 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return 0;
      }
      int v2 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return 0;
      }
      int v2 = 1717855600;
    }
LABEL_29:
    if (this != v2) {
      goto LABEL_34;
    }
    return 0;
  }
  if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        return 2;
      }
      int v2 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return 0;
      }
      int v2 = 1278226536;
    }
    goto LABEL_29;
  }
  if ((int)this <= 825437746)
  {
    if (this == 32) {
      return 0;
    }
    int v2 = 825306677;
    goto LABEL_29;
  }
  if (this == 825437747 || this == 843264104) {
    return 0;
  }
  if (this == 875704422) {
    return 2;
  }
LABEL_34:
  int v5 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (!v5)
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v11 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "planeCountForPixelFormat", 500, this, v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  uint64_t v6 = v5;
  CFAllocatorRef v7 = [v5 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
  CFAllocatorRef v8 = v7;
  if (v7) {
    uint64_t v3 = [v7 count];
  }
  else {
    uint64_t v3 = 0;
  }

  return v3;
}

void sub_2590C5A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590C5A50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::verticalSubsamplingForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  uint64_t v4 = 1;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return v4;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return v4;
        }
        int v5 = 1932996149;
      }
    }
    else if ((int)this <= 1380411456)
    {
      if (this == 1380401729) {
        return v4;
      }
      int v5 = 1380410945;
    }
    else
    {
      if (this == 1380411457 || this == 1647392359) {
        return v4;
      }
      int v5 = 1717855600;
    }
  }
  else if ((int)this > 875704437)
  {
    if ((int)this <= 1111970368)
    {
      if (this == 875704438) {
        goto LABEL_35;
      }
      int v5 = 1094862674;
    }
    else
    {
      if (this == 1111970369 || this == 1278226488) {
        return v4;
      }
      int v5 = 1278226536;
    }
  }
  else
  {
    if ((int)this > 825437746)
    {
      if (this == 825437747 || this == 843264104) {
        return v4;
      }
      if (this != 875704422) {
        goto LABEL_30;
      }
LABEL_35:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    if (this == 32) {
      return v4;
    }
    int v5 = 825306677;
  }
  if (this == v5) {
    return v4;
  }
LABEL_30:
  uint64_t v6 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (v6)
  {
    CFAllocatorRef v7 = (void *)v6;
    if (PixelBufferUtils::planeCountForPixelFormat(this))
    {
      CFAllocatorRef v8 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
      uint64_t v9 = [v8 objectAtIndexedSubscript:a2];

      CFAllocatorRef v7 = (void *)v9;
    }
    uint64_t v10 = [v7 objectForKeyedSubscript:*MEMORY[0x263F042D0]];
    char v11 = v10;
    if (v10) {
      uint64_t v4 = (int)[v10 intValue];
    }
    else {
      uint64_t v4 = 1;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "verticalSubsamplingForPixelFormat", 362, this, v12);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_2590C5D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590C5D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t PixelBufferUtils::pixelSizeForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  if ((int)this > 1278226535)
  {
    if ((int)this <= 1717855599)
    {
      if ((int)this <= 1380410944)
      {
        if (this != 1278226536)
        {
          if (this != 1380401729) {
            goto LABEL_41;
          }
          return 4;
        }
        return 2;
      }
      if (this == 1380410945) {
        return 16;
      }
      if (this == 1380411457) {
        return 8;
      }
      int v5 = 1647392359;
    }
    else if ((int)this > 1751411058)
    {
      if (this == 1751411059) {
        return 2;
      }
      if (this == 1919365990) {
        return 4;
      }
      int v5 = 1932996149;
    }
    else
    {
      if (this == 1717855600 || this == 1717856627) {
        return 4;
      }
      int v5 = 1751410032;
    }
LABEL_33:
    if (this != v5) {
      goto LABEL_41;
    }
    return 2;
  }
  if ((int)this <= 875704437)
  {
    if ((int)this > 825437746)
    {
      if (this != 825437747)
      {
        if (this != 843264104)
        {
          int v4 = 875704422;
          goto LABEL_16;
        }
        return 4;
      }
      return 2;
    }
    if (this == 32) {
      return 4;
    }
    int v5 = 825306677;
    goto LABEL_33;
  }
  if ((int)this > 1094862673)
  {
    if (this != 1094862674 && this != 1111970369)
    {
      if (this == 1278226488) {
        return 1;
      }
      goto LABEL_41;
    }
    return 4;
  }
  if (this == 875704438 || this == 875836518) {
    goto LABEL_17;
  }
  int v4 = 875836534;
LABEL_16:
  if (this == v4)
  {
LABEL_17:
    if (a2) {
      return 2;
    }
    else {
      return 1;
    }
  }
LABEL_41:
  CFAllocatorRef v8 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  if (PixelBufferUtils::planeCountForPixelFormat(this))
  {
    uint64_t v9 = [v8 objectForKeyedSubscript:*MEMORY[0x263F042C8]];
    uint64_t v10 = [v9 objectAtIndexedSubscript:a2];

    CFAllocatorRef v8 = (void *)v10;
  }
  char v11 = [v8 objectForKeyedSubscript:*MEMORY[0x263F04250]];
  uint64_t v12 = v11;
  if (v11)
  {
    [v11 floatValue];
    unint64_t v6 = vcvtps_u32_f32(v13 * 0.125);
  }
  else
  {

    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v16 >= 0) {
      BOOL v14 = __p;
    }
    else {
      BOOL v14 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "pixelSizeForPixelFormat", 410, this, v14);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v6;
}

void sub_2590C6094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::componentsPerPixelForPixelFormat(PixelBufferUtils *this, uint64_t a2)
{
  unint64_t v4 = 4;
  if ((int)this > 1380401728)
  {
    if ((int)this > 1717856626)
    {
      if ((int)this <= 1751411058)
      {
        if (this == 1717856627) {
          return 1;
        }
        int v5 = 1751410032;
      }
      else
      {
        if (this == 1751411059 || this == 1919365990) {
          return 1;
        }
        int v5 = 1932996149;
      }
      goto LABEL_31;
    }
    if ((int)this > 1380411456)
    {
      if (this == 1380411457) {
        return v4;
      }
      if (this == 1647392359) {
        return 1;
      }
      int v5 = 1717855600;
      goto LABEL_31;
    }
    if (this == 1380401729) {
      return v4;
    }
    int v6 = 1380410945;
LABEL_27:
    if (this == v6) {
      return v4;
    }
    goto LABEL_38;
  }
  if ((int)this > 875704437)
  {
    if ((int)this > 1111970368)
    {
      if (this == 1111970369) {
        return v4;
      }
      if (this == 1278226488) {
        return 1;
      }
      int v5 = 1278226536;
      goto LABEL_31;
    }
    if (this == 875704438) {
      goto LABEL_34;
    }
    int v6 = 1094862674;
    goto LABEL_27;
  }
  if ((int)this > 825437746)
  {
    if (this != 825437747)
    {
      if (this == 843264104) {
        return 2;
      }
      if (this != 875704422) {
        goto LABEL_38;
      }
LABEL_34:
      if (a2) {
        return 2;
      }
      else {
        return 1;
      }
    }
    return 1;
  }
  if (this == 32) {
    return v4;
  }
  int v5 = 825306677;
LABEL_31:
  if (this == v5) {
    return 1;
  }
LABEL_38:
  CFAllocatorRef v8 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  uint64_t v9 = [v8 objectForKeyedSubscript:@"BitsPerComponent"];
  if (v9)
  {
    unint64_t v10 = PixelBufferUtils::pixelSizeForPixelFormat(this, a2);
    [v9 floatValue];
    unint64_t v4 = (unint64_t)(float)((float)v10 / ceilf(v11 * 0.125));
  }
  else
  {

    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v14 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "componentsPerPixelForPixelFormat", 454, this, v12);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v4;
}

void sub_2590C6398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL PixelBufferUtils::isPixelFormatCompressed(PixelBufferUtils *this)
{
  int v2 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  unint64_t v3 = 0;
  uint64_t v4 = *MEMORY[0x263F042C8];
  uint64_t v5 = *MEMORY[0x263F04278];
  while (v3 < PixelBufferUtils::planeCountForPixelFormat(this))
  {
    int v6 = [v2 objectForKeyedSubscript:v4];
    CFAllocatorRef v7 = [v6 objectAtIndexedSubscript:v3];

    CFAllocatorRef v8 = [v7 objectForKeyedSubscript:v5];
    uint64_t v9 = v8;
    if (v8 && [v8 intValue])
    {

      BOOL v10 = 1;
      goto LABEL_10;
    }

    ++v3;
  }
  float v11 = [v2 objectForKeyedSubscript:v5];
  CFAllocatorRef v7 = v11;
  if (v11) {
    BOOL v10 = [v11 intValue] != 0;
  }
  else {
    BOOL v10 = 0;
  }
LABEL_10:

  return v10;
}

void sub_2590C64E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

PixelBufferUtils *PixelBufferUtils::uncompressedEquivalentForPixelFormat(PixelBufferUtils *this)
{
  int v2 = CVPixelFormatDescriptionGetDescriptionWithPixelFormatType();
  unint64_t v3 = [v2 objectForKeyedSubscript:*MEMORY[0x263F042B0]];
  uint64_t v4 = v3;
  if (v3)
  {
    this = (PixelBufferUtils *)[v3 unsignedIntValue];
  }
  else if (PixelBufferUtils::isPixelFormatCompressed(this))
  {
    PixelBufferUtils::pixelFormatAsString((unint64_t)this, (char *)__p);
    if (v8 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "uncompressedEquivalentForPixelFormat", 539, this, v5);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    this = 0;
  }

  return this;
}

void sub_2590C65FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::createRotatedPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3)
{
  if (!this) {
    return 0;
  }
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if ((a2 & 0xFFFFFFFD) == 1) {
    size_t v9 = Height;
  }
  else {
    size_t v9 = Width;
  }
  if ((a2 & 0xFFFFFFFD) != 1) {
    size_t Width = Height;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v10 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v10, v9, Width, PixelFormatType, BufferAttributes, &pixelBufferOut)) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = pixelBufferOut;
  }
  if (PixelBufferUtils::rotatePixelBuffer(this, v12, a2, a3))
  {
    CVPixelBufferRelease(v12);
    return 0;
  }
  return v12;
}

uint64_t PixelBufferUtils::rotatePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, int a4)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t result = 0xFFFFFFFFLL;
  if (pixelBuffer && a2)
  {
    uint8_t v8 = a3;
    unsigned int v9 = a3 & 0xFFFFFFFD;
    size_t Width = CVPixelBufferGetWidth(pixelBuffer);
    if (v9 == 1)
    {
      if (Width != CVPixelBufferGetHeight(a2)
        || (size_t Height = CVPixelBufferGetHeight(pixelBuffer), Height != CVPixelBufferGetWidth(a2)))
      {
LABEL_14:
        NSLog(&cfstr_SDErrorInvalid.isa, "rotatePixelBuffer", 858);
        return 0xFFFFFFFFLL;
      }
    }
    else
    {
      if (Width != CVPixelBufferGetWidth(a2)) {
        goto LABEL_14;
      }
      size_t v12 = CVPixelBufferGetHeight(pixelBuffer);
      if (v12 != CVPixelBufferGetHeight(a2)) {
        goto LABEL_14;
      }
    }
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (a4)
    {
      if (PixelFormatType > 1751411058)
      {
        if (PixelFormatType > 1919365991)
        {
          if (PixelFormatType == 1919365992) {
            goto LABEL_25;
          }
          int v14 = 1932996149;
        }
        else
        {
          if (PixelFormatType == 1751411059) {
            goto LABEL_25;
          }
          int v14 = 1919365990;
        }
      }
      else if (PixelFormatType > 1380410944)
      {
        if (PixelFormatType == 1380410945) {
          goto LABEL_25;
        }
        int v14 = 1717856627;
      }
      else
      {
        if (PixelFormatType == 825306677) {
          goto LABEL_25;
        }
        int v14 = 825437747;
      }
      if (PixelFormatType != v14)
      {
        src.data = 0;
        if (VTImageRotationSessionCreate())
        {
          MEMORY[0x25A2D5EF0](src.data);
          CFRelease(src.data);
          NSLog(&cfstr_SDErrorUnableT_2.isa, "createVTRotationSession", 782);
          int v20 = MEMORY[0x25A2D5F00](0, pixelBuffer, a2);
        }
        else
        {
          int v20 = MEMORY[0x25A2D5F00](src.data, pixelBuffer, a2);
        }
        if (!v20) {
          return 0;
        }
        NSLog(&cfstr_SDErrorVtimage.isa, "rotatePixelBufferVT", 822);
        return 0xFFFFFFFFLL;
      }
    }
LABEL_25:
    unint64_t v15 = CVPixelBufferGetPixelFormatType(pixelBuffer);
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    src.data = CVPixelBufferGetBaseAddress(pixelBuffer);
    src.double height = CVPixelBufferGetHeight(pixelBuffer);
    src.double width = CVPixelBufferGetWidth(pixelBuffer);
    src.rowBytes = CVPixelBufferGetBytesPerRow(pixelBuffer);
    if (!src.data)
    {
      memset(&src, 0, sizeof(src));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    }
    dest.data = CVPixelBufferGetBaseAddress(a2);
    dest.double height = CVPixelBufferGetHeight(a2);
    dest.double width = CVPixelBufferGetWidth(a2);
    dest.rowBytes = CVPixelBufferGetBytesPerRow(a2);
    if (!dest.data)
    {
      memset(&dest, 0, sizeof(dest));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    }
    if (v9 == 1)
    {
      if (src.width != dest.height || src.height != dest.width)
      {
LABEL_43:
        CVPixelBufferUnlockBaseAddress(a2, 0);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
        return 0xFFFFFFFFLL;
      }
    }
    else if (src.width != dest.width || src.height != dest.height)
    {
      goto LABEL_43;
    }
    *(void *)backColor = 0;
    uint64_t v74 = 0;
    if ((int)v15 > 1380410944)
    {
      if ((int)v15 > 1751410031)
      {
        if ((int)v15 <= 1919365989)
        {
          if (v15 == 1751410032) {
            goto LABEL_73;
          }
          int v19 = 1751411059;
        }
        else
        {
          if (v15 == 1919365990)
          {
            BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            vImagePixelCount HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            vImagePixelCount WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            if (!BaseAddressOfPlane)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount HeightOfPlane = 0;
              vImagePixelCount WidthOfPlane = 0;
              size_t BytesPerRowOfPlane = 0;
            }
            src.data = BaseAddressOfPlane;
            src.double height = HeightOfPlane;
            src.double width = WidthOfPlane;
            src.rowBytes = BytesPerRowOfPlane;
            unint64_t v25 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
            vImagePixelCount v26 = CVPixelBufferGetHeightOfPlane(a2, 0);
            vImagePixelCount v27 = CVPixelBufferGetWidthOfPlane(a2, 0);
            size_t v28 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
            if (!v25)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v26 = 0;
              vImagePixelCount v27 = 0;
              size_t v28 = 0;
            }
            dest.data = v25;
            dest.double height = v26;
            dest.double width = v27;
            dest.rowBytes = v28;
            vImage_Error v16 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            if (v16) {
              goto LABEL_75;
            }
            int64x2_t v29 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            vImagePixelCount v30 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            vImagePixelCount v31 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
            size_t v32 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            if (!v29)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v30 = 0;
              vImagePixelCount v31 = 0;
              size_t v32 = 0;
            }
            src.data = v29;
            src.double height = v30;
            src.double width = v31;
            src.rowBytes = v32;
            int64x2_t v33 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
            vImagePixelCount v34 = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
            vImagePixelCount v35 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
            size_t v36 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
            if (!v33)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v34 = 0;
              vImagePixelCount v35 = 0;
              size_t v36 = 0;
            }
            dest.data = v33;
            dest.double height = v34;
            dest.double width = v35;
            dest.rowBytes = v36;
            vImage_Error v16 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            if (v16) {
              goto LABEL_75;
            }
            unint64_t v37 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
            vImagePixelCount v38 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 2uLL);
            vImagePixelCount v39 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 2uLL);
            size_t v40 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
            if (!v37)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v38 = 0;
              vImagePixelCount v39 = 0;
              size_t v40 = 0;
            }
            src.data = v37;
            src.double height = v38;
            src.double width = v39;
            src.rowBytes = v40;
            char v41 = CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
            vImagePixelCount v42 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
            vImagePixelCount v43 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
            size_t v44 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
            if (!v41)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v42 = 0;
              vImagePixelCount v43 = 0;
              size_t v44 = 0;
            }
            dest.data = v41;
            dest.double height = v42;
            dest.double width = v43;
            dest.rowBytes = v44;
            vImage_Error v17 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
            goto LABEL_74;
          }
          if (v15 == 1919365992)
          {
            uint64_t v45 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            vImagePixelCount v46 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            vImagePixelCount v47 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            size_t v48 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            if (!v45)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v46 = 0;
              vImagePixelCount v47 = 0;
              size_t v48 = 0;
            }
            src.data = v45;
            src.double height = v46;
            src.double width = v47;
            src.rowBytes = v48;
            int v49 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
            vImagePixelCount v50 = CVPixelBufferGetHeightOfPlane(a2, 0);
            vImagePixelCount v51 = CVPixelBufferGetWidthOfPlane(a2, 0);
            size_t v52 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
            if (!v49)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v50 = 0;
              vImagePixelCount v51 = 0;
              size_t v52 = 0;
            }
            dest.data = v49;
            dest.double height = v50;
            dest.double width = v51;
            dest.rowBytes = v52;
            vImage_Error v16 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            if (v16) {
              goto LABEL_75;
            }
            uint64_t v53 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            vImagePixelCount v54 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            vImagePixelCount v55 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
            size_t v56 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            if (!v53)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v54 = 0;
              vImagePixelCount v55 = 0;
              size_t v56 = 0;
            }
            src.data = v53;
            src.double height = v54;
            src.double width = v55;
            src.rowBytes = v56;
            int v57 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
            vImagePixelCount v58 = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
            vImagePixelCount v59 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
            size_t v60 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
            if (!v57)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v58 = 0;
              vImagePixelCount v59 = 0;
              size_t v60 = 0;
            }
            dest.data = v57;
            dest.double height = v58;
            dest.double width = v59;
            dest.rowBytes = v60;
            vImage_Error v16 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            if (v16) {
              goto LABEL_75;
            }
            uint64_t v61 = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
            vImagePixelCount v62 = CVPixelBufferGetHeightOfPlane(pixelBuffer, 2uLL);
            vImagePixelCount v63 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 2uLL);
            size_t v64 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
            if (!v61)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v62 = 0;
              vImagePixelCount v63 = 0;
              size_t v64 = 0;
            }
            src.data = v61;
            src.double height = v62;
            src.double width = v63;
            src.rowBytes = v64;
            uint64_t v65 = CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
            vImagePixelCount v66 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
            vImagePixelCount v67 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
            size_t v68 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
            if (!v65)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v66 = 0;
              vImagePixelCount v67 = 0;
              size_t v68 = 0;
            }
            dest.data = v65;
            dest.double height = v66;
            dest.double width = v67;
            dest.rowBytes = v68;
            vImage_Error v17 = vImageRotate90_Planar16F(&src, &dest, v8, 0, 0);
            goto LABEL_74;
          }
          int v19 = 1932996149;
        }
        goto LABEL_72;
      }
      if ((int)v15 <= 1647392358)
      {
        if (v15 == 1380410945)
        {
          vImage_Error v17 = vImageRotate90_ARGBFFFF(&src, &dest, v8, (const float *)backColor, 0);
          goto LABEL_74;
        }
        if (v15 == 1380411457)
        {
          vImage_Error v17 = vImageRotate90_ARGB16U(&src, &dest, v8, backColor, 0);
          goto LABEL_74;
        }
        goto LABEL_111;
      }
      if (v15 == 1647392359)
      {
LABEL_73:
        vImage_Error v17 = vImageRotate90_Planar16U(&src, &dest, v8, 0, 0);
        goto LABEL_74;
      }
      if (v15 != 1717855600 && v15 != 1717856627) {
        goto LABEL_111;
      }
    }
    else
    {
      if ((int)v15 <= 1094862673)
      {
        if ((int)v15 > 825437746)
        {
          if (v15 != 825437747)
          {
            if (v15 == 875704422 || v15 == 875704438)
            {
              PixelBufferUtils::asVImageBuffer(pixelBuffer, 0, (uint64_t)&src);
              PixelBufferUtils::asVImageBuffer(a2, 0, (uint64_t)&dest);
              vImage_Error v16 = vImageRotate90_Planar8(&src, &dest, v8, 0, 0);
              if (v16)
              {
LABEL_75:
                CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
                CVPixelBufferUnlockBaseAddress(a2, 0);
                return v16 != 0;
              }
              PixelBufferUtils::asVImageBuffer(pixelBuffer, (__CVBuffer *)1, (uint64_t)&__p);
              vImage_Buffer src = __p;
              PixelBufferUtils::asVImageBuffer(a2, (__CVBuffer *)1, (uint64_t)&__p);
              vImage_Buffer dest = __p;
              vImage_Error v17 = vImageRotate90_Planar16U(&src, &dest, v8, 0, 0);
LABEL_74:
              vImage_Error v16 = v17;
              goto LABEL_75;
            }
LABEL_111:
            PixelBufferUtils::pixelFormatAsString(v15, (char *)&__p);
            if ((__p.width & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (vImage_Buffer *)__p.data;
            }
            NSLog(&cfstr_SDErrorPixelFo.isa, "rotatePixelBufferVImage", 745, v15, p_p);
            if (SHIBYTE(__p.width) < 0) {
              operator delete(__p.data);
            }
            vImage_Error v16 = -21773;
            goto LABEL_75;
          }
          goto LABEL_73;
        }
        if (v15 != 32)
        {
          int v19 = 825306677;
LABEL_72:
          if (v15 != v19) {
            goto LABEL_111;
          }
          goto LABEL_73;
        }
LABEL_69:
        vImage_Error v17 = vImageRotate90_ARGB8888(&src, &dest, v8, (const uint8_t *)backColor, 0);
        goto LABEL_74;
      }
      if ((int)v15 <= 1278226533)
      {
        if (v15 == 1094862674) {
          goto LABEL_69;
        }
        int v18 = 1111970369;
        goto LABEL_68;
      }
      if (v15 != 1278226534)
      {
        if (v15 == 1278226536) {
          goto LABEL_73;
        }
        int v18 = 1380401729;
LABEL_68:
        if (v15 != v18) {
          goto LABEL_111;
        }
        goto LABEL_69;
      }
    }
    vImage_Error v17 = vImageRotate90_PlanarF(&src, &dest, v8, 0.0, 0);
    goto LABEL_74;
  }
  return result;
}

void sub_2590C7424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::createCroppedAndScaledPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CGRect a3, CGSize a4)
{
  double height = a4.height;
  double width = a4.width;
  double v7 = a3.size.height;
  double v8 = a3.size.width;
  CGFloat y = a3.origin.y;
  CGFloat x = a3.origin.x;
  if (CGRectIsEmpty(a3))
  {
    double v8 = (double)CVPixelBufferGetWidth(this);
    double v7 = (double)CVPixelBufferGetHeight(this);
    CGFloat x = 0.0;
    CGFloat y = 0.0;
  }
  if (width == *MEMORY[0x263F001B0] && height == *(double *)(MEMORY[0x263F001B0] + 8))
  {
    double width = v8;
    double height = v7;
  }
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v13 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v13, (unint64_t)width, (unint64_t)height, PixelFormatType, BufferAttributes, &pixelBufferOut))
  {
    unint64_t v15 = 0;
  }
  else
  {
    unint64_t v15 = pixelBufferOut;
  }
  v18.origin.CGFloat x = x;
  v18.origin.CGFloat y = y;
  v18.size.double width = v8;
  v18.size.double height = v7;
  if (PixelBufferUtils::cropAndScalePixelBuffer(this, v15, a2, v18))
  {
    CVPixelBufferRelease(v15);
    return 0;
  }
  return v15;
}

uint64_t PixelBufferUtils::cropAndScalePixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, __CVBuffer *a3, CGRect a4)
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  if (a3)
  {
    signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
    if (PixelFormatType <= 1751410031)
    {
      if (PixelFormatType > 1717855599)
      {
        if (PixelFormatType != 1717855600 && PixelFormatType != 1717856627) {
          goto LABEL_43;
        }
      }
      else if (PixelFormatType != 825306677 && PixelFormatType != 825437747)
      {
        goto LABEL_43;
      }
    }
    else if (PixelFormatType <= 1919365989)
    {
      if (PixelFormatType != 1751410032 && PixelFormatType != 1751411059) {
        goto LABEL_43;
      }
    }
    else if (PixelFormatType != 1919365990 && PixelFormatType != 1919365992 && PixelFormatType != 1932996149)
    {
LABEL_43:
      v100.origin.double x = x;
      v100.origin.double y = y;
      v100.size.double width = width;
      v100.size.double height = height;
      VTTransferSessiounint64_t n = createVTTransferSession(v100);
      OSStatus v37 = VTPixelTransferSessionTransferImage(VTTransferSession, pixelBuffer, a2);
      if (VTTransferSession)
      {
        VTPixelTransferSessionInvalidate(VTTransferSession);
        CFRelease(VTTransferSession);
      }
      if (v37)
      {
        NSLog(&cfstr_SDErrorVtpixel.isa, v38, "cropAndScalePixelBufferVT", 1094);
        return 0xFFFFFFFFLL;
      }
      return 0;
    }
  }
  v99.origin.double x = x;
  v99.origin.double y = y;
  v99.size.double width = width;
  v99.size.double height = height;
  if (CGRectIsEmpty(v99))
  {
    double width = (double)CVPixelBufferGetWidth(pixelBuffer);
    double height = (double)CVPixelBufferGetHeight(pixelBuffer);
    double x = 0.0;
    double y = 0.0;
  }
  size_t v11 = CVPixelBufferGetWidth(pixelBuffer);
  size_t v12 = CVPixelBufferGetHeight(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  unint64_t v14 = (unint64_t)y;
  double v15 = trunc(width);
  double v16 = trunc(height);
  vImagePixelCount v17 = CVPixelBufferGetWidth(a2);
  size_t v18 = CVPixelBufferGetHeight(a2);
  double v19 = v16 + (double)v14;
  if (v15 + trunc(x) > (double)v11 || v19 > (double)v12)
  {
    NSLog(&cfstr_SDErrorInvalid_0.isa, v19, "cropAndScalePixelBufferVImage", 930);
    return 0xFFFFFFFFLL;
  }
  vImagePixelCount v22 = v18;
  unint64_t v23 = (unint64_t)x;
  unint64_t v24 = (unint64_t)height;
  unint64_t v25 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  unint64_t v26 = (unint64_t)v25;
  if ((int)v25 <= 875836517)
  {
    if (v25 != 875704422 && v25 != 875704438) {
      goto LABEL_47;
    }
LABEL_31:
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
    size_t v28 = WidthOfPlane / CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
    src.double height = (unint64_t)height;
    src.double width = (unint64_t)width;
    size_t v30 = HeightOfPlane / CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
    src.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
    src.data = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0) + src.rowBytes * (int)v14 + (int)v23;
    v97.double height = (unint64_t)(v16 / (double)v28);
    v97.double width = (unint64_t)(v15 / (double)v30);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
    v97.rowBytes = BytesPerRowOfPlane;
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
    if ((v14 & 0x80000000) == 0) {
      int v33 = v14;
    }
    else {
      int v33 = v14 + 1;
    }
    vImagePixelCount v34 = &BaseAddressOfPlane[BytesPerRowOfPlane * ((uint64_t)v33 >> 1)];
    if ((v23 & 0x80000000) == 0) {
      int v35 = (unint64_t)x;
    }
    else {
      int v35 = v23 + 1;
    }
    v97.data = &v34[v35 & 0xFFFFFFFE];
    dest.data = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
    dest.double height = CVPixelBufferGetHeightOfPlane(a2, 0);
    dest.double width = CVPixelBufferGetWidthOfPlane(a2, 0);
    dest.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
    if (!dest.data)
    {
      memset(&dest, 0, sizeof(dest));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
    }
    v95.data = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
    v95.double height = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
    v95.double width = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
    v95.rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
    if (!v95.data)
    {
      memset(&v95, 0, sizeof(v95));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
    }
    vImageScale_Planar8(&src, &dest, 0, 0);
    vImageScale_CbCr8(&v97, &v95, 0, 0);
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return 0;
  }
  if (v25 == 875836534 || v25 == 875836518) {
    goto LABEL_31;
  }
LABEL_47:
  unint64_t v94 = (unint64_t)width;
  unint64_t v39 = PixelBufferUtils::pixelSizeForPixelFormat(v25, 0);
  if (v39)
  {
    unint64_t v40 = v39;
    CVPixelBufferLockBaseAddress(a2, 0);
    CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
    src.double height = (unint64_t)height;
    src.double width = (unint64_t)width;
    src.rowBytes = BytesPerRow;
    unint64_t v93 = v40 * v23;
    char v41 = (char *)CVPixelBufferGetBaseAddress(pixelBuffer) + v40 * v23 + BytesPerRow * v14;
    src.data = v41;
    v97.double height = v22;
    v97.double width = v17;
    size_t v42 = CVPixelBufferGetBytesPerRow(a2);
    v97.rowBytes = v42;
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
    v97.data = BaseAddress;
    if ((int)v26 > 1380410944)
    {
      if ((int)v26 > 1751410031)
      {
        if ((int)v26 > 1919365989)
        {
          if (v26 != 1932996149)
          {
            if (v26 != 1919365992)
            {
              if (v26 == 1919365990)
              {
                size_t v44 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
                CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
                CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
                size_t v45 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
                if (!v44)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  size_t v45 = 0;
                }
                src.double width = (unint64_t)width;
                src.rowBytes = v45;
                src.data = &v44[v93 + v45 * v14];
                src.double height = (unint64_t)height;
                vImagePixelCount v46 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
                vImagePixelCount v47 = CVPixelBufferGetHeightOfPlane(a2, 0);
                vImagePixelCount v48 = CVPixelBufferGetWidthOfPlane(a2, 0);
                size_t v49 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
                if (!v46)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  vImagePixelCount v47 = 0;
                  vImagePixelCount v48 = 0;
                  size_t v49 = 0;
                }
                v97.data = v46;
                v97.double height = v47;
                v97.double width = v48;
                v97.rowBytes = v49;
                vImage_Error v50 = vImageScale_PlanarF(&src, &v97, 0, 0);
                if (v50) {
                  goto LABEL_121;
                }
                vImagePixelCount v51 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
                CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
                CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
                size_t v52 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
                if (!v51)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  size_t v52 = 0;
                }
                src.double width = (unint64_t)width;
                src.rowBytes = v52;
                src.data = &v51[v93 + v52 * v14];
                src.double height = (unint64_t)height;
                uint64_t v53 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
                vImagePixelCount v54 = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
                vImagePixelCount v55 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
                size_t v56 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
                if (!v53)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  vImagePixelCount v54 = 0;
                  vImagePixelCount v55 = 0;
                  size_t v56 = 0;
                }
                v97.data = v53;
                v97.double height = v54;
                v97.double width = v55;
                v97.rowBytes = v56;
                vImage_Error v50 = vImageScale_PlanarF(&src, &v97, 0, 0);
                if (v50) {
                  goto LABEL_121;
                }
                int v57 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
                CVPixelBufferGetHeightOfPlane(pixelBuffer, 2uLL);
                CVPixelBufferGetWidthOfPlane(pixelBuffer, 2uLL);
                size_t v58 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
                if (!v57)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  size_t v58 = 0;
                }
                src.double width = (unint64_t)width;
                src.rowBytes = v58;
                src.data = &v57[v93 + v58 * v14];
                src.double height = (unint64_t)height;
                vImagePixelCount v59 = CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
                vImagePixelCount v60 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
                vImagePixelCount v61 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
                size_t v62 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
                if (!v59)
                {
                  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
                  vImagePixelCount v60 = 0;
                  vImagePixelCount v61 = 0;
                  size_t v62 = 0;
                }
                v97.data = v59;
                v97.double height = v60;
                v97.double width = v61;
                v97.rowBytes = v62;
                vImage_Error v63 = vImageScale_PlanarF(&src, &v97, 0, 0);
                goto LABEL_113;
              }
LABEL_138:
              PixelBufferUtils::pixelFormatAsString(v26, (char *)&dest);
              if ((dest.width & 0x8000000000000000) == 0) {
                p_vImage_Buffer dest = &dest;
              }
              else {
                p_vImage_Buffer dest = dest.data;
              }
              NSLog(&cfstr_SDErrorPixelFo.isa, "cropAndScalePixelBufferVImage", 1035, v26, p_dest);
              if (SHIBYTE(dest.width) < 0) {
                operator delete(dest.data);
              }
              vImage_Error v50 = -21778;
              goto LABEL_121;
            }
            uint64_t v74 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
            CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
            CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
            size_t v75 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
            if (!v74)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              size_t v75 = 0;
            }
            src.double width = (unint64_t)width;
            src.rowBytes = v75;
            src.data = &v74[v93 + v75 * v14];
            src.double height = (unint64_t)height;
            float64x2x2_t v76 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
            vImagePixelCount v77 = CVPixelBufferGetHeightOfPlane(a2, 0);
            vImagePixelCount v78 = CVPixelBufferGetWidthOfPlane(a2, 0);
            size_t v79 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
            if (!v76)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v77 = 0;
              vImagePixelCount v78 = 0;
              size_t v79 = 0;
            }
            v97.data = v76;
            v97.double height = v77;
            v97.double width = v78;
            v97.rowBytes = v79;
            vImage_Error v50 = vImageScale_Planar16F(&src, &v97, 0, 0);
            if (v50) {
              goto LABEL_121;
            }
            float64x2x2_t v80 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
            CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
            CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
            size_t v81 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
            if (!v80)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              size_t v81 = 0;
            }
            src.double width = (unint64_t)width;
            src.rowBytes = v81;
            src.data = &v80[v93 + v81 * v14];
            src.double height = (unint64_t)height;
            float64x2x2_t v82 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
            vImagePixelCount v83 = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
            vImagePixelCount v84 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
            size_t v85 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
            if (!v82)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v83 = 0;
              vImagePixelCount v84 = 0;
              size_t v85 = 0;
            }
            v97.data = v82;
            v97.double height = v83;
            v97.double width = v84;
            v97.rowBytes = v85;
            vImage_Error v50 = vImageScale_Planar16F(&src, &v97, 0, 0);
            if (v50) {
              goto LABEL_121;
            }
            unint64_t v86 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 2uLL);
            CVPixelBufferGetHeightOfPlane(pixelBuffer, 2uLL);
            CVPixelBufferGetWidthOfPlane(pixelBuffer, 2uLL);
            size_t v87 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 2uLL);
            if (!v86)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              size_t v87 = 0;
            }
            src.double width = (unint64_t)width;
            src.rowBytes = v87;
            src.data = &v86[v93 + v87 * v14];
            src.double height = (unint64_t)height;
            BOOL v88 = CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
            vImagePixelCount v89 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
            vImagePixelCount v90 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
            size_t v91 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
            if (!v88)
            {
              NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
              vImagePixelCount v89 = 0;
              vImagePixelCount v90 = 0;
              size_t v91 = 0;
            }
            v97.data = v88;
            v97.double height = v89;
            v97.double width = v90;
            v97.rowBytes = v91;
            vImage_Error v63 = vImageScale_Planar16F(&src, &v97, 0, 0);
LABEL_113:
            vImage_Error v50 = v63;
LABEL_121:
            CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
            CVPixelBufferUnlockBaseAddress(a2, 0);
            return v50 != 0;
          }
          goto LABEL_92;
        }
        if (v26 != 1751410032 && v26 != 1751411059) {
          goto LABEL_138;
        }
        goto LABEL_114;
      }
      if ((int)v26 <= 1717855599)
      {
        if (v26 == 1380410945)
        {
          vImage_Error v63 = vImageScale_ARGBFFFF(&src, &v97, 0, 0);
          goto LABEL_113;
        }
        int v65 = 1647392359;
        goto LABEL_82;
      }
      if (v26 == 1717855600)
      {
LABEL_102:
        vImage_Error v50 = 0;
        if (!v22 || !v17) {
          goto LABEL_121;
        }
        for (unint64_t i = 0; i != v22; ++i)
        {
          for (unint64_t j = 0; j != v17; ++j)
            *(_DWORD *)&BaseAddress[4 * j] = *(_DWORD *)&v41[4
                                                           * (int)(float)((float)((float)j * (float)v94)
                                                                        * (float)(1.0 / (float)v17))
                                                           + BytesPerRow
                                                           * (int)(float)((float)((float)i * (float)v24)
                                                                        * (float)(1.0 / (float)v22))];
          BaseAddress += v42;
        }
LABEL_120:
        vImage_Error v50 = 0;
        goto LABEL_121;
      }
      int v66 = 1717856627;
LABEL_101:
      if (v26 != v66) {
        goto LABEL_138;
      }
      goto LABEL_102;
    }
    if ((int)v26 > 1111970368)
    {
      if ((int)v26 <= 1278226535)
      {
        if (v26 != 1111970369)
        {
          int v66 = 1278226534;
          goto LABEL_101;
        }
LABEL_112:
        vImage_Error v63 = vImageScale_ARGB8888(&src, &v97, 0, 0);
        goto LABEL_113;
      }
      if (v26 == 1278226536)
      {
LABEL_114:
        vImage_Error v50 = 0;
        if (!v22 || !v17) {
          goto LABEL_121;
        }
        for (unint64_t k = 0; k != v22; ++k)
        {
          for (unint64_t m = 0; m != v17; ++m)
            *(_WORD *)&BaseAddress[2 * m] = *(_WORD *)&v41[2
                                                         * (int)(float)((float)((float)m * (float)v94)
                                                                      * (float)(1.0 / (float)v17))
                                                         + BytesPerRow
                                                         * (int)(float)((float)((float)k * (float)v24)
                                                                      * (float)(1.0 / (float)v22))];
          BaseAddress += v42;
        }
        goto LABEL_120;
      }
      int v67 = 1380401729;
    }
    else
    {
      if ((int)v26 <= 825437746)
      {
        if (v26 != 32)
        {
          int v65 = 825306677;
LABEL_82:
          if (v26 != v65) {
            goto LABEL_138;
          }
          goto LABEL_92;
        }
        goto LABEL_112;
      }
      if (v26 == 825437747)
      {
LABEL_92:
        vImage_Error v50 = 0;
        if (!v22 || !v17) {
          goto LABEL_121;
        }
        for (unint64_t n = 0; n != v22; ++n)
        {
          for (unint64_t ii = 0; ii != v17; ++ii)
            *(_WORD *)&BaseAddress[2 * ii] = *(_WORD *)&v41[2
                                                          * (int)(float)((float)((float)ii * (float)v94)
                                                                       * (float)(1.0 / (float)v17))
                                                          + BytesPerRow
                                                          * (int)(float)((float)((float)n * (float)v24)
                                                                       * (float)(1.0 / (float)v22))];
          BaseAddress += v42;
        }
        goto LABEL_120;
      }
      int v67 = 1094862674;
    }
    if (v26 != v67) {
      goto LABEL_138;
    }
    goto LABEL_112;
  }
  PixelBufferUtils::pixelFormatAsString(v26, (char *)&src);
  if ((src.width & 0x8000000000000000) == 0) {
    p_vImage_Buffer src = &src;
  }
  else {
    p_vImage_Buffer src = src.data;
  }
  NSLog(&cfstr_SDErrorPixelFo.isa, "cropAndScalePixelBufferVImage", 952, v26, p_src);
  if (SHIBYTE(src.width) < 0) {
    operator delete(src.data);
  }
  return 0xFFFFFFFFLL;
}

void sub_2590C84A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

VTPixelTransferSessionRef createVTTransferSession(CGRect a1)
{
  CGFloat height = a1.size.height;
  CGFloat width = a1.size.width;
  CGFloat y = a1.origin.y;
  CGFloat x = a1.origin.x;
  VTPixelTransferSessionRef pixelTransferSessionOut = 0;
  OSStatus v5 = VTPixelTransferSessionCreate(0, &pixelTransferSessionOut);
  v9.origin.CGFloat x = x;
  v9.origin.CGFloat y = y;
  v9.size.CGFloat width = width;
  v9.size.CGFloat height = height;
  if (!CGRectIsEmpty(v9))
  {
    v10.origin.CGFloat x = x;
    v10.origin.CGFloat y = y;
    v10.size.CGFloat width = width;
    v10.size.CGFloat height = height;
    DictionaryRepresentatiounint64_t n = CGRectCreateDictionaryRepresentation(v10);
    v5 |= VTSessionSetProperty(pixelTransferSessionOut, (CFStringRef)*MEMORY[0x263F1EA10], DictionaryRepresentation);
    CFRelease(DictionaryRepresentation);
  }
  VTPixelTransferSessionRef result = pixelTransferSessionOut;
  if (v5)
  {
    VTPixelTransferSessionInvalidate(pixelTransferSessionOut);
    CFRelease(pixelTransferSessionOut);
    NSLog(&cfstr_SDErrorUnableT_1.isa, "createVTTransferSession", 1065);
    return 0;
  }
  return result;
}

__CVBuffer *PixelBufferUtils::createConvertedPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  OSType v4 = a2;
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v8 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v8, Width, Height, v4, BufferAttributes, &pixelBufferOut)) {
    size_t v11 = 0;
  }
  else {
    size_t v11 = pixelBufferOut;
  }
  if (PixelBufferUtils::convertPixelBufferFormat(this, v11, a3, v10))
  {
    CVPixelBufferRelease(v11);
    return 0;
  }
  return v11;
}

uint64_t PixelBufferUtils::convertPixelBufferFormat(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t v3 = 0xFFFFFFFFLL;
  if (!this || !a2) {
    return v3;
  }
  int v5 = (int)a3;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  unint64_t v8 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v10 = v8;
  if (v5)
  {
    if ((int)PixelFormatType <= 1751410031)
    {
      if ((int)PixelFormatType > 1717855599)
      {
        if (PixelFormatType == 1717855600) {
          goto LABEL_17;
        }
        int v11 = 1717856627;
      }
      else
      {
        if (PixelFormatType == 825306677) {
          goto LABEL_17;
        }
        int v11 = 825437747;
      }
    }
    else if ((int)PixelFormatType <= 1919365989)
    {
      if (PixelFormatType == 1751410032) {
        goto LABEL_17;
      }
      int v11 = 1751411059;
    }
    else
    {
      if (PixelFormatType == 1919365990 || PixelFormatType == 1919365992) {
        goto LABEL_17;
      }
      int v11 = 1932996149;
    }
    if (PixelFormatType == v11) {
      goto LABEL_17;
    }
    if ((int)v8 <= 1751410031)
    {
      if ((int)v8 > 1717855599)
      {
        if (v8 == 1717855600) {
          goto LABEL_17;
        }
        int v33 = 1717856627;
      }
      else
      {
        if (v8 == 825306677) {
          goto LABEL_17;
        }
        int v33 = 825437747;
      }
    }
    else if ((int)v8 <= 1919365989)
    {
      if (v8 == 1751410032) {
        goto LABEL_17;
      }
      int v33 = 1751411059;
    }
    else
    {
      if (v8 == 1919365990 || v8 == 1919365992) {
        goto LABEL_17;
      }
      int v33 = 1932996149;
    }
    if (v8 != v33)
    {
      VTTransferSessiounint64_t n = createVTTransferSession(*MEMORY[0x263F001A8]);
      OSStatus v58 = VTPixelTransferSessionTransferImage(VTTransferSession, this, a2);
      if (VTTransferSession)
      {
        VTPixelTransferSessionInvalidate(VTTransferSession);
        CFRelease(VTTransferSession);
      }
      if (!v58) {
        return 0;
      }
      NSLog(&cfstr_SDErrorVtpixel.isa, "cropAndScalePixelBufferVT", 1094);
      return v3;
    }
  }
LABEL_17:
  if (PixelFormatType == v8)
  {
    OSType v12 = CVPixelBufferGetPixelFormatType(this);
    if (v12 == CVPixelBufferGetPixelFormatType(a2))
    {
      uint64_t v13 = *MEMORY[0x263F00148];
      uint64_t v14 = *(void *)(MEMORY[0x263F00148] + 8);
      uint64_t v15 = *MEMORY[0x263F001A8];
      uint64_t v16 = *(void *)(MEMORY[0x263F001A8] + 8);
      uint64_t v17 = *(void *)(MEMORY[0x263F001A8] + 16);
      uint64_t v18 = *(void *)(MEMORY[0x263F001A8] + 24);
      return copyPixelBufferVImage(a2, *(CGPoint *)&v13, this, *(CGRect *)&v15);
    }
    return v3;
  }
  BOOL v20 = 0;
  if ((int)PixelFormatType <= 1751410031)
  {
    if (PixelFormatType != 1717855600)
    {
      if (PixelFormatType != 1717856627) {
        goto LABEL_36;
      }
      goto LABEL_28;
    }
LABEL_30:
    BOOL v20 = v8 == 1751411059 || v8 == 1717856627;
    goto LABEL_36;
  }
  if (PixelFormatType == 1751410032) {
    goto LABEL_30;
  }
  if (PixelFormatType != 1751411059) {
    goto LABEL_36;
  }
LABEL_28:
  BOOL v20 = 1;
  if (v8 != 1717855600) {
    BOOL v20 = v8 == 1751410032;
  }
LABEL_36:
  if ((int)PixelFormatType <= 1380410944)
  {
    if ((int)PixelFormatType > 1094862673)
    {
      if ((int)PixelFormatType > 1278226533)
      {
        if (PixelFormatType != 1278226534)
        {
          if (PixelFormatType != 1278226536)
          {
            int v22 = 1380401729;
            goto LABEL_59;
          }
          goto LABEL_71;
        }
LABEL_84:
        if ((int)v8 <= 1717856626)
        {
          if (v8 == 1278226536) {
            goto LABEL_107;
          }
          if (v8 != 1717855600)
          {
LABEL_176:
            return convertGreyscaleAsColor(this, v8, a2);
          }
        }
        else if (v8 != 1717856627)
        {
          if (v8 != 1751411059 && v8 != 1751410032) {
            goto LABEL_176;
          }
LABEL_107:
          uint64_t v3 = convertFloat32ToFloat16(this, a2);
          if (v3) {
            BOOL v37 = 0;
          }
          else {
            BOOL v37 = v20;
          }
          if (!v37) {
            return v3;
          }
          int v35 = &__block_literal_global_1006;
LABEL_112:
          PixelBufferUtils::forEveryPixel(a2, v35, -1);
          return 0;
        }
        size_t v36 = &__block_literal_global_203;
        goto LABEL_129;
      }
      if (PixelFormatType != 1094862674)
      {
        int v22 = 1111970369;
LABEL_59:
        if (PixelFormatType == v22) {
          goto LABEL_60;
        }
        goto LABEL_134;
      }
      goto LABEL_60;
    }
    if ((int)PixelFormatType <= 875704421)
    {
      if (PixelFormatType == 32) {
        goto LABEL_60;
      }
      if (PixelFormatType != 825437747)
      {
LABEL_134:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&src);
        if ((src.width & 0x8000000000000000) == 0) {
          p_vImage_Buffer src = &src;
        }
        else {
          p_vImage_Buffer src = src.data;
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 2040, PixelFormatType, p_src);
        goto LABEL_229;
      }
      goto LABEL_89;
    }
    if (PixelFormatType != 875704422 && PixelFormatType != 875704438) {
      goto LABEL_134;
    }
    if ((int)v8 > 1380401728)
    {
      if ((int)v8 <= 1380411456)
      {
        if (v8 == 1380401729) {
          goto LABEL_204;
        }
        unsigned __int16 v38 = 26177;
      }
      else
      {
        if (v8 == 1919365992)
        {
          return createRGBPlanarHalfFromBuffer(this, a2);
        }
        if (v8 == 1919365990)
        {
          return createRGBPlanarFloatFromBuffer(this, a2);
        }
        unsigned __int16 v38 = 26689;
      }
      int v26 = v38 | 0x52470000;
LABEL_203:
      if (v8 == v26) {
        goto LABEL_204;
      }
LABEL_225:
      PixelBufferUtils::pixelFormatAsString(v8, (char *)&src);
      if ((src.width & 0x8000000000000000) == 0) {
        data = &src;
      }
      else {
        data = src.data;
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 1984, v10, data);
LABEL_229:
      if (SHIBYTE(src.width) < 0) {
        operator delete(src.data);
      }
      return v3;
    }
    if ((int)v8 <= 875704437)
    {
      if (v8 == 32) {
        goto LABEL_204;
      }
      if (v8 != 875704422) {
        goto LABEL_225;
      }
    }
    else if (v8 != 875704438)
    {
      if (v8 != 1094862674)
      {
        int v26 = 1111970369;
        goto LABEL_203;
      }
LABEL_204:
      return createBGRAPermutesFromYUV(this, v8, a2);
    }
    NSLog(&cfstr_WarningIncorre.isa);
    uint64_t v59 = *MEMORY[0x263F00148];
    uint64_t v60 = *(void *)(MEMORY[0x263F00148] + 8);
    uint64_t v61 = *MEMORY[0x263F001A8];
    uint64_t v62 = *(void *)(MEMORY[0x263F001A8] + 8);
    uint64_t v63 = *(void *)(MEMORY[0x263F001A8] + 16);
    uint64_t v64 = *(void *)(MEMORY[0x263F001A8] + 24);
    return copyPixelBufferMultiPlane(a2, *(CGPoint *)&v59, this, *(CGRect *)&v61);
  }
  if ((int)PixelFormatType > 1717856626)
  {
    if ((int)PixelFormatType <= 1751411058)
    {
      if (PixelFormatType == 1717856627) {
        goto LABEL_84;
      }
      if (PixelFormatType != 1751410032) {
        goto LABEL_134;
      }
    }
    else if (PixelFormatType != 1751411059)
    {
      if (PixelFormatType == 1919365990)
      {
        return convertRGBPlanarFloat(this, a2);
      }
      if (PixelFormatType == 1919365992)
      {
        return convertRGBPlanarHalf(this, a2);
      }
      goto LABEL_134;
    }
LABEL_71:
    if ((int)v8 <= 1717856626)
    {
      if (v8 == 1278226534)
      {
LABEL_99:
        uint64_t v3 = convertFloat16ToFloat32(this, a2);
        if (v3) {
          BOOL v34 = 0;
        }
        else {
          BOOL v34 = v20;
        }
        if (!v34) {
          return v3;
        }
        int v35 = &__block_literal_global_205;
        goto LABEL_112;
      }
      unsigned __int16 v25 = 25968;
LABEL_98:
      if (v8 != (v25 | 0x66640000))
      {
        ConvertedPixelBufferFormat = PixelBufferUtils::createConvertedPixelBufferFormat(this, (__CVBuffer *)0x4C303066, 0);
        uint64_t v56 = convertGreyscaleAsColor(ConvertedPixelBufferFormat, v10, a2);
        CVPixelBufferRelease(ConvertedPixelBufferFormat);
        return v56;
      }
      goto LABEL_99;
    }
    if (v8 != 1751411059 && v8 != 1751410032)
    {
      unsigned __int16 v25 = 26995;
      goto LABEL_98;
    }
    size_t v36 = &__block_literal_global_207;
LABEL_129:
    PixelBufferUtils::forEveryPixel(this, a2, v36, (char *)0xFFFFFFFFLL);
    return 0;
  }
  if ((int)PixelFormatType > 1647392358)
  {
    if (PixelFormatType != 1647392359)
    {
      if (PixelFormatType == 1717855600) {
        goto LABEL_84;
      }
      goto LABEL_134;
    }
LABEL_89:
    unint64_t v27 = CVPixelBufferGetPixelFormatType(a2);
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    BaseAddress = (uint16x4_t *)CVPixelBufferGetBaseAddress(this);
    src.data = BaseAddress;
    vImagePixelCount Height = CVPixelBufferGetHeight(this);
    src.CGFloat height = Height;
    vImagePixelCount Width = CVPixelBufferGetWidth(this);
    src.CGFloat width = Width;
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
    src.rowBytes = BytesPerRow;
    if (BaseAddress)
    {
      size_t v32 = BytesPerRow;
    }
    else
    {
      memset(&src, 0, sizeof(src));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v32 = 0;
      vImagePixelCount Height = 0;
      vImagePixelCount Width = 0;
    }
    unint64_t v40 = (float16x8_t *)CVPixelBufferGetBaseAddress(a2);
    dest.data = v40;
    vImagePixelCount v41 = CVPixelBufferGetHeight(a2);
    dest.CGFloat height = v41;
    vImagePixelCount v42 = CVPixelBufferGetWidth(a2);
    dest.CGFloat width = v42;
    size_t v43 = CVPixelBufferGetBytesPerRow(a2);
    dest.rowBytes = v43;
    if (!v40)
    {
      memset(&dest, 0, sizeof(dest));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v43 = 0;
      vImagePixelCount v41 = 0;
      vImagePixelCount v42 = 0;
    }
    if (v27 == 1278226536 || v27 == 1751410032)
    {
      uint64_t v3 = 0xFFFFFFFFLL;
      if (v40)
      {
        if (BaseAddress)
        {
          if (Width == v42 && Height == v41)
          {
            uint64_t v3 = 0;
            if (Height)
            {
              if (Width)
              {
                if (Width > 0xF)
                {
                  if (Width == (Width & 0xFFFFFFFFFFFFFFF0))
                  {
                    uint64_t v66 = 0;
                    int v67 = v40 + 1;
                    size_t v68 = BaseAddress + 2;
                    float32x4_t v69 = (float32x4_t)vdupq_n_s32(0x3903126Fu);
                    do
                    {
                      int8x16x2_t v70 = v68;
                      float64x2x2_t v71 = v67;
                      vImagePixelCount v72 = Width;
                      do
                      {
                        float16x8_t v73 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v70)), v69)), vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v70->i8)), v69));
                        v71[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v70[-2])), v69)), vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v70[-2].i8)), v69));
                        *float64x2x2_t v71 = v73;
                        v71 += 2;
                        v70 += 4;
                        v72 -= 16;
                      }
                      while (v72);
                      ++v66;
                      int v67 = (float16x8_t *)((char *)v67 + v43);
                      size_t v68 = (uint16x4_t *)((char *)v68 + v32);
                    }
                    while (v66 != Height);
                  }
                  else
                  {
                    uint64_t v74 = 0;
                    size_t v75 = v40 + 1;
                    float64x2x2_t v76 = BaseAddress + 2;
                    unint64_t v77 = (2 * Width) & 0xFFFFFFFFFFFFFFE0;
                    vImagePixelCount v78 = &v40->i8[v77];
                    size_t v79 = (char *)BaseAddress + v77;
                    float32x4_t v80 = (float32x4_t)vdupq_n_s32(0x3903126Fu);
                    do
                    {
                      size_t v81 = v76;
                      float64x2x2_t v82 = v75;
                      unint64_t v83 = Width & 0xFFFFFFFFFFFFFFF0;
                      do
                      {
                        float16x8_t v84 = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(*v81)), v80)), vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v81->i8)), v80));
                        v82[-1] = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmulq_f32(vcvtq_f32_u32(vmovl_u16(v81[-2])), v80)), vmulq_f32(vcvtq_f32_u32(vmovl_high_u16(*(uint16x8_t *)v81[-2].i8)), v80));
                        *float64x2x2_t v82 = v84;
                        v82 += 2;
                        v81 += 4;
                        v83 -= 16;
                      }
                      while (v83);
                      size_t v85 = v79;
                      unint64_t v86 = v78;
                      vImagePixelCount v87 = Width - (Width & 0xFFFFFFFFFFFFFFF0);
                      do
                      {
                        unsigned int v88 = *(unsigned __int16 *)v85;
                        v85 += 2;
                        _S1 = (float)v88 * 0.000125;
                        __asm { FCVT            H1, S1 }
                        *(_WORD *)unint64_t v86 = LOWORD(_S1);
                        v86 += 2;
                        --v87;
                      }
                      while (v87);
                      ++v74;
                      size_t v75 = (float16x8_t *)((char *)v75 + v43);
                      float64x2x2_t v76 = (uint16x4_t *)((char *)v76 + v32);
                      v78 += v43;
                      v79 += v32;
                    }
                    while (v74 != Height);
                  }
                }
                else
                {
                  for (uint64_t i = 0; i != Height; ++i)
                  {
                    size_t v45 = BaseAddress;
                    vImagePixelCount v46 = v40;
                    vImagePixelCount v47 = Width;
                    do
                    {
                      unsigned int v48 = v45->u16[0];
                      size_t v45 = (uint16x4_t *)((char *)v45 + 2);
                      _S0 = (float)v48 * 0.000125;
                      __asm { FCVT            H0, S0 }
                      v46->i16[0] = LOWORD(_S0);
                      vImagePixelCount v46 = (float16x8_t *)((char *)v46 + 2);
                      --v47;
                    }
                    while (v47);
                    unint64_t v40 = (float16x8_t *)((char *)v40 + v43);
                    BaseAddress = (uint16x4_t *)((char *)BaseAddress + v32);
                  }
                }
                uint64_t v3 = 0;
              }
            }
          }
        }
      }
    }
    else if (v27 == 1717855600)
    {
      if (vImageConvert_16UToF(&src, &dest, 0.0, 0.000125, 0)) {
        uint64_t v3 = 0xFFFFFFFFLL;
      }
      else {
        uint64_t v3 = 0;
      }
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v27, (char *)__p);
      if (v91 >= 0) {
        vImagePixelCount v54 = __p;
      }
      else {
        vImagePixelCount v54 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convertfp13_3ToDepthMeters", 1590, v27, v54);
      if (v91 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v3 = 0xFFFFFFFFLL;
    }
    CVPixelBufferUnlockBaseAddress(this, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v3;
  }
  if (PixelFormatType != 1380410945)
  {
    int v22 = 1380411457;
    goto LABEL_59;
  }
LABEL_60:
  if ((int)v8 > 1380401728)
  {
    if ((int)v8 <= 1380411456)
    {
      if (v8 == 1380401729) {
        goto LABEL_122;
      }
      unsigned __int16 v24 = 26177;
    }
    else
    {
      if (v8 == 1919365992)
      {
        if (PixelFormatType == 1380410945)
        {
          return convert4ChannelToPlanar<float,half>(this, a2);
        }
        else if (PixelFormatType == 1380411457)
        {
          return convert4ChannelToPlanar<half,half>(this, a2);
        }
        else
        {
          return convert4ChannelToPlanar<unsigned char,half>(this, a2);
        }
      }
      if (v8 == 1919365990)
      {
        if (PixelFormatType == 1380410945)
        {
          return convert4ChannelToPlanar<float,float>(this, a2);
        }
        else if (PixelFormatType == 1380411457)
        {
          return convert4ChannelToPlanar<half,float>(this, a2);
        }
        else
        {
          return convert4ChannelToPlanar<unsigned char,float>(this, a2);
        }
      }
      unsigned __int16 v24 = 26689;
    }
    int v23 = v24 | 0x52470000;
LABEL_121:
    if (v8 == v23) {
      goto LABEL_122;
    }
    goto LABEL_172;
  }
  if ((int)v8 <= 875704437)
  {
    if (v8 == 32) {
      goto LABEL_122;
    }
    if (v8 != 875704422)
    {
LABEL_172:
      PixelBufferUtils::pixelFormatAsString(v8, (char *)&src);
      if ((src.width & 0x8000000000000000) == 0) {
        uint64_t v53 = &src;
      }
      else {
        uint64_t v53 = src.data;
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convertPixelBufferFormat", 1946, v10, v53);
      goto LABEL_229;
    }
  }
  else if (v8 != 875704438)
  {
    if (v8 != 1094862674)
    {
      int v23 = 1111970369;
      goto LABEL_121;
    }
LABEL_122:
    return convert4ChannelFormats(this, v8, a2);
  }
  return YUVFromBGRAPermutes(this, a2, v9);
}

void sub_2590C96B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t copyPixelBufferVImage(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  if (a1 == a3) {
    return 0;
  }
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  double v9 = a2.y;
  double v10 = a2.x;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a3);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(a1)) {
    return 0xFFFFFFFFLL;
  }
  if (!CVPixelBufferGetPlaneCount(a3))
  {
    OSType pixelSize = CVPixelBufferGetPixelFormatType(a3);
    CVPixelBufferLockBaseAddress(a1, 0);
    CVPixelBufferLockBaseAddress(a3, 1uLL);
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a3);
    src.data = BaseAddress;
    vImagePixelCount v21 = CVPixelBufferGetHeight(a3);
    src.double height = v21;
    vImagePixelCount v22 = CVPixelBufferGetWidth(a3);
    src.double width = v22;
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a3);
    src.rowBytes = BytesPerRow;
    if (BaseAddress)
    {
      size_t v24 = BytesPerRow;
    }
    else
    {
      memset(&src, 0, sizeof(src));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v24 = 0;
      vImagePixelCount v21 = 0;
      vImagePixelCount v22 = 0;
    }
    unsigned __int16 v25 = (char *)CVPixelBufferGetBaseAddress(a1);
    dest.data = v25;
    vImagePixelCount v26 = CVPixelBufferGetHeight(a1);
    dest.double height = v26;
    vImagePixelCount v27 = CVPixelBufferGetWidth(a1);
    dest.double width = v27;
    size_t v28 = CVPixelBufferGetBytesPerRow(a1);
    dest.rowBytes = v28;
    if (v25)
    {
      size_t v29 = v28;
    }
    else
    {
      memset(&dest, 0, sizeof(dest));
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v29 = 0;
      vImagePixelCount v26 = 0;
      vImagePixelCount v27 = 0;
    }
    unint64_t pixelSizea = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)pixelSize, 0);
    v37.origin.double x = x;
    v37.origin.double y = y;
    v37.size.double width = width;
    v37.size.double height = height;
    if (!CGRectIsEmpty(v37))
    {
      if (x >= (double)v22 || y >= (double)v21 || width > (double)v22 || height > (double)v21) {
        goto LABEL_28;
      }
      vImagePixelCount v22 = (unint64_t)width;
      vImagePixelCount v21 = (unint64_t)height;
      src.data = &BaseAddress[v24 * (unint64_t)y + pixelSizea * (unint64_t)x];
      src.double height = (unint64_t)height;
      src.double width = (unint64_t)width;
    }
    double v30 = (double)v22;
    double v31 = (double)v21;
    v38.origin.double x = v10;
    v38.origin.double y = v9;
    v38.size.double width = (double)v22;
    v38.size.double height = (double)v21;
    if (CGRectIsEmpty(v38))
    {
LABEL_16:
      vImageCopyBuffer(&src, &dest, pixelSizea, 0);
      CVPixelBufferUnlockBaseAddress(a1, 0);
      CVPixelBufferUnlockBaseAddress(a3, 1uLL);
      return 0;
    }
    if (v10 < (double)v27 && v9 < (double)v26 && v30 <= (double)v27 && v31 <= (double)v26)
    {
      dest.data = &v25[v29 * (unint64_t)v9 + pixelSizea * (unint64_t)v10];
      dest.double height = (unint64_t)v31;
      dest.double width = (unint64_t)v30;
      goto LABEL_16;
    }
LABEL_28:
    NSLog(&cfstr_SDErrorRegionI.isa, "updateVImageBufferToRegion", 1812);
    return 0xFFFFFFFFLL;
  }
  double v13 = v10;
  double v14 = v9;
  double v15 = x;
  double v16 = y;
  double v17 = width;
  double v18 = height;
  return copyPixelBufferMultiPlane(a1, *(CGPoint *)&v13, a3, *(CGRect *)&v15);
}

uint64_t convert4ChannelFormats(__CVBuffer *a1, int a2, __CVBuffer *a3)
{
  uint64_t v90 = *MEMORY[0x263EF8340];
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  uint64_t v7 = RGBA_FORMAT_MAP();
  LODWORD(src.data) = a2;
  HIDWORD(src.data) = PixelFormatType;
  unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)src.data, &src);
  double v9 = (const uint8_t *)v8[3];
  int v10 = *((_DWORD *)v8 + 8);
  CVPixelBufferLockBaseAddress(a3, 0);
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(a1);
  src.data = BaseAddress;
  src.vImagePixelCount height = CVPixelBufferGetHeight(a1);
  src.vImagePixelCount width = CVPixelBufferGetWidth(a1);
  src.size_t rowBytes = CVPixelBufferGetBytesPerRow(a1);
  if (!BaseAddress)
  {
    memset(&src, 0, sizeof(src));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
  dest.data = CVPixelBufferGetBaseAddress(a3);
  dest.vImagePixelCount height = CVPixelBufferGetHeight(a3);
  dest.vImagePixelCount width = CVPixelBufferGetWidth(a3);
  dest.size_t rowBytes = CVPixelBufferGetBytesPerRow(a3);
  if (!dest.data)
  {
    memset(&dest, 0, sizeof(dest));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
  _S0 = 1.0;
  long long maxFloat = xmmword_259120E80;
  minFloat[0] = 0;
  minFloat[1] = 0;
  switch(v10)
  {
    case 0:
      vImage_Error v13 = vImagePermuteChannels_ARGB8888(&src, &dest, v9, 0);
      goto LABEL_27;
    case 1:
      vImagePixelCount height = src.height;
      if (src.height != dest.height) {
        goto LABEL_51;
      }
      vImagePixelCount width = src.width;
      if (src.width != dest.width) {
        goto LABEL_51;
      }
      if (!src.height || !src.width) {
        goto LABEL_61;
      }
      uint64_t v16 = 0;
      size_t rowBytes = dest.rowBytes;
      data = (char *)src.data;
      size_t v19 = src.rowBytes;
      BOOL v20 = (char *)dest.data;
      do
      {
        vImagePixelCount v21 = &data[v16 * v19];
        vImagePixelCount v22 = width;
        int v23 = &v20[v16 * rowBytes];
        do
        {
          LOBYTE(_S0) = *v21;
          *(float *)&unsigned int v24 = (float)LODWORD(_S0) * 0.0039216;
          *(float *)&v23[4 * *v9] = *(float *)&v24;
          LOBYTE(v24) = v21[1];
          *(float *)&unsigned int v25 = (float)v24 * 0.0039216;
          *(float *)&v23[4 * v9[1]] = *(float *)&v25;
          LOBYTE(v25) = v21[2];
          *(float *)&unsigned int v26 = (float)v25 * 0.0039216;
          *(float *)&v23[4 * v9[2]] = *(float *)&v26;
          LOBYTE(v26) = v21[3];
          _S0 = (float)v26 * 0.0039216;
          *(float *)&v23[4 * v9[3]] = _S0;
          v21 += 4;
          v23 += 16;
          --v22;
        }
        while (v22);
        uint64_t v27 = 0;
        ++v16;
      }
      while (v16 != height);
      break;
    case 2:
      vImagePixelCount v28 = src.height;
      if (src.height != dest.height) {
        goto LABEL_51;
      }
      vImagePixelCount v29 = src.width;
      if (src.width != dest.width) {
        goto LABEL_51;
      }
      if (!src.height || !src.width) {
        goto LABEL_61;
      }
      uint64_t v30 = 0;
      size_t v32 = dest.rowBytes;
      double v31 = (char *)src.data;
      size_t v33 = src.rowBytes;
      BOOL v34 = (char *)dest.data;
      do
      {
        int v35 = &v31[v30 * v33];
        vImagePixelCount v36 = v29;
        CGRect v37 = &v34[v30 * v32];
        do
        {
          LOBYTE(_S0) = *v35;
          *(float *)&_S0 = (float)LODWORD(_S0) * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * *v9] = _S0;
          LOBYTE(_S0) = v35[1];
          *(float *)&_S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[1]] = _S0;
          LOBYTE(_S0) = v35[2];
          *(float *)&_S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[2]] = _S0;
          LOBYTE(_S0) = v35[3];
          _S0 = (float)_S0 * 0.0039216;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v37[2 * v9[3]] = LOWORD(_S0);
          v35 += 4;
          v37 += 8;
          --v36;
        }
        while (v36);
        uint64_t v27 = 0;
        ++v30;
      }
      while (v30 != v28);
      break;
    case 3:
      vImage_Error v13 = vImageConvert_ARGBFFFFtoARGB8888_dithered(&src, &dest, (const float *)&maxFloat, (const float *)minFloat, 0, v9, 0);
      goto LABEL_27;
    case 4:
      vImage_Error v13 = vImagePermuteChannels_ARGBFFFF(&src, &dest, v9, 0);
LABEL_27:
      uint64_t v27 = v13;
      break;
    case 5:
      vImagePixelCount v45 = src.height;
      if (src.height != dest.height) {
        goto LABEL_51;
      }
      vImagePixelCount v46 = src.width;
      if (src.width != dest.width) {
        goto LABEL_51;
      }
      if (!src.height || !src.width) {
        goto LABEL_61;
      }
      uint64_t v47 = 0;
      size_t v49 = dest.rowBytes;
      unsigned int v48 = (char *)src.data;
      size_t v50 = src.rowBytes;
      vImagePixelCount v51 = (char *)dest.data;
      do
      {
        size_t v52 = &v48[v47 * v50];
        vImagePixelCount v53 = v46;
        vImagePixelCount v54 = &v51[v47 * v49];
        do
        {
          _S0 = *(_DWORD *)v52;
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * *v9] = _S0;
          _S0 = *((_DWORD *)v52 + 1);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[1]] = _S0;
          _S0 = *((_DWORD *)v52 + 2);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[2]] = _S0;
          _S0 = *((_DWORD *)v52 + 3);
          __asm { FCVT            H0, S0 }
          *(_WORD *)&v54[2 * v9[3]] = _S0;
          v54 += 8;
          v52 += 16;
          --v53;
        }
        while (v53);
        uint64_t v27 = 0;
        ++v47;
      }
      while (v47 != v45);
      break;
    case 6:
      vImagePixelCount v59 = src.height;
      if (src.height != dest.height) {
        goto LABEL_51;
      }
      vImagePixelCount v60 = src.width;
      if (src.width != dest.width) {
        goto LABEL_51;
      }
      if (!src.height || !src.width) {
        goto LABEL_61;
      }
      uint64_t v61 = 0;
      size_t v63 = dest.rowBytes;
      uint64_t v62 = (char *)src.data;
      size_t v64 = src.rowBytes;
      int v65 = (char *)dest.data;
      do
      {
        uint64_t v66 = &v62[v61 * v64];
        vImagePixelCount v67 = v60;
        size_t v68 = &v65[v61 * v63];
        do
        {
          _H0 = *(_WORD *)v66;
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * *v9] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 1);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[1]] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 2);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[2]] = _S0;
          LOWORD(_S0) = *((_WORD *)v66 + 3);
          __asm { FCVT            S0, H0 }
          *(_DWORD *)&v68[4 * v9[3]] = _S0;
          v68 += 16;
          v66 += 8;
          --v67;
        }
        while (v67);
        uint64_t v27 = 0;
        ++v61;
      }
      while (v61 != v59);
      break;
    case 7:
      vImagePixelCount v74 = src.height;
      if (src.height != dest.height || src.width != dest.width) {
        goto LABEL_51;
      }
      if (src.height && src.width)
      {
        vImagePixelCount v75 = 0;
        vImagePixelCount v76 = 1;
        do
        {
          if (v76)
          {
            vImagePixelCount v78 = 0;
            size_t v79 = (char *)dest.data + dest.rowBytes * v75;
            float32x4_t v80 = (__int16 *)((char *)src.data + src.rowBytes * v75);
            do
            {
              _H0 = *v80;
              __asm { FCVT            S0, H0 }
              v79[*v9] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[1];
              __asm { FCVT            S0, H0 }
              v79[v9[1]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[2];
              __asm { FCVT            S0, H0 }
              v79[v9[2]] = (int)(float)(_S0 * 255.0);
              LOWORD(_S0) = v80[3];
              __asm { FCVT            S0, H0 }
              v79[v9[3]] = (int)(float)(_S0 * 255.0);
              ++v78;
              v79 += 4;
              vImagePixelCount v76 = src.width;
              v80 += 4;
            }
            while (v78 < src.width);
            vImagePixelCount v74 = src.height;
          }
          uint64_t v27 = 0;
          ++v75;
        }
        while (v75 < v74);
      }
      else
      {
LABEL_61:
        uint64_t v27 = 0;
      }
      break;
    default:
LABEL_51:
      uint64_t v27 = -1;
      break;
  }
  CVPixelBufferUnlockBaseAddress(a3, 0);
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  if (v27) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

BOOL YUVFromBGRAPermutes(__CVBuffer *a1, __CVBuffer *a2, __CVBuffer *a3)
{
  uint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType == 1380411457 || (uint64_t v6 = PixelFormatType, PixelFormatType == 1380410945))
  {
    uint64_t v6 = 1111970369;
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    pixelBufferOut.data = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v9, Width, Height, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut)) {
      data = 0;
    }
    else {
      data = (__CVBuffer *)pixelBufferOut.data;
    }
    vImage_Error v12 = (int)convert4ChannelFormats(a1, 1111970369, data);
  }
  else
  {
    vImage_Error v12 = 0;
    data = a1;
  }
  uint64_t v13 = RGBA_FORMAT_MAP();
  pixelBufferOut.data = (void *)((v6 << 32) | 0x20);
  double v14 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v13, (unint64_t)pixelBufferOut.data, &pixelBufferOut)[3];
  CVPixelBufferLockBaseAddress(a2, 0);
  CVPixelBufferLockBaseAddress(data, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(data);
  pixelBufferOut.data = BaseAddress;
  pixelBufferOut.vImagePixelCount height = CVPixelBufferGetHeight(data);
  pixelBufferOut.vImagePixelCount width = CVPixelBufferGetWidth(data);
  pixelBufferOut.size_t rowBytes = CVPixelBufferGetBytesPerRow(data);
  if (!BaseAddress)
  {
    memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
  destYp.data = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  destYp.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a2, 0);
  destYp.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a2, 0);
  destYp.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  if (!destYp.data)
  {
    memset(&destYp, 0, sizeof(destYp));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  destCbCr.data = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  destCbCr.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
  destCbCr.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
  destCbCr.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
  if (!destCbCr.data)
  {
    memset(&destCbCr, 0, sizeof(destCbCr));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  if ((YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) == 0)
  {
    vImage_YpCbCrPixelRange pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_259125368;
    vImage_Error v12 = vImageConvert_ARGBToYpCbCr_GenerateConversion((const vImage_ARGBToYpCbCrMatrix *)*MEMORY[0x263EFAA18], &pixelRange, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImageARGB8888, kvImage420Yp8_CbCr8, 0);
    YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1;
  }
  if (!v12) {
    vImage_Error v12 = vImageConvert_ARGB8888To420Yp8_CbCr8(&pixelBufferOut, &destYp, &destCbCr, &YUVFromBGRAPermutes(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v14, 0);
  }
  CVPixelBufferUnlockBaseAddress(data, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (CVPixelBufferGetPixelFormatType(a1) == 1380410945) {
    CVPixelBufferRelease(data);
  }
  return v12 != 0;
}

uint64_t convert4ChannelToPlanar<half,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      CFAllocatorRef v9 = (unsigned __int8 *)v8[3];
      unsigned int v10 = *((_DWORD *)v8 + 8) - 1;
      float v11 = 1.0;
      if (v10 <= 6) {
        float v11 = flt_259125388[v10];
      }
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      uint64_t v104 = a1;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v15 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v15 = 0;
      }
      LODWORD(__p[0]) = 0;
      size_t v19 = *v9;
      if (v6 <= v19)
      {
        size_t v23 = 0;
        vImagePixelCount v22 = __p;
      }
      else
      {
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *v9);
        CVPixelBufferGetHeightOfPlane(a2, v19);
        CVPixelBufferGetWidthOfPlane(a2, v19);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v19);
        if (BaseAddressOfPlane)
        {
          vImagePixelCount v22 = BaseAddressOfPlane;
          size_t v23 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v23 = 0;
          vImagePixelCount v22 = 0;
        }
      }
      size_t v24 = v9[1];
      pixelBuffer = a2;
      if (v6 <= v24)
      {
        size_t v27 = 0;
        uint64_t v107 = __p;
      }
      else
      {
        unsigned int v25 = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, v24);
        CVPixelBufferGetHeightOfPlane(a2, v24);
        CVPixelBufferGetWidthOfPlane(a2, v24);
        size_t v26 = CVPixelBufferGetBytesPerRowOfPlane(a2, v24);
        uint64_t v107 = v25;
        if (v25)
        {
          size_t v27 = v26;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v27 = 0;
          uint64_t v107 = 0;
        }
      }
      size_t v28 = v9[2];
      if (v6 <= v28)
      {
        size_t v31 = 0;
        vImagePixelCount v29 = (char *)__p;
      }
      else
      {
        vImagePixelCount v29 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v9[2]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v28);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v28);
        size_t v30 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v28);
        if (v29)
        {
          size_t v31 = v30;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v31 = 0;
        }
      }
      size_t v32 = v9[3];
      if (v6 <= v32)
      {
        size_t v34 = 0;
        size_t v33 = (char *)__p;
        size_t v35 = Height;
        if (!Height) {
          goto LABEL_77;
        }
      }
      else
      {
        size_t v33 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v32);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v32);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v32);
        size_t v34 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v32);
        if (!v33)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v34 = 0;
        }
        size_t v35 = Height;
        if (!Height) {
          goto LABEL_77;
        }
      }
      if (Width)
      {
        uint64_t v36 = 0;
        unint64_t v37 = Width & 0xFFFFFFFFFFFFFFFELL;
        CGRect v38 = (float *)v22 + 1;
        unint64_t v39 = (__int16 *)(BaseAddress + 8);
        unint64_t v40 = (__int16 *)(BaseAddress + 10);
        vImagePixelCount v41 = v107;
        vImagePixelCount v42 = (float *)v107 + 1;
        size_t v43 = (__int16 *)(BaseAddress + 12);
        size_t v44 = (float *)(v29 + 4);
        vImagePixelCount v45 = (__int16 *)(BaseAddress + 14);
        vImagePixelCount v46 = (float *)(v33 + 4);
        uint64_t v47 = v33;
        unsigned int v48 = v29;
        size_t v49 = v22;
        while (1)
        {
          if ((void **)((char *)v22 + v23 * v36) == __p) {
            goto LABEL_52;
          }
          if (Width < 2) {
            break;
          }
          vImagePixelCount v51 = v39;
          size_t v52 = v38;
          unint64_t v53 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v51 - 4);
            _H1 = *v51;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v52 - 1) = v11 * _S0;
            *size_t v52 = v11 * _S1;
            v52 += 2;
            v51 += 8;
            v53 -= 2;
          }
          while (v53);
          unint64_t v50 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v37) {
            goto LABEL_50;
          }
LABEL_52:
          if ((void **)((char *)v107 + v27 * v36) == __p) {
            goto LABEL_60;
          }
          if (Width < 2)
          {
            unint64_t v68 = 0;
LABEL_58:
            size_t v76 = Width - v68;
            uint64_t v77 = 4 * v68;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[2 * v77 + 2];
              __asm { FCVT            S0, H0 }
              *(float *)((char *)v41 + v77) = v11 * _S0;
              v77 += 4;
              --v76;
            }
            while (v76);
            goto LABEL_60;
          }
          float32x4_t v69 = v42;
          int8x16x2_t v70 = v40;
          unint64_t v71 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v70 - 4);
            _H1 = *v70;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v69 - 1) = v11 * _S0;
            float *v69 = v11 * _S1;
            v70 += 8;
            v69 += 2;
            v71 -= 2;
          }
          while (v71);
          unint64_t v68 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v37) {
            goto LABEL_58;
          }
LABEL_60:
          if (&v29[v31 * v36] == (char *)__p) {
            goto LABEL_68;
          }
          if (Width < 2)
          {
            unint64_t v80 = 0;
LABEL_66:
            size_t v88 = Width - v80;
            uint64_t v89 = 4 * v80;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[2 * v89 + 4];
              __asm { FCVT            S0, H0 }
              *(float *)&v48[v89] = v11 * _S0;
              v89 += 4;
              --v88;
            }
            while (v88);
            goto LABEL_68;
          }
          size_t v81 = v44;
          float64x2x2_t v82 = v43;
          unint64_t v83 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _H0 = *(v82 - 4);
            _H1 = *v82;
            __asm
            {
              FCVT            S0, H0
              FCVT            S1, H1
            }
            *(v81 - 1) = v11 * _S0;
            *size_t v81 = v11 * _S1;
            v82 += 8;
            v81 += 2;
            v83 -= 2;
          }
          while (v83);
          unint64_t v80 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v37) {
            goto LABEL_66;
          }
LABEL_68:
          if (&v33[v34 * v36] != (char *)__p)
          {
            if (Width >= 2)
            {
              unint64_t v93 = v46;
              unint64_t v94 = v45;
              unint64_t v95 = Width & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                _H0 = *(v94 - 4);
                _H1 = *v94;
                __asm
                {
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                *(v93 - 1) = v11 * _S0;
                *unint64_t v93 = v11 * _S1;
                v94 += 8;
                v93 += 2;
                v95 -= 2;
              }
              while (v95);
              unint64_t v92 = Width & 0xFFFFFFFFFFFFFFFELL;
              if (Width == v37) {
                goto LABEL_43;
              }
            }
            else
            {
              unint64_t v92 = 0;
            }
            size_t v100 = Width - v92;
            uint64_t v101 = 4 * v92;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[2 * v101 + 6];
              __asm { FCVT            S0, H0 }
              *(float *)&v47[v101] = v11 * _S0;
              v101 += 4;
              --v100;
            }
            while (v100);
          }
LABEL_43:
          ++v36;
          CGRect v38 = (float *)((char *)v38 + v23);
          unint64_t v39 = (__int16 *)((char *)v39 + v15);
          size_t v49 = (void **)((char *)v49 + v23);
          BaseAddress += v15;
          unint64_t v40 = (__int16 *)((char *)v40 + v15);
          vImagePixelCount v42 = (float *)((char *)v42 + v27);
          vImagePixelCount v41 = (void **)((char *)v41 + v27);
          size_t v43 = (__int16 *)((char *)v43 + v15);
          size_t v44 = (float *)((char *)v44 + v31);
          v48 += v31;
          vImagePixelCount v45 = (__int16 *)((char *)v45 + v15);
          vImagePixelCount v46 = (float *)((char *)v46 + v34);
          v47 += v34;
          if (v36 == v35) {
            goto LABEL_77;
          }
        }
        unint64_t v50 = 0;
LABEL_50:
        size_t v62 = Width - v50;
        size_t v63 = (float *)v49 + v50;
        size_t v64 = &BaseAddress[8 * v50];
        do
        {
          __int16 v65 = *(_WORD *)v64;
          v64 += 8;
          _H0 = v65;
          __asm { FCVT            S0, H0 }
          *v63++ = v11 * _S0;
          --v62;
        }
        while (v62);
        goto LABEL_52;
      }
LABEL_77:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v104, 1uLL);
      return 0;
    }
    PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
    if (v109 >= 0) {
      double v18 = __p;
    }
    else {
      double v18 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v18);
    if (v109 < 0) {
      operator delete(__p[0]);
    }
    return 4294967294;
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v109 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v16);
    if (v109 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CAA3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      CVPixelBufferRef v57 = (CVPixelBufferRef)v8[3];
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_259125388[v9];
      }
      BaseAddress = (float *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v15 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v15 = 0;
      }
      LODWORD(__p[0]) = 0;
      size_t v19 = (unsigned __int8 *)v57;
      size_t v20 = *(unsigned __int8 *)v57;
      if (v6 <= v20)
      {
        size_t v24 = 0;
        vImagePixelCount v55 = __p;
      }
      else
      {
        unint64_t v21 = v6;
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *(unsigned __int8 *)v57);
        CVPixelBufferGetHeightOfPlane(a2, v20);
        CVPixelBufferGetWidthOfPlane(a2, v20);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v20);
        vImagePixelCount v55 = BaseAddressOfPlane;
        if (BaseAddressOfPlane)
        {
          size_t v24 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v24 = 0;
          vImagePixelCount v55 = 0;
        }
        unint64_t v6 = v21;
        size_t v19 = (unsigned __int8 *)v57;
      }
      size_t v25 = v19[1];
      size_t v26 = v6;
      if (v6 <= v25)
      {
        size_t v29 = 0;
        size_t v27 = (char *)__p;
      }
      else
      {
        size_t v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v19[1]);
        CVPixelBufferGetHeightOfPlane(a2, v25);
        CVPixelBufferGetWidthOfPlane(a2, v25);
        size_t v28 = CVPixelBufferGetBytesPerRowOfPlane(a2, v25);
        if (v27)
        {
          size_t v29 = v28;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v29 = 0;
        }
        size_t v19 = (unsigned __int8 *)v57;
      }
      size_t v53 = v15;
      size_t v54 = Height;
      size_t v30 = v19[2];
      pixelBuffer = a2;
      if (v26 <= v30)
      {
        size_t v34 = 0;
        size_t v32 = (char *)__p;
      }
      else
      {
        size_t v31 = a2;
        size_t v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v30);
        CVPixelBufferGetHeightOfPlane(v31, v30);
        CVPixelBufferGetWidthOfPlane(v31, v30);
        size_t v33 = CVPixelBufferGetBytesPerRowOfPlane(v31, v30);
        if (v32)
        {
          size_t v34 = v33;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v34 = 0;
        }
        size_t v19 = (unsigned __int8 *)v57;
      }
      OSStatus v58 = a1;
      size_t v35 = v19[3];
      if (v26 <= v35)
      {
        size_t v37 = 0;
        uint64_t v36 = (char *)__p;
      }
      else
      {
        uint64_t v36 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v19[3]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v35);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v35);
        size_t v37 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v35);
        if (!v36)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v37 = 0;
        }
      }
      if (v54 && Width)
      {
        uint64_t v38 = 0;
        unint64_t v39 = v36;
        unint64_t v40 = v32;
        vImagePixelCount v41 = v27;
        vImagePixelCount v42 = (float *)v55;
        do
        {
          if ((void **)((char *)v55 + v24 * v38) != __p)
          {
            size_t v43 = BaseAddress;
            size_t v44 = v42;
            size_t v45 = Width;
            do
            {
              float v46 = *v43;
              v43 += 4;
              *v44++ = v46 * v10;
              --v45;
            }
            while (v45);
          }
          if (&v27[v29 * v38] != (char *)__p)
          {
            uint64_t v47 = 0;
            size_t v48 = Width;
            do
            {
              *(float *)&v41[v47] = BaseAddress[v47 + 1] * v10;
              v47 += 4;
              --v48;
            }
            while (v48);
          }
          if (&v32[v34 * v38] != (char *)__p)
          {
            uint64_t v49 = 0;
            size_t v50 = Width;
            do
            {
              *(float *)&v40[v49] = BaseAddress[v49 + 2] * v10;
              v49 += 4;
              --v50;
            }
            while (v50);
          }
          if (&v36[v37 * v38] != (char *)__p)
          {
            uint64_t v51 = 0;
            size_t v52 = Width;
            do
            {
              *(float *)&v39[v51] = BaseAddress[v51 + 3] * v10;
              v51 += 4;
              --v52;
            }
            while (v52);
          }
          ++v38;
          vImagePixelCount v42 = (float *)((char *)v42 + v24);
          BaseAddress = (float *)((char *)BaseAddress + v53);
          v41 += v29;
          v40 += v34;
          v39 += v37;
        }
        while (v38 != v54);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v58, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v60 >= 0) {
        double v18 = __p;
      }
      else {
        double v18 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v18);
      if (v60 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v60 >= 0) {
      uint64_t v16 = __p;
    }
    else {
      uint64_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v16);
    if (v60 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CAF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,float>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      CVPixelBufferRef v58 = (CVPixelBufferRef)v8[3];
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_259125388[v9];
      }
      BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v16 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v16 = 0;
      }
      LODWORD(__p[0]) = 0;
      size_t v20 = (unsigned __int8 *)v58;
      size_t v21 = *(unsigned __int8 *)v58;
      if (v6 <= v21)
      {
        size_t v25 = 0;
        uint64_t v56 = __p;
      }
      else
      {
        unint64_t v22 = v6;
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *(unsigned __int8 *)v58);
        CVPixelBufferGetHeightOfPlane(a2, v21);
        CVPixelBufferGetWidthOfPlane(a2, v21);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v21);
        uint64_t v56 = BaseAddressOfPlane;
        if (BaseAddressOfPlane)
        {
          size_t v25 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v25 = 0;
          uint64_t v56 = 0;
        }
        unint64_t v6 = v22;
        size_t v20 = (unsigned __int8 *)v58;
      }
      size_t v26 = v20[1];
      size_t v27 = v6;
      if (v6 <= v26)
      {
        size_t v30 = 0;
        size_t v28 = (char *)__p;
      }
      else
      {
        size_t v28 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v20[1]);
        CVPixelBufferGetHeightOfPlane(a2, v26);
        CVPixelBufferGetWidthOfPlane(a2, v26);
        size_t v29 = CVPixelBufferGetBytesPerRowOfPlane(a2, v26);
        if (v28)
        {
          size_t v30 = v29;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v30 = 0;
        }
        size_t v20 = (unsigned __int8 *)v58;
      }
      size_t v54 = v16;
      size_t v55 = Height;
      size_t v31 = v20[2];
      pixelBuffer = a2;
      if (v27 <= v31)
      {
        size_t v35 = 0;
        size_t v33 = (char *)__p;
      }
      else
      {
        size_t v32 = a2;
        size_t v33 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v31);
        CVPixelBufferGetHeightOfPlane(v32, v31);
        CVPixelBufferGetWidthOfPlane(v32, v31);
        size_t v34 = CVPixelBufferGetBytesPerRowOfPlane(v32, v31);
        if (v33)
        {
          size_t v35 = v34;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v35 = 0;
        }
        size_t v20 = (unsigned __int8 *)v58;
      }
      vImagePixelCount v59 = a1;
      size_t v36 = v20[3];
      if (v27 <= v36)
      {
        size_t v38 = 0;
        size_t v37 = (char *)__p;
      }
      else
      {
        size_t v37 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v20[3]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v36);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v36);
        size_t v38 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v36);
        if (!v37)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v38 = 0;
        }
      }
      if (v55 && Width)
      {
        uint64_t v39 = 0;
        unint64_t v40 = v37;
        vImagePixelCount v41 = v33;
        vImagePixelCount v42 = v28;
        size_t v43 = (float *)v56;
        do
        {
          if ((void **)((char *)v56 + v25 * v39) != __p)
          {
            size_t v44 = BaseAddress;
            size_t v45 = v43;
            size_t v46 = Width;
            do
            {
              unsigned int v47 = *v44;
              v44 += 4;
              float v15 = v10 * (float)v47;
              *v45++ = v15;
              --v46;
            }
            while (v46);
          }
          if (&v28[v30 * v39] != (char *)__p)
          {
            uint64_t v48 = 0;
            size_t v49 = Width;
            do
            {
              LOBYTE(v15) = BaseAddress[v48 + 1];
              float v15 = v10 * (float)LODWORD(v15);
              *(float *)&v42[v48] = v15;
              v48 += 4;
              --v49;
            }
            while (v49);
          }
          if (&v33[v35 * v39] != (char *)__p)
          {
            uint64_t v50 = 0;
            size_t v51 = Width;
            do
            {
              LOBYTE(v15) = BaseAddress[v50 + 2];
              float v15 = v10 * (float)LODWORD(v15);
              *(float *)&v41[v50] = v15;
              v50 += 4;
              --v51;
            }
            while (v51);
          }
          if (&v37[v38 * v39] != (char *)__p)
          {
            uint64_t v52 = 0;
            size_t v53 = Width;
            do
            {
              LOBYTE(v15) = BaseAddress[v52 + 3];
              float v15 = v10 * (float)LODWORD(v15);
              *(float *)&v40[v52] = v15;
              v52 += 4;
              --v53;
            }
            while (v53);
          }
          ++v39;
          size_t v43 = (float *)((char *)v43 + v25);
          BaseAddress += v54;
          v42 += v30;
          v41 += v35;
          v40 += v38;
        }
        while (v39 != v55);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v59, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v61 >= 0) {
        size_t v19 = __p;
      }
      else {
        size_t v19 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v19);
      if (v61 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v61 >= 0) {
      double v17 = __p;
    }
    else {
      double v17 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v17);
    if (v61 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CB4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<half,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      CVPixelBufferRef v75 = (CVPixelBufferRef)v8[3];
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_259125388[v9];
      }
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v15 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v15 = 0;
      }
      LOWORD(__p[0]) = 0;
      size_t v19 = (unsigned __int8 *)v75;
      size_t v20 = *(unsigned __int8 *)v75;
      if (v6 <= v20)
      {
        size_t v24 = 0;
        float16x8_t v73 = __p;
      }
      else
      {
        unint64_t v21 = v6;
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *(unsigned __int8 *)v75);
        CVPixelBufferGetHeightOfPlane(a2, v20);
        CVPixelBufferGetWidthOfPlane(a2, v20);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v20);
        float16x8_t v73 = BaseAddressOfPlane;
        if (BaseAddressOfPlane)
        {
          size_t v24 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v24 = 0;
          float16x8_t v73 = 0;
        }
        unint64_t v6 = v21;
        size_t v19 = (unsigned __int8 *)v75;
      }
      size_t v25 = v19[1];
      size_t v26 = v6;
      pixelBuffer = a2;
      if (v6 <= v25)
      {
        size_t v29 = 0;
        size_t v27 = (char *)__p;
      }
      else
      {
        size_t v27 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v25);
        CVPixelBufferGetHeightOfPlane(a2, v25);
        CVPixelBufferGetWidthOfPlane(a2, v25);
        size_t v28 = CVPixelBufferGetBytesPerRowOfPlane(a2, v25);
        if (v27)
        {
          size_t v29 = v28;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v29 = 0;
        }
        size_t v19 = (unsigned __int8 *)v75;
      }
      size_t v71 = v15;
      size_t v72 = Height;
      size_t v30 = v19[2];
      if (v26 <= v30)
      {
        size_t v33 = 0;
        size_t v31 = (char *)__p;
      }
      else
      {
        size_t v31 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v19[2]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v30);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v30);
        size_t v32 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v30);
        if (v31)
        {
          size_t v33 = v32;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v33 = 0;
        }
        size_t v19 = (unsigned __int8 *)v75;
      }
      size_t v76 = a1;
      size_t v34 = v19[3];
      if (v26 <= v34)
      {
        size_t v36 = 0;
        size_t v35 = (char *)__p;
      }
      else
      {
        size_t v35 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v19[3]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v34);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v34);
        size_t v36 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v34);
        if (!v35)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v36 = 0;
        }
      }
      if (v72 && Width)
      {
        uint64_t v37 = 0;
        size_t v38 = v35;
        uint64_t v39 = v31;
        unint64_t v40 = v27;
        vImagePixelCount v41 = v73;
        do
        {
          if ((void **)((char *)v73 + v24 * v37) != __p)
          {
            vImagePixelCount v42 = (__int16 *)BaseAddress;
            size_t v43 = v41;
            size_t v44 = Width;
            do
            {
              __int16 v45 = *v42;
              v42 += 4;
              _H0 = v45;
              __asm { FCVT            S0, H0 }
              _S0 = v10 * _S0;
              __asm { FCVT            H0, S0 }
              *v43++ = LOWORD(_S0);
              --v44;
            }
            while (v44);
          }
          if (&v27[v29 * v37] != (char *)__p)
          {
            uint64_t v53 = 2;
            size_t v54 = v40;
            size_t v55 = Width;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[v53];
              __asm { FCVT            S0, H0 }
              _S0 = v10 * _S0;
              __asm { FCVT            H0, S0 }
              *v54++ = LOWORD(_S0);
              v53 += 8;
              --v55;
            }
            while (v55);
          }
          if (&v31[v33 * v37] != (char *)__p)
          {
            uint64_t v59 = 4;
            char v60 = v39;
            size_t v61 = Width;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[v59];
              __asm { FCVT            S0, H0 }
              _S0 = v10 * _S0;
              __asm { FCVT            H0, S0 }
              *v60++ = LOWORD(_S0);
              v59 += 8;
              --v61;
            }
            while (v61);
          }
          if (&v35[v36 * v37] != (char *)__p)
          {
            uint64_t v65 = 6;
            uint64_t v66 = v38;
            size_t v67 = Width;
            do
            {
              _H0 = *(_WORD *)&BaseAddress[v65];
              __asm { FCVT            S0, H0 }
              _S0 = v10 * _S0;
              __asm { FCVT            H0, S0 }
              *v66++ = LOWORD(_S0);
              v65 += 8;
              --v67;
            }
            while (v67);
          }
          ++v37;
          vImagePixelCount v41 = (void **)((char *)v41 + v24);
          BaseAddress += v71;
          unint64_t v40 = (_WORD *)((char *)v40 + v29);
          uint64_t v39 = (_WORD *)((char *)v39 + v33);
          size_t v38 = (_WORD *)((char *)v38 + v36);
        }
        while (v37 != v72);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v76, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v78 >= 0) {
        double v18 = __p;
      }
      else {
        double v18 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v18);
      if (v78 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v78 >= 0) {
      size_t v16 = __p;
    }
    else {
      size_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v16);
    if (v78 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CBA60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<float,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      unsigned int v9 = (unsigned __int8 *)v8[3];
      unsigned int v10 = *((_DWORD *)v8 + 8) - 1;
      float v11 = 1.0;
      if (v10 <= 6) {
        float v11 = flt_259125388[v10];
      }
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      int64x2_t v121 = a1;
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v15 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v15 = 0;
      }
      LOWORD(__p[0]) = 0;
      size_t v19 = *v9;
      if (v6 <= v19)
      {
        size_t v22 = 0;
        unint64_t v125 = __p;
      }
      else
      {
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *v9);
        CVPixelBufferGetHeightOfPlane(a2, v19);
        CVPixelBufferGetWidthOfPlane(a2, v19);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v19);
        unint64_t v125 = BaseAddressOfPlane;
        if (BaseAddressOfPlane)
        {
          size_t v22 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v22 = 0;
          unint64_t v125 = 0;
        }
      }
      size_t v23 = v9[1];
      pixelBuffer = a2;
      if (v6 <= v23)
      {
        size_t v26 = 0;
        float v124 = __p;
      }
      else
      {
        size_t v24 = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, v23);
        CVPixelBufferGetHeightOfPlane(a2, v23);
        CVPixelBufferGetWidthOfPlane(a2, v23);
        size_t v25 = CVPixelBufferGetBytesPerRowOfPlane(a2, v23);
        float v124 = v24;
        if (v24)
        {
          size_t v26 = v25;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v26 = 0;
          float v124 = 0;
        }
      }
      size_t v27 = v9[2];
      if (v6 <= v27)
      {
        size_t v30 = 0;
        size_t v28 = (char *)__p;
      }
      else
      {
        size_t v28 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v9[2]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v27);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v27);
        size_t v29 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v27);
        if (v28)
        {
          size_t v30 = v29;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v30 = 0;
        }
      }
      size_t v31 = v9[3];
      if (v6 <= v31)
      {
        size_t v33 = 0;
        size_t v32 = (char *)__p;
      }
      else
      {
        size_t v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v31);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v31);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v31);
        size_t v33 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v31);
        if (!v32)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v33 = 0;
        }
      }
      if (Height && Width)
      {
        uint64_t v34 = 0;
        unint64_t v35 = Width & 0xFFFFFFFFFFFFFFFELL;
        size_t v36 = v124;
        uint64_t v37 = v125;
        size_t v38 = (_WORD *)v125 + 1;
        uint64_t v39 = (int *)(BaseAddress + 16);
        unint64_t v40 = (int *)(BaseAddress + 20);
        vImagePixelCount v41 = (_WORD *)v124 + 1;
        vImagePixelCount v42 = (int *)(BaseAddress + 24);
        size_t v43 = v28 + 2;
        size_t v44 = (int *)(BaseAddress + 28);
        __int16 v45 = v32 + 2;
        size_t v46 = v32;
        unsigned int v47 = v28;
        while (1)
        {
          if ((void **)((char *)v125 + v22 * v34) == __p) {
            goto LABEL_51;
          }
          if (Width < 2) {
            break;
          }
          size_t v49 = v39;
          uint64_t v50 = v38;
          unint64_t v51 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v49 - 4);
            int v53 = *v49;
            v49 += 8;
            _S1 = v53;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v50 - 1) = LOWORD(_S0);
            *uint64_t v50 = LOWORD(_S1);
            v50 += 2;
            v51 -= 2;
          }
          while (v51);
          unint64_t v48 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v35) {
            goto LABEL_49;
          }
LABEL_51:
          if ((void **)((char *)v124 + v26 * v34) == __p) {
            goto LABEL_59;
          }
          if (Width < 2)
          {
            unint64_t v70 = 0;
LABEL_57:
            size_t v81 = Width - v70;
            float64x2x2_t v82 = (_WORD *)v36 + v70;
            uint64_t v83 = (16 * v70) | 4;
            do
            {
              _S0 = *(_DWORD *)&BaseAddress[v83];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *v82++ = LOWORD(_S0);
              v83 += 16;
              --v81;
            }
            while (v81);
            goto LABEL_59;
          }
          size_t v71 = v41;
          size_t v72 = v40;
          unint64_t v73 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v72 - 4);
            int v75 = *v72;
            v72 += 8;
            _S1 = v75;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v71 - 1) = LOWORD(_S0);
            *size_t v71 = LOWORD(_S1);
            v71 += 2;
            v73 -= 2;
          }
          while (v73);
          unint64_t v70 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v35) {
            goto LABEL_57;
          }
LABEL_59:
          if (&v28[v30 * v34] == (char *)__p) {
            goto LABEL_67;
          }
          if (Width < 2)
          {
            unint64_t v87 = 0;
LABEL_65:
            size_t v98 = Width - v87;
            CGRect v99 = &v47[2 * v87];
            uint64_t v100 = (16 * v87) | 8;
            do
            {
              _S0 = *(_DWORD *)&BaseAddress[v100];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *(_WORD *)CGRect v99 = LOWORD(_S0);
              v99 += 2;
              v100 += 16;
              --v98;
            }
            while (v98);
            goto LABEL_67;
          }
          size_t v88 = v43;
          uint64_t v89 = v42;
          unint64_t v90 = Width & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            _S0 = *(v89 - 4);
            int v92 = *v89;
            v89 += 8;
            _S1 = v92;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
              FCVT            S0, H0
              FCVT            S1, H1
            }
            _S0 = v11 * _S0;
            _S1 = v11 * _S1;
            __asm
            {
              FCVT            H0, S0
              FCVT            H1, S1
            }
            *(v88 - 1) = LOWORD(_S0);
            *size_t v88 = LOWORD(_S1);
            v88 += 2;
            v90 -= 2;
          }
          while (v90);
          unint64_t v87 = Width & 0xFFFFFFFFFFFFFFFELL;
          if (Width != v35) {
            goto LABEL_65;
          }
LABEL_67:
          if (&v32[v33 * v34] != (char *)__p)
          {
            if (Width >= 2)
            {
              float v105 = v45;
              uint64_t v106 = v44;
              unint64_t v107 = Width & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                _S0 = *(v106 - 4);
                int v109 = *v106;
                v106 += 8;
                _S1 = v109;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            H1, S1
                  FCVT            S0, H0
                  FCVT            S1, H1
                }
                _S0 = v11 * _S0;
                _S1 = v11 * _S1;
                __asm
                {
                  FCVT            H0, S0
                  FCVT            H1, S1
                }
                *(v105 - 1) = LOWORD(_S0);
                *float v105 = LOWORD(_S1);
                v105 += 2;
                v107 -= 2;
              }
              while (v107);
              unint64_t v104 = Width & 0xFFFFFFFFFFFFFFFELL;
              if (Width == v35) {
                goto LABEL_42;
              }
            }
            else
            {
              unint64_t v104 = 0;
            }
            size_t v115 = Width - v104;
            float32x2_t v116 = &v46[2 * v104];
            uint64_t v117 = (16 * v104) | 0xC;
            do
            {
              _S0 = *(_DWORD *)&BaseAddress[v117];
              __asm
              {
                FCVT            H0, S0
                FCVT            S0, H0
              }
              _S0 = v11 * _S0;
              __asm { FCVT            H0, S0 }
              *(_WORD *)float32x2_t v116 = LOWORD(_S0);
              v116 += 2;
              v117 += 16;
              --v115;
            }
            while (v115);
          }
LABEL_42:
          ++v34;
          size_t v38 = (_WORD *)((char *)v38 + v22);
          uint64_t v39 = (int *)((char *)v39 + v15);
          uint64_t v37 = (void **)((char *)v37 + v22);
          BaseAddress += v15;
          unint64_t v40 = (int *)((char *)v40 + v15);
          vImagePixelCount v41 = (_WORD *)((char *)v41 + v26);
          size_t v36 = (void **)((char *)v36 + v26);
          vImagePixelCount v42 = (int *)((char *)v42 + v15);
          size_t v43 = (_WORD *)((char *)v43 + v30);
          v47 += v30;
          size_t v44 = (int *)((char *)v44 + v15);
          __int16 v45 = (_WORD *)((char *)v45 + v33);
          v46 += v33;
          if (v34 == Height) {
            goto LABEL_76;
          }
        }
        unint64_t v48 = 0;
LABEL_49:
        size_t v63 = Width - v48;
        size_t v64 = (_WORD *)v37 + v48;
        uint64_t v65 = &BaseAddress[16 * v48];
        do
        {
          int v66 = *(_DWORD *)v65;
          v65 += 16;
          _S0 = v66;
          __asm
          {
            FCVT            H0, S0
            FCVT            S0, H0
          }
          _S0 = v11 * _S0;
          __asm { FCVT            H0, S0 }
          *v64++ = LOWORD(_S0);
          --v63;
        }
        while (v63);
        goto LABEL_51;
      }
LABEL_76:
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v121, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v127 >= 0) {
        double v18 = __p;
      }
      else {
        double v18 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v18);
      if (v127 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v127 >= 0) {
      size_t v16 = __p;
    }
    else {
      size_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v16);
    if (v127 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CC1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convert4ChannelToPlanar<unsigned char,half>(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v6 = PixelBufferUtils::planeCountForPixelFormat((PixelBufferUtils *)v5);
  if (PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, 0) == 4)
  {
    if (v6)
    {
      CVPixelBufferLockBaseAddress(a2, 0);
      CVPixelBufferLockBaseAddress(a1, 1uLL);
      uint64_t v7 = RGBA_FORMAT_MAP();
      __p[0] = (void *)(v5 | (PixelFormatType << 32));
      unint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v7, (unint64_t)__p[0], __p);
      CVPixelBufferRef v64 = (CVPixelBufferRef)v8[3];
      unsigned int v9 = *((_DWORD *)v8 + 8) - 1;
      float v10 = 1.0;
      if (v9 <= 6) {
        float v10 = flt_259125388[v9];
      }
      BaseAddress = (unsigned __int8 *)CVPixelBufferGetBaseAddress(a1);
      size_t Height = CVPixelBufferGetHeight(a1);
      size_t Width = CVPixelBufferGetWidth(a1);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a1);
      if (BaseAddress)
      {
        size_t v15 = BytesPerRow;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        size_t Height = 0;
        size_t Width = 0;
        size_t v15 = 0;
      }
      _S0 = 0.0;
      LOWORD(__p[0]) = 0;
      size_t v20 = (unsigned __int8 *)v64;
      size_t v21 = *(unsigned __int8 *)v64;
      if (v6 <= v21)
      {
        size_t v25 = 0;
        size_t v62 = __p;
      }
      else
      {
        unint64_t v22 = v6;
        BaseAddressOfPlane = (void **)CVPixelBufferGetBaseAddressOfPlane(a2, *(unsigned __int8 *)v64);
        CVPixelBufferGetHeightOfPlane(a2, v21);
        CVPixelBufferGetWidthOfPlane(a2, v21);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a2, v21);
        size_t v62 = BaseAddressOfPlane;
        if (BaseAddressOfPlane)
        {
          size_t v25 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v25 = 0;
          size_t v62 = 0;
        }
        unint64_t v6 = v22;
        size_t v20 = (unsigned __int8 *)v64;
      }
      size_t v26 = v20[1];
      size_t v27 = v6;
      pixelBuffer = a2;
      if (v6 <= v26)
      {
        size_t v30 = 0;
        size_t v28 = (char *)__p;
      }
      else
      {
        size_t v28 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v26);
        CVPixelBufferGetHeightOfPlane(a2, v26);
        CVPixelBufferGetWidthOfPlane(a2, v26);
        size_t v29 = CVPixelBufferGetBytesPerRowOfPlane(a2, v26);
        if (v28)
        {
          size_t v30 = v29;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v30 = 0;
        }
        size_t v20 = (unsigned __int8 *)v64;
      }
      size_t v60 = v15;
      size_t v61 = Height;
      size_t v31 = v20[2];
      if (v27 <= v31)
      {
        size_t v34 = 0;
        size_t v32 = (char *)__p;
      }
      else
      {
        size_t v32 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v20[2]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v31);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v31);
        size_t v33 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v31);
        if (v32)
        {
          size_t v34 = v33;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v34 = 0;
        }
        size_t v20 = (unsigned __int8 *)v64;
      }
      uint64_t v65 = a1;
      size_t v35 = v20[3];
      if (v27 <= v35)
      {
        size_t v37 = 0;
        size_t v36 = (char *)__p;
      }
      else
      {
        size_t v36 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, v20[3]);
        CVPixelBufferGetHeightOfPlane(pixelBuffer, v35);
        CVPixelBufferGetWidthOfPlane(pixelBuffer, v35);
        size_t v37 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v35);
        if (!v36)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v37 = 0;
        }
      }
      if (v61 && Width)
      {
        uint64_t v38 = 0;
        uint64_t v39 = v36;
        unint64_t v40 = v32;
        vImagePixelCount v41 = v28;
        vImagePixelCount v42 = v62;
        do
        {
          if ((void **)((char *)v62 + v25 * v38) != __p)
          {
            size_t v43 = BaseAddress;
            size_t v44 = v42;
            size_t v45 = Width;
            do
            {
              unsigned int v46 = *v43;
              v43 += 4;
              _S0 = v10 * (float)v46;
              __asm { FCVT            H0, S0 }
              *v44++ = LOWORD(_S0);
              --v45;
            }
            while (v45);
          }
          if (&v28[v30 * v38] != (char *)__p)
          {
            uint64_t v51 = 1;
            uint64_t v52 = v41;
            size_t v53 = Width;
            do
            {
              LOBYTE(_S0) = BaseAddress[v51];
              _S0 = v10 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v52++ = LOWORD(_S0);
              v51 += 4;
              --v53;
            }
            while (v53);
          }
          if (&v32[v34 * v38] != (char *)__p)
          {
            uint64_t v54 = 2;
            size_t v55 = v40;
            size_t v56 = Width;
            do
            {
              LOBYTE(_S0) = BaseAddress[v54];
              _S0 = v10 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v55++ = LOWORD(_S0);
              v54 += 4;
              --v56;
            }
            while (v56);
          }
          if (&v36[v37 * v38] != (char *)__p)
          {
            uint64_t v57 = 3;
            CVPixelBufferRef v58 = v39;
            size_t v59 = Width;
            do
            {
              LOBYTE(_S0) = BaseAddress[v57];
              _S0 = v10 * (float)LODWORD(_S0);
              __asm { FCVT            H0, S0 }
              *v58++ = LOWORD(_S0);
              v57 += 4;
              --v59;
            }
            while (v59);
          }
          ++v38;
          vImagePixelCount v42 = (void **)((char *)v42 + v25);
          BaseAddress += v60;
          vImagePixelCount v41 = (_WORD *)((char *)v41 + v30);
          unint64_t v40 = (_WORD *)((char *)v40 + v34);
          uint64_t v39 = (_WORD *)((char *)v39 + v37);
        }
        while (v38 != v61);
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      CVPixelBufferUnlockBaseAddress(v65, 1uLL);
      return 0;
    }
    else
    {
      PixelBufferUtils::pixelFormatAsString(v5, (char *)__p);
      if (v67 >= 0) {
        double v18 = __p;
      }
      else {
        double v18 = (void **)__p[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1244, v5, v18);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
      return 4294967294;
    }
  }
  else
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v67 >= 0) {
      size_t v16 = __p;
    }
    else {
      size_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convert4ChannelToPlanar", 1238, PixelFormatType, v16);
    if (v67 < 0) {
      operator delete(__p[0]);
    }
    return 0xFFFFFFFFLL;
  }
}

void sub_2590CC720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarFloat(__CVBuffer *a1, __CVBuffer *a2)
{
  void minFloat[2] = *MEMORY[0x263EF8340];
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365990) {
    return 0xFFFFFFFFLL;
  }
  CVPixelBufferLockBaseAddress(a1, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  dest.data = CVPixelBufferGetBaseAddress(a2);
  dest.vImagePixelCount height = CVPixelBufferGetHeight(a2);
  dest.vImagePixelCount width = CVPixelBufferGetWidth(a2);
  dest.size_t rowBytes = CVPixelBufferGetBytesPerRow(a2);
  if (!dest.data)
  {
    memset(&dest, 0, sizeof(dest));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
  blue.data = CVPixelBufferGetBaseAddressOfPlane(a1, 0);
  blue.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a1, 0);
  blue.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a1, 0);
  blue.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 0);
  if (!blue.data)
  {
    memset(&blue, 0, sizeof(blue));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  green.data = CVPixelBufferGetBaseAddressOfPlane(a1, 1uLL);
  green.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a1, 1uLL);
  green.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a1, 1uLL);
  green.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 1uLL);
  if (!green.data)
  {
    memset(&green, 0, sizeof(green));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  red.data = CVPixelBufferGetBaseAddressOfPlane(a1, 2uLL);
  red.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a1, 2uLL);
  red.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a1, 2uLL);
  red.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, 2uLL);
  if (!red.data)
  {
    memset(&red, 0, sizeof(red));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  minFloat[0] = 0;
  minFloat[1] = 0;
  long long maxFloat = xmmword_259120E80;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(a2);
  unint64_t v5 = PixelFormatType;
  if ((int)PixelFormatType <= 1111970368)
  {
    if (PixelFormatType == 32)
    {
      vImage_Error v6 = vImageConvert_PlanarFToXRGB8888(0xFFu, &blue, &green, &red, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_22;
    }
    if (PixelFormatType == 1094862674)
    {
      vImage_Error v6 = vImageConvert_PlanarFToXRGB8888(0xFFu, &red, &green, &blue, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
      goto LABEL_22;
    }
LABEL_27:
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v11 >= 0) {
      unsigned int v9 = __p;
    }
    else {
      unsigned int v9 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "convertRGBPlanarFloat", 1778, v5, v9);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v8 = -21783;
    goto LABEL_23;
  }
  if (PixelFormatType == 1111970369)
  {
    vImage_Error v6 = vImageConvert_PlanarFToBGRX8888(&red, &green, &blue, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_22;
  }
  if (PixelFormatType == 1380401729)
  {
    vImage_Error v6 = vImageConvert_PlanarFToBGRX8888(&blue, &green, &red, 0xFFu, &dest, (const float *)&maxFloat, (const float *)minFloat, 0);
    goto LABEL_22;
  }
  if (PixelFormatType != 1380410945) {
    goto LABEL_27;
  }
  vImage_Error v6 = vImageConvert_PlanarFToBGRXFFFF(&blue, &green, &red, 1.0, &dest, 0);
LABEL_22:
  uint64_t v8 = v6;
LABEL_23:
  CVPixelBufferUnlockBaseAddress(a1, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  if (v8) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

void sub_2590CCB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertRGBPlanarHalf(__CVBuffer *a1, __CVBuffer *a2)
{
  if (CVPixelBufferGetPixelFormatType(a1) != 1919365992) {
    return 0xFFFFFFFFLL;
  }
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x72673366u, BufferAttributes, &pixelBufferOut)) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = pixelBufferOut;
  }
  uint64_t v9 = convertFloat16ToFloat32(a1, v8);
  if (!v9) {
    uint64_t v9 = convertRGBPlanarFloat(v8, a2);
  }
  CVPixelBufferRelease(v8);
  return v9;
}

uint64_t createBGRAPermutesFromYUV(CVPixelBufferRef pixelBuffer, int a2, CVPixelBufferRef a3)
{
  BOOL v6 = a2 == 1380411457 || a2 == 1380410945;
  data = a3;
  unsigned int v8 = a2;
  if (v6)
  {
    unsigned int v8 = 1111970369;
    size_t Width = CVPixelBufferGetWidth(a3);
    size_t Height = CVPixelBufferGetHeight(a3);
    pixelBufferOut.data = 0;
    CFAllocatorRef v11 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v11, Width, Height, 0x42475241u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut)) {
      data = 0;
    }
    else {
      data = (__CVBuffer *)pixelBufferOut.data;
    }
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferLockBaseAddress(data, 0);
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
  pixelBufferOut.data = BaseAddressOfPlane;
  pixelBufferOut.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
  pixelBufferOut.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
  pixelBufferOut.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
  if (!BaseAddressOfPlane)
  {
    memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  srcCbCr.data = CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
  srcCbCr.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
  srcCbCr.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
  srcCbCr.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
  if (!srcCbCr.data)
  {
    memset(&srcCbCr, 0, sizeof(srcCbCr));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  dest.data = CVPixelBufferGetBaseAddress(data);
  dest.vImagePixelCount height = CVPixelBufferGetHeight(data);
  dest.vImagePixelCount width = CVPixelBufferGetWidth(data);
  dest.size_t rowBytes = CVPixelBufferGetBytesPerRow(data);
  if (!dest.data)
  {
    memset(&dest, 0, sizeof(dest));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  }
  uint64_t v14 = RGBA_FORMAT_MAP();
  *(void *)&pixelRange.Yp_bias = v8 | 0x2000000000;
  size_t v15 = (const uint8_t *)std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(v14, *(unint64_t *)&pixelRange.Yp_bias, &pixelRange)[3];
  if ((createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined & 1) != 0
    || (vImage_YpCbCrPixelRange pixelRange = *(vImage_YpCbCrPixelRange *)ymmword_259125368,
        vImage_Error v16 = vImageConvert_YpCbCrToARGB_GenerateConversion((const vImage_YpCbCrToARGBMatrix *)*MEMORY[0x263EFAA30], &pixelRange, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, kvImage420Yp8_CbCr8, kvImageARGB8888, 0), createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::isConvesionInfoDefined = 1, !v16))
  {
    vImage_Error v16 = vImageConvert_420Yp8_CbCr8ToARGB8888(&pixelBufferOut, &srcCbCr, &dest, &createBGRAPermutesFromYUV(__CVBuffer *,unsigned int,__CVBuffer *)::conversionInfo, v15, 0xFFu, 0);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 1uLL);
  CVPixelBufferUnlockBaseAddress(data, 0);
  if (a2 == 1380411457 || a2 == 1380410945)
  {
    vImage_Error v16 = (int)convert4ChannelFormats(data, a2, a3);
    CVPixelBufferRelease(data);
  }
  if (v16) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t createRGBPlanarFloatFromBuffer(__CVBuffer *a1, __CVBuffer *a2)
{
  size_t Width = CVPixelBufferGetWidth(a1);
  size_t Height = CVPixelBufferGetHeight(a1);
  pixelBufferOut.data = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x52476641u, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut)) {
    data = 0;
  }
  else {
    data = (__CVBuffer *)pixelBufferOut.data;
  }
  if (PixelBufferUtils::convertPixelBufferFormat(a1, data, 0, v8))
  {
    CVPixelBufferRelease(data);
    return 0xFFFFFFFFLL;
  }
  if (!data) {
    return 0xFFFFFFFFLL;
  }
  CVPixelBufferLockBaseAddress(data, 1uLL);
  CVPixelBufferLockBaseAddress(a2, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(data);
  pixelBufferOut.data = BaseAddress;
  vImagePixelCount v12 = CVPixelBufferGetHeight(data);
  pixelBufferOut.vImagePixelCount height = v12;
  vImagePixelCount v13 = CVPixelBufferGetWidth(data);
  pixelBufferOut.vImagePixelCount width = v13;
  pixelBufferOut.size_t rowBytes = CVPixelBufferGetBytesPerRow(data);
  if (!BaseAddress)
  {
    memset(&pixelBufferOut, 0, sizeof(pixelBufferOut));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    vImagePixelCount v13 = 0;
    vImagePixelCount v12 = 0;
  }
  destA.data = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
  destA.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a2, 0);
  destA.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a2, 0);
  destA.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
  if (!destA.data)
  {
    memset(&destA, 0, sizeof(destA));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  destR.data = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
  destR.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
  destR.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
  destR.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
  if (!destR.data)
  {
    memset(&destR, 0, sizeof(destR));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  destG.data = CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
  destG.vImagePixelCount height = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
  destG.vImagePixelCount width = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
  destG.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
  if (!destG.data)
  {
    memset(&destG, 0, sizeof(destG));
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
  }
  vImage_Error v14 = MEMORY[0x25A2D6EB0](&destB, v12, v13, 32, 0);
  if (!v14)
  {
    vImage_Error v14 = vImageConvert_ARGBFFFFtoPlanarF(&pixelBufferOut, &destA, &destR, &destG, &destB, 0);
    free(destB.data);
  }
  CVPixelBufferUnlockBaseAddress(data, 1uLL);
  CVPixelBufferUnlockBaseAddress(a2, 0);
  CVPixelBufferRelease(data);
  if (v14) {
    return 0xFFFFFFFFLL;
  }
  else {
    return 0;
  }
}

uint64_t createRGBPlanarHalfFromBuffer(__CVBuffer *a1, CVPixelBufferRef pixelBuffer)
{
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, 0x72673366u, BufferAttributes, &pixelBufferOut)) {
    BOOL v8 = 0;
  }
  else {
    BOOL v8 = pixelBufferOut;
  }
  if (createRGBPlanarFloatFromBuffer(a1, v8)) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = convertFloat32ToFloat16(v8, pixelBuffer);
  }
  CVPixelBufferRelease(v8);
  return v9;
}

uint64_t copyPixelBufferMultiPlane(__CVBuffer *a1, CGPoint a2, __CVBuffer *a3, CGRect a4)
{
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  double v9 = a2.y;
  double v10 = a2.x;
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a3);
  unint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a3);
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a3, 1uLL);
  if (PlaneCount)
  {
    for (size_t i = 0; PlaneCount != i; ++i)
    {
      size_t v15 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, i);
      memset(&src, 0, sizeof(src));
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a3, i);
      src.data = BaseAddressOfPlane;
      src.double height = CVPixelBufferGetHeightOfPlane(a3, i);
      src.double width = CVPixelBufferGetWidthOfPlane(a3, i);
      src.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a3, i);
      if (!BaseAddressOfPlane)
      {
        memset(&src, 0, sizeof(src));
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      memset(&dest, 0, sizeof(dest));
      double v17 = CVPixelBufferGetBaseAddressOfPlane(a1, i);
      dest.data = v17;
      dest.double height = CVPixelBufferGetHeightOfPlane(a1, i);
      dest.double width = CVPixelBufferGetWidthOfPlane(a1, i);
      dest.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, i);
      if (!v17)
      {
        memset(&dest, 0, sizeof(dest));
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      v28.origin.double x = x;
      v28.origin.double y = y;
      v28.size.double width = width;
      v28.size.double height = height;
      IsEmptdouble y = CGRectIsEmpty(v28);
      vImagePixelCount v19 = src.width;
      if (IsEmpty)
      {
        vImagePixelCount v20 = src.height;
      }
      else
      {
        if (x >= (double)src.width
          || y >= (double)src.height
          || (width <= (double)src.width ? (BOOL v21 = height <= (double)src.height) : (BOOL v21 = 0), !v21))
        {
LABEL_26:
          NSLog(&cfstr_SDErrorRegionI.isa, "updateVImageBufferToRegion", 1812);
          return 0xFFFFFFFFLL;
        }
        src.double height = (unint64_t)height;
        src.double width = (unint64_t)width;
        src.data = (char *)src.data + src.rowBytes * (unint64_t)y + v15 * (unint64_t)x;
        vImagePixelCount v20 = (unint64_t)height;
        vImagePixelCount v19 = (unint64_t)width;
      }
      double v22 = (double)v19;
      double v23 = (double)v20;
      v29.origin.double x = v10;
      v29.origin.double y = v9;
      v29.size.double width = (double)v19;
      v29.size.double height = (double)v20;
      if (!CGRectIsEmpty(v29))
      {
        if (v10 >= (double)dest.width || v9 >= (double)dest.height) {
          goto LABEL_26;
        }
        if (v22 > (double)dest.width || v23 > (double)dest.height) {
          goto LABEL_26;
        }
        dest.data = (char *)dest.data + dest.rowBytes * (unint64_t)v9 + v15 * (unint64_t)v10;
        dest.double height = (unint64_t)v23;
        dest.double width = (unint64_t)v22;
      }
      vImageCopyBuffer(&src, &dest, v15, 0);
    }
  }
  CVPixelBufferUnlockBaseAddress(a1, 0);
  CVPixelBufferUnlockBaseAddress(a3, 1uLL);
  return 0;
}

uint64_t convertFloat32ToFloat16(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  CFAllocatorRef v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      unint64_t v7 = 1;
      long long v8 = 0uLL;
      do
      {
        *(_OWORD *)&src.data = v8;
        *(_OWORD *)&src.double width = v8;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v7 - 1);
        src.data = BaseAddressOfPlane;
        src.double height = CVPixelBufferGetHeightOfPlane(a1, v7 - 1);
        src.double width = CVPixelBufferGetWidthOfPlane(a1, v7 - 1);
        src.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, v7 - 1);
        if (!BaseAddressOfPlane)
        {
          memset(&src, 0, sizeof(src));
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        memset(&dest, 0, sizeof(dest));
        double v10 = CVPixelBufferGetBaseAddressOfPlane(a2, v7 - 1);
        dest.data = v10;
        dest.double height = CVPixelBufferGetHeightOfPlane(a2, v7 - 1);
        dest.double width = CVPixelBufferGetWidthOfPlane(a2, v7 - 1);
        dest.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, v7 - 1);
        if (!v10) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177, 0, 0, 0, 0);
        }
        vImage_Error v11 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
        vImage_Error v12 = v11;
        if (v7 >= v5) {
          break;
        }
        ++v7;
        long long v8 = 0uLL;
      }
      while (!v11);
    }
    else
    {
      src.data = CVPixelBufferGetBaseAddress(a1);
      src.double height = CVPixelBufferGetHeight(a1);
      src.double width = CVPixelBufferGetWidth(a1);
      src.size_t rowBytes = CVPixelBufferGetBytesPerRow(a1);
      if (!src.data)
      {
        memset(&src, 0, sizeof(src));
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      }
      dest.data = CVPixelBufferGetBaseAddress(a2);
      dest.double height = CVPixelBufferGetHeight(a2);
      dest.double width = CVPixelBufferGetWidth(a2);
      dest.size_t rowBytes = CVPixelBufferGetBytesPerRow(a2);
      if (!dest.data) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195, 0, 0, 0, 0);
      }
      vImage_Error v12 = vImageConvert_PlanarFtoPlanar16F(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v12 != 0;
  }
  else
  {
    NSLog(&cfstr_SDErrorInputAn.isa, "convertFloat32ToFloat16", 1481);
    return 0xFFFFFFFFLL;
  }
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, void *a2, int a3)
{
  vImagePixelCount v20 = a2;
  unint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  size_t v6 = a3;
  unint64_t v7 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, a3);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount)
  {
    uint64_t v9 = 3334;
    double v10 = @"%s:%d - ERROR - muliplane pixel buffer with nonmatching plane index";
    if (a3 < 0 || PlaneCount <= a3) {
      goto LABEL_7;
    }
  }
  else if (a3 != -1)
  {
    uint64_t v9 = 3339;
    double v10 = @"%s:%d - ERROR - cannot request plane for single-plane image";
LABEL_7:
    NSLog(&v10->isa, "forEveryPixel", v9);
    goto LABEL_21;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  pixelBuffer = a1;
  if (!PlaneCount)
  {
    BaseAddress = (char *)CVPixelBufferGetBaseAddress(a1);
    size_t Height = CVPixelBufferGetHeight(a1);
    size_t Width = CVPixelBufferGetWidth(a1);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
    if (!BaseAddress)
    {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      goto LABEL_20;
    }
LABEL_12:
    size_t v15 = BytesPerRow;
    if (Height && Width)
    {
      for (uint64_t i = 0; i != Height; ++i)
      {
        double v17 = BaseAddress;
        size_t v18 = Width;
        do
        {
          ((void (**)(id, char *, PixelBufferUtils *))v20)[2](v20, v17, PixelFormatType);
          v17 += v7;
          --v18;
        }
        while (v18);
        BaseAddress += v15;
      }
    }
    goto LABEL_20;
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, a3);
  size_t Height = CVPixelBufferGetHeightOfPlane(a1, v6);
  size_t Width = CVPixelBufferGetWidthOfPlane(a1, v6);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v6);
  if (BaseAddress) {
    goto LABEL_12;
  }
  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
LABEL_20:
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
LABEL_21:
}

void sub_2590CDAC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::forEveryPixel(__CVBuffer *a1, __CVBuffer *a2, void *a3, char *BaseAddressOfPlane)
{
  size_t v32 = a3;
  unint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  double v10 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  unint64_t v11 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  unint64_t v12 = PixelBufferUtils::pixelSizeForPixelFormat(v10, 0);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  if (PlaneCount != CVPixelBufferGetPlaneCount(a2))
  {
    uint64_t v14 = 3374;
    size_t v15 = @"%s:%d - ERROR - mismatching planes number in input buffers";
LABEL_7:
    NSLog(&v15->isa, "forEveryPixel", v14);
    goto LABEL_39;
  }
  if (PlaneCount)
  {
    uint64_t v14 = 3379;
    size_t v15 = @"%s:%d - ERROR - muliplane pixel buffers with nonmatching plane index";
    if ((BaseAddressOfPlane & 0x80000000) != 0 || PlaneCount <= BaseAddressOfPlane) {
      goto LABEL_7;
    }
  }
  else if (BaseAddressOfPlane != -1)
  {
    NSLog(&cfstr_SDErrorCannotR_0.isa, "forEveryPixel", 3384);
    goto LABEL_39;
  }
  CVPixelBufferLockBaseAddress(a1, 0);
  CVPixelBufferLockBaseAddress(a2, 0);
  if (PlaneCount)
  {
    if ((BaseAddressOfPlane & 0x80000000) != 0) {
      goto LABEL_26;
    }
    size_t v16 = BaseAddressOfPlane;
    BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, BaseAddressOfPlane);
    size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v16);
    size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v16);
    size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v16);
    if (!BaseAddressOfPlane)
    {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      size_t BytesPerRowOfPlane = 0;
      size_t WidthOfPlane = 0;
      size_t HeightOfPlane = 0;
    }
    BaseAddress = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, v16);
    size_t Height = CVPixelBufferGetHeightOfPlane(a2, v16);
    size_t v30 = CVPixelBufferGetWidthOfPlane(a2, v16);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRowOfPlane(a2, v16);
    if (BaseAddress)
    {
      size_t PlaneCount = v30;
      goto LABEL_24;
    }
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
LABEL_23:
    size_t BytesPerRow = 0;
    size_t PlaneCount = 0;
    size_t Height = 0;
    BaseAddress = 0;
    goto LABEL_24;
  }
  BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(a1);
  size_t HeightOfPlane = CVPixelBufferGetHeight(a1);
  size_t WidthOfPlane = CVPixelBufferGetWidth(a1);
  size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
  if (!BaseAddressOfPlane)
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    size_t BytesPerRowOfPlane = 0;
    size_t WidthOfPlane = 0;
    size_t HeightOfPlane = 0;
  }
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(a2);
  size_t Height = CVPixelBufferGetHeight(a2);
  size_t PlaneCount = CVPixelBufferGetWidth(a2);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
  if (!BaseAddress)
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    goto LABEL_23;
  }
LABEL_24:
  if (HeightOfPlane != Height || WidthOfPlane != PlaneCount)
  {
LABEL_26:
    NSLog(&cfstr_WarningSizesIn.isa);
    if (HeightOfPlane >= Height) {
      size_t v17 = Height;
    }
    else {
      size_t v17 = HeightOfPlane;
    }
    size_t v18 = WidthOfPlane;
    if (WidthOfPlane >= PlaneCount) {
      size_t v18 = PlaneCount;
    }
    size_t WidthOfPlane = v18;
    size_t HeightOfPlane = v17;
  }
  pixelBuffer = a1;
  size_t v25 = a2;
  if (HeightOfPlane && WidthOfPlane)
  {
    for (uint64_t i = 0; i != HeightOfPlane; ++i)
    {
      size_t v31 = BaseAddressOfPlane;
      vImagePixelCount v20 = BaseAddressOfPlane;
      BOOL v21 = BaseAddress;
      double v22 = BaseAddress;
      size_t v23 = WidthOfPlane;
      do
      {
        v32[2](v32, v20, PixelFormatType, v22, v10);
        v22 += v12;
        v20 += v11;
        --v23;
      }
      while (v23);
      BaseAddress = &v21[BytesPerRow];
      BaseAddressOfPlane = &v31[BytesPerRowOfPlane];
    }
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  CVPixelBufferUnlockBaseAddress(v25, 0);
LABEL_39:
}

void sub_2590CDEA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  _Unwind_Resume(a1);
}

uint64_t convertGreyscaleAsColor(__CVBuffer *a1, unsigned int a2, __CVBuffer *a3)
{
  if (a1)
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a3, 0);
    srcG = CVPixelBufferGetBaseAddress(a1);
    CVPixelBufferGetHeight(a1);
    CVPixelBufferGetWidth(a1);
    CVPixelBufferGetBytesPerRow(a1);
    if (!srcG) {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    }
    vImage_Buffer dest = CVPixelBufferGetBaseAddress(a3);
    CVPixelBufferGetHeight(a3);
    CVPixelBufferGetWidth(a3);
    CVPixelBufferGetBytesPerRow(a3);
    if (!dest) {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    }
    operator new[]();
  }
  return 0xFFFFFFFFLL;
}

void sub_2590CE1FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t convertFloat16ToFloat32(__CVBuffer *a1, __CVBuffer *a2)
{
  unint64_t PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a1);
  unint64_t v5 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  size_t v6 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(a2);
  if (v5 == PixelBufferUtils::planeCountForPixelFormat(v6))
  {
    CVPixelBufferLockBaseAddress(a1, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 0);
    if (v5)
    {
      unint64_t v7 = 1;
      long long v8 = 0uLL;
      do
      {
        *(_OWORD *)&src.data = v8;
        *(_OWORD *)&src.double width = v8;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v7 - 1);
        src.data = BaseAddressOfPlane;
        src.double height = CVPixelBufferGetHeightOfPlane(a1, v7 - 1);
        src.double width = CVPixelBufferGetWidthOfPlane(a1, v7 - 1);
        src.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a1, v7 - 1);
        if (!BaseAddressOfPlane)
        {
          memset(&src, 0, sizeof(src));
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        memset(&dest, 0, sizeof(dest));
        double v10 = CVPixelBufferGetBaseAddressOfPlane(a2, v7 - 1);
        dest.data = v10;
        dest.double height = CVPixelBufferGetHeightOfPlane(a2, v7 - 1);
        dest.double width = CVPixelBufferGetWidthOfPlane(a2, v7 - 1);
        dest.size_t rowBytes = CVPixelBufferGetBytesPerRowOfPlane(a2, v7 - 1);
        if (!v10) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177, 0, 0, 0, 0);
        }
        vImage_Error v11 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
        vImage_Error v12 = v11;
        if (v7 >= v5) {
          break;
        }
        ++v7;
        long long v8 = 0uLL;
      }
      while (!v11);
    }
    else
    {
      src.data = CVPixelBufferGetBaseAddress(a1);
      src.double height = CVPixelBufferGetHeight(a1);
      src.double width = CVPixelBufferGetWidth(a1);
      src.size_t rowBytes = CVPixelBufferGetBytesPerRow(a1);
      if (!src.data)
      {
        memset(&src, 0, sizeof(src));
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      }
      dest.data = CVPixelBufferGetBaseAddress(a2);
      dest.double height = CVPixelBufferGetHeight(a2);
      dest.double width = CVPixelBufferGetWidth(a2);
      dest.size_t rowBytes = CVPixelBufferGetBytesPerRow(a2);
      if (!dest.data) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195, 0, 0, 0, 0);
      }
      vImage_Error v12 = vImageConvert_Planar16FtoPlanarF(&src, &dest, 0);
    }
    CVPixelBufferUnlockBaseAddress(a1, 1uLL);
    CVPixelBufferUnlockBaseAddress(a2, 0);
    return v12 != 0;
  }
  else
  {
    NSLog(&cfstr_SDErrorInputAn.isa, "convertFloat16ToFloat32", 1515);
    return 0xFFFFFFFFLL;
  }
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBufferS1__block_invoke@<H0>(uint64_t a1@<X0>, short float *a2@<X1>, uint64_t a3@<X2>, short float *a4@<X3>)
{
  *(short float *)&__int16 result = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / *a2;
  *a4 = *(short float *)&result;
  return result;
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBuffer_block_invoke(uint64_t a1, float *a2)
{
  float result = 1.0 / *a2;
  *a2 = result;
  return result;
}

float ___ZL23invertPixelBufferValuesIfEiP10__CVBufferS1__block_invoke(uint64_t a1, float *a2, uint64_t a3, float *a4)
{
  float result = 1.0 / *a2;
  *a4 = result;
  return result;
}

__int16 ___ZL23invertPixelBufferValuesIDhEiP10__CVBuffer_block_invoke@<H0>(uint64_t a1@<X0>, short float *a2@<X1>)
{
  *(short float *)&__int16 result = COERCE_SHORT_FLOAT(COERCE_UNSIGNED_INT(1.0)) / *a2;
  *a2 = *(short float *)&result;
  return result;
}

uint64_t RGBA_FORMAT_MAP(void)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  {
    operator new();
  }
  return RGBA_FORMAT_MAP(void)::result;
}

void sub_2590CEA50(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x10A0C408EF24B1CLL);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__emplace_unique_key_args<unsigned long long,std::piecewise_construct_t const&,std::tuple<unsigned long long &&>,std::tuple<>>(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    uint64_t v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      double v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            double v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          double v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  double v10 = operator new(0x28uLL);
  *double v10 = 0;
  v10[1] = v5;
  v10[2] = *a3;
  v10[3] = 0;
  *((_DWORD *)v10 + 8) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
  }
  else
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t prime = v17;
    }
    else {
      size_t prime = v16;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
      unint64_t v7 = *(void *)(a1 + 8);
    }
    if (prime > v7) {
      goto LABEL_35;
    }
    if (prime < v7)
    {
      unint64_t v19 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v7 < 3 || (uint8x8_t v20 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v20.i16[0] = vaddlv_u8(v20), v20.u32[0] > 1uLL))
      {
        unint64_t v19 = std::__next_prime(v19);
      }
      else
      {
        uint64_t v21 = 1 << -(char)__clz(v19 - 1);
        if (v19 >= 2) {
          unint64_t v19 = v21;
        }
      }
      if (prime <= v19) {
        size_t prime = v19;
      }
      if (prime < v7) {
LABEL_35:
      }
        std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(a1, prime);
    }
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v5) {
        v5 %= v7;
      }
    }
    else
    {
      v5 &= v7 - 1;
    }
  }
  uint64_t v22 = *(void *)a1;
  size_t v23 = *(void **)(*(void *)a1 + 8 * v5);
  if (v23)
  {
    *double v10 = *v23;
LABEL_58:
    *size_t v23 = v10;
    goto LABEL_59;
  }
  *double v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v10;
  *(void *)(v22 + 8 * v5) = a1 + 16;
  if (*v10)
  {
    unint64_t v24 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v24 >= v7) {
        v24 %= v7;
      }
    }
    else
    {
      v24 &= v7 - 1;
    }
    size_t v23 = (void *)(*(void *)a1 + 8 * v24);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v10;
}

void sub_2590CED54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (!a2)
  {
    BOOL v15 = *(void **)a1;
    *(void *)a1 = 0;
    if (v15) {
      operator delete(v15);
    }
    *(void *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  OSType v4 = operator new(8 * a2);
  unint64_t v5 = *(void **)a1;
  *(void *)a1 = v4;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = 0;
  *(void *)(a1 + 8) = a2;
  do
    *(void *)(*(void *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void **)(a1 + 16);
  if (v7)
  {
    unint64_t v9 = v7[1];
    unint64_t v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      uint64_t v11 = v9 & v10;
      *(void *)(*(void *)a1 + 8 * v11) = v8;
      while (1)
      {
        uint64_t v12 = (void *)*v7;
        if (!*v7) {
          break;
        }
        uint64_t v13 = v12[1] & v10;
        if (v13 == v11)
        {
          unint64_t v7 = (void *)*v7;
        }
        else if (*(void *)(*(void *)a1 + 8 * v13))
        {
          void *v7 = *v12;
          uint64_t v14 = 8 * v13;
          *uint64_t v12 = **(void **)(*(void *)a1 + v14);
          **(void **)(*(void *)a1 + v14) = v12;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v13) = v7;
          unint64_t v7 = v12;
          uint64_t v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2) {
      v9 %= a2;
    }
    *(void *)(*(void *)a1 + 8 * v9) = v8;
    unint64_t v16 = (void *)*v7;
    if (*v7)
    {
      do
      {
        unint64_t v18 = v16[1];
        if (v18 >= a2) {
          v18 %= a2;
        }
        if (v18 != v9)
        {
          if (!*(void *)(*(void *)a1 + 8 * v18))
          {
            *(void *)(*(void *)a1 + 8 * v18) = v7;
            goto LABEL_26;
          }
          void *v7 = *v16;
          uint64_t v17 = 8 * v18;
          *unint64_t v16 = **(void **)(*(void *)a1 + v17);
          **(void **)(*(void *)a1 + v17) = v16;
          unint64_t v16 = v7;
        }
        unint64_t v18 = v9;
LABEL_26:
        unint64_t v7 = v16;
        unint64_t v16 = (void *)*v16;
        unint64_t v9 = v18;
      }
      while (v16);
    }
  }
}

uint64_t std::unordered_map<unsigned long long,std::pair<unsigned char *,int>>::unordered_map(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    unint64_t v5 = a2;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = &a2[3 * a3];
    unint64_t v9 = (void *)(a1 + 16);
    do
    {
      unint64_t v10 = *v5;
      if (v7)
      {
        uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
        v11.i16[0] = vaddlv_u8(v11);
        if (v11.u32[0] > 1uLL)
        {
          unint64_t v3 = *v5;
          if (v10 >= v7) {
            unint64_t v3 = v10 % v7;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
        uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
        if (v12)
        {
          uint64_t v13 = (void *)*v12;
          if (v13)
          {
            if (v11.u32[0] < 2uLL)
            {
              while (1)
              {
                uint64_t v15 = v13[1];
                if (v15 == v10)
                {
                  if (v13[2] == v10) {
                    goto LABEL_61;
                  }
                }
                else if ((v15 & (v7 - 1)) != v3)
                {
                  goto LABEL_23;
                }
                uint64_t v13 = (void *)*v13;
                if (!v13) {
                  goto LABEL_23;
                }
              }
            }
            do
            {
              unint64_t v14 = v13[1];
              if (v14 == v10)
              {
                if (v13[2] == v10) {
                  goto LABEL_61;
                }
              }
              else
              {
                if (v14 >= v7) {
                  v14 %= v7;
                }
                if (v14 != v3) {
                  break;
                }
              }
              uint64_t v13 = (void *)*v13;
            }
            while (v13);
          }
        }
      }
LABEL_23:
      unint64_t v16 = operator new(0x28uLL);
      *unint64_t v16 = 0;
      v16[1] = v10;
      long long v17 = *(_OWORD *)v5;
      v16[4] = v5[2];
      *((_OWORD *)v16 + 1) = v17;
      float v18 = (float)(unint64_t)(v6 + 1);
      float v19 = *(float *)(a1 + 32);
      if (!v7 || (float)(v19 * (float)v7) < v18)
      {
        BOOL v20 = (v7 & (v7 - 1)) != 0;
        if (v7 < 3) {
          BOOL v20 = 1;
        }
        unint64_t v21 = v20 | (2 * v7);
        unint64_t v22 = vcvtps_u32_f32(v18 / v19);
        if (v21 <= v22) {
          size_t prime = v22;
        }
        else {
          size_t prime = v21;
        }
        if (prime == 1)
        {
          size_t prime = 2;
        }
        else if ((prime & (prime - 1)) != 0)
        {
          size_t prime = std::__next_prime(prime);
          unint64_t v7 = *(void *)(a1 + 8);
        }
        if (prime > v7) {
          goto LABEL_45;
        }
        if (prime < v7)
        {
          unint64_t v24 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
          if (v7 < 3 || (uint8x8_t v25 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v25.i16[0] = vaddlv_u8(v25), v25.u32[0] > 1uLL))
          {
            unint64_t v24 = std::__next_prime(v24);
          }
          else
          {
            uint64_t v26 = 1 << -(char)__clz(v24 - 1);
            if (v24 >= 2) {
              unint64_t v24 = v26;
            }
          }
          if (prime <= v24) {
            size_t prime = v24;
          }
          if (prime < v7) {
LABEL_45:
          }
            std::__hash_table<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::__unordered_map_hasher<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::hash<unsigned long long>,std::equal_to<unsigned long long>,true>,std::__unordered_map_equal<unsigned long long,std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>,std::equal_to<unsigned long long>,std::hash<unsigned long long>,true>,std::allocator<std::__hash_value_type<unsigned long long,std::pair<unsigned char *,int>>>>::__do_rehash<true>(a1, prime);
        }
        unint64_t v7 = *(void *)(a1 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v10 >= v7) {
            unint64_t v3 = v10 % v7;
          }
          else {
            unint64_t v3 = v10;
          }
        }
        else
        {
          unint64_t v3 = (v7 - 1) & v10;
        }
      }
      uint64_t v27 = *(void *)a1;
      CGRect v28 = *(void **)(*(void *)a1 + 8 * v3);
      if (v28)
      {
        *unint64_t v16 = *v28;
      }
      else
      {
        *unint64_t v16 = *v9;
        *unint64_t v9 = v16;
        *(void *)(v27 + 8 * v3) = v9;
        if (!*v16) {
          goto LABEL_60;
        }
        unint64_t v29 = *(void *)(*v16 + 8);
        if ((v7 & (v7 - 1)) != 0)
        {
          if (v29 >= v7) {
            v29 %= v7;
          }
        }
        else
        {
          v29 &= v7 - 1;
        }
        CGRect v28 = (void *)(*(void *)a1 + 8 * v29);
      }
      *CGRect v28 = v16;
LABEL_60:
      uint64_t v6 = *(void *)(a1 + 24) + 1;
      *(void *)(a1 + 24) = v6;
LABEL_61:
      v5 += 3;
    }
    while (v5 != v8);
  }
  return a1;
}

void sub_2590CF208(_Unwind_Exception *a1)
{
  operator delete(v2);
  unint64_t v5 = *v3;
  if (*v3)
  {
    do
    {
      uint64_t v6 = (void *)*v5;
      operator delete(v5);
      unint64_t v5 = v6;
    }
    while (v6);
  }
  unint64_t v7 = *v1;
  *uint64_t v1 = 0;
  if (v7) {
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::copyPixelBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  int v3 = (int)a3;
  signed int PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  if (PixelFormatType != CVPixelBufferGetPixelFormatType(this)) {
    return 0xFFFFFFFFLL;
  }
  if (v3)
  {
    if (PixelFormatType <= 1751410031)
    {
      if (PixelFormatType > 1717855599)
      {
        if (PixelFormatType != 1717855600)
        {
          int v7 = 1717856627;
          goto LABEL_15;
        }
      }
      else if (PixelFormatType != 825306677)
      {
        int v7 = 825437747;
        goto LABEL_15;
      }
    }
    else if (PixelFormatType <= 1919365989)
    {
      if (PixelFormatType != 1751410032)
      {
        int v7 = 1751411059;
        goto LABEL_15;
      }
    }
    else if (PixelFormatType != 1919365990 && PixelFormatType != 1919365992)
    {
      int v7 = 1932996149;
LABEL_15:
      if (PixelFormatType == v7) {
        goto LABEL_16;
      }
      VTTransferSessiounint64_t n = createVTTransferSession(*MEMORY[0x263F001A8]);
      OSStatus v16 = VTPixelTransferSessionTransferImage(VTTransferSession, pixelBuffer, this);
      if (VTTransferSession)
      {
        VTPixelTransferSessionInvalidate(VTTransferSession);
        CFRelease(VTTransferSession);
      }
      if (!v16) {
        return 0;
      }
      NSLog(&cfstr_SDErrorVtpixel.isa, "cropAndScalePixelBufferVT", 1094);
      return 0xFFFFFFFFLL;
    }
  }
LABEL_16:
  uint64_t v8 = *MEMORY[0x263F00148];
  uint64_t v9 = *(void *)(MEMORY[0x263F00148] + 8);
  uint64_t v10 = *MEMORY[0x263F001A8];
  uint64_t v11 = *(void *)(MEMORY[0x263F001A8] + 8);
  uint64_t v12 = *(void *)(MEMORY[0x263F001A8] + 16);
  uint64_t v13 = *(void *)(MEMORY[0x263F001A8] + 24);
  return copyPixelBufferVImage(this, *(CGPoint *)&v8, pixelBuffer, *(CGRect *)&v10);
}

uint64_t PixelBufferUtils::countDifferentPixels(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, double a4, double a5)
{
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t v9 = CVPixelBufferGetWidth(a2);
  size_t v10 = CVPixelBufferGetHeight(a2);
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  uint64_t result = -1;
  if (Width == v9 && Height == v10)
  {
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    BaseAddress = (float *)CVPixelBufferGetBaseAddress(this);
    size_t v14 = CVPixelBufferGetHeight(this);
    size_t v15 = CVPixelBufferGetWidth(this);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
    if (BaseAddress)
    {
      size_t v17 = BytesPerRow;
    }
    else
    {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v14 = 0;
      size_t v15 = 0;
      size_t v17 = 0;
    }
    float v18 = (float *)CVPixelBufferGetBaseAddress(a2);
    size_t v19 = CVPixelBufferGetHeight(a2);
    size_t v20 = CVPixelBufferGetWidth(a2);
    size_t v21 = CVPixelBufferGetBytesPerRow(a2);
    if (!v18)
    {
      NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
      size_t v19 = 0;
      size_t v20 = 0;
      size_t v21 = 0;
    }
    if ((int)PixelFormatType > 1380401728)
    {
      if ((int)PixelFormatType <= 1751410031)
      {
        if ((int)PixelFormatType <= 1717855599)
        {
          if (PixelFormatType != 1380401729)
          {
            if (PixelFormatType == 1380410945)
            {
              if (v14 != v19 || v15 != v20) {
                goto LABEL_283;
              }
              if (v14 && 4 * v15)
              {
                uint64_t v22 = 0;
                LODWORD(PixelFormatType) = 0;
                do
                {
                  uint64_t v23 = 0;
                  do
                  {
                    float v24 = v18[v23];
                    float v25 = BaseAddress[v23] - v24;
                    if (v25 > *(float *)&a5)
                    {
                      float v26 = v25 / (v24 + 1.0e-22);
                      if (v26 > *(float *)&a4) {
                        LODWORD(PixelFormatType) = PixelFormatType + 1;
                      }
                    }
                    ++v23;
                  }
                  while (4 * v15 > v23);
                  ++v22;
                  float v18 = (float *)((char *)v18 + v21);
                  BaseAddress = (float *)((char *)BaseAddress + v17);
                }
                while (v14 > v22);
                goto LABEL_283;
              }
              goto LABEL_164;
            }
            goto LABEL_159;
          }
          goto LABEL_37;
        }
        if (PixelFormatType != 1717855600 && PixelFormatType != 1717856627)
        {
LABEL_159:
          PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
          if (v520 >= 0) {
            int8x16_t v261 = __p;
          }
          else {
            int8x16_t v261 = (void **)__p[0];
          }
          NSLog(&cfstr_SDErrorPixelFo.isa, "countDifferentPixels", 2181, PixelFormatType, v261);
          if (v520 < 0) {
            operator delete(__p[0]);
          }
LABEL_164:
          LODWORD(PixelFormatType) = 0;
LABEL_283:
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 1uLL);
          return (int)PixelFormatType;
        }
LABEL_101:
        if (v14 == v19 && v15 == v20)
        {
          LODWORD(PixelFormatType) = 0;
          if (v14)
          {
            if (v15)
            {
              uint64_t v180 = 0;
              LODWORD(PixelFormatType) = 0;
              do
              {
                uint64_t v181 = 0;
                do
                {
                  float v182 = v18[v181];
                  float v183 = BaseAddress[v181] - v182;
                  if (v183 > *(float *)&a5)
                  {
                    float v184 = v183 / (v182 + 1.0e-22);
                    if (v184 > *(float *)&a4) {
                      LODWORD(PixelFormatType) = PixelFormatType + 1;
                    }
                  }
                  ++v181;
                }
                while (v15 > v181);
                ++v180;
                float v18 = (float *)((char *)v18 + v21);
                BaseAddress = (float *)((char *)BaseAddress + v17);
              }
              while (v14 > v180);
            }
          }
        }
        goto LABEL_283;
      }
      if ((int)PixelFormatType <= 1919365989)
      {
        if (PixelFormatType == 1751410032)
        {
LABEL_76:
          if (v14 != v19) {
            goto LABEL_283;
          }
          if (v15 != v20) {
            goto LABEL_283;
          }
          LODWORD(PixelFormatType) = 0;
          if (!v14 || !v15) {
            goto LABEL_283;
          }
          uint64_t v120 = 0;
          LODWORD(PixelFormatType) = 0;
          if (v15) {
            BOOL v121 = (v15 - 1) >> 32 == 0;
          }
          else {
            BOOL v121 = 0;
          }
          char v122 = !v121;
          unint64_t v123 = 2 * (v15 & 0xFFFFFFFFFFFFFFF0);
          float32x4_t v124 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
          float32x4_t v125 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          float32x2_t v126 = (float16x4_t *)(BaseAddress + 4);
          float64x2_t v127 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
          unint64_t v128 = (float16x4_t *)(v18 + 4);
          v129.i64[0] = 0x100000001;
          v129.i64[1] = 0x100000001;
          while (1)
          {
            unint64_t v130 = (__int16 *)((char *)BaseAddress + v120 * v17);
            float32x4_t v131 = (__int16 *)((char *)v18 + v120 * v21);
            if (v15 < 0x10 || (v122 & 1) != 0) {
              break;
            }
            float32x4_t v131 = (__int16 *)((char *)v131 + v123);
            int32x4_t v143 = (int32x4_t)PixelFormatType;
            int32x4_t v144 = 0uLL;
            float32x2_t v145 = v128;
            float32x2_t v146 = v126;
            unint64_t v147 = v15 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v148 = 0uLL;
            int32x4_t v149 = 0uLL;
            do
            {
              _Q17 = *(float16x8_t *)v146[-2].i8;
              float32x4_t v151 = vcvt_hight_f32_f16(_Q17);
              float32x4_t v152 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
              _Q26 = *(float16x8_t *)v145[-2].i8;
              _Q20 = *(float64x2_t *)v145->i8;
              _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
              _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
              float32x4_t v156 = vsubq_f32(v152, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
              _Q30 = vsubq_f32(v151, vcvt_hight_f32_f16(_Q26));
              float32x4_t v158 = vsubq_f32(vcvtq_f32_f16(*v146), vcvtq_f32_f16(*v145));
              float32x4_t v159 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v146->i8), vcvt_hight_f32_f16(*(float16x8_t *)v145->i8));
              int16x8_t v160 = (int16x8_t)vcgtq_f32(_Q30, v124);
              float64x2_t v161 = vcvtq_f64_f32(*(float32x2_t *)_Q30.f32);
              _H25 = HIWORD(*(void *)&v145[-2]);
              __asm { FCVT            D31, H25 }
              _H8 = WORD2(*(void *)&v145[-2]);
              float64x2_t v165 = vcvt_hight_f64_f32(_Q30);
              __asm { FCVT            D30, H8 }
              _Q30.i64[1] = _D31;
              LOWORD(_D31) = _Q26.i16[1];
              __asm
              {
                FCVT            D31, H31
                FCVT            D26, H26
              }
              _Q26.i64[1] = _D31;
              LOWORD(_D31) = HIWORD(_D27);
              __asm { FCVT            D31, H31 }
              _H9 = WORD2(_D27);
              __asm { FCVT            D9, H9 }
              _H10 = WORD1(_D27);
              __asm { FCVT            D10, H10 }
              _Q9.f64[1] = _D31;
              __asm { FCVT            D27, H27 }
              LOWORD(_D31) = HIWORD(*(unint64_t *)v145);
              __asm { FCVT            D31, H31 }
              _H11 = WORD2(*(unint64_t *)v145);
              __asm { FCVT            D11, H11 }
              _Q11.f64[1] = _D31;
              LOWORD(_D31) = WORD1(*(_OWORD *)v145->i8);
              __asm
              {
                FCVT            D31, H31
                FCVT            D20, H20
              }
              _Q20.f64[1] = _D31;
              LOWORD(_D31) = _Q17.i16[3];
              __asm { FCVT            D31, H31 }
              _Q27.f64[1] = _D10;
              LOWORD(_D10) = _Q17.i16[2];
              __asm { FCVT            D10, H10 }
              _Q10.f64[1] = _D31;
              LOWORD(_D31) = _Q17.i16[1];
              __asm
              {
                FCVT            D24, H31
                FCVT            D17, H17
              }
              _Q17.i64[1] = _D24;
              *(int8x8_t *)&v161.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v156, v124), v160), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v156.f32), vaddq_f64((float64x2_t)_Q26, v127))), vdivq_f64(vcvt_hight_f64_f32(v156), vaddq_f64((float64x2_t)_Q30, v127))), v125), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v161, vaddq_f64(_Q27, v127))), vdivq_f64(v165, vaddq_f64(_Q9, v127))),
                                                                                           v125))));
              *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v158, v124), (int16x8_t)vcgtq_f32(v159, v124)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v158.f32), vaddq_f64(_Q20, v127))), vdivq_f64(vcvt_hight_f64_f32(v158), vaddq_f64(_Q11, v127))), v125), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v159.f32), vaddq_f64((float64x2_t)_Q17, v127))), vdivq_f64(vcvt_hight_f64_f32(v159), vaddq_f64(_Q10, v127))), v125))));
              int32x4_t v144 = vaddq_s32(v144, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v161.f64[0], *(int8x8_t *)v124.f32)), v129));
              int32x4_t v143 = vaddq_s32(v143, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v161.f64[0], *(int8x8_t *)v124.f32)), v129));
              int32x4_t v149 = vaddq_s32(v149, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v124.f32)), v129));
              int32x4_t v148 = vaddq_s32(v148, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v124.f32)), v129));
              v146 += 4;
              v145 += 4;
              v147 -= 16;
            }
            while (v147);
            LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v148, v143), vaddq_s32(v149, v144)));
            if (v15 != (v15 & 0xFFFFFFFFFFFFFFF0))
            {
              unint64_t v130 = (__int16 *)((char *)v130 + v123);
              int v132 = v15 & 0xFFFFFFF0;
LABEL_91:
              unsigned int v133 = v132 + 1;
              do
              {
                _H5 = *v130;
                __asm { FCVT            S6, H5 }
                _H5 = *v131;
                __asm { FCVT            S7, H5 }
                float v141 = _S6 - _S7;
                if (v141 > *(float *)&a5)
                {
                  __asm { FCVT            D5, H5 }
                  *(float *)&_D5 = v141 / (_D5 + 1.0e-22);
                  if (*(float *)&_D5 > *(float *)&a4) {
                    LODWORD(PixelFormatType) = PixelFormatType + 1;
                  }
                }
                ++v130;
                ++v131;
                BOOL v49 = v15 > v133++;
              }
              while (v49);
            }
            ++v120;
            float32x2_t v126 = (float16x4_t *)((char *)v126 + v17);
            unint64_t v128 = (float16x4_t *)((char *)v128 + v21);
            if (v14 <= v120) {
              goto LABEL_283;
            }
          }
          int v132 = 0;
          goto LABEL_91;
        }
        int v27 = 1751411059;
LABEL_75:
        if (PixelFormatType != v27) {
          goto LABEL_159;
        }
        goto LABEL_76;
      }
      if (PixelFormatType == 1919365990)
      {
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(this, 0);
        CVPixelBufferGetHeightOfPlane(this, 0);
        CVPixelBufferGetWidthOfPlane(this, 0);
        CVPixelBufferGetBytesPerRowOfPlane(this, 0);
        if (!BaseAddressOfPlane) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        float v253 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        CVPixelBufferGetHeightOfPlane(a2, 0);
        CVPixelBufferGetWidthOfPlane(a2, 0);
        CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
        if (!v253) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        float v254 = CVPixelBufferGetBaseAddressOfPlane(this, 1uLL);
        CVPixelBufferGetHeightOfPlane(this, 1uLL);
        CVPixelBufferGetWidthOfPlane(this, 1uLL);
        CVPixelBufferGetBytesPerRowOfPlane(this, 1uLL);
        if (!v254) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        uint64_t v255 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
        CVPixelBufferGetHeightOfPlane(a2, 1uLL);
        CVPixelBufferGetWidthOfPlane(a2, 1uLL);
        CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
        if (!v255) {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        }
        float32x4_t v256 = (float *)CVPixelBufferGetBaseAddressOfPlane(this, 2uLL);
        size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, 2uLL);
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, 2uLL);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, 2uLL);
        if (v256)
        {
          size_t v260 = BytesPerRowOfPlane;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t HeightOfPlane = 0;
          size_t WidthOfPlane = 0;
          size_t v260 = 0;
        }
        float32x2_t v508 = (float *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
        size_t v509 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
        size_t v510 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
        size_t v511 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
        if (!v508)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v509 = 0;
          size_t v510 = 0;
          size_t v511 = 0;
        }
        if (HeightOfPlane == v509 && WidthOfPlane == v510)
        {
          LODWORD(PixelFormatType) = 0;
          if (HeightOfPlane)
          {
            if (WidthOfPlane)
            {
              uint64_t v512 = 0;
              LODWORD(PixelFormatType) = 0;
              do
              {
                uint64_t v513 = 0;
                do
                {
                  float v514 = v508[v513];
                  float v515 = v256[v513] - v514;
                  if (v515 > *(float *)&a5)
                  {
                    float v516 = v515 / (v514 + 1.0e-22);
                    if (v516 > *(float *)&a4) {
                      LODWORD(PixelFormatType) = PixelFormatType + 1;
                    }
                  }
                  ++v513;
                }
                while (WidthOfPlane > v513);
                ++v512;
                float32x2_t v508 = (float *)((char *)v508 + v511);
                float32x4_t v256 = (float *)((char *)v256 + v260);
              }
              while (HeightOfPlane > v512);
            }
          }
        }
        goto LABEL_283;
      }
      if (PixelFormatType != 1919365992) {
        goto LABEL_159;
      }
      unint64_t v185 = CVPixelBufferGetBaseAddressOfPlane(this, 0);
      CVPixelBufferGetHeightOfPlane(this, 0);
      CVPixelBufferGetWidthOfPlane(this, 0);
      CVPixelBufferGetBytesPerRowOfPlane(this, 0);
      if (!v185) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      unint64_t v186 = CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      CVPixelBufferGetHeightOfPlane(a2, 0);
      CVPixelBufferGetWidthOfPlane(a2, 0);
      CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      if (!v186) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      uint64_t v187 = CVPixelBufferGetBaseAddressOfPlane(this, 1uLL);
      CVPixelBufferGetHeightOfPlane(this, 1uLL);
      CVPixelBufferGetWidthOfPlane(this, 1uLL);
      CVPixelBufferGetBytesPerRowOfPlane(this, 1uLL);
      if (!v187) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      uint64_t v188 = CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      CVPixelBufferGetHeightOfPlane(a2, 1uLL);
      CVPixelBufferGetWidthOfPlane(a2, 1uLL);
      CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
      if (!v188) {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
      }
      uint64_t v189 = (float16x4_t *)CVPixelBufferGetBaseAddressOfPlane(this, 2uLL);
      size_t v190 = CVPixelBufferGetHeightOfPlane(this, 2uLL);
      size_t v191 = CVPixelBufferGetWidthOfPlane(this, 2uLL);
      size_t v192 = CVPixelBufferGetBytesPerRowOfPlane(this, 2uLL);
      if (v189)
      {
        size_t v193 = v192;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v190 = 0;
        size_t v191 = 0;
        size_t v193 = 0;
      }
      uint64_t v447 = (float16x4_t *)CVPixelBufferGetBaseAddressOfPlane(a2, 2uLL);
      size_t v448 = CVPixelBufferGetHeightOfPlane(a2, 2uLL);
      size_t v449 = CVPixelBufferGetWidthOfPlane(a2, 2uLL);
      size_t v450 = CVPixelBufferGetBytesPerRowOfPlane(a2, 2uLL);
      if (!v447)
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v448 = 0;
        size_t v449 = 0;
        size_t v450 = 0;
      }
      if (v190 != v448) {
        goto LABEL_283;
      }
      if (v191 != v449) {
        goto LABEL_283;
      }
      LODWORD(PixelFormatType) = 0;
      if (!v190 || !v191) {
        goto LABEL_283;
      }
      uint64_t v451 = 0;
      LODWORD(PixelFormatType) = 0;
      if (v191) {
        BOOL v452 = (v191 - 1) >> 32 == 0;
      }
      else {
        BOOL v452 = 0;
      }
      char v453 = !v452;
      unint64_t v454 = 2 * (v191 & 0xFFFFFFFFFFFFFFF0);
      float32x4_t v455 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      float32x4_t v456 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
      float32x2_t v457 = v189 + 2;
      float64x2_t v458 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
      float32x2_t v459 = v447 + 2;
      v460.i64[0] = 0x100000001;
      v460.i64[1] = 0x100000001;
      while (1)
      {
        float32x2_t v461 = (char *)v189 + v451 * v193;
        float32x2_t v462 = (char *)v447 + v451 * v450;
        if (v191 < 0x10 || (v453 & 1) != 0) {
          break;
        }
        v462 += v454;
        int32x4_t v471 = (int32x4_t)PixelFormatType;
        int32x4_t v472 = 0uLL;
        float32x2_t v473 = v459;
        float32x2_t v474 = v457;
        unint64_t v475 = v191 & 0xFFFFFFFFFFFFFFF0;
        int32x4_t v476 = 0uLL;
        int32x4_t v477 = 0uLL;
        do
        {
          _Q17 = *(float16x8_t *)v474[-2].i8;
          float32x4_t v479 = vcvt_hight_f32_f16(_Q17);
          float32x4_t v480 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
          _Q26 = *(float16x8_t *)v473[-2].i8;
          _Q20 = *(float64x2_t *)v473->i8;
          _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
          _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
          float32x4_t v484 = vsubq_f32(v480, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
          _Q30 = vsubq_f32(v479, vcvt_hight_f32_f16(_Q26));
          float32x4_t v486 = vsubq_f32(vcvtq_f32_f16(*v474), vcvtq_f32_f16(*v473));
          float32x4_t v487 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v474->i8), vcvt_hight_f32_f16(*(float16x8_t *)v473->i8));
          int16x8_t v488 = (int16x8_t)vcgtq_f32(_Q30, v455);
          float64x2_t v489 = vcvtq_f64_f32(*(float32x2_t *)_Q30.f32);
          _H25 = HIWORD(*(void *)&v473[-2]);
          __asm { FCVT            D31, H25 }
          _H8 = WORD2(*(void *)&v473[-2]);
          float64x2_t v493 = vcvt_hight_f64_f32(_Q30);
          __asm { FCVT            D30, H8 }
          _Q30.i64[1] = _D31;
          LOWORD(_D31) = _Q26.i16[1];
          __asm
          {
            FCVT            D31, H31
            FCVT            D26, H26
          }
          _Q26.i64[1] = _D31;
          LOWORD(_D31) = HIWORD(_D27);
          __asm { FCVT            D31, H31 }
          _H9 = WORD2(_D27);
          __asm { FCVT            D9, H9 }
          _H10 = WORD1(_D27);
          __asm { FCVT            D10, H10 }
          _Q9.f64[1] = _D31;
          __asm { FCVT            D27, H27 }
          LOWORD(_D31) = HIWORD(*(unint64_t *)v473);
          __asm { FCVT            D31, H31 }
          _H11 = WORD2(*(unint64_t *)v473);
          __asm { FCVT            D11, H11 }
          _Q11.f64[1] = _D31;
          LOWORD(_D31) = WORD1(*(_OWORD *)v473->i8);
          __asm
          {
            FCVT            D31, H31
            FCVT            D20, H20
          }
          _Q20.f64[1] = _D31;
          LOWORD(_D31) = _Q17.i16[3];
          __asm { FCVT            D31, H31 }
          _Q27.f64[1] = _D10;
          LOWORD(_D10) = _Q17.i16[2];
          __asm { FCVT            D10, H10 }
          _Q10.f64[1] = _D31;
          LOWORD(_D31) = _Q17.i16[1];
          __asm
          {
            FCVT            D24, H31
            FCVT            D17, H17
          }
          _Q17.i64[1] = _D24;
          *(int8x8_t *)&v489.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v484, v455), v488), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v484.f32), vaddq_f64((float64x2_t)_Q26, v458))), vdivq_f64(vcvt_hight_f64_f32(v484), vaddq_f64((float64x2_t)_Q30, v458))), v456), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v489, vaddq_f64(_Q27, v458))), vdivq_f64(v493, vaddq_f64(_Q9, v458))),
                                                                                       v456))));
          *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v486, v455), (int16x8_t)vcgtq_f32(v487, v455)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v486.f32), vaddq_f64(_Q20, v458))), vdivq_f64(vcvt_hight_f64_f32(v486), vaddq_f64(_Q11, v458))), v456), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v487.f32),
                                                                                                   vaddq_f64((float64x2_t)_Q17, v458))), vdivq_f64(vcvt_hight_f64_f32(v487), vaddq_f64(_Q10, v458))), v456))));
          int32x4_t v472 = vaddq_s32(v472, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v489.f64[0], *(int8x8_t *)v455.f32)), v460));
          int32x4_t v471 = vaddq_s32(v471, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v489.f64[0], *(int8x8_t *)v455.f32)), v460));
          int32x4_t v477 = vaddq_s32(v477, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v455.f32)), v460));
          int32x4_t v476 = vaddq_s32(v476, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v455.f32)), v460));
          v474 += 4;
          v473 += 4;
          v475 -= 16;
        }
        while (v475);
        LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v476, v471), vaddq_s32(v477, v472)));
        if (v191 != (v191 & 0xFFFFFFFFFFFFFFF0))
        {
          v461 += v454;
          int v463 = v191 & 0xFFFFFFF0;
LABEL_259:
          unsigned int v464 = v463 + 1;
          do
          {
            _H5 = *(_WORD *)v461;
            __asm { FCVT            S6, H5 }
            _H5 = *(_WORD *)v462;
            __asm { FCVT            S7, H5 }
            float v469 = _S6 - _S7;
            if (v469 > *(float *)&a5)
            {
              __asm { FCVT            D5, H5 }
              *(float *)&_D5 = v469 / (_D5 + 1.0e-22);
              if (*(float *)&_D5 > *(float *)&a4) {
                LODWORD(PixelFormatType) = PixelFormatType + 1;
              }
            }
            v461 += 2;
            v462 += 2;
            BOOL v49 = v191 > v464++;
          }
          while (v49);
        }
        ++v451;
        float32x2_t v457 = (float16x4_t *)((char *)v457 + v193);
        float32x2_t v459 = (float16x4_t *)((char *)v459 + v450);
        if (v190 <= v451) {
          goto LABEL_283;
        }
      }
      int v463 = 0;
      goto LABEL_259;
    }
    if ((int)PixelFormatType > 875704437)
    {
      if ((int)PixelFormatType > 1278226533)
      {
        if (PixelFormatType == 1278226534) {
          goto LABEL_101;
        }
        int v27 = 1278226536;
        goto LABEL_75;
      }
      if (PixelFormatType != 875704438)
      {
        if (PixelFormatType != 1111970369) {
          goto LABEL_159;
        }
LABEL_37:
        if (v14 != v19 || v15 != v20) {
          goto LABEL_283;
        }
        if (!v14) {
          goto LABEL_164;
        }
        unint64_t v33 = 4 * v15;
        if (!(4 * v15)) {
          goto LABEL_164;
        }
        uint64_t v34 = 0;
        LODWORD(PixelFormatType) = 0;
        if (v33) {
          _ZF = (v33 - 1) >> 32 == 0;
        }
        else {
          _ZF = 0;
        }
        char v36 = !_ZF;
        unint64_t v37 = v33 & 0xFFFFFFFFFFFFFFF0;
        float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
        float32x4_t v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        unint64_t v40 = v33 & 0xFFFFFFFFFFFFFFF8;
        float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
        v42.i64[0] = 0x100000001;
        v42.i64[1] = 0x100000001;
        size_t v43 = v18;
        size_t v44 = BaseAddress;
        while (1)
        {
          size_t v45 = (unsigned __int8 *)BaseAddress + v34 * v17;
          unsigned int v46 = (unsigned __int8 *)v18 + v34 * v21;
          if (v33 < 8 || (v36 & 1) != 0)
          {
            int v47 = 0;
            goto LABEL_52;
          }
          if (v33 >= 0x10)
          {
            int32x4_t v54 = (int32x4_t)PixelFormatType;
            int32x4_t v55 = 0uLL;
            size_t v56 = (int8x16_t *)v43;
            uint64_t v57 = (uint8x16_t *)v44;
            unint64_t v58 = v33 & 0xFFFFFFFFFFFFFFF0;
            int32x4_t v59 = 0uLL;
            int32x4_t v60 = 0uLL;
            do
            {
              uint8x16_t v61 = *v57++;
              uint8x16_t v62 = v61;
              int8x16_t v63 = *v56++;
              int16x8_t v64 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v62.i8, *(uint8x8_t *)v63.i8);
              int32x4_t v65 = vmovl_high_s16(v64);
              int16x8_t v66 = (int16x8_t)vsubl_high_u8(v62, (uint8x16_t)v63);
              int32x4_t v67 = vmovl_high_s16(v66);
              float32x4_t v68 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v66.i8));
              float32x4_t v69 = vcvtq_f32_s32(v67);
              float32x4_t v70 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v64.i8));
              float32x4_t v71 = vcvtq_f32_s32(v65);
              int16x8_t v72 = (int16x8_t)vcgtq_f32(v68, v38);
              float64x2_t v73 = vcvtq_f64_f32(*(float32x2_t *)v68.f32);
              float64x2_t v74 = vcvt_hight_f64_f32(v68);
              float64x2_t v75 = vcvtq_f64_f32(*(float32x2_t *)v70.f32);
              float64x2_t v76 = vcvt_hight_f64_f32(v70);
              int8x8_t v77 = (int8x8_t)vextq_s8(v63, v63, 8uLL).u64[0];
              int16x8_t v78 = vuzp1q_s16((int16x8_t)vcgtq_f32(v70, v38), (int16x8_t)vcgtq_f32(v71, v38));
              v79.i32[0] = v77.u8[6];
              v79.i32[1] = v77.u8[7];
              int8x16_t v80 = (int8x16_t)vuzp1q_s16(v72, (int16x8_t)vcgtq_f32(v69, v38));
              v81.i32[0] = v77.u8[4];
              v81.i32[1] = v77.u8[5];
              int8x8_t v82 = vand_s8(v79, (int8x8_t)0xFF000000FFLL);
              v83.i32[0] = v77.u8[2];
              v83.i32[1] = v77.u8[3];
              int8x8_t v84 = vand_s8(v81, (int8x8_t)0xFF000000FFLL);
              v72.i32[0] = v77.u8[0];
              v85.i64[0] = v82.u32[0];
              v85.i64[1] = v82.u32[1];
              uint64x2_t v86 = v85;
              int8x8_t v87 = vand_s8(v83, (int8x8_t)0xFF000000FFLL);
              v72.i32[1] = v77.u8[1];
              v85.i64[0] = v84.u32[0];
              v85.i64[1] = v84.u32[1];
              uint64x2_t v88 = v85;
              v77.i32[0] = v63.u8[6];
              v77.i32[1] = v63.u8[7];
              v85.i64[0] = v87.u32[0];
              v85.i64[1] = v87.u32[1];
              uint64x2_t v89 = v85;
              *(int8x8_t *)v72.i8 = vand_s8(*(int8x8_t *)v72.i8, (int8x8_t)0xFF000000FFLL);
              int8x8_t v90 = vand_s8(v77, (int8x8_t)0xFF000000FFLL);
              v85.i64[0] = v90.u32[0];
              v85.i64[1] = v90.u32[1];
              uint64x2_t v91 = v85;
              v85.i64[0] = v72.u32[0];
              v85.i64[1] = v72.u32[1];
              uint64x2_t v92 = v85;
              v93.i32[0] = v63.u8[4];
              v93.i32[1] = v63.u8[5];
              int8x8_t v94 = vand_s8(v93, (int8x8_t)0xFF000000FFLL);
              v85.i64[0] = v94.u32[0];
              v85.i64[1] = v94.u32[1];
              float64x2_t v95 = vcvtq_f64_u64(v85);
              v96.i32[0] = v63.u8[2];
              v96.i32[1] = v63.u8[3];
              int8x8_t v97 = vand_s8(v96, (int8x8_t)0xFF000000FFLL);
              v85.i64[0] = v97.u32[0];
              v85.i64[1] = v97.u32[1];
              float64x2_t v98 = vcvtq_f64_u64(v85);
              v99.i32[0] = v63.u8[0];
              v99.i32[1] = v63.u8[1];
              float64x2_t v100 = vcvtq_f64_u64(v92);
              *(int8x8_t *)v92.i8 = vand_s8(v99, (int8x8_t)0xFF000000FFLL);
              v85.i64[0] = v92.u32[0];
              v85.i64[1] = v92.u32[1];
              *(int8x8_t *)v80.i8 = vmovn_s16((int16x8_t)vandq_s8(v80, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v73, vaddq_f64(v100, v41))), vdivq_f64(v74, vaddq_f64(vcvtq_f64_u64(v89), v41))), v39), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v69.f32), vaddq_f64(vcvtq_f64_u64(v88), v41))), vdivq_f64(vcvt_hight_f64_f32(v69), vaddq_f64(vcvtq_f64_u64(v86), v41))),
                                                                                     v39))));
              *(int8x8_t *)v78.i8 = vand_s8(vmovn_s16(v78), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v75, vaddq_f64(vcvtq_f64_u64(v85), v41))), vdivq_f64(v76, vaddq_f64(v98, v41))), v39), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v71.f32), vaddq_f64(v95, v41))), vdivq_f64(vcvt_hight_f64_f32(v71), vaddq_f64(vcvtq_f64_u64(v91), v41))), v39))));
              int32x4_t v55 = vaddq_s32(v55, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v78.i8, *(int8x8_t *)v38.f32)), v42));
              int32x4_t v54 = vaddq_s32(v54, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v78.i8, *(int8x8_t *)v38.f32)), v42));
              int32x4_t v60 = vaddq_s32(v60, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v80.i8, *(int8x8_t *)v38.f32)), v42));
              int32x4_t v59 = vaddq_s32(v59, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v80.i8, *(int8x8_t *)v38.f32)), v42));
              v58 -= 16;
            }
            while (v58);
            LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v54, v59), vaddq_s32(v55, v60)));
            if (v33 == v37) {
              goto LABEL_48;
            }
            if ((v15 & 2) == 0)
            {
              v45 += v37;
              v46 += v37;
              int v47 = v33 & 0xFFFFFFF0;
              goto LABEL_52;
            }
            unint64_t v53 = v33 & 0xFFFFFFFFFFFFFFF0;
          }
          else
          {
            unint64_t v53 = 0;
          }
          v46 += v40;
          int32x4_t v101 = 0uLL;
          int32x4_t v102 = (int32x4_t)PixelFormatType;
          do
          {
            uint8x8_t v103 = *(uint8x8_t *)((char *)v43 + v53);
            int16x8_t v104 = (int16x8_t)vsubl_u8(*(uint8x8_t *)((char *)v44 + v53), v103);
            int32x4_t v105 = vmovl_high_s16(v104);
            float32x4_t v106 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v104.i8));
            float32x4_t v107 = vcvtq_f32_s32(v105);
            v108.i32[0] = v103.u8[6];
            v108.i32[1] = v103.u8[7];
            v109.i32[0] = v103.u8[4];
            int8x8_t v110 = vand_s8(v108, (int8x8_t)0xFF000000FFLL);
            v109.i32[1] = v103.u8[5];
            int8x8_t v111 = vand_s8(v109, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v110.u32[0];
            v112.i64[1] = v110.u32[1];
            v113.i32[0] = v103.u8[2];
            v113.i32[1] = v103.u8[3];
            float64x2_t v114 = vcvtq_f64_u64(v112);
            v112.i64[0] = v111.u32[0];
            v112.i64[1] = v111.u32[1];
            uint64x2_t v115 = v112;
            int8x8_t v116 = vand_s8(v113, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v116.u32[0];
            v112.i64[1] = v116.u32[1];
            v117.i32[0] = v103.u8[0];
            v117.i32[1] = v103.u8[1];
            float64x2_t v118 = vcvtq_f64_u64(v112);
            int8x8_t v119 = vand_s8(v117, (int8x8_t)0xFF000000FFLL);
            v112.i64[0] = v119.u32[0];
            v112.i64[1] = v119.u32[1];
            *(int8x8_t *)v106.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v106, v38), (int16x8_t)vcgtq_f32(v107, v38)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v106.f32), vaddq_f64(vcvtq_f64_u64(v112), v41))), vdivq_f64(vcvt_hight_f64_f32(v106), vaddq_f64(v118, v41))), v39), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v107.f32), vaddq_f64(vcvtq_f64_u64(v115), v41))), vdivq_f64(vcvt_hight_f64_f32(v107), vaddq_f64(v114, v41))), v39))));
            int32x4_t v101 = vaddq_s32(v101, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v106.f32, *(int8x8_t *)v38.f32)), v42));
            int32x4_t v102 = vaddq_s32(v102, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v106.f32, *(int8x8_t *)v38.f32)), v42));
            v53 += 8;
          }
          while (v40 != v53);
          LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(v102, v101));
          if (v33 != v40)
          {
            v45 += v40;
            int v47 = v33 & 0xFFFFFFF8;
LABEL_52:
            unsigned int v48 = v47 + 1;
            do
            {
              unsigned int v50 = *v46;
              float v51 = (float)(int)(*v45 - v50);
              if (v51 > *(float *)&a5)
              {
                float v52 = v51 / ((double)v50 + 1.0e-22);
                if (v52 > *(float *)&a4) {
                  LODWORD(PixelFormatType) = PixelFormatType + 1;
                }
              }
              ++v45;
              ++v46;
              BOOL v49 = v33 > v48++;
            }
            while (v49);
          }
LABEL_48:
          ++v34;
          size_t v44 = (float *)((char *)v44 + v17);
          size_t v43 = (float *)((char *)v43 + v21);
          if (v14 <= v34) {
            goto LABEL_283;
          }
        }
      }
      goto LABEL_35;
    }
    if (PixelFormatType == 32) {
      goto LABEL_37;
    }
    if (PixelFormatType != 843264104)
    {
      if (PixelFormatType != 875704422) {
        goto LABEL_159;
      }
LABEL_35:
      CGRect v28 = (uint8x16_t *)CVPixelBufferGetBaseAddressOfPlane(this, 0);
      size_t v29 = CVPixelBufferGetHeightOfPlane(this, 0);
      size_t v30 = CVPixelBufferGetWidthOfPlane(this, 0);
      size_t v31 = CVPixelBufferGetBytesPerRowOfPlane(this, 0);
      if (v28)
      {
        size_t v32 = v31;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v29 = 0;
        size_t v30 = 0;
        size_t v32 = 0;
      }
      float32x4_t v262 = (int8x16_t *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
      size_t v263 = CVPixelBufferGetHeightOfPlane(a2, 0);
      size_t v264 = CVPixelBufferGetWidthOfPlane(a2, 0);
      size_t v265 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
      if (!v262)
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v263 = 0;
        size_t v264 = 0;
        size_t v265 = 0;
      }
      if (v29 == v263 && v30 == v264)
      {
        LODWORD(v19) = 0;
        if (v29)
        {
          if (v30)
          {
            uint64_t v266 = 0;
            LODWORD(v19) = 0;
            if (v30) {
              BOOL v267 = (v30 - 1) >> 32 == 0;
            }
            else {
              BOOL v267 = 0;
            }
            char v268 = !v267;
            unint64_t v269 = v30 & 0xFFFFFFFFFFFFFFF0;
            float32x4_t v270 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
            float32x4_t v271 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
            unint64_t v272 = v30 & 0xFFFFFFFFFFFFFFF8;
            float64x2_t v273 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
            v274.i64[0] = 0x100000001;
            v274.i64[1] = 0x100000001;
            float32x4_t v275 = v262;
            unint64_t v276 = v28;
            do
            {
              unint64_t v277 = &v28->i8[v266 * v32];
              float32x2_t v278 = &v262->i8[v266 * v265];
              if (v30 < 8 || (v268 & 1) != 0)
              {
                int v279 = 0;
                goto LABEL_183;
              }
              if (v30 >= 0x10)
              {
                int32x4_t v304 = (int32x4_t)v19;
                int32x4_t v305 = 0uLL;
                unint64_t v306 = v275;
                float32x2_t v307 = v276;
                unint64_t v308 = v30 & 0xFFFFFFFFFFFFFFF0;
                int32x4_t v309 = 0uLL;
                int32x4_t v310 = 0uLL;
                do
                {
                  uint8x16_t v311 = *v307++;
                  uint8x16_t v312 = v311;
                  int8x16_t v313 = *v306++;
                  int16x8_t v314 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v312.i8, *(uint8x8_t *)v313.i8);
                  int32x4_t v315 = vmovl_high_s16(v314);
                  int16x8_t v316 = (int16x8_t)vsubl_high_u8(v312, (uint8x16_t)v313);
                  int32x4_t v317 = vmovl_high_s16(v316);
                  float32x4_t v318 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v316.i8));
                  float32x4_t v319 = vcvtq_f32_s32(v317);
                  float32x4_t v320 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v314.i8));
                  float32x4_t v321 = vcvtq_f32_s32(v315);
                  int16x8_t v322 = (int16x8_t)vcgtq_f32(v318, v270);
                  float64x2_t v323 = vcvtq_f64_f32(*(float32x2_t *)v318.f32);
                  float64x2_t v324 = vcvt_hight_f64_f32(v318);
                  float64x2_t v325 = vcvtq_f64_f32(*(float32x2_t *)v320.f32);
                  float64x2_t v326 = vcvt_hight_f64_f32(v320);
                  int8x8_t v327 = (int8x8_t)vextq_s8(v313, v313, 8uLL).u64[0];
                  int16x8_t v328 = vuzp1q_s16((int16x8_t)vcgtq_f32(v320, v270), (int16x8_t)vcgtq_f32(v321, v270));
                  v329.i32[0] = v327.u8[6];
                  v329.i32[1] = v327.u8[7];
                  int8x16_t v330 = (int8x16_t)vuzp1q_s16(v322, (int16x8_t)vcgtq_f32(v319, v270));
                  v331.i32[0] = v327.u8[4];
                  v331.i32[1] = v327.u8[5];
                  int8x8_t v332 = vand_s8(v329, (int8x8_t)0xFF000000FFLL);
                  v333.i32[0] = v327.u8[2];
                  v333.i32[1] = v327.u8[3];
                  int8x8_t v334 = vand_s8(v331, (int8x8_t)0xFF000000FFLL);
                  v322.i32[0] = v327.u8[0];
                  v335.i64[0] = v332.u32[0];
                  v335.i64[1] = v332.u32[1];
                  uint64x2_t v336 = v335;
                  int8x8_t v337 = vand_s8(v333, (int8x8_t)0xFF000000FFLL);
                  v322.i32[1] = v327.u8[1];
                  v335.i64[0] = v334.u32[0];
                  v335.i64[1] = v334.u32[1];
                  uint64x2_t v338 = v335;
                  v327.i32[0] = v313.u8[6];
                  v327.i32[1] = v313.u8[7];
                  v335.i64[0] = v337.u32[0];
                  v335.i64[1] = v337.u32[1];
                  uint64x2_t v339 = v335;
                  *(int8x8_t *)v322.i8 = vand_s8(*(int8x8_t *)v322.i8, (int8x8_t)0xFF000000FFLL);
                  int8x8_t v340 = vand_s8(v327, (int8x8_t)0xFF000000FFLL);
                  v335.i64[0] = v340.u32[0];
                  v335.i64[1] = v340.u32[1];
                  uint64x2_t v341 = v335;
                  v335.i64[0] = v322.u32[0];
                  v335.i64[1] = v322.u32[1];
                  uint64x2_t v342 = v335;
                  v343.i32[0] = v313.u8[4];
                  v343.i32[1] = v313.u8[5];
                  int8x8_t v344 = vand_s8(v343, (int8x8_t)0xFF000000FFLL);
                  v335.i64[0] = v344.u32[0];
                  v335.i64[1] = v344.u32[1];
                  float64x2_t v345 = vcvtq_f64_u64(v335);
                  v346.i32[0] = v313.u8[2];
                  v346.i32[1] = v313.u8[3];
                  int8x8_t v347 = vand_s8(v346, (int8x8_t)0xFF000000FFLL);
                  v335.i64[0] = v347.u32[0];
                  v335.i64[1] = v347.u32[1];
                  float64x2_t v348 = vcvtq_f64_u64(v335);
                  v349.i32[0] = v313.u8[0];
                  v349.i32[1] = v313.u8[1];
                  float64x2_t v350 = vcvtq_f64_u64(v342);
                  *(int8x8_t *)v342.i8 = vand_s8(v349, (int8x8_t)0xFF000000FFLL);
                  v335.i64[0] = v342.u32[0];
                  v335.i64[1] = v342.u32[1];
                  *(int8x8_t *)v330.i8 = vmovn_s16((int16x8_t)vandq_s8(v330, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v323, vaddq_f64(v350, v273))), vdivq_f64(v324, vaddq_f64(vcvtq_f64_u64(v339), v273))), v271), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v319.f32), vaddq_f64(vcvtq_f64_u64(v338), v273))), vdivq_f64(vcvt_hight_f64_f32(v319), vaddq_f64(vcvtq_f64_u64(v336), v273))),
                                                                                          v271))));
                  *(int8x8_t *)v328.i8 = vand_s8(vmovn_s16(v328), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v325, vaddq_f64(vcvtq_f64_u64(v335), v273))), vdivq_f64(v326, vaddq_f64(v348, v273))), v271), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v321.f32), vaddq_f64(v345, v273))), vdivq_f64(vcvt_hight_f64_f32(v321),
                                                                vaddq_f64(vcvtq_f64_u64(v341), v273))),
                                                            v271))));
                  int32x4_t v305 = vaddq_s32(v305, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v328.i8, *(int8x8_t *)v270.f32)), v274));
                  int32x4_t v304 = vaddq_s32(v304, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v328.i8, *(int8x8_t *)v270.f32)), v274));
                  int32x4_t v310 = vaddq_s32(v310, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v330.i8, *(int8x8_t *)v270.f32)), v274));
                  int32x4_t v309 = vaddq_s32(v309, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v330.i8, *(int8x8_t *)v270.f32)), v274));
                  v308 -= 16;
                }
                while (v308);
                LODWORD(v19) = vaddvq_s32(vaddq_s32(vaddq_s32(v304, v309), vaddq_s32(v305, v310)));
                if (v30 == v269) {
                  goto LABEL_179;
                }
                if ((v30 & 8) == 0)
                {
                  v277 += v269;
                  v278 += v269;
                  int v279 = v30 & 0xFFFFFFF0;
LABEL_183:
                  unsigned int v280 = v279 + 1;
                  do
                  {
                    unsigned int v281 = *v278;
                    float v282 = (float)(int)(*v277 - v281);
                    if (v282 > *(float *)&a5)
                    {
                      float v283 = v282 / ((double)v281 + 1.0e-22);
                      if (v283 > *(float *)&a4) {
                        LODWORD(v19) = v19 + 1;
                      }
                    }
                    ++v277;
                    ++v278;
                    BOOL v49 = v30 > v280++;
                  }
                  while (v49);
                  goto LABEL_179;
                }
                unint64_t v284 = v30 & 0xFFFFFFFFFFFFFFF0;
              }
              else
              {
                unint64_t v284 = 0;
              }
              v278 += v272;
              int32x4_t v285 = 0uLL;
              int32x4_t v286 = (int32x4_t)v19;
              do
              {
                uint8x8_t v287 = *(uint8x8_t *)&v275->i8[v284];
                int16x8_t v288 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v276->i8[v284], v287);
                int32x4_t v289 = vmovl_high_s16(v288);
                float32x4_t v290 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v288.i8));
                float32x4_t v291 = vcvtq_f32_s32(v289);
                v292.i32[0] = v287.u8[6];
                v292.i32[1] = v287.u8[7];
                v293.i32[0] = v287.u8[4];
                int8x8_t v294 = vand_s8(v292, (int8x8_t)0xFF000000FFLL);
                v293.i32[1] = v287.u8[5];
                int8x8_t v295 = vand_s8(v293, (int8x8_t)0xFF000000FFLL);
                v296.i64[0] = v294.u32[0];
                v296.i64[1] = v294.u32[1];
                v297.i32[0] = v287.u8[2];
                v297.i32[1] = v287.u8[3];
                float64x2_t v298 = vcvtq_f64_u64(v296);
                v296.i64[0] = v295.u32[0];
                v296.i64[1] = v295.u32[1];
                uint64x2_t v299 = v296;
                int8x8_t v300 = vand_s8(v297, (int8x8_t)0xFF000000FFLL);
                v296.i64[0] = v300.u32[0];
                v296.i64[1] = v300.u32[1];
                v301.i32[0] = v287.u8[0];
                v301.i32[1] = v287.u8[1];
                float64x2_t v302 = vcvtq_f64_u64(v296);
                int8x8_t v303 = vand_s8(v301, (int8x8_t)0xFF000000FFLL);
                v296.i64[0] = v303.u32[0];
                v296.i64[1] = v303.u32[1];
                *(int8x8_t *)v290.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v290, v270), (int16x8_t)vcgtq_f32(v291, v270)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v290.f32), vaddq_f64(vcvtq_f64_u64(v296), v273))), vdivq_f64(vcvt_hight_f64_f32(v290), vaddq_f64(v302, v273))), v271), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v291.f32), vaddq_f64(vcvtq_f64_u64(v299), v273))), vdivq_f64(vcvt_hight_f64_f32(v291), vaddq_f64(v298, v273))), v271))));
                int32x4_t v285 = vaddq_s32(v285, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v290.f32, *(int8x8_t *)v270.f32)), v274));
                int32x4_t v286 = vaddq_s32(v286, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v290.f32, *(int8x8_t *)v270.f32)), v274));
                v284 += 8;
              }
              while (v272 != v284);
              LODWORD(v19) = vaddvq_s32(vaddq_s32(v286, v285));
              if (v30 != v272)
              {
                v277 += v272;
                int v279 = v30 & 0xFFFFFFF8;
                goto LABEL_183;
              }
LABEL_179:
              ++v266;
              unint64_t v276 = (uint8x16_t *)((char *)v276 + v32);
              float32x4_t v275 = (int8x16_t *)((char *)v275 + v265);
            }
            while (v29 > v266);
          }
        }
      }
      char v351 = (uint8x16_t *)CVPixelBufferGetBaseAddressOfPlane(this, 1uLL);
      size_t v352 = CVPixelBufferGetHeightOfPlane(this, 1uLL);
      size_t v353 = CVPixelBufferGetWidthOfPlane(this, 1uLL);
      size_t v354 = CVPixelBufferGetBytesPerRowOfPlane(this, 1uLL);
      if (v351)
      {
        size_t v355 = v354;
      }
      else
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v352 = 0;
        size_t v353 = 0;
        size_t v355 = 0;
      }
      uint64_t v356 = (int8x16_t *)CVPixelBufferGetBaseAddressOfPlane(a2, 1uLL);
      size_t v357 = CVPixelBufferGetHeightOfPlane(a2, 1uLL);
      size_t v358 = CVPixelBufferGetWidthOfPlane(a2, 1uLL);
      size_t v359 = CVPixelBufferGetBytesPerRowOfPlane(a2, 1uLL);
      if (!v356)
      {
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
        size_t v357 = 0;
        size_t v358 = 0;
        size_t v359 = 0;
      }
      if (v352 != v357 || v353 != v358)
      {
LABEL_239:
        LODWORD(PixelFormatType) = v360 + v19;
        goto LABEL_283;
      }
      if (!v352 || (unint64_t v361 = 2 * v353) == 0)
      {
        LODWORD(PixelFormatType) = v19;
        goto LABEL_283;
      }
      uint64_t v362 = 0;
      unsigned int v360 = 0;
      if (v361) {
        BOOL v363 = (v361 - 1) >> 32 == 0;
      }
      else {
        BOOL v363 = 0;
      }
      char v364 = !v363;
      unint64_t v365 = v361 & 0xFFFFFFFFFFFFFFF0;
      float32x4_t v366 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
      float32x4_t v367 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
      unint64_t v368 = v361 & 0xFFFFFFFFFFFFFFF8;
      float64x2_t v369 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
      v370.i64[0] = 0x100000001;
      v370.i64[1] = 0x100000001;
      long long v371 = v356;
      unint64_t v372 = v351;
      while (1)
      {
        uint64_t v373 = &v351->i8[v362 * v355];
        unint64_t v374 = &v356->i8[v362 * v359];
        if (v361 < 8 || (v364 & 1) != 0)
        {
          int v375 = 0;
          goto LABEL_221;
        }
        if (v361 >= 0x10)
        {
          int32x4_t v400 = (int32x4_t)v360;
          int32x4_t v401 = 0uLL;
          float32x2_t v402 = v371;
          int v403 = v372;
          unint64_t v404 = v361 & 0xFFFFFFFFFFFFFFF0;
          int32x4_t v405 = 0uLL;
          int32x4_t v406 = 0uLL;
          do
          {
            uint8x16_t v407 = *v403++;
            uint8x16_t v408 = v407;
            int8x16_t v409 = *v402++;
            int16x8_t v410 = (int16x8_t)vsubl_u8(*(uint8x8_t *)v408.i8, *(uint8x8_t *)v409.i8);
            int32x4_t v411 = vmovl_high_s16(v410);
            int16x8_t v412 = (int16x8_t)vsubl_high_u8(v408, (uint8x16_t)v409);
            int32x4_t v413 = vmovl_high_s16(v412);
            float32x4_t v414 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v412.i8));
            float32x4_t v415 = vcvtq_f32_s32(v413);
            float32x4_t v416 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v410.i8));
            float32x4_t v417 = vcvtq_f32_s32(v411);
            int16x8_t v418 = (int16x8_t)vcgtq_f32(v414, v366);
            float64x2_t v419 = vcvtq_f64_f32(*(float32x2_t *)v414.f32);
            float64x2_t v420 = vcvt_hight_f64_f32(v414);
            float64x2_t v421 = vcvtq_f64_f32(*(float32x2_t *)v416.f32);
            float64x2_t v422 = vcvt_hight_f64_f32(v416);
            int8x8_t v423 = (int8x8_t)vextq_s8(v409, v409, 8uLL).u64[0];
            int16x8_t v424 = vuzp1q_s16((int16x8_t)vcgtq_f32(v416, v366), (int16x8_t)vcgtq_f32(v417, v366));
            v425.i32[0] = v423.u8[6];
            v425.i32[1] = v423.u8[7];
            int8x16_t v426 = (int8x16_t)vuzp1q_s16(v418, (int16x8_t)vcgtq_f32(v415, v366));
            v427.i32[0] = v423.u8[4];
            v427.i32[1] = v423.u8[5];
            int8x8_t v428 = vand_s8(v425, (int8x8_t)0xFF000000FFLL);
            v429.i32[0] = v423.u8[2];
            v429.i32[1] = v423.u8[3];
            int8x8_t v430 = vand_s8(v427, (int8x8_t)0xFF000000FFLL);
            v418.i32[0] = v423.u8[0];
            v431.i64[0] = v428.u32[0];
            v431.i64[1] = v428.u32[1];
            uint64x2_t v432 = v431;
            int8x8_t v433 = vand_s8(v429, (int8x8_t)0xFF000000FFLL);
            v418.i32[1] = v423.u8[1];
            v431.i64[0] = v430.u32[0];
            v431.i64[1] = v430.u32[1];
            uint64x2_t v434 = v431;
            v423.i32[0] = v409.u8[6];
            v423.i32[1] = v409.u8[7];
            v431.i64[0] = v433.u32[0];
            v431.i64[1] = v433.u32[1];
            uint64x2_t v435 = v431;
            *(int8x8_t *)v418.i8 = vand_s8(*(int8x8_t *)v418.i8, (int8x8_t)0xFF000000FFLL);
            int8x8_t v436 = vand_s8(v423, (int8x8_t)0xFF000000FFLL);
            v431.i64[0] = v436.u32[0];
            v431.i64[1] = v436.u32[1];
            uint64x2_t v437 = v431;
            v431.i64[0] = v418.u32[0];
            v431.i64[1] = v418.u32[1];
            uint64x2_t v438 = v431;
            v439.i32[0] = v409.u8[4];
            v439.i32[1] = v409.u8[5];
            int8x8_t v440 = vand_s8(v439, (int8x8_t)0xFF000000FFLL);
            v431.i64[0] = v440.u32[0];
            v431.i64[1] = v440.u32[1];
            float64x2_t v441 = vcvtq_f64_u64(v431);
            v442.i32[0] = v409.u8[2];
            v442.i32[1] = v409.u8[3];
            int8x8_t v443 = vand_s8(v442, (int8x8_t)0xFF000000FFLL);
            v431.i64[0] = v443.u32[0];
            v431.i64[1] = v443.u32[1];
            float64x2_t v444 = vcvtq_f64_u64(v431);
            v445.i32[0] = v409.u8[0];
            v445.i32[1] = v409.u8[1];
            float64x2_t v446 = vcvtq_f64_u64(v438);
            *(int8x8_t *)v438.i8 = vand_s8(v445, (int8x8_t)0xFF000000FFLL);
            v431.i64[0] = v438.u32[0];
            v431.i64[1] = v438.u32[1];
            *(int8x8_t *)v426.i8 = vmovn_s16((int16x8_t)vandq_s8(v426, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v419, vaddq_f64(v446, v369))), vdivq_f64(v420, vaddq_f64(vcvtq_f64_u64(v435), v369))), v367), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v415.f32),
                                                                                                     vaddq_f64(vcvtq_f64_u64(v434), v369))),
                                                                                      vdivq_f64(vcvt_hight_f64_f32(v415), vaddq_f64(vcvtq_f64_u64(v432), v369))), v367))));
            *(int8x8_t *)v424.i8 = vand_s8(vmovn_s16(v424), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v421, vaddq_f64(vcvtq_f64_u64(v431), v369))), vdivq_f64(v422, vaddq_f64(v444, v369))), v367), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v417.f32), vaddq_f64(v441, v369))), vdivq_f64(vcvt_hight_f64_f32(v417),
                                                          vaddq_f64(vcvtq_f64_u64(v437), v369))),
                                                      v367))));
            int32x4_t v401 = vaddq_s32(v401, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v424.i8, *(int8x8_t *)v366.f32)), v370));
            int32x4_t v400 = vaddq_s32(v400, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v424.i8, *(int8x8_t *)v366.f32)), v370));
            int32x4_t v406 = vaddq_s32(v406, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v426.i8, *(int8x8_t *)v366.f32)), v370));
            int32x4_t v405 = vaddq_s32(v405, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v426.i8, *(int8x8_t *)v366.f32)), v370));
            v404 -= 16;
          }
          while (v404);
          unsigned int v360 = vaddvq_s32(vaddq_s32(vaddq_s32(v400, v405), vaddq_s32(v401, v406)));
          if (v361 == v365) {
            goto LABEL_217;
          }
          if ((v353 & 4) == 0)
          {
            v373 += v365;
            v374 += v365;
            int v375 = v361 & 0xFFFFFFF0;
LABEL_221:
            unsigned int v376 = v375 + 1;
            do
            {
              unsigned int v377 = *v374;
              float v378 = (float)(int)(*v373 - v377);
              if (v378 > *(float *)&a5)
              {
                float v379 = v378 / ((double)v377 + 1.0e-22);
                if (v379 > *(float *)&a4) {
                  ++v360;
                }
              }
              ++v373;
              ++v374;
              BOOL v49 = v361 > v376++;
            }
            while (v49);
            goto LABEL_217;
          }
          unint64_t v380 = v361 & 0xFFFFFFFFFFFFFFF0;
        }
        else
        {
          unint64_t v380 = 0;
        }
        v374 += v368;
        int32x4_t v381 = 0uLL;
        int32x4_t v382 = (int32x4_t)v360;
        do
        {
          uint8x8_t v383 = *(uint8x8_t *)&v371->i8[v380];
          int16x8_t v384 = (int16x8_t)vsubl_u8(*(uint8x8_t *)&v372->i8[v380], v383);
          int32x4_t v385 = vmovl_high_s16(v384);
          float32x4_t v386 = vcvtq_f32_s32(vmovl_s16(*(int16x4_t *)v384.i8));
          float32x4_t v387 = vcvtq_f32_s32(v385);
          v388.i32[0] = v383.u8[6];
          v388.i32[1] = v383.u8[7];
          v389.i32[0] = v383.u8[4];
          int8x8_t v390 = vand_s8(v388, (int8x8_t)0xFF000000FFLL);
          v389.i32[1] = v383.u8[5];
          int8x8_t v391 = vand_s8(v389, (int8x8_t)0xFF000000FFLL);
          v392.i64[0] = v390.u32[0];
          v392.i64[1] = v390.u32[1];
          v393.i32[0] = v383.u8[2];
          v393.i32[1] = v383.u8[3];
          float64x2_t v394 = vcvtq_f64_u64(v392);
          v392.i64[0] = v391.u32[0];
          v392.i64[1] = v391.u32[1];
          uint64x2_t v395 = v392;
          int8x8_t v396 = vand_s8(v393, (int8x8_t)0xFF000000FFLL);
          v392.i64[0] = v396.u32[0];
          v392.i64[1] = v396.u32[1];
          v397.i32[0] = v383.u8[0];
          v397.i32[1] = v383.u8[1];
          float64x2_t v398 = vcvtq_f64_u64(v392);
          int8x8_t v399 = vand_s8(v397, (int8x8_t)0xFF000000FFLL);
          v392.i64[0] = v399.u32[0];
          v392.i64[1] = v399.u32[1];
          *(int8x8_t *)v386.f32 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v386, v366), (int16x8_t)vcgtq_f32(v387, v366)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v386.f32), vaddq_f64(vcvtq_f64_u64(v392), v369))), vdivq_f64(vcvt_hight_f64_f32(v386), vaddq_f64(v398, v369))), v367), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v387.f32),
                                                                                                    vaddq_f64(vcvtq_f64_u64(v395), v369))),
                                                                                     vdivq_f64(vcvt_hight_f64_f32(v387), vaddq_f64(v394, v369))), v367))));
          int32x4_t v381 = vaddq_s32(v381, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v386.f32, *(int8x8_t *)v366.f32)), v370));
          int32x4_t v382 = vaddq_s32(v382, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v386.f32, *(int8x8_t *)v366.f32)), v370));
          v380 += 8;
        }
        while (v368 != v380);
        unsigned int v360 = vaddvq_s32(vaddq_s32(v382, v381));
        if (v361 != v368)
        {
          v373 += v368;
          int v375 = v361 & 0xFFFFFFF8;
          goto LABEL_221;
        }
LABEL_217:
        ++v362;
        unint64_t v372 = (uint8x16_t *)((char *)v372 + v355);
        long long v371 = (int8x16_t *)((char *)v371 + v359);
        if (v352 <= v362) {
          goto LABEL_239;
        }
      }
    }
    if (v14 != v19 || v15 != v20) {
      goto LABEL_283;
    }
    if (!v14) {
      goto LABEL_164;
    }
    unint64_t v194 = 2 * v15;
    if (!(2 * v15)) {
      goto LABEL_164;
    }
    uint64_t v195 = 0;
    LODWORD(PixelFormatType) = 0;
    if (v194) {
      BOOL v196 = (v194 - 1) >> 32 == 0;
    }
    else {
      BOOL v196 = 0;
    }
    char v197 = !v196;
    unint64_t v198 = 2 * (v194 & 0xFFFFFFFFFFFFFFF0);
    float32x4_t v199 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a5, 0);
    float32x4_t v200 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    unsigned int v201 = (float16x4_t *)(BaseAddress + 4);
    float64x2_t v202 = (float64x2_t)vdupq_n_s64(0x3B5E392010175EE6uLL);
    uint64_t v203 = (float16x4_t *)(v18 + 4);
    v204.i64[0] = 0x100000001;
    v204.i64[1] = 0x100000001;
    while (1)
    {
      unint64_t v205 = (__int16 *)((char *)BaseAddress + v195 * v17);
      float32x2_t v206 = (__int16 *)((char *)v18 + v195 * v21);
      if (v194 < 0x10 || (v197 & 1) != 0) {
        break;
      }
      float32x2_t v206 = (__int16 *)((char *)v206 + v198);
      int32x4_t v215 = (int32x4_t)PixelFormatType;
      int32x4_t v216 = 0uLL;
      unint64_t v217 = v203;
      uint64_t v218 = v201;
      unint64_t v219 = v194 & 0xFFFFFFFFFFFFFFF0;
      int32x4_t v220 = 0uLL;
      int32x4_t v221 = 0uLL;
      do
      {
        _Q17 = *(float16x8_t *)v218[-2].i8;
        float32x4_t v223 = vcvt_hight_f32_f16(_Q17);
        float32x4_t v224 = vcvtq_f32_f16(*(float16x4_t *)_Q17.i8);
        _Q26 = *(float16x8_t *)v217[-2].i8;
        _Q20 = *(float64x2_t *)v217->i8;
        _D27 = vextq_s8((int8x16_t)_Q26, (int8x16_t)_Q26, 8uLL).u64[0];
        _Q17.i64[0] = vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 8uLL).u64[0];
        float32x4_t v228 = vsubq_f32(v224, vcvtq_f32_f16(*(float16x4_t *)_Q26.i8));
        _Q30 = vsubq_f32(v223, vcvt_hight_f32_f16(_Q26));
        float32x4_t v230 = vsubq_f32(vcvtq_f32_f16(*v218), vcvtq_f32_f16(*v217));
        float32x4_t v231 = vsubq_f32(vcvt_hight_f32_f16(*(float16x8_t *)v218->i8), vcvt_hight_f32_f16(*(float16x8_t *)v217->i8));
        int16x8_t v232 = (int16x8_t)vcgtq_f32(_Q30, v199);
        float64x2_t v233 = vcvtq_f64_f32(*(float32x2_t *)_Q30.f32);
        _H25 = HIWORD(*(void *)&v217[-2]);
        __asm { FCVT            D31, H25 }
        _H8 = WORD2(*(void *)&v217[-2]);
        float64x2_t v237 = vcvt_hight_f64_f32(_Q30);
        __asm { FCVT            D30, H8 }
        _Q30.i64[1] = _D31;
        LOWORD(_D31) = _Q26.i16[1];
        __asm
        {
          FCVT            D31, H31
          FCVT            D26, H26
        }
        _Q26.i64[1] = _D31;
        LOWORD(_D31) = HIWORD(_D27);
        __asm { FCVT            D31, H31 }
        _H9 = WORD2(_D27);
        __asm { FCVT            D9, H9 }
        _H10 = WORD1(_D27);
        __asm { FCVT            D10, H10 }
        _Q9.f64[1] = _D31;
        __asm { FCVT            D27, H27 }
        LOWORD(_D31) = HIWORD(*(unint64_t *)v217);
        __asm { FCVT            D31, H31 }
        _H11 = WORD2(*(unint64_t *)v217);
        __asm { FCVT            D11, H11 }
        _Q11.f64[1] = _D31;
        LOWORD(_D31) = WORD1(*(_OWORD *)v217->i8);
        __asm
        {
          FCVT            D31, H31
          FCVT            D20, H20
        }
        _Q20.f64[1] = _D31;
        LOWORD(_D31) = _Q17.i16[3];
        __asm { FCVT            D31, H31 }
        _Q27.f64[1] = _D10;
        LOWORD(_D10) = _Q17.i16[2];
        __asm { FCVT            D10, H10 }
        _Q10.f64[1] = _D31;
        LOWORD(_D31) = _Q17.i16[1];
        __asm
        {
          FCVT            D24, H31
          FCVT            D17, H17
        }
        _Q17.i64[1] = _D24;
        *(int8x8_t *)&v233.f64[0] = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v228, v199), v232), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v228.f32), vaddq_f64((float64x2_t)_Q26, v202))), vdivq_f64(vcvt_hight_f64_f32(v228), vaddq_f64((float64x2_t)_Q30, v202))), v200), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(v233, vaddq_f64(_Q27, v202))), vdivq_f64(v237, vaddq_f64(_Q9, v202))), v200))));
        *(int8x8_t *)_Q17.i8 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v230, v199), (int16x8_t)vcgtq_f32(v231, v199)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v230.f32), vaddq_f64(_Q20, v202))), vdivq_f64(vcvt_hight_f64_f32(v230), vaddq_f64(_Q11, v202))), v200), (int16x8_t)vcgtq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vcvtq_f64_f32(*(float32x2_t *)v231.f32),
                                                                                                 vaddq_f64((float64x2_t)_Q17, v202))), vdivq_f64(vcvt_hight_f64_f32(v231), vaddq_f64(_Q10, v202))), v200))));
        int32x4_t v216 = vaddq_s32(v216, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)&v233.f64[0], *(int8x8_t *)v199.f32)), v204));
        int32x4_t v215 = vaddq_s32(v215, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)&v233.f64[0], *(int8x8_t *)v199.f32)), v204));
        int32x4_t v221 = vaddq_s32(v221, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v199.f32)), v204));
        int32x4_t v220 = vaddq_s32(v220, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)_Q17.i8, *(int8x8_t *)v199.f32)), v204));
        v218 += 4;
        v217 += 4;
        v219 -= 16;
      }
      while (v219);
      LODWORD(PixelFormatType) = vaddvq_s32(vaddq_s32(vaddq_s32(v220, v215), vaddq_s32(v221, v216)));
      if (v194 != (v194 & 0xFFFFFFFFFFFFFFF0))
      {
        unint64_t v205 = (__int16 *)((char *)v205 + v198);
        int v207 = v194 & 0xFFFFFFF0;
LABEL_139:
        unsigned int v208 = v207 + 1;
        do
        {
          _H5 = *v205;
          __asm { FCVT            S6, H5 }
          _H5 = *v206;
          __asm { FCVT            S7, H5 }
          float v213 = _S6 - _S7;
          if (v213 > *(float *)&a5)
          {
            __asm { FCVT            D5, H5 }
            *(float *)&_D5 = v213 / (_D5 + 1.0e-22);
            if (*(float *)&_D5 > *(float *)&a4) {
              LODWORD(PixelFormatType) = PixelFormatType + 1;
            }
          }
          ++v205;
          ++v206;
          BOOL v49 = v194 > v208++;
        }
        while (v49);
      }
      ++v195;
      unsigned int v201 = (float16x4_t *)((char *)v201 + v17);
      uint64_t v203 = (float16x4_t *)((char *)v203 + v21);
      if (v14 <= v195) {
        goto LABEL_283;
      }
    }
    int v207 = 0;
    goto LABEL_139;
  }
  return result;
}

void sub_2590D170C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3)
{
  return PixelBufferUtils::errorsPixelBuffer(this, a2, 0, 1);
}

__CVBuffer *PixelBufferUtils::errorsPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer *a3, uint64_t a4)
{
  char v5 = (char)a3;
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  if (PixelFormatType == CVPixelBufferGetPixelFormatType(a2))
  {
    size_t Width = CVPixelBufferGetWidth(this);
    if (Width == CVPixelBufferGetWidth(a2))
    {
      size_t Height = CVPixelBufferGetHeight(this);
      if (Height == CVPixelBufferGetHeight(a2))
      {
        char v141 = v5;
        unint64_t v11 = CVPixelBufferGetPixelFormatType(this);
        size_t v12 = CVPixelBufferGetWidth(this);
        size_t v13 = CVPixelBufferGetHeight(this);
        pixelBufferOut[0] = 0;
        CFAllocatorRef v14 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
        CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
        if (CVPixelBufferCreate(v14, v12, v13, v11, BufferAttributes, pixelBufferOut)) {
          OSStatus v16 = 0;
        }
        else {
          OSStatus v16 = pixelBufferOut[0];
        }
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        CVPixelBufferLockBaseAddress(v16, 0);
        BaseAddress = (__CVBuffer *)CVPixelBufferGetBaseAddress(this);
        pixelBufferOut[0] = BaseAddress;
        pixelBufferOut[1] = (CVPixelBufferRef)CVPixelBufferGetHeight(this);
        *(void *)&long long v181 = CVPixelBufferGetWidth(this);
        pixelBuffer = this;
        *((void *)&v181 + 1) = CVPixelBufferGetBytesPerRow(this);
        if (!BaseAddress)
        {
          *(_OWORD *)CVPixelBufferRef pixelBufferOut = 0u;
          long long v181 = 0u;
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
        }
        float v18 = (int8x16_t *)CVPixelBufferGetBaseAddress(a2);
        *(void *)&long long v178 = v18;
        *((void *)&v178 + 1) = CVPixelBufferGetHeight(a2);
        *(void *)&long long v179 = CVPixelBufferGetWidth(a2);
        float32x4_t v142 = a2;
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(a2);
        *((void *)&v179 + 1) = BytesPerRow;
        if (!v18)
        {
          long long v178 = 0u;
          long long v179 = 0u;
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
          size_t BytesPerRow = 0;
        }
        *(void *)&long long v176 = CVPixelBufferGetBaseAddress(v16);
        *((void *)&v176 + 1) = CVPixelBufferGetHeight(v16);
        *(void *)&long long v177 = CVPixelBufferGetWidth(v16);
        size_t v20 = CVPixelBufferGetBytesPerRow(v16);
        *((void *)&v177 + 1) = v20;
        unint64_t v140 = (float16x8_t *)v176;
        if (!(void)v176)
        {
          long long v176 = 0u;
          long long v177 = 0u;
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
          size_t v20 = 0;
        }
        if ((int)v11 > 1111970368)
        {
          if ((int)v11 > 1380410944)
          {
            if (v11 == 1380410945)
            {
              uint64_t v32 = (uint64_t)v18;
              uint64_t v33 = BytesPerRow;
              uint64_t v34 = (float32x4_t *)v140;
              uint64_t v35 = v20;
              char v36 = v5;
              uint64_t v37 = a4;
              uint64_t v38 = 4;
            }
            else
            {
              if (v11 != 1717855600) {
                goto LABEL_35;
              }
              uint64_t v32 = (uint64_t)v18;
              uint64_t v33 = BytesPerRow;
              uint64_t v34 = (float32x4_t *)v140;
              uint64_t v35 = v20;
              char v36 = v5;
              uint64_t v37 = a4;
              uint64_t v38 = 1;
            }
            calcDiffsRaw<float>((uint64_t *)pixelBufferOut, v32, v33, v34, v35, v36, v37, v38);
            goto LABEL_40;
          }
          if (v11 != 1111970369 && v11 != 1380401729)
          {
LABEL_35:
            PixelBufferUtils::pixelFormatAsString(v11, (char *)v174);
            if (v175 >= 0) {
              float32x4_t v39 = v174;
            }
            else {
              float32x4_t v39 = (void **)v174[0];
            }
            NSLog(&cfstr_SDErrorPixelFo.isa, "errorsPixelBuffer", 2242, v11, v39);
            if (v175 < 0) {
              operator delete(v174[0]);
            }
            goto LABEL_40;
          }
LABEL_23:
          calcDiffsRaw<unsigned char>((uint64_t)pixelBufferOut, (uint64_t)&v178, &v176, v5, a4, 4);
          goto LABEL_40;
        }
        if ((int)v11 <= 875704421)
        {
          if (v11 != 32)
          {
            if (v11 == 843264104)
            {
              calcDiffsRaw<half>((uint64_t *)pixelBufferOut, v18, BytesPerRow, v140, v20, v5);
LABEL_40:
              unint64_t v40 = pixelBuffer;
LABEL_99:
              CVPixelBufferUnlockBaseAddress(v40, 1uLL);
              CVPixelBufferUnlockBaseAddress(a2, 1uLL);
              CVPixelBufferUnlockBaseAddress(v16, 0);
              return v16;
            }
            goto LABEL_35;
          }
          goto LABEL_23;
        }
        if (v11 != 875704422 && v11 != 875704438) {
          goto LABEL_35;
        }
        BaseAddressOfPlane = (__CVBuffer *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 0);
        size_t HeightOfPlane = (__CVBuffer *)CVPixelBufferGetHeightOfPlane(pixelBuffer, 0);
        size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, 0);
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 0);
        if (!BaseAddressOfPlane)
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t HeightOfPlane = 0;
          size_t WidthOfPlane = 0;
          size_t BytesPerRowOfPlane = 0;
        }
        pixelBufferOut[0] = BaseAddressOfPlane;
        pixelBufferOut[1] = HeightOfPlane;
        *(void *)&long long v181 = WidthOfPlane;
        *((void *)&v181 + 1) = BytesPerRowOfPlane;
        size_t v145 = BytesPerRowOfPlane;
        float v26 = (char *)CVPixelBufferGetBaseAddressOfPlane(a2, 0);
        size_t v27 = CVPixelBufferGetHeightOfPlane(a2, 0);
        size_t v28 = CVPixelBufferGetWidthOfPlane(a2, 0);
        size_t v29 = CVPixelBufferGetBytesPerRowOfPlane(a2, 0);
        int32x4_t v149 = v26;
        float32x2_t v138 = v16;
        if (v26)
        {
          size_t v30 = v26;
          size_t v31 = v29;
        }
        else
        {
          NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
          size_t v30 = 0;
          size_t v27 = 0;
          size_t v28 = 0;
          size_t v31 = 0;
        }
        *(void *)&long long v178 = v30;
        *((void *)&v178 + 1) = v27;
        *(void *)&long long v179 = v28;
        *((void *)&v179 + 1) = v31;
        float64x2_t v41 = v140;
        size_t v42 = v145;
        if (!HeightOfPlane)
        {
LABEL_94:
          unint64_t v40 = pixelBuffer;
          char v122 = (__CVBuffer *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, 1uLL);
          unint64_t v123 = (__CVBuffer *)CVPixelBufferGetHeightOfPlane(pixelBuffer, 1uLL);
          size_t v124 = CVPixelBufferGetWidthOfPlane(pixelBuffer, 1uLL);
          size_t v125 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, 1uLL);
          if (!v122)
          {
            NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
            unint64_t v123 = 0;
            size_t v124 = 0;
            size_t v125 = 0;
          }
          a2 = v142;
          pixelBufferOut[0] = v122;
          pixelBufferOut[1] = v123;
          *(void *)&long long v181 = v124;
          *((void *)&v181 + 1) = v125;
          float32x2_t v126 = CVPixelBufferGetBaseAddressOfPlane(v142, 1uLL);
          size_t v127 = CVPixelBufferGetHeightOfPlane(v142, 1uLL);
          size_t v128 = CVPixelBufferGetWidthOfPlane(v142, 1uLL);
          size_t v129 = CVPixelBufferGetBytesPerRowOfPlane(v142, 1uLL);
          if (!v126)
          {
            NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 177);
            size_t v127 = 0;
            size_t v128 = 0;
            size_t v129 = 0;
          }
          *(void *)&long long v178 = v126;
          *((void *)&v178 + 1) = v127;
          *(void *)&long long v179 = v128;
          *((void *)&v179 + 1) = v129;
          calcDiffsRaw<unsigned char>((uint64_t)pixelBufferOut, (uint64_t)&v178, &v176, v141, a4, 2);
          OSStatus v16 = v138;
          goto LABEL_99;
        }
        if (WidthOfPlane <= 1) {
          unint64_t v43 = 1;
        }
        else {
          unint64_t v43 = WidthOfPlane;
        }
        if (v43) {
          BOOL v44 = (v43 - 1) >> 32 == 0;
        }
        else {
          BOOL v44 = 0;
        }
        char v45 = !v44;
        char v139 = v45;
        size_t v146 = v20;
        unint64_t v147 = BaseAddressOfPlane;
        size_t v144 = v31;
        unint64_t v148 = v43;
        if (v141)
        {
          uint64_t v46 = 0;
          unsigned int v47 = 0;
          unint64_t v163 = v43 & 0xFFFFFFFFFFFFFFFCLL;
          size_t v48 = WidthOfPlane;
          while (1)
          {
            unint64_t v150 = (unint64_t)HeightOfPlane;
            if (v48)
            {
              size_t v49 = v20 * v46;
              size_t v50 = v42 * v46;
              size_t v51 = v31 * v46;
              float v52 = &v41->i8[v49];
              unint64_t v53 = &v30[v51];
              int32x4_t v54 = (char *)BaseAddressOfPlane + v50;
              if (v43 >= 8
                && (v139 & 1) == 0
                && ((int32x4_t v55 = &v41->i8[v49],
                     unint64_t v56 = v55 - &v30[v51],
                     (unint64_t)(v55 - ((char *)BaseAddressOfPlane + v50)) >= 4)
                  ? (BOOL v57 = v56 >= 4)
                  : (BOOL v57 = 0),
                    v57))
              {
                size_t v62 = v42;
                int8x16_t v63 = (__int32 *)((char *)v41->i32 + v20 * v47);
                int16x8_t v64 = &v30[v144 * v47];
                int32x4_t v65 = (char *)BaseAddressOfPlane + v62 * v47;
                unint64_t v66 = v163;
                v54 += v163;
                v53 += v163;
                v52 += v163;
                do
                {
                  v65 += 4;
                  v64 += 4;
                  __powidf2();
                  float64_t v169 = v67;
                  __powidf2();
                  v68.f64[1] = v169;
                  float64x2_t v170 = v68;
                  __powidf2();
                  float64_t v166 = v69;
                  __powidf2();
                  v70.f64[1] = v166;
                  int16x8_t v71 = (int16x8_t)vcvtq_s32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v70), v170)));
                  *(int16x4_t *)v71.i8 = vmovn_s32((int32x4_t)v71);
                  *v63++ = vmovn_s16(v71).u32[0];
                  v66 -= 4;
                }
                while (v66);
                int v58 = v163;
                size_t v48 = WidthOfPlane;
                BaseAddressOfPlane = v147;
                unint64_t v43 = v148;
                float64x2_t v41 = v140;
                size_t v42 = v145;
                size_t v20 = v146;
                size_t v30 = v149;
                if (v148 == v163) {
                  goto LABEL_54;
                }
              }
              else
              {
                int v58 = 0;
              }
              unsigned int v59 = v58 + 1;
              do
              {
                ++v54;
                ++v53;
                __powidf2();
                *(float *)&double v60 = v60;
                *v52++ = (int)fabsf(*(float *)&v60);
                BOOL v61 = WidthOfPlane > v59++;
              }
              while (v61);
              size_t v48 = WidthOfPlane;
              size_t v20 = v146;
              unint64_t v43 = v148;
              size_t v30 = v149;
            }
LABEL_54:
            uint64_t v46 = ++v47;
            size_t HeightOfPlane = (__CVBuffer *)v150;
            size_t v31 = v144;
            if (v150 <= v47) {
              goto LABEL_94;
            }
          }
        }
        uint64_t v72 = 0;
        unsigned int v73 = 0;
        unint64_t v136 = v43 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v130 = v43 & 0xC;
        uint64_t v134 = -(uint64_t)(v43 & 0xFFFFFFFFFFFFFFFCLL);
        unint64_t v135 = v43 & 0xFFFFFFFFFFFFFFFCLL;
        size_t v74 = WidthOfPlane;
        while (!v74)
        {
LABEL_71:
          uint64_t v72 = ++v73;
          BaseAddressOfPlane = v147;
          size_t v42 = v145;
          if ((unint64_t)HeightOfPlane <= v73) {
            goto LABEL_94;
          }
        }
        size_t v75 = v20 * v72;
        size_t v76 = v42 * v72;
        size_t v77 = v31 * v72;
        int16x8_t v78 = &v41->i8[v75];
        int8x8_t v79 = &v30[v77];
        int8x16_t v80 = (char *)BaseAddressOfPlane + v76;
        if (v43 < 4
          || (v139 & 1) != 0
          || ((int8x8_t v81 = &v41->i8[v75], v82 = v81 - &v30[v77], (unint64_t)(v81 - ((char *)v147 + v76)) >= 0x10)
            ? (BOOL v83 = v82 >= 0x10)
            : (BOOL v83 = 0),
              !v83))
        {
          int v84 = 0;
          goto LABEL_80;
        }
        size_t v89 = v20 * v73;
        size_t v90 = v31 * v73;
        size_t v91 = v145 * v73;
        float32x4_t v151 = HeightOfPlane;
        unsigned int v137 = v73;
        if (v43 >= 0x10)
        {
          size_t v131 = v20 * v73;
          size_t v132 = v31 * v73;
          int8x8_t v93 = (int8x16_t *)&v41->i8[v89];
          int8x8_t v94 = &v30[v90];
          size_t v133 = v145 * v73;
          float64x2_t v95 = (char *)v147 + v91;
          unint64_t v96 = v136;
          do
          {
            v95 += 16;
            v94 += 16;
            __powidf2();
            float64_t v159 = v97;
            __powidf2();
            v98.f64[1] = v159;
            float64x2_t v160 = v98;
            __powidf2();
            float64_t v152 = v99;
            __powidf2();
            v100.f64[1] = v152;
            float64x2_t v161 = v100;
            __powidf2();
            float64_t v153 = v101;
            __powidf2();
            v102.f64[1] = v153;
            float64x2_t v162 = v102;
            __powidf2();
            float64_t v154 = v103;
            __powidf2();
            v104.f64[1] = v154;
            float64x2_t v164 = v104;
            __powidf2();
            float64_t v155 = v105;
            __powidf2();
            v106.f64[1] = v155;
            float64x2_t v165 = v106;
            __powidf2();
            float64_t v156 = v107;
            __powidf2();
            v108.f64[1] = v156;
            float64x2_t v167 = v108;
            __powidf2();
            float64_t v157 = v109;
            __powidf2();
            v110.f64[1] = v157;
            float64x2_t v171 = v110;
            __powidf2();
            float64_t v158 = v111;
            __powidf2();
            v112.f64[1] = v158;
            v182.val[3] = (int8x16_t)vcvtq_u32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112), v171)));
            v182.val[2] = (int8x16_t)vcvtq_u32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v167), v165)));
            v182.val[1] = (int8x16_t)vcvtq_u32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v164), v162)));
            v182.val[0] = (int8x16_t)vcvtq_u32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v161), v160)));
            *v93++ = vqtbl4q_s8(v182, (int8x16_t)xmmword_259120320);
            v96 -= 16;
          }
          while (v96);
          size_t v74 = WidthOfPlane;
          unint64_t v43 = v148;
          size_t v30 = v149;
          float64x2_t v41 = v140;
          size_t HeightOfPlane = v151;
          size_t v31 = v144;
          unsigned int v73 = v137;
          if (v148 == v136) {
            goto LABEL_71;
          }
          unint64_t v92 = v136;
          size_t v89 = v131;
          size_t v90 = v132;
          size_t v91 = v133;
          if (!v130)
          {
            int v84 = v136;
            v78 += v136;
            v79 += v136;
            v80 += v136;
LABEL_80:
            uint64x2_t v85 = v41;
            unsigned int v86 = v73;
            unsigned int v87 = v84 + 1;
            do
            {
              ++v80;
              ++v79;
              __powidf2();
              *(float *)&double v88 = v88;
              *v78++ = (int)fabsf(*(float *)&v88);
              BOOL v61 = WidthOfPlane > v87++;
            }
            while (v61);
            size_t v74 = WidthOfPlane;
            unint64_t v43 = v148;
            size_t v30 = v149;
            unsigned int v73 = v86;
            float64x2_t v41 = v85;
            size_t v20 = v146;
            goto LABEL_71;
          }
        }
        else
        {
          unint64_t v92 = 0;
        }
        v80 += v135;
        v79 += v135;
        v78 += v135;
        int8x8_t v113 = (__int32 *)((char *)v41->i32 + v92 + v89);
        float64x2_t v114 = &v30[v92 + v90];
        uint64x2_t v115 = (char *)v147 + v92 + v91;
        unint64_t v116 = v134 + v92;
        do
        {
          v115 += 4;
          v114 += 4;
          __powidf2();
          float64_t v172 = v117;
          __powidf2();
          v118.f64[1] = v172;
          float64x2_t v173 = v118;
          __powidf2();
          float64_t v168 = v119;
          __powidf2();
          v120.f64[1] = v168;
          int16x8_t v121 = (int16x8_t)vcvtq_s32_f32(vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v120), v173)));
          *(int16x4_t *)v121.i8 = vmovn_s32((int32x4_t)v121);
          *v113++ = vmovn_s16(v121).u32[0];
          v116 += 4;
        }
        while (v116);
        int v84 = v135;
        size_t v74 = WidthOfPlane;
        unint64_t v43 = v148;
        size_t v30 = v149;
        size_t v20 = v146;
        size_t HeightOfPlane = v151;
        size_t v31 = v144;
        unsigned int v73 = v137;
        if (v148 == v135) {
          goto LABEL_71;
        }
        goto LABEL_80;
      }
    }
  }
  return 0;
}

void sub_2590D2534(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 209) < 0) {
    operator delete(*(void **)(v1 - 232));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *calcDiffsRaw<float>(uint64_t *result, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  unint64_t v78 = result[1];
  if (!v78) {
    return result;
  }
  unint64_t v8 = result[2] * a8;
  if (!v8) {
    return result;
  }
  uint64_t v9 = a5;
  size_t v10 = a4;
  uint64_t v11 = a3;
  uint64_t v12 = a2;
  uint64_t v13 = *result;
  uint64_t v14 = result[3];
  uint64_t v69 = v14;
  if (a6)
  {
    uint64_t v15 = 0;
    if (v8) {
      BOOL v16 = (v8 - 1) >> 32 == 0;
    }
    else {
      BOOL v16 = 0;
    }
    char v17 = !v16;
    char v66 = v17;
    unint64_t v63 = 4 * (v8 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v18 = *result;
    uint64_t v19 = a2;
    size_t v20 = a4;
    while (1)
    {
      size_t v21 = (float *)((char *)v10->f32 + v15 * v9);
      uint64_t v22 = v13 + v14 * v15;
      uint64_t v23 = v12 + v15 * v11;
      uint64_t v74 = v18;
      uint64_t v76 = v15;
      int16x8_t v71 = v20;
      uint64_t v72 = v19;
      if (v8 >= 8
        && (v66 & 1) == 0
        && ((unint64_t)v21 - v22 >= 0x10 ? (BOOL v24 = (unint64_t)v21 - v23 >= 0x10) : (BOOL v24 = 0), v24))
      {
        v23 += v63;
        uint64_t v29 = v19;
        size_t v30 = v20;
        unint64_t v31 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v18 += 16;
          v29 += 16;
          __powidf2();
          float64_t v82 = v32;
          __powidf2();
          v33.f64[1] = v82;
          float64x2_t v83 = v33;
          __powidf2();
          float64_t v80 = v34;
          uint64_t result = (uint64_t *)__powidf2();
          v35.f64[1] = v80;
          *v30++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v35), v83));
          v31 -= 4;
        }
        while (v31);
        uint64_t v9 = a5;
        size_t v10 = a4;
        uint64_t v11 = a3;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_20;
        }
        v22 += v63;
        size_t v21 = (float *)((char *)v21 + v63);
        int v25 = v8 & 0xFFFFFFFC;
      }
      else
      {
        int v25 = 0;
      }
      unsigned int v26 = v25 + 1;
      do
      {
        v22 += 4;
        v23 += 4;
        uint64_t result = (uint64_t *)__powidf2();
        *(float *)&double v27 = v27;
        *v21++ = fabsf(*(float *)&v27);
        BOOL v28 = v8 > v26++;
      }
      while (v28);
LABEL_20:
      uint64_t v15 = v76 + 1;
      size_t v20 = (float32x4_t *)((char *)v71 + v9);
      uint64_t v19 = v72 + v11;
      uint64_t v14 = v69;
      uint64_t v12 = a2;
      uint64_t v18 = v74 + v69;
      if (v78 <= (v76 + 1)) {
        return result;
      }
    }
  }
  if (v8 <= 7)
  {
    uint64_t v36 = 0;
    do
    {
      uint64_t v37 = 0;
      do
      {
        uint64_t result = (uint64_t *)__powidf2();
        *(float *)&double v38 = v38;
        v10->f32[v37++] = fabsf(*(float *)&v38);
      }
      while (v8 > v37);
      ++v36;
      v13 += v14;
      v12 += a3;
      size_t v10 = (float32x4_t *)((char *)v10 + v9);
    }
    while (v78 > v36);
    return result;
  }
  if (v8) {
    BOOL v39 = (v8 - 1) >> 32 == 0;
  }
  else {
    BOOL v39 = 0;
  }
  if (v39)
  {
    uint64_t v43 = 0;
    unint64_t v67 = 4 * (v8 & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v44 = *result;
    uint64_t v45 = a2;
    uint64_t v46 = a4;
    while (1)
    {
      unsigned int v47 = (float *)((char *)v10->f32 + v43 * v9);
      uint64_t v48 = v12;
      uint64_t v49 = v13 + v14 * v43;
      uint64_t v50 = v48 + v43 * v11;
      BOOL v51 = (unint64_t)v47 - v49 >= 0x10 && (unint64_t)v47 - v50 >= 0x10;
      uint64_t v79 = v43;
      uint64_t v75 = v45;
      uint64_t v77 = v44;
      unsigned int v73 = v46;
      if (v51)
      {
        v50 += v67;
        uint64_t v53 = v44;
        uint64_t v54 = v45;
        int32x4_t v55 = v46;
        unint64_t v56 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          v53 += 16;
          v54 += 16;
          __powidf2();
          float64_t v84 = v57;
          __powidf2();
          v58.f64[1] = v84;
          float64x2_t v85 = v58;
          __powidf2();
          float64_t v81 = v59;
          uint64_t result = (uint64_t *)__powidf2();
          v60.f64[1] = v81;
          *v55++ = vabsq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v60), v85));
          v56 -= 4;
        }
        while (v56);
        uint64_t v9 = a5;
        uint64_t v11 = a3;
        uint64_t v14 = v69;
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFFCLL)) {
          goto LABEL_42;
        }
        v49 += v67;
        unsigned int v47 = (float *)((char *)v47 + v67);
        int v52 = v8 & 0xFFFFFFFC;
      }
      else
      {
        int v52 = 0;
      }
      unsigned int v61 = v52 + 1;
      do
      {
        v49 += 4;
        v50 += 4;
        uint64_t result = (uint64_t *)__powidf2();
        *(float *)&double v62 = v62;
        *v47++ = fabsf(*(float *)&v62);
        BOOL v28 = v8 > v61++;
      }
      while (v28);
LABEL_42:
      uint64_t v43 = v79 + 1;
      uint64_t v46 = (float32x4_t *)((char *)v73 + v9);
      uint64_t v45 = v75 + v11;
      uint64_t v44 = v77 + v14;
      size_t v10 = a4;
      uint64_t v12 = a2;
      if (v78 <= (v79 + 1)) {
        return result;
      }
    }
  }
  uint64_t v40 = 0;
  do
  {
    uint64_t v41 = 0;
    do
    {
      uint64_t result = (uint64_t *)__powidf2();
      *(float *)&double v42 = v42;
      v10->f32[v41++] = fabsf(*(float *)&v42);
    }
    while (v8 > v41);
    ++v40;
    v13 += v14;
    v12 += a3;
    size_t v10 = (float32x4_t *)((char *)v10 + v9);
  }
  while (v78 > v40);
  return result;
}

uint64_t *calcDiffsRaw<half>(uint64_t *result, int8x16_t *a2, uint64_t a3, float16x8_t *a4, uint64_t a5, char a6)
{
  unint64_t v137 = result[1];
  if (!v137) {
    return result;
  }
  unint64_t v6 = 2 * result[2];
  if (!v6) {
    return result;
  }
  uint64_t v7 = a5;
  unint64_t v8 = a4;
  uint64_t v9 = a3;
  size_t v10 = a2;
  uint64_t v11 = *result;
  uint64_t v12 = result[3];
  uint64_t v128 = v12;
  if (a6)
  {
    uint64_t v13 = 0;
    if (v6) {
      _ZF = (v6 - 1) >> 32 == 0;
    }
    else {
      _ZF = 0;
    }
    char v15 = !_ZF;
    char v125 = v15;
    unint64_t v122 = 2 * (v6 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = *result;
    char v17 = a2;
    uint64_t v18 = a4;
    while (1)
    {
      uint64_t v19 = (short float *)((char *)v8->i16 + v13 * v7);
      size_t v20 = (char *)(v11 + v12 * v13);
      size_t v21 = &v10->i8[v13 * v9];
      uint64_t v133 = v16;
      uint64_t v135 = v13;
      unint64_t v130 = v18;
      size_t v131 = v17;
      if (v6 >= 8
        && (v125 & 1) == 0
        && ((unint64_t)((char *)v19 - v20) >= 0x10
          ? (_CF = (unint64_t)((char *)v19 - v21) >= 0x10)
          : (_CF = 0),
            _CF))
      {
        v21 += v122;
        uint64_t v36 = v17;
        uint64_t v37 = v18;
        unint64_t v38 = v6 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v16 += 16;
          int8x16_t v39 = *v36++;
          _Q2 = v39;
          _D3 = vextq_s8(_Q2, _Q2, 8uLL).u64[0];
          _H4 = v39.i16[1];
          __asm
          {
            FCVT            D4, H4
            FCVT            D5, H2
          }
          LOWORD(_D4) = v39.i16[3];
          __asm { FCVT            D4, H4 }
          _H6 = v39.i16[2];
          __asm { FCVT            D6, H6 }
          _H7 = WORD1(_D3);
          __asm
          {
            FCVT            D7, H7
            FCVT            D16, H3
          }
          LOWORD(_D7) = HIWORD(_D3);
          __asm { FCVT            D7, H7 }
          LOWORD(_D3) = WORD2(_D3);
          __asm { FCVT            D3, H3 }
          __powidf2();
          _D8 = v53;
          __powidf2();
          _D9 = v55;
          __powidf2();
          _D10 = v57;
          __powidf2();
          _D11 = v59;
          __powidf2();
          _D12 = v61;
          __powidf2();
          _D13 = v63;
          __powidf2();
          _D14 = v65;
          uint64_t result = (uint64_t *)__powidf2();
          __asm
          {
            FCVT            H1, D14
            FCVT            H0, D0
          }
          _Q1.i16[1] = _D0;
          __asm { FCVT            H0, D13 }
          _Q1.i16[2] = _D0;
          __asm { FCVT            H0, D12 }
          _Q1.i16[3] = _D0;
          __asm { FCVT            H0, D11 }
          _Q1.i16[4] = _D0;
          __asm { FCVT            H0, D10 }
          _Q1.i16[5] = _D0;
          __asm { FCVT            H0, D9 }
          _Q1.i16[6] = _D0;
          __asm { FCVT            H0, D8 }
          _Q1.i16[7] = _D0;
          *v37++ = vabsq_f16(_Q1);
          v38 -= 8;
        }
        while (v38);
        uint64_t v7 = a5;
        unint64_t v8 = a4;
        uint64_t v9 = a3;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_20;
        }
        v20 += v122;
        uint64_t v19 = (short float *)((char *)v19 + v122);
        int v23 = v6 & 0xFFFFFFF8;
      }
      else
      {
        int v23 = 0;
      }
      unsigned int v24 = v23 + 1;
      do
      {
        __int16 v25 = *(_WORD *)v20;
        v20 += 2;
        _H0 = v25;
        __asm { FCVT            S0, H0 }
        __int16 v30 = *(_WORD *)v21;
        v21 += 2;
        _H1 = v30;
        __asm
        {
          FCVT            S2, H1
          FCVT            D1, H1
        }
        uint64_t result = (uint64_t *)__powidf2();
        __asm { FCVT            H0, D0 }
        *v19++ = fabsl(*(short float *)&_D0);
        BOOL v35 = v6 > v24++;
      }
      while (v35);
LABEL_20:
      uint64_t v13 = v135 + 1;
      uint64_t v18 = (float16x8_t *)((char *)v130 + v7);
      char v17 = (int8x16_t *)((char *)v131 + v9);
      uint64_t v12 = v128;
      size_t v10 = a2;
      uint64_t v16 = v133 + v128;
      if (v137 <= (v135 + 1)) {
        return result;
      }
    }
  }
  if (v6 <= 7)
  {
    uint64_t v69 = 0;
    do
    {
      uint64_t v70 = 0;
      do
      {
        _H0 = *(_WORD *)(v11 + 2 * v70);
        __asm { FCVT            S0, H0 }
        _H1 = v10->i16[v70];
        __asm { FCVT            S1, H1 }
        uint64_t result = (uint64_t *)__powidf2();
        __asm { FCVT            H0, D0 }
        *(short float *)&v8->i16[v70++] = fabsl(*(short float *)&_D0);
      }
      while (v6 > v70);
      ++v69;
      v11 += v12;
      size_t v10 = (int8x16_t *)((char *)v10 + a3);
      unint64_t v8 = (float16x8_t *)((char *)v8 + v7);
    }
    while (v137 > v69);
    return result;
  }
  if (v6) {
    BOOL v76 = (v6 - 1) >> 32 == 0;
  }
  else {
    BOOL v76 = 0;
  }
  if (v76)
  {
    uint64_t v84 = 0;
    unint64_t v126 = 2 * (v6 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v85 = *result;
    unsigned int v86 = a2;
    unsigned int v87 = a4;
    while (1)
    {
      double v88 = (short float *)((char *)v8->i16 + v84 * v7);
      size_t v89 = v10;
      size_t v90 = (char *)(v11 + v12 * v84);
      size_t v91 = &v89->i8[v84 * v9];
      BOOL v92 = (unint64_t)((char *)v88 - v90) >= 0x10 && (unint64_t)((char *)v88 - v91) >= 0x10;
      uint64_t v138 = v84;
      uint64_t v134 = v86;
      uint64_t v136 = v85;
      size_t v132 = v87;
      if (v92)
      {
        v91 += v126;
        uint64_t v94 = v85;
        float64x2_t v95 = v86;
        unint64_t v96 = v87;
        unint64_t v97 = v6 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v94 += 16;
          ++v95;
          __powidf2();
          _D8 = v98;
          __powidf2();
          _D9 = v100;
          __powidf2();
          _D10 = v102;
          __powidf2();
          _D11 = v104;
          __powidf2();
          _D12 = v106;
          __powidf2();
          _D13 = v108;
          __powidf2();
          _D14 = v110;
          uint64_t result = (uint64_t *)__powidf2();
          __asm
          {
            FCVT            H1, D14
            FCVT            H0, D0
          }
          _Q1.i16[1] = _D0;
          __asm { FCVT            H0, D13 }
          _Q1.i16[2] = _D0;
          __asm { FCVT            H0, D12 }
          _Q1.i16[3] = _D0;
          __asm { FCVT            H0, D11 }
          _Q1.i16[4] = _D0;
          __asm { FCVT            H0, D10 }
          _Q1.i16[5] = _D0;
          __asm { FCVT            H0, D9 }
          _Q1.i16[6] = _D0;
          __asm { FCVT            H0, D8 }
          _Q1.i16[7] = _D0;
          *v96++ = vabsq_f16(_Q1);
          v97 -= 8;
        }
        while (v97);
        uint64_t v7 = a5;
        uint64_t v9 = a3;
        uint64_t v12 = v128;
        if (v6 == (v6 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_42;
        }
        v90 += v126;
        double v88 = (short float *)((char *)v88 + v126);
        int v93 = v6 & 0xFFFFFFF8;
      }
      else
      {
        int v93 = 0;
      }
      unsigned int v114 = v93 + 1;
      do
      {
        __int16 v115 = *(_WORD *)v90;
        v90 += 2;
        _H0 = v115;
        __asm { FCVT            S0, H0 }
        __int16 v118 = *(_WORD *)v91;
        v91 += 2;
        _H1 = v118;
        __asm { FCVT            S1, H1 }
        uint64_t result = (uint64_t *)__powidf2();
        __asm { FCVT            H0, D0 }
        *v88++ = fabsl(*(short float *)&_D0);
        BOOL v35 = v6 > v114++;
      }
      while (v35);
LABEL_42:
      uint64_t v84 = v138 + 1;
      unsigned int v87 = (float16x8_t *)((char *)v132 + v7);
      unsigned int v86 = (int8x16_t *)((char *)v134 + v9);
      uint64_t v85 = v136 + v12;
      unint64_t v8 = a4;
      size_t v10 = a2;
      if (v137 <= (v138 + 1)) {
        return result;
      }
    }
  }
  uint64_t v77 = 0;
  do
  {
    uint64_t v78 = 0;
    do
    {
      _H0 = *(_WORD *)(v11 + 2 * v78);
      __asm { FCVT            S0, H0 }
      _H1 = v10->i16[v78];
      __asm { FCVT            S1, H1 }
      uint64_t result = (uint64_t *)__powidf2();
      __asm { FCVT            H0, D0 }
      *(short float *)&v8->i16[v78++] = fabsl(*(short float *)&_D0);
    }
    while (v6 > v78);
    ++v77;
    v11 += v12;
    size_t v10 = (int8x16_t *)((char *)v10 + a3);
    unint64_t v8 = (float16x8_t *)((char *)v8 + v7);
  }
  while (v137 > v77);
  return result;
}

uint64_t calcDiffsRaw<unsigned char>(uint64_t result, uint64_t a2, void *a3, char a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(result + 8);
  if (v6)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result + 16);
    LODWORD(v11) = 0;
    if (a4)
    {
      do
      {
        int v16 = v11;
        if (v10 * a6)
        {
          uint64_t v17 = 0;
          uint64_t v18 = *a3 + a3[3] * v11;
          do
          {
            uint64_t result = __powidf2();
            *(float *)&double v19 = v19;
            *(unsigned char *)(v18 + v17++) = (int)fabsf(*(float *)&v19);
            uint64_t v10 = *(void *)(v9 + 16);
          }
          while (v10 * a6 > (unint64_t)v17);
          unint64_t v6 = *(void *)(v9 + 8);
        }
        unint64_t v11 = (v16 + 1);
      }
      while (v6 > v11);
    }
    else
    {
      do
      {
        int v12 = v11;
        if (v10 * a6)
        {
          uint64_t v13 = 0;
          uint64_t v14 = *a3 + a3[3] * v11;
          do
          {
            uint64_t result = __powidf2();
            *(float *)&double v15 = v15;
            *(unsigned char *)(v14 + v13++) = (int)fabsf(*(float *)&v15);
            uint64_t v10 = *(void *)(v9 + 16);
          }
          while (v10 * a6 > (unint64_t)v13);
          unint64_t v6 = *(void *)(v9 + 8);
        }
        unint64_t v11 = (v12 + 1);
      }
      while (v6 > v11);
    }
  }
  return result;
}

uint64_t PixelBufferUtils::scaleConvertRotatePixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, CVPixelBufferRef pixelBuffer, CGRect a4, CVPixelBufferRef *a5, __CVBuffer **a6, __CVBuffer **a7)
{
  uint64_t v61 = pixelBuffer;
  double v62 = this;
  if (!this) {
    return 0xFFFFFFFFLL;
  }
  double height = a4.size.height;
  double width = a4.size.width;
  double y = a4.origin.y;
  double x = a4.origin.x;
  unsigned int v12 = a2;
  unsigned int v57 = a7;
  CVPixelBufferRef v59 = 0;
  CVPixelBufferRef texture = 0;
  if (a5) {
    p_CVPixelBufferRef texture = a5;
  }
  else {
    p_CVPixelBufferRef texture = &texture;
  }
  if (a6) {
    int v16 = a6;
  }
  else {
    int v16 = &v59;
  }
  size_t v17 = CVPixelBufferGetWidth(pixelBuffer);
  size_t v18 = CVPixelBufferGetHeight(pixelBuffer);
  signed int v19 = CVPixelBufferGetPixelFormatType(pixelBuffer);
  OSType v20 = CVPixelBufferGetPixelFormatType(this);
  unsigned int v58 = v12;
  double v21 = trunc((double)v17);
  if ((v12 & 0xFFFFFFFD) == 1) {
    double v22 = v21;
  }
  else {
    double v22 = (double)v18;
  }
  if ((v12 & 0xFFFFFFFD) == 1) {
    double v23 = (double)v18;
  }
  else {
    double v23 = (double)v17;
  }
  size_t v24 = CVPixelBufferGetWidth(this);
  size_t v25 = CVPixelBufferGetHeight(this);
  signed int v26 = CVPixelBufferGetPixelFormatType(this);
  v64.origin.double x = x;
  v64.origin.double y = y;
  v64.size.double width = width;
  v64.size.double height = height;
  CGRect v69 = CGRectIntegral(v64);
  v65.origin.double x = x;
  v65.origin.double y = y;
  v65.size.double width = width;
  v65.size.double height = height;
  if (!CGRectEqualToRect(v65, v69))
  {
    NSLog(&cfstr_SDErrorCropDim.isa, "scaleConvertRotatePixelBuffer", 2346);
    return 0xFFFFFFFFLL;
  }
  v66.origin.double x = x;
  v66.origin.double y = y;
  v66.size.double width = width;
  v66.size.double height = height;
  if (CGRectIsEmpty(v66))
  {
    double x = 0.0;
    double y = 0.0;
    double width = (double)v24;
    double height = (double)v25;
  }
  v70.origin.double x = 0.0;
  v70.origin.double y = 0.0;
  v67.origin.double x = x;
  v67.origin.double y = y;
  v67.size.double width = width;
  v67.size.double height = height;
  v70.size.double width = (double)v24;
  v70.size.double height = (double)v25;
  BOOL v27 = !CGRectEqualToRect(v67, v70);
  if (v23 != (double)v24) {
    BOOL v27 = 1;
  }
  if (v22 != (double)v25) {
    BOOL v27 = 1;
  }
  if (v20 == v19 && !v58 && !v27) {
    return PixelBufferUtils::copyPixelBuffer(pixelBuffer, this, (__CVBuffer *)v57);
  }
  OSType pixelFormatType = v19;
  int v29 = !v27;
  __int16 v30 = (__CVBuffer *)v57;
  unint64_t v31 = v16;
  double v32 = a6;
  if ((v27 & v57) != 1) {
    goto LABEL_41;
  }
  if (v26 <= 1751410031)
  {
    if (v26 > 1717855599)
    {
      if (v26 == 1717855600) {
        goto LABEL_41;
      }
      int v33 = 1717856627;
    }
    else
    {
      if (v26 == 825306677) {
        goto LABEL_41;
      }
      int v33 = 825437747;
    }
  }
  else if (v26 <= 1919365989)
  {
    if (v26 == 1751410032) {
      goto LABEL_41;
    }
    int v33 = 1751411059;
  }
  else
  {
    if (v26 == 1919365990 || v26 == 1919365992) {
      goto LABEL_41;
    }
    int v33 = 1932996149;
  }
  if (v26 == v33) {
    goto LABEL_41;
  }
  BOOL v36 = 0;
  if (v19 <= 1751410031)
  {
    if (v19 > 1717855599)
    {
      if (v19 == 1717855600) {
        goto LABEL_41;
      }
      int v54 = 1717856627;
    }
    else
    {
      if (v19 == 825306677) {
        goto LABEL_41;
      }
      int v54 = 825437747;
    }
LABEL_104:
    double v34 = p_texture;
    BOOL v35 = p_texture;
    if (v19 != v54) {
      goto LABEL_48;
    }
    goto LABEL_41;
  }
  if (v19 <= 1919365989)
  {
    if (v19 == 1751410032) {
      goto LABEL_41;
    }
    int v54 = 1751411059;
    goto LABEL_104;
  }
  if (v19 != 1919365990 && v19 != 1932996149)
  {
    int v54 = 1919365992;
    goto LABEL_104;
  }
LABEL_41:
  if (v27) {
    double v34 = p_texture;
  }
  else {
    double v34 = &v62;
  }
  if (v20 == v19) {
    BOOL v35 = v34;
  }
  else {
    BOOL v35 = v31;
  }
  BOOL v36 = v20 != v19;
LABEL_48:
  if (v58) {
    uint64_t v37 = v31;
  }
  else {
    uint64_t v37 = &v61;
  }
  if (!v58) {
    int v29 = 1;
  }
  if ((v29 & !v36) != 0) {
    unint64_t v38 = v37;
  }
  else {
    unint64_t v38 = p_texture;
  }
  if (v27)
  {
    int8x16_t v39 = *v38;
    if (!*v38)
    {
      if (v36) {
        OSType v40 = v20;
      }
      else {
        OSType v40 = pixelFormatType;
      }
      CVPixelBufferRef pixelBufferOut = 0;
      CFAllocatorRef v41 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      OSType v43 = v40;
      __int16 v30 = (__CVBuffer *)v57;
      if (CVPixelBufferCreate(v41, (unint64_t)v23, (unint64_t)v22, v43, BufferAttributes, &pixelBufferOut))
      {
        int8x16_t v39 = 0;
      }
      else
      {
        int8x16_t v39 = pixelBufferOut;
      }
      *unint64_t v38 = v39;
    }
    v68.origin.double x = x;
    v68.origin.double y = y;
    v68.size.double width = width;
    v68.size.double height = height;
    uint64_t v28 = PixelBufferUtils::cropAndScalePixelBuffer(this, v39, v30, v68);
  }
  else
  {
    uint64_t v28 = 0;
  }
  if (v28 == 0 && v36)
  {
    uint64_t v44 = *v34;
    if (!*v37)
    {
      unsigned int v47 = v30;
      size_t v48 = CVPixelBufferGetWidth(*v34);
      size_t v49 = CVPixelBufferGetHeight(v44);
      CVPixelBufferRef pixelBufferOut = 0;
      CFAllocatorRef v50 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef v51 = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v50, v48, v49, pixelFormatType, v51, &pixelBufferOut)) {
        int v52 = 0;
      }
      else {
        int v52 = pixelBufferOut;
      }
      if (PixelBufferUtils::convertPixelBufferFormat(v44, v52, v47))
      {
        CVPixelBufferRelease(v52);
        int v52 = 0;
      }
      *uint64_t v37 = v52;
      if (v52) {
        uint64_t v28 = 0;
      }
      else {
        uint64_t v28 = 0xFFFFFFFFLL;
      }
      LODWORD(v30) = v57;
      uint64_t v45 = (__CVBuffer *)v58;
      if (!v58) {
        goto LABEL_87;
      }
      goto LABEL_71;
    }
    uint64_t v28 = PixelBufferUtils::convertPixelBufferFormat(*v34, *v37, v30);
  }
  uint64_t v45 = (__CVBuffer *)v58;
  if (v58)
  {
LABEL_71:
    if (!v28)
    {
      uint64_t v46 = *v35;
      if (v61)
      {
        uint64_t v28 = PixelBufferUtils::rotatePixelBuffer(v46, v61, v45, (int)v30);
      }
      else if (PixelBufferUtils::createRotatedPixelBuffer(v46, v45, (int)v30))
      {
        uint64_t v28 = 0;
      }
      else
      {
        uint64_t v28 = 0xFFFFFFFFLL;
      }
    }
  }
LABEL_87:
  if (!a5) {
    CVPixelBufferRelease(texture);
  }
  if (!v32) {
    CVPixelBufferRelease(v59);
  }
  return v28;
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromCGImage(PixelBufferUtils *this, CGImage *a2)
{
  OSType v2 = a2;
  v26[3] = *MEMORY[0x263EF8340];
  ColorSpace = CGImageGetColorSpace(this);
  size_t BitsPerComponent = CGImageGetBitsPerComponent(this);
  uint32_t BitmapInfo = CGImageGetBitmapInfo(this);
  CFStringRef Name = CGColorSpaceGetName(ColorSpace);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CFStringRef v9 = CGColorSpaceGetName(DeviceRGB);
  if (!Name)
  {
    CFStringRef Name = v9;
    ColorSpace = DeviceRGB;
  }
  if (CFEqual(Name, v9))
  {
    uint32_t BitmapInfo = 6;
    int v10 = 32;
    ColorSpace = DeviceRGB;
  }
  else
  {
    unint64_t v11 = (const void *)*MEMORY[0x263F002D8];
    if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F002D8])) {
      BOOL v12 = BitsPerComponent == 8;
    }
    else {
      BOOL v12 = 0;
    }
    if (v12 || CFEqual(Name, (CFTypeRef)*MEMORY[0x263F001E8]))
    {
      uint32_t BitmapInfo = 6;
    }
    else
    {
      if (CFEqual(Name, v11) && BitsPerComponent == 32)
      {
        uint32_t BitmapInfo = 257;
        int v10 = 1380410945;
        goto LABEL_12;
      }
      if (!CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00268]))
      {
        if (CFEqual(Name, (CFTypeRef)*MEMORY[0x263F00250]))
        {
          if (BitsPerComponent == 16) {
            int v10 = 1647392359;
          }
          else {
            int v10 = 1278226534;
          }
          if (BitsPerComponent == 16 || BitsPerComponent == 32) {
            goto LABEL_12;
          }
          NSLog(&cfstr_SDErrorThisCon.isa, "pixelBufferFromCGImage", 2521);
        }
        else
        {
          NSLog(&cfstr_SDErrorThisCon.isa, "pixelBufferFromCGImage", 2527);
        }
        return 0;
      }
      uint32_t BitmapInfo = 2;
    }
    int v10 = 32;
  }
LABEL_12:
  if (v2 == 1061109567) {
    OSType v13 = v10;
  }
  else {
    OSType v13 = v2;
  }
  unint64_t Width = CGImageGetWidth(this);
  unint64_t Height = CGImageGetHeight(this);
  uint64_t v16 = *MEMORY[0x263F04090];
  v25[0] = *MEMORY[0x263F040A0];
  v25[1] = v16;
  v26[0] = MEMORY[0x263EFFA88];
  v26[1] = MEMORY[0x263EFFA88];
  v25[2] = *MEMORY[0x263F04130];
  v26[2] = MEMORY[0x263EFFA78];
  CFDictionaryRef v17 = [NSDictionary dictionaryWithObjects:v26 forKeys:v25 count:3];
  CVPixelBufferRef pixelBufferOut = 0;
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], Width, Height, v13, v17, &pixelBufferOut))
  {
    NSLog(&cfstr_SDErrorCouldNo.isa, "pixelBufferFromCGImage", 2551);
    CGColorSpaceRelease(DeviceRGB);
    CVPixelBufferRef v18 = 0;
  }
  else
  {
    CVPixelBufferLockBaseAddress(pixelBufferOut, 0);
    BaseAddress = CVPixelBufferGetBaseAddress(pixelBufferOut);
    size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBufferOut);
    double v21 = CGBitmapContextCreate(BaseAddress, Width, Height, BitsPerComponent, BytesPerRow, ColorSpace, BitmapInfo);
    double v22 = v21;
    if (v21)
    {
      v27.size.double width = (double)Width;
      v27.size.double height = (double)Height;
      v27.origin.double x = 0.0;
      v27.origin.double y = 0.0;
      CGContextDrawImage(v21, v27, this);
      CGContextRelease(v22);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
    }
    else
    {
      NSLog(&cfstr_SDErrorCouldNo_0.isa, "pixelBufferFromCGImage", 2573);
      CVPixelBufferUnlockBaseAddress(pixelBufferOut, 0);
      CVPixelBufferRelease(pixelBufferOut);
      CVPixelBufferRef pixelBufferOut = 0;
    }
    CGColorSpaceRelease(DeviceRGB);
    CVPixelBufferRef v18 = pixelBufferOut;
  }

  return v18;
}

void sub_2590D3B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToImageFile(PixelBufferUtils *this, PixelBufferUtils *a2, const __CFString *a3, const __CFString *a4)
{
  unint64_t v6 = PixelBufferUtils::pixelBufferToCGImage(a2, a2);
  uint64_t v7 = NSURL;
  unint64_t v8 = [NSString stringWithUTF8String:this];
  CFURLRef url = [v7 fileURLWithPath:v8];
  if (!a3) {
    a3 = @"public.png";
  }

  CFStringRef v9 = CGImageDestinationCreateWithURL(url, a3, 1uLL, 0);
  CGImageDestinationAddImage(v9, v6, 0);
  CGImageDestinationFinalize(v9);
  CFRelease(v9);
  CGImageRelease(v6);
}

void sub_2590D3C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

CGImageRef PixelBufferUtils::pixelBufferToCGImage(PixelBufferUtils *this, __CVBuffer *a2)
{
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t v5 = CVPixelBufferGetWidth(this);
  size_t v6 = CVPixelBufferGetHeight(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v7 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v7, v5, v6, 0x20u, BufferAttributes, &pixelBufferOut)) {
    CFStringRef v9 = 0;
  }
  else {
    CFStringRef v9 = pixelBufferOut;
  }
  if (PixelBufferUtils::convertPixelBufferFormat(this, v9, 0))
  {
    CVPixelBufferRelease(v9);
    CFStringRef v9 = 0;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(v9, 1uLL);
  BaseAddress = CVPixelBufferGetBaseAddress(v9);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v9);
  OSType v13 = CGBitmapContextCreate(BaseAddress, Width, Height, 8uLL, BytesPerRow, DeviceRGB, 6u);
  CFRelease(DeviceRGB);
  CGImageRef Image = CGBitmapContextCreateImage(v13);
  CVPixelBufferUnlockBaseAddress(v9, 1uLL);
  CGContextRelease(v13);
  CVPixelBufferRelease(v9);
  return Image;
}

uint64_t PixelBufferUtils::pixelBufferFromRawFileWithBuffer(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  OSType PixelFormatType = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  unint64_t v56 = [NSString stringWithUTF8String:this];
  size_t v6 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithContentsOfFile:");
  if (!v6)
  {
    NSLog(&cfstr_SDErrorFailedR.isa, "pixelBufferFromRawFileWithBuffer", 2690);
LABEL_16:
    uint64_t v30 = 0xFFFFFFFFLL;
    goto LABEL_35;
  }
  unint64_t v7 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, 0);
  uint64_t v8 = PixelBufferUtils::planeCountForPixelFormat(PixelFormatType);
  size_t Width = CVPixelBufferGetWidth(pixelBuffer);
  size_t Height = CVPixelBufferGetHeight(pixelBuffer);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(pixelBuffer);
  if (v8)
  {
    id v55 = v6;
    size_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      unint64_t v15 = PixelBufferUtils::pixelSizeForPixelFormat(PixelFormatType, v12);
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(pixelBuffer, v12);
      v14 += WidthOfPlane * v15 * CVPixelBufferGetHeightOfPlane(pixelBuffer, v12);
      v13 += CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, v12++);
    }
    while (v8 != v12);
    uint64_t v17 = [v55 length];
    if (v17 == v14 || [v55 length] == v13)
    {
      uint64_t v18 = [v55 bytes];
      OSType v57 = CVPixelBufferGetPixelFormatType(pixelBuffer);
      size_t PlaneCount = CVPixelBufferGetPlaneCount(pixelBuffer);
      CVPixelBufferLockBaseAddress(pixelBuffer, 0);
      if (PlaneCount)
      {
        if (v17 == v14)
        {
          for (size_t i = 0; i != PlaneCount; ++i)
          {
            BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, i);
            unint64_t v22 = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)v57, i);
            size_t v23 = CVPixelBufferGetWidthOfPlane(pixelBuffer, i);
            size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(pixelBuffer, i);
            size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, i);
            size_t v26 = v23 * v22;
            if (HeightOfPlane)
            {
              size_t v27 = BytesPerRowOfPlane;
              uint64_t v28 = (char *)v18;
              size_t v29 = HeightOfPlane;
              do
              {
                memcpy(BaseAddressOfPlane, v28, v26);
                BaseAddressOfPlane += v27;
                v28 += v26;
                --v29;
              }
              while (v29);
            }
            v18 += v26 * HeightOfPlane;
          }
        }
        else
        {
          for (size_t j = 0; j != PlaneCount; ++j)
          {
            uint64_t v45 = (char *)CVPixelBufferGetBaseAddressOfPlane(pixelBuffer, j);
            unint64_t v46 = PixelBufferUtils::pixelSizeForPixelFormat((PixelBufferUtils *)v57, j);
            size_t v47 = CVPixelBufferGetWidthOfPlane(pixelBuffer, j);
            size_t v48 = CVPixelBufferGetHeightOfPlane(pixelBuffer, j);
            size_t v49 = CVPixelBufferGetBytesPerRowOfPlane(pixelBuffer, j);
            size_t v50 = v47 * v46;
            if (v48)
            {
              size_t v51 = v49;
              uint64_t v52 = 0;
              size_t v53 = v48;
              do
              {
                memcpy(&v45[v52], (const void *)(v18 + v52), v50);
                v52 += v51;
                --v53;
              }
              while (v53);
            }
            v18 += v50 * v48;
          }
        }
      }
      CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
      uint64_t v30 = 0;
    }
    else
    {
      NSLog(&cfstr_SDErrorDataSiz.isa, "pixelBufferFromRawFileWithBuffer", 2734);
      uint64_t v30 = 0xFFFFFFFFLL;
    }
    size_t v6 = v55;
    goto LABEL_35;
  }
  size_t v31 = BytesPerRow;
  uint64_t v32 = [v6 length];
  size_t v33 = Width * v7 * Height;
  if (v32 != v33 && [v6 length] != v31 * Height)
  {
    NSLog(&cfstr_SDErrorDataSiz.isa, "pixelBufferFromRawFileWithBuffer", 2710);
    goto LABEL_16;
  }
  double v34 = (char *)[v6 bytes];
  BOOL v35 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(pixelBuffer);
  size_t v36 = CVPixelBufferGetWidth(pixelBuffer);
  size_t v37 = CVPixelBufferGetHeight(pixelBuffer);
  size_t v38 = CVPixelBufferGetBytesPerRow(pixelBuffer);
  unint64_t v39 = PixelBufferUtils::pixelSizeForPixelFormat(v35, 0);
  size_t v40 = v39 * v36;
  if (v32 == v33) {
    size_t v41 = v39 * v36;
  }
  else {
    size_t v41 = v38;
  }
  CVPixelBufferLockBaseAddress(pixelBuffer, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(pixelBuffer);
  if (v37)
  {
    OSType v43 = BaseAddress;
    do
    {
      memcpy(v43, v34, v40);
      v43 += v38;
      v34 += v41;
      --v37;
    }
    while (v37);
  }
  CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
  uint64_t v30 = 0;
LABEL_35:

  return v30;
}

void sub_2590D41F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, const char *a2)
{
  return PixelBufferUtils::pixelBufferFromRawFile(this, 0, 0, 0x3F3F3F3Fu);
}

__CVBuffer *PixelBufferUtils::pixelBufferFromRawFile(PixelBufferUtils *this, unint64_t a2, size_t a3, OSType a4)
{
  uint64_t v8 = [NSString stringWithUTF8String:this];
  CFStringRef v9 = v8;
  if (a4 == 1061109567)
  {
    int v10 = [v8 pathExtension];
    if (([v10 isEqualToString:&stru_270719A70] & 1) != 0 || objc_msgSend(v10, "length") != 4)
    {
      NSLog(&cfstr_SDErrorCannotR.isa, "pixelBufferFromRawFile", 2755);
LABEL_8:

LABEL_21:
      uint64_t v17 = 0;
      goto LABEL_22;
    }
    unint64_t v11 = [v10 stringByReplacingOccurrencesOfString:@":" withString:@"/"];

    size_t v12 = [v11 stringByReplacingOccurrencesOfString:@"_" withString:@"."];

    id v13 = v12;
    uint64_t v14 = (unsigned int *)[v13 UTF8String];
    if (!strcmp((const char *)v14, "24RG"))
    {
      a4 = 24;
    }
    else if (!strcmp((const char *)v14, "ARGB"))
    {
      a4 = 32;
    }
    else
    {
      a4 = bswap32(*v14);
    }
  }
  if (a2 && a3) {
    goto LABEL_14;
  }
  if (a3 | a2)
  {
    NSLog(&cfstr_SDErrorBadDime.isa, "pixelBufferFromRawFile", 2770);
    goto LABEL_21;
  }
  signed int v19 = [v9 stringByDeletingPathExtension];
  int v10 = [v19 pathExtension];

  if ([v10 isEqualToString:&stru_270719A70])
  {
    NSLog(&cfstr_SDErrorDidNotF.isa, "pixelBufferFromRawFile", 2777);
    goto LABEL_8;
  }
  OSType v20 = [v10 lowercaseString];
  double v21 = [v20 componentsSeparatedByString:@"x"];

  if ([v21 count] != 2)
  {
    uint64_t v23 = 2783;
    size_t v24 = @"%s:%d - ERROR - did not find dimensions in file name - extension ill formatted";
LABEL_30:
    NSLog(&v24->isa, "pixelBufferFromRawFile", v23);

    goto LABEL_8;
  }
  a3 = [v21 objectAtIndexedSubscript:0];
  LODWORD(a2) = [(id)a3 intValue];

  unint64_t v22 = [v21 objectAtIndexedSubscript:1];
  LODWORD(a3) = [v22 intValue];

  uint64_t v23 = 2794;
  size_t v24 = @"%s:%d - ERROR - did not find dimensions in file name - width/height ill formatted";
  if (!a2 || !a3) {
    goto LABEL_30;
  }
  a2 = (int)a2;
  a3 = (int)a3;

LABEL_14:
  CVPixelBufferRef pixelBufferOut = 0;
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate((CFAllocatorRef)*MEMORY[0x263EFFB08], a2, a3, a4, BufferAttributes, &pixelBufferOut)) {
    uint64_t v17 = 0;
  }
  else {
    uint64_t v17 = pixelBufferOut;
  }
  if (PixelBufferUtils::pixelBufferFromRawFileWithBuffer(this, v17, v16))
  {
    CVPixelBufferRelease(v17);
    goto LABEL_21;
  }
LABEL_22:

  return v17;
}

void sub_2590D4570(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PixelBufferUtils::pixelBufferToRawFile(PixelBufferUtils *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  if (!pixelBuffer) {
    return;
  }
  int v3 = pixelBuffer;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(pixelBuffer);
  BOOL isPixelFormatCompressed = PixelBufferUtils::isPixelFormatCompressed((PixelBufferUtils *)PixelFormatType);
  if (isPixelFormatCompressed)
  {
    OSType v6 = PixelBufferUtils::uncompressedEquivalentForPixelFormat((PixelBufferUtils *)PixelFormatType);
    size_t Width = CVPixelBufferGetWidth(v3);
    size_t Height = CVPixelBufferGetHeight(v3);
    pixelBufferOut.__r_.__value_.__r.__words[0] = 0;
    CFAllocatorRef v9 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
    CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
    CVReturn v11 = CVPixelBufferCreate(v9, Width, Height, v6, BufferAttributes, (CVPixelBufferRef *)&pixelBufferOut);
    std::string::size_type v12 = pixelBufferOut.__r_.__value_.__r.__words[0];
    if (v11) {
      id v13 = 0;
    }
    else {
      id v13 = (__CVBuffer *)pixelBufferOut.__r_.__value_.__r.__words[0];
    }
    if (PixelBufferUtils::convertPixelBufferFormat(v3, v13, (__CVBuffer *)1))
    {
      CVPixelBufferRelease(v13);
LABEL_8:
      PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)&pixelBufferOut);
      if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string pixelBufferOut = &pixelBufferOut;
      }
      else {
        p_std::string pixelBufferOut = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
      }
      NSLog(&cfstr_SDErrorPixelFo.isa, "pixelBufferToRawFile", 2825, PixelFormatType, p_pixelBufferOut);
      goto LABEL_128;
    }
    int v3 = (__CVBuffer *)v12;
    if (!v13) {
      goto LABEL_8;
    }
  }
  size_t v15 = strlen((const char *)this);
  if (v15 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  std::string::size_type v16 = v15;
  if (v15 >= 0x17)
  {
    uint64_t v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17) {
      uint64_t v18 = v15 | 7;
    }
    uint64_t v19 = v18 + 1;
    uint64_t v17 = (std::string *)operator new(v18 + 1);
    pixelBufferOut.__r_.__value_.__l.__size_ = v16;
    pixelBufferOut.__r_.__value_.__r.__words[2] = v19 | 0x8000000000000000;
    pixelBufferOut.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    goto LABEL_20;
  }
  *((unsigned char *)&pixelBufferOut.__r_.__value_.__s + 23) = v15;
  uint64_t v17 = &pixelBufferOut;
  if (v15) {
LABEL_20:
  }
    memcpy(v17, this, v16);
  v17->__r_.__value_.__s.__data_[v16] = 0;
  OSType v20 = NSURL;
  double v21 = [NSString stringWithUTF8String:this];
  unint64_t v22 = [v20 fileURLWithPath:v21];
  uint64_t v23 = [v22 pathExtension];
  int v24 = [v23 isEqualToString:&stru_270719A70];

  if (!v24) {
    goto LABEL_106;
  }
  std::string::append(&pixelBufferOut, ".");
  size_t v25 = CVPixelBufferGetWidth(v3);
  size_t v26 = CVPixelBufferGetHeight(v3);
  std::to_string(&v81, v25);
  size_t v27 = std::string::append(&v81, "x");
  long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v82.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v80, v26);
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v29 = &v80;
  }
  else {
    size_t v29 = (std::string *)v80.__r_.__value_.__r.__words[0];
  }
  if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v80.__r_.__value_.__l.__size_;
  }
  size_t v31 = std::string::append(&v82, (const std::string::value_type *)v29, size);
  long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  int64_t v84 = v31->__r_.__value_.__r.__words[2];
  *(_OWORD *)vImage_Buffer __p = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if ((SHIBYTE(v80.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v82.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_30;
    }
LABEL_65:
    operator delete(v82.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v81.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_31;
    }
LABEL_66:
    operator delete(v81.__r_.__value_.__l.__data_);
    goto LABEL_31;
  }
  operator delete(v80.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_65;
  }
LABEL_30:
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_66;
  }
LABEL_31:
  if (v84 >= 0) {
    size_t v33 = __p;
  }
  else {
    size_t v33 = (void **)__p[0];
  }
  if (v84 >= 0) {
    std::string::size_type v34 = HIBYTE(v84);
  }
  else {
    std::string::size_type v34 = (std::string::size_type)__p[1];
  }
  std::string::append(&pixelBufferOut, (const std::string::value_type *)v33, v34);
  std::string::append(&pixelBufferOut, ".");
  unint64_t v35 = CVPixelBufferGetPixelFormatType(v3);
  PixelBufferUtils::pixelFormatAsString(v35, (char *)&v82);
  unint64_t v36 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  char v37 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  std::string::size_type v39 = v82.__r_.__value_.__l.__size_;
  std::string::size_type v38 = v82.__r_.__value_.__r.__words[0];
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v40 = &v82;
  }
  else {
    size_t v40 = (std::string *)v82.__r_.__value_.__r.__words[0];
  }
  if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v41 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v41 = v82.__r_.__value_.__l.__size_;
  }
  if (!v41) {
    goto LABEL_69;
  }
  double v42 = v40;
  if (v41 < 8) {
    goto LABEL_134;
  }
  unint64_t v43 = v41 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = &v40->__r_.__value_.__s.__data_[3];
  unint64_t v45 = v41 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    int8x8_t v46 = vceq_s8(*(int8x8_t *)(v44 - 3), (int8x8_t)0x2F2F2F2F2F2F2F2FLL);
    if (v46.i8[0])
    {
      *(v44 - 3) = 58;
      if ((v46.i8[1] & 1) == 0) {
        goto LABEL_49;
      }
    }
    else if ((v46.i8[1] & 1) == 0)
    {
LABEL_49:
      if (v46.i8[2]) {
        goto LABEL_50;
      }
      goto LABEL_58;
    }
    *(v44 - 2) = 58;
    if (v46.i8[2])
    {
LABEL_50:
      *(v44 - 1) = 58;
      if ((v46.i8[3] & 1) == 0) {
        goto LABEL_51;
      }
      goto LABEL_59;
    }
LABEL_58:
    if ((v46.i8[3] & 1) == 0)
    {
LABEL_51:
      if (v46.i8[4]) {
        goto LABEL_52;
      }
      goto LABEL_60;
    }
LABEL_59:
    *uint64_t v44 = 58;
    if (v46.i8[4])
    {
LABEL_52:
      v44[1] = 58;
      if ((v46.i8[5] & 1) == 0) {
        goto LABEL_53;
      }
      goto LABEL_61;
    }
LABEL_60:
    if ((v46.i8[5] & 1) == 0)
    {
LABEL_53:
      if ((v46.i8[6] & 1) == 0) {
        goto LABEL_62;
      }
      goto LABEL_54;
    }
LABEL_61:
    v44[2] = 58;
    if ((v46.i8[6] & 1) == 0)
    {
LABEL_62:
      if ((v46.i8[7] & 1) == 0) {
        goto LABEL_46;
      }
      goto LABEL_63;
    }
LABEL_54:
    v44[3] = 58;
    if ((v46.i8[7] & 1) == 0) {
      goto LABEL_46;
    }
LABEL_63:
    v44[4] = 58;
LABEL_46:
    v44 += 8;
    v45 -= 8;
  }
  while (v45);
  if (v41 == v43) {
    goto LABEL_68;
  }
  double v42 = (std::string *)((char *)v40 + v43);
LABEL_134:
  uint64_t v77 = (std::string *)((char *)v40 + v41);
  do
  {
    if (v42->__r_.__value_.__s.__data_[0] == 47) {
      v42->__r_.__value_.__s.__data_[0] = 58;
    }
    double v42 = (std::string *)((char *)v42 + 1);
  }
  while (v42 != v77);
LABEL_68:
  unint64_t v36 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  std::string::size_type v39 = v82.__r_.__value_.__l.__size_;
  std::string::size_type v38 = v82.__r_.__value_.__r.__words[0];
  char v37 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
LABEL_69:
  if (v37 >= 0) {
    size_t v47 = &v82;
  }
  else {
    size_t v47 = (std::string *)v38;
  }
  if (v37 >= 0) {
    unint64_t v48 = v36;
  }
  else {
    unint64_t v48 = v39;
  }
  if (!v48) {
    goto LABEL_98;
  }
  size_t v49 = v47;
  if (v48 < 8) {
    goto LABEL_139;
  }
  unint64_t v50 = v48 & 0xFFFFFFFFFFFFFFF8;
  size_t v51 = &v47->__r_.__value_.__s.__data_[3];
  unint64_t v52 = v48 & 0xFFFFFFFFFFFFFFF8;
  while (2)
  {
    int8x8_t v53 = vceq_s8(*(int8x8_t *)(v51 - 3), (int8x8_t)0x2E2E2E2E2E2E2E2ELL);
    if (v53.i8[0])
    {
      *(v51 - 3) = 95;
      if ((v53.i8[1] & 1) == 0) {
        goto LABEL_81;
      }
LABEL_89:
      *(v51 - 2) = 95;
      if ((v53.i8[2] & 1) == 0) {
        goto LABEL_90;
      }
LABEL_82:
      *(v51 - 1) = 95;
      if ((v53.i8[3] & 1) == 0) {
        goto LABEL_83;
      }
LABEL_91:
      *size_t v51 = 95;
      if ((v53.i8[4] & 1) == 0) {
        goto LABEL_92;
      }
LABEL_84:
      v51[1] = 95;
      if ((v53.i8[5] & 1) == 0) {
        goto LABEL_85;
      }
LABEL_93:
      v51[2] = 95;
      if ((v53.i8[6] & 1) == 0) {
        goto LABEL_94;
      }
LABEL_86:
      v51[3] = 95;
      if (v53.i8[7]) {
        goto LABEL_95;
      }
    }
    else
    {
      if (v53.i8[1]) {
        goto LABEL_89;
      }
LABEL_81:
      if (v53.i8[2]) {
        goto LABEL_82;
      }
LABEL_90:
      if (v53.i8[3]) {
        goto LABEL_91;
      }
LABEL_83:
      if (v53.i8[4]) {
        goto LABEL_84;
      }
LABEL_92:
      if (v53.i8[5]) {
        goto LABEL_93;
      }
LABEL_85:
      if (v53.i8[6]) {
        goto LABEL_86;
      }
LABEL_94:
      if (v53.i8[7]) {
LABEL_95:
      }
        v51[4] = 95;
    }
    v51 += 8;
    v52 -= 8;
    if (v52) {
      continue;
    }
    break;
  }
  if (v48 == v50) {
    goto LABEL_97;
  }
  size_t v49 = (std::string *)((char *)v47 + v50);
LABEL_139:
  uint64_t v78 = (std::string *)((char *)v47 + v48);
  do
  {
    if (v49->__r_.__value_.__s.__data_[0] == 46) {
      v49->__r_.__value_.__s.__data_[0] = 95;
    }
    size_t v49 = (std::string *)((char *)v49 + 1);
  }
  while (v49 != v78);
LABEL_97:
  unint64_t v36 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
  std::string::size_type v39 = v82.__r_.__value_.__l.__size_;
  std::string::size_type v38 = v82.__r_.__value_.__r.__words[0];
  char v37 = HIBYTE(v82.__r_.__value_.__r.__words[2]);
LABEL_98:
  if (v37 >= 0) {
    int v54 = &v82;
  }
  else {
    int v54 = (std::string *)v38;
  }
  if (v37 >= 0) {
    std::string::size_type v55 = v36;
  }
  else {
    std::string::size_type v55 = v39;
  }
  std::string::append(&pixelBufferOut, (const std::string::value_type *)v54, v55);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v82.__r_.__value_.__l.__data_);
    if (SHIBYTE(v84) < 0) {
      goto LABEL_132;
    }
  }
  else
  {
    if ((SHIBYTE(v84) & 0x80000000) == 0) {
      goto LABEL_106;
    }
LABEL_132:
    operator delete(__p[0]);
  }
LABEL_106:
  if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v56 = &pixelBufferOut;
  }
  else {
    unint64_t v56 = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
  }
  OSType v57 = fopen((const char *)v56, "wb");
  if (v57)
  {
    if (CVPixelBufferGetPlaneCount(v3))
    {
      CVPixelBufferLockBaseAddress(v3, 1uLL);
      unsigned int v58 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(v3);
      size_t PlaneCount = CVPixelBufferGetPlaneCount(v3);
      if (PlaneCount)
      {
        for (size_t i = 0; i != PlaneCount; ++i)
        {
          size_t v61 = PixelBufferUtils::pixelSizeForPixelFormat(v58, i);
          size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(v3, i);
          size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(v3, i);
          size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v3, i);
          BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(v3, i);
          if (HeightOfPlane)
          {
            CGRect v66 = BaseAddressOfPlane;
            do
            {
              fwrite(v66, v61, WidthOfPlane, v57);
              v66 += BytesPerRowOfPlane;
              --HeightOfPlane;
            }
            while (HeightOfPlane);
          }
        }
      }
    }
    else
    {
      CVPixelBufferLockBaseAddress(v3, 1uLL);
      CGRect v70 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(v3);
      size_t v71 = PixelBufferUtils::pixelSizeForPixelFormat(v70, 0);
      size_t v72 = CVPixelBufferGetHeight(v3);
      size_t v73 = CVPixelBufferGetWidth(v3);
      size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v3);
      BaseAddress = (char *)CVPixelBufferGetBaseAddress(v3);
      if (v72)
      {
        BOOL v76 = BaseAddress;
        do
        {
          fwrite(v76, v71, v73, v57);
          v76 += BytesPerRow;
          --v72;
        }
        while (v72);
      }
    }
    CVPixelBufferUnlockBaseAddress(v3, 1uLL);
  }
  else
  {
    if ((pixelBufferOut.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CGRect v67 = &pixelBufferOut;
    }
    else {
      CGRect v67 = (std::string *)pixelBufferOut.__r_.__value_.__r.__words[0];
    }
    CGRect v68 = __error();
    CGRect v69 = strerror(*v68);
    NSLog(&cfstr_SDErrorFailedO.isa, "pixelBufferToRawFile", 2854, v67, v69);
  }
  fclose(v57);
  if (isPixelFormatCompressed) {
    CVPixelBufferRelease(v3);
  }
LABEL_128:
  if (SHIBYTE(pixelBufferOut.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(pixelBufferOut.__r_.__value_.__l.__data_);
  }
}

void sub_2590D4DA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (*(char *)(v39 - 89) < 0) {
    operator delete(*(void **)(v39 - 112));
  }
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::pixelBufferFromImageFile(PixelBufferUtils *this, CGImage *a2)
{
  if (this)
  {
    int v3 = NSURL;
    OSType v4 = [NSString stringWithUTF8String:this];
    CFURLRef v5 = [v3 fileURLWithPath:v4];

    OSType v6 = CGImageSourceCreateWithURL(v5, 0);
    unint64_t v7 = v6;
    if (v6)
    {
      if (CGImageSourceGetCount(v6))
      {
        ImageAtIndedouble x = CGImageSourceCreateImageAtIndex(v7, 0, 0);
        CVPixelBufferRef v9 = PixelBufferUtils::pixelBufferFromCGImage(ImageAtIndex, a2);
        CGImageRelease(ImageAtIndex);
        CFRelease(v7);
LABEL_8:

        return v9;
      }
      CFRelease(v7);
    }
    CVPixelBufferRef v9 = 0;
    goto LABEL_8;
  }
  return 0;
}

void sub_2590D4F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CVBuffer *PixelBufferUtils::blacken(__CVBuffer *this, __CVBuffer *a2)
{
  if (this)
  {
    OSType v2 = this;
    size_t PlaneCount = CVPixelBufferGetPlaneCount(this);
    CVPixelBufferLockBaseAddress(v2, 0);
    if (PlaneCount)
    {
      for (size_t i = 0; i != PlaneCount; ++i)
      {
        size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(v2, i);
        size_t v6 = CVPixelBufferGetHeightOfPlane(v2, i) * BytesPerRowOfPlane;
        BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v2, i);
        bzero(BaseAddressOfPlane, v6);
      }
    }
    else
    {
      size_t DataSize = CVPixelBufferGetDataSize(v2);
      BaseAddress = CVPixelBufferGetBaseAddress(v2);
      bzero(BaseAddress, DataSize);
    }
    return (__CVBuffer *)CVPixelBufferUnlockBaseAddress(v2, 0);
  }
  return this;
}

float PixelBufferUtils::getTurboColor(PixelBufferUtils *this, float a2, float *a3, float *a4, float *a5)
{
  float v5 = a2 * 255.0;
  unsigned int v6 = v5;
  if (v5 + 1 < 0xFF) {
    unsigned int v7 = v6 + 1;
  }
  else {
    unsigned int v7 = 255;
  }
  float v8 = v5 - truncf(v5);
  uint64_t v9 = 4 * v6;
  uint64_t v10 = 4 * v7;
  *(float *)this = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v9)
                 + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                            + v10)
                                 - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                            + v9))
                         * v8);
  *a3 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v9)
      + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                 + v10)
                      - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap + v9))
              * v8);
  float result = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v9)
         + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                    + v10)
                         - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap
                                    + v9))
                 * v8);
  *a4 = result;
  return result;
}

float *PixelBufferUtils::getJetColor(float *this, float a2, float *a3, float *a4, float *a5)
{
  float v5 = a2 * 4.0;
  *this = 1.5 - fabsf(v5 + -3.0);
  *a3 = 1.5 - fabsf(v5 + -2.0);
  *a4 = 1.5 - fabsf(v5 + -1.0);
  float v6 = 0.0;
  if (*this <= 1.0) {
    float v7 = *this;
  }
  else {
    float v7 = 1.0;
  }
  if (*this >= 0.0) {
    float v8 = v7;
  }
  else {
    float v8 = 0.0;
  }
  *this = v8;
  if (*a3 <= 1.0) {
    float v9 = *a3;
  }
  else {
    float v9 = 1.0;
  }
  if (*a3 >= 0.0) {
    float v10 = v9;
  }
  else {
    float v10 = 0.0;
  }
  *a3 = v10;
  if (*a4 >= 0.0)
  {
    float v6 = 1.0;
    if (*a4 <= 1.0) {
      float v6 = *a4;
    }
  }
  *a4 = v6;
  return this;
}

uint64_t PixelBufferUtils::colorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, int a3, float a4, float a5, uint64_t a6, __CVBuffer *a7, __CVBuffer *a8)
{
  _S8 = a5;
  int v120 = (int)a2;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  CVPixelBufferLockBaseAddress(this, 1uLL);
  CVPixelBufferLockBaseAddress(a7, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t Width = CVPixelBufferGetWidth(this);
  uint64_t v18 = this;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  if (BaseAddress)
  {
    size_t v20 = BytesPerRow;
  }
  else
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    size_t Height = 0;
    size_t Width = 0;
    size_t v20 = 0;
  }
  double v21 = (char *)CVPixelBufferGetBaseAddress(a7);
  CVPixelBufferGetHeight(a7);
  CVPixelBufferGetWidth(a7);
  size_t v22 = CVPixelBufferGetBytesPerRow(a7);
  if (!v21)
  {
    NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
    size_t v22 = 0;
  }
  if ((int)PixelFormatType > 1717855599)
  {
    if ((int)PixelFormatType > 1751410031)
    {
      if (PixelFormatType != 1751410032 && PixelFormatType != 1751411059)
      {
        if (PixelFormatType != 1932996149) {
          goto LABEL_147;
        }
        goto LABEL_31;
      }
LABEL_17:
      if (v120)
      {
        if (!Height || !Width) {
          goto LABEL_144;
        }
        uint64_t v24 = 0;
        _H0 = *BaseAddress;
        __asm { FCVT            S8, H0 }
        uint64_t v30 = BaseAddress;
        a4 = _S8;
        do
        {
          uint64_t v31 = 0;
          do
          {
            _H0 = v30[v31];
            __asm { FCVT            S0, H0 }
            if (_S8 > _S0) {
              _S8 = _S0;
            }
            if (a4 < _S0) {
              a4 = _S0;
            }
            ++v31;
          }
          while (Width > v31);
          ++v24;
          uint64_t v30 = (_WORD *)((char *)v30 + v20);
        }
        while (Height > v24);
      }
      else if (!Height)
      {
        goto LABEL_144;
      }
      if (Width)
      {
        uint64_t v64 = 0;
        CGRect v65 = v21 + 1;
        float v66 = 1.0 / (float)(a4 - _S8);
        do
        {
          uint64_t v67 = 0;
          CGRect v68 = v65;
          if (a6)
          {
            do
            {
              _H3 = BaseAddress[v67];
              __asm { FCVT            S4, H3 }
              if (a3 && _S4 == 0.0)
              {
                char v76 = 0;
              }
              else
              {
                float v69 = (float)(_S4 - _S8) * v66;
                float v70 = v69 * 255.0;
                if (v69 > 1.0) {
                  float v70 = 255.0;
                }
                if (v69 >= 0.0) {
                  float v71 = v70;
                }
                else {
                  float v71 = 0.0;
                }
                uint64_t v72 = 3 * (int)v71;
                size_t v73 = (float *)(a6 + 4 * (int)v72);
                float v74 = *v73;
                float v75 = *(float *)(a6 + 4 * v72 + 4);
                *(v68 - 1) = (int)(float)(v73[2] * 255.0);
                unsigned char *v68 = (int)(float)(v75 * 255.0);
                v68[1] = (int)(float)(v74 * 255.0);
                char v76 = -1;
              }
              v68[2] = v76;
              ++v67;
              v68 += 4;
            }
            while (Width > v67);
          }
          else
          {
            do
            {
              _H3 = BaseAddress[v67];
              __asm { FCVT            S4, H3 }
              if (a3 && _S4 == 0.0)
              {
                char v82 = 0;
              }
              else
              {
                float v79 = (float)(_S4 - _S8) * v66;
                float v80 = v79 * 255.0;
                if (v79 > 1.0) {
                  float v80 = 255.0;
                }
                if (v79 >= 0.0) {
                  float v81 = v80;
                }
                else {
                  float v81 = 0.0;
                }
                char v82 = -1;
                if (v81 + 1 < 0xFF) {
                  unsigned int v83 = v81 + 1;
                }
                else {
                  unsigned int v83 = 255;
                }
                uint64_t v84 = 4 * v81;
                float v85 = v81 - truncf(v81);
                uint64_t v86 = 4 * v83;
                float v87 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v84)
                    + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v86)
                                    - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                               + v84))
                            * v85);
                float v88 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v84);
                float v89 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v86)
                    - v88;
                LODWORD(v86) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                             + v84)
                                                  + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v86)
                                                                  - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                             + v84))
                                                          * v85))
                                          * 255.0);
                *(v68 - 1) = (int)(float)((float)(v88 + (float)(v89 * v85)) * 255.0);
                unsigned char *v68 = v86;
                v68[1] = (int)(float)(v87 * 255.0);
              }
              v68[2] = v82;
              ++v67;
              v68 += 4;
            }
            while (Width > v67);
          }
          ++v64;
          BaseAddress = (_WORD *)((char *)BaseAddress + v20);
          v65 += v22;
        }
        while (Height > v64);
      }
      goto LABEL_144;
    }
    if (PixelFormatType == 1717855600 || PixelFormatType == 1717856627)
    {
      if (v120)
      {
        if (!Height || !Width) {
          goto LABEL_144;
        }
        uint64_t v60 = 0;
        _S8 = *(float *)BaseAddress;
        size_t v61 = BaseAddress;
        a4 = *(float *)BaseAddress;
        do
        {
          uint64_t v62 = 0;
          do
          {
            float v63 = *(float *)&v61[2 * v62];
            if (v63 < _S8) {
              _S8 = *(float *)&v61[2 * v62];
            }
            if (a4 < v63) {
              a4 = *(float *)&v61[2 * v62];
            }
            ++v62;
          }
          while (Width > v62);
          ++v60;
          size_t v61 = (_WORD *)((char *)v61 + v20);
        }
        while (Height > v60);
      }
      else if (!Height)
      {
        goto LABEL_144;
      }
      if (Width)
      {
        uint64_t v92 = 0;
        int v93 = v21 + 1;
        float v94 = 1.0 / (float)(a4 - _S8);
        do
        {
          uint64_t v95 = 0;
          unint64_t v96 = v93;
          if (a6)
          {
            do
            {
              float v105 = *(float *)&BaseAddress[2 * v95];
              if (a3 && v105 == 0.0)
              {
                char v104 = 0;
              }
              else
              {
                float v97 = (float)(v105 - _S8) * v94;
                float v98 = v97 * 255.0;
                if (v97 > 1.0) {
                  float v98 = 255.0;
                }
                if (v97 >= 0.0) {
                  float v99 = v98;
                }
                else {
                  float v99 = 0.0;
                }
                uint64_t v100 = 3 * (int)v99;
                double v101 = (float *)(a6 + 4 * (int)v100);
                float v102 = *v101;
                float v103 = *(float *)(a6 + 4 * v100 + 4);
                *(v96 - 1) = (int)(float)(v101[2] * 255.0);
                unsigned char *v96 = (int)(float)(v103 * 255.0);
                v96[1] = (int)(float)(v102 * 255.0);
                char v104 = -1;
              }
              v96[2] = v104;
              ++v95;
              v96 += 4;
            }
            while (Width > v95);
          }
          else
          {
            do
            {
              float v117 = *(float *)&BaseAddress[2 * v95];
              if (a3 && v117 == 0.0)
              {
                char v109 = 0;
              }
              else
              {
                float v106 = (float)(v117 - _S8) * v94;
                float v107 = v106 * 255.0;
                if (v106 > 1.0) {
                  float v107 = 255.0;
                }
                if (v106 >= 0.0) {
                  float v108 = v107;
                }
                else {
                  float v108 = 0.0;
                }
                char v109 = -1;
                if (v108 + 1 < 0xFF) {
                  unsigned int v110 = v108 + 1;
                }
                else {
                  unsigned int v110 = 255;
                }
                uint64_t v111 = 4 * v108;
                float v112 = v108 - truncf(v108);
                uint64_t v113 = 4 * v110;
                float v114 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v111)
                     + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                                + v113)
                                     - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                                + v111))
                             * v112);
                float v115 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v111);
                float v116 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v113)
                     - v115;
                LODWORD(v113) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                              + v111)
                                                   + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                              + v113)
                                                                   - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                              + v111))
                                                           * v112))
                                           * 255.0);
                *(v96 - 1) = (int)(float)((float)(v115 + (float)(v116 * v112)) * 255.0);
                unsigned char *v96 = v113;
                v96[1] = (int)(float)(v114 * 255.0);
              }
              v96[2] = v109;
              ++v95;
              v96 += 4;
            }
            while (Width > v95);
          }
          ++v92;
          BaseAddress = (_WORD *)((char *)BaseAddress + v20);
          v93 += v22;
        }
        while (Height > v92);
      }
      goto LABEL_144;
    }
LABEL_147:
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v122 >= 0) {
      double v119 = __p;
    }
    else {
      double v119 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "colorizedDepthPixelBuffer", 3087, PixelFormatType, v119);
    if (v122 < 0) {
      operator delete(__p[0]);
    }
    CVPixelBufferUnlockBaseAddress(a7, 0);
    return 0xFFFFFFFFLL;
  }
  if ((int)PixelFormatType <= 1278226535)
  {
    if (PixelFormatType == 825306677 || PixelFormatType == 825437747) {
      goto LABEL_31;
    }
    goto LABEL_147;
  }
  if (PixelFormatType == 1278226536) {
    goto LABEL_17;
  }
  if (PixelFormatType != 1278226742 && PixelFormatType != 1647392359) {
    goto LABEL_147;
  }
LABEL_31:
  if (v120)
  {
    if (Height && Width)
    {
      uint64_t v34 = 0;
      LOWORD(v23) = *BaseAddress;
      _S8 = (float)LODWORD(v23);
      unint64_t v35 = BaseAddress;
      a4 = (float)LODWORD(v23);
      do
      {
        uint64_t v36 = 0;
        do
        {
          LOWORD(v23) = v35[v36];
          float v23 = (float)LODWORD(v23);
          if (_S8 > v23) {
            _S8 = v23;
          }
          if (a4 < v23) {
            a4 = v23;
          }
          ++v36;
        }
        while (Width > v36);
        ++v34;
        unint64_t v35 = (_WORD *)((char *)v35 + v20);
      }
      while (Height > v34);
      goto LABEL_44;
    }
  }
  else if (Height)
  {
LABEL_44:
    if (Width)
    {
      uint64_t v37 = 0;
      std::string::size_type v38 = v21 + 1;
      float v39 = 1.0 / (float)(a4 - _S8);
      do
      {
        uint64_t v40 = 0;
        std::string::size_type v41 = v38;
        if (a6)
        {
          do
          {
            LODWORD(v48) = (unsigned __int16)BaseAddress[v40];
            if (!a3 || BaseAddress[v40])
            {
              float v42 = (float)((float)v48 - _S8) * v39;
              float v43 = v42 * 255.0;
              if (v42 > 1.0) {
                float v43 = 255.0;
              }
              if (v42 >= 0.0) {
                float v44 = v43;
              }
              else {
                float v44 = 0.0;
              }
              uint64_t v48 = 3 * (int)v44;
              unint64_t v45 = (float *)(a6 + 4 * (int)v48);
              float v46 = *v45;
              float v47 = *(float *)(a6 + 4 * v48 + 4);
              *(v41 - 1) = (int)(float)(v45[2] * 255.0);
              *std::string::size_type v41 = (int)(float)(v47 * 255.0);
              v41[1] = (int)(float)(v46 * 255.0);
              LOBYTE(v48) = -1;
            }
            v41[2] = v48;
            ++v40;
            v41 += 4;
          }
          while (Width > v40);
        }
        else
        {
          do
          {
            unsigned int v52 = (unsigned __int16)BaseAddress[v40];
            if (!a3 || BaseAddress[v40])
            {
              float v49 = (float)((float)v52 - _S8) * v39;
              float v50 = v49 * 255.0;
              if (v49 > 1.0) {
                float v50 = 255.0;
              }
              if (v49 >= 0.0) {
                float v51 = v50;
              }
              else {
                float v51 = 0.0;
              }
              LOBYTE(v52) = -1;
              if (v51 + 1 < 0xFF) {
                unsigned int v53 = v51 + 1;
              }
              else {
                unsigned int v53 = 255;
              }
              uint64_t v54 = 4 * v51;
              float v55 = v51 - truncf(v51);
              uint64_t v56 = 4 * v53;
              float v57 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap + v54)
                  + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                             + v56)
                                  - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::redMap
                                             + v54))
                          * v55);
              float v58 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v54);
              float v59 = *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::blueMap + v56)
                  - v58;
              LODWORD(v56) = (int)(float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                           + v54)
                                                + (float)((float)(*(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                           + v56)
                                                                - *(float *)((char *)&PixelBufferUtils::getTurboColor(float,float &,float &,float &)::greenMap
                                                                           + v54))
                                                        * v55))
                                        * 255.0);
              *(v41 - 1) = (int)(float)((float)(v58 + (float)(v59 * v55)) * 255.0);
              *std::string::size_type v41 = v56;
              v41[1] = (int)(float)(v57 * 255.0);
            }
            v41[2] = v52;
            ++v40;
            v41 += 4;
          }
          while (Width > v40);
        }
        ++v37;
        BaseAddress = (_WORD *)((char *)BaseAddress + v20);
        v38 += v22;
      }
      while (Height > v37);
    }
  }
LABEL_144:
  CVPixelBufferUnlockBaseAddress(v18, 1uLL);
  uint64_t result = (uint64_t)a7;
  if (a7)
  {
    CVPixelBufferUnlockBaseAddress(a7, 0);
    return 0;
  }
  return result;
}

void sub_2590D5AB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

CVPixelBufferRef PixelBufferUtils::createColorizedDepthPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, float a4, float a5, uint64_t a6, __CVBuffer *a7, __CVBuffer *a8, float a9)
{
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v19 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v19, Width, Height, 0x42475241u, BufferAttributes, &pixelBufferOut)) {
    size_t v22 = 0;
  }
  else {
    size_t v22 = pixelBufferOut;
  }
  CVPixelBufferRef texture = v22;
  if (PixelBufferUtils::colorizedDepthPixelBuffer(this, a2, (int)a3, a5, a4, a6, v22, v21))
  {
    CVPixelBufferRelease(v22);
    size_t v22 = 0;
    CVPixelBufferRef texture = 0;
  }
  if (a7)
  {
    size_t v23 = CVPixelBufferGetWidth(a7);
    size_t v24 = CVPixelBufferGetHeight(a7);
    CVPixelBufferRef pixelBufferOut = 0;
    CFDictionaryRef v25 = (const __CFDictionary *)getBufferAttributes();
    if (CVPixelBufferCreate(v19, v23, v24, 0x42475241u, v25, &pixelBufferOut)) {
      size_t v26 = 0;
    }
    else {
      size_t v26 = pixelBufferOut;
    }
    if (PixelBufferUtils::convertPixelBufferFormat(a7, v26, 0))
    {
      CVPixelBufferRelease(v26);
    }
    else if (v26)
    {
      *(float *)&double v27 = a9;
      char v31 = PixelBufferUtils::alphaBlend(v26, v22, &texture, v27, a3);
      CVPixelBufferRelease(v26);
      if (v31) {
        return texture;
      }
      goto LABEL_13;
    }
    CVPixelBufferRelease(v22);
    CVPixelBufferRef texture = 0;
    *(float *)&double v28 = a9;
    char v29 = PixelBufferUtils::alphaBlend(0, 0, &texture, v28, a3);
    CVPixelBufferRelease(0);
    if ((v29 & 1) == 0)
    {
LABEL_13:
      CVPixelBufferRelease(texture);
      return 0;
    }
  }
  return texture;
}

uint64_t PixelBufferUtils::alphaBlend(PixelBufferUtils *this, __CVBuffer *a2, __CVBuffer **a3, double a4, __CVBuffer **a5)
{
  int v5 = (int)a5;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  OSType v12 = CVPixelBufferGetPixelFormatType(a2);
  size_t v13 = CVPixelBufferGetWidth(a2);
  size_t v14 = CVPixelBufferGetHeight(a2);
  if (PixelFormatType == v12 && Width == v13 && Height == v14)
  {
    size_t v15 = *a3;
    if (!*a3)
    {
      size_t v16 = CVPixelBufferGetWidth(this);
      size_t v17 = CVPixelBufferGetHeight(this);
      pixelBufferOut[0] = 0;
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v18, v16, v17, PixelFormatType, BufferAttributes, pixelBufferOut)) {
        size_t v15 = 0;
      }
      else {
        size_t v15 = pixelBufferOut[0];
      }
      *a3 = v15;
    }
    int v279 = v5;
    if ((int)PixelFormatType <= 1380401728)
    {
      if ((int)PixelFormatType > 875704437)
      {
        if ((int)PixelFormatType > 1111970368)
        {
          if (PixelFormatType != 1111970369)
          {
            if (PixelFormatType != 1278226534)
            {
              if (PixelFormatType != 1278226536) {
                goto LABEL_186;
              }
              goto LABEL_134;
            }
            goto LABEL_34;
          }
          goto LABEL_60;
        }
        if (PixelFormatType != 875704438)
        {
          int v23 = 1094862674;
          goto LABEL_59;
        }
LABEL_60:
        size_t v56 = CVPixelBufferGetWidth(this);
        size_t v57 = CVPixelBufferGetHeight(this);
        CVPixelBufferLockBaseAddress(v15, 0);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
        size_t v59 = CVPixelBufferGetBytesPerRow(a2);
        size_t v60 = CVPixelBufferGetBytesPerRow(v15);
        BaseAddress = (int8x16_t *)CVPixelBufferGetBaseAddress(this);
        uint64_t v62 = (int8x16_t *)CVPixelBufferGetBaseAddress(a2);
        float v63 = v15;
        uint64_t v64 = v62;
        pixelBuffer = v63;
        CGRect v65 = (int8x16_t *)CVPixelBufferGetBaseAddress(v63);
        float v66 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
        unint64_t v67 = PixelBufferUtils::componentsPerPixelForPixelFormat(v66, 0) * v56;
        if (v57) {
          BOOL v72 = v67 == 0;
        }
        else {
          BOOL v72 = 1;
        }
        char v73 = v72;
        if (v279)
        {
          if (v73) {
            goto LABEL_150;
          }
          uint64_t v74 = 0;
          unint64_t v75 = v67 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          uint64_t v77 = v65;
          uint64_t v78 = (__int32 *)v64;
          float v79 = (__int32 *)BaseAddress;
          while (1)
          {
            float v80 = &BaseAddress->i8[v74 * BytesPerRow];
            float v81 = &v64->i8[v74 * v59];
            char v82 = &v65->i8[v74 * v60];
            if (v67 < 8) {
              break;
            }
            unsigned int v83 = &v65->i8[v74 * v60];
            if ((unint64_t)(v83 - &v64->i8[v74 * v59]) < 4
              || (unint64_t)(v83 - &BaseAddress->i8[v74 * BytesPerRow]) < 4)
            {
              break;
            }
            v81 += v75;
            float v88 = v77;
            float v89 = v78;
            size_t v90 = v79;
            unint64_t v91 = v67 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              __int32 v92 = *v89++;
              v68.i32[0] = v92;
              int16x4_t v93 = (int16x4_t)vmovl_u8(v68).u64[0];
              int8x8_t v94 = (int8x8_t)vceqz_s16(v93);
              __int32 v95 = *v90++;
              v69.i32[0] = v95;
              int8x8_t v69 = (int8x8_t)vmovl_u8((uint8x8_t)v69).u64[0];
              float32x4_t v96 = vcvtq_f32_u32(vmovl_u16((uint16x4_t)v93));
              int16x8_t v97 = (int16x8_t)vcvtq_s32_f32(vmlaq_f32(v96, v76, vsubq_f32(vcvtq_f32_u32(vmovl_u16((uint16x4_t)v69)), v96)));
              *(int8x8_t *)v97.i8 = vbsl_s8(v94, v69, (int8x8_t)vmovn_s32((int32x4_t)v97));
              uint8x8_t v68 = (uint8x8_t)vmovn_s16(v97);
              v88->i32[0] = v68.i32[0];
              float v88 = (int8x16_t *)((char *)v88 + 4);
              v91 -= 4;
            }
            while (v91);
            if (v67 != v75)
            {
              v82 += v75;
              v80 += v75;
              unint64_t v85 = v67 & 0xFFFFFFFFFFFFFFFCLL;
LABEL_76:
              unint64_t v86 = v67 - v85;
              do
              {
                unsigned int v87 = *v80;
                if (*v81) {
                  unsigned int v87 = (int)(float)((float)*v81
                }
                                   + (float)((float)((float)v87 - (float)*v81) * *(float *)&a4));
                *v82++ = v87;
                ++v80;
                ++v81;
                --v86;
              }
              while (v86);
            }
            ++v74;
            float v79 = (__int32 *)((char *)v79 + BytesPerRow);
            uint64_t v78 = (__int32 *)((char *)v78 + v59);
            uint64_t v77 = (int8x16_t *)((char *)v77 + v60);
            if (v74 == v57) {
              goto LABEL_150;
            }
          }
          unint64_t v85 = 0;
          goto LABEL_76;
        }
        if (v73) {
          goto LABEL_150;
        }
        uint64_t v98 = 0;
        unint64_t v99 = v67 & 0xFFFFFFFFFFFFFFF0;
        unint64_t v100 = v67 & 0xFFFFFFFFFFFFFFF8;
        double v101 = v65;
        float v102 = v64;
        float v103 = BaseAddress;
        float32x4_t v104 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        while (1)
        {
          float v105 = &BaseAddress->i8[v98 * BytesPerRow];
          float v106 = &v64->u8[v98 * v59];
          float v107 = &v65->i8[v98 * v60];
          if (v67 < 8
            || ((float v108 = &v65->i8[v98 * v60], (unint64_t)(v108 - &BaseAddress->i8[v98 * BytesPerRow]) >= 0x10)
              ? (BOOL v109 = (unint64_t)(v108 - &v64->i8[v98 * v59]) >= 0x10)
              : (BOOL v109 = 0),
                !v109))
          {
            unint64_t v110 = 0;
            goto LABEL_93;
          }
          if (v67 >= 0x10)
          {
            double v119 = v101;
            int v120 = v102;
            int16x8_t v121 = v103;
            unint64_t v122 = v67 & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int8x16_t v123 = *v121++;
              float32x4_t v124 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_2591202E0));
              float32x4_t v125 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_2591202F0));
              float32x4_t v126 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_259120300));
              float32x4_t v127 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v123, (int8x16_t)xmmword_259120310));
              int8x16_t v128 = *v120++;
              float32x4_t v129 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v128, (int8x16_t)xmmword_2591202E0));
              float32x4_t v130 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v128, (int8x16_t)xmmword_2591202F0));
              float32x4_t v131 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v128, (int8x16_t)xmmword_259120300));
              float32x4_t v132 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v128, (int8x16_t)xmmword_259120310));
              float32x4_t v71 = vsubq_f32(v126, v131);
              v284.val[3] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v132, v104, vsubq_f32(v127, v132)));
              v284.val[2] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v131, v104, v71));
              v284.val[1] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v130, v104, vsubq_f32(v125, v130)));
              v284.val[0] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v129, v104, vsubq_f32(v124, v129)));
              int8x16_t v70 = vqtbl4q_s8(v284, (int8x16_t)xmmword_259120320);
              *v119++ = v70;
              v122 -= 16;
            }
            while (v122);
            if (v67 == v99) {
              goto LABEL_86;
            }
            unint64_t v115 = v67 & 0xFFFFFFFFFFFFFFF0;
            if ((v67 & 8) == 0)
            {
              v105 += v99;
              v106 += v99;
              v107 += v99;
              unint64_t v110 = v67 & 0xFFFFFFFFFFFFFFF0;
              goto LABEL_93;
            }
          }
          else
          {
            unint64_t v115 = 0;
          }
          v106 += v100;
          do
          {
            v70.i64[0] = *(uint64_t *)((char *)v103->i64 + v115);
            v71.i64[0] = *(uint64_t *)((char *)v102->i64 + v115);
            uint32x4_t v116 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v71, (int8x16_t)xmmword_2591202F0);
            float32x4_t v117 = vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8((int8x16_t)v71, (int8x16_t)xmmword_2591202E0));
            float32x4_t v118 = vcvtq_f32_u32(v116);
            float32x4_t v71 = vmlaq_f32(v117, v104, vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_2591202E0)), v117));
            v283.val[1] = (int8x16_t)vcvtq_u32_f32(vmlaq_f32(v118, v104, vsubq_f32(vcvtq_f32_u32((uint32x4_t)vqtbl1q_s8(v70, (int8x16_t)xmmword_2591202F0)), v118)));
            v283.val[0] = (int8x16_t)vcvtq_u32_f32(v71);
            int8x16_t v70 = vqtbl2q_s8(v283, (int8x16_t)xmmword_259120330);
            *(uint64_t *)((char *)v101->i64 + v115) = v70.i64[0];
            v115 += 8;
          }
          while (v100 != v115);
          if (v67 == v100) {
            goto LABEL_86;
          }
          v107 += v100;
          v105 += v100;
          unint64_t v110 = v67 & 0xFFFFFFFFFFFFFFF8;
LABEL_93:
          unint64_t v111 = v67 - v110;
          do
          {
            unsigned int v112 = *v105++;
            float v113 = (float)v112;
            unsigned int v114 = *v106++;
            *v107++ = (int)(float)((float)v114 + (float)((float)(v113 - (float)v114) * *(float *)&a4));
            --v111;
          }
          while (v111);
LABEL_86:
          ++v98;
          float v103 = (int8x16_t *)((char *)v103 + BytesPerRow);
          float v102 = (int8x16_t *)((char *)v102 + v59);
          double v101 = (int8x16_t *)((char *)v101 + v60);
          if (v98 == v57) {
            goto LABEL_150;
          }
        }
      }
      if ((int)PixelFormatType <= 843264103)
      {
        if (PixelFormatType == 32) {
          goto LABEL_60;
        }
        int v22 = 825437747;
        goto LABEL_109;
      }
      if (PixelFormatType != 843264104)
      {
        int v23 = 875704422;
LABEL_59:
        if (PixelFormatType == v23) {
          goto LABEL_60;
        }
LABEL_186:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)pixelBufferOut);
        if (v282 >= 0) {
          unint64_t v250 = pixelBufferOut;
        }
        else {
          unint64_t v250 = (CVPixelBufferRef *)pixelBufferOut[0];
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "alphaBlend", 3803, PixelFormatType, v250);
        if (v282 < 0) {
          operator delete(pixelBufferOut[0]);
        }
        return 0;
      }
      goto LABEL_134;
    }
    if ((int)PixelFormatType <= 1717855599)
    {
      if ((int)PixelFormatType > 1380411456)
      {
        if (PixelFormatType != 1380411457)
        {
          int v22 = 1647392359;
LABEL_109:
          if (PixelFormatType != v22) {
            goto LABEL_186;
          }
          size_t pixelBuffera = CVPixelBufferGetWidth(this);
          size_t v133 = CVPixelBufferGetHeight(this);
          CVPixelBufferLockBaseAddress(v15, 0);
          CVPixelBufferLockBaseAddress(this, 1uLL);
          CVPixelBufferLockBaseAddress(a2, 1uLL);
          size_t v134 = CVPixelBufferGetBytesPerRow(this);
          size_t v135 = CVPixelBufferGetBytesPerRow(a2);
          size_t v136 = CVPixelBufferGetBytesPerRow(v15);
          unint64_t v137 = (int8x16_t *)CVPixelBufferGetBaseAddress(this);
          uint64_t v138 = (int16x8_t *)CVPixelBufferGetBaseAddress(a2);
          char v139 = v15;
          unint64_t v140 = (int8x16_t *)CVPixelBufferGetBaseAddress(v15);
          char v141 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
          unint64_t v142 = PixelBufferUtils::componentsPerPixelForPixelFormat(v141, 0) * pixelBuffera;
          if (v133) {
            BOOL v143 = v142 == 0;
          }
          else {
            BOOL v143 = 1;
          }
          char v144 = v143;
          if (v279)
          {
            if ((v144 & 1) == 0)
            {
              uint64_t v145 = 0;
              unint64_t v146 = 2 * (v142 & 0xFFFFFFFFFFFFFFF8);
              float32x4_t v147 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
              unint64_t v148 = v140;
              int32x4_t v149 = v138;
              unint64_t v150 = v137;
              while (1)
              {
                float32x4_t v151 = &v137->i8[v145 * v134];
                float64_t v152 = &v138->i8[v145 * v135];
                float64_t v153 = &v140->i8[v145 * v136];
                if (v142 < 8) {
                  break;
                }
                float64_t v154 = &v140->i8[v145 * v136];
                if ((unint64_t)(v154 - &v138->i8[v145 * v135]) < 0x10
                  || (unint64_t)(v154 - &v137->i8[v145 * v134]) < 0x10)
                {
                  break;
                }
                v152 += v146;
                float64_t v159 = v148;
                float64x2_t v160 = v149;
                float64x2_t v161 = v150;
                unint64_t v162 = v142 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  int16x8_t v163 = *v160++;
                  uint16x8_t v164 = (uint16x8_t)v163;
                  int8x16_t v165 = (int8x16_t)vceqzq_s16(v163);
                  int8x16_t v166 = *v161++;
                  float32x4_t v167 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v164.i8));
                  float32x4_t v168 = vcvtq_f32_u32(vmovl_high_u16(v164));
                  *v159++ = vbslq_s8(v165, v166, (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmlaq_f32(v167, v147, vsubq_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v166.i8)), v167))), (int16x8_t)vcvtq_u32_f32(vmlaq_f32(v168, v147, vsubq_f32(vcvtq_f32_u32(vmovl_high_u16((uint16x8_t)v166)), v168)))));
                  v162 -= 8;
                }
                while (v162);
                if (v142 != (v142 & 0xFFFFFFFFFFFFFFF8))
                {
                  v153 += v146;
                  v151 += v146;
                  unint64_t v156 = v142 & 0xFFFFFFFFFFFFFFF8;
LABEL_126:
                  unint64_t v157 = v142 - v156;
                  do
                  {
                    unsigned int v158 = *(unsigned __int16 *)v151;
                    if (*(_WORD *)v152) {
                      unsigned int v158 = (int)(float)((float)*(unsigned __int16 *)v152
                    }
                                        + (float)((float)((float)v158 - (float)*(unsigned __int16 *)v152) * *(float *)&a4));
                    *(_WORD *)float64_t v153 = v158;
                    v153 += 2;
                    v151 += 2;
                    v152 += 2;
                    --v157;
                  }
                  while (v157);
                }
                ++v145;
                unint64_t v150 = (int8x16_t *)((char *)v150 + v134);
                int32x4_t v149 = (int16x8_t *)((char *)v149 + v135);
                unint64_t v148 = (int8x16_t *)((char *)v148 + v136);
                if (v145 == v133) {
                  goto LABEL_185;
                }
              }
              unint64_t v156 = 0;
              goto LABEL_126;
            }
LABEL_185:
            uint64_t v20 = 1;
            CVPixelBufferUnlockBaseAddress(this, 1uLL);
            CVPixelBufferUnlockBaseAddress(a2, 1uLL);
            uint64_t v195 = v139;
            goto LABEL_151;
          }
          if (v144) {
            goto LABEL_185;
          }
          uint64_t v251 = 0;
          unint64_t v252 = 2 * (v142 & 0xFFFFFFFFFFFFFFF8);
          float32x4_t v253 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
          float v254 = (int16x8_t *)v140;
          uint64_t v255 = (uint16x8_t *)v138;
          float32x4_t v256 = (uint16x8_t *)v137;
          while (1)
          {
            unint64_t v257 = &v137->i8[v251 * v134];
            uint64_t v258 = &v138->i8[v251 * v135];
            int8x16_t v259 = &v140->i8[v251 * v136];
            if (v142 >= 8
              && ((size_t v260 = &v140->i8[v251 * v136], (unint64_t)(v260 - &v137->i8[v251 * v134]) >= 0x10)
                ? (BOOL v261 = (unint64_t)(v260 - &v138->i8[v251 * v135]) >= 0x10)
                : (BOOL v261 = 0),
                  v261))
            {
              v258 += v252;
              BOOL v267 = v254;
              char v268 = v255;
              unint64_t v269 = v256;
              unint64_t v270 = v142 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                uint16x8_t v271 = *v269++;
                float32x4_t v272 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v271.i8));
                float32x4_t v273 = vcvtq_f32_u32(vmovl_high_u16(v271));
                uint16x8_t v274 = *v268++;
                float32x4_t v275 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v274.i8));
                float32x4_t v276 = vcvtq_f32_u32(vmovl_high_u16(v274));
                *v267++ = vuzp1q_s16((int16x8_t)vcvtq_u32_f32(vmlaq_f32(v275, v253, vsubq_f32(v272, v275))), (int16x8_t)vcvtq_u32_f32(vmlaq_f32(v276, v253, vsubq_f32(v273, v276))));
                v270 -= 8;
              }
              while (v270);
              if (v142 == (v142 & 0xFFFFFFFFFFFFFFF8)) {
                goto LABEL_192;
              }
              v259 += v252;
              v257 += v252;
              unint64_t v262 = v142 & 0xFFFFFFFFFFFFFFF8;
            }
            else
            {
              unint64_t v262 = 0;
            }
            unint64_t v263 = v142 - v262;
            do
            {
              unsigned int v264 = *(unsigned __int16 *)v257;
              v257 += 2;
              float v265 = (float)v264;
              unsigned int v266 = *(unsigned __int16 *)v258;
              v258 += 2;
              *(_WORD *)int8x16_t v259 = (int)(float)((float)v266 + (float)((float)(v265 - (float)v266) * *(float *)&a4));
              v259 += 2;
              --v263;
            }
            while (v263);
LABEL_192:
            ++v251;
            float32x4_t v256 = (uint16x8_t *)((char *)v256 + v134);
            uint64_t v255 = (uint16x8_t *)((char *)v255 + v135);
            float v254 = (int16x8_t *)((char *)v254 + v136);
            if (v251 == v133) {
              goto LABEL_185;
            }
          }
        }
LABEL_134:
        size_t v169 = CVPixelBufferGetWidth(this);
        size_t v170 = CVPixelBufferGetHeight(this);
        CVPixelBufferLockBaseAddress(v15, 0);
        CVPixelBufferLockBaseAddress(this, 1uLL);
        CVPixelBufferLockBaseAddress(a2, 1uLL);
        size_t v171 = CVPixelBufferGetBytesPerRow(this);
        size_t v172 = CVPixelBufferGetBytesPerRow(a2);
        size_t v173 = CVPixelBufferGetBytesPerRow(v15);
        float32x2_t v174 = (float16x8_t *)CVPixelBufferGetBaseAddress(this);
        char v175 = (float16x8_t *)CVPixelBufferGetBaseAddress(a2);
        pixelBuffer = v15;
        long long v176 = (float16x8_t *)CVPixelBufferGetBaseAddress(v15);
        long long v177 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
        uint64_t v178 = PixelBufferUtils::componentsPerPixelForPixelFormat(v177, 0);
        unint64_t v179 = v178 * v169;
        if (v170) {
          BOOL v180 = v179 == 0;
        }
        else {
          BOOL v180 = 1;
        }
        char v181 = v180;
        if (v279)
        {
          if ((v181 & 1) == 0)
          {
            uint64_t v182 = 0;
            do
            {
              float v183 = &v174->i8[v182 * v171];
              float v184 = &v175->i8[v182 * v172];
              size_t v185 = v178 * v169;
              unint64_t v186 = &v176->i8[v182 * v173];
              do
              {
                __asm { FCMP            H0, #0 }
                if (_ZF)
                {
                  _H0 = *(_WORD *)v183;
                }
                else
                {
                  __asm { FCVT            S0, H0 }
                  _H1 = *(_WORD *)v183;
                  __asm { FCVT            S1, H1 }
                  _S0 = _S0 + (float)((float)(_S1 - _S0) * *(float *)&a4);
                  __asm { FCVT            H0, S0 }
                }
                *(_WORD *)unint64_t v186 = _H0;
                v186 += 2;
                v183 += 2;
                v184 += 2;
                --v185;
              }
              while (v185);
              ++v182;
            }
            while (v182 != v170);
          }
          goto LABEL_150;
        }
        if (v181)
        {
LABEL_150:
          uint64_t v20 = 1;
          CVPixelBufferUnlockBaseAddress(this, 1uLL);
          CVPixelBufferUnlockBaseAddress(a2, 1uLL);
          uint64_t v195 = pixelBuffer;
LABEL_151:
          CVPixelBufferUnlockBaseAddress(v195, 0);
          return v20;
        }
        uint64_t v220 = 0;
        unint64_t v221 = 2 * (v179 & 0xFFFFFFFFFFFFFFF8);
        float32x4_t v222 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
        float32x4_t v223 = v176;
        float32x4_t v224 = v175;
        float32x2_t v225 = v174;
        while (1)
        {
          float32x2_t v226 = &v174->i8[v220 * v171];
          float32x2_t v227 = &v175->i8[v220 * v172];
          float32x4_t v228 = &v176->i8[v220 * v173];
          if (v179 >= 8
            && ((float32x2_t v229 = &v176->i8[v220 * v173], (unint64_t)(v229 - &v174->i8[v220 * v171]) >= 0x10)
              ? (BOOL v230 = (unint64_t)(v229 - &v175->i8[v220 * v172]) >= 0x10)
              : (BOOL v230 = 0),
                v230))
          {
            v227 += v221;
            float32x4_t v240 = v223;
            float32x4_t v241 = v224;
            uint64_t v242 = v225;
            unint64_t v243 = v179 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              float16x8_t v244 = *v242++;
              float16x4_t v245 = *(float16x4_t *)v244.i8;
              float32x4_t v246 = vcvt_hight_f32_f16(v244);
              float16x8_t v247 = *v241++;
              float32x4_t v248 = vcvt_hight_f32_f16(v247);
              float32x4_t v249 = vcvtq_f32_f16(*(float16x4_t *)v247.i8);
              *v240++ = vcvt_hight_f16_f32((int16x4_t)vcvt_f16_f32(vmlaq_f32(v249, v222, vsubq_f32(vcvtq_f32_f16(v245), v249))), vmlaq_f32(v248, v222, vsubq_f32(v246, v248)));
              v243 -= 8;
            }
            while (v243);
            if (v179 == (v179 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_170;
            }
            v228 += v221;
            v226 += v221;
            unint64_t v231 = v179 & 0xFFFFFFFFFFFFFFF8;
          }
          else
          {
            unint64_t v231 = 0;
          }
          unint64_t v232 = v179 - v231;
          do
          {
            __int16 v233 = *(_WORD *)v226;
            v226 += 2;
            _H1 = v233;
            __asm { FCVT            S1, H1 }
            __int16 v236 = *(_WORD *)v227;
            v227 += 2;
            _H2 = v236;
            __asm { FCVT            S2, H2 }
            _S1 = _S2 + (float)((float)(_S1 - _S2) * *(float *)&a4);
            __asm { FCVT            H1, S1 }
            *(_WORD *)float32x4_t v228 = LOWORD(_S1);
            v228 += 2;
            --v232;
          }
          while (v232);
LABEL_170:
          ++v220;
          float32x2_t v225 = (float16x8_t *)((char *)v225 + v171);
          float32x4_t v224 = (float16x8_t *)((char *)v224 + v172);
          float32x4_t v223 = (float16x8_t *)((char *)v223 + v173);
          if (v220 == v170) {
            goto LABEL_150;
          }
        }
      }
      if (PixelFormatType == 1380401729) {
        goto LABEL_60;
      }
      int v21 = 1380410945;
    }
    else if ((int)PixelFormatType <= 1751410031)
    {
      if (PixelFormatType == 1717855600) {
        goto LABEL_34;
      }
      int v21 = 1717856627;
    }
    else
    {
      if (PixelFormatType == 1751410032 || PixelFormatType == 1751411059) {
        goto LABEL_134;
      }
      int v21 = 1919365990;
    }
    if (PixelFormatType != v21) {
      goto LABEL_186;
    }
LABEL_34:
    size_t v24 = CVPixelBufferGetWidth(this);
    size_t v25 = CVPixelBufferGetHeight(this);
    CVPixelBufferLockBaseAddress(v15, 0);
    CVPixelBufferLockBaseAddress(this, 1uLL);
    CVPixelBufferLockBaseAddress(a2, 1uLL);
    size_t v26 = CVPixelBufferGetBytesPerRow(this);
    size_t v27 = CVPixelBufferGetBytesPerRow(a2);
    size_t v28 = CVPixelBufferGetBytesPerRow(v15);
    char v29 = (int8x16_t *)CVPixelBufferGetBaseAddress(this);
    uint64_t v30 = (float32x4_t *)CVPixelBufferGetBaseAddress(a2);
    pixelBuffer = v15;
    char v31 = (int8x16_t *)CVPixelBufferGetBaseAddress(v15);
    long long v32 = (PixelBufferUtils *)CVPixelBufferGetPixelFormatType(this);
    unint64_t v33 = PixelBufferUtils::componentsPerPixelForPixelFormat(v32, 0) * v24;
    if (v25) {
      _ZF = v33 == 0;
    }
    else {
      _ZF = 1;
    }
    char v35 = _ZF;
    if (v279)
    {
      if (v35)
      {
LABEL_42:
        uint64_t v20 = 1;
        CVPixelBufferUnlockBaseAddress(this, 1uLL);
        CVPixelBufferUnlockBaseAddress(a2, 1uLL);
        CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
        return v20;
      }
      uint64_t v197 = 0;
      unint64_t v198 = 4 * (v33 & 0xFFFFFFFFFFFFFFF8);
      float32x4_t v199 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
      float32x4_t v200 = v31 + 1;
      unsigned int v201 = v29 + 1;
      float64x2_t v202 = v30 + 1;
      while (1)
      {
        uint64_t v203 = (float *)((char *)v29->i32 + v197 * v26);
        int8x16_t v204 = (float *)((char *)v30->f32 + v197 * v27);
        size_t v205 = v197 * v28;
        float32x2_t v206 = (float *)((char *)v31->i32 + v197 * v28);
        if (v33 < 8) {
          break;
        }
        unint64_t v207 = 0;
        if ((unint64_t)(&v31->i8[v205] - ((char *)v30 + v197 * v27)) < 0x20
          || (unint64_t)(&v31->i8[v205] - &v29->i8[v197 * v26]) < 0x20)
        {
          goto LABEL_157;
        }
        int8x16_t v204 = (float *)((char *)v204 + v198);
        int32x4_t v215 = v202;
        int32x4_t v216 = v201;
        unint64_t v217 = v200;
        unint64_t v218 = v33 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          int8x16_t v219 = vbslq_s8((int8x16_t)vceqzq_f32(*v215), *v216, (int8x16_t)vmlaq_f32(*v215, v199, vsubq_f32(*(float32x4_t *)v216, *v215)));
          v217[-1] = vbslq_s8((int8x16_t)vceqzq_f32(v215[-1]), v216[-1], (int8x16_t)vmlaq_f32(v215[-1], v199, vsubq_f32((float32x4_t)v216[-1], v215[-1])));
          *unint64_t v217 = v219;
          v217 += 2;
          v216 += 2;
          v215 += 2;
          v218 -= 8;
        }
        while (v218);
        if (v33 != (v33 & 0xFFFFFFFFFFFFFFF8))
        {
          float32x2_t v206 = (float *)((char *)v206 + v198);
          uint64_t v203 = (float *)((char *)v203 + v198);
          unint64_t v207 = v33 & 0xFFFFFFFFFFFFFFF8;
LABEL_157:
          unint64_t v208 = v33 - v207;
          do
          {
            float v209 = *v204++;
            float v210 = v209;
            float v211 = *v203++;
            float v212 = v211;
            float v213 = v210 + (float)((float)(v211 - v210) * *(float *)&a4);
            if (v210 == 0.0) {
              float v214 = v212;
            }
            else {
              float v214 = v213;
            }
            *v206++ = v214;
            --v208;
          }
          while (v208);
        }
        ++v197;
        float32x4_t v200 = (int8x16_t *)((char *)v200 + v28);
        unsigned int v201 = (int8x16_t *)((char *)v201 + v26);
        float64x2_t v202 = (float32x4_t *)((char *)v202 + v27);
        if (v197 == v25) {
          goto LABEL_42;
        }
      }
      unint64_t v207 = 0;
      goto LABEL_157;
    }
    if (v35) {
      goto LABEL_150;
    }
    uint64_t v36 = 0;
    unint64_t v37 = 4 * (v33 & 0xFFFFFFFFFFFFFFF8);
    float32x4_t v38 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0);
    float v39 = (float32x4_t *)&v31[1];
    uint64_t v40 = (float32x4_t *)&v29[1];
    std::string::size_type v41 = v30 + 1;
    while (1)
    {
      float v42 = (float *)((char *)v29->i32 + v36 * v26);
      float v43 = (float *)((char *)v30->f32 + v36 * v27);
      size_t v44 = v36 * v28;
      unint64_t v45 = (float *)((char *)v31->i32 + v36 * v28);
      if (v33 >= 8)
      {
        unint64_t v46 = 0;
        if ((unint64_t)(&v31->i8[v44] - &v29->i8[v36 * v26]) >= 0x20
          && (unint64_t)(&v31->i8[v44] - ((char *)v30 + v36 * v27)) >= 0x20)
        {
          float v43 = (float *)((char *)v43 + v37);
          float v51 = v41;
          unsigned int v52 = v40;
          unsigned int v53 = v39;
          unint64_t v54 = v33 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v55 = vmlaq_f32(*v51, v38, vsubq_f32(*v52, *v51));
            v53[-1] = vmlaq_f32(v51[-1], v38, vsubq_f32(v52[-1], v51[-1]));
            *unsigned int v53 = v55;
            v53 += 2;
            v52 += 2;
            v51 += 2;
            v54 -= 8;
          }
          while (v54);
          if (v33 == (v33 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_45;
          }
          unint64_t v45 = (float *)((char *)v45 + v37);
          float v42 = (float *)((char *)v42 + v37);
          unint64_t v46 = v33 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      else
      {
        unint64_t v46 = 0;
      }
      unint64_t v47 = v33 - v46;
      do
      {
        float v48 = *v42++;
        float v49 = v48;
        float v50 = *v43++;
        *v45++ = v50 + (float)((float)(v49 - v50) * *(float *)&a4);
        --v47;
      }
      while (v47);
LABEL_45:
      ++v36;
      float v39 = (float32x4_t *)((char *)v39 + v28);
      uint64_t v40 = (float32x4_t *)((char *)v40 + v26);
      std::string::size_type v41 = (float32x4_t *)((char *)v41 + v27);
      if (v36 == v25) {
        goto LABEL_150;
      }
    }
  }
  NSLog(&cfstr_SDErrorCannotA.isa, "alphaBlend", 3752);
  return 0;
}

void sub_2590D6C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void PixelBufferUtils::colorizePointCloudOnPixelBuffer(CVPixelBufferRef pixelBuffer, __CVBuffer *a2, unint64_t a3, const CGPoint *a4, const float *a5, float a6, float a7, float a8)
{
  if (a8 <= 0.0)
  {
    CVPixelBufferGetWidth(pixelBuffer);
    CVPixelBufferGetHeight(pixelBuffer);
  }
  operator new[]();
}

void sub_2590D6F7C(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
  MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  MEMORY[0x25A2D62A0](v1, 0x1000C8052888210);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtils::addCirclesToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, float a3, uint64_t a4, const CGPoint *a5, const float *a6, const float *a7, const float *a8, const float *a9)
{
  if (!this || !a4 || (v10 = a5) == 0 || (v11 = a6) == 0 || (OSType v12 = a7) == 0 || (v13 = a8) == 0)
  {
    NSLog(&cfstr_SDErrorCannotA_2.isa, a2, a4, a5, a6, a7, a8, a9, "addCirclesToPixelBuffer", 3885);
    return 0;
  }
  size_t v14 = a2;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  size_t v18 = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  if (PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v39 >= 0) {
      char v35 = __p;
    }
    else {
      char v35 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "addCirclesToPixelBuffer", 3895, PixelFormatType, v35);
    if (v39 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  size_t v20 = Height;
  size_t widtha = v18;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  size_t v24 = widtha;
  double width = DeviceRGB;
  size_t v25 = CGBitmapContextCreate(BaseAddress, v24, v20, 8uLL, BytesPerRow, DeviceRGB, 0x2002u);
  if (v14)
  {
    size_t v26 = (double *)(a4 + 8);
    do
    {
      float v27 = *(v26 - 1);
      double v28 = *v26;
      v26 += 2;
      float v29 = (double)v20 - v28;
      LODWORD(v28) = LODWORD(v10->x);
      float v10 = (const CGPoint *)((char *)v10 + 4);
      CGFloat v30 = *(float *)&v28;
      *(float *)&double v28 = *v11++;
      CGFloat v31 = *(float *)&v28;
      *(float *)&double v28 = *v12++;
      CGFloat v32 = *(float *)&v28;
      *(float *)&double v28 = *v13++;
      GenericRGB = CGColorCreateGenericRGB(v30, v31, v32, *(float *)&v28);
      CGContextSetFillColorWithColor(v25, GenericRGB);
      v40.origin.double x = (float)(v27 - a3);
      v40.origin.double y = (float)(v29 - a3);
      v40.size.double width = (float)(a3 + a3);
      v40.size.double height = v40.size.width;
      CGContextFillEllipseInRect(v25, v40);
      CFRelease(GenericRGB);
      size_t v14 = (__CVBuffer *)((char *)v14 - 1);
    }
    while (v14);
  }
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(width);
  CGContextRelease(v25);
  return 1;
}

void sub_2590D723C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t PixelBufferUtils::createColorizedPointCloud(PixelBufferUtils *this, unint64_t a2, const CGPoint *a3, const float *a4, size_t a5, const float *a6, float a7, float a8, float a9)
{
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  CVReturn v21 = CVPixelBufferCreate(v18, (size_t)a4, a5, 0x42475241u, BufferAttributes, &pixelBufferOut);
  uint64_t result = 0;
  int v23 = pixelBufferOut;
  if (v21) {
    BOOL v24 = 1;
  }
  else {
    BOOL v24 = pixelBufferOut == 0;
  }
  if (!v24)
  {
    PixelBufferUtils::blacken(pixelBufferOut, v20);
    PixelBufferUtils::colorizePointCloudOnPixelBuffer(v23, this, a2, a3, a6, a7, a8, a9);
  }
  return result;
}

__CVBuffer *PixelBufferUtils::createPixelBufferCopy(PixelBufferUtils *this, __CVBuffer *a2)
{
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  size_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v6, Width, Height, PixelFormatType, BufferAttributes, &pixelBufferOut)) {
    float v8 = 0;
  }
  else {
    float v8 = pixelBufferOut;
  }
  OSType v9 = CVPixelBufferGetPixelFormatType(this);
  if (v9 != CVPixelBufferGetPixelFormatType(v8)
    || copyPixelBufferVImage(v8, *MEMORY[0x263F00148], this, *MEMORY[0x263F001A8]))
  {
    CVPixelBufferRelease(v8);
    return 0;
  }
  return v8;
}

CVPixelBufferRef PixelBufferUtils::asPixelBuffer(unint64_t this, size_t a2, PixelBufferUtils *a3, char *a4, void *a5)
{
  planeWidth[3] = *MEMORY[0x263EF8340];
  if (PixelBufferUtils::planeCountForPixelFormat(a3))
  {
    CVPixelBufferRef v27 = 0;
    uint64_t v9 = PixelBufferUtils::planeCountForPixelFormat(a3);
    if ((unint64_t)(v9 - 4) > 0xFFFFFFFFFFFFFFFCLL)
    {
      size_t v12 = v9;
      planeWidth[1] = this;
      planeWidth[2] = this;
      planeHeight[1] = a2;
      planeHeight[2] = a2;
      v29[1] = this;
      v29[2] = this;
      planeBaseAddress[1] = 0;
      planeBaseAddress[2] = 0;
      planeBaseAddress[0] = a4;
      unint64_t v13 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a3, 0);
      unint64_t v14 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a3, 0);
      unint64_t v15 = PixelBufferUtils::pixelSizeForPixelFormat(a3, 0) / v13 * this;
      v29[0] = v15;
      size_t v26 = a2;
      planeWidth[0] = this / v13;
      size_t v16 = a2 / v14;
      planeHeight[0] = a2 / v14;
      if (v12 != 1)
      {
        uint64_t v17 = 1;
        do
        {
          unint64_t v18 = PixelBufferUtils::horizontalSubsamplingForPixelFormat(a3, v17);
          size_t v19 = v12;
          unint64_t v20 = PixelBufferUtils::verticalSubsamplingForPixelFormat(a3, v17);
          unint64_t v21 = PixelBufferUtils::pixelSizeForPixelFormat(a3, v17);
          uint64_t v22 = v17;
          size_t v23 = v29[v17] * (v21 / v18);
          v29[v22] = v23;
          planeWidth[v22] = planeWidth[v17] / v18;
          a4 += v16 * v15;
          size_t v16 = planeHeight[v17] / v20;
          size_t v12 = v19;
          planeHeight[v22] = v16;
          planeBaseAddress[v22] = a4;
          ++v17;
          unint64_t v15 = v23;
        }
        while (v19 != v17);
      }
      CFAllocatorRef v24 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      CVPixelBufferCreateWithPlanarBytes(v24, this, v26, (OSType)a3, 0, 0, v12, planeBaseAddress, planeWidth, planeHeight, v29, 0, 0, BufferAttributes, &v27);
      return v27;
    }
    else
    {
      NSLog(&cfstr_SDErrorOnlyUpT.isa, "asPixelBufferMultiPlane", 3270);
      return 0;
    }
  }
  else
  {
    planeWidth[0] = 0;
    unint64_t v11 = PixelBufferUtils::pixelSizeForPixelFormat(a3, 0);
    CVPixelBufferCreateWithBytes((CFAllocatorRef)*MEMORY[0x263EFFB08], this, a2, (OSType)a3, a4, v11 * this, 0, 0, 0, (CVPixelBufferRef *)planeWidth);
    return (CVPixelBufferRef)planeWidth[0];
  }
}

void PixelBufferUtils::inPlaceColorScaling(PixelBufferUtils *this, __CVBuffer *a2, float a3, float a4, int a5)
{
  char v6 = (char)a2;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  unint64_t v11 = PixelFormatType;
  if ((int)PixelFormatType <= 1380401728)
  {
    if ((int)PixelFormatType <= 875704437)
    {
      if ((int)PixelFormatType > 825437746)
      {
        if (PixelFormatType != 825437747)
        {
          if (PixelFormatType != 843264104)
          {
            if (PixelFormatType != 875704422) {
              goto LABEL_87;
            }
            goto LABEL_79;
          }
          goto LABEL_67;
        }
        goto LABEL_25;
      }
      if (PixelFormatType != 32)
      {
        int v13 = 825306677;
LABEL_24:
        if (PixelFormatType == v13)
        {
LABEL_25:
          char v48 = v6;
          CVPixelBufferLockBaseAddress(this, 0);
          OSType v49 = CVPixelBufferGetPixelFormatType(this);
          size_t PlaneCount = CVPixelBufferGetPlaneCount(this);
          size_t v15 = PlaneCount;
          size_t v16 = 0;
          unsigned int v17 = 0;
          if (PlaneCount <= 1) {
            unint64_t v18 = 1;
          }
          else {
            unint64_t v18 = PlaneCount;
          }
          while (1)
          {
            if (v15)
            {
              BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(this, v16);
              size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(this, v16);
              size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(this, v16);
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(this, v16);
              if (BaseAddressOfPlane) {
                goto LABEL_34;
              }
              uint64_t v19 = 177;
            }
            else
            {
              BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(this);
              size_t HeightOfPlane = CVPixelBufferGetHeight(this);
              size_t WidthOfPlane = CVPixelBufferGetWidth(this);
              size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(this);
              size_t v16 = 0;
              if (BaseAddressOfPlane)
              {
LABEL_34:
                size_t v24 = BytesPerRowOfPlane;
                unint64_t v25 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)v49, v16);
                if (HeightOfPlane)
                {
                  unint64_t v27 = v25 * WidthOfPlane;
                  if (v25 * WidthOfPlane)
                  {
                    if (v48)
                    {
                      for (uint64_t i = 0; i != HeightOfPlane; ++i)
                      {
                        unint64_t v29 = 0;
                        do
                        {
                          if (v29 % v25 != 0x7FFFFFFF)
                          {
                            LOWORD(v26) = *(_WORD *)&BaseAddressOfPlane[2 * v29];
                            float v26 = a4 + (float)((float)LODWORD(v26) * a3);
                            *(_WORD *)&BaseAddressOfPlane[2 * v29] = (int)v26;
                          }
                          ++v29;
                        }
                        while (v27 != v29);
                        BaseAddressOfPlane += v24;
                      }
                    }
                    else
                    {
                      for (uint64_t j = 0; j != HeightOfPlane; ++j)
                      {
                        unint64_t v31 = 0;
                        do
                        {
                          if (v31 % v25 != 0x7FFFFFFF)
                          {
                            LOWORD(v26) = *(_WORD *)&BaseAddressOfPlane[2 * v31];
                            float v26 = (float)((float)LODWORD(v26) + a4) * a3;
                            *(_WORD *)&BaseAddressOfPlane[2 * v31] = (int)v26;
                          }
                          ++v31;
                        }
                        while (v27 != v31);
                        BaseAddressOfPlane += v24;
                      }
                    }
                  }
                }
                goto LABEL_29;
              }
              uint64_t v19 = 195;
            }
            NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", v19);
            PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)v49, v16);
LABEL_29:
            size_t v16 = ++v17;
            if (v18 <= v17)
            {
              CVPixelBufferUnlockBaseAddress(this, 0);
              return;
            }
          }
        }
LABEL_87:
        PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)v50);
        if (v51 >= 0) {
          unint64_t v47 = v50;
        }
        else {
          unint64_t v47 = (void **)v50[0];
        }
        NSLog(&cfstr_SDErrorPixelFo.isa, "inPlaceColorScaling", 3518, v11, v47);
        if (v51 < 0) {
          operator delete(v50[0]);
        }
        return;
      }
      goto LABEL_61;
    }
    if ((int)PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 875704438)
      {
LABEL_79:
        float v43 = this;
        float v44 = a3;
        float v45 = a4;
        char v46 = v6;
        int v37 = 0x7FFFFFFF;
        goto LABEL_80;
      }
      if (PixelFormatType != 1094862674) {
        goto LABEL_87;
      }
LABEL_61:
      if (a5) {
        int v37 = 0x7FFFFFFF;
      }
      else {
        int v37 = 0;
      }
LABEL_78:
      float v43 = this;
      float v44 = a3;
      float v45 = a4;
      char v46 = v6;
LABEL_80:
      scaleColorsRawInPlace<unsigned char>(v43, v46, v37, v44, v45);
      return;
    }
    if (PixelFormatType != 1111970369)
    {
      if (PixelFormatType != 1278226534)
      {
        int v12 = 1278226536;
        goto LABEL_66;
      }
      goto LABEL_71;
    }
    goto LABEL_75;
  }
  if ((int)PixelFormatType > 1717856626)
  {
    if ((int)PixelFormatType <= 1751411058)
    {
      if (PixelFormatType != 1717856627)
      {
        int v12 = 1751410032;
LABEL_66:
        if (PixelFormatType != v12) {
          goto LABEL_87;
        }
LABEL_67:
        float32x4_t v38 = this;
        float v39 = a3;
        float v40 = a4;
        char v41 = v6;
        int v42 = 0x7FFFFFFF;
LABEL_68:
        scaleColorsRawInPlace<half>(v38, v41, v42, v39, v40);
        return;
      }
    }
    else
    {
      if (PixelFormatType == 1751411059) {
        goto LABEL_67;
      }
      if (PixelFormatType != 1919365990)
      {
        int v13 = 1932996149;
        goto LABEL_24;
      }
    }
    goto LABEL_71;
  }
  if ((int)PixelFormatType > 1380411456)
  {
    if (PixelFormatType == 1380411457)
    {
      if (a5) {
        int v42 = 0x7FFFFFFF;
      }
      else {
        int v42 = 3;
      }
      float32x4_t v38 = this;
      float v39 = a3;
      float v40 = a4;
      char v41 = v6;
      goto LABEL_68;
    }
    if (PixelFormatType == 1647392359) {
      goto LABEL_25;
    }
    if (PixelFormatType != 1717855600) {
      goto LABEL_87;
    }
LABEL_71:
    unint64_t v33 = this;
    float v34 = a3;
    float v35 = a4;
    char v36 = v6;
    int v32 = 0x7FFFFFFF;
    goto LABEL_72;
  }
  if (PixelFormatType == 1380401729)
  {
LABEL_75:
    if (a5) {
      int v37 = 0x7FFFFFFF;
    }
    else {
      int v37 = 3;
    }
    goto LABEL_78;
  }
  if (PixelFormatType != 1380410945) {
    goto LABEL_87;
  }
  if (a5) {
    int v32 = 0x7FFFFFFF;
  }
  else {
    int v32 = 3;
  }
  unint64_t v33 = this;
  float v34 = a3;
  float v35 = a4;
  char v36 = v6;
LABEL_72:
  scaleColorsRawInPlace<float>(v33, v36, v32, v34, v35);
}

void sub_2590D7C5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t scaleColorsRawInPlace<float>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v10 = PlaneCount;
  size_t v11 = 0;
  unsigned int v12 = 0;
  if (PlaneCount <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = PlaneCount;
  }
  do
  {
    if (v10)
    {
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddressOfPlane(a1, v11);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v11);
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v11);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v11);
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 177;
LABEL_5:
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", v14);
        PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
        goto LABEL_6;
      }
    }
    else
    {
      BaseAddressOfPlane = (float *)CVPixelBufferGetBaseAddress(a1);
      size_t HeightOfPlane = CVPixelBufferGetHeight(a1);
      size_t WidthOfPlane = CVPixelBufferGetWidth(a1);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      size_t v11 = 0;
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 195;
        goto LABEL_5;
      }
    }
    size_t v19 = BytesPerRowOfPlane;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (HeightOfPlane)
    {
      unint64_t v21 = v20 * WidthOfPlane;
      if (v20 * WidthOfPlane)
      {
        if (a2)
        {
          for (uint64_t i = 0; i != HeightOfPlane; ++i)
          {
            unint64_t v23 = 0;
            do
            {
              if (v23 % v20 != a3) {
                BaseAddressOfPlane[v23] = a5 + (float)(BaseAddressOfPlane[v23] * a4);
              }
              ++v23;
            }
            while (v21 != v23);
            BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v19);
          }
        }
        else
        {
          for (uint64_t j = 0; j != HeightOfPlane; ++j)
          {
            unint64_t v25 = 0;
            do
            {
              if (v25 % v20 != a3) {
                BaseAddressOfPlane[v25] = (float)(BaseAddressOfPlane[v25] + a5) * a4;
              }
              ++v25;
            }
            while (v21 != v25);
            BaseAddressOfPlane = (float *)((char *)BaseAddressOfPlane + v19);
          }
        }
      }
    }
LABEL_6:
    size_t v11 = ++v12;
  }
  while (v13 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t scaleColorsRawInPlace<half>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v10 = PlaneCount;
  size_t v11 = 0;
  unsigned int v12 = 0;
  if (PlaneCount <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = PlaneCount;
  }
  do
  {
    if (v10)
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddressOfPlane(a1, v11);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v11);
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v11);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v11);
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 177;
LABEL_5:
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", v14);
        PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
        goto LABEL_6;
      }
    }
    else
    {
      BaseAddressOfPlane = (char *)CVPixelBufferGetBaseAddress(a1);
      size_t HeightOfPlane = CVPixelBufferGetHeight(a1);
      size_t WidthOfPlane = CVPixelBufferGetWidth(a1);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      size_t v11 = 0;
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 195;
        goto LABEL_5;
      }
    }
    size_t v19 = BytesPerRowOfPlane;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (HeightOfPlane)
    {
      unint64_t v21 = v20 * WidthOfPlane;
      if (v20 * WidthOfPlane)
      {
        if (a2)
        {
          for (uint64_t i = 0; i != HeightOfPlane; ++i)
          {
            unint64_t v23 = 0;
            do
            {
              if (v23 % v20 != a3)
              {
                _H0 = *(_WORD *)&BaseAddressOfPlane[2 * v23];
                __asm { FCVT            S0, H0 }
                _S0 = a5 + (float)(_S0 * a4);
                __asm { FCVT            H0, S0 }
                *(_WORD *)&BaseAddressOfPlane[2 * v23] = LOWORD(_S0);
              }
              ++v23;
            }
            while (v21 != v23);
            BaseAddressOfPlane += v19;
          }
        }
        else
        {
          for (uint64_t j = 0; j != HeightOfPlane; ++j)
          {
            unint64_t v32 = 0;
            do
            {
              if (v32 % v20 != a3)
              {
                _H0 = *(_WORD *)&BaseAddressOfPlane[2 * v32];
                __asm { FCVT            S0, H0 }
                _S0 = (float)(_S0 + a5) * a4;
                __asm { FCVT            H0, S0 }
                *(_WORD *)&BaseAddressOfPlane[2 * v32] = LOWORD(_S0);
              }
              ++v32;
            }
            while (v21 != v32);
            BaseAddressOfPlane += v19;
          }
        }
      }
    }
LABEL_6:
    size_t v11 = ++v12;
  }
  while (v13 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t scaleColorsRawInPlace<unsigned char>(__CVBuffer *a1, char a2, int a3, float a4, float a5)
{
  CVPixelBufferLockBaseAddress(a1, 0);
  OSType PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  size_t PlaneCount = CVPixelBufferGetPlaneCount(a1);
  size_t v10 = PlaneCount;
  size_t v11 = 0;
  unsigned int v12 = 0;
  if (PlaneCount <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = PlaneCount;
  }
  do
  {
    if (v10)
    {
      BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(a1, v11);
      size_t HeightOfPlane = CVPixelBufferGetHeightOfPlane(a1, v11);
      size_t WidthOfPlane = CVPixelBufferGetWidthOfPlane(a1, v11);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRowOfPlane(a1, v11);
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 177;
LABEL_5:
        NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", v14);
        PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
        goto LABEL_6;
      }
    }
    else
    {
      BaseAddressOfPlane = CVPixelBufferGetBaseAddress(a1);
      size_t HeightOfPlane = CVPixelBufferGetHeight(a1);
      size_t WidthOfPlane = CVPixelBufferGetWidth(a1);
      size_t BytesPerRowOfPlane = CVPixelBufferGetBytesPerRow(a1);
      size_t v11 = 0;
      if (!BaseAddressOfPlane)
      {
        uint64_t v14 = 195;
        goto LABEL_5;
      }
    }
    size_t v19 = BytesPerRowOfPlane;
    unint64_t v20 = PixelBufferUtils::componentsPerPixelForPixelFormat((PixelBufferUtils *)PixelFormatType, v11);
    if (HeightOfPlane)
    {
      unint64_t v22 = v20 * WidthOfPlane;
      if (v20 * WidthOfPlane)
      {
        if (a2)
        {
          for (uint64_t i = 0; i != HeightOfPlane; ++i)
          {
            unint64_t v24 = 0;
            do
            {
              if (v24 % v20 != a3)
              {
                LOBYTE(v21) = BaseAddressOfPlane[v24];
                float v21 = a5 + (float)((float)LODWORD(v21) * a4);
                BaseAddressOfPlane[v24] = (int)v21;
              }
              ++v24;
            }
            while (v22 != v24);
            BaseAddressOfPlane += v19;
          }
        }
        else
        {
          for (uint64_t j = 0; j != HeightOfPlane; ++j)
          {
            unint64_t v26 = 0;
            do
            {
              if (v26 % v20 != a3)
              {
                LOBYTE(v21) = BaseAddressOfPlane[v26];
                float v21 = (float)((float)LODWORD(v21) + a5) * a4;
                BaseAddressOfPlane[v26] = (int)v21;
              }
              ++v26;
            }
            while (v22 != v26);
            BaseAddressOfPlane += v19;
          }
        }
      }
    }
LABEL_6:
    size_t v11 = ++v12;
  }
  while (v13 > v12);
  return CVPixelBufferUnlockBaseAddress(a1, 0);
}

uint64_t PixelBufferUtils::rotationAngleAndMirroringFromExifOrientation(PixelBufferUtils *this, char *a2, BOOL *a3)
{
  switch((int)this)
  {
    case 2:
      uint64_t result = 0;
      char v4 = 1;
      break;
    case 3:
      char v4 = 0;
      uint64_t result = 180;
      break;
    case 4:
      char v4 = 1;
      uint64_t result = 180;
      break;
    case 5:
      char v4 = 1;
      goto LABEL_10;
    case 6:
      char v4 = 0;
      uint64_t result = 90;
      break;
    case 7:
      char v4 = 1;
      uint64_t result = 90;
      break;
    case 8:
      char v4 = 0;
LABEL_10:
      uint64_t result = 270;
      break;
    default:
      uint64_t result = 0;
      char v4 = 0;
      break;
  }
  if (a2) {
    *a2 = v4;
  }
  return result;
}

uint64_t PixelBufferUtils::rotationBetweenOrientations(PixelBufferUtils *this, CGImagePropertyOrientation a2, CGImagePropertyOrientation a3)
{
  switch((int)this)
  {
    case 2:
      int v3 = 0;
      int v4 = 1;
      break;
    case 3:
      int v4 = 0;
      int v3 = -180;
      break;
    case 4:
      int v4 = 1;
      int v3 = -180;
      break;
    case 5:
      int v4 = 1;
      goto LABEL_10;
    case 6:
      int v4 = 0;
      int v3 = -90;
      break;
    case 7:
      int v4 = 1;
      int v3 = -90;
      break;
    case 8:
      int v4 = 0;
LABEL_10:
      int v3 = -270;
      break;
    default:
      int v3 = 0;
      int v4 = 0;
      break;
  }
  int v5 = 0;
  switch(a2)
  {
    case kCGImagePropertyOrientationUpMirrored:
      goto LABEL_17;
    case kCGImagePropertyOrientationDown:
      int v5 = 180;
      if ((v4 & 1) == 0) {
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationDownMirrored:
      int v5 = 180;
      if (v4) {
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeftMirrored:
      int v5 = 270;
LABEL_17:
      if (v4) {
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationRight:
      int v5 = 90;
      goto LABEL_20;
    case kCGImagePropertyOrientationRightMirrored:
      int v5 = 90;
      if (v4) {
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    case kCGImagePropertyOrientationLeft:
      int v5 = 270;
      if ((v4 & 1) == 0) {
        goto LABEL_25;
      }
      return 0xFFFFFFFFLL;
    default:
LABEL_20:
      if (v4) {
        return 0xFFFFFFFFLL;
      }
LABEL_25:
      unsigned int v7 = v5 + v3;
      unsigned int v8 = v5 + v3 + 360;
      if (v7 <= 0xFFFFFE97) {
        uint64_t result = v7;
      }
      else {
        uint64_t result = v8;
      }
      if ((int)result > 179)
      {
        if (result == 180)
        {
          return 2;
        }
        else
        {
          if (result != 270) {
            return 0xFFFFFFFFLL;
          }
          return 1;
        }
      }
      else if (result)
      {
        if (result == 90) {
          return 3;
        }
        return 0xFFFFFFFFLL;
      }
      return result;
  }
}

__CVBuffer *PixelBufferUtils::savePlyFromDepthBuffer(__CVBuffer *this, __CVBuffer *a2, const char *a3, float a4, CGPoint a5, float a6, float a7, float a8)
{
  if (this)
  {
    unsigned int v8 = this;
    CVPixelBufferGetWidth(this);
    CVPixelBufferGetHeight(v8);
    CVPixelBufferLockBaseAddress(v8, 1uLL);
    CVPixelBufferGetBytesPerRow(v8);
    CVPixelBufferGetBaseAddress(v8);
    operator new[]();
  }
  return this;
}

uint64_t PixelBufferUtils::addTextToPixelBuffer(PixelBufferUtils *this, __CVBuffer *a2, const char *a3, CGPoint a4)
{
  v36[3] = *MEMORY[0x263EF8340];
  if (!this || !a2)
  {
    NSLog(&cfstr_SDErrorCannotA_0.isa, a2, a3, a4.x, a4.y, "addTextToPixelBuffer", 3816);
    return 0;
  }
  double y = a4.y;
  double x = a4.x;
  unint64_t PixelFormatType = CVPixelBufferGetPixelFormatType(this);
  unint64_t Width = CVPixelBufferGetWidth(this);
  size_t Height = CVPixelBufferGetHeight(this);
  size_t v12 = Height;
  if (PixelFormatType != 32 && PixelFormatType != 1111970369)
  {
    PixelBufferUtils::pixelFormatAsString(PixelFormatType, (char *)__p);
    if (v34 >= 0) {
      size_t v16 = __p;
    }
    else {
      size_t v16 = (void **)__p[0];
    }
    NSLog(&cfstr_SDErrorPixelFo.isa, "addTextToPixelBuffer", 3826, PixelFormatType, v16);
    if (v34 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  double v13 = (double)Height;
  if (x > (double)Width || y > v13)
  {
    NSLog(&cfstr_SDErrorCannotA_1.isa, "addTextToPixelBuffer", 3832);
    return 0;
  }
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  CVPixelBufferLockBaseAddress(this, 0);
  BaseAddress = CVPixelBufferGetBaseAddress(this);
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(this);
  unint64_t v20 = CGBitmapContextCreate(BaseAddress, Width, v12, 8uLL, BytesPerRow, DeviceRGB, 6u);
  long long v21 = *(_OWORD *)(MEMORY[0x263F000D0] + 16);
  *(_OWORD *)&v32.a = *MEMORY[0x263F000D0];
  *(_OWORD *)&v32.c = v21;
  *(_OWORD *)&v32.tdouble x = *(_OWORD *)(MEMORY[0x263F000D0] + 32);
  CGContextSetTextMatrix(v20, &v32);
  CGContextSetTextDrawingMode(v20, kCGTextFill);
  CGColorRef GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  CGColorRef v23 = CGColorCreateGenericRGB(0.0, 0.0, 0.0, 0.0);
  CTFontRef v24 = CTFontCreateWithName(@"Courier", (double)(unint64_t)a3, 0);
  {
    {
      uint64_t v31 = *MEMORY[0x263F03C60];
      v35[0] = *MEMORY[0x263F039A0];
      v35[1] = v31;
      v36[0] = v24;
      v36[1] = GenericRGB;
      v35[2] = *MEMORY[0x263F03988];
      v36[2] = v23;
      PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes = [NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:3];
    }
  }
  id v25 = objc_alloc(MEMORY[0x263F086A0]);
  unint64_t v26 = [NSString stringWithUTF8String:a2];
  CFAttributedStringRef v27 = (const __CFAttributedString *)[v25 initWithString:v26 attributes:PixelBufferUtils::addTextToPixelBuffer(__CVBuffer *,char const*,unsigned long,CGPoint)::stringAttributes];

  double v28 = CTLineCreateWithAttributedString(v27);
  float v29 = x;
  float v30 = v13 - y;
  CGContextSetTextPosition(v20, v29, v30);
  CTLineDraw(v28, v20);
  CVPixelBufferUnlockBaseAddress(this, 0);
  CFRelease(DeviceRGB);
  CGContextRelease(v20);
  CFRelease(GenericRGB);
  CFRelease(v23);
  CFRelease(v24);

  return 1;
}

void sub_2590D8EC4(_Unwind_Exception *a1)
{
}

void sub_2590D8EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsSession::PixelBufferUtilsSession(uint64_t a1, int a2, signed int a3, int a4, int a5, double a6, double a7, double a8, double a9, CGFloat a10, CGFloat a11, CGFloat a12, CGFloat a13)
{
  double v16 = a13;
  double v17 = a12;
  double v18 = a11;
  double v19 = a10;
  double v20 = a9;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(double *)(a1 + 24) = a6;
  *(double *)(a1 + 32) = a7;
  *(_DWORD *)(a1 + 40) = a2;
  *(double *)(a1 + 48) = a8;
  *(double *)(a1 + 56) = a9;
  *(_DWORD *)(a1 + 64) = a3;
  *(CGFloat *)(a1 + 72) = a10;
  *(CGFloat *)(a1 + 80) = a11;
  *(CGFloat *)(a1 + 88) = a12;
  *(CGFloat *)(a1 + 96) = a13;
  *(_DWORD *)(a1 + 104) = a4;
  *(_DWORD *)(a1 + 108) = a5;
  v43.origin.double x = a10;
  v43.origin.double y = a11;
  v43.size.double width = a12;
  v43.size.double height = a13;
  if (CGRectIsEmpty(v43))
  {
    double v19 = 0.0;
    double v18 = 0.0;
    double v17 = a6;
    double v16 = a7;
  }
  if (a2 == a3 && a6 == a8 && a7 == v20)
  {
    BOOL v26 = (a5 | a4) == 0;
    if (v17 == a6 && v16 == a7)
    {
      if (!(a5 | a4))
      {
        LOBYTE(v27) = 1;
        goto LABEL_36;
      }
      int v27 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    BOOL v26 = (a5 | a4) == 0;
  }
  if (a2 <= 1751410031)
  {
    if (a2 > 1717855599)
    {
      if (a2 == 1717855600 || a2 == 1717856627) {
        goto LABEL_58;
      }
    }
    else if (a2 == 825306677 || a2 == 825437747)
    {
      goto LABEL_58;
    }
  }
  else if (a2 <= 1919365989)
  {
    if (a2 == 1751410032 || a2 == 1751411059) {
      goto LABEL_58;
    }
  }
  else if (a2 == 1919365990 || a2 == 1919365992 || a2 == 1932996149)
  {
    goto LABEL_58;
  }
  if (a3 <= 1751410031)
  {
    if (a3 > 1717855599)
    {
      if (a3 != 1717855600)
      {
        int v29 = 1717856627;
        goto LABEL_57;
      }
    }
    else if (a3 != 825306677)
    {
      int v29 = 825437747;
      goto LABEL_57;
    }
LABEL_58:
    NSLog(&cfstr_SDErrorTransfe.isa, "PixelBufferUtilsSession", 3963);
    return a1;
  }
  if (a3 <= 1919365989)
  {
    if (a3 != 1751410032)
    {
      int v29 = 1751411059;
      goto LABEL_57;
    }
    goto LABEL_58;
  }
  if (a3 == 1919365990 || a3 == 1919365992) {
    goto LABEL_58;
  }
  int v29 = 1932996149;
LABEL_57:
  if (a3 == v29) {
    goto LABEL_58;
  }
  int v27 = 1;
  if (v26) {
    goto LABEL_36;
  }
LABEL_10:
  if (a3 > 1751411058)
  {
    if (a3 > 1919365991)
    {
      if (a3 == 1932996149) {
        goto LABEL_51;
      }
      unsigned __int16 v31 = 13160;
    }
    else
    {
      if (a3 == 1751411059) {
        goto LABEL_51;
      }
      unsigned __int16 v31 = 13158;
    }
    int v28 = v31 | 0x72670000;
    goto LABEL_50;
  }
  if (a3 > 1380410944)
  {
    if (a3 != 1380410945)
    {
      int v28 = 1717856627;
      goto LABEL_50;
    }
LABEL_51:
    NSLog(&cfstr_SDErrorRotatio.isa, "PixelBufferUtilsSession", 3969);
    return a1;
  }
  if (a3 == 825306677) {
    goto LABEL_51;
  }
  int v28 = 825437747;
LABEL_50:
  if (a3 == v28) {
    goto LABEL_51;
  }
  if (!v27)
  {
LABEL_70:
    if (a5)
    {
      NSLog(&cfstr_SDErrorReflect.isa, "createVTRotationSession", 761);
    }
    else
    {
      CVPixelBufferRef pixelBufferOut = 0;
      int v39 = VTImageRotationSessionCreate();
      CVPixelBufferRef v40 = pixelBufferOut;
      if (!v39)
      {
        *(void *)(a1 + 16) = pixelBufferOut;
        if (v40) {
          return a1;
        }
        goto LABEL_77;
      }
      MEMORY[0x25A2D5EF0](pixelBufferOut);
      CFRelease(pixelBufferOut);
      NSLog(&cfstr_SDErrorUnableT_2.isa, "createVTRotationSession", 782);
    }
    *(void *)(a1 + 16) = 0;
LABEL_77:
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
    *(void *)a1 = 0;
    char v41 = *(OpaqueVTPixelTransferSession **)(a1 + 8);
    if (v41)
    {
      VTPixelTransferSessionInvalidate(v41);
      CFRelease(*(CFTypeRef *)(a1 + 8));
    }
    *(void *)(a1 + 8) = 0;
    return a1;
  }
  double v33 = trunc(a8);
  if ((a4 & 0xFFFFFFFD) == 1) {
    double v34 = v33;
  }
  else {
    double v34 = v20;
  }
  if ((a4 & 0xFFFFFFFD) != 1) {
    double v20 = a8;
  }
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v35 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  CVReturn v37 = CVPixelBufferCreate(v35, (unint64_t)v20, (unint64_t)v34, a3, BufferAttributes, &pixelBufferOut);
  CVPixelBufferRef v38 = pixelBufferOut;
  if (v37) {
    CVPixelBufferRef v38 = 0;
  }
  *(void *)a1 = v38;
  if (!v38)
  {
    NSLog(&cfstr_SDErrorFailedA.isa, "PixelBufferUtilsSession", 3993);
    return a1;
  }
  LOBYTE(v27) = 0;
LABEL_36:
  v44.origin.double x = v19;
  v44.origin.double y = v18;
  v44.size.double width = v17;
  v44.size.double height = v16;
  VTTransferSessiounint64_t n = createVTTransferSession(v44);
  *(void *)(a1 + 8) = VTTransferSession;
  if (!VTTransferSession)
  {
    CVPixelBufferRelease(*(CVPixelBufferRef *)a1);
    *(void *)a1 = 0;
    return a1;
  }
  if ((v27 & 1) == 0) {
    goto LABEL_70;
  }
  return a1;
}

void PixelBufferUtilsSession::~PixelBufferUtilsSession(PixelBufferUtilsSession *this)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)this);
  *(void *)this = 0;
  if (*((void *)this + 2))
  {
    MEMORY[0x25A2D5EF0]();
    CFRelease(*((CFTypeRef *)this + 2));
  }
  *((void *)this + 2) = 0;
  uint64_t v2 = (OpaqueVTPixelTransferSession *)*((void *)this + 1);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*((CFTypeRef *)this + 1));
  }
  *((void *)this + 1) = 0;
}

{
  OpaqueVTPixelTransferSession *v2;

  CVPixelBufferRelease(*(CVPixelBufferRef *)this);
  *(void *)this = 0;
  if (*((void *)this + 2))
  {
    MEMORY[0x25A2D5EF0]();
    CFRelease(*((CFTypeRef *)this + 2));
  }
  *((void *)this + 2) = 0;
  uint64_t v2 = (OpaqueVTPixelTransferSession *)*((void *)this + 1);
  if (v2)
  {
    VTPixelTransferSessionInvalidate(v2);
    CFRelease(*((CFTypeRef *)this + 1));
  }
  *((void *)this + 1) = 0;
}

CVPixelBufferRef PixelBufferUtilsSession::createOutputPixelBuffer(PixelBufferUtilsSession *this)
{
  double v1 = *((double *)this + 6);
  double v2 = *((double *)this + 7);
  OSType v3 = *((_DWORD *)this + 16);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v4 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
  if (CVPixelBufferCreate(v4, (unint64_t)v1, (unint64_t)v2, v3, BufferAttributes, &pixelBufferOut)) {
    return 0;
  }
  else {
    return pixelBufferOut;
  }
}

BOOL PixelBufferUtilsSession::verifyInput(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer)
{
  if (!pixelBuffer) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 10);
  double v5 = *((double *)this + 3);
  double v4 = *((double *)this + 4);
  return v5 == (double)CVPixelBufferGetWidth(pixelBuffer)
      && v4 == (double)CVPixelBufferGetHeight(pixelBuffer)
      && CVPixelBufferGetPixelFormatType(pixelBuffer) == v3;
}

BOOL PixelBufferUtilsSession::verifyOutput(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer)
{
  if (!pixelBuffer) {
    return 0;
  }
  int v3 = *((_DWORD *)this + 16);
  double v5 = *((double *)this + 6);
  double v4 = *((double *)this + 7);
  return v5 == (double)CVPixelBufferGetWidth(pixelBuffer)
      && v4 == (double)CVPixelBufferGetHeight(pixelBuffer)
      && CVPixelBufferGetPixelFormatType(pixelBuffer) == v3;
}

BOOL PixelBufferUtilsSession::setScalingMode(uint64_t a1, int a2)
{
  double v2 = *(const void **)(a1 + 8);
  if (v2)
  {
    if (a2 == 1)
    {
      CFStringRef v3 = (const __CFString *)*MEMORY[0x263F1EA08];
      double v4 = (CFTypeRef *)MEMORY[0x263F1EC70];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    if (!a2)
    {
      CFStringRef v3 = (const __CFString *)*MEMORY[0x263F1EA08];
      double v4 = (CFTypeRef *)MEMORY[0x263F1EC78];
      return VTSessionSetProperty(v2, v3, *v4) == 0;
    }
    NSLog(&cfstr_SDErrorUnknown.isa, "setScalingMode", 4067);
  }
  else
  {
    NSLog(&cfstr_SDErrorSession.isa, "setScalingMode", 4057);
  }
  return 0;
}

uint64_t PixelBufferUtilsSession::setHardwareAcceleration(PixelBufferUtilsSession *this, int a2)
{
  double v4 = (const void *)*((void *)this + 1);
  uint64_t v5 = MEMORY[0x263EFFB40];
  uint64_t v6 = MEMORY[0x263EFFB38];
  if (v4)
  {
    unsigned int v7 = (CFTypeRef *)(a2 ? MEMORY[0x263EFFB40] : MEMORY[0x263EFFB38]);
    if (VTSessionSetProperty(v4, (CFStringRef)*MEMORY[0x263F1E9F0], *v7))
    {
      NSLog(&cfstr_SDErrorFailedS.isa, "setHardwareAcceleration", 4083);
      return 0;
    }
  }
  unsigned int v8 = (const void *)*((void *)this + 2);
  if (v8)
  {
    uint64_t v9 = (CFTypeRef *)(a2 ? v5 : v6);
    if (VTSessionSetProperty(v8, (CFStringRef)*MEMORY[0x263F1E980], *v9))
    {
      NSLog(&cfstr_SDErrorFailedS_0.isa, "setHardwareAcceleration", 4095);
      return 0;
    }
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::run(PixelBufferUtilsSession *this, CVPixelBufferRef pixelBuffer, __CVBuffer *a3)
{
  if (!pixelBuffer
    || (int v6 = *((_DWORD *)this + 10),
        double v8 = *((double *)this + 3),
        double v7 = *((double *)this + 4),
        v8 != (double)CVPixelBufferGetWidth(pixelBuffer))
    || v7 != (double)CVPixelBufferGetHeight(pixelBuffer)
    || CVPixelBufferGetPixelFormatType(pixelBuffer) != v6
    || !a3
    || (int v9 = *((_DWORD *)this + 16),
        double v11 = *((double *)this + 6),
        double v10 = *((double *)this + 7),
        v11 != (double)CVPixelBufferGetWidth(a3))
    || v10 != (double)CVPixelBufferGetHeight(a3)
    || CVPixelBufferGetPixelFormatType(a3) != v9)
  {
    NSLog(&cfstr_SDErrorProvide.isa, "run", 4113);
    return 0;
  }
  size_t v12 = (OpaqueVTPixelTransferSession *)*((void *)this + 1);
  if (*(void *)this) {
    CVPixelBufferRef v13 = *(CVPixelBufferRef *)this;
  }
  else {
    CVPixelBufferRef v13 = pixelBuffer;
  }
  if (v12)
  {
    if (*(void *)this) {
      uint64_t v14 = *(__CVBuffer **)this;
    }
    else {
      uint64_t v14 = a3;
    }
    OSStatus v15 = VTPixelTransferSessionTransferImage(v12, pixelBuffer, v14);
    uint64_t v16 = *((void *)this + 2);
    if (v16)
    {
      int v17 = MEMORY[0x25A2D5F00](v16, v13, a3);
      if (!v15) {
        goto LABEL_23;
      }
    }
    else if (!v15)
    {
      return 1;
    }
    NSLog(&cfstr_SDErrorPixelTr.isa, "run", 4151);
    return 0;
  }
  uint64_t v19 = *((void *)this + 2);
  if (!v19) {
    return 1;
  }
  int v17 = MEMORY[0x25A2D5F00](v19, v13, a3);
LABEL_23:
  if (v17)
  {
    NSLog(&cfstr_SDErrorRotatio_0.isa, "run", 4157);
    return 0;
  }
  return 1;
}

uint64_t PixelBufferUtilsSession::updateCrop(PixelBufferUtilsSession *this, CGRect a2)
{
  if (!*((void *)this + 1))
  {
    NSLog(&cfstr_SDErrorCannotU.isa, a2.origin.x, a2.origin.y, a2.size.width, a2.size.height, "updateCrop", 4169);
    return 0;
  }
  CGFloat height = a2.size.height;
  CGFloat width = a2.size.width;
  CGFloat y = a2.origin.y;
  CGFloat x = a2.origin.x;
  if (CGRectEqualToRect(a2, *(CGRect *)((char *)this + 72))) {
    return 1;
  }
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  if (CGRectIsEmpty(v14))
  {
    DictionaryRepresentatiounint64_t n = 0;
  }
  else
  {
    v15.origin.CGFloat x = x;
    v15.origin.CGFloat y = y;
    v15.size.CGFloat width = width;
    v15.size.CGFloat height = height;
    DictionaryRepresentatiounint64_t n = CGRectCreateDictionaryRepresentation(v15);
  }
  OSStatus v9 = VTSessionSetProperty(*((VTSessionRef *)this + 1), (CFStringRef)*MEMORY[0x263F1EA10], DictionaryRepresentation);
  if (DictionaryRepresentation) {
    CFRelease(DictionaryRepresentation);
  }
  if (v9)
  {
    NSLog(&cfstr_SDErrorPixelbu.isa, v10, v11, v12, v13, "updateCrop", 4191);
    return 0;
  }
  *((CGFloat *)this + 9) = x;
  *((CGFloat *)this + 10) = y;
  uint64_t result = 1;
  *((CGFloat *)this + 11) = width;
  *((CGFloat *)this + 12) = height;
  return result;
}

void PixelBufferUtilsSession::createCropScaleConvertRotateSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4)
{
}

void sub_2590D9BC0(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

void PixelBufferUtilsSession::createCropScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3, CGRect a4)
{
}

void PixelBufferUtilsSession::createScaleConvertSession(PixelBufferUtilsSession *this, CGSize a2, CGSize a3)
{
}

uint64_t PixelBufferUtilsSession::copySession(PixelBufferUtilsSession *this, PixelBufferUtilsSession *a2)
{
  if (this) {
    operator new();
  }
  NSLog(&cfstr_SDErrorCannotC.isa, a2, "copySession", 4238);
  return 0;
}

void sub_2590D9CFC(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x1020C403F2F7F0DLL);
  _Unwind_Resume(a1);
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this)
{
  *(unsigned char *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

{
  *(unsigned char *)(this + 8) = 0;
  *(void *)this = 0;
  return this;
}

uint64_t PixelBufferUtilsTiledView::TileConfig::TileConfig(uint64_t this, char a2, float a3, float a4)
{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

{
  *(float *)this = a4;
  *(float *)(this + 4) = a3;
  *(unsigned char *)(this + 8) = a2;
  return this;
}

int32x2_t PixelBufferUtilsTiledView::TileConfig::TileConfig(PixelBufferUtilsTiledView::TileConfig *this, int32x2_t *a2)
{
  __int8 v2 = a2[1].i8[0];
  int32x2_t result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((unsigned char *)this + 8) = v2;
  return result;
}

{
  __int8 v2;
  int32x2_t result;

  __int8 v2 = a2[1].i8[0];
  int32x2_t result = vrev64_s32(*a2);
  *(int32x2_t *)this = result;
  *((unsigned char *)this + 8) = v2;
  return result;
}

void PixelBufferUtilsTiledView::createTiledView(PixelBufferUtilsTiledView *this, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, PixelBufferUtilsTiledView::TileConfig *a6)
{
}

PixelBufferUtils *PixelBufferUtilsTiledView::render(PixelBufferUtilsTiledView *this, __CVBuffer **a2, uint64_t a3, __CVBuffer *a4, __CVBuffer *a5, char *a6)
{
  uint64_t v6 = *((void *)this + 2);
  uint64_t v7 = *((void *)this + 4);
  if (v7 * v6 != a3)
  {
    NSLog(&cfstr_SDErrorUnableT.isa, a2, "render", 4298);
    return 0;
  }
  uint64_t v9 = *((void *)this + 5);
  if (v9) {
    BOOL v10 = 1;
  }
  else {
    BOOL v10 = ((unint64_t)a5 | (unint64_t)a6) == 0;
  }
  if (!v10)
  {
    NSLog(&cfstr_SDErrorUnableT_0.isa, a2, "render", 4304);
    return 0;
  }
  double v13 = (const __CFAllocator **)MEMORY[0x263EFFB08];
  CGRect v14 = (CGRect *)MEMORY[0x263F001A8];
  if (a4)
  {
    CGRect v15 = (__CVBuffer *)*((void *)this + 6);
    if (!v15)
    {
      size_t v16 = *((void *)this + 1);
      size_t v17 = *((void *)this + 3);
      CVPixelBufferRef pixelBufferOut = 0;
      CFAllocatorRef v18 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
      CFDictionaryRef BufferAttributes = (const __CFDictionary *)getBufferAttributes();
      if (CVPixelBufferCreate(v18, v16, v17, 0x42475241u, BufferAttributes, &pixelBufferOut)) {
        CGRect v15 = 0;
      }
      else {
        CGRect v15 = pixelBufferOut;
      }
      *((void *)this + 6) = v15;
    }
    PixelBufferUtils::scaleConvertRotatePixelBuffer(a4, 0, v15, *v14, 0, 0, (__CVBuffer **)1);
    uint64_t v6 = *((void *)this + 2);
    uint64_t v7 = *((void *)this + 4);
    uint64_t v9 = *((void *)this + 5);
  }
  size_t v20 = v6 * *((void *)this + 1);
  size_t v21 = v9 + v7 * *((void *)this + 3);
  CVPixelBufferRef pixelBufferOut = 0;
  CFAllocatorRef v22 = *v13;
  CFDictionaryRef v23 = (const __CFDictionary *)getBufferAttributes();
  CFAllocatorRef v67 = v22;
  unint64_t v62 = v20;
  if (CVPixelBufferCreate(v22, v20, v21, 0x42475241u, v23, &pixelBufferOut)) {
    CTFontRef v24 = 0;
  }
  else {
    CTFontRef v24 = pixelBufferOut;
  }
  CVPixelBufferLockBaseAddress(v24, 0);
  BaseAddress = (char *)CVPixelBufferGetBaseAddress(v24);
  CVPixelBufferGetHeight(v24);
  CVPixelBufferGetWidth(v24);
  uint64_t v64 = v24;
  size_t BytesPerRow = CVPixelBufferGetBytesPerRow(v24);
  std::locale __b = BaseAddress;
  if (BaseAddress)
  {
    size_t v27 = BytesPerRow;
    unint64_t v28 = *((void *)this + 5);
    if (!v28) {
      goto LABEL_25;
    }
LABEL_23:
    if (v28 * v27 >= 4) {
      memset_pattern16(BaseAddress, &unk_259120E60, (v28 * v27) & 0xFFFFFFFFFFFFFFFCLL);
    }
    goto LABEL_25;
  }
  NSLog(&cfstr_SDErrorAsvimag.isa, "asVImageBuffer", 195);
  size_t v27 = 0;
  unint64_t v28 = *((void *)this + 5);
  if (v28) {
    goto LABEL_23;
  }
LABEL_25:
  double v30 = (double)v28 * 0.15;
  float v63 = (char *)((double)v28 * 0.8);
  uint64_t v31 = *((void *)this + 2);
  uint64_t v32 = *((void *)this + 4);
  if (v32 * v31)
  {
    unint64_t v33 = 0;
    unsigned int v34 = 1;
    do
    {
      CFAllocatorRef v35 = a2[v33];
      if (v35)
      {
        size_t Width = CVPixelBufferGetWidth(a2[v33]);
        size_t Height = CVPixelBufferGetHeight(v35);
        unint64_t v38 = *((void *)this + 2);
        size_t v39 = *((void *)this + 3);
        size_t v40 = *((void *)this + 1);
        unint64_t v41 = v33 / v38;
        size_t v42 = v33 % v38 * v40;
        size_t v43 = *((void *)this + 5) + v41 * v39;
        float v44 = (float)v39;
        float v45 = (float)Height;
        float v46 = (float)v39 / (float)Height;
        float v47 = (float)v40;
        float v48 = (float)Width;
        float v49 = (float)v40 / (float)Width;
        if (v46 != v49)
        {
          if (v46 < v49)
          {
            v42 += (v40 - (unint64_t)(float)((float)(v47 * v48) / v45)) >> 1;
            size_t v40 = (unint64_t)(float)((float)(v47 * v48) / v45);
          }
          else
          {
            v43 += (v39 - (unint64_t)(float)((float)(v44 * v45) / v48)) >> 1;
            size_t v39 = (unint64_t)(float)((float)(v44 * v45) / v48);
          }
        }
        CVPixelBufferRef pixelBufferOut = 0;
        CVPixelBufferCreateWithBytes(v67, v40, v39, 0x42475241u, &__b[4 * v42 + v43 * v27], v27, 0, 0, 0, &pixelBufferOut);
        uint64_t v50 = *(void *)this + 12 * v33;
        int v51 = *(unsigned __int8 *)(v50 + 8);
        float v52 = *(float *)v50;
        float v53 = *(float *)(v50 + 4);
        OSType PixelFormatType = CVPixelBufferGetPixelFormatType(v35);
        v72.CGFloat width = (double)v40;
        v72.CGFloat height = (double)v39;
        CroppedAndScaledPixelBuffer = PixelBufferUtils::createCroppedAndScaledPixelBuffer(v35, 0, *v14, v72);
        size_t v57 = CroppedAndScaledPixelBuffer;
        if (PixelFormatType == 1717855600 || PixelFormatType == 1751411059 || PixelFormatType == 1751410032)
        {
          int v58 = PixelBufferUtils::colorizedDepthPixelBuffer(CroppedAndScaledPixelBuffer, 0, v51 != 0, v53, v52, 0, pixelBufferOut, v56);
          if (v51)
          {
            if (!v58)
            {
              LODWORD(v59) = 0.5;
              if ((PixelBufferUtils::alphaBlend(*((PixelBufferUtils **)this + 6), pixelBufferOut, &pixelBufferOut, v59, (__CVBuffer **)1) & 1) == 0)NSLog(&cfstr_SDErrorFailedC.isa, "render", 4400); {
            }
              }
          }
        }
        else
        {
          PixelBufferUtils::convertPixelBufferFormat(CroppedAndScaledPixelBuffer, pixelBufferOut, 0);
        }
        CVPixelBufferRelease(v57);
        CVPixelBufferRelease(pixelBufferOut);
        uint64_t v31 = *((void *)this + 2);
        uint64_t v32 = *((void *)this + 4);
      }
      unint64_t v33 = v34++;
    }
    while (v32 * v31 > v33);
  }
  unint64_t v60 = (unint64_t)v30;
  int v29 = v64;
  if (a5)
  {
    v70.CGFloat x = (double)v60;
    v70.CGFloat y = (double)(*((void *)this + 5) - v60);
    PixelBufferUtils::addTextToPixelBuffer(v64, a5, v63, v70);
  }
  if (a6)
  {
    v71.CGFloat x = (double)v62 - (double)v60 + (double)(strlen(a6) * (unint64_t)v63) * -0.6;
    v71.CGFloat y = (double)(*((void *)this + 5) - v60);
    PixelBufferUtils::addTextToPixelBuffer(v64, (__CVBuffer *)a6, v63, v71);
  }
  CVPixelBufferUnlockBaseAddress(v64, 0);
  return v29;
}

void PixelBufferUtilsTiledView::~PixelBufferUtilsTiledView(CVPixelBufferRef *this)
{
  if (*this) {
    MEMORY[0x25A2D62A0](*this, 0x1000C8005A209FELL);
  }
}

{
  CVPixelBufferRelease(this[6]);
  if (*this) {
    MEMORY[0x25A2D62A0](*this, 0x1000C8005A209FELL);
  }
}

void peridot::PeridotDXP::~PeridotDXP(peridot::PeridotDXP *this)
{
  __int8 v2 = (char *)this + 181808;
  CFStringRef v3 = (void *)*((void *)this + 22750);
  if (v3)
  {
    *((void *)v2 + 25) = v3;
    operator delete(v3);
  }
  double v4 = (void *)*((void *)v2 + 21);
  if (v4)
  {
    *((void *)v2 + 22) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)v2 + 18);
  if (v5)
  {
    *((void *)v2 + 19) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)v2 + 15);
  if (v6)
  {
    *((void *)v2 + 16) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void **)*((void *)v2 + 12);
  if (v7)
  {
    double v8 = (void **)*((void *)v2 + 13);
    uint64_t v9 = (void *)*((void *)v2 + 12);
    if (v8 != v7)
    {
      BOOL v10 = (void **)*((void *)v2 + 13);
      do
      {
        double v12 = (char *)*(v10 - 3);
        v10 -= 3;
        double v11 = v12;
        if (v12)
        {
          double v13 = (char *)*(v8 - 2);
          CGRect v14 = v11;
          if (v13 != v11)
          {
            CGRect v15 = v13 - 24;
            size_t v16 = v13 - 24;
            size_t v17 = v13 - 24;
            do
            {
              CFAllocatorRef v18 = *(void (***)(char *))v17;
              v17 -= 24;
              (*v18)(v16);
              v15 -= 24;
              BOOL v19 = v16 == v11;
              size_t v16 = v17;
            }
            while (!v19);
            CGRect v14 = *v10;
          }
          *(v8 - 2) = v11;
          operator delete(v14);
        }
        double v8 = v10;
      }
      while (v10 != v7);
      uint64_t v9 = (void *)*((void *)v2 + 12);
    }
    *((void *)v2 + 13) = v7;
    operator delete(v9);
  }
  size_t v20 = (void (***)(void))*((void *)v2 + 9);
  if (v20)
  {
    size_t v21 = (void (***)(void))*((void *)v2 + 10);
    CFAllocatorRef v22 = (void *)*((void *)v2 + 9);
    if (v21 != v20)
    {
      CFDictionaryRef v23 = v21 - 3;
      CTFontRef v24 = v21 - 3;
      id v25 = v21 - 3;
      do
      {
        BOOL v26 = *v25;
        v25 -= 3;
        (*v26)(v24);
        v23 -= 3;
        BOOL v19 = v24 == v20;
        CTFontRef v24 = v25;
      }
      while (!v19);
      CFAllocatorRef v22 = (void *)*((void *)v2 + 9);
    }
    *((void *)v2 + 10) = v20;
    operator delete(v22);
  }
  size_t v27 = (void **)((char *)this + 118816);
  unint64_t v28 = (void (***)(void))*((void *)v2 + 6);
  if (v28)
  {
    int v29 = (void (***)(void))*((void *)v2 + 7);
    double v30 = (void *)*((void *)v2 + 6);
    if (v29 != v28)
    {
      uint64_t v31 = v29 - 3;
      uint64_t v32 = v29 - 3;
      unint64_t v33 = v29 - 3;
      do
      {
        unsigned int v34 = *v33;
        v33 -= 3;
        (*v34)(v32);
        v31 -= 3;
        BOOL v19 = v32 == v28;
        uint64_t v32 = v33;
      }
      while (!v19);
      double v30 = (void *)*((void *)v2 + 6);
    }
    *((void *)v2 + 7) = v28;
    operator delete(v30);
  }
  CFAllocatorRef v35 = (void **)*((void *)v2 + 3);
  char v36 = (char *)this + 94072;
  if (v35)
  {
    CVReturn v37 = (void **)*((void *)v2 + 4);
    unint64_t v38 = (void *)*((void *)v2 + 3);
    if (v37 != v35)
    {
      size_t v39 = (void **)*((void *)v2 + 4);
      do
      {
        unint64_t v41 = (char *)*(v39 - 3);
        v39 -= 3;
        size_t v40 = v41;
        if (v41)
        {
          size_t v42 = (char *)*(v37 - 2);
          size_t v43 = v40;
          if (v42 != v40)
          {
            float v44 = v42 - 24;
            float v45 = v42 - 24;
            float v46 = v42 - 24;
            do
            {
              float v47 = *(void (***)(char *))v46;
              v46 -= 24;
              (*v47)(v45);
              v44 -= 24;
              BOOL v19 = v45 == v40;
              float v45 = v46;
            }
            while (!v19);
            size_t v43 = *v39;
          }
          *(v37 - 2) = v40;
          operator delete(v43);
        }
        CVReturn v37 = v39;
      }
      while (v39 != v35);
      unint64_t v38 = (void *)*((void *)v2 + 3);
      char v36 = (char *)this + 94072;
    }
    *((void *)v2 + 4) = v35;
    operator delete(v38);
  }

  peridot::PeridotDxpMacro::~PeridotDxpMacro((peridot::PeridotDXP *)((char *)this + 150312));
  peridot::PeridotDxpMacro::~PeridotDxpMacro((peridot::PeridotDXP *)((char *)this + 118864));
  float v48 = *v27;
  if (*v27)
  {
    *((void *)this + 14853) = v48;
    operator delete(v48);
  }
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14704);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14729);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14754);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14779);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14804);
  *((unsigned char *)this + 118632) = 0;
  *((_OWORD *)this + 7415) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 118432));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 118232));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 118032));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 117832));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 117632));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14576);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14601);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14626);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14651);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14676);
  *((unsigned char *)this + 117608) = 0;
  *((_OWORD *)this + 7351) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 117408));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 117208));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 117008));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 116808));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 116608));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14448);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14473);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14498);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14523);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14548);
  *((unsigned char *)this + 116584) = 0;
  *((_OWORD *)this + 7287) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 116384));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 116184));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 115984));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 115784));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 115584));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14320);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14345);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14370);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14395);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14420);
  *((unsigned char *)this + 115560) = 0;
  *((_OWORD *)this + 7223) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 115360));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 115160));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 114960));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 114760));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 114560));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14192);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14217);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14242);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14267);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14292);
  *((unsigned char *)this + 114536) = 0;
  *((_OWORD *)this + 7159) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 114336));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 114136));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 113936));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 113736));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 113536));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14064);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14089);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14114);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14139);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14164);
  *((unsigned char *)this + 113512) = 0;
  *((_OWORD *)this + 7095) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 113312));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 113112));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 112912));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 112712));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 112512));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13936);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13961);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13986);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14011);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 14036);
  *((unsigned char *)this + 112488) = 0;
  *((_OWORD *)this + 7031) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 112288));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 112088));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 111888));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 111688));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 111488));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13808);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13833);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13858);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13883);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13908);
  *((unsigned char *)this + 111464) = 0;
  *((_OWORD *)this + 6967) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 111264));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 111064));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 110864));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 110664));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 110464));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13680);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13705);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13730);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13755);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13780);
  *((unsigned char *)this + 110440) = 0;
  *((_OWORD *)this + 6903) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 110240));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 110040));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 109840));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 109640));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 109440));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13552);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13577);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13602);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13627);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13652);
  *((unsigned char *)this + 109416) = 0;
  *((_OWORD *)this + 6839) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 109216));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 109016));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 108816));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 108616));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 108416));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13424);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13449);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13474);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13499);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13524);
  *((unsigned char *)this + 108392) = 0;
  *((_OWORD *)this + 6775) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 108192));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 107992));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 107792));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 107592));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 107392));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13296);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13321);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13346);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13371);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13396);
  *((unsigned char *)this + 107368) = 0;
  *((_OWORD *)this + 6711) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 107168));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 106968));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 106768));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 106568));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 106368));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13168);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13193);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13218);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13243);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13268);
  *((unsigned char *)this + 106344) = 0;
  *((_OWORD *)this + 6647) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 106144));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 105944));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 105744));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 105544));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 105344));
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13040);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13065);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13090);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13115);
  peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 13140);
  *((unsigned char *)this + 105320) = 0;
  *((_OWORD *)this + 6583) = 0u;
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 105120));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 104920));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 104720));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 104520));
  peridot::PeridotPreProcessOutput::PreProcessorOut::~PreProcessorOut((peridot::PeridotDXP *)((char *)this + 104320));
  float v49 = (void *)*((void *)v36 + 9);
  if (v49)
  {
    *((void *)v36 + 10) = v49;
    operator delete(v49);
  }
  uint64_t v50 = (void *)*((void *)v36 + 6);
  if (v50)
  {
    *((void *)v36 + 7) = v50;
    operator delete(v50);
  }
  int v51 = (void *)*((void *)v36 + 3);
  if (v51)
  {
    *((void *)v36 + 4) = v51;
    operator delete(v51);
  }
  float v52 = *(void **)v36;
  if (*(void *)v36)
  {
    *((void *)v36 + 1) = v52;
    operator delete(v52);
  }
  peridot::HDUnfoldClass::~HDUnfoldClass((peridot::PeridotDXP *)((char *)this + 93552));
  peridot::PeridotDXPPreProcessor::~PeridotDXPPreProcessor((peridot::PeridotDXP *)((char *)this + 42464));
  peridot::PeridotDXPCalib::~PeridotDXPCalib((peridot::PeridotDXP *)((char *)this + 16));
}

void **std::vector<peridot::ImgHistogram>::~vector[abi:ne180100](void **a1)
{
  __int8 v2 = (char *)*a1;
  if (*a1)
  {
    CFStringRef v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 24;
      uint64_t v6 = v3 - 24;
      uint64_t v7 = v3 - 24;
      do
      {
        double v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v2;
        uint64_t v6 = v7;
      }
      while (!v9);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<peridot::ImgHistogram>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    double v4 = *(void (***)(void))(i - 24);
    *(void *)(a1 + 16) = i - 24;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void **std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100](void **a1)
{
  __int8 v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = v3 - 48;
      do
      {
        *((void *)v3 - 3) = off_270717568;
        uint64_t v6 = *((void *)v3 - 2);
        if (v6) {
          MEMORY[0x25A2D62A0](v6, 0x1000C8052888210);
        }
        *((void *)v3 - 1) = 0;
        *((void *)v3 - 6) = off_270717568;
        uint64_t v7 = *((void *)v3 - 5);
        if (v7) {
          MEMORY[0x25A2D62A0](v7, 0x1000C8052888210);
        }
        *((void *)v3 - 4) = 0;
        v5 -= 48;
        v3 -= 48;
      }
      while (v3 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::__split_buffer<peridot::RefHistogramAllSpots>::~__split_buffer(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    *(void *)(i - 24) = off_270717568;
    uint64_t v4 = *(void *)(i - 16);
    if (v4) {
      MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
    }
    *(void *)(i - 8) = 0;
    *(void *)(i - 48) = off_270717568;
    uint64_t v5 = *(void *)(i - 40);
    if (v5) {
      MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
    }
    *(void *)(i - 32) = 0;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void ***std::__exception_guard_exceptions<std::vector<peridot::RefHistogramAllSpots>::__destroy_vector>::~__exception_guard_exceptions[abi:ne180100](void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (char *)**a1;
    if (v3)
    {
      uint64_t v4 = (char *)v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        uint64_t v6 = v4 - 48;
        do
        {
          *((void *)v4 - 3) = off_270717568;
          uint64_t v7 = *((void *)v4 - 2);
          if (v7) {
            MEMORY[0x25A2D62A0](v7, 0x1000C8052888210);
          }
          *((void *)v4 - 1) = 0;
          *((void *)v4 - 6) = off_270717568;
          uint64_t v8 = *((void *)v4 - 5);
          if (v8) {
            MEMORY[0x25A2D62A0](v8, 0x1000C8052888210);
          }
          *((void *)v4 - 4) = 0;
          v6 -= 48;
          v4 -= 48;
        }
        while (v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

uint64_t peridot::PeridotDXP::setRunMode(uint64_t result, int a2)
{
  *(_WORD *)int32x2_t result = a2;
  *(unsigned char *)(result + 2) = BYTE2(a2);
  *(unsigned char *)(result + 42466) = BYTE2(a2);
  *(_WORD *)(result + 42464) = a2;
  *(unsigned char *)(result + 43270) = BYTE2(a2);
  *(_WORD *)(result + 43268) = a2;
  *(unsigned char *)(result + 93546) = BYTE2(a2);
  *(_WORD *)(result + 93544) = a2;
  *(unsigned char *)(result + 118690) = BYTE2(a2);
  *(_WORD *)(result + 118688) = a2;
  return result;
}

float peridot::PeridotDXP::updateBiasMacroHP(peridot::PeridotDXP *this, float a2)
{
  float result = a2 * 1.0e10;
  *((float *)this + 29796) = result;
  return result;
}

float peridot::PeridotDXP::updateBiasMacroM1(peridot::PeridotDXP *this, float a2)
{
  float result = a2 * 1.0e10;
  *((float *)this + 37658) = result;
  return result;
}

double peridot::PeridotDxpMacro::PeridotDxpMacro(peridot::PeridotDxpMacro *this)
{
  *(_OWORD *)this = xmmword_259120590;
  *((void *)this + 2) = 0x3F00000041100000;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 598) = 0;
  *((_OWORD *)this + 298) = 0u;
  *((_OWORD *)this + 297) = 0u;
  *((_OWORD *)this + 296) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 31400) = 0u;
  *(_OWORD *)((char *)this + 31416) = 0u;
  *(_OWORD *)((char *)this + 31368) = 0u;
  *(_OWORD *)((char *)this + 31384) = 0u;
  *(_OWORD *)((char *)this + 31336) = 0u;
  *(_OWORD *)((char *)this + 31352) = 0u;
  *(_OWORD *)((char *)this + 31304) = 0u;
  *(_OWORD *)((char *)this + 31320) = 0u;
  *(_OWORD *)((char *)this + 31288) = 0u;
  return result;
}

{
  double result;

  *(_OWORD *)this = xmmword_259120590;
  *((void *)this + 2) = 0x3F00000041100000;
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 35) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 12) = 0u;
  *((_OWORD *)this + 13) = 0u;
  *((_OWORD *)this + 14) = 0u;
  *((_OWORD *)this + 15) = 0u;
  *((_OWORD *)this + 16) = 0u;
  *((void *)this + 598) = 0;
  *((_OWORD *)this + 298) = 0u;
  *((_OWORD *)this + 297) = 0u;
  *((_OWORD *)this + 296) = 0u;
  *((_OWORD *)this + 295) = 0u;
  *(_OWORD *)((char *)this + 31400) = 0u;
  *(_OWORD *)((char *)this + 31416) = 0u;
  *(_OWORD *)((char *)this + 31368) = 0u;
  *(_OWORD *)((char *)this + 31384) = 0u;
  *(_OWORD *)((char *)this + 31336) = 0u;
  *(_OWORD *)((char *)this + 31352) = 0u;
  *(_OWORD *)((char *)this + 31304) = 0u;
  *(_OWORD *)((char *)this + 31320) = 0u;
  *(_OWORD *)((char *)this + 31288) = 0u;
  return result;
}

void peridot::PeridotDxpMacro::~PeridotDxpMacro(peridot::PeridotDxpMacro *this)
{
  uint64_t v2 = *((void *)this + 3926);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 3927);
    uint64_t v4 = (void *)*((void *)this + 3926);
    if (v3 != v2)
    {
      uint64_t v5 = *((void *)this + 3927);
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)*((void *)this + 3926);
    }
    *((void *)this + 3927) = v2;
    operator delete(v4);
  }
  uint64_t v8 = *((void *)this + 3923);
  if (v8)
  {
    uint64_t v9 = *((void *)this + 3924);
    BOOL v10 = (void *)*((void *)this + 3923);
    if (v9 != v8)
    {
      uint64_t v11 = *((void *)this + 3924);
      do
      {
        double v13 = *(void **)(v11 - 24);
        v11 -= 24;
        double v12 = v13;
        if (v13)
        {
          *(void *)(v9 - 16) = v12;
          operator delete(v12);
        }
        uint64_t v9 = v11;
      }
      while (v11 != v8);
      BOOL v10 = (void *)*((void *)this + 3923);
    }
    *((void *)this + 3924) = v8;
    operator delete(v10);
  }
  uint64_t v14 = *((void *)this + 3920);
  if (v14)
  {
    uint64_t v15 = *((void *)this + 3921);
    size_t v16 = (void *)*((void *)this + 3920);
    if (v15 != v14)
    {
      uint64_t v17 = *((void *)this + 3921);
      do
      {
        uint64_t v19 = *(void *)(v17 - 24);
        v17 -= 24;
        uint64_t v18 = v19;
        if (v19)
        {
          *(void *)(v15 - 16) = v18;
          MEMORY[0x25A2D62C0]();
        }
        uint64_t v15 = v17;
      }
      while (v17 != v14);
      size_t v16 = (void *)*((void *)this + 3920);
    }
    *((void *)this + 3921) = v14;
    operator delete(v16);
  }
  uint64_t v20 = *((void *)this + 3917);
  if (v20)
  {
    uint64_t v21 = *((void *)this + 3918);
    CFAllocatorRef v22 = (void *)*((void *)this + 3917);
    if (v21 != v20)
    {
      uint64_t v23 = *((void *)this + 3918);
      do
      {
        uint64_t v25 = *(void *)(v23 - 24);
        v23 -= 24;
        uint64_t v24 = v25;
        if (v25)
        {
          *(void *)(v21 - 16) = v24;
          MEMORY[0x25A2D62C0]();
        }
        uint64_t v21 = v23;
      }
      while (v23 != v20);
      CFAllocatorRef v22 = (void *)*((void *)this + 3917);
    }
    *((void *)this + 3918) = v20;
    operator delete(v22);
  }
  uint64_t v26 = *((void *)this + 3914);
  if (v26)
  {
    uint64_t v27 = *((void *)this + 3915);
    unint64_t v28 = (void *)*((void *)this + 3914);
    if (v27 != v26)
    {
      uint64_t v29 = *((void *)this + 3915);
      do
      {
        uint64_t v31 = *(void *)(v29 - 24);
        v29 -= 24;
        uint64_t v30 = v31;
        if (v31)
        {
          *(void *)(v27 - 16) = v30;
          MEMORY[0x25A2D62C0]();
        }
        uint64_t v27 = v29;
      }
      while (v29 != v26);
      unint64_t v28 = (void *)*((void *)this + 3914);
    }
    *((void *)this + 3915) = v26;
    operator delete(v28);
  }
  uint64_t v32 = *((void *)this + 3911);
  if (v32)
  {
    uint64_t v33 = *((void *)this + 3912);
    unsigned int v34 = (void *)*((void *)this + 3911);
    if (v33 != v32)
    {
      uint64_t v35 = *((void *)this + 3912);
      do
      {
        uint64_t v37 = *(void *)(v35 - 24);
        v35 -= 24;
        uint64_t v36 = v37;
        if (v37)
        {
          *(void *)(v33 - 16) = v36;
          MEMORY[0x25A2D62C0]();
        }
        uint64_t v33 = v35;
      }
      while (v35 != v32);
      unsigned int v34 = (void *)*((void *)this + 3911);
    }
    *((void *)this + 3912) = v32;
    operator delete(v34);
  }
  unint64_t v38 = (void *)*((void *)this + 596);
  if (v38)
  {
    *((void *)this + 597) = v38;
    operator delete(v38);
  }
  size_t v39 = (void *)*((void *)this + 593);
  if (v39)
  {
    *((void *)this + 594) = v39;
    operator delete(v39);
  }
  size_t v40 = (void *)*((void *)this + 590);
  if (v40)
  {
    *((void *)this + 591) = v40;
    operator delete(v40);
  }
  unint64_t v41 = (void *)*((void *)this + 35);
  if (v41)
  {
    *((void *)this + 36) = v41;
    operator delete(v41);
  }
  size_t v42 = (void *)*((void *)this + 31);
  if (v42)
  {
    *((void *)this + 32) = v42;
    operator delete(v42);
  }
  size_t v43 = (void *)*((void *)this + 28);
  if (v43)
  {
    *((void *)this + 29) = v43;
    operator delete(v43);
  }
  float v44 = (void *)*((void *)this + 25);
  if (v44)
  {
    *((void *)this + 26) = v44;
    operator delete(v44);
  }
  float v45 = (void *)*((void *)this + 22);
  if (v45)
  {
    *((void *)this + 23) = v45;
    operator delete(v45);
  }
  float v46 = (void *)*((void *)this + 18);
  if (v46)
  {
    *((void *)this + 19) = v46;
    operator delete(v46);
  }
  uint64_t v47 = *((void *)this + 15);
  if (v47)
  {
    uint64_t v48 = *((void *)this + 16);
    float v49 = (void *)*((void *)this + 15);
    if (v48 != v47)
    {
      uint64_t v50 = *((void *)this + 16);
      do
      {
        float v52 = *(void **)(v50 - 24);
        v50 -= 24;
        int v51 = v52;
        if (v52)
        {
          *(void *)(v48 - 16) = v51;
          operator delete(v51);
        }
        uint64_t v48 = v50;
      }
      while (v50 != v47);
      float v49 = (void *)*((void *)this + 15);
    }
    *((void *)this + 16) = v47;
    operator delete(v49);
  }
  uint64_t v53 = *((void *)this + 12);
  if (v53)
  {
    uint64_t v54 = *((void *)this + 13);
    float32x4_t v55 = (void *)*((void *)this + 12);
    if (v54 != v53)
    {
      uint64_t v56 = *((void *)this + 13);
      do
      {
        int v58 = *(void **)(v56 - 24);
        v56 -= 24;
        size_t v57 = v58;
        if (v58)
        {
          *(void *)(v54 - 16) = v57;
          operator delete(v57);
        }
        uint64_t v54 = v56;
      }
      while (v56 != v53);
      float32x4_t v55 = (void *)*((void *)this + 12);
    }
    *((void *)this + 13) = v53;
    operator delete(v55);
  }
  double v59 = (void *)*((void *)this + 9);
  if (v59)
  {
    *((void *)this + 10) = v59;
    operator delete(v59);
  }
  uint64_t v60 = *((void *)this + 6);
  if (v60)
  {
    uint64_t v61 = *((void *)this + 7);
    unint64_t v62 = (void *)*((void *)this + 6);
    if (v61 != v60)
    {
      uint64_t v63 = *((void *)this + 7);
      do
      {
        CGRect v65 = *(void **)(v63 - 24);
        v63 -= 24;
        uint64_t v64 = v65;
        if (v65)
        {
          *(void *)(v61 - 16) = v64;
          operator delete(v64);
        }
        uint64_t v61 = v63;
      }
      while (v63 != v60);
      unint64_t v62 = (void *)*((void *)this + 6);
    }
    *((void *)this + 7) = v60;
    operator delete(v62);
  }
  uint64_t v66 = *((void *)this + 3);
  if (v66)
  {
    uint64_t v67 = *((void *)this + 4);
    uint8x8_t v68 = (void *)*((void *)this + 3);
    if (v67 != v66)
    {
      uint64_t v69 = *((void *)this + 4);
      do
      {
        CGPoint v71 = *(void **)(v69 - 24);
        v69 -= 24;
        CGPoint v70 = v71;
        if (v71)
        {
          *(void *)(v67 - 16) = v70;
          operator delete(v70);
        }
        uint64_t v67 = v69;
      }
      while (v69 != v66);
      uint8x8_t v68 = (void *)*((void *)this + 3);
    }
    *((void *)this + 4) = v66;
    operator delete(v68);
  }
}

uint64_t peridot::PeridotDxpMacro::getStrayPulse(uint64_t a1, float **a2, __int32 **a3)
{
  return peridot::PeridotDxpMacro::getPulseShape(a1, (uint64_t *)(a1 + 72), (uint64_t *)(a1 + 48), a2, 0, a3);
}

float peridot::PeridotDxpMacro::configure(uint64_t a1, uint64_t a2)
{
  float result = *(float *)(a2 + 3424);
  *(float *)(a1 + 31432) = result;
  *(void *)(a1 + 31440) = *(void *)(a2 + 3944);
  return result;
}

uint64_t peridot::PeridotDxpMacro::getSignalPulse(uint64_t a1, float **a2, uint64_t a3, __int32 **a4)
{
  return peridot::PeridotDxpMacro::getPulseShape(a1, (uint64_t *)(a1 + 144), (uint64_t *)(a1 + 120), a2, a3, a4);
}

uint64_t peridot::PeridotDxpMacro::getStrayPulseOptimized(peridot::PeridotDxpMacro *this, float *a2, uint64_t a3, float *a4)
{
  return peridot::PeridotDxpMacro::getPulseShapeOptimized((uint64_t)this, (uint64_t *)this + 9, (void *)this + 6, a2, a3, 0, (__int32 *)a4);
}

uint64_t peridot::PeridotDxpMacro::getSignalPulseOptimized(peridot::PeridotDxpMacro *this, float *a2, uint64_t a3, uint64_t a4, float *a5)
{
  return peridot::PeridotDxpMacro::getPulseShapeOptimized((uint64_t)this, (uint64_t *)this + 18, (void *)this + 15, a2, a3, a4, (__int32 *)a5);
}

void peridot::PeridotDxpMacro::findImageStrayT0(peridot::PeridotDxpMacro *this, const peridot::ImgHistogram *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v8 = *((int *)this + 77);
  double v9 = fmax((double)((int)v8 - 2), 1.0);
  *a3 = 0;
  *a4 = 0;
  peridot::PeridotDxpMacro::findStrayT0New(this, a2, (unint64_t)v9, v8 + 1, a3, a4, v9);
  if (*a3 == *((void *)a2 + 2))
  {
    *a3 = *((int *)this + 77);
    *a4 = 2;
  }
}

float peridot::PeridotDxpMacro::polyfitMacro(peridot::PeridotDxpMacro *this, float *a2, float a3)
{
  return (float)((float)(*((float *)this + 43) * (float)(*a2 - a2[2]))
               / (float)((float)((float)(a2[2] + *a2) - (float)(a2[1] + a2[1]))
                       + (float)((float)(a2[2] + *a2) - (float)(a2[1] + a2[1]))))
       + a3;
}

void peridot::PeridotDxpMacro::updateReferenceStrayBegin(peridot::PeridotDxpMacro *this, const peridot::RefHistogram *a2, double a3)
{
  float v3 = *(float *)&a3;
  unint64_t v7 = 0;
  peridot::PeridotDxpMacro::findStrayT0New(this, a2, 0, 24, &v7, &v6, a3);
  if (v7 != *((void *)a2 + 2)) {
    *((_DWORD *)this + 77) = (int)fmax((float)((float)v7 + v3), 0.0);
  }
}

void log_to_os_log_error(const char *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    int v2 = 136315138;
    float v3 = a1;
    _os_log_error_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&v2, 0xCu);
  }
}

void log_to_os_log_debug(const char *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
  {
    int v2 = 136315138;
    float v3 = a1;
    _os_log_debug_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "%s", (uint8_t *)&v2, 0xCu);
  }
}

void peridot_depth_log_error(const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v2 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x400uLL, __format, va);
  peridot_depth_log_error_function(__str);
  if (peridot_depth_log_print_to_stdout) {
    puts(__str);
  }
}

void peridot_depth_log_debug(const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v2 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x400uLL, __format, va);
  peridot_depth_log_debug_function(__str);
  if (peridot_depth_log_print_to_stdout) {
    puts(__str);
  }
}

void GmoE::decomposeKQ()
{
  v0 = &unk_2707171D8;
  operator new[]();
}

void sub_2590DD6E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  Matrix<double>::~Matrix((uint64_t)&a25);
  Matrix<double>::~Matrix((uint64_t)&a20);
  Matrix<double>::~Matrix((uint64_t)&a15);
  Matrix<double>::~Matrix((uint64_t)&a35);
  Matrix<double>::~Matrix((uint64_t)&a40);
  Matrix<double>::~Matrix((uint64_t)&a45);
  Matrix<double>::~Matrix((uint64_t)&a50);
  Matrix<double>::~Matrix((uint64_t)&a55);
  Matrix<double>::~Matrix((uint64_t)&a60);
  Matrix<double>::~Matrix(v60 - 224);
  Matrix<double>::~Matrix(v60 - 184);
  Matrix<double>::~Matrix(v60 - 144);
  _Unwind_Resume(a1);
}

void sub_2590DD8C0()
{
}

void sub_2590DD8C8()
{
}

void sub_2590DD8D0()
{
}

void sub_2590DD8D8()
{
}

void sub_2590DD8E0()
{
}

void sub_2590DD8E8()
{
}

void sub_2590DD8F0()
{
}

void sub_2590DD8F8()
{
}

void sub_2590DD900()
{
}

void sub_2590DD908()
{
}

void sub_2590DD910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
}

void sub_2590DD920()
{
}

void sub_2590DD928()
{
}

void sub_2590DD930()
{
}

void sub_2590DD938()
{
}

void sub_2590DD940()
{
}

void operator*<double>(uint64_t a1, uint64_t a2, double a3)
{
  double v5 = a3;
  unsigned int v3 = *(_DWORD *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  *(void *)a1 = &unk_2707171D8;
  if (v4 * v3) {
    operator new[]();
  }
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 20) = v4;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 8 * v3 * (unint64_t)v4;
  vDSPVsmul<double>(*(const double **)(a2 + 8), 1, &v5, 0, 1, 0);
}

void sub_2590DDA18(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = v2;
  if (*(void *)(v1 + 8))
  {
    if (*(unsigned char *)(v1 + 24))
    {
      MEMORY[0x25A2D62A0]();
      *(void *)(v1 + 8) = 0;
      *(void *)(v1 + 32) = 0;
      *(unsigned char *)(v1 + 24) = 0;
    }
  }
  *(void *)(v1 + 16) = 0;
  _Unwind_Resume(exception_object);
}

void GmoE::rotationMatrixToAngles(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(long double **)(a1 + 8);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  double v5 = &v3[(2 * v4)];
  long double v6 = v5[1];
  long double v7 = v5[2];
  long double v8 = atan2(v6, v7);
  long double v9 = atan2(-*v5, sqrt(v6 * v6 + v7 * v7));
  long double v10 = atan2(v3[v4], *v3);
  **(long double **)(a2 + 8) = v8;
  *(long double *)(*(void *)(a2 + 8) + 8) = v9;
  *(long double *)(*(void *)(a2 + 8) + 16) = v10;
}

__CFData *PDPeridotCalibCreateWithCalibrationDictionary(peridot::CalibManager *a1)
{
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 402528);
  unsigned int v3 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 402528);
    MutableBytePtr = CFDataGetMutableBytePtr(v3);
    if ((peridot::CalibManager::fillPeridotCalib(a1, (_PeridotCalib *)MutableBytePtr, v5) & 1) == 0)
    {
      CFRelease(v3);
      return 0;
    }
  }
  return v3;
}

uint64_t PDPeridotCalibGetMpcUUIDFromCalibrationBlob(CFDataRef theData, uint64_t a2)
{
  uint64_t result = 0;
  if (theData)
  {
    if (a2)
    {
      v7[1] = CFDataGetLength(theData);
      v7[0] = CFDataGetBytePtr(theData);
      return peridot::CalibManager::readMpcUUID((uint64_t)v7, a2, v5, v6);
    }
  }
  return result;
}

__CFData *PDPeridotCalibCreateIspFirmwareCalib(__CFData *a1, uint64_t a2)
{
  v9[1] = *MEMORY[0x263EF8340];
  long double v8 = @"Version";
  unsigned int v3 = [NSNumber numberWithLong:a2];
  v9[0] = v3;
  uint64_t v4 = (_PeridotCalib *)[NSDictionary dictionaryWithObjects:v9 forKeys:&v8 count:1];

  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  return peridot::CalibManager::createIspFirmwareCalib((peridot::CalibManager *)MutableBytePtr, v4, v6);
}

void sub_2590DDC80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PDPeridotCalibGetVersion(__CFData *a1)
{
  return *(unsigned int *)CFDataGetMutableBytePtr(a1);
}

__n128 PDPeridotCalibGetFlatFieldUUID(__CFData *a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(CFDataGetMutableBytePtr(a1) + 402488);
  *a2 = result;
  return result;
}

__n128 PDPeridotCalibGetMpcUUID(__CFData *a1, __n128 *a2)
{
  __n128 result = *(__n128 *)(CFDataGetMutableBytePtr(a1) + 402504);
  *a2 = result;
  return result;
}

uint64_t PDPeridotCalibCopySerialNumber(__CFData *a1)
{
  return objc_claimAutoreleasedReturnValue();
}

float32x2_t PDPeridotCalibGetFactoryWideToPeridotTransform(__CFData *a1)
{
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  float64x2_t v2 = *(float64x2_t *)(MutableBytePtr + 402152);
  v2.f64[1] = *((float64_t *)MutableBytePtr + 50273);
  return vcvt_f32_f64(v2);
}

__n128 PDPeridotCalibSetOperationalWideToPeridotTransform(__CFData *a1, int8x16_t a2, int8x16_t a3, int8x16_t a4, __n128 a5)
{
  double v5 = *(float *)a2.i32;
  double v6 = *(float *)a3.i32;
  double v7 = *(float *)a4.i32;
  float32x2_t v8 = (float32x2_t)vext_s8((int8x8_t)a5.n128_u64[0], (int8x8_t)*(_OWORD *)&vextq_s8(a2, a2, 8uLL), 4uLL);
  a5.n128_u32[1] = a2.u32[1];
  float64x2_t v13 = vcvtq_f64_f32((float32x2_t)vzip2_s32(*(int32x2_t *)a3.i8, *(int32x2_t *)a4.i8));
  float64x2_t v14 = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
  float64x2_t v15 = vcvtq_f64_f32(v8);
  float64x2_t v12 = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL)));
  double v9 = a5.n128_f32[2];
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  *((double *)MutableBytePtr + 50281) = v5;
  *((double *)MutableBytePtr + 50282) = v6;
  *((double *)MutableBytePtr + 50283) = v7;
  *((float64x2_t *)MutableBytePtr + 25142) = v14;
  *((float64x2_t *)MutableBytePtr + 25143) = v13;
  *((float64x2_t *)MutableBytePtr + 25144) = v15;
  __n128 result = (__n128)v12;
  *((float64x2_t *)MutableBytePtr + 25145) = v12;
  *((double *)MutableBytePtr + 50292) = v9;
  return result;
}

void PDPeridotCalibResetStray(__CFData *a1)
{
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  readJLNM_v102_stray_map(wc_stary_map_jlnm_bin, (float *)MutableBytePtr);
  *((_DWORD *)MutableBytePtr + 1) |= 1u;
}

uint64_t PDPeridotCalibCalibrationBlobsFromNVM(peridot::CalibManager *a1, const __CFData *a2)
{
  id v4 = (id) MGGetStringAnswer();
  CFDataRef v5 = (const __CFData *)[v4 UTF8String];
  uint64_t v8 = peridot::CalibManager::blobsFromNVM(a1, a2, v5, v6, v7);

  CFRelease(v4);
  return v8;
}

void sub_2590DDF2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PDPeridotCalibCalibrationBlobsFromNVMForDevice(peridot::CalibManager *a1, const __CFData *a2, void *a3)
{
  id v5 = a3;
  CFDataRef v6 = (const __CFData *)[v5 UTF8String];
  uint64_t v9 = peridot::CalibManager::blobsFromNVM(a1, a2, v6, v7, v8);

  return v9;
}

void sub_2590DDF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void peridot::PeridotDXPCalib::~PeridotDXPCalib(peridot::PeridotDXPCalib *this)
{
  SparseMatrix::~SparseMatrix((peridot::PeridotDXPCalib *)((char *)this + 40864));
  float64x2_t v2 = (void *)*((void *)this + 497);
  if (v2)
  {
    *((void *)this + 498) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 494);
  if (v3)
  {
    *((void *)this + 495) = v3;
    operator delete(v3);
  }
  id v4 = (void *)*((void *)this + 490);
  if (v4)
  {
    *((void *)this + 491) = v4;
    operator delete(v4);
  }
  id v5 = (void *)*((void *)this + 487);
  if (v5)
  {
    *((void *)this + 488) = v5;
    operator delete(v5);
  }
  CFDataRef v6 = (void *)*((void *)this + 484);
  if (v6)
  {
    *((void *)this + 485) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 477);
  if (v7)
  {
    *((void *)this + 478) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 474);
  if (v8)
  {
    *((void *)this + 475) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 465);
  if (v9)
  {
    *((void *)this + 466) = v9;
    operator delete(v9);
  }
  long double v10 = (void *)*((void *)this + 462);
  if (v10)
  {
    *((void *)this + 463) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 459);
  if (v11)
  {
    *((void *)this + 460) = v11;
    operator delete(v11);
  }
  float64x2_t v12 = (void *)*((void *)this + 456);
  if (v12)
  {
    *((void *)this + 457) = v12;
    operator delete(v12);
  }
  float64x2_t v13 = (void *)*((void *)this + 453);
  if (v13)
  {
    *((void *)this + 454) = v13;
    operator delete(v13);
  }
  float64x2_t v14 = (void *)*((void *)this + 450);
  if (v14)
  {
    *((void *)this + 451) = v14;
    operator delete(v14);
  }
  float64x2_t v15 = (void *)*((void *)this + 447);
  if (v15)
  {
    *((void *)this + 448) = v15;
    operator delete(v15);
  }
  size_t v16 = (void *)*((void *)this + 444);
  if (v16)
  {
    *((void *)this + 445) = v16;
    operator delete(v16);
  }
  uint64_t v17 = (void *)*((void *)this + 441);
  if (v17)
  {
    *((void *)this + 442) = v17;
    operator delete(v17);
  }
  uint64_t v18 = (void *)*((void *)this + 34);
  if (v18)
  {
    *((void *)this + 35) = v18;
    operator delete(v18);
  }
}

uint64_t peridot::PeridotDXPCalib::isConfigChanged(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned int v4 = *(unsigned __int16 *)(*(void *)(a2 + 16) + 9280 * *(void *)(a2 + 8 * a4 + 3952) + 52);
  unint64_t v5 = v4 >> 4;
  unsigned int v6 = v4 >> 12;
  float v7 = (unsigned char *)(a1 + 42433);
  if (*(unsigned char *)(a1 + 42433))
  {
    *(_DWORD *)a1 = a3;
    *(unsigned char *)(a1 + 4) = v6;
    *(unsigned char *)(a1 + 5) = v5;
    uint64_t result = 1;
    unsigned char *v7 = 0;
  }
  else if (*(_DWORD *)a1 != a3 {
         || (uint64_t v9 = *(unsigned __int8 *)(a1 + 4), __PAIR64__(*(unsigned __int8 *)(a1 + 5), v9) != __PAIR64__(v5, v6))
  }
         || (uint64_t result = peridot::PeridotDXPCalib::InputConfig::isChanged(a1 + 16, a2, a3, *(void *)(a2 + 8 * a4 + 3952), v5, v9), result))
  {
    peridot_depth_log("DXPCalib::configure: operation mode/ pri num/ phase num/frame config changed");
    return 1;
  }
  return result;
}

double peridot::PeridotDXPBaselineRemoval::PeridotDXPBaselineRemoval(peridot::PeridotDXPBaselineRemoval *this)
{
  *((void *)this + 92) = 0;
  double result = 0.0;
  *((_OWORD *)this + 45) = 0u;
  *((_WORD *)this + 374) = 257;
  *((unsigned char *)this + 750) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((void *)this + 821) = 0;
  *((void *)this + 1006) = 0;
  *((void *)this + 1191) = 0;
  *((void *)this + 4918) = 0;
  *((void *)this + 5103) = 0;
  *((void *)this + 5288) = 0;
  *((void *)this + 5473) = 0;
  *((void *)this + 5658) = 0;
  *((void *)this + 5843) = 0;
  return result;
}

{
  double result;

  *((void *)this + 92) = 0;
  double result = 0.0;
  *((_OWORD *)this + 45) = 0u;
  *((_WORD *)this + 374) = 257;
  *((unsigned char *)this + 750) = 0;
  *((_OWORD *)this + 47) = 0u;
  *((_OWORD *)this + 48) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *(_OWORD *)((char *)this + 856) = 0u;
  *(_OWORD *)((char *)this + 872) = 0u;
  *(_OWORD *)((char *)this + 888) = 0u;
  *(_OWORD *)((char *)this + 904) = 0u;
  *(_OWORD *)((char *)this + 920) = 0u;
  *(_OWORD *)((char *)this + 936) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *((void *)this + 821) = 0;
  *((void *)this + 1006) = 0;
  *((void *)this + 1191) = 0;
  *((void *)this + 4918) = 0;
  *((void *)this + 5103) = 0;
  *((void *)this + 5288) = 0;
  *((void *)this + 5473) = 0;
  *((void *)this + 5658) = 0;
  *((void *)this + 5843) = 0;
  return result;
}

void peridot::PeridotDXPBaselineRemoval::~PeridotDXPBaselineRemoval(peridot::PeridotDXPBaselineRemoval *this)
{
  float64x2_t v2 = (void *)*((void *)this + 127);
  if (v2)
  {
    *((void *)this + 128) = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)*((void *)this + 124);
  if (v3)
  {
    *((void *)this + 125) = v3;
    operator delete(v3);
  }
  unsigned int v4 = (void *)*((void *)this + 116);
  if (v4)
  {
    *((void *)this + 117) = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)*((void *)this + 113);
  if (v5)
  {
    *((void *)this + 114) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void *)*((void *)this + 110);
  if (v6)
  {
    *((void *)this + 111) = v6;
    operator delete(v6);
  }
  float v7 = (void *)*((void *)this + 107);
  if (v7)
  {
    *((void *)this + 108) = v7;
    operator delete(v7);
  }
  float v8 = (void *)*((void *)this + 104);
  if (v8)
  {
    *((void *)this + 105) = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)*((void *)this + 101);
  if (v9)
  {
    *((void *)this + 102) = v9;
    operator delete(v9);
  }
  long double v10 = (void *)*((void *)this + 97);
  if (v10)
  {
    *((void *)this + 98) = v10;
    operator delete(v10);
  }
  uint64_t v11 = (void *)*((void *)this + 94);
  if (v11)
  {
    *((void *)this + 95) = v11;
    operator delete(v11);
  }
  float64x2_t v12 = (void *)*((void *)this + 90);
  if (v12)
  {
    *((void *)this + 91) = v12;
    operator delete(v12);
  }
}

uint64_t peridot::PeridotDXPBaselineRemoval::init(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(_WORD *)(a1 + 748) = a3;
  *(unsigned char *)(a1 + 750) = BYTE2(a3);
  int v26 = 0;
  uint64_t v25 = 0;
  int v24 = 0;
  uint64_t v23 = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  unsigned int v4 = (long long *)(a1 + 240);
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  uint64_t result = peridot::PeridotDXPBaselineRemoval::strayPeakUpdate((peridot::PeridotDXPBaselineRemoval *)a1, flt_25913472C, (float *)&v25, flt_259134738, (float *)&v23);
  if (!result)
  {
    uint64_t v6 = 0;
    *(_OWORD *)(a1 + 432) = xmmword_259120AC0;
    *(_OWORD *)(a1 + 448) = xmmword_259120AD0;
    long long v7 = v4[8];
    long long v8 = v4[9];
    long long v9 = v4[6];
    *(_OWORD *)(a1 + 592) = v4[7];
    *(_OWORD *)(a1 + 608) = v7;
    long long v10 = v4[4];
    long long v11 = v4[5];
    long long v12 = v4[2];
    *(_OWORD *)(a1 + 528) = v4[3];
    *(_OWORD *)(a1 + 544) = v10;
    *(_OWORD *)(a1 + 560) = v11;
    *(_OWORD *)(a1 + 576) = v9;
    long long v13 = *v4;
    long long v14 = v4[1];
    *(_OWORD *)(a1 + 464) = xmmword_259120AB0;
    *(_OWORD *)(a1 + 480) = v13;
    *(_DWORD *)(a1 + 400) = 1082130432;
    *(_OWORD *)(a1 + 496) = v14;
    *(_OWORD *)(a1 + 512) = v12;
    long long v16 = v4[10];
    long long v15 = v4[11];
    *(_OWORD *)(a1 + 624) = v8;
    *(_OWORD *)(a1 + 640) = v16;
    long long v17 = v4[12];
    long long v18 = v4[13];
    *(_OWORD *)(a1 + 656) = v15;
    *(_OWORD *)(a1 + 672) = v17;
    long long v19 = v4[14];
    *(_OWORD *)(a1 + 688) = v18;
    *(_OWORD *)(a1 + 704) = v19;
    *(int64x2_t *)(a1 + 168) = vdupq_n_s64(0x5CuLL);
    *(_DWORD *)(a1 + 160) = 1082130432;
    *(_OWORD *)(a1 + 184) = xmmword_259120AE0;
    *(_OWORD *)(a1 + 216) = xmmword_259120AF0;
    *(void *)(a1 + 232) = 12;
    *(_OWORD *)(a1 + 200) = xmmword_259120B00;
    *(_DWORD *)(a1 + 1040) = 1058642330;
    int64x2_t v20 = (int64x2_t)xmmword_2591200C0;
    int64x2_t v21 = vdupq_n_s64(2uLL);
    int64x2_t v22 = vdupq_n_s64(4uLL);
    do
    {
      *(int64x2_t *)(a1 + v6 + 1048) = v20;
      *(int64x2_t *)(a1 + v6 + 1064) = vaddq_s64(v20, v21);
      int64x2_t v20 = vaddq_s64(v20, v22);
      v6 += 32;
    }
    while (v6 != 2944);
    return 0;
  }
  return result;
}

uint64_t peridot::PeridotDXPBaselineRemoval::setRunMode(uint64_t result, int a2)
{
  *(_WORD *)(result + 748) = a2;
  *(unsigned char *)(result + 750) = BYTE2(a2);
  return result;
}

double peridot::PeridotDXPPreProcessor::PeridotDXPPreProcessor(peridot::PeridotDXPPreProcessor *this)
{
  *(_WORD *)this = 257;
  *((unsigned char *)this + 2) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 99) = 0;
  *((void *)this + 98) = 0;
  *((_WORD *)this + 402) = 257;
  *((unsigned char *)this + 806) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *((void *)this + 828) = 0;
  *((void *)this + 1013) = 0;
  *((void *)this + 1198) = 0;
  *((void *)this + 4925) = 0;
  *((void *)this + 5110) = 0;
  *((void *)this + 5295) = 0;
  *((void *)this + 5480) = 0;
  *((void *)this + 5665) = 0;
  *((void *)this + 5850) = 0;
  *(_OWORD *)((char *)this + 49784) = 0u;
  *(_OWORD *)((char *)this + 49800) = 0u;
  *(_OWORD *)((char *)this + 49816) = 0u;
  *(_OWORD *)((char *)this + 50648) = 0u;
  *(_OWORD *)((char *)this + 50664) = 0u;
  *(_OWORD *)((char *)this + 50680) = 0u;
  *(_OWORD *)((char *)this + 50696) = 0u;
  *(_OWORD *)((char *)this + 50712) = 0u;
  *(_OWORD *)((char *)this + 50728) = 0u;
  *(_OWORD *)((char *)this + 50744) = 0u;
  *(_OWORD *)((char *)this + 50760) = 0u;
  *(_OWORD *)((char *)this + 50776) = 0u;
  *(_OWORD *)((char *)this + 50792) = 0u;
  *(_OWORD *)((char *)this + 50808) = 0u;
  *(_OWORD *)((char *)this + 50824) = 0u;
  *(_OWORD *)((char *)this + 50840) = 0u;
  *(_OWORD *)((char *)this + 50856) = 0u;
  *(_OWORD *)((char *)this + 50872) = 0u;
  *(_OWORD *)((char *)this + 50888) = 0u;
  *(_OWORD *)((char *)this + 50904) = 0u;
  *(_OWORD *)((char *)this + 50920) = 0u;
  *(_OWORD *)((char *)this + 50936) = 0u;
  *(_OWORD *)((char *)this + 50952) = 0u;
  *(_OWORD *)((char *)this + 50968) = 0u;
  *(_OWORD *)((char *)this + 50984) = 0u;
  *(_OWORD *)((char *)this + 51000) = 0u;
  *(_OWORD *)((char *)this + 51016) = 0u;
  *(_OWORD *)((char *)this + 51032) = 0u;
  *(_OWORD *)((char *)this + 51048) = 0u;
  *(_OWORD *)((char *)this + 51064) = 0u;
  return result;
}

{
  double result;

  *(_WORD *)this = 257;
  *((unsigned char *)this + 2) = 0;
  *((void *)this + 97) = 0;
  *((void *)this + 99) = 0;
  *((void *)this + 98) = 0;
  *((_WORD *)this + 402) = 257;
  *((unsigned char *)this + 806) = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 808) = 0u;
  *(_OWORD *)((char *)this + 824) = 0u;
  *(_OWORD *)((char *)this + 840) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 62) = 0u;
  *(_OWORD *)((char *)this + 1064) = 0u;
  *(_OWORD *)((char *)this + 1080) = 0u;
  *(_OWORD *)((char *)this + 1048) = 0u;
  *((void *)this + 828) = 0;
  *((void *)this + 1013) = 0;
  *((void *)this + 1198) = 0;
  *((void *)this + 4925) = 0;
  *((void *)this + 5110) = 0;
  *((void *)this + 5295) = 0;
  *((void *)this + 5480) = 0;
  *((void *)this + 5665) = 0;
  *((void *)this + 5850) = 0;
  *(_OWORD *)((char *)this + 49784) = 0u;
  *(_OWORD *)((char *)this + 49800) = 0u;
  *(_OWORD *)((char *)this + 49816) = 0u;
  *(_OWORD *)((char *)this + 50648) = 0u;
  *(_OWORD *)((char *)this + 50664) = 0u;
  *(_OWORD *)((char *)this + 50680) = 0u;
  *(_OWORD *)((char *)this + 50696) = 0u;
  *(_OWORD *)((char *)this + 50712) = 0u;
  *(_OWORD *)((char *)this + 50728) = 0u;
  *(_OWORD *)((char *)this + 50744) = 0u;
  *(_OWORD *)((char *)this + 50760) = 0u;
  *(_OWORD *)((char *)this + 50776) = 0u;
  *(_OWORD *)((char *)this + 50792) = 0u;
  *(_OWORD *)((char *)this + 50808) = 0u;
  *(_OWORD *)((char *)this + 50824) = 0u;
  *(_OWORD *)((char *)this + 50840) = 0u;
  *(_OWORD *)((char *)this + 50856) = 0u;
  *(_OWORD *)((char *)this + 50872) = 0u;
  *(_OWORD *)((char *)this + 50888) = 0u;
  *(_OWORD *)((char *)this + 50904) = 0u;
  *(_OWORD *)((char *)this + 50920) = 0u;
  *(_OWORD *)((char *)this + 50936) = 0u;
  *(_OWORD *)((char *)this + 50952) = 0u;
  *(_OWORD *)((char *)this + 50968) = 0u;
  *(_OWORD *)((char *)this + 50984) = 0u;
  *(_OWORD *)((char *)this + 51000) = 0u;
  *(_OWORD *)((char *)this + 51016) = 0u;
  *(_OWORD *)((char *)this + 51032) = 0u;
  *(_OWORD *)((char *)this + 51048) = 0u;
  *(_OWORD *)((char *)this + 51064) = 0u;
  return result;
}

void peridot::PeridotDXPPreProcessor::~PeridotDXPPreProcessor(peridot::PeridotDXPPreProcessor *this)
{
  float64x2_t v2 = (void **)((char *)this + 50912);
  unsigned int v3 = (void (***)(void))*((void *)this + 6382);
  if (v3)
  {
    unsigned int v4 = (void (***)(void))*((void *)this + 6383);
    unint64_t v5 = (void *)*((void *)this + 6382);
    if (v4 != v3)
    {
      uint64_t v6 = v4 - 3;
      long long v7 = v4 - 3;
      long long v8 = v4 - 3;
      do
      {
        long long v9 = *v8;
        v8 -= 3;
        (*v9)(v7);
        v6 -= 3;
        BOOL v10 = v7 == v3;
        long long v7 = v8;
      }
      while (!v10);
      unint64_t v5 = v2[18];
    }
    v2[19] = v3;
    operator delete(v5);
  }
  long long v11 = (void (***)(void))v2[15];
  if (v11)
  {
    long long v12 = (void (***)(void))v2[16];
    long long v13 = v2[15];
    if (v12 != v11)
    {
      long long v14 = v12 - 3;
      long long v15 = v12 - 3;
      long long v16 = v12 - 3;
      do
      {
        long long v17 = *v16;
        v16 -= 3;
        (*v17)(v15);
        v14 -= 3;
        BOOL v10 = v15 == v11;
        long long v15 = v16;
      }
      while (!v10);
      long long v13 = v2[15];
    }
    v2[16] = v11;
    operator delete(v13);
  }
  long long v18 = (void (***)(void))v2[12];
  if (v18)
  {
    long long v19 = (void (***)(void))v2[13];
    int64x2_t v20 = v2[12];
    if (v19 != v18)
    {
      int64x2_t v21 = v19 - 3;
      int64x2_t v22 = v19 - 3;
      uint64_t v23 = v19 - 3;
      do
      {
        int v24 = *v23;
        v23 -= 3;
        (*v24)(v22);
        v21 -= 3;
        BOOL v10 = v22 == v18;
        int64x2_t v22 = v23;
      }
      while (!v10);
      int64x2_t v20 = v2[12];
    }
    v2[13] = v18;
    operator delete(v20);
  }
  uint64_t v25 = (void (***)(void))v2[9];
  if (v25)
  {
    int v26 = (void (***)(void))v2[10];
    uint64_t v27 = v2[9];
    if (v26 != v25)
    {
      unint64_t v28 = v26 - 3;
      uint64_t v29 = v26 - 3;
      uint64_t v30 = v26 - 3;
      do
      {
        uint64_t v31 = *v30;
        v30 -= 3;
        (*v31)(v29);
        v28 -= 3;
        BOOL v10 = v29 == v25;
        uint64_t v29 = v30;
      }
      while (!v10);
      uint64_t v27 = v2[9];
    }
    v2[10] = v25;
    operator delete(v27);
  }
  uint64_t v32 = (void (***)(void))v2[6];
  if (v32)
  {
    uint64_t v33 = (void (***)(void))v2[7];
    unsigned int v34 = v2[6];
    if (v33 != v32)
    {
      uint64_t v35 = v33 - 3;
      uint64_t v36 = v33 - 3;
      uint64_t v37 = v33 - 3;
      do
      {
        unint64_t v38 = *v37;
        v37 -= 3;
        (*v38)(v36);
        v35 -= 3;
        BOOL v10 = v36 == v32;
        uint64_t v36 = v37;
      }
      while (!v10);
      unsigned int v34 = v2[6];
    }
    v2[7] = v32;
    operator delete(v34);
  }
  size_t v39 = (void **)((char *)this + 50648);
  size_t v40 = (void (***)(void))v2[3];
  if (v40)
  {
    unint64_t v41 = (void (***)(void))v2[4];
    size_t v42 = v2[3];
    if (v41 != v40)
    {
      size_t v43 = v41 - 3;
      float v44 = v41 - 3;
      float v45 = v41 - 3;
      do
      {
        float v46 = *v45;
        v45 -= 3;
        (*v46)(v44);
        v43 -= 3;
        BOOL v10 = v44 == v40;
        float v44 = v45;
      }
      while (!v10);
      size_t v42 = v2[3];
    }
    v2[4] = v40;
    operator delete(v42);
  }
  uint64_t v47 = (char *)*v2;
  if (*v2)
  {
    uint64_t v48 = (char *)v2[1];
    float v49 = *v2;
    if (v48 != v47)
    {
      uint64_t v50 = v48 - 24;
      int v51 = v48 - 24;
      float v52 = v48 - 24;
      do
      {
        uint64_t v53 = *(void (***)(char *))v52;
        v52 -= 24;
        (*v53)(v51);
        v50 -= 24;
        BOOL v10 = v51 == v47;
        int v51 = v52;
      }
      while (!v10);
      float v49 = *v2;
    }
    v2[1] = v47;
    operator delete(v49);
  }
  uint64_t v54 = (void (***)(void))*((void *)this + 6361);
  if (v54)
  {
    float32x4_t v55 = (void (***)(void))*((void *)this + 6362);
    uint64_t v56 = (void *)*((void *)this + 6361);
    if (v55 != v54)
    {
      size_t v57 = v55 - 3;
      int v58 = v55 - 3;
      double v59 = v55 - 3;
      do
      {
        uint64_t v60 = *v59;
        v59 -= 3;
        (*v60)(v58);
        v57 -= 3;
        BOOL v10 = v58 == v54;
        int v58 = v59;
      }
      while (!v10);
      uint64_t v56 = (void *)*((void *)this + 6361);
    }
    *((void *)this + 6362) = v54;
    operator delete(v56);
  }
  uint64_t v61 = (void (***)(void))*((void *)this + 6358);
  if (v61)
  {
    unint64_t v62 = (void (***)(void))*((void *)this + 6359);
    uint64_t v63 = (void *)*((void *)this + 6358);
    if (v62 != v61)
    {
      uint64_t v64 = v62 - 3;
      CGRect v65 = v62 - 3;
      uint64_t v66 = v62 - 3;
      do
      {
        uint64_t v67 = *v66;
        v66 -= 3;
        (*v67)(v65);
        v64 -= 3;
        BOOL v10 = v65 == v61;
        CGRect v65 = v66;
      }
      while (!v10);
      uint64_t v63 = (void *)*((void *)this + 6358);
    }
    *((void *)this + 6359) = v61;
    operator delete(v63);
  }
  uint8x8_t v68 = (void (***)(void))*((void *)this + 6355);
  if (v68)
  {
    uint64_t v69 = (void (***)(void))*((void *)this + 6356);
    CGPoint v70 = (void *)*((void *)this + 6355);
    if (v69 != v68)
    {
      CGPoint v71 = v69 - 3;
      CGSize v72 = v69 - 3;
      char v73 = v69 - 3;
      do
      {
        uint64_t v74 = *v73;
        v73 -= 3;
        (*v74)(v72);
        v71 -= 3;
        BOOL v10 = v72 == v68;
        CGSize v72 = v73;
      }
      while (!v10);
      CGPoint v70 = (void *)*((void *)this + 6355);
    }
    *((void *)this + 6356) = v68;
    operator delete(v70);
  }
  unint64_t v75 = (void (***)(void))*((void *)this + 6352);
  if (v75)
  {
    float32x4_t v76 = (void (***)(void))*((void *)this + 6353);
    uint64_t v77 = (void *)*((void *)this + 6352);
    if (v76 != v75)
    {
      uint64_t v78 = v76 - 3;
      float v79 = v76 - 3;
      float v80 = v76 - 3;
      do
      {
        float v81 = *v80;
        v80 -= 3;
        (*v81)(v79);
        v78 -= 3;
        BOOL v10 = v79 == v75;
        float v79 = v80;
      }
      while (!v10);
      uint64_t v77 = (void *)*((void *)this + 6352);
    }
    *((void *)this + 6353) = v75;
    operator delete(v77);
  }
  char v82 = (void (***)(void))*((void *)this + 6349);
  if (v82)
  {
    unsigned int v83 = (void (***)(void))*((void *)this + 6350);
    uint64_t v84 = (void *)*((void *)this + 6349);
    if (v83 != v82)
    {
      unint64_t v85 = v83 - 3;
      unint64_t v86 = v83 - 3;
      unsigned int v87 = v83 - 3;
      do
      {
        float v88 = *v87;
        v87 -= 3;
        (*v88)(v86);
        v85 -= 3;
        BOOL v10 = v86 == v82;
        unint64_t v86 = v87;
      }
      while (!v10);
      uint64_t v84 = (void *)*((void *)this + 6349);
    }
    *((void *)this + 6350) = v82;
    operator delete(v84);
  }
  float v89 = (void (***)(void))*((void *)this + 6346);
  if (v89)
  {
    size_t v90 = (void (***)(void))*((void *)this + 6347);
    unint64_t v91 = (void *)*((void *)this + 6346);
    if (v90 != v89)
    {
      __int32 v92 = v90 - 3;
      int16x4_t v93 = v90 - 3;
      int8x8_t v94 = v90 - 3;
      do
      {
        __int32 v95 = *v94;
        v94 -= 3;
        (*v95)(v93);
        v92 -= 3;
        BOOL v10 = v93 == v89;
        int16x4_t v93 = v94;
      }
      while (!v10);
      unint64_t v91 = (void *)*((void *)this + 6346);
    }
    *((void *)this + 6347) = v89;
    operator delete(v91);
  }
  float32x4_t v96 = (void (***)(void))*((void *)this + 6343);
  if (v96)
  {
    int16x8_t v97 = (void (***)(void))*((void *)this + 6344);
    uint64_t v98 = (void *)*((void *)this + 6343);
    if (v97 != v96)
    {
      unint64_t v99 = v97 - 3;
      unint64_t v100 = v97 - 3;
      double v101 = v97 - 3;
      do
      {
        float v102 = *v101;
        v101 -= 3;
        (*v102)(v100);
        v99 -= 3;
        BOOL v10 = v100 == v96;
        unint64_t v100 = v101;
      }
      while (!v10);
      uint64_t v98 = (void *)*((void *)this + 6343);
    }
    *((void *)this + 6344) = v96;
    operator delete(v98);
  }
  float v103 = (void (***)(void))*((void *)this + 6340);
  if (v103)
  {
    float32x4_t v104 = (void (***)(void))*((void *)this + 6341);
    float v105 = (void *)*((void *)this + 6340);
    if (v104 != v103)
    {
      float v106 = v104 - 3;
      float v107 = v104 - 3;
      float v108 = v104 - 3;
      do
      {
        BOOL v109 = *v108;
        v108 -= 3;
        (*v109)(v107);
        v106 -= 3;
        BOOL v10 = v107 == v103;
        float v107 = v108;
      }
      while (!v10);
      float v105 = (void *)*((void *)this + 6340);
    }
    *((void *)this + 6341) = v103;
    operator delete(v105);
  }
  unint64_t v110 = (void (***)(void))*((void *)this + 6337);
  if (v110)
  {
    unint64_t v111 = (void (***)(void))*((void *)this + 6338);
    unsigned int v112 = (void *)*((void *)this + 6337);
    if (v111 != v110)
    {
      float v113 = v111 - 3;
      unsigned int v114 = v111 - 3;
      unint64_t v115 = v111 - 3;
      do
      {
        uint32x4_t v116 = *v115;
        v115 -= 3;
        (*v116)(v114);
        v113 -= 3;
        BOOL v10 = v114 == v110;
        unsigned int v114 = v115;
      }
      while (!v10);
      unsigned int v112 = (void *)*((void *)this + 6337);
    }
    *((void *)this + 6338) = v110;
    operator delete(v112);
  }
  float32x4_t v117 = (void **)((char *)this + 49784);
  float32x4_t v118 = (void (***)(void))*((void *)this + 6334);
  if (v118)
  {
    double v119 = (void (***)(void))*((void *)this + 6335);
    int v120 = (void *)*((void *)this + 6334);
    if (v119 != v118)
    {
      int16x8_t v121 = v119 - 3;
      unint64_t v122 = v119 - 3;
      int8x16_t v123 = v119 - 3;
      do
      {
        float32x4_t v124 = *v123;
        v123 -= 3;
        (*v124)(v122);
        v121 -= 3;
        BOOL v10 = v122 == v118;
        unint64_t v122 = v123;
      }
      while (!v10);
      int v120 = (void *)*((void *)this + 6334);
    }
    *((void *)this + 6335) = v118;
    operator delete(v120);
  }
  float32x4_t v125 = (char *)*v39;
  if (*v39)
  {
    float32x4_t v126 = (char *)*((void *)this + 6332);
    float32x4_t v127 = *v39;
    if (v126 != v125)
    {
      int8x16_t v128 = v126 - 24;
      float32x4_t v129 = v126 - 24;
      float32x4_t v130 = v126 - 24;
      do
      {
        float32x4_t v131 = *(void (***)(char *))v130;
        v130 -= 24;
        (*v131)(v129);
        v128 -= 24;
        BOOL v10 = v129 == v125;
        float32x4_t v129 = v130;
      }
      while (!v10);
      float32x4_t v127 = *v39;
    }
    *((void *)this + 6332) = v125;
    operator delete(v127);
  }
  float32x4_t v132 = (void *)*((void *)this + 6226);
  if (v132)
  {
    *((void *)this + 6227) = v132;
    operator delete(v132);
  }
  size_t v133 = *v117;
  if (*v117)
  {
    *((void *)this + 6224) = v133;
    operator delete(v133);
  }
  peridot::PeridotDXPBaselineRemoval::~PeridotDXPBaselineRemoval((peridot::PeridotDXPPreProcessor *)((char *)this + 56));
}

uint64_t peridot::PeridotDXPPreProcessor::setRunMode(uint64_t result, int a2)
{
  *(_WORD *)double result = a2;
  *(unsigned char *)(result + 2) = BYTE2(a2);
  *(_WORD *)(result + 804) = a2;
  *(unsigned char *)(result + 806) = BYTE2(a2);
  return result;
}

uint64_t peridot::PeridotDXPPreProcessor::strayPeakUpdate(peridot::PeridotDXPPreProcessor *this, float *a2, float *a3, float *a4, float *a5)
{
  return peridot::PeridotDXPBaselineRemoval::strayPeakUpdate((peridot::PeridotDXPPreProcessor *)((char *)this + 56), a2, a3, a4, a5);
}

void *std::operator<<[abi:ne180100]<std::char_traits<char>>()
{
  return std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x263F8C100], (uint64_t)"not supported", 13);
}

void *std::endl[abi:ne180100]<char,std::char_traits<char>>(void *a1)
{
  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
  float64x2_t v2 = std::locale::use_facet(&v4, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_2590DEFC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

void sub_2590DF080(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double peridot::PeridotDxpMacroSpatial::PeridotDxpMacroSpatial(peridot::PeridotDxpMacroSpatial *this)
{
  double result = 32.0000076;
  *(_OWORD *)this = xmmword_2591205A0;
  *((_DWORD *)this + 4) = 1092616192;
  *((void *)this + 6) = 0;
  return result;
}

{
  double result;

  double result = 32.0000076;
  *(_OWORD *)this = xmmword_2591205A0;
  *((_DWORD *)this + 4) = 1092616192;
  *((void *)this + 6) = 0;
  return result;
}

void peridot::PeridotDxpMacroSpatial::~PeridotDxpMacroSpatial(id *this)
{
}

{
}

void peridot::PeridotDxpMacroSpatial::init(id *this, const peridot::PeridotDXPCalib *a2, id obj)
{
}

void *peridot::PeridotDxpMacroSpatial::configure(void *this, const peridot::PeridotDXPCalib *a2)
{
  uint64_t v2 = *((void *)a2 + 503);
  *(void *)((char *)this + 26) = *(void *)((char *)a2 + 4030);
  *(void *)((char *)this + 20) = v2;
  uint64_t v3 = *(void *)((char *)a2 + 4038);
  this[5] = *(void *)((char *)a2 + 4044);
  *(void *)((char *)this + 34) = v3;
  return this;
}

void peridot::PeridotDxpMacroSpatial::convertZuvToR(id *this, float a2, float a3, float a4)
{
  long long v7 = (double *)operator new(0x10uLL);
  double *v7 = a2;
  v7[1] = a3;
  long long v8 = operator new(0x10uLL);
  void *v8 = 0;
  v8[1] = 0;
  [this[6] undistort:1 distortedPixels:v7 outUndistorted:v8];
  [this[6] intrinsicMatrix];
  operator new[]();
}

void sub_2590DF82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, void *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  Matrix<float>::~Matrix((uint64_t)&a22);
  Matrix<float>::~Matrix((uint64_t)&a27);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a32);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a37);
  MatrixNxPts<1u,float>::~MatrixNxPts(v37 - 232);
  operator delete(__p);
  operator delete(a11);
  _Unwind_Resume(a1);
}

void sub_2590E03FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a24)
  {
    if (a22)
    {
      MEMORY[0x25A2D62A0](a22, 0x1000C8052888210);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t coder::array_base<float,int,2>::ensureCapacity(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    if (v2 <= 16) {
      int v2 = 16;
    }
    while (v2 < a2)
    {
      if (v2 <= 0x3FFFFFFF) {
        v2 *= 2;
      }
      else {
        int v2 = 0x7FFFFFFF;
      }
    }
    operator new[]();
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t Buckets::Buckets(uint64_t a1, char **a2)
{
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v67 = a1 + 16;
  uint8x8_t v68 = (void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  uint64_t v3 = a2[1];
  uint64_t v4 = v3 - *a2;
  if ((unint64_t)v4 <= 7) {
    __assert_rtn("Buckets", "PeridotTelemetry.mm", 87, "false");
  }
  if ((char **)(a1 + 16) == a2) {
    goto LABEL_55;
  }
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)(a1 + 16), *a2, v3, v4 >> 2);
  unint64_t v5 = ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2) - 1;
  uint64_t v6 = *(char **)(a1 + 40);
  if (v5 <= (uint64_t)(*(void *)(a1 + 56) - (void)v6) >> 3) {
    goto LABEL_20;
  }
  if (v5 >> 61) {
LABEL_55:
  }
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  long long v7 = *(char **)(a1 + 48);
  long long v8 = (char *)operator new(8 * v5);
  uint64_t v9 = v7 - v6;
  unint64_t v10 = (unint64_t)&v8[(v7 - v6) & 0xFFFFFFFFFFFFFFF8];
  long long v11 = &v8[8 * v5];
  int64_t v12 = v7 - v6;
  if (v7 != v6)
  {
    unint64_t v13 = v12 - 8;
    if ((unint64_t)(v12 - 8) > 0x77)
    {
      if ((unint64_t)&v7[-(v13 & 0xFFFFFFFFFFFFFFF8) - 8] >= v10
        || (long long v14 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFF8],
            &v8[(v9 & 0xFFFFFFFFFFFFFFF8) - (v13 & 0xFFFFFFFFFFFFFFF8) - 8] >= v7))
      {
        uint64_t v15 = v9 >> 3;
        uint64_t v16 = (v13 >> 3) + 1;
        long long v14 = (char *)(v10 - 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL));
        long long v17 = v7 - 32;
        long long v18 = &v8[8 * v15 - 16];
        uint64_t v19 = v16 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v21 = *(_OWORD *)v17;
          long long v20 = *((_OWORD *)v17 + 1);
          *(_OWORD *)long long v17 = 0uLL;
          *((_OWORD *)v17 + 1) = 0uLL;
          v17 -= 32;
          *((_OWORD *)v18 - 1) = v21;
          *(_OWORD *)long long v18 = v20;
          v18 -= 32;
          v19 -= 4;
        }
        while (v19);
        if (v16 == (v16 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_16:
          uint64_t v6 = *(char **)(a1 + 40);
          uint64_t v23 = *(char **)(a1 + 48);
          *(void *)(a1 + 40) = v14;
          *(void *)(a1 + 48) = v10;
          *(void *)(a1 + 56) = v11;
          while (v23 != v6)
          {
            int v24 = (void *)*((void *)v23 - 1);
            v23 -= 8;
          }
          goto LABEL_18;
        }
        v7 -= 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
      }
    }
    else
    {
      long long v14 = &v8[(v7 - v6) & 0xFFFFFFFFFFFFFFF8];
    }
    do
    {
      uint64_t v22 = *((void *)v7 - 1);
      v7 -= 8;
      *(void *)long long v7 = 0;
      *((void *)v14 - 1) = v22;
      v14 -= 8;
    }
    while (v7 != v6);
    goto LABEL_16;
  }
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
LABEL_18:
  if (v6) {
    operator delete(v6);
  }
LABEL_20:
  uint64_t v25 = *(float **)(a1 + 16);
  unint64_t v26 = 0x263F08000uLL;
  if (*(void *)(a1 + 24) - (void)v25 != 4)
  {
    unint64_t v36 = 0;
    while (1)
    {
      float v38 = v25[v36++];
      float v39 = v25[v36];
      size_t v40 = *(void **)(v26 + 2880);
      unint64_t v41 = floatToStringScientific(v38);
      size_t v42 = floatToStringScientific(v39);
      size_t v43 = objc_msgSend(v40, "stringWithFormat:", @"(%@,%@]"), v41, v42, v67;

      float v45 = *(void **)(a1 + 48);
      unint64_t v44 = *(void *)(a1 + 56);
      if ((unint64_t)v45 < v44)
      {
        void *v45 = v43;
        uint64_t v37 = v45 + 1;
        goto LABEL_24;
      }
      uint64_t v46 = (uint64_t)v45 - *v68;
      uint64_t v47 = v46 >> 3;
      unint64_t v48 = (v46 >> 3) + 1;
      if (v48 >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v44 - *v68;
      uint64_t v50 = v49 >> 2;
      if (v49 >> 2 <= v48) {
        uint64_t v50 = (v46 >> 3) + 1;
      }
      unint64_t v51 = (unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v50;
      if (v51)
      {
        if (v51 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        float v52 = (char *)operator new(8 * v51);
      }
      else
      {
        float v52 = 0;
      }
      uint64_t v53 = &v52[8 * v47];
      uint64_t v54 = &v52[8 * v51];
      *(void *)uint64_t v53 = v43;
      uint64_t v37 = v53 + 8;
      float32x4_t v55 = *(char **)(a1 + 40);
      uint64_t v56 = *(char **)(a1 + 48);
      if (v56 != v55) {
        break;
      }
      *(void *)(a1 + 40) = v53;
      *(void *)(a1 + 48) = v37;
      *(void *)(a1 + 56) = v54;
LABEL_51:
      unint64_t v26 = 0x263F08000;
      if (v56) {
        goto LABEL_52;
      }
LABEL_24:
      *(void *)(a1 + 48) = v37;

      uint64_t v25 = *(float **)(a1 + 16);
      if (v36 >= ((uint64_t)(*(void *)(a1 + 24) - (void)v25) >> 2) - 1) {
        goto LABEL_21;
      }
    }
    unint64_t v57 = v56 - v55 - 8;
    if (v57 > 0x77
      && (&v56[-(v57 & 0xFFFFFFFFFFFFFFF8) - 8] >= v53 || &v52[v46 - (v57 & 0xFFFFFFFFFFFFFFF8) - 8] >= v56))
    {
      uint64_t v58 = (v57 >> 3) + 1;
      v53 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      double v59 = v56 - 32;
      uint64_t v60 = &v52[8 * v47 - 16];
      uint64_t v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v63 = *(_OWORD *)v59;
        long long v62 = *((_OWORD *)v59 + 1);
        *(_OWORD *)double v59 = 0uLL;
        *((_OWORD *)v59 + 1) = 0uLL;
        v59 -= 32;
        *((_OWORD *)v60 - 1) = v63;
        *(_OWORD *)uint64_t v60 = v62;
        v60 -= 32;
        v61 -= 4;
      }
      while (v61);
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        uint64_t v56 = *(char **)(a1 + 40);
        CGRect v65 = *(char **)(a1 + 48);
        *(void *)(a1 + 40) = v53;
        *(void *)(a1 + 48) = v37;
        *(void *)(a1 + 56) = v54;
        if (v65 != v56)
        {
          unint64_t v26 = 0x263F08000;
          do
          {
            uint64_t v66 = (void *)*((void *)v65 - 1);
            v65 -= 8;
          }
          while (v65 != v56);
          if (!v56) {
            goto LABEL_24;
          }
LABEL_52:
          operator delete(v56);
          goto LABEL_24;
        }
        goto LABEL_51;
      }
      v56 -= 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
    }
    do
    {
      uint64_t v64 = *((void *)v56 - 1);
      v56 -= 8;
      *(void *)uint64_t v56 = 0;
      *((void *)v53 - 1) = v64;
      v53 -= 8;
    }
    while (v56 != v55);
    goto LABEL_45;
  }
LABEL_21:
  uint64_t v27 = *(void **)(v26 + 2880);
  unint64_t v28 = floatToStringScientific(*v25);
  uint64_t v29 = objc_msgSend(v27, "stringWithFormat:", @"(-Inf,%@]"), v28;
  uint64_t v30 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v29;

  uint64_t v31 = *(void **)(v26 + 2880);
  uint64_t v32 = floatToStringScientific(*(float *)(*(void *)(a1 + 24) - 4));
  uint64_t v33 = objc_msgSend(v31, "stringWithFormat:", @"(%@,Inf]"), v32;
  unsigned int v34 = *(void **)a1;
  *(void *)a1 = v33;

  return a1;
}

void sub_2590E0AC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11, void **a12)
{
  std::vector<NSString * {__strong}>::~vector[abi:ne180100](a12);
  uint64_t v15 = *a11;
  if (*a11)
  {
    *(void *)(v12 + 24) = v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

id floatToStringScientific(float a1)
{
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
  std::ostream::operator<<();
  std::stringbuf::str();
  unint64_t v1 = HIBYTE(v14);
  char v2 = HIBYTE(v14);
  if (v14 < 0) {
    unint64_t v1 = (unint64_t)__p[1];
  }
  uint64_t v3 = (void *)MEMORY[0x263F8C2C8];
  if (v1 >= 5)
  {
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v10);
    std::ostream::operator<<();
    *(_DWORD *)((char *)&v10[1] + *(void *)(v10[0] - 24)) = *(_DWORD *)((unsigned char *)&v10[1] + *(void *)(v10[0] - 24)) & 0xFFFFFEFB | 0x100;
    std::stringbuf::str();
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)vImage_Buffer __p = v8;
    uint64_t v14 = v9;
    v10[0] = *v3;
    *(void *)((char *)v10 + *(void *)(v10[0] - 24)) = v3[3];
    v10[1] = MEMORY[0x263F8C318] + 16;
    if (v11 < 0) {
      operator delete((void *)v10[9]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x25A2D6270](&v12);
    char v2 = HIBYTE(v14);
  }
  BOOL v4 = v2 < 0;
  unint64_t v5 = __p;
  if (v4) {
    unint64_t v5 = (void **)__p[0];
  }
  uint64_t v6 = objc_msgSend(NSString, "stringWithFormat:", @"%s", v5);
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  v15[0] = *v3;
  *(void *)((char *)v15 + *(void *)(v15[0] - 24)) = v3[3];
  v15[1] = MEMORY[0x263F8C318] + 16;
  if (v16 < 0) {
    operator delete((void *)v15[9]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](&v17);
  return v6;
}

void sub_2590E0E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  std::ostringstream::~ostringstream((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void **std::vector<NSString * {__strong}>::~vector[abi:ne180100](void **a1)
{
  char v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    BOOL v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = (void *)*((void *)v3 - 1);
        v3 -= 8;
      }
      while (v3 != v2);
      BOOL v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t std::ostringstream::basic_ostringstream[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_2590E1054(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](v1);
  _Unwind_Resume(a1);
}

uint64_t std::ostringstream::~ostringstream(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](a1 + 112);
  return a1;
}

__CFString *Buckets::getBucketName(Buckets *this, float a2)
{
  uint64_t v2 = (float *)*((void *)this + 2);
  float v3 = *v2;
  if (*v2 >= a2)
  {
    this = (Buckets *)((char *)this + 8);
    goto LABEL_11;
  }
  uint64_t v4 = *((void *)this + 3);
  if (*(float *)(v4 - 4) < a2)
  {
LABEL_11:
    long long v7 = (__CFString *)*(id *)this;
    goto LABEL_12;
  }
  uint64_t v5 = (v4 - (uint64_t)v2) >> 2;
  uint64_t v6 = 1;
  long long v7 = @"N/A";
  while (v5 != v6)
  {
    uint64_t v8 = v6;
    BOOL v9 = v3 < a2;
    float v3 = v2[v6++];
    BOOL v9 = !v9 || v3 < a2;
    if (!v9)
    {
      this = (Buckets *)(*((void *)this + 5) + 8 * (v8 - 1));
      goto LABEL_11;
    }
  }
LABEL_12:
  return v7;
}

void Filters::Filters(Filters *this)
{
  uint64_t v2 = (char *)operator new(0x58uLL);
  int v24 = v2 + 88;
  uint64_t v25 = v2 + 88;
  *((_OWORD *)v2 + 2) = xmmword_2591347C8;
  *((_OWORD *)v2 + 3) = unk_2591347D8;
  *((_OWORD *)v2 + 4) = xmmword_2591347E8;
  *((void *)v2 + 10) = 0x41C8000041A00000;
  *(_OWORD *)uint64_t v2 = xmmword_2591347A8;
  *((_OWORD *)v2 + 1) = unk_2591347B8;
  uint64_t v23 = v2;
  Buckets::Buckets((uint64_t)this, &v23);
  if (v23)
  {
    int v24 = v23;
    operator delete(v23);
  }
  float v3 = operator new(0x34uLL);
  long long v21 = v3 + 13;
  uint64_t v22 = (char *)(v3 + 13);
  v3[12] = 1065353216;
  *(_OWORD *)float v3 = xmmword_259134800;
  *((_OWORD *)v3 + 1) = unk_259134810;
  *((_OWORD *)v3 + 2) = xmmword_259134820;
  vImage_Buffer __p = v3;
  Buckets::Buckets((uint64_t)this + 64, (char **)&__p);
  if (__p)
  {
    long long v21 = __p;
    operator delete(__p);
  }
  uint64_t v4 = operator new(0x30uLL);
  long long v18 = v4 + 3;
  uint64_t v19 = v4 + 3;
  *uint64_t v4 = xmmword_259134834;
  v4[1] = unk_259134844;
  v4[2] = xmmword_259134854;
  uint64_t v17 = v4;
  Buckets::Buckets((uint64_t)this + 128, (char **)&v17);
  if (v17)
  {
    long long v18 = v17;
    operator delete(v17);
  }
  uint64_t v5 = operator new(0x38uLL);
  uint64_t v15 = (char *)v5 + 56;
  char v16 = (char *)v5 + 56;
  _OWORD *v5 = xmmword_259134864;
  v5[1] = unk_259134874;
  v5[2] = xmmword_259134884;
  *((void *)v5 + 6) = 0x4316000042C80000;
  uint64_t v14 = v5;
  Buckets::Buckets((uint64_t)this + 192, (char **)&v14);
  if (v14)
  {
    uint64_t v15 = v14;
    operator delete(v14);
  }
  uint64_t v6 = operator new(0x10uLL);
  char v11 = v6;
  _OWORD *v6 = xmmword_259120B20;
  uint64_t v12 = v6 + 1;
  unint64_t v13 = v6 + 1;
  Buckets::Buckets((uint64_t)this + 256, (char **)&v11);
  if (v11)
  {
    uint64_t v12 = v11;
    operator delete(v11);
  }
  long long v7 = operator new(0x24uLL);
  BOOL v9 = v7 + 9;
  unint64_t v10 = (char *)(v7 + 9);
  v7[8] = 1036831949;
  *(_OWORD *)long long v7 = xmmword_25913489C;
  *((_OWORD *)v7 + 1) = unk_2591348AC;
  uint64_t v8 = v7;
  Buckets::Buckets((uint64_t)this + 320, (char **)&v8);
  if (v8)
  {
    BOOL v9 = v8;
    operator delete(v8);
  }
}

void sub_2590E1458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  if (__p) {
    operator delete(__p);
  }
  Buckets::~Buckets(v20);
  Buckets::~Buckets(v19);
  Buckets::~Buckets(v18);
  Buckets::~Buckets(v17);
  Buckets::~Buckets(v16);
  _Unwind_Resume(a1);
}

void sub_2590E14E4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x2590E14CCLL);
}

void sub_2590E14FC()
{
}

void sub_2590E1504(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p) {
    operator delete(__p);
  }
  JUMPOUT(0x2590E14D4);
}

void sub_2590E151C()
{
}

void sub_2590E1524(_Unwind_Exception *exception_object)
{
  float v3 = *(void **)(v1 - 72);
  if (v3)
  {
    *(void *)(v1 - 64) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void Buckets::~Buckets(Buckets *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2)
  {
    uint64_t v3 = *((void *)this + 6);
    uint64_t v4 = (void *)*((void *)this + 5);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(void **)(v3 - 8);
        v3 -= 8;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*((void *)this + 5);
    }
    *((void *)this + 6) = v2;
    operator delete(v4);
  }
  uint64_t v6 = (void *)*((void *)this + 2);
  if (v6)
  {
    *((void *)this + 3) = v6;
    operator delete(v6);
  }
}

uint64_t *Filters::filters(Filters *this)
{
  {
    Filters::Filters((Filters *)&Filters::filters(void)::inst);
  }
  return &Filters::filters(void)::inst;
}

void sub_2590E1624(_Unwind_Exception *a1)
{
}

void PeridotTelemetry::reportEvent(PeridotTelemetry *this, NSString *a2, NSDictionary *a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = this;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  uint64_t v5 = a2;
  uint64_t v6 = [(NSString *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v14 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v13 + 1) + 8 * i);
        unint64_t v10 = [(NSString *)v5 objectForKeyedSubscript:v9];
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          [v10 doubleValue];
          if ((v11 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
          {
            NSLog(&cfstr_EventContainsI.isa, v4, v9, v10);

            goto LABEL_17;
          }
        }
      }
      uint64_t v6 = [(NSString *)v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v6) {
        continue;
      }
      break;
    }
  }

  if (PeridotTelemetry::sendToCoreAnalytics)
  {
    uint64_t v12 = v5;
    if ((AnalyticsSendEventLazy() & 1) == 0) {
      NSLog(&cfstr_FailedSendingE.isa, v4);
    }
  }
  if (PeridotTelemetry::printToConsole) {
    NSLog(&stru_27071A2F0.isa, v4, v5);
  }
LABEL_17:
}

void sub_2590E1854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  _Unwind_Resume(a1);
}

id ___ZN16PeridotTelemetry11reportEventEP8NSStringP12NSDictionary_block_invoke(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void PeridotTelemetry::PeridotTelemetry(PeridotTelemetry *this)
{
  *(void *)this = 0;
}

{
  *(void *)this = 0;
}

void PeridotTelemetry::endSession(PeridotTelemetry *this)
{
  if (*(void *)this)
  {
    PeridotTelemetry::reportSessionStatistics(this);
    uint64_t v2 = *(void **)this;
    *(void *)this = 0;
  }
}

void PeridotTelemetry::reportSessionStatistics(PeridotTelemetry *this)
{
  v57[25] = *MEMORY[0x263EF8340];
  uint64_t v35 = [MEMORY[0x263EFF910] now];
  [v35 timeIntervalSinceDate:*(void *)this];
  double v3 = v2;
  if (v2 >= 2.0)
  {
    uint64_t v4 = 0;
    uint64_t v55 = 0;
    do
    {
      uint64_t v5 = *(void *)((char *)this + v4 + 24);
      if (v5)
      {
        v56[0] = @"BankId";
        v57[0] = [NSNumber numberWithUnsignedLong:v55];
        v56[1] = @"OperatingMode";
        uint64_t v54 = (void *)v57[0];
        uint64_t v53 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 2)];
        v57[1] = v53;
        v56[2] = @"Preset";
        float v52 = +[PDUtils getPresetName:*((unsigned int *)this + 2)];
        v57[2] = v52;
        v56[3] = @"NumberOfFrames";
        unint64_t v51 = [NSNumber numberWithUnsignedLong:*(void *)((char *)this + v4 + 24)];
        v57[3] = v51;
        v56[4] = @"SessionTime";
        uint64_t v50 = [NSNumber numberWithDouble:v3];
        v57[4] = v50;
        v56[5] = @"MaxVSpad";
        LODWORD(v6) = *(_DWORD *)((char *)this + v4 + 44);
        uint64_t v49 = [NSNumber numberWithFloat:v6];
        v57[5] = v49;
        v56[6] = @"MinVSpad";
        LODWORD(v7) = *(_DWORD *)((char *)this + v4 + 40);
        unint64_t v48 = [NSNumber numberWithFloat:v7];
        v57[6] = v48;
        v56[7] = @"MaxVSpadDiff";
        *(float *)&double v8 = *(float *)((char *)this + v4 + 44) - *(float *)((char *)this + v4 + 40);
        uint64_t v47 = [NSNumber numberWithFloat:v8];
        v57[7] = v47;
        v56[8] = @"SessionVSpadDiff";
        *(float *)&double v9 = *(float *)((char *)this + v4 + 60) - *(float *)((char *)this + v4 + 56);
        uint64_t v46 = [NSNumber numberWithFloat:v9];
        v57[8] = v46;
        v56[9] = @"MaxPeriscopeTemperature";
        LODWORD(v10) = *(_DWORD *)((char *)this + v4 + 68);
        float v45 = [NSNumber numberWithFloat:v10];
        v57[9] = v45;
        v56[10] = @"MinPeriscopeTemperature";
        LODWORD(v11) = *(_DWORD *)((char *)this + v4 + 64);
        unint64_t v44 = [NSNumber numberWithFloat:v11];
        v57[10] = v44;
        v56[11] = @"MaxPeriscopeTemperatureDiff";
        *(float *)&double v12 = *(float *)((char *)this + v4 + 68) - *(float *)((char *)this + v4 + 64);
        size_t v43 = [NSNumber numberWithFloat:v12];
        v57[11] = v43;
        v56[12] = @"SessionPeriscopeTemperatureDiff";
        *(float *)&double v13 = *(float *)((char *)this + v4 + 84) - *(float *)((char *)this + v4 + 80);
        [NSNumber numberWithFloat:v13];
        v42 = uint64_t v14 = 14 * v5;
        v57[12] = v42;
        v56[13] = @"HighConfSpotsPercentage";
        if (14 * v5) {
          double v15 = (double)*(unint64_t *)((char *)this + v4 + 88) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v15 = 0.0;
        }
        unint64_t v41 = [NSNumber numberWithDouble:v15];
        v57[13] = v41;
        v56[14] = @"EdgeOrReflectionPercentage";
        if (v14) {
          double v16 = (double)*(unint64_t *)((char *)this + v4 + 96) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v16 = 0.0;
        }
        size_t v40 = [NSNumber numberWithDouble:v16];
        v57[14] = v40;
        v56[15] = @"GlarePercentage";
        if (v14) {
          double v17 = (double)*(unint64_t *)((char *)this + v4 + 104) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v17 = 0.0;
        }
        float v39 = [NSNumber numberWithDouble:v17];
        v57[15] = v39;
        v56[16] = @"RegularGlareFAPercentage";
        if (v14) {
          double v18 = (double)*(unint64_t *)((char *)this + v4 + 112) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v18 = 0.0;
        }
        float v38 = [NSNumber numberWithDouble:v18];
        v57[16] = v38;
        v56[17] = @"GroupGlareFAPercentage";
        if (v14) {
          double v19 = (double)*(unint64_t *)((char *)this + v4 + 120) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v19 = 0.0;
        }
        uint64_t v37 = [NSNumber numberWithDouble:v19];
        v57[17] = v37;
        v56[18] = @"SaturatedPercentage";
        if (v14) {
          double v20 = (double)*(unint64_t *)((char *)this + v4 + 136) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v20 = 0.0;
        }
        unint64_t v36 = [NSNumber numberWithDouble:v20];
        v57[18] = v36;
        v56[19] = @"ExtremeAmbPercentage";
        if (v14) {
          double v21 = (double)*(unint64_t *)((char *)this + v4 + 144) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v21 = 0.0;
        }
        uint64_t v22 = [NSNumber numberWithDouble:v21];
        v57[19] = v22;
        v56[20] = @"HighStrayPercentage";
        if (v14) {
          double v23 = (double)*(unint64_t *)((char *)this + v4 + 152) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v23 = 0.0;
        }
        int v24 = [NSNumber numberWithDouble:v23];
        v57[20] = v24;
        v56[21] = @"ReflectivityFilteredSpotsPercentage";
        if (v14) {
          double v25 = (double)*(unint64_t *)((char *)this + v4 + 160) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v25 = 0.0;
        }
        unint64_t v26 = [NSNumber numberWithDouble:v25];
        v57[21] = v26;
        v56[22] = @"SecondEchoFiltered";
        if (v14) {
          double v27 = (double)*(unint64_t *)((char *)this + v4 + 168) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v27 = 0.0;
        }
        unint64_t v28 = [NSNumber numberWithDouble:v27];
        v57[22] = v28;
        v56[23] = @"DRfilterPercentage";
        if (v14) {
          double v29 = (double)*(unint64_t *)((char *)this + v4 + 128) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v29 = 0.0;
        }
        uint64_t v30 = [NSNumber numberWithDouble:v29];
        v57[23] = v30;
        v56[24] = @"OverallFiltered";
        if (v14) {
          double v31 = (double)*(unint64_t *)((char *)this + v4 + 176) * 100.0 / (double)(unint64_t)v14;
        }
        else {
          double v31 = 0.0;
        }
        uint64_t v32 = [NSNumber numberWithDouble:v31];
        v57[24] = v32;
        uint64_t v33 = [NSDictionary dictionaryWithObjects:v57 forKeys:v56 count:25];

        PeridotTelemetry::reportEvent((PeridotTelemetry *)@"com.apple.JasperDepth.SessionStatistics", v33, v34);
      }
      ++v55;
      v4 += 472;
    }
    while (v4 != 3776);
  }
}

void sub_2590E2080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

float PeridotTelemetry::MeasurementStatistics::add(PeridotTelemetry::MeasurementStatistics *this, float a2)
{
  float v2 = *((float *)this + 3);
  if (v2 == 0.0)
  {
    *((float *)this + 4) = a2;
    *(float *)this = a2;
    *((float *)this + 1) = a2;
  }
  else
  {
    float v3 = *(float *)this;
    float v4 = *((float *)this + 1);
    if (*(float *)this > a2) {
      float v3 = a2;
    }
    if (v4 < a2) {
      float v4 = a2;
    }
    *(float *)this = v3;
    *((float *)this + 1) = v4;
  }
  *((float *)this + 5) = a2;
  float result = *((float *)this + 2) + a2;
  *((float *)this + 2) = result;
  *((float *)this + 3) = v2 + 1.0;
  return result;
}

BOOL PeridotTelemetry::allBanksAtTheSameFrame(PeridotTelemetry *this)
{
  uint64_t v1 = *((void *)this + 3);
  return *((void *)this + 62) == v1
      && *((void *)this + 121) == v1
      && *((void *)this + 180) == v1
      && *((void *)this + 239) == v1
      && *((void *)this + 298) == v1
      && *((void *)this + 357) == v1
      && *((void *)this + 416) == v1;
}

uint64_t PeridotTelemetry::saveBankUserOutputData(uint64_t this, const peridot::PeridotUserOutput *a2, uint64_t a3)
{
  unint64_t v3 = 0;
  uint64_t v4 = this + 472 * a3;
  uint64_t v5 = (_DWORD *)(v4 + 316);
  float v6 = 0.0;
  for (uint64_t i = 200; i != 312; i += 8)
  {
    double v9 = (_DWORD *)(v4 + i);
    *double v9 = *((_DWORD *)a2 + 63);
    v9[1] = *((_DWORD *)a2 + 64);
    *(v5 - 1) = *((_DWORD *)a2 + 65);
    _DWORD *v5 = *((_DWORD *)a2 + 66);
    if (*((float *)a2 + 1) >= 0.8)
    {
      unsigned int v8 = *((float *)a2 + 22) >= 0.8 && *((float *)a2 + 21) < *(float *)a2;
      if (*((float *)a2 + 43) >= 0.8 && *((float *)a2 + 42) < *((float *)a2 + 21 * v8)) {
LABEL_2:
      }
        unsigned int v8 = 2;
LABEL_3:
      float v6 = *((float *)a2 + 21 * v8 + 3) + v6;
      ++v3;
      goto LABEL_4;
    }
    double v10 = *((float *)a2 + 43);
    if (*((float *)a2 + 22) >= 0.8)
    {
      if (v10 >= 0.8)
      {
        if (*((float *)a2 + 42) < *((float *)a2 + 21)) {
          unsigned int v8 = 2;
        }
        else {
          unsigned int v8 = 1;
        }
      }
      else
      {
        unsigned int v8 = 1;
      }
      goto LABEL_3;
    }
    if (v10 >= 0.8) {
      goto LABEL_2;
    }
LABEL_4:
    a2 = (const peridot::PeridotUserOutput *)((char *)a2 + 296);
    v5 += 3;
  }
  if (v3) {
    float v6 = v6 / (float)v3;
  }
  *(float *)(this + 472 * a3 + 480) = v6;
  return this;
}

void PeridotTelemetry::reportFrameStatistics(PeridotTelemetry *this, const PeridotSuperFrame *a2, const peridot::PeridotUserOutput *a3, uint64_t a4)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  PeridotTelemetry::aggregateBankOutputStats((uint64_t)this, (uint64_t)a3 + 4336 * a4, (uint64_t *)&v57);
  uint64_t v8 = *((void *)a2 + 451);
  if (v8)
  {
    float v9 = *(float *)(v8 + 22) + *(float *)(v8 + 26);
    float v10 = v9 * 0.0625;
    float v11 = *(float *)(v8 + 6);
    float v12 = *(float *)(v8 + 10);
    float v13 = *(float *)(v8 + 14);
    float v14 = *(float *)(v8 + 18);
    float v15 = (float)(v12 - (float)(v9 * 0.0625)) * 0.98;
    float v16 = (float)(v13 - (float)(v9 * 0.0625)) * 1.01;
    float v17 = (float)(v14 - (float)(v9 * 0.0625)) * 1.05;
    float v18 = (float)(v17 + (float)(v16 + v15)) * 0.333333333;
    if (v18 < 0.01) {
      float v18 = 0.01;
    }
    float v19 = (float)(vabds_f32(v11, v10) * 0.99) / v18;
    if (v19 <= 0.0) {
      float v20 = -1.0;
    }
    else {
      float v20 = v19 + -1.0;
    }
    float v21 = (float)(v11 - v10) * 0.99;
    float v22 = (float)(v17 + (float)(v16 + v21)) * 0.333333333;
    if (v22 < 0.01) {
      float v22 = 0.01;
    }
    float v23 = (float)(vabds_f32(v12, v10) * 0.98) / v22;
    if (v20 >= v23) {
      float v23 = v20;
    }
    float v24 = v23 + -1.0;
    float v25 = v15 + v21;
    float v26 = (float)(v17 + v25) * 0.333333333;
    if (v26 < 0.01) {
      float v26 = 0.01;
    }
    float v27 = vabds_f32(v13, v10);
    if (v24 < (float)((float)(v27 * 1.01) / v26)) {
      float v24 = (float)(v27 * 1.01) / v26;
    }
    float v28 = v24 + -1.0;
    float v29 = (float)(v16 + v25) * 0.333333333;
    if (v29 < 0.01) {
      float v29 = 0.01;
    }
    float v30 = (float)(vabds_f32(v14, v10) * 1.05) / v29;
    if (v28 >= v30) {
      float v30 = v28;
    }
    float v31 = v30 + -1.0;
    float v32 = (float)((float)(v14 + v13) + (float)(v12 + v11)) + (float)(v9 * -0.25);
    float v33 = *(float *)(v8 + 2) * 184.0;
    if (v33 < 0.01) {
      float v33 = 0.01;
    }
    float v34 = v32 / v33;
  }
  else
  {
    float v31 = 0.0;
    float v34 = 0.0;
    float v10 = 0.0;
  }
  uint64_t v35 = (char *)*((void *)a2 + *((void *)a2 + a4 + 466) + 3);
  uint64_t v36 = v35[32] > 100;
  if (v35[33] > 100) {
    ++v36;
  }
  if (v35[34] > 100) {
    ++v36;
  }
  if (v35[35] > 100) {
    ++v36;
  }
  if (v35[36] > 100) {
    ++v36;
  }
  if (v35[37] > 100) {
    ++v36;
  }
  if (v35[38] > 100) {
    ++v36;
  }
  if (v35[39] > 100) {
    ++v36;
  }
  if (v35[40] > 100) {
    ++v36;
  }
  if (v35[41] > 100) {
    ++v36;
  }
  if (v35[42] > 100) {
    ++v36;
  }
  if (v35[43] > 100) {
    ++v36;
  }
  if (v35[44] > 100) {
    ++v36;
  }
  if (v35[45] <= 100) {
    uint64_t v37 = v36;
  }
  else {
    uint64_t v37 = v36 + 1;
  }
  v63[0] = @"BankId";
  float v38 = (unsigned __int8 *)a3 + 4336 * a4 + 4144;
  uint64_t v56 = [NSNumber numberWithUnsignedChar:*v38];
  uint64_t v64 = v56;
  v63[1] = @"FrameId";
  uint64_t v65 = [NSNumber numberWithUnsignedLong:*((void *)this + 59 * *v38 + 3)];
  v63[2] = @"OperatingMode";
  uint64_t v54 = (void *)v65;
  uint64_t v55 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 2)];
  uint64_t v66 = v55;
  v63[3] = @"Preset";
  uint64_t v53 = +[PDUtils getPresetName:*((unsigned int *)this + 2)];
  uint64_t v67 = v53;
  v63[4] = @"HighConfSpotsPercentage";
  float v52 = [NSNumber numberWithDouble:(double)(unint64_t)v57 * 7.14285714];
  uint8x8_t v68 = v52;
  v63[5] = @"EdgeOrReflectionPercentage";
  float v39 = [NSNumber numberWithDouble:(double)*((unint64_t *)&v57 + 1) * 7.14285714];
  uint64_t v69 = v39;
  v63[6] = @"GrimaldiBaseline";
  *(float *)&double v40 = v10;
  unint64_t v41 = [NSNumber numberWithFloat:v40];
  CGPoint v70 = v41;
  v63[7] = @"GrimaldiBeta";
  *(float *)&double v42 = v31;
  size_t v43 = [NSNumber numberWithFloat:v42];
  CGPoint v71 = v43;
  v63[8] = @"GrimaldiBetaSNR";
  *(float *)&double v44 = v34;
  float v45 = [NSNumber numberWithFloat:v44];
  CGSize v72 = v45;
  v63[9] = @"NumDisabledMacroTwo";
  uint64_t v46 = [NSNumber numberWithUnsignedLong:v37];
  char v73 = v46;
  v63[10] = @"RegularGlareFAPercentage";
  uint64_t v47 = [NSNumber numberWithDouble:(double)*((unint64_t *)&v58 + 1) * 7.14285714];
  uint64_t v74 = v47;
  v63[11] = @"GroupGlareFAPercentage";
  unint64_t v48 = [NSNumber numberWithDouble:(double)(unint64_t)v59 * 7.14285714];
  unint64_t v75 = v48;
  v63[12] = @"ReflectivityFilteredSpotsPercentage";
  uint64_t v49 = [NSNumber numberWithDouble:(double)*((unint64_t *)&v61 + 1) * 7.14285714];
  float32x4_t v76 = v49;
  uint64_t v50 = [NSDictionary dictionaryWithObjects:&v64 forKeys:v63 count:13];

  PeridotTelemetry::reportEvent((PeridotTelemetry *)@"com.apple.JasperDepth.FrameStatistics", v50, v51);
}

void sub_2590E29D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PeridotTelemetry::reportFrameStatisticsAllBanks(PeridotTelemetry *this, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2, a3, a4);
  uint64_t v5 = 0;
  uint64_t v372 = *MEMORY[0x263EF8340];
  float v6 = (int *)(v4 + 204);
  double v7 = (int *)(v4 + 316);
  float v8 = 0.0;
  float v9 = &v247;
  float v10 = &v274;
  float v11 = &v301;
  float v12 = &v328;
  uint64_t v221 = v4;
  while (2)
  {
    float v13 = *(float *)(v4 + 472 * v5 + 480);
    uint64_t v14 = (2 * v5) & 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v15 = 0;
    if ((v5 & 1) == 0)
    {
      float v16 = v7;
      float v17 = v6;
      while (1)
      {
        int v19 = *(v17 - 1);
        int v18 = *v17;
        int v20 = *(v16 - 1);
        int v21 = *v16;
        uint64_t v22 = 4 * v15;
        *(_DWORD *)&v12[v22] = v19;
        *(_DWORD *)&v11[v22] = v20;
        *(_DWORD *)&v10[v22] = v18;
        *(_DWORD *)&v9[v22] = v21;
        if ((v15 & 0x7FFFFFFFFFFFFFF9) == 1) {
          break;
        }
        if ((v15 & 0x7FFFFFFFFFFFFFF9) != 0) {
          goto LABEL_9;
        }
        uint64_t v27 = 4 * (v14 + (v15 >> 1));
        *(_DWORD *)&v322[v27] = v19;
        *(_DWORD *)&v295[v27] = v20;
        *(_DWORD *)&v268[v27] = v18;
        *(_DWORD *)&v241[v27] = v21;
        if (v15 >= 6) {
          goto LABEL_13;
        }
LABEL_5:
        ++v15;
        v17 += 2;
        v16 += 3;
        if (v15 == 14) {
          goto LABEL_2;
        }
      }
      uint64_t v23 = 4 * (v14 + (v15 >> 1));
      *(_DWORD *)&v325[v23] = v19;
      *(_DWORD *)&v298[v23] = v20;
      *(_DWORD *)&v271[v23] = v18;
      *(_DWORD *)&v244[v23] = v21;
LABEL_9:
      BOOL v24 = v15 < 6;
      if (v15 >= 6 && (v15 & 1) != 0)
      {
        BOOL v24 = 0;
        unint64_t v25 = 4 * (v14 + ((v15 - 6) >> 1));
        *(_DWORD *)&v319[v25] = v19;
        *(_DWORD *)&v292[v25] = v20;
        *(_DWORD *)&v265[v25] = v18;
        *(_DWORD *)&v238[v25] = v21;
      }
      if (v24) {
        goto LABEL_5;
      }
LABEL_13:
      if ((v15 & 1) == 0)
      {
        unint64_t v26 = 4 * (v14 + ((v15 - 6) >> 1));
        *(_DWORD *)&v316[v26] = v19;
        *(_DWORD *)&v289[v26] = v20;
        *(_DWORD *)&v262[v26] = v18;
        *(_DWORD *)&v235[v26] = v21;
      }
      goto LABEL_5;
    }
    float v28 = v7;
    float v29 = v6;
    do
    {
      int v31 = *(v29 - 1);
      int v30 = *v29;
      int v32 = *(v28 - 1);
      int v33 = *v28;
      uint64_t v34 = 4 * v15;
      *(_DWORD *)&v12[v34] = v31;
      *(_DWORD *)&v11[v34] = v32;
      *(_DWORD *)&v10[v34] = v30;
      *(_DWORD *)&v9[v34] = v33;
      if ((v15 & 0x7FFFFFFFFFFFFFF9) == 1)
      {
        uint64_t v35 = 4 * (v14 + (v15 >> 1));
        *(_DWORD *)&v313[v35] = v31;
        *(_DWORD *)&v286[v35] = v32;
        *(_DWORD *)&v259[v35] = v30;
        *(_DWORD *)&v232[v35] = v33;
      }
      else if ((v15 & 0x7FFFFFFFFFFFFFF9) == 0)
      {
        uint64_t v39 = 4 * (v14 + (v15 >> 1));
        *(_DWORD *)&v310[v39] = v31;
        *(_DWORD *)&v283[v39] = v32;
        *(_DWORD *)&v256[v39] = v30;
        *(_DWORD *)&v229[v39] = v33;
        if (v15 < 6) {
          goto LABEL_18;
        }
LABEL_26:
        if ((v15 & 1) == 0)
        {
          unint64_t v38 = 4 * (v14 + ((v15 - 6) >> 1));
          *(_DWORD *)&v304[v38] = v31;
          *(_DWORD *)&v277[v38] = v32;
          *(_DWORD *)&v250[v38] = v30;
          *(_DWORD *)&v223[v38] = v33;
        }
        goto LABEL_18;
      }
      BOOL v36 = v15 < 6;
      if (v15 >= 6 && (v15 & 1) != 0)
      {
        BOOL v36 = 0;
        unint64_t v37 = 4 * (v14 + ((v15 - 6) >> 1));
        *(_DWORD *)&v307[v37] = v31;
        *(_DWORD *)&v280[v37] = v32;
        *(_DWORD *)&v253[v37] = v30;
        *(_DWORD *)&v226[v37] = v33;
      }
      if (!v36) {
        goto LABEL_26;
      }
LABEL_18:
      ++v15;
      v29 += 2;
      v28 += 3;
    }
    while (v15 != 14);
LABEL_2:
    float v8 = v13 + v8;
    ++v5;
    v9 += 56;
    v10 += 56;
    v11 += 56;
    v12 += 56;
    v6 += 118;
    v7 += 118;
    uint64_t v4 = v221;
    if (v5 != 8) {
      continue;
    }
    break;
  }
  std::__sort<std::__less<float,float> &,float *>();
  std::__sort<std::__less<float,float> &,float *>();
  std::__sort<std::__less<float,float> &,float *>();
  std::__sort<std::__less<float,float> &,float *>();
  float v40 = v329;
  float v41 = v330;
  float v42 = v302;
  float v43 = v303;
  float v44 = v275;
  float v45 = v276;
  float v218 = v248;
  float v46 = v249;
  std::__sort<std::__less<float,float> &,float *>();
  float v216 = v326;
  float v214 = v327;
  std::__sort<std::__less<float,float> &,float *>();
  float v212 = v323;
  float v210 = v324;
  std::__sort<std::__less<float,float> &,float *>();
  float v208 = v320;
  float v206 = v321;
  std::__sort<std::__less<float,float> &,float *>();
  float v204 = v317;
  float v202 = v318;
  std::__sort<std::__less<float,float> &,float *>();
  float v200 = v314;
  float v198 = v315;
  std::__sort<std::__less<float,float> &,float *>();
  float v196 = v311;
  float v194 = v312;
  std::__sort<std::__less<float,float> &,float *>();
  float v192 = v308;
  float v190 = v309;
  std::__sort<std::__less<float,float> &,float *>();
  float v188 = v305;
  float v186 = v306;
  std::__sort<std::__less<float,float> &,float *>();
  float v184 = v299;
  float v182 = v300;
  std::__sort<std::__less<float,float> &,float *>();
  float v180 = v296;
  float v178 = v297;
  std::__sort<std::__less<float,float> &,float *>();
  float v176 = v293;
  float v174 = v294;
  std::__sort<std::__less<float,float> &,float *>();
  float v172 = v290;
  float v170 = v291;
  std::__sort<std::__less<float,float> &,float *>();
  float v167 = v288;
  float v168 = v287;
  std::__sort<std::__less<float,float> &,float *>();
  float v165 = v285;
  float v166 = v284;
  std::__sort<std::__less<float,float> &,float *>();
  float v163 = v282;
  float v164 = v281;
  std::__sort<std::__less<float,float> &,float *>();
  float v161 = v279;
  float v162 = v278;
  std::__sort<std::__less<float,float> &,float *>();
  float v159 = v273;
  float v160 = v272;
  std::__sort<std::__less<float,float> &,float *>();
  float v157 = v270;
  float v158 = v269;
  std::__sort<std::__less<float,float> &,float *>();
  float v155 = v267;
  float v156 = v266;
  std::__sort<std::__less<float,float> &,float *>();
  float v153 = v264;
  float v154 = v263;
  std::__sort<std::__less<float,float> &,float *>();
  float v151 = v261;
  float v152 = v260;
  std::__sort<std::__less<float,float> &,float *>();
  float v149 = v258;
  float v150 = v257;
  std::__sort<std::__less<float,float> &,float *>();
  float v147 = v255;
  float v148 = v254;
  std::__sort<std::__less<float,float> &,float *>();
  float v145 = v252;
  float v146 = v251;
  std::__sort<std::__less<float,float> &,float *>();
  float v143 = v246;
  float v144 = v245;
  std::__sort<std::__less<float,float> &,float *>();
  float v141 = v243;
  float v142 = v242;
  std::__sort<std::__less<float,float> &,float *>();
  float v139 = v240;
  float v140 = v239;
  std::__sort<std::__less<float,float> &,float *>();
  float v137 = v237;
  float v138 = v236;
  std::__sort<std::__less<float,float> &,float *>();
  float v135 = v234;
  float v136 = v233;
  std::__sort<std::__less<float,float> &,float *>();
  float v133 = v231;
  float v134 = v230;
  std::__sort<std::__less<float,float> &,float *>();
  float v131 = v228;
  float v132 = v227;
  std::__sort<std::__less<float,float> &,float *>();
  float v129 = v225;
  float v130 = v224;
  v331[0] = @"FrameId";
  uint64_t v220 = [NSNumber numberWithUnsignedLong:*(void *)(v221 + 24)];
  int8x8_t v332 = v220;
  v331[1] = @"OperatingMode";
  uint64_t v333 = [NSNumber numberWithUnsignedInt:*(unsigned int *)(v221 + 8)];
  v331[2] = @"Preset";
  int8x16_t v128 = (void *)v333;
  uint64_t v47 = +[PDUtils getPresetName:*(unsigned int *)(v221 + 8)];
  *(float *)&double v48 = v8 * 0.125;
  uint64_t v334 = v47;
  v331[3] = @"MeanIntensityForIndicator";
  float32x4_t v127 = (void *)v47;
  uint64_t v49 = [NSNumber numberWithFloat:v48];
  *(float *)&double v50 = (float)(v41 + v40) * 0.5;
  uint64_t v335 = v49;
  v331[4] = @"StrayEstNormalAllFoV";
  float32x4_t v126 = (void *)v49;
  uint64_t v51 = [NSNumber numberWithFloat:v50];
  *(float *)&double v52 = (float)(v43 + v42) * 0.5;
  float32x4_t v222 = (void *)v51;
  uint64_t v336 = v51;
  v331[5] = @"StrayChangeNormalAllFoV";
  uint64_t v53 = [NSNumber numberWithFloat:v52];
  *(float *)&double v54 = (float)(v45 + v44) * 0.5;
  float32x4_t v125 = (void *)v53;
  uint64_t v337 = v53;
  v331[6] = @"StrayEstM1AllFoV";
  uint64_t v55 = [NSNumber numberWithFloat:v54];
  *(float *)&double v56 = (float)(v46 + v218) * 0.5;
  float32x4_t v124 = (void *)v55;
  uint64_t v338 = v55;
  v331[7] = @"StrayChangeM1AllFoV";
  uint64_t v57 = [NSNumber numberWithFloat:v56];
  *(float *)&double v58 = (float)(v214 + v216) * 0.5;
  unint64_t v217 = (void *)v57;
  uint64_t v339 = v57;
  v331[8] = @"StrayEstNormalRegion0";
  uint64_t v59 = [NSNumber numberWithFloat:v58];
  *(float *)&double v60 = (float)(v210 + v212) * 0.5;
  int32x4_t v215 = (void *)v59;
  uint64_t v340 = v59;
  v331[9] = @"StrayEstNormalRegion1";
  uint64_t v61 = [NSNumber numberWithFloat:v60];
  *(float *)&double v62 = (float)(v206 + v208) * 0.5;
  float v213 = (void *)v61;
  uint64_t v341 = v61;
  v331[10] = @"StrayEstNormalRegion2";
  uint64_t v63 = [NSNumber numberWithFloat:v62];
  *(float *)&double v64 = (float)(v202 + v204) * 0.5;
  float v211 = (void *)v63;
  uint64_t v342 = v63;
  v331[11] = @"StrayEstNormalRegion3";
  uint64_t v65 = [NSNumber numberWithFloat:v64];
  *(float *)&double v66 = (float)(v198 + v200) * 0.5;
  float v209 = (void *)v65;
  uint64_t v343 = v65;
  v331[12] = @"StrayEstNormalRegion4";
  uint64_t v67 = [NSNumber numberWithFloat:v66];
  *(float *)&double v68 = (float)(v194 + v196) * 0.5;
  unint64_t v207 = (void *)v67;
  uint64_t v344 = v67;
  v331[13] = @"StrayEstNormalRegion5";
  uint64_t v69 = [NSNumber numberWithFloat:v68];
  *(float *)&double v70 = (float)(v190 + v192) * 0.5;
  size_t v205 = (void *)v69;
  uint64_t v345 = v69;
  v331[14] = @"StrayEstNormalRegion6";
  uint64_t v71 = [NSNumber numberWithFloat:v70];
  *(float *)&double v72 = (float)(v186 + v188) * 0.5;
  uint64_t v203 = (void *)v71;
  uint64_t v346 = v71;
  v331[15] = @"StrayEstNormalRegion7";
  uint64_t v73 = [NSNumber numberWithFloat:v72];
  *(float *)&double v74 = (float)(v182 + v184) * 0.5;
  unsigned int v201 = (void *)v73;
  uint64_t v347 = v73;
  v331[16] = @"StrayChangeNormalRegion0";
  uint64_t v75 = [NSNumber numberWithFloat:v74];
  *(float *)&double v76 = (float)(v178 + v180) * 0.5;
  float32x4_t v199 = (void *)v75;
  uint64_t v348 = v75;
  v331[17] = @"StrayChangeNormalRegion1";
  uint64_t v77 = [NSNumber numberWithFloat:v76];
  *(float *)&double v78 = (float)(v174 + v176) * 0.5;
  uint64_t v197 = (void *)v77;
  uint64_t v349 = v77;
  v331[18] = @"StrayChangeNormalRegion2";
  uint64_t v79 = [NSNumber numberWithFloat:v78];
  *(float *)&double v80 = (float)(v170 + v172) * 0.5;
  uint64_t v195 = (void *)v79;
  uint64_t v350 = v79;
  v331[19] = @"StrayChangeNormalRegion3";
  uint64_t v81 = [NSNumber numberWithFloat:v80];
  *(float *)&double v82 = (float)(v167 + v168) * 0.5;
  size_t v193 = (void *)v81;
  uint64_t v351 = v81;
  v331[20] = @"StrayChangeNormalRegion4";
  uint64_t v83 = [NSNumber numberWithFloat:v82];
  *(float *)&double v84 = (float)(v165 + v166) * 0.5;
  size_t v191 = (void *)v83;
  uint64_t v352 = v83;
  v331[21] = @"StrayChangeNormalRegion5";
  uint64_t v85 = [NSNumber numberWithFloat:v84];
  *(float *)&double v86 = (float)(v163 + v164) * 0.5;
  uint64_t v189 = (void *)v85;
  uint64_t v353 = v85;
  v331[22] = @"StrayChangeNormalRegion6";
  uint64_t v87 = [NSNumber numberWithFloat:v86];
  *(float *)&double v88 = (float)(v161 + v162) * 0.5;
  uint64_t v187 = (void *)v87;
  uint64_t v354 = v87;
  v331[23] = @"StrayChangeNormalRegion7";
  uint64_t v89 = [NSNumber numberWithFloat:v88];
  *(float *)&double v90 = (float)(v159 + v160) * 0.5;
  size_t v185 = (void *)v89;
  uint64_t v355 = v89;
  v331[24] = @"StrayEstM1Region0";
  uint64_t v91 = [NSNumber numberWithFloat:v90];
  *(float *)&double v92 = (float)(v157 + v158) * 0.5;
  int8x16_t v219 = (void *)v91;
  uint64_t v356 = v91;
  v331[25] = @"StrayEstM1Region1";
  uint64_t v93 = [NSNumber numberWithFloat:v92];
  *(float *)&double v94 = (float)(v155 + v156) * 0.5;
  float v183 = (void *)v93;
  uint64_t v357 = v93;
  v331[26] = @"StrayEstM1Region2";
  uint64_t v95 = [NSNumber numberWithFloat:v94];
  *(float *)&double v96 = (float)(v153 + v154) * 0.5;
  char v181 = (void *)v95;
  uint64_t v358 = v95;
  v331[27] = @"StrayEstM1Region3";
  uint64_t v97 = [NSNumber numberWithFloat:v96];
  *(float *)&double v98 = (float)(v151 + v152) * 0.5;
  unint64_t v179 = (void *)v97;
  uint64_t v359 = v97;
  v331[28] = @"StrayEstM1Region4";
  uint64_t v99 = [NSNumber numberWithFloat:v98];
  *(float *)&double v100 = (float)(v149 + v150) * 0.5;
  long long v177 = (void *)v99;
  uint64_t v360 = v99;
  v331[29] = @"StrayEstM1Region5";
  uint64_t v101 = [NSNumber numberWithFloat:v100];
  *(float *)&double v102 = (float)(v147 + v148) * 0.5;
  char v175 = (void *)v101;
  uint64_t v361 = v101;
  v331[30] = @"StrayEstM1Region6";
  uint64_t v103 = [NSNumber numberWithFloat:v102];
  *(float *)&double v104 = (float)(v145 + v146) * 0.5;
  size_t v173 = (void *)v103;
  uint64_t v362 = v103;
  v331[31] = @"StrayEstM1Region7";
  uint64_t v105 = [NSNumber numberWithFloat:v104];
  *(float *)&double v106 = (float)(v143 + v144) * 0.5;
  size_t v171 = (void *)v105;
  uint64_t v363 = v105;
  v331[32] = @"StrayChangeM1Region0";
  uint64_t v107 = [NSNumber numberWithFloat:v106];
  *(float *)&double v108 = (float)(v141 + v142) * 0.5;
  size_t v169 = (void *)v107;
  uint64_t v364 = v107;
  v331[33] = @"StrayChangeM1Region1";
  BOOL v109 = [NSNumber numberWithFloat:v108];
  *(float *)&double v110 = (float)(v139 + v140) * 0.5;
  unint64_t v365 = v109;
  v331[34] = @"StrayChangeM1Region2";
  unint64_t v111 = [NSNumber numberWithFloat:v110];
  *(float *)&double v112 = (float)(v137 + v138) * 0.5;
  float32x4_t v366 = v111;
  v331[35] = @"StrayChangeM1Region3";
  float v113 = [NSNumber numberWithFloat:v112];
  *(float *)&double v114 = (float)(v135 + v136) * 0.5;
  float32x4_t v367 = v113;
  v331[36] = @"StrayChangeM1Region4";
  unint64_t v115 = [NSNumber numberWithFloat:v114];
  *(float *)&double v116 = (float)(v133 + v134) * 0.5;
  unint64_t v368 = v115;
  v331[37] = @"StrayChangeM1Region5";
  float32x4_t v117 = [NSNumber numberWithFloat:v116];
  *(float *)&double v118 = (float)(v131 + v132) * 0.5;
  float64x2_t v369 = v117;
  v331[38] = @"StrayChangeM1Region6";
  double v119 = [NSNumber numberWithFloat:v118];
  *(float *)&double v120 = (float)(v129 + v130) * 0.5;
  int8x16_t v370 = v119;
  v331[39] = @"StrayChangeM1Region7";
  int16x8_t v121 = [NSNumber numberWithFloat:v120];
  long long v371 = v121;
  unint64_t v122 = [NSDictionary dictionaryWithObjects:&v332 forKeys:v331 count:40];

  PeridotTelemetry::reportEvent((PeridotTelemetry *)@"com.apple.JasperDepth.FrameStatisticsAllBanks", v122, v123);
}

void sub_2590E3BC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void PeridotTelemetry::reportSpotStatistics(PeridotTelemetry *this, const PeridotSuperFrame *a2, const peridot::PeridotUserOutput *a3, uint64_t a4, float a5)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  {
    Filters::Filters((Filters *)&Filters::filters(void)::inst);
  }
  unint64_t v8 = 0;
  uint64_t v97 = (float *)((char *)a3 + 4336 * a4);
  float v9 = v97 + 22;
  float v10 = 0.0;
  uint64_t v11 = 0x3FFFFFFFFFFFFBF4;
  do
  {
    float v12 = &v9[v11];
    if (v9[v11 + 1015] > 0.8)
    {
      float v10 = (float)(v9[v11 + 1021] / v12[1017]) + v10;
      ++v8;
    }
    if (v12[1036] > 0.8)
    {
      float v10 = (float)(v9[v11 + 1042] / v9[v11 + 1038]) + v10;
      ++v8;
    }
    v11 += 74;
  }
  while (v11 * 4);
  if (v8) {
    float v13 = v10 / (float)v8;
  }
  else {
    float v13 = 0.0;
  }
  float v100 = v13;
  long long v128 = xmmword_259120B30;
  uint64_t v129 = 13;
  uint64_t v130 = 0;
  uint64_t v131 = 13;
  uint64_t v132 = 0;
  long long v133 = xmmword_259120B30;
  v127[0] = 0;
  v127[2] = 0;
  v127[4] = 0;
  v127[1] = 12;
  v127[3] = 12;
  v127[6] = 0;
  v127[5] = 12;
  unint64_t v122 = (unsigned __int8 *)a3 + 4336 * a4 + 4144;
  uint64_t v14 = *v122;
  uint64_t v15 = *(void *)((char *)&v128 + v14 * 8);
  v127[7] = 12;
  uint64_t v16 = v127[v14];
  v126[0] = v15;
  v126[1] = v16;
  uint32_t v17 = arc4random_uniform(0xCu);
  uint64_t v18 = 0;
  if (v17)
  {
    uint64_t v19 = v17;
    do
    {
      uint64_t v21 = v15 != v18 && v16 != v18;
      ++v18;
      v19 -= v21;
    }
    while (v19);
  }
  uint64_t v22 = 0;
  v126[2] = v18;
  uint64_t v23 = v97;
  float v24 = (float)((float)(v97[1025] + (float)(v97[951] + v97[877]))
              + (float)((float)(v97[803] + (float)(v97[729] + (float)(v97[655] + v97[581])))
                      + (float)((float)(v97[507] + (float)(v97[433] + v97[359]))
                              + (float)((float)(v97[285] + v97[211]) + (float)(v97[137] + v97[63])))))
      * 0.071429;
  do
  {
    uint64_t v102 = v126[v22];
    unint64_t v25 = &v23[74 * v102];
    uint64_t v98 = v22;
    BOOL v101 = v25[1] > 0.8 && v25[22] > 0.8;
    char v26 = 0;
    uint64_t v27 = 0;
    float v28 = &v23[74 * v102];
    int v29 = *((_DWORD *)v28 + 63);
    int v30 = *((_DWORD *)v28 + 64);
    int v31 = *((_DWORD *)v28 + 65);
    int v32 = *((_DWORD *)v28 + 66);
    char v33 = 1;
    int8x16_t v123 = v25;
    do
    {
      if ((v26 & 1) != 0 && v25[22] < 0.3) {
        break;
      }
      char v103 = v33;
      uint64_t v34 = &v25[21 * v27];
      float v35 = v34[3];
      v124[0] = @"BankId";
      int16x8_t v121 = [NSNumber numberWithUnsignedChar:*v122];
      v125[0] = v121;
      v124[1] = @"FrameId";
      double v118 = [NSNumber numberWithUnsignedLong:*((void *)this + 59 * *v122 + 3)];
      v125[1] = v118;
      v124[2] = @"OperatingMode";
      float32x4_t v117 = [NSNumber numberWithUnsignedInt:*((unsigned int *)this + 2)];
      v125[2] = v117;
      v124[3] = @"Preset";
      double v116 = +[PDUtils getPresetName:*((unsigned int *)this + 2)];
      v125[3] = v116;
      v124[4] = @"SpotId";
      unint64_t v115 = [NSNumber numberWithUnsignedLong:v102];
      v125[4] = v115;
      v124[5] = @"TileId";
      double v114 = [NSNumber numberWithInt:*v122 & 1];
      v125[5] = v114;
      v124[6] = @"Echo";
      float v113 = [NSNumber numberWithUnsignedLong:v27];
      v125[6] = v113;
      v124[7] = @"StrayEstNormal";
      LODWORD(v36) = v29;
      double v112 = [NSNumber numberWithFloat:v36];
      v125[7] = v112;
      v124[8] = @"StrayEstM1";
      LODWORD(v37) = v30;
      unint64_t v111 = [NSNumber numberWithFloat:v37];
      v125[8] = v111;
      v124[9] = @"StrayChangeNormal";
      LODWORD(v38) = v31;
      double v110 = [NSNumber numberWithFloat:v38];
      v125[9] = v110;
      v124[10] = @"StrayChangeM1";
      LODWORD(v39) = v32;
      BOOL v109 = [NSNumber numberWithFloat:v39];
      v125[10] = v109;
      v124[11] = @"BankMeanStrayEstNormal";
      *(float *)&double v40 = v24;
      double v108 = [NSNumber numberWithFloat:v40];
      v125[11] = v108;
      v124[12] = @"SuspectedBlockedAperture";
      uint64_t v107 = [NSNumber numberWithBool:v24 > 0.5];
      v125[12] = v107;
      v124[13] = @"TwoEchos";
      uint64_t v105 = [NSNumber numberWithBool:v101];
      v125[13] = v105;
      v124[14] = @"TimeOfFlight";
      double v104 = [NSNumber numberWithDouble:*v34 * 149852322.0];
      v125[14] = v104;
      v124[15] = @"RangeBucket";
      double v41 = *v34 * 149852322.0;
      *(float *)&double v41 = v41;
      float v42 = &qword_26B2F30C0;
      float v43 = *(float *)qword_26B2F30C8;
      if (*(float *)qword_26B2F30C8 >= *(float *)&v41
        || (float v42 = &Filters::filters(void)::inst, *(float *)(qword_26B2F30D0 - 4) < *(float *)&v41))
      {
LABEL_37:
        double v48 = (__CFString *)(id)*v42;
      }
      else
      {
        uint64_t v44 = 1;
        while ((qword_26B2F30D0 - qword_26B2F30C8) >> 2 != v44)
        {
          uint64_t v45 = v44;
          BOOL v46 = v43 < *(float *)&v41;
          float v43 = *(float *)(qword_26B2F30C8 + 4 * v44++);
          if (v46 && v43 >= *(float *)&v41)
          {
            float v42 = (uint64_t *)(qword_26B2F30E0 + 8 * (v45 - 1));
            goto LABEL_37;
          }
        }
        double v48 = @"N/A";
      }
      double v119 = v48;
      v125[15] = v48;
      v124[16] = @"SNR";
      uint64_t v49 = &v123[21 * v27];
      int v50 = *((_DWORD *)v49 + 2);
      v49 += 2;
      LODWORD(v41) = v50;
      double v106 = [NSNumber numberWithFloat:v41];
      v125[16] = v106;
      v124[17] = @"SnrBucket";
      *(float *)&double v51 = *v49;
      double v52 = &qword_26B2F3180;
      float v53 = *(float *)qword_26B2F3188;
      if (*(float *)qword_26B2F3188 >= *v49
        || (double v52 = &qword_26B2F3178, *(float *)(qword_26B2F3190 - 4) < *(float *)&v51))
      {
LABEL_47:
        uint64_t v57 = (__CFString *)(id)*v52;
      }
      else
      {
        uint64_t v54 = 1;
        while ((qword_26B2F3190 - qword_26B2F3188) >> 2 != v54)
        {
          uint64_t v55 = v54;
          BOOL v46 = v53 < *(float *)&v51;
          float v53 = *(float *)(qword_26B2F3188 + 4 * v54++);
          if (v46 && v53 >= *(float *)&v51)
          {
            double v52 = (uint64_t *)(qword_26B2F31A0 + 8 * (v55 - 1));
            goto LABEL_47;
          }
        }
        uint64_t v57 = @"N/A";
      }
      double v120 = v57;
      v125[17] = v57;
      v124[18] = @"Confidence";
      double v58 = &v123[21 * v27];
      int v59 = *((_DWORD *)v58++ + 1);
      LODWORD(v51) = v59;
      double v60 = [NSNumber numberWithFloat:v51];
      v125[18] = v60;
      v124[19] = @"ConfidenceBucket";
      *(float *)&double v61 = *v58;
      double v62 = &qword_26B2F3100;
      float v63 = *(float *)qword_26B2F3108;
      if (*(float *)qword_26B2F3108 >= *v58
        || (double v62 = &qword_26B2F30F8, *(float *)(qword_26B2F3110 - 4) < *(float *)&v61))
      {
LABEL_57:
        uint64_t v67 = (__CFString *)(id)*v62;
      }
      else
      {
        uint64_t v64 = 1;
        while ((qword_26B2F3110 - qword_26B2F3108) >> 2 != v64)
        {
          uint64_t v65 = v64;
          BOOL v46 = v63 < *(float *)&v61;
          float v63 = *(float *)(qword_26B2F3108 + 4 * v64++);
          if (v46 && v63 >= *(float *)&v61)
          {
            double v62 = (uint64_t *)(qword_26B2F3120 + 8 * (v65 - 1));
            goto LABEL_57;
          }
        }
        uint64_t v67 = @"N/A";
      }
      double v68 = v67;
      v125[19] = v67;
      v124[20] = @"Reflectivity";
      *(float *)&double v61 = v35;
      uint64_t v69 = [NSNumber numberWithFloat:v61];
      v125[20] = v69;
      v124[21] = @"ReflectivityBucket";
      double v70 = &qword_26B2F3140;
      LODWORD(v71) = *(_DWORD *)qword_26B2F3148;
      if (*(float *)qword_26B2F3148 >= v35 || (double v70 = &qword_26B2F3138, *(float *)(qword_26B2F3150 - 4) < v35))
      {
LABEL_67:
        uint64_t v75 = (__CFString *)(id)*v70;
      }
      else
      {
        uint64_t v72 = 1;
        while ((qword_26B2F3150 - qword_26B2F3148) >> 2 != v72)
        {
          uint64_t v73 = v72;
          BOOL v46 = *(float *)&v71 < v35;
          LODWORD(v71) = *(_DWORD *)(qword_26B2F3148 + 4 * v72++);
          if (v46 && *(float *)&v71 >= v35)
          {
            double v70 = (uint64_t *)(qword_26B2F3160 + 8 * (v73 - 1));
            goto LABEL_67;
          }
        }
        uint64_t v75 = @"N/A";
      }
      v125[21] = v75;
      v124[22] = @"TempBucket";
      double v76 = &qword_26B2F31C0;
      float v77 = *(float *)qword_26B2F31C8;
      if (*(float *)qword_26B2F31C8 >= a5 || (double v76 = &qword_26B2F31B8, *(float *)(qword_26B2F31D0 - 4) < a5))
      {
LABEL_77:
        uint64_t v81 = (__CFString *)(id)*v76;
      }
      else
      {
        uint64_t v78 = 1;
        while ((qword_26B2F31D0 - qword_26B2F31C8) >> 2 != v78)
        {
          uint64_t v79 = v78;
          BOOL v46 = v77 < a5;
          float v77 = *(float *)(qword_26B2F31C8 + 4 * v78++);
          if (v46 && v77 >= a5)
          {
            double v76 = (uint64_t *)(qword_26B2F31E0 + 8 * (v79 - 1));
            goto LABEL_77;
          }
        }
        uint64_t v81 = @"N/A";
      }
      v125[22] = v81;
      v124[23] = @"Na";
      double v82 = &v123[21 * v27];
      int v84 = *((_DWORD *)v82 + 7);
      uint64_t v83 = v82 + 7;
      LODWORD(v71) = v84;
      uint64_t v85 = [NSNumber numberWithFloat:v71];
      v125[23] = v85;
      v124[24] = @"NaBucket";
      float v86 = *v83;
      uint64_t v87 = &qword_26B2F3200;
      float v88 = *(float *)qword_26B2F3208;
      if (*(float *)qword_26B2F3208 >= *v83 || (uint64_t v87 = &qword_26B2F31F8, *(float *)(qword_26B2F3210 - 4) < v86))
      {
LABEL_87:
        double v92 = (__CFString *)(id)*v87;
      }
      else
      {
        uint64_t v89 = 1;
        while ((qword_26B2F3210 - qword_26B2F3208) >> 2 != v89)
        {
          uint64_t v90 = v89;
          BOOL v46 = v88 < v86;
          float v88 = *(float *)(qword_26B2F3208 + 4 * v89++);
          if (v46 && v88 >= v86)
          {
            uint64_t v87 = (uint64_t *)(qword_26B2F3220 + 8 * (v90 - 1));
            goto LABEL_87;
          }
        }
        double v92 = @"N/A";
      }
      v125[24] = v92;
      v124[25] = @"AmbToNaRatio";
      double v93 = 0.0;
      if (v100 > 0.0) {
        *(float *)&double v93 = *v83 * (float)(1.0 / v100);
      }
      double v94 = [NSNumber numberWithFloat:v93];
      v125[25] = v94;
      uint64_t v95 = [NSDictionary dictionaryWithObjects:v125 forKeys:v124 count:26];

      PeridotTelemetry::reportEvent((PeridotTelemetry *)@"com.apple.JasperDepth.SpotStatistics", v95, v96);
      char v33 = 0;
      char v26 = 1;
      uint64_t v27 = 1;
      unint64_t v25 = v123;
    }
    while ((v103 & 1) != 0);
    uint64_t v23 = v97;
    uint64_t v22 = v98 + 1;
  }
  while (v98 != 2);
}

void sub_2590E49C0(_Unwind_Exception *a1)
{
}

void sub_2590E49D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35)
{
  _Unwind_Resume(a1);
}

float PeridotTelemetry::findMedian(uint64_t a1, uint64_t a2)
{
  return (float)(*(float *)(a2 + 32) + *(float *)(a2 + 28)) * 0.5;
}

double PeridotTelemetry::calcBankAmbient(PeridotTelemetry *this, const peridot::PeridotUserOutput *a2)
{
  unint64_t v2 = 0;
  unint64_t v3 = (char *)a2 + 88;
  double result = 0.0;
  uint64_t v5 = -4144;
  do
  {
    float v6 = &v3[v5];
    if (*(float *)&v3[v5 + 4060] > 0.8)
    {
      *(float *)&double result = (float)(*(float *)&v3[v5 + 4084] / *((float *)v6 + 1017)) + *(float *)&result;
      ++v2;
    }
    if (*((float *)v6 + 1036) > 0.8)
    {
      *(float *)&double result = (float)(*(float *)&v3[v5 + 4168] / *(float *)&v3[v5 + 4152]) + *(float *)&result;
      ++v2;
    }
    v5 += 296;
  }
  while (v5);
  if (!v2) {
    return 0.0;
  }
  *(float *)&double result = *(float *)&result / (float)v2;
  return result;
}

void sub_2590E4DE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_2590E50E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590E52AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590E5320(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double peridot::PeridotT0::PeridotT0(peridot::PeridotT0 *this)
{
  *(_OWORD *)((char *)this + 600) = xmmword_259134900;
  *(_OWORD *)((char *)this + 616) = unk_259134910;
  *(_OWORD *)((char *)this + 632) = xmmword_259134920;
  *(_OWORD *)((char *)this + 536) = xmmword_2591348C0;
  *(_OWORD *)((char *)this + 552) = unk_2591348D0;
  *(_OWORD *)((char *)this + 568) = xmmword_2591348E0;
  *(_OWORD *)((char *)this + 584) = unk_2591348F0;
  *((void *)this + 81) = 6;
  *((void *)this + 84) = 0;
  *(_OWORD *)((char *)this + 680) = xmmword_259120370;
  *(_OWORD *)((char *)this + 696) = xmmword_259120380;
  *(_OWORD *)((char *)this + 712) = xmmword_259120390;
  double result = 1.79440326e15;
  *((void *)this + 91) = 0x4319800042F48000;
  *((_DWORD *)this + 184) = 1128611840;
  return result;
}

{
  double result;

  *(_OWORD *)((char *)this + 600) = xmmword_259134900;
  *(_OWORD *)((char *)this + 616) = unk_259134910;
  *(_OWORD *)((char *)this + 632) = xmmword_259134920;
  *(_OWORD *)((char *)this + 536) = xmmword_2591348C0;
  *(_OWORD *)((char *)this + 552) = unk_2591348D0;
  *(_OWORD *)((char *)this + 568) = xmmword_2591348E0;
  *(_OWORD *)((char *)this + 584) = unk_2591348F0;
  *((void *)this + 81) = 6;
  *((void *)this + 84) = 0;
  *(_OWORD *)((char *)this + 680) = xmmword_259120370;
  *(_OWORD *)((char *)this + 696) = xmmword_259120380;
  *(_OWORD *)((char *)this + 712) = xmmword_259120390;
  double result = 1.79440326e15;
  *((void *)this + 91) = 0x4319800042F48000;
  *((_DWORD *)this + 184) = 1128611840;
  return result;
}

float32x2_t peridot::PeridotT0::calcP2P(void *a1, unsigned int a2, char a3, double a4, float a5)
{
  uint64_t v7 = a1[96];
  unint64_t v8 = a1 + 18;
  if (a3)
  {
    LODWORD(a4) = 2.0;
    double v9 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)a1, a2, *(unsigned __int8 *)(v7 + 3521), 0, (uint64_t)&a1[7 * a1[80] + 18], a4, a5);
    LODWORD(v9) = 3.0;
    peridot::PeridotT0::calcP2PPerChannel((uint64_t)a1, a2, *(unsigned __int8 *)(a1[96] + 3522), 0, (uint64_t)&v8[7 * a1[81]], v9, v10);
    uint64_t v11 = (float32x4_t *)&v8[7 * a1[80]];
    float v12 = (float32x4_t *)&v8[7 * a1[81]];
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    float32x4_t v14 = vmulq_f32(vaddq_f32(v12[1], v11[1]), v13);
    *uint64_t v11 = vmulq_f32(vaddq_f32(*v12, *v11), v13);
    v11[1] = v14;
    void v11[2] = vmulq_f32(vaddq_f32(v12[2], v11[2]), v13);
    float32x2_t result = vmul_f32(vadd_f32(*(float32x2_t *)v12[3].f32, *(float32x2_t *)v11[3].f32), (float32x2_t)0x3F0000003F000000);
    *(float32x2_t *)v11[3].f32 = result;
  }
  else
  {
    LODWORD(a4) = 1.0;
    double v16 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)a1, a2, *(unsigned __int8 *)(v7 + 3520), *(unsigned __int8 *)(v7 + 3521), (uint64_t)&a1[7 * a1[67] + 18], a4, a5);
    LODWORD(v16) = 3.0;
    double v18 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)a1, a2, *(unsigned __int8 *)(a1[96] + 3522), 0, (uint64_t)&v8[7 * a1[68]], v16, v17);
    LODWORD(v18) = 2.0;
    peridot::PeridotT0::calcP2PPerChannel((uint64_t)a1, a2, *(unsigned __int8 *)(a1[96] + 3521), 0, (uint64_t)&v8[7 * a1[69]], v18, v19);
    int v20 = &v8[7 * a1[68]];
    uint64_t v21 = &v8[7 * a1[78]];
    long long v22 = *((_OWORD *)v20 + 1);
    *(_OWORD *)uint64_t v21 = *(_OWORD *)v20;
    *((_OWORD *)v21 + 1) = v22;
    *((_OWORD *)v21 + 2) = *((_OWORD *)v20 + 2);
    float32x2_t result = (float32x2_t)v20[6];
    v21[6] = result;
  }
  return result;
}

__n128 peridot::PeridotT0::getAbsSkew(peridot::PeridotT0 *this, __int16 *a2)
{
  __n128 result = *(__n128 *)this;
  *(_OWORD *)(a2 + 6) = *(_OWORD *)((char *)this + 12);
  *(__n128 *)a2 = result;
  return result;
}

__n128 peridot::PeridotT0::getAbsSkewM1(peridot::PeridotT0 *this, __int16 *a2)
{
  __n128 result = *(__n128 *)((char *)this + 28);
  *(_OWORD *)(a2 + 6) = *(_OWORD *)((char *)this + 40);
  *(__n128 *)a2 = result;
  return result;
}

__n128 peridot::PeridotT0::setAbsSkew(peridot::PeridotT0 *this, __int16 *a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 12) = *(_OWORD *)(a2 + 6);
  *(__n128 *)this = result;
  return result;
}

__n128 peridot::PeridotT0::setAbsSkewM1(peridot::PeridotT0 *this, __int16 *a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 40) = *(_OWORD *)(a2 + 6);
  *(__n128 *)((char *)this + 28) = result;
  return result;
}

__n128 peridot::PeridotT0::getRsps_p2p_b2b(peridot::PeridotT0 *this, float *a2)
{
  __n128 result = *(__n128 *)((char *)this + 60);
  long long v3 = *(_OWORD *)((char *)this + 76);
  *(__n128 *)a2 = result;
  *((_OWORD *)a2 + 1) = v3;
  return result;
}

__n128 peridot::PeridotT0::setRsps_p2p_b2b(peridot::PeridotT0 *this, float *a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)((char *)this + 76) = *((_OWORD *)a2 + 1);
  *(__n128 *)((char *)this + 60) = result;
  return result;
}

uint64_t peridot::PeridotT0::getAbsDepth(uint64_t this, peridot::PeridotDepth *a2, const peridot::PeridotSpotRefDepth *a3, const peridot::PeridotSpotRefDepth *a4, double a5, double a6, double a7, double a8)
{
  uint64_t v8 = 0;
  uint64_t v9 = 112 * *(void *)(this + 672);
  float v10 = *(float *)((char *)a3 + v9);
  float v11 = *(float *)((char *)a4 + v9);
  do
  {
    LOWORD(a8) = *(_WORD *)(this + 2 * v8);
    a8 = (double)vmovl_s16(*(int16x4_t *)&a8).i32[0] * 1.0e-12;
    *(float *)&a8 = a8;
    uint64_t v12 = *((void *)a2 + 24 * v8);
    uint64_t v13 = *((void *)a2 + 24 * v8 + 1) - v12;
    if (!v13) {
      goto LABEL_13;
    }
    unint64_t v14 = v13 / 80;
    float v15 = (float)(*(float *)(this + 660) - *(float *)(this + 664)) * *(float *)(this + 656);
    float v16 = *(float *)&a8 - v10;
    if (v14 <= 1) {
      unint64_t v14 = 1;
    }
    if (v14 <= 1)
    {
      unint64_t v17 = 0;
LABEL_11:
      unint64_t v21 = v14 - v17;
      long long v22 = (float *)(v12 + 80 * v17 + 16);
      do
      {
        *long long v22 = (float)(v16 + *(v22 - 4)) + v15;
        v22 += 20;
        --v21;
      }
      while (v21);
      goto LABEL_13;
    }
    unint64_t v17 = v14 & 0xFFFFFFFFFFFFFFFELL;
    double v18 = (float *)(v12 + 96);
    unint64_t v19 = v14 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v20 = (float)(v16 + *(v18 - 4)) + v15;
      *(v18 - 20) = (float)(v16 + *(v18 - 24)) + v15;
      *double v18 = v20;
      v18 += 40;
      v19 -= 2;
    }
    while (v19);
    if (v14 != v17) {
      goto LABEL_11;
    }
LABEL_13:
    uint64_t v23 = *((void *)a2 + 24 * v8 + 8);
    uint64_t v24 = *((void *)a2 + 24 * v8 + 9) - v23;
    if (!v24) {
      goto LABEL_23;
    }
    unint64_t v25 = v24 / 80;
    float v26 = (float)(*(float *)(this + 660) - *(float *)(this + 664)) * *(float *)(this + 656);
    float v27 = *(float *)&a8 - v10;
    if (v25 <= 1) {
      unint64_t v25 = 1;
    }
    if (v25 <= 1)
    {
      unint64_t v28 = 0;
LABEL_21:
      unint64_t v32 = v25 - v28;
      char v33 = (float *)(v23 + 80 * v28 + 16);
      do
      {
        *char v33 = (float)(v27 + *(v33 - 4)) + v26;
        v33 += 20;
        --v32;
      }
      while (v32);
      goto LABEL_23;
    }
    unint64_t v28 = v25 & 0xFFFFFFFFFFFFFFFELL;
    int v29 = (float *)(v23 + 96);
    unint64_t v30 = v25 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v31 = (float)(v27 + *(v29 - 4)) + v26;
      *(v29 - 20) = (float)(v27 + *(v29 - 24)) + v26;
      *int v29 = v31;
      v29 += 40;
      v30 -= 2;
    }
    while (v30);
    if (v25 != v28) {
      goto LABEL_21;
    }
LABEL_23:
    uint64_t v34 = *((void *)a2 + 24 * v8 + 12);
    uint64_t v35 = *((void *)a2 + 24 * v8 + 13) - v34;
    if (!v35) {
      goto LABEL_33;
    }
    unint64_t v36 = v35 / 80;
    float v37 = (float)(*(float *)(this + 660) - *(float *)(this + 664)) * *(float *)(this + 656);
    *(float *)&a8 = *(float *)&a8 - v10;
    if (v36 <= 1) {
      unint64_t v36 = 1;
    }
    if (v36 <= 1)
    {
      unint64_t v38 = 0;
LABEL_31:
      unint64_t v42 = v36 - v38;
      float v43 = (float *)(v34 + 80 * v38 + 16);
      do
      {
        *float v43 = (float)(*(float *)&a8 + *(v43 - 4)) + v37;
        v43 += 20;
        --v42;
      }
      while (v42);
      goto LABEL_33;
    }
    unint64_t v38 = v36 & 0xFFFFFFFFFFFFFFFELL;
    double v39 = (float *)(v34 + 96);
    unint64_t v40 = v36 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v41 = (float)(*(float *)&a8 + *(v39 - 4)) + v37;
      *(v39 - 20) = (float)(*(float *)&a8 + *(v39 - 24)) + v37;
      float *v39 = v41;
      v39 += 40;
      v40 -= 2;
    }
    while (v40);
    if (v36 != v38) {
      goto LABEL_31;
    }
LABEL_33:
    uint64_t v44 = *((void *)a2 + 24 * v8 + 16);
    uint64_t v45 = *((void *)a2 + 24 * v8 + 17) - v44;
    if (!v45) {
      goto LABEL_2;
    }
    unint64_t v46 = v45 / 80;
    LOWORD(a8) = *(_WORD *)(this + 2 * v8 + 28);
    a8 = (double)vmovl_s16(*(int16x4_t *)&a8).i32[0] * 1.0e-12;
    *(float *)&a8 = a8;
    float v47 = (float)(*(float *)(this + 660) - *(float *)(this + 664)) * *(float *)(this + 656);
    if (v46 <= 1) {
      unint64_t v46 = 1;
    }
    if (v46 <= 1)
    {
      unint64_t v48 = 0;
LABEL_41:
      unint64_t v52 = v46 - v48;
      float v53 = (float *)(v44 + 80 * v48 + 16);
      do
      {
        *float v53 = (float)(*(v53 - 4) - v11) + (float)(*(float *)&a8 + v47);
        v53 += 20;
        --v52;
      }
      while (v52);
      goto LABEL_2;
    }
    unint64_t v48 = v46 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v49 = (float *)(v44 + 96);
    unint64_t v50 = v46 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v51 = (float)(*(v49 - 4) - v11) + (float)(*(float *)&a8 + v47);
      *(v49 - 20) = (float)(*(v49 - 24) - v11) + (float)(*(float *)&a8 + v47);
      *uint64_t v49 = v51;
      v49 += 40;
      v50 -= 2;
    }
    while (v50);
    if (v46 != v48) {
      goto LABEL_41;
    }
LABEL_2:
    ++v8;
  }
  while (v8 != 14);
  return this;
}

float32_t peridot::PeridotT0::getBaseOffset(peridot::PeridotT0 *this, char a2, float32x4_t *a3)
{
  *(double *)&uint64_t v3 = (float)((float)(*((float *)this + 165) - *((float *)this + 166)) * *((float *)this + 164));
  if (a2)
  {
    int32x4_t v4 = vmovl_s16(*(int16x4_t *)((char *)this + 28));
    v5.i64[0] = v4.i32[0];
    v5.i64[1] = v4.i32[1];
    float64x2_t v6 = vcvtq_f64_s64(v5);
    v5.i64[0] = v4.i32[2];
    v5.i64[1] = v4.i32[3];
    float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL);
    float64x2_t v8 = (float64x2_t)vdupq_lane_s64(v3, 0);
    float64x2_t v9 = vmlaq_f64(v8, v7, vcvtq_f64_s64(v5));
    float64x2_t v10 = vmlaq_f64(v8, v7, v6);
    int32x4_t v11 = vmovl_s16(*(int16x4_t *)((char *)this + 36));
    v5.i64[0] = v11.i32[0];
    v5.i64[1] = v11.i32[1];
    float64x2_t v12 = vcvtq_f64_s64(v5);
    v5.i64[0] = v11.i32[2];
    v5.i64[1] = v11.i32[3];
    float64x2_t v13 = vmlaq_f64(v8, v7, vcvtq_f64_s64(v5));
    float64x2_t v14 = vmlaq_f64(v8, v7, v12);
    int32x4_t v15 = vmovl_s16(*(int16x4_t *)((char *)this + 44));
    v5.i64[0] = v15.i32[0];
    v5.i64[1] = v15.i32[1];
    float64x2_t v16 = vcvtq_f64_s64(v5);
    v5.i64[0] = v15.i32[2];
    v5.i64[1] = v15.i32[3];
    float64x2_t v17 = vmlaq_f64(v8, v7, vcvtq_f64_s64(v5));
    float64x2_t v18 = vmlaq_f64(v8, v7, v16);
    unint64_t v19 = (char *)this + 52;
    float v20 = (char *)this + 54;
  }
  else
  {
    int32x4_t v21 = vmovl_s16(*(int16x4_t *)this);
    v22.i64[0] = v21.i32[0];
    v22.i64[1] = v21.i32[1];
    float64x2_t v23 = vcvtq_f64_s64(v22);
    v22.i64[0] = v21.i32[2];
    v22.i64[1] = v21.i32[3];
    float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL);
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(v3, 0);
    float64x2_t v9 = vmlaq_f64(v24, v7, vcvtq_f64_s64(v22));
    float64x2_t v10 = vmlaq_f64(v24, v7, v23);
    int32x4_t v25 = vmovl_s16(*(int16x4_t *)((char *)this + 8));
    v22.i64[0] = v25.i32[0];
    v22.i64[1] = v25.i32[1];
    float64x2_t v26 = vcvtq_f64_s64(v22);
    v22.i64[0] = v25.i32[2];
    v22.i64[1] = v25.i32[3];
    float64x2_t v13 = vmlaq_f64(v24, v7, vcvtq_f64_s64(v22));
    float64x2_t v14 = vmlaq_f64(v24, v7, v26);
    int32x4_t v27 = vmovl_s16(*(int16x4_t *)((char *)this + 16));
    v22.i64[0] = v27.i32[0];
    v22.i64[1] = v27.i32[1];
    float64x2_t v28 = vcvtq_f64_s64(v22);
    v22.i64[0] = v27.i32[2];
    v22.i64[1] = v27.i32[3];
    float64x2_t v17 = vmlaq_f64(v24, v7, vcvtq_f64_s64(v22));
    float64x2_t v18 = vmlaq_f64(v24, v7, v28);
    unint64_t v19 = (char *)this + 24;
    float v20 = (char *)this + 26;
  }
  LOWORD(v7.f64[0]) = *(_WORD *)v19;
  float32_t v29 = *(double *)&v3 + (double)vmovl_s16(*(int16x4_t *)&v7.f64[0]).i32[0] * 1.0e-12;
  *a3 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v9);
  a3[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v14), v13);
  a3[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v18), v17);
  a3[3].f32[0] = v29;
  LOWORD(v9.f64[0]) = *(_WORD *)v20;
  float32_t result = *(double *)&v3 + (double)vmovl_s16(*(int16x4_t *)&v9.f64[0]).i32[0] * 1.0e-12;
  a3[3].f32[1] = result;
  return result;
}

uint64_t peridot::AggressorsClassifier::AggressorsClassifier(uint64_t this, float a2)
{
  *(_OWORD *)(this + 152) = xmmword_2591203A0;
  *(void *)(this + 168) = 0x1C0000001CLL;
  *(unsigned char *)(this + 148) = 0;
  *(void *)(this + 16) = 0xBF8000003F4CCCCDLL;
  *(float *)(this + 24) = (float)(1.0 / a2) * 3.0;
  *(_DWORD *)(this + 36) = 1061997773;
  *(void *)(this + 28) = 0x3D4CCCCD3F800000;
  float32x2_t v2 = vmul_n_f32((float32x2_t)0x3F19999A40800000, a2);
  *(float32x2_t *)(this + 40) = v2;
  float v3 = a2 * 0.015;
  *(float *)(this + 48) = v3;
  *(float *)(this + 52) = a2;
  float v4 = a2 * 1.2;
  *(float *)(this + 68) = a2 * 3.0;
  *(float *)(this + 72) = v4;
  double v5 = 1.0 / a2;
  float v6 = v5 * 5.0e-10;
  *(float *)(this + 56) = v6;
  *(float *)(this + 60) = (float)(1.0 / a2) * 0.005;
  float v7 = v5 * 0.03;
  *(float *)(this + 64) = v7;
  *(_DWORD *)(this + 76) = 1061997773;
  float v8 = a2 * 0.6;
  *(float *)(this + 80) = a2 * 1.7;
  *(float *)(this + 84) = v8;
  *(float *)(this + 88) = v3;
  *(float *)(this + 92) = a2 + a2;
  *(float *)(this + 96) = v6;
  *(float *)(this + 100) = (float)(1.0 / a2) * 0.0066667;
  float v9 = v5 * 0.02;
  *(float *)(this + 104) = v9;
  *(_DWORD *)(this + 108) = 1061997773;
  float v10 = v5 * 7.5e-10;
  *(float *)(this + 112) = v10;
  *(float *)(this + 116) = v10;
  *(float *)(this + 120) = fminf(v2.f32[0], a2 * 1.7);
  *(float *)(this + 124) = a2 * 1.5;
  float v11 = v5 * 1.2;
  *(float *)(this + 128) = v3;
  *(float *)(this + 132) = v11;
  *(float *)(this + 136) = (float)(1.0 / a2) * 0.00625;
  *(float *)(this + 140) = a2 + a2;
  *(float *)(this + 144) = a2;
  return this;
}

{
  float32x2_t v2;
  float v3;
  float v4;
  double v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;

  *(_OWORD *)(this + 152) = xmmword_2591203A0;
  *(void *)(this + 168) = 0x1C0000001CLL;
  *(unsigned char *)(this + 148) = 0;
  *(void *)(this + 16) = 0xBF8000003F4CCCCDLL;
  *(float *)(this + 24) = (float)(1.0 / a2) * 3.0;
  *(_DWORD *)(this + 36) = 1061997773;
  *(void *)(this + 28) = 0x3D4CCCCD3F800000;
  float32x2_t v2 = vmul_n_f32((float32x2_t)0x3F19999A40800000, a2);
  *(float32x2_t *)(this + 40) = v2;
  float v3 = a2 * 0.015;
  *(float *)(this + 48) = v3;
  *(float *)(this + 52) = a2;
  float v4 = a2 * 1.2;
  *(float *)(this + 68) = a2 * 3.0;
  *(float *)(this + 72) = v4;
  double v5 = 1.0 / a2;
  float v6 = v5 * 5.0e-10;
  *(float *)(this + 56) = v6;
  *(float *)(this + 60) = (float)(1.0 / a2) * 0.005;
  float v7 = v5 * 0.03;
  *(float *)(this + 64) = v7;
  *(_DWORD *)(this + 76) = 1061997773;
  float v8 = a2 * 0.6;
  *(float *)(this + 80) = a2 * 1.7;
  *(float *)(this + 84) = v8;
  *(float *)(this + 88) = v3;
  *(float *)(this + 92) = a2 + a2;
  *(float *)(this + 96) = v6;
  *(float *)(this + 100) = (float)(1.0 / a2) * 0.0066667;
  float v9 = v5 * 0.02;
  *(float *)(this + 104) = v9;
  *(_DWORD *)(this + 108) = 1061997773;
  float v10 = v5 * 7.5e-10;
  *(float *)(this + 112) = v10;
  *(float *)(this + 116) = v10;
  *(float *)(this + 120) = fminf(v2.f32[0], a2 * 1.7);
  *(float *)(this + 124) = a2 * 1.5;
  float v11 = v5 * 1.2;
  *(float *)(this + 128) = v3;
  *(float *)(this + 132) = v11;
  *(float *)(this + 136) = (float)(1.0 / a2) * 0.00625;
  *(float *)(this + 140) = a2 + a2;
  *(float *)(this + 144) = a2;
  return this;
}

double peridot::AggressorsClassifier::AggressorsClassifier(peridot::AggressorsClassifier *this)
{
  *(_OWORD *)((char *)this + 152) = xmmword_2591203A0;
  *((void *)this + 21) = 0x1C0000001CLL;
  *((unsigned char *)this + 148) = 0;
  *((_OWORD *)this + 1) = xmmword_259120B50;
  *((_OWORD *)this + 2) = xmmword_259120B60;
  *((_OWORD *)this + 3) = xmmword_2591203C0;
  *((_OWORD *)this + 4) = xmmword_2591203D0;
  *((_OWORD *)this + 5) = xmmword_2591203E0;
  *((_OWORD *)this + 6) = xmmword_2591203F0;
  double result = 5.20906654e-76;
  *((_OWORD *)this + 7) = xmmword_259120400;
  *((_OWORD *)this + 8) = xmmword_259120410;
  *((_DWORD *)this + 36) = 1065353216;
  return result;
}

{
  double result;

  *(_OWORD *)((char *)this + 152) = xmmword_2591203A0;
  *((void *)this + 21) = 0x1C0000001CLL;
  *((unsigned char *)this + 148) = 0;
  *((_OWORD *)this + 1) = xmmword_259120B50;
  *((_OWORD *)this + 2) = xmmword_259120B60;
  *((_OWORD *)this + 3) = xmmword_2591203C0;
  *((_OWORD *)this + 4) = xmmword_2591203D0;
  *((_OWORD *)this + 5) = xmmword_2591203E0;
  *((_OWORD *)this + 6) = xmmword_2591203F0;
  double result = 5.20906654e-76;
  *((_OWORD *)this + 7) = xmmword_259120400;
  *((_OWORD *)this + 8) = xmmword_259120410;
  *((_DWORD *)this + 36) = 1065353216;
  return result;
}

void peridot::AggressorsClassifier::classifyAggressors(uint64_t a1, peridot::PeridotUserOutput *a2, uint64_t a3, uint64_t a4)
{
}

void peridot::AggressorsClassifier::setAggressorFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  v17[84] = *MEMORY[0x263EF8340];
  if (a5 == 28)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    float v8 = (unsigned char *)(a4 + 2);
    do
    {
      if (*(v8 - 2))
      {
        v17[v7++ + 42] = 0;
        v17[v6++] = v5;
      }
      if (*(v8 - 1))
      {
        v17[v7++ + 42] = 1;
        v17[v6++] = v5;
      }
      if (*v8)
      {
        v17[v7++ + 42] = 2;
        v17[v6++] = v5;
      }
      ++v5;
      v8 += 3;
    }
    while (v5 != 14);
    if (v7)
    {
      for (unint64_t i = 0; i < v7; i += 2)
      {
        float64x2_t v14 = &v17[i + 42];
        int32x4_t v15 = &v17[i];
        if (*(_DWORD *)(a3 + 12 * *v15 + 4 * *v14) == 10)
        {
          uint64_t v16 = a2 + 296 * *v15 + 84 * *v14;
          *(_DWORD *)(v16 + 80) |= 0x10000000u;
        }
        uint64_t v13 = a2 + 296 * v15[1] + 84 * v14[1];
        *(_DWORD *)(v13 + 80) |= 0x10000000u;
      }
    }
  }
  else
  {
    uint64_t v9 = 0;
    int v10 = 1 << a5;
    float v11 = (_DWORD *)(a2 + 164);
    do
    {
      if (*(unsigned char *)(a4 + v9)) {
        *(v11 - 21) |= v10;
      }
      if (*(unsigned char *)(a4 + v9 + 1)) {
        *v11 |= v10;
      }
      if (*(unsigned char *)(a4 + v9 + 2)) {
        v11[21] |= v10;
      }
      v9 += 3;
      v11 += 74;
    }
    while (v9 != 42);
  }
}

void sub_2590E6A1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590E6FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_2590E71A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590E71F0()
{
}

void sub_2590E71F8()
{
}

void sub_2590E7200()
{
}

void sub_2590E7208()
{
}

void sub_2590E7444(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590E76C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double afdr_package::bufferClass::b_getData(afdr_package::bufferClass *this, const unint64_t *a2, const char *a3, double *a4, int *a5)
{
  if ((*(_DWORD *)a3 != 1953393013 || *((_WORD *)a3 + 2) != 13873)
    && (*(_DWORD *)a3 != 1953393013 || *((_WORD *)a3 + 2) != 12851)
    && (*(_DWORD *)a3 != 1735289203 || *((_WORD *)a3 + 2) != 25964)
    && *(_DWORD *)a3 == 1651863396
    && *((_WORD *)a3 + 2) == 25964)
  {
    unint64_t v9 = *((unsigned __int8 *)this + *(int *)a2) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 2)) << 8) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 4)) << 16) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 6)) << 24) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 8)) << 32) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 10)) << 40) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 12)) << 48) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 14)) << 56);
    uint64_t v10 = *((unsigned __int8 *)this + *((int *)a2 + 30));
    unint64_t v11 = *((unsigned __int8 *)this + *((int *)a2 + 16)) | ((unint64_t)*((unsigned __int8 *)this
                                                                              + *((int *)a2 + 18)) << 8) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 20)) << 16) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 22)) << 24) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 24)) << 32) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 26)) << 40) | ((unint64_t)*((unsigned __int8 *)this + *((int *)a2 + 28)) << 48);
    *(void *)&double result = 0x100000002;
    *(void *)a5 = 0x100000002;
    *(void *)a4 = v9;
    *((void *)a4 + 1) = v11 | (v10 << 56);
  }
  return result;
}

unsigned char *afdr_package::bufferClass::getData(unsigned char *this, const unint64_t *a2, const char *a3, double *__dst, int *a5)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)a3 == 1953393013 && *((_WORD *)a3 + 2) == 13873)
  {
    for (uint64_t i = 0; i != 2048; i += 2)
    {
      float64x2_t v14 = &a2[i];
      char v15 = this[*(int *)v14];
      LOBYTE(v14) = this[*((int *)v14 + 2)];
      uint64_t v16 = &__src[i];
      *uint64_t v16 = v15;
      v16[1] = (_BYTE)v14;
    }
  }
  else if (*(_DWORD *)a3 == 1953393013 && *((_WORD *)a3 + 2) == 12851)
  {
    for (uint64_t j = 0; j != 2048; j += 2)
    {
      float64x2_t v18 = &a2[j];
      char v19 = this[*(int *)v18];
      LOBYTE(v18) = this[*((int *)v18 + 2)];
      float v20 = &__src[j];
      *float v20 = v19;
      v20[1] = (_BYTE)v18;
    }
  }
  else if (*(_DWORD *)a3 == 1735289203 && *((_WORD *)a3 + 2) == 25964)
  {
    for (uint64_t k = 0; k != 2048; k += 2)
    {
      int64x2_t v22 = &a2[k];
      char v23 = this[*(int *)v22];
      LOBYTE(v22) = this[*((int *)v22 + 2)];
      float64x2_t v24 = &__src[k];
      *float64x2_t v24 = v23;
      v24[1] = (_BYTE)v22;
    }
  }
  else if (*(_DWORD *)a3 == 1651863396 && *((_WORD *)a3 + 2) == 25964)
  {
    for (uint64_t m = 0; m != 2048; m += 2)
    {
      uint64_t v10 = &a2[m];
      char v11 = this[*(int *)v10];
      LOBYTE(v10) = this[*((int *)v10 + 2)];
      float64x2_t v12 = &__src[m];
      *float64x2_t v12 = v11;
      v12[1] = (_BYTE)v10;
    }
    *(void *)a5 = 0x100000100;
    return memcpy(__dst, __src, 0x800uLL);
  }
  return this;
}

double afdr_package::jlin_v100::jlinClass::get_efl(afdr_package::jlin_v100::jlinClass *this, double *a2, int *a3)
{
  uint64_t v3 = *((void *)this + 1) << 32;
  unint64_t v4 = *(unsigned __int8 *)(*(void *)this + ((v3 + 0x400000000) >> 32)) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0x500000000) >> 32)) << 8) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0x600000000) >> 32)) << 16) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0x700000000) >> 32)) << 24) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0x800000000) >> 32)) << 32) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0x900000000) >> 32)) << 40) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0xA00000000) >> 32)) << 48) | ((unint64_t)*(unsigned __int8 *)(*(void *)this + ((v3 + 0xB00000000) >> 32)) << 56);
  *(void *)&double result = 0x100000001;
  *(void *)a3 = 0x100000001;
  *(void *)a2 = v4;
  return result;
}

uint64_t *afdr_package::jlin_v100::jlinClass::set_pixelSize(uint64_t *this)
{
  uint64_t v1 = *this;
  uint64_t v2 = this[1] << 32;
  *(unsigned char *)(v1 + ((v2 + 0xC00000000) >> 32)) = 77;
  *(unsigned char *)(v1 + ((v2 + 0xD00000000) >> 32)) = -37;
  *(unsigned char *)(v1 + ((v2 + 0xE00000000) >> 32)) = -65;
  *(unsigned char *)(v1 + ((v2 + 0xF00000000) >> 32)) = -78;
  *(unsigned char *)(v1 + ((v2 + 0x1000000000) >> 32)) = -46;
  *(unsigned char *)(v1 + ((v2 + 0x1100000000) >> 32)) = -92;
  *(unsigned char *)(v1 + ((v2 + 0x1200000000) >> 32)) = -124;
  *(unsigned char *)(v1 + ((v2 + 0x1300000000) >> 32)) = 63;
  return this;
}

uint64_t afdr_package::bufferClass::setData(uint64_t this, const unint64_t *a2, const char *a3)
{
  if (*(_DWORD *)a3 == 1953393013 && *((_WORD *)a3 + 2) == 13873)
  {
    int v8 = 4;
LABEL_23:
    BOOL v7 = 1;
    goto LABEL_24;
  }
  if (*(_DWORD *)a3 == 1735289203 && *((_WORD *)a3 + 2) == 25964)
  {
    int v8 = 8;
    goto LABEL_23;
  }
  if (*(_DWORD *)a3 == 1651863396 && *((_WORD *)a3 + 2) == 25964)
  {
    int v8 = 16;
    goto LABEL_23;
  }
  BOOL v7 = *(_DWORD *)a3 == 1953393013 && *((_WORD *)a3 + 2) == 12851;
  int v8 = 8 * v7;
LABEL_24:
  if (v8 * v7 == 16)
  {
    *(unsigned char *)(this + *(int *)a2) = 0;
    *(unsigned char *)(this + *((int *)a2 + 2)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 4)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 6)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 8)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 10)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 12)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 14)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 16)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 18)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 20)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 22)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 24)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 26)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 28)) = 0;
    *(unsigned char *)(this + *((int *)a2 + 30)) = 0;
  }
  return this;
}

void *coder::internal::FFTImplementationCallback::doHalfLengthRadix2(uint64_t a1, float32x2_t *a2)
{
  uint64_t v103 = *MEMORY[0x263EF8340];
  bzero(a2, 0x2A000uLL);
  uint64_t v4 = 0;
  int v5 = 0;
  int v6 = 1;
  do
  {
    *(_DWORD *)&v101[4 * v4] = v6;
    unsigned int v7 = 128;
    do
    {
      v7 >>= 1;
      v5 ^= v7;
    }
    while ((v5 & v7) == 0);
    int v6 = v5 + 1;
    ++v4;
  }
  while (v4 != 127);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  int v102 = v6;
  uint64_t v10 = (__int32 *)(a1 + 4);
  char v11 = a2 + 1;
  uint64_t v12 = 1;
  double result = &coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::reconVar1;
  float64x2_t v14 = a2;
  do
  {
    uint64_t v15 = 0;
    uint64_t v16 = v8 << 8;
    float64x2_t v17 = v10;
    do
    {
      float64x2_t v18 = &a2[256 * (int)v8 - 1 + *(_DWORD *)&v101[v15]];
      v18->i32[0] = *(v17 - 1);
      __int32 v19 = *v17;
      v17 += 2;
      v18->i32[1] = v19;
      v15 += 4;
    }
    while (v15 != 216);
    for (uint64_t i = 0; i != 128; i += 8)
    {
      int32x4_t v21 = (float *)&v14[i];
      float32x4x4_t v104 = vld4q_f32(v21);
      v105.val[2] = vsubq_f32(v104.val[0], v104.val[2]);
      v105.val[3] = vsubq_f32(v104.val[1], v104.val[3]);
      v105.val[0] = vaddq_f32(v104.val[0], v104.val[2]);
      v105.val[1] = vaddq_f32(v104.val[1], v104.val[3]);
      vst4q_f32(v21, v105);
    }
    int v22 = 125;
    unsigned int v23 = 4;
    int v24 = 2;
    unint64_t v25 = 32;
    do
    {
      uint64_t v27 = v22;
      unsigned int v28 = v23;
      if (v22 >= 1)
      {
        uint64_t v29 = 0;
        uint64_t v30 = v16 + v22;
        uint64_t v31 = v24;
        uint64_t v32 = 8 * v23;
        char v33 = &v14[v31];
        uint64_t v34 = v9;
        do
        {
          uint64_t v35 = (float *)((char *)v33 + v29);
          float v36 = *(float *)((char *)v33->f32 + v29);
          float v37 = *(float *)((char *)&v33->f32[1] + v29);
          unint64_t v38 = (float *)((char *)v14 + v29);
          float v39 = *(float *)((char *)v14->f32 + v29);
          float v40 = *(float *)((char *)&v14->f32[1] + v29);
          *uint64_t v35 = v39 - v36;
          v35[1] = v40 - v37;
          *unint64_t v38 = v39 + v36;
          v38[1] = v40 + v37;
          v34 += v23;
          v29 += v32;
        }
        while (v34 < v30);
        if ((int)v27 >= 1)
        {
          float v41 = (char *)&a2[v12 + v31] + 4;
          unint64_t v42 = v11;
          unint64_t v43 = v25;
          uint64_t v44 = v12;
          do
          {
            uint64_t v45 = 0;
            float v46 = coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::b_fv[v43];
            float v47 = coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::fv1[v43];
            uint64_t v48 = v44;
            do
            {
              uint64_t v49 = (float *)&v41[v45];
              float v51 = *(float *)&v41[v45 - 4];
              float v50 = *(float *)&v41[v45];
              float v52 = -(float)((float)(v50 * v47) - (float)(v51 * v46));
              float v53 = (float)(v50 * v46) + (float)(v51 * v47);
              uint64_t v54 = (float *)((char *)v42 + v45);
              float v55 = *(float *)((char *)v42->f32 + v45);
              *(v49 - 1) = v55 - v52;
              float v56 = *(float *)((char *)&v42->f32[1] + v45);
              *uint64_t v49 = v56 - v53;
              *uint64_t v54 = v52 + v55;
              v54[1] = v56 + v53;
              v48 += v23;
              v45 += v32;
            }
            while (v48 < v44 + v27);
            ++v44;
            v43 += v25;
            v41 += 8;
            ++v42;
          }
          while (v43 < 0x40);
        }
      }
      int v24 = v23;
      v23 *= 2;
      int v22 = v27 - v28;
      BOOL v26 = v25 > 1;
      v25 >>= 1;
    }
    while (v26);
    uint64_t v57 = 0;
    uint64_t v58 = v8 << 11;
    int v59 = (float *)&a2[256 * v8];
    float v60 = *v59;
    float v61 = v59[1];
    *int v59 = v61 + *v59;
    v59[1] = 0.0;
    double v62 = (char *)a2 + ((v8 << 11) | 0x400);
    *(float *)double v62 = v60 - v61;
    *((_DWORD *)v62 + 1) = 0;
    float v63 = &byte_259135341;
    do
    {
      uint64_t v64 = &v14[v57];
      unsigned int v65 = *v63++;
      double v66 = (char *)&coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::reconVar1
          + v57 * 8;
      uint64_t v67 = (const float *)((char *)&coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::reconVar2
                          + ++v57 * 8);
      uint64_t v68 = (int)((v16 | v65) - 1);
      float32x2_t v69 = vld1_dup_f32(v67++);
      uint64_t v70 = 8 * v65 - 8;
      float v71 = *v67;
      uint64_t v72 = (const float *)((char *)&coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::reconVar2
                          + v70);
      float32x2_t v73 = vld1_dup_f32(v72++);
      float32x2_t v74 = a2[v68];
      float32x2_t v75 = *(float32x2_t *)((char *)&coder::internal::FFTImplementationCallback::doHalfLengthRadix2(float const*,creal32_T *)::reconVar1
                           + v70);
      float32x2_t v76 = v64[1];
      float32x2_t v77 = vmul_f32(v73, v76);
      float v78 = *v72;
      float32x2_t v79 = vmul_f32(v69, v74);
      float32x2_t v80 = *(float32x2_t *)(v66 + 8);
      float32x2_t v81 = vmul_n_f32(v80, v74.f32[0]);
      float32x2_t v82 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v74, v71));
      float32x2_t v83 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v80, v74, 1));
      float32x2_t v84 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v76, v71));
      float32x2_t v85 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v76, v80, 1));
      float32x2_t v86 = vmul_n_f32(v76, v80.f32[0]);
      v87.i32[0] = vsub_f32(v86, v85).u32[0];
      v87.i32[1] = vadd_f32(v86, v85).i32[1];
      float32x2_t v88 = vadd_f32(v87, v82);
      v86.i32[0] = vadd_f32(v88, v79).u32[0];
      v89.i32[0] = vsub_f32(vadd_f32(v81, v83), v84).u32[0];
      v89.i32[1] = vadd_f32(vsub_f32(v81, v83), v84).i32[1];
      v86.i32[1] = vsub_f32(v88, v79).i32[1];
      float32x2_t v90 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v74, v75, 1));
      float32x2_t v91 = vmul_n_f32(v74, v75.f32[0]);
      v79.i32[0] = vsub_f32(v91, v90).u32[0];
      v79.i32[1] = vadd_f32(v91, v90).i32[1];
      float32x2_t v92 = vadd_f32(v79, (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v76, *v72)));
      v91.i32[0] = vadd_f32(v92, v77).u32[0];
      v64[129] = vmul_f32(vmla_f32(v89, v76, v69), (float32x2_t)0x3F0000003F000000);
      v91.i32[1] = vsub_f32(v92, v77).i32[1];
      float32x2_t v93 = (float32x2_t)vrev64_s32((int32x2_t)vmul_n_f32(v74, v78));
      float32x2_t v94 = vmul_n_f32(v75, v76.f32[0]);
      float32x2_t v95 = (float32x2_t)vrev64_s32((int32x2_t)vmul_lane_f32(v75, v76, 1));
      v64[1] = vmul_f32(v86, (float32x2_t)0x3F0000003F000000);
      v76.i32[0] = vsub_f32(vadd_f32(v94, v95), v93).u32[0];
      v76.i32[1] = vadd_f32(vsub_f32(v94, v95), v93).i32[1];
      a2[v68] = vmul_f32(v91, (float32x2_t)0x3F0000003F000000);
      a2[(v16 | v65) + 127] = vmul_f32(vmla_f32(v76, v74, v73), (float32x2_t)0x3F0000003F000000);
    }
    while (v57 != 63);
    double v96 = (float *)((char *)a2 + (v58 | 0x200));
    float v97 = *v96;
    float v98 = v96[1];
    float v99 = *v96 * 0.0;
    v96[1] = (float)((float)(v98 * 0.0) + (float)((float)(v99 - v98) * 2.0)) * 0.5;
    float v100 = (float *)((char *)a2 + (v58 | 0x600));
    *float v100 = v97;
    ++v8;
    v9 += 256;
    v12 += 256;
    v100[1] = (float)((float)(v98 * -0.0) + (float)((float)(v99 + v98) * 2.0)) * 0.5;
    v10 += 108;
    v14 += 256;
    v11 += 256;
  }
  while (v8 != 84);
  return result;
}

uint64_t coder::internal::FFTImplementationCallback::r2br_r2dit_trig(uint64_t result, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  uint64_t v4 = a2 + 8;
  uint64_t v5 = 1;
  uint64_t v6 = a2;
  do
  {
    uint64_t v7 = 0;
    int v8 = 0;
    uint64_t v9 = v2 << 8;
    int v10 = v2 << 8;
    do
    {
      *(void *)(a2 + 8 * v10) = *(void *)(result + 8 * (v7 + v9));
      unsigned int v11 = 256;
      do
      {
        v11 >>= 1;
        v8 ^= v11;
      }
      while ((v8 & v11) == 0);
      int v10 = v8 + v9;
      ++v7;
    }
    while (v7 != 255);
    uint64_t v12 = 0;
    *(void *)(a2 + 8 * v10) = *(void *)(result + ((v2 << 11) | 0x7F8));
    do
    {
      uint64_t v13 = (float *)(v6 + v12);
      float32x4x4_t v56 = vld4q_f32(v13);
      v57.val[2] = vsubq_f32(v56.val[0], v56.val[2]);
      v57.val[3] = vsubq_f32(v56.val[1], v56.val[3]);
      v57.val[0] = vaddq_f32(v56.val[0], v56.val[2]);
      v57.val[1] = vaddq_f32(v56.val[1], v56.val[3]);
      vst4q_f32(v13, v57);
      v12 += 64;
    }
    while (v12 != 2048);
    int v14 = 2;
    int v15 = 253;
    unsigned int v16 = 4;
    unint64_t v17 = 64;
    do
    {
      int v19 = v14;
      int v14 = v16;
      uint64_t v20 = v15;
      uint64_t v21 = v16;
      if (v15 >= 1)
      {
        uint64_t v22 = 0;
        uint64_t v23 = v9 + v15;
        uint64_t v24 = v19;
        uint64_t v25 = 8 * v21;
        uint64_t v26 = v6 + 8 * v19;
        uint64_t v27 = v3;
        do
        {
          unsigned int v28 = (float *)(v26 + v22);
          float v29 = *(float *)(v26 + v22);
          float v30 = *(float *)(v26 + v22 + 4);
          uint64_t v31 = (float *)(v6 + v22);
          float v32 = *(float *)(v6 + v22);
          float v33 = *(float *)(v6 + v22 + 4);
          *unsigned int v28 = v32 - v29;
          v28[1] = v33 - v30;
          *uint64_t v31 = v32 + v29;
          v31[1] = v33 + v30;
          v27 += v21;
          v22 += v25;
        }
        while (v27 < v23);
        if ((int)v20 >= 1)
        {
          uint64_t v34 = a2 + 4 + 8 * (v5 + v24);
          uint64_t v35 = v4;
          unint64_t v36 = v17;
          uint64_t v37 = v5;
          do
          {
            uint64_t v38 = 0;
            float v39 = fv[v36];
            float v40 = coder::internal::FFTImplementationCallback::r2br_r2dit_trig(creal32_T const*,creal32_T*)::b_fv[v36];
            uint64_t v41 = v37;
            do
            {
              unint64_t v42 = (float *)(v34 + v38);
              float v44 = *(float *)(v34 + v38 - 4);
              float v43 = *(float *)(v34 + v38);
              float v45 = -(float)((float)(v43 * v40) - (float)(v44 * v39));
              float v46 = (float)(v43 * v39) + (float)(v44 * v40);
              float v47 = (float *)(v35 + v38);
              float v48 = *(float *)(v35 + v38);
              float v49 = *(float *)(v35 + v38 + 4);
              *(v42 - 1) = v48 - v45;
              *unint64_t v42 = v49 - v46;
              *float v47 = v45 + v48;
              v47[1] = v49 + v46;
              v41 += v21;
              v38 += v25;
            }
            while (v41 < v37 + v20);
            ++v37;
            v36 += v17;
            v34 += 8;
            v35 += 8;
          }
          while (v36 < 0x80);
        }
      }
      unsigned int v16 = 2 * v21;
      int v15 = v20 - v21;
      BOOL v18 = v17 > 1;
      v17 >>= 1;
    }
    while (v18);
    ++v2;
    v3 += 256;
    v5 += 256;
    v6 += 2048;
    v4 += 2048;
  }
  while (v2 != 256);
  uint64_t v50 = 0;
  float32x4_t v51 = (float32x4_t)vdupq_n_s32(0x3B800000u);
  do
  {
    float v52 = (float32x4_t *)(a2 + v50);
    float32x4_t v53 = *(float32x4_t *)(a2 + v50 + 32);
    float32x4_t v54 = *(float32x4_t *)(a2 + v50 + 48);
    float32x4_t v55 = vmulq_f32(*(float32x4_t *)(a2 + v50 + 16), v51);
    *float v52 = vmulq_f32(*(float32x4_t *)(a2 + v50), v51);
    v52[1] = v55;
    v52[2] = vmulq_f32(v53, v51);
    v52[3] = vmulq_f32(v54, v51);
    v50 += 64;
  }
  while (v50 != 0x80000);
  return result;
}

uint64_t spot_finder_peridot(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v1067 = v5;
  uint64_t v1056 = v7;
  uint64_t v1057 = v6;
  uint64_t v9 = v8;
  uint64_t v1071 = v10;
  uint64_t v12 = v11;
  int v14 = v13;
  int v15 = (float32x4_t **)v4;
  v1157[4536] = *(void **)MEMORY[0x263EF8340];
  uint64_t v1118 = 0;
  uint64_t v1119 = 0;
  char v1120 = 0;
  uint64_t v1122 = 0;
  uint64_t v1114 = 0;
  uint64_t v1115 = 0;
  char v1116 = 0;
  uint64_t v1117 = 0;
  v1110[0] = 0;
  v1110[1] = 0;
  char v1111 = 0;
  uint64_t v1112 = 0;
  int v1113 = 0;
  v1106[0] = 0;
  v1106[1] = 0;
  char v1107 = 0;
  uint64_t v1108 = 0;
  int v1109 = 0;
  v1102[0] = 0;
  v1102[1] = 0;
  char v1103 = 0;
  uint64_t v1104 = 0;
  int v1105 = 0;
  v1098[0] = 0;
  v1098[1] = 0;
  char v1099 = 0;
  uint64_t v1100 = 0;
  int v1101 = 0;
  v1095[0] = 0;
  v1095[1] = 0;
  char v1096 = 0;
  uint64_t v1097 = 0;
  v1092[0] = 0;
  v1092[1] = 0;
  char v1093 = 0;
  uint64_t v1094 = 0;
  v1089[0] = 0;
  v1089[1] = 0;
  char v1090 = 0;
  uint64_t v1091 = 0;
  if ((isInitialized_spot_finder_peridot & 1) == 0)
  {
    memcpy(&state, &uv, 0x9C4uLL);
    isInitialized_spot_finder_peridot = 1;
  }
  uint64_t v16 = *(int *)(v1071 + 4);
  uint64_t v1104 = 0x6C00000054;
  int v1105 = v16;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1102, 9072 * v16);
  int v17 = *(_DWORD *)(v1071 + 4);
  if (v17 >= 1)
  {
    uint64_t v18 = 0;
    LODWORD(v19) = 9072 * v17;
    uint64_t v20 = *v15;
    uint64_t v21 = v1102[0];
    uint64_t v19 = (int)v19 <= 1 ? 1 : v19;
    if (v19 < 8) {
      goto LABEL_12;
    }
    if (v1102[0] - (void)v20 < 0x20uLL) {
      goto LABEL_12;
    }
    uint64_t v18 = v19 & 0x7FFFFFF0;
    uint64_t v22 = (float32x4_t *)(v1102[0] + 16);
    uint64_t v23 = v20 + 1;
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v26 = v18;
    do
    {
      float32x4_t v27 = vminnmq_f32(*v23, _Q0);
      v22[-1] = vminnmq_f32(v23[-1], _Q0);
      *uint64_t v22 = v27;
      v22 += 2;
      v23 += 2;
      v26 -= 8;
    }
    while (v26);
    if (v18 != v19)
    {
LABEL_12:
      uint64_t v28 = v19 - v18;
      uint64_t v29 = v18;
      float v30 = (float *)(v21 + 4 * v18);
      uint64_t v31 = &v20->f32[v29];
      do
      {
        float v32 = *v31++;
        *v30++ = fminf(v32, 1.0);
        --v28;
      }
      while (v28);
    }
  }
  uint64_t v33 = (9072 * v1105);
  uint64_t v1104 = 0x6C00000054;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1102, 9072 * v1105);
  if ((int)v33 >= 1)
  {
    uint64_t v34 = (float32x4_t *)(v1102[0] + 16);
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      float32x4_t v36 = vsubq_f32(_Q0, *v34);
      v34[-1] = vsubq_f32(_Q0, v34[-1]);
      *uint64_t v34 = v36;
      v34 += 2;
      v33 -= 8;
    }
    while (v33);
  }
  int v37 = v1105;
  int v38 = 9072 * v1105;
  v1059 = v12;
  if (v1105 >= 1)
  {
    uint64_t v39 = v1102[0];
    if (v38 <= 1) {
      uint64_t v40 = 1;
    }
    else {
      uint64_t v40 = v38;
    }
    if (v40 < 2)
    {
      uint64_t v41 = 0;
LABEL_26:
      uint64_t v48 = v40 - v41;
      float v49 = (float *)(v39 + 4 * v41);
      do
      {
        *float v49 = logf(*v49);
        ++v49;
        --v48;
      }
      while (v48);
      goto LABEL_28;
    }
    uint64_t v42 = v9;
    int v43 = v14;
    uint64_t v44 = v16;
    uint64_t v41 = v40 & 0x7FFFFFF0;
    float v45 = (void *)v1102[0];
    uint64_t v46 = v41;
    do
    {
      LODWORD(v1075) = *v45;
      float __srcd = logf(COERCE_FLOAT(HIDWORD(*v45)));
      *(float *)&uint64_t v47 = logf(v1075);
      *((float *)&v47 + 1) = __srcd;
      *v45++ = v47;
      v46 -= 2;
    }
    while (v46);
    uint64_t v16 = v44;
    int v14 = v43;
    uint64_t v9 = v42;
    if (v41 != v40) {
      goto LABEL_26;
    }
  }
LABEL_28:
  uint64_t v1104 = 0x6C00000054;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1102, 9072 * v37);
  if (v37 >= 1)
  {
    uint64_t v50 = v1102[0];
    if (v38 <= 1) {
      uint64_t v51 = 1;
    }
    else {
      uint64_t v51 = v38;
    }
    if (v51 >= 8)
    {
      uint64_t v52 = v51 & 0x7FFFFFF0;
      float32x4_t v53 = (float32x4_t *)(v1102[0] + 16);
      uint64_t v54 = v52;
      do
      {
        float32x4_t v55 = vnegq_f32(*v53);
        v53[-1] = vnegq_f32(v53[-1]);
        *float32x4_t v53 = v55;
        v53 += 2;
        v54 -= 8;
      }
      while (v54);
      if (v52 == v51) {
        goto LABEL_39;
      }
    }
    else
    {
      uint64_t v52 = 0;
    }
    uint64_t v56 = v51 - v52;
    float32x4x4_t v57 = (float *)(v50 + 4 * v52);
    do
    {
      *float32x4x4_t v57 = -*v57;
      ++v57;
      --v56;
    }
    while (v56);
  }
LABEL_39:
  uint64_t v1058 = v9;
  uint64_t v1074 = v16;
  if (v14 < 301) {
    goto LABEL_301;
  }
  unint64_t v58 = *(unsigned int *)(v1071 + 4);
  if ((int)v58 <= 1)
  {
LABEL_302:
    for (uint64_t i = 0; i != 180; ++i)
    {
      LODWORD(v1078) = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b_fv[i];
      float __srce = expf(COERCE_FLOAT(HIDWORD(spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b_fv[i])));
      *(float *)&uint64_t v356 = expf(v1078);
      *((float *)&v356 + 1) = __srce;
      *(void *)&v1139[i * 8] = v356;
    }
    float v357 = expf(-1972.0);
    float v358 = 1.0;
    char v359 = 1;
    goto LABEL_308;
  }
  unint64_t v59 = (v58 >> 1) + (v58 & 1) + ((v58 >> 1) & 0x7FFFFF80);
  if (v59 < 4) {
    uint64_t v60 = 1;
  }
  else {
    uint64_t v60 = v59 - 2;
  }
  memset(v1157, 0, 17);
  memset(v1123, 0, 17);
  *(_DWORD *)&v1123[24] = 0;
  v1153 = 0;
  uint64_t v1154 = 0;
  char v1155 = 0;
  int v1156 = 0;
  v1148 = 0;
  uint64_t v1149 = 0;
  char v1150 = 0;
  long long v1145 = 0uLL;
  char v1146 = 0;
  uint64_t v61 = v1105;
  if ((double)v60 <= (double)v1105) {
    unint64_t v62 = v60;
  }
  else {
    unint64_t v62 = v1105;
  }
  uint64_t v1100 = 0x6C00000054;
  int v1101 = v62;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1098, 9072 * v62);
  int v1054 = v14;
  float v63 = (int *)v1098[0];
  if (9072 * (int)v62 >= 1) {
    bzero(v1098[0], 4 * (9072 * v62));
  }
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v66 = (v62 - 1);
  uint64_t v67 = (int)v62;
  uint64_t v1068 = 4 * v61;
  if (v62 >= 2) {
    unint64_t v68 = v62 - 2;
  }
  else {
    unint64_t v68 = 0;
  }
  uint64_t v1063 = 4 * (v62 - 2);
  uint64_t v1064 = 4 * (v62 - 1);
  unint64_t v69 = v68 + 1;
  _CF = v66 >= v68 && (int)v62 - 2 >= v68;
  char v71 = !_CF;
  char v1062 = v71;
  uint64_t v1072 = v69 & 0x1FFFFFFFCLL;
  unint64_t v1069 = v62 - (v69 & 0x1FFFFFFFCLL);
  unint64_t v1070 = v68 + 1;
  uint64_t v72 = v1102[0];
  uint64_t v1061 = 4 * (int)v62 - 4;
  v1053 = v63;
  v1076 = (_DWORD *)v1102[0];
  unint64_t v1065 = v68;
  uint64_t v1060 = -4 * v68;
  uint64_t v1055 = v61;
  while (2)
  {
    v1073 = v63;
    LODWORD(v1157[3]) = v61;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1157, v61);
    if ((int)v61 >= 1)
    {
      float32x2_t v73 = v1157[0];
      bzero(v1157[0], v1068);
      float32x2_t v74 = v1076;
      uint64_t v75 = v61;
      do
      {
        *v73++ = *v74;
        v74 += 9072;
        --v75;
      }
      while (v75);
    }
    unint64_t v76 = LODWORD(v1157[3]);
    int v1156 = v62;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)&v1153, v62);
    *(_DWORD *)&v1123[24] = v62;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1123, v62);
    if ((int)v62 >= 1)
    {
      float32x2_t v77 = v1153;
      uint64_t v78 = *(void *)v1123;
      if (v62 < 8)
      {
        unint64_t v79 = 0;
LABEL_69:
        unint64_t v83 = v62 - v79;
        uint64_t v84 = 4 * v79;
        float32x2_t v85 = (_DWORD *)(v78 + v84);
        float32x2_t v86 = (_DWORD *)((char *)v77 + v84);
        do
        {
          *v86++ = 0;
          *v85++ = 0;
          --v83;
        }
        while (v83);
        goto LABEL_71;
      }
      float32x2_t v80 = v1153;
      float32x2_t v81 = *(_OWORD **)v1123;
      uint64_t v82 = v62 & 0xFFFFFFF8;
      do
      {
        *float32x2_t v80 = 0uLL;
        v80[1] = 0uLL;
        v80 += 2;
        *float32x2_t v81 = 0uLL;
        v81[1] = 0uLL;
        v81 += 2;
        v82 -= 8;
      }
      while (v82);
      unint64_t v79 = v62 & 0x7FFFFFF8;
      if ((v62 & 0xFFFFFFF8) != v62) {
        goto LABEL_69;
      }
    }
LABEL_71:
    if (!v62) {
      goto LABEL_218;
    }
    if ((int)v62 < 65)
    {
      if ((int)v62 >= 1)
      {
LABEL_77:
        unint64_t v87 = 0;
        float32x2_t v88 = (float *)v1157[0];
        float32x2_t v89 = v1153;
        uint64_t v90 = (uint64_t)v1153 - 12;
        float32x2_t v91 = *(float **)v1123;
        uint64_t v92 = *(void *)v1123 - 12;
        uint64_t v93 = 0x100000000;
        float32x2_t v94 = *(_DWORD **)v1123;
        float32x2_t v95 = v1153;
        while (1)
        {
          unint64_t v96 = v87;
          uint64_t v97 = 4 * v87;
          float v98 = v88[v87++];
          if (v96) {
            break;
          }
          *float32x2_t v89 = v87;
          float *v91 = v98;
LABEL_79:
          ++v95;
          ++v94;
          ++v93;
          if (v87 == v62) {
            goto LABEL_111;
          }
        }
        if (*v91 <= v98)
        {
          if (v96 < 2 || v91[(v96 - 1)] <= v98)
          {
            v91[(unint64_t)v97 / 4] = v98;
            v89[(unint64_t)v97 / 4] = v87;
          }
          else
          {
            LODWORD(v102) = 1;
            int v103 = v96;
            while ((v103 - v102) >= 2)
            {
              if (v91[(int)v102 - 1 + ((v103 - (int)v102) >> 1)] > v98) {
                int v103 = v102 + ((v103 - (int)v102) >> 1);
              }
              else {
                LODWORD(v102) = v102 + ((v103 - (int)v102) >> 1);
              }
              if ((int)v102 >= v103) {
                goto LABEL_107;
              }
            }
            LODWORD(v102) = v103;
LABEL_107:
            uint64_t v102 = (int)v102;
            if ((uint64_t)v96 >= (int)v102)
            {
              double v112 = v94;
              float v113 = v95;
              int64_t v114 = v87;
              unint64_t v115 = v94;
              double v116 = v95;
              do
              {
                int v117 = *--v115;
                --v114;
                *double v112 = v117;
                int v118 = *--v116;
                *float v113 = v118;
                double v112 = v115;
                float v113 = v116;
              }
              while (v114 > v102);
            }
            uint64_t v119 = (int)v102 - 1;
            v91[v119] = v98;
            v89[v119] = v87;
          }
          goto LABEL_79;
        }
        unint64_t v99 = v87;
        if (v96 > 0x27)
        {
          uint64_t v104 = (v96 - 1);
          uint64_t v105 = 4 * (v96 - 1);
          unint64_t v99 = v87;
          if (&v91[v104 + v105 / 0xFFFFFFFFFFFFFFFCLL] <= &v91[v104])
          {
            uint64_t v106 = v97 & 0x3FFFFFFFCLL;
            unint64_t v99 = v87;
            if ((char *)v91 + (v97 & 0x3FFFFFFFCLL) - v105 <= (char *)v91 + (v97 & 0x3FFFFFFFCLL))
            {
              unint64_t v99 = v87;
              if (&v89[v104 + v105 / 0xFFFFFFFFFFFFFFFCLL] <= &v89[v104])
              {
                unint64_t v99 = v87;
                if ((char *)v89 + v106 - v105 <= (char *)v89 + v106)
                {
                  unint64_t v99 = v87;
                  if (v96)
                  {
                    unint64_t v99 = v87;
                    if (!((v96 - 1) >> 32))
                    {
                      unint64_t v99 = v87;
                      if (((v97 + 0x3FFFFFFFCLL) & 0x3FFFFFFFCuLL) - v106 >= 0x10)
                      {
                        unint64_t v107 = v96 & 0xFFFFFFFFFFFFFFFCLL;
                        uint64_t v108 = v96 & 0x7FFFFFFFFFFFFFFCLL;
                        uint64_t v109 = v93;
                        do
                        {
                          uint64_t v110 = 4 * (v109 - 1);
                          uint64_t v111 = 4 * v109;
                          *(_OWORD *)(v90 + v111) = *(_OWORD *)(v90 + v110);
                          *(_OWORD *)(v92 + v111) = *(_OWORD *)(v92 + v110);
                          v109 -= 4;
                          v107 -= 4;
                        }
                        while (v107);
                        if (v96 == v108) {
                          goto LABEL_84;
                        }
                        unint64_t v99 = v87 - v108;
                      }
                    }
                  }
                }
              }
            }
          }
        }
        do
        {
          uint64_t v100 = (v99 - 2);
          uint64_t v101 = (v99 - 1);
          v89[v101] = v89[v100];
          v91[v101] = v91[v100];
          BOOL v268 = v99-- > 2;
        }
        while (v268);
LABEL_84:
        float *v91 = v98;
        *float32x2_t v89 = v87;
        goto LABEL_79;
      }
LABEL_111:
      if ((int)v62 >= (int)v76) {
        goto LABEL_218;
      }
      double v120 = *(float **)v1123;
      int16x8_t v121 = v1153;
      char v122 = v1062;
      if ((char *)v1153 + v1064 + v1060 > (char *)v1153 + v1064) {
        char v122 = 1;
      }
      unint64_t v123 = *(void *)v1123 + v1064;
      if ((char *)v1153 + v1063 + v1060 > (char *)v1153 + v1063) {
        char v122 = 1;
      }
      unint64_t v124 = *(void *)v1123 + v1063;
      if (*(void *)v1123 + v1064 + v1060 > v123) {
        char v122 = 1;
      }
      if (*(void *)v1123 + v1063 + v1060 > v124) {
        char v122 = 1;
      }
      unint64_t v125 = v124 - v123;
      uint64_t v126 = *(void *)v1123 - 12;
      float32x4_t v127 = (float *)v1157[0];
      if (v1065 < 0x27) {
        char v122 = 1;
      }
      if ((unint64_t)(v1063 - v1064) < 0x10 || v125 < 0x10) {
        char v122 = 1;
      }
      uint64_t v129 = (_DWORD *)((char *)v1153 + v1061);
      uint64_t v130 = (_DWORD *)(*(void *)v1123 + v1061);
      uint64_t v131 = v67;
      while (1)
      {
        float v133 = v127[v131++];
        if (*v120 <= v133)
        {
          if ((int)v62 < 2 || v120[v66] <= v133) {
            goto LABEL_130;
          }
          int v141 = 1;
          int v142 = v62;
          while ((v142 - v141) >= 2)
          {
            if (v120[v141 - 1 + ((v142 - v141) >> 1)] > v133) {
              int v142 = v141 + ((v142 - v141) >> 1);
            }
            else {
              v141 += (v142 - v141) >> 1;
            }
            if (v141 >= v142)
            {
              if ((int)v62 <= v141) {
                goto LABEL_152;
              }
              goto LABEL_150;
            }
          }
          int v141 = v142;
          if ((int)v62 <= v142) {
            goto LABEL_152;
          }
LABEL_150:
          float v143 = v130;
          float v144 = v129;
          uint64_t v145 = v67;
          float v146 = v130;
          float v147 = v129;
          do
          {
            int v148 = *--v146;
            --v145;
            _DWORD *v143 = v148;
            int v149 = *--v147;
            *float v144 = v149;
            float v143 = v146;
            float v144 = v147;
          }
          while (v145 > v141);
LABEL_152:
          uint64_t v150 = v141 - 1;
          v120[v150] = v133;
          uint64_t v132 = &v121[v150];
        }
        else
        {
          if ((int)v62 >= 2)
          {
            unint64_t v134 = v62;
            if (v122) {
              goto LABEL_959;
            }
            unint64_t v135 = v62 + 0xFFFFFFFF;
            uint64_t v136 = v1072;
            do
            {
              uint64_t v137 = (v135 - 1);
              uint64_t v138 = v135;
              *(_OWORD *)&v121[v138 - 3] = *(_OWORD *)&v121[v137 - 3];
              *(_OWORD *)(v126 + v138 * 4) = *(_OWORD *)(v126 + v137 * 4);
              v135 -= 4;
              v136 -= 4;
            }
            while (v136);
            unint64_t v134 = v1069;
            if (v1070 != v1072)
            {
LABEL_959:
              do
              {
                uint64_t v139 = (v134 - 2);
                uint64_t v140 = (v134 - 1);
                v121[v140] = v121[v139];
                v120[v140] = v120[v139];
                BOOL v268 = v134-- > 2;
              }
              while (v268);
            }
          }
          *double v120 = v133;
          uint64_t v132 = v121;
        }
        *uint64_t v132 = v131;
LABEL_130:
        if (v131 == (int)v76) {
          goto LABEL_219;
        }
      }
    }
    if ((int)v62 <= (int)v76 >> 6) {
      goto LABEL_77;
    }
    int v1151 = v76;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)&v1148, v76);
    uint64_t v1066 = v65;
    if ((int)v76 < 1)
    {
      if (!v76) {
        goto LABEL_216;
      }
    }
    else
    {
      bzero(v1148, 4 * v76);
    }
    v1147[0] = v76;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)&v1145, v76);
    v151.i64[0] = 0x100000001;
    v151.i64[1] = 0x100000001;
    v152.i64[0] = 0x800000008;
    v152.i64[1] = 0x800000008;
    if ((int)v76 < 2) {
      goto LABEL_165;
    }
    float v153 = (char *)v1157[0];
    float v154 = v1148;
    if (v76 - 2 < 6 || (uint64_t v155 = (4 * v76) & 0x3FFFFFFF8, v1148 < (char *)v1157[0] + v155) && v1157[0] < &v1148[v155])
    {
      unint64_t v156 = 1;
      goto LABEL_161;
    }
    unint64_t v220 = ((v76 - 2) >> 1) + 1;
    uint64_t v221 = (float *)v1148;
    float32x4_t v222 = (const float *)v1157[0];
    uint64_t v223 = v220 & 0x7FFFFFFFFFFFFFFCLL;
    int32x4_t v224 = (int32x4_t)xmmword_259120B70;
    int32x4_t v225 = (int32x4_t)xmmword_259120B70;
    do
    {
      float32x4x2_t v1158 = vld2q_f32(v222);
      v222 += 8;
      v1158.val[0] = (float32x4_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v1158.val[1]), (int8x16_t)vcgezq_f32(v1158.val[1])), (int8x16_t)vcgeq_f32(v1158.val[1], v1158.val[0]));
      v1159.val[0] = (float32x4_t)vsubq_s32(v224, (int32x4_t)v1158.val[0]);
      v1159.val[1] = (float32x4_t)vaddq_s32(v225, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)v1158.val[0]))), v151));
      vst2q_f32(v221, v1159);
      v221 += 8;
      int32x4_t v225 = vaddq_s32(v225, v152);
      int32x4_t v224 = vaddq_s32(v224, v152);
      v223 -= 4;
    }
    while (v223);
    if (v220 != (v220 & 0x7FFFFFFFFFFFFFFCLL))
    {
      unint64_t v156 = (2 * (v220 & 0x7FFFFFFFFFFFFFFCLL)) | 1;
LABEL_161:
      float v157 = &v154[4 * v156];
      float v158 = (float *)&v153[4 * v156];
      do
      {
        BOOL v159 = *(v158 - 1) > *v158;
        BOOL v160 = v159;
        if (*(v158 - 1) > *v158) {
          BOOL v159 = 1;
        }
        *((_DWORD *)v157 - 1) = v159 + v156;
        *(_DWORD *)float v157 = v156 + !v160;
        v156 += 2;
        v157 += 8;
        v158 += 2;
      }
      while (v156 < v76);
    }
LABEL_165:
    if (v76) {
      *(_DWORD *)&v1148[4 * (int)v76 - 4] = v76;
    }
    if ((int)v76 < 3) {
      goto LABEL_216;
    }
    float v161 = v1148;
    uint64_t v162 = v1145;
    float v163 = v1148 - 4;
    uint64_t v164 = v1145 + 4;
    float v165 = (float *)v1157[0];
    uint64_t v166 = v1145 + 20;
    float v167 = v1148 + 12;
    __vImage_Buffer src = (long long *)(v1145 + 16);
    int v168 = 2;
    while (2)
    {
      int v169 = 2 * v168;
      int v170 = v168 | 1;
      if ((v168 | 1) > (int)v76) {
        goto LABEL_169;
      }
      int v171 = 1;
      while (2)
      {
        if (v171 + v169 >= (int)v76 + 1) {
          int v172 = v76 + 1;
        }
        else {
          int v172 = v171 + v169;
        }
        uint64_t v173 = (v172 - v171);
        if ((int)v173 < 1) {
          goto LABEL_172;
        }
        int v174 = 0;
        uint64_t v175 = (v170 - 1);
        int v176 = v172 - 2;
        LODWORD(v177) = v171;
        do
        {
          int v179 = *(_DWORD *)&v161[4 * (int)v175];
          int v180 = *(_DWORD *)&v161[4 * (int)v177 - 4];
          uint64_t v181 = v174;
          if (v165[v180 - 1] <= v165[v179 - 1])
          {
            *(_DWORD *)(v162 + 4 * v174) = v180;
            LODWORD(v177) = v177 + 1;
            int v182 = v175 + 1;
            if ((int)v175 + 1 >= v172 || v177 != v170) {
              goto LABEL_179;
            }
            uint64_t v183 = (v176 - v175);
            if (v183 >= 0xB && v176 >= (int)v175)
            {
              uint64_t v184 = 4 * v174;
              if ((unint64_t)(v164 + v184 - (void)&v161[4 * (int)v175]) >= 0x20)
              {
                uint64_t v185 = v183 + 1;
                uint64_t v186 = (v183 + 1) & 0x1FFFFFFF8;
                v181 += v186;
                uint64_t v187 = (_OWORD *)(v166 + v184);
                int v188 = v175;
                uint64_t v189 = v186;
                do
                {
                  float v190 = &v161[4 * v188];
                  long long v191 = *((_OWORD *)v190 + 1);
                  *(v187 - 1) = *(_OWORD *)v190;
                  _OWORD *v187 = v191;
                  v187 += 2;
                  v188 += 8;
                  v189 -= 8;
                }
                while (v189);
                uint64_t v175 = (v175 + v186);
                if (v185 == v186)
                {
LABEL_178:
                  int v174 = v181;
                  LODWORD(v177) = v170;
LABEL_179:
                  uint64_t v178 = v175;
                  goto LABEL_180;
                }
                v182 += v186;
              }
            }
            do
            {
              *(_DWORD *)(v164 + 4 * v181++) = *(_DWORD *)&v161[4 * (int)v175];
              LODWORD(v175) = v182++;
            }
            while (v172 != v182);
            uint64_t v175 = (v182 - 1);
            goto LABEL_178;
          }
          *(_DWORD *)(v162 + 4 * v174) = v179;
          uint64_t v178 = (v175 + 1);
          if (v175 + 2 == v172 && (int)v177 < v170)
          {
            unint64_t v177 = (int)v177;
            unint64_t v192 = v170 - (uint64_t)(int)v177;
            if (v192 >= 8)
            {
              uint64_t v193 = 4 * v174;
              if ((unint64_t)(v164 + v193 - (void)&v163[4 * (int)v177]) >= 0x20)
              {
                unint64_t v194 = v192 & 0xFFFFFFFFFFFFFFF8;
                v181 += v192 & 0xFFFFFFFFFFFFFFF8;
                uint64_t v195 = (_OWORD *)(v166 + v193);
                float v196 = &v167[4 * (int)v177];
                unint64_t v197 = v192 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  long long v198 = *(_OWORD *)v196;
                  *(v195 - 1) = *((_OWORD *)v196 - 1);
                  *uint64_t v195 = v198;
                  v195 += 2;
                  v196 += 32;
                  v197 -= 8;
                }
                while (v197);
                if (v192 == v194) {
                  goto LABEL_203;
                }
                unint64_t v177 = v194 + (int)v177;
              }
            }
            unint64_t v199 = v170 - v177;
            float v200 = &v163[4 * v177];
            uint64_t v201 = v181;
            do
            {
              LODWORD(v181) = v201 + 1;
              int v202 = *(_DWORD *)v200;
              v200 += 4;
              *(_DWORD *)(v164 + 4 * v201++) = v202;
              --v199;
            }
            while (v199);
LABEL_203:
            int v174 = v181;
            LODWORD(v177) = v170;
          }
LABEL_180:
          ++v174;
          uint64_t v175 = v178;
        }
        while (v174 < (int)v173);
        if (v173 <= 0xF
          || (int v203 = v171 - 1, v172 - 2 < v171 - 1)
          || (unint64_t)&v161[4 * v203 - v162] < 0x20)
        {
          uint64_t v204 = 0;
          goto LABEL_208;
        }
        uint64_t v204 = v173 & 0x7FFFFFF8;
        float v209 = __src;
        uint64_t v210 = v173 & 0xFFFFFFF8;
        do
        {
          long long v211 = *v209;
          float v212 = &v161[4 * v203];
          *(_OWORD *)float v212 = *(v209 - 1);
          *((_OWORD *)v212 + 1) = v211;
          v209 += 2;
          v203 += 8;
          v210 -= 8;
        }
        while (v210);
        if (v204 != v173)
        {
LABEL_208:
          uint64_t v205 = v204 - v173;
          int v206 = v171 + v204 - 1;
          unint64_t v207 = (int *)(v162 + 4 * v204);
          do
          {
            int v208 = *v207++;
            *(_DWORD *)&v161[4 * v206++] = v208;
            _CF = __CFADD__(v205++, 1);
          }
          while (!_CF);
        }
LABEL_172:
        int v170 = v172 + v168;
        int v171 = v172;
        if (v172 + v168 <= (int)v76) {
          continue;
        }
        break;
      }
LABEL_169:
      v168 *= 2;
      if (v169 < (int)v76) {
        continue;
      }
      break;
    }
LABEL_216:
    *(_DWORD *)&v1123[24] = v62;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1123, v62);
    uint64_t v66 = (v62 - 1);
    uint64_t v61 = v1055;
    uint64_t v65 = v1066;
    uint64_t v67 = (int)v62;
    uint64_t v213 = 0;
    uint64_t v64 = v1148;
    float v214 = v1157[0];
    uint64_t v215 = *(void *)v1123;
    do
    {
      *(_DWORD *)(v215 + 4 * v213) = v214[*(int *)&v64[4 * v213] - 1];
      ++v213;
    }
    while (v62 != v213);
LABEL_218:
    float v63 = v1073;
LABEL_219:
    uint64_t v216 = *(unsigned int *)&v1123[24];
    if (*(int *)&v1123[24] >= 1)
    {
      unint64_t v217 = *(int **)v1123;
      float v218 = v63;
      do
      {
        int v219 = *v217++;
        *float v218 = v219;
        v218 += 9072;
        --v216;
      }
      while (v216);
    }
    ++v65;
    ++v1076;
    ++v63;
    if (v65 != 9072) {
      continue;
    }
    break;
  }
  if (v1146 && (void)v1145) {
    MEMORY[0x25A2D62A0](v1145, 0x1000C8052888210);
  }
  if (v1150 && v64) {
    MEMORY[0x25A2D62A0](v64, 0x1000C8052888210);
  }
  if (v1155 && v1153) {
    MEMORY[0x25A2D62A0](v1153, 0x1000C8052888210);
  }
  if (v1123[16] && *(void *)v1123) {
    MEMORY[0x25A2D62A0](*(void *)v1123, 0x1000C8052888210);
  }
  if (LOBYTE(v1157[2]) && v1157[0]) {
    MEMORY[0x25A2D62A0](v1157[0], 0x1000C8052888210);
  }
  int v226 = v1101;
  if (v1101)
  {
    int v227 = v1101 & 0x3FF;
    if ((v1101 & 0x3FF) != 0)
    {
      int v228 = (v1101 >> 10) + 1;
    }
    else
    {
      int v227 = 1024;
      int v228 = v1101 >> 10;
    }
    if (v1101 >= 1025) {
      int v229 = 1024;
    }
    else {
      int v229 = v1101;
    }
    if (v1101 < 1025) {
      int v227 = 0;
    }
    int v1077 = v227;
    if (v1101 >= 1025) {
      int v230 = v228;
    }
    else {
      int v230 = 1;
    }
    int __srca = v230;
    if ((unint64_t)((char *)spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b
                          - (char *)v1053) >= 0x20)
    {
      unint64_t v235 = 0x3FFFFFFFFFFFDC90uLL;
      do
      {
        long long v236 = *(_OWORD *)&v1053[v235 + 9076];
        float v237 = &spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v235];
        *((_OWORD *)v237 + 2268) = *(_OWORD *)&v1053[v235 + 9072];
        *((_OWORD *)v237 + 2269) = v236;
        v235 += 8;
      }
      while (v235 * 4);
    }
    else
    {
      float v231 = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b;
      uint64_t v232 = 9072;
      float v233 = v1053;
      do
      {
        int v234 = *v233++;
        *(_DWORD *)v231++ = v234;
        --v232;
      }
      while (v232);
    }
    if (v229 >= 2)
    {
      uint64_t v716 = (v229 + 1);
      uint64_t v717 = 2;
      do
      {
        uint64_t v718 = 0x237000000000 * v717 - 0x237000000000;
        uint64_t v719 = v718 >> 32;
        uint64_t v720 = v718 >> 30;
        v721 = (float *)&v1053[v719];
        if ((char *)v1053 + v720 + 36288 <= (char *)spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b
          || (char *)v1053 + v720 >= &isInitialized_spot_finder_peridot)
        {
          unint64_t v723 = 0x3FFFFFFFFFFFDC90uLL;
          do
          {
            v724 = &spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v723];
            float32x4_t v725 = vaddq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v723 + 9076], *(float32x4_t *)&v721[v723 + 9076]);
            *((float32x4_t *)v724 + 2268) = vaddq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v723 + 9072], *(float32x4_t *)&v721[v723 + 9072]);
            *((float32x4_t *)v724 + 2269) = v725;
            v723 += 8;
          }
          while (v723 * 4);
        }
        else
        {
          v726 = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b;
          uint64_t v727 = 9072;
          do
          {
            float v728 = *v721++;
            float *v726 = *v726 + v728;
            ++v726;
            --v727;
          }
          while (v727);
        }
        ++v717;
      }
      while (v717 != v716);
    }
    if (__srca >= 2)
    {
      uint64_t v238 = 0;
      int v239 = 2;
      int v240 = 9298800;
      do
      {
        memcpy(v1157, (char *)v1053 + ((0x8DC00000000000 * v238 + 0x8DC00000000000) >> 30), 0x8DC0uLL);
        int v241 = v1077;
        if (v239 != __srca) {
          int v241 = 1024;
        }
        if (v241 > 1)
        {
          uint64_t v242 = (v241 + 1);
          int v243 = v240;
          uint64_t v244 = 2;
          do
          {
            float v245 = &v1053[v243];
            uint64_t v246 = -36288;
            do
            {
              char v247 = &v1157[(unint64_t)v246 / 8];
              float32x4_t v248 = vaddq_f32(*(float32x4_t *)&v1157[(unint64_t)v246 / 8 + 4538], *(float32x4_t *)&v245[(unint64_t)v246 / 4 + 9076]);
              *((float32x4_t *)v247 + 2268) = vaddq_f32(*(float32x4_t *)&v1157[(unint64_t)v246 / 8 + 4536], *(float32x4_t *)&v245[(unint64_t)v246 / 4 + 9072]);
              *((float32x4_t *)v247 + 2269) = v248;
              v246 += 32;
            }
            while (v246);
            ++v244;
            v243 += 9072;
          }
          while (v244 != v242);
        }
        unint64_t v249 = 0xFFFFFFFFFFFF7240;
        do
        {
          unint64_t v250 = &spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v249 / 4];
          float32x4_t v251 = vaddq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v249 / 4 + 9076], *(float32x4_t *)&v1157[v249 / 8 + 4538]);
          *((float32x4_t *)v250 + 2268) = vaddq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v249 / 4 + 9072], *(float32x4_t *)&v1157[v249 / 8 + 4536]);
          *((float32x4_t *)v250 + 2269) = v251;
          v249 += 32;
        }
        while (v249);
        ++v239;
        ++v238;
        v240 += 9289728;
      }
      while (v238 != __srca - 1);
    }
  }
  else
  {
    bzero(spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b, 0x8DC0uLL);
  }
  float v252 = 1.0 / (float)v226;
  unint64_t v253 = 0x3FFFFFFFFFFFDC90uLL;
  do
  {
    float v254 = &spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v253];
    float32x4_t v255 = vmulq_n_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v253 + 9076], v252);
    *((float32x4_t *)v254 + 2268) = vmulq_n_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v253 + 9072], v252);
    *((float32x4_t *)v254 + 2269) = v255;
    v253 += 8;
  }
  while (v253 * 4);
  uint64_t v1100 = 0x6C00000054;
  int v1101 = v1055;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1098, 9072 * v1055);
  LODWORD(v16) = v1074;
  int v14 = v1054;
  if ((int)v1055 > 0)
  {
    uint64_t v256 = 0;
    float v257 = (char *)v1098[0];
    float v258 = (char *)v1098[0];
    do
    {
      uint64_t v259 = 0;
      uint64_t v260 = 9072 * v256;
      uint64_t v261 = (9072 * v256) & 0xFFFFFFF0;
      if (v1055 == 1) {
        uint64_t v261 = 0;
      }
      uint64_t v262 = v72 + 4 * v261;
      float v263 = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b;
      float v264 = v258;
      do
      {
        uint64_t v265 = (uint64_t)&v257[36288 * v256 + 336 * v259];
        unint64_t v266 = v265 - (v72 + 4 * v261 + 336 * v259);
        unint64_t v267 = v265
             - (void)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[84 * v259];
        BOOL v268 = v266 >= 0x20 && v267 > 0x1F;
        if (v268)
        {
          float v270 = (float32x4_t *)(v72 + 4 * (84 * v259 + v261));
          float32x4_t v271 = *v270;
          float32x4_t v272 = v270[1];
          float v273 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[84 * v259];
          float32x4_t v274 = vsubq_f32(v271, *v273);
          float32x4_t v275 = vsubq_f32(v272, v273[1]);
          float v276 = (float32x4_t *)&v257[336 * v259 + 4 * v260];
          float32x4_t *v276 = v274;
          v276[1] = v275;
          uint64_t v277 = 84 * v259 + 8;
          float v278 = (float32x4_t *)(v72 + 4 * (v277 + v261));
          float32x4_t v279 = *v278;
          float32x4_t v280 = v278[1];
          float v281 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v277];
          float32x4_t v282 = vsubq_f32(v280, v281[1]);
          int8x16x2_t v283 = (float32x4_t *)&v257[4 * v277 + 4 * v260];
          float32x4_t *v283 = vsubq_f32(v279, *v281);
          v283[1] = v282;
          uint64_t v284 = 84 * v259 + 16;
          float v285 = (float32x4_t *)(v72 + 4 * (v284 + v261));
          float32x4_t v286 = *v285;
          float32x4_t v287 = v285[1];
          float v288 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v284];
          float32x4_t v289 = vsubq_f32(v287, v288[1]);
          float v290 = (float32x4_t *)&v257[4 * v284 + 4 * v260];
          float32x4_t *v290 = vsubq_f32(v286, *v288);
          v290[1] = v289;
          uint64_t v291 = 84 * v259 + 24;
          int8x8_t v292 = (float32x4_t *)(v72 + 4 * (v291 + v261));
          float32x4_t v293 = *v292;
          float32x4_t v294 = v292[1];
          int8x8_t v295 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v291];
          float32x4_t v296 = vsubq_f32(v294, v295[1]);
          float v297 = (float32x4_t *)&v257[4 * v291 + 4 * v260];
          *float v297 = vsubq_f32(v293, *v295);
          v297[1] = v296;
          uint64_t v298 = 84 * v259 + 32;
          float v299 = (float32x4_t *)(v72 + 4 * (v298 + v261));
          float32x4_t v300 = *v299;
          float32x4_t v301 = v299[1];
          float v302 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v298];
          float32x4_t v303 = vsubq_f32(v301, v302[1]);
          int32x4_t v304 = (float32x4_t *)&v257[4 * v298 + 4 * v260];
          float32x4_t *v304 = vsubq_f32(v300, *v302);
          v304[1] = v303;
          uint64_t v305 = 84 * v259 + 40;
          float v306 = (float32x4_t *)(v72 + 4 * (v305 + v261));
          float32x4_t v307 = *v306;
          float32x4_t v308 = v306[1];
          float v309 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v305];
          float32x4_t v310 = vsubq_f32(v308, v309[1]);
          float v311 = (float32x4_t *)&v257[4 * v305 + 4 * v260];
          *float v311 = vsubq_f32(v307, *v309);
          v311[1] = v310;
          uint64_t v312 = 84 * v259 + 48;
          int8x16_t v313 = (float32x4_t *)(v72 + 4 * (v312 + v261));
          float32x4_t v314 = *v313;
          float32x4_t v315 = v313[1];
          int16x8_t v316 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v312];
          float32x4_t v317 = vsubq_f32(v315, v316[1]);
          float v318 = (float32x4_t *)&v257[4 * v312 + 4 * v260];
          *float v318 = vsubq_f32(v314, *v316);
          v318[1] = v317;
          uint64_t v319 = 84 * v259 + 56;
          float v320 = (float32x4_t *)(v72 + 4 * (v319 + v261));
          float32x4_t v321 = *v320;
          float32x4_t v322 = v320[1];
          float v323 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v319];
          float32x4_t v324 = vsubq_f32(v322, v323[1]);
          float64x2_t v325 = (float32x4_t *)&v257[4 * v319 + 4 * v260];
          *float64x2_t v325 = vsubq_f32(v321, *v323);
          v325[1] = v324;
          uint64_t v326 = 84 * v259 + 64;
          float v327 = (float32x4_t *)(v72 + 4 * (v326 + v261));
          float32x4_t v328 = *v327;
          float32x4_t v329 = v327[1];
          float v330 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v326];
          float32x4_t v331 = vsubq_f32(v329, v330[1]);
          int8x8_t v332 = (float32x4_t *)&v257[4 * v326 + 4 * v260];
          *int8x8_t v332 = vsubq_f32(v328, *v330);
          v332[1] = v331;
          uint64_t v333 = 84 * v259 + 72;
          uint64_t v334 = (float32x4_t *)(v72 + 4 * (v333 + v261));
          float32x4_t v335 = *v334;
          float32x4_t v336 = v334[1];
          uint64_t v337 = (float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v333];
          float32x4_t v338 = vsubq_f32(v336, v337[1]);
          uint64_t v339 = (float32x4_t *)&v257[4 * v333 + 4 * v260];
          *uint64_t v339 = vsubq_f32(v335, *v337);
          v339[1] = v338;
          uint64_t v269 = 80;
        }
        else
        {
          uint64_t v269 = 0;
        }
        do
        {
          *(float *)&v264[4 * v269] = *(float *)(v262 + 4 * v269) - v263[v269];
          ++v269;
        }
        while (v269 != 84);
        ++v259;
        v264 += 336;
        v263 += 84;
        v262 += 336;
      }
      while (v259 != 108);
      ++v256;
      v258 += 36288;
    }
    while (v256 != v1055);
  }
  int v340 = v1101;
  uint64_t v1104 = 0x6C00000054;
  int v1105 = v1101;
  int v341 = 9072 * v1101;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1102, 9072 * v1101);
  if (v340 >= 1)
  {
    uint64_t v342 = 0;
    uint64_t v343 = (char *)v1098[0];
    uint64_t v344 = v1102[0];
    uint64_t v345 = v341 <= 1 ? 1 : v341;
    if (v345 < 8) {
      goto LABEL_299;
    }
    if (v1102[0] - (unint64_t)v1098[0] < 0x20) {
      goto LABEL_299;
    }
    uint64_t v342 = v345 & 0x7FFFFFF0;
    uint64_t v346 = (float32x4_t *)(v1102[0] + 16);
    uint64_t v347 = (float32x4_t *)((char *)v1098[0] + 16);
    uint64_t v348 = v342;
    do
    {
      float32x4_t v349 = vmaxnmq_f32(*v347, (float32x4_t)0);
      v346[-1] = vmaxnmq_f32(v347[-1], (float32x4_t)0);
      *uint64_t v346 = v349;
      v346 += 2;
      v347 += 2;
      v348 -= 8;
    }
    while (v348);
    if (v342 != v345)
    {
LABEL_299:
      uint64_t v350 = v345 - v342;
      uint64_t v351 = 4 * v342;
      uint64_t v352 = (float *)(v344 + v351);
      uint64_t v353 = (float *)&v343[v351];
      do
      {
        float v354 = *v353++;
        *v352++ = fmaxf(v354, 0.0);
        --v350;
      }
      while (v350);
    }
  }
LABEL_301:
  if (v14 > 199) {
    goto LABEL_302;
  }
  for (uint64_t j = 0; j != 180; ++j)
  {
    LODWORD(v1079) = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv1[j];
    float __srcf = expf(COERCE_FLOAT(HIDWORD(spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv1[j])));
    *(float *)&uint64_t v361 = expf(v1079);
    *((float *)&v361 + 1) = __srcf;
    *(void *)&v1139[j * 8] = v361;
  }
  float v357 = expf(-950.98);
  char v359 = 0;
  float v358 = 2.0;
LABEL_308:
  float v1140 = v357;
  int v362 = *(_DWORD *)(v1071 + 4);
  LODWORD(v1122) = 1;
  HIDWORD(v1122) = v362;
  if (SHIDWORD(v1119) < v362)
  {
    if (SHIDWORD(v1119) <= 16) {
      int v363 = 16;
    }
    else {
      int v363 = HIDWORD(v1119);
    }
    while (v363 < v362)
    {
      if (v363 <= 0x3FFFFFFF) {
        v363 *= 2;
      }
      else {
        int v363 = 0x7FFFFFFF;
      }
    }
    coder::detail::data_ptr<cell_wrap_0,int>::reserve((uint64_t)&v1118, v363);
  }
  coder::detail::data_ptr<cell_wrap_0,int>::reserve((uint64_t)&v1118, v362);
  LODWORD(v1119) = v362;
  int v364 = *(_DWORD *)(v1071 + 4);
  LODWORD(v1117) = 1;
  HIDWORD(v1117) = v364;
  if (SHIDWORD(v1115) < v364)
  {
    if (SHIDWORD(v1115) <= 16) {
      int v365 = 16;
    }
    else {
      int v365 = HIDWORD(v1115);
    }
    while (v365 < v364)
    {
      if (v365 <= 0x3FFFFFFF) {
        v365 *= 2;
      }
      else {
        int v365 = 0x7FFFFFFF;
      }
    }
    coder::detail::data_ptr<cell_wrap_1,int>::reserve((uint64_t)&v1114, v365);
  }
  coder::detail::data_ptr<cell_wrap_1,int>::reserve((uint64_t)&v1114, v364);
  char __srcb = v359;
  LODWORD(v1115) = v364;
  if ((int)v16 >= 1)
  {
    uint64_t v367 = v1102[0];
    uint64_t v368 = v1118;
    uint64_t v369 = 1;
    do
    {
      uint64_t v370 = (int)v369 - 1;
      memmove(spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b, (const void *)(v367 + 36288 * (int)v370), 0x8DC0uLL);
      findSpotsPeaksDan((uint64_t)v1139, (uint64_t)v1092, v368 + 32 * v370, v358);
      uint64_t v371 = v1114;
      uint64_t v372 = v1114 + 32 * (int)v1117 * (uint64_t)(int)v370;
      int v373 = v1094;
      *(_DWORD *)(v372 + 24) = v1094;
      *(_DWORD *)(v372 + 28) = 2;
      int v374 = 2 * v373;
      coder::array_base<float,int,2>::ensureCapacity(v372, 2 * v373);
      v366.i64[0] = 0xBF000000BF000000;
      v366.i64[1] = 0xBF000000BF000000;
      if (v373 >= 1)
      {
        uint64_t v375 = 0;
        uint64_t v376 = v1092[0];
        unsigned int v377 = *(float32x4_t **)(v371 + 32 * v370);
        uint64_t v378 = v374 <= 1 ? 1 : v374;
        if (v378 < 8) {
          goto LABEL_340;
        }
        if ((unint64_t)v377 - v1092[0] < 0x20) {
          goto LABEL_340;
        }
        uint64_t v375 = v378 & 0x7FFFFFF8;
        float v379 = v377 + 1;
        unint64_t v380 = (float32x4_t *)(v1092[0] + 16);
        uint64_t v381 = v375;
        do
        {
          float32x4_t v382 = vaddq_f32(*v380, v366);
          v379[-1] = vaddq_f32(v380[-1], v366);
          *float v379 = v382;
          v379 += 2;
          v380 += 2;
          v381 -= 8;
        }
        while (v381);
        if (v375 != v378)
        {
LABEL_340:
          uint64_t v383 = v378 - v375;
          uint64_t v384 = 4 * v375;
          int32x4_t v385 = &v377->f32[v375];
          float32x4_t v386 = (float *)(v376 + v384);
          do
          {
            float v387 = *v386++;
            *v385++ = v387 + -0.5;
            --v383;
          }
          while (v383);
        }
      }
      _ZF = v369++ == v1074;
    }
    while (!_ZF);
  }
  uint64_t v388 = 0;
  long long v1141 = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv2;
  long long v1142 = unk_259136550;
  long long v1143 = xmmword_259136560;
  v389.i32[1] = unk_259136784;
  *(_OWORD *)((char *)v1144 + 8) = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv3;
  uint64_t v390 = 1568;
  *(void *)&v1144[0] = 0x42922508420B62C1;
  *(_OWORD *)((char *)&v1144[1] + 8) = unk_259136780;
  int8x8_t v391 = (int8x8_t)0x421450EF421455ACLL;
  *(_OWORD *)((char *)&v1144[2] + 8) = xmmword_259136790;
  *((void *)&v1144[3] + 1) = 0x424CB5AE424CA9E1;
  do
  {
    v391.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv[v388];
    int8x8_t v392 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v391)).u64[0];
    *(float *)v392.i32 = (float)v392.i32[0];
    int8x8_t v393 = (char *)&v1141 + 4 * v388;
    *((_DWORD *)v393 + 28) = v392.i32[0];
    v392.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv1[v388];
    int8x8_t v394 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v392)).u64[0];
    *(float *)v394.i32 = (float)v394.i32[0];
    *((_DWORD *)v393 + 42) = v394.i32[0];
    v394.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv2[v388];
    int8x8_t v395 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v394)).u64[0];
    *(float *)v395.i32 = (float)v395.i32[0];
    *((_DWORD *)v393 + 56) = v395.i32[0];
    v366.i32[0] = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv5
                  + v388);
    *((_DWORD *)v393 + 70) = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv4
                             + v388);
    *((_DWORD *)v393 + 84) = v366.i32[0];
    v389.i32[0] = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv6
                  + v388);
    v366.i32[0] = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv7
                  + v388);
    *((_DWORD *)v393 + 98) = v389.i32[0];
    *((_DWORD *)v393 + 112) = v366.i32[0];
    v389.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv3[v388];
    int8x8_t v396 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v389)).u64[0];
    *(float *)v396.i32 = (float)v396.i32[0];
    *((_DWORD *)v393 + 126) = v396.i32[0];
    v396.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv4[v388];
    int8x8_t v397 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v396)).u64[0];
    *(float *)v397.i32 = (float)v397.i32[0];
    *((_DWORD *)v393 + 140) = v397.i32[0];
    v397.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv5[v388];
    int8x8_t v389 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v397)).u64[0];
    *(float *)v389.i32 = (float)v389.i32[0];
    *((_DWORD *)v393 + 154) = v389.i32[0];
    int v398 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv9
           + v388);
    *((_DWORD *)v393 + 168) = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv8
                              + v388);
    *((_DWORD *)v393 + 182) = v398;
    v366.i32[0] = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv10
                  + v388);
    int v399 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv11
           + v388);
    *((_DWORD *)v393 + 196) = v366.i32[0];
    *((_DWORD *)v393 + 210) = v399;
    v366.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv6[v388];
    int8x8_t v400 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)v366.f32)).u64[0];
    *(float *)v400.i32 = (float)v400.i32[0];
    *((_DWORD *)v393 + 224) = v400.i32[0];
    v400.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv7[v388];
    int8x8_t v401 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v400)).u64[0];
    *((float *)v393 + 238) = (float)v401.i32[0];
    *((_DWORD *)v393 + 252) = v395.i32[0];
    *((_DWORD *)v393 + 266) = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv12
                              + v388);
    *((_DWORD *)v393 + 280) = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv13
                              + v388);
    *((_DWORD *)v393 + 294) = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv14
                              + v388);
    v401.i32[0] = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv15
                  + v388);
    *((_DWORD *)v393 + 308) = v401.i32[0];
    v401.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv8[v388];
    int8x8_t v402 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v401)).u64[0];
    *(float *)v402.i32 = (float)v402.i32[0];
    *((_DWORD *)v393 + 322) = v402.i32[0];
    v402.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv9[v388];
    int8x8_t v403 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v402)).u64[0];
    *(float *)v403.i32 = (float)v403.i32[0];
    int v404 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv16
           + v388);
    int v405 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv17
           + v388);
    int v406 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv18
           + v388);
    int v407 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv19
           + v388);
    int v408 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv20
           + v388);
    int v409 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv21
           + v388);
    int v410 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv22
           + v388);
    int v411 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv23
           + v388);
    int v412 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv25
           + v388);
    int v413 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv26
           + v388);
    int v414 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv27
           + v388);
    int v415 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv28
           + v388);
    int v416 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv29
           + v388);
    int v417 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv30
           + v388);
    int v418 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv31
           + v388);
    int v419 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv32
           + v388);
    int v420 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv33
           + v388);
    int v421 = *((_DWORD *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::fv34
           + v388);
    float64x2_t v422 = (char *)&v1141 + v390;
    *((_DWORD *)v422 - 56) = v403.i32[0];
    *((_DWORD *)v422 - 28) = v404;
    *((_DWORD *)v422 - 14) = v405;
    *(_DWORD *)float64x2_t v422 = v406;
    *((_DWORD *)v422 + 14) = v407;
    v403.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv10[v388];
    int8x8_t v423 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v403)).u64[0];
    *(float *)v423.i32 = (float)v423.i32[0];
    *((_DWORD *)v422 + 28) = v423.i32[0];
    v423.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv11[v388];
    int8x8_t v424 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v423)).u64[0];
    *(float *)v424.i32 = (float)v424.i32[0];
    *((_DWORD *)v422 + 42) = v424.i32[0];
    *((_DWORD *)v422 + 70) = v408;
    *((_DWORD *)v422 + 84) = v409;
    *((_DWORD *)v422 + 98) = v410;
    *((_DWORD *)v422 + 112) = v411;
    v424.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv12[v388];
    int8x8_t v425 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v424)).u64[0];
    *(float *)v425.i32 = (float)v425.i32[0];
    *((_DWORD *)v422 + 126) = v425.i32[0];
    v425.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv13[v388];
    int8x8_t v426 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v425)).u64[0];
    *(float *)v426.i32 = (float)v426.i32[0];
    *((_DWORD *)v422 + 140) = v426.i32[0];
    *((_DWORD *)v422 + 168) = v412;
    *((_DWORD *)v422 + 182) = v413;
    *((_DWORD *)v422 + 196) = v414;
    *((_DWORD *)v422 + 210) = v415;
    v426.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv14[v388];
    int8x8_t v427 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v426)).u64[0];
    *(float *)v427.i32 = (float)v427.i32[0];
    *((_DWORD *)v422 + 224) = v427.i32[0];
    v427.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv15[v388];
    v366.i64[0] = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v427)).u64[0];
    *((float *)v422 + 238) = (float)v366.i32[0];
    *((_DWORD *)v422 + 56) = v395.i32[0];
    *((_DWORD *)v422 + 252) = v395.i32[0];
    *((_DWORD *)v422 + 266) = v416;
    *((_DWORD *)v422 + 280) = v417;
    *((_DWORD *)v422 + 294) = v418;
    *((_DWORD *)v422 + 308) = v419;
    v395.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv16[v388];
    int8x8_t v428 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v395)).u64[0];
    *(float *)v428.i32 = (float)v428.i32[0];
    *((_DWORD *)v422 + 322) = v428.i32[0];
    v428.i8[0] = spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::iv17[v388];
    int8x8_t v391 = (int8x8_t)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v428)).u64[0];
    *(float *)v391.i32 = (float)v391.i32[0];
    *((_DWORD *)v422 + 336) = v391.i32[0];
    *((_DWORD *)v422 - 42) = v389.i32[0];
    *((_DWORD *)v422 + 154) = v389.i32[0];
    *((_DWORD *)v422 + 350) = v389.i32[0];
    *((_DWORD *)v422 + 364) = v420;
    *((_DWORD *)v422 + 378) = v421;
    ++v388;
    v390 += 4;
  }
  while (v388 != 14);
  if ((__srcb & 1) == 0)
  {
    long long v1141 = *(_OWORD *)((char *)&v1144[14] + 8);
    long long v1142 = *(_OWORD *)((char *)&v1144[15] + 8);
    v1144[1] = *(_OWORD *)((char *)&v1144[18] + 8);
    v1144[2] = *(_OWORD *)((char *)&v1144[19] + 8);
    long long v1143 = *(_OWORD *)((char *)&v1144[16] + 8);
    v1144[0] = *(_OWORD *)((char *)&v1144[17] + 8);
    v1144[3] = *(_OWORD *)((char *)&v1144[20] + 8);
    *(_OWORD *)((char *)&v1144[21] + 8) = v1144[39];
    *(_OWORD *)((char *)&v1144[22] + 8) = v1144[40];
    *(_OWORD *)((char *)&v1144[25] + 8) = v1144[43];
    *(_OWORD *)((char *)&v1144[26] + 8) = v1144[44];
    *(_OWORD *)((char *)&v1144[23] + 8) = v1144[41];
    *(_OWORD *)((char *)&v1144[24] + 8) = v1144[42];
    *(_OWORD *)((char *)&v1144[27] + 8) = v1144[45];
    v1144[46] = *(_OWORD *)((char *)&v1144[63] + 8);
    v1144[47] = *(_OWORD *)((char *)&v1144[64] + 8);
    v1144[50] = *(_OWORD *)((char *)&v1144[67] + 8);
    v1144[51] = *(_OWORD *)((char *)&v1144[68] + 8);
    v1144[48] = *(_OWORD *)((char *)&v1144[65] + 8);
    v1144[49] = *(_OWORD *)((char *)&v1144[66] + 8);
    v1144[52] = *(_OWORD *)((char *)&v1144[69] + 8);
    *(_OWORD *)((char *)&v1144[70] + 8) = v1144[88];
    *(_OWORD *)((char *)&v1144[71] + 8) = v1144[89];
    *(_OWORD *)((char *)&v1144[74] + 8) = v1144[92];
    *(_OWORD *)((char *)&v1144[75] + 8) = v1144[93];
    *(_OWORD *)((char *)&v1144[72] + 8) = v1144[90];
    *(_OWORD *)((char *)&v1144[73] + 8) = v1144[91];
    *(_OWORD *)((char *)&v1144[76] + 8) = v1144[94];
    v1144[95] = *(_OWORD *)((char *)&v1144[112] + 8);
    v1144[99] = *(_OWORD *)((char *)&v1144[116] + 8);
    v1144[96] = *(_OWORD *)((char *)&v1144[113] + 8);
    v1144[100] = *(_OWORD *)((char *)&v1144[117] + 8);
    v1144[97] = *(_OWORD *)((char *)&v1144[114] + 8);
    v1144[98] = *(_OWORD *)((char *)&v1144[115] + 8);
    v1144[101] = *(_OWORD *)((char *)&v1144[118] + 8);
    *(_OWORD *)((char *)&v1144[119] + 8) = v1144[137];
    *(_OWORD *)((char *)&v1144[120] + 8) = v1144[138];
    *(_OWORD *)((char *)&v1144[123] + 8) = v1144[141];
    *(_OWORD *)((char *)&v1144[124] + 8) = v1144[142];
    *(_OWORD *)((char *)&v1144[121] + 8) = v1144[139];
    *(_OWORD *)((char *)&v1144[122] + 8) = v1144[140];
    *(_OWORD *)((char *)&v1144[125] + 8) = v1144[143];
    v1144[144] = *(_OWORD *)((char *)&v1144[161] + 8);
    v1144[148] = *(_OWORD *)((char *)&v1144[165] + 8);
    v1144[145] = *(_OWORD *)((char *)&v1144[162] + 8);
    v1144[149] = *(_OWORD *)((char *)&v1144[166] + 8);
    v1144[146] = *(_OWORD *)((char *)&v1144[163] + 8);
    v1144[147] = *(_OWORD *)((char *)&v1144[164] + 8);
    v1144[150] = *(_OWORD *)((char *)&v1144[167] + 8);
    *(_OWORD *)((char *)&v1144[168] + 8) = v1144[186];
    *(_OWORD *)((char *)&v1144[169] + 8) = v1144[187];
    *(_OWORD *)((char *)&v1144[172] + 8) = v1144[190];
    *(_OWORD *)((char *)&v1144[173] + 8) = v1144[191];
    *(_OWORD *)((char *)&v1144[170] + 8) = v1144[188];
    *(_OWORD *)((char *)&v1144[171] + 8) = v1144[189];
    *(_OWORD *)((char *)&v1144[174] + 8) = v1144[192];
  }
  uint64_t v429 = v1058;
  int8x8_t v430 = v1059;
  ((void (*)(uint64_t *, long long *, uint64_t *, int *, uint64_t, uint64_t, uint64_t, float *, char *, void *, uint64_t, float32x2_t *, uint64_t))runHomography)(&v1114, &v1141, &v1118, v1059, v1071, v1058, v1057, &v1127, &v1136, v1089, v1056, &v1124, v1067 + 72);
  uint64_t v432 = v1074;
  unsigned int v433 = 0;
  int v434 = 0;
  do
  {
    float v435 = *(&v1127 + v433);
    if (v435 == 0.0) {
      int v436 = v434;
    }
    else {
      int v436 = 1;
    }
    int v434 = v436;
    if (v435 < 0.0) {
      break;
    }
    if (v435 > 0.0) {
      break;
    }
    v433 += v435 == 0.0;
  }
  while (v433 < 3);
  int v437 = 0;
  v1088[0] = v436;
  for (unsigned int k = 3; k < 6; k += v439 == 0.0)
  {
    float v439 = *(&v1127 + k);
    if (v439 == 0.0) {
      int v440 = v437;
    }
    else {
      int v440 = 1;
    }
    int v437 = v440;
    if (v439 < 0.0) {
      break;
    }
    if (v439 > 0.0) {
      break;
    }
  }
  int v441 = 0;
  v1088[1] = v440;
  for (unsigned int m = 6; m < 9; m += v443 == 0.0)
  {
    float v443 = *(&v1127 + m);
    if (v443 == 0.0) {
      int v444 = v441;
    }
    else {
      int v444 = 1;
    }
    int v441 = v444;
    if (v443 < 0.0) {
      break;
    }
    if (v443 > 0.0) {
      break;
    }
  }
  unsigned int v445 = 0;
  v1088[2] = v444;
  char v446 = 1;
  do
  {
    int v447 = v1088[v445];
    if (v1088[v445]) {
      ++v445;
    }
    if (v447)
    {
      BOOL v448 = v445 >= 3;
    }
    else
    {
      char v446 = 0;
      BOOL v448 = 1;
    }
  }
  while (!v448);
  if (!v446)
  {
    float v1126 = 0.0;
    memset(v1125, 0, sizeof(v1125));
    float v532 = 0.0;
    goto LABEL_489;
  }
  float v449 = (float)((float)(v1128 * 0.0) + (float)(v1127 * 1.0939)) + (float)(v1129 * -0.46309);
  float v450 = (float)((float)(v1131 * 0.0) + (float)(v1130 * 1.0939)) + (float)(v1132 * -0.46309);
  float v451 = v1135;
  float v452 = (float)((float)(v1127 * 0.0) + (float)(v1128 * 1.0939)) + (float)(v1129 * -0.59541);
  float v453 = (float)((float)(v1130 * 0.0) + (float)(v1131 * 1.0939)) + (float)(v1132 * -0.59541);
  float v454 = (float)((float)(v1128 * 0.0) + (float)(v1127 * 0.0)) + v1129;
  float v455 = (float)((float)(v1131 * 0.0) + (float)(v1130 * 0.0)) + v1132;
  float v456 = fabsf(v449);
  float v457 = fmaxf(v456, 1.2925e-26);
  if (v456 <= 1.2925e-26) {
    float v458 = (float)(v456 * 7.7371e25) * (float)(v456 * 7.7371e25);
  }
  else {
    float v458 = 1.0;
  }
  float v459 = fabsf(v452);
  float v460 = v458 + (float)((float)(v459 / v457) * (float)(v459 / v457));
  float v461 = (float)((float)((float)(v457 / v459) * (float)(v457 / v459)) * v458) + 1.0;
  if (v459 <= v457)
  {
    float v459 = v457;
    float v461 = v460;
  }
  float v462 = fabsf(v454);
  float v463 = v461 + (float)((float)(v462 / v459) * (float)(v462 / v459));
  float v464 = (float)((float)((float)(v459 / v462) * (float)(v459 / v462)) * v461) + 1.0;
  if (v462 <= v459) {
    float v464 = v463;
  }
  else {
    float v459 = v462;
  }
  float v465 = sqrtf(v464) * v459;
  float v466 = fabsf(v450);
  float v467 = fmaxf(v466, 1.2925e-26);
  if (v466 <= 1.2925e-26) {
    float v468 = (float)(v466 * 7.7371e25) * (float)(v466 * 7.7371e25);
  }
  else {
    float v468 = 1.0;
  }
  float v469 = fabsf(v453);
  float v470 = v468 + (float)((float)(v469 / v467) * (float)(v469 / v467));
  float v471 = (float)((float)((float)(v467 / v469) * (float)(v467 / v469)) * v468) + 1.0;
  if (v469 <= v467)
  {
    float v469 = v467;
    float v471 = v470;
  }
  float v472 = fabsf(v455);
  float v473 = v471 + (float)((float)(v472 / v469) * (float)(v472 / v469));
  float v474 = (float)((float)((float)(v469 / v472) * (float)(v469 / v472)) * v471) + 1.0;
  if (v472 <= v469) {
    float v474 = v473;
  }
  else {
    float v469 = v472;
  }
  float v475 = sqrtf(v474) * v469;
  float v476 = v449 * (float)(1.0 / v465);
  float v477 = v450 * (float)(1.0 / v475);
  float v478 = v452 * (float)(1.0 / v465);
  float v479 = v453 * (float)(1.0 / v475);
  float v480 = v454 * (float)(1.0 / v465);
  float v481 = v455 * (float)(1.0 / v475);
  float v482 = fabsf(v478);
  _ZF = fabsf(v476) == INFINITY || v482 == INFINITY;
  _VF = _ZF;
  float v485 = fabsf(v480);
  if (_VF) {
    BOOL v486 = 1;
  }
  else {
    BOOL v486 = v485 == INFINITY;
  }
  char v487 = v486;
  float v488 = fabsf(v477);
  if (v487) {
    BOOL v489 = 1;
  }
  else {
    BOOL v489 = v488 == INFINITY;
  }
  char v490 = v489;
  float v491 = fabsf(v479);
  if (v490) {
    BOOL v492 = 1;
  }
  else {
    BOOL v492 = v491 == INFINITY;
  }
  char v493 = v492;
  float v494 = fabsf(v481);
  if (v493) {
    BOOL v495 = 1;
  }
  else {
    BOOL v495 = v494 == INFINITY;
  }
  char v496 = v495;
  float v497 = fabsf(-(float)((float)(v480 * v479) - (float)(v481 * v478)));
  if (v496) {
    BOOL v498 = 1;
  }
  else {
    BOOL v498 = v497 == INFINITY;
  }
  char v499 = v498;
  float v500 = fabsf(-(float)((float)(v481 * v476) - (float)(v480 * v477)));
  if (v499) {
    BOOL v501 = 1;
  }
  else {
    BOOL v501 = v500 == INFINITY;
  }
  char v502 = v501;
  float v503 = fabsf(-(float)((float)(v477 * v478) - (float)(v479 * v476)));
  if (v502) {
    BOOL v504 = 1;
  }
  else {
    BOOL v504 = v503 == INFINITY;
  }
  if (v504)
  {
    v431.i32[0] = rtNaNF;
    float v506 = *(float *)&rtNaNF;
    float v507 = *(float *)&rtNaNF;
    float v508 = *(float *)&rtNaNF;
    float v509 = *(float *)&rtNaNF;
    float v510 = *(float *)&rtNaNF;
    *(int32x4_t *)v1123 = vdupq_lane_s32(v431, 0);
    float v511 = *(float *)&rtNaNF;
    float v512 = *(float *)&rtNaNF;
    float v513 = *(float *)&rtNaNF;
    float v514 = *(float *)&rtNaNF;
    v1125[0] = *(_OWORD *)v1123;
    v1125[1] = *(_OWORD *)v1123;
    float v515 = *(float *)&rtNaNF;
    float v516 = *(float *)&rtNaNF;
    float v517 = *(float *)&rtNaNF;
    float v518 = *(float *)&rtNaNF;
    float v1126 = *(float *)&rtNaNF;
    float v519 = *(float *)&rtNaNF;
    float v520 = *(float *)&rtNaNF;
    float v521 = *(float *)&rtNaNF;
    float v522 = *(float *)&rtNaNF;
    goto LABEL_444;
  }
  uint64_t v809 = 0;
  uint64_t v810 = 0;
  char v811 = 0;
  int v812 = 0;
  LODWORD(v1154) = 0;
  v1153 = 0;
  LODWORD(v1149) = 0;
  v1148 = 0;
  DWORD2(v1145) = 0;
  *(void *)&long long v1145 = 0;
  *(float *)v1157 = v449 * (float)(1.0 / v465);
  *((float *)v1157 + 1) = v452 * (float)(1.0 / v465);
  *(float *)&v1157[1] = v480;
  *((float *)&v1157[1] + 1) = v450 * (float)(1.0 / v475);
  memset(v1125, 0, 24);
  v1157[2] = (void *)__PAIR64__(LODWORD(v481), LODWORD(v479));
  uint64_t v813 = 1;
  uint64_t v814 = 4;
  *(float *)&v1157[3] = -(float)((float)(v480 * v479) - (float)(v481 * v478));
  *((float *)&v1157[3] + 1) = -(float)((float)(v481 * v476) - (float)(v480 * v477));
  memset(v1123, 0, sizeof(v1123));
  *(float *)&v1157[4] = -(float)((float)(v477 * v478) - (float)(v479 * v476));
  float v815 = 0.0;
  uint64_t v816 = 1;
  while (2)
  {
    unint64_t v817 = 4 * v810;
    unint64_t v818 = 4 * v810 + 4;
    unint64_t v819 = 16 * v810;
    unint64_t v820 = (4 * v810) | 1;
    uint64_t v821 = v810 ^ 3;
    unint64_t v822 = v820 + (v810 ^ 3);
    float v823 = *(float *)&v1157[2 * v810];
    float v824 = fabsf(v823);
    float v825 = (float)(v824 * 7.7371e25) * (float)(v824 * 7.7371e25);
    if (v824 <= 1.2925e-26) {
      float v824 = 1.2925e-26;
    }
    else {
      float v825 = 1.0;
    }
    uint64_t v826 = v817 | 2;
    if ((v817 | 2) < v822)
    {
      float v827 = fabsf(*((float *)v1157 + v820));
      float v828 = (float)((float)((float)(v824 / v827) * (float)(v824 / v827)) * v825) + 1.0;
      float v825 = v825 + (float)((float)(v827 / v824) * (float)(v827 / v824));
      if (v827 > v824)
      {
        float v825 = v828;
        float v824 = v827;
      }
      if ((v817 | 3) < v822)
      {
        float v829 = fabsf(*((float *)v1157 + v826));
        float v830 = (float)((float)((float)(v824 / v829) * (float)(v824 / v829)) * v825) + 1.0;
        float v825 = v825 + (float)((float)(v829 / v824) * (float)(v829 / v824));
        if (v829 > v824)
        {
          float v825 = v830;
          float v824 = v829;
        }
        if (v818 < v822)
        {
          float v831 = fabsf(*((float *)v1157 + (v817 | 3)));
          float v832 = (float)((float)((float)(v824 / v831) * (float)(v824 / v831)) * v825) + 1.0;
          float v825 = v825 + (float)((float)(v831 / v824) * (float)(v831 / v824));
          if (v831 > v824)
          {
            float v825 = v832;
            float v824 = v831;
          }
          if (v817 + 5 < v822)
          {
            float v833 = fabsf(*((float *)v1157 + v818));
            float v834 = (float)((float)((float)(v824 / v833) * (float)(v824 / v833)) * v825) + 1.0;
            float v825 = v825 + (float)((float)(v833 / v824) * (float)(v833 / v824));
            if (v833 > v824)
            {
              float v825 = v834;
              float v824 = v833;
            }
            if (v817 + 6 < v822)
            {
              float v835 = fabsf(*((float *)&v1157[v817 / 2 + 2] + 1));
              float v836 = (float)((float)((float)(v824 / v835) * (float)(v824 / v835)) * v825) + 1.0;
              float v825 = v825 + (float)((float)(v835 / v824) * (float)(v835 / v824));
              if (v835 > v824)
              {
                float v825 = v836;
                float v824 = v835;
              }
              if (v817 + 7 < v822)
              {
                float v837 = fabsf(*(float *)&v1157[v817 / 2 + 3]);
                if (v837 <= v824)
                {
                  float v825 = v825 + (float)((float)(v837 / v824) * (float)(v837 / v824));
                }
                else
                {
                  float v825 = (float)((float)((float)(v824 / v837) * (float)(v824 / v837)) * v825) + 1.0;
                  float v824 = v837;
                }
              }
            }
          }
        }
      }
    }
    v838 = &v1157[v819 / 8];
    v839 = &v1125[v819 / 0x10];
    size_t v840 = 12 - v817;
    float v841 = v824 * sqrtf(v825);
    if (v841 <= 0.0)
    {
      *((_DWORD *)&v1153 + v810) = 0;
      *((_DWORD *)&v1148 + v813) = *((_DWORD *)v1157 + 3 * v813 + v810);
      if (v811) {
        break;
      }
      uint64_t v842 = v810 | 6;
      goto LABEL_807;
    }
    if (v823 >= 0.0) {
      float v843 = v841;
    }
    else {
      float v843 = -v841;
    }
    unint64_t v844 = (v817 | 3) + v812;
    if (fabsf(v841) < 9.8608e-32)
    {
      if (v820 > v844) {
        goto LABEL_796;
      }
      *(float *)&v1157[v809] = *(float *)&v1157[v809] / v843;
      uint64_t v845 = v809 * 2 + 2;
      if (v809 * 2 + 2 == v814) {
        goto LABEL_796;
      }
      *((float *)&v1157[v809] + 1) = *((float *)&v1157[v809] + 1) / v843;
      if (v809 * 2 + 3 == v814) {
        goto LABEL_796;
      }
LABEL_795:
      *((float *)v1157 + v845) = *((float *)v1157 + v845) / v843;
      goto LABEL_796;
    }
    if (v820 <= v844)
    {
      *(float *)&v1157[v809] = *(float *)&v1157[v809] / v843;
      if (v809 * 2 + 2 != v814)
      {
        *((float *)&v1157[v809] + 1) = *((float *)&v1157[v809] + 1) / v843;
        if (v809 * 2 + 3 != v814)
        {
          uint64_t v845 = v816 + 1;
          goto LABEL_795;
        }
      }
    }
LABEL_796:
    float v846 = *(float *)&v1157[2 * v810] + 1.0;
    *(float *)&v1157[2 * v810] = v846;
    *((float *)&v1153 + v810) = -v843;
    uint64_t v847 = 3 * v813 + v810;
    float v848 = *((float *)v1157 + v847);
    float v849 = *((float *)v1157 + v847 + 1);
    float v850 = (float)(v848 * v846) + (float)(v849 * *((float *)v1157 + v820));
    if (v821 != 2) {
      float v850 = v850 + (float)(*((float *)&v1157[1] + v847) * *((float *)v1157 + v826));
    }
    float v851 = (float)-v850 / v846;
    if (v851 != 0.0)
    {
      float v848 = v848 + (float)(v846 * v851);
      *((float *)v1157 + v847) = v848;
      *((float *)v1157 + v847 + 1) = v849 + (float)(*((float *)v1157 + v820) * v851);
      if (v821 != 2) {
        *((float *)&v1157[1] + v847) = *((float *)&v1157[1] + v847) + (float)(*((float *)v1157 + v826) * v851);
      }
    }
    *((float *)&v1148 + v813) = v848;
    if ((v811 & 1) == 0)
    {
      uint64_t v842 = v810 | 6;
      float v852 = *(float *)&v1157[2 * v810];
      float v853 = *((float *)v1157 + (v810 | 6));
      float v854 = *((float *)v1157 + v820);
      float v855 = *((float *)&v1157[3] + v810 + 1);
      float v856 = (float)(v853 * v852) + (float)(v855 * v854);
      if (v821 != 2) {
        float v856 = v856 + (float)(*(float *)((char *)v1157 + (v817 | 0x20)) * *((float *)v1157 + v826));
      }
      float v857 = (float)-v856 / v852;
      if (v857 != 0.0)
      {
        *((float *)v1157 + v842) = v853 + (float)(v852 * v857);
        *((float *)&v1157[3] + v810 + 1) = v855 + (float)(v854 * v857);
        if (v821 != 2) {
          *(float *)((char *)v1157 + (v817 | 0x20)) = *(float *)((char *)v1157 + (v817 | 0x20))
        }
                                                    + (float)(*((float *)v1157 + v826) * v857);
      }
LABEL_807:
      float v858 = *((float *)v1157 + v842);
      *(float *)&uint64_t v1149 = v858;
      memcpy(v839, v838, v840);
      float v861 = fabsf(*((float *)&v1148 + 1));
      float v862 = (float)(v861 * 7.7371e25) * (float)(v861 * 7.7371e25);
      if (v861 <= 1.2925e-26) {
        float v861 = 1.2925e-26;
      }
      else {
        float v862 = 1.0;
      }
      float v863 = fabsf(v858);
      float v864 = (float)((float)((float)(v861 / v863) * (float)(v861 / v863)) * v862) + 1.0;
      float v865 = v862 + (float)((float)(v863 / v861) * (float)(v863 / v861));
      if (v863 > v861)
      {
        float v865 = v864;
        float v861 = v863;
      }
      float v866 = v861 * sqrtf(v865);
      if (v866 == 0.0)
      {
        LODWORD(v1148) = 0;
        float v815 = 0.0;
      }
      else
      {
        if (*((float *)&v1148 + 1) < 0.0) {
          float v866 = -v866;
        }
        v860.f32[0] = v858 / v866;
        v859.f32[0] = (float)(*((float *)&v1148 + 1) / v866) + 1.0;
        float32x2_t v1080 = v860;
        float32x2_t __srcc = v859;
        float v815 = -v866;
        *((float *)&v1148 + 1) = v859.f32[0];
        LODWORD(v1149) = v860.i32[0];
        *(float *)&v1148 = -v866;
        bzero((char *)&v1145 + v818, -4 * v810 + 8);
        float32x2_t v867 = vadd_f32(vadd_f32(*(float32x2_t *)((char *)&v1145 + 4), (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_f32(v1080, 0), 0), (int8x8_t)0x8000000080000000, (int8x8_t)vmul_n_f32(*(float32x2_t *)((char *)&v1157[3] + 4), v1080.f32[0]))), (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vceq_f32(__srcc, 0), 0), (int8x8_t)0x8000000080000000, (int8x8_t)vmul_n_f32((float32x2_t)v1157[2], __srcc.f32[0])));
        *(float32x2_t *)((char *)&v1145 + 4) = v867;
        float v868 = (float)-__srcc.f32[0] / __srcc.f32[0];
        if (v868 != 0.0) {
          v1157[2] = (void *)vmla_n_f32((float32x2_t)v1157[2], v867, v868);
        }
        float v869 = (float)-v1080.f32[0] / __srcc.f32[0];
        if (v869 != 0.0) {
          *(float32x2_t *)((char *)&v1157[3] + 4) = vmla_n_f32(*(float32x2_t *)((char *)&v1157[3] + 4), v867, v869);
        }
      }
      memcpy(&v1123[v818], (char *)&v1148 + v818, -4 * v810 + 8);
      int v812 = ~v810;
      v816 += 4;
      v814 += 3;
      v809 += 2;
      uint64_t v810 = 1;
      char v811 = 1;
      uint64_t v813 = 2;
      continue;
    }
    break;
  }
  memcpy(v839, v838, v840);
  float v877 = *((float *)&v1157[3] + 1);
  float v876 = *(float *)&v1157[4];
  LODWORD(v1154) = v1157[4];
  HIDWORD(v1148) = HIDWORD(v1157[3]);
  LODWORD(v1149) = 0;
  float v1126 = 1.0;
  *((void *)&v1125[1] + 1) = 0;
  float v878 = *((float *)&v1153 + 1);
  if (*((float *)&v1153 + 1) == 0.0)
  {
    DWORD1(v1125[1]) = 0;
    *(void *)((char *)v1125 + 12) = 0x3F80000000000000;
    float v882 = 1.0;
    float v879 = 0.0;
    float v881 = 0.0;
    float v883 = 1.0;
    uint64_t v432 = v1074;
  }
  else
  {
    float v879 = -*((float *)&v1125[1] + 1);
    float v880 = (float)-*((float *)&v1125[1] + 1) / *(float *)&v1125[1];
    uint64_t v432 = v1074;
    if (v880 == 0.0)
    {
      float v881 = 0.0;
      float v882 = 1.0;
    }
    else
    {
      float v881 = v880 * *(float *)&v1125[1];
      *((float *)&v1125[1] + 3) = v880 * *(float *)&v1125[1];
      float v882 = (float)(v880 * *((float *)&v1125[1] + 1)) + 1.0;
      float v1126 = v882;
    }
    *((float *)&v1125[1] + 1) = -*((float *)&v1125[1] + 1);
    float v883 = 1.0 - *(float *)&v1125[1];
    *(float *)&v1125[1] = 1.0 - *(float *)&v1125[1];
    HIDWORD(v1125[0]) = 0;
  }
  float v884 = *(float *)&v1153;
  if (*(float *)&v1153 == 0.0)
  {
    *(void *)((char *)v1125 + 4) = 0;
    float v887 = 1.0;
    float v885 = 0.0;
    _Q18.i64[0] = 0;
    float v888 = 0.0;
    float v889 = 0.0;
  }
  else
  {
    float v885 = 0.0;
    float v886 = (float)-(float)((float)((float)(*(float *)v1125 * 0.0) + (float)(*((float *)v1125 + 1) * v883))
                         + (float)(*((float *)v1125 + 2) * v879))
         / *(float *)v1125;
    if (v886 == 0.0)
    {
      _Q18.i64[0] = 0;
    }
    else
    {
      _Q18.f32[0] = v886 * *(float *)v1125;
      float v883 = v883 + (float)(v886 * *((float *)v1125 + 1));
      *((float *)v1125 + 3) = v886 * *(float *)v1125;
      *(float *)&v1125[1] = v883;
      float v879 = v879 + (float)(v886 * *((float *)v1125 + 2));
      *((float *)&v1125[1] + 1) = v879;
    }
    float v890 = (float)-(float)((float)((float)(*(float *)v1125 * 0.0) + (float)(*((float *)v1125 + 1) * v881))
                         + (float)(*((float *)v1125 + 2) * v882))
         / *(float *)v1125;
    if (v890 != 0.0)
    {
      float v885 = v890 * *(float *)v1125;
      float v881 = v881 + (float)(v890 * *((float *)v1125 + 1));
      *((float *)&v1125[1] + 2) = v890 * *(float *)v1125;
      *((float *)&v1125[1] + 3) = v881;
      float v882 = v882 + (float)(v890 * *((float *)v1125 + 2));
      float v1126 = v882;
    }
    float v889 = -*((float *)v1125 + 1);
    float v888 = -*((float *)v1125 + 2);
    *((float *)v1125 + 1) = -*((float *)v1125 + 1);
    *((float *)v1125 + 2) = -*((float *)v1125 + 2);
    float v887 = 1.0 - *(float *)v1125;
  }
  *(float *)v1125 = v887;
  *(void *)&v1123[28] = 0x3F80000000000000;
  *(_OWORD *)&v1123[12] = xmmword_259120B80;
  if (v815 == 0.0)
  {
    float v893 = 0.0;
    float v892 = 1.0;
    float v894 = 0.0;
    float v895 = 1.0;
  }
  else
  {
    float v891 = (float)-*(float *)&v1123[4] / *(float *)&v1123[4];
    float v892 = 1.0;
    float v893 = 0.0;
    float v894 = 0.0;
    float v895 = 1.0;
    if (v891 != 0.0)
    {
      float v895 = (float)(v891 * *(float *)&v1123[4]) + 1.0;
      float v894 = v891 * *(float *)&v1123[8];
      *(float *)&v1123[16] = v895;
      *(float *)&v1123[20] = v891 * *(float *)&v1123[8];
    }
    float v896 = (float)-*(float *)&v1123[8] / *(float *)&v1123[4];
    if (v896 != 0.0)
    {
      float v893 = v896 * *(float *)&v1123[4];
      float v892 = (float)(v896 * *(float *)&v1123[8]) + 1.0;
      *(float *)&v1123[28] = v896 * *(float *)&v1123[4];
      *(float *)&v1123[32] = v892;
    }
  }
  *(_DWORD *)&v1123[8] = 0;
  *(void *)v1123 = 1065353216;
  if (*(float *)&v1153 != 0.0)
  {
    float v897 = fabsf(*(float *)&v1153);
    float v898 = *(float *)&v1153 / v897;
    *(float *)&v1153 = v897;
    float v815 = v815 / v898;
    *(float *)&v1148 = v815;
    *(float *)v1125 = v887 * v898;
    *((float *)v1125 + 1) = v889 * v898;
    *((float *)v1125 + 2) = v888 * v898;
    float v884 = v897;
  }
  if (v815 != 0.0)
  {
    LODWORD(v1148) = fabsf(v815);
    float v878 = (float)(*(float *)&v1148 / v815) * *((float *)&v1153 + 1);
    *((float *)&v1153 + 1) = v878;
    *(float *)&v1123[12] = (float)(*(float *)&v1148 / v815) * 0.0;
    *(float *)&v1123[16] = v895 * (float)(*(float *)&v1148 / v815);
    *(float *)&v1123[20] = v894 * (float)(*(float *)&v1148 / v815);
    float v815 = *(float *)&v1148;
  }
  float v899 = fmaxf(fabsf(v884), fabsf(v815));
  if (v878 != 0.0)
  {
    float v900 = fabsf(v878);
    float v901 = v878 / v900;
    *((float *)&v1153 + 1) = v900;
    float v877 = *((float *)&v1157[3] + 1) / v901;
    *((float *)&v1148 + 1) = *((float *)&v1157[3] + 1) / v901;
    *((float *)v1125 + 3) = _Q18.f32[0] * v901;
    *(float *)&v1125[1] = v883 * v901;
    *((float *)&v1125[1] + 1) = v879 * v901;
    float v878 = v900;
  }
  float v902 = fmaxf(v899, 0.0);
  if (v877 != 0.0)
  {
    float v903 = fabsf(v877);
    float v904 = v903 / v877;
    *((float *)&v1148 + 1) = v903;
    float v876 = v904 * *(float *)&v1157[4];
    *(float *)&uint64_t v1154 = v904 * *(float *)&v1157[4];
    *(float *)&v1123[24] = v904 * 0.0;
    *(float *)&v1123[28] = v893 * v904;
    *(float *)&v1123[32] = v892 * v904;
    float v877 = v903;
  }
  float v905 = fmaxf(v902, fmaxf(fabsf(v878), fabsf(v877)));
  if (v876 != 0.0)
  {
    LODWORD(v1154) = fabsf(v876);
    float v906 = v876 / *(float *)&v1154;
    *((float *)&v1125[1] + 2) = v885 * v906;
    *((float *)&v1125[1] + 3) = v881 * v906;
    float v1126 = v882 * v906;
    float v876 = *(float *)&v1154;
  }
  int v907 = 0;
  float v908 = fmaxf(v905, fmaxf(fabsf(v876), 0.0)) * 0.00000011921;
  int v909 = 1;
  int v910 = 3;
  while (2)
  {
    int v911 = v909 + 1;
    if (v909 == -1)
    {
LABEL_865:
      int v920 = 0;
      if (v909 != -1) {
        goto LABEL_875;
      }
      goto LABEL_866;
    }
    uint64_t v912 = v909;
    float v913 = *((float *)&v1153 + v909 + 1);
    while (1)
    {
      float v914 = fabsf(*((float *)&v1148 + v912));
      float v915 = fabsf(v913);
      float v913 = *((float *)&v1153 + v912);
      float v916 = (float)(fabsf(v913) + v915) * 0.00000011921;
      BOOL v917 = v914 > v908 || v907 < 21;
      BOOL v918 = v917;
      BOOL v919 = v914 > 9.8608e-32 && v914 > v916;
      if (!v919 || !v918) {
        break;
      }
      if (--v912 == -1) {
        goto LABEL_865;
      }
    }
    *((_DWORD *)&v1148 + v912) = 0;
    int v920 = v912 + 1;
    if (v920 == v911)
    {
LABEL_866:
      float v921 = *((float *)&v1153 + v911);
      if (v921 < 0.0)
      {
        float v921 = -v921;
        *((float *)&v1153 + v911) = v921;
        v922 = &v1123[12 * v911];
        v870.i64[0] = *(void *)v922;
        v870.i32[2] = *((_DWORD *)v922 + 2);
        float32x4_t v870 = vnegq_f32(v870);
        *((_DWORD *)v922 + 2) = v870.i32[2];
        *(void *)v922 = v870.i64[0];
      }
      if (v909 <= 0)
      {
        unint64_t v923 = (unint64_t)(3 * v909) << 32;
        uint64_t v924 = v923 + 0x800000000;
        uint64_t v925 = v923 + 0x700000000;
        uint64_t v926 = v923 + 0x600000000;
        uint64_t v927 = v909 - 1;
        uint64_t v928 = 12 * v909;
        v929 = (int *)((char *)&v1125[1] + v928 + 4);
        v930 = (float *)&v1154 + v909;
        v931 = (int *)&v1123[v928 + 20];
        do
        {
          float v932 = *v930;
          if (v921 >= *v930) {
            break;
          }
          int v933 = *(v931 - 2);
          uint64_t v934 = v926 >> 30;
          *(v931 - 2) = *(_DWORD *)&v1123[v926 >> 30];
          *(_DWORD *)&v1123[v934] = v933;
          int v935 = *(v931 - 1);
          uint64_t v936 = v925 >> 30;
          *(v931 - 1) = *(_DWORD *)&v1123[v925 >> 30];
          *(_DWORD *)&v1123[v936] = v935;
          int v937 = *v931;
          uint64_t v938 = v924 >> 30;
          int *v931 = *(_DWORD *)&v1123[v924 >> 30];
          v931 += 3;
          *(_DWORD *)&v1123[v938] = v937;
          int v939 = *(v929 - 2);
          *(v929 - 2) = *(_DWORD *)((char *)v1125 + (v926 >> 30));
          *(_DWORD *)((char *)v1125 + v934) = v939;
          int v940 = *(v929 - 1);
          *(v929 - 1) = *(_DWORD *)((char *)v1125 + (v925 >> 30));
          *(_DWORD *)((char *)v1125 + v936) = v940;
          int v941 = *v929;
          int *v929 = *(_DWORD *)((char *)v1125 + (v924 >> 30));
          v929 += 3;
          *(_DWORD *)((char *)v1125 + v938) = v941;
          v924 += 0x300000000;
          v925 += 0x300000000;
          v926 += 0x300000000;
          *(v930 - 1) = v932;
          *v930++ = v921;
          _CF = __CFADD__(v927++, 1);
        }
        while (!_CF);
      }
      int v907 = 0;
      --v909;
      goto LABEL_900;
    }
LABEL_875:
    int v942 = v910;
    if (v910 < v920)
    {
LABEL_876:
      if (v942 == v920) {
        goto LABEL_877;
      }
      if (v942 == v910)
      {
        uint64_t v966 = 4 * v909;
        float v967 = *(float *)((char *)&v1148 + v966);
        *(_DWORD *)((char *)&v1148 + v966) = 0;
        float v968 = *(float *)&v1148;
        if (v909 >= v920)
        {
          uint64_t v1032 = v909;
          uint64_t v1033 = 3 * v911;
          uint64_t v1034 = v1033 + 1;
          uint64_t v1035 = (int)v1033 + 2;
          uint64_t v1036 = v920 + 1;
          v1037 = (float *)&v1123[12 * v909 + 8];
          do
          {
            float v1048 = *((float *)&v1153 + v1032);
            float v1049 = fabsf(v1048);
            float v1050 = fabsf(v967);
            if ((float)(v1049 + v1050) == 0.0)
            {
              float v1038 = 1.0;
              float v1039 = 0.0;
              float v967 = 0.0;
              _Q18.i64[0] = 0;
            }
            else
            {
              if (v1049 <= v1050) {
                float v1051 = v967;
              }
              else {
                float v1051 = *((float *)&v1153 + v1032);
              }
              float v1052 = sqrtf((float)((float)(v1050 / (float)(v1049 + v1050)) * (float)(v1050 / (float)(v1049 + v1050)))+ (float)((float)(v1049 / (float)(v1049 + v1050)) * (float)(v1049 / (float)(v1049 + v1050))))* (float)(v1049 + v1050);
              float v1039 = -v1052;
              if (v1051 >= 0.0) {
                float v1039 = v1052;
              }
              BOOL v268 = v1049 <= v1050;
              float v1038 = v1048 / v1039;
              _Q18.f32[0] = v967 / v1039;
              if (v268)
              {
                if (v1038 == 0.0) {
                  float v967 = 1.0;
                }
                else {
                  float v967 = 1.0 / v1038;
                }
              }
              else
              {
                float v967 = v967 / v1039;
              }
            }
            *((float *)&v1153 + v1032) = v1039;
            float v1040 = -(float)(v968 * _Q18.f32[0]);
            if (v1032 + 1 <= v1036) {
              float v1041 = 1.0;
            }
            else {
              float v1041 = v1038;
            }
            float v1042 = *(float *)&v1123[4 * (int)v1033];
            float v968 = v1041 * v968;
            float v1043 = *(v1037 - 2);
            *(float *)&v1123[4 * (int)v1033] = -(float)((float)(v1043 * _Q18.f32[0]) - (float)(v1042 * v1038));
            if (v1032 + 1 > v1036) {
              float v967 = v1040;
            }
            *(v1037 - 2) = (float)(v1042 * _Q18.f32[0]) + (float)(v1043 * v1038);
            float v1044 = *(v1037 - 1);
            float v1045 = *(float *)&v1123[4 * v1034];
            *(float *)&v1123[4 * v1034] = -(float)((float)(v1044 * _Q18.f32[0]) - (float)(v1045 * v1038));
            *(v1037 - 1) = (float)(v1044 * v1038) + (float)(v1045 * _Q18.f32[0]);
            float v1046 = *(float *)&v1123[4 * v1035];
            float v1047 = *v1037;
            *(float *)&v1123[4 * v1035] = -(float)((float)(*v1037 * _Q18.f32[0]) - (float)(v1046 * v1038));
            float *v1037 = (float)(v1046 * _Q18.f32[0]) + (float)(v1047 * v1038);
            v1037 -= 3;
            BOOL v268 = v1032-- <= v920;
          }
          while (!v268);
        }
        *(float *)&v1148 = v968;
        goto LABEL_900;
      }
      uint64_t v1008 = v942 - 1;
      float v1009 = *((float *)&v1148 + v1008);
      *((_DWORD *)&v1148 + v1008) = 0;
      if (v942 < v910)
      {
        uint64_t v1010 = 3 * (int)v1008;
        uint64_t v1011 = v1010 + 1;
        uint64_t v1012 = (int)v1010;
        uint64_t v1013 = (int)v1010 + 2;
        uint64_t v1014 = v910 - (uint64_t)v942;
        uint64_t v1015 = 4 * v942;
        v1016 = (float *)((char *)&v1153 + v1015);
        v1017 = (float *)v1125 + 3 * v942 + 1;
        v1018 = (float *)((char *)&v1148 + v1015);
        do
        {
          float v1028 = fabsf(*v1016);
          float v1029 = fabsf(v1009);
          if ((float)(v1028 + v1029) == 0.0)
          {
            float v1019 = 1.0;
            _Q18.i64[0] = 0;
            float v1020 = 0.0;
          }
          else
          {
            if (v1028 <= v1029) {
              float v1030 = v1009;
            }
            else {
              float v1030 = *v1016;
            }
            float v1031 = sqrtf((float)((float)(v1029 / (float)(v1028 + v1029)) * (float)(v1029 / (float)(v1028 + v1029)))+ (float)((float)(v1028 / (float)(v1028 + v1029)) * (float)(v1028 / (float)(v1028 + v1029))))* (float)(v1028 + v1029);
            if (v1030 >= 0.0) {
              _Q18.f32[0] = v1031;
            }
            else {
              _Q18.f32[0] = -v1031;
            }
            float v1019 = *v1016 / _Q18.f32[0];
            float v1020 = v1009 / _Q18.f32[0];
          }
          *v1016++ = _Q18.f32[0];
          float v1021 = *v1018;
          float *v1018 = *v1018 * v1019;
          ++v1018;
          float v1022 = *((float *)v1125 + v1012);
          float v1023 = *(v1017 - 1);
          *((float *)v1125 + v1012) = -(float)((float)(v1023 * v1020) - (float)(v1022 * v1019));
          *(v1017 - 1) = (float)(v1022 * v1020) + (float)(v1023 * v1019);
          float v1024 = *((float *)v1125 + v1011);
          float v1025 = (float)(*v1017 * v1019) + (float)(v1024 * v1020);
          *((float *)v1125 + v1011) = -(float)((float)(*v1017 * v1020) - (float)(v1024 * v1019));
          float *v1017 = v1025;
          float v1026 = *((float *)v1125 + v1013);
          float v1027 = v1017[1];
          *((float *)v1125 + v1013) = -(float)((float)(v1027 * v1020) - (float)(v1026 * v1019));
          float v1009 = -(float)(v1020 * v1021);
          v1017[1] = (float)(v1026 * v1020) + (float)(v1027 * v1019);
          v1017 += 3;
          --v1014;
        }
        while (v1014);
        goto LABEL_900;
      }
      goto LABEL_901;
    }
    int v959 = v910;
    while (v959 != v920)
    {
      int v942 = v959;
      float v965 = 0.0;
      if (v959 < v910) {
        float v965 = fabsf(*((float *)&v1148 + v959 - 1));
      }
      if (v959 > v920 + 1) {
        float v965 = fabsf(*(float *)&v1147[v959]) + v965;
      }
      uint64_t v960 = v959 - 1;
      float v961 = fabsf(*((float *)&v1153 + v960));
      BOOL v962 = v961 > (float)(v965 * 0.00000011921) && v961 > 9.8608e-32;
      if (v961 > (float)(v965 * 0.00000011921) && v961 > 9.8608e-32) {
        float v963 = *((float *)&v1153 + v960);
      }
      else {
        float v963 = 0.0;
      }
      *((float *)&v1153 + v960) = v963;
      BOOL v964 = !v962 || --v959 < v920;
      uint64_t v432 = v1074;
      if (v964) {
        goto LABEL_876;
      }
    }
LABEL_877:
    float v943 = *((float *)&v1153 + v911);
    uint64_t v944 = 4 * v909;
    float v945 = *(float *)((char *)&v1153 + v944);
    float v946 = *(float *)((char *)&v1148 + v944);
    uint64_t v947 = 4 * v920;
    float v948 = *(float *)((char *)&v1153 + v947);
    float v949 = *(float *)((char *)&v1148 + v947);
    float v950 = fmaxf(fmaxf(fmaxf(fmaxf(fabsf(v943), fabsf(v945)), fabsf(v946)), fabsf(v948)), fabsf(v949));
    float v951 = v943 * (float)(1.0 / v950);
    float v952 = v946 * (float)(1.0 / v950);
    float v953 = (float)((float)(v952 * v952)
                 + (float)((float)((float)(v945 * (float)(1.0 / v950)) + v951)
                         * (float)((float)(v945 * (float)(1.0 / v950)) - v951)))
         * 0.5;
    float v954 = (float)(v951 * v952) * (float)(v951 * v952);
    if (v954 != 0.0 || (float v955 = 0.0, v953 != 0.0))
    {
      float v956 = sqrtf(v954 + (float)(v953 * v953));
      if (v953 < 0.0) {
        float v956 = -v956;
      }
      float v955 = v954 / (float)(v956 + v953);
    }
    float v957 = v948 * (float)(1.0 / v950);
    float v958 = v955 + (float)((float)(v957 + v951) * (float)(v957 - v951));
    if (v920 <= v909)
    {
      int v969 = v920 + 1;
      uint64_t v970 = v969;
      uint64_t v971 = 3 * v969;
      unint64_t v972 = 4 * v969;
      v973 = v1125;
      v974 = &v1121;
      uint64_t v975 = v969;
      float v976 = (float)(v957 * v949) / v950;
      while (1)
      {
        float v984 = fabsf(v958);
        float v985 = fabsf(v976);
        if ((float)(v985 + v984) != 0.0) {
          break;
        }
        float v986 = 1.0;
        _Q18.i64[0] = 0;
        float v987 = 0.0;
        if (v975 > v970) {
          goto LABEL_908;
        }
LABEL_909:
        float v988 = *(float *)&v1147[v972 / 4 + 1];
        float v989 = *(float *)&v1152[v972];
        float v990 = -(float)((float)(v989 * v987) - (float)(v988 * v986));
        *(float *)&v1147[v972 / 4 + 1] = v990;
        v991 = (float *)&v974[v971];
        float v992 = *(float *)&v974[v971];
        float v993 = *(float *)&v974[v971 + 1];
        float v995 = *(float *)&v974[v971 + 2];
        float v994 = *(float *)&v974[v971 + 3];
        float v996 = -(float)((float)(v992 * v987) - (float)(v994 * v986));
        float v997 = (float)(v994 * v987) + (float)(v992 * v986);
        float v998 = *(float *)&v974[v971 + 4];
        float v999 = *(float *)&v974[v971 + 5];
        _Q18.i32[0] = *(_DWORD *)((char *)&v1153 + v972);
        float *v991 = v997;
        v991[1] = (float)(v993 * v986) + (float)(v998 * v987);
        v991[4] = -(float)((float)(v993 * v987) - (float)(v998 * v986));
        v991[5] = -(float)((float)(v995 * v987) - (float)(v999 * v986));
        v1000.f32[0] = _Q18.f32[0] * v987;
        v991[2] = (float)(v999 * v987) + (float)(v995 * v986);
        v991[3] = v996;
        float v1001 = (float)(v988 * v987) + (float)(v989 * v986);
        float v1002 = fabsf(v1001);
        float v1003 = fabsf(_Q18.f32[0] * v987);
        v873.i64[0] = 0;
        _Q17.i64[0] = 0x3F80000000000000;
        if ((float)(v1003 + v1002) != 0.0)
        {
          if (v1002 <= v1003) {
            float v1004 = v1000.f32[0];
          }
          else {
            float v1004 = v1001;
          }
          float v1005 = sqrtf((float)((float)(v1003 / (float)(v1003 + v1002)) * (float)(v1003 / (float)(v1003 + v1002)))+ (float)((float)(v1002 / (float)(v1003 + v1002)) * (float)(v1002 / (float)(v1003 + v1002))))* (float)(v1003 + v1002);
          *(float *)v873.i32 = -v1005;
          if (v1004 >= 0.0) {
            *(float *)v873.i32 = v1005;
          }
          v1000.f32[1] = v1001;
          *(float32x2_t *)_Q17.i8 = vdiv_f32(v1000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v873.i8, 0));
        }
        _Q18.f32[0] = _Q18.f32[0] * v986;
        *(_DWORD *)&v1152[v972] = v873.i32[0];
        float v958 = vmlas_n_f32(vmuls_lane_f32(v990, *(float32x2_t *)_Q17.i8, 1), _Q18.f32[0], *(float *)_Q17.i32);
        __asm { FMLA            S16, S18, V17.S[1] }
        *(_DWORD *)((char *)&v1153 + v972) = _S16;
        _Q18.i32[0] = *(_DWORD *)((char *)&v1148 + v972);
        float v976 = _Q18.f32[0] * *(float *)_Q17.i32;
        *(float *)((char *)&v1148 + v972) = vmuls_lane_f32(_Q18.f32[0], *(float32x2_t *)_Q17.i8, 1);
        v978 = (char *)v973 + v971 * 4;
        _Q18.i32[0] = *(_DWORD *)((char *)v973 + v971 * 4);
        v873.i32[0] = *(_DWORD *)((char *)v973 + v971 * 4 - 12);
        v874.i64[0] = *(void *)((char *)v973 + v971 * 4 + 4);
        v875.i64[0] = *(void *)((char *)v973 + v971 * 4 - 8);
        *(float32x2_t *)(v978 + 4) = vmla_lane_f32(vneg_f32(vmul_n_f32(*(float32x2_t *)v875.i8, *(float *)_Q17.i32)), *(float32x2_t *)v874.i8, *(float32x2_t *)_Q17.i8, 1);
        v979.i64[0] = vzip1q_s32((int32x4_t)_Q18, v874).u64[0];
        v979.i64[1] = __PAIR64__(v979.u32[0], v875.u32[1]);
        v873.i32[2] = v874.i32[1];
        _Q18 = vmulq_f32(v979, (float32x4_t)vzip1q_s32(_Q17, _Q17));
        float32x4_t v980 = (float32x4_t)vtrn1q_s32(v873, v875);
        v980.i32[3] = v980.i32[0];
        int32x4_t v981 = vrev64q_s32(_Q17);
        float32x4_t v982 = vmulq_f32(v980, (float32x4_t)vzip1q_s32(v981, v981));
        float32x4_t v983 = vaddq_f32(_Q18, v982);
        _Q17 = (int32x4_t)vsubq_f32(_Q18, v982);
        v983.i32[3] = _Q17.i32[3];
        *(float32x4_t *)(v978 - 12) = v983;
        v973 = (_OWORD *)((char *)v973 + 12);
        v972 += 4;
        v974 += 3;
        BOOL v268 = v975++ <= v909;
        if (!v268) {
          goto LABEL_883;
        }
      }
      if (v984 <= v985) {
        float v1006 = v976;
      }
      else {
        float v1006 = v958;
      }
      float v1007 = sqrtf((float)((float)(v985 / (float)(v985 + v984)) * (float)(v985 / (float)(v985 + v984)))+ (float)((float)(v984 / (float)(v985 + v984)) * (float)(v984 / (float)(v985 + v984))))* (float)(v985 + v984);
      if (v1006 >= 0.0) {
        _Q18.f32[0] = v1007;
      }
      else {
        _Q18.f32[0] = -v1007;
      }
      float v986 = v958 / _Q18.f32[0];
      float v987 = v976 / _Q18.f32[0];
      if (v975 <= v970) {
        goto LABEL_909;
      }
LABEL_908:
      LODWORD(v1148) = _Q18.i32[0];
      goto LABEL_909;
    }
LABEL_883:
    *((float *)&v1148 + v909) = v958;
    ++v907;
LABEL_900:
    uint64_t v432 = v1074;
    if (v909 < -1) {
      break;
    }
LABEL_901:
    int v910 = v909 + 2;
    if (v907 < 75) {
      continue;
    }
    break;
  }
  float v519 = *(float *)v1123;
  float v516 = *(float *)&v1123[4];
  float v517 = *(float *)&v1123[24];
  float v514 = *(float *)&v1123[28];
  float v513 = *(float *)&v1123[8];
  float v518 = *(float *)&v1123[12];
  float v515 = *(float *)&v1123[16];
  float v512 = *(float *)&v1123[20];
  float v511 = *(float *)&v1123[32];
  float v510 = *((float *)v1125 + 1);
  float v522 = *(float *)v1125;
  float v508 = *((float *)&v1125[1] + 3);
  float v520 = *((float *)&v1125[1] + 2);
  float v521 = *((float *)v1125 + 3);
  float v507 = *((float *)v1125 + 2);
  float v506 = *((float *)&v1125[1] + 1);
  float v509 = *(float *)&v1125[1];
  *(float *)v431.i32 = v1126;
  uint64_t v429 = v1058;
  int8x8_t v430 = v1059;
LABEL_444:
  float v523 = (float)((float)(v519 * v522) + (float)(v518 * v521)) + (float)(v517 * v520);
  float v524 = (float)((float)(v519 * v510) + (float)(v518 * v509)) + (float)(v517 * v508);
  v1127 = v523;
  float v1128 = v524;
  float v1133 = (float)((float)(v513 * v522) + (float)(v512 * v521)) + (float)(v511 * v520);
  float v1134 = (float)((float)(v513 * v510) + (float)(v512 * v509)) + (float)(v511 * v508);
  float v525 = (float)((float)(v519 * v507) + (float)(v518 * v506)) + (float)(v517 * *(float *)v431.i32);
  float v1129 = v525;
  float v1130 = (float)((float)(v516 * v522) + (float)(v515 * v521)) + (float)(v514 * v520);
  float v526 = (float)((float)(v516 * v507) + (float)(v515 * v506)) + (float)(v514 * *(float *)v431.i32);
  float v1131 = (float)((float)(v516 * v510) + (float)(v515 * v509)) + (float)(v514 * v508);
  float v1132 = v526;
  float v527 = (float)((float)(v513 * v507) + (float)(v512 * v506)) + (float)(v511 * *(float *)v431.i32);
  float v1135 = v527;
  float v528 = fabsf(v527);
  if (fabsf(v526) == INFINITY && v528 == INFINITY)
  {
    float v534 = -1.0;
    if (v526 <= 0.0) {
      float v533 = -1.0;
    }
    else {
      float v533 = 1.0;
    }
    if (v527 > 0.0) {
      float v534 = 1.0;
    }
    goto LABEL_460;
  }
  if (v527 != 0.0)
  {
    float v533 = v526;
    float v534 = v527;
LABEL_460:
    float v530 = atan2f(v533, v534);
    goto LABEL_461;
  }
  float v530 = 1.5708;
  float v531 = -1.5708;
  if (v526 >= 0.0) {
    float v531 = 0.0;
  }
  if (v526 <= 0.0) {
    float v530 = v531;
  }
LABEL_461:
  float v535 = v475 * v465;
  *(float *)v1125 = v530 * 1000.0;
  float v536 = -v525;
  float v537 = sqrtf((float)(v526 * v526) + (float)(v527 * v527));
  BOOL v538 = fabsf(v525) == INFINITY;
  if (v537 != INFINITY || !v538)
  {
    if (v537 != 0.0) {
      goto LABEL_471;
    }
    if (v525 >= 0.0)
    {
      float v540 = -1.5708;
      if (v525 <= 0.0) {
        float v540 = 0.0;
      }
    }
    else
    {
      float v540 = 1.5708;
    }
  }
  else
  {
    float v536 = -1.0;
    float v537 = 1.0;
    if (v525 < 0.0) {
      float v536 = 1.0;
    }
LABEL_471:
    float v540 = atan2f(v536, v537);
  }
  *((float *)v1125 + 1) = v540 * 1000.0;
  float v541 = sqrtf(v535);
  float v542 = fabsf(v523);
  if (fabsf(v524) == INFINITY && v542 == INFINITY)
  {
    float v546 = -1.0;
    if (v524 <= 0.0) {
      float v545 = -1.0;
    }
    else {
      float v545 = 1.0;
    }
    if (v523 > 0.0) {
      float v546 = 1.0;
    }
    goto LABEL_485;
  }
  if (v523 != 0.0)
  {
    float v545 = v524;
    float v546 = v523;
LABEL_485:
    float v544 = atan2f(v545, v546);
    goto LABEL_488;
  }
  if (v524 <= 0.0)
  {
    float v544 = -1.5708;
    if (v524 >= 0.0) {
      float v544 = 0.0;
    }
  }
  else
  {
    float v544 = 1.5708;
  }
LABEL_488:
  *((float *)v1125 + 2) = v544 * 1000.0;
  float v532 = (float)((float)(v451 * 0.01008) / v541) + -0.9142;
LABEL_489:
  int v547 = *(_DWORD *)(v1071 + 4);
  LODWORD(v1112) = 14;
  HIDWORD(v1112) = v547;
  int v1113 = 2;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1110, 28 * v547);
  uint64_t v548 = *(unsigned int *)(v1071 + 4);
  uint64_t v549 = (28 * v548);
  if ((int)v549 >= 1) {
    bzero(v1110[0], 4 * (28 * v548));
  }
  if ((int)v432 >= 1)
  {
    float32x2_t v550 = (_DWORD *)v1144 + 2;
    float32x2_t v551 = (char *)v1110[0] + 28;
    uint64_t v552 = 14 * SHIDWORD(v1112);
    do
    {
      *(v551 - 7) = *(v550 - 14);
      float32x2_t v553 = &v551[v552];
      *(v553 - 7) = *v550;
      *(v551 - 6) = *(v550 - 13);
      *(v553 - 6) = v550[1];
      *(v551 - 5) = *(v550 - 12);
      *(v553 - 5) = v550[2];
      *(v551 - 4) = *(v550 - 11);
      *(v553 - 4) = v550[3];
      *(v551 - 3) = *(v550 - 10);
      *(v553 - 3) = v550[4];
      *(v551 - 2) = *(v550 - 9);
      *(v553 - 2) = v550[5];
      *(v551 - 1) = *(v550 - 8);
      *(v553 - 1) = v550[6];
      *float32x2_t v551 = *(v550 - 7);
      *float32x2_t v553 = v550[7];
      v551[1] = *(v550 - 6);
      v553[1] = v550[8];
      v551[2] = *(v550 - 5);
      v553[2] = v550[9];
      v551[3] = *(v550 - 4);
      v553[3] = v550[10];
      v551[4] = *(v550 - 3);
      v553[4] = v550[11];
      v551[5] = *(v550 - 2);
      v553[5] = v550[12];
      v551[6] = *(v550 - 1);
      v553[6] = v550[13];
      v550 += 98;
      v551 += 14;
      --v432;
    }
    while (v432);
  }
  if ((int)v548 >= 1)
  {
    uint64_t v554 = 0;
    uint64_t v555 = 14 * v548;
    float32x2_t v556 = v430;
    do
    {
      int v557 = *v556;
      v556 += 2;
      *(void *)&v1137[4 * (int)v554] = *(void *)(v429 + 4 * (14 * v557 - 14));
      *(void *)&v1137[4 * (int)v554 + 8] = *(void *)(v429 + 4 * (14 * v557 - 12));
      *(void *)&v1137[4 * (int)v554 + 16] = *(void *)(v429 + 4 * (14 * v557 - 10));
      *(void *)&v1137[4 * (int)v554 + 24] = *(void *)(v429 + 4 * (14 * v557 - 8));
      *(void *)&v1137[4 * (int)v554 + 32] = *(void *)(v429 + 4 * (14 * v557 - 6));
      *(void *)&v1137[4 * (int)v554 + 40] = *(void *)(v429 + 4 * (14 * v557 - 4));
      uint64_t v558 = 4 * ((int)v554 + 12);
      v554 += 14;
      *(void *)&v1137[v558] = *(void *)(v429 + 4 * (14 * v557 - 2));
    }
    while (v555 != v554);
    uint64_t v559 = 0;
    int v560 = 14 * v548;
    do
    {
      int v561 = *v430;
      v430 += 2;
      *(_DWORD *)&v1137[4 * v560 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 98));
      *(_DWORD *)&v1137[4 * v560 + 4 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 99));
      *(_DWORD *)&v1137[4 * v560 + 8 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 100));
      *(_DWORD *)&v1137[4 * v560 + 12 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 101));
      *(_DWORD *)&v1137[4 * v560 + 16 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 102));
      *(_DWORD *)&v1137[4 * v560 + 20 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 103));
      *(_DWORD *)&v1137[4 * v560 + 24 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 104));
      *(_DWORD *)&v1137[4 * v560 + 28 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 105));
      *(_DWORD *)&v1137[4 * v560 + 32 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 106));
      *(_DWORD *)&v1137[4 * v560 + 36 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 107));
      *(_DWORD *)&v1137[4 * v560 + 40 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 108));
      *(_DWORD *)&v1137[4 * v560 + 44 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 109));
      *(_DWORD *)&v1137[4 * v560 + 48 + 4 * (int)v559] = *(_DWORD *)(v429 + 4 * (14 * v561 + 110));
      int v562 = v560 + v559 + 13;
      v559 += 14;
      *(_DWORD *)&v1137[4 * v562] = *(_DWORD *)(v429 + 4 * (14 * v561 + 111));
    }
    while (v555 != v559);
  }
  int v563 = HIDWORD(v1112);
  if (v548 == HIDWORD(v1112))
  {
    LODWORD(v1112) = 14;
    HIDWORD(v1112) = v548;
    int v1113 = 2;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1110, 28 * v548);
    if ((int)v549 >= 1)
    {
      float32x2_t v564 = (char *)v1110[0];
      if (v549 < 8 || v1110[0] < &v1137[4 * v549] && v1137 < (char *)v1110[0] + 4 * v549)
      {
        uint64_t v565 = 0;
        goto LABEL_505;
      }
      uint64_t v565 = v549 & 0x7FFFFFF8;
      v705 = (float32x4_t *)((char *)v1110[0] + 16);
      v706 = (float32x4_t *)&v1138;
      uint64_t v707 = v549 & 0xFFFFFFF8;
      do
      {
        float32x4_t v708 = vsubq_f32(*v706, *v705);
        v705[-1] = vsubq_f32(v706[-1], v705[-1]);
        float32x4_t *v705 = v708;
        v705 += 2;
        v706 += 2;
        v707 -= 8;
      }
      while (v707);
      if (v565 != v549)
      {
LABEL_505:
        uint64_t v566 = v549 - v565;
        uint64_t v567 = 4 * v565;
        float32x2_t v568 = (float *)&v564[v567];
        float32x2_t v569 = (float *)&v1137[v567];
        do
        {
          float v570 = *v569++;
          *float32x2_t v568 = v570 - *v568;
          ++v568;
          --v566;
        }
        while (v566);
      }
    }
  }
  else
  {
    memset(v1157, 0, 17);
    if (HIDWORD(v1112) == 1) {
      uint64_t v571 = v548;
    }
    else {
      uint64_t v571 = HIDWORD(v1112);
    }
    LODWORD(v1157[3]) = 14;
    HIDWORD(v1157[3]) = v571;
    LODWORD(v1157[4]) = 2;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1157, 28 * v571);
    int v572 = HIDWORD(v1157[3]);
    if ((int)v571 >= 1)
    {
      uint64_t v573 = 0;
      float32x2_t v574 = (float *)v1110[0];
      float32x2_t v575 = (float *)v1157[0];
      int v576 = 13;
      int v577 = 13;
      do
      {
        v575[(int)v573] = *(float *)&v1137[4 * v577 - 52] - v574[v576 - 13];
        v575[(int)v573 + 1] = *(float *)&v1137[4 * v577 - 48] - v574[v576 - 12];
        v575[(int)v573 + 2] = *(float *)&v1137[4 * v577 - 44] - v574[v576 - 11];
        v575[(int)v573 + 3] = *(float *)&v1137[4 * v577 - 40] - v574[v576 - 10];
        v575[(int)v573 + 4] = *(float *)&v1137[4 * v577 - 36] - v574[v576 - 9];
        v575[(int)v573 + 5] = *(float *)&v1137[4 * v577 - 32] - v574[v576 - 8];
        v575[(int)v573 + 6] = *(float *)&v1137[4 * v577 - 28] - v574[v576 - 7];
        v575[(int)v573 + 7] = *(float *)&v1137[4 * v577 - 24] - v574[v576 - 6];
        v575[(int)v573 + 8] = *(float *)&v1137[4 * v577 - 20] - v574[v576 - 5];
        v575[(int)v573 + 9] = *(float *)&v1137[4 * v577 - 16] - v574[v576 - 4];
        v575[(int)v573 + 10] = *(float *)&v1137[4 * v577 - 12] - v574[v576 - 3];
        v575[(int)v573 + 11] = *(float *)&v1137[4 * v577 - 8] - v574[v576 - 2];
        v575[(int)v573 + 12] = *(float *)&v1137[4 * v577 - 4] - v574[v576 - 1];
        v575[(int)v573 + 13] = *(float *)&v1137[4 * v577] - v574[v576];
        v577 += 14 * (v548 != 1);
        v576 += 14 * (v563 != 1);
        v573 += 14;
      }
      while (14 * v571 != v573);
      uint64_t v578 = 0;
      int v579 = 14 * v548 + 13;
      int v580 = 14 * v563 + 13;
      int v581 = 14 * v572;
      do
      {
        v575[v581 + (int)v578] = *(float *)&v1137[4 * v579 - 52] - v574[v580 - 13];
        v575[v581 + 1 + (int)v578] = *(float *)&v1137[4 * v579 - 48] - v574[v580 - 12];
        v575[v581 + 2 + (int)v578] = *(float *)&v1137[4 * v579 - 44] - v574[v580 - 11];
        v575[v581 + 3 + (int)v578] = *(float *)&v1137[4 * v579 - 40] - v574[v580 - 10];
        v575[v581 + 4 + (int)v578] = *(float *)&v1137[4 * v579 - 36] - v574[v580 - 9];
        v575[v581 + 5 + (int)v578] = *(float *)&v1137[4 * v579 - 32] - v574[v580 - 8];
        v575[v581 + 6 + (int)v578] = *(float *)&v1137[4 * v579 - 28] - v574[v580 - 7];
        v575[v581 + 7 + (int)v578] = *(float *)&v1137[4 * v579 - 24] - v574[v580 - 6];
        v575[v581 + 8 + (int)v578] = *(float *)&v1137[4 * v579 - 20] - v574[v580 - 5];
        v575[v581 + 9 + (int)v578] = *(float *)&v1137[4 * v579 - 16] - v574[v580 - 4];
        v575[v581 + 10 + (int)v578] = *(float *)&v1137[4 * v579 - 12] - v574[v580 - 3];
        v575[v581 + 11 + (int)v578] = *(float *)&v1137[4 * v579 - 8] - v574[v580 - 2];
        v575[v581 + 12 + (int)v578] = *(float *)&v1137[4 * v579 - 4] - v574[v580 - 1];
        v575[v581 + 13 + (int)v578] = *(float *)&v1137[4 * v579] - v574[v580];
        v579 += 14 * (v548 != 1);
        v580 += 14 * (v563 != 1);
        v578 += 14;
      }
      while (14 * v571 != v578);
    }
    LODWORD(v1112) = 14;
    HIDWORD(v1112) = v572;
    int v1113 = 2;
    coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1110, 28 * v572);
    uint64_t v582 = HIDWORD(v1157[3]);
    float32x2_t v583 = (char *)v1157[0];
    if (SHIDWORD(v1157[3]) >= 1)
    {
      int v584 = HIDWORD(v1112);
      float32x2_t v585 = (char *)v1110[0];
      float32x2_t v586 = (char *)v1110[0] + 28;
      float32x2_t v587 = (char *)v1157[0] + 28;
      uint64_t v588 = HIDWORD(v1157[3]);
      do
      {
        *(v586 - 7) = *(v587 - 7);
        *(v586 - 6) = *(v587 - 6);
        *(v586 - 5) = *(v587 - 5);
        *(v586 - 4) = *(v587 - 4);
        *(v586 - 3) = *(v587 - 3);
        *(v586 - 2) = *(v587 - 2);
        *(v586 - 1) = *(v587 - 1);
        *float32x2_t v586 = *v587;
        v586[1] = v587[1];
        v586[2] = v587[2];
        v586[3] = v587[3];
        v586[4] = v587[4];
        v586[5] = v587[5];
        v586[6] = v587[6];
        v586 += 14;
        v587 += 14;
        --v588;
      }
      while (v588);
      float32x2_t v589 = &v585[56 * v584 + 28];
      float32x2_t v590 = &v583[56 * v582 + 28];
      do
      {
        *((_DWORD *)v589 - 7) = *((_DWORD *)v590 - 7);
        *((_DWORD *)v589 - 6) = *((_DWORD *)v590 - 6);
        *((_DWORD *)v589 - 5) = *((_DWORD *)v590 - 5);
        *((_DWORD *)v589 - 4) = *((_DWORD *)v590 - 4);
        *((_DWORD *)v589 - 3) = *((_DWORD *)v590 - 3);
        *((_DWORD *)v589 - 2) = *((_DWORD *)v590 - 2);
        *((_DWORD *)v589 - 1) = *((_DWORD *)v590 - 1);
        *(_DWORD *)float32x2_t v589 = *(_DWORD *)v590;
        *((_DWORD *)v589 + 1) = *((_DWORD *)v590 + 1);
        *((_DWORD *)v589 + 2) = *((_DWORD *)v590 + 2);
        *((_DWORD *)v589 + 3) = *((_DWORD *)v590 + 3);
        *((_DWORD *)v589 + 4) = *((_DWORD *)v590 + 4);
        *((_DWORD *)v589 + 5) = *((_DWORD *)v590 + 5);
        *((_DWORD *)v589 + 6) = *((_DWORD *)v590 + 6);
        v589 += 56;
        v590 += 56;
        --v582;
      }
      while (v582);
    }
    if (LOBYTE(v1157[2]) && v583) {
      MEMORY[0x25A2D62A0](v583, 0x1000C8052888210);
    }
  }
  LODWORD(v1108) = 14;
  HIDWORD(v1108) = HIDWORD(v1112);
  int v1109 = 2;
  unint64_t v591 = (28 * HIDWORD(v1112));
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1106, 28 * HIDWORD(v1112));
  if ((int)v591 >= 1)
  {
    unint64_t v592 = 0;
    float32x2_t v593 = (char *)v1110[0];
    uint64_t v594 = v1106[0];
    if (v591 < 8) {
      goto LABEL_530;
    }
    if (v1106[0] - (unint64_t)v1110[0] < 0x20) {
      goto LABEL_530;
    }
    unint64_t v592 = v591 & 0x7FFFFFF8;
    float32x2_t v595 = (float32x4_t *)(v1106[0] + 16);
    float32x2_t v596 = (float32x4_t *)((char *)v1110[0] + 16);
    uint64_t v597 = v591 & 0xFFFFFFF8;
    do
    {
      float32x4_t v598 = vmulq_f32(*v596, *v596);
      v595[-1] = vmulq_f32(v596[-1], v596[-1]);
      *float32x2_t v595 = v598;
      v595 += 2;
      v596 += 2;
      v597 -= 8;
    }
    while (v597);
    if (v592 != v591)
    {
LABEL_530:
      unint64_t v599 = v591 - v592;
      uint64_t v600 = 4 * v592;
      float32x2_t v601 = (float *)(v594 + v600);
      float32x2_t v602 = (float *)&v593[v600];
      do
      {
        float v603 = *v602++;
        *v601++ = v603 * v603;
        --v599;
      }
      while (v599);
    }
  }
  int v604 = HIDWORD(v1108);
  if (HIDWORD(v1108))
  {
    uint64_t v605 = 14 * SHIDWORD(v1108);
    LODWORD(v1097) = 14;
    HIDWORD(v1097) = HIDWORD(v1108);
    uint64_t result = coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1095, 14 * HIDWORD(v1108));
    if (v604 >= 1)
    {
      uint64_t v608 = v1106[0];
      unint64_t v609 = v1095[0];
      if ((int)v605 <= 1) {
        uint64_t v610 = 1;
      }
      else {
        uint64_t v610 = v605;
      }
      if (v610 < 8 || v1095[0] - v1106[0] <= 0x1FuLL)
      {
        uint64_t v612 = 0;
        goto LABEL_546;
      }
      uint64_t v612 = v610 & 0x7FFFFFF8;
      float32x2_t v613 = (_OWORD *)(v1095[0] + 16);
      float32x2_t v614 = (long long *)(v1106[0] + 16);
      uint64_t v615 = v612;
      do
      {
        long long v616 = *v614;
        *(v613 - 1) = *(v614 - 1);
        *float32x2_t v613 = v616;
        v613 += 2;
        v614 += 2;
        v615 -= 8;
      }
      while (v615);
      if (v612 != v610)
      {
LABEL_546:
        uint64_t v617 = v610 - v612;
        uint64_t v618 = 4 * v612;
        float32x2_t v619 = (_DWORD *)(v609 + 4 * v612);
        float32x2_t v620 = (int *)(v608 + v618);
        do
        {
          int v621 = *v620++;
          *v619++ = v621;
          --v617;
        }
        while (v617);
      }
      if (v610 <= 7 || v609 < v608 + 56 * v604 + 4 * v610 && v608 + 56 * v604 < v609 + 4 * v610)
      {
        uint64_t v622 = 0;
        goto LABEL_552;
      }
      uint64_t v622 = v610 & 0x7FFFFFF8;
      v701 = (float32x4_t *)(v608 + 56 * v604 + 16);
      v702 = (float32x4_t *)(v609 + 16);
      uint64_t v703 = v622;
      do
      {
        float32x4_t v607 = v701[-1];
        float32x4_t v704 = vaddq_f32(*v701, *v702);
        v702[-1] = vaddq_f32(v607, v702[-1]);
        float32x4_t *v702 = v704;
        v701 += 2;
        v702 += 2;
        v703 -= 8;
      }
      while (v703);
      if (v622 != v610)
      {
LABEL_552:
        uint64_t v623 = v610 - v622;
        float32x2_t v624 = (float *)(v608 + 4 * (v622 + v605));
        float32x2_t v625 = (float *)(v609 + 4 * v622);
        do
        {
          float v626 = *v624++;
          *float32x2_t v625 = v626 + *v625;
          ++v625;
          --v623;
        }
        while (v623);
      }
    }
  }
  else
  {
    uint64_t v1097 = 14;
    uint64_t result = coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1095, 0);
  }
  int v627 = HIDWORD(v1097);
  int v628 = 16 * HIDWORD(v1097);
  if (SHIDWORD(v1097) >= 1)
  {
    LODWORD(v629) = 14 * HIDWORD(v1097);
    uint64_t v630 = v1095[0];
    if (14 * HIDWORD(v1097) <= 1) {
      uint64_t v629 = 1;
    }
    else {
      uint64_t v629 = v629;
    }
    if (v629 < 8)
    {
      uint64_t v631 = 0;
      goto LABEL_563;
    }
    uint64_t v631 = v629 & 0x7FFFFFF8;
    float32x2_t v632 = (float32x4_t *)(v1095[0] + 16);
    uint64_t v633 = v631;
    do
    {
      float32x4_t v634 = vsqrtq_f32(*v632);
      v632[-1] = vsqrtq_f32(v632[-1]);
      *float32x2_t v632 = v634;
      v632 += 2;
      v633 -= 8;
    }
    while (v633);
    if (v631 != v629)
    {
LABEL_563:
      uint64_t v635 = v629 - v631;
      float32x2_t v636 = (float *)(v630 + 4 * v631);
      do
      {
        *float32x2_t v636 = sqrtf(*v636);
        ++v636;
        --v635;
      }
      while (v635);
    }
  }
  if (v1110[0]) {
    operator new[]();
  }
  memset(v1157, 0, 17);
  memset(v1123, 0, 17);
  if (!v591)
  {
    float32x2_t v637 = 0;
    goto LABEL_629;
  }
  LODWORD(v1157[3]) = v591;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1157, v591);
  if ((int)v591 >= 1) {
    bzero(v1157[0], 4 * v591);
  }
  *(_DWORD *)&v1123[24] = v591;
  uint64_t result = coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1123, v591);
  float32x2_t v637 = (int *)v1157[0];
  if ((int)v591 <= 1) {
    goto LABEL_630;
  }
  if (v591 - 2 < 6 || v1157[0] < (void *)(4 * v591) && (char *)v1157[0] + 4 * v591)
  {
    unint64_t v638 = 1;
LABEL_575:
    float32x2_t v639 = &v637[v638];
    float32x2_t v640 = (float *)(4 * v638);
    do
    {
      BOOL v641 = *(v640 - 1) > *v640;
      BOOL v642 = v641;
      if (*(v640 - 1) > *v640) {
        BOOL v641 = 1;
      }
      *(v639 - 1) = v641 + v638;
      *float32x2_t v639 = v638 + !v642;
      v638 += 2;
      v639 += 2;
      v640 += 2;
    }
    while (v638 < v591);
  }
  else
  {
    unint64_t v709 = ((v591 - 2) >> 1) + 1;
    int32x4_t v710 = (int32x4_t)xmmword_259120B70;
    v711.i64[0] = 0x100000001;
    v711.i64[1] = 0x100000001;
    v607.i64[0] = 0x800000008;
    v607.i64[1] = 0x800000008;
    v712 = (float *)v1157[0];
    v713 = 0;
    uint64_t v714 = v709 & 0x7FFFFFFFFFFFFFFCLL;
    int32x4_t v715 = (int32x4_t)xmmword_259120B70;
    do
    {
      float32x4x2_t v1160 = vld2q_f32(v713);
      v713 += 8;
      v1160.val[0] = (float32x4_t)vbicq_s8(vorrq_s8((int8x16_t)vcltzq_f32(v1160.val[1]), (int8x16_t)vcgezq_f32(v1160.val[1])), (int8x16_t)vcgeq_f32(v1160.val[1], v1160.val[0]));
      v1161.val[0] = (float32x4_t)vsubq_s32(v715, (int32x4_t)v1160.val[0]);
      v1161.val[1] = (float32x4_t)vaddq_s32(v710, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vmvn_s8((int8x8_t)vmovn_s32((int32x4_t)v1160.val[0]))), v711));
      vst2q_f32(v712, v1161);
      v712 += 8;
      int32x4_t v710 = vaddq_s32(v710, (int32x4_t)v607);
      int32x4_t v715 = vaddq_s32(v715, (int32x4_t)v607);
      v714 -= 4;
    }
    while (v714);
    if (v709 != (v709 & 0x7FFFFFFFFFFFFFFCLL))
    {
      unint64_t v638 = (2 * (v709 & 0x7FFFFFFFFFFFFFFCLL)) | 1;
      goto LABEL_575;
    }
  }
  if ((int)v591 <= 2) {
    goto LABEL_630;
  }
  int v643 = v591 | 1;
  float32x2_t v644 = v637 - 1;
  uint64_t v645 = *(void *)v1123;
  uint64_t v646 = *(void *)v1123 + 4;
  uint64_t v647 = *(void *)v1123 + 20;
  uint64_t v648 = *(void *)v1123 + 16;
  int v649 = 2;
  while (2)
  {
    int v650 = 2 * v649;
    int v651 = v649 | 1;
    if ((v649 | 1) > (int)v591) {
      goto LABEL_581;
    }
    LODWORD(result) = 1;
    while (2)
    {
      LODWORD(v652) = result + v650;
      if ((int)result + v650 >= v643) {
        uint64_t v652 = v643;
      }
      else {
        uint64_t v652 = v652;
      }
      uint64_t v653 = (v652 - result);
      if ((int)v653 < 1) {
        goto LABEL_584;
      }
      int v654 = 0;
      uint64_t v655 = (v651 - 1);
      int v656 = v652 - 2;
      int v657 = result;
      while (2)
      {
        int v659 = v637[(int)v655];
        int v660 = v637[v657 - 1];
        uint64_t v661 = v654;
        if (*(float *)(4 * (v660 - 1)) > *(float *)(4 * (v659 - 1)))
        {
          *(_DWORD *)(v645 + 4 * v654) = v659;
          uint64_t v658 = (v655 + 1);
          if (v655 + 2 != v652 || v657 >= v651) {
            goto LABEL_592;
          }
          uint64_t v672 = v657;
          unint64_t v673 = v651 - (uint64_t)v657;
          if (v673 >= 8)
          {
            uint64_t v674 = 4 * v661;
            if ((unint64_t)(v646 + 4 * v661 - (void)&v644[v657]) >= 0x20)
            {
              unint64_t v675 = v673 & 0xFFFFFFFFFFFFFFF8;
              v661 += v673 & 0xFFFFFFFFFFFFFFF8;
              v676 = (_OWORD *)(v647 + v674);
              v677 = &v637[v672 + 3];
              unint64_t v678 = v673 & 0xFFFFFFFFFFFFFFF8;
              do
              {
                long long v679 = *(_OWORD *)v677;
                *(v676 - 1) = *((_OWORD *)v677 - 1);
                _OWORD *v676 = v679;
                v676 += 2;
                v677 += 8;
                v678 -= 8;
              }
              while (v678);
              if (v673 == v675) {
                goto LABEL_615;
              }
              v672 += v675;
            }
          }
          uint64_t v680 = v651 - v672;
          v681 = &v644[v672];
          uint64_t v682 = v661;
          do
          {
            LODWORD(v661) = v682 + 1;
            int v683 = *v681++;
            *(_DWORD *)(v646 + 4 * v682++) = v683;
            --v680;
          }
          while (v680);
LABEL_615:
          int v654 = v661;
          int v657 = v651;
          goto LABEL_592;
        }
        *(_DWORD *)(v645 + 4 * v654) = v660;
        ++v657;
        int v662 = v655 + 1;
        if ((int)v655 + 1 < (int)v652 && v657 == v651)
        {
          uint64_t v663 = (v656 - v655);
          if (v663 < 0xB) {
            goto LABEL_603;
          }
          if (v656 < (int)v655) {
            goto LABEL_603;
          }
          uint64_t v664 = 4 * v661;
          if ((unint64_t)(v646 + 4 * v661 - (void)&v637[(int)v655]) < 0x20) {
            goto LABEL_603;
          }
          uint64_t v665 = v663 + 1;
          uint64_t v666 = (v663 + 1) & 0x1FFFFFFF8;
          v661 += v666;
          v667 = (_OWORD *)(v647 + v664);
          int v668 = v655;
          uint64_t v669 = v666;
          do
          {
            v670 = &v637[v668];
            long long v671 = *((_OWORD *)v670 + 1);
            *(v667 - 1) = *(_OWORD *)v670;
            _OWORD *v667 = v671;
            v667 += 2;
            v668 += 8;
            v669 -= 8;
          }
          while (v669);
          uint64_t v655 = (v655 + v666);
          if (v665 != v666)
          {
            v662 += v666;
            do
            {
LABEL_603:
              *(_DWORD *)(v646 + 4 * v661++) = v637[(int)v655];
              LODWORD(v655) = v662++;
            }
            while (v652 != v662);
            uint64_t v655 = (v662 - 1);
          }
          int v654 = v661;
          int v657 = v651;
        }
        uint64_t v658 = v655;
LABEL_592:
        ++v654;
        uint64_t v655 = v658;
        if (v654 < (int)v653) {
          continue;
        }
        break;
      }
      if (v653 <= 0xF
        || (int v684 = result - 1, (int)v652 - 2 < (int)result - 1)
        || (unint64_t)&v637[v684] - v645 < 0x20)
      {
        uint64_t v685 = 0;
        goto LABEL_620;
      }
      uint64_t v685 = v653 & 0x7FFFFFF8;
      v690 = (long long *)v648;
      uint64_t v691 = v653 & 0xFFFFFFF8;
      do
      {
        long long v692 = *v690;
        v693 = &v637[v684];
        *(_OWORD *)v693 = *(v690 - 1);
        *((_OWORD *)v693 + 1) = v692;
        v690 += 2;
        v684 += 8;
        v691 -= 8;
      }
      while (v691);
      if (v685 != v653)
      {
LABEL_620:
        uint64_t v686 = v685 - v653;
        int v687 = result + v685 - 1;
        v688 = (int *)(v645 + 4 * v685);
        do
        {
          int v689 = *v688++;
          v637[v687++] = v689;
          _CF = __CFADD__(v686++, 1);
        }
        while (!_CF);
      }
LABEL_584:
      int v651 = v652 + v649;
      uint64_t result = v652;
      if ((int)v652 + v649 <= (int)v591) {
        continue;
      }
      break;
    }
LABEL_581:
    v649 *= 2;
    if (v650 < (int)v591) {
      continue;
    }
    break;
  }
LABEL_630:
  if ((int)v591 < 1)
  {
LABEL_629:
    float v694 = *(float *)&rtNaNF;
    goto LABEL_663;
  }
  if (v591 == 1)
  {
    uint64_t v695 = *v637;
    goto LABEL_662;
  }
  double v696 = (double)(int)v591 * 0.99;
  int v697 = llround(v696);
  if ((int)v591 <= v697)
  {
    uint64_t v695 = v637[(v591 - 1)];
LABEL_662:
    float v694 = *(float *)(4 * v695 - 4);
  }
  else
  {
    v698 = &v637[v697];
    v607.i32[0] = *(_DWORD *)(4 * *(v698 - 1) - 4);
    double v699 = v696 - (double)v697;
    float v700 = v699 + 0.5;
    *(float *)&double v699 = 0.5 - v699;
    float v694 = (float)(v607.f32[0] * *(float *)&v699) + (float)(*(float *)(4 * *v698 - 4) * v700);
  }
LABEL_663:
  if (v1123[16])
  {
    uint64_t result = *(void *)v1123;
    if (*(void *)v1123) {
      uint64_t result = MEMORY[0x25A2D62A0](*(void *)v1123, 0x1000C8052888210);
    }
  }
  if (LOBYTE(v1157[2]) && v637) {
    uint64_t result = MEMORY[0x25A2D62A0](v637, 0x1000C8052888210);
  }
  *(double *)uint64_t v1067 = v694;
  int v729 = v628 - 2 * v627;
  if (v729 >= 1)
  {
    int v730 = 16;
    if (v729 >= 17)
    {
      do
      {
        if (v730 <= 0x3FFFFFFF) {
          v730 *= 2;
        }
        else {
          int v730 = 0x7FFFFFFF;
        }
      }
      while (v730 < v729);
    }
    operator new[]();
  }
  if (v627 >= 1)
  {
    v731 = 0;
    do
    {
      BOOL *v731 = *(float *)(v1095[0] + 4 * (void)v731) > 5.0;
      ++v731;
    }
    while (v731 != (BOOL *)1);
  }
  if (v729) {
    int v732 = MEMORY[0];
  }
  else {
    int v732 = 0;
  }
  double v733 = (double)v732;
  *(double *)(v1067 + 8) = (double)v732;
  if (!HIDWORD(v1091))
  {
    double v734 = 0.0;
    goto LABEL_699;
  }
  if (SHIDWORD(v1091) >= 1025)
  {
    int v735 = WORD2(v1091) & 0x3FF;
    if ((v1091 & 0x3FF00000000) != 0)
    {
      int v737 = (HIDWORD(v1091) >> 10) + 1;
    }
    else
    {
      int v735 = 1024;
      int v737 = HIDWORD(v1091) >> 10;
    }
    LOWORD(v733) = *(_WORD *)v1089[0];
    double v734 = (double)*(unint64_t *)&v733;
    uint64_t v736 = 1025;
    uint64_t v739 = 1023;
    goto LABEL_692;
  }
  LOWORD(v733) = *(_WORD *)v1089[0];
  double v734 = (double)*(unint64_t *)&v733;
  if (SHIDWORD(v1091) >= 2)
  {
    int v735 = 0;
    uint64_t v736 = HIDWORD(v1091) + 1;
    int v737 = 1;
    if (HIDWORD(v1091) < 0x11)
    {
      uint64_t v738 = 2;
LABEL_696:
      uint64_t v766 = v736 - v738;
      v767 = (unsigned __int16 *)(v1089[0] + 2 * v738 - 2);
      do
      {
        unsigned int v768 = *v767++;
        v765.f64[0] = (double)v768;
        double v734 = v734 + (double)v768;
        --v766;
      }
      while (v766);
      goto LABEL_698;
    }
    uint64_t v739 = HIDWORD(v1091) - 1;
LABEL_692:
    unint64_t v740 = v739 & 0xFFFFFFFFFFFFFFF0;
    float64x2_t v741 = 0uLL;
    float64x2_t v742 = (float64x2_t)*(unint64_t *)&v734;
    v743 = (uint16x4_t *)(v1089[0] + 18);
    unint64_t v744 = v739 & 0xFFFFFFFFFFFFFFF0;
    float64x2_t v745 = 0uLL;
    float64x2_t v746 = 0uLL;
    float64x2_t v747 = 0uLL;
    float64x2_t v748 = 0uLL;
    float64x2_t v749 = 0uLL;
    float64x2_t v750 = 0uLL;
    do
    {
      uint16x8_t v751 = *(uint16x8_t *)v743[-2].i8;
      uint32x4_t v752 = vmovl_u16(*(uint16x4_t *)v751.i8);
      v753.i64[0] = v752.u32[0];
      v753.i64[1] = v752.u32[1];
      float64x2_t v754 = vcvtq_f64_u64(v753);
      v753.i64[0] = v752.u32[2];
      v753.i64[1] = v752.u32[3];
      float64x2_t v755 = vcvtq_f64_u64(v753);
      uint32x4_t v756 = vmovl_high_u16(v751);
      v753.i64[0] = v756.u32[0];
      v753.i64[1] = v756.u32[1];
      float64x2_t v757 = vcvtq_f64_u64(v753);
      v753.i64[0] = v756.u32[2];
      v753.i64[1] = v756.u32[3];
      float64x2_t v758 = vcvtq_f64_u64(v753);
      uint32x4_t v759 = vmovl_u16(*v743);
      v753.i64[0] = v759.u32[0];
      v753.i64[1] = v759.u32[1];
      float64x2_t v760 = vcvtq_f64_u64(v753);
      v753.i64[0] = v759.u32[2];
      v753.i64[1] = v759.u32[3];
      float64x2_t v761 = vcvtq_f64_u64(v753);
      uint32x4_t v762 = vmovl_high_u16(*(uint16x8_t *)v743->i8);
      v753.i64[0] = v762.u32[0];
      v753.i64[1] = v762.u32[1];
      float64x2_t v763 = vcvtq_f64_u64(v753);
      v753.i64[0] = v762.u32[2];
      v753.i64[1] = v762.u32[3];
      float64x2_t v746 = vaddq_f64(v746, v758);
      float64x2_t v745 = vaddq_f64(v745, v757);
      float64x2_t v741 = vaddq_f64(v741, v755);
      float64x2_t v742 = vaddq_f64(v742, v754);
      float64x2_t v750 = vaddq_f64(v750, vcvtq_f64_u64(v753));
      float64x2_t v749 = vaddq_f64(v749, v763);
      float64x2_t v748 = vaddq_f64(v748, v761);
      float64x2_t v747 = vaddq_f64(v747, v760);
      v743 += 4;
      v744 -= 16;
    }
    while (v744);
    float32x4_t v607 = (float32x4_t)vaddq_f64(v748, v741);
    float64x2_t v764 = vaddq_f64(vaddq_f64(v747, v742), vaddq_f64(v749, v745));
    float64x2_t v765 = vaddq_f64((float64x2_t)v607, vaddq_f64(v750, v746));
    double v734 = vaddvq_f64(vaddq_f64(v764, v765));
    if (v739 != v740)
    {
      uint64_t v738 = v740 | 2;
      goto LABEL_696;
    }
LABEL_698:
    if (v737 >= 2)
    {
      int v777 = 0;
      int v778 = 1025;
      int v779 = 1023;
      uint64_t v780 = 2;
      do
      {
        LOWORD(v765.f64[0]) = *(_WORD *)(v1089[0] + 2 * ((v780 << 10) - 1024));
        v765.f64[0] = (double)*(unint64_t *)&v765.f64[0];
        if (v780 == v737) {
          int v781 = v735;
        }
        else {
          int v781 = 1024;
        }
        if (v781 < 2) {
          goto LABEL_740;
        }
        uint64_t v782 = (v781 + 1);
        uint64_t result = v782 - 2;
        if ((unint64_t)(v782 - 2) > 0xF && v781 + (v777 << 10) + 1025 - 2 >= (v777 << 10) + 1025)
        {
          unint64_t v784 = result & 0xFFFFFFFFFFFFFFF0;
          float64x2_t v785 = 0uLL;
          float64x2_t v786 = (float64x2_t)*(unint64_t *)&v765.f64[0];
          int v787 = v778;
          unint64_t v788 = result & 0xFFFFFFFFFFFFFFF0;
          float64x2_t v789 = 0uLL;
          float64x2_t v790 = 0uLL;
          float64x2_t v791 = 0uLL;
          float64x2_t v792 = 0uLL;
          float64x2_t v793 = 0uLL;
          float64x2_t v794 = 0uLL;
          do
          {
            uint64_t v795 = v1089[0] + 2 * v787;
            uint16x8_t v796 = *(uint16x8_t *)(v795 + 16);
            uint32x4_t v797 = vmovl_u16(*(uint16x4_t *)v795);
            v798.i64[0] = v797.u32[0];
            v798.i64[1] = v797.u32[1];
            float64x2_t v799 = vcvtq_f64_u64(v798);
            v798.i64[0] = v797.u32[2];
            v798.i64[1] = v797.u32[3];
            float64x2_t v800 = vcvtq_f64_u64(v798);
            uint32x4_t v801 = vmovl_high_u16(*(uint16x8_t *)v795);
            v798.i64[0] = v801.u32[0];
            v798.i64[1] = v801.u32[1];
            float64x2_t v802 = vcvtq_f64_u64(v798);
            v798.i64[0] = v801.u32[2];
            v798.i64[1] = v801.u32[3];
            float64x2_t v803 = vcvtq_f64_u64(v798);
            uint32x4_t v804 = vmovl_u16(*(uint16x4_t *)v796.i8);
            v798.i64[0] = v804.u32[0];
            v798.i64[1] = v804.u32[1];
            float64x2_t v805 = vcvtq_f64_u64(v798);
            v798.i64[0] = v804.u32[2];
            v798.i64[1] = v804.u32[3];
            float64x2_t v806 = vcvtq_f64_u64(v798);
            uint32x4_t v807 = vmovl_high_u16(v796);
            v798.i64[0] = v807.u32[0];
            v798.i64[1] = v807.u32[1];
            float64x2_t v808 = vcvtq_f64_u64(v798);
            v798.i64[0] = v807.u32[2];
            v798.i64[1] = v807.u32[3];
            float64x2_t v790 = vaddq_f64(v790, v803);
            float64x2_t v789 = vaddq_f64(v789, v802);
            float64x2_t v785 = vaddq_f64(v785, v800);
            float64x2_t v786 = vaddq_f64(v786, v799);
            float64x2_t v794 = vaddq_f64(v794, vcvtq_f64_u64(v798));
            float64x2_t v793 = vaddq_f64(v793, v808);
            float64x2_t v792 = vaddq_f64(v792, v806);
            float64x2_t v791 = vaddq_f64(v791, v805);
            v787 += 16;
            v788 -= 16;
          }
          while (v788);
          float64x2_t v765 = vaddq_f64(vaddq_f64(v791, v786), vaddq_f64(v793, v789));
          float32x4_t v607 = (float32x4_t)vaddq_f64(vaddq_f64(v792, v785), vaddq_f64(v794, v790));
          v765.f64[0] = vaddvq_f64(vaddq_f64(v765, (float64x2_t)v607));
          if (result == v784) {
            goto LABEL_740;
          }
          uint64_t result = v784 | 2;
        }
        else
        {
          uint64_t result = 2;
        }
        uint64_t v783 = v782 - result;
        LODWORD(result) = v779 + result;
        do
        {
          v607.i16[0] = *(_WORD *)(v1089[0] + 2 * (int)result);
          *(double *)v607.i64 = (double)v607.u64[0];
          v765.f64[0] = v765.f64[0] + *(double *)v607.i64;
          uint64_t result = (result + 1);
          --v783;
        }
        while (v783);
LABEL_740:
        ++v780;
        double v734 = v765.f64[0] + v734;
        ++v777;
        v778 += 1024;
        v779 += 1024;
      }
      while (v780 != v737 + 1);
    }
  }
LABEL_699:
  *(double *)(v1067 + 16) = v734;
  *(double *)(v1067 + 24) = v532;
  *(float64x2_t *)(v1067 + 32) = vcvtq_f64_f32(*(float32x2_t *)&v1125[0]);
  *(double *)(v1067 + 48) = *((float *)v1125 + 2);
  *(float64x2_t *)(v1067 + 56) = vcvtq_f64_f32(vmul_f32(v1124, (float32x2_t)vdup_n_s32(0x3A83126Fu)));
  if (v1090)
  {
    uint64_t result = v1089[0];
    if (v1089[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1089[0], 0x1000C80BDFB0063);
    }
  }
  if (v1093)
  {
    uint64_t result = v1092[0];
    if (v1092[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1092[0], 0x1000C8052888210);
    }
  }
  if (v1096)
  {
    uint64_t result = v1095[0];
    if (v1095[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1095[0], 0x1000C8052888210);
    }
  }
  if (v1099)
  {
    uint64_t result = (uint64_t)v1098[0];
    if (v1098[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1098[0], 0x1000C8052888210);
    }
  }
  if (v1103)
  {
    uint64_t result = v1102[0];
    if (v1102[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1102[0], 0x1000C8052888210);
    }
  }
  if (v1107)
  {
    uint64_t result = v1106[0];
    if (v1106[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1106[0], 0x1000C8052888210);
    }
  }
  if (v1111)
  {
    uint64_t result = (uint64_t)v1110[0];
    if (v1110[0]) {
      uint64_t result = MEMORY[0x25A2D62A0](v1110[0], 0x1000C8052888210);
    }
  }
  if (v1116)
  {
    uint64_t v769 = v1114;
    if (v1114)
    {
      uint64_t v770 = *(void *)(v1114 - 8);
      if (v770)
      {
        uint64_t v771 = 32 * v770;
        do
        {
          if (*(unsigned char *)(v769 + v771 - 16))
          {
            uint64_t v772 = *(void *)(v769 + v771 - 32);
            if (v772) {
              MEMORY[0x25A2D62A0](v772, 0x1000C8052888210);
            }
          }
          v771 -= 32;
        }
        while (v771);
      }
      uint64_t result = MEMORY[0x25A2D62A0](v769 - 16, 0x1080C8075AFF985);
    }
  }
  if (v1120)
  {
    uint64_t v773 = v1118;
    if (v1118)
    {
      uint64_t v774 = *(void *)(v1118 - 8);
      if (v774)
      {
        uint64_t v775 = 32 * v774;
        do
        {
          if (*(unsigned char *)(v773 + v775 - 16))
          {
            uint64_t v776 = *(void *)(v773 + v775 - 32);
            if (v776) {
              MEMORY[0x25A2D62A0](v776, 0x1000C8052888210);
            }
          }
          v775 -= 32;
        }
        while (v775);
      }
      return MEMORY[0x25A2D62A0](v773 - 16, 0x1080C808A25AF7CLL);
    }
  }
  return result;
}

void sub_2590ED4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (LOBYTE(STACK[0x18B0]) && STACK[0x18A0]) {
    MEMORY[0x25A2D62A0](STACK[0x18A0], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x18D0]) && STACK[0x18C0]) {
    MEMORY[0x25A2D62A0](STACK[0x18C0], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x18F0]) && STACK[0x18E0]) {
    MEMORY[0x25A2D62A0](STACK[0x18E0], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x290]) && STACK[0x280]) {
    MEMORY[0x25A2D62A0](STACK[0x280], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x1918]) && STACK[0x1908]) {
    MEMORY[0x25A2D62A0](STACK[0x1908], 0x1000C8052888210);
  }
  if (a51 && a49) {
    MEMORY[0x25A2D62A0](a49, 0x1000C80BDFB0063);
  }
  if (a55 && a53) {
    MEMORY[0x25A2D62A0](a53, 0x1000C8052888210);
  }
  if (a59 && a57) {
    MEMORY[0x25A2D62A0](a57, 0x1000C8052888210);
  }
  if (a63 && a61) {
    MEMORY[0x25A2D62A0](a61, 0x1000C8052888210);
  }
  if (a68 && a66) {
    MEMORY[0x25A2D62A0](a66, 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x200]) && a71) {
    MEMORY[0x25A2D62A0](a71, 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x228]))
  {
    if (STACK[0x218]) {
      MEMORY[0x25A2D62A0](STACK[0x218], 0x1000C8052888210);
    }
  }
  coder::array<cell_wrap_1,2>::~array((uint64_t *)&STACK[0x240]);
  coder::array<cell_wrap_0,2>::~array((uint64_t *)&STACK[0x260]);
  _Unwind_Resume(a1);
}

uint64_t coder::detail::data_ptr<cell_wrap_0,int>::reserve(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 12) < a2) {
    operator new[]();
  }
  return result;
}

uint64_t coder::detail::data_ptr<cell_wrap_1,int>::reserve(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 12) < a2) {
    operator new[]();
  }
  return result;
}

void *findSpotsPeaksDan(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v1341 = v7;
  uint64_t v1302 = v8;
  float v10 = v9;
  unsigned int v11 = (unsigned int *)v4;
  uint64_t v1444 = *MEMORY[0x263EF8340];
  v1378[0] = 0;
  v1378[1] = 0;
  char v1379 = 0;
  uint64_t v1380 = 0;
  v1375[0] = 0;
  v1375[1] = 0;
  char v1376 = 0;
  unsigned int v1377 = 0;
  v1372[0] = 0;
  v1372[1] = 0;
  char v1373 = 0;
  unsigned int v1374 = 0;
  v1369[1] = 0;
  v1369[0] = 0;
  char v1370 = 0;
  int v1371 = 0;
  v1366[1] = 0;
  v1366[0] = 0;
  char v1367 = 0;
  unsigned int v1368 = 0;
  v1363[1] = 0;
  v1363[0] = 0;
  char v1364 = 0;
  unsigned int v1365 = 0;
  v1360[1] = 0;
  v1360[0] = 0;
  char v1361 = 0;
  uint64_t v1362 = 0;
  *(float *)&int v1359 = 0.0;
  uint64_t v12 = (int *)(int)(v6 * 14.0);
  int v1358 = (int)v12;
  if ((int)v12 < 1) {
    goto LABEL_5;
  }
  bzero(v1390, 4 * (int)(v6 * 14.0));
  bzero(v1394, 4 * v12);
  for (uint64_t i = 0; (int *)i != v12; coder::internal::sortedInsertion(i, v14, v1394, (float *)&v1359, v12, v1390, v5))
  {
    int v1359 = i;
    float v14 = *(float *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[i++];
  }
  if ((int)v12 <= 9071)
  {
LABEL_5:
    uint64_t v16 = 0;
    do
    {
      int v1358 = (int)v12;
      coder::internal::sortedInsertion((v12 + v16 + 1), *(float *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[(int)v12 + v16], v1394, (float *)&v1358, v12, v1390, v5);
      ++v16;
    }
    while (9072 - (int)v12 != v16);
  }
  uint64_t v17 = 0;
  uint64_t v18 = (float32x4_t *)(v11 + 65);
  v15.f32[0] = v1394[(int)v12 - 1];
  float32x4_t v1356 = v15;
  uint64_t v19 = &v1420;
  do
  {
    int8x16_t v20 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v11[v17 + 357]);
    int8x16_t v21 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v11[v17 + 353]);
    *(v19 - 3) = (__int128)vextq_s8(v20, v20, 8uLL);
    *(v19 - 2) = (__int128)vextq_s8(v21, v21, 8uLL);
    int8x16_t v22 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v11[v17 + 349]);
    int8x16_t v23 = vextq_s8(v22, v22, 8uLL);
    int8x16_t v24 = (int8x16_t)vrev64q_s32(*(int32x4_t *)&v11[v17 + 345]);
    *(v19 - 1) = (__int128)v23;
    *uint64_t v19 = (__int128)vextq_s8(v24, v24, 8uLL);
    *((int32x2_t *)v19 + 2) = vrev64_s32(*(int32x2_t *)&v11[v17 + 343]);
    *((_DWORD *)v19 + 6) = v11[v17 + 342];
    v17 -= 19;
    uint64_t v19 = (long long *)((char *)v19 + 76);
  }
  while (v17 != -361);
  bzero(utils::normxcorr2_lim(float const*,float const*,float,double *)::xcorr_TA, 0xC8D0uLL);
  unint64_t v26 = 0;
  float32x4_t v27 = utils::normxcorr2_lim(float const*,float const*,float,double *)::xcorr_TA;
  do
  {
    LODWORD(v28) = 18 - v26;
    if (v26 <= 0x12) {
      unint64_t v28 = v28;
    }
    else {
      unint64_t v28 = 0;
    }
    LODWORD(v29) = 125 - v26;
    if (v26 <= 0x6B) {
      unint64_t v29 = 18;
    }
    else {
      unint64_t v29 = v29;
    }
    if ((int)v28 <= (int)v29)
    {
      do
      {
        unint64_t v30 = 0;
        uint64_t v31 = (float32x4_t *)((char *)spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b
                            + ((uint64_t)(0x5400000000 * (v28 + v26) - 0x5E800000000) >> 30));
        float32x4_t v32 = *v31;
        float32x4_t v33 = v31[1];
        float32x4_t v34 = v31[2];
        float32x4_t v35 = v31[3];
        float32x4_t v36 = v31[4];
        float32x4_t v37 = v31[5];
        float32x4_t v38 = v31[6];
        float32x4_t v39 = v31[7];
        float32x4_t v40 = v31[8];
        float32x4_t v41 = v31[9];
        float32x4_t v42 = v31[10];
        float32x4_t v43 = v31[11];
        float32x4_t v44 = v31[12];
        float32x4_t v45 = v31[13];
        float32x4_t v46 = v31[14];
        float32x4_t v47 = v31[15];
        float32x4_t v48 = v31[16];
        float32x4_t v49 = v31[17];
        float32x4_t v50 = v31[18];
        float32x4_t v51 = v31[19];
        float32x4_t v52 = v31[20];
        uint64_t v25 = (float *)&v1417 + ((uint64_t)(0x16800000000 - 0x1300000000 * v28) >> 32);
        do
        {
          float v53 = v25[v30];
          uint64_t v54 = (char *)&v27[v30];
          float32x4_t v55 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 22], v33, v53);
          *(float32x4_t *)(v54 + 72) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 18], v32, v53);
          *(float32x4_t *)(v54 + 88) = v55;
          float32x4_t v56 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 30], v35, v53);
          *(float32x4_t *)(v54 + 104) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 26], v34, v53);
          *(float32x4_t *)(v54 + 120) = v56;
          float32x4_t v57 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 38], v37, v53);
          *(float32x4_t *)(v54 + 136) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 34], v36, v53);
          *(float32x4_t *)(v54 + 152) = v57;
          float32x4_t v58 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 46], v39, v53);
          *(float32x4_t *)(v54 + 168) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 42], v38, v53);
          *(float32x4_t *)(v54 + 184) = v58;
          float32x4_t v59 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 54], v41, v53);
          *(float32x4_t *)(v54 + 200) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 50], v40, v53);
          *(float32x4_t *)(v54 + 216) = v59;
          float32x4_t v60 = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 62], v43, v53);
          *(float32x4_t *)(v54 + 232) = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 58], v42, v53);
          *(float32x4_t *)(v54 + 248) = v60;
          uint64_t v61 = (float32x4_t *)&v27[v30 + 70];
          float32x4_t v62 = vmlaq_n_f32(*v61, v45, v53);
          *(float32x4_t *)&v27[v30 + 66] = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 66], v44, v53);
          *uint64_t v61 = v62;
          float v63 = (float32x4_t *)&v27[v30 + 78];
          float32x4_t v64 = vmlaq_n_f32(*v63, v47, v53);
          *(float32x4_t *)&v27[v30 + 74] = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 74], v46, v53);
          float32x4_t *v63 = v64;
          uint64_t v65 = (float32x4_t *)&v27[v30 + 86];
          float32x4_t v66 = vmlaq_n_f32(*v65, v49, v53);
          *(float32x4_t *)&v27[v30 + 82] = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 82], v48, v53);
          *uint64_t v65 = v66;
          uint64_t v67 = (float32x4_t *)&v27[v30 + 94];
          float32x4_t v68 = vmlaq_n_f32(*v67, v51, v53);
          *(float32x4_t *)&v27[v30 + 90] = vmlaq_n_f32(*(float32x4_t *)&v27[v30 + 90], v50, v53);
          *uint64_t v67 = v68;
          unint64_t v69 = (float32x4_t *)&v27[v30 + 98];
          --v30;
          float32x4_t *v69 = vmlaq_n_f32(*v69, v52, v53);
        }
        while (v30 != 0x3FFFFFFFFFFFFFEDLL);
        _CF = v28++ >= v29;
      }
      while (!_CF);
    }
    ++v26;
    v27 += 102;
  }
  while (v26 != 126);
  utils::local_sum((utils *)spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b, utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A, v25);
  unint64_t v71 = 0x3FFFFFFFFFFFCDD0uLL;
  do
  {
    float32x4_t v72 = vmulq_f32(*(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v71 + 12852], *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v71 + 12852]);
    float32x2_t v73 = (int *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::x[v71];
    *((float32x4_t *)v73 + 3212) = vmulq_f32(*(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v71 + 12848], *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v71 + 12848]);
    *((float32x4_t *)v73 + 3213) = v72;
    v71 += 8;
  }
  while (v71 * 4);
  xmmword_26A15CB48 = (__int128)vmulq_f32((float32x4_t)xmmword_26A150278, (float32x4_t)xmmword_26A150278);
  unint64_t v74 = 0x3FFFFFFFFFFFDC90uLL;
  do
  {
    float32x4_t v75 = vmulq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v74 + 9076], *(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v74 + 9076]);
    unint64_t v76 = (float32x4_t *)&v1434[v74 * 4 - 4];
    v76[2268] = vmulq_f32(*(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v74 + 9072], *(float32x4_t *)&spot_finder_peridot(coder::array<float,2> const&,short,long const*,int const*,float *,unsigned short *,float *,struct0_T *)::b[v74 + 9072]);
    v76[2269] = v75;
    v74 += 8;
  }
  while (v74 * 4);
  utils::local_sum((utils *)&v1433, utils::normxcorr2_lim(float const*,float const*,float,double *)::diff_local_sums, v70);
  unint64_t v77 = 0x3FFFFFFFFFFFCDCCuLL;
  float32x4_t v78 = (float32x4_t)vdupq_n_s32(0xBB358A48);
  do
  {
    float32x4_t v79 = vmlaq_f32(*(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::diff_local_sums[v77 + 12852], v78, *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::x[v77 + 12852]);
    *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::diff_local_sums[v77 + 12852] = v79;
    *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v77 + 12852] = vsqrtq_f32(vmaxnmq_f32(v79, (float32x4_t)0));
    v77 += 4;
  }
  while (v77 * 4);
  float32x4_t v80 = (float32x4_t)*v11;
  float32x4_t v81 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 293), vaddq_f32(*(float32x4_t *)(v11 + 285), vaddq_f32(*(float32x4_t *)(v11 + 277), vaddq_f32(*(float32x4_t *)(v11 + 269), vaddq_f32(*(float32x4_t *)(v11 + 261), vaddq_f32(*(float32x4_t *)(v11 + 253), vaddq_f32(*(float32x4_t *)(v11 + 245), *(float32x4_t *)(v11 + 237)))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 229), vaddq_f32(*(float32x4_t *)(v11 + 221), vaddq_f32(
                  *(float32x4_t *)(v11 + 213),
                  vaddq_f32(*(float32x4_t *)(v11 + 205), vaddq_f32(*(float32x4_t *)(v11 + 197), vaddq_f32(*(float32x4_t *)(v11 + 189), *(float32x4_t *)(v11 + 181))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 173), vaddq_f32(*(float32x4_t *)(v11 + 165), vaddq_f32(*(float32x4_t *)(v11 + 157), vaddq_f32(*(float32x4_t *)(v11 + 149), vaddq_f32(*(float32x4_t *)(v11 + 141), *(float32x4_t *)(v11 + 133)))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 125), vaddq_f32(*(float32x4_t *)(v11 + 117),
                    vaddq_f32(*(float32x4_t *)(v11 + 109), vaddq_f32(*(float32x4_t *)(v11 + 101), *(float32x4_t *)(v11 + 93))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 85), vaddq_f32(*(float32x4_t *)(v11 + 77), vaddq_f32(*(float32x4_t *)(v11 + 69), *(float32x4_t *)(v11 + 61)))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 53), vaddq_f32(*(float32x4_t *)(v11 + 45), *(float32x4_t *)(v11 + 37))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 29), *(float32x4_t *)(v11 + 21)), vaddq_f32(*(float32x4_t *)(v11 + 13), *(float32x4_t *)(v11 + 5)))))))));
  float32x4_t v83 = *(float32x4_t *)(v11 + 353);
  float32x4_t v82 = vaddq_f32(v83, vaddq_f32(*(float32x4_t *)(v11 + 337), vaddq_f32(*(float32x4_t *)(v11 + 321), vaddq_f32(*(float32x4_t *)(v11 + 305), vaddq_f32(*(float32x4_t *)(v11 + 289), vaddq_f32(*(float32x4_t *)(v11 + 273), vaddq_f32(*(float32x4_t *)(v11 + 257), vaddq_f32(*(float32x4_t *)(v11 + 241), vaddq_f32(*(float32x4_t *)(v11 + 225), vaddq_f32(*(float32x4_t *)(v11 + 209),
                            vaddq_f32(*(float32x4_t *)(v11 + 193), vaddq_f32(*(float32x4_t *)(v11 + 177), vaddq_f32(*(float32x4_t *)(v11 + 161), vaddq_f32(*(float32x4_t *)(v11 + 145), vaddq_f32(*(float32x4_t *)(v11 + 129), vaddq_f32(*(float32x4_t *)(v11 + 113), vaddq_f32(*(float32x4_t *)(v11 + 97), vaddq_f32(*(float32x4_t *)(v11 + 81), vaddq_f32(*v18, vaddq_f32(*(float32x4_t *)(v11 + 49),
                                                vaddq_f32(*(float32x4_t *)(v11 + 33), vaddq_f32(*(float32x4_t *)(v11 + 17), vaddq_f32(*(float32x4_t *)(v11 + 9), v80)))))))))))))))))))))));
  v83.i32[0] = 343932928;
  float32x4_t v84 = vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 357), vaddq_f32(*(float32x4_t *)(v11 + 349), vaddq_f32(*(float32x4_t *)(v11 + 341), vaddq_f32(*(float32x4_t *)(v11 + 333), vaddq_f32(*(float32x4_t *)(v11 + 325), vaddq_f32(*(float32x4_t *)(v11 + 317), vaddq_f32(*(float32x4_t *)(v11 + 309), *(float32x4_t *)(v11 + 301)))))))), v81), vaddq_f32(v82, vaddq_f32(*(float32x4_t *)(v11 + 345),
              vaddq_f32(*(float32x4_t *)(v11 + 329), vaddq_f32(*(float32x4_t *)(v11 + 313), vaddq_f32(*(float32x4_t *)(v11 + 297), vaddq_f32(*(float32x4_t *)(v11 + 281), vaddq_f32(*(float32x4_t *)(v11 + 265), vaddq_f32(*(float32x4_t *)(v11 + 249), vaddq_f32(*(float32x4_t *)(v11 + 233), vaddq_f32(*(float32x4_t *)(v11 + 217), vaddq_f32(*(float32x4_t *)(v11 + 201), vaddq_f32(*(float32x4_t *)(v11 + 185),
                                  vaddq_f32(*(float32x4_t *)(v11 + 169), vaddq_f32(*(float32x4_t *)(v11 + 153), vaddq_f32(*(float32x4_t *)(v11 + 137), vaddq_f32(*(float32x4_t *)(v11 + 121), vaddq_f32(*(float32x4_t *)(v11 + 105), vaddq_f32(*(float32x4_t *)(v11 + 89), vaddq_f32(*(float32x4_t *)(v11 + 73), vaddq_f32(*(float32x4_t *)(v11 + 57), vaddq_f32(*(float32x4_t *)(v11 + 41), vaddq_f32(*(float32x4_t *)(v11 + 25), *(float32x4_t *)(v11 + 1))))))))))))))))))))))));
  float v85 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v84, v84)) * 0.0027701;
  float v86 = 0.0;
  do
  {
    float v87 = vabds_f32(*(float *)&v11[v77], v85);
    float v88 = v86 + (float)((float)(v87 / v83.f32[0]) * (float)(v87 / v83.f32[0]));
    float v86 = (float)((float)((float)(v83.f32[0] / v87) * (float)(v83.f32[0] / v87)) * v86) + 1.0;
    if (v87 <= v83.f32[0]) {
      float v86 = v88;
    }
    else {
      v83.f32[0] = v87;
    }
    ++v77;
  }
  while (v77 != 361);
  v83.f32[0] = sqrtf(v86) * v83.f32[0];
  float32x4_t v89 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 0);
  int32x2_t v90 = *(int32x2_t *)v1356.f32;
  float32x4_t v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1356.f32, 0);
  unint64_t v92 = 0x3FFFFFFFFFFFCDD0uLL;
  do
  {
    uint64_t v93 = (float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v92];
    float32x4_t v94 = vmlaq_f32(v91, *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v92 + 12852], v89);
    v93[3212] = vmlaq_f32(v91, *(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v92 + 12848], v89);
    v93[3213] = v94;
    v92 += 8;
  }
  while (v92 * 4);
  xmmword_26A1370D8 = (__int128)vmlaq_n_f32((float32x4_t)vdupq_lane_s32(v90, 0), (float32x4_t)xmmword_26A1370D8, v83.f32[0]);
  float32x4_t v95 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 281), vaddq_f32(*(float32x4_t *)(v11 + 273), vaddq_f32(*(float32x4_t *)(v11 + 265), vaddq_f32(*(float32x4_t *)(v11 + 257), vaddq_f32(*(float32x4_t *)(v11 + 249), vaddq_f32(*(float32x4_t *)(v11 + 241), vaddq_f32(*(float32x4_t *)(v11 + 233), *(float32x4_t *)(v11 + 225)))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 217), vaddq_f32(*(float32x4_t *)(v11 + 209), vaddq_f32(
                  *(float32x4_t *)(v11 + 201),
                  vaddq_f32(*(float32x4_t *)(v11 + 193), vaddq_f32(*(float32x4_t *)(v11 + 185), vaddq_f32(*(float32x4_t *)(v11 + 177), *(float32x4_t *)(v11 + 169))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 161), vaddq_f32(*(float32x4_t *)(v11 + 153), vaddq_f32(*(float32x4_t *)(v11 + 145), vaddq_f32(*(float32x4_t *)(v11 + 137), vaddq_f32(*(float32x4_t *)(v11 + 129), *(float32x4_t *)(v11 + 121)))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 113), vaddq_f32(*(float32x4_t *)(v11 + 105),
                    vaddq_f32(*(float32x4_t *)(v11 + 97), vaddq_f32(*(float32x4_t *)(v11 + 89), *(float32x4_t *)(v11 + 81))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 73), vaddq_f32(*v18, vaddq_f32(*(float32x4_t *)(v11 + 57), *(float32x4_t *)(v11 + 49)))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 41), vaddq_f32(*(float32x4_t *)(v11 + 33), *(float32x4_t *)(v11 + 25))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 17), *(float32x4_t *)(v11 + 9)), vaddq_f32(*(float32x4_t *)(v11 + 1), v80))))))));
  float32x4_t v96 = vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 293), vaddq_f32(*(float32x4_t *)(v11 + 285), vaddq_f32(*(float32x4_t *)(v11 + 277), vaddq_f32(*(float32x4_t *)(v11 + 269), vaddq_f32(*(float32x4_t *)(v11 + 261), vaddq_f32(*(float32x4_t *)(v11 + 253), vaddq_f32(*(float32x4_t *)(v11 + 245), *(float32x4_t *)(v11 + 237)))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 229), vaddq_f32(*(float32x4_t *)(v11 + 221), vaddq_f32(
                  *(float32x4_t *)(v11 + 213),
                  vaddq_f32(*(float32x4_t *)(v11 + 205), vaddq_f32(*(float32x4_t *)(v11 + 197), vaddq_f32(*(float32x4_t *)(v11 + 189), *(float32x4_t *)(v11 + 181))))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 173), vaddq_f32(*(float32x4_t *)(v11 + 165), vaddq_f32(*(float32x4_t *)(v11 + 157), vaddq_f32(*(float32x4_t *)(v11 + 149), vaddq_f32(*(float32x4_t *)(v11 + 141), *(float32x4_t *)(v11 + 133)))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 125), vaddq_f32(*(float32x4_t *)(v11 + 117),
                    vaddq_f32(*(float32x4_t *)(v11 + 109), vaddq_f32(*(float32x4_t *)(v11 + 101), *(float32x4_t *)(v11 + 93))))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 85), vaddq_f32(*(float32x4_t *)(v11 + 77), vaddq_f32(*(float32x4_t *)(v11 + 69), *(float32x4_t *)(v11 + 61)))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 53), vaddq_f32(*(float32x4_t *)(v11 + 45), *(float32x4_t *)(v11 + 37))), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 29), *(float32x4_t *)(v11 + 21)), vaddq_f32(*(float32x4_t *)(v11 + 13), *(float32x4_t *)(v11 + 5)))))))));
  float32x4_t v1356 = vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 357), vaddq_f32(*(float32x4_t *)(v11 + 349), vaddq_f32(*(float32x4_t *)(v11 + 341), vaddq_f32(*(float32x4_t *)(v11 + 333), vaddq_f32(*(float32x4_t *)(v11 + 325), vaddq_f32(*(float32x4_t *)(v11 + 317), vaddq_f32(*(float32x4_t *)(v11 + 309), *(float32x4_t *)(v11 + 301)))))))), v96), vaddq_f32(vaddq_f32(*(float32x4_t *)(v11 + 353), vaddq_f32(
                  *(float32x4_t *)(v11 + 345),
                  vaddq_f32(*(float32x4_t *)(v11 + 337), vaddq_f32(*(float32x4_t *)(v11 + 329), vaddq_f32(*(float32x4_t *)(v11 + 321), vaddq_f32(*(float32x4_t *)(v11 + 313), vaddq_f32(*(float32x4_t *)(v11 + 305), vaddq_f32(*(float32x4_t *)(v11 + 297), *(float32x4_t *)(v11 + 289))))))))), v95));
  bzero(findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC, 0x191A0uLL);
  unint64_t v97 = 0x3FFFFFFFFFFFCDD0uLL;
  do
  {
    float32x4_t v98 = vabsq_f32(*(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v97 + 12852]);
    unint64_t v99 = (int *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::x[v97];
    *((float32x4_t *)v99 + 3212) = vabsq_f32(*(float32x4_t *)&utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v97 + 12848]);
    *((float32x4_t *)v99 + 3213) = v98;
    v97 += 8;
  }
  while (v97 * 4);
  float32x4_t v100 = vpaddq_f32(v1356, v1356);
  xmmword_26A15CB48 = (__int128)vabsq_f32((float32x4_t)xmmword_26A1370D8);
  int v101 = SLODWORD(utils::normxcorr2_lim(float const*,float const*,float,double *)::x[0]);
  uint64_t v102 = 1;
  do
  {
    int v103 = v102 + 1;
    if (*(float *)&v101 < utils::normxcorr2_lim(float const*,float const*,float,double *)::x[v102]) {
      int v101 = SLODWORD(utils::normxcorr2_lim(float const*,float const*,float,double *)::x[v102]);
    }
    ++v102;
  }
  while (v103 != 12852);
  if (fabsf(*(float *)&v101) == INFINITY)
  {
    int v104 = rtNaNF;
  }
  else if (*(float *)&v101 <= 1.1755e-38)
  {
    int v104 = 1;
  }
  else
  {
    float32x4_t v1356 = v100;
    frexpf(*(float *)&v101, &v1357);
    *(float *)&int v104 = ldexpf(1.0, v1357 - 24);
    v100.i64[0] = v1356.i64[0];
  }
  int v105 = 0;
  int v106 = 0;
  float v107 = vaddv_f32(*(float32x2_t *)v100.f32);
  float v108 = sqrtf(*(float *)&v104);
  while (utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v105] <= v108)
  {
    ++v105;
LABEL_49:
    if (v105 >= 12852) {
      goto LABEL_57;
    }
  }
  *((_WORD *)&v1424 + v106) = v105 + 1;
  BOOL v109 = v106++ <= 12850;
  int v110 = !v109;
  if (v109) {
    ++v105;
  }
  if (!v110) {
    goto LABEL_49;
  }
LABEL_57:
  if (v106 > 0)
  {
    float v111 = v107 * 0.0027701;
    uint64_t v112 = v106;
    if (v106 == 1)
    {
      uint64_t v113 = 0;
      goto LABEL_63;
    }
    uint64_t v113 = v106 & 0xFFFFFFFE;
    int64_t v114 = (__int16 *)&v1424 + 1;
    uint64_t v115 = v112 & 0xFFFFFFFE;
    do
    {
      uint64_t v116 = *v114 - 1;
      double v117 = (float)((float)(utils::normxcorr2_lim(float const*,float const*,float,double *)::xcorr_TA[v116]
                           - (float)(v111
                                   * utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v116]))
                   / utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v116]);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[*(v114 - 1) - 1] = (float)((float)(utils::normxcorr2_lim(float const*,float const*,float,double *)::xcorr_TA[*(v114 - 1) - 1] - (float)(v111 * utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[*(v114 - 1) - 1])) / utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[*(v114 - 1) - 1]);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[v116] = v117;
      v114 += 2;
      v115 -= 2;
    }
    while (v115);
    if (v113 != v112)
    {
LABEL_63:
      uint64_t v118 = v112 - v113;
      uint64_t v119 = (__int16 *)&v1424 + v113;
      do
      {
        uint64_t v120 = *v119++;
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[v120 - 1] = (float)((float)(utils::normxcorr2_lim(float const*,float const*,float,double *)::xcorr_TA[v120 - 1] - (float)(v111 * utils::normxcorr2_lim(float const*,float const*,float,double *)::local_sum_A[v120 - 1])) / utils::normxcorr2_lim(float const*,float const*,float,double *)::denom_A[v120 - 1]);
        --v118;
      }
      while (v118);
    }
  }
  uint64_t v121 = 0;
  int v122 = 0;
  int v123 = 0;
  do
  {
    if (fabs(findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[v121])
       + -1.0 > 0.0000000149011612)
    {
      ++v123;
      *((_WORD *)v1415 + v122++) = v121 + 1;
    }
    ++v121;
  }
  while (v121 != 12852);
  if (v123 >= 1)
  {
    uint64_t v124 = v123;
    if (v123 == 1)
    {
      uint64_t v125 = 0;
      goto LABEL_75;
    }
    uint64_t v125 = v123 & 0xFFFFFFFE;
    uint64_t v126 = (__int16 *)v1415 + 1;
    uint64_t v127 = v124 & 0xFFFFFFFE;
    do
    {
      long long v128 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[*v126];
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[*(v126 - 1) - 1] = 0.0;
      *(v128 - 1) = 0.0;
      v126 += 2;
      v127 -= 2;
    }
    while (v127);
    if (v125 != v124)
    {
LABEL_75:
      uint64_t v129 = v124 - v125;
      uint64_t v130 = (__int16 *)v1415 + v125;
      do
      {
        uint64_t v131 = *v130++;
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::XC[v131 - 1] = 0.0;
        --v129;
      }
      while (v129);
    }
  }
  uint64_t v132 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L;
  float v133 = &xmmword_26A0EFC70;
  uint64_t v134 = 108;
  do
  {
    memcpy(v132, v133, 0x2A0uLL);
    v132 += 84;
    v133 += 51;
    --v134;
  }
  while (v134);
  long long v1385 = 0u;
  long long v1386 = 0u;
  v1383[0] = 0;
  bzero(&v1433, 0x8DC0uLL);
  bzero(&coder::internal::sort(double *)::xwork, 0x11B80uLL);
  uint64_t v135 = 0;
  uint64_t v136 = 0;
  int v137 = 0;
  while (2)
  {
    uint64_t v138 = 0;
    uint64_t v139 = v134;
    int v140 = v135 - v134;
    int v141 = v135 - v134 - 1;
    int v142 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v135 + 2];
    uint64_t v143 = v136;
    while (1)
    {
      uint64_t v144 = *((void *)v142 - 2);
      *((_WORD *)v1383 + v137) = v136 + v138 + 1;
      *((void *)&v1385 + v137) = v144;
      if (v137 != 3) {
        break;
      }
      if (*(double *)&v1385 >= *((double *)&v1385 + 1)) {
        unsigned int v145 = 1;
      }
      else {
        unsigned int v145 = 2;
      }
      if (*(double *)&v1385 < *((double *)&v1385 + 1)) {
        unsigned int v146 = 1;
      }
      else {
        unsigned int v146 = 2;
      }
      if (*(double *)&v1386 >= *((double *)&v1386 + 1)) {
        int v147 = 3;
      }
      else {
        int v147 = 4;
      }
      if (*(double *)&v1386 >= *((double *)&v1386 + 1)) {
        int v148 = 4;
      }
      else {
        int v148 = 3;
      }
      double v149 = *((double *)&v1385 + v145 - 1);
      double v150 = *((double *)&v1385 + (v147 - 1));
      if (v149 >= v150)
      {
        double v154 = *((double *)&v1385 + v146 - 1);
        if (v154 >= v150)
        {
          unsigned int v152 = v148;
          unsigned int v153 = v147;
        }
        else
        {
          if (v154 >= *((double *)&v1385 + (v148 - 1)))
          {
            unsigned int v152 = v148;
            unsigned int v153 = v146;
          }
          else
          {
            unsigned int v152 = v146;
            unsigned int v153 = v148;
          }
          unsigned int v146 = v147;
        }
      }
      else
      {
        double v151 = *((double *)&v1385 + (v148 - 1));
        if (v149 >= v151)
        {
          if (*((double *)&v1385 + v146 - 1) >= v151)
          {
            unsigned int v152 = v148;
            unsigned int v153 = v146;
          }
          else
          {
            unsigned int v152 = v146;
            unsigned int v153 = v148;
          }
          unsigned int v146 = v145;
        }
        else
        {
          unsigned int v152 = v146;
          unsigned int v153 = v145;
          unsigned int v146 = v148;
        }
        unsigned int v145 = v147;
      }
      uint64_t v155 = v145 - 1;
      int v156 = v140 - 3 + v138;
      *(_DWORD *)&v1434[4 * v156 - 4] = *((__int16 *)v1383 + v155);
      uint64_t v157 = v146 - 1;
      int v158 = v140 - 2 + v138;
      *(_DWORD *)&v1434[4 * v158 - 4] = *((__int16 *)v1383 + v157);
      uint64_t v159 = v153 - 1;
      int v160 = v141 + v138;
      *(_DWORD *)&v1434[4 * v160 - 4] = *((__int16 *)v1383 + v159);
      uint64_t v161 = v152 - 1;
      *(_DWORD *)&v1434[4 * v140 - 4 + 4 * (int)v138] = *((__int16 *)v1383 + v161);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v156] = *((double *)&v1385 + v155);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v158] = *((double *)&v1385 + v157);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v160] = *((double *)&v1385 + v159);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v140 + (int)v138] = *((double *)&v1385 + v161);
      if (!(v135 - 9071 + v138))
      {
        LODWORD(v134) = v139;
        goto LABEL_126;
      }
      double v162 = *(v142 - 1);
      LOWORD(v1383[0]) = v136 + v138 + 2;
      *(double *)&long long v1385 = v162;
      if (!(v135 - 9070 + v138))
      {
        *(_WORD *)((char *)v1443 + 1) = 0;
        HIBYTE(v1443[0]) = 0;
        LODWORD(v134) = v139;
LABEL_119:
        int v137 = 1;
        LOBYTE(v1443[0]) = 1;
LABEL_124:
        int v165 = 9072 - (v137 + v134);
        uint64_t v166 = (char *)v1443;
        uint64_t v167 = v137;
        do
        {
          uint64_t v168 = *v166++;
          *(_DWORD *)&v1434[4 * v165 - 4] = *((__int16 *)v1383 + v168 - 1);
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v165++] = *((double *)&v1385 + v168 - 1);
          --v167;
        }
        while (v167);
        goto LABEL_126;
      }
      double v163 = *v142;
      WORD1(v1383[0]) = v136 + v138 + 3;
      *((double *)&v1385 + 1) = v163;
      v143 += 3;
      v138 += 3;
      v142 += 3;
      int v137 = 2;
      if (!(v135 - 9072 + v138))
      {
        HIWORD(v1443[0]) = 0;
        LODWORD(v134) = v139;
LABEL_120:
        if (v162 >= v163) {
          __int16 v164 = 513;
        }
        else {
          __int16 v164 = 258;
        }
        LOWORD(v1443[0]) = v164;
        int v137 = 2;
        goto LABEL_124;
      }
    }
    ++v137;
    uint64_t v134 = v139;
    v135 += v138 + 1;
    uint64_t v136 = (v136 + v138) + 1;
    if (v135 != 9072) {
      continue;
    }
    break;
  }
  if (v137 > 0)
  {
    *(_WORD *)((char *)v1443 + 1) = 0;
    HIBYTE(v1443[0]) = 0;
    if (v137 == 1) {
      goto LABEL_119;
    }
    if (v137 == 2)
    {
      double v163 = *((double *)&v1385 + 1);
      double v162 = *(double *)&v1385;
      goto LABEL_120;
    }
    if (*(double *)&v1385 >= *((double *)&v1385 + 1))
    {
      if (*((double *)&v1385 + 1) < *(double *)&v1386)
      {
        if (*(double *)&v1385 >= *(double *)&v1386) {
          __int16 v1280 = 769;
        }
        else {
          __int16 v1280 = 259;
        }
        LOWORD(v1443[0]) = v1280;
        char v1282 = 2;
        goto LABEL_1221;
      }
      __int16 v1281 = 513;
    }
    else
    {
      if (*(double *)&v1385 < *(double *)&v1386)
      {
        if (*((double *)&v1385 + 1) >= *(double *)&v1386) {
          __int16 v1274 = 770;
        }
        else {
          __int16 v1274 = 515;
        }
        LOWORD(v1443[0]) = v1274;
        char v1282 = 1;
        goto LABEL_1221;
      }
      __int16 v1281 = 258;
    }
    LOWORD(v1443[0]) = v1281;
    char v1282 = 3;
LABEL_1221:
    BYTE2(v1443[0]) = v1282;
    goto LABEL_124;
  }
LABEL_126:
  bzero(&v1424, 0x8DC0uLL);
  uint64_t v173 = (9072 - v134);
  if (v173 < 0x100)
  {
    char v174 = 2;
    goto LABEL_170;
  }
  LODWORD(v1338) = v134;
  LODWORD(v1355[0]) = 0;
  int v175 = 0;
  v1337 = (double *)(9072 - v134);
  LODWORD(v1339) = v173 >> 8;
  v1346 = (float *)&v1436;
  v1347 = (int16x8_t *)&v1418;
  v1356.i64[0] = (uint64_t)&v1436 + 4;
  __vImage_Buffer src = (char *)&v1433 + 4;
  while (2)
  {
    int v176 = 0;
    LODWORD(v1340) = v175;
    int v1349 = v175 << 8;
    LODWORD(v1348) = (v175 << 8) - 1;
    while (2)
    {
      int v177 = 0;
      uint64_t v178 = (4 << v176);
      unsigned int v179 = 0x20u >> v176;
      LODWORD(v1345) = v176;
      LODWORD(v1353) = v176 + 3;
      unint64_t v1354 = (8 << v176);
      if ((8 << v176) <= 1) {
        uint64_t v180 = 1;
      }
      else {
        uint64_t v180 = (8 << v176);
      }
      if (v179 <= 1) {
        unsigned int v179 = 1;
      }
      LODWORD(v1352) = v179;
      __unint64_t n = 8 * v180;
      uint64_t v1350 = v180 & 0xFFFFFFF0;
      while (2)
      {
        int v181 = v177 << v1353;
        memcpy(v1415, &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[(v177 << v1353) + v1349], __n);
        if (v180 < 0x10)
        {
          uint64_t v182 = 0;
          uint64_t v183 = v1347;
          goto LABEL_144;
        }
        uint64_t v183 = v1347;
        uint64_t v184 = (int16x8_t *)&v1346[LODWORD(v1355[0]) + v181];
        uint64_t v185 = v1347;
        uint64_t v186 = v1350;
        do
        {
          int16x8_t v188 = v184[-2];
          int16x8_t v187 = v184[-1];
          int16x8_t v190 = *v184;
          int16x8_t v189 = v184[1];
          v184 += 4;
          __n128 v172 = (__n128)vuzp1q_s16(v188, v187);
          v185[-1] = (int16x8_t)v172;
          *uint64_t v185 = vuzp1q_s16(v190, v189);
          v185 += 2;
          v186 -= 16;
        }
        while (v186);
        uint64_t v182 = v1350;
        if (v1350 != v180)
        {
LABEL_144:
          uint64_t v191 = v180 - v182;
          unint64_t v192 = (_WORD *)&v1417 + v182;
          uint64_t v193 = (int *)&v1434[4 * v182 - 4 + 4 * LODWORD(v1355[0]) + 4 * v181];
          do
          {
            int v194 = *v193++;
            *v192++ = v194;
            --v191;
          }
          while (v191);
        }
        uint64_t v195 = 0;
        int v196 = v1348 + v181;
        unint64_t v197 = v178;
        do
        {
          v172.n128_u64[0] = *(void *)&v1415[2 * v197];
          uint64_t v198 = v195 << 32;
          uint64_t v199 = (int)v195;
          int v200 = v196;
          uint64_t v201 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v196];
          int v202 = &v1434[4 * v196 - 4];
          uint64_t v203 = (int)v195 + 1;
          uint64_t v204 = -(uint64_t)(int)v195;
          uint64_t v205 = (int16x4_t *)((char *)v183 + 2 * (int)v195);
          uint64_t v206 = (int)v195 + (uint64_t)(v196 - (int)v195 + 1);
          uint64_t v207 = 1;
          uint64_t v208 = (int)v195;
          float v209 = (int32x4_t *)(v1356.i64[0] + 4 * v206);
          while (1)
          {
            double v210 = *(double *)&v1415[2 * v208];
            if (v210 < v172.n128_f64[0]) {
              break;
            }
            *(_DWORD *)&v202[4 * v207] = *((__int16 *)&v1417 + v208);
            v201[v207] = v210;
            ++v208;
            ++v207;
            ++v203;
            --v204;
            uint64_t v205 = (int16x4_t *)((char *)v205 + 2);
            float v209 = (int32x4_t *)((char *)v209 + 4);
            if ((int)v195 + v207 - 1 >= v178) {
              goto LABEL_138;
            }
          }
          uint64_t v211 = v207 - 1;
          int v196 = v200 + v207;
          *(_DWORD *)&v1434[4 * v196 - 4] = *((__int16 *)&v1417 + v197);
          uint64_t v195 = v211 + (int)v195;
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v196] = v172.n128_f64[0];
          ++v197;
        }
        while (v197 < v1354);
        if ((int)v178 > (int)v195)
        {
          uint64_t v1344 = v196 - (int)v195;
          float v212 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v211 + 1 + v1344 + v199];
          uint64_t v213 = (char *)&v1415[2 * v211] + (v198 >> 29);
          uint64_t v214 = v211 + v199;
          if (v211 + v199 + 1 > v178) {
            uint64_t v215 = v214 + 1;
          }
          else {
            uint64_t v215 = v178;
          }
          unint64_t v1343 = v215 - v214;
          memcpy(v212, v213, 8 * (v215 - v214));
          unint64_t v217 = v1343;
          uint64_t v216 = v1344;
          if (v1343 < 0x10)
          {
LABEL_164:
            int32x4_t v225 = (char *)__src + 4 * v216;
            do
            {
              *(_DWORD *)&v225[4 * v195] = *((__int16 *)&v1417 + v195);
              ++v195;
            }
            while (v195 < v178);
          }
          else
          {
            unint64_t v218 = v1343 & 0xFFFFFFFFFFFFFFF0;
            if (v203 <= v178) {
              uint64_t v219 = v178;
            }
            else {
              uint64_t v219 = v203;
            }
            unint64_t v220 = (v219 + v204) & 0xFFFFFFFFFFFFFFF0;
            do
            {
              int16x8_t v221 = *(int16x8_t *)v205[-2].i8;
              int32x4_t v222 = vmovl_s16(*(int16x4_t *)v221.i8);
              __n128 v172 = (__n128)vmovl_high_s16(v221);
              int32x4_t v223 = vmovl_s16(*v205);
              int32x4_t v224 = vmovl_high_s16(*(int16x8_t *)v205->i8);
              v209[-2] = v222;
              v209[-1] = (int32x4_t)v172;
              *float v209 = v223;
              v209[1] = v224;
              v209 += 4;
              v205 += 4;
              v220 -= 16;
            }
            while (v220);
            if (v217 != v218)
            {
              v195 += v218;
              goto LABEL_164;
            }
          }
        }
LABEL_138:
        if (++v177 != v1352) {
          continue;
        }
        break;
      }
      int v176 = v1345 + 1;
      if (v1345 != 5) {
        continue;
      }
      break;
    }
    int v175 = v1340 + 1;
    LODWORD(v1355[0]) += 256;
    if (v1340 + 1 != v1339) {
      continue;
    }
    break;
  }
  uint64_t v173 = (uint64_t)v1337;
  int v226 = (int *)(v1337 & 0xFFFFFF00);
  LODWORD(v134) = v1338;
  if ((int)v226 + (int)v1338 < 9072) {
    v172.n128_f64[0] = coder::internal::merge_block((coder::internal *)&v1433, v226, (double *)(9072 - (v226 + v1338)), 2, (uint64_t)&v1424, v169, v170, v171, v172);
  }
  char v174 = 8;
LABEL_170:
  coder::internal::merge_block((coder::internal *)&v1433, 0, (double *)v173, v174, (uint64_t)&v1424, v169, v170, v171, v172);
  if ((v134 - 1) <= 0x236E)
  {
    uint64_t v227 = 0;
    if (v134 < 8) {
      goto LABEL_176;
    }
    if ((int)v173 >= 9072) {
      goto LABEL_176;
    }
    uint64_t v227 = v134 & 0xFFFFFFFC;
    int v228 = &unk_26A189340;
    int v229 = v173;
    uint64_t v230 = v227;
    do
    {
      float v231 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v229];
      long long v232 = *((_OWORD *)v231 + 1);
      *(v228 - 1) = *(_OWORD *)v231;
      _OWORD *v228 = v232;
      v228 += 2;
      v229 += 4;
      v230 -= 4;
    }
    while (v230);
    if (v227 != v134)
    {
LABEL_176:
      uint64_t v233 = v134 - v227;
      int v234 = (double *)&coder::internal::sort(double *)::xwork + v227;
      int v235 = v227 - v134 + 9072;
      do
      {
        *v234++ = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v235++];
        --v233;
      }
      while (v233);
    }
    if ((int)v134 <= 9071)
    {
      uint64_t v236 = (int)v173;
      if ((int)v173 <= 1) {
        unint64_t v237 = 1;
      }
      else {
        unint64_t v237 = (int)v173;
      }
      if (v237 <= 0x27
        || ((uint64_t v439 = (int)v173 - 1, (int)v173 >= 1) ? (v440 = 1) : (v440 = (int)v173),
            (unint64_t v441 = (int)v173 - v440,
             uint64_t v442 = (9071 - v134),
             &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v442 - v441] > &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v442])
         || &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[-v441 + 9071] > (double *)&qword_26A118C90
         || 9071 - (int)v134 < v441
         || HIDWORD(v441)
         || (unint64_t)(v442 * 8 - 72568) < 0x20))
      {
        do
        {
LABEL_183:
          int v238 = v134 - 1 + v236;
          BOOL v109 = v236-- <= 1;
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v238] = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v236];
        }
        while (!v109);
      }
      else
      {
        uint64_t v443 = v237 & 0x7FFFFFFFFFFFFFFCLL;
        int v444 = 9071;
        uint64_t v445 = v237 & 0x7FFFFFFFFFFFFFFCLL;
        do
        {
          char v446 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v439];
          long long v447 = *(_OWORD *)(v446 - 1);
          long long v448 = *(_OWORD *)(v446 - 3);
          float v449 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v444];
          *(_OWORD *)(v449 - 1) = v447;
          *(_OWORD *)(v449 - 3) = v448;
          v439 -= 4;
          v444 -= 4;
          v445 -= 4;
        }
        while (v445);
        if (v237 != v443)
        {
          uint64_t v236 = (int)v173 - v443;
          goto LABEL_183;
        }
      }
    }
    memcpy(findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L, &coder::internal::sort(double *)::xwork, 8 * v134);
  }
  float64x2_t v239 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(fmax(*(double *)&qword_26A107570, 0.45)), 0);
  uint64_t v240 = -9072;
  int v241 = (float64x2_t *)&xmmword_26A0EFC70;
  v242.i64[0] = 0x101010101010101;
  v242.i64[1] = 0x101010101010101;
  do
  {
    int v243 = (int8x16_t *)&v1387[v240];
    v243[567] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(*v241, v239), (int32x4_t)vcgtq_f64(v241[1], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[2], v239), (int32x4_t)vcgtq_f64(v241[3], v239))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[4], v239), (int32x4_t)vcgtq_f64(v241[5], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[6], v239), (int32x4_t)vcgtq_f64(v241[7], v239)))), v242);
    v243[568] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[8], v239), (int32x4_t)vcgtq_f64(v241[9], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[10], v239), (int32x4_t)vcgtq_f64(v241[11], v239))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[12], v239), (int32x4_t)vcgtq_f64(v241[13], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[14], v239), (int32x4_t)vcgtq_f64(v241[15], v239)))), v242);
    v243[569] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[16], v239), (int32x4_t)vcgtq_f64(v241[17], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[18], v239), (int32x4_t)vcgtq_f64(v241[19], v239))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[20], v239), (int32x4_t)vcgtq_f64(v241[21], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[22], v239), (int32x4_t)vcgtq_f64(v241[23], v239)))), v242);
    v243[570] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[24], v239), (int32x4_t)vcgtq_f64(v241[25], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[26], v239), (int32x4_t)vcgtq_f64(v241[27], v239))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[28], v239), (int32x4_t)vcgtq_f64(v241[29], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[30], v239), (int32x4_t)vcgtq_f64(v241[31], v239)))), v242);
    v243[571] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[32], v239), (int32x4_t)vcgtq_f64(v241[33], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[34], v239), (int32x4_t)vcgtq_f64(v241[35], v239))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[36], v239), (int32x4_t)vcgtq_f64(v241[37], v239)), (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[38], v239), (int32x4_t)vcgtq_f64(v241[39], v239)))), v242);
    int16x8_t v244 = (int16x8_t)vuzp1q_s32((int32x4_t)vcgtq_f64(v241[40], v239), (int32x4_t)vcgtq_f64(v241[41], v239));
    *(int8x8_t *)v244.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v244), (int8x8_t)0x1000100010001);
    v243[572].i32[0] = vmovn_s16(v244).u32[0];
    v241 += 51;
    v240 += 84;
  }
  while (v240);
  uint64_t v245 = 0;
  uint64_t v1433 = 0;
  uint64_t v246 = 1;
  char v247 = v1387;
  float32x4_t v248 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L;
  while (2)
  {
    uint64_t v249 = 14 * v245;
    unint64_t v250 = (14 * v245) | 1;
    uint64_t v251 = v245 + 1;
    double v252 = (double)(14 * ((int)v245 + 1));
    *((_DWORD *)&v1424 + 14 * v245) = (int)fmin(v252 + 1.0, 109.0);
    double v253 = floor((double)(int)v250 * 0.5) * 42.0 + 1.0;
    int v254 = (int)fmin(v252, 108.0);
    double v255 = v253;
    if (v254 - 14 * (int)v245 >= 1)
    {
      uint64_t v256 = 0;
      uint64_t v257 = (v240 + v254);
      uint64_t v173 = v246;
      float v258 = v247;
      uint64_t v259 = v248;
      double v255 = v253;
      while (1)
      {
        uint64_t v260 = 84 * (v256 + v249);
        if (v256 + v249 >= v250) {
          break;
        }
        uint64_t v261 = (84 * (v256 + v249));
        if (v1387[v261])
        {
          *(double *)&v1434[8 * (int)(v255 + 1.0) - 12] = v255;
          double v262 = v255;
          double v255 = v255 + 1.0;
        }
        else
        {
          double v262 = 0.0;
        }
        uint64_t v310 = 0;
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v261] = v262;
        do
        {
          uint64_t v311 = (v173 + v310);
          if (v1387[v311])
          {
            if (v258[v310])
            {
              findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v311] = v259[v310];
            }
            else
            {
              findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v311] = v255;
              *(double *)&v1434[8 * (int)(v255 + 1.0) - 12] = v255;
              double v255 = v255 + 1.0;
            }
          }
          else
          {
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v311] = 0.0;
          }
          ++v310;
        }
        while (v310 != 83);
LABEL_192:
        ++v256;
        v259 += 84;
        v258 += 84;
        v173 += 84;
        if (v256 == v257) {
          goto LABEL_189;
        }
      }
      unint64_t v263 = 0;
      uint64_t v264 = v260 - 84;
      while (2)
      {
        unint64_t v265 = v263 + v260;
        uint64_t v266 = (v263 + v260);
        if (!v1387[v266])
        {
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = 0.0;
          goto LABEL_198;
        }
        unint64_t v267 = v264 + v263;
        if (v1387[v264 + v263])
        {
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v267];
          goto LABEL_198;
        }
        if (v263 > 0x52)
        {
LABEL_203:
          unint64_t v268 = (int)v260 - 85 + (int)v263;
          if (!v1387[v268])
          {
            unint64_t v268 = v265 - 1;
            if (!v1387[v265 - 1]) {
              goto LABEL_224;
            }
          }
LABEL_241:
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
LABEL_198:
          if (++v263 == 84) {
            goto LABEL_192;
          }
          continue;
        }
        break;
      }
      unint64_t v268 = v267 + 1;
      if (!v1387[v267 + 1])
      {
        if (v263) {
          goto LABEL_203;
        }
LABEL_224:
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = v255;
        *(double *)&v1434[8 * (int)(v255 + 1.0) - 12] = v255;
        double v255 = v255 + 1.0;
        goto LABEL_198;
      }
      if (!v263) {
        goto LABEL_241;
      }
      unint64_t v269 = v267 - 1;
      if (v1387[v269])
      {
        double v270 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v269];
        do
        {
          double v271 = v270;
          double v270 = *(double *)&v1434[8 * (int)(v270 + 1.0) - 12];
        }
        while (v270 < v271);
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = v271;
        double v272 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v269];
        double v273 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
        if (v272 != v273)
        {
          double v274 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
          do
          {
            double v275 = v274;
            double v274 = *(double *)&v1434[8 * (int)(v274 + 1.0) - 12];
          }
          while (v274 < v275);
          if (v271 > v275)
          {
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = v275;
            double v273 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
            double v271 = v275;
          }
          float v276 = (double *)&v1434[8 * (int)(v273 + 1.0) - 4];
          double v278 = *(v276 - 1);
          uint64_t v277 = v276 - 1;
          double v279 = v278;
          if (v278 < v273)
          {
            do
            {
              double v280 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
              findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268] = v279;
              double *v277 = v280;
              float v281 = (double *)&v1434[8 * (int)(v279 + 1.0) - 4];
              double v282 = *(v281 - 1);
              uint64_t v277 = v281 - 1;
              _NF = v282 < v279;
              double v279 = v282;
            }
            while (_NF);
            double v271 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
          }
          double *v277 = v271;
          double v272 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v269];
        }
        uint64_t v284 = (double *)&v1434[8 * (int)(v272 + 1.0) - 4];
        double v286 = *(v284 - 1);
        float v285 = v284 - 1;
        double v287 = v286;
        if (v286 < v272)
        {
          do
          {
            double v288 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v269] = v287;
            *float v285 = v288;
            float32x4_t v289 = (double *)&v1434[8 * (int)(v287 + 1.0) - 4];
            double v290 = *(v289 - 1);
            float v285 = v289 - 1;
            _NF = v290 < v287;
            double v287 = v290;
          }
          while (_NF);
          goto LABEL_239;
        }
      }
      else
      {
        unint64_t v291 = v265 - 1;
        if (!v1387[v265 - 1]) {
          goto LABEL_241;
        }
        double v292 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v291];
        do
        {
          double v271 = v292;
          double v292 = *(double *)&v1434[8 * (int)(v292 + 1.0) - 12];
        }
        while (v292 < v271);
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = v271;
        double v293 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v291];
        double v294 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
        if (v293 != v294)
        {
          double v295 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
          do
          {
            double v296 = v295;
            double v295 = *(double *)&v1434[8 * (int)(v295 + 1.0) - 12];
          }
          while (v295 < v296);
          if (v271 > v296)
          {
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266] = v296;
            double v294 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268];
            double v271 = v296;
          }
          float v297 = (double *)&v1434[8 * (int)(v294 + 1.0) - 4];
          double v299 = *(v297 - 1);
          uint64_t v298 = v297 - 1;
          double v300 = v299;
          if (v299 < v294)
          {
            do
            {
              double v301 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
              findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v268] = v300;
              double *v298 = v301;
              float v302 = (double *)&v1434[8 * (int)(v300 + 1.0) - 4];
              double v303 = *(v302 - 1);
              uint64_t v298 = v302 - 1;
              _NF = v303 < v300;
              double v300 = v303;
            }
            while (_NF);
            double v271 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
          }
          double *v298 = v271;
          double v293 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v291];
        }
        int32x4_t v304 = (double *)&v1434[8 * (int)(v293 + 1.0) - 4];
        double v305 = *(v304 - 1);
        float v285 = v304 - 1;
        double v306 = v305;
        if (v305 < v293)
        {
          do
          {
            double v307 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v291] = v306;
            *float v285 = v307;
            float32x4_t v308 = (double *)&v1434[8 * (int)(v306 + 1.0) - 4];
            double v309 = *(v308 - 1);
            float v285 = v308 - 1;
            _NF = v309 < v306;
            double v306 = v309;
          }
          while (_NF);
LABEL_239:
          double v271 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v266];
        }
      }
      *float v285 = v271;
      goto LABEL_198;
    }
LABEL_189:
    *((_DWORD *)&v1424 + v250) = (int)(v255 - (double)(int)v253);
    LODWORD(v240) = v240 - 14;
    v248 += 1176;
    v247 += 1176;
    v246 += 1176;
    uint64_t v245 = v251;
    if (v251 != 8) {
      continue;
    }
    break;
  }
  int v312 = v1424;
  if ((int)v1424 > 108) {
    goto LABEL_304;
  }
  while (2)
  {
    unint64_t v313 = 0;
    uint64_t v314 = v312 - 1;
    int v315 = 84 * v312;
    int v316 = 84 * v312 - 169;
    int v317 = v315 - 167;
    uint64_t v318 = 84 * (int)v314;
    uint64_t v319 = v315 - 168;
    while (2)
    {
      uint64_t v320 = v313 + v318;
      double v321 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v313 + v318];
      if (v321 != 0.0)
      {
        if (v313)
        {
          int v322 = v313;
          double v323 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v316 + (int)v313];
          if (v323 == 0.0)
          {
            double v325 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v313 + v318];
            if (v313 > 0x52) {
              goto LABEL_290;
            }
          }
          else
          {
            double v324 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v316 + (int)v313];
            do
            {
              double v325 = v324;
              double v324 = *(double *)&v1434[8 * (int)(v324 + 1.0) - 12];
            }
            while (v324 < v325);
            if (v323 != v321)
            {
              double v326 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v313 + v318];
              do
              {
                double v327 = v326;
                double v326 = *(double *)&v1434[8 * (int)(v326 + 1.0) - 12];
              }
              while (v326 < v327);
              if (v325 > v327) {
                double v325 = v327;
              }
              uint64_t v328 = (int)(v321 + 1.0) - 1;
              float32x4_t v329 = (double *)&v1434[8 * v328 - 4];
              double v330 = *v329;
              if (*v329 < v321)
              {
                do
                {
                  *float32x4_t v329 = v325;
                  uint64_t v328 = (int)(v330 + 1.0) - 1;
                  float32x4_t v329 = (double *)&v1434[8 * v328 - 4];
                  _NF = *v329 < v330;
                  double v330 = *v329;
                }
                while (_NF);
              }
              *(double *)&v1434[8 * v328 - 4] = v325;
            }
            uint64_t v331 = (int)(v323 + 1.0) - 1;
            int8x8_t v332 = (double *)&v1434[8 * v331 - 4];
            double v333 = *v332;
            if (*v332 < v323)
            {
              do
              {
                *int8x8_t v332 = v325;
                uint64_t v331 = (int)(v333 + 1.0) - 1;
                int8x8_t v332 = (double *)&v1434[8 * v331 - 4];
                _NF = *v332 < v333;
                double v333 = *v332;
              }
              while (_NF);
            }
            *(double *)&v1434[8 * v331 - 4] = v325;
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v320] = v325;
            double v321 = v325;
            if (v313 > 0x52)
            {
LABEL_290:
              double v344 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v313 + v319];
              if (v344 != 0.0)
              {
                double v345 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v313 + v319];
                do
                {
                  double v346 = v345;
                  double v345 = *(double *)&v1434[8 * (int)(v345 + 1.0) - 12];
                }
                while (v345 < v346);
                if (v344 != v325)
                {
                  double v347 = v325;
                  do
                  {
                    double v348 = v347;
                    double v347 = *(double *)&v1434[8 * (int)(v347 + 1.0) - 12];
                  }
                  while (v347 < v348);
                  if (v346 > v348) {
                    double v346 = v348;
                  }
                  uint64_t v349 = (int)(v325 + 1.0) - 1;
                  uint64_t v350 = (double *)&v1434[8 * v349 - 4];
                  double v351 = *v350;
                  if (*v350 < v325)
                  {
                    do
                    {
                      *uint64_t v350 = v346;
                      uint64_t v349 = (int)(v351 + 1.0) - 1;
                      uint64_t v350 = (double *)&v1434[8 * v349 - 4];
                      _NF = *v350 < v351;
                      double v351 = *v350;
                    }
                    while (_NF);
                  }
                  *(double *)&v1434[8 * v349 - 4] = v346;
                }
                uint64_t v352 = (int)(v344 + 1.0) - 1;
                uint64_t v353 = (double *)&v1434[8 * v352 - 4];
                double v354 = *v353;
                if (*v353 < v344)
                {
                  do
                  {
                    *uint64_t v353 = v346;
                    uint64_t v352 = (int)(v354 + 1.0) - 1;
                    uint64_t v353 = (double *)&v1434[8 * v352 - 4];
                    _NF = *v353 < v354;
                    double v354 = *v353;
                  }
                  while (_NF);
                }
                *(double *)&v1434[8 * v352 - 4] = v346;
                findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v320] = v346;
              }
              goto LABEL_255;
            }
          }
        }
        else
        {
          int v322 = 0;
        }
        double v334 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v317 + v322];
        if (v334 == 0.0)
        {
          double v325 = v321;
        }
        else
        {
          double v335 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v317 + v322];
          do
          {
            double v325 = v335;
            double v335 = *(double *)&v1434[8 * (int)(v335 + 1.0) - 12];
          }
          while (v335 < v325);
          if (v334 != v321)
          {
            double v336 = v321;
            do
            {
              double v337 = v336;
              double v336 = *(double *)&v1434[8 * (int)(v336 + 1.0) - 12];
            }
            while (v336 < v337);
            if (v325 > v337) {
              double v325 = v337;
            }
            uint64_t v338 = (int)(v321 + 1.0) - 1;
            uint64_t v339 = (double *)&v1434[8 * v338 - 4];
            double v340 = *v339;
            if (*v339 < v321)
            {
              do
              {
                *uint64_t v339 = v325;
                uint64_t v338 = (int)(v340 + 1.0) - 1;
                uint64_t v339 = (double *)&v1434[8 * v338 - 4];
                _NF = *v339 < v340;
                double v340 = *v339;
              }
              while (_NF);
            }
            *(double *)&v1434[8 * v338 - 4] = v325;
          }
          uint64_t v341 = (int)(v334 + 1.0) - 1;
          uint64_t v342 = (double *)&v1434[8 * v341 - 4];
          double v343 = *v342;
          if (*v342 < v334)
          {
            do
            {
              *uint64_t v342 = v325;
              uint64_t v341 = (int)(v343 + 1.0) - 1;
              uint64_t v342 = (double *)&v1434[8 * v341 - 4];
              _NF = *v342 < v343;
              double v343 = *v342;
            }
            while (_NF);
          }
          *(double *)&v1434[8 * v341 - 4] = v325;
          findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v320] = v325;
        }
        goto LABEL_290;
      }
LABEL_255:
      if (++v313 != 84) {
        continue;
      }
      break;
    }
    int v312 = *((_DWORD *)&v1424 + v314);
    if (v312 < 109) {
      continue;
    }
    break;
  }
LABEL_304:
  int v355 = 1;
  double v356 = 1.0;
  do
  {
    uint64_t v357 = v355 - 1;
    unsigned int v358 = 42 * llround((double)(int)v357 * 0.5);
    int v359 = v358 + 2;
    int v360 = *((_DWORD *)&v1424 + v355);
    if ((int)(v358 + 2) <= (int)(v360 + v358 + 1))
    {
      uint64_t v361 = (double *)&v1431[8 * v359];
      double v362 = v356;
      do
      {
        if (*v361 >= (double)v359 + -1.0)
        {
          double v356 = v362 + 1.0;
        }
        else
        {
          double v356 = v362;
          double v362 = *(double *)&v1434[8 * (int)(*v361 + 1.0) - 12];
        }
        *v361++ = v362;
        ++v359;
        double v362 = v356;
        --v360;
      }
      while (v360);
    }
    int v355 = *((_DWORD *)&v1424 + v357);
  }
  while (v355 < 109);
  uint64_t v363 = 0;
  int v364 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L;
  do
  {
    for (uint64_t j = 0; j != 84; j += 2)
    {
      float32x4_t v366 = &v364[j];
      uint64_t v367 = *(void *)&v1434[8 * (int)(v364[j + 1] + 1.0) - 12];
      *float32x4_t v366 = *(double *)&v1434[8 * (int)(v364[j] + 1.0) - 12];
      *((void *)v366 + 1) = v367;
    }
    ++v363;
    v364 += 84;
  }
  while (v363 != 108);
  LODWORD(v173) = vcvtad_u64_f64(v356 + -1.0);
  *(_DWORD *)(v1341 + 24) = v173;
  __vImage_Buffer src = 0;
  coder::array_base<float,int,2>::ensureCapacity(v1341, v173);
  unsigned int v1377 = v173;
  __vImage_Buffer src = 0;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1375, v173);
  if ((int)v173 < 1)
  {
    int v1336 = 0;
    float v382 = *(float *)&v1359;
    float v374 = *(float *)&v1358;
  }
  else
  {
    v1356.i64[0] = v173;
    uint64_t v368 = &xmmword_26A0EFC70;
    uint64_t v369 = 108;
    uint64_t v370 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::c_XC;
    do
    {
      memcpy(v370, v368, 0x2A0uLL);
      v370 += 42;
      v368 += 51;
      --v369;
    }
    while (v369);
    int v1336 = 0;
    unint64_t v371 = 0;
    v1355[0] = v1375[0];
    do
    {
      uint64_t v373 = 0;
      float v374 = 0.0;
      int v375 = 0;
      double v376 = (double)(int)v371 + 1.0;
      do
      {
        float v377 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v373];
        if (v376 == v377)
        {
          ++LODWORD(v374);
          *(_WORD *)&v1389[2 * v375++ + 24] = v373 + 1;
        }
        ++v373;
      }
      while (v373 != 9072);
      if (SLODWORD(v374) > 0)
      {
        int v378 = 16;
        __vImage_Buffer src = 0;
        unint64_t v1354 = v371;
        while (v378 < SLODWORD(v374))
        {
          if (v378 <= 0x3FFFFFFF) {
            v378 *= 2;
          }
          else {
            int v378 = 0x7FFFFFFF;
          }
        }
        operator new[]();
      }
      double v379 = MEMORY[0];
      int v380 = 1;
      if (MEMORY[0] < *(double *)(8 * (LODWORD(v374) - 1)))
      {
        double v379 = *(double *)(8 * (LODWORD(v374) - 1));
        int v380 = LODWORD(v374);
      }
      uint64_t v381 = 0;
      float v382 = 0.0;
      do
      {
        float v383 = findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v381];
        if (v376 == v383)
        {
          *(_WORD *)&v1389[2 * SLODWORD(v382) + 18168] = v381 + 1;
          ++LODWORD(v382);
        }
        ++v381;
      }
      while (v381 != 9072);
      uint64_t v372 = 4 * v371;
      *(float *)&double v379 = v379;
      *(_DWORD *)(*(void *)v1341 + v372) = LODWORD(v379);
      LOWORD(v379) = *(_WORD *)&v1389[2 * v380 + 18166];
      *(float *)(v1355[0] + v372) = (float)vmovl_s16(*(int16x4_t *)&v379).i32[0];
      ++v371;
    }
    while (v371 != v1356.i64[0]);
  }
  __vImage_Buffer src = 0;
  *(float *)&int v1359 = v382;
  *(float *)&int v1358 = v374;
  int v384 = v1377;
  if ((int)v1377 >= 1)
  {
    int v385 = 16;
    if (v1377 >= 0x11)
    {
      do
      {
        if (v385 <= 0x3FFFFFFF) {
          v385 *= 2;
        }
        else {
          int v385 = 0x7FFFFFFF;
        }
      }
      while (v385 < (int)v1377);
    }
    operator new[]();
  }
  uint64_t v386 = 0;
  int v387 = 0;
  int v388 = v1336;
  uint64_t v389 = 0;
  int v390 = 0;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1375, v1377);
  int v1359 = v384;
  __asm { FMOV            V4.4S, #1.0 }
  float32x4_t v1292 = _Q4;
  unsigned int v1374 = v384;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1372, v384);
  float v393 = v10 + v10;
  float v394 = (float)(v10 + v10) + 108.0;
  int v1328 = (int)(float)((float)(v10 + v10) + 84.0);
  if (v1328 * (int)v394 >= 1) {
    memset_pattern16(v1397, &unk_259120E90, 4 * (v1328 * (int)v394));
  }
  int8x8_t v395 = &xmmword_26A0EFC70;
  uint64_t v396 = 108;
  int8x8_t v397 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::c_XC;
  do
  {
    memcpy(v397, v395, 0x2A0uLL);
    v397 += 42;
    v395 += 51;
    --v396;
  }
  while (v396);
  int v399 = (int)(float)(v10 + 1.0);
  int v400 = (int)(float)(v10 + 108.0);
  int v401 = v400 - v399;
  int v402 = v1328;
  if (v400 >= v399)
  {
    uint64_t v411 = 0;
    uint64_t v412 = 0;
    int v413 = (int)(float)(v10 + 84.0) - v399;
    uint64_t v414 = (v413 + 1);
    uint64_t v415 = (v401 + 1);
    int v416 = v399 - 1 + (v399 - 1) * v1328;
    int v417 = &xmmword_26A118CB8;
    int v418 = v416;
    do
    {
      if ((v413 & 0x80000000) == 0)
      {
        if ((v413 + 1) >= 8
          && (v416 + (int)v412 * v402 + v413 >= v416 + (int)v412 * v402
            ? (_ZF = (unint64_t)(v414 - 1) >> 32 == 0)
            : (_ZF = 0),
              _ZF))
        {
          int v426 = v418;
          int8x8_t v427 = (float64x2_t *)v417;
          uint64_t v428 = v414 & 0xFFFFFFF8;
          do
          {
            float64x2_t v430 = v427[-2];
            float64x2_t v429 = v427[-1];
            float64x2_t v432 = *v427;
            float64x2_t v431 = v427[1];
            v427 += 4;
            float32x4_t v433 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v430), v429);
            int16x8_t v398 = (int16x8_t)vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v432), v431);
            int v434 = (float32x4_t *)&v1397[v426];
            *int v434 = v433;
            v434[1] = (float32x4_t)v398;
            v426 += 8;
            v428 -= 8;
          }
          while (v428);
          uint64_t v420 = v414 & 0xFFFFFFF8;
          if (v420 == v414) {
            goto LABEL_359;
          }
        }
        else
        {
          uint64_t v420 = 0;
        }
        uint64_t v421 = v414 - v420;
        int v422 = v418 + v420;
        int8x8_t v423 = (double *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::c_XC
             + v420
             + v411;
        do
        {
          double v424 = *v423++;
          float v425 = v424;
          *(float *)&v1397[v422++] = v425;
          --v421;
        }
        while (v421);
      }
LABEL_359:
      ++v412;
      int v417 = (long long *)((char *)v417 + 8 * (int)v414);
      v418 += v402;
      v411 += (int)v414;
    }
    while (v412 != v415);
  }
  int v403 = v1377;
  if ((int)v1377 >= 1)
  {
    uint64_t v1325 = v1377;
    int v404 = (int)v393;
    uint64_t v405 = ((int)v393 + 1);
    double v406 = (double)(int)v393;
    uint64_t v1335 = (v405 * v405);
    double v407 = v406 * 0.5;
    double v408 = -(v406 * 0.5);
    double v409 = floor(v408);
    int v1327 = (int)v393;
    uint64_t v1286 = 0;
    int v1284 = 0;
    int v1285 = 0;
    uint64_t v1283 = 0;
    if (v409 == v408)
    {
      if (v404 < 0)
      {
        int v1358 = (int)v393 + 1;
        int v1359 = v1358;
        uint64_t v437 = v1335;
        int v438 = v1335;
        goto LABEL_451;
      }
      if (v405 < 4)
      {
        uint64_t v410 = 0;
        do
        {
LABEL_392:
          v1398[v410] = (double)(int)v410 - v407;
          ++v410;
        }
        while (v405 != v410);
        int v457 = v404 + 1;
        if (v409 != v408)
        {
LABEL_394:
          double v458 = floor(v406 + 0.5);
          double v459 = v458 - v407;
          if (vabdd_f64(v458 - v407, v407) >= fmax(fabs(v408), fabs(v407)) * 4.4408921e-16)
          {
            if (v459 - v407 <= 0.0) {
              double v458 = v458 + 1.0;
            }
            else {
              double v459 = v459 + -1.0;
            }
          }
          else
          {
            double v458 = v458 + 1.0;
            double v459 = (double)v404 * 0.5;
          }
          int v465 = (int)v458;
          v1400[0] = -v407;
          int v475 = (int)v458 - 1;
          v1400[v475] = v459;
          if ((int)v458 >= 1) {
            int v476 = (int)v458 - 1;
          }
          else {
            int v476 = (int)v458;
          }
          int v477 = v476 >> 1;
          if (v465 >= 5)
          {
            if (v477 <= 2) {
              int v478 = 2;
            }
            else {
              int v478 = v477;
            }
            int v479 = v478 - 1;
            do
            {
              v1400[1] = 1.0 - v407;
              v1400[v465 - 2] = v459 + -1.0;
              --v479;
            }
            while (v479);
          }
          if (v475 == 2 * v477)
          {
            v1400[v477] = (v459 - v407) * 0.5;
          }
          else
          {
            float v480 = &v1400[v477];
            *float v480 = (double)v477 - v407;
            v480[1] = v459 - (double)v477;
          }
          uint64_t v437 = v1335;
          goto LABEL_437;
        }
LABEL_413:
        int v465 = v404 + 1;
        uint64_t v437 = v1335;
        if (v404 < 0) {
          goto LABEL_437;
        }
        if (v405 >= 4)
        {
          uint64_t v466 = v405 & 0xFFFFFFFC;
          float64x2_t v468 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v407, 0);
          int32x2_t v469 = (int32x2_t)0x100000000;
          float v470 = (float64x2_t *)&v1401;
          uint64_t v471 = v466;
          do
          {
            int32x2_t v472 = vadd_s32(v469, (int32x2_t)0x200000002);
            v473.i64[0] = v469.i32[0];
            v473.i64[1] = v469.i32[1];
            float64x2_t v474 = vcvtq_f64_s64(v473);
            v473.i64[0] = v472.i32[0];
            v473.i64[1] = v472.i32[1];
            v470[-1] = vsubq_f64(v474, v468);
            *float v470 = vsubq_f64(vcvtq_f64_s64(v473), v468);
            int32x2_t v469 = vadd_s32(v469, (int32x2_t)0x400000004);
            v470 += 2;
            v471 -= 4;
          }
          while (v471);
          int v465 = v404 + 1;
          if (v466 == v405) {
            goto LABEL_437;
          }
        }
        else
        {
          uint64_t v466 = 0;
        }
        do
        {
          v1400[v466] = (double)(int)v466 - v407;
          ++v466;
        }
        while (v405 != v466);
        int v465 = v404 + 1;
LABEL_437:
        int v1358 = v457;
        int v1359 = v465;
        int v438 = v465 * v457;
        if (v457 >= 1)
        {
          LODWORD(v1354) = v465 * v457;
          uint64_t v481 = 0;
          uint64_t v482 = 0;
          v1355[0] = 8 * v465;
          float32x2_t v483 = (int16x8_t *)v1409;
          uint64_t v484 = v457;
          while (1)
          {
            if (v465 >= 1)
            {
              *(double *)v398.i64 = v1398[v482];
              float32x4_t v1356 = (float32x4_t)v398;
              memcpy(&v1406[8 * v465 * (int)v482], v1400, v1355[0]);
              if (v465 > 3)
              {
                uint64_t v486 = v1356.i64[0];
                int16x8_t v398 = (int16x8_t)vdupq_lane_s64(v1356.i64[0], 0);
                char v487 = v483;
                uint64_t v488 = v465 & 0xFFFFFFFC;
                do
                {
                  v487[-1] = v398;
                  *char v487 = v398;
                  v487 += 2;
                  v488 -= 4;
                }
                while (v488);
                uint64_t v485 = v465 & 0xFFFFFFFC;
                if (v485 == v465) {
                  goto LABEL_439;
                }
              }
              else
              {
                uint64_t v485 = 0;
                uint64_t v486 = v1356.i64[0];
              }
              uint64_t v489 = v465 - v485;
              char v490 = (uint64_t *)&v1408[8 * v485 + 8 * v481];
              do
              {
                *v490++ = v486;
                --v489;
              }
              while (v489);
            }
LABEL_439:
            ++v482;
            float32x2_t v483 = (int16x8_t *)((char *)v483 + 8 * v465);
            v481 += v465;
            if (v482 == v484)
            {
              int v402 = v1328;
              int v404 = v1327;
              uint64_t v437 = v1335;
              int v438 = v1354;
              goto LABEL_451;
            }
          }
        }
        int v402 = v1328;
LABEL_451:
        uint64_t v491 = v438;
        if (v438 >= 1)
        {
          if (v438 <= 3)
          {
            uint64_t v492 = 0;
            goto LABEL_457;
          }
          uint64_t v492 = v438 & 0xFFFFFFFC;
          char v493 = (float64x2_t *)&v1405;
          float v494 = (float64x2_t *)v1409;
          uint64_t v495 = v491 & 0xFFFFFFFC;
          do
          {
            int16x8_t v398 = (int16x8_t)vmulq_f64(v494[-1], v494[-1]);
            float64x2_t v496 = vmulq_f64(*v494, *v494);
            v493[-1] = (float64x2_t)v398;
            *char v493 = v496;
            v493 += 2;
            v494 += 2;
            v495 -= 4;
          }
          while (v495);
          if (v492 != v491)
          {
LABEL_457:
            uint64_t v497 = v491 - v492;
            uint64_t v498 = 8 * v492;
            char v499 = (double *)&v1404[v492];
            float v500 = (double *)&v1408[v498];
            do
            {
              double v501 = *v500++;
              *v499++ = v501 * v501;
              --v497;
            }
            while (v497);
          }
          if (v491 <= 3)
          {
            uint64_t v502 = 0;
            goto LABEL_464;
          }
          uint64_t v502 = v491 & 0xFFFFFFFC;
          float v503 = (float64x2_t *)&v1403;
          BOOL v504 = (float64x2_t *)&v1407;
          uint64_t v505 = v502;
          do
          {
            int16x8_t v398 = (int16x8_t)vmulq_f64(v504[-1], v504[-1]);
            float64x2_t v506 = vmulq_f64(*v504, *v504);
            v503[-1] = (float64x2_t)v398;
            *float v503 = v506;
            v503 += 2;
            v504 += 2;
            v505 -= 4;
          }
          while (v505);
          if (v502 != v491)
          {
LABEL_464:
            uint64_t v507 = v491 - v502;
            uint64_t v508 = 8 * v502;
            float v509 = (double *)&v1402[v502];
            float v510 = (double *)&v1406[v508];
            do
            {
              double v511 = *v510++;
              *v509++ = v511 * v511;
              --v507;
            }
            while (v507);
          }
        }
        uint64_t v512 = 0;
        v1313 = &v1412[16 * v491];
        __dst = &v1412[8 * (int)v491];
        v1312 = &v1412[24 * v491];
        int v1293 = v437 - 1;
        int v1326 = v491 - 1;
        int v1301 = 2 * v491 - 1;
        int v1300 = 3 * v491 - 1;
        int v1299 = 4 * v491 - 1;
        v1332 = (char *)&v1433 + 4;
        size_t v1310 = 8 * v491;
        std::locale __b = &v1412[32 * v491];
        uint64_t v513 = v405 & 0xFFFFFFFE;
        uint64_t v1315 = v437 & 0xFFFFFFE0;
        uint64_t v1288 = v437 & 0x18;
        uint64_t v514 = 4 * (int)v405;
        v1309 = &v1392;
        v1295 = (int8x16_t *)&v1384;
        v1287 = (float32x4_t *)&v1393;
        uint64_t v1317 = v437 & 0xFFFFFFF8;
        uint64_t v1303 = -v1317;
        v1294 = v1389;
        v1320 = &v1411;
        v398.i64[0] = 67305985;
        int16x8_t v1291 = v398;
        v1319 = v1388;
        v1290 = (char *)&v1385 + 4;
        v1297 = (double *)&v1413;
        v1298 = &v1396;
        v1305 = &v1432;
        v1306 = &v1435;
        v1334 = v1434;
        v1338 = v1416;
        v1329 = &v1414;
        v1289 = (char *)&v1419 + 8;
        uint64_t v1323 = v514;
        uint64_t v1324 = v491;
        while (2)
        {
          if ((v404 & 0x80000000) == 0)
          {
            uint64_t v520 = 0;
            float v521 = *(float *)(v1375[0] + 4 * v512);
            float v522 = *(float *)(v1372[0] + 4 * v512);
            float v523 = &v1391;
            while (1)
            {
              int v524 = ((int)(float)(v522 + (float)(int)v520) - 1) * v402;
              if (v405 >= 2)
              {
                uint64_t v526 = 0;
                do
                {
                  int v527 = v1397[(int)(float)(v521 + (float)(v526 + 1)) - 1 + v524];
                  float v528 = &v523->i32[v526];
                  *float v528 = v1397[(int)(float)(v521 + (float)(int)v526) - 1 + v524];
                  v528[1] = v527;
                  v526 += 2;
                }
                while (v513 != v526);
                uint64_t v525 = v405 & 0xFFFFFFFE;
                if (v513 == v405) {
                  goto LABEL_472;
                }
              }
              else
              {
                uint64_t v525 = 0;
              }
              do
              {
                v523->i32[v525] = v1397[(int)(float)(v521 + (float)(int)v525) - 1 + v524];
                ++v525;
              }
              while (v405 != v525);
LABEL_472:
              ++v520;
              float v523 = (int16x8_t *)((char *)v523 + v514);
              if (v520 == v405)
              {
                int v529 = v404;
                goto LABEL_482;
              }
            }
          }
          int v529 = v1359;
LABEL_482:
          int v1359 = v529;
          uint64_t v1340 = v512;
          if (v437 > 2)
          {
            unint64_t v530 = v1375[0];
            uint64_t v532 = v1372[0];
            v398.i32[0] = v1397[(int)(float)(*(float *)(v1375[0] + 4 * v512) + (float)(0 % (int)v405))
                              - 1
                              + ((int)(float)(*(float *)(v1372[0] + 4 * v512) + (float)(0 / (int)v405)) - 1) * v402];
            if ((int)v437 <= 1) {
              goto LABEL_494;
            }
            float v536 = (float *)&v1391.i32[1];
            uint64_t v537 = v437 - 1;
            int v535 = v1326;
            do
            {
              float v538 = *v536++;
              float v539 = v538;
              if (*(float *)v398.i32 > v538) {
                *(float *)v398.i32 = v539;
              }
              --v537;
            }
            while (v537);
          }
          else
          {
            unint64_t v530 = v1375[0];
            float v531 = *(float *)(v1375[0] + 4 * v512);
            uint64_t v532 = v1372[0];
            float v533 = *(float *)(v1372[0] + 4 * v512);
            v398.i32[0] = v1397[(int)v531 - 1 + ((int)v533 - 1) * v402];
            if (v437 == 1)
            {
              uint64_t v534 = 0;
              int v535 = v1326;
              goto LABEL_500;
            }
            int v540 = (int)(float)(v531 + (float)(v1293 % (int)v405))
                 + ((int)(float)(v533 + (float)(v1293 / (int)v405)) - 1) * v402
                 - 1;
            if (*(float *)v398.i32 > *(float *)&v1397[v540])
            {
              v398.i32[0] = v1397[v540];
LABEL_494:
              int v535 = v1326;
              if ((int)v393 != -1)
              {
LABEL_495:
                if (v437 < 8)
                {
                  uint64_t v534 = 0;
                  goto LABEL_500;
                }
                float32x4_t v541 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v398.i8, 0);
                float v542 = (float32x4_t *)v1309;
                uint64_t v543 = v1317;
                do
                {
                  float32x4_t v544 = vsubq_f32(*v542, v541);
                  v542[-1] = vsubq_f32(v542[-1], v541);
                  *float v542 = v544;
                  v542 += 2;
                  v543 -= 8;
                }
                while (v543);
                uint64_t v534 = v1317;
                if (v1317 != v437)
                {
LABEL_500:
                  uint64_t v545 = v437 - v534;
                  float v546 = (float *)&v1391.i32[v534];
                  do
                  {
                    *float v546 = *v546 - *(float *)v398.i32;
                    ++v546;
                    --v545;
                  }
                  while (v545);
                }
              }
LABEL_502:
              uint64_t v1353 = v532;
              unint64_t v1354 = v530;
              uint64_t v1339 = 4 * v512;
              if ((int)v491 >= 1)
              {
                size_t v547 = v1310;
                memcpy(v1412, v1404, v1310);
                memcpy(__dst, v1402, v547);
                memcpy(v1313, v1408, v547);
                memcpy(v1312, v1406, v547);
                memset_pattern16(__b, &unk_25911FA50, v547);
                uint64_t v437 = v1335;
              }
              v548.i64[0] = 0x100000001;
              v548.i64[1] = 0x100000001;
              v549.i64[0] = 0x101010101010101;
              v549.i64[1] = 0x101010101010101;
              if ((int)v393 == -1)
              {
LABEL_467:
                *(float *)&int v1359 = NAN;
                int16x8_t v1391 = 0uLL;
                v398.i64[0] = 0;
                float v515 = 0.0;
                float v1392 = 0.0;
                int v402 = v1328;
                int v404 = v1327;
                uint64_t v514 = v1323;
                LODWORD(v491) = v1324;
                uint64_t v517 = v1339;
                uint64_t v516 = v1340;
LABEL_468:
                unint64_t v518 = v1354;
                uint64_t v519 = v1353;
                goto LABEL_469;
              }
              if (v437 < 8)
              {
                uint64_t v550 = 0;
                goto LABEL_516;
              }
              if (v437 >= 0x20)
              {
                uint64_t v552 = v1287;
                float32x2_t v553 = v1295;
                uint64_t v554 = v1315;
                do
                {
                  int16x8_t v398 = (int16x8_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v552[-4]), (int16x8_t)vcgtzq_f32(v552[-3])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v552[-2]), (int16x8_t)vcgtzq_f32(v552[-1]))), v549);
                  int8x16_t v555 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(*v552), (int16x8_t)vcgtzq_f32(v552[1])), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtzq_f32(v552[2]), (int16x8_t)vcgtzq_f32(v552[3]))), v549);
                  v553[-1] = (int8x16_t)v398;
                  *float32x2_t v553 = v555;
                  v553 += 2;
                  v552 += 8;
                  v554 -= 32;
                }
                while (v554);
                if (v1315 != v437)
                {
                  uint64_t v550 = v1315;
                  uint64_t v551 = v1315;
                  if (!v1288) {
                    goto LABEL_516;
                  }
                  goto LABEL_513;
                }
              }
              else
              {
                uint64_t v551 = 0;
LABEL_513:
                uint64_t v556 = v1303 + v551;
                int v557 = (int8x8_t *)((char *)v1383 + v551);
                uint64_t v558 = (float32x4_t *)((char *)&v1391 + 4 * v551);
                do
                {
                  float32x4_t v559 = *v558;
                  float32x4_t v560 = v558[1];
                  v558 += 2;
                  int16x8_t v398 = vuzp1q_s16((int16x8_t)vcgtzq_f32(v559), (int16x8_t)vcgtzq_f32(v560));
                  *v557++ = vand_s8(vmovn_s16(v398), (int8x8_t)0x101010101010101);
                  v556 += 8;
                }
                while (v556);
                uint64_t v550 = v1317;
                if (v1317 != v437)
                {
LABEL_516:
                  uint64_t v561 = v437 - v550;
                  int v562 = (BOOL *)v1383 + v550;
                  int v563 = (float *)&v1391.i32[v550];
                  do
                  {
                    float v564 = *v563++;
                    *v562++ = v564 > 0.0;
                    --v561;
                  }
                  while (v561);
                }
              }
              LODWORD(v565) = 0;
              uint64_t v566 = (unsigned __int8 *)v1383;
              uint64_t v567 = v437;
              do
              {
                unsigned int v568 = v565;
                int v570 = *v566++;
                int v569 = v570;
                BOOL v571 = v570 != 0;
                if (v570) {
                  int64_t v565 = (v565 + 1);
                }
                else {
                  int64_t v565 = v565;
                }
                --v567;
              }
              while (v567);
              int v1316 = v569;
              uint64_t v572 = 0;
              do
              {
                if (*((unsigned char *)v1383 + v572))
                {
                  v1388[(int)v567 + 24] = v572 + 1;
                  LODWORD(v567) = v567 + 1;
                }
                ++v572;
              }
              while (v437 != v572);
              BOOL v1321 = v571;
              if (v565)
              {
                bzero(v1395, 4 * (v565 * v565));
                int v573 = v565 + 1;
                int64_t v574 = 0;
                if (v565 == 1) {
                  goto LABEL_529;
                }
                unsigned int v582 = ~v568 - (v1316 != 0);
                if (v573 >= 0) {
                  unsigned int v582 = v565 + 1;
                }
                unint64_t v583 = v582 * (unint64_t)(v565 - 1);
                BOOL v584 = (v583 & 0x80000000) != 0;
                if (v573 < 0) {
                  BOOL v584 = v583 > 0x80000000;
                }
                BOOL v585 = (v583 & 0xFFFFFFFF00000000) != 0;
                if (v584)
                {
LABEL_529:
                  v548.i64[0] = 0x100000001;
                  v548.i64[1] = 0x100000001;
                  uint64_t v437 = v1335;
                }
                else
                {
                  v548.i64[0] = 0x100000001;
                  v548.i64[1] = 0x100000001;
                  uint64_t v437 = v1335;
                  if (!v585)
                  {
                    int v586 = 0;
                    int64_t v574 = v565 & 0x7FFFFFFE;
                    float32x2_t v587 = v1294;
                    uint64_t v588 = v574;
                    do
                    {
                      float32x2_t v589 = &v1391.i8[4 * *v587];
                      v1395[v586] = v1391.i32[*(v587 - 1) - 1];
                      v1395[v573 + v586] = *((_DWORD *)v589 - 1);
                      v587 += 2;
                      v586 += 2 * v573;
                      v588 -= 2;
                    }
                    while (v588);
                    if (v574 == v565) {
                      goto LABEL_532;
                    }
                  }
                }
                uint64_t v575 = v565 - v574;
                int v576 = v574 * v573;
                int v577 = &v1388[v574 + 24];
                do
                {
                  uint64_t v578 = *v577++;
                  v1395[v576] = v1391.i32[v578 - 1];
                  v576 += v573;
                  --v575;
                }
                while (v575);
              }
LABEL_532:
              unsigned int v1322 = v568;
              if (v437 > 7)
              {
                if (v437 >= 0x20)
                {
                  int32x4_t v590 = 0uLL;
                  unint64_t v591 = v1295;
                  int32x4_t v592 = 0uLL;
                  uint64_t v593 = v1315;
                  int32x4_t v594 = 0uLL;
                  int32x4_t v595 = 0uLL;
                  int32x4_t v596 = 0uLL;
                  int32x4_t v597 = 0uLL;
                  int32x4_t v598 = 0uLL;
                  int32x4_t v599 = 0uLL;
                  do
                  {
                    uint8x16_t v600 = (uint8x16_t)vtstq_s8(v591[-1], v591[-1]);
                    uint16x8_t v601 = vmovl_u8(*(uint8x8_t *)v600.i8);
                    uint16x8_t v602 = vmovl_high_u8(v600);
                    uint8x16_t v603 = (uint8x16_t)vtstq_s8(*v591, *v591);
                    uint16x8_t v604 = vmovl_u8(*(uint8x8_t *)v603.i8);
                    uint16x8_t v605 = vmovl_high_u8(v603);
                    int32x4_t v595 = vaddq_s32(v595, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v602), v548));
                    int32x4_t v594 = vaddq_s32(v594, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v602.i8), v548));
                    int32x4_t v592 = vaddq_s32(v592, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v601), v548));
                    int32x4_t v590 = vaddq_s32(v590, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v601.i8), v548));
                    int32x4_t v599 = vaddq_s32(v599, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v605), v548));
                    int32x4_t v598 = vaddq_s32(v598, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v605.i8), v548));
                    int32x4_t v597 = vaddq_s32(v597, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v604), v548));
                    int32x4_t v596 = vaddq_s32(v596, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v604.i8), v548));
                    v591 += 2;
                    v593 -= 32;
                  }
                  while (v593);
                  int16x8_t v398 = (int16x8_t)vaddq_s32(vaddq_s32(vaddq_s32(v596, v590), vaddq_s32(v598, v594)), vaddq_s32(vaddq_s32(v597, v592), vaddq_s32(v599, v595)));
                  unsigned int v580 = vaddvq_s32((int32x4_t)v398);
                  uint64_t v581 = v1315;
                  if (v1315 == v437) {
                    goto LABEL_557;
                  }
                  uint64_t v579 = v1315;
                  if (!v1288) {
                    goto LABEL_553;
                  }
                }
                else
                {
                  unsigned int v580 = 0;
                  uint64_t v581 = 0;
                }
                int32x4_t v606 = 0uLL;
                int32x4_t v607 = (int32x4_t)v580;
                uint64_t v608 = v1303 + v581;
                unint64_t v609 = (int8x8_t *)((char *)v1383 + v581);
                do
                {
                  int8x8_t v610 = *v609++;
                  uint16x8_t v611 = vmovl_u8((uint8x8_t)vtst_s8(v610, v610));
                  int32x4_t v606 = vaddq_s32(v606, (int32x4_t)vandq_s8((int8x16_t)vmovl_high_u16(v611), v548));
                  int32x4_t v607 = vaddq_s32(v607, (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v611.i8), v548));
                  v608 += 8;
                }
                while (v608);
                int16x8_t v398 = (int16x8_t)vaddq_s32(v607, v606);
                unsigned int v580 = vaddvq_s32((int32x4_t)v398);
                uint64_t v579 = v1317;
                if (v1317 != v437) {
                  goto LABEL_553;
                }
              }
              else
              {
                uint64_t v579 = 0;
                unsigned int v580 = 0;
LABEL_553:
                uint64_t v612 = v437 - v579;
                float32x2_t v613 = (char *)v1383 + v579;
                do
                {
                  if (*v613++) {
                    ++v580;
                  }
                  --v612;
                }
                while (v612);
              }
LABEL_557:
              uint64_t v615 = 0;
              int v616 = 0;
              do
              {
                if (*((unsigned char *)v1383 + v615)) {
                  v1387[v616++ + 9072] = v615 + 1;
                }
                ++v615;
              }
              while (v437 != v615);
              uint64_t v1352 = 2 * v580;
              uint64_t v617 = 4 * v580;
              if (v580)
              {
                if (v580 == 1)
                {
                  uint64_t v618 = 0;
                  goto LABEL_569;
                }
                uint64_t v618 = v580 & 0xFFFFFFFE;
                float32x2_t v619 = v1319;
                float32x2_t v620 = v1320;
                uint64_t v621 = v618;
                do
                {
                  uint64_t v622 = *(void *)&v1412[8 * *v619 - 8];
                  *(v620 - 1) = *(void *)&v1412[8 * *(v619 - 1) - 8];
                  *float32x2_t v620 = v622;
                  v620 += 2;
                  v619 += 2;
                  v621 -= 2;
                }
                while (v621);
                if (v618 != v580)
                {
LABEL_569:
                  uint64_t v623 = v580 - v618;
                  float32x2_t v624 = &v1410 + v618;
                  float32x2_t v625 = &v1387[v618 + 9072];
                  do
                  {
                    uint64_t v626 = *v625++;
                    *v624++ = *(void *)&v1412[8 * v626 - 8];
                    --v623;
                  }
                  while (v623);
                }
                if (v580 < 2)
                {
                  uint64_t v627 = 0;
                  goto LABEL_576;
                }
                uint64_t v627 = v580 & 0xFFFFFFFE;
                int v628 = v1319;
                uint64_t v629 = &v1320[v580];
                uint64_t v630 = v627;
                do
                {
                  uint64_t v631 = *(void *)&v1412[8 * v535 + 8 * *v628];
                  *(v629 - 1) = *(void *)&v1412[8 * v535 + 8 * *(v628 - 1)];
                  *uint64_t v629 = v631;
                  v629 += 2;
                  v628 += 2;
                  v630 -= 2;
                }
                while (v630);
                if (v627 != v580)
                {
LABEL_576:
                  uint64_t v632 = v580 - v627;
                  uint64_t v633 = &v1410 + v627 + v580;
                  float32x4_t v634 = &v1387[v627 + 9072];
                  do
                  {
                    int v635 = *v634++;
                    *v633++ = *(void *)&v1412[8 * v535 + 8 * v635];
                    --v632;
                  }
                  while (v632);
                }
                if (v580 < 2)
                {
                  uint64_t v636 = 0;
                  int v638 = v1300;
                  int v637 = v1301;
                  goto LABEL_583;
                }
                uint64_t v636 = v580 & 0xFFFFFFFE;
                float32x2_t v639 = &v1320[v1352];
                float32x2_t v640 = v1319;
                uint64_t v641 = v636;
                int v638 = v1300;
                int v637 = v1301;
                do
                {
                  uint64_t v642 = *(void *)&v1412[8 * v637 + 8 * *v640];
                  *(v639 - 1) = *(void *)&v1412[8 * v637 + 8 * *(v640 - 1)];
                  *float32x2_t v639 = v642;
                  v639 += 2;
                  v640 += 2;
                  v641 -= 2;
                }
                while (v641);
                if (v636 != v580)
                {
LABEL_583:
                  uint64_t v643 = v580 - v636;
                  float32x2_t v644 = &v1410 + v636 + v1352;
                  uint64_t v645 = &v1387[v636 + 9072];
                  do
                  {
                    int v646 = *v645++;
                    *v644++ = *(void *)&v1412[8 * v637 + 8 * v646];
                    --v643;
                  }
                  while (v643);
                }
                uint64_t v647 = 3 * v580;
                if (v580 < 2)
                {
                  uint64_t v648 = 0;
                  goto LABEL_590;
                }
                uint64_t v648 = v580 & 0xFFFFFFFE;
                int v649 = v1319;
                int v650 = &v1320[v647];
                uint64_t v651 = v648;
                do
                {
                  uint64_t v652 = *(void *)&v1412[8 * v638 + 8 * *v649];
                  *(v650 - 1) = *(void *)&v1412[8 * v638 + 8 * *(v649 - 1)];
                  *int v650 = v652;
                  v650 += 2;
                  v649 += 2;
                  v651 -= 2;
                }
                while (v651);
                if (v648 != v580)
                {
LABEL_590:
                  uint64_t v653 = v580 - v648;
                  int v654 = &v1410 + v648 + v647;
                  uint64_t v655 = &v1387[v648 + 9072];
                  do
                  {
                    int v656 = *v655++;
                    *v654++ = *(void *)&v1412[8 * v638 + 8 * v656];
                    --v653;
                  }
                  while (v653);
                }
                if (v580 < 2)
                {
                  uint64_t v657 = 0;
                  int v658 = v1299;
                  goto LABEL_597;
                }
                uint64_t v657 = v580 & 0xFFFFFFFE;
                int v659 = v1319;
                int v660 = &v1320[v617];
                uint64_t v661 = v657;
                int v658 = v1299;
                do
                {
                  uint64_t v662 = *(void *)&v1412[8 * v658 + 8 * *v659];
                  *(v660 - 1) = *(void *)&v1412[8 * v658 + 8 * *(v659 - 1)];
                  *int v660 = v662;
                  v660 += 2;
                  v659 += 2;
                  v661 -= 2;
                }
                while (v661);
                if (v657 != v580)
                {
LABEL_597:
                  uint64_t v663 = v580 - v657;
                  uint64_t v664 = &v1410 + v657 + v617;
                  uint64_t v665 = &v1387[v657 + 9072];
                  do
                  {
                    int v666 = *v665++;
                    *v664++ = *(void *)&v1412[8 * v658 + 8 * v666];
                    --v663;
                  }
                  while (v663);
                }
                int v1359 = 5 * v580;
                memcpy(v1412, &v1410, 40 * v580);
                uint64_t v437 = v1335;
                if (!v565) {
                  goto LABEL_467;
                }
              }
              else if (!v565)
              {
                goto LABEL_467;
              }
              if (v565 <= 1)
              {
                int64_t v667 = 0;
                goto LABEL_605;
              }
              int64_t v667 = v565 & 0x7FFFFFFE;
              int v668 = v1294;
              uint64_t v669 = v1290;
              uint64_t v670 = v667;
              do
              {
                int v671 = v1391.i32[*v668 - 1];
                *(v669 - 1) = v1391.i32[*(v668 - 1) - 1];
                *uint64_t v669 = v671;
                v669 += 2;
                v668 += 2;
                v670 -= 2;
              }
              while (v670);
              if (v667 != v565)
              {
LABEL_605:
                uint64_t v672 = v565 - v667;
                unint64_t v673 = (_DWORD *)&v1385 + v667;
                uint64_t v674 = &v1388[v667 + 24];
                do
                {
                  uint64_t v675 = *v674++;
                  *v673++ = v1391.i32[v675 - 1];
                  --v672;
                }
                while (v672);
              }
              if (v565 <= 1)
              {
                int64_t v676 = 0;
                goto LABEL_612;
              }
              int64_t v676 = v565 & 0x7FFFFFFE;
              v677 = (uint64_t *)&v1385;
              uint64_t v678 = v676;
              do
              {
                v398.i64[0] = *v677;
                *(int16x8_t *)v1355 = v398;
                *(float *)&uint64_t v679 = logf(COERCE_FLOAT(HIDWORD(*v677)));
                v1356.i64[0] = v679;
                *(float *)v398.i32 = logf(*(float *)v1355);
                v398.i32[1] = v1356.i32[0];
                *v677++ = v398.i64[0];
                v678 -= 2;
              }
              while (v678);
              if (v676 != v565)
              {
LABEL_612:
                uint64_t v680 = v565 - v676;
                v681 = (float *)&v1385 + v676;
                do
                {
                  float *v681 = logf(*v681);
                  ++v681;
                  --v680;
                }
                while (v680);
              }
              v1355[0] = 4 * v565;
              bzero(&v1391, 4 * v565);
              unsigned int v683 = 0;
              uint64_t v684 = 0;
              uint64_t v685 = (float32x4_t *)v1309;
              uint64_t v686 = v1298;
              while (2)
              {
                v682.i32[0] = *((_DWORD *)&v1385 + v684);
                uint64_t v687 = v683;
                if (v565 < 8)
                {
                  int64_t v688 = 0;
                  goto LABEL_621;
                }
                int v689 = (float32x4_t *)&v686[v683];
                float32x4_t v690 = (float32x4_t)vdupq_lane_s32(v682, 0);
                uint64_t v691 = v685;
                int64_t v692 = v565 & 0x7FFFFFF8;
                do
                {
                  float32x4_t v693 = vmlaq_f32(*v691, *v689, v690);
                  v691[-1] = vmlaq_f32(v691[-1], v689[-1], v690);
                  *uint64_t v691 = v693;
                  v691 += 2;
                  v689 += 2;
                  v692 -= 8;
                }
                while (v692);
                int64_t v688 = v565 & 0x7FFFFFF8;
                if (v688 != v565)
                {
LABEL_621:
                  uint64_t v694 = v565 - v688;
                  uint64_t v695 = (float *)&v1391.i32[v688];
                  double v696 = (float *)&v1395[v688 + v687];
                  do
                  {
                    float v697 = *v696++;
                    *uint64_t v695 = *v695 + (float)(*(float *)v682.i32 * v697);
                    ++v695;
                    --v694;
                  }
                  while (v694);
                }
                ++v684;
                unsigned int v683 = v687 + v565;
                if (v684 != v565) {
                  continue;
                }
                break;
              }
              int64_t v1333 = v565 & 0x7FFFFFF8;
              uint64_t v698 = 0;
              uint64_t v699 = 2 * v565;
              uint64_t v700 = 3 * v565;
              unint64_t v701 = v565 - 1;
              unint64_t v702 = (v565 - 1) * (unint64_t)v565;
              int64_t v703 = v565 & 0x7FFFFFFE;
              uint64_t v704 = v580;
              v705 = v1297;
              v706 = &v1297[v704];
              uint64_t v707 = &v1412[v704 * 8];
              uint64_t v708 = v1352;
              unint64_t v709 = &v1297[v708];
              int32x4_t v710 = &v1412[v708 * 8];
              uint64_t v711 = v1352 + v580;
              v712 = &v1297[v711];
              v713 = &v1412[v711 * 8];
              uint64_t v714 = 4 * v580;
              int32x4_t v715 = &v1297[v714];
              uint64_t v716 = &v1412[v714 * 8];
              int v717 = v1355[0];
              while (2)
              {
                float v718 = 0.0;
                if (v565 < 2)
                {
                  int64_t v719 = 0;
                  goto LABEL_636;
                }
                int64_t v719 = 0;
                if (__CFADD__(v698, v702) || (v702 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_636;
                }
                if (HIDWORD(v701)) {
                  goto LABEL_636;
                }
                uint64_t v721 = v698;
                v722 = v705;
                int64_t v723 = v565 & 0x7FFFFFFE;
                float v724 = 0.0;
                do
                {
                  float v725 = *(v722 - 1);
                  float v726 = *v722;
                  float v718 = v718 + (float)(*(float *)&v1395[v721] * v725);
                  float v724 = v724 + (float)(*(float *)&v1395[(v565 + v721)] * v726);
                  v722 += 2;
                  v721 += v699;
                  v723 -= 2;
                }
                while (v723);
                float v718 = v724 + v718;
                int64_t v719 = v565 & 0x7FFFFFFE;
                if (v703 != v565)
                {
LABEL_636:
                  uint64_t v727 = v698 + v565 * (unint64_t)v719;
                  do
                  {
                    float v728 = *(double *)&v1412[8 * v719];
                    float v718 = v718 + (float)(*(float *)&v1395[v727] * v728);
                    ++v719;
                    v727 += v565;
                  }
                  while (v565 != v719);
                }
                *((float *)&v1424 + v698) = v718;
                float v729 = 0.0;
                if (v565 < 2)
                {
                  int64_t v730 = 0;
                  goto LABEL_648;
                }
                int64_t v730 = 0;
                if (__CFADD__(v698, v702) || (v702 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_648;
                }
                if (HIDWORD(v701)) {
                  goto LABEL_648;
                }
                uint64_t v732 = v698;
                double v733 = v706;
                int64_t v734 = v565 & 0x7FFFFFFE;
                float v735 = 0.0;
                do
                {
                  float v736 = *(v733 - 1);
                  float v737 = *v733;
                  float v729 = v729 + (float)(*(float *)&v1395[v732] * v736);
                  float v735 = v735 + (float)(*(float *)&v1395[(v565 + v732)] * v737);
                  v733 += 2;
                  v732 += v699;
                  v734 -= 2;
                }
                while (v734);
                float v729 = v735 + v729;
                int64_t v730 = v565 & 0x7FFFFFFE;
                if (v703 != v565)
                {
LABEL_648:
                  uint64_t v738 = v698 + v565 * (unint64_t)v730;
                  do
                  {
                    float v739 = *(double *)&v707[8 * v730];
                    float v729 = v729 + (float)(*(float *)&v1395[v738] * v739);
                    ++v730;
                    v738 += v565;
                  }
                  while (v565 != v730);
                }
                *((float *)&v1424 + (v565 + v698)) = v729;
                float v740 = 0.0;
                if (v565 < 2)
                {
                  int64_t v741 = 0;
                  goto LABEL_660;
                }
                int64_t v741 = 0;
                if (__CFADD__(v698, v702) || (v702 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_660;
                }
                if (HIDWORD(v701)) {
                  goto LABEL_660;
                }
                uint64_t v743 = v698;
                unint64_t v744 = v709;
                int64_t v745 = v565 & 0x7FFFFFFE;
                float v746 = 0.0;
                do
                {
                  float v747 = *(v744 - 1);
                  float v748 = *v744;
                  float v740 = v740 + (float)(*(float *)&v1395[v743] * v747);
                  float v746 = v746 + (float)(*(float *)&v1395[(v565 + v743)] * v748);
                  v744 += 2;
                  v743 += v699;
                  v745 -= 2;
                }
                while (v745);
                float v740 = v746 + v740;
                int64_t v741 = v565 & 0x7FFFFFFE;
                if (v703 != v565)
                {
LABEL_660:
                  uint64_t v749 = v698 + v565 * (unint64_t)v741;
                  do
                  {
                    float v750 = *(double *)&v710[8 * v741];
                    float v740 = v740 + (float)(*(float *)&v1395[v749] * v750);
                    ++v741;
                    v749 += v565;
                  }
                  while (v565 != v741);
                }
                *((float *)&v1424 + (v699 + v698)) = v740;
                float v751 = 0.0;
                if (v565 < 2)
                {
                  int64_t v752 = 0;
                  goto LABEL_672;
                }
                int64_t v752 = 0;
                if (__CFADD__(v698, v702) || (v702 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_672;
                }
                if (HIDWORD(v701)) {
                  goto LABEL_672;
                }
                uint64_t v754 = v698;
                float64x2_t v755 = v712;
                int64_t v756 = v565 & 0x7FFFFFFE;
                float v757 = 0.0;
                do
                {
                  float v758 = *(v755 - 1);
                  float v759 = *v755;
                  float v751 = v751 + (float)(*(float *)&v1395[v754] * v758);
                  float v757 = v757 + (float)(*(float *)&v1395[(v565 + v754)] * v759);
                  v755 += 2;
                  v754 += v699;
                  v756 -= 2;
                }
                while (v756);
                float v751 = v757 + v751;
                int64_t v752 = v565 & 0x7FFFFFFE;
                if (v703 != v565)
                {
LABEL_672:
                  uint64_t v760 = v698 + v565 * (unint64_t)v752;
                  do
                  {
                    float v761 = *(double *)&v713[8 * v752];
                    float v751 = v751 + (float)(*(float *)&v1395[v760] * v761);
                    ++v752;
                    v760 += v565;
                  }
                  while (v565 != v752);
                }
                *((float *)&v1424 + (v700 + v698)) = v751;
                float v762 = 0.0;
                if (v565 < 2)
                {
                  int64_t v763 = 0;
                  goto LABEL_684;
                }
                int64_t v763 = 0;
                if (__CFADD__(v698, v702) || (v702 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_684;
                }
                if (HIDWORD(v701)) {
                  goto LABEL_684;
                }
                uint64_t v765 = v698;
                uint64_t v766 = v715;
                int64_t v767 = v565 & 0x7FFFFFFE;
                float v768 = 0.0;
                do
                {
                  float v769 = *(v766 - 1);
                  float v770 = *v766;
                  float v762 = v762 + (float)(*(float *)&v1395[v765] * v769);
                  float v768 = v768 + (float)(*(float *)&v1395[(v565 + v765)] * v770);
                  v766 += 2;
                  v765 += v699;
                  v767 -= 2;
                }
                while (v767);
                float v762 = v768 + v762;
                int64_t v763 = v565 & 0x7FFFFFFE;
                if (v703 != v565)
                {
LABEL_684:
                  uint64_t v771 = v698 + v565 * (unint64_t)v763;
                  do
                  {
                    float v772 = *(double *)&v716[8 * v763];
                    float v762 = v762 + (float)(*(float *)&v1395[v771] * v772);
                    ++v763;
                    v771 += v565;
                  }
                  while (v565 != v763);
                }
                *((float *)&v1424 + (v717 + v698++)) = v762;
                if (v698 != v565) {
                  continue;
                }
                break;
              }
              int v1359 = 5 * v565 - 1;
              int v1358 = v565;
              if (v565 == 5)
              {
                uint64_t v773 = 0;
                uint64_t v774 = 0;
                long long v1421 = v1428;
                long long v1422 = v1429;
                float v1423 = v1430;
                long long v1417 = v1424;
                long long v1418 = v1425;
                long long v1419 = v1426;
                long long v1420 = v1427;
                int16x8_t v398 = v1291;
                LODWORD(v1433) = v1291.i32[0];
                uint64_t v775 = (float *)&v1417;
                uint64_t v776 = (int *)v1289;
                uint64_t v777 = 6;
                BYTE4(v1433) = 5;
                int v402 = v1328;
                int v404 = v1327;
                uint64_t v514 = v1323;
                LODWORD(v491) = v1324;
                uint64_t v517 = v1339;
                uint64_t v516 = v1340;
                do
                {
                  float v778 = *v775;
                  float v779 = fabsf(*v775);
                  float v780 = fabsf(v775[1]);
                  unsigned int v781 = v780 > v779;
                  if (v773 != 18)
                  {
                    if (v780 > v779) {
                      float v779 = v780;
                    }
                    float v782 = fabsf(v775[2]);
                    if (v782 > v779) {
                      unsigned int v781 = 2;
                    }
                    if (v773 != 12)
                    {
                      if (v782 > v779) {
                        float v779 = v782;
                      }
                      float v783 = fabsf(v775[3]);
                      if (v783 > v779) {
                        unsigned int v781 = 3;
                      }
                      if (v773 != 6)
                      {
                        if (v783 > v779) {
                          float v779 = v783;
                        }
                        if (fabsf(v775[4]) > v779) {
                          unsigned int v781 = 4;
                        }
                      }
                    }
                  }
                  if (*((float *)&v1417 + v773 + v781) != 0.0)
                  {
                    if (v781)
                    {
                      int v784 = v774 + v781;
                      v1434[v774 - 4] = v784 + 1;
                      int v785 = *(v776 - 10);
                      float64x2_t v786 = (int *)&v1417 + v784;
                      *(v776 - 10) = *v786;
                      *float64x2_t v786 = v785;
                      int v787 = *(v776 - 5);
                      *(v776 - 5) = v786[5];
                      v786[5] = v787;
                      int v788 = *v776;
                      *uint64_t v776 = v786[10];
                      v786[10] = v788;
                      int v789 = v776[5];
                      v776[5] = v786[15];
                      v786[15] = v789;
                      int v790 = v776[10];
                      v776[10] = v786[20];
                      v786[20] = v790;
                      float v778 = *v775;
                    }
                    v775[1] = v775[1] / v778;
                    if (v773 + 3 != v777)
                    {
                      v775[2] = v775[2] / *v775;
                      if (v773 + 4 != v777)
                      {
                        v775[3] = v775[3] / *v775;
                        if (v773 + 5 != v777) {
                          v775[4] = v775[4] / *v775;
                        }
                      }
                    }
                  }
                  uint64_t v791 = v777 + 5;
                  float v792 = v775[5];
                  if (v792 != 0.0)
                  {
                    v775[6] = v775[6] - (float)(v775[1] * v792);
                    if (v773 + 8 != v791)
                    {
                      v775[7] = v775[7] - (float)(v775[2] * v792);
                      if (v773 + 9 != v791)
                      {
                        v775[8] = v775[8] - (float)(v775[3] * v792);
                        if (v773 + 10 != v791) {
                          v775[9] = v775[9] - (float)(v775[4] * v792);
                        }
                      }
                    }
                  }
                  if (v773 != 18)
                  {
                    float v793 = v775[10];
                    if (v793 != 0.0)
                    {
                      v775[11] = v775[11] - (float)(v775[1] * v793);
                      if (v773 + 13 != v777 + 10)
                      {
                        v775[12] = v775[12] - (float)(v775[2] * v793);
                        if (v773 + 14 != v777 + 10)
                        {
                          v775[13] = v775[13] - (float)(v775[3] * v793);
                          if (v773 + 10 != v791) {
                            v775[14] = v775[14] - (float)(v775[4] * v793);
                          }
                        }
                      }
                    }
                    if (v773 != 12)
                    {
                      float v794 = v775[15];
                      if (v794 != 0.0)
                      {
                        v775[16] = v775[16] - (float)(v775[1] * v794);
                        if (v773 + 18 != v777 + 15)
                        {
                          v775[17] = v775[17] - (float)(v775[2] * v794);
                          if (v773 + 19 != v777 + 15)
                          {
                            v775[18] = v775[18] - (float)(v775[3] * v794);
                            if (v773 + 10 != v791) {
                              v775[19] = v775[19] - (float)(v775[4] * v794);
                            }
                          }
                        }
                      }
                      if (v773 != 6)
                      {
                        float v795 = v775[20];
                        if (v795 != 0.0)
                        {
                          v775[21] = v775[21] - (float)(v775[1] * v795);
                          if (v773 + 23 != v777 + 20)
                          {
                            v775[22] = v775[22] - (float)(v775[2] * v795);
                            if (v773 + 24 != v777 + 20)
                            {
                              v775[23] = v775[23] - (float)(v775[3] * v795);
                              if (v773 + 10 != v791) {
                                v775[24] = v775[24] - (float)(v775[4] * v795);
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  uint64_t v796 = (char)v1434[v774 - 4];
                  uint64_t v797 = v774 + 1;
                  if (v774 + 1 != v796)
                  {
                    uint64_t v798 = v774;
                    int v799 = v1391.i32[v798];
                    uint64_t v800 = (int)v796 - 1;
                    v1391.i32[v798] = v1391.i32[v800];
                    v1391.i32[v800] = v799;
                  }
                  v777 += 5;
                  v773 += 6;
                  ++v776;
                  v775 += 6;
                  uint64_t v774 = v797;
                }
                while (v773 != 24);
                float v806 = *(float *)&v1391.i32[1];
                v398.i32[0] = v1391.i32[0];
                float v807 = *(float *)&v1391.i32[3];
                float v515 = *(float *)&v1391.i32[2];
                float v808 = v1392;
                if (*(float *)v1391.i32 != 0.0)
                {
                  float v806 = *(float *)&v1391.i32[1] - (float)(*((float *)&v1417 + 1) * *(float *)v1391.i32);
                  float v515 = *(float *)&v1391.i32[2] - (float)(*((float *)&v1417 + 2) * *(float *)v1391.i32);
                  *(float *)&v1391.i32[1] = v806;
                  *(float *)&v1391.i32[2] = v515;
                  float v807 = *(float *)&v1391.i32[3] - (float)(*((float *)&v1417 + 3) * *(float *)v1391.i32);
                  float v808 = v1392 - (float)(*(float *)&v1418 * *(float *)v1391.i32);
                  *(float *)&v1391.i32[3] = v807;
                  float v1392 = v808;
                }
                uint64_t v437 = v1335;
                if (v806 != 0.0)
                {
                  float v515 = v515 - (float)(*((float *)&v1418 + 3) * v806);
                  float v807 = v807 - (float)(*(float *)&v1419 * v806);
                  v1391.i64[1] = __PAIR64__(LODWORD(v807), LODWORD(v515));
                  float v808 = v808 - (float)(*((float *)&v1419 + 1) * v806);
                  float v1392 = v808;
                }
                if (v515 != 0.0)
                {
                  float v807 = v807 - (float)(*((float *)&v1420 + 1) * v515);
                  float v808 = v808 - (float)(*((float *)&v1420 + 2) * v515);
                  *(float *)&v1391.i32[3] = v807;
                  float v1392 = v808;
                }
                if (v807 != 0.0)
                {
                  float v808 = v808 - (float)(*((float *)&v1421 + 3) * v807);
                  float v1392 = v808;
                }
                if (v808 != 0.0)
                {
                  float v809 = v808 / v1423;
                  *(float *)v398.i32 = *(float *)v1391.i32 - (float)(*(float *)&v1422 * v809);
                  float v806 = v806 - (float)(*((float *)&v1422 + 1) * v809);
                  float v515 = v515 - (float)(*((float *)&v1422 + 2) * v809);
                  v1391.i32[0] = v398.i32[0];
                  *(uint64_t *)((char *)v1391.i64 + 4) = __PAIR64__(LODWORD(v515), LODWORD(v806));
                  float v807 = v807 - (float)(*((float *)&v1422 + 3) * v809);
                  *(float *)&v1391.i32[3] = v807;
                  float v1392 = v809;
                }
                if (v807 != 0.0)
                {
                  *(float *)&unsigned int v810 = v807 / *((float *)&v1421 + 2);
                  *(float *)v398.i32 = *(float *)v398.i32 - (float)(*((float *)&v1420 + 3) * *(float *)&v810);
                  float v806 = v806 - (float)(*(float *)&v1421 * *(float *)&v810);
                  v1391.i64[0] = __PAIR64__(LODWORD(v806), v398.u32[0]);
                  float v515 = v515 - (float)(*((float *)&v1421 + 1) * *(float *)&v810);
                  v1391.i64[1] = __PAIR64__(v810, LODWORD(v515));
                }
                if (v515 != 0.0)
                {
                  float v515 = v515 / *(float *)&v1420;
                  *(float *)v398.i32 = *(float *)v398.i32 - (float)(*((float *)&v1419 + 2) * v515);
                  float v806 = v806 - (float)(*((float *)&v1419 + 3) * v515);
                  v1391.i64[0] = __PAIR64__(LODWORD(v806), v398.u32[0]);
                  *(float *)&v1391.i32[2] = v515;
                }
                if (v806 != 0.0)
                {
                  *(float *)&unsigned int v811 = v806 / *((float *)&v1418 + 2);
                  *(float *)v398.i32 = *(float *)v398.i32 - (float)(*((float *)&v1418 + 1) * *(float *)&v811);
                  v1391.i64[0] = __PAIR64__(v811, v398.u32[0]);
                }
                if (*(float *)v398.i32 != 0.0)
                {
                  *(float *)v398.i32 = *(float *)v398.i32 / *(float *)&v1417;
                  v1391.i32[0] = v398.i32[0];
                }
                goto LABEL_468;
              }
              memcpy(&v1433, &v1424, 4 * (5 * v565));
              if ((int)v565 >= 5) {
                uint64_t v801 = 5;
              }
              else {
                uint64_t v801 = v565;
              }
              uint64_t v1350 = v801;
              bzero(v1443, 4 * v801);
              v1441[1] = 0;
              v1441[0] = 0;
              int v1442 = 0;
              char v1381 = 1;
              float64x2_t v802 = v1332;
              if (v565 == 1)
              {
                v1439.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(fabsf(*((float *)&v1424 + 1))), COERCE_UNSIGNED_INT(fabsf(*(float *)&v1424)));
                v1439.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(fabsf(*((float *)&v1424 + 3))), COERCE_UNSIGNED_INT(fabsf(*((float *)&v1424 + 2))));
                int16x8_t v1437 = v1439;
                int v1382 = 84148994;
                float v803 = fabsf(*(float *)&v1425);
                v804.i64[0] = 0x7300000073000000;
                v804.i64[1] = 0x7300000073000000;
                float64x2_t v805 = v1305;
              }
              else
              {
                float v812 = 0.0;
                uint64_t v813 = (float *)&v1424;
                float v814 = 1.2925e-26;
                int64_t v815 = v565;
                v804.i64[0] = 0x7300000073000000;
                v804.i64[1] = 0x7300000073000000;
                float64x2_t v805 = v1305;
                do
                {
                  float v816 = *v813++;
                  float v817 = fabsf(v816);
                  float v818 = (float)((float)((float)(v814 / v817) * (float)(v814 / v817)) * v812) + 1.0;
                  float v812 = v812 + (float)((float)(v817 / v814) * (float)(v817 / v814));
                  if (v817 > v814)
                  {
                    float v814 = v817;
                    float v812 = v818;
                  }
                  --v815;
                }
                while (v815);
                *(float *)v1439.i32 = sqrtf(v812) * v814;
                v1437.i32[0] = v1439.i32[0];
                LOBYTE(v1382) = 2;
                float v819 = 0.0;
                float v820 = 1.2925e-26;
                int64_t v821 = v565;
                do
                {
                  float v822 = fabsf(*((float *)&v1424 + v821));
                  float v823 = (float)((float)((float)(v820 / v822) * (float)(v820 / v822)) * v819) + 1.0;
                  float v819 = v819 + (float)((float)(v822 / v820) * (float)(v822 / v820));
                  if (v822 > v820)
                  {
                    float v820 = v822;
                    float v819 = v823;
                  }
                  unint64_t v824 = v821 + 2;
                  ++v821;
                }
                while (v824 < 2 * v565 + 1);
                *(float *)&v1439.i32[1] = sqrtf(v819) * v820;
                v1437.i32[1] = v1439.i32[1];
                BYTE1(v1382) = 3;
                unint64_t v825 = (v699 | 1) + v565;
                float v826 = 0.0;
                float v827 = 1.2925e-26;
                do
                {
                  float v828 = fabsf(*((float *)&v1424 + v699));
                  float v829 = (float)((float)((float)(v827 / v828) * (float)(v827 / v828)) * v826) + 1.0;
                  float v826 = v826 + (float)((float)(v828 / v827) * (float)(v828 / v827));
                  if (v828 > v827)
                  {
                    float v827 = v828;
                    float v826 = v829;
                  }
                  unint64_t v830 = v699 + 2;
                  ++v699;
                }
                while (v830 < v825);
                *(float *)&v1439.i32[2] = sqrtf(v826) * v827;
                v1437.i32[2] = v1439.i32[2];
                BYTE2(v1382) = 4;
                float v831 = 0.0;
                float v832 = 1.2925e-26;
                do
                {
                  float v833 = fabsf(*((float *)&v1424 + v700));
                  float v834 = (float)((float)((float)(v832 / v833) * (float)(v832 / v833)) * v831) + 1.0;
                  float v831 = v831 + (float)((float)(v833 / v832) * (float)(v833 / v832));
                  if (v833 > v832)
                  {
                    float v832 = v833;
                    float v831 = v834;
                  }
                  unint64_t v835 = v700 + 2;
                  ++v700;
                }
                while (v835 < 4 * v565 + 1);
                *(float *)&v1439.i32[3] = sqrtf(v831) * v832;
                v1437.i32[3] = v1439.i32[3];
                HIBYTE(v1382) = 5;
                float v836 = 0.0;
                float v837 = 1.2925e-26;
                size_t v838 = v1355[0];
                do
                {
                  float v839 = fabsf(*((float *)&v1424 + v838));
                  float v840 = (float)((float)((float)(v837 / v839) * (float)(v837 / v839)) * v836) + 1.0;
                  float v836 = v836 + (float)((float)(v839 / v837) * (float)(v839 / v837));
                  if (v839 > v837)
                  {
                    float v837 = v839;
                    float v836 = v840;
                  }
                  size_t v841 = v838 + 2;
                  ++v838;
                }
                while (v841 < (v1355[0] | 1) + v565);
                float v803 = sqrtf(v836) * v837;
              }
              int v842 = 0;
              unint64_t v843 = 0;
              float v1440 = v803;
              float v1438 = v803;
              int v844 = v565 + 1;
              unsigned int v845 = v1322 + v1321 - 2;
              unsigned int v1330 = v845;
              v1331 = &v1434[v1355[0] - 4];
              int v846 = 2;
              int v1349 = ~(v1322 + v1321);
              int v847 = v1349;
              unsigned int v1296 = v845;
              int v848 = v565 + 1;
              int v849 = v565;
              LODWORD(v1352) = v565 + 1;
              int v850 = 2;
              while (2)
              {
                uint64_t v852 = v846;
                v1356.i64[0] = v848;
                uint64_t v851 = v850;
                int v853 = v565 * v843;
                size_t v854 = (int)v843;
                uint64_t v855 = (int)v843 + (uint64_t)((int)v565 * (int)v843);
                uint64_t v856 = v565 - v843;
                if (v843 > 3)
                {
                  int64_t v859 = v843 + 1;
                  if ((uint64_t)(v843 + 1) < v565) {
                    goto LABEL_818;
                  }
                  v1443[v843] = 0;
                }
                else
                {
                  float v857 = *(float *)&v1439.i32[v843];
                  float v858 = fabsf(v857);
                  int64_t v859 = v843 + 1;
                  float v860 = fabsf(*(float *)&v1439.i32[v843 + 1]);
                  unsigned int v861 = v860 > v858;
                  if (v843 != 3)
                  {
                    if (v860 > v858) {
                      float v858 = v860;
                    }
                    float v862 = (float *)&v1439.i32[v843];
                    float v863 = fabsf(v862[2]);
                    if (v863 > v858) {
                      unsigned int v861 = 2;
                    }
                    uint64_t v855 = (int)v843 + (uint64_t)v853;
                    if (v843 != 2)
                    {
                      if (v863 > v858) {
                        float v858 = v863;
                      }
                      float v864 = fabsf(v862[3]);
                      if (v864 > v858) {
                        unsigned int v861 = 3;
                      }
                      if (v843 != 1)
                      {
                        if (v864 > v858) {
                          float v858 = v864;
                        }
                        if (fabsf(v1440) > v858)
                        {
                          unsigned int v861 = 4;
                          goto LABEL_804;
                        }
                      }
                    }
                  }
                  if (v861)
                  {
LABEL_804:
                    uint64_t v1348 = v855;
                    __unint64_t n = (int)v843;
                    unint64_t v865 = (int)v843 + (unint64_t)v861;
                    uint64_t v866 = (int)v865 * (int)v565;
                    if (v565 < 8)
                    {
                      uint64_t v867 = 0;
                      goto LABEL_814;
                    }
                    uint64_t v1353 = v850;
                    unint64_t v1354 = v843 + 1;
                    uint64_t v1344 = v852;
                    _CF = &v1434[4 * v866 - 4] >= &v1434[(4 * v843 + 4) * v565 - 4]
                       || &v1434[v1355[0] * v843 - 4] >= &v1331[4 * v866];
                    if (!_CF)
                    {
                      uint64_t v867 = 0;
                      uint64_t v852 = v1344;
                      int64_t v859 = v1354;
                      uint64_t v851 = v1353;
                      goto LABEL_814;
                    }
                    float v869 = (long long *)((char *)v1306 + v1355[0] * v843);
                    float32x4_t v870 = (long long *)((char *)v1306 + 4 * v866);
                    uint64_t v871 = v1333;
                    do
                    {
                      long long v872 = *(v870 - 1);
                      long long v873 = *v870;
                      long long v874 = *v869;
                      *(v870 - 1) = *(v869 - 1);
                      *float32x4_t v870 = v874;
                      *(v869 - 1) = v872;
                      *float v869 = v873;
                      v869 += 2;
                      v870 += 2;
                      v871 -= 8;
                    }
                    while (v871);
                    uint64_t v867 = v1333;
                    uint64_t v852 = v1344;
                    int64_t v859 = v1354;
                    uint64_t v851 = v1353;
                    if (v1333 != v565)
                    {
LABEL_814:
                      uint64_t v875 = v565 - v867;
                      float v876 = (int *)&v1434[4 * v867 - 4 + 4 * v843 * v565];
                      float v877 = (int *)&v1434[4 * v867 - 4 + 4 * v866];
                      do
                      {
                        int v878 = *v877;
                        *v877++ = *v876;
                        *v876++ = v878;
                        --v875;
                      }
                      while (v875);
                    }
                    char v879 = *(&v1381 + v865);
                    *(&v1381 + v865) = *(&v1381 + v843);
                    *(&v1381 + v843) = v879;
                    uint64_t v880 = v865;
                    *(float *)&v1439.i32[v880] = v857;
                    v1437.i32[v880] = v1437.i32[v843];
                    uint64_t v856 = v565 - v843;
                    size_t v854 = __n;
                    uint64_t v855 = v1348;
                  }
                  if (v859 >= v565)
                  {
                    uint64_t v1353 = v851;
                    int v896 = 0;
                    v1443[v843] = 0;
                    float v897 = (int *)&v1434[4 * (int)v855 - 4];
                    int v898 = *v897;
                    *float v897 = 1065353216;
                    *float v897 = v898;
                    goto LABEL_967;
                  }
LABEL_818:
                  unint64_t v1354 = v859;
                  int v881 = v847;
                  float v882 = (float *)&v1434[4 * v855 - 4];
                  float v883 = *v882;
                  v1443[v843] = 0;
                  float v884 = 0.0;
                  uint64_t v885 = v856 - 1;
                  if (v856 < 1 || v856 == 1)
                  {
                    int v847 = v881;
                    int64_t v859 = v1354;
                    goto LABEL_824;
                  }
                  v1346 = (float *)&v1434[4 * v855 - 4];
                  __unint64_t n = v854;
                  int v886 = v855 + 2;
                  if (v856 != 2)
                  {
                    uint64_t v899 = v886;
                    float v900 = 0.0;
                    float v901 = 1.2925e-26;
                    do
                    {
                      float v902 = fabsf(*(float *)&v805[v899]);
                      float v903 = v900 + (float)((float)(v902 / v901) * (float)(v902 / v901));
                      float v900 = (float)((float)((float)(v901 / v902) * (float)(v901 / v902)) * v900) + 1.0;
                      if (v902 <= v901) {
                        float v900 = v903;
                      }
                      else {
                        float v901 = v902;
                      }
                      ++v899;
                    }
                    while (v899 < v885 + v886);
                    float v887 = sqrtf(v900) * v901;
                    if (v887 != 0.0) {
                      goto LABEL_837;
                    }
LABEL_822:
                    int v847 = v881;
                    int64_t v859 = v1354;
                    size_t v854 = __n;
                    float v882 = v1346;
                    goto LABEL_824;
                  }
                  float v887 = fabsf(*(float *)&v1434[4 * v855]);
                  if (v887 == 0.0) {
                    goto LABEL_822;
                  }
LABEL_837:
                  uint64_t v1348 = v855;
                  uint64_t v1345 = v856;
                  uint64_t v904 = (v845 + 1) & 0x1FFFFFFF8;
                  float v905 = (float32x4_t *)&v1334[4 * v850];
                  uint64_t v906 = v1330 - v842;
                  uint64_t v907 = v906 + 1;
                  float v908 = fabsf(v883);
                  float v909 = fabsf(v887);
                  float v910 = v908 * 1.4142;
                  float v911 = sqrtf((float)((float)(v909 / v908) * (float)(v909 / v908)) + 1.0) * v908;
                  if (v908 > v909) {
                    float v910 = v911;
                  }
                  float v912 = sqrtf((float)((float)(v908 / v909) * (float)(v908 / v909)) + 1.0) * v909;
                  if (v908 < v909) {
                    float v913 = v912;
                  }
                  else {
                    float v913 = v910;
                  }
                  float v914 = -v913;
                  if (v883 < 0.0) {
                    float v914 = v913;
                  }
                  if (fabsf(v913) >= 9.8608e-32)
                  {
                    float v884 = (float)(v914 - v883) / v914;
                    *(float *)&v1443[v843] = v884;
                    int v847 = v881;
                    if (v886 > v853 + (int)v565)
                    {
                      float v883 = v914;
                      int64_t v859 = v1354;
                      uint64_t v856 = v1345;
                      size_t v854 = __n;
LABEL_869:
                      float v882 = v1346;
                      LODWORD(v855) = v1348;
                      goto LABEL_824;
                    }
                    float v930 = v883 - v914;
                    uint64_t v931 = v851;
                    _CF = v906 >= 7;
                    int64_t v859 = v1354;
                    uint64_t v856 = v1345;
                    size_t v854 = __n;
                    if (_CF)
                    {
                      uint64_t v932 = v907 & 0x1FFFFFFF8;
                      float v933 = 1.0 / v930;
                      do
                      {
                        float32x4_t v934 = vmulq_n_f32(*v905, v933);
                        v905[-1] = vmulq_n_f32(v905[-1], v933);
                        *float v905 = v934;
                        v905 += 2;
                        v904 -= 8;
                      }
                      while (v904);
                      if (v907 == v932)
                      {
                        float v883 = v914;
                        goto LABEL_869;
                      }
                      uint64_t v931 = v932 + v851;
                    }
                    float v1042 = (float *)&v805[v931];
                    float v1043 = 1.0 / v930;
                    float v882 = v1346;
                    LODWORD(v855) = v1348;
                    do
                    {
                      *float v1042 = *v1042 * v1043;
                      ++v1042;
                      LODWORD(v931) = v931 + 1;
                    }
                    while (v844 != v931);
                    float v883 = v914;
                    goto LABEL_824;
                  }
                  uint64_t v1344 = v852;
                  LODWORD(v1347) = v849;
                  LODWORD(v1343) = v842;
                  unsigned int v915 = 0;
                  int v916 = v853 + v565;
                  uint64_t v917 = v907 & 0x1FFFFFFF8;
                  int v918 = 1;
                  do
                  {
                    unsigned int v920 = v918;
                    if (v886 <= v916)
                    {
                      uint64_t v921 = v851;
                      if (v906 < 7) {
                        goto LABEL_855;
                      }
                      v922 = v905;
                      uint64_t v923 = (v845 + 1) & 0x1FFFFFFF8;
                      do
                      {
                        float32x4_t v924 = vmulq_f32(*v922, v804);
                        v922[-1] = vmulq_f32(v922[-1], v804);
                        float32x4_t *v922 = v924;
                        v922 += 2;
                        v923 -= 8;
                      }
                      while (v923);
                      uint64_t v921 = (v907 & 0x1FFFFFFF8) + v851;
                      if (v907 != v917)
                      {
LABEL_855:
                        uint64_t v925 = (float *)&v805[v921];
                        do
                        {
                          *uint64_t v925 = *v925 * 1.0141e31;
                          ++v925;
                          LODWORD(v921) = v921 + 1;
                        }
                        while (v844 != v921);
                      }
                    }
                    float v914 = v914 * 1.0141e31;
                    BOOL v919 = fabsf(v914) >= 9.8608e-32 || v915++ >= 0x13;
                    float v883 = v883 * 1.0141e31;
                    int v918 = v920 + 1;
                  }
                  while (!v919);
                  if (v885 == 1)
                  {
                    float v929 = fabsf(*(float *)&v1434[4 * v1348]);
                    int v842 = v1343;
                    uint64_t v852 = v1344;
                  }
                  else
                  {
                    uint64_t v935 = v886;
                    uint64_t v936 = v885 + v886;
                    float v937 = 0.0;
                    float v938 = 1.2925e-26;
                    uint64_t v852 = v1344;
                    do
                    {
                      float v939 = fabsf(*(float *)&v805[v935]);
                      float v940 = v937 + (float)((float)(v939 / v938) * (float)(v939 / v938));
                      float v937 = (float)((float)((float)(v938 / v939) * (float)(v938 / v939)) * v937) + 1.0;
                      if (v939 <= v938) {
                        float v937 = v940;
                      }
                      else {
                        float v938 = v939;
                      }
                      ++v935;
                    }
                    while (v935 < v936);
                    float v929 = sqrtf(v937) * v938;
                    int v842 = v1343;
                  }
                  float v941 = fabsf(v883);
                  float v942 = fabsf(v929);
                  float v943 = v941 * 1.4142;
                  float v944 = sqrtf((float)((float)(v942 / v941) * (float)(v942 / v941)) + 1.0) * v941;
                  if (v941 > v942) {
                    float v943 = v944;
                  }
                  float v945 = sqrtf((float)((float)(v941 / v942) * (float)(v941 / v942)) + 1.0) * v942;
                  if (v941 < v942) {
                    float v943 = v945;
                  }
                  if (v883 >= 0.0) {
                    float v943 = -v943;
                  }
                  float v884 = (float)(v943 - v883) / v943;
                  *(float *)&v1443[v843] = v884;
                  BOOL v109 = v886 <= v916;
                  int v847 = v881;
                  int v849 = (int)v1347;
                  int64_t v859 = v1354;
                  if (v109)
                  {
                    float v946 = v883 - v943;
                    uint64_t v947 = v851;
                    if (v906 <= 6) {
                      goto LABEL_896;
                    }
                    float v948 = 1.0 / v946;
                    do
                    {
                      float32x4_t v949 = vmulq_n_f32(*v905, v948);
                      v905[-1] = vmulq_n_f32(v905[-1], v948);
                      *float v905 = v949;
                      v905 += 2;
                      v904 -= 8;
                    }
                    while (v904);
                    uint64_t v947 = (v907 & 0x1FFFFFFF8) + v851;
                    if (v907 != v917)
                    {
LABEL_896:
                      float v950 = (float *)&v805[v947];
                      float v951 = 1.0 / v946;
                      do
                      {
                        *float v950 = *v950 * v951;
                        ++v950;
                        LODWORD(v947) = v947 + 1;
                      }
                      while (v844 != v947);
                    }
                  }
                  if (v920 <= 7)
                  {
                    int v952 = 0;
                    uint64_t v856 = v1345;
                    float v882 = v1346;
                    size_t v854 = __n;
                    LODWORD(v855) = v1348;
                    goto LABEL_904;
                  }
                  int v952 = v920 & 0x7FFFFFF8;
                  float32x4_t v953 = v1292;
                  v953.f32[0] = v943;
                  unsigned int v954 = v920 & 0xFFFFFFF8;
                  float32x4_t v955 = v1292;
                  v956.i64[0] = 0xC0000000C000000;
                  v956.i64[1] = 0xC0000000C000000;
                  uint64_t v856 = v1345;
                  float v882 = v1346;
                  size_t v854 = __n;
                  LODWORD(v855) = v1348;
                  do
                  {
                    float32x4_t v953 = vmulq_f32(v953, v956);
                    float32x4_t v955 = vmulq_f32(v955, v956);
                    v954 -= 8;
                  }
                  while (v954);
                  int8x16_t v957 = (int8x16_t)vmulq_f32(v955, v953);
                  *(float32x2_t *)v957.i8 = vmul_f32(*(float32x2_t *)v957.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v957, v957, 8uLL));
                  float v943 = vmuls_lane_f32(*(float *)v957.i32, *(float32x2_t *)v957.i8, 1);
                  if (v920 == v952)
                  {
                    float v883 = v943;
                  }
                  else
                  {
LABEL_904:
                    float v883 = v943;
                    do
                    {
                      float v883 = v883 * 9.8608e-32;
                      ++v952;
                    }
                    while (v920 != v952);
                  }
LABEL_824:
                  *float v882 = v883;
                  if (v843 < 4)
                  {
                    uint64_t v1353 = v851;
                    *float v882 = 1.0;
                    if (v884 == 0.0)
                    {
                      int v896 = 1;
                      *float v882 = v883;
                    }
                    else
                    {
                      uint64_t v888 = 1 - v1356.i64[0];
                      uint64_t v889 = 4 * v848;
                      float v890 = (float32x4_t *)&v1334[v889];
                      float v891 = (float *)&v805[v849];
                      v1337 = (double *)(v889 - 4);
                      int v892 = v855 + v1352;
                      int v893 = v856;
                      while (1)
                      {
                        int v894 = v893;
                        _VF = __OFSUB__(v893--, 1);
                        if (v893 < 0 != _VF) {
                          break;
                        }
                        float v895 = *v891--;
                        if (v895 != 0.0) {
                          goto LABEL_860;
                        }
                      }
                      int v893 = (v856 & ((int)v856 >> 31)) - 1;
LABEL_860:
                      uint64_t v1345 = v856;
                      v1346 = v882;
                      LODWORD(v1348) = v847;
                      int64_t v926 = (0x300000000 - (v843 << 32)) >> 32;
                      int v927 = v1356.i32[0] + v565 * v926;
                      LODWORD(v1343) = v842;
                      while (v894 < 1)
                      {
LABEL_861:
                        v927 -= v565;
                        BOOL v109 = v926-- <= 0;
                        if (v109)
                        {
                          int64_t v926 = 0xFFFFFFFFLL;
                          goto LABEL_908;
                        }
                      }
                      uint64_t v928 = v927 - 1;
                      while (*(float *)&v1434[4 * v928 - 4] == 0.0)
                      {
                        if (++v928 >= v893 + v892 + (int)v565 * (int)v926) {
                          goto LABEL_861;
                        }
                      }
LABEL_908:
                      if (v894 >= 1 && v926 != -1)
                      {
                        int v1304 = v892;
                        uint64_t v1307 = v889;
                        __unint64_t n = v854;
                        uint64_t v1344 = v852;
                        LODWORD(v1347) = v849;
                        unsigned int v1308 = v845;
                        uint64_t v1341 = (v926 + 1);
                        int64_t v1318 = v926;
                        bzero(v1441, 4 * ((int)v926 + 1));
                        float64x2_t v805 = v1305;
                        size_t v959 = v1355[0];
                        if (((v1318 * v565) & 0x80000000) == 0)
                        {
                          uint64_t v960 = 0;
                          uint64_t v961 = (int)v1318 * (int)v565 + v1304;
                          uint64_t v962 = v1356.i64[0];
                          uint64_t v963 = v1356.i64[0] + v893;
                          int v964 = v1352 * __n;
                          int v965 = v1348 + v1352 * __n;
                          uint64_t v966 = v890;
                          uint64_t v967 = v888;
                          uint64_t v968 = v963;
                          while (1)
                          {
                            if (v968 <= v962) {
                              uint64_t v969 = v962;
                            }
                            else {
                              uint64_t v969 = v968;
                            }
                            uint64_t v970 = v963 + v960 * v565;
                            if (v970 <= v962) {
                              uint64_t v970 = v962;
                            }
                            unint64_t v971 = v970 - (v960 * v565 + v1356.i64[0]);
                            unint64_t v972 = v971 + 1;
                            float32x2_t v958 = 0;
                            if (v971 + 1 < 8) {
                              break;
                            }
                            int v974 = v964 + v971;
                            _NF = (v971 & 0x80000000) != 0;
                            unint64_t v975 = HIDWORD(v971);
                            BOOL v976 = _NF == __OFSUB__(v974, v964) && v975 == 0;
                            uint64_t v973 = v962;
                            if (!v976) {
                              goto LABEL_929;
                            }
                            unint64_t v977 = (v969 + v967) & 0xFFFFFFFFFFFFFFF8;
                            unint64_t v978 = v972 & 0xFFFFFFFFFFFFFFF8;
                            float32x4_t v979 = 0uLL;
                            int v980 = v964;
                            int32x4_t v981 = v966;
                            float32x4_t v982 = 0uLL;
                            do
                            {
                              float32x4_t v983 = (float32x4_t *)&v1434[4 * v980 - 4];
                              float32x4_t v979 = vmlaq_f32(v979, v981[-1], *v983);
                              float32x4_t v982 = vmlaq_f32(v982, *v981, v983[1]);
                              v981 += 2;
                              v980 += 8;
                              v977 -= 8;
                            }
                            while (v977);
                            float32x4_t v984 = vaddq_f32(v982, v979);
                            float32x2_t v958 = (float32x2_t)vpaddq_f32(v984, v984).u64[0];
                            v958.f32[0] = vaddv_f32(v958);
                            if (v972 != v978)
                            {
                              uint64_t v973 = v962 + v978;
                              goto LABEL_929;
                            }
LABEL_912:
                            *((float *)v1441 + v960) = *((float *)v1441 + v960) + v958.f32[0];
                            ++v960;
                            v962 += v565;
                            v968 += v565;
                            v967 -= v565;
                            uint64_t v966 = (float32x4_t *)((char *)v966 + v959);
                            v965 -= v565;
                            if (v962 > v961) {
                              goto LABEL_935;
                            }
                          }
                          uint64_t v973 = v962;
LABEL_929:
                          if (v973 <= v968) {
                            uint64_t v985 = v968;
                          }
                          else {
                            uint64_t v985 = v973;
                          }
                          uint64_t v986 = v985 - v973 + 1;
                          int v987 = v965 + v973;
                          float v988 = (float *)&v805[v973];
                          do
                          {
                            float v989 = *v988++;
                            v958.f32[0] = v958.f32[0] + (float)(*(float *)&v1434[4 * v987++ - 4] * v989);
                            --v986;
                          }
                          while (v986);
                          goto LABEL_912;
                        }
LABEL_935:
                        v804.i64[0] = 0x7300000073000000;
                        v804.i64[1] = 0x7300000073000000;
                        unsigned int v845 = v1308;
                        int v849 = (int)v1347;
                        uint64_t v852 = v1344;
                        uint64_t v990 = v1307;
                        uint64_t v991 = v1341;
                        if ((v1318 & 0x80000000) == 0)
                        {
                          uint64_t v992 = 0;
                          uint64_t v993 = v1356.i64[0];
                          uint64_t v994 = v1356.i64[0] + v893;
                          int v995 = v1352 * __n;
                          uint64_t v996 = 4 * (int)v1352 * (int)__n;
                          float v997 = &v1434[v996 - 4];
                          float v998 = &v1332[v996];
                          int v999 = v1348 + v1352 * __n;
                          uint64_t v1000 = v994;
                          while (1)
                          {
                            if (v1000 <= v993) {
                              uint64_t v1001 = v993;
                            }
                            else {
                              uint64_t v1001 = v1000;
                            }
                            uint64_t v1002 = v994 + v992 * v565;
                            if (v1002 <= v993) {
                              uint64_t v1002 = v993;
                            }
                            float v1003 = *((float *)v1441 + v992);
                            if (v1003 == 0.0) {
                              goto LABEL_937;
                            }
                            unint64_t v1004 = v1002 - (v992 * v565 + v1356.i64[0]);
                            unint64_t v1005 = v1004 + 1;
                            v958.f32[0] = v1003 * v884;
                            BOOL v1007 = v1004 + 1 >= 8 && v995 + (int)v1004 >= v995 && HIDWORD(v1004) == 0;
                            uint64_t v1008 = v993;
                            if (!v1007) {
                              goto LABEL_951;
                            }
                            uint64_t v1013 = 4 * v1004;
                            uint64_t v991 = v1341;
                            BOOL v1014 = &v1434[(void)v1337 - 4 + v1355[0] * v992] >= &v998[v1013]
                                 || v997 >= &v1434[v990 - 4 + v1355[0] * v992 + v1013];
                            uint64_t v1008 = v993;
                            if (!v1014) {
                              goto LABEL_951;
                            }
                            unint64_t v1015 = (v1001 + v888) & 0xFFFFFFFFFFFFFFF8;
                            unint64_t v1016 = v1005 & 0xFFFFFFFFFFFFFFF8;
                            float32x4_t v1017 = (float32x4_t)vdupq_lane_s32((int32x2_t)v958, 0);
                            int v1018 = v995;
                            float v1019 = v890;
                            do
                            {
                              float v1020 = (float32x4_t *)&v1434[4 * v1018 - 4];
                              float32x4_t v1021 = vmlsq_f32(*v1019, v1020[1], v1017);
                              v1019[-1] = vmlsq_f32(v1019[-1], *v1020, v1017);
                              *float v1019 = v1021;
                              v1019 += 2;
                              v1018 += 8;
                              v1015 -= 8;
                            }
                            while (v1015);
                            int v849 = (int)v1347;
                            uint64_t v991 = v1341;
                            if (v1005 != v1016) {
                              break;
                            }
LABEL_937:
                            v993 += v565;
                            ++v992;
                            v1000 += v565;
                            v888 -= v565;
                            float v890 = (float32x4_t *)((char *)v890 + v1355[0]);
                            v999 -= v565;
                            if (v992 == v991) {
                              goto LABEL_966;
                            }
                          }
                          uint64_t v1008 = v993 + v1016;
LABEL_951:
                          if (v1008 <= v1000) {
                            uint64_t v1009 = v1000;
                          }
                          else {
                            uint64_t v1009 = v1008;
                          }
                          uint64_t v1010 = v1009 - v1008 + 1;
                          uint64_t v1011 = (float *)&v805[v1008];
                          int v1012 = v999 + v1008;
                          int v849 = (int)v1347;
                          do
                          {
                            *uint64_t v1011 = *v1011 - (float)(v958.f32[0] * *(float *)&v1434[4 * v1012 - 4]);
                            ++v1011;
                            ++v1012;
                            --v1010;
                          }
                          while (v1010);
                          goto LABEL_937;
                        }
                      }
LABEL_966:
                      uint64_t v856 = v1345;
                      float *v1346 = v883;
                      int v896 = 1;
                      float64x2_t v802 = v1332;
                      int v842 = v1343;
                      int v847 = v1348;
                      int64_t v859 = v1354;
                    }
LABEL_967:
                    uint64_t v1022 = v856 - 1;
                    uint64_t v1023 = (v856 - 1);
                    unint64_t v1024 = v843 + v565 * (v852 - 1);
                    uint64_t v1025 = v852;
                    do
                    {
                      uint64_t v1026 = v1025 - 1;
                      float v1027 = *(float *)&v1439.i32[v1025 - 1];
                      if (v1027 != 0.0)
                      {
                        unint64_t v1028 = v843 + v1026 * v565;
                        float v1029 = fabsf(*(float *)&v1434[4 * v1028 - 4]);
                        float v1030 = 1.0 - (float)((float)(v1029 / v1027) * (float)(v1029 / v1027));
                        if (v1030 < 0.0) {
                          float v1030 = 0.0;
                        }
                        if ((float)((float)((float)(v1027 / *(float *)&v1437.i32[v1026])
                                           * (float)(v1027 / *(float *)&v1437.i32[v1026]))
                                   * v1030) > 0.00034527)
                        {
                          *(float *)&v1439.i32[v1026] = sqrtf(v1030) * v1027;
                        }
                        else
                        {
                          uint64_t v1031 = v1026;
                          if (v896)
                          {
                            float v1032 = 0.0;
                            if (v856 >= 2)
                            {
                              if (v1023 == 1)
                              {
                                float v1032 = fabsf(*(float *)&v1434[4 * v1028]);
                              }
                              else
                              {
                                uint64_t v1033 = v805;
                                uint64_t v1034 = v856;
                                int64_t v1035 = v1028 + 2 + v1022;
                                float v1036 = 0.0;
                                float v1037 = 1.2925e-26;
                                unint64_t v1038 = v1024;
                                do
                                {
                                  float v1039 = fabsf(*(float *)&v802[4 * v1038]);
                                  float v1040 = v1036 + (float)((float)(v1039 / v1037) * (float)(v1039 / v1037));
                                  float v1036 = (float)((float)((float)(v1037 / v1039) * (float)(v1037 / v1039)) * v1036)
                                        + 1.0;
                                  if (v1039 <= v1037) {
                                    float v1036 = v1040;
                                  }
                                  else {
                                    float v1037 = v1039;
                                  }
                                  uint64_t v1041 = v1038 + 3;
                                  ++v1038;
                                }
                                while (v1041 < v1035);
                                float v1032 = sqrtf(v1036) * v1037;
                                uint64_t v856 = v1034;
                                float64x2_t v805 = v1033;
                              }
                            }
                            *(float *)&v1439.i32[v1031] = v1032;
                            *(float *)&v1437.i32[v1031] = v1032;
                          }
                          else
                          {
                            v1439.i32[v1031] = 0;
                            v1437.i32[v1031] = 0;
                          }
                        }
                      }
                      ++v1025;
                      v1024 += v565;
                    }
                    while (v1025 != 6);
                    LODWORD(v851) = v1353;
                  }
                }
                int v850 = v851 + v1352;
                v844 += v565;
                v849 += v565;
                int v848 = v1356.i32[0] + v1352;
                int v846 = v852 + 1;
                ++v842;
                --v845;
                v847 += v1349;
                unint64_t v843 = v859;
                if (v859 != v1350) {
                  continue;
                }
                break;
              }
              if ((int)v565 <= 5) {
                int v1044 = 5;
              }
              else {
                int v1044 = v565;
              }
              float v1045 = fabsf(*(float *)&v1433);
              float v1046 = (float)v1044 * (float)(0.0000011921 * v1045);
              if ((int)v1350 <= 1) {
                unsigned int v1047 = 1;
              }
              else {
                unsigned int v1047 = v1350;
              }
              if (v1045 <= v1046)
              {
                unsigned int v1047 = 0;
                size_t v1048 = v1355[0];
              }
              else
              {
                size_t v1048 = v1355[0];
                if (v1350 >= 2)
                {
                  if (fabsf(*(float *)&v1434[4 * (int)v1352 - 4]) <= v1046)
                  {
                    unsigned int v1047 = 1;
                  }
                  else if (v1047 != 2)
                  {
                    if (fabsf(*(float *)&v1434[8 * v1352 - 4]) <= v1046)
                    {
                      unsigned int v1047 = 2;
                    }
                    else if (v1047 != 3)
                    {
                      if (fabsf(*(float *)&v1434[12 * v1352 - 4]) <= v1046)
                      {
                        unsigned int v1047 = 3;
                      }
                      else if (v1047 != 4 && fabsf(*(float *)&v1434[16 * v1352 - 4]) <= v1046)
                      {
                        unsigned int v1047 = 4;
                      }
                    }
                  }
                }
              }
              memcpy(v1415, &v1391, v1048);
              uint64_t v1050 = 0;
              int16x8_t v1439 = 0uLL;
              float v1440 = 0.0;
              int v1051 = v1322 + v1321 + 1;
              int v1052 = 2;
              int v1053 = 1;
              int v1054 = -1;
              uint64_t v1055 = v1329;
              uint64_t v1056 = v1350;
              int v1057 = v1352;
              unsigned int v1058 = v1296;
LABEL_1009:
              uint64_t v1059 = v1052;
              float v1060 = *(float *)&v1443[v1050];
              if (v1060 == 0.0)
              {
LABEL_1008:
                ++v1050;
                int v1052 = v1059 + 1;
                --v1058;
                v1053 += v1057;
                v1054 += v565;
                if (v1050 == v1056)
                {
                  if (v1047)
                  {
                    char v1093 = v1381;
                    v1439.i32[v1381 - 1] = v1415[0];
                    uint64_t v1094 = v1047 - 1;
                    if (v1047 != 1)
                    {
                      v1439.i32[(char)v1382 - 1] = v1415[1];
                      if (v1047 != 2)
                      {
                        v1439.i32[SBYTE1(v1382) - 1] = v1415[2];
                        if (v1047 != 3)
                        {
                          v1439.i32[SBYTE2(v1382) - 1] = v1416[0];
                          if (v1047 != 4) {
                            v1439.i32[SHIBYTE(v1382) - 1] = v1416[1];
                          }
                        }
                      }
                    }
                    uint64_t v1095 = v1047 - 1;
                    uint64_t v1096 = *(&v1381 + v1095) - 1;
                    uint64_t v1097 = v1095 * v565;
                    float v1098 = *(float *)&v1439.i32[v1096] / *(float *)&v1434[4 * (int)(v1047 + v1097 - 1) - 4];
                    *(float *)&v1439.i32[v1096] = v1098;
                    if (v1047 >= 2)
                    {
                      *(float *)&v1439.i32[v1381 - 1] = *(float *)&v1439.i32[v1381 - 1]
                                                      - (float)(*(float *)&v1434[4 * v1097 - 4] * v1098);
                      if (v1047 != 2)
                      {
                        char v1099 = (float *)&v1434[4 * v1097 - 4];
                        *(float *)&v1439.i32[(char)v1382 - 1] = *(float *)&v1439.i32[(char)v1382 - 1]
                                                              - (float)(v1099[1] * *(float *)&v1439.i32[v1096]);
                        if (v1047 != 3)
                        {
                          *(float *)&v1439.i32[SBYTE1(v1382) - 1] = *(float *)&v1439.i32[SBYTE1(v1382) - 1]
                                                                  - (float)(v1099[2] * *(float *)&v1439.i32[v1096]);
                          if (v1047 != 4) {
                            *(float *)&v1439.i32[SBYTE2(v1382) - 1] = *(float *)&v1439.i32[SBYTE2(v1382) - 1]
                          }
                                                                    - (float)(*(float *)&v1434[4 * v1097]
                                                                            * *(float *)&v1439.i32[v1096]);
                        }
                      }
                      uint64_t v1100 = *(&v1381 + v1047 - 2) - 1;
                      uint64_t v1101 = (v1047 - 2) * v565;
                      float v1102 = *(float *)&v1439.i32[v1100] / *(float *)&v1434[4 * (int)(v1047 + v1101 - 2) - 4];
                      *(float *)&v1439.i32[v1100] = v1102;
                      if (v1047 >= 3)
                      {
                        *(float *)&v1439.i32[v1381 - 1] = *(float *)&v1439.i32[v1381 - 1]
                                                        - (float)(*(float *)&v1434[4 * v1101 - 4] * v1102);
                        uint64_t v1103 = v1094 - 2;
                        if (v1094 != 2)
                        {
                          uint64_t v1104 = (float *)&v1434[4 * v1101 - 4];
                          *(float *)&v1439.i32[(char)v1382 - 1] = *(float *)&v1439.i32[(char)v1382 - 1]
                                                                - (float)(v1104[1] * *(float *)&v1439.i32[v1100]);
                          if (v1094 != 3) {
                            *(float *)&v1439.i32[SBYTE1(v1382) - 1] = *(float *)&v1439.i32[SBYTE1(v1382) - 1]
                          }
                                                                    - (float)(v1104[2] * *(float *)&v1439.i32[v1100]);
                        }
                        unint64_t v1105 = v1047 - 3;
                        uint64_t v1106 = *(&v1381 + v1105) - 1;
                        *(float *)&v1439.i32[v1106] = *(float *)&v1439.i32[v1106]
                                                    / *(float *)&v1434[4 * (int)(v1047 - 85 + (v1047 - 3) * v565 + 82)
                                                                     - 4];
                        if ((unint64_t)v1047 - 2 >= 2)
                        {
                          char v1107 = &v1434[4 * v1105 * v565 - 4];
                          uint64_t v1108 = &v1381;
                          do
                          {
                            uint64_t v1110 = *v1108++;
                            uint64_t v1109 = v1110;
                            LODWORD(v1110) = *v1107++;
                            *(float *)&v1439.i32[v1109 - 1] = *(float *)&v1439.i32[v1109 - 1]
                                                            - (float)(*(float *)&v1110 * *(float *)&v1439.i32[v1106]);
                            --v1103;
                          }
                          while (v1103);
                          unint64_t v1111 = v1047 - 4;
                          uint64_t v1112 = *(&v1381 + v1111) - 1;
                          *(float *)&v1439.i32[v1112] = *(float *)&v1439.i32[v1112]
                                                      / *(float *)&v1434[4 * (int)(v1047 + (v1047 - 4) * v565 - 4) - 4];
                          if (v1105 >= 2)
                          {
                            uint64_t v1113 = v1094 - 3;
                            uint64_t v1114 = &v1434[4 * v1111 * v565 - 4];
                            uint64_t v1115 = &v1381;
                            do
                            {
                              uint64_t v1117 = *v1115++;
                              uint64_t v1116 = v1117;
                              LODWORD(v1117) = *v1114++;
                              *(float *)&v1439.i32[v1116 - 1] = *(float *)&v1439.i32[v1116 - 1]
                                                              - (float)(*(float *)&v1117 * *(float *)&v1439.i32[v1112]);
                              --v1113;
                            }
                            while (v1113);
                            uint64_t v1118 = *(&v1381 + v1047 - 5) - 1;
                            float v1119 = *(float *)&v1439.i32[v1118]
                                  / *(float *)&v1434[4 * (int)(v1047 - 85 + (v1047 - 5) * v565 + 80) - 4];
                            *(float *)&v1439.i32[v1118] = v1119;
                            if (v1111 >= 2)
                            {
                              uint64_t v1275 = v1094 - 5;
                              v1276 = &v1382;
                              if (v1316) {
                                uint64_t v1277 = v1322 + 1;
                              }
                              else {
                                uint64_t v1277 = v1322;
                              }
                              v1278 = (float *)&v1434[4 * (v1047 - 5) * v1277 - 4];
                              while (1)
                              {
                                float v1279 = *v1278++;
                                *(float *)&v1439.i32[v1093 - 1] = *(float *)&v1439.i32[v1093 - 1]
                                                                - (float)(v1279 * v1119);
                                LOBYTE(v1279) = *(unsigned char *)v1276;
                                v1276 = (int *)((char *)v1276 + 1);
                                char v1093 = LOBYTE(v1279);
                                float v1119 = *(float *)&v1439.i32[v1118];
                                --v1275;
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  int16x8_t v398 = v1439;
                  int16x8_t v1391 = v1439;
                  float v1392 = v1440;
                  uint64_t v519 = v1372[0];
                  float v515 = *(float *)&v1439.i32[2];
                  v398.i32[0] = v1439.i32[0];
                  unint64_t v518 = v1375[0];
                  int v402 = v1328;
                  int v404 = v1327;
                  uint64_t v514 = v1323;
                  LODWORD(v491) = v1324;
                  uint64_t v517 = v1339;
                  uint64_t v516 = v1340;
                  uint64_t v437 = v1335;
LABEL_469:
                  *(float *)(v519 + v517) = *(float *)(v519 + v517)
                                          - (float)(v515 / (float)(*(float *)v398.i32 + *(float *)v398.i32));
                  *(float *)(v518 + v517) = *(float *)(v518 + v517)
                                          - (float)(*(float *)&v1391.i32[3]
                                                  / (float)(*(float *)&v1391.i32[1] + *(float *)&v1391.i32[1]));
                  uint64_t v512 = v516 + 1;
                  if (v512 == v1325)
                  {
                    int v403 = v1377;
                    int v388 = v1336;
                    uint64_t v386 = v1286;
                    int v390 = v1284;
                    int v387 = v1285;
                    uint64_t v389 = v1283;
                    goto LABEL_1063;
                  }
                  continue;
                }
                goto LABEL_1009;
              }
              float v1061 = *(float *)&v1415[v1050];
              if ((int)v1050 + 2 > (int)v565)
              {
                float v1062 = v1061 * v1060;
                if (v1062 != 0.0) {
                  *(float *)&v1415[v1050] = v1061 - v1062;
                }
                goto LABEL_1008;
              }
              unsigned int v1063 = v1058;
              uint64_t v1064 = (v1058 + 1) & 0x1FFFFFFF8;
              unint64_t v1065 = (float32x4_t *)&v1338[v1052];
              uint64_t v1066 = v1330 - v1050;
              uint64_t v1067 = v1066 + 1;
              int v1068 = v1057 * v1050 + 1;
              _CF = v1066 >= 7;
              int v1069 = v1068 + v1066;
              int v1071 = !_CF || v1069 < v1068;
              uint64_t v1072 = v1059;
              float v1073 = *(float *)&v1415[v1050];
              if (v1071 != 1)
              {
                uint64_t v1074 = v1067 & 0x1FFFFFFF8;
                float32x4_t v1075 = 0uLL;
                float32x4_t v1076 = (float32x4_t)v1415[v1050];
                int v1077 = v1053;
                float v1078 = v1065;
                uint64_t v1079 = v1064;
                do
                {
                  float32x2_t v1080 = (float32x4_t *)&v1434[4 * v1077 - 4];
                  float32x4_t v1076 = vmlaq_f32(v1076, *v1080, v1078[-1]);
                  float32x4_t v1075 = vmlaq_f32(v1075, v1080[1], *v1078);
                  v1078 += 2;
                  v1077 += 8;
                  v1079 -= 8;
                }
                while (v1079);
                float32x4_t v1081 = vaddq_f32(v1075, v1076);
                float v1073 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v1081, v1081));
                if (v1067 == v1074)
                {
                  uint64_t v1055 = v1329;
                  goto LABEL_1027;
                }
                uint64_t v1072 = v1074 + v1059;
                uint64_t v1055 = v1329;
              }
              int v1082 = v1051 - v1072;
              v1083 = (float *)&v1055[v1072];
              int v1084 = v1054 + v1072;
              do
              {
                float v1085 = *v1083++;
                float v1073 = v1073 + (float)(v1085 * *(float *)&v1434[4 * v1084++ - 4]);
                --v1082;
              }
              while (v1082);
LABEL_1027:
              *(float *)v1049.i32 = v1073 * v1060;
              unsigned int v1058 = v1063;
              if (*(float *)v1049.i32 == 0.0) {
                goto LABEL_1008;
              }
              *(float *)&v1415[v1050] = v1061 - *(float *)v1049.i32;
              uint64_t v1086 = v1059;
              if ((v1071 & 1) == 0)
              {
                uint64_t v1087 = v1067 & 0x1FFFFFFF8;
                float32x4_t v1088 = (float32x4_t)vdupq_lane_s32(v1049, 0);
                int v1089 = v1053;
                do
                {
                  char v1090 = (float32x4_t *)&v1434[4 * v1089 - 4];
                  float32x4_t v1091 = vmlsq_f32(*v1065, v1088, v1090[1]);
                  v1065[-1] = vmlsq_f32(v1065[-1], v1088, *v1090);
                  *unint64_t v1065 = v1091;
                  v1065 += 2;
                  v1089 += 8;
                  v1064 -= 8;
                }
                while (v1064);
                unsigned int v1058 = v1063;
                if (v1067 == v1087) {
                  goto LABEL_1008;
                }
                uint64_t v1086 = v1087 + v1059;
              }
              v1092 = (float *)&v1055[v1086];
              do
              {
                float *v1092 = *v1092 - (float)(*(float *)&v1434[4 * v1054 - 4 + 4 * (int)v1086] * *(float *)v1049.i32);
                ++v1092;
                LODWORD(v1086) = v1086 + 1;
              }
              while (v1057 != v1086);
              goto LABEL_1008;
            }
            int v535 = v1326;
          }
          break;
        }
        if ((int)v393 != -1) {
          goto LABEL_495;
        }
        goto LABEL_502;
      }
      uint64_t v410 = v405 & 0xFFFFFFFC;
      float64x2_t v450 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v407, 0);
      int32x2_t v451 = (int32x2_t)0x100000000;
      float v452 = (float64x2_t *)&v1399;
      uint64_t v453 = v410;
      do
      {
        int32x2_t v454 = vadd_s32(v451, (int32x2_t)0x200000002);
        v455.i64[0] = v451.i32[0];
        v455.i64[1] = v451.i32[1];
        float64x2_t v456 = vcvtq_f64_s64(v455);
        v455.i64[0] = v454.i32[0];
        v455.i64[1] = v454.i32[1];
        v452[-1] = vsubq_f64(v456, v450);
        *float v452 = vsubq_f64(vcvtq_f64_s64(v455), v450);
        int32x2_t v451 = vadd_s32(v451, (int32x2_t)0x400000004);
        v452 += 2;
        v453 -= 4;
      }
      while (v453);
      int v457 = v404 + 1;
      if (v410 != v405) {
        goto LABEL_392;
      }
    }
    else
    {
      double v435 = floor(v406 + 0.5);
      double v436 = v435 - v407;
      if (vabdd_f64(v435 - v407, v407) >= fmax(fabs(v408), fabs(v407)) * 4.4408921e-16)
      {
        if (v436 - v407 <= 0.0) {
          double v435 = v435 + 1.0;
        }
        else {
          double v436 = v436 + -1.0;
        }
      }
      else
      {
        double v435 = v435 + 1.0;
        double v436 = (double)v404 * 0.5;
      }
      int v457 = (int)v435;
      v1398[0] = -v407;
      int v460 = (int)v435 - 1;
      v1398[v460] = v436;
      if ((int)v435 >= 1) {
        int v461 = (int)v435 - 1;
      }
      else {
        int v461 = (int)v435;
      }
      int v462 = v461 >> 1;
      if (v457 >= 5)
      {
        if (v462 <= 2) {
          int v463 = 2;
        }
        else {
          int v463 = v462;
        }
        int v464 = v463 - 1;
        do
        {
          v1398[1] = 1.0 - v407;
          v1398[v457 - 2] = v436 + -1.0;
          --v464;
        }
        while (v464);
      }
      if (v460 != 2 * v462)
      {
        float v467 = &v1398[v462];
        *float v467 = (double)v462 - v407;
        v467[1] = v436 - (double)v462;
        if (v409 != v408) {
          goto LABEL_394;
        }
        goto LABEL_413;
      }
      v1398[v462] = (v436 - v407) * 0.5;
    }
    if (v409 != v408) {
      goto LABEL_394;
    }
    goto LABEL_413;
  }
LABEL_1063:
  int v1371 = v403;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1369, v403);
  if (v403 >= 1)
  {
    uint64_t v1120 = 0;
    uint64_t v1121 = v1375[0];
    uint64_t v1122 = v1369[0];
    if (v403 < 8) {
      goto LABEL_1069;
    }
    if (v1369[0] - v1375[0] < 0x20uLL) {
      goto LABEL_1069;
    }
    uint64_t v1120 = v403 & 0xFFFFFFF8;
    v1123 = (float32x4_t *)(v1369[0] + 16);
    float32x2_t v1124 = (float32x4_t *)(v1375[0] + 16);
    v1125.i64[0] = 0x3F0000003F000000;
    v1125.i64[1] = 0x3F0000003F000000;
    uint64_t v1126 = v1120;
    do
    {
      float32x4_t v1127 = vmaxnmq_f32(*v1124, v1125);
      v1123[-1] = vmaxnmq_f32(v1124[-1], v1125);
      float32x4_t *v1123 = v1127;
      v1123 += 2;
      v1124 += 2;
      v1126 -= 8;
    }
    while (v1126);
    if (v1120 != v403)
    {
LABEL_1069:
      uint64_t v1128 = v403 - v1120;
      uint64_t v1129 = 4 * v1120;
      float v1130 = (float *)(v1122 + v1129);
      float v1131 = (float *)(v1121 + v1129);
      do
      {
        float v1132 = *v1131++;
        *v1130++ = fmaxf(v1132, 0.5);
        --v1128;
      }
      while (v1128);
    }
  }
  uint64_t v1133 = v1371;
  if (v1371 >= 1)
  {
    uint64_t v1134 = v1369[0];
    if (v1371 < 8)
    {
      uint64_t v1135 = 0;
      goto LABEL_1077;
    }
    uint64_t v1135 = v1371 & 0xFFFFFFF8;
    v1136 = (float32x4_t *)(v1369[0] + 16);
    float32x4_t v1137 = (float32x4_t)vdupq_n_s32(0x42A90000u);
    uint64_t v1138 = v1135;
    do
    {
      float32x4_t v1139 = vminnmq_f32(*v1136, v1137);
      v1136[-1] = vminnmq_f32(v1136[-1], v1137);
      float32x4_t *v1136 = v1139;
      v1136 += 2;
      v1138 -= 8;
    }
    while (v1138);
    if (v1135 != v1133)
    {
LABEL_1077:
      uint64_t v1140 = v1133 - v1135;
      long long v1141 = (float *)(v1134 + 4 * v1135);
      do
      {
        *long long v1141 = fminf(*v1141, 84.5);
        ++v1141;
        --v1140;
      }
      while (v1140);
    }
  }
  uint64_t v1142 = v1374;
  unsigned int v1377 = v1374;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1375, v1374);
  int v1359 = v1142;
  uint64_t v1143 = v1302;
  if ((int)v1142 >= 1)
  {
    uint64_t v1144 = 0;
    uint64_t v1145 = v1372[0];
    uint64_t v1146 = v1375[0];
    if (v1142 < 8) {
      goto LABEL_1085;
    }
    if (v1375[0] - v1372[0] < 0x20uLL) {
      goto LABEL_1085;
    }
    uint64_t v1144 = v1142 & 0xFFFFFFF8;
    v1147 = (float32x4_t *)(v1375[0] + 16);
    v1148 = (float32x4_t *)(v1372[0] + 16);
    v1149.i64[0] = 0x3F0000003F000000;
    v1149.i64[1] = 0x3F0000003F000000;
    uint64_t v1150 = v1144;
    do
    {
      float32x4_t v1151 = vmaxnmq_f32(*v1148, v1149);
      v1147[-1] = vmaxnmq_f32(v1148[-1], v1149);
      float32x4_t *v1147 = v1151;
      v1147 += 2;
      v1148 += 2;
      v1150 -= 8;
    }
    while (v1150);
    if (v1144 != v1142)
    {
LABEL_1085:
      uint64_t v1152 = v1142 - v1144;
      uint64_t v1153 = 4 * v1144;
      uint64_t v1154 = (float *)(v1146 + 4 * v1144);
      char v1155 = (float *)(v1145 + v1153);
      do
      {
        float v1156 = *v1155++;
        *v1154++ = fmaxf(v1156, 0.5);
        --v1152;
      }
      while (v1152);
    }
  }
  uint64_t v1157 = v1377;
  if ((int)v1377 >= 1)
  {
    uint64_t v1158 = v1375[0];
    if (v1377 < 8)
    {
      uint64_t v1159 = 0;
      goto LABEL_1093;
    }
    uint64_t v1159 = v1377 & 0xFFFFFFF8;
    float32x4x2_t v1160 = (float32x4_t *)(v1375[0] + 16);
    float32x4_t v1161 = (float32x4_t)vdupq_n_s32(0x42D90000u);
    uint64_t v1162 = v1159;
    do
    {
      float32x4_t v1163 = vminnmq_f32(*v1160, v1161);
      v1160[-1] = vminnmq_f32(v1160[-1], v1161);
      *float32x4x2_t v1160 = v1163;
      v1160 += 2;
      v1162 -= 8;
    }
    while (v1162);
    if (v1159 != v1157)
    {
LABEL_1093:
      uint64_t v1164 = v1157 - v1159;
      v1165 = (float *)(v1158 + 4 * v1159);
      do
      {
        float *v1165 = fminf(*v1165, 108.5);
        ++v1165;
        --v1164;
      }
      while (v1164);
    }
  }
  *(_DWORD *)(v1143 + 24) = v1133;
  *(_DWORD *)(v1143 + 28) = 2;
  coder::array_base<float,int,2>::ensureCapacity(v1143, 2 * v1133);
  v1166 = (uint64_t *)v1302;
  if ((int)v1133 >= 1)
  {
    uint64_t v1167 = 0;
    uint64_t v1168 = v1369[0];
    uint64_t v1169 = *(void *)v1302;
    if (v1133 < 8) {
      goto LABEL_1101;
    }
    if ((unint64_t)(v1169 - v1369[0]) < 0x20) {
      goto LABEL_1101;
    }
    uint64_t v1167 = v1133 & 0xFFFFFFF8;
    v1170 = (_OWORD *)(v1169 + 16);
    v1171 = (long long *)(v1369[0] + 16);
    uint64_t v1172 = v1167;
    do
    {
      long long v1173 = *v1171;
      *(v1170 - 1) = *(v1171 - 1);
      _OWORD *v1170 = v1173;
      v1170 += 2;
      v1171 += 2;
      v1172 -= 8;
    }
    while (v1172);
    if (v1167 != v1133)
    {
LABEL_1101:
      uint64_t v1174 = v1133 - v1167;
      uint64_t v1175 = 4 * v1167;
      v1176 = (_DWORD *)(v1169 + v1175);
      v1177 = (int *)(v1168 + v1175);
      do
      {
        int v1178 = *v1177++;
        *v1176++ = v1178;
        --v1174;
      }
      while (v1174);
    }
  }
  unsigned int v1179 = *((_DWORD *)v1166 + 6);
  if ((int)v1157 >= 1)
  {
    uint64_t v1180 = v1375[0];
    uint64_t v1181 = *v1166;
    if (v1157 < 8 || (uint64_t v1182 = 4 * (int)v1179 + v1181, (unint64_t)(v1182 - v1375[0]) < 0x20))
    {
      uint64_t v1183 = 0;
      goto LABEL_1107;
    }
    uint64_t v1183 = v1157 & 0xFFFFFFF8;
    v1270 = (_OWORD *)(v1182 + 16);
    v1271 = (long long *)(v1375[0] + 16);
    uint64_t v1272 = v1183;
    do
    {
      long long v1273 = *v1271;
      *(v1270 - 1) = *(v1271 - 1);
      _OWORD *v1270 = v1273;
      v1270 += 2;
      v1271 += 2;
      v1272 -= 8;
    }
    while (v1272);
    if (v1183 != v1157)
    {
LABEL_1107:
      uint64_t v1184 = v1157 - v1183;
      v1185 = (_DWORD *)(v1181 + 4 * (v1183 + (int)v1179));
      v1186 = (int *)(v1180 + 4 * v1183);
      do
      {
        int v1187 = *v1186++;
        *v1185++ = v1187;
        --v1184;
      }
      while (v1184);
    }
  }
  uint64_t v1362 = v1179 | 0x200000000;
  coder::array_base<unsigned char,int,2>::ensureCapacity((uint64_t)v1360, 2 * v1179);
  int v1188 = *(_DWORD *)(v1302 + 24);
  LODWORD(v1189) = 2 * v1188;
  int v1359 = 2 * v1188;
  if (v1188 >= 1)
  {
    uint64_t v1190 = 0;
    if ((int)v1189 <= 1) {
      uint64_t v1189 = 1;
    }
    else {
      uint64_t v1189 = v1189;
    }
    uint64_t v1191 = v1360[0];
    do
      *(unsigned char *)(v1191 + v1190++) = 0;
    while (v1189 != v1190);
  }
  uint64_t v1192 = v1362;
  int v1358 = v1362 - 1;
  unsigned int v1368 = v1362 & ~((int)v1362 >> 31);
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1366, v1368);
  if ((int)v1192 >= 1)
  {
    uint64_t v1193 = v1366[0];
    if (v1192 < 8)
    {
      uint64_t v1194 = 0;
      goto LABEL_1121;
    }
    uint64_t v1194 = v1192 & 0xFFFFFFF8;
    int32x4_t v1195 = (int32x4_t)xmmword_259120340;
    v1196 = (int32x4_t *)(v1366[0] + 16);
    v1197.i64[0] = 0x100000001;
    v1197.i64[1] = 0x100000001;
    v1198.i64[0] = 0x500000005;
    v1198.i64[1] = 0x500000005;
    v1199.i64[0] = 0x800000008;
    v1199.i64[1] = 0x800000008;
    uint64_t v1200 = v1194;
    do
    {
      v1196[-1] = vaddq_s32(v1195, v1197);
      int32x4_t *v1196 = vaddq_s32(v1195, v1198);
      int32x4_t v1195 = vaddq_s32(v1195, v1199);
      v1196 += 2;
      v1200 -= 8;
    }
    while (v1200);
    for (; v1192 != v1194; ++v1194)
LABEL_1121:
      *(_DWORD *)(v1193 + 4 * v1194) = v1194 + 1;
  }
  uint64_t v1201 = v1368;
  uint64_t v1380 = v1368 | 0x200000000;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1378, 2 * v1368);
  int v1202 = v1380;
  uint64_t v1203 = v1378[0];
  uint64_t v1204 = v1302;
  if ((int)v1201 >= 1)
  {
    v1205 = (int *)v1366[0];
    int v1206 = *(_DWORD *)(v1302 + 24);
    uint64_t v1207 = *(void *)v1302;
    v1208 = (int *)v1366[0];
    v1209 = (_DWORD *)v1378[0];
    uint64_t v1210 = v1201;
    do
    {
      int v1211 = *v1208++;
      *v1209++ = *(_DWORD *)(v1207 + 4 * (v1211 - 1));
      --v1210;
    }
    while (v1210);
    v1212 = (_DWORD *)(v1203 + 4 * v1202);
    do
    {
      int v1213 = *v1205++;
      *v1212++ = *(_DWORD *)(v1207 + 4 * (v1213 + v1206 - 1));
      --v1201;
    }
    while (v1201);
  }
  *(_DWORD *)(v1204 + 24) = v1202;
  *(_DWORD *)(v1204 + 28) = 2;
  int v1214 = 2 * v1202;
  coder::array_base<float,int,2>::ensureCapacity(v1204, 2 * v1202);
  uint64_t v1215 = v1302;
  if (v1202 >= 1)
  {
    uint64_t v1216 = 0;
    uint64_t v1217 = *(void *)v1302;
    uint64_t v1218 = v1214 <= 1 ? 1 : v1214;
    if (v1218 < 8) {
      goto LABEL_1136;
    }
    if ((unint64_t)(v1217 - v1203) < 0x20) {
      goto LABEL_1136;
    }
    uint64_t v1216 = v1218 & 0x7FFFFFF8;
    v1219 = (_OWORD *)(v1217 + 16);
    v1220 = (long long *)(v1203 + 16);
    uint64_t v1221 = v1216;
    do
    {
      long long v1222 = *v1220;
      *(v1219 - 1) = *(v1220 - 1);
      _OWORD *v1219 = v1222;
      v1219 += 2;
      v1220 += 2;
      v1221 -= 8;
    }
    while (v1221);
    if (v1216 != v1218)
    {
LABEL_1136:
      uint64_t v1223 = v1218 - v1216;
      uint64_t v1224 = 4 * v1216;
      v1225 = (_DWORD *)(v1217 + v1224);
      v1226 = (int *)(v1203 + v1224);
      do
      {
        int v1227 = *v1226++;
        *v1225++ = v1227;
        --v1223;
      }
      while (v1223);
    }
  }
  LODWORD(v1362) = *(_DWORD *)(v1215 + 24);
  HIDWORD(v1362) = 2;
  coder::array_base<unsigned char,int,2>::ensureCapacity((uint64_t)v1360, 2 * v1362);
  v1228 = (void *)v1302;
  int v1229 = *(_DWORD *)(v1302 + 24);
  LODWORD(v1230) = 2 * v1229;
  int v1359 = 2 * v1229;
  if (v1229 >= 1)
  {
    uint64_t v1231 = 0;
    if ((int)v1230 <= 1) {
      uint64_t v1230 = 1;
    }
    else {
      uint64_t v1230 = v1230;
    }
    uint64_t v1232 = v1360[0];
    do
    {
      *(unsigned char *)(v1232 + v1231) = fabsf(*(float *)(*v1228 + 4 * v1231)) == INFINITY;
      ++v1231;
    }
    while (v1230 != v1231);
  }
  uint64_t v1233 = v1362;
  int v1358 = v1362 - 1;
  unsigned int v1365 = v1362 & ~((int)v1362 >> 31);
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1363, v1365);
  if ((int)v1233 >= 1)
  {
    uint64_t v1234 = v1363[0];
    if (v1233 < 8)
    {
      uint64_t v1235 = 0;
      goto LABEL_1150;
    }
    uint64_t v1235 = v1233 & 0xFFFFFFF8;
    int32x4_t v1236 = (int32x4_t)xmmword_259120340;
    v1237 = (int32x4_t *)(v1363[0] + 16);
    v1238.i64[0] = 0x100000001;
    v1238.i64[1] = 0x100000001;
    v1239.i64[0] = 0x500000005;
    v1239.i64[1] = 0x500000005;
    v1240.i64[0] = 0x800000008;
    v1240.i64[1] = 0x800000008;
    uint64_t v1241 = v1235;
    do
    {
      v1237[-1] = vaddq_s32(v1236, v1238);
      int32x4_t *v1237 = vaddq_s32(v1236, v1239);
      int32x4_t v1236 = vaddq_s32(v1236, v1240);
      v1237 += 2;
      v1241 -= 8;
    }
    while (v1241);
    for (; v1233 != v1235; ++v1235)
LABEL_1150:
      *(_DWORD *)(v1234 + 4 * v1235) = v1235 + 1;
  }
  uint64_t v1242 = v1365;
  uint64_t v1380 = v1365 | 0x200000000;
  coder::array_base<float,int,2>::ensureCapacity((uint64_t)v1378, 2 * v1365);
  int v1243 = v1380;
  uint64_t v1244 = v1302;
  if ((int)v1242 >= 1)
  {
    v1245 = (int *)v1363[0];
    int v1246 = *(_DWORD *)(v1302 + 24);
    uint64_t v1247 = *(void *)v1302;
    uint64_t v1248 = v1378[0];
    v1249 = (int *)v1363[0];
    v1250 = (_DWORD *)v1378[0];
    uint64_t v1251 = v1242;
    do
    {
      int v1252 = *v1249++;
      *v1250++ = *(_DWORD *)(v1247 + 4 * (v1252 - 1));
      --v1251;
    }
    while (v1251);
    v1253 = (_DWORD *)(v1248 + 4 * v1243);
    do
    {
      int v1254 = *v1245++;
      *v1253++ = *(_DWORD *)(v1247 + 4 * (v1254 + v1246 - 1));
      --v1242;
    }
    while (v1242);
  }
  *(_DWORD *)(v1244 + 24) = v1243;
  *(_DWORD *)(v1244 + 28) = 2;
  int v1255 = 2 * v1243;
  coder::array_base<float,int,2>::ensureCapacity(v1244, 2 * v1243);
  if (v1243 >= 1)
  {
    uint64_t v1256 = 0;
    uint64_t v1257 = v1378[0];
    uint64_t v1258 = *(void *)v1302;
    uint64_t v1259 = v1255 <= 1 ? 1 : v1255;
    if (v1259 < 8) {
      goto LABEL_1165;
    }
    if ((unint64_t)(v1258 - v1378[0]) < 0x20) {
      goto LABEL_1165;
    }
    uint64_t v1256 = v1259 & 0x7FFFFFF8;
    v1260 = (_OWORD *)(v1258 + 16);
    v1261 = (long long *)(v1378[0] + 16);
    uint64_t v1262 = v1256;
    do
    {
      long long v1263 = *v1261;
      *(v1260 - 1) = *(v1261 - 1);
      _OWORD *v1260 = v1263;
      v1260 += 2;
      v1261 += 2;
      v1262 -= 8;
    }
    while (v1262);
    if (v1256 != v1259)
    {
LABEL_1165:
      uint64_t v1264 = v1259 - v1256;
      uint64_t v1265 = 4 * v1256;
      v1266 = (_DWORD *)(v1258 + v1265);
      v1267 = (int *)(v1257 + v1265);
      do
      {
        int v1268 = *v1267++;
        *v1266++ = v1268;
        --v1264;
      }
      while (v1264);
    }
  }
  if (v1361 && v1360[0]) {
    MEMORY[0x25A2D62A0](v1360[0], 0x1000C8077774924);
  }
  if (v390 && v389) {
    MEMORY[0x25A2D62A0](v389, 0x1000C8077774924);
  }
  if (v387 && v386) {
    MEMORY[0x25A2D62A0](v386, 0x1000C80BDFB0063);
  }
  if (v1364 && v1363[0]) {
    MEMORY[0x25A2D62A0](v1363[0], 0x1000C8052888210);
  }
  if (v1367 && v1366[0]) {
    MEMORY[0x25A2D62A0](v1366[0], 0x1000C8052888210);
  }
  if (v1370 && v1369[0]) {
    MEMORY[0x25A2D62A0](v1369[0], 0x1000C8052888210);
  }
  if (v1373 && v1372[0]) {
    MEMORY[0x25A2D62A0](v1372[0], 0x1000C8052888210);
  }
  if (v1376 && v1375[0]) {
    MEMORY[0x25A2D62A0](v1375[0], 0x1000C8052888210);
  }
  if (v1379 && v1378[0]) {
    MEMORY[0x25A2D62A0](v1378[0], 0x1000C8052888210);
  }
  uint64_t result = __src;
  if (v388 && __src) {
    return (void *)MEMORY[0x25A2D62A0](__src, 0x1000C8000313F17);
  }
  return result;
}

void sub_2590F4B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (LOBYTE(STACK[0x288]) && STACK[0x278]) {
    MEMORY[0x25A2D62A0](STACK[0x278], 0x1000C8077774924);
  }
  if (v71 && v72) {
    MEMORY[0x25A2D62A0](v72, 0x1000C8077774924);
  }
  if (v70 && v69) {
    MEMORY[0x25A2D62A0](v69, 0x1000C80BDFB0063);
  }
  if (LOBYTE(STACK[0x2A8]) && STACK[0x298]) {
    MEMORY[0x25A2D62A0](STACK[0x298], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x2C8]) && STACK[0x2B8]) {
    MEMORY[0x25A2D62A0](STACK[0x2B8], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x2E8]) && STACK[0x2D8]) {
    MEMORY[0x25A2D62A0](STACK[0x2D8], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x308]) && STACK[0x2F8]) {
    MEMORY[0x25A2D62A0](STACK[0x2F8], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x328]) && STACK[0x318]) {
    MEMORY[0x25A2D62A0](STACK[0x318], 0x1000C8052888210);
  }
  if (LOBYTE(STACK[0x348]) && STACK[0x338]) {
    MEMORY[0x25A2D62A0](STACK[0x338], 0x1000C8052888210);
  }
  if (v68)
  {
    if (a68) {
      MEMORY[0x25A2D62A0](a68, 0x1000C8000313F17);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t *coder::array<cell_wrap_1,2>::~array(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(void *)(v2 - 8);
      if (v3)
      {
        uint64_t v4 = 32 * v3;
        do
        {
          if (*(unsigned char *)(v2 + v4 - 16))
          {
            uint64_t v5 = *(void *)(v2 + v4 - 32);
            if (v5) {
              MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
            }
          }
          v4 -= 32;
        }
        while (v4);
      }
      MEMORY[0x25A2D62A0](v2 - 16, 0x1080C8075AFF985);
    }
  }
  return a1;
}

uint64_t *coder::array<cell_wrap_0,2>::~array(uint64_t *a1)
{
  if (*((unsigned char *)a1 + 16))
  {
    uint64_t v2 = *a1;
    if (*a1)
    {
      uint64_t v3 = *(void *)(v2 - 8);
      if (v3)
      {
        uint64_t v4 = 32 * v3;
        do
        {
          if (*(unsigned char *)(v2 + v4 - 16))
          {
            uint64_t v5 = *(void *)(v2 + v4 - 32);
            if (v5) {
              MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
            }
          }
          v4 -= 32;
        }
        while (v4);
      }
      MEMORY[0x25A2D62A0](v2 - 16, 0x1080C808A25AF7CLL);
    }
  }
  return a1;
}

unint64_t coder::fft2(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)coder::fft2(float const*,creal32_T *)::fcv;
  coder::internal::FFTImplementationCallback::doHalfLengthRadix2(a1, coder::fft2(float const*,creal32_T *)::fcv);
  uint64_t v4 = 0;
  uint64_t v5 = (char *)coder::fft2(float const*,creal32_T *)::xPerm;
  do
  {
    double v6 = v3;
    for (uint64_t i = 8; i != 680; i += 16)
    {
      uint64_t v8 = &v5[i];
      uint64_t v9 = v6[256];
      *((void *)v8 - 1) = *v6;
      *(void *)uint64_t v8 = v9;
      v6 += 512;
    }
    ++v4;
    v5 += 672;
    ++v3;
  }
  while (v4 != 256);
  bzero(coder::fft2(float const*,creal32_T *)::yPerm, 0x80000uLL);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = (char *)&unk_26A29AEB8;
  uint64_t v13 = 1;
  float v14 = coder::fft2(float const*,creal32_T *)::yPerm;
  do
  {
    uint64_t v15 = 0;
    int v16 = 0;
    uint64_t v17 = v10 << 8;
    int v18 = v10 << 8;
    do
    {
      coder::fft2(float const*,creal32_T *)::yPerm[v18] = coder::fft2(float const*,creal32_T *)::xPerm[84 * v10 + v15];
      unsigned int v19 = 256;
      do
      {
        v19 >>= 1;
        v16 ^= v19;
      }
      while ((v16 & v19) == 0);
      int v18 = v16 + v17;
      ++v15;
    }
    while (v15 != 83);
    uint64_t v20 = 0;
    coder::fft2(float const*,creal32_T *)::yPerm[v18] = coder::fft2(float const*,creal32_T *)::xPerm[84 * v10 + 83];
    do
    {
      int8x16_t v21 = (float *)&v14[v20];
      float32x4x4_t v65 = vld4q_f32(v21);
      v66.val[2] = vsubq_f32(v65.val[0], v65.val[2]);
      v66.val[3] = vsubq_f32(v65.val[1], v65.val[3]);
      v66.val[0] = vaddq_f32(v65.val[0], v65.val[2]);
      v66.val[1] = vaddq_f32(v65.val[1], v65.val[3]);
      vst4q_f32(v21, v66);
      v20 += 8;
    }
    while (v20 != 256);
    int v22 = 2;
    unsigned int v23 = 4;
    int v24 = 253;
    unint64_t result = 64;
    do
    {
      int v27 = v22;
      int v22 = v23;
      uint64_t v28 = v24;
      uint64_t v29 = v23;
      if (v24 >= 1)
      {
        uint64_t v30 = 0;
        uint64_t v31 = v17 + v24;
        uint64_t v32 = v27;
        uint64_t v33 = 8 * v29;
        float32x4_t v34 = &v14[v27];
        uint64_t v35 = v11;
        do
        {
          float32x4_t v36 = (float *)((char *)v34 + v30);
          float v37 = *(float *)((char *)v34 + v30);
          float v38 = *(float *)((char *)v34 + v30 + 4);
          float32x4_t v39 = (float *)((char *)v14 + v30);
          float v40 = *(float *)((char *)v14 + v30);
          float v41 = *(float *)((char *)v14 + v30 + 4);
          *float32x4_t v36 = v40 - v37;
          v36[1] = v41 - v38;
          float *v39 = v40 + v37;
          v39[1] = v41 + v38;
          v35 += v29;
          v30 += v33;
        }
        while (v35 < v31);
        if ((int)v28 >= 1)
        {
          float32x4_t v42 = (char *)&coder::fft2(float const*,creal32_T *)::yPerm[v13 + v32] + 4;
          float32x4_t v43 = v12;
          unint64_t v44 = result;
          uint64_t v45 = v13;
          do
          {
            uint64_t v46 = 0;
            float v47 = fv[v44];
            float v48 = coder::fft2(float const*,creal32_T *)::b_fv[v44];
            uint64_t v49 = v45;
            do
            {
              float32x4_t v50 = (float *)&v42[v46];
              float v52 = *(float *)&v42[v46 - 4];
              float v51 = *(float *)&v42[v46];
              float v53 = -(float)((float)(v51 * v48) - (float)(v52 * v47));
              float v54 = (float)(v51 * v47) + (float)(v52 * v48);
              float32x4_t v55 = (float *)&v43[v46];
              float v56 = *(float *)&v43[v46];
              float v57 = *(float *)&v43[v46 + 4];
              *(v50 - 1) = v56 - v53;
              *float32x4_t v50 = v57 - v54;
              *float32x4_t v55 = v53 + v56;
              v55[1] = v57 + v54;
              v49 += v29;
              v46 += v33;
            }
            while (v49 < v45 + v28);
            ++v45;
            v44 += result;
            v42 += 8;
            v43 += 8;
          }
          while (v44 < 0x80);
        }
      }
      unsigned int v23 = 2 * v29;
      int v24 = v28 - v29;
      BOOL v26 = result > 1;
      result >>= 1;
    }
    while (v26);
    ++v10;
    v11 += 256;
    v13 += 256;
    v14 += 256;
    v12 += 2048;
  }
  while (v10 != 256);
  uint64_t v58 = 0;
  uint64_t v59 = a2 + 8;
  float32x4_t v60 = coder::fft2(float const*,creal32_T *)::yPerm;
  do
  {
    uint64_t v61 = 0;
    float32x4_t v62 = v60;
    do
    {
      float v63 = (uint64_t *)(v59 + v61);
      uint64_t v64 = v62[256];
      *(v63 - 1) = *v62;
      uint64_t *v63 = v64;
      v61 += 16;
      v62 += 512;
    }
    while (v61 != 2048);
    ++v58;
    v59 += 2048;
    ++v60;
  }
  while (v58 != 256);
  return result;
}

uint64_t coder::array_base<unsigned char,int,2>::ensureCapacity(uint64_t result, int a2)
{
  int v2 = *(_DWORD *)(result + 12);
  if (v2 < a2)
  {
    if (v2 <= 16) {
      int v2 = 16;
    }
    while (v2 < a2)
    {
      if (v2 <= 0x3FFFFFFF) {
        v2 *= 2;
      }
      else {
        int v2 = 0x7FFFFFFF;
      }
    }
    operator new[]();
  }
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t *get_peridot_nominal_jlin(afdr_package::bufferClass *a1, afdr_package::jlin_v100::jlinClass *a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  double v6 = v5;
  uint64_t v7 = (_DWORD *)v4;
  uint64_t v70 = *MEMORY[0x263EF8340];
  bzero((void *)(v4 + 4), 0x1048uLL);
  uint64_t *v6 = (uint64_t)v7;
  v6[1] = 0;
  _DWORD *v7 = 100;
  uint64_t v8 = *v6;
  uint64_t v9 = v6[1] << 32;
  *(unsigned char *)(v8 + ((v9 + 0x400000000) >> 32)) = 55;
  *(unsigned char *)(v8 + ((v9 + 0x500000000) >> 32)) = 26;
  *(unsigned char *)(v8 + ((v9 + 0x600000000) >> 32)) = -64;
  *(unsigned char *)(v8 + ((v9 + 0x700000000) >> 32)) = 91;
  *(unsigned char *)(v8 + ((v9 + 0x800000000) >> 32)) = 32;
  *(unsigned char *)(v8 + ((v9 + 0x900000000) >> 32)) = 65;
  *(unsigned char *)(v8 + ((v9 + 0xA00000000) >> 32)) = -19;
  *(unsigned char *)(v8 + ((v9 + 0xB00000000) >> 32)) = 63;
  uint64_t v10 = *v6;
  uint64_t v11 = v6[1] << 32;
  *(unsigned char *)(v10 + ((v11 + 0xC00000000) >> 32)) = 77;
  *(unsigned char *)(v10 + ((v11 + 0xD00000000) >> 32)) = -37;
  *(unsigned char *)(v10 + ((v11 + 0xE00000000) >> 32)) = -65;
  *(unsigned char *)(v10 + ((v11 + 0xF00000000) >> 32)) = -78;
  *(unsigned char *)(v10 + ((v11 + 0x1000000000) >> 32)) = -46;
  *(unsigned char *)(v10 + ((v11 + 0x1100000000) >> 32)) = -92;
  *(unsigned char *)(v10 + ((v11 + 0x1200000000) >> 32)) = -124;
  *(unsigned char *)(v10 + ((v11 + 0x1300000000) >> 32)) = 63;
  uint64_t v12 = *v6;
  unint64_t v13 = v6[1];
  int64x2_t v14 = vdupq_n_s64(v13);
  int64x2_t v15 = vaddq_s64(v14, (int64x2_t)xmmword_259120D60);
  int64x2_t v16 = vaddq_s64(v14, (int64x2_t)xmmword_259120D70);
  int64x2_t v17 = vaddq_s64(v14, (int64x2_t)xmmword_259120D80);
  int64x2_t v18 = vaddq_s64(v14, (int64x2_t)xmmword_259120D90);
  int64x2_t v19 = vaddq_s64(v14, (int64x2_t)xmmword_259120DA0);
  int64x2_t v20 = vaddq_s64(v14, (int64x2_t)xmmword_259120DB0);
  v13 <<= 32;
  *(unsigned char *)(v12 + ((uint64_t)(v13 + 0x1400000000) >> 32)) = -43;
  *(unsigned char *)(v12 + v15.i32[0]) = -49;
  *(unsigned char *)(v12 + v15.i32[2]) = -101;
  *(unsigned char *)(v12 + v16.i32[0]) = -118;
  *(unsigned char *)(v12 + v16.i32[2]) = 84;
  *(unsigned char *)(v12 + v17.i32[0]) = 24;
  *(unsigned char *)(v12 + v17.i32[2]) = -37;
  *(unsigned char *)(v12 + v18.i32[0]) = 63;
  *(unsigned char *)(v12 + v18.i32[2]) = 9;
  *(unsigned char *)(v12 + v19.i32[0]) = -31;
  *(unsigned char *)(v12 + v19.i32[2]) = -47;
  *(unsigned char *)(v12 + v20.i32[0]) = -58;
  int64x2_t v21 = vaddq_s64(v14, (int64x2_t)xmmword_259120DC0);
  *(unsigned char *)(v12 + v20.i32[2]) = 17;
  *(unsigned char *)(v12 + v21.i32[0]) = 107;
  *(unsigned char *)(v12 + v21.i32[2]) = -31;
  *(unsigned char *)(v12 + ((uint64_t)(v13 + 0x2300000000) >> 32)) = 63;
  int64x2_t v22 = vdupq_lane_s64(v6[1], 0);
  int64x2_t v61 = vaddq_s64(v22, (int64x2_t)xmmword_259120C50);
  int64x2_t v62 = vaddq_s64(v22, (int64x2_t)xmmword_259120C60);
  int64x2_t v63 = vaddq_s64(v22, (int64x2_t)xmmword_259120C70);
  int64x2_t v64 = vaddq_s64(v22, (int64x2_t)xmmword_259120C80);
  int64x2_t v65 = vaddq_s64(v22, (int64x2_t)xmmword_259120C90);
  int64x2_t v66 = vaddq_s64(v22, (int64x2_t)xmmword_259120CA0);
  int64x2_t v67 = vaddq_s64(v22, (int64x2_t)xmmword_259120CB0);
  int64x2_t v68 = vaddq_s64(v22, (int64x2_t)xmmword_259120CC0);
  afdr_package::bufferClass::setData(*v6, (const unint64_t *)&v61, get_peridot_nominal_jlin(afdr_package::bufferClass *,afdr_package::jlin_v100::jlinClass *)::S_type);
  unsigned int v23 = (const double *)(v6 + 1);
  int64x2_t v24 = (int64x2_t)vld1q_dup_f64(v23);
  int64x2_t v61 = vaddq_s64(v24, (int64x2_t)xmmword_259120DD0);
  int64x2_t v62 = vaddq_s64(v24, (int64x2_t)xmmword_259120DE0);
  int64x2_t v63 = vaddq_s64(v24, (int64x2_t)xmmword_259120DF0);
  int64x2_t v64 = vaddq_s64(v24, (int64x2_t)xmmword_259120E00);
  int64x2_t v65 = vaddq_s64(v24, (int64x2_t)xmmword_259120E10);
  int64x2_t v66 = vaddq_s64(v24, (int64x2_t)xmmword_259120E20);
  int64x2_t v67 = vaddq_s64(v24, (int64x2_t)xmmword_259120E30);
  int64x2_t v68 = vaddq_s64(v24, (int64x2_t)xmmword_259120E40);
  afdr_package::bufferClass::setData(*v6, (const unint64_t *)&v61, get_peridot_nominal_jlin(afdr_package::bufferClass *,afdr_package::jlin_v100::jlinClass *)::S_type);
  uint64_t v25 = 0;
  uint64_t v26 = v6[1];
  int64x2_t v27 = vdupq_n_s64(v26 + 36);
  int64x2_t v28 = (int64x2_t)xmmword_2591200C0;
  int64x2_t v29 = vdupq_n_s64(v26 + 38);
  int64x2_t v30 = vdupq_n_s64(4uLL);
  do
  {
    uint64_t v31 = (int64x2_t *)&v69[v25];
    *uint64_t v31 = vaddq_s64(v27, v28);
    v31[1] = vaddq_s64(v29, v28);
    int64x2_t v28 = vaddq_s64(v28, v30);
    v25 += 32;
  }
  while (v25 != 0x4000);
  uint64_t v32 = 0;
  uint64_t v33 = *v6;
  int32x2_t v34 = (int32x2_t)0x100000000;
  float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x3F6F03A5C468173AuLL);
  do
  {
    int32x2_t v36 = vadd_s32(v34, (int32x2_t)0x200000002);
    v37.i64[0] = v34.i32[0];
    v37.i64[1] = v34.i32[1];
    float64x2_t v38 = vcvtq_f64_s64(v37);
    v37.i64[0] = v36.i32[0];
    v37.i64[1] = v36.i32[1];
    float32x4_t v39 = (float64x2_t *)&v59[v32];
    float64x2_t *v39 = vmulq_f64(v38, v35);
    v39[1] = vmulq_f64(vcvtq_f64_s64(v37), v35);
    int32x2_t v34 = vadd_s32(v34, (int32x2_t)0x400000004);
    v32 += 32;
  }
  while (v32 != 2048);
  memcpy(__dst, v59, sizeof(__dst));
  for (uint64_t i = 0; i != 2048; i += 2)
  {
    char v41 = __dst[i + 1];
    float32x4_t v42 = (int *)&v69[8 * i];
    uint64_t v43 = *v42;
    uint64_t v44 = v42[2];
    *(unsigned char *)(v33 + v43) = __dst[i];
    *(unsigned char *)(v33 + v44) = v41;
  }
  uint64_t v45 = 0;
  uint64_t v46 = v6[1];
  int64x2_t v47 = vdupq_n_s64(v46 + 2084);
  int64x2_t v48 = (int64x2_t)xmmword_2591200C0;
  int64x2_t v49 = vdupq_n_s64(v46 + 2086);
  int64x2_t v50 = vdupq_n_s64(4uLL);
  do
  {
    float v51 = (int64x2_t *)&v69[v45];
    *float v51 = vaddq_s64(v47, v48);
    v51[1] = vaddq_s64(v49, v48);
    int64x2_t v48 = vaddq_s64(v48, v50);
    v45 += 32;
  }
  while (v45 != 0x4000);
  uint64_t v52 = 0;
  uint64_t v53 = *v6;
  do
  {
    char v54 = get_peridot_nominal_jlin(afdr_package::bufferClass *,afdr_package::jlin_v100::jlinClass *)::val[v52 + 1];
    float32x4_t v55 = (int *)&v69[8 * v52];
    uint64_t v56 = *v55;
    uint64_t v57 = v55[2];
    *(unsigned char *)(v53 + v56) = get_peridot_nominal_jlin(afdr_package::bufferClass *,afdr_package::jlin_v100::jlinClass *)::val[v52];
    *(unsigned char *)(v53 + v57) = v54;
    v52 += 2;
  }
  while (v52 != 2048);
  return v6;
}

void *coder::interp1(coder *this, const float *a2, const float *a3, const float *a4, float *a5, int *a6)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  memcpy(__dst, a2, sizeof(__dst));
  unint64_t result = memcpy(v36, this, sizeof(v36));
  uint64_t v11 = 0;
  *(void *)a5 = 0x100000070;
  *(_OWORD *)a4 = 0u;
  *((_OWORD *)a4 + 1) = 0u;
  *((_OWORD *)a4 + 2) = 0u;
  *((_OWORD *)a4 + 3) = 0u;
  *((_OWORD *)a4 + 4) = 0u;
  *((_OWORD *)a4 + 5) = 0u;
  *((_OWORD *)a4 + 6) = 0u;
  *((_OWORD *)a4 + 7) = 0u;
  *((_OWORD *)a4 + 8) = 0u;
  *((_OWORD *)a4 + 9) = 0u;
  *((_OWORD *)a4 + 10) = 0u;
  *((_OWORD *)a4 + 11) = 0u;
  *((_OWORD *)a4 + 12) = 0u;
  *((_OWORD *)a4 + 13) = 0u;
  *((_OWORD *)a4 + 14) = 0u;
  *((_OWORD *)a4 + 15) = 0u;
  *((_OWORD *)a4 + 16) = 0u;
  *((_OWORD *)a4 + 17) = 0u;
  *((_OWORD *)a4 + 18) = 0u;
  *((_OWORD *)a4 + 19) = 0u;
  *((_OWORD *)a4 + 20) = 0u;
  *((_OWORD *)a4 + 21) = 0u;
  *((_OWORD *)a4 + 22) = 0u;
  *((_OWORD *)a4 + 23) = 0u;
  *((_OWORD *)a4 + 24) = 0u;
  *((_OWORD *)a4 + 25) = 0u;
  *((_OWORD *)a4 + 26) = 0u;
  *((_OWORD *)a4 + 27) = 0u;
  while (v11 != 1024)
    v11 += 4;
  if (*((float *)this + 1) < *(float *)this)
  {
    uint64_t v12 = 0;
    for (uint64_t i = 255; i != 127; --i)
    {
      float v14 = v36[v12];
      v36[v12] = v36[i];
      v36[i] = v14;
      float v15 = __dst[v12];
      __dst[v12] = __dst[i];
      __dst[i] = v15;
      ++v12;
    }
  }
  uint64_t v16 = 0;
  float v17 = v36[255];
  *(void *)a5 = 0x100000070;
  float v18 = v36[0];
  float v19 = __dst[0];
  float v20 = __dst[1] - __dst[0];
  float v21 = __dst[255];
  float v22 = __dst[255] - __dst[254];
  float v23 = 1.0 / (float)(v36[1] - v36[0]);
  float v24 = 1.0 / (float)(v17 - v36[254]);
  do
  {
    float v26 = a3[v16];
    if (v26 > v17)
    {
      float v25 = v21 + (float)((float)(v22 * (float)(v26 - v17)) * v24);
    }
    else if (v26 >= v18)
    {
      int v27 = 256;
      int v28 = 2;
      int v29 = 1;
      do
      {
        int v30 = (v27 >> 1) + (v29 >> 1) + (v29 & v27 & 1);
        float v31 = v36[v30 - 1];
        if (v31 <= v26) {
          int v28 = v30 + 1;
        }
        else {
          int v27 = (v27 >> 1) + (v29 >> 1) + (v29 & v27 & 1);
        }
        if (v31 <= v26) {
          int v29 = v30;
        }
      }
      while (v27 > v28);
      uint64_t v32 = v29 - 1;
      float v33 = (float)(v26 - v36[v32]) / (float)(v36[v29] - v36[v32]);
      if (v33 == 0.0)
      {
        float v25 = __dst[v32];
      }
      else if (v33 == 1.0)
      {
        float v25 = __dst[v29];
      }
      else
      {
        float v25 = __dst[v32];
        float v34 = __dst[v29];
        if (v25 != v34) {
          float v25 = v25 + (float)((float)(v34 - v25) * v33);
        }
      }
    }
    else
    {
      float v25 = v19 + (float)((float)(v20 * (float)(v26 - v18)) * v23);
    }
    a4[v16++] = v25;
  }
  while (v16 != 112);
  return result;
}

uint64_t ransac::ransacComputeHomography(ransac *this, const float *a2, const int *a3, const float *a4, const int *a5, float *a6, float a7)
{
  uint64_t v8 = (char *)MEMORY[0x270FA5388](this, a2, a3, a7);
  v2654 = v12;
  unsigned int v14 = v13;
  uint64_t v16 = v15;
  unsigned int v17 = v9;
  uint64_t v2982 = *MEMORY[0x263EF8340];
  if (v9 < 1)
  {
    v20.i32[0] = 2143289344;
    v21.i32[0] = 2143289344;
    v19.i32[0] = 2143289344;
    goto LABEL_139;
  }
  float v18 = v8;
  memcpy(&v2842, v8, 12 * v9);
  uint64_t v22 = v17;
  if (v17 > 8)
  {
    uint64_t v24 = v17 & 7;
    if (!v24) {
      uint64_t v24 = 8;
    }
    uint64_t v23 = v17 - v24;
    float v25 = (float32x4_t *)v2820;
    float v26 = (const float *)(v18 + 56);
    uint64_t v27 = v23;
    do
    {
      int v28 = v26 - 12;
      unsigned long long v29 = (unsigned __int128)vld3q_f32(v28);
      unsigned long long v30 = (unsigned __int128)vld3q_f32(v26);
      float32x4_t v10 = vabsq_f32((float32x4_t)v29);
      float32x4_t v11 = vabsq_f32((float32x4_t)v30);
      v25[-1] = v10;
      *float v25 = v11;
      v25 += 2;
      v26 += 24;
      v27 -= 8;
    }
    while (v27);
  }
  else
  {
    uint64_t v23 = 0;
  }
  float v31 = (float *)&v18[12 * v23 + 8];
  do
  {
    float v32 = *v31;
    v31 += 3;
    *(float *)&v2819[4 * v23++ - 4] = fabsf(v32);
  }
  while (v17 != v23);
  if (v17 > 7)
  {
    if (v17 >= 0x20)
    {
      uint64_t v33 = v17 & 0xFFFFFFE0;
      float v34 = (int8x16_t *)v2791;
      float64x2_t v35 = (float32x4_t *)v2822;
      float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x25800000u);
      v11.i64[0] = 0x101010101010101;
      v11.i64[1] = 0x101010101010101;
      uint64_t v36 = v33;
      do
      {
        int8x16_t v37 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v35, v10), (int16x8_t)vcgtq_f32(v35[1], v10)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v35[2], v10), (int16x8_t)vcgtq_f32(v35[3], v10))), (int8x16_t)v11);
        v34[-1] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v35[-4], v10), (int16x8_t)vcgtq_f32(v35[-3], v10)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v35[-2], v10), (int16x8_t)vcgtq_f32(v35[-1], v10))), (int8x16_t)v11);
        *float v34 = v37;
        v34 += 2;
        v35 += 8;
        v36 -= 32;
      }
      while (v36);
      if (v33 == v17) {
        goto LABEL_24;
      }
      if ((v17 & 0x18) == 0) {
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v33 = 0;
    }
    uint64_t v38 = v33;
    uint64_t v33 = v17 & 0xFFFFFFF8;
    uint64_t v39 = v38 - v33;
    float v40 = (int8x8_t *)&v2790[v38];
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x25800000u);
    v11.i32[1] = 16843009;
    char v41 = (float32x4_t *)&v2819[4 * v38 - 4];
    do
    {
      float32x4_t v42 = *v41;
      float32x4_t v43 = v41[1];
      v41 += 2;
      *v40++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v42, v10), (int16x8_t)vcgtq_f32(v43, v10))), (int8x8_t)0x101010101010101);
      v39 += 8;
    }
    while (v39);
    if (v33 == v17) {
      goto LABEL_24;
    }
    goto LABEL_22;
  }
  uint64_t v33 = 0;
LABEL_22:
  uint64_t v44 = v17 - v33;
  uint64_t v45 = &v2790[v33];
  uint64_t v46 = (float *)&v2819[4 * v33 - 4];
  do
  {
    float v47 = *v46++;
    *v45++ = v47 > 2.2204e-16;
    --v44;
  }
  while (v44);
LABEL_24:
  signed int v48 = 0;
  int v49 = 0;
  do
  {
    int v50 = v2790[v48];
    if (!v2790[v48])
    {
      ++v48;
      if (v50) {
        break;
      }
      continue;
    }
    __src[v49++] = v48 + 1;
    if (v49 >= (int)v17) {
      break;
    }
    ++v48;
  }
  while (v48 < (int)v17);
  if (v17 == 1)
  {
    if (v49)
    {
      uint64_t v51 = 0;
      int __dst = __src[0];
      int v52 = 1;
      uint64_t v53 = 1;
      unsigned int v54 = 1;
      goto LABEL_41;
    }
    uint64_t v55 = 0;
    v19.i32[0] = 2143289344;
    uint64_t v22 = 1;
    v21.i32[0] = 2143289344;
    v20.i32[0] = 2143289344;
    goto LABEL_137;
  }
  if (v49 < 1)
  {
    float v56 = 0.0;
    float v57 = NAN;
    float v58 = NAN;
    float v59 = 0.0;
  }
  else
  {
    uint64_t v53 = v49 & ~(v49 >> 31);
    unsigned int v54 = v49 & ~(v49 >> 31);
    memcpy(&__dst, __src, 4 * v53);
    if (v53 >= 2)
    {
      uint64_t v51 = v53 & 0x7FFFFFFE;
      float32x4_t v60 = v2797;
      uint64_t v61 = v51;
      do
      {
        int v62 = 3 * *v60;
        uint64_t v63 = 4 * (v62 - 3);
        float v64 = *(float *)&v18[v63] / *(float *)&v18[4 * v62 - 4];
        *(&v2842 + 3 * *(v60 - 1) - 3) = *(float *)&v18[12 * *(v60 - 1) - 12] / *(float *)&v18[12 * *(v60 - 1) - 4];
        *(float *)((char *)&v2842 + v63) = v64;
        v60 += 2;
        v61 -= 2;
      }
      while (v61);
      int v52 = 0;
      if (v51 != v53) {
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v51 = 0;
      int v52 = 1;
      do
      {
LABEL_41:
        *(&v2842 + 3 * *(_DWORD *)&v2797[4 * v51 - 4] - 3) = *(float *)&v18[12 * *(_DWORD *)&v2797[4 * v51 - 4] - 12]
                                                           / *(float *)&v18[12 * *(_DWORD *)&v2797[4 * v51 - 4] - 4];
        ++v51;
      }
      while (v53 != v51);
      if (v52)
      {
        uint64_t v65 = 0;
        goto LABEL_47;
      }
    }
    uint64_t v65 = v53 & 0x7FFFFFFE;
    int64x2_t v66 = (float *)v2826;
    int64x2_t v67 = v2797;
    uint64_t v68 = v65;
    do
    {
      float v69 = *(&v2842 + 3 * *v67 - 2) / *(&v2842 + 3 * *v67 - 1);
      *(v66 - 1) = *(&v2842 + 3 * *(v67 - 1) - 2) / *(&v2842 + 3 * *(v67 - 1) - 1);
      *int64x2_t v66 = v69;
      v66 += 2;
      v67 += 2;
      v68 -= 2;
    }
    while (v68);
    for (; v53 != v65; ++v65)
LABEL_47:
      *(float32_t *)&v2826[4 * v65 - 4] = *(&v2842 + 3 * *(_DWORD *)&v2797[4 * v65 - 4] - 2)
                                        / *(&v2842 + 3 * *(_DWORD *)&v2797[4 * v65 - 4] - 1);
    if (v52)
    {
      uint64_t v70 = 0;
      goto LABEL_53;
    }
    uint64_t v70 = v53 & 0x7FFFFFFE;
    int v71 = v2797;
    uint64_t v72 = (float *)v2826;
    uint64_t v73 = v70;
    do
    {
      int v74 = 3 * *v71 - 2;
      *(&v2842 + 3 * *(v71 - 1) - 2) = *(v72 - 1);
      float v75 = *v72;
      v72 += 2;
      *(&v2842 + v74) = v75;
      v71 += 2;
      v73 -= 2;
    }
    while (v73);
    if (v70 != v53)
    {
LABEL_53:
      uint64_t v76 = v53 - v70;
      uint64_t v77 = 4 * v70;
      float32x4_t v78 = (int *)&v2797[4 * v70 - 4];
      float32x4_t v79 = (int *)&v2826[v77 - 4];
      do
      {
        int v80 = *v79++;
        int v81 = v80;
        int v82 = *v78++;
        *((_DWORD *)&v2842 + 3 * v82 - 2) = v81;
        --v76;
      }
      while (v76);
    }
    if (v54 <= 7)
    {
      uint64_t v83 = 0;
      goto LABEL_66;
    }
    if (v54 >= 0x20)
    {
      uint64_t v83 = v53 & 0x7FFFFFE0;
      float32x4_t v84 = (int8x16_t *)v2793;
      float v85 = (int8x16x4_t *)v2798;
      v10.i64[1] = 0x3C3834302C282420;
      uint64_t v86 = v83;
      do
      {
        float32x4_t v11 = (float32x4_t)vqtbl4q_s8(v85[-1], (int8x16_t)xmmword_259120320);
        int8x16x4_t v3004 = *v85;
        v84[-1] = (int8x16_t)v11;
        *float32x4_t v84 = vqtbl4q_s8(v3004, (int8x16_t)xmmword_259120320);
        v84 += 2;
        v85 += 2;
        v86 -= 32;
      }
      while (v86);
      if (v83 != v53)
      {
        if ((v53 & 0x18) == 0) {
          goto LABEL_66;
        }
        goto LABEL_63;
      }
    }
    else
    {
      uint64_t v83 = 0;
LABEL_63:
      uint64_t v87 = v83;
      uint64_t v83 = v53 & 0x7FFFFFF8;
      uint64_t v88 = v87 - v83;
      float32x4_t v89 = &v2791[v87 + 96];
      int32x2_t v90 = (float32x4_t *)&v2797[4 * v87 - 4];
      v10.i64[1] = -1;
      do
      {
        float32x4_t v11 = *v90;
        float32x4_t v91 = v90[1];
        v90 += 2;
        v11.i64[0] = vqtbl2q_s8(*(int8x16x2_t *)v11.f32, (int8x16_t)xmmword_259120330).u64[0];
        *v89++ = v11.i64[0];
        v88 += 8;
      }
      while (v88);
      if (v83 != v53)
      {
LABEL_66:
        uint64_t v92 = v53 - v83;
        uint64_t v93 = &v2791[v83 + 96];
        float32x4_t v94 = (int *)&v2797[4 * v83 - 4];
        do
        {
          int v95 = *v94++;
          *v93++ = v95;
          --v92;
        }
        while (v92);
      }
    }
    if (v52)
    {
      uint64_t v96 = 0;
      goto LABEL_73;
    }
    uint64_t v96 = v53 & 0x7FFFFFFE;
    unint64_t v97 = v2792;
    uint64_t v98 = v96;
    do
    {
      unint64_t v99 = &v2842 + 3 * *v97;
      *(&v2842 + 3 * *(v97 - 1) - 1) = 1.0;
      *(v99 - 1) = 1.0;
      v97 += 2;
      v98 -= 2;
    }
    while (v98);
    if (v96 != v53)
    {
LABEL_73:
      uint64_t v100 = v53 - v96;
      int v101 = &v2791[v96 + 96];
      do
      {
        int v102 = *v101++;
        *(&v2842 + 3 * v102 - 1) = 1.0;
        --v100;
      }
      while (v100);
    }
    uint64_t v103 = 0;
    int v104 = v2829;
    do
    {
      int v105 = 3 * *(_DWORD *)&v2797[4 * v103 - 4];
      int v106 = *((_DWORD *)&v2842 + v105 - 2);
      *(v104 - 1) = *(&v2842 + v105 - 3);
      *(_DWORD *)int v104 = v106;
      ++v103;
      v104 += 2;
    }
    while (v53 != v103);
    float v57 = v2828;
    float v58 = v2829[0];
    float v56 = 1.0;
    if (v54 != 1)
    {
      if (v54 < 3)
      {
        uint64_t v107 = 2;
        goto LABEL_80;
      }
      uint64_t v107 = 2;
      if ((2 * (v53 - 2)) > 0x7FFFFFFD || (unint64_t)(v53 - 2) >> 31)
      {
LABEL_80:
        uint64_t v108 = v54 - v107 + 1;
        int v109 = 2 * v107 - 1;
        uint64_t v110 = (v107 << 33) - 0x200000000;
        do
        {
          float v57 = *(float *)((char *)&v2829[-1] + (v110 >> 30)) + v57;
          float v58 = v2829[v109 - 1] + v58;
          v109 += 2;
          v110 += 0x200000000;
          --v108;
        }
        while (v108);
      }
      else
      {
        unint64_t v153 = (v53 - 1) & 0xFFFFFFFFFFFFFFFELL;
        float v154 = 0.0;
        int v155 = 5;
        uint64_t v156 = 0x200000000;
        unint64_t v157 = v153;
        uint64_t v158 = 0x400000000;
        float v159 = 0.0;
        do
        {
          float v57 = *(float *)((char *)&v2829[-1] + (v156 >> 30)) + v57;
          float v159 = *(float *)((char *)&v2829[-1] + (v158 >> 30)) + v159;
          float v58 = *(&v2828 + v155 - 2) + v58;
          float v154 = v2829[v155 - 1] + v154;
          v155 += 4;
          v158 += 0x400000000;
          v156 += 0x400000000;
          v157 -= 2;
        }
        while (v157);
        float v57 = v159 + v57;
        float v58 = v154 + v58;
        if (v53 - 1 != v153)
        {
          uint64_t v107 = v153 + 2;
          goto LABEL_80;
        }
      }
      float v56 = (float)(int)v54;
      float v57 = v57 / (float)(int)v54;
      float v58 = v58 / (float)(int)v54;
    }
    uint64_t v111 = 0;
    uint64_t v112 = v2829;
    do
    {
      uint64_t v113 = v111;
      if (v54 == 1) {
        uint64_t v113 = 0;
      }
      int v114 = 3 * *(_DWORD *)&v2797[4 * v113 - 4];
      float v115 = *(&v2842 + v114 - 2) - v58;
      *(v112 - 1) = *(&v2842 + v114 - 3) - v57;
      *uint64_t v112 = v115;
      ++v111;
      v112 += 2;
    }
    while (v53 != v111);
    if (v54 > 8)
    {
      uint64_t v117 = v53 & 7;
      if ((v53 & 7) == 0) {
        uint64_t v117 = 8;
      }
      uint64_t v116 = v53 - v117;
      uint64_t v118 = (float32x4_t *)v2820;
      uint64_t v119 = (const float *)v2830;
      uint64_t v120 = v116;
      do
      {
        uint64_t v121 = v119 - 8;
        unsigned long long v122 = (unsigned __int128)vld2q_f32(v121);
        unsigned long long v123 = (unsigned __int128)vld2q_f32(v119);
        v118[-1] = vmulq_f32((float32x4_t)v122, (float32x4_t)v122);
        float32x4_t *v118 = vmulq_f32((float32x4_t)v123, (float32x4_t)v123);
        v118 += 2;
        v119 += 16;
        v120 -= 8;
      }
      while (v120);
    }
    else
    {
      uint64_t v116 = 0;
    }
    uint64_t v124 = &v2829[2 * v116 - 1];
    do
    {
      float v125 = *v124;
      v124 += 2;
      *(float *)&v2819[4 * v116++ - 4] = v125 * v125;
    }
    while (v53 != v116);
    if (v54 > 8)
    {
      uint64_t v127 = v53 & 7;
      if ((v53 & 7) == 0) {
        uint64_t v127 = 8;
      }
      uint64_t v126 = v53 - v127;
      long long v128 = (float32x4_t *)v2827;
      uint64_t v129 = (const float *)v2831;
      uint64_t v130 = v126;
      do
      {
        uint64_t v131 = v129 - 8;
        unsigned long long v132 = (unsigned __int128)vld2q_f32(v131);
        unsigned long long v133 = (unsigned __int128)vld2q_f32(v129);
        v128[-1] = vmulq_f32((float32x4_t)v132, (float32x4_t)v132);
        *long long v128 = vmulq_f32((float32x4_t)v133, (float32x4_t)v133);
        v128 += 2;
        v129 += 16;
        v130 -= 8;
      }
      while (v130);
    }
    else
    {
      uint64_t v126 = 0;
    }
    uint64_t v134 = &v2829[2 * v126];
    do
    {
      float v135 = *v134;
      v134 += 2;
      *(float32_t *)&v2826[4 * v126++ - 4] = v135 * v135;
    }
    while (v53 != v126);
    if (v54 <= 7)
    {
      uint64_t v136 = 0;
      goto LABEL_108;
    }
    uint64_t v136 = v53 & 0x7FFFFFF8;
    int v137 = (float32x4_t *)v2820;
    uint64_t v138 = (float32x4_t *)v2827;
    uint64_t v139 = v136;
    do
    {
      float32x4_t v140 = vaddq_f32(*v137, *v138);
      v137[-1] = vaddq_f32(v137[-1], v138[-1]);
      *int v137 = v140;
      v137 += 2;
      v138 += 2;
      v139 -= 8;
    }
    while (v139);
    if (v136 != v53)
    {
LABEL_108:
      uint64_t v141 = v53 - v136;
      uint64_t v142 = 4 * v136;
      uint64_t v143 = (float *)&v2819[4 * v136 - 4];
      uint64_t v144 = (float32_t *)&v2826[v142 - 4];
      do
      {
        float v145 = *v144++;
        float *v143 = *v143 + v145;
        ++v143;
        --v141;
      }
      while (v141);
    }
    if (v54 <= 7)
    {
      uint64_t v146 = 0;
      goto LABEL_115;
    }
    uint64_t v146 = v53 & 0x7FFFFFF8;
    int v147 = (float32x4_t *)v2820;
    uint64_t v148 = v146;
    do
    {
      float32x4_t v149 = vsqrtq_f32(*v147);
      v147[-1] = vsqrtq_f32(v147[-1]);
      *int v147 = v149;
      v147 += 2;
      v148 -= 8;
    }
    while (v148);
    if (v146 != v53)
    {
LABEL_115:
      uint64_t v150 = v53 - v146;
      double v151 = (float *)&v2819[4 * v146 - 4];
      do
      {
        *double v151 = sqrtf(*v151);
        ++v151;
        --v150;
      }
      while (v150);
    }
    float v59 = v2818;
    if (v54 != 1)
    {
      if (v54 >= 9)
      {
        unint64_t v160 = (v53 - 1) & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v161 = 0uLL;
        float32x4_t v162 = (float32x4_t)LODWORD(v2818);
        double v163 = (float32x4_t *)v2821;
        unint64_t v164 = v160;
        do
        {
          float32x4_t v162 = vaddq_f32(v163[-1], v162);
          float32x4_t v161 = vaddq_f32(*v163, v161);
          v163 += 2;
          v164 -= 8;
        }
        while (v164);
        float32x4_t v165 = vaddq_f32(v161, v162);
        float v59 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v165, v165));
        if (v53 - 1 != v160)
        {
          uint64_t v152 = v160 | 2;
          goto LABEL_130;
        }
      }
      else
      {
        uint64_t v152 = 2;
LABEL_130:
        uint64_t v166 = v54 - v152 + 1;
        uint64_t v167 = (float *)&v2819[4 * v152 - 8];
        do
        {
          float v168 = *v167++;
          float v59 = v168 + v59;
          --v166;
        }
        while (v166);
      }
    }
  }
  *(float *)v19.i32 = (float)(v56 * 1.4142) / v59;
  *(float *)v21.i32 = -(float)(*(float *)v19.i32 * v57);
  *(float *)v20.i32 = -(float)(*(float *)v19.i32 * v58);
  if (v17 < 4)
  {
    uint64_t v55 = 0;
    goto LABEL_137;
  }
  uint64_t v55 = v17 & 0xFFFFFFFC;
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(v19, 0);
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(v21, 0);
  float32x4_t v169 = (float32x4_t)vdupq_lane_s32(v20, 0);
  int v170 = (float *)v2841;
  int v171 = &v2842;
  uint64_t v172 = v55;
  do
  {
    float32x4x3_t v2991 = vld3q_f32(v171);
    v171 += 12;
    float32x4_t v173 = vmulq_f32(v2991.val[1], (float32x4_t)0);
    v2997.val[0] = vmlaq_f32(vmlaq_f32(v173, v10, v2991.val[0]), v11, v2991.val[2]);
    float32x4_t v174 = vmulq_f32(v2991.val[0], (float32x4_t)0);
    float32x4_t v175 = vaddq_f32(v173, v174);
    v2997.val[1] = vmlaq_f32(vmlaq_f32(v174, v2991.val[1], v10), v2991.val[2], v169);
    v2997.val[2] = vaddq_f32(v175, v2991.val[2]);
    vst3q_f32(v170, v2997);
    v170 += 12;
    v172 -= 4;
  }
  while (v172);
  if (v55 != v17)
  {
LABEL_137:
    uint64_t v176 = v22 - v55;
    uint64_t v177 = 12 * v55 + 8;
    uint64_t v178 = (float *)((char *)&v2842 + v177);
    unsigned int v179 = (float *)&v2841[v177];
    v10.i32[1] = 0;
    do
    {
      float v180 = *(v178 - 2);
      float v181 = *(v178 - 1);
      float v182 = *v178;
      v178 += 3;
      float v183 = (float)((float)(v181 * 0.0) + (float)(v180 * *(float *)v19.i32)) + (float)(v182 * *(float *)v21.i32);
      float v184 = v180 * 0.0;
      *(v179 - 2) = v183;
      *(v179 - 1) = (float)(v184 + (float)(*(float *)v19.i32 * v181)) + (float)(*(float *)v20.i32 * v182);
      *unsigned int v179 = (float)((float)(v181 * 0.0) + v184) + v182;
      v179 += 3;
      --v176;
    }
    while (v176);
  }
LABEL_139:
  float v2651 = *(float *)v21.i32;
  float v2652 = *(float *)v20.i32;
  float v2653 = *(float *)v19.i32;
  int v2794 = 3;
  unsigned int v2795 = v14;
  float v185 = 0.0;
  if ((int)v14 < 1) {
    goto LABEL_167;
  }
  memcpy(v2847, v16, 12 * v14);
  uint64_t v187 = 0;
  int16x8_t v188 = v16 + 2;
  do
  {
    float v189 = *v188;
    v188 += 3;
    *(float *)&v2819[v187 - 4] = fabsf(v189);
    v187 += 4;
  }
  while (4 * v14 != v187);
  if (v14 <= 7)
  {
    uint64_t v190 = 0;
    goto LABEL_153;
  }
  if (v14 >= 0x20)
  {
    uint64_t v190 = v14 & 0xFFFFFFE0;
    uint64_t v191 = (int8x16_t *)v2791;
    unint64_t v192 = (float32x4_t *)v2822;
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x25800000u);
    v11.i64[0] = 0x101010101010101;
    v11.i64[1] = 0x101010101010101;
    uint64_t v193 = v190;
    do
    {
      float32x4_t v186 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v192[-4], v10), (int16x8_t)vcgtq_f32(v192[-3], v10)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v192[-2], v10), (int16x8_t)vcgtq_f32(v192[-1], v10))), (int8x16_t)v11);
      int8x16_t v194 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v192, v10), (int16x8_t)vcgtq_f32(v192[1], v10)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v192[2], v10), (int16x8_t)vcgtq_f32(v192[3], v10))), (int8x16_t)v11);
      v191[-1] = (int8x16_t)v186;
      int8x16_t *v191 = v194;
      v191 += 2;
      v192 += 8;
      v193 -= 32;
    }
    while (v193);
    if (v190 != v14)
    {
      if ((v14 & 0x18) != 0) {
        goto LABEL_150;
      }
      goto LABEL_153;
    }
  }
  else
  {
    uint64_t v190 = 0;
LABEL_150:
    uint64_t v195 = v190;
    uint64_t v190 = v14 & 0xFFFFFFF8;
    uint64_t v196 = v195 - v190;
    unint64_t v197 = &v2790[v195];
    float32x4_t v10 = (float32x4_t)vdupq_n_s32(0x25800000u);
    v11.i32[1] = 16843009;
    uint64_t v198 = (float32x4_t *)&v2819[4 * v195 - 4];
    do
    {
      float32x4_t v186 = *v198;
      float32x4_t v199 = v198[1];
      v198 += 2;
      *(int8x8_t *)v186.f32 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v186, v10), (int16x8_t)vcgtq_f32(v199, v10))), (int8x8_t)0x101010101010101);
      *v197++ = v186.i64[0];
      v196 += 8;
    }
    while (v196);
    if (v190 != v14)
    {
LABEL_153:
      uint64_t v200 = v14 - v190;
      uint64_t v201 = &v2790[v190];
      int v202 = (float *)&v2819[4 * v190 - 4];
      do
      {
        float v203 = *v202++;
        *v201++ = v203 > 2.2204e-16;
        --v200;
      }
      while (v200);
    }
  }
  signed int v204 = 0;
  int v205 = 0;
  while (2)
  {
    int v206 = v2790[v204];
    if (!v2790[v204])
    {
      ++v204;
      if (v206) {
        goto LABEL_161;
      }
LABEL_157:
      if (v204 >= (int)v14) {
        goto LABEL_161;
      }
      continue;
    }
    break;
  }
  __src[v205++] = v204 + 1;
  if (v205 < (int)v14)
  {
    ++v204;
    goto LABEL_157;
  }
LABEL_161:
  if (v14 != 1)
  {
    if (v205 < 1) {
      goto LABEL_167;
    }
    uint64_t v209 = v205 & ~(v205 >> 31);
    unsigned int v210 = v205 & ~(v205 >> 31);
    memcpy(&__dst, __src, 4 * v209);
    if (v209 >= 2)
    {
      uint64_t v207 = v209 & 0x7FFFFFFE;
      uint64_t v213 = v2797;
      uint64_t v214 = v207;
      do
      {
        int v215 = 3 * *v213;
        uint64_t v216 = v215 - 3;
        float v217 = v16[v216] / v16[v215 - 1];
        v2847[3 * *(v213 - 1) - 3] = v16[3 * *(v213 - 1) - 3] / v16[3 * *(v213 - 1) - 1];
        v2847[v216] = v217;
        v213 += 2;
        v214 -= 2;
      }
      while (v214);
      int v208 = 0;
      if (v207 != v209) {
        goto LABEL_171;
      }
    }
    else
    {
      uint64_t v207 = 0;
      int v208 = 1;
      do
      {
LABEL_171:
        v2847[3 * *(_DWORD *)&v2797[4 * v207 - 4] - 3] = v16[3 * *(_DWORD *)&v2797[4 * v207 - 4] - 3]
                                                       / v16[3 * *(_DWORD *)&v2797[4 * v207 - 4] - 1];
        ++v207;
      }
      while (v209 != v207);
      if (v208)
      {
        uint64_t v218 = 0;
        goto LABEL_177;
      }
    }
    uint64_t v218 = v209 & 0x7FFFFFFE;
    uint64_t v219 = (float *)v2826;
    unint64_t v220 = v2797;
    uint64_t v221 = v218;
    do
    {
      float v222 = v2847[3 * *v220 - 2] / v2847[3 * *v220 - 1];
      *(v219 - 1) = v2847[3 * *(v220 - 1) - 2] / v2847[3 * *(v220 - 1) - 1];
      *uint64_t v219 = v222;
      v219 += 2;
      v220 += 2;
      v221 -= 2;
    }
    while (v221);
    if (v218 == v209)
    {
LABEL_178:
      if (v208)
      {
        uint64_t v223 = 0;
      }
      else
      {
        uint64_t v223 = v209 & 0x7FFFFFFE;
        int32x4_t v224 = v2797;
        int32x4_t v225 = (float *)v2826;
        uint64_t v226 = v223;
        do
        {
          int v227 = 3 * *v224 - 2;
          v2847[3 * *(v224 - 1) - 2] = *(v225 - 1);
          float v228 = *v225;
          v225 += 2;
          v2847[v227] = v228;
          v224 += 2;
          v226 -= 2;
        }
        while (v226);
        if (v223 == v209)
        {
LABEL_185:
          if (v210 <= 7)
          {
            uint64_t v236 = 0;
            goto LABEL_196;
          }
          if (v210 >= 0x20)
          {
            uint64_t v236 = v209 & 0x7FFFFFE0;
            unint64_t v237 = (float32x4_t *)v2793;
            int v238 = (int8x16x4_t *)v2798;
            v10.i64[1] = 0x3C3834302C282420;
            uint64_t v239 = v236;
            do
            {
              float32x4_t v11 = (float32x4_t)vqtbl4q_s8(v238[-1], (int8x16_t)xmmword_259120320);
              float32x4_t v186 = (float32x4_t)vqtbl4q_s8(*v238, (int8x16_t)xmmword_259120320);
              v237[-1] = v11;
              *unint64_t v237 = v186;
              v237 += 2;
              v238 += 2;
              v239 -= 32;
            }
            while (v239);
            if (v236 == v209) {
              goto LABEL_198;
            }
            if ((v209 & 0x18) == 0)
            {
LABEL_196:
              uint64_t v244 = v209 - v236;
              uint64_t v245 = &v2791[v236 + 96];
              uint64_t v246 = (int *)&v2797[4 * v236 - 4];
              do
              {
                int v247 = *v246++;
                *v245++ = v247;
                --v244;
              }
              while (v244);
              goto LABEL_198;
            }
          }
          else
          {
            uint64_t v236 = 0;
          }
          uint64_t v240 = v236;
          uint64_t v236 = v209 & 0x7FFFFFF8;
          uint64_t v241 = v240 - v236;
          int8x16_t v242 = &v2791[v240 + 96];
          int v243 = (float32x4_t *)&v2797[4 * v240 - 4];
          v10.i64[1] = -1;
          do
          {
            float32x4_t v11 = *v243;
            float32x4_t v186 = v243[1];
            v243 += 2;
            v11.i64[0] = vqtbl2q_s8(*(int8x16x2_t *)v11.f32, (int8x16_t)xmmword_259120330).u64[0];
            *v242++ = v11.i64[0];
            v241 += 8;
          }
          while (v241);
          if (v236 != v209) {
            goto LABEL_196;
          }
LABEL_198:
          if (v208)
          {
            uint64_t v248 = 0;
          }
          else
          {
            uint64_t v248 = v209 & 0x7FFFFFFE;
            uint64_t v249 = v2792;
            uint64_t v250 = v248;
            do
            {
              uint64_t v251 = &v2847[3 * *v249];
              v2847[3 * *(v249 - 1) - 1] = 1.0;
              *(v251 - 1) = 1.0;
              v249 += 2;
              v250 -= 2;
            }
            while (v250);
            if (v248 == v209)
            {
LABEL_205:
              uint64_t v255 = 0;
              do
              {
                v10.i64[0] = *(void *)&v2847[3 * *(_DWORD *)&v2797[4 * v255 - 4] - 3];
                *(void *)&v2829[2 * v255++ - 1] = v10.i64[0];
              }
              while (v209 != v255);
              float v211 = v2828;
              float v212 = v2829[0];
              float v185 = 1.0;
              if (v210 == 1) {
                goto LABEL_213;
              }
              if (v210 >= 3)
              {
                uint64_t v256 = 2;
                if ((2 * (v209 - 2)) <= 0x7FFFFFFD && !((unint64_t)(v209 - 2) >> 31))
                {
                  unint64_t v302 = (v209 - 1) & 0xFFFFFFFFFFFFFFFELL;
                  v186.i64[0] = 0;
                  int v303 = 5;
                  uint64_t v304 = 0x200000000;
                  unint64_t v305 = v302;
                  uint64_t v306 = 0x400000000;
                  float v307 = 0.0;
                  do
                  {
                    float v211 = *(float *)((char *)&v2829[-1] + (v304 >> 30)) + v211;
                    float v307 = *(float *)((char *)&v2829[-1] + (v306 >> 30)) + v307;
                    float v212 = *(&v2828 + v303 - 2) + v212;
                    v186.f32[0] = v2829[v303 - 1] + v186.f32[0];
                    v303 += 4;
                    v306 += 0x400000000;
                    v304 += 0x400000000;
                    v305 -= 2;
                  }
                  while (v305);
                  float v211 = v307 + v211;
                  float v212 = v186.f32[0] + v212;
                  if (v209 - 1 == v302) {
                    goto LABEL_212;
                  }
                  uint64_t v256 = v302 + 2;
                }
              }
              else
              {
                uint64_t v256 = 2;
              }
              uint64_t v257 = v210 - v256 + 1;
              int v258 = 2 * v256 - 1;
              uint64_t v259 = (v256 << 33) - 0x200000000;
              do
              {
                float v211 = *(float *)((char *)&v2829[-1] + (v259 >> 30)) + v211;
                float v212 = v2829[v258 - 1] + v212;
                v258 += 2;
                v259 += 0x200000000;
                --v257;
              }
              while (v257);
LABEL_212:
              float v185 = (float)(int)v210;
              float v211 = v211 / (float)(int)v210;
              float v212 = v212 / (float)(int)v210;
LABEL_213:
              uint64_t v260 = 0;
              uint64_t v261 = v2829;
              do
              {
                uint64_t v262 = v260;
                if (v210 == 1) {
                  uint64_t v262 = 0;
                }
                int v263 = 3 * *(_DWORD *)&v2797[4 * v262 - 4];
                float v264 = v2847[v263 - 2] - v212;
                *(v261 - 1) = v2847[v263 - 3] - v211;
                *uint64_t v261 = v264;
                ++v260;
                v261 += 2;
              }
              while (v209 != v260);
              if (v210 > 8)
              {
                uint64_t v266 = v209 & 7;
                if ((v209 & 7) == 0) {
                  uint64_t v266 = 8;
                }
                uint64_t v265 = v209 - v266;
                unint64_t v267 = (float32x4_t *)v2820;
                unint64_t v268 = (const float *)v2830;
                uint64_t v269 = v265;
                do
                {
                  double v270 = v268 - 8;
                  unsigned long long v271 = (unsigned __int128)vld2q_f32(v270);
                  unsigned long long v272 = (unsigned __int128)vld2q_f32(v268);
                  float32x4_t v186 = vmulq_f32((float32x4_t)v271, (float32x4_t)v271);
                  v267[-1] = v186;
                  float32x4_t *v267 = vmulq_f32((float32x4_t)v272, (float32x4_t)v272);
                  v267 += 2;
                  v268 += 16;
                  v269 -= 8;
                }
                while (v269);
              }
              else
              {
                uint64_t v265 = 0;
              }
              double v273 = &v2829[2 * v265 - 1];
              do
              {
                float v274 = *v273;
                v273 += 2;
                *(float *)&v2819[4 * v265++ - 4] = v274 * v274;
              }
              while (v209 != v265);
              if (v210 > 8)
              {
                uint64_t v276 = v209 & 7;
                if ((v209 & 7) == 0) {
                  uint64_t v276 = 8;
                }
                uint64_t v275 = v209 - v276;
                uint64_t v277 = (float32x4_t *)v2827;
                double v278 = (const float *)v2831;
                uint64_t v279 = v275;
                do
                {
                  double v280 = v278 - 8;
                  unsigned long long v281 = (unsigned __int128)vld2q_f32(v280);
                  unsigned long long v282 = (unsigned __int128)vld2q_f32(v278);
                  float32x4_t v186 = vmulq_f32((float32x4_t)v281, (float32x4_t)v281);
                  v277[-1] = v186;
                  float32x4_t *v277 = vmulq_f32((float32x4_t)v282, (float32x4_t)v282);
                  v277 += 2;
                  v278 += 16;
                  v279 -= 8;
                }
                while (v279);
              }
              else
              {
                uint64_t v275 = 0;
              }
              int8x16x2_t v283 = &v2829[2 * v275];
              do
              {
                float v284 = *v283;
                v283 += 2;
                *(float32_t *)&v2826[4 * v275++ - 4] = v284 * v284;
              }
              while (v209 != v275);
              if (v210 > 7)
              {
                uint64_t v285 = v209 & 0x7FFFFFF8;
                double v286 = (float32x4_t *)v2820;
                double v287 = (float32x4_t *)v2827;
                uint64_t v288 = v285;
                do
                {
                  float32x4_t v186 = vaddq_f32(v286[-1], v287[-1]);
                  float32x4_t v289 = vaddq_f32(*v286, *v287);
                  v286[-1] = v186;
                  float32x4_t *v286 = v289;
                  v286 += 2;
                  v287 += 2;
                  v288 -= 8;
                }
                while (v288);
                if (v285 == v209)
                {
LABEL_240:
                  if (v210 > 7)
                  {
                    uint64_t v295 = v209 & 0x7FFFFFF8;
                    double v296 = (float32x4_t *)v2820;
                    uint64_t v297 = v295;
                    do
                    {
                      float32x4_t v186 = vsqrtq_f32(v296[-1]);
                      float32x4_t v298 = vsqrtq_f32(*v296);
                      v296[-1] = v186;
                      *double v296 = v298;
                      v296 += 2;
                      v297 -= 8;
                    }
                    while (v297);
                    if (v295 == v209)
                    {
LABEL_247:
                      v186.f32[0] = v2818;
                      if (v210 == 1) {
                        goto LABEL_262;
                      }
                      if (v210 >= 9)
                      {
                        unint64_t v308 = (v209 - 1) & 0xFFFFFFFFFFFFFFF8;
                        float32x4_t v309 = 0uLL;
                        float32x4_t v310 = (float32x4_t)LODWORD(v2818);
                        uint64_t v311 = (float32x4_t *)v2821;
                        unint64_t v312 = v308;
                        do
                        {
                          float32x4_t v310 = vaddq_f32(v311[-1], v310);
                          float32x4_t v309 = vaddq_f32(*v311, v309);
                          v311 += 2;
                          v312 -= 8;
                        }
                        while (v312);
                        float32x4_t v186 = vaddq_f32(v309, v310);
                        v186.i64[0] = vpaddq_f32(v186, v186).u64[0];
                        v186.f32[0] = vaddv_f32(*(float32x2_t *)v186.f32);
                        if (v209 - 1 == v308) {
                          goto LABEL_262;
                        }
                        uint64_t v301 = v308 | 2;
                      }
                      else
                      {
                        uint64_t v301 = 2;
                      }
                      uint64_t v313 = v210 - v301 + 1;
                      uint64_t v314 = (float *)&v2819[4 * v301 - 8];
                      do
                      {
                        float v315 = *v314++;
                        v186.f32[0] = v315 + v186.f32[0];
                        --v313;
                      }
                      while (v313);
                      goto LABEL_262;
                    }
                  }
                  else
                  {
                    uint64_t v295 = 0;
                  }
                  uint64_t v299 = v209 - v295;
                  double v300 = (float *)&v2819[4 * v295 - 4];
                  do
                  {
                    *double v300 = sqrtf(*v300);
                    ++v300;
                    --v299;
                  }
                  while (v299);
                  goto LABEL_247;
                }
              }
              else
              {
                uint64_t v285 = 0;
              }
              uint64_t v290 = v209 - v285;
              uint64_t v291 = 4 * v285;
              double v292 = (float *)&v2819[4 * v285 - 4];
              double v293 = (float32_t *)&v2826[v291 - 4];
              do
              {
                float v294 = *v293++;
                float *v292 = *v292 + v294;
                ++v292;
                --v290;
              }
              while (v290);
              goto LABEL_240;
            }
          }
          uint64_t v252 = v209 - v248;
          double v253 = &v2791[v248 + 96];
          do
          {
            int v254 = *v253++;
            v2847[3 * v254 - 1] = 1.0;
            --v252;
          }
          while (v252);
          goto LABEL_205;
        }
      }
      uint64_t v229 = v209 - v223;
      uint64_t v230 = 4 * v223;
      float v231 = (int *)&v2797[4 * v223 - 4];
      long long v232 = (float32_t *)&v2826[v230 - 4];
      do
      {
        float v233 = *v232++;
        float v234 = v233;
        int v235 = *v231++;
        v2847[3 * v235 - 2] = v234;
        --v229;
      }
      while (v229);
      goto LABEL_185;
    }
    do
    {
LABEL_177:
      *(float32_t *)&v2826[4 * v218 - 4] = v2847[3 * *(_DWORD *)&v2797[4 * v218 - 4] - 2]
                                         / v2847[3 * *(_DWORD *)&v2797[4 * v218 - 4] - 1];
      ++v218;
    }
    while (v209 != v218);
    goto LABEL_178;
  }
  if (v205)
  {
    uint64_t v207 = 0;
    int __dst = __src[0];
    int v208 = 1;
    uint64_t v209 = 1;
    unsigned int v210 = 1;
    goto LABEL_171;
  }
LABEL_167:
  float v211 = NAN;
  float v212 = NAN;
  v186.i64[0] = 0;
LABEL_262:
  v186.f32[0] = (float)(v185 * 1.4142) / v186.f32[0];
  LODWORD(v2812) = v186.i32[0];
  v10.f32[0] = -(float)(v186.f32[0] * v211);
  *(void *)&long long v2813 = v186.u32[0];
  v11.f32[0] = -(float)(v186.f32[0] * v212);
  *((void *)&v2813 + 1) = __PAIR64__(v11.u32[0], v10.u32[0]);
  HIDWORD(v2812) = 0;
  *(void *)((char *)&v2812 + 4) = 0;
  int v2814 = 1065353216;
  if ((int)v14 >= 1)
  {
    if (v14 < 4)
    {
      uint64_t v316 = 0;
      goto LABEL_268;
    }
    uint64_t v316 = v14 & 0xFFFFFFFC;
    float32x4_t v317 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 0);
    float32x4_t v318 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0);
    float32x4_t v319 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0);
    uint64_t v320 = (float *)v2840;
    double v321 = v2847;
    uint64_t v322 = v316;
    do
    {
      float32x4x3_t v2998 = vld3q_f32(v321);
      v321 += 12;
      float32x4_t v323 = vmulq_f32(v2998.val[1], (float32x4_t)0);
      v3002.val[0] = vmlaq_f32(vmlaq_f32(v323, v317, v2998.val[0]), v318, v2998.val[2]);
      float32x4_t v324 = vmulq_f32(v2998.val[0], (float32x4_t)0);
      float32x4_t v325 = vaddq_f32(v323, v324);
      v3002.val[1] = vmlaq_f32(vmlaq_f32(v324, v2998.val[1], v317), v2998.val[2], v319);
      v3002.val[2] = vaddq_f32(v325, v2998.val[2]);
      vst3q_f32(v320, v3002);
      v320 += 12;
      v322 -= 4;
    }
    while (v322);
    if (v316 != v14)
    {
LABEL_268:
      uint64_t v326 = v14 - v316;
      uint64_t v327 = 12 * v316 + 8;
      uint64_t v328 = (float *)((char *)v2847 + v327);
      float32x4_t v329 = (float *)&v2840[v327];
      do
      {
        float v330 = *(v328 - 2);
        float v331 = *(v328 - 1);
        float v332 = *v328;
        v328 += 3;
        float v333 = (float)((float)(v331 * 0.0) + (float)(v330 * v186.f32[0])) + (float)(v332 * v10.f32[0]);
        float v334 = v330 * 0.0;
        *(v329 - 2) = v333;
        *(v329 - 1) = (float)(v334 + (float)(v186.f32[0] * v331)) + (float)(v11.f32[0] * v332);
        *float32x4_t v329 = (float)((float)(v331 * 0.0) + v334) + v332;
        v329 += 3;
        --v326;
      }
      while (v326);
    }
  }
  if (v17) {
    unint64_t v335 = v17;
  }
  else {
    unint64_t v335 = v14;
  }
  if (v17) {
    BOOL v336 = 1;
  }
  else {
    BOOL v336 = v335 == 0;
  }
  v10.f32[0] = (float)(v186.f32[0] * 0.5) * (float)(v186.f32[0] * 0.5);
  float32x4_t v2661 = v10;
  if (v335) {
    BOOL v337 = v14 != 0;
  }
  else {
    BOOL v337 = 1;
  }
  if (v336) {
    unsigned int v338 = 3;
  }
  else {
    unsigned int v338 = 0;
  }
  if (v337) {
    int v339 = 3;
  }
  else {
    int v339 = 0;
  }
  unsigned int v340 = v338 + v339;
  uint64_t v2785 = v338 + v339;
  unint64_t v2779 = v335;
  if ((int)v335 >= 1)
  {
    int v341 = 0;
    uint64_t v342 = 0;
    if (v338 <= 1) {
      int v343 = 1;
    }
    else {
      int v343 = v338;
    }
    size_t v344 = (4 * v343);
    uint64_t v345 = 4 * (v335 + 2 * v335);
    do
    {
      if (v336)
      {
        memcpy(&v2849[v341], &v2841[v342 & 0x3FFFFFFFCLL], v344);
        unsigned int v340 = v338 + v339;
      }
      v342 += 12;
      v341 += v340;
    }
    while (v345 != v342);
    uint64_t v346 = 0;
    do
    {
      if (v337)
      {
        double v347 = &v2840[4 * v346];
        int v348 = v347[1];
        v2849[v338] = *v347;
        v2849[v338 + 1] = v348;
        v2849[v338 + 2] = v347[2];
      }
      v346 += 3;
      v338 += v340;
    }
    while (3 * v2779 != v346);
  }
  memcpy(state, &uv, 0x9C4uLL);
  uint64_t v2660 = 0;
  unsigned int v2674 = 0;
  unsigned int v353 = 0;
  v2679 = 0;
  v2802[0] = rtNaNF;
  *(double *)v354.i64 = (double)(int)v2779;
  uint64_t v355 = v2785;
  __unint64_t n = 4 * (v2785 - 1) + 4;
  uint64_t v2667 = 4 * v2785;
  v2683 = (char *)&v2948 + v2667;
  v2682 = &v2948 + 2 * v2785;
  uint64_t v356 = 2 * v2785;
  uint64_t v2700 = v356 + 3;
  uint64_t v2698 = v356 + 4;
  uint64_t v2696 = v356 + 2;
  uint64_t v2694 = v356 + 5;
  v2681 = &v2948 + 3 * v2785;
  uint64_t v357 = v2779 & 3;
  if ((v2779 & 3) == 0) {
    uint64_t v357 = 4;
  }
  unint64_t v2655 = v2779 - v357;
  uint64_t v358 = v2779 & 7;
  if ((v2779 & 7) == 0) {
    uint64_t v358 = 8;
  }
  unint64_t v2665 = v2779 - v358;
  float32x4_t v359 = (float32x4_t)vdupq_n_s32(0x7FFFFFFEu);
  int8x8_t v360 = (int8x8_t)vdup_n_s32(0x7FFFFFFEu);
  int32x4_t v361 = vdupq_lane_s32(*(int32x2_t *)v2661.f32, 0);
  float32x4_t v2678 = (float32x4_t)v361;
  float32x4_t v2707 = v354;
  double v2657 = 1.0 / *(double *)v354.i64;
  v362.i64[0] = 0x8000000080000000;
  v362.i64[1] = 0x8000000080000000;
  v363.i64[0] = 0x100000001;
  v363.i64[1] = 0x100000001;
  int8x16_t v364 = (int8x16_t)vdupq_n_s32(0x9908B0DF);
  v361.i64[0] = 1.0;
  double v2672 = 1.0;
  int8x16_t v2650 = (int8x16_t)v361;
  double v2649 = 1.0;
  uint64_t v2690 = v356 + v2785 + 3;
  uint64_t v2688 = v356 + v2785 + 1;
  uint64_t v2687 = v356 + v2785 + 4;
  uint64_t v2685 = v356 + v2785 + 2;
  uint64_t v2692 = v356 + v2785;
  uint64_t v2666 = v356 + v2785 + 5;
  uint64_t v2669 = v2779 & 0xFFFFFFE0;
  uint64_t v2670 = v2779 & 0xFFFFFFF8;
  int v2658 = 1;
  int v2659 = 1;
  int8x16_t v2709 = v364;
  float32x4_t v2711 = v359;
  while (2)
  {
    unsigned int v2675 = v353;
    int v365 = 1;
    while (1)
    {
      uint64_t v370 = 0;
      int v371 = dword_26A36F870;
      while (1)
      {
        unsigned int v376 = v371 + 1;
        int8x8_t v377 = (int8x8_t)vdup_n_s32(0x9908B0DF);
        if ((v371 + 1) <= 0x270)
        {
          unsigned int v392 = LODWORD(state[v371]);
        }
        else
        {
          uint64_t v378 = 0;
          int8x16_t v379 = (int8x16_t)vld1q_dup_f32(state);
          do
          {
            int v380 = (int *)&state[v378];
            int8x16_t v381 = *(int8x16_t *)&state[v378 + 1];
            int8x16_t v382 = vextq_s8(v379, v381, 0xCuLL);
            int8x16_t v379 = *(int8x16_t *)&state[v378 + 5];
            int8x16_t v383 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v381, (int8x16_t)v359), vandq_s8(v382, v362)), 1uLL);
            int8x16_t v384 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v379, (int8x16_t)v359), vandq_s8(vextq_s8(v381, v379, 0xCuLL), v362)), 1uLL);
            float32x4_t v352 = (float32x4_t)veorq_s8(v384, v364);
            float32x4_t v351 = *(float32x4_t *)&state[v378 + 401];
            int8x16_t v385 = veorq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v381, v363)), v383, veorq_s8(v383, v364)), *(int8x16_t *)&state[v378 + 397]);
            *(int8x16_t *)int v380 = v385;
            *((int8x16_t *)v380 + 1) = veorq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v379, v363)), v384, (int8x16_t)v352), (int8x16_t)v351);
            v378 += 8;
          }
          while (v378 != 224);
          uint64_t v386 = 0;
          v385.i64[0] = *(uint64_t *)((char *)&qword_26A36F230 + 4);
          unsigned int v387 = (dword_26A36F238 & 0x80000000 | dword_26A36F23C & 0x7FFFFFFF) >> 1;
          if (dword_26A36F23C) {
            v387 ^= 0x9908B0DF;
          }
          int8x8_t v388 = (int8x8_t)vshr_n_u32((uint32x2_t)vorr_s8(vand_s8(*(int8x8_t *)((char *)&qword_26A36F230 + 4), v360), vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v379, v385, 0xCuLL), (int8x8_t)0x8000000080000000)), 1uLL);
          qword_26A36F230 = (uint64_t)veor_s8(vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)((char *)&qword_26A36F230 + 4), (int8x8_t)0x100000001)), v388, veor_s8(v388, v377)), (int8x8_t)qword_26A36F864);
          dword_26A36F238 = v387 ^ dword_26A36F86C;
          int8x16_t v389 = (int8x16_t)vdupq_n_s32(dword_26A36F23C);
          do
          {
            int8x16_t v390 = *(int8x16_t *)&state[v386 + 228];
            int8x16_t v391 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v390, (int8x16_t)v359), vandq_s8(vextq_s8(v389, v390, 0xCuLL), v362)), 1uLL);
            float32x4_t v350 = (float32x4_t)veorq_s8(v391, v364);
            *(int8x16_t *)&state[v386 + 227] = veorq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v390, v363)), v391, (int8x16_t)v350), *(int8x16_t *)&state[v386]);
            v386 += 4;
            int8x16_t v389 = v390;
          }
          while (v386 != 396);
          unsigned int v392 = LODWORD(state[0]);
          unsigned int v393 = (dword_26A36F86C & 0x80000000 | LODWORD(state[0]) & 0x7FFFFFFF) >> 1;
          if (LOBYTE(state[0])) {
            v393 ^= 0x9908B0DF;
          }
          dword_26A36F86C = v393 ^ dword_26A36F4E0;
          unsigned int v376 = 1;
        }
        dword_26A36F870 = v376;
        if (v376 <= 0x26F)
        {
          int v371 = v376 + 1;
          unsigned int v372 = LODWORD(state[v376]);
        }
        else
        {
          uint64_t v394 = 0;
          int8x16_t v395 = (int8x16_t)vld1q_dup_f32(state);
          do
          {
            uint64_t v396 = (int *)&state[v394];
            int8x16_t v397 = *(int8x16_t *)&state[v394 + 1];
            int8x16_t v398 = vextq_s8(v395, v397, 0xCuLL);
            int8x16_t v395 = *(int8x16_t *)&state[v394 + 5];
            int8x16_t v399 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v397, (int8x16_t)v359), vandq_s8(v398, v362)), 1uLL);
            int8x16_t v400 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v395, (int8x16_t)v359), vandq_s8(vextq_s8(v397, v395, 0xCuLL), v362)), 1uLL);
            float32x4_t v352 = (float32x4_t)veorq_s8(v400, v364);
            int8x16_t v401 = vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v397, v363)), v399, veorq_s8(v399, v364));
            int8x16_t v402 = vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v395, v363)), v400, (int8x16_t)v352);
            float32x4_t v350 = *(float32x4_t *)&state[v394 + 397];
            float32x4_t v351 = *(float32x4_t *)&state[v394 + 401];
            int8x16_t v403 = veorq_s8(v401, (int8x16_t)v350);
            *(int8x16_t *)uint64_t v396 = v403;
            *((int8x16_t *)v396 + 1) = veorq_s8(v402, (int8x16_t)v351);
            v394 += 8;
          }
          while (v394 != 224);
          uint64_t v404 = 0;
          v403.i64[0] = *(uint64_t *)((char *)&qword_26A36F230 + 4);
          uint32x2_t v405 = (uint32x2_t)vorr_s8(vand_s8(*(int8x8_t *)((char *)&qword_26A36F230 + 4), v360), vand_s8((int8x8_t)*(_OWORD *)&vextq_s8(v395, v403, 0xCuLL), (int8x8_t)0x8000000080000000));
          unsigned int v406 = (dword_26A36F238 & 0x80000000 | dword_26A36F23C & 0x7FFFFFFF) >> 1;
          if (dword_26A36F23C) {
            v406 ^= 0x9908B0DF;
          }
          int8x8_t v407 = (int8x8_t)vshr_n_u32(v405, 1uLL);
          qword_26A36F230 = (uint64_t)veor_s8(vbsl_s8((int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)((char *)&qword_26A36F230 + 4), (int8x8_t)0x100000001)), v407, veor_s8(v407, v377)), (int8x8_t)qword_26A36F864);
          dword_26A36F238 = v406 ^ dword_26A36F86C;
          int8x16_t v408 = (int8x16_t)vdupq_n_s32(dword_26A36F23C);
          do
          {
            int8x16_t v409 = *(int8x16_t *)&state[v404 + 228];
            int8x16_t v410 = (int8x16_t)vshrq_n_u32((uint32x4_t)vorrq_s8(vandq_s8(v409, (int8x16_t)v359), vandq_s8(vextq_s8(v408, v409, 0xCuLL), v362)), 1uLL);
            *(int8x16_t *)&state[v404 + 227] = veorq_s8(vbslq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v409, v363)), v410, veorq_s8(v410, v364)), *(int8x16_t *)&state[v404]);
            v404 += 4;
            int8x16_t v408 = v409;
          }
          while (v404 != 396);
          unsigned int v372 = LODWORD(state[0]);
          unsigned int v411 = (dword_26A36F86C & 0x80000000 | LODWORD(state[0]) & 0x7FFFFFFF) >> 1;
          if (LOBYTE(state[0])) {
            v411 ^= 0x9908B0DF;
          }
          dword_26A36F86C = v411 ^ dword_26A36F4E0;
          int v371 = 1;
        }
        unsigned int v373 = ((v392 ^ (v392 >> 11)) << 7) & 0x9D2C5680 ^ v392 ^ (v392 >> 11);
        unsigned int v374 = ((v372 ^ (v372 >> 11)) << 7) & 0x9D2C5680 ^ v372 ^ (v372 >> 11);
        dword_26A36F870 = v371;
        double v375 = ((double)((((v374 << 15) & 0xEFC60000 ^ v374) >> 24) ^ (((v374 << 15) & 0xEFC60000 ^ v374) >> 6))
              + (double)((((v373 << 15) & 0xEFC60000 ^ v373) >> 23) ^ (((v373 << 15) & 0xEFC60000 ^ v373) >> 5))
              * 67108864.0)
             * 1.11022302e-16;
        if (v375 != 0.0)
        {
          v2974.f64[v370++] = v375;
          if (v370 == 4) {
            break;
          }
        }
      }
      float32x4_t v412 = v2707;
      __asm { FMOV            V1.2D, #1.0 }
      float64x2_t v416 = vaddq_f64(vrndmq_f64(vmulq_n_f64(v2974, *(double *)v2707.i64)), (float64x2_t)_Q1);
      float64x2_t v2974 = v416;
      float64x2_t v2768 = vaddq_f64(vrndmq_f64(vmulq_n_f64(v2975, *(double *)v2707.i64)), (float64x2_t)_Q1);
      float64x2_t v2975 = v2768;
      if (v355)
      {
        float64_t v2767 = v416.f64[1];
        memcpy(&v2948, &v2849[((int)v416.f64[0] - 1) * (int)v355], __n);
        v416.f64[1] = v2767;
        uint64_t v355 = v2785;
        *(float *)&double v7 = v2948;
      }
      float v2884 = *(float *)&v7;
      float v2739 = v2950;
      float v2879 = v2950;
      float v417 = *(float *)&v2949;
      uint64_t v2885 = v2949;
      float v2735 = *(float *)&v2951;
      *(void *)&long long v2880 = v2951;
      float v418 = *((float *)&v2949 + 1);
      float v2732 = *((float *)&v2951 + 1);
      if (v355)
      {
        memcpy(v2683, &v2849[((int)v416.f64[1] - 1) * (int)v355], __n);
        uint64_t v355 = v2785;
      }
      float v2759 = *(&v2948 + v355);
      float v2886 = v2759;
      float v2729 = *(&v2948 + v2785 + 3);
      *((float *)&v2880 + 2) = v2729;
      float v2752 = *(&v2948 + v2785 + 1);
      float v2887 = v2752;
      float v2727 = *(&v2948 + v2785 + 4);
      *((float *)&v2880 + 3) = v2727;
      float v2745 = *(&v2948 + v2785 + 2);
      float v2888 = v2745;
      float v2724 = *(&v2948 + v2785 + 5);
      *(float *)&uint64_t v2881 = v2724;
      if (v355)
      {
        memcpy(v2682, &v2849[((int)v2768.f64[0] - 1) * (int)v355], __n);
        uint64_t v355 = v2785;
      }
      float v419 = *(&v2948 + 2 * v2785);
      float v2889 = v419;
      float v2720 = *(&v2948 + v2700);
      float v420 = *(&v2948 + ((2 * (v2785 & 7)) | 1));
      float v2717 = *(&v2948 + v2698);
      float v2890 = v420;
      float v421 = *(&v2948 + v2696);
      float v2891 = v421;
      float v2714 = *(&v2948 + v2694);
      if (v355)
      {
        *(float *)v2768.f64 = v418;
        float v422 = v417;
        int v423 = LODWORD(v7);
        float v424 = v420;
        memcpy(v2681, &v2849[((int)v2768.f64[1] - 1) * (int)v355], __n);
        float v420 = v424;
        LODWORD(v7) = v423;
        float v417 = v422;
        float v418 = *(float *)v2768.f64;
        uint64_t v355 = v2785;
      }
      v412.f32[0] = *(&v2948 + v2692);
      float32_t v2892 = v412.f32[0];
      float v425 = *(&v2948 + v2690);
      float v426 = *(&v2948 + v2688);
      float v2893 = v426;
      _Q1.f32[0] = *(&v2948 + v2687);
      float v427 = *(&v2948 + v2685);
      float v2894 = v427;
      float v428 = v2759 - *(float *)&v7;
      float v429 = v419 - *(float *)&v7;
      float v430 = v2752 - v417;
      float v431 = v420 - v417;
      float v432 = v2745 - v418;
      float v433 = v421 - v418;
      float v434 = fabsf(-(float)((float)((float)(v2745 - v418) * (float)(v420 - v417))
                          - (float)((float)(v421 - v418) * (float)(v2752 - v417))));
      float v435 = fmaxf(v434, 1.2925e-26);
      if (v434 <= 1.2925e-26) {
        float v436 = (float)(v434 * 7.7371e25) * (float)(v434 * 7.7371e25);
      }
      else {
        float v436 = 1.0;
      }
      float v437 = fabsf(-(float)((float)((float)(v421 - v418) * (float)(v2759 - *(float *)&v7))
                          - (float)((float)(v2745 - v418) * (float)(v419 - *(float *)&v7))));
      float v438 = v436 + (float)((float)(v437 / v435) * (float)(v437 / v435));
      float v439 = (float)((float)((float)(v435 / v437) * (float)(v435 / v437)) * v436) + 1.0;
      if (v437 <= v435)
      {
        float v437 = v435;
        float v439 = v438;
      }
      float v440 = fabsf(-(float)((float)((float)(v2752 - v417) * (float)(v419 - *(float *)&v7))
                          - (float)((float)(v420 - v417) * (float)(v2759 - *(float *)&v7))));
      float v441 = v439 + (float)((float)(v440 / v437) * (float)(v440 / v437));
      float v442 = (float)((float)((float)(v437 / v440) * (float)(v437 / v440)) * v439) + 1.0;
      if (v440 <= v437) {
        float v442 = v441;
      }
      else {
        float v437 = v440;
      }
      if ((float)(sqrtf(v442) * v437) >= 2.2204e-16)
      {
        float v443 = v412.f32[0] - *(float *)&v7;
        float v444 = v426 - v417;
        float v445 = v427 - v418;
        float v446 = -(float)((float)(v432 * (float)(v426 - v417)) - (float)((float)(v427 - v418) * v430));
        float v447 = -(float)((float)((float)(v427 - v418) * v428) - (float)(v432 * (float)(v412.f32[0] - *(float *)&v7)));
        float v448 = -(float)((float)(v430 * (float)(v412.f32[0] - *(float *)&v7)) - (float)((float)(v426 - v417) * v428));
        float v449 = fabsf(v446);
        float v450 = fmaxf(v449, 1.2925e-26);
        if (v449 <= 1.2925e-26) {
          float v451 = (float)(v449 * 7.7371e25) * (float)(v449 * 7.7371e25);
        }
        else {
          float v451 = 1.0;
        }
        float v452 = fabsf(v447);
        float v453 = v451 + (float)((float)(v452 / v450) * (float)(v452 / v450));
        float v454 = (float)((float)((float)(v450 / v452) * (float)(v450 / v452)) * v451) + 1.0;
        if (v452 <= v450)
        {
          float v452 = v450;
          float v454 = v453;
        }
        float v455 = fabsf(v448);
        float v456 = v454 + (float)((float)(v455 / v452) * (float)(v455 / v452));
        float v457 = (float)((float)((float)(v452 / v455) * (float)(v452 / v455)) * v454) + 1.0;
        if (v455 <= v452)
        {
          float v455 = v452;
          float v457 = v456;
        }
        if ((float)(sqrtf(v457) * v455) >= 2.2204e-16)
        {
          float v458 = -(float)((float)(v433 * v444) - (float)(v445 * v431));
          float v459 = -(float)((float)(v445 * v429) - (float)(v433 * v443));
          float v460 = -(float)((float)(v431 * v443) - (float)(v444 * v429));
          float v461 = fabsf(v458);
          float v462 = fmaxf(v461, 1.2925e-26);
          if (v461 <= 1.2925e-26) {
            float v463 = (float)(v461 * 7.7371e25) * (float)(v461 * 7.7371e25);
          }
          else {
            float v463 = 1.0;
          }
          float v464 = fabsf(v459);
          float v465 = v463 + (float)((float)(v464 / v462) * (float)(v464 / v462));
          float v466 = (float)((float)((float)(v462 / v464) * (float)(v462 / v464)) * v463) + 1.0;
          if (v464 <= v462)
          {
            float v464 = v462;
            float v466 = v465;
          }
          float v467 = fabsf(v460);
          float v468 = v466 + (float)((float)(v467 / v464) * (float)(v467 / v464));
          float v469 = (float)((float)((float)(v464 / v467) * (float)(v464 / v467)) * v466) + 1.0;
          if (v467 <= v464)
          {
            float v467 = v464;
            float v469 = v468;
          }
          if ((float)(sqrtf(v469) * v467) >= 2.2204e-16)
          {
            float v470 = v412.f32[0] - v2759;
            float v471 = v426 - v2752;
            float v472 = v427 - v2745;
            float v473 = -(float)((float)((float)(v421 - v2745) * v471) - (float)(v472 * (float)(v420 - v2752)));
            float v474 = -(float)((float)(v472 * (float)(v419 - v2759)) - (float)((float)(v421 - v2745) * v470));
            float v475 = fabsf(v473);
            float v476 = fmaxf(v475, 1.2925e-26);
            float v477 = v475 <= 1.2925e-26 ? (float)(v475 * 7.7371e25) * (float)(v475 * 7.7371e25) : 1.0;
            float v478 = fabsf(v474);
            if (v478 <= v476)
            {
              float v479 = v477 + (float)((float)(v478 / v476) * (float)(v478 / v476));
              float v478 = v476;
            }
            else
            {
              float v479 = (float)((float)((float)(v476 / v478) * (float)(v476 / v478)) * v477) + 1.0;
            }
            float v480 = fabsf(-(float)((float)((float)(v420 - v2752) * v470) - (float)(v471 * (float)(v419 - v2759))));
            if (v480 <= v478)
            {
              float v481 = v479 + (float)((float)(v480 / v478) * (float)(v480 / v478));
              float v480 = v478;
            }
            else
            {
              float v481 = (float)((float)((float)(v478 / v480) * (float)(v478 / v480)) * v479) + 1.0;
            }
            v412.f32[0] = sqrtf(v481) * v480;
            if (v412.f32[0] >= 2.2204e-16)
            {
              float v482 = v2729 - v2739;
              v412.f32[0] = v2720 - v2739;
              float v483 = v2727 - v2735;
              float v484 = v2717 - v2735;
              float v485 = v2724 - v2732;
              float v486 = v2714 - v2732;
              float v487 = fabsf(-(float)((float)((float)(v2724 - v2732) * (float)(v2717 - v2735))
                                  - (float)((float)(v2714 - v2732) * (float)(v2727 - v2735))));
              float v488 = (float)(v487 * 7.7371e25) * (float)(v487 * 7.7371e25);
              float v489 = fmaxf(v487, 1.2925e-26);
              if (v487 > 1.2925e-26) {
                float v488 = 1.0;
              }
              float v490 = fabsf(-(float)((float)((float)(v2714 - v2732) * (float)(v2729 - v2739))
                                  - (float)((float)(v2724 - v2732) * (float)(v2720 - v2739))));
              if (v490 <= v489)
              {
                float v491 = v488 + (float)((float)(v490 / v489) * (float)(v490 / v489));
                float v490 = v489;
              }
              else
              {
                float v491 = (float)((float)((float)(v489 / v490) * (float)(v489 / v490)) * v488) + 1.0;
              }
              float v492 = fabsf(-(float)((float)(v483 * v412.f32[0]) - (float)(v484 * v482)));
              if (v492 <= v490)
              {
                float v493 = v491 + (float)((float)(v492 / v490) * (float)(v492 / v490));
                float v492 = v490;
              }
              else
              {
                float v493 = (float)((float)((float)(v490 / v492) * (float)(v490 / v492)) * v491) + 1.0;
              }
              if ((float)(sqrtf(v493) * v492) >= 2.2204e-16)
              {
                float v494 = *(&v2948 + v2666);
                float v495 = v425 - v2739;
                float v496 = _Q1.f32[0] - v2735;
                float v497 = v494 - v2732;
                float v498 = -(float)((float)(v485 * (float)(_Q1.f32[0] - v2735)) - (float)((float)(v494 - v2732) * v483));
                float v499 = -(float)((float)((float)(v494 - v2732) * v482) - (float)(v485 * (float)(v425 - v2739)));
                float v500 = fabsf(v498);
                float v501 = fmaxf(v500, 1.2925e-26);
                float v502 = v500 <= 1.2925e-26 ? (float)(v500 * 7.7371e25) * (float)(v500 * 7.7371e25) : 1.0;
                float v503 = fabsf(v499);
                if (v503 <= v501)
                {
                  float v504 = v502 + (float)((float)(v503 / v501) * (float)(v503 / v501));
                  float v503 = v501;
                }
                else
                {
                  float v504 = (float)((float)((float)(v501 / v503) * (float)(v501 / v503)) * v502) + 1.0;
                }
                float v505 = fabsf(-(float)((float)(v483 * v495) - (float)(v496 * v482)));
                if (v505 <= v503)
                {
                  float v506 = v504 + (float)((float)(v505 / v503) * (float)(v505 / v503));
                  float v505 = v503;
                }
                else
                {
                  float v506 = (float)((float)((float)(v503 / v505) * (float)(v503 / v505)) * v504) + 1.0;
                }
                if ((float)(sqrtf(v506) * v505) >= 2.2204e-16)
                {
                  float v507 = -(float)((float)(v486 * v496) - (float)(v497 * v484));
                  float v508 = -(float)((float)(v497 * v412.f32[0]) - (float)(v486 * v495));
                  float v509 = fabsf(v507);
                  float v510 = fmaxf(v509, 1.2925e-26);
                  float v511 = v509 <= 1.2925e-26 ? (float)(v509 * 7.7371e25) * (float)(v509 * 7.7371e25) : 1.0;
                  float v512 = fabsf(v508);
                  if (v512 <= v510)
                  {
                    float v513 = v511 + (float)((float)(v512 / v510) * (float)(v512 / v510));
                    float v512 = v510;
                  }
                  else
                  {
                    float v513 = (float)((float)((float)(v510 / v512) * (float)(v510 / v512)) * v511) + 1.0;
                  }
                  float v514 = fabsf(-(float)((float)(v484 * v495) - (float)(v496 * v412.f32[0])));
                  if (v514 <= v512)
                  {
                    float v515 = v513 + (float)((float)(v514 / v512) * (float)(v514 / v512));
                    float v514 = v512;
                  }
                  else
                  {
                    float v515 = (float)((float)((float)(v512 / v514) * (float)(v512 / v514)) * v513) + 1.0;
                  }
                  v412.f32[0] = sqrtf(v515) * v514;
                  if (v412.f32[0] >= 2.2204e-16)
                  {
                    v412.f32[0] = v2720 - v2729;
                    float v516 = v425 - v2729;
                    float v517 = _Q1.f32[0] - v2727;
                    float v518 = v494 - v2724;
                    float v519 = -(float)((float)((float)(v2714 - v2724) * v517) - (float)(v518 * (float)(v2717 - v2727)));
                    float v520 = -(float)((float)(v518 * (float)(v2720 - v2729)) - (float)((float)(v2714 - v2724) * v516));
                    float v521 = fabsf(v519);
                    float v522 = fmaxf(v521, 1.2925e-26);
                    float v523 = v521 <= 1.2925e-26 ? (float)(v521 * 7.7371e25) * (float)(v521 * 7.7371e25) : 1.0;
                    float v524 = fabsf(v520);
                    if (v524 <= v522)
                    {
                      float v525 = v523 + (float)((float)(v524 / v522) * (float)(v524 / v522));
                      float v524 = v522;
                    }
                    else
                    {
                      float v525 = (float)((float)((float)(v522 / v524) * (float)(v522 / v524)) * v523) + 1.0;
                    }
                    float v367 = fabsf(-(float)((float)((float)(v2717 - v2727) * v516) - (float)(v517 * v412.f32[0])));
                    if (v367 <= v524)
                    {
                      float v366 = v525 + (float)((float)(v367 / v524) * (float)(v367 / v524));
                      float v367 = v524;
                    }
                    else
                    {
                      float v366 = (float)((float)((float)(v524 / v367) * (float)(v524 / v367)) * v525) + 1.0;
                    }
                    float v368 = sqrtf(v366) * v367;
                    _Q1.i32[0] = 629145600;
                    if (v368 >= 2.2204e-16) {
                      break;
                    }
                  }
                }
              }
            }
          }
        }
      }
      ++v365;
      int8x16_t v364 = v2709;
      float32x4_t v359 = v2711;
      v362.i64[0] = 0x8000000080000000;
      v362.i64[1] = 0x8000000080000000;
      v363.i64[0] = 0x100000001;
      v363.i64[1] = 0x100000001;
      if (v365 == 101)
      {
        unint64_t v526 = v2779;
        uint64_t v527 = (uint64_t)v2679;
        goto LABEL_412;
      }
    }
    if (v355)
    {
      int v1071 = v355;
      memcpy(&v2948, &v2849[((int)v2974.f64[0] - 1) * (int)v355], __n);
      memcpy(v2683, &v2849[((int)v2974.f64[1] - 1) * v1071], __n);
      memcpy(v2682, &v2849[((int)v2975.f64[0] - 1) * (int)v2785], __n);
      memcpy(v2681, &v2849[((int)v2975.f64[1] - 1) * (int)v2785], __n);
      unint64_t v526 = v2779;
      float v1073 = v2645;
      float v1072 = v2646;
      long long v1075 = v2643;
      long long v1074 = v2644;
      int8x16_t v1076 = v2650;
      if (v2785 == 6)
      {
        float v1072 = v2948;
        float v1073 = v2957;
        int v2641 = v2959;
        float v2642 = v2950;
        *(void *)&long long v1074 = v2949;
        *((void *)&v1074 + 1) = *(void *)v2952;
        *(void *)&long long v1075 = v2953;
        *((void *)&v1075 + 1) = v2956;
        *(void *)&long long v1077 = v2951;
        *((void *)&v1077 + 1) = *(void *)&v2952[12];
        long long v2640 = v1077;
        *(void *)&long long v1077 = v2955;
        *((void *)&v1077 + 1) = v2958;
        long long v2639 = v1077;
        unint64_t v1078 = vextq_s8(*(int8x16_t *)&v2952[12], *(int8x16_t *)&v2952[12], 8uLL).u64[0];
        int8x16_t v1076 = vextq_s8(*(int8x16_t *)v2952, *(int8x16_t *)v2952, 8uLL);
        v1076.i32[1] = HIDWORD(v1078);
        HIDWORD(v1078) = v2954;
        double v2649 = *(double *)&v1078;
      }
    }
    else
    {
      unint64_t v526 = v2779;
      float v1073 = v2645;
      float v1072 = v2646;
      long long v1075 = v2643;
      long long v1074 = v2644;
      int8x16_t v1076 = v2650;
    }
    float v2645 = v1073;
    float v2646 = v1072;
    float v2879 = v1072;
    long long v2643 = v1075;
    long long v2644 = v1074;
    long long v2880 = v1074;
    int8x16_t v2650 = v1076;
    uint64_t v2881 = v1076.i64[0];
    long long v2882 = v1075;
    float v2883 = v1073;
    ransac::normalise2dpts((ransac *)&v2879, &v2884, &v2803, v349);
    float v2873 = v2642;
    long long v2874 = v2640;
    double v2875 = v2649;
    long long v2876 = v2639;
    int v2877 = v2641;
    ransac::normalise2dpts((ransac *)&v2873, &v2879, (float *)&v2870, v1079);
    uint64_t v1080 = 0;
    char v1081 = 0;
    *(double *)&v2972[18] = (float)-(float)(*((float *)&v2880 + 1) * v2884);
    *(double *)&v2972[36] = (float)(v2884 * *(float *)&v2880);
    *((double *)v2972 + 1) = (float)(v2884 * *((float *)&v2880 + 1));
    *((double *)&v2972[36] + 1) = (float)-(float)(v2879 * v2884);
    *(double *)&v2972[1] = (float)-(float)(*(float *)&v2880 * v2884);
    *(double *)&v2972[19] = (float)(v2884 * v2879);
    *(double *)&v2972[24] = (float)-(float)(*((float *)&v2880 + 1) * *(float *)&v2885);
    *(double *)&v2972[42] = (float)(*(float *)&v2885 * *(float *)&v2880);
    *((double *)&v2972[6] + 1) = (float)(*(float *)&v2885 * *((float *)&v2880 + 1));
    *((double *)&v2972[42] + 1) = (float)-(float)(v2879 * *(float *)&v2885);
    *(double *)&v2972[7] = (float)-(float)(*(float *)&v2880 * *(float *)&v2885);
    *(double *)&v2972[25] = (float)(*(float *)&v2885 * v2879);
    *(double *)&v2972[30] = (float)-(float)(*((float *)&v2880 + 1) * *((float *)&v2885 + 1));
    *(double *)&v2972[48] = (float)(*((float *)&v2885 + 1) * *(float *)&v2880);
    *((double *)&v2972[12] + 1) = (float)(*((float *)&v2885 + 1) * *((float *)&v2880 + 1));
    *((double *)&v2972[48] + 1) = (float)-(float)(v2879 * *((float *)&v2885 + 1));
    *(double *)&v2972[13] = (float)-(float)(*(float *)&v2880 * *((float *)&v2885 + 1));
    *(double *)&v2972[31] = (float)(*((float *)&v2885 + 1) * v2879);
    *((double *)&v2972[19] + 1) = (float)-(float)(*(float *)&v2881 * v2886);
    *((double *)&v2972[37] + 1) = (float)(v2886 * *((float *)&v2880 + 3));
    *(double *)&v2972[2] = (float)(v2886 * *(float *)&v2881);
    *(double *)&v2972[38] = (float)-(float)(*((float *)&v2880 + 2) * v2886);
    *((double *)&v2972[2] + 1) = (float)-(float)(*((float *)&v2880 + 3) * v2886);
    *((double *)&v2972[20] + 1) = (float)(v2886 * *((float *)&v2880 + 2));
    *((double *)&v2972[25] + 1) = (float)-(float)(*(float *)&v2881 * v2887);
    *((double *)&v2972[43] + 1) = (float)(v2887 * *((float *)&v2880 + 3));
    *(double *)&v2972[8] = (float)(v2887 * *(float *)&v2881);
    *(double *)&v2972[44] = (float)-(float)(*((float *)&v2880 + 2) * v2887);
    *((double *)&v2972[8] + 1) = (float)-(float)(*((float *)&v2880 + 3) * v2887);
    *((double *)&v2972[26] + 1) = (float)(v2887 * *((float *)&v2880 + 2));
    *((double *)&v2972[31] + 1) = (float)-(float)(*(float *)&v2881 * v2888);
    *((double *)&v2972[49] + 1) = (float)(v2888 * *((float *)&v2880 + 3));
    *(double *)&v2972[14] = (float)(v2888 * *(float *)&v2881);
    *(double *)&v2972[50] = (float)-(float)(*((float *)&v2880 + 2) * v2888);
    *((double *)&v2972[14] + 1) = (float)-(float)(*((float *)&v2880 + 3) * v2888);
    *((double *)&v2972[32] + 1) = (float)(v2888 * *((float *)&v2880 + 2));
    *(double *)&v2972[21] = (float)-(float)(*((float *)&v2882 + 1) * v2889);
    *(double *)&v2972[39] = (float)(v2889 * *(float *)&v2882);
    *((double *)&v2972[3] + 1) = (float)(v2889 * *((float *)&v2882 + 1));
    *((double *)&v2972[39] + 1) = (float)-(float)(*((float *)&v2881 + 1) * v2889);
    *(double *)&v2972[4] = (float)-(float)(*(float *)&v2882 * v2889);
    *(double *)&v2972[22] = (float)(v2889 * *((float *)&v2881 + 1));
    *(double *)&v2972[27] = (float)-(float)(*((float *)&v2882 + 1) * v2890);
    *(double *)&v2972[45] = (float)(v2890 * *(float *)&v2882);
    *((double *)&v2972[9] + 1) = (float)(v2890 * *((float *)&v2882 + 1));
    *((double *)&v2972[45] + 1) = (float)-(float)(*((float *)&v2881 + 1) * v2890);
    *(double *)&v2972[10] = (float)-(float)(*(float *)&v2882 * v2890);
    *(double *)&v2972[28] = (float)(v2890 * *((float *)&v2881 + 1));
    *(double *)&v2972[33] = (float)-(float)(*((float *)&v2882 + 1) * v2891);
    *(double *)&v2972[51] = (float)(v2891 * *(float *)&v2882);
    *(void *)&v2972[0] = 0;
    *((void *)&v2972[18] + 1) = 0;
    *(void *)&v2972[37] = 0;
    *(void *)&v2972[6] = 0;
    *((void *)&v2972[24] + 1) = 0;
    *(void *)&v2972[43] = 0;
    *(void *)&v2972[12] = 0;
    *((void *)&v2972[30] + 1) = 0;
    *(void *)&v2972[49] = 0;
    *((void *)&v2972[1] + 1) = 0;
    *(void *)&v2972[20] = 0;
    *((void *)&v2972[38] + 1) = 0;
    *((void *)&v2972[7] + 1) = 0;
    *(void *)&v2972[26] = 0;
    *((void *)&v2972[44] + 1) = 0;
    *((void *)&v2972[13] + 1) = 0;
    *(void *)&v2972[32] = 0;
    *((void *)&v2972[50] + 1) = 0;
    *(void *)&v2972[3] = 0;
    *((void *)&v2972[21] + 1) = 0;
    *(void *)&v2972[40] = 0;
    *(void *)&v2972[9] = 0;
    *((void *)&v2972[27] + 1) = 0;
    *(void *)&v2972[46] = 0;
    *(void *)&v2972[15] = 0;
    *((double *)&v2972[15] + 1) = (float)(v2891 * *((float *)&v2882 + 1));
    *((void *)&v2972[33] + 1) = 0;
    *((double *)&v2972[51] + 1) = (float)-(float)(*((float *)&v2881 + 1) * v2891);
    *(double *)&v2972[16] = (float)-(float)(*(float *)&v2882 * v2891);
    *(double *)&v2972[34] = (float)(v2891 * *((float *)&v2881 + 1));
    *(void *)&v2972[52] = 0;
    *((void *)&v2972[4] + 1) = 0;
    *((double *)&v2972[22] + 1) = (float)-(float)(v2883 * v2892);
    *((double *)&v2972[40] + 1) = (float)(v2892 * *((float *)&v2882 + 3));
    *(double *)&v2972[5] = (float)(v2892 * v2883);
    *(void *)&v2972[23] = 0;
    *(double *)&v2972[41] = (float)-(float)(*((float *)&v2882 + 2) * v2892);
    *((double *)&v2972[5] + 1) = (float)-(float)(*((float *)&v2882 + 3) * v2892);
    *((double *)&v2972[23] + 1) = (float)(v2892 * *((float *)&v2882 + 2));
    *((void *)&v2972[41] + 1) = 0;
    *((void *)&v2972[10] + 1) = 0;
    *((double *)&v2972[28] + 1) = (float)-(float)(v2883 * v2893);
    *((double *)&v2972[46] + 1) = (float)(v2893 * *((float *)&v2882 + 3));
    *(double *)&v2972[11] = (float)(v2893 * v2883);
    *(void *)&v2972[29] = 0;
    *(double *)&v2972[47] = (float)-(float)(*((float *)&v2882 + 2) * v2893);
    *((double *)&v2972[11] + 1) = (float)-(float)(*((float *)&v2882 + 3) * v2893);
    *((double *)&v2972[29] + 1) = (float)(v2893 * *((float *)&v2882 + 2));
    *((void *)&v2972[47] + 1) = 0;
    *((void *)&v2972[16] + 1) = 0;
    *((double *)&v2972[34] + 1) = (float)-(float)(v2883 * v2894);
    *((double *)&v2972[52] + 1) = (float)(v2894 * *((float *)&v2882 + 3));
    *(double *)&v2972[17] = (float)(v2894 * v2883);
    *(void *)&v2972[35] = 0;
    *(double *)&v2972[53] = (float)-(float)(*((float *)&v2882 + 2) * v2894);
    *((double *)&v2972[17] + 1) = (float)-(float)(*((float *)&v2882 + 3) * v2894);
    *((double *)&v2972[35] + 1) = (float)(v2894 * *((float *)&v2882 + 2));
    *((void *)&v2972[53] + 1) = 0;
    float v1082 = 1.0;
    do
    {
      while ((v1081 & 1) != 0 || fabs(*((double *)v2972 + v1080)) == INFINITY)
      {
        ++v1080;
        char v1081 = 1;
        if (v1080 == 108)
        {
          uint64_t v1205 = rtNaN;
          v2966[0] = rtNaN;
          v2966[1] = rtNaN;
          v2967[0] = rtNaN;
          v2967[1] = rtNaN;
          v2967[2] = rtNaN;
          v2967[3] = rtNaN;
          v2968[0] = rtNaN;
          v2968[1] = rtNaN;
          v2968[2] = rtNaN;
          v2968[3] = rtNaN;
          v2968[4] = rtNaN;
          v2968[5] = rtNaN;
          v2968[6] = rtNaN;
          v2968[7] = rtNaN;
          v2968[8] = rtNaN;
          v2968[9] = rtNaN;
          v2968[10] = rtNaN;
          v2968[11] = rtNaN;
          v2968[12] = rtNaN;
          v2968[13] = rtNaN;
          v2968[14] = rtNaN;
          v2968[15] = rtNaN;
          v2968[16] = rtNaN;
          v2968[17] = rtNaN;
          v2969[0] = rtNaN;
          v2969[1] = rtNaN;
          v2969[2] = rtNaN;
          v2969[3] = rtNaN;
          v2969[4] = rtNaN;
          v2969[5] = rtNaN;
          v2969[6] = rtNaN;
          v2969[7] = rtNaN;
          v2969[8] = rtNaN;
          v2969[9] = rtNaN;
          v2969[10] = rtNaN;
          v2969[11] = rtNaN;
          v2969[12] = rtNaN;
          v2969[13] = rtNaN;
          v2969[14] = rtNaN;
          v2969[15] = rtNaN;
          v2969[16] = rtNaN;
          v2969[17] = rtNaN;
          v2969[18] = rtNaN;
          v2969[19] = rtNaN;
          v2969[20] = rtNaN;
          v2969[21] = rtNaN;
          v2969[22] = rtNaN;
          v2969[23] = rtNaN;
          v2969[24] = rtNaN;
          v2969[25] = rtNaN;
          v2969[26] = rtNaN;
          v2969[27] = rtNaN;
          v2969[28] = rtNaN;
          v2969[29] = rtNaN;
          v2969[30] = rtNaN;
          v2969[31] = rtNaN;
          v2969[32] = rtNaN;
          v2969[33] = rtNaN;
          v2969[34] = rtNaN;
          v2969[35] = rtNaN;
          v2969[36] = rtNaN;
          v2969[37] = rtNaN;
          v2969[38] = rtNaN;
          v2969[39] = rtNaN;
          v2969[40] = rtNaN;
          v2969[41] = rtNaN;
          v2969[42] = rtNaN;
          v2969[43] = rtNaN;
          v2969[44] = rtNaN;
          v2969[45] = rtNaN;
          v2969[46] = rtNaN;
          v2969[47] = rtNaN;
          v2969[48] = rtNaN;
          v2969[49] = rtNaN;
          v2969[50] = rtNaN;
          v2969[51] = rtNaN;
          v2969[52] = rtNaN;
          v2969[53] = rtNaN;
          v2969[54] = rtNaN;
          v2969[55] = rtNaN;
          v2969[56] = rtNaN;
          v2969[57] = rtNaN;
          v2969[58] = rtNaN;
          v2969[59] = rtNaN;
          v2969[60] = rtNaN;
          v2969[61] = rtNaN;
          v2969[62] = rtNaN;
          v2969[63] = rtNaN;
          v2969[64] = rtNaN;
          v2969[65] = rtNaN;
          v2969[66] = rtNaN;
          v2969[67] = rtNaN;
          v2969[68] = rtNaN;
          v2969[69] = rtNaN;
          v2969[70] = rtNaN;
          v2969[71] = rtNaN;
          v2969[72] = rtNaN;
          v2969[73] = rtNaN;
          v2969[74] = rtNaN;
          v2969[75] = rtNaN;
          v2969[76] = rtNaN;
          v2969[77] = rtNaN;
          v2969[78] = rtNaN;
          v2969[79] = rtNaN;
          v2970[0] = rtNaN;
          v2970[1] = rtNaN;
          v2970[2] = rtNaN;
          v2970[3] = rtNaN;
          *(void *)&long long v2897 = rtNaN;
          *((void *)&v2897 + 1) = rtNaN;
          *(void *)&long long v2898 = rtNaN;
          *((void *)&v2898 + 1) = rtNaN;
          *(void *)&long long v2899 = rtNaN;
          *((void *)&v2899 + 1) = rtNaN;
          *(void *)&long long v2900 = rtNaN;
          *((void *)&v2900 + 1) = rtNaN;
          uint64_t v2901 = rtNaN;
          uint64_t v2850 = rtNaN;
          v2851[0] = rtNaN;
          v2851[1] = rtNaN;
          v2851[2] = rtNaN;
          v2851[3] = rtNaN;
          v2851[4] = rtNaN;
          v2851[5] = rtNaN;
          v2851[6] = rtNaN;
          v2851[7] = rtNaN;
          v2852[0] = rtNaN;
          v2852[1] = rtNaN;
          v2852[2] = rtNaN;
          v2852[3] = rtNaN;
          v2852[4] = rtNaN;
          v2852[5] = rtNaN;
          v2852[6] = rtNaN;
          v2852[7] = rtNaN;
          v2853[0] = rtNaN;
          v2853[1] = rtNaN;
          v2853[2] = rtNaN;
          v2853[3] = rtNaN;
          v2853[4] = rtNaN;
          v2853[5] = rtNaN;
          v2853[6] = rtNaN;
          v2853[7] = rtNaN;
          v2853[8] = rtNaN;
          v2853[9] = rtNaN;
          v2853[10] = rtNaN;
          v2853[11] = rtNaN;
          v2853[12] = rtNaN;
          v2853[13] = rtNaN;
          v2853[14] = rtNaN;
          v2853[15] = rtNaN;
          v2853[16] = rtNaN;
          v2853[17] = rtNaN;
          v2853[18] = rtNaN;
          v2853[19] = rtNaN;
          v2853[20] = rtNaN;
          v2853[21] = rtNaN;
          v2853[22] = rtNaN;
          v2853[23] = rtNaN;
          v2853[24] = rtNaN;
          v2853[25] = rtNaN;
          v2853[26] = rtNaN;
          v2853[27] = rtNaN;
          v2853[28] = rtNaN;
          v2853[29] = rtNaN;
          v2853[30] = rtNaN;
          v2853[31] = rtNaN;
          v2853[32] = rtNaN;
          v2853[33] = rtNaN;
          v2853[34] = rtNaN;
          v2853[35] = rtNaN;
          v2853[36] = rtNaN;
          v2853[37] = rtNaN;
          v2853[38] = rtNaN;
          v2853[39] = rtNaN;
          v2853[40] = rtNaN;
          v2853[41] = rtNaN;
          v2853[42] = rtNaN;
          v2853[43] = rtNaN;
          v2853[44] = rtNaN;
          v2853[45] = rtNaN;
          v2853[46] = rtNaN;
          v2853[47] = rtNaN;
          v2853[48] = rtNaN;
          v2853[49] = rtNaN;
          v2853[50] = rtNaN;
          v2853[51] = rtNaN;
          v2853[52] = rtNaN;
          v2853[53] = rtNaN;
          v2853[54] = rtNaN;
          uint64_t v2854 = rtNaN;
          uint64_t v2855 = rtNaN;
          uint64_t v2856 = rtNaN;
          uint64_t v2857 = rtNaN;
          uint64_t v2858 = rtNaN;
          uint64_t v1206 = rtNaN;
          uint64_t v2859 = rtNaN;
          uint64_t v1207 = rtNaN;
          uint64_t v1208 = rtNaN;
          uint64_t v2860 = rtNaN;
          v350.i64[0] = rtNaN;
          v352.i64[0] = rtNaN;
          uint64_t v2861 = rtNaN;
          v412.i64[0] = rtNaN;
          uint64_t v1209 = rtNaN;
          v359.i64[0] = rtNaN;
          uint64_t v2862 = rtNaN;
          goto LABEL_1198;
        }
      }
      char v1081 = 0;
      ++v1080;
    }
    while (v1080 != 108);
    memcpy(v2981, v2972, 0x360uLL);
    long long v2897 = 0u;
    long long v2898 = 0u;
    long long v2899 = 0u;
    long long v2900 = 0u;
    uint64_t v2901 = 0;
    long long v2903 = 0u;
    memset(v2904, 0, sizeof(v2904));
    long long v2905 = 0u;
    double v2906 = 0.0;
    long long v2960 = 0u;
    float32x4_t v2961 = 0u;
    long long v2962 = 0u;
    long long v2963 = 0u;
    long long v2964 = 0u;
    long long v2965 = 0u;
    bzero(v2966, 0x360uLL);
    bzero(&v2850, 0x288uLL);
    uint64_t v1083 = 0;
    unint64_t v1084 = 0;
    int v1085 = 0;
    uint64_t v1086 = (double *)&v2981[6];
    v2750 = (float64x2_t *)&v2904[8];
    uint64_t v1087 = 8;
    float32x4_t v1088 = (float64x2_t *)&v2981[1];
    uint64_t v1089 = 12;
    uint64_t v1090 = 13;
    uint64_t v1091 = 2;
    uint64_t v1092 = 1;
    v359.i64[0] = 1.0;
    while (2)
    {
      uint64_t v2743 = v1087;
      unint64_t v2725 = v1087 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v2730 = v1089;
      unint64_t v1102 = v1089 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v2772 = v1083;
      unint64_t v1103 = 8 - v1083;
      uint64_t v1104 = 8 * v1084;
      uint64_t v1105 = 13 * v1084;
      unint64_t v1106 = 13 * v1084;
      double v1107 = 0.0;
      double v1108 = 3.31216864e-170;
      uint64_t v1109 = 13 * v1084;
      do
      {
        double v1110 = fabs(*((double *)v2981 + v1109));
        double v1111 = v1107 + v1110 / v1108 * (v1110 / v1108);
        double v1107 = *(double *)v359.i64 + v1108 / v1110 * (v1108 / v1110) * v1107;
        if (v1110 > v1108) {
          double v1108 = v1110;
        }
        else {
          double v1107 = v1111;
        }
        unint64_t v1112 = v1109 + 2;
        ++v1109;
      }
      while (v1112 < 12 * v1084 + 13);
      double v1113 = v1108 * sqrt(v1107);
      v2733 = v1088;
      uint64_t v2728 = v1090;
      if (v1113 <= 0.0)
      {
        *((void *)&v2897 + v1084) = 0;
        goto LABEL_944;
      }
      unint64_t v1114 = 12 - v1083;
      if (*((double *)v2981 + 13 * v1084) >= 0.0) {
        double v1115 = v1113;
      }
      else {
        double v1115 = -v1113;
      }
      unint64_t v1116 = (v1106 + v1085 + 12);
      if (fabs(v1113) >= 1.00208418e-292)
      {
        if (v1106 < v1116)
        {
          uint64_t v1122 = v1092;
          if (v1114 >= 4)
          {
            unint64_t v1123 = v1114 & 0xFFFFFFFFFFFFFFFCLL;
            float32x2_t v1124 = v1088;
            double v1125 = *(double *)v359.i64 / v1115;
            do
            {
              float64x2_t v1126 = vmulq_n_f64(*v1124, v1125);
              v1124[-1] = vmulq_n_f64(v1124[-1], v1125);
              *float32x2_t v1124 = v1126;
              v1124 += 2;
              v1102 -= 4;
            }
            while (v1102);
            if (v1114 == v1123) {
              goto LABEL_943;
            }
            uint64_t v1122 = v1092 + v1123;
          }
          do
          {
            *(double *)&v2980[8 * v1122 + 16104] = *(double *)&v2980[8 * v1122 + 16104] * (*(double *)v359.i64 / v1115);
            ++v1122;
          }
          while (v1090 != v1122);
        }
      }
      else if (v1106 < v1116)
      {
        uint64_t v1117 = v1092;
        if (v1114 < 4)
        {
          do
          {
LABEL_934:
            *(double *)&v2980[8 * v1117 + 16104] = *(double *)&v2980[8 * v1117 + 16104] * (*(double *)v359.i64 / v1115);
            ++v1117;
          }
          while (v1090 != v1117);
        }
        else
        {
          unint64_t v1118 = v1114 & 0xFFFFFFFFFFFFFFFCLL;
          float v1119 = v1088;
          double v1120 = *(double *)v359.i64 / v1115;
          do
          {
            float64x2_t v1121 = vmulq_n_f64(*v1119, v1120);
            v1119[-1] = vmulq_n_f64(v1119[-1], v1120);
            *float v1119 = v1121;
            v1119 += 2;
            v1102 -= 4;
          }
          while (v1102);
          if (v1114 != v1118)
          {
            uint64_t v1117 = v1092 + v1118;
            goto LABEL_934;
          }
        }
      }
LABEL_943:
      *((double *)v2981 + 13 * v1084) = *((double *)v2981 + 13 * v1084) + *(double *)v359.i64;
      *((double *)&v2897 + v1084) = -v1115;
LABEL_944:
      float32x4_t v1127 = &v2966[v1105];
      size_t v1128 = 96 - v1104;
      uint64_t v1129 = (char *)v2981 + v1105 * 8;
      uint64_t v2763 = v1091;
      size_t v2737 = (size_t)v1086;
      unint64_t v2755 = v1084;
      if (v1084 >= 8)
      {
        unint64_t v1093 = v1084 + 1;
        uint64_t v1094 = v1092;
        memcpy(v1127, v1129, v1128);
        int v1095 = v2755;
        uint64_t v1096 = v1094;
        uint64_t v1097 = v2743;
        float v1098 = v2733;
        uint64_t v1099 = v2730;
        uint64_t v1100 = v2728;
        uint64_t v1101 = v2772;
      }
      else
      {
        uint64_t v2722 = v1092;
        size_t v2718 = ((56 - 8 * v1084) & 0x7FFFFFFF8) + 8;
        v2715 = &v2851[10 * v1084];
        v2680 = &v2904[v1104 - 8];
        v2648 = (char *)&v2960 + v1104 + 8;
        size_t v2647 = 88 - v1104;
        float v1130 = v1086;
        uint64_t v1131 = v1091;
        do
        {
          if (v1113 > 0.0)
          {
            double v1132 = 0.0;
            uint64_t v1133 = (double *)v2981 + 13 * v1084;
            for (unint64_t i = v1084; i != 12; ++i)
            {
              double v1135 = *v1133++;
              double v1132 = v1132 + v1130[i] * v1135;
            }
            double v1136 = -v1132 / *((double *)v2981 + 13 * v1084);
            if (v1136 != 0.0)
            {
              float32x4_t v1137 = (double *)v2981 + 13 * v1084;
              for (unint64_t j = v1084; j != 12; ++j)
              {
                double v1139 = *v1137++;
                v1130[j] = v1130[j] + v1139 * v1136;
              }
            }
          }
          *((void *)&v2903 + v1131 - 1) = *((void *)&v2981[6 * v1131 - 6] + v1084);
          ++v1131;
          v1130 += 12;
        }
        while (v1131 != 10);
        uint64_t v2656 = 8 * v1084;
        unint64_t v1093 = v1084 + 1;
        memcpy(v1127, v1129, v1128);
        int v1095 = v2755;
        if (v2755 <= 6)
        {
          double v1140 = *(double *)&v2904[8 * v1093 - 16];
          double v1141 = fabs(v1140);
          double v1142 = v1141 * 3.01916994e169 * (v1141 * 3.01916994e169);
          if (v1141 <= 3.31216864e-170) {
            double v1141 = 3.31216864e-170;
          }
          else {
            double v1142 = 1.0;
          }
          uint64_t v1143 = (double *)&v2904[8 * v2755 - 16];
          double v1144 = fabs(v1143[2]);
          double v1145 = v1141 / v1144 * (v1141 / v1144) * v1142 + 1.0;
          double v1146 = v1142 + v1144 / v1141 * (v1144 / v1141);
          if (v1144 > v1141) {
            double v1141 = v1144;
          }
          else {
            double v1145 = v1146;
          }
          if (v2755 == 6)
          {
            uint64_t v1147 = v2763;
          }
          else
          {
            double v1148 = fabs(v1143[3]);
            double v1149 = v1141 / v1148 * (v1141 / v1148) * v1145 + 1.0;
            double v1145 = v1145 + v1148 / v1141 * (v1148 / v1141);
            if (v1148 > v1141)
            {
              double v1145 = v1149;
              double v1141 = v1148;
            }
            uint64_t v1147 = v2763;
            if (v2755 != 5)
            {
              uint64_t v1150 = (double *)&v2904[8 * v2755 - 16];
              double v1151 = fabs(v1150[4]);
              double v1152 = v1141 / v1151 * (v1141 / v1151) * v1145 + 1.0;
              double v1145 = v1145 + v1151 / v1141 * (v1151 / v1141);
              if (v1151 > v1141)
              {
                double v1145 = v1152;
                double v1141 = v1151;
              }
              if (v2755 != 4)
              {
                double v1153 = fabs(v1150[5]);
                double v1154 = v1141 / v1153 * (v1141 / v1153) * v1145 + 1.0;
                double v1145 = v1145 + v1153 / v1141 * (v1153 / v1141);
                if (v1153 > v1141)
                {
                  double v1145 = v1154;
                  double v1141 = v1153;
                }
                if (v2755 != 3)
                {
                  char v1155 = (double *)&v2904[8 * v2755 - 16];
                  double v1156 = fabs(v1155[6]);
                  double v1157 = v1141 / v1156 * (v1141 / v1156) * v1145 + 1.0;
                  double v1145 = v1145 + v1156 / v1141 * (v1156 / v1141);
                  if (v1156 > v1141)
                  {
                    double v1145 = v1157;
                    double v1141 = v1156;
                  }
                  if (v2755 != 2)
                  {
                    double v1158 = fabs(v1155[7]);
                    double v1159 = v1141 / v1158 * (v1141 / v1158) * v1145 + 1.0;
                    double v1145 = v1145 + v1158 / v1141 * (v1158 / v1141);
                    if (v1158 > v1141)
                    {
                      double v1145 = v1159;
                      double v1141 = v1158;
                    }
                    if (v2755 != 1)
                    {
                      double v1160 = fabs(v2906);
                      if (v1160 <= v1141)
                      {
                        double v1145 = v1145 + v1160 / v1141 * (v1160 / v1141);
                      }
                      else
                      {
                        double v1145 = v1141 / v1160 * (v1141 / v1160) * v1145 + 1.0;
                        double v1141 = v1160;
                      }
                    }
                  }
                }
              }
            }
          }
          double v1161 = v1141 * sqrt(v1145);
          if (v1161 == 0.0)
          {
            *(void *)&v2904[8 * v2755 - 16] = 0;
            goto LABEL_983;
          }
          if (v1140 >= 0.0) {
            double v1162 = v1161;
          }
          else {
            double v1162 = -v1161;
          }
          *(double *)&v2904[8 * v2755 - 16] = v1162;
          double v1163 = 1.0 / v1162;
          uint64_t v1164 = v1147;
          if (fabs(v1161) >= 1.00208418e-292)
          {
            unint64_t v1172 = v2725;
            size_t v1167 = v2647;
            v1166 = v2648;
            if (v1103 > 3)
            {
              unint64_t v1173 = v1103 & 0xFFFFFFFFFFFFFFFCLL;
              uint64_t v1174 = v2750;
              do
              {
                float64x2_t v1175 = vmulq_n_f64(*v1174, v1163);
                v1174[-1] = vmulq_n_f64(v1174[-1], v1163);
                *uint64_t v1174 = v1175;
                v1174 += 2;
                v1172 -= 4;
              }
              while (v1172);
              if (v1103 == v1173) {
                goto LABEL_1004;
              }
              uint64_t v1164 = v1147 + v1173;
            }
            uint64_t v1176 = v1164 - 1;
            do
            {
              *(double *)&v2904[8 * v1176 - 16] = *(double *)&v2904[8 * v1176 - 16] * v1163;
              ++v1176;
            }
            while (v1176 != 9);
            goto LABEL_1004;
          }
          unint64_t v1165 = v2725;
          size_t v1167 = v2647;
          v1166 = v2648;
          if (v1103 <= 3)
          {
LABEL_994:
            uint64_t v1171 = v1164 - 1;
            do
            {
              *(double *)&v2904[8 * v1171 - 16] = *(double *)&v2904[8 * v1171 - 16] * v1163;
              ++v1171;
            }
            while (v1171 != 9);
          }
          else
          {
            unint64_t v1168 = v1103 & 0xFFFFFFFFFFFFFFFCLL;
            uint64_t v1169 = v2750;
            do
            {
              float64x2_t v1170 = vmulq_n_f64(*v1169, v1163);
              v1169[-1] = vmulq_n_f64(v1169[-1], v1163);
              *uint64_t v1169 = v1170;
              v1169 += 2;
              v1165 -= 4;
            }
            while (v1165);
            if (v1103 != v1168)
            {
              uint64_t v1164 = v1147 + v1168;
              goto LABEL_994;
            }
          }
LABEL_1004:
          double v7 = *(double *)&v2904[8 * v1093 - 16] + 1.0;
          *(double *)&v2904[8 * v1093 - 16] = v7;
          *(double *)&v2904[v2656 - 16] = -*(double *)&v2904[v2656 - 16];
          bzero(v1166, v1167);
          unint64_t v1177 = 11 - v2755;
          unint64_t v1178 = (11 - v2755) & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v1179 = v2763;
          do
          {
            uint64_t v1180 = *((uint64_t *)&v2903 + v1179 - 1);
            if (*(double *)&v1180 != 0.0)
            {
              uint64_t v1181 = 0;
              unint64_t v1182 = v1093 + 12 * (v1179 - 1);
              float64x2_t v1183 = (float64x2_t)vdupq_lane_s64(v1180, 0);
              unint64_t v1184 = (11 - v2755) & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v1185 = (float64x2_t *)((char *)v2981 + 8 * v1182 + 8 * (v1181 >> 32));
                float64x2_t v1186 = *v1185;
                float64x2_t v1187 = v1185[1];
                int v1188 = (float64x2_t *)((char *)&v2960 + 8 * (v1181 >> 32) + 8 * v1093);
                float64x2_t v1189 = vmlaq_f64(v1188[1], v1183, v1187);
                *int v1188 = vmlaq_f64(*v1188, v1183, v1186);
                v1188[1] = v1189;
                v1181 += 0x400000000;
                v1184 -= 4;
              }
              while (v1184);
              if (v1177 != v1178)
              {
                int64_t v1190 = ((11 - v2755) << 32) & 0xFFFFFFFC00000000;
                uint64_t v1191 = v2755 + v1178 - 11;
                do
                {
                  *((double *)&v2960 + (v1190 >> 32) + v1093) = *((double *)&v2960 + (v1190 >> 32) + v1093)
                                                              + *((double *)v2981 + v1182 + (v1190 >> 32))
                                                              * *(double *)&v1180;
                  v1190 += 0x100000000;
                  _CF = __CFADD__(v1191++, 1);
                }
                while (!_CF);
              }
            }
            ++v1179;
          }
          while (v1179 != 10);
          uint64_t v1192 = v2763;
          do
          {
            double v1193 = -(*((double *)&v2903 + v1192 - 1) * (1.0 / v7));
            if (v1193 != 0.0)
            {
              uint64_t v1194 = 0;
              unint64_t v1195 = v1093 + 12 * (v1192 - 1);
              float64x2_t v1196 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1193, 0);
              unint64_t v1197 = (11 - v2755) & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                int32x4_t v1198 = (float64x2_t *)((char *)&v2960 + 8 * (v1194 >> 32) + 8 * v1093);
                float64x2_t v1199 = *v1198;
                float64x2_t v1200 = v1198[1];
                uint64_t v1201 = (float64x2_t *)((char *)v2981 + 8 * v1195 + 8 * (v1194 >> 32));
                float64x2_t v1202 = vmlaq_f64(v1201[1], v1196, v1200);
                *uint64_t v1201 = vmlaq_f64(*v1201, v1196, v1199);
                v1201[1] = v1202;
                v1194 += 0x400000000;
                v1197 -= 4;
              }
              while (v1197);
              if (v1177 != v1178)
              {
                int64_t v1203 = ((11 - v2755) << 32) & 0xFFFFFFFC00000000;
                uint64_t v1204 = v2755 + v1178 - 11;
                do
                {
                  *((double *)v2981 + v1195 + (v1203 >> 32)) = *((double *)v2981 + v1195 + (v1203 >> 32))
                                                             + *((double *)&v2960 + (v1203 >> 32) + v1093) * v1193;
                  v1203 += 0x100000000;
                  _CF = __CFADD__(v1204++, 1);
                }
                while (!_CF);
              }
            }
            ++v1192;
          }
          while (v1192 != 10);
LABEL_983:
          memcpy(v2715, v2680, v2718);
          int v1095 = v2755;
        }
        uint64_t v1101 = v2772;
        uint64_t v1097 = v2743;
        float v1098 = v2733;
        uint64_t v1099 = v2730;
        uint64_t v1100 = v2728;
        uint64_t v1096 = v2722;
      }
      int v1085 = ~v1095;
      uint64_t v1092 = v1096 + 13;
      uint64_t v1090 = v1100 + 12;
      uint64_t v1091 = v2763 + 1;
      uint64_t v1083 = v1101 + 1;
      uint64_t v1089 = v1099 - 1;
      float32x4_t v1088 = (float64x2_t *)((char *)v1098 + 104);
      uint64_t v1086 = (double *)(v2737 + 96);
      uint64_t v1087 = v1097 - 1;
      v2750 = (float64x2_t *)((char *)v2750 + 8);
      unint64_t v1084 = v1093;
      v359.i64[0] = 1.0;
      if (v1093 != 9) {
        continue;
      }
      break;
    }
    uint64_t v1210 = 0;
    *((void *)&v2905 + 1) = *((void *)&v2981[51] + 1);
    double v2906 = 0.0;
    uint64_t v1211 = 116;
    v1212 = &v2971;
    int v1213 = v2970;
    unint64_t v1214 = 8;
    float v1082 = 1.0;
    do
    {
      if (*((double *)&v2897 + v1214) == 0.0)
      {
        uint64_t v1215 = &v2966[12 * v1214];
        v1215[4] = 0u;
        v1215[5] = 0u;
        v1215[2] = 0u;
        v1215[3] = 0u;
        *uint64_t v1215 = 0u;
        v1215[1] = 0u;
        v2966[13 * v1214] = 0x3FF0000000000000;
      }
      else
      {
        if (v1214 <= 7)
        {
          int v1216 = v1214 + 2;
          uint64_t v1217 = v1210 + 4;
          int v1218 = v1211;
          v1219 = v1212;
          do
          {
            uint64_t v1220 = 0;
            double v1221 = 0.0;
            do
            {
              double v1221 = v1221 + *(double *)&v1219[v1220] * *(double *)&v1213[v1220];
              ++v1220;
            }
            while (v1217 != v1220);
            double v1222 = -v1221 / *(double *)&v2966[13 * v1214];
            if (v1222 != 0.0)
            {
              uint64_t v1223 = 0;
              do
              {
                *(double *)&v2966[v1218 + (int)v1223] = *(double *)&v2966[v1218 + (int)v1223]
                                                      + *(double *)&v1213[v1223] * v1222;
                ++v1223;
              }
              while (v1217 != v1223);
            }
            ++v1216;
            v1219 += 12;
            v1218 += 12;
          }
          while (v1216 != 10);
        }
        uint64_t v1224 = 0;
        do
        {
          *(double *)&v1213[v1224] = -*(double *)&v1213[v1224];
          ++v1224;
        }
        while (v1210 + 4 != v1224);
        *(double *)&v2966[13 * v1214] = *(double *)&v2966[13 * v1214] + *(double *)v359.i64;
        if (v1214)
        {
          uint64_t v2773 = v1211;
          v2764 = v1212;
          unint64_t v2756 = v1214;
          bzero(&v2966[-12 * v1210 + 96], 64 - 8 * v1210);
          unint64_t v1214 = v2756;
          v1212 = v2764;
          uint64_t v1211 = v2773;
          float v1082 = 1.0;
          v359.i64[0] = 1.0;
        }
      }
      --v1214;
      ++v1210;
      v1213 -= 13;
      v1212 -= 13;
      v1211 -= 13;
    }
    while (v1210 != 9);
    unint64_t v1225 = 0;
    uint64_t v1226 = 0x5100000000;
    int v2774 = 90;
    int v1227 = 81;
    unint64_t v1228 = 8;
    while (2)
    {
      unint64_t v1230 = v1228;
      if (v1228 <= 6 && *(double *)&v2904[8 * v1228 - 16] != 0.0)
      {
        int v1231 = 0;
        int v1232 = -10 * v1225 + 81;
        int v1233 = v1230 + 2;
        int v1234 = v1225 - 1;
        int v1235 = v1232 + v1225 - 1;
        uint64_t v1236 = v1225 & 0x7FFFFFFFFFFFFFFCLL;
        int v1237 = v2774;
        while (1)
        {
          int v1238 = -10 * v1225 + 90 + 9 * v1231;
          double v1239 = 0.0;
          if (v1225 < 8) {
            break;
          }
          uint64_t v1240 = 0;
          if (v1235 < v1232) {
            goto LABEL_1050;
          }
          if (v1238 + v1234 < v1238) {
            goto LABEL_1050;
          }
          float64x2_t v1245 = 0uLL;
          int v1246 = v1237;
          uint64_t v1247 = v1226;
          unint64_t v1248 = v1225 & 0xFFFFFFFFFFFFFFFCLL;
          float64x2_t v1249 = 0uLL;
          do
          {
            v1250 = (_OWORD *)((char *)&v2851[-1] + (v1247 >> 29));
            float32x4_t v412 = *(float32x4_t *)v1250;
            float64x2_t v1251 = *((float64x2_t *)v1250 + 1);
            int v1252 = (float64x2_t *)&v2851[v1246 - 1];
            float64x2_t v1245 = vmlaq_f64(v1245, (float64x2_t)v412, *v1252);
            float64x2_t v1249 = vmlaq_f64(v1249, v1251, v1252[1]);
            v1247 += 0x400000000;
            v1246 += 4;
            v1248 -= 4;
          }
          while (v1248);
          double v1239 = vaddvq_f64(vaddq_f64(v1249, v1245));
          uint64_t v1240 = v1225 & 0x7FFFFFFFFFFFFFFCLL;
          if (v1225 != v1236) {
            goto LABEL_1050;
          }
LABEL_1052:
          double v1242 = -v1239 / *(double *)&v2851[((10 * v1230) | 1) - 1];
          if (v1242 != 0.0)
          {
            if (v1225 < 8) {
              goto LABEL_1054;
            }
            uint64_t v1243 = 0;
            if (v1238 + v1234 >= v1238 && v1235 >= v1232)
            {
              uint64_t v1253 = v1238;
              if (&v2851[v1253 - 1] < &v2851[-9 * v1225 + 80] && &v2851[-10 * v1225 + 80] < &v2851[v1225 - 1 + v1253])
              {
LABEL_1054:
                uint64_t v1243 = 0;
              }
              else
              {
                uint64_t v1254 = 0;
                float64x2_t v1255 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v1242, 0);
                uint64_t v1256 = v1226;
                do
                {
                  uint64_t v1257 = (float64x2_t *)((char *)&v2851[-1] + (v1256 >> 29));
                  float32x4_t v412 = *(float32x4_t *)v1257;
                  uint64_t v1258 = (float64x2_t *)&v2851[v1237 - 1 + (int)v1254];
                  float64x2_t v1259 = vmlaq_f64(v1258[1], v1255, v1257[1]);
                  *uint64_t v1258 = vmlaq_f64(*v1258, v1255, *v1257);
                  v1258[1] = v1259;
                  v1254 += 4;
                  v1256 += 0x400000000;
                }
                while ((v1225 & 0xFFFFFFFFFFFFFFFCLL) != v1254);
                uint64_t v1243 = v1225 & 0x7FFFFFFFFFFFFFFCLL;
                if (v1225 == v1236) {
                  goto LABEL_1047;
                }
              }
            }
            int64_t v1244 = (unint64_t)(v1227 + v1243) << 32;
            do
            {
              *(double *)&v2851[v1237 - 1 + (int)v1243] = *(double *)&v2851[v1237 - 1 + (int)v1243]
                                                        + *(double *)((char *)&v2851[-1] + (v1244 >> 29)) * v1242;
              ++v1243;
              v1244 += 0x100000000;
            }
            while (v1225 != v1243);
          }
LABEL_1047:
          ++v1233;
          ++v1231;
          v1237 += 9;
          if (v1233 == 10) {
            goto LABEL_1043;
          }
        }
        uint64_t v1240 = 0;
LABEL_1050:
        int64_t v1241 = (unint64_t)(v1227 + v1240) << 32;
        do
        {
          double v1239 = v1239 + *(double *)&v2851[v1237 - 1 + (int)v1240++] * *(double *)((char *)&v2851[-1] + (v1241 >> 29));
          v1241 += 0x100000000;
        }
        while (v1225 != v1240);
        goto LABEL_1052;
      }
LABEL_1043:
      int v1229 = &v2851[9 * v1230 - 1];
      v1229[8] = 0;
      *((_OWORD *)v1229 + 2) = 0u;
      *((_OWORD *)v1229 + 3) = 0u;
      *(_OWORD *)int v1229 = 0u;
      *((_OWORD *)v1229 + 1) = 0u;
      v2851[10 * v1230 - 1] = 0x3FF0000000000000;
      unint64_t v1228 = v1230 - 1;
      ++v1225;
      v1226 -= 0xA00000000;
      v1227 -= 10;
      v2774 -= 10;
      if (v1230) {
        continue;
      }
      break;
    }
    unint64_t v1260 = 0;
    double v1261 = 0.0;
    uint64_t v1262 = (float64x2_t *)v2968;
    long long v1263 = (double *)v2853;
    uint64_t v1264 = (double *)&v2897 + 1;
    unint64_t v526 = v2779;
    do
    {
      double v1265 = *(v1264 - 1);
      if (v1265 == 0.0)
      {
        double v1266 = *(v1264 - 1);
      }
      else
      {
        double v1266 = fabs(v1265);
        *(v1264 - 1) = v1266;
        double v1267 = v1265 / v1266;
        if (v1260 <= 7) {
          *(double *)&v2904[8 * v1260 - 16] = *(double *)&v2904[8 * v1260 - 16] / v1267;
        }
        float64x2_t v1268 = vmulq_n_f64(v1262[-2], v1267);
        v1262[-3] = vmulq_n_f64(v1262[-3], v1267);
        v1262[-2] = v1268;
        float64x2_t v1269 = vmulq_n_f64(*v1262, v1267);
        float64x2_t v1270 = vmulq_n_f64(v1262[1], v1267);
        v1262[-1] = vmulq_n_f64(v1262[-1], v1267);
        *uint64_t v1262 = v1269;
        float32x4_t v412 = (float32x4_t)vmulq_n_f64(v1262[2], v1267);
        v1262[1] = v1270;
        v1262[2] = (float64x2_t)v412;
      }
      double v1271 = *(double *)&v2904[8 * v1260 - 16];
      if (v1260 <= 7 && v1271 != 0.0)
      {
        double v1272 = fabs(v1271);
        double v1273 = v1272 / v1271;
        *(double *)&v2904[8 * v1260 - 16] = v1272;
        *uint64_t v1264 = *v1264 * v1273;
        float64x2_t v1274 = vmulq_n_f64(*(float64x2_t *)(v1263 - 6), v1273);
        *((float64x2_t *)v1263 - 4) = vmulq_n_f64(*(float64x2_t *)(v1263 - 8), v1273);
        *((float64x2_t *)v1263 - 3) = v1274;
        float64x2_t v1275 = vmulq_n_f64(*(float64x2_t *)(v1263 - 2), v1273);
        *((float64x2_t *)v1263 - 2) = vmulq_n_f64(*(float64x2_t *)(v1263 - 4), v1273);
        *((float64x2_t *)v1263 - 1) = v1275;
        *long long v1263 = *v1263 * v1273;
        double v1271 = v1272;
      }
      ++v1260;
      double v1261 = fmax(v1261, fmax(fabs(v1266), fabs(v1271)));
      ++v1264;
      v1263 += 9;
      v1262 += 6;
    }
    while (v1260 != 9);
    int v1276 = 0;
    double v1277 = v1261 * 2.22044605e-16;
    uint64_t v1278 = 7;
    int v1279 = 9;
    do
    {
      int v1280 = v1278 + 1;
      if (v1278 == -1) {
        goto LABEL_1111;
      }
      uint64_t v1288 = v1278;
      double v1289 = *((double *)&v2897 + v1278 + 1);
      while (1)
      {
        double v1290 = fabs(*(double *)&v2904[8 * v1288 - 16]);
        double v1291 = fabs(v1289);
        double v1289 = *((double *)&v2897 + v1288);
        double v1292 = (fabs(v1289) + v1291) * 2.22044605e-16;
        BOOL v1293 = v1290 > v1277 || v1276 < 21;
        BOOL v1294 = v1293;
        BOOL v1295 = v1290 > 1.00208418e-292 && v1290 > v1292;
        if (!v1295 || !v1294) {
          break;
        }
        if (--v1288 == -1)
        {
          int v1296 = 0;
          goto LABEL_1110;
        }
      }
      int v1296 = v1288 + 1;
      *(void *)&v2904[8 * v1288 - 16] = 0;
LABEL_1110:
      if (v1296 == v1280)
      {
LABEL_1111:
        double v1297 = *((double *)&v2897 + v1280);
        if (v1297 < 0.0)
        {
          *((double *)&v2897 + v1280) = -v1297;
          v1298 = (float64x2_t *)&v2851[9 * v1280 - 1];
          float64x2_t v1299 = vnegq_f64(v1298[1]);
          float64x2_t *v1298 = vnegq_f64(*v1298);
          v1298[1] = v1299;
          float32x4_t v412 = (float32x4_t)vnegq_f64(v1298[3]);
          v1298[2] = vnegq_f64(v1298[2]);
          v1298[3] = (float64x2_t)v412;
          v1298[4].f64[0] = -v1298[4].f64[0];
        }
        if ((int)v1278 <= 6)
        {
          unint64_t v1300 = (unint64_t)(3 * v1278) << 34;
          unint64_t v1301 = (unint64_t)(9 * v1278) << 32;
          uint64_t v1302 = (long long *)&v2852[9 * (int)v1278];
          uint64_t v1303 = (double *)&v2898 + (int)v1278;
          uint64_t v1304 = (int)v1278 - 7;
          v1305 = &v2969[12 * (int)v1278];
          do
          {
            double v1306 = *(v1303 - 1);
            double v1307 = *v1303;
            if (v1306 >= *v1303) {
              break;
            }
            unsigned int v1308 = (long long *)((char *)v1302 + 72);
            uint64_t v1309 = (uint64_t)(v1301 + 0xB00000000) >> 29;
            long long v1310 = *v1302;
            *uint64_t v1302 = *(long long *)((char *)v1302 + 72);
            *(long long *)((char *)v1302 + 72) = v1310;
            uint64_t v1311 = *(void *)((char *)&v2851[-1] + v1309);
            uint64_t v1312 = (uint64_t)(v1301 + 0x1400000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1309) = *(void *)((char *)&v2851[-1] + v1312);
            *(void *)((char *)&v2851[-1] + v1312) = v1311;
            uint64_t v1313 = (uint64_t)(v1301 + 0xC00000000) >> 29;
            uint64_t v1314 = *(void *)((char *)&v2851[-1] + v1313);
            uint64_t v1315 = (uint64_t)(v1301 + 0x1500000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1313) = *(void *)((char *)&v2851[-1] + v1315);
            *(void *)((char *)&v2851[-1] + v1315) = v1314;
            uint64_t v1316 = (uint64_t)(v1301 + 0xD00000000) >> 29;
            uint64_t v1317 = *(void *)((char *)&v2851[-1] + v1316);
            uint64_t v1318 = (uint64_t)(v1301 + 0x1600000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1316) = *(void *)((char *)&v2851[-1] + v1318);
            *(void *)((char *)&v2851[-1] + v1318) = v1317;
            uint64_t v1319 = (uint64_t)(v1301 + 0xE00000000) >> 29;
            uint64_t v1320 = *(void *)((char *)&v2851[-1] + v1319);
            uint64_t v1321 = (uint64_t)(v1301 + 0x1700000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1319) = *(void *)((char *)&v2851[-1] + v1321);
            *(void *)((char *)&v2851[-1] + v1321) = v1320;
            uint64_t v1322 = (uint64_t)(v1301 + 0xF00000000) >> 29;
            uint64_t v1323 = *(void *)((char *)&v2851[-1] + v1322);
            uint64_t v1324 = (uint64_t)(v1301 + 0x1800000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1322) = *(void *)((char *)&v2851[-1] + v1324);
            *(void *)((char *)&v2851[-1] + v1324) = v1323;
            uint64_t v1325 = (uint64_t)(v1301 + 0x1000000000) >> 29;
            uint64_t v1326 = *(void *)((char *)&v2851[-1] + v1325);
            uint64_t v1327 = (uint64_t)(v1301 + 0x1900000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1325) = *(void *)((char *)&v2851[-1] + v1327);
            *(void *)((char *)&v2851[-1] + v1327) = v1326;
            uint64_t v1328 = (uint64_t)(v1301 + 0x1100000000) >> 29;
            uint64_t v1329 = *(void *)((char *)&v2851[-1] + v1328);
            uint64_t v1330 = (uint64_t)(v1301 + 0x1A00000000) >> 29;
            *(void *)((char *)&v2851[-1] + v1328) = *(void *)((char *)&v2851[-1] + v1330);
            *(void *)((char *)&v2851[-1] + v1330) = v1329;
            uint64_t v1331 = *(v1305 - 12);
            *(v1305 - 12) = *v1305;
            void *v1305 = v1331;
            unint64_t v1332 = v1300 + 0xC00000000;
            uint64_t v1333 = (uint64_t)(v1300 + 0xC00000000) >> 29;
            uint64_t v1334 = *(void *)((char *)v2966 + (v1333 | 8));
            uint64_t v1335 = (uint64_t)(v1300 + 0x1800000000) >> 29;
            *(void *)((char *)v2966 + (v1333 | 8)) = *(void *)((char *)v2966 + (v1335 | 8));
            *(void *)((char *)v2966 + (v1335 | 8)) = v1334;
            uint64_t v1336 = *(void *)((char *)v2966 + (v1333 | 0x10));
            *(void *)((char *)v2966 + (v1333 | 0x10)) = *(void *)((char *)v2966 + (v1335 | 0x10));
            *(void *)((char *)v2966 + (v1335 | 0x10)) = v1336;
            v1333 |= 0x18uLL;
            uint64_t v1337 = *(void *)((char *)v2966 + v1333);
            v1335 |= 0x18uLL;
            *(void *)((char *)v2966 + v1333) = *(void *)((char *)v2966 + v1335);
            *(void *)((char *)v2966 + v1335) = v1337;
            uint64_t v1338 = (uint64_t)(v1300 + 0x1000000000) >> 29;
            uint64_t v1339 = *(void *)((char *)v2966 + v1338);
            uint64_t v1340 = (uint64_t)(v1300 + 0x1C00000000) >> 29;
            *(void *)((char *)v2966 + v1338) = *(void *)((char *)v2966 + v1340);
            *(void *)((char *)v2966 + v1340) = v1339;
            uint64_t v1341 = (uint64_t)(v1300 + 0x1100000000) >> 29;
            uint64_t v1342 = *(void *)((char *)v2966 + v1341);
            uint64_t v1343 = (uint64_t)(v1300 + 0x1D00000000) >> 29;
            *(void *)((char *)v2966 + v1341) = *(void *)((char *)v2966 + v1343);
            *(void *)((char *)v2966 + v1343) = v1342;
            uint64_t v1344 = (uint64_t)(v1300 + 0x1200000000) >> 29;
            uint64_t v1345 = *(void *)((char *)v2966 + v1344);
            uint64_t v1346 = (uint64_t)(v1300 + 0x1E00000000) >> 29;
            *(void *)((char *)v2966 + v1344) = *(void *)((char *)v2966 + v1346);
            *(void *)((char *)v2966 + v1346) = v1345;
            uint64_t v1347 = (uint64_t)(v1300 + 0x1300000000) >> 29;
            uint64_t v1348 = *(void *)((char *)v2966 + v1347);
            uint64_t v1349 = (uint64_t)(v1300 + 0x1F00000000) >> 29;
            *(void *)((char *)v2966 + v1347) = *(void *)((char *)v2966 + v1349);
            *(void *)((char *)v2966 + v1349) = v1348;
            uint64_t v1350 = (uint64_t)(v1300 + 0x1400000000) >> 29;
            uint64_t v1351 = *(void *)((char *)v2966 + v1350);
            uint64_t v1352 = (uint64_t)(v1300 + 0x2000000000) >> 29;
            *(void *)((char *)v2966 + v1350) = *(void *)((char *)v2966 + v1352);
            *(void *)((char *)v2966 + v1352) = v1351;
            uint64_t v1353 = (uint64_t)(v1300 + 0x1500000000) >> 29;
            uint64_t v1354 = *(void *)((char *)v2966 + v1353);
            uint64_t v1355 = (uint64_t)(v1300 + 0x2100000000) >> 29;
            *(void *)((char *)v2966 + v1353) = *(void *)((char *)v2966 + v1355);
            *(void *)((char *)v2966 + v1355) = v1354;
            uint64_t v1356 = (uint64_t)(v1300 + 0x1600000000) >> 29;
            uint64_t v1357 = *(void *)((char *)v2966 + v1356);
            uint64_t v1358 = (uint64_t)(v1300 + 0x2200000000) >> 29;
            *(void *)((char *)v2966 + v1356) = *(void *)((char *)v2966 + v1358);
            *(void *)((char *)v2966 + v1358) = v1357;
            uint64_t v1359 = (uint64_t)(v1300 + 0x1700000000) >> 29;
            uint64_t v1360 = *(void *)((char *)v2966 + v1359);
            uint64_t v1361 = (uint64_t)(v1300 + 0x2300000000) >> 29;
            *(void *)((char *)v2966 + v1359) = *(void *)((char *)v2966 + v1361);
            *(void *)((char *)v2966 + v1361) = v1360;
            *(v1303 - 1) = v1307;
            *uint64_t v1303 = v1306;
            v1301 += 0x900000000;
            ++v1303;
            v1305 += 12;
            uint64_t v1302 = v1308;
            unint64_t v1300 = v1332;
            _CF = __CFADD__(v1304++, 1);
          }
          while (!_CF);
        }
        int v1276 = 0;
        uint64_t v1278 = (v1278 - 1);
        goto LABEL_1141;
      }
      LODWORD(v1281) = v1279;
      if (v1279 >= v1296)
      {
        uint64_t v1282 = v1296;
        if (v1279 == v1296) {
          goto LABEL_1133;
        }
        uint64_t v1283 = v1296 + 1;
        double v1284 = 0.0;
        if (v1279 > (int)v1283) {
          double v1284 = fabs(*(double *)&v2902[8 * v1279 + 8]);
        }
        uint64_t v1285 = v1279 - 1;
        double v1286 = fabs(*((double *)&v2897 + v1285));
        BOOL v1287 = v1286 > v1284 * 2.22044605e-16 && v1286 > 1.00208418e-292;
        if (v1287)
        {
          uint64_t v1362 = (double *)&v2902[8 * v1279];
          uint64_t v1363 = v1279;
          while (v1296 + 1 != v1363)
          {
            uint64_t v1281 = v1363 - 1;
            double v1366 = 0.0;
            if (v1363 - 1 < v1279) {
              double v1366 = fabs(v1362[1]);
            }
            if (v1281 > v1283) {
              double v1366 = fabs(*v1362) + v1366;
            }
            double v1364 = fabs(*(double *)&v2896[8 * v1363 + 1272]);
            --v1362;
            BOOL v1365 = v1364 > v1366 * 2.22044605e-16 && v1364 > 1.00208418e-292;
            --v1363;
            if (!v1365)
            {
              uint64_t v1285 = v1281 - 1;
              goto LABEL_1130;
            }
          }
          goto LABEL_1133;
        }
        LODWORD(v1281) = v1279;
LABEL_1130:
        *((void *)&v2897 + v1285) = 0;
      }
      if (v1281 == v1296)
      {
        uint64_t v1282 = v1296;
LABEL_1133:
        double v1367 = *((double *)&v2897 + v1280);
        uint64_t v1368 = 8 * (int)v1278;
        double v1369 = *(double *)((char *)&v2897 + v1368);
        double v1370 = *(double *)&v2904[v1368 - 16];
        uint64_t v1371 = 8 * v1282;
        double v1372 = *(double *)((char *)&v2897 + v1371);
        double v1373 = *(double *)&v2904[v1371 - 16];
        double v1374 = fmax(fmax(fmax(fmax(fabs(v1367), fabs(v1369)), fabs(v1370)), fabs(v1372)), fabs(v1373));
        double v1375 = *(double *)v359.i64 / v1374;
        double v1376 = v1367 * (*(double *)v359.i64 / v1374);
        double v1377 = v1370 * (*(double *)v359.i64 / v1374);
        double v1378 = (v1377 * v1377
               + (v1369 * (*(double *)v359.i64 / v1374) + v1376) * (v1369 * (*(double *)v359.i64 / v1374) - v1376))
              * 0.5;
        double v1379 = v1376 * v1377 * (v1376 * v1377);
        if (v1379 != 0.0 || (double v1380 = 0.0, v1378 != 0.0))
        {
          double v1381 = sqrt(v1379 + v1378 * v1378);
          if (v1378 < 0.0) {
            double v1381 = -v1381;
          }
          double v1380 = v1379 / (v1381 + v1378);
        }
        double v1382 = v1372 * v1375;
        double v1383 = v1380 + (v1382 + v1376) * (v1382 - v1376);
        if (v1296 <= (int)v1278)
        {
          int v1433 = v1296 + 1;
          uint64_t v1434 = v1296 + 1;
          int64_t v1435 = (unint64_t)(3 * v1433) << 34;
          uint64_t v1436 = 8 * v1433;
          unint64_t v1437 = (unint64_t)(9 * v1433) << 32;
          float v1438 = (double *)&v2904[v1436 - 16];
          int16x8_t v1439 = (double *)&v2851[9 * v1433 - 1];
          float v1440 = (double *)((char *)&v2897 + v1436);
          v1441 = (double *)&v2966[12 * v1433];
          uint64_t v1442 = v1434;
          double v1443 = v1382 * v1373 / v1374;
          do
          {
            double v1494 = fabs(v1383);
            double v1495 = fabs(v1443);
            if (v1495 + v1494 == 0.0)
            {
              double v1496 = 1.0;
              double v1497 = 0.0;
              double v1498 = 0.0;
            }
            else
            {
              if (v1494 <= v1495) {
                double v1499 = v1443;
              }
              else {
                double v1499 = v1383;
              }
              double v1500 = sqrt(v1495 / (v1495 + v1494) * (v1495 / (v1495 + v1494))+ v1494 / (v1495 + v1494) * (v1494 / (v1495 + v1494)))* (v1495 + v1494);
              double v1497 = -v1500;
              if (v1499 >= 0.0) {
                double v1497 = v1500;
              }
              double v1496 = v1383 / v1497;
              double v1498 = v1443 / v1497;
            }
            if (v1442 > v1434) {
              *(v1438 - 2) = v1497;
            }
            double v1501 = *(v1438 - 1);
            double v1503 = *(v1440 - 1);
            double v1502 = *v1440;
            double v1504 = -(v1503 * v1498 - v1501 * v1496);
            *(v1438 - 1) = v1504;
            double v1505 = *(v1439 - 9);
            double v1506 = *(v1439 - 8);
            double v1507 = v1439[1];
            double v1508 = *v1439 * v1498 + v1505 * v1496;
            *int16x8_t v1439 = -(v1505 * v1498 - *v1439 * v1496);
            v1439[1] = -(v1506 * v1498 - v1507 * v1496);
            double v1509 = v1502 * v1498;
            double v1510 = v1502 * v1496;
            *float v1440 = v1510;
            *(v1439 - 9) = v1508;
            *(v1439 - 8) = v1507 * v1498 + v1506 * v1496;
            uint64_t v1511 = (uint64_t)(v1437 + 0x200000000) >> 29;
            double v1512 = *(double *)((char *)&v2851[-1] + v1511);
            uint64_t v1513 = (uint64_t)(v1437 - 0x700000000) >> 29;
            double v1514 = *(double *)((char *)&v2851[-1] + v1513);
            *(double *)((char *)&v2851[-1] + v1511) = -(v1514 * v1498 - v1512 * v1496);
            *(double *)((char *)&v2851[-1] + v1513) = v1512 * v1498 + v1514 * v1496;
            uint64_t v1515 = (uint64_t)(v1437 + 0x300000000) >> 29;
            double v1516 = *(double *)((char *)&v2851[-1] + v1515);
            uint64_t v1517 = (uint64_t)(v1437 - 0x600000000) >> 29;
            double v1518 = *(double *)((char *)&v2851[-1] + v1517);
            *(double *)((char *)&v2851[-1] + v1515) = -(v1518 * v1498 - v1516 * v1496);
            *(double *)((char *)&v2851[-1] + v1517) = v1516 * v1498 + v1518 * v1496;
            uint64_t v1519 = (uint64_t)(v1437 + 0x400000000) >> 29;
            double v1520 = *(double *)((char *)&v2851[-1] + v1519);
            uint64_t v1521 = (uint64_t)(v1437 - 0x500000000) >> 29;
            double v1522 = *(double *)((char *)&v2851[-1] + v1521);
            *(double *)((char *)&v2851[-1] + v1519) = -(v1522 * v1498 - v1520 * v1496);
            *(double *)((char *)&v2851[-1] + v1521) = v1520 * v1498 + v1522 * v1496;
            uint64_t v1523 = (uint64_t)(v1437 + 0x500000000) >> 29;
            double v1524 = *(double *)((char *)&v2851[-1] + v1523);
            uint64_t v1525 = (uint64_t)(v1437 - 0x400000000) >> 29;
            double v1526 = *(double *)((char *)&v2851[-1] + v1525);
            *(double *)((char *)&v2851[-1] + v1523) = -(v1526 * v1498 - v1524 * v1496);
            *(double *)((char *)&v2851[-1] + v1525) = v1524 * v1498 + v1526 * v1496;
            uint64_t v1527 = (uint64_t)(v1437 + 0x600000000) >> 29;
            double v1528 = *(double *)((char *)&v2851[-1] + v1527);
            uint64_t v1529 = (uint64_t)(v1437 - 0x300000000) >> 29;
            double v1530 = *(double *)((char *)&v2851[-1] + v1529);
            *(double *)((char *)&v2851[-1] + v1527) = -(v1530 * v1498 - v1528 * v1496);
            *(double *)((char *)&v2851[-1] + v1529) = v1528 * v1498 + v1530 * v1496;
            uint64_t v1531 = (uint64_t)(v1437 + 0x700000000) >> 29;
            double v1532 = *(double *)((char *)&v2851[-1] + v1531);
            uint64_t v1533 = (uint64_t)(v1437 - 0x200000000) >> 29;
            double v1534 = *(double *)((char *)&v2851[-1] + v1533);
            *(double *)((char *)&v2851[-1] + v1531) = -(v1534 * v1498 - v1532 * v1496);
            *(double *)((char *)&v2851[-1] + v1533) = v1532 * v1498 + v1534 * v1496;
            uint64_t v1535 = (uint64_t)(v1437 + 0x800000000) >> 29;
            double v1536 = *(double *)((char *)&v2851[-1] + v1535);
            uint64_t v1537 = (uint64_t)(v1437 - 0x100000000) >> 29;
            double v1538 = *(double *)((char *)&v2851[-1] + v1537);
            *(double *)((char *)&v2851[-1] + v1535) = -(v1538 * v1498 - v1536 * v1496);
            *(double *)((char *)&v2851[-1] + v1537) = v1536 * v1498 + v1538 * v1496;
            double v1539 = v1501 * v1498 + v1503 * v1496;
            double v1540 = fabs(v1539);
            double v1541 = fabs(v1509);
            if (v1541 + v1540 == 0.0)
            {
              double v1446 = 1.0;
              double v1445 = 0.0;
              double v1447 = 0.0;
            }
            else
            {
              if (v1540 <= v1541) {
                double v1444 = v1509;
              }
              else {
                double v1444 = v1539;
              }
              double v1445 = sqrt(v1541 / (v1541 + v1540) * (v1541 / (v1541 + v1540))+ v1540 / (v1541 + v1540) * (v1540 / (v1541 + v1540)))* (v1541 + v1540);
              if (v1444 < 0.0) {
                double v1445 = -v1445;
              }
              double v1446 = v1539 / v1445;
              double v1447 = v1509 / v1445;
            }
            *(v1440 - 1) = v1445;
            double v1448 = *v1441;
            double v1449 = *(v1441 - 12);
            double *v1441 = -(v1449 * v1447 - *v1441 * v1446);
            *(v1441 - 12) = v1448 * v1447 + v1449 * v1446;
            uint64_t v1450 = (v1435 >> 29) | 8;
            double v1451 = *(double *)((char *)v2966 + v1450);
            uint64_t v1452 = (v1435 - 0xC00000000) >> 29;
            double v1453 = *(double *)((char *)v2966 + (v1452 | 8));
            *(double *)((char *)v2966 + v1450) = -(v1453 * v1447 - v1451 * v1446);
            *(double *)((char *)v2966 + (v1452 | 8)) = v1451 * v1447 + v1453 * v1446;
            uint64_t v1454 = (v1435 >> 29) | 0x10;
            double v1455 = *(double *)((char *)v2966 + v1454);
            double v1456 = *(double *)((char *)v2966 + (v1452 | 0x10));
            *(double *)((char *)v2966 + v1454) = -(v1456 * v1447 - v1455 * v1446);
            *(double *)((char *)v2966 + (v1452 | 0x10)) = v1455 * v1447 + v1456 * v1446;
            uint64_t v1457 = (v1435 >> 29) | 0x18;
            double v1458 = *(double *)((char *)v2966 + v1457);
            double v1383 = v1446 * v1504 + v1447 * v1510;
            double v1459 = *(double *)((char *)v2966 + (v1452 | 0x18));
            *(double *)((char *)v2966 + v1457) = -(v1459 * v1447 - v1458 * v1446);
            *(double *)((char *)v2966 + (v1452 | 0x18)) = v1458 * v1447 + v1459 * v1446;
            double v1460 = -(v1447 * v1504 - v1446 * v1510);
            double v1461 = *v1438;
            *float v1438 = *v1438 * v1446;
            ++v1438;
            uint64_t v1462 = (v1435 + 0x400000000) >> 29;
            double v1463 = *(double *)((char *)v2966 + v1462);
            uint64_t v1464 = (v1435 - 0x800000000) >> 29;
            double v1465 = *(double *)((char *)v2966 + v1464);
            *(double *)((char *)v2966 + v1462) = -(v1465 * v1447 - v1463 * v1446);
            *(double *)((char *)v2966 + v1464) = v1463 * v1447 + v1465 * v1446;
            uint64_t v1466 = (v1435 + 0x500000000) >> 29;
            double v1467 = *(double *)((char *)v2966 + v1466);
            uint64_t v1468 = (v1435 - 0x700000000) >> 29;
            double v1469 = *(double *)((char *)v2966 + v1468);
            *(double *)((char *)v2966 + v1466) = -(v1469 * v1447 - v1467 * v1446);
            *(double *)((char *)v2966 + v1468) = v1467 * v1447 + v1469 * v1446;
            uint64_t v1470 = (v1435 + 0x600000000) >> 29;
            double v1471 = *(double *)((char *)v2966 + v1470);
            uint64_t v1472 = (v1435 - 0x600000000) >> 29;
            double v1473 = *(double *)((char *)v2966 + v1472);
            *(double *)((char *)v2966 + v1470) = -(v1473 * v1447 - v1471 * v1446);
            *(double *)((char *)v2966 + v1472) = v1471 * v1447 + v1473 * v1446;
            uint64_t v1474 = (v1435 + 0x700000000) >> 29;
            double v1475 = *(double *)((char *)v2966 + v1474);
            uint64_t v1476 = (v1435 - 0x500000000) >> 29;
            double v1477 = *(double *)((char *)v2966 + v1476);
            *(double *)((char *)v2966 + v1474) = -(v1477 * v1447 - v1475 * v1446);
            *(double *)((char *)v2966 + v1476) = v1475 * v1447 + v1477 * v1446;
            uint64_t v1478 = (v1435 + 0x800000000) >> 29;
            double v1479 = *(double *)((char *)v2966 + v1478);
            uint64_t v1480 = (v1435 - 0x400000000) >> 29;
            double v1481 = *(double *)((char *)v2966 + v1480);
            *(double *)((char *)v2966 + v1478) = -(v1481 * v1447 - v1479 * v1446);
            *(double *)((char *)v2966 + v1480) = v1479 * v1447 + v1481 * v1446;
            uint64_t v1482 = (v1435 + 0x900000000) >> 29;
            double v1483 = *(double *)((char *)v2966 + v1482);
            uint64_t v1484 = (v1435 - 0x300000000) >> 29;
            double v1485 = *(double *)((char *)v2966 + v1484);
            *(double *)((char *)v2966 + v1482) = -(v1485 * v1447 - v1483 * v1446);
            *(double *)((char *)v2966 + v1484) = v1483 * v1447 + v1485 * v1446;
            uint64_t v1486 = (v1435 + 0xA00000000) >> 29;
            double v1487 = *(double *)((char *)v2966 + v1486);
            uint64_t v1488 = (v1435 - 0x200000000) >> 29;
            double v1489 = *(double *)((char *)v2966 + v1488);
            *(double *)((char *)v2966 + v1486) = -(v1489 * v1447 - v1487 * v1446);
            *(double *)((char *)v2966 + v1488) = v1487 * v1447 + v1489 * v1446;
            uint64_t v1490 = (v1435 + 0xB00000000) >> 29;
            double v1491 = *(double *)((char *)v2966 + v1490);
            uint64_t v1492 = (v1435 - 0x100000000) >> 29;
            double v1493 = *(double *)((char *)v2966 + v1492);
            *v1440++ = v1460;
            *(double *)((char *)v2966 + v1490) = -(v1493 * v1447 - v1491 * v1446);
            *(double *)((char *)v2966 + v1492) = v1491 * v1447 + v1493 * v1446;
            double v1443 = v1461 * v1447;
            v1435 += 0xC00000000;
            v1437 += 0x900000000;
            v1439 += 9;
            v1441 += 12;
            BOOL v1287 = v1442++ <= (int)v1278;
            v359.i64[0] = 1.0;
          }
          while (v1287);
        }
        else
        {
          v359.i64[0] = 1.0;
        }
        *(double *)&v2904[8 * (int)v1278 - 16] = v1383;
        ++v1276;
        goto LABEL_1141;
      }
      if (v1281 == v1279)
      {
        uint64_t v1384 = 8 * (int)v1278;
        double v1385 = *(double *)&v2904[v1384 - 16];
        *(void *)&v2904[v1384 - 16] = 0;
        if ((int)v1278 >= v1296)
        {
          uint64_t v2775 = v1278;
          uint64_t v1386 = (int)v1278;
          uint64_t v1387 = 9 * v1280;
          uint64_t v1388 = v1387 + 1;
          uint64_t v1389 = (int)v1387;
          uint64_t v1390 = (int)v1387 + 2;
          uint64_t v1391 = (int)v1387 + 3;
          uint64_t v1392 = (int)v1387 + 4;
          uint64_t v1393 = (int)v1387 + 5;
          uint64_t v1394 = (int)v1387 + 6;
          uint64_t v1395 = (int)v1387 + 7;
          uint64_t v1396 = (int)v1387 + 8;
          v1397 = (double *)&v2851[9 * (int)v1278];
          unint64_t v1398 = (unint64_t)(9 * v1278) << 32;
          do
          {
            double v1424 = *((double *)&v2897 + v1386);
            double v1425 = fabs(v1424);
            double v1426 = fabs(v1385);
            if (v1425 + v1426 == 0.0)
            {
              double v1427 = 1.0;
              double v1428 = 0.0;
              double v1385 = 0.0;
              double v1429 = 0.0;
            }
            else
            {
              if (v1425 <= v1426) {
                double v1430 = v1385;
              }
              else {
                double v1430 = *((double *)&v2897 + v1386);
              }
              double v1431 = sqrt(v1426 / (v1425 + v1426) * (v1426 / (v1425 + v1426))+ v1425 / (v1425 + v1426) * (v1425 / (v1425 + v1426)))* (v1425 + v1426);
              double v1428 = -v1431;
              if (v1430 >= 0.0) {
                double v1428 = v1431;
              }
              BOOL v1287 = v1425 <= v1426;
              double v1427 = v1424 / v1428;
              double v1429 = v1385 / v1428;
              if (v1287)
              {
                v359.i64[0] = 1.0;
                if (v1427 == 0.0) {
                  double v1385 = 1.0;
                }
                else {
                  double v1385 = 1.0 / v1427;
                }
              }
              else
              {
                double v1385 = v1385 / v1428;
                v359.i64[0] = 1.0;
              }
            }
            *((double *)&v2897 + v1386) = v1428;
            if (v1386 + 1 > v1296 + 1)
            {
              double v1432 = *(double *)&v2902[8 * v1386 + 16];
              double v1385 = -(v1429 * v1432);
              *(double *)&v2902[8 * v1386 + 16] = v1432 * v1427;
            }
            double v1399 = *(double *)&v2851[v1389 - 1];
            double v1400 = *(v1397 - 1);
            *(double *)&v2851[v1389 - 1] = -(v1400 * v1429 - v1399 * v1427);
            *(v1397 - 1) = v1399 * v1429 + v1400 * v1427;
            double v1401 = *(double *)&v2851[v1388 - 1];
            double v1402 = *v1397;
            *(double *)&v2851[v1388 - 1] = -(*v1397 * v1429 - v1401 * v1427);
            double *v1397 = v1401 * v1429 + v1402 * v1427;
            v1397 -= 9;
            double v1403 = *(double *)&v2851[v1390 - 1];
            uint64_t v1404 = (uint64_t)(v1398 + 0x200000000) >> 29;
            double v1405 = *(double *)((char *)&v2851[-1] + v1404);
            *(double *)&v2851[v1390 - 1] = -(v1405 * v1429 - v1403 * v1427);
            *(double *)((char *)&v2851[-1] + v1404) = v1403 * v1429 + v1405 * v1427;
            double v1406 = *(double *)&v2851[v1391 - 1];
            uint64_t v1407 = (uint64_t)(v1398 + 0x300000000) >> 29;
            double v1408 = *(double *)((char *)&v2851[-1] + v1407);
            *(double *)&v2851[v1391 - 1] = -(v1408 * v1429 - v1406 * v1427);
            *(double *)((char *)&v2851[-1] + v1407) = v1406 * v1429 + v1408 * v1427;
            double v1409 = *(double *)&v2851[v1392 - 1];
            uint64_t v1410 = (uint64_t)(v1398 + 0x400000000) >> 29;
            double v1411 = *(double *)((char *)&v2851[-1] + v1410);
            *(double *)&v2851[v1392 - 1] = -(v1411 * v1429 - v1409 * v1427);
            *(double *)((char *)&v2851[-1] + v1410) = v1409 * v1429 + v1411 * v1427;
            double v1412 = *(double *)&v2851[v1393 - 1];
            uint64_t v1413 = (uint64_t)(v1398 + 0x500000000) >> 29;
            double v1414 = *(double *)((char *)&v2851[-1] + v1413);
            *(double *)&v2851[v1393 - 1] = -(v1414 * v1429 - v1412 * v1427);
            *(double *)((char *)&v2851[-1] + v1413) = v1412 * v1429 + v1414 * v1427;
            double v1415 = *(double *)&v2851[v1394 - 1];
            uint64_t v1416 = (uint64_t)(v1398 + 0x600000000) >> 29;
            double v1417 = *(double *)((char *)&v2851[-1] + v1416);
            *(double *)&v2851[v1394 - 1] = -(v1417 * v1429 - v1415 * v1427);
            *(double *)((char *)&v2851[-1] + v1416) = v1415 * v1429 + v1417 * v1427;
            double v1418 = *(double *)&v2851[v1395 - 1];
            uint64_t v1419 = (uint64_t)(v1398 + 0x700000000) >> 29;
            double v1420 = *(double *)((char *)&v2851[-1] + v1419);
            *(double *)&v2851[v1395 - 1] = -(v1420 * v1429 - v1418 * v1427);
            *(double *)((char *)&v2851[-1] + v1419) = v1418 * v1429 + v1420 * v1427;
            double v1421 = *(double *)&v2851[v1396 - 1];
            uint64_t v1422 = (uint64_t)(v1398 + 0x800000000) >> 29;
            double v1423 = *(double *)((char *)&v2851[-1] + v1422);
            *(double *)&v2851[v1396 - 1] = -(v1423 * v1429 - v1421 * v1427);
            *(double *)((char *)&v2851[-1] + v1422) = v1421 * v1429 + v1423 * v1427;
            v1398 -= 0x900000000;
            BOOL v1287 = v1386-- <= v1296;
          }
          while (!v1287);
          uint64_t v1278 = v2775;
        }
      }
      else
      {
        uint64_t v1542 = (int)v1281 - 1;
        double v1543 = *(double *)&v2904[8 * v1542 - 16];
        *(void *)&v2904[8 * v1542 - 16] = 0;
        if ((int)v1281 < v1279)
        {
          uint64_t v2776 = v1278;
          uint64_t v1544 = 12 * (int)v1542;
          uint64_t v2765 = v1544 | 1;
          uint64_t v1545 = (int)v1544;
          uint64_t v2757 = (int)v1544 | 2;
          uint64_t v1546 = (int)v1544 + 4;
          uint64_t v1547 = (int)v1544 + 5;
          uint64_t v1548 = (int)v1544 + 6;
          uint64_t v1549 = (int)v1544 + 7;
          uint64_t v1550 = (int)v1544 + 8;
          uint64_t v1551 = (int)v1544 + 9;
          uint64_t v1552 = (int)v1544 | 3;
          uint64_t v1553 = (int)v1544 + 10;
          uint64_t v1554 = (int)v1544 + 11;
          int v1555 = v1281;
          uint64_t v1556 = (int)v1281;
          uint64_t v1557 = v1279;
          int64_t v1558 = (unint64_t)(3 * v1281) << 34;
          v1559 = (double *)&v2966[12 * (int)v1281];
          uint64_t v1560 = 8 * v1555;
          v1561 = (double *)&v2904[v1560 - 16];
          v1562 = (double *)((char *)&v2897 + v1560);
          uint64_t v1563 = v1557 - v1556;
          do
          {
            double v1603 = fabs(*v1562);
            double v1604 = fabs(v1543);
            if (v1603 + v1604 == 0.0)
            {
              double v1564 = 1.0;
              double v1565 = 0.0;
              double v1566 = 0.0;
            }
            else
            {
              if (v1603 <= v1604) {
                double v1605 = v1543;
              }
              else {
                double v1605 = *v1562;
              }
              double v1606 = sqrt(v1604 / (v1603 + v1604) * (v1604 / (v1603 + v1604))+ v1603 / (v1603 + v1604) * (v1603 / (v1603 + v1604)))* (v1603 + v1604);
              if (v1605 >= 0.0) {
                double v1565 = v1606;
              }
              else {
                double v1565 = -v1606;
              }
              double v1564 = *v1562 / v1565;
              double v1566 = v1543 / v1565;
            }
            *v1562++ = v1565;
            double v1567 = *v1561;
            double *v1561 = *v1561 * v1564;
            ++v1561;
            double v1568 = *(double *)&v2966[v1545];
            double v1569 = *v1559;
            *(double *)&v2966[v1545] = -(*v1559 * v1566 - v1568 * v1564);
            double *v1559 = v1568 * v1566 + v1569 * v1564;
            v1559 += 12;
            double v1570 = *(double *)&v2966[v2765];
            uint64_t v1571 = (v1558 >> 29) | 8;
            double v1572 = *(double *)((char *)v2966 + v1571);
            *(double *)&v2966[v2765] = -(v1572 * v1566 - v1570 * v1564);
            *(double *)((char *)v2966 + v1571) = v1570 * v1566 + v1572 * v1564;
            double v1573 = *(double *)&v2966[v2757];
            uint64_t v1574 = (v1558 >> 29) | 0x10;
            double v1575 = *(double *)((char *)v2966 + v1574);
            *(double *)&v2966[v2757] = -(v1575 * v1566 - v1573 * v1564);
            *(double *)((char *)v2966 + v1574) = v1573 * v1566 + v1575 * v1564;
            double v1576 = *(double *)&v2966[v1552];
            uint64_t v1577 = (v1558 >> 29) | 0x18;
            double v1578 = *(double *)((char *)v2966 + v1577);
            *(double *)&v2966[v1552] = -(v1578 * v1566 - v1576 * v1564);
            *(double *)((char *)v2966 + v1577) = v1576 * v1566 + v1578 * v1564;
            double v1579 = *(double *)&v2966[v1546];
            uint64_t v1580 = (v1558 + 0x400000000) >> 29;
            double v1581 = *(double *)((char *)v2966 + v1580);
            *(double *)&v2966[v1546] = -(v1581 * v1566 - v1579 * v1564);
            *(double *)((char *)v2966 + v1580) = v1579 * v1566 + v1581 * v1564;
            double v1582 = *(double *)&v2966[v1547];
            uint64_t v1583 = (v1558 + 0x500000000) >> 29;
            double v1584 = *(double *)((char *)v2966 + v1583);
            *(double *)&v2966[v1547] = -(v1584 * v1566 - v1582 * v1564);
            *(double *)((char *)v2966 + v1583) = v1582 * v1566 + v1584 * v1564;
            double v1585 = *(double *)&v2966[v1548];
            uint64_t v1586 = (v1558 + 0x600000000) >> 29;
            double v1587 = *(double *)((char *)v2966 + v1586);
            *(double *)&v2966[v1548] = -(v1587 * v1566 - v1585 * v1564);
            *(double *)((char *)v2966 + v1586) = v1585 * v1566 + v1587 * v1564;
            double v1588 = *(double *)&v2966[v1549];
            uint64_t v1589 = (v1558 + 0x700000000) >> 29;
            double v1590 = *(double *)((char *)v2966 + v1589);
            *(double *)&v2966[v1549] = -(v1590 * v1566 - v1588 * v1564);
            *(double *)((char *)v2966 + v1589) = v1588 * v1566 + v1590 * v1564;
            double v1591 = *(double *)&v2966[v1550];
            uint64_t v1592 = (v1558 + 0x800000000) >> 29;
            double v1593 = *(double *)((char *)v2966 + v1592);
            *(double *)&v2966[v1550] = -(v1593 * v1566 - v1591 * v1564);
            *(double *)((char *)v2966 + v1592) = v1591 * v1566 + v1593 * v1564;
            double v1594 = *(double *)&v2966[v1551];
            uint64_t v1595 = (v1558 + 0x900000000) >> 29;
            double v1596 = *(double *)((char *)v2966 + v1595);
            *(double *)&v2966[v1551] = -(v1596 * v1566 - v1594 * v1564);
            *(double *)((char *)v2966 + v1595) = v1594 * v1566 + v1596 * v1564;
            double v1597 = *(double *)&v2966[v1553];
            uint64_t v1598 = (v1558 + 0xA00000000) >> 29;
            double v1599 = *(double *)((char *)v2966 + v1598);
            *(double *)&v2966[v1553] = -(v1599 * v1566 - v1597 * v1564);
            *(double *)((char *)v2966 + v1598) = v1597 * v1566 + v1599 * v1564;
            double v1543 = -(v1566 * v1567);
            double v1600 = *(double *)&v2966[v1554];
            uint64_t v1601 = (v1558 + 0xB00000000) >> 29;
            double v1602 = *(double *)((char *)v2966 + v1601);
            *(double *)&v2966[v1554] = -(v1602 * v1566 - v1600 * v1564);
            *(double *)((char *)v2966 + v1601) = v1600 * v1566 + v1602 * v1564;
            v1558 += 0xC00000000;
            --v1563;
          }
          while (v1563);
          unint64_t v526 = v2779;
          uint64_t v1278 = v2776;
        }
      }
LABEL_1141:
      if ((int)v1278 < -1) {
        break;
      }
      int v1279 = v1278 + 2;
    }
    while (v1276 < 75);
    v359.i64[0] = v2854;
    uint64_t v1209 = v2855;
    v412.i64[0] = v2856;
    v352.i64[0] = v2857;
    v350.i64[0] = v2858;
    uint64_t v1208 = v2859;
    uint64_t v1207 = v2860;
    uint64_t v1206 = v2861;
    uint64_t v1205 = v2862;
LABEL_1198:
    float v1607 = fabsf(*(float *)&v2870);
    float v1608 = fabsf(*((float *)&v2870 + 1));
    unsigned int v1609 = v1608 > v1607;
    if (v1608 <= v1607) {
      float v1610 = v1607;
    }
    else {
      float v1610 = v1608;
    }
    float v1611 = fabsf(*((float *)&v2870 + 2));
    if (v1611 > v1610) {
      unsigned int v1609 = 2;
    }
    *(void *)&v2981[0] = v359.i64[0];
    *((void *)&v2981[0] + 1) = v352.i64[0];
    *(void *)&v2981[1] = v1207;
    *((void *)&v2981[1] + 1) = v1209;
    *(void *)&v2981[2] = v350.i64[0];
    *((void *)&v2981[2] + 1) = v1206;
    v350.i32[1] = v2871.i32[1];
    long long v2960 = v2870;
    float32x4_t v2961 = v2871;
    *(float *)&long long v2962 = v2872;
    BOOL v1612 = v1608 <= v1607 || v1611 > v1610;
    unint64_t v1613 = 2 * (v1611 <= v1610);
    v1614 = (float *)((unint64_t)&v2960 & 0xFFFFFFFFFFFFFFFBLL | (4 * v1612));
    float *v1614 = *((float *)&v2870 + v1612) / *((float *)&v2870 + v1609);
    v1615 = (float *)((unint64_t)&v2960 & 0xFFFFFFFFFFFFFFF3 | (4 * (v1609 & 3)));
    v1616 = (float *)((unint64_t)&v2960 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v1613 >> 1) & 1)));
    float v1617 = *v1616 / *v1615;
    float *v1616 = v1617;
    uint64_t v1618 = 16;
    if (!v1612) {
      uint64_t v1618 = 12;
    }
    float v1619 = *v1614;
    *(float *)((char *)&v2960 + v1618) = *(float *)((char *)&v2960 + v1618)
                                       - (float)(*((float *)&v2960 + v1609 + 3) * *v1614);
    float v1620 = *((float *)&v2960 + v1609 + 3);
    *(void *)&v2981[3] = v412.i64[0];
    uint64_t v1621 = 4 * (v1613 + 3);
    float v1622 = *(float *)((char *)&v2960 + v1621) - (float)(v1620 * v1617);
    *(float *)((char *)&v2960 + v1621) = v1622;
    uint64_t v1623 = 24;
    if (v1612) {
      uint64_t v1623 = 28;
    }
    *(float *)((char *)&v2960 + v1623) = *(float *)((char *)&v2960 + v1623)
                                       - (float)(*((float *)&v2960 + v1609 + 6) * v1619);
    *((float *)&v2960 + (v1613 + 6)) = *((float *)&v2960 + (v1613 + 6))
                                                   - (float)(*((float *)&v2960 + v1609 + 6) * v1617);
    float v1624 = fabsf(v1622);
    float v1625 = fabsf(*(float *)((char *)&v2960 + v1618));
    if (v1624 <= v1625) {
      uint64_t v1626 = v1612;
    }
    else {
      uint64_t v1626 = v1613;
    }
    if (v1624 <= v1625) {
      uint64_t v1627 = v1613;
    }
    else {
      uint64_t v1627 = v1612;
    }
    uint64_t v1628 = 4 * (v1626 + 3);
    float v1629 = *(float *)((char *)&v2960 + v1628);
    uint64_t v1630 = 4 * (v1627 + 3);
    float v1631 = *(float *)((char *)&v2960 + v1630);
    *((void *)&v2981[3] + 1) = v1208;
    float v1632 = v1631 / v1629;
    *(float *)((char *)&v2960 + v1630) = v1632;
    uint64_t v1633 = 4 * (v1626 + 6);
    float v1634 = *(float *)((char *)&v2960 + v1633);
    uint64_t v1635 = 4 * (v1627 + 6);
    float v1636 = *(float *)((char *)&v2960 + v1635);
    *(void *)&v2981[4] = v1205;
    float v1637 = v1636 - (float)(v1634 * v1632);
    *(float *)((char *)&v2960 + v1635) = v1637;
    float v1638 = *((double *)v2981 + v1609);
    float v1639 = *((double *)v2981 + v1626);
    float v1640 = *(float *)((unint64_t)&v2960 | (4 * v1626));
    float v1641 = v1639 - (float)(v1640 * v1638);
    v351.i64[0] = *((void *)v2981 + v1627);
    v351.f32[0] = *(double *)v351.i64;
    float v1642 = *(float *)((unint64_t)&v2960 | (4 * v1627));
    float v1643 = v1082 / v1637;
    float v1644 = *((float *)&v2960 + v1609 + 6);
    float v1645 = (float)(v351.f32[0] - (float)((float)(v1641 * v1632) + (float)(v1642 * v1638))) * (float)(v1082 / v1637);
    v351.i32[0] = *(_DWORD *)((char *)&v2960 + v1633);
    float v1646 = v1082 / *(float *)((char *)&v2960 + v1628);
    float v1647 = (float)(v1641 - (float)(v1645 * v351.f32[0])) * v1646;
    float v1648 = *((float *)&v2960 + v1609 + 3);
    float v1649 = v1082 / *v1615;
    float v1650 = (float)(v1638 - (float)((float)(v1645 * v1644) + (float)(v1647 * v1648))) * v1649;
    float v1651 = *((double *)&v2981[1] + v1609 + 1);
    float v1652 = *((double *)v2981 + (v1626 + 3));
    float v1653 = v1652 - (float)(v1640 * v1651);
    float v1654 = *((double *)v2981 + (v1627 + 3));
    float v1655 = (float)(v1654 - (float)((float)(v1642 * v1651) + (float)(v1653 * v1632))) * v1643;
    float v1656 = (float)(v1653 - (float)(v1655 * v351.f32[0])) * v1646;
    float v1657 = (float)(v1651 - (float)((float)(v1655 * v1644) + (float)(v1656 * v1648))) * v1649;
    float v1658 = *((double *)&v2981[3] + v1609);
    float v1659 = *((double *)v2981 + (v1626 + 6));
    float v1660 = v1659 - (float)(v1640 * v1658);
    float v1661 = *((double *)v2981 + (v1627 + 6));
    v412.f32[0] = (float)(v1661 - (float)((float)(v1642 * v1658) + (float)(v1660 * v1632))) * v1643;
    float v1662 = (float)(v1660 - (float)(v412.f32[0] * v351.f32[0])) * v1646;
    v351.f32[0] = (float)(v1658 - (float)((float)(v412.f32[0] * v1644) + (float)(v1662 * v1648))) * v1649;
    *(float *)&long long v2870 = (float)((float)(v2803 * v1650) + (float)(v2804 * v1657)) + (float)(v2805 * v351.f32[0]);
    *((float *)&v2870 + 1) = (float)((float)(v2803 * v1647) + (float)(v2804 * v1656)) + (float)(v2805 * v1662);
    v2871.f32[2] = (float)((float)(v2809 * v1650) + (float)(v2810 * v1657)) + (float)(v2811 * v351.f32[0]);
    v2871.f32[3] = (float)((float)(v2809 * v1647) + (float)(v2810 * v1656)) + (float)(v2811 * v1662);
    *((float *)&v2870 + 2) = (float)((float)(v2803 * v1645) + (float)(v2804 * v1655)) + (float)(v2805 * v412.f32[0]);
    *((float *)&v2870 + 3) = (float)((float)(v2806 * v1650) + (float)(v2807 * v1657)) + (float)(v2808 * v351.f32[0]);
    v2871.f32[0] = (float)((float)(v2806 * v1647) + (float)(v2807 * v1656)) + (float)(v2808 * v1662);
    v2871.f32[1] = (float)((float)(v2806 * v1645) + (float)(v2807 * v1655)) + (float)(v2808 * v412.f32[0]);
    float v2872 = (float)((float)(v2809 * v1645) + (float)(v2810 * v1655)) + (float)(v2811 * v412.f32[0]);
    _Q1 = v2871;
    float v2817 = v2872;
    float32x4_t v2816 = v2871;
    long long v2815 = v2870;
    uint64_t v527 = 3;
LABEL_412:
    uint64_t v2769 = v527;
    float32x4_t v528 = (float32x4_t)vdupq_n_s32(0x25800000u);
    float32x4_t v2721 = v528;
    v2679 = (void *)v527;
    if ((int)v526 < 1)
    {
      int v2794 = v527;
      unsigned int v2795 = v526;
    }
    else
    {
      uint64_t v529 = 0;
      unint64_t v530 = &v2842;
      float v531 = v2836;
      uint64_t v532 = v2849;
      do
      {
        *((_DWORD *)v531 + 2) = v532[2];
        v528.i32[0] = v532[5];
        _Q1.f32[0] = fabsf(v528.f32[0]);
        *(float *)&v2819[4 * v529 - 4] = _Q1.f32[0];
        *(void *)float v531 = *(void *)v532;
        v531 += 12;
        uint64_t v533 = *(void *)(v532 + 3);
        ++v529;
        v530[2] = v528.f32[0];
        *(void *)unint64_t v530 = v533;
        v530 += 3;
        uint64_t v532 = (_DWORD *)((char *)v532 + v2667);
      }
      while (v526 != v529);
      int v2794 = v527;
      unsigned int v2795 = v526;
      uint64_t v2740 = v527;
      if ((int)v527 >= 1)
      {
        uint64_t v534 = 0;
        uint64_t v535 = 0;
        uint64_t v2736 = 4 * v527;
        do
        {
          uint64_t v2760 = v534;
          uint64_t v2753 = v535;
          uint64_t v536 = v535 * v2740;
          v2746 = &v2847[v535 * v2740];
          bzero(v2746, v2736);
          LODWORD(v527) = v2679;
          uint64_t v537 = v536 + 1;
          uint64_t v538 = v536 + 2;
          unint64_t v526 = v2779;
          float v539 = (float32x4_t *)(v2746 + 3);
          v528.f32[0] = *v2746;
          int v540 = (char *)&v2815 + 8;
          int v541 = v2760;
          uint64_t v542 = v2769;
          do
          {
            _Q1.i32[0] = *(_DWORD *)&v2836[4 * v541];
            v412.i32[0] = *((_DWORD *)v540 - 2);
            v2847[v537] = v2847[v537] + (float)(*((float *)v540 - 1) * _Q1.f32[0]);
            v2847[v538] = v2847[v538] + (float)(*(float *)v540 * _Q1.f32[0]);
            if (v2679 != 3)
            {
              float32x4_t v350 = vmlaq_n_f32(*v539, *(float32x4_t *)(v540 + 4), _Q1.f32[0]);
              *float v539 = v350;
            }
            v528.f32[0] = v528.f32[0] + (float)(v412.f32[0] * _Q1.f32[0]);
            ++v541;
            v540 += v2736;
            --v542;
          }
          while (v542);
          float *v2746 = v528.f32[0];
          uint64_t v535 = v2753 + 1;
          uint64_t v534 = v2760 + 3;
        }
        while (v2753 + 1 != v2779);
      }
    }
    float v543 = 1.0;
    unint64_t n = (double *)v2790;
    if (!v526 || !v527)
    {
      int v573 = v527;
      if ((int)v527 * (int)v526 < 1)
      {
        if ((int)v526 >= 1) {
          goto LABEL_451;
        }
      }
      else
      {
        bzero(v2832, 4 * (v527 * v526));
        unint64_t n = (double *)v2790;
        int v573 = (int)v2679;
        if ((int)v526 >= 1) {
          goto LABEL_451;
        }
      }
LABEL_483:
      unsigned int v598 = 0;
      int v2754 = 0;
      v574.i32[1] = 16843009;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      float32x4_t v576 = v2721;
      goto LABEL_518;
    }
    float v545 = fabsf(*(float *)&v2815);
    float v546 = fabsf(*((float *)&v2815 + 1));
    if (v546 <= v545) {
      float v547 = v545;
    }
    else {
      float v547 = v546;
    }
    float v548 = fabsf(*((float *)&v2815 + 2));
    if (v548 <= v547) {
      uint64_t v549 = v546 > v545;
    }
    else {
      uint64_t v549 = 2;
    }
    v2972[0] = v2815;
    v550.i32[1] = v2816.i32[1];
    v2972[1] = v2816;
    *(float *)&v2972[2] = v2817;
    uint64_t v551 = v546 <= v545 || v548 > v547;
    unint64_t v552 = 2 * (v548 <= v547);
    float32x2_t v553 = (float *)((unint64_t)v2972 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v551 & 1)));
    *float32x2_t v553 = *(float *)((unint64_t)&v2815 | (4 * v551)) / *(float *)((unint64_t)&v2815 | (4 * v549));
    uint64_t v554 = (float *)((unint64_t)v2972 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v552 >> 1) & 1)));
    float v555 = *v554 / *(float *)((unint64_t)v2972 & 0xFFFFFFFFFFFFFFF3 | (4 * (v549 & 3)));
    *uint64_t v554 = v555;
    float v556 = *v553;
    uint64_t v557 = 16;
    if (!v551) {
      uint64_t v557 = 12;
    }
    *(float *)((char *)v2972 + v557) = *(float *)((char *)v2972 + v557)
                                     - (float)(*((float *)v2972 + (v549 + 3)) * v556);
    uint64_t v558 = 4 * (v552 + 3);
    float v559 = *(float *)((char *)v2972 + v558) - (float)(*((float *)v2972 + (v549 + 3)) * v555);
    *(float *)((char *)v2972 + v558) = v559;
    uint64_t v560 = 24;
    if (v551) {
      uint64_t v560 = 28;
    }
    *(float *)((char *)v2972 + v560) = *(float *)((char *)v2972 + v560)
                                     - (float)(*((float *)v2972 + (v549 + 6)) * v556);
    *((float *)v2972 + (v552 + 6)) = *((float *)v2972 + (v552 + 6))
                                                 - (float)(*((float *)v2972 + (v549 + 6)) * v555);
    float v561 = fabsf(v559);
    float v562 = fabsf(*(float *)((char *)v2972 + v557));
    if (v561 <= v562) {
      uint64_t v563 = v551;
    }
    else {
      uint64_t v563 = v552;
    }
    if (v561 <= v562) {
      uint64_t v551 = v552;
    }
    else {
      uint64_t v551 = v551;
    }
    uint64_t v564 = (v563 + 3);
    uint64_t v565 = 4 * (v551 + 3);
    *(float *)v550.i32 = *(float *)((char *)v2972 + v565) / *((float *)v2972 + v564);
    *(_DWORD *)((char *)v2972 + v565) = v550.i32[0];
    uint64_t v566 = (v563 + 6);
    uint64_t v567 = 4 * (v551 + 6);
    float v568 = *(float *)((char *)v2972 + v567) - (float)(*((float *)v2972 + v566) * *(float *)v550.i32);
    *(float *)((char *)v2972 + v567) = v568;
    if ((int)v526 >= 1)
    {
      _Q1.i32[0] = *(_DWORD *)((unint64_t)v2972 | (4 * v563));
      float v569 = *(float *)((unint64_t)v2972 | (4 * v551));
      v352.i32[0] = *(_DWORD *)((unint64_t)v2972 | (4 * v549));
      float v570 = *((float *)v2972 + (v549 + 6));
      v350.i32[0] = *((_DWORD *)v2972 + v566);
      v359.i32[0] = *((_DWORD *)v2972 + v564);
      v351.i32[0] = *((_DWORD *)v2972 + (v549 + 3));
      float v571 = 1.0 / v568;
      if (v526 > 4)
      {
        float32x4_t v599 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
        float32x4_t v600 = (float32x4_t)vdupq_lane_s32(v550, 0);
        float32x4_t v601 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v350.f32, 0);
        float32x4_t v602 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v351.f32, 0);
        uint8x16_t v603 = &v2842 + v551;
        __asm { FMOV            V22.4S, #1.0 }
        LODWORD(v605) = vdivq_f32(_Q22, v359).u32[0];
        LODWORD(v606) = vdivq_f32(_Q22, v352).u32[0];
        int32x4_t v607 = &v2842 + v563;
        uint64_t v608 = &v2842 + v549;
        unint64_t v609 = (float *)v2981;
        unint64_t v610 = v2655;
        do
        {
          unsigned long long v611 = (unsigned __int128)vld3q_f32(v608);
          v608 += 12;
          unsigned long long v612 = (unsigned __int128)vld3q_f32(v607);
          v607 += 12;
          unsigned long long v613 = (unsigned __int128)vld3q_f32(v603);
          v603 += 12;
          float32x4_t v614 = vmlsq_f32((float32x4_t)v612, v599, (float32x4_t)v611);
          v2996.val[2] = vmulq_n_f32(vsubq_f32((float32x4_t)v613, vmlaq_f32(vmulq_n_f32((float32x4_t)v611, v569), v600, v614)), v571);
          v2996.val[1] = vmulq_n_f32(vmlsq_f32(v614, v601, v2996.val[2]), v605);
          v2996.val[0] = vmulq_n_f32(vsubq_f32((float32x4_t)v611, vmlaq_f32(vmulq_n_f32(v2996.val[2], v570), v602, v2996.val[1])), v606);
          vst3q_f32(v609, v2996);
          v609 += 12;
          v610 -= 4;
        }
        while (v610);
        unint64_t v572 = v2655;
        float v543 = 1.0;
      }
      else
      {
        unint64_t v572 = 0;
      }
      float v615 = v543 / v359.f32[0];
      unint64_t v616 = v526 - v572;
      uint64_t v617 = 12 * v572;
      uint64_t v618 = &v2842 + 3 * v572 + v549;
      float32x2_t v619 = &v2842 + 3 * v572 + v563;
      float32x2_t v620 = (float *)v2981 + 3 * v572 + 2;
      uint64_t v621 = (float *)((char *)&v2842 + 4 * v551 + v617);
      float v622 = v543 / v352.f32[0];
      do
      {
        float v623 = *v618;
        v618 += 3;
        float v624 = v623;
        float v625 = *v619;
        v619 += 3;
        float v626 = v625 - (float)(v624 * _Q1.f32[0]);
        float v627 = *v621;
        v621 += 3;
        float v628 = (float)(v627 - (float)((float)(v624 * v569) + (float)(v626 * *(float *)v550.i32))) * v571;
        float v629 = (float)(v626 - (float)(v628 * v350.f32[0])) * v615;
        *(v620 - 1) = v629;
        *float32x2_t v620 = v628;
        *(v620 - 2) = (float)(v624 - (float)((float)(v628 * v570) + (float)(v629 * v351.f32[0]))) * v622;
        v620 += 3;
        --v616;
      }
      while (v616);
    }
    memcpy(v2832, v2981, 12 * v2779);
    int v573 = 3;
    unint64_t n = (double *)v2790;
    if ((int)v526 < 1) {
      goto LABEL_483;
    }
LABEL_451:
    v574.i32[1] = 16843009;
    v575.i64[0] = 0x101010101010101;
    v575.i64[1] = 0x101010101010101;
    float32x4_t v576 = v2721;
    if (v526 < 8)
    {
      uint64_t v577 = 0;
      goto LABEL_462;
    }
    if (v526 >= 0x20)
    {
      uint64_t v579 = (float32x4_t *)v2822;
      unsigned int v580 = (float32x4_t *)v2791;
      uint64_t v581 = v2779 & 0xFFFFFFE0;
      do
      {
        float32x4_t v350 = *v579;
        float32x4_t v351 = v579[1];
        float32x4_t v352 = v579[3];
        float32x4_t v528 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v579[-4], v2721), (int16x8_t)vcgtq_f32(v579[-3], v2721)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v579[-2], v2721), (int16x8_t)vcgtq_f32(v579[-1], v2721))), v575);
        float32x4_t v412 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v579, v2721), (int16x8_t)vcgtq_f32(v351, v2721));
        _Q1 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)v412, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v579[2], v2721), (int16x8_t)vcgtq_f32(v352, v2721))), v575);
        v580[-1] = v528;
        *unsigned int v580 = _Q1;
        v580 += 2;
        v579 += 8;
        v581 -= 32;
      }
      while (v581);
      if (v526 != v2669)
      {
        uint64_t v577 = v2779 & 0xFFFFFFE0;
        uint64_t v578 = v577;
        if ((v2779 & 0x18) == 0) {
          goto LABEL_462;
        }
        goto LABEL_459;
      }
    }
    else
    {
      uint64_t v578 = 0;
LABEL_459:
      uint64_t v582 = v578 - (v2779 & 0xFFFFFFF8);
      unint64_t v583 = &v2790[v578];
      BOOL v584 = (float32x4_t *)&v2819[4 * v578 - 4];
      do
      {
        float32x4_t v585 = *v584;
        float32x4_t v586 = v584[1];
        v584 += 2;
        _Q1 = (float32x4_t)vcgtq_f32(v586, v2721);
        float32x4_t v528 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v585, v2721), (int16x8_t)_Q1);
        *(int8x8_t *)v528.f32 = vand_s8(vmovn_s16((int16x8_t)v528), (int8x8_t)0x101010101010101);
        *v583++ = v528.i64[0];
        v582 += 8;
      }
      while (v582);
      uint64_t v577 = v2779 & 0xFFFFFFF8;
      if (v526 != v2670)
      {
LABEL_462:
        uint64_t v587 = v526 - v577;
        uint64_t v588 = &v2790[v577];
        float32x2_t v589 = (float *)&v2819[4 * v577 - 4];
        do
        {
          float v590 = *v589++;
          v528.f32[0] = v590;
          _Q1.i32[0] = 629145600;
          *v588++ = v590 > 2.2204e-16;
          --v587;
        }
        while (v587);
      }
    }
    int v591 = 0;
    int v592 = 0;
    while (2)
    {
      int v593 = v2790[v591];
      if (!v2790[v591])
      {
        ++v591;
        if (v593) {
          goto LABEL_470;
        }
LABEL_466:
        if (v591 >= (int)v526) {
          goto LABEL_470;
        }
        continue;
      }
      break;
    }
    __src[v592++] = v591 + 1;
    if (v592 < (int)v526)
    {
      ++v591;
      goto LABEL_466;
    }
LABEL_470:
    int v2770 = v573;
    if (v526 != 1)
    {
      if (v592 < 1) {
        goto LABEL_476;
      }
      uint64_t v595 = v592 & ~(v592 >> 31);
      int v597 = v592 & ~(v592 >> 31);
      memcpy(&__dst, __src, 4 * v595);
      if (v595 < 2)
      {
        uint64_t v594 = 0;
        int v2761 = 1;
        unsigned int k = v597;
        goto LABEL_487;
      }
      uint64_t v594 = v595 & 0x7FFFFFFE;
      uint64_t v630 = v2797;
      uint64_t v631 = v2819;
      uint64_t v632 = v594;
      do
      {
        int v633 = *((_DWORD *)&v2842 + 3 * *v630 - 1);
        *(v631 - 1) = *((_DWORD *)&v2842 + 3 * *(v630 - 1) - 1);
        *uint64_t v631 = v633;
        v631 += 2;
        v630 += 2;
        v632 -= 2;
      }
      while (v632);
      int v2761 = 0;
      for (unsigned int k = v597; v595 != v594; ++v594)
LABEL_487:
        *(float *)&v2819[4 * v594 - 4] = *(&v2842 + 3 * *(_DWORD *)&v2797[4 * v594 - 4] - 1);
      if (k > 7)
      {
        uint64_t v634 = v595 & 0x7FFFFFF8;
        int v635 = v2979;
        uint64_t v636 = (float32x4_t *)v2820;
        uint64_t v637 = v634;
        do
        {
          float32x4_t v528 = v636[-1];
          v2988.val[0] = *v636;
          _Q1 = v528;
          float32x4_t v638 = v528;
          v2988.val[1] = *v636;
          v2988.val[2] = *v636;
          float32x2_t v639 = v635 + 24;
          vst3q_f32(v635, *(float32x4x3_t *)(&_Q1 - 1));
          float32x2_t v640 = v635 + 12;
          vst3q_f32(v640, v2988);
          v636 += 2;
          int v635 = v639;
          v637 -= 8;
        }
        while (v637);
        if (v634 == v595)
        {
LABEL_495:
          uint64_t v645 = 0;
          uint64_t v646 = 0;
          do
          {
            int v647 = 3 * *(_DWORD *)&v2797[4 * v646 - 4];
            v528.i64[0] = *(void *)&v2979[v645];
            v528.f32[2] = v2979[v645 + 2];
            _Q1.f32[0] = *(&v2842 + v647 - 3);
            _Q1.f32[1] = *(&v2842 + v647 - 2);
            _Q1.f32[2] = *(&v2842 + v647 - 1);
            float32x4_t v528 = vdivq_f32(_Q1, v528);
            *(_DWORD *)&v2834[v645 * 4 + 8] = v528.i32[2];
            *(void *)&v2834[v645 * 4] = v528.i64[0];
            ++v646;
            v645 += 3;
          }
          while (v595 != v646);
          unsigned int v648 = k;
          memcpy(&v2842, v2834, 12 * k);
          unsigned int v598 = v648;
          if (v648 <= 7)
          {
            uint64_t v649 = 0;
            v574.i32[1] = 16843009;
            v575.i64[0] = 0x101010101010101;
            v575.i64[1] = 0x101010101010101;
            unint64_t n = (double *)v2790;
            float32x4_t v576 = v2721;
            int v573 = v2770;
            goto LABEL_508;
          }
          v574.i32[1] = 16843009;
          v575.i64[0] = 0x101010101010101;
          v575.i64[1] = 0x101010101010101;
          unint64_t n = (double *)v2790;
          float32x4_t v576 = v2721;
          int v573 = v2770;
          if (v648 >= 0x20)
          {
            uint64_t v649 = v595 & 0x7FFFFFE0;
            int v650 = (int8x16x4_t *)v2798;
            uint64_t v651 = (float32x4_t *)v2793;
            uint64_t v652 = v649;
            do
            {
              int8x16_t v653 = v650[-1].val[0];
              int8x16_t v654 = v650[-1].val[1];
              float32x4_t v412 = (float32x4_t)v650[-1].val[2];
              int8x16_t v655 = v650[-1].val[3];
              v350.i32[1] = 471340048;
              float32x4_t v528 = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)(&v412 - 2), (int8x16_t)xmmword_259120320);
              _Q1 = (float32x4_t)vqtbl4q_s8(*v650, (int8x16_t)xmmword_259120320);
              v651[-1] = v528;
              *uint64_t v651 = _Q1;
              v651 += 2;
              v650 += 2;
              v652 -= 32;
            }
            while (v652);
            if (v649 == v595) {
              goto LABEL_510;
            }
            if ((v595 & 0x18) == 0)
            {
LABEL_508:
              uint64_t v661 = v595 - v649;
              uint64_t v662 = &v2791[v649 + 96];
              uint64_t v663 = (int *)&v2797[4 * v649 - 4];
              do
              {
                int v664 = *v663++;
                *v662++ = v664;
                --v661;
              }
              while (v661);
              goto LABEL_510;
            }
          }
          else
          {
            uint64_t v649 = 0;
          }
          uint64_t v656 = v649;
          uint64_t v649 = v595 & 0x7FFFFFF8;
          uint64_t v657 = v656 - v649;
          int v658 = &v2791[v656 + 96];
          int v659 = (float32x4_t *)&v2797[4 * v656 - 4];
          do
          {
            float32x4_t v660 = *v659;
            _Q1 = v659[1];
            v659 += 2;
            float32x4_t v412 = (float32x4_t)xmmword_259120330;
            float32x4_t v528 = (float32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&_Q1 - 1), (int8x16_t)xmmword_259120330);
            *v658++ = v528.i64[0];
            v657 += 8;
          }
          while (v657);
          if (v649 != v595) {
            goto LABEL_508;
          }
LABEL_510:
          if (v2761)
          {
            uint64_t v665 = 0;
          }
          else
          {
            uint64_t v665 = v595 & 0x7FFFFFFE;
            int v666 = v2792;
            uint64_t v667 = v665;
            do
            {
              int v668 = &v2842 + 3 * *v666;
              *(&v2842 + 3 * *(v666 - 1) - 1) = 1.0;
              *(v668 - 1) = 1.0;
              v666 += 2;
              v667 -= 2;
            }
            while (v667);
            if (v665 == v595) {
              goto LABEL_517;
            }
          }
          uint64_t v669 = v595 - v665;
          uint64_t v670 = &v2791[v665 + 96];
          do
          {
            int v671 = *v670++;
            *(&v2842 + 3 * v671 - 1) = 1.0;
            --v669;
          }
          while (v669);
LABEL_517:
          int v2754 = 1;
          goto LABEL_518;
        }
      }
      else
      {
        uint64_t v634 = 0;
      }
      uint64_t v641 = v595 - v634;
      uint64_t v642 = (int *)&v2819[4 * v634 - 4];
      uint64_t v643 = &v2979[3 * v634 + 2];
      do
      {
        int v644 = *v642++;
        *((_DWORD *)v643 - 2) = v644;
        *((_DWORD *)v643 - 1) = v644;
        *(_DWORD *)uint64_t v643 = v644;
        v643 += 3;
        --v641;
      }
      while (v641);
      goto LABEL_495;
    }
    if (v592)
    {
      uint64_t v594 = 0;
      int __dst = __src[0];
      int v2761 = 1;
      uint64_t v595 = 1;
      unsigned int k = 1;
      goto LABEL_487;
    }
LABEL_476:
    unsigned int v598 = 0;
    int v2754 = 0;
LABEL_518:
    unsigned int v2762 = v598;
    uint64_t v672 = v2794;
    uint64_t v673 = v2795;
    uint64_t v674 = v2794;
    int v2771 = v573;
    if ((int)v2795 < 1) {
      goto LABEL_555;
    }
    if (v2795 < 8 || v2794 != 1)
    {
      uint64_t v676 = 0;
      goto LABEL_527;
    }
    uint64_t v676 = v2795 & 0xFFFFFFF8;
    v677 = (float32x4_t *)v2848;
    uint64_t v678 = (float32x4_t *)v2820;
    uint64_t v679 = v676;
    do
    {
      float32x4_t v528 = vabsq_f32(v677[-1]);
      _Q1 = vabsq_f32(*v677);
      v678[-1] = v528;
      *uint64_t v678 = _Q1;
      v678 += 2;
      v677 += 2;
      v679 -= 8;
    }
    while (v679);
    if (v676 != v673)
    {
LABEL_527:
      uint64_t v680 = (float *)&v2819[4 * v676 - 4];
      uint64_t v681 = v673 - v676;
      int v682 = v674 + v674 * v676 - 1;
      do
      {
        *v680++ = fabsf(v2847[v682]);
        v682 += v674;
        --v681;
      }
      while (v681);
    }
    if (v673 <= 7)
    {
      uint64_t v683 = 0;
      goto LABEL_540;
    }
    if (v673 >= 0x20)
    {
      uint64_t v683 = v673 & 0xFFFFFFE0;
      uint64_t v684 = (float32x4_t *)v2822;
      uint64_t v685 = (float32x4_t *)v2791;
      uint64_t v686 = v683;
      do
      {
        float32x4_t v350 = *v684;
        float32x4_t v351 = v684[1];
        float32x4_t v352 = v684[3];
        float32x4_t v528 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v684[-4], v576), (int16x8_t)vcgtq_f32(v684[-3], v576)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v684[-2], v576), (int16x8_t)vcgtq_f32(v684[-1], v576))), v575);
        float32x4_t v412 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v684, v576), (int16x8_t)vcgtq_f32(v351, v576));
        _Q1 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)v412, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v684[2], v576), (int16x8_t)vcgtq_f32(v352, v576))), v575);
        v685[-1] = v528;
        *uint64_t v685 = _Q1;
        v685 += 2;
        v684 += 8;
        v686 -= 32;
      }
      while (v686);
      if (v683 != v673)
      {
        if ((v673 & 0x18) != 0) {
          goto LABEL_537;
        }
        goto LABEL_540;
      }
    }
    else
    {
      uint64_t v683 = 0;
LABEL_537:
      uint64_t v687 = v683;
      uint64_t v683 = v673 & 0xFFFFFFF8;
      uint64_t v688 = v687 - v683;
      int v689 = &v2790[v687];
      float32x4_t v690 = (float32x4_t *)&v2819[4 * v687 - 4];
      do
      {
        float32x4_t v691 = *v690;
        float32x4_t v692 = v690[1];
        v690 += 2;
        _Q1 = (float32x4_t)vcgtq_f32(v692, v576);
        float32x4_t v528 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v691, v576), (int16x8_t)_Q1);
        *(int8x8_t *)v528.f32 = vand_s8(vmovn_s16((int16x8_t)v528), (int8x8_t)0x101010101010101);
        *v689++ = v528.i64[0];
        v688 += 8;
      }
      while (v688);
      if (v683 != v673)
      {
LABEL_540:
        uint64_t v693 = v673 - v683;
        uint64_t v694 = &v2790[v683];
        uint64_t v695 = (float *)&v2819[4 * v683 - 4];
        do
        {
          float v696 = *v695++;
          v528.f32[0] = v696;
          _Q1.i32[0] = 629145600;
          *v694++ = v696 > 2.2204e-16;
          --v693;
        }
        while (v693);
      }
    }
    int v697 = 0;
    uint64_t v698 = 0;
    while (2)
    {
      int v699 = v2790[v697];
      if (!v2790[v697])
      {
        ++v697;
        if (v699) {
          goto LABEL_549;
        }
LABEL_544:
        if (v697 >= (int)v673) {
          goto LABEL_549;
        }
        continue;
      }
      break;
    }
    __src[(int)v698] = v697 + 1;
    BOOL v700 = (int)v698 + 1 >= (int)v673;
    if ((int)v698 + 1 < (int)v673) {
      ++v697;
    }
    uint64_t v698 = (v698 + 1);
    if (!v700) {
      goto LABEL_544;
    }
LABEL_549:
    if (v673 == 1)
    {
      if (v698)
      {
        uint64_t v701 = 0;
        int __dst = __src[0];
        uint64_t v698 = 1;
        uint64_t v702 = 1;
        int v2741 = 1;
        goto LABEL_562;
      }
LABEL_555:
      int64_t v703 = (const int *)(char)v674;
      if (v674 == v703)
      {
        unsigned int v2795 = 0;
      }
      else
      {
        binary_expand_op(v2847, (unsigned int *)&v2794, &__dst, 0, v2979, v703, 0, *(double *)v528.i64, *(double *)_Q1.i64, v412);
        int v573 = v2771;
        float32x4_t v576 = v2721;
        unint64_t n = (double *)v2790;
        v575.i64[0] = 0x101010101010101;
        v575.i64[1] = 0x101010101010101;
        v574.i32[1] = 16843009;
      }
      unint64_t v704 = v2779;
      float32x4_t v705 = v2678;
      goto LABEL_609;
    }
    if ((int)v698 < 1) {
      goto LABEL_555;
    }
    memcpy(&__dst, __src, 4 * v698);
    if (v698 == 1)
    {
      uint64_t v701 = 0;
      int v2741 = 1;
      v574.i32[1] = 16843009;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      unint64_t n = (double *)v2790;
      float32x4_t v576 = v2721;
      int v573 = v2771;
      uint64_t v702 = 1;
      goto LABEL_562;
    }
    uint64_t v702 = v698;
    uint64_t v701 = v698 & 0xFFFFFFFE;
    v706 = v2797;
    uint64_t v707 = v2826;
    uint64_t v708 = v701;
    do
    {
      v528.f32[0] = v2847[*(v706 - 1) * (int)v674 - 1];
      _Q1.f32[0] = v2847[*v706 * (int)v674 - 1];
      *(v707 - 1) = v528.i32[0];
      *uint64_t v707 = _Q1.i32[0];
      v707 += 2;
      v706 += 2;
      v708 -= 2;
    }
    while (v708);
    int v2741 = 0;
    v574.i32[1] = 16843009;
    v575.i64[0] = 0x101010101010101;
    v575.i64[1] = 0x101010101010101;
    unint64_t n = (double *)v2790;
    float32x4_t v576 = v2721;
    int v573 = v2771;
    if (v701 != v698)
    {
      do
      {
LABEL_562:
        v528.f32[0] = v2847[*(_DWORD *)&v2797[4 * v701 - 4] * (int)v672 - 1];
        *(float32_t *)&v2826[4 * v701++ - 4] = v528.f32[0];
      }
      while (v702 != v701);
    }
    if ((int)v674 >= 1)
    {
      uint64_t v709 = 0;
      uint64_t v710 = 0;
      uint64_t v711 = (float32x4_t *)v2980;
      do
      {
        v528.f32[0] = *(float32_t *)&v2826[4 * v710 - 4];
        if (v672 >= 8)
        {
          _Q1 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
          v713 = v711;
          uint64_t v714 = v674 & 0xFFFFFFF8;
          do
          {
            v713[-1] = _Q1;
            float32x4_t *v713 = _Q1;
            v713 += 2;
            v714 -= 8;
          }
          while (v714);
          uint64_t v712 = v674 & 0x7FFFFFF8;
          if ((v674 & 0xFFFFFFF8) == v674) {
            goto LABEL_565;
          }
        }
        else
        {
          uint64_t v712 = 0;
        }
        uint64_t v715 = v674 - v712;
        uint64_t v716 = &v2979[v712 + v709];
        do
        {
          *v716++ = v528.f32[0];
          --v715;
        }
        while (v715);
LABEL_565:
        ++v710;
        uint64_t v711 = (float32x4_t *)((char *)v711 + 4 * v674);
        v709 += v674;
      }
      while (v710 != v702);
    }
    uint64_t v2747 = v702;
    int v717 = (const int *)(char)v674;
    if (v672 != v717)
    {
      binary_expand_op(v2847, (unsigned int *)&v2794, &__dst, (const int *)v698, v2979, v717, v698, *(double *)v528.i64, *(double *)_Q1.i64, v412);
      int v573 = v2771;
      float32x4_t v576 = v2721;
      unint64_t n = (double *)v2790;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      v574.i32[1] = 16843009;
      float32x4_t v705 = v2678;
      uint64_t v723 = v2747;
      goto LABEL_589;
    }
    uint64_t v718 = 0;
    uint64_t v719 = 0;
    uint64_t v720 = 4 * v672;
    uint64_t v721 = (float32x4_t *)v2980;
    v722 = (float32x4_t *)&v2835;
    float32x4_t v705 = v2678;
    uint64_t v723 = v702;
    while (2)
    {
      if ((int)v674 >= 1)
      {
        uint64_t v724 = (*(_DWORD *)&v2797[4 * v719 - 4] - 1) * (int)v674;
        if (v672 < 8)
        {
          uint64_t v725 = 0;
          goto LABEL_583;
        }
        float v726 = v721;
        uint64_t v727 = v722;
        uint64_t v728 = v674 & 0xFFFFFFF8;
        float v729 = (float32x4_t *)&v2848[v724];
        do
        {
          float32x4_t v412 = v726[-1];
          float32x4_t v528 = vdivq_f32(v729[-1], v412);
          _Q1 = vdivq_f32(*v729, *v726);
          v727[-1] = v528;
          *uint64_t v727 = _Q1;
          v729 += 2;
          v727 += 2;
          v726 += 2;
          v728 -= 8;
        }
        while (v728);
        uint64_t v725 = v674 & 0x7FFFFFF8;
        if ((v674 & 0xFFFFFFF8) != v674)
        {
LABEL_583:
          uint64_t v730 = v674 - v725;
          uint64_t v731 = v725 + v718;
          uint64_t v732 = (float *)&v2834[v731 * 4];
          double v733 = &v2979[v731];
          int64_t v734 = &v2847[v725 + v724];
          do
          {
            float v735 = *v734++;
            float v736 = v735;
            float v737 = *v733++;
            *v732++ = v736 / v737;
            --v730;
          }
          while (v730);
        }
      }
      ++v719;
      v722 = (float32x4_t *)((char *)v722 + v720);
      uint64_t v721 = (float32x4_t *)((char *)v721 + v720);
      v718 += v672;
      if (v719 != v2747) {
        continue;
      }
      break;
    }
    unsigned int v2795 = v698;
    if ((int)v698 * (int)v674 > 0)
    {
      memcpy(v2847, v2834, 4 * (v698 * v674));
      uint64_t v723 = v2747;
      int v573 = v2771;
      float32x4_t v576 = v2721;
      unint64_t n = (double *)v2790;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      v574.i32[1] = 16843009;
      float32x4_t v705 = v2678;
    }
LABEL_589:
    if (v698 <= 7)
    {
      uint64_t v738 = 0;
      unint64_t v704 = v2779;
      goto LABEL_600;
    }
    if (v698 >= 0x20)
    {
      uint64_t v738 = v723 & 0x7FFFFFE0;
      float v740 = (int8x16x4_t *)v2798;
      int64_t v741 = (float32x4_t *)v2793;
      uint64_t v742 = v723 & 0xFFFFFFE0;
      float v739 = &qword_259120000;
      unint64_t v704 = v2779;
      do
      {
        int8x16_t v743 = v740[-1].val[0];
        int8x16_t v744 = v740[-1].val[1];
        float32x4_t v412 = (float32x4_t)v740[-1].val[2];
        int8x16_t v745 = v740[-1].val[3];
        v350.i32[1] = 471340048;
        float32x4_t v528 = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)(&v412 - 2), (int8x16_t)xmmword_259120320);
        _Q1 = (float32x4_t)vqtbl4q_s8(*v740, (int8x16_t)xmmword_259120320);
        v741[-1] = v528;
        *int64_t v741 = _Q1;
        v741 += 2;
        v740 += 2;
        v742 -= 32;
      }
      while (v742);
      float32x4_t v705 = v2678;
      if (v738 != v723)
      {
        if ((v723 & 0x18) == 0) {
          goto LABEL_600;
        }
        goto LABEL_597;
      }
    }
    else
    {
      uint64_t v738 = 0;
      float v739 = &qword_259120000;
      unint64_t v704 = v2779;
LABEL_597:
      uint64_t v746 = v738;
      uint64_t v738 = v723 & 0xFFFFFFF8;
      uint64_t v747 = v746 - v738;
      float v748 = &v2791[v746 + 96];
      uint64_t v749 = (float32x4_t *)&v2797[4 * v746 - 4];
      do
      {
        float32x4_t v750 = *v749;
        _Q1 = v749[1];
        v749 += 2;
        float32x4_t v412 = *((float32x4_t *)v739 + 51);
        float32x4_t v528 = (float32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&_Q1 - 1), (int8x16_t)v412);
        *v748++ = v528.i64[0];
        v747 += 8;
      }
      while (v747);
      if (v738 != v723)
      {
LABEL_600:
        uint64_t v751 = v723 - v738;
        int64_t v752 = &v2791[v738 + 96];
        uint64x2_t v753 = (int *)&v2797[4 * v738 - 4];
        do
        {
          int v754 = *v753++;
          *v752++ = v754;
          --v751;
        }
        while (v751);
      }
    }
    int v755 = v2794;
    int v756 = v672 - 1;
    if (v2741)
    {
      uint64_t v757 = 0;
      goto LABEL_607;
    }
    uint64_t v757 = v723 & 0xFFFFFFFE;
    float v758 = v2792;
    uint64_t v759 = v757;
    do
    {
      int v760 = v756 + (*v758 - 1) * v755;
      v2847[v756 + (*(v758 - 1) - 1) * v755] = 1.0;
      v2847[v760] = 1.0;
      v758 += 2;
      v759 -= 2;
    }
    while (v759);
    if (v757 != v723)
    {
LABEL_607:
      uint64_t v761 = v723 - v757;
      float v762 = &v2791[v757 + 96];
      do
      {
        int v763 = *v762++;
        v2847[v756 + (v763 - 1) * v755] = 1.0;
        --v761;
      }
      while (v761);
    }
LABEL_609:
    if ((int)v704 < 1)
    {
      int v2748 = 0;
      unsigned int v773 = 0;
      goto LABEL_705;
    }
    float64x2_t v764 = (const float *)v2839;
    uint64_t v765 = (float32x4_t *)v2820;
    unint64_t v766 = v2665;
    if (v704 >= 9)
    {
      do
      {
        float v768 = v764 - 12;
        *(float32x4x3_t *)(&v412 - 2) = vld3q_f32(v768);
        *(float32x4x3_t *)(&v350 - 1) = vld3q_f32(v764);
        float32x4_t v528 = vabsq_f32(v769);
        _Q1 = vabsq_f32(v770);
        v765[-1] = v528;
        *uint64_t v765 = _Q1;
        v765 += 2;
        v764 += 24;
        v766 -= 8;
      }
      while (v766);
      unint64_t v767 = v2665;
    }
    else
    {
      unint64_t v767 = 0;
    }
    uint64_t v771 = 12 * v767 + 8;
    do
    {
      *(float *)&v2819[4 * v767++ - 4] = fabsf(*(float *)&v2836[v771]);
      v771 += 12;
    }
    while (v704 != v767);
    if (v704 <= 7)
    {
      uint64_t v772 = 0;
      goto LABEL_628;
    }
    if (v704 >= 0x20)
    {
      uint64_t v775 = (float32x4_t *)v2822;
      uint64_t v776 = (float32x4_t *)v2791;
      uint64_t v777 = v2779 & 0xFFFFFFE0;
      do
      {
        float32x4_t v350 = *v775;
        float32x4_t v351 = v775[1];
        float32x4_t v352 = v775[3];
        float32x4_t v528 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v775[-4], v576), (int16x8_t)vcgtq_f32(v775[-3], v576)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v775[-2], v576), (int16x8_t)vcgtq_f32(v775[-1], v576))), v575);
        float32x4_t v412 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v775, v576), (int16x8_t)vcgtq_f32(v351, v576));
        _Q1 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)v412, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v775[2], v576), (int16x8_t)vcgtq_f32(v352, v576))), v575);
        v776[-1] = v528;
        *uint64_t v776 = _Q1;
        v776 += 2;
        v775 += 8;
        v777 -= 32;
      }
      while (v777);
      if (v704 != v2669)
      {
        uint64_t v774 = v2779 & 0xFFFFFFE0;
        uint64_t v772 = v774;
        if ((v2779 & 0x18) == 0) {
          goto LABEL_628;
        }
        goto LABEL_625;
      }
    }
    else
    {
      uint64_t v774 = 0;
LABEL_625:
      uint64_t v778 = v774 - (v2779 & 0xFFFFFFF8);
      float v779 = &v2790[v774];
      float v780 = (float32x4_t *)&v2819[4 * v774 - 4];
      do
      {
        float32x4_t v781 = *v780;
        float32x4_t v782 = v780[1];
        v780 += 2;
        _Q1 = (float32x4_t)vcgtq_f32(v782, v576);
        float32x4_t v528 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v781, v576), (int16x8_t)_Q1);
        *(int8x8_t *)v528.f32 = vand_s8(vmovn_s16((int16x8_t)v528), (int8x8_t)0x101010101010101);
        *v779++ = v528.i64[0];
        v778 += 8;
      }
      while (v778);
      uint64_t v772 = v2779 & 0xFFFFFFF8;
      if (v704 != v2670)
      {
LABEL_628:
        uint64_t v783 = v704 - v772;
        int v784 = &v2790[v772];
        int v785 = (float *)&v2819[4 * v772 - 4];
        do
        {
          float v786 = *v785++;
          *v784++ = v786 > 2.2204e-16;
          --v783;
        }
        while (v783);
      }
    }
    int v787 = 0;
    int v788 = 0;
    while (2)
    {
      int v789 = v2790[v787];
      if (!v2790[v787])
      {
        ++v787;
        if (v789) {
          goto LABEL_636;
        }
LABEL_632:
        if (v787 >= (int)v704) {
          goto LABEL_636;
        }
        continue;
      }
      break;
    }
    __src[v788++] = v787 + 1;
    if (v788 < (int)v704)
    {
      ++v787;
      goto LABEL_632;
    }
LABEL_636:
    if (v704 != 1)
    {
      if (v788 < 1)
      {
        int v2748 = 0;
        unsigned int v773 = 0;
        goto LABEL_678;
      }
      uint64_t v791 = v788 & ~(v788 >> 31);
      int v793 = v788 & ~(v788 >> 31);
      memcpy(&__dst, __src, 4 * v791);
      if (v791 < 2)
      {
        uint64_t v790 = 0;
        int v2749 = 1;
        unsigned int m = v793;
        goto LABEL_647;
      }
      uint64_t v790 = v791 & 0x7FFFFFFE;
      float v794 = v2797;
      float v795 = v2819;
      uint64_t v796 = v790;
      do
      {
        int v797 = *(_DWORD *)&v2836[12 * *v794 - 4];
        *(v795 - 1) = *(_DWORD *)&v2836[12 * *(v794 - 1) - 4];
        *float v795 = v797;
        v795 += 2;
        v794 += 2;
        v796 -= 2;
      }
      while (v796);
      int v2749 = 0;
      for (unsigned int m = v793; v791 != v790; ++v790)
LABEL_647:
        *(float *)&v2819[4 * v790 - 4] = *(float *)&v2836[12 * *(_DWORD *)&v2797[4 * v790 - 4] - 4];
      if (m > 7)
      {
        uint64_t v798 = v791 & 0x7FFFFFF8;
        int v799 = v2979;
        uint64_t v800 = (float32x4_t *)v2820;
        uint64_t v801 = v798;
        do
        {
          float32x4_t v528 = v800[-1];
          v2989.val[0] = *v800;
          _Q1 = v528;
          float32x4_t v802 = v528;
          v2989.val[1] = *v800;
          v2989.val[2] = *v800;
          float v803 = v799 + 24;
          vst3q_f32(v799, *(float32x4x3_t *)(&_Q1 - 1));
          float32x4_t v804 = v799 + 12;
          vst3q_f32(v804, v2989);
          v800 += 2;
          int v799 = v803;
          v801 -= 8;
        }
        while (v801);
        if (v798 == v791)
        {
LABEL_655:
          uint64_t v809 = 0;
          uint64_t v810 = 0;
          do
          {
            int v811 = 3 * *(_DWORD *)&v2797[4 * v810 - 4];
            v528.i64[0] = *(void *)&v2979[v809];
            v528.f32[2] = v2979[v809 + 2];
            _Q1.i32[0] = *(_DWORD *)&v2836[4 * v811 - 12];
            _Q1.i32[1] = *(_DWORD *)&v2836[4 * v811 - 8];
            _Q1.i32[2] = *(_DWORD *)&v2836[4 * v811 - 4];
            float32x4_t v528 = vdivq_f32(_Q1, v528);
            *(_DWORD *)&v2834[v809 * 4 + 8] = v528.i32[2];
            *(void *)&v2834[v809 * 4] = v528.i64[0];
            ++v810;
            v809 += 3;
          }
          while (v791 != v810);
          unsigned int v812 = m;
          memcpy(v2836, v2834, 12 * m);
          unsigned int v773 = v812;
          if (v812 <= 7)
          {
            uint64_t v813 = 0;
            float32x4_t v705 = v2678;
            v574.i32[1] = 16843009;
            v575.i64[0] = 0x101010101010101;
            v575.i64[1] = 0x101010101010101;
            unint64_t n = (double *)v2790;
            float32x4_t v576 = v2721;
            int v573 = v2771;
            goto LABEL_668;
          }
          v574.i32[1] = 16843009;
          v575.i64[0] = 0x101010101010101;
          v575.i64[1] = 0x101010101010101;
          unint64_t n = (double *)v2790;
          float32x4_t v576 = v2721;
          int v573 = v2771;
          if (v812 >= 0x20)
          {
            uint64_t v813 = v791 & 0x7FFFFFE0;
            float v814 = (int8x16x4_t *)v2798;
            int64_t v815 = (float32x4_t *)v2793;
            uint64_t v816 = v813;
            do
            {
              int8x16_t v817 = v814[-1].val[0];
              int8x16_t v818 = v814[-1].val[1];
              float32x4_t v412 = (float32x4_t)v814[-1].val[2];
              int8x16_t v819 = v814[-1].val[3];
              v350.i32[1] = 471340048;
              float32x4_t v528 = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)(&v412 - 2), (int8x16_t)xmmword_259120320);
              _Q1 = (float32x4_t)vqtbl4q_s8(*v814, (int8x16_t)xmmword_259120320);
              v815[-1] = v528;
              *int64_t v815 = _Q1;
              v815 += 2;
              v814 += 2;
              v816 -= 32;
            }
            while (v816);
            float32x4_t v705 = v2678;
            if (v813 == v791) {
              goto LABEL_670;
            }
            if ((v791 & 0x18) == 0)
            {
LABEL_668:
              uint64_t v825 = v791 - v813;
              float v826 = &v2791[v813 + 96];
              float v827 = (int *)&v2797[4 * v813 - 4];
              do
              {
                int v828 = *v827++;
                *v826++ = v828;
                --v825;
              }
              while (v825);
              goto LABEL_670;
            }
          }
          else
          {
            uint64_t v813 = 0;
            float32x4_t v705 = v2678;
          }
          uint64_t v820 = v813;
          uint64_t v813 = v791 & 0x7FFFFFF8;
          uint64_t v821 = v820 - v813;
          float v822 = &v2791[v820 + 96];
          float v823 = (float32x4_t *)&v2797[4 * v820 - 4];
          do
          {
            float32x4_t v824 = *v823;
            _Q1 = v823[1];
            v823 += 2;
            v412.i32[1] = 471340048;
            float32x4_t v528 = (float32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&_Q1 - 1), (int8x16_t)xmmword_259120330);
            *v822++ = v528.i64[0];
            v821 += 8;
          }
          while (v821);
          if (v813 != v791) {
            goto LABEL_668;
          }
LABEL_670:
          if (v2749)
          {
            uint64_t v829 = 0;
          }
          else
          {
            uint64_t v829 = v791 & 0x7FFFFFFE;
            unint64_t v830 = v2792;
            uint64_t v831 = v829;
            do
            {
              float v832 = &v2836[12 * *v830];
              *(_DWORD *)&v2836[12 * *(v830 - 1) - 4] = 1065353216;
              *((_DWORD *)v832 - 1) = 1065353216;
              v830 += 2;
              v831 -= 2;
            }
            while (v831);
            if (v829 == v791) {
              goto LABEL_677;
            }
          }
          uint64_t v833 = v791 - v829;
          float v834 = &v2791[v829 + 96];
          do
          {
            int v835 = *v834++;
            *(_DWORD *)&v2836[12 * v835 - 4] = 1065353216;
            --v833;
          }
          while (v833);
LABEL_677:
          int v2748 = 1;
          unint64_t v704 = v2779;
          goto LABEL_678;
        }
      }
      else
      {
        uint64_t v798 = 0;
      }
      uint64_t v805 = v791 - v798;
      float v806 = (int *)&v2819[4 * v798 - 4];
      float v807 = &v2979[3 * v798 + 2];
      do
      {
        int v808 = *v806++;
        *((_DWORD *)v807 - 2) = v808;
        *((_DWORD *)v807 - 1) = v808;
        *(_DWORD *)float v807 = v808;
        v807 += 3;
        --v805;
      }
      while (v805);
      goto LABEL_655;
    }
    if (v788)
    {
      uint64_t v790 = 0;
      int __dst = __src[0];
      int v2749 = 1;
      uint64_t v791 = 1;
      unsigned int m = 1;
      goto LABEL_647;
    }
    int v2748 = 0;
    unsigned int v773 = 0;
LABEL_678:
    float v836 = &v2818;
    unint64_t v837 = v704;
    int v838 = v573 - 1;
    do
    {
      *v836++ = fabsf(*(float *)&v2832[4 * v838]);
      v838 += v573;
      --v837;
    }
    while (v837);
    if (v704 <= 7)
    {
      uint64_t v839 = 0;
      goto LABEL_691;
    }
    if (v704 >= 0x20)
    {
      size_t v841 = (float32x4_t *)v2822;
      int v842 = (float32x4_t *)v2791;
      uint64_t v843 = v2779 & 0xFFFFFFE0;
      do
      {
        float32x4_t v350 = *v841;
        float32x4_t v351 = v841[1];
        float32x4_t v352 = v841[3];
        float32x4_t v528 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v841[-4], v576), (int16x8_t)vcgtq_f32(v841[-3], v576)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v841[-2], v576), (int16x8_t)vcgtq_f32(v841[-1], v576))), v575);
        float32x4_t v412 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(*v841, v576), (int16x8_t)vcgtq_f32(v351, v576));
        _Q1 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)v412, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v841[2], v576), (int16x8_t)vcgtq_f32(v352, v576))), v575);
        v842[-1] = v528;
        *int v842 = _Q1;
        v842 += 2;
        v841 += 8;
        v843 -= 32;
      }
      while (v843);
      if (v704 != v2669)
      {
        uint64_t v840 = v2779 & 0xFFFFFFE0;
        uint64_t v839 = v840;
        if ((v2779 & 0x18) == 0) {
          goto LABEL_691;
        }
        goto LABEL_688;
      }
    }
    else
    {
      uint64_t v840 = 0;
LABEL_688:
      uint64_t v844 = v840 - (v2779 & 0xFFFFFFF8);
      unsigned int v845 = &v2790[v840];
      int v846 = (float32x4_t *)&v2819[4 * v840 - 4];
      do
      {
        float32x4_t v847 = *v846;
        float32x4_t v848 = v846[1];
        v846 += 2;
        _Q1 = (float32x4_t)vcgtq_f32(v848, v576);
        float32x4_t v528 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v847, v576), (int16x8_t)_Q1);
        *(int8x8_t *)v528.f32 = vand_s8(vmovn_s16((int16x8_t)v528), (int8x8_t)0x101010101010101);
        *v845++ = v528.i64[0];
        v844 += 8;
      }
      while (v844);
      uint64_t v839 = v2779 & 0xFFFFFFF8;
      if (v704 != v2670)
      {
LABEL_691:
        uint64_t v849 = v704 - v839;
        int v850 = &v2790[v839];
        uint64_t v851 = (float *)&v2819[4 * v839 - 4];
        do
        {
          float v852 = *v851++;
          *v850++ = v852 > 2.2204e-16;
          --v849;
        }
        while (v849);
      }
    }
    int v853 = 0;
    int v854 = 0;
    while (2)
    {
      int v855 = v2790[v853];
      if (!v2790[v853])
      {
        ++v853;
        if (v855) {
          goto LABEL_699;
        }
LABEL_695:
        if (v853 >= (int)v704) {
          goto LABEL_699;
        }
        continue;
      }
      break;
    }
    __src[v854++] = v853 + 1;
    if (v854 < (int)v704)
    {
      ++v853;
      goto LABEL_695;
    }
LABEL_699:
    if (v704 == 1)
    {
      if (v854)
      {
        uint64_t v856 = 0;
        int __dst = __src[0];
        uint64_t v857 = 1;
        unsigned int v858 = 1;
        goto LABEL_709;
      }
LABEL_705:
      int v860 = 0;
      unsigned int v858 = 0;
    }
    else
    {
      if (v854 < 1) {
        goto LABEL_705;
      }
      uint64_t v857 = v854;
      unsigned int v859 = v854;
      memcpy(&__dst, __src, 4 * v854);
      unsigned int v858 = v859;
      if (v859 == 1)
      {
        uint64_t v856 = 0;
        float32x4_t v705 = v2678;
        v574.i32[1] = 16843009;
        v575.i64[0] = 0x101010101010101;
        v575.i64[1] = 0x101010101010101;
        unint64_t n = (double *)v2790;
        int v573 = v2771;
        goto LABEL_709;
      }
      uint64_t v856 = v857 & 0xFFFFFFFE;
      unsigned int v861 = v2797;
      float v862 = v2826;
      uint64_t v863 = v856;
      int v573 = v2771;
      do
      {
        int v864 = *(_DWORD *)&v2832[4 * *v861 * v2771 - 4];
        *(v862 - 1) = *(_DWORD *)&v2832[4 * *(v861 - 1) * v2771 - 4];
        *float v862 = v864;
        v862 += 2;
        v861 += 2;
        v863 -= 2;
      }
      while (v863);
      float32x4_t v705 = v2678;
      v574.i32[1] = 16843009;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      for (unint64_t n = (double *)v2790; v857 != v856; ++v856)
LABEL_709:
        *(float32_t *)&v2826[4 * v856 - 4] = *(float32_t *)&v2832[4 * *(_DWORD *)&v2797[4 * v856 - 4] * v573 - 4];
      uint64_t v865 = 4 * v573;
      if (v573 >= 1)
      {
        uint64_t v866 = 0;
        uint64_t v867 = v2979;
        do
        {
          int v868 = *(_DWORD *)&v2826[4 * v866 - 4];
          float v869 = v867;
          uint64_t v870 = v573;
          do
          {
            *(_DWORD *)v869++ = v868;
            --v870;
          }
          while (v870);
          ++v866;
          uint64_t v867 = (float *)((char *)v867 + v865);
        }
        while (v866 != v857);
      }
      uint64_t v871 = 0;
      long long v872 = (float *)v2834;
      long long v873 = v2979;
      do
      {
        if (v573 >= 1)
        {
          long long v874 = (float *)&v2832[4 * (*(_DWORD *)&v2797[4 * v871 - 4] - 1) * v573];
          uint64_t v875 = v873;
          float v876 = v872;
          uint64_t v877 = v573;
          do
          {
            float v878 = *v874++;
            float v879 = v878;
            float v880 = *v875++;
            *v876++ = v879 / v880;
            --v877;
          }
          while (v877);
        }
        ++v871;
        long long v872 = (float *)((char *)v872 + v865);
        long long v873 = (float *)((char *)v873 + v865);
      }
      while (v871 != v857);
      int v860 = 1;
    }
    if ((int)(v858 * v573) >= 1)
    {
      unsigned int v2742 = v858;
      memcpy(v2832, v2834, 4 * v858 * v573);
      unsigned int v858 = v2742;
      int v573 = v2771;
      unint64_t n = (double *)v2790;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      v574.i32[1] = 16843009;
      float32x4_t v705 = v2678;
    }
    uint64_t v349 = (float *)v2981;
    unsigned int v881 = v2762;
    if (v860)
    {
      if (v858 <= 7)
      {
        uint64_t v882 = 0;
        goto LABEL_736;
      }
      if (v858 >= 0x20)
      {
        uint64_t v882 = v858 & 0xFFFFFFE0;
        float v883 = (int8x16x4_t *)v2798;
        float v884 = (float32x4_t *)v2793;
        uint64_t v885 = v882;
        do
        {
          int8x16_t v886 = v883[-1].val[0];
          int8x16_t v887 = v883[-1].val[1];
          float32x4_t v412 = (float32x4_t)v883[-1].val[2];
          int8x16_t v888 = v883[-1].val[3];
          v350.i32[1] = 471340048;
          float32x4_t v528 = (float32x4_t)vqtbl4q_s8(*(int8x16x4_t *)(&v412 - 2), (int8x16_t)xmmword_259120320);
          _Q1 = (float32x4_t)vqtbl4q_s8(*v883, (int8x16_t)xmmword_259120320);
          v884[-1] = v528;
          *float v884 = _Q1;
          v884 += 2;
          v883 += 2;
          v885 -= 32;
        }
        while (v885);
        float32x4_t v705 = v2678;
        if (v882 != v858)
        {
          if ((v858 & 0x18) == 0) {
            goto LABEL_736;
          }
          goto LABEL_733;
        }
      }
      else
      {
        uint64_t v882 = 0;
LABEL_733:
        uint64_t v889 = v882;
        uint64_t v882 = v858 & 0xFFFFFFF8;
        uint64_t v890 = v889 - v882;
        float v891 = &v2791[v889 + 96];
        int v892 = (float32x4_t *)&v2797[4 * v889 - 4];
        do
        {
          float32x4_t v893 = *v892;
          _Q1 = v892[1];
          v892 += 2;
          v412.i32[1] = 471340048;
          float32x4_t v528 = (float32x4_t)vqtbl2q_s8(*(int8x16x2_t *)(&_Q1 - 1), (int8x16_t)xmmword_259120330);
          *v891++ = v528.i64[0];
          v890 += 8;
        }
        while (v890);
        if (v882 != v858)
        {
LABEL_736:
          uint64_t v894 = v858 - v882;
          float v895 = &v2791[v882 + 96];
          int v896 = (int *)&v2797[4 * v882 - 4];
          do
          {
            int v897 = *v896++;
            *v895++ = v897;
            --v894;
          }
          while (v894);
        }
      }
      int v898 = v573 - 1;
      if (v858 <= 1)
      {
        uint64_t v899 = 0;
        goto LABEL_743;
      }
      uint64_t v899 = v858 & 0xFFFFFFFE;
      float v900 = v2792;
      uint64_t v901 = v899;
      do
      {
        int v902 = v898 + (*v900 - 1) * v573;
        *(_DWORD *)&v2832[4 * v898 + 4 * (*(v900 - 1) - 1) * v573] = 1065353216;
        *(_DWORD *)&v2832[4 * v902] = 1065353216;
        v900 += 2;
        v901 -= 2;
      }
      while (v901);
      if (v899 != v858)
      {
LABEL_743:
        uint64_t v903 = v858 - v899;
        uint64_t v904 = &v2791[v899 + 96];
        do
        {
          int v905 = *v904++;
          *(_DWORD *)&v2832[4 * v898 + 4 * (v905 - 1) * v573] = 1065353216;
          --v903;
        }
        while (v903);
      }
    }
    if (v2794 == 3 && v2762 == v2795)
    {
      if (!v2754) {
        goto LABEL_781;
      }
      LODWORD(v915) = 3 * v2762;
      if ((int)(3 * v2762) <= 1) {
        uint64_t v915 = 1;
      }
      else {
        uint64_t v915 = v915;
      }
      if (v915 >= 8)
      {
        uint64_t v916 = v915 & 0x7FFFFFF8;
        float v930 = (float32x4_t *)v2845;
        uint64_t v931 = (float32x4_t *)v2848;
        uint64_t v932 = v916;
        do
        {
          float32x4_t v412 = v931[-1];
          float32x4_t v933 = vsubq_f32(v930[-1], v412);
          float32x4_t v934 = vsubq_f32(*v930, *v931);
          float32x4_t v528 = vmulq_f32(v933, v933);
          _Q1 = vmulq_f32(v934, v934);
          v930[-1] = v528;
          float32x4_t *v930 = _Q1;
          v931 += 2;
          v930 += 2;
          v932 -= 8;
        }
        while (v932);
        if (v916 == v915) {
          goto LABEL_781;
        }
      }
      else
      {
        uint64_t v916 = 0;
      }
      uint64_t v935 = v915 - v916;
      uint64_t v936 = 4 * v916;
      float v937 = &v2847[v916];
      float v938 = (float *)((char *)&v2842 + v936);
      do
      {
        float v939 = *v937++;
        *float v938 = (float)(*v938 - v939) * (float)(*v938 - v939);
        ++v938;
        --v935;
      }
      while (v935);
      goto LABEL_781;
    }
    if (v2795 == 1) {
      uint64_t v907 = v2762;
    }
    else {
      uint64_t v907 = v2795;
    }
    if ((int)v907 >= 1)
    {
      BOOL v908 = v2794 != 1;
      unint64_t v909 = 4 * v2794 * (unint64_t)(v2795 != 1);
      float v910 = v2981;
      float v911 = v2847;
      float v912 = &v2842;
      uint64_t v913 = v907;
      do
      {
        v528.f32[0] = *v911;
        _Q1.i64[0] = *(void *)v912;
        _Q1.f32[2] = v912[2];
        v528.f32[1] = v911[v908];
        v528.f32[2] = v911[2 * v908];
        float32x4_t v528 = vsubq_f32(_Q1, v528);
        *((_DWORD *)v910 + 2) = v528.i32[2];
        *(void *)float v910 = v528.i64[0];
        float v910 = (_OWORD *)((char *)v910 + 12);
        float v911 = (float *)((char *)v911 + v909);
        v912 += 3 * (v2762 != 1);
        --v913;
      }
      while (v913);
      if (v907 < 4)
      {
        uint64_t v914 = 0;
        goto LABEL_766;
      }
      uint64_t v914 = v907 & 0x7FFFFFFC;
      uint64_t v917 = &v2842;
      int v918 = (float32x4_t *)v2981;
      uint64_t v919 = v907 & 0xFFFFFFFC;
      do
      {
        float32x4_t v528 = *v918;
        _Q1 = v918[1];
        float32x4_t v412 = v918[2];
        *((float32x4_t *)v917 + 1) = _Q1;
        *((float32x4_t *)v917 + 2) = v412;
        *(float32x4_t *)uint64_t v917 = v528;
        v917 += 12;
        v918 += 3;
        v919 -= 4;
      }
      while (v919);
      if (v914 != v907)
      {
LABEL_766:
        uint64_t v920 = v907 - v914;
        uint64_t v921 = 12 * v914;
        v922 = &v2842 + 3 * v914;
        uint64_t v923 = (float *)((char *)v2981 + v921);
        do
        {
          uint64_t v924 = *(void *)v923;
          v922[2] = v923[2];
          *(void *)v922 = v924;
          v922 += 3;
          v923 += 3;
          --v920;
        }
        while (v920);
      }
      if (v907 < 4)
      {
        uint64_t v925 = 0;
        goto LABEL_773;
      }
      uint64_t v925 = v907 & 0x7FFFFFFC;
      int64_t v926 = (float32x4_t *)&v2842;
      uint64_t v927 = v907 & 0xFFFFFFFC;
      do
      {
        float32x4_t v412 = vmulq_f32(v926[2], v926[2]);
        _Q1 = vmulq_f32(v926[1], v926[1]);
        float32x4_t v528 = vmulq_f32(*v926, *v926);
        *int64_t v926 = v528;
        v926[1] = _Q1;
        v926[2] = v412;
        v926 += 3;
        v927 -= 4;
      }
      while (v927);
      if (v925 != v907)
      {
LABEL_773:
        uint64_t v928 = v907 - v925;
        float v929 = &v2842 + 3 * v925;
        do
        {
          v528.i64[0] = *(void *)v929;
          v528.f32[2] = v929[2];
          float32x4_t v528 = vmulq_f32(v528, v528);
          v929[2] = v528.f32[2];
          *(void *)float v929 = v528.i64[0];
          v929 += 3;
          --v928;
        }
        while (v928);
      }
    }
    unsigned int v881 = v907;
LABEL_781:
    if ((int)v881 >= 1)
    {
      if (v881 < 8)
      {
        uint64_t v940 = 0;
        goto LABEL_787;
      }
      uint64_t v940 = v881 & 0xFFFFFFF8;
      float v941 = &v2842;
      float v942 = (float32x4_t *)v2824;
      uint64_t v943 = v940;
      do
      {
        float v944 = v941;
        v941 += 24;
        float32x4x3_t v2983 = vld3q_f32(v944);
        v944 += 12;
        float32x4_t v350 = vaddq_f32(vaddq_f32(v2983.val[1], v2983.val[0]), v2983.val[2]);
        *(float32x4x3_t *)(&_Q1 - 1) = vld3q_f32(v944);
        float32x4_t v528 = vaddq_f32(vaddq_f32(_Q1, v2983.val[0]), v412);
        v942[-1] = v350;
        *float v942 = v528;
        v942 += 2;
        v943 -= 8;
      }
      while (v943);
      if (v940 != v881)
      {
LABEL_787:
        uint64_t v945 = v881 - v940;
        float v946 = &v2823[v940];
        uint64_t v947 = (float *)&v2844[3 * v940];
        do
        {
          float v948 = *(v947 - 1) + *(v947 - 2);
          float v949 = *v947;
          v947 += 3;
          *v946++ = v948 + v949;
          --v945;
        }
        while (v945);
      }
    }
    if (v573 != 3 || v773 != v858)
    {
      if (v858 == 1) {
        uint64_t v952 = v773;
      }
      else {
        uint64_t v952 = v858;
      }
      if ((int)v952 < 1) {
        goto LABEL_810;
      }
      float32x4_t v953 = v2981;
      unsigned int v954 = (__int32 *)v2832;
      float32x4_t v955 = v2836;
      uint64_t v956 = v952;
      do
      {
        v528.i32[0] = *v954;
        _Q1.i64[0] = *(void *)v955;
        _Q1.i32[2] = *((_DWORD *)v955 + 2);
        v528.i32[1] = v954[v573 != 1];
        v528.i32[2] = v954[2 * (v573 != 1)];
        float32x4_t v528 = vsubq_f32(_Q1, v528);
        *((_DWORD *)v953 + 2) = v528.i32[2];
        *(void *)float32x4_t v953 = v528.i64[0];
        float32x4_t v953 = (_OWORD *)((char *)v953 + 12);
        v954 += v573 * (unint64_t)(v858 != 1);
        v955 += 12 * (v773 != 1);
        --v956;
      }
      while (v956);
      if (v952 >= 4)
      {
        uint64_t v957 = v952 & 0x7FFFFFFC;
        float32x2_t v958 = &v2842;
        size_t v959 = (float32x4_t *)v2981;
        uint64_t v960 = v952 & 0xFFFFFFFC;
        do
        {
          float32x4_t v962 = v959[1];
          float32x4_t v961 = v959[2];
          float32x4_t v963 = *v959;
          v959 += 3;
          float32x4_t v412 = vmulq_f32(v963, v963);
          _Q1 = vmulq_f32(v962, v962);
          float32x4_t v528 = vmulq_f32(v961, v961);
          *((float32x4_t *)v958 + 1) = _Q1;
          *((float32x4_t *)v958 + 2) = v528;
          *(float32x4_t *)float32x2_t v958 = v412;
          v958 += 12;
          v960 -= 4;
        }
        while (v960);
        if (v957 == v952) {
          goto LABEL_810;
        }
      }
      else
      {
        uint64_t v957 = 0;
      }
      uint64_t v964 = v952 - v957;
      uint64_t v965 = 12 * v957;
      uint64_t v966 = &v2842 + 3 * v957;
      uint64_t v967 = (char *)v2981 + v965;
      do
      {
        v528.i64[0] = *(void *)v967;
        v528.i32[2] = *((_DWORD *)v967 + 2);
        float32x4_t v528 = vmulq_f32(v528, v528);
        v966[2] = v528.f32[2];
        *(void *)uint64_t v966 = v528.i64[0];
        v966 += 3;
        v967 += 12;
        --v964;
      }
      while (v964);
LABEL_810:
      unsigned int v773 = v952;
      goto LABEL_816;
    }
    if (v2748)
    {
      LODWORD(v950) = 3 * v773;
      if ((int)(3 * v773) <= 1) {
        uint64_t v950 = 1;
      }
      else {
        uint64_t v950 = v950;
      }
      if (v950 < 8)
      {
        uint64_t v951 = 0;
        goto LABEL_814;
      }
      uint64_t v951 = v950 & 0x7FFFFFF8;
      uint64_t v968 = (float32x4_t *)&v2837;
      uint64_t v969 = (float32x4_t *)&v2833;
      uint64_t v970 = (float32x4_t *)v2845;
      uint64_t v971 = v951;
      do
      {
        float32x4_t v412 = v969[-1];
        float32x4_t v972 = vsubq_f32(v968[-1], v412);
        float32x4_t v973 = vsubq_f32(*v968, *v969);
        float32x4_t v528 = vmulq_f32(v972, v972);
        _Q1 = vmulq_f32(v973, v973);
        v970[-1] = v528;
        *uint64_t v970 = _Q1;
        v970 += 2;
        v969 += 2;
        v968 += 2;
        v971 -= 8;
      }
      while (v971);
      if (v951 != v950)
      {
LABEL_814:
        uint64_t v974 = v950 - v951;
        uint64_t v975 = 4 * v951;
        BOOL v976 = &v2842 + v951;
        unint64_t v977 = (float *)&v2832[v975];
        unint64_t v978 = (float *)&v2836[v975];
        do
        {
          float v979 = *v978++;
          float v980 = v979;
          float v981 = *v977++;
          *v976++ = (float)(v980 - v981) * (float)(v980 - v981);
          --v974;
        }
        while (v974);
      }
    }
LABEL_816:
    if ((int)v773 >= 1)
    {
      if (v773 < 8)
      {
        uint64_t v982 = 0;
        goto LABEL_822;
      }
      uint64_t v982 = v773 & 0xFFFFFFF8;
      float32x4_t v983 = &v2842;
      float32x4_t v984 = (float32x4_t *)v2827;
      uint64_t v985 = v982;
      do
      {
        uint64_t v986 = v983;
        v983 += 24;
        float32x4x3_t v2984 = vld3q_f32(v986);
        v986 += 12;
        float32x4_t v350 = vaddq_f32(vaddq_f32(v2984.val[1], v2984.val[0]), v2984.val[2]);
        *(float32x4x3_t *)(&_Q1 - 1) = vld3q_f32(v986);
        float32x4_t v528 = vaddq_f32(vaddq_f32(_Q1, v2984.val[0]), v412);
        v984[-1] = v350;
        *float32x4_t v984 = v528;
        v984 += 2;
        v985 -= 8;
      }
      while (v985);
      if (v982 != v773)
      {
LABEL_822:
        uint64_t v987 = v773 - v982;
        float v988 = (float32_t *)&v2826[4 * v982 - 4];
        float v989 = (float *)&v2844[3 * v982];
        do
        {
          float v990 = *(v989 - 1) + *(v989 - 2);
          float v991 = *v989;
          v989 += 3;
          *v988++ = v990 + v991;
          --v987;
        }
        while (v987);
      }
    }
    if (v881 != v773)
    {
      if (v773 == 1) {
        int v993 = v881;
      }
      else {
        int v993 = v773;
      }
      if (v993 < 1)
      {
LABEL_866:
        unsigned int v881 = v993;
        if (v993 < 1) {
          goto LABEL_896;
        }
        goto LABEL_867;
      }
      if (v881 == 1)
      {
        v528.f32[0] = v2823[0];
        if (v773 == 1)
        {
          *(float *)v2981 = v2825 + v2823[0];
        }
        else
        {
          if (v773 > 7)
          {
            uint64_t v1004 = v773 & 0xFFFFFFF8;
            float32x4_t v1016 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
            float32x4_t v1017 = (float32x4_t *)v2827;
            int v1018 = (float32x4_t *)&v2981[1];
            uint64_t v1019 = v1004;
            do
            {
              float32x4_t v1020 = vaddq_f32(*v1017, v1016);
              v1018[-1] = vaddq_f32(v1017[-1], v1016);
              float32x4_t *v1018 = v1020;
              v1018 += 2;
              v1017 += 2;
              v1019 -= 8;
            }
            while (v1019);
            if (v1004 == v773) {
              goto LABEL_865;
            }
          }
          else
          {
            uint64_t v1004 = 0;
          }
          uint64_t v1021 = v773 - v1004;
          uint64_t v1022 = 4 * v1004;
          uint64_t v1023 = (float *)v2981 + v1004;
          unint64_t v1024 = (float32_t *)&v2826[v1022 - 4];
          do
          {
            float v1025 = *v1024++;
            *v1023++ = v1025 + v528.f32[0];
            --v1021;
          }
          while (v1021);
        }
      }
      else if (v773 == 1)
      {
        v528.f32[0] = v2825;
        if (v881 >= 8)
        {
          uint64_t v1003 = v881 & 0xFFFFFFF8;
          float32x4_t v1006 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
          BOOL v1007 = (float32x4_t *)v2824;
          uint64_t v1008 = (float32x4_t *)&v2981[1];
          uint64_t v1009 = v1003;
          do
          {
            float32x4_t v1010 = vaddq_f32(*v1007, v1006);
            v1008[-1] = vaddq_f32(v1007[-1], v1006);
            *uint64_t v1008 = v1010;
            v1008 += 2;
            v1007 += 2;
            v1009 -= 8;
          }
          while (v1009);
          if (v1003 == v881) {
            goto LABEL_865;
          }
        }
        else
        {
          uint64_t v1003 = 0;
        }
        uint64_t v1011 = v881 - v1003;
        uint64_t v1012 = v1003;
        uint64_t v1013 = (float *)v2981 + v1003;
        BOOL v1014 = &v2823[v1012];
        do
        {
          float v1015 = *v1014++;
          *v1013++ = v1015 + v528.f32[0];
          --v1011;
        }
        while (v1011);
      }
      else
      {
        if (v773 > 7)
        {
          uint64_t v1005 = v773 & 0xFFFFFFF8;
          uint64_t v1026 = (float32x4_t *)v2824;
          float v1027 = (float32x4_t *)v2827;
          unint64_t v1028 = (float32x4_t *)&v2981[1];
          uint64_t v1029 = v1005;
          do
          {
            float32x4_t v1030 = vaddq_f32(*v1027, *v1026);
            v1028[-1] = vaddq_f32(v1027[-1], v1026[-1]);
            *unint64_t v1028 = v1030;
            v1028 += 2;
            v1027 += 2;
            v1026 += 2;
            v1029 -= 8;
          }
          while (v1029);
          if (v1005 == v773) {
            goto LABEL_865;
          }
        }
        else
        {
          uint64_t v1005 = 0;
        }
        uint64_t v1031 = v773 - v1005;
        uint64_t v1032 = v1005;
        uint64_t v1033 = (float *)v2981 + v1005;
        uint64_t v1034 = (float32_t *)&v2826[v1032 * 4 - 4];
        int64_t v1035 = &v2823[v1032];
        do
        {
          float v1036 = *v1035++;
          float v1037 = v1036;
          float v1038 = *v1034++;
          *v1033++ = v1038 + v1037;
          --v1031;
        }
        while (v1031);
      }
LABEL_865:
      memcpy(v2823, v2981, 4 * v993);
      float32x4_t v705 = v2678;
      v574.i32[1] = 16843009;
      v575.i64[0] = 0x101010101010101;
      v575.i64[1] = 0x101010101010101;
      unint64_t n = (double *)v2790;
      goto LABEL_866;
    }
    if ((int)v881 < 1) {
      goto LABEL_896;
    }
    if (v881 < 8)
    {
      uint64_t v992 = 0;
      goto LABEL_838;
    }
    uint64_t v992 = v881 & 0xFFFFFFF8;
    uint64_t v994 = (float32x4_t *)v2827;
    int v995 = (float32x4_t *)v2824;
    uint64_t v996 = v992;
    do
    {
      float32x4_t v412 = v995[-1];
      float32x4_t v528 = vaddq_f32(v412, v994[-1]);
      float32x4_t v997 = vaddq_f32(*v995, *v994);
      v995[-1] = v528;
      *int v995 = v997;
      v995 += 2;
      v994 += 2;
      v996 -= 8;
    }
    while (v996);
    if (v992 != v881)
    {
LABEL_838:
      uint64_t v998 = v881 - v992;
      uint64_t v999 = 4 * v992;
      uint64_t v1000 = &v2823[v992];
      uint64_t v1001 = (float32_t *)&v2826[v999 - 4];
      do
      {
        float v1002 = *v1001++;
        *uint64_t v1000 = *v1000 + v1002;
        ++v1000;
        --v998;
      }
      while (v998);
    }
LABEL_867:
    if (v881 <= 7)
    {
      uint64_t v1039 = 0;
      goto LABEL_872;
    }
    uint64_t v1039 = v881 & 0xFFFFFFF8;
    float v1040 = (float32x4_t *)v2824;
    uint64_t v1041 = (float32x4_t *)v2820;
    uint64_t v1042 = v1039;
    do
    {
      float32x4_t v528 = vabsq_f32(v1040[-1]);
      float32x4_t v1043 = vabsq_f32(*v1040);
      v1041[-1] = v528;
      *uint64_t v1041 = v1043;
      v1041 += 2;
      v1040 += 2;
      v1042 -= 8;
    }
    while (v1042);
    if (v1039 != v881)
    {
LABEL_872:
      uint64_t v1044 = v881 - v1039;
      uint64_t v1045 = v1039;
      float v1046 = (float *)&v2819[4 * v1039 - 4];
      unsigned int v1047 = &v2823[v1045];
      do
      {
        float v1048 = *v1047++;
        *v1046++ = fabsf(v1048);
        --v1044;
      }
      while (v1044);
    }
    if (v881 <= 7)
    {
      uint64_t v1049 = 0;
      _Q1 = v2661;
      goto LABEL_885;
    }
    if (v881 >= 0x20)
    {
      uint64_t v1049 = v881 & 0xFFFFFFE0;
      uint64_t v1050 = (float32x4_t *)v2822;
      int v1051 = (int8x16_t *)v2791;
      uint64_t v1052 = v1049;
      do
      {
        float32x4_t v1054 = v1050[-2];
        float32x4_t v1053 = v1050[-1];
        float32x4_t v1055 = v1050[-4];
        float32x4_t v1056 = v1050[-3];
        float32x4_t v351 = v1050[2];
        float32x4_t v350 = v1050[3];
        float32x4_t v1057 = *v1050;
        float32x4_t v352 = v1050[1];
        v1050 += 8;
        float32x4_t v528 = (float32x4_t)vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v705, v1055), (int16x8_t)vcgtq_f32(v705, v1056)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v705, v1054), (int16x8_t)vcgtq_f32(v705, v1053))), v575);
        float32x4_t v412 = (float32x4_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v705, v351), (int16x8_t)vcgtq_f32(v705, v350));
        v1051[-1] = (int8x16_t)v528;
        *int v1051 = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v705, v1057), (int16x8_t)vcgtq_f32(v705, v352)), (int8x16_t)v412), v575);
        v1051 += 2;
        v1052 -= 32;
      }
      while (v1052);
      _Q1 = v2661;
      if (v1049 != v881)
      {
        if ((v881 & 0x18) == 0) {
          goto LABEL_885;
        }
        goto LABEL_882;
      }
    }
    else
    {
      uint64_t v1049 = 0;
LABEL_882:
      uint64_t v1058 = v1049;
      uint64_t v1049 = v881 & 0xFFFFFFF8;
      uint64_t v1059 = v1058 - v1049;
      float v1060 = &v2790[v1058];
      float v1061 = (float32x4_t *)&v2819[4 * v1058 - 4];
      do
      {
        float32x4_t v528 = *v1061;
        float32x4_t v1062 = v1061[1];
        v1061 += 2;
        *(int8x8_t *)v528.f32 = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v705, v528), (int16x8_t)vcgtq_f32(v705, v1062))), (int8x8_t)0x101010101010101);
        *v1060++ = v528.i64[0];
        v1059 += 8;
      }
      while (v1059);
      _Q1 = v2661;
      if (v1049 != v881)
      {
LABEL_885:
        uint64_t v1063 = v881 - v1049;
        uint64_t v1064 = &v2790[v1049];
        unint64_t v1065 = (float *)&v2819[4 * v1049 - 4];
        do
        {
          float v1066 = *v1065++;
          *v1064++ = v1066 < _Q1.f32[0];
          --v1063;
        }
        while (v1063);
      }
    }
    signed int v1067 = 0;
    int v1068 = 0;
    while (2)
    {
      int v1069 = v2790[v1067];
      if (!v2790[v1067])
      {
        ++v1067;
        if (v1069) {
          goto LABEL_893;
        }
LABEL_889:
        if (v1067 >= (int)v881) {
          goto LABEL_893;
        }
        continue;
      }
      break;
    }
    __src[v1068++] = v1067 + 1;
    if (v1068 < (int)v881)
    {
      ++v1067;
      goto LABEL_889;
    }
LABEL_893:
    if (v881 == 1)
    {
      if (v1068)
      {
        int v1070 = 1;
        goto LABEL_898;
      }
LABEL_896:
      int v1070 = 0;
    }
    else
    {
      int v1070 = v1068 & ~(v1068 >> 31);
    }
LABEL_898:
    if (v1070 > v2674)
    {
      memcpy(v2801, __src, 4 * v1070);
      if ((int)v2679 * (int)v2679 >= 1) {
        memcpy(v2802, &v2815, 4 * (v2679 * v2679));
      }
      unsigned int v2674 = v1070;
      uint64_t v2660 = v1070 | 0x100000000;
      int v2659 = (int)v2679;
      int v2658 = (int)v2679;
      *(double *)v528.i64 = -4.60517019
                          / log(fmax(1.0- (double)v1070* v2657* ((double)v1070* v2657)* ((double)v1070* v2657* ((double)v1070* v2657)), 2.22044605e-16));
      double v2672 = *(double *)v528.i64;
    }
    uint64_t v355 = v2785;
    int8x16_t v364 = v2709;
    float32x4_t v359 = v2711;
    v362.i64[0] = 0x8000000080000000;
    v362.i64[1] = 0x8000000080000000;
    v363.i64[0] = 0x100000001;
    v363.i64[1] = 0x100000001;
    if (v2675 <= 0x3E7)
    {
      unsigned int v353 = v2675 + 1;
      *(double *)v528.i64 = (double)(int)(v2675 + 1);
      if (v2672 > *(double *)v528.i64) {
        continue;
      }
    }
    break;
  }
  uint64_t v1663 = (v2658 * v2659);
  if ((int)v1663 < 1)
  {
    int v1667 = 0;
    int v1664 = HIDWORD(v2660);
    int v1665 = v2660;
    int v1668 = 0;
    if (v2658 && v2659) {
      goto LABEL_1246;
    }
  }
  else
  {
    int v1664 = HIDWORD(v2660);
    int v1665 = v2660;
    if (v1663 <= 7)
    {
      uint64_t v1666 = 0;
      goto LABEL_1226;
    }
    uint64_t v1666 = v1663 & 0x7FFFFFF8;
    v1669 = (int8x8_t *)v2789;
    v1670 = (float32x4_t *)v2802;
    v528.i32[1] = 16843009;
    uint64_t v1671 = v1663 & 0xFFFFFFF8;
    do
    {
      float32x4_t v1672 = *v1670;
      float32x4_t v1673 = v1670[1];
      v1670 += 2;
      float32x4_t v412 = (float32x4_t)vorrq_s8((int8x16_t)vcltzq_f32(v1673), (int8x16_t)vcgezq_f32(v1673));
      _Q1 = (float32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcltzq_f32(v1672), (int8x16_t)vcgezq_f32(v1672)), (int16x8_t)v412));
      *v1669++ = vand_s8(vmovn_s16((int16x8_t)_Q1), (int8x8_t)0x101010101010101);
      v1671 -= 8;
    }
    while (v1671);
    if (v1666 != v1663)
    {
LABEL_1226:
      uint64_t v1674 = v1663 - v1666;
      v1675 = &v2789[v1666];
      v1676 = &v2802[v1666];
      do
      {
        ++v1676;
        *v1675++ = 0;
        --v1674;
      }
      while (v1674);
    }
    if (v1663 <= 7)
    {
      uint64_t v1677 = 0;
      goto LABEL_1233;
    }
    uint64_t v1677 = v1663 & 0x7FFFFFF8;
    v1678 = (int8x8_t *)((char *)&v2788 + 6);
    v1679 = (int8x8_t *)v2789;
    v528.i32[1] = 16843009;
    uint64_t v1680 = v1663 & 0xFFFFFFF8;
    do
    {
      int8x8_t v1681 = *v1679++;
      *v1678++ = vand_s8(vceqz_s8(v1681), (int8x8_t)0x101010101010101);
      v1680 -= 8;
    }
    while (v1680);
    if (v1677 != v1663)
    {
LABEL_1233:
      uint64_t v1682 = v1663 - v1677;
      v1683 = v2789 + v1677 + 5;
      v1684 = &v2789[v1677];
      do
      {
        int v1685 = *v1684++;
        *v1683++ = v1685 == 0;
        --v1682;
      }
      while (v1682);
    }
    int v1667 = 0;
    int v1668 = 0;
    if (v2658 && v2659)
    {
      unsigned int v1686 = 0;
      char v1687 = 1;
      do
      {
        int v1688 = *((unsigned __int8 *)v2789 + v1686 + 5);
        if (*((unsigned char *)v2789 + v1686 + 5)) {
          ++v1686;
        }
        else {
          char v1687 = 0;
        }
        if (v1688) {
          BOOL v1689 = (int)v1686 < (int)v1663;
        }
        else {
          BOOL v1689 = 0;
        }
      }
      while (v1689);
      if (v1687)
      {
LABEL_1246:
        if (v1664 * v1665 >= 1) {
          memcpy(v2800, v2801, 4 * (v1664 * v1665));
        }
        int v1667 = v1665;
        int v1668 = v1664;
      }
      else
      {
        int v1667 = 0;
        int v1668 = 0;
      }
    }
  }
  uint64_t v1690 = (v1668 * v1667);
  uint64_t v2758 = v1690;
  if ((int)v1690 >= 1)
  {
    uint64_t v1691 = 0;
    uint64_t v1692 = 12 * (v1668 * v1667);
    v1693 = (int *)v2800;
    do
    {
      int v1694 = *v1693++;
      v1695 = &v2836[v1691];
      int v1696 = *(_DWORD *)&v2841[12 * v1694 - 8];
      _DWORD *v1695 = *(_DWORD *)&v2841[12 * v1694 - 12];
      v1695[1] = v1696;
      v1695[2] = *(_DWORD *)&v2841[12 * v1694 - 4];
      v1691 += 12;
    }
    while (v1692 != v1691);
    uint64_t v1697 = 0;
    v1698 = (int *)v2800;
    do
    {
      int v1699 = *v1698++;
      v1700 = (_DWORD *)((char *)&v2842 + v1697);
      int v1701 = *(_DWORD *)&v2840[12 * v1699 - 8];
      _DWORD *v1700 = *(_DWORD *)&v2840[12 * v1699 - 12];
      v1700[1] = v1701;
      v1700[2] = *(_DWORD *)&v2840[12 * v1699 - 4];
      v1697 += 12;
    }
    while (12 * v1690 != v1697);
    if (v1690 < 4)
    {
      uint64_t v1702 = 0;
      goto LABEL_1260;
    }
    uint64_t v1702 = v1690 & 0x7FFFFFFC;
    v1703 = &v2879;
    v1704 = &v2842;
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v1706 = v1690 & 0xFFFFFFFC;
    do
    {
      *(float32x4x3_t *)_Q1.f32 = vld3q_f32(v1704);
      v1704 += 12;
      float32x4_t v1708 = vdivq_f32(_Q0, v1707);
      v2993.val[0] = vmulq_f32(_Q1, v1708);
      v2993.val[1] = vmulq_f32(v1709, v1708);
      v2993.val[2] = vmulq_f32(v1707, v1708);
      vst3q_f32(v1703, v2993);
      v1703 += 12;
      v1706 -= 4;
    }
    while (v1706);
    if (v1702 != v1690)
    {
LABEL_1260:
      uint64_t v1710 = v1690 - v1702;
      uint64_t v1711 = 12 * v1702;
      v1712 = &v2879 + 3 * v1702;
      v1713 = (char *)&v2842 + v1711;
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        _Q1.i64[0] = *(void *)v1713;
        _Q1.i32[2] = *((_DWORD *)v1713 + 2);
        _Q1 = vmulq_f32(_Q1, vdivq_f32(_Q0, (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q1, 2)));
        v1712[2] = _Q1.f32[2];
        *(void *)v1712 = _Q1.i64[0];
        v1712 += 3;
        v1713 += 12;
        --v1710;
      }
      while (v1710);
    }
    size_t v1715 = 12 * v1690;
    memcpy(&v2842, &v2879, v1715);
    if (v2758 < 4)
    {
      uint64_t v1717 = 0;
      goto LABEL_1267;
    }
    uint64_t v1717 = v2758 & 0xFFFFFFFC;
    v1718 = &v2879;
    v1719 = (const float *)v2836;
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v1721 = v1717;
    do
    {
      *(float32x4x3_t *)v1716.f32 = vld3q_f32(v1719);
      v1719 += 12;
      float32x4_t v1723 = vdivq_f32(_Q0, v1722);
      v2994.val[0] = vmulq_f32(v1716, v1723);
      v2994.val[1] = vmulq_f32(v1724, v1723);
      v2994.val[2] = vmulq_f32(v1722, v1723);
      vst3q_f32(v1718, v2994);
      v1718 += 12;
      v1721 -= 4;
    }
    while (v1721);
    if (v1717 != v2758)
    {
LABEL_1267:
      uint64_t v1725 = v2758 - v1717;
      uint64_t v1726 = 12 * v1717;
      v1727 = &v2879 + 3 * v1717;
      v1728 = &v2836[v1726];
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        v1716.i64[0] = *(void *)v1728;
        v1716.i32[2] = *((_DWORD *)v1728 + 2);
        float32x4_t v1716 = vmulq_f32(v1716, vdivq_f32(_Q0, (float32x4_t)vdupq_laneq_s32((int32x4_t)v1716, 2)));
        v1727[2] = v1716.f32[2];
        *(void *)v1727 = v1716.i64[0];
        v1727 += 3;
        v1728 += 12;
        --v1725;
      }
      while (v1725);
    }
    memcpy(v2836, &v2879, v1715);
    uint64_t v1690 = v2758;
  }
  uint64_t v1730 = (2 * v1690);
  if (!v1690)
  {
    int v1734 = 0;
    unsigned int v1735 = 0;
    uint64_t v2706 = 0;
    BOOL v2705 = 0;
    LODWORD(v1736) = 0;
    v1732.i32[0] = 2143289344;
    _Q1.i64[0] = 0x37FC00000;
    uint64_t v2864 = 0x900000000;
    uint64_t v2863 = 0x300000000;
    *(float *)&int v2777 = NAN;
    float __na = NAN;
    float32x4_t v2780 = _Q1;
    *(float *)&int v2786 = NAN;
LABEL_1556:
    LODWORD(v2788) = v1736;
    coder::internal::b_svd((coder::internal *)v2972, (const double *)&v2864, (const int *)v2966, (double *)&v2863, (int *)v2977, &v2788, (int *)v2947, n, v1732.f32[0]);
    double v2136 = *(double *)&v2947[80];
    double v2135 = *(double *)&v2947[72];
    *(void *)&long long v2104 = v2947[73];
    double v2134 = *(double *)&v2947[74];
    double v2133 = *(double *)&v2947[75];
    double v2132 = *(double *)&v2947[76];
    double v2131 = *(double *)&v2947[77];
    double v2130 = *(double *)&v2947[78];
    double v2112 = *(double *)&v2947[79];
    uint64_t v2113 = v2758;
    float v2114 = *(float *)&v2786;
    unsigned int v2129 = v1735;
    float v2115 = *(float *)&v2777;
    goto LABEL_1557;
  }
  float v1731 = v2842;
  if ((int)v1690 <= 1)
  {
    v1732.f32[0] = (float)(int)v1690;
    *(float *)v574.i32 = v2842 / (float)(int)v1690;
    float v1733 = v2843;
    goto LABEL_1291;
  }
  uint64_t v1737 = (v1690 + 1);
  unint64_t v1738 = v1737 - 2;
  if ((unint64_t)(v1737 - 2) >= 2)
  {
    unint64_t v1740 = v1738 & 0xFFFFFFFFFFFFFFFELL;
    v528.i64[0] = 0;
    uint64_t v1741 = 0x300000000;
    uint64_t v1742 = 0x600000000;
    unint64_t v1743 = v1738 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v1731 = *(float *)((char *)&v2842 + (v1741 >> 30)) + v1731;
      v528.f32[0] = *(float *)((char *)&v2842 + (v1742 >> 30)) + v528.f32[0];
      v1742 += 0x600000000;
      v1741 += 0x600000000;
      v1743 -= 2;
    }
    while (v1743);
    float v1731 = v528.f32[0] + v1731;
    if (v1738 != v1740)
    {
      uint64_t v1739 = v1740 + 2;
      goto LABEL_1280;
    }
  }
  else
  {
    uint64_t v1739 = 2;
LABEL_1280:
    uint64_t v1744 = v1737 - v1739;
    uint64_t v1745 = 0x300000000 * v1739 - 0x300000000;
    do
    {
      float v1731 = *(float *)((char *)&v2842 + (v1745 >> 30)) + v1731;
      v1745 += 0x300000000;
      --v1744;
    }
    while (v1744);
  }
  v1732.f32[0] = (float)(int)v1690;
  float v1733 = v2843;
  if (v1738 >= 2)
  {
    unint64_t v1747 = v1738 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v1748 = 0x700000000;
    float v1749 = 0.0;
    uint64_t v1750 = 0x400000000;
    unint64_t v1751 = v1738 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float v1733 = *(float *)((char *)&v2842 + (v1750 >> 30)) + v1733;
      float v1749 = *(float *)((char *)&v2842 + (v1748 >> 30)) + v1749;
      v1748 += 0x600000000;
      v1750 += 0x600000000;
      v1751 -= 2;
    }
    while (v1751);
    float v1733 = v1749 + v1733;
    if (v1738 != v1747)
    {
      uint64_t v1746 = v1747 + 2;
      goto LABEL_1288;
    }
  }
  else
  {
    uint64_t v1746 = 2;
LABEL_1288:
    uint64_t v1752 = v1737 - v1746;
    uint64_t v1753 = 0x300000000 * v1746 - 0x200000000;
    do
    {
      float v1733 = *(float *)((char *)&v2842 + (v1753 >> 30)) + v1733;
      v1753 += 0x300000000;
      --v1752;
    }
    while (v1752);
  }
  *(float *)v574.i32 = v1731 / v1732.f32[0];
LABEL_1291:
  *(float *)v575.i32 = v1733 / v1732.f32[0];
  if ((int)v1690 < 1)
  {
    v576.i32[0] = 2143289344;
    float v1755 = NAN;
  }
  else
  {
    if (v1690 >= 9)
    {
      uint64_t v1756 = v1690 & 7;
      if ((v1690 & 7) == 0) {
        uint64_t v1756 = 8;
      }
      uint64_t v1754 = v1690 - v1756;
      float32x4_t v1757 = (float32x4_t)vdupq_lane_s32(v574, 0);
      v1758 = (float32x4_t *)v2869;
      v1759 = &v2842;
      uint64_t v1760 = v1754;
      do
      {
        v1761 = v1759;
        v1759 += 24;
        unsigned long long v1762 = (unsigned __int128)vld3q_f32(v1761);
        v1761 += 12;
        float32x4_t v1763 = vsubq_f32((float32x4_t)v1762, v1757);
        unsigned long long v1764 = (unsigned __int128)vld3q_f32(v1761);
        float32x4_t v412 = vsubq_f32((float32x4_t)v1764, v1757);
        v1758[-1] = v1763;
        float32x4_t *v1758 = v412;
        v1758 += 2;
        v1760 -= 8;
      }
      while (v1760);
    }
    else
    {
      uint64_t v1754 = 0;
    }
    uint64_t v1765 = v1690 - v1754;
    v1766 = (float *)&v2868[4 * v1754 + 432];
    v1767 = &v2842 + 3 * v1754;
    do
    {
      float v1768 = *v1767;
      v1767 += 3;
      *v1766++ = v1768 - *(float *)v574.i32;
      --v1765;
    }
    while (v1765);
    if (v1690 >= 9)
    {
      uint64_t v1770 = v1690 & 7;
      if ((v1690 & 7) == 0) {
        uint64_t v1770 = 8;
      }
      float32x4_t v1771 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v575.i8, 0);
      uint64_t v1769 = v1690 - v1770;
      v1772 = (float32x4_t *)v2868;
      v1773 = (const float *)&v2846;
      uint64_t v1774 = v1769;
      do
      {
        v1775 = v1773 - 12;
        unsigned long long v1776 = (unsigned __int128)vld3q_f32(v1775);
        unsigned long long v1777 = (unsigned __int128)vld3q_f32(v1773);
        float32x4_t v412 = vsubq_f32((float32x4_t)v1776, v1771);
        v1772[-1] = v412;
        float32x4_t *v1772 = vsubq_f32((float32x4_t)v1777, v1771);
        v1772 += 2;
        v1773 += 24;
        v1774 -= 8;
      }
      while (v1774);
    }
    else
    {
      uint64_t v1769 = 0;
    }
    uint64_t v1778 = v1690 - v1769;
    v1779 = (float *)&v2867[4 * v1769 + 428];
    v1780 = &v2842 + 3 * v1769 + 1;
    do
    {
      float v1781 = *v1780;
      v1780 += 3;
      *v1779++ = v1781 - *(float *)v575.i32;
      --v1778;
    }
    while (v1778);
    if (v1690 < 8)
    {
      uint64_t v1782 = 0;
      goto LABEL_1314;
    }
    uint64_t v1782 = v1690 & 0x7FFFFFF8;
    v1783 = (float32x4_t *)v2866;
    v1784 = (float32x4_t *)v2869;
    uint64_t v1785 = v1690 & 0xFFFFFFF8;
    do
    {
      float32x4_t v412 = vabsq_f32(*v1784);
      v1783[-1] = vabsq_f32(v1784[-1]);
      float32x4_t *v1783 = v412;
      v1783 += 2;
      v1784 += 2;
      v1785 -= 8;
    }
    while (v1785);
    if (v1782 != v1690)
    {
LABEL_1314:
      uint64_t v1786 = v1690 - v1782;
      uint64_t v1787 = 4 * v1782;
      v1788 = (float *)&v2865[v1782];
      v1789 = (float *)&v2868[v1787 + 432];
      do
      {
        float v1790 = *v1789++;
        *v1788++ = fabsf(v1790);
        --v1786;
      }
      while (v1786);
    }
    float v1791 = *(float *)v2865;
    if ((int)v1690 >= 2)
    {
      uint64_t v1792 = (v1690 + 1);
      uint64_t v1793 = v1792 - 2;
      if ((unint64_t)(v1792 - 2) >= 8)
      {
        unint64_t v1795 = v1793 & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v412 = 0uLL;
        float32x4_t v1796 = (float32x4_t)v2865[0];
        v1797 = (float32x4_t *)v2867;
        unint64_t v1798 = v1793 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v1796 = vaddq_f32(v1797[-1], v1796);
          float32x4_t v412 = vaddq_f32(*v1797, v412);
          v1797 += 2;
          v1798 -= 8;
        }
        while (v1798);
        float32x4_t v1799 = vaddq_f32(v412, v1796);
        float v1791 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v1799, v1799));
        if (v1793 != v1795)
        {
          uint64_t v1794 = v1795 | 2;
          goto LABEL_1323;
        }
      }
      else
      {
        uint64_t v1794 = 2;
LABEL_1323:
        uint64_t v1800 = v1792 - v1794;
        v1801 = (float *)&v2865[v1794 - 1];
        do
        {
          float v1802 = *v1801++;
          float v1791 = v1802 + v1791;
          --v1800;
        }
        while (v1800);
      }
    }
    if (v1690 < 8)
    {
      uint64_t v1803 = 0;
      goto LABEL_1330;
    }
    uint64_t v1803 = v1690 & 0x7FFFFFF8;
    v1804 = (float32x4_t *)v2866;
    v1805 = (float32x4_t *)v2868;
    uint64_t v1806 = v1690 & 0xFFFFFFF8;
    do
    {
      float32x4_t v412 = vabsq_f32(v1805[-1]);
      float32x4_t v1807 = vabsq_f32(*v1805);
      v1804[-1] = v412;
      float32x4_t *v1804 = v1807;
      v1804 += 2;
      v1805 += 2;
      v1806 -= 8;
    }
    while (v1806);
    if (v1803 != v1690)
    {
LABEL_1330:
      uint64_t v1808 = v1690 - v1803;
      uint64_t v1809 = 4 * v1803;
      v1810 = (float *)&v2865[v1803];
      v1811 = (float *)&v2867[v1809 + 428];
      do
      {
        float v1812 = *v1811++;
        *v1810++ = fabsf(v1812);
        --v1808;
      }
      while (v1808);
    }
    v412.i32[0] = v2865[0];
    if ((int)v1690 >= 2)
    {
      uint64_t v1813 = (v1690 + 1);
      uint64_t v1814 = v1813 - 2;
      if ((unint64_t)(v1813 - 2) >= 8)
      {
        unint64_t v1816 = v1814 & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v1817 = 0uLL;
        float32x4_t v1818 = (float32x4_t)v2865[0];
        v1819 = (float32x4_t *)v2867;
        unint64_t v1820 = v1814 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v1818 = vaddq_f32(v1819[-1], v1818);
          float32x4_t v1817 = vaddq_f32(*v1819, v1817);
          v1819 += 2;
          v1820 -= 8;
        }
        while (v1820);
        float32x4_t v412 = vaddq_f32(v1817, v1818);
        v412.i64[0] = vpaddq_f32(v412, v412).u64[0];
        v412.f32[0] = vaddv_f32(*(float32x2_t *)v412.f32);
        if (v1814 != v1816)
        {
          uint64_t v1815 = v1816 | 2;
          goto LABEL_1339;
        }
      }
      else
      {
        uint64_t v1815 = 2;
LABEL_1339:
        uint64_t v1821 = v1813 - v1815;
        v1822 = (float *)&v2865[v1815 - 1];
        do
        {
          float v1823 = *v1822++;
          v412.f32[0] = v1823 + v412.f32[0];
          --v1821;
        }
        while (v1821);
      }
    }
    float v1755 = v1791 / v1732.f32[0];
    float32x2_t v1824 = vneg_f32((float32x2_t)__PAIR64__(v575.u32[0], v574.u32[0]));
    v576.f32[0] = v412.f32[0] / v1732.f32[0];
    if (v1690 < 4)
    {
      uint64_t v1825 = 0;
      goto LABEL_1346;
    }
    uint64_t v1825 = v1690 & 0x7FFFFFFC;
    v528.f32[0] = 1.0 / v1755;
    float32x4_t v1732 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
    v412.f32[0] = 1.0 / v576.f32[0];
    float32x4_t v1826 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v412.f32, 0);
    v1827 = &v2873;
    v1828 = &v2842;
    uint64_t v1829 = v1690 & 0xFFFFFFFC;
    do
    {
      float32x4x3_t v2992 = vld3q_f32(v1828);
      v1828 += 12;
      float32x4_t v1830 = vmulq_f32(v2992.val[1], (float32x4_t)0);
      v2999.val[0] = vmlaq_f32(vmlaq_f32(v1830, v1732, v2992.val[0]), v1732, vmulq_n_f32(v2992.val[2], v1824.f32[0]));
      float32x4_t v1831 = vmulq_f32(v2992.val[0], (float32x4_t)0);
      float32x4_t v1832 = vaddq_f32(v1830, v1831);
      v2999.val[1] = vmlaq_f32(vmlaq_f32(v1831, v1826, v2992.val[1]), v1826, vmulq_lane_f32(v2992.val[2], v1824, 1));
      v2999.val[2] = vaddq_f32(v1832, v2992.val[2]);
      vst3q_f32(v1827, v2999);
      v1827 += 12;
      v1829 -= 4;
    }
    while (v1829);
    if (v1825 != v1690)
    {
LABEL_1346:
      __asm { FMOV            V2.2S, #1.0 }
      *(float32x2_t *)v1732.f32 = vdiv_f32(_D2, (float32x2_t)__PAIR64__(v576.u32[0], LODWORD(v1755)));
      uint64_t v1834 = v1690 - v1825;
      uint64_t v1835 = 12 * v1825 + 8;
      v1836 = (float *)((char *)&v2873 + v1835);
      v1837 = (float *)((char *)&v2842 + v1835);
      do
      {
        float v1838 = *v1837;
        float32x2_t v1839 = *(float32x2_t *)(v1837 - 2);
        float32x2_t v1840 = vmul_f32(v1839, 0);
        *((float32x2_t *)v1836 - 1) = vmla_f32(vmla_f32((float32x2_t)vrev64_s32((int32x2_t)v1840), *(float32x2_t *)v1732.f32, v1839), *(float32x2_t *)v1732.f32, vmul_n_f32(v1824, *v1837));
        float *v1836 = vaddv_f32(v1840) + v1838;
        v1836 += 3;
        v1837 += 3;
        --v1834;
      }
      while (v1834);
    }
  }
  *(float *)&int v2777 = v1755;
  float32x4_t v2780 = v576;
  uint64_t v2864 = v1730 | 0x900000000;
  int v2786 = v574.i32[0];
  float __na = *(float *)v575.i32;
  if (18 * (int)v1690 > 0)
  {
    bzero(v2972, 8 * (18 * v1690));
    uint64_t v1690 = v2758;
  }
  uint64_t v2863 = v1690 | 0x300000000;
  if ((int)v1690 < 1)
  {
    uint64_t v1842 = (int)v1730;
    if ((int)v1730 > 0)
    {
      int v1734 = 0;
      BOOL v1843 = 1;
      int v1844 = v1730;
      goto LABEL_1525;
    }
    uint64_t v2706 = (int)v1730;
    goto LABEL_1554;
  }
  if (v1690 >= 9)
  {
    uint64_t v1845 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1845 = 8;
    }
    uint64_t v1841 = v1690 - v1845;
    v1846 = (unsigned long long *)((char *)&v2880 + 12);
    v1847 = (const float *)v2836;
    uint64_t v1848 = v1841;
    do
    {
      v1849 = v1847 + 24;
      unsigned long long v1851 = (unsigned __int128)vld3q_f32(v1847);
      v1850 = v1847 + 12;
      *(v1846 - 1) = v1851;
      unsigned long long v1852 = (unsigned __int128)vld3q_f32(v1850);
      unsigned long long *v1846 = v1852;
      v1846 += 2;
      v1847 = v1849;
      v1848 -= 8;
    }
    while (v1848);
  }
  else
  {
    uint64_t v1841 = 0;
  }
  uint64_t v1853 = v1690 - v1841;
  v1854 = &v2879 + v1841;
  v1855 = (int *)&v2836[12 * v1841];
  do
  {
    int v1856 = *v1855;
    v1855 += 3;
    *(_DWORD *)v1854++ = v1856;
    --v1853;
  }
  while (v1853);
  if (v1690 >= 9)
  {
    uint64_t v1858 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1858 = 8;
    }
    uint64_t v1857 = v1690 - v1858;
    v1859 = (unsigned long long *)((char *)&v2880 + 4 * (int)v1690 + 12);
    v1860 = (const float *)&v2838;
    uint64_t v1861 = v1857;
    do
    {
      v1862 = v1860 - 12;
      unsigned long long v1863 = (unsigned __int128)vld3q_f32(v1862);
      unsigned long long v1864 = (unsigned __int128)vld3q_f32(v1860);
      *(v1859 - 1) = v1863;
      unsigned long long *v1859 = v1864;
      v1859 += 2;
      v1860 += 24;
      v1861 -= 8;
    }
    while (v1861);
  }
  else
  {
    uint64_t v1857 = 0;
  }
  uint64_t v1865 = v1690 - v1857;
  v1866 = &v2879 + v1857 + (int)v1690;
  v1867 = (int *)&v2836[12 * v1857 + 4];
  do
  {
    int v1868 = *v1867;
    v1867 += 3;
    *(_DWORD *)v1866++ = v1868;
    --v1865;
  }
  while (v1865);
  if (v1690 >= 9)
  {
    uint64_t v1870 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1870 = 8;
    }
    uint64_t v1869 = v1690 - v1870;
    v1871 = (unsigned long long *)((char *)&v2880 + 8 * (int)v1690 + 12);
    v1872 = (const float *)v2839;
    uint64_t v1873 = v1869;
    do
    {
      v1874 = v1872 - 12;
      unsigned long long v1875 = (unsigned __int128)vld3q_f32(v1874);
      unsigned long long v1876 = (unsigned __int128)vld3q_f32(v1872);
      *(v1871 - 1) = v1875;
      unsigned long long *v1871 = v1876;
      v1871 += 2;
      v1872 += 24;
      v1873 -= 8;
    }
    while (v1873);
  }
  else
  {
    uint64_t v1869 = 0;
  }
  uint64_t v1877 = v1690 - v1869;
  uint64_t v1878 = 8 * (int)v1690;
  v1879 = (_DWORD *)((char *)&v2879 + 4 * v1869 + v1878);
  v1880 = (int *)&v2836[12 * v1869 + 8];
  do
  {
    int v1881 = *v1880;
    v1880 += 3;
    *v1879++ = v1881;
    --v1877;
  }
  while (v1877);
  LODWORD(v1882) = 3 * v1690;
  if (3 * (int)v1690 <= 1) {
    uint64_t v1882 = 1;
  }
  else {
    uint64_t v1882 = v1882;
  }
  if (v1882 < 8)
  {
    uint64_t v1883 = 0;
    goto LABEL_1385;
  }
  uint64_t v1883 = v1882 & 0x7FFFFFF8;
  v1884 = (float64x2_t *)&v2952[8];
  v1885 = (float32x2_t *)((char *)&v2880 + 12);
  uint64_t v1886 = v1883;
  do
  {
    float32x4_t v1887 = *(float32x4_t *)v1885[-2].f32;
    float64x2_t v1888 = vcvtq_f64_f32(*v1885);
    float64x2_t v1889 = vcvt_hight_f64_f32(*(float32x4_t *)v1885->f32);
    v1884[-2] = vcvtq_f64_f32(*(float32x2_t *)v1887.f32);
    v1884[-1] = vcvt_hight_f64_f32(v1887);
    float64x2_t *v1884 = v1888;
    v1884[1] = v1889;
    v1884 += 4;
    v1885 += 4;
    v1886 -= 8;
  }
  while (v1886);
  if (v1883 != v1882)
  {
LABEL_1385:
    uint64_t v1890 = v1882 - v1883;
    v1891 = (double *)(&v2948 + 2 * v1883);
    v1892 = &v2879 + v1883;
    do
    {
      float v1893 = *v1892++;
      *v1891++ = v1893;
      --v1890;
    }
    while (v1890);
  }
  char v1894 = (int)v1730 > 0;
  if (v1690 < 2)
  {
    uint64_t v1895 = 0;
    goto LABEL_1392;
  }
  uint64_t v1896 = 0;
  uint64_t v1895 = v1690 & 0xFFFFFFFE;
  do
  {
    v1897 = &v2948 + 2 * v1896;
    uint64_t v1898 = *((void *)v1897 + 1);
    *((void *)v2972 + (int)(v1896 << v1894)) = *(void *)v1897;
    *((void *)v2972 + (((int)v1896 + 1) << v1894)) = v1898;
    v1896 += 2;
  }
  while (v1895 != v1896);
  for (; v1690 != v1895; ++v1895)
LABEL_1392:
    *((void *)v2972 + (int)(v1895 << v1894)) = *((void *)&v2948 + v1895);
  if (v1690 < 2)
  {
    uint64_t v1899 = 0;
    goto LABEL_1398;
  }
  uint64_t v1900 = 0;
  uint64_t v1899 = v1690 & 0xFFFFFFFE;
  do
  {
    v1901 = &v2948 + 2 * (int)v1690 + 2 * v1900;
    uint64_t v1902 = *((void *)v1901 + 1);
    *((void *)v2972 + (int)v1730 + (uint64_t)(int)(v1900 << v1894)) = *(void *)v1901;
    *((void *)v2972 + (int)v1730 + (uint64_t)(((int)v1900 + 1) << v1894)) = v1902;
    v1900 += 2;
  }
  while (v1899 != v1900);
  for (; v1690 != v1899; ++v1899)
LABEL_1398:
    *((void *)v2972 + (int)v1730 + (uint64_t)(int)(v1899 << v1894)) = *((void *)&v2948 + (int)v1690 + v1899);
  uint64_t v2706 = (int)v1730;
  uint64_t v1903 = (int)v1730;
  if (v1690 < 2)
  {
    uint64_t v1904 = 0;
    goto LABEL_1404;
  }
  uint64_t v1905 = 0;
  uint64_t v1904 = v1690 & 0xFFFFFFFE;
  do
  {
    v1906 = &v2948 + 4 * (int)v1690 + 2 * v1905;
    uint64_t v1907 = *((void *)v1906 + 1);
    *((void *)&v2972[v1903] + (int)(v1905 << v1894)) = *(void *)v1906;
    *((void *)&v2972[v1903] + (((int)v1905 + 1) << v1894)) = v1907;
    v1905 += 2;
  }
  while (v1904 != v1905);
  for (; v1690 != v1904; ++v1904)
LABEL_1404:
    *((void *)&v2972[v1903] + (int)(v1904 << v1894)) = *((void *)&v2948 + 2 * (int)v1690 + v1904);
  int v1908 = (int)v1730 > 1;
  int v1909 = v1908 | (6 * v1690);
  if (v1690 < 2)
  {
    uint64_t v1910 = 0;
    goto LABEL_1410;
  }
  uint64_t v1911 = 0;
  uint64_t v1910 = v1690 & 0xFFFFFFFE;
  do
  {
    v1912 = &v2948 + 2 * v1911;
    uint64_t v1913 = *((void *)v1912 + 1);
    *((void *)v2972 + v1909 + (v1911 << v1908)) = *(void *)v1912;
    *((void *)v2972 + v1909 + (((int)v1911 + 1) << v1908)) = v1913;
    v1911 += 2;
  }
  while (v1910 != v1911);
  for (; v1690 != v1910; ++v1910)
LABEL_1410:
    *((void *)v2972 + v1909 + (v1910 << v1908)) = *((void *)&v2948 + v1910);
  int v1914 = v1908 | (8 * v1690);
  if (v1690 < 2)
  {
    uint64_t v1915 = 0;
    goto LABEL_1416;
  }
  uint64_t v1916 = 0;
  uint64_t v1915 = v1690 & 0xFFFFFFFE;
  do
  {
    v1917 = &v2948 + 2 * (int)v1690 + 2 * v1916;
    uint64_t v1918 = *((void *)v1917 + 1);
    *((void *)v2972 + v1914 + (v1916 << v1908)) = *(void *)v1917;
    *((void *)v2972 + v1914 + (((int)v1916 + 1) << v1908)) = v1918;
    v1916 += 2;
  }
  while (v1915 != v1916);
  for (; v1690 != v1915; ++v1915)
LABEL_1416:
    *((void *)v2972 + v1914 + (v1915 << v1908)) = *((void *)&v2948 + (int)v1690 + v1915);
  int v1919 = v1908 | (10 * v1690);
  if (v1690 < 2)
  {
    uint64_t v1920 = 0;
    goto LABEL_1422;
  }
  uint64_t v1921 = 0;
  uint64_t v1920 = v1690 & 0xFFFFFFFE;
  do
  {
    v1922 = &v2948 + 4 * (int)v1690 + 2 * v1921;
    uint64_t v1923 = *((void *)v1922 + 1);
    *((void *)v2972 + v1919 + (v1921 << v1908)) = *(void *)v1922;
    *((void *)v2972 + v1919 + (((int)v1921 + 1) << v1908)) = v1923;
    v1921 += 2;
  }
  while (v1920 != v1921);
  for (; v1690 != v1920; ++v1920)
LABEL_1422:
    *((void *)v2972 + v1919 + (v1920 << v1908)) = *((void *)&v2948 + 2 * (int)v1690 + v1920);
  if (v1690 >= 9)
  {
    uint64_t v1925 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1925 = 8;
    }
    uint64_t v1924 = v1690 - v1925;
    v1926 = &v2887;
    v1927 = &v2873;
    uint64_t v1928 = v1924;
    do
    {
      v1929 = v1927 + 24;
      unsigned long long v1931 = (unsigned __int128)vld3q_f32(v1927);
      v1930 = v1927 + 12;
      *((_OWORD *)v1926 - 1) = v1931;
      unsigned long long v1932 = (unsigned __int128)vld3q_f32(v1930);
      *(_OWORD *)v1926 = v1932;
      v1926 += 8;
      v1927 = v1929;
      v1928 -= 8;
    }
    while (v1928);
  }
  else
  {
    uint64_t v1924 = 0;
  }
  uint64_t v1933 = v1690 - v1924;
  v1934 = &v2884 + v1924;
  v1935 = (int *)(&v2873 + 3 * v1924);
  do
  {
    int v1936 = *v1935;
    v1935 += 3;
    *(_DWORD *)v1934++ = v1936;
    --v1933;
  }
  while (v1933);
  if (v1690 >= 9)
  {
    uint64_t v1938 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1938 = 8;
    }
    uint64_t v1937 = v1690 - v1938;
    v1939 = &v2887 + (int)v1690;
    v1940 = &v2873;
    uint64_t v1941 = v1937;
    do
    {
      v1942 = v1940 + 24;
      unsigned long long v1944 = (unsigned __int128)vld3q_f32(v1940);
      v1943 = v1940 + 12;
      *((_OWORD *)v1939 - 1) = v1944;
      unsigned long long v1945 = (unsigned __int128)vld3q_f32(v1943);
      *(_OWORD *)v1939 = v1945;
      v1939 += 8;
      v1940 = v1942;
      v1941 -= 8;
    }
    while (v1941);
  }
  else
  {
    uint64_t v1937 = 0;
  }
  uint64_t v1946 = v1690 - v1937;
  v1947 = &v2884 + v1937 + (int)v1690;
  v1948 = (int *)(&v2873 + 3 * v1937);
  do
  {
    int v1949 = *v1948;
    v1948 += 3;
    *(_DWORD *)v1947++ = v1949;
    --v1946;
  }
  while (v1946);
  if (v1690 >= 9)
  {
    uint64_t v1951 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1951 = 8;
    }
    uint64_t v1950 = v1690 - v1951;
    v1952 = &v2887 + 2 * (int)v1690;
    v1953 = &v2873;
    uint64_t v1954 = v1950;
    do
    {
      v1955 = v1953 + 24;
      unsigned long long v1957 = (unsigned __int128)vld3q_f32(v1953);
      v1956 = v1953 + 12;
      *((_OWORD *)v1952 - 1) = v1957;
      unsigned long long v1958 = (unsigned __int128)vld3q_f32(v1956);
      *(_OWORD *)v1952 = v1958;
      v1952 += 8;
      v1953 = v1955;
      v1954 -= 8;
    }
    while (v1954);
  }
  else
  {
    uint64_t v1950 = 0;
  }
  uint64_t v1959 = v1690 - v1950;
  v1960 = (_DWORD *)((char *)&v2884 + 4 * v1950 + v1878);
  v1961 = (int *)(&v2873 + 3 * v1950);
  do
  {
    int v1962 = *v1961;
    v1961 += 3;
    *v1960++ = v1962;
    --v1959;
  }
  while (v1959);
  uint64_t v1963 = 3 * (int)v1730;
  if (v1690 < 2)
  {
    uint64_t v1964 = 0;
    goto LABEL_1452;
  }
  uint64_t v1965 = 0;
  uint64_t v1964 = v1690 & 0xFFFFFFFE;
  do
  {
    v1966 = &v2884 + v1965;
    v1967 = &v2879 + v1965;
    double v1968 = (float)-(float)(v1966[1] * v1967[1]);
    *((double *)&v2972[v1963] + (int)(v1965 << v1894)) = (float)-(float)(*v1966 * *v1967);
    *((double *)&v2972[v1963] + (((int)v1965 + 1) << v1894)) = v1968;
    v1965 += 2;
  }
  while (v1964 != v1965);
  for (; v1690 != v1964; ++v1964)
LABEL_1452:
    *((double *)&v2972[v1963] + (int)(v1964 << v1894)) = (float)-(float)(*(&v2884 + v1964) * *(&v2879 + v1964));
  unint64_t v1969 = 8 * (int)v1730;
  uint64_t v1970 = 7 * (int)v1730;
  uint64_t v1971 = 4 * (int)v1690;
  if (v1690 < 2)
  {
    uint64_t v1972 = 0;
    goto LABEL_1458;
  }
  uint64_t v1973 = 0;
  uint64_t v1972 = v1690 & 0xFFFFFFFE;
  v1974 = (float *)((char *)&v2879 + v1971 + 4);
  v1975 = (float *)((char *)&v2884 + v1971 + 4);
  do
  {
    double v1976 = (float)-(float)(*v1975 * *v1974);
    *((double *)v2972 + v1970 + (int)(v1973 << v1894)) = (float)-(float)(*(v1975 - 1) * *(v1974 - 1));
    *((double *)v2972 + v1970 + (((int)v1973 + 1) << v1894)) = v1976;
    v1973 += 2;
    v1974 += 2;
    v1975 += 2;
  }
  while (v1972 != v1973);
  for (; v1690 != v1972; ++v1972)
LABEL_1458:
    *((double *)v2972 + v1970 + (int)(v1972 << v1894)) = (float)-(float)(*(float *)((char *)&v2884
                                                                                          + 4 * v1972
                                                                                          + v1971)
                                                                               * *(float *)((char *)&v2879
                                                                                          + 4 * v1972
                                                                                          + v1971));
  if (v1690 < 2)
  {
    uint64_t v1977 = 0;
    goto LABEL_1464;
  }
  uint64_t v1978 = 0;
  uint64_t v1977 = v1690 & 0xFFFFFFFE;
  uint64_t v1979 = (8 * (int)v1690) | 4;
  v1980 = (float *)((char *)&v2879 + v1979);
  v1981 = (float *)((char *)&v2884 + v1979);
  do
  {
    double v1982 = (float)-(float)(*v1981 * *v1980);
    *((double *)&v2972[v1969 / 2] + (int)(v1978 << v1894)) = (float)-(float)(*(v1981 - 1) * *(v1980 - 1));
    *((double *)&v2972[v1969 / 2] + (((int)v1978 + 1) << v1894)) = v1982;
    v1978 += 2;
    v1980 += 2;
    v1981 += 2;
  }
  while (v1977 != v1978);
  for (; v1690 != v1977; ++v1977)
LABEL_1464:
    *((double *)&v2972[v1969 / 2] + (int)(v1977 << v1894)) = (float)-(float)(*(float *)((char *)&v2884
                                                                                              + 4 * v1977
                                                                                              + v1878)
                                                                                   * *(float *)((char *)&v2879
                                                                                              + 4 * v1977
                                                                                              + v1878));
  if (v1690 >= 9)
  {
    uint64_t v1984 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1984 = 8;
    }
    uint64_t v1983 = v1690 - v1984;
    v1985 = &v2887;
    v1986 = (const float *)v2878;
    uint64_t v1987 = v1983;
    do
    {
      v1988 = v1986 - 12;
      unsigned long long v1989 = (unsigned __int128)vld3q_f32(v1988);
      unsigned long long v1990 = (unsigned __int128)vld3q_f32(v1986);
      *((_OWORD *)v1985 - 1) = v1989;
      *(_OWORD *)v1985 = v1990;
      v1985 += 8;
      v1986 += 24;
      v1987 -= 8;
    }
    while (v1987);
  }
  else
  {
    uint64_t v1983 = 0;
  }
  uint64_t v1991 = v1690 - v1983;
  v1992 = &v2884 + v1983;
  v1993 = (int *)(&v2873 + 3 * v1983 + 1);
  do
  {
    int v1994 = *v1993;
    v1993 += 3;
    *(_DWORD *)v1992++ = v1994;
    --v1991;
  }
  while (v1991);
  if (v1690 >= 9)
  {
    uint64_t v1996 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v1996 = 8;
    }
    uint64_t v1995 = v1690 - v1996;
    v1997 = &v2887 + (int)v1690;
    v1998 = (const float *)v2878;
    uint64_t v1999 = v1995;
    do
    {
      v2000 = v1998 - 12;
      unsigned long long v2001 = (unsigned __int128)vld3q_f32(v2000);
      unsigned long long v2002 = (unsigned __int128)vld3q_f32(v1998);
      *((_OWORD *)v1997 - 1) = v2001;
      *(_OWORD *)v1997 = v2002;
      v1997 += 8;
      v1998 += 24;
      v1999 -= 8;
    }
    while (v1999);
  }
  else
  {
    uint64_t v1995 = 0;
  }
  uint64_t v2003 = v1690 - v1995;
  v2004 = &v2884 + v1995 + (int)v1690;
  v2005 = (int *)(&v2873 + 3 * v1995 + 1);
  do
  {
    int v2006 = *v2005;
    v2005 += 3;
    *(_DWORD *)v2004++ = v2006;
    --v2003;
  }
  while (v2003);
  if (v1690 >= 9)
  {
    uint64_t v2008 = v1690 & 7;
    if ((v1690 & 7) == 0) {
      uint64_t v2008 = 8;
    }
    uint64_t v2007 = v1690 - v2008;
    v2009 = &v2887 + 2 * (int)v1690;
    v2010 = (const float *)v2878;
    uint64_t v2011 = v2007;
    do
    {
      v2012 = v2010 - 12;
      unsigned long long v2013 = (unsigned __int128)vld3q_f32(v2012);
      unsigned long long v2014 = (unsigned __int128)vld3q_f32(v2010);
      *((_OWORD *)v2009 - 1) = v2013;
      *(_OWORD *)v2009 = v2014;
      v2009 += 8;
      v2010 += 24;
      v2011 -= 8;
    }
    while (v2011);
  }
  else
  {
    uint64_t v2007 = 0;
  }
  uint64_t v2015 = v1690 - v2007;
  v2016 = (_DWORD *)((char *)&v2884 + 4 * v2007 + v1878);
  v2017 = (int *)(&v2873 + 3 * v2007 + 1);
  do
  {
    int v2018 = *v2017;
    v2017 += 3;
    *v2016++ = v2018;
    --v2015;
  }
  while (v2015);
  int v2019 = v1908 | (12 * v1690);
  if (v1690 < 2)
  {
    uint64_t v2020 = 0;
    goto LABEL_1494;
  }
  uint64_t v2021 = 0;
  uint64_t v2020 = v1690 & 0xFFFFFFFE;
  do
  {
    v2022 = &v2884 + v2021;
    v2023 = &v2879 + v2021;
    double v2024 = (float)-(float)(v2022[1] * v2023[1]);
    *((double *)v2972 + v2019 + (v2021 << v1908)) = (float)-(float)(*v2022 * *v2023);
    *((double *)v2972 + v2019 + (((int)v2021 + 1) << v1908)) = v2024;
    v2021 += 2;
  }
  while (v2020 != v2021);
  for (; v1690 != v2020; ++v2020)
LABEL_1494:
    *((double *)v2972 + v2019 + (v2020 << v1908)) = (float)-(float)(*(&v2884 + v2020) * *(&v2879 + v2020));
  int v2025 = (14 * v1690) | v1908;
  if (v1690 < 2)
  {
    uint64_t v2026 = 0;
    goto LABEL_1500;
  }
  uint64_t v2027 = 0;
  uint64_t v2026 = v1690 & 0xFFFFFFFE;
  v2028 = (float *)((char *)&v2879 + v1971 + 4);
  v2029 = (float *)((char *)&v2884 + v1971 + 4);
  do
  {
    double v2030 = (float)-(float)(*v2029 * *v2028);
    *((double *)v2972 + v2025 + (v2027 << v1908)) = (float)-(float)(*(v2029 - 1) * *(v2028 - 1));
    *((double *)v2972 + v2025 + (((int)v2027 + 1) << v1908)) = v2030;
    v2027 += 2;
    v2028 += 2;
    v2029 += 2;
  }
  while (v2026 != v2027);
  if (v2026 != v1690)
  {
LABEL_1500:
    v2031 = (char *)&v2879 + v1971;
    v2032 = (char *)&v2884 + v1971;
    do
    {
      *((double *)v2972 + v2025 + (v2026 << v1908)) = (float)-(float)(*(float *)&v2032[4 * v2026]
                                                                            * *(float *)&v2031[4 * v2026]);
      ++v2026;
    }
    while (v1690 != v2026);
  }
  int v2033 = v1908 | (16 * v1690);
  if (v1690 < 2)
  {
    uint64_t v2034 = 0;
    goto LABEL_1507;
  }
  uint64_t v2035 = 0;
  uint64_t v2034 = v1690 & 0xFFFFFFFE;
  uint64_t v2036 = (8 * (int)v1690) | 4;
  v2037 = (float *)((char *)&v2879 + v2036);
  v2038 = (float *)((char *)&v2884 + v2036);
  do
  {
    *(double *)v1732.i64 = (float)-(float)(*(v2038 - 1) * *(v2037 - 1));
    double v2039 = (float)-(float)(*v2038 * *v2037);
    *((void *)v2972 + v2033 + (v2035 << v1908)) = v1732.i64[0];
    *((double *)v2972 + v2033 + (((int)v2035 + 1) << v1908)) = v2039;
    v2035 += 2;
    v2037 += 2;
    v2038 += 2;
  }
  while (v2034 != v2035);
  if (v2034 != v1690)
  {
LABEL_1507:
    v2040 = (char *)&v2879 + v1878;
    v2041 = (char *)&v2884 + v1878;
    do
    {
      *(double *)v1732.i64 = (float)-(float)(*(float *)&v2041[4 * v2034] * *(float *)&v2040[4 * v2034]);
      *((void *)v2972 + v2033 + (v2034++ << v1908)) = v1732.i64[0];
    }
    while (v1690 != v2034);
  }
  if ((int)v1690 < 5)
  {
    if ((int)v1730 >= 1)
    {
      int v1734 = 0;
      BOOL v1843 = 1;
      int v1844 = v1730;
      goto LABEL_1524;
    }
LABEL_1554:
    int v1734 = 0;
    BOOL v2705 = 0;
    LODWORD(v1736) = 0;
LABEL_1555:
    unsigned int v1735 = v1730;
    goto LABEL_1556;
  }
  BOOL v1843 = (int)v1730 > 0;
  uint64_t v2042 = 0;
  for (uint64_t ii = 0; ii != 9; ++ii)
  {
    uint64_t v2044 = 9 * ii;
    v2045 = &v2947[9 * ii];
    v2045[8] = 0;
    *((_OWORD *)v2045 + 2) = 0uLL;
    *((_OWORD *)v2045 + 3) = 0uLL;
    *(_OWORD *)v2045 = 0uLL;
    *((_OWORD *)v2045 + 1) = 0uLL;
    if ((int)v1730 >= 1)
    {
      uint64_t v2046 = v2044 + 1;
      uint64_t v2047 = v2044 + 2;
      uint64_t v2048 = v2044 + 3;
      uint64_t v2049 = v2044 + 4;
      uint64_t v2050 = v2044 + 5;
      uint64_t v2051 = v2044 + 6;
      uint64_t v2052 = v2044 + 7;
      double v2053 = *(double *)&v2947[v2044 + 1];
      double v2054 = *(double *)&v2947[v2044 + 2];
      double v2055 = *(double *)&v2947[v2044 + 3];
      double v2056 = *(double *)&v2947[v2044 + 4];
      double v2057 = *(double *)&v2947[v2044 + 5];
      double v2058 = *(double *)&v2947[v2044 + 6];
      uint64_t v2059 = v2044 + 8;
      double v2060 = *(double *)&v2947[v2052];
      double v2061 = *(double *)&v2947[v2059];
      if (v1730 > 3)
      {
        float64x2_t v2064 = (float64x2_t)(unint64_t)v2947[v2059];
        float64x2_t v2065 = (float64x2_t)(unint64_t)v2947[v2052];
        float64x2_t v2066 = (float64x2_t)*(unint64_t *)&v2058;
        float64x2_t v2067 = (float64x2_t)*(unint64_t *)&v2057;
        float64x2_t v2068 = (float64x2_t)*(unint64_t *)&v2056;
        float64x2_t v2069 = (float64x2_t)*(unint64_t *)&v2055;
        float64x2_t v2070 = (float64x2_t)*(unint64_t *)&v2054;
        float64x2_t v2071 = (float64x2_t)*(unint64_t *)&v2053;
        float64x2_t v2072 = 0uLL;
        v2073 = (float64x2_t *)v2972;
        uint64_t v2074 = v1730 & 0xFFFFFFFC;
        float64x2_t v2075 = 0uLL;
        float64x2_t v2076 = 0uLL;
        float64x2_t v2077 = 0uLL;
        float64x2_t v2078 = 0uLL;
        float64x2_t v2079 = 0uLL;
        float64x2_t v2080 = 0uLL;
        float64x2_t v2081 = 0uLL;
        float64x2_t v2082 = 0uLL;
        float64x2_t v2083 = 0uLL;
        do
        {
          float64x2_t v2084 = *(float64x2_t *)((char *)v2073 + v2042);
          float64x2_t v2085 = *(float64x2_t *)((char *)v2073 + v2042 + 16);
          float64x2_t v2082 = vmlaq_f64(v2082, v2084, *v2073);
          float64x2_t v2083 = vmlaq_f64(v2083, v2085, v2073[1]);
          float64x2_t v2071 = vmlaq_f64(v2071, v2084, *(float64x2_t *)((char *)v2073 + 8 * (int)v1730));
          float64x2_t v2081 = vmlaq_f64(v2081, v2085, *(float64x2_t *)((char *)v2073 + v1969 + 16));
          v2086 = (float64x2_t *)((char *)v2073 + v1969 + v1969);
          float64x2_t v2070 = vmlaq_f64(v2070, v2084, *v2086);
          float64x2_t v2080 = vmlaq_f64(v2080, v2085, v2086[1]);
          v2087 = (float64x2_t *)((char *)v2086 + v1969);
          float64x2_t v2069 = vmlaq_f64(v2069, v2084, *v2087);
          float64x2_t v2079 = vmlaq_f64(v2079, v2085, v2087[1]);
          v2088 = (float64x2_t *)((char *)v2087 + v1969);
          float64x2_t v2068 = vmlaq_f64(v2068, v2084, *v2088);
          float64x2_t v2078 = vmlaq_f64(v2078, v2085, v2088[1]);
          v2089 = (float64x2_t *)((char *)v2088 + v1969);
          float64x2_t v2067 = vmlaq_f64(v2067, v2084, *v2089);
          float64x2_t v2077 = vmlaq_f64(v2077, v2085, v2089[1]);
          v2090 = (float64x2_t *)((char *)v2089 + v1969);
          float64x2_t v2066 = vmlaq_f64(v2066, v2084, *v2090);
          float64x2_t v2076 = vmlaq_f64(v2076, v2085, v2090[1]);
          v2091 = (float64x2_t *)((char *)v2090 + v1969);
          float64x2_t v2065 = vmlaq_f64(v2065, v2084, *v2091);
          float64x2_t v2075 = vmlaq_f64(v2075, v2085, v2091[1]);
          v2092 = (float64x2_t *)((char *)v2091 + v1969);
          float64x2_t v2064 = vmlaq_f64(v2064, v2084, *v2092);
          float64x2_t v2072 = vmlaq_f64(v2072, v2085, v2092[1]);
          v2073 += 2;
          v2074 -= 4;
        }
        while (v2074);
        double v2063 = vaddvq_f64(vaddq_f64(v2083, v2082));
        double v2053 = vaddvq_f64(vaddq_f64(v2081, v2071));
        double v2054 = vaddvq_f64(vaddq_f64(v2080, v2070));
        double v2055 = vaddvq_f64(vaddq_f64(v2079, v2069));
        double v2056 = vaddvq_f64(vaddq_f64(v2078, v2068));
        double v2057 = vaddvq_f64(vaddq_f64(v2077, v2067));
        double v2058 = vaddvq_f64(vaddq_f64(v2076, v2066));
        double v2060 = vaddvq_f64(vaddq_f64(v2075, v2065));
        double v2061 = vaddvq_f64(vaddq_f64(v2072, v2064));
        uint64_t v2062 = v1730 & 0xFFFFFFFC;
        if (v2062 == v1730) {
          goto LABEL_1511;
        }
      }
      else
      {
        uint64_t v2062 = 0;
        double v2063 = 0.0;
      }
      do
      {
        double v2093 = *(double *)((char *)v2972 + 8 * v2062 + v2042);
        v2094 = (double *)v2972 + v2062;
        double v2063 = v2063 + *v2094 * v2093;
        v2095 = &v2094[v1969 / 8];
        double v2053 = v2053 + *v2095 * v2093;
        v2096 = &v2095[v1969 / 8];
        double v2054 = v2054 + *v2096 * v2093;
        v2097 = &v2096[v1969 / 8];
        double v2055 = v2055 + *v2097 * v2093;
        v2098 = &v2097[v1969 / 8];
        double v2056 = v2056 + *v2098 * v2093;
        v2099 = &v2098[v1969 / 8];
        double v2057 = v2057 + *v2099 * v2093;
        v2100 = &v2099[v1969 / 8];
        double v2058 = v2058 + *v2100 * v2093;
        v2101 = &v2100[v1969 / 8];
        double v2060 = v2060 + *v2101 * v2093;
        double v2061 = v2061 + v2101[(int)v1730] * v2093;
        ++v2062;
      }
      while (v1730 != v2062);
LABEL_1511:
      *(double *)&v2947[v2046] = v2053;
      *(double *)&v2947[v2047] = v2054;
      *(double *)&v2947[v2048] = v2055;
      *(double *)&v2947[v2049] = v2056;
      *(double *)&v2947[v2050] = v2057;
      *(double *)&v2947[v2051] = v2058;
      *(double *)v2045 = v2063;
      *(double *)&v2947[v2052] = v2060;
      *(double *)&v2947[v2059] = v2061;
    }
    v2042 += v1969;
  }
  uint64_t v2864 = 0x900000009;
  memcpy(v2972, v2947, 0x288uLL);
  int v1844 = 9;
  int v1734 = 1;
LABEL_1524:
  uint64_t v1842 = (int)v1730;
LABEL_1525:
  uint64_t v2102 = 0;
  char v2103 = 0;
  LODWORD(v1736) = 9 * v1844;
  if (9 * v1844 <= 1) {
    uint64_t v1736 = 1;
  }
  else {
    uint64_t v1736 = v1736;
  }
  BOOL v2705 = v1843;
  uint64_t v2706 = v1842;
  do
  {
    while ((v2103 & 1) == 0)
    {
      v1732.i64[0] = *((void *)v2972 + v2102);
      if (fabs(*(double *)v1732.i64) == INFINITY) {
        break;
      }
      char v2103 = 0;
      if (++v2102 == v1736) {
        goto LABEL_1555;
      }
    }
    ++v2102;
    char v2103 = 1;
  }
  while (v2102 != v1736);
  LODWORD(v2788) = v1736;
  HIDWORD(v2976) = 9;
  LODWORD(v2976) = v1844;
  if ((_BYTE)v1844) {
    bzero(v2979, 72 * v1844);
  }
  coder::internal::b_svd((coder::internal *)v2979, &v2976, (const int *)v2981, (double *)&v2973, (int *)v2977, &v2788, (int *)&v2974, n, v1732.f32[0]);
  uint64_t v2863 = v2973;
  uint64_t v2111 = (HIDWORD(v2973) * v2973);
  double v2112 = *(double *)&rtNaN;
  uint64_t v2113 = v2758;
  float v2114 = *(float *)&v2786;
  float v2115 = *(float *)&v2777;
  if ((int)v2111 >= 1)
  {
    if (v2111 <= 3)
    {
      uint64_t v2116 = 0;
      goto LABEL_1542;
    }
    uint64_t v2116 = v2111 & 0x7FFFFFFC;
    int64x2_t v2117 = vdupq_lane_s64(rtNaN, 0);
    v2118 = (int64x2_t *)v2967;
    uint64_t v2119 = v2111 & 0xFFFFFFFC;
    do
    {
      v2118[-1] = v2117;
      int64x2_t *v2118 = v2117;
      v2118 += 2;
      v2119 -= 4;
    }
    while (v2119);
    if (v2116 != v2111)
    {
LABEL_1542:
      uint64_t v2120 = v2111 - v2116;
      v2121 = (double *)&v2966[v2116];
      do
      {
        *v2121++ = v2112;
        --v2120;
      }
      while (v2120);
    }
  }
  uint64_t v2122 = LODWORD(v2788);
  if (SLODWORD(v2788) >= 1)
  {
    if (LODWORD(v2788) <= 3)
    {
      uint64_t v2123 = 0;
      goto LABEL_1550;
    }
    uint64_t v2123 = LODWORD(v2788) & 0xFFFFFFFC;
    int64x2_t v2124 = vdupq_lane_s64(*(uint64_t *)&v2112, 0);
    v2125 = (int64x2_t *)&v2978;
    uint64_t v2126 = v2123;
    do
    {
      v2125[-1] = v2124;
      int64x2_t *v2125 = v2124;
      v2125 += 2;
      v2126 -= 4;
    }
    while (v2126);
    if (v2123 != v2122)
    {
LABEL_1550:
      uint64_t v2127 = v2122 - v2123;
      v2128 = (double *)&v2977[v2123];
      do
      {
        *v2128++ = v2112;
        --v2127;
      }
      while (v2127);
    }
  }
  *(double *)v2947 = v2112;
  *(double *)&v2947[1] = v2112;
  *(double *)&v2947[2] = v2112;
  *(double *)&v2947[3] = v2112;
  *(double *)&v2947[4] = v2112;
  *(double *)&v2947[5] = v2112;
  *(double *)&v2947[6] = v2112;
  *(double *)&v2947[7] = v2112;
  *(double *)&v2947[8] = v2112;
  *(double *)&v2947[9] = v2112;
  *(double *)&v2947[10] = v2112;
  *(double *)&v2947[11] = v2112;
  *(double *)&v2947[12] = v2112;
  *(double *)&v2947[13] = v2112;
  *(double *)&v2947[14] = v2112;
  *(double *)&v2947[15] = v2112;
  *(double *)&v2947[16] = v2112;
  *(double *)&v2947[17] = v2112;
  *(double *)&v2947[18] = v2112;
  *(double *)&v2947[19] = v2112;
  *(double *)&v2947[20] = v2112;
  *(double *)&v2947[21] = v2112;
  *(double *)&v2947[22] = v2112;
  *(double *)&v2947[23] = v2112;
  *(double *)&v2947[24] = v2112;
  *(double *)&v2947[25] = v2112;
  *(double *)&v2947[26] = v2112;
  *(double *)&v2947[27] = v2112;
  *(double *)&v2947[28] = v2112;
  *(double *)&v2947[29] = v2112;
  *(double *)&v2947[30] = v2112;
  *(double *)&v2947[31] = v2112;
  *(double *)&v2947[32] = v2112;
  *(double *)&v2947[33] = v2112;
  *(double *)&v2947[34] = v2112;
  *(double *)&v2947[35] = v2112;
  *(double *)&v2947[36] = v2112;
  *(double *)&v2947[37] = v2112;
  *(double *)&v2947[38] = v2112;
  *(double *)&v2947[39] = v2112;
  *(double *)&v2947[40] = v2112;
  *(double *)&v2947[41] = v2112;
  *(double *)&v2947[42] = v2112;
  *(double *)&v2947[43] = v2112;
  *(double *)&v2947[44] = v2112;
  *(double *)&v2947[45] = v2112;
  *(double *)&v2947[46] = v2112;
  *(double *)&v2947[47] = v2112;
  *(double *)&v2947[48] = v2112;
  *(double *)&v2947[49] = v2112;
  *(double *)&v2947[50] = v2112;
  *(double *)&v2947[51] = v2112;
  *(double *)&v2947[52] = v2112;
  *(double *)&v2947[53] = v2112;
  *(double *)&v2947[54] = v2112;
  *(double *)&v2947[55] = v2112;
  *(double *)&v2947[56] = v2112;
  *(double *)&v2947[57] = v2112;
  *(double *)&v2947[58] = v2112;
  *(double *)&v2947[59] = v2112;
  *(double *)&v2947[60] = v2112;
  *(double *)&v2947[61] = v2112;
  *(double *)&v2947[62] = v2112;
  *(double *)&v2947[63] = v2112;
  *(double *)&v2947[64] = v2112;
  *(double *)&v2947[65] = v2112;
  *(double *)&v2947[66] = v2112;
  *(double *)&v2947[67] = v2112;
  *(double *)&v2947[68] = v2112;
  *(double *)&v2947[69] = v2112;
  *(double *)&v2947[70] = v2112;
  *(double *)&v2947[71] = v2112;
  *(double *)&v2947[72] = v2112;
  *(double *)&v2947[73] = v2112;
  *(double *)&v2947[74] = v2112;
  *(double *)&v2947[75] = v2112;
  *(double *)&v2947[76] = v2112;
  unsigned int v2129 = v1730;
  double v2130 = v2112;
  *(double *)&v2947[77] = v2112;
  double v2131 = v2112;
  double v2132 = v2112;
  *(double *)&v2947[78] = v2112;
  double v2133 = v2112;
  double v2134 = v2112;
  *(double *)&v2947[79] = v2112;
  *(double *)&long long v2104 = v2112;
  double v2135 = v2112;
  double v2136 = v2112;
  *(double *)&v2947[80] = v2112;
LABEL_1557:
  *(double *)&long long v2105 = 1.0 / v2136;
  *(double *)&long long v2104 = *(double *)&v2104 * (1.0 / v2136);
  double v2143 = v2112 * (1.0 / v2136);
  float v2137 = v2135 * (1.0 / v2136);
  float v2138 = v2133 * (1.0 / v2136);
  float v2139 = v2130 * (1.0 / v2136);
  float v2140 = (float)((float)(v2138 * 0.0) + (float)(v2115 * v2137)) + (float)(v2114 * v2139);
  *(float *)&long long v2104 = *(double *)&v2104;
  float v2141 = v2132 * (1.0 / v2136);
  float v2142 = v2141 * 0.0;
  *(float *)&double v2143 = v2143;
  float v2144 = (float)((float)(v2141 * 0.0) + (float)(v2115 * *(float *)&v2104)) + (float)(v2114 * *(float *)&v2143);
  float v2145 = v2134 * (1.0 / v2136);
  float v2146 = v2131 * (1.0 / v2136);
  float v2147 = v2146 * 0.0;
  float v2148 = v2136 * (1.0 / v2136);
  float v2149 = (float)((float)(v2146 * 0.0) + (float)(v2114 * v2148)) + (float)(v2115 * v2145);
  float v2150 = v2137 * 0.0;
  float32x4_t v2151 = v2780;
  float v2152 = (float)(v2150 + (float)(v2780.f32[0] * v2138)) + (float)(__na * v2139);
  float v2153 = (float)((float)(*(float *)&v2104 * 0.0) + (float)(v2780.f32[0] * v2141)) + (float)(__na * *(float *)&v2143);
  float v2154 = v2145 * 0.0;
  float v2155 = (float)((float)(v2145 * 0.0) + (float)(__na * v2148)) + (float)(v2780.f32[0] * v2146);
  float v2156 = (float)((float)(v2138 * 0.0) + v2150) + v2139;
  float v2157 = (float)(v2142 + (float)(*(float *)&v2104 * 0.0)) + *(float *)&v2143;
  float v2158 = (float)((float)(v2145 * 0.0) + v2148) + (float)(v2146 * 0.0);
  if (!v1734)
  {
    float v2558 = (float)(v2154 + v2148) + v2147;
    *(float *)&long long v2108 = (float)((float)(v2145 * 0.0) + (float)(__na * v2148)) + (float)(v2780.f32[0] * v2146);
    *(float *)&long long v2109 = v2149;
    *(float *)&long long v2110 = v2157;
    float v2559 = v2153;
    *(float *)&long long v2105 = v2144;
    v2151.f32[0] = v2156;
    *(float *)&long long v2107 = v2152;
    *(float *)&long long v2106 = v2140;
    goto LABEL_1869;
  }
  int v2159 = 0;
  uint64_t v2703 = 128 * v2113;
  uint64_t v2702 = 4 * ((int)v1730 + (int)v2113);
  if ((int)v1730 + (int)v2113 <= 1) {
    uint64_t v2160 = 1;
  }
  else {
    uint64_t v2160 = (v1730 + v2113);
  }
  uint64_t v2701 = v2160;
  uint64_t v2161 = v2113 - 1;
  uint64_t v2162 = v2113 & 3;
  if ((v2113 & 3) == 0) {
    uint64_t v2162 = 4;
  }
  uint64_t v2744 = v2113 - v2162;
  uint64_t v2163 = v2113 & 7;
  if ((v2113 & 7) == 0) {
    uint64_t v2163 = 8;
  }
  uint64_t v2778 = v2113 - v2163;
  int v2164 = 2 * v2161;
  int v2710 = (2 * (v1730 + v2113)) | 1;
  BOOL v2165 = ((v2161 & 0x40000000) != 0) != __OFSUB__(v2710 + 2 * v2161, v2710);
  int v2676 = (8 * v2113) | 1;
  BOOL v2166 = v2676 + v2164 < v2676;
  int v2677 = (10 * v2113) | 1;
  BOOL v2167 = v2677 + v2164 < v2677;
  int v2712 = (4 * (v1730 + v2113)) | 1;
  BOOL v2168 = v2712 + v2164 < v2712;
  int v2708 = (16 * v2113 - v1730) | 1;
  BOOL v2169 = v2708 + v2164 < v2708;
  BOOL v2170 = (v2161 & 0xFFFFFFFF80000000) == 0;
  if ((v2161 & 0xFFFFFFFF80000000) != 0)
  {
    BOOL v2165 = 1;
    char v2171 = 1;
  }
  else
  {
    char v2171 = v2166;
  }
  char v2172 = !v2170 || v2167;
  char v2173 = !v2170 || v2168;
  if (!v2170) {
    BOOL v2169 = 1;
  }
  unsigned int v2766 = v2113 - 1073741825;
  if (v2113 < 2) {
    BOOL v2165 = 1;
  }
  BOOL v2699 = v2165;
  if (v2113 < 2) {
    char v2174 = 1;
  }
  else {
    char v2174 = v2171;
  }
  char v2697 = v2174;
  if (v2113 < 2) {
    char v2175 = 1;
  }
  else {
    char v2175 = v2172;
  }
  char v2695 = v2175;
  if (v2113 < 2) {
    char v2176 = 1;
  }
  else {
    char v2176 = v2173;
  }
  char v2693 = v2176;
  if (v2113 < 2) {
    BOOL v2169 = 1;
  }
  BOOL v2691 = v2169;
  uint64_t v2177 = 8 * v2113;
  v2673 = (float64x2_t *)&v2952[v2177 + 8];
  uint64_t v2178 = 16 * v2113;
  v2671 = (float64x2_t *)&v2952[v2178 + 8];
  v2689 = (char *)&v2948 + v2178;
  v2686 = (char *)&v2949 + v2177 + 4;
  v2684 = (char *)&v2949 + v2178 + 4;
  int v2668 = 10 * v2113 + 3;
  *(float *)&double v2143 = (float)(v2154 + v2148) + v2147;
  *(float *)&long long v2110 = v2157;
  v2151.f32[0] = (float)((float)(v2138 * 0.0) + v2150) + v2139;
  *(float *)&long long v2108 = (float)((float)(v2145 * 0.0) + (float)(__na * v2148)) + (float)(v2780.f32[0] * v2146);
  *(float *)&long long v2104 = v2153;
  *(float *)&long long v2107 = (float)(v2150 + (float)(v2780.f32[0] * v2138)) + (float)(__na * v2139);
  *(float *)&long long v2109 = v2149;
  float v2662 = v2144;
  *(float *)&long long v2105 = v2144;
  float v2663 = v2140;
  *(float *)&long long v2106 = v2140;
  uint64_t v2179 = 8 * v2706;
  uint64_t v2180 = v2129;
  size_t v2738 = v2113 & 0xFFFFFFFC;
  uint64_t v2734 = v2113 & 0xFFFFFFFE;
  uint64_t v2731 = v2160 & 0x7FFFFFF8;
  uint64_t v2181 = v2129 & 0xFFFFFFFC;
  int v2664 = (8 * v2113) | 3;
  unsigned int v2704 = v2129;
  while (2)
  {
    long long v2751 = v2105;
    int v2713 = v2159;
    if (v2113 <= 3)
    {
      size_t v2182 = 0;
      goto LABEL_1599;
    }
    float32x4_t v2183 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2105, 0);
    float32x4_t v2184 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2109, 0);
    float32x4_t v2185 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2104, 0);
    float32x4_t v2186 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2108, 0);
    float32x4_t v2187 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2110, 0);
    v2188 = &v2873;
    v2189 = (const float *)v2836;
    size_t v2190 = v2738;
    float32x4_t v2191 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v2143, 0);
    do
    {
      float32x4x3_t v3000 = vld3q_f32(v2189);
      v2189 += 12;
      v3003.val[0] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v3000.val[0], *(float *)&v2106), v2183, v3000.val[1]), v2184, v3000.val[2]);
      v3003.val[1] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v3000.val[0], *(float *)&v2107), v2185, v3000.val[1]), v2186, v3000.val[2]);
      v3003.val[2] = vmlaq_f32(vmlaq_f32(vmulq_n_f32(v3000.val[0], v2151.f32[0]), v2187, v3000.val[1]), v2191, v3000.val[2]);
      vst3q_f32(v2188, v3003);
      v2188 += 12;
      v2190 -= 4;
    }
    while (v2190);
    size_t v2182 = v2738;
    LODWORD(v2105) = v2751;
    if (v2738 != v2113)
    {
LABEL_1599:
      uint64_t v2192 = v2113 - v2182;
      uint64_t v2193 = 12 * v2182;
      v2194 = (float *)&v2836[12 * v2182 + 8];
      v2195 = (float *)((char *)&v2874 + v2193 + 4);
      do
      {
        float v2196 = *(v2194 - 2);
        float v2197 = *(v2194 - 1);
        float v2198 = *v2194;
        v2194 += 3;
        *(v2195 - 2) = (float)((float)(v2196 * *(float *)&v2106) + (float)(v2197 * *(float *)&v2105))
                     + (float)(v2198 * *(float *)&v2109);
        *(v2195 - 1) = (float)((float)(v2196 * *(float *)&v2107) + (float)(v2197 * *(float *)&v2104))
                     + (float)(v2198 * *(float *)&v2108);
        float *v2195 = (float)((float)(v2196 * v2151.f32[0]) + (float)(v2197 * *(float *)&v2110))
               + (float)(v2198 * *(float *)&v2143);
        v2195 += 3;
        --v2192;
      }
      while (v2192);
    }
    long long v2781 = v2106;
    *(_OWORD *)__nb = v2107;
    float32x4_t v2787 = v2151;
    *(_OWORD *)v2716 = v2104;
    *(_OWORD *)v2719 = v2110;
    long long v2723 = v2109;
    long long v2726 = v2108;
    bzero(&v2960, v2703);
    if (v2758 >= 5)
    {
      v2204 = (const float *)v2836;
      v2205 = &v2884;
      v2206 = (const float *)&v2874 + 1;
      uint64_t v2207 = v2744;
      uint64_t v2201 = v2706;
      v2202 = v2689;
      do
      {
        *(float32x4x3_t *)(&v2199 - 1) = vld3q_f32(v2206);
        v2206 += 12;
        float32x4x3_t v2990 = vld3q_f32(v2204);
        v2204 += 12;
        __asm { FMOV            V6.4S, #1.0 }
        float32x4_t v2210 = vdivq_f32(_Q6, v2209);
        v3001.val[0] = vmulq_f32(v2990.val[0], v2210);
        v3001.val[1] = vmulq_f32(v2990.val[1], v2210);
        v3001.val[2] = vmulq_f32(v2990.val[2], v2210);
        vst3q_f32(v2205, v3001);
        v2205 += 12;
        v2207 -= 4;
      }
      while (v2207);
      uint64_t v2200 = v2744;
      uint64_t v2203 = v2734;
    }
    else
    {
      uint64_t v2200 = 0;
      uint64_t v2201 = v2706;
      v2202 = v2689;
      uint64_t v2203 = v2734;
    }
    uint64_t v2211 = v2758 - v2200;
    uint64_t v2212 = 12 * v2200;
    do
    {
      v2213 = (const float *)((char *)&v2874 + v2212 + 4);
      v2199.i64[0] = *(void *)&v2836[v2212];
      v2199.i32[2] = *(_DWORD *)&v2836[v2212 + 8];
      float32x4_t v2214 = vld1q_dup_f32(v2213);
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v2199 = vmulq_f32(v2199, vdivq_f32(_Q0, v2214));
      *(_DWORD *)((char *)&v2885 + v2212 + 4) = v2199.i32[2];
      *(void *)((char *)&v2884 + v2212) = v2199.i64[0];
      v2212 += 12;
      --v2211;
    }
    while (v2211);
    if (v2758 >= 9)
    {
      v2217 = &v2884;
      v2218 = (float64x2_t *)&v2952[8];
      uint64_t v2219 = v2778;
      do
      {
        v2220 = v2217;
        v2217 += 24;
        unsigned long long v2221 = (unsigned __int128)vld3q_f32(v2220);
        v2220 += 12;
        float32x4_t v2222 = vnegq_f32((float32x4_t)v2221);
        float64x2_t v2223 = vcvtq_f64_f32(*(float32x2_t *)v2222.f32);
        unsigned long long v2224 = (unsigned __int128)vld3q_f32(v2220);
        float32x4_t v2225 = vnegq_f32((float32x4_t)v2224);
        float32x4_t v2199 = (float32x4_t)vcvt_hight_f64_f32(v2222);
        v2218[-2] = v2223;
        v2218[-1] = (float64x2_t)v2199;
        float64x2_t *v2218 = vcvtq_f64_f32(*(float32x2_t *)v2225.f32);
        v2218[1] = vcvt_hight_f64_f32(v2225);
        v2218 += 4;
        v2219 -= 8;
      }
      while (v2219);
      uint64_t v2216 = v2778;
    }
    else
    {
      uint64_t v2216 = 0;
    }
    uint64_t v2226 = v2758 - v2216;
    v2227 = (double *)(&v2948 + 2 * v2216);
    v2228 = &v2884 + 3 * v2216;
    do
    {
      float v2229 = *v2228;
      v2228 += 3;
      *v2227++ = (float)-v2229;
      --v2226;
    }
    while (v2226);
    if (v2758 >= 9)
    {
      v2231 = (const float *)&v2895;
      v2232 = v2673;
      uint64_t v2233 = v2778;
      do
      {
        v2234 = v2231 - 12;
        unsigned long long v2235 = (unsigned __int128)vld3q_f32(v2234);
        unsigned long long v2236 = (unsigned __int128)vld3q_f32(v2231);
        float32x4_t v2237 = vnegq_f32((float32x4_t)v2235);
        float32x4_t v2238 = vnegq_f32((float32x4_t)v2236);
        float64x2_t v2239 = vcvtq_f64_f32(*(float32x2_t *)v2237.f32);
        float32x4_t v2199 = (float32x4_t)vcvt_hight_f64_f32(v2237);
        v2232[-2] = v2239;
        v2232[-1] = (float64x2_t)v2199;
        float64x2_t *v2232 = vcvtq_f64_f32(*(float32x2_t *)v2238.f32);
        v2232[1] = vcvt_hight_f64_f32(v2238);
        v2232 += 4;
        v2231 += 24;
        v2233 -= 8;
      }
      while (v2233);
      uint64_t v2230 = v2778;
    }
    else
    {
      uint64_t v2230 = 0;
    }
    uint64_t v2240 = v2758 - v2230;
    v2241 = (double *)(&v2948 + 2 * v2758 + 2 * v2230);
    v2242 = (float *)&v2885 + 3 * v2230;
    do
    {
      float v2243 = *v2242;
      v2242 += 3;
      *v2241++ = (float)-v2243;
      --v2240;
    }
    while (v2240);
    if (v2758 >= 9)
    {
      v2245 = (const float *)v2896;
      v2246 = v2671;
      uint64_t v2247 = v2778;
      do
      {
        v2248 = v2245 - 12;
        unsigned long long v2249 = (unsigned __int128)vld3q_f32(v2248);
        unsigned long long v2250 = (unsigned __int128)vld3q_f32(v2245);
        float32x4_t v2251 = vnegq_f32((float32x4_t)v2249);
        float32x4_t v2252 = vnegq_f32((float32x4_t)v2250);
        float64x2_t v2253 = vcvtq_f64_f32(*(float32x2_t *)v2251.f32);
        float32x4_t v2199 = (float32x4_t)vcvt_hight_f64_f32(v2251);
        v2246[-2] = v2253;
        v2246[-1] = (float64x2_t)v2199;
        float64x2_t *v2246 = vcvtq_f64_f32(*(float32x2_t *)v2252.f32);
        v2246[1] = vcvt_hight_f64_f32(v2252);
        v2246 += 4;
        v2245 += 24;
        v2247 -= 8;
      }
      while (v2247);
      uint64_t v2244 = v2778;
    }
    else
    {
      uint64_t v2244 = 0;
    }
    uint64_t v2254 = v2758 - v2244;
    v2255 = (double *)&v2202[8 * v2244];
    v2256 = (float *)&v2885 + 3 * v2244 + 1;
    do
    {
      float v2257 = *v2256;
      v2256 += 3;
      *v2255++ = (float)-v2257;
      --v2254;
    }
    while (v2254);
    if (v2766 < 0xC0000001)
    {
      uint64_t v2258 = 0;
      goto LABEL_1634;
    }
    v2259 = &v2961;
    v2260 = (uint64_t *)((char *)&v2949 + 4);
    uint64_t v2261 = v2203;
    do
    {
      uint64_t v2262 = *v2260;
      v2259[-1].i64[0] = *(v2260 - 1);
      v2259->i64[0] = v2262;
      v2259 += 2;
      v2260 += 2;
      v2261 -= 2;
    }
    while (v2261);
    uint64_t v2258 = v2203;
    if (v2203 != v2758)
    {
LABEL_1634:
      uint64_t v2263 = v2758 - v2258;
      int v2264 = 2 * v2258;
      v2265 = &v2948 + 2 * v2258;
      do
      {
        uint64_t v2266 = *(void *)v2265;
        v2265 += 2;
        *((void *)&v2960 + v2264) = v2266;
        v2264 += 2;
        --v2263;
      }
      while (v2263);
    }
    if (v2699)
    {
      uint64_t v2267 = 0;
      goto LABEL_1641;
    }
    int v2268 = v2710;
    v2269 = (uint64_t *)((char *)&v2949 + 4);
    uint64_t v2270 = v2203;
    do
    {
      *((void *)&v2960 + v2268) = *(v2269 - 1);
      uint64_t v2271 = *v2269;
      v2269 += 2;
      *((void *)&v2960 + v2268 + 2) = v2271;
      v2268 += 4;
      v2270 -= 2;
    }
    while (v2270);
    uint64_t v2267 = v2203;
    if (v2203 != v2758)
    {
LABEL_1641:
      uint64_t v2272 = v2758 - v2267;
      int v2273 = v2710 + 2 * v2267;
      v2274 = &v2948 + 2 * v2267;
      do
      {
        uint64_t v2275 = *(void *)v2274;
        v2274 += 2;
        *((void *)&v2960 + v2273) = v2275;
        v2273 += 2;
        --v2272;
      }
      while (v2272);
    }
    if (v2766 < 0xC0000001)
    {
      uint64_t v2276 = 0;
      goto LABEL_1648;
    }
    v2277 = (uint64_t *)v2686;
    v2278 = (uint64_t *)&v2961 + v2706;
    uint64_t v2279 = v2203;
    do
    {
      uint64_t v2280 = *v2277;
      *(v2278 - 2) = *(v2277 - 1);
      uint64_t *v2278 = v2280;
      v2278 += 4;
      v2277 += 2;
      v2279 -= 2;
    }
    while (v2279);
    uint64_t v2276 = v2203;
    if (v2203 != v2758)
    {
LABEL_1648:
      uint64_t v2281 = v2758 - v2276;
      int v2282 = 2 * v2276;
      v2283 = &v2948 + 2 * v2758 + 2 * v2276;
      do
      {
        uint64_t v2284 = *(void *)v2283;
        v2283 += 2;
        *((void *)&v2960 + v2201 + v2282) = v2284;
        v2282 += 2;
        --v2281;
      }
      while (v2281);
    }
    if (v2697)
    {
      uint64_t v2285 = 0;
      goto LABEL_1655;
    }
    v2286 = (uint64_t *)v2686;
    int v2287 = v2664;
    uint64_t v2288 = v2203;
    do
    {
      *((void *)&v2960 + v2287 - 2) = *(v2286 - 1);
      uint64_t v2289 = *v2286;
      v2286 += 2;
      *((void *)&v2960 + v2287) = v2289;
      v2287 += 4;
      v2288 -= 2;
    }
    while (v2288);
    uint64_t v2285 = v2203;
    if (v2203 != v2758)
    {
LABEL_1655:
      uint64_t v2290 = v2758 - v2285;
      int v2291 = v2676 + 2 * v2285;
      v2292 = &v2948 + 2 * v2758 + 2 * v2285;
      do
      {
        uint64_t v2293 = *(void *)v2292;
        v2292 += 2;
        *((void *)&v2960 + v2291) = v2293;
        v2291 += 2;
        --v2290;
      }
      while (v2290);
    }
    if (v2766 < 0xC0000001)
    {
      uint64_t v2294 = 0;
      goto LABEL_1662;
    }
    v2295 = (uint64_t *)v2684;
    v2296 = (long long *)(&v2961 + v2706);
    uint64_t v2297 = v2203;
    do
    {
      uint64_t v2298 = *v2295;
      *((void *)v2296 - 2) = *(v2295 - 1);
      *(void *)v2296 = v2298;
      v2296 += 2;
      v2295 += 2;
      v2297 -= 2;
    }
    while (v2297);
    uint64_t v2294 = v2203;
    if (v2203 != v2758)
    {
LABEL_1662:
      uint64_t v2299 = v2758 - v2294;
      int v2300 = 2 * v2294;
      v2301 = &v2202[8 * v2294];
      do
      {
        uint64_t v2302 = *(void *)v2301;
        v2301 += 8;
        *((void *)&v2960 + 2 * v2706 + v2300) = v2302;
        v2300 += 2;
        --v2299;
      }
      while (v2299);
    }
    if (v2695)
    {
      uint64_t v2303 = 0;
      goto LABEL_1669;
    }
    v2304 = (uint64_t *)v2684;
    int v2305 = v2668;
    uint64_t v2306 = v2203;
    do
    {
      *((void *)&v2960 + v2305 - 2) = *(v2304 - 1);
      uint64_t v2307 = *v2304;
      v2304 += 2;
      *((void *)&v2960 + v2305) = v2307;
      v2305 += 4;
      v2306 -= 2;
    }
    while (v2306);
    uint64_t v2303 = v2203;
    if (v2203 != v2758)
    {
LABEL_1669:
      uint64_t v2308 = v2758 - v2303;
      int v2309 = v2677 + 2 * v2303;
      v2310 = &v2202[8 * v2303];
      do
      {
        uint64_t v2311 = *(void *)v2310;
        v2310 += 8;
        *((void *)&v2960 + v2309) = v2311;
        v2309 += 2;
        --v2308;
      }
      while (v2308);
    }
    if (v2758 < 4)
    {
      size_t v2312 = 0;
      goto LABEL_1676;
    }
    v2313 = &v2879;
    v2314 = &v2873;
    size_t v2315 = v2738;
    do
    {
      *(float32x4x3_t *)v2199.f32 = vld3q_f32(v2314);
      v2314 += 12;
      float32x4_t v2317 = vdivq_f32(_Q0, v2316);
      v2995.val[0] = vmulq_f32(v2199, v2317);
      v2995.val[1] = vmulq_f32(v2318, v2317);
      v2995.val[2] = vmulq_f32(v2316, v2317);
      vst3q_f32(v2313, v2995);
      v2313 += 12;
      v2315 -= 4;
    }
    while (v2315);
    size_t v2312 = v2738;
    if (v2738 != v2758)
    {
LABEL_1676:
      uint64_t v2319 = v2758 - v2312;
      uint64_t v2320 = 12 * v2312;
      v2321 = &v2879 + 3 * v2312;
      v2322 = (char *)&v2873 + v2320;
      do
      {
        v2199.i64[0] = *(void *)v2322;
        v2199.i32[2] = *((_DWORD *)v2322 + 2);
        float32x4_t v2199 = vmulq_f32(v2199, vdivq_f32(_Q0, (float32x4_t)vdupq_laneq_s32((int32x4_t)v2199, 2)));
        v2321[2] = v2199.f32[2];
        *(void *)v2321 = v2199.i64[0];
        v2321 += 3;
        v2322 += 12;
        --v2319;
      }
      while (v2319);
    }
    memcpy(&v2873, &v2879, v2702);
    if (v2758 >= 5)
    {
      v2333 = (float *)&v2870;
      v2334 = &v2873;
      v2335 = &v2842;
      uint64_t v2336 = v2744;
      BOOL v2327 = v2705;
      unsigned int v2328 = v2704;
      long long v2109 = v2723;
      long long v2108 = v2726;
      long long v2110 = *(_OWORD *)v2719;
      float32x4_t v2151 = v2787;
      long long v2107 = *(_OWORD *)__nb;
      long long v2106 = v2781;
      uint64_t v2329 = v2701;
      uint64_t v2330 = 6 * v2706;
      junint64_t j = 0uLL;
      do
      {
        float32x4x3_t v2985 = vld3q_f32(v2335);
        v2335 += 12;
        *(float32x4x3_t *)&unsigned long long v2323 = vld3q_f32(v2334);
        v2334 += 12;
        float64x2_t v2324 = (float64x2_t)vsubq_f32(v2985.val[0], (float32x4_t)v2323);
        float64x2_t v2325 = (float64x2_t)vsubq_f32(v2985.val[1], v2337);
        vst2q_f32(v2333, *(float32x4x2_t *)v2324.f64);
        v2333 += 8;
        v2336 -= 4;
      }
      while (v2336);
      uint64_t v2326 = v2744;
      uint64_t v2332 = v2734;
    }
    else
    {
      uint64_t v2326 = 0;
      BOOL v2327 = v2705;
      unsigned int v2328 = v2704;
      long long v2109 = v2723;
      long long v2108 = v2726;
      long long v2110 = *(_OWORD *)v2719;
      float32x4_t v2151 = v2787;
      long long v2107 = *(_OWORD *)__nb;
      long long v2106 = v2781;
      uint64_t v2329 = v2701;
      uint64_t v2330 = 6 * v2706;
      junint64_t j = 0uLL;
      uint64_t v2332 = v2734;
    }
    uint64_t v2338 = v2758 - v2326;
    v2339 = (float32x2_t *)&v2870 + v2326;
    uint64_t v2340 = 12 * v2326;
    v2341 = (int *)(&v2873 + 3 * v2326);
    v2342 = (void *)((char *)&v2842 + v2340);
    do
    {
      float32x2_t v2343 = *(float32x2_t *)v2342;
      v2342 = (void *)((char *)v2342 + 12);
      float32x2_t v2344 = v2343;
      float32x2_t v2345 = *(float32x2_t *)v2341;
      v2341 += 3;
      *v2339++ = vsub_f32(v2344, v2345);
      --v2338;
    }
    while (v2338);
    if (v2758 >= 9)
    {
      v2347 = &v2879;
      v2348 = &v2873;
      uint64_t v2349 = v2778;
      do
      {
        v2350 = v2348;
        v2986.val[0] = (float32x4_t)vld3q_f32(v2350);
        v2350 += 12;
        v2986.val[1] = v2986.val[0];
        v2986.val[2] = v2986.val[0];
        unsigned long long v2323 = (unsigned __int128)vld3q_f32(v2350);
        unsigned long long v2351 = v2323;
        unsigned long long v2352 = v2323;
        v2353 = v2347 + 24;
        vst3q_f32(v2347, v2986);
        v2354 = v2347 + 12;
        vst3q_f32(v2354, *(float32x4x3_t *)&v2323);
        v2348 += 24;
        v2347 = v2353;
        v2349 -= 8;
      }
      while (v2349);
      uint64_t v2346 = v2778;
    }
    else
    {
      uint64_t v2346 = 0;
    }
    uint64_t v2355 = v2758 - v2346;
    uint64_t v2356 = 12 * v2346;
    v2357 = (_DWORD *)&v2880 + 3 * v2346 + 1;
    v2358 = (int *)((char *)&v2873 + v2356);
    do
    {
      int v2359 = *v2358;
      v2358 += 3;
      *(v2357 - 2) = v2359;
      *(v2357 - 1) = v2359;
      _DWORD *v2357 = v2359;
      v2357 += 3;
      --v2355;
    }
    while (v2355);
    if (v2329 < 8)
    {
      uint64_t v2360 = 0;
      goto LABEL_1697;
    }
    v2361 = (float32x4_t *)((char *)&v2880 + 12);
    v2362 = (float32x4_t *)&v2887;
    v2363 = (float32x4_t *)v2904;
    uint64_t v2364 = v2731;
    do
    {
      unsigned long long v2323 = (unsigned __int128)*v2362;
      float32x4_t v2365 = vmulq_f32(*v2362, *v2361);
      v2363[-1] = vmulq_f32(v2362[-1], v2361[-1]);
      float32x4_t *v2363 = v2365;
      v2363 += 2;
      v2362 += 2;
      v2361 += 2;
      v2364 -= 8;
    }
    while (v2364);
    uint64_t v2360 = v2731;
    if (v2731 != v2329)
    {
LABEL_1697:
      uint64_t v2366 = v2329 - v2360;
      uint64_t v2367 = 4 * v2360;
      v2368 = (float *)&v2904[4 * v2360 - 16];
      v2369 = (float *)((char *)&v2884 + v2367);
      v2370 = (float *)((char *)&v2879 + v2367);
      do
      {
        float v2371 = *v2370++;
        float v2372 = v2371;
        float v2373 = *v2369++;
        *v2368++ = v2373 * v2372;
        --v2366;
      }
      while (v2366);
    }
    if (v2758 >= 9)
    {
      v2375 = &v2879;
      v2376 = (const float *)v2878;
      uint64_t v2377 = v2778;
      do
      {
        v2378 = v2376 - 12;
        v2987.val[0] = (float32x4_t)vld3q_f32(v2378);
        unsigned long long v2323 = (unsigned __int128)vld3q_f32(v2376);
        v2987.val[1] = v2987.val[0];
        v2987.val[2] = v2987.val[0];
        unsigned long long v2379 = v2323;
        unsigned long long v2380 = v2323;
        v2381 = v2375 + 24;
        vst3q_f32(v2375, v2987);
        v2382 = v2375 + 12;
        vst3q_f32(v2382, *(float32x4x3_t *)&v2323);
        v2376 += 24;
        v2375 = v2381;
        v2377 -= 8;
      }
      while (v2377);
      uint64_t v2374 = v2778;
    }
    else
    {
      uint64_t v2374 = 0;
    }
    uint64_t v2383 = v2758 - v2374;
    uint64_t v2384 = 12 * v2374;
    v2385 = (_DWORD *)&v2880 + 3 * v2374 + 1;
    v2386 = (int *)((char *)&v2874 + v2384);
    do
    {
      int v2387 = *v2386;
      v2386 += 3;
      *(v2385 - 2) = v2387;
      *(v2385 - 1) = v2387;
      _DWORD *v2385 = v2387;
      v2385 += 3;
      --v2383;
    }
    while (v2383);
    if (v2329 < 8)
    {
      uint64_t v2388 = 0;
      goto LABEL_1711;
    }
    v2389 = (float32x4_t *)((char *)&v2880 + 12);
    v2390 = (float32x4_t *)&v2887;
    v2391 = (float32x4_t *)&v2898;
    uint64_t v2392 = v2731;
    do
    {
      unsigned long long v2323 = (unsigned __int128)*v2390;
      float32x4_t v2393 = vmulq_f32(*v2390, *v2389);
      v2391[-1] = vmulq_f32(v2390[-1], v2389[-1]);
      float32x4_t *v2391 = v2393;
      v2391 += 2;
      v2390 += 2;
      v2389 += 2;
      v2392 -= 8;
    }
    while (v2392);
    uint64_t v2388 = v2731;
    if (v2731 != v2329)
    {
LABEL_1711:
      uint64_t v2394 = v2329 - v2388;
      uint64_t v2395 = 4 * v2388;
      v2396 = (float *)&v2897 + v2388;
      v2397 = (float *)((char *)&v2884 + v2395);
      v2398 = (float *)((char *)&v2879 + v2395);
      do
      {
        float v2399 = *v2398++;
        float v2400 = v2399;
        float v2401 = *v2397++;
        *v2396++ = v2401 * v2400;
        --v2394;
      }
      while (v2394);
    }
    if (v2766 < 0xC0000001)
    {
      uint64_t v2402 = 0;
      goto LABEL_1718;
    }
    v2403 = (float *)&v2903;
    v2404 = (double *)&v2961.i64[6 * (int)v2706];
    uint64_t v2405 = v2332;
    do
    {
      double v2406 = v2403[3];
      *(v2404 - 2) = *v2403;
      double *v2404 = v2406;
      v2404 += 4;
      v2403 += 6;
      v2405 -= 2;
    }
    while (v2405);
    uint64_t v2402 = v2332;
    if (v2332 != v2758)
    {
LABEL_1718:
      uint64_t v2407 = v2758 - v2402;
      int v2408 = 2 * v2402;
      v2409 = (float *)&v2904[12 * v2402 - 16];
      do
      {
        float v2410 = *v2409;
        v2409 += 3;
        *((double *)&v2960 + v2330 + v2408) = v2410;
        v2408 += 2;
        --v2407;
      }
      while (v2407);
    }
    if (v2693)
    {
      uint64_t v2411 = 0;
      goto LABEL_1725;
    }
    v2412 = (float *)&v2897;
    int v2413 = v2712;
    uint64_t v2414 = v2332;
    do
    {
      float v2415 = v2412[3];
      *((double *)&v2960 + v2413) = *v2412;
      *((double *)&v2960 + v2413 + 2) = v2415;
      v2412 += 6;
      v2413 += 4;
      v2414 -= 2;
    }
    while (v2414);
    uint64_t v2411 = v2332;
    if (v2332 != v2758)
    {
LABEL_1725:
      uint64_t v2416 = v2758 - v2411;
      int v2417 = v2712 + 2 * v2411;
      v2418 = (float *)&v2897 + 3 * v2411;
      do
      {
        float v2419 = *v2418;
        v2418 += 3;
        *((double *)&v2960 + v2417) = v2419;
        v2417 += 2;
        --v2416;
      }
      while (v2416);
    }
    if (v2766 < 0xC0000001)
    {
      uint64_t v2420 = 0;
      goto LABEL_1732;
    }
    v2421 = (double *)&v2961.i64[7 * (int)v2706];
    v2422 = (float *)v2904;
    uint64_t v2423 = v2332;
    do
    {
      float v2424 = *(v2422 - 3);
      float v2425 = *v2422;
      v2422 += 6;
      *(v2421 - 2) = v2424;
      double *v2421 = v2425;
      v2421 += 4;
      v2423 -= 2;
    }
    while (v2423);
    uint64_t v2420 = v2332;
    if (v2332 != v2758)
    {
LABEL_1732:
      uint64_t v2426 = v2758 - v2420;
      int v2427 = 2 * v2420;
      v2428 = (float *)&v2904[12 * v2420 - 12];
      do
      {
        float v2429 = *v2428;
        v2428 += 3;
        *((double *)&v2960 + 7 * v2706 + v2427) = v2429;
        v2427 += 2;
        --v2426;
      }
      while (v2426);
    }
    if (v2691)
    {
      uint64_t v2430 = 0;
      goto LABEL_1739;
    }
    int v2431 = v2708;
    v2432 = (float *)&v2898;
    uint64_t v2433 = v2332;
    do
    {
      float v2434 = *(v2432 - 3);
      float v2435 = *v2432;
      v2432 += 6;
      *((double *)&v2960 + v2431) = v2434;
      *((double *)&v2960 + v2431 + 2) = v2435;
      v2431 += 4;
      v2433 -= 2;
    }
    while (v2433);
    uint64_t v2430 = v2332;
    if (v2332 != v2758)
    {
LABEL_1739:
      uint64_t v2436 = v2758 - v2430;
      int v2437 = v2708 + 2 * v2430;
      v2438 = (float *)&v2897 + 3 * v2430 + 1;
      do
      {
        float v2439 = *v2438;
        v2438 += 3;
        *((double *)&v2960 + v2437) = v2439;
        v2437 += 2;
        --v2436;
      }
      while (v2436);
    }
    uint64_t v2440 = 0;
    uint64_t v2441 = 0;
    while (2)
    {
      v2442 = &v2907 + 8 * v2441;
      *((_OWORD *)v2442 + 2) = jj;
      *((_OWORD *)v2442 + 3) = jj;
      *(_OWORD *)v2442 = jj;
      *((_OWORD *)v2442 + 1) = jj;
      *((_DWORD *)v2981 + v2441) = 0;
      if (v2327)
      {
        uint64_t v2443 = (8 * v2441) | 1;
        uint64_t v2444 = (8 * v2441) | 2;
        uint64_t v2445 = (8 * v2441) | 3;
        uint64_t v2446 = (8 * v2441) | 4;
        uint64_t v2447 = (8 * v2441) | 5;
        uint64_t v2448 = (8 * v2441) | 6;
        double v2449 = *(&v2907 + v2443);
        double v2450 = *(&v2907 + v2444);
        double v2451 = *(&v2907 + v2445);
        double v2452 = *(&v2907 + v2446);
        v2325.f64[0] = *(&v2907 + v2447);
        uint64_t v2453 = (8 * v2441) | 7;
        double v2454 = *(&v2907 + v2448);
        v2324.f64[0] = *(&v2907 + v2453);
        if (v2328 <= 3)
        {
          uint64_t v2455 = 0;
          float v2456 = 0.0;
          double v2457 = 0.0;
          goto LABEL_1750;
        }
        float64x2_t v2458 = 0uLL;
        float64x2_t v2459 = (float64x2_t)*((unint64_t *)&v2907 + v2453);
        float64x2_t v2324 = (float64x2_t)*((unint64_t *)&v2907 + v2448);
        float64x2_t v2460 = (float64x2_t)*((unint64_t *)&v2907 + v2447);
        float64x2_t v2325 = (float64x2_t)*((unint64_t *)&v2907 + v2446);
        float64x2_t v2461 = (float64x2_t)*((unint64_t *)&v2907 + v2445);
        float64x2_t v2462 = (float64x2_t)*((unint64_t *)&v2907 + v2444);
        float64x2_t v2463 = (float64x2_t)*((unint64_t *)&v2907 + v2443);
        v2464 = (float32x4_t *)&v2870;
        v2465 = (float64x2_t *)&v2960;
        uint64_t v2466 = v2181;
        float64x2_t v2467 = 0uLL;
        float64x2_t v2468 = 0uLL;
        float64x2_t v2469 = 0uLL;
        float64x2_t v2470 = 0uLL;
        float64x2_t v2471 = 0uLL;
        float64x2_t v2472 = 0uLL;
        float64x2_t v2473 = 0uLL;
        float64x2_t v2474 = 0uLL;
        float32x4_t v2475 = 0uLL;
        do
        {
          float64x2_t v2476 = *(float64x2_t *)((char *)v2465 + v2440);
          float64x2_t v2477 = *(float64x2_t *)((char *)v2465 + v2440 + 16);
          float64x2_t v2474 = vmlaq_f64(v2474, v2477, v2465[1]);
          float64x2_t v2473 = vmlaq_f64(v2473, v2476, *v2465);
          float64x2_t v2472 = vmlaq_f64(v2472, v2477, *(float64x2_t *)((char *)v2465 + v2179 + 16));
          float64x2_t v2463 = vmlaq_f64(v2463, v2476, *(float64x2_t *)((char *)v2465 + 8 * v2706));
          v2478 = (float64x2_t *)((char *)v2465 + v2179 + v2179);
          float64x2_t v2471 = vmlaq_f64(v2471, v2477, v2478[1]);
          float64x2_t v2462 = vmlaq_f64(v2462, v2476, *v2478);
          v2479 = (float64x2_t *)((char *)v2478 + v2179);
          float64x2_t v2470 = vmlaq_f64(v2470, v2477, v2479[1]);
          float64x2_t v2461 = vmlaq_f64(v2461, v2476, *v2479);
          v2480 = (float64x2_t *)((char *)v2479 + v2179);
          float64x2_t v2469 = vmlaq_f64(v2469, v2477, v2480[1]);
          float64x2_t v2325 = vmlaq_f64(v2325, v2476, *v2480);
          v2481 = (float64x2_t *)((char *)v2480 + v2179);
          float64x2_t v2468 = vmlaq_f64(v2468, v2477, v2481[1]);
          float64x2_t v2460 = vmlaq_f64(v2460, v2476, *v2481);
          v2482 = (float64x2_t *)((char *)v2481 + v2179);
          float64x2_t v2467 = vmlaq_f64(v2467, v2477, v2482[1]);
          float64x2_t v2324 = vmlaq_f64(v2324, v2476, *v2482);
          v2483 = (float64x2_t *)((char *)v2482 + v2179);
          float64x2_t v2458 = vmlaq_f64(v2458, v2477, v2483[1]);
          float64x2_t v2459 = vmlaq_f64(v2459, v2476, *v2483);
          float32x4_t v2484 = *v2464++;
          float32x4_t v2475 = vmlaq_f32(v2475, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v2476), v2477), v2484);
          v2465 += 2;
          v2466 -= 4;
        }
        while (v2466);
        float v2456 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v2475, v2475));
        double v2457 = vaddvq_f64(vaddq_f64(v2473, v2474));
        double v2449 = vaddvq_f64(vaddq_f64(v2463, v2472));
        double v2450 = vaddvq_f64(vaddq_f64(v2462, v2471));
        double v2451 = vaddvq_f64(vaddq_f64(v2461, v2470));
        double v2452 = vaddvq_f64(vaddq_f64(v2325, v2469));
        v2325.f64[0] = vaddvq_f64(vaddq_f64(v2460, v2468));
        double v2454 = vaddvq_f64(vaddq_f64(v2324, v2467));
        unsigned long long v2323 = (unsigned __int128)vaddq_f64(v2459, v2458);
        v2324.f64[0] = vaddvq_f64((float64x2_t)v2323);
        uint64_t v2455 = v2181;
        float32x4_t v2151 = v2787;
        long long v2107 = *(_OWORD *)__nb;
        long long v2106 = v2781;
        for (junint64_t j = 0uLL; v2180 != v2455; ++v2455)
        {
LABEL_1750:
          *(void *)&unsigned long long v2323 = *(void *)((char *)&v2960 + 8 * v2455 + v2440);
          v2485 = (double *)&v2960 + v2455;
          double v2457 = v2457 + *v2485 * *(double *)&v2323;
          v2486 = &v2485[(unint64_t)v2179 / 8];
          double v2449 = v2449 + *v2486 * *(double *)&v2323;
          v2487 = &v2486[(unint64_t)v2179 / 8];
          double v2450 = v2450 + *v2487 * *(double *)&v2323;
          v2488 = &v2487[(unint64_t)v2179 / 8];
          double v2451 = v2451 + *v2488 * *(double *)&v2323;
          v2489 = &v2488[(unint64_t)v2179 / 8];
          double v2452 = v2452 + *v2489 * *(double *)&v2323;
          v2490 = &v2489[(unint64_t)v2179 / 8];
          v2325.f64[0] = v2325.f64[0] + *v2490 * *(double *)&v2323;
          v2491 = &v2490[(unint64_t)v2179 / 8];
          double v2454 = v2454 + *v2491 * *(double *)&v2323;
          v2324.f64[0] = v2324.f64[0] + v2491[v2706] * *(double *)&v2323;
          *(float *)&unsigned long long v2323 = *(double *)&v2323;
          float v2456 = v2456 + (float)(*((float *)&v2870 + v2455) * *(float *)&v2323);
        }
        *(&v2907 + v2443) = v2449;
        *(&v2907 + v2444) = v2450;
        *(&v2907 + v2445) = v2451;
        *(&v2907 + v2446) = v2452;
        *(&v2907 + v2447) = v2325.f64[0];
        *(&v2907 + v2448) = v2454;
        double *v2442 = v2457;
        *(&v2907 + v2453) = v2324.f64[0];
        *((float *)v2981 + v2441) = v2456;
      }
      *((unsigned char *)v2979 + v2441) = v2441 + 1;
      v2440 += v2179;
      if (++v2441 != 8) {
        continue;
      }
      break;
    }
    uint64_t v2492 = 0;
    uint64_t v2493 = 0;
    uint64_t v2494 = 0;
    uint64_t v2495 = 11;
    v2496 = &v2914;
    uint64_t v2497 = 7;
    uint64_t v2498 = 6;
    uint64_t v2499 = 5;
    uint64_t v2500 = 4;
    uint64_t v2501 = 3;
    uint64_t v2502 = 1;
    uint64_t v2503 = 9;
    uint64_t v2504 = 9;
    uint64_t v2505 = 2;
    do
    {
      uint64_t v2506 = 9 * v2494;
      v2507 = &v2907 + 9 * v2494;
      double v2508 = fabs(*v2507);
      double v2509 = fabs(v2507[1]);
      unsigned int v2510 = v2509 > v2508;
      if (v2503 == 3)
      {
        unint64_t v2511 = v2506 + 2;
      }
      else
      {
        if (v2509 > v2508) {
          double v2508 = v2509;
        }
        unint64_t v2511 = v2506 + 2;
        double v2509 = fabs(*(&v2907 + v2506 + 2));
        if (v2509 > v2508) {
          unsigned int v2510 = 2;
        }
        if (v2503 != 4)
        {
          if (v2509 > v2508) {
            double v2508 = v2509;
          }
          v2512 = &v2907 + 9 * v2494;
          double v2509 = fabs(v2512[3]);
          if (v2509 > v2508) {
            unsigned int v2510 = 3;
          }
          if (v2503 != 5)
          {
            if (v2509 > v2508) {
              double v2508 = v2509;
            }
            double v2509 = fabs(v2512[4]);
            if (v2509 > v2508) {
              unsigned int v2510 = 4;
            }
            if (v2503 != 6)
            {
              if (v2509 > v2508) {
                double v2508 = v2509;
              }
              v2513 = &v2907 + 9 * v2494;
              double v2509 = fabs(v2513[5]);
              if (v2509 > v2508) {
                unsigned int v2510 = 5;
              }
              if (v2503 != 7)
              {
                if (v2509 > v2508) {
                  double v2508 = v2509;
                }
                double v2509 = fabs(v2513[6]);
                if (v2509 > v2508) {
                  unsigned int v2510 = 6;
                }
                if (v2503 != 8)
                {
                  if (v2509 > v2508) {
                    double v2508 = v2509;
                  }
                  double v2509 = fabs(v2911[9 * v2494]);
                  if (v2509 > v2508) {
                    unsigned int v2510 = 7;
                  }
                }
              }
            }
          }
        }
      }
      if (*(&v2907 + v2506 + v2510) != 0.0)
      {
        if (v2510)
        {
          int v2514 = v2510 + v2494;
          *((unsigned char *)v2979 + v2494) = v2514 + 1;
          v2515 = &v2907 + v2494;
          uint64_t v2516 = *(void *)v2515;
          v2517 = &v2907 + v2514;
          double *v2515 = *v2517;
          *(void *)v2517 = v2516;
          uint64_t v2518 = *((void *)v2515 + 8);
          v2515[8] = v2517[8];
          *((void *)v2517 + 8) = v2518;
          uint64_t v2519 = *((void *)v2515 + 16);
          v2515[16] = v2517[16];
          *((void *)v2517 + 16) = v2519;
          uint64_t v2520 = *((void *)v2515 + 24);
          v2515[24] = v2517[24];
          *((void *)v2517 + 24) = v2520;
          uint64_t v2521 = *((void *)v2515 + 32);
          v2515[32] = v2517[32];
          *((void *)v2517 + 32) = v2521;
          uint64_t v2522 = *((void *)v2515 + 40);
          v2515[40] = v2517[40];
          *((void *)v2517 + 40) = v2522;
          uint64_t v2523 = *((void *)v2515 + 48);
          v2515[48] = v2517[48];
          *((void *)v2517 + 48) = v2523;
          uint64_t v2524 = *((void *)v2515 + 56);
          double v2509 = v2517[56];
          v2515[56] = v2509;
          *((void *)v2517 + 56) = v2524;
        }
        if (v2511 <= 8 * v2494 + 8)
        {
          v2525 = &v2907 + v2505;
          double v2509 = *(v2525 - 1);
          *(v2525 - 1) = v2509 / *(&v2907 + 9 * v2494);
          if (v2505 + 1 != v2504)
          {
            double v2509 = *(&v2907 + v2505);
            *(&v2907 + v2505) = v2509 / *(&v2907 + 9 * v2494);
            if (v2505 + 2 != v2504)
            {
              uint64_t v2526 = 8 * (v2505 + 1);
              double v2509 = *(double *)((char *)&v2907 + v2526);
              *(double *)((char *)&v2907 + v2526) = v2509 / *(&v2907 + 9 * v2494);
              if (v2505 + 3 != v2504)
              {
                uint64_t v2527 = 8 * (v2505 + 2);
                double v2509 = *(double *)((char *)&v2907 + v2527);
                *(double *)((char *)&v2907 + v2527) = v2509 / *(&v2907 + 9 * v2494);
                if (v2505 + 4 != v2504)
                {
                  uint64_t v2528 = 8 * (v2505 + 3);
                  double v2509 = *(double *)((char *)&v2907 + v2528);
                  *(double *)((char *)&v2907 + v2528) = v2509 / *(&v2907 + 9 * v2494);
                  uint64_t v2529 = v2505 + 5;
                  if (v2505 + 5 != v2504)
                  {
                    uint64_t v2530 = 8 * (v2505 + 4);
                    double v2509 = *(double *)((char *)&v2907 + v2530);
                    *(double *)((char *)&v2907 + v2530) = v2509 / *(&v2907 + 9 * v2494);
                    if (v2505 + 6 != v2504)
                    {
                      double v2509 = *(&v2907 + v2529);
                      *(&v2907 + v2529) = v2509 / *(&v2907 + 9 * v2494);
                    }
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v2531 = 0;
      v2532 = v2496;
      do
      {
        double v2143 = *(v2532 - 7);
        if (v2143 != 0.0)
        {
          uint64_t v2533 = v2493 + v2531 + 17;
          double v2509 = *(v2532 - 6) - *(&v2907 + v2502) * v2143;
          *(v2532 - 6) = v2509;
          if (v2495 + v2531 != v2533)
          {
            double v2509 = *(v2532 - 5) - *(&v2907 + v2505) * v2143;
            *(v2532 - 5) = v2509;
            if (v2492 + v2531 + 12 != v2533)
            {
              double v2509 = *(v2532 - 4) - *(&v2907 + v2501) * v2143;
              *(v2532 - 4) = v2509;
              if (v2492 + v2531 + 13 != v2533)
              {
                double v2509 = *(v2532 - 3) - *(&v2907 + v2500) * v2143;
                *(v2532 - 3) = v2509;
                if (v2492 + v2531 + 14 != v2533)
                {
                  double v2509 = *(v2532 - 2) - *(&v2907 + v2499) * v2143;
                  *(v2532 - 2) = v2509;
                  if (v2492 + v2531 + 15 != v2533)
                  {
                    double v2509 = *(v2532 - 1) - *(&v2907 + v2498) * v2143;
                    *(v2532 - 1) = v2509;
                    if (v2492 + v2531 + 16 != v2533)
                    {
                      double v2509 = *(&v2907 + v2497);
                      double v2143 = *v2532 - v2509 * v2143;
                      double *v2532 = v2143;
                    }
                  }
                }
              }
            }
          }
        }
        v2531 += 8;
        v2532 += 8;
      }
      while (v2493 + v2531 != 56);
      uint64_t v2534 = *((char *)v2979 + v2494);
      uint64_t v2535 = v2494 + 1;
      if (v2494 + 1 != v2534)
      {
        uint64_t v2536 = 4 * v2494;
        int v2537 = *(_DWORD *)((char *)v2981 + v2536);
        uint64_t v2538 = 4 * ((int)v2534 - 1);
        *(_DWORD *)((char *)v2981 + v2536) = *(_DWORD *)((char *)v2981 + v2538);
        *(_DWORD *)((char *)v2981 + v2538) = v2537;
      }
      --v2503;
      v2505 += 9;
      v2504 += 8;
      v2502 += 9;
      v2501 += 9;
      v2500 += 9;
      v2499 += 9;
      v2498 += 9;
      v2497 += 9;
      v2493 += 8;
      v2492 += 9;
      v2496 += 9;
      v2495 += 9;
      uint64_t v2494 = v2535;
    }
    while (v2535 != 7);
    LODWORD(v2323) = v2981[0];
    float32x2_t v2539 = *(float32x2_t *)((char *)v2981 + 4);
    float32x2_t v2540 = *(float32x2_t *)((char *)v2981 + 12);
    float32x2_t v2541 = *(float32x2_t *)((char *)&v2981[1] + 4);
    if (*(float *)v2981 != 0.0)
    {
      float32x2_t v2539 = vmls_lane_f32(*(float32x2_t *)((char *)v2981 + 4), vcvt_f32_f64(v2908), *(float32x2_t *)&v2323, 0);
      DWORD1(v2981[0]) = v2539.i32[0];
      float32x2_t v2540 = vmls_lane_f32(*(float32x2_t *)((char *)v2981 + 12), vcvt_f32_f64(v2909), *(float32x2_t *)&v2323, 0);
      float32x2_t v2541 = vmls_lane_f32(*(float32x2_t *)((char *)&v2981[1] + 4), vcvt_f32_f64(v2910), *(float32x2_t *)&v2323, 0);
      HIDWORD(v2143) = HIDWORD(v2911[0]);
      *(float *)&double v2143 = v2911[0];
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(*(float *)v2981 * *(float *)&v2143);
    }
    LODWORD(v2324.f64[0]) = v2539.i32[1];
    if (v2539.f32[0] != 0.0)
    {
      float v2542 = v2911[3];
      *(float *)v2324.f64 = v2539.f32[1] - (float)(v2539.f32[0] * v2542);
      *((float *)v2981 + 2) = *(float *)v2324.f64;
      float32x2_t v2540 = vmls_lane_f32(v2540, vcvt_f32_f64(v2912), v2539, 0);
      float32x2_t v2541 = vmls_lane_f32(v2541, vcvt_f32_f64(v2913), v2539, 0);
      HIDWORD(v2143) = HIDWORD(v2914);
      *(float *)&double v2143 = v2914;
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(v2539.f32[0] * *(float *)&v2143);
    }
    uint64_t v2113 = v2758;
    if (*(float *)v2324.f64 != 0.0)
    {
      float32x2_t v2540 = vmls_lane_f32(v2540, vcvt_f32_f64(v2917), *(float32x2_t *)&v2324.f64[0], 0);
      HIDWORD(v2981[0]) = v2540.i32[0];
      float32x2_t v2541 = vmls_lane_f32(v2541, vcvt_f32_f64(v2918), *(float32x2_t *)&v2324.f64[0], 0);
      HIDWORD(v2143) = HIDWORD(v2919);
      *(float *)&double v2143 = v2919;
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(*(float *)v2324.f64 * *(float *)&v2143);
    }
    LODWORD(v2325.f64[0]) = v2540.i32[1];
    if (v2540.f32[0] != 0.0)
    {
      float v2543 = v2923;
      *(float *)v2325.f64 = v2540.f32[1] - (float)(v2540.f32[0] * v2543);
      float32x2_t v2541 = vmls_lane_f32(v2541, vcvt_f32_f64(v2924), v2540, 0);
      DWORD2(v2981[1]) = v2541.i32[1];
      *(float *)&v2981[1] = *(float *)v2325.f64;
      HIDWORD(v2143) = HIDWORD(v2925);
      *(float *)&double v2143 = v2925;
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(v2540.f32[0] * *(float *)&v2143);
    }
    if (*(float *)v2325.f64 != 0.0)
    {
      float32x2_t v2541 = vmls_lane_f32(v2541, vcvt_f32_f64(v2929), *(float32x2_t *)&v2325.f64[0], 0);
      DWORD1(v2981[1]) = v2541.i32[0];
      HIDWORD(v2143) = HIDWORD(v2930);
      *(float *)&double v2143 = v2930;
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(*(float *)v2325.f64 * *(float *)&v2143);
    }
    LODWORD(v2143) = v2541.i32[1];
    if (v2541.f32[0] != 0.0)
    {
      HIDWORD(v2509) = HIDWORD(v2935);
      *(float *)&double v2509 = v2935;
      *(float *)&double v2143 = v2541.f32[1] - (float)(v2541.f32[0] * *(float *)&v2509);
      *(float *)&double v2509 = v2936;
      *((float *)&v2981[1] + 3) = *((float *)&v2981[1] + 3) - (float)(v2541.f32[0] * *(float *)&v2509);
    }
    if (*(float *)&v2143 == 0.0)
    {
      LODWORD(v2509) = HIDWORD(v2981[1]);
    }
    else
    {
      HIDWORD(v2509) = HIDWORD(v2941);
      *(float *)&double v2509 = v2941;
      *(float *)&double v2509 = *((float *)&v2981[1] + 3) - (float)(*(float *)&v2143 * *(float *)&v2509);
    }
    float32x2_t v2544 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v2323, (int32x2_t)v2539);
    float32x2_t v2545 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v2324.f64[0], (int32x2_t)v2540);
    float32x2_t v2546 = (float32x2_t)vzip1_s32(*(int32x2_t *)&v2325.f64[0], (int32x2_t)v2541);
    if (*(float *)&v2509 != 0.0)
    {
      HIDWORD(v2324.f64[0]) = HIDWORD(v2945);
      float v2547 = v2946;
      *(float *)&double v2509 = *(float *)&v2509 / v2547;
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2942), *(float32x2_t *)&v2509, 0);
      float32x2_t v2545 = vmls_lane_f32(v2545, vcvt_f32_f64(v2943), *(float32x2_t *)&v2509, 0);
      float32x2_t v2540 = vcvt_f32_f64(v2944);
      float32x2_t v2546 = vmls_lane_f32(v2546, v2540, *(float32x2_t *)&v2509, 0);
      v2540.f32[0] = v2945;
      *(float *)&double v2143 = *(float *)&v2143 - (float)(*(float *)&v2509 * v2540.f32[0]);
    }
    if (*(float *)&v2143 != 0.0)
    {
      float v2548 = v2940;
      *(float *)&double v2143 = *(float *)&v2143 / v2548;
      HIDWORD(v2324.f64[0]) = HIDWORD(v2938.f64[0]);
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2937), *(float32x2_t *)&v2143, 0);
      float32x2_t v2545 = vmls_lane_f32(v2545, vcvt_f32_f64(v2938), *(float32x2_t *)&v2143, 0);
      float32x2_t v2540 = vcvt_f32_f64(v2939);
      float32x2_t v2546 = vmls_lane_f32(v2546, v2540, *(float32x2_t *)&v2143, 0);
    }
    v2540.i32[0] = v2546.i32[1];
    if (v2546.f32[1] != 0.0)
    {
      float v2549 = v2934;
      v2540.f32[0] = v2546.f32[1] / v2549;
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2931), v2540, 0);
      *(float32x2_t *)&v2324.f64[0] = vcvt_f32_f64(v2932);
      float32x2_t v2545 = vmls_lane_f32(v2545, *(float32x2_t *)&v2324.f64[0], v2540, 0);
      *(float *)v2324.f64 = v2933;
      v2546.f32[0] = v2546.f32[0] - (float)(v2540.f32[0] * *(float *)v2324.f64);
    }
    if (v2546.f32[0] != 0.0)
    {
      float v2550 = v2928;
      v2546.f32[0] = v2546.f32[0] / v2550;
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2926), v2546, 0);
      *(float32x2_t *)&v2324.f64[0] = vcvt_f32_f64(v2927);
      float32x2_t v2545 = vmls_lane_f32(v2545, *(float32x2_t *)&v2324.f64[0], v2546, 0);
    }
    if (v2545.f32[1] != 0.0)
    {
      float v2551 = v2922;
      float v2552 = v2921;
      *(float *)v2324.f64 = v2545.f32[1] / v2551;
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2920), *(float32x2_t *)&v2324.f64[0], 0);
      v2545.f32[0] = v2545.f32[0] - (float)((float)(v2545.f32[1] / v2551) * v2552);
      v2545.f32[1] = v2545.f32[1] / v2551;
    }
    LODWORD(v2324.f64[0]) = v2545.i32[0];
    if (v2545.f32[0] != 0.0)
    {
      float v2553 = v2916;
      *(float *)v2324.f64 = v2545.f32[0] / v2553;
      float32x2_t v2544 = vmls_lane_f32(v2544, vcvt_f32_f64(v2915), *(float32x2_t *)&v2324.f64[0], 0);
    }
    float v2554 = v2544.f32[1];
    if (v2544.f32[1] != 0.0)
    {
      float v2555 = v2911[2];
      float v2554 = v2544.f32[1] / v2555;
      float v2556 = v2911[1];
      v2544.f32[0] = v2544.f32[0] - (float)(v2554 * v2556);
    }
    long long v2105 = v2751;
    if (v2544.f32[0] != 0.0)
    {
      float v2557 = v2907;
      v2544.f32[0] = v2544.f32[0] / v2557;
    }
    *(float *)&long long v2106 = *(float *)&v2106 - v2544.f32[0];
    *(float *)&long long v2105 = *(float *)&v2751 - v2554;
    *(float *)&long long v2109 = *(float *)&v2109 - *(float *)v2324.f64;
    *(float *)&long long v2107 = *(float *)&v2107 - v2545.f32[1];
    long long v2104 = *(_OWORD *)v2716;
    *(float *)&long long v2104 = *(float *)v2716 - v2546.f32[0];
    *(float *)&long long v2108 = *(float *)&v2108 - v2540.f32[0];
    v2151.f32[0] = v2151.f32[0] - *(float *)&v2143;
    *(float *)&long long v2110 = *(float *)&v2110 - *(float *)&v2509;
    int v2159 = v2713 + 1;
    LODWORD(v2143) = 1.0;
    if (v2713 != 9) {
      continue;
    }
    break;
  }
  float v2559 = *(float *)v2716 - v2546.f32[0];
  float v2560 = vabds_f32(*(float *)&v2106, v2663);
  if (v2560 <= 1.2925e-26)
  {
    float v2561 = (float)(v2560 * 7.7371e25) * (float)(v2560 * 7.7371e25);
    float v2560 = 1.2925e-26;
  }
  else
  {
    float v2561 = 1.0;
  }
  float v2562 = fabsf(*(float *)&v2107 - v2152);
  if (v2562 <= v2560)
  {
    float v2563 = v2561 + (float)((float)(v2562 / v2560) * (float)(v2562 / v2560));
  }
  else
  {
    float v2563 = (float)((float)((float)(v2560 / v2562) * (float)(v2560 / v2562)) * v2561) + 1.0;
    float v2560 = v2562;
  }
  float v2564 = fabsf(v2151.f32[0] - v2156);
  if (v2564 <= v2560)
  {
    float v2565 = v2563 + (float)((float)(v2564 / v2560) * (float)(v2564 / v2560));
  }
  else
  {
    float v2565 = (float)((float)((float)(v2560 / v2564) * (float)(v2560 / v2564)) * v2563) + 1.0;
    float v2560 = v2564;
  }
  float v2566 = fabsf(*(float *)&v2105 - v2662);
  if (v2566 <= v2560)
  {
    float v2567 = v2565 + (float)((float)(v2566 / v2560) * (float)(v2566 / v2560));
  }
  else
  {
    float v2567 = (float)((float)((float)(v2560 / v2566) * (float)(v2560 / v2566)) * v2565) + 1.0;
    float v2560 = v2566;
  }
  float v2568 = fabsf(*(float *)&v2104 - v2153);
  if (v2568 <= v2560)
  {
    float v2569 = v2567 + (float)((float)(v2568 / v2560) * (float)(v2568 / v2560));
  }
  else
  {
    float v2569 = (float)((float)((float)(v2560 / v2568) * (float)(v2560 / v2568)) * v2567) + 1.0;
    float v2560 = v2568;
  }
  float v2570 = fabsf(*(float *)&v2110 - v2157);
  if (v2570 <= v2560)
  {
    float v2571 = v2569 + (float)((float)(v2570 / v2560) * (float)(v2570 / v2560));
  }
  else
  {
    float v2571 = (float)((float)((float)(v2560 / v2570) * (float)(v2560 / v2570)) * v2569) + 1.0;
    float v2560 = v2570;
  }
  float v2572 = fabsf(*(float *)&v2109 - v2149);
  if (v2572 <= v2560)
  {
    float v2573 = v2571 + (float)((float)(v2572 / v2560) * (float)(v2572 / v2560));
  }
  else
  {
    float v2573 = (float)((float)((float)(v2560 / v2572) * (float)(v2560 / v2572)) * v2571) + 1.0;
    float v2560 = v2572;
  }
  float v2574 = fabsf(*(float *)&v2108 - v2155);
  if (v2574 <= v2560)
  {
    float v2575 = v2573 + (float)((float)(v2574 / v2560) * (float)(v2574 / v2560));
  }
  else
  {
    float v2575 = (float)((float)((float)(v2560 / v2574) * (float)(v2560 / v2574)) * v2573) + 1.0;
    float v2560 = v2574;
  }
  float v2576 = fabsf(1.0 - v2158);
  if (v2576 <= v2560)
  {
    float v2577 = v2575 + (float)((float)(v2576 / v2560) * (float)(v2576 / v2560));
  }
  else
  {
    float v2577 = (float)((float)((float)(v2560 / v2576) * (float)(v2560 / v2576)) * v2575) + 1.0;
    float v2560 = v2576;
  }
  float v2558 = 1.0;
  if ((float)(v2560 * sqrtf(v2577)) > 700.0)
  {
    float v2558 = v2158;
    *(float *)&long long v2108 = v2155;
    *(float *)&long long v2109 = v2149;
    *(float *)&long long v2110 = v2157;
    float v2559 = v2153;
    *(float *)&long long v2105 = v2662;
    v2151.f32[0] = v2156;
    *(float *)&long long v2107 = v2152;
    *(float *)&long long v2106 = v2663;
  }
LABEL_1869:
  *(void *)&long long v2815 = __PAIR64__(v2107, v2106);
  *((void *)&v2815 + 1) = __PAIR64__(v2105, v2151.u32[0]);
  v2816.i64[0] = __PAIR64__(v2110, LODWORD(v2559));
  v2981[0] = v2812;
  v2981[1] = v2813;
  LODWORD(v2981[2]) = v2814;
  float v2578 = fabsf(*(float *)&v2812);
  float v2579 = fabsf(*((float *)&v2812 + 1));
  if (v2579 <= v2578) {
    float v2580 = v2578;
  }
  else {
    float v2580 = v2579;
  }
  float v2581 = fabsf(*((float *)&v2812 + 2));
  if (v2581 <= v2580) {
    unsigned int v2582 = v2579 > v2578;
  }
  else {
    unsigned int v2582 = 2;
  }
  BOOL v2583 = v2579 <= v2578 || v2581 > v2580;
  unint64_t v2584 = 2 * (v2581 <= v2580);
  v2585 = (float *)((unint64_t)v2981 & 0xFFFFFFFFFFFFFFFBLL | (4 * v2583));
  float *v2585 = *((float *)&v2812 + v2583) / *((float *)&v2812 + v2582);
  v2586 = (float *)((unint64_t)v2981 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2582 & 3)));
  v2587 = (float *)((unint64_t)v2981 & 0xFFFFFFFFFFFFFFF7 | (8 * ((v2584 >> 1) & 1)));
  float v2588 = *v2587 / *v2586;
  float *v2587 = v2588;
  float v2589 = *v2585;
  uint64_t v2590 = 4 * (v2582 + 3);
  uint64_t v2591 = 16;
  if (!v2583) {
    uint64_t v2591 = 12;
  }
  *(float *)((char *)v2981 + v2591) = *(float *)((char *)v2981 + v2591) - (float)(*((float *)v2981 + v2582 + 3) * v2589);
  float v2592 = *((float *)v2981 + v2582 + 3);
  v2816.i64[1] = __PAIR64__(v2108, v2109);
  uint64_t v2593 = 4 * (v2584 + 3);
  float v2594 = *(float *)((char *)v2981 + v2593) - (float)(v2592 * v2588);
  *(float *)((char *)v2981 + v2593) = v2594;
  uint64_t v2595 = 4 * (v2582 + 6);
  float v2596 = *(float *)((char *)v2981 + v2595);
  float v2817 = v2558;
  uint64_t v2597 = 24;
  if (v2583) {
    uint64_t v2597 = 28;
  }
  *(float *)((char *)v2981 + v2597) = *(float *)((char *)v2981 + v2597) - (float)(v2596 * v2589);
  *((float *)v2981 + (v2584 + 6)) = *((float *)v2981 + (v2584 + 6))
                                                - (float)(*((float *)&v2981[1] + v2582 + 2) * v2588);
  float v2598 = fabsf(v2594);
  float v2599 = fabsf(*(float *)((char *)v2981 + v2591));
  if (v2598 <= v2599) {
    uint64_t v2600 = v2583;
  }
  else {
    uint64_t v2600 = v2584;
  }
  if (v2598 <= v2599) {
    unint64_t v2584 = v2584;
  }
  else {
    unint64_t v2584 = v2583;
  }
  uint64_t v2601 = 4 * (v2600 + 3);
  uint64_t v2602 = 4 * (v2584 + 3);
  float v2603 = *(float *)((char *)v2981 + v2602) / *(float *)((char *)v2981 + v2601);
  *(float *)((char *)v2981 + v2602) = v2603;
  uint64_t v2604 = 4 * (v2600 + 6);
  uint64_t result = 4 * (v2584 + 6);
  float v2606 = *(float *)((char *)v2981 + result) - (float)(*(float *)((char *)v2981 + v2604) * v2603);
  *(float *)((char *)v2981 + result) = v2606;
  v2607 = (float *)((unint64_t)&v2815 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2582 & 3)));
  float v2608 = *(float *)((unint64_t)v2981 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2600 & 3)));
  float v2609 = *(float *)((unint64_t)&v2815 | (4 * v2600)) - (float)(v2608 * *v2607);
  v2610 = (float *)((unint64_t)v2981 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2584 & 3)));
  float v2611 = 1.0 / v2606;
  float v2612 = (float)(*(float *)((unint64_t)&v2815 | (4 * v2584))
                - (float)((float)(v2609 * v2603) + (float)(*v2610 * *v2607)))
        * v2611;
  float v2613 = *(float *)((char *)v2981 + v2604);
  float v2614 = 1.0 / *(float *)((char *)v2981 + v2601);
  float v2615 = *(float *)((char *)v2981 + v2595);
  float v2616 = *(float *)((char *)v2981 + v2590);
  float v2617 = (float)(v2609 - (float)(v2612 * v2613)) * v2614;
  float v2618 = 1.0 / *v2586;
  float v2619 = (float)(*v2607 - (float)((float)(v2615 * v2612) + (float)(v2617 * v2616))) * v2618;
  float v2620 = *(float *)((char *)&v2815 + v2590);
  float v2621 = *(float *)((char *)&v2815 + v2601) - (float)(v2620 * v2608);
  float v2622 = (float)(*(float *)((char *)&v2815 + v2602) - (float)((float)(v2620 * *v2610) + (float)(v2621 * v2603)))
        * v2611;
  float v2623 = (float)(v2621 - (float)(v2622 * v2613)) * v2614;
  float v2624 = *(float *)((char *)&v2815 + v2595);
  float v2625 = *(float *)((char *)&v2815 + v2604) - (float)(v2624 * v2608);
  float v2626 = (float)(v2620 - (float)((float)(v2622 * v2615) + (float)(v2623 * v2616))) * v2618;
  float v2627 = (float)(*(float *)((char *)&v2815 + result) - (float)((float)(v2624 * *v2610) + (float)(v2625 * v2603)))
        * v2611;
  float v2628 = (float)(v2625 - (float)(v2627 * v2613)) * v2614;
  float v2629 = (float)(v2624 - (float)((float)(v2627 * v2615) + (float)(v2628 * v2616))) * v2618;
  float v2630 = (float)(v2629 * 0.0) + (float)(v2653 * v2619);
  float v2631 = (float)(v2629 * 0.0) + (float)(v2653 * v2626);
  float v2632 = (float)(v2629 + (float)(v2651 * v2619)) + (float)(v2652 * v2626);
  float v2633 = (float)(v2628 * 0.0) + (float)(v2653 * v2617);
  float v2634 = (float)(v2628 * 0.0) + (float)(v2653 * v2623);
  float v2635 = (float)(v2628 + (float)(v2651 * v2617)) + (float)(v2652 * v2623);
  float v2636 = (float)(v2627 * 0.0) + (float)(v2653 * v2612);
  float v2637 = (float)(v2627 * 0.0) + (float)(v2653 * v2622);
  float v2638 = (float)(v2627 + (float)(v2651 * v2612)) + (float)(v2652 * v2622);
  float *v2654 = v2630 * (float)(1.0 / v2638);
  v2654[1] = v2633 * (float)(1.0 / v2638);
  v2654[2] = v2636 * (float)(1.0 / v2638);
  v2654[3] = v2631 * (float)(1.0 / v2638);
  v2654[4] = v2634 * (float)(1.0 / v2638);
  v2654[5] = v2637 * (float)(1.0 / v2638);
  v2654[6] = v2632 * (float)(1.0 / v2638);
  v2654[7] = v2635 * (float)(1.0 / v2638);
  v2654[8] = v2638 * (float)(1.0 / v2638);
  return result;
}

float ransac::normalise2dpts(ransac *this, float *a2, float *a3, float *a4)
{
  int v7 = 0;
  int v8 = 0;
  *(void *)&v173[864] = *MEMORY[0x263EF8340];
  v9.i32[0] = *((_DWORD *)this + 2);
  v9.i32[1] = *((_DWORD *)this + 5);
  v9.i32[2] = *((_DWORD *)this + 8);
  v9.i32[3] = *((_DWORD *)this + 11);
  int16x8_t v10 = (int16x8_t)vcgtq_f32(vabsq_f32(v9), (float32x4_t)vdupq_n_s32(0x25800000u));
  *(int8x8_t *)v10.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v10), (int8x8_t)0x1000100010001);
  unsigned __int32 v159 = vmovn_s16(v10).u32[0];
  do
  {
    int v11 = *((unsigned __int8 *)&v159 + v8);
    if (!*((unsigned char *)&v159 + v8))
    {
      ++v8;
      if (v11) {
        break;
      }
      continue;
    }
    v163[v7 - 1] = v8 + 1;
    BOOL v12 = v7++ <= 2;
    int v13 = !v12;
    if (v12) {
      ++v8;
    }
    if (v13) {
      break;
    }
  }
  while (v8 < 4);
  uint64_t v14 = v7 & ~(v7 >> 31);
  if (v7 < 1)
  {
    float v16 = (float)(int)v14;
    float v17 = 0.0;
    float v18 = 0.0 / (float)(int)v14;
    float v19 = v18;
  }
  else
  {
    memcpy(&__dst, &__src, v7 & ~(v7 >> 31));
    if (v14 <= 7)
    {
      uint64_t v15 = 0;
      goto LABEL_25;
    }
    if (v14 >= 0x20)
    {
      uint64_t v15 = v14 & 0x7FFFFFE0;
      int32x2_t v20 = (int8x16_t *)v166;
      int32x2_t v21 = (int8x16_t *)&v165;
      v22.i64[0] = -1;
      v22.i64[1] = -1;
      uint64_t v23 = v15;
      do
      {
        int8x16_t v24 = vaddq_s8(*v21, v22);
        v20[-1] = vaddq_s8(v21[-1], v22);
        *int32x2_t v20 = v24;
        v20 += 2;
        v21 += 2;
        v23 -= 32;
      }
      while (v23);
      if (v15 != v14)
      {
        if ((v14 & 0x18) == 0) {
          goto LABEL_25;
        }
        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v15 = 0;
LABEL_22:
      uint64_t v25 = v15;
      uint64_t v15 = v14 & 0x7FFFFFF8;
      uint64_t v26 = v25 - v15;
      uint64_t v27 = (int8x8_t *)&v163[v25 + 3];
      int v28 = (int8x8_t *)&v161[v25 - 1];
      do
      {
        int8x8_t v29 = *v28++;
        *v27++ = vadd_s8(v29, (int8x8_t)-1);
        v26 += 8;
      }
      while (v26);
      if (v15 != v14)
      {
LABEL_25:
        uint64_t v30 = v14 - v15;
        float v31 = &v163[v15 + 3];
        float v32 = &v161[v15 - 1];
        do
        {
          char v33 = *v32++;
          *v31++ = v33 - 1;
          --v30;
        }
        while (v30);
      }
    }
    if (v14 <= 1)
    {
      uint64_t v34 = 0;
      goto LABEL_32;
    }
    uint64_t v34 = v14 & 0x7FFFFFFE;
    float64x2_t v35 = (float *)&v165;
    uint64_t v36 = v163;
    uint64_t v37 = v34;
    do
    {
      float v38 = *((float *)this + 3 * *v36 - 3) / *((float *)this + 3 * *v36 - 1);
      *(v35 - 1) = *((float *)this + 3 * *(v36 - 1) - 3) / *((float *)this + 3 * *(v36 - 1) - 1);
      *float64x2_t v35 = v38;
      v35 += 2;
      v36 += 2;
      v37 -= 2;
    }
    while (v37);
    if (v34 != v14)
    {
LABEL_32:
      uint64_t v39 = v14 - v34;
      float v40 = (float *)&v164[4 * v34 + 3];
      char v41 = &v163[v34 - 1];
      do
      {
        uint64_t v42 = *v41++;
        *v40++ = *((float *)this + 3 * v42 - 3) / *((float *)this + 3 * (int)v42 - 1);
        --v39;
      }
      while (v39);
    }
    if (v14 <= 1)
    {
      uint64_t v43 = 0;
      goto LABEL_39;
    }
    uint64_t v43 = v14 & 0x7FFFFFFE;
    uint64_t v44 = v164;
    uint64_t v45 = &v165;
    uint64_t v46 = v43;
    do
    {
      uint64_t v47 = 12 * *v44;
      *((_DWORD *)this + 3 * *(v44 - 1)) = *(v45 - 1);
      int v48 = *v45;
      v45 += 2;
      *(_DWORD *)((char *)this + v47) = v48;
      v44 += 2;
      v46 -= 2;
    }
    while (v46);
    if (v43 != v14)
    {
LABEL_39:
      uint64_t v49 = v14 - v43;
      int v50 = &v163[v43 + 3];
      uint64_t v51 = (int *)&v164[4 * v43 + 3];
      do
      {
        int v52 = *v51++;
        int v53 = v52;
        int v54 = *v50++;
        *((_DWORD *)this + 3 * v54) = v53;
        --v49;
      }
      while (v49);
    }
    if (v14 <= 1)
    {
      uint64_t v55 = 0;
      goto LABEL_46;
    }
    uint64_t v55 = v14 & 0x7FFFFFFE;
    float v56 = (float *)&v165;
    float v57 = v163;
    uint64_t v58 = v55;
    do
    {
      float v59 = *((float *)this + 3 * *v57 - 2) / *((float *)this + 3 * *v57 - 1);
      *(v56 - 1) = *((float *)this + 3 * *(v57 - 1) - 2) / *((float *)this + 3 * *(v57 - 1) - 1);
      *float v56 = v59;
      v56 += 2;
      v57 += 2;
      v58 -= 2;
    }
    while (v58);
    if (v55 != v14)
    {
LABEL_46:
      uint64_t v60 = v14 - v55;
      uint64_t v61 = (float *)&v164[4 * v55 + 3];
      int v62 = &v163[v55 - 1];
      do
      {
        uint64_t v63 = *v62++;
        *v61++ = *((float *)this + 3 * v63 - 2) / *((float *)this + 3 * (int)v63 - 1);
        --v60;
      }
      while (v60);
    }
    if (v14 <= 1)
    {
      uint64_t v64 = 0;
      goto LABEL_53;
    }
    uint64_t v64 = v14 & 0x7FFFFFFE;
    uint64_t v65 = v164;
    int64x2_t v66 = &v165;
    uint64_t v67 = v64;
    do
    {
      int v68 = *v66;
      float v69 = (char *)this + 12 * *v65;
      *((_DWORD *)this + 3 * *(v65 - 1) + 1) = *(v66 - 1);
      *((_DWORD *)v69 + 1) = v68;
      v65 += 2;
      v66 += 2;
      v67 -= 2;
    }
    while (v67);
    if (v64 != v14)
    {
LABEL_53:
      uint64_t v70 = v14 - v64;
      int v71 = &v163[v64 + 3];
      uint64_t v72 = (int *)&v164[4 * v64 + 3];
      do
      {
        int v73 = *v72++;
        int v74 = v73;
        int v75 = *v71++;
        *((_DWORD *)this + 3 * v75 + 1) = v74;
        --v70;
      }
      while (v70);
    }
    if (v14 <= 1)
    {
      uint64_t v76 = 0;
      goto LABEL_60;
    }
    uint64_t v76 = v14 & 0x7FFFFFFE;
    uint64_t v77 = v161;
    uint64_t v78 = v76;
    do
    {
      float32x4_t v79 = (char *)this + 12 * *v77;
      *((_DWORD *)this + 3 * *(v77 - 1) - 1) = 1065353216;
      *((_DWORD *)v79 - 1) = 1065353216;
      v77 += 2;
      v78 -= 2;
    }
    while (v78);
    if (v76 != v14)
    {
LABEL_60:
      uint64_t v80 = v14 - v76;
      int v81 = &v161[v76 - 1];
      do
      {
        int v82 = *v81++;
        *((_DWORD *)this + 3 * v82 - 1) = 1065353216;
        --v80;
      }
      while (v80);
    }
    uint64_t v83 = 0;
    float v16 = (float)(int)v14;
    do
    {
      *((void *)&v171 + v83) = *(void *)((char *)this + 12 * v163[v83 - 1] - 12);
      ++v83;
    }
    while (v14 != v83);
    float v84 = v171;
    float v85 = v172;
    if (v14 >= 2)
    {
      if (v14 == 2)
      {
        uint64_t v86 = 2;
        goto LABEL_67;
      }
      uint64_t v86 = 2;
      if ((2 * (v14 - 2)) > 0x7FFFFFFD || (unint64_t)(v14 - 2) >> 31)
      {
LABEL_67:
        uint64_t v87 = v14 - v86 + 1;
        int v88 = 2 * v86 - 1;
        uint64_t v89 = (v86 << 33) - 0x200000000;
        do
        {
          float v84 = *(float *)((char *)&v171 + (v89 >> 30)) + v84;
          float v85 = *(&v171 + v88) + v85;
          v88 += 2;
          v89 += 0x200000000;
          --v87;
        }
        while (v87);
      }
      else
      {
        unint64_t v134 = (v14 - 1) & 0xFFFFFFFFFFFFFFFELL;
        float v135 = 0.0;
        int v136 = 5;
        uint64_t v137 = 0x200000000;
        unint64_t v138 = v134;
        uint64_t v139 = 0x400000000;
        float v140 = 0.0;
        do
        {
          float v84 = *(float *)((char *)&v171 + (v137 >> 30)) + v84;
          float v135 = *(float *)((char *)&v171 + (v139 >> 30)) + v135;
          float v85 = *(&v171 + v136 - 2) + v85;
          float v140 = *(&v171 + v136) + v140;
          v136 += 4;
          v139 += 0x400000000;
          v137 += 0x400000000;
          v138 -= 2;
        }
        while (v138);
        float v85 = v140 + v85;
        float v84 = v135 + v84;
        if (v14 - 1 != v134)
        {
          uint64_t v86 = v134 + 2;
          goto LABEL_67;
        }
      }
    }
    uint64_t v90 = 0;
    float v18 = v84 / v16;
    float32x4_t v91 = &v172;
    float v19 = v85 / v16;
    do
    {
      uint64_t v92 = v90;
      if (v14 == 1) {
        uint64_t v92 = 0;
      }
      uint64_t v93 = 3 * v163[v92 - 1];
      float v94 = *((float *)this + (int)v93 - 2) - v19;
      *(v91 - 1) = *((float *)this + v93 - 3) - v18;
      float *v91 = v94;
      ++v90;
      v91 += 2;
    }
    while (v14 != v90);
    if (v14 > 8)
    {
      uint64_t v96 = v14 & 7;
      if ((v14 & 7) == 0) {
        uint64_t v96 = 8;
      }
      uint64_t v95 = v14 - v96;
      unint64_t v97 = (float32x4_t *)v169;
      uint64_t v98 = (const float *)v173;
      uint64_t v99 = v95;
      do
      {
        uint64_t v100 = v98 - 8;
        unsigned long long v101 = (unsigned __int128)vld2q_f32(v100);
        unsigned long long v102 = (unsigned __int128)vld2q_f32(v98);
        v97[-1] = vmulq_f32((float32x4_t)v101, (float32x4_t)v101);
        *unint64_t v97 = vmulq_f32((float32x4_t)v102, (float32x4_t)v102);
        v97 += 2;
        v98 += 16;
        v99 -= 8;
      }
      while (v99);
    }
    else
    {
      uint64_t v95 = 0;
    }
    uint64_t v103 = &v171 + 2 * v95;
    do
    {
      float v104 = *v103;
      v103 += 2;
      v168[v95++] = v104 * v104;
    }
    while (v14 != v95);
    if (v14 > 8)
    {
      uint64_t v106 = v14 & 7;
      if ((v14 & 7) == 0) {
        uint64_t v106 = 8;
      }
      uint64_t v105 = v14 - v106;
      uint64_t v107 = (float32x4_t *)v167;
      uint64_t v108 = (const float *)&v173[4];
      uint64_t v109 = v105;
      do
      {
        uint64_t v110 = v108 - 8;
        unsigned long long v111 = (unsigned __int128)vld2q_f32(v110);
        unsigned long long v112 = (unsigned __int128)vld2q_f32(v108);
        v107[-1] = vmulq_f32((float32x4_t)v111, (float32x4_t)v111);
        *uint64_t v107 = vmulq_f32((float32x4_t)v112, (float32x4_t)v112);
        v107 += 2;
        v108 += 16;
        v109 -= 8;
      }
      while (v109);
    }
    else
    {
      uint64_t v105 = 0;
    }
    uint64_t v113 = v14 - v105;
    int v114 = (float *)&v166[4 * v105 + 4];
    float v115 = &v171 + 2 * v105 + 1;
    do
    {
      float v116 = *v115;
      v115 += 2;
      *v114++ = v116 * v116;
      --v113;
    }
    while (v113);
    if (v14 <= 7)
    {
      uint64_t v117 = 0;
      goto LABEL_94;
    }
    uint64_t v117 = v14 & 0x7FFFFFF8;
    uint64_t v118 = (float32x4_t *)v169;
    uint64_t v119 = (float32x4_t *)v167;
    uint64_t v120 = v117;
    do
    {
      float32x4_t v121 = vaddq_f32(*v118, *v119);
      v118[-1] = vaddq_f32(v118[-1], v119[-1]);
      float32x4_t *v118 = v121;
      v118 += 2;
      v119 += 2;
      v120 -= 8;
    }
    while (v120);
    if (v117 != v14)
    {
LABEL_94:
      uint64_t v122 = v14 - v117;
      uint64_t v123 = 4 * v117;
      uint64_t v124 = &v168[v117];
      float v125 = (float *)&v166[v123 + 4];
      do
      {
        float v126 = *v125++;
        *uint64_t v124 = *v124 + v126;
        ++v124;
        --v122;
      }
      while (v122);
    }
    if (v14 <= 7)
    {
      uint64_t v127 = 0;
      goto LABEL_101;
    }
    uint64_t v127 = v14 & 0x7FFFFFF8;
    long long v128 = (float32x4_t *)v169;
    uint64_t v129 = v127;
    do
    {
      float32x4_t v130 = vsqrtq_f32(*v128);
      v128[-1] = vsqrtq_f32(v128[-1]);
      *long long v128 = v130;
      v128 += 2;
      v129 -= 8;
    }
    while (v129);
    if (v127 != v14)
    {
LABEL_101:
      uint64_t v131 = v14 - v127;
      unsigned long long v132 = &v168[v127];
      do
      {
        *unsigned long long v132 = sqrtf(*v132);
        ++v132;
        --v131;
      }
      while (v131);
    }
    float v17 = v168[0];
    if (v14 >= 2)
    {
      if (v14 >= 9)
      {
        unint64_t v141 = (v14 - 1) & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v142 = 0uLL;
        float32x4_t v143 = (float32x4_t)LODWORD(v168[0]);
        uint64_t v144 = (float32x4_t *)&v170;
        unint64_t v145 = v141;
        do
        {
          float32x4_t v143 = vaddq_f32(v144[-1], v143);
          float32x4_t v142 = vaddq_f32(*v144, v142);
          v144 += 2;
          v145 -= 8;
        }
        while (v145);
        float32x4_t v146 = vaddq_f32(v142, v143);
        float v17 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v146, v146));
        if (v14 - 1 != v141)
        {
          uint64_t v133 = v141 | 2;
          goto LABEL_116;
        }
      }
      else
      {
        uint64_t v133 = 2;
LABEL_116:
        uint64_t v147 = v14 - v133 + 1;
        uint64_t v148 = &v168[v133 - 1];
        do
        {
          float v149 = *v148++;
          float v17 = v149 + v17;
          --v147;
        }
        while (v147);
      }
    }
  }
  float v150 = (float)(v16 * 1.4142) / v17;
  *a3 = v150;
  float v151 = -(float)(v150 * v18);
  a3[4] = v150;
  a3[6] = v151;
  a3[7] = -(float)(v150 * v19);
  *((void *)a3 + 1) = 0;
  a3[1] = 0.0;
  a3[5] = 0.0;
  a3[8] = 1.0;
  *a2 = (float)(*(float *)this * v150) + (float)(*((float *)this + 2) * v151);
  a2[3] = (float)(*((float *)this + 3) * v150) + (float)(*((float *)this + 5) * v151);
  a2[6] = (float)(*((float *)this + 6) * v150) + (float)(*((float *)this + 8) * v151);
  a2[9] = (float)(*((float *)this + 9) * v150) + (float)(*((float *)this + 11) * v151);
  float v152 = a3[1];
  float v153 = a3[4];
  float v154 = a3[7];
  a2[1] = (float)((float)(*(float *)this * v152) + (float)(*((float *)this + 1) * v153))
        + (float)(*((float *)this + 2) * v154);
  a2[4] = (float)((float)(*((float *)this + 3) * v152) + (float)(*((float *)this + 4) * v153))
        + (float)(*((float *)this + 5) * v154);
  a2[7] = (float)((float)(*((float *)this + 6) * v152) + (float)(*((float *)this + 7) * v153))
        + (float)(*((float *)this + 8) * v154);
  a2[10] = (float)((float)(*((float *)this + 9) * v152) + (float)(*((float *)this + 10) * v153))
         + (float)(*((float *)this + 11) * v154);
  float v155 = a3[2];
  float v156 = a3[5];
  float v157 = a3[8];
  a2[2] = (float)((float)(*(float *)this * v155) + (float)(*((float *)this + 1) * v156))
        + (float)(*((float *)this + 2) * v157);
  a2[5] = (float)((float)(*((float *)this + 3) * v155) + (float)(*((float *)this + 4) * v156))
        + (float)(*((float *)this + 5) * v157);
  a2[8] = (float)((float)(*((float *)this + 6) * v155) + (float)(*((float *)this + 7) * v156))
        + (float)(*((float *)this + 8) * v157);
  float result = (float)((float)(*((float *)this + 9) * v155) + (float)(*((float *)this + 10) * v156))
         + (float)(*((float *)this + 11) * v157);
  a2[11] = result;
  return result;
}

float *binary_expand_op(float *result, unsigned int *a2, const int *a3, const int *a4, float *a5, const int *a6, unsigned int a7, double a8, double a9, float32x4_t a10)
{
  v96[166] = *MEMORY[0x263EF8340];
  uint64_t v10 = *a2;
  if (a6 == 1) {
    unsigned int v11 = *a2;
  }
  else {
    unsigned int v11 = a6;
  }
  if (a7 == 1) {
    uint64_t v12 = a4;
  }
  else {
    uint64_t v12 = a7;
  }
  if ((int)v12 < 1 || (int)v11 < 1)
  {
    *a2 = v11;
    a2[1] = v12;
    return result;
  }
  uint64_t v14 = result;
  uint64_t v15 = a4 != 1;
  uint64_t v16 = a7 != 1;
  if (v10 != 1)
  {
    if (a6 == 1)
    {
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = (float32x4_t *)v96;
      __asm { FMOV            V1.4S, #1.0 }
      while (1)
      {
        uint64_t v31 = (a3[v22] - 1) * (int)v10;
        a10.f32[0] = a5[v23];
        if (v11 >= 8)
        {
          LODWORD(v33) = vdivq_f32(_Q1, a10).u32[0];
          uint64_t v34 = (float32x4_t *)&result[v31 + 4];
          float64x2_t v35 = v25;
          uint64_t v36 = v10 & 0xFFFFFFF8;
          do
          {
            float32x4_t v37 = vmulq_n_f32(*v34, v33);
            v35[-1] = vmulq_n_f32(v34[-1], v33);
            *float64x2_t v35 = v37;
            v35 += 2;
            v34 += 2;
            v36 -= 8;
          }
          while (v36);
          uint64_t v32 = v10 & 0xFFFFFFF8;
          if (v32 == v10) {
            goto LABEL_21;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
        uint64_t v38 = v10 - v32;
        uint64_t v39 = (float *)&v95[4 * v32 + 4 * v21];
        float v40 = &result[v32 + v31];
        float v41 = 1.0 / a10.f32[0];
        do
        {
          float v42 = *v40++;
          *v39++ = v42 * v41;
          --v38;
        }
        while (v38);
LABEL_21:
        v23 += v16;
        v22 += v15;
        ++v24;
        uint64_t v25 = (float32x4_t *)((char *)v25 + 4 * (int)v10);
        v21 += (int)v10;
        if (v24 == v12) {
          goto LABEL_35;
        }
      }
    }
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v58 = (float32x4_t *)v96;
    float v59 = a5 + 4;
    uint64_t v60 = (a7 != 1) * (uint64_t)(int)a6;
    while (1)
    {
      uint64_t v61 = (a3[v56] - 1) * (int)v10;
      if (v11 >= 8)
      {
        uint64_t v63 = (float32x4_t *)v59;
        uint64_t v64 = v58;
        uint64_t v65 = a6 & 0xFFFFFFF8;
        int64x2_t v66 = (float32x4_t *)&result[v61 + 4];
        do
        {
          float32x4_t v67 = vdivq_f32(*v66, *v63);
          v64[-1] = vdivq_f32(v66[-1], v63[-1]);
          *uint64_t v64 = v67;
          v66 += 2;
          v64 += 2;
          v63 += 2;
          v65 -= 8;
        }
        while (v65);
        uint64_t v62 = a6 & 0xFFFFFFF8;
        if (v62 == a6) {
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v62 = 0;
      }
      uint64_t v68 = a6 - v62;
      float v69 = (float *)&v95[4 * v62 + 4 * v55];
      uint64_t v70 = &a5[v62 + v54];
      int v71 = &result[v62 + v61];
      do
      {
        float v72 = *v71++;
        float v73 = v72;
        float v74 = *v70++;
        *v69++ = v73 / v74;
        --v68;
      }
      while (v68);
LABEL_39:
      v56 += v15;
      ++v57;
      uint64_t v58 = (float32x4_t *)((char *)v58 + 4 * (int)a6);
      v59 += v60;
      v55 += (int)a6;
      v54 += v60;
      if (v57 == v12) {
        goto LABEL_35;
      }
    }
  }
  if (a6 == 1)
  {
    uint64_t v17 = 4 * v15;
    uint64_t v18 = 4 * v16;
    float v19 = v95;
    uint64_t v20 = v12;
    do
    {
      *(float *)&a8 = result[*a3 - 1] / *a5;
      if (v11 >= 8)
      {
        int32x4_t v75 = vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        for (unint64_t i = (int32x4_t *)v96; ; i += 2)
        {
          i[-1] = v75;
          int32x4_t *i = v75;
        }
      }
      a3 = (const int *)((char *)a3 + v17);
      *v19++ = LODWORD(a8);
      a5 = (float *)((char *)a5 + v18);
      --v20;
    }
    while (v20);
  }
  else
  {
    uint64_t v43 = a6;
    if (v11 >= 8)
    {
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      uint64_t v79 = a6 & 0xFFFFFFF8;
      uint64_t v80 = (float32x4_t *)v96;
      uint64_t v81 = 4 * (int)a6;
      int v82 = a5 + 4;
      unint64_t v83 = 4 * (int)a6 * (unint64_t)(a7 != 1);
      float v84 = (float *)&v95[(4 * a6) & 0x3FFFFFFE0];
      float v85 = (float *)((char *)a5 + ((4 * a6) & 0x3FFFFFFE0));
      do
      {
        *(float *)&a8 = result[a3[v77] - 1];
        float32x4_t v86 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
        uint64_t v87 = (float32x4_t *)v82;
        int v88 = v80;
        uint64_t v89 = v43 & 0xFFFFFFF8;
        do
        {
          float32x4_t v90 = vdivq_f32(v86, *v87);
          v88[-1] = vdivq_f32(v86, v87[-1]);
          *int v88 = v90;
          v88 += 2;
          v87 += 2;
          v89 -= 8;
        }
        while (v89);
        if (v43 != v79)
        {
          float32x4_t v91 = v85;
          uint64_t v92 = v84;
          uint64_t v93 = v43 - (v43 & 0xFFFFFFF8);
          do
          {
            float v94 = *v91++;
            *v92++ = *(float *)&a8 / v94;
            --v93;
          }
          while (v93);
        }
        v77 += v15;
        ++v78;
        uint64_t v80 = (float32x4_t *)((char *)v80 + v81);
        int v82 = (const float *)((char *)v82 + v83);
        float v84 = (float *)((char *)v84 + v81);
        float v85 = (float *)((char *)v85 + v83);
      }
      while (v78 != v12);
    }
    else
    {
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      uint64_t v46 = (float *)v95;
      do
      {
        float v47 = v14[a3[v44] - 1];
        int v48 = a5;
        uint64_t v49 = v46;
        uint64_t v50 = a6;
        do
        {
          float v51 = *v48++;
          *v49++ = v47 / v51;
          --v50;
        }
        while (v50);
        v44 += v15;
        ++v45;
        v46 += (int)a6;
        a5 += (int)a6 * (unint64_t)(a7 != 1);
      }
      while (v45 != v12);
    }
  }
LABEL_35:
  uint64_t v52 = 0;
  *a2 = v11;
  a2[1] = v12;
  size_t v53 = 4 * v11;
  do
  {
    float result = (float *)memcpy((char *)v14 + v52, &v95[v52], v53);
    v52 += v53;
    --v12;
  }
  while (v12);
  return result;
}

void coder::internal::b_svd(coder::internal *this, const double *a2, const int *a3, double *a4, int *a5, double *a6, int *a7, double *a8, float a9)
{
  float32x4_t v9 = (const void *)MEMORY[0x270FA5388](this, a2, a3, a9);
  unsigned int v11 = v10;
  int v13 = v12;
  float32x2_t v620 = v14;
  int v633 = v15;
  uint64_t v17 = v16;
  float v19 = v18;
  uint64_t v675 = *MEMORY[0x263EF8340];
  int v20 = *v18;
  uint64_t v21 = *v18;
  int64_t v667 = *v18;
  if (*v18 >= 1)
  {
    memcpy(__dst, v9, 72 * v20);
    int v20 = v667;
  }
  if ((int)v21 >= 8) {
    int v22 = 8;
  }
  else {
    int v22 = v21;
  }
  int v23 = v22 + 1;
  if (v20 >= 9) {
    int v24 = 9;
  }
  else {
    int v24 = v20;
  }
  *int v13 = v24;
  bzero(__src, 8 * v23);
  uint64_t v671 = 0;
  memset(v670, 0, sizeof(v670));
  uint64_t v25 = *v19;
  if ((int)v25 >= 1) {
    bzero(v673, 8 * v25);
  }
  *int v633 = v25;
  v633[1] = *v13;
  if (*v13 * *v19 >= 1) {
    bzero(v17, 8 * (*v13 * *v19));
  }
  float v624 = v13;
  bzero(v11, 0x288uLL);
  int v26 = *v19;
  if (!*v19)
  {
    *unsigned int v11 = 0x3FF0000000000000;
    v11[10] = 0x3FF0000000000000;
    v11[20] = 0x3FF0000000000000;
    v11[30] = 0x3FF0000000000000;
    v11[40] = 0x3FF0000000000000;
    v11[50] = 0x3FF0000000000000;
    v11[60] = 0x3FF0000000000000;
    v11[70] = 0x3FF0000000000000;
    v11[80] = 0x3FF0000000000000;
    goto LABEL_476;
  }
  if (v26 >= 7) {
    int v27 = 7;
  }
  else {
    int v27 = *v19;
  }
  int v619 = *v19;
  if (v26 >= 10) {
    int v26 = 10;
  }
  LODWORD(v28) = v26 - 1;
  int v621 = v26;
  int v623 = v27;
  uint64_t v628 = (v26 - 1);
  if (v26 <= v27) {
    uint64_t v28 = v27;
  }
  else {
    uint64_t v28 = v28;
  }
  uint64_t v629 = v28;
  int64_t v29 = v667;
  uint64_t v669 = v21;
  if ((int)v28 >= 1)
  {
    int v30 = 0;
    int64_t v31 = 0;
    uint64_t v32 = (v21 + 1);
    uint64_t v625 = v32 - 2;
    unsigned int v33 = v21 - 1;
    uint64_t v668 = v667 << 32;
    uint64_t v654 = 0;
    uint64_t v658 = v32 - 1;
    int v34 = 1;
    int v35 = 2;
    uint64_t v36 = 0xFFFFFFFFLL;
    int v647 = v21 + 1;
    uint64_t v37 = 0x100000000;
    uint64_t v38 = 8;
    int v39 = -1;
    uint64_t v40 = 1;
    int v41 = v21 + 1;
    uint64_t v634 = v32;
    do
    {
      unint64_t v42 = v31;
      uint64_t v43 = v34;
      uint64_t v662 = (v21 + ~v31);
      uint64_t v44 = (v29 - v31);
      int v45 = v32 * v31;
      uint64_t v46 = v29 - v31;
      int v649 = v45;
      uint64_t v642 = v37;
      size_t v644 = v36;
      uint64_t v641 = v38;
      int v640 = v39;
      uint64_t v637 = v33;
      uint64_t v638 = v40;
      int v636 = v41;
      int v635 = v34;
      uint64_t v664 = v29 - v31;
      if (v31 < (int)v628)
      {
        if (v46 >= 1)
        {
          if (v46 == 1)
          {
            double v49 = fabs(__dst[v45]);
            if (v49 > 0.0) {
              goto LABEL_37;
            }
          }
          else
          {
            uint64_t v50 = v45 + 1;
            uint64_t v51 = v46 + v50;
            double v52 = 0.0;
            double v53 = 3.31216864e-170;
            do
            {
              double v54 = fabs(*(double *)&v673[8 * v50 + 1784]);
              double v55 = v52 + v54 / v53 * (v54 / v53);
              double v52 = v53 / v54 * (v53 / v54) * v52 + 1.0;
              if (v54 <= v53) {
                double v52 = v55;
              }
              else {
                double v53 = v54;
              }
              ++v50;
            }
            while (v50 < v51);
            double v49 = sqrt(v52) * v53;
            if (v49 > 0.0)
            {
LABEL_37:
              uint64_t v56 = (v33 + 1) & 0x1FFFFFFFCLL;
              uint64_t v57 = (float64x2_t *)&__dst[v34 + 1];
              uint64_t v58 = v662 + 1;
              if (__dst[v45] >= 0.0) {
                double v59 = v49;
              }
              else {
                double v59 = -v49;
              }
              int v60 = v45 + v44;
              if (fabs(v49) >= 1.00208418e-292)
              {
                if (v45 < v60)
                {
                  uint64_t v66 = v43;
                  if (v662 >= 3)
                  {
                    uint64_t v67 = v58 & 0x1FFFFFFFCLL;
                    double v68 = 1.0 / v59;
                    do
                    {
                      float64x2_t v69 = vmulq_n_f64(*v57, v68);
                      v57[-1] = vmulq_n_f64(v57[-1], v68);
                      *uint64_t v57 = v69;
                      v57 += 2;
                      v56 -= 4;
                    }
                    while (v56);
                    if (v58 == v67) {
                      goto LABEL_58;
                    }
                    uint64_t v66 = v67 + v43;
                  }
                  uint64_t v70 = (double *)&v673[8 * v66 + 1784];
                  do
                  {
                    *uint64_t v70 = *v70 * (1.0 / v59);
                    ++v70;
                    LODWORD(v66) = v66 + 1;
                  }
                  while (v41 != v66);
                }
              }
              else if (v45 < v60)
              {
                uint64_t v61 = v43;
                if (v662 < 3)
                {
LABEL_47:
                  uint64_t v65 = (double *)&v673[8 * v61 + 1784];
                  do
                  {
                    *uint64_t v65 = *v65 * (1.0 / v59);
                    ++v65;
                    LODWORD(v61) = v61 + 1;
                  }
                  while (v41 != v61);
                }
                else
                {
                  uint64_t v62 = v58 & 0x1FFFFFFFCLL;
                  double v63 = 1.0 / v59;
                  do
                  {
                    float64x2_t v64 = vmulq_n_f64(*v57, v63);
                    v57[-1] = vmulq_n_f64(v57[-1], v63);
                    *uint64_t v57 = v64;
                    v57 += 2;
                    v56 -= 4;
                  }
                  while (v56);
                  if (v58 != v62)
                  {
                    uint64_t v61 = v62 + v43;
                    goto LABEL_47;
                  }
                }
              }
LABEL_58:
              int v47 = v30;
              __dst[v45] = __dst[v45] + 1.0;
              __src[v42] = -v59;
              int v48 = 1;
              goto LABEL_59;
            }
          }
        }
        int v47 = v30;
        int v48 = 0;
        __src[v42] = 0.0;
      }
      else
      {
        int v47 = v30;
        int v48 = 0;
      }
LABEL_59:
      uint64_t v659 = v35;
      if (v42 <= 7)
      {
        int v71 = 0;
        uint64_t v72 = v35;
        int v73 = v42 + v29 * (v35 - 1);
        uint64_t v74 = v654 + v668 * (v35 - 1);
        unint64_t v75 = v44 - 1;
        int v76 = v42 * v634;
        int v77 = v29 + v42 * v634;
        uint64_t v78 = v44;
        uint64_t v79 = (uint64_t)((v42 * v634) << 32) >> 29;
        uint64_t v632 = (double *)((char *)__dst + v79);
        uint64_t v80 = (double *)((char *)&__dst[v78] + v79);
        if (v664 <= 0) {
          int v48 = 0;
        }
        uint64_t v630 = &__dst[v78];
        int v81 = v76 + v75;
        uint64_t v82 = v44 & 0xFFFFFFFC;
        while (2)
        {
          if (!v48) {
            goto LABEL_63;
          }
          int v83 = v77 + v669 * v71;
          double v84 = 0.0;
          if (v44 < 8)
          {
            uint64_t v85 = 0;
            goto LABEL_76;
          }
          uint64_t v85 = 0;
          if (v81 < v76) {
            goto LABEL_76;
          }
          if (v83 + (int)v75 < v83 || HIDWORD(v75) != 0) {
            goto LABEL_76;
          }
          float64x2_t v87 = 0uLL;
          int v88 = v47;
          uint64_t v89 = v74;
          uint64_t v90 = v658 & 0xFFFFFFFC;
          float64x2_t v91 = 0uLL;
          do
          {
            uint64_t v92 = (float64x2_t *)&__dst[v88];
            float64x2_t v93 = *v92;
            float64x2_t v94 = v92[1];
            uint64_t v95 = (float64x2_t *)((char *)__dst + (v89 >> 29));
            float64x2_t v87 = vmlaq_f64(v87, v93, *v95);
            float64x2_t v91 = vmlaq_f64(v91, v94, v95[1]);
            v89 += 0x400000000;
            v88 += 4;
            v90 -= 4;
          }
          while (v90);
          double v84 = vaddvq_f64(vaddq_f64(v91, v87));
          uint64_t v85 = v44 & 0xFFFFFFFC;
          if (v82 != v44)
          {
LABEL_76:
            uint64_t v96 = v658 - v85;
            int64_t v97 = (unint64_t)(v85 + v73) << 32;
            int v98 = v47 + v85;
            do
            {
              double v84 = v84 + *(double *)((char *)__dst + (v97 >> 29)) * __dst[v98];
              v97 += 0x100000000;
              ++v98;
              --v96;
            }
            while (v96);
          }
          double v99 = -v84 / __dst[v649];
          int64_t v29 = v667;
          if (v99 != 0.0)
          {
            if (v44 < 8) {
              goto LABEL_85;
            }
            uint64_t v100 = 0;
            if (!HIDWORD(v75) && v83 + (int)v75 >= v83 && v81 >= v76)
            {
              uint64_t v101 = v83;
              if (&__dst[v101] >= v80 || v632 >= &v630[v101])
              {
                float64x2_t v105 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v99, 0);
                int v106 = v47;
                uint64_t v107 = v74;
                uint64_t v108 = v658 & 0xFFFFFFFC;
                do
                {
                  uint64_t v109 = (float64x2_t *)&__dst[v106];
                  float64x2_t v110 = *v109;
                  float64x2_t v111 = v109[1];
                  unsigned long long v112 = (float64x2_t *)((char *)__dst + (v107 >> 29));
                  float64x2_t v113 = vmlaq_f64(v112[1], v105, v111);
                  *unsigned long long v112 = vmlaq_f64(*v112, v105, v110);
                  v112[1] = v113;
                  v107 += 0x400000000;
                  v106 += 4;
                  v108 -= 4;
                }
                while (v108);
                uint64_t v100 = v44 & 0xFFFFFFFC;
                if (v82 == v44) {
                  goto LABEL_63;
                }
              }
              else
              {
LABEL_85:
                uint64_t v100 = 0;
              }
            }
            uint64_t v102 = v658 - v100;
            int64_t v103 = (unint64_t)(v100 + v73) << 32;
            int v104 = v47 + v100;
            do
            {
              *(double *)((char *)__dst + (v103 >> 29)) = *(double *)((char *)__dst + (v103 >> 29)) + __dst[v104] * v99;
              v103 += 0x100000000;
              ++v104;
              --v102;
            }
            while (v102);
          }
LABEL_63:
          *((double *)v670 + v72 - 1) = __dst[v42 + (v72 - 1) * v29];
          ++v72;
          ++v71;
          v74 += v668;
          v73 += v29;
          if (v72 == 10) {
            break;
          }
          continue;
        }
      }
      int v114 = v637;
      int v115 = v47;
      LODWORD(v32) = v634;
      uint64_t v117 = v642;
      size_t v116 = v644;
      int v118 = v640;
      uint64_t v119 = v638;
      if ((uint64_t)v42 < (int)v628 && v29 > (uint64_t)v42)
      {
        unint64_t v120 = ~v42 + v634;
        int v121 = *v633;
        uint64_t v122 = v638;
        if (v120 <= 0xD) {
          goto LABEL_106;
        }
        unint64_t v123 = v625 - v42;
        uint64_t v122 = v638;
        if (v649 + (int)v625 - (int)v42 < v649) {
          goto LABEL_106;
        }
        BOOL v124 = (v121 + 1) * (int)v42 + (int)v123 >= (v121 + 1) * (int)v42 && HIDWORD(v123) == 0;
        uint64_t v122 = v638;
        if (!v124) {
          goto LABEL_106;
        }
        int v125 = 0;
        unint64_t v126 = v658 & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v127 = v120 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          long long v128 = (long long *)&__dst[v47 + v125];
          long long v129 = *v128;
          long long v130 = v128[1];
          uint64_t v131 = &v17[8 * (int)v42 * (v121 + 1) + 8 * v125];
          *(_OWORD *)uint64_t v131 = v129;
          *((_OWORD *)v131 + 1) = v130;
          v125 += 4;
          v126 -= 4;
        }
        while (v126);
        if (v120 != v127)
        {
          uint64_t v122 = v638 + v127;
LABEL_106:
          uint64_t v132 = v634 - v122;
          int v133 = v122 + v121 * v42 - 1;
          int v134 = v640 + v122;
          do
          {
            *(double *)&v17[8 * v133++] = __dst[v134++];
            --v132;
          }
          while (v132);
        }
      }
      int64_t v31 = v42 + 1;
      if ((uint64_t)v42 >= v623) {
        goto LABEL_24;
      }
      unint64_t v135 = v38 & 0xFFFFFFFFFFFFFFFCLL;
      int64_t v136 = (unint64_t)(v644 + v35) << 32;
      uint64_t v137 = (_OWORD *)((char *)v670 + 8 * v35 + 8);
      unint64_t v138 = 8 - v42;
      unint64_t v139 = 7 - v42;
      int v650 = v634 + v649;
      double v140 = 0.0;
      double v141 = 3.31216864e-170;
      unint64_t v142 = v42;
      do
      {
        double v143 = fabs(*((double *)v670 + v142 + 1));
        double v144 = v140 + v143 / v141 * (v143 / v141);
        double v140 = v141 / v143 * (v141 / v143) * v140 + 1.0;
        if (v143 > v141) {
          double v141 = v143;
        }
        else {
          double v140 = v144;
        }
        ++v142;
      }
      while (v142 != 8);
      double v145 = v141 * sqrt(v140);
      unint64_t v626 = 7 - v42;
      unint64_t v627 = 8 - v42;
      if (v145 == 0.0)
      {
        *((void *)v670 + v42) = 0;
        goto LABEL_142;
      }
      if (*((double *)v670 + v31) >= 0.0) {
        double v146 = v145;
      }
      else {
        double v146 = -v145;
      }
      *((double *)v670 + v42) = v146;
      unint64_t v631 = v662 - 1;
      if (fabs(v145) >= 1.00208418e-292)
      {
        if (v42 > 7) {
          goto LABEL_141;
        }
        unint64_t v154 = v35;
        if (v138 <= 3) {
          goto LABEL_139;
        }
        unint64_t v154 = v35;
        if (-4 - (int)v42 < v139) {
          goto LABEL_139;
        }
        unint64_t v154 = v35;
        if (HIDWORD(v139)) {
          goto LABEL_139;
        }
        unint64_t v155 = v138 & 0xFFFFFFFFFFFFFFFCLL;
        float v156 = (float64x2_t *)((char *)v670 + 8 * v35 + 8);
        unint64_t v157 = v38 & 0xFFFFFFFFFFFFFFFCLL;
        double v158 = 1.0 / v146;
        do
        {
          float64x2_t v159 = vmulq_n_f64(*v156, v158);
          v156[-1] = vmulq_n_f64(v156[-1], v158);
          float64x2_t *v156 = v159;
          v156 += 2;
          v157 -= 4;
        }
        while (v157);
        if (v138 != v155)
        {
          unint64_t v154 = v155 + v35;
LABEL_139:
          double v160 = 1.0 / v146;
          do
          {
            *((double *)&v669 + v154) = *((double *)&v669 + v154) * v160;
            ++v154;
          }
          while (v154 != 10);
        }
      }
      else
      {
        if (v42 > 7) {
          goto LABEL_141;
        }
        unint64_t v147 = v35;
        if (v138 <= 3) {
          goto LABEL_128;
        }
        unint64_t v147 = v35;
        if (-4 - (int)v42 < v139) {
          goto LABEL_128;
        }
        unint64_t v147 = v35;
        if (HIDWORD(v139)) {
          goto LABEL_128;
        }
        unint64_t v148 = v138 & 0xFFFFFFFFFFFFFFFCLL;
        float v149 = (float64x2_t *)((char *)v670 + 8 * v35 + 8);
        unint64_t v150 = v38 & 0xFFFFFFFFFFFFFFFCLL;
        double v151 = 1.0 / v146;
        do
        {
          float64x2_t v152 = vmulq_n_f64(*v149, v151);
          v149[-1] = vmulq_n_f64(v149[-1], v151);
          *float v149 = v152;
          v149 += 2;
          v150 -= 4;
        }
        while (v150);
        if (v138 != v148)
        {
          unint64_t v147 = v148 + v35;
LABEL_128:
          double v153 = 1.0 / v146;
          do
          {
            *((double *)&v669 + v147) = *((double *)&v669 + v147) * v153;
            ++v147;
          }
          while (v147 != 10);
        }
      }
LABEL_141:
      double v161 = *((double *)v670 + v31) + 1.0;
      *((double *)v670 + v31) = v161;
      *((double *)v670 + v42) = -*((double *)v670 + v42);
      if ((uint64_t)(v42 + 2) <= v29)
      {
        int v622 = v115;
        bzero(&v673[8 * v42 + 8], 8 * (int)v662);
        int64_t v31 = v42 + 1;
        int v114 = v637;
        uint64_t v119 = v638;
        int v118 = v640;
        uint64_t v38 = v641;
        uint64_t v117 = v642;
        size_t v116 = v644;
        LODWORD(v32) = v634;
        int v115 = v622;
        int64_t v29 = v667;
        if (v42 <= 7)
        {
          int v167 = 0;
          int v168 = v638 + v631;
          uint64_t v169 = v659;
          uint64_t v170 = v662 & 0xFFFFFFFC;
          int v171 = v647;
          while (2)
          {
            if (v664 >= 2)
            {
              uint64_t v172 = *((uint64_t *)v670 + v169 - 1);
              if (*(double *)&v172 != 0.0)
              {
                if (v662 < 6)
                {
                  uint64_t v173 = 0;
                  goto LABEL_170;
                }
                uint64_t v173 = 0;
                if (v168 < (int)v638) {
                  goto LABEL_170;
                }
                if (v650 + (int)v667 * v167 + (int)v631 < v650 + (int)v667 * v167 || HIDWORD(v631) != 0) {
                  goto LABEL_170;
                }
                float64x2_t v175 = (float64x2_t)vdupq_lane_s64(v172, 0);
                int v176 = v171;
                uint64_t v177 = v642;
                uint64_t v178 = v637 & 0xFFFFFFFC;
                do
                {
                  unsigned int v179 = (float64x2_t *)&__dst[v176];
                  float64x2_t v180 = *v179;
                  float64x2_t v181 = v179[1];
                  float v182 = (float64x2_t *)&v673[v177 >> 29];
                  float64x2_t v183 = vmlaq_f64(v182[1], v175, v181);
                  *float v182 = vmlaq_f64(*v182, v175, v180);
                  v182[1] = v183;
                  v177 += 0x400000000;
                  v176 += 4;
                  v178 -= 4;
                }
                while (v178);
                uint64_t v173 = v662 & 0xFFFFFFFC;
                if (v170 != v662)
                {
LABEL_170:
                  uint64_t v184 = v637 - v173;
                  int64_t v185 = (unint64_t)(v638 + v173) << 32;
                  int v186 = v171 + v173;
                  do
                  {
                    *(double *)&v673[v185 >> 29] = *(double *)&v673[v185 >> 29] + __dst[v186] * *(double *)&v172;
                    v185 += 0x100000000;
                    ++v186;
                    --v184;
                  }
                  while (v184);
                }
              }
            }
            ++v169;
            ++v167;
            v171 += v669;
            if (v169 != 10) {
              continue;
            }
            break;
          }
          int v187 = 0;
          int v188 = v647;
          uint64_t v189 = v659;
          while (2)
          {
            if (v664 >= 2)
            {
              double v190 = -(*((double *)v670 + v189 - 1) * (1.0 / v161));
              if (v190 != 0.0)
              {
                if (v662 < 6)
                {
                  uint64_t v191 = 0;
                  goto LABEL_187;
                }
                uint64_t v191 = 0;
                if (HIDWORD(v631)) {
                  goto LABEL_187;
                }
                BOOL v192 = v650 + (int)v669 * v187 + (int)v631 < v650 + (int)v669 * v187 || v168 < (int)v638;
                if (v192) {
                  goto LABEL_187;
                }
                float64x2_t v193 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v190, 0);
                int v194 = v188;
                uint64_t v195 = v642;
                uint64_t v196 = v637 & 0xFFFFFFFC;
                do
                {
                  unint64_t v197 = (float64x2_t *)&v673[v195 >> 29];
                  float64x2_t v198 = *v197;
                  float64x2_t v199 = v197[1];
                  uint64_t v200 = (float64x2_t *)&__dst[v194];
                  float64x2_t v201 = vmlaq_f64(v200[1], v193, v199);
                  float64x2_t *v200 = vmlaq_f64(*v200, v193, v198);
                  v200[1] = v201;
                  v195 += 0x400000000;
                  v194 += 4;
                  v196 -= 4;
                }
                while (v196);
                uint64_t v191 = v662 & 0xFFFFFFFC;
                if (v170 != v662)
                {
LABEL_187:
                  uint64_t v202 = v637 - v191;
                  int64_t v203 = (unint64_t)(v638 + v191) << 32;
                  int v204 = v188 + v191;
                  do
                  {
                    __dst[v204] = __dst[v204] + *(double *)&v673[v203 >> 29] * v190;
                    v203 += 0x100000000;
                    ++v204;
                    --v202;
                  }
                  while (v202);
                }
              }
            }
            ++v189;
            ++v187;
            v188 += v669;
            if (v189 == 10) {
              goto LABEL_142;
            }
            continue;
          }
        }
        goto LABEL_24;
      }
LABEL_142:
      int64_t v31 = v42 + 1;
      if (v42 <= 7)
      {
        uint64_t v162 = v659;
        if (v627 >= 0xA)
        {
          uint64_t v162 = v659;
          if (-4 - (int)v42 >= v626)
          {
            uint64_t v162 = v659;
            if ((int)(((10 * v42) | 1) + v626) >= (int)((10 * v42) | 1))
            {
              uint64_t v162 = v659;
              if (!HIDWORD(v626))
              {
                unint64_t v163 = v627 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  long long v164 = *v137;
                  int v165 = (_OWORD *)((char *)v11 + (v136 >> 29));
                  _OWORD *v165 = *(v137 - 1);
                  v165[1] = v164;
                  v136 += 0x400000000;
                  v137 += 2;
                  v135 -= 4;
                }
                while (v135);
                if (v627 == v163) {
                  goto LABEL_24;
                }
                uint64_t v162 = v163 + v659;
              }
            }
          }
        }
        int64_t v166 = (unint64_t)(v162 + v116) << 32;
        do
        {
          *(void *)((char *)v11 + (v166 >> 29)) = *(&v669 + v162++);
          v166 += 0x100000000;
        }
        while (v162 != 10);
      }
LABEL_24:
      int v34 = v635 + v32;
      LODWORD(v21) = v669;
      int v41 = v636 + v669;
      int v35 = v659 + 1;
      uint64_t v40 = v119 + 1;
      unsigned int v33 = v114 - 1;
      --v658;
      v654 += 0x100000000;
      int v30 = v115 + v32;
      int v39 = v118 + v29;
      --v38;
      uint64_t v37 = v117 + 0x100000000;
      v647 += v32;
      uint64_t v36 = v116 + 9;
    }
    while (v31 != v629);
  }
  if (v619 >= 8) {
    int v205 = 8;
  }
  else {
    int v205 = v619;
  }
  if (v619 < 10)
  {
    __src[(int)v628] = __dst[(int)v628 + (int)v628 * v619];
    if (v619 != 9) {
      __src[v205] = 0.0;
    }
  }
  if (v623 < v205) {
    *((double *)v670 + v623) = __dst[v623 + v205 * v619];
  }
  int v648 = v205;
  *((void *)v670 + v205) = 0;
  uint64_t v206 = *v13;
  if ((int)v206 >= v621)
  {
    uint64_t v207 = *v633;
    if ((int)v669 <= 0)
    {
      uint64_t v214 = (v206 - v621);
      if (v206 == v621) {
        goto LABEL_205;
      }
      int v606 = v207 + 1;
      unsigned int v607 = ~v207;
      int v608 = v621 + v207 * v628 - 1;
      if ((int)v207 + 1 >= 0) {
        unsigned int v607 = v207 + 1;
      }
      unint64_t v609 = v607 * (unint64_t)v214;
      BOOL v610 = v608 + (int)v609 < v608;
      BOOL v611 = v608 - (int)v609 > v608;
      if (v606 >= 0) {
        BOOL v611 = v610;
      }
      BOOL v612 = (v609 & 0xFFFFFFFF00000000) != 0;
      if (v611 || v612)
      {
LABEL_205:
        int v215 = v621;
        int v216 = v621;
      }
      else
      {
        int v613 = 0;
        uint64_t v614 = v214 + 1;
        uint64_t v615 = (v214 + 1) & 0x1FFFFFFFELL;
        int v616 = v621 * v606;
        int v617 = v628 * v606;
        uint64_t v618 = v615;
        do
        {
          *(void *)&v17[8 * v617 + 8 * v613] = 0x3FF0000000000000;
          *(void *)&v17[8 * v616 + 8 * v613] = 0x3FF0000000000000;
          v613 += 2 * v207 + 2;
          v618 -= 2;
        }
        while (v618);
        if (v614 == v615) {
          goto LABEL_208;
        }
        int v215 = v615 + v621;
        int v216 = v621 + v615;
      }
      int v217 = v216 + v207 * (v215 - 1) - 1;
      int v218 = v207 + 1;
      int v219 = v206 - v215 + 1;
      do
      {
        *(void *)&v17[8 * v217] = 0x3FF0000000000000;
        v217 += v218;
        --v219;
      }
      while (v219);
    }
    else
    {
      uint64_t v208 = 8 * v207;
      size_t v209 = 8 * v669;
      int v210 = v206 - v621 + 1;
      int v211 = v207 + 1;
      int v212 = v628 * (v207 + 1);
      uint64_t v213 = &v17[8 * (int)v207 * (int)v628];
      do
      {
        bzero(v213, v209);
        *(void *)&v17[8 * v212] = 0x3FF0000000000000;
        v212 += v211;
        v213 += v208;
        --v210;
      }
      while (v210);
    }
  }
LABEL_208:
  uint64_t v655 = (v621 - 2);
  uint64_t v220 = v667;
  if (v621 >= 2)
  {
    uint64_t v221 = 0;
    uint64_t v645 = 8 * v669;
    uint64_t v222 = v621 - 1;
    int64_t v223 = v667 - v621;
    uint64_t v639 = v223 + 1;
    uint64_t v224 = v223 + 2;
    int v665 = ~v669;
    int v225 = v669 - v621 + 2;
    int v226 = v655 + v667 * v628;
    int v663 = v667 + 1;
    int v227 = v655 * (v667 + 1);
    int v228 = v621 - 2;
    uint64_t v651 = v223 + 2;
    do
    {
      uint64_t v229 = v222 - 1;
      int v230 = v663 * (v222 - 1);
      if (__src[v222 - 1] == 0.0)
      {
        if ((int)v669 >= 1)
        {
          double v278 = &v17[8 * v229 * *v633];
          LODWORD(v668) = v228;
          uint64_t v279 = v224;
          int v280 = v226;
          int v281 = v225;
          uint64_t v282 = v206;
          uint64_t v283 = v222 - 1;
          int v284 = v663 * (v222 - 1);
          bzero(v278, v645);
          int v230 = v284;
          uint64_t v229 = v283;
          uint64_t v206 = v282;
          int v225 = v281;
          int v226 = v280;
          uint64_t v224 = v279;
          int v228 = v668;
          uint64_t v220 = v667;
        }
        *(void *)&v17[8 * v230] = 0x3FF0000000000000;
        goto LABEL_211;
      }
      uint64_t v668 = (v663 * (v222 - 1));
      if (v222 < v206 && ((v220 - v222) & 0x8000000000000000) == 0)
      {
        int v231 = 0;
        uint64_t v232 = (v667 - v621 + 2 + v221);
        unint64_t v233 = v232 - 1;
        int v234 = v655 + v667 * v655 + v221 * v665;
        uint64_t v235 = 8 * v234;
        unint64_t v660 = (unint64_t)&v17[v235];
        uint64_t v236 = &v17[8 * v232 + v235];
        uint64_t v237 = (int)v668;
        int v238 = v234 + v232 - 1;
        uint64_t v239 = v232 & 0xFFFFFFFC;
        int v240 = v226;
        int v241 = v222;
        while (1)
        {
          int v242 = v655 + v667 * v628 + v221 * v665 + v669 * v231;
          double v243 = 0.0;
          if (v232 < 0xA) {
            break;
          }
          uint64_t v244 = 0;
          if (v238 < v234) {
            goto LABEL_228;
          }
          if (v242 + (int)v233 < v242 || HIDWORD(v233) != 0) {
            goto LABEL_228;
          }
          float64x2_t v246 = 0uLL;
          int v247 = v227;
          int v248 = v240;
          uint64_t v249 = v225 & 0xFFFFFFFC;
          float64x2_t v250 = 0uLL;
          do
          {
            uint64_t v251 = (float64x2_t *)&v17[8 * v247];
            float64x2_t v252 = *v251;
            float64x2_t v253 = v251[1];
            int v254 = (float64x2_t *)&v17[8 * v248];
            float64x2_t v246 = vmlaq_f64(v246, v252, *v254);
            float64x2_t v250 = vmlaq_f64(v250, v253, v254[1]);
            v248 += 4;
            v247 += 4;
            v249 -= 4;
          }
          while (v249);
          double v243 = vaddvq_f64(vaddq_f64(v250, v246));
          uint64_t v244 = v232 & 0xFFFFFFFC;
          uint64_t v220 = v667;
          if (v239 != v232) {
            goto LABEL_228;
          }
LABEL_230:
          double v256 = -v243 / *(double *)&v17[8 * v237];
          if (v256 != 0.0)
          {
            if (v232 < 0xA) {
              goto LABEL_237;
            }
            uint64_t v257 = 0;
            if (!HIDWORD(v233) && v242 + (int)v233 >= v242 && v238 >= v234)
            {
              uint64_t v258 = 8 * v242;
              if (&v17[v258] >= v236 || v660 >= (unint64_t)&v17[8 * v232 + v258])
              {
                int v260 = 0;
                float64x2_t v261 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v256, 0);
                uint64_t v262 = v225 & 0xFFFFFFFC;
                do
                {
                  int v263 = (float64x2_t *)&v17[8 * v227 + 8 * v260];
                  float v264 = (float64x2_t *)&v17[8 * v240 + 8 * v260];
                  float64x2_t v265 = vmlaq_f64(v264[1], v261, v263[1]);
                  *float v264 = vmlaq_f64(*v264, v261, *v263);
                  v264[1] = v265;
                  v260 += 4;
                  v262 -= 4;
                }
                while (v262);
                uint64_t v257 = v232 & 0xFFFFFFFC;
                if (v239 == v232) {
                  goto LABEL_216;
                }
              }
              else
              {
LABEL_237:
                uint64_t v257 = 0;
              }
            }
            uint64_t v259 = v224 - v257;
            do
            {
              *(double *)&v17[8 * v240 + 8 * (int)v257] = *(double *)&v17[8 * v240 + 8 * (int)v257]
                                                        + *(double *)&v17[8 * v227 + 8 * (int)v257] * v256;
              LODWORD(v257) = v257 + 1;
              --v259;
            }
            while (v259);
          }
LABEL_216:
          ++v241;
          ++v231;
          v240 += v220;
          if (v241 == v206) {
            goto LABEL_245;
          }
        }
        uint64_t v244 = 0;
LABEL_228:
        uint64_t v255 = v224 - v244;
        do
        {
          double v243 = v243 + *(double *)&v17[8 * v240 + 8 * (int)v244] * *(double *)&v17[8 * v227 + 8 * (int)v244];
          LODWORD(v244) = v244 + 1;
          --v255;
        }
        while (v255);
        goto LABEL_230;
      }
LABEL_245:
      if (v220 >= v222)
      {
        uint64_t v266 = v651 + v221;
        int v267 = *v633;
        uint64_t v268 = v222;
        if ((unint64_t)(v651 + v221) >= 8)
        {
          BOOL v269 = ((int)v655 - (int)v221) * (v267 + 1) + (int)v639 + (int)v221 >= ((int)v655 - (int)v221) * (v267 + 1)
              && (unint64_t)(v639 + v221) >> 32 == 0;
          uint64_t v268 = v222;
          if (v269)
          {
            unint64_t v270 = v224 & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v271 = v266 & 0xFFFFFFFFFFFFFFFCLL;
            int v272 = v228 * (v267 + 1);
            do
            {
              double v273 = (float64x2_t *)&v17[8 * v272];
              float64x2_t v274 = vnegq_f64(v273[1]);
              *double v273 = vnegq_f64(*v273);
              v273[1] = v274;
              v272 += 4;
              v270 -= 4;
            }
            while (v270);
            if (v266 == v271) {
              goto LABEL_261;
            }
            uint64_t v268 = v222 + v271;
          }
        }
        if (v268 <= v220) {
          uint64_t v275 = v220;
        }
        else {
          uint64_t v275 = v268;
        }
        uint64_t v276 = v275 - v268 + 1;
        int v277 = v268 + v267 * v228 - 1;
        do
        {
          *(double *)&v17[8 * v277] = -*(double *)&v17[8 * v277];
          ++v277;
          --v276;
        }
        while (v276);
      }
LABEL_261:
      *(double *)&v17[8 * (int)v668] = *(double *)&v17[8 * (int)v668] + 1.0;
      if (v222 >= 2)
      {
        bzero(&v17[8 * v229 * *v633], 8 * (v655 - v221));
        uint64_t v220 = v667;
      }
LABEL_211:
      ++v221;
      ++v225;
      v226 += v665;
      v227 += v665;
      ++v224;
      --v228;
      uint64_t v222 = v229;
    }
    while (v221 != v628);
  }
  unint64_t v285 = 0;
  uint64_t v286 = 0x5100000000;
  uint64_t v287 = 8;
  int v288 = 81;
  int v289 = 90;
  do
  {
    uint64_t v291 = v287;
    if (v287 < v623 && *((double *)v670 + v287) != 0.0)
    {
      int v292 = 0;
      int v293 = -10 * v285 + 81;
      int v294 = v287 + 2;
      int v295 = v285 - 1;
      int v296 = v293 + v285 - 1;
      uint64_t v297 = v285 & 0x7FFFFFFFFFFFFFFCLL;
      int v298 = v289;
      while (1)
      {
        int v299 = -10 * v285 + 90 + 9 * v292;
        double v300 = 0.0;
        if (v285 < 8) {
          break;
        }
        uint64_t v301 = 0;
        if (v296 < v293) {
          goto LABEL_278;
        }
        if (v299 + v295 < v299) {
          goto LABEL_278;
        }
        float64x2_t v302 = 0uLL;
        int v303 = v298;
        uint64_t v304 = v286;
        unint64_t v305 = v285 & 0xFFFFFFFFFFFFFFFCLL;
        float64x2_t v306 = 0uLL;
        do
        {
          float v307 = (float64x2_t *)((char *)v11 + (v304 >> 29));
          float64x2_t v308 = *v307;
          float64x2_t v309 = v307[1];
          float32x4_t v310 = (float64x2_t *)&v11[v303];
          float64x2_t v302 = vmlaq_f64(v302, v308, *v310);
          float64x2_t v306 = vmlaq_f64(v306, v309, v310[1]);
          v304 += 0x400000000;
          v303 += 4;
          v305 -= 4;
        }
        while (v305);
        double v300 = vaddvq_f64(vaddq_f64(v306, v302));
        uint64_t v301 = v285 & 0x7FFFFFFFFFFFFFFCLL;
        if (v285 != v297) {
          goto LABEL_278;
        }
LABEL_280:
        double v312 = -v300 / *(double *)&v11[(10 * v291) | 1];
        if (v312 != 0.0)
        {
          if (v285 >= 6)
          {
            uint64_t v313 = 0;
            if (v299 + v295 >= v299 && v296 >= v293)
            {
              uint64_t v314 = 0;
              float64x2_t v315 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v312, 0);
              uint64_t v316 = v286;
              do
              {
                float32x4_t v317 = (float64x2_t *)((char *)v11 + (v316 >> 29));
                float32x4_t v318 = (float64x2_t *)&v11[v298 + (int)v314];
                float64x2_t v319 = vmlaq_f64(v318[1], v315, v317[1]);
                *float32x4_t v318 = vmlaq_f64(*v318, v315, *v317);
                v318[1] = v319;
                v314 += 4;
                v316 += 0x400000000;
              }
              while ((v285 & 0xFFFFFFFFFFFFFFFCLL) != v314);
              uint64_t v313 = v285 & 0x7FFFFFFFFFFFFFFCLL;
              if (v285 == v297) {
                goto LABEL_270;
              }
            }
          }
          else
          {
            uint64_t v313 = 0;
          }
          int64_t v320 = (unint64_t)(v288 + v313) << 32;
          do
          {
            *(double *)&v11[v298 + (int)v313] = *(double *)&v11[v298 + (int)v313]
                                              + *(double *)((char *)v11 + (v320 >> 29)) * v312;
            ++v313;
            v320 += 0x100000000;
          }
          while (v285 != v313);
        }
LABEL_270:
        ++v294;
        ++v292;
        v298 += 9;
        if (v294 == 10) {
          goto LABEL_266;
        }
      }
      uint64_t v301 = 0;
LABEL_278:
      int64_t v311 = (unint64_t)(v288 + v301) << 32;
      do
      {
        double v300 = v300 + *(double *)&v11[v298 + (int)v301++] * *(double *)((char *)v11 + (v311 >> 29));
        v311 += 0x100000000;
      }
      while (v285 != v301);
      goto LABEL_280;
    }
LABEL_266:
    uint64_t v290 = &v11[9 * v291];
    v290[8] = 0;
    *((_OWORD *)v290 + 2) = 0uLL;
    *((_OWORD *)v290 + 3) = 0uLL;
    *(_OWORD *)uint64_t v290 = 0uLL;
    *((_OWORD *)v290 + 1) = 0uLL;
    v11[10 * v291] = 0x3FF0000000000000;
    uint64_t v287 = v291 - 1;
    ++v285;
    v286 -= 0xA00000000;
    v288 -= 10;
    v289 -= 10;
  }
  while (v291);
  uint64_t v321 = v667;
  uint64_t v322 = v669;
  uint64_t v323 = v648;
  if ((v648 & 0x80000000) == 0)
  {
    int64_t v324 = 0;
    int v325 = 0;
    double v326 = 0.0;
    uint64_t v327 = 9;
    uint64_t v328 = v667;
    while (1)
    {
      uint64_t v329 = v325;
      uint64_t v330 = v325 + 1;
      if (v328 <= v330) {
        uint64_t v331 = v325 + 1;
      }
      else {
        uint64_t v331 = v328;
      }
      uint64_t v332 = v324 + 1;
      uint64_t v333 = (v324 + 1) * v667;
      if (v333 <= v330) {
        uint64_t v334 = v325 + 1;
      }
      else {
        uint64_t v334 = (v324 + 1) * v667;
      }
      double v335 = __src[v324];
      if (v335 == 0.0) {
        goto LABEL_311;
      }
      double v336 = fabs(v335);
      __src[v324] = v336;
      double v337 = v335 / v336;
      if (v324 < v648) {
        *((double *)v670 + v324) = *((double *)v670 + v324) / v337;
      }
      if (v324 < v667)
      {
        unint64_t v338 = v334 - v325;
        uint64_t v339 = v325;
        if (v338 >= 4)
        {
          unint64_t v340 = (v331 - v325) & 0xFFFFFFFFFFFFFFFCLL;
          int v341 = (float64x2_t *)&v17[8 * v325 + 16];
          unint64_t v342 = v338 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v343 = vmulq_n_f64(*v341, v337);
            v341[-1] = vmulq_n_f64(v341[-1], v337);
            *int v341 = v343;
            v341 += 2;
            v340 -= 4;
          }
          while (v340);
          if (v338 == v342) {
            goto LABEL_310;
          }
          uint64_t v339 = v342 + v329;
        }
        do
        {
          *(double *)&v17[8 * v339] = *(double *)&v17[8 * v339] * v337;
          ++v339;
        }
        while (v339 < v333);
      }
LABEL_310:
      double v335 = v336;
LABEL_311:
      double v344 = *((double *)v670 + v324);
      if (v324 < v648 && v344 != 0.0)
      {
        double v345 = fabs(v344);
        double v346 = v345 / v344;
        *((double *)v670 + v324) = v345;
        __src[v332] = __src[v332] * v346;
        double v347 = (float64x2_t *)&v11[v327];
        float64x2_t v348 = vmulq_n_f64(v347[1], v346);
        *double v347 = vmulq_n_f64(*v347, v346);
        v347[1] = v348;
        float64x2_t v349 = vmulq_n_f64(v347[3], v346);
        v347[2] = vmulq_n_f64(v347[2], v346);
        v347[3] = v349;
        v347[4].f64[0] = v347[4].f64[0] * v346;
        double v344 = v345;
      }
      int v325 = v329 + v322;
      double v326 = fmax(v326, fmax(fabs(v335), fabs(v344)));
      v327 += 9;
      v328 += v667;
      int64_t v324 = v332;
      if (v332 == v648 + 1)
      {
        int v350 = 0;
        double v351 = v326 * 2.22044605e-16;
        unint64_t v352 = v322 - 1;
        uint64_t v643 = v322 & 0xFFFFFFFE;
        size_t v646 = v322 & 0xFFFFFFFC;
        int v353 = v648;
        uint64_t v661 = &v17[8 * v322];
        unint64_t v666 = v322 - 1;
        while (1)
        {
          int v354 = v353 + 1;
          uint64_t v668 = HIDWORD(v352);
          if (v353)
          {
            uint64_t v355 = v353;
            double v356 = __src[v353];
            int v357 = v353;
            double v358 = v356;
            while (1)
            {
              uint64_t v359 = (v357 - 1);
              double v360 = fabs(*((double *)v670 + v359));
              double v361 = fabs(v358);
              double v358 = __src[v359];
              double v362 = (v361 + fabs(v358)) * 2.22044605e-16;
              BOOL v363 = v360 > v351 || v350 < 21;
              BOOL v364 = v363;
              BOOL v365 = v360 > 1.00208418e-292 && v360 > v362;
              if (!v365 || !v364) {
                break;
              }
              --v357;
              if (!v359)
              {
                int v357 = 0;
                goto LABEL_331;
              }
            }
            *((void *)v670 + v359) = 0;
            if (v353 != v357)
            {
LABEL_331:
              if (v354 < v357)
              {
                int v366 = v353 + 1;
LABEL_333:
                if (v366 == v357) {
                  goto LABEL_334;
                }
                if (v354 == v366)
                {
                  uint64_t v526 = 8 * (v353 - 1);
                  double v527 = *(double *)((char *)v670 + v526);
                  *(void *)((char *)v670 + v526) = 0;
                  if (v353 > v357)
                  {
                    uint64_t v668 = (v357 + 1);
                    uint64_t v528 = (9 * v353);
                    uint64_t v652 = (v528 + 2);
                    uint64_t v656 = (v528 + 1);
                    uint64_t v529 = (v528 + 3);
                    uint64_t v530 = (v528 + 4);
                    uint64_t v531 = (v528 + 5);
                    uint64_t v532 = (v528 + 6);
                    uint64_t v533 = (v528 + 7);
                    uint64_t v534 = (v528 + 8);
                    uint64_t v535 = v528 << 32;
                    uint64_t v536 = (double *)&v11[9 * v353 - 9];
                    do
                    {
                      double v562 = __src[v355 - 1];
                      double v563 = fabs(v562);
                      double v564 = fabs(v527);
                      if (v563 + v564 == 0.0)
                      {
                        double v565 = 1.0;
                        double v566 = 0.0;
                        double v527 = 0.0;
                        double v567 = 0.0;
                      }
                      else
                      {
                        if (v563 <= v564) {
                          double v568 = v527;
                        }
                        else {
                          double v568 = __src[v355 - 1];
                        }
                        double v569 = sqrt(v564 / (v563 + v564) * (v564 / (v563 + v564))+ v563 / (v563 + v564) * (v563 / (v563 + v564)))* (v563 + v564);
                        double v566 = -v569;
                        if (v568 >= 0.0) {
                          double v566 = v569;
                        }
                        BOOL v192 = v563 <= v564;
                        double v565 = v562 / v566;
                        double v567 = v527 / v566;
                        if (v192)
                        {
                          if (v565 == 0.0) {
                            double v527 = 1.0;
                          }
                          else {
                            double v527 = 1.0 / v565;
                          }
                        }
                        else
                        {
                          double v527 = v527 / v566;
                        }
                      }
                      __src[v355 - 1] = v566;
                      if (v355 > v668)
                      {
                        double v570 = *((double *)&v668 + v355);
                        double v527 = -(v567 * v570);
                        *((double *)&v668 + v355) = v570 * v565;
                      }
                      double v537 = *(double *)&v11[v528];
                      double v538 = *v536;
                      *(double *)&v11[v528] = -(*v536 * v567 - v537 * v565);
                      *uint64_t v536 = v537 * v567 + v538 * v565;
                      double v539 = *(double *)&v11[v656];
                      double v540 = v536[1];
                      *(double *)&v11[v656] = -(v540 * v567 - v539 * v565);
                      v536[1] = v539 * v567 + v540 * v565;
                      double v541 = *(double *)&v11[v652];
                      unint64_t v542 = (unint64_t)(v535 - 0x700000000) >> 29;
                      double v543 = *(double *)((char *)v11 + v542);
                      *(double *)&v11[v652] = -(v543 * v567 - v541 * v565);
                      *(double *)((char *)v11 + v542) = v541 * v567 + v543 * v565;
                      double v544 = *(double *)&v11[v529];
                      unint64_t v545 = (unint64_t)(v535 - 0x600000000) >> 29;
                      double v546 = *(double *)((char *)v11 + v545);
                      *(double *)&v11[v529] = -(v546 * v567 - v544 * v565);
                      *(double *)((char *)v11 + v545) = v544 * v567 + v546 * v565;
                      double v547 = *(double *)&v11[v530];
                      unint64_t v548 = (unint64_t)(v535 - 0x500000000) >> 29;
                      double v549 = *(double *)((char *)v11 + v548);
                      *(double *)&v11[v530] = -(v549 * v567 - v547 * v565);
                      *(double *)((char *)v11 + v548) = v547 * v567 + v549 * v565;
                      double v550 = *(double *)&v11[v531];
                      unint64_t v551 = (unint64_t)(v535 - 0x400000000) >> 29;
                      double v552 = *(double *)((char *)v11 + v551);
                      *(double *)&v11[v531] = -(v552 * v567 - v550 * v565);
                      *(double *)((char *)v11 + v551) = v550 * v567 + v552 * v565;
                      double v553 = *(double *)&v11[v532];
                      unint64_t v554 = (unint64_t)(v535 - 0x300000000) >> 29;
                      double v555 = *(double *)((char *)v11 + v554);
                      *(double *)&v11[v532] = -(v555 * v567 - v553 * v565);
                      *(double *)((char *)v11 + v554) = v553 * v567 + v555 * v565;
                      double v556 = *(double *)&v11[v533];
                      unint64_t v557 = (unint64_t)(v535 - 0x200000000) >> 29;
                      double v558 = *(double *)((char *)v11 + v557);
                      *(double *)&v11[v533] = -(v558 * v567 - v556 * v565);
                      *(double *)((char *)v11 + v557) = v556 * v567 + v558 * v565;
                      double v559 = *(double *)&v11[v534];
                      unint64_t v560 = (unint64_t)(v535 - 0x100000000) >> 29;
                      double v561 = *(double *)((char *)v11 + v560);
                      --v355;
                      *(double *)&v11[v534] = -(v561 * v567 - v559 * v565);
                      *(double *)((char *)v11 + v560) = v559 * v567 + v561 * v565;
                      v535 -= 0x900000000;
                      v536 -= 9;
                    }
                    while (v355 > v357);
                    uint64_t v321 = v667;
LABEL_412:
                    uint64_t v322 = v669;
                    uint64_t v323 = v648;
                  }
LABEL_413:
                  unint64_t v352 = v666;
                  goto LABEL_414;
                }
                uint64_t v571 = v366 - 1;
                double v572 = *((double *)v670 + v571);
                *((void *)v670 + v571) = 0;
                if (v366 > v353) {
                  goto LABEL_413;
                }
                int v573 = 0;
                int v574 = v571 * v321;
                uint64_t v575 = v366;
                uint64_t v576 = 8 * v574;
                uint64_t v657 = &v17[v576];
                int8x16_t v653 = &v661[v576];
                int v577 = v321 * v366;
                while (2)
                {
                  double v578 = __src[v575];
                  double v579 = fabs(v578);
                  double v580 = fabs(v572);
                  if (v579 + v580 == 0.0)
                  {
                    double v581 = 1.0;
                    double v582 = 0.0;
                    double v583 = 0.0;
                  }
                  else
                  {
                    if (v579 <= v580) {
                      double v584 = v572;
                    }
                    else {
                      double v584 = __src[v575];
                    }
                    double v585 = sqrt(v580 / (v579 + v580) * (v580 / (v579 + v580))+ v579 / (v579 + v580) * (v579 / (v579 + v580)))* (v579 + v580);
                    double v582 = -v585;
                    if (v584 >= 0.0) {
                      double v582 = v585;
                    }
                    double v581 = v578 / v582;
                    double v583 = v572 / v582;
                  }
                  uint64_t v586 = v575;
                  __src[v586] = v582;
                  double v587 = *((double *)v670 + v575);
                  *(double *)((char *)v670 + v586 * 8) = v587 * v581;
                  if ((int)v321 >= 1)
                  {
                    if (v321 < 6) {
                      goto LABEL_461;
                    }
                    uint64_t v588 = 0;
                    int v594 = v321 * (v366 + v573);
                    if (v594 + (int)v666 < v594 || v574 + (int)v666 < v574)
                    {
                      uint64_t v321 = v667;
                      goto LABEL_462;
                    }
                    uint64_t v321 = v667;
                    if (v668) {
                      goto LABEL_462;
                    }
                    uint64_t v595 = 8 * v594;
                    if (v657 < &v661[v595] && &v17[v595] < v653)
                    {
LABEL_461:
                      uint64_t v588 = 0;
                      goto LABEL_462;
                    }
                    float64x2_t v596 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v581, 0);
                    float64x2_t v597 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v583, 0);
                    int v598 = v574;
                    int v599 = v577;
                    uint64_t v600 = v643;
                    do
                    {
                      uint64_t v601 = 8 * v599;
                      float64x2_t v602 = *(float64x2_t *)&v17[v601];
                      uint64_t v603 = 8 * v598;
                      float64x2_t v604 = *(float64x2_t *)&v17[v603];
                      *(float64x2_t *)&v17[v603] = vmlaq_f64(vnegq_f64(vmulq_n_f64(v602, v583)), v596, v604);
                      *(float64x2_t *)&v17[v601] = vmlaq_f64(vmulq_n_f64(v602, v581), v597, v604);
                      v599 += 2;
                      v598 += 2;
                      v600 -= 2;
                    }
                    while (v600);
                    uint64_t v588 = v643;
                    uint64_t v321 = v667;
                    if (v643 != v669)
                    {
LABEL_462:
                      uint64_t v589 = v669 - v588;
                      do
                      {
                        uint64_t v590 = 8 * (v577 + (int)v588);
                        double v591 = *(double *)&v17[v590];
                        uint64_t v592 = 8 * (v574 + (int)v588);
                        double v593 = *(double *)&v17[v592];
                        *(double *)&v17[v592] = -(v591 * v583 - v593 * v581);
                        *(double *)&v17[v590] = v591 * v581 + v593 * v583;
                        LODWORD(v588) = v588 + 1;
                        --v589;
                      }
                      while (v589);
                    }
                  }
                  ++v575;
                  double v572 = -(v583 * v587);
                  ++v573;
                  uint64_t v322 = v669;
                  v577 += v669;
                  uint64_t v323 = v648;
                  unint64_t v352 = v666;
                  if (v573 == v354 - v366) {
                    goto LABEL_414;
                  }
                  continue;
                }
              }
              LODWORD(v520) = v353 + 1;
              while (v520 != v357)
              {
                int v366 = v520;
                double v525 = 0.0;
                if ((int)v520 <= v353) {
                  double v525 = fabs(*((double *)v670 + (int)v520 - 1));
                }
                if ((int)v520 > v357 + 1) {
                  double v525 = fabs(*((double *)v670 + (v520 - 2))) + v525;
                }
                uint64_t v520 = (int)v520 - 1;
                double v521 = fabs(__src[v520]);
                BOOL v522 = v521 > v525 * 2.22044605e-16 && v521 > 1.00208418e-292;
                if (v521 > v525 * 2.22044605e-16 && v521 > 1.00208418e-292) {
                  double v523 = __src[v520];
                }
                else {
                  double v523 = 0.0;
                }
                __src[v520] = v523;
                if (v522)
                {
                  BOOL v524 = (int)v520 < v357;
                }
                else
                {
                  LODWORD(v520) = v366;
                  BOOL v524 = 1;
                }
                if (v524) {
                  goto LABEL_333;
                }
              }
LABEL_334:
              uint64_t v367 = (v353 - 1);
              double v368 = __src[v367];
              double v369 = *(double *)((char *)v670 + v367 * 8);
              double v370 = __src[v353];
              uint64_t v371 = v357;
              double v372 = __src[v371];
              double v373 = *(double *)((char *)v670 + v371 * 8);
              double v374 = fmax(fmax(fmax(fmax(fabs(v370), fabs(v368)), fabs(v369)), fabs(v372)), fabs(v373));
              double v375 = v370 * (1.0 / v374);
              double v376 = v369 * (1.0 / v374);
              double v377 = (v376 * v376 + (v368 * (1.0 / v374) + v375) * (v368 * (1.0 / v374) - v375)) * 0.5;
              double v378 = v375 * v376 * (v375 * v376);
              if (v378 != 0.0 || (double v379 = 0.0, v377 != 0.0))
              {
                double v380 = sqrt(v378 + v377 * v377);
                if (v377 < 0.0) {
                  double v380 = -v380;
                }
                double v379 = v378 / (v380 + v377);
              }
              double v381 = v372 * (1.0 / v374);
              double v382 = v379 + (v381 + v375) * (v381 - v375);
              if (v353 <= v357)
              {
LABEL_411:
                *((double *)v670 + (v353 - 1)) = v382;
                ++v350;
                goto LABEL_412;
              }
              int v383 = 0;
              unint64_t v384 = v357;
              unint64_t v385 = (v357 + 1);
              int v386 = v321 * v357;
              int v387 = v669 * v385;
              double v388 = v381 * v373 / v374;
              while (2)
              {
                unint64_t v389 = v384;
                double v390 = fabs(v382);
                double v391 = fabs(v388);
                if (v390 + v391 == 0.0)
                {
                  double v392 = 1.0;
                  double v393 = 0.0;
                  double v394 = 0.0;
                  if (v384 >= v385) {
                    goto LABEL_344;
                  }
                }
                else
                {
                  if (v390 <= v391) {
                    double v440 = v388;
                  }
                  else {
                    double v440 = v382;
                  }
                  double v441 = sqrt(v391 / (v390 + v391) * (v391 / (v390 + v391)) + v390
                                                                            / (v390 + v391)
                                                                            * (v390
                                                                             / (v390 + v391)))
                       * (v390 + v391);
                  if (v440 >= 0.0) {
                    double v393 = v441;
                  }
                  else {
                    double v393 = -v441;
                  }
                  double v392 = v382 / v393;
                  double v394 = v388 / v393;
                  if (v384 >= v385) {
LABEL_344:
                  }
                    *((double *)v670 + v384 - 1) = v393;
                }
                ++v384;
                unint64_t v395 = v389 + 1;
                double v396 = __src[v395];
                __src[v395] = v396 * v392;
                int8x16_t v397 = (double *)&v11[9 * v389 + 9];
                int8x16_t v398 = (double *)&v11[9 * v389];
                double v399 = v398[1];
                double v400 = v397[1];
                double v401 = *v397 * v394 + *v398 * v392;
                *int8x16_t v397 = -(*v398 * v394 - *v397 * v392);
                v397[1] = -(v399 * v394 - v400 * v392);
                double v402 = -(v372 * v394 - v373 * v392);
                *((double *)v670 + v389) = v402;
                double v403 = v396 * v394;
                *int8x16_t v398 = v401;
                v398[1] = v400 * v394 + v399 * v392;
                unint64_t v404 = (unint64_t)(9 * (v389 + 1)) << 32;
                uint64_t v405 = (uint64_t)(v404 + 0x200000000) >> 29;
                double v406 = *(double *)((char *)v11 + v405);
                unint64_t v407 = (unint64_t)(9 * v389) << 32;
                uint64_t v408 = (uint64_t)(v407 + 0x200000000) >> 29;
                double v409 = *(double *)((char *)v11 + v408);
                *(double *)((char *)v11 + v405) = -(v409 * v394 - v406 * v392);
                *(double *)((char *)v11 + v408) = v406 * v394 + v409 * v392;
                uint64_t v410 = (uint64_t)(v404 + 0x300000000) >> 29;
                double v411 = *(double *)((char *)v11 + v410);
                uint64_t v412 = (uint64_t)(v407 + 0x300000000) >> 29;
                double v413 = *(double *)((char *)v11 + v412);
                *(double *)((char *)v11 + v410) = -(v413 * v394 - v411 * v392);
                *(double *)((char *)v11 + v412) = v411 * v394 + v413 * v392;
                uint64_t v414 = (uint64_t)(v404 + 0x400000000) >> 29;
                double v415 = *(double *)((char *)v11 + v414);
                uint64_t v416 = (uint64_t)(v407 + 0x400000000) >> 29;
                double v417 = *(double *)((char *)v11 + v416);
                *(double *)((char *)v11 + v414) = -(v417 * v394 - v415 * v392);
                *(double *)((char *)v11 + v416) = v415 * v394 + v417 * v392;
                uint64_t v418 = (uint64_t)(v404 + 0x500000000) >> 29;
                double v419 = *(double *)((char *)v11 + v418);
                uint64_t v420 = (uint64_t)(v407 + 0x500000000) >> 29;
                double v421 = *(double *)((char *)v11 + v420);
                *(double *)((char *)v11 + v418) = -(v421 * v394 - v419 * v392);
                *(double *)((char *)v11 + v420) = v419 * v394 + v421 * v392;
                uint64_t v422 = (uint64_t)(v404 + 0x600000000) >> 29;
                double v423 = *(double *)((char *)v11 + v422);
                uint64_t v424 = (uint64_t)(v407 + 0x600000000) >> 29;
                double v425 = *(double *)((char *)v11 + v424);
                *(double *)((char *)v11 + v422) = -(v425 * v394 - v423 * v392);
                *(double *)((char *)v11 + v424) = v423 * v394 + v425 * v392;
                uint64_t v426 = (uint64_t)(v404 + 0x700000000) >> 29;
                double v427 = *(double *)((char *)v11 + v426);
                uint64_t v428 = (uint64_t)(v407 + 0x700000000) >> 29;
                double v429 = *(double *)((char *)v11 + v428);
                *(double *)((char *)v11 + v426) = -(v429 * v394 - v427 * v392);
                *(double *)((char *)v11 + v428) = v427 * v394 + v429 * v392;
                uint64_t v430 = (uint64_t)(v404 + 0x800000000) >> 29;
                double v431 = *(double *)((char *)v11 + v430);
                uint64_t v432 = (uint64_t)(v407 + 0x800000000) >> 29;
                double v433 = *(double *)((char *)v11 + v432);
                *(double *)((char *)v11 + v430) = -(v433 * v394 - v431 * v392);
                *(double *)((char *)v11 + v432) = v431 * v394 + v433 * v392;
                double v434 = v373 * v394 + v372 * v392;
                double v435 = fabs(v434);
                double v436 = fabs(v403);
                if (v436 + v435 == 0.0)
                {
                  double v437 = 1.0;
                  double v438 = 0.0;
                  double v439 = 0.0;
                }
                else
                {
                  if (v435 <= v436) {
                    double v442 = v403;
                  }
                  else {
                    double v442 = v434;
                  }
                  double v443 = sqrt(v436 / (v436 + v435) * (v436 / (v436 + v435)) + v435
                                                                            / (v436 + v435)
                                                                            * (v435
                                                                             / (v436 + v435)))
                       * (v436 + v435);
                  double v438 = -v443;
                  if (v442 >= 0.0) {
                    double v438 = v443;
                  }
                  double v437 = v434 / v438;
                  double v439 = v403 / v438;
                }
                uint64_t v321 = v667;
                __src[v389] = v438;
                double v444 = __src[v395];
                double v372 = -(v439 * v402 - v444 * v437);
                __src[v395] = v372;
                double v445 = *(double *)((char *)v670 + v395 * 8);
                double v373 = v445 * v437;
                *(double *)((char *)v670 + v395 * 8) = v445 * v437;
                if ((uint64_t)v384 < v667 && (int)v667 >= 1)
                {
                  if (v667 < 6) {
                    goto LABEL_364;
                  }
                  uint64_t v446 = 0;
                  int v452 = v667 * (v357 + v383);
                  if (v452 + (int)v666 < v452) {
                    goto LABEL_365;
                  }
                  int v453 = v669 * (v385 + v383);
                  if (v453 + (int)v666 < v453 || v668) {
                    goto LABEL_365;
                  }
                  uint64_t v454 = 8 * v453;
                  uint64_t v455 = 8 * v452;
                  if (&v17[v454] < &v661[v455] && &v17[v455] < &v661[v454])
                  {
LABEL_364:
                    uint64_t v446 = 0;
                    goto LABEL_365;
                  }
                  float64x2_t v456 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v437, 0);
                  float64x2_t v457 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v439, 0);
                  int v458 = v387;
                  int v459 = v386;
                  uint64_t v460 = v643;
                  do
                  {
                    uint64_t v461 = 8 * v459;
                    float64x2_t v462 = *(float64x2_t *)&v17[v461];
                    uint64_t v463 = 8 * v458;
                    float64x2_t v464 = *(float64x2_t *)&v17[v463];
                    *(float64x2_t *)&v17[v463] = vmlaq_f64(vnegq_f64(vmulq_n_f64(v462, v439)), v456, v464);
                    *(float64x2_t *)&v17[v461] = vmlaq_f64(vmulq_n_f64(v462, v437), v457, v464);
                    v459 += 2;
                    v458 += 2;
                    v460 -= 2;
                  }
                  while (v460);
                  uint64_t v446 = v643;
                  if (v643 != v669)
                  {
LABEL_365:
                    uint64_t v447 = v669 - v446;
                    do
                    {
                      uint64_t v448 = 8 * (v386 + (int)v446);
                      double v449 = *(double *)&v17[v448];
                      uint64_t v450 = 8 * (v387 + (int)v446);
                      double v451 = *(double *)&v17[v450];
                      *(double *)&v17[v450] = -(v449 * v439 - v451 * v437);
                      *(double *)&v17[v448] = v449 * v437 + v451 * v439;
                      LODWORD(v446) = v446 + 1;
                      --v447;
                    }
                    while (v447);
                  }
                }
                double v382 = v437 * v402 + v444 * v439;
                double v388 = v445 * v439;
                ++v383;
                v386 += v669;
                v387 += v667;
                if (v383 == v353 - v357) {
                  goto LABEL_411;
                }
                continue;
              }
            }
            unint64_t v352 = v666;
            if (v356 >= 0.0) {
              goto LABEL_390;
            }
          }
          else
          {
            uint64_t v355 = 0;
            double v356 = __src[0];
            if (__src[0] >= 0.0) {
              goto LABEL_390;
            }
          }
          double v356 = -v356;
          __src[v355] = v356;
          uint64_t v465 = (9 * v353);
          uint64_t v466 = (v465 + 8);
          unint64_t v467 = v466 - v465 + 1;
          if (v467 < 4) {
            goto LABEL_386;
          }
          unint64_t v468 = v467 & 0xFFFFFFFFFFFFFFFCLL;
          float v469 = (float64x2_t *)&v11[v465 + 2];
          unint64_t v470 = v467 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            float64x2_t v471 = vnegq_f64(*v469);
            v469[-1] = vnegq_f64(v469[-1]);
            *float v469 = v471;
            v469 += 2;
            v470 -= 4;
          }
          while (v470);
          if (v467 != v468)
          {
            v465 += v468;
LABEL_386:
            if (v465 > v466) {
              uint64_t v466 = v465;
            }
            uint64_t v472 = v466 - v465 + 1;
            float v473 = (double *)&v11[v465];
            do
            {
              *float v473 = -*v473;
              ++v473;
              --v472;
            }
            while (v472);
          }
LABEL_390:
          if (v353 < v648)
          {
            int v474 = 0;
            int v475 = v321 * v354;
            int v476 = v321 * v353;
            while (1)
            {
              uint64_t v477 = v355++;
              double v478 = __src[v355];
              if (v356 >= v478) {
                goto LABEL_410;
              }
              __src[v477] = v478;
              __src[v355] = v356;
              long long v479 = *(_OWORD *)&v11[9 * v477];
              *(_OWORD *)&v11[9 * v477] = *(_OWORD *)&v11[9 * v355];
              *(_OWORD *)&v11[9 * v355] = v479;
              unint64_t v480 = (unint64_t)(9 * v477) << 32;
              uint64_t v481 = (uint64_t)(v480 + 0x200000000) >> 29;
              uint64_t v482 = *(void *)((char *)v11 + v481);
              unint64_t v483 = (unint64_t)(9 * v355) << 32;
              uint64_t v484 = (uint64_t)(v483 + 0x200000000) >> 29;
              *(void *)((char *)v11 + v481) = *(void *)((char *)v11 + v484);
              *(void *)((char *)v11 + v484) = v482;
              uint64_t v485 = (uint64_t)(v480 + 0x300000000) >> 29;
              uint64_t v486 = *(void *)((char *)v11 + v485);
              uint64_t v487 = (uint64_t)(v483 + 0x300000000) >> 29;
              *(void *)((char *)v11 + v485) = *(void *)((char *)v11 + v487);
              *(void *)((char *)v11 + v487) = v486;
              uint64_t v488 = (uint64_t)(v480 + 0x400000000) >> 29;
              uint64_t v489 = *(void *)((char *)v11 + v488);
              uint64_t v490 = (uint64_t)(v483 + 0x400000000) >> 29;
              *(void *)((char *)v11 + v488) = *(void *)((char *)v11 + v490);
              *(void *)((char *)v11 + v490) = v489;
              uint64_t v491 = (uint64_t)(v480 + 0x500000000) >> 29;
              uint64_t v492 = *(void *)((char *)v11 + v491);
              uint64_t v493 = (uint64_t)(v483 + 0x500000000) >> 29;
              *(void *)((char *)v11 + v491) = *(void *)((char *)v11 + v493);
              *(void *)((char *)v11 + v493) = v492;
              uint64_t v494 = (uint64_t)(v480 + 0x600000000) >> 29;
              uint64_t v495 = *(void *)((char *)v11 + v494);
              uint64_t v496 = (uint64_t)(v483 + 0x600000000) >> 29;
              *(void *)((char *)v11 + v494) = *(void *)((char *)v11 + v496);
              *(void *)((char *)v11 + v496) = v495;
              uint64_t v497 = (uint64_t)(v480 + 0x700000000) >> 29;
              uint64_t v498 = *(void *)((char *)v11 + v497);
              uint64_t v499 = (uint64_t)(v483 + 0x700000000) >> 29;
              *(void *)((char *)v11 + v497) = *(void *)((char *)v11 + v499);
              *(void *)((char *)v11 + v499) = v498;
              uint64_t v500 = (uint64_t)(v480 + 0x800000000) >> 29;
              uint64_t v501 = *(void *)((char *)v11 + v500);
              uint64_t v502 = (uint64_t)(v483 + 0x800000000) >> 29;
              *(void *)((char *)v11 + v500) = *(void *)((char *)v11 + v502);
              *(void *)((char *)v11 + v502) = v501;
              if (v355 < v321 && (int)v322 >= 1) {
                break;
              }
LABEL_392:
              ++v474;
              v475 += v322;
              v476 += v322;
              if (v355 == v323) {
                goto LABEL_410;
              }
            }
            if (v322 >= 0xA)
            {
              size_t v503 = 0;
              int v508 = v322 * (v354 + v474);
              if (v508 + (int)v352 < v508) {
                goto LABEL_398;
              }
              int v509 = v322 * (v353 + v474);
              if (v509 + (int)v352 < v509 || v668) {
                goto LABEL_398;
              }
              uint64_t v510 = 8 * v509;
              uint64_t v511 = 8 * v508;
              if (&v17[v510] >= &v661[v511] || &v17[v511] >= &v661[v510])
              {
                int v512 = v476;
                int v513 = v475;
                size_t v514 = v646;
                do
                {
                  float v515 = &v17[8 * v512];
                  long long v516 = *(_OWORD *)v515;
                  long long v517 = *((_OWORD *)v515 + 1);
                  float v518 = &v17[8 * v513];
                  long long v519 = *((_OWORD *)v518 + 1);
                  *(_OWORD *)float v515 = *(_OWORD *)v518;
                  *((_OWORD *)v515 + 1) = v519;
                  *(_OWORD *)float v518 = v516;
                  *((_OWORD *)v518 + 1) = v517;
                  v513 += 4;
                  v512 += 4;
                  v514 -= 4;
                }
                while (v514);
                size_t v503 = v646;
                if (v646 == v322) {
                  goto LABEL_392;
                }
                goto LABEL_398;
              }
            }
            size_t v503 = 0;
LABEL_398:
            size_t v504 = v322 - v503;
            do
            {
              uint64_t v505 = 8 * (v476 + (int)v503);
              uint64_t v506 = *(void *)&v17[v505];
              uint64_t v507 = 8 * (v475 + (int)v503);
              *(void *)&v17[v505] = *(void *)&v17[v507];
              *(void *)&v17[v507] = v506;
              LODWORD(v503) = v503 + 1;
              --v504;
            }
            while (v504);
            goto LABEL_392;
          }
LABEL_410:
          int v350 = 0;
          --v353;
LABEL_414:
          if (v353 < 0 || v350 >= 75) {
            goto LABEL_476;
          }
        }
      }
    }
  }
LABEL_476:
  uint64_t v605 = *v624;
  if ((int)v605 >= 1) {
    memcpy(v620, __src, 8 * v605);
  }
}

uint64_t coder::internal::sortedInsertion(uint64_t this, float a2, float *a3, float *a4, int *a5, _DWORD *a6, int *a7)
{
  *(float *)&uint64_t v7 = *a4;
  if (!*(_DWORD *)a4)
  {
    *(_DWORD *)a4 = 1;
    *a6 = this;
    *a3 = a2;
    return this;
  }
  if (*a3 < a2)
  {
    if ((int)v7 < (int)a5)
    {
      LODWORD(v7) = v7 + 1;
      *(_DWORD *)a4 = v7;
    }
    unsigned int v8 = v7 - 2;
    if ((int)v7 < 2) {
      goto LABEL_30;
    }
    unint64_t v9 = v7;
    if (v7 > 0x34)
    {
      unsigned int v10 = v7 - 2;
      unsigned int v11 = v7 - 1;
      uint64_t v12 = (v7 - 1);
      uint64_t v13 = 4 * (v9 - 2);
      uint64_t v14 = v8;
      BOOL v15 = &a3[v14 + v13 / 0xFFFFFFFFFFFFFFFCLL] > &a3[v14] || &a3[v12 + v13 / 0xFFFFFFFFFFFFFFFCLL] > &a3[v12];
      BOOL v16 = v15 || &a6[v14 + v13 / 0xFFFFFFFFFFFFFFFCLL] > &a6[v14];
      BOOL v17 = v16 || &a6[v12 + v13 / 0xFFFFFFFFFFFFFFFCLL] > &a6[v12];
      BOOL v18 = !v17 && v11 >= v10;
      BOOL v19 = v18 && v8 >= v10;
      if (v19 && (unint64_t)(v14 * 4 - v12 * 4) >= 0x10)
      {
        unint64_t v20 = (v9 - 1) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v21 = v9 + 0xFFFFFFFF;
        unint64_t v22 = v20;
        do
        {
          uint64_t v23 = (v21 - 1);
          uint64_t v24 = v21;
          *(_OWORD *)&a6[v24 - 3] = *(_OWORD *)&a6[v23 - 3];
          *(_OWORD *)&a3[v24 - 3] = *(_OWORD *)&a3[v23 - 3];
          v21 -= 4;
          v22 -= 4;
        }
        while (v22);
        if (v9 - 1 == v20) {
          goto LABEL_30;
        }
        v9 -= v20;
      }
    }
    do
    {
      uint64_t v25 = (v9 - 2);
      uint64_t v26 = (v9 - 1);
      a6[v26] = a6[v25];
      a3[v26] = a3[v25];
      BOOL v15 = v9-- > 2;
    }
    while (v15);
LABEL_30:
    *a3 = a2;
    *a6 = this;
    return this;
  }
  if ((int)v7 < 2 || a3[(v7 - 1)] >= a2)
  {
    if ((int)v7 >= (int)a5) {
      return this;
    }
    *(_DWORD *)a4 = v7 + 1;
    uint64_t v29 = (int)v7;
  }
  else
  {
    int v27 = 1;
    int v28 = *(_DWORD *)a4;
    while ((v28 - v27) >= 2)
    {
      if (a3[v27 - 1 + ((v28 - v27) >> 1)] < a2) {
        int v28 = v27 + ((v28 - v27) >> 1);
      }
      else {
        v27 += (v28 - v27) >> 1;
      }
      if (v27 >= v28) {
        goto LABEL_44;
      }
    }
    int v27 = v28;
LABEL_44:
    if ((int)v7 < (int)a5)
    {
      LODWORD(v7) = v7 + 1;
      *(_DWORD *)a4 = v7;
    }
    if ((int)v7 > v27)
    {
      uint64_t v7 = (int)v7;
      uint64_t v30 = 4 * (int)v7 - 4;
      int64_t v31 = (_DWORD *)((char *)a6 + v30);
      uint64_t v32 = (_DWORD *)((char *)a3 + v30);
      unsigned int v33 = (_DWORD *)((char *)a3 + v30);
      int v34 = v31;
      do
      {
        int v35 = *--v33;
        --v7;
        *uint64_t v32 = v35;
        int v36 = *--v34;
        *int64_t v31 = v36;
        uint64_t v32 = v33;
        int64_t v31 = v34;
      }
      while (v7 > v27);
    }
    uint64_t v29 = v27 - 1;
  }
  a3[v29] = a2;
  a6[v29] = this;
  return this;
}

void *utils::local_sum(utils *this, const float *a2, float *a3)
{
  bzero(&utils::local_sum(float const*,float *)::B, 0x2438uLL);
  bzero((char *)&utils::local_sum(float const*,float *)::B + 61976, 0x2438uLL);
  uint64_t v5 = (_DWORD *)&utils::local_sum(float const*,float *)::B + 2439;
  uint64_t v6 = 108;
  do
  {
    *(_OWORD *)(v5 - 121) = 0u;
    *(_OWORD *)(v5 - 18) = 0u;
    *(_OWORD *)(v5 - 117) = 0u;
    *(_OWORD *)(v5 - 14) = 0u;
    *(_OWORD *)(v5 - 113) = 0u;
    *(_OWORD *)(v5 - 10) = 0u;
    *(_OWORD *)(v5 - 109) = 0u;
    *(_OWORD *)(v5 - 6) = 0u;
    *(void *)(v5 - 105) = 0;
    *((void *)v5 - 1) = 0;
    *(v5 - 103) = 0;
    _DWORD *v5 = 0;
    float result = memcpy(v5 - 102, this, 0x150uLL);
    this = (utils *)((char *)this + 336);
    v5 += 122;
    --v6;
  }
  while (v6);
  uint64_t v8 = 0;
  unint64_t v9 = &utils::local_sum(float const*,float *)::B;
  do
  {
    float v10 = *((float *)&utils::local_sum(float const*,float *)::B + 122 * v8);
    for (uint64_t i = 4; i != 488; i += 4)
    {
      float v10 = *(float *)((char *)v9 + i) + v10;
      *(float *)((char *)v9 + i) = v10;
    }
    ++v8;
    unint64_t v9 = (long long *)((char *)v9 + 488);
  }
  while (v8 != 146);
  uint64_t v12 = (float32x4_t *)&unk_26A17AB50;
  uint64_t v13 = 146;
  uint64_t v14 = (char *)&unk_26A169520;
  do
  {
    float32x4_t v15 = vsubq_f32(*(float32x4_t *)(v14 - 148), *((float32x4_t *)v14 - 14));
    v12[-13] = vsubq_f32(*(float32x4_t *)(v14 - 164), *((float32x4_t *)v14 - 15));
    v12[-12] = v15;
    float32x4_t v16 = vsubq_f32(*(float32x4_t *)(v14 - 116), *((float32x4_t *)v14 - 12));
    v12[-11] = vsubq_f32(*(float32x4_t *)(v14 - 132), *((float32x4_t *)v14 - 13));
    v12[-10] = v16;
    float32x4_t v17 = vsubq_f32(*(float32x4_t *)(v14 - 84), *((float32x4_t *)v14 - 10));
    v12[-9] = vsubq_f32(*(float32x4_t *)(v14 - 100), *((float32x4_t *)v14 - 11));
    v12[-8] = v17;
    float32x4_t v18 = vsubq_f32(*(float32x4_t *)(v14 - 52), *((float32x4_t *)v14 - 8));
    v12[-7] = vsubq_f32(*(float32x4_t *)(v14 - 68), *((float32x4_t *)v14 - 9));
    v12[-6] = v18;
    float32x4_t v19 = vsubq_f32(*(float32x4_t *)(v14 - 20), *((float32x4_t *)v14 - 6));
    v12[-5] = vsubq_f32(*(float32x4_t *)(v14 - 36), *((float32x4_t *)v14 - 7));
    v12[-4] = v19;
    float32x4_t v20 = vsubq_f32(*(float32x4_t *)(v14 + 12), *((float32x4_t *)v14 - 4));
    v12[-3] = vsubq_f32(*(float32x4_t *)(v14 - 4), *((float32x4_t *)v14 - 5));
    v12[-2] = v20;
    float32x4_t v21 = vsubq_f32(*(float32x4_t *)(v14 + 44), *((float32x4_t *)v14 - 2));
    v12[-1] = vsubq_f32(*(float32x4_t *)(v14 + 28), *((float32x4_t *)v14 - 3));
    *uint64_t v12 = v21;
    float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v14 + 76), *(float32x4_t *)v14);
    v12[1] = vsubq_f32(*(float32x4_t *)(v14 + 60), *((float32x4_t *)v14 - 1));
    v12[2] = v22;
    float32x4_t v23 = vsubq_f32(*(float32x4_t *)(v14 + 108), *((float32x4_t *)v14 + 2));
    v12[3] = vsubq_f32(*(float32x4_t *)(v14 + 92), *((float32x4_t *)v14 + 1));
    v12[4] = v23;
    float32x4_t v24 = *(float32x4_t *)(v14 + 140);
    float32x4_t v25 = vsubq_f32(v24, *((float32x4_t *)v14 + 4));
    v12[5] = vsubq_f32(*(float32x4_t *)(v14 + 124), *((float32x4_t *)v14 + 3));
    v12[6] = v25;
    float32x4_t v26 = *(float32x4_t *)(v14 + 156);
    float32x4_t v27 = vsubq_f32(*(float32x4_t *)(v14 + 172), *((float32x4_t *)v14 + 6));
    v12[7] = vsubq_f32(v26, *((float32x4_t *)v14 + 5));
    v12[8] = v27;
    float32x4_t v28 = vsubq_f32(*(float32x4_t *)(v14 + 204), *((float32x4_t *)v14 + 8));
    v12[9] = vsubq_f32(*(float32x4_t *)(v14 + 188), *((float32x4_t *)v14 + 7));
    v12[10] = v28;
    float32x4_t v29 = vsubq_f32(*(float32x4_t *)(v14 + 220), (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v26, 4uLL));
    *(float32x2_t *)v26.f32 = vsub_f32(*(float32x2_t *)(v14 + 236), (float32x2_t)vext_s8(*(int8x8_t *)v26.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL), 4uLL));
    v12[11] = v29;
    v12[12].i64[0] = v26.i64[0];
    uint64_t v12 = (float32x4_t *)((char *)v12 + 408);
    v14 += 488;
    --v13;
  }
  while (v13);
  uint64_t v30 = &utils::local_sum(float const*,float *)::c;
  uint64_t v31 = 145;
  do
  {
    float32x4_t v32 = (float32x4_t)*v30;
    float32x4_t v33 = (float32x4_t)v30[1];
    float32x4_t v34 = (float32x4_t)v30[2];
    float32x4_t v35 = (float32x4_t)v30[3];
    float32x4_t v36 = (float32x4_t)v30[4];
    float32x4_t v37 = (float32x4_t)v30[5];
    float32x4_t v38 = (float32x4_t)v30[6];
    float32x4_t v39 = (float32x4_t)v30[7];
    float32x4_t v40 = (float32x4_t)v30[8];
    float32x4_t v41 = (float32x4_t)v30[9];
    float32x4_t v42 = (float32x4_t)v30[10];
    float32x4_t v43 = (float32x4_t)v30[11];
    float32x4_t v44 = (float32x4_t)v30[12];
    float32x4_t v45 = (float32x4_t)v30[13];
    float32x4_t v46 = (float32x4_t)v30[14];
    float32x4_t v47 = (float32x4_t)v30[15];
    float32x4_t v48 = (float32x4_t)v30[16];
    float32x4_t v49 = (float32x4_t)v30[17];
    float32x4_t v50 = (float32x4_t)v30[18];
    float32x4_t v51 = (float32x4_t)v30[19];
    float32x4_t v52 = (float32x4_t)v30[20];
    float32x4_t v53 = (float32x4_t)v30[21];
    float32x4_t v54 = (float32x4_t)v30[22];
    float32x4_t v55 = (float32x4_t)v30[23];
    float32x4_t v56 = (float32x4_t)v30[24];
    *((float32x2_t *)v30 + 101) = vadd_f32(*(float32x2_t *)((char *)v30 + 808), (float32x2_t)v30[25]);
    uint64_t v30 = (long long *)((char *)v30 + 408);
    float32x4_t v57 = (float32x4_t)v30[1];
    *uint64_t v30 = (__int128)vaddq_f32(*(float32x4_t *)v30, v32);
    v30[1] = (__int128)vaddq_f32(v57, v33);
    float32x4_t v58 = vaddq_f32(*((float32x4_t *)v30 + 3), v35);
    v30[2] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 2), v34);
    v30[3] = (__int128)v58;
    float32x4_t v59 = vaddq_f32(*((float32x4_t *)v30 + 5), v37);
    v30[4] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 4), v36);
    v30[5] = (__int128)v59;
    float32x4_t v60 = vaddq_f32(*((float32x4_t *)v30 + 7), v39);
    v30[6] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 6), v38);
    v30[7] = (__int128)v60;
    float32x4_t v61 = vaddq_f32(*((float32x4_t *)v30 + 9), v41);
    v30[8] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 8), v40);
    v30[9] = (__int128)v61;
    float32x4_t v62 = vaddq_f32(*((float32x4_t *)v30 + 11), v43);
    v30[10] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 10), v42);
    v30[11] = (__int128)v62;
    float32x4_t v63 = vaddq_f32(*((float32x4_t *)v30 + 13), v45);
    v30[12] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 12), v44);
    v30[13] = (__int128)v63;
    float32x4_t v64 = vaddq_f32(*((float32x4_t *)v30 + 15), v47);
    v30[14] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 14), v46);
    v30[15] = (__int128)v64;
    float32x4_t v65 = vaddq_f32(*((float32x4_t *)v30 + 17), v49);
    v30[16] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 16), v48);
    v30[17] = (__int128)v65;
    float32x4_t v66 = vaddq_f32(*((float32x4_t *)v30 + 19), v51);
    v30[18] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 18), v50);
    v30[19] = (__int128)v66;
    float32x4_t v67 = vaddq_f32(*((float32x4_t *)v30 + 21), v53);
    v30[20] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 20), v52);
    v30[21] = (__int128)v67;
    float32x4_t v68 = vaddq_f32(*((float32x4_t *)v30 + 23), v55);
    float32x4_t v69 = vaddq_f32(*((float32x4_t *)v30 + 24), v56);
    v30[22] = (__int128)vaddq_f32(*((float32x4_t *)v30 + 22), v54);
    v30[23] = (__int128)v68;
    v30[24] = (__int128)v69;
    --v31;
  }
  while (v31);
  uint64_t v70 = (float *)(a2 + 52);
  uint64_t v71 = 126;
  uint64_t v72 = &utils::local_sum(float const*,float *)::c;
  do
  {
    float32x4_t v73 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7768), *((float32x4_t *)v72 + 1));
    *((float32x4_t *)v70 - 13) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7752), *(float32x4_t *)v72);
    *((float32x4_t *)v70 - 12) = v73;
    float32x4_t v74 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7800), *((float32x4_t *)v72 + 3));
    *((float32x4_t *)v70 - 11) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7784), *((float32x4_t *)v72 + 2));
    *((float32x4_t *)v70 - 10) = v74;
    float32x4_t v75 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7832), *((float32x4_t *)v72 + 5));
    *((float32x4_t *)v70 - 9) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7816), *((float32x4_t *)v72 + 4));
    *((float32x4_t *)v70 - 8) = v75;
    float32x4_t v76 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7864), *((float32x4_t *)v72 + 7));
    *((float32x4_t *)v70 - 7) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7848), *((float32x4_t *)v72 + 6));
    *((float32x4_t *)v70 - 6) = v76;
    float32x4_t v77 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7896), *((float32x4_t *)v72 + 9));
    *((float32x4_t *)v70 - 5) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7880), *((float32x4_t *)v72 + 8));
    *((float32x4_t *)v70 - 4) = v77;
    float32x4_t v78 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7928), *((float32x4_t *)v72 + 11));
    *((float32x4_t *)v70 - 3) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7912), *((float32x4_t *)v72 + 10));
    *((float32x4_t *)v70 - 2) = v78;
    float32x4_t v79 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7960), *((float32x4_t *)v72 + 13));
    *((float32x4_t *)v70 - 1) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7944), *((float32x4_t *)v72 + 12));
    *(float32x4_t *)uint64_t v70 = v79;
    float32x4_t v80 = vsubq_f32(*(float32x4_t *)((char *)v72 + 7992), *((float32x4_t *)v72 + 15));
    *((float32x4_t *)v70 + 1) = vsubq_f32(*(float32x4_t *)((char *)v72 + 7976), *((float32x4_t *)v72 + 14));
    *((float32x4_t *)v70 + 2) = v80;
    float32x4_t v81 = vsubq_f32(*(float32x4_t *)((char *)v72 + 8024), *((float32x4_t *)v72 + 17));
    *((float32x4_t *)v70 + 3) = vsubq_f32(*(float32x4_t *)((char *)v72 + 8008), *((float32x4_t *)v72 + 16));
    *((float32x4_t *)v70 + 4) = v81;
    float32x4_t v82 = vsubq_f32(*(float32x4_t *)((char *)v72 + 8056), *((float32x4_t *)v72 + 19));
    *((float32x4_t *)v70 + 5) = vsubq_f32(*(float32x4_t *)((char *)v72 + 8040), *((float32x4_t *)v72 + 18));
    *((float32x4_t *)v70 + 6) = v82;
    float32x4_t v83 = vsubq_f32(*(float32x4_t *)((char *)v72 + 8088), *((float32x4_t *)v72 + 21));
    *((float32x4_t *)v70 + 7) = vsubq_f32(*(float32x4_t *)((char *)v72 + 8072), *((float32x4_t *)v72 + 20));
    *((float32x4_t *)v70 + 8) = v83;
    float32x4_t v84 = vsubq_f32(*(float32x4_t *)((char *)v72 + 8120), *((float32x4_t *)v72 + 23));
    *((float32x4_t *)v70 + 9) = vsubq_f32(*(float32x4_t *)((char *)v72 + 8104), *((float32x4_t *)v72 + 22));
    *((float32x4_t *)v70 + 10) = v84;
    *((float32x4_t *)v70 + 11) = vsubq_f32(*(float32x4_t *)((char *)v72 + 8136), *((float32x4_t *)v72 + 24));
    float32x2_t v85 = *(float32x2_t *)((char *)v72 + 8152);
    v84.i64[0] = *((void *)v72 + 50);
    uint64_t v72 = (long long *)((char *)v72 + 408);
    *((float32x2_t *)v70 + 24) = vsub_f32(v85, *(float32x2_t *)v84.f32);
    v70 += 102;
    --v71;
  }
  while (v71);
  return result;
}

double coder::internal::merge_block(coder::internal *this, int *a2, double *a3, char a4, uint64_t a5, int a6, int *a7, double *a8, __n128 a9)
{
  int v9 = (int)a2;
  int v181 = (int)a3;
  LODWORD(v10) = 1 << a4;
  int v179 = (int)a2;
  if ((int)(a3 >> a4) >= 2)
  {
    uint64_t v186 = (int)a2;
    float64x2_t v183 = (char *)this + 16;
    int64_t v185 = (char *)this + 4;
    unsigned int v11 = (char *)this + 4 * (int)a2;
    float64x2_t v180 = (char *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v9 + 4];
    unsigned int v12 = a3 >> a4;
    while (1)
    {
      int v13 = v10;
      if (v12)
      {
        uint64_t v14 = v181 - --v12 * v10;
        if ((int)v14 > (int)v10) {
          break;
        }
      }
LABEL_31:
      uint64_t v10 = (2 * v13);
      if (v12 >= 2)
      {
        unsigned int v182 = v12;
        unsigned int v184 = v12 >> 1;
        if (v13 <= 1) {
          uint64_t v56 = 1;
        }
        else {
          uint64_t v56 = v13;
        }
        if (v13)
        {
          uint64_t v57 = 0;
          if (v184 <= 1) {
            uint64_t v58 = 1;
          }
          else {
            uint64_t v58 = v184;
          }
          uint64_t v59 = 4 * (int)v10;
          uint64_t v60 = v186;
          float32x4_t v61 = (long long *)v180;
          float32x4_t v62 = v11 + 16;
          do
          {
            if (v13 >= 1)
            {
              uint64_t v63 = 0;
              if (v10 < 8) {
                goto LABEL_47;
              }
              if ((unint64_t)(a5 - (void)&v11[v59 * v57]) < 0x20) {
                goto LABEL_47;
              }
              float32x4_t v64 = (_OWORD *)(a5 + 16);
              float32x4_t v65 = v61;
              float32x4_t v66 = &xmmword_26A189350;
              float32x4_t v67 = v62;
              uint64_t v68 = v10 & 0xFFFFFFF8;
              do
              {
                long long v69 = *((_OWORD *)v67 - 1);
                long long v70 = *(_OWORD *)v67;
                long long v71 = *(v65 - 1);
                *(v66 - 2) = *(v65 - 2);
                *(v66 - 1) = v71;
                long long v72 = *v65;
                long long v73 = v65[1];
                v65 += 4;
                *float32x4_t v66 = v72;
                v66[1] = v73;
                v66 += 4;
                v67 += 32;
                *(v64 - 1) = v69;
                *float32x4_t v64 = v70;
                v64 += 2;
                v68 -= 8;
              }
              while (v68);
              uint64_t v63 = v10 & 0xFFFFFFF8;
              if (v63 != v10)
              {
LABEL_47:
                uint64_t v74 = v10 - v63;
                float32x4_t v75 = (void *)&coder::internal::sort(double *)::xwork + v63;
                float32x4_t v76 = (_DWORD *)(a5 + 4 * v63);
                uint64_t v77 = v63 + v60;
                float32x4_t v78 = (uint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v63 + v60];
                float32x4_t v79 = (int *)((char *)this + 4 * v77);
                do
                {
                  int v80 = *v79++;
                  *v76++ = v80;
                  uint64_t v81 = *v78++;
                  *v75++ = v81;
                  --v74;
                }
                while (v74);
              }
            }
            uint64_t v82 = 0;
            float32x4_t v83 = (long long *)(a5 + 16);
            int v84 = v186 + v57 * v10 - 1;
            int v85 = 1;
            float32x4_t v86 = &xmmword_26A189350;
            uint64_t v87 = 1;
            uint64_t v88 = v13;
            LODWORD(v89) = v13;
LABEL_50:
            a9.n128_u64[0] = *((void *)&coder::internal::sort(double *)::xwork + v82);
            uint64_t v89 = (int)v89;
            uint64_t v90 = v84 + 1;
            int v91 = v85 + v84;
            do
            {
              int v84 = v90;
              double v92 = *((double *)&coder::internal::sort(double *)::xwork + v89);
              if (a9.n128_f64[0] >= v92)
              {
                *((_DWORD *)this + (int)v90) = *(_DWORD *)(a5 + 4 * v82);
                findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[(int)v90] = a9.n128_f64[0];
                ++v82;
                --v88;
                ++v87;
                --v85;
                float32x4_t v86 = (long long *)((char *)v86 + 8);
                float32x4_t v83 = (long long *)((char *)v83 + 4);
                if (v82 != v56) {
                  goto LABEL_50;
                }
                goto LABEL_40;
              }
              int v93 = v91;
              *((_DWORD *)this + v90) = *(_DWORD *)(a5 + 4 * v89);
              findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v90] = v92;
              ++v89;
              ++v90;
              ++v91;
            }
            while (v89 < (int)v10);
            if (v13 <= (int)v82) {
              goto LABEL_40;
            }
            unint64_t v94 = v13 - v82;
            if (v94 < 8 || (unint64_t)this + 4 * v82 + 4 * (v84 - (int)v82) - a5 + -4 * v82 + 4 < 0x20) {
              goto LABEL_63;
            }
            unint64_t v95 = v94 & 0xFFFFFFFFFFFFFFF8;
            unint64_t v96 = v88 & 0xFFFFFFFFFFFFFFF8;
            uint64_t v97 = v87 + v93;
            int v98 = &v183[4 * v97];
            double v99 = (long long *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v97 + 4];
            do
            {
              long long v100 = *v83;
              *((_OWORD *)v98 - 1) = *(v83 - 1);
              *(_OWORD *)int v98 = v100;
              a9 = (__n128)*(v86 - 2);
              long long v101 = *(v86 - 1);
              long long v102 = *v86;
              long long v103 = v86[1];
              v86 += 4;
              *(v99 - 2) = (__int128)a9;
              *(v99 - 1) = v101;
              v98 += 32;
              *double v99 = v102;
              v99[1] = v103;
              v99 += 4;
              v83 += 2;
              v96 -= 8;
            }
            while (v96);
            if (v94 != v95)
            {
              v82 += v95;
LABEL_63:
              int v104 = (unint64_t *)&coder::internal::sort(double *)::xwork + v82;
              float64x2_t v105 = (int *)(a5 + 4 * v82);
              uint64_t v106 = v13 - v82;
              uint64_t v107 = v82 + v93;
              uint64_t v108 = (unint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v107 + 1];
              uint64_t v109 = &v185[4 * v107];
              do
              {
                int v110 = *v105++;
                *(_DWORD *)uint64_t v109 = v110;
                v109 += 4;
                unint64_t v111 = *v104++;
                a9.n128_u64[0] = v111;
                *v108++ = v111;
                --v106;
              }
              while (v106);
            }
LABEL_40:
            ++v57;
            v62 += v59;
            float32x4_t v61 = (long long *)((char *)v61 + 8 * (int)v10);
            v60 += (int)v10;
          }
          while (v57 != v58);
        }
        unsigned int v12 = v184;
        if (v182 >= 4) {
          continue;
        }
      }
      goto LABEL_70;
    }
    int v15 = v12 * v10 + v179;
    if ((int)v14 >= 1)
    {
      if (v14 <= 7 || (unint64_t)(a5 - ((void)this + 4 * v15)) < 0x20)
      {
        uint64_t v16 = 0;
LABEL_10:
        uint64_t v17 = v14 - v16;
        float32x4_t v18 = (void *)&coder::internal::sort(double *)::xwork + v16;
        float32x4_t v19 = (_DWORD *)(a5 + 4 * v16);
        float32x4_t v20 = (uint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v16 + v15];
        float32x4_t v21 = (int *)((char *)this + 4 * v16 + 4 * v15);
        do
        {
          int v22 = *v21++;
          *v19++ = v22;
          uint64_t v23 = *v20++;
          *v18++ = v23;
          --v17;
        }
        while (v17);
        goto LABEL_12;
      }
      uint64_t v16 = v14 & 0x7FFFFFF8;
      unsigned long long v112 = &v183[4 * v15];
      float64x2_t v113 = (long long *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v15 + 4];
      int v114 = (_OWORD *)(a5 + 16);
      int v115 = &xmmword_26A189350;
      uint64_t v116 = v14 & 0xFFFFFFF8;
      do
      {
        long long v117 = *((_OWORD *)v112 - 1);
        long long v118 = *(_OWORD *)v112;
        long long v119 = *(v113 - 1);
        *(v115 - 2) = *(v113 - 2);
        *(v115 - 1) = v119;
        long long v120 = *v113;
        long long v121 = v113[1];
        v113 += 4;
        *int v115 = v120;
        v115[1] = v121;
        v115 += 4;
        v112 += 32;
        *(v114 - 1) = v117;
        *int v114 = v118;
        v114 += 2;
        v116 -= 8;
      }
      while (v116);
      if (v16 != v14) {
        goto LABEL_10;
      }
    }
LABEL_12:
    uint64_t v24 = 0;
    int v25 = v15 - 1;
    uint64_t v26 = (int)v14;
    if (v13 <= 1) {
      uint64_t v27 = 1;
    }
    else {
      uint64_t v27 = v13;
    }
    int v28 = 1;
    float32x4_t v29 = (long long *)(a5 + 16);
    uint64_t v30 = &xmmword_26A189350;
    uint64_t v31 = 1;
    uint64_t v32 = v13;
    LODWORD(v33) = v13;
LABEL_16:
    a9.n128_u64[0] = *((void *)&coder::internal::sort(double *)::xwork + v24);
    uint64_t v33 = (int)v33;
    uint64_t v34 = v25 + 1;
    int v35 = v25 + v28;
    do
    {
      int v25 = v34;
      double v36 = *((double *)&coder::internal::sort(double *)::xwork + v33);
      if (a9.n128_f64[0] >= v36)
      {
        *((_DWORD *)this + (int)v34) = *(_DWORD *)(a5 + 4 * v24);
        findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[(int)v34] = a9.n128_f64[0];
        ++v24;
        --v32;
        ++v31;
        --v28;
        uint64_t v30 = (long long *)((char *)v30 + 8);
        float32x4_t v29 = (long long *)((char *)v29 + 4);
        if (v24 != v27) {
          goto LABEL_16;
        }
        goto LABEL_31;
      }
      int v37 = v35;
      *((_DWORD *)this + v34) = *(_DWORD *)(a5 + 4 * v33);
      findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v34] = v36;
      ++v33;
      ++v34;
      ++v35;
    }
    while (v33 < v26);
    if (v13 <= (int)v24) {
      goto LABEL_31;
    }
    unint64_t v38 = v13 - v24;
    if (v38 < 8 || (unint64_t)this + 4 * v24 + 4 * (v25 - (int)v24) - a5 + -4 * v24 + 4 < 0x20) {
      goto LABEL_29;
    }
    unint64_t v39 = v38 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v40 = v32 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v41 = v31 + v37;
    float32x4_t v42 = &v183[4 * v41];
    float32x4_t v43 = (long long *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v41 + 4];
    do
    {
      long long v44 = *v29;
      *((_OWORD *)v42 - 1) = *(v29 - 1);
      *(_OWORD *)float32x4_t v42 = v44;
      a9 = (__n128)*(v30 - 2);
      long long v45 = *(v30 - 1);
      long long v46 = *v30;
      long long v47 = v30[1];
      v30 += 4;
      *(v43 - 2) = (__int128)a9;
      *(v43 - 1) = v45;
      v42 += 32;
      *float32x4_t v43 = v46;
      v43[1] = v47;
      v43 += 4;
      v29 += 2;
      v40 -= 8;
    }
    while (v40);
    if (v38 != v39)
    {
      v24 += v39;
LABEL_29:
      float32x4_t v48 = (unint64_t *)&coder::internal::sort(double *)::xwork + v24;
      float32x4_t v49 = (int *)(a5 + 4 * v24);
      uint64_t v50 = v13 - v24;
      uint64_t v51 = v24 + v37;
      float32x4_t v52 = (unint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v51 + 1];
      float32x4_t v53 = &v185[4 * v51];
      do
      {
        int v54 = *v49++;
        *(_DWORD *)float32x4_t v53 = v54;
        v53 += 4;
        unint64_t v55 = *v48++;
        a9.n128_u64[0] = v55;
        *v52++ = v55;
        --v50;
      }
      while (v50);
      goto LABEL_31;
    }
    goto LABEL_31;
  }
LABEL_70:
  if ((int)v10 < v181)
  {
    if (v181 < 1) {
      goto LABEL_77;
    }
    if (v181 > 7 && (uint64_t v122 = (char *)this + 4 * v179, (unint64_t)(a5 - (void)v122) >= 0x20))
    {
      uint64_t v123 = v181 & 0xFFFFFFF8;
      int v168 = (long long *)(v122 + 16);
      uint64_t v169 = (long long *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v179 + 4];
      uint64_t v170 = (_OWORD *)(a5 + 16);
      int v171 = &xmmword_26A189350;
      uint64_t v172 = v123;
      do
      {
        long long v173 = *(v168 - 1);
        long long v174 = *v168;
        long long v175 = *(v169 - 1);
        *(v171 - 2) = *(v169 - 2);
        *(v171 - 1) = v175;
        long long v176 = *v169;
        long long v177 = v169[1];
        v169 += 4;
        *int v171 = v176;
        v171[1] = v177;
        v171 += 4;
        v168 += 2;
        *(v170 - 1) = v173;
        *uint64_t v170 = v174;
        v170 += 2;
        v172 -= 8;
      }
      while (v172);
      if (v123 == v181)
      {
LABEL_77:
        int v132 = 0;
        uint64_t v133 = 0;
        int v134 = v179 - 1;
        if ((int)v10 <= 1) {
          uint64_t v135 = 1;
        }
        else {
          uint64_t v135 = v10;
        }
        int64_t v136 = (long long *)(a5 + 16);
        uint64_t v137 = 1;
        uint64_t v138 = v10;
        int v139 = v10;
        double v140 = &xmmword_26A189350;
LABEL_81:
        uint64_t v141 = 0;
        a9.n128_u64[0] = *((void *)&coder::internal::sort(double *)::xwork + v133);
        int v142 = v134;
        uint64_t v143 = v139;
        uint64_t v144 = a5 + 4 * v139;
        double v145 = (char *)&coder::internal::sort(double *)::xwork + 8 * v139;
        double v146 = &findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v134 + 1];
        unint64_t v147 = (char *)this + 4 * v134 + 4;
        do
        {
          double v148 = *(double *)&v145[8 * v141];
          if (a9.n128_f64[0] >= v148)
          {
            int v139 = v143 + v141;
            int v134 = v142 + v141 + 1;
            *((_DWORD *)this + v134) = *(_DWORD *)(a5 + 4 * v133);
            findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v134] = a9.n128_f64[0];
            ++v133;
            --v138;
            ++v137;
            double v140 = (long long *)((char *)v140 + 8);
            int64_t v136 = (long long *)((char *)v136 + 4);
            --v132;
            if (v133 != v135) {
              goto LABEL_81;
            }
            return a9.n128_f64[0];
          }
          *(_DWORD *)&v147[4 * v141] = *(_DWORD *)(v144 + 4 * v141);
          v146[v141++] = v148;
        }
        while (v143 + v141 < v181);
        if ((int)v10 <= (int)v133) {
          return a9.n128_f64[0];
        }
        int v149 = v142 + v132 + v141;
        unint64_t v150 = v10 - v133;
        if (v150 < 8
          || (unint64_t)this + 4 * v133 + 4 * (v142 + (int)v141 - (int)v133) - a5 + -4 * v133 + 4 < 0x20)
        {
          goto LABEL_94;
        }
        unint64_t v151 = v150 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v152 = v138 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v153 = v137 + v149;
        unint64_t v154 = (_OWORD *)((char *)this + 4 * v153 + 16);
        unint64_t v155 = (long long *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v153 + 4];
        do
        {
          long long v156 = *v136;
          *(v154 - 1) = *(v136 - 1);
          _OWORD *v154 = v156;
          a9 = (__n128)*(v140 - 2);
          long long v157 = *(v140 - 1);
          long long v158 = *v140;
          long long v159 = v140[1];
          v140 += 4;
          *(v155 - 2) = (__int128)a9;
          *(v155 - 1) = v157;
          v154 += 2;
          long long *v155 = v158;
          v155[1] = v159;
          v155 += 4;
          v136 += 2;
          v152 -= 8;
        }
        while (v152);
        if (v150 != v151)
        {
          v133 += v151;
LABEL_94:
          double v160 = (unint64_t *)&coder::internal::sort(double *)::xwork + v133;
          double v161 = (int *)(a5 + 4 * v133);
          uint64_t v162 = v10 - v133;
          uint64_t v163 = v133 + v149;
          long long v164 = (unint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v163 + 1];
          int v165 = (_DWORD *)((char *)this + 4 * v163 + 4);
          do
          {
            int v166 = *v161++;
            *v165++ = v166;
            unint64_t v167 = *v160++;
            a9.n128_u64[0] = v167;
            *v164++ = v167;
            --v162;
          }
          while (v162);
          return a9.n128_f64[0];
        }
        return a9.n128_f64[0];
      }
    }
    else
    {
      uint64_t v123 = 0;
    }
    uint64_t v124 = v181 - v123;
    int v125 = (void *)&coder::internal::sort(double *)::xwork + v123;
    unint64_t v126 = (_DWORD *)(a5 + 4 * v123);
    uint64_t v127 = v123 + v179;
    long long v128 = (uint64_t *)&findSpotsPeaksDan(float const*,float const*,float,double,coder::array<float,2> &,coder::array<float,1> &)::L[v127];
    long long v129 = (int *)((char *)this + 4 * v127);
    do
    {
      int v130 = *v129++;
      *v126++ = v130;
      uint64_t v131 = *v128++;
      *v125++ = v131;
      --v124;
    }
    while (v124);
    goto LABEL_77;
  }
  return a9.n128_f64[0];
}

void *spot_finder_peridot_initialize(void)
{
  float result = memcpy(state, &uv, 0x9C4uLL);
  isInitialized_spot_finder_peridot = 1;
  return result;
}

void spot_finder_peridot_terminate(void)
{
  isInitialized_spot_finder_peridot = 0;
}

uint64_t AnalyticsSendEventLazy()
{
  return MEMORY[0x270F18A48]();
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x270EE4528]();
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E0](allocator, capacity);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x270EE47E8](allocator, capacity, theData);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x270EE4808](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x270EE4820](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x270EE4830](theData);
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x270EE4958](theDict, key);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x270EE4998](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x270EE4A30](cf);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x270EE4C58]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x270EE4C70](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return (CFPropertyListRef)MEMORY[0x270EE4CC0](key, applicationID, userName, hostName);
}

void CFRelease(CFTypeRef cf)
{
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x270EE4E10](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x270EE5048](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x270EE50E0](alloc, cStr, *(void *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x270EE5180](theString, *(void *)&encoding);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x270EE51C8](str);
}

CFStringEncoding CFStringGetSystemEncoding(void)
{
  return MEMORY[0x270EE5210]();
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x270EE5218]();
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x270EE59E8](data, width, height, bitsPerComponent, bytesPerRow, space, *(void *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x270EE59F8](context);
}

CGColorRef CGColorCreateGenericRGB(CGFloat red, CGFloat green, CGFloat blue, CGFloat alpha)
{
  return (CGColorRef)MEMORY[0x270EE5B80](red, green, blue, alpha);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x270EE5C68]();
}

CFStringRef CGColorSpaceGetName(CGColorSpaceRef space)
{
  return (CFStringRef)MEMORY[0x270EE5D10](space);
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
}

void CGContextFillEllipseInRect(CGContextRef c, CGRect rect)
{
}

void CGContextRelease(CGContextRef c)
{
}

void CGContextSetFillColorWithColor(CGContextRef c, CGColorRef color)
{
}

void CGContextSetTextDrawingMode(CGContextRef c, CGTextDrawingMode mode)
{
}

void CGContextSetTextMatrix(CGContextRef c, CGAffineTransform *t)
{
}

void CGContextSetTextPosition(CGContextRef c, CGFloat x, CGFloat y)
{
}

void CGImageDestinationAddImage(CGImageDestinationRef idst, CGImageRef image, CFDictionaryRef properties)
{
}

CGImageDestinationRef CGImageDestinationCreateWithURL(CFURLRef url, CFStringRef type, size_t count, CFDictionaryRef options)
{
  return (CGImageDestinationRef)MEMORY[0x270EF4F38](url, type, count, options);
}

BOOL CGImageDestinationFinalize(CGImageDestinationRef idst)
{
  return MEMORY[0x270EF4F48](idst);
}

CGBitmapInfo CGImageGetBitmapInfo(CGImageRef image)
{
  return MEMORY[0x270EE6780](image);
}

size_t CGImageGetBitsPerComponent(CGImageRef image)
{
  return MEMORY[0x270EE6790](image);
}

CGColorSpaceRef CGImageGetColorSpace(CGImageRef image)
{
  return (CGColorSpaceRef)MEMORY[0x270EE67D8](image);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x270EE6800](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x270EE6868](image);
}

void CGImageRelease(CGImageRef image)
{
}

CGImageRef CGImageSourceCreateImageAtIndex(CGImageSourceRef isrc, size_t index, CFDictionaryRef options)
{
  return (CGImageRef)MEMORY[0x270EF5018](isrc, index, options);
}

CGImageSourceRef CGImageSourceCreateWithURL(CFURLRef url, CFDictionaryRef options)
{
  return (CGImageSourceRef)MEMORY[0x270EF5040](url, options);
}

size_t CGImageSourceGetCount(CGImageSourceRef isrc)
{
  return MEMORY[0x270EF5048](isrc);
}

BOOL CGPointMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGPoint *point)
{
  return MEMORY[0x270EE7160](dict, point);
}

CFDictionaryRef CGRectCreateDictionaryRepresentation(CGRect a1)
{
  return (CFDictionaryRef)MEMORY[0x270EE7188]((__n128)a1.origin, *(__n128 *)&a1.origin.y, (__n128)a1.size, *(__n128 *)&a1.size.height);
}

BOOL CGRectEqualToRect(CGRect rect1, CGRect rect2)
{
  return MEMORY[0x270EE71A0]((__n128)rect1.origin, *(__n128 *)&rect1.origin.y, (__n128)rect1.size, *(__n128 *)&rect1.size.height, (__n128)rect2.origin, *(__n128 *)&rect2.origin.y, (__n128)rect2.size, *(__n128 *)&rect2.size.height);
}

CGRect CGRectIntegral(CGRect rect)
{
  MEMORY[0x270EE7230]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
  result.size.CGFloat height = v4;
  result.size.CGFloat width = v3;
  result.origin.CGFloat y = v2;
  result.origin.CGFloat x = v1;
  return result;
}

BOOL CGRectIsEmpty(CGRect rect)
{
  return MEMORY[0x270EE7260]((__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

BOOL CGRectMakeWithDictionaryRepresentation(CFDictionaryRef dict, CGRect *rect)
{
  return MEMORY[0x270EE7278](dict, rect);
}

CMTime *__cdecl CMTimeAdd(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7D98](retstr, lhs, rhs);
}

int32_t CMTimeCompare(CMTime *time1, CMTime *time2)
{
  return MEMORY[0x270EE7DD0](time1, time2);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  MEMORY[0x270EE7E08](time);
  return result;
}

CMTime *__cdecl CMTimeMakeWithSeconds(CMTime *__return_ptr retstr, Float64 seconds, int32_t preferredTimescale)
{
  return (CMTime *)MEMORY[0x270EE7E38](retstr, *(void *)&preferredTimescale, seconds);
}

CMTime *__cdecl CMTimeSubtract(CMTime *__return_ptr retstr, CMTime *lhs, CMTime *rhs)
{
  return (CMTime *)MEMORY[0x270EE7F08](retstr, lhs, rhs);
}

CTFontRef CTFontCreateWithName(CFStringRef name, CGFloat size, const CGAffineTransform *matrix)
{
  return (CTFontRef)MEMORY[0x270EE9AF8](name, matrix, size);
}

CTLineRef CTLineCreateWithAttributedString(CFAttributedStringRef attrString)
{
  return (CTLineRef)MEMORY[0x270EE9D70](attrString);
}

void CTLineDraw(CTLineRef line, CGContextRef context)
{
}

CFTypeRef CVBufferGetAttachment(CVBufferRef buffer, CFStringRef key, CVAttachmentMode *attachmentMode)
{
  return (CFTypeRef)MEMORY[0x270EE9FD0](buffer, key, attachmentMode);
}

CFDictionaryRef CVBufferGetAttachments(CVBufferRef buffer, CVAttachmentMode attachmentMode)
{
  return (CFDictionaryRef)MEMORY[0x270EE9FD8](buffer, *(void *)&attachmentMode);
}

void CVBufferRelease(CVBufferRef buffer)
{
}

uint64_t CVDataBufferPoolCreate()
{
  return MEMORY[0x270EEA060]();
}

uint64_t CVDataBufferPoolCreateDataBuffer()
{
  return MEMORY[0x270EEA068]();
}

uint64_t CVDataBufferPoolGetDataBufferAttributes()
{
  return MEMORY[0x270EEA080]();
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA150](allocator, width, height, *(void *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA168](allocator, width, height, *(void *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

CVReturn CVPixelBufferCreateWithPlanarBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *dataPtr, size_t dataSize, size_t numberOfPlanes, void **planeBaseAddress, size_t *planeWidth, size_t *planeHeight, size_t *planeBytesPerRow, CVPixelBufferReleasePlanarBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x270EEA178](allocator, width, height, *(void *)&pixelFormatType, dataPtr, dataSize, numberOfPlanes, planeBaseAddress);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x270EEA190](pixelBuffer);
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1B0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRowOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1C8](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1D0](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA1E8](pixelBuffer);
}

size_t CVPixelBufferGetHeightOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA1F8](pixelBuffer, planeIndex);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA218](pixelBuffer);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA240](pixelBuffer);
}

size_t CVPixelBufferGetWidthOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return MEMORY[0x270EEA250](pixelBuffer, planeIndex);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x270EEA260](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x270EEA320](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x270EEA330](pixelBuffer, unlockFlags);
}

uint64_t CVPixelFormatDescriptionGetDescriptionWithPixelFormatType()
{
  return MEMORY[0x270EEA348]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x270F95FD8]();
}

uint64_t MGGetStringAnswer()
{
  return MEMORY[0x270F95FF8]();
}

void NSLog(NSString *format, ...)
{
}

uint64_t VTImageRotationSessionCreate()
{
  return MEMORY[0x270F06758]();
}

uint64_t VTImageRotationSessionInvalidate()
{
  return MEMORY[0x270F06760]();
}

uint64_t VTImageRotationSessionTransferImage()
{
  return MEMORY[0x270F06778]();
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x270F067E0](allocator, pixelTransferSessionOut);
}

void VTPixelTransferSessionInvalidate(VTPixelTransferSessionRef session)
{
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x270F067F0](session, sourceBuffer, destinationBuffer);
}

OSStatus VTSessionSetProperty(VTSessionRef session, CFStringRef propertyKey, CFTypeRef propertyValue)
{
  return MEMORY[0x270F06820](session, propertyKey, propertyValue);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

void ImageUtils::ConnectedComp<BOOL>()
{
  while (1)
    ;
}

void ImageUtils::IntegralImage<double>()
{
  while (1)
    ;
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x270F98248](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x270F98268]();
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F98498](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984A0](this, __s, __n);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x270F984B8](this, __s);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x270F98508](this, __pos, __n1, __s, __n2);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x270F98638]();
}

uint64_t std::filebuf::close()
{
  return MEMORY[0x270F98640]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x270F98650]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x270F98658]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x270F98688]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x270F98698]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x270F98740]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x270F98748]();
}

uint64_t std::ostream::write()
{
  return MEMORY[0x270F98750]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F987A0]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x270F98870]();
}

std::__thread_struct *__cdecl std::__thread_struct::__thread_struct(std::__thread_struct *this)
{
  return (std::__thread_struct *)MEMORY[0x270F98898](this);
}

void std::__thread_struct::~__thread_struct(std::__thread_struct *this)
{
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

std::__thread_specific_ptr<std::__thread_struct> *std::__thread_local_data(void)
{
  return (std::__thread_specific_ptr<std::__thread_struct> *)MEMORY[0x270F989F8]();
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
}

int std::stoi(const std::string *__str, size_t *__idx, int __base)
{
  return MEMORY[0x270F98B78](__str, __idx, *(void *)&__base);
}

uint64_t std::__sort<std::__less<double,double> &,double *>()
{
  return MEMORY[0x270F98BD8]();
}

uint64_t std::__sort<std::__less<float,float> &,float *>()
{
  return MEMORY[0x270F98BE0]();
}

uint64_t std::__sort<std::__less<unsigned int,unsigned int> &,unsigned int *>()
{
  return MEMORY[0x270F98BF0]();
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x270F98C18]();
}

void std::locale::~locale(std::locale *this)
{
}

unsigned int std::thread::hardware_concurrency(void)
{
  return MEMORY[0x270F98C98]();
}

void std::thread::join(std::thread *this)
{
}

void std::thread::~thread(std::thread *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete(void *__p, std::align_val_t a2)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, const std::nothrow_t *a2)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_guard_abort(__guard *a1)
{
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x270F98F10](a1);
}

void __cxa_guard_release(__guard *a1)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

simd_float2x2 __invert_f2(simd_float2x2 a1)
{
  MEMORY[0x270ED7E10]((__n128)a1, *(__n128 *)((char *)&a1 + 8));
  result.columns[1] = v2;
  result.columns[0] = v1;
  return result;
}

uint64_t __powidf2()
{
  return MEMORY[0x270ED7E60]();
}

__double2 __sincos_stret(double a1)
{
  MEMORY[0x270ED7E88](a1);
  result.__float cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  MEMORY[0x270ED7E90](a1);
  result.__float cosval = v2;
  result.__sinval = v1;
  return result;
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
}

uint64_t analytics_send_event_lazy()
{
  return MEMORY[0x270F18A78]();
}

uint32_t arc4random_uniform(uint32_t __upper_bound)
{
  return MEMORY[0x270ED85F8](*(void *)&__upper_bound);
}

long double atan2(long double __y, long double __x)
{
  MEMORY[0x270ED86A8](__y, __x);
  return result;
}

float atan2f(float a1, float a2)
{
  MEMORY[0x270ED86B8](a1, a2);
  return result;
}

int atoi(const char *a1)
{
  return MEMORY[0x270ED86E8](a1);
}

void bzero(void *a1, size_t a2)
{
}

long double cos(long double __x)
{
  MEMORY[0x270ED9128](__x);
  return result;
}

uint64_t dgesdd_NEWLAPACK()
{
  return MEMORY[0x270EDE570]();
}

uint64_t dgesvd_NEWLAPACK()
{
  return MEMORY[0x270EDE588]();
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
}

long double erfc(long double __x)
{
  MEMORY[0x270ED9788](__x);
  return result;
}

float erff(float a1)
{
  MEMORY[0x270ED9798](a1);
  return result;
}

void exit(int a1)
{
}

long double exp(long double __x)
{
  MEMORY[0x270ED9858](__x);
  return result;
}

long double exp2(long double __x)
{
  MEMORY[0x270ED9860](__x);
  return result;
}

float expf(float a1)
{
  MEMORY[0x270ED9870](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x270ED98C8](a1);
}

long double fmod(long double __x, long double __y)
{
  MEMORY[0x270ED99D0](__x, __y);
  return result;
}

float fmodf(float a1, float a2)
{
  MEMORY[0x270ED99D8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x270ED99F0](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9A28](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
}

float frexpf(float a1, int *a2)
{
  MEMORY[0x270ED9A70](a2, a1);
  return result;
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x270ED9AC0](a1, a2, *(void *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x270ED9B18](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

uint64_t kdebug_trace()
{
  return MEMORY[0x270ED9F50]();
}

float ldexpf(float a1, int a2)
{
  MEMORY[0x270EDA030](*(void *)&a2, a1);
  return result;
}

long double log(long double __x)
{
  MEMORY[0x270EDA0A8](__x);
  return result;
}

float logf(float a1)
{
  MEMORY[0x270EDA0F8](a1);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA388](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x270F9A528](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x270F9A540]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x270F9A568](a1);
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A590](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x270F9A5A8]();
}

void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic, BOOL hasStrong)
{
}

void objc_enumerationMutation(id obj)
{
}

void objc_exception_throw(id exception)
{
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x270F9A678](self, _cmd, offset, atomic);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x270F9A6E8](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x270F9A6F8]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x270F9A700]();
}

uint64_t objc_opt_new()
{
  return MEMORY[0x270F9A710]();
}

void objc_release(id a1)
{
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x270F9A870](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x270F9A880](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x270F9A888](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x270F9A898](a1);
}

void objc_setProperty_atomic(id self, SEL _cmd, id newValue, ptrdiff_t offset)
{
}

void objc_storeStrong(id *location, id obj)
{
}

int objc_sync_enter(id obj)
{
  return MEMORY[0x270F9AA18](obj);
}

int objc_sync_exit(id obj)
{
  return MEMORY[0x270F9AA20](obj);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x270EDA9D0](oslog, type);
}

void perror(const char *a1)
{
}

long double pow(long double __x, long double __y)
{
  MEMORY[0x270EDACF8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  MEMORY[0x270EDAD00](a1, a2);
  return result;
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int pthread_create(pthread_t *a1, const pthread_attr_t *a2, void *(__cdecl *a3)(void *), void *a4)
{
  return MEMORY[0x270EDAEA0](a1, a2, a3, a4);
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF50](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x270EDAF58](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF60](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x270EDAF70](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x270EDB048](a1, a2);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

long double sin(long double __x)
{
  MEMORY[0x270EDB4E8](__x);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x270EDB5A8](__s, *(void *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x270EDB5B0](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strtok(char *__str, const char *__sep)
{
  return (char *)MEMORY[0x270EDB6C8](__str, __sep);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x270EDB6D8](__str, __endptr, *(void *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x270EDB930](a1);
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_imgfir(const float *__A, vDSP_Length __NR, vDSP_Length __NC, const float *__F, float *__C, vDSP_Length __P, vDSP_Length __Q)
{
}

void vDSP_imgfirD(const double *__A, vDSP_Length __NR, vDSP_Length __NC, const double *__F, double *__C, vDSP_Length __P, vDSP_Length __Q)
{
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_maxvD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_meanvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
}

void vDSP_minv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_minvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
}

void vDSP_mmov(const float *__A, float *__C, vDSP_Length __M, vDSP_Length __N, vDSP_Length __TA, vDSP_Length __TC)
{
}

void vDSP_mmovD(const double *__A, double *__C, vDSP_Length __M, vDSP_Length __N, vDSP_Length __TA, vDSP_Length __TC)
{
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_mmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
}

void vDSP_mtransD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_svdivD(const double *__A, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
}

void vDSP_sveD(const double *__A, vDSP_Stride __I, double *__C, vDSP_Length __N)
{
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
}

void vDSP_svesqD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
}

void vDSP_vabs(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vabsD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vabsi(const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vaddD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vaddi(const int *__A, vDSP_Stride __IA, const int *__B, vDSP_Stride __IB, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdiv(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdivD(const double *__B, vDSP_Stride __IB, const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vdivi(const int *__B, vDSP_Stride __IB, const int *__A, vDSP_Stride __IA, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfillD(const double *__A, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vfilli(const int *__A, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vmulD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vrampD(const double *__A, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsaddD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsaddi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdiv(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdivD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsdivi(const int *__A, vDSP_Stride __IA, const int *__B, int *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmaD(const double *__A, vDSP_Stride __IA, const double *__B, const double *__C, vDSP_Stride __IC, double *__D, vDSP_Stride __ID, vDSP_Length __N)
{
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsmulD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsort(float *__C, vDSP_Length __N, int __Order)
{
}

void vDSP_vsortD(double *__C, vDSP_Length __N, int __Order)
{
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsqD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vsubD(const double *__B, vDSP_Stride __IB, const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
}

void vDSP_vswsumD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
}

vImage_Error vImageBuffer_Init(vImage_Buffer *buf, vImagePixelCount height, vImagePixelCount width, uint32_t pixelBits, vImage_Flags flags)
{
  return MEMORY[0x270EDEF18](buf, height, width, *(void *)&pixelBits, *(void *)&flags);
}

vImage_Error vImageConvert_16UToF(const vImage_Buffer *src, const vImage_Buffer *dest, float offset, float scale, vImage_Flags flags)
{
  return MEMORY[0x270EDEF50](src, dest, *(void *)&flags, offset, scale);
}

vImage_Error vImageConvert_420Yp8_CbCr8ToARGB8888(const vImage_Buffer *srcYp, const vImage_Buffer *srcCbCr, const vImage_Buffer *dest, const vImage_YpCbCrToARGB *info, const uint8_t permuteMap[4], const uint8_t alpha, vImage_Flags flags)
{
  return MEMORY[0x270EDEF70](srcYp, srcCbCr, dest, info, permuteMap, alpha, *(void *)&flags);
}

vImage_Error vImageConvert_ARGB8888To420Yp8_CbCr8(const vImage_Buffer *src, const vImage_Buffer *destYp, const vImage_Buffer *destCbCr, const vImage_ARGBToYpCbCr *info, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDEF88](src, destYp, destCbCr, info, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoARGB8888_dithered(const vImage_Buffer *src, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, int dither, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDEFB8](src, dest, maxFloat, minFloat, *(void *)&dither, permuteMap, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBFFFFtoPlanarF(const vImage_Buffer *srcARGB, const vImage_Buffer *destA, const vImage_Buffer *destR, const vImage_Buffer *destG, const vImage_Buffer *destB, vImage_Flags flags)
{
  return MEMORY[0x270EDEFC8](srcARGB, destA, destR, destG, destB, *(void *)&flags);
}

vImage_Error vImageConvert_ARGBToYpCbCr_GenerateConversion(const vImage_ARGBToYpCbCrMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_ARGBToYpCbCr *outInfo, vImageARGBType inARGBType, vImageYpCbCrType outYpCbCrType, vImage_Flags flags)
{
  return MEMORY[0x270EDEFE0](matrix, pixelRange, outInfo, *(void *)&inARGBType, *(void *)&outYpCbCrType, *(void *)&flags);
}

vImage_Error vImageConvert_Planar16FtoPlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF020](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFToARGB8888(const vImage_Buffer *alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0A8](alpha, red, green, blue, dest, maxFloat, minFloat, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFToBGRX8888(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_8 alpha, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0B0](blue, green, red, alpha, dest, maxFloat, minFloat, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFToBGRXFFFF(const vImage_Buffer *blue, const vImage_Buffer *green, const vImage_Buffer *red, Pixel_F alpha, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0C0](blue, green, red, dest, *(void *)&flags, alpha);
}

vImage_Error vImageConvert_PlanarFToXRGB8888(Pixel_8 alpha, const vImage_Buffer *red, const vImage_Buffer *green, const vImage_Buffer *blue, const vImage_Buffer *dest, const Pixel_FFFF maxFloat, const Pixel_FFFF minFloat, vImage_Flags flags)
{
  return MEMORY[0x270EDF0D8](alpha, red, green, blue, dest, maxFloat, minFloat, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoARGBFFFF(const vImage_Buffer *srcA, const vImage_Buffer *srcR, const vImage_Buffer *srcG, const vImage_Buffer *srcB, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0E0](srcA, srcR, srcG, srcB, dest, *(void *)&flags);
}

vImage_Error vImageConvert_PlanarFtoPlanar16F(const vImage_Buffer *src, const vImage_Buffer *dest, vImage_Flags flags)
{
  return MEMORY[0x270EDF0E8](src, dest, *(void *)&flags);
}

vImage_Error vImageConvert_YpCbCrToARGB_GenerateConversion(const vImage_YpCbCrToARGBMatrix *matrix, const vImage_YpCbCrPixelRange *pixelRange, vImage_YpCbCrToARGB *outInfo, vImageYpCbCrType inYpCbCrType, vImageARGBType outARGBType, vImage_Flags flags)
{
  return MEMORY[0x270EDF140](matrix, pixelRange, outInfo, *(void *)&inYpCbCrType, *(void *)&outARGBType, *(void *)&flags);
}

vImage_Error vImageCopyBuffer(const vImage_Buffer *src, const vImage_Buffer *dest, size_t pixelSize, vImage_Flags flags)
{
  return MEMORY[0x270EDF1A0](src, dest, pixelSize, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDF268](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImagePermuteChannels_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x270EDF278](src, dest, permuteMap, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_ARGB_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A0](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_8888 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2A8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_FFFF backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2B8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, const Pixel_16F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2D0](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar16U(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_16U backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2D8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_8 backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF2E8](src, dest, rotationConstant, backColor, *(void *)&flags);
}

vImage_Error vImageRotate90_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, uint8_t rotationConstant, Pixel_F backColor, vImage_Flags flags)
{
  return MEMORY[0x270EDF300](src, dest, rotationConstant, *(void *)&flags, backColor);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF328](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_ARGBFFFF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF340](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_CbCr8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF358](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar16F(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF360](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_Planar8(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF380](src, dest, tempBuffer, *(void *)&flags);
}

vImage_Error vImageScale_PlanarF(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x270EDF390](src, dest, tempBuffer, *(void *)&flags);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x270EDBB18](__str, __size, __format, a4);
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
}

xpc_object_t xpc_dictionary_create(const char *const *keys, xpc_object_t *values, size_t count)
{
  return (xpc_object_t)MEMORY[0x270EDC008](keys, values, count);
}

void xpc_dictionary_set_BOOL(xpc_object_t xdict, const char *key, BOOL value)
{
}

void xpc_dictionary_set_double(xpc_object_t xdict, const char *key, double value)
{
}

void xpc_dictionary_set_int64(xpc_object_t xdict, const char *key, int64_t value)
{
}