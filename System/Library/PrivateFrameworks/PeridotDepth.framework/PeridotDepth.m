void peridot::PeridotDepth::init(peridot::PeridotDepth *this)
{
  uint64_t i;
  _OWORD *v3;
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  _OWORD *v12;
  char *v13;
  void *v14;
  _OWORD *v15;
  void *v16;
  void *v17;
  _OWORD *v18;
  long long v19;
  void *v20;

  for (i = 80; i != 2768; i += 192)
  {
    v12 = operator new(0xF0uLL);
    *v12 = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    v12[3] = 0u;
    v12[4] = 0u;
    v12[5] = 0u;
    v12[6] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    v12[9] = 0u;
    v12[10] = 0u;
    v12[11] = 0u;
    v12[12] = 0u;
    v12[13] = 0u;
    v12[14] = 0u;
    v13 = (char *)this + i;
    v14 = *(void **)((char *)this + i - 80);
    if (v14)
    {
      *((void *)v13 - 9) = v14;
      operator delete(v14);
    }
    *((void *)v13 - 10) = v12;
    *((void *)v13 - 9) = v12 + 15;
    *((void *)v13 - 8) = v12 + 15;
    v15 = operator new(0xF0uLL);
    *v15 = 0u;
    v15[1] = 0u;
    v15[2] = 0u;
    v15[3] = 0u;
    v15[4] = 0u;
    v15[5] = 0u;
    v15[6] = 0u;
    v15[7] = 0u;
    v15[8] = 0u;
    v15[9] = 0u;
    v15[10] = 0u;
    v15[11] = 0u;
    v15[12] = 0u;
    v15[13] = 0u;
    v15[14] = 0u;
    v16 = (void *)*((void *)v13 - 6);
    if (v16)
    {
      *(void *)((char *)this + i - 40) = v16;
      operator delete(v16);
    }
    *((void *)v13 - 6) = v15;
    v17 = (void *)((char *)this + i);
    *(v17 - 5) = v15 + 15;
    *(v17 - 4) = v15 + 15;
    v18 = operator new(0xF0uLL);
    v19 = 0uLL;
    *v18 = 0u;
    v18[1] = 0u;
    v18[2] = 0u;
    v18[3] = 0u;
    v18[4] = 0u;
    v18[5] = 0u;
    v18[6] = 0u;
    v18[7] = 0u;
    v18[8] = 0u;
    v18[9] = 0u;
    v18[10] = 0u;
    v18[11] = 0u;
    v18[12] = 0u;
    v18[13] = 0u;
    v18[14] = 0u;
    v20 = *(void **)((char *)this + i - 16);
    if (v20)
    {
      *(v17 - 1) = v20;
      operator delete(v20);
      v19 = 0uLL;
    }
    *(v17 - 2) = v18;
    *(v17 - 1) = v18 + 15;
    *v17 = v18 + 15;
    v3 = (_OWORD *)*((void *)v13 - 10);
    v3[3] = v19;
    v3[4] = v19;
    v3[1] = v19;
    v3[2] = v19;
    *v3 = v19;
    v4 = (_OWORD *)*((void *)v13 - 6);
    v4[3] = v19;
    v4[4] = v19;
    v4[1] = v19;
    v4[2] = v19;
    *v4 = v19;
    v5 = (_OWORD *)*(v17 - 2);
    v5[3] = v19;
    v5[4] = v19;
    v5[1] = v19;
    v5[2] = v19;
    *v5 = v19;
    *(_DWORD *)(*(v17 - 2) + 60) = 0;
    v6 = *((void *)v13 - 10);
    *(_DWORD *)(v6 + 60) = 0;
    *(_DWORD *)(*((void *)v13 - 6) + 60) = 0;
    *(_OWORD *)(v6 + 128) = v19;
    *(_OWORD *)(v6 + 144) = v19;
    *(_OWORD *)(v6 + 96) = v19;
    *(_OWORD *)(v6 + 112) = v19;
    *(_OWORD *)(v6 + 80) = v19;
    v7 = (_OWORD *)*((void *)v13 - 6);
    v7[8] = v19;
    v7[9] = v19;
    v7[6] = v19;
    v7[7] = v19;
    v7[5] = v19;
    v8 = (_OWORD *)*(v17 - 2);
    v8[8] = v19;
    v8[9] = v19;
    v8[6] = v19;
    v8[7] = v19;
    v8[5] = v19;
    *(_DWORD *)(*(v17 - 2) + 140) = 0;
    v9 = *((void *)v13 - 10);
    *(_DWORD *)(v9 + 140) = 0;
    *(_DWORD *)(*((void *)v13 - 6) + 140) = 0;
    *(_OWORD *)(v9 + 208) = v19;
    *(_OWORD *)(v9 + 224) = v19;
    *(_OWORD *)(v9 + 176) = v19;
    *(_OWORD *)(v9 + 192) = v19;
    *(_OWORD *)(v9 + 160) = v19;
    v10 = (_OWORD *)*((void *)v13 - 6);
    v10[13] = v19;
    v10[14] = v19;
    v10[11] = v19;
    v10[12] = v19;
    v10[10] = v19;
    v11 = (_OWORD *)*(v17 - 2);
    v11[13] = v19;
    v11[14] = v19;
    v11[11] = v19;
    v11[12] = v19;
    v11[10] = v19;
    *(_DWORD *)(*(v17 - 2) + 220) = 0;
    *(_DWORD *)(*((void *)v13 - 10) + 220) = 0;
    *(_DWORD *)(*((void *)v13 - 6) + 220) = 0;
  }
}

void Algo::GcdExt(Algo *this, int a2, _DWORD *a3, int *a4, int *a5)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (a2 | this)
  {
    int v8 = (int)this;
    v9 = (void **)operator new(0x30uLL);
    v10 = v9 + 6;
    v31 = v9 + 6;
    *(_OWORD *)v9 = 0u;
    *((_OWORD *)v9 + 1) = 0u;
    *((_OWORD *)v9 + 2) = 0u;
    v30 = v9;
    __p = (void *)1;
    LODWORD(v33) = v8;
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, (char *)&__p, (char *)&v33 + 4, 3uLL);
    __p = (void *)0x100000000;
    LODWORD(v33) = a2;
    v11 = (int32x2_t **)(v9 + 3);
    std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 3, (char *)&__p, (char *)&v33 + 4, 3uLL);
    v12 = (int32x2_t *)v9[3];
    __int32 v13 = v12[1].i32[0];
    if (v13)
    {
      v29 = a4;
      do
      {
        int v14 = *((_DWORD *)*v9 + 2);
        __p = 0;
        v33 = 0;
        v34 = 0;
        v15 = (int32x2_t *)v9[4];
        int64_t v16 = (char *)v15 - (char *)v12;
        if (v15 == v12)
        {
          v18 = 0;
          v17 = 0;
        }
        else
        {
          if (v16 < 0) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          v17 = (char *)operator new((char *)v15 - (char *)v12);
          __p = v17;
          v33 = v17;
          v18 = &v17[4 * (v16 >> 2)];
          v34 = v18;
          memcpy(v17, v12, v16);
          v33 = v18;
          v12 = *v11;
        }
        int32x2_t v19 = *(int32x2_t *)*v9;
        int32x2_t v20 = *v12;
        int v21 = *((_DWORD *)*v9 + 2);
        __int32 v22 = v12[1].i32[0];
        v23 = operator new(0xCuLL);
        *(int32x2_t *)v23 = vmls_s32(v19, v20, vdup_n_s32(v14 / v13));
        *((_DWORD *)v23 + 2) = v21 - v22 * (v14 / v13);
        if (v9 != &__p) {
          std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9, v17, v18, (v18 - v17) >> 2);
        }
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v9 + 3, (char *)v23, (char *)v23 + 12, 3uLL);
        operator delete(v23);
        if (__p)
        {
          v33 = __p;
          operator delete(__p);
        }
        v9 = v30;
        v11 = (int32x2_t **)(v30 + 3);
        v12 = (int32x2_t *)v30[3];
        __int32 v13 = v12[1].i32[0];
      }
      while (v13);
      v10 = v31;
      v24 = *v30;
      *a3 = *(_DWORD *)*v30;
      int *v29 = v24[1];
      if (v31 == v30) {
        goto LABEL_14;
      }
    }
    else
    {
      v25 = *v9;
      *a3 = *(_DWORD *)*v9;
      *a4 = v25[1];
    }
    v26 = v10;
    do
    {
      v28 = *(v26 - 3);
      v26 -= 3;
      v27 = v28;
      if (v28)
      {
        *(v10 - 2) = v27;
        operator delete(v27);
      }
      v10 = v26;
    }
    while (v26 != v9);
LABEL_14:
    operator delete(v9);
    return;
  }
  *a3 = 0;
  *a4 = 0;
}

void sub_258FF06D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::vector<ImageUtils::Blob>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_258FF06EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  std::vector<ImageUtils::Blob>::~vector[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(void *result, char *__src, char *a3, size_t __sz)
{
  v6 = __src;
  v7 = result;
  uint64_t v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      result = memcpy(result, v6, v14);
    }
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  int64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    int32x2_t v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    int32x2_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  int32x2_t *v15 = &v9[v14];
  return result;
}

void peridot::PeridotDxpMacro::initWithOffset(peridot::PeridotDxpMacro *this, int a2, int a3)
{
  v3 = this;
  *((_DWORD *)this + 77) = a3;
  *((_DWORD *)this + 78) = -1431655765 * ((*((void *)this + 13) - *((void *)this + 12)) >> 3);
  v4 = (void **)operator new(0x78uLL);
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  *((_OWORD *)v4 + 4) = 0u;
  *((_OWORD *)v4 + 5) = 0u;
  *((_OWORD *)v4 + 6) = 0u;
  __p = v4;
  v4[14] = 0;
  v5 = (float ***)((char *)v3 + 31408);
  uint64_t v6 = *((void *)v3 + 3927);
  uint64_t v7 = *((void *)v3 + 3926);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3);
  v310 = v3;
  if (v8 > 4)
  {
    if (v6 - v7 != 120)
    {
      uint64_t v9 = v7 + 120;
      if (v6 != v7 + 120)
      {
        uint64_t v10 = *((void *)v3 + 3927);
        do
        {
          unint64_t v12 = *(void **)(v10 - 24);
          v10 -= 24;
          BOOL v11 = v12;
          if (v12)
          {
            *(void *)(v6 - 16) = v11;
            operator delete(v11);
          }
          uint64_t v6 = v10;
        }
        while (v10 != v9);
      }
      v3 = v310;
      *((void *)v310 + 3927) = v9;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__append((uint64_t)v3 + 31408, 5 - v8);
  }
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  v15 = (uint64_t *)((char *)v3 + 72);
  v293 = (uint64_t *)((char *)v3 + 48);
  do
  {
    int64_t v16 = (const float *)((char *)v3 + 272);
    unint64_t v17 = (const float *)(*((void *)v3 + 28) + v14);
    float32x4_t v18 = vld1q_dup_f32(v16);
    float32x4_t v19 = vld1q_dup_f32(v17);
    float32x4_t v326 = v18;
    float32x4_t v329 = v19;
    uint64_t v20 = *((void *)v3 + 22);
    float32x4_t v301 = *(float32x4_t *)v20;
    float32x4_t v303 = *(float32x4_t *)(v20 + 16);
    float32x4_t v306 = *(float32x4_t *)(v20 + 32);
    float32x4_t v308 = *(float32x4_t *)(v20 + 48);
    float32x4_t v311 = *(float32x4_t *)(v20 + 64);
    float32x4_t v313 = *(float32x4_t *)(v20 + 80);
    float32x4_t v315 = *(float32x4_t *)(v20 + 96);
    float32x4_t v317 = *(float32x4_t *)(v20 + 112);
    float32x4_t v319 = *(float32x4_t *)(v20 + 128);
    float32x4_t v321 = *(float32x4_t *)(v20 + 144);
    float32x4_t v324 = *(float32x4_t *)(v20 + 160);
    float32x2_t v21 = *(float32x2_t *)(v20 + 176);
    __int32 v22 = (__int32 **)&__p[v13];
    v23 = (char *)__p[v13];
    unint64_t v24 = (unsigned char *)__p[v13 + 1] - v23;
    if (v24 >= 0xB4)
    {
      if (v24 != 180) {
        v22[1] = (__int32 *)(v23 + 180);
      }
    }
    else
    {
      std::vector<float>::__append((uint64_t)&__p[v13], 45 - (v24 >> 2));
    }
    v25 = &(*v5)[v13];
    unint64_t v26 = (char *)v25[1] - (char *)*v25;
    if (v26 > 0xB3)
    {
      if (v26 != 180) {
        v25[1] = *v25 + 45;
      }
    }
    else
    {
      std::vector<float>::__append((uint64_t)v25, 45 - (v26 >> 2));
    }
    v27 = (float32x4_t *)operator new(0xB8uLL);
    v332 = &v27[11].i8[8];
    v333 = &v27[11].i8[8];
    float32x4_t *v27 = vsubq_f32(vaddq_f32(v326, v301), v329);
    v27[1] = vsubq_f32(vaddq_f32(v326, v303), v329);
    v27[2] = vsubq_f32(vaddq_f32(v326, v306), v329);
    v27[3] = vsubq_f32(vaddq_f32(v326, v308), v329);
    v27[4] = vsubq_f32(vaddq_f32(v326, v311), v329);
    v27[5] = vsubq_f32(vaddq_f32(v326, v313), v329);
    v27[6] = vsubq_f32(vaddq_f32(v326, v315), v329);
    v27[7] = vsubq_f32(vaddq_f32(v326, v317), v329);
    v27[8] = vsubq_f32(vaddq_f32(v326, v319), v329);
    v27[9] = vsubq_f32(vaddq_f32(v326, v321), v329);
    v27[10] = vsubq_f32(vaddq_f32(v326, v324), v329);
    *(float32x2_t *)v27[11].f32 = vsub_f32(vadd_f32(*(float32x2_t *)v326.f32, v21), *(float32x2_t *)v329.f32);
    v331 = v27;
    peridot::PeridotDxpMacro::getPulseShape((uint64_t)v27, v15, v293, (float **)&v331, 0, v22);
    operator delete(v27);
    memmove((*v5)[v13], *v22, 0xB4uLL);
    v14 += 4;
    v13 += 3;
    v3 = v310;
  }
  while (v14 != 20);
  unint64_t v28 = *((int *)v310 + 78);
  v291 = v5;
  v292 = v15;
  if (v28)
  {
    if ((v28 & 0x80000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v29 = 24 * v28;
    v30 = (void **)operator new(24 * v28);
    size_t v31 = 24 * ((v29 - 24) / 0x18uLL) + 24;
    bzero(v30, v31);
    uint64_t v32 = 0;
    v330 = (void **)((char *)v30 + v31);
    uint64_t v33 = *((void *)v310 + 25);
    uint64_t v34 = *((void *)v310 + 26);
    v325 = v30;
    while (1)
    {
      uint64_t v35 = &v30[3 * v32];
      uint64_t v36 = v34 - v33;
      v37 = (char *)v35[1];
      unint64_t v38 = v36 >> 2;
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v37 - (unsigned char *)*v35) >> 3);
      if (v38 <= v39)
      {
        if (v38 < v39)
        {
          uint64_t v40 = (uint64_t)*v35 + 24 * v38;
          if (v37 != (char *)v40)
          {
            v41 = (char *)v35[1];
            do
            {
              v43 = (void *)*((void *)v41 - 3);
              v41 -= 24;
              v42 = v43;
              if (v43)
              {
                *((void *)v37 - 2) = v42;
                operator delete(v42);
              }
              v37 = v41;
            }
            while (v41 != (char *)v40);
          }
          v35[1] = (void *)v40;
          v3 = v310;
        }
      }
      else
      {
        std::vector<std::vector<float>>::__append((uint64_t)&v30[3 * v32], v38 - v39);
      }
      uint64_t v33 = *((void *)v3 + 26);
      if (v33 != *((void *)v3 + 25)) {
        break;
      }
      uint64_t v34 = *((void *)v3 + 26);
LABEL_24:
      ++v32;
      unint64_t v28 = *((int *)v3 + 78);
      if (v32 >= (uint64_t)v28) {
        goto LABEL_60;
      }
    }
    unint64_t v44 = 0;
    uint64_t v33 = *((void *)v3 + 25);
    uint64_t v297 = v32;
    while (1)
    {
      uint64_t v45 = *((void *)v3 + 22);
      v46 = (const float *)((char *)v3 + 272);
      v47 = (const float *)(v33 + 4 * v44);
      float32x4_t v48 = vld1q_dup_f32(v46);
      float32x4_t v322 = v48;
      float32x4_t v49 = vld1q_dup_f32(v47);
      float32x4_t v327 = v49;
      float32x4_t v299 = *(float32x4_t *)v45;
      float32x4_t v300 = *(float32x4_t *)(v45 + 16);
      float32x4_t v302 = *(float32x4_t *)(v45 + 32);
      float32x4_t v304 = *(float32x4_t *)(v45 + 48);
      float32x4_t v307 = *(float32x4_t *)(v45 + 64);
      float32x4_t v309 = *(float32x4_t *)(v45 + 80);
      float32x4_t v312 = *(float32x4_t *)(v45 + 96);
      float32x4_t v314 = *(float32x4_t *)(v45 + 112);
      float32x4_t v316 = *(float32x4_t *)(v45 + 128);
      float32x4_t v318 = *(float32x4_t *)(v45 + 144);
      float32x4_t v320 = *(float32x4_t *)(v45 + 160);
      float32x2_t v50 = *(float32x2_t *)(v45 + 176);
      v51 = v35;
      v52 = *v35;
      uint64_t v53 = (uint64_t)*v35 + 24 * v44;
      v55 = (void *)(v53 + 8);
      v54 = *(char **)(v53 + 8);
      v56 = *(char **)v53;
      uint64_t v57 = (uint64_t)&v54[-*(void *)v53];
      _ZF = v57 == 180;
      if ((unint64_t)v57 >= 0xB4)
      {
        uint64_t v35 = v51;
        if (!_ZF) {
          void *v55 = v56 + 180;
        }
        goto LABEL_57;
      }
      uint64_t v59 = v57 >> 2;
      unint64_t v60 = 45 - (v57 >> 2);
      uint64_t v61 = (uint64_t)v52 + 24 * v44;
      uint64_t v64 = *(void *)(v61 + 16);
      v63 = (void *)(v61 + 16);
      uint64_t v62 = v64;
      if (v60 > (v64 - (uint64_t)v54) >> 2) {
        break;
      }
      bzero(v54, 4 * v60);
      void *v55 = &v54[4 * v60];
      uint64_t v32 = v297;
      uint64_t v35 = v51;
LABEL_57:
      v3 = v310;
      v81 = (float32x4_t *)operator new(0xB8uLL);
      v332 = &v81[11].i8[8];
      v333 = &v81[11].i8[8];
      float32x4_t *v81 = vsubq_f32(vaddq_f32(v322, v299), v327);
      v81[1] = vsubq_f32(vaddq_f32(v322, v300), v327);
      v81[2] = vsubq_f32(vaddq_f32(v322, v302), v327);
      v81[3] = vsubq_f32(vaddq_f32(v322, v304), v327);
      v81[4] = vsubq_f32(vaddq_f32(v322, v307), v327);
      v81[5] = vsubq_f32(vaddq_f32(v322, v309), v327);
      v81[6] = vsubq_f32(vaddq_f32(v322, v312), v327);
      v81[7] = vsubq_f32(vaddq_f32(v322, v314), v327);
      v81[8] = vsubq_f32(vaddq_f32(v322, v316), v327);
      v81[9] = vsubq_f32(vaddq_f32(v322, v318), v327);
      v81[10] = vsubq_f32(vaddq_f32(v322, v320), v327);
      *(float32x2_t *)v81[11].f32 = vsub_f32(vadd_f32(*(float32x2_t *)v322.f32, v50), *(float32x2_t *)v327.f32);
      v331 = v81;
      v30 = v325;
      peridot::PeridotDxpMacro::getPulseShape((uint64_t)v81, (uint64_t *)v310 + 18, (uint64_t *)v310 + 15, (float **)&v331, v32, (__int32 **)*v35 + 3 * v44);
      operator delete(v81);
      ++v44;
      uint64_t v33 = *((void *)v310 + 25);
      uint64_t v34 = *((void *)v310 + 26);
      if (v44 >= (v34 - v33) >> 2) {
        goto LABEL_24;
      }
    }
    uint64_t v65 = v62 - (void)v56;
    unint64_t v66 = v65 >> 1;
    if ((unint64_t)(v65 >> 1) <= 0x2D) {
      unint64_t v66 = 45;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v66 = 0x3FFFFFFFFFFFFFFFLL;
    }
    if (v66 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v296 = v66;
    v67 = (char *)operator new(4 * v66);
    size_t v68 = 4 * v60;
    v294 = v67;
    uint64_t v295 = 4 * v60;
    v69 = &v67[4 * v59];
    bzero(v69, v68);
    if (v54 == v56)
    {
      v72 = v69;
      uint64_t v35 = v51;
      v73 = v294;
      v71 = v69;
      uint64_t v32 = v297;
      goto LABEL_55;
    }
    unint64_t v70 = v54 - 4 - v56;
    if (v70 >= 0x2C)
    {
      v73 = v294;
      unint64_t v74 = &v54[-(v57 & 0xFFFFFFFFFFFFFFFCLL)] - v294;
      v71 = v69;
      v72 = v69;
      uint64_t v35 = v51;
      uint64_t v32 = v297;
      if (v74 >= 0x20)
      {
        uint64_t v75 = (v70 >> 2) + 1;
        v76 = &v294[4 * v59 - 16];
        v77 = v54 - 16;
        uint64_t v78 = v75 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v79 = *(_OWORD *)v77;
          *((_OWORD *)v76 - 1) = *((_OWORD *)v77 - 1);
          *(_OWORD *)v76 = v79;
          v76 -= 32;
          v77 -= 32;
          v78 -= 8;
        }
        while (v78);
        v72 = &v71[-4 * (v75 & 0x7FFFFFFFFFFFFFF8)];
        v54 -= 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
        if (v75 == (v75 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_55:
          *(void *)uint64_t v53 = v72;
          void *v55 = &v71[v295];
          void *v63 = &v73[4 * v296];
          if (v56) {
            operator delete(v56);
          }
          goto LABEL_57;
        }
      }
    }
    else
    {
      v71 = v69;
      v72 = v69;
      uint64_t v35 = v51;
      v73 = v294;
      uint64_t v32 = v297;
    }
    do
    {
      int v80 = *((_DWORD *)v54 - 1);
      v54 -= 4;
      *((_DWORD *)v72 - 1) = v80;
      v72 -= 4;
    }
    while (v54 != v56);
    goto LABEL_55;
  }
  v330 = 0;
  v30 = 0;
LABEL_60:
  v82 = (void *)((char *)v3 + 31288);
  uint64_t v83 = *((void *)v3 + 3912);
  uint64_t v84 = *((void *)v3 + 3911);
  unint64_t v85 = 0xAAAAAAAAAAAAAAABLL * ((v83 - v84) >> 3);
  if (v28 <= v85)
  {
    if (v28 < v85)
    {
      uint64_t v86 = v84 + 24 * (int)v28;
      if (v83 != v86)
      {
        uint64_t v87 = *((void *)v3 + 3912);
        do
        {
          uint64_t v89 = *(void *)(v87 - 24);
          v87 -= 24;
          uint64_t v88 = v89;
          if (v89)
          {
            *(void *)(v83 - 16) = v88;
            MEMORY[0x25A2D62C0]();
          }
          uint64_t v83 = v87;
        }
        while (v87 != v86);
      }
      v3 = v310;
      *((void *)v310 + 3912) = v86;
    }
  }
  else
  {
    std::vector<std::vector<peridot::DoubleStaticArray<float,61,45>>>::__append((uint64_t)v3 + 31288, v28 - v85);
  }
  v90 = (void *)((char *)v3 + 31336);
  unint64_t v91 = *((int *)v3 + 78);
  uint64_t v92 = *((void *)v3 + 3918);
  uint64_t v93 = *((void *)v3 + 3917);
  unint64_t v94 = 0xAAAAAAAAAAAAAAABLL * ((v92 - v93) >> 3);
  if (v91 <= v94)
  {
    if (v91 < v94)
    {
      uint64_t v95 = v93 + 24 * (int)v91;
      if (v92 != v95)
      {
        uint64_t v96 = *((void *)v3 + 3918);
        do
        {
          uint64_t v98 = *(void *)(v96 - 24);
          v96 -= 24;
          uint64_t v97 = v98;
          if (v98)
          {
            *(void *)(v92 - 16) = v97;
            MEMORY[0x25A2D62C0]();
          }
          uint64_t v92 = v96;
        }
        while (v96 != v95);
      }
      v3 = v310;
      *((void *)v310 + 3918) = v95;
    }
  }
  else
  {
    std::vector<std::vector<peridot::DoubleStaticArray<float,61,45>>>::__append((uint64_t)v3 + 31336, v91 - v94);
  }
  v99 = (void *)((char *)v3 + 31312);
  unint64_t v100 = *((int *)v3 + 78);
  uint64_t v101 = *((void *)v3 + 3915);
  uint64_t v102 = *((void *)v3 + 3914);
  unint64_t v103 = 0xAAAAAAAAAAAAAAABLL * ((v101 - v102) >> 3);
  if (v100 <= v103)
  {
    if (v100 < v103)
    {
      uint64_t v104 = v102 + 24 * (int)v100;
      if (v101 != v104)
      {
        uint64_t v105 = *((void *)v3 + 3915);
        do
        {
          uint64_t v107 = *(void *)(v105 - 24);
          v105 -= 24;
          uint64_t v106 = v107;
          if (v107)
          {
            *(void *)(v101 - 16) = v106;
            MEMORY[0x25A2D62C0]();
          }
          uint64_t v101 = v105;
        }
        while (v105 != v104);
      }
      v3 = v310;
      *((void *)v310 + 3915) = v104;
    }
  }
  else
  {
    std::vector<std::vector<peridot::DoubleStaticArray<float,61,45>>>::__append((uint64_t)v3 + 31312, v100 - v103);
  }
  v108 = (void *)((char *)v3 + 31360);
  unint64_t v109 = *((int *)v3 + 78);
  uint64_t v110 = *((void *)v3 + 3921);
  uint64_t v111 = *((void *)v3 + 3920);
  unint64_t v112 = 0xAAAAAAAAAAAAAAABLL * ((v110 - v111) >> 3);
  if (v109 <= v112)
  {
    if (v109 < v112)
    {
      uint64_t v113 = v111 + 24 * (int)v109;
      if (v110 != v113)
      {
        uint64_t v114 = *((void *)v3 + 3921);
        do
        {
          uint64_t v116 = *(void *)(v114 - 24);
          v114 -= 24;
          uint64_t v115 = v116;
          if (v116)
          {
            *(void *)(v110 - 16) = v115;
            MEMORY[0x25A2D62C0]();
          }
          uint64_t v110 = v114;
        }
        while (v114 != v113);
      }
      v3 = v310;
      *((void *)v310 + 3921) = v113;
    }
  }
  else
  {
    std::vector<std::vector<peridot::DoubleStaticArray<float,61,45>>>::__append((uint64_t)v3 + 31360, v109 - v112);
  }
  v305 = v90;
  if (*((int *)v3 + 78) >= 1)
  {
    uint64_t v117 = 0;
    do
    {
      uint64_t v118 = *v82 + 24 * v117;
      uint64_t v119 = *(void *)(v118 + 8) - *(void *)v118;
      unint64_t v120 = 0x82FA0BE82FA0BE83 * (v119 >> 8);
      if (v120 > 4)
      {
        if (v119 != 55040) {
          *(void *)(v118 + 8) = *(void *)v118 + 55040;
        }
      }
      else
      {
        std::vector<peridot::DoubleStaticArray<float,61,45>>::__append((char **)v118, 5 - v120);
      }
      uint64_t v121 = *v305 + 24 * v117;
      unint64_t v122 = *(void *)(v121 + 8) - *(void *)v121;
      if (v122 > 0x9FF)
      {
        if (v122 != 2560) {
          *(void *)(v121 + 8) = *(void *)v121 + 2560;
        }
      }
      else
      {
        std::vector<peridot::DoubleStaticArray<float,61,2>>::__append((char **)v121, 5 - (v122 >> 9));
      }
      uint64_t v123 = *v99 + 24 * v117;
      uint64_t v124 = *(void *)(v123 + 8) - *(void *)v123;
      unint64_t v125 = 0x82FA0BE82FA0BE83 * (v124 >> 8);
      if (v125 > 4)
      {
        if (v124 != 55040) {
          *(void *)(v123 + 8) = *(void *)v123 + 55040;
        }
      }
      else
      {
        std::vector<peridot::DoubleStaticArray<float,61,45>>::__append((char **)v123, 5 - v125);
      }
      uint64_t v126 = *v108 + 24 * v117;
      unint64_t v127 = *(void *)(v126 + 8) - *(void *)v126;
      if (v127 > 0x9FF)
      {
        if (v127 != 2560) {
          *(void *)(v126 + 8) = *(void *)v126 + 2560;
        }
      }
      else
      {
        std::vector<peridot::DoubleStaticArray<float,61,2>>::__append((char **)v126, 5 - (v127 >> 9));
      }
      uint64_t v128 = 0;
      uint64_t v129 = 0;
      uint64_t v130 = *((void *)v3 + 26);
      do
      {
        _ZF = v130 == *((void *)v3 + 25);
        uint64_t v130 = *((void *)v3 + 25);
        if (!_ZF)
        {
          uint64_t v131 = v128;
          uint64_t v132 = 0;
          uint64_t v133 = *(void *)(*v82 + 24 * v117);
          v134 = *(_OWORD **)v30[3 * v117];
          uint64_t v135 = *(void *)(*v99 + 24 * v117);
          v136 = __p[3 * v129];
          uint64_t v137 = 11008 * v129 + v135;
          uint64_t v138 = 11008 * v129 + v133;
          if ((unint64_t)(v137 - v138) >= 0x20
            && (unint64_t)(v138 - (void)v136) >= 0x20
            && (unint64_t)v134 - v138 >= 0x20)
          {
            unint64_t v139 = v137 - (void)v136;
            unint64_t v140 = v137 - (void)v134;
            if (v139 >= 0x20 && v140 > 0x1F)
            {
              long long v142 = v136[1];
              v143 = (_OWORD *)(v133 + 11008 * v129);
              _OWORD *v143 = *v136;
              v143[1] = v142;
              long long v144 = v134[1];
              v145 = (_OWORD *)(v135 + 11008 * v129);
              _OWORD *v145 = *v134;
              v145[1] = v144;
              long long v146 = v136[3];
              v143[2] = v136[2];
              v143[3] = v146;
              long long v147 = v134[3];
              v145[2] = v134[2];
              v145[3] = v147;
              long long v148 = v136[5];
              v143[4] = v136[4];
              v143[5] = v148;
              long long v149 = v134[5];
              v145[4] = v134[4];
              v145[5] = v149;
              long long v150 = v136[7];
              v143[6] = v136[6];
              v143[7] = v150;
              long long v151 = v134[7];
              v145[6] = v134[6];
              v145[7] = v151;
              long long v152 = v136[9];
              v143[8] = v136[8];
              v143[9] = v152;
              long long v153 = v134[9];
              v145[8] = v134[8];
              v145[9] = v153;
              uint64_t v132 = 40;
            }
          }
          uint64_t v154 = 4 * v132;
          uint64_t v155 = v135 + v131;
          do
          {
            *(_DWORD *)(v133 + v131 + v154) = *(_DWORD *)((char *)v136 + v154);
            *(_DWORD *)(v155 + v154) = *(_DWORD *)((char *)v134 + v154);
            v154 += 4;
          }
          while (v154 != 180);
          operator new[]();
        }
        ++v129;
        v128 += 11008;
      }
      while (v129 != 5);
      ++v117;
    }
    while (v117 < *((int *)v3 + 78));
  }
  v156 = (void *)((char *)v3 + 31384);
  uint64_t v157 = *((void *)v3 + 3924);
  uint64_t v158 = *((void *)v3 + 3923);
  unint64_t v159 = 0xAAAAAAAAAAAAAAABLL * ((v157 - v158) >> 3);
  if (v159 > 0x1E)
  {
    if (v157 - v158 != 744)
    {
      uint64_t v160 = v158 + 744;
      if (v157 != v158 + 744)
      {
        uint64_t v161 = *((void *)v3 + 3924);
        do
        {
          v163 = *(void **)(v161 - 24);
          v161 -= 24;
          v162 = v163;
          if (v163)
          {
            *(void *)(v157 - 16) = v162;
            operator delete(v162);
          }
          uint64_t v157 = v161;
        }
        while (v161 != v160);
      }
      *((void *)v310 + 3924) = v160;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__append((uint64_t)v3 + 31384, 31 - v159);
  }
  uint64_t v164 = 0;
  v165 = &peridot::gT0_TAU;
  v166.i32[1] = 831541143;
  do
  {
    v166.i32[0] = *((_DWORD *)v310 + 68);
    int32x2_t v328 = *(int32x2_t *)v166.f32;
    v166.i32[0] = *v165;
    v167 = (void *)(*((void *)v310 + 3923) + v164);
    unint64_t v168 = v167[1] - *v167;
    int32x2_t v323 = *(int32x2_t *)v166.f32;
    if (v168 >= 0xB4)
    {
      if (v168 != 180) {
        v167[1] = *v167 + 180;
      }
    }
    else
    {
      std::vector<float>::__append((uint64_t)v167, 45 - (v168 >> 2));
    }
    v169 = (char *)operator new(0xB8uLL);
    float32x4_t v170 = (float32x4_t)vdupq_lane_s32(v328, 0);
    float32x4_t v171 = (float32x4_t)vdupq_lane_s32(v323, 0);
    v332 = v169 + 184;
    v333 = v169 + 184;
    *(float *)v169 = *(float *)v328.i32 - *(float *)v323.i32;
    *(float32x4_t *)(v169 + 4) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_2591205D0), v171);
    *(float32x4_t *)(v169 + 20) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_2591205E0), v171);
    *(float32x4_t *)(v169 + 36) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_2591205F0), v171);
    *(float32x4_t *)(v169 + 52) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120600), v171);
    *(float32x4_t *)(v169 + 68) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120610), v171);
    *(float32x4_t *)(v169 + 84) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120620), v171);
    *(float32x4_t *)(v169 + 100) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120630), v171);
    *(float32x4_t *)(v169 + 116) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120640), v171);
    *(float32x4_t *)(v169 + 132) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120650), v171);
    *(float32x4_t *)(v169 + 148) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120660), v171);
    *(float32x4_t *)(v169 + 164) = vsubq_f32(vaddq_f32(v170, (float32x4_t)xmmword_259120670), v171);
    *((float *)v169 + 45) = (float)(*(float *)v328.i32 + 0.0000000045) - *(float *)v323.i32;
    v331 = (float32x4_t *)v169;
    peridot::PeridotDxpMacro::getPulseShape((uint64_t)v169, v292, v293, (float **)&v331, 0, (__int32 **)(*v156 + v164));
    operator delete(v169);
    v164 += 24;
    ++v165;
  }
  while (v164 != 744);
  v172 = *v291;
  v173 = **v291;
  v174 = (*v291)[1];
  float v175 = *v173;
  v176 = v173 + 1;
  if (*v173 >= v173[1]) {
    v176 = **v291;
  }
  else {
    float v175 = v173[1];
  }
  if (v175 < v173[2])
  {
    float v175 = v173[2];
    v176 = v173 + 2;
  }
  if (v175 < v173[3])
  {
    float v175 = v173[3];
    v176 = v173 + 3;
  }
  if (v175 < v173[4])
  {
    float v175 = v173[4];
    v176 = v173 + 4;
  }
  if (v175 < v173[5])
  {
    float v175 = v173[5];
    v176 = v173 + 5;
  }
  if (v175 < v173[6])
  {
    float v175 = v173[6];
    v176 = v173 + 6;
  }
  if (v175 < v173[7])
  {
    float v175 = v173[7];
    v176 = v173 + 7;
  }
  if (v175 < v173[8])
  {
    float v175 = v173[8];
    v176 = v173 + 8;
  }
  if (v175 < v173[9])
  {
    float v175 = v173[9];
    v176 = v173 + 9;
  }
  if (v175 < v173[10])
  {
    float v175 = v173[10];
    v176 = v173 + 10;
  }
  if (v175 < v173[11])
  {
    float v175 = v173[11];
    v176 = v173 + 11;
  }
  if (v175 < v173[12])
  {
    float v175 = v173[12];
    v176 = v173 + 12;
  }
  if (v175 < v173[13])
  {
    float v175 = v173[13];
    v176 = v173 + 13;
  }
  if (v175 < v173[14])
  {
    float v175 = v173[14];
    v176 = v173 + 14;
  }
  if (v175 < v173[15])
  {
    float v175 = v173[15];
    v176 = v173 + 15;
  }
  if (v175 < v173[16])
  {
    float v175 = v173[16];
    v176 = v173 + 16;
  }
  if (v175 < v173[17])
  {
    float v175 = v173[17];
    v176 = v173 + 17;
  }
  if (v175 < v173[18])
  {
    float v175 = v173[18];
    v176 = v173 + 18;
  }
  if (v175 < v173[19]) {
    v176 = v173 + 19;
  }
  unint64_t v177 = v176 - v173;
  unint64_t v178 = v174 - v173;
  if (v177 <= v178)
  {
    if (v177 < v178)
    {
      v174 = &v173[v177];
      v172[1] = v174;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)v172, v177 - v178);
    v172 = *v291;
    v173 = **v291;
    v174 = (*v291)[1];
  }
  v179 = v173;
  if (v173 != v174)
  {
    v180 = v173 + 1;
    v179 = v173;
    if (v173 + 1 != v174)
    {
      float v181 = *v173;
      v179 = v173;
      v182 = v173 + 1;
      do
      {
        float v183 = *v182++;
        float v184 = v183;
        if (v181 < v183)
        {
          float v181 = v184;
          v179 = v180;
        }
        v180 = v182;
      }
      while (v182 != v174);
    }
  }
  if (v173 != v174)
  {
    v166.f32[0] = *v179;
    unint64_t v185 = v174 - v173;
    if (v185 <= 1) {
      unint64_t v185 = 1;
    }
    if (v185 <= 7)
    {
      unint64_t v186 = 0;
LABEL_202:
      unint64_t v195 = v185 - v186;
      v196 = &v173[v186];
      float v197 = 1.0 / v166.f32[0];
      do
      {
        float *v196 = *v196 * v197;
        ++v196;
        --v195;
      }
      while (v195);
      goto LABEL_204;
    }
    unint64_t v186 = v185 & 0xFFFFFFFFFFFFFFF8;
    __asm { FMOV            V1.4S, #1.0 }
    LODWORD(v191) = vdivq_f32(_Q1, v166).u32[0];
    v192 = (float32x4_t *)(v173 + 4);
    unint64_t v193 = v185 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v194 = vmulq_n_f32(*v192, v191);
      v192[-1] = vmulq_n_f32(v192[-1], v191);
      float32x4_t *v192 = v194;
      v192 += 2;
      v193 -= 8;
    }
    while (v193);
    if (v185 != v186) {
      goto LABEL_202;
    }
  }
LABEL_204:
  v198 = v172[3];
  v199 = v172[4];
  unint64_t v200 = v199 - v198;
  if (v177 <= v200)
  {
    if (v177 < v200)
    {
      v199 = &v198[v177];
      v172[4] = v199;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)(v172 + 3), v177 - v200);
    v172 = *v291;
    v198 = (*v291)[3];
    v199 = (*v291)[4];
  }
  v201 = v198 + 1;
  BOOL v202 = v198 == v199 || v201 == v199;
  v203 = v198;
  if (!v202)
  {
    float v204 = *v198;
    v203 = v198;
    v205 = v198 + 1;
    do
    {
      float v206 = *v205++;
      float v207 = v206;
      if (v204 < v206)
      {
        float v204 = v207;
        v203 = v201;
      }
      v201 = v205;
    }
    while (v205 != v199);
  }
  if (v198 != v199)
  {
    v166.f32[0] = *v203;
    unint64_t v208 = v199 - v198;
    if (v208 <= 1) {
      unint64_t v208 = 1;
    }
    if (v208 < 8)
    {
      unint64_t v209 = 0;
LABEL_224:
      unint64_t v215 = v208 - v209;
      v216 = &v198[v209];
      float v217 = 1.0 / v166.f32[0];
      do
      {
        float *v216 = *v216 * v217;
        ++v216;
        --v215;
      }
      while (v215);
      goto LABEL_226;
    }
    unint64_t v209 = v208 & 0xFFFFFFFFFFFFFFF8;
    __asm { FMOV            V1.4S, #1.0 }
    LODWORD(v211) = vdivq_f32(_Q1, v166).u32[0];
    v212 = (float32x4_t *)(v198 + 4);
    unint64_t v213 = v208 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v214 = vmulq_n_f32(*v212, v211);
      v212[-1] = vmulq_n_f32(v212[-1], v211);
      float32x4_t *v212 = v214;
      v212 += 2;
      v213 -= 8;
    }
    while (v213);
    if (v208 != v209) {
      goto LABEL_224;
    }
  }
LABEL_226:
  v218 = v172[6];
  v219 = v172[7];
  unint64_t v220 = v219 - v218;
  if (v177 <= v220)
  {
    if (v177 < v220)
    {
      v219 = &v218[v177];
      v172[7] = v219;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)(v172 + 6), v177 - v220);
    v172 = *v291;
    v218 = (*v291)[6];
    v219 = (*v291)[7];
  }
  v221 = v218 + 1;
  BOOL v222 = v218 == v219 || v221 == v219;
  v223 = v218;
  if (!v222)
  {
    float v224 = *v218;
    v223 = v218;
    v225 = v218 + 1;
    do
    {
      float v226 = *v225++;
      float v227 = v226;
      if (v224 < v226)
      {
        float v224 = v227;
        v223 = v221;
      }
      v221 = v225;
    }
    while (v225 != v219);
  }
  if (v218 != v219)
  {
    v166.f32[0] = *v223;
    unint64_t v228 = v219 - v218;
    if (v228 <= 1) {
      unint64_t v228 = 1;
    }
    if (v228 < 8)
    {
      unint64_t v229 = 0;
LABEL_246:
      unint64_t v235 = v228 - v229;
      v236 = &v218[v229];
      float v237 = 1.0 / v166.f32[0];
      do
      {
        float *v236 = *v236 * v237;
        ++v236;
        --v235;
      }
      while (v235);
      goto LABEL_248;
    }
    unint64_t v229 = v228 & 0xFFFFFFFFFFFFFFF8;
    __asm { FMOV            V1.4S, #1.0 }
    LODWORD(v231) = vdivq_f32(_Q1, v166).u32[0];
    v232 = (float32x4_t *)(v218 + 4);
    unint64_t v233 = v228 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v234 = vmulq_n_f32(*v232, v231);
      v232[-1] = vmulq_n_f32(v232[-1], v231);
      float32x4_t *v232 = v234;
      v232 += 2;
      v233 -= 8;
    }
    while (v233);
    if (v228 != v229) {
      goto LABEL_246;
    }
  }
LABEL_248:
  v238 = v172[9];
  v239 = v172[10];
  unint64_t v240 = v239 - v238;
  if (v177 <= v240)
  {
    if (v177 < v240)
    {
      v239 = &v238[v177];
      v172[10] = v239;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)(v172 + 9), v177 - v240);
    v172 = *v291;
    v238 = (*v291)[9];
    v239 = (*v291)[10];
  }
  v241 = v238 + 1;
  BOOL v242 = v238 == v239 || v241 == v239;
  v243 = v238;
  if (!v242)
  {
    float v244 = *v238;
    v243 = v238;
    v245 = v238 + 1;
    do
    {
      float v246 = *v245++;
      float v247 = v246;
      if (v244 < v246)
      {
        float v244 = v247;
        v243 = v241;
      }
      v241 = v245;
    }
    while (v245 != v239);
  }
  if (v238 != v239)
  {
    v166.f32[0] = *v243;
    unint64_t v248 = v239 - v238;
    if (v248 <= 1) {
      unint64_t v248 = 1;
    }
    if (v248 < 8)
    {
      unint64_t v249 = 0;
LABEL_268:
      unint64_t v255 = v248 - v249;
      v256 = &v238[v249];
      float v257 = 1.0 / v166.f32[0];
      do
      {
        float *v256 = *v256 * v257;
        ++v256;
        --v255;
      }
      while (v255);
      goto LABEL_270;
    }
    unint64_t v249 = v248 & 0xFFFFFFFFFFFFFFF8;
    __asm { FMOV            V1.4S, #1.0 }
    LODWORD(v251) = vdivq_f32(_Q1, v166).u32[0];
    v252 = (float32x4_t *)(v238 + 4);
    unint64_t v253 = v248 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v254 = vmulq_n_f32(*v252, v251);
      v252[-1] = vmulq_n_f32(v252[-1], v251);
      float32x4_t *v252 = v254;
      v252 += 2;
      v253 -= 8;
    }
    while (v253);
    if (v248 != v249) {
      goto LABEL_268;
    }
  }
LABEL_270:
  v258 = v172[12];
  v259 = v172[13];
  unint64_t v260 = v259 - v258;
  if (v177 <= v260)
  {
    if (v177 < v260)
    {
      v259 = &v258[v177];
      v172[13] = v259;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)(v172 + 12), v177 - v260);
    v258 = (*v291)[12];
    v259 = (*v291)[13];
  }
  v261 = v258 + 1;
  BOOL v262 = v258 == v259 || v261 == v259;
  v263 = v258;
  if (!v262)
  {
    float v264 = *v258;
    v263 = v258;
    v265 = v258 + 1;
    do
    {
      float v266 = *v265++;
      float v267 = v266;
      if (v264 < v266)
      {
        float v264 = v267;
        v263 = v261;
      }
      v261 = v265;
    }
    while (v265 != v259);
  }
  if (v258 != v259)
  {
    v166.f32[0] = *v263;
    unint64_t v268 = v259 - v258;
    if (v268 <= 1) {
      unint64_t v268 = 1;
    }
    if (v268 < 8)
    {
      unint64_t v269 = 0;
LABEL_290:
      unint64_t v275 = v268 - v269;
      v276 = &v258[v269];
      float v277 = 1.0 / v166.f32[0];
      do
      {
        float *v276 = *v276 * v277;
        ++v276;
        --v275;
      }
      while (v275);
      goto LABEL_292;
    }
    unint64_t v269 = v268 & 0xFFFFFFFFFFFFFFF8;
    __asm { FMOV            V1.4S, #1.0 }
    LODWORD(v271) = vdivq_f32(_Q1, v166).u32[0];
    v272 = (float32x4_t *)(v258 + 4);
    unint64_t v273 = v268 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v274 = vmulq_n_f32(*v272, v271);
      v272[-1] = vmulq_n_f32(v272[-1], v271);
      float32x4_t *v272 = v274;
      v272 += 2;
      v273 -= 8;
    }
    while (v273);
    if (v268 != v269) {
      goto LABEL_290;
    }
  }
LABEL_292:
  if (v30)
  {
    if (v330 != v30)
    {
      v278 = v330;
      do
      {
        v281 = (char *)*(v278 - 3);
        v278 -= 3;
        v280 = v281;
        if (v281)
        {
          v282 = (char *)*(v330 - 2);
          v279 = v280;
          if (v282 != v280)
          {
            v283 = (char *)*(v330 - 2);
            do
            {
              v285 = (void *)*((void *)v283 - 3);
              v283 -= 24;
              v284 = v285;
              if (v285)
              {
                *((void *)v282 - 2) = v284;
                operator delete(v284);
              }
              v282 = v283;
            }
            while (v283 != v280);
            v279 = *v278;
          }
          *(v330 - 2) = v280;
          operator delete(v279);
        }
        v330 = v278;
      }
      while (v278 != v30);
    }
    operator delete(v30);
  }
  v286 = __p[12];
  if (v286)
  {
    __p[13] = v286;
    operator delete(v286);
  }
  v287 = __p[9];
  if (v287)
  {
    __p[10] = v287;
    operator delete(v287);
  }
  v288 = __p[6];
  if (v288)
  {
    __p[7] = v288;
    operator delete(v288);
  }
  v289 = __p[3];
  if (v289)
  {
    __p[4] = v289;
    operator delete(v289);
  }
  v290 = *__p;
  if (*__p)
  {
    __p[1] = v290;
    operator delete(v290);
  }
  operator delete(__p);
}

void sub_258FF28F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void **a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60)
{
  *(void *)(v61 - 240) = a18;
  if (*(void *)(v61 - 232) && *(unsigned char *)(v61 - 216)) {
    MEMORY[0x25A2D62A0]();
  }
  if (v60)
  {
    if (a49 != v60)
    {
      size_t v68 = a49;
      do
      {
        v71 = (char *)*(v68 - 3);
        v68 -= 3;
        unint64_t v70 = v71;
        if (v71)
        {
          v72 = (char *)*(a49 - 2);
          v69 = v70;
          if (v72 != v70)
          {
            v73 = (char *)*(a49 - 2);
            do
            {
              uint64_t v75 = (void *)*((void *)v73 - 3);
              v73 -= 24;
              unint64_t v74 = v75;
              if (v75)
              {
                *((void *)v72 - 2) = v74;
                operator delete(v74);
              }
              v72 = v73;
            }
            while (v73 != v70);
            v69 = *v68;
          }
          *(a49 - 2) = v70;
          operator delete(v69);
        }
        a49 = v68;
      }
      while (v68 != v60);
    }
    operator delete(v60);
  }
  v63 = __p[12];
  if (v63)
  {
    __p[13] = v63;
    operator delete(v63);
    uint64_t v64 = __p[9];
    if (!v64)
    {
LABEL_9:
      uint64_t v65 = __p[6];
      if (!v65) {
        goto LABEL_10;
      }
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v64 = __p[9];
    if (!v64) {
      goto LABEL_9;
    }
  }
  __p[10] = v64;
  operator delete(v64);
  uint64_t v65 = __p[6];
  if (!v65)
  {
LABEL_10:
    unint64_t v66 = __p[3];
    if (!v66) {
      goto LABEL_11;
    }
    goto LABEL_17;
  }
LABEL_16:
  __p[7] = v65;
  operator delete(v65);
  unint64_t v66 = __p[3];
  if (!v66)
  {
LABEL_11:
    v67 = *__p;
    if (!*__p) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_17:
  __p[4] = v66;
  operator delete(v66);
  v67 = *__p;
  if (!*__p)
  {
LABEL_13:
    operator delete(__p);
    _Unwind_Resume(a1);
  }
LABEL_12:
  __p[1] = v67;
  operator delete(v67);
  goto LABEL_13;
}

void Matrix<float>::MultAxBToC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  if (v6 == 1 && v7 == 1)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    unsigned int v7 = *(_DWORD *)(a2 + 20);
    if (v7 * v6) {
      operator new[]();
    }
    vDSPVsmul<float>(*(const float **)(a2 + 8), 1, *(const float **)(a1 + 8), 0, 1, 0);
    size_t v10 = 4 * v6 * (unint64_t)v7;
    BOOL v11 = *(void **)(a3 + 8);
    if (*(void *)(a3 + 32) < v10)
    {
      if (v11 && *(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
      operator new[]();
    }
    goto LABEL_24;
  }
  if (*(_DWORD *)(a2 + 20) == 1 && *(_DWORD *)(a2 + 16) == 1)
  {
    if (v7 * v6) {
      operator new[]();
    }
    vDSPVsmul<float>(*(const float **)(a1 + 8), 1, *(const float **)(a2 + 8), 0, 1, 0);
    size_t v10 = 4 * v6 * (unint64_t)v7;
    BOOL v11 = *(void **)(a3 + 8);
    if (*(void *)(a3 + 32) < v10)
    {
      if (v11 && *(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
      operator new[]();
    }
LABEL_24:
    *(_DWORD *)(a3 + 16) = v6;
    *(_DWORD *)(a3 + 20) = v7;
    memcpy(v11, 0, v10);
  }
  LODWORD(v12) = *(_DWORD *)(a1 + 20);
  vDSPMmul<float>(*(const float **)(a1 + 8), 1, *(const float **)(a2 + 8), 1, *(float **)(a3 + 8), 1, *(_DWORD *)(a1 + 16), *(_DWORD *)(a3 + 20), v12);
}

void sub_258FF2E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void vDSPMmul<float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7, int a8, vDSP_Length a9)
{
}

void vDSPMmov<float>(const float *a1, float *a2, int a3, int a4, int a5, int a6)
{
}

void vDSPMtranspose<float>(const float *a1, int a2, float *a3, int a4, int a5, int a6)
{
}

uint64_t peridot::PeridotDxpMacro::getPulseShape(uint64_t a1, uint64_t *a2, uint64_t *a3, float **a4, uint64_t a5, __int32 **a6)
{
  unint64_t v11 = a4[1] - *a4;
  unint64_t v12 = a6[1] - *a6;
  if (v11 <= v12)
  {
    if (v11 < v12) {
      a6[1] = &(*a6)[v11];
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)a6, v11 - v12);
  }
  uint64_t v13 = *a2 + 4;
  double v14 = (double)(unint64_t)((a2[1] - *a2) >> 2) + -2.0;
  int v100 = 1;
  unsigned int v101 = v14;
  char v102 = 0;
  uint64_t v103 = 4 * v14;
  uint64_t v98 = &unk_270717688;
  uint64_t v99 = v13;
  uint64_t v15 = *a3;
  uint64_t v16 = *(void *)(*a3 + 24 * a5 + 8) - *(void *)(*a3 + 24 * a5);
  unint64_t v17 = (v16 >> 2) + 2;
  if (v16 >> 2 == -2)
  {
    uint64_t v20 = 0;
  }
  else
  {
    if (v17 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v18 = (char *)operator new(4 * v17);
    float32x4_t v19 = v18;
    uint64_t v20 = &v18[4 * v17];
    if (v16 >= -7)
    {
      *(_DWORD *)float32x4_t v18 = 0;
      goto LABEL_19;
    }
    unint64_t v17 = (unint64_t)v18;
  }
  unint64_t v21 = (uint64_t)&v20[-v17] >> 1;
  if (v21 <= 1) {
    unint64_t v21 = 1;
  }
  if ((unint64_t)&v20[-v17] >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v22 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v22 = v21;
  }
  if (v22 >> 62) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  float32x4_t v19 = (char *)operator new(4 * v22);
  *(_DWORD *)float32x4_t v19 = 0;
  uint64_t v20 = &v19[4 * v22];
  if (v17)
  {
    operator delete((void *)v17);
    uint64_t v15 = *a3;
  }
LABEL_19:
  v23 = v19 + 4;
  uint64_t v24 = v15 + 24 * a5;
  unint64_t v26 = *(int **)v24;
  v25 = *(char **)(v24 + 8);
  int64_t v27 = v25 - (char *)v26;
  if (v25 - (char *)v26 < 1) {
    goto LABEL_33;
  }
  uint64_t v28 = v27 >> 2;
  if (v27 >> 2 <= (v20 - v23) >> 2)
  {
    if (v26 != (int *)v25) {
      memmove(v19 + 4, v26, v27);
    }
    v23 += 4 * v28;
LABEL_33:
    if (v23 >= v20) {
      goto LABEL_46;
    }
LABEL_34:
    *(_DWORD *)v23 = 1065353216;
    uint64_t v32 = v23 + 4;
    goto LABEL_65;
  }
  unint64_t v29 = v28 + 1;
  if ((unint64_t)(v28 + 1) >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  if ((v20 - v19) >> 1 > v29) {
    unint64_t v29 = (v20 - v19) >> 1;
  }
  if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v30 = v29;
  }
  if (v30)
  {
    if (v30 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    size_t v31 = (char *)operator new(4 * v30);
  }
  else
  {
    size_t v31 = 0;
  }
  uint64_t v33 = v31 + 4;
  v23 = &v31[4 * v28 + 4];
  unint64_t v34 = (v28 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  if (v34 < 7 || (unint64_t)(v31 - (char *)v26 + 4) < 0x20) {
    goto LABEL_42;
  }
  unint64_t v35 = v34 + 1;
  uint64_t v36 = 4 * (v35 & 0x7FFFFFFFFFFFFFF8);
  uint64_t v33 = (_DWORD *)((char *)v33 + v36);
  v37 = (long long *)(v26 + 4);
  unint64_t v38 = v31 + 20;
  uint64_t v39 = v35 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    long long v40 = *v37;
    *(v38 - 1) = *(v37 - 1);
    *unint64_t v38 = v40;
    v37 += 2;
    v38 += 2;
    v39 -= 8;
  }
  while (v39);
  if (v35 != (v35 & 0x7FFFFFFFFFFFFFF8))
  {
    unint64_t v26 = (int *)((char *)v26 + v36);
    do
    {
LABEL_42:
      int v41 = *v26++;
      *v33++ = v41;
    }
    while (v33 != (_DWORD *)v23);
  }
  uint64_t v42 = 0;
  uint64_t v20 = &v31[4 * v30];
  do
  {
    *(_DWORD *)&v31[v42] = *(_DWORD *)&v19[v42];
    v42 -= 4;
  }
  while (v42 != -4);
  v43 = v31;
  operator delete(v19);
  float32x4_t v19 = v43;
  if (v23 < v20) {
    goto LABEL_34;
  }
LABEL_46:
  uint64_t v44 = (v23 - v19) >> 2;
  unint64_t v45 = v44 + 1;
  if ((unint64_t)(v44 + 1) >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  if ((v20 - v19) >> 1 > v45) {
    unint64_t v45 = (v20 - v19) >> 1;
  }
  if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v45 = 0x3FFFFFFFFFFFFFFFLL;
  }
  if (v45)
  {
    if (v45 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v46 = operator new(4 * v45);
  }
  else
  {
    v46 = 0;
  }
  v47 = &v46[4 * v44];
  *(_DWORD *)v47 = 1065353216;
  uint64_t v32 = v47 + 4;
  if (v23 == v19) {
    goto LABEL_64;
  }
  unint64_t v48 = v23 - v19 - 4;
  if (v48 >= 0x2C)
  {
    if ((unint64_t)(v19 - v46) >= 0x20)
    {
      uint64_t v50 = (v48 >> 2) + 1;
      float32x4_t v49 = &v23[-4 * (v50 & 0x7FFFFFFFFFFFFFF8)];
      v51 = &v46[4 * v44 - 16];
      v52 = v23 - 16;
      uint64_t v53 = v50 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v54 = *(_OWORD *)v52;
        *(v51 - 1) = *((_OWORD *)v52 - 1);
        _OWORD *v51 = v54;
        v51 -= 2;
        v52 -= 32;
        v53 -= 8;
      }
      while (v53);
      v47 -= 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
      if (v50 == (v50 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_64;
      }
    }
    else
    {
      float32x4_t v49 = v23;
    }
  }
  else
  {
    float32x4_t v49 = v23;
  }
  do
  {
    int v55 = *((_DWORD *)v49 - 1);
    v49 -= 4;
    *((_DWORD *)v47 - 1) = v55;
    v47 -= 4;
  }
  while (v49 != v19);
LABEL_64:
  operator delete(v19);
  float32x4_t v19 = v47;
LABEL_65:
  int v94 = 1;
  int v95 = (unint64_t)(v32 - v19) >> 2;
  char v96 = 0;
  uint64_t v97 = (v32 - v19) & 0x3FFFFFFFCLL;
  uint64_t v92 = &unk_270717688;
  uint64_t v93 = v19;
  v56 = *a4;
  unint64_t v57 = (char *)a4[1] - (char *)*a4;
  int v88 = 1;
  unsigned int v89 = v57 >> 2;
  char v90 = 0;
  uint64_t v91 = v57 & 0x3FFFFFFFCLL;
  uint64_t v86 = &unk_270717688;
  uint64_t v87 = v56;
  v58 = *a6;
  int v82 = 1;
  unsigned int v83 = v89;
  char v84 = 0;
  uint64_t v85 = v57 & 0x3FFFFFFFCLL;
  int v80 = &unk_270717688;
  v81 = v58;
  Interp1<float,LinearInterpolator<float>>((uint64_t)&v98, (uint64_t)&v92, v56, v89, (uint64_t)&v80);
  if (v83)
  {
    unint64_t v60 = 0;
    uint64_t v61 = *a4;
    uint64_t v62 = *a2;
    uint64_t v63 = ((a2[1] - *a2) >> 2) - 2;
    uint64_t v64 = 4 * v83;
    do
    {
      v59.i64[0] = 0;
      if (v61[v60 / 4] >= *(float *)(v62 + 4)) {
        v59.i32[0] = v81[v60 / 4];
      }
      v81[v60 / 4] = v59.i32[0];
      float v65 = 1.0;
      if (v61[v60 / 4] <= *(float *)(v62 + 4 * v63)) {
        float v65 = *(float *)&v81[v60 / 4];
      }
      *(float *)&v81[v60 / 4] = v65;
      v60 += 4;
    }
    while (v64 != v60);
  }
  v67 = *a6;
  unint64_t v66 = a6[1];
  uint64_t v68 = v66 - *a6;
  unint64_t v69 = v68 - 1;
  if (v68 != 1)
  {
    v59.i32[0] = *v67;
    if (v69 > 7)
    {
      unint64_t v70 = v69 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v59 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0);
      v71 = v67 + 4;
      unint64_t v72 = v69 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v73 = *(float32x4_t *)(v71 - 3);
        float32x4_t v74 = (float32x4_t)vextq_s8((int8x16_t)v59, (int8x16_t)v73, 0xCuLL);
        float32x4_t v59 = *(float32x4_t *)(v71 + 1);
        *((float32x4_t *)v71 - 1) = vsubq_f32(v73, v74);
        *(float32x4_t *)v71 = vsubq_f32(v59, (float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v59, 0xCuLL));
        v71 += 8;
        v72 -= 8;
      }
      while (v72);
      if (v69 == v70) {
        goto LABEL_81;
      }
      v59.i32[0] = v59.i32[3];
    }
    else
    {
      unint64_t v70 = 0;
    }
    uint64_t v75 = (float *)&v67[v70 + 1];
    unint64_t v76 = ~v70 + v68;
    do
    {
      float v77 = *v75;
      *(v75 - 1) = *v75 - v59.f32[0];
      ++v75;
      v59.f32[0] = v77;
      --v76;
    }
    while (v76);
  }
LABEL_81:
  a6[1] = v66 - 1;
  int v80 = &unk_270717340;
  if (v81) {
    BOOL v78 = v84 == 0;
  }
  else {
    BOOL v78 = 1;
  }
  if (!v78) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v86 = &unk_270717340;
  if (v87 && v90) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v92 = &unk_270717340;
  if (v93 && v96) {
    MEMORY[0x25A2D62A0]();
  }
  if (v19) {
    operator delete(v19);
  }
  uint64_t v98 = &unk_270717340;
  uint64_t result = v99;
  if (v99)
  {
    if (v102) {
      return MEMORY[0x25A2D62A0]();
    }
  }
  return result;
}

void sub_258FF35F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  operator delete(v25);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void std::vector<float>::__append(uint64_t a1, unint64_t a2)
{
  v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  unsigned int v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      unsigned int v6 = &v5[4 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unsigned int v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + a2;
    if (v10 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    double v14 = &v13[4 * v9];
    size_t v15 = 4 * a2;
    uint64_t v16 = &v13[4 * v12];
    bzero(v14, v15);
    unint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      unsigned int v6 = &v5[-4 * (v19 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v20 = &v13[4 * v9 - 16];
      unint64_t v21 = v5 - 16;
      uint64_t v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      v14 -= 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v24 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v24;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

float *Interp1<float,LinearInterpolator<float>>(uint64_t a1, uint64_t a2, float *a3, int a4, uint64_t a5)
{
  v5 = a3;
  uint64_t v7 = *(unsigned int *)(a1 + 20);
  uint64_t v8 = *(float **)(a1 + 8);
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t result = *(float **)(a5 + 8);
  if (*(void *)(a5 + 32) < 4 * (unint64_t)a4)
  {
    if (result)
    {
      if (*(unsigned char *)(a5 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a5 + 16) = 1;
  *(_DWORD *)(a5 + 20) = a4;
  if (a4 >= 1)
  {
    uint64_t v11 = a4;
    float v12 = *v8;
    float v13 = v8[v7 - 1];
    uint64_t v14 = *(unsigned int *)(a1 + 20);
    int v15 = v14 - 1;
    uint64_t v16 = v9 + 4 * v7;
    unsigned int v17 = v7 - 1;
    LODWORD(v18) = v7 - 2;
    if ((int)v14 - 1 >= 100)
    {
      for (uint64_t i = 0; i != a4; result[i++] = v29)
      {
        float v30 = a3[i];
        float v29 = 0.0;
        if (v30 <= v13 && v30 >= v12)
        {
          int v27 = 0;
          int v32 = v15;
          while (1)
          {
            int v33 = (v32 + v27) >> 1;
            float v34 = *(float *)(*(void *)(a1 + 8) + 4 * v33);
            if (v34 == v30) {
              break;
            }
            if (v34 <= v30) {
              int v27 = v33 + 1;
            }
            else {
              int v32 = v33 - 1;
            }
            if (v27 > v32)
            {
              if (v30 >= v13) {
                goto LABEL_46;
              }
              goto LABEL_27;
            }
          }
          int v27 = (v32 + v27) >> 1;
          if (v30 >= v13)
          {
LABEL_46:
            float v29 = *(float *)(v16 - 4);
            continue;
          }
LABEL_27:
          if (v32 < v27) {
            int v27 = v32;
          }
          unsigned int v28 = v27 & ~(v27 >> 31);
          if (v17 <= v28) {
            unsigned int v28 = v7 - 2;
          }
          float v29 = (float)((float)((float)(v30 - v8[v28])
                              * (float)(*(float *)(*(void *)(a2 + 8) + 4 * (v28 + 1))
                                      - *(float *)(*(void *)(a2 + 8) + 4 * v28)))
                      / (float)(v8[v28 + 1] - v8[v28]))
              + *(float *)(*(void *)(a2 + 8) + 4 * v28);
        }
      }
    }
    else if ((int)v14 < 1)
    {
      if (v7 == 1) {
        uint64_t v18 = v18;
      }
      else {
        uint64_t v18 = 0;
      }
      uint64_t v35 = (v18 + 1);
      uint64_t v36 = v18;
      uint64_t v37 = v35;
      do
      {
        float v39 = *v5;
        float v38 = 0.0;
        if (*v5 <= v13 && v39 >= v12)
        {
          if (v39 < v13) {
            float v38 = (float)((float)((float)(v39 - v8[v36])
          }
                                * (float)(*(float *)(*(void *)(a2 + 8) + v37 * 4)
                                        - *(float *)(*(void *)(a2 + 8) + v36 * 4)))
                        / (float)(v8[v37] - v8[v36]))
                + *(float *)(*(void *)(a2 + 8) + v36 * 4);
          else {
            float v38 = *(float *)(v16 - 4);
          }
        }
        *result++ = v38;
        ++v5;
        --v11;
      }
      while (v11);
    }
    else
    {
      for (uint64_t j = 0; j != a4; result[j++] = v22)
      {
        float v23 = a3[j];
        float v22 = 0.0;
        if (v23 <= v13 && v23 >= v12)
        {
          uint64_t v25 = 0;
          while (*(float *)(*(void *)(a1 + 8) + 4 * v25) <= v23)
          {
            if (v14 == ++v25)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
          if (v23 < v13)
          {
            BOOL v20 = v25 != 0;
            unsigned int v21 = v25 - 1;
            if (!v20) {
              unsigned int v21 = 0;
            }
            if (v17 <= v21) {
              unsigned int v21 = v7 - 2;
            }
            float v22 = (float)((float)((float)(v23 - v8[v21])
                                * (float)(*(float *)(*(void *)(a2 + 8) + 4 * (v21 + 1))
                                        - *(float *)(*(void *)(a2 + 8) + 4 * v21)))
                        / (float)(v8[v21 + 1] - v8[v21]))
                + *(float *)(*(void *)(a2 + 8) + 4 * v21);
          }
          else
          {
            float v22 = *(float *)(v16 - 4);
          }
        }
      }
    }
  }
  return result;
}

void std::vector<peridot::DoubleStaticArray<float,61,45>>::__append(char **a1, unint64_t a2)
{
  v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0x82FA0BE82FA0BE83 * ((v4 - v5) >> 8) >= a2)
  {
    size_t v12 = 11008 * ((11008 * a2 - 11008) / 0x2B00) + 11008;
    bzero(a1[1], v12);
    a1[1] = &v5[v12];
  }
  else
  {
    unsigned int v6 = *a1;
    unint64_t v7 = 0x82FA0BE82FA0BE83 * ((v5 - *a1) >> 8);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x5F417D05F417DLL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0x82FA0BE82FA0BE83 * ((v4 - v6) >> 8);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x2FA0BE82FA0BELL) {
      unint64_t v10 = 0x5F417D05F417DLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x5F417D05F417DLL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(11008 * v10, (std::align_val_t)0x40uLL);
    }
    else
    {
      uint64_t v11 = 0;
    }
    float v13 = &v11[11008 * v7];
    uint64_t v14 = &v11[11008 * v10];
    size_t v15 = 11008 * ((11008 * a2 - 11008) / 0x2B00) + 11008;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        v5 -= 11008;
        v13 -= 11008;
        memcpy(v13, v5, 0x2B00uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      JUMPOUT(0x25A2D62C0);
    }
  }
}

void std::vector<peridot::DoubleStaticArray<float,61,2>>::__append(char **a1, unint64_t a2)
{
  v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 9)
  {
    unint64_t v12 = a2 << 9;
    bzero(a1[1], a2 << 9);
    a1[1] = &v5[v12];
  }
  else
  {
    unsigned int v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 9;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 55) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 8 > v8) {
      unint64_t v8 = v9 >> 8;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFE00) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 55) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(v10 << 9, (std::align_val_t)0x40uLL);
    }
    else
    {
      uint64_t v11 = 0;
    }
    float v13 = &v11[512 * v7];
    size_t v14 = a2 << 9;
    size_t v15 = &v11[512 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        v5 -= 512;
        v13 -= 512;
        memcpy(v13, v5, 0x200uLL);
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      JUMPOUT(0x25A2D62C0);
    }
  }
}

void std::vector<std::vector<float>>::__append(uint64_t a1, unint64_t a2)
{
  v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    float v13 = &v11[24 * v7];
    size_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        unsigned int v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        void *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void **)a1;
      uint64_t v19 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        BOOL v20 = v19;
        do
        {
          float v22 = (void *)*(v20 - 3);
          v20 -= 3;
          unsigned int v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          uint64_t v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::vector<std::vector<peridot::DoubleStaticArray<float,61,45>>>::__append(uint64_t a1, unint64_t a2)
{
  v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    float v13 = &v11[24 * v7];
    size_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    uint64_t v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        unsigned int v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        void *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void **)a1;
      uint64_t v19 = *(void **)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        BOOL v20 = v19;
        do
        {
          uint64_t v22 = *(v20 - 3);
          v20 -= 3;
          uint64_t v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            MEMORY[0x25A2D62C0]();
          }
          uint64_t v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void peridot::PeridotDXPCalib::init(peridot::PeridotDXPCalib *this, const _PeridotCalib *a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2, a3, a4);
  unint64_t v7 = v5;
  uint64_t v8 = v4;
  uint64_t v293 = *MEMORY[0x263EF8340];
  *(_DWORD *)(v4 + 6) = 16843009;
  float v267 = (float *)(v5 + 343484);
  unint64_t v9 = v5 + 36396;
  uint64_t v10 = v4 + 40456;
  *(_DWORD *)(v4 + 3516) = 8;
  float32x4_t v274 = v6;
  unint64_t v275 = (void *)(v4 + 3436);
  *(void *)(v4 + 3508) = 0x900000001;
  *(unsigned char *)(v4 + 41028) = 0;
  *(void *)(v4 + 42424) = 0;
  *(unsigned char *)(v4 + 42432) = 0;
  *(unsigned char *)(v4 + 42429) = 1;
  uint64_t v271 = v4;
  v276 = v5;
  if (v5)
  {
    uint64_t v11 = v6;
    v272 = (unsigned char *)(v4 + 42424);
    unint64_t v273 = (unsigned __int8 *)(v5 + 402522);
    *(unsigned char *)(v4 + 41028) = v5[402524];
    size_t v12 = operator new(0x100uLL);
    float v13 = v12 + 16;
    _OWORD *v12 = 0u;
    v12[1] = 0u;
    v12[2] = 0u;
    v12[3] = 0u;
    v12[4] = 0u;
    v12[5] = 0u;
    v12[6] = 0u;
    v12[7] = 0u;
    v12[8] = 0u;
    v12[9] = 0u;
    v12[10] = 0u;
    v12[11] = 0u;
    v12[12] = 0u;
    v12[13] = 0u;
    v12[14] = 0u;
    v12[15] = 0u;
    size_t v14 = *(void **)(v8 + 3552);
    if (v14)
    {
      *(void *)(v8 + 3560) = v14;
      operator delete(v14);
      *(void *)(v8 + 3552) = 0;
      *(void *)(v8 + 3560) = 0;
      *(void *)(v8 + 3568) = 0;
    }
    *(void *)(v8 + 3552) = v12;
    *(void *)(v8 + 3560) = v13;
    *(void *)(v8 + 3568) = v13;
    size_t v15 = operator new(0x100uLL);
    uint64_t v16 = v15 + 16;
    _OWORD *v15 = 0u;
    v15[1] = 0u;
    v15[2] = 0u;
    v15[3] = 0u;
    v15[4] = 0u;
    v15[5] = 0u;
    v15[6] = 0u;
    v15[7] = 0u;
    v15[8] = 0u;
    v15[9] = 0u;
    v15[10] = 0u;
    v15[11] = 0u;
    v15[12] = 0u;
    v15[13] = 0u;
    v15[14] = 0u;
    v15[15] = 0u;
    unsigned int v17 = *(void **)(v8 + 3528);
    if (v17)
    {
      *(void *)(v8 + 3536) = v17;
      operator delete(v17);
      *(void *)(v8 + 3528) = 0;
      *(void *)(v8 + 3536) = 0;
      *(void *)(v8 + 3544) = 0;
      size_t v12 = *(_OWORD **)(v8 + 3552);
    }
    *(void *)(v8 + 3528) = v15;
    *(void *)(v8 + 3536) = v16;
    *(void *)(v8 + 3544) = v16;
    long long v18 = &v7[788 * (void)v11];
    uint64_t v19 = (long long *)(v18 + 36444);
    long long v20 = *(_OWORD *)(v18 + 36652);
    v15[12] = *(_OWORD *)(v18 + 36636);
    v15[13] = v20;
    long long v21 = *(_OWORD *)(v18 + 36684);
    v15[14] = *(_OWORD *)(v18 + 36668);
    v15[15] = v21;
    long long v22 = *(_OWORD *)(v18 + 36588);
    v15[8] = *(_OWORD *)(v18 + 36572);
    v15[9] = v22;
    long long v23 = *(_OWORD *)(v18 + 36620);
    v15[10] = *(_OWORD *)(v18 + 36604);
    v15[11] = v23;
    long long v24 = *(_OWORD *)(v18 + 36524);
    v15[4] = *(_OWORD *)(v18 + 36508);
    v15[5] = v24;
    long long v25 = *(_OWORD *)(v18 + 36556);
    v15[6] = *(_OWORD *)(v18 + 36540);
    v15[7] = v25;
    long long v26 = *(_OWORD *)(v18 + 36460);
    _OWORD *v15 = *(_OWORD *)(v18 + 36444);
    v15[1] = v26;
    long long v27 = *(_OWORD *)(v18 + 36492);
    v15[2] = *(_OWORD *)(v18 + 36476);
    v15[3] = v27;
    unsigned int v28 = (long long *)(v18 + 36956);
    if (*v273 <= 0x64u) {
      float v29 = (long long *)(v18 + 36444);
    }
    else {
      float v29 = (long long *)(v18 + 36956);
    }
    long long v30 = *v29;
    long long v31 = v29[1];
    long long v32 = v29[3];
    v12[2] = v29[2];
    v12[3] = v32;
    _OWORD *v12 = v30;
    v12[1] = v31;
    long long v33 = v29[4];
    long long v34 = v29[5];
    long long v35 = v29[7];
    v12[6] = v29[6];
    v12[7] = v35;
    v12[4] = v33;
    v12[5] = v34;
    long long v36 = v29[8];
    long long v37 = v29[9];
    long long v38 = v29[11];
    v12[10] = v29[10];
    v12[11] = v38;
    v12[8] = v36;
    v12[9] = v37;
    long long v39 = v29[12];
    long long v40 = v29[13];
    long long v41 = v29[15];
    v12[14] = v29[14];
    v12[15] = v41;
    v12[12] = v39;
    v12[13] = v40;
    uint64_t v42 = operator new(0x100uLL);
    v43 = v42 + 16;
    _OWORD *v42 = 0u;
    v42[1] = 0u;
    v42[2] = 0u;
    v42[3] = 0u;
    v42[4] = 0u;
    v42[5] = 0u;
    v42[6] = 0u;
    v42[7] = 0u;
    v42[8] = 0u;
    v42[9] = 0u;
    v42[10] = 0u;
    v42[11] = 0u;
    v42[12] = 0u;
    v42[13] = 0u;
    v42[14] = 0u;
    v42[15] = 0u;
    uint64_t v44 = *(void **)(v8 + 3576);
    if (v44)
    {
      *(void *)(v8 + 3584) = v44;
      operator delete(v44);
      *(void *)(v8 + 3576) = 0;
      *(void *)(v8 + 3584) = 0;
      *(void *)(v8 + 3592) = 0;
    }
    *(void *)(v8 + 3576) = v42;
    *(void *)(v8 + 3584) = v43;
    *(void *)(v8 + 3592) = v43;
    unint64_t v45 = operator new(0x100uLL);
    v46 = v45 + 16;
    *unint64_t v45 = 0u;
    v45[1] = 0u;
    v45[2] = 0u;
    v45[3] = 0u;
    v45[4] = 0u;
    v45[5] = 0u;
    v45[6] = 0u;
    v45[7] = 0u;
    v45[8] = 0u;
    v45[9] = 0u;
    v45[10] = 0u;
    v45[11] = 0u;
    v45[12] = 0u;
    v45[13] = 0u;
    v45[14] = 0u;
    v45[15] = 0u;
    v47 = (void *)(v8 + 3600);
    unint64_t v48 = *(void **)(v8 + 3600);
    if (v48)
    {
      *(void *)(v8 + 3608) = v48;
      operator delete(v48);
      void *v47 = 0;
      *(void *)(v8 + 3608) = 0;
      *(void *)(v8 + 3616) = 0;
    }
    *(void *)(v8 + 3600) = v45;
    *(void *)(v8 + 3608) = v46;
    *(void *)(v8 + 3616) = v46;
    float32x4_t v49 = operator new(0x100uLL);
    uint64_t v50 = v49 + 16;
    *float32x4_t v49 = 0u;
    v49[1] = 0u;
    v49[2] = 0u;
    v49[3] = 0u;
    v49[4] = 0u;
    v49[5] = 0u;
    v49[6] = 0u;
    v49[7] = 0u;
    v49[8] = 0u;
    v49[9] = 0u;
    v49[10] = 0u;
    v49[11] = 0u;
    v49[12] = 0u;
    v49[13] = 0u;
    v49[14] = 0u;
    v49[15] = 0u;
    v51 = (void *)(v8 + 3624);
    v52 = *(void **)(v8 + 3624);
    if (v52)
    {
      *(void *)(v8 + 3632) = v52;
      operator delete(v52);
      void *v51 = 0;
      *(void *)(v8 + 3632) = 0;
      *(void *)(v8 + 3640) = 0;
    }
    *(void *)(v8 + 3624) = v49;
    *(void *)(v8 + 3632) = v50;
    *(void *)(v8 + 3640) = v50;
    uint64_t v53 = operator new(0x100uLL);
    long long v54 = v53 + 16;
    *uint64_t v53 = 0u;
    v53[1] = 0u;
    v53[2] = 0u;
    v53[3] = 0u;
    v53[4] = 0u;
    v53[5] = 0u;
    v53[6] = 0u;
    v53[7] = 0u;
    v53[8] = 0u;
    v53[9] = 0u;
    v53[10] = 0u;
    v53[11] = 0u;
    v53[12] = 0u;
    v53[13] = 0u;
    v53[14] = 0u;
    v53[15] = 0u;
    int v55 = *(void **)(v8 + 3648);
    if (v55)
    {
      *(void *)(v8 + 3656) = v55;
      operator delete(v55);
      *(void *)(v8 + 3648) = 0;
      *(void *)(v8 + 3656) = 0;
      *(void *)(v8 + 3664) = 0;
    }
    *(void *)(v8 + 3648) = v53;
    *(void *)(v8 + 3656) = v54;
    *(void *)(v8 + 3664) = v54;
    unint64_t v57 = v273;
    v56 = v274;
    v58 = *(_OWORD **)(v8 + 3576);
    unint64_t v7 = v276;
    float32x4_t v59 = &v276[788 * (void)v274 + 42748];
    if (*v273 < 0x65u)
    {
      long long v102 = *v19;
      long long v103 = v19[1];
      long long v104 = v19[3];
      v58[2] = v19[2];
      v58[3] = v104;
      _OWORD *v58 = v102;
      v58[1] = v103;
      long long v105 = v19[4];
      long long v106 = v19[5];
      long long v107 = v19[7];
      v58[6] = v19[6];
      v58[7] = v107;
      v58[4] = v105;
      v58[5] = v106;
      long long v108 = v19[8];
      long long v109 = v19[9];
      long long v110 = v19[11];
      v58[10] = v19[10];
      v58[11] = v110;
      v58[8] = v108;
      v58[9] = v109;
      long long v111 = v19[12];
      long long v112 = v19[13];
      long long v113 = v19[15];
      v58[14] = v19[14];
      v58[15] = v113;
      v58[12] = v111;
      v58[13] = v112;
      uint64_t v114 = (_OWORD *)*v47;
      long long v115 = *v19;
      long long v116 = v19[1];
      long long v117 = v19[3];
      v114[2] = v19[2];
      v114[3] = v117;
      *uint64_t v114 = v115;
      v114[1] = v116;
      long long v118 = v19[4];
      long long v119 = v19[5];
      long long v120 = v19[7];
      v114[6] = v19[6];
      v114[7] = v120;
      v114[4] = v118;
      v114[5] = v119;
      long long v121 = v19[8];
      long long v122 = v19[9];
      long long v123 = v19[11];
      v114[10] = v19[10];
      v114[11] = v123;
      v114[8] = v121;
      v114[9] = v122;
      long long v124 = v19[12];
      long long v125 = v19[13];
      long long v126 = v19[15];
      v114[14] = v19[14];
      v114[15] = v126;
      v114[12] = v124;
      v114[13] = v125;
      unint64_t v127 = (_OWORD *)*v51;
      long long v128 = *(_OWORD *)v59;
      long long v129 = *((_OWORD *)v59 + 1);
      long long v130 = *((_OWORD *)v59 + 3);
      v127[2] = *((_OWORD *)v59 + 2);
      v127[3] = v130;
      *unint64_t v127 = v128;
      v127[1] = v129;
      long long v131 = *((_OWORD *)v59 + 4);
      long long v132 = *((_OWORD *)v59 + 5);
      long long v133 = *((_OWORD *)v59 + 7);
      v127[6] = *((_OWORD *)v59 + 6);
      v127[7] = v133;
      v127[4] = v131;
      v127[5] = v132;
      long long v134 = *((_OWORD *)v59 + 8);
      long long v135 = *((_OWORD *)v59 + 9);
      long long v136 = *((_OWORD *)v59 + 11);
      v127[10] = *((_OWORD *)v59 + 10);
      v127[11] = v136;
      v127[8] = v134;
      v127[9] = v135;
      long long v137 = *((_OWORD *)v59 + 12);
      long long v138 = *((_OWORD *)v59 + 13);
      long long v139 = *((_OWORD *)v59 + 15);
      v127[14] = *((_OWORD *)v59 + 14);
      v127[15] = v139;
      v127[12] = v137;
      v127[13] = v138;
    }
    else
    {
      long long v60 = *v28;
      long long v61 = v28[1];
      long long v62 = v28[3];
      v58[2] = v28[2];
      v58[3] = v62;
      _OWORD *v58 = v60;
      v58[1] = v61;
      long long v63 = v28[4];
      long long v64 = v28[5];
      long long v65 = v28[7];
      v58[6] = v28[6];
      v58[7] = v65;
      v58[4] = v63;
      v58[5] = v64;
      long long v66 = v28[8];
      long long v67 = v28[9];
      long long v68 = v28[11];
      v58[10] = v28[10];
      v58[11] = v68;
      v58[8] = v66;
      v58[9] = v67;
      long long v69 = v28[12];
      long long v70 = v28[13];
      long long v71 = v28[15];
      v58[14] = v28[14];
      v58[15] = v71;
      v58[12] = v69;
      v58[13] = v70;
      unint64_t v72 = (_OWORD *)*v47;
      long long v73 = *v19;
      long long v74 = v19[1];
      long long v75 = v19[3];
      v72[2] = v19[2];
      v72[3] = v75;
      _OWORD *v72 = v73;
      v72[1] = v74;
      long long v76 = v19[4];
      long long v77 = v19[5];
      long long v78 = v19[7];
      v72[6] = v19[6];
      v72[7] = v78;
      v72[4] = v76;
      v72[5] = v77;
      long long v79 = v19[8];
      long long v80 = v19[9];
      long long v81 = v19[11];
      v72[10] = v19[10];
      v72[11] = v81;
      v72[8] = v79;
      v72[9] = v80;
      long long v82 = v19[12];
      long long v83 = v19[13];
      long long v84 = v19[15];
      v72[14] = v19[14];
      v72[15] = v84;
      v72[12] = v82;
      v72[13] = v83;
      uint64_t v85 = (_OWORD *)*v51;
      uint64_t v86 = &v276[788 * (void)v274 + 42748];
      long long v87 = *((_OWORD *)v86 + 32);
      long long v88 = *((_OWORD *)v86 + 33);
      long long v89 = *((_OWORD *)v86 + 35);
      v85[2] = *((_OWORD *)v86 + 34);
      v85[3] = v89;
      *uint64_t v85 = v87;
      v85[1] = v88;
      long long v90 = *((_OWORD *)v86 + 36);
      long long v91 = *((_OWORD *)v86 + 37);
      long long v92 = *((_OWORD *)v86 + 39);
      v85[6] = *((_OWORD *)v86 + 38);
      v85[7] = v92;
      v85[4] = v90;
      v85[5] = v91;
      long long v93 = *((_OWORD *)v86 + 40);
      long long v94 = *((_OWORD *)v86 + 41);
      long long v95 = *((_OWORD *)v86 + 43);
      v85[10] = *((_OWORD *)v86 + 42);
      v85[11] = v95;
      v85[8] = v93;
      v85[9] = v94;
      long long v96 = *((_OWORD *)v86 + 44);
      long long v97 = *((_OWORD *)v86 + 45);
      long long v98 = *((_OWORD *)v86 + 47);
      v85[14] = *((_OWORD *)v86 + 46);
      v85[15] = v98;
      v85[12] = v96;
      v85[13] = v97;
    }
    unint64_t v140 = *(_OWORD **)(v8 + 3648);
    long long v141 = *(_OWORD *)v59;
    long long v142 = *((_OWORD *)v59 + 1);
    long long v143 = *((_OWORD *)v59 + 3);
    v140[2] = *((_OWORD *)v59 + 2);
    v140[3] = v143;
    *unint64_t v140 = v141;
    v140[1] = v142;
    long long v144 = *((_OWORD *)v59 + 4);
    long long v145 = *((_OWORD *)v59 + 5);
    long long v146 = *((_OWORD *)v59 + 7);
    v140[6] = *((_OWORD *)v59 + 6);
    v140[7] = v146;
    v140[4] = v144;
    v140[5] = v145;
    long long v147 = *((_OWORD *)v59 + 8);
    long long v148 = *((_OWORD *)v59 + 9);
    long long v149 = *((_OWORD *)v59 + 11);
    v140[10] = *((_OWORD *)v59 + 10);
    v140[11] = v149;
    v140[8] = v147;
    v140[9] = v148;
    long long v150 = *((_OWORD *)v59 + 12);
    long long v151 = *((_OWORD *)v59 + 13);
    long long v152 = *((_OWORD *)v59 + 15);
    v140[14] = *((_OWORD *)v59 + 14);
    v140[15] = v152;
    v140[12] = v150;
    v140[13] = v151;
    long long v153 = *(_OWORD *)&v276[112 * (void)v274 + 342588];
    long long v154 = *(_OWORD *)&v276[112 * (void)v274 + 342620];
    *(_OWORD *)(v8 + 4068) = *(_OWORD *)&v276[112 * (void)v274 + 342604];
    *(_OWORD *)(v8 + 4084) = v154;
    *(_OWORD *)(v8 + 4052) = v153;
    long long v155 = *(_OWORD *)&v276[112 * (void)v274 + 342636];
    long long v156 = *(_OWORD *)&v276[112 * (void)v274 + 342652];
    long long v157 = *(_OWORD *)&v276[112 * (void)v274 + 342684];
    *(_OWORD *)(v8 + 4132) = *(_OWORD *)&v276[112 * (void)v274 + 342668];
    *(_OWORD *)(v8 + 4148) = v157;
    *(_OWORD *)(v8 + 4100) = v155;
    *(_OWORD *)(v8 + 4116) = v156;
    *(float *)(v8 + 4164) = *v267 * 0.001;
    uint64_t v158 = v276 + 49068;
    unint64_t v159 = (float *)&v276[36688 * (void)v274 + 49068];
    char v160 = 1;
    uint64_t v161 = 8;
    do
    {
      while (v159[5] != 0.0
           || v159[12] != 0.0
           || v159[19] != 0.0
           || v159[26] != 0.0
           || v159[33] != 0.0
           || v159[40] != 0.0
           || v159[47] != 0.0
           || v159[54] != 0.0
           || v159[61] != 0.0
           || v159[68] != 0.0
           || v159[75] != 0.0
           || v159[82] != 0.0
           || v159[89] != 0.0)
      {
        char v160 = 0;
        if (!--v161) {
          goto LABEL_42;
        }
      }
      if (v159[96] != 0.0) {
        char v160 = 0;
      }
      uint64_t v8 = v271;
      unint64_t v57 = v273;
      v56 = v274;
      unint64_t v7 = v276;
      --v161;
    }
    while (v161);
LABEL_42:
    if (v57[1] <= 0x65u || (v162 = &v158[36688 * (void)v56], *((float *)v162 + 98) == 0.0))
    {
      *(void *)(v10 + 16) = 0;
      *(_DWORD *)(v10 + 12) = 0;
      bzero((void *)(v8 + 4168), 0x8DC0uLL);
    }
    else
    {
      v163 = v162 + 392;
      *(_DWORD *)(v10 + 12) = 1065353216;
      *(_DWORD *)(v10 + 16) = *v163;
      *(_DWORD *)(v10 + 20) = *v163;
      memcpy((void *)(v8 + 4168), &v158[36688 * (void)v56 + 400], 0x8DC0uLL);
    }
    if (!((v57[1] < 0x66u) | v160 & 1))
    {
      v272[8] = 0;
      *(void *)v272 = 0;
    }
    *(_DWORD *)(v10 + 1964) = v9[6];
    int v100 = *(char **)(v8 + 3560);
    uint64_t v99 = *(_DWORD **)(v8 + 3552);
  }
  else
  {
    uint64_t v99 = operator new(0xA4uLL);
    v99[40] = 1058826879;
    int v100 = (char *)(v99 + 41);
    *((_OWORD *)v99 + 6) = xmmword_2591254A8;
    *((_OWORD *)v99 + 7) = unk_2591254B8;
    *((_OWORD *)v99 + 8) = xmmword_2591254C8;
    *((_OWORD *)v99 + 9) = unk_2591254D8;
    *((_OWORD *)v99 + 2) = xmmword_259125468;
    *((_OWORD *)v99 + 3) = unk_259125478;
    *((_OWORD *)v99 + 4) = xmmword_259125488;
    *((_OWORD *)v99 + 5) = unk_259125498;
    *(_OWORD *)uint64_t v99 = peridot::gPulseShape;
    *((_OWORD *)v99 + 1) = unk_259125458;
    unsigned int v101 = *(void **)(v8 + 3552);
    if (v101)
    {
      *(void *)(v8 + 3560) = v101;
      operator delete(v101);
      *(void *)(v8 + 3552) = 0;
      *(void *)(v8 + 3560) = 0;
      *(void *)(v8 + 3568) = 0;
    }
    *(void *)(v8 + 3552) = v99;
    *(void *)(v8 + 3560) = v100;
    *(void *)(v8 + 3568) = v100;
    *(_DWORD *)(v10 + 1964) = 1065353216;
  }
  uint64_t v164 = v100 - (char *)v99;
  unint64_t v165 = (v164 >> 2) + 3;
  if (v164 >> 2 == -3)
  {
    float32x4_t v166 = 0;
    v167 = 0;
  }
  else
  {
    if (v165 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v166 = (float *)operator new(4 * v165);
    v167 = &v166[v165];
    bzero(v166, (v164 & 0xFFFFFFFFFFFFFFFCLL) + 12);
  }
  long long v292 = xmmword_259120E80;
  conv<float,float const>((uint64_t)v99, v164 >> 2, (float *)&v292, 4uLL, v166, 1);
  size_t v168 = (char *)v167 - (char *)v166;
  uint64_t v169 = v167 - v166;
  v270 = v166;
  if (v167 == v166)
  {
    float32x4_t v170 = 0;
    v288 = 0;
    v289 = 0;
    v287 = 0;
  }
  else
  {
    if ((v168 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    float v266 = operator new((char *)v167 - (char *)v166);
    memcpy(v266, v166, (char *)v167 - (char *)v166);
    float32x4_t v170 = (float *)operator new((char *)v167 - (char *)v166);
    v287 = v170;
    v289 = &v170[v169];
    memcpy(v170, v166, (char *)v167 - (char *)v166);
    v288 = v289;
  }
  peridot::PeridotDXPCalib::getMF(&v287, 1, (float **)&v290);
  v172 = (void *)((char *)v275 + 236);
  float32x4_t v171 = *(void **)((char *)v275 + 236);
  if (v171)
  {
    *(void *)(v271 + 3680) = v171;
    operator delete(v171);
    void *v172 = 0;
    *(void *)((char *)v275 + 244) = 0;
    *(void *)((char *)v275 + 252) = 0;
  }
  *(_OWORD *)v172 = v290;
  *(void *)(v271 + 3688) = v291;
  if (v170)
  {
    v288 = v170;
    operator delete(v170);
  }
  v285 = 0;
  v286 = 0;
  v284 = 0;
  v173 = *(unsigned char **)(v271 + 3552);
  v174 = *(unsigned char **)(v271 + 3560);
  int64_t v175 = v174 - v173;
  if (v174 == v173)
  {
    v176 = 0;
  }
  else
  {
    if (v175 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    v176 = (float *)operator new(v174 - v173);
    v284 = v176;
    v286 = &v176[v175 >> 2];
    memcpy(v176, v173, v175);
    v285 = v286;
  }
  peridot::PeridotDXPCalib::getMF(&v284, 1, (float **)&v290);
  unint64_t v177 = *(void **)(v271 + 3696);
  if (v177)
  {
    *(void *)(v271 + 3704) = v177;
    operator delete(v177);
    *(void *)(v271 + 3696) = 0;
    *(void *)(v271 + 3704) = 0;
    *(void *)(v271 + 3712) = 0;
  }
  *(_OWORD *)(v271 + 3696) = v290;
  *(void *)(v271 + 3712) = v291;
  if (v176)
  {
    v285 = v176;
    operator delete(v176);
  }
  conv<float,float const>(*(void *)(v271 + 3648), (uint64_t)(*(void *)(v271 + 3656) - *(void *)(v271 + 3648)) >> 2, (float *)&v292, 4uLL, v270, 1);
  v282 = 0;
  v283 = 0;
  v281 = 0;
  if (v167 == v270)
  {
    unint64_t v178 = 0;
  }
  else
  {
    if ((v168 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v178 = (float *)operator new(v168);
    v281 = v178;
    v283 = &v178[v169];
    memcpy(v178, v270, v168);
    v282 = v283;
  }
  peridot::PeridotDXPCalib::getMF(&v281, 0, (float **)&v290);
  v179 = (void *)(v271 + 3720);
  v180 = *(void **)(v271 + 3720);
  if (v180)
  {
    *(void *)(v271 + 3728) = v180;
    operator delete(v180);
    void *v179 = 0;
    *(void *)(v271 + 3728) = 0;
    *(void *)(v271 + 3736) = 0;
  }
  *(_OWORD *)v179 = v290;
  *(void *)(v271 + 3736) = v291;
  if (v178)
  {
    v282 = v178;
    operator delete(v178);
  }
  *(_OWORD *)(v271 + 3744) = xmmword_259120730;
  *(_OWORD *)(v271 + 3760) = xmmword_259120740;
  *(_OWORD *)(v271 + 3776) = xmmword_259120750;
  float v181 = operator new(0x44uLL);
  v182 = (char *)(v181 + 17);
  v181[16] = 0;
  *((_OWORD *)v181 + 2) = 0u;
  *((_OWORD *)v181 + 3) = 0u;
  *(_OWORD *)float v181 = 0u;
  *((_OWORD *)v181 + 1) = 0u;
  float v183 = *(void **)(v271 + 3792);
  if (v183)
  {
    *(void *)(v271 + 3800) = v183;
    operator delete(v183);
    *(void *)(v271 + 3792) = 0;
    *(void *)(v271 + 3800) = 0;
    *(void *)(v271 + 3808) = 0;
  }
  *(void *)(v271 + 3792) = v181;
  *(void *)(v271 + 3800) = v182;
  *(void *)(v271 + 3808) = v182;
  float v184 = operator new(0x44uLL);
  unint64_t v185 = (char *)(v184 + 17);
  v184[16] = 0;
  *((_OWORD *)v184 + 2) = 0u;
  *((_OWORD *)v184 + 3) = 0u;
  *(_OWORD *)float v184 = 0u;
  *((_OWORD *)v184 + 1) = 0u;
  unint64_t v186 = (float **)(v271 + 3816);
  v187 = *(void **)(v271 + 3816);
  if (v187)
  {
    *(void *)(v271 + 3824) = v187;
    operator delete(v187);
    *unint64_t v186 = 0;
    *(void *)(v271 + 3824) = 0;
    *(void *)(v271 + 3832) = 0;
    float v181 = *(_DWORD **)(v271 + 3792);
  }
  *(void *)(v271 + 3816) = v184;
  *(void *)(v271 + 3824) = v185;
  *(void *)(v271 + 3832) = v185;
  *float v181 = -1099661731;
  *float v184 = -1099661731;
  v181[1] = -1099496023;
  v184[1] = -1099496023;
  v181[2] = -1100534808;
  v184[2] = -1100534808;
  v181[3] = -1104591978;
  v184[3] = -1104591978;
  v181[4] = -1118589512;
  v184[4] = -1118589512;
  v181[5] = 1038465660;
  v184[5] = 1038465660;
  v181[6] = 1049011602;
  v184[6] = 1049011602;
  v181[7] = 1052024540;
  v184[7] = 1052024540;
  v181[8] = 1052873712;
  v184[8] = 1052873712;
  v181[9] = 1051626227;
  v184[9] = 1051626227;
  v181[10] = 1049282277;
  v184[10] = 1049282277;
  v181[11] = 1042084828;
  v184[11] = 1042084828;
  v181[12] = -1141164586;
  v184[12] = -1141164586;
  v181[13] = -1103778023;
  v184[13] = -1103778023;
  v181[14] = -1097229572;
  v184[14] = -1097229572;
  v181[15] = -1096857385;
  v184[15] = -1096857385;
  v181[16] = -1105463771;
  v184[16] = -1105463771;
  *(_DWORD *)(v271 + 3840) = *v9;
  *(_DWORD *)(v271 + 3844) = v9[1];
  *(_DWORD *)(v271 + 3848) = v9[2];
  *(_DWORD *)(v271 + 3852) = v9[3];
  *(_DWORD *)(v271 + 3856) = v9[4];
  *(_DWORD *)(v271 + 3860) = v9[5];
  *(void *)(v271 + 3864) = 1;
  int v188 = *(_DWORD *)(v271 + 3412);
  *(_DWORD *)(v271 + 3424) = v188;
  *(void *)(v271 + 3464) = 0;
  *(_DWORD *)(v271 + 3428) = v188;
  *(void *)(v271 + 3452) = 0;
  *(_DWORD *)(v271 + 3432) = v188;
  *unint64_t v275 = 0;
  v275[1] = 0;
  *(void *)(v271 + 3480) = 0;
  *(void *)(v271 + 3472) = 0;
  peridot::PeridotDXPCalib::updateDTM((peridot::PeridotDXPCalib *)v271);
  peridot::PeridotDXPCalib::initQSFilter((peridot::PeridotDXPCalib *)v271);
  v189 = *(float **)(v271 + 3672);
  float v190 = *v189;
  float v191 = *(float **)(v271 + 3680);
  int64_t v192 = (char *)v191 - (char *)v189;
  unint64_t v193 = v191 - v189;
  if (v191 != v189)
  {
    int64_t v194 = 0;
    int64_t v192 = 0;
    if (v193 <= 1) {
      uint64_t v195 = 1;
    }
    else {
      uint64_t v195 = v191 - v189;
    }
    do
    {
      if (v189[v194] > v190)
      {
        float v190 = v189[v194];
        int64_t v192 = v194;
      }
      ++v194;
    }
    while (v195 != v194);
  }
  v196 = *(float **)(v271 + 3696);
  float v197 = *v196;
  v198 = *(float **)(v271 + 3704);
  int64_t v199 = (char *)v198 - (char *)v196;
  unint64_t v200 = v198 - v196;
  if (v198 != v196)
  {
    int64_t v201 = 0;
    int64_t v199 = 0;
    if (v200 <= 1) {
      uint64_t v202 = 1;
    }
    else {
      uint64_t v202 = v198 - v196;
    }
    do
    {
      if (v196[v201] > v197)
      {
        float v197 = v196[v201];
        int64_t v199 = v201;
      }
      ++v201;
    }
    while (v202 != v201);
  }
  if (v191 == v189)
  {
    uint64_t v204 = 0;
  }
  else
  {
    uint64_t v203 = 0;
    uint64_t v204 = 0;
    double v205 = v190 * 0.075;
    if (v193 <= 1) {
      unint64_t v193 = 1;
    }
    do
    {
      if (v205 < v189[v203]) {
        uint64_t v204 = v203;
      }
      ++v203;
    }
    while (v193 != v203);
  }
  *(void *)(v271 + 4000) = v204 - v192;
  if (v198 == v196)
  {
    uint64_t v207 = 0;
  }
  else
  {
    uint64_t v206 = 0;
    uint64_t v207 = 0;
    if (v200 <= 1) {
      uint64_t v208 = 1;
    }
    else {
      uint64_t v208 = v198 - v196;
    }
    do
    {
      if (v197 * 0.025 < v196[v206]) {
        uint64_t v207 = v206;
      }
      ++v206;
    }
    while (v208 != v206);
  }
  *(void *)(v271 + 4008) = v207 - v199;
  uint64_t v209 = *(void *)(v271 + 3552);
  uint64_t v210 = *(void *)(v271 + 3560) - v209;
  uint64_t v211 = v210 >> 2;
  unint64_t v212 = (v210 >> 2) + 16;
  if (v210 >> 2 == -16)
  {
    unint64_t v215 = 0;
    unint64_t v268 = 0;
  }
  else
  {
    if (v212 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    size_t v213 = (v210 & 0xFFFFFFFFFFFFFFFCLL) + 64;
    float32x4_t v214 = operator new(4 * v212);
    bzero(v214, v213);
    unint64_t v268 = (float *)operator new(4 * v212);
    bzero(v268, v213);
    unint64_t v7 = v276;
    unint64_t v215 = (float *)v214;
  }
  v216 = *v186;
  unint64_t v269 = v215;
  float v217 = v268;
  conv<float,float const>(v209, v211, v216, 0x11uLL, v215, 1);
  conv<float,float const>(*(void *)(v271 + 3552), (uint64_t)(*(void *)(v271 + 3560) - *(void *)(v271 + 3552)) >> 2, *(float **)(v271 + 3792), 0x11uLL, v268, 1);
  v218 = v269;
  float v219 = *v269;
  float v220 = *v268;
  if (v211 != -16)
  {
    do
    {
      float v221 = *v218++;
      float v222 = v221;
      if (v221 > v219) {
        float v219 = v222;
      }
      float v223 = *v217++;
      float v224 = v223;
      if (v223 > v220) {
        float v220 = v224;
      }
      --v212;
    }
    while (v212);
  }
  v225 = v7 + 346248;
  float v226 = *(float **)(v271 + 3552);
  float v227 = *(float **)(v271 + 3560);
  if (v226 == v227)
  {
    float v229 = 0.0;
    goto LABEL_131;
  }
  unint64_t v228 = (char *)v227 - (char *)v226 - 4;
  if (v228 > 0x1B)
  {
    uint64_t v230 = (v228 >> 2) + 1;
    float v231 = (float32x4_t *)(v226 + 4);
    float32x4_t v232 = 0uLL;
    uint64_t v233 = v230 & 0x7FFFFFFFFFFFFFF8;
    float32x4_t v234 = 0uLL;
    do
    {
      float32x4_t v232 = vaddq_f32(v231[-1], v232);
      float32x4_t v234 = vaddq_f32(*v231, v234);
      v231 += 2;
      v233 -= 8;
    }
    while (v233);
    float32x4_t v235 = vaddq_f32(v234, v232);
    float v229 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v235, v235));
    if (v230 == (v230 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_131:
      uint64_t v237 = 0;
      *(float *)(v271 + 4016) = v229 / v219;
      *(float *)(v271 + 4020) = v229 / v220;
      *(_WORD *)(v271 + 3526) = 257;
      *(_DWORD *)(v10 + 8) = 2;
      *(void *)uint64_t v10 = 0x100000000;
      uint64_t v238 = 16;
      do
      {
        uint64_t v239 = 0;
        unint64_t v240 = (char *)&v290 + v238;
        v241 = v225;
        do
        {
          BOOL v242 = &v240[v239];
          int v243 = v241[150];
          *((_DWORD *)v242 - 4) = *v241;
          *((_DWORD *)v242 - 3) = v243;
          int v244 = v241[450];
          *((_DWORD *)v242 - 2) = v241[300];
          *((_DWORD *)v242 - 1) = v244;
          *(_DWORD *)&v240[v239] = v241[600];
          int v245 = v241[900];
          *((_DWORD *)v242 + 1) = v241[750];
          *((_DWORD *)v242 + 2) = v245;
          int v246 = v241[1050];
          v239 += 32;
          v241 += 1200;
          *((_DWORD *)v242 + 3) = v246;
        }
        while (v239 != 448);
        ++v237;
        ++v225;
        v238 += 448;
      }
      while (v237 != 138);
      float v247 = 0;
      int v248 = 0;
      *(_DWORD *)(v10 + 456) = 9072;
      __p = 0;
      v279 = 0;
      v280 = 0;
      while (1)
      {
        if (v247 < v280)
        {
          *(_DWORD *)float v247 = 1932;
          unint64_t v249 = v247 + 4;
          goto LABEL_137;
        }
        v250 = (char *)__p;
        int64_t v251 = v247 - (unsigned char *)__p;
        uint64_t v252 = (v247 - (unsigned char *)__p) >> 2;
        unint64_t v253 = v252 + 1;
        if ((unint64_t)(v252 + 1) >> 62) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v254 = v280 - (unsigned char *)__p;
        if ((v280 - (unsigned char *)__p) >> 1 > v253) {
          unint64_t v253 = v254 >> 1;
        }
        if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v255 = v253;
        }
        if (v255)
        {
          if (v255 >> 62) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v256 = operator new(4 * v255);
        }
        else
        {
          v256 = 0;
        }
        float v257 = &v256[4 * v252];
        *(_DWORD *)float v257 = 1932;
        unint64_t v249 = v257 + 4;
        if (v247 != v250)
        {
          unint64_t v258 = v247 - 4 - v250;
          if (v258 < 0xBC)
          {
            v259 = v247;
            goto LABEL_152;
          }
          if (&v256[v251 - 4 - (v258 & 0xFFFFFFFFFFFFFFFCLL)] > &v256[v251 - 4])
          {
            v259 = v247;
            do
            {
LABEL_152:
              int v260 = *((_DWORD *)v259 - 1);
              v259 -= 4;
              *((_DWORD *)v257 - 1) = v260;
              v257 -= 4;
            }
            while (v259 != v250);
            goto LABEL_153;
          }
          if (&v247[-(v258 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v247 - 4)
          {
            v259 = v247;
            goto LABEL_152;
          }
          if ((unint64_t)(v247 - &v256[v251]) < 0x20)
          {
            v259 = v247;
            goto LABEL_152;
          }
          uint64_t v261 = (v258 >> 2) + 1;
          v259 = &v247[-4 * (v261 & 0x7FFFFFFFFFFFFFF8)];
          BOOL v262 = &v256[4 * v252 - 16];
          v263 = v247 - 16;
          uint64_t v264 = v261 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v265 = *(_OWORD *)v263;
            *(v262 - 1) = *((_OWORD *)v263 - 1);
            *BOOL v262 = v265;
            v262 -= 2;
            v263 -= 32;
            v264 -= 8;
          }
          while (v264);
          v257 -= 4 * (v261 & 0x7FFFFFFFFFFFFFF8);
          if (v261 != (v261 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_152;
          }
        }
LABEL_153:
        __p = v257;
        v279 = v249;
        v280 = &v256[4 * v255];
        if (v250) {
          operator delete(v250);
        }
LABEL_137:
        v279 = v249;
        ++v248;
        float v247 = v249;
        if (v248 == 8) {
          SparseMatrix::SparseMatrix((SparseMatrix *)v277, 14 * *(_DWORD *)(v10 + 456), 8, (const int **)&__p, 0);
        }
      }
    }
    v226 += v230 & 0x7FFFFFFFFFFFFFF8;
  }
  else
  {
    float v229 = 0.0;
  }
  do
  {
    float v236 = *v226++;
    float v229 = v236 + v229;
  }
  while (v226 != v227);
  goto LABEL_131;
}

void sub_258FF5D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  operator delete(v43);
  if (a9)
  {
    operator delete(a9);
    if (a13)
    {
LABEL_6:
      operator delete(a13);
      _Unwind_Resume(a1);
    }
  }
  else if (a13)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t SparseMatrix::AddValue(uint64_t this, int a2, int a3, double a4)
{
  uint64_t v5 = *(void *)(this + 16);
  uint64_t v4 = *(void *)(this + 24);
  int v6 = *(_DWORD *)(v4 + 4 * a3) + *(_DWORD *)(v5 + 4 * a3);
  if (*(_DWORD *)(this + 36) - 1 == a3) {
    int v7 = *(_DWORD *)(this + 32);
  }
  else {
    int v7 = *(_DWORD *)(v5 + 4 * a3 + 4);
  }
  if (v6 >= v7) {
    SparseMatrix::AddValue();
  }
  uint64_t v8 = *(void *)(this + 8);
  *(double *)(*(void *)this + 8 * v6) = a4;
  *(_DWORD *)(v8 + 4 * v6) = a2;
  ++*(_DWORD *)(v4 + 4 * a3);
  return this;
}

void peridot::PeridotDXPCalib::getMF(float **a1@<X1>, char a2@<W2>, float **a3@<X8>)
{
  int v6 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v7 = (uint64_t)(*a1 + 1);
  BOOL v8 = *a1 == v5 || v7 == (void)v5;
  uint64_t v9 = (uint64_t)*a1;
  if (!v8)
  {
    float v10 = *v6;
    uint64_t v9 = (uint64_t)*a1;
    uint64_t v11 = *a1 + 1;
    do
    {
      float v12 = *v11++;
      float v13 = v12;
      if (v10 < v12)
      {
        float v10 = v13;
        uint64_t v9 = v7;
      }
      uint64_t v7 = (uint64_t)v11;
    }
    while (v11 != v5);
  }
  uint64_t v14 = (v9 - (uint64_t)v6) >> 2;
  signed int v15 = v14 - ((unint64_t)((char *)v5 - (char *)v6) >> 2) + 7;
  uint64_t v16 = operator new(0xCuLL);
  unsigned int v17 = v16;
  *uint64_t v16 = 0;
  v16[1] = 7 - v14;
  v16[2] = v15;
  uint64_t v18 = 2;
  if (((7 - v14) & ~((7 - (int)v14) >> 31)) >= v15) {
    uint64_t v18 = (int)v14 < 7;
  }
  uint64_t v19 = (int)v16[v18];
  uint64_t v20 = v19 + v14 - 7;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v21 = v14 - v19 + 8;
  *a3 = 0;
  if (v21 != v20)
  {
    long long v22 = &v6[v20];
    long long v23 = &v6[v21];
    int64_t v24 = (char *)v23 - (char *)v22;
    if ((char *)v23 - (char *)v22 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    long long v25 = (float *)operator new((char *)v23 - (char *)v22);
    *a3 = v25;
    long long v26 = &v25[v24 >> 2];
    a3[2] = v26;
    memmove(v25, v22, v24);
    a3[1] = v26;
    long long v27 = (float32x4_t *)operator new(v24);
    memcpy(v27, v25, v24);
    unsigned int v28 = (float32x4_t *)((char *)v27 + 4 * (v24 >> 2) - 4);
    unint64_t v29 = v24 - 4;
    if ((unint64_t)v24 >= 4 && v28 > v27)
    {
      long long v31 = &v27->i8[4];
      do
      {
        __int32 v32 = *((_DWORD *)v31 - 1);
        *((_DWORD *)v31 - 1) = v28->i32[0];
        v28->i32[0] = v32;
        unsigned int v28 = (float32x4_t *)((char *)v28 - 4);
        BOOL v33 = v31 >= (char *)v28;
        v31 += 4;
      }
      while (!v33);
    }
    uint64_t v34 = (v29 >> 2) + 1;
    long long v35 = v25;
    long long v36 = (float *)v27;
    if (v29 >= 0x1C)
    {
      uint64_t v37 = v34 & 0x7FFFFFFFFFFFFFF8;
      long long v35 = &v25[v37];
      long long v38 = v27 + 1;
      long long v39 = (float32x4_t *)(v25 + 4);
      uint64_t v40 = v34 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v41 = vaddq_f32(*v38, *v39);
        v39[-1] = vaddq_f32(v38[-1], v39[-1]);
        *long long v39 = v41;
        v38 += 2;
        v39 += 2;
        v40 -= 8;
      }
      while (v40);
      if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        if (a2)
        {
          if ((unint64_t)(v24 >> 2) <= 1) {
            unint64_t v43 = 1;
          }
          else {
            unint64_t v43 = v24 >> 2;
          }
          if (v43 > 7)
          {
            unint64_t v44 = v43 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v59 = (float32x4_t *)(v25 + 4);
            float32x4_t v60 = 0uLL;
            unint64_t v61 = v43 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v62 = 0uLL;
            do
            {
              float32x4_t v60 = vmlaq_f32(v60, v59[-1], v59[-1]);
              float32x4_t v62 = vmlaq_f32(v62, *v59, *v59);
              v59 += 2;
              v61 -= 8;
            }
            while (v61);
            float32x4_t v63 = vaddq_f32(v62, v60);
            float v45 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63));
            if (v43 == v44) {
              goto LABEL_52;
            }
          }
          else
          {
            unint64_t v44 = 0;
            float v45 = 0.0;
          }
          unint64_t v64 = v43 - v44;
          long long v65 = &v25[v44];
          do
          {
            float v66 = *v65++;
            float v45 = v45 + (float)(v66 * v66);
            --v64;
          }
          while (v64);
LABEL_52:
          float v67 = sqrtf(v45);
          if (v29 > 0x1B)
          {
            long long v68 = (float32x4_t *)(v25 + 4);
            uint64_t v69 = v34 & 0x7FFFFFFFFFFFFFF8;
            float v70 = 1.0 / v67;
            do
            {
              float32x4_t v71 = vmulq_n_f32(*v68, v70);
              v68[-1] = vmulq_n_f32(v68[-1], v70);
              *long long v68 = v71;
              v68 += 2;
              v69 -= 8;
            }
            while (v69);
            if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_59;
            }
            v25 += v34 & 0x7FFFFFFFFFFFFFF8;
          }
          float v72 = 1.0 / v67;
          do
          {
            float *v25 = *v25 * v72;
            ++v25;
          }
          while (v25 != v26);
LABEL_59:
          operator delete(v27);
          goto LABEL_60;
        }
        float v46 = 0.0;
        v47 = v25;
        if (v29 > 0x1B)
        {
          unint64_t v48 = (float32x4_t *)(v25 + 4);
          float32x4_t v49 = 0uLL;
          uint64_t v50 = v34 & 0x7FFFFFFFFFFFFFF8;
          float32x4_t v51 = 0uLL;
          do
          {
            float32x4_t v49 = vaddq_f32(v48[-1], v49);
            float32x4_t v51 = vaddq_f32(*v48, v51);
            v48 += 2;
            v50 -= 8;
          }
          while (v50);
          float32x4_t v52 = vaddq_f32(v51, v49);
          float v46 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v52, v52));
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_39;
          }
          v47 = &v25[v34 & 0x7FFFFFFFFFFFFFF8];
        }
        do
        {
          float v53 = *v47++;
          float v46 = v53 + v46;
        }
        while (v47 != v26);
LABEL_39:
        if (v29 > 0x1B)
        {
          long long v54 = (float32x4_t *)(v25 + 4);
          uint64_t v55 = v34 & 0x7FFFFFFFFFFFFFF8;
          float v56 = 1.0 / v46;
          do
          {
            float32x4_t v57 = vmulq_n_f32(*v54, v56);
            v54[-1] = vmulq_n_f32(v54[-1], v56);
            float32x4_t *v54 = v57;
            v54 += 2;
            v55 -= 8;
          }
          while (v55);
          if (v34 == (v34 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_59;
          }
          v25 += v34 & 0x7FFFFFFFFFFFFFF8;
        }
        float v58 = 1.0 / v46;
        do
        {
          float *v25 = *v25 * v58;
          ++v25;
        }
        while (v25 != v26);
        goto LABEL_59;
      }
      long long v36 = &v27->f32[v37];
    }
    do
    {
      float v42 = *v36++;
      *long long v35 = v42 + *v35;
      ++v35;
    }
    while (v35 != v26);
    goto LABEL_27;
  }
LABEL_60:
  operator delete(v17);
}

void sub_258FF6364(_Unwind_Exception *a1)
{
  *(void *)(v3 + 8) = v2;
  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void peridot::PeridotDXPCalib::updateDTM(peridot::PeridotDXPCalib *this)
{
  v2 = (float32x4_t *)operator new(0x320uLL);
  float v3 = *((float *)this + 856);
  float32x4_t *v2 = vmulq_n_f32((float32x4_t)xmmword_259120680, v3);
  v2[1] = vmulq_n_f32((float32x4_t)xmmword_259120690, v3);
  v2[2] = vmulq_n_f32((float32x4_t)xmmword_2591206A0, v3);
  v2[3] = vmulq_n_f32((float32x4_t)xmmword_2591206B0, v3);
  v2[4] = vmulq_n_f32((float32x4_t)xmmword_2591206C0, v3);
  v2[5] = vmulq_n_f32((float32x4_t)xmmword_2591206D0, v3);
  v2[6] = vmulq_n_f32((float32x4_t)xmmword_2591206E0, v3);
  v2[7] = vmulq_n_f32((float32x4_t)xmmword_2591206F0, v3);
  v2[8] = vmulq_n_f32((float32x4_t)xmmword_259120700, v3);
  v2[9] = vmulq_n_f32((float32x4_t)xmmword_259120710, v3);
  v2[10] = vmulq_n_f32((float32x4_t)xmmword_259120760, v3);
  v2[11] = vmulq_n_f32((float32x4_t)xmmword_259120770, v3);
  v2[12] = vmulq_n_f32((float32x4_t)xmmword_259120780, v3);
  v2[13] = vmulq_n_f32((float32x4_t)xmmword_259120790, v3);
  v2[14] = vmulq_n_f32((float32x4_t)xmmword_2591207A0, v3);
  v2[15] = vmulq_n_f32((float32x4_t)xmmword_2591207B0, v3);
  v2[16] = vmulq_n_f32((float32x4_t)xmmword_2591207C0, v3);
  v2[17] = vmulq_n_f32((float32x4_t)xmmword_2591207D0, v3);
  v2[18] = vmulq_n_f32((float32x4_t)xmmword_2591207E0, v3);
  v2[19] = vmulq_n_f32((float32x4_t)xmmword_2591207F0, v3);
  v2[20] = vmulq_n_f32((float32x4_t)xmmword_259120800, v3);
  v2[21] = vmulq_n_f32((float32x4_t)xmmword_259120810, v3);
  v2[22] = vmulq_n_f32((float32x4_t)xmmword_259120820, v3);
  v2[23] = vmulq_n_f32((float32x4_t)xmmword_259120830, v3);
  v2[24] = vmulq_n_f32((float32x4_t)xmmword_259120840, v3);
  v2[25] = vmulq_n_f32((float32x4_t)xmmword_259120850, v3);
  v2[26] = vmulq_n_f32((float32x4_t)xmmword_259120860, v3);
  v2[27] = vmulq_n_f32((float32x4_t)xmmword_259120870, v3);
  v2[28] = vmulq_n_f32((float32x4_t)xmmword_259120880, v3);
  v2[29] = vmulq_n_f32((float32x4_t)xmmword_259120890, v3);
  v2[30] = vmulq_n_f32((float32x4_t)xmmword_2591208A0, v3);
  v2[31] = vmulq_n_f32((float32x4_t)xmmword_2591208B0, v3);
  v2[32] = vmulq_n_f32((float32x4_t)xmmword_2591208C0, v3);
  v2[33] = vmulq_n_f32((float32x4_t)xmmword_2591208D0, v3);
  v2[34] = vmulq_n_f32((float32x4_t)xmmword_2591208E0, v3);
  v2[35] = vmulq_n_f32((float32x4_t)xmmword_2591208F0, v3);
  v2[36] = vmulq_n_f32((float32x4_t)xmmword_259120900, v3);
  v2[37] = vmulq_n_f32((float32x4_t)xmmword_259120910, v3);
  v2[38] = vmulq_n_f32((float32x4_t)xmmword_259120920, v3);
  v2[39] = vmulq_n_f32((float32x4_t)xmmword_259120930, v3);
  v2[40] = vmulq_n_f32((float32x4_t)xmmword_259120940, v3);
  v2[41] = vmulq_n_f32((float32x4_t)xmmword_259120950, v3);
  v2[42] = vmulq_n_f32((float32x4_t)xmmword_259120960, v3);
  v2[43] = vmulq_n_f32((float32x4_t)xmmword_259120970, v3);
  v2[44] = vmulq_n_f32((float32x4_t)xmmword_259120980, v3);
  v2[45] = vmulq_n_f32((float32x4_t)xmmword_259120990, v3);
  v2[46] = vmulq_n_f32((float32x4_t)xmmword_2591209A0, v3);
  v2[47] = vmulq_n_f32((float32x4_t)xmmword_2591209B0, v3);
  v2[48] = vmulq_n_f32((float32x4_t)xmmword_2591209C0, v3);
  v2[49] = vmulq_n_f32((float32x4_t)xmmword_2591209D0, v3);
  uint64_t v4 = (float *)operator new(0x320uLL);
  v52[0] = v4;
  v52[2] = v4 + 200;
  memcpy(v4, v2, 0x320uLL);
  v52[1] = v4 + 200;
  peridot::PeridotDXPCalib::getDTM((uint64_t)this, v52, (float32x4_t **)&v53);
  uint64_t v5 = (float32x4_t **)((char *)this + 3872);
  int v6 = (void *)*((void *)this + 484);
  if (v6)
  {
    *((void *)this + 485) = v6;
    operator delete(v6);
    float *v5 = 0;
    *((void *)this + 485) = 0;
    *((void *)this + 486) = 0;
  }
  *((_OWORD *)this + 242) = v53;
  *((void *)this + 486) = v54;
  operator delete(v4);
  uint64_t v7 = (float32x4_t *)*((void *)this + 484);
  v7->i32[0] = 1065353216;
  uint64_t v8 = *((void *)this + 490);
  unint64_t v9 = *((void *)this + 491) - v8;
  if (v9 > 0x31F)
  {
    if (v9 != 800) {
      *((void *)this + 491) = v8 + 800;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)this + 3920, 200 - (v9 >> 2));
    uint64_t v7 = *v5;
  }
  uint64_t v10 = *((void *)this + 485) - (void)v7;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      unint64_t v11 = 1;
    }
    if (v11 > 7)
    {
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v14 = v7 + 1;
      float32x4_t v15 = 0uLL;
      __asm { FMOV            V1.4S, #1.0 }
      unint64_t v21 = v11 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v22 = 0uLL;
      do
      {
        float32x4_t v15 = vsubq_f32(vaddq_f32(v15, _Q1), v14[-1]);
        float32x4_t v22 = vsubq_f32(vaddq_f32(v22, _Q1), *v14);
        v14 += 2;
        v21 -= 8;
      }
      while (v21);
      float32x4_t v23 = vaddq_f32(v22, v15);
      float v13 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v23, v23));
      if (v11 == v12) {
        goto LABEL_17;
      }
    }
    else
    {
      unint64_t v12 = 0;
      float v13 = 0.0;
    }
    unint64_t v24 = v11 - v12;
    long long v25 = &v7->f32[v12];
    do
    {
      float v26 = *v25++;
      float v13 = (float)(v13 + 1.0) - v26;
      --v24;
    }
    while (v24);
LABEL_17:
    long long v27 = (float *)*((void *)this + 490);
    float v28 = 0.0;
    do
    {
      float v29 = v7->f32[0];
      uint64_t v7 = (float32x4_t *)((char *)v7 + 4);
      float v28 = (float)(1.0 - v29) + v28;
      *v27++ = v13 - v28;
      --v11;
    }
    while (v11);
  }
  long long v30 = (float32x4_t *)operator new(0xC8uLL);
  v31.i32[0] = *((_DWORD *)this + 856);
  *long long v30 = vmulq_n_f32((float32x4_t)xmmword_2591209E0, *(float *)v31.i32);
  v30[1] = vmulq_n_f32((float32x4_t)xmmword_2591209F0, *(float *)v31.i32);
  v30[2] = vmulq_n_f32((float32x4_t)xmmword_259120A00, *(float *)v31.i32);
  v30[3] = vmulq_n_f32((float32x4_t)xmmword_259120A10, *(float *)v31.i32);
  v30[4] = vmulq_n_f32((float32x4_t)xmmword_259120A20, *(float *)v31.i32);
  v30[5] = vmulq_n_f32((float32x4_t)xmmword_259120A30, *(float *)v31.i32);
  v30[6] = vmulq_n_f32((float32x4_t)xmmword_259120A40, *(float *)v31.i32);
  v30[7] = vmulq_n_f32((float32x4_t)xmmword_259120A50, *(float *)v31.i32);
  v30[8] = vmulq_n_f32((float32x4_t)xmmword_259120A60, *(float *)v31.i32);
  v30[9] = vmulq_n_f32((float32x4_t)xmmword_259120A70, *(float *)v31.i32);
  v30[10] = vmulq_n_f32((float32x4_t)xmmword_259120A80, *(float *)v31.i32);
  v30[11] = vmulq_n_f32((float32x4_t)xmmword_259120A90, *(float *)v31.i32);
  *(float32x2_t *)v30[12].f32 = vmul_f32((float32x2_t)*(_OWORD *)&vdupq_lane_s32(v31, 0), (float32x2_t)0x4344000043400000);
  __int32 v32 = (float32x4_t *)operator new(0xC8uLL);
  v51[2] = &v32[12].f32[2];
  float32x4_t v33 = v30[11];
  v32[10] = v30[10];
  v32[11] = v33;
  v32[12].i64[0] = v30[12].i64[0];
  float32x4_t v34 = v30[7];
  v32[6] = v30[6];
  v32[7] = v34;
  float32x4_t v35 = v30[9];
  v32[8] = v30[8];
  v32[9] = v35;
  float32x4_t v36 = v30[3];
  v32[2] = v30[2];
  v32[3] = v36;
  float32x4_t v37 = v30[5];
  v32[4] = v30[4];
  v32[5] = v37;
  float32x4_t v38 = v30[1];
  *__int32 v32 = *v30;
  v32[1] = v38;
  v51[0] = (float *)v32;
  v51[1] = &v32[12].f32[2];
  peridot::PeridotDXPCalib::getDTM((uint64_t)this, v51, (float32x4_t **)&v53);
  long long v39 = (void *)((char *)this + 3896);
  uint64_t v40 = (void *)*((void *)this + 487);
  if (v40)
  {
    *((void *)this + 488) = v40;
    operator delete(v40);
    *long long v39 = 0;
    *((void *)this + 488) = 0;
    *((void *)this + 489) = 0;
  }
  *(_OWORD *)long long v39 = v53;
  *((void *)this + 489) = v54;
  operator delete(v32);
  float32x4_t v41 = (float *)*((void *)this + 487);
  float *v41 = 1.0;
  if (v41[1] >= 0.999999)
  {
    uint64_t v42 = 1;
  }
  else if (v41[2] >= 0.999999)
  {
    uint64_t v42 = 2;
  }
  else if (v41[3] >= 0.999999)
  {
    uint64_t v42 = 3;
  }
  else if (v41[4] >= 0.999999)
  {
    uint64_t v42 = 4;
  }
  else if (v41[5] >= 0.999999)
  {
    uint64_t v42 = 5;
  }
  else if (v41[6] >= 0.999999)
  {
    uint64_t v42 = 6;
  }
  else if (v41[7] >= 0.999999)
  {
    uint64_t v42 = 7;
  }
  else if (v41[8] >= 0.999999)
  {
    uint64_t v42 = 8;
  }
  else if (v41[9] >= 0.999999)
  {
    uint64_t v42 = 9;
  }
  else if (v41[10] >= 0.999999)
  {
    uint64_t v42 = 10;
  }
  else if (v41[11] >= 0.999999)
  {
    uint64_t v42 = 11;
  }
  else if (v41[12] >= 0.999999)
  {
    uint64_t v42 = 12;
  }
  else if (v41[13] >= 0.999999)
  {
    uint64_t v42 = 13;
  }
  else if (v41[14] >= 0.999999)
  {
    uint64_t v42 = 14;
  }
  else if (v41[15] >= 0.999999)
  {
    uint64_t v42 = 15;
  }
  else if (v41[16] >= 0.999999)
  {
    uint64_t v42 = 16;
  }
  else if (v41[17] >= 0.999999)
  {
    uint64_t v42 = 17;
  }
  else if (v41[18] >= 0.999999)
  {
    uint64_t v42 = 18;
  }
  else if (v41[19] >= 0.999999)
  {
    uint64_t v42 = 19;
  }
  else if (v41[20] >= 0.999999)
  {
    uint64_t v42 = 20;
  }
  else if (v41[21] >= 0.999999)
  {
    uint64_t v42 = 21;
  }
  else if (v41[22] >= 0.999999)
  {
    uint64_t v42 = 22;
  }
  else if (v41[23] >= 0.999999)
  {
    uint64_t v42 = 23;
  }
  else if (v41[24] >= 0.999999)
  {
    uint64_t v42 = 24;
  }
  else if (v41[25] >= 0.999999)
  {
    uint64_t v42 = 25;
  }
  else if (v41[26] >= 0.999999)
  {
    uint64_t v42 = 26;
  }
  else if (v41[27] >= 0.999999)
  {
    uint64_t v42 = 27;
  }
  else if (v41[28] >= 0.999999)
  {
    uint64_t v42 = 28;
  }
  else if (v41[29] >= 0.999999)
  {
    uint64_t v42 = 29;
  }
  else if (v41[30] >= 0.999999)
  {
    uint64_t v42 = 30;
  }
  else if (v41[31] >= 0.999999)
  {
    uint64_t v42 = 31;
  }
  else if (v41[32] >= 0.999999)
  {
    uint64_t v42 = 32;
  }
  else if (v41[33] >= 0.999999)
  {
    uint64_t v42 = 33;
  }
  else if (v41[34] >= 0.999999)
  {
    uint64_t v42 = 34;
  }
  else if (v41[35] >= 0.999999)
  {
    uint64_t v42 = 35;
  }
  else if (v41[36] >= 0.999999)
  {
    uint64_t v42 = 36;
  }
  else if (v41[37] >= 0.999999)
  {
    uint64_t v42 = 37;
  }
  else if (v41[38] >= 0.999999)
  {
    uint64_t v42 = 38;
  }
  else if (v41[39] >= 0.999999)
  {
    uint64_t v42 = 39;
  }
  else if (v41[40] >= 0.999999)
  {
    uint64_t v42 = 40;
  }
  else if (v41[41] >= 0.999999)
  {
    uint64_t v42 = 41;
  }
  else if (v41[42] >= 0.999999)
  {
    uint64_t v42 = 42;
  }
  else if (v41[43] >= 0.999999)
  {
    uint64_t v42 = 43;
  }
  else if (v41[44] >= 0.999999)
  {
    uint64_t v42 = 44;
  }
  else if (v41[45] >= 0.999999)
  {
    uint64_t v42 = 45;
  }
  else if (v41[46] >= 0.999999)
  {
    uint64_t v42 = 46;
  }
  else if (v41[47] >= 0.999999)
  {
    uint64_t v42 = 47;
  }
  else if (v41[48] >= 0.999999)
  {
    uint64_t v42 = 48;
  }
  else
  {
    uint64_t v42 = 49;
  }
  size_t v43 = 4 * v42;
  unint64_t v44 = (char *)operator new(4 * v42);
  float v45 = &v44[4 * v42];
  memmove(v44, v41, v43);
  *((void *)this + 488) = v41;
  operator delete(v41);
  *((void *)this + 487) = v44;
  *((void *)this + 488) = v45;
  *((void *)this + 489) = v45;
  uint64_t v46 = *((void *)this + 484);
  uint64_t v47 = *((void *)this + 485) - v46;
  if ((unint64_t)v47 >= 5)
  {
    unint64_t v48 = v47 >> 2;
    uint64_t v49 = 2;
    if (v48 > 2) {
      uint64_t v49 = v48;
    }
    uint64_t v50 = 1;
    while (*(float *)(v46 + 4 * v50) <= 0.5)
    {
      if (v49 == ++v50) {
        goto LABEL_126;
      }
    }
    *((void *)this + 493) = v50;
  }
LABEL_126:
  operator delete(v30);
  operator delete(v2);
}

void sub_258FF6EA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void peridot::PeridotDXPCalib::getDTM(uint64_t a1@<X0>, float **a2@<X1>, float32x4_t **a3@<X8>)
{
  uint64_t v5 = a1 + 4 * *(void *)(a1 + 3864);
  float v6 = *(float *)(v5 + 3840);
  float v7 = *(float *)(v5 + 3852);
  unint64_t v8 = *(unsigned int *)(a1 + 3516);
  uint64_t v9 = *(int *)(a1 + 3512);
  if (4 * v8 == -4)
  {
    unint64_t v12 = 0;
    unint64_t v11 = 0;
  }
  else
  {
    size_t v10 = 4 * (4 * v8 + 4);
    unint64_t v11 = (char *)operator new(v10);
    bzero(v11, v10);
    unint64_t v12 = &v11[v10];
  }
  uint64_t v13 = 0;
  float v14 = v7 * 0.22788;
  uint64_t v15 = v9 - 6;
  do
  {
    float v16 = 0.0;
    if (v8 + v13 <= 0x23)
    {
      float v17 = (float)(v6 + (float)(v14 * (float)(unint64_t)(v15 + v13))) * 0.000000001;
      float v16 = v17 + (float)(peridot::gDtmSigma[v8 + v13] * -3.0);
    }
    *(float *)&v11[4 * v13++] = v16;
  }
  while (v8 + 1 != v13);
  unint64_t v18 = 2 * v8;
  uint64_t v19 = 4 * v8 + 4;
  for (unint64_t i = v8; i != -1; --i)
  {
    if (v18 < 0x24)
    {
      float v21 = (float)(v6 + (float)(v14 * (float)(v15 + i))) * 0.000000001;
      *(float *)&v11[v19] = v21 + (float)(peridot::gDtmSigma[v18] * -3.0);
    }
    else
    {
      *(_DWORD *)&v11[v19] = 0;
    }
    v19 += 4;
    --v18;
  }
  int v22 = v9 - 6;
  uint64_t v23 = 8 * v8 + 8;
  for (unint64_t j = v8; j != -1; --j)
  {
    if (j < 0x24)
    {
      float v25 = (float)(v6 + (float)(v14 * (float)v22)) * 0.000000001;
      *(float *)&v11[v23] = v25 + (float)(peridot::gDtmSigma[j] * -3.0);
    }
    else
    {
      *(_DWORD *)&v11[v23] = 0;
    }
    v23 += 4;
    --v22;
  }
  unint64_t v26 = 0;
  uint64_t v27 = (uint64_t)&v11[12 * v8 + 12];
  do
  {
    if (v26 < 0x24)
    {
      float v28 = (float)(v6 + (float)(v14 * (float)(v9 - v8 - 6 + v26))) * 0.000000001;
      *(float *)(v27 + 4 * v26) = v28 + (float)(peridot::gDtmSigma[v26] * -3.0);
    }
    else
    {
      *(_DWORD *)(v27 + 4 * v26) = 0;
    }
    ++v26;
  }
  while (v8 + 1 != v26);
  long long v30 = *a2;
  float v29 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  uint64_t v31 = (char *)v29 - (char *)v30;
  if (v29 != v30)
  {
    if (v31 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    __int32 v32 = (float32x4_t *)operator new((char *)v29 - (char *)v30);
    *a3 = v32;
    unint64_t v54 = v31 >> 2;
    float32x4_t v33 = &v32->i8[4 * (v31 >> 2)];
    a3[2] = (float32x4_t *)v33;
    bzero(v32, v31 & 0xFFFFFFFFFFFFFFFCLL);
    a3[1] = (float32x4_t *)v33;
    unint64_t v53 = (v12 - v11) >> 2;
    if (v12 != v11)
    {
      uint64_t v34 = 0;
      if (v54 <= 1) {
        uint64_t v35 = 1;
      }
      else {
        uint64_t v35 = v31 >> 2;
      }
      if (v53 <= 1) {
        uint64_t v36 = 1;
      }
      else {
        uint64_t v36 = v53;
      }
      do
      {
        float v37 = *(float *)&v11[4 * v34];
        float32x4_t v38 = v30;
        long long v39 = (float *)v32;
        uint64_t v40 = v35;
        do
        {
          float v41 = *v38++;
          float v42 = (float)(v41 - v37) * 1.01015256e10;
          *long long v39 = *v39 + (float)((float)(erff(v42) * 0.5) + 0.5);
          ++v39;
          --v40;
        }
        while (v40);
        ++v34;
      }
      while (v34 != v36);
    }
    if ((unint64_t)v31 >= 4)
    {
      float v43 = (float)v53;
      unint64_t v44 = v31 >> 2;
      if (v54 <= 1) {
        unint64_t v44 = 1;
      }
      if (v44 <= 7)
      {
        unint64_t v45 = 0;
LABEL_43:
        unint64_t v50 = v44 - v45;
        float32x4_t v51 = &v32->f32[v45];
        float v52 = 1.0 / v43;
        do
        {
          float *v51 = *v51 * v52;
          ++v51;
          --v50;
        }
        while (v50);
        goto LABEL_45;
      }
      unint64_t v45 = v44 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v46 = v32 + 1;
      unint64_t v47 = v44 & 0xFFFFFFFFFFFFFFF8;
      float v48 = 1.0 / v43;
      do
      {
        float32x4_t v49 = vmulq_n_f32(*v46, v48);
        v46[-1] = vmulq_n_f32(v46[-1], v48);
        float32x4_t *v46 = v49;
        v46 += 2;
        v47 -= 8;
      }
      while (v47);
      if (v44 != v45) {
        goto LABEL_43;
      }
    }
LABEL_45:
    if (!v11) {
      return;
    }
  }
  operator delete(v11);
}

void sub_258FF72CC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void peridot::PeridotDXPCalib::initQSFilter(peridot::PeridotDXPCalib *this)
{
  v2 = (float *)*((void *)this + 459);
  float v3 = (float *)*((void *)this + 460);
  uint64_t v4 = v2 + 1;
  BOOL v5 = v2 == v3 || v4 == v3;
  float v6 = (float *)*((void *)this + 459);
  if (!v5)
  {
    float v7 = *v2;
    float v6 = (float *)*((void *)this + 459);
    unint64_t v8 = v2 + 1;
    do
    {
      float v9 = *v8++;
      float v10 = v9;
      if (v7 < v9)
      {
        float v7 = v10;
        float v6 = v4;
      }
      uint64_t v4 = v8;
    }
    while (v8 != v3);
  }
  if (v2 == v3)
  {
    uint64_t v14 = 0;
    uint64_t v12 = 0;
  }
  else
  {
    char v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    float v15 = *v6 * 0.075;
    unint64_t v16 = v3 - v2;
    if (v16 <= 1) {
      unint64_t v16 = 1;
    }
    do
    {
      float v17 = v2[v13];
      if (v11) {
        uint64_t v18 = v12;
      }
      else {
        uint64_t v18 = v13;
      }
      if (v17 > v15)
      {
        uint64_t v14 = v13;
        uint64_t v12 = v18;
      }
      v11 |= v17 > v15;
      ++v13;
    }
    while (v16 != v13);
  }
  uint64_t v19 = v14 - v12;
  BOOL v20 = __CFADD__(v14 - v12, 1);
  unint64_t v21 = v14 - v12 + 1;
  if (v20)
  {
    int v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    if (v21 >> 62) {
      goto LABEL_53;
    }
    uint64_t v24 = 4 * v21;
    uint64_t v23 = (char *)operator new(4 * v21);
    int v22 = &v23[v24];
    memset_pattern16(v23, &xmmword_259120E80, 4 * v19 + 4);
  }
  uint64_t v25 = v6 - v2;
  unint64_t v26 = (void *)*((void *)this + 494);
  if (v26)
  {
    *((void *)this + 495) = v26;
    operator delete(v26);
    *((void *)this + 494) = 0;
    *((void *)this + 495) = 0;
    *((void *)this + 496) = 0;
  }
  *((void *)this + 494) = v23;
  *((void *)this + 495) = v22;
  *((void *)this + 496) = v22;
  *((void *)this + 500) = v14 - v25;
  uint64_t v27 = (float *)*((void *)this + 462);
  float v28 = (float *)*((void *)this + 463);
  if (v27 == v28)
  {
    long long v30 = (float *)*((void *)this + 462);
LABEL_44:
    uint64_t v38 = 0;
    uint64_t v37 = 0;
    goto LABEL_45;
  }
  float v29 = v27 + 1;
  long long v30 = (float *)*((void *)this + 462);
  if (v27 + 1 != v28)
  {
    float v31 = *v27;
    long long v30 = (float *)*((void *)this + 462);
    __int32 v32 = v27 + 1;
    do
    {
      float v33 = *v32++;
      float v34 = v33;
      if (v31 < v33)
      {
        float v31 = v34;
        long long v30 = v29;
      }
      float v29 = v32;
    }
    while (v32 != v28);
  }
  if (v27 == v28) {
    goto LABEL_44;
  }
  uint64_t v35 = 0;
  char v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  float v39 = *v30 * 0.075;
  unint64_t v40 = v28 - v27;
  if (v40 <= 1) {
    unint64_t v40 = 1;
  }
  do
  {
    float v41 = v27[v35];
    if (v36) {
      uint64_t v42 = v37;
    }
    else {
      uint64_t v42 = v35;
    }
    if (v41 > v39)
    {
      uint64_t v38 = v35;
      uint64_t v37 = v42;
    }
    v36 |= v41 > v39;
    ++v35;
  }
  while (v40 != v35);
LABEL_45:
  uint64_t v43 = v38 - v37;
  BOOL v20 = __CFADD__(v38 - v37, 1);
  unint64_t v44 = v38 - v37 + 1;
  if (!v20)
  {
    if (!(v44 >> 62))
    {
      uint64_t v48 = 4 * v44;
      uint64_t v46 = (char *)operator new(4 * v44);
      unint64_t v45 = &v46[v48];
      memset_pattern16(v46, &xmmword_259120E80, 4 * v43 + 4);
      unint64_t v47 = (void *)*((void *)this + 497);
      if (!v47) {
        goto LABEL_49;
      }
      goto LABEL_48;
    }
LABEL_53:
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = (void *)*((void *)this + 497);
  if (v47)
  {
LABEL_48:
    *((void *)this + 498) = v47;
    operator delete(v47);
    *((void *)this + 497) = 0;
    *((void *)this + 498) = 0;
    *((void *)this + 499) = 0;
  }
LABEL_49:
  *((void *)this + 497) = v46;
  *((void *)this + 498) = v45;
  *((void *)this + 499) = v45;
  *((void *)this + 501) = v38 - (v30 - v27);
}

uint64_t *SparseMatrix::operator=(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8000313F17);
  }
  uint64_t v5 = a1[1];
  if (v5) {
    MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
  }
  uint64_t v6 = a1[2];
  if (v6) {
    MEMORY[0x25A2D62A0](v6, 0x1000C8052888210);
  }
  uint64_t v7 = a1[3];
  if (v7) {
    MEMORY[0x25A2D62A0](v7, 0x1000C8052888210);
  }
  *(_OWORD *)a1 = 0u;
  *((_OWORD *)a1 + 1) = 0u;
  *(_OWORD *)a1 = *a2;
  long long v8 = a2[2];
  *((_OWORD *)a1 + 1) = a2[1];
  *((_OWORD *)a1 + 2) = v8;
  *a2 = 0u;
  a2[1] = 0u;
  return a1;
}

void SparseMatrix::~SparseMatrix(SparseMatrix *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
  }
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, int a2, int a3, const int *a4, int a5, int a6)
{
  *((_DWORD *)this + 10) = a2;
  *((_DWORD *)this + 11) = a6;
  *((_DWORD *)this + 8) = a5 + a3 * a6;
  *((_DWORD *)this + 9) = a3;
  operator new[]();
}

void SparseMatrix::SparseMatrix(SparseMatrix *a1, int a2, int a3, const int **a4, int a5)
{
  uint64_t v7 = *a4;
  long long v8 = a4[1];
  if (v7 == v8)
  {
    int v10 = 0;
    goto LABEL_5;
  }
  unint64_t v9 = (char *)v8 - (char *)v7 - 4;
  if (v9 >= 0x1C)
  {
    uint64_t v12 = (v9 >> 2) + 1;
    char v11 = &v7[v12 & 0x7FFFFFFFFFFFFFF8];
    uint64_t v13 = (int32x4_t *)(v7 + 4);
    int32x4_t v14 = 0uLL;
    uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    int32x4_t v16 = 0uLL;
    do
    {
      int32x4_t v14 = vaddq_s32(v13[-1], v14);
      int32x4_t v16 = vaddq_s32(*v13, v16);
      v13 += 2;
      v15 -= 8;
    }
    while (v15);
    int v10 = vaddvq_s32(vaddq_s32(v16, v14));
    if (v12 == (v12 & 0x7FFFFFFFFFFFFFF8)) {
LABEL_5:
    }
      SparseMatrix::SparseMatrix(a1, a2, a3, v7, v10, a5);
  }
  else
  {
    int v10 = 0;
    char v11 = v7;
  }
  do
  {
    int v17 = *v11++;
    v10 += v17;
  }
  while (v11 != v8);
  goto LABEL_5;
}

{
  const int *v7;
  const int *v8;
  unint64_t v9;
  int v10;
  const int *v11;
  uint64_t v12;
  int32x4_t *v13;
  int32x4_t v14;
  uint64_t v15;
  int32x4_t v16;
  int v17;

  uint64_t v7 = *a4;
  long long v8 = a4[1];
  if (v7 == v8)
  {
    int v10 = 0;
    goto LABEL_5;
  }
  unint64_t v9 = (char *)v8 - (char *)v7 - 4;
  if (v9 >= 0x1C)
  {
    uint64_t v12 = (v9 >> 2) + 1;
    char v11 = &v7[v12 & 0x7FFFFFFFFFFFFFF8];
    uint64_t v13 = (int32x4_t *)(v7 + 4);
    int32x4_t v14 = 0uLL;
    uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    int32x4_t v16 = 0uLL;
    do
    {
      int32x4_t v14 = vaddq_s32(v13[-1], v14);
      int32x4_t v16 = vaddq_s32(*v13, v16);
      v13 += 2;
      v15 -= 8;
    }
    while (v15);
    int v10 = vaddvq_s32(vaddq_s32(v16, v14));
    if (v12 == (v12 & 0x7FFFFFFFFFFFFFF8)) {
LABEL_5:
    }
      SparseMatrix::SparseMatrix(a1, a2, a3, v7, v10, a5);
  }
  else
  {
    int v10 = 0;
    char v11 = v7;
  }
  do
  {
    int v17 = *v11++;
    v10 += v17;
  }
  while (v11 != v8);
  goto LABEL_5;
}

void peridot::PeridotDXP::run_MPDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, peridot::PeridotDepth *a12)
{
  uint64_t v12 = (peridot::PeridotPreProcessOutput *)(a1 + 104320);
  uint64_t v13 = a1 + 42464;
  peridot::PeridotDepth::init(a12);
  peridot::PeridotPreProcessOutput::reset(v12);
  peridot::PeridotDXPPreProcessor::process(v13);
}

void peridot::PeridotDXP::macroProcess_MPDC(uint64_t a1, double a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 21);
  if (*(unsigned char *)(a1 + 21))
  {
    LOBYTE(a2) = *(unsigned char *)(a1 + 20);
    *(float *)&a2 = (float)LODWORD(a2);
    if (v2 <= 7)
    {
      uint64_t v3 = 0;
      float v4 = 0.0;
LABEL_8:
      uint64_t v11 = v2 - v3;
      uint64_t v12 = (float *)(a1 + 4 * v3 + 3464);
      do
      {
        float v13 = *v12++;
        float v4 = v4 + (float)(v13 * *(float *)&a2);
        --v11;
      }
      while (v11);
      goto LABEL_10;
    }
    uint64_t v3 = v2 & 0xF8;
    float32x4_t v5 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
    uint64_t v6 = (float32x4_t *)(a1 + 3480);
    float32x4_t v7 = 0uLL;
    uint64_t v8 = v3;
    float32x4_t v9 = 0uLL;
    do
    {
      float32x4_t v7 = vmlaq_f32(v7, v5, v6[-1]);
      float32x4_t v9 = vmlaq_f32(v9, v5, *v6);
      v6 += 2;
      v8 -= 8;
    }
    while (v8);
    float32x4_t v10 = vaddq_f32(v9, v7);
    float v4 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v10, v10));
    if (v3 != v2) {
      goto LABEL_8;
    }
  }
LABEL_10:
  int32x4_t v14 = operator new(0x18uLL);
  uint64_t v15 = v14;
  int32x4_t v16 = v14;
  int v17 = v14 + 3;
  *int32x4_t v14 = off_270717568;
  v14[2] = 92;
  operator new[]();
}

void sub_258FF829C(_Unwind_Exception *a1)
{
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)(v1 - 160));
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100]((void **)(v1 - 136));
  _Unwind_Resume(a1);
}

void sub_258FF82C4(_Unwind_Exception *exception_object)
{
  *(void *)(v2 - 128) = v1;
  float v4 = *(char **)(v2 - 136);
  if (v4)
  {
    if (v1 != v4)
    {
      float32x4_t v5 = v1 - 24;
      uint64_t v6 = v1 - 24;
      float32x4_t v7 = v1 - 24;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v4;
        uint64_t v6 = v7;
      }
      while (!v9);
    }
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<peridot::ImgHistogram>::__append(void *result, unint64_t a2)
{
  uint64_t v2 = result[2];
  uint64_t v3 = (void *)result[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v2 - (uint64_t)v3) >> 3) < a2)
  {
    unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *result) >> 3);
    unint64_t v5 = v4 + a2;
    if (v4 + a2 <= 0xAAAAAAAAAAAAAAALL)
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v2 - *result) >> 3);
      if (2 * v6 > v5) {
        unint64_t v5 = 2 * v6;
      }
      if (v6 >= 0x555555555555555) {
        unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v7 = v5;
      }
      if (v7)
      {
        if (v7 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v8 = (char *)operator new(24 * v7);
      }
      else
      {
        uint64_t v8 = 0;
      }
      BOOL v9 = &v8[24 * v4];
      *(void *)BOOL v9 = off_270717568;
      *((void *)v9 + 2) = 92;
      operator new[]();
    }
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  if (a2)
  {
    void *v3 = off_270717568;
    v3[2] = 92;
    operator new[]();
  }
  result[1] = v3;
  return result;
}

void peridot::PeridotDXPPreProcessor::process(uint64_t a1)
{
  uint64_t v1 = a1 + 50633;
  std::vector<peridot::ImgHistogram>::vector(&v7, *(unsigned __int8 *)(a1 + 50645));
  std::vector<peridot::ImgHistogram>::vector(&v6, *(unsigned __int8 *)(v1 + 11) * (unint64_t)*(unsigned __int8 *)(v1 + 12));
  std::vector<peridot::ImgHistogram>::vector(&v5, *(unsigned __int8 *)(v1 + 11) * (unint64_t)*(unsigned __int8 *)(v1 + 12));
  std::vector<peridot::ImgHistogram>::vector(&v4, *(unsigned __int8 *)(v1 + 11) * (unint64_t)*(unsigned __int8 *)(v1 + 12));
  std::vector<peridot::ImgHistogram>::vector(&v3, *(unsigned __int8 *)(v1 + 11) * (unint64_t)*(unsigned __int8 *)(v1 + 12));
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = off_270717568;
  v2[2] = 92;
  operator new[]();
}

void sub_258FF9358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33)
{
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100](&a24);
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100](&a27);
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100](&a30);
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100](&a33);
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100]((void **)(v33 - 200));
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100]((void **)(v33 - 176));
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100]((void **)(v33 - 152));
  std::vector<peridot::ImgHistogram>::~vector[abi:ne180100]((void **)(v33 - 128));
  _Unwind_Resume(a1);
}

void sub_258FF93D4()
{
  operator delete(v0);
  JUMPOUT(0x258FF93A4);
}

void sub_258FF93E4()
{
}

void sub_258FF93EC()
{
}

void sub_258FF93F4()
{
}

void sub_258FF93FC()
{
}

void sub_258FF9404()
{
}

void peridot::ImgHistogram::~ImgHistogram(peridot::ImgHistogram *this)
{
  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x25A2D62D0);
}

{
  uint64_t v2;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

void *std::vector<peridot::ImgHistogram>::vector(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    uint64_t v3 = 3 * a2;
    uint64_t v4 = operator new(24 * a2);
    void *v2 = v4;
    v2[1] = v4;
    v2[2] = &v4[v3];
    *uint64_t v4 = off_270717568;
    v4[2] = 92;
    operator new[]();
  }
  return result;
}

void sub_258FF9580(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  uint64_t v4 = (char *)*v1;
  if (*v1)
  {
    if (v2 != v4)
    {
      uint64_t v5 = v2 - 24;
      uint64_t v6 = v5;
      uint64_t v7 = v5;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 24;
        (*v8)(v6);
        v5 -= 24;
        BOOL v9 = v6 == v4;
        uint64_t v6 = v7;
      }
      while (!v9);
      uint64_t v2 = (char *)*v1;
    }
    v1[1] = v4;
    operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void peridot::PeridotPreProcessOutput::reset(peridot::PeridotPreProcessOutput *this)
{
  uint64_t v1 = (char *)this + 14352;
  if (*((unsigned char *)this + 14352))
  {
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset(this, *((unsigned __int8 *)this + 14353), *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 1024), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 2048), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 3072), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 4096), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 5120), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 6144), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 7168), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 0x2000), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 9216), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 10240), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 11264), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 12288), v1[1], *((void *)this + 1792), *((void *)this + 1793));
    peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset((peridot::PeridotPreProcessOutput *)((char *)this + 13312), v1[1], *((void *)this + 1792), *((void *)this + 1793));
  }
  char *v1 = 0;
}

void peridot::PeridotPreProcessOutput::PreProcessorOutSpot::reset(peridot::PeridotPreProcessOutput::PreProcessorOutSpot *this, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!*((unsigned char *)this + 1000)) {
    goto LABEL_5;
  }
  if (*((void *)this + 126) != a3 && *((void *)this + 127) != a4)
  {
    peridot::PeridotPreProcessOutput::PreProcessorOut::destroy(this);
    peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 25);
    peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 50);
    peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 75);
    peridot::PeridotPreProcessOutput::PreProcessorOut::destroy((void *)this + 100);
    *((unsigned char *)this + 1000) = 0;
LABEL_5:
    peridot::PeridotPreProcessOutput::PreProcessorOut::init(this, a2);
    peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 200), a2);
    peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 400), a2);
    peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 600), 1uLL);
    peridot::PeridotPreProcessOutput::PreProcessorOut::init((peridot::PeridotPreProcessOutput::PreProcessorOutSpot *)((char *)this + 800), 1uLL);
    *((void *)this + 127) = a4;
    *((void *)this + 126) = a3;
    *((unsigned char *)this + 1000) = 1;
  }
}

void peridot::PeridotPreProcessOutput::PreProcessorOut::init(peridot::PeridotPreProcessOutput::PreProcessorOut *this, unint64_t a2)
{
  uint64_t v4 = *(unsigned char **)this;
  if (a2 <= (uint64_t)(*((void *)this + 2) - *(void *)this) >> 3) {
    goto LABEL_13;
  }
  if (a2 >> 61) {
    goto LABEL_88;
  }
  uint64_t v5 = (unsigned char *)*((void *)this + 1);
  uint64_t v6 = (char *)operator new(8 * a2);
  uint64_t v7 = v5 - v4;
  uint64_t v8 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFF8];
  BOOL v9 = v8;
  if (v5 != v4)
  {
    if ((unint64_t)(v7 - 8) < 0x58)
    {
      BOOL v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_10:
        uint64_t v16 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v9 - 1) = v16;
        v9 -= 8;
      }
      while (v5 != v4);
      goto LABEL_11;
    }
    BOOL v9 = &v6[(v5 - v4) & 0xFFFFFFFFFFFFFFF8];
    if (v5 - v6 - (v7 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v10 = v7 >> 3;
    unint64_t v11 = ((unint64_t)(v7 - 8) >> 3) + 1;
    uint64_t v12 = &v6[8 * v10 - 16];
    float v13 = (long long *)(v5 - 16);
    uint64_t v14 = v11 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v15 = *v13;
      *((_OWORD *)v12 - 1) = *(v13 - 1);
      *(_OWORD *)uint64_t v12 = v15;
      v12 -= 32;
      v13 -= 2;
      v14 -= 4;
    }
    while (v14);
    BOOL v9 = &v8[-8 * (v11 & 0x3FFFFFFFFFFFFFFCLL)];
    v5 -= 8 * (v11 & 0x3FFFFFFFFFFFFFFCLL);
    if (v11 != (v11 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)this = v9;
  *((void *)this + 1) = v8;
  *((void *)this + 2) = &v6[8 * a2];
  if (v4) {
    operator delete(v4);
  }
LABEL_13:
  int v17 = (unsigned char *)*((void *)this + 3);
  if (a2 <= (uint64_t)(*((void *)this + 5) - (void)v17) >> 3) {
    goto LABEL_25;
  }
  if (a2 >> 61) {
    goto LABEL_88;
  }
  uint64_t v18 = (unsigned char *)*((void *)this + 4);
  uint64_t v19 = (char *)operator new(8 * a2);
  uint64_t v20 = v18 - v17;
  unint64_t v21 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
  int v22 = v21;
  if (v18 != v17)
  {
    if ((unint64_t)(v20 - 8) < 0x58)
    {
      int v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_22:
        uint64_t v29 = *((void *)v18 - 1);
        v18 -= 8;
        *((void *)v22 - 1) = v29;
        v22 -= 8;
      }
      while (v18 != v17);
      goto LABEL_23;
    }
    int v22 = &v19[(v18 - v17) & 0xFFFFFFFFFFFFFFF8];
    if (v18 - v19 - (v20 & 0xFFFFFFFFFFFFFFF8) < 0x20) {
      goto LABEL_22;
    }
    uint64_t v23 = v20 >> 3;
    unint64_t v24 = ((unint64_t)(v20 - 8) >> 3) + 1;
    uint64_t v25 = &v19[8 * v23 - 16];
    unint64_t v26 = (long long *)(v18 - 16);
    uint64_t v27 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v28 = *v26;
      *((_OWORD *)v25 - 1) = *(v26 - 1);
      *(_OWORD *)uint64_t v25 = v28;
      v25 -= 32;
      v26 -= 2;
      v27 -= 4;
    }
    while (v27);
    int v22 = &v21[-8 * (v24 & 0x3FFFFFFFFFFFFFFCLL)];
    v18 -= 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_22;
    }
  }
LABEL_23:
  *((void *)this + 3) = v22;
  *((void *)this + 4) = v21;
  *((void *)this + 5) = &v19[8 * a2];
  if (v17) {
    operator delete(v17);
  }
LABEL_25:
  long long v30 = (unsigned char *)*((void *)this + 6);
  if (a2 <= (uint64_t)(*((void *)this + 8) - (void)v30) >> 3) {
    goto LABEL_37;
  }
  if (a2 >> 61) {
    goto LABEL_88;
  }
  float v31 = (unsigned char *)*((void *)this + 7);
  __int32 v32 = (char *)operator new(8 * a2);
  uint64_t v33 = v31 - v30;
  float v34 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
  uint64_t v35 = v34;
  if (v31 != v30)
  {
    if ((unint64_t)(v33 - 8) < 0x58)
    {
      uint64_t v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_34:
        uint64_t v42 = *((void *)v31 - 1);
        v31 -= 8;
        *((void *)v35 - 1) = v42;
        v35 -= 8;
      }
      while (v31 != v30);
      goto LABEL_35;
    }
    uint64_t v35 = &v32[(v31 - v30) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v31 - &v32[v33 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_34;
    }
    uint64_t v36 = v33 >> 3;
    unint64_t v37 = ((unint64_t)(v33 - 8) >> 3) + 1;
    uint64_t v38 = &v32[8 * v36 - 16];
    float v39 = (long long *)(v31 - 16);
    uint64_t v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v41 = *v39;
      *((_OWORD *)v38 - 1) = *(v39 - 1);
      *(_OWORD *)uint64_t v38 = v41;
      v38 -= 32;
      v39 -= 2;
      v40 -= 4;
    }
    while (v40);
    uint64_t v35 = &v34[-8 * (v37 & 0x3FFFFFFFFFFFFFFCLL)];
    v31 -= 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_34;
    }
  }
LABEL_35:
  *((void *)this + 6) = v35;
  *((void *)this + 7) = v34;
  *((void *)this + 8) = &v32[8 * a2];
  if (v30) {
    operator delete(v30);
  }
LABEL_37:
  std::vector<BOOL>::reserve((uint64_t)this + 72, a2);
  uint64_t v43 = (unsigned char *)*((void *)this + 12);
  if (a2 <= (uint64_t)(*((void *)this + 14) - (void)v43) >> 2) {
    goto LABEL_49;
  }
  if (a2 >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v44 = (unsigned char *)*((void *)this + 13);
  unint64_t v45 = (char *)operator new(4 * a2);
  uint64_t v46 = v44 - v43;
  unint64_t v47 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFFCLL];
  uint64_t v48 = v47;
  if (v44 != v43)
  {
    if ((unint64_t)(v46 - 4) < 0x2C)
    {
      uint64_t v48 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_46:
        int v55 = *((_DWORD *)v44 - 1);
        v44 -= 4;
        *((_DWORD *)v48 - 1) = v55;
        v48 -= 4;
      }
      while (v44 != v43);
      goto LABEL_47;
    }
    uint64_t v48 = &v45[(v44 - v43) & 0xFFFFFFFFFFFFFFFCLL];
    if (v44 - v45 - (v46 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_46;
    }
    uint64_t v49 = v46 >> 2;
    unint64_t v50 = ((unint64_t)(v46 - 4) >> 2) + 1;
    float32x4_t v51 = &v45[4 * v49 - 16];
    float v52 = (long long *)(v44 - 16);
    uint64_t v53 = v50 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v54 = *v52;
      *((_OWORD *)v51 - 1) = *(v52 - 1);
      *(_OWORD *)float32x4_t v51 = v54;
      v51 -= 32;
      v52 -= 2;
      v53 -= 8;
    }
    while (v53);
    uint64_t v48 = &v47[-4 * (v50 & 0x7FFFFFFFFFFFFFF8)];
    v44 -= 4 * (v50 & 0x7FFFFFFFFFFFFFF8);
    if (v50 != (v50 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_46;
    }
  }
LABEL_47:
  *((void *)this + 12) = v48;
  *((void *)this + 13) = v47;
  *((void *)this + 14) = &v45[4 * a2];
  if (v43) {
    operator delete(v43);
  }
LABEL_49:
  float v56 = (unsigned char *)*((void *)this + 15);
  if (a2 <= (uint64_t)(*((void *)this + 17) - (void)v56) >> 3) {
    goto LABEL_61;
  }
  if (a2 >> 61) {
    goto LABEL_88;
  }
  float32x4_t v57 = (unsigned char *)*((void *)this + 16);
  float v58 = (char *)operator new(8 * a2);
  uint64_t v59 = v57 - v56;
  float32x4_t v60 = &v58[(v57 - v56) & 0xFFFFFFFFFFFFFFF8];
  unint64_t v61 = v60;
  if (v57 != v56)
  {
    if ((unint64_t)(v59 - 8) < 0x58)
    {
      unint64_t v61 = &v58[(v57 - v56) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_58:
        uint64_t v68 = *((void *)v57 - 1);
        v57 -= 8;
        *((void *)v61 - 1) = v68;
        v61 -= 8;
      }
      while (v57 != v56);
      goto LABEL_59;
    }
    unint64_t v61 = &v58[(v57 - v56) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v57 - &v58[v59 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_58;
    }
    uint64_t v62 = v59 >> 3;
    unint64_t v63 = ((unint64_t)(v59 - 8) >> 3) + 1;
    unint64_t v64 = &v58[8 * v62 - 16];
    long long v65 = (long long *)(v57 - 16);
    uint64_t v66 = v63 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v67 = *v65;
      *((_OWORD *)v64 - 1) = *(v65 - 1);
      *(_OWORD *)unint64_t v64 = v67;
      v64 -= 32;
      v65 -= 2;
      v66 -= 4;
    }
    while (v66);
    unint64_t v61 = &v60[-8 * (v63 & 0x3FFFFFFFFFFFFFFCLL)];
    v57 -= 8 * (v63 & 0x3FFFFFFFFFFFFFFCLL);
    if (v63 != (v63 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_58;
    }
  }
LABEL_59:
  *((void *)this + 15) = v61;
  *((void *)this + 16) = v60;
  *((void *)this + 17) = &v58[8 * a2];
  if (v56) {
    operator delete(v56);
  }
LABEL_61:
  uint64_t v69 = (unsigned char *)*((void *)this + 18);
  if (a2 <= (uint64_t)(*((void *)this + 20) - (void)v69) >> 3) {
    goto LABEL_73;
  }
  if (a2 >> 61) {
    goto LABEL_88;
  }
  float v70 = (unsigned char *)*((void *)this + 19);
  float32x4_t v71 = (char *)operator new(8 * a2);
  uint64_t v72 = v70 - v69;
  long long v73 = &v71[(v70 - v69) & 0xFFFFFFFFFFFFFFF8];
  long long v74 = v73;
  if (v70 != v69)
  {
    if ((unint64_t)(v72 - 8) < 0x58)
    {
      long long v74 = &v71[(v70 - v69) & 0xFFFFFFFFFFFFFFF8];
      do
      {
LABEL_70:
        uint64_t v81 = *((void *)v70 - 1);
        v70 -= 8;
        *((void *)v74 - 1) = v81;
        v74 -= 8;
      }
      while (v70 != v69);
      goto LABEL_71;
    }
    long long v74 = &v71[(v70 - v69) & 0xFFFFFFFFFFFFFFF8];
    if ((unint64_t)(v70 - &v71[v72 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
      goto LABEL_70;
    }
    uint64_t v75 = v72 >> 3;
    unint64_t v76 = ((unint64_t)(v72 - 8) >> 3) + 1;
    long long v77 = &v71[8 * v75 - 16];
    long long v78 = (long long *)(v70 - 16);
    uint64_t v79 = v76 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v80 = *v78;
      *((_OWORD *)v77 - 1) = *(v78 - 1);
      *(_OWORD *)long long v77 = v80;
      v77 -= 32;
      v78 -= 2;
      v79 -= 4;
    }
    while (v79);
    long long v74 = &v73[-8 * (v76 & 0x3FFFFFFFFFFFFFFCLL)];
    v70 -= 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
    if (v76 != (v76 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_70;
    }
  }
LABEL_71:
  *((void *)this + 18) = v74;
  *((void *)this + 19) = v73;
  *((void *)this + 20) = &v71[8 * a2];
  if (v69) {
    operator delete(v69);
  }
LABEL_73:
  long long v82 = (unsigned char *)*((void *)this + 21);
  if (a2 <= (uint64_t)(*((void *)this + 23) - (void)v82) >> 3) {
    goto LABEL_85;
  }
  if (a2 >> 61) {
LABEL_88:
  }
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  long long v83 = (unsigned char *)*((void *)this + 22);
  long long v84 = (char *)operator new(8 * a2);
  uint64_t v85 = v83 - v82;
  uint64_t v86 = &v84[(v83 - v82) & 0xFFFFFFFFFFFFFFF8];
  long long v87 = v86;
  if (v83 == v82) {
    goto LABEL_83;
  }
  if ((unint64_t)(v85 - 8) < 0x58)
  {
    long long v87 = &v84[(v83 - v82) & 0xFFFFFFFFFFFFFFF8];
    do
    {
LABEL_82:
      uint64_t v94 = *((void *)v83 - 1);
      v83 -= 8;
      *((void *)v87 - 1) = v94;
      v87 -= 8;
    }
    while (v83 != v82);
    goto LABEL_83;
  }
  long long v87 = &v84[(v83 - v82) & 0xFFFFFFFFFFFFFFF8];
  if ((unint64_t)(v83 - &v84[v85 & 0xFFFFFFFFFFFFFFF8]) < 0x20) {
    goto LABEL_82;
  }
  uint64_t v88 = v85 >> 3;
  unint64_t v89 = ((unint64_t)(v85 - 8) >> 3) + 1;
  long long v90 = &v84[8 * v88 - 16];
  long long v91 = (long long *)(v83 - 16);
  uint64_t v92 = v89 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    long long v93 = *v91;
    *((_OWORD *)v90 - 1) = *(v91 - 1);
    *(_OWORD *)long long v90 = v93;
    v90 -= 32;
    v91 -= 2;
    v92 -= 4;
  }
  while (v92);
  long long v87 = &v86[-8 * (v89 & 0x3FFFFFFFFFFFFFFCLL)];
  v83 -= 8 * (v89 & 0x3FFFFFFFFFFFFFFCLL);
  if (v89 != (v89 & 0x3FFFFFFFFFFFFFFCLL)) {
    goto LABEL_82;
  }
LABEL_83:
  *((void *)this + 21) = v87;
  *((void *)this + 22) = v86;
  *((void *)this + 23) = &v84[8 * a2];
  if (v82) {
    operator delete(v82);
  }
LABEL_85:
  if (a2) {
    operator new();
  }
  *((_DWORD *)this + 48) = 0;
}

void sub_258FFA900(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x1081C40CC6EE3FDLL);
  _Unwind_Resume(a1);
}

void std::vector<BOOL>::reserve(uint64_t a1, unint64_t a2)
{
  if (a2 > *(void *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v3 = ((a2 - 1) >> 6) + 1;
    uint64_t v4 = (uint64_t *)operator new(8 * v3);
    uint64_t v5 = *(void **)a1;
    unint64_t v6 = *(void *)(a1 + 8);
    int v7 = v6 & 0x3F;
    unint64_t v8 = (v6 - 1) >> 6;
    if (v6 < 0x41) {
      unint64_t v8 = 0;
    }
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      int v9 = 0;
      int v10 = 0;
      unint64_t v11 = &v5[v6 >> 6];
      uint64_t v12 = v4;
      float v13 = v5;
      do
      {
        uint64_t v14 = 1 << v9;
        if ((*v13 >> v10)) {
          uint64_t v15 = *v12 | v14;
        }
        else {
          uint64_t v15 = *v12 & ~v14;
        }
        uint64_t *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63) {
          int v10 = 0;
        }
        else {
          ++v10;
        }
        v12 += v9 == 63;
        if (v9 == 63) {
          int v9 = 0;
        }
        else {
          ++v9;
        }
      }
      while (v10 != v7 || v13 != v11);
    }
    *(void *)a1 = v4;
    *(void *)(a1 + 16) = v3;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void peridot::PeridotDXP::run(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, float *a5, float *a6, float *a7, peridot::PeridotDepth *this, float a9, float a10)
{
  v36[1] = *MEMORY[0x263EF8340];
  int v17 = (peridot::PeridotPreProcessOutput *)&a1[6520];
  uint64_t v31 = (uint64_t)&a1[2654];
  peridot::PeridotDepth::init(this);
  peridot::PeridotPreProcessOutput::reset(v17);
  uint64_t v18 = 0;
  char v30 = 0;
  float v20 = *(float *)(a3 + 240);
  uint64_t v19 = a3 + 240;
  float v21 = v20;
  v36[0] = *(void *)(v19 - 232);
  if (*(float *)(v19 + 4) > v20) {
    float v21 = *(float *)(v19 + 4);
  }
  if (*(float *)(v19 + 8) > v21) {
    float v21 = *(float *)(v19 + 8);
  }
  if (*(float *)(v19 + 12) > v21) {
    float v21 = *(float *)(v19 + 12);
  }
  if (*(float *)(v19 + 16) > v21) {
    float v21 = *(float *)(v19 + 16);
  }
  if (*(float *)(v19 + 20) > v21) {
    float v21 = *(float *)(v19 + 20);
  }
  if (*(float *)(v19 + 24) > v21) {
    float v21 = *(float *)(v19 + 24);
  }
  if (*(float *)(v19 + 28) > v21) {
    float v21 = *(float *)(v19 + 28);
  }
  if (*(float *)(v19 + 32) > v21) {
    float v21 = *(float *)(v19 + 32);
  }
  if (*(float *)(v19 + 36) > v21) {
    float v21 = *(float *)(v19 + 36);
  }
  if (*(float *)(v19 + 40) > v21) {
    float v21 = *(float *)(v19 + 40);
  }
  if (*(float *)(v19 + 44) > v21) {
    float v21 = *(float *)(v19 + 44);
  }
  if (*(float *)(v19 + 48) > v21) {
    float v21 = *(float *)(v19 + 48);
  }
  int v22 = (unsigned __int8 *)&a1[5890];
  if (*(float *)(v19 + 52) <= v21) {
    float v23 = v21;
  }
  else {
    float v23 = *(float *)(v19 + 52);
  }
  while (!peridot::PeridotDXPPreProcessor::process(v31, a2, v18, (int *)v36, *(unsigned __int8 *)(a4 + v18), v17, a10, v23))
  {
    peridot::PeridotDxpDetector::process((uint64_t)&a1[5846].i64[1], v24, &a1[2657].i64[1], v17, (uint64_t)v22);
    peridot::PeridotDXP::findStrayQSPri(a1->f32, &a1[2657].i64[1], (void **)v17, v22, a6);
    if (v26) {
      break;
    }
    peridot::PeridotDXPRangeEstimation::estimatorNew(a1 + 7418, v18, (const peridot::PeridotDetectorOutput::DetectorOutSpot *)v22, v17, v25, (const peridot::PeridotDxpMacro *)&a1[7429], this);
    if ((a1[1].i32[0] - 1) <= 1)
    {
      BOOL v34 = 0;
      LODWORD(v27) = *(_DWORD *)v19;
      peridot::PeridotDXP::macroProcess((uint64_t)a1, (uint64_t *)v17, a2, v18, *(unsigned char *)(a4 + v18), a5, a6, a7, a9, *(float *)(v19 - 224), v27, &v34, (uint64_t)this);
      BOOL v28 = v34;
      v35[v18] = v34;
      v30 |= v28;
    }
    ++v18;
    ++a7;
    a5 += 2;
    v19 += 4;
    ++a6;
    v22 += 720;
    int v17 = (peridot::PeridotPreProcessOutput *)((char *)v17 + 1024);
    if (v18 == 14)
    {
      if (v30)
      {
        if (v35[0]) {
          *(_DWORD *)(*((void *)this + 16) + 60) |= 0x2000u;
        }
        if (v35[1]) {
          *(_DWORD *)(*((void *)this + 40) + 60) |= 0x2000u;
        }
        if (v35[2]) {
          *(_DWORD *)(*((void *)this + 64) + 60) |= 0x2000u;
        }
        if (v35[3]) {
          *(_DWORD *)(*((void *)this + 88) + 60) |= 0x2000u;
        }
        if (v35[4]) {
          *(_DWORD *)(*((void *)this + 112) + 60) |= 0x2000u;
        }
        if (v35[5]) {
          *(_DWORD *)(*((void *)this + 136) + 60) |= 0x2000u;
        }
        if (v35[6]) {
          *(_DWORD *)(*((void *)this + 160) + 60) |= 0x2000u;
        }
        if (v35[7]) {
          *(_DWORD *)(*((void *)this + 184) + 60) |= 0x2000u;
        }
        if (v35[8]) {
          *(_DWORD *)(*((void *)this + 208) + 60) |= 0x2000u;
        }
        if (v35[9]) {
          *(_DWORD *)(*((void *)this + 232) + 60) |= 0x2000u;
        }
        if (v35[10]) {
          *(_DWORD *)(*((void *)this + 256) + 60) |= 0x2000u;
        }
        if (v35[11]) {
          *(_DWORD *)(*((void *)this + 280) + 60) |= 0x2000u;
        }
        if (v35[12]) {
          *(_DWORD *)(*((void *)this + 304) + 60) |= 0x2000u;
        }
        if (v35[13]) {
          *(_DWORD *)(*((void *)this + 328) + 60) |= 0x2000u;
        }
      }
      return;
    }
  }
}

uint64_t peridot::PeridotDXPRangeEstimation::estimatorNew(float32x4_t *this, uint64_t a2, const peridot::PeridotDetectorOutput::DetectorOutSpot *a3, const peridot::PeridotPreProcessOutput::PreProcessorOutSpot *a4, const unint64_t *a5, const peridot::PeridotDxpMacro *a6, peridot::PeridotDepth *a7)
{
  uint64_t v10 = 0;
  uint64_t v168 = *MEMORY[0x263EF8340];
  float v11 = this->f32[3];
  long long v148 = (char *)a3 + 160;
  long long v149 = (char *)a3 + 400;
  uint64_t v12 = (char *)a3 + 240;
  float v13 = (char *)a3 + 640;
  uint64_t v14 = (char *)a3 + 480;
  double v159 = v11;
  uint64_t v15 = (char *)a7 + 192 * a2;
  uint64_t v16 = v15 + 32;
  int v17 = (uint64_t *)(v15 + 64);
  uint64_t v18 = (float *)(v15 + 56);
  uint64_t v19 = (float *)(v15 + 88);
  float v20 = &this[2].i8[8];
  long long v156 = v13;
  long long v153 = v15;
  long long v154 = v14;
  long long v151 = (float *)(v15 + 56);
  long long v152 = v15 + 32;
  uint64_t v158 = (uint64_t *)(v15 + 64);
  long long v150 = (float *)(v15 + 88);
  do
  {
    if (v10 != 1 || this->i8[0])
    {
      float v21 = v156;
      if (v10)
      {
        float v21 = v149;
        if (v10 != 1)
        {
          if (v10 != 2)
          {
LABEL_10:
            uint64_t v23 = 0;
            uint64_t v24 = v166;
            uint64_t v25 = (unint64_t *)((char *)a3 + 328);
            while (v10 != 2)
            {
              if (v10 == 1)
              {
                uint64_t v36 = (float *)((char *)a3 + 4 * v23 + 276);
                goto LABEL_25;
              }
              float v35 = 0.0;
              if (!v10)
              {
                uint64_t v36 = (float *)((char *)a3 + 4 * v23 + 516);
LABEL_25:
                float v35 = *v36;
              }
              if (v35 <= 0.2)
              {
                float v61 = 1.0;
                if (v10 == 2)
                {
                  float v73 = ((double)*((unint64_t *)a3 + v23) + 1.5) * v159;
                  uint64_t v65 = *(void *)v15;
                  *(float *)(*(void *)v15 + 80 * v23) = v73;
                  float v62 = 0.0;
                  float v63 = 0.0;
                  float v64 = 0.0;
LABEL_149:
                  long long v121 = (_DWORD *)((char *)a3 + 4 * v23);
                  uint64_t v122 = v65 + 80 * v23;
                  *(_DWORD *)(v122 + 8) = v121[9];
                  *(_DWORD *)(v122 + 20) = v121[6];
                  *(_DWORD *)(v122 + 12) = v121[12];
                  *(_DWORD *)(v122 + 4) = v121[15];
                  *(_DWORD *)(v122 + 28) = v121[18];
                  *(void *)(v122 + 48) = 1;
                  long long v123 = (float *)*((void *)a4 + 37);
                  long long v124 = (float *)*((void *)a4 + 38);
                  if (v123 != v124)
                  {
                    long long v125 = v123 + 1;
                    if (v123 + 1 != v124)
                    {
                      float v126 = *v123;
                      unint64_t v127 = v123 + 1;
                      do
                      {
                        float v128 = *v127++;
                        float v129 = v128;
                        if (v126 < v128)
                        {
                          float v126 = v129;
                          long long v123 = v125;
                        }
                        long long v125 = v127;
                      }
                      while (v127 != v124);
                    }
                  }
                  float v130 = *v123;
                  long long v131 = (float *)(v65 + 80 * v23);
                  v131[9] = v130;
                  BOOL v132 = v64 == 0.0;
                  if (v63 != 0.0) {
                    BOOL v132 = 0;
                  }
                  if (v62 != 0.0) {
                    BOOL v132 = 0;
                  }
                  float v133 = v61 / (float)((float)(v64 + (float)(v63 + v62)) + (float)v132);
                  v131[16] = v62 * v133;
                  v131[17] = v63 * v133;
                  v131[18] = v64 * v133;
                  *((float *)v15 + 6) = (float)(*((float *)a4 + 98) * 0.25) / this[4].f32[0];
                  int v30 = *((unsigned __int8 *)a3 + 235);
                  int v31 = *((unsigned __int8 *)a3 + 236);
                  int v32 = *((unsigned __int8 *)a3 + v23 + 237);
LABEL_16:
                  int v33 = v30 | (2 * v31) | (4 * v32);
                  char v34 = 19;
                }
                else
                {
                  if (v10 != 1)
                  {
                    float v62 = 0.0;
                    float v63 = 0.0;
                    float v64 = 0.0;
                    if (v10) {
                      goto LABEL_137;
                    }
                    uint64_t v65 = *v17;
                    *(float *)(*v17 + 80 * v23) = v11 * (float)*(unint64_t *)&v14[8 * v23];
LABEL_141:
                    long long v112 = (_DWORD *)((char *)a3 + 4 * v23);
                    uint64_t v113 = v65 + 80 * v23;
                    *(_DWORD *)(v113 + 8) = v112[129];
                    *(_DWORD *)(v113 + 20) = v112[126];
                    *(_DWORD *)(v113 + 12) = v112[132];
                    *(_DWORD *)(v113 + 4) = v112[135];
                    *(_DWORD *)(v113 + 28) = v112[138];
                    *(void *)(v113 + 48) = 2;
                    uint64_t v114 = (float *)*((void *)a4 + 12);
                    long long v115 = (float *)*((void *)a4 + 13);
                    if (v114 != v115)
                    {
                      long long v116 = v114 + 1;
                      if (v114 + 1 != v115)
                      {
                        float v117 = *v114;
                        long long v118 = v114 + 1;
                        do
                        {
                          float v119 = *v118++;
                          float v120 = v119;
                          if (v117 < v119)
                          {
                            float v117 = v120;
                            uint64_t v114 = v116;
                          }
                          long long v116 = v118;
                        }
                        while (v118 != v115);
                      }
                    }
                    float v26 = *v114;
                    double v27 = (float *)(v65 + 80 * v23);
                    v27[9] = v26;
                    BOOL v28 = v64 == 0.0;
                    if (v63 != 0.0) {
                      BOOL v28 = 0;
                    }
                    if (v62 != 0.0) {
                      BOOL v28 = 0;
                    }
                    float v29 = v61 / (float)((float)(v64 + (float)(v63 + v62)) + (float)v28);
                    v27[16] = v62 * v29;
                    v27[17] = v63 * v29;
                    v27[18] = v64 * v29;
                    *uint64_t v19 = (float)(*((float *)a4 + 48) * 0.25) / this[4].f32[0];
                    int v30 = *((unsigned __int8 *)a3 + 715);
                    int v31 = *((unsigned __int8 *)a3 + 716);
                    int v32 = *((unsigned __int8 *)a3 + v23 + 717);
                    goto LABEL_16;
                  }
                  float v74 = ((double)*(unint64_t *)&v12[8 * v23] + 1.5) * v159;
                  uint64_t v65 = *(void *)v16;
                  *(float *)(*(void *)v16 + 80 * v23) = v74;
                  float v62 = 0.0;
                  float v63 = 0.0;
                  float v64 = 0.0;
LABEL_161:
                  long long v134 = (_DWORD *)((char *)a3 + 4 * v23);
                  uint64_t v135 = v65 + 80 * v23;
                  *(_DWORD *)(v135 + 8) = v134[69];
                  *(_DWORD *)(v135 + 20) = v134[66];
                  *(_DWORD *)(v135 + 12) = v134[72];
                  *(_DWORD *)(v135 + 4) = v134[75];
                  *(_DWORD *)(v135 + 28) = v134[78];
                  *(void *)(v135 + 48) = 3;
                  long long v136 = (float *)*((void *)a4 + 62);
                  long long v137 = (float *)*((void *)a4 + 63);
                  if (v136 != v137)
                  {
                    long long v138 = v136 + 1;
                    if (v136 + 1 != v137)
                    {
                      float v139 = *v136;
                      unint64_t v140 = v136 + 1;
                      do
                      {
                        float v141 = *v140++;
                        float v142 = v141;
                        if (v139 < v141)
                        {
                          float v139 = v142;
                          long long v136 = v138;
                        }
                        long long v138 = v140;
                      }
                      while (v140 != v137);
                    }
                  }
                  float v143 = *v136;
                  long long v144 = (float *)(v65 + 80 * v23);
                  v144[9] = v143;
                  BOOL v145 = v64 == 0.0;
                  if (v63 != 0.0) {
                    BOOL v145 = 0;
                  }
                  if (v62 != 0.0) {
                    BOOL v145 = 0;
                  }
                  float v146 = v61 / (float)((float)(v64 + (float)(v63 + v62)) + (float)v145);
                  v144[16] = v62 * v146;
                  v144[17] = v63 * v146;
                  v144[18] = v64 * v146;
                  float *v18 = (float)(*((float *)a4 + 148) * 0.25) / this[4].f32[0];
                  int v33 = *((unsigned __int8 *)a3 + 475) | (2 * *((unsigned __int8 *)a3 + 476)) | (4
                                                                                               * *((unsigned __int8 *)a3
                                                                                                 + v23
                                                                                                 + 477));
                  char v34 = 24;
                }
                *(_DWORD *)(v65 + 80 * v23 + 60) = *(_DWORD *)(v65 + 80 * v23 + 60) & ((-7 << v34) - 1) | (v33 << v34);
                goto LABEL_18;
              }
              uint64_t v37 = 0;
              float v165 = 0.0;
              uint64_t v164 = 0;
              float v38 = this[9].f32[2];
              uint64_t v39 = *((void *)a4 + 46);
              uint64_t v40 = *((void *)a4 + 71);
              long long v41 = v25;
              uint64_t v42 = (float *)v24;
              uint64_t v43 = *((void *)a4 + 21);
              do
              {
                if (v10 == 2)
                {
                  unint64_t v52 = *((void *)a3 + v23);
                  unint64_t v49 = *(v41 - 30);
                  goto LABEL_38;
                }
                if (v10 == 1)
                {
                  unint64_t v52 = *(void *)&v12[8 * v23];
                  unint64_t v49 = *v41;
LABEL_38:
                  float v53 = (float)v52;
                  unint64_t v51 = *(void *)&v20[8 * v37];
                  unint64_t v48 = vcvtms_u32_f32((float)(v53 + -1.0) / (float)v51);
                  float v50 = 2.0;
                  goto LABEL_40;
                }
                if (v10)
                {
                  unint64_t v49 = 0;
                  unint64_t v48 = 0;
                  unint64_t v51 = 0;
                  float v50 = 0.0;
                }
                else
                {
                  unint64_t v48 = 0;
                  unint64_t v49 = v41[30];
                  float v50 = 0.5;
                  unint64_t v51 = 92;
                }
LABEL_40:
                float v54 = *v42;
                float v45 = 0.0;
                if (*v42 > v38 && v49 && v49 < v51 - 1)
                {
                  uint64_t v55 = v43;
                  if (v10)
                  {
                    uint64_t v55 = v39;
                    if (v10 != 2) {
                      uint64_t v55 = v40;
                    }
                  }
                  uint64_t v56 = *(void *)(*(void *)(v55 + 8 * v37) + 8);
                  float32x4_t v57 = (float *)(v56 + 4 * v49);
                  float v59 = *(v57 - 1);
                  float v58 = *v57;
                  float v60 = *(float *)(v56 + 4 * (v49 + 1));
                  if ((v59 <= *v57 || vabds_f32(v59, v58) < 0.0000001)
                    && (v58 >= v60 || vabds_f32(v60, v58) < 0.0000001))
                  {
                    float32x2_t v44 = (float32x2_t)vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(this[5], v59), this[6], v58), this[7], v60).u64[0];
                    *((float *)&v164 + v37) = (float)((float)((float)(v50 + (float)(v49 + 1))
                                                            + (float)(vmuls_lane_f32(-0.5, v44, 1) / v44.f32[0]))
                                                    + (float)(v51 * v48))
                                            * v11;
                    float v45 = v54;
                  }
                }
                unint64_t v46 = v51 + ~v49;
                unint64_t v47 = this[10].u64[0];
                if (v47 < v46) {
                  unint64_t v46 = this[10].u64[0];
                }
                float *v42 = (float)(v45 * (float)v46) / (float)v47;
                v42 += 3;
                ++v37;
                v41 += 3;
              }
              while (v37 != 3);
              float v61 = 1.0;
              if (!v10)
              {
                uint64_t v75 = (unint64_t *)((char *)a3 + 8 * v23);
                float v70 = v75 + 71;
                float32x4_t v71 = v75 + 74;
                uint64_t v72 = v75 + 77;
LABEL_63:
                float v67 = (float)*v70;
                long long v77 = (float *)v166 + v23;
                float v62 = *v77;
                float v63 = v77[3];
                float v66 = (float)*v71;
                float v68 = (float)*v72;
                float v64 = v77[6];
                goto LABEL_64;
              }
              if (v10 == 1)
              {
                unint64_t v76 = (unint64_t *)((char *)a3 + 8 * v23);
                float v70 = v76 + 41;
                float32x4_t v71 = v76 + 44;
                uint64_t v72 = v76 + 47;
                goto LABEL_63;
              }
              float v66 = 0.0;
              float v63 = 0.0;
              float v62 = 0.0;
              float v67 = 0.0;
              float v64 = 0.0;
              float v68 = 0.0;
              if (v10 == 2)
              {
                uint64_t v69 = (unint64_t *)((char *)a3 + 8 * v23);
                float v70 = v69 + 11;
                float32x4_t v71 = v69 + 14;
                uint64_t v72 = v69 + 17;
                goto LABEL_63;
              }
LABEL_64:
              if (v67 >= v66) {
                float v78 = v67;
              }
              else {
                float v78 = v66;
              }
              if (v78 < v68) {
                float v78 = v68;
              }
              if (v78 <= 0.0) {
                goto LABEL_137;
              }
              float v79 = v78 + 1.0;
              if (v62 <= v38)
              {
                if (v63 <= v38) {
                  goto LABEL_72;
                }
LABEL_80:
                float v63 = (float)((float)(v66 + 1.0) * v63) / v79;
                if (v64 <= v38) {
                  goto LABEL_74;
                }
LABEL_73:
                float v64 = (float)((float)(v68 + 1.0) * v64) / v79;
                goto LABEL_74;
              }
              float v62 = (float)((float)(v67 + 1.0) * v62) / v79;
              if (v63 > v38) {
                goto LABEL_80;
              }
LABEL_72:
              if (v64 > v38) {
                goto LABEL_73;
              }
LABEL_74:
              float v80 = v64 + (float)(v63 + v62);
              float v81 = *(float *)&v164;
              if (v80 <= 0.0)
              {
                unint64_t v84 = *(float *)&v164 > 0.0;
                float v85 = *((float *)&v164 + 1);
                float v86 = v165;
                float v87 = fmaxf(*((float *)&v164 + 1), -0.0) + fmaxf(*(float *)&v164, -0.0);
                if (*((float *)&v164 + 1) > 0.0) {
                  ++v84;
                }
                float v88 = fmaxf(v165, -0.0) + v87;
                if (v165 > 0.0) {
                  ++v84;
                }
                if (v84) {
                  float v88 = v88 / (float)v84;
                }
                if (v10)
                {
                  unint64_t v89 = v16;
                  if (v10 == 1) {
                    goto LABEL_92;
                  }
                  if (v10 == 2)
                  {
                    unint64_t v89 = v15;
LABEL_92:
                    *(float *)(*(void *)v89 + 80 * v23) = v88;
                  }
                  if (v81 <= 0.0) {
                    float v62 = 0.0;
                  }
                  else {
                    float v62 = 1.0;
                  }
                  if (v85 <= 0.0) {
                    float v63 = 0.0;
                  }
                  else {
                    float v63 = 1.0;
                  }
                  if (v86 <= 0.0) {
                    float v64 = 0.0;
                  }
                  else {
                    float v64 = 1.0;
                  }
                  goto LABEL_137;
                }
                *(float *)(*v17 + 80 * v23) = v88;
                if (v81 <= 0.0) {
                  float v62 = 0.0;
                }
                else {
                  float v62 = 1.0;
                }
                if (v85 <= 0.0) {
                  float v63 = 0.0;
                }
                else {
                  float v63 = 1.0;
                }
                if (v86 <= 0.0) {
                  float v64 = 0.0;
                }
                else {
                  float v64 = 1.0;
                }
LABEL_114:
                if (*((float *)a3 + v23 + 129) <= 0.2) {
                  goto LABEL_137;
                }
                uint64_t v163 = 0;
                unint64_t v162 = 0;
                long long v90 = (uint64_t *)*((void *)a4 + 15);
                uint64_t v157 = *v90;
                unint64_t v91 = *(void *)(*v90 + 16);
                if (v91 < 0x171)
                {
                  uint64_t v92 = *v90;
                }
                else
                {
                  peridot_depth_log("Trying to copy histogram of different size");
                  uint64_t v92 = v157;
                  unint64_t v91 = *(void *)(v157 + 16);
                  long long v90 = (uint64_t *)*((void *)a4 + 15);
                }
                unint64_t v162 = v91;
                memcpy(__dst, *(const void **)(v92 + 8), 4 * v91);
                unint64_t v95 = this->u8[8];
                if (v95 < 2)
                {
LABEL_136:
                  peridot::PeridotDxpMacro::getPMF(a6, *(float *)(*v158 + 80 * v23), __dst, *(void *)(*v90 + 16), (float *)&v163 + 1, (float *)&v163, *(double *)v93.i64, *(int32x2_t *)v94.f32);
                  int v110 = v163;
                  int v17 = v158;
                  uint64_t v111 = *v158 + 80 * v23;
                  *(_DWORD *)(v111 + 40) = HIDWORD(v163);
                  *(_DWORD *)(v111 + 44) = v110;
                  uint64_t v15 = v153;
                  uint64_t v14 = v154;
                  uint64_t v18 = v151;
                  uint64_t v16 = v152;
                  uint64_t v19 = v150;
                  goto LABEL_137;
                }
                uint64_t v96 = 1;
                while (2)
                {
                  uint64_t v97 = v90[v96];
                  unint64_t v98 = *(void *)(v97 + 16);
                  if (v98)
                  {
                    uint64_t v99 = *(float32x4_t **)(v97 + 8);
                    if (v98 <= 7
                      || (__dst < &v99->f32[v98] ? (BOOL v100 = v99 >= (float32x4_t *)&__dst[v98]) : (BOOL v100 = 1), !v100))
                    {
                      unint64_t v101 = 0;
                      goto LABEL_133;
                    }
                    unint64_t v101 = v98 & 0xFFFFFFFFFFFFFFF8;
                    long long v102 = v99 + 1;
                    long long v103 = (float32x4_t *)&v161;
                    unint64_t v104 = v98 & 0xFFFFFFFFFFFFFFF8;
                    do
                    {
                      float32x4_t v94 = v103[-1];
                      float32x4_t v93 = vaddq_f32(*v103, *v102);
                      v103[-1] = vaddq_f32(v94, v102[-1]);
                      *long long v103 = v93;
                      v103 += 2;
                      v102 += 2;
                      v104 -= 8;
                    }
                    while (v104);
                    if (v98 != v101)
                    {
LABEL_133:
                      unint64_t v105 = v98 - v101;
                      uint64_t v106 = v101;
                      long long v107 = &__dst[v101];
                      long long v108 = &v99->f32[v106];
                      do
                      {
                        float v109 = *v108++;
                        v93.f32[0] = *v107;
                        *long long v107 = *v107 + v109;
                        ++v107;
                        --v105;
                      }
                      while (v105);
                    }
                  }
                  if (++v96 == v95) {
                    goto LABEL_136;
                  }
                  continue;
                }
              }
              float v82 = (float)((float)((float)(v62 * *(float *)&v164) + (float)(v63 * *((float *)&v164 + 1)))
                          + (float)(v64 * v165))
                  / v80;
              switch(v10)
              {
                case 0:
                  *(float *)(*v17 + 80 * v23) = v82;
                  goto LABEL_114;
                case 1:
                  uint64_t v83 = *(void *)v16;
LABEL_104:
                  *(float *)(v83 + 80 * v23) = v82;
                  break;
                case 2:
                  uint64_t v83 = *(void *)v15;
                  goto LABEL_104;
              }
LABEL_137:
              switch(v10)
              {
                case 2:
                  uint64_t v65 = *(void *)v15;
                  goto LABEL_149;
                case 1:
                  uint64_t v65 = *(void *)v16;
                  goto LABEL_161;
                case 0:
                  uint64_t v65 = *v17;
                  goto LABEL_141;
              }
LABEL_18:
              ++v23;
              uint64_t v24 = (_OWORD *)((char *)v24 + 4);
              ++v25;
              if (v23 == 3) {
                goto LABEL_2;
              }
            }
            uint64_t v36 = (float *)((char *)a3 + 4 * v23 + 36);
            goto LABEL_25;
          }
          float v21 = v148;
        }
      }
      long long v22 = *((_OWORD *)v21 + 1);
      v166[0] = *(_OWORD *)v21;
      v166[1] = v22;
      int v167 = *((_DWORD *)v21 + 8);
      goto LABEL_10;
    }
LABEL_2:
    ++v10;
  }
  while (v10 != 3);
  return 0;
}

uint64_t peridot::PeridotDXPPreProcessor::process(uint64_t a1, void *a2, uint64_t _X2, int *a4, uint64_t a5, peridot::PeridotPreProcessOutput::PreProcessorOutSpot *a6, float a7, float a8)
{
  unint64_t v8 = a4;
  uint64_t v9 = _X2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 50645);
  if (*(unsigned char *)(a1 + 50645) && *(unsigned char *)(a1 + 50644))
  {
    uint64_t v11 = 0;
    uint64_t v12 = *(void *)(a1 + 50648);
    uint64_t v13 = *a2 + 640 * _X2;
    uint64_t v14 = 9280 * *(unsigned __int8 *)(a1 + 50644);
    do
    {
      uint64_t v15 = 0;
      uint64_t v16 = *(float32x4_t **)(v12 + 24 * v11 + 8);
      v17.i32[0] = v16[22].i32[3];
      do
      {
        _X2 = v13 + v15;
        __asm { PRFM            #0, [X2,#0x2580] }
        uint16x8_t v32 = *(uint16x8_t *)(v13 + v15 + 320);
        uint16x8_t v33 = *(uint16x8_t *)(v13 + v15 + 336);
        float32x4_t v34 = vcvtq_f32_u32(vmovl_high_u16(v32));
        float32x4_t v35 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v32.i8));
        float32x4_t v36 = vcvtq_f32_u32(vmovl_high_u16(v33));
        float32x4_t v37 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v33.i8));
        __asm
        {
          PRFM            #0, [X2,#0x25C0]
          PRFM            #0, [X2,#0x2600]
        }
        if (v15)
        {
          float32x4_t v40 = vaddq_f32(v16[1], v34);
          float32x4_t v41 = vaddq_f32(v16[3], v36);
          float32x4_t v42 = vaddq_f32(v16[2], v37);
          *uint64_t v16 = vaddq_f32(*v16, v35);
          v16[1] = v40;
          v16[2] = v42;
          v16[3] = v41;
          uint16x8_t v43 = *(uint16x8_t *)(_X2 + 352);
          uint16x8_t v44 = *(uint16x8_t *)(_X2 + 368);
          float32x4_t v45 = vcvtq_f32_u32(vmovl_high_u16(v44));
          float32x4_t v46 = vaddq_f32(v16[5], vcvtq_f32_u32(vmovl_high_u16(v43)));
          float32x4_t v47 = vaddq_f32(v16[6], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)));
          float32x4_t v48 = vaddq_f32(v16[7], v45);
          v16[4] = vaddq_f32(v16[4], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v43.i8)));
          v16[5] = v46;
          v16[6] = v47;
          v16[7] = v48;
          uint16x8_t v49 = *(uint16x8_t *)(_X2 + 384);
          uint16x8_t v50 = *(uint16x8_t *)(_X2 + 400);
          float32x4_t v51 = vcvtq_f32_u32(vmovl_high_u16(v50));
          float32x4_t v52 = vaddq_f32(v16[9], vcvtq_f32_u32(vmovl_high_u16(v49)));
          float32x4_t v53 = vaddq_f32(v16[10], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v50.i8)));
          float32x4_t v54 = vaddq_f32(v16[11], v51);
          v16[8] = vaddq_f32(v16[8], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v49.i8)));
          v16[9] = v52;
          v16[10] = v53;
          v16[11] = v54;
          uint16x8_t v55 = *(uint16x8_t *)(_X2 + 416);
          uint16x8_t v56 = *(uint16x8_t *)(_X2 + 432);
          float32x4_t v57 = vcvtq_f32_u32(vmovl_high_u16(v56));
          float32x4_t v58 = vaddq_f32(v16[13], vcvtq_f32_u32(vmovl_high_u16(v55)));
          float32x4_t v59 = vaddq_f32(v16[14], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v56.i8)));
          float32x4_t v60 = vaddq_f32(v16[15], v57);
          v16[12] = vaddq_f32(v16[12], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v55.i8)));
          v16[13] = v58;
          v16[14] = v59;
          v16[15] = v60;
          uint16x8_t v61 = *(uint16x8_t *)(_X2 + 448);
          uint16x8_t v62 = *(uint16x8_t *)(_X2 + 464);
          float32x4_t v63 = vcvtq_f32_u32(vmovl_high_u16(v62));
          float32x4_t v64 = v16[17];
          float32x4_t v65 = vaddq_f32(v16[18], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v62.i8)));
          float32x4_t v66 = vaddq_f32(v16[19], v63);
          v16[16] = vaddq_f32(v16[16], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v61.i8)));
          v16[17] = vaddq_f32(v64, vcvtq_f32_u32(vmovl_high_u16(v61)));
          v16[18] = v65;
          v16[19] = v66;
          float32x4_t v67 = vaddq_f32(v16[20], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(_X2 + 480))));
          float32x4_t v68 = vaddq_f32(v16[21], vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(_X2 + 488))));
          v16[20] = v67;
          v16[21] = v68;
          v67.i16[0] = *(_WORD *)(_X2 + 496);
          v67.f32[0] = v16[22].f32[0] + (float)v67.u32[0];
          v16[22].i32[0] = v67.i32[0];
          v67.i16[0] = *(_WORD *)(_X2 + 498);
          v67.f32[0] = v16[22].f32[1] + (float)v67.u32[0];
          v16[22].i32[1] = v67.i32[0];
          v67.i16[0] = *(_WORD *)(_X2 + 500);
          v68.i32[0] = v16[22].i32[2];
          float v27 = v68.f32[0] + (float)v67.u32[0];
          v68.i16[0] = *(_WORD *)(_X2 + 502);
          v17.f32[0] = v17.f32[0] + (float)v68.u32[0];
        }
        else
        {
          *uint64_t v16 = v35;
          v16[1] = v34;
          v16[2] = v37;
          v16[3] = v36;
          uint16x8_t v18 = *(uint16x8_t *)(_X2 + 352);
          uint16x8_t v19 = *(uint16x8_t *)(_X2 + 368);
          v16[4] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v18.i8));
          v16[5] = vcvtq_f32_u32(vmovl_high_u16(v18));
          v16[6] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v19.i8));
          v16[7] = vcvtq_f32_u32(vmovl_high_u16(v19));
          uint16x8_t v20 = *(uint16x8_t *)(_X2 + 384);
          uint16x8_t v21 = *(uint16x8_t *)(_X2 + 400);
          v16[8] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v20.i8));
          v16[9] = vcvtq_f32_u32(vmovl_high_u16(v20));
          v16[10] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v21.i8));
          v16[11] = vcvtq_f32_u32(vmovl_high_u16(v21));
          uint16x8_t v22 = *(uint16x8_t *)(_X2 + 416);
          uint16x8_t v23 = *(uint16x8_t *)(_X2 + 432);
          v16[12] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v22.i8));
          v16[13] = vcvtq_f32_u32(vmovl_high_u16(v22));
          v16[14] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23.i8));
          v16[15] = vcvtq_f32_u32(vmovl_high_u16(v23));
          uint16x8_t v24 = *(uint16x8_t *)(_X2 + 448);
          uint16x8_t v25 = *(uint16x8_t *)(_X2 + 464);
          v16[16] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v24.i8));
          v16[17] = vcvtq_f32_u32(vmovl_high_u16(v24));
          v16[18] = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v25.i8));
          v16[19] = vcvtq_f32_u32(vmovl_high_u16(v25));
          float32x4_t v17 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(_X2 + 480)));
          float32x4_t v26 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)(_X2 + 488)));
          v16[20] = v17;
          v16[21] = v26;
          v17.i16[0] = *(_WORD *)(_X2 + 496);
          v17.f32[0] = (float)v17.u32[0];
          v16[22].i32[0] = v17.i32[0];
          v17.i16[0] = *(_WORD *)(_X2 + 498);
          v17.f32[0] = (float)v17.u32[0];
          v16[22].i32[1] = v17.i32[0];
          v17.i16[0] = *(_WORD *)(_X2 + 500);
          float v27 = (float)v17.u32[0];
          v17.i16[0] = *(_WORD *)(_X2 + 502);
          v17.f32[0] = (float)v17.u32[0];
        }
        v16[22].f32[2] = v27;
        v16[22].i32[3] = v17.i32[0];
        v15 += 9280;
      }
      while (v14 != v15);
      ++v11;
      v13 += v14;
    }
    while (v11 != v10);
    uint64_t v69 = *(unsigned __int8 *)(a1 + 50644);
    if (*(unsigned char *)(a1 + 50644))
    {
      uint64_t v70 = 0;
      uint64_t v71 = *(void *)(a1 + 50672);
      uint64_t v72 = *(void *)(a1 + 50696);
      uint64_t v73 = *(void *)(a1 + 50720);
      uint64_t v74 = *a2 + 640 * v9 + 512;
      do
      {
        _X2 = 0;
        a4 = (int *)(v70 * v69);
        uint64_t v75 = (uint16x4_t *)v74;
        do
        {
          uint64_t v76 = 24 * ((void)a4 + _X2);
          long long v77 = *(float **)(v71 + v76 + 8);
          float v78 = *(float **)(v72 + v76 + 8);
          float v79 = *(float **)(v73 + v76 + 8);
          float v80 = v77 + 92;
          float v81 = v78 + 92;
          BOOL v83 = v77 < v79 + 92 && v79 < v80;
          BOOL v85 = v78 < v79 + 92 && v79 < v81;
          BOOL v86 = v78 >= v80 || v77 >= v81;
          if (!v86 || v83 || v85)
          {
            for (uint64_t i = 0; i != 92; ++i)
            {
              v17.i16[0] = v75->i16[i];
              float v92 = (float)v17.u32[0];
              float *v77 = v92;
              LOWORD(v92) = v75[24].i16[i];
              float v93 = (float)LODWORD(v92);
              *v78++ = v93;
              float v94 = *v77++;
              v17.f32[0] = v94 + v93;
              *v79++ = v17.f32[0];
            }
          }
          else
          {
            uint64_t v87 = 0;
            float v88 = v75;
            do
            {
              float32x4_t v89 = vcvtq_f32_u32(vmovl_u16(*v88));
              *(float32x4_t *)&v77[v87] = v89;
              float32x4_t v90 = vcvtq_f32_u32(vmovl_u16(v88[24]));
              *(float32x4_t *)&v78[v87] = v90;
              float32x4_t v17 = vaddq_f32(v89, v90);
              *(float32x4_t *)&v79[v87] = v17;
              v87 += 4;
              ++v88;
            }
            while (v87 != 92);
          }
          ++_X2;
          v75 += 1160;
        }
        while (_X2 != v69);
        ++v70;
        v74 += 9280 * v69;
      }
      while (v70 != v10);
    }
  }
  if (a8 < 0.0)
  {
    peridot_depth_log("Error: global T0 is negative", a2, _X2, a4, a5, a6, v9, v8);
    return 5;
  }
  *(double *)v96.i64 = ceil(a8 * 1.0e10) + 45.0;
  unint64_t v97 = (unint64_t)*(double *)v96.i64;
  unint64_t v98 = 91;
  if ((unint64_t)*(double *)v96.i64 < 0x5B) {
    unint64_t v98 = (unint64_t)*(double *)v96.i64;
  }
  if ((*(_DWORD *)(a1 + 50640) - 1) > 1) {
    goto LABEL_78;
  }
  uint64_t v99 = a2[1];
  uint64_t v100 = *(void *)(*(void *)(a1 + 50768) + 8);
  uint64_t v101 = *(void *)(*(void *)(a1 + 50744) + 8);
  unint64_t v102 = v98 + 1;
  BOOL v104 = v98 < 7 || (unint64_t)(v100 - v101) < 0x20;
  if ((a5 & 1) == 0)
  {
    if (v104)
    {
      uint64_t v106 = 0;
    }
    else
    {
      uint64_t v106 = v102 & 0xF8;
      long long v118 = (uint16x8_t *)(v99 + 640 * v9);
      float v119 = *(float32x4_t **)(*(void *)(a1 + 50744) + 8);
      float v120 = *(float32x4_t **)(*(void *)(a1 + 50768) + 8);
      uint64_t v121 = v106;
      do
      {
        uint16x8_t v122 = v118[44];
        *float v119 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v122.i8));
        v119[1] = vcvtq_f32_u32(vmovl_high_u16(v122));
        v119 += 2;
        uint16x8_t v123 = v118[20];
        float32x4_t v124 = vcvtq_f32_u32(vmovl_high_u16(v123));
        float32x4_t v96 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v123.i8));
        *float v120 = v96;
        v120[1] = v124;
        v120 += 2;
        ++v118;
        v121 -= 8;
      }
      while (v121);
      if (v102 == v106) {
        goto LABEL_67;
      }
    }
    uint64_t v125 = v98 - v106 + 1;
    float v126 = (_DWORD *)(v100 + 4 * v106);
    uint64_t v127 = v99 + 640 * v9 + 2 * v106;
    float v128 = (float *)(v101 + 4 * v106);
    do
    {
      v96.i16[0] = *(_WORD *)(v127 + 704);
      float v129 = (float)v96.u32[0];
      *v128++ = v129;
      LOWORD(v129) = *(_WORD *)(v127 + 320);
      v96.f32[0] = (float)LODWORD(v129);
      *v126++ = v96.i32[0];
      v127 += 2;
      --v125;
    }
    while (v125);
    goto LABEL_67;
  }
  if (v104)
  {
    uint64_t v105 = 0;
LABEL_59:
    uint64_t v113 = v98 - v105 + 1;
    uint64_t v114 = (_DWORD *)(v100 + 4 * v105);
    long long v115 = (__int16 *)(640 * v9 + 2 * v105 + v99 + 512);
    long long v116 = (float *)(v101 + 4 * v105);
    do
    {
      v96.i16[0] = *v115;
      float v117 = (float)v96.u32[0];
      *v116++ = v117;
      LOWORD(v117) = *(v115 - 96);
      v96.f32[0] = (float)LODWORD(v117);
      *v114++ = v96.i32[0];
      ++v115;
      --v113;
    }
    while (v113);
    goto LABEL_67;
  }
  long long v107 = (uint16x8_t *)(v99 + 640 * v9 + 320);
  uint64_t v105 = v102 & 0xF8;
  long long v108 = *(float32x4_t **)(*(void *)(a1 + 50744) + 8);
  float v109 = *(float32x4_t **)(*(void *)(a1 + 50768) + 8);
  uint64_t v110 = v105;
  do
  {
    uint16x8_t v111 = v107[12];
    float32x4_t *v108 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v111.i8));
    v108[1] = vcvtq_f32_u32(vmovl_high_u16(v111));
    v108 += 2;
    uint16x8_t v112 = *v107++;
    float32x4_t v96 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v112.i8));
    *float v109 = v96;
    v109[1] = vcvtq_f32_u32(vmovl_high_u16(v112));
    v109 += 2;
    v110 -= 8;
  }
  while (v110);
  if (v102 != v105) {
    goto LABEL_59;
  }
LABEL_67:
  if (v97 <= 0x5A)
  {
    if (v98 > 0x4F) {
      goto LABEL_74;
    }
    uint64_t v130 = 4 * v98;
    if (4 * v98 + v100 - (4 * v98 + v101) < 0x20) {
      goto LABEL_74;
    }
    unint64_t v131 = (91 - v98) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v132 = v130 + 4;
    float v133 = (_OWORD *)(v100 + v130 + 4);
    long long v134 = (_OWORD *)(v101 + v132);
    unint64_t v135 = v131;
    do
    {
      _OWORD *v134 = 0uLL;
      v134[1] = 0uLL;
      v134 += 2;
      *float v133 = 0uLL;
      v133[1] = 0uLL;
      v133 += 2;
      v135 -= 8;
    }
    while (v135);
    if (91 - v98 != v131)
    {
      v98 += v131;
LABEL_74:
      unint64_t v136 = 90 - v98;
      if (v98 > 0x5A) {
        unint64_t v136 = 0;
      }
      unint64_t v137 = v136 + 1;
      uint64_t v138 = 4 * v98 + 4;
      float v139 = (_DWORD *)(v100 + v138);
      unint64_t v140 = (_DWORD *)(v101 + v138);
      do
      {
        *v140++ = 0;
        *v139++ = 0;
        --v137;
      }
      while (v137);
    }
  }
LABEL_78:
  peridot::PeridotDXPPreProcessor::process_inner((peridot::PeridotDXPPreProcessor *)a1, (uint64_t *)(a1 + 50648), (void *)(a1 + 50696), (void *)(a1 + 50720), (const peridot::ImgHistogram **)(a1 + 50744), (const peridot::ImgHistogram **)(a1 + 50768), a7, v9, v8, a6);
  return 0;
}

uint64_t peridot::PeridotDXPPreProcessor::process_inner(peridot::PeridotDXPPreProcessor *a1, uint64_t *a2, void *a3, void *a4, const peridot::ImgHistogram **a5, const peridot::ImgHistogram **a6, float a7, uint64_t a8, int *a9, peridot::PeridotPreProcessOutput::PreProcessorOutSpot *a10)
{
  uint64_t v10 = a6;
  uint64_t v11 = a5;
  uint64_t v90 = *MEMORY[0x263EF8340];
  uint64_t v12 = (char *)a1 + 49776;
  float v13 = 0.0;
  float32x4_t v67 = a1;
  if ((float)(a7 + -3.0) < -2.0)
  {
    uint64_t v14 = *((unsigned __int8 *)a1 + 50645);
    if (*((unsigned char *)a1 + 50645))
    {
      uint64_t v15 = *a2;
      float v16 = (float)v14;
      if (v14 == 1)
      {
        uint64_t v17 = 0;
        float v18 = 1.0 / v16;
LABEL_8:
        uint64_t v25 = v14 - v17;
        float32x4_t v26 = (float **)(v15 + 24 * v17 + 8);
        do
        {
          float v27 = *v26;
          v26 += 3;
          float v13 = v13 + (float)(*v27 * v18);
          --v25;
        }
        while (v25);
        goto LABEL_10;
      }
      uint64_t v17 = v14 & 0xFE;
      uint16x8_t v19 = (float **)(v15 + 32);
      float v20 = 0.0;
      uint64_t v21 = v17;
      float v22 = 0.0;
      float v18 = 1.0 / v16;
      do
      {
        uint16x8_t v23 = *(v19 - 3);
        uint16x8_t v24 = *v19;
        v19 += 6;
        float v20 = v20 + (float)(*v23 * v18);
        float v22 = v22 + (float)(*v24 * v18);
        v21 -= 2;
      }
      while (v21);
      float v13 = v22 + v20;
      if (v17 != v14) {
        goto LABEL_8;
      }
    }
  }
LABEL_10:
  BOOL v28 = (char *)a1 + 50792;
  float v29 = fminf((float)*a9, (float)a9[1]);
  int v30 = *((_DWORD *)a1 + 12660);
  float v31 = 0.0;
  if (v30 == 2)
  {
    float v32 = 0.0;
    if (v29 >= -2.0) {
      goto LABEL_19;
    }
LABEL_18:
    float v31 = **((float **)*a5 + 1);
    float v32 = **((float **)*a6 + 1);
    goto LABEL_19;
  }
  BOOL v33 = v30 == 1 && v29 < -2.0;
  float v32 = 0.0;
  if (v33) {
    goto LABEL_18;
  }
LABEL_19:
  char v79 = 0;
  __int16 v78 = 0;
  char v77 = 0;
  __int16 v76 = 0;
  char v75 = 0;
  __int16 v74 = 0;
  int v89 = 0;
  uint64_t __src = 0;
  int v87 = 0;
  uint64_t v86 = 0;
  int v85 = 0;
  uint64_t v84 = 0;
  BOOL v73 = 0;
  float v72 = 0.0;
  LODWORD(v34) = *((unsigned __int8 *)a1 + 50645);
  if (*((unsigned char *)a1 + 50645))
  {
    unint64_t v35 = 0;
    do
    {
      peridot::PeridotDXPPreProcessor::equalizer(v67, (const peridot::ImgHistogram *)(*a2 + 24 * v35), (uint64_t)a3, v12[858], *((float *)v67 + v35 + 12438), *((unsigned char *)v67 + 8), v13, 0, (peridot::ImgHistogram *)(*(void *)v28 + 24 * v35), (peridot::ImgHistogram *)(*((void *)v28 + 3) + 24 * v35), &v73, &v72);
      *((unsigned char *)&v78 + v35) = v73;
      *((float *)&__src + v35) = v72 - **(float **)(*(void *)v28 + 24 * v35 + 8);
      unint64_t v40 = v12[868];
      if (v12[868])
      {
        unint64_t v41 = 0;
        float32x4_t v42 = (float *)((char *)v67 + 4 * v35 + 49764);
        float v39 = 0.0;
        float v38 = 0.0;
        do
        {
          unint64_t v43 = v41 + v35 * v40;
          unsigned __int8 v44 = v12[857] + v12[856];
          float32x4_t v45 = v12;
          unsigned int v46 = *(void *)(*((void *)v67 + 97) + 8 * v35) / v40;
          float32x4_t v47 = v42;
          peridot::PeridotDXPPreProcessor::equalizer(v67, (const peridot::ImgHistogram *)(*a4 + 24 * v43), (uint64_t)a3, v44, *v42, *((unsigned char *)v67 + 16), 0.0, v46, (peridot::ImgHistogram *)(*((void *)v28 + 6) + 24 * v43), (peridot::ImgHistogram *)(*((void *)v28 + 9) + 24 * v43), &v73, &v72);
          BOOL v48 = v73;
          *((unsigned char *)&v76 + v35) = (*((unsigned __int8 *)&v76 + v35) | v73) != 0;
          float v49 = v72;
          float v36 = fmaxf(*((float *)&v86 + v35), v72);
          *((float *)&v86 + v35) = v36;
          float v50 = **(float **)(*((void *)v28 + 6) + 24 * v43 + 8);
          if (*(unsigned char *)v67)
          {
            peridot::PeridotDXPPreProcessor::equalizer(v67, (const peridot::ImgHistogram *)(*a3 + 24 * v43), (uint64_t)a3, v45[857], *v47, *((unsigned char *)v67 + 16), 0.0, v46, (peridot::ImgHistogram *)(*((void *)v28 + 12) + 24 * v43), (peridot::ImgHistogram *)(*((void *)v28 + 15) + 24 * v43), &v73, &v72);
            BOOL v48 = v73;
            float v49 = v72;
          }
          *((unsigned char *)&v74 + v35) = (*((unsigned __int8 *)&v74 + v35) | v48) != 0;
          float v39 = v50 + v39;
          float v37 = fmaxf(*((float *)&v84 + v35), v49);
          *((float *)&v84 + v35) = v37;
          float v38 = **(float **)(*((void *)v28 + 12) + 24 * v43 + 8) + v38;
          ++v41;
          unint64_t v40 = v45[868];
          uint64_t v12 = v45;
          float32x4_t v42 = (float *)((char *)v67 + 4 * v35 + 49764);
        }
        while (v41 < v40);
      }
      else
      {
        float v36 = *((float *)&v86 + v35);
        float v37 = *((float *)&v84 + v35);
        float v38 = 0.0;
        float v39 = 0.0;
      }
      *((float *)&v86 + v35) = v36 - (float)(v39 / (float)v40);
      *((float *)&v84 + v35++) = v37 - (float)(v38 / (float)v40);
      unint64_t v34 = v12[869];
    }
    while (v35 < v34);
    int v30 = *((_DWORD *)v12 + 216);
    uint64_t v11 = a5;
    uint64_t v10 = a6;
    a1 = v67;
  }
  char v71 = 0;
  __int16 v70 = 0;
  int v83 = 0;
  uint64_t v82 = 0;
  char v69 = 0;
  __int16 v68 = 0;
  int v81 = 0;
  uint64_t v80 = 0;
  if ((v30 - 1) < 2 && *((unsigned char *)a1 + 1))
  {
    peridot::PeridotDXPPreProcessor::equalizer(a1, *v11, (uint64_t)a3, v12[860], *(float *)v12, *((unsigned char *)a1 + 40), v31, 0, *((peridot::ImgHistogram **)v28 + 30), *((peridot::ImgHistogram **)a1 + 6382), &v73, &v72);
    LOBYTE(v70) = v73;
    *(float *)&uint64_t v82 = v72 - **(float **)(*((void *)v28 + 30) + 8);
    peridot::PeridotDXPPreProcessor::equalizer(v67, *v10, v51, v12[861], *(float *)v12, *((unsigned char *)v67 + 40), v32, 0, *((peridot::ImgHistogram **)v28 + 18), *((peridot::ImgHistogram **)v28 + 21), &v73, &v72);
    a1 = v67;
    LOBYTE(v68) = v73;
    *(float *)&uint64_t v80 = v72 - **(float **)(*((void *)v28 + 18) + 8);
    LODWORD(v34) = v12[869];
  }
  int v52 = peridot::PeridotDXPPreProcessor::interleave((int)a1, (int)a2, (void *)a1 + 6352, (uint64_t *)a1 + 6349, (unsigned __int8 *)&v78, &__src, a2, *((void *)a1 + 3), v34, v12[858], a10);
  int v54 = peridot::PeridotDXPPreProcessor::interleave(v52, v53, (void *)v67 + 6358, (uint64_t *)v67 + 6355, (unsigned __int8 *)&v76, &v86, a4, *((void *)v67 + 4), v12[869], v12[857] + v12[856], (void *)a10 + 25);
  float32x4_t v58 = v67;
  if (*(unsigned char *)v67)
  {
    int v54 = peridot::PeridotDXPPreProcessor::interleave(v54, v55, (void *)v67 + 6364, (uint64_t *)v67 + 6361, (unsigned __int8 *)&v74, &v84, a3, *((void *)v67 + 4), v12[869], v12[857], (void *)a10 + 50);
    float32x4_t v58 = v67;
  }
  if ((*((_DWORD *)v12 + 216) - 1) <= 1 && *((unsigned char *)v58 + 1))
  {
    int v59 = peridot::PeridotDXPPreProcessor::interleave(v54, v55, (void *)v58 + 6382, (uint64_t *)v58 + 6379, (unsigned __int8 *)&v70, &v82, v11, *((void *)v58 + 6), 1, v12[860], (void *)a10 + 100);
    peridot::PeridotDXPPreProcessor::interleave(v59, v60, (void *)v67 + 6370, (uint64_t *)v67 + 6367, (unsigned __int8 *)&v68, &v80, v10, *((void *)v67 + 6), 1, v12[861], (void *)a10 + 75);
    float32x4_t v58 = v67;
  }
  peridot::PeridotDXPBaselineRemoval::process((peridot::PeridotDXPPreProcessor *)((char *)v58 + 56), a10, v56, v57);
  return 0;
}

uint64_t peridot::PeridotDXPPreProcessor::equalizer(peridot::PeridotDXPPreProcessor *this, const peridot::ImgHistogram *a2, uint64_t a3, unsigned __int8 a4, float a5, unsigned __int8 a6, float a7, unsigned int a8, peridot::ImgHistogram *a9, peridot::ImgHistogram *a10, BOOL *a11, float *a12)
{
  uint64_t v12 = (void *)MEMORY[0x270FA5388](this, a2, a3, a5);
  uint64_t v21 = v18;
  uint64_t v22 = v17;
  uint64_t v23 = v13;
  uint16x8_t v24 = a12;
  uint64_t v210 = *MEMORY[0x263EF8340];
  *a11 = 0;
  if (!v14)
  {
    if (*(void *)(v13 + 16) != *(void *)(v18 + 16)) {
      peridot_depth_log("Trying to copy histogram of different size");
    }
    uint64_t v29 = *(void *)(v21 + 8);
    if (v29) {
      MEMORY[0x25A2D62A0](v29, 0x1000C8052888210);
    }
    *(void *)(v21 + 16) = *(void *)(v23 + 16);
    operator new[]();
  }
  unsigned int v25 = v16;
  float v26 = *(float *)v19.i32;
  v185[138] = 92;
  *(float *)v19.i32 = (float)v14 * *(float *)v19.i32;
  float v27 = *(float32x4_t **)(v13 + 8);
  if ((unint64_t)((char *)&__src - (char *)v27) > 0x1F)
  {
    __asm { FMOV            V5.4S, #1.0 }
    float32x4_t v34 = vdivq_f32(_Q5, (float32x4_t)vdupq_lane_s32(v19, 0));
    float32x4_t v35 = vmulq_f32(v27[1], v34);
    float32x4_t __src = vmulq_f32(*v27, v34);
    float32x4_t v164 = v35;
    float32x4_t v36 = vmulq_f32(v27[3], v34);
    float32x4_t v165 = vmulq_f32(v27[2], v34);
    float32x4_t v166 = v36;
    float32x4_t v37 = vmulq_f32(v27[5], v34);
    float32x4_t v167 = vmulq_f32(v27[4], v34);
    float32x4_t v168 = v37;
    float32x4_t v38 = vmulq_f32(v27[7], v34);
    float32x4_t v169 = vmulq_f32(v27[6], v34);
    float32x4_t v170 = v38;
    float32x4_t v39 = vmulq_f32(v27[9], v34);
    float32x4_t v171 = vmulq_f32(v27[8], v34);
    float32x4_t v172 = v39;
    float32x4_t v40 = vmulq_f32(v27[11], v34);
    float32x4_t v173 = vmulq_f32(v27[10], v34);
    float32x4_t v174 = v40;
    float32x4_t v41 = vmulq_f32(v27[13], v34);
    float32x4_t v175 = vmulq_f32(v27[12], v34);
    float32x4_t v176 = v41;
    float32x4_t v42 = vmulq_f32(v27[15], v34);
    float32x4_t v177 = vmulq_f32(v27[14], v34);
    float32x4_t v178 = v42;
    float32x4_t v43 = vmulq_f32(v27[17], v34);
    float32x4_t v179 = vmulq_f32(v27[16], v34);
    float32x4_t v180 = v43;
    float32x4_t v44 = vmulq_f32(v27[19], v34);
    float32x4_t v181 = vmulq_f32(v27[18], v34);
    float32x4_t v182 = v44;
    float32x4_t v45 = vmulq_f32(v27[20], v34);
    float32x4_t v46 = vmulq_f32(v27[21], v34);
    uint64_t v28 = 88;
    float32x4_t v183 = v45;
    float32x4_t v184 = v46;
  }
  else
  {
    uint64_t v28 = 0;
  }
  uint64_t v47 = v28;
  float v48 = 1.0 / *(float *)v19.i32;
  do
  {
    __src.f32[v47] = v27->f32[v47] * v48;
    ++v47;
  }
  while (v47 != 92);
  int v162 = 92;
  if (v15 != 1)
  {
    uint64_t v159 = v18;
    uint64_t v76 = v12[6226];
    uint64_t v77 = v12[6227] - v76;
    vDSP_Length v78 = v77 >> 2;
    uint64_t v79 = v16;
    uint64_t v80 = (v77 >> 2) + v16;
    unint64_t v161 = (unint64_t)(float)(unint64_t)v80;
    if ((int)(v77 >> 2) <= 0) {
      unsigned int v81 = 0;
    }
    else {
      unsigned int v81 = v16;
    }
    int v82 = v81 - v78;
    if (v82 < 0)
    {
      peridot_depth_log("Wrong configuration (DTMmod_4LSB size)");
      return 4;
    }
    uint64_t v158 = v17;
    unsigned int v83 = v16 - v82;
    uint64_t v84 = v16 - v82;
    memcpy(__dst, &__src.f32[v82], v84 * 4);
    int v85 = &__dst[v84];
    size_t v86 = 4 * v25;
    memcpy(v85, &__src, v86);
    memcpy(&v85[v86 / 4], &__src, 4 * (v80 - (v83 + v25)));
    if ((unint64_t)v77 <= 0xF)
    {
      peridot_depth_log("Wrong Configuration: DTMmod_4LSB size");
      return 4;
    }
    vDSP_conv(__dst, 1, (const float *)(v76 + 4 * v78 - 4), -1, &__C, 1, v25 + 1, v78);
    uint16x8_t v24 = a12;
    uint16x8_t v111 = *(float32x4_t **)(v158 + 8);
    if (v25)
    {
      uint16x8_t v112 = (float *)&v187;
      float v53 = 1.0;
      uint64_t v113 = *(float **)(v158 + 8);
      do
      {
        float v114 = *v112++;
        float v115 = 1.0 / (1.0 - fmin(v114, 0.99));
        *v113++ = v115;
        if (v53 < v115) {
          float v53 = v115;
        }
        --v79;
      }
      while (v79);
      if (v25 > 0x5B) {
        goto LABEL_68;
      }
    }
    else
    {
      float v53 = 1.0;
    }
    memset_pattern16((char *)v111 + v86, &xmmword_259120E80, 368 - v86);
LABEL_68:
    uint64_t v116 = 0;
    if ((unint64_t)((char *)&v188 - (char *)&__src) >= 0x20
      && (unint64_t)((char *)&v188 - (char *)v111) > 0x1F)
    {
      __asm { FMOV            V0.4S, #1.0 }
      float32x4_t v118 = (float32x4_t)vdupq_n_s32(0x3C23D700u);
      float32x4_t v119 = vmaxnmq_f32(vmlsq_f32(_Q0, v164, v111[1]), v118);
      float32x4_t v188 = vmaxnmq_f32(vmlsq_f32(_Q0, __src, *v111), v118);
      float32x4_t v189 = v119;
      float32x4_t v120 = vmaxnmq_f32(vmlsq_f32(_Q0, v166, v111[3]), v118);
      float32x4_t v190 = vmaxnmq_f32(vmlsq_f32(_Q0, v165, v111[2]), v118);
      float32x4_t v191 = v120;
      float32x4_t v121 = vmaxnmq_f32(vmlsq_f32(_Q0, v168, v111[5]), v118);
      float32x4_t v192 = vmaxnmq_f32(vmlsq_f32(_Q0, v167, v111[4]), v118);
      float32x4_t v193 = v121;
      float32x4_t v122 = vmaxnmq_f32(vmlsq_f32(_Q0, v170, v111[7]), v118);
      float32x4_t v194 = vmaxnmq_f32(vmlsq_f32(_Q0, v169, v111[6]), v118);
      float32x4_t v195 = v122;
      float32x4_t v123 = vmaxnmq_f32(vmlsq_f32(_Q0, v172, v111[9]), v118);
      float32x4_t v196 = vmaxnmq_f32(vmlsq_f32(_Q0, v171, v111[8]), v118);
      float32x4_t v197 = v123;
      float32x4_t v124 = vmaxnmq_f32(vmlsq_f32(_Q0, v174, v111[11]), v118);
      float32x4_t v198 = vmaxnmq_f32(vmlsq_f32(_Q0, v173, v111[10]), v118);
      float32x4_t v199 = v124;
      float32x4_t v125 = vmaxnmq_f32(vmlsq_f32(_Q0, v176, v111[13]), v118);
      float32x4_t v200 = vmaxnmq_f32(vmlsq_f32(_Q0, v175, v111[12]), v118);
      float32x4_t v201 = v125;
      float32x4_t v126 = vmaxnmq_f32(vmlsq_f32(_Q0, v178, v111[15]), v118);
      float32x4_t v202 = vmaxnmq_f32(vmlsq_f32(_Q0, v177, v111[14]), v118);
      float32x4_t v203 = v126;
      float32x4_t v127 = vmaxnmq_f32(vmlsq_f32(_Q0, v180, v111[17]), v118);
      float32x4_t v204 = vmaxnmq_f32(vmlsq_f32(_Q0, v179, v111[16]), v118);
      float32x4_t v205 = v127;
      float32x4_t v128 = vmaxnmq_f32(vmlsq_f32(_Q0, v182, v111[19]), v118);
      float32x4_t v206 = vmaxnmq_f32(vmlsq_f32(_Q0, v181, v111[18]), v118);
      float32x4_t v207 = v128;
      float32x4_t v129 = vmlsq_f32(_Q0, v183, v111[20]);
      float32x4_t v130 = vmaxnmq_f32(vmlsq_f32(_Q0, v184, v111[21]), v118);
      uint64_t v116 = 88;
      float32x4_t v208 = vmaxnmq_f32(v129, v118);
      float32x4_t v209 = v130;
    }
    uint64_t v131 = v116;
    do
    {
      v188.f32[v131] = fmaxf(-(float)((float)(v111->f32[v131] * __src.f32[v131]) + -1.0), 0.01);
      ++v131;
    }
    while (v131 != 92);
    vvlogf(v188.f32, v188.f32, &v162);
    float v132 = -v26;
    float v133 = *(float32x4_t **)(v159 + 8);
    if ((unint64_t)((char *)v133 - (char *)&v188) > 0x1F)
    {
      float32x4_t v135 = vmulq_n_f32(v189, v132);
      *float v133 = vmulq_n_f32(v188, v132);
      v133[1] = v135;
      float32x4_t v136 = vmulq_n_f32(v191, v132);
      v133[2] = vmulq_n_f32(v190, v132);
      v133[3] = v136;
      float32x4_t v137 = vmulq_n_f32(v193, v132);
      v133[4] = vmulq_n_f32(v192, v132);
      v133[5] = v137;
      float32x4_t v138 = vmulq_n_f32(v195, v132);
      v133[6] = vmulq_n_f32(v194, v132);
      v133[7] = v138;
      float32x4_t v139 = vmulq_n_f32(v197, v132);
      v133[8] = vmulq_n_f32(v196, v132);
      v133[9] = v139;
      float32x4_t v140 = vmulq_n_f32(v199, v132);
      v133[10] = vmulq_n_f32(v198, v132);
      v133[11] = v140;
      float32x4_t v141 = vmulq_n_f32(v201, v132);
      v133[12] = vmulq_n_f32(v200, v132);
      v133[13] = v141;
      float32x4_t v142 = vmulq_n_f32(v203, v132);
      v133[14] = vmulq_n_f32(v202, v132);
      v133[15] = v142;
      float32x4_t v143 = vmulq_n_f32(v205, v132);
      v133[16] = vmulq_n_f32(v204, v132);
      v133[17] = v143;
      float32x4_t v144 = vmulq_n_f32(v207, v132);
      v133[18] = vmulq_n_f32(v206, v132);
      v133[19] = v144;
      float32x4_t v145 = vmulq_n_f32(v209, v132);
      v133[20] = vmulq_n_f32(v208, v132);
      v133[21] = v145;
      uint64_t v134 = 88;
    }
    else
    {
      uint64_t v134 = 0;
    }
    uint64_t v146 = v134;
    do
    {
      v133->f32[v146] = v188.f32[v146] * v132;
      ++v146;
    }
    while (v146 != 92);
    unint64_t v147 = *(void *)(v158 + 8);
    long long v148 = a11 + 1;
    BOOL v150 = v147 + 368 > (unint64_t)a11 && v147 < (unint64_t)v148;
    BOOL v151 = &__src < (float32x4_t *)v148 && v185 > (void *)a11;
    if (v151 || v150)
    {
      for (uint64_t i = 0; i != 92; ++i)
      {
        float v156 = *(float *)(v147 + i * 4);
        if (v156 > 100.0 || (float)(v156 * __src.f32[i]) > 0.99) {
          *a11 = 1;
        }
      }
    }
    else
    {
      uint64_t v152 = 0;
      float32x4_t v153 = (float32x4_t)vdupq_n_s32(0x3F7D70A4u);
      float32x4_t v154 = (float32x4_t)vdupq_n_s32(0x42C8000Du);
      do
      {
        if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v147 + v152), v154), (int8x16_t)vcgtq_f32(vmulq_f32(*(float32x4_t *)(v147 + v152), *(float32x4_t *)((char *)&__src + v152)), v153)))))*a11 = 1; {
        v152 += 16;
        }
      }
      while (v152 != 368);
    }
    goto LABEL_100;
  }
  uint64_t v49 = 0;
  uint64_t v50 = v12[6223];
  uint64_t v51 = *(float32x4_t **)(v17 + 8);
  float v52 = 0.0;
  float v53 = 0.0;
  do
  {
    float v54 = __src.f32[v49];
    float v55 = v52 + (float)((float)(*(float *)(v50 + v49 * 4) * v20) * v48);
    _NF = v55 < 0.99;
    float v56 = 1.0 / (float)(1.0 - v55);
    if (!_NF) {
      float v56 = 100.0;
    }
    v51->f32[v49] = v56;
    float v52 = v54 + v52;
    if (v56 > v53) {
      float v53 = v56;
    }
    ++v49;
  }
  while (v49 != 92);
  uint64_t v57 = 0;
  if ((unint64_t)((char *)&v188 - (char *)&__src) >= 0x20
    && (unint64_t)((char *)&v188 - (char *)v51) > 0x1F)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v59 = (float32x4_t)vdupq_n_s32(0x3C23D700u);
    float32x4_t v60 = vmaxnmq_f32(vmlsq_f32(_Q0, v164, v51[1]), v59);
    float32x4_t v188 = vmaxnmq_f32(vmlsq_f32(_Q0, __src, *v51), v59);
    float32x4_t v189 = v60;
    float32x4_t v61 = vmaxnmq_f32(vmlsq_f32(_Q0, v166, v51[3]), v59);
    float32x4_t v190 = vmaxnmq_f32(vmlsq_f32(_Q0, v165, v51[2]), v59);
    float32x4_t v191 = v61;
    float32x4_t v62 = vmaxnmq_f32(vmlsq_f32(_Q0, v168, v51[5]), v59);
    float32x4_t v192 = vmaxnmq_f32(vmlsq_f32(_Q0, v167, v51[4]), v59);
    float32x4_t v193 = v62;
    float32x4_t v63 = vmaxnmq_f32(vmlsq_f32(_Q0, v170, v51[7]), v59);
    float32x4_t v194 = vmaxnmq_f32(vmlsq_f32(_Q0, v169, v51[6]), v59);
    float32x4_t v195 = v63;
    float32x4_t v64 = vmaxnmq_f32(vmlsq_f32(_Q0, v172, v51[9]), v59);
    float32x4_t v196 = vmaxnmq_f32(vmlsq_f32(_Q0, v171, v51[8]), v59);
    float32x4_t v197 = v64;
    float32x4_t v65 = vmaxnmq_f32(vmlsq_f32(_Q0, v174, v51[11]), v59);
    float32x4_t v198 = vmaxnmq_f32(vmlsq_f32(_Q0, v173, v51[10]), v59);
    float32x4_t v199 = v65;
    float32x4_t v66 = vmaxnmq_f32(vmlsq_f32(_Q0, v176, v51[13]), v59);
    float32x4_t v200 = vmaxnmq_f32(vmlsq_f32(_Q0, v175, v51[12]), v59);
    float32x4_t v201 = v66;
    float32x4_t v67 = vmaxnmq_f32(vmlsq_f32(_Q0, v178, v51[15]), v59);
    float32x4_t v202 = vmaxnmq_f32(vmlsq_f32(_Q0, v177, v51[14]), v59);
    float32x4_t v203 = v67;
    float32x4_t v68 = vmaxnmq_f32(vmlsq_f32(_Q0, v180, v51[17]), v59);
    float32x4_t v204 = vmaxnmq_f32(vmlsq_f32(_Q0, v179, v51[16]), v59);
    float32x4_t v205 = v68;
    float32x4_t v69 = vmaxnmq_f32(vmlsq_f32(_Q0, v182, v51[19]), v59);
    float32x4_t v206 = vmaxnmq_f32(vmlsq_f32(_Q0, v181, v51[18]), v59);
    float32x4_t v207 = v69;
    float32x4_t v70 = vmlsq_f32(_Q0, v183, v51[20]);
    float32x4_t v71 = vmaxnmq_f32(vmlsq_f32(_Q0, v184, v51[21]), v59);
    uint64_t v57 = 88;
    float32x4_t v208 = vmaxnmq_f32(v70, v59);
    float32x4_t v209 = v71;
  }
  uint64_t v72 = v57;
  do
  {
    v188.f32[v72] = fmaxf(-(float)((float)(v51->f32[v72] * __src.f32[v72]) + -1.0), 0.01);
    ++v72;
  }
  while (v72 != 92);
  vvlogf(v188.f32, v188.f32, &v162);
  float v73 = -v26;
  __int16 v74 = *(float32x4_t **)(v21 + 8);
  if ((unint64_t)((char *)v74 - (char *)&v188) > 0x1F)
  {
    float32x4_t v87 = vmulq_n_f32(v189, v73);
    *__int16 v74 = vmulq_n_f32(v188, v73);
    v74[1] = v87;
    float32x4_t v88 = vmulq_n_f32(v191, v73);
    v74[2] = vmulq_n_f32(v190, v73);
    v74[3] = v88;
    float32x4_t v89 = vmulq_n_f32(v193, v73);
    v74[4] = vmulq_n_f32(v192, v73);
    v74[5] = v89;
    float32x4_t v90 = vmulq_n_f32(v195, v73);
    v74[6] = vmulq_n_f32(v194, v73);
    v74[7] = v90;
    float32x4_t v91 = vmulq_n_f32(v197, v73);
    v74[8] = vmulq_n_f32(v196, v73);
    v74[9] = v91;
    float32x4_t v92 = vmulq_n_f32(v199, v73);
    v74[10] = vmulq_n_f32(v198, v73);
    v74[11] = v92;
    float32x4_t v93 = vmulq_n_f32(v201, v73);
    v74[12] = vmulq_n_f32(v200, v73);
    v74[13] = v93;
    float32x4_t v94 = vmulq_n_f32(v203, v73);
    v74[14] = vmulq_n_f32(v202, v73);
    v74[15] = v94;
    float32x4_t v95 = vmulq_n_f32(v205, v73);
    v74[16] = vmulq_n_f32(v204, v73);
    v74[17] = v95;
    float32x4_t v96 = vmulq_n_f32(v207, v73);
    v74[18] = vmulq_n_f32(v206, v73);
    v74[19] = v96;
    float32x4_t v97 = vmulq_n_f32(v209, v73);
    v74[20] = vmulq_n_f32(v208, v73);
    v74[21] = v97;
    uint64_t v75 = 88;
  }
  else
  {
    uint64_t v75 = 0;
  }
  uint64_t v98 = v75;
  do
  {
    v74->f32[v98] = v188.f32[v98] * v73;
    ++v98;
  }
  while (v98 != 92);
  unint64_t v99 = *(void *)(v22 + 8);
  uint64_t v100 = a11 + 1;
  BOOL v102 = v99 + 368 > (unint64_t)a11 && v99 < (unint64_t)v100;
  BOOL v103 = &__src < (float32x4_t *)v100 && v185 > (void *)a11;
  if (v103 || v102)
  {
    for (uint64_t j = 0; j != 92; ++j)
    {
      float v108 = *(float *)(v99 + j * 4);
      if (v108 > 100.0 || (float)(v108 * __src.f32[j]) > 0.99) {
        *a11 = 1;
      }
    }
  }
  else
  {
    uint64_t v104 = 0;
    float32x4_t v105 = (float32x4_t)vdupq_n_s32(0x3F7D70A4u);
    float32x4_t v106 = (float32x4_t)vdupq_n_s32(0x42C8000Du);
    do
    {
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vorrq_s8((int8x16_t)vcgtq_f32(*(float32x4_t *)(v99 + v104), v106), (int8x16_t)vcgtq_f32(vmulq_f32(*(float32x4_t *)(v99 + v104), *(float32x4_t *)((char *)&__src + v104)), v105)))))*a11 = 1; {
      v104 += 16;
      }
    }
    while (v104 != 368);
  }
LABEL_100:
  uint64_t result = 0;
  float *v24 = v53;
  return result;
}

uint64_t peridot::PeridotDXPPreProcessor::interleave(int a1, int a2, void *a3, uint64_t *a4, unsigned __int8 *__sz, _DWORD *__src, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, void *a11)
{
  unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3);
  if (v11 != 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) || 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a7[1] - *a7) >> 3) != v11)
  {
    peridot_depth_log("PeridotDXPPreProcessor::interleave: histogram sizes do not match");
    return 1;
  }
  uint64_t v18 = (_DWORD *)a11[9];
  a11[10] = 0;
  if ((a11[11] & 0x3FFFFFFFFFFFFFFLL) == 0)
  {
    if (v18)
    {
      operator delete(v18);
      a11[9] = 0;
      a11[10] = 0;
      a11[11] = 0;
    }
    uint64_t v18 = operator new(8uLL);
    a11[9] = v18;
    a11[11] = 1;
  }
  int32x2_t v19 = (char *)a11[12];
  a11[10] = 3;
  uint64_t v20 = *__sz;
  if (__sz[1]) {
    v20 |= 2uLL;
  }
  if (__sz[2]) {
    v20 |= 4uLL;
  }
  *(void *)uint64_t v18 = v20;
  uint64_t v21 = a11[14];
  if ((unint64_t)(v21 - (void)v19) < 0xC)
  {
    if (v19)
    {
      a11[13] = v19;
      operator delete(v19);
      uint64_t v21 = 0;
      a11[12] = 0;
      a11[13] = 0;
      a11[14] = 0;
    }
    uint64_t v22 = v21 >> 1;
    if ((unint64_t)(v21 >> 1) <= 3) {
      uint64_t v22 = 3;
    }
    BOOL v23 = (unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v24 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v23) {
      unint64_t v24 = v22;
    }
    if (v24 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v25 = v24;
    uint64_t v18 = operator new(4 * v24);
    int32x2_t v19 = (char *)v18;
    a11[13] = v18;
    float v26 = (char **)(a11 + 13);
    a11[12] = v18;
    a11[14] = &v18[v25];
    *(void *)uint64_t v18 = *(void *)__src;
    v18[2] = __src[2];
    goto LABEL_27;
  }
  float v26 = (char **)(a11 + 13);
  uint64_t v28 = (char *)a11[13];
  int64_t v29 = v28 - v19;
  if ((unint64_t)(v28 - v19) > 0xB)
  {
    uint64_t v31 = *(void *)__src;
    *((_DWORD *)v19 + 2) = __src[2];
    *(void *)int32x2_t v19 = v31;
LABEL_27:
    uint64_t v30 = 3;
    goto LABEL_28;
  }
  if (v28 != v19)
  {
    memmove(v19, __src, v28 - v19);
    int32x2_t v19 = *v26;
  }
  uint64_t v18 = memmove(v19, (char *)__src + v29, 12 - v29);
  uint64_t v30 = (12 - v29) >> 2;
LABEL_28:
  *float v26 = &v19[4 * v30];
  if (a8 != 1)
  {
    if (a8 == 4)
    {
      peridot::interleave_neon<4ul>((uint64_t)v18, a3, a4, a7, a9, a10, a11);
      return 0;
    }
    peridot_depth_log("PeridotDXPPreProcessor::interleave: unexpected tdc size");
    return 1;
  }
  peridot::interleave_neon<1ul>((uint64_t)v18, a3, a4, a7, a9, a10, a11);
  return 0;
}

uint64_t peridot::interleave_neon<1ul>(uint64_t a1, void *a2, uint64_t *a3, void *a4, uint64_t a5, unsigned int a6, uint64_t *a7)
{
  if (a5)
  {
    uint64_t v7 = 0;
    float v8 = 1.0 / (double)a6 * (1.0 / (double)a6);
    uint64_t v9 = *a7;
    uint64_t v10 = (_DWORD **)(*a2 + 8);
    do
    {
      unint64_t v11 = *v10;
      v10 += 3;
      uint64_t v12 = *(_DWORD **)(*(void *)(v9 + 8 * v7) + 8);
      _DWORD *v12 = *v11;
      v12[1] = v11[1];
      v12[2] = v11[2];
      v12[3] = v11[3];
      v12[4] = v11[4];
      v12[5] = v11[5];
      v12[6] = v11[6];
      v12[7] = v11[7];
      v12[8] = v11[8];
      v12[9] = v11[9];
      v12[10] = v11[10];
      v12[11] = v11[11];
      v12[12] = v11[12];
      v12[13] = v11[13];
      v12[14] = v11[14];
      v12[15] = v11[15];
      v12[16] = v11[16];
      v12[17] = v11[17];
      v12[18] = v11[18];
      v12[19] = v11[19];
      v12[20] = v11[20];
      v12[21] = v11[21];
      v12[22] = v11[22];
      v12[23] = v11[23];
      v12[24] = v11[24];
      v12[25] = v11[25];
      v12[26] = v11[26];
      v12[27] = v11[27];
      v12[28] = v11[28];
      v12[29] = v11[29];
      v12[30] = v11[30];
      v12[31] = v11[31];
      v12[32] = v11[32];
      v12[33] = v11[33];
      v12[34] = v11[34];
      v12[35] = v11[35];
      v12[36] = v11[36];
      v12[37] = v11[37];
      v12[38] = v11[38];
      v12[39] = v11[39];
      v12[40] = v11[40];
      v12[41] = v11[41];
      v12[42] = v11[42];
      v12[43] = v11[43];
      v12[44] = v11[44];
      v12[45] = v11[45];
      v12[46] = v11[46];
      v12[47] = v11[47];
      v12[48] = v11[48];
      v12[49] = v11[49];
      v12[50] = v11[50];
      v12[51] = v11[51];
      v12[52] = v11[52];
      v12[53] = v11[53];
      v12[54] = v11[54];
      v12[55] = v11[55];
      v12[56] = v11[56];
      v12[57] = v11[57];
      v12[58] = v11[58];
      v12[59] = v11[59];
      v12[60] = v11[60];
      v12[61] = v11[61];
      v12[62] = v11[62];
      v12[63] = v11[63];
      v12[64] = v11[64];
      v12[65] = v11[65];
      v12[66] = v11[66];
      v12[67] = v11[67];
      v12[68] = v11[68];
      v12[69] = v11[69];
      v12[70] = v11[70];
      v12[71] = v11[71];
      v12[72] = v11[72];
      v12[73] = v11[73];
      v12[74] = v11[74];
      v12[75] = v11[75];
      v12[76] = v11[76];
      v12[77] = v11[77];
      v12[78] = v11[78];
      v12[79] = v11[79];
      v12[80] = v11[80];
      v12[81] = v11[81];
      v12[82] = v11[82];
      v12[83] = v11[83];
      v12[84] = v11[84];
      v12[85] = v11[85];
      v12[86] = v11[86];
      v12[87] = v11[87];
      v12[88] = v11[88];
      v12[89] = v11[89];
      v12[90] = v11[90];
      v12[91] = v11[91];
      ++v7;
    }
    while (a5 != v7);
    uint64_t v13 = *a3;
    unsigned int v14 = (uint64_t *)a7[3];
    if (a6)
    {
      for (uint64_t i = 0; i != a5; ++i)
      {
        float32x4_t v60 = *(float32x4_t **)(v13 + 24 * i + 8);
        float32x4_t v61 = *(float32x4_t **)(v14[i] + 8);
        float32x4_t v62 = *(float32x4_t **)(*a4 + 24 * i + 8);
        unint64_t v63 = *(void *)(*(void *)(a7[6] + 8 * i) + 8);
        float32x4_t v64 = v61 + 23;
        unint64_t v65 = v63 + 368;
        unint64_t v66 = (unint64_t)&v62[23];
        BOOL v68 = v61 < &v60[23] && v60 < v64;
        BOOL v70 = (unint64_t)v61 < v66 && v62 < v64;
        BOOL v72 = v63 < (unint64_t)&v60[23] && (unint64_t)v60 < v65;
        BOOL v74 = v63 < v66 && (unint64_t)v62 < v65;
        BOOL v75 = v63 >= (unint64_t)v64 || (unint64_t)v61 >= v65;
        if (!v75 || v68 || v70 || v72 || v74)
        {
          for (uint64_t j = 0; j != 92; ++j)
          {
            v61->i32[j] = v60->i32[j];
            *(float *)(v63 + j * 4) = (float)(v60->f32[j] * v60->f32[j]) * (float)(v8 * v62->f32[j]);
          }
        }
        else
        {
          float32x4_t v16 = v60[1];
          float32x4_t v17 = v62[1];
          float32x4_t v18 = vmulq_f32(vmulq_n_f32(vmulq_f32(*v60, *v60), v8), *v62);
          *float32x4_t v61 = *v60;
          v61[1] = v16;
          *(float32x4_t *)unint64_t v63 = v18;
          *(float32x4_t *)(v63 + 16) = vmulq_f32(vmulq_n_f32(vmulq_f32(v16, v16), v8), v17);
          float32x4_t v19 = v60[2];
          float32x4_t v20 = v60[3];
          float32x4_t v21 = v62[3];
          float32x4_t v22 = vmulq_f32(vmulq_n_f32(vmulq_f32(v19, v19), v8), v62[2]);
          v61[2] = v19;
          v61[3] = v20;
          *(float32x4_t *)(v63 + 32) = v22;
          *(float32x4_t *)(v63 + 48) = vmulq_f32(vmulq_n_f32(vmulq_f32(v20, v20), v8), v21);
          float32x4_t v23 = v60[4];
          float32x4_t v24 = v60[5];
          float32x4_t v25 = v62[5];
          float32x4_t v26 = vmulq_f32(vmulq_n_f32(vmulq_f32(v23, v23), v8), v62[4]);
          v61[4] = v23;
          v61[5] = v24;
          *(float32x4_t *)(v63 + 64) = v26;
          *(float32x4_t *)(v63 + 80) = vmulq_f32(vmulq_n_f32(vmulq_f32(v24, v24), v8), v25);
          float32x4_t v27 = v60[6];
          float32x4_t v28 = v60[7];
          float32x4_t v29 = v62[7];
          float32x4_t v30 = vmulq_f32(vmulq_n_f32(vmulq_f32(v27, v27), v8), v62[6]);
          v61[6] = v27;
          v61[7] = v28;
          *(float32x4_t *)(v63 + 96) = v30;
          *(float32x4_t *)(v63 + 112) = vmulq_f32(vmulq_n_f32(vmulq_f32(v28, v28), v8), v29);
          float32x4_t v31 = v60[8];
          float32x4_t v32 = v60[9];
          float32x4_t v33 = v62[9];
          float32x4_t v34 = vmulq_f32(vmulq_n_f32(vmulq_f32(v31, v31), v8), v62[8]);
          v61[8] = v31;
          v61[9] = v32;
          *(float32x4_t *)(v63 + 128) = v34;
          *(float32x4_t *)(v63 + 144) = vmulq_f32(vmulq_n_f32(vmulq_f32(v32, v32), v8), v33);
          float32x4_t v35 = v60[10];
          float32x4_t v36 = v60[11];
          float32x4_t v37 = v62[11];
          float32x4_t v38 = vmulq_f32(vmulq_n_f32(vmulq_f32(v35, v35), v8), v62[10]);
          v61[10] = v35;
          v61[11] = v36;
          *(float32x4_t *)(v63 + 160) = v38;
          *(float32x4_t *)(v63 + 176) = vmulq_f32(vmulq_n_f32(vmulq_f32(v36, v36), v8), v37);
          float32x4_t v39 = v60[12];
          float32x4_t v40 = v60[13];
          float32x4_t v41 = v62[13];
          float32x4_t v42 = vmulq_f32(vmulq_n_f32(vmulq_f32(v39, v39), v8), v62[12]);
          v61[12] = v39;
          v61[13] = v40;
          *(float32x4_t *)(v63 + 192) = v42;
          *(float32x4_t *)(v63 + 208) = vmulq_f32(vmulq_n_f32(vmulq_f32(v40, v40), v8), v41);
          float32x4_t v43 = v60[14];
          float32x4_t v44 = v60[15];
          float32x4_t v45 = v62[15];
          float32x4_t v46 = vmulq_f32(vmulq_n_f32(vmulq_f32(v43, v43), v8), v62[14]);
          v61[14] = v43;
          v61[15] = v44;
          *(float32x4_t *)(v63 + 224) = v46;
          *(float32x4_t *)(v63 + 240) = vmulq_f32(vmulq_n_f32(vmulq_f32(v44, v44), v8), v45);
          float32x4_t v47 = v60[16];
          float32x4_t v48 = v60[17];
          float32x4_t v49 = v62[17];
          float32x4_t v50 = vmulq_f32(vmulq_n_f32(vmulq_f32(v47, v47), v8), v62[16]);
          v61[16] = v47;
          v61[17] = v48;
          *(float32x4_t *)(v63 + 256) = v50;
          *(float32x4_t *)(v63 + 272) = vmulq_f32(vmulq_n_f32(vmulq_f32(v48, v48), v8), v49);
          float32x4_t v51 = v60[18];
          float32x4_t v52 = v60[19];
          float32x4_t v53 = v62[19];
          float32x4_t v54 = vmulq_f32(vmulq_n_f32(vmulq_f32(v51, v51), v8), v62[18]);
          v61[18] = v51;
          v61[19] = v52;
          *(float32x4_t *)(v63 + 288) = v54;
          *(float32x4_t *)(v63 + 304) = vmulq_f32(vmulq_n_f32(vmulq_f32(v52, v52), v8), v53);
          float32x4_t v55 = v60[20];
          float32x4_t v56 = v60[21];
          float32x4_t v57 = v62[21];
          float32x4_t v58 = vmulq_f32(vmulq_n_f32(vmulq_f32(v55, v55), v8), v62[20]);
          v61[20] = v55;
          v61[21] = v56;
          *(float32x4_t *)(v63 + 320) = v58;
          *(float32x4_t *)(v63 + 336) = vmulq_f32(vmulq_n_f32(vmulq_f32(v56, v56), v8), v57);
          float32x4_t v59 = v60[22];
          v61[22] = v59;
          *(float32x4_t *)(v63 + 352) = vmulq_f32(vmulq_n_f32(vmulq_f32(v59, v59), v8), v62[22]);
        }
      }
    }
    else
    {
      uint64_t v77 = (void *)(v13 + 8);
      do
      {
        uint64_t v79 = (_DWORD *)*v77;
        v77 += 3;
        vDSP_Length v78 = v79;
        uint64_t v80 = *v14++;
        unsigned int v81 = *(_DWORD **)(v80 + 8);
        _DWORD *v81 = *v78;
        v81[1] = v78[1];
        v81[2] = v78[2];
        v81[3] = v78[3];
        v81[4] = v78[4];
        v81[5] = v78[5];
        v81[6] = v78[6];
        v81[7] = v78[7];
        v81[8] = v78[8];
        v81[9] = v78[9];
        v81[10] = v78[10];
        v81[11] = v78[11];
        v81[12] = v78[12];
        v81[13] = v78[13];
        v81[14] = v78[14];
        v81[15] = v78[15];
        v81[16] = v78[16];
        v81[17] = v78[17];
        v81[18] = v78[18];
        v81[19] = v78[19];
        v81[20] = v78[20];
        v81[21] = v78[21];
        v81[22] = v78[22];
        v81[23] = v78[23];
        v81[24] = v78[24];
        v81[25] = v78[25];
        v81[26] = v78[26];
        v81[27] = v78[27];
        v81[28] = v78[28];
        v81[29] = v78[29];
        v81[30] = v78[30];
        v81[31] = v78[31];
        v81[32] = v78[32];
        v81[33] = v78[33];
        v81[34] = v78[34];
        v81[35] = v78[35];
        v81[36] = v78[36];
        v81[37] = v78[37];
        v81[38] = v78[38];
        v81[39] = v78[39];
        v81[40] = v78[40];
        v81[41] = v78[41];
        v81[42] = v78[42];
        v81[43] = v78[43];
        v81[44] = v78[44];
        v81[45] = v78[45];
        v81[46] = v78[46];
        v81[47] = v78[47];
        v81[48] = v78[48];
        v81[49] = v78[49];
        v81[50] = v78[50];
        v81[51] = v78[51];
        v81[52] = v78[52];
        v81[53] = v78[53];
        v81[54] = v78[54];
        v81[55] = v78[55];
        v81[56] = v78[56];
        v81[57] = v78[57];
        v81[58] = v78[58];
        v81[59] = v78[59];
        v81[60] = v78[60];
        v81[61] = v78[61];
        v81[62] = v78[62];
        v81[63] = v78[63];
        v81[64] = v78[64];
        v81[65] = v78[65];
        v81[66] = v78[66];
        v81[67] = v78[67];
        v81[68] = v78[68];
        v81[69] = v78[69];
        v81[70] = v78[70];
        v81[71] = v78[71];
        v81[72] = v78[72];
        v81[73] = v78[73];
        v81[74] = v78[74];
        v81[75] = v78[75];
        v81[76] = v78[76];
        v81[77] = v78[77];
        v81[78] = v78[78];
        v81[79] = v78[79];
        v81[80] = v78[80];
        v81[81] = v78[81];
        v81[82] = v78[82];
        v81[83] = v78[83];
        v81[84] = v78[84];
        v81[85] = v78[85];
        v81[86] = v78[86];
        v81[87] = v78[87];
        v81[88] = v78[88];
        v81[89] = v78[89];
        v81[90] = v78[90];
        v81[91] = v78[91];
        --a5;
      }
      while (a5);
    }
  }
  return 0;
}

uint64_t peridot::interleave_neon<4ul>(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, unsigned int a6, void *a7)
{
  if (a5)
  {
    uint64_t v7 = 0;
    float v8 = 1.0 / (double)a6 * (1.0 / (double)a6);
    do
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      unint64_t v11 = -4;
      do
      {
        v28.val[0] = *(float32x4_t *)(*(void *)(*a2 + 96 * v7 + 8) + v9);
        v28.val[1] = *(float32x4_t *)(*(void *)(*a2 + 24 * ((4 * v7) | 1) + 8) + v9);
        v28.val[2] = *(float32x4_t *)(*(void *)(*a2 + 24 * ((4 * v7) | 2) + 8) + v9);
        v28.val[3] = *(float32x4_t *)(*(void *)(*a2 + 24 * ((4 * v7) | 3) + 8) + v9);
        uint64_t v12 = (float *)(*(void *)(*(void *)(*a7 + 8 * v7) + 8) + v10);
        vst4q_f32(v12, v28);
        v11 += 4;
        v10 += 64;
        v9 += 16;
      }
      while (v11 < 0x58);
      ++v7;
    }
    while (v7 != a5);
    uint64_t v13 = 0;
    if (a6)
    {
      do
      {
        uint64_t v14 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = (4 * v13) | 1;
        uint64_t v17 = (4 * v13) | 2;
        uint64_t v18 = (4 * v13) | 3;
        unint64_t v19 = -4;
        do
        {
          v29.val[0] = *(float32x4_t *)(*(void *)(*a3 + 96 * v13 + 8) + v15);
          v29.val[1] = *(float32x4_t *)(*(void *)(*a3 + 24 * v16 + 8) + v15);
          v29.val[2] = *(float32x4_t *)(*(void *)(*a3 + 24 * v17 + 8) + v15);
          v29.val[3] = *(float32x4_t *)(*(void *)(*a3 + 24 * v18 + 8) + v15);
          float32x4_t v20 = (float *)(*(void *)(*(void *)(a7[3] + 8 * v13) + 8) + v14);
          vst4q_f32(v20, v29);
          v30.val[0] = vmulq_f32(vmulq_n_f32(vmulq_f32(v29.val[0], v29.val[0]), v8), *(float32x4_t *)(*(void *)(*a4 + 96 * v13 + 8) + v15));
          v30.val[1] = vmulq_f32(vmulq_n_f32(vmulq_f32(v29.val[1], v29.val[1]), v8), *(float32x4_t *)(*(void *)(*a4 + 24 * v16 + 8) + v15));
          v30.val[2] = vmulq_f32(vmulq_n_f32(vmulq_f32(v29.val[2], v29.val[2]), v8), *(float32x4_t *)(*(void *)(*a4 + 24 * v17 + 8) + v15));
          v30.val[3] = vmulq_f32(vmulq_n_f32(vmulq_f32(v29.val[3], v29.val[3]), v8), *(float32x4_t *)(*(void *)(*a4 + 24 * v18 + 8) + v15));
          float32x4_t v21 = (float *)(*(void *)(*(void *)(a7[6] + 8 * v13) + 8) + v14);
          vst4q_f32(v21, v30);
          v19 += 4;
          v15 += 16;
          v14 += 64;
        }
        while (v19 < 0x58);
        ++v13;
      }
      while (v13 != a5);
    }
    else
    {
      do
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        unint64_t v24 = -4;
        do
        {
          v27.val[0] = *(float32x4_t *)(*(void *)(*a3 + 96 * v13 + 8) + v22);
          v27.val[1] = *(float32x4_t *)(*(void *)(*a3 + 24 * ((4 * v13) | 1) + 8) + v22);
          v27.val[2] = *(float32x4_t *)(*(void *)(*a3 + 24 * ((4 * v13) | 2) + 8) + v22);
          v27.val[3] = *(float32x4_t *)(*(void *)(*a3 + 24 * ((4 * v13) | 3) + 8) + v22);
          float32x4_t v25 = (float *)(*(void *)(*(void *)(a7[3] + 8 * v13) + 8) + v23);
          vst4q_f32(v25, v27);
          v24 += 4;
          v23 += 64;
          v22 += 16;
        }
        while (v24 < 0x58);
        ++v13;
      }
      while (v13 != a5);
    }
  }
  return 0;
}

float peridot::PeridotDXP::findStrayQSPri(float *a1, void *a2, void **a3, unsigned __int8 *a4, float *a5)
{
  uint64_t v5 = a4[237];
  uint64_t v6 = a4[238];
  uint64_t v7 = a4[239];
  int v8 = v7 | v6 | v5;
  *a5 = 0.0;
  uint64_t v9 = *a3;
  float v10 = *(float *)&a4[4 * v5 + 48];
  float result = a1[853];
  BOOL v12 = v10 > result && *(void *)&a4[8 * v5 + 88] == 0;
  if (v12 || (*(float *)&a4[4 * v6 + 48] > result ? (BOOL v13 = *(void *)&a4[8 * v6 + 88] == 0) : (BOOL v13 = 0), v13))
  {
    BOOL v15 = 1;
    if (!v8) {
      goto LABEL_21;
    }
  }
  else
  {
    BOOL v15 = *(float *)&a4[4 * v7 + 48] > result && *(void *)&a4[8 * v7 + 88] == 0;
    if (!v8) {
      goto LABEL_21;
    }
  }
  if (v15)
  {
    unint64_t v16 = 0;
    float v17 = 0.0;
    if (v10 <= result) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
LABEL_21:
  unint64_t v18 = a2[5];
  if (v18 > 0x5C) {
    goto LABEL_103;
  }
  unint64_t v19 = *(float32x4_t **)(*v9 + 8);
  unint64_t v20 = v18 + 1;
  if (v18) {
    uint64_t v21 = -1;
  }
  else {
    uint64_t v21 = 0;
  }
  unint64_t v22 = v20 - (v18 != 0);
  if (v22 < 8)
  {
    unint64_t v23 = 0;
    float32x2_t v24 = 0;
LABEL_30:
    uint64_t v30 = v18 + v21 - v23 + 1;
    float32x4_t v31 = &v19->f32[v23];
    do
    {
      float v32 = *v31++;
      v24.f32[0] = v32 + v24.f32[0];
      --v30;
    }
    while (v30);
    goto LABEL_32;
  }
  unint64_t v23 = v22 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v25 = v19 + 1;
  float32x4_t v26 = 0uLL;
  unint64_t v27 = v22 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v28 = 0uLL;
  do
  {
    float32x4_t v26 = vaddq_f32(v25[-1], v26);
    float32x4_t v28 = vaddq_f32(*v25, v28);
    v25 += 2;
    v27 -= 8;
  }
  while (v27);
  float32x4_t v29 = vaddq_f32(v28, v26);
  float32x2_t v24 = (float32x2_t)vpaddq_f32(v29, v29).u64[0];
  v24.f32[0] = vaddv_f32(v24);
  if (v22 != v23) {
    goto LABEL_30;
  }
LABEL_32:
  unint64_t v33 = *(void *)(*v9 + 16) - 1;
  if (v33 >= a2[8]) {
    unint64_t v33 = a2[8];
  }
  float v34 = 0.0;
  if (v18 <= v33)
  {
    v24.f32[0] = v24.f32[0] / (float)v22;
    if (v20 <= v33 + 1) {
      unint64_t v20 = v33 + 1;
    }
    unint64_t v35 = v20 - v18;
    if (v35 <= 7)
    {
      float v34 = 0.0;
      goto LABEL_43;
    }
    float32x4_t v36 = (float32x4_t)vdupq_lane_s32((int32x2_t)v24, 0);
    unint64_t v37 = v35 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v38 = (float32x4_t *)((char *)v19 + 4 * v18 + 16);
    float32x4_t v39 = 0uLL;
    unint64_t v40 = v35 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v41 = 0uLL;
    do
    {
      float32x4_t v39 = vaddq_f32(vsubq_f32(v39, v36), v38[-1]);
      float32x4_t v41 = vaddq_f32(vsubq_f32(v41, v36), *v38);
      v38 += 2;
      v40 -= 8;
    }
    while (v40);
    float32x4_t v42 = vaddq_f32(v41, v39);
    float v34 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v42, v42));
    if (v35 != v37)
    {
      v18 += v37;
      do
LABEL_43:
        float v34 = (float)(v34 - v24.f32[0]) + v19->f32[v18++];
      while (v18 <= v33);
    }
  }
  unint64_t v16 = 1;
  float v17 = (float)(v34 * 0.25) / a1[866];
  if (v10 <= result) {
    goto LABEL_46;
  }
LABEL_45:
  if (!*(void *)&a4[8 * v5 + 112]) {
    goto LABEL_58;
  }
LABEL_46:
  if (*(float *)&a4[4 * v6 + 48] > result && *(void *)&a4[8 * v6 + 112] == 0)
  {
LABEL_58:
    BOOL v45 = 1;
    if (!v8) {
      goto LABEL_62;
    }
    goto LABEL_59;
  }
  BOOL v45 = *(float *)&a4[4 * v7 + 48] > result && *(void *)&a4[8 * v7 + 112] == 0;
  if (!v8)
  {
LABEL_62:
    unint64_t v46 = a2[6];
    if (v46 <= 0x5C)
    {
      float32x4_t v47 = *(float32x4_t **)(v9[1] + 8);
      unint64_t v48 = v46 + 1;
      if (v46) {
        uint64_t v49 = -1;
      }
      else {
        uint64_t v49 = 0;
      }
      unint64_t v50 = v48 - (v46 != 0);
      if (v50 >= 8)
      {
        unint64_t v51 = v50 & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v53 = v47 + 1;
        float32x4_t v54 = 0uLL;
        unint64_t v55 = v50 & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v56 = 0uLL;
        do
        {
          float32x4_t v54 = vaddq_f32(v53[-1], v54);
          float32x4_t v56 = vaddq_f32(*v53, v56);
          v53 += 2;
          v55 -= 8;
        }
        while (v55);
        float32x4_t v57 = vaddq_f32(v56, v54);
        float32x2_t v52 = (float32x2_t)vpaddq_f32(v57, v57).u64[0];
        v52.f32[0] = vaddv_f32(v52);
        if (v50 == v51)
        {
LABEL_73:
          unint64_t v61 = *(void *)(*v9 + 16) - 1;
          if (v61 >= a2[9]) {
            unint64_t v61 = a2[9];
          }
          float v62 = 0.0;
          if (v46 > v61)
          {
LABEL_86:
            ++v16;
            float v17 = (float)(v62 / a1[867]) + v17;
            if (v10 <= result) {
              goto LABEL_88;
            }
            goto LABEL_87;
          }
          v52.f32[0] = v52.f32[0] / (float)v50;
          if (v48 <= v61 + 1) {
            unint64_t v48 = v61 + 1;
          }
          unint64_t v63 = v48 - v46;
          if (v63 >= 8)
          {
            float32x4_t v65 = (float32x4_t)vdupq_lane_s32((int32x2_t)v52, 0);
            unint64_t v66 = v63 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v67 = (float32x4_t *)((char *)v47 + 4 * v46 + 16);
            float32x4_t v68 = 0uLL;
            unint64_t v69 = v63 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v70 = 0uLL;
            do
            {
              float32x4_t v68 = vaddq_f32(vsubq_f32(v68, v65), v67[-1]);
              float32x4_t v70 = vaddq_f32(vsubq_f32(v70, v65), *v67);
              v67 += 2;
              v69 -= 8;
            }
            while (v69);
            float32x4_t v71 = vaddq_f32(v70, v68);
            float v64 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v71, v71));
            if (v63 == v66) {
              goto LABEL_85;
            }
            v46 += v66;
          }
          else
          {
            float v64 = 0.0;
          }
          do
            float v64 = (float)(v64 - v52.f32[0]) + v47->f32[v46++];
          while (v46 <= v61);
LABEL_85:
          float v62 = v64 * 0.25;
          goto LABEL_86;
        }
      }
      else
      {
        unint64_t v51 = 0;
        float32x2_t v52 = 0;
      }
      uint64_t v58 = v46 + v49 - v51 + 1;
      float32x4_t v59 = &v47->f32[v51];
      do
      {
        float v60 = *v59++;
        v52.f32[0] = v60 + v52.f32[0];
        --v58;
      }
      while (v58);
      goto LABEL_73;
    }
LABEL_103:
    peridot_depth_log("Wrong Configuration: strayRisingEdge");
    return result;
  }
LABEL_59:
  if (!v45) {
    goto LABEL_62;
  }
  if (v10 <= result) {
    goto LABEL_88;
  }
LABEL_87:
  if (!*(void *)&a4[8 * v5 + 136]) {
    goto LABEL_90;
  }
LABEL_88:
  if (*(float *)&a4[4 * v6 + 48] > result && !*(void *)&a4[8 * v6 + 136])
  {
LABEL_90:
    BOOL v72 = 1;
    if (!v8) {
      goto LABEL_102;
    }
    goto LABEL_99;
  }
  float v73 = *(float *)&a4[4 * v7 + 48];
  uint64_t v74 = *(void *)&a4[8 * v7 + 136];
  BOOL v72 = v73 > result && v74 == 0;
  if (!v8)
  {
LABEL_102:
    unint64_t v76 = a2[7];
    if (v76 > 0x5C) {
      goto LABEL_103;
    }
    uint64_t v77 = *(float32x4_t **)(v9[2] + 8);
    unint64_t v78 = v76 + 1;
    if (v76) {
      uint64_t v79 = -1;
    }
    else {
      uint64_t v79 = 0;
    }
    unint64_t v80 = v78 - (v76 != 0);
    if (v80 >= 8)
    {
      unint64_t v81 = v80 & 0xFFFFFFFFFFFFFFF8;
      unsigned int v83 = v77 + 1;
      float32x4_t v84 = 0uLL;
      unint64_t v85 = v80 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v86 = 0uLL;
      do
      {
        float32x4_t v84 = vaddq_f32(v83[-1], v84);
        float32x4_t v86 = vaddq_f32(*v83, v86);
        v83 += 2;
        v85 -= 8;
      }
      while (v85);
      float32x4_t v87 = vaddq_f32(v86, v84);
      float32x2_t v82 = (float32x2_t)vpaddq_f32(v87, v87).u64[0];
      v82.f32[0] = vaddv_f32(v82);
      if (v80 == v81)
      {
LABEL_114:
        unint64_t v91 = *(void *)(*v9 + 16) - 1;
        if (v91 >= a2[10]) {
          unint64_t v91 = a2[10];
        }
        float v92 = 0.0;
        if (v76 > v91) {
          goto LABEL_127;
        }
        v82.f32[0] = v82.f32[0] / (float)v80;
        if (v78 <= v91 + 1) {
          unint64_t v78 = v91 + 1;
        }
        unint64_t v93 = v78 - v76;
        if (v93 >= 8)
        {
          float32x4_t v95 = (float32x4_t)vdupq_lane_s32((int32x2_t)v82, 0);
          unint64_t v96 = v93 & 0xFFFFFFFFFFFFFFF8;
          float32x4_t v97 = (float32x4_t *)((char *)v77 + 4 * v76 + 16);
          float32x4_t v98 = 0uLL;
          unint64_t v99 = v93 & 0xFFFFFFFFFFFFFFF8;
          float32x4_t v100 = 0uLL;
          do
          {
            float32x4_t v98 = vaddq_f32(vsubq_f32(v98, v95), v97[-1]);
            float32x4_t v100 = vaddq_f32(vsubq_f32(v100, v95), *v97);
            v97 += 2;
            v99 -= 8;
          }
          while (v99);
          float32x4_t v101 = vaddq_f32(v100, v98);
          float v94 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v101, v101));
          if (v93 == v96) {
            goto LABEL_126;
          }
          v76 += v96;
        }
        else
        {
          float v94 = 0.0;
        }
        do
          float v94 = (float)(v94 - v82.f32[0]) + v77->f32[v76++];
        while (v76 <= v91);
LABEL_126:
        float v92 = v94 * 0.25;
LABEL_127:
        ++v16;
        float v17 = (float)(v92 / a1[868]) + v17;
        goto LABEL_128;
      }
    }
    else
    {
      unint64_t v81 = 0;
      float32x2_t v82 = 0;
    }
    uint64_t v88 = v76 + v79 - v81 + 1;
    float32x4_t v89 = &v77->f32[v81];
    do
    {
      float v90 = *v89++;
      v82.f32[0] = v90 + v82.f32[0];
      --v88;
    }
    while (v88);
    goto LABEL_114;
  }
LABEL_99:
  if (!v72) {
    goto LABEL_102;
  }
  if (v16)
  {
LABEL_128:
    float result = fmax((float)(v17 / (float)v16), 0.0);
    *a5 = result;
  }
  return result;
}

void peridot::PeridotDxpMacro::getPMF(peridot::PeridotDxpMacro *this, float a2, const float *a3, uint64_t a4, float *a5, float *a6, double a7, int32x2_t a8)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  BOOL v10 = a2 == 0.0 || a4 == 0;
  if (v10 || (*(float *)a8.i32 = a2 / *((float *)this + 7858), float v12 = roundf(*(float *)a8.i32), v12 < 1.0))
  {
    *a5 = 0.0;
    *a6 = 0.0;
    return;
  }
  unint64_t v14 = (unint64_t)(float)(v12 + -1.0);
  unint64_t v15 = a4 - 1;
  if (a4 - 1 < v14) {
    unint64_t v14 = a4 - 1;
  }
  unint64_t v16 = (unint64_t)fmaxf((float)v14 + -3.0, 0.0);
  if (v15 >= v14 + 3) {
    unint64_t v17 = v14 + 3;
  }
  else {
    unint64_t v17 = a4 - 1;
  }
  if (v17 >= v16)
  {
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    unint64_t v20 = (float *)&a3[v16];
    float v21 = *v20;
    do
    {
      if (v20[v19] > v21)
      {
        float v21 = v20[v19];
        uint64_t v18 = v19;
      }
      ++v19;
    }
    while (v16 + v19 <= v17);
  }
  else
  {
    uint64_t v18 = 0;
  }
  uint64_t v22 = v18 + v14;
  if (v15 >= v18 + v14) {
    uint64_t v23 = v18 + v14;
  }
  else {
    uint64_t v23 = a4 - 1;
  }
  unint64_t v24 = a4 + 1;
  if (a4 == -1) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  int32x2_t v85 = a8;
  if (v24 >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  float32x4_t v25 = (float *)operator new(4 * v24);
  v88[0] = v25;
  float32x4_t v89 = &v25[v24];
  bzero(v25, 4 * a4 + 4);
  v88[1] = v89;
  __p[0] = operator new(4 * a4);
  float32x4_t v87 = (char *)__p[0] + 4 * a4;
  bzero(__p[0], 4 * a4);
  __p[1] = v87;
  v28.i32[0] = *((_DWORD *)this + 68);
  float v29 = *((float *)this + 80);
  float v30 = *((float *)this + 79);
  if (v24 <= 7)
  {
    unint64_t v31 = 0;
    float v32 = *(float *)v85.i32;
LABEL_29:
    float v42 = v29 + v30;
    do
    {
      v25[v31] = (float)((float)(*(float *)v28.i32 + (float)v31) - v32) + v42;
      ++v31;
    }
    while (v24 != v31);
    goto LABEL_31;
  }
  float32x4_t v33 = (float32x4_t)vdupq_lane_s32(v28, 0);
  unint64_t v31 = v24 & 0xFFFFFFFFFFFFFFF8;
  float v32 = *(float *)v85.i32;
  float32x4_t v34 = (float32x4_t)vdupq_lane_s32(v85, 0);
  *(float *)v27.i32 = v30 + v29;
  float32x4_t v35 = (float32x4_t)vdupq_lane_s32(v27, 0);
  int64x2_t v36 = (int64x2_t)xmmword_2591200D0;
  int64x2_t v37 = (int64x2_t)xmmword_2591200C0;
  float32x4_t v38 = (float32x4_t *)(v25 + 4);
  int64x2_t v39 = vdupq_n_s64(4uLL);
  int64x2_t v40 = vdupq_n_s64(8uLL);
  unint64_t v41 = v24 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v38[-1] = vaddq_f32(v35, vsubq_f32(vaddq_f32(v33, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v37)), vcvtq_f64_u64((uint64x2_t)v36))), v34));
    *float32x4_t v38 = vaddq_f32(v35, vsubq_f32(vaddq_f32(v33, vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v37, v39))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v36, v39)))), v34));
    int64x2_t v36 = vaddq_s64(v36, v40);
    int64x2_t v37 = vaddq_s64(v37, v40);
    v38 += 2;
    v41 -= 8;
  }
  while (v41);
  if (v24 != v31) {
    goto LABEL_29;
  }
LABEL_31:
  peridot::PeridotDxpMacro::getPulseShape(v26, (uint64_t *)this + 18, (uint64_t *)this + 15, v88, 0, (__int32 **)__p);
  unint64_t v43 = (unint64_t)fmax((double)(unint64_t)(v22 - 6), 0.0);
  uint64_t v44 = v23 - v43;
  BOOL v45 = __p[0];
  if (v23 - v43 == -1)
  {
    *a6 = 0.0;
    *a5 = NAN;
    if (!v45) {
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  uint64_t v46 = v44 + 1;
  unint64_t v47 = v43;
  if ((unint64_t)(v44 + 1) > 7)
  {
    unint64_t v48 = v46 & 0xFFFFFFFFFFFFFFF8;
    float32x2_t v52 = a3;
    float32x4_t v53 = (float32x4_t *)&a3[v47 + 4];
    float32x4_t v54 = (float32x4_t *)((char *)__p[0] + v47 * 4 + 16);
    float32x4_t v55 = 0uLL;
    unint64_t v56 = v46 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v57 = 0uLL;
    float32x4_t v58 = 0uLL;
    float32x4_t v59 = 0uLL;
    float32x4_t v60 = 0uLL;
    float32x4_t v61 = 0uLL;
    do
    {
      float32x4_t v62 = v54[-1];
      float32x4_t v60 = vmlaq_f32(v60, v62, v53[-1]);
      float32x4_t v61 = vmlaq_f32(v61, *v54, *v53);
      float32x4_t v58 = vmlaq_f32(v58, v62, v62);
      float32x4_t v59 = vmlaq_f32(v59, *v54, *v54);
      float32x4_t v55 = vaddq_f32(v62, v55);
      float32x4_t v57 = vaddq_f32(*v54, v57);
      v53 += 2;
      v54 += 2;
      v56 -= 8;
    }
    while (v56);
    float32x4_t v63 = vaddq_f32(v61, v60);
    float v51 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v63, v63));
    float32x4_t v64 = vaddq_f32(v59, v58);
    float v50 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v64, v64));
    float32x4_t v65 = vaddq_f32(v57, v55);
    float v49 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v65, v65));
    if (v46 == v48) {
      goto LABEL_42;
    }
  }
  else
  {
    unint64_t v48 = 0;
    float v49 = 0.0;
    float v50 = 0.0;
    float v51 = 0.0;
    float32x2_t v52 = a3;
  }
  unint64_t v66 = v48 + v43;
  unint64_t v67 = ~v23 + v66;
  uint64_t v68 = 4 * v66;
  unint64_t v69 = (float *)&v52[v66];
  float32x4_t v70 = (float *)((char *)__p[0] + v68);
  do
  {
    float v71 = *v70++;
    float v72 = v71;
    float v73 = *v69++;
    float v51 = v51 + (float)(v73 * v72);
    float v50 = v50 + (float)(v72 * v72);
    float v49 = v72 + v49;
  }
  while (!__CFADD__(v67++, 1));
LABEL_42:
  uint64_t v75 = 0;
  uint64_t v76 = v44 + 1;
  uint64_t v77 = (char *)__p[0] + v47 * 4;
  unint64_t v78 = &v52[v47];
  float v79 = 0.0;
  memset(v90, 0, sizeof(v90));
  *a6 = 0.0;
  float v80 = v51 / v50;
  float v81 = 0.0;
  do
  {
    float v82 = v78[v75];
    float v83 = (float)(v82 - (float)(*(float *)&v77[4 * v75] * v80)) + *((float *)v90 + v75);
    *((float *)v90 + v75) = v83;
    float v81 = fabs(v83 / fmax(v82, 0.01)) + v81;
    *a6 = v81;
    float v79 = v79 + (float)(v83 * v83);
    ++v75;
  }
  while (v76 != v75);
  *a5 = (float)(v80 * v49) / sqrtf(v79);
LABEL_45:
  operator delete(v45);
LABEL_46:
  operator delete(v25);
}

void sub_258FFEDE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t peridot::PeridotDXPCalib::configure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  v231[15] = *MEMORY[0x263EF8340];
  uint64_t v9 = a1 + 40468;
  peridot::PeridotDXPCalib::InputConfig::init(a1 + 16, a2, a3, a5, *(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 4));
  uint64_t v13 = *(unsigned __int8 *)(a1 + 5);
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v14 = *(void *)(a1 + 272);
    unint64_t v15 = (void *)(a1 + 3464);
    unint64_t v16 = (float *)(a1 + 3424);
    do
    {
      LOWORD(v11) = *(_WORD *)(v14 + 2);
      LOBYTE(v12) = *(unsigned char *)(v14 + 12);
      float v17 = (float)(*(unsigned __int8 *)(v14 + 4) << 8) + (float)LODWORD(v12);
      unsigned int v18 = 931135488;
      float v19 = (float)LODWORD(v11) + (float)(v17 * 0.000015259);
      unsigned int v20 = 850588924;
      float v21 = 0.000000020833 / v19;
      *unint64_t v16 = v21;
      LOBYTE(v20) = *(unsigned char *)v14;
      LOBYTE(v18) = *(unsigned char *)(v14 + 1);
      float v22 = (float)v18 + 1.0;
      float v23 = (float)((float)((float)v20 * 16.0) * v21) / v22;
      v16[3] = v23;
      float v12 = v22 * (float)*(unsigned int *)(v14 + 8);
      float v11 = v23 / v21;
      v16[6] = v12;
      *v15++ = vcvtas_u32_f32(v11);
      v14 += 16;
      ++v16;
      --v13;
    }
    while (v13);
  }
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  v225 = 0;
  uint64_t v226 = 0;
  float v224 = &v225;
  while (1)
  {
    unsigned int v26 = *(_DWORD *)(a1 + 4 * v25 + 24);
    int32x2_t v27 = &v225;
    int32x2_t v28 = &v225;
    if (v24)
    {
      float v29 = &v225;
      float v30 = v24;
      do
      {
        unint64_t v31 = v30;
        float v32 = v29;
        unsigned int v33 = *((_DWORD *)v30 + 7);
        if (v33 >= v26) {
          float v29 = (uint64_t **)v30;
        }
        else {
          ++v30;
        }
        float v30 = (uint64_t *)*v30;
      }
      while (v30);
      if (v29 == &v225) {
        goto LABEL_18;
      }
      if (v33 < v26) {
        unint64_t v31 = v32;
      }
      if (v26 < v31[7])
      {
LABEL_18:
        while (1)
        {
          while (1)
          {
            int32x2_t v28 = (uint64_t **)v24;
            unsigned int v34 = *((_DWORD *)v24 + 7);
            if (v26 >= v34) {
              break;
            }
            unint64_t v24 = *v28;
            int32x2_t v27 = v28;
            if (!*v28) {
              goto LABEL_21;
            }
          }
          if (v34 >= v26) {
            break;
          }
          unint64_t v24 = v28[1];
          if (!v24)
          {
            int32x2_t v27 = v28 + 1;
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
LABEL_21:
      float32x4_t v35 = operator new(0x28uLL);
      v35[7] = v26;
      *((unsigned char *)v35 + 32) = v25;
      *(void *)float32x4_t v35 = 0;
      *((void *)v35 + 1) = 0;
      *((void *)v35 + 2) = v28;
      float32x4_t *v27 = (uint64_t *)v35;
      if (*v224)
      {
        float v224 = (uint64_t **)*v224;
        float32x4_t v35 = *v27;
      }
      uint64_t v10 = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v225, (uint64_t *)v35);
      ++v226;
    }
    if (++v25 == 14) {
      break;
    }
    unint64_t v24 = v225;
  }
  unsigned int v218 = a3;
  int64x2_t v36 = v224;
  if (v224 != &v225)
  {
    do
    {
      int v37 = *((_DWORD *)v36 + 7);
      uint64_t v38 = *((unsigned __int8 *)v36 + 32);
      v229[0] = *(_WORD *)(a1 + 16 + 2 * v38 + 72);
      v230[0] = *(_DWORD *)(a1 + 16 + 4 * v38 + 8);
      peridot::PeridotDXPCalib::modeConfigGetPixelsNum(v10, v229, v230, (unsigned char *)(a1 + 3520), (unsigned char *)(a1 + 3521), (unsigned char *)(a1 + 3522), (uint64_t)&v227);
      int v40 = *(_DWORD *)(a1 + 24);
      int v39 = *(_DWORD *)(a1 + 28);
      BOOL v41 = v40 == v37;
      BOOL v42 = BYTE2(v227) == 2 || BYTE1(v227) == 2;
      BOOL v43 = v42 || v227 == 2;
      unsigned int v44 = v43;
      if (!v43) {
        BOOL v41 = 0;
      }
      int v46 = *(_DWORD *)(a1 + 32);
      int v45 = *(_DWORD *)(a1 + 36);
      int v47 = *(_DWORD *)(a1 + 40);
      int v48 = *(_DWORD *)(a1 + 44);
      int v50 = *(_DWORD *)(a1 + 48);
      int v49 = *(_DWORD *)(a1 + 52);
      int v52 = *(_DWORD *)(a1 + 56);
      int v51 = *(_DWORD *)(a1 + 60);
      int v54 = *(_DWORD *)(a1 + 64);
      int v53 = *(_DWORD *)(a1 + 68);
      *(unsigned char *)(v9 + 1908) = v41;
      int v56 = *(_DWORD *)(a1 + 72);
      int v55 = *(_DWORD *)(a1 + 76);
      if (v40 == v37)
      {
        *(void *)(a1 + 40480) = v227;
        *(unsigned char *)(a1 + 40488) = v228;
      }
      BOOL v57 = v39 == v37;
      if (v39 == v37) {
        char v58 = v44;
      }
      else {
        char v58 = 0;
      }
      *(unsigned char *)(v9 + 1909) = v58;
      if (v57)
      {
        *(void *)(a1 + 40489) = v227;
        *(unsigned char *)(a1 + 40497) = v228;
      }
      BOOL v59 = v46 == v37;
      if (v46 == v37) {
        char v60 = v44;
      }
      else {
        char v60 = 0;
      }
      *(unsigned char *)(v9 + 1910) = v60;
      if (v59)
      {
        *(void *)(a1 + 40498) = v227;
        *(unsigned char *)(a1 + 40506) = v228;
      }
      BOOL v61 = v45 == v37;
      if (v45 == v37) {
        char v62 = v44;
      }
      else {
        char v62 = 0;
      }
      *(unsigned char *)(v9 + 1911) = v62;
      if (v61)
      {
        *(void *)(a1 + 40507) = v227;
        *(unsigned char *)(a1 + 40515) = v228;
      }
      BOOL v63 = v47 == v37;
      if (v47 == v37) {
        uint64_t v10 = v44;
      }
      else {
        uint64_t v10 = 0;
      }
      *(unsigned char *)(v9 + 1912) = v10;
      if (v63)
      {
        *(void *)(a1 + 40516) = v227;
        uint64_t v10 = v228;
        *(unsigned char *)(a1 + 40524) = v228;
      }
      BOOL v64 = v48 == v37;
      if (v48 == v37) {
        char v65 = v44;
      }
      else {
        char v65 = 0;
      }
      *(unsigned char *)(v9 + 1913) = v65;
      if (v64)
      {
        uint64_t v10 = a1 + 40525;
        *(void *)(a1 + 40525) = v227;
        *(unsigned char *)(a1 + 40533) = v228;
      }
      BOOL v66 = v50 == v37;
      if (v50 == v37) {
        char v67 = v44;
      }
      else {
        char v67 = 0;
      }
      *(unsigned char *)(v9 + 1914) = v67;
      if (v66)
      {
        *(void *)(a1 + 40534) = v227;
        *(unsigned char *)(a1 + 40542) = v228;
      }
      BOOL v68 = v49 == v37;
      if (v49 == v37) {
        char v69 = v44;
      }
      else {
        char v69 = 0;
      }
      *(unsigned char *)(v9 + 1915) = v69;
      if (v68)
      {
        *(void *)(a1 + 40543) = v227;
        *(unsigned char *)(a1 + 40551) = v228;
      }
      BOOL v70 = v52 == v37;
      if (v52 == v37) {
        char v71 = v44;
      }
      else {
        char v71 = 0;
      }
      *(unsigned char *)(v9 + 1916) = v71;
      if (v70)
      {
        *(void *)(a1 + 40552) = v227;
        *(unsigned char *)(a1 + 40560) = v228;
      }
      BOOL v72 = v51 == v37;
      if (v51 == v37) {
        char v73 = v44;
      }
      else {
        char v73 = 0;
      }
      *(unsigned char *)(v9 + 1917) = v73;
      if (v72)
      {
        *(void *)(a1 + 40561) = v227;
        *(unsigned char *)(a1 + 40569) = v228;
      }
      BOOL v74 = v54 == v37;
      if (v54 == v37) {
        char v75 = v44;
      }
      else {
        char v75 = 0;
      }
      *(unsigned char *)(v9 + 1918) = v75;
      if (v74)
      {
        *(void *)(a1 + 40570) = v227;
        *(unsigned char *)(a1 + 40578) = v228;
      }
      BOOL v76 = v53 == v37;
      if (v53 == v37) {
        char v77 = v44;
      }
      else {
        char v77 = 0;
      }
      *(unsigned char *)(v9 + 1919) = v77;
      if (v76)
      {
        *(void *)(a1 + 40579) = v227;
        *(unsigned char *)(a1 + 40587) = v228;
      }
      BOOL v78 = v56 == v37;
      if (v56 == v37) {
        char v79 = v44;
      }
      else {
        char v79 = 0;
      }
      *(unsigned char *)(v9 + 1920) = v79;
      if (v78)
      {
        *(void *)(a1 + 40588) = v227;
        *(unsigned char *)(a1 + 40596) = v228;
      }
      if (v55 != v37) {
        LOBYTE(v44) = 0;
      }
      *(unsigned char *)(v9 + 1921) = v44;
      if (v55 == v37)
      {
        *(void *)(a1 + 40597) = v227;
        *(unsigned char *)(a1 + 40605) = v228;
      }
      float v80 = v36[1];
      if (v80)
      {
        do
        {
          float v81 = (uint64_t **)v80;
          float v80 = (uint64_t *)*v80;
        }
        while (v80);
      }
      else
      {
        do
        {
          float v81 = (uint64_t **)v36[2];
          BOOL v42 = *v81 == (uint64_t *)v36;
          int64x2_t v36 = v81;
        }
        while (!v42);
      }
      int64x2_t v36 = v81;
    }
    while (v81 != &v225);
  }
  peridot::PeridotDXPCalib::getBankModeSkews(a1, a2, a5, 0, a1 + 1840, a1 + 328);
  uint64_t v83 = 0;
  uint64_t v84 = 0;
  uint64_t v85 = a1 + 40484;
  uint64_t v86 = 328;
  memset(v229, 0, 112);
  uint64_t v87 = v218;
  do
  {
    *((unsigned char *)v230 + v83) = 0;
    if (*(unsigned char *)(v85 + v83 - 4) == 3)
    {
      *((unsigned char *)v230 + v83) = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86);
    }
    uint64_t v88 = (char *)v230 + v83;
    *((unsigned char *)v230 + v83 + 1) = 0;
    if (*(unsigned char *)(v85 + v83 - 3) == 3)
    {
      v88[1] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 4);
    }
    v88[2] = 0;
    if (*(unsigned char *)(v85 + v83 - 2) == 3)
    {
      v88[2] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 8);
    }
    float32x4_t v89 = (char *)v230 + v83;
    *((unsigned char *)v230 + v83 + 3) = 0;
    if (*(unsigned char *)(v85 + v83 - 1) == 3)
    {
      v89[3] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 12);
    }
    v89[4] = 0;
    if (*(unsigned char *)(v85 + v83) == 3)
    {
      v89[4] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 16);
    }
    float v90 = (char *)v230 + v83;
    *((unsigned char *)&v230[1] + v83 + 1) = 0;
    if (*(unsigned char *)(v85 + v83 + 1) == 3)
    {
      v90[5] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 20);
    }
    v90[6] = 0;
    if (*(unsigned char *)(v85 + v83 + 2) == 3)
    {
      v90[6] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 24);
    }
    uint64_t v91 = (char *)v230 + v83;
    *((unsigned char *)&v230[1] + v83 + 3) = 0;
    if (*(unsigned char *)(v85 + v83 + 3) == 3)
    {
      v91[7] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 28);
    }
    v91[8] = 0;
    if (*(unsigned char *)(v85 + v83 + 4) == 3)
    {
      v91[8] = 1;
      *(void *)&v229[v84] = (unint64_t)*(float *)(a1 + v86 + 32);
    }
    v84 += 4;
    v86 += 36;
    v83 += 9;
  }
  while (v84 != 56);
  for (uint64_t i = 0; i != 14; ++i)
  {
    unint64_t v98 = *(void *)&v229[4 * i];
    if (v98)
    {
      unint64_t v93 = v98 / 0x6C;
      unint64_t v94 = v98 % 0x6C;
      BOOL v95 = v94 != 0;
      unint64_t v96 = v94 - 1;
      if (!v95) {
        unint64_t v96 = 0;
      }
      float v97 = *(float *)(a1 + 432 * v93 + 4 * v96 + 4168) / *(float *)v9;
    }
    else
    {
      float v97 = 0.0;
    }
    *(float *)(a1 + 40916 + 4 * i) = v97;
  }
  if (v218 == 2)
  {
    unint64_t v99 = 0;
    uint64_t v100 = 0;
    float v222 = 0;
    uint64_t v223 = 0;
    float v221 = &v222;
    while (1)
    {
      unsigned int v101 = *(_DWORD *)(a1 + 4 * v100 + 149);
      BOOL v102 = &v222;
      BOOL v103 = &v222;
      if (!v99) {
        goto LABEL_169;
      }
      uint64_t v104 = &v222;
      float32x4_t v105 = v99;
      do
      {
        float32x4_t v106 = v105;
        long long v107 = v104;
        unsigned int v108 = *((_DWORD *)v105 + 7);
        if (v108 >= v101) {
          uint64_t v104 = (uint64_t **)v105;
        }
        else {
          ++v105;
        }
        float32x4_t v105 = (uint64_t *)*v105;
      }
      while (v105);
      if (v104 == &v222) {
        break;
      }
      if (v108 < v101) {
        float32x4_t v106 = v107;
      }
      if (v101 < v106[7]) {
        break;
      }
LABEL_172:
      if (++v100 == 14)
      {
        uint16x8_t v111 = v221;
        if (v221 != &v222)
        {
          do
          {
            int v112 = *((_DWORD *)v111 + 7);
            uint64_t v113 = *((unsigned __int8 *)v111 + 32);
            __int16 v220 = *(_WORD *)(a1 + 16 + 2 * v113 + 198);
            int v219 = *(_DWORD *)(a1 + 16 + 4 * v113 + 133);
            unsigned __int8 v228 = 0;
            uint64_t v227 = 0;
            peridot::PeridotDXPCalib::modeConfigGetPixelsNum(v87, &v220, &v219, (unsigned char *)(a1 + 3523), (unsigned char *)(a1 + 3524), (unsigned char *)(a1 + 3525), (uint64_t)&v227);
            int v114 = *(_DWORD *)(a1 + 149);
            BOOL v115 = v114 == v112;
            BOOL v117 = BYTE2(v227) == 2 || BYTE1(v227) == 2 || v227 == 2;
            unsigned int v118 = v117;
            if (!v117) {
              BOOL v115 = 0;
            }
            int v119 = *(_DWORD *)(a1 + 153);
            int v120 = *(_DWORD *)(a1 + 157);
            int v121 = *(_DWORD *)(a1 + 161);
            int v122 = *(_DWORD *)(a1 + 165);
            int v123 = *(_DWORD *)(a1 + 169);
            int v124 = *(_DWORD *)(a1 + 173);
            int v125 = *(_DWORD *)(a1 + 177);
            int v126 = *(_DWORD *)(a1 + 181);
            int v127 = *(_DWORD *)(a1 + 185);
            int v128 = *(_DWORD *)(a1 + 189);
            int v129 = *(_DWORD *)(a1 + 193);
            int v130 = *(_DWORD *)(a1 + 197);
            *(unsigned char *)(v9 + 1922) = v115;
            int v131 = *(_DWORD *)(a1 + 201);
            if (v114 == v112)
            {
              *(void *)(a1 + 40606) = v227;
              *(unsigned char *)(a1 + 40614) = v228;
            }
            BOOL v132 = v119 == v112;
            if (v119 == v112) {
              char v133 = v118;
            }
            else {
              char v133 = 0;
            }
            *(unsigned char *)(v9 + 1923) = v133;
            if (v132)
            {
              *(void *)(a1 + 40615) = v227;
              *(unsigned char *)(a1 + 40623) = v228;
            }
            BOOL v134 = v120 == v112;
            if (v120 == v112) {
              char v135 = v118;
            }
            else {
              char v135 = 0;
            }
            *(unsigned char *)(v9 + 1924) = v135;
            if (v134)
            {
              *(void *)(a1 + 40624) = v227;
              *(unsigned char *)(a1 + 40632) = v228;
            }
            BOOL v136 = v121 == v112;
            if (v121 == v112) {
              char v137 = v118;
            }
            else {
              char v137 = 0;
            }
            *(unsigned char *)(v9 + 1925) = v137;
            if (v136)
            {
              *(void *)(a1 + 40633) = v227;
              *(unsigned char *)(a1 + 40641) = v228;
            }
            BOOL v138 = v122 == v112;
            if (v122 == v112) {
              uint64_t v87 = v118;
            }
            else {
              uint64_t v87 = 0;
            }
            *(unsigned char *)(v9 + 1926) = v87;
            if (v138)
            {
              *(void *)(a1 + 40642) = v227;
              uint64_t v87 = v228;
              *(unsigned char *)(a1 + 40650) = v228;
            }
            BOOL v139 = v123 == v112;
            if (v123 == v112) {
              char v140 = v118;
            }
            else {
              char v140 = 0;
            }
            *(unsigned char *)(v9 + 1927) = v140;
            if (v139)
            {
              uint64_t v87 = a1 + 40651;
              *(void *)(a1 + 40651) = v227;
              *(unsigned char *)(a1 + 40659) = v228;
            }
            BOOL v141 = v124 == v112;
            if (v124 == v112) {
              char v142 = v118;
            }
            else {
              char v142 = 0;
            }
            *(unsigned char *)(v9 + 1928) = v142;
            if (v141)
            {
              *(void *)(a1 + 40660) = v227;
              *(unsigned char *)(a1 + 40668) = v228;
            }
            BOOL v143 = v125 == v112;
            if (v125 == v112) {
              char v144 = v118;
            }
            else {
              char v144 = 0;
            }
            *(unsigned char *)(v9 + 1929) = v144;
            if (v143)
            {
              *(void *)(a1 + 40669) = v227;
              *(unsigned char *)(a1 + 40677) = v228;
            }
            BOOL v145 = v126 == v112;
            if (v126 == v112) {
              char v146 = v118;
            }
            else {
              char v146 = 0;
            }
            *(unsigned char *)(v9 + 1930) = v146;
            if (v145)
            {
              *(void *)(a1 + 40678) = v227;
              *(unsigned char *)(a1 + 40686) = v228;
            }
            BOOL v147 = v127 == v112;
            if (v127 == v112) {
              char v148 = v118;
            }
            else {
              char v148 = 0;
            }
            *(unsigned char *)(v9 + 1931) = v148;
            if (v147)
            {
              *(void *)(a1 + 40687) = v227;
              *(unsigned char *)(a1 + 40695) = v228;
            }
            BOOL v149 = v128 == v112;
            if (v128 == v112) {
              char v150 = v118;
            }
            else {
              char v150 = 0;
            }
            *(unsigned char *)(v9 + 1932) = v150;
            if (v149)
            {
              *(void *)(a1 + 40696) = v227;
              *(unsigned char *)(a1 + 40704) = v228;
            }
            BOOL v151 = v129 == v112;
            if (v129 == v112) {
              char v152 = v118;
            }
            else {
              char v152 = 0;
            }
            *(unsigned char *)(v9 + 1933) = v152;
            if (v151)
            {
              *(void *)(a1 + 40705) = v227;
              *(unsigned char *)(a1 + 40713) = v228;
            }
            BOOL v153 = v130 == v112;
            if (v130 == v112) {
              char v154 = v118;
            }
            else {
              char v154 = 0;
            }
            *(unsigned char *)(v9 + 1934) = v154;
            if (v153)
            {
              *(void *)(a1 + 40714) = v227;
              *(unsigned char *)(a1 + 40722) = v228;
            }
            if (v131 != v112) {
              LOBYTE(v118) = 0;
            }
            *(unsigned char *)(v9 + 1935) = v118;
            if (v131 == v112)
            {
              *(void *)(a1 + 40723) = v227;
              *(unsigned char *)(a1 + 40731) = v228;
            }
            long long v155 = v111[1];
            if (v155)
            {
              do
              {
                float v156 = (uint64_t **)v155;
                long long v155 = (uint64_t *)*v155;
              }
              while (v155);
            }
            else
            {
              do
              {
                float v156 = (uint64_t **)v111[2];
                BOOL v42 = *v156 == (uint64_t *)v111;
                uint16x8_t v111 = v156;
              }
              while (!v42);
            }
            uint16x8_t v111 = v156;
          }
          while (v156 != &v222);
        }
        peridot::PeridotDXPCalib::getBankModeSkews(a1, a2, a5, 1, a1 + 2344, a1 + 832);
        peridot::PeridotDXPCalib::getBankModeSkews(a1, a2, a5, 2, a1 + 2848, a1 + 1336);
        uint64_t v157 = 0;
        uint64_t v158 = (char *)(v9 + 146);
        uint64_t v159 = (int8x8_t *)v231;
        uint64_t v160 = a1 + 42390;
        do
        {
          if (*(unsigned char *)(v160 + v157)) {
            unsigned int v161 = -3;
          }
          else {
            unsigned int v161 = -2;
          }
          if (*(unsigned char *)(v160 + v157)) {
            unsigned int v162 = 1;
          }
          else {
            unsigned int v162 = 2;
          }
          v159[-1] = vand_s8(vceq_s8(vand_s8(*(int8x8_t *)(v158 - 8), vdup_n_s8(v161)), vdup_n_s8(v162)), (int8x8_t)0x101010101010101);
          char v163 = *v158;
          v158 += 9;
          v159->i8[0] = v162 == (v163 & v161);
          uint64_t v159 = (int8x8_t *)((char *)v159 + 9);
          ++v157;
        }
        while (v157 != 14);
        uint64_t v164 = 0;
        unint64_t v165 = 0;
        float32x4_t v166 = (float *)(a1 + 864);
        while (2)
        {
          if (v165 >= 0x1C) {
            goto LABEL_282;
          }
          if (*((unsigned char *)v230 + v164))
          {
            *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 8);
            if (v165 <= 0x1A)
            {
              ++v165;
              goto LABEL_287;
            }
          }
          else
          {
LABEL_287:
            if (*((unsigned char *)v230 + v164 + 1))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 7);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (*((unsigned char *)v230 + v164 + 2))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 6);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (*((unsigned char *)v230 + v164 + 3))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 5);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (*((unsigned char *)&v230[1] + v164))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 4);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (*((unsigned char *)&v230[1] + v164 + 1))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 3);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (*((unsigned char *)&v230[1] + v164 + 2))
            {
              *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 2);
              if (v165 > 0x1A) {
                goto LABEL_281;
              }
              ++v165;
            }
            if (!*((unsigned char *)&v230[1] + v164 + 3)) {
              goto LABEL_308;
            }
            *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*(v166 - 1);
            if (v165 <= 0x1A)
            {
              ++v165;
LABEL_308:
              if (*((unsigned char *)&v230[2] + v164))
              {
                *(uint64_t *)((char *)&v227 + 112 * (v165 & 1) + ((4 * v165) & 0xFFFFFFFFFFFFFFF8)) = (unint64_t)*v166;
                ++v165;
              }
              goto LABEL_282;
            }
          }
LABEL_281:
          unint64_t v165 = 28;
LABEL_282:
          v164 += 9;
          v166 += 9;
          if (v164 == 126)
          {
            uint64_t v167 = 0;
            while (1)
            {
              float32x4_t v168 = &v227 + v167;
              unint64_t v169 = *v168;
              unint64_t v170 = v168[14];
              float v171 = 0.0;
              if (v169) {
                BOOL v172 = v170 == 0;
              }
              else {
                BOOL v172 = 1;
              }
              if (!v172)
              {
                if (v169 >> 4 >= 0x237 || v170 >> 4 >= 0x237)
                {
                  peridot_depth_log("Wrong Configuration: hp_pixel_idxs", 0.0);
                  std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(v222);
                  uint64_t v214 = 4;
                  goto LABEL_349;
                }
                unsigned int v173 = (unsigned __int16)v170 / 0x6Cu;
                uint64_t v174 = (unsigned __int16)v170 % 0x6Cu;
                BOOL v95 = v174 != 0;
                uint64_t v175 = v174 - 1;
                if (!v95) {
                  uint64_t v175 = 0;
                }
                unsigned int v176 = (unsigned __int16)v169 / 0x6Cu;
                uint64_t v177 = (unsigned __int16)v169 % 0x6Cu;
                BOOL v95 = v177 != 0;
                uint64_t v178 = v177 - 1;
                if (!v95) {
                  uint64_t v178 = 0;
                }
                float v171 = fmaxf(*(float *)(a1 + 4168 + 432 * v176 + 4 * v178), *(float *)(a1 + 4168 + 432 * v173 + 4 * v175))/ *(float *)(v9 + 4);
              }
              *(float *)(a1 + 40972 + 4 * v167++) = v171;
              if (v167 == 14)
              {
                std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(v222);
                goto LABEL_324;
              }
            }
          }
          continue;
        }
      }
      unint64_t v99 = v222;
    }
    do
    {
      while (1)
      {
        BOOL v103 = (uint64_t **)v99;
        unsigned int v109 = *((_DWORD *)v99 + 7);
        if (v101 >= v109) {
          break;
        }
        unint64_t v99 = *v103;
        BOOL v102 = v103;
        if (!*v103) {
          goto LABEL_169;
        }
      }
      if (v109 >= v101) {
        goto LABEL_172;
      }
      unint64_t v99 = v103[1];
    }
    while (v99);
    BOOL v102 = v103 + 1;
LABEL_169:
    uint64_t v110 = operator new(0x28uLL);
    v110[7] = v101;
    *((unsigned char *)v110 + 32) = v100;
    *(void *)uint64_t v110 = 0;
    *((void *)v110 + 1) = 0;
    *((void *)v110 + 2) = v103;
    *BOOL v102 = (uint64_t *)v110;
    if (*v221)
    {
      float v221 = (uint64_t **)*v221;
      uint64_t v110 = *v102;
    }
    uint64_t v87 = (uint64_t)std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v222, (uint64_t *)v110);
    ++v223;
    goto LABEL_172;
  }
LABEL_324:
  if ((*(_DWORD *)a1 - 1) <= 1)
  {
    LOWORD(v97) = *(_WORD *)(a1 + 298);
    LOBYTE(v82) = *(unsigned char *)(a1 + 308);
    float v179 = (float)(*(unsigned __int8 *)(a1 + 300) << 8) + (float)v82;
    unsigned int v180 = 931135488;
    float v181 = (float)LODWORD(v97) + (float)(v179 * 0.000015259);
    unsigned int v182 = 850588924;
    float v183 = 0.000000020833 / v181;
    *(float *)(a1 + 3488) = v183;
    LOBYTE(v182) = *(unsigned char *)(a1 + 296);
    LOBYTE(v180) = *(unsigned char *)(a1 + 297);
    float v184 = (float)v180 + 1.0;
    *(float *)&unsigned int v185 = (float)v182 * 16.0;
    *(float *)(a1 + 3492) = (float)(*(float *)&v185 * v183) / v184;
    *(float *)(a1 + 3496) = v184 * (float)*(unsigned int *)(a1 + 304);
    LOBYTE(v185) = *(unsigned char *)(a1 + 313);
    *(float *)(a1 + 3500) = (float)((float)v185 + 1.0) * (float)*(unsigned int *)(a1 + 320);
  }
  *(_WORD *)(a1 + 3504) = *(_WORD *)(a1 + 80);
  *(_WORD *)(a1 + 3506) = *(_WORD *)(a1 + 86);
  *(_DWORD *)(a1 + 3508) = *(unsigned __int8 *)(a1 + 21);
  *(_DWORD *)(a1 + 3512) = *(unsigned __int8 *)(a1 + 22);
  *(_DWORD *)(a1 + 3516) = *(unsigned __int8 *)(a1 + 23);
  peridot::PeridotDXPCalib::updateDTM((peridot::PeridotDXPCalib *)a1);
  char v188 = *(unsigned char *)(a1 + 144);
  *(unsigned char *)(a1 + 3526) = ((v188 & 2) != 0) + (v188 & 1);
  *(unsigned char *)(a1 + 3527) = ((v188 & 4) != 0) + ((v188 & 8) != 0);
  *(void *)(a1 + 4024) = *(void *)(a1 + 3352);
  *(void *)(a1 + 4030) = *(void *)(a1 + 3358);
  *(void *)(a1 + 4038) = *(void *)(a1 + 3366);
  *(void *)(a1 + 4044) = *(void *)(a1 + 3372);
  if (*(unsigned __int8 *)(v9 + 560) >= 0x65u)
  {
    uint64_t v189 = 0;
    uint64_t v190 = a4 + 108;
    float32x4_t v191 = (_DWORD *)(v9 + 564);
    float32x4_t v192 = (_DWORD *)(v9 + 568);
    float32x4_t v193 = (_DWORD *)(v9 + 572);
    do
    {
      BOOL v194 = v189 == 3;
      if (v189 == 3) {
        uint64_t v195 = 2;
      }
      else {
        uint64_t v195 = v189;
      }
      uint64_t v196 = a1 + 12 * v195;
      float32x4_t v197 = v191;
      for (uint64_t j = 328; j != 832; j += 36)
      {
        *float32x4_t v197 = 1065353216;
        v197[168] = 1065353216;
        float v201 = *(float *)(v196 + j);
        if (v201 == 0.0)
        {
          *float32x4_t v197 = 0;
          int v200 = 0;
        }
        else
        {
          *float32x4_t v197 = *(_DWORD *)(v190
                            + 432 * (unint64_t)(double)(((unint64_t)(float)(v201 + -1.0) + v194) / 0x6C)
                            + 4
                            * ((unint64_t)(float)(v201 + -1.0)
                             + v194
                             - 108 * (unint64_t)(double)(((unint64_t)(float)(v201 + -1.0) + v194) / 0x6C)));
          unint64_t v199 = (unint64_t)(float)(*(float *)(v196 + j + 504) + -1.0) + v194;
          int v200 = *(_DWORD *)(v190
                           + 432 * (unint64_t)(double)(v199 / 0x6C)
                           + 4 * (v199 - 108 * (unint64_t)(double)(v199 / 0x6C)));
        }
        v197[168] = v200;
        v197 += 12;
      }
      uint64_t v202 = a1 + 12 * v195;
      float32x4_t v203 = v192;
      for (uint64_t k = 332; k != 836; k += 36)
      {
        _DWORD *v203 = 1065353216;
        v203[168] = 1065353216;
        float v206 = *(float *)(v202 + k);
        if (v206 == 0.0)
        {
          _DWORD *v203 = 0;
          int v205 = 0;
        }
        else
        {
          _DWORD *v203 = *(_DWORD *)(v190
                            + 432 * (unint64_t)(double)(((unint64_t)(float)(v206 + -1.0) + v194) / 0x6C)
                            + 4
                            * ((unint64_t)(float)(v206 + -1.0)
                             + v194
                             - 108 * (unint64_t)(double)(((unint64_t)(float)(v206 + -1.0) + v194) / 0x6C)));
          unint64_t v207 = (unint64_t)(float)(*(float *)(v202 + k + 504) + -1.0) + v194;
          int v205 = *(_DWORD *)(v190
                           + 432 * (unint64_t)(double)(v207 / 0x6C)
                           + 4 * (v207 - 108 * (unint64_t)(double)(v207 / 0x6C)));
        }
        v203[168] = v205;
        v203 += 12;
      }
      uint64_t v208 = a1 + 12 * v195;
      float32x4_t v209 = v193;
      for (uint64_t m = 336; m != 840; m += 36)
      {
        *float32x4_t v209 = 1065353216;
        v209[168] = 1065353216;
        float v212 = *(float *)(v208 + m);
        if (v212 == 0.0)
        {
          *float32x4_t v209 = 0;
          int v211 = 0;
        }
        else
        {
          *float32x4_t v209 = *(_DWORD *)(v190
                            + 432 * (unint64_t)(double)(((unint64_t)(float)(v212 + -1.0) + v194) / 0x6C)
                            + 4
                            * ((unint64_t)(float)(v212 + -1.0)
                             + v194
                             - 108 * (unint64_t)(double)(((unint64_t)(float)(v212 + -1.0) + v194) / 0x6C)));
          unint64_t v213 = (unint64_t)(float)(*(float *)(v208 + m + 504) + -1.0) + v194;
          int v211 = *(_DWORD *)(v190
                           + 432 * (unint64_t)(double)(v213 / 0x6C)
                           + 4 * (v213 - 108 * (unint64_t)(double)(v213 / 0x6C)));
        }
        v209[168] = v211;
        v209 += 12;
      }
      ++v189;
      v191 += 3;
      v192 += 3;
      v193 += 3;
    }
    while (v189 != 4);
  }
  uint64_t v214 = 0;
  __int16 v215 = *(_WORD *)(a1 + 3386) | *(_WORD *)(a1 + 3388);
  v186.i32[0] = *(unsigned __int16 *)(a1 + 3386);
  v187.i32[0] = *(unsigned __int16 *)(a1 + 3388);
  *(int8x8_t *)(v9 + 1936) = vand_s8(vmovn_s16(vtstq_s16(vdupq_lane_s16((int16x4_t)*(_OWORD *)&vorrq_s8((int8x16_t)v186, v187), 0), (int16x8_t)xmmword_259120AA0)), (int8x8_t)0x101010101010101);
  *(int8x8_t *)v186.i8 = vbic_s8((int8x8_t)0x1000100010001, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)vdup_lane_s16((int16x4_t)vorr_s8(*(int8x8_t *)v186.i8, *(int8x8_t *)v187.i8), 0), (int8x8_t)0x800040002000100)));
  *(_DWORD *)(v9 + 1944) = vmovn_s16(v186).u32[0];
  *(unsigned char *)(v9 + 1948) = (v215 & 0x1000) != 0;
  *(unsigned char *)(v9 + 1949) = (v215 & 0x2000) != 0;
LABEL_349:
  std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(v225);
  return v214;
}

void sub_25900020C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31)
{
}

void std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,unsigned char>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned char>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned char>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

void peridot::PeridotDXPCalib::modeConfigGetPixelsNum(uint64_t a1, _WORD *a2, _DWORD *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, uint64_t a7)
{
  *a4 = 0;
  *a5 = 0;
  *a6 = 0;
  uint64_t v13 = (uint64_t)operator new(0x24uLL);
  uint64_t v14 = (_DWORD *)v13;
  uint64_t v15 = 0;
  *(_DWORD *)(v13 + 32) = 11;
  *(_OWORD *)uint64_t v13 = xmmword_25913466C;
  *(_OWORD *)(v13 + 16) = unk_25913467C;
  do
  {
    int v16 = v14[v15];
    switch(v16)
    {
      case 1:
        if (*a2) {
          goto LABEL_29;
        }
        break;
      case 2:
        if ((*a2 & 8) != 0) {
          goto LABEL_29;
        }
        break;
      case 3:
        if ((*a2 & 0x40) != 0) {
          goto LABEL_29;
        }
        break;
      case 4:
        if ((*a2 & 0x200) != 0) {
          goto LABEL_29;
        }
        break;
      case 5:
        if ((*a2 & 2) != 0) {
          goto LABEL_29;
        }
        break;
      case 6:
        if ((*a2 & 0x10) != 0) {
          goto LABEL_29;
        }
        break;
      case 7:
        if ((*a2 & 0x80) != 0) {
          goto LABEL_29;
        }
        break;
      case 8:
        if ((*a2 & 0x400) != 0) {
          goto LABEL_29;
        }
        break;
      case 9:
        if ((*a2 & 4) != 0) {
          goto LABEL_29;
        }
        break;
      case 10:
        if ((*a2 & 0x20) != 0) {
          goto LABEL_29;
        }
        break;
      case 11:
        if ((*a2 & 0x100) != 0) {
          goto LABEL_29;
        }
        break;
      case 12:
        if ((*a2 & 0x800) != 0)
        {
LABEL_29:
          char v18 = 0;
          memset(&__p, 0, sizeof(__p));
          peridot::PeridotDXPCalib::sphbm2histType(v13, v16, a3, &v18, (uint64_t)&__p);
          if (v18)
          {
            if (!std::string::compare(&__p, "HP"))
            {
              ++*a6;
              *(unsigned char *)(a7 + 3 * (v15 / 3u) + v15 % 3u) = 3;
            }
            if (!std::string::compare(&__p, "HS1"))
            {
              ++*a4;
              *(unsigned char *)(a7 + 3 * (v15 / 3u) + v15 % 3u) = 1;
            }
            uint64_t v13 = std::string::compare(&__p, "HS2");
            if (!v13)
            {
              ++*a5;
              *(unsigned char *)(a7 + 3 * (v15 / 3u) + v15 % 3u) = 2;
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        break;
      default:
        break;
    }
    ++v15;
  }
  while (v15 != 9);
  operator delete(v14);
}

void sub_259000518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete(v14);
  _Unwind_Resume(a1);
}

void peridot::PeridotDXPCalib::sphbm2histType(uint64_t a1, int a2, _DWORD *a3, unsigned char *a4, uint64_t a5)
{
  switch(a2)
  {
    case 1:
      if (*a3) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 2:
      if ((*a3 & 8) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 3:
      if ((*a3 & 0x40) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 4:
    case 8:
    case 12:
      if (*(char *)(a5 + 23) < 0) {
        operator delete(*(void **)a5);
      }
      strcpy((char *)a5, "PRX");
      *(unsigned char *)(a5 + 23) = 3;
      *a4 = 0;
      return;
    case 5:
      if ((*a3 & 2) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 6:
      if ((*a3 & 0x10) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 7:
      if ((*a3 & 0x80) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 9:
      if ((*a3 & 4) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 10:
      if ((*a3 & 0x20) != 0) {
        *a4 = 1;
      }
      goto LABEL_32;
    case 11:
      if ((*a3 & 0x100) != 0) {
        *a4 = 1;
      }
LABEL_32:
      JUMPOUT(0x25A2D6010);
    default:
      return;
  }
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      unint64_t v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (int v8 = *(unsigned __int8 *)(v7 + 24), v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            uint64_t v9 = (uint64_t *)a2[2];
          }
          else
          {
            uint64_t v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              unint64_t v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            uint64_t *v9 = v2;
            *(void *)(v2 + 16) = v9;
            unint64_t v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          uint64_t *v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (int v6 = *(unsigned __int8 *)(v4 + 24), v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        float v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        uint64_t *v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void peridot::PeridotDXPCalib::getBankModeSkews(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = 0;
  int v8 = (char *)(*(void *)(a2 + 8 * *(void *)(a2 + 8 * a3 + 3952) + 24) + 32);
  uint64_t v9 = a6 + 16;
  do
  {
    int v10 = *(v8 - 28);
    float v11 = 0.0;
    float v12 = 0.0;
    if (v10 > 1)
    {
      int v13 = *v8;
      BOOL v14 = v10 > 0x53 || v13 <= 1;
      if (!v14 && v13 <= 107) {
        float v12 = (float)(v13 + 108 * v10 + dword_259134690[a4] - 108);
      }
    }
    *(float *)(a6 + v7) = v12;
    int v15 = *(v8 - 28);
    if (v15 >= 1)
    {
      unsigned int v16 = v15 + 1;
      int v17 = *v8;
      BOOL v18 = v16 > 0x53 || v17 < 2;
      if (!v18 && v17 <= 107) {
        float v11 = (float)(int)(v17 + 108 * v16 + dword_259134690[a4] - 108);
      }
    }
    *(float *)(v9 + v7 - 12) = v11;
    int v19 = *(v8 - 28);
    float v20 = 0.0;
    float v21 = 0.0;
    if ((v19 & 0x80000000) == 0)
    {
      unsigned int v22 = v19 + 2;
      int v23 = *v8;
      BOOL v24 = v22 > 0x53 || v23 < 2;
      if (!v24 && v23 <= 107) {
        float v21 = (float)(int)(v23 + 108 * v22 + dword_259134690[a4] - 108);
      }
    }
    *(float *)(v9 + v7 - 8) = v21;
    int v25 = *(v8 - 28);
    if (v25 > 1 && v25 <= 0x53)
    {
      int v26 = *v8;
      if (v26 >= 1 && v26 <= 106) {
        float v20 = (float)(v26 + 108 * v25 + dword_259134690[a4] - 107);
      }
    }
    *(float *)(v9 + v7 - 4) = v20;
    int v27 = *(v8 - 28);
    float v28 = 0.0;
    float v29 = 0.0;
    if (v27 >= 1)
    {
      unsigned int v30 = v27 + 1;
      if (v30 <= 0x53)
      {
        int v31 = *v8;
        if (v31 >= 1 && v31 <= 106) {
          float v29 = (float)(int)(v31 + 108 * v30 + dword_259134690[a4] - 107);
        }
      }
    }
    *(float *)(v9 + v7) = v29;
    int v32 = *(v8 - 28);
    if ((v32 & 0x80000000) == 0)
    {
      unsigned int v33 = v32 + 2;
      if (v33 <= 0x53)
      {
        int v34 = *v8;
        if (v34 >= 1 && v34 <= 106) {
          float v28 = (float)(int)(v34 + 108 * v33 + dword_259134690[a4] - 107);
        }
      }
    }
    *(float *)(v9 + v7 + 4) = v28;
    int v35 = *(v8 - 28);
    float v36 = 0.0;
    float v37 = 0.0;
    if (v35 > 1 && v35 <= 0x53)
    {
      int v38 = *v8;
      if ((v38 & 0x80000000) == 0 && v38 <= 105) {
        float v37 = (float)(v38 + 108 * v35 + dword_259134690[a4] - 106);
      }
    }
    *(float *)(v9 + v7 + 8) = v37;
    int v39 = *(v8 - 28);
    if (v39 >= 1)
    {
      unsigned int v40 = v39 + 1;
      if (v40 <= 0x53)
      {
        int v41 = *v8;
        if ((v41 & 0x80000000) == 0 && v41 <= 105) {
          float v36 = (float)(int)(v41 + 108 * v40 + dword_259134690[a4] - 106);
        }
      }
    }
    *(float *)(v9 + v7 + 12) = v36;
    int v42 = *(v8 - 28);
    float v43 = 0.0;
    if ((v42 & 0x80000000) == 0)
    {
      unsigned int v44 = v42 + 2;
      if (v44 <= 0x53)
      {
        int v45 = *v8;
        if ((v45 & 0x80000000) == 0 && v45 <= 105) {
          float v43 = (float)(int)(v45 + 108 * v44 + dword_259134690[a4] - 106);
        }
      }
    }
    *(float *)(v9 + v7 + 16) = v43;
    v7 += 36;
    ++v8;
  }
  while (v7 != 504);
  uint64_t v46 = 0;
  int v47 = (int *)(a1 + 40912);
  uint64_t v48 = a1 + 40864;
  int v49 = (void *)(a2 + 8 * a3 + 3728);
  int v50 = (int *)(a5 + 16);
  int v51 = (float *)(a6 + 16);
  do
  {
    int v52 = 0;
    float v53 = *(v51 - 4);
    if (v53 != 0.0) {
      int v52 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v53 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v54 = 0;
    *(v50 - 4) = v52;
    float v55 = *(v51 - 3);
    if (v55 != 0.0) {
      int v54 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v55 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v56 = 0;
    *(v50 - 3) = v54;
    float v57 = *(v51 - 2);
    if (v57 != 0.0) {
      int v56 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v57 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v58 = 0;
    *(v50 - 2) = v56;
    float v59 = *(v51 - 1);
    if (v59 != 0.0) {
      int v58 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v59 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v60 = 0;
    *(v50 - 1) = v58;
    if (*v51 != 0.0) {
      int v60 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(*v51 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v61 = 0;
    *int v50 = v60;
    float v62 = v51[1];
    if (v62 != 0.0) {
      int v61 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v62 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v63 = 0;
    v50[1] = v61;
    float v64 = v51[2];
    if (v64 != 0.0) {
      int v63 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v64 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v65 = 0;
    v50[2] = v63;
    float v66 = v51[3];
    if (v66 != 0.0) {
      int v65 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v66 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    int v67 = 0;
    v50[3] = v65;
    float v68 = v51[4];
    if (v68 != 0.0) {
      int v67 = (int)SparseMatrix::operator()(v48, (unint64_t)(float)((float)(v68 + -1.0) + (float)(unint64_t)(v46 * *v47)), (*(unsigned char *)(*(void *)(a2 + 8 * *v49 + 920) + 2) - 1));
    }
    v50[4] = v67;
    ++v46;
    v50 += 9;
    v51 += 9;
  }
  while (v46 != 14);
}

double SparseMatrix::operator()(uint64_t a1, int a2, int a3)
{
  if (*(_DWORD *)(a1 + 40) <= a2 || *(_DWORD *)(a1 + 36) <= a3) {
    SparseMatrix::operator()();
  }
  uint64_t v3 = *(unsigned int *)(*(void *)(a1 + 24) + 4 * a3);
  double result = 0.0;
  if ((int)v3 >= 1)
  {
    for (uint64_t i = *(int *)(*(void *)(a1 + 16) + 4 * a3); *(_DWORD *)(*(void *)(a1 + 8) + 4 * i) != a2; ++i)
    {
      if (!--v3) {
        return result;
      }
    }
    return *(double *)(*(void *)a1 + 8 * i);
  }
  return result;
}

void peridot::PeridotDXPCalib::InputConfig::init(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11 = *(void *)(a2 + 8 * a4 + 3952);
  *(_DWORD *)a1 = a3;
  float v12 = (void *)(a2 + 8 * v11);
  int v13 = (unsigned char *)v12[115];
  *(unsigned char *)(a1 + 5) = v13[70];
  *(unsigned char *)(a1 + 6) = v13[69];
  *(unsigned char *)(a1 + 7) = v13[71];
  *(void *)(a1 + 64) = *(void *)(v12[227] + 16);
  uint64_t v15 = v12[3];
  BOOL v14 = v12 + 3;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + v11 + 3616);
  long long v16 = *(_OWORD *)(v15 + 60);
  long long v17 = *(_OWORD *)(v15 + 76);
  long long v18 = *(_OWORD *)(v15 + 92);
  *(void *)(a1 + 120) = *(void *)(v15 + 108);
  *(_OWORD *)(a1 + 104) = v18;
  *(_OWORD *)(a1 + 88) = v17;
  *(_OWORD *)(a1 + 72) = v16;
  uint64_t v19 = v12[115];
  long long v20 = *(_OWORD *)(v19 + 8);
  long long v21 = *(_OWORD *)(v19 + 24);
  long long v22 = *(_OWORD *)(v19 + 40);
  *(void *)(a1 + 56) = *(void *)(v19 + 56);
  *(_OWORD *)(a1 + 40) = v22;
  *(_OWORD *)(a1 + 24) = v21;
  *(_OWORD *)(a1 + 8) = v20;
  *(unsigned char *)(a1 + 128) = *(unsigned char *)(v12[3] + 120);
  *(_WORD *)(a1 + 3364) = *(_WORD *)(v12[115] + 5);
  if (a5)
  {
    if (a5 >> 60) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v23 = 16 * a5;
    BOOL v24 = (char *)operator new(16 * a5);
    int v25 = &v24[v23];
    bzero(v24, 16 * a5);
  }
  else
  {
    int v25 = 0;
    BOOL v24 = 0;
  }
  int v26 = (char **)(a1 + 256);
  int v27 = *(void **)(a1 + 256);
  if (v27)
  {
    *(void *)(a1 + 264) = v27;
    operator delete(v27);
    *int v26 = 0;
    *(void *)(a1 + 264) = 0;
    *(void *)(a1 + 272) = 0;
  }
  *(void *)(a1 + 256) = v24;
  *(void *)(a1 + 264) = v25;
  *(void *)(a1 + 272) = v25;
  if (a5)
  {
    uint64_t v28 = 0;
    int v29 = 0;
    do
    {
      uint64_t v30 = v11 + v28 * a6;
      uint64_t v31 = a2 + 8 * v30;
      uint64_t v32 = *(void *)(v31 + 1816);
      uint64_t v33 = 16 * v28;
      int v34 = &v24[v33];
      int v35 = *(_DWORD *)(v32 + 2);
      v34[4] = *(unsigned char *)(v32 + 6);
      *(_DWORD *)int v34 = v35;
      BOOL v24 = *v26;
      uint64_t v36 = (uint64_t)&(*v26)[v33];
      *(_DWORD *)(v36 + 8) = *(_DWORD *)(*(void *)(v31 + 1816) + 36);
      *(unsigned char *)(v36 + 12) = *(unsigned char *)(a2 + v30 + 3616);
      uint64_t v28 = ++v29;
    }
    while (v29 < a5);
  }
  if ((a3 - 1) < 2)
  {
    uint64_t v37 = a2 + 8 * a4;
    uint64_t v38 = *(unsigned __int8 *)(v37 + 4176);
    uint64_t v39 = *(unsigned __int8 *)(v37 + 4400);
    uint64_t v40 = 8 * v38;
    int v41 = *(unsigned char **)(a2 + 920 + 8 * v38);
    *(unsigned char *)(a1 + 130) = v41[70];
    *(unsigned char *)(a1 + 131) = v41[69];
    *(unsigned char *)(a1 + 132) = v41[71];
    *(void *)(a1 + 190) = *(void *)(*(void *)(a2 + 1816 + 8 * v38) + 16);
    *(unsigned char *)(a1 + 129) = *(unsigned char *)(a2 + 3616 + v38);
    uint64_t v42 = a2 + 8 * v38;
    uint64_t v43 = *(void *)(v42 + 24);
    long long v44 = *(_OWORD *)(v43 + 60);
    long long v45 = *(_OWORD *)(v43 + 76);
    long long v46 = *(_OWORD *)(v43 + 92);
    *(void *)(a1 + 246) = *(void *)(v43 + 108);
    *(_OWORD *)(a1 + 230) = v46;
    *(_OWORD *)(a1 + 214) = v45;
    *(_OWORD *)(a1 + 198) = v44;
    uint64_t v47 = *(void *)(a2 + 920 + 8 * v38);
    long long v48 = *(_OWORD *)(v47 + 8);
    long long v49 = *(_OWORD *)(v47 + 24);
    long long v50 = *(_OWORD *)(v47 + 40);
    *(void *)(a1 + 181) = *(void *)(v47 + 56);
    *(_OWORD *)(a1 + 165) = v50;
    *(_OWORD *)(a1 + 149) = v49;
    *(_OWORD *)(a1 + 133) = v48;
    *(unsigned char *)(a1 + 254) = *(unsigned char *)(*(void *)(v42 + 24) + 120);
    uint64_t v51 = *(void *)(a2 + 1816 + 8 * v38);
    LODWORD(v47) = *(_DWORD *)(v51 + 2);
    *(unsigned char *)(a1 + 284) = *(unsigned char *)(v51 + 6);
    *(_DWORD *)(a1 + 280) = v47;
    *(_DWORD *)(a1 + 288) = *(_DWORD *)(*(void *)(a2 + 1816 + 8 * v38) + 36);
    *(unsigned char *)(a1 + 292) = *(unsigned char *)(a2 + 3616 + v38);
    uint64_t v52 = 8 * v39;
    uint64_t v53 = *(void *)(a2 + 1816 + 8 * v39);
    LODWORD(v47) = *(_DWORD *)(v53 + 2);
    *(unsigned char *)(a1 + 300) = *(unsigned char *)(v53 + 6);
    *(_DWORD *)(a1 + 296) = v47;
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(*(void *)(a2 + 1816 + 8 * v39) + 36);
    *(unsigned char *)(a1 + 308) = *(unsigned char *)(a2 + 3616 + v39);
    uint64_t v54 = *(void *)(a2 + 920 + v40);
    *(unsigned char *)(a1 + 3366) = *(unsigned char *)(v54 + 5);
    *(unsigned char *)(a1 + 3367) = *(unsigned char *)(v54 + 6);
    uint64_t v55 = *(void *)(a2 + 920 + v52);
    *(unsigned char *)(a1 + 3368) = *(unsigned char *)(v55 + 5);
    *(unsigned char *)(a1 + 3369) = *(unsigned char *)(v55 + 6);
  }
  uint64_t v56 = *(void *)(*v14 + 4);
  *(void *)(a1 + 3342) = *(void *)(*v14 + 10);
  *(void *)(a1 + 3336) = v56;
  uint64_t v57 = *(void *)(*v14 + 32);
  *(void *)(a1 + 3356) = *(void *)(*v14 + 38);
  *(void *)(a1 + 3350) = v57;
  *(_DWORD *)(a1 + 3370) = *(_DWORD *)(*(void *)(a2 + 8 * v11 + 2712) + 22);
}

uint64_t peridot::PeridotDXP::macroProcessInner(uint64_t a1, uint64_t *a2, uint64_t a3, const void *a4, const void *a5, uint64_t a6, uint64_t a7, float a8, float a9, float a10, float a11, float a12, uint64_t a13, float *a14, float *a15, float *a16, BOOL *a17, uint64_t a18)
{
  uint64_t v27 = *(unsigned __int8 *)(a1 + 21);
  float v28 = 0.0;
  float v29 = 0.0;
  if (*(unsigned char *)(a1 + 21))
  {
    uint64_t v30 = (float *)a2[12];
    uint64_t v31 = *(unsigned __int8 *)(a1 + 21);
    do
    {
      float v32 = *v30++;
      float v33 = v32;
      if (v32 > v29) {
        float v29 = v33;
      }
      --v31;
    }
    while (v31);
  }
  uint64_t v34 = a1 + 181832;
  uint64_t v35 = *(unsigned __int8 *)(a1 + 23);
  float v36 = 0.0;
  if (*(unsigned char *)(a1 + 23))
  {
    uint64_t v37 = (float *)a2[112];
    uint64_t v38 = (float *)a2[87];
    float v28 = 0.0;
    do
    {
      float v39 = *v37++;
      float v40 = v39;
      if (v39 > v36) {
        float v36 = v40;
      }
      float v41 = *v38++;
      float v42 = v41;
      if (v41 > v28) {
        float v28 = v42;
      }
      --v35;
    }
    while (v35);
  }
  if (*(unsigned char *)(a1 + 21))
  {
    uint64_t v43 = 0;
    uint64_t v44 = *a2;
    uint64_t v45 = *(void *)(a1 + 181880);
    float v46 = 1.0 / a8;
    do
    {
      uint64_t v47 = *(float32x4_t **)(*(void *)(v44 + 8 * v43) + 8);
      long long v48 = *(float32x4_t **)(v45 + 24 * v43 + 8);
      if ((unint64_t)((char *)v48 - (char *)v47) > 0x1F)
      {
        float32x4_t v50 = vmulq_n_f32(v47[1], v46);
        *long long v48 = vmulq_n_f32(*v47, v46);
        v48[1] = v50;
        float32x4_t v51 = vmulq_n_f32(v47[3], v46);
        v48[2] = vmulq_n_f32(v47[2], v46);
        v48[3] = v51;
        float32x4_t v52 = vmulq_n_f32(v47[5], v46);
        v48[4] = vmulq_n_f32(v47[4], v46);
        v48[5] = v52;
        float32x4_t v53 = vmulq_n_f32(v47[7], v46);
        v48[6] = vmulq_n_f32(v47[6], v46);
        v48[7] = v53;
        float32x4_t v54 = vmulq_n_f32(v47[9], v46);
        v48[8] = vmulq_n_f32(v47[8], v46);
        v48[9] = v54;
        float32x4_t v55 = vmulq_n_f32(v47[11], v46);
        v48[10] = vmulq_n_f32(v47[10], v46);
        v48[11] = v55;
        float32x4_t v56 = vmulq_n_f32(v47[13], v46);
        v48[12] = vmulq_n_f32(v47[12], v46);
        v48[13] = v56;
        float32x4_t v57 = vmulq_n_f32(v47[15], v46);
        v48[14] = vmulq_n_f32(v47[14], v46);
        v48[15] = v57;
        float32x4_t v58 = vmulq_n_f32(v47[17], v46);
        v48[16] = vmulq_n_f32(v47[16], v46);
        v48[17] = v58;
        float32x4_t v59 = vmulq_n_f32(v47[19], v46);
        v48[18] = vmulq_n_f32(v47[18], v46);
        v48[19] = v59;
        float32x4_t v60 = vmulq_n_f32(v47[21], v46);
        v48[20] = vmulq_n_f32(v47[20], v46);
        v48[21] = v60;
        uint64_t v49 = 88;
      }
      else
      {
        uint64_t v49 = 0;
      }
      uint64_t v61 = v49;
      do
      {
        v48->f32[v61] = v47->f32[v61] * v46;
        ++v61;
      }
      while (v61 != 92);
      ++v43;
    }
    while (v43 != v27);
  }
  float v62 = 0.0;
  if (*(_DWORD *)(a1 + 16) == 2 && *(unsigned char *)(a1 + 1))
  {
    uint64_t v148 = 92;
    uint64_t v144 = 92;
    uint64_t v63 = *(unsigned __int8 *)(a1 + 23);
    if (*(unsigned char *)(a1 + 23))
    {
      unint64_t v64 = 0;
      int v65 = (uint64_t *)a2[100];
      float v66 = (uint64_t *)a2[75];
      uint64_t v67 = v63 & 0xFE;
      float v68 = 0.0;
      float v69 = 0.0;
      float v70 = 1.0 / a9;
      while (1)
      {
        if (v64 <= 0x27)
        {
          BOOL v74 = v65;
          char v75 = v66;
          uint64_t v76 = v63;
          do
          {
            uint64_t v77 = *v74++;
            float v78 = *(float *)(*(void *)(v77 + 8) + 4 * v64) * v70;
            v145[v64] = v78;
            uint64_t v79 = *v75++;
            float v80 = *(float *)(*(void *)(v79 + 8) + 4 * v64) * v70;
            *((float *)&v136 + v64) = v80;
            float v69 = (float)(v78 + v69) - v145[0];
            float v68 = (float)(v80 + v68) - *(float *)&v136;
            --v76;
          }
          while (v76);
          goto LABEL_27;
        }
        if (v63 == 1) {
          break;
        }
        uint64_t v82 = 0;
        do
        {
          uint64_t v83 = v82;
          v82 += 2;
        }
        while (v67 != v82);
        uint64_t i = v63 & 0xFE;
        if (v67 != v63) {
          goto LABEL_37;
        }
        uint64_t v71 = v83 | 1;
LABEL_26:
        uint64_t v72 = v71;
        float v73 = *(float *)(*(void *)(v66[v72] + 8) + 4 * v64) * v70;
        v145[v64] = *(float *)(*(void *)(v65[v72] + 8) + 4 * v64) * v70;
        *((float *)&v136 + v64) = v73;
LABEL_27:
        if (++v64 == 92) {
          goto LABEL_40;
        }
      }
      for (uint64_t i = 0; i != v63; ++i)
LABEL_37:
        ;
      uint64_t v71 = i - 1;
      goto LABEL_26;
    }
    float v69 = 0.0;
    float v68 = 0.0;
LABEL_40:
    float v84 = round(v68 * 1000000.0) * 0.000001;
    float v85 = round(v69 * 1000000.0) * 0.000001;
    if (v84 <= v85) {
      uint64_t v86 = v145;
    }
    else {
      uint64_t v86 = (float *)&v136;
    }
    if (v84 <= v85) {
      a5 = a4;
    }
    if (v84 <= v85) {
      float v62 = v36;
    }
    else {
      float v62 = v28;
    }
    *a17 = v84 > v85;
    memcpy(*(void **)(**(void **)(a1 + 181904) + 8), v86, 0x170uLL);
    memcpy(*(void **)(**(void **)v34 + 8), a5, 0x170uLL);
  }
  unint64_t v147 = 0;
  unint64_t v143 = 0;
  **(void **)(a1 + 181928) = a3;
  **(void **)(a1 + 181976) = a1 + 181880;
  float v88 = *(float *)(a18 + 88);
  peridot::PeridotDxpMacro::runN(a1 + 118864, (void *)(a1 + 181928), (void *)(a1 + 181976), v88, 0, (uint64_t)v145);
  if (*(unsigned char *)(a1 + 1))
  {
    **(void **)(a1 + 181952) = *(void *)(a1 + 181832);
    **(void **)(a1 + 182000) = *(void *)(a1 + 181904);
    peridot::PeridotDxpMacro::runN(a1 + 150312, (void *)(a1 + 181952), (void *)(a1 + 182000), v88, 0, (uint64_t)&v136);
  }
  else
  {
    memset(v141, 0, sizeof(v141));
    long long v140 = 0u;
    long long v139 = 0u;
    long long v138 = 0u;
    long long v137 = 0u;
    uint64_t v142 = 0;
    unint64_t v143 = 1;
    uint64_t v136 = 1;
  }
  peridot::PeridotDXP::strayEstimation(a1, v145, (float *)&v136, a15, a16, a11, a12, a10);
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  if (*(unsigned char *)(a1 + 1)) {
    peridot::PeridotDxpMacroSpatial::runPolyFit((float *)(a1 + 181760), a6, a7, a14, (uint64_t)&v133, 1);
  }
  uint64_t v89 = *(void *)(a18 + 160);
  unint64_t v90 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a18 + 168) - v89) >> 4);
  if (*(void *)(a18 + 168) == v89)
  {
    std::vector<peridot::PeridotDepthSpotEcho>::__append((char **)(a18 + 160), 1 - v90);
    uint64_t v89 = *(void *)(a18 + 160);
  }
  else if (v90 >= 2)
  {
    *(void *)(a18 + 168) = v89 + 80;
  }
  int v91 = v134;
  *(_DWORD *)(v89 + 40) = HIDWORD(v134);
  int v92 = v133;
  uint64_t v93 = v135;
  *(_DWORD *)(v89 + 8) = HIDWORD(v133);
  *(_DWORD *)(v89 + 12) = v93;
  *(_DWORD *)uint64_t v89 = v92;
  *(_DWORD *)(v89 + 4) = v91;
  *(_DWORD *)(v89 + 56) = HIDWORD(v93);
  *(_DWORD *)(v89 + 20) = v91;
  *(void *)(v89 + 48) = 20;
  *(_DWORD *)(v89 + 44) = 2143289344;
  *(_DWORD *)(v89 + 36) = 2143289344;
  *(_DWORD *)(v89 + 60) = 0;
  if (v147)
  {
    for (unint64_t j = 0; j < v147; ++j)
    {
      *(void *)&v145[2 * j] += 12;
      unint64_t v95 = v147;
    }
    if (v143) {
      goto LABEL_63;
    }
LABEL_67:
    unint64_t v97 = 0;
    goto LABEL_68;
  }
  unint64_t v95 = 0;
  if (!v143) {
    goto LABEL_67;
  }
LABEL_63:
  for (unint64_t k = 0; k < v143; ++k)
  {
    *(&v136 + k) += 14;
    unint64_t v97 = v143;
  }
LABEL_68:
  uint64_t v98 = *(void *)(a18 + 96);
  unint64_t v99 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a18 + 104) - v98) >> 4);
  if (v95 > v99)
  {
    std::vector<peridot::PeridotDepthSpotEcho>::__append((char **)(a18 + 96), v95 - v99);
LABEL_73:
    uint64_t v100 = *(void *)(a18 + 96) + 32;
    unsigned int v101 = v145;
    BOOL v102 = &v146;
    do
    {
      int v103 = *v102;
      *(_DWORD *)(v100 - 32) = *(v102 - 15);
      *(_DWORD *)(v100 - 28) = v103;
      int v104 = *(v102 - 9);
      *(_DWORD *)(v100 + 8) = *(v102 - 12);
      *(_DWORD *)(v100 + 12) = v104;
      *(_DWORD *)(v100 - 12) = v102[9];
      int v105 = v102[6];
      *(_DWORD *)(v100 - 24) = *(v102 - 3);
      *(_DWORD *)(v100 - 20) = v105;
      uint64_t v106 = *(void *)v101;
      v101 += 2;
      *(void *)(v100 + 16) = v106;
      *(_DWORD *)uint64_t v100 = v102[21];
      *(float *)(v100 + 4) = v29;
      *(_DWORD *)(v100 + 28) = 0;
      v100 += 80;
      ++v102;
      --v95;
    }
    while (v95);
    goto LABEL_75;
  }
  if (v95 < v99) {
    *(void *)(a18 + 104) = v98 + 80 * v95;
  }
  if (v95) {
    goto LABEL_73;
  }
LABEL_75:
  uint64_t v107 = *(void *)(a18 + 128);
  unint64_t v108 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a18 + 136) - v107) >> 4);
  if (v97 > v108)
  {
    std::vector<peridot::PeridotDepthSpotEcho>::__append((char **)(a18 + 128), v97 - v108);
LABEL_80:
    uint64_t v109 = *(void *)(a18 + 128) + 32;
    uint64_t v110 = &v136;
    uint16x8_t v111 = (int *)v141 + 3;
    do
    {
      int v112 = *v111;
      *(_DWORD *)(v109 - 32) = *(v111 - 15);
      *(_DWORD *)(v109 - 28) = v112;
      int v113 = *(v111 - 9);
      *(_DWORD *)(v109 + 8) = *(v111 - 12);
      *(_DWORD *)(v109 + 12) = v113;
      *(_DWORD *)(v109 - 12) = v111[9];
      int v114 = v111[6];
      *(_DWORD *)(v109 - 24) = *(v111 - 3);
      *(_DWORD *)(v109 - 20) = v114;
      uint64_t v115 = *v110++;
      *(void *)(v109 + 16) = v115;
      *(_DWORD *)uint64_t v109 = v111[21];
      *(float *)(v109 + 4) = v62;
      *(_DWORD *)(v109 + 28) = 0;
      v109 += 80;
      ++v111;
      --v97;
    }
    while (v97);
    goto LABEL_82;
  }
  if (v97 < v108) {
    *(void *)(a18 + 136) = v107 + 80 * v97;
  }
  if (v97) {
    goto LABEL_80;
  }
LABEL_82:
  uint64_t v116 = *(void *)(a18 + 96);
  uint64_t v117 = *(void *)(a18 + 104) - v116;
  if (!v117) {
    goto LABEL_92;
  }
  unint64_t v118 = v117 / 80;
  if (v118 <= 1) {
    unint64_t v118 = 1;
  }
  if (v118 <= 1)
  {
    unint64_t v119 = 0;
LABEL_90:
    unint64_t v122 = v118 - v119;
    int v123 = (_DWORD *)(v116 + 80 * v119 + 28);
    do
    {
      *int v123 = 0;
      v123 += 20;
      --v122;
    }
    while (v122);
    goto LABEL_92;
  }
  unint64_t v119 = v118 & 0xFFFFFFFFFFFFFFFELL;
  int v120 = (_DWORD *)(v116 + 108);
  unint64_t v121 = v118 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(v120 - 20) = 0;
    *int v120 = 0;
    v120 += 40;
    v121 -= 2;
  }
  while (v121);
  if (v118 != v119) {
    goto LABEL_90;
  }
LABEL_92:
  uint64_t v124 = *(void *)(a18 + 128);
  uint64_t v125 = *(void *)(a18 + 136) - v124;
  if (!v125) {
    return 0;
  }
  unint64_t v126 = v125 / 80;
  if (v126 <= 1) {
    unint64_t v126 = 1;
  }
  if (v126 <= 1)
  {
    unint64_t v127 = 0;
LABEL_100:
    unint64_t v130 = v126 - v127;
    int v131 = (_DWORD *)(v124 + 80 * v127 + 28);
    do
    {
      *int v131 = 0;
      v131 += 20;
      --v130;
    }
    while (v130);
    return 0;
  }
  unint64_t v127 = v126 & 0xFFFFFFFFFFFFFFFELL;
  int v128 = (_DWORD *)(v124 + 108);
  unint64_t v129 = v126 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(v128 - 20) = 0;
    *int v128 = 0;
    v128 += 40;
    v129 -= 2;
  }
  while (v129);
  if (v126 != v127) {
    goto LABEL_100;
  }
  return 0;
}

void std::vector<peridot::PeridotDepthSpotEcho>::__append(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - v5) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v12 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(a1[1], v12);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    int v6 = *a1;
    unint64_t v7 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0x333333333333333) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - v6) >> 4);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x199999999999999) {
      unint64_t v10 = 0x333333333333333;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0x333333333333333) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(80 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v13 = &v11[80 * v7];
    BOOL v14 = &v11[80 * v10];
    size_t v15 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v13, v15);
    long long v16 = &v13[v15];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 5) = *((_OWORD *)v5 - 5);
        long long v17 = *((_OWORD *)v5 - 4);
        long long v18 = *((_OWORD *)v5 - 3);
        long long v19 = *((_OWORD *)v5 - 2);
        *(_OWORD *)(v13 - 20) = *(_OWORD *)(v5 - 20);
        *((_OWORD *)v13 - 3) = v18;
        *((_OWORD *)v13 - 2) = v19;
        *((_OWORD *)v13 - 4) = v17;
        v13 -= 80;
        v5 -= 80;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v14;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t peridot::PeridotDxpMacro::runN(uint64_t a1, void *a2, void *a3, float a4, uint64_t a5, uint64_t a6)
{
  *(void *)&v26[380] = *MEMORY[0x263EF8340];
  uint64_t v7 = a2[1] - *a2;
  unint64_t v8 = v7 >> 3;
  if (v7)
  {
    uint64_t v13 = 0;
    if (v8 <= 1) {
      uint64_t v14 = 1;
    }
    else {
      uint64_t v14 = v7 >> 3;
    }
    size_t v15 = &v25;
    do
    {
      peridot::PeridotDxpMacro::ML_estimation(a1, *(void *)(*a2 + 8 * v13), *(void *)(*a3 + 8 * v13), a4);
      *(_OWORD *)size_t v15 = 0u;
      *((_OWORD *)v15 + 1) = 0u;
      *((void *)v15 + 4) = 0;
      ++v13;
      v15 += 40;
    }
    while (v14 != v13);
    uint64_t v16 = 0;
    *(void *)(a6 + 192) = v8;
    long long v17 = (float *)v26;
    long long v18 = (float *)(a6 + 108);
    do
    {
      *(void *)(a6 + 8 * v16) = v16;
      int v19 = *((_DWORD *)v17 - 4);
      *(v18 - 21) = *(v17 - 5);
      int v20 = *((_DWORD *)v17 + 1);
      *(v18 - 6) = *v17;
      *((_DWORD *)v18 - 18) = v19;
      int v21 = *((_DWORD *)v17 - 2);
      *(v18 - 15) = *(v17 - 3);
      int v22 = *((_DWORD *)v17 + 3);
      v18[3] = v17[2];
      *(_DWORD *)long long v18 = v20;
      *(v18 - 9) = *(v17 - 1);
      *(v18 - 12) = (float)v21;
      *((_DWORD *)v18 + 15) = v22;
      ++v16;
      int v23 = *((_DWORD *)v17 + 4);
      v17 += 10;
      *((_DWORD *)v18++ + 18) = v23;
    }
    while (v14 != v16);
  }
  else
  {
    *(void *)(a6 + 192) = v8;
  }
  return 0;
}

uint64_t peridot::PeridotDxpMacro::ML_estimation(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v27 = 0;
  long long v26 = 0u;
  long long v25 = 0u;
  long long v24 = 0u;
  long long v23 = 0u;
  long long v22 = 0u;
  long long v21 = 0u;
  long long v20 = 0u;
  long long v19 = 0u;
  long long v18 = 0u;
  long long v17 = 0u;
  float v5 = *(float *)(v4 + 272);
  float v6 = *(float *)(v4 + 320);
  v7.i32[0] = *(_DWORD *)(v4 + 316);
  *(float *)v8.i32 = v6 + v5;
  float32x4_t v9 = (float32x4_t)vdupq_lane_s32(v8, 0);
  float32x4_t v10 = (float32x4_t)vdupq_lane_s32(v7, 0);
  *(float *)v12.i32 = v11 / *(float *)(v4 + 31432);
  float32x4_t v13 = (float32x4_t)vdupq_lane_s32(v12, 0);
  v15[0] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_259120680), v13), v10);
  v15[1] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_259120690), v13), v10);
  v15[2] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206A0), v13), v10);
  v15[3] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206B0), v13), v10);
  v15[4] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206C0), v13), v10);
  v15[5] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206D0), v13), v10);
  v15[6] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206E0), v13), v10);
  v15[7] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_2591206F0), v13), v10);
  v15[8] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_259120700), v13), v10);
  v15[9] = vaddq_f32(vsubq_f32(vaddq_f32(v9, (float32x4_t)xmmword_259120710), v13), v10);
  float v16 = (float)((float)((float)(v5 + 40.0) + v6) - *(float *)v12.i32) + *(float *)v7.i32;
  peridot::PeridotDxpMacro::getPulseShapeOptimized(v4, (uint64_t *)(v4 + 144), (void *)(v4 + 120), (float *)v15, 41, 0, (__int32 *)&v17);
  if ((float)(*(float *)&v17 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v17 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v17 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v17 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v18 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v18 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v18 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v18 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v19 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v19 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v19 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v19 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v20 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v20 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v20 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v20 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v21 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v21 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v21 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v21 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v22 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v22 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v22 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v22 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v23 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v23 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v23 + 2) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v23 + 3) - *(float *)&v17) > 0.001
    || (float)(*(float *)&v24 - *(float *)&v17) > 0.001
    || (float)(*((float *)&v24 + 1) - *(float *)&v17) > 0.001
    || (float)(*((float *)&v24 + 2) - *(float *)&v17) > 0.001)
  {
    operator new[]();
  }
  return 1;
}

void sub_259003874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43)
{
  if (!a43) {
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x25A2D62A0](a43, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t peridot::PeridotDxpMacro::getPulseShapeOptimized(uint64_t a1, uint64_t *a2, void *a3, float *a4, uint64_t a5, uint64_t a6, __int32 *a7)
{
  *(void *)&v72[1452] = *MEMORY[0x263EF8340];
  uint64_t v11 = *a2 + 4;
  double v12 = (double)(unint64_t)((a2[1] - *a2) >> 2) + -2.0;
  int v67 = 1;
  unsigned int v68 = v12;
  char v69 = 0;
  uint64_t v70 = 4 * v12;
  int v65 = &unk_270717688;
  uint64_t v66 = v11;
  float32x4_t v13 = (uint64_t *)(*a3 + 24 * a6);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  v71[0] = 0;
  uint64_t v16 = v14 - v15;
  unint64_t v17 = v16 >> 2;
  if (v16)
  {
    if (v17 <= 1) {
      unint64_t v18 = 1;
    }
    else {
      unint64_t v18 = v16 >> 2;
    }
    if (v18 < 8 || (unint64_t)&v71[1] - v15 < 0x20)
    {
      unint64_t v19 = 0;
LABEL_8:
      unint64_t v20 = v18 - v19;
      uint64_t v21 = 4 * v19;
      long long v22 = &v71[v19 + 1];
      long long v23 = (int *)(v15 + v21);
      do
      {
        int v24 = *v23++;
        *v22++ = v24;
        --v20;
      }
      while (v20);
      goto LABEL_10;
    }
    unint64_t v19 = v18 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = v72;
    uint64_t v44 = (long long *)(v15 + 16);
    unint64_t v45 = v18 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v46 = *v44;
      *(v43 - 1) = *(v44 - 1);
      _OWORD *v43 = v46;
      v43 += 2;
      v44 += 2;
      v45 -= 8;
    }
    while (v45);
    if (v18 != v19) {
      goto LABEL_8;
    }
  }
LABEL_10:
  v71[v17 + 1] = 1065353216;
  int v61 = 1;
  unsigned int v62 = ((unint64_t)v16 >> 2) + 2;
  char v63 = 0;
  uint64_t v64 = 4 * v62;
  float32x4_t v59 = &unk_270717688;
  float32x4_t v60 = v71;
  int v55 = 1;
  int v56 = a5;
  char v57 = 0;
  uint64_t v58 = 4 * a5;
  float32x4_t v53 = &unk_270717688;
  float32x4_t v54 = a4;
  int v49 = 1;
  unsigned int v50 = a5;
  char v51 = 0;
  uint64_t v52 = v58;
  uint64_t v47 = &unk_270717688;
  long long v48 = a7;
  Interp1<float,LinearInterpolator<float>>((uint64_t)&v65, (uint64_t)&v59, a4, a5, (uint64_t)&v47);
  if (v50)
  {
    unint64_t v26 = 0;
    uint64_t v27 = *a2;
    uint64_t v28 = ((a2[1] - *a2) >> 2) - 2;
    uint64_t v29 = 4 * v50;
    do
    {
      v25.i64[0] = 0;
      if (a4[v26 / 4] >= *(float *)(v27 + 4)) {
        v25.i32[0] = v48[v26 / 4];
      }
      v48[v26 / 4] = v25.i32[0];
      float v30 = 1.0;
      if (a4[v26 / 4] <= *(float *)(v27 + 4 * v28)) {
        float v30 = *(float *)&v48[v26 / 4];
      }
      *(float *)&v48[v26 / 4] = v30;
      v26 += 4;
    }
    while (v29 != v26);
  }
  unint64_t v31 = a5 - 1;
  if (a5 != 1)
  {
    v25.i32[0] = *a7;
    if (v31 > 7)
    {
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 0);
      float v33 = a7 + 4;
      unint64_t v34 = v31 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v35 = *(float32x4_t *)(v33 - 3);
        float32x4_t v36 = (float32x4_t)vextq_s8((int8x16_t)v25, (int8x16_t)v35, 0xCuLL);
        float32x4_t v25 = *(float32x4_t *)(v33 + 1);
        *((float32x4_t *)v33 - 1) = vsubq_f32(v35, v36);
        *(float32x4_t *)float v33 = vsubq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)v35, (int8x16_t)v25, 0xCuLL));
        v33 += 8;
        v34 -= 8;
      }
      while (v34);
      if (v31 == v32) {
        goto LABEL_26;
      }
      v25.i32[0] = v25.i32[3];
    }
    else
    {
      unint64_t v32 = 0;
    }
    uint64_t v37 = (float *)&a7[v32 + 1];
    uint64_t v38 = ~v32 + a5;
    do
    {
      float v39 = *v37;
      *(v37 - 1) = *v37 - v25.f32[0];
      ++v37;
      v25.f32[0] = v39;
      --v38;
    }
    while (v38);
  }
LABEL_26:
  uint64_t v47 = &unk_270717340;
  if (v48) {
    BOOL v40 = v51 == 0;
  }
  else {
    BOOL v40 = 1;
  }
  if (!v40) {
    MEMORY[0x25A2D62A0]();
  }
  float32x4_t v53 = &unk_270717340;
  if (v54) {
    BOOL v41 = v57 == 0;
  }
  else {
    BOOL v41 = 1;
  }
  if (!v41) {
    MEMORY[0x25A2D62A0]();
  }
  float32x4_t v59 = &unk_270717340;
  if (v60 && v63) {
    MEMORY[0x25A2D62A0]();
  }
  int v65 = &unk_270717340;
  uint64_t result = v66;
  if (v66)
  {
    if (v69) {
      return MEMORY[0x25A2D62A0]();
    }
  }
  return result;
}

void sub_259003D0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va1);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va2);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va3);
  _Unwind_Resume(a1);
}

float peridot::PeridotDxpMacro::calcDetectionSNR(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t *a8, float a9, float a10, float a11, double a12, double a13)
{
  if (!a2 || a5 - 1 <= a2)
  {
    *(_DWORD *)(a6 + 20) = 0;
    *(_DWORD *)(a6 + 24) = 0;
    float result = fmaxf(*(float *)(a1 + 488 * a3 + 8 * a2 + 1788), 0.0);
    *(float *)(a6 + 32) = result;
    return result;
  }
  unint64_t v13 = 24;
  uint64_t v14 = (float *)(*(void *)(*(void *)(a1 + 31312) + 24 * a3) + 11008 * a4 + 180 * a2);
  float v15 = v14[1];
  float v16 = fmaxf(*v14, 0.0);
  uint64_t v17 = v15 > v16;
  if (v15 > v16) {
    float v16 = v14[1];
  }
  if (v14[2] > v16)
  {
    uint64_t v17 = 2;
    float v16 = v14[2];
  }
  if (v14[3] > v16)
  {
    uint64_t v17 = 3;
    float v16 = v14[3];
  }
  if (v14[4] > v16)
  {
    uint64_t v17 = 4;
    float v16 = v14[4];
  }
  if (v14[5] > v16)
  {
    uint64_t v17 = 5;
    float v16 = v14[5];
  }
  if (v14[6] > v16)
  {
    uint64_t v17 = 6;
    float v16 = v14[6];
  }
  if (v14[7] > v16)
  {
    uint64_t v17 = 7;
    float v16 = v14[7];
  }
  if (v14[8] > v16)
  {
    uint64_t v17 = 8;
    float v16 = v14[8];
  }
  if (v14[9] > v16)
  {
    uint64_t v17 = 9;
    float v16 = v14[9];
  }
  if (v14[10] > v16)
  {
    uint64_t v17 = 10;
    float v16 = v14[10];
  }
  if (v14[11] > v16)
  {
    uint64_t v17 = 11;
    float v16 = v14[11];
  }
  if (v14[12] > v16)
  {
    uint64_t v17 = 12;
    float v16 = v14[12];
  }
  if (v14[13] > v16)
  {
    uint64_t v17 = 13;
    float v16 = v14[13];
  }
  if (v14[14] > v16)
  {
    uint64_t v17 = 14;
    float v16 = v14[14];
  }
  if (v14[15] > v16)
  {
    uint64_t v17 = 15;
    float v16 = v14[15];
  }
  if (v14[16] > v16)
  {
    uint64_t v17 = 16;
    float v16 = v14[16];
  }
  if (v14[17] > v16)
  {
    uint64_t v17 = 17;
    float v16 = v14[17];
  }
  if (v14[18] > v16)
  {
    uint64_t v17 = 18;
    float v16 = v14[18];
  }
  if (v14[19] > v16)
  {
    uint64_t v17 = 19;
    float v16 = v14[19];
  }
  if (v14[20] > v16)
  {
    uint64_t v17 = 20;
    float v16 = v14[20];
  }
  if (v14[21] > v16)
  {
    uint64_t v17 = 21;
    float v16 = v14[21];
  }
  if (v14[22] > v16)
  {
    uint64_t v17 = 22;
    float v16 = v14[22];
  }
  if (v14[23] > v16)
  {
    uint64_t v17 = 23;
    float v16 = v14[23];
  }
  if (v14[24] > v16) {
    float v16 = v14[24];
  }
  else {
    unint64_t v13 = v17;
  }
  if (v14[25] > v16)
  {
    unint64_t v13 = 25;
    float v16 = v14[25];
  }
  if (v14[26] > v16)
  {
    unint64_t v13 = 26;
    float v16 = v14[26];
  }
  if (v14[27] > v16)
  {
    unint64_t v13 = 27;
    float v16 = v14[27];
  }
  if (v14[28] > v16)
  {
    unint64_t v13 = 28;
    float v16 = v14[28];
  }
  if (v14[29] > v16)
  {
    unint64_t v13 = 29;
    float v16 = v14[29];
  }
  if (v14[30] > v16)
  {
    unint64_t v13 = 30;
    float v16 = v14[30];
  }
  if (v14[31] > v16)
  {
    unint64_t v13 = 31;
    float v16 = v14[31];
  }
  if (v14[32] > v16)
  {
    unint64_t v13 = 32;
    float v16 = v14[32];
  }
  if (v14[33] > v16)
  {
    unint64_t v13 = 33;
    float v16 = v14[33];
  }
  if (v14[34] > v16)
  {
    unint64_t v13 = 34;
    float v16 = v14[34];
  }
  if (v14[35] > v16)
  {
    unint64_t v13 = 35;
    float v16 = v14[35];
  }
  if (v14[36] > v16)
  {
    unint64_t v13 = 36;
    float v16 = v14[36];
  }
  if (v14[37] > v16)
  {
    unint64_t v13 = 37;
    float v16 = v14[37];
  }
  if (v14[38] > v16)
  {
    unint64_t v13 = 38;
    float v16 = v14[38];
  }
  if (v14[39] > v16)
  {
    unint64_t v13 = 39;
    float v16 = v14[39];
  }
  if (v14[40] > v16)
  {
    unint64_t v13 = 40;
    float v16 = v14[40];
  }
  if (v14[41] > v16)
  {
    unint64_t v13 = 41;
    float v16 = v14[41];
  }
  if (v14[42] > v16)
  {
    float v16 = v14[42];
    unint64_t v13 = 42;
  }
  if (v14[43] > v16)
  {
    unint64_t v13 = 43;
    float v16 = v14[43];
  }
  if (v14[44] > v16) {
    unint64_t v13 = 44;
  }
  if (v13 >= 0x2A) {
    uint64_t v18 = 42;
  }
  else {
    uint64_t v18 = v13;
  }
  unint64_t v19 = v18 - v13 + 7;
  *a8 = v19;
  if (v19)
  {
    unint64_t v20 = 0;
    do
    {
      *(void *)(a7 + 8 * v20) = v13 - 3 + v20;
      ++v20;
      unint64_t v19 = *a8;
    }
    while (v20 < *a8);
  }
  LODWORD(a13) = *(_DWORD *)(a1 + 488 * a3 + 8 * a2 + 1788);
  double v21 = 0.0;
  if (v19)
  {
    uint64_t v22 = *(void *)(*(void *)(a1 + 31288) + 24 * a3);
    if (v19 > 7)
    {
      unint64_t v23 = v19 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a13, 0);
      uint64_t v27 = (float32x4_t *)(180 * a2 + 11008 * a4 + 4 * v13 + v22 + 4);
      float32x4_t v28 = 0uLL;
      unint64_t v29 = v19 & 0xFFFFFFFFFFFFFFF8;
      float32x4_t v30 = 0uLL;
      do
      {
        float32x4_t v28 = vmlaq_f32(v28, v26, v27[-1]);
        float32x4_t v30 = vmlaq_f32(v30, v26, *v27);
        v27 += 2;
        v29 -= 8;
      }
      while (v29);
      float32x4_t v31 = vaddq_f32(v30, v28);
      float v24 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
      if (v19 == v23) {
        goto LABEL_107;
      }
    }
    else
    {
      unint64_t v23 = 0;
      float v24 = 0.0;
    }
    unint64_t v32 = v19 - v23;
    float v33 = (float *)(180 * a2 + 11008 * a4 + 4 * (v13 + v23) + v22 - 12);
    do
    {
      float v34 = *v33++;
      float v24 = v24 + (float)(v34 * *(float *)&a13);
      --v32;
    }
    while (v32);
LABEL_107:
    double v21 = v24;
  }
  if (!a3) {
    a9 = a10;
  }
  float v35 = fmax(v21, 0.0) + (float)(a9 * (float)v19);
  float v36 = fmaxf(v35, 1.0 / a11);
  float v37 = fmaxf(*(float *)&a13, 0.0);
  *(float *)(a6 + 32) = v37;
  float v38 = fmax(*(float *)(a1 + 488 * a3 + 8 * a2 + 1792), 0.0);
  float v39 = sqrtf(a11);
  *(float *)(a6 + 24) = v38;
  *(float *)(a6 + 28) = (float)(v39 * v38) / sqrtf(v36);
  float v40 = v38 / sqrtf(v36 + v38);
  if (*(float *)(a1 + 16) > (float)a2 && v38 / (v37 + 0.001) < *(float *)(a1 + 20)) {
    float v40 = 0.0;
  }
  float result = v40 * v39;
  *(float *)(a6 + 20) = result;
  return result;
}

uint64_t peridot::PeridotDxpMacro::ML_detectionEq(uint64_t a1, int a2, void *a3, int a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, BOOL *a9, uint64_t a10, float *a11, unint64_t *a12, void *a13, void *a14)
{
  uint64_t v18 = *a3;
  uint64_t v19 = a3[1];
  unint64_t v20 = (unint64_t)(float)*(unint64_t *)(*a3 + 16);
  v152[182] = v20;
  uint64_t v21 = v19 - v18;
  if (v19 != v18 && v20)
  {
    uint64_t v22 = 0;
    unint64_t v23 = v21 / 24;
    if (v23 <= 1) {
      unint64_t v23 = 1;
    }
    unint64_t v24 = v20 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if (!v22)
      {
        unint64_t v37 = 0;
        uint64_t v38 = *(void *)(v18 + 8);
        if (v20 < 8) {
          goto LABEL_27;
        }
        if ((unint64_t)v151 - v38 < 0x20) {
          goto LABEL_27;
        }
        float v39 = (long long *)(v38 + 16);
        float v40 = v152;
        unint64_t v41 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v42 = *v39;
          *(v40 - 1) = *(v39 - 1);
          *float v40 = v42;
          v40 += 2;
          v39 += 2;
          v41 -= 8;
        }
        while (v41);
        unint64_t v37 = v20 & 0xFFFFFFFFFFFFFFF8;
        if (v24 != v20)
        {
LABEL_27:
          unint64_t v43 = v20 - v37;
          uint64_t v44 = 4 * v37;
          unint64_t v45 = &v151[v37];
          long long v46 = (int *)(v38 + v44);
          do
          {
            int v47 = *v46++;
            *v45++ = v47;
            --v43;
          }
          while (v43);
        }
        goto LABEL_6;
      }
      float32x4_t v25 = *(float32x4_t **)(v18 + 24 * v22 + 8);
      if (v20 > 7 && (v151 < &v25->i32[v20] ? (_CF = v25 >= (float32x4_t *)&v151[v20]) : (_CF = 1), _CF))
      {
        uint64_t v27 = v25 + 1;
        float32x4_t v28 = (float32x4_t *)v152;
        unint64_t v29 = v20 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v30 = vaddq_f32(*v28, *v27);
          v28[-1] = vaddq_f32(v28[-1], v27[-1]);
          float32x4_t *v28 = v30;
          v28 += 2;
          v27 += 2;
          v29 -= 8;
        }
        while (v29);
        unint64_t v31 = v20 & 0xFFFFFFFFFFFFFFF8;
        if (v24 == v20) {
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v31 = 0;
      }
      unint64_t v32 = v20 - v31;
      uint64_t v33 = v31;
      float v34 = (float *)&v151[v31];
      float v35 = &v25->f32[v33];
      do
      {
        float v36 = *v35++;
        float *v34 = *v34 + v36;
        ++v34;
        --v32;
      }
      while (v32);
LABEL_6:
      ++v22;
    }
    while (v22 != v23);
  }
  unint64_t v48 = a5 + ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 2) - 1;
  unint64_t v50 = ((uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 2) - 1;
  _ZF = (uint64_t)(*(void *)(a1 + 184) - *(void *)(a1 + 176)) >> 2 == 1;
  if (v48 < a5) {
    return 1;
  }
  *a12 = v50;
  if (!_ZF)
  {
    uint64_t v52 = *(void *)(a1 + 4720);
    if (v50 <= 1) {
      unint64_t v53 = 1;
    }
    else {
      unint64_t v53 = v50;
    }
    if (v53 <= 7 || (float32x4_t v54 = &v151[a5], (unint64_t)(v52 - (void)v54) < 0x20))
    {
      unint64_t v55 = 0;
LABEL_39:
      unint64_t v56 = v53 - v55;
      char v57 = (_DWORD *)(v52 + 4 * v55);
      uint64_t v58 = &v151[v55 + a5];
      do
      {
        int v59 = *v58++;
        *v57++ = v59;
        --v56;
      }
      while (v56);
      goto LABEL_41;
    }
    unint64_t v55 = v53 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v143 = (_OWORD *)(v52 + 16);
    uint64_t v144 = (long long *)(v54 + 4);
    unint64_t v145 = v53 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v146 = *v144;
      *(v143 - 1) = *(v144 - 1);
      _OWORD *v143 = v146;
      v143 += 2;
      v144 += 2;
      v145 -= 8;
    }
    while (v145);
    if (v53 != v55) {
      goto LABEL_39;
    }
  }
LABEL_41:
  unint64_t v60 = 1;
  if (a5 + 1 > 1) {
    unint64_t v60 = a5 + 1;
  }
  if (v60 <= 7)
  {
    unint64_t v61 = 0;
    float32x2_t v62 = 0;
LABEL_48:
    unint64_t v68 = v60 - v61;
    char v69 = (float *)&v151[v61];
    do
    {
      float v70 = *v69++;
      v62.f32[0] = v62.f32[0] + v70;
      --v68;
    }
    while (v68);
    goto LABEL_50;
  }
  unint64_t v61 = v60 & 0xFFFFFFFFFFFFFFF8;
  char v63 = (float32x4_t *)v152;
  float32x4_t v64 = 0uLL;
  unint64_t v65 = v60 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v66 = 0uLL;
  do
  {
    float32x4_t v64 = vaddq_f32(v64, v63[-1]);
    float32x4_t v66 = vaddq_f32(v66, *v63);
    v63 += 2;
    v65 -= 8;
  }
  while (v65);
  float32x4_t v67 = vaddq_f32(v66, v64);
  float32x2_t v62 = (float32x2_t)vpaddq_f32(v67, v67).u64[0];
  v62.f32[0] = vaddv_f32(v62);
  if (v60 != v61) {
    goto LABEL_48;
  }
LABEL_50:
  v62.f32[0] = v62.f32[0] / (float)v60;
  *a11 = v62.f32[0];
  if (v48 == a5)
  {
    if (v62.f32[0] <= 0.005)
    {
      *a9 = 0;
      goto LABEL_75;
    }
    float v71 = 3.4028e38;
LABEL_63:
    BOOL v76 = (float)(v62.f32[0] / v71) > 3.0;
    goto LABEL_66;
  }
  uint64_t v72 = *(float **)(a1 + 4720);
  if (v50 <= 1) {
    uint64_t v73 = 1;
  }
  else {
    uint64_t v73 = v50;
  }
  float v71 = 3.4028e38;
  do
  {
    float v74 = *v72++;
    float v75 = v74;
    if (v74 < v71) {
      float v71 = v75;
    }
    --v73;
  }
  while (v73);
  if (v62.f32[0] > 0.005)
  {
    if (v71 == 0.0)
    {
      BOOL v76 = 1;
      goto LABEL_66;
    }
    goto LABEL_63;
  }
  BOOL v76 = 0;
LABEL_66:
  *a9 = v76;
  if (v48 == a5) {
    goto LABEL_75;
  }
  unint64_t v77 = *(void *)(a1 + 4720);
  if (v50 <= 1) {
    unint64_t v50 = 1;
  }
  if (v50 <= 7 || v77 < (unint64_t)(a11 + 1) && v77 + 4 * v50 > (unint64_t)a11)
  {
    unint64_t v78 = 0;
LABEL_73:
    unint64_t v79 = v50 - v78;
    float v80 = (float *)(v77 + 4 * v78);
    do
    {
      *float v80 = fmaxf(*v80 - *a11, 0.0);
      ++v80;
      --v79;
    }
    while (v79);
    goto LABEL_75;
  }
  unint64_t v78 = v50 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v147 = (float32x4_t)vdupq_lane_s32((int32x2_t)v62, 0);
  uint64_t v148 = (float32x4_t *)(v77 + 16);
  unint64_t v149 = v50 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v150 = vmaxnmq_f32(vsubq_f32(*v148, v147), (float32x4_t)0);
    v148[-1] = vmaxnmq_f32(vsubq_f32(v148[-1], v147), (float32x4_t)0);
    *uint64_t v148 = v150;
    v148 += 2;
    v149 -= 8;
  }
  while (v149);
  if (v50 != v78) {
    goto LABEL_73;
  }
LABEL_75:
  if (a4)
  {
    uint64_t v81 = a4;
    uint64_t v82 = (char *)(a1 + 324);
    do
    {
      bzero(v82, 4 * a7);
      v82 += 244;
      --v81;
    }
    while (v81);
  }
  if (a7)
  {
    uint64_t v83 = 0;
    uint64_t v84 = *(void *)(a1 + 4720);
    uint64_t v85 = **(void **)(a1 + 31336) + (a6 << 9);
    uint64_t v86 = **(void **)(a1 + 31288);
    uint64_t v87 = **(void **)(a1 + 31360) + (a6 << 9);
    uint64_t v88 = **(void **)(a1 + 31312);
    uint64_t v89 = 11008 * a6;
    float v90 = 3.4028e38;
    uint64_t v91 = 1788;
    while (*a12 == 45)
    {
      uint64_t v93 = v88 + v89;
      float32x4_t v94 = *(float32x4_t *)(v84 + 128);
      float32x4_t v120 = *(float32x4_t *)(v84 + 144);
      float32x4_t v96 = *(float32x4_t *)(v84 + 96);
      float32x4_t v95 = *(float32x4_t *)(v84 + 112);
      float32x4_t v98 = *(float32x4_t *)(v84 + 64);
      float32x4_t v97 = *(float32x4_t *)(v84 + 80);
      float32x4_t v99 = *(float32x4_t *)(v88 + v89 + 32);
      float32x4_t v100 = *(float32x4_t *)(v84 + 32);
      float32x4_t v101 = *(float32x4_t *)(v84 + 48);
      float32x4_t v102 = *(float32x4_t *)(v88 + 11008 * a6);
      float32x4_t v103 = *(float32x4_t *)(v84 + 16);
      float32x4_t v104 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v102, *(float32x4_t *)v84), v100, v99), v98, *(float32x4_t *)(v88 + v89 + 64)), v96, *(float32x4_t *)(v88 + v89 + 96)), v94, *(float32x4_t *)(v88 + v89 + 128)), v103, *(float32x4_t *)(v88 + v89 + 16)), v101, *(float32x4_t *)(v88 + v89 + 48)), v97,
                   *(float32x4_t *)(v88 + v89 + 80)),
                 v95,
                 *(float32x4_t *)(v88 + v89 + 112)),
               v120,
               *(float32x4_t *)(v88 + v89 + 144));
      float32x4_t v105 = *(float32x4_t *)(v86 + v89 + 128);
      float32x4_t v106 = *(float32x4_t *)(v86 + v89 + 144);
      float32x4_t v107 = *(float32x4_t *)(v86 + v89 + 96);
      float32x4_t v108 = *(float32x4_t *)(v86 + v89 + 112);
      float32x4_t v109 = *(float32x4_t *)(v86 + v89 + 64);
      float32x4_t v110 = *(float32x4_t *)(v86 + v89 + 80);
      float32x4_t v111 = *(float32x4_t *)(v86 + v89 + 32);
      float32x4_t v112 = *(float32x4_t *)(v86 + v89 + 48);
      float32x4_t v113 = *(float32x4_t *)(v86 + 11008 * a6);
      float32x4_t v114 = *(float32x4_t *)(v86 + v89 + 16);
      float32x4_t v119 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)v84, v113), v111, v100), v109, v98), v107, v96), v105, v94), v114, v103), v112, v101), v110, v97), v108, v95),
               v106,
               v120);
      float v115 = *(float *)(v86 + v89 + 160);
      float v116 = *(float *)(v84 + 160);
      v98.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v119, v119)) + (float)(v116 * v115);
      float v117 = *(float *)(v88 + v89 + 160);
      v118.i64[0] = *(void *)(v86 + v89 + 164);
      v119.i64[0] = *(void *)(v84 + 164);
      v120.i64[0] = *(void *)(v88 + v89 + 164);
      v101.i32[0] = *(_DWORD *)(v86 + v89 + 172);
      v103.i32[0] = *(_DWORD *)(v86 + v89 + 176);
      v98.f32[1] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v104, v104)) + (float)(v117 * v116);
      v101.i32[1] = *(_DWORD *)(v88 + v89 + 172);
      v103.i32[1] = *(_DWORD *)(v88 + v89 + 176);
      _D30 = vmla_n_f32(vmla_n_f32(vmla_lane_f32(vmla_n_f32(*(float32x2_t *)v98.f32, (float32x2_t)vzip1_s32(*(int32x2_t *)v118.f32, *(int32x2_t *)v120.f32), v119.f32[0]), (float32x2_t)vzip2_s32(*(int32x2_t *)v118.f32, *(int32x2_t *)v120.f32), *(float32x2_t *)v119.f32, 1), *(float32x2_t *)v101.f32, *(float *)(v84 + 172)), *(float32x2_t *)v103.f32, *(float *)(v84 + 176));
      _S25 = 0.0;
      if ((a8 & 1) == 0)
      {
        _S31 = *(_DWORD *)(v85 + v91 - 1784);
        __asm { FMLA            S25, S31, V30.S[1] }
      }
      float32x2_t v126 = vmul_f32(*(float32x2_t *)(v87 + 8 * v83), _D30);
      LODWORD(v127) = vadd_f32((float32x2_t)vdup_lane_s32((int32x2_t)v126, 1), v126).u32[0];
      float32x4_t v128 = vsubq_f32(*(float32x4_t *)(v84 + 144), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 144), v127), v106, _S25));
      float32x4_t v129 = vsubq_f32(*(float32x4_t *)(v84 + 112), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 112), v127), v108, _S25));
      float32x4_t v130 = vsubq_f32(*(float32x4_t *)(v84 + 80), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 80), v127), v110, _S25));
      float32x4_t v131 = vsubq_f32(*(float32x4_t *)(v84 + 48), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 48), v127), v112, _S25));
      float32x4_t v132 = vsubq_f32(*(float32x4_t *)(v84 + 16), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 16), v127), v114, _S25));
      float32x4_t v133 = vsubq_f32(*(float32x4_t *)(v84 + 128), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 128), v127), v105, _S25));
      float32x4_t v134 = vsubq_f32(*(float32x4_t *)(v84 + 96), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 96), v127), v107, _S25));
      float v135 = vaddv_f32(v126);
      float32x4_t v136 = vsubq_f32(*(float32x4_t *)(v84 + 64), vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(v93 + 64), v127), v109, _S25));
      float32x4_t v137 = vsubq_f32(v100, vmlaq_n_f32(vmulq_n_f32(v99, v127), v111, _S25));
      float32x4_t v138 = vsubq_f32(*(float32x4_t *)v84, vmlaq_n_f32(vmulq_n_f32(v102, v127), v113, _S25));
      float32x4_t v139 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v138, v138), v137, v137), v136, v136), v134, v134), v133, v133), v132, v132), v131, v131), v130, v130), v129, v129), v128, v128);
      v137.f32[0] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v139, v139))
                  + (float)((float)(v116 - (float)((float)(v117 * v135) + (float)(v115 * _S25)))
                          * (float)(v116 - (float)((float)(v117 * v135) + (float)(v115 * _S25))));
      v118.i64[1] = *(void *)(v86 + v89 + 172);
      v120.i64[1] = *(void *)(v93 + 172);
      v119.i64[1] = *(void *)(v84 + 172);
      float32x4_t v140 = vsubq_f32(v119, vmlaq_n_f32(vmulq_n_f32(v120, v127), v118, _S25));
      float32x4_t v141 = vmulq_f32(v140, v140);
      float v142 = v137.f32[0] + vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v141, v141));
      if (v142 < v90)
      {
        *a13 = v83;
        *a14 = 0;
        float v90 = v142;
      }
      *(float *)(a1 + 4 * v83 + 324) = v142;
      int v92 = (float *)(a1 + v91);
      ++v83;
      *int v92 = _S25;
      v92[1] = v135;
      v88 += 180;
      v86 += 180;
      v91 += 8;
      if (a7 == v83) {
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

void peridot::PeridotDxpMacro::findStrayT0New(peridot::PeridotDxpMacro *this, const peridot::Histogram *a2, unint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, double a7)
{
  unint64_t v11 = *((void *)a2 + 2);
  v122[182] = (unint64_t)(float)v11;
  if (v11)
  {
    uint64_t v12 = (float32x4_t *)*((void *)a2 + 1);
    LODWORD(a7) = v12->i32[0];
    if (v11 < 8 || (unint64_t)(v121 - (unsigned char *)v12) <= 0x1F)
    {
      unint64_t v14 = 0;
LABEL_10:
      unint64_t v20 = v11 - v14;
      uint64_t v21 = v14;
      uint64_t v22 = (float *)&v121[v21 * 4];
      unint64_t v23 = &v12->f32[v21];
      do
      {
        float v24 = *v23++;
        *v22++ = v24 - *(float *)&a7;
        --v20;
      }
      while (v20);
      goto LABEL_12;
    }
    unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a7, 0);
    float v16 = (float32x4_t *)v122;
    uint64_t v17 = v12 + 1;
    unint64_t v18 = v11 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v19 = vsubq_f32(*v17, v15);
      v16[-1] = vsubq_f32(v17[-1], v15);
      *float v16 = v19;
      v16 += 2;
      v17 += 2;
      v18 -= 8;
    }
    while (v18);
    if (v11 != v14) {
      goto LABEL_10;
    }
  }
LABEL_12:
  float32x4_t v25 = 0;
  float32x4_t v120 = 0;
  uint64_t v116 = a4 - a3;
  unint64_t v26 = a4 - a3 + 1;
  if (a4 - a3 != -1)
  {
    if (v26 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    float32x4_t v25 = (char *)operator new(24 * v26);
    size_t v27 = 24 * ((24 * v26 - 24) / 0x18) + 24;
    bzero(v25, v27);
    float32x4_t v120 = &v25[v27];
  }
  float32x4_t v28 = (char *)*((void *)this + 3926);
  uint64_t v29 = *((void *)v28 + 1);
  size_t v30 = v29 - *(void *)v28;
  if (v29 == *(void *)v28)
  {
    float32x4_t v119 = 0;
    std::string __p = 0;
  }
  else
  {
    if ((v30 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v31 = (float32x4_t *)operator new(v29 - *(void *)v28);
    bzero(v31, v30);
    std::string __p = v31;
    float32x4_t v119 = (float32x4_t *)((char *)v31 + v30);
  }
  uint64_t v112 = a4;
  unint64_t v113 = a3;
  float32x4_t v114 = a5;
  float v115 = a6;
  if (a4 - a3 != -1)
  {
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    float v34 = (char *)*((void *)this + 3927);
    if ((unint64_t)(((char *)v119 - (char *)__p) >> 2) <= 1) {
      unint64_t v35 = 1;
    }
    else {
      unint64_t v35 = ((char *)v119 - (char *)__p) >> 2;
    }
    unint64_t v36 = v35 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v37 = (float *)&v121[4 * a3];
    float v38 = 3.4028e38;
    while (1)
    {
      if (v34 == v28)
      {
        unint64_t v43 = v37;
        uint64_t v44 = 0;
        unint64_t v45 = 0;
        long long v42 = 0;
      }
      else
      {
        unint64_t v40 = 0xAAAAAAAAAAAAAAABLL * ((v34 - v28) >> 3);
        if (v40 >> 62) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        size_t v41 = 0xAAAAAAAAAAAAAAACLL * ((v34 - v28) >> 3);
        long long v42 = (char *)operator new(4 * v40);
        unint64_t v43 = v37;
        uint64_t v44 = &v42[4 * v40];
        bzero(v42, v41);
        unint64_t v45 = &v42[v41];
      }
      long long v46 = v25;
      int v47 = &v25[24 * v32];
      unint64_t v48 = *(void **)v47;
      if (*(void *)v47)
      {
        *(void *)&v46[24 * v32 + 8] = v48;
        operator delete(v48);
        *(void *)int v47 = 0;
        *((void *)v47 + 1) = 0;
        *((void *)v47 + 2) = 0;
      }
      *(void *)int v47 = v42;
      int v49 = &v46[24 * v32];
      *((void *)v49 + 1) = v45;
      *((void *)v49 + 2) = v44;
      unint64_t v50 = __p;
      float32x4_t v25 = v46;
      char v51 = v43;
      if (v119 != __p)
      {
        float v52 = 0.0;
        unint64_t v53 = v43;
        float32x4_t v54 = (float *)__p;
        unint64_t v55 = v35;
        do
        {
          float v56 = *v53++;
          float v57 = v56;
          *v54++ = v56;
          if (v56 > v52) {
            float v52 = v57;
          }
          --v55;
        }
        while (v55);
        if (v35 <= 7)
        {
          unint64_t v58 = 0;
LABEL_41:
          unint64_t v63 = v35 - v58;
          float32x4_t v64 = &__p->f32[v58];
          float v65 = 1.0 / v52;
          do
          {
            *float32x4_t v64 = *v64 * v65;
            ++v64;
            --v63;
          }
          while (v63);
          goto LABEL_43;
        }
        int v59 = __p + 1;
        unint64_t v60 = v35 & 0xFFFFFFFFFFFFFFF8;
        float v61 = 1.0 / v52;
        do
        {
          float32x4_t v62 = vmulq_n_f32(*v59, v61);
          v59[-1] = vmulq_n_f32(v59[-1], v61);
          *int v59 = v62;
          v59 += 2;
          v60 -= 8;
        }
        while (v60);
        unint64_t v58 = v35 & 0xFFFFFFFFFFFFFFF8;
        if (v35 != v36) {
          goto LABEL_41;
        }
      }
LABEL_43:
      float v34 = (char *)*((void *)this + 3927);
      float32x4_t v28 = (char *)*((void *)this + 3926);
      if (v34 != v28)
      {
        float32x4_t v66 = *(float **)&v25[24 * v32];
        if ((unint64_t)((v34 - v28) / 24) <= 1) {
          uint64_t v67 = 1;
        }
        else {
          uint64_t v67 = (v34 - v28) / 24;
        }
        if (v119 != __p)
        {
          uint64_t v68 = 0;
          while (1)
          {
            char v69 = *(float32x4_t **)&v28[24 * v68];
            if (v35 >= 8)
            {
              uint64_t v72 = v69 + 1;
              float32x4_t v73 = 0uLL;
              float v74 = __p + 1;
              unint64_t v75 = v35 & 0xFFFFFFFFFFFFFFF8;
              float32x4_t v76 = 0uLL;
              do
              {
                float32x4_t v77 = vsubq_f32(v72[-1], v74[-1]);
                float32x4_t v78 = vsubq_f32(*v72, *v74);
                float32x4_t v73 = vmlaq_f32(v73, v77, v77);
                float32x4_t v76 = vmlaq_f32(v76, v78, v78);
                v74 += 2;
                v72 += 2;
                v75 -= 8;
              }
              while (v75);
              float32x4_t v79 = vaddq_f32(v76, v73);
              float v71 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v79, v79));
              unint64_t v70 = v35 & 0xFFFFFFFFFFFFFFF8;
              if (v35 == v36) {
                goto LABEL_49;
              }
            }
            else
            {
              unint64_t v70 = 0;
              float v71 = 0.0;
            }
            unint64_t v80 = v35 - v70;
            uint64_t v81 = v70;
            uint64_t v82 = &__p->f32[v70];
            uint64_t v83 = &v69->f32[v81];
            do
            {
              float v84 = *v83++;
              float v85 = v84;
              float v86 = *v82++;
              float v71 = v71 + (float)((float)(v85 - v86) * (float)(v85 - v86));
              --v80;
            }
            while (v80);
LABEL_49:
            v66[v68] = v71;
            if (v71 < v38)
            {
              float v38 = v71;
              uint64_t v33 = v32;
            }
            if (++v68 == v67) {
              goto LABEL_24;
            }
          }
        }
        bzero(v66, 4 * v67);
        do
        {
          if (v38 > 0.0)
          {
            float v38 = 0.0;
            uint64_t v33 = v32;
          }
          --v67;
        }
        while (v67);
      }
LABEL_24:
      unint64_t v37 = v51 + 1;
      if (v32++ == v116) {
        goto LABEL_66;
      }
    }
  }
  uint64_t v33 = 0;
  float v38 = 3.4028e38;
  unint64_t v50 = __p;
LABEL_66:
  *float32x4_t v114 = v33 + v113;
  *float v115 = 0;
  uint64_t v87 = *(void *)&v25[24 * v33];
  uint64_t v88 = *(void *)&v25[24 * v33 + 8];
  uint64_t v89 = v88 - v87;
  if (v88 != v87)
  {
    unint64_t v90 = 0;
    unint64_t v91 = v89 >> 2;
    if (v91 <= 1) {
      unint64_t v91 = 1;
    }
    float v92 = 3.4028e38;
    do
    {
      float v93 = *(float *)(v87 + 4 * v90);
      if (v93 < v92)
      {
        *float v115 = v90;
        float v92 = v93;
      }
      ++v90;
    }
    while (v91 != v90);
  }
  uint64_t v94 = (uint64_t)(*((void *)v28 + 1) - *(void *)v28) >> 2;
  unint64_t v95 = v94 + v112 - v113;
  if (v94 + v112 <= v113) {
    goto LABEL_85;
  }
  float v96 = 0.0;
  unint64_t v97 = v113;
  if (v95 > 7)
  {
    unint64_t v98 = v95 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v99 = (float32x4_t *)&v121[4 * v113 + 16];
    float32x4_t v100 = 0uLL;
    unint64_t v101 = v95 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v102 = 0uLL;
    do
    {
      float32x4_t v100 = vaddq_f32(v99[-1], v100);
      float32x4_t v102 = vaddq_f32(*v99, v102);
      v99 += 2;
      v101 -= 8;
    }
    while (v101);
    float32x4_t v103 = vaddq_f32(v102, v100);
    float v96 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v103, v103));
    if (v95 == v98) {
      goto LABEL_81;
    }
    unint64_t v97 = v98 + v113;
  }
  unint64_t v104 = v94 + v112 - v97;
  float32x4_t v105 = (float *)&v121[4 * v97];
  do
  {
    float v106 = *v105++;
    float v96 = v106 + v96;
    --v104;
  }
  while (v104);
LABEL_81:
  if (v96 < 0.001 || v38 > 0.5)
  {
LABEL_85:
    *float32x4_t v114 = v113 + 2;
    *float v115 = 2;
  }
  if (v50) {
    operator delete(v50);
  }
  if (v25)
  {
    float32x4_t v108 = v120;
    if (v120 != v25)
    {
      float32x4_t v109 = v120;
      do
      {
        float32x4_t v111 = (void *)*((void *)v109 - 3);
        v109 -= 24;
        float32x4_t v110 = v111;
        if (v111)
        {
          *((void *)v108 - 2) = v110;
          operator delete(v110);
        }
        float32x4_t v108 = v109;
      }
      while (v109 != v25);
    }
    operator delete(v25);
  }
}

void sub_259005020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18)
{
}

float peridot::PeridotDXP::strayEstimation(uint64_t a1, float *a2, float *a3, float *a4, float *a5, float a6, float a7, float a8)
{
  if (*(unsigned char *)(a1 + 1))
  {
    float v8 = *(float *)(a1 + 3408);
    float v9 = a3[18];
    BOOL v10 = v8 > v9;
    float v11 = a3[42];
    float v12 = a3[27];
    if (v12 >= 0.0) {
      BOOL v10 = 1;
    }
    BOOL v13 = v11 == 0.0;
    if (v11 <= 0.0) {
      BOOL v10 = 0;
    }
    float v14 = v11 * (float)v10;
    float v15 = 0.0;
    if (v13 && v8 <= v9)
    {
      float v15 = 1.0;
      if ((float)(a3[6] - a7) >= *(float *)(a1 + 3416)) {
        float v15 = 0.0;
      }
    }
    float v17 = v14 + (float)(v15 * v12);
    *a5 = v17;
    if (v17 == 0.0)
    {
      float v18 = a2[42];
      if (v18 != 0.0) {
        *a5 = v18 * a8;
      }
    }
  }
  float v19 = a2[6] - a6;
  float v20 = *(float *)(a1 + 3408);
  float v21 = a2[18];
  float v22 = a2[42];
  float v23 = 0.0;
  if (v22 == 0.0 && v20 <= v21)
  {
    float v23 = 0.0;
    if (v19 < *(float *)(a1 + 3416)) {
      float v23 = 1.0;
    }
  }
  if (v20 > v21)
  {
    int v26 = 0;
    BOOL v25 = 1;
  }
  else
  {
    BOOL v25 = v19 >= *(float *)(a1 + 3420);
    int v26 = v19 > *(float *)(a1 + 3424);
  }
  float v27 = a2[27];
  float v28 = a3[42];
  int v29 = v20 > v21 || v25;
  if (v20 <= v21) {
    int v30 = 1;
  }
  else {
    int v30 = v26;
  }
  if (v29) {
    float v31 = 1.0;
  }
  else {
    float v31 = 0.0;
  }
  if (v26 != v30 && v29 != 0) {
    float v31 = (float)(v19 - *(float *)(a1 + 3420)) / (float)(*(float *)(a1 + 3424) - *(float *)(a1 + 3420));
  }
  if (v27 < 0.0) {
    float v33 = 0.0;
  }
  else {
    float v33 = 1.0;
  }
  if (v20 > v21) {
    float v34 = 1.0;
  }
  else {
    float v34 = v33;
  }
  if (v22 <= 0.0) {
    float v34 = 0.0;
  }
  float v35 = (float)(v34 * v22) + (float)(v23 * v27);
  if (v28 != 0.0 && v35 == 0.0) {
    float v35 = v28 / a8;
  }
  float result = v35 + (float)(v31 * (float)(*a4 - v35));
  *a4 = result;
  return result;
}

void peridot::PeridotDxpMacroSpatial::runPolyFit(float *a1, uint64_t a2, uint64_t a3, float *a4, uint64_t a5, int a6)
{
  uint64_t v85 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 108))
  {
    float v8 = a1 + 5;
    float v9 = (char *)a1 + a3 + 20;
    int v11 = v9[14];
    BOOL v10 = v9 + 14;
    if (v11 <= 96)
    {
      peridot::PeridotDxpMacroSpatial::detector((uint64_t)a1, (float *)a2, (float *)(a5 + 8), (float *)(a5 + 16));
      float v16 = 0.0;
      if (*(float *)(a5 + 16) > a1[3]) {
        float v16 = 1.0;
      }
      float v17 = 1.0 / (float)(expf((float)(a1[2] - (float)(*(float *)(a5 + 8) * v16)) * a1[1]) + 1.0);
      *(float *)(a5 + 4) = v17;
      if (v17 <= 0.5)
      {
        *(void *)a5 = 0;
        return;
      }
      float v20 = *(float *)a2;
      float v22 = (float)(*(float *)(a2 + 4) + *(float *)a2) + *(float *)(a2 + 8);
      if (v22 > *(float *)a2) {
        float v20 = (float)(*(float *)(a2 + 4) + *(float *)a2) + *(float *)(a2 + 8);
      }
      float v21 = *(float *)(a2 + 12);
      *(float *)&double v19 = (float)(*(float *)(a2 + 16) + v21) + *(float *)(a2 + 20);
      uint64_t v23 = *(float *)&v19 > v20;
      if (*(float *)&v19 > v20) {
        float v20 = (float)(*(float *)(a2 + 16) + v21) + *(float *)(a2 + 20);
      }
      float v24 = (float)(*(float *)(a2 + 28) + *(float *)(a2 + 24)) + *(float *)(a2 + 32);
      if (v24 > v20)
      {
        uint64_t v23 = 2;
        float v20 = (float)(*(float *)(a2 + 28) + *(float *)(a2 + 24)) + *(float *)(a2 + 32);
      }
      float v25 = *(float *)(a2 + 44);
      float v26 = *(float *)(a2 + 40) + *(float *)(a2 + 36);
      float v27 = v26 + v25;
      if ((float)(v26 + v25) > v20)
      {
        uint64_t v23 = 3;
        float v20 = v26 + v25;
      }
      float v28 = (float)(*(float *)(a2 + 52) + *(float *)(a2 + 48)) + *(float *)(a2 + 56);
      if (v28 > v20)
      {
        uint64_t v23 = 4;
        float v20 = (float)(*(float *)(a2 + 52) + *(float *)(a2 + 48)) + *(float *)(a2 + 56);
      }
      float v29 = *(float *)(a2 + 68);
      float v30 = *(float *)(a2 + 64) + *(float *)(a2 + 60);
      float v31 = v30 + v29;
      if ((float)(v30 + v29) > v20)
      {
        uint64_t v23 = 5;
        float v20 = v30 + v29;
      }
      float v32 = *(float *)(a2 + 72);
      float v33 = *(float *)(a2 + 76);
      float v34 = *(float *)(a2 + 80);
      float v35 = *(float *)(a2 + 84);
      float v36 = (float)(v33 + v32) + v34;
      if (v36 > v20)
      {
        uint64_t v23 = 6;
        float v20 = (float)(v33 + v32) + v34;
      }
      float v37 = *(float *)(a2 + 88);
      float v38 = *(float *)(a2 + 92);
      float v39 = (float)(v37 + v35) + v38;
      uint64_t v40 = 7;
      if (v39 > v20)
      {
        float v41 = (float)(v37 + v35) + v38;
      }
      else
      {
        uint64_t v40 = v23;
        float v41 = v20;
      }
      float v42 = *(float *)(a2 + 96);
      float v43 = *(float *)(a2 + 100);
      float v44 = *(float *)(a2 + 104);
      *(float *)v18.i32 = (float)(v43 + v42) + v44;
      unint64_t v45 = 8;
      if (*(float *)v18.i32 <= v41) {
        unint64_t v45 = v40;
      }
      float v46 = 2.0;
      if (*(float *)v18.i32 <= v41)
      {
        if (!v40)
        {
LABEL_75:
          *(_DWORD *)(a5 + 4) = 0;
          return;
        }
        int v47 = (float *)(a2 + 12 * v40);
        float v32 = *(v47 - 3);
        float v33 = *(v47 - 2);
        float v34 = *(v47 - 1);
        float v35 = *v47;
        float v37 = v47[1];
        float v38 = v47[2];
        float v42 = v47[3];
        float v43 = v47[4];
        float v44 = v47[5];
        float v46 = 1.0;
      }
      float v48 = v35 + (float)(v32 + v42);
      float v49 = v37 + (float)(v33 + v43);
      float v50 = v38 + (float)(v34 + v44);
      uint64_t v51 = v49 > v48;
      if (v49 <= v48) {
        float v52 = v35 + (float)(v32 + v42);
      }
      else {
        float v52 = v37 + (float)(v33 + v43);
      }
      if (v50 > v52) {
        uint64_t v51 = 2;
      }
      if (v51)
      {
        float v53 = 0.0;
        if (v51 == 1)
        {
          float v54 = -(v49 + (v50 + v48) * -0.5);
          float v55 = (float)((float)(v50 + (float)(v48 * 2.0)) + (float)(v49 * -3.0)) / (float)(v54 + v54);
LABEL_41:
          float v56 = (float)(v33 + v32) + v34;
          float v57 = (float)(v37 + v35) + v38;
          float v58 = (float)(v43 + v42) + v44;
          if (a6)
          {
            double v59 = v39;
            float v60 = (*(float *)v18.i32 + v39 * 0.5) * 0.5;
            double v61 = v22;
            double v62 = *(float *)&v19;
            float v63 = (v61 + v62 * 0.5) * 0.5;
            double v64 = v24;
            float v65 = (v62 + (v64 + v61) * 0.5) * 0.5;
            *(float *)float v84 = v63;
            *(float *)&v84[1] = v65;
            uint64_t v66 = v65 > v63;
            if (v65 <= v63) {
              float v65 = v63;
            }
            double v67 = v27;
            float v68 = (v64 + (v67 + v62) * 0.5) * 0.5;
            if (v65 < v68)
            {
              uint64_t v66 = 2;
              float v65 = v68;
            }
            double v69 = v28;
            float v70 = (v67 + (v69 + v64) * 0.5) * 0.5;
            *(float *)&v84[2] = v68;
            *(float *)&v84[3] = v70;
            if (v65 < v70)
            {
              uint64_t v66 = 3;
              float v65 = v70;
            }
            double v71 = v31;
            float v72 = (v69 + (v31 + v67) * 0.5) * 0.5;
            if (v65 < v72)
            {
              uint64_t v66 = 4;
              float v65 = v72;
            }
            double v73 = v36;
            float v74 = (v71 + (v36 + v69) * 0.5) * 0.5;
            *(float *)&v84[4] = v72;
            *(float *)&v84[5] = v74;
            if (v65 < v74)
            {
              uint64_t v66 = 5;
              float v65 = v74;
            }
            double v19 = (v73 + (v59 + v71) * 0.5) * 0.5;
            *(float *)&double v19 = v19;
            if (v65 < *(float *)&v19)
            {
              uint64_t v66 = 6;
              float v65 = *(float *)&v19;
            }
            float v75 = (v59 + (*(float *)v18.i32 + v73) * 0.5) * 0.5;
            v84[6] = LODWORD(v19);
            *(float *)&v84[7] = v75;
            if (v65 < v75)
            {
              uint64_t v66 = 7;
              float v65 = (v59 + (*(float *)v18.i32 + v73) * 0.5) * 0.5;
            }
            *(float *)&v84[8] = v60;
            if (v65 < v60) {
              uint64_t v66 = 8;
            }
            if (v45 - 1 <= 6)
            {
              if ((v66 & 0xFFFFFFFFFFFFFFF7) != 0)
              {
                float32x4_t v76 = (float *)&v84[v66];
                float v56 = *(v76 - 1);
                float v57 = *v76;
                float v58 = v76[1];
              }
              else
              {
                float v56 = 0.0;
                float v57 = 0.0;
                float v58 = 0.0;
              }
              unint64_t v45 = v66;
            }
          }
          if (v57 > v56 && v57 > v58)
          {
            float v77 = -(v57 + (v58 + v56) * -0.5);
            float v78 = (float)((float)(v58 + (float)(v56 * 2.0)) + (float)(v57 * -3.0)) / (float)(v77 + v77);
            v18.i32[1] = 0;
            if (v78 < 0.0) {
              float v78 = 0.0;
            }
            v18.i32[0] = 3.0;
            if (v78 <= 3.0) {
              float v79 = v78;
            }
            else {
              float v79 = 3.0;
            }
LABEL_76:
            v18.i8[0] = *((unsigned char *)v8 + a3);
            float v81 = v55 + (float)((float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).i32[0] + -1.0);
            LOBYTE(v19) = *v10;
            float v82 = (float)((float)((float)(-1.0 - v46) + v79)
                        + (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&v19)).i32[0])
                + (float)v45;
            float v83 = a4[1];
            *(float *)(a5 + 20) = v83 - v82;
            *(float *)(a5 + 12) = -(float)(v83 - v82);
            peridot::PeridotDxpMacroSpatial::shiftToDistance((uint64_t)a1, *a4, v83, v81, v82);
          }
          float v79 = 2.5;
          BOOL v80 = *(float *)v18.i32 <= v41 || v58 <= v57;
          if (!v80) {
            goto LABEL_76;
          }
          goto LABEL_75;
        }
      }
      else
      {
        float v53 = 0.5;
      }
      BOOL v80 = v50 <= v52;
      float v55 = 2.5;
      if (v80) {
        float v55 = v53;
      }
      goto LABEL_41;
    }
  }
}

float peridot::PeridotDxpMacroSpatial::detector(uint64_t a1, float *a2, float *a3, float *a4)
{
  float v4 = a2[3];
  float v5 = a2[1];
  float v6 = a2[4];
  float v7 = a2[5];
  if ((float)((float)(v4 + *a2) + (float)(v5 + v6)) <= *a2) {
    float v8 = *a2;
  }
  else {
    float v8 = (float)(v4 + *a2) + (float)(v5 + v6);
  }
  float v9 = a2[2];
  float v10 = (float)(v6 + v5) + (float)(v9 + v7);
  if (v10 <= v8) {
    float v11 = v8;
  }
  else {
    float v11 = (float)(v6 + v5) + (float)(v9 + v7);
  }
  float v12 = a2[6];
  float v13 = a2[7];
  float v14 = (float)(v12 + v4) + (float)(v6 + v13);
  BOOL v15 = v14 <= v11;
  if (v10 <= v8) {
    BOOL v15 = 0;
  }
  if (v14 > v11) {
    float v16 = (float)(v12 + v4) + (float)(v6 + v13);
  }
  else {
    float v16 = v11;
  }
  float v17 = a2[8];
  float v18 = a2[9];
  float v19 = (float)(v13 + v6) + (float)(v7 + v17);
  uint64_t v20 = v14 > v11 || v19 > v16;
  if (v19 > v16)
  {
    BOOL v15 = 1;
    float v16 = (float)(v13 + v6) + (float)(v7 + v17);
  }
  float v21 = a2[10];
  float v22 = a2[11];
  if ((float)((float)(v18 + v12) + (float)(v13 + v21)) > v16)
  {
    BOOL v15 = 0;
    uint64_t v20 = 2;
    float v16 = (float)(v18 + v12) + (float)(v13 + v21);
  }
  if ((float)((float)(v21 + v13) + (float)(v17 + v22)) <= v16)
  {
    float v23 = v16;
  }
  else
  {
    BOOL v15 = 1;
    uint64_t v20 = 2;
    float v23 = (float)(v21 + v13) + (float)(v17 + v22);
  }
  float v24 = a2[12];
  float v25 = a2[13];
  if ((float)((float)(v24 + v18) + (float)(v21 + v25)) <= v23)
  {
    float v26 = v23;
  }
  else
  {
    BOOL v15 = 0;
    uint64_t v20 = 3;
    float v26 = (float)(v24 + v18) + (float)(v21 + v25);
  }
  float v27 = a2[14];
  float v28 = a2[15];
  if ((float)((float)(v25 + v21) + (float)(v22 + v27)) <= v26)
  {
    float v29 = v26;
  }
  else
  {
    BOOL v15 = 1;
    uint64_t v20 = 3;
    float v29 = (float)(v25 + v21) + (float)(v22 + v27);
  }
  float v30 = a2[16];
  float v31 = a2[17];
  float v32 = (float)(v28 + v24) + (float)(v25 + v30);
  unsigned int v33 = v32 <= v29 && v15;
  uint64_t v34 = 1;
  if (v32 > v29)
  {
    uint64_t v20 = 4;
    float v29 = (float)(v28 + v24) + (float)(v25 + v30);
  }
  if ((float)((float)(v30 + v25) + (float)(v27 + v31)) <= v29)
  {
    float v35 = v29;
  }
  else
  {
    unsigned int v33 = 1;
    uint64_t v20 = 4;
    float v35 = (float)(v30 + v25) + (float)(v27 + v31);
  }
  float v36 = a2[18];
  float v37 = a2[19];
  if ((float)((float)(v36 + v28) + (float)(v30 + v37)) <= v35)
  {
    float v38 = v35;
  }
  else
  {
    unsigned int v33 = 0;
    uint64_t v20 = 5;
    float v38 = (float)(v36 + v28) + (float)(v30 + v37);
  }
  float v39 = a2[20];
  float v40 = a2[21];
  float v41 = (float)(v37 + v30) + (float)(v31 + v39);
  if (v41 <= v38)
  {
    float v41 = v38;
  }
  else
  {
    unsigned int v33 = 1;
    uint64_t v20 = 5;
  }
  float v43 = a2[22];
  float v42 = a2[23];
  if ((float)((float)(v40 + v36) + (float)(v37 + v43)) > v41)
  {
    unsigned int v33 = 0;
    uint64_t v20 = 6;
    float v41 = (float)(v40 + v36) + (float)(v37 + v43);
  }
  if ((float)((float)(v43 + v37) + (float)(v39 + v42)) > v41)
  {
    unsigned int v33 = 1;
    uint64_t v20 = 6;
    float v41 = (float)(v43 + v37) + (float)(v39 + v42);
  }
  float v44 = a2[24];
  float v45 = a2[25];
  if ((float)((float)(v44 + v40) + (float)(v43 + v45)) > v41)
  {
    unsigned int v33 = 0;
    uint64_t v20 = 7;
    float v41 = (float)(v44 + v40) + (float)(v43 + v45);
  }
  float v46 = a2[26];
  if ((float)((float)(v45 + v43) + (float)(v42 + v46)) > v41)
  {
    unsigned int v33 = 1;
    uint64_t v20 = 7;
  }
  uint64_t v47 = 3 * v20;
  float v48 = &a2[v47 + 3];
  float v49 = &a2[v47];
  if (v33) {
    uint64_t v34 = 2;
  }
  float v50 = (float)(v46 + (float)(v45 + (float)(v44 + (float)(v42 + v43))))
      + (float)((float)(v40 + (float)(v39 + (float)(v37 + (float)(v36 + (float)(v31 + v30)))))
              + (float)((float)(v28 + (float)(v27 + (float)(v25 + (float)(v24 + v22))))
                      + (float)((float)(v21 + (float)(v18 + (float)(v17 + v13)))
                              + (float)((float)(v12 + (float)(v7 + v6)) + (float)((float)(v4 + v9) + (float)(v5 + *a2))))));
  float v51 = (float)(v49[v33] + v48[v33]) + (float)(v48[v34] + v49[v34]);
  float v52 = (float)(v50 - v51) * 0.043478;
  *a3 = (float)(v51 * 0.25) / v52;
  float result = (float)(v51 * 0.25) - v52;
  *a4 = result;
  return result;
}

BOOL peridot::PeridotDxpMacro::ML_detectionComp(void *a1, int a2, void *a3, signed int a4, unint64_t a5, uint64_t a6, uint64_t a7, char a8, float *a9, unint64_t *a10)
{
  uint64_t v14 = *a3;
  uint64_t v15 = a3[1];
  unint64_t v16 = (unint64_t)(float)*(unint64_t *)(*a3 + 16);
  v236[182] = v16;
  uint64_t v17 = v15 - v14;
  if (v15 != v14 && v16)
  {
    uint64_t v18 = 0;
    unint64_t v19 = v17 / 24;
    if (v19 <= 1) {
      unint64_t v19 = 1;
    }
    unint64_t v20 = v16 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      if (!v18)
      {
        unint64_t v33 = 0;
        uint64_t v34 = *(void *)(v14 + 8);
        if (v16 < 8) {
          goto LABEL_27;
        }
        if ((unint64_t)v235 - v34 < 0x20) {
          goto LABEL_27;
        }
        float v35 = (long long *)(v34 + 16);
        float v36 = v236;
        unint64_t v37 = v16 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          long long v38 = *v35;
          *(v36 - 1) = *(v35 - 1);
          *float v36 = v38;
          v36 += 2;
          v35 += 2;
          v37 -= 8;
        }
        while (v37);
        unint64_t v33 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v20 != v16)
        {
LABEL_27:
          unint64_t v39 = v16 - v33;
          uint64_t v40 = 4 * v33;
          float v41 = &v235[v33];
          float v42 = (int *)(v34 + v40);
          do
          {
            int v43 = *v42++;
            *v41++ = v43;
            --v39;
          }
          while (v39);
        }
        goto LABEL_6;
      }
      float v21 = *(float32x4_t **)(v14 + 24 * v18 + 8);
      if (v16 > 7 && (v235 < &v21->i32[v16] ? (BOOL v22 = v21 >= (float32x4_t *)&v235[v16]) : (BOOL v22 = 1), v22))
      {
        float v23 = v21 + 1;
        float v24 = (float32x4_t *)v236;
        unint64_t v25 = v16 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          float32x4_t v26 = vaddq_f32(*v24, *v23);
          v24[-1] = vaddq_f32(v24[-1], v23[-1]);
          float32x4_t *v24 = v26;
          v24 += 2;
          v23 += 2;
          v25 -= 8;
        }
        while (v25);
        unint64_t v27 = v16 & 0xFFFFFFFFFFFFFFF8;
        if (v20 == v16) {
          goto LABEL_6;
        }
      }
      else
      {
        unint64_t v27 = 0;
      }
      unint64_t v28 = v16 - v27;
      uint64_t v29 = v27;
      float v30 = (float *)&v235[v27];
      float v31 = &v21->f32[v29];
      do
      {
        float v32 = *v31++;
        *float v30 = *v30 + v32;
        ++v30;
        --v28;
      }
      while (v28);
LABEL_6:
      ++v18;
    }
    while (v18 != v19);
  }
  unint64_t v44 = a5 + ((uint64_t)(a1[23] - a1[22]) >> 2) - 1;
  unint64_t v46 = ((uint64_t)(a1[23] - a1[22]) >> 2) - 1;
  BOOL v45 = (uint64_t)(a1[23] - a1[22]) >> 2 == 1;
  if (v44 < a5) {
    return 1;
  }
  *a10 = v46;
  if (!v45)
  {
    uint64_t v48 = a1[596];
    if (v46 <= 1) {
      unint64_t v49 = 1;
    }
    else {
      unint64_t v49 = v46;
    }
    if (v49 <= 7 || (float v50 = &v235[a5], (unint64_t)(v48 - (void)v50) < 0x20))
    {
      unint64_t v51 = 0;
LABEL_39:
      unint64_t v52 = v49 - v51;
      float v53 = (_DWORD *)(v48 + 4 * v51);
      float v54 = &v235[v51 + a5];
      do
      {
        int v55 = *v54++;
        *v53++ = v55;
        --v52;
      }
      while (v52);
      goto LABEL_41;
    }
    unint64_t v51 = v49 & 0xFFFFFFFFFFFFFFF8;
    float v224 = (_OWORD *)(v48 + 16);
    v225 = (long long *)(v50 + 4);
    unint64_t v226 = v49 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v227 = *v225;
      *(v224 - 1) = *(v225 - 1);
      *float v224 = v227;
      v224 += 2;
      v225 += 2;
      v226 -= 8;
    }
    while (v226);
    if (v49 != v51) {
      goto LABEL_39;
    }
  }
LABEL_41:
  unint64_t v56 = 1;
  if (a5 + 1 > 1) {
    unint64_t v56 = a5 + 1;
  }
  if (v56 <= 7)
  {
    unint64_t v57 = 0;
    float32x2_t v58 = 0;
LABEL_48:
    unint64_t v64 = v56 - v57;
    float v65 = (float *)&v235[v57];
    do
    {
      float v66 = *v65++;
      v58.f32[0] = v58.f32[0] + v66;
      --v64;
    }
    while (v64);
    goto LABEL_50;
  }
  unint64_t v57 = v56 & 0xFFFFFFFFFFFFFFF8;
  double v59 = (float32x4_t *)v236;
  float32x4_t v60 = 0uLL;
  unint64_t v61 = v56 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v62 = 0uLL;
  do
  {
    float32x4_t v60 = vaddq_f32(v60, v59[-1]);
    float32x4_t v62 = vaddq_f32(v62, *v59);
    v59 += 2;
    v61 -= 8;
  }
  while (v61);
  float32x4_t v63 = vaddq_f32(v62, v60);
  float32x2_t v58 = (float32x2_t)vpaddq_f32(v63, v63).u64[0];
  v58.f32[0] = vaddv_f32(v58);
  if (v56 != v57) {
    goto LABEL_48;
  }
LABEL_50:
  v58.f32[0] = v58.f32[0] / (float)v56;
  *a9 = v58.f32[0];
  if (v44 == a5) {
    goto LABEL_59;
  }
  unint64_t v67 = a1[596];
  if (v46 <= 1) {
    unint64_t v46 = 1;
  }
  if (v46 <= 7 || v67 < (unint64_t)(a9 + 1) && v67 + 4 * v46 > (unint64_t)a9)
  {
    unint64_t v68 = 0;
LABEL_57:
    unint64_t v69 = v46 - v68;
    float v70 = (float *)(v67 + 4 * v68);
    do
    {
      *float v70 = fmaxf(*v70 - *a9, 0.0);
      ++v70;
      --v69;
    }
    while (v69);
    goto LABEL_59;
  }
  unint64_t v68 = v46 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v228 = (float32x4_t)vdupq_lane_s32((int32x2_t)v58, 0);
  float v229 = (float32x4_t *)(v67 + 16);
  unint64_t v230 = v46 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v231 = vmaxnmq_f32(vsubq_f32(*v229, v228), (float32x4_t)0);
    v229[-1] = vmaxnmq_f32(vsubq_f32(v229[-1], v228), (float32x4_t)0);
    *float v229 = v231;
    v229 += 2;
    v230 -= 8;
  }
  while (v230);
  if (v46 != v68) {
    goto LABEL_57;
  }
LABEL_59:
  unint64_t v71 = a4;
  if (a4)
  {
    float v72 = (char *)a1 + 324;
    uint64_t v73 = a4;
    do
    {
      bzero(v72, 4 * a7);
      v72 += 244;
      --v73;
    }
    while (v73);
  }
  if (*a10 <= 1) {
    unint64_t v74 = 1;
  }
  else {
    unint64_t v74 = *a10;
  }
  if ((unint64_t)a4 <= 1) {
    unint64_t v75 = 1;
  }
  else {
    unint64_t v75 = a4;
  }
  if (a4 < 2)
  {
LABEL_122:
    unint64_t v75 = 1;
    return v75 < v71;
  }
  if (a7)
  {
    if (*a10 == 45)
    {
      float32x4_t v76 = (float32x4_t *)a1[596];
      unint64_t v77 = v74 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v232 = a4;
      uint64_t v233 = a1[3917];
      uint64_t v78 = a1[3911];
      uint64_t v79 = a1[3920];
      unint64_t v80 = v74 & 0xFFFFFFFFFFFFFFF8 | 1;
      unint64_t v81 = v74 & 0xFFFFFFFFFFFFFFF8 | 2;
      unint64_t v82 = v74 & 0xFFFFFFFFFFFFFFF8 | 3;
      unint64_t v83 = v74 & 0xFFFFFFFFFFFFFFF8 | 4;
      float v84 = (float *)(a1 + 71);
      uint64_t v85 = (float *)(a1 + 285);
      uint64_t v86 = a1[3914];
      uint64_t v87 = (32 * (v74 >> 3)) | 8;
      uint64_t v88 = 11008 * a6;
      uint64_t v89 = (a6 << 9) | 4;
      uint64_t v90 = 1;
      do
      {
        uint64_t v91 = *(void *)(v78 + 24 * v90);
        uint64_t v92 = *(void *)(v79 + 24 * v90);
        uint64_t v93 = *(void *)(v86 + 24 * v90);
        if (a8)
        {
          uint64_t v94 = 0;
          uint64_t v95 = 0;
          uint64_t v96 = v92 + v89;
          uint64_t v97 = v93 + v87;
          uint64_t v98 = v91 + v87;
          uint64_t v99 = v91 + 144;
          uint64_t v100 = v93 + 144;
          do
          {
            uint64_t v102 = v99 + v88;
            float32x4_t v104 = *(float32x4_t *)(v99 + v88 - 144);
            float32x4_t v103 = *(float32x4_t *)(v99 + v88 - 128);
            float32x4_t v105 = v76[1];
            float32x4_t v106 = vmulq_f32(*v76, v104);
            float32x4_t v107 = vmulq_f32(v105, v103);
            uint64_t v108 = v100 + v88;
            float32x4_t v109 = *(float32x4_t *)(v100 + v88 - 144);
            float32x4_t v110 = *(float32x4_t *)(v100 + v88 - 128);
            float32x4_t v111 = vmulq_f32(v109, *v76);
            float32x4_t v112 = vmulq_f32(v110, v105);
            if (v77 != 8)
            {
              float32x4_t v113 = v76[2];
              float32x4_t v114 = v76[3];
              float32x4_t v106 = vmlaq_f32(v106, *(float32x4_t *)(v102 - 112), v113);
              float32x4_t v107 = vmlaq_f32(v107, *(float32x4_t *)(v102 - 96), v114);
              float32x4_t v111 = vmlaq_f32(v111, v113, *(float32x4_t *)(v108 - 112));
              float32x4_t v112 = vmlaq_f32(v112, v114, *(float32x4_t *)(v108 - 96));
              if (v77 != 16)
              {
                uint64_t v115 = v99 + v88;
                float32x4_t v116 = v76[4];
                float32x4_t v117 = v76[5];
                float32x4_t v106 = vmlaq_f32(v106, *(float32x4_t *)(v99 + v88 - 80), v116);
                float32x4_t v107 = vmlaq_f32(v107, *(float32x4_t *)(v99 + v88 - 64), v117);
                uint64_t v118 = v100 + v88;
                float32x4_t v111 = vmlaq_f32(v111, v116, *(float32x4_t *)(v100 + v88 - 80));
                float32x4_t v112 = vmlaq_f32(v112, v117, *(float32x4_t *)(v100 + v88 - 64));
                if (v77 != 24)
                {
                  float32x4_t v119 = v76[6];
                  float32x4_t v120 = v76[7];
                  float32x4_t v106 = vmlaq_f32(v106, *(float32x4_t *)(v115 - 48), v119);
                  float32x4_t v107 = vmlaq_f32(v107, *(float32x4_t *)(v115 - 32), v120);
                  float32x4_t v111 = vmlaq_f32(v111, v119, *(float32x4_t *)(v118 - 48));
                  float32x4_t v112 = vmlaq_f32(v112, v120, *(float32x4_t *)(v118 - 32));
                  if (v77 != 32)
                  {
                    float32x4_t v121 = v76[8];
                    float32x4_t v122 = v76[9];
                    float32x4_t v106 = vmlaq_f32(v106, *(float32x4_t *)(v99 + v88 - 16), v121);
                    float32x4_t v107 = vmlaq_f32(v107, *(float32x4_t *)(v99 + v88), v122);
                    float32x4_t v111 = vmlaq_f32(v111, v121, *(float32x4_t *)(v100 + v88 - 16));
                    float32x4_t v112 = vmlaq_f32(v112, v122, *(float32x4_t *)(v100 + v88));
                  }
                }
              }
            }
            float32x4_t v123 = vaddq_f32(v107, v106);
            float v124 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v123, v123));
            float32x4_t v125 = vaddq_f32(v112, v111);
            float v126 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v125, v125));
            if (v74 != v77)
            {
              float v127 = v76->f32[v77];
              float v124 = v124 + (float)(v127 * *(float *)(v98 + v88 - 8));
              float v126 = v126 + (float)(*(float *)(v97 + v88 - 8) * v127);
              if (v80 != v74)
              {
                float v128 = v76->f32[v80];
                float v124 = v124 + (float)(v128 * *(float *)(v98 + v88 - 4));
                float v126 = v126 + (float)(*(float *)(v97 + v88 - 4) * v128);
                if (v81 != v74)
                {
                  float v129 = v76->f32[v81];
                  float v124 = v124 + (float)(v129 * *(float *)(v98 + v88));
                  float v126 = v126 + (float)(*(float *)(v97 + v88) * v129);
                  if (v82 != v74)
                  {
                    float v130 = v76->f32[v82];
                    float v124 = v124 + (float)(v130 * *(float *)(v98 + v88 + 4));
                    float v126 = v126 + (float)(*(float *)(v97 + v88 + 4) * v130);
                    if (v83 != v74)
                    {
                      float v131 = v76->f32[v83];
                      float v124 = v124 + (float)(v131 * *(float *)(v98 + v88 + 8));
                      float v126 = v126 + (float)(*(float *)(v97 + v88 + 8) * v131);
                    }
                  }
                }
              }
            }
            float v132 = (float)(*(float *)(v96 + v94 * 4 - 4) * v124) + (float)(*(float *)(v96 + v94 * 4) * v126);
            float32x4_t v133 = vmlaq_f32(vmulq_n_f32(v110, v132), (float32x4_t)0, v103);
            float32x4_t v134 = vsubq_f32(*v76, vmlaq_f32(vmulq_n_f32(v109, v132), (float32x4_t)0, v104));
            float32x4_t v135 = vsubq_f32(v105, v133);
            float32x4_t v136 = vmulq_f32(v134, v134);
            float32x4_t v137 = vmulq_f32(v135, v135);
            if (v77 != 8)
            {
              uint64_t v138 = v99 + v88;
              uint64_t v139 = v100 + v88;
              float32x4_t v140 = vsubq_f32(v76[2], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v100 + v88 - 112), v132), (float32x4_t)0, *(float32x4_t *)(v99 + v88 - 112)));
              float32x4_t v141 = vsubq_f32(v76[3], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v100 + v88 - 96), v132), (float32x4_t)0, *(float32x4_t *)(v99 + v88 - 96)));
              float32x4_t v136 = vmlaq_f32(v136, v140, v140);
              float32x4_t v137 = vmlaq_f32(v137, v141, v141);
              if (v77 != 16)
              {
                float32x4_t v142 = vsubq_f32(v76[4], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v139 - 80), v132), (float32x4_t)0, *(float32x4_t *)(v138 - 80)));
                float32x4_t v143 = vsubq_f32(v76[5], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v139 - 64), v132), (float32x4_t)0, *(float32x4_t *)(v138 - 64)));
                float32x4_t v136 = vmlaq_f32(v136, v142, v142);
                float32x4_t v137 = vmlaq_f32(v137, v143, v143);
                if (v77 != 24)
                {
                  uint64_t v144 = (float32x4_t *)(v99 + v88);
                  unint64_t v145 = (float32x4_t *)(v100 + v88);
                  float32x4_t v146 = vsubq_f32(v76[6], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v100 + v88 - 48), v132), (float32x4_t)0, *(float32x4_t *)(v99 + v88 - 48)));
                  float32x4_t v147 = vsubq_f32(v76[7], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v100 + v88 - 32), v132), (float32x4_t)0, *(float32x4_t *)(v99 + v88 - 32)));
                  float32x4_t v136 = vmlaq_f32(v136, v146, v146);
                  float32x4_t v137 = vmlaq_f32(v137, v147, v147);
                  if (v77 != 32)
                  {
                    float32x4_t v148 = vsubq_f32(v76[8], vmlaq_f32(vmulq_n_f32(v145[-1], v132), (float32x4_t)0, v144[-1]));
                    float32x4_t v149 = vsubq_f32(v76[9], vmlaq_f32(vmulq_n_f32(*v145, v132), (float32x4_t)0, *v144));
                    float32x4_t v136 = vmlaq_f32(v136, v148, v148);
                    float32x4_t v137 = vmlaq_f32(v137, v149, v149);
                  }
                }
              }
            }
            float32x4_t v150 = vaddq_f32(v137, v136);
            float v151 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v150, v150));
            if (v74 != v77)
            {
              float v152 = v76->f32[v77] - (float)(*(float *)(v97 + v88 - 8) * v132);
              float v151 = v151 + (float)(v152 * v152);
              if (v80 != v74)
              {
                float v153 = v76->f32[v80] - (float)(*(float *)(v97 + v88 - 4) * v132);
                float v151 = v151 + (float)(v153 * v153);
                if (v81 != v74)
                {
                  float v154 = v76->f32[v81] - (float)(*(float *)(v97 + v88) * v132);
                  float v151 = v151 + (float)(v154 * v154);
                  if (v82 != v74)
                  {
                    float v155 = v76->f32[v82] - (float)(*(float *)(v97 + v88 + 4) * v132);
                    float v151 = v151 + (float)(v155 * v155);
                    if (v83 != v74)
                    {
                      float v156 = v76->f32[v83] - (float)(*(float *)(v97 + v88 + 8) * v132);
                      float v151 = v151 + (float)(v156 * v156);
                    }
                  }
                }
              }
            }
            v84[v95] = v151;
            unint64_t v101 = &v85[v94];
            *(v101 - 1) = 0.0;
            ++v95;
            v94 += 2;
            v97 += 180;
            *unint64_t v101 = v132;
            v98 += 180;
            v99 += 180;
            v100 += 180;
          }
          while (a7 != v95);
        }
        else
        {
          uint64_t v157 = (float *)(*(void *)(v233 + 24 * v90) + v89);
          uint64_t v158 = (float *)(v92 + v89);
          uint64_t v159 = v93 + v87;
          uint64_t v160 = v91 + v87;
          uint64_t v161 = v91 + 144;
          uint64_t v162 = v93 + 144;
          uint64_t v163 = a7;
          uint64_t v164 = v85;
          unint64_t v165 = v84;
          do
          {
            uint64_t v166 = v161 + v88;
            float32x4_t v168 = *(float32x4_t *)(v161 + v88 - 144);
            float32x4_t v167 = *(float32x4_t *)(v161 + v88 - 128);
            float32x4_t v169 = v76[1];
            float32x4_t v170 = vmulq_f32(*v76, v168);
            float32x4_t v171 = vmulq_f32(v169, v167);
            uint64_t v172 = v162 + v88;
            float32x4_t v173 = *(float32x4_t *)(v162 + v88 - 144);
            float32x4_t v174 = *(float32x4_t *)(v162 + v88 - 128);
            float32x4_t v175 = vmulq_f32(v173, *v76);
            float32x4_t v176 = vmulq_f32(v174, v169);
            if (v77 != 8)
            {
              float32x4_t v177 = v76[2];
              float32x4_t v178 = v76[3];
              float32x4_t v170 = vmlaq_f32(v170, *(float32x4_t *)(v166 - 112), v177);
              float32x4_t v171 = vmlaq_f32(v171, *(float32x4_t *)(v166 - 96), v178);
              float32x4_t v175 = vmlaq_f32(v175, v177, *(float32x4_t *)(v172 - 112));
              float32x4_t v176 = vmlaq_f32(v176, v178, *(float32x4_t *)(v172 - 96));
              if (v77 != 16)
              {
                uint64_t v179 = v161 + v88;
                float32x4_t v180 = v76[4];
                float32x4_t v181 = v76[5];
                float32x4_t v170 = vmlaq_f32(v170, *(float32x4_t *)(v161 + v88 - 80), v180);
                float32x4_t v171 = vmlaq_f32(v171, *(float32x4_t *)(v161 + v88 - 64), v181);
                uint64_t v182 = v162 + v88;
                float32x4_t v175 = vmlaq_f32(v175, v180, *(float32x4_t *)(v162 + v88 - 80));
                float32x4_t v176 = vmlaq_f32(v176, v181, *(float32x4_t *)(v162 + v88 - 64));
                if (v77 != 24)
                {
                  float32x4_t v183 = v76[6];
                  float32x4_t v184 = v76[7];
                  float32x4_t v170 = vmlaq_f32(v170, *(float32x4_t *)(v179 - 48), v183);
                  float32x4_t v171 = vmlaq_f32(v171, *(float32x4_t *)(v179 - 32), v184);
                  float32x4_t v175 = vmlaq_f32(v175, v183, *(float32x4_t *)(v182 - 48));
                  float32x4_t v176 = vmlaq_f32(v176, v184, *(float32x4_t *)(v182 - 32));
                  if (v77 != 32)
                  {
                    float32x4_t v185 = v76[8];
                    float32x4_t v186 = v76[9];
                    float32x4_t v170 = vmlaq_f32(v170, *(float32x4_t *)(v161 + v88 - 16), v185);
                    float32x4_t v171 = vmlaq_f32(v171, *(float32x4_t *)(v161 + v88), v186);
                    float32x4_t v175 = vmlaq_f32(v175, v185, *(float32x4_t *)(v162 + v88 - 16));
                    float32x4_t v176 = vmlaq_f32(v176, v186, *(float32x4_t *)(v162 + v88));
                  }
                }
              }
            }
            float32x4_t v187 = vaddq_f32(v171, v170);
            float v188 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v187, v187));
            float32x4_t v189 = vaddq_f32(v176, v175);
            float32x2_t v190 = (float32x2_t)vpaddq_f32(v189, v189).u64[0];
            float v191 = vaddv_f32(v190);
            if (v74 != v77)
            {
              float v192 = v76->f32[v77];
              float v188 = v188 + (float)(v192 * *(float *)(v160 + v88 - 8));
              float v191 = v191 + (float)(*(float *)(v159 + v88 - 8) * v192);
              if (v80 != v74)
              {
                float v193 = v76->f32[v80];
                float v188 = v188 + (float)(v193 * *(float *)(v160 + v88 - 4));
                float v191 = v191 + (float)(*(float *)(v159 + v88 - 4) * v193);
                if (v81 != v74)
                {
                  float v194 = v76->f32[v81];
                  float v188 = v188 + (float)(v194 * *(float *)(v160 + v88));
                  float v191 = v191 + (float)(*(float *)(v159 + v88) * v194);
                  if (v82 != v74)
                  {
                    float v195 = v76->f32[v82];
                    float v188 = v188 + (float)(v195 * *(float *)(v160 + v88 + 4));
                    float v191 = v191 + (float)(*(float *)(v159 + v88 + 4) * v195);
                    if (v83 != v74)
                    {
                      float v196 = v76->f32[v83];
                      float v188 = v188 + (float)(v196 * *(float *)(v160 + v88 + 8));
                      float v191 = v191 + (float)(*(float *)(v159 + v88 + 8) * v196);
                    }
                  }
                }
              }
            }
            v190.f32[0] = (float)(*(v157 - 1) * v188) + (float)(*v157 * v191);
            float v197 = (float)(*(v158 - 1) * v188) + (float)(*v158 * v191);
            float32x4_t v198 = vmlaq_n_f32(vmulq_n_f32(v174, v197), v167, v190.f32[0]);
            float32x4_t v199 = vsubq_f32(*v76, vmlaq_n_f32(vmulq_n_f32(v173, v197), v168, v190.f32[0]));
            float32x4_t v200 = vsubq_f32(v169, v198);
            float32x4_t v201 = vmulq_f32(v199, v199);
            float32x4_t v202 = vmulq_f32(v200, v200);
            if (v77 != 8)
            {
              float32x4_t v203 = (float32x4_t)vdupq_lane_s32((int32x2_t)v190, 0);
              uint64_t v204 = v161 + v88;
              uint64_t v205 = v162 + v88;
              float32x4_t v206 = vsubq_f32(v76[2], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v162 + v88 - 112), v197), v203, *(float32x4_t *)(v161 + v88 - 112)));
              float32x4_t v207 = vsubq_f32(v76[3], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v162 + v88 - 96), v197), v203, *(float32x4_t *)(v161 + v88 - 96)));
              float32x4_t v201 = vmlaq_f32(v201, v206, v206);
              float32x4_t v202 = vmlaq_f32(v202, v207, v207);
              if (v77 != 16)
              {
                float32x4_t v208 = vsubq_f32(v76[4], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v205 - 80), v197), v203, *(float32x4_t *)(v204 - 80)));
                float32x4_t v209 = vsubq_f32(v76[5], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v205 - 64), v197), v203, *(float32x4_t *)(v204 - 64)));
                float32x4_t v201 = vmlaq_f32(v201, v208, v208);
                float32x4_t v202 = vmlaq_f32(v202, v209, v209);
                if (v77 != 24)
                {
                  uint64_t v210 = (float32x4_t *)(v161 + v88);
                  int v211 = (float32x4_t *)(v162 + v88);
                  float32x4_t v212 = vsubq_f32(v76[6], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v162 + v88 - 48), v197), v203, *(float32x4_t *)(v161 + v88 - 48)));
                  float32x4_t v213 = vsubq_f32(v76[7], vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v162 + v88 - 32), v197), v203, *(float32x4_t *)(v161 + v88 - 32)));
                  float32x4_t v201 = vmlaq_f32(v201, v212, v212);
                  float32x4_t v202 = vmlaq_f32(v202, v213, v213);
                  if (v77 != 32)
                  {
                    float32x4_t v214 = vmlaq_f32(vmulq_n_f32(*v211, v197), v203, *v210);
                    float32x4_t v215 = vsubq_f32(v76[8], vmlaq_f32(vmulq_n_f32(v211[-1], v197), v203, v210[-1]));
                    float32x4_t v216 = vsubq_f32(v76[9], v214);
                    float32x4_t v201 = vmlaq_f32(v201, v215, v215);
                    float32x4_t v202 = vmlaq_f32(v202, v216, v216);
                  }
                }
              }
            }
            float32x4_t v217 = vaddq_f32(v202, v201);
            float v218 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v217, v217));
            if (v74 != v77)
            {
              float v219 = v76->f32[v77]
                   - (float)((float)(*(float *)(v159 + v88 - 8) * v197)
                           + (float)(*(float *)(v160 + v88 - 8) * v190.f32[0]));
              float v218 = v218 + (float)(v219 * v219);
              if (v80 != v74)
              {
                float v220 = v76->f32[v80]
                     - (float)((float)(*(float *)(v159 + v88 - 4) * v197)
                             + (float)(*(float *)(v160 + v88 - 4) * v190.f32[0]));
                float v218 = v218 + (float)(v220 * v220);
                if (v81 != v74)
                {
                  float v221 = v76->f32[v81]
                       - (float)((float)(*(float *)(v159 + v88) * v197) + (float)(*(float *)(v160 + v88) * v190.f32[0]));
                  float v218 = v218 + (float)(v221 * v221);
                  if (v82 != v74)
                  {
                    float v222 = v76->f32[v82]
                         - (float)((float)(*(float *)(v159 + v88 + 4) * v197)
                                 + (float)(*(float *)(v160 + v88 + 4) * v190.f32[0]));
                    float v218 = v218 + (float)(v222 * v222);
                    if (v83 != v74)
                    {
                      float v223 = v76->f32[v83]
                           - (float)((float)(*(float *)(v159 + v88 + 8) * v197)
                                   + (float)(*(float *)(v160 + v88 + 8) * v190.f32[0]));
                      float v218 = v218 + (float)(v223 * v223);
                    }
                  }
                }
              }
            }
            *v165++ = v218;
            *(v164 - 1) = v190.f32[0];
            *uint64_t v164 = v197;
            v157 += 2;
            v158 += 2;
            v164 += 2;
            v159 += 180;
            v160 += 180;
            v161 += 180;
            v162 += 180;
            --v163;
          }
          while (v163);
        }
        ++v90;
        v84 += 61;
        v85 += 122;
      }
      while (v90 != v75);
      unint64_t v71 = v232;
      return v75 < v71;
    }
    goto LABEL_122;
  }
  return v75 < v71;
}

CFMutableDataRef PDPeridotCalibCreateWithBinaryRepresentation(const __CFData *a1)
{
  if (!a1 || CFDataGetLength(a1) != 402528 || *(_DWORD *)CFDataGetBytePtr(a1) != 9) {
    return 0;
  }
  CFAllocatorRef v2 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  return CFDataCreateMutableCopy(v2, 402528, a1);
}

uint64_t peridot::HDUnfoldClass::configure(peridot::HDUnfoldClass *this, const peridot::PeridotDXPCalib *a2)
{
  *((_DWORD *)this + 14) = 1085276160;
  *((unsigned char *)this + 72) = 2;
  *((_DWORD *)this + 19) = 1058638150;
  *((_WORD *)this + 40) = 10;
  *((void *)this + 8) = 15;
  *((void *)this + 6) = 600;
  *((void *)this + 47) = 8;
  *((_DWORD *)this + 21) = 0x40000000;
  double v2 = *((float *)a2 + 856);
  double v3 = round(0.000000153484441 / v2);
  if (v3 < 65535.0)
  {
    double v4 = round(0.000000186850624 / v2);
    if (v4 < 65535.0)
    {
      *((_WORD *)this + 21) = (int)v3;
      *((_WORD *)this + 20) = (int)v4;
      operator new[]();
    }
  }
  peridot_depth_log("Wrong input in LSB configuration");
  return 4;
}

void sub_2590069F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  Matrix<unsigned long>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259006A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  if (v10)
  {
    operator delete(v10);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t peridot::PeridotDXPBaselineRemoval::process(peridot::PeridotDXPBaselineRemoval *this, peridot::PeridotPreProcessOutput::PreProcessorOutSpot *a2, uint64_t a3, float a4)
{
  uint64_t result = peridot::PeridotDXPBaselineRemoval::baselineRemoval((uint64_t)this, (uint64_t)a2 + 200, a3, a4);
  if (!result)
  {
    if (!*((unsigned char *)this + 748)
      || (uint64_t result = peridot::PeridotDXPBaselineRemoval::baselineRemoval(result, (uint64_t)a2 + 400, v7, v8),
          !result))
    {
      uint64_t result = peridot::PeridotDXPBaselineRemoval::baselineRemoval(result, (uint64_t)a2, v7, v8);
      if (!result)
      {
        cConv(*(const float **)(**((void **)a2 + 40) + 8), *(void *)(**((void **)a2 + 40) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, **((void **)this + 90) - 1, *(float **)(**((void **)a2 + 46) + 8));
        if (*((unsigned char *)this + 748)) {
          cConv(*(const float **)(**((void **)a2 + 65) + 8), *(void *)(**((void **)a2 + 65) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, **((void **)this + 90) - 1, *(float **)(**((void **)a2 + 71) + 8));
        }
        conv<float,float const>(*(void *)(**((void **)a2 + 15) + 8), *(void *)(**((void **)a2 + 15) + 16), *((float **)this + 110), (uint64_t)(*((void *)this + 111) - *((void *)this + 110)) >> 2, *(float **)(**((void **)a2 + 21) + 8), 2);
        cConv(*(const float **)(*(void *)(*((void *)a2 + 40) + 8) + 8), *(void *)(*(void *)(*((void *)a2 + 40) + 8) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, *(void *)(*((void *)this + 90) + 8) - 1, *(float **)(*(void *)(*((void *)a2 + 46) + 8) + 8));
        if (*((unsigned char *)this + 748)) {
          cConv(*(const float **)(*(void *)(*((void *)a2 + 65) + 8) + 8), *(void *)(*(void *)(*((void *)a2 + 65) + 8) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, *(void *)(*((void *)this + 90) + 8) - 1, *(float **)(*(void *)(*((void *)a2 + 71) + 8) + 8));
        }
        conv<float,float const>(*(void *)(*(void *)(*((void *)a2 + 15) + 8) + 8), *(void *)(*(void *)(*((void *)a2 + 15) + 8) + 16), *((float **)this + 110), (uint64_t)(*((void *)this + 111) - *((void *)this + 110)) >> 2, *(float **)(*(void *)(*((void *)a2 + 21) + 8) + 8), 2);
        cConv(*(const float **)(*(void *)(*((void *)a2 + 40) + 16) + 8), *(void *)(*(void *)(*((void *)a2 + 40) + 16) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, *(void *)(*((void *)this + 90) + 16) - 1, *(float **)(*(void *)(*((void *)a2 + 46) + 16) + 8));
        if (*((unsigned char *)this + 748)) {
          cConv(*(const float **)(*(void *)(*((void *)a2 + 65) + 16) + 8), *(void *)(*(void *)(*((void *)a2 + 65) + 16) + 16), *((const float **)this + 107), (uint64_t)(*((void *)this + 108) - *((void *)this + 107)) >> 2, *(void *)(*((void *)this + 90) + 16) - 1, *(float **)(*(void *)(*((void *)a2 + 71) + 16) + 8));
        }
        conv<float,float const>(*(void *)(*(void *)(*((void *)a2 + 15) + 16) + 8), *(void *)(*(void *)(*((void *)a2 + 15) + 16) + 16), *((float **)this + 110), (uint64_t)(*((void *)this + 111) - *((void *)this + 110)) >> 2, *(float **)(*(void *)(*((void *)a2 + 21) + 16) + 8), 2);
        return 0;
      }
    }
  }
  return result;
}

void conv<float,float const>(uint64_t a1, uint64_t a2, float *a3, vDSP_Length a4, float *a5, int a6)
{
  if (a4 <= 3) {
    __assert_rtn("conv", "MatlabUtils.cpp", 30, "coeffLen>=4");
  }
  float v10 = (const void *)a1;
  switch(a6)
  {
    case 0:
      unint64_t v11 = a2 - a4 + 1;
      if (v11 < a4) {
        uint64_t v12 = a2 - a4 + 1;
      }
      else {
        uint64_t v12 = a4;
      }
      if (v12)
      {
        if (a4 > 7)
        {
          if (a4 == (a4 & 0xFFFFFFFFFFFFFFF8))
          {
            uint64_t v53 = 0;
            float v54 = (float32x4_t *)(a1 + 16);
            do
            {
              float32x4_t v55 = 0uLL;
              unint64_t v56 = v54;
              unint64_t v57 = (int32x4_t *)&a3[a4 - 4];
              vDSP_Length v58 = a4;
              float32x4_t v59 = 0uLL;
              do
              {
                int8x16_t v60 = (int8x16_t)vrev64q_s32(*v57);
                int8x16_t v61 = (int8x16_t)vrev64q_s32(v57[-1]);
                float32x4_t v55 = vmlaq_f32(v55, v56[-1], (float32x4_t)vextq_s8(v60, v60, 8uLL));
                float32x4_t v59 = vmlaq_f32(v59, *v56, (float32x4_t)vextq_s8(v61, v61, 8uLL));
                v57 -= 2;
                v56 += 2;
                v58 -= 8;
              }
              while (v58);
              float32x4_t v62 = vaddq_f32(v59, v55);
              a5[v53++] = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v62, v62));
              float v54 = (float32x4_t *)((char *)v54 + 4);
            }
            while (v53 != v12);
          }
          else
          {
            uint64_t v63 = 0;
            unint64_t v64 = (float32x4_t *)(a1 + 16);
            float v65 = (float *)(a1 + ((4 * a4) & 0xFFFFFFFFFFFFFFE0));
            do
            {
              float32x4_t v66 = 0uLL;
              unint64_t v67 = v64;
              unint64_t v68 = (int32x4_t *)&a3[a4 - 4];
              unint64_t v69 = a4 & 0xFFFFFFFFFFFFFFF8;
              float32x4_t v70 = 0uLL;
              do
              {
                int8x16_t v71 = (int8x16_t)vrev64q_s32(*v68);
                int8x16_t v72 = (int8x16_t)vrev64q_s32(v68[-1]);
                float32x4_t v66 = vmlaq_f32(v66, v67[-1], (float32x4_t)vextq_s8(v71, v71, 8uLL));
                float32x4_t v70 = vmlaq_f32(v70, *v67, (float32x4_t)vextq_s8(v72, v72, 8uLL));
                v68 -= 2;
                v67 += 2;
                v69 -= 8;
              }
              while (v69);
              float32x4_t v73 = vaddq_f32(v70, v66);
              float v74 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v73, v73));
              unint64_t v75 = v65;
              vDSP_Length v76 = a4 - (a4 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                float v77 = *v75++;
                float v74 = v74 + (float)(a3[--v76] * v77);
              }
              while (v76);
              a5[v63++] = v74;
              unint64_t v64 = (float32x4_t *)((char *)v64 + 4);
              ++v65;
            }
            while (v63 != v12);
          }
        }
        else
        {
          float v13 = &a3[a4];
          int32x4_t v15 = *(int32x4_t *)(v13 - 4);
          uint64_t v14 = (int32x4_t *)(v13 - 4);
          int8x16_t v16 = (int8x16_t)vrev64q_s32(v15);
          float32x4_t v17 = vmulq_f32((float32x4_t)vextq_s8(v16, v16, 8uLL), *(float32x4_t *)a1);
          float v18 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v17, v17));
          if (a4 != 4)
          {
            float v18 = v18 + (float)(a3[a4 - 5] * *(float *)(a1 + 16));
            if (a4 != 5)
            {
              float v18 = v18 + (float)(a3[a4 - 6] * *(float *)(a1 + 20));
              if (a4 != 6) {
                float v18 = v18 + (float)(*a3 * *(float *)(a1 + 24));
              }
            }
          }
          *a5 = v18;
          if (v12 != 1)
          {
            int8x16_t v19 = (int8x16_t)vrev64q_s32(*v14);
            float32x4_t v20 = vmulq_f32((float32x4_t)vextq_s8(v19, v19, 8uLL), *(float32x4_t *)(a1 + 4));
            float v21 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v20, v20));
            if (a4 != 4)
            {
              BOOL v22 = &a3[a4];
              float v21 = v21 + (float)(*(v22 - 5) * *(float *)(a1 + 20));
              if (a4 != 5)
              {
                float v21 = v21 + (float)(*(v22 - 6) * *(float *)(a1 + 24));
                if (a4 != 6) {
                  float v21 = v21 + (float)(*a3 * *(float *)(a1 + 28));
                }
              }
            }
            a5[1] = v21;
            if (v12 != 2)
            {
              int8x16_t v23 = (int8x16_t)vrev64q_s32(*v14);
              float32x4_t v24 = vmulq_f32((float32x4_t)vextq_s8(v23, v23, 8uLL), *(float32x4_t *)(a1 + 8));
              float v25 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v24, v24));
              if (a4 != 4)
              {
                float32x4_t v26 = &a3[a4];
                float v25 = v25 + (float)(*(v26 - 5) * *(float *)(a1 + 24));
                if (a4 != 5)
                {
                  float v25 = v25 + (float)(*(v26 - 6) * *(float *)(a1 + 28));
                  if (a4 != 6) {
                    float v25 = v25 + (float)(*a3 * *(float *)(a1 + 32));
                  }
                }
              }
              a5[2] = v25;
              if (v12 != 3)
              {
                int8x16_t v27 = (int8x16_t)vrev64q_s32(*v14);
                float32x4_t v28 = vmulq_f32((float32x4_t)vextq_s8(v27, v27, 8uLL), *(float32x4_t *)(a1 + 12));
                float v29 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v28, v28));
                if (a4 != 4)
                {
                  float v30 = &a3[a4];
                  float v29 = v29 + (float)(*(v30 - 5) * *(float *)(a1 + 28));
                  if (a4 != 5)
                  {
                    float v29 = v29 + (float)(*(v30 - 6) * *(float *)(a1 + 32));
                    if (a4 != 6) {
                      float v29 = v29 + (float)(*a3 * *(float *)(a1 + 36));
                    }
                  }
                }
                a5[3] = v29;
                if (v12 != 4)
                {
                  int8x16_t v31 = (int8x16_t)vrev64q_s32(*v14);
                  float32x4_t v32 = vmulq_f32((float32x4_t)vextq_s8(v31, v31, 8uLL), *(float32x4_t *)(a1 + 16));
                  float v33 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32));
                  if (a4 != 4)
                  {
                    uint64_t v34 = &a3[a4];
                    float v33 = v33 + (float)(*(v34 - 5) * *(float *)(a1 + 32));
                    if (a4 != 5)
                    {
                      float v33 = v33 + (float)(*(v34 - 6) * *(float *)(a1 + 36));
                      if (a4 != 6) {
                        float v33 = v33 + (float)(*a3 * *(float *)(a1 + 40));
                      }
                    }
                  }
                  a5[4] = v33;
                  if (v12 != 5)
                  {
                    int8x16_t v35 = (int8x16_t)vrev64q_s32(*v14);
                    float32x4_t v36 = vmulq_f32((float32x4_t)vextq_s8(v35, v35, 8uLL), *(float32x4_t *)(a1 + 20));
                    float v37 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v36, v36));
                    if (a4 != 4)
                    {
                      long long v38 = &a3[a4];
                      float v37 = v37 + (float)(*(v38 - 5) * *(float *)(a1 + 36));
                      if (a4 != 5)
                      {
                        float v37 = v37 + (float)(*(v38 - 6) * *(float *)(a1 + 40));
                        if (a4 != 6) {
                          float v37 = v37 + (float)(*a3 * *(float *)(a1 + 44));
                        }
                      }
                    }
                    a5[5] = v37;
                    if (v12 != 6)
                    {
                      int8x16_t v39 = (int8x16_t)vrev64q_s32(*v14);
                      float32x4_t v40 = vmulq_f32((float32x4_t)vextq_s8(v39, v39, 8uLL), *(float32x4_t *)(a1 + 24));
                      float v41 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v40, v40));
                      if (a4 != 4)
                      {
                        float v42 = &a3[a4];
                        float v41 = v41 + (float)(*(v42 - 5) * *(float *)(a1 + 40));
                        if (a4 != 5)
                        {
                          float v41 = v41 + (float)(*(v42 - 6) * *(float *)(a1 + 44));
                          if (a4 != 6) {
                            float v41 = v41 + (float)(*a3 * *(float *)(a1 + 48));
                          }
                        }
                      }
                      a5[6] = v41;
                    }
                  }
                }
              }
            }
          }
        }
      }
      vDSP_Length v48 = v11 - a4;
      if (v11 <= a4) {
        return;
      }
      a1 = (uint64_t)v10 + 4 * a4;
      unint64_t v46 = &a3[a4 - 1];
      uint64_t v47 = &a5[a4];
      break;
    case 1:
      if (a4 + a2 - 1 <= 0x1F) {
        __assert_rtn("conv", "MatlabUtils.cpp", 57, "(arrLen+coeffLen-1)>=32");
      }
      {
        conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr = 0;
        unk_26B2F3060 = 0;
        qword_26B2F3068 = 0;
      }
      unint64_t v43 = a2 + 2 * a4 - 2;
      unint64_t v44 = (void *)conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      unint64_t v45 = (unk_26B2F3060
           - conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr) >> 2;
      if (v43 > v45)
      {
        std::vector<float>::__append((uint64_t)&conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr, v43 - v45);
        unint64_t v44 = (void *)conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      }
      bzero(v44, 4 * v43);
      memcpy((void *)(conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr+ 4 * a4- 4), v10, 4 * a2);
      a1 = conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      unint64_t v46 = &a3[a4 - 1];
      uint64_t v47 = a5;
      vDSP_Length v48 = a4 + a2 - 1;
      break;
    case 2:
      vDSP_Length v49 = a4 - 1;
      unint64_t v50 = a4 - 1 + a2;
      if (v50 <= 0x1F) {
        __assert_rtn("conv", "MatlabUtils.cpp", 69, "(arrLen+coeffLen-1)>=32");
      }
      {
        conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr = 0;
        unk_26B2F3080 = 0;
        qword_26B2F3088 = 0;
      }
      unint64_t v51 = (void *)conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      unint64_t v52 = (unk_26B2F3080
           - conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr) >> 2;
      if (v50 > v52)
      {
        std::vector<float>::__append((uint64_t)&conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr, v50 - v52);
        unint64_t v51 = (void *)conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      }
      bzero(v51, 4 * v50);
      memcpy((void *)(conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr+ 4 * (v49 >> 1)), v10, 4 * a2);
      a1 = conv<float,float const>(float const*,unsigned long,float const *,unsigned long,float*,ConvType)::paddedArr;
      unint64_t v46 = &a3[a4 - 1];
      goto LABEL_54;
    case 3:
      unint64_t v46 = &a3[a4 - 1];
LABEL_54:
      uint64_t v47 = a5;
      vDSP_Length v48 = a2;
      break;
    default:
      uint64_t v78 = std::operator<<[abi:ne180100]<std::char_traits<char>>();
      std::endl[abi:ne180100]<char,std::char_traits<char>>(v78);
      exit(-1);
  }
  vDSP_conv((const float *)a1, 1, v46, -1, v47, 1, v48, a4);
}

void cConv(const float *a1, vDSP_Length a2, const float *a3, vDSP_Length __P, uint64_t a5, float *a6)
{
  vDSP_Length v11 = __P - 1;
  unint64_t v12 = (unint64_t)(double)((__P - 1) >> 1);
  {
    cConv(float const*,unsigned long,float const*,unsigned long,unsigned long,float *)::paddedArr = 0;
    unk_26B2F30A0 = 0;
    qword_26B2F30A8 = 0;
  }
  unint64_t v13 = a5 + 1;
  unint64_t v14 = a5 + 1 + v12 + v12;
  uint64_t v15 = cConv(float const*,unsigned long,float const*,unsigned long,unsigned long,float *)::paddedArr;
  unint64_t v16 = (unk_26B2F30A0 - cConv(float const*,unsigned long,float const*,unsigned long,unsigned long,float *)::paddedArr) >> 2;
  if (v14 > v16)
  {
    std::vector<float>::__append((uint64_t)&cConv(float const*,unsigned long,float const*,unsigned long,unsigned long,float *)::paddedArr, v14 - v16);
    uint64_t v15 = cConv(float const*,unsigned long,float const*,unsigned long,unsigned long,float *)::paddedArr;
  }
  if (v12)
  {
    if (v12 <= 0xB || 4 * v12 - (unint64_t)&a1[a5] + v15 - 4 < 0x20)
    {
      unint64_t v17 = 0;
LABEL_8:
      unint64_t v18 = v12 - v17;
      int8x16_t v19 = (_DWORD *)(v15 + 4 * v17);
      float32x4_t v20 = &a1[v17 + a5 - v12 + 1];
      do
      {
        int v21 = *(_DWORD *)v20++;
        *v19++ = v21;
        --v18;
      }
      while (v18);
      goto LABEL_10;
    }
    unint64_t v17 = v12 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = (_OWORD *)(v15 + 16);
    unint64_t v51 = (long long *)((char *)a1 + 4 * a5 - 4 * v12 + 20);
    unint64_t v52 = v12 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      long long v53 = *v51;
      *(v50 - 1) = *(v51 - 1);
      *unint64_t v50 = v53;
      v50 += 2;
      v51 += 2;
      v52 -= 8;
    }
    while (v52);
    if (v17 != v12) {
      goto LABEL_8;
    }
  }
LABEL_10:
  if (a5 == -1) {
    goto LABEL_16;
  }
  if (v13 <= 7 || 4 * v12 + v15 - (unint64_t)a1 < 0x20)
  {
    unint64_t v22 = 0;
LABEL_14:
    uint64_t v23 = a5 - v22 + 1;
    float32x4_t v24 = (_DWORD *)(v15 + 4 * (v22 + v12));
    float v25 = &a1[v22];
    do
    {
      int v26 = *(_DWORD *)v25++;
      *v24++ = v26;
      --v23;
    }
    while (v23);
    goto LABEL_16;
  }
  unint64_t v22 = v13 & 0xFFFFFFFFFFFFFFF8;
  float v54 = (_OWORD *)(4 * v12 + v15 + 16);
  float32x4_t v55 = a1 + 4;
  unint64_t v56 = v13 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    long long v57 = *(_OWORD *)v55;
    *(v54 - 1) = *((_OWORD *)v55 - 1);
    _OWORD *v54 = v57;
    v54 += 2;
    v55 += 8;
    v56 -= 8;
  }
  while (v56);
  if (v13 != v22) {
    goto LABEL_14;
  }
LABEL_16:
  if (!v12) {
    goto LABEL_22;
  }
  if (v12 <= 0xB || (uint64_t v27 = 4 * (v12 + a5), (unint64_t)(v27 + v15 - (void)a1 + 4) < 0x20))
  {
    unint64_t v28 = 0;
LABEL_20:
    unint64_t v29 = v12 - v28;
    float v30 = (_DWORD *)(v15 + 4 * (v28 + v12 + a5) + 4);
    int8x16_t v31 = &a1[v28];
    do
    {
      int v32 = *(_DWORD *)v31++;
      *v30++ = v32;
      --v29;
    }
    while (v29);
    goto LABEL_22;
  }
  unint64_t v28 = v12 & 0xFFFFFFFFFFFFFFF8;
  vDSP_Length v58 = (_OWORD *)(v27 + v15 + 20);
  float32x4_t v59 = a1 + 4;
  unint64_t v60 = v12 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    long long v61 = *(_OWORD *)v59;
    *(v58 - 1) = *((_OWORD *)v59 - 1);
    _OWORD *v58 = v61;
    v58 += 2;
    v59 += 8;
    v60 -= 8;
  }
  while (v60);
  if (v28 != v12) {
    goto LABEL_20;
  }
LABEL_22:
  if (__P <= 3) {
    __assert_rtn("conv", "MatlabUtils.cpp", 30, "coeffLen>=4");
  }
  vDSP_Length v33 = v14 - __P + 1;
  if (v33 < __P) {
    vDSP_Length v34 = v14 - __P + 1;
  }
  else {
    vDSP_Length v34 = __P;
  }
  if (v34)
  {
    uint64_t v35 = 0;
    float32x4_t v36 = (float32x4_t *)(v15 + 16);
    do
    {
      if (__P >= 8)
      {
        float32x4_t v39 = 0uLL;
        float32x4_t v40 = v36;
        float v41 = (int32x4_t *)&a3[__P - 4];
        vDSP_Length v42 = __P & 0xFFFFFFFFFFFFFFF8;
        float32x4_t v43 = 0uLL;
        do
        {
          int8x16_t v44 = (int8x16_t)vrev64q_s32(*v41);
          int8x16_t v45 = (int8x16_t)vrev64q_s32(v41[-1]);
          float32x4_t v39 = vmlaq_f32(v39, v40[-1], (float32x4_t)vextq_s8(v44, v44, 8uLL));
          float32x4_t v43 = vmlaq_f32(v43, *v40, (float32x4_t)vextq_s8(v45, v45, 8uLL));
          v41 -= 2;
          v40 += 2;
          v42 -= 8;
        }
        while (v42);
        float32x4_t v46 = vaddq_f32(v43, v39);
        float v38 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v46, v46));
        vDSP_Length v37 = __P & 0xFFFFFFFFFFFFFFF8;
        if ((__P & 0xFFFFFFFFFFFFFFF8) == __P) {
          goto LABEL_28;
        }
      }
      else
      {
        vDSP_Length v37 = 0;
        float v38 = 0.0;
      }
      vDSP_Length v47 = __P - v37;
      vDSP_Length v48 = (float *)(v15 + 4 * (v37 + v35));
      do
      {
        float v49 = *v48++;
        float v38 = v38 + (float)(a3[--v47] * v49);
      }
      while (v47);
LABEL_28:
      a6[v35++] = v38;
      float32x4_t v36 = (float32x4_t *)((char *)v36 + 4);
    }
    while (v35 != v34);
  }
  if (v33 > __P) {
    vDSP_conv((const float *)(v15 + 4 * __P), 1, &a3[__P - 1], -1, &a6[__P], 1, v33 - __P, __P);
  }
  if (v14 - v11 < a2)
  {
    bzero((char *)a6 + 8 * v12 + 4 * a5 - 4 * __P + 8, 4 * (__P + a2 - (a5 + 2 * v12)) - 8);
  }
}

uint64_t peridot::PeridotDXPBaselineRemoval::baselineRemoval(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  MEMORY[0x270FA5388](a1, a2, a3, a4);
  v666[182] = *MEMORY[0x263EF8340];
  float v8 = (uint64_t *)*v4;
  if (v4[1] - *v4 != 24)
  {
    peridot_depth_log("PeridotDXPBaselineRemoval::baselineRemoval: wrong interlHist size");
    return 1;
  }
  float v9 = v7;
  unsigned int v10 = v6;
  vDSP_Length v11 = v5;
  unint64_t v12 = v4;
  uint64_t v13 = *v8;
  unint64_t v14 = *(void *)(*v8 + 16);
  vDSP_Length __P = v5[27];
  bzero(v663, 0x1140uLL);
  bzero(v657, 0x1140uLL);
  unint64_t v15 = v11[26];
  uint64_t v623 = v11[8];
  uint64_t v624 = v11[9];
  uint64_t v625 = v11[10];
  unint64_t v647 = (unint64_t)(float)v14;
  v649[182] = v647;
  v650[182] = v647;
  unint64_t v16 = v14 - 1;
  unint64_t v17 = v11[21];
  unint64_t v18 = v17 + 1;
  if (v17 + 1 < v14) {
    memset_pattern16(&v645[v17 + 1], &unk_259120E70, 4 * (v16 - v17));
  }
  uint64_t v19 = v11[22];
  if (v19 + 1 < v14) {
    memset_pattern16(&v648[4 * v19 + 4], &unk_259120E70, 4 * (v16 - v19));
  }
  uint64_t v20 = v11[23];
  if (v20 + 1 < v14) {
    memset_pattern16((char *)&v649[183] + 4 * v20 + 4, &unk_259120E70, 4 * (v16 - v20));
  }
  if (v17 > 0x170)
  {
LABEL_9:
    peridot_depth_log("Wrong Configuration: histEnd");
    return 4;
  }
  vDSP_Length v22 = __P >> 1;
  if (v17 < __P >> 1)
  {
LABEL_12:
    peridot_depth_log("Wrong Configuration: histEnd too small");
    return 4;
  }
  v619 = v12;
  v621 = v9;
  v626 = v11;
  vDSP_Length v23 = v22 + 1;
  float32x4_t v24 = *(char **)(v13 + 8);
  memcpy(v651, &v24[4 * (v17 - (__P >> 1)) + 4], 4 * v22);
  memcpy(&v651[v22], v24, 4 * v17 + 4);
  memcpy(&v651[v22 + 1 + v17], v24, 4 * v22);
  unint64_t v25 = v17 + __P;
  if (v17 + __P)
  {
    if (v25 <= 7)
    {
      unint64_t v26 = 0;
LABEL_20:
      unint64_t v33 = v17 + __P - v26;
      vDSP_Length v34 = &__A[v26];
      uint64_t v35 = (float *)&v651[v26];
      do
      {
        float v36 = *v35++;
        *v34++ = v36;
        --v33;
      }
      while (v33);
      goto LABEL_22;
    }
    unint64_t v26 = v25 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v27 = (float64x2_t *)v631;
    unint64_t v28 = (float32x2_t *)&v652;
    unint64_t v29 = v25 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v30 = *(float32x4_t *)v28[-2].f32;
      float64x2_t v31 = vcvtq_f64_f32(*v28);
      float64x2_t v32 = vcvt_hight_f64_f32(*(float32x4_t *)v28->f32);
      v27[-2] = vcvtq_f64_f32(*(float32x2_t *)v30.f32);
      v27[-1] = vcvt_hight_f64_f32(v30);
      float64x2_t *v27 = v31;
      v27[1] = v32;
      v27 += 4;
      v28 += 4;
      v29 -= 8;
    }
    while (v29);
    if (v25 != v26) {
      goto LABEL_20;
    }
  }
LABEL_22:
  vDSP_vswsumD(__A, 1, v642, 1, v17 + 1, __P);
  double v37 = (float)__P;
  if (v18 <= 7)
  {
    unint64_t v38 = 0;
LABEL_27:
    uint64_t v48 = v17 - v38 + 1;
    float v49 = (float *)&v645[v38];
    unint64_t v50 = (float *)&v663[v38];
    unint64_t v51 = &v642[v38];
    do
    {
      double v52 = *v51++;
      float v53 = v52;
      *v50++ = v53;
      float v54 = v52 * (1.0 / v37);
      *v49++ = v54;
      --v48;
    }
    while (v48);
    goto LABEL_29;
  }
  unint64_t v38 = v18 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v39 = (float32x4_t *)&v646;
  float32x4_t v40 = (float32x4_t *)&v664;
  float v41 = (float64x2_t *)v644;
  unint64_t v42 = v18 & 0xFFFFFFFFFFFFFFF8;
  double v43 = 1.0 / v37;
  do
  {
    float64x2_t v45 = v41[-2];
    float64x2_t v44 = v41[-1];
    float64x2_t v47 = *v41;
    float64x2_t v46 = v41[1];
    v41 += 4;
    v40[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v45), v44);
    *float32x4_t v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v47), v46);
    v39[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v45, v43)), vmulq_n_f64(v44, v43));
    *float32x4_t v39 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v47, v43)), vmulq_n_f64(v46, v43));
    v39 += 2;
    v40 += 2;
    v42 -= 8;
  }
  while (v42);
  if (v18 != v38) {
    goto LABEL_27;
  }
LABEL_29:
  unint64_t v55 = v626[22];
  if (v55 > 0x170) {
    goto LABEL_9;
  }
  if (v55 < v22) {
    goto LABEL_12;
  }
  unint64_t v56 = *(char **)(*(void *)(*v619 + 8) + 8);
  memcpy(v653, &v56[4 * (v55 - v22) + 4], 4 * v22);
  memcpy(&v653[v22], v56, 4 * v55 + 4);
  memcpy(&v653[v23 + v55], v56, 4 * v22);
  unint64_t v57 = v55 + 1;
  unint64_t v58 = v55 + __P;
  if (v55 + __P)
  {
    if (v58 < 8)
    {
      unint64_t v59 = 0;
LABEL_37:
      unint64_t v66 = v55 + __P - v59;
      unint64_t v67 = &__A[v59];
      unint64_t v68 = (float *)&v653[v59];
      do
      {
        float v69 = *v68++;
        *v67++ = v69;
        --v66;
      }
      while (v66);
      goto LABEL_39;
    }
    unint64_t v59 = v58 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v60 = (float64x2_t *)v631;
    long long v61 = (float32x2_t *)&v654;
    unint64_t v62 = v58 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v63 = *(float32x4_t *)v61[-2].f32;
      float64x2_t v64 = vcvtq_f64_f32(*v61);
      float64x2_t v65 = vcvt_hight_f64_f32(*(float32x4_t *)v61->f32);
      v60[-2] = vcvtq_f64_f32(*(float32x2_t *)v63.f32);
      v60[-1] = vcvt_hight_f64_f32(v63);
      *unint64_t v60 = v64;
      v60[1] = v65;
      v60 += 4;
      v61 += 4;
      v62 -= 8;
    }
    while (v62);
    if (v58 != v59) {
      goto LABEL_37;
    }
  }
LABEL_39:
  vDSP_vswsumD(__A, 1, v642, 1, v55 + 1, __P);
  if (v55 < 7)
  {
    unint64_t v70 = 0;
LABEL_44:
    uint64_t v80 = v55 - v70 + 1;
    unint64_t v81 = (float *)&v645[v70 + 370];
    unint64_t v82 = (float *)&v663[v70 + 368];
    unint64_t v83 = &v642[v70];
    do
    {
      double v84 = *v83++;
      float v85 = v84;
      *v82++ = v85;
      float v86 = v84 * (1.0 / v37);
      *v81++ = v86;
      --v80;
    }
    while (v80);
    goto LABEL_46;
  }
  unint64_t v70 = v57 & 0xFFFFFFFFFFFFFFF8;
  int8x16_t v71 = (float32x4_t *)v649;
  int8x16_t v72 = (float32x4_t *)&v665;
  float32x4_t v73 = (float64x2_t *)v644;
  unint64_t v74 = v57 & 0xFFFFFFFFFFFFFFF8;
  double v75 = 1.0 / v37;
  do
  {
    float64x2_t v77 = v73[-2];
    float64x2_t v76 = v73[-1];
    float64x2_t v79 = *v73;
    float64x2_t v78 = v73[1];
    v73 += 4;
    v72[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v77), v76);
    float32x4_t *v72 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v79), v78);
    v71[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v77, v75)), vmulq_n_f64(v76, v75));
    float32x4_t *v71 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v79, v75)), vmulq_n_f64(v78, v75));
    v71 += 2;
    v72 += 2;
    v74 -= 8;
  }
  while (v74);
  if (v57 != v70) {
    goto LABEL_44;
  }
LABEL_46:
  unint64_t v87 = v626[23];
  if (v87 > 0x170) {
    goto LABEL_9;
  }
  if (v87 < v22) {
    goto LABEL_12;
  }
  uint64_t v88 = *(char **)(*(void *)(*v619 + 16) + 8);
  memcpy(v655, &v88[4 * (v87 - v22) + 4], 4 * v22);
  memcpy(&v655[v22], v88, 4 * v87 + 4);
  memcpy(&v655[v23 + v87], v88, 4 * v22);
  unint64_t v89 = v87 + 1;
  unint64_t v90 = v87 + __P;
  if (v87 + __P)
  {
    if (v90 < 8)
    {
      unint64_t v91 = 0;
LABEL_54:
      unint64_t v98 = v87 + __P - v91;
      uint64_t v99 = &__A[v91];
      uint64_t v100 = (float *)&v655[v91];
      do
      {
        float v101 = *v100++;
        *v99++ = v101;
        --v98;
      }
      while (v98);
      goto LABEL_56;
    }
    unint64_t v91 = v90 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v92 = (float64x2_t *)v631;
    uint64_t v93 = (float32x2_t *)&v656;
    unint64_t v94 = v90 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v95 = *(float32x4_t *)v93[-2].f32;
      float64x2_t v96 = vcvtq_f64_f32(*v93);
      float64x2_t v97 = vcvt_hight_f64_f32(*(float32x4_t *)v93->f32);
      v92[-2] = vcvtq_f64_f32(*(float32x2_t *)v95.f32);
      v92[-1] = vcvt_hight_f64_f32(v95);
      *uint64_t v92 = v96;
      v92[1] = v97;
      v92 += 4;
      v93 += 4;
      v94 -= 8;
    }
    while (v94);
    if (v90 != v91) {
      goto LABEL_54;
    }
  }
LABEL_56:
  vDSP_vswsumD(__A, 1, v642, 1, v87 + 1, __P);
  if (v87 < 7)
  {
    unint64_t v102 = 0;
    int v103 = __P;
LABEL_61:
    uint64_t v113 = v87 - v102 + 1;
    float32x4_t v114 = (float *)&v645[v102 + 740];
    uint64_t v115 = (float *)&v663[v102 + 736];
    float32x4_t v116 = &v642[v102];
    do
    {
      double v117 = *v116++;
      float v118 = v117;
      *v115++ = v118;
      float v119 = v117 * (1.0 / v37);
      *v114++ = v119;
      --v113;
    }
    while (v113);
    goto LABEL_63;
  }
  unint64_t v102 = v89 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v104 = (float32x4_t *)v650;
  float32x4_t v105 = (float32x4_t *)v666;
  float32x4_t v106 = (float64x2_t *)v644;
  unint64_t v107 = v89 & 0xFFFFFFFFFFFFFFF8;
  double v108 = 1.0 / v37;
  int v103 = __P;
  do
  {
    float64x2_t v110 = v106[-2];
    float64x2_t v109 = v106[-1];
    float64x2_t v112 = *v106;
    float64x2_t v111 = v106[1];
    v106 += 4;
    v105[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v110), v109);
    *float32x4_t v105 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v112), v111);
    v104[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v110, v108)), vmulq_n_f64(v109, v108));
    *float32x4_t v104 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_n_f64(v112, v108)), vmulq_n_f64(v111, v108));
    v104 += 2;
    v105 += 2;
    v107 -= 8;
  }
  while (v107);
  if (v89 != v102) {
    goto LABEL_61;
  }
LABEL_63:
  unint64_t v611 = v623 - (v15 >> 1);
  unint64_t v612 = v624 - (v15 >> 1);
  unint64_t v613 = v15 >> 1;
  unint64_t v614 = v625 - (v15 >> 1);
  uint64_t v120 = 0;
  if (v103 >= 0) {
    int v121 = v103;
  }
  else {
    int v121 = v103 + 1;
  }
  int v122 = v121 >> 1;
  float v123 = (float)v10;
  float v124 = *((float *)v626 + 40);
  if (v122 >= 0) {
    int v125 = v122;
  }
  else {
    int v125 = -v122;
  }
  float v615 = 1.0 / v123;
  float v126 = v645;
  v617 = (char *)__A - 4 * v122;
  int v616 = v122 + v125 + 1;
  int64x2_t v620 = vdupq_n_s64(1uLL);
  do
  {
    LODWORD(v642[0]) = 0;
    memset_pattern4(__A, v642, 0x5DCuLL);
    v622 = &v626[v120];
    unint64_t v129 = v622[21];
    memcpy(__A, &v663[368 * v120], 4 * v129 + 4);
    vDSP_Length v130 = v622[2] + __P;
    unint64_t v131 = v130 + 1;
    if (v130 + 1 > v129 + 1)
    {
      v132.i64[0] = 0x8000000080000000;
      v132.i64[1] = 0x8000000080000000;
      int8x16_t v133 = (int8x16_t)v620;
      goto LABEL_188;
    }
    uint64_t v134 = 0;
    v132.i64[0] = 0x8000000080000000;
    v132.i64[1] = 0x8000000080000000;
    int8x16_t v133 = (int8x16_t)v620;
    do
    {
      float v135 = *((float *)__A + v131);
      if (v135 > *((float *)__A + v130))
      {
        unint64_t v136 = v130 + 2;
        float v137 = *((float *)__A + v136);
        if (v135 > v137 || vabds_f32(v137, v135) < 0.000001)
        {
          *(void *)&v642[v134++] = v131;
          unint64_t v131 = v136;
        }
      }
      vDSP_Length v130 = v131++;
    }
    while (v131 <= v129 + 1);
    if (!v134) {
      goto LABEL_188;
    }
    uint64_t v618 = v120;
    if (v134 == 1)
    {
      uint64_t v138 = 1;
    }
    else
    {
      uint64_t v139 = 0;
      uint64_t v138 = 0;
      do
      {
        double v140 = v642[v139];
        if ((int)__P < -1)
        {
LABEL_90:
          *((double *)&v639 + v138++) = v140;
        }
        else
        {
          float32x4_t v141 = (float *)&v617[4 * *(void *)&v140];
          int v142 = v616;
          while ((float)(*v141 - *((float *)__A + *(void *)&v140)) <= 0.000001)
          {
            ++v141;
            if (!--v142) {
              goto LABEL_90;
            }
          }
        }
        ++v139;
      }
      while (v139 != v134);
      memcpy(v642, &v639, 8 * v138);
    }
    LODWORD(v639) = 0;
    memset_pattern4(v638, &v639, 0x2E0uLL);
    if (v138)
    {
      uint64_t v143 = 0;
      float v144 = v615 * (float)(unint64_t)v626[24];
      do
      {
        double v147 = v642[v143];
        if (*(void *)&v147 >= v129 - __P)
        {
          float v145 = *((float *)__A + *(void *)&v147 - __P);
        }
        else
        {
          vDSP_Length v148 = *(void *)&v147 - __P;
          if (*(void *)&v147 < __P) {
            vDSP_Length v148 = 0;
          }
          uint64_t v149 = *(void *)&v147 + __P;
          if (*(void *)&v147 + __P >= 0x176) {
            uint64_t v149 = 374;
          }
          float v145 = (float)(*((float *)__A + v149) + *((float *)__A + v148)) * 0.5;
        }
        if (v145 >= v144) {
          float v146 = v145;
        }
        else {
          float v146 = v144;
        }
        *(float *)&v638[v143++] = (float)(*((float *)__A + *(void *)&v147) - v145) / sqrtf(v146 * v615);
      }
      while (v138 != v143);
      v633[0] = 0;
      memset_pattern8(&v639, v633, 0x5C0uLL);
      v633[0] = 0;
      memset_pattern8(&v635, v633, 0x5C0uLL);
      uint64_t v150 = 0;
      unint64_t v151 = 0;
      uint64_t v152 = 0;
      do
      {
        if (*(float *)&v638[v150] > v124)
        {
          *(&v639 + v152++) = v150;
          *(&v635 + v151++) = *(void *)&v642[v150];
        }
        ++v150;
      }
      while (v138 != v150);
      uint64_t v153 = v626[25];
      if (v151 > v153)
      {
        float v154 = &v639;
        float v155 = &v639 + v138;
        unint64_t v156 = (v138 - 1) & 0x1FFFFFFFFFFFFFFFLL;
        if (v156 >= 3)
        {
          unint64_t v158 = v156 + 1;
          uint64_t v157 = (v156 + 1) & 0x3FFFFFFFFFFFFFFCLL;
          int64x2_t v159 = (int64x2_t)xmmword_2591200C0;
          uint64_t v160 = (int64x2_t *)v641;
          uint64_t v161 = v157;
          do
          {
            v160[-1] = v159;
            *uint64_t v160 = vaddq_s64(v159, vdupq_n_s64(2uLL));
            int64x2_t v159 = vaddq_s64(v159, vdupq_n_s64(4uLL));
            v160 += 2;
            v161 -= 4;
          }
          while (v161);
          if (v158 == v157)
          {
LABEL_125:
            if (v153)
            {
              if (v153 >= 2 && (v153 & 0x1FFFFFFFFFFFFFFELL) != 0)
              {
                int64_t v162 = (unint64_t)(v153 - 2) >> 1;
                int64_t v163 = v162;
                do
                {
                  if (v162 >= v163)
                  {
                    uint64_t v165 = (2 * v163) | 1;
                    uint64_t v166 = &v639 + v165;
                    if (2 * v163 + 2 < v153 && *(float *)&v638[*v166] > *(float *)&v638[v166[1]])
                    {
                      ++v166;
                      uint64_t v165 = 2 * v163 + 2;
                    }
                    float32x4_t v167 = &v639 + v163;
                    uint64_t v168 = *v166;
                    uint64_t v169 = *v167;
                    float v170 = *(float *)&v638[*v167];
                    if (*(float *)&v638[*v166] <= v170)
                    {
                      do
                      {
                        float32x4_t v171 = v166;
                        uint64_t *v167 = v168;
                        if (v162 < v165) {
                          break;
                        }
                        uint64_t v172 = 2 * v165;
                        uint64_t v165 = (2 * v165) | 1;
                        uint64_t v166 = &v639 + v165;
                        uint64_t v173 = v172 + 2;
                        if (v173 < v153 && *(float *)&v638[*v166] > *(float *)&v638[v166[1]])
                        {
                          ++v166;
                          uint64_t v165 = v173;
                        }
                        uint64_t v168 = *v166;
                        float32x4_t v167 = v171;
                      }
                      while (*(float *)&v638[*v166] <= v170);
                      *float32x4_t v171 = v169;
                    }
                  }
                  BOOL v164 = v163-- <= 0;
                }
                while (!v164);
              }
              float32x4_t v174 = &v639 + v153;
              if (v153 != v138)
              {
                if (v153 >= 2)
                {
                  v241 = &v639 + v153;
                  do
                  {
                    uint64_t v242 = *v241;
                    float v243 = *(float *)&v638[*v241];
                    if (v243 > *(float *)&v638[v639])
                    {
                      uint64_t *v241 = v639;
                      uint64_t v639 = v242;
                      if (v153 == 2 || *(float *)&v638[v640] <= *(float *)&v638[v641[0]])
                      {
                        int v244 = &v640;
                        uint64_t v245 = 1;
                      }
                      else
                      {
                        int v244 = v641;
                        uint64_t v245 = 2;
                      }
                      uint64_t v246 = *v244;
                      if (*(float *)&v638[*v244] <= v243)
                      {
                        float v247 = &v639;
                        do
                        {
                          int v248 = v244;
                          *float v247 = v246;
                          if ((uint64_t)((unint64_t)(v153 - 2) >> 1) < v245) {
                            break;
                          }
                          uint64_t v249 = 2 * v245;
                          uint64_t v245 = (2 * v245) | 1;
                          int v244 = &v639 + v245;
                          uint64_t v250 = v249 + 2;
                          if (v250 < v153 && *(float *)&v638[*v244] > *(float *)&v638[v244[1]])
                          {
                            ++v244;
                            uint64_t v245 = v250;
                          }
                          uint64_t v246 = *v244;
                          float v247 = v248;
                        }
                        while (*(float *)&v638[*v244] <= v243);
                        *int v248 = v242;
                      }
                    }
                    ++v241;
                  }
                  while (v241 != v155);
                }
                else
                {
                  uint64_t v238 = v639;
                  uint64_t v239 = 8 * v153;
                  do
                  {
                    uint64_t v240 = *(uint64_t *)((char *)&v639 + v239);
                    if (*(float *)&v638[v240] > *(float *)&v638[v238])
                    {
                      *(uint64_t *)((char *)&v639 + v239) = v238;
                      uint64_t v639 = v240;
                      uint64_t v238 = v240;
                    }
                    v239 += 8;
                  }
                  while (8 * v138 != v239);
                }
              }
              if (v153 >= 2)
              {
                uint64_t v175 = v153 & 0x1FFFFFFFFFFFFFFFLL;
                do
                {
                  uint64_t v176 = 0;
                  uint64_t v177 = v639;
                  float32x4_t v178 = &v639;
                  do
                  {
                    uint64_t v179 = v178;
                    v178 += v176 + 1;
                    uint64_t v180 = 2 * v176;
                    uint64_t v176 = (2 * v176) | 1;
                    uint64_t v181 = v180 + 2;
                    if (v181 < v175 && *(float *)&v638[*v178] > *(float *)&v638[v178[1]])
                    {
                      ++v178;
                      uint64_t v176 = v181;
                    }
                    uint64_t *v179 = *v178;
                  }
                  while (v176 <= (uint64_t)((unint64_t)(v175 - 2) >> 1));
                  if (v178 == --v174)
                  {
                    *float32x4_t v178 = v177;
                  }
                  else
                  {
                    *float32x4_t v178 = *v174;
                    uint64_t *v174 = v177;
                    uint64_t v182 = (char *)v178 - (char *)&v639 + 8;
                    if (v182 >= 9)
                    {
                      unint64_t v183 = (((unint64_t)v182 >> 3) - 2) >> 1;
                      float32x4_t v184 = &v639 + v183;
                      uint64_t v185 = *v184;
                      uint64_t v186 = *v178;
                      float v187 = *(float *)&v638[*v178];
                      if (*(float *)&v638[*v184] > v187)
                      {
                        do
                        {
                          float v188 = v184;
                          *float32x4_t v178 = v185;
                          if (!v183) {
                            break;
                          }
                          unint64_t v183 = (v183 - 1) >> 1;
                          float32x4_t v184 = &v639 + v183;
                          uint64_t v185 = *v184;
                          float32x4_t v178 = v188;
                        }
                        while (*(float *)&v638[*v184] > v187);
                        *float v188 = v186;
                      }
                    }
                  }
                  BOOL v164 = v175-- <= 2;
                }
                while (!v164);
              }
            }
            uint64_t v189 = v626[25];
            uint64_t v120 = v618;
            if (!v189) {
              goto LABEL_166;
            }
            if (v189 == 1)
            {
              unint64_t v190 = 0;
            }
            else
            {
              unint64_t v190 = v189 & 0xFFFFFFFFFFFFFFFELL;
              float v191 = &v640;
              float v192 = (double *)&v636;
              unint64_t v193 = v189 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                double v194 = v642[*v191];
                *(v192 - 1) = v642[*(v191 - 1)];
                double *v192 = v194;
                v192 += 2;
                v191 += 2;
                v193 -= 2;
              }
              while (v193);
              if (v189 == v190) {
                goto LABEL_165;
              }
            }
            do
            {
              *(&v635 + v190) = *(void *)&v642[*(&v639 + v190)];
              ++v190;
            }
            while (v189 != v190);
LABEL_165:
            LODWORD(v151) = v189;
            goto LABEL_166;
          }
          float v154 = &v639 + v157;
        }
        else
        {
          uint64_t v157 = 0;
        }
        do
          *v154++ = v157++;
        while (v154 != v155);
        goto LABEL_125;
      }
    }
    else
    {
      v633[0] = 0;
      memset_pattern8(&v639, v633, 0x5C0uLL);
      v633[0] = 0;
      memset_pattern8(&v635, v633, 0x5C0uLL);
      LODWORD(v151) = 0;
    }
    uint64_t v120 = v618;
LABEL_166:
    v632[0] = 0;
    memset_pattern8(v633, v632, 0x360uLL);
    uint64_t __pattern8 = 0;
    memset_pattern8(v632, &__pattern8, 0x20uLL);
    v132.i64[0] = 0x8000000080000000;
    v132.i64[1] = 0x8000000080000000;
    int8x16_t v133 = (int8x16_t)v620;
    if ((int)v151 >= 1)
    {
      uint64_t v195 = 0;
      unsigned int v196 = *((_DWORD *)v626 + 56);
      int v197 = *((_DWORD *)v626 + 58);
      do
      {
        if ((signed int)-v196 <= v197)
        {
          unint64_t v198 = *(&v635 + v195);
          unsigned int v199 = v196;
          int v200 = v196 + v197 + 1;
          uint64_t v201 = -v196;
          do
          {
            if (v198 + v201 >= v14 || v201 < 0 && v198 < v199) {
              break;
            }
            uint64_t v202 = v632[v195];
            v632[v195] = v202 + 1;
            v633[27 * v195 + v202] = v198 + v201++;
            --v199;
            --v200;
          }
          while (v200);
        }
        ++v195;
      }
      while (v195 != v151);
      uint64_t v203 = 0;
      uint64_t v204 = &v645[370 * v120];
      uint64_t v205 = v633;
      float32x4_t v206 = &v634;
      do
      {
        uint64_t v207 = v632[v203];
        if (v207)
        {
          if (v207 == 1)
          {
            unint64_t v208 = 0;
          }
          else
          {
            unint64_t v208 = v207 & 0xFFFFFFFFFFFFFFFELL;
            float32x4_t v209 = v206;
            unint64_t v210 = v207 & 0xFFFFFFFFFFFFFFFELL;
            do
            {
              uint64_t v211 = *v209;
              v204[*(v209 - 1)] = 2143289344;
              v204[v211] = 2143289344;
              v209 += 2;
              v210 -= 2;
            }
            while (v210);
            if (v207 == v208) {
              goto LABEL_177;
            }
          }
          uint64_t v212 = v207 - v208;
          float32x4_t v213 = &v205[v208];
          do
          {
            uint64_t v214 = *v213++;
            v204[v214] = 2143289344;
            --v212;
          }
          while (v212);
        }
LABEL_177:
        ++v203;
        v206 += 27;
        v205 += 27;
      }
      while (v203 != v151);
    }
    unint64_t v129 = v622[21];
LABEL_188:
    unint64_t v215 = v622[11];
    uint64_t v127 = 0;
    if (v215 <= v129)
    {
      unint64_t v216 = v129 + 1;
      if (v129 + 1 <= v215 + 1) {
        unint64_t v216 = v215 + 1;
      }
      unint64_t v217 = v216 - v215;
      if (v217 > 7)
      {
        unint64_t v220 = v217 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v221 = v215;
        int64x2_t v222 = 0uLL;
        unint64_t v223 = v217 & 0xFFFFFFFFFFFFFFF8;
        int64x2_t v224 = 0uLL;
        int64x2_t v225 = 0uLL;
        int64x2_t v226 = 0uLL;
        float32x4_t v227 = 0uLL;
        float32x4_t v228 = 0uLL;
        do
        {
          float32x4_t v229 = *(float32x4_t *)&v126[v221];
          float32x4_t v230 = *(float32x4_t *)&v126[v221 + 4];
          int8x16_t v231 = vorrq_s8((int8x16_t)vcltzq_f32(v229), (int8x16_t)vcgezq_f32(v229));
          int8x16_t v232 = vorrq_s8((int8x16_t)vcltzq_f32(v230), (int8x16_t)vcgezq_f32(v230));
          float32x4_t v227 = vaddq_f32((float32x4_t)vbslq_s8(v231, (int8x16_t)v229, v132), v227);
          float32x4_t v228 = vaddq_f32((float32x4_t)vbslq_s8(v232, (int8x16_t)v230, v132), v228);
          v233.i64[0] = v231.u32[0];
          v233.i64[1] = v231.u32[1];
          int64x2_t v234 = (int64x2_t)vandq_s8(v233, v133);
          v233.i64[0] = v231.u32[2];
          v233.i64[1] = v231.u32[3];
          int64x2_t v235 = (int64x2_t)vandq_s8(v233, v133);
          v233.i64[0] = v232.u32[0];
          v233.i64[1] = v232.u32[1];
          int64x2_t v236 = (int64x2_t)vandq_s8(v233, v133);
          v233.i64[0] = v232.u32[2];
          v233.i64[1] = v232.u32[3];
          int64x2_t v224 = vaddq_s64(v224, v235);
          int64x2_t v222 = vaddq_s64(v222, v234);
          int64x2_t v226 = vaddq_s64(v226, (int64x2_t)vandq_s8(v233, v133));
          int64x2_t v225 = vaddq_s64(v225, v236);
          v221 += 8;
          v223 -= 8;
        }
        while (v223);
        float32x4_t v237 = vaddq_f32(v228, v227);
        float v219 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v237, v237));
        uint64_t v127 = vaddvq_s64(vaddq_s64(vaddq_s64(v225, v222), vaddq_s64(v226, v224)));
        unint64_t v218 = v127;
        if (v217 == v220) {
          goto LABEL_198;
        }
        v215 += v220;
      }
      else
      {
        unint64_t v218 = 0;
        float v219 = 0.0;
      }
      do
      {
        float v219 = *(float *)&v126[v215] + v219;
        ++v218;
        ++v215;
      }
      while (v215 <= v129);
LABEL_198:
      if (v218) {
        *(float *)&uint64_t v127 = v219 / (float)v218;
      }
      else {
        uint64_t v127 = 0;
      }
    }
    if (*((float *)v621 + 18) >= *(float *)&v127 && v120 != 0) {
      LODWORD(v127) = *((_DWORD *)v621 + 18);
    }
    *((_DWORD *)v621 + 18) = v127;
    ++v120;
    v126 += 370;
  }
  while (v120 != 3);
  int32x2_t __Pa = (int32x2_t)v127;
  LODWORD(v642[0]) = 2143289344;
  memset_pattern4(__A, v642, 0x1140uLL);
  v642[0] = 0.0;
  memset_pattern8(&v635, v642, 0x18uLL);
  uint64_t v251 = v626[21];
  unint64_t v252 = v251 + 1;
  unint64_t v254 = v611;
  unint64_t v253 = v612;
  if (v611 < v251 + 1)
  {
    unint64_t v255 = v251 + v613 - v623 + 1;
    uint64_t v256 = v635;
    if (v255 <= 3)
    {
LABEL_226:
      BOOL v262 = (_DWORD *)__A + 3 * v256;
      uint64_t v263 = v251 - v254 + 1;
      uint64_t v264 = &v645[v254];
      uint64_t v256 = v256 + v251 - v254 + 1;
      do
      {
        int v265 = *v264++;
        *BOOL v262 = v265;
        v262 += 3;
        --v263;
      }
      while (v263);
    }
    else
    {
      unint64_t v257 = v255 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v256 = v635 + (v255 & 0xFFFFFFFFFFFFFFFCLL);
      unint64_t v258 = (long long *)&v645[v623 - v613];
      v259 = (_DWORD *)&__A[3] + 3 * v635;
      unint64_t v260 = v255 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v261 = *v258++;
        *(v259 - 6) = v261;
        *(v259 - 3) = DWORD1(v261);
        _DWORD *v259 = DWORD2(v261);
        v259[3] = HIDWORD(v261);
        v259 += 12;
        v260 -= 4;
      }
      while (v260);
      if (v255 != v257)
      {
        unint64_t v254 = v611 + v257;
        goto LABEL_226;
      }
    }
    unint64_t v635 = v256;
  }
  uint64_t v266 = v626[22];
  unint64_t v267 = v266 + 1;
  if (v612 < v266 + 1)
  {
    unint64_t v268 = v266 + v613 - v624 + 1;
    uint64_t v269 = v636;
    if (v268 < 4)
    {
LABEL_235:
      unint64_t v275 = (_DWORD *)__A + 3 * v269 + 1;
      uint64_t v276 = v266 - v253 + 1;
      float v277 = (int *)&v648[4 * v253];
      uint64_t v269 = v269 + v266 - v253 + 1;
      do
      {
        int v278 = *v277++;
        *unint64_t v275 = v278;
        v275 += 3;
        --v276;
      }
      while (v276);
    }
    else
    {
      unint64_t v270 = v268 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v269 = v636 + (v268 & 0xFFFFFFFFFFFFFFFCLL);
      uint64_t v271 = (long long *)&v645[v624 - v613 + 370];
      v272 = (_DWORD *)&__A[3] + 3 * v636 + 1;
      unint64_t v273 = v268 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v274 = *v271++;
        *(v272 - 6) = v274;
        *(v272 - 3) = DWORD1(v274);
        _DWORD *v272 = DWORD2(v274);
        v272[3] = HIDWORD(v274);
        v272 += 12;
        v273 -= 4;
      }
      while (v273);
      if (v268 != v270)
      {
        unint64_t v253 = v612 + v270;
        goto LABEL_235;
      }
    }
    unint64_t v636 = v269;
  }
  uint64_t v279 = v626[23];
  unint64_t v280 = v279 + 1;
  unint64_t v281 = v614;
  if (v614 >= v279 + 1)
  {
    unint64_t v283 = v637;
  }
  else
  {
    unint64_t v282 = v279 + v613 - v625 + 1;
    unint64_t v283 = v637;
    if (v282 < 4)
    {
LABEL_244:
      v289 = (_DWORD *)&__A[1] + 3 * v283;
      uint64_t v290 = v279 - v281 + 1;
      uint64_t v291 = (int *)&v649[183] + v281;
      unint64_t v283 = v283 + v279 - v281 + 1;
      do
      {
        int v292 = *v291++;
        _DWORD *v289 = v292;
        v289 += 3;
        --v290;
      }
      while (v290);
    }
    else
    {
      unint64_t v284 = v282 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v283 = v637 + (v282 & 0xFFFFFFFFFFFFFFFCLL);
      v285 = (long long *)&v645[v625 - v613 + 740];
      v286 = (_DWORD *)&__A[4] + 3 * v637;
      unint64_t v287 = v282 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v288 = *v285++;
        *(v286 - 6) = v288;
        *(v286 - 3) = DWORD1(v288);
        _DWORD *v286 = DWORD2(v288);
        v286[3] = HIDWORD(v288);
        v286 += 12;
        v287 -= 4;
      }
      while (v287);
      if (v282 != v284)
      {
        unint64_t v281 = v614 + v284;
        goto LABEL_244;
      }
    }
    unint64_t v637 = v283;
  }
  LODWORD(v639) = 2143289344;
  memset_pattern4(v642, &v639, 0x5C0uLL);
  unint64_t v293 = v635;
  if (v635 <= v636) {
    unint64_t v293 = v636;
  }
  BOOL v380 = v293 >= v283;
  uint64_t v294 = 16;
  if (v380) {
    uint64_t v294 = 8 * (v635 < v636);
  }
  unint64_t v295 = *(unint64_t *)((char *)&v635 + v294);
  if (v295)
  {
    if (v295 <= 3)
    {
      unint64_t v296 = 0;
      goto LABEL_295;
    }
    unint64_t v296 = v295 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v297 = &v643;
    v298 = (const float *)__A;
    int8x16_t v299 = (int8x16_t)vdupq_n_s64(1uLL);
    v300.i64[0] = 0x8000000080000000;
    v300.i64[1] = 0x8000000080000000;
    unint64_t v301 = v295 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float32x4x3_t v667 = vld3q_f32(v298);
      int8x16_t v302 = vorrq_s8((int8x16_t)vcltzq_f32(v667.val[0]), (int8x16_t)vcgezq_f32(v667.val[0]));
      v303.i64[0] = v302.u32[2];
      v303.i64[1] = v302.u32[3];
      int64x2_t v304 = (int64x2_t)vandq_s8(v303, v299);
      v303.i64[0] = v302.u32[0];
      v303.i64[1] = v302.u32[1];
      int64x2_t v305 = (int64x2_t)vandq_s8(v303, v299);
      int8x16_t v306 = vorrq_s8((int8x16_t)vcltzq_f32(v667.val[1]), (int8x16_t)vcgezq_f32(v667.val[1]));
      v303.i64[0] = v306.u32[2];
      v303.i64[1] = v306.u32[3];
      int64x2_t v307 = (int64x2_t)vandq_s8(v303, v299);
      v303.i64[0] = v306.u32[0];
      v303.i64[1] = v306.u32[1];
      int64x2_t v308 = vaddq_s64(v305, (int64x2_t)vandq_s8(v303, v299));
      int64x2_t v309 = vaddq_s64(v304, v307);
      int8x16_t v310 = vorrq_s8((int8x16_t)vcltzq_f32(v667.val[2]), (int8x16_t)vcgezq_f32(v667.val[2]));
      v303.i64[0] = v310.u32[0];
      v303.i64[1] = v310.u32[1];
      int64x2_t v311 = (int64x2_t)vandq_s8(v303, v299);
      v303.i64[0] = v310.u32[2];
      v303.i64[1] = v310.u32[3];
      int64x2_t v312 = vaddq_s64(v309, (int64x2_t)vandq_s8(v303, v299));
      int64x2_t v313 = vaddq_s64(v308, v311);
      int32x4_t v314 = (int32x4_t)vtstq_s64(v313, v313);
      *(int32x2_t *)v314.i8 = vmovn_s64((int64x2_t)v314);
      float32x4_t v315 = vdivq_f32(vaddq_f32((float32x4_t)vbslq_s8(v310, (int8x16_t)v667.val[2], v300), vaddq_f32((float32x4_t)vbslq_s8(v306, (int8x16_t)v667.val[1], v300), (float32x4_t)vbslq_s8(v302, (int8x16_t)v667.val[0], v300))), vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)v313)), vcvtq_f64_u64((uint64x2_t)v312)));
      if (vmovn_s32(v314).u8[0]) {
        *((_DWORD *)v297 - 2) = v315.i32[0];
      }
      int32x2_t v316 = (int32x2_t)vmovn_s32(v314);
      if (v316.i8[2]) {
        *((_DWORD *)v297 - 1) = v315.i32[1];
      }
      int64x2_t v317 = vtstq_s64(v312, v312);
      if (vmovn_s32(vmovn_hight_s64(v316, v317)).i32[1]) {
        *(_DWORD *)uint64_t v297 = v315.i32[2];
      }
      if (vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v317, v317)).i8[6]) {
        *((_DWORD *)v297 + 1) = v315.i32[3];
      }
      v297 += 2;
      v298 += 12;
      v301 -= 4;
    }
    while (v301);
    if (v295 != v296)
    {
LABEL_295:
      unint64_t v339 = v295 - v296;
      v340 = (float *)v642 + v296;
      v341 = (float *)&__A[1] + 3 * v296;
      do
      {
        *v340++ = (float)(*v341 + (float)(*(v341 - 1) + *(v341 - 2))) / (float)3uLL;
        v341 += 3;
        --v339;
      }
      while (v339);
    }
  }
  unint64_t v318 = v626[26];
  unint64_t v319 = v318 >> 1;
  LODWORD(v633[0]) = 2143289344;
  memset_pattern4(&v639, v633, 0x5C0uLL);
  unint64_t v321 = v295 - (v318 >> 1);
  if (v295 < v318 >> 1)
  {
    peridot_depth_log("Wrong configuration: LEDTailYpriSize", v611, v612);
    return 4;
  }
  unint64_t v322 = v321 - v319;
  float v323 = 1.0 / v123;
  int32x2_t v324 = __Pa;
  if (v321 > v319)
  {
    if ((v318 & 0x80000000) == 0) {
      int v325 = v318;
    }
    else {
      int v325 = v318 + 1;
    }
    int v326 = v325 >> 1;
    float32x4_t v327 = (float *)v642 + v319 - v326;
    unint64_t v328 = v318 >> 1;
    do
    {
      float v329 = 0.0;
      if (-v326 <= v326)
      {
        v330 = v327;
        int v331 = 2 * v326 + 1;
        do
        {
          float v329 = *v330++ + v329;
          --v331;
        }
        while (v331);
      }
      *((float *)&v639 + v328 - v319) = v329 * (float)(1.0 / (float)v318);
      ++v328;
      ++v327;
    }
    while (v328 != v321);
  }
  if (v321 > v322)
  {
    if (v318 <= 0xF)
    {
LABEL_285:
      unint64_t v335 = v322 + v319 - v295;
      v336 = (_DWORD *)&v639 + v322;
      do
      {
        *v336++ = __Pa.i32[0];
        BOOL v380 = __CFADD__(v335++, 1);
      }
      while (!v380);
    }
    else
    {
      float32x4_t v320 = (float32x4_t)vdupq_lane_s32(__Pa, 0);
      uint64_t v332 = v319 & 0x7FFFFFFFFFFFFFF8;
      v333 = (float32x4_t *)((char *)&v639 + 4 * v295 + -8 * v319 + 16);
      uint64_t v334 = v319 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v333[-1] = v320;
        float32x4_t *v333 = v320;
        v333 += 2;
        v334 -= 8;
      }
      while (v334);
      if (v319 != v332)
      {
        v322 += v332;
        goto LABEL_285;
      }
    }
  }
  if (v295 != v319)
  {
    uint64_t v337 = 0;
    if (v321 <= 1) {
      uint64_t v338 = 1;
    }
    else {
      uint64_t v338 = v295 - v319;
    }
    v320.i32[1] = 0;
    do
      ++v337;
    while (v337 != v338);
    unint64_t v342 = 4 * v295 - 4 * v319 - 4;
    v343 = (float *)&v639;
    if (v342 < 0x1C) {
      goto LABEL_303;
    }
    uint64_t v344 = (v342 >> 2) + 1;
    float32x4_t v320 = (float32x4_t)vdupq_lane_s32(__Pa, 0);
    v345 = (float32x4_t *)v641;
    uint64_t v346 = v344 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      int8x16_t v347 = vbslq_s8((int8x16_t)vcgtq_f32(v320, *v345), (int8x16_t)v320, *(int8x16_t *)v345);
      v345[-1] = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v320, v345[-1]), (int8x16_t)v320, (int8x16_t)v345[-1]);
      float32x4_t *v345 = (float32x4_t)v347;
      v345 += 2;
      v346 -= 8;
    }
    while (v346);
    if (v344 != (v344 & 0x7FFFFFFFFFFFFFF8))
    {
      v343 = (float *)&v639 + (v344 & 0x7FFFFFFFFFFFFFF8);
LABEL_303:
      v348 = (float *)&v639 + v321;
      do
      {
        float v349 = *v343;
        if (*(float *)__Pa.i32 > *v343) {
          float v349 = *(float *)__Pa.i32;
        }
        *v343++ = v349;
      }
      while (v343 != v348);
    }
  }
  unint64_t v350 = v626[8];
  if (v350 <= 0x16F)
  {
    if (v350)
    {
      if (v350 <= 7)
      {
        uint64_t v351 = 0;
        goto LABEL_314;
      }
      uint64_t v351 = v626[8] & 0x1F8;
      float32x4_t v320 = (float32x4_t)vdupq_lane_s32(__Pa, 0);
      v352 = (float32x4_t *)&v658;
      unint64_t v353 = v350 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v352[-1] = v320;
        float32x4_t *v352 = v320;
        v352 += 2;
        v353 -= 8;
      }
      while (v353);
      if (v350 != v351)
      {
LABEL_314:
        unint64_t v354 = v350 - v351;
        v355 = &v657[4 * v351];
        do
        {
          *v355++ = __Pa.i32[0];
          --v354;
        }
        while (v354);
      }
    }
    if (v252 > v350)
    {
      memcpy(&v657[4 * v350], &v639, 4 * (v252 - v350));
      int32x2_t v324 = __Pa;
      float v323 = 1.0 / v123;
    }
    unint64_t v356 = v626[9];
    if (v356 <= 0x16F)
    {
      if (v356)
      {
        if (v356 < 8)
        {
          uint64_t v357 = 0;
          goto LABEL_325;
        }
        uint64_t v357 = v626[9] & 0x1F8;
        float32x4_t v320 = (float32x4_t)vdupq_lane_s32(v324, 0);
        v358 = (float32x4_t *)&v660;
        unint64_t v359 = v356 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v358[-1] = v320;
          float32x4_t *v358 = v320;
          v358 += 2;
          v359 -= 8;
        }
        while (v359);
        if (v356 != v357)
        {
LABEL_325:
          unint64_t v360 = v356 - v357;
          v361 = &v659[v357];
          do
          {
            *v361++ = v324.i32[0];
            --v360;
          }
          while (v360);
        }
      }
      v362 = (float32x4_t *)v659;
      if (v267 > v356)
      {
        memcpy(&v659[v356], &v639, 4 * (v267 - v356));
        int32x2_t v324 = __Pa;
        float v323 = 1.0 / v123;
      }
      unint64_t v363 = v626[10];
      if (v363 <= 0x16F)
      {
        if (!v363) {
          goto LABEL_339;
        }
        if (v363 >= 8)
        {
          uint64_t v364 = v626[10] & 0x1F8;
          float32x4_t v320 = (float32x4_t)vdupq_lane_s32(v324, 0);
          v365 = (float32x4_t *)&v662;
          unint64_t v366 = v363 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            v365[-1] = v320;
            float32x4_t *v365 = v320;
            v365 += 2;
            v366 -= 8;
          }
          while (v366);
          if (v363 == v364)
          {
LABEL_339:
            v369 = (float32x4_t *)v661;
            if (v280 > v363)
            {
              memcpy(&v661[v363], &v639, 4 * (v280 - v363));
              float v323 = 1.0 / v123;
            }
            v320.f32[0] = (float)(unint64_t)v626[24] / v123;
            v370 = *v621;
            v371 = v621[3];
            uint64_t v372 = *v619;
            v373 = (void *)v619[3];
            uint64_t v374 = **v621;
            uint64_t v375 = *(void *)(v374 + 8);
            uint64_t v376 = *(void *)(*v371 + 8);
            uint64_t v377 = *(void *)(*(void *)*v619 + 8);
            uint64_t v378 = *(void *)(*v373 + 8);
            unint64_t v379 = v626[5];
            if (v379)
            {
              if (v379 > 7
                && ((unint64_t)(v376 - v375) >= 0x10
                  ? (BOOL v380 = (unint64_t)(v375 - v377) >= 0x10)
                  : (BOOL v380 = 0),
                    v380 ? (BOOL v381 = (unint64_t)(v378 - v375) >= 0x10) : (BOOL v381 = 0),
                    v381 ? (BOOL v382 = (unint64_t)(v376 - v377) >= 0x10) : (BOOL v382 = 0),
                    v382 ? (BOOL v383 = (unint64_t)(v376 - v378) >= 0x10) : (BOOL v383 = 0),
                    v383))
              {
                unint64_t v384 = v379 & 0xFFFFFFFFFFFFFFFCLL;
                v562 = (float32x4_t *)v657;
                v563 = *(float32x4_t **)(*(void *)*v619 + 8);
                float32x4_t v564 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                v565 = *(float32x4_t **)(v374 + 8);
                v566 = *(float32x4_t **)(*v373 + 8);
                v567 = *(float32x4_t **)(*v371 + 8);
                unint64_t v568 = v379 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  float32x4_t v569 = *v563++;
                  float32x4_t v570 = v569;
                  float32x4_t v571 = *v562++;
                  int8x16_t v572 = (int8x16_t)v571;
                  *v565++ = vsubq_f32(v570, v571);
                  int8x16_t v573 = (int8x16_t)vcgtq_f32(v564, v571);
                  float32x4_t v574 = *v566++;
                  *v567++ = vmulq_f32(vmulq_n_f32(v574, v323), (float32x4_t)vbslq_s8(v573, (int8x16_t)v564, v572));
                  v568 -= 4;
                }
                while (v568);
                if (v379 == v384) {
                  goto LABEL_361;
                }
              }
              else
              {
                unint64_t v384 = 0;
              }
              unint64_t v385 = v379 - v384;
              uint64_t v386 = 4 * v384;
              v387 = (float *)(v376 + 4 * v384);
              v388 = (float *)(v378 + v386);
              v389 = (float *)(v375 + v386);
              v390 = (float *)&v657[v386];
              v391 = (float *)(v377 + v386);
              do
              {
                float v392 = *v391++;
                float v393 = v392;
                float v394 = *v390++;
                float v395 = v394;
                *v389++ = v393 - v394;
                BOOL v396 = v394 < v320.f32[0];
                float v397 = *v388++;
                float v398 = v397;
                if (v396) {
                  float v395 = v320.f32[0];
                }
                *v387++ = (float)(v398 * v323) * v395;
                --v385;
              }
              while (v385);
            }
LABEL_361:
            unint64_t v399 = v350 - v379;
            if (v350 <= v379) {
              goto LABEL_370;
            }
            if (v399 > 0xB)
            {
              v400 = (int32x4_t *)(4 * v379 + v376);
              if ((unint64_t)v400 - v375 + -4 * v379 >= 0x20)
              {
                unint64_t v401 = v399 & 0xFFFFFFFFFFFFFFF8;
                v402 = v400 + 1;
                v403 = (_OWORD *)(v375 + 4 * v379);
                int32x4_t v404 = vdupq_n_s32(0x49742400u);
                unint64_t v405 = v399 & 0xFFFFFFFFFFFFFFF8;
                do
                {
                  _OWORD *v403 = 0uLL;
                  v403[1] = 0uLL;
                  v403 += 2;
                  v402[-1] = v404;
                  int32x4_t *v402 = v404;
                  v402 += 2;
                  v405 -= 8;
                }
                while (v405);
                float v323 = 1.0 / v123;
                if (v399 == v401)
                {
LABEL_370:
                  unint64_t v410 = *(void *)(v374 + 16);
                  unint64_t v411 = v410 - v350;
                  if (v410 <= v350) {
                    goto LABEL_376;
                  }
                  if (v411 > 0xB)
                  {
                    uint64_t v528 = 4 * v350;
                    uint64_t v529 = 4 * v350 + v376;
                    uint64_t v530 = 4 * v350 + v375;
                    if ((unint64_t)(v529 - v530) >= 0x10)
                    {
                      if ((unint64_t)(v530 - (v528 + v377)) < 0x10
                        || (unint64_t)(v528 + v378 - v530) < 0x10
                        || (unint64_t)(v529 - (v528 + v377)) < 0x10)
                      {
                        float v323 = 1.0 / v123;
                      }
                      else
                      {
                        float v323 = 1.0 / v123;
                        if ((unint64_t)(v529 - (v528 + v378)) >= 0x10)
                        {
                          unint64_t v531 = v411 & 0xFFFFFFFFFFFFFFFCLL;
                          float32x4_t v532 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                          v533 = (float32x4_t *)(v376 + v528);
                          v534 = (float32x4_t *)(v378 + v528);
                          v535 = (float32x4_t *)(v375 + v528);
                          v536 = (float32x4_t *)&v657[v528];
                          v537 = (float32x4_t *)(v377 + v528);
                          unint64_t v538 = v411 & 0xFFFFFFFFFFFFFFFCLL;
                          do
                          {
                            float32x4_t v539 = *v537++;
                            float32x4_t v540 = v539;
                            float32x4_t v541 = *v536++;
                            int8x16_t v542 = (int8x16_t)v541;
                            *v535++ = vsubq_f32(v540, v541);
                            int8x16_t v543 = (int8x16_t)vcgtq_f32(v532, v541);
                            float32x4_t v544 = *v534++;
                            *v533++ = vmulq_f32(vmulq_n_f32(v544, v615), (float32x4_t)vbslq_s8(v543, (int8x16_t)v532, v542));
                            v538 -= 4;
                          }
                          while (v538);
                          if (v411 == v531) {
                            goto LABEL_376;
                          }
                          v350 += v531;
                        }
                      }
                    }
                  }
                  uint64_t v412 = v410 - v350;
                  v413 = (float *)(v376 + 4 * v350);
                  v414 = (float *)(v378 + 4 * v350);
                  v415 = (float *)(v375 + 4 * v350);
                  v416 = (float *)&v657[4 * v350];
                  v417 = (float *)(v377 + 4 * v350);
                  do
                  {
                    float v418 = *v417++;
                    float v419 = v418;
                    float v420 = *v416++;
                    float v421 = v420;
                    *v415++ = v419 - v420;
                    BOOL v396 = v420 < v320.f32[0];
                    float v422 = *v414++;
                    float v423 = v422;
                    if (v396) {
                      float v421 = v320.f32[0];
                    }
                    *v413++ = (float)(v423 * v323) * v421;
                    --v412;
                  }
                  while (v412);
LABEL_376:
                  uint64_t v424 = v370[1];
                  uint64_t v425 = *(void *)(v424 + 8);
                  uint64_t v426 = *(void *)(v371[1] + 8);
                  uint64_t v427 = *(void *)(*(void *)(v372 + 8) + 8);
                  uint64_t v428 = *(void *)(v373[1] + 8);
                  unint64_t v429 = v626[6];
                  if (!v429) {
                    goto LABEL_396;
                  }
                  if (v429 >= 8
                    && ((unint64_t)(v426 - v425) >= 0x10
                      ? (BOOL v430 = (unint64_t)(v425 - v427) >= 0x10)
                      : (BOOL v430 = 0),
                        v430 ? (BOOL v431 = (unint64_t)(v428 - v425) >= 0x10) : (BOOL v431 = 0),
                        v431 ? (BOOL v432 = (unint64_t)(v426 - v427) >= 0x10) : (BOOL v432 = 0),
                        v432 ? (BOOL v433 = (unint64_t)(v426 - v428) >= 0x10) : (BOOL v433 = 0),
                        v433))
                  {
                    unint64_t v434 = v429 & 0xFFFFFFFFFFFFFFFCLL;
                    v575 = *(float32x4_t **)(*(void *)(v372 + 8) + 8);
                    float32x4_t v576 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                    v577 = *(float32x4_t **)(v424 + 8);
                    v578 = *(float32x4_t **)(v373[1] + 8);
                    v579 = *(float32x4_t **)(v371[1] + 8);
                    unint64_t v580 = v429 & 0xFFFFFFFFFFFFFFFCLL;
                    do
                    {
                      float32x4_t v581 = *v575++;
                      float32x4_t v582 = v581;
                      float32x4_t v583 = *v362++;
                      int8x16_t v584 = (int8x16_t)v583;
                      *v577++ = vsubq_f32(v582, v583);
                      int8x16_t v585 = (int8x16_t)vcgtq_f32(v576, v583);
                      float32x4_t v586 = *v578++;
                      *v579++ = vmulq_f32(vmulq_n_f32(v586, v323), (float32x4_t)vbslq_s8(v585, (int8x16_t)v576, v584));
                      v580 -= 4;
                    }
                    while (v580);
                    if (v429 == v434) {
                      goto LABEL_396;
                    }
                  }
                  else
                  {
                    unint64_t v434 = 0;
                  }
                  unint64_t v435 = v429 - v434;
                  uint64_t v436 = 4 * v434;
                  v437 = (float *)(v426 + 4 * v434);
                  v438 = (float *)(v428 + v436);
                  v439 = (float *)(v425 + v436);
                  v440 = (float *)&v657[v436 + 1472];
                  v441 = (float *)(v427 + v436);
                  do
                  {
                    float v442 = *v441++;
                    float v443 = v442;
                    float v444 = *v440++;
                    float v445 = v444;
                    *v439++ = v443 - v444;
                    BOOL v396 = v444 < v320.f32[0];
                    float v446 = *v438++;
                    float v447 = v446;
                    if (v396) {
                      float v445 = v320.f32[0];
                    }
                    *v437++ = (float)(v447 * v323) * v445;
                    --v435;
                  }
                  while (v435);
LABEL_396:
                  unint64_t v448 = v356 - v429;
                  v449 = v626;
                  if (v356 <= v429) {
                    goto LABEL_405;
                  }
                  if (v448 >= 0xC)
                  {
                    v450 = (int32x4_t *)(4 * v429 + v426);
                    if ((unint64_t)v450 - v425 + -4 * v429 >= 0x20)
                    {
                      unint64_t v451 = v448 & 0xFFFFFFFFFFFFFFF8;
                      v452 = v450 + 1;
                      v453 = (_OWORD *)(v425 + 4 * v429);
                      int32x4_t v454 = vdupq_n_s32(0x49742400u);
                      unint64_t v455 = v448 & 0xFFFFFFFFFFFFFFF8;
                      do
                      {
                        _OWORD *v453 = 0uLL;
                        v453[1] = 0uLL;
                        v453 += 2;
                        v452[-1] = v454;
                        int32x4_t *v452 = v454;
                        v452 += 2;
                        v455 -= 8;
                      }
                      while (v455);
                      v449 = v626;
                      float v323 = 1.0 / v123;
                      if (v448 == v451)
                      {
LABEL_405:
                        unint64_t v460 = *(void *)(v424 + 16);
                        unint64_t v461 = v460 - v356;
                        if (v460 <= v356) {
                          goto LABEL_411;
                        }
                        if (v461 >= 0xC)
                        {
                          uint64_t v545 = 4 * v356;
                          uint64_t v546 = 4 * v356 + v426;
                          uint64_t v547 = 4 * v356 + v425;
                          if ((unint64_t)(v546 - v547) >= 0x10)
                          {
                            if ((unint64_t)(v547 - (v545 + v427)) < 0x10
                              || (unint64_t)(v545 + v428 - v547) < 0x10
                              || (unint64_t)(v546 - (v545 + v427)) < 0x10)
                            {
                              v449 = v626;
                              float v323 = 1.0 / v123;
                            }
                            else
                            {
                              v449 = v626;
                              float v323 = 1.0 / v123;
                              if ((unint64_t)(v546 - (v545 + v428)) >= 0x10)
                              {
                                unint64_t v548 = v461 & 0xFFFFFFFFFFFFFFFCLL;
                                float32x4_t v549 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                                v550 = (float32x4_t *)(v426 + v545);
                                v551 = (float32x4_t *)(v428 + v545);
                                v552 = (float32x4_t *)(v425 + v545);
                                v553 = (float32x4_t *)&v657[v545 + 1472];
                                v554 = (float32x4_t *)(v427 + v545);
                                unint64_t v555 = v461 & 0xFFFFFFFFFFFFFFFCLL;
                                do
                                {
                                  float32x4_t v556 = *v554++;
                                  float32x4_t v557 = v556;
                                  float32x4_t v558 = *v553++;
                                  int8x16_t v559 = (int8x16_t)v558;
                                  *v552++ = vsubq_f32(v557, v558);
                                  int8x16_t v560 = (int8x16_t)vcgtq_f32(v549, v558);
                                  float32x4_t v561 = *v551++;
                                  *v550++ = vmulq_f32(vmulq_n_f32(v561, v615), (float32x4_t)vbslq_s8(v560, (int8x16_t)v549, v559));
                                  v555 -= 4;
                                }
                                while (v555);
                                v449 = v626;
                                if (v461 == v548) {
                                  goto LABEL_411;
                                }
                                v356 += v548;
                              }
                            }
                          }
                        }
                        uint64_t v462 = v460 - v356;
                        v463 = (float *)(v426 + 4 * v356);
                        v464 = (float *)(v428 + 4 * v356);
                        v465 = (float *)(v425 + 4 * v356);
                        v466 = (float *)&v657[4 * v356 + 1472];
                        v467 = (float *)(v427 + 4 * v356);
                        do
                        {
                          float v468 = *v467++;
                          float v469 = v468;
                          float v470 = *v466++;
                          float v471 = v470;
                          *v465++ = v469 - v470;
                          BOOL v396 = v470 < v320.f32[0];
                          float v472 = *v464++;
                          float v473 = v472;
                          if (v396) {
                            float v471 = v320.f32[0];
                          }
                          *v463++ = (float)(v473 * v323) * v471;
                          --v462;
                        }
                        while (v462);
LABEL_411:
                        uint64_t v474 = v370[2];
                        uint64_t v475 = *(void *)(v474 + 8);
                        v476 = *(float32x4_t **)(v371[2] + 8);
                        v477 = *(float32x4_t **)(*(void *)(v372 + 16) + 8);
                        v478 = *(float32x4_t **)(v373[2] + 8);
                        unint64_t v479 = v449[7];
                        if (!v479) {
                          goto LABEL_431;
                        }
                        if (v479 >= 8
                          && ((unint64_t)v476 - v475 >= 0x10
                            ? (BOOL v480 = (unint64_t)(v475 - (void)v477) >= 0x10)
                            : (BOOL v480 = 0),
                              v480 ? (BOOL v481 = (unint64_t)v478 - v475 >= 0x10) : (BOOL v481 = 0),
                              v481 ? (BOOL v482 = (unint64_t)((char *)v476 - (char *)v477) >= 0x10) : (BOOL v482 = 0),
                              v482 ? (BOOL v483 = (unint64_t)((char *)v476 - (char *)v478) >= 0x10) : (BOOL v483 = 0),
                              v483))
                        {
                          unint64_t v484 = v479 & 0xFFFFFFFFFFFFFFFCLL;
                          v587 = v477;
                          float32x4_t v588 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                          v589 = *(float32x4_t **)(v474 + 8);
                          v590 = v478;
                          v591 = v476;
                          unint64_t v592 = v479 & 0xFFFFFFFFFFFFFFFCLL;
                          do
                          {
                            float32x4_t v593 = *v587++;
                            float32x4_t v594 = v593;
                            float32x4_t v595 = *v369++;
                            int8x16_t v596 = (int8x16_t)v595;
                            *v589++ = vsubq_f32(v594, v595);
                            int8x16_t v597 = (int8x16_t)vcgtq_f32(v588, v595);
                            float32x4_t v598 = *v590++;
                            *v591++ = vmulq_f32(vmulq_n_f32(v598, v323), (float32x4_t)vbslq_s8(v597, (int8x16_t)v588, v596));
                            v592 -= 4;
                          }
                          while (v592);
                          if (v479 == v484) {
                            goto LABEL_431;
                          }
                        }
                        else
                        {
                          unint64_t v484 = 0;
                        }
                        unint64_t v485 = v479 - v484;
                        uint64_t v486 = v484;
                        v487 = &v476->f32[v484];
                        v488 = &v478->f32[v486];
                        v489 = (float *)(v475 + v486 * 4);
                        v490 = (float *)&v657[v486 * 4 + 2944];
                        v491 = &v477->f32[v486];
                        do
                        {
                          float v492 = *v491++;
                          float v493 = v492;
                          float v494 = *v490++;
                          float v495 = v494;
                          *v489++ = v493 - v494;
                          BOOL v396 = v494 < v320.f32[0];
                          float v496 = *v488++;
                          float v497 = v496;
                          if (v396) {
                            float v495 = v320.f32[0];
                          }
                          *v487++ = (float)(v497 * v323) * v495;
                          --v485;
                        }
                        while (v485);
LABEL_431:
                        unint64_t v498 = v363 - v479;
                        if (v363 <= v479) {
                          goto LABEL_440;
                        }
                        if (v498 >= 0xC)
                        {
                          v499 = (int32x4_t *)&v476->f32[v479];
                          if ((unint64_t)v499 - v475 + -4 * v479 >= 0x20)
                          {
                            unint64_t v500 = v498 & 0xFFFFFFFFFFFFFFF8;
                            v501 = v499 + 1;
                            v502 = (_OWORD *)(v475 + 4 * v479);
                            int32x4_t v503 = vdupq_n_s32(0x49742400u);
                            unint64_t v504 = v498 & 0xFFFFFFFFFFFFFFF8;
                            do
                            {
                              _OWORD *v502 = 0uLL;
                              v502[1] = 0uLL;
                              v502 += 2;
                              v501[-1] = v503;
                              int32x4_t *v501 = v503;
                              v501 += 2;
                              v504 -= 8;
                            }
                            while (v504);
                            float v323 = 1.0 / v123;
                            if (v498 == v500)
                            {
LABEL_440:
                              unint64_t v509 = *(void *)(v474 + 16);
                              unint64_t v510 = v509 - v363;
                              if (v509 <= v363) {
                                return 0;
                              }
                              if (v510 >= 0xC)
                              {
                                uint64_t v511 = 4 * v363;
                                uint64_t v512 = (uint64_t)v476->i64 + 4 * v363;
                                uint64_t v513 = 4 * v363 + v475;
                                if ((unint64_t)(v512 - v513) >= 0x10)
                                {
                                  if ((unint64_t)(v513 - ((void)v477 + v511)) >= 0x10
                                    && (unint64_t)v478 + v511 - v513 >= 0x10
                                    && (unint64_t)(v512 - ((void)v477 + v511)) >= 0x10)
                                  {
                                    float v323 = 1.0 / v123;
                                    if ((unint64_t)(v512 - ((void)v478 + v511)) < 0x10) {
                                      goto LABEL_483;
                                    }
                                    unint64_t v514 = v510 & 0xFFFFFFFFFFFFFFFCLL;
                                    float32x4_t v515 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v320.f32, 0);
                                    v516 = (float32x4_t *)((char *)v476 + v511);
                                    v517 = (float32x4_t *)((char *)v478 + v511);
                                    v518 = (float32x4_t *)(v475 + v511);
                                    v519 = (float32x4_t *)&v657[v511 + 2944];
                                    v520 = (float32x4_t *)((char *)v477 + v511);
                                    unint64_t v521 = v510 & 0xFFFFFFFFFFFFFFFCLL;
                                    do
                                    {
                                      float32x4_t v522 = *v520++;
                                      float32x4_t v523 = v522;
                                      float32x4_t v524 = *v519++;
                                      int8x16_t v525 = (int8x16_t)v524;
                                      *v518++ = vsubq_f32(v523, v524);
                                      int8x16_t v526 = (int8x16_t)vcgtq_f32(v515, v524);
                                      float32x4_t v527 = *v517++;
                                      *v516++ = vmulq_f32(vmulq_n_f32(v527, v615), (float32x4_t)vbslq_s8(v526, (int8x16_t)v515, v525));
                                      v521 -= 4;
                                    }
                                    while (v521);
                                    if (v510 == v514) {
                                      return 0;
                                    }
                                    v363 += v514;
                                  }
                                  float v323 = 1.0 / v123;
                                }
                              }
LABEL_483:
                              uint64_t v599 = v509 - v363;
                              v600 = &v476->f32[v363];
                              v601 = &v478->f32[v363];
                              v602 = (float *)(v475 + 4 * v363);
                              v603 = (float *)&v657[4 * v363 + 2944];
                              v604 = &v477->f32[v363];
                              uint64_t result = 0;
                              do
                              {
                                float v605 = *v604++;
                                float v606 = v605;
                                float v607 = *v603++;
                                float v608 = v607;
                                *v602++ = v606 - v607;
                                BOOL v396 = v607 < v320.f32[0];
                                float v609 = *v601++;
                                float v610 = v609;
                                if (v396) {
                                  float v608 = v320.f32[0];
                                }
                                *v600++ = (float)(v610 * v323) * v608;
                                --v599;
                              }
                              while (v599);
                              return result;
                            }
                            v479 += v500;
                          }
                        }
                        unint64_t v505 = v363 - v479;
                        uint64_t v506 = 4 * v479;
                        v507 = &v476->i32[v479];
                        v508 = (_DWORD *)(v475 + v506);
                        do
                        {
                          *v508++ = 0;
                          *v507++ = 1232348160;
                          --v505;
                        }
                        while (v505);
                        goto LABEL_440;
                      }
                      v429 += v451;
                    }
                  }
                  unint64_t v456 = v356 - v429;
                  uint64_t v457 = 4 * v429;
                  v458 = (_DWORD *)(v426 + 4 * v429);
                  v459 = (_DWORD *)(v425 + v457);
                  do
                  {
                    *v459++ = 0;
                    *v458++ = 1232348160;
                    --v456;
                  }
                  while (v456);
                  goto LABEL_405;
                }
                v379 += v401;
              }
            }
            unint64_t v406 = v350 - v379;
            uint64_t v407 = 4 * v379;
            v408 = (_DWORD *)(v376 + 4 * v379);
            v409 = (_DWORD *)(v375 + v407);
            do
            {
              *v409++ = 0;
              *v408++ = 1232348160;
              --v406;
            }
            while (v406);
            goto LABEL_370;
          }
        }
        else
        {
          uint64_t v364 = 0;
        }
        unint64_t v367 = v363 - v364;
        v368 = &v661[v364];
        do
        {
          *v368++ = v324.i32[0];
          --v367;
        }
        while (v367);
        goto LABEL_339;
      }
    }
  }
  peridot_depth_log("Wrong Configuration: LEDTailStart", v611, v612);
  return 4;
}

void sub_25900B568(_Unwind_Exception *a1)
{
  GlobalEstimationResult::~GlobalEstimationResult((GlobalEstimationResult *)&STACK[0x488]);
  std::array<std::vector<unsigned char>,8ul>::~array((uint64_t)&STACK[0xF20]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void CRandomGenerator::CRandomGenerator(CRandomGenerator *this, unsigned int a2)
{
  *(void *)this = &unk_270717240;
  unsigned int v2 = 5489;
  uint64_t v3 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *((_DWORD *)this + i) = i + v5 - 2;
    ++v3;
  }
  *((_DWORD *)this + 2) = a2;
  uint64_t v6 = 1;
  for (uint64_t j = 3; j != 626; ++j)
  {
    int v8 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v8 + v6;
    *((_DWORD *)this + j) = j + v8 - 2;
    ++v6;
  }
  *((void *)this + 313) = 0;
}

{
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  uint64_t v6;
  uint64_t j;
  int v8;

  *(void *)this = &unk_270717240;
  unsigned int v2 = 5489;
  uint64_t v3 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v5 = 1812433253 * (v2 ^ (v2 >> 30));
    unsigned int v2 = v5 + v3;
    *((_DWORD *)this + i) = i + v5 - 2;
    ++v3;
  }
  *((_DWORD *)this + 2) = a2;
  uint64_t v6 = 1;
  for (uint64_t j = 3; j != 626; ++j)
  {
    int v8 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v8 + v6;
    *((_DWORD *)this + j) = j + v8 - 2;
    ++v6;
  }
  *((void *)this + 313) = 0;
}

uint64_t std::array<std::vector<unsigned char>,8ul>::~array(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 168);
  if (v2)
  {
    *(void *)(a1 + 176) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 144);
  if (v3)
  {
    *(void *)(a1 + 152) = v3;
    operator delete(v3);
  }
  double v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)(a1 + 96);
  if (v5)
  {
    *(void *)(a1 + 104) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 72);
  if (v6)
  {
    *(void *)(a1 + 80) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 48);
  if (v7)
  {
    *(void *)(a1 + 56) = v7;
    operator delete(v7);
  }
  int v8 = *(void **)(a1 + 24);
  if (v8)
  {
    *(void *)(a1 + 32) = v8;
    operator delete(v8);
  }
  float v9 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v9;
    operator delete(v9);
  }
  return a1;
}

float peridot::PeridotAlgo::Impl::calcRxArrayCoords(peridot::PeridotAlgo::Impl *this, int a2, peridot::PeridotUserOutput *a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  v52[21] = *MEMORY[0x263EF8340];
  v8.i32[0] = *(_DWORD *)a3;
  v9.i32[0] = *((_DWORD *)a3 + 21);
  v8.i32[1] = *((_DWORD *)a3 + 74);
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0x424171F27D620000uLL);
  v9.i32[1] = *((_DWORD *)a3 + 95);
  vDSP_Length v11 = (CGPoint (*)[14])&v51;
  v12.i32[0] = *((_DWORD *)a3 + 42);
  v12.i32[1] = *((_DWORD *)a3 + 116);
  v13.i32[0] = *((_DWORD *)a3 + 148);
  v13.i32[1] = *((_DWORD *)a3 + 222);
  v14.i32[0] = *((_DWORD *)a3 + 169);
  v14.i32[1] = *((_DWORD *)a3 + 243);
  v15.i32[0] = *((_DWORD *)a3 + 190);
  v52[0] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v8), v10));
  v52[1] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v13), v10));
  v15.i32[1] = *((_DWORD *)a3 + 264);
  v52[14] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v12), v10));
  v52[15] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v15), v10));
  float32x2_t v16 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v9), v10));
  v12.i32[0] = *((_DWORD *)a3 + 296);
  float32x2_t v17 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v14), v10));
  v13.i32[0] = *((_DWORD *)a3 + 317);
  v14.i32[0] = *((_DWORD *)a3 + 338);
  v12.i32[1] = *((_DWORD *)a3 + 370);
  v13.i32[1] = *((_DWORD *)a3 + 391);
  v52[8] = v17;
  v52[9] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v13), v10));
  v14.i32[1] = *((_DWORD *)a3 + 412);
  v13.i32[0] = *((_DWORD *)a3 + 444);
  float32x2_t v18 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v14), v10));
  v14.i32[0] = *((_DWORD *)a3 + 465);
  v13.i32[1] = *((_DWORD *)a3 + 518);
  v15.i32[0] = *((_DWORD *)a3 + 486);
  v52[2] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v12), v10));
  v52[3] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v13), v10));
  v14.i32[1] = *((_DWORD *)a3 + 539);
  float32x2_t v19 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v14), v10));
  v15.i32[1] = *((_DWORD *)a3 + 560);
  v52[16] = v18;
  v52[17] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v15), v10));
  v18.i32[0] = *((_DWORD *)a3 + 592);
  v13.i32[0] = *((_DWORD *)a3 + 613);
  v14.i32[0] = *((_DWORD *)a3 + 634);
  v18.i32[1] = *((_DWORD *)a3 + 666);
  v13.i32[1] = *((_DWORD *)a3 + 687);
  v52[10] = v19;
  v52[11] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v13), v10));
  v14.i32[1] = *((_DWORD *)a3 + 708);
  float32x2_t v20 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v14), v10));
  v13.i32[0] = *((_DWORD *)a3 + 740);
  v14.i32[0] = *((_DWORD *)a3 + 761);
  v13.i32[1] = *((_DWORD *)a3 + 814);
  v52[4] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v18), v10));
  v52[5] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v13), v10));
  v18.i32[0] = *((_DWORD *)a3 + 782);
  v14.i32[1] = *((_DWORD *)a3 + 835);
  v18.i32[1] = *((_DWORD *)a3 + 856);
  v52[18] = v20;
  v52[19] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v18), v10));
  v18.i32[0] = *((_DWORD *)a3 + 888);
  v18.i32[1] = *((_DWORD *)a3 + 962);
  v20.i32[0] = *((_DWORD *)a3 + 909);
  v52[6] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v18), v10));
  v52[7] = v16;
  v16.i32[0] = *((_DWORD *)a3 + 930);
  v20.i32[1] = *((_DWORD *)a3 + 983);
  v16.i32[1] = *((_DWORD *)a3 + 1004);
  v52[12] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v14), v10));
  v52[13] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v20), v10));
  v52[20] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v16), v10));
  do
  {
    peridot::PeridotAlgo::Impl::compensateCurrentLocationsForParallax(this, a2, (const float (*)[14])&v52[v6], v11);
    float x = (*v11)[0].x;
    float y = (*v11)[0].y;
    vDSP_Length v23 = (float *)((char *)a3 + v7);
    v23[8] = 84.0 - x;
    v23[9] = y;
    float v24 = (*v11)[1].x;
    float v25 = (*v11)[1].y;
    v23[82] = 84.0 - v24;
    v23[83] = v25;
    float v26 = (*v11)[2].x;
    float v27 = (*v11)[2].y;
    v23[156] = 84.0 - v26;
    v23[157] = v27;
    float v28 = (*v11)[3].x;
    float v29 = (*v11)[3].y;
    v23[230] = 84.0 - v28;
    v23[231] = v29;
    float v30 = (*v11)[4].x;
    float v31 = (*v11)[4].y;
    v23[304] = 84.0 - v30;
    v23[305] = v31;
    float v32 = (*v11)[5].x;
    float v33 = (*v11)[5].y;
    v23[378] = 84.0 - v32;
    v23[379] = v33;
    float v34 = (*v11)[6].x;
    float v35 = (*v11)[6].y;
    v23[452] = 84.0 - v34;
    v23[453] = v35;
    float v36 = (*v11)[7].x;
    float v37 = (*v11)[7].y;
    v23[526] = 84.0 - v36;
    v23[527] = v37;
    float v38 = (*v11)[8].x;
    float v39 = (*v11)[8].y;
    v23[600] = 84.0 - v38;
    v23[601] = v39;
    float v40 = (*v11)[9].x;
    float v41 = (*v11)[9].y;
    v23[674] = 84.0 - v40;
    v23[675] = v41;
    float v42 = (*v11)[10].x;
    float v43 = (*v11)[10].y;
    v23[748] = 84.0 - v42;
    v23[749] = v43;
    float v44 = (*v11)[11].x;
    float v45 = (*v11)[11].y;
    v23[822] = 84.0 - v44;
    v23[823] = v45;
    float v46 = (*v11)[12].x;
    float v47 = (*v11)[12].y;
    v23[896] = 84.0 - v46;
    v23[897] = v47;
    float v48 = (*v11)[13].x;
    float v49 = (*v11)[13].y;
    float result = 84.0 - v48;
    v7 += 84;
    v23[970] = 84.0 - v48;
    v6 += 7;
    ++v11;
    v23[971] = v49;
  }
  while (v7 != 252);
  return result;
}

void peridot::PeridotAlgo::Impl::compensateCurrentLocationsForParallax(peridot::PeridotAlgo::Impl *this, int a2, const float (*a3)[14], CGPoint (*a4)[14])
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  float64x2_t v6 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402560));
  v17[0] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402552));
  v17[1] = v6;
  uint64_t v7 = (char *)this + 402536;
  float64x2_t v8 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402576));
  v17[2] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402568));
  v17[3] = v8;
  float64x2_t v9 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402592));
  v17[4] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402584));
  v17[5] = v9;
  float64x2_t v10 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402608));
  v17[6] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402600));
  v17[7] = v10;
  float64x2_t v11 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402624));
  v17[8] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402616));
  v17[9] = v11;
  float64x2_t v12 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402640));
  v17[10] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402632));
  v17[11] = v12;
  float64x2_t v13 = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402656));
  v17[12] = vcvtq_f64_f32(*(float32x2_t *)((char *)this + 112 * a2 + 402648));
  v17[13] = v13;
  float32x2_t v14 = (int32x4_t *)operator new(0x38uLL);
  v15.i32[0] = *((_DWORD *)v7 + 228);
  int32x4_t v16 = vdupq_lane_s32(v15, 0);
  *float32x2_t v14 = v16;
  v14[1] = v16;
  v14[2] = v16;
  v14[3].i32[0] = v15.i32[0];
  v14[3].i32[1] = v15.i32[0];
  peridot::compensateForParallax(*(void **)v7, 0xEu, (uint64_t)v17, (uint64_t)v14, v7[916] == 0, (uint64_t)a3, 0, (uint64_t)a4);
  operator delete(v14);
}

void sub_25900BCBC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void peridot::compensateForParallax(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8)
{
  id v52 = a1;
  if (!a2)
  {
    float32x2_t v14 = 0;
    BOOL v15 = 0;
    float32x2_t v17 = 0;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    unint64_t v57 = 0;
    goto LABEL_12;
  }
  float32x2_t v14 = (double *)operator new(16 * a2);
  bzero(v14, 16 * a2);
  BOOL v15 = (int)a2 > 0;
  if ((int)a2 >= 1)
  {
    if (a2 > 3)
    {
      uint64_t v16 = a2 & 0xFFFFFFFC;
      uint64_t v18 = v14 + 4;
      float32x2_t v19 = (const double *)(a3 + 32);
      float64x2_t v20 = (float64x2_t)vdupq_n_s64(0x4055000000000000uLL);
      uint64_t v21 = v16;
      do
      {
        vDSP_Length v22 = v19 - 4;
        float64x2x2_t v59 = vld2q_f64(v22);
        float64x2x2_t v61 = vld2q_f64(v19);
        v59.val[0] = vsubq_f64(v20, v59.val[0]);
        vDSP_Length v23 = v18 - 4;
        vst2q_f64(v23, v59);
        v61.val[0] = vsubq_f64(v20, v61.val[0]);
        vst2q_f64(v18, v61);
        v18 += 8;
        v19 += 8;
        v21 -= 4;
      }
      while (v21);
      if (v16 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v24 = a2 - v16;
    uint64_t v25 = (16 * v16) | 8;
    float v26 = (double *)((char *)v14 + v25);
    float v27 = (double *)(a3 + v25);
    do
    {
      double v28 = *v27;
      *(v26 - 1) = 84.0 - *(v27 - 1);
      *float v26 = v28;
      v26 += 2;
      v27 += 2;
      --v24;
    }
    while (v24);
  }
LABEL_11:
  float32x2_t v17 = (float64x2_t *)operator new(16 * a2);
  unint64_t v55 = v17;
  unint64_t v57 = &v17[a2];
  bzero(v17, 16 * a2);
  unint64_t v56 = v57;
LABEL_12:
  [v52 undistort:a2 distortedPixels:v14 outUndistorted:v17];
  common::utils::getDistanceToPlane(v52, a2, &v55, a4, a5, (unsigned long long **)&v54);
  common::utils::getDistanceToPlane(v52, a2, &v55, a6, a7, (unsigned long long **)&__p);
  [v52 intrinsicMatrix];
  if (a2)
  {
    float v30 = (float *)__p;
    double v31 = v29;
    float v32 = (float *)v54;
    float v33 = v17;
    uint64_t v34 = a2;
    do
    {
      if (*v30 == 0.0) {
        float64x2_t v35 = 0uLL;
      }
      else {
        float64x2_t v35 = vmulq_n_f64((float64x2_t)xmmword_259120470, (float)((float)(1.0 / *v32) - (float)(1.0 / *v30)) * v31);
      }
      float64x2_t *v33 = vaddq_f64(*v33, v35);
      ++v33;
      ++v32;
      ++v30;
      --v34;
    }
    while (v34);
    float v36 = (double *)operator new(16 * a2);
    bzero(v36, 16 * a2);
  }
  else
  {
    float v36 = 0;
  }
  [v52 distort:a2 undistortedPixels:v17 outDistorted:v36];
  if (v15)
  {
    if (a2 < 4)
    {
      uint64_t v37 = 0;
      uint64_t v38 = a8;
LABEL_38:
      uint64_t v46 = a2 - v37;
      uint64_t v47 = (16 * v37) | 8;
      float v48 = (double *)(v38 + v47);
      float v49 = (double *)((char *)v36 + v47);
      do
      {
        double v50 = *v49;
        *(v48 - 1) = 84.0 - *(v49 - 1);
        *float v48 = v50;
        v48 += 2;
        v49 += 2;
        --v46;
      }
      while (v46);
      goto LABEL_40;
    }
    uint64_t v37 = a2 & 0xFFFFFFFC;
    uint64_t v38 = a8;
    float v40 = (double *)(a8 + 32);
    float v41 = v36 + 4;
    float64x2_t v42 = (float64x2_t)vdupq_n_s64(0x4055000000000000uLL);
    uint64_t v43 = v37;
    do
    {
      float v44 = v41 - 4;
      float64x2x2_t v60 = vld2q_f64(v44);
      float64x2x2_t v62 = vld2q_f64(v41);
      v60.val[0] = vsubq_f64(v42, v60.val[0]);
      float v45 = v40 - 4;
      vst2q_f64(v45, v60);
      v62.val[0] = vsubq_f64(v42, v62.val[0]);
      vst2q_f64(v40, v62);
      v40 += 8;
      v41 += 8;
      v43 -= 4;
    }
    while (v43);
    if (v37 != a2) {
      goto LABEL_38;
    }
  }
  else if (!v36)
  {
    float v39 = __p;
    if (!__p) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
LABEL_40:
  operator delete(v36);
  float v39 = __p;
  if (__p) {
LABEL_25:
  }
    operator delete(v39);
LABEL_26:
  if (v54) {
    operator delete(v54);
  }
  if (v17)
  {
    unint64_t v56 = v17;
    operator delete(v17);
  }
  if (v14) {
    operator delete(v14);
  }
}

void sub_25900C044(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (__p)
  {
    operator delete(__p);
    uint64_t v21 = a15;
    if (a15)
    {
LABEL_9:
      operator delete(v21);
      if (v20)
      {
LABEL_10:
        operator delete(v20);
        if (!v19)
        {
LABEL_6:

          _Unwind_Resume(a1);
        }
LABEL_5:
        operator delete(v19);
        goto LABEL_6;
      }
LABEL_4:
      if (!v19) {
        goto LABEL_6;
      }
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v21 = a15;
    if (a15) {
      goto LABEL_9;
    }
  }
  if (v20) {
    goto LABEL_10;
  }
  goto LABEL_4;
}

void sub_25900C0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15) {
    JUMPOUT(0x25900C0BCLL);
  }
  JUMPOUT(0x25900C070);
}

void sub_25900C0E8()
{
  if (v0) {
    JUMPOUT(0x25900C0C4);
  }
  JUMPOUT(0x25900C074);
}

void sub_25900C0F4()
{
  if (v0) {
    JUMPOUT(0x25900C0C4);
  }
  JUMPOUT(0x25900C074);
}

void common::utils::getDistanceToPlane(void *a1@<X0>, signed int a2@<W1>, void *a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, unsigned long long **a6@<X8>)
{
  id v35 = a1;
  a6[1] = 0;
  a6[2] = 0;
  *a6 = 0;
  if (!a2)
  {
    float64x2_t v11 = 0;
    if (a5) {
      goto LABEL_4;
    }
LABEL_9:
    if (a2)
    {
      float64x2_t v13 = (float *)operator new(16 * a2);
      bzero(v13, 16 * a2);
    }
    else
    {
      float64x2_t v13 = 0;
    }
    [v35 backProject:a2 undistortedPixels:*a3 withR:a4 outPoints:v13];
    if (a2)
    {
      if (a2 > 8)
      {
        uint64_t v24 = a2 & 7;
        if ((a2 & 7) == 0) {
          uint64_t v24 = 8;
        }
        uint64_t v14 = a2 - v24;
        uint64_t v25 = v11 + 1;
        float v26 = v13 + 18;
        uint64_t v27 = v14;
        do
        {
          double v28 = v26 - 16;
          unsigned long long v29 = (unsigned __int128)vld4q_f32(v28);
          unsigned long long v30 = (unsigned __int128)vld4q_f32(v26);
          *(v25 - 1) = v29;
          unsigned long long *v25 = v30;
          v25 += 2;
          v26 += 32;
          v27 -= 8;
        }
        while (v27);
      }
      else
      {
        uint64_t v14 = 0;
      }
      uint64_t v31 = a2 - v14;
      float v32 = (_DWORD *)v11 + v14;
      float v33 = &v13[4 * v14 + 2];
      do
      {
        int v34 = *(_DWORD *)v33;
        v33 += 4;
        *v32++ = v34;
        --v31;
      }
      while (v31);
    }
    else if (!v13)
    {
      goto LABEL_30;
    }
    operator delete(v13);
    goto LABEL_30;
  }
  if (a2 < 0) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  float64x2_t v11 = (unsigned long long *)operator new(4 * a2);
  *a6 = v11;
  a6[2] = (unsigned long long *)((char *)v11 + 4 * a2);
  bzero(v11, 4 * a2);
  a6[1] = (unsigned long long *)((char *)v11 + 4 * a2);
  if (!a5) {
    goto LABEL_9;
  }
LABEL_4:
  if (a5 != 1) {
    __assert_rtn("getDistanceToPlane", "PeridotDepthCommonUtils.mm", 42, "false");
  }
  if (a2)
  {
    if (a2 <= 7)
    {
      uint64_t v12 = 0;
LABEL_20:
      uint64_t v19 = a2 - v12;
      uint64_t v20 = 4 * v12;
      uint64_t v21 = (_DWORD *)v11 + v12;
      vDSP_Length v22 = (int *)(a4 + v20);
      do
      {
        int v23 = *v22++;
        *v21++ = v23;
        --v19;
      }
      while (v19);
      goto LABEL_30;
    }
    uint64_t v12 = a2 & 0xFFFFFFF8;
    BOOL v15 = v11 + 1;
    uint64_t v16 = (long long *)(a4 + 16);
    uint64_t v17 = v12;
    do
    {
      long long v18 = *v16;
      *(v15 - 1) = *(v16 - 1);
      _OWORD *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v12 != a2) {
      goto LABEL_20;
    }
  }
LABEL_30:
}

void sub_25900C318(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10)
  {
    *(void *)(v11 + 8) = v10;
    operator delete(v10);
  }

  _Unwind_Resume(a1);
}

void peridot::PeridotDxpMacroSpatial::shiftToDistance(uint64_t a1, float a2, float a3, float a4, float a5)
{
  v10[0] = 84.0 - a2;
  v10[1] = a3;
  v9[0] = 84.0 - a4;
  v9[1] = a5;
  [*(id *)(a1 + 48) undistort:1 distortedPixels:v10 outUndistorted:&v8];
  [*(id *)(a1 + 48) undistort:1 distortedPixels:v9 outUndistorted:v7];
  float64x2_t v6 = &unk_270717340;
  operator new[]();
}

void sub_25900C714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t Matrix<float>::Inverse(uint64_t a1, uint64_t a2)
{
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  *(void *)a1 = &unk_270717340;
  if (v4 * v5) {
    operator new[]();
  }
  uint64_t result = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 4 * v5 * (unint64_t)v4;
  uint64_t v7 = *(float **)(a2 + 8);
  float v8 = *v7;
  if (v5 == 3)
  {
    float v9 = (float)((float)((float)-(float)((float)(v7[7] * v7[5]) - (float)(v7[8] * v7[4])) * v8)
               + (float)((float)-(float)((float)(v7[6] * v7[4]) - (float)(v7[3] * v7[7])) * v7[2]))
       + (float)((float)-(float)((float)(v7[3] * v7[8]) - (float)(v7[6] * v7[5])) * v7[1]);
    if (v9 == 0.0) {
      return result;
    }
  }
  else
  {
    float v10 = v7[3];
    float v9 = -(float)((float)(v7[2] * v7[1]) - (float)(v10 * v8));
    if (v9 == 0.0) {
      return result;
    }
    if (v5 == 2)
    {
      float v11 = 1.0 / v9;
      MEMORY[0] = v10 * v11;
      MEMORY[4] = -(float)(v7[1] * v11);
      MEMORY[8] = -(float)(v7[2] * v11);
      MEMORY[0xC] = *v7 * v11;
      return result;
    }
  }
  uint64_t v12 = *(unsigned int *)(a2 + 20);
  if (v12)
  {
    uint64_t v13 = 0;
    int v14 = 5;
    unsigned int v15 = 1;
    int v16 = 8;
    unsigned int v17 = 2;
    int v18 = 7;
    int v19 = 4;
    float v20 = 1.0 / v9;
    do
    {
      LODWORD(result) = 0;
      uint64_t v21 = 0;
      unsigned int v22 = 9 * (v15 / 3);
      unsigned int v23 = 9 * (v17 / 3);
      uint64_t v24 = v13 + 1;
      unsigned int v25 = v14 - v22;
      unsigned int v26 = v16 - v23;
      unsigned int v27 = v18 - v23;
      unsigned int v28 = v19 - v22;
      unsigned int v29 = 2;
      unsigned int v30 = 1;
      do
      {
        uint64_t v31 = *(void *)(a2 + 8);
        *(float *)(*(void *)(a1 + 8) + 4 * v13 + 4 * result) = (float)-(float)((float)(*(float *)(v31 + 4 * (v21 + v27 - 3 * (v30 / 3))) * *(float *)(v31 + 4 * (v21 + v25 - 3 * (v29 / 3))))
                                                                                               - (float)(*(float *)(v31 + 4 * (v21 + v26 - 3 * (v29 / 3))) * *(float *)(v31 + 4 * (v21 + v28 - 3 * (v30 / 3)))))
                                                                               * v20;
        uint64_t result = result + v4;
        ++v29;
        ++v30;
        ++v21;
      }
      while (v12 != v21);
      v14 += 3;
      ++v15;
      v16 += 3;
      ++v17;
      v18 += 3;
      v19 += 3;
      ++v13;
    }
    while (v24 != v12);
  }
  return result;
}

void vDSPVfill<float>(const float *a1, float *a2, int a3, int a4)
{
}

float CRandomGenerator::UniformRand(CRandomGenerator *this)
{
  uint64_t v1 = *((void *)this + 313);
  unint64_t v2 = (v1 + 1) % 0x270uLL;
  uint64_t v3 = 4 * v1;
  LODWORD(v1) = *((_DWORD *)this + (v1 + 397) % 0x270uLL + 2) ^ ((*((_DWORD *)this + v2 + 2) & 0x7FFFFFFE | *((_DWORD *)this + v1 + 2) & 0x80000000) >> 1) ^ ((int)(*((_DWORD *)this + v2 + 2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)((char *)this + v3 + 8) = v1;
  *((void *)this + 313) = v2;
  int v4 = ((v1 ^ (v1 >> 11)) << 7) & 0x9D2C5680 ^ v1 ^ (v1 >> 11);
  return (float)((float)((v4 << 15) & 0xEFC60000 ^ v4 ^ (((v4 << 15) & 0xEFC60000 ^ v4) >> 18)) * 2.3283e-10) + 0.0;
}

void sub_25900E794(_Unwind_Exception *exception_object)
{
  if (v2) {
    operator delete(v2);
  }
  if (v1)
  {
    operator delete(v1);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t peridot::PeridotDXP::macroProcess(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5, float *a6, float *a7, float *a8, float a9, float a10, double a11, BOOL *a12, uint64_t a13)
{
  float v17 = *(float *)&a11;
  float v18 = a10;
  float v22 = *(float *)(a1 + 3512);
  LOBYTE(a10) = *(unsigned char *)(a1 + 22);
  float v23 = (float)LODWORD(a10);
  uint64_t v24 = *(unsigned __int8 *)(a1 + 21);
  if (!*(unsigned char *)(a1 + 21))
  {
    float v26 = 0.0;
    goto LABEL_18;
  }
  *(float *)&a11 = (float)*(unsigned __int8 *)(a1 + 20);
  if (v24 <= 7)
  {
    uint64_t v25 = 0;
    float v26 = 0.0;
LABEL_8:
    uint64_t v33 = v24 - v25;
    int v34 = (float *)(a1 + 4 * v25 + 3464);
    do
    {
      float v35 = *v34++;
      float v26 = v26 + (float)(v35 * *(float *)&a11);
      --v33;
    }
    while (v33);
    goto LABEL_10;
  }
  unsigned int v27 = (float32x4_t *)(a1 + 3480);
  uint64_t v25 = v24 & 0xF8;
  float32x4_t v28 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
  float32x4_t v29 = 0uLL;
  uint64_t v30 = v25;
  float32x4_t v31 = 0uLL;
  do
  {
    float32x4_t v29 = vmlaq_f32(v29, v28, v27[-1]);
    float32x4_t v31 = vmlaq_f32(v31, v28, *v27);
    v27 += 2;
    v30 -= 8;
  }
  while (v30);
  float32x4_t v32 = vaddq_f32(v31, v29);
  float v26 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v32, v32));
  if (v25 != v24) {
    goto LABEL_8;
  }
LABEL_10:
  if (*(unsigned char *)(a1 + 20))
  {
    uint64_t v36 = 0;
    *(float *)&a11 = 1.0 / v26;
    float32x4_t v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a11, 0);
    uint64_t v38 = *(void *)(a1 + 181856);
    uint64_t v39 = *a3 + 640 * a4;
    uint64_t v40 = 9280 * *(unsigned __int8 *)(a1 + 20);
    do
    {
      uint64_t v41 = 0;
      uint64_t v42 = *(void *)(v38 + 24 * v36 + 8);
      float v43 = *(float *)(v42 + 364);
      do
      {
        _X17 = (uint16x4_t *)(v39 + v41);
        __asm
        {
          PRFM            #0, [X17,#0x2580]
          PRFM            #0, [X17,#0x25C0]
          PRFM            #0, [X17,#0x2600]
        }
        if (v41)
        {
          float32x4_t v63 = vmlaq_f32(*(float32x4_t *)(v42 + 16), vcvtq_f32_u32(vmovl_u16(_X17[41])), v37);
          *(float32x4_t *)uint64_t v42 = vmlaq_f32(*(float32x4_t *)v42, vcvtq_f32_u32(vmovl_u16(_X17[40])), v37);
          *(float32x4_t *)(v42 + 16) = v63;
          float32x4_t v64 = vmlaq_f32(*(float32x4_t *)(v42 + 48), vcvtq_f32_u32(vmovl_u16(_X17[43])), v37);
          *(float32x4_t *)(v42 + 32) = vmlaq_f32(*(float32x4_t *)(v42 + 32), vcvtq_f32_u32(vmovl_u16(_X17[42])), v37);
          *(float32x4_t *)(v42 + 48) = v64;
          float32x4_t v65 = vmlaq_f32(*(float32x4_t *)(v42 + 80), vcvtq_f32_u32(vmovl_u16(_X17[45])), v37);
          *(float32x4_t *)(v42 + 64) = vmlaq_f32(*(float32x4_t *)(v42 + 64), vcvtq_f32_u32(vmovl_u16(_X17[44])), v37);
          *(float32x4_t *)(v42 + 80) = v65;
          float32x4_t v66 = vmlaq_f32(*(float32x4_t *)(v42 + 112), vcvtq_f32_u32(vmovl_u16(_X17[47])), v37);
          *(float32x4_t *)(v42 + 96) = vmlaq_f32(*(float32x4_t *)(v42 + 96), vcvtq_f32_u32(vmovl_u16(_X17[46])), v37);
          *(float32x4_t *)(v42 + 112) = v66;
          float32x4_t v67 = vmlaq_f32(*(float32x4_t *)(v42 + 144), vcvtq_f32_u32(vmovl_u16(_X17[49])), v37);
          *(float32x4_t *)(v42 + 128) = vmlaq_f32(*(float32x4_t *)(v42 + 128), vcvtq_f32_u32(vmovl_u16(_X17[48])), v37);
          *(float32x4_t *)(v42 + 144) = v67;
          float32x4_t v68 = vmlaq_f32(*(float32x4_t *)(v42 + 176), vcvtq_f32_u32(vmovl_u16(_X17[51])), v37);
          *(float32x4_t *)(v42 + 160) = vmlaq_f32(*(float32x4_t *)(v42 + 160), vcvtq_f32_u32(vmovl_u16(_X17[50])), v37);
          *(float32x4_t *)(v42 + 176) = v68;
          float32x4_t v69 = vmlaq_f32(*(float32x4_t *)(v42 + 208), vcvtq_f32_u32(vmovl_u16(_X17[53])), v37);
          *(float32x4_t *)(v42 + 192) = vmlaq_f32(*(float32x4_t *)(v42 + 192), vcvtq_f32_u32(vmovl_u16(_X17[52])), v37);
          *(float32x4_t *)(v42 + 208) = v69;
          float32x4_t v70 = vmlaq_f32(*(float32x4_t *)(v42 + 240), vcvtq_f32_u32(vmovl_u16(_X17[55])), v37);
          *(float32x4_t *)(v42 + 224) = vmlaq_f32(*(float32x4_t *)(v42 + 224), vcvtq_f32_u32(vmovl_u16(_X17[54])), v37);
          *(float32x4_t *)(v42 + 240) = v70;
          float32x4_t v71 = vmlaq_f32(*(float32x4_t *)(v42 + 272), vcvtq_f32_u32(vmovl_u16(_X17[57])), v37);
          *(float32x4_t *)(v42 + 256) = vmlaq_f32(*(float32x4_t *)(v42 + 256), vcvtq_f32_u32(vmovl_u16(_X17[56])), v37);
          *(float32x4_t *)(v42 + 272) = v71;
          float32x4_t v72 = vmlaq_f32(*(float32x4_t *)(v42 + 304), vcvtq_f32_u32(vmovl_u16(_X17[59])), v37);
          *(float32x4_t *)(v42 + 288) = vmlaq_f32(*(float32x4_t *)(v42 + 288), vcvtq_f32_u32(vmovl_u16(_X17[58])), v37);
          *(float32x4_t *)(v42 + 304) = v72;
          float32x4_t v73 = vmlaq_f32(*(float32x4_t *)(v42 + 336), vcvtq_f32_u32(vmovl_u16(_X17[61])), v37);
          *(float32x4_t *)(v42 + 320) = vmlaq_f32(*(float32x4_t *)(v42 + 320), vcvtq_f32_u32(vmovl_u16(_X17[60])), v37);
          *(float32x4_t *)(v42 + 336) = v73;
          v74.i32[0] = _X17[62].u16[0];
          v74.i32[1] = _X17[62].u16[1];
          float32x2_t v75 = vcvt_f32_u32(v74);
          *(float32x2_t *)(v42 + 352) = vmla_f32(*(float32x2_t *)(v42 + 352), v75, *(float32x2_t *)v37.f32);
          v75.i16[0] = _X17[62].i16[2];
          v75.f32[0] = *(float *)(v42 + 360) + (float)(*(float *)&a11 * (float)v75.u32[0]);
          *(_DWORD *)(v42 + 360) = v75.i32[0];
          v75.i16[0] = _X17[62].i16[3];
          float v43 = v43 + (float)(*(float *)&a11 * (float)v75.u32[0]);
        }
        else
        {
          uint16x8_t v44 = *(uint16x8_t *)_X17[40].i8;
          uint16x8_t v45 = *(uint16x8_t *)_X17[42].i8;
          *(float32x4_t *)uint64_t v42 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v44.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 16) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v44)), *(float *)&a11);
          *(float32x4_t *)(v42 + 32) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v45.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 48) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v45)), *(float *)&a11);
          uint16x8_t v46 = *(uint16x8_t *)_X17[44].i8;
          uint16x8_t v47 = *(uint16x8_t *)_X17[46].i8;
          *(float32x4_t *)(v42 + 64) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v46.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 80) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v46)), *(float *)&a11);
          *(float32x4_t *)(v42 + 96) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v47.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 112) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v47)), *(float *)&a11);
          uint16x8_t v48 = *(uint16x8_t *)_X17[48].i8;
          uint16x8_t v49 = *(uint16x8_t *)_X17[50].i8;
          *(float32x4_t *)(v42 + 128) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v48.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 144) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v48)), *(float *)&a11);
          *(float32x4_t *)(v42 + 160) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v49.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 176) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v49)), *(float *)&a11);
          uint16x8_t v50 = *(uint16x8_t *)_X17[52].i8;
          uint16x8_t v51 = *(uint16x8_t *)_X17[54].i8;
          *(float32x4_t *)(v42 + 192) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v50.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 208) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v50)), *(float *)&a11);
          *(float32x4_t *)(v42 + 224) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v51.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 240) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v51)), *(float *)&a11);
          uint16x8_t v52 = *(uint16x8_t *)_X17[56].i8;
          uint16x8_t v53 = *(uint16x8_t *)_X17[58].i8;
          *(float32x4_t *)(v42 + 256) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v52.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 272) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v52)), *(float *)&a11);
          *(float32x4_t *)(v42 + 288) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v53.i8)), *(float *)&a11);
          *(float32x4_t *)(v42 + 304) = vmulq_n_f32(vcvtq_f32_u32(vmovl_high_u16(v53)), *(float *)&a11);
          *(float32x4_t *)(v42 + 320) = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(_X17[60])), *(float *)&a11);
          float32x4_t v54 = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(_X17[61])), *(float *)&a11);
          *(float32x4_t *)(v42 + 336) = v54;
          v54.i16[0] = _X17[62].i16[0];
          v54.f32[0] = *(float *)&a11 * (float)v54.u32[0];
          *(_DWORD *)(v42 + 352) = v54.i32[0];
          v54.i16[0] = _X17[62].i16[1];
          v54.f32[0] = *(float *)&a11 * (float)v54.u32[0];
          *(_DWORD *)(v42 + 356) = v54.i32[0];
          v54.i16[0] = _X17[62].i16[2];
          v54.f32[0] = *(float *)&a11 * (float)v54.u32[0];
          *(_DWORD *)(v42 + 360) = v54.i32[0];
          v54.i16[0] = _X17[62].i16[3];
          float v43 = *(float *)&a11 * (float)v54.u32[0];
        }
        *(float *)(v42 + 364) = v43;
        v41 += 9280;
      }
      while (v40 != v41);
      ++v36;
      v39 += v40;
    }
    while (v36 != v24);
  }
LABEL_18:
  float v76 = v22 * v23;
  uint64_t v77 = a3[1];
  uint64_t v88 = 92;
  uint64_t v86 = 92;
  if (*(_DWORD *)(a1 + 16) != 2)
  {
    if (!*(unsigned char *)(a1 + 1)) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (*(unsigned char *)(a1 + 1))
  {
    float v78 = 1.0 / v76;
    uint64_t v79 = 0;
    uint64_t v80 = (uint16x4_t *)(v77 + 640 * a4);
    if (a5)
    {
      unint64_t v81 = v80 + 40;
      do
      {
        *(float32x4_t *)&v87[v79] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(v81[24])), v78);
        uint16x4_t v82 = *v81++;
        *(float32x4_t *)&v85[v79] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(v82)), v78);
        v79 += 16;
      }
      while (v79 != 368);
    }
    else
    {
      do
      {
        *(float32x4_t *)&v87[v79] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(v80[88])), v78);
        *(float32x4_t *)&v85[v79] = vmulq_n_f32(vcvtq_f32_u32(vmovl_u16(v80[40])), v78);
        v79 += 16;
        ++v80;
      }
      while (v79 != 368);
    }
LABEL_27:
    peridot::PeridotDXP::initMacroSpecs(a1, *a3, v77, a3[2], a4, (uint64_t)v84, a9);
  }
LABEL_28:
  peridot::PeridotDXP::macroProcessInner(a1, a2, a1 + 181856, v87, v85, (uint64_t)v84, a4, v26, v76, a9, v18, v17, 0, a6, a7, a8, a12, a13 + 192 * a4);
  return 0;
}

void peridot::PeridotDXP::initMacroSpecs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float a7)
{
  v112[68] = *MEMORY[0x263EF8340];
  uint64_t v7 = *(unsigned __int8 *)(a1 + 21);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 20);
  uint64_t v104 = v7;
  if (*(unsigned char *)(a1 + 21) && *(unsigned char *)(a1 + 20))
  {
    uint64_t v9 = 0;
    uint64_t v10 = a2 + 640 * a5 + 920;
    float v11 = (float32x4_t *)v112;
    do
    {
      uint64_t v12 = v11;
      uint64_t v13 = (unsigned int *)v10;
      uint64_t v14 = v8;
      do
      {
        uint32x4_t v15 = (uint32x4_t)vdupq_n_s32(*v13);
        v16.i32[0] = *v13;
        v16.i32[1] = *v13 >> 2;
        v16.u64[1] = (unint64_t)vshl_u32(*(uint32x2_t *)v15.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFCLL);
        float32x4_t v17 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32(v16, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v13 - 6)), 2uLL));
        float32x4_t v18 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v15, (uint32x4_t)xmmword_259120450), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v13 - 4)), 2uLL));
        v12[-2] = v17;
        v12[-1] = v18;
        float32x4_t *v12 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v15, (uint32x4_t)xmmword_259120460), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v13 - 2)), 2uLL));
        v12 += 9;
        v13 += 2320;
        --v14;
      }
      while (v14);
      ++v9;
      v10 += 9280 * v8;
      v11 += 3;
    }
    while (v9 != v7);
  }
  uint64_t v19 = 0;
  float v20 = (uint16x4_t *)(a3 + 640 * a5);
  unsigned int v21 = v20[115].u32[0];
  float v22 = (uint16x4_t *)(a4 + 640 * a5);
  unsigned int v23 = v22[115].u32[0];
  uint32x4_t v24 = (uint32x4_t)vdupq_n_s32(v21);
  v25.i32[0] = v21;
  v25.i32[1] = v21 >> 2;
  v25.u64[1] = (unint64_t)vshl_u32(*(uint32x2_t *)v24.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFCLL);
  uint32x4_t v26 = (uint32x4_t)vdupq_n_s32(v23);
  v27.i32[0] = v23;
  v27.i32[1] = v23 >> 2;
  v27.u64[1] = (unint64_t)vshl_u32(*(uint32x2_t *)v26.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFCLL);
  float32x4_t v28 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32(v25, (int32x4_t)vmovl_u16(v20[112]), 2uLL));
  float32x4_t v29 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32(v27, (int32x4_t)vmovl_u16(v22[112]), 2uLL));
  float32x4_t v30 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v24, (uint32x4_t)xmmword_259120450), (int32x4_t)vmovl_u16(v20[113]), 2uLL));
  v111[0] = v28;
  v111[1] = v30;
  float32x4_t v31 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v26, (uint32x4_t)xmmword_259120450), (int32x4_t)vmovl_u16(v22[113]), 2uLL));
  v110[0] = v29;
  v110[1] = v31;
  unsigned int v32 = -16;
  v111[2] = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v24, (uint32x4_t)xmmword_259120460), (int32x4_t)vmovl_u16(v20[114]), 2uLL));
  v110[2] = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v26, (uint32x4_t)xmmword_259120460), (int32x4_t)vmovl_u16(v22[114]), 2uLL));
  LOBYTE(v32) = *(unsigned char *)(a1 + 22);
  *(float *)v26.i32 = *(float *)(a1 + 3512) * (float)v32;
  float v33 = 1.0 / *(float *)v26.i32;
  v31.f32[0] = *(float *)(a1 + 3464) * (float)v8;
  unint64_t v34 = v8;
  float v35 = *(float *)v26.i32 + -1.0;
  float v36 = v31.f32[0] + -1.0;
  uint64_t v37 = v8 & 0xFE;
  float v38 = 1.0 / a7;
  uint64_t v39 = &v111[3 * (~(2 * *(unsigned char *)(a1 + 181824)) & 2) + 3];
  float v40 = 1.0 / v31.f32[0];
  do
  {
    if (!v34)
    {
      float v41 = 0.0;
      goto LABEL_9;
    }
    if (v34 == 1)
    {
      uint64_t v44 = 0;
      float v41 = 0.0;
LABEL_22:
      uint64_t v49 = v34 - v44;
      uint64_t v50 = 9 * v44;
      do
      {
        float v41 = *(float *)&v39[v50] + v41;
        v50 += 9;
        --v49;
      }
      while (v49);
      goto LABEL_9;
    }
    float v45 = 0.0;
    uint16x8_t v46 = (float *)v39;
    uint64_t v47 = v37;
    float v48 = 0.0;
    do
    {
      float v45 = *v46 + v45;
      float v48 = v46[36] + v48;
      v46 += 72;
      v47 -= 2;
    }
    while (v47);
    float v41 = v48 + v45;
    uint64_t v44 = v37;
    if (v34 != v37) {
      goto LABEL_22;
    }
LABEL_9:
    if (v36 < v41) {
      float v41 = v36;
    }
    *(float *)&v109[4 * v19 + 128] = -logf(1.0 - (float)(v41 * v40));
    float v42 = *((float *)v111 + v19);
    if (v35 < v42) {
      float v42 = v35;
    }
    *(float *)&v109[4 * v19 + 80] = -(float)(logf(1.0 - (float)(v42 * v33)) * v38);
    float v43 = *((float *)v110 + v19);
    if (v35 < v43) {
      float v43 = v35;
    }
    *(float *)&v109[4 * v19++ + 32] = -(float)(logf(1.0 - (float)(v43 * v33)) * v38);
    uint64_t v39 = (_OWORD *)((char *)v39 + 4);
  }
  while (v19 != 12);
  uint64_t v51 = a6;
  if (v34 && v7)
  {
    uint64_t v52 = 0;
    size_t v53 = 4 * v104;
    float32x4_t v54 = __dst;
    unint64_t v55 = v107;
    unint64_t v56 = v106;
    unint64_t v57 = v34;
    do
    {
      memcpy(v54, &v109[v52 + 128], v53);
      memcpy(v55, &v109[v52 + 80], v53);
      memcpy(v56, &v109[v52 + 32], v53);
      v52 += v53;
      v54 += 12;
      v55 += 12;
      v56 += 12;
      --v57;
    }
    while (v57);
    if (v34 >= 2)
    {
      uint64_t v60 = 0;
      float64x2x2_t v61 = __dst;
      uint64_t v58 = v104;
      uint64_t v51 = a6;
      float64x2x2_t v62 = (_DWORD *)a6;
      do
      {
        float32x4_t v63 = v61;
        float32x4_t v64 = v62;
        uint64_t v65 = v37;
        do
        {
          int v66 = v63[3];
          *float32x4_t v64 = *v63;
          v64[3] = v66;
          v64 += 6;
          v63 += 6;
          v65 -= 2;
        }
        while (v65);
        if (v34 != v37)
        {
          uint64_t v67 = 6 * (v34 >> 1);
          uint64_t v68 = v34 - v37;
          do
          {
            v62[v67] = *(_DWORD *)&v61[v67 * 4];
            v67 += 3;
            --v68;
          }
          while (v68);
        }
        ++v60;
        ++v62;
        v61 += 4;
      }
      while (v60 != v104);
    }
    else
    {
      uint64_t v58 = v104;
      uint64_t v51 = a6;
      if (v104 < 8)
      {
        uint64_t v59 = 0;
        goto LABEL_43;
      }
      uint64_t v59 = v104 & 0xF8;
      float32x4_t v69 = (long long *)v109;
      float32x4_t v70 = (_OWORD *)(a6 + 16);
      uint64_t v71 = v59;
      do
      {
        long long v72 = *v69;
        *(v70 - 1) = *(v69 - 1);
        *float32x4_t v70 = v72;
        v69 += 2;
        v70 += 2;
        v71 -= 8;
      }
      while (v71);
      if (v59 != v104)
      {
LABEL_43:
        uint64_t v73 = v104 - v59;
        uint64_t v74 = 4 * v59;
        float32x2_t v75 = (_DWORD *)(a6 + 4 * v59);
        float v76 = (int *)&__dst[v74];
        do
        {
          int v77 = *v76++;
          *v75++ = v77;
          --v73;
        }
        while (v73);
      }
    }
    if (v34 >= 2)
    {
      uint64_t v95 = 0;
      float64x2_t v96 = (_DWORD *)(v51 + 24);
      float64x2_t v97 = v107;
      do
      {
        unint64_t v98 = v96;
        uint64_t v99 = v37;
        uint64_t v100 = v97;
        do
        {
          int v101 = v100[3];
          *unint64_t v98 = *v100;
          v98[3] = v101;
          v100 += 6;
          v98 += 6;
          v99 -= 2;
        }
        while (v99);
        if (v34 != v37)
        {
          uint64_t v102 = 6 * (v34 >> 1);
          uint64_t v103 = v34 - v37;
          do
          {
            v96[v102] = *(_DWORD *)&v97[v102 * 4];
            v102 += 3;
            --v103;
          }
          while (v103);
        }
        ++v95;
        v97 += 4;
        ++v96;
      }
      while (v95 != v58);
    }
    else
    {
      uint64_t v78 = 0;
      uint64_t v79 = (_DWORD *)(v51 + 24);
      uint64_t v80 = (int *)v107;
      do
      {
        unint64_t v81 = v80;
        uint16x4_t v82 = v79;
        unint64_t v83 = v34;
        do
        {
          int v84 = *v81;
          v81 += 3;
          _DWORD *v82 = v84;
          v82 += 3;
          --v83;
        }
        while (v83);
        ++v78;
        ++v79;
        ++v80;
      }
      while (v78 != v58);
    }
    uint64_t v85 = 0;
    uint64_t v86 = (_DWORD *)(v51 + 60);
    unint64_t v87 = v106;
    while (2)
    {
      if (v34 < 2)
      {
        uint64_t v88 = 0;
        goto LABEL_57;
      }
      unint64_t v89 = v86;
      unint64_t v90 = v87;
      uint64_t v91 = v37;
      do
      {
        int v92 = v90[3];
        *unint64_t v89 = *v90;
        v89[3] = v92;
        v90 += 6;
        v89 += 6;
        v91 -= 2;
      }
      while (v91);
      uint64_t v88 = v37;
      if (v34 != v37)
      {
LABEL_57:
        uint64_t v93 = v34 - v88;
        uint64_t v94 = 3 * v88;
        do
        {
          v86[v94] = *(_DWORD *)&v87[v94 * 4];
          v94 += 3;
          --v93;
        }
        while (v93);
      }
      ++v85;
      v87 += 4;
      ++v86;
      if (v85 == v58) {
        break;
      }
      continue;
    }
  }
  *(unsigned char *)(v51 + 108) = 1;
}

uint64_t peridot::PeridotDxpDetector::process(uint64_t a1, uint64_t a2, uint64_t *a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v9 = a5 + 480;
  *(_OWORD *)(a5 + 696) = 0u;
  *(_OWORD *)(a5 + 680) = 0u;
  *(_OWORD *)(a5 + 664) = 0u;
  *(_OWORD *)(a5 + 648) = 0u;
  *(_OWORD *)(a5 + 632) = 0u;
  *(_OWORD *)(a5 + 616) = 0u;
  *(_OWORD *)(a5 + 600) = 0u;
  *(_OWORD *)(a5 + 584) = 0u;
  *(_OWORD *)(a5 + 568) = 0u;
  *(unsigned char *)(a5 + 719) = 0;
  *(_DWORD *)(a5 + 715) = 0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_DWORD *)(a5 + 80) = 0;
  *(_OWORD *)(a5 + 216) = 0u;
  *(_OWORD *)(a5 + 200) = 0u;
  *(_OWORD *)(a5 + 184) = 0u;
  *(_OWORD *)(a5 + 168) = 0u;
  *(_OWORD *)(a5 + 152) = 0u;
  *(_OWORD *)(a5 + 136) = 0u;
  *(_OWORD *)(a5 + 120) = 0u;
  *(_OWORD *)(a5 + 104) = 0u;
  *(_OWORD *)(a5 + 88) = 0u;
  uint64_t v10 = a5 + 240;
  *(_OWORD *)(a5 + 328) = 0u;
  *(_OWORD *)(a5 + 344) = 0u;
  *(_OWORD *)(a5 + 360) = 0u;
  *(_OWORD *)(a5 + 376) = 0u;
  *(_OWORD *)(a5 + 392) = 0u;
  *(_OWORD *)(a5 + 408) = 0u;
  *(_OWORD *)(a5 + 424) = 0u;
  *(_OWORD *)(a5 + 440) = 0u;
  *(_OWORD *)(a5 + 456) = 0u;
  *(_OWORD *)(a5 + 251) = 0u;
  *(_OWORD *)(a5 + 235) = 0u;
  *(_OWORD *)(a5 + 308) = 0u;
  *(_OWORD *)(a5 + 283) = 0u;
  *(_OWORD *)(a5 + 299) = 0u;
  *(_OWORD *)(a5 + 267) = 0u;
  *(_OWORD *)(a5 + 475) = 0u;
  *(_OWORD *)(a5 + 548) = 0u;
  *(_OWORD *)(a5 + 523) = 0u;
  *(_OWORD *)(a5 + 539) = 0u;
  *(_OWORD *)(a5 + 491) = 0u;
  *(_OWORD *)(a5 + 507) = 0u;
  uint64_t v11 = a1 + 600;
  uint64_t v12 = *(void *)(a1 + 496);
  uint64_t v38 = *(void *)(a1 + 456);
  uint64_t v39 = v12;
  char v50 = *(unsigned char *)(a1 + 392);
  unint64_t v51 = *(unsigned __int8 *)(a1 + 665) + (unint64_t)*(unsigned __int8 *)(a1 + 664);
  uint64_t v52 = a1 + 600;
  uint64_t v53 = *(void *)(a1 + 680);
  unint64_t v13 = *(void *)(a1 + 640);
  unint64_t v14 = *(void *)(a1 + 648);
  unint64_t v15 = *(void *)(a1 + 656);
  float32x4_t v31 = a4 + 50;
  unsigned int v32 = a4 + 80;
  int v37 = a4[98];
  float v35 = a4 + 86;
  float v36 = a4 + 56;
  float v33 = a4 + 92;
  unint64_t v34 = a4 + 62;
  long long v40 = *(_OWORD *)(a3 + 51);
  uint64_t v41 = a3[53];
  long long v42 = *((_OWORD *)a3 + 22);
  uint64_t v43 = a3[46];
  long long v44 = *(_OWORD *)(a3 + 47);
  uint64_t v45 = a3[49];
  uint64_t v16 = a3[34];
  long long v46 = *((_OWORD *)a3 + 16);
  int v49 = *((_DWORD *)a3 + 62);
  uint64_t v17 = a3[30];
  if (v14 < v13) {
    unint64_t v13 = v14;
  }
  if (v15 >= v13) {
    unint64_t v18 = v13;
  }
  else {
    unint64_t v18 = v15;
  }
  uint64_t v47 = v16;
  uint64_t v48 = v17;
  peridot::PeridotDxpDetector::blrDetector(a1, (uint64_t)&v31, a5, (unint64_t)a4);
  unint64_t v20 = *(void *)(a5 + 8);
  *(unsigned char *)(a5 + 232) = *(void *)a5 > v18;
  *(unsigned char *)(a5 + 233) = v20 > v18;
  *(unsigned char *)(a5 + 234) = *(void *)(a5 + 16) > v18;
  if (*(unsigned char *)a1)
  {
    uint64_t v21 = *(void *)(a1 + 496);
    uint64_t v38 = *(void *)(a1 + 456);
    uint64_t v39 = v21;
    char v50 = *(unsigned char *)(a1 + 392);
    unint64_t v51 = *(unsigned __int8 *)(a1 + 665);
    uint64_t v52 = v11;
    uint64_t v53 = *(void *)(a1 + 680);
    unint64_t v22 = *(void *)(a1 + 640);
    if (*(void *)(a1 + 648) < v22) {
      unint64_t v22 = *(void *)(a1 + 648);
    }
    if (*(void *)(a1 + 656) >= v22) {
      unint64_t v23 = v22;
    }
    else {
      unint64_t v23 = *(void *)(a1 + 656);
    }
    float32x4_t v31 = a4 + 100;
    unsigned int v32 = a4 + 130;
    int v37 = a4[148];
    float v35 = a4 + 136;
    float v36 = a4 + 106;
    float v33 = a4 + 142;
    unint64_t v34 = a4 + 112;
    long long v40 = *(_OWORD *)(a3 + 81);
    uint64_t v41 = a3[83];
    long long v42 = *((_OWORD *)a3 + 37);
    uint64_t v43 = a3[76];
    long long v44 = *(_OWORD *)(a3 + 77);
    uint64_t v45 = a3[79];
    uint64_t v47 = a3[64];
    long long v46 = *((_OWORD *)a3 + 31);
    int v49 = *((_DWORD *)a3 + 122);
    uint64_t v48 = a3[60];
    peridot::PeridotDxpDetector::blrDetector(a1, (uint64_t)&v31, v10, v19);
    unint64_t v24 = *(void *)(a5 + 248);
    *(unsigned char *)(a5 + 472) = *(void *)(a5 + 240) > v23;
    *(unsigned char *)(a5 + 473) = v24 > v23;
    *(unsigned char *)(a5 + 474) = *(void *)(a5 + 256) > v23;
  }
  uint64_t v25 = *(void *)(a1 + 504);
  uint64_t v38 = *(void *)(a1 + 464);
  uint64_t v39 = v25;
  char v50 = 0;
  unint64_t v51 = *(unsigned __int8 *)(a1 + 666);
  uint64_t v52 = a1 + 576;
  uint64_t v53 = *(void *)(a1 + 688);
  unint64_t v26 = *(void *)(a1 + 640);
  if (*(void *)(a1 + 648) < v26) {
    unint64_t v26 = *(void *)(a1 + 648);
  }
  if (*(void *)(a1 + 656) >= v26) {
    unint64_t v27 = v26;
  }
  else {
    unint64_t v27 = *(void *)(a1 + 656);
  }
  float32x4_t v31 = a4;
  unsigned int v32 = a4 + 30;
  float v35 = a4 + 36;
  float v36 = a4 + 6;
  int v37 = a4[48];
  float v33 = a4 + 42;
  unint64_t v34 = a4 + 12;
  long long v40 = *(_OWORD *)(a3 + 21);
  uint64_t v41 = a3[23];
  long long v42 = *((_OWORD *)a3 + 7);
  uint64_t v43 = a3[16];
  long long v44 = *(_OWORD *)(a3 + 17);
  uint64_t v45 = a3[19];
  uint64_t v47 = a3[4];
  long long v46 = *((_OWORD *)a3 + 1);
  uint64_t v28 = *a3;
  int v49 = *((_DWORD *)a3 + 2);
  uint64_t v48 = v28;
  peridot::PeridotDxpDetector::blrDetector(a1, (uint64_t)&v31, v9, v19);
  unint64_t v29 = *(void *)(a5 + 488);
  *(unsigned char *)(a5 + 712) = *(void *)(a5 + 480) > v27;
  *(unsigned char *)(a5 + 713) = v29 > v27;
  *(unsigned char *)(a5 + 714) = *(void *)(a5 + 496) > v27;
  return 0;
}

uint64_t peridot::PeridotDxpDetector::blrDetector(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v67 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a2 + 180)) {
    float v4 = *(float *)(a1 + 488);
  }
  else {
    float v4 = 0.0;
  }
  uint64_t v51 = *(void *)(*(void *)(a2 + 192) + 8);
  uint64_t v54 = **(void **)(a2 + 192);
  float v5 = 0.0;
  memset(v66, 0, sizeof(v66));
  uint64_t v42 = *(unsigned __int8 *)(a1 + 525);
  if (*(unsigned char *)(a1 + 525))
  {
    unint64_t v6 = 0;
    unint64_t v7 = (v51 - v54) >> 2;
    double v8 = (double)(v7 >> 1);
    uint64_t v9 = *(uint64_t **)(a2 + 16);
    char v50 = *(void **)(a2 + 8);
    uint64_t v39 = *v9;
    uint64_t v41 = (v9[1] - *v9) >> 3;
    uint64_t v10 = *(void *)(a2 + 200);
    uint64_t v11 = 2 * v10;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    unint64_t v53 = v7;
    unint64_t v47 = v7 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v38 = *(void *)(a2 + 64);
    unint64_t v44 = 0xFFFFFFFF00000000 * (unint64_t)v8;
    uint64_t v45 = -(uint64_t)(unint64_t)v8;
    unint64_t v46 = 0xFFFFFFFF00000000 * v10;
    long long v40 = *(void **)(a2 + 32);
    uint64_t v48 = *(void **)(a2 + 24);
    int v49 = *(void *)(a2 + 200);
    uint64_t v52 = (peridot::PeridotDxpDetector *)a1;
    while (1)
    {
      int v65 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      unint64_t v61 = 0;
      uint64_t v62 = 0;
      int v60 = 0;
      uint64_t v59 = 0;
      int v58 = 0;
      uint64_t v57 = 0;
      int v56 = 0;
      uint64_t v55 = 0;
      if (v6 == v41 || v6 >= (uint64_t)(v40[1] - *v40) >> 3) {
LABEL_36:
      }
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      peridot::PeridotDxpDetector::takeEchoes((peridot::PeridotDxpDetector *)a1, *(peridot::Histogram **)(v39 + 8 * v6), *(peridot::Histogram **)(*v40 + 8 * v6), a4, *(void *)(a1 + 512), *(void *)(a2 + 8 * v6 + 96), *(void *)(a2 + 8 * v6 + 120), v4, v38, (float *)&v64, &v61, (float *)&v59, (float *)&v57, (float *)&v55);
      a1 = (uint64_t)v52;
      if (v61 || v62 || v63) {
        break;
      }
LABEL_8:
      if (++v6 == v42) {
        goto LABEL_35;
      }
    }
    uint64_t v12 = 0;
    unint64_t v13 = (void *)(a2 + 8 * v6 + 72);
    while (1)
    {
      uint64_t v16 = *(&v61 + v12);
      if (!v16)
      {
        float v14 = *((float *)&v64 + v12);
        goto LABEL_16;
      }
      float v14 = *((float *)&v64 + v12);
      *((float *)&v66[9 * v6 + 3 * v12] + 3) = 1.0
                                             / (float)(expf((float)(*(float *)(a1 + 484) - v14) * *(float *)(a1 + 480))
                                                     + 1.0);
      if (v51 == v54)
      {
        float v20 = 0.0;
      }
      else
      {
        if (v6 >= (uint64_t)(v48[1] - *v48) >> 3) {
          goto LABEL_36;
        }
        unint64_t v17 = *v13 + 1;
        uint64_t v18 = *(void *)(*(void *)(*v48 + 8 * v6) + 8);
        if (v53 >= 2)
        {
          uint64_t v21 = (float *)(v54 + 4);
          uint64_t v22 = v44 + (v16 << 32);
          float v23 = 0.0;
          unint64_t v24 = v47;
          float v25 = 0.0;
          do
          {
            float v23 = v23 + (float)((float)(*(v21 - 1) * *(v21 - 1)) * *(float *)(v18 + 4 * (int)((v22 >> 32) % v17)));
            float v25 = v25
                + (float)((float)(*v21 * *v21) * *(float *)(v18 + 4 * (int)(((v22 + 0x100000000) >> 32) % v17)));
            v21 += 2;
            v22 += 0x200000000;
            v24 -= 2;
          }
          while (v24);
          float v20 = v25 + v23;
          unint64_t v19 = v47;
          if (v53 == v47) {
            goto LABEL_28;
          }
        }
        else
        {
          unint64_t v19 = 0;
          float v20 = 0.0;
        }
        unint64_t v26 = v53 - v19;
        unint64_t v27 = (float *)(v54 + 4 * v19);
        int64_t v28 = (unint64_t)(v45 + v19 + v16) << 32;
        do
        {
          float v29 = *v27++;
          float v20 = v20 + (float)((float)(v29 * v29) * *(float *)(v18 + 4 * (int)((v28 >> 32) % v17)));
          v28 += 0x100000000;
          --v26;
        }
        while (v26);
      }
LABEL_28:
      *((float *)&v66[9 * v6 + 1 + 3 * v12] + 3) = v20;
      if (v6 >= (uint64_t)(v50[1] - *v50) >> 3) {
        goto LABEL_36;
      }
      unint64_t v30 = *v13 + 1;
      uint64_t v31 = *(void *)(*(void *)(*v50 + 8 * v6) + 8);
      if (v11)
      {
        uint64_t v32 = v46 + (v16 << 32);
        float v33 = 0.0;
        uint64_t v34 = v11;
        float v35 = 0.0;
        do
        {
          float v33 = *(float *)(v31 + 4 * (int)((v32 >> 32) % v30)) + v33;
          float v35 = *(float *)(v31 + 4 * (int)(((v32 + 0x100000000) >> 32) % v30)) + v35;
          v32 += 0x200000000;
          v34 -= 2;
        }
        while (v34);
        float v36 = v35 + v33;
      }
      else
      {
        float v36 = 0.0;
      }
      a1 = (uint64_t)v52;
      *(float *)&v66[9 * v6 + 1 + 3 * v12] = fmaxf((float)((float)(*(float *)(v31+ 4 * (int)(((int)v11 + (int)v16 - v49) % v30))+ v36)* 0.25)/ *((float *)v52 + v6 + 156), 0.0);
LABEL_16:
      unint64_t v15 = &v66[9 * v6 + 3 * v12];
      *((_DWORD *)v15 + 6) = *((_DWORD *)&v57 + v12);
      *((unsigned char *)v15 + 40) = 1;
      *((float *)v15 + 2) = v14;
      *(void *)unint64_t v15 = v16;
      float v5 = *((float *)&v55 + v12);
      *((_DWORD *)v15 + 8) = *((_DWORD *)&v59 + v12);
      *((float *)v15 + 9) = v5;
      if (++v12 == 3) {
        goto LABEL_8;
      }
    }
  }
LABEL_35:
  peridot::PeridotDxpDetector::hdUnfold(a1, (uint64_t)v66, a2, v5);
  return 0;
}

uint64_t peridot::PeridotDxpDetector::takeEchoes(peridot::PeridotDxpDetector *this, peridot::Histogram *a2, peridot::Histogram *a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, float a8, unint64_t a9, float *a10, unint64_t *a11, float *a12, float *a13, float *a14)
{
  MEMORY[0x270FA5388](this, a2, a3, a8);
  v68[367] = *MEMORY[0x263EF8340];
  unint64_t v21 = *(void *)(v14 + 16) - 2;
  if (v21 >= v18) {
    unint64_t v21 = v18;
  }
  uint64_t v22 = v17 + 1;
  if (v17 + 1 >= v21) {
    return 0;
  }
  uint64_t v23 = 0;
  uint64_t v24 = *(void *)(v14 + 8);
  float v25 = (float *)(v24 + 4 * v17 + 8);
  do
  {
    float v26 = *(v25 - 1);
    if (v26 > 0.0 && (float)(v26 * v26) > (float)((float)(v20 * v20) * *(float *)(*(void *)(v15 + 8) + 4 * v22)))
    {
      if ((float v27 = *(v25 - 2), v27 < v26)
        && (v26 > *v25 || vabds_f32(v26, v27) > 0.000001 && vabds_f32(v26, *v25) < 0.000001)
        || vabds_f32(v27, v26) < 0.000001 && v26 > *v25 && vabds_f32(v26, *v25) > 0.000001)
      {
        *(void *)&v67[8 * v23++] = v22;
      }
    }
    ++v22;
    ++v25;
  }
  while (v21 != v22);
  if (!v23) {
    return 0;
  }
  uint64_t v28 = *(void *)(v15 + 8);
  if (v23 == 1)
  {
    unint64_t v29 = 0;
LABEL_23:
    uint64_t v34 = v23 - v29;
    float v35 = (float *)&v65[v29];
    float v36 = (uint64_t *)&v67[8 * v29];
    do
    {
      uint64_t v37 = *v36++;
      *v35++ = *(float *)(v24 + 4 * v37) / sqrtf(*(float *)(v28 + 4 * v37));
      --v34;
    }
    while (v34);
    goto LABEL_25;
  }
  unint64_t v29 = v23 & 0xFFFFFFFFFFFFFFFELL;
  unint64_t v30 = (float *)&v66;
  uint64_t v31 = v68;
  unint64_t v32 = v23 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    float v33 = *(float *)(v24 + 4 * *v31) / sqrtf(*(float *)(v28 + 4 * *v31));
    *(v30 - 1) = *(float *)(v24 + 4 * *(v31 - 1)) / sqrtf(*(float *)(v28 + 4 * *(v31 - 1)));
    *unint64_t v30 = v33;
    v30 += 2;
    v31 += 2;
    v32 -= 2;
  }
  while (v32);
  if (v23 != v29) {
    goto LABEL_23;
  }
LABEL_25:
  unint64_t v38 = 0;
  uint64_t v39 = v23;
  do
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    float v42 = *(float *)v65;
    do
    {
      if (*(void *)&v67[8 * v40])
      {
        float v43 = *(float *)&v65[v40];
        if (v43 > v42 && vabds_f32(v43, v42) > 0.000001)
        {
          float v42 = *(float *)&v65[v40];
          uint64_t v41 = v40;
        }
      }
      ++v40;
    }
    while (v23 != v40);
    if (v42 == -10000.0) {
      break;
    }
    unint64_t v44 = *(void *)&v67[8 * v41];
    float v45 = *(float *)(v24 + 4 * v44);
    LODWORD(v46) = v44 - v19;
    if ((int)v44 - (int)v19 <= (int)v17) {
      LODWORD(v46) = v17;
    }
    uint64_t v46 = (int)v46;
    unint64_t v47 = v44 + v19;
    if (v21 < v44 + v19) {
      unint64_t v47 = v21;
    }
    float v48 = v45 * 0.5;
    if (v44 <= (int)v46)
    {
      char v49 = 0;
    }
    else
    {
      char v49 = 0;
      uint64_t v50 = (int)v46;
      do
      {
        float v51 = *(float *)(v24 + 4 * v50);
        if (v51 < v48) {
          uint64_t v46 = v50;
        }
        v49 |= v51 < v48;
        ++v50;
      }
      while (v44 != v50);
    }
    uint64_t v52 = *(void *)&v67[8 * v41];
    while (1)
    {
      uint64_t v53 = v52 + 1;
      if (v52 + 1 > v47) {
        break;
      }
      float v54 = *(float *)(v24 + 4 + 4 * v52++);
      if (v54 < v48)
      {
        uint64_t v55 = v53 - v46;
        if ((v49 & 1) == 0) {
          uint64_t v55 = 2 * (v53 - v44);
        }
        goto LABEL_52;
      }
    }
    uint64_t v55 = 2 * (v44 - v46);
    if ((v49 & 1) == 0) {
      uint64_t v55 = v19;
    }
LABEL_52:
    if (v44 == *a11 || v44 == a11[1] || v44 == a11[2] || (float v56 = (float)(unint64_t)(v55 + 1), v56 > (float)v19))
    {
      *(void *)&v67[8 * v41] = 0;
      --v39;
      v65[v41] = -971227136;
      if (!v39) {
        return 0;
      }
    }
    else
    {
      unint64_t v57 = v38;
      a10[v57] = v42;
      a11[v38] = v44;
      a12[v57] = v45;
      a13[v57] = *(float *)(v28 + 4 * v44);
      a14[v57] = v56;
      unint64_t v58 = v44 - v16;
      unint64_t v59 = v44 + v16;
      int v60 = v65;
      unint64_t v61 = (unint64_t *)v67;
      uint64_t v62 = v23;
      do
      {
        if (*v61 >= v58 && *v61 - 1 < v59)
        {
          *unint64_t v61 = 0;
          --v39;
          *int v60 = -971227136;
        }
        ++v60;
        ++v61;
        --v62;
      }
      while (v62);
      ++v38;
      if (!v39) {
        return 0;
      }
    }
  }
  while (v38 < 3);
  return 0;
}

uint64_t peridot::PeridotDxpDetector::hdUnfold(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v7 = v6;
  uint64_t v8 = v5;
  uint64_t v10 = v9;
  uint64_t v80 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(v5 + 180))
  {
    uint64_t v11 = *(void *)(v5 + 104);
    v74[0] = *(void *)(v5 + 96);
    v74[1] = v11;
    v74[2] = *(void *)(v5 + 112);
    v74[3] = *(_DWORD *)(v4 + 640) - *(_DWORD *)(v5 + 120);
    v74[4] = *(_DWORD *)(v4 + 648) - *(_DWORD *)(v5 + 128);
    v74[5] = *(unsigned char *)(v4 + 656) - *(_DWORD *)(v5 + 136);
    uint64_t v12 = v4 + 8;
    float v77 = 0.0;
    bzero(&__src, 0x1010uLL);
    *(_WORD *)float32x2_t v75 = 0;
    peridot::HDUnfoldClass::crtUnfold(v12, (uint64_t)v10, v8 + 168, v13, (uint64_t)v74, (uint64_t)&__src, (uint64_t)&v77, (uint64_t)v76, (uint64_t)&v75[1], v75);
    char v14 = v75[0];
    peridot::HDUnfoldClass::calcConf(v12, v15, &__src, v16, v8 + 144, (float *)(v8 + 168), v8, *(void *)(v8 + 184), v77, v75[0], v7, (uint64_t)v73);
    *(unsigned char *)(v7 + 235) = v75[1];
    *(unsigned char *)(v7 + 236) = v14;
  }
  else
  {
    uint64_t v18 = 0;
    unsigned int v19 = 0;
    uint64_t v20 = 0;
    do
    {
      unint64_t v36 = v10[v18];
      float v37 = (float)v36;
      float v38 = *(float *)(v8 + 172);
      float v39 = *(float *)(v8 + 176);
      float v40 = fminf(fabsf((float)((float)v36 - (float)v10[18]) + v38), 3.4028e38);
      float v41 = fminf(fabsf((float)((float)v36 - (float)v10[36]) + v39), 3.4028e38);
      float v42 = fabsf((float)((float)v36 - (float)v10[24]) + v38);
      float v43 = fabsf((float)((float)v36 - (float)v10[42]) + v39);
      BOOL v44 = v42 < v40;
      if (v42 < v40) {
        float v40 = v42;
      }
      BOOL v45 = v43 < v41;
      if (v43 < v41) {
        float v41 = v43;
      }
      float v46 = fabsf((float)(v37 - (float)v10[30]) + v38);
      float v47 = fabsf((float)(v37 - (float)v10[48]) + v39);
      if (v46 < v40)
      {
        unsigned int v48 = 2;
      }
      else
      {
        float v46 = v40;
        unsigned int v48 = v44;
      }
      if (v47 >= v41) {
        unsigned int v49 = v45;
      }
      else {
        unsigned int v49 = 2;
      }
      if (v47 >= v41) {
        float v47 = v41;
      }
      float v50 = (float)*(unint64_t *)(v8 + 56);
      if (v46 <= v50 && v47 <= v50 && v36 != 0)
      {
        *(void *)(v7 + 8 * v19) = v36;
        uint64_t v53 = v7 + 4 * v19;
        *(_DWORD *)(v53 + 24) = 2139095039;
        float v54 = (float *)(v53 + 24);
        uint64_t v55 = &v10[v18];
        float v56 = *(float *)&v10[v18 + 1];
        unint64_t v57 = &v10[6 * v48];
        float v59 = *((float *)v57 + 38);
        unint64_t v58 = v57 + 19;
        float v60 = v59;
        unint64_t v61 = &v10[6 * v49];
        if (v56 <= v59) {
          float v62 = *(float *)&v10[v18 + 1];
        }
        else {
          float v62 = v60;
        }
        float *v54 = v62;
        float v63 = *((float *)v61 + 74);
        if (v63 < v62)
        {
          float *v54 = v63;
          unint64_t v21 = (_DWORD *)&v10[6 * v20 + 1] + 1;
          uint64_t v22 = &v10[6 * v48];
          float v24 = *((float *)v22 + 39);
          uint64_t v23 = (_DWORD *)v22 + 39;
          float v25 = v24;
          float v26 = &v10[6 * v49];
          float v27 = (_DWORD *)v26 + 75;
          if (v24 >= *((float *)v55 + 3)) {
            float v25 = *((float *)v55 + 3);
          }
          if (*((float *)v26 + 75) < v25) {
            float v25 = *((float *)v26 + 75);
          }
          uint64_t v28 = v7 + 4 * v19;
          *(float *)(v28 + 36) = v25;
          *(_DWORD *)(v28 + 48) = *((_DWORD *)v26 + 76);
          float v29 = *((float *)v26 + 78);
          *(float *)(v28 + 72) = v29;
          uint64_t v30 = 2;
        }
        else
        {
          unint64_t v21 = (_DWORD *)v55 + 3;
          float v64 = *((float *)v55 + 3);
          int v65 = &v10[6 * v48];
          float v66 = *((float *)v65 + 39);
          uint64_t v23 = (_DWORD *)v65 + 39;
          float v67 = v66;
          uint64_t v68 = &v10[6 * v49];
          float v27 = (_DWORD *)v68 + 75;
          if (v66 < v64) {
            float v64 = v67;
          }
          if (*((float *)v68 + 75) < v64) {
            float v64 = *((float *)v68 + 75);
          }
          uint64_t v69 = v7 + 4 * v19;
          *(float *)(v69 + 36) = v64;
          float32x4_t v70 = (_DWORD *)(v69 + 48);
          uint64_t v71 = (float *)(v69 + 72);
          if (v56 <= v60)
          {
            uint64_t v30 = 0;
            *float32x4_t v70 = v10[v18 + 2];
            float v29 = *(float *)&v10[v18 + 3];
            float *v71 = v29;
          }
          else
          {
            long long v72 = &v10[6 * v48];
            *float32x4_t v70 = *((_DWORD *)v72 + 40);
            float v29 = *((float *)v72 + 42);
            float *v71 = v29;
            uint64_t v30 = 1;
          }
          float v63 = v62;
        }
        int v31 = HIDWORD(v10[6 * v48 + 21]);
        LODWORD(__src) = HIDWORD(v10[v18 + 3]);
        HIDWORD(__src) = v31;
        int v79 = HIDWORD(v10[6 * v49 + 39]);
        float v32 = sqrtf((float)(v29 * 3.0) / *((float *)&__src + v30));
        uint64_t v33 = 4 * v19;
        uint64_t v34 = v7 + v33;
        *(float *)(v34 + 60) = v32 * v63;
        *(void *)(v7 + 88 + 8 * v19) = v10[v18];
        uint64_t v35 = v7 + 8 * v19;
        *(void *)(v35 + 112) = *((void *)v58 - 1);
        *(void *)(v35 + 136) = v61[36];
        *(_DWORD *)(v7 + 160 + v33) = *v21;
        *(_DWORD *)(v34 + 172) = *v23;
        *(_DWORD *)(v34 + 184) = *v27;
        *(_DWORD *)(v7 + 196 + v33) = *((_DWORD *)v55 + 2);
        *(_DWORD *)(v34 + 208) = *v58;
        *(_DWORD *)(v34 + 220) = *((_DWORD *)v61 + 74);
        *(_WORD *)(v7 + 235) = 0;
        *(unsigned char *)(v7 + v19++ + 237) = 0;
      }
      ++v20;
      v18 += 6;
    }
    while (v18 != 18);
  }
  return 0;
}

uint64_t peridot::HDUnfoldClass::crtUnfold(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned char *a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v301 = v13;
  uint64_t v299 = v14;
  int8x16_t v300 = v15;
  uint64_t v16 = 0;
  uint64_t v398 = *MEMORY[0x263EF8340];
  int32x4_t v314 = &unk_2707172A0;
  float32x4_t v315 = (uint16x4_t *)v396;
  uint64_t v316 = 0x1B00000003;
  char v317 = 0;
  uint64_t v318 = 162;
  uint64_t v319 = 0;
  memset(v396, 0, sizeof(v396));
  __int16 v397 = 0;
  int64x2_t v308 = &unk_2707172A0;
  int64x2_t v309 = (uint16x4_t *)v394;
  uint64_t v310 = 0x1B00000003;
  char v311 = 0;
  uint64_t v312 = 162;
  uint64_t v313 = 0;
  memset(v394, 0, sizeof(v394));
  __int16 v395 = 0;
  uint64_t v303 = v10;
  v298 = v17;
  float *v17 = *(float *)(v10 + 56);
  v387[0] = *v18;
  int v19 = v18[36];
  v387[1] = v19;
  int v20 = v18[72];
  v387[2] = v20;
  int v388 = v18[12];
  int v21 = v18[48];
  int v389 = v21;
  int v22 = v18[84];
  int v390 = v22;
  int v23 = v18[24];
  int v391 = v23;
  int v24 = v18[60];
  int v392 = v24;
  int64x2_t v305 = v18;
  int v25 = v18[96];
  int v393 = v25;
  if (v387[0] <= 0) {
    int v26 = v388 > 0;
  }
  else {
    int v26 = (v388 > 0) + 1;
  }
  if (v23 > 0) {
    ++v26;
  }
  v386[0] = v26;
  if (v19 <= 0) {
    int v27 = v21 > 0;
  }
  else {
    int v27 = (v21 > 0) + 1;
  }
  if (v24 > 0) {
    ++v27;
  }
  v386[1] = v27;
  if (v20 <= 0) {
    int v28 = v22 > 0;
  }
  else {
    int v28 = (v22 > 0) + 1;
  }
  if (v25 > 0) {
    ++v28;
  }
  v386[2] = v28;
  BOOL *v12 = (v26 | v27 | v28) > 1;
  if ((v27 + v26 + v28) <= 3) {
    uint64_t v29 = 1;
  }
  else {
    uint64_t v29 = 2;
  }
  *uint64_t v11 = v29;
  v368 = &unk_270717448;
  v369 = &v383;
  uint64_t v370 = 0x900000002;
  v371[0] = 0;
  uint64_t v372 = 18;
  v373 = &unk_270717448;
  uint64_t v374 = &v384;
  uint64_t v375 = 0x900000002;
  char v376 = 0;
  uint64_t v377 = 18;
  uint64_t v378 = &unk_270717448;
  unint64_t v379 = &v385;
  uint64_t v380 = 0x900000002;
  char v381 = 0;
  uint64_t v382 = 18;
  uint64_t v365 = 0;
  uint64_t v366 = 0;
  *(_DWORD *)((char *)v367 + 7) = 0;
  v367[0] = 0;
  unint64_t v350 = &unk_270717448;
  uint64_t v351 = &v365;
  uint64_t v352 = 0x900000001;
  v353[0] = 0;
  uint64_t v354 = 9;
  v355 = &unk_270717448;
  unint64_t v356 = (char *)&v366 + 1;
  uint64_t v357 = 0x900000001;
  char v358 = 0;
  uint64_t v359 = 9;
  unint64_t v360 = &unk_270717448;
  v361 = (char *)v367 + 2;
  uint64_t v362 = 0x900000001;
  uint64_t v364 = 9;
  char v363 = 0;
  do
  {
    uint64_t v30 = *(void *)(v303 + 96);
    uint64_t v31 = *(unsigned __int8 *)(v30 + v16);
    int v32 = v386[v31 - 1];
    if (v32 >= 1)
    {
      uint64_t v33 = *(unsigned __int8 *)(v30 + *(unsigned int *)(v303 + 108) + v16);
      int v34 = v386[v33 - 1];
      if (v34 >= 1)
      {
        int v35 = 3 * v32;
        if (3 * v32 >= (int)v31)
        {
          unsigned __int8 v36 = 0;
          do
          {
            v341[v36] = v31;
            LODWORD(v31) = v31 + 3;
            ++v36;
          }
          while (v35 >= v31);
        }
        else
        {
          unsigned __int8 v36 = 0;
        }
        int v37 = 3 * v34;
        if (3 * v34 >= (int)v33)
        {
          unsigned __int8 v38 = 0;
          do
          {
            *((unsigned char *)&v332 + v38) = v33;
            LODWORD(v33) = v33 + 3;
            ++v38;
          }
          while (v37 >= v33);
        }
        else
        {
          unsigned __int8 v38 = 0;
        }
        unsigned int v39 = v36;
        unint64_t v40 = v38 * v36;
        if (*(&v372 + 5 * v16) < 2 * v40)
        {
          if (*(&v368 + 5 * v16 + 1))
          {
            if (v371[40 * v16]) {
              MEMORY[0x25A2D62A0]();
            }
          }
          operator new[]();
        }
        float v41 = &v368 + 5 * v16;
        *((_DWORD *)v41 + 5) = v40;
        float v42 = (unsigned int *)v41 + 5;
        *(v42 - 1) = 2;
        if (v40)
        {
          unsigned int v43 = 0;
          BOOL v44 = &v368 + 5 * v16 + 1;
          do
          {
            *((unsigned char *)*v44 + v43) = v341[v43 % v39];
            *((unsigned char *)*v44 + v43 + *v42) = *((unsigned char *)&v332 + v43 / v39);
            ++v43;
          }
          while (v40 > v43);
        }
        if (*(&v354 + 5 * v16) < v40)
        {
          if (*(&v350 + 5 * v16 + 1) && v353[40 * v16]) {
            MEMORY[0x25A2D62A0]();
          }
          operator new[]();
        }
        BOOL v45 = &v350 + 5 * v16;
        *((_DWORD *)v45 + 4) = 1;
        *((_DWORD *)v45 + 5) = v40;
        if (v40)
        {
          float v46 = (char *)*(&v350 + 5 * v16 + 1);
          float v47 = &v46[v40];
          if (&v46[v40] <= v46 + 1) {
            float v47 = v46 + 1;
          }
          memset(v46, 1, v47 - v46);
        }
      }
    }
    ++v16;
  }
  while (v16 != 3);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  do
  {
    uint64_t v302 = v49;
    float v50 = &v350 + 5 * v49;
    uint64_t v53 = (int8x16_t *)v50[1];
    uint64_t v52 = v50 + 1;
    float v51 = v53;
    int v54 = *((_DWORD *)v52 + 3);
    int v55 = v54 * *((_DWORD *)v52 + 2);
    if (v55 < 1) {
      goto LABEL_49;
    }
    unint64_t v56 = (unint64_t)v51->u64 + v55;
    if (v56 <= (unint64_t)v51->u64 + 1) {
      unint64_t v57 = &v51->u8[1];
    }
    else {
      unint64_t v57 = (unsigned __int8 *)v56;
    }
    unint64_t v58 = v57 - (unsigned __int8 *)v51;
    int64x2_t v304 = v52;
    if (v58 < 8)
    {
      double v59 = 0.0;
      goto LABEL_68;
    }
    if (v58 >= 0x20)
    {
      uint64_t v61 = v48;
      float64x2_t v62 = 0uLL;
      unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFE0;
      float64x2_t v63 = 0uLL;
      float v64 = v51 + 1;
      float64x2_t v65 = 0uLL;
      unint64_t v66 = v58 & 0xFFFFFFFFFFFFFFE0;
      float64x2_t v67 = 0uLL;
      float64x2_t v68 = 0uLL;
      float64x2_t v69 = 0uLL;
      float64x2_t v70 = 0uLL;
      float64x2_t v71 = 0uLL;
      float64x2_t v72 = 0uLL;
      float64x2_t v73 = 0uLL;
      float64x2_t v74 = 0uLL;
      float64x2_t v75 = 0uLL;
      float64x2_t v76 = 0uLL;
      float64x2_t v77 = 0uLL;
      float64x2_t v78 = 0uLL;
      float64x2_t v79 = 0uLL;
      do
      {
        int8x16_t v80 = v64[-1];
        int8x8_t v81 = (int8x8_t)vextq_s8(v80, v80, 8uLL).u64[0];
        v82.i32[0] = v81.u8[0];
        v82.i32[1] = v81.u8[1];
        __int32 v83 = v81.u8[3];
        unsigned int v84 = v81.u8[4];
        unsigned int v85 = v81.u8[5];
        unsigned int v86 = v81.u8[6];
        unsigned int v87 = v81.u8[7];
        v81.i32[0] = v81.u8[2];
        v81.i32[1] = v83;
        int8x8_t v88 = vand_s8(v81, (int8x8_t)0xFF000000FFLL);
        unsigned int v89 = v80.u8[0];
        unsigned int v90 = v80.u8[1];
        unsigned int v91 = v80.u8[2];
        unsigned int v92 = v80.u8[3];
        unsigned int v93 = v80.u8[4];
        unsigned int v94 = v80.u8[5];
        v95.i64[0] = v88.u32[0];
        v95.i64[1] = v88.u32[1];
        unsigned int v96 = v80.u8[6];
        unsigned int v97 = v80.u8[7];
        v80.i64[0] = vextq_s8(*v64, *v64, 8uLL).u64[0];
        unsigned int v98 = v80.u8[0];
        unsigned int v99 = v80.u8[1];
        unsigned int v100 = v80.u8[2];
        unsigned int v101 = v80.u8[3];
        unsigned int v102 = v80.u8[4];
        unsigned int v103 = v80.u8[5];
        float64x2_t v104 = vcvtq_f64_u64(v95);
        unsigned int v105 = v80.u8[6];
        unsigned int v106 = v80.u8[7];
        *(int8x8_t *)v80.i8 = vand_s8((int8x8_t)__PAIR64__(v87, v86), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v80.u32[0];
        v95.i64[1] = v80.u32[1];
        float64x2_t v71 = vaddq_f64(v71, vcvtq_f64_u64(v95));
        *(int8x8_t *)v80.i8 = vand_s8((int8x8_t)__PAIR64__(v85, v84), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v80.u32[0];
        v95.i64[1] = v80.u32[1];
        float64x2_t v70 = vaddq_f64(v70, vcvtq_f64_u64(v95));
        float64x2_t v69 = vaddq_f64(v69, v104);
        int8x8_t v107 = vand_s8(v82, (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v107.u32[0];
        v95.i64[1] = v107.u32[1];
        float64x2_t v68 = vaddq_f64(v68, vcvtq_f64_u64(v95));
        int8x8_t v108 = vand_s8((int8x8_t)__PAIR64__(v97, v96), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v108.u32[0];
        v95.i64[1] = v108.u32[1];
        float64x2_t v67 = vaddq_f64(v67, vcvtq_f64_u64(v95));
        int8x8_t v109 = vand_s8((int8x8_t)__PAIR64__(v94, v93), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v109.u32[0];
        v95.i64[1] = v109.u32[1];
        float64x2_t v65 = vaddq_f64(v65, vcvtq_f64_u64(v95));
        int8x8_t v110 = vand_s8((int8x8_t)__PAIR64__(v92, v91), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v110.u32[0];
        v95.i64[1] = v110.u32[1];
        float64x2_t v63 = vaddq_f64(v63, vcvtq_f64_u64(v95));
        int8x8_t v111 = vand_s8((int8x8_t)__PAIR64__(v90, v89), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v111.u32[0];
        v95.i64[1] = v111.u32[1];
        float64x2_t v62 = vaddq_f64(v62, vcvtq_f64_u64(v95));
        int8x8_t v112 = vand_s8((int8x8_t)__PAIR64__(v106, v105), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v112.u32[0];
        v95.i64[1] = v112.u32[1];
        float64x2_t v79 = vaddq_f64(v79, vcvtq_f64_u64(v95));
        int8x8_t v113 = vand_s8((int8x8_t)__PAIR64__(v103, v102), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v113.u32[0];
        v95.i64[1] = v113.u32[1];
        float64x2_t v78 = vaddq_f64(v78, vcvtq_f64_u64(v95));
        int8x8_t v114 = vand_s8((int8x8_t)__PAIR64__(v101, v100), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v114.u32[0];
        v95.i64[1] = v114.u32[1];
        float64x2_t v77 = vaddq_f64(v77, vcvtq_f64_u64(v95));
        int8x8_t v115 = vand_s8((int8x8_t)__PAIR64__(v99, v98), (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v115.u32[0];
        v95.i64[1] = v115.u32[1];
        float64x2_t v76 = vaddq_f64(v76, vcvtq_f64_u64(v95));
        v115.i32[0] = BYTE6(v64->i64[0]);
        v115.i32[1] = HIBYTE(v64->i64[0]);
        int8x8_t v116 = vand_s8(v115, (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v116.u32[0];
        v95.i64[1] = v116.u32[1];
        float64x2_t v75 = vaddq_f64(v75, vcvtq_f64_u64(v95));
        v116.i32[0] = BYTE4(v64->i64[0]);
        v116.i32[1] = ((unsigned __int16)WORD2(v64->i64[0]) >> 8);
        int8x8_t v117 = vand_s8(v116, (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v117.u32[0];
        v95.i64[1] = v117.u32[1];
        float64x2_t v74 = vaddq_f64(v74, vcvtq_f64_u64(v95));
        v117.i32[0] = BYTE2(v64->u32[0]);
        v117.i32[1] = HIBYTE(v64->u32[0]);
        int8x8_t v118 = vand_s8(v117, (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v118.u32[0];
        v95.i64[1] = v118.u32[1];
        float64x2_t v73 = vaddq_f64(v73, vcvtq_f64_u64(v95));
        v118.i32[0] = v64->u8[0];
        v118.i32[1] = HIBYTE(v64->u16[0]);
        int8x8_t v119 = vand_s8(v118, (int8x8_t)0xFF000000FFLL);
        v95.i64[0] = v119.u32[0];
        v95.i64[1] = v119.u32[1];
        float64x2_t v72 = vaddq_f64(v72, vcvtq_f64_u64(v95));
        v64 += 2;
        v66 -= 32;
      }
      while (v66);
      double v59 = vaddvq_f64(vaddq_f64(vaddq_f64(vaddq_f64(vaddq_f64(v72, v62), vaddq_f64(v76, v68)), vaddq_f64(vaddq_f64(v74, v65), vaddq_f64(v78, v70))), vaddq_f64(vaddq_f64(vaddq_f64(v73, v63), vaddq_f64(v77, v69)), vaddq_f64(vaddq_f64(v75, v67), vaddq_f64(v79, v71)))));
      if (v58 == v60)
      {
        uint64_t v52 = v304;
        uint64_t v48 = v61;
        goto LABEL_69;
      }
      uint64_t v52 = v304;
      uint64_t v48 = v61;
      if ((v58 & 0x18) == 0)
      {
        float v51 = (int8x16_t *)((char *)v51 + v60);
        do
        {
LABEL_68:
          unsigned int v140 = v51->u8[0];
          float v51 = (int8x16_t *)((char *)v51 + 1);
          double v59 = v59 + (double)v140;
        }
        while ((unint64_t)v51 < v56);
        goto LABEL_69;
      }
    }
    else
    {
      unint64_t v60 = 0;
      double v59 = 0.0;
    }
    unint64_t v120 = v58 & 0xFFFFFFFFFFFFFFF8;
    float64x2_t v121 = 0uLL;
    float64x2_t v122 = (float64x2_t)*(unint64_t *)&v59;
    unint64_t v123 = v60 - (v58 & 0xFFFFFFFFFFFFFFF8);
    float v124 = &v51->u8[v60];
    float64x2_t v125 = 0uLL;
    float64x2_t v126 = 0uLL;
    do
    {
      uint64_t v127 = *(void *)v124;
      v124 += 8;
      v128.i32[0] = v127;
      v128.i32[1] = BYTE1(v127);
      int8x8_t v129 = vand_s8(v128, (int8x8_t)0xFF000000FFLL);
      v130.i64[0] = v129.u32[0];
      v130.i64[1] = v129.u32[1];
      float64x2_t v131 = vcvtq_f64_u64(v130);
      v132.i32[0] = BYTE2(v127);
      v132.i32[1] = BYTE3(v127);
      int8x8_t v133 = vand_s8(v132, (int8x8_t)0xFF000000FFLL);
      v130.i64[0] = v133.u32[0];
      v130.i64[1] = v133.u32[1];
      float64x2_t v134 = vcvtq_f64_u64(v130);
      v135.i32[0] = BYTE4(v127);
      v135.i32[1] = BYTE5(v127);
      int8x8_t v136 = vand_s8(v135, (int8x8_t)0xFF000000FFLL);
      v130.i64[0] = v136.u32[0];
      v130.i64[1] = v136.u32[1];
      float64x2_t v137 = vcvtq_f64_u64(v130);
      v138.i32[0] = BYTE6(v127);
      v138.i32[1] = HIBYTE(v127);
      int8x8_t v139 = vand_s8(v138, (int8x8_t)0xFF000000FFLL);
      v130.i64[0] = v139.u32[0];
      v130.i64[1] = v139.u32[1];
      float64x2_t v126 = vaddq_f64(v126, vcvtq_f64_u64(v130));
      float64x2_t v125 = vaddq_f64(v125, v137);
      float64x2_t v121 = vaddq_f64(v121, v134);
      float64x2_t v122 = vaddq_f64(v122, v131);
      v123 += 8;
    }
    while (v123);
    double v59 = vaddvq_f64(vaddq_f64(vaddq_f64(v122, v125), vaddq_f64(v121, v126)));
    if (v58 != v120)
    {
      float v51 = (int8x16_t *)((char *)v51 + v120);
      goto LABEL_68;
    }
LABEL_69:
    unsigned int v141 = (int)v59;
    if ((int)v59)
    {
      unsigned int v142 = *(_DWORD *)&v371[40 * v302 - 8];
      uint64_t v332 = &unk_2707172A0;
      if (v142 * v141) {
        operator new[]();
      }
      uint64_t v333 = 0;
      unsigned int v334 = v142;
      int v335 = (int)v59;
      char v336 = 0;
      unint64_t v337 = 2 * v142 * (unint64_t)v141;
      if ((v54 & 0x80000000) == 0)
      {
        unsigned __int8 v143 = 0;
        float v144 = &v368 + 5 * v302;
        float v145 = v144 + 1;
        float v146 = (int *)v144 + 5;
        LODWORD(v147) = -1;
        do
        {
          uint64_t v148 = 2 * v143;
          if (v54 <= (int)v147 + 1) {
            int v149 = v147 + 1;
          }
          else {
            int v149 = v54;
          }
          int v150 = v149 - 1;
          do
          {
            if (v150 == v147) {
              goto LABEL_85;
            }
            uint64_t v147 = (v147 + 1);
          }
          while (!*(unsigned char *)(*v52 + v147));
          if (v142)
          {
            unsigned int v151 = 0;
            int v152 = 0;
            int v153 = *v146;
            do
            {
              __int16 v154 = *(unsigned __int8 *)(*v145 + v147 + v151) - 1;
              *(_WORD *)(v333 + v148) = v387[3 * (unsigned __int16)(v154 / 3) + v154 % 3];
              ++v152;
              v148 += 2 * (int)v59;
              v151 += v153;
            }
            while (v142 > v152);
          }
          ++v143;
        }
        while ((int)v147 < v54);
      }
LABEL_85:
      v328[0] = &unk_2707172A0;
      v328[1] = &v349;
      v328[2] = 0x900000002;
      char v329 = 0;
      uint64_t v330 = 36;
      char v348 = 0;
      uint64_t v347 = 0;
      v324[0] = &unk_2707172A0;
      v324[1] = &v346;
      v324[2] = 0x300000002;
      char v325 = 0;
      uint64_t v326 = 12;
      *(void *)&long long v320 = &unk_270717270;
      *((void *)&v320 + 1) = &v307;
      *(void *)&long long v321 = 0x300000001;
      BYTE8(v321) = 0;
      *(void *)&long long v322 = 3;
      peridot::HDUnfoldClass::crtUnfold2PRI(v303, (unsigned __int16)v302, (uint64_t)&v332, (uint64_t)v300, v299, (uint64_t)v328);
    }
LABEL_49:
    uint64_t v49 = v302 + 1;
  }
  while (v302 != 2);
  size_t v155 = HIDWORD(v319);
  if (HIDWORD(v319))
  {
    unint64_t v156 = v315;
    uint64_t v157 = HIDWORD(v316);
    if (HIDWORD(v319) < 0x10)
    {
      unsigned int v158 = 0;
      goto LABEL_89;
    }
    unsigned int v158 = 0;
    if (!BYTE4(v319)) {
      goto LABEL_190;
    }
    if ((HIDWORD(v319) - 1) > 0xFF) {
      goto LABEL_190;
    }
    uint64_t v196 = HIDWORD(v319) & 0xFFFFFFF0;
    unsigned int v158 = HIDWORD(v319) & 0xFFFFFFF0;
    int v197 = v315 + 2;
    unint64_t v198 = v342;
    do
    {
      uint16x8_t v199 = *(uint16x8_t *)v197[-2].i8;
      uint16x8_t v200 = *(uint16x8_t *)v197->i8;
      uint32x4_t v201 = vmovl_u16(*(uint16x4_t *)v199.i8);
      *(void *)&long long v202 = v201.u32[0];
      *((void *)&v202 + 1) = v201.u32[1];
      long long v203 = v202;
      *(void *)&long long v202 = v201.u32[2];
      *((void *)&v202 + 1) = v201.u32[3];
      long long v204 = v202;
      uint32x4_t v205 = vmovl_high_u16(v199);
      *(void *)&long long v202 = v205.u32[0];
      *((void *)&v202 + 1) = v205.u32[1];
      long long v206 = v202;
      *(void *)&long long v202 = v205.u32[2];
      *((void *)&v202 + 1) = v205.u32[3];
      long long v207 = v202;
      uint32x4_t v208 = vmovl_u16(*v197);
      *(void *)&long long v202 = v208.u32[0];
      *((void *)&v202 + 1) = v208.u32[1];
      long long v209 = v202;
      *(void *)&long long v202 = v208.u32[2];
      *((void *)&v202 + 1) = v208.u32[3];
      long long v210 = v202;
      *(v198 - 2) = v206;
      *(v198 - 1) = v207;
      uint32x4_t v211 = vmovl_high_u16(v200);
      *(void *)&long long v202 = v211.u32[0];
      *((void *)&v202 + 1) = v211.u32[1];
      long long v212 = v202;
      *(v198 - 4) = v203;
      *(v198 - 3) = v204;
      *(void *)&long long v202 = v211.u32[2];
      *((void *)&v202 + 1) = v211.u32[3];
      v198[2] = v212;
      v198[3] = v202;
      _OWORD *v198 = v209;
      v198[1] = v210;
      v198 += 8;
      v197 += 4;
      v196 -= 16;
    }
    while (v196);
    if (v155 != v158)
    {
LABEL_190:
      do
      {
LABEL_89:
        *(void *)&v341[8 * v158] = v156->u16[v158];
        ++v158;
      }
      while (v155 > v158);
    }
    if (v155 < 0x10)
    {
      int v159 = 0;
      goto LABEL_92;
    }
    int v159 = 0;
    if (!(_BYTE)v155) {
      goto LABEL_191;
    }
    if ((v155 - 1) > 0xFF) {
      goto LABEL_191;
    }
    uint64_t v213 = v155 & 0xFFFFFFF0;
    int v159 = v155 & 0xFFFFFFF0;
    uint64_t v214 = (uint16x4_t *)((char *)v156 + 2 * v157 + 16);
    unint64_t v215 = v343;
    do
    {
      uint16x8_t v216 = *(uint16x8_t *)v214[-2].i8;
      uint16x8_t v217 = *(uint16x8_t *)v214->i8;
      uint32x4_t v218 = vmovl_u16(*(uint16x4_t *)v216.i8);
      *(void *)&long long v219 = v218.u32[0];
      *((void *)&v219 + 1) = v218.u32[1];
      long long v220 = v219;
      *(void *)&long long v219 = v218.u32[2];
      *((void *)&v219 + 1) = v218.u32[3];
      long long v221 = v219;
      uint32x4_t v222 = vmovl_high_u16(v216);
      *(void *)&long long v219 = v222.u32[0];
      *((void *)&v219 + 1) = v222.u32[1];
      long long v223 = v219;
      *(void *)&long long v219 = v222.u32[2];
      *((void *)&v219 + 1) = v222.u32[3];
      long long v224 = v219;
      uint32x4_t v225 = vmovl_u16(*v214);
      *(void *)&long long v219 = v225.u32[0];
      *((void *)&v219 + 1) = v225.u32[1];
      long long v226 = v219;
      *(void *)&long long v219 = v225.u32[2];
      *((void *)&v219 + 1) = v225.u32[3];
      long long v227 = v219;
      *(v215 - 2) = v223;
      *(v215 - 1) = v224;
      uint32x4_t v228 = vmovl_high_u16(v217);
      *(void *)&long long v219 = v228.u32[0];
      *((void *)&v219 + 1) = v228.u32[1];
      long long v229 = v219;
      *(v215 - 4) = v220;
      *(v215 - 3) = v221;
      *(void *)&long long v219 = v228.u32[2];
      *((void *)&v219 + 1) = v228.u32[3];
      v215[2] = v229;
      v215[3] = v219;
      *unint64_t v215 = v226;
      v215[1] = v227;
      v215 += 8;
      v214 += 4;
      v213 -= 16;
    }
    while (v213);
    if (v155 != v159)
    {
LABEL_191:
      do
      {
LABEL_92:
        *(void *)&v342[8 * v159 + 152] = v156->u16[v157 + v159];
        ++v159;
      }
      while (v155 > v159);
    }
    uint64_t v160 = (2 * v157);
    if (v155 < 0x10)
    {
      int v161 = 0;
      goto LABEL_95;
    }
    int v161 = 0;
    if (!(_BYTE)v155) {
      goto LABEL_95;
    }
    if ((v155 - 1) > 0xFF) {
      goto LABEL_95;
    }
    uint64_t v230 = v155 & 0xFFFFFFF0;
    int v161 = v155 & 0xFFFFFFF0;
    int8x16_t v231 = (uint16x4_t *)((char *)v156 + 2 * v160 + 16);
    int8x16_t v232 = &v344;
    do
    {
      uint16x8_t v233 = *(uint16x8_t *)v231[-2].i8;
      uint16x8_t v234 = *(uint16x8_t *)v231->i8;
      uint32x4_t v235 = vmovl_u16(*(uint16x4_t *)v233.i8);
      *(void *)&long long v236 = v235.u32[0];
      *((void *)&v236 + 1) = v235.u32[1];
      long long v237 = v236;
      *(void *)&long long v236 = v235.u32[2];
      *((void *)&v236 + 1) = v235.u32[3];
      long long v238 = v236;
      uint32x4_t v239 = vmovl_high_u16(v233);
      *(void *)&long long v236 = v239.u32[0];
      *((void *)&v236 + 1) = v239.u32[1];
      long long v240 = v236;
      *(void *)&long long v236 = v239.u32[2];
      *((void *)&v236 + 1) = v239.u32[3];
      long long v241 = v236;
      uint32x4_t v242 = vmovl_u16(*v231);
      *(void *)&long long v236 = v242.u32[0];
      *((void *)&v236 + 1) = v242.u32[1];
      long long v243 = v236;
      *(void *)&long long v236 = v242.u32[2];
      *((void *)&v236 + 1) = v242.u32[3];
      long long v244 = v236;
      *((_OWORD *)v232 - 2) = v240;
      *((_OWORD *)v232 - 1) = v241;
      uint32x4_t v245 = vmovl_high_u16(v234);
      *(void *)&long long v236 = v245.u32[0];
      *((void *)&v236 + 1) = v245.u32[1];
      long long v246 = v236;
      *((_OWORD *)v232 - 4) = v237;
      *((_OWORD *)v232 - 3) = v238;
      *(void *)&long long v236 = v245.u32[2];
      *((void *)&v236 + 1) = v245.u32[3];
      *((_OWORD *)v232 + 2) = v246;
      *((_OWORD *)v232 + 3) = v236;
      *(_OWORD *)int8x16_t v232 = v243;
      *((_OWORD *)v232 + 1) = v244;
      v232 += 16;
      v231 += 4;
      v230 -= 16;
    }
    while (v230);
    if (v155 != v161)
    {
LABEL_95:
      uint64_t v162 = (uint64_t)v156 + 2 * v160;
      do
      {
        *(void *)&v343[8 * v161 + 152] = *(unsigned __int16 *)(v162 + 2 * v161);
        ++v161;
      }
      while (v155 > v161);
    }
  }
  unsigned int v163 = HIDWORD(v313);
  if (HIDWORD(v313))
  {
    BOOL v164 = v309;
    uint64_t v165 = HIDWORD(v310);
    if (HIDWORD(v313) < 0x10)
    {
      unsigned int v166 = 0;
      goto LABEL_100;
    }
    unsigned int v166 = 0;
    if (!BYTE4(v313)) {
      goto LABEL_192;
    }
    if ((HIDWORD(v313) - 1) > 0xFF) {
      goto LABEL_192;
    }
    uint64_t v247 = HIDWORD(v313) & 0xFFFFFFF0;
    unsigned int v166 = HIDWORD(v313) & 0xFFFFFFF0;
    int v248 = v309 + 2;
    uint64_t v249 = v338;
    do
    {
      uint16x8_t v250 = *(uint16x8_t *)v248[-2].i8;
      uint16x8_t v251 = *(uint16x8_t *)v248->i8;
      uint32x4_t v252 = vmovl_u16(*(uint16x4_t *)v250.i8);
      *(void *)&long long v253 = v252.u32[0];
      *((void *)&v253 + 1) = v252.u32[1];
      long long v254 = v253;
      *(void *)&long long v253 = v252.u32[2];
      *((void *)&v253 + 1) = v252.u32[3];
      long long v255 = v253;
      uint32x4_t v256 = vmovl_high_u16(v250);
      *(void *)&long long v253 = v256.u32[0];
      *((void *)&v253 + 1) = v256.u32[1];
      long long v257 = v253;
      *(void *)&long long v253 = v256.u32[2];
      *((void *)&v253 + 1) = v256.u32[3];
      long long v258 = v253;
      uint32x4_t v259 = vmovl_u16(*v248);
      *(void *)&long long v253 = v259.u32[0];
      *((void *)&v253 + 1) = v259.u32[1];
      long long v260 = v253;
      *(void *)&long long v253 = v259.u32[2];
      *((void *)&v253 + 1) = v259.u32[3];
      long long v261 = v253;
      *(v249 - 2) = v257;
      *(v249 - 1) = v258;
      uint32x4_t v262 = vmovl_high_u16(v251);
      *(void *)&long long v253 = v262.u32[0];
      *((void *)&v253 + 1) = v262.u32[1];
      long long v263 = v253;
      *(v249 - 4) = v254;
      *(v249 - 3) = v255;
      *(void *)&long long v253 = v262.u32[2];
      *((void *)&v253 + 1) = v262.u32[3];
      v249[2] = v263;
      v249[3] = v253;
      *uint64_t v249 = v260;
      v249[1] = v261;
      v249 += 8;
      v248 += 4;
      v247 -= 16;
    }
    while (v247);
    if (v163 != v166)
    {
LABEL_192:
      do
      {
LABEL_100:
        *(&v332 + v166) = (void *)v164->u16[v166];
        ++v166;
      }
      while (v163 > v166);
    }
    if (v163 < 0x10)
    {
      unsigned int v167 = 0;
      goto LABEL_103;
    }
    unsigned int v167 = 0;
    if (!(_BYTE)v163) {
      goto LABEL_193;
    }
    if (v163 - 1 > 0xFF) {
      goto LABEL_193;
    }
    uint64_t v264 = v163 & 0xFFFFFFF0;
    unsigned int v167 = v163 & 0xFFFFFFF0;
    int v265 = (uint16x4_t *)((char *)v164 + 2 * v165 + 16);
    uint64_t v266 = v339;
    do
    {
      uint16x8_t v267 = *(uint16x8_t *)v265[-2].i8;
      uint16x8_t v268 = *(uint16x8_t *)v265->i8;
      uint32x4_t v269 = vmovl_u16(*(uint16x4_t *)v267.i8);
      *(void *)&long long v270 = v269.u32[0];
      *((void *)&v270 + 1) = v269.u32[1];
      long long v271 = v270;
      *(void *)&long long v270 = v269.u32[2];
      *((void *)&v270 + 1) = v269.u32[3];
      long long v272 = v270;
      uint32x4_t v273 = vmovl_high_u16(v267);
      *(void *)&long long v270 = v273.u32[0];
      *((void *)&v270 + 1) = v273.u32[1];
      long long v274 = v270;
      *(void *)&long long v270 = v273.u32[2];
      *((void *)&v270 + 1) = v273.u32[3];
      long long v275 = v270;
      uint32x4_t v276 = vmovl_u16(*v265);
      *(void *)&long long v270 = v276.u32[0];
      *((void *)&v270 + 1) = v276.u32[1];
      long long v277 = v270;
      *(void *)&long long v270 = v276.u32[2];
      *((void *)&v270 + 1) = v276.u32[3];
      long long v278 = v270;
      *(v266 - 2) = v274;
      *(v266 - 1) = v275;
      uint32x4_t v279 = vmovl_high_u16(v268);
      *(void *)&long long v270 = v279.u32[0];
      *((void *)&v270 + 1) = v279.u32[1];
      long long v280 = v270;
      *(v266 - 4) = v271;
      *(v266 - 3) = v272;
      *(void *)&long long v270 = v279.u32[2];
      *((void *)&v270 + 1) = v279.u32[3];
      v266[2] = v280;
      v266[3] = v270;
      *uint64_t v266 = v277;
      v266[1] = v278;
      v266 += 8;
      v265 += 4;
      v264 -= 16;
    }
    while (v264);
    if (v163 != v167)
    {
LABEL_193:
      do
      {
LABEL_103:
        *(void *)&v338[8 * v167 + 152] = v164->u16[v165 + v167];
        ++v167;
      }
      while (v163 > v167);
    }
    uint64_t v168 = (2 * v165);
    if (v163 < 0x10)
    {
      unsigned int v169 = 0;
      goto LABEL_106;
    }
    unsigned int v169 = 0;
    if (!(_BYTE)v163) {
      goto LABEL_106;
    }
    if (v163 - 1 > 0xFF) {
      goto LABEL_106;
    }
    uint64_t v281 = v163 & 0xFFFFFFF0;
    unsigned int v169 = v163 & 0xFFFFFFF0;
    unint64_t v282 = (uint16x4_t *)((char *)v164 + 2 * v168 + 16);
    unint64_t v283 = &v340;
    do
    {
      uint16x8_t v284 = *(uint16x8_t *)v282[-2].i8;
      uint16x8_t v285 = *(uint16x8_t *)v282->i8;
      uint32x4_t v286 = vmovl_u16(*(uint16x4_t *)v284.i8);
      *(void *)&long long v287 = v286.u32[0];
      *((void *)&v287 + 1) = v286.u32[1];
      long long v288 = v287;
      *(void *)&long long v287 = v286.u32[2];
      *((void *)&v287 + 1) = v286.u32[3];
      long long v289 = v287;
      uint32x4_t v290 = vmovl_high_u16(v284);
      *(void *)&long long v287 = v290.u32[0];
      *((void *)&v287 + 1) = v290.u32[1];
      long long v291 = v287;
      *(void *)&long long v287 = v290.u32[2];
      *((void *)&v287 + 1) = v290.u32[3];
      long long v292 = v287;
      uint32x4_t v293 = vmovl_u16(*v282);
      *(void *)&long long v287 = v293.u32[0];
      *((void *)&v287 + 1) = v293.u32[1];
      long long v294 = v287;
      *(void *)&long long v287 = v293.u32[2];
      *((void *)&v287 + 1) = v293.u32[3];
      long long v295 = v287;
      *((_OWORD *)v283 - 2) = v291;
      *((_OWORD *)v283 - 1) = v292;
      uint32x4_t v296 = vmovl_high_u16(v285);
      *(void *)&long long v287 = v296.u32[0];
      *((void *)&v287 + 1) = v296.u32[1];
      long long v297 = v287;
      *((_OWORD *)v283 - 4) = v288;
      *((_OWORD *)v283 - 3) = v289;
      *(void *)&long long v287 = v296.u32[2];
      *((void *)&v287 + 1) = v296.u32[3];
      *((_OWORD *)v283 + 2) = v297;
      *((_OWORD *)v283 + 3) = v287;
      *(_OWORD *)unint64_t v283 = v294;
      *((_OWORD *)v283 + 1) = v295;
      v283 += 16;
      v282 += 4;
      v281 -= 16;
    }
    while (v281);
    if (v163 != v169)
    {
LABEL_106:
      uint64_t v170 = (uint64_t)v164 + 2 * v168;
      do
      {
        *(void *)&v339[8 * v169 + 152] = *(unsigned __int16 *)(v170 + 2 * v169);
        ++v169;
      }
      while (v163 > v169);
    }
  }
  bzero(v328, 0x288uLL);
  bzero(v324, 0x288uLL);
  memset(v323, 0, 33);
  long long v322 = 0u;
  long long v321 = 0u;
  long long v320 = 0u;
  *(void *)&v345[8] = 0;
  *(void *)v345 = 0;
  *(_DWORD *)&v345[23] = 0;
  *(void *)&v345[16] = 0;
  LOBYTE(v306[0]) = 0;
  peridot::HDUnfoldClass::twoTargetLogic(v303, v305, (uint64_t)v341, (uint64_t)&v332, (int8x16_t *)(v301 + 4053), v155, v298, v300, a10, (uint64_t)v328, (uint64_t)v324, (uint64_t)v345, (uint64_t)&v320, (unsigned __int8 *)v306);
  *(void *)(v301 + 4080) = 0;
  uint64_t v171 = LOBYTE(v306[0]);
  if (LOBYTE(v306[0]))
  {
    uint64_t v172 = 0;
    unint64_t v173 = 0;
    *(_OWORD *)(v301 + 4053) = *(_OWORD *)v345;
    uint64_t v174 = 1944;
    *(_OWORD *)(v301 + 4064) = *(_OWORD *)&v345[11];
    uint64_t v175 = (void *)v301;
    do
    {
      *uint64_t v175 = v328[v172];
      *(unsigned char *)(v301 + v172 + 3972) = *((unsigned char *)&v320 + v172);
      uint64_t v176 = v324[v172];
      if (v176)
      {
        unint64_t v177 = (unint64_t)&v305[36 * ((v176 - 1) % 3uLL) + 12 * ((v176 - 1) / 3uLL)];
        v175[81] = *(void *)v177;
        uint64_t v178 = v301 + 4 * v172;
        *(_DWORD *)(v178 + 1296) = *(_DWORD *)(v177 + 8);
        *(_DWORD *)(v178 + 1620) = *(_DWORD *)(v177 + 12);
        uint64_t v179 = (_DWORD *)(v301 + v174);
        _DWORD *v179 = *(_DWORD *)(v177 + 16);
        v179[81] = *(_DWORD *)(v177 + 20);
        v179[162] = *(_DWORD *)(v177 + 24);
        *(unsigned char *)(v301 + v172 + 2916) = *(unsigned char *)(v177 + 40);
        v179[264] = *(_DWORD *)(v177 + 28);
        v179[345] = *(_DWORD *)(v177 + 32);
        v179[426] = *(_DWORD *)(v177 + 36);
        ++v173;
      }
      ++v172;
      ++v175;
      v174 += 4;
    }
    while (v171 != v172);
    uint64_t v180 = 0;
    unint64_t v181 = 0;
    *(void *)(v301 + 4088) = v173;
    uint64_t v182 = 2052;
    do
    {
      *(void *)(v301 + 8 * v180 + 216) = v331[v180];
      *(unsigned char *)(v301 + v180 + 3999) = *((unsigned char *)&v321 + v180 + 11);
      uint64_t v183 = v327[v180];
      if (v183)
      {
        unint64_t v184 = (unint64_t)&v305[36 * ((v183 - 1) % 3uLL) + 12 * ((v183 - 1) / 3uLL)];
        *(void *)(v301 + 8 * v180 + 864) = *(void *)v184;
        uint64_t v185 = v301 + 4 * v180;
        *(_DWORD *)(v185 + 1404) = *(_DWORD *)(v184 + 8);
        *(_DWORD *)(v185 + 1728) = *(_DWORD *)(v184 + 12);
        uint64_t v186 = (_DWORD *)(v301 + v182);
        *uint64_t v186 = *(_DWORD *)(v184 + 16);
        v186[81] = *(_DWORD *)(v184 + 20);
        v186[162] = *(_DWORD *)(v184 + 24);
        *(unsigned char *)(v301 + v180 + 2943) = *(unsigned char *)(v184 + 40);
        v186[264] = *(_DWORD *)(v184 + 28);
        v186[345] = *(_DWORD *)(v184 + 32);
        v186[426] = *(_DWORD *)(v184 + 36);
        ++v181;
      }
      ++v180;
      v182 += 4;
    }
    while (v171 != v180);
    uint64_t v187 = 0;
    unint64_t v188 = 0;
    *(void *)(v301 + 4096) = v181;
    uint64_t v189 = 2160;
    do
    {
      *(void *)(v301 + 8 * v187 + 432) = v331[v187 + 27];
      *(unsigned char *)(v301 + v187 + 4026) = v323[v187 + 6];
      uint64_t v190 = v327[v187 + 27];
      if (v190)
      {
        unint64_t v191 = (unint64_t)&v305[36 * ((v190 - 1) % 3uLL) + 12 * ((v190 - 1) / 3uLL)];
        *(void *)(v301 + 8 * v187 + 1080) = *(void *)v191;
        uint64_t v192 = v301 + 4 * v187;
        *(_DWORD *)(v192 + 1512) = *(_DWORD *)(v191 + 8);
        *(_DWORD *)(v192 + 1836) = *(_DWORD *)(v191 + 12);
        unint64_t v193 = (_DWORD *)(v301 + v189);
        *unint64_t v193 = *(_DWORD *)(v191 + 16);
        v193[81] = *(_DWORD *)(v191 + 20);
        v193[162] = *(_DWORD *)(v191 + 24);
        *(unsigned char *)(v301 + v187 + 2970) = *(unsigned char *)(v191 + 40);
        v193[264] = *(_DWORD *)(v191 + 28);
        v193[345] = *(_DWORD *)(v191 + 32);
        v193[426] = *(_DWORD *)(v191 + 36);
        ++v188;
      }
      ++v187;
      v189 += 4;
    }
    while (v171 != v187);
    if (v181 <= v173) {
      unint64_t v194 = v173;
    }
    else {
      unint64_t v194 = v181;
    }
    if (v188 > v194) {
      unint64_t v194 = v188;
    }
    *(void *)(v301 + 4104) = v188;
    *(void *)(v301 + 4080) = v194;
  }
  unint64_t v360 = &unk_270717448;
  if (v361 && v363)
  {
    MEMORY[0x25A2D62A0]();
    v361 = 0;
    uint64_t v364 = 0;
    char v363 = 0;
  }
  uint64_t v362 = 0;
  v355 = &unk_270717448;
  if (v356 && v358)
  {
    MEMORY[0x25A2D62A0]();
    unint64_t v356 = 0;
    uint64_t v359 = 0;
    char v358 = 0;
  }
  uint64_t v357 = 0;
  unint64_t v350 = &unk_270717448;
  if (v351 && v353[0]) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v378 = &unk_270717448;
  if (v379 && v381)
  {
    MEMORY[0x25A2D62A0]();
    unint64_t v379 = 0;
    uint64_t v382 = 0;
    char v381 = 0;
  }
  uint64_t v380 = 0;
  v373 = &unk_270717448;
  if (v374 && v376)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v374 = 0;
    uint64_t v377 = 0;
    char v376 = 0;
  }
  uint64_t v375 = 0;
  v368 = &unk_270717448;
  if (v369 && v371[0]) {
    MEMORY[0x25A2D62A0]();
  }
  int64x2_t v308 = &unk_2707172A0;
  if (v309 && v311) {
    MEMORY[0x25A2D62A0]();
  }
  int32x4_t v314 = &unk_2707172A0;
  uint64_t result = (uint64_t)v315;
  if (v315 && v317) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259014378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,unint64_t a25,unint64_t a26,unint64_t a27,unint64_t a28,unint64_t a29)
{
  STACK[0xE48] = a24;
  if (STACK[0xE50] && LOBYTE(STACK[0xE60]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xE50] = 0;
    STACK[0xE68] = 0;
    LOBYTE(STACK[0xE60]) = 0;
  }
  STACK[0xE58] = 0;
  STACK[0xE20] = a25;
  if (STACK[0xE28] && LOBYTE(STACK[0xE38]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xE28] = 0;
    STACK[0xE40] = 0;
    LOBYTE(STACK[0xE38]) = 0;
  }
  STACK[0xE30] = 0;
  STACK[0xDF8] = a26;
  if (STACK[0xE00] && LOBYTE(STACK[0xE10])) {
    MEMORY[0x25A2D62A0]();
  }
  STACK[0xEE0] = a27;
  if (STACK[0xEE8] && LOBYTE(STACK[0xEF8]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xEE8] = 0;
    STACK[0xF00] = 0;
    LOBYTE(STACK[0xEF8]) = 0;
  }
  STACK[0xEF0] = 0;
  STACK[0xEB8] = a28;
  if (STACK[0xEC0] && LOBYTE(STACK[0xED0]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xEC0] = 0;
    STACK[0xED8] = 0;
    LOBYTE(STACK[0xED0]) = 0;
  }
  STACK[0xEC8] = 0;
  STACK[0xE90] = a29;
  if (STACK[0xE98])
  {
    if (LOBYTE(STACK[0xEA8])) {
      MEMORY[0x25A2D62A0]();
    }
  }
  Matrix<unsigned short>::~Matrix((uint64_t)&STACK[0x280]);
  Matrix<unsigned short>::~Matrix((uint64_t)&STACK[0x2B0]);
  _Unwind_Resume(a1);
}

void peridot::HDUnfoldClass::calcConf(uint64_t a1, int a2, void *__src, int a4, uint64_t a5, float *a6, uint64_t a7, uint64_t a8, float a9, char a10, uint64_t a11, uint64_t a12)
{
  __dst[81] = *MEMORY[0x263EF8340];
  unint64_t v12 = __src[510];
  if (!v12) {
    return;
  }
  if (v12 >= 3)
  {
    uint64_t v13 = "HDUnfoldClass: Unfolded targets confidence calculation supports up to two targets.\n";
LABEL_135:
    peridot_depth_log(v13);
    return;
  }
  uint64_t v17 = __src;
  unint64_t v19 = *__src != 0;
  if (__src[27]) {
    ++v19;
  }
  if (__src[54]) {
    ++v19;
  }
  if (v12 != 1)
  {
    unint64_t v120 = __src[1] != 0;
    if (__src[28]) {
      ++v120;
    }
    if (__src[55]) {
      ++v120;
    }
    if (v120 >= 2 && v19 >= 2) {
      goto LABEL_10;
    }
LABEL_134:
    uint64_t v13 = "HDUnfoldClass: Unfolded targets must have at least 2 detected (non-zero) bins.\n";
    goto LABEL_135;
  }
  if (v19 <= 1) {
    goto LABEL_134;
  }
LABEL_10:
  memcpy(__dst, __src, 0x288uLL);
  memcpy(v276, v17 + 243, sizeof(v276));
  memcpy(v275, v17 + 324, sizeof(v275));
  memcpy(v274, v17 + 375, sizeof(v274));
  memcpy(v273, (char *)v17 + 3324, sizeof(v273));
  memcpy(v272, v17 + 456, sizeof(v272));
  unint64_t v21 = 0;
  long long v22 = *(_OWORD *)((char *)v17 + 4020);
  v270[1] = *(_OWORD *)((char *)v17 + 4004);
  v270[2] = v22;
  v270[3] = *(_OWORD *)((char *)v17 + 4036);
  char v271 = *((unsigned char *)v17 + 4052);
  long long v23 = *(_OWORD *)((char *)v17 + 3988);
  long long v269 = *(_OWORD *)((char *)v17 + 3972);
  v270[0] = v23;
  uint32x4_t v239 = v17;
  uint64_t v240 = a7;
  long long v238 = a6;
  uint64_t v247 = a1;
  do
  {
    int v24 = &v17[v21];
    unint64_t v25 = *v24;
    unint64_t v26 = v24[27];
    unint64_t v27 = v24[54];
    if (v27) {
      unint64_t v28 = v26 == 0;
    }
    else {
      unint64_t v28 = 2;
    }
    if (v27) {
      BOOL v29 = v26 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29 && v25 != 0) {
      goto LABEL_12;
    }
    float v31 = a6[v28];
    if (v28)
    {
      float __srca = roundf((float)((float)v25 - *a6) + v31);
      uint64_t v32 = 1;
    }
    else
    {
      uint64_t v32 = 0;
    }
    if (v27) {
      BOOL v33 = v26 == 0;
    }
    else {
      BOOL v33 = 0;
    }
    if (!v33)
    {
      *(&__srca + v32) = roundf((float)((float)v26 - a6[1]) + v31);
      if (!v27) {
        goto LABEL_34;
      }
      ++v32;
    }
    *(&__srca + v32) = roundf((float)((float)v27 - a6[2]) + v31);
LABEL_34:
    int v34 = 0;
    int v35 = 0;
    float v36 = __srca;
    if (__srca >= v262) {
      float v37 = __srca;
    }
    else {
      float v37 = v262;
    }
    LOBYTE(v20) = *(unsigned char *)(a1 + 72);
    float v20 = (float)LODWORD(v20);
    float v38 = v37 - v20;
    if (v262 < __srca) {
      float v36 = v262;
    }
    *(float *)&long long v39 = v36 + v20;
    unint64_t v40 = (unint64_t)*(float *)&v39;
    uint64_t v264 = 0;
    long long v263 = 0;
    int v265 = 0;
    unint64_t v245 = (unint64_t)v38;
    if ((unint64_t)v38 <= (unint64_t)*(float *)&v39)
    {
      unint64_t v241 = v21;
      float v41 = 0;
      int v34 = 0;
      float v42 = 0;
      unint64_t v43 = 0;
      BOOL v44 = 0;
      int v35 = v264;
      unint64_t v45 = (unint64_t)v38;
      unint64_t v249 = v28;
      while (1)
      {
        unint64_t v46 = v45 % *(void *)(*(void *)(a1 + 8) + 8 * v28);
        if ((unint64_t)v44 >= v43) {
          break;
        }
        *(void *)BOOL v44 = v46;
        int v35 = v44 + 8;
LABEL_42:
        ++v45;
        BOOL v44 = v35;
        if (v45 > v40)
        {
          uint64_t v264 = v35;
          long long v263 = v34;
          int v265 = v41;
          uint64_t v17 = v239;
          a7 = v240;
          a6 = v238;
          unint64_t v21 = v241;
          goto LABEL_71;
        }
      }
      uint64_t v47 = (v44 - v42) >> 3;
      unint64_t v48 = v47 + 1;
      if ((unint64_t)(v47 + 1) >> 61)
      {
        uint64_t v264 = v35;
        long long v263 = v34;
        int v265 = v41;
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v49 = v43 - (void)v42;
      if (v49 >> 2 > v48) {
        unint64_t v48 = v49 >> 2;
      }
      if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v50 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v50 = v48;
      }
      if (v50)
      {
        if (v50 >> 61)
        {
          uint64_t v264 = v35;
          long long v263 = v34;
          int v265 = v41;
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v51 = v50;
        uint64_t v52 = operator new(8 * v50);
        unint64_t v50 = v51;
      }
      else
      {
        uint64_t v52 = 0;
      }
      int v34 = (unint64_t *)&v52[8 * v47];
      unint64_t *v34 = v46;
      int v35 = (char *)(v34 + 1);
      if (v44 == v42)
      {
        a1 = v247;
        float v41 = &v52[8 * v50];
        if (!v42) {
          goto LABEL_60;
        }
        goto LABEL_59;
      }
      unint64_t v53 = v44 - 8 - v42;
      if (v53 < 0x168
        || &v52[v44 - v42 - 8 - (v53 & 0xFFFFFFFFFFFFFFF8)] > &v52[v44 - v42 - 8]
        || &v44[-(v53 & 0xFFFFFFFFFFFFFFF8) - 8] > v44 - 8
        || (unint64_t)(v42 - v52) < 0x20)
      {
        int v54 = v44;
        a1 = v247;
      }
      else
      {
        uint64_t v57 = (v53 >> 3) + 1;
        int v54 = &v44[-8 * (v57 & 0x3FFFFFFFFFFFFFFCLL)];
        unint64_t v58 = &v52[8 * v47 - 16];
        double v59 = v44 - 16;
        uint64_t v60 = v57 & 0x3FFFFFFFFFFFFFFCLL;
        a1 = v247;
        do
        {
          long long v39 = *(_OWORD *)v59;
          *(v58 - 1) = *((_OWORD *)v59 - 1);
          _OWORD *v58 = v39;
          v58 -= 2;
          v59 -= 32;
          v60 -= 4;
        }
        while (v60);
        v34 -= v57 & 0x3FFFFFFFFFFFFFFCLL;
        if (v57 == (v57 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_58:
          float v41 = &v52[8 * v50];
          if (!v42)
          {
LABEL_60:
            float v42 = (char *)v34;
            unint64_t v43 = (unint64_t)v41;
            unint64_t v28 = v249;
            goto LABEL_42;
          }
LABEL_59:
          unint64_t v56 = v35;
          operator delete(v42);
          int v35 = v56;
          goto LABEL_60;
        }
      }
      do
      {
        unint64_t v55 = *((void *)v54 - 1);
        v54 -= 8;
        *--int v34 = v55;
      }
      while (v54 != v42);
      goto LABEL_58;
    }
LABEL_71:
    if (!*((unsigned char *)v17 + v21 + 4053))
    {
      uint64_t v62 = **(void **)(a7 + 16);
      if (v28 >= (*(void *)(*(void *)(a7 + 16) + 8) - v62) >> 3) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v63 = **(void **)(a7 + 32);
      if (v28 >= (*(void *)(*(void *)(a7 + 32) + 8) - v63) >> 3) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v64 = *(void *)(v62 + 8 * v28);
      uint64_t v65 = *(void *)(v63 + 8 * v28);
      uint64_t v259 = 0;
      long long v258 = 0;
      unint64_t v260 = 0;
      uint64_t v66 = v35 - (char *)v34;
      if (v35 == (char *)v34) {
        goto LABEL_124;
      }
      uint64_t v237 = v64;
      uint64_t v242 = v65;
      long long v246 = (unint64_t *)v35;
      if (v66 < 0) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v67 = v66 >> 3;
      unint64_t v68 = (unint64_t)((v66 >> 3) - 1) >> 6;
      float64x2_t v69 = operator new(8 * (v68 + 1));
      float64x2_t v70 = v69;
      unint64_t v260 = v68 + 1;
      long long v258 = v69;
      uint64_t v259 = v66 >> 3;
      if ((unint64_t)v66 >= 0x208) {
        unint64_t v71 = (unint64_t)((v66 >> 3) - 1) >> 6;
      }
      else {
        unint64_t v71 = 0;
      }
      v69[v71] = 0;
      if ((unint64_t)v66 >= 8)
      {
        if ((unint64_t)v66 >= 0x200) {
          bzero(v69, 8 * (v67 >> 6));
        }
        uint64_t v72 = ((unint64_t)v66 >> 3) & 0x3F;
        if (v72) {
          v70[v67 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v72);
        }
      }
      unint64_t v73 = 0;
      uint64_t v74 = *(void *)(v237 + 8);
      float v75 = *(float *)(a1 + 56);
      uint64_t v76 = *(void *)(v242 + 8);
      if (v67 <= 1) {
        uint64_t v77 = 1;
      }
      else {
        uint64_t v77 = v66 >> 3;
      }
      uint64_t v78 = *(void *)(a1 + 8);
      LOBYTE(v79) = 1;
      do
      {
        unint64_t v80 = v34[v73];
        unint64_t v81 = *(void *)(v78 + 8 * v28);
        float v82 = *(float *)(v74 + 4 * v80);
        if ((float)(v82 - *(float *)(v74 + 4 * ((v80 - 2) % v81) + 4)) >= 0.0
          && (float)(v82 - *(float *)(v74 + 4 * (v80 % v81) + 4)) >= 0.0)
        {
          *(void *)((char *)v70 + ((v73 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v73;
          unint64_t v80 = v34[v73];
          float v82 = *(float *)(v74 + 4 * v80);
        }
        int v79 = (v82 < (float)(sqrtf(*(float *)(v76 + 4 * v80)) * v75)) & v79;
        ++v73;
      }
      while (v77 != v73);
      if (!v67) {
        goto LABEL_123;
      }
      unint64_t v83 = 0;
      char v84 = 1;
      do
      {
        uint64_t v85 = (v83 >> 3) & 0x1FFFFFFFFFFFFFF8;
        uint64_t v86 = 1 << v83;
        uint64_t v87 = *(void *)((char *)v70 + v85);
        if ((v87 & (1 << v83)) != 0) {
          int v88 = 1;
        }
        else {
          int v88 = v79;
        }
        uint64_t v89 = v87 & ~v86;
        uint64_t v90 = v87 | v86;
        if (!v88) {
          uint64_t v90 = v89;
        }
        *(void *)((char *)v70 + v85) = v90;
        v84 &= (v90 & v86) == 0;
        ++v83;
      }
      while (v67 != v83);
      if (v84) {
        goto LABEL_123;
      }
      uint64_t v91 = *(void *)(v237 + 8);
      unint64_t v92 = *v34;
      float v93 = *(float *)(v91 + 4 * *v34);
      if (v246 == v34)
      {
        unint64_t v95 = 0;
        uint64_t v96 = v240;
      }
      else
      {
        unint64_t v94 = 0;
        unint64_t v95 = 0;
        uint64_t v96 = v240;
        do
        {
          if ((*(void *)((char *)v70 + ((v94 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v94))
          {
            unint64_t v97 = v34[v94];
            if (*(float *)(v91 + 4 * v97) > v93)
            {
              float v93 = *(float *)(v91 + 4 * v97);
              unint64_t v92 = v34[v94];
              unint64_t v95 = v94;
            }
          }
          ++v94;
        }
        while (v77 != v94);
      }
      uint64_t v98 = 4 * v21;
      *(float *)&v273[108 * v28 + v98] = v93;
      __dst[27 * v28 + v21] = v95 + v245;
      *(_DWORD *)&v275[108 * v28 + v98] = *(_DWORD *)(*(void *)(v242 + 8) + 4 * v92);
      uint64_t v99 = **(void **)(v96 + 24);
      if (v28 >= (*(void *)(*(void *)(v96 + 24) + 8) - v99) >> 3) {
        std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
      }
      unsigned int v100 = *(float32x4_t **)(a1 + 304);
      unsigned int v101 = *(float32x4_t **)(a1 + 312);
      if (v101 == v100)
      {
        float v109 = 0.0;
      }
      else
      {
        unint64_t v102 = ((char *)v101 - (char *)v100) >> 2;
        float v103 = floorf((float)(int)v102 * 0.5);
        unint64_t v104 = *(void *)(*(void *)(a1 + 8) + 8 * v28);
        uint64_t v105 = *(void *)(*(void *)(v99 + 8 * v28) + 8);
        uint64_t v106 = (int)((int)((v104 & ((int)(float)((float)v92 - v103) >> 31)) + (int)(float)((float)v92 - v103)) % v104);
        if (v102 <= 1) {
          unint64_t v107 = 1;
        }
        else {
          unint64_t v107 = v102;
        }
        if (v107 > 7)
        {
          uint64_t v110 = 0;
          unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
          int8x8_t v111 = v100 + 1;
          float32x4_t v112 = 0uLL;
          unint64_t v113 = v107 & 0xFFFFFFFFFFFFFFF8;
          float32x4_t v114 = 0uLL;
          do
          {
            int8x8_t v115 = (float32x4_t *)(v105 + 4 * (v110 + v106));
            float32x4_t v112 = vmlaq_f32(v112, *v115, vmulq_f32(v111[-1], v111[-1]));
            float32x4_t v114 = vmlaq_f32(v114, v115[1], vmulq_f32(*v111, *v111));
            v110 += 8;
            v111 += 2;
            v113 -= 8;
          }
          while (v113);
          float32x4_t v116 = vaddq_f32(v114, v112);
          float v109 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v116, v116));
          if (v107 == v108) {
            goto LABEL_122;
          }
        }
        else
        {
          unint64_t v108 = 0;
          float v109 = 0.0;
        }
        unint64_t v117 = v107 - v108;
        int8x8_t v118 = &v100->f32[v108];
        do
        {
          float v119 = *v118++;
          float v109 = v109 + (float)((float)(v119 * v119) * *(float *)(v105 + 4 * (v108 + v106)));
          ++v108;
          --v117;
        }
        while (v117);
      }
LABEL_122:
      *(float *)&v274[108 * v28 + 4 * v21] = v109;
LABEL_123:
      operator delete(v70);
      a6 = v238;
      uint64_t v17 = v239;
      a7 = v240;
      goto LABEL_124;
    }
    v257[0] = 0.0;
    LODWORD(v256[0]) = 0;
    v255[0] = 0.0;
    v267[0] = 0;
    peridot::HDUnfoldClass::diffBLRprocess(a1, a7, v28, *(float *)&v39, (uint64_t)a6, a5, (uint64_t)&v263, a8, (uint64_t)&v258, v257, v256, v255, v267);
    uint64_t v61 = 4 * v21;
    *(float *)&v275[108 * v28 + v61] = v257[0];
    *(_DWORD *)&v274[108 * v28 + v61] = v256[0];
    *(float *)&v273[108 * v28 + v61] = v255[0];
    __dst[27 * v28 + v21] = v267[0] + v245;
LABEL_124:
    if (v34) {
      operator delete(v34);
    }
    unint64_t v12 = v17[510];
LABEL_12:
    ++v21;
  }
  while (v21 < v12);
  memset(v256, 0, 108);
  if (!v12)
  {
    uint64_t v189 = 0;
    uint64_t v190 = 0;
    uint64_t v187 = 0;
    std::string __p = 0;
    uint32x4_t v252 = 0;
    long long v253 = 0;
    goto LABEL_218;
  }
  float64x2_t v122 = (float *)&v272[108];
  float v123 = (float)*(unint64_t *)(a1 + 64);
  float v124 = (float *)&v274[108];
  float64x2_t v125 = v268;
  float64x2_t v126 = (char *)v270 + 11;
  unint64_t v127 = v12;
  do
  {
    float v135 = *(v122 - 27);
    unint64_t v136 = v135 <= v123 && !*(v126 - 27) && *(v124 - 27) > 0.0;
    if (*v122 <= v123 && !*v126 && *v124 > 0.0) {
      ++v136;
    }
    float v137 = v122[27];
    int v138 = v126[27];
    if (v137 <= v123 && v138 == 0)
    {
      int v138 = 0;
      if (v124[27] > 0.0) {
        ++v136;
      }
    }
    BOOL v128 = v137 > v123;
    BOOL v129 = *v122 > v123;
    BOOL v130 = v135 > v123;
    if (v136 <= 1)
    {
      BOOL v130 = 0;
      BOOL v129 = 0;
      BOOL v128 = 0;
    }
    if (*(v126 - 27)) {
      char v131 = 1;
    }
    else {
      char v131 = v130;
    }
    *(v125 - 27) = v131;
    if (*v126++) {
      char v133 = 1;
    }
    else {
      char v133 = v129;
    }
    if (v138) {
      char v134 = 1;
    }
    else {
      char v134 = v128;
    }
    ++v122;
    *float64x2_t v125 = v133;
    v125[27] = v134;
    ++v124;
    ++v125;
    --v127;
  }
  while (v127);
  unint64_t v140 = 0;
  float v248 = *(float *)(a1 + 76);
  unsigned int v141 = v268;
  unsigned int v142 = &__dst[27];
  unsigned __int8 v143 = &v258;
  float v144 = 1.0;
  double v145 = 0.707106781;
  unint64_t v146 = v12;
  do
  {
    float v151 = *(float *)&v273[v140];
    if (*(v141 - 27)) {
      float v152 = 0.0;
    }
    else {
      float v152 = v144;
    }
    float v153 = *(float *)&v274[v140] * v152;
    *(float *)((char *)&v263 + v140) = v153;
    float v154 = v152 * v151;
    if (v153 <= 0.0) {
      float v155 = 0.0;
    }
    else {
      float v155 = v144;
    }
    if (v153 == 0.0) {
      float v156 = v144;
    }
    else {
      float v156 = 0.0;
    }
    float v157 = v155 / (float)(v156 + v153);
    if (*v141) {
      float v158 = 0.0;
    }
    else {
      float v158 = v144;
    }
    float v159 = v158 * *(float *)&v273[v140 + 108];
    float v160 = *(float *)&v274[v140 + 108] * v158;
    int v161 = (float *)&v266[v140 + 108];
    *(float *)&v266[v140] = v160;
    if (v160 <= 0.0) {
      float v162 = 0.0;
    }
    else {
      float v162 = v144;
    }
    if (v160 == 0.0) {
      float v163 = v144;
    }
    else {
      float v163 = 0.0;
    }
    float v164 = v162 / (float)(v163 + v160);
    int v165 = v141[27];
    if (v141[27]) {
      float v166 = 0.0;
    }
    else {
      float v166 = v144;
    }
    float v167 = v166 * *(float *)&v273[v140 + 216];
    float v168 = *(float *)&v274[v140 + 216] * v166;
    *int v161 = v168;
    if (v168 <= 0.0) {
      float v169 = 0.0;
    }
    else {
      float v169 = v144;
    }
    if (v168 == 0.0) {
      float v170 = v144;
    }
    else {
      float v170 = 0.0;
    }
    float v171 = v169 / (float)(v170 + v168);
    float v172 = v144 / (float)(v171 + (float)(v164 + v157));
    float v173 = v157 * v172;
    float v174 = *(float *)&v275[v140];
    float v175 = v164 * v172;
    float v176 = (float)(*(float *)((char *)v256 + v140) + (float)(v154 * v173)) + (float)(v159 * v175);
    float v177 = (float)(v153 * (float)(v173 * v173)) + (float)(v160 * (float)(v175 * v175));
    float v178 = *(float *)&v275[v140 + 108];
    float v179 = (float)(v174 * (float)(v173 * v173)) + (float)(v178 * (float)(v175 * v175));
    float v180 = v176 + (float)(v167 * (float)(v171 * v172));
    float v250 = *(float *)&v275[v140 + 216];
    float v181 = (float)((float)(v173 * (float)(unint64_t)(*(v142 - 27) + 1))
                 + (float)(v175 * (float)(unint64_t)(*v142 + 1)))
         + (float)((float)(v171 * v172) * (float)(unint64_t)(v142[27] + 1));
    float v182 = v169 + (float)(v162 + v155);
    *(float *)((char *)v256 + v140) = v180;
    float v183 = (float)(v177 + (float)(v168 * (float)((float)(v171 * v172) * (float)(v171 * v172)))) * v182;
    v255[v140 / 4] = (float)(v179 + (float)(v250 * (float)((float)(v171 * v172) * (float)(v171 * v172)))) * v182;
    *(float *)((char *)&__srca + v140) = v180 / sqrtf(v183 / v182);
    _OWORD *v143 = (void *)vcvtas_u32_f32(v181);
    float v184 = sqrtf(v183);
    double v185 = v145;
    float v186 = erfc((float)((float)-(float)(v180 - (float)(sqrtf(v174) * a9)) / v184) * v145) * 0.5;
    if (*(float *)((char *)&v263 + v140) <= 0.0 && !*(v141 - 27)) {
      float v186 = 0.0;
    }
    float v147 = erfc((float)((float)-(float)(v180 - (float)(sqrtf(v178) * a9)) / v184) * v185) * 0.5;
    if (*(v161 - 27) <= 0.0 && !*v141) {
      float v147 = 0.0;
    }
    ++v141;
    ++v142;
    float v148 = erfc((float)((float)-(float)(v180 - (float)(sqrtf(v250) * a9)) / v184) * v185) * 0.5;
    if (v165) {
      float v149 = v148;
    }
    else {
      float v149 = 0.0;
    }
    if (v168 <= 0.0) {
      float v148 = v149;
    }
    float v144 = 1.0;
    float v150 = powf((float)(2.0/ (float)((float)((float)((float)(v147 * v186) * (float)(1.0 - v148)) + 1.0)+ (float)((float)(v147 + (float)((float)(1.0 - v147) * v186)) * v148)))+ -1.0, v248);
    double v145 = v185;
    v257[v140 / 4] = (float)(2.0 / (float)(v150 + 1.0)) + -1.0;
    v140 += 4;
    ++v143;
    --v146;
  }
  while (v146);
  if (v12 >> 61) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v17 = v239;
  uint64_t v187 = (__n128 *)operator new(8 * v12);
  bzero(v187, 8 * v12);
  unint64_t v188 = (char *)operator new(4 * v12);
  uint64_t v189 = (__n128 *)((char *)v187 + 8 * v12);
  uint64_t v190 = v189;
  unint64_t v191 = &v188[4 * v12];
  std::string __p = v188;
  long long v253 = v191;
  memcpy(v188, &__srca, 4 * v12);
  uint32x4_t v252 = v191;
  if (8 * v12 - 8 < 0x18)
  {
    uint64_t v192 = 0;
    unint64_t v193 = v187;
    goto LABEL_217;
  }
  unint64_t v194 = ((8 * v12 - 8) >> 3) + 1;
  uint64_t v192 = v194 & 0x3FFFFFFFFFFFFFFCLL;
  int64x2_t v195 = (int64x2_t)xmmword_2591200C0;
  uint64_t v196 = (int64x2_t *)&v187[1];
  int64x2_t v197 = vdupq_n_s64(2uLL);
  int64x2_t v198 = vdupq_n_s64(4uLL);
  uint64_t v199 = v194 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v196[-1] = v195;
    int64x2_t *v196 = vaddq_s64(v195, v197);
    int64x2_t v195 = vaddq_s64(v195, v198);
    v196 += 2;
    v199 -= 4;
  }
  while (v199);
  if (v194 != v192)
  {
    unint64_t v193 = (__n128 *)((char *)v187 + 8 * (v194 & 0x3FFFFFFFFFFFFFFCLL));
    do
    {
LABEL_217:
      v193->n128_u64[0] = v192;
      unint64_t v193 = (__n128 *)((char *)v193 + 8);
      ++v192;
    }
    while (v193 != v189);
  }
LABEL_218:
  p_p = &__p;
  unint64_t v200 = ((char *)v190 - (char *)v187) >> 3;
  if ((char *)v190 - (char *)v187 < 1025)
  {
LABEL_222:
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(v187, v190, (uint64_t **)&p_p, ((char *)v190 - (char *)v187) >> 3, 0, 0);
  }
  else
  {
    uint32x4_t v201 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v202 = ((char *)v190 - (char *)v187) >> 3;
    while (1)
    {
      long long v203 = (uint64_t *)operator new(8 * v202, v201);
      if (v203) {
        break;
      }
      BOOL v204 = v202 > 1;
      v202 >>= 1;
      if (!v204) {
        goto LABEL_222;
      }
    }
    uint32x4_t v205 = v203;
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(v187, v190, (uint64_t **)&p_p, ((char *)v190 - (char *)v187) >> 3, v203, v202);
    operator delete(v205);
  }
  uint64_t v206 = a12;
  if (a10)
  {
    if (v187 >= v189)
    {
      unint64_t v207 = ((char *)v189 - (char *)v187) >> 2;
      if (v207 <= 1) {
        unint64_t v207 = 1;
      }
      unint64_t v208 = 0x1FFFFFFFFFFFFFFFLL;
      if ((unint64_t)((char *)v189 - (char *)v187) < 0x7FFFFFFFFFFFFFF8) {
        unint64_t v208 = v207;
      }
      if (v208 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v209 = v187->n128_u64[0];
      long long v210 = (__n128 *)operator new(8 * v208);
      v210->n128_u64[0] = v209;
      operator delete(v187);
      uint64_t v187 = v210;
      uint64_t v206 = a12;
    }
    unint64_t v200 = 1;
    goto LABEL_234;
  }
  if (v190 != v187)
  {
LABEL_234:
    uint64_t v211 = 0;
    if (v200 <= 1) {
      uint64_t v212 = 1;
    }
    else {
      uint64_t v212 = v200;
    }
    uint64_t v213 = (void *)(a11 + 88);
    uint64_t v214 = (float *)(a11 + 160);
    do
    {
      unint64_t v217 = v187->n128_u64[v211];
      *(v214 - 31) = v257[v217];
      *(v213 - 11) = (char *)*(&v258 + v217) - 1;
      unint64_t v218 = v187->n128_u64[v211];
      float v219 = v255[v218];
      *(v214 - 34) = *((float *)v256 + v218) / sqrtf(v219);
      *(v214 - 25) = *(&__srca + v218);
      *(v214 - 22) = v219;
      char v220 = *((unsigned char *)v17 + v218 + 4053);
      if (v220) {
        float v221 = 1.0;
      }
      else {
        float v221 = 0.0;
      }
      *(float *)(v206 + 4 * v211) = v221;
      *(unsigned char *)(a11 + 237 + v211) = v220;
      *uint64_t v213 = v17[v218 + 81];
      unint64_t v222 = v187->n128_u64[v211];
      long long v223 = (float *)v17 + v222;
      int v224 = *((unsigned __int8 *)v267 + v222);
      if (*((unsigned char *)v267 + v222)) {
        float v225 = 0.0;
      }
      else {
        float v225 = 1.0;
      }
      *uint64_t v214 = v225 * v223[405];
      v214[9] = v223[324];
      if (v224 || (float v215 = v276[v222], v215 <= 0.0))
      {
        unint64_t v216 = 0;
        float v215 = 0.0;
      }
      else
      {
        unint64_t v216 = 1;
      }
      v213[3] = v17[v222 + 108];
      unint64_t v226 = v187->n128_u64[v211];
      long long v227 = (float *)v17 + v226;
      int v228 = v268[v226];
      if (v268[v226]) {
        float v229 = 0.0;
      }
      else {
        float v229 = 1.0;
      }
      v214[3] = v229 * v227[432];
      v214[12] = v227[351];
      if (!v228)
      {
        float v230 = v276[v226 + 27];
        BOOL v204 = v230 <= 0.0;
        float v231 = v230 + v215;
        if (!v204)
        {
          ++v216;
          float v215 = v231;
        }
      }
      v213[6] = v17[v226 + 135];
      unint64_t v232 = v187->n128_u64[v211];
      uint16x8_t v233 = (float *)v17 + v232;
      int v234 = v268[v232 + 27];
      if (v268[v232 + 27]) {
        float v235 = 0.0;
      }
      else {
        float v235 = 1.0;
      }
      v214[6] = v235 * v233[459];
      v214[15] = v233[378];
      if (v234 || (float v236 = v276[v232 + 54], v236 <= 0.0))
      {
        if (!v216) {
          goto LABEL_240;
        }
      }
      else
      {
        float v215 = v236 + v215;
        ++v216;
      }
      *(v214 - 28) = v215 / (float)v216;
LABEL_240:
      ++v211;
      ++v213;
      ++v214;
    }
    while (v212 != v211);
  }
  if (__p)
  {
    uint32x4_t v252 = __p;
    operator delete(__p);
  }
  if (v187) {
    operator delete(v187);
  }
}

void sub_259015A40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  operator delete(v27);
  _Unwind_Resume(a1);
}

uint64_t peridot::HDUnfoldClass::twoTargetLogic(uint64_t result, int *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, size_t a6, float *a7, float *a8, unsigned char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 *a14)
{
  uint64_t v815 = *MEMORY[0x263EF8340];
  *a9 = 0;
  *a7 = *(float *)(result + 56);
  int v814 = 0;
  memset(v813, 0, sizeof(v813));
  int v812 = 0;
  memset(v811, 0, sizeof(v811));
  int v810 = 0;
  memset(v809, 0, sizeof(v809));
  memset(v808, 0, 81);
  if (!a6) {
    return result;
  }
  size_t v14 = a6;
  uint64_t v15 = a4;
  uint64_t v16 = a10;
  uint64_t v17 = a11;
  uint64_t v763 = result;
  uint64_t v18 = (void *)(a4 + 216);
  uint64_t v19 = 27;
  uint64_t v20 = 27;
  float v21 = (float)*(unint64_t *)(result + 64);
  do
  {
    uint64_t v25 = *(v18 - 27);
    if (v25)
    {
      unint64_t v26 = (unint64_t)&a2[36 * ((v25 - 1) % 3uLL) + 12 * ((v25 - 1) / 3uLL)];
      v809[v20 + 57] = (float)*(unint64_t *)v26;
      *(_DWORD *)((char *)v807 + v20 * 4 + 4) = *(_DWORD *)(v26 + 8);
      float v27 = *(float *)(v26 + 36);
      v811[v20 + 57] = v27;
    }
    else
    {
      float v27 = v811[v20 + 57];
    }
    BOOL v28 = v27 > 0.0;
    if (v27 > v21) {
      BOOL v28 = 0;
    }
    *((unsigned char *)v806 + v19 + 5) = v28;
    if (*v18)
    {
      unint64_t v29 = (unint64_t)&a2[36 * ((*v18 - 1) % 3uLL) + 12 * ((*v18 - 1) / 3uLL)];
      v811[v20] = (float)*(unint64_t *)v29;
      v809[v20] = *(float *)(v29 + 8);
      float v30 = *(float *)(v29 + 36);
      *(float *)&v813[v20 * 4] = v30;
    }
    else
    {
      float v30 = *(float *)&v813[v20 * 4];
    }
    BOOL v31 = v30 > 0.0;
    if (v30 > v21) {
      BOOL v31 = 0;
    }
    v808[v19] = v31;
    uint64_t v32 = v18[27];
    if (v32)
    {
      unint64_t v33 = (unint64_t)&a2[36 * ((v32 - 1) % 3uLL) + 12 * ((v32 - 1) / 3uLL)];
      v811[v20 + 27] = (float)*(unint64_t *)v33;
      v809[v20 + 27] = *(float *)(v33 + 8);
      float v22 = *(float *)(v33 + 36);
      *(float *)&v813[v20 * 4 + 108] = v22;
    }
    else
    {
      float v22 = *(float *)&v813[v20 * 4 + 108];
    }
    BOOL v23 = v22 > 0.0;
    if (v22 > v21) {
      BOOL v23 = 0;
    }
    v808[v19 + 27] = v23;
    unsigned __int8 v24 = v19++ - 26;
    ++v18;
    ++v20;
  }
  while (a6 > v24);
  v806[1] = 0;
  v806[0] = 0;
  *(_DWORD *)((char *)v807 + 7) = 0;
  v807[0] = 0;
  if (a6 <= 1)
  {
    LOBYTE(v806[0]) = 1;
    uint64_t v61 = a5;
    goto LABEL_958;
  }
  int v34 = 0;
  int v35 = 0;
  uint64_t v36 = 0;
  float v37 = 0;
  v770 = 0;
  v771 = 0;
  unsigned int v38 = a6;
  v772 = 0;
  do
  {
    long long v39 = &v809[v36];
    float v40 = *v39;
    BOOL v41 = *v39 >= 3.4028e38 || v40 <= 0.0;
    if (v41) {
      float v40 = 3.4028e38;
    }
    float v42 = v39[27];
    if (v42 < v40 && v42 > 0.0) {
      float v40 = v39[27];
    }
    float v44 = v39[54];
    if (v44 >= v40 || v44 <= 0.0) {
      float v46 = v40;
    }
    else {
      float v46 = v39[54];
    }
    if (v34 < v35)
    {
      *v34++ = v46;
      goto LABEL_22;
    }
    uint64_t v47 = v34 - v37;
    unint64_t v48 = v47 + 1;
    if ((unint64_t)(v47 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if (((char *)v35 - (char *)v37) >> 1 > v48) {
      unint64_t v48 = ((char *)v35 - (char *)v37) >> 1;
    }
    if ((unint64_t)((char *)v35 - (char *)v37) >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v49 = v48;
    }
    if (v49)
    {
      if (v49 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unint64_t v50 = operator new(4 * v49);
    }
    else
    {
      unint64_t v50 = 0;
    }
    unint64_t v51 = (float *)&v50[4 * v47];
    float *v51 = v46;
    uint64_t v52 = v51 + 1;
    if (v34 != v37)
    {
      unint64_t v53 = (char *)(v34 - 1) - (char *)v37;
      if (v53 >= 0xBC)
      {
        if (&v50[(char *)v34 - (char *)v37 - 4 - (v53 & 0xFFFFFFFFFFFFFFFCLL)] > &v50[(char *)v34 - (char *)v37 - 4])
        {
          int v54 = v34;
        }
        else if ((float *)((char *)v34 - (v53 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v34 - 1)
        {
          int v54 = v34;
        }
        else if ((unint64_t)((char *)v37 - v50) >= 0x20)
        {
          uint64_t v56 = (v53 >> 2) + 1;
          int v54 = &v34[-(v56 & 0x7FFFFFFFFFFFFFF8)];
          uint64_t v57 = &v50[4 * v47 - 16];
          unint64_t v58 = v34 - 4;
          uint64_t v59 = v56 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v60 = *(_OWORD *)v58;
            *(v57 - 1) = *((_OWORD *)v58 - 1);
            *uint64_t v57 = v60;
            v57 -= 2;
            v58 -= 8;
            v59 -= 8;
          }
          while (v59);
          v51 -= v56 & 0x7FFFFFFFFFFFFFF8;
          if (v56 == (v56 & 0x7FFFFFFFFFFFFFF8)) {
            goto LABEL_55;
          }
        }
        else
        {
          int v54 = v34;
        }
      }
      else
      {
        int v54 = v34;
      }
      do
      {
        int v55 = *((_DWORD *)v54-- - 1);
        *((_DWORD *)v51-- - 1) = v55;
      }
      while (v54 != v37);
    }
LABEL_55:
    int v35 = (float *)&v50[4 * v49];
    v770 = v51;
    v772 = v35;
    if (v37) {
      operator delete(v37);
    }
    float v37 = v51;
    int v34 = v52;
    uint64_t v15 = a4;
LABEL_22:
    v771 = v34;
    uint64_t v36 = v36 + 1;
  }
  while (v36 < v38);
  unint64_t v62 = (char *)v34 - (char *)v37;
  if (v34 == v37)
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    size_t v14 = a6;
  }
  else
  {
    size_t v14 = a6;
    if (v62 >= 0x7FFFFFFFFFFFFFFDLL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    size_t v63 = 2 * v62;
    uint64_t v64 = (__n128 *)operator new(2 * v62);
    bzero(v64, v63);
    uint64_t v65 = (__n128 *)((char *)v64 + v63);
    unint64_t v66 = 2 * (void)v34 - 2 * (void)v37 - 8;
    if (v66 >= 0x18)
    {
      uint64_t v69 = (v66 >> 3) + 1;
      uint64_t v67 = v69 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v70 = (int64x2_t)xmmword_2591200C0;
      unint64_t v71 = (int64x2_t *)&v64[1];
      int64x2_t v72 = vdupq_n_s64(2uLL);
      int64x2_t v73 = vdupq_n_s64(4uLL);
      uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v71[-1] = v70;
        int64x2_t *v71 = vaddq_s64(v70, v72);
        int64x2_t v70 = vaddq_s64(v70, v73);
        v71 += 2;
        v74 -= 4;
      }
      while (v74);
      if (v69 != v67)
      {
        unint64_t v68 = (__n128 *)((char *)v64 + 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL));
        goto LABEL_78;
      }
    }
    else
    {
      uint64_t v67 = 0;
      unint64_t v68 = v64;
      do
      {
LABEL_78:
        v68->n128_u64[0] = v67;
        unint64_t v68 = (__n128 *)((char *)v68 + 8);
        ++v67;
      }
      while (v68 != v65);
    }
  }
  *(void *)&long long v780 = &v770;
  uint64_t __src = v64;
  unint64_t v740 = ((char *)v65 - (char *)v64) >> 3;
  size_t __sz = (char *)v65 - (char *)v64;
  if ((char *)v65 - (char *)v64 < 1025)
  {
LABEL_83:
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(v64, v65, (uint64_t **)&v780, v740, 0, 0);
  }
  else
  {
    float v75 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v76 = ((char *)v65 - (char *)v64) >> 3;
    while (1)
    {
      uint64_t v77 = (uint64_t *)operator new(8 * v76, v75);
      if (v77) {
        break;
      }
      BOOL v41 = v76 > 1;
      v76 >>= 1;
      if (!v41) {
        goto LABEL_83;
      }
    }
    int v79 = v77;
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_0 &,std::__wrap_iter<unsigned long *>>(__src, v65, (uint64_t **)&v780, v740, v77, v76);
    operator delete(v79);
  }
  unint64_t v80 = 0;
  v804[1] = 0;
  v804[0] = 0;
  *(_DWORD *)((char *)v805 + 7) = 0;
  memset(v803, 0, 216);
  *(float *)v78.i32 = (float)*(unsigned __int16 *)(v763 + 80);
  v805[0] = 0;
  uint64_t v61 = a5;
  if (v14 < 4) {
    goto LABEL_89;
  }
  unint64_t v80 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  float32x4_t v81 = (float32x4_t)vdupq_lane_s32(v78, 0);
  float v82 = &v809[27];
  unint64_t v83 = (int64x2_t *)v803;
  char v84 = v804;
  int8x16_t v85 = (int8x16_t)vdupq_n_s64(1uLL);
  uint64_t v86 = a3;
  unint64_t v87 = v14 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    int32x4_t v88 = (int32x4_t)vceqzq_s64(*(int64x2_t *)(v86 + 16));
    int32x4_t v89 = (int32x4_t)vceqzq_s64(*(int64x2_t *)v86);
    int8x16_t v90 = vorrq_s8((int8x16_t)vcgeq_f32(*(float32x4_t *)(v82 - 27), v81), (int8x16_t)vuzp1q_s32(v89, v88));
    int64x2_t v91 = *(int64x2_t *)(v86 + 216);
    int64x2_t v92 = *(int64x2_t *)(v86 + 232);
    int8x16_t v93 = vorrq_s8((int8x16_t)vcgeq_f32(*(float32x4_t *)v82, v81), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v91), (int32x4_t)vceqzq_s64(v92)));
    int64x2_t v94 = vsubq_s64((int64x2_t)vbicq_s8(v85, (int8x16_t)v88), vtstq_s64(v92, v92));
    int64x2_t v95 = *(int64x2_t *)(v86 + 432);
    int64x2_t v96 = *(int64x2_t *)(v86 + 448);
    int16x8_t v97 = (int16x8_t)vandq_s8(vandq_s8(vorrq_s8((int8x16_t)vcgeq_f32(*(float32x4_t *)(v82 + 27), v81), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v95), (int32x4_t)vceqzq_s64(v96))), v93), v90);
    *(int8x8_t *)v97.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v97), (int8x8_t)0x1000100010001);
    *v84++ = vmovn_s16(v97).u32[0];
    *unint64_t v83 = vsubq_s64(vsubq_s64((int64x2_t)vbicq_s8(v85, (int8x16_t)v89), vtstq_s64(v91, v91)), vtstq_s64(v95, v95));
    v83[1] = vsubq_s64(v94, vtstq_s64(v96, v96));
    v83 += 2;
    v86 += 32;
    v82 += 4;
    v87 -= 4;
  }
  while (v87);
  if (v14 != v80)
  {
LABEL_89:
    uint64_t v98 = (void *)(a3 + 8 * v80 + 216);
    uint64_t v99 = &v809[v80 + 27];
    do
    {
      uint64_t v100 = *(v98 - 27);
      if (v100) {
        BOOL v101 = *(v99 - 27) >= *(float *)v78.i32;
      }
      else {
        BOOL v101 = 1;
      }
      uint64_t v102 = v100 != 0;
      float v103 = v98 + 1;
      if (*v98) {
        BOOL v104 = 0;
      }
      else {
        BOOL v104 = v101;
      }
      if (*v99 < *(float *)v78.i32) {
        BOOL v101 = v104;
      }
      if (*v98) {
        ++v102;
      }
      uint64_t v105 = v98[27];
      if (v105) {
        BOOL v106 = 0;
      }
      else {
        BOOL v106 = v101;
      }
      if (v99[27] < *(float *)v78.i32) {
        BOOL v101 = v106;
      }
      if (v105) {
        uint64_t v107 = v102 + 1;
      }
      else {
        uint64_t v107 = v102;
      }
      *((unsigned char *)v804 + v80) = v101;
      v803[v80++] = v107;
      ++v99;
      uint64_t v98 = v103;
    }
    while (v14 > v80);
  }
  uint64_t v108 = 0;
  unint64_t v109 = 0;
  long long v801 = 0u;
  long long v802 = 0u;
  long long v799 = 0u;
  long long v800 = 0u;
  long long v797 = 0u;
  long long v798 = 0u;
  long long v795 = 0u;
  long long v796 = 0u;
  long long v793 = 0u;
  long long v794 = 0u;
  long long v791 = 0u;
  long long v792 = 0u;
  long long v789 = 0u;
  long long v790 = 0u;
  long long v787 = 0u;
  long long v788 = 0u;
  long long v785 = 0u;
  long long v786 = 0u;
  long long v783 = 0u;
  long long v784 = 0u;
  long long v781 = 0u;
  long long v782 = 0u;
  long long v780 = 0u;
  uint64_t v16 = a10;
  while (2)
  {
    uint64_t v110 = *(void *)(v15 + 8 * v108);
    if (v110 && !*((unsigned char *)&v780 + v110))
    {
      *((unsigned char *)&v780 + v110) = 1;
      ++v109;
    }
    uint64_t v111 = v15 + 8 * v108;
    uint64_t v112 = *(void *)(v111 + 216);
    if (v112 && !*((unsigned char *)&v780 + v112))
    {
      *((unsigned char *)&v780 + v112) = 1;
      ++v109;
      uint64_t v113 = *(void *)(v111 + 432);
      if (v113) {
        goto LABEL_117;
      }
    }
    else
    {
      uint64_t v113 = *(void *)(v111 + 432);
      if (v113)
      {
LABEL_117:
        if (!*((unsigned char *)&v780 + v113))
        {
          *((unsigned char *)&v780 + v113) = 1;
          ++v109;
        }
      }
    }
    if (v14 > ++v108) {
      continue;
    }
    break;
  }
  v778[1] = 0;
  v778[0] = 0;
  *(_DWORD *)((char *)v779 + 7) = 0;
  v779[0] = 0;
  if (v14 > 7)
  {
    if (v14 >= 0x10)
    {
      __int32 v737 = v78.i32[0];
      int64x2_t v146 = 0uLL;
      int64x2_t v147 = vdupq_n_s64(3uLL);
      int64x2_t v148 = vdupq_n_s64(2uLL);
      unint64_t v114 = v14 & 0xFFFFFFFFFFFFFFF0;
      float v149 = (int8x16_t *)v778;
      float v150 = (int8x16_t *)v806;
      float v151 = (int64x2_t *)v803;
      int64x2_t v755 = 0u;
      int64x2_t v759 = 0u;
      int64x2_t v751 = 0u;
      int64x2_t v152 = 0uLL;
      int64x2_t v153 = 0uLL;
      int64x2_t v154 = 0uLL;
      int64x2_t v155 = 0uLL;
      int64x2_t v156 = 0uLL;
      int64x2_t v157 = 0uLL;
      float v158 = a5;
      unint64_t v159 = v14 & 0xFFFFFFFFFFFFFFF0;
      int64x2_t v160 = 0uLL;
      int64x2_t v161 = 0uLL;
      int64x2_t v162 = 0uLL;
      int64x2_t v163 = 0uLL;
      int64x2_t v164 = 0uLL;
      int64x2_t v165 = 0uLL;
      do
      {
        int64x2_t v166 = *v151;
        int64x2_t v167 = v151[1];
        int64x2_t v168 = v151[4];
        int64x2_t v169 = v151[5];
        int64x2_t v170 = v151[6];
        int64x2_t v171 = v151[7];
        int32x4_t v172 = (int32x4_t)vceqq_s64(v171, v147);
        int32x4_t v173 = (int32x4_t)vceqq_s64(v170, v147);
        int32x4_t v174 = (int32x4_t)vceqq_s64(v169, v147);
        int32x4_t v175 = (int32x4_t)vceqq_s64(v168, v147);
        int64x2_t v176 = v151[2];
        int64x2_t v177 = v151[3];
        int32x4_t v178 = (int32x4_t)vceqq_s64(v177, v147);
        int32x4_t v179 = (int32x4_t)vceqq_s64(v176, v147);
        int64x2_t v180 = v146;
        int32x4_t v181 = (int32x4_t)vceqq_s64(v167, v147);
        int32x4_t v182 = (int32x4_t)vceqq_s64(*v151, v147);
        v183.i64[0] = 0x101010101010101;
        v183.i64[1] = 0x101010101010101;
        *v150++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32(v182, v181), (int16x8_t)vuzp1q_s32(v179, v178)), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32(v175, v174), (int16x8_t)vuzp1q_s32(v173, v172))), v183);
        int64x2_t v751 = vsubq_s64(v751, (int64x2_t)v179);
        int64x2_t v755 = vsubq_s64(v755, (int64x2_t)v178);
        int64x2_t v759 = vsubq_s64(v759, (int64x2_t)v181);
        int64x2_t v146 = vsubq_s64(v180, (int64x2_t)v182);
        int64x2_t v152 = vsubq_s64(v152, (int64x2_t)v175);
        int64x2_t v153 = vsubq_s64(v153, (int64x2_t)v174);
        int64x2_t v154 = vsubq_s64(v154, (int64x2_t)v173);
        int64x2_t v155 = vsubq_s64(v155, (int64x2_t)v172);
        *v149++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v166, v148), (int32x4_t)vceqq_s64(v167, v148)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v176, v148), (int32x4_t)vceqq_s64(v177, v148))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v168, v148), (int32x4_t)vceqq_s64(v169, v148)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v170, v148), (int32x4_t)vceqq_s64(v171, v148)))), v183);
        int8x16_t v184 = *v158++;
        uint32x4_t v185 = (uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_2591202F0);
        int64x2_t v161 = (int64x2_t)vaddw_high_u32((uint64x2_t)v161, v185);
        int64x2_t v160 = (int64x2_t)vaddw_u32((uint64x2_t)v160, *(uint32x2_t *)v185.i8);
        uint32x4_t v186 = (uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_2591202E0);
        int64x2_t v157 = (int64x2_t)vaddw_high_u32((uint64x2_t)v157, v186);
        int64x2_t v156 = (int64x2_t)vaddw_u32((uint64x2_t)v156, *(uint32x2_t *)v186.i8);
        uint32x4_t v187 = (uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_259120300);
        int64x2_t v162 = (int64x2_t)vaddw_u32((uint64x2_t)v162, *(uint32x2_t *)v187.i8);
        int64x2_t v163 = (int64x2_t)vaddw_high_u32((uint64x2_t)v163, v187);
        uint32x4_t v188 = (uint32x4_t)vqtbl1q_s8(v184, (int8x16_t)xmmword_259120310);
        int64x2_t v164 = (int64x2_t)vaddw_u32((uint64x2_t)v164, *(uint32x2_t *)v188.i8);
        int64x2_t v165 = (int64x2_t)vaddw_high_u32((uint64x2_t)v165, v188);
        v151 += 8;
        v159 -= 16;
      }
      while (v159);
      uint64_t v116 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v156, v162), vaddq_s64(v160, v164)), vaddq_s64(vaddq_s64(v157, v163), vaddq_s64(v161, v165))));
      unint64_t v115 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v146, v152), vaddq_s64(v751, v154)), vaddq_s64(vaddq_s64(v759, v153), vaddq_s64(v755, v155))));
      if (v14 == v114)
      {
        v78.i32[0] = v737;
        goto LABEL_137;
      }
      int v117 = v14 & 0xFFFFFFF0;
      v78.i32[0] = v737;
      if ((v14 & 8) == 0) {
        goto LABEL_134;
      }
    }
    else
    {
      unint64_t v115 = 0;
      uint64_t v116 = 0;
      unint64_t v114 = 0;
    }
    unint64_t v118 = v114;
    unint64_t v114 = v14 & 0xFFFFFFFFFFFFFFF8;
    int64x2_t v119 = 0uLL;
    int64x2_t v120 = (int64x2_t)v115;
    int64x2_t v121 = (int64x2_t)(unint64_t)v116;
    unint64_t v122 = v118 - (v14 & 0xFFFFFFFFFFFFFFF8);
    float v123 = (uint64_t *)((char *)a5->i64 + v118);
    float v124 = (int8x8_t *)((char *)v778 + v118);
    float64x2_t v125 = (int8x8_t *)((char *)v806 + v118);
    int64x2_t v126 = vdupq_n_s64(3uLL);
    unint64_t v127 = (int64x2_t *)&v803[v118];
    int64x2_t v128 = vdupq_n_s64(2uLL);
    int64x2_t v129 = 0uLL;
    int64x2_t v130 = 0uLL;
    int64x2_t v131 = 0uLL;
    int64x2_t v132 = 0uLL;
    int64x2_t v133 = 0uLL;
    do
    {
      int64x2_t v134 = *v127;
      int64x2_t v135 = v127[1];
      int64x2_t v136 = v127[2];
      int64x2_t v137 = v127[3];
      int32x4_t v138 = (int32x4_t)vceqq_s64(v137, v126);
      int32x4_t v139 = (int32x4_t)vceqq_s64(v136, v126);
      int32x4_t v140 = (int32x4_t)vceqq_s64(v135, v126);
      int32x4_t v141 = (int32x4_t)vceqq_s64(*v127, v126);
      *v125++ = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32(v141, v140), (int16x8_t)vuzp1q_s32(v139, v138))), (int8x8_t)0x101010101010101);
      int64x2_t v130 = vsubq_s64(v130, (int64x2_t)v138);
      int64x2_t v129 = vsubq_s64(v129, (int64x2_t)v139);
      int64x2_t v119 = vsubq_s64(v119, (int64x2_t)v140);
      int64x2_t v120 = vsubq_s64(v120, (int64x2_t)v141);
      int16x8_t v142 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v134, v128), (int32x4_t)vceqq_s64(v135, v128)), (int16x8_t)vuzp1q_s32((int32x4_t)vceqq_s64(v136, v128), (int32x4_t)vceqq_s64(v137, v128)));
      *v124++ = vand_s8(vmovn_s16(v142), (int8x8_t)0x101010101010101);
      uint64_t v143 = *v123++;
      v142.i64[0] = v143;
      uint32x4_t v144 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v142, (int8x16_t)xmmword_2591202F0);
      uint32x4_t v145 = (uint32x4_t)vqtbl1q_s8((int8x16_t)v142, (int8x16_t)xmmword_2591202E0);
      int64x2_t v133 = (int64x2_t)vaddw_high_u32((uint64x2_t)v133, v144);
      int64x2_t v131 = (int64x2_t)vaddw_high_u32((uint64x2_t)v131, v145);
      int64x2_t v132 = (int64x2_t)vaddw_u32((uint64x2_t)v132, *(uint32x2_t *)v144.i8);
      int64x2_t v121 = (int64x2_t)vaddw_u32((uint64x2_t)v121, *(uint32x2_t *)v145.i8);
      v127 += 4;
      v122 += 8;
    }
    while (v122);
    uint64_t v116 = vaddvq_s64(vaddq_s64(vaddq_s64(v121, v132), vaddq_s64(v131, v133)));
    unint64_t v115 = vaddvq_s64(vaddq_s64(vaddq_s64(v120, v129), vaddq_s64(v119, v130)));
    int v117 = v14 & 0xFFFFFFF8;
    if (v14 != v114) {
      goto LABEL_134;
    }
  }
  else
  {
    unint64_t v114 = 0;
    unint64_t v115 = 0;
    uint64_t v116 = 0;
    int v117 = 0;
    do
    {
LABEL_134:
      uint64_t v189 = v803[v114];
      *((unsigned char *)v806 + v114) = v189 == 3;
      if (v189 == 3) {
        ++v115;
      }
      *((unsigned char *)v778 + v114) = v189 == 2;
      v116 += a5->u8[v114];
      unint64_t v114 = ++v117;
    }
    while (v117 < v14);
  }
LABEL_137:
  uint64_t v190 = 0;
  uint64_t v191 = 0;
  do
  {
    if (*((unsigned char *)v806 + v190))
    {
      uint64_t v192 = 0;
      uint64_t v193 = v15 + 8 * v190;
      unint64_t v194 = (void *)(v193 + 216);
      int64x2_t v195 = (void *)(v193 + 432);
      do
      {
        if (*((unsigned char *)v778 + v192))
        {
          if (*(void *)(v15 + 8 * v190) != *(void *)(v15 + 8 * v192))
          {
            uint64_t v196 = v15 + 8 * v192;
            if (*v194 != *(void *)(v196 + 216) && *v195 != *(void *)(v196 + 432)) {
              ++v191;
            }
          }
        }
        ++v192;
      }
      while (v14 > v192);
    }
    ++v190;
  }
  while (v14 > v190);
  uint64_t v197 = 0;
  int v198 = 0;
  LOBYTE(v199) = 1;
  do
  {
    char v200 = v199;
    int v199 = (a5->i8[v197] == 0) & v199;
    if (a5->i8[v197] && (v200 & 1) != 0) {
      int v199 = *((unsigned char *)v804 + v197) != 0;
    }
    v198 |= *((unsigned char *)v778 + v197++) != 0;
  }
  while (v14 != v197);
  if (v109 < 4 || v115 || v116 != 2 || ((v199 ^ 1) & 1) != 0)
  {
    BOOL v204 = v109 > 4 && v115 == 1;
    if ((v204 & v198) == 1 && v191 != 0)
    {
      float v229 = 0;
      v752 = 0;
      float v230 = 0;
      v756 = 0;
      float v231 = 0;
      uint64_t v232 = 0;
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&v774[0] = 0;
      uint64_t v17 = a11;
      do
      {
        if (*((unsigned char *)v806 + v232))
        {
          uint64_t v233 = 0;
          uint64_t v234 = v15 + 8 * v232;
          float v235 = (void *)(v234 + 216);
          v760 = (void *)(v234 + 432);
          do
          {
            if (*((unsigned char *)v778 + v233))
            {
              if (*(void *)(v15 + 8 * v232) == *(void *)(v15 + 8 * v233)
                || (uint64_t v236 = v15 + 8 * v233, *v235 == *(void *)(v236 + 216))
                || *v760 == *(void *)(v236 + 432)
                || !*((unsigned char *)v804 + v233))
              {
                unint64_t v239 = (unint64_t)__p[1];
                if (__p[1] == (void *)(*(void *)&v774[0] << 6))
                {
                  if ((uint64_t)__p[1] + 1 < 0) {
                    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                  }
                  unint64_t v240 = *(void *)&v774[0] << 7;
                  if (*(void *)&v774[0] << 7 <= ((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFC0) + 64) {
                    unint64_t v240 = ((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFC0) + 64;
                  }
                  if (__p[1] <= (void *)0x3FFFFFFFFFFFFFFELL) {
                    unint64_t v241 = v240;
                  }
                  else {
                    unint64_t v241 = 0x7FFFFFFFFFFFFFFFLL;
                  }
                  std::vector<BOOL>::reserve((uint64_t)__p, v241);
                  unint64_t v239 = (unint64_t)__p[1];
                }
                __p[1] = (void *)(v239 + 1);
                *(void *)((char *)__p[0] + ((v239 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v239);
                goto LABEL_209;
              }
              unint64_t v237 = (unint64_t)__p[1];
              if (__p[1] == (void *)(*(void *)&v774[0] << 6))
              {
                if ((uint64_t)__p[1] + 1 < 0) {
                  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                }
                if (__p[1] > (void *)0x3FFFFFFFFFFFFFFELL)
                {
                  unint64_t v238 = 0x7FFFFFFFFFFFFFFFLL;
                }
                else if (*(void *)&v774[0] << 7 <= ((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFC0) + 64)
                {
                  unint64_t v238 = ((unint64_t)__p[1] & 0xFFFFFFFFFFFFFFC0) + 64;
                }
                else
                {
                  unint64_t v238 = *(void *)&v774[0] << 7;
                }
                std::vector<BOOL>::reserve((uint64_t)__p, v238);
                unint64_t v237 = (unint64_t)__p[1];
              }
              __p[1] = (void *)(v237 + 1);
              *(void *)((char *)__p[0] + ((v237 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v237;
              if (v231 >= v756)
              {
                uint64_t v242 = (v231 - v230) >> 3;
                unint64_t v243 = v242 + 1;
                if ((unint64_t)(v242 + 1) >> 61) {
                  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                }
                if ((v756 - v230) >> 2 > v243) {
                  unint64_t v243 = (v756 - v230) >> 2;
                }
                if ((unint64_t)(v756 - v230) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v244 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v244 = v243;
                }
                if (v244)
                {
                  if (v244 >> 61) {
                    std::__throw_bad_array_new_length[abi:ne180100]();
                  }
                  unint64_t v245 = v235;
                  unint64_t v246 = v244;
                  uint64_t v247 = operator new(8 * v244);
                  unint64_t v244 = v246;
                  float v235 = v245;
                }
                else
                {
                  uint64_t v247 = 0;
                }
                float v229 = &v247[8 * v242];
                *(void *)float v229 = v233;
                v752 = v229 + 8;
                if (v231 == v230)
                {
                  uint64_t v17 = a11;
                  uint64_t v15 = a4;
                }
                else
                {
                  unint64_t v248 = v231 - 8 - v230;
                  if (v248 < 0x168
                    || &v247[v231 - v230 - 8 - (v248 & 0xFFFFFFFFFFFFFFF8)] > &v247[v231 - v230 - 8]
                    || &v231[-(v248 & 0xFFFFFFFFFFFFFFF8) - 8] > v231 - 8
                    || (unint64_t)(v230 - v247) < 0x20)
                  {
                    unint64_t v249 = v231;
                    uint64_t v17 = a11;
                    uint64_t v15 = a4;
                  }
                  else
                  {
                    uint64_t v251 = (v248 >> 3) + 1;
                    unint64_t v249 = &v231[-8 * (v251 & 0x3FFFFFFFFFFFFFFCLL)];
                    uint32x4_t v252 = &v247[8 * v242 - 16];
                    long long v253 = v231 - 16;
                    uint64_t v254 = v251 & 0x3FFFFFFFFFFFFFFCLL;
                    uint64_t v17 = a11;
                    do
                    {
                      long long v255 = *(_OWORD *)v253;
                      *(v252 - 1) = *((_OWORD *)v253 - 1);
                      _OWORD *v252 = v255;
                      v252 -= 2;
                      v253 -= 32;
                      v254 -= 4;
                    }
                    while (v254);
                    v229 -= 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
                    uint64_t v15 = a4;
                    if (v251 == (v251 & 0x3FFFFFFFFFFFFFFCLL)) {
                      goto LABEL_249;
                    }
                  }
                  do
                  {
                    uint64_t v250 = *((void *)v249 - 1);
                    v249 -= 8;
                    *((void *)v229 - 1) = v250;
                    v229 -= 8;
                  }
                  while (v249 != v230);
                }
LABEL_249:
                v756 = &v247[8 * v244];
                if (v230) {
                  operator delete(v230);
                }
                float v230 = v229;
                float v231 = v752;
                goto LABEL_209;
              }
              *(void *)float v231 = v233;
              v231 += 8;
              v752 = v231;
            }
LABEL_209:
            uint64_t v233 = v233 + 1;
          }
          while (v233 < v38);
        }
        uint64_t v232 = v232 + 1;
      }
      while (v232 < v38);
      if (v231 == v229)
      {
        unint64_t v282 = 0;
        float v231 = v229;
        goto LABEL_431;
      }
      v761 = 0;
      long long v261 = 0;
      float v262 = 0;
      long long v263 = 0;
      uint64_t v264 = 0;
      uint64_t v265 = 0;
      int v266 = 0;
      while (1)
      {
        uint64_t v267 = *(void *)&v229[8 * v265];
        if (!a5->i8[v267])
        {
          if (v264 >= v263)
          {
            uint64_t v268 = (v264 - v262) >> 3;
            unint64_t v269 = v268 + 1;
            if ((unint64_t)(v268 + 1) >> 61) {
              std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
            }
            if ((v263 - v262) >> 2 > v269) {
              unint64_t v269 = (v263 - v262) >> 2;
            }
            if ((unint64_t)(v263 - v262) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v270 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v270 = v269;
            }
            if (v270)
            {
              if (v270 >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              char v271 = operator new(8 * v270);
              uint64_t v267 = *(void *)&v229[8 * v265];
            }
            else
            {
              char v271 = 0;
            }
            long long v272 = &v271[8 * v268];
            *(void *)long long v272 = v267;
            long long v261 = v272 + 8;
            if (v264 == v262)
            {
              uint64_t v17 = a11;
            }
            else
            {
              unint64_t v273 = v264 - 8 - v262;
              if (v273 < 0x168
                || &v271[v264 - v262 - 8 - (v273 & 0xFFFFFFFFFFFFFFF8)] > &v271[v264 - v262 - 8]
                || &v264[-(v273 & 0xFFFFFFFFFFFFFFF8) - 8] > v264 - 8
                || (unint64_t)(v262 - v271) < 0x20)
              {
                long long v274 = v264;
                uint64_t v17 = a11;
              }
              else
              {
                uint64_t v277 = (v273 >> 3) + 1;
                long long v274 = &v264[-8 * (v277 & 0x3FFFFFFFFFFFFFFCLL)];
                long long v278 = &v271[8 * v268 - 16];
                uint32x4_t v279 = v264 - 16;
                uint64_t v280 = v277 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  long long v281 = *(_OWORD *)v279;
                  *(v278 - 1) = *((_OWORD *)v279 - 1);
                  *long long v278 = v281;
                  v278 -= 2;
                  v279 -= 32;
                  v280 -= 4;
                }
                while (v280);
                v272 -= 8 * (v277 & 0x3FFFFFFFFFFFFFFCLL);
                uint64_t v17 = a11;
                if (v277 == (v277 & 0x3FFFFFFFFFFFFFFCLL)) {
                  goto LABEL_302;
                }
              }
              do
              {
                uint64_t v275 = *((void *)v274 - 1);
                v274 -= 8;
                *((void *)v272 - 1) = v275;
                v272 -= 8;
              }
              while (v274 != v262);
            }
LABEL_302:
            v761 = v272;
            long long v263 = &v271[8 * v270];
            if (v262)
            {
              uint32x4_t v276 = v261;
              operator delete(v262);
              long long v261 = v276;
              float v231 = v752;
            }
            float v262 = v761;
            uint64_t v264 = v261;
            goto LABEL_283;
          }
          *(void *)uint64_t v264 = v267;
          v264 += 8;
          long long v261 = v264;
        }
LABEL_283:
        uint64_t v265 = ++v266;
        if (v266 >= (unint64_t)((v231 - v229) >> 3))
        {
          unint64_t v282 = v761;
          if (v264 != v761)
          {
            unint64_t v283 = 0;
            int v284 = 0;
            unint64_t v743 = (v261 - v761) >> 3;
            uint16x8_t v285 = v231;
            uint32x4_t v286 = v231;
            do
            {
              int v744 = v284;
              int v749 = 0;
              BYTE2(v776[0]) = 0;
              LOWORD(v776[0]) = 0;
              uint64_t v287 = *(void *)&v282[8 * v283];
              uint64_t v748 = *(void *)(a4 + 8 * v287);
              if (!v748)
              {
                int v749 = 1;
                LOBYTE(v776[0]) = 1;
              }
              uint64_t v288 = a4 + 8 * v287;
              if (*(void *)(v288 + 216))
              {
                int v289 = 0;
                if (!*(void *)(v288 + 432)) {
                  goto LABEL_323;
                }
              }
              else
              {
                int v289 = 1;
                BYTE1(v776[0]) = 1;
                if (!*(void *)(v288 + 432))
                {
LABEL_323:
                  int v290 = 1;
                  BYTE2(v776[0]) = 1;
                  goto LABEL_324;
                }
              }
              int v290 = 0;
LABEL_324:
              for (uint64_t i = 0; i != 3; ++i)
              {
                if (!*((unsigned char *)v776 + i)) {
                  continue;
                }
                if (v749)
                {
                  unint64_t v292 = 0;
                  float v293 = 0.0;
                  if (v289) {
                    goto LABEL_330;
                  }
                }
                else
                {
                  float v293 = (float)((float)*(unint64_t *)(a3 + 8 * *(void *)&v282[8 * v283]) - *a8) + a8[i];
                  unint64_t v292 = 1;
                  if (v289)
                  {
LABEL_330:
                    if (!v290) {
                      goto LABEL_335;
                    }
                    goto LABEL_331;
                  }
                }
                float v293 = (float)((float)(v293 - a8[1]) + a8[i])
                     + (float)*(unint64_t *)(a3 + 8 * *(void *)&v282[8 * v283] + 216);
                ++v292;
                if (!v290)
                {
LABEL_335:
                  float v293 = (float)((float)(v293 - a8[2]) + a8[i])
                       + (float)*(unint64_t *)(a3 + 8 * *(void *)&v282[8 * v283] + 432);
                  ++v292;
LABEL_336:
                  float v293 = v293 / (float)v292;
                  goto LABEL_337;
                }
LABEL_331:
                if (v292) {
                  goto LABEL_336;
                }
LABEL_337:
                int v294 = ~((unint64_t)(float)(roundf(v293) + -1.0) % *(void *)(*(void *)(v763 + 8) + 8 * i));
                if (!v748)
                {
                  uint64_t v295 = 0;
                  do
                  {
                    if (*((unsigned char *)v806 + v295))
                    {
                      LODWORD(v296) = (int)v811[v295] + v294;
                      unint64_t v296 = (v296 & 0x80000000) == 0 ? v296 : -(int)v296;
                      if (*(void *)(v763 + 376) < v296)
                      {
                        if (v286 == v229)
                        {
                          uint32x4_t v286 = v229;
                        }
                        else
                        {
                          uint64_t v297 = 0;
                          int v298 = 0;
                          while (*(void *)&v229[8 * v297] != *(void *)&v282[8 * v283])
                          {
                            uint64_t v297 = ++v298;
                            if ((v286 - v229) >> 3 <= (unint64_t)v298) {
                              goto LABEL_342;
                            }
                          }
                          uint64_t v299 = &v229[8 * v297];
                          int64_t v300 = v286 - (v299 + 8);
                          if (v286 != v299 + 8) {
                            memmove(&v229[8 * v297], v299 + 8, v286 - (v299 + 8));
                          }
                          float v231 = &v299[v300];
                          uint16x8_t v285 = v231;
                          uint32x4_t v286 = v231;
                          unint64_t v282 = v761;
                        }
                      }
                    }
LABEL_342:
                    uint64_t v295 = v295 + 1;
                  }
                  while (v295 < v38);
                  int v757 = BYTE1(v776[0]);
                  if (!BYTE1(v776[0])) {
                    goto LABEL_373;
                  }
LABEL_357:
                  uint64_t v301 = 0;
                  do
                  {
                    if (*((unsigned char *)v806 + v301))
                    {
                      LODWORD(v302) = (int)v811[v301 + 27] + v294;
                      unint64_t v302 = (v302 & 0x80000000) == 0 ? v302 : -(int)v302;
                      if (*(void *)(v763 + 376) < v302)
                      {
                        if (v285 == v229)
                        {
                          uint16x8_t v285 = v229;
                          uint32x4_t v286 = v229;
                        }
                        else
                        {
                          uint64_t v303 = 0;
                          int v304 = 0;
                          while (*(void *)&v229[8 * v303] != *(void *)&v282[8 * v283])
                          {
                            uint64_t v303 = ++v304;
                            if ((v285 - v229) >> 3 <= (unint64_t)v304)
                            {
                              uint32x4_t v286 = v285;
                              goto LABEL_359;
                            }
                          }
                          int64x2_t v305 = &v229[8 * v303];
                          int64_t v306 = v285 - (v305 + 8);
                          if (v285 != v305 + 8) {
                            memmove(&v229[8 * v303], v305 + 8, v285 - (v305 + 8));
                          }
                          float v231 = &v305[v306];
                          uint16x8_t v285 = v231;
                          uint32x4_t v286 = v231;
                          unint64_t v282 = v761;
                        }
                      }
                    }
LABEL_359:
                    uint64_t v301 = v301 + 1;
                  }
                  while (v301 < v38);
                  goto LABEL_373;
                }
                int v757 = v289;
                if (v289) {
                  goto LABEL_357;
                }
LABEL_373:
                if (BYTE2(v776[0]))
                {
                  int v753 = BYTE2(v776[0]);
                  uint64_t v307 = 0;
                  do
                  {
                    int64x2_t v308 = v231;
                    if (*((unsigned char *)v806 + v307))
                    {
                      LODWORD(v309) = (int)v811[v307 + 54] + v294;
                      unint64_t v309 = (v309 & 0x80000000) == 0 ? v309 : -(int)v309;
                      if (*(void *)(v763 + 376) < v309)
                      {
                        float v231 = v229;
                        uint16x8_t v285 = v229;
                        uint32x4_t v286 = v229;
                        if (v308 != v229)
                        {
                          uint64_t v310 = 0;
                          int v311 = 0;
                          while (*(void *)&v229[8 * v310] != *(void *)&v282[8 * v283])
                          {
                            uint64_t v310 = ++v311;
                            if ((v308 - v229) >> 3 <= (unint64_t)v311)
                            {
                              float v231 = v308;
                              uint16x8_t v285 = v308;
                              uint32x4_t v286 = v308;
                              goto LABEL_375;
                            }
                          }
                          uint64_t v312 = &v229[8 * v310];
                          int64_t v313 = v308 - (v312 + 8);
                          if (v308 != v312 + 8) {
                            memmove(&v229[8 * v310], v312 + 8, v308 - (v312 + 8));
                          }
                          float v231 = &v312[v313];
                          uint16x8_t v285 = v231;
                          uint32x4_t v286 = v231;
                          unint64_t v282 = v761;
                        }
                      }
                    }
LABEL_375:
                    uint64_t v307 = v307 + 1;
                  }
                  while (v307 < v38);
                  int v289 = v757;
                  int v290 = v753;
                }
                else
                {
                  int v290 = 0;
                  int v289 = v757;
                }
              }
              int v284 = v744 + 1;
              unint64_t v283 = (v744 + 1);
              uint64_t v17 = a11;
            }
            while (v743 > v283);
          }
          uint64_t v15 = a4;
LABEL_431:
          uint64_t v318 = (v231 - v229) >> 3;
          size_t v14 = a6;
          uint64_t v61 = a5;
          uint64_t v16 = a10;
          if (v318)
          {
            uint64_t v319 = a9;
            if (v318 == 1) {
              uint64_t v319 = (char *)v806 + *(void *)v229;
            }
            *uint64_t v319 = 1;
          }
          if (v282) {
            operator delete(v282);
          }
          if (v229) {
            operator delete(v229);
          }
          if (__p[0]) {
            operator delete(__p[0]);
          }
          if (!*a9) {
            goto LABEL_954;
          }
          goto LABEL_442;
        }
      }
    }
    if (v115 < 2)
    {
      *a9 = 1;
      goto LABEL_442;
    }
    memset(v776, 0, 24);
    uint64_t v206 = a9;
    if (v34 == v37)
    {
      unint64_t v209 = 0;
      uint64_t v212 = 0;
      unint64_t v207 = 0;
      unint64_t v509 = 0;
      uint64_t v17 = a11;
      goto LABEL_837;
    }
    if ((__sz & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v17 = a11;
    unint64_t v207 = operator new(__sz);
    unint64_t v208 = &v207[v740];
    v776[0] = v207;
    v776[2] = v208;
    memcpy(v207, __src, __sz);
    v776[1] = v208;
    if (v65 == __src)
    {
      unint64_t v209 = 0;
      uint64_t v212 = 0;
      unint64_t v509 = v207;
      goto LABEL_837;
    }
    unint64_t v209 = 0;
    long long v210 = 0;
    uint64_t v211 = 0;
    uint64_t v212 = 0;
    uint64_t v213 = 0;
    int v214 = 0;
    while (1)
    {
      uint64_t v215 = v207[v213];
      if (*((unsigned char *)v806 + v215))
      {
        if (v212 >= v211)
        {
          uint64_t v216 = (v212 - (char *)v210) >> 3;
          unint64_t v217 = v216 + 1;
          if ((unint64_t)(v216 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          if ((v211 - (char *)v210) >> 2 > v217) {
            unint64_t v217 = (v211 - (char *)v210) >> 2;
          }
          if ((unint64_t)(v211 - (char *)v210) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v218 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v218 = v217;
          }
          if (v218)
          {
            if (v218 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            float v219 = operator new(8 * v218);
            uint64_t v215 = v207[v213];
          }
          else
          {
            float v219 = 0;
          }
          unint64_t v209 = (uint64_t *)&v219[8 * v216];
          *unint64_t v209 = v215;
          char v220 = v209 + 1;
          if (v212 != (char *)v210)
          {
            unint64_t v221 = v212 - 8 - (char *)v210;
            if (v221 < 0x168
              || &v219[v212 - (char *)v210 - 8 - (v221 & 0xFFFFFFFFFFFFFFF8)] > &v219[v212 - (char *)v210 - 8]
              || &v212[-(v221 & 0xFFFFFFFFFFFFFFF8) - 8] > v212 - 8
              || (unint64_t)((char *)v210 - v219) < 0x20)
            {
              unint64_t v222 = v212;
              uint64_t v17 = a11;
              uint64_t v15 = a4;
            }
            else
            {
              uint64_t v224 = (v221 >> 3) + 1;
              unint64_t v222 = &v212[-8 * (v224 & 0x3FFFFFFFFFFFFFFCLL)];
              float v225 = &v219[8 * v216 - 16];
              unint64_t v226 = v212 - 16;
              uint64_t v227 = v224 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v17 = a11;
              do
              {
                long long v228 = *(_OWORD *)v226;
                *(v225 - 1) = *((_OWORD *)v226 - 1);
                _OWORD *v225 = v228;
                v225 -= 2;
                v226 -= 32;
                v227 -= 4;
              }
              while (v227);
              v209 -= v224 & 0x3FFFFFFFFFFFFFFCLL;
              uint64_t v15 = a4;
              if (v224 == (v224 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_193:
                uint64_t v211 = &v219[8 * v218];
                if (v210) {
                  goto LABEL_194;
                }
                goto LABEL_195;
              }
            }
            do
            {
              uint64_t v223 = *((void *)v222 - 1);
              v222 -= 8;
              *--unint64_t v209 = v223;
            }
            while (v222 != (char *)v210);
            goto LABEL_193;
          }
          uint64_t v17 = a11;
          uint64_t v15 = a4;
          uint64_t v211 = &v219[8 * v218];
          if (v210)
          {
LABEL_194:
            operator delete(v210);
            unint64_t v208 = v776[1];
            unint64_t v207 = v776[0];
          }
LABEL_195:
          long long v210 = v209;
          uint64_t v212 = (char *)v220;
          goto LABEL_176;
        }
        *(void *)uint64_t v212 = v215;
        v212 += 8;
      }
LABEL_176:
      uint64_t v213 = ++v214;
      if (v214 >= (unint64_t)(v208 - v207))
      {
        unint64_t v509 = v207;
        uint64_t v16 = a10;
        uint64_t v206 = a9;
LABEL_837:
        char v775 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(v774, 0, sizeof(v774));
        unint64_t v576 = (v212 - (char *)v209) >> 3;
        uint64_t v577 = *v209;
        if ((unint64_t)(v212 - (char *)v209) < 9) {
          goto LABEL_847;
        }
        unint64_t v578 = 0;
        v579 = (uint64_t *)(v15 + 8 * v577);
        uint64_t v580 = *v579;
        uint64_t v581 = v579[27];
        uint64_t v582 = v579[54];
        uint64_t v583 = 1;
        int v584 = 1;
        char v585 = 1;
        do
        {
          uint64_t v586 = v209[v583];
          BOOL v587 = *(void *)(v15 + 8 * v586) == v580;
          if (*(void *)(v15 + 8 * v586) == v580) {
            *((unsigned char *)__p + v578) = 1;
          }
          uint64_t v588 = v15 + 8 * v586;
          if (*(void *)(v588 + 216) == v581)
          {
            BOOL v587 = 1;
            *((unsigned char *)v774 + v578 + 11) = 1;
          }
          if (*(void *)(v588 + 432) == v582)
          {
            BOOL v587 = 1;
            *((unsigned char *)&v774[2] + v578 + 6) = 1;
          }
          ++v578;
          v585 &= v587;
          uint64_t v583 = ++v584;
        }
        while (v576 > v584);
        if (v585)
        {
LABEL_847:
          BOOL v589 = v577 == *v207 && v209[1] == v207[1];
          int v590 = *((unsigned __int8 *)v804 + v577);
          if (v590) {
            int v590 = *((unsigned char *)v804 + v209[1]) != 0;
          }
          uint64_t v61 = a5;
          if (v212 != (char *)v209)
          {
            uint64_t v591 = 0;
            char v592 = 1;
            int v593 = LOBYTE(__p[0]);
            while (1)
            {
              if (v593)
              {
                if (!LOBYTE(__p[0]) && v809[v209[1]] <= v809[v209[v591]]) {
                  char v592 = 0;
                }
                if (BYTE11(v774[0]))
                {
                  if (BYTE6(v774[2])) {
                    goto LABEL_867;
                  }
                  float v594 = v809[v209[1]];
                  uint64_t v595 = v209[v591];
                }
                else
                {
                  float v594 = v809[v209[1]];
                  uint64_t v595 = v209[v591];
                  v592 &= v594 > v809[v595 + 27];
                  if (BYTE6(v774[2])) {
                    goto LABEL_873;
                  }
                }
                float v596 = v809[v595 + 54];
                int v593 = LOBYTE(__p[0]);
                if (v594 <= v596)
                {
                  char v592 = 0;
                  int v593 = LOBYTE(__p[0]);
                }
              }
              if (!BYTE11(v774[0]))
              {
                if (!BYTE6(v774[2])) {
                  goto LABEL_855;
                }
                goto LABEL_873;
              }
LABEL_867:
              if (!LOBYTE(__p[0]) && v809[v209[1] + 27] <= v809[v209[v591]]) {
                char v592 = 0;
              }
              if (!BYTE6(v774[2]))
              {
                float v597 = v809[v209[1] + 27];
                float v598 = v809[v209[v591] + 54];
LABEL_878:
                int v593 = LOBYTE(__p[0]);
                if (v597 > v598) {
                  goto LABEL_855;
                }
                char v592 = 0;
                goto LABEL_854;
              }
LABEL_873:
              if (!LOBYTE(__p[0]) && v809[v209[1] + 54] <= v809[v209[v591]]) {
                char v592 = 0;
              }
              if (!BYTE11(v774[0]))
              {
                float v597 = v809[v209[1] + 54];
                float v598 = v809[v209[v591] + 27];
                goto LABEL_878;
              }
LABEL_854:
              int v593 = LOBYTE(__p[0]);
LABEL_855:
              if (v576 <= ++v591) {
                goto LABEL_881;
              }
            }
          }
          char v592 = 1;
LABEL_881:
          if (v589 & v590) == 1 && (v592)
          {
            v776[1] = v207;
            std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)v776, *v209);
            std::vector<unsigned long>::push_back[abi:ne180100]((uint64_t)v776, v209[1]);
            uint64_t v599 = (char *)v776[0];
            uint64_t v600 = *(void *)v776[0];
            uint64_t v601 = *((void *)v776[0] + 1);
            uint64_t v602 = 8 * *(void *)v776[0];
            BOOL v603 = *(void *)(v15 + v602) == *(void *)(v15 + 8 * v601);
            *(unsigned char *)(a13 + v600) = v603;
            *(unsigned char *)(a13 + v601) = v603;
            BOOL v604 = *(void *)(v15 + 216 + v602) == *(void *)(v15 + 216 + 8 * v601);
            uint64_t v605 = a13 + 27;
            *(unsigned char *)(v605 + v600) = v604;
            *(unsigned char *)(v605 + v601) = v604;
            LOBYTE(v602) = *(void *)(v15 + 432 + v602) == *(void *)(v15 + 432 + 8 * v601);
            uint64_t v606 = a13 + 54;
            *(unsigned char *)(v606 + v600) = v602;
            *(unsigned char *)(v606 + v601) = v602;
            bzero(v806, a6);
            if (v776[1] != v599)
            {
              unint64_t v608 = ((char *)v776[1] - (char *)v599) >> 3;
              if (v608 <= 1) {
                unint64_t v608 = 1;
              }
              if (v608 <= 1)
              {
                unint64_t v609 = 0;
                goto LABEL_911;
              }
              unint64_t v609 = v608 & 0xFFFFFFFFFFFFFFFELL;
              v619 = (uint64_t *)(v599 + 8);
              unint64_t v620 = v608 & 0xFFFFFFFFFFFFFFFELL;
              do
              {
                uint64_t v621 = *v619;
                *((unsigned char *)v806 + *(v619 - 1)) = 1;
                *((unsigned char *)v806 + v621) = 1;
                v619 += 2;
                v620 -= 2;
              }
              while (v620);
              if (v608 != v609)
              {
LABEL_911:
                unint64_t v622 = v608 - v609;
                uint64_t v623 = &v599[8 * v609];
                do
                {
                  uint64_t v624 = *(void *)v623;
                  v623 += 8;
                  *((unsigned char *)v806 + v624) = 1;
                  --v622;
                }
                while (v622);
              }
            }
            LOWORD(v607) = *(_WORD *)(v763 + 80);
            *a7 = (float)v607;
          }
          else
          {
            *uint64_t v206 = 1;
          }
LABEL_1073:
          operator delete(v209);
          if (v776[0])
          {
            v776[1] = v776[0];
            operator delete(v776[0]);
          }
          size_t v14 = a6;
          if (!*v206) {
            goto LABEL_954;
          }
          goto LABEL_442;
        }
        v776[1] = v207;
        if (v207 >= v776[2])
        {
          uint64_t v611 = (char *)v776[2] - (char *)v509;
          uint64_t v612 = v611 >> 2;
          if ((unint64_t)(v611 >> 2) <= 1) {
            uint64_t v612 = 1;
          }
          if ((unint64_t)v611 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v613 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v613 = v612;
          }
          if (v613 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          unint64_t v614 = operator new(8 * v613);
          *unint64_t v614 = *v209;
          float v610 = v614 + 1;
          v776[0] = v614;
          v776[1] = v614 + 1;
          v776[2] = &v614[v613];
          if (v207) {
            operator delete(v207);
          }
          uint64_t v16 = a10;
        }
        else
        {
          *unint64_t v207 = v577;
          float v610 = v207 + 1;
        }
        v776[1] = v610;
        if (v578)
        {
          uint64_t v615 = 0;
          int v616 = 0;
          while (*((unsigned char *)__p + v615) || *((unsigned char *)v774 + v615 + 11) || *((unsigned char *)&v774[2] + v615 + 6))
          {
            uint64_t v615 = ++v616;
            if (v578 <= v616) {
              goto LABEL_1063;
            }
          }
          uint64_t v617 = v615 + 1;
          if (v610 < v776[2])
          {
            *float v610 = v209[v617];
            uint64_t v618 = v610 + 1;
            goto LABEL_1062;
          }
          v707 = v776[0];
          int64_t v708 = (char *)v610 - (char *)v776[0];
          uint64_t v709 = ((char *)v610 - (char *)v776[0]) >> 3;
          unint64_t v710 = v709 + 1;
          if ((unint64_t)(v709 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          int64_t v711 = (char *)v776[2] - (char *)v776[0];
          if (((char *)v776[2] - (char *)v776[0]) >> 2 > v710) {
            unint64_t v710 = v711 >> 2;
          }
          if ((unint64_t)v711 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v712 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v712 = v710;
          }
          if (v712)
          {
            if (v712 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v713 = operator new(8 * v712);
          }
          else
          {
            v713 = 0;
          }
          v719 = &v713[8 * v709];
          void *v719 = v209[v617];
          uint64_t v618 = v719 + 1;
          if (v610 != (void *)v707)
          {
            unint64_t v720 = (char *)v610 - v707 - 8;
            if (v720 < 0x58)
            {
              v721 = v610;
              goto LABEL_1059;
            }
            if ((unint64_t)((char *)v610 - v713 - v708) < 0x20)
            {
              v721 = v610;
              goto LABEL_1059;
            }
            uint64_t v722 = (v720 >> 3) + 1;
            v721 = &v610[-(v722 & 0x3FFFFFFFFFFFFFFCLL)];
            v723 = &v713[8 * v709 - 16];
            v724 = (long long *)(v610 - 2);
            uint64_t v725 = v722 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v726 = *v724;
              *(v723 - 1) = *(v724 - 1);
              _OWORD *v723 = v726;
              v723 -= 2;
              v724 -= 2;
              v725 -= 4;
            }
            while (v725);
            v719 -= v722 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v15 = a4;
            uint64_t v206 = a9;
            if (v722 != (v722 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_1059:
                uint64_t v727 = *--v721;
                *--v719 = v727;
              }
              while (v721 != (void *)v707);
            }
          }
          v776[0] = v719;
          v776[2] = &v713[8 * v712];
          uint64_t v17 = a11;
          uint64_t v16 = a10;
          if (v707) {
            operator delete(v707);
          }
LABEL_1062:
          v776[1] = v618;
          float v610 = v618;
        }
LABEL_1063:
        bzero(v806, a6);
        v728 = (char *)v776[0];
        uint64_t v61 = a5;
        if (v610 == v776[0]) {
          goto LABEL_1073;
        }
        unint64_t v729 = ((char *)v610 - (char *)v776[0]) >> 3;
        if (v729 <= 1) {
          unint64_t v729 = 1;
        }
        if (v729 >= 2)
        {
          unint64_t v730 = v729 & 0xFFFFFFFFFFFFFFFELL;
          v731 = (uint64_t *)((char *)v776[0] + 8);
          unint64_t v732 = v729 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            uint64_t v733 = *v731;
            *((unsigned char *)v806 + *(v731 - 1)) = 1;
            *((unsigned char *)v806 + v733) = 1;
            v731 += 2;
            v732 -= 2;
          }
          while (v732);
          if (v729 == v730) {
            goto LABEL_1073;
          }
        }
        else
        {
          unint64_t v730 = 0;
        }
        unint64_t v734 = v729 - v730;
        v735 = &v728[8 * v730];
        do
        {
          uint64_t v736 = *(void *)v735;
          v735 += 8;
          *((unsigned char *)v806 + v736) = 1;
          --v734;
        }
        while (v734);
        goto LABEL_1073;
      }
    }
  }
  if (v14 > 7)
  {
    uint64_t v17 = a11;
    unint64_t v202 = a9;
    if (v14 < 0x10)
    {
      unint64_t v201 = 0;
      goto LABEL_261;
    }
    unint64_t v201 = v14 & 0xFFFFFFFFFFFFFFF0;
    int32x4_t v314 = (char *)v806 + 7;
    float32x4_t v315 = a5;
    unint64_t v316 = v14 & 0xFFFFFFFFFFFFFFF0;
    while (1)
    {
      int8x16_t v317 = vtstq_s8(*v315, *v315);
      if (v317.i8[0])
      {
        *(v314 - 7) = 1;
        if ((v317.i8[1] & 1) == 0) {
          goto LABEL_396;
        }
      }
      else if ((v317.i8[1] & 1) == 0)
      {
LABEL_396:
        if (v317.i8[2]) {
          goto LABEL_397;
        }
        goto LABEL_413;
      }
      *(v314 - 6) = 1;
      if (v317.i8[2])
      {
LABEL_397:
        *(v314 - 5) = 1;
        if ((v317.i8[3] & 1) == 0) {
          goto LABEL_398;
        }
        goto LABEL_414;
      }
LABEL_413:
      if ((v317.i8[3] & 1) == 0)
      {
LABEL_398:
        if (v317.i8[4]) {
          goto LABEL_399;
        }
        goto LABEL_415;
      }
LABEL_414:
      *(v314 - 4) = 1;
      if (v317.i8[4])
      {
LABEL_399:
        *(v314 - 3) = 1;
        if ((v317.i8[5] & 1) == 0) {
          goto LABEL_400;
        }
        goto LABEL_416;
      }
LABEL_415:
      if ((v317.i8[5] & 1) == 0)
      {
LABEL_400:
        if (v317.i8[6]) {
          goto LABEL_401;
        }
        goto LABEL_417;
      }
LABEL_416:
      *(v314 - 2) = 1;
      if (v317.i8[6])
      {
LABEL_401:
        *(v314 - 1) = 1;
        if ((v317.i8[7] & 1) == 0) {
          goto LABEL_402;
        }
        goto LABEL_418;
      }
LABEL_417:
      if ((v317.i8[7] & 1) == 0)
      {
LABEL_402:
        if (v317.i8[8]) {
          goto LABEL_403;
        }
        goto LABEL_419;
      }
LABEL_418:
      *int32x4_t v314 = 1;
      if (v317.i8[8])
      {
LABEL_403:
        v314[1] = 1;
        if ((v317.i8[9] & 1) == 0) {
          goto LABEL_404;
        }
        goto LABEL_420;
      }
LABEL_419:
      if ((v317.i8[9] & 1) == 0)
      {
LABEL_404:
        if (v317.i8[10]) {
          goto LABEL_405;
        }
        goto LABEL_421;
      }
LABEL_420:
      v314[2] = 1;
      if (v317.i8[10])
      {
LABEL_405:
        v314[3] = 1;
        if ((v317.i8[11] & 1) == 0) {
          goto LABEL_406;
        }
        goto LABEL_422;
      }
LABEL_421:
      if ((v317.i8[11] & 1) == 0)
      {
LABEL_406:
        if (v317.i8[12]) {
          goto LABEL_407;
        }
        goto LABEL_423;
      }
LABEL_422:
      v314[4] = 1;
      if (v317.i8[12])
      {
LABEL_407:
        v314[5] = 1;
        if ((v317.i8[13] & 1) == 0) {
          goto LABEL_408;
        }
        goto LABEL_424;
      }
LABEL_423:
      if ((v317.i8[13] & 1) == 0)
      {
LABEL_408:
        if (v317.i8[14]) {
          goto LABEL_409;
        }
        goto LABEL_425;
      }
LABEL_424:
      v314[6] = 1;
      if (v317.i8[14])
      {
LABEL_409:
        v314[7] = 1;
        if (v317.i8[15]) {
          goto LABEL_426;
        }
        goto LABEL_393;
      }
LABEL_425:
      if (v317.i8[15]) {
LABEL_426:
      }
        v314[8] = 1;
LABEL_393:
      ++v315;
      v314 += 16;
      v316 -= 16;
      if (!v316)
      {
        if (v14 == v201) {
          goto LABEL_428;
        }
        if ((v14 & 8) == 0) {
          goto LABEL_717;
        }
LABEL_261:
        unint64_t v256 = v201;
        unint64_t v201 = v14 & 0xFFFFFFFFFFFFFFF8;
        unint64_t v257 = v256 - (v14 & 0xFFFFFFFFFFFFFFF8);
        long long v258 = (int8x8_t *)&a5->i8[v256];
        uint64_t v259 = (char *)v806 + v256 + 3;
        while (2)
        {
          int8x8_t v260 = vtst_s8(*v258, *v258);
          if (v260.i8[0])
          {
            *(v259 - 3) = 1;
            if ((v260.i8[1] & 1) == 0) {
              goto LABEL_265;
            }
LABEL_273:
            *(v259 - 2) = 1;
            if ((v260.i8[2] & 1) == 0) {
              goto LABEL_274;
            }
LABEL_266:
            *(v259 - 1) = 1;
            if ((v260.i8[3] & 1) == 0) {
              goto LABEL_267;
            }
LABEL_275:
            char *v259 = 1;
            if ((v260.i8[4] & 1) == 0) {
              goto LABEL_276;
            }
LABEL_268:
            v259[1] = 1;
            if ((v260.i8[5] & 1) == 0) {
              goto LABEL_269;
            }
LABEL_277:
            v259[2] = 1;
            if ((v260.i8[6] & 1) == 0) {
              goto LABEL_278;
            }
LABEL_270:
            v259[3] = 1;
            if (v260.i8[7]) {
              goto LABEL_279;
            }
          }
          else
          {
            if (v260.i8[1]) {
              goto LABEL_273;
            }
LABEL_265:
            if (v260.i8[2]) {
              goto LABEL_266;
            }
LABEL_274:
            if (v260.i8[3]) {
              goto LABEL_275;
            }
LABEL_267:
            if (v260.i8[4]) {
              goto LABEL_268;
            }
LABEL_276:
            if (v260.i8[5]) {
              goto LABEL_277;
            }
LABEL_269:
            if (v260.i8[6]) {
              goto LABEL_270;
            }
LABEL_278:
            if (v260.i8[7]) {
LABEL_279:
            }
              v259[4] = 1;
          }
          ++v258;
          v259 += 8;
          v257 += 8;
          if (!v257)
          {
            if (v14 != v201) {
              goto LABEL_717;
            }
            goto LABEL_428;
          }
          continue;
        }
      }
    }
  }
  unint64_t v201 = 0;
  uint64_t v17 = a11;
  unint64_t v202 = a9;
  do
  {
LABEL_717:
    if (a5->i8[v201]) {
      *((unsigned char *)v806 + v201) = 1;
    }
    ++v201;
  }
  while (v14 > v201);
LABEL_428:
  *a7 = *(float *)v78.i32;
  if (!*v202) {
    goto LABEL_954;
  }
LABEL_442:
  long long v320 = 0;
  uint64_t v321 = 0;
  int v322 = 0;
  v767 = 0;
  v768 = 0;
  v769 = 0;
  while (2)
  {
    if (v320 < v769)
    {
      *(void *)long long v320 = v803[v321];
      v320 += 8;
    }
    else
    {
      float v323 = (char *)v767;
      int64_t v324 = v320 - (unsigned char *)v767;
      uint64_t v325 = (v320 - (unsigned char *)v767) >> 3;
      unint64_t v326 = v325 + 1;
      if ((unint64_t)(v325 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v327 = v769 - (unsigned char *)v767;
      if ((v769 - (unsigned char *)v767) >> 2 > v326) {
        unint64_t v326 = v327 >> 2;
      }
      if ((unint64_t)v327 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v328 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v328 = v326;
      }
      if (v328)
      {
        if (v328 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        char v329 = operator new(8 * v328);
      }
      else
      {
        char v329 = 0;
      }
      uint64_t v330 = &v329[8 * v325];
      void *v330 = v803[v321];
      int v331 = v330 + 1;
      if (v320 != v323)
      {
        unint64_t v332 = v320 - 8 - v323;
        if (v332 < 0x168)
        {
          uint64_t v333 = v320;
          goto LABEL_459;
        }
        if (&v329[v324 - 8 - (v332 & 0xFFFFFFFFFFFFFFF8)] > &v329[v324 - 8])
        {
          uint64_t v333 = v320;
          goto LABEL_459;
        }
        if (&v320[-(v332 & 0xFFFFFFFFFFFFFFF8) - 8] > v320 - 8)
        {
          uint64_t v333 = v320;
          goto LABEL_459;
        }
        if ((unint64_t)(v320 - v329 - v324) < 0x20)
        {
          uint64_t v333 = v320;
          goto LABEL_459;
        }
        uint64_t v335 = (v332 >> 3) + 1;
        uint64_t v333 = &v320[-8 * (v335 & 0x3FFFFFFFFFFFFFFCLL)];
        char v336 = &v329[8 * v325 - 16];
        unint64_t v337 = v320 - 16;
        uint64_t v338 = v335 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v339 = *(_OWORD *)v337;
          *(v336 - 1) = *((_OWORD *)v337 - 1);
          _OWORD *v336 = v339;
          v336 -= 2;
          v337 -= 32;
          v338 -= 4;
        }
        while (v338);
        v330 -= v335 & 0x3FFFFFFFFFFFFFFCLL;
        if (v335 != (v335 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_459:
            uint64_t v334 = *((void *)v333 - 1);
            v333 -= 8;
            *--uint64_t v330 = v334;
          }
          while (v333 != v323);
        }
      }
      v767 = v330;
      v768 = v331;
      v769 = &v329[8 * v328];
      if (v323) {
        operator delete(v323);
      }
      long long v320 = (char *)v331;
    }
    v768 = v320;
    uint64_t v321 = ++v322;
    if (v322 < a6) {
      continue;
    }
    break;
  }
  v764 = 0;
  v765 = 0;
  v766 = 0;
  int64_t v340 = v320 - (unsigned char *)v767;
  if (v340)
  {
    uint64_t v17 = a11;
    uint64_t v61 = a5;
    uint64_t v15 = a4;
    if (v340 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    v341 = (__n128 *)operator new(v340);
    v764 = v341;
    v766 = (__n128 *)((char *)v341 + 8 * (v340 >> 3));
    bzero(v341, v340);
    unint64_t v342 = (__n128 *)((char *)v341 + v340);
    v765 = (__n128 *)((char *)v341 + v340);
    if ((unint64_t)(v340 - 8) >= 0x18)
    {
      unint64_t v345 = ((unint64_t)(v340 - 8) >> 3) + 1;
      uint64_t v343 = v345 & 0x3FFFFFFFFFFFFFFCLL;
      int64x2_t v346 = (int64x2_t)xmmword_2591200C0;
      uint64_t v347 = (int64x2_t *)&v341[1];
      int64x2_t v348 = vdupq_n_s64(2uLL);
      int64x2_t v349 = vdupq_n_s64(4uLL);
      uint64_t v350 = v345 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v347[-1] = v346;
        *uint64_t v347 = vaddq_s64(v346, v348);
        int64x2_t v346 = vaddq_s64(v346, v349);
        v347 += 2;
        v350 -= 4;
      }
      while (v350);
      if (v345 != v343)
      {
        uint64_t v344 = (__n128 *)((char *)v341 + 8 * (v345 & 0x3FFFFFFFFFFFFFFCLL));
        goto LABEL_482;
      }
    }
    else
    {
      uint64_t v343 = 0;
      uint64_t v344 = v341;
      do
      {
LABEL_482:
        v344->n128_u64[0] = v343;
        uint64_t v344 = (__n128 *)((char *)v344 + 8);
        ++v343;
      }
      while (v344 != v342);
    }
  }
  else
  {
    v341 = 0;
    unint64_t v342 = 0;
    uint64_t v17 = a11;
    uint64_t v61 = a5;
    uint64_t v15 = a4;
  }
  __p[0] = &v767;
  uint64_t v351 = v342;
  unint64_t v352 = (char *)v342 - (char *)v341;
  unint64_t v353 = ((char *)v342 - (char *)v341) >> 3;
  if ((char *)v342 - (char *)v341 < 1025)
  {
LABEL_487:
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(v341, v351, (uint64_t **)__p, v353, 0, 0);
  }
  else
  {
    uint64_t v354 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v355 = ((char *)v342 - (char *)v341) >> 3;
    while (1)
    {
      unint64_t v356 = (uint64_t *)operator new(8 * v355, v354);
      if (v356) {
        break;
      }
      BOOL v41 = v355 > 1;
      v355 >>= 1;
      if (!v41) {
        goto LABEL_487;
      }
    }
    uint64_t v357 = v356;
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_1 &,std::__wrap_iter<unsigned long *>>(v341, v351, (uint64_t **)__p, v353, v356, v355);
    operator delete(v357);
  }
  uint64_t v358 = 0;
  int v359 = 0;
  unint64_t v360 = a8;
  while (!*((unsigned char *)v806 + v358) && !v61->i8[v358])
  {
    uint64_t v358 = ++v359;
    if (v359 >= a6)
    {
      v361 = v351;
      if (v352 < 9) {
        goto LABEL_494;
      }
      goto LABEL_673;
    }
  }
  uint64_t v362 = 0;
  char v363 = 0;
  uint64_t v364 = 0;
  uint64_t v365 = 0;
  uint64_t v366 = 0;
  int v367 = 0;
  while (2)
  {
    if (!*((unsigned char *)v806 + v366) && !a5->i8[v366])
    {
      if (v365 < v364)
      {
        *(void *)uint64_t v365 = v366;
        v365 += 8;
      }
      else
      {
        uint64_t v368 = (v365 - v363) >> 3;
        unint64_t v369 = v368 + 1;
        if ((unint64_t)(v368 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if ((v364 - v363) >> 2 > v369) {
          unint64_t v369 = (v364 - v363) >> 2;
        }
        if ((unint64_t)(v364 - v363) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v370 = v369;
        }
        if (v370)
        {
          if (v370 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          v371 = operator new(8 * v370);
        }
        else
        {
          v371 = 0;
        }
        uint64_t v362 = &v371[8 * v368];
        *(void *)uint64_t v362 = v366;
        uint64_t v372 = v362 + 8;
        if (v365 != v363)
        {
          unint64_t v373 = v365 - 8 - v363;
          if (v373 < 0x168
            || &v371[v365 - v363 - 8 - (v373 & 0xFFFFFFFFFFFFFFF8)] > &v371[v365 - v363 - 8]
            || &v365[-(v373 & 0xFFFFFFFFFFFFFFF8) - 8] > v365 - 8
            || (unint64_t)(v363 - v371) < 0x20)
          {
            uint64_t v374 = v365;
            unint64_t v360 = a8;
          }
          else
          {
            uint64_t v376 = (v373 >> 3) + 1;
            uint64_t v374 = &v365[-8 * (v376 & 0x3FFFFFFFFFFFFFFCLL)];
            uint64_t v377 = &v371[8 * v368 - 16];
            uint64_t v378 = v365 - 16;
            uint64_t v379 = v376 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v380 = *(_OWORD *)v378;
              *(v377 - 1) = *((_OWORD *)v378 - 1);
              *uint64_t v377 = v380;
              v377 -= 2;
              v378 -= 32;
              v379 -= 4;
            }
            while (v379);
            v362 -= 8 * (v376 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v360 = a8;
            if (v376 == (v376 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_515:
              uint64_t v364 = &v371[8 * v370];
              if (v363) {
                goto LABEL_516;
              }
              goto LABEL_517;
            }
          }
          do
          {
            uint64_t v375 = *((void *)v374 - 1);
            v374 -= 8;
            *((void *)v362 - 1) = v375;
            v362 -= 8;
          }
          while (v374 != v363);
          goto LABEL_515;
        }
        unint64_t v360 = a8;
        uint64_t v364 = &v371[8 * v370];
        if (v363) {
LABEL_516:
        }
          operator delete(v363);
LABEL_517:
        char v363 = v362;
        uint64_t v365 = v372;
      }
    }
    uint64_t v366 = ++v367;
    if (v367 < a6) {
      continue;
    }
    break;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&v774[0] = 0;
  unint64_t v381 = v365 - v362;
  unint64_t v382 = (v365 - v362) >> 3;
  uint64_t v383 = a4;
  if (v365 != v362)
  {
    if ((v381 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v384 = (v382 - 1) >> 6;
    __int16 v385 = operator new(8 * (v384 + 1));
    uint64_t v386 = v385;
    __p[1] = (void *)((v365 - v362) >> 3);
    *(void *)&v774[0] = v384 + 1;
    __p[0] = v385;
    if (v381 >= 0x208) {
      unint64_t v387 = (v382 - 1) >> 6;
    }
    else {
      unint64_t v387 = 0;
    }
    v385[v387] = 0;
    if (v381 >= 8)
    {
      if (v381 >= 0x200) {
        bzero(v385, 8 * (v382 >> 6));
      }
      uint64_t v388 = (v381 >> 3) & 0x3F;
      if (v388) {
        v386[v382 >> 6] &= ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v388);
      }
    }
    unint64_t v389 = 0;
    int v390 = *a2;
    if (v382 <= 1) {
      uint64_t v391 = 1;
    }
    else {
      uint64_t v391 = (v365 - v362) >> 3;
    }
    int v392 = a2[12];
    int v393 = a2[24];
    int v394 = a2[36];
    int v395 = a2[48];
    int v396 = a2[60];
    int v397 = a2[72];
    int v398 = a2[84];
    int v399 = a2[96];
    do
    {
      uint64_t v413 = *(void *)&v362[8 * v389];
      if (!*((unsigned char *)v804 + v413)) {
        goto LABEL_561;
      }
      v414 = (uint64_t *)(v383 + 8 * v413);
      uint64_t v415 = *v414;
      uint64_t v416 = v414[27];
      uint64_t v417 = v414[54];
      unint64_t v418 = v389 >> 6;
      uint64_t v419 = 1 << v389;
      uint64_t v420 = ~(1 << v389);
      if (v415)
      {
        if (!v416)
        {
          uint64_t v428 = a3;
          float v429 = v360[1];
          float v430 = (float)((float)*(unint64_t *)(a3 + 8 * v413) - *v360) + v429;
          if (v417)
          {
            unint64_t v431 = 2;
            goto LABEL_599;
          }
          unint64_t v431 = 1;
LABEL_601:
          float v442 = v430 / (float)v431;
          v402 = *(void **)(v763 + 8);
          unint64_t v403 = *(void *)(v763 + 376);
          uint64_t v440 = v386[v418];
          goto LABEL_602;
        }
        if (!v417)
        {
          uint64_t v421 = a3;
          float v422 = v360[2];
          float v423 = (float)((float)*(unint64_t *)(a3 + 8 * v413) - *v360) + v422;
          unint64_t v424 = 2;
          goto LABEL_541;
        }
        goto LABEL_561;
      }
      if (v416)
      {
        float v425 = *v360;
        float v426 = (float)((float)*(unint64_t *)(a3 + 8 * v413 + 216) - v360[1]) + *v360;
        if (!v417)
        {
          unint64_t v427 = 1;
          goto LABEL_576;
        }
        unint64_t v427 = 2;
      }
      else
      {
        if (!v417)
        {
          float v432 = 0.0;
          goto LABEL_577;
        }
        float v425 = *v360;
        float v426 = 0.0;
        unint64_t v427 = 1;
      }
      float v426 = (float)(v426 - v360[2]) + (float)((float)*(unint64_t *)(a3 + 8 * v413 + 432) + v425);
LABEL_576:
      float v432 = v426 / (float)v427;
LABEL_577:
      v402 = *(void **)(v763 + 8);
      int v433 = ~((unint64_t)(float)(roundf(v432) + -1.0) % *v402);
      unint64_t v403 = *(void *)(v763 + 376);
      LODWORD(v434) = v390 + v433;
      if (v390 + v433 >= 0) {
        unint64_t v434 = v434;
      }
      else {
        unint64_t v434 = -(int)v434;
      }
      LODWORD(v435) = v392 + v433;
      if (v392 + v433 >= 0) {
        unint64_t v435 = v435;
      }
      else {
        unint64_t v435 = -(int)v435;
      }
      LODWORD(v436) = v393 + v433;
      if ((v436 & 0x80000000) == 0) {
        unint64_t v436 = v436;
      }
      else {
        unint64_t v436 = -(int)v436;
      }
      BOOL v437 = v403 >= v434 || v403 >= v435;
      uint64_t v438 = v386[v418];
      BOOL v439 = v437 || v403 >= v436;
      uint64_t v440 = v438 & v420;
      uint64_t v441 = v438 | v419;
      if (v439) {
        uint64_t v440 = v441;
      }
      v386[v418] = v440;
      if (!v416)
      {
        if (v417)
        {
          uint64_t v413 = *(void *)&v362[8 * v389];
          float v429 = v360[1];
          float v430 = 0.0;
          unint64_t v431 = 1;
          uint64_t v428 = a3;
LABEL_599:
          float v430 = (float)(v430 - v360[2]) + (float)((float)*(unint64_t *)(v428 + 8 * v413 + 432) + v429);
          goto LABEL_601;
        }
        float v442 = 0.0;
LABEL_602:
        int v443 = ~((unint64_t)(float)(roundf(v442) + -1.0) % v402[1]);
        LODWORD(v444) = v394 + v443;
        if (v394 + v443 >= 0) {
          unint64_t v444 = v444;
        }
        else {
          unint64_t v444 = -(int)v444;
        }
        LODWORD(v445) = v395 + v443;
        if (v395 + v443 >= 0) {
          unint64_t v445 = v445;
        }
        else {
          unint64_t v445 = -(int)v445;
        }
        LODWORD(v446) = v396 + v443;
        if ((v446 & 0x80000000) == 0) {
          unint64_t v446 = v446;
        }
        else {
          unint64_t v446 = -(int)v446;
        }
        BOOL v448 = v403 >= v444 || v403 >= v445 || v403 >= v446;
        uint64_t v404 = v440 | v419;
        uint64_t v449 = v440 & v420;
        if (!v448) {
          uint64_t v404 = v449;
        }
        v386[v418] = v404;
        uint64_t v383 = a4;
        if (v417) {
          goto LABEL_561;
        }
        if (v415)
        {
          float v400 = (float)((float)*(unint64_t *)(a3 + 8 * *(void *)&v362[8 * v389]) - *v360) + v360[2];
          unint64_t v424 = 1;
          goto LABEL_542;
        }
        float v401 = 0.0;
LABEL_543:
        int v405 = ~((unint64_t)(float)(roundf(v401) + -1.0) % v402[2]);
        LODWORD(v406) = v397 + v405;
        if (v397 + v405 >= 0) {
          unint64_t v406 = v406;
        }
        else {
          unint64_t v406 = -(int)v406;
        }
        LODWORD(v407) = v398 + v405;
        if (v398 + v405 >= 0) {
          unint64_t v407 = v407;
        }
        else {
          unint64_t v407 = -(int)v407;
        }
        LODWORD(v408) = v399 + v405;
        if ((v408 & 0x80000000) == 0) {
          unint64_t v408 = v408;
        }
        else {
          unint64_t v408 = -(int)v408;
        }
        BOOL v410 = v403 >= v406 || v403 >= v407 || v403 >= v408;
        uint64_t v411 = v404 & v420;
        uint64_t v412 = v404 | v419;
        if (!v410) {
          uint64_t v412 = v411;
        }
        v386[v418] = v412;
        goto LABEL_561;
      }
      uint64_t v383 = a4;
      if (!v417)
      {
        uint64_t v413 = *(void *)&v362[8 * v389];
        float v422 = v360[2];
        float v423 = 0.0;
        unint64_t v424 = 1;
        uint64_t v421 = a3;
LABEL_541:
        float v400 = (float)(v423 - v360[1]) + (float)((float)*(unint64_t *)(v421 + 8 * v413 + 216) + v422);
LABEL_542:
        float v401 = v400 / (float)v424;
        v402 = *(void **)(v763 + 8);
        unint64_t v403 = *(void *)(v763 + 376);
        uint64_t v404 = v386[v418];
        goto LABEL_543;
      }
LABEL_561:
      ++v389;
    }
    while (v391 != v389);
  }
  unint64_t v451 = v764;
  v450 = v765;
  if (v765 != v764)
  {
    v452 = 0;
    v453 = 0;
    int32x4_t v454 = 0;
    unint64_t v455 = 0;
    unint64_t v456 = 0;
    if (v382 <= 1) {
      unint64_t v382 = 1;
    }
    uint64_t v61 = a5;
    v758 = v362;
    while (1)
    {
      if (v365 == v362) {
        goto LABEL_638;
      }
      unint64_t v458 = 0;
      char v459 = 1;
      do
      {
        if (((*(void *)((char *)__p[0] + ((v458 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v458) & 1) == 0) {
          v459 &= v451->n128_u64[v456] != *(void *)&v362[8 * v458];
        }
        ++v458;
      }
      while (v382 != v458);
      if (v459)
      {
LABEL_638:
        if (v455 >= v454)
        {
          unint64_t v460 = (char *)(v455 - v453);
          uint64_t v461 = (v455 - v453) >> 3;
          unint64_t v462 = v461 + 1;
          if ((unint64_t)(v461 + 1) >> 61) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          if ((v454 - v453) >> 2 > v462) {
            unint64_t v462 = (v454 - v453) >> 2;
          }
          if ((unint64_t)(v454 - v453) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v463 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v463 = v462;
          }
          if (v463)
          {
            if (v463 >> 61) {
              std::__throw_bad_array_new_length[abi:ne180100]();
            }
            v464 = v450;
            unint64_t v465 = v463;
            v466 = operator new(8 * v463);
            v450 = v464;
            unint64_t v463 = v465;
            uint64_t v461 = (v455 - v453) >> 3;
            uint64_t v362 = v758;
            unint64_t v460 = (char *)(v455 - v453);
          }
          else
          {
            v466 = 0;
          }
          v452 = (char *)v466 + 8 * v461;
          *(void *)v452 = v451->n128_u64[v456];
          uint64_t v457 = v452 + 8;
          if (v455 != v453)
          {
            unint64_t v467 = v455 - 8 - v453;
            if (v467 < 0x168
              || &v460[(void)v466 - 8 - (v467 & 0xFFFFFFFFFFFFFFF8)] > &v460[(void)v466 - 8]
              || &v455[-(v467 & 0xFFFFFFFFFFFFFFF8) - 8] > v455 - 8
              || (unint64_t)(v455 - &v460[(void)v466]) < 0x20)
            {
              float v468 = v455;
              uint64_t v61 = a5;
            }
            else
            {
              uint64_t v472 = (v467 >> 3) + 1;
              float v468 = &v455[-8 * (v472 & 0x3FFFFFFFFFFFFFFCLL)];
              float v473 = (char *)v466 + 8 * v461 - 16;
              uint64_t v474 = v455 - 16;
              uint64_t v475 = v472 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v476 = *(_OWORD *)v474;
                *(v473 - 1) = *((_OWORD *)v474 - 1);
                *float v473 = v476;
                v473 -= 2;
                v474 -= 32;
                v475 -= 4;
              }
              while (v475);
              v452 -= 8 * (v472 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v61 = a5;
              if (v472 == (v472 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_653:
                int32x4_t v454 = (char *)v466 + 8 * v463;
                if (v453) {
                  goto LABEL_654;
                }
                goto LABEL_655;
              }
            }
            do
            {
              uint64_t v469 = *((void *)v468 - 1);
              v468 -= 8;
              *((void *)v452 - 1) = v469;
              v452 -= 8;
            }
            while (v468 != v453);
            goto LABEL_653;
          }
          uint64_t v61 = a5;
          int32x4_t v454 = (char *)v466 + 8 * v463;
          if (v453)
          {
LABEL_654:
            float v470 = v453;
            float v471 = v454;
            operator delete(v470);
            int32x4_t v454 = v471;
            unint64_t v451 = v764;
            v450 = v765;
          }
LABEL_655:
          v453 = v452;
          goto LABEL_631;
        }
        *(void *)unint64_t v455 = v451->n128_u64[v456];
        v455 += 8;
      }
      uint64_t v457 = v455;
LABEL_631:
      ++v456;
      unint64_t v455 = v457;
      if (v456 >= ((char *)v450 - (char *)v451) >> 3) {
        goto LABEL_666;
      }
    }
  }
  v452 = 0;
  uint64_t v457 = 0;
  uint64_t v61 = a5;
LABEL_666:
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v764, v452, v457, (v457 - v452) >> 3);
  uint64_t v17 = a11;
  uint64_t v15 = a4;
  if (v452) {
    operator delete(v452);
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  if (v362) {
    operator delete(v362);
  }
  v341 = v764;
  v361 = v765;
  unint64_t v352 = (char *)v765 - (char *)v764;
  unint64_t v353 = ((char *)v765 - (char *)v764) >> 3;
  if ((unint64_t)((char *)v765 - (char *)v764) < 9)
  {
LABEL_494:
    size_t v14 = a6;
    uint64_t v16 = a10;
    goto LABEL_939;
  }
LABEL_673:
  uint64_t v477 = 0;
  char v478 = 0;
  if (v353 <= 1) {
    uint64_t v479 = 1;
  }
  else {
    uint64_t v479 = v353;
  }
  do
    v478 |= *((unsigned char *)v804 + v341->n128_u64[v477++]) != 0;
  while (v479 != v477);
  uint64_t v480 = a13;
  if ((v478 & 1) == 0) {
    goto LABEL_771;
  }
  __p[0] = 0;
  __p[1] = 0;
  *(void *)&v774[0] = 0;
  if (v361 == v341)
  {
LABEL_713:
    unint64_t v505 = 0;
    uint64_t v506 = 0;
    goto LABEL_726;
  }
  BOOL v481 = 0;
  uint64_t v482 = 0;
  while (2)
  {
    unint64_t v483 = v341->n128_u64[v482];
    unint64_t v484 = v770;
    if ((unint64_t)v481 < *(void *)&v774[0])
    {
      *(_DWORD *)BOOL v481 = *((_DWORD *)v770 + v483);
      v481 += 4;
      goto LABEL_681;
    }
    unint64_t v485 = v361;
    uint64_t v486 = (char *)__p[0];
    int64_t v487 = v481 - (char *)__p[0];
    uint64_t v488 = (v481 - (char *)__p[0]) >> 2;
    unint64_t v489 = v488 + 1;
    if ((unint64_t)(v488 + 1) >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int64_t v490 = *(void *)&v774[0] - (unint64_t)__p[0];
    if ((uint64_t)(*(void *)&v774[0] - (unint64_t)__p[0]) >> 1 > v489) {
      unint64_t v489 = v490 >> 1;
    }
    if ((unint64_t)v490 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v491 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v491 = v489;
    }
    if (v491)
    {
      if (v491 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float v492 = operator new(4 * v491);
    }
    else
    {
      float v492 = 0;
    }
    float v493 = &v492[4 * v488];
    *float v493 = v484[v483];
    float v494 = v493 + 1;
    if (v481 == v486)
    {
      v361 = v485;
      goto LABEL_699;
    }
    unint64_t v495 = v481 - 4 - v486;
    if (v495 < 0xBC
      || &v492[v487 - 4 - (v495 & 0xFFFFFFFFFFFFFFFCLL)] > &v492[v487 - 4]
      || &v481[-(v495 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v481 - 4
      || (unint64_t)(v481 - v492 - v487) < 0x20)
    {
      float v496 = v481;
      v361 = v485;
      do
      {
LABEL_696:
        int v497 = *((_DWORD *)v496 - 1);
        v496 -= 4;
        *--float v493 = v497;
      }
      while (v496 != v486);
      goto LABEL_699;
    }
    uint64_t v498 = (v495 >> 2) + 1;
    float v496 = &v481[-4 * (v498 & 0x7FFFFFFFFFFFFFF8)];
    v499 = &v492[4 * v488 - 16];
    unint64_t v500 = v481 - 16;
    uint64_t v501 = v498 & 0x7FFFFFFFFFFFFFF8;
    v361 = v485;
    do
    {
      long long v502 = *(_OWORD *)v500;
      *(v499 - 1) = *((_OWORD *)v500 - 1);
      _OWORD *v499 = v502;
      v499 -= 2;
      v500 -= 32;
      v501 -= 8;
    }
    while (v501);
    v493 -= v498 & 0x7FFFFFFFFFFFFFF8;
    if (v498 != (v498 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_696;
    }
LABEL_699:
    __p[0] = v493;
    __p[1] = v494;
    *(void *)&v774[0] = &v492[4 * v491];
    if (v486) {
      operator delete(v486);
    }
    BOOL v481 = (char *)v494;
LABEL_681:
    __p[1] = v481;
    if (++v482 < (unint64_t)(((char *)v361 - (char *)v341) >> 3)) {
      continue;
    }
    break;
  }
  unint64_t v503 = v481 - (char *)__p[0];
  if (v481 == __p[0]) {
    goto LABEL_713;
  }
  if (v503 >= 0x7FFFFFFFFFFFFFFDLL) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  size_t v504 = 2 * v503;
  unint64_t v505 = (__n128 *)operator new(2 * v503);
  bzero(v505, v504);
  uint64_t v506 = (__n128 *)((char *)v505 + v504);
  if (v504 - 8 >= 0x18)
  {
    unint64_t v510 = ((v504 - 8) >> 3) + 1;
    uint64_t v507 = v510 & 0x3FFFFFFFFFFFFFFCLL;
    int64x2_t v511 = (int64x2_t)xmmword_2591200C0;
    uint64_t v512 = (int64x2_t *)&v505[1];
    int64x2_t v513 = vdupq_n_s64(2uLL);
    int64x2_t v514 = vdupq_n_s64(4uLL);
    uint64_t v515 = v510 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v512[-1] = v511;
      *uint64_t v512 = vaddq_s64(v511, v513);
      int64x2_t v511 = vaddq_s64(v511, v514);
      v512 += 2;
      v515 -= 4;
    }
    while (v515);
    if (v510 != v507)
    {
      v508 = (__n128 *)((char *)v505 + 8 * (v510 & 0x3FFFFFFFFFFFFFFCLL));
      goto LABEL_725;
    }
  }
  else
  {
    uint64_t v507 = 0;
    v508 = v505;
    do
    {
LABEL_725:
      v508->n128_u64[0] = v507;
      v508 = (__n128 *)((char *)v508 + 8);
      ++v507;
    }
    while (v508 != v506);
  }
LABEL_726:
  v776[0] = __p;
  if ((char *)v506 - (char *)v505 < 1025)
  {
LABEL_730:
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(v505, v506, (uint64_t **)v776, ((char *)v506 - (char *)v505) >> 3, 0, 0);
  }
  else
  {
    v516 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    unint64_t v517 = ((char *)v506 - (char *)v505) >> 3;
    while (1)
    {
      v518 = (uint64_t *)operator new(8 * v517, v516);
      if (v518) {
        break;
      }
      BOOL v41 = v517 > 1;
      v517 >>= 1;
      if (!v41) {
        goto LABEL_730;
      }
    }
    v519 = v518;
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::twoTargetLogic(peridot::DetectorSingleTarget const(&)[3][3],unsigned long const(&)[3][27],unsigned long const(&)[3][27],BOOL const(&)[27],unsigned long,float &,float const*,BOOL &,unsigned long (&)[3][27],unsigned long (&)[3][27],BOOL (&)[27],BOOL (&)[3][27],unsigned char &)::$_2 &,std::__wrap_iter<unsigned long *>>(v505, v506, (uint64_t **)v776, ((char *)v506 - (char *)v505) >> 3, v518, v517);
    operator delete(v519);
  }
  v520 = v764;
  unint64_t v521 = v765;
  if (v765 != v764)
  {
    float32x4_t v522 = 0;
    float32x4_t v523 = 0;
    float32x4_t v524 = 0;
    int8x16_t v525 = 0;
    unint64_t v526 = 0;
    v762 = v505;
    while (1)
    {
      unint64_t v528 = v505->n128_u64[v526];
      if (v525 >= v524) {
        break;
      }
      *(void *)int8x16_t v525 = v520->n128_u64[v528];
      float32x4_t v527 = v525 + 8;
LABEL_735:
      ++v526;
      int8x16_t v525 = v527;
      if (v526 >= ((char *)v521 - (char *)v520) >> 3) {
        goto LABEL_764;
      }
    }
    uint64_t v529 = (v525 - v523) >> 3;
    unint64_t v530 = v529 + 1;
    if ((unint64_t)(v529 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    if ((v524 - v523) >> 2 > v530) {
      unint64_t v530 = (v524 - v523) >> 2;
    }
    if ((unint64_t)(v524 - v523) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v531 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v531 = v530;
    }
    if (v531)
    {
      if (v531 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      float32x4_t v532 = operator new(8 * v531);
    }
    else
    {
      float32x4_t v532 = 0;
    }
    float32x4_t v522 = &v532[8 * v529];
    *(void *)float32x4_t v522 = v520->n128_u64[v528];
    float32x4_t v527 = v522 + 8;
    if (v525 != v523)
    {
      unint64_t v533 = v525 - 8 - v523;
      if (v533 < 0x168
        || &v532[v525 - v523 - 8 - (v533 & 0xFFFFFFFFFFFFFFF8)] > &v532[v525 - v523 - 8]
        || &v525[-(v533 & 0xFFFFFFFFFFFFFFF8) - 8] > v525 - 8
        || (unint64_t)(v523 - v532) < 0x20)
      {
        v534 = v525;
        unint64_t v505 = v762;
      }
      else
      {
        uint64_t v536 = (v533 >> 3) + 1;
        v534 = &v525[-8 * (v536 & 0x3FFFFFFFFFFFFFFCLL)];
        v537 = &v532[8 * v529 - 16];
        unint64_t v538 = v525 - 16;
        uint64_t v539 = v536 & 0x3FFFFFFFFFFFFFFCLL;
        unint64_t v505 = v762;
        do
        {
          long long v540 = *(_OWORD *)v538;
          *(v537 - 1) = *((_OWORD *)v538 - 1);
          _OWORD *v537 = v540;
          v537 -= 2;
          v538 -= 32;
          v539 -= 4;
        }
        while (v539);
        v522 -= 8 * (v536 & 0x3FFFFFFFFFFFFFFCLL);
        if (v536 == (v536 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_751:
          float32x4_t v524 = &v532[8 * v531];
          if (v523) {
            goto LABEL_752;
          }
          goto LABEL_753;
        }
      }
      do
      {
        uint64_t v535 = *((void *)v534 - 1);
        v534 -= 8;
        *((void *)v522 - 1) = v535;
        v522 -= 8;
      }
      while (v534 != v523);
      goto LABEL_751;
    }
    unint64_t v505 = v762;
    float32x4_t v524 = &v532[8 * v531];
    if (v523)
    {
LABEL_752:
      operator delete(v523);
      v520 = v764;
      unint64_t v521 = v765;
    }
LABEL_753:
    float32x4_t v523 = v522;
    goto LABEL_735;
  }
  float32x4_t v522 = 0;
  float32x4_t v527 = 0;
LABEL_764:
  std::vector<unsigned long>::__assign_with_size[abi:ne180100]<unsigned long *,unsigned long *>(&v764, v522, v527, (v527 - v522) >> 3);
  uint64_t v61 = a5;
  uint64_t v17 = a11;
  uint64_t v15 = a4;
  if (v522) {
    operator delete(v522);
  }
  if (v505) {
    operator delete(v505);
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v341 = v764;
  v361 = v765;
  unint64_t v352 = (char *)v765 - (char *)v764;
  unint64_t v353 = ((char *)v765 - (char *)v764) >> 3;
  uint64_t v480 = a13;
LABEL_771:
  char v777 = 0;
  memset(v776, 0, sizeof(v776));
  if (v352 < 9)
  {
    size_t v14 = a6;
    goto LABEL_926;
  }
  unint64_t v541 = 0;
  unint64_t v542 = v341->n128_u64[0];
  int8x16_t v543 = (uint64_t *)(v15 + 8 * v341->n128_u64[0]);
  uint64_t v544 = *v543;
  uint64_t v545 = v543[27];
  uint64_t v546 = v543[54];
  uint64_t v547 = 1;
  int v548 = 1;
  do
  {
    unint64_t v549 = v341->n128_u64[v547];
    if (*(void *)(v15 + 8 * v549) == v544 && v544 != 0) {
      *((unsigned char *)v776 + v541) = 1;
    }
    uint64_t v551 = v15 + 8 * v549;
    if (*(void *)(v551 + 216) == v545 && v545 != 0) {
      *((unsigned char *)&v776[3] + v541 + 3) = 1;
    }
    if (*(void *)(v551 + 432) == v546 && v546 != 0) {
      *((unsigned char *)&v776[6] + v541 + 6) = 1;
    }
    ++v541;
    uint64_t v547 = ++v548;
  }
  while (v353 > v548);
  if (!v541)
  {
    if (v352 >= 0x11)
    {
LABEL_815:
      uint64_t v562 = 0;
      goto LABEL_816;
    }
LABEL_808:
    size_t v14 = a6;
    uint64_t v61 = a5;
    goto LABEL_926;
  }
  uint64_t v554 = 0;
  int v555 = 0;
  while (2)
  {
    if (!*((unsigned char *)v776 + v554) && !*((unsigned char *)&v776[3] + v554 + 3) && !*((unsigned char *)&v776[6] + v554 + 6))
    {
      unint64_t v556 = v341->n128_u64[v554 + 1];
      float32x4_t v557 = (char *)v766;
      if (v341 < v766)
      {
        float32x4_t v558 = &v341->n128_i8[8];
        goto LABEL_1011;
      }
      unint64_t v690 = ((char *)v766 - (char *)v341) >> 2;
      if (v690 <= 1) {
        unint64_t v690 = 1;
      }
      if ((unint64_t)((char *)v766 - (char *)v341) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v691 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v691 = v690;
      }
      if (v691 >> 61) {
        goto LABEL_1106;
      }
      v692 = operator new(8 * v691);
      void *v692 = v542;
      float32x4_t v558 = (char *)(v692 + 1);
      float32x4_t v557 = (char *)&v692[v691];
      v764 = (__n128 *)v692;
      v765 = (__n128 *)(v692 + 1);
      v766 = (__n128 *)v557;
      operator delete(v341);
      uint64_t v480 = a13;
      uint64_t v17 = a11;
LABEL_1011:
      if (v558 < v557)
      {
        *(void *)float32x4_t v558 = v556;
        v341 = v764;
        v361 = (__n128 *)(v558 + 8);
        size_t v14 = a6;
        uint64_t v61 = a5;
        uint64_t v16 = a10;
        v765 = v361;
        goto LABEL_932;
      }
      v693 = (char *)v764;
      int64_t v694 = v558 - (char *)v764;
      uint64_t v695 = (v558 - (char *)v764) >> 3;
      unint64_t v696 = v695 + 1;
      if ((unint64_t)(v695 + 1) >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      if ((v557 - (char *)v764) >> 2 > v696) {
        unint64_t v696 = (v557 - (char *)v764) >> 2;
      }
      if ((unint64_t)(v557 - (char *)v764) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v697 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v697 = v696;
      }
      if (v697)
      {
        if (!(v697 >> 61))
        {
          v698 = operator new(8 * v697);
          goto LABEL_1027;
        }
LABEL_1106:
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      v698 = 0;
LABEL_1027:
      v341 = (__n128 *)&v698[8 * v695];
      v341->n128_u64[0] = v556;
      v361 = (__n128 *)&v341->n128_i8[8];
      if (v558 == v693)
      {
        size_t v14 = a6;
        uint64_t v17 = a11;
        uint64_t v61 = a5;
        uint64_t v16 = a10;
      }
      else
      {
        unint64_t v704 = v558 - v693 - 8;
        size_t v14 = a6;
        if (v704 < 0x58 || (unint64_t)(v558 - &v698[v694]) < 0x20)
        {
          v705 = v558;
          uint64_t v17 = a11;
          uint64_t v61 = a5;
          uint64_t v16 = a10;
          goto LABEL_1031;
        }
        uint64_t v714 = (v704 >> 3) + 1;
        v705 = &v558[-8 * (v714 & 0x3FFFFFFFFFFFFFFCLL)];
        v715 = &v698[8 * v695 - 16];
        v716 = v558 - 16;
        uint64_t v717 = v714 & 0x3FFFFFFFFFFFFFFCLL;
        uint64_t v17 = a11;
        do
        {
          long long v718 = *(_OWORD *)v716;
          *(v715 - 1) = *((_OWORD *)v716 - 1);
          _OWORD *v715 = v718;
          v715 -= 2;
          v716 -= 32;
          v717 -= 4;
        }
        while (v717);
        v341 = (__n128 *)((char *)v341 - 8 * (v714 & 0x3FFFFFFFFFFFFFFCLL));
        uint64_t v61 = a5;
        uint64_t v16 = a10;
        if (v714 != (v714 & 0x3FFFFFFFFFFFFFFCLL))
        {
          do
          {
LABEL_1031:
            unint64_t v706 = *((void *)v705 - 1);
            v705 -= 8;
            v341[-1].n128_u64[1] = v706;
            v341 = (__n128 *)((char *)v341 - 8);
          }
          while (v705 != v693);
        }
      }
      v764 = v341;
      v766 = (__n128 *)&v698[8 * v697];
      if (v693) {
        operator delete(v693);
      }
      uint64_t v480 = a13;
      v765 = v361;
      goto LABEL_932;
    }
    uint64_t v554 = ++v555;
    if (v541 > v555) {
      continue;
    }
    break;
  }
  if (v352 <= 0x10) {
    goto LABEL_808;
  }
  uint64_t v559 = 0;
  unint64_t v560 = 0;
  do
  {
    if (*((unsigned char *)v776 + v559)) {
      __p[v560++] = 0;
    }
    if (*((unsigned char *)&v776[3] + v559 + 3)) {
      __p[v560++] = (void *)1;
    }
    if (*((unsigned char *)&v776[6] + v559 + 6)) {
      __p[v560++] = (void *)2;
    }
    ++v559;
  }
  while (v541 > v559);
  if (!v560) {
    goto LABEL_815;
  }
  uint64_t v561 = 0;
  uint64_t v562 = 0;
  float v563 = 0.0;
  do
  {
    if (v809[27 * (void)__p[v561] + v341->n128_u64[0]] > v563)
    {
      uint64_t v562 = v561;
      float v563 = v809[27 * (void)__p[v561] + v341->n128_u64[0]];
    }
    ++v561;
  }
  while (v560 > v561);
LABEL_816:
  float32x4_t v564 = (char *)v766;
  if (v341 >= v766)
  {
    unint64_t v566 = ((char *)v766 - (char *)v341) >> 2;
    if (v566 <= 1) {
      unint64_t v566 = 1;
    }
    if ((unint64_t)((char *)v766 - (char *)v341) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v567 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v567 = v566;
    }
    if (v567 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    unint64_t v568 = operator new(8 * v567);
    *unint64_t v568 = 0;
    v565 = (char *)(v568 + 1);
    float32x4_t v564 = (char *)&v568[v567];
    v764 = (__n128 *)v568;
    v765 = (__n128 *)(v568 + 1);
    v766 = (__n128 *)v564;
    operator delete(v341);
    uint64_t v480 = a13;
  }
  else
  {
    v341->n128_u64[0] = 0;
    v565 = &v341->n128_i8[8];
  }
  unint64_t v569 = v562 + 1;
  if (v565 < v564)
  {
    *(void *)v565 = v569;
    v341 = v764;
    v361 = (__n128 *)(v565 + 8);
    size_t v14 = a6;
    uint64_t v61 = a5;
    goto LABEL_925;
  }
  float32x4_t v570 = (char *)v764;
  int64_t v571 = v565 - (char *)v764;
  uint64_t v572 = (v565 - (char *)v764) >> 3;
  unint64_t v573 = v572 + 1;
  if ((unint64_t)(v572 + 1) >> 61) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  if ((v564 - (char *)v764) >> 2 > v573) {
    unint64_t v573 = (v564 - (char *)v764) >> 2;
  }
  if ((unint64_t)(v564 - (char *)v764) >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v574 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v574 = v573;
  }
  if (v574)
  {
    if (v574 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    v575 = operator new(8 * v574);
  }
  else
  {
    v575 = 0;
  }
  v341 = (__n128 *)&v575[8 * v572];
  v341->n128_u64[0] = v569;
  v361 = (__n128 *)&v341->n128_i8[8];
  if (v565 == v570)
  {
    size_t v14 = a6;
    uint64_t v17 = a11;
    uint64_t v61 = a5;
  }
  else
  {
    unint64_t v625 = v565 - v570 - 8;
    if (v625 < 0x58 || (unint64_t)(v565 - &v575[v571]) < 0x20)
    {
      v626 = v565;
      size_t v14 = a6;
      uint64_t v17 = a11;
      uint64_t v61 = a5;
      goto LABEL_919;
    }
    uint64_t v699 = (v625 >> 3) + 1;
    v626 = &v565[-8 * (v699 & 0x3FFFFFFFFFFFFFFCLL)];
    v700 = &v575[8 * v572 - 16];
    v701 = v565 - 16;
    uint64_t v702 = v699 & 0x3FFFFFFFFFFFFFFCLL;
    uint64_t v17 = a11;
    do
    {
      long long v703 = *(_OWORD *)v701;
      *(v700 - 1) = *((_OWORD *)v701 - 1);
      _OWORD *v700 = v703;
      v700 -= 2;
      v701 -= 32;
      v702 -= 4;
    }
    while (v702);
    v341 = (__n128 *)((char *)v341 - 8 * (v699 & 0x3FFFFFFFFFFFFFFCLL));
    size_t v14 = a6;
    uint64_t v61 = a5;
    if (v699 != (v699 & 0x3FFFFFFFFFFFFFFCLL))
    {
      do
      {
LABEL_919:
        unint64_t v627 = *((void *)v626 - 1);
        v626 -= 8;
        v341[-1].n128_u64[1] = v627;
        v341 = (__n128 *)((char *)v341 - 8);
      }
      while (v626 != v570);
    }
  }
  v764 = v341;
  v766 = (__n128 *)&v575[8 * v574];
  if (v570) {
    operator delete(v570);
  }
  uint64_t v480 = a13;
LABEL_925:
  v765 = v361;
  unint64_t v353 = ((char *)v361 - (char *)v341) >> 3;
LABEL_926:
  if (v361 == v341)
  {
    v361 = v341;
  }
  else
  {
    int v628 = 0;
    char v629 = (char)v776[0];
    char v630 = BYTE3(v776[3]);
    v631 = v341;
    char v632 = BYTE6(v776[6]);
    do
    {
      unint64_t v633 = v631->n128_u64[0];
      v631 = (__n128 *)((char *)v631 + 8);
      uint64_t v634 = (unsigned char *)(v480 + v633);
      *uint64_t v634 = v629;
      v634[27] = v630;
      v634[54] = v632;
      ++v628;
    }
    while (v353 > v628);
  }
  uint64_t v16 = a10;
LABEL_932:
  unint64_t v635 = v341->n128_u64[1];
  float v636 = fmax(*a7, ceilf(*((float *)v770 + v635) * 100.0) * 0.01);
  *a7 = v636;
  if (!*(unsigned char *)(v480 + v341->n128_u64[0]))
  {
    uint64_t v637 = v480 + v341->n128_u64[0];
    if (!*(unsigned char *)(v637 + 27))
    {
      BOOL v638 = *(unsigned __int8 *)(v637 + 54) != 0;
      uint64_t v639 = (char *)v361 - (char *)v341;
      if (v361 != v341) {
        goto LABEL_935;
      }
LABEL_1002:
      if (v638) {
        goto LABEL_938;
      }
      goto LABEL_939;
    }
  }
  BOOL v638 = 1;
  uint64_t v639 = (char *)v361 - (char *)v341;
  if (v361 == v341) {
    goto LABEL_1002;
  }
LABEL_935:
  int v640 = 0;
  unint64_t v641 = v639 >> 3;
  LOBYTE(v639) = 1;
  v642 = v341;
  do
  {
    unint64_t v643 = v642->n128_u64[0];
    v642 = (__n128 *)((char *)v642 + 8);
    LODWORD(v639) = (*((unsigned char *)v806 + v643) == 0) & v639;
    ++v640;
  }
  while (v641 > v640);
  if (v638 & v639) {
LABEL_938:
  }
    *a7 = fmaxf(fmaxf(v809[v635], v809[v635 + 27]), v809[v635 + 54]);
LABEL_939:
  bzero(v806, v14);
  if (v361 == v341)
  {
    if (v341) {
      goto LABEL_951;
    }
  }
  else
  {
    unint64_t v644 = ((char *)v361 - (char *)v341) >> 3;
    if (v644 <= 1) {
      unint64_t v644 = 1;
    }
    if (v644 <= 1)
    {
      unint64_t v645 = 0;
      goto LABEL_949;
    }
    unint64_t v645 = v644 & 0xFFFFFFFFFFFFFFFELL;
    uint64_t v646 = &v341->n128_u64[1];
    unint64_t v647 = v644 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      unint64_t v648 = *v646;
      *((unsigned char *)v806 + *(v646 - 1)) = 1;
      *((unsigned char *)v806 + v648) = 1;
      v646 += 2;
      v647 -= 2;
    }
    while (v647);
    if (v644 != v645)
    {
LABEL_949:
      unint64_t v649 = v644 - v645;
      v650 = &v341->n128_u64[v645];
      do
      {
        uint64_t v651 = *v650++;
        *((unsigned char *)v806 + v651) = 1;
        --v649;
      }
      while (v649);
    }
LABEL_951:
    v765 = v341;
    operator delete(v341);
  }
  if (v767)
  {
    v768 = v767;
    operator delete(v767);
  }
LABEL_954:
  if (__src) {
    operator delete(__src);
  }
  if (v770)
  {
    v771 = v770;
    operator delete(v770);
  }
LABEL_958:
  uint64_t v652 = 0;
  *(void *)&long long v793 = 0;
  long long v791 = 0u;
  long long v792 = 0u;
  long long v789 = 0u;
  long long v790 = 0u;
  long long v787 = 0u;
  long long v788 = 0u;
  long long v785 = 0u;
  long long v786 = 0u;
  long long v783 = 0u;
  long long v784 = 0u;
  long long v781 = 0u;
  long long v782 = 0u;
  long long v780 = 0u;
  uint64_t v653 = *(unsigned __int16 *)(v763 + 42);
  uint64_t result = a12;
  do
  {
    *((void *)&v780 + v652) = v653;
    unint64_t v654 = v808[v652] == 0;
    if (!v808[v652 + 27]) {
      ++v654;
    }
    if (v808[v652 + 54]) {
      unint64_t v655 = v654;
    }
    else {
      unint64_t v655 = v654 + 1;
    }
    if (v655 >= 2) {
      *((void *)&v780 + v652) = *(void *)(v763 + 48);
    }
    ++v652;
  }
  while (v14 > v652);
  if (v14 <= 1) {
    unint64_t v656 = 1;
  }
  else {
    unint64_t v656 = v14;
  }
  if (v656 >= 8)
  {
    if (v656 >= 0x10)
    {
      unint64_t v657 = v656 & 0xFFFFFFFFFFFFFFF0;
      float32x4x3_t v667 = (int8x16_t *)v806;
      v668 = (uint64x2_t *)&v780;
      v669.i64[0] = 0x101010101010101;
      v669.i64[1] = 0x101010101010101;
      uint64_t v670 = a3;
      unint64_t v671 = v656 & 0xFFFFFFFFFFFFFFF0;
      do
      {
        uint64x2_t v672 = v668[1];
        uint64x2_t v673 = v668[2];
        uint64x2_t v674 = v668[3];
        uint64x2_t v675 = v668[4];
        uint64x2_t v676 = v668[5];
        uint64x2_t v677 = v668[6];
        uint64x2_t v678 = v668[7];
        *float32x4x3_t v667 = vandq_s8(vandq_s8(vbicq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v668, *(uint64x2_t *)(v670 + 432)), (int32x4_t)vcgeq_u64(v672, *(uint64x2_t *)(v670 + 448))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v673, *(uint64x2_t *)(v670 + 464)), (int32x4_t)vcgeq_u64(v674, *(uint64x2_t *)(v670 + 480)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v675, *(uint64x2_t *)(v670 + 496)), (int32x4_t)vcgeq_u64(v676, *(uint64x2_t *)(v670 + 512))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v677, *(uint64x2_t *)(v670 + 528)), (int32x4_t)vcgeq_u64(v678, *(uint64x2_t *)(v670 + 544))))), vceqzq_s8(*v667)), v669),
                  vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v668, *(uint64x2_t *)(v670 + 216)), (int32x4_t)vcgeq_u64(v672, *(uint64x2_t *)(v670 + 232))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v673, *(uint64x2_t *)(v670 + 248)), (int32x4_t)vcgeq_u64(v674, *(uint64x2_t *)(v670 + 264)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v675, *(uint64x2_t *)(v670 + 280)), (int32x4_t)vcgeq_u64(v676, *(uint64x2_t *)(v670 + 296))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v677, *(uint64x2_t *)(v670 + 312)), (int32x4_t)vcgeq_u64(v678, *(uint64x2_t *)(v670 + 328))))), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v668, *(uint64x2_t *)v670),
                                                (int32x4_t)vcgeq_u64(v672, *(uint64x2_t *)(v670 + 16))),
                                   (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v673, *(uint64x2_t *)(v670 + 32)), (int32x4_t)vcgeq_u64(v674, *(uint64x2_t *)(v670 + 48)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v675, *(uint64x2_t *)(v670 + 64)), (int32x4_t)vcgeq_u64(v676, *(uint64x2_t *)(v670 + 80))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v677, *(uint64x2_t *)(v670 + 96)), (int32x4_t)vcgeq_u64(v678, *(uint64x2_t *)(v670 + 112)))))));
        ++v667;
        v670 += 128;
        v668 += 8;
        v671 -= 16;
      }
      while (v671);
      if (v656 == v657) {
        goto LABEL_996;
      }
      if ((v656 & 8) == 0) {
        goto LABEL_982;
      }
    }
    else
    {
      unint64_t v657 = 0;
    }
    unint64_t v658 = v657;
    unint64_t v657 = v656 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v659 = v658 - (v656 & 0xFFFFFFFFFFFFFFF8);
    uint64_t v660 = (int8x8_t *)((char *)v806 + v658);
    uint64_t v661 = 8 * v658;
    uint64_t v662 = a3 + 8 * v658;
    v663 = (uint64x2_t *)((char *)&v780 + v661);
    do
    {
      uint64x2_t v664 = v663[1];
      uint64x2_t v665 = v663[2];
      uint64x2_t v666 = v663[3];
      *uint64_t v660 = vand_s8(vand_s8(vbic_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v663, *(uint64x2_t *)(v662 + 432)), (int32x4_t)vcgeq_u64(v664, *(uint64x2_t *)(v662 + 448))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v665, *(uint64x2_t *)(v662 + 464)), (int32x4_t)vcgeq_u64(v666, *(uint64x2_t *)(v662 + 480))))), vceqz_s8(*v660)), (int8x8_t)0x101010101010101), vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v663, *(uint64x2_t *)(v662 + 216)), (int32x4_t)vcgeq_u64(v664, *(uint64x2_t *)(v662 + 232))), (int16x8_t)vuzp1q_s32(
                                   (int32x4_t)vcgeq_u64(v665, *(uint64x2_t *)(v662 + 248)),
                                   (int32x4_t)vcgeq_u64(v666, *(uint64x2_t *)(v662 + 264))))),
                  vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(*v663, *(uint64x2_t *)v662), (int32x4_t)vcgeq_u64(v664, *(uint64x2_t *)(v662 + 16))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_u64(v665, *(uint64x2_t *)(v662 + 32)), (int32x4_t)vcgeq_u64(v666, *(uint64x2_t *)(v662 + 48)))))));
      ++v660;
      v662 += 64;
      v663 += 4;
      v659 += 8;
    }
    while (v659);
    if (v656 != v657) {
      goto LABEL_982;
    }
  }
  else
  {
    unint64_t v657 = 0;
LABEL_982:
    v679 = (unint64_t *)(a3 + 8 * v657 + 216);
    do
    {
      unint64_t v680 = *((void *)&v780 + v657);
      if (*((unsigned char *)v806 + v657)) {
        BOOL v681 = v679[27] > v680;
      }
      else {
        BOOL v681 = 1;
      }
      char v684 = !v681 && *v679 <= v680 && *(v679 - 27) <= v680;
      *((unsigned char *)v806 + v657++) = v684;
      ++v679;
    }
    while (v14 > v657);
  }
LABEL_996:
  unsigned __int8 v685 = 0;
  uint64_t v686 = 0;
  *a14 = 0;
  v687 = (void *)(v15 + 216);
  uint64_t v688 = a13 + 27;
  v689 = (void *)(a3 + 216);
  do
  {
    if (*((unsigned char *)v806 + v686))
    {
      *(void *)(v17 + 8 * v685) = *(v687 - 27);
      *(void *)(v16 + 8 * *a14) = *(v689 - 27);
      *(unsigned char *)(a12 + *a14) = v61->i8[v686];
      *(unsigned char *)(a13 + *a14) = *(unsigned char *)(a13 + v686);
      *(void *)(v17 + 8 * *a14 + 216) = *v687;
      *(void *)(v16 + 8 * *a14 + 216) = *v689;
      *(unsigned char *)(a12 + *a14) = v61->i8[v686];
      *(unsigned char *)(a13 + *a14 + 27) = *(unsigned char *)(v688 + v686);
      *(void *)(v17 + 8 * *a14 + 432) = v687[27];
      *(void *)(v16 + 8 * *a14 + 432) = v689[27];
      *(unsigned char *)(a12 + *a14) = v61->i8[v686];
      *(unsigned char *)(a13 + *a14 + 54) = *(unsigned char *)(v688 + v686 + 27);
      unsigned __int8 v685 = *a14 + 1;
      *a14 = v685;
    }
    ++v686;
    ++v687;
    ++v689;
  }
  while (v14 > v686);
  return result;
}

void sub_259019B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  if (v54) {
    operator delete(v54);
  }
  if (STACK[0x260]) {
    operator delete((void *)STACK[0x260]);
  }
  if (a17)
  {
    operator delete(a17);
    uint64_t v56 = a54;
    if (!a54) {
LABEL_7:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    uint64_t v56 = a54;
    if (!a54) {
      goto LABEL_7;
    }
  }
  operator delete(v56);
  _Unwind_Resume(a1);
}

void std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(__n128 *a1, __n128 *a2, uint64_t **a3, unint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (a4 >= 2)
  {
    if (a4 == 2)
    {
      unint64_t v9 = a2[-1].n128_u64[1];
      unint64_t v10 = a1->n128_u64[0];
      if (*(float *)(**a3 + 4 * v9) > *(float *)(**a3 + 4 * a1->n128_u64[0]))
      {
        a1->n128_u64[0] = v9;
        a2[-1].n128_u64[1] = v10;
      }
      return;
    }
    if ((uint64_t)a4 > 128)
    {
      unint64_t v23 = a4 >> 1;
      unsigned __int8 v24 = &a1->n128_i8[8 * (a4 >> 1)];
      unint64_t v25 = a4 >> 1;
      if ((uint64_t)a4 <= a6)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>((char *)a1, v24, a3, v25, a5);
        float v27 = &a5[v23];
        std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(&a1->n128_i8[8 * (a4 >> 1)], (char *)a2, a3, a4 - (a4 >> 1), v27);
        BOOL v28 = *a3;
        uint64_t v29 = -1;
        float v30 = v27;
        BOOL v31 = a5;
        uint64_t v32 = a1;
        unint64_t v33 = &a5[a4];
        do
        {
          ++v29;
          if (v30 == v33)
          {
            if (v31 == v27) {
              return;
            }
            unint64_t v48 = (char *)&a5[v23] - (char *)v31 - 8;
            if (v48 >= 0x38)
            {
              if ((unint64_t)((char *)&a1->n128_u64[v29] - (char *)v31) >= 0x20)
              {
                unint64_t v50 = 0;
                uint64_t v51 = (v48 >> 3) + 1;
                uint64_t v52 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                unint64_t v49 = &v31[v52];
                uint64_t v53 = v51 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  int v54 = &v32[v50 / 2];
                  __n128 v55 = *(__n128 *)&v31[v50 + 2];
                  __n128 *v54 = *(__n128 *)&v31[v50];
                  v54[1] = v55;
                  v50 += 4;
                  v53 -= 4;
                }
                while (v53);
                if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
                  return;
                }
                uint64_t v32 = (__n128 *)((char *)v32 + v52 * 8);
              }
              else
              {
                unint64_t v49 = v31;
              }
            }
            else
            {
              unint64_t v49 = v31;
            }
            do
            {
              unint64_t v56 = *v49++;
              v32->n128_u64[0] = v56;
              uint64_t v32 = (__n128 *)((char *)v32 + 8);
            }
            while (v49 != v27);
            return;
          }
          int v34 = v30;
          uint64_t v35 = *v30;
          float v36 = *(float *)(*v28 + 4 * v35);
          uint64_t v37 = *v31;
          float v38 = *(float *)(*v28 + 4 * *v31);
          if (v36 > v38) {
            uint64_t v37 = v35;
          }
          v31 += v36 <= v38;
          float v30 = &v34[v36 > v38];
          v32->n128_u64[0] = v37;
          uint64_t v32 = (__n128 *)((char *)v32 + 8);
        }
        while (v31 != v27);
        if (v30 == v33) {
          return;
        }
        uint64_t v39 = -8;
        if (v36 <= v38) {
          uint64_t v39 = 0;
        }
        unint64_t v40 = (char *)&a5[a4] - (char *)v34 + v39 - 8;
        if (v40 <= 0x77 || (unint64_t)((char *)&a1->n128_u64[v29] - (char *)&v34[v36 > v38] + 8) < 0x20) {
          goto LABEL_35;
        }
        unint64_t v41 = 0;
        uint64_t v42 = (v40 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v44 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          unint64_t v45 = &v32[v41 / 2];
          __n128 v46 = *(__n128 *)&v30[v41 + 2];
          *unint64_t v45 = *(__n128 *)&v30[v41];
          v45[1] = v46;
          v41 += 4;
          v44 -= 4;
        }
        while (v44);
        if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
        {
          uint64_t v32 = (__n128 *)((char *)v32 + v43);
          float v30 = (uint64_t *)((char *)v30 + v43);
          do
          {
LABEL_35:
            unint64_t v47 = *v30++;
            v32->n128_u64[0] = v47;
            uint64_t v32 = (__n128 *)((char *)v32 + 8);
          }
          while (v30 != v33);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, v24, a3, v25, a5, a6);
        std::__stable_sort<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(&a1->n128_u64[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
        std::__inplace_merge<std::_ClassicAlgPolicy,peridot::HDUnfoldClass::calcConf(peridot::DetectorSingleTarget const(&)[3][3],peridot::HDUnfoldClass::CRT_Output const&,float,unsigned long,unsigned long const*,float const*,peridot::DetectorArgs const&,unsigned long,BOOL,peridot::PeridotDetectorOutput::DetectorTarget &,peridot::HDUnfoldClass::UnFoldRes &)::$_0 &,std::__wrap_iter<unsigned long *>>(a1, (__n128 *)((char *)a1 + 8 * (a4 >> 1)), a2, a3, a4 >> 1, a4 - (a4 >> 1), (char *)a5, a6, v26);
      }
    }
    else if (a1 != a2)
    {
      unint64_t v12 = &a1->n128_u64[1];
      if (&a1->n128_i8[8] != (__int8 *)a2)
      {
        uint64_t v13 = 0;
        uint64_t v14 = **a3;
        uint64_t v15 = a1;
        do
        {
          unint64_t v17 = v15->n128_u64[0];
          uint64_t v15 = (__n128 *)v12;
          unint64_t v18 = *v12;
          float v19 = *(float *)(v14 + 4 * v18);
          if (v19 > *(float *)(v14 + 4 * v17))
          {
            uint64_t v20 = v13;
            do
            {
              *(unint64_t *)((char *)&a1->n128_u64[1] + v20) = v17;
              if (!v20)
              {
                uint64_t v16 = a1;
                goto LABEL_10;
              }
              unint64_t v17 = *(unint64_t *)((char *)&a1->n128_u64[-1] + v20);
              v20 -= 8;
            }
            while (v19 > *(float *)(v14 + 4 * v17));
            uint64_t v16 = (__n128 *)&a1->n128_i8[v20 + 8];
LABEL_10:
            v16->n128_u64[0] = v18;
          }
          unint64_t v12 = &v15->n128_u64[1];
          v13 += 8;
        }
        while (&v15->n128_i8[8] != (__int8 *)a2);
      }
    }
  }
}

float32x2_t PDPeridotCalibGetOperationalWideToPeridotTransform(__CFData *a1)
{
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  float64x2_t v2 = *(float64x2_t *)(MutableBytePtr + 402248);
  v2.f64[1] = *((float64_t *)MutableBytePtr + 50285);
  return vcvt_f32_f64(v2);
}

void peridot::PeridotDXP::refPixelDetectorEstimator_MPDC(uint64_t a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, int a5)
{
  std::vector<peridot::RefHistogramAllSpots>::vector(&v19, *(unsigned __int8 *)(a1 + 20) * (unint64_t)*(unsigned __int8 *)(a1 + 21));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v18, *(unsigned __int8 *)(a1 + 20) * (unint64_t)*(unsigned __int8 *)(a1 + 21));
  peridot::PeridotDXP::equalizer_ref_MPDC(a1, a2, *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 21), *(unsigned __int8 *)(a1 + 20), &v19, *(float *)(a1 + 3464), (uint64_t *)&v18);
  std::vector<peridot::RefHistogramAllSpots>::vector(&v17, *(unsigned __int8 *)(a1 + 22) * (unint64_t)*(unsigned __int8 *)(a1 + 23));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v16, *(unsigned __int8 *)(a1 + 22) * (unint64_t)*(unsigned __int8 *)(a1 + 23));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v15, *(unsigned __int8 *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 25));
  std::vector<peridot::RefHistogramAllSpots>::vector(&__p, *(unsigned __int8 *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 25));
  if ((a5 - 1) <= 1)
  {
    unint64_t v12 = (float *)operator new(4uLL);
    float v13 = *(float *)(a1 + 3512);
    float *v12 = v13;
    peridot::PeridotDXP::equalizer_ref_MPDC(a1, a3, *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 23), *(unsigned __int8 *)(a1 + 22), (uint64_t *)&v17, v13, (uint64_t *)&v16);
    peridot::PeridotDXP::equalizer_ref_MPDC(a1, a4, *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 24), (uint64_t *)&v15, *v12, (uint64_t *)&__p);
    operator delete(v12);
  }
  peridot::PeridotDXP::refPixelDetectorEstimator_inner(a1, v11, v10, (uint64_t *)&v18);
}

void sub_25901A71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  double v11 = va_arg(va2, void *);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void *);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v19 = va_arg(va4, void *);
  uint64_t v21 = va_arg(va4, void);
  uint64_t v22 = va_arg(va4, void);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va1);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va2);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va3);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va4);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_25901A77C()
{
}

void sub_25901A784()
{
}

void sub_25901A78C()
{
}

void sub_25901A794()
{
}

uint64_t peridot::PeridotDXP::equalizer_ref_MPDC(uint64_t a1, uint64_t **a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t *a8, float a9, uint64_t *a10)
{
  if (!a3)
  {
    peridot_depth_log("PeridotDXP::equalizer_ref (pixelsNum <= 0) not implemented");
    return 1;
  }
  uint64_t v19 = a7 * (unint64_t)a6;
  std::vector<peridot::RefHistogramAllSpots>::vector(&v58, v19);
  std::vector<peridot::RefHistogramAllSpots>::vector(&__p, v19);
  if (a6 && a7)
  {
    uint64_t v20 = 0;
    uint64_t v21 = (char *)v58;
    uint64_t v22 = (char *)__p;
    uint64_t v23 = **a2;
    uint64_t v24 = (*a2)[3];
    float v25 = 1.0 / (float)((float)a3 * a9);
    do
    {
      uint64_t v26 = 0;
      uint64_t v27 = v20 * a7;
      do
      {
        uint64_t v28 = 0;
        uint64_t v29 = 24 * (v26 + v27);
        uint64_t v30 = *(void *)(v23 + v29 + 8);
        uint64_t v31 = 48 * (v26 + v27);
        uint64_t v32 = &v21[v31];
        uint64_t v33 = *(void *)&v21[v31 + 8];
        int v34 = &v22[v31];
        uint64_t v35 = *(void *)&v22[v31 + 8];
        uint64_t v36 = *(void *)(v24 + v29 + 8);
        uint64_t v37 = *((void *)v32 + 4);
        uint64_t v38 = *((void *)v34 + 4);
        float v39 = 0.0;
        float v40 = 0.0;
        do
        {
          float v41 = *(float *)(v30 + v28) * v25;
          *(float *)(v33 + v28) = v41;
          float v40 = v41 + v40;
          *(float *)(v35 + v28) = v40;
          float v42 = *(float *)(v36 + v28) * v25;
          *(float *)(v37 + v28) = v42;
          float v39 = v42 + v39;
          *(float *)(v38 + v28) = v39;
          v28 += 4;
        }
        while (v28 != 256);
        ++v26;
      }
      while (v26 != a7);
      ++v20;
    }
    while (v20 != a6);
  }
  if (a4 != 1)
  {
    peridot_depth_log("PeridotDXP::equalizer_ref (nBuf != 1) not implemented");
    uint64_t v43 = (char *)__p;
    if (!__p) {
      goto LABEL_12;
    }
LABEL_16:
    __n128 v46 = v57;
    unint64_t v47 = v43;
    if (v57 != v43)
    {
      unint64_t v48 = v57 - 48;
      do
      {
        *((void *)v46 - 3) = off_270717568;
        uint64_t v49 = *((void *)v46 - 2);
        if (v49) {
          MEMORY[0x25A2D62A0](v49, 0x1000C8052888210);
        }
        *((void *)v46 - 1) = 0;
        *((void *)v46 - 6) = off_270717568;
        uint64_t v50 = *((void *)v46 - 5);
        if (v50) {
          MEMORY[0x25A2D62A0](v50, 0x1000C8052888210);
        }
        *((void *)v46 - 4) = 0;
        v48 -= 48;
        v46 -= 48;
      }
      while (v46 != v43);
      unint64_t v47 = __p;
    }
    uint64_t v57 = v43;
    operator delete(v47);
    uint64_t v44 = (char *)v58;
    if (!v58) {
      return a4 != 1;
    }
    goto LABEL_25;
  }
  peridot::PeridotDXP::equalizer_ref_inner(a1, (uint64_t *)&v58, (uint64_t *)&__p, a6, a7, a8, a10, a9, (float)a5 / (float)((float)a3 * a9));
  uint64_t v43 = (char *)__p;
  if (__p) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v44 = (char *)v58;
  if (v58)
  {
LABEL_25:
    uint64_t v51 = v59;
    uint64_t v52 = v44;
    if (v59 != v44)
    {
      uint64_t v53 = v59 - 48;
      do
      {
        *((void *)v51 - 3) = off_270717568;
        uint64_t v54 = *((void *)v51 - 2);
        if (v54) {
          MEMORY[0x25A2D62A0](v54, 0x1000C8052888210);
        }
        *((void *)v51 - 1) = 0;
        *((void *)v51 - 6) = off_270717568;
        uint64_t v55 = *((void *)v51 - 5);
        if (v55) {
          MEMORY[0x25A2D62A0](v55, 0x1000C8052888210);
        }
        *((void *)v51 - 4) = 0;
        v53 -= 48;
        v51 -= 48;
      }
      while (v51 != v44);
      uint64_t v52 = v58;
    }
    uint64_t v59 = v44;
    operator delete(v52);
  }
  return a4 != 1;
}

void sub_25901AAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

void peridot::PeridotDXP::refPixelDetectorEstimator(uint64_t a1, uint64_t *a2, int a3)
{
  std::vector<peridot::RefHistogramAllSpots>::vector(&v13, *(unsigned __int8 *)(a1 + 20) * (unint64_t)*(unsigned __int8 *)(a1 + 21));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v12, *(unsigned __int8 *)(a1 + 20) * (unint64_t)*(unsigned __int8 *)(a1 + 21));
  peridot::PeridotDXP::equalizer_ref(a1, *a2, *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 21), *(unsigned __int8 *)(a1 + 20), &v13, *(float *)(a1 + 3464), (uint64_t *)&v12);
  std::vector<peridot::RefHistogramAllSpots>::vector(&v11, *(unsigned __int8 *)(a1 + 22) * (unint64_t)*(unsigned __int8 *)(a1 + 23));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v10, *(unsigned __int8 *)(a1 + 22) * (unint64_t)*(unsigned __int8 *)(a1 + 23));
  std::vector<peridot::RefHistogramAllSpots>::vector(&v9, *(unsigned __int8 *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 25));
  std::vector<peridot::RefHistogramAllSpots>::vector(&__p, *(unsigned __int8 *)(a1 + 24) * (unint64_t)*(unsigned __int8 *)(a1 + 25));
  if ((a3 - 1) <= 1)
  {
    peridot::PeridotDXP::equalizer_ref(a1, a2[1], *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 23), *(unsigned __int8 *)(a1 + 22), (uint64_t *)&v11, *(float *)(a1 + 3512), (uint64_t *)&v10);
    peridot::PeridotDXP::equalizer_ref(a1, a2[2], *(unsigned __int8 *)(a1 + 3542), 1, 0, *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 24), (uint64_t *)&v9, *(float *)(a1 + 3516), (uint64_t *)&__p);
  }
  peridot::PeridotDXP::refPixelDetectorEstimator_inner(a1, v7, v6, (uint64_t *)&v12);
}

void sub_25901B138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va4, a5);
  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  double v7 = va_arg(va1, void *);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  double v11 = va_arg(va2, void *);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void *);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  va_copy(va4, va3);
  uint64_t v19 = va_arg(va4, void *);
  uint64_t v21 = va_arg(va4, void);
  uint64_t v22 = va_arg(va4, void);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va1);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va2);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va3);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)va4);
  std::vector<peridot::RefHistogramAllSpots>::~vector[abi:ne180100]((void **)(v5 - 104));
  _Unwind_Resume(a1);
}

void sub_25901B190()
{
}

void sub_25901B198()
{
}

void sub_25901B1A0()
{
}

void *std::vector<peridot::RefHistogramAllSpots>::vector(void *result, uint64_t a2)
{
  float64x2_t v2 = result;
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  if (a2)
  {
    uint64_t v3 = 48 * a2;
    uint64_t v4 = (char *)operator new(48 * a2);
    void *v2 = v4;
    v2[1] = v4;
    v2[2] = &v4[v3];
    *(_OWORD *)(v4 + 8) = 0u;
    *((void *)v4 + 5) = 0;
    *(_OWORD *)(v4 + 24) = 0u;
    *(void *)uint64_t v4 = off_270717568;
    *((void *)v4 + 2) = 64;
    operator new[]();
  }
  return result;
}

void sub_25901B350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t peridot::PeridotDXP::equalizer_ref(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, unsigned int a6, unsigned int a7, uint64_t *a8, float a9, uint64_t *a10)
{
  if (!a3)
  {
    peridot_depth_log("PeridotDXP::equalizer_ref (pixelsNum <= 0) not implemented");
    return 1;
  }
  uint64_t v19 = a7 * (unint64_t)a6;
  std::vector<peridot::RefHistogramAllSpots>::vector(&v55, v19);
  std::vector<peridot::RefHistogramAllSpots>::vector(&__p, v19);
  if (a6 && a7)
  {
    uint64_t v21 = 0;
    uint64_t v22 = (char *)v55;
    uint64_t v23 = (char *)__p;
    float v24 = 1.0 / (float)((float)a3 * a9);
    float v25 = (_WORD *)(a2 + 192);
    do
    {
      uint64_t v26 = 0;
      uint64_t v27 = v25;
      do
      {
        uint64_t v28 = 0;
        uint64_t v29 = 48 * (v26 + v21 * a7);
        uint64_t v30 = &v22[v29];
        uint64_t v31 = *(void *)&v22[v29 + 8];
        uint64_t v32 = &v23[v29];
        uint64_t v33 = *(void *)&v23[v29 + 8];
        uint64_t v34 = *((void *)v30 + 4);
        uint64_t v35 = *((void *)v32 + 4);
        float v36 = 0.0;
        uint64_t v37 = v27;
        float v38 = 0.0;
        do
        {
          LOWORD(v20) = *(v37 - 64);
          *(float *)&unsigned int v39 = v24 * (float)LODWORD(v20);
          *(float *)(v31 + v28) = *(float *)&v39;
          float v38 = *(float *)&v39 + v38;
          *(float *)(v33 + v28) = v38;
          LOWORD(v39) = *v37;
          float v20 = v24 * (float)v39;
          *(float *)(v34 + v28) = v20;
          float v36 = v20 + v36;
          *(float *)(v35 + v28) = v36;
          v28 += 4;
          ++v37;
        }
        while (v28 != 256);
        ++v26;
        v27 += 4640;
      }
      while (v26 != a7);
      ++v21;
      v25 += 4640 * a7;
    }
    while (v21 != a6);
  }
  if (a4 != 1)
  {
    peridot_depth_log("PeridotDXP::equalizer_ref (nBuf != 1) not implemented");
    float v40 = (char *)__p;
    if (!__p) {
      goto LABEL_12;
    }
LABEL_16:
    uint64_t v43 = v54;
    uint64_t v44 = v40;
    if (v54 != v40)
    {
      unint64_t v45 = v54 - 48;
      do
      {
        *((void *)v43 - 3) = off_270717568;
        uint64_t v46 = *((void *)v43 - 2);
        if (v46) {
          MEMORY[0x25A2D62A0](v46, 0x1000C8052888210);
        }
        *((void *)v43 - 1) = 0;
        *((void *)v43 - 6) = off_270717568;
        uint64_t v47 = *((void *)v43 - 5);
        if (v47) {
          MEMORY[0x25A2D62A0](v47, 0x1000C8052888210);
        }
        *((void *)v43 - 4) = 0;
        v45 -= 48;
        v43 -= 48;
      }
      while (v43 != v40);
      uint64_t v44 = __p;
    }
    uint64_t v54 = v40;
    operator delete(v44);
    float v41 = (char *)v55;
    if (!v55) {
      return a4 != 1;
    }
    goto LABEL_25;
  }
  peridot::PeridotDXP::equalizer_ref_inner(a1, (uint64_t *)&v55, (uint64_t *)&__p, a6, a7, a8, a10, a9, (float)a5 / (float)((float)a3 * a9));
  float v40 = (char *)__p;
  if (__p) {
    goto LABEL_16;
  }
LABEL_12:
  float v41 = (char *)v55;
  if (v55)
  {
LABEL_25:
    unint64_t v48 = v56;
    uint64_t v49 = v41;
    if (v56 != v41)
    {
      uint64_t v50 = v56 - 48;
      do
      {
        *((void *)v48 - 3) = off_270717568;
        uint64_t v51 = *((void *)v48 - 2);
        if (v51) {
          MEMORY[0x25A2D62A0](v51, 0x1000C8052888210);
        }
        *((void *)v48 - 1) = 0;
        *((void *)v48 - 6) = off_270717568;
        uint64_t v52 = *((void *)v48 - 5);
        if (v52) {
          MEMORY[0x25A2D62A0](v52, 0x1000C8052888210);
        }
        *((void *)v48 - 4) = 0;
        v50 -= 48;
        v48 -= 48;
      }
      while (v48 != v41);
      uint64_t v49 = v55;
    }
    unint64_t v56 = v41;
    operator delete(v49);
  }
  return a4 != 1;
}

void sub_25901B6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *a12)
{
}

uint64_t peridot::PeridotDXP::equalizer_ref_inner(uint64_t a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5, uint64_t *a6, uint64_t *a7, float a8, float a9)
{
  if (a4 && a5)
  {
    uint64_t v9 = 0;
    uint64_t v118 = a4;
    uint64_t v126 = a5;
    uint64_t v123 = *a7;
    uint64_t v124 = *a6;
    uint64_t v121 = *a2;
    uint64_t v122 = *a3;
    float v150 = -a8;
    unint64_t v10 = *(void *)(a1 + 3936);
    unint64_t v120 = v10 + 256;
    int8x16_t v138 = (int8x16_t)vdupq_n_s32(0xBC257EAA);
    float32x4_t v139 = (float32x4_t)vdupq_n_s32(0x42C8000Du);
    __asm { FMOV            V2.4S, #1.0 }
    float32x4_t v136 = (float32x4_t)vdupq_n_s32(0x3F7D70A4u);
    float32x4_t v137 = _Q2;
    int8x16_t v135 = (int8x16_t)vdupq_n_s32(0x3C23D700u);
    float v140 = a9;
    do
    {
      uint64_t v15 = 0;
      uint64_t v119 = v9;
      uint64_t v125 = v9 * v126;
      do
      {
        uint64_t v132 = v15;
        uint64_t v16 = 48 * (v15 + v125);
        uint64_t v17 = v124 + v16;
        uint64_t v18 = v123 + v16;
        uint64_t v19 = v122 + v16;
        unint64_t v20 = *(void *)(v122 + v16 + 8);
        uint64_t v21 = v121 + v16;
        unint64_t v22 = *(void *)(v21 + 8);
        unint64_t v23 = *(void *)(v17 + 8);
        unint64_t v24 = *(void *)(v18 + 8);
        unint64_t v25 = *(void *)(v19 + 32);
        unint64_t v26 = *(void *)(v21 + 32);
        unint64_t v27 = *(void *)(v17 + 32);
        unint64_t v28 = *(void *)(v18 + 32);
        unint64_t v29 = v23 + 256;
        unint64_t v30 = v24 + 256;
        unint64_t v31 = v27 + 256;
        unint64_t v32 = v28 + 256;
        unint64_t v33 = v20 + 256;
        unint64_t v34 = v22 + 256;
        unint64_t v35 = v25 + 256;
        unint64_t v36 = v26 + 256;
        BOOL v38 = v23 < v27 + 256 && v27 < v29;
        BOOL v147 = v38;
        BOOL v40 = v23 < v32 && v28 < v29;
        BOOL v141 = v40;
        BOOL v42 = v23 < v33 && v20 < v29;
        BOOL v133 = v42;
        BOOL v44 = v23 < v34 && v22 < v29;
        BOOL v46 = v23 < v120 && v10 < v29;
        BOOL v48 = v23 < v35 && v25 < v29;
        BOOL v50 = v23 < v36 && v26 < v29;
        BOOL v52 = v24 < v31 && v27 < v30;
        BOOL v54 = v24 < v32 && v28 < v30;
        BOOL v56 = v24 < v33 && v20 < v30;
        BOOL v58 = v24 < v34 && v22 < v30;
        BOOL v60 = v24 < v120 && v10 < v30;
        BOOL v62 = v24 < v35 && v25 < v30;
        BOOL v64 = v24 < v36 && v26 < v30;
        BOOL v131 = v64;
        BOOL v66 = v27 < v32 && v28 < v31;
        BOOL v130 = v66;
        BOOL v68 = v27 < v33 && v20 < v31;
        BOOL v129 = v68;
        BOOL v70 = v27 < v34 && v22 < v31;
        BOOL v128 = v70;
        BOOL v72 = v27 < v120 && v10 < v31;
        BOOL v127 = v72;
        BOOL v74 = v27 < v35 && v25 < v31;
        BOOL v76 = v27 < v36 && v26 < v31;
        BOOL v78 = v28 < v33 && v20 < v32;
        BOOL v80 = v28 < v34 && v22 < v32;
        BOOL v82 = v28 < v120 && v10 < v32;
        BOOL v84 = v28 < v35 && v25 < v32;
        BOOL v86 = v28 < v36 && v26 < v32;
        BOOL v87 = v24 >= v29 || v23 >= v30;
        if (!v87
          || v147
          || v141
          || v133
          || v44
          || v46
          || v48
          || v50
          || v52
          || v54
          || v56
          || v58
          || v60
          || v62
          || v131
          || v130
          || v129
          || v128
          || v127
          || v74
          || v76
          || v78
          || v80
          || v82
          || v84
          || v86)
        {
          for (uint64_t i = 0; i != 256; i += 4)
          {
            float v108 = (float)(*(float *)(v20 + i) - *(float *)(v22 + i)) + (float)(*(float *)(v10 + i) * a9);
            if (v108 >= 100.0) {
              float v109 = -0.010101;
            }
            else {
              float v109 = 1.0 / (float)(1.0 - v108);
            }
            *(float *)(v23 + i) = v109;
            float v110 = v109 * *(float *)(v22 + i);
            if (v110 >= 0.99) {
              float v111 = 0.01;
            }
            else {
              float v111 = 1.0 - v110;
            }
            *(float *)(v24 + i) = logf(fmaxf(v111, 0.0)) * v150;
            float v112 = (float)(*(float *)(v25 + i) - *(float *)(v26 + i)) + (float)(*(float *)(v10 + i) * v140);
            if (v112 >= 100.0) {
              float v113 = -0.010101;
            }
            else {
              float v113 = 1.0 / (float)(1.0 - v112);
            }
            *(float *)(v27 + i) = v113;
            float v114 = v113 * *(float *)(v26 + i);
            if (v114 >= 0.99) {
              float v115 = 0.01;
            }
            else {
              float v115 = 1.0 - v114;
            }
            float v116 = logf(fmaxf(v115, 0.0));
            a9 = v140;
            *(float *)(v28 + i) = v116 * v150;
          }
        }
        else
        {
          for (uint64_t j = 0; j != 256; j += 16)
          {
            float32x4_t v89 = *(float32x4_t *)(v22 + j);
            float32x4_t v134 = vmulq_n_f32(*(float32x4_t *)(v10 + j), a9);
            float32x4_t v90 = vaddq_f32(v134, vsubq_f32(*(float32x4_t *)(v20 + j), v89));
            float32x4_t v91 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v139, v90), (int8x16_t)vdivq_f32(v137, vsubq_f32(v137, v90)), v138);
            *(float32x4_t *)(v23 + j) = v91;
            float32x4_t v92 = vmulq_f32(v91, v89);
            float32x4_t v148 = vmaxnmq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v136, v92), (int8x16_t)vsubq_f32(v137, v92), v135), (float32x4_t)0);
            float v142 = logf(v148.f32[1]);
            v93.f32[0] = logf(v148.f32[0]);
            v93.f32[1] = v142;
            float32x4_t v143 = v93;
            float v94 = logf(v148.f32[2]);
            float32x4_t v95 = v143;
            v95.f32[2] = v94;
            float32x4_t v144 = v95;
            float v96 = logf(v148.f32[3]);
            float32x4_t v97 = v144;
            v97.f32[3] = v96;
            *(float32x4_t *)(v24 + j) = vmulq_n_f32(v97, v150);
            float32x4_t v98 = *(float32x4_t *)(v26 + j);
            float32x4_t v99 = vaddq_f32(v134, vsubq_f32(*(float32x4_t *)(v25 + j), v98));
            float32x4_t v100 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v139, v99), (int8x16_t)vdivq_f32(v137, vsubq_f32(v137, v99)), v138);
            *(float32x4_t *)(v27 + j) = v100;
            float32x4_t v101 = vmulq_f32(v100, v98);
            float32x4_t v149 = vmaxnmq_f32((float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v136, v101), (int8x16_t)vsubq_f32(v137, v101), v135), (float32x4_t)0);
            v144.i32[0] = logf(v149.f32[1]);
            v102.f32[0] = logf(v149.f32[0]);
            v102.i32[1] = v144.i32[0];
            float32x4_t v145 = v102;
            float v103 = logf(v149.f32[2]);
            float32x4_t v104 = v145;
            v104.f32[2] = v103;
            float32x4_t v146 = v104;
            float v105 = logf(v149.f32[3]);
            a9 = v140;
            float32x4_t v106 = v146;
            v106.f32[3] = v105;
            *(float32x4_t *)(v28 + j) = vmulq_n_f32(v106, v150);
          }
        }
        uint64_t v15 = v132 + 1;
      }
      while (v132 + 1 != v126);
      uint64_t v9 = v119 + 1;
    }
    while (v119 + 1 != v118);
  }
  return 0;
}

uint64_t peridot::Reflectivity::calcReflectivity(peridot::Reflectivity *this, peridot::PeridotDepth *a2, peridot::PeridotUserOutput *a3, const unint64_t (*a4)[14][3][9], const signed __int8 *a5, unsigned int a6, float a7, BOOL a8, const BOOL *a9, BOOL *a10)
{
  uint64_t v11 = 0;
  uint64_t v318 = *MEMORY[0x263EF8340];
  v12.i64[0] = *((void *)a3 + 10);
  v12.i32[1] = *((_DWORD *)a3 + 94);
  v12.i32[2] = *((_DWORD *)a3 + 168);
  v12.i32[3] = *((_DWORD *)a3 + 242);
  v13.i32[0] = *((_DWORD *)a3 + 316);
  v13.i32[1] = *((_DWORD *)a3 + 390);
  v13.i32[2] = *((_DWORD *)a3 + 464);
  v13.i32[3] = *((_DWORD *)a3 + 538);
  *(uint16x4_t *)v12.i8 = vshr_n_u16((uint16x4_t)vmovn_s32(v12), 0xDuLL);
  v12.u64[1] = (unint64_t)vshr_n_u16((uint16x4_t)vmovn_s32(v13), 0xDuLL);
  int8x8_t v311 = vand_s8(vmovn_s16((int16x8_t)v12), (int8x8_t)0x101010101010101);
  BOOL v312 = (*((_DWORD *)a3 + 612) & 0x2000) != 0;
  BOOL v313 = (*((_DWORD *)a3 + 686) & 0x2000) != 0;
  BOOL v314 = (*((_DWORD *)a3 + 760) & 0x2000) != 0;
  BOOL v315 = (*((_DWORD *)a3 + 834) & 0x2000) != 0;
  BOOL v316 = (*((_DWORD *)a3 + 908) & 0x2000) != 0;
  BOOL v317 = (*((_DWORD *)a3 + 982) & 0x2000) != 0;
  unint64_t v270 = (char *)this + 4916;
  unint64_t v269 = (char *)this + 4460;
  uint64_t v274 = a6;
  uint64_t v268 = (char *)this + 6788;
  uint64_t v267 = (char *)this + 6772;
  int v266 = (char *)this + 6116;
  uint64_t v265 = (char *)this + 6100;
  float v14 = 1.0 / a7;
  long long v15 = 0uLL;
  uint64_t result = 1;
  unint64_t v273 = a3;
  while (2)
  {
    uint64_t v17 = 0;
    uint64_t v19 = v265;
    uint64_t v18 = v266;
    unint64_t v20 = v267;
    uint64_t v21 = v268;
    while (2)
    {
      unint64_t v22 = (float *)((char *)a3 + 296 * v17);
      unint64_t v23 = &v22[21 * v11];
      float v24 = v23[1];
      if (v24 == 0.0 || v24 < *((float *)this + 1110))
      {
LABEL_4:
        v22[21 * v11 + 3] = 0.0;
        goto LABEL_5;
      }
      uint64_t v25 = 0;
      uint64_t v310 = 0;
      float v26 = *((float *)this + 1106);
      float v27 = v22[21 * v11 + 11];
      if (v27 > v26)
      {
        LOBYTE(v310) = 1;
        unint64_t v301 = 0;
        uint64_t v25 = 1;
      }
      float v28 = v22[21 * v11 + 12];
      if (v28 > v26)
      {
        BYTE1(v310) = 1;
        *(&v301 + v25++) = 1;
      }
      float v29 = v22[21 * v11 + 13];
      if (v29 > v26)
      {
        BYTE2(v310) = 1;
        *(&v301 + v25++) = 2;
      }
      float v30 = v22[21 * v11 + 14];
      if (v30 > v26)
      {
        BYTE3(v310) = 1;
        *(&v301 + v25++) = 3;
      }
      float v31 = v22[21 * v11 + 15];
      if (v31 <= v26)
      {
        int v32 = 0;
      }
      else
      {
        int v32 = 1;
        BYTE4(v310) = 1;
        *(&v301 + v25++) = 4;
      }
      float v33 = v22[21 * v11 + 16];
      if (v33 > v26)
      {
        BYTE5(v310) = 1;
        *(&v301 + v25++) = 5;
      }
      float v34 = v22[21 * v11 + 17];
      if (v34 > v26)
      {
        BYTE6(v310) = 1;
        *(&v301 + v25++) = 6;
      }
      float v35 = v22[21 * v11 + 18];
      if (v35 > v26)
      {
        HIBYTE(v310) = 1;
        *(&v301 + v25++) = 7;
      }
      else if (!v25)
      {
        if (v27 <= 0.0) {
          float v36 = 0.0;
        }
        else {
          float v36 = v27;
        }
        BOOL v37 = v28 > v36;
        unint64_t v38 = (unint64_t)v27;
        if (v27 > 0.0) {
          BOOL v37 = 1;
        }
        else {
          unint64_t v38 = v301;
        }
        if (v28 > v36)
        {
          unint64_t v38 = (unint64_t)v28;
          float v36 = v28;
        }
        if (v29 > v36)
        {
          unint64_t v38 = (unint64_t)v29;
          BOOL v37 = 1;
          float v36 = v29;
        }
        if (v30 > v36)
        {
          unint64_t v38 = (unint64_t)v30;
          BOOL v37 = 1;
          float v36 = v30;
        }
        if (v31 > v36)
        {
          unint64_t v38 = (unint64_t)v31;
          BOOL v37 = 1;
          float v36 = v31;
        }
        if (v33 <= v36) {
          float v39 = v36;
        }
        else {
          float v39 = v33;
        }
        BOOL v40 = v34 > v39;
        if (v33 > v36)
        {
          unint64_t v38 = (unint64_t)v33;
          BOOL v40 = 1;
        }
        if (v34 <= v39)
        {
          float v41 = v39;
        }
        else
        {
          unint64_t v38 = (unint64_t)v34;
          float v41 = v34;
        }
        unint64_t v42 = (unint64_t)v35;
        if (v35 > v41)
        {
          int v43 = 1;
        }
        else
        {
          unint64_t v42 = v38;
          int v43 = v40;
        }
        if (v35 > v41) {
          float v41 = v22[21 * v11 + 18];
        }
        unint64_t v301 = v42;
        if (v41 == 0.0) {
          goto LABEL_4;
        }
        uint64_t v25 = v43 | v37;
      }
      BOOL v44 = v31 > v26 && v28 > v26;
      uint64_t v45 = v25;
      if (v44)
      {
        if (!v25) {
          goto LABEL_64;
        }
        unint64_t v46 = v25 - 1;
        uint64_t v45 = v25;
        if (v301 != 4) {
          goto LABEL_71;
        }
        if (v25 == 1)
        {
LABEL_64:
          uint64_t v45 = 0;
          goto LABEL_159;
        }
        if (v46 >= 4)
        {
          unint64_t v47 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          BOOL v48 = &v303;
          unint64_t v49 = v46 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            long long v50 = *(_OWORD *)(v48 + 1);
            *((_OWORD *)v48 - 1) = *(_OWORD *)(v48 - 1);
            *(_OWORD *)BOOL v48 = v50;
            v48 += 4;
            v49 -= 4;
          }
          while (v49);
          if (v46 == v47) {
            goto LABEL_70;
          }
        }
        else
        {
          unint64_t v47 = 0;
        }
        uint64_t v51 = &v302 + v47;
        unint64_t v52 = ~v47 + v25;
        do
        {
          *(v51 - 1) = *v51;
          ++v51;
          --v52;
        }
        while (v52);
LABEL_70:
        uint64_t v45 = v25 - 1;
LABEL_71:
        if (v25 == 1) {
          goto LABEL_159;
        }
        if (v302 != 4)
        {
LABEL_92:
          if (v25 == 2) {
            goto LABEL_159;
          }
          if (v303 == 4)
          {
            --v45;
            if (v25 == 3) {
              goto LABEL_159;
            }
            if (v46 < 3)
            {
              if (v305 == 4) {
                uint64_t v45 = v45 - (v304 == 4) - 1;
              }
              else {
                v45 -= v304 == 4;
              }
              goto LABEL_78;
            }
            uint64_t v63 = v25 - 3;
            if ((unint64_t)(v25 - 3) < 4)
            {
              uint64_t v64 = 2;
              goto LABEL_102;
            }
            unint64_t v65 = v63 & 0xFFFFFFFFFFFFFFFCLL;
            BOOL v66 = (long long *)&v306;
            unint64_t v67 = v63 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              long long v68 = *v66;
              *(long long *)((char *)v66 - 24) = *(v66 - 1);
              *(long long *)((char *)v66 - 8) = v68;
              v66 += 2;
              v67 -= 4;
            }
            while (v67);
            if (v63 != v65)
            {
              uint64_t v64 = v65 | 2;
LABEL_102:
              uint64_t v69 = &v302 + v64;
              uint64_t v70 = ~v64 + v25;
              do
              {
                *(v69 - 1) = *v69;
                ++v69;
                --v70;
              }
              while (v70);
            }
          }
          if (v25 == 3) {
            goto LABEL_159;
          }
          if (v304 != 4) {
            goto LABEL_128;
          }
          --v45;
          if (v25 == 4) {
            goto LABEL_159;
          }
          if (v46 < 4)
          {
LABEL_129:
            if (v305 != 4) {
              goto LABEL_158;
            }
            --v45;
            if (v25 == 5) {
              goto LABEL_159;
            }
            if (v46 < 5)
            {
LABEL_78:
              if (v306 != 4) {
                goto LABEL_116;
              }
              --v45;
              if (v25 == 6) {
                goto LABEL_159;
              }
              if (v46 < 6)
              {
LABEL_117:
                if (v307 != 4) {
                  goto LABEL_140;
                }
                --v45;
                if (v25 == 7) {
                  goto LABEL_159;
                }
                if (v46 < 7) {
                  goto LABEL_141;
                }
                uint64_t v79 = v25 - 7;
                if ((unint64_t)(v25 - 7) >= 4)
                {
                  unint64_t v88 = v79 & 0xFFFFFFFFFFFFFFFCLL;
                  float32x4_t v89 = (long long *)&v310;
                  unint64_t v90 = v79 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    long long v91 = *v89;
                    *(long long *)((char *)v89 - 24) = *(v89 - 1);
                    *(long long *)((char *)v89 - 8) = v91;
                    v89 += 2;
                    v90 -= 4;
                  }
                  while (v90);
                  if (v79 == v88)
                  {
LABEL_140:
                    if (v25 == 7) {
                      goto LABEL_159;
                    }
LABEL_141:
                    if (v308 != 4) {
                      goto LABEL_159;
                    }
                    --v45;
                    if (v46 < 8) {
                      goto LABEL_159;
                    }
                    uint64_t v94 = v25 - 8;
                    if ((unint64_t)(v25 - 8) >= 4)
                    {
                      unint64_t v96 = v94 & 0xFFFFFFFFFFFFFFFCLL;
                      float32x4_t v97 = &v311;
                      unint64_t v98 = v94 & 0xFFFFFFFFFFFFFFFCLL;
                      do
                      {
                        long long v99 = *(_OWORD *)v97->i8;
                        *(_OWORD *)v97[-3].i8 = *(_OWORD *)v97[-2].i8;
                        *(_OWORD *)v97[-1].i8 = v99;
                        v97 += 4;
                        v98 -= 4;
                      }
                      while (v98);
                      if (v94 == v96) {
                        goto LABEL_159;
                      }
                      uint64_t v95 = v96 + 7;
                    }
                    else
                    {
                      uint64_t v95 = 7;
                    }
                    float32x4_t v100 = &v302 + v95;
                    uint64_t v101 = ~v95 + v25;
                    do
                    {
                      *(v100 - 1) = *v100;
                      ++v100;
                      --v101;
                    }
                    while (v101);
LABEL_159:
                    int v32 = 0;
                    BYTE4(v310) = 0;
                    goto LABEL_160;
                  }
                  uint64_t v80 = v88 + 6;
                }
                else
                {
                  uint64_t v80 = 6;
                }
                float32x4_t v92 = &v302 + v80;
                uint64_t v93 = ~v80 + v25;
                do
                {
                  *(v92 - 1) = *v92;
                  ++v92;
                  --v93;
                }
                while (v93);
                goto LABEL_140;
              }
              uint64_t v53 = v25 - 6;
              if ((unint64_t)(v25 - 6) >= 4)
              {
                unint64_t v73 = v53 & 0xFFFFFFFFFFFFFFFCLL;
                BOOL v74 = (long long *)&v309;
                unint64_t v75 = v53 & 0xFFFFFFFFFFFFFFFCLL;
                do
                {
                  long long v76 = *v74;
                  *(long long *)((char *)v74 - 24) = *(v74 - 1);
                  *(long long *)((char *)v74 - 8) = v76;
                  v74 += 2;
                  v75 -= 4;
                }
                while (v75);
                if (v53 == v73)
                {
LABEL_116:
                  if (v25 == 6) {
                    goto LABEL_159;
                  }
                  goto LABEL_117;
                }
                uint64_t v54 = v73 + 5;
              }
              else
              {
                uint64_t v54 = 5;
              }
              uint64_t v77 = &v302 + v54;
              uint64_t v78 = ~v54 + v25;
              do
              {
                *(v77 - 1) = *v77;
                ++v77;
                --v78;
              }
              while (v78);
              goto LABEL_116;
            }
            uint64_t v86 = v25 - 5;
            if ((unint64_t)(v25 - 5) >= 4)
            {
              unint64_t v102 = v86 & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v103 = v86 & 0xFFFFFFFFFFFFFFFCLL;
              float32x4_t v104 = (long long *)&v308;
              do
              {
                long long v105 = *v104;
                *(long long *)((char *)v104 - 24) = *(v104 - 1);
                *(long long *)((char *)v104 - 8) = v105;
                v104 += 2;
                v103 -= 4;
              }
              while (v103);
              if (v86 == v102)
              {
LABEL_158:
                if (v25 == 5) {
                  goto LABEL_159;
                }
                goto LABEL_78;
              }
              uint64_t v87 = v102 + 4;
            }
            else
            {
              uint64_t v87 = 4;
            }
            float32x4_t v106 = &v302 + v87;
            uint64_t v107 = ~v87 + v25;
            do
            {
              *(v106 - 1) = *v106;
              ++v106;
              --v107;
            }
            while (v107);
            goto LABEL_158;
          }
          uint64_t v71 = v25 - 4;
          if ((unint64_t)(v25 - 4) >= 4)
          {
            float32x4_t v81 = (long long *)&v307;
            unint64_t v82 = v71 & 0xFFFFFFFFFFFFFFFCLL;
            do
            {
              long long v83 = *v81;
              *(long long *)((char *)v81 - 24) = *(v81 - 1);
              *(long long *)((char *)v81 - 8) = v83;
              v81 += 2;
              v82 -= 4;
            }
            while (v82);
            if (v71 == (v71 & 0xFFFFFFFFFFFFFFFCLL))
            {
LABEL_128:
              if (v25 == 4) {
                goto LABEL_159;
              }
              goto LABEL_129;
            }
            uint64_t v72 = v71 | 3;
          }
          else
          {
            uint64_t v72 = 3;
          }
          BOOL v84 = &v302 + v72;
          uint64_t v85 = ~v72 + v25;
          do
          {
            *(v84 - 1) = *v84;
            ++v84;
            --v85;
          }
          while (v85);
          goto LABEL_128;
        }
        if (v25 == 2)
        {
          --v45;
          goto LABEL_159;
        }
        uint64_t v55 = v25 - 2;
        if ((unint64_t)(v25 - 2) >= 4)
        {
          unint64_t v57 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          BOOL v58 = (long long *)&v305;
          unint64_t v59 = v55 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *v58;
            *(long long *)((char *)v58 - 24) = *(v58 - 1);
            *(long long *)((char *)v58 - 8) = v60;
            v58 += 2;
            v59 -= 4;
          }
          while (v59);
          if (v55 == v57) {
            goto LABEL_91;
          }
          uint64_t v56 = v57 | 1;
        }
        else
        {
          uint64_t v56 = 1;
        }
        uint64_t v61 = &v302 + v56;
        uint64_t v62 = ~v56 + v25;
        do
        {
          *(v61 - 1) = *v61;
          ++v61;
          --v62;
        }
        while (v62);
LABEL_91:
        --v45;
        goto LABEL_92;
      }
LABEL_160:
      long long v299 = v15;
      long long v300 = v15;
      int v298 = 2143289344;
      long long v296 = v15;
      long long v297 = v15;
      int v295 = 2143289344;
      long long v293 = v15;
      long long v294 = v15;
      long long v291 = v15;
      long long v292 = v15;
      if (v25)
      {
        if (v301 == 4 && v44)
        {
          uint64_t v109 = 0;
          if (v25 == 1) {
            goto LABEL_209;
          }
        }
        else
        {
          float v110 = (void *)((char *)this + 64 * v301 + 8 * !a10[v17]);
          unint64_t v111 = v110[933];
          v290[0] = v110[931];
          v290[1] = v111;
          unint64_t v112 = v110[935];
          unint64_t v113 = v110[937];
          v290[2] = v112;
          v290[3] = v113;
          uint64_t v109 = 1;
          if (v25 == 1) {
            goto LABEL_209;
          }
        }
        if (v302 != 4 || !v44)
        {
          float v115 = (void *)((char *)this + 64 * v302 + 8 * !a10[v17]);
          float v116 = &v290[4 * v109];
          unint64_t v117 = v115[933];
          *float v116 = v115[931];
          v116[1] = v117;
          unint64_t v118 = v115[935];
          unint64_t v119 = v115[937];
          v116[2] = v118;
          v116[3] = v119;
          ++v109;
        }
        if (v25 != 2)
        {
          if (v303 != 4 || !v44)
          {
            uint64_t v121 = (void *)((char *)this + 64 * v303 + 8 * !a10[v17]);
            uint64_t v122 = &v290[4 * v109];
            unint64_t v123 = v121[933];
            *uint64_t v122 = v121[931];
            v122[1] = v123;
            unint64_t v124 = v121[935];
            unint64_t v125 = v121[937];
            v122[2] = v124;
            v122[3] = v125;
            ++v109;
          }
          if (v25 != 3)
          {
            if (v304 != 4 || !v44)
            {
              BOOL v127 = (void *)((char *)this + 64 * v304 + 8 * !a10[v17]);
              BOOL v128 = &v290[4 * v109];
              unint64_t v129 = v127[933];
              *BOOL v128 = v127[931];
              v128[1] = v129;
              unint64_t v130 = v127[935];
              unint64_t v131 = v127[937];
              v128[2] = v130;
              v128[3] = v131;
              ++v109;
            }
            if (v25 != 4)
            {
              if (v305 != 4 || !v44)
              {
                BOOL v133 = (void *)((char *)this + 64 * v305 + 8 * !a10[v17]);
                float32x4_t v134 = &v290[4 * v109];
                unint64_t v135 = v133[933];
                unint64_t *v134 = v133[931];
                v134[1] = v135;
                unint64_t v136 = v133[935];
                unint64_t v137 = v133[937];
                v134[2] = v136;
                v134[3] = v137;
                ++v109;
              }
              if (v25 != 5)
              {
                if (v306 != 4 || !v44)
                {
                  float32x4_t v139 = (void *)((char *)this + 64 * v306 + 8 * !a10[v17]);
                  float v140 = &v290[4 * v109];
                  unint64_t v141 = v139[933];
                  *float v140 = v139[931];
                  v140[1] = v141;
                  unint64_t v142 = v139[935];
                  unint64_t v143 = v139[937];
                  v140[2] = v142;
                  v140[3] = v143;
                  ++v109;
                }
                if (v25 != 6)
                {
                  if (v307 != 4 || !v44)
                  {
                    float32x4_t v145 = (void *)((char *)this + 64 * v307 + 8 * !a10[v17]);
                    float32x4_t v146 = &v290[4 * v109];
                    unint64_t v147 = v145[933];
                    *float32x4_t v146 = v145[931];
                    v146[1] = v147;
                    unint64_t v148 = v145[935];
                    unint64_t v149 = v145[937];
                    v146[2] = v148;
                    v146[3] = v149;
                    ++v109;
                  }
                  if (v25 != 7 && (v308 != 4 || !v44))
                  {
                    float v151 = (void *)((char *)this + 64 * v308 + 8 * !a10[v17]);
                    int64x2_t v152 = &v290[4 * v109];
                    unint64_t v153 = v151[933];
                    *int64x2_t v152 = v151[931];
                    v152[1] = v153;
                    unint64_t v154 = v151[935];
                    unint64_t v155 = v151[937];
                    v152[2] = v154;
                    v152[3] = v155;
                  }
                }
              }
            }
          }
        }
      }
LABEL_209:
      if (v33 > v26 && v311.i8[v17])
      {
        uint64_t v156 = v25 + 1;
        int64x2_t v157 = v290;
        float v158 = &v301;
        do
        {
          uint64_t v159 = *v158++;
          if (v159 == 5)
          {
            *(_OWORD *)int64x2_t v157 = xmmword_2591211C0;
            *((_OWORD *)v157 + 1) = unk_2591211D0;
          }
          v157 += 4;
          --v156;
        }
        while (v156);
      }
      float v160 = *v23;
      BOOL v161 = v11;
      if (v11 == 2)
      {
        float v162 = vabds_f32(v160, *v22);
        float v163 = vabds_f32(v160, v22[21]);
        float v164 = v162 <= v163 ? v162 : v163;
        if (v164 >= *((float *)this + 2034) || (BOOL v161 = v162 > v163, v22[21 * v161 + 1] <= 0.0))
        {
          v22[45] = 0.0;
          goto LABEL_346;
        }
      }
      int v275 = v32;
      BOOL v276 = v44;
      float v277 = v35;
      float v278 = v34;
      float v279 = v30;
      int64x2_t v165 = (char *)&v22[21 * v161];
      float v166 = *((float *)v165 + 8);
      float v167 = *((float *)v165 + 9);
      unint64_t v168 = a5[v17];
      unint64_t v169 = a5[v17 + 14];
      float v170 = *((float *)this + 8 * v17 + v274 + 994);
      float v171 = *((float *)this + 1112);
      float v172 = 1.0;
      if (v160 < v171)
      {
        v289[0] = *((float *)this + 1111);
        v289[1] = v171;
        v288[0] = *((float *)this + 1113);
        v288[1] = 1.0;
        v285[1] = v289;
        v285[2] = 0x200000001;
        char v286 = 0;
        uint64_t v287 = 8;
        uint64_t v284 = 8;
        v285[0] = &unk_270717688;
        *(void *)&long long v283 = 0x200000001;
        BYTE8(v283) = 0;
        *(void *)&long long v282 = &unk_270717688;
        *((void *)&v282 + 1) = v288;
        float v172 = (float)((float)((float)(v160 - v289[0]) * (float)(1.0 - v288[0])) / (float)(v171 - v289[0])) + v288[0];
      }
      peridot::PFactorCalculator::calculatePFactor(this, 84.0 - v166, v167, v168, v169, sqrtf((float)(*((float *)this + 1114) * *((float *)this + 1114))+ (float)((float)(v172 * v170) * (float)(v172 * v170))), v290, v45, (float *)v285);
      uint64_t v173 = 0;
      uint64_t v174 = 0;
      long long v15 = 0uLL;
      long long v282 = 0u;
      long long v283 = 0u;
      do
      {
        if (*((unsigned char *)&v310 + v173))
        {
          int64x2_t v176 = &v290[4 * v174];
          uint64_t v177 = -3;
          if ((unint64_t)(v173 - 7) < 0xFFFFFFFFFFFFFFFELL) {
            uint64_t v177 = -1;
          }
          unint64_t v178 = v176[1];
          unint64_t v179 = *v176 + v177;
          unint64_t v180 = v176[3];
          unint64_t v181 = v176[2] + v179 - 1;
          if (v181 >= 3) {
            unint64_t v181 = 3;
          }
          unint64_t v182 = v180 + v178 - 1 - 1;
          if (v182 >= 2) {
            unint64_t v182 = 2;
          }
          float v183 = 0.0;
          BOOL v184 = v179 > v181 || v178 - 1 > v182;
          float v185 = 0.0;
          if (!v184)
          {
            unint64_t v186 = v182 - v178;
            unint64_t v187 = v182 - v178 + 2;
            unint64_t v188 = v187 & 0xFFFFFFFFFFFFFFF8;
            __asm { FMOV            V0.4S, #1.0 }
            if ((unint64_t)(v173 - 7) >= 0xFFFFFFFFFFFFFFFELL)
            {
              if (v187 >= 8)
              {
                uint64_t v215 = 12 * v179 + 4 * v178;
                uint64_t v216 = v186 - v188 + 2;
                unint64_t v217 = (float *)&v20[32 * (v187 >> 3) + v215];
                float v185 = 0.0;
                unint64_t v218 = v21;
                float v183 = 0.0;
                do
                {
                  float32x4_t v219 = 0uLL;
                  float32x4_t v220 = (float32x4_t)LODWORD(v185);
                  float32x4_t v221 = (float32x4_t)LODWORD(v183);
                  unint64_t v222 = v218;
                  unint64_t v223 = v187 & 0xFFFFFFFFFFFFFFF8;
                  float32x4_t v224 = 0uLL;
                  do
                  {
                    float32x4_t v221 = vaddq_f32(*(float32x4_t *)&v222[v215 - 16], v221);
                    float32x4_t v224 = vaddq_f32(*(float32x4_t *)&v222[v215], v224);
                    float32x4_t v220 = vaddq_f32(v220, _Q0);
                    float32x4_t v219 = vaddq_f32(v219, _Q0);
                    v222 += 32;
                    v223 -= 8;
                  }
                  while (v223);
                  float32x4_t v225 = vaddq_f32(v224, v221);
                  float v183 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v225, v225));
                  float32x4_t v226 = vaddq_f32(v219, v220);
                  float v185 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v226, v226));
                  uint64_t v227 = v217;
                  uint64_t v228 = v216;
                  if (v187 != v188)
                  {
                    do
                    {
                      float v229 = *v227++;
                      float v183 = v229 + v183;
                      float v185 = v185 + 1.0;
                      --v228;
                    }
                    while (v228);
                  }
                  v218 += 12;
                  v217 += 3;
                  _ZF = v179++ == v181;
                }
                while (!_ZF);
              }
              else
              {
                uint64_t v197 = 12 * v179 + 4 * v178;
                float v185 = 0.0;
                float v183 = 0.0;
                do
                {
                  uint64_t v198 = v197;
                  unint64_t v199 = v187;
                  do
                  {
                    float v183 = *(float *)&v20[v198] + v183;
                    float v185 = v185 + 1.0;
                    v198 += 4;
                    --v199;
                  }
                  while (v199);
                  v197 += 12;
                  _ZF = v179++ == v181;
                }
                while (!_ZF);
              }
            }
            else if (v187 >= 8)
            {
              uint64_t v200 = 12 * v179 + 4 * v178;
              uint64_t v201 = v186 - v188 + 2;
              unint64_t v202 = (float *)&v19[32 * (v187 >> 3) + v200];
              float v185 = 0.0;
              long long v203 = v18;
              float v183 = 0.0;
              do
              {
                float32x4_t v204 = 0uLL;
                float32x4_t v205 = (float32x4_t)LODWORD(v185);
                float32x4_t v206 = (float32x4_t)LODWORD(v183);
                unint64_t v207 = v203;
                unint64_t v208 = v187 & 0xFFFFFFFFFFFFFFF8;
                float32x4_t v209 = 0uLL;
                do
                {
                  float32x4_t v206 = vaddq_f32(*(float32x4_t *)&v207[v200 - 16], v206);
                  float32x4_t v209 = vaddq_f32(*(float32x4_t *)&v207[v200], v209);
                  float32x4_t v205 = vaddq_f32(v205, _Q0);
                  float32x4_t v204 = vaddq_f32(v204, _Q0);
                  v207 += 32;
                  v208 -= 8;
                }
                while (v208);
                float32x4_t v210 = vaddq_f32(v209, v206);
                float v183 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v210, v210));
                float32x4_t v211 = vaddq_f32(v204, v205);
                float v185 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v211, v211));
                if (v187 != v188)
                {
                  uint64_t v212 = v202;
                  uint64_t v213 = v201;
                  do
                  {
                    float v214 = *v212++;
                    float v183 = v214 + v183;
                    float v185 = v185 + 1.0;
                    --v213;
                  }
                  while (v213);
                }
                v203 += 12;
                v202 += 3;
                _ZF = v179++ == v181;
              }
              while (!_ZF);
            }
            else
            {
              uint64_t v194 = 12 * v179 + 4 * v178;
              float v185 = 0.0;
              float v183 = 0.0;
              do
              {
                uint64_t v195 = v194;
                unint64_t v196 = v187;
                do
                {
                  float v183 = *(float *)&v19[v195] + v183;
                  float v185 = v185 + 1.0;
                  v195 += 4;
                  --v196;
                }
                while (v196);
                v194 += 12;
                _ZF = v179++ == v181;
              }
              while (!_ZF);
            }
          }
          float v175 = v183 / v185;
          if (v185 <= 0.0) {
            float v175 = 0.0;
          }
          *((float *)&v282 + v174++) = v175;
        }
        ++v173;
      }
      while (v173 != 8);
      if (v27 > v26)
      {
        LODWORD(v293) = v285[0];
        LODWORD(v291) = v282;
        uint64_t v230 = 1;
      }
      else
      {
        uint64_t v230 = 0;
      }
      uint64_t result = 1;
      int v231 = 0;
      if (v28 <= v26)
      {
        int v232 = 0;
        if (v29 <= v26) {
          goto LABEL_278;
        }
        goto LABEL_277;
      }
      int v232 = *((_DWORD *)v285 + v230);
      DWORD1(v293) = v232;
      int v231 = *(_DWORD *)((unint64_t)&v282 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v230 & 1)));
      DWORD1(v291) = v231;
      ++v230;
      if (v29 > v26)
      {
LABEL_277:
        DWORD2(v293) = *((_DWORD *)v285 + v230);
        DWORD2(v291) = *(_DWORD *)((unint64_t)&v282 & 0xFFFFFFFFFFFFFFF3 | (4 * (v230++ & 3)));
      }
LABEL_278:
      if (v279 <= v26)
      {
        if (!v275) {
          goto LABEL_281;
        }
        goto LABEL_280;
      }
      HIDWORD(v293) = *((_DWORD *)v285 + v230);
      HIDWORD(v291) = *((_DWORD *)&v282 + v230++);
      if (v275)
      {
LABEL_280:
        LODWORD(v294) = *((_DWORD *)v285 + v230);
        LODWORD(v292) = *((_DWORD *)&v282 + v230++);
      }
LABEL_281:
      if (v33 > v26)
      {
        DWORD1(v294) = *((_DWORD *)v285 + v230);
        DWORD1(v292) = *((_DWORD *)&v282 + v230++);
        if (v278 <= v26)
        {
LABEL_283:
          if (v276) {
            goto LABEL_284;
          }
LABEL_290:
          if (!v45)
          {
            float v235 = 0.0;
            goto LABEL_345;
          }
          goto LABEL_301;
        }
      }
      else if (v278 <= v26)
      {
        goto LABEL_283;
      }
      uint64_t v234 = 4 * v230;
      DWORD2(v294) = *(_DWORD *)((char *)v285 + v234);
      DWORD2(v292) = *(_DWORD *)((char *)&v282 + v234);
      if (!v276) {
        goto LABEL_290;
      }
LABEL_284:
      LODWORD(v294) = v232;
      LODWORD(v292) = v231;
      BYTE4(v310) = 1;
      if (v27 > v26)
      {
        unint64_t v301 = 0;
        uint64_t v233 = 1;
      }
      else
      {
        uint64_t v233 = 0;
      }
      *(&v301 + v233) = 1;
      uint64_t v236 = v233 + 1;
      if (v29 > v26)
      {
        *(&v301 + v236) = 2;
        uint64_t v236 = v233 | 2;
      }
      if (v279 > v26) {
        *(&v301 + v236++) = 3;
      }
      *(&v301 + v236) = 4;
      uint64_t v45 = v236 + 1;
      if (v33 > v26)
      {
        *(&v301 + v45) = 5;
        uint64_t v45 = v236 + 2;
        if (v278 <= v26)
        {
LABEL_299:
          if (v277 <= v26) {
            goto LABEL_301;
          }
          goto LABEL_300;
        }
      }
      else if (v278 <= v26)
      {
        goto LABEL_299;
      }
      *(&v301 + v45++) = 6;
      if (v277 > v26) {
LABEL_300:
      }
        *(&v301 + v45++) = 7;
LABEL_301:
      int8x8_t v237 = *(int8x8_t *)((char *)this + 8104);
      if (!*(void *)&v237) {
LABEL_351:
      }
        std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
      uint64_t v238 = 0;
      uint8x8_t v239 = (uint8x8_t)vcnt_s8(v237);
      v239.i16[0] = vaddlv_u8(v239);
      unint64_t v240 = v239.u32[0];
      uint64_t v241 = *(void *)&v237 - 1;
      uint64_t v242 = (char *)a2 + 192 * v17;
      uint64_t v243 = *((void *)this + 1012);
      while (2)
      {
        unint64_t v244 = *(&v301 + v238);
        if (v240 > 1)
        {
          unint64_t v245 = *(&v301 + v238);
          if (*(void *)&v237 <= v244) {
            unint64_t v245 = v244 % *(void *)&v237;
          }
        }
        else
        {
          unint64_t v245 = v241 & v244;
        }
        unint64_t v246 = *(uint64_t ***)(v243 + 8 * v245);
        if (!v246) {
          goto LABEL_351;
        }
        uint64_t v247 = *v246;
        if (!v247) {
          goto LABEL_351;
        }
        float v248 = *((float *)&v293 + v244);
        if (v240 < 2)
        {
          while (1)
          {
            uint64_t v249 = v247[1];
            if (v249 == v244)
            {
              if (v247[2] == v244) {
                goto LABEL_317;
              }
            }
            else if ((v249 & v241) != v245)
            {
              goto LABEL_351;
            }
            uint64_t v247 = (uint64_t *)*v247;
            if (!v247) {
              goto LABEL_351;
            }
          }
        }
        while (1)
        {
          unint64_t v251 = v247[1];
          if (v251 == v244) {
            break;
          }
          if (v251 >= *(void *)&v237) {
            v251 %= *(void *)&v237;
          }
          if (v251 != v245) {
            goto LABEL_351;
          }
LABEL_320:
          uint64_t v247 = (uint64_t *)*v247;
          if (!v247) {
            goto LABEL_351;
          }
        }
        if (v247[2] != v244) {
          goto LABEL_320;
        }
LABEL_317:
        uint64_t v250 = (void *)((char *)a2 + 192 * v17);
        switch(*((_DWORD *)v247 + 6))
        {
          case 0:
            goto LABEL_329;
          case 1:
            uint64_t v250 = v242 + 64;
            goto LABEL_329;
          case 2:
            uint64_t v250 = v242 + 32;
            goto LABEL_329;
          case 3:
            uint64_t v250 = v242 + 96;
            goto LABEL_329;
          case 4:
            uint64_t v250 = v242 + 128;
LABEL_329:
            unint64_t v252 = *v250 + 80 * (*a4)[v17][v11][v244];
            float v253 = *(float *)(v252 + 12) * (float)*((unint64_t *)this + v244 + 1003);
            float v254 = *(float *)(v252 + 16) * 149852322.0;
            break;
          default:
            float v254 = 0.0;
            float v253 = 0.0;
            break;
        }
        if (v244 - 5 >= 2) {
          long long v255 = (float *)&v270[32 * v17 + 4 * v274];
        }
        else {
          long long v255 = (float *)((char *)this + 32 * v17 + 4 * v274 + 5364);
        }
        float v256 = *v255;
        if (*((float *)this + 1107) > v248 && (v253 < *((float *)this + 1109) || *((float *)this + 1108) > v248))
        {
          *(&v295 + v238) = 2143289344;
          *(&v298 + v238) = 2143289344;
        }
        else
        {
          float v257 = *(float *)&v269[32 * v17 + 4 * v274];
          float v258 = v253 / *((float *)&v291 + v244);
          *((float *)&v298 + v238) = v258;
          float v259 = (float)((float)((float)(v254 * v254) * v257) * v258) / (float)(v256 * v248);
          *((float *)&v295 + v238) = v259;
          if (a9[v244]) {
            *((float *)&v295 + v238) = v259 * v14;
          }
        }
        if (++v238 != v45) {
          continue;
        }
        break;
      }
      uint64_t v260 = 0;
      uint64_t result = 1;
      do
        ++v260;
      while (v45 != v260);
      float v261 = 0.0;
      float v262 = (float *)&v298;
      long long v263 = (float *)&v295;
      float v264 = 0.0;
      do
      {
        float v261 = v261 + (float)(*v262 * *v263);
        float v264 = *v262++ + v264;
        ++v263;
        --v45;
      }
      while (v45);
      float v235 = 0.0;
      if (v264 != 0.0) {
        float v235 = v261 / v264;
      }
LABEL_345:
      v22[21 * v11 + 3] = v235;
LABEL_346:
      a3 = v273;
LABEL_5:
      ++v17;
      v21 += 48;
      v20 += 48;
      v18 += 48;
      v19 += 48;
      if (v17 != 14) {
        continue;
      }
      break;
    }
    if (++v11 != 3) {
      continue;
    }
    return result;
  }
}

void peridot::PFactorCalculator::calculatePFactor(peridot::PFactorCalculator *this, float a2, float a3, unint64_t a4, unint64_t a5, float a6, const unint64_t *a7, uint64_t a8, float *a9)
{
  uint64_t v10 = a8;
  float v11 = (float)a4 - a2;
  float v12 = (float)a5 - a3;
  if (a8)
  {
    float v14 = v11 + -2.0;
    float v15 = v12 + -2.0;
    uint64_t v16 = a7 + 2;
    float v17 = 1.0 / a6;
    do
    {
      float v18 = v14 + (float)*(v16 - 1);
      float v19 = v15 + (float)*(v16 - 2);
      unint64_t v21 = *v16;
      unint64_t v20 = v16[1];
      v16 += 4;
      float v22 = v18 * v17;
      float v23 = (float)(v18 + (float)v20) * v17;
      float v24 = v19 * v17;
      float v25 = (float)(v19 + (float)v21) * v17;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      peridot::PFactorCalculator::G0((float *)this, v23, v25, (float *)&v28 + 1);
      peridot::PFactorCalculator::G0((float *)this, v22, v24, (float *)&v28);
      peridot::PFactorCalculator::G0((float *)this, v22, v25, (float *)&v27 + 1);
      peridot::PFactorCalculator::G0((float *)this, v23, v24, (float *)&v27);
      float v26 = fmax((float)((float)(*(float *)&v28 + *((float *)&v28 + 1)) - (float)(*((float *)&v27 + 1) + *(float *)&v27)), 0.0);
      *a9++ = v26;
      --v10;
    }
    while (v10);
  }
}

float *peridot::PFactorCalculator::G0(float *this, float a2, float a3, float *a4)
{
  if (a2 < 0.0)
  {
    a2 = -a2;
LABEL_5:
    this = (float *)peridot::PFactorCalculator::G0((peridot::PFactorCalculator *)this, a2, a3, a4);
    float v5 = -*a4;
    goto LABEL_25;
  }
  if (a3 < 0.0)
  {
    a3 = -a3;
    goto LABEL_5;
  }
  float v7 = *this;
  float v6 = this[1];
  float v8 = fminf(a2, v6);
  float v9 = fminf(a3, v6);
  float v10 = 1.0 / *this;
  unint64_t v11 = vcvtms_u32_f32(v8 * v10);
  float v12 = floorf(v9 * v10);
  unint64_t v13 = vcvtms_u32_f32(v9 * v10);
  float v14 = v8 - (float)(*this * floorf(v8 * v10));
  if (*this >= v14) {
    float v15 = v14;
  }
  else {
    float v15 = *this;
  }
  if (v14 < 0.0) {
    float v15 = 0.0;
  }
  float v16 = v9 - (float)(v7 * v12);
  if (v7 >= v16) {
    float v17 = v16;
  }
  else {
    float v17 = *this;
  }
  if (v16 >= 0.0) {
    float v18 = v17;
  }
  else {
    float v18 = 0.0;
  }
  unint64_t v19 = vcvtas_u32_f32(v6 * v10);
  if (v11 == v19) {
    float v20 = *this;
  }
  else {
    float v20 = v15;
  }
  if (v11 == v19) {
    LODWORD(v11) = v19 - 1;
  }
  if (v13 == v19)
  {
    float v18 = *this;
    LODWORD(v13) = v19 - 1;
  }
  float v21 = v20 * v10;
  int v22 = v19 + 1;
  unsigned int v23 = v11 + v13 * v22;
  float v24 = this[31 * (v23 % 0x1F) + 2 + v23 / 0x1F];
  unsigned int v25 = v23 + v22;
  float v26 = v21 * this[31 * ((v23 + 1) % 0x1F) + 2 + (v23 + 1) / 0x1F];
  float v5 = (float)(v26 + (float)((float)(1.0 - v21) * v24))
     + (float)((float)((float)((float)((float)(v21 * this[31 * ((v25 + 1) % 0x1F) + 2 + (v25 + 1) / 0x1F])
                                     + (float)((float)(1.0 - v21) * this[31 * (v25 % 0x1F) + 2 + v25 / 0x1F]))
                             - (float)(v26 + (float)((float)(1.0 - v21) * v24)))
                     * v18)
             * v10);
LABEL_25:
  *a4 = v5;
  return this;
}

void peridot::PeridotAlgo::Impl::processBank_MPDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t **a9, uint64_t **a10, uint64_t a11, unsigned __int8 a12, int a13)
{
  bzero(v15, 0x4CCuLL);
  peridot::PeridotDXP::refPixelDetectorEstimator_MPDC(a1 + 182032 * a12 + 403488, a5, a9, a10, a13);
}

void sub_25901D838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  peridot::PeridotSpotRefDepth::~PeridotSpotRefDepth((peridot::PeridotSpotRefDepth *)va);
  _Unwind_Resume(a1);
}

void peridot::PeridotAlgo::Impl::runBankWithT0_MPDC(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, float *a11, uint64_t a12, uint64_t a13, uint64_t a14, peridot::PeridotDepth *a15)
{
  uint64_t v15 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v33 = v16;
  uint64_t v34 = v17;
  uint64_t v31 = v18;
  uint64_t v32 = v19;
  uint64_t v29 = v20;
  uint64_t v30 = v21;
  uint64_t v23 = v22;
  uint64_t v24 = v15;
  v35[2] = *MEMORY[0x263EF8340];
  uint64_t v25 = v15 + 182032 * a10;
  peridot::PeridotDXP::strayPeakUpdate((float *)(v25 + 403488), a11, v26, v27, v28);
  *(void *)((char *)v35 + 6) = 0;
  v35[0] = 0;
  peridot::PeridotDXP::run_MPDC(v25 + 403488, v23, v29, v30, v31, v32, v33, v34, (uint64_t)a11, (uint64_t)v35, v24 + 112 * a10 + 402552, a15);
}

uint64_t peridot::PeridotUserOutput::fusionOutput(uint64_t a1, uint64_t a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v12 = v11;
  uint64_t v389 = v13;
  uint64_t v383 = v14;
  int v388 = v15;
  int v17 = v16;
  uint64_t v19 = v18;
  int v398 = (peridot::PeridotUserOutput *)v10;
  uint64_t v20 = 0;
  *(void *)&v457[92] = *MEMORY[0x263EF8340];
  __asm { FMOV            V3.4S, #0.75 }
  float64x2_t v384 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  int v386 = v16;
  float32x4_t v385 = _Q3;
  unint64_t v387 = v18;
  uint64_t v394 = v11;
  do
  {
    double v26 = (char *)v398 + 296 * v20;
    v26[292] = v20;
    double v27 = (_DWORD *)(v389 + 4 * v20);
    *((_DWORD *)v26 + 68) = v27[4];
    *((_DWORD *)v26 + 69) = v27[60];
    *((_DWORD *)v26 + 70) = v27[18];
    *((_DWORD *)v26 + 71) = v27[32];
    float v400 = v26;
    *((_DWORD *)v26 + 72) = v27[46];
    int v393 = (float *)&v19[24 * v20];
    uint64_t v28 = *(void *)v393;
    uint64_t v29 = *((void *)v393 + 1);
    unint64_t v30 = (v29 - *(void *)v393) / 80;
    if (v29 == *(void *)v393)
    {
      unint64_t v32 = 0;
      if (!v17) {
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v31 = 0;
      if (v30 <= 1) {
        unint64_t v32 = 1;
      }
      else {
        unint64_t v32 = (v29 - *(void *)v393) / 80;
      }
      uint64_t v33 = v28 + 36;
      do
      {
        uint64_t v34 = 4 * v31;
        *(_DWORD *)&v455[v34] = *(_DWORD *)(v33 - 28);
        int v35 = *(_DWORD *)(v33 - 24);
        *(_DWORD *)&v453[v34 + 972] = *(_DWORD *)(v33 - 20);
        int v36 = *(_DWORD *)(v33 + 4);
        *(_DWORD *)&v453[v34 + 864] = *(_DWORD *)v33;
        *(_DWORD *)&v453[v34 + 756] = *(_DWORD *)(v33 - 32);
        *(_DWORD *)&v453[v34 + 648] = v35;
        *(_DWORD *)&v453[v34 + 540] = v36;
        uint64_t v37 = 8 * v31;
        *(void *)&v453[v37 + 324] = *(void *)(v33 + 12);
        *(void *)&v453[v37 + 108] = v31++;
        v33 += 80;
      }
      while (v32 != v31);
      if (!v17) {
        goto LABEL_18;
      }
    }
    unint64_t v38 = &v19[24 * v20];
    uint64_t v39 = v38[4];
    uint64_t v40 = v38[5] - v39;
    if (v40)
    {
      uint64_t v41 = 0;
      unint64_t v42 = v40 / 80;
      if (v42 <= 1) {
        unint64_t v42 = 1;
      }
      uint64_t v43 = v39 + 36;
      do
      {
        uint64_t v44 = 4 * v41;
        *(_DWORD *)&v455[4 * v32 + v44] = *(_DWORD *)(v43 - 28);
        int v45 = *(_DWORD *)(v43 - 24);
        *(_DWORD *)&v453[4 * v32 + 972 + v44] = *(_DWORD *)(v43 - 20);
        int v46 = *(_DWORD *)(v43 + 4);
        *(_DWORD *)&v453[4 * v32 + 864 + v44] = *(_DWORD *)v43;
        *(_DWORD *)&v453[4 * v32 + 756 + v44] = *(_DWORD *)(v43 - 32);
        *(_DWORD *)&v453[4 * v32 + 648 + v44] = v45;
        *(_DWORD *)&v453[4 * v32 + 540 + v44] = v46;
        uint64_t v47 = 8 * v41;
        *(void *)&v453[8 * v32 + 324 + v47] = *(void *)(v43 + 12);
        *(void *)&v453[8 * v32 + 108 + v47] = v41++;
        v43 += 80;
      }
      while (v42 != v41);
      v32 += v41;
    }
LABEL_18:
    BOOL v48 = &v19[24 * v20];
    uint64_t v49 = v48[8];
    int v392 = (float *)(v48 + 8);
    uint64_t v50 = v48[9];
    uint64_t v51 = v50 - v49;
    if (v50 != v49)
    {
      uint64_t v52 = 0;
      unint64_t v53 = v51 / 80;
      if (v53 <= 1) {
        unint64_t v53 = 1;
      }
      uint64_t v54 = v49 + 36;
      do
      {
        uint64_t v55 = 4 * v52;
        *(_DWORD *)&v455[4 * v32 + v55] = *(_DWORD *)(v54 - 28);
        int v56 = *(_DWORD *)(v54 - 24);
        *(_DWORD *)&v453[4 * v32 + 972 + v55] = *(_DWORD *)(v54 - 20);
        int v57 = *(_DWORD *)(v54 + 4);
        *(_DWORD *)&v453[4 * v32 + 864 + v55] = *(_DWORD *)v54;
        *(_DWORD *)&v453[4 * v32 + 756 + v55] = *(_DWORD *)(v54 - 32);
        *(_DWORD *)&v453[4 * v32 + 648 + v55] = v56;
        *(_DWORD *)&v453[4 * v32 + 540 + v55] = v57;
        uint64_t v58 = 8 * v52;
        *(void *)&v453[8 * v32 + 324 + v58] = *(void *)(v54 + 12);
        *(void *)&v453[8 * v32 + 108 + v58] = v52++;
        v54 += 80;
      }
      while (v53 != v52);
      v32 += v52;
    }
    if (v17)
    {
      unint64_t v59 = &v19[24 * v20];
      uint64_t v60 = v59[12];
      uint64_t v61 = v59[13] - v60;
      if (v61)
      {
        uint64_t v62 = 0;
        unint64_t v63 = v61 / 80;
        if (v63 <= 1) {
          unint64_t v63 = 1;
        }
        uint64_t v64 = v60 + 36;
        do
        {
          uint64_t v65 = 4 * v62;
          *(_DWORD *)&v455[4 * v32 + v65] = *(_DWORD *)(v64 - 28);
          int v66 = *(_DWORD *)(v64 - 24);
          *(_DWORD *)&v453[4 * v32 + 972 + v65] = *(_DWORD *)(v64 - 20);
          int v67 = *(_DWORD *)(v64 + 4);
          *(_DWORD *)&v453[4 * v32 + 864 + v65] = *(_DWORD *)v64;
          *(_DWORD *)&v453[4 * v32 + 756 + v65] = *(_DWORD *)(v64 - 32);
          *(_DWORD *)&v453[4 * v32 + 648 + v65] = v66;
          *(_DWORD *)&v453[4 * v32 + 540 + v65] = v67;
          uint64_t v68 = 8 * v62;
          *(void *)&v453[8 * v32 + 324 + v68] = *(void *)(v64 + 12);
          *(void *)&v453[8 * v32 + 108 + v68] = v62++;
          v64 += 80;
        }
        while (v63 != v62);
        v32 += v62;
      }
      uint64_t v69 = &v19[24 * v20];
      uint64_t v70 = v69[16];
      uint64_t v71 = v69[17] - v70;
      if (v71)
      {
        uint64_t v72 = 0;
        unint64_t v73 = v71 / 80;
        if (v73 <= 1) {
          unint64_t v73 = 1;
        }
        uint64_t v74 = v70 + 36;
        do
        {
          uint64_t v75 = 4 * v72;
          *(_DWORD *)&v455[4 * v32 + v75] = *(_DWORD *)(v74 - 28);
          int v76 = *(_DWORD *)(v74 - 24);
          *(_DWORD *)&v453[4 * v32 + 972 + v75] = *(_DWORD *)(v74 - 20);
          int v77 = *(_DWORD *)(v74 + 4);
          *(_DWORD *)&v453[4 * v32 + 864 + v75] = *(_DWORD *)v74;
          *(_DWORD *)&v453[4 * v32 + 756 + v75] = *(_DWORD *)(v74 - 32);
          *(_DWORD *)&v453[4 * v32 + 648 + v75] = v76;
          *(_DWORD *)&v453[4 * v32 + 540 + v75] = v77;
          uint64_t v78 = 8 * v72;
          *(void *)&v453[8 * v32 + 324 + v78] = *(void *)(v74 + 12);
          *(void *)&v453[8 * v32 + 108 + v78] = v72++;
          v74 += 80;
        }
        while (v73 != v72);
        v32 += v72;
      }
      uint64_t v79 = &v19[24 * v20];
      uint64_t v80 = v79[20];
      uint64_t v81 = v79[21] - v80;
      if (v81)
      {
        uint64_t v82 = 0;
        unint64_t v83 = v81 / 80;
        if (v83 <= 1) {
          unint64_t v83 = 1;
        }
        uint64_t v84 = v80 + 36;
        do
        {
          uint64_t v85 = 4 * v82;
          *(_DWORD *)&v455[4 * v32 + v85] = *(_DWORD *)(v84 - 28);
          int v86 = *(_DWORD *)(v84 - 24);
          *(_DWORD *)&v453[4 * v32 + 972 + v85] = *(_DWORD *)(v84 - 20);
          int v87 = *(_DWORD *)(v84 + 4);
          *(_DWORD *)&v453[4 * v32 + 864 + v85] = *(_DWORD *)v84;
          *(_DWORD *)&v453[4 * v32 + 756 + v85] = *(_DWORD *)(v84 - 32);
          *(_DWORD *)&v453[4 * v32 + 648 + v85] = v86;
          *(_DWORD *)&v453[4 * v32 + 540 + v85] = v87;
          uint64_t v88 = 8 * v82;
          *(void *)&v453[8 * v32 + 324 + v88] = *(void *)(v84 + 12);
          *(void *)&v453[8 * v32 + 108 + v88] = v82++;
          v84 += 80;
        }
        while (v83 != v82);
        v32 += v82;
      }
    }
    float32x4_t v89 = (const std::nothrow_t *)MEMORY[0x263F8C180];
    float v90 = v393[6];
    float v91 = *((float *)v398 + 1059);
    if (v388 && *(unsigned char *)(v383 + v20) || v90 > v91)
    {
      if (v32)
      {
        if (v32 > 7)
        {
          unint64_t v92 = v32 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v93 = (float32x4_t *)v457;
          unint64_t v94 = v32 & 0xFFFFFFFFFFFFFFF8;
          do
          {
            float32x4_t v95 = vmulq_f32(*v93, _Q3);
            v93[-1] = vmulq_f32(v93[-1], _Q3);
            *uint64_t v93 = v95;
            v93 += 2;
            v94 -= 8;
          }
          while (v94);
          if (v32 == v92) {
            goto LABEL_54;
          }
        }
        else
        {
          unint64_t v92 = 0;
        }
        unint64_t v96 = v32 - v92;
        float32x4_t v97 = (float *)&v455[4 * v92];
        do
        {
          *float32x4_t v97 = *v97 * 0.75;
          ++v97;
          --v96;
        }
        while (v96);
      }
LABEL_54:
      if (v29 != v28)
      {
        if (v30 <= 1) {
          unint64_t v30 = 1;
        }
        unint64_t v98 = (float *)(v49 + 8);
        long long v99 = (float *)(v19[24 * v20 + 4] + 8);
        float32x4_t v100 = (float *)(v28 + 8);
        do
        {
          *float32x4_t v100 = *v100 * 0.75;
          v100 += 20;
          float *v99 = *v99 * 0.75;
          v99 += 20;
          *unint64_t v98 = *v98 * 0.75;
          v98 += 20;
          --v30;
        }
        while (v30);
      }
      if (v17)
      {
        uint64_t v101 = v19[24 * v20 + 12];
        uint64_t v102 = v19[24 * v20 + 13] - v101;
        if (v102)
        {
          unint64_t v103 = v102 / 80;
          if (v103 <= 1) {
            unint64_t v103 = 1;
          }
          unint64_t v104 = 0;
          unint64_t v105 = v103 - 1;
          if (v103 <= 1) {
            goto LABEL_64;
          }
          BOOL v294 = !is_mul_ok(v105, 0x50uLL);
          if (v101 + 8 + 80 * v105 < v101 + 8) {
            goto LABEL_64;
          }
          if (v294) {
            goto LABEL_64;
          }
          unint64_t v104 = v103 & 0xFFFFFFFFFFFFFFFELL;
          int v295 = (float *)(v101 + 88);
          unint64_t v296 = v103 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            float v297 = *v295 * 0.75;
            *(v295 - 20) = *(v295 - 20) * 0.75;
            *int v295 = v297;
            v295 += 40;
            v296 -= 2;
          }
          while (v296);
          if (v103 != v104)
          {
LABEL_64:
            unint64_t v106 = v103 - v104;
            uint64_t v107 = (float *)(v101 + 80 * v104 + 8);
            do
            {
              *uint64_t v107 = *v107 * 0.75;
              v107 += 20;
              --v106;
            }
            while (v106);
          }
        }
        uint64_t v108 = v19[24 * v20 + 16];
        uint64_t v109 = v19[24 * v20 + 17] - v108;
        if (v109)
        {
          unint64_t v110 = v109 / 80;
          if (v110 <= 1) {
            unint64_t v110 = 1;
          }
          unint64_t v111 = 0;
          unint64_t v112 = v110 - 1;
          if (v110 <= 1) {
            goto LABEL_70;
          }
          BOOL v298 = !is_mul_ok(v112, 0x50uLL);
          if (v108 + 8 + 80 * v112 < v108 + 8) {
            goto LABEL_70;
          }
          if (v298) {
            goto LABEL_70;
          }
          unint64_t v111 = v110 & 0xFFFFFFFFFFFFFFFELL;
          long long v299 = (float *)(v108 + 88);
          unint64_t v300 = v110 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            float v301 = *v299 * 0.75;
            *(v299 - 20) = *(v299 - 20) * 0.75;
            *long long v299 = v301;
            v299 += 40;
            v300 -= 2;
          }
          while (v300);
          if (v110 != v111)
          {
LABEL_70:
            unint64_t v113 = v110 - v111;
            float v114 = (float *)(v108 + 80 * v111 + 8);
            do
            {
              *float v114 = *v114 * 0.75;
              v114 += 20;
              --v113;
            }
            while (v113);
          }
        }
        *(float *)(v19[24 * v20 + 20] + 8) = *(float *)(v19[24 * v20 + 20] + 8) * 0.75;
      }
    }
    uint64_t v396 = v20;
    if (!v32)
    {
      *(void *)&long long v427 = v455;
      float v116 = v435;
LABEL_108:
      std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>((char *)v435, v116, (uint64_t *)&v427, v32, 0, 0);
      goto LABEL_109;
    }
    if (v32 <= 3)
    {
      unint64_t v115 = 0;
LABEL_95:
      unint64_t v127 = v32 - v115;
      uint64_t v128 = 4 * v115;
      unint64_t v129 = &v455[4 * v115];
      unint64_t v130 = (float *)&v453[v128 + 972];
      do
      {
        if (*v130 < 3.0e-10) {
          *unint64_t v129 = 0;
        }
        ++v129;
        ++v130;
        --v127;
      }
      while (v127);
      goto LABEL_88;
    }
    unint64_t v115 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v117 = &v456;
    unint64_t v118 = (float32x2_t *)&v454;
    unint64_t v119 = v32 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v120 = (float64x2_t)vdupq_n_s64(0x3DF49DA7E361CE4CuLL);
      int32x2_t v121 = vmovn_s64(vcgtq_f64(v120, vcvtq_f64_f32(v118[-1])));
      if (v121.i8[0]) {
        *(v117 - 2) = 0;
      }
      if (v121.i8[4]) {
        *(v117 - 1) = 0;
      }
      int32x2_t v122 = vmovn_s64(vcgtq_f64(v120, vcvtq_f64_f32(*v118)));
      if (v122.i8[0]) {
        *unint64_t v117 = 0;
      }
      if (v122.i8[4]) {
        v117[1] = 0;
      }
      v118 += 2;
      v117 += 4;
      v119 -= 4;
    }
    while (v119);
    if (v32 != v115) {
      goto LABEL_95;
    }
LABEL_88:
    for (uint64_t i = 0; i != v32; ++i)
    {
      if (*(void *)&v453[8 * i + 324] == 12 && *(float *)&v453[4 * i + 972] < 4.65e-10) {
        *(_DWORD *)&v455[4 * i] = 0;
      }
    }
    unint64_t v124 = v435;
    float v116 = &v435[v32];
    unint64_t v125 = (v32 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    if (v125 < 3)
    {
      uint64_t v126 = 0;
      goto LABEL_103;
    }
    unint64_t v131 = v125 + 1;
    uint64_t v126 = (v125 + 1) & 0x3FFFFFFFFFFFFFFCLL;
    int64x2_t v132 = (int64x2_t)xmmword_2591200C0;
    BOOL v133 = (int64x2_t *)&v436;
    uint64_t v134 = v126;
    do
    {
      v133[-1] = v132;
      *BOOL v133 = vaddq_s64(v132, vdupq_n_s64(2uLL));
      int64x2_t v132 = vaddq_s64(v132, vdupq_n_s64(4uLL));
      v133 += 2;
      v134 -= 4;
    }
    while (v134);
    if (v131 != v126)
    {
      unint64_t v124 = &v435[v126];
      do
LABEL_103:
        *v124++ = v126++;
      while (v124 != v116);
    }
    *(void *)&long long v427 = v455;
    if ((uint64_t)v32 < 129) {
      goto LABEL_108;
    }
    unint64_t v135 = v32;
    while (1)
    {
      unint64_t v136 = (char *)operator new(8 * v135, v89);
      if (v136) {
        break;
      }
      BOOL v230 = v135 > 1;
      v135 >>= 1;
      if (!v230) {
        goto LABEL_108;
      }
    }
    float v151 = v136;
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>((char *)v435, &v435[v32], (uint64_t *)&v427, v32, v136, v135);
    operator delete(v151);
LABEL_109:
    uint64_t v137 = v396;
    float v390 = v90;
    if (v32)
    {
      for (uint64_t j = 0; j != v32; ++j)
      {
        uint64_t v139 = v435[j];
        unint64_t v140 = j;
        *(_DWORD *)&v453[v140 * 4] = *(_DWORD *)&v455[4 * v139];
        v452[v140] = *(float *)&v453[4 * v139 + 972];
        v451[v140] = *(float *)&v453[4 * v139 + 864];
        *(_DWORD *)&v450[v140 * 4] = *(_DWORD *)&v453[4 * v139 + 756];
        *(_DWORD *)&v449[v140 * 4] = *(_DWORD *)&v453[4 * v139 + 648];
        __dst[v140] = *(float *)&v453[4 * v139 + 540];
        v139 *= 8;
        uint64_t v141 = j;
        *(void *)&v446[v141 * 8] = *(void *)&v453[v139 + 324];
        v445[v141] = *(void *)&v453[v139 + 108];
      }
      uint64_t v142 = 0;
      float v143 = v451[0];
      do
      {
        if (v451[v142] > v143) {
          float v143 = v451[v142];
        }
        ++v142;
      }
      while (v32 != v142);
      bzero(v433, v32);
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      do
      {
        if (*(void *)&v446[8 * v144] == 20 && *(float *)&v453[4 * v144] > 0.5 && __dst[v144] >= 2.4)
        {
          float32x4_t v146 = v452;
          unint64_t v147 = (float *)v453;
          unint64_t v148 = v32;
          do
          {
            if (*v147 > 0.5 && vabds_f32(*v146, v452[v144]) < 6.67e-10) {
              ++v145;
            }
            ++v146;
            ++v147;
            --v148;
          }
          while (v148);
        }
        ++v144;
      }
      while (v144 != v32);
      if (v145 != 1) {
        goto LABEL_142;
      }
      if (v32 > 3)
      {
        unint64_t v149 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        int64x2_t v152 = (int64x2_t *)&v447;
        unint64_t v153 = &v434;
        unint64_t v154 = v32 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          int64x2_t v155 = v152[-1];
          if (vmovn_s64(vceqq_s64(v155, vdupq_n_s64(0x14uLL))).u8[0]) {
            *((unsigned char *)v153 - 3) = 1;
          }
          if (vmovn_s64(vceqq_s64(v155, vdupq_n_s64(0x14uLL))).i32[1]) {
            *((unsigned char *)v153 - 2) = 1;
          }
          int64x2_t v156 = *v152;
          if (vmovn_s64(vceqq_s64(*v152, vdupq_n_s64(0x14uLL))).u8[0]) {
            *((unsigned char *)v153 - 1) = 1;
          }
          if (vmovn_s64(vceqq_s64(v156, vdupq_n_s64(0x14uLL))).i32[1]) {
            *(unsigned char *)unint64_t v153 = 1;
          }
          unint64_t v153 = (uint64_t *)((char *)v153 + 4);
          v152 += 2;
          v154 -= 4;
        }
        while (v154);
        if (v32 == v149) {
          goto LABEL_142;
        }
      }
      else
      {
        unint64_t v149 = 0;
      }
      unint64_t v172 = v32 - v149;
      uint64_t v173 = &v433[v149];
      uint64_t v174 = (uint64_t *)&v446[8 * v149];
      do
      {
        uint64_t v175 = *v174++;
        if (v175 == 20) {
          unsigned char *v173 = 1;
        }
        ++v173;
        --v172;
      }
      while (v172);
LABEL_142:
      uint64_t v150 = 0;
      int64x2_t v157 = v445;
      if (v17)
      {
        float v158 = __dst;
        uint64_t v159 = v449;
        float v160 = v450;
        BOOL v161 = v451;
        float v162 = v453;
        float v163 = v433;
        float v164 = (uint64_t *)v446;
        int64x2_t v165 = v452;
        do
        {
          uint64_t v167 = *v164++;
          uint64_t v166 = v167;
          BOOL v168 = v167 == 20 && *v158 < 2.4;
          float v169 = *v165;
          if (*v165 != 0.0 && !v168 && !*v163)
          {
            uint64_t v170 = 4 * v150;
            *(_DWORD *)&__src[v170] = *v162;
            *(float *)&v443[v170] = v169;
            *(float *)&v442[v170] = *v161;
            *(_DWORD *)&v441[v170] = *v160;
            *(_DWORD *)&v440[v170] = *v159;
            *(float *)&v439[v170] = *v158;
            uint64_t v171 = 8 * v150;
            *(void *)&v438[v171] = v166;
            ++v150;
            *(void *)&v437[v171] = *v157;
          }
          ++v157;
          ++v158;
          ++v159;
          ++v160;
          ++v161;
          ++v162;
          ++v163;
          ++v165;
          --v32;
        }
        while (v32);
      }
      else
      {
        int64x2_t v176 = v446;
        uint64_t v177 = __dst;
        unint64_t v178 = v449;
        unint64_t v179 = v450;
        unint64_t v180 = v451;
        unint64_t v181 = v453;
        unint64_t v182 = v452;
        do
        {
          float v183 = *v182;
          if (*v182 != 0.0 && v183 >= 3.8e-10)
          {
            uint64_t v184 = 4 * v150;
            *(_DWORD *)&__src[v184] = *v181;
            *(float *)&v443[v184] = v183;
            *(float *)&v442[v184] = *v180;
            *(_DWORD *)&v441[v184] = *v179;
            *(_DWORD *)&v440[v184] = *v178;
            *(float *)&v439[v184] = *v177;
            uint64_t v185 = 8 * v150;
            *(void *)&v438[v185] = *v176;
            ++v150;
            *(void *)&v437[v185] = *v157;
          }
          ++v157;
          ++v176;
          ++v177;
          ++v178;
          ++v179;
          ++v180;
          ++v181;
          ++v182;
          --v32;
        }
        while (v32);
      }
      if (v150)
      {
        memcpy(v453, __src, 4 * v150);
        memcpy(v452, v443, 4 * v150);
        memcpy(v451, v442, 4 * v150);
        memcpy(v450, v441, 4 * v150);
        memcpy(v449, v440, 4 * v150);
        memcpy(__dst, v439, 4 * v150);
        memcpy(v446, v438, 8 * v150);
        memcpy(v445, v437, 8 * v150);
      }
      goto LABEL_163;
    }
    uint64_t v150 = 0;
    float v143 = v451[0];
LABEL_163:
    uint64_t v186 = 0;
    unint64_t v187 = &v19[24 * v396];
    uint64_t v391 = v187 + 20;
    int v395 = (float *)(v187 + 16);
    int v399 = (float *)(v187 + 12);
    int v397 = (float *)(v187 + 4);
    uint64_t v188 = v150;
    uint64_t v189 = (long long *)v400;
    do
    {
      if (!v188)
      {
        uint64_t v190 = (uint64_t)v189 + 84 * v186;
        *(_DWORD *)(v190 + 76) = 0;
        *(_OWORD *)(v190 + 60) = 0u;
        *(_OWORD *)(v190 + 44) = 0u;
        *(void *)uint64_t v190 = 0;
        *(void *)(v190 + 8) = 0;
        goto LABEL_165;
      }
      uint64_t v191 = 0;
      unint64_t v192 = 0;
      uint64_t v193 = 0;
      float v194 = v452[0];
      float v195 = *((float *)v398 + 1057);
      do
      {
        if (vabds_f32(v194, v452[v191]) < v195)
        {
          *((void *)&v427 + v193++) = v191;
          if (*(float *)&v453[4 * v191] > 0.55) {
            *((void *)&v422 + v192++) = v191;
          }
        }
        ++v191;
      }
      while (v188 != v191);
      if (v192)
      {
        memcpy(&v419, &v422, 8 * v192);
        for (uint64_t k = 0; k != v192; ++k)
        {
          uint64_t v197 = k;
          uint64_t v198 = *((void *)&v419 + k);
          unint64_t v199 = 4 * v198;
          uint64_t v200 = k;
          v418[v200] = v452[v198];
          v417[v200] = __dst[v198];
          v416[v200] = *(float *)&v449[4 * v198];
          v198 *= 8;
          v415[v197] = *(void *)&v446[v198];
          v414[v200] = *(float *)&v453[v199];
          v413[v200] = *(float *)&v450[v199];
          v412[v200] = v451[v199 / 4];
          v409[v197] = *(void *)((char *)v445 + v198);
        }
        int v408 = 0;
        long long v406 = 0u;
        long long v407 = 0u;
        *(void *)int v405 = 0;
        float v404 = 0.0;
        uint64_t v201 = (unint64_t *)(v12 + 216 * v137 + 72 * v186);
        peridot::PeridotUserOutput::funsedTofByEmpiricalRMS((float *)v398, v418, v417, v414, v413, v416, v412, v415, v409, v192, (float *)&v406, v201, (float *)(a10 + 108 * v137 + 36 * v186), &v405[1], &v404, v405);
        unint64_t v202 = &v400[84 * v186];
        long long v203 = v407;
        *(_OWORD *)(v202 + 44) = v406;
        *(_OWORD *)(v202 + 60) = v203;
        *((_DWORD *)v202 + 19) = v408;
        *(float *)&long long v203 = v405[0];
        *(float *)unint64_t v202 = v405[1];
        *((_DWORD *)v202 + 1) = v203;
        *((float *)v202 + 2) = v404;
        *((_DWORD *)v202 + 3) = 0;
        float v204 = *((float *)v202 + 11);
        float v205 = 0.0;
        float v206 = 0.0;
        if (v204 > 0.0)
        {
          float v207 = *(float *)(*(void *)v393 + 80 * *v201 + 12) * 6.0;
          float v206 = fmaxf(v207, 0.0);
          float v205 = v207 * v204;
        }
        float v208 = *(float *)&v400[84 * v186 + 48];
        if (v208 > 0.0)
        {
          uint64_t v209 = *(void *)v392 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 8);
          float v210 = *(float *)(v209 + 12);
          if (v210 > v206) {
            float v206 = *(float *)(v209 + 12);
          }
          float v205 = v205 + (float)(v210 * v208);
        }
        float v211 = *(float *)&v400[84 * v186 + 52];
        if (v211 > 0.0)
        {
          uint64_t v212 = *(void *)v397 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 16);
          float v213 = *(float *)(v212 + 12);
          if (v213 > v206) {
            float v206 = *(float *)(v212 + 12);
          }
          float v205 = v205 + (float)(v213 * v211);
        }
        float v214 = *(float *)&v400[84 * v186 + 56];
        if (v214 > 0.0)
        {
          uint64_t v215 = *(void *)v399 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 24);
          float v216 = *(float *)(v215 + 12) * 0.0;
          if (v216 > v206) {
            float v206 = *(float *)(v215 + 12) * 0.0;
          }
          float v205 = v205 + (float)(v216 * v214);
        }
        float v217 = *(float *)&v400[84 * v186 + 60];
        if (v217 > 0.0)
        {
          uint64_t v218 = *(void *)v399 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 32);
          float v219 = *(float *)(v218 + 12);
          if (v219 > v206) {
            float v206 = *(float *)(v218 + 12);
          }
          float v205 = v205 + (float)(v219 * v217);
        }
        float v220 = *(float *)&v400[84 * v186 + 64];
        if (v220 > 0.0)
        {
          uint64_t v221 = *(void *)v395 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 40);
          float v222 = *(float *)(v221 + 12);
          if (v222 > v206) {
            float v206 = *(float *)(v221 + 12);
          }
          float v205 = v205 + (float)(v222 * v220);
        }
        float v223 = *(float *)&v400[84 * v186 + 68];
        if (v223 > 0.0)
        {
          uint64_t v224 = *(void *)v395 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 48);
          float v225 = *(float *)(v224 + 12) * 0.0;
          if (v225 > v206) {
            float v206 = *(float *)(v224 + 12) * 0.0;
          }
          float v205 = v205 + (float)(v225 * v223);
        }
        float32x4_t v226 = &v400[84 * v186];
        float v227 = *((float *)v226 + 18);
        float v228 = *((float *)v226 + 19);
        float v229 = v227 * 0.0;
        if (v227 <= 0.0) {
          float v229 = -0.0;
        }
        BOOL v230 = v206 >= 0.0 || v227 <= 0.0;
        float v231 = v205 + v229;
        if (v230) {
          float v232 = v206;
        }
        else {
          float v232 = 0.0;
        }
        if (v228 > 0.0)
        {
          uint64_t v233 = *v391 + 80 * *(void *)(v12 + 216 * v137 + 72 * v186 + 64);
          float v234 = *(float *)(v233 + 12) * 4.0;
          if (v234 > v232) {
            float v232 = *(float *)(v233 + 12) * 4.0;
          }
          float v231 = v231 + (float)(v234 * v228);
        }
        float v235 = &v400[84 * v186];
        *((float *)v235 + 4) = v231;
        *((float *)v235 + 5) = v232;
        *(_OWORD *)std::string __p = 0u;
        *(_OWORD *)v402 = 0u;
        float v403 = 1.0;
        unint64_t v236 = 0;
        if (!v193)
        {
LABEL_306:
          uint64_t v188 = 0;
          if (v150)
          {
            unint64_t v270 = 0;
            uint8x8_t v271 = (uint8x8_t)vcnt_s8((int8x8_t)v236);
            v271.i16[0] = vaddlv_u8(v271);
            unint64_t v272 = v236 - 1;
            do
            {
              if (v236)
              {
                if (v271.u32[0] > 1uLL)
                {
                  unint64_t v273 = v270;
                  if (v270 >= v236) {
                    unint64_t v273 = v270 % v236;
                  }
                }
                else
                {
                  unint64_t v273 = v272 & v270;
                }
                uint64_t v274 = (void *)*((void *)__p[0] + v273);
                if (v274)
                {
                  int v275 = (void *)*v274;
                  if (v275)
                  {
                    if (v271.u32[0] < 2uLL)
                    {
                      while (1)
                      {
                        uint64_t v276 = v275[1];
                        if (v276 == v270)
                        {
                          if (v275[2] == v270) {
                            goto LABEL_330;
                          }
                        }
                        else if ((v276 & v272) != v273)
                        {
                          goto LABEL_329;
                        }
                        int v275 = (void *)*v275;
                        if (!v275) {
                          goto LABEL_329;
                        }
                      }
                    }
                    do
                    {
                      unint64_t v277 = v275[1];
                      if (v277 == v270)
                      {
                        if (v275[2] == v270) {
                          goto LABEL_330;
                        }
                      }
                      else
                      {
                        if (v277 >= v236) {
                          v277 %= v236;
                        }
                        if (v277 != v273) {
                          break;
                        }
                      }
                      int v275 = (void *)*v275;
                    }
                    while (v275);
                  }
                }
              }
LABEL_329:
              uint64_t v278 = 4 * v188;
              *(_DWORD *)&__src[v278] = *(_DWORD *)&v453[4 * v270];
              *(float *)&v443[v278] = v452[v270];
              *(float *)&v442[v278] = v451[v270];
              *(_DWORD *)&v441[v278] = *(_DWORD *)&v450[4 * v270];
              *(_DWORD *)&v440[v278] = *(_DWORD *)&v449[4 * v270];
              *(float *)&v439[v278] = __dst[v270];
              uint64_t v279 = 8 * v188;
              *(void *)&v438[v279] = *(void *)&v446[8 * v270];
              ++v188;
              *(void *)&v437[v279] = v445[v270];
LABEL_330:
              ++v270;
            }
            while (v270 != v150);
            uint64_t v12 = v394;
            uint64_t v137 = v396;
            if (v188)
            {
              memcpy(v453, __src, 4 * v188);
              memcpy(v452, v443, 4 * v188);
              memcpy(v451, v442, 4 * v188);
              memcpy(v450, v441, 4 * v188);
              memcpy(v449, v440, 4 * v188);
              memcpy(__dst, v439, 4 * v188);
              memcpy(v446, v438, 8 * v188);
              memcpy(v445, v437, 8 * v188);
            }
          }
          else
          {
            uint64_t v12 = v394;
            uint64_t v137 = v396;
          }
          uint64_t v280 = v402[0];
          if (v402[0])
          {
            do
            {
              long long v281 = (void *)*v280;
              operator delete(v280);
              uint64_t v280 = v281;
            }
            while (v281);
          }
          if (__p[0]) {
            operator delete(__p[0]);
          }
          uint64_t v150 = v188;
          goto LABEL_338;
        }
        int8x8_t v237 = 0;
        uint64_t v238 = 0;
        while (2)
        {
          unint64_t v239 = *((void *)&v427 + v238);
          if (v236)
          {
            uint8x8_t v240 = (uint8x8_t)vcnt_s8((int8x8_t)v236);
            v240.i16[0] = vaddlv_u8(v240);
            if (v240.u32[0] > 1uLL)
            {
              uint64_t v201 = (unint64_t *)*((void *)&v427 + v238);
              if (v239 >= v236) {
                uint64_t v201 = (unint64_t *)(v239 % v236);
              }
            }
            else
            {
              uint64_t v201 = (unint64_t *)((v236 - 1) & v239);
            }
            uint64_t v241 = (void *)*((void *)__p[0] + (void)v201);
            if (v241)
            {
              uint64_t v242 = (void *)*v241;
              if (v242)
              {
                if (v240.u32[0] < 2uLL)
                {
                  while (1)
                  {
                    uint64_t v244 = v242[1];
                    if (v244 == v239)
                    {
                      if (v242[2] == v239) {
                        goto LABEL_295;
                      }
                    }
                    else if ((unint64_t *)(v244 & (v236 - 1)) != v201)
                    {
                      goto LABEL_235;
                    }
                    uint64_t v242 = (void *)*v242;
                    if (!v242) {
                      goto LABEL_235;
                    }
                  }
                }
                do
                {
                  unint64_t v243 = v242[1];
                  if (v243 == v239)
                  {
                    if (v242[2] == v239) {
                      goto LABEL_295;
                    }
                  }
                  else
                  {
                    if (v243 >= v236) {
                      v243 %= v236;
                    }
                    if ((unint64_t *)v243 != v201) {
                      break;
                    }
                  }
                  uint64_t v242 = (void *)*v242;
                }
                while (v242);
              }
            }
          }
LABEL_235:
          unint64_t v245 = operator new(0x18uLL);
          void *v245 = 0;
          v245[1] = v239;
          v245[2] = v239;
          float v246 = (float)((unint64_t)v237 + 1);
          if (!v236 || (float)(v403 * (float)v236) < v246)
          {
            BOOL v247 = (v236 & (v236 - 1)) != 0;
            if (v236 < 3) {
              BOOL v247 = 1;
            }
            unint64_t v248 = v247 | (2 * v236);
            unint64_t v249 = vcvtps_u32_f32(v246 / v403);
            if (v248 <= v249) {
              size_t prime = v249;
            }
            else {
              size_t prime = v248;
            }
            if (prime == 1)
            {
              size_t prime = 2;
            }
            else if ((prime & (prime - 1)) != 0)
            {
              size_t prime = std::__next_prime(prime);
              unint64_t v236 = (unint64_t)__p[1];
            }
            if (prime > v236)
            {
LABEL_247:
              if (prime >> 61) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              unint64_t v251 = operator new(8 * prime);
              unint64_t v252 = __p[0];
              __p[0] = v251;
              if (v252) {
                operator delete(v252);
              }
              uint64_t v253 = 0;
              __p[1] = (void *)prime;
              do
                *((void *)__p[0] + v253++) = 0;
              while (prime != v253);
              float v254 = (void **)v402[0];
              if (!v402[0]) {
                goto LABEL_271;
              }
              size_t v255 = *((void *)v402[0] + 1);
              size_t v256 = prime - 1;
              if ((prime & (prime - 1)) == 0)
              {
                size_t v257 = v255 & v256;
                *((void *)__p[0] + v257) = v402;
                for (uint64_t m = *v254; *v254; uint64_t m = *v254)
                {
                  size_t v259 = m[1] & v256;
                  if (v259 == v257)
                  {
                    float v254 = (void **)m;
                  }
                  else if (*((void *)__p[0] + v259))
                  {
                    *float v254 = (void *)*m;
                    uint64_t v260 = 8 * v259;
                    *uint64_t m = **(void **)((char *)__p[0] + v260);
                    **(void **)((char *)__p[0] + v260) = m;
                  }
                  else
                  {
                    *((void *)__p[0] + v259) = v254;
                    float v254 = (void **)m;
                    size_t v257 = v259;
                  }
                }
                goto LABEL_271;
              }
              if (v255 >= prime) {
                v255 %= prime;
              }
              *((void *)__p[0] + v255) = v402;
              float v264 = *v254;
              if (!*v254)
              {
LABEL_271:
                unint64_t v236 = prime;
                goto LABEL_272;
              }
              while (2)
              {
                size_t v266 = v264[1];
                if (v266 >= prime) {
                  v266 %= prime;
                }
                if (v266 != v255)
                {
                  if (!*((void *)__p[0] + v266))
                  {
                    *((void *)__p[0] + v266) = v254;
LABEL_276:
                    float v254 = (void **)v264;
                    float v264 = (void *)*v264;
                    size_t v255 = v266;
                    if (!v264) {
                      goto LABEL_271;
                    }
                    continue;
                  }
                  *float v254 = (void *)*v264;
                  uint64_t v265 = 8 * v266;
                  *float v264 = **(void **)((char *)__p[0] + v265);
                  **(void **)((char *)__p[0] + v265) = v264;
                  float v264 = v254;
                }
                break;
              }
              size_t v266 = v255;
              goto LABEL_276;
            }
            if (prime < v236)
            {
              unint64_t v261 = vcvtps_u32_f32((float)(unint64_t)v402[1] / v403);
              if (v236 < 3
                || (uint8x8_t v262 = (uint8x8_t)vcnt_s8((int8x8_t)v236), v262.i16[0] = vaddlv_u8(v262), v262.u32[0] > 1uLL))
              {
                unint64_t v261 = std::__next_prime(v261);
              }
              else
              {
                uint64_t v263 = 1 << -(char)__clz(v261 - 1);
                if (v261 >= 2) {
                  unint64_t v261 = v263;
                }
              }
              if (prime <= v261) {
                size_t prime = v261;
              }
              if (prime >= v236)
              {
                unint64_t v236 = (unint64_t)__p[1];
              }
              else
              {
                if (prime) {
                  goto LABEL_247;
                }
                unint64_t v269 = __p[0];
                __p[0] = 0;
                if (v269) {
                  operator delete(v269);
                }
                unint64_t v236 = 0;
                __p[1] = 0;
              }
            }
LABEL_272:
            if ((v236 & (v236 - 1)) != 0)
            {
              if (v239 >= v236) {
                uint64_t v201 = (unint64_t *)(v239 % v236);
              }
              else {
                uint64_t v201 = (unint64_t *)v239;
              }
            }
            else
            {
              uint64_t v201 = (unint64_t *)((v236 - 1) & v239);
            }
          }
          uint64_t v267 = (void *)*((void *)__p[0] + (void)v201);
          if (v267)
          {
            void *v245 = *v267;
            goto LABEL_293;
          }
          void *v245 = v402[0];
          v402[0] = v245;
          *((void *)__p[0] + (void)v201) = v402;
          if (*v245)
          {
            unint64_t v268 = *(void *)(*v245 + 8);
            if ((v236 & (v236 - 1)) != 0)
            {
              if (v268 >= v236) {
                v268 %= v236;
              }
            }
            else
            {
              v268 &= v236 - 1;
            }
            uint64_t v267 = (char *)__p[0] + 8 * v268;
LABEL_293:
            *uint64_t v267 = v245;
          }
          int8x8_t v237 = ++v402[1];
LABEL_295:
          if (++v238 == v193) {
            goto LABEL_306;
          }
          continue;
        }
      }
LABEL_338:
      uint64_t v189 = (long long *)v400;
LABEL_165:
      ++v186;
    }
    while (v186 != 3);
    uint64_t v19 = v387;
    int v17 = v386;
    if (v143 <= 4.4 || *((float *)v189 + 22) <= 0.0) {
      goto LABEL_395;
    }
    float v282 = *((float *)v189 + 5);
    float v283 = *((float *)v189 + 26);
    uint64_t v284 = v283 > v282;
    if (v283 > v282) {
      float v282 = *((float *)v189 + 26);
    }
    if (*((float *)v189 + 47) > v282) {
      uint64_t v284 = 2;
    }
    if (v284)
    {
      uint16x8_t v285 = (long long *)((char *)v189 + 84 * v284);
      long long v286 = v285[3];
      long long v429 = v285[2];
      long long v430 = v286;
      long long v431 = v285[4];
      long long v287 = *v285;
      long long v428 = v285[1];
      long long v427 = v287;
      int v288 = *((_DWORD *)v285 + 20);
      uint64_t v289 = v12 + 216 * v137 + 72 * v284;
      long long v290 = *(_OWORD *)(v289 + 48);
      long long v424 = *(_OWORD *)(v289 + 32);
      long long v425 = v290;
      uint64_t v426 = *(void *)(v289 + 64);
      long long v291 = *(_OWORD *)v289;
      long long v423 = *(_OWORD *)(v289 + 16);
      long long v422 = v291;
      uint64_t v292 = a10 + 108 * v137 + 36 * v284;
      int v411 = *(_DWORD *)(v292 + 32);
      long long v293 = *(_OWORD *)(v292 + 16);
      *(_OWORD *)v409 = *(_OWORD *)v292;
      long long v410 = v293;
    }
    else
    {
      int v288 = 0;
    }
    for (uint64_t n = 0; n != 3; ++n)
    {
      if (n != v284 && *(float *)&v400[84 * n + 4] > 0.0)
      {
        if (*(float *)&v400[84 * n + 44] <= 0.0)
        {
          uint64_t v303 = 0;
        }
        else
        {
          *(void *)&long long v419 = 1;
          v415[0] = *(void *)(v12 + 216 * v137 + 72 * n);
          uint64_t v303 = 1;
        }
        if (*(float *)&v400[84 * n + 48] > 0.0)
        {
          uint64_t v304 = v303;
          *(void *)((char *)&v419 + v304 * 8) = 2;
          v415[v304] = *(void *)(v12 + 216 * v137 + 72 * n + 8);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 52] > 0.0)
        {
          uint64_t v305 = v303;
          *(void *)((char *)&v419 + v305 * 8) = 3;
          v415[v305] = *(void *)(v12 + 216 * v137 + 72 * n + 16);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 56] > 0.0)
        {
          uint64_t v306 = v303;
          *(void *)((char *)&v419 + v306 * 8) = 11;
          v415[v306] = *(void *)(v12 + 216 * v137 + 72 * n + 24);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 60] > 0.0)
        {
          uint64_t v307 = v303;
          *(void *)((char *)&v419 + v307 * 8) = 12;
          v415[v307] = *(void *)(v12 + 216 * v137 + 72 * n + 32);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 64] > 0.0)
        {
          uint64_t v308 = v303;
          *(void *)((char *)&v419 + v308 * 8) = 14;
          v415[v308] = *(void *)(v12 + 216 * v137 + 72 * n + 40);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 68] > 0.0)
        {
          uint64_t v309 = v303;
          *(void *)((char *)&v419 + v309 * 8) = 15;
          v415[v309] = *(void *)(v12 + 216 * v137 + 72 * n + 48);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 72] > 0.0)
        {
          uint64_t v310 = v303;
          *(void *)((char *)&v419 + v310 * 8) = 16;
          v415[v310] = *(void *)(v12 + 216 * v137 + 72 * n + 56);
          ++v303;
        }
        if (*(float *)&v400[84 * n + 76] <= 0.0)
        {
          if (!v303) {
            continue;
          }
        }
        else
        {
          uint64_t v311 = v303;
          *(void *)((char *)&v419 + v311 * 8) = 20;
          v415[v311] = *(void *)(v12 + 216 * v137 + 72 * n + 64);
          ++v303;
        }
        BOOL v312 = v415;
        BOOL v313 = (uint64_t *)&v419;
        do
        {
          uint64_t v316 = *v313++;
          unint64_t v314 = 0;
          BOOL v315 = v399;
          switch(v316)
          {
            case 1:
              unint64_t v314 = *v312;
              BOOL v315 = v393;
              goto LABEL_386;
            case 2:
              unint64_t v314 = *v312;
              BOOL v315 = v392;
              goto LABEL_386;
            case 3:
              unint64_t v314 = *v312;
              BOOL v315 = v397;
              goto LABEL_386;
            case 12:
              goto LABEL_386;
            case 14:
            case 15:
              unint64_t v314 = 0;
              BOOL v315 = v395;
LABEL_386:
              *(_DWORD *)(*(void *)v315 + 80 * v314 + 8) = 0;
              break;
            default:
              break;
          }
          ++v312;
          --v303;
        }
        while (v303);
      }
    }
    uint64_t v189 = (long long *)v400;
    if (v284)
    {
      long long v317 = v431;
      long long v318 = v429;
      *((_OWORD *)v400 + 3) = v430;
      *((_OWORD *)v400 + 4) = v317;
      long long v319 = v428;
      *(_OWORD *)float v400 = v427;
      *((_OWORD *)v400 + 1) = v319;
      *((_OWORD *)v400 + 2) = v318;
      *((_DWORD *)v400 + 20) = v288;
      uint64_t v320 = v12 + 216 * v137;
      *(void *)(v320 + 64) = v426;
      long long v321 = v425;
      *(_OWORD *)(v320 + 32) = v424;
      *(_OWORD *)(v320 + 48) = v321;
      long long v322 = v423;
      *(_OWORD *)uint64_t v320 = v422;
      *(_OWORD *)(v320 + 16) = v322;
      uint64_t v323 = a10 + 108 * v137;
      *(_DWORD *)(v323 + 32) = v411;
      long long v324 = v410;
      *(_OWORD *)uint64_t v323 = *(_OWORD *)v409;
      *(_OWORD *)(v323 + 16) = v324;
    }
    *((_DWORD *)v400 + 41) |= 0x8000u;
LABEL_395:
    *(long long *)((char *)v189 + 168) = 0u;
    *((_DWORD *)v189 + 62) = 0;
    *(long long *)((char *)v189 + 216) = 0u;
    *(long long *)((char *)v189 + 232) = 0u;
    *(long long *)((char *)v189 + 184) = 0u;
    *(long long *)((char *)v189 + 200) = 0u;
    uint64_t v325 = (long long *)(v12 + 216 * v137);
    *((void *)v325 + 26) = 0;
    v325[11] = 0u;
    v325[12] = 0u;
    v325[9] = 0u;
    v325[10] = 0u;
    unint64_t v326 = (long long *)(a10 + 108 * v137);
    *((_DWORD *)v326 + 26) = 0;
    *(long long *)((char *)v326 + 88) = 0u;
    *(long long *)((char *)v326 + 72) = 0u;
    if (*((float *)v189 + 1) >= 0.999 && *((float *)v189 + 22) >= 0.999)
    {
      uint64_t v327 = (long long *)((char *)v189 + 84);
      if (*((float *)v189 + 21) < *(float *)v189)
      {
        long long v328 = v189[1];
        long long v422 = *v189;
        long long v423 = v328;
        LODWORD(v424) = *((_DWORD *)v189 + 8);
        long long v329 = *(long long *)((char *)v189 + 100);
        long long v419 = *v327;
        long long v420 = v329;
        int v421 = *((_DWORD *)v189 + 29);
        int v330 = *((_DWORD *)v189 + 20);
        int v331 = *((_DWORD *)v189 + 41);
        long long v332 = v189[3];
        long long v429 = v189[2];
        long long v430 = v332;
        long long v431 = v189[4];
        int v432 = *((_DWORD *)v189 + 20);
        long long v333 = v189[1];
        long long v427 = v422;
        long long v428 = v333;
        long long v335 = *v327;
        long long v334 = *(long long *)((char *)v189 + 100);
        long long v336 = *(long long *)((char *)v189 + 132);
        v189[2] = *(long long *)((char *)v189 + 116);
        v189[3] = v336;
        v189[4] = *(long long *)((char *)v189 + 148);
        long long *v189 = v335;
        v189[1] = v334;
        long long v337 = v431;
        long long v338 = v429;
        *(long long *)((char *)v189 + 132) = v430;
        *(long long *)((char *)v189 + 148) = v337;
        long long v339 = v428;
        *uint64_t v327 = v427;
        *(long long *)((char *)v189 + 100) = v339;
        *(long long *)((char *)v189 + 116) = v338;
        *((_DWORD *)v189 + 8) = v421;
        long long v340 = v420;
        long long *v189 = v419;
        v189[1] = v340;
        long long v341 = v422;
        long long v342 = v423;
        *((_DWORD *)v189 + 29) = v424;
        *uint64_t v327 = v341;
        *(long long *)((char *)v189 + 100) = v342;
        *((_DWORD *)v189 + 20) = v331;
        *((_DWORD *)v189 + 41) = v330;
        long long v343 = v325[3];
        long long v429 = v325[2];
        long long v430 = v343;
        *(void *)&long long v431 = *((void *)v325 + 8);
        long long v344 = *v325;
        long long v428 = v325[1];
        long long v427 = v344;
        uint64_t v345 = v12 + 216 * v137;
        long long v346 = *(_OWORD *)(v345 + 88);
        long long v347 = *(_OWORD *)(v345 + 120);
        v325[2] = *(_OWORD *)(v345 + 104);
        v325[3] = v347;
        *((void *)v325 + 8) = *(void *)(v345 + 136);
        *uint64_t v325 = *(_OWORD *)(v345 + 72);
        v325[1] = v346;
        long long v348 = v428;
        *(_OWORD *)(v345 + 72) = v427;
        long long v349 = v429;
        long long v350 = v430;
        *(void *)(v345 + 136) = v431;
        *(_OWORD *)(v345 + 120) = v350;
        *(_OWORD *)(v345 + 104) = v349;
        *(_OWORD *)(v345 + 88) = v348;
        int v351 = *((_DWORD *)v326 + 8);
        long long v353 = *v326;
        long long v352 = v326[1];
        uint64_t v354 = a10 + 108 * v137;
        long long v355 = *(_OWORD *)(v354 + 52);
        *unint64_t v326 = *(_OWORD *)(v354 + 36);
        v326[1] = v355;
        *((_DWORD *)v326 + 8) = *(_DWORD *)(v354 + 68);
        *(_OWORD *)(v354 + 36) = v353;
        *(_OWORD *)(v354 + 52) = v352;
        *(_DWORD *)(v354 + 68) = v351;
      }
    }
    float v356 = fmaxf(v393[6], *(float *)&v387[24 * v137 + 11]);
    *((float *)v189 + 7) = v356;
    *((float *)v189 + 10) = v143;
    *((float *)v189 + 28) = v356;
    *((float *)v189 + 31) = v143;
    *((float *)v189 + 49) = v356;
    *((float *)v189 + 52) = v143;
    uint64_t v357 = *(void *)v393;
    uint64_t v358 = *(void *)v397;
    BOOL v359 = v386 == 2 && *(float *)(*(void *)v395 + 36) > 90.0;
    BOOL v360 = *(float *)(*(void *)v393 + 36) > 90.0;
    if (*(float *)(*(void *)v397 + 36) > 90.0) {
      BOOL v360 = 1;
    }
    if (*(float *)(*(void *)v392 + 36) > 90.0) {
      BOOL v360 = 1;
    }
    if (v360 || v359) {
      *((_DWORD *)v400 + 20) |= 0x1000u;
    }
    if (v390 > v91) {
      *((_DWORD *)v400 + 20) |= 0x40000u;
    }
    double v361 = *((float *)v400 + 11);
    float v362 = *((float *)v400 + 19);
    int32x4_t v363 = (int32x4_t)vcgtq_f64(vcvtq_f64_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(v400 + 48))), v384);
    *(int32x2_t *)v363.i8 = vmovn_s64((int64x2_t)v363);
    int8x8_t v364 = vorr_s8(vand_s8(*(int8x8_t *)v363.i8, (int8x8_t)0x400000002), vand_s8((int8x8_t)vmovn_s64(vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)(v400 + 60)), v384)), (int8x8_t)0x1000000008));
    __int32 v365 = v364.i32[0] | (v361 > 0.1) | v364.i32[1];
    if (v365) {
      *((_DWORD *)v400 + 20) = *((_DWORD *)v400 + 20) & 0xFFFFFFC1 | (2 * v365);
    }
    if (v362 > 0.1) {
      *((_DWORD *)v400 + 20) |= 0x80u;
    }
    if (v361 > 0.1 && ((*(_DWORD *)(v357 + 60) >> 19) & 7) != 0) {
      *((_DWORD *)v400 + 20) = *((_DWORD *)v400 + 20) & 0xFFC7FFFF | (((*(_DWORD *)(v357 + 60) >> 19) & 7) << 19);
    }
    if ((vmovn_s32(v363).u8[0] & 1) != 0 && (*(unsigned char *)(v358 + 63) & 7) != 0) {
      *((_DWORD *)v400 + 20) = *((_DWORD *)v400 + 20) & 0xF8FFFFFF | ((*(unsigned char *)(v358 + 63) & 7) << 24);
    }
    BOOL v366 = v386 == 2 && *(float *)(*(void *)v395 + 36) > 90.0;
    if (v360 || v366) {
      *((_DWORD *)v400 + 41) |= 0x1000u;
    }
    if (v390 > v91) {
      *((_DWORD *)v400 + 41) |= 0x40000u;
    }
    double v367 = *((float *)v400 + 32);
    float v368 = *((float *)v400 + 40);
    int32x4_t v369 = (int32x4_t)vcgtq_f64(vcvtq_f64_f32((float32x2_t)vrev64_s32(*(int32x2_t *)(v400 + 132))), v384);
    *(int32x2_t *)v369.i8 = vmovn_s64((int64x2_t)v369);
    int8x8_t v370 = vorr_s8(vand_s8(*(int8x8_t *)v369.i8, (int8x8_t)0x400000002), vand_s8((int8x8_t)vmovn_s64(vcgtq_f64(vcvtq_f64_f32(*(float32x2_t *)(v400 + 144)), v384)), (int8x8_t)0x1000000008));
    __int32 v371 = v370.i32[0] | (v367 > 0.1) | v370.i32[1];
    if (v371) {
      *((_DWORD *)v400 + 41) = *((_DWORD *)v400 + 41) & 0xFFFFFFC1 | (2 * v371);
    }
    if (v368 > 0.1) {
      *((_DWORD *)v400 + 41) |= 0x80u;
    }
    if (v367 > 0.1)
    {
      int v372 = (*(_DWORD *)(v357 + 140) >> 19) & 7;
      if (v372) {
        *((_DWORD *)v400 + 41) = *((_DWORD *)v400 + 41) & 0xFFC7FFFF | ((v372 & 7) << 19);
      }
    }
    if (vmovn_s32(v369).u8[0])
    {
      int v373 = *(unsigned char *)(v358 + 143) & 7;
      if (v373) {
        *((_DWORD *)v400 + 41) = *((_DWORD *)v400 + 41) & 0xF8FFFFFF | ((v373 & 7) << 24);
      }
    }
    float v374 = vabds_f32(*(float *)v400, *((float *)v400 + 42));
    float v375 = *((float *)v398 + 1057);
    if (vabds_f32(*(float *)v400, *((float *)v400 + 21)) < v375)
    {
      *(void *)&long long v427 = 1;
      uint64_t v377 = 1;
      uint64_t v378 = 1;
      uint64_t v379 = 1;
      _Q3 = v385;
      if (v374 < v375)
      {
LABEL_442:
        *((void *)&v427 + v377) = 2;
        uint64_t v379 = v377 + 1;
        uint64_t v378 = v427;
      }
      uint64_t v376 = v400;
      long long v380 = &v400[84 * v378];
      *((_DWORD *)v380 + 19) = 0;
      *(_OWORD *)(v380 + 60) = 0u;
      *(_OWORD *)(v380 + 44) = 0u;
      *((void *)v380 + 1) = 0;
      *((void *)v380 + 2) = 0;
      *(void *)long long v380 = 0;
      *((_DWORD *)v380 + 6) = 0;
      if (v379 != 1)
      {
        unint64_t v381 = &v400[84 * *((void *)&v427 + 1)];
        *(_OWORD *)(v381 + 44) = 0uLL;
        *(_OWORD *)(v381 + 60) = 0uLL;
        *((_DWORD *)v381 + 19) = 0;
        *((void *)v381 + 1) = 0;
        *((void *)v381 + 2) = 0;
        *(void *)unint64_t v381 = 0;
        *((_DWORD *)v381 + 6) = 0;
      }
    }
    else
    {
      _Q3 = v385;
      uint64_t v376 = v400;
      if (v374 < v375)
      {
        uint64_t v377 = 0;
        goto LABEL_442;
      }
    }
    if (vabds_f32(*((float *)v376 + 21), *((float *)v376 + 42)) < *((float *)v398 + 1057))
    {
      *((_DWORD *)v376 + 61) = 0;
      *(_OWORD *)(v376 + 228) = 0u;
      *(_OWORD *)(v376 + 212) = 0u;
      *((void *)v189 + 22) = 0;
      *((void *)v189 + 23) = 0;
      *((void *)v189 + 21) = 0;
      *((_DWORD *)v189 + 48) = 0;
    }
    uint64_t v20 = v137 + 1;
  }
  while (v20 != 14);
  if (v386)
  {
    if ((*(unsigned char *)(v387[16] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 20) |= 0x2000u;
      *((_DWORD *)v398 + 41) |= 0x2000u;
      *((_DWORD *)v398 + 62) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[40] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 94) |= 0x2000u;
      *((_DWORD *)v398 + 115) |= 0x2000u;
      *((_DWORD *)v398 + 136) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[64] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 168) |= 0x2000u;
      *((_DWORD *)v398 + 189) |= 0x2000u;
      *((_DWORD *)v398 + 210) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[88] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 242) |= 0x2000u;
      *((_DWORD *)v398 + 263) |= 0x2000u;
      *((_DWORD *)v398 + 284) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[112] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 316) |= 0x2000u;
      *((_DWORD *)v398 + 337) |= 0x2000u;
      *((_DWORD *)v398 + 358) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[136] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 390) |= 0x2000u;
      *((_DWORD *)v398 + 411) |= 0x2000u;
      *((_DWORD *)v398 + 432) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[160] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 464) |= 0x2000u;
      *((_DWORD *)v398 + 485) |= 0x2000u;
      *((_DWORD *)v398 + 506) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[184] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 538) |= 0x2000u;
      *((_DWORD *)v398 + 559) |= 0x2000u;
      *((_DWORD *)v398 + 580) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[208] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 612) |= 0x2000u;
      *((_DWORD *)v398 + 633) |= 0x2000u;
      *((_DWORD *)v398 + 654) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[232] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 686) |= 0x2000u;
      *((_DWORD *)v398 + 707) |= 0x2000u;
      *((_DWORD *)v398 + 728) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[256] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 760) |= 0x2000u;
      *((_DWORD *)v398 + 781) |= 0x2000u;
      *((_DWORD *)v398 + 802) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[280] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 834) |= 0x2000u;
      *((_DWORD *)v398 + 855) |= 0x2000u;
      *((_DWORD *)v398 + 876) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[304] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 908) |= 0x2000u;
      *((_DWORD *)v398 + 929) |= 0x2000u;
      *((_DWORD *)v398 + 950) |= 0x2000u;
    }
    if ((*(unsigned char *)(v387[328] + 61) & 0x20) != 0)
    {
      *((_DWORD *)v398 + 982) |= 0x2000u;
      *((_DWORD *)v398 + 1003) |= 0x2000u;
      *((_DWORD *)v398 + 1024) |= 0x2000u;
    }
  }
  return 0;
}

void sub_259020384(_Unwind_Exception *exception_object)
{
}

void sub_259020390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,void *__p)
{
  operator delete(v51);
  unint64_t v53 = __p;
  if (__p)
  {
    do
    {
      uint64_t v54 = (void *)*v53;
      operator delete(v53);
      unint64_t v53 = v54;
    }
    while (v54);
  }
  if (!a49) {
    _Unwind_Resume(a1);
  }
  operator delete(a49);
  _Unwind_Resume(a1);
}

char *std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(char *result, uint64_t *a2, uint64_t *a3, unint64_t a4, char *a5, uint64_t a6)
{
  if (a4 < 2) {
    return result;
  }
  float v8 = (uint64_t *)result;
  if (a4 == 2)
  {
    uint64_t v9 = *(a2 - 1);
    uint64_t v10 = *(void *)result;
    float v11 = *(float *)(*a3 + 4 * v9);
    float v12 = *(float *)(*a3 + 4 * *(void *)result);
    if (fabsf(v11 + -1.0) >= 0.000001)
    {
      if (v11 <= v12) {
        return result;
      }
    }
    else if (fabsf(v12 + -1.0) < 0.000001 || v11 <= v12)
    {
      return result;
    }
    *(void *)uint64_t result = v9;
    *(a2 - 1) = v10;
    return result;
  }
  if ((uint64_t)a4 <= 128)
  {
    if (result == (char *)a2) {
      return result;
    }
    int v15 = result + 8;
    if (result + 8 == (char *)a2) {
      return result;
    }
    uint64_t v16 = 0;
    uint64_t v17 = *a3;
    uint64_t v18 = result;
    while (1)
    {
      uint64_t v20 = v18;
      uint64_t v18 = v15;
      uint64_t v22 = *(void *)v20;
      uint64_t v21 = *((void *)v20 + 1);
      float v23 = *(float *)(v17 + 4 * v21);
      float v24 = *(float *)(v17 + 4 * *(void *)v20);
      if (fabsf(v23 + -1.0) >= 0.000001)
      {
        if (v23 <= v24) {
          goto LABEL_16;
        }
        *((void *)v20 + 1) = v22;
        uint64_t v30 = v16;
        uint64_t v19 = result;
        if (v20 != result)
        {
          while (1)
          {
            uint64_t v19 = &result[v30];
            uint64_t v31 = *(void *)&result[v30 - 8];
            if (v23 <= *(float *)(v17 + 4 * v31)) {
              break;
            }
            *(void *)uint64_t v19 = v31;
            v30 -= 8;
            if (!v30)
            {
LABEL_14:
              uint64_t v19 = result;
              break;
            }
          }
        }
      }
      else
      {
        if (fabsf(v24 + -1.0) < 0.000001 || v23 <= v24) {
          goto LABEL_16;
        }
        *((void *)v20 + 1) = v22;
        uint64_t v26 = v16;
        uint64_t v19 = result;
        if (v20 != result)
        {
          while (1)
          {
            uint64_t v19 = &result[v26];
            uint64_t v27 = *(void *)&result[v26 - 8];
            float v28 = *(float *)(v17 + 4 * v27);
            if (fabsf(v28 + -1.0) < 0.000001 || v23 <= v28) {
              break;
            }
            *(void *)uint64_t v19 = v27;
            v26 -= 8;
            if (!v26) {
              goto LABEL_14;
            }
          }
        }
      }
      *(void *)uint64_t v19 = v21;
LABEL_16:
      int v15 = v18 + 8;
      v16 += 8;
      if (v18 + 8 == (char *)a2) {
        return result;
      }
    }
  }
  unint64_t v34 = a4 >> 1;
  int v35 = &result[8 * (a4 >> 1)];
  unint64_t v36 = a4 >> 1;
  if ((uint64_t)a4 > a6)
  {
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(result, v35, a3, v36, a5, a6);
    std::__stable_sort<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(&v8[a4 >> 1], a2, a3, a4 - (a4 >> 1), a5, a6);
    return (char *)std::__inplace_merge<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(v8, &v8[a4 >> 1], a2, a3, a4 >> 1, a4 - (a4 >> 1), a5, a6);
  }
  std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>(result, v35, a3, v36, (uint64_t *)a5);
  uint64_t v37 = (uint64_t *)&a5[8 * v34];
  uint64_t result = std::__stable_sort_move<std::_ClassicAlgPolicy,peridot::PeridotUserOutput::fusionOutput(peridot::PeridotDepth &,peridot::PeridotOpMode,unsigned char,BOOL,BOOL *,peridot::T0Output const&,unsigned long (&)[14][3][9],peridot::PeridotUserOutputInvRmsEst &)::$_0 &,unsigned long *>((char *)&v8[a4 >> 1], (char *)a2, a3, a4 - (a4 >> 1), v37);
  unint64_t v38 = &a5[8 * a4];
  uint64_t v39 = *a3;
  uint64_t v40 = -1;
  uint64_t v41 = v8;
  unint64_t v42 = (char *)v37;
  uint64_t v43 = a5;
  do
  {
    if (v42 == v38)
    {
      if (v43 == (char *)v37) {
        return result;
      }
      unint64_t v47 = &a5[8 * v34] - v43 - 8;
      if (v47 >= 0x38)
      {
        if ((unint64_t)((char *)&v8[v40 + 1] - v43) >= 0x20)
        {
          uint64_t v58 = 0;
          uint64_t v59 = (v47 >> 3) + 1;
          uint64_t v60 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          BOOL v48 = &v41[v60];
          uint64_t v61 = v59 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            uint64_t v62 = &v41[v58];
            long long v63 = *(_OWORD *)&v43[v58 * 8 + 16];
            *(_OWORD *)uint64_t v62 = *(_OWORD *)&v43[v58 * 8];
            *((_OWORD *)v62 + 1) = v63;
            v58 += 4;
            v61 -= 4;
          }
          while (v61);
          if (v59 == (v59 & 0x3FFFFFFFFFFFFFFCLL)) {
            return result;
          }
          v43 += v60 * 8;
        }
        else
        {
          BOOL v48 = v41;
        }
      }
      else
      {
        BOOL v48 = v41;
      }
      do
      {
        uint64_t v64 = *(void *)v43;
        v43 += 8;
        *v48++ = v64;
      }
      while (v43 != (char *)v37);
      return result;
    }
    float v44 = *(float *)(v39 + 4 * *(void *)v42);
    float v45 = *(float *)(v39 + 4 * *(void *)v43);
    if (fabsf(v44 + -1.0) >= 0.000001)
    {
      if (v44 > v45) {
        goto LABEL_42;
      }
    }
    else if (fabsf(v45 + -1.0) >= 0.000001 && v44 > v45)
    {
LABEL_42:
      uint64_t *v41 = *(void *)v42;
      v42 += 8;
      goto LABEL_43;
    }
    uint64_t *v41 = *(void *)v43;
    v43 += 8;
LABEL_43:
    ++v41;
    ++v40;
  }
  while (v43 != (char *)v37);
  if (v42 == v38) {
    return result;
  }
  unint64_t v49 = &a5[8 * a4] - v42 - 8;
  if (v49 <= 0x47 || (unint64_t)((char *)&v8[v40] - v42 + 8) < 0x20)
  {
    uint64_t v50 = v41;
    goto LABEL_61;
  }
  unint64_t v52 = 0;
  uint64_t v53 = (v49 >> 3) + 1;
  uint64_t v54 = v53 & 0x3FFFFFFFFFFFFFFCLL;
  uint64_t v50 = &v41[v54];
  uint64_t v55 = v53 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    int v56 = &v41[v52 / 8];
    uint64_t result = &v42[v52];
    long long v57 = *(_OWORD *)&v42[v52 + 16];
    *(_OWORD *)int v56 = *(_OWORD *)&v42[v52];
    *((_OWORD *)v56 + 1) = v57;
    v52 += 32;
    v55 -= 4;
  }
  while (v55);
  if (v53 != (v53 & 0x3FFFFFFFFFFFFFFCLL))
  {
    v42 += v54 * 8;
    do
    {
LABEL_61:
      uint64_t v51 = *(void *)v42;
      v42 += 8;
      *v50++ = v51;
    }
    while (v42 != v38);
  }
  return result;
}

float *peridot::PeridotUserOutput::funsedTofByEmpiricalRMS(float *this, float *a2, float *a3, const float *a4, float *a5, float *a6, float *a7, unint64_t *a8, const unint64_t *a9, unint64_t a10, float *a11, unint64_t *a12, float *a13, float *a14, float *a15, float *a16)
{
  uint64_t v19 = a16;
  unint64_t v20 = a10;
  uint64_t v126 = *MEMORY[0x263EF8340];
  if (!a10) {
    goto LABEL_19;
  }
  float v24 = a9;
  if (a10 <= 7)
  {
    unint64_t v25 = 0;
    float v26 = 0.0;
LABEL_7:
    uint64_t v32 = a10 - v25;
    uint64_t v33 = &a2[v25];
    do
    {
      float v34 = *v33++;
      float v26 = v34 + v26;
      --v32;
    }
    while (v32);
    goto LABEL_9;
  }
  unint64_t v25 = a10 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = (float32x4_t *)(a2 + 4);
  float32x4_t v28 = 0uLL;
  unint64_t v29 = a10 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v30 = 0uLL;
  do
  {
    float32x4_t v28 = vaddq_f32(v27[-1], v28);
    float32x4_t v30 = vaddq_f32(*v27, v30);
    v27 += 2;
    v29 -= 8;
  }
  while (v29);
  float32x4_t v31 = vaddq_f32(v30, v28);
  float v26 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v31, v31));
  if (v25 != a10) {
    goto LABEL_7;
  }
LABEL_9:
  if ((float)(v26 / (float)a10) >= 0.0000000015)
  {
    uint64_t v107 = a14;
    uint64_t v108 = a15;
    uint64_t v40 = (char *)this;
    uint64_t v109 = a16;
    memcpy(__dst, a2, 4 * a10);
    memcpy(v124, a3, 4 * a10);
    memcpy(v123, a8, 8 * a10);
    memcpy(v122, a4, 4 * a10);
    memcpy(v121, a5, 4 * a10);
    memcpy(v120, a6, 4 * a10);
    uint64_t v41 = a7;
    size_t v42 = 4 * a10;
    memcpy(v119, v41, 4 * a10);
    memcpy(v118, a9, 8 * a10);
    unint64_t v35 = a10;
    goto LABEL_17;
  }
  unint64_t v35 = 0;
  do
  {
    unint64_t v37 = *a8++;
    unint64_t v36 = v37;
    if (v37 >= 0xB)
    {
      unint64_t v38 = v35;
      *(float *)&__dst[v38 * 4] = *a2;
      v124[v38] = *a3;
      uint64_t v39 = v35;
      v123[v39] = v36;
      v122[v38] = *(_DWORD *)a4;
      v121[v38] = *a5;
      v120[v38] = *a6;
      v119[v38] = *a7;
      ++v35;
      *(void *)&v118[v39 * 8] = *v24;
    }
    ++v24;
    ++a7;
    ++a6;
    ++a5;
    ++a4;
    ++a3;
    ++a2;
    --v20;
  }
  while (v20);
  if (!v35)
  {
LABEL_19:
    *a14 = 0.0;
    *a15 = 0.0;
    *a16 = 0.0;
    if (*a14 <= 0.0) {
      return this;
    }
    float v44 = *(float *)v122;
    goto LABEL_51;
  }
  uint64_t v107 = a14;
  uint64_t v108 = a15;
  uint64_t v40 = (char *)this;
  uint64_t v109 = a16;
  size_t v42 = 4 * v35;
LABEL_17:
  memcpy(v116, __dst, v42);
  if (v35 <= 7)
  {
    unint64_t v43 = 0;
LABEL_24:
    unint64_t v49 = v35 - v43;
    uint64_t v50 = &v116[v43];
    do
    {
      float v51 = *v50 * 149852322.0;
      *v50++ = v51;
      --v49;
    }
    while (v49);
    goto LABEL_26;
  }
  unint64_t v43 = v35 & 0xFFFFFFFFFFFFFFF8;
  float v45 = (float32x2_t *)&v117;
  float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x41A1DD2145000000uLL);
  unint64_t v47 = v35 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v48 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(*v45), v46)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v45->f32), v46));
    *(float32x4_t *)v45[-2].f32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmulq_f64(vcvtq_f64_f32(v45[-2]), v46)), vmulq_f64(vcvt_hight_f64_f32(*(float32x4_t *)v45[-2].f32), v46));
    *(float32x4_t *)v45->f32 = v48;
    v45 += 4;
    v47 -= 8;
  }
  while (v47);
  if (v35 != v43) {
    goto LABEL_24;
  }
LABEL_26:
  uint64_t v52 = 0;
  memset(v115, 0, sizeof(v115));
  uint64_t v53 = (float *)&v114;
  long long v114 = 0u;
  do
  {
    peridot::PeridotUserOutput::fusionRMSWeights(v40, v123[v52], v124[v52], v121[v52], v120[v52], v116[v52], v119[v52], v53);
    ++v52;
    ++v53;
  }
  while (v35 != v52);
  float32x4_t v54 = 0uLL;
  memset(v113, 0, sizeof(v113));
  long long v112 = 0u;
  long long v110 = 0u;
  memset(v111, 0, sizeof(v111));
  __asm { FMOV            V1.4S, #1.0 }
  if (v35 <= 7)
  {
    unint64_t v60 = 0;
    float v61 = 0.0;
    uint64_t v62 = v108;
    uint64_t v19 = v109;
    long long v63 = a13;
    this = v107;
    uint64_t v65 = a11;
    uint64_t v64 = a12;
LABEL_33:
    unint64_t v70 = v35 - v60;
    uint64_t v71 = (float *)&v115[-1] + v60;
    do
    {
      float v72 = *v71++;
      float v61 = (float)(1.0 / (float)(v72 * v72)) + v61;
      --v70;
    }
    while (v70);
    goto LABEL_35;
  }
  unint64_t v60 = v35 & 0xFFFFFFFFFFFFFFF8;
  int v66 = (float32x4_t *)v115;
  unint64_t v67 = v35 & 0xFFFFFFFFFFFFFFF8;
  float32x4_t v68 = 0uLL;
  uint64_t v62 = v108;
  uint64_t v19 = v109;
  long long v63 = a13;
  this = v107;
  uint64_t v65 = a11;
  uint64_t v64 = a12;
  do
  {
    float32x4_t v54 = vaddq_f32(vdivq_f32(_Q1, vmulq_f32(v66[-1], v66[-1])), v54);
    float32x4_t v68 = vaddq_f32(vdivq_f32(_Q1, vmulq_f32(*v66, *v66)), v68);
    v66 += 2;
    v67 -= 8;
  }
  while (v67);
  float32x4_t v69 = vaddq_f32(v68, v54);
  float v61 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v69, v69));
  if (v35 != v60) {
    goto LABEL_33;
  }
LABEL_35:
  if (v35 <= 7)
  {
    unint64_t v73 = 0;
LABEL_40:
    unint64_t v80 = v35 - v73;
    uint64_t v81 = 4 * v73;
    uint64_t v82 = (float *)&v111[-1] + v73;
    unint64_t v83 = (float *)((char *)&v113[-1] + v81);
    uint64_t v84 = (float *)((char *)&v115[-1] + v81);
    do
    {
      float v85 = *v84++;
      *v83++ = 1.0 / (float)((float)(v85 * v85) * v61);
      *v82++ = 1.0 / (float)(v85 * v85);
      --v80;
    }
    while (v80);
    goto LABEL_42;
  }
  unint64_t v73 = v35 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v74 = (float32x4_t *)v111;
  uint64_t v75 = (float32x4_t *)v113;
  int v76 = (float32x4_t *)v115;
  unint64_t v77 = v35 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v78 = vmulq_f32(v76[-1], v76[-1]);
    float32x4_t v79 = vmulq_f32(*v76, *v76);
    v75[-1] = vdivq_f32(_Q1, vmulq_n_f32(v78, v61));
    *uint64_t v75 = vdivq_f32(_Q1, vmulq_n_f32(v79, v61));
    v74[-1] = vdivq_f32(_Q1, v78);
    *uint64_t v74 = vdivq_f32(_Q1, v79);
    v74 += 2;
    v75 += 2;
    v76 += 2;
    v77 -= 8;
  }
  while (v77);
  if (v35 != v73) {
    goto LABEL_40;
  }
LABEL_42:
  int v86 = &v110;
  int v87 = (unint64_t *)v118;
  uint64_t v88 = &v112;
  float32x4_t v89 = v123;
  unint64_t v90 = v35;
  do
  {
    uint64_t v91 = *v89++;
    uint64_t v92 = qword_259122008[v91 - 1];
    LODWORD(v91) = *(_DWORD *)v88;
    uint64_t v88 = (long long *)((char *)v88 + 4);
    uint64_t v93 = --v92;
    LODWORD(v65[v93]) = v91;
    unint64_t v94 = *v87++;
    v64[v92] = v94;
    LODWORD(v94) = *(_DWORD *)v86;
    int v86 = (long long *)((char *)v86 + 4);
    LODWORD(v63[v93]) = v94;
    --v90;
  }
  while (v90);
  *this = 0.0;
  *uint64_t v62 = 0.0;
  float32x4_t v95 = v121;
  unint64_t v96 = (float *)&v112;
  float32x4_t v97 = (float *)__dst;
  unint64_t v98 = v35;
  do
  {
    float v99 = *v97++;
    float v100 = v99;
    float v101 = *v96++;
    float v102 = v101;
    *this = *this + (float)(v101 * v100);
    float v103 = *v95++;
    *uint64_t v62 = *v62 + (float)(v103 * v102);
    --v98;
  }
  while (v98);
  *uint64_t v19 = 0.0;
  if (*this > 0.0)
  {
    unint64_t v104 = (float *)v122;
    float v44 = *(float *)v122;
    do
    {
      float v105 = *v104++;
      float v106 = v105;
      if (v105 > v44) {
        float v44 = v106;
      }
      --v35;
    }
    while (v35);
LABEL_51:
    *uint64_t v19 = v44;
  }
  return this;
}

char *peridot::PeridotUserOutput::fusionRMSWeights(char *this, uint64_t a2, float a3, float a4, float a5, float a6, float a7, float *a8)
{
  if (a4 > 200.0) {
    a4 = 200.0;
  }
  if (a3 <= 100.0) {
    float v9 = a3;
  }
  else {
    float v9 = 100.0;
  }
  switch(a2)
  {
    case 1:
      uint64_t v13 = (uint64_t)this;
      double v14 = log(fmax((float)(a4 * 0.005), 0.0) + 0.01);
      double v15 = log(fmax((float)((float)*(unint64_t *)(v13 + 4152) * a5), 0.0) + 0.01);
      long double v16 = log(fmax(a6, 0.01));
      unsigned int v17 = 0;
      float v18 = v16 * -0.549499989 + 2.53259993 + v14 * -4.3210001 + v15 * 2.05990005;
      float v53 = v18;
      goto LABEL_15;
    case 2:
      double v19 = log(fmax((float)(a4 * 0.005), 0.0) + 0.01);
      double v20 = log(fmax((float)(v9 * 0.01), 0.0) + 0.01);
      float v18 = log(fmax(a5, 0.0) + 0.01) * 0.7949 + 2.03110003 + v20 * -6.38390017 + v19 * 1.54900002;
      float v53 = v18;
      unsigned int v17 = 1;
      goto LABEL_15;
    case 3:
      float v18 = log(fmax(a5, 0.0) + 0.01) * 1.05630004 + 5.99139977;
      float v53 = v18;
      unsigned int v17 = 2;
      goto LABEL_15;
    case 12:
      double v25 = log(fmax((float)(a4 * 0.005), 0.0) + 0.01);
      double v26 = log(fmax((float)(v9 * 0.01), 0.0) + 0.01);
      float v18 = log(fmax(a5, 0.0) + 0.01) * 0.0983000025 + 1.60290003 + v26 * -1.53540003 + v25 * 0.0417999998;
      float v53 = v18;
      unsigned int v17 = 3;
      goto LABEL_15;
    case 14:
      double v27 = log(fmax((float)(a4 * 0.005), 0.0) + 0.01);
      double v28 = log(fmax((float)(a7 * 0.01), 0.0) + 0.01);
      double v29 = log(fmax((float)(v9 * 0.01), 0.0) + 0.01);
      float v18 = log(fmax(a6, 0.01)) * -0.450800002 + 3.74679995 + v29 * 1.11870003 + v27 * -1.34060001 + v28 * 0.710300028;
      float v53 = v18;
      unsigned int v17 = 4;
      goto LABEL_15;
    case 15:
      double v21 = log(fmax((float)(a4 * 0.005), 0.0) + 0.01);
      double v22 = log(fmax((float)(a7 * 0.01), 0.0) + 0.01);
      double v23 = log(fmax((float)(v9 * 0.01), 0.0) + 0.01);
      float v18 = log(fmax(a6, 0.01)) * -9.14649963 + -13.5471001 + v23 * 0.333200008 + v21 * 0.564599991 + v22 * 0.164399996;
      float v53 = v18;
      unsigned int v17 = 5;
LABEL_15:
      float32x4_t v30 = &peridot::z_func_temporal[22 * v17];
      if (v18 < *v30)
      {
        float v18 = *v30 + 0.00001;
        float v53 = v18;
      }
      float v31 = peridot::z_func_temporal[22 * v17 + 21];
      if (v18 > v31)
      {
        float v32 = v31 + -0.00001;
        float v53 = v32;
      }
      unint64_t v49 = (char *)&peridot::z_func_temporal[22 * v17];
      uint64_t v50 = 0x1600000001;
      char v51 = 0;
      uint64_t v52 = 88;
      uint64_t v47 = 88;
      float32x4_t v48 = &unk_270717688;
      uint64_t v45 = 0x1600000001;
      char v46 = 0;
      unint64_t v43 = &unk_270717688;
      float v44 = (char *)&peridot::y_func_temporal + 88 * v17;
      uint64_t v39 = &v53;
      uint64_t v40 = 0x100000001;
      char v41 = 0;
      uint64_t v42 = 4;
      uint64_t v37 = 4;
      unint64_t v38 = &unk_270717688;
      float v34 = a8;
      uint64_t v35 = 0x100000001;
      char v36 = 0;
      uint64_t v33 = &unk_270717688;
      Interp1<float,LinearInterpolator<float>>((uint64_t)&v48, (uint64_t)&v43, &v53, 1, (uint64_t)&v33);
      goto LABEL_20;
    case 20:
      float v53 = v9;
      if (v9 >= 2.0)
      {
        if (v9 <= 5.5) {
          goto LABEL_36;
        }
        int v24 = 1085276139;
      }
      else
      {
        int v24 = 1073741866;
      }
      float v53 = *(float *)&v24;
LABEL_36:
      uint64_t v50 = 0xF00000001;
      char v51 = 0;
      uint64_t v52 = 60;
      float32x4_t v48 = &unk_270717688;
      unint64_t v49 = (char *)&peridot::z_func_spatial;
      uint64_t v45 = 0xF00000001;
      char v46 = 0;
      uint64_t v47 = 60;
      unint64_t v43 = &unk_270717688;
      float v44 = (char *)&peridot::y_func_spatial;
      uint64_t v39 = &v53;
      uint64_t v40 = 0x100000001;
      char v41 = 0;
      uint64_t v42 = 4;
      uint64_t v37 = 4;
      unint64_t v38 = &unk_270717688;
      float v34 = a8;
      uint64_t v35 = 0x100000001;
      char v36 = 0;
      uint64_t v33 = &unk_270717688;
      Interp1<float,LinearInterpolator<float>>((uint64_t)&v48, (uint64_t)&v43, &v53, 1, (uint64_t)&v33);
LABEL_20:
      uint64_t v33 = &unk_270717340;
      if (v34 && v36) {
        MEMORY[0x25A2D62A0]();
      }
      unint64_t v38 = &unk_270717340;
      if (v39 && v41) {
        MEMORY[0x25A2D62A0]();
      }
      unint64_t v43 = &unk_270717340;
      if (v44 && v46) {
        MEMORY[0x25A2D62A0]();
      }
      float32x4_t v48 = &unk_270717340;
      this = v49;
      if (v49)
      {
        if (v51) {
          return (char *)MEMORY[0x25A2D62A0]();
        }
      }
      return this;
    default:
      return this;
  }
}

void sub_259021670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v15 = va_arg(va3, void);
  uint64_t v17 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va1);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va2);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)va3);
  _Unwind_Resume(a1);
}

void *peridot::PeridotUserOutput::depthPerPixel(uint64_t a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11 = 0;
  uint64_t v75 = *MEMORY[0x263EF8340];
  uint64_t v72 = 0;
  memset(v71, 0, sizeof(v71));
  uint64_t v74 = 0x4040000000000000;
  *(void *)((char *)v71 + 4) = 0x3F0000003FC00000;
  uint64_t v73 = 0x3FC000003F000000;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v67 = 0u;
  uint64_t v12 = a10 + 136;
  uint64_t v13 = (uint64_t *)(a6 + 128);
  uint64_t v14 = (float *)(a8 + 40);
  uint64_t v15 = (int *)(a1 + 248);
  uint64_t result = &unk_259121B50;
  uint64_t v70 = 0x4080000000000000;
  *(void *)((char *)&v67 + 4) = 0x3F80000040000000;
  HIDWORD(v69) = 1077936128;
  do
  {
    uint64_t v17 = *(v13 - 8);
    float v18 = *(float *)(v17 + 8);
    uint64_t v19 = *(v13 - 12);
    float v20 = *(float *)(v19 + 8);
    uint64_t v21 = *(v13 - 4);
    float v22 = *(float *)(v21 + 8);
    uint64_t v23 = *v13;
    float v24 = *(float *)(*v13 + 8);
    LODWORD(a4) = *(_DWORD *)(v17 + 88);
    float v25 = *(float *)(v19 + 88);
    unint64_t v26 = v18 > 0.99;
    if (v20 > 0.99) {
      ++v26;
    }
    if (v22 > 0.99) {
      ++v26;
    }
    if (v24 > 0.99) {
      ++v26;
    }
    if (*(float *)&a4 > 0.99) {
      ++v26;
    }
    double v27 = v25;
    if (v25 > 0.99) {
      ++v26;
    }
    if (v26 <= 1)
    {
      float v48 = fmaxf(v18, 0.0);
      uint64_t v49 = v20 > v48;
      if (v20 > v48) {
        float v48 = *(float *)(v19 + 8);
      }
      if (v22 > v48)
      {
        float v48 = *(float *)(v21 + 8);
        uint64_t v49 = 2;
      }
      if (v24 > v48)
      {
        float v48 = *(float *)(*v13 + 8);
        uint64_t v49 = 3;
      }
      if (*(float *)&a4 <= v48) {
        float v50 = v48;
      }
      else {
        float v50 = *(float *)(v17 + 88);
      }
      if (*(float *)&a4 > v48) {
        uint64_t v49 = 0;
      }
      BOOL v51 = v25 > v50;
      if (v25 > v50)
      {
        uint64_t v45 = 1;
      }
      else
      {
        float v25 = v50;
        uint64_t v45 = v49;
      }
      LODWORD(v47) = *(float *)&a4 > v48 || v51;
      if (v25 < 0.0)
      {
LABEL_2:
        *(v15 - 14) = 0;
        *((void *)v15 - 10) = 0;
        *((void *)v15 - 9) = 0;
        *(v15 - 16) = 0;
        *(v15 - 15) = 0;
        goto LABEL_3;
      }
    }
    else
    {
      if (v18 <= 0.99) {
        float v28 = 0.0;
      }
      else {
        float v28 = 1.0;
      }
      float v29 = fmaxf(*(v14 - 9) * v28, 0.0);
      if (v20 <= 0.99) {
        float v30 = 0.0;
      }
      else {
        float v30 = 1.0;
      }
      float v31 = *(v14 - 8) * v30;
      uint64_t v32 = v31 > v29;
      if (v31 > v29) {
        float v29 = v31;
      }
      if (v22 <= 0.99) {
        float v33 = 0.0;
      }
      else {
        float v33 = 1.0;
      }
      float v34 = *(v14 - 6) * v33;
      if (v34 > v29) {
        uint64_t v32 = 2;
      }
      else {
        float v34 = v29;
      }
      if (v24 <= 0.99) {
        float v35 = 0.0;
      }
      else {
        float v35 = 1.0;
      }
      float v36 = *(v14 - 5) * v35;
      if (v36 > v34) {
        uint64_t v32 = 3;
      }
      else {
        float v36 = v34;
      }
      if (*(float *)&a4 <= 0.99) {
        float v37 = 0.0;
      }
      else {
        float v37 = 1.0;
      }
      float v38 = *v14 * v37;
      if (v38 <= v36) {
        float v39 = v36;
      }
      else {
        float v39 = *v14 * v37;
      }
      if (v38 > v36) {
        uint64_t v32 = 0;
      }
      if (v27 <= 0.99) {
        float v40 = 0.0;
      }
      else {
        float v40 = 1.0;
      }
      *(float *)&a4 = v14[1] * v40;
      BOOL v41 = *(float *)&a4 > v39;
      if (*(float *)&a4 > v39) {
        uint64_t v32 = 1;
      }
      else {
        *(float *)&a4 = v39;
      }
      if (v38 > v36) {
        BOOL v41 = 1;
      }
      float v42 = v14[3] * 0.0;
      if (v42 <= *(float *)&a4) {
        float v43 = *(float *)&a4;
      }
      else {
        float v43 = v14[3] * 0.0;
      }
      if (v42 > *(float *)&a4) {
        uint64_t v32 = 2;
      }
      float v25 = v14[4] * 0.0;
      BOOL v44 = v25 > v43;
      if (v25 > v43)
      {
        uint64_t v45 = 3;
      }
      else
      {
        float v25 = v43;
        uint64_t v45 = v32;
      }
      int v46 = v42 > *(float *)&a4 || v44;
      LODWORD(v47) = v46 | v41;
    }
    if (v25 <= 0.0) {
      goto LABEL_2;
    }
    uint64_t v52 = result[v45];
    uint64_t v47 = v47;
    switch(v52)
    {
      case 2:
        uint64_t v53 = v17 + 80 * v47;
        float v54 = *(float *)(v53 + 8) * 0.75;
        *((float *)v15 - 19) = v54;
        *(v15 - 20) = *(_DWORD *)(v53 + 16);
        *(v15 - 14) = 0;
        *(v15 - 18) = *(_DWORD *)(v53 + 4);
        *(v15 - 17) = 0;
        int v55 = *(_DWORD *)(v53 + 12);
        *(v15 - 16) = v55;
        uint64_t v52 = 2;
        goto LABEL_90;
      case 3:
        uint64_t v56 = v19 + 80 * v47;
        float v54 = *(float *)(v56 + 8) * 0.75;
        *((float *)v15 - 19) = v54;
        *(v15 - 20) = *(_DWORD *)(v56 + 16);
        *(v15 - 14) = 0;
        *(v15 - 18) = *(_DWORD *)(v56 + 4);
        *(v15 - 17) = 0;
        int v55 = *(_DWORD *)(v56 + 12);
        *(v15 - 16) = v55;
        uint64_t v52 = 3;
        goto LABEL_90;
      case 12:
        uint64_t v47 = 0;
        float v54 = v22 * 0.75;
        *((float *)v15 - 19) = v54;
        *(v15 - 20) = *(_DWORD *)(v21 + 16);
        *(v15 - 14) = 0;
        *(v15 - 18) = *(_DWORD *)(v21 + 4);
        *(v15 - 17) = 0;
        int v55 = *(_DWORD *)(v21 + 12);
        *(v15 - 16) = v55;
        uint64_t v52 = 12;
        goto LABEL_90;
      case 14:
        float v54 = v24 * 0.75;
        *((float *)v15 - 19) = v24 * 0.75;
        float v59 = *(float *)(v23 + 16);
        *((float *)v15 - 20) = v59;
        *(v15 - 14) = 0;
        *(v15 - 18) = *(_DWORD *)(v23 + 4);
        *(v15 - 17) = 0;
        int v55 = *(_DWORD *)(v23 + 12);
        *(v15 - 16) = v55;
        a4 = v59;
        if (a4 >= 3.0e-10)
        {
          uint64_t v47 = 0;
          uint64_t v52 = 14;
LABEL_90:
          *(v15 - 15) = v55;
          if (v54 > 0.0)
          {
            uint64_t v60 = 4 * (v52 - 1);
            float v61 = *(float *)((char *)v71 + v60);
            if (*(unsigned char *)(a9 + v11)) {
              BOOL v62 = v45 == 1;
            }
            else {
              BOOL v62 = 0;
            }
            if (v62) {
              float v61 = v61 + -1.0;
            }
            float v63 = -0.5 - (double)*(char *)(a7 + v11);
            LOBYTE(a4) = *(unsigned char *)(a7 + v11 + 14);
            *(void *)&a4 = vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(*(int8x8_t *)&a4)).u64[0];
            *((float *)v15 - 12) = v63 + 84.0;
            *((float *)v15 - 11) = v61 + (float)SLODWORD(a4);
            float v64 = *(float *)((char *)&v67 + v60);
            uint64_t v65 = qword_259122008[v52 - 1];
            v15[v65 - 10] = 1065353216;
            *(void *)(v12 + 8 * v65) = v47;
            int v66 = *v15 & 0x1FFFFFFF | (v64 << 29);
            int *v15 = v66;
            if ((*((unsigned char *)v15 - 166) & 4) != 0) {
              int *v15 = v66 | 0x40000;
            }
          }
        }
        else
        {
          *(v15 - 19) = 0;
          *(v15 - 15) = v55;
        }
        break;
      default:
        long long v57 = result;
        uint64_t v58 = a7;
        peridot_depth_log("Could not reach here if rmsval>0", 3, v71, a7, 1118306304, a9, &v67, qword_259122008, v67, v68, v69, v70);
        uint64_t result = v57;
        a7 = v58;
        uint64_t v47 = 0;
        int v55 = *(v15 - 16);
        float v54 = *((float *)v15 - 19);
        goto LABEL_90;
    }
LABEL_3:
    ++v11;
    v12 += 216;
    v13 += 24;
    v14 += 27;
    v15 += 74;
  }
  while (v11 != 14);
  return result;
}

void peridot::PeridotDXP::initMacroMembers(peridot::PeridotDXP *this, ADCameraCalibration *a2)
{
  uint64_t v74 = a2;
  peridot::PeridotDxpMacro::init((char *)this + 118864, (long long **)this + 452, (long long **)this + 449, 1.0e-10, 33.0, 1.0);
  peridot::PeridotDxpMacro::init((char *)this + 150312, (long long **)this + 458, (long long **)this + 455, 1.0e-10, 24.0, 0.3);
  uint64_t v4 = (uint64_t **)((char *)this + 181832);
  objc_storeStrong((id *)this + 22726, a2);
  uint64_t v5 = *v4;
  uint64_t v6 = (void **)*((void *)this + 22730);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v6 - (char *)*v4) >> 3);
  if (v6 == (void **)*v4)
  {
    std::vector<std::vector<peridot::ImgHistogram>>::__append((uint64_t)v4, 1 - v7);
  }
  else if (v7 >= 2)
  {
    uint64_t v8 = (void **)(v5 + 3);
    if (v6 != (void **)(v5 + 3))
    {
      uint64_t v9 = (void **)v4[1];
      do
      {
        uint64_t v11 = (char *)*(v9 - 3);
        v9 -= 3;
        uint64_t v10 = v11;
        if (v11)
        {
          uint64_t v12 = (char *)*(v6 - 2);
          uint64_t v13 = v10;
          if (v12 != v10)
          {
            uint64_t v14 = v12 - 24;
            uint64_t v15 = v12 - 24;
            long double v16 = v12 - 24;
            do
            {
              uint64_t v17 = *(void (***)(char *))v16;
              v16 -= 24;
              (*v17)(v15);
              v14 -= 24;
              BOOL v18 = v15 == v10;
              uint64_t v15 = v16;
            }
            while (!v18);
            uint64_t v13 = *v9;
          }
          *(v6 - 2) = v10;
          operator delete(v13);
        }
        uint64_t v6 = v9;
      }
      while (v9 != v8);
    }
    v4[1] = (uint64_t *)v8;
  }
  uint64_t v19 = *v4;
  uint64_t v21 = **v4;
  uint64_t v20 = (*v4)[1];
  unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v21) >> 3);
  if (v20 == v21)
  {
    std::vector<peridot::ImgHistogram>::__append(*v4, 1 - v22);
  }
  else if (v22 >= 2)
  {
    uint64_t v23 = (void (***)(void))(v21 + 24);
    if (v20 != v21 + 24)
    {
      uint64_t v24 = v20 - 24;
      float v25 = (void (***)(void))(v20 - 24);
      unint64_t v26 = (void (***)(void))(v20 - 24);
      do
      {
        double v27 = *v26;
        v26 -= 3;
        (*v27)(v25);
        v24 -= 24;
        BOOL v18 = v25 == v23;
        float v25 = v26;
      }
      while (!v18);
    }
    v19[1] = (uint64_t)v23;
  }
  float v29 = (char *)v4[3];
  float v28 = (char *)v4[4];
  unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3);
  if (v30 > 2)
  {
    if (v28 - v29 != 72)
    {
      float v31 = v29 + 72;
      if (v28 != v29 + 72)
      {
        uint64_t v32 = v28 - 24;
        float v33 = v28 - 24;
        float v34 = v28 - 24;
        do
        {
          float v35 = *(void (***)(char *))v34;
          v34 -= 24;
          (*v35)(v33);
          v32 -= 24;
          BOOL v18 = v33 == v31;
          float v33 = v34;
        }
        while (!v18);
      }
      v4[4] = (uint64_t *)v31;
    }
  }
  else
  {
    std::vector<peridot::ImgHistogram>::__append(v4 + 3, 3 - v30);
  }
  float v37 = (char *)v4[6];
  float v36 = (char *)v4[7];
  unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v36 - v37) >> 3);
  if (v38 > 2)
  {
    if (v36 - v37 != 72)
    {
      float v39 = v37 + 72;
      if (v36 != v37 + 72)
      {
        float v40 = v36 - 24;
        BOOL v41 = v36 - 24;
        float v42 = v36 - 24;
        do
        {
          float v43 = *(void (***)(char *))v42;
          v42 -= 24;
          (*v43)(v41);
          v40 -= 24;
          BOOL v18 = v41 == v39;
          BOOL v41 = v42;
        }
        while (!v18);
      }
      v4[7] = (uint64_t *)v39;
    }
  }
  else
  {
    std::vector<peridot::ImgHistogram>::__append(v4 + 6, 3 - v38);
  }
  BOOL v44 = v4[9];
  uint64_t v45 = (void **)v4[10];
  unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)v45 - (char *)v44) >> 3);
  if (v45 == (void **)v44)
  {
    std::vector<std::vector<peridot::ImgHistogram>>::__append((uint64_t)(v4 + 9), 1 - v46);
  }
  else if (v46 >= 2)
  {
    uint64_t v47 = (void **)(v44 + 3);
    if (v45 != (void **)(v44 + 3))
    {
      float v48 = (void **)v4[10];
      do
      {
        float v50 = (char *)*(v48 - 3);
        v48 -= 3;
        uint64_t v49 = v50;
        if (v50)
        {
          BOOL v51 = (char *)*(v45 - 2);
          uint64_t v52 = v49;
          if (v51 != v49)
          {
            uint64_t v53 = v51 - 24;
            float v54 = v51 - 24;
            int v55 = v51 - 24;
            do
            {
              uint64_t v56 = *(void (***)(char *))v55;
              v55 -= 24;
              (*v56)(v54);
              v53 -= 24;
              BOOL v18 = v54 == v49;
              float v54 = v55;
            }
            while (!v18);
            uint64_t v52 = *v48;
          }
          *(v45 - 2) = v49;
          operator delete(v52);
        }
        uint64_t v45 = v48;
      }
      while (v48 != v47);
    }
    v4[10] = (uint64_t *)v47;
  }
  long long v57 = v4[9];
  uint64_t v59 = *v57;
  uint64_t v58 = v57[1];
  unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((v58 - *v57) >> 3);
  if (v58 == *v57)
  {
    std::vector<peridot::ImgHistogram>::__append(v57, 1 - v60);
  }
  else if (v60 >= 2)
  {
    float v61 = (void (***)(void))(v59 + 24);
    if (v58 != v59 + 24)
    {
      uint64_t v62 = v58 - 24;
      float v63 = (void (***)(void))(v58 - 24);
      float v64 = (void (***)(void))(v58 - 24);
      do
      {
        uint64_t v65 = *v64;
        v64 -= 3;
        (*v65)(v63);
        v62 -= 24;
        BOOL v18 = v63 == v61;
        float v63 = v64;
      }
      while (!v18);
    }
    v57[1] = (uint64_t)v61;
  }
  int v66 = v4[12];
  unint64_t v67 = (char *)v4[13] - (char *)v66;
  if (v67)
  {
    if (v67 >= 9) {
      v4[13] = v66 + 1;
    }
  }
  else
  {
    std::vector<std::vector<peridot::ImgHistogram> *,std::allocator<std::vector<peridot::ImgHistogram> *>>::__append((uint64_t)(v4 + 12), 1uLL);
  }
  long long v68 = v4[15];
  unint64_t v69 = (char *)v4[16] - (char *)v68;
  if (v69)
  {
    if (v69 >= 9) {
      v4[16] = v68 + 1;
    }
  }
  else
  {
    std::vector<std::vector<peridot::ImgHistogram> *,std::allocator<std::vector<peridot::ImgHistogram> *>>::__append((uint64_t)(v4 + 15), 1uLL);
  }
  uint64_t v70 = v4[18];
  unint64_t v71 = (char *)v4[19] - (char *)v70;
  if (v71)
  {
    if (v71 >= 9) {
      v4[19] = v70 + 1;
    }
  }
  else
  {
    std::vector<std::vector<peridot::ImgHistogram> *,std::allocator<std::vector<peridot::ImgHistogram> *>>::__append((uint64_t)(v4 + 18), 1uLL);
  }
  uint64_t v72 = v4[21];
  unint64_t v73 = (char *)v4[22] - (char *)v72;
  if (v73)
  {
    if (v73 >= 9) {
      v4[22] = v72 + 1;
    }
  }
  else
  {
    std::vector<std::vector<peridot::ImgHistogram> *,std::allocator<std::vector<peridot::ImgHistogram> *>>::__append((uint64_t)(v4 + 21), 1uLL);
  }
}

void sub_259022170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void std::vector<std::vector<peridot::ImgHistogram> *,std::allocator<std::vector<peridot::ImgHistogram> *>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    unint64_t v7 = *(char **)a1;
    uint64_t v8 = (uint64_t)&v5[-*(void *)a1];
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v4 - (void)v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    long double v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      unint64_t v7 = v5;
    }
    else
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_33;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_33;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v6 = &v5[-8 * (v19 & 0x3FFFFFFFFFFFFFFCLL)];
      uint64_t v20 = &v13[8 * v9 - 16];
      uint64_t v21 = v5 - 16;
      uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 4;
      }
      while (v22);
      v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_33:
        do
        {
          uint64_t v24 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v24;
          v14 -= 8;
        }
        while (v6 != v7);
        unint64_t v7 = *(char **)a1;
      }
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v17;
    *(void *)(a1 + 16) = v16;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void std::vector<std::vector<peridot::ImgHistogram>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void ***)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      uint64_t v5 = (void **)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    uint64_t v6 = *(void ***)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[24 * v7];
    uint64_t v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    long double v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        uint64_t v17 = v13;
        *((void *)v13 - 2) = 0;
        *((void *)v13 - 1) = 0;
        long long v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((void *)v17 - 1) = v5[2];
        char *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      uint64_t v5 = *(void ***)a1;
      uint64_t v19 = *(void ***)(a1 + 8);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        uint64_t v20 = v19;
        do
        {
          uint64_t v22 = (char *)*(v20 - 3);
          v20 -= 3;
          uint64_t v21 = v22;
          if (v22)
          {
            long long v23 = (char *)*(v19 - 2);
            uint64_t v24 = v21;
            if (v23 != v21)
            {
              float v25 = v23 - 24;
              unint64_t v26 = v23 - 24;
              double v27 = v23 - 24;
              do
              {
                float v28 = *(void (***)(char *))v27;
                v27 -= 24;
                (*v28)(v26);
                v25 -= 24;
                BOOL v29 = v26 == v21;
                unint64_t v26 = v27;
              }
              while (!v29);
              uint64_t v24 = *v20;
            }
            *(v19 - 2) = v21;
            operator delete(v24);
          }
          uint64_t v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void peridot::PeridotDxpMacro::init(char *a1, long long **a2, long long **a3, float a4, float a5, float a6)
{
  unint64_t v7 = a1;
  int v8 = 0;
  *((float *)a1 + 42) = a6;
  *((float *)a1 + 7858) = a4;
  *((_DWORD *)a1 + 43) = 1056964608;
  uint64_t v198 = (float **)(a1 + 176);
  unint64_t v9 = (float *)*((void *)a1 + 23);
  do
  {
    float v11 = (float)v8;
    unint64_t v12 = *((void *)v7 + 24);
    if ((unint64_t)v9 < v12)
    {
      float *v9 = v11;
      unint64_t v10 = v9 + 1;
      goto LABEL_3;
    }
    uint64_t v13 = *v198;
    uint64_t v14 = (char *)v9 - (char *)*v198;
    uint64_t v15 = v14 >> 2;
    unint64_t v16 = (v14 >> 2) + 1;
    if (v16 >> 62) {
      goto LABEL_266;
    }
    uint64_t v17 = v12 - (void)v13;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        goto LABEL_267;
      }
      a1 = (char *)operator new(4 * v18);
    }
    else
    {
      a1 = 0;
    }
    uint64_t v19 = (float *)&a1[4 * v15];
    *uint64_t v19 = v11;
    unint64_t v10 = v19 + 1;
    if (v9 != v13)
    {
      unint64_t v20 = (char *)(v9 - 1) - (char *)v13;
      if (v20 < 0xBC)
      {
        uint64_t v21 = v9;
        goto LABEL_18;
      }
      if (&a1[v14 - 4 - (v20 & 0xFFFFFFFFFFFFFFFCLL)] > &a1[v14 - 4])
      {
        uint64_t v21 = v9;
        do
        {
LABEL_18:
          int v22 = *((_DWORD *)v21-- - 1);
          *((_DWORD *)v19-- - 1) = v22;
        }
        while (v21 != v13);
        goto LABEL_19;
      }
      if ((float *)((char *)v9 - (v20 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v9 - 1)
      {
        uint64_t v21 = v9;
        goto LABEL_18;
      }
      if ((unint64_t)((char *)v9 - a1 - v14) < 0x20)
      {
        uint64_t v21 = v9;
        goto LABEL_18;
      }
      uint64_t v23 = (v20 >> 2) + 1;
      uint64_t v21 = &v9[-(v23 & 0x7FFFFFFFFFFFFFF8)];
      uint64_t v24 = &a1[4 * v15 - 16];
      float v25 = v9 - 4;
      uint64_t v26 = v23 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v27 = *(_OWORD *)v25;
        *((_OWORD *)v24 - 1) = *((_OWORD *)v25 - 1);
        *(_OWORD *)uint64_t v24 = v27;
        v24 -= 32;
        v25 -= 8;
        v26 -= 8;
      }
      while (v26);
      v19 -= v23 & 0x7FFFFFFFFFFFFFF8;
      if (v23 != (v23 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_18;
      }
    }
LABEL_19:
    *((void *)v7 + 22) = v19;
    *((void *)v7 + 23) = v10;
    *((void *)v7 + 24) = &a1[4 * v18];
    if (v13) {
      operator delete(v13);
    }
LABEL_3:
    *((void *)v7 + 23) = v10;
    ++v8;
    unint64_t v9 = v10;
  }
  while (v8 != 46);
  float v28 = 3.0;
  if (a5 >= 3.0)
  {
    BOOL v51 = (float *)*((void *)v7 + 26);
    while (1)
    {
      unint64_t v53 = *((void *)v7 + 27);
      if ((unint64_t)v51 >= v53) {
        break;
      }
      float *v51 = v28;
      uint64_t v52 = v51 + 1;
LABEL_66:
      *((void *)v7 + 26) = v52;
      float v28 = *((float *)v7 + 43) + v28;
      BOOL v51 = v52;
      if (v28 > a5) {
        goto LABEL_32;
      }
    }
    float v54 = (float *)*((void *)v7 + 25);
    uint64_t v55 = v51 - v54;
    unint64_t v56 = v55 + 1;
    if ((unint64_t)(v55 + 1) >> 62) {
      goto LABEL_266;
    }
    uint64_t v57 = v53 - (void)v54;
    if (v57 >> 1 > v56) {
      unint64_t v56 = v57 >> 1;
    }
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v58 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v58 = v56;
    }
    if (v58)
    {
      if (v58 >> 62) {
        goto LABEL_267;
      }
      a1 = (char *)operator new(4 * v58);
    }
    else
    {
      a1 = 0;
    }
    uint64_t v59 = (float *)&a1[4 * v55];
    *uint64_t v59 = v28;
    uint64_t v52 = v59 + 1;
    if (v51 == v54) {
      goto LABEL_82;
    }
    unint64_t v60 = (char *)(v51 - 1) - (char *)v54;
    if (v60 < 0xBC)
    {
      float v61 = v51;
      goto LABEL_81;
    }
    if (&a1[(char *)v51 - (char *)v54 - 4 - (v60 & 0xFFFFFFFFFFFFFFFCLL)] > &a1[(char *)v51 - (char *)v54 - 4])
    {
      float v61 = v51;
    }
    else
    {
      if ((float *)((char *)v51 - (v60 & 0xFFFFFFFFFFFFFFFCLL) - 4) <= v51 - 1)
      {
        if ((unint64_t)((char *)v54 - a1) < 0x20)
        {
          float v61 = v51;
          goto LABEL_81;
        }
        uint64_t v63 = (v60 >> 2) + 1;
        float v61 = &v51[-(v63 & 0x7FFFFFFFFFFFFFF8)];
        float v64 = &a1[4 * v55 - 16];
        uint64_t v65 = v51 - 4;
        uint64_t v66 = v63 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v67 = *(_OWORD *)v65;
          *((_OWORD *)v64 - 1) = *((_OWORD *)v65 - 1);
          *(_OWORD *)float v64 = v67;
          v64 -= 32;
          v65 -= 8;
          v66 -= 8;
        }
        while (v66);
        v59 -= v63 & 0x7FFFFFFFFFFFFFF8;
        if (v63 != (v63 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_81;
        }
LABEL_82:
        *((void *)v7 + 25) = v59;
        *((void *)v7 + 26) = v52;
        *((void *)v7 + 27) = &a1[4 * v58];
        if (v54) {
          operator delete(v54);
        }
        goto LABEL_66;
      }
      float v61 = v51;
    }
    do
    {
LABEL_81:
      int v62 = *((_DWORD *)v61-- - 1);
      *((_DWORD *)v59-- - 1) = v62;
    }
    while (v61 != v54);
    goto LABEL_82;
  }
LABEL_32:
  BOOL v29 = (float *)*((void *)v7 + 32);
  for (int i = -15; i != 16; ++i)
  {
    float v32 = (float)i;
    unint64_t v33 = *((void *)v7 + 33);
    if ((unint64_t)v29 < v33)
    {
      float *v29 = v32;
      float v31 = v29 + 1;
      goto LABEL_34;
    }
    float v34 = (float *)*((void *)v7 + 31);
    uint64_t v35 = v29 - v34;
    unint64_t v36 = v35 + 1;
    if ((unint64_t)(v35 + 1) >> 62) {
      goto LABEL_266;
    }
    uint64_t v37 = v33 - (void)v34;
    if (v37 >> 1 > v36) {
      unint64_t v36 = v37 >> 1;
    }
    if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v38 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v38 = v36;
    }
    if (v38)
    {
      if (v38 >> 62) {
        goto LABEL_267;
      }
      a1 = (char *)operator new(4 * v38);
    }
    else
    {
      a1 = 0;
    }
    float v39 = (float *)&a1[4 * v35];
    *float v39 = v32;
    float v31 = v39 + 1;
    if (v29 != v34)
    {
      unint64_t v40 = (char *)(v29 - 1) - (char *)v34;
      if (v40 < 0xBC)
      {
        BOOL v41 = v29;
        goto LABEL_49;
      }
      if (&a1[(char *)v29 - (char *)v34 - 4 - (v40 & 0xFFFFFFFFFFFFFFFCLL)] > &a1[(char *)v29 - (char *)v34 - 4])
      {
        BOOL v41 = v29;
        do
        {
LABEL_49:
          int v42 = *((_DWORD *)v41-- - 1);
          *((_DWORD *)v39-- - 1) = v42;
        }
        while (v41 != v34);
        goto LABEL_50;
      }
      if ((float *)((char *)v29 - (v40 & 0xFFFFFFFFFFFFFFFCLL) - 4) > v29 - 1)
      {
        BOOL v41 = v29;
        goto LABEL_49;
      }
      if ((unint64_t)((char *)v34 - a1) < 0x20)
      {
        BOOL v41 = v29;
        goto LABEL_49;
      }
      uint64_t v43 = (v40 >> 2) + 1;
      BOOL v41 = &v29[-(v43 & 0x7FFFFFFFFFFFFFF8)];
      BOOL v44 = &a1[4 * v35 - 16];
      uint64_t v45 = v29 - 4;
      uint64_t v46 = v43 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v47 = *(_OWORD *)v45;
        *((_OWORD *)v44 - 1) = *((_OWORD *)v45 - 1);
        *(_OWORD *)BOOL v44 = v47;
        v44 -= 32;
        v45 -= 8;
        v46 -= 8;
      }
      while (v46);
      v39 -= v43 & 0x7FFFFFFFFFFFFFF8;
      if (v43 != (v43 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_49;
      }
    }
LABEL_50:
    *((void *)v7 + 31) = v39;
    *((void *)v7 + 32) = v31;
    *((void *)v7 + 33) = &a1[4 * v38];
    if (v34) {
      operator delete(v34);
    }
LABEL_34:
    *((void *)v7 + 32) = v31;
    BOOL v29 = v31;
  }
  uint64_t v49 = (char *)*((void *)v7 + 29);
  float v48 = (char *)*((void *)v7 + 30);
  if (v49 < v48)
  {
    *(_DWORD *)uint64_t v49 = 0;
    float v50 = v49 + 4;
    goto LABEL_113;
  }
  long long v68 = (unsigned char *)*((void *)v7 + 28);
  uint64_t v69 = (v49 - v68) >> 2;
  unint64_t v70 = v69 + 1;
  if ((unint64_t)(v69 + 1) >> 62) {
    goto LABEL_266;
  }
  uint64_t v71 = v48 - v68;
  if (v71 >> 1 > v70) {
    unint64_t v70 = v71 >> 1;
  }
  if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v72 = v70;
  }
  if (v72)
  {
    if (!(v72 >> 62))
    {
      a1 = (char *)operator new(4 * v72);
      goto LABEL_104;
    }
LABEL_267:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  a1 = 0;
LABEL_104:
  unint64_t v73 = &a1[4 * v69];
  float v48 = &a1[4 * v72];
  *(_DWORD *)unint64_t v73 = 0;
  float v50 = v73 + 4;
  if (v49 != v68)
  {
    unint64_t v74 = v49 - v68 - 4;
    if (v74 < 0x2C) {
      goto LABEL_272;
    }
    if ((unint64_t)(v68 - a1) < 0x20) {
      goto LABEL_272;
    }
    uint64_t v75 = (v74 >> 2) + 1;
    int v76 = &a1[4 * v69 - 16];
    unint64_t v77 = (long long *)(v49 - 16);
    uint64_t v78 = v75 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v79 = *v77;
      *((_OWORD *)v76 - 1) = *(v77 - 1);
      *(_OWORD *)int v76 = v79;
      v76 -= 32;
      v77 -= 2;
      v78 -= 8;
    }
    while (v78);
    v73 -= 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
    v49 -= 4 * (v75 & 0x7FFFFFFFFFFFFFF8);
    if (v75 != (v75 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_272:
      do
      {
        int v80 = *((_DWORD *)v49 - 1);
        v49 -= 4;
        *((_DWORD *)v73 - 1) = v80;
        v73 -= 4;
      }
      while (v49 != v68);
    }
  }
  *((void *)v7 + 28) = v73;
  *((void *)v7 + 29) = v50;
  *((void *)v7 + 30) = v48;
  if (v68)
  {
    operator delete(v68);
    float v48 = (char *)*((void *)v7 + 30);
  }
LABEL_113:
  *((void *)v7 + 29) = v50;
  if (v50 < v48)
  {
    *(_DWORD *)float v50 = 1045220557;
    uint64_t v81 = v50 + 4;
    goto LABEL_136;
  }
  uint64_t v82 = (char *)*((void *)v7 + 28);
  uint64_t v83 = (v50 - v82) >> 2;
  unint64_t v84 = v83 + 1;
  if ((unint64_t)(v83 + 1) >> 62) {
    goto LABEL_266;
  }
  uint64_t v85 = v48 - v82;
  if (v85 >> 1 > v84) {
    unint64_t v84 = v85 >> 1;
  }
  if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v86 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v86 = v84;
  }
  if (v86)
  {
    if (v86 >> 62) {
      goto LABEL_267;
    }
    a1 = (char *)operator new(4 * v86);
  }
  else
  {
    a1 = 0;
  }
  int v87 = &a1[4 * v83];
  float v48 = &a1[4 * v86];
  *(_DWORD *)int v87 = 1045220557;
  uint64_t v81 = v87 + 4;
  if (v50 != v82)
  {
    unint64_t v88 = v50 - v82 - 4;
    if (v88 < 0x2C)
    {
      float32x4_t v89 = v50;
      goto LABEL_133;
    }
    if ((unint64_t)(v82 - a1) < 0x20)
    {
      float32x4_t v89 = v50;
      goto LABEL_133;
    }
    uint64_t v90 = (v88 >> 2) + 1;
    float32x4_t v89 = &v50[-4 * (v90 & 0x7FFFFFFFFFFFFFF8)];
    uint64_t v91 = &a1[4 * v83 - 16];
    uint64_t v92 = (long long *)(v50 - 16);
    uint64_t v93 = v90 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v94 = *v92;
      *((_OWORD *)v91 - 1) = *(v92 - 1);
      *(_OWORD *)uint64_t v91 = v94;
      v91 -= 32;
      v92 -= 2;
      v93 -= 8;
    }
    while (v93);
    v87 -= 4 * (v90 & 0x7FFFFFFFFFFFFFF8);
    if (v90 != (v90 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_133:
        int v95 = *((_DWORD *)v89 - 1);
        v89 -= 4;
        *((_DWORD *)v87 - 1) = v95;
        v87 -= 4;
      }
      while (v89 != v82);
    }
  }
  *((void *)v7 + 28) = v87;
  *((void *)v7 + 29) = v81;
  *((void *)v7 + 30) = v48;
  if (v82)
  {
    operator delete(v82);
    float v48 = (char *)*((void *)v7 + 30);
  }
LABEL_136:
  *((void *)v7 + 29) = v81;
  if (v81 < v48)
  {
    *(_DWORD *)uint64_t v81 = 1053609165;
    unint64_t v96 = v81 + 4;
    goto LABEL_159;
  }
  float32x4_t v97 = (char *)*((void *)v7 + 28);
  uint64_t v98 = (v81 - v97) >> 2;
  unint64_t v99 = v98 + 1;
  if ((unint64_t)(v98 + 1) >> 62) {
    goto LABEL_266;
  }
  uint64_t v100 = v48 - v97;
  if (v100 >> 1 > v99) {
    unint64_t v99 = v100 >> 1;
  }
  if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v101 = v99;
  }
  if (v101)
  {
    if (v101 >> 62) {
      goto LABEL_267;
    }
    a1 = (char *)operator new(4 * v101);
  }
  else
  {
    a1 = 0;
  }
  float v102 = &a1[4 * v98];
  float v48 = &a1[4 * v101];
  *(_DWORD *)float v102 = 1053609165;
  unint64_t v96 = v102 + 4;
  if (v81 != v97)
  {
    unint64_t v103 = v81 - v97 - 4;
    if (v103 < 0x2C)
    {
      unint64_t v104 = v81;
      goto LABEL_156;
    }
    if ((unint64_t)(v97 - a1) < 0x20)
    {
      unint64_t v104 = v81;
      goto LABEL_156;
    }
    uint64_t v105 = (v103 >> 2) + 1;
    unint64_t v104 = &v81[-4 * (v105 & 0x7FFFFFFFFFFFFFF8)];
    float v106 = &a1[4 * v98 - 16];
    uint64_t v107 = (long long *)(v81 - 16);
    uint64_t v108 = v105 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v109 = *v107;
      *((_OWORD *)v106 - 1) = *(v107 - 1);
      *(_OWORD *)float v106 = v109;
      v106 -= 32;
      v107 -= 2;
      v108 -= 8;
    }
    while (v108);
    v102 -= 4 * (v105 & 0x7FFFFFFFFFFFFFF8);
    if (v105 != (v105 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_156:
        int v110 = *((_DWORD *)v104 - 1);
        v104 -= 4;
        *((_DWORD *)v102 - 1) = v110;
        v102 -= 4;
      }
      while (v104 != v97);
    }
  }
  *((void *)v7 + 28) = v102;
  *((void *)v7 + 29) = v96;
  *((void *)v7 + 30) = v48;
  if (v97)
  {
    operator delete(v97);
    float v48 = (char *)*((void *)v7 + 30);
  }
LABEL_159:
  *((void *)v7 + 29) = v96;
  if (v96 < v48)
  {
    *(_DWORD *)unint64_t v96 = 1058642330;
    unint64_t v111 = v96 + 4;
    goto LABEL_182;
  }
  long long v112 = (char *)*((void *)v7 + 28);
  uint64_t v113 = (v96 - v112) >> 2;
  unint64_t v114 = v113 + 1;
  if ((unint64_t)(v113 + 1) >> 62) {
    goto LABEL_266;
  }
  uint64_t v115 = v48 - v112;
  if (v115 >> 1 > v114) {
    unint64_t v114 = v115 >> 1;
  }
  if ((unint64_t)v115 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v116 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v116 = v114;
  }
  if (v116)
  {
    if (v116 >> 62) {
      goto LABEL_267;
    }
    a1 = (char *)operator new(4 * v116);
  }
  else
  {
    a1 = 0;
  }
  uint64_t v117 = &a1[4 * v113];
  float v48 = &a1[4 * v116];
  *(_DWORD *)uint64_t v117 = 1058642330;
  unint64_t v111 = v117 + 4;
  if (v96 != v112)
  {
    unint64_t v118 = v96 - v112 - 4;
    if (v118 < 0x2C)
    {
      unint64_t v119 = v96;
      goto LABEL_179;
    }
    if ((unint64_t)(v112 - a1) < 0x20)
    {
      unint64_t v119 = v96;
      goto LABEL_179;
    }
    uint64_t v120 = (v118 >> 2) + 1;
    unint64_t v119 = &v96[-4 * (v120 & 0x7FFFFFFFFFFFFFF8)];
    int32x2_t v121 = &a1[4 * v113 - 16];
    int32x2_t v122 = v96 - 16;
    uint64_t v123 = v120 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v124 = *(_OWORD *)v122;
      *((_OWORD *)v121 - 1) = *((_OWORD *)v122 - 1);
      *(_OWORD *)int32x2_t v121 = v124;
      v121 -= 32;
      v122 -= 32;
      v123 -= 8;
    }
    while (v123);
    v117 -= 4 * (v120 & 0x7FFFFFFFFFFFFFF8);
    if (v120 != (v120 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_179:
        int v125 = *((_DWORD *)v119 - 1);
        v119 -= 4;
        *((_DWORD *)v117 - 1) = v125;
        v117 -= 4;
      }
      while (v119 != v112);
    }
  }
  *((void *)v7 + 28) = v117;
  *((void *)v7 + 29) = v111;
  *((void *)v7 + 30) = v48;
  if (v112)
  {
    operator delete(v112);
    float v48 = (char *)*((void *)v7 + 30);
  }
LABEL_182:
  *((void *)v7 + 29) = v111;
  if (v111 < v48)
  {
    *(_DWORD *)unint64_t v111 = 1061997773;
    uint64_t v126 = v111 + 4;
    goto LABEL_205;
  }
  unint64_t v127 = (char *)*((void *)v7 + 28);
  uint64_t v128 = (v111 - v127) >> 2;
  unint64_t v129 = v128 + 1;
  if ((unint64_t)(v128 + 1) >> 62) {
    goto LABEL_266;
  }
  uint64_t v130 = v48 - v127;
  if (v130 >> 1 > v129) {
    unint64_t v129 = v130 >> 1;
  }
  if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v131 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v131 = v129;
  }
  if (v131)
  {
    if (v131 >> 62) {
      goto LABEL_267;
    }
    a1 = (char *)operator new(4 * v131);
  }
  else
  {
    a1 = 0;
  }
  int64x2_t v132 = &a1[4 * v128];
  *(_DWORD *)int64x2_t v132 = 1061997773;
  uint64_t v126 = v132 + 4;
  if (v111 != v127)
  {
    unint64_t v133 = v111 - v127 - 4;
    if (v133 < 0x2C)
    {
      uint64_t v134 = v111;
      goto LABEL_202;
    }
    if ((unint64_t)(v127 - a1) < 0x20)
    {
      uint64_t v134 = v111;
      goto LABEL_202;
    }
    uint64_t v135 = (v133 >> 2) + 1;
    uint64_t v134 = &v111[-4 * (v135 & 0x7FFFFFFFFFFFFFF8)];
    unint64_t v136 = &a1[4 * v128 - 16];
    uint64_t v137 = v111 - 16;
    uint64_t v138 = v135 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v139 = *(_OWORD *)v137;
      *((_OWORD *)v136 - 1) = *((_OWORD *)v137 - 1);
      *(_OWORD *)unint64_t v136 = v139;
      v136 -= 32;
      v137 -= 32;
      v138 -= 8;
    }
    while (v138);
    v132 -= 4 * (v135 & 0x7FFFFFFFFFFFFFF8);
    if (v135 != (v135 & 0x7FFFFFFFFFFFFFF8))
    {
      do
      {
LABEL_202:
        int v140 = *((_DWORD *)v134 - 1);
        v134 -= 4;
        *((_DWORD *)v132 - 1) = v140;
        v132 -= 4;
      }
      while (v134 != v127);
    }
  }
  *((void *)v7 + 28) = v132;
  *((void *)v7 + 29) = v126;
  *((void *)v7 + 30) = &a1[4 * v131];
  if (v127) {
    operator delete(v127);
  }
LABEL_205:
  *((void *)v7 + 29) = v126;
  peridot::PeridotDxpMacro::initializePulses((uint64_t)a1, a2, 0, (uint64_t *)v7 + 3, (uint64_t *)v7 + 6, (void *)v7 + 9);
  peridot::PeridotDxpMacro::initializePulses(v141, a3, peridot::gCOMP_LEVEL, (uint64_t *)v7 + 12, (uint64_t *)v7 + 15, (void *)v7 + 18);
  uint64_t v143 = (uint64_t)(*((void *)v7 + 23) - *((void *)v7 + 22)) >> 2;
  uint64_t v201 = 0;
  unint64_t v202 = 0;
  uint64_t v200 = 0;
  size_t v144 = v143 - 1;
  if (v144)
  {
    if (!(v144 >> 62))
    {
      size_t v145 = v144;
      float32x4_t v146 = (__int32 *)operator new(4 * v144);
      unint64_t v147 = &v146[v145];
      uint64_t v200 = (float *)v146;
      unint64_t v202 = &v146[v145];
      bzero(v146, v145 * 4);
      uint64_t v201 = v147;
      goto LABEL_208;
    }
LABEL_266:
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
LABEL_208:
  peridot::PeridotDxpMacro::getPulseShape(v142, (uint64_t *)v7 + 9, (uint64_t *)v7 + 6, v198, 0, (__int32 **)&v200);
  unint64_t v149 = (__int32 *)v200;
  if (((char *)v201 - (char *)v200) >> 2 == 1)
  {
    float v156 = -3.0;
  }
  else
  {
    unint64_t v150 = 0;
    unint64_t v151 = 0;
    float v152 = *v200;
    float v153 = 0.0;
    do
    {
      float v154 = v200[v150 + 1] - v152;
      if (v154 > v153) {
        unint64_t v151 = v150;
      }
      unint64_t v155 = v150 + 1;
      if (v154 > v153) {
        float v153 = v154;
      }
      float v152 = v200[++v150];
    }
    while ((((char *)v201 - (char *)v200) >> 2) - 1 != v155);
    float v156 = (float)v151 + -3.0;
  }
  *((float *)v7 + 68) = v156;
  *((float *)v7 + 69) = v156;
  int v199 = 0;
  int64x2_t v157 = (char *)*((void *)v7 + 35);
  float v158 = (char *)*((void *)v7 + 36);
  uint64_t v159 = v158 - v157;
  if ((unint64_t)(v158 - v157) > 0x18F)
  {
    if (v159 == 400) {
      goto LABEL_257;
    }
    BOOL v168 = v157 + 400;
    goto LABEL_238;
  }
  unint64_t v160 = (unint64_t)v159 >> 2;
  unint64_t v161 = 100 - ((unint64_t)v159 >> 2);
  uint64_t v162 = *((void *)v7 + 37);
  if (v161 <= (v162 - (uint64_t)v158) >> 2)
  {
    BOOL v168 = &v158[4 * v161];
    unint64_t v169 = (99 - v160) & 0x3FFFFFFFFFFFFFFFLL;
    if (v169 >= 0xF && (v158 >= (char *)&v200 || v168 <= (char *)&v199))
    {
      unint64_t v170 = v169 + 1;
      uint64_t v171 = (_OWORD *)*((void *)v7 + 36);
      uint64_t v172 = v170 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        *uint64_t v171 = 0uLL;
        v171[1] = 0uLL;
        v171 += 2;
        v172 -= 8;
      }
      while (v172);
      if (v170 == (v170 & 0x7FFFFFFFFFFFFFF8)) {
        goto LABEL_238;
      }
      v158 += 4 * (v170 & 0x7FFFFFFFFFFFFFF8);
    }
    do
    {
      *(_DWORD *)float v158 = v199;
      v158 += 4;
    }
    while (v158 != v168);
LABEL_238:
    *((void *)v7 + 36) = v168;
    goto LABEL_257;
  }
  uint64_t v163 = v159 >> 2;
  unint64_t v164 = (v159 >> 2) + v161;
  if (v164 >> 62) {
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v165 = v162 - (void)v157;
  if (v165 >> 1 > v164) {
    unint64_t v164 = v165 >> 1;
  }
  if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v166 = v164;
  }
  if (v166)
  {
    if (v166 >> 62) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v167 = operator new(4 * v166);
  }
  else
  {
    uint64_t v167 = 0;
  }
  uint64_t v173 = (float **)&v167[4 * v163];
  uint64_t v174 = (_DWORD *)v173 + v161;
  unint64_t v175 = (99 - v160) & 0x3FFFFFFFFFFFFFFFLL;
  int64x2_t v176 = v173;
  if (v175 < 0x13 || v173 < &v200 && (int64x2_t v176 = &v167[4 * v163], &v167[4 * v161 + v159] > (unsigned char *)&v199))
  {
    do
LABEL_247:
      *v176++ = v199;
    while (v176 != v174);
  }
  else
  {
    uint64_t v177 = (v175 + 1) & 0x7FFFFFFFFFFFFFF8;
    unint64_t v178 = &v167[4 * v163];
    uint64_t v179 = v177;
    do
    {
      *unint64_t v178 = 0uLL;
      v178[1] = 0uLL;
      v178 += 2;
      v179 -= 8;
    }
    while (v179);
    if (v175 + 1 != v177)
    {
      int64x2_t v176 = (_DWORD *)v173 + v177;
      goto LABEL_247;
    }
  }
  if (v158 != v157)
  {
    unint64_t v180 = v158 - v157 - 4;
    if (v180 < 0x2C) {
      goto LABEL_273;
    }
    if ((unint64_t)(v157 - v167) < 0x20) {
      goto LABEL_273;
    }
    uint64_t v181 = (v180 >> 2) + 1;
    unint64_t v182 = &v167[4 * v163 - 16];
    float v183 = v158 - 16;
    uint64_t v184 = v181 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v185 = *(_OWORD *)v183;
      *(v182 - 1) = *((_OWORD *)v183 - 1);
      _OWORD *v182 = v185;
      v182 -= 2;
      v183 -= 32;
      v184 -= 8;
    }
    while (v184);
    uint64_t v173 = (float **)((char *)v173 - 4 * (v181 & 0x7FFFFFFFFFFFFFF8));
    v158 -= 4 * (v181 & 0x7FFFFFFFFFFFFFF8);
    if (v181 != (v181 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_273:
      do
      {
        int v186 = *((_DWORD *)v158 - 1);
        v158 -= 4;
        *((_DWORD *)v173 - 1) = v186;
        uint64_t v173 = (float **)((char *)v173 - 4);
      }
      while (v158 != v157);
    }
  }
  *((void *)v7 + 35) = v173;
  *((void *)v7 + 36) = v174;
  *((void *)v7 + 37) = &v167[4 * v166];
  if (v157) {
    operator delete(v157);
  }
LABEL_257:
  *((_DWORD *)v7 + 76) = 0;
  peridot::PeridotDxpMacro::initWithOffset((peridot::PeridotDxpMacro *)v7, v148, -1);
  *(void *)(v7 + 316) = 0;
  unint64_t v187 = operator new(0x170uLL);
  v187[21] = 0u;
  v187[22] = 0u;
  uint64_t v188 = v187 + 23;
  v187[19] = 0u;
  v187[20] = 0u;
  v187[17] = 0u;
  v187[18] = 0u;
  v187[15] = 0u;
  v187[16] = 0u;
  v187[13] = 0u;
  v187[14] = 0u;
  v187[11] = 0u;
  v187[12] = 0u;
  v187[9] = 0u;
  v187[10] = 0u;
  v187[7] = 0u;
  v187[8] = 0u;
  v187[5] = 0u;
  v187[6] = 0u;
  v187[3] = 0u;
  v187[4] = 0u;
  v187[1] = 0u;
  v187[2] = 0u;
  _OWORD *v187 = 0u;
  uint64_t v189 = (void *)*((void *)v7 + 590);
  if (v189)
  {
    *((void *)v7 + 591) = v189;
    operator delete(v189);
    *((void *)v7 + 590) = 0;
    *((void *)v7 + 591) = 0;
    *((void *)v7 + 592) = 0;
  }
  *((void *)v7 + 590) = v187;
  *((void *)v7 + 591) = v188;
  *((void *)v7 + 592) = v188;
  uint64_t v190 = operator new(0x170uLL);
  v190[21] = 0u;
  v190[22] = 0u;
  uint64_t v191 = v190 + 23;
  v190[19] = 0u;
  v190[20] = 0u;
  v190[17] = 0u;
  v190[18] = 0u;
  v190[15] = 0u;
  v190[16] = 0u;
  v190[13] = 0u;
  v190[14] = 0u;
  v190[11] = 0u;
  v190[12] = 0u;
  v190[9] = 0u;
  v190[10] = 0u;
  v190[7] = 0u;
  v190[8] = 0u;
  v190[5] = 0u;
  v190[6] = 0u;
  v190[3] = 0u;
  v190[4] = 0u;
  v190[1] = 0u;
  v190[2] = 0u;
  *uint64_t v190 = 0u;
  unint64_t v192 = (void *)*((void *)v7 + 593);
  if (v192)
  {
    *((void *)v7 + 594) = v192;
    operator delete(v192);
    *((void *)v7 + 593) = 0;
    *((void *)v7 + 594) = 0;
    *((void *)v7 + 595) = 0;
  }
  *((void *)v7 + 593) = v190;
  *((void *)v7 + 594) = v191;
  *((void *)v7 + 595) = v191;
  uint64_t v193 = operator new(0x170uLL);
  v193[21] = 0u;
  v193[22] = 0u;
  float v194 = v193 + 23;
  v193[19] = 0u;
  v193[20] = 0u;
  v193[17] = 0u;
  v193[18] = 0u;
  v193[15] = 0u;
  v193[16] = 0u;
  v193[13] = 0u;
  v193[14] = 0u;
  v193[11] = 0u;
  v193[12] = 0u;
  v193[9] = 0u;
  v193[10] = 0u;
  v193[7] = 0u;
  v193[8] = 0u;
  v193[5] = 0u;
  v193[6] = 0u;
  v193[3] = 0u;
  v193[4] = 0u;
  v193[1] = 0u;
  v193[2] = 0u;
  *uint64_t v193 = 0u;
  float v195 = (void *)*((void *)v7 + 596);
  if (v195)
  {
    *((void *)v7 + 597) = v195;
    operator delete(v195);
    *((void *)v7 + 596) = 0;
    *((void *)v7 + 597) = 0;
    *((void *)v7 + 598) = 0;
  }
  *((void *)v7 + 596) = v193;
  *((void *)v7 + 597) = v194;
  *((void *)v7 + 598) = v194;
  if (v149) {
    operator delete(v149);
  }
}

void sub_259023528(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_259023550(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a14) {
    JUMPOUT(0x259023548);
  }
  JUMPOUT(0x259023540);
}

void peridot::PeridotDxpMacro::initializePulses(uint64_t a1, long long **a2, int *a3, uint64_t *a4, uint64_t *a5, void *a6)
{
  unint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if ((char *)v6 - (char *)*a2 != 256) {
    __assert_rtn("initializePulses", "PeridotDxpMacro.mm", 118, "MACRO_PULSE_SIZE == pulse.size()");
  }
  if (a3) {
    unint64_t v11 = 6;
  }
  else {
    unint64_t v11 = 1;
  }
  unint64_t v12 = &v193;
  if (a3) {
    unint64_t v12 = a3;
  }
  unint64_t v187 = v12;
  int v193 = 0;
  if (v6 == v7)
  {
    uint64_t v14 = 0;
    float v31 = 0;
    uint64_t v35 = 0;
  }
  else
  {
    uint64_t v13 = (float *)operator new(0x100uLL);
    uint64_t v14 = (float32x4_t *)v13;
    uint64_t v15 = 0;
    long long v16 = v7[3];
    long long v18 = *v7;
    long long v17 = v7[1];
    *((_OWORD *)v13 + 2) = v7[2];
    *((_OWORD *)v13 + 3) = v16;
    *(_OWORD *)uint64_t v13 = v18;
    *((_OWORD *)v13 + 1) = v17;
    long long v19 = v7[7];
    long long v21 = v7[4];
    long long v20 = v7[5];
    *((_OWORD *)v13 + 6) = v7[6];
    *((_OWORD *)v13 + 7) = v19;
    *((_OWORD *)v13 + 4) = v21;
    *((_OWORD *)v13 + 5) = v20;
    long long v22 = v7[11];
    long long v24 = v7[8];
    long long v23 = v7[9];
    *((_OWORD *)v13 + 10) = v7[10];
    *((_OWORD *)v13 + 11) = v22;
    *((_OWORD *)v13 + 8) = v24;
    *((_OWORD *)v13 + 9) = v23;
    long long v25 = v7[15];
    long long v27 = v7[12];
    long long v26 = v7[13];
    *((_OWORD *)v13 + 14) = v7[14];
    *((_OWORD *)v13 + 15) = v25;
    *((_OWORD *)v13 + 12) = v27;
    *((_OWORD *)v13 + 13) = v26;
    do
    {
      float v28 = (float32x2_t *)&v13[v15];
      int32x2_t v29 = vcltz_f32(*(float32x2_t *)&v13[v15]);
      if (v29.i8[0]) {
        v28->i32[0] = 0;
      }
      if (v29.i8[4]) {
        v13[v15 + 1] = 0.0;
      }
      int32x2_t v30 = vcltz_f32(v28[1]);
      if (v30.i8[0]) {
        v13[v15 + 2] = 0.0;
      }
      if (v30.i8[4]) {
        v13[v15 + 3] = 0.0;
      }
      v15 += 4;
    }
    while (v15 != 64);
    float v31 = v13 + 64;
    float v32 = *v13;
    uint64_t v33 = 1;
    float v34 = v13;
    do
    {
      if (v32 < v13[v33])
      {
        float v32 = v13[v33];
        float v34 = &v13[v33];
      }
      ++v33;
    }
    while (v33 != 64);
    uint64_t v35 = (char *)v34 - (char *)v13;
  }
  uint64_t v36 = v35 >> 2;
  uint64_t v37 = (float *)((char *)v14->f32 + v35);
  if (v37 == v31)
  {
    float v39 = v37;
  }
  else
  {
    unint64_t v38 = v37 + 1;
    float v39 = v37;
    if (v37 + 1 != v31)
    {
      float v40 = *v37;
      float v39 = v37;
      BOOL v41 = v37 + 1;
      do
      {
        float v42 = *v41++;
        float v43 = v42;
        if (v42 < v40)
        {
          float v40 = v43;
          float v39 = v38;
        }
        unint64_t v38 = v41;
      }
      while (v41 != v31);
    }
  }
  uint64_t v181 = a6;
  uint64_t v44 = v39 - v37;
  if ((unint64_t)(v44 + v36) >= 0x3F) {
    uint64_t v45 = v44 + v36;
  }
  else {
    uint64_t v45 = v44 + v36 + 1;
  }
  unint64_t v46 = v45 + 1;
  if (!v45)
  {
    unint64_t v57 = 0;
    float v48 = 0.0;
    goto LABEL_50;
  }
  unint64_t v47 = (v45 - 1) & 0x3FFFFFFFFFFFFFFFLL;
  float v48 = 0.0;
  uint64_t v49 = (float *)v14;
  if (v47 < 7) {
    goto LABEL_41;
  }
  uint64_t v50 = (v47 + 1) & 0x7FFFFFFFFFFFFFF8;
  BOOL v51 = v14 + 1;
  float32x4_t v52 = 0uLL;
  uint64_t v53 = v50;
  float32x4_t v54 = 0uLL;
  do
  {
    float32x4_t v52 = vaddq_f32(v51[-1], v52);
    float32x4_t v54 = vaddq_f32(*v51, v54);
    v51 += 2;
    v53 -= 8;
  }
  while (v53);
  float32x4_t v55 = vaddq_f32(v54, v52);
  float v48 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v55, v55));
  if (v47 + 1 != v50)
  {
    uint64_t v49 = &v14->f32[v50];
    do
    {
LABEL_41:
      float v56 = *v49++;
      float v48 = v56 + v48;
    }
    while (v49 != &v14->f32[v45]);
  }
  if (v45 != -1)
  {
    if (v46 >= 8)
    {
      unint64_t v57 = v46 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v59 = v14 + 1;
      unint64_t v60 = v46 & 0xFFFFFFFFFFFFFFF8;
      float v61 = 1.0 / v48;
      do
      {
        float32x4_t v62 = vmulq_n_f32(*v59, v61);
        v59[-1] = vmulq_n_f32(v59[-1], v61);
        *uint64_t v59 = v62;
        v59 += 2;
        v60 -= 8;
      }
      while (v60);
      if (v46 == v57) {
        goto LABEL_52;
      }
    }
    else
    {
      unint64_t v57 = 0;
    }
LABEL_50:
    uint64_t v63 = v36 + v44 + ((unint64_t)(v44 + v36) < 0x3F) - v57 + 1;
    float v64 = &v14->f32[v57];
    float v65 = 1.0 / v48;
    do
    {
      *float v64 = *v64 * v65;
      ++v64;
      --v63;
    }
    while (v63);
LABEL_52:
    int v58 = 0;
    goto LABEL_53;
  }
  int v58 = 1;
LABEL_53:
  uint64_t v66 = a4[1];
  unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * ((v66 - *a4) >> 3);
  uint64_t v182 = v45;
  if (v11 <= v67)
  {
    if (v11 < v67)
    {
      uint64_t v68 = *a4 + 24 * v11;
      if (v66 != v68)
      {
        uint64_t v69 = a4[1];
        do
        {
          uint64_t v71 = *(void **)(v69 - 24);
          v69 -= 24;
          unint64_t v70 = v71;
          if (v71)
          {
            *(void *)(v66 - 16) = v70;
            operator delete(v70);
          }
          uint64_t v66 = v69;
        }
        while (v69 != v68);
      }
      a4[1] = v68;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__append((uint64_t)a4, v11 - v67);
  }
  uint64_t v72 = a5[1];
  unint64_t v73 = 0xAAAAAAAAAAAAAAABLL * ((v72 - *a5) >> 3);
  if (v11 <= v73)
  {
    if (v11 < v73)
    {
      uint64_t v74 = *a5 + 24 * v11;
      if (v72 != v74)
      {
        uint64_t v75 = a5[1];
        do
        {
          unint64_t v77 = *(void **)(v75 - 24);
          v75 -= 24;
          int v76 = v77;
          if (v77)
          {
            *(void *)(v72 - 16) = v76;
            operator delete(v76);
          }
          uint64_t v72 = v75;
        }
        while (v75 != v74);
      }
      a5[1] = v74;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__append((uint64_t)a5, v11 - v73);
  }
  uint64_t v78 = 0;
  unint64_t v79 = v11;
  do
  {
    int v80 = (void *)(*a4 + v78);
    unint64_t v81 = (uint64_t)(v80[1] - *v80) >> 2;
    if (v46 <= v81)
    {
      if (v46 < v81) {
        v80[1] = *v80 + 4 * v46;
      }
    }
    else
    {
      std::vector<float>::__append((uint64_t)v80, v46 - v81);
    }
    uint64_t v82 = (void *)(*a5 + v78);
    unint64_t v83 = (uint64_t)(v82[1] - *v82) >> 2;
    if (v46 > v83)
    {
      std::vector<float>::__append((uint64_t)v82, v46 - v83);
    }
    else if (v46 < v83)
    {
      v82[1] = *v82 + 4 * v46;
    }
    v78 += 24;
    --v79;
  }
  while (v79);
  if (v58)
  {
    unint64_t v84 = 0;
  }
  else
  {
    if (v46 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v84 = (float32x4_t *)operator new(4 * v46);
    bzero(v84, 4 * v46);
  }
  uint64_t v85 = 0;
  uint64_t v86 = *a4;
  uint64_t v188 = *a5;
  uint64_t v183 = 4 * v182 + 4;
  unint64_t v87 = v46 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v88 = &v84->f32[1];
  uint64_t v89 = v36 + v44 + ((unint64_t)(v44 + v36) < 0x3F) + 1;
  uint64_t v185 = v89;
  __asm { FMOV            V0.4S, #1.0 }
  float32x4_t v184 = _Q0;
  __asm { FMOV            V9.2S, #1.0 }
  unint64_t v186 = v11;
  int v95 = v187;
  do
  {
    unsigned int v96 = v95[v85];
    if (v96)
    {
      if (v58)
      {
        float32x4_t v97 = *(float **)(v86 + 24 * v85);
      }
      else
      {
        unint64_t v103 = 0;
        float v104 = (float)v96;
        float32x4_t v97 = *(float **)(v86 + 24 * v85);
        if (v46 < 8) {
          goto LABEL_180;
        }
        if ((unint64_t)((char *)v97 - (char *)v14) <= 0x1F) {
          goto LABEL_180;
        }
        unint64_t v105 = 0;
        unint64_t v106 = v87;
        do
        {
          float32x4_t v107 = vmulq_n_f32(v14[v105 / 0x10 + 1], v104);
          uint64_t v108 = (float32x4_t *)&v97[v105 / 4];
          float32x4_t *v108 = vmulq_n_f32(v14[v105 / 0x10], v104);
          v108[1] = v107;
          v105 += 32;
          v106 -= 8;
        }
        while (v106);
        unint64_t v103 = v87;
        if (v46 != v87)
        {
LABEL_180:
          do
          {
            v97[v103] = v14->f32[v103] * v104;
            ++v103;
          }
          while (v103 - v182 != 1);
        }
      }
      float v109 = *v97;
      v84->f32[0] = *v97;
      uint64_t v110 = *(void *)(v86 + 24 * v85 + 8) - (void)v97;
      if ((unint64_t)v110 >= 5)
      {
        unint64_t v111 = v110 >> 2;
        if (v111 <= 2) {
          unint64_t v111 = 2;
        }
        unint64_t v112 = v111 - 1;
        uint64_t v113 = v97 + 1;
        unint64_t v114 = v88;
        do
        {
          float v115 = *v113++;
          float v109 = v109 + v115;
          *v114++ = v109;
          --v112;
        }
        while (v112);
      }
      if ((v58 & 1) == 0)
      {
        if (v46 > 1 && (v97 >= (float *)((char *)v84->f32 + v183) || v84 >= (float32x4_t *)((char *)v97 + v183)))
        {
          uint64_t v162 = 0;
          unint64_t v163 = v46 & 0xFFFFFFFFFFFFFFFELL;
          do
          {
            float32x2_t v164 = *(float32x2_t *)&v97[v162];
            float32x2_t v165 = vneg_f32(v164);
            float v189 = v165.f32[0];
            float v191 = expf(v165.f32[1]);
            v166.f32[0] = expf(v189);
            v166.f32[1] = v191;
            float32x2_t v167 = vsub_f32(_D9, v166);
            float32x2_t v168 = vsub_f32(v164, *(float32x2_t *)&v84->f32[v162]);
            float v190 = v168.f32[0];
            float v192 = expf(v168.f32[1]);
            _Q0.f32[0] = expf(v190);
            _Q0.f32[1] = v192;
            *(float32x2_t *)_Q0.f32 = vmul_f32(*(float32x2_t *)_Q0.f32, v167);
            *(void *)&v97[v162] = _Q0.i64[0];
            v162 += 2;
            v163 -= 2;
          }
          while (v163);
          unint64_t v116 = v46 & 0xFFFFFFFFFFFFFFFELL;
          if (v46 == (v46 & 0xFFFFFFFFFFFFFFFELL)) {
            goto LABEL_115;
          }
        }
        else
        {
          unint64_t v116 = 0;
        }
        do
        {
          float v117 = v97[v116];
          float v118 = 1.0 - expf(-v117);
          v97[v116] = expf(v117 - v84->f32[v116]) * v118;
          ++v116;
        }
        while (v116 - v182 != 1);
LABEL_115:
        unint64_t v11 = v186;
        int v95 = v187;
        unint64_t v88 = &v84->f32[1];
        unint64_t v87 = v46 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v89 = v185;
      }
    }
    else
    {
      float32x4_t v97 = *(float **)(v86 + 24 * v85);
      if ((v58 & 1) == 0)
      {
        unint64_t v98 = 0;
        if (v46 < 8) {
          goto LABEL_181;
        }
        if ((unint64_t)((char *)v97 - (char *)v14) < 0x20) {
          goto LABEL_181;
        }
        unint64_t v99 = 0;
        unint64_t v100 = v87;
        do
        {
          _Q0 = v14[v99 / 4];
          float32x4_t v101 = v14[v99 / 4 + 1];
          float v102 = (float32x4_t *)&v97[v99];
          *float v102 = _Q0;
          v102[1] = v101;
          v99 += 8;
          v100 -= 8;
        }
        while (v100);
        unint64_t v98 = v87;
        if (v46 != v87)
        {
LABEL_181:
          do
          {
            v97[v98] = v14->f32[v98];
            ++v98;
          }
          while (v98 - v182 != 1);
        }
      }
    }
    unint64_t v119 = *(float **)(v86 + 24 * v85 + 8);
    uint64_t v120 = v97 + 1;
    _ZF = v97 == v119 || v120 == v119;
    int32x2_t v122 = v97;
    if (!_ZF)
    {
      float v123 = *v97;
      long long v124 = v97 + 1;
      int32x2_t v122 = v97;
      int v125 = v97 + 1;
      do
      {
        float v126 = *v125++;
        float v127 = v126;
        if (v123 < v126)
        {
          float v123 = v127;
          int32x2_t v122 = v124;
        }
        long long v124 = v125;
      }
      while (v125 != v119);
    }
    if ((v58 & 1) == 0)
    {
      _Q0.f32[0] = *v122;
      if (v46 <= 7)
      {
        unint64_t v128 = 0;
LABEL_130:
        unint64_t v133 = v89 - v128;
        uint64_t v134 = &v97[v128];
        float v135 = 1.0 / _Q0.f32[0];
        do
        {
          float *v134 = *v134 * v135;
          ++v134;
          --v133;
        }
        while (v133);
        goto LABEL_132;
      }
      LODWORD(v129) = vdivq_f32(v184, _Q0).u32[0];
      uint64_t v130 = (float32x4_t *)(v97 + 4);
      unint64_t v131 = v87;
      do
      {
        float32x4_t v132 = vmulq_n_f32(*v130, v129);
        v130[-1] = vmulq_n_f32(v130[-1], v129);
        *uint64_t v130 = v132;
        v130 += 2;
        v131 -= 8;
      }
      while (v131);
      unint64_t v128 = v87;
      if (v46 != v87) {
        goto LABEL_130;
      }
    }
LABEL_132:
    float v136 = *v97;
    v84->f32[0] = *v97;
    uint64_t v137 = (char *)v119 - (char *)v97;
    if ((unint64_t)((char *)v119 - (char *)v97) >= 5)
    {
      uint64_t v138 = v137 >> 2;
      if ((unint64_t)(v137 >> 2) <= 2) {
        uint64_t v138 = 2;
      }
      uint64_t v139 = v138 - 1;
      int v140 = v88;
      do
      {
        float v141 = *v120++;
        float v136 = v136 + v141;
        *v140++ = v136;
        --v139;
      }
      while (v139);
    }
    if (v97 == v119)
    {
      _Q0.i64[0] = 0;
      if (v58) {
        goto LABEL_86;
      }
      goto LABEL_147;
    }
    _Q0.i64[0] = 0;
    if ((unint64_t)(v137 - 4) < 0x1C) {
      goto LABEL_143;
    }
    unint64_t v142 = ((unint64_t)(v137 - 4) >> 2) + 1;
    uint64_t v143 = (float32x4_t *)(v97 + 4);
    float32x4_t v144 = 0uLL;
    uint64_t v145 = v142 & 0x7FFFFFFFFFFFFFF8;
    float32x4_t v146 = 0uLL;
    do
    {
      float32x4_t v144 = vaddq_f32(v143[-1], v144);
      float32x4_t v146 = vaddq_f32(*v143, v146);
      v143 += 2;
      v145 -= 8;
    }
    while (v145);
    float32x4_t v147 = vaddq_f32(v146, v144);
    _Q0 = vpaddq_f32(v147, v147);
    _Q0.f32[0] = vaddv_f32(*(float32x2_t *)_Q0.f32);
    if (v142 != (v142 & 0x7FFFFFFFFFFFFFF8))
    {
      v97 += v142 & 0x7FFFFFFFFFFFFFF8;
      do
      {
LABEL_143:
        float v148 = *v97++;
        _Q0.f32[0] = v148 + _Q0.f32[0];
      }
      while (v97 != v119);
    }
    if (v58) {
      goto LABEL_86;
    }
LABEL_147:
    unint64_t v149 = 0;
    unint64_t v150 = *(float32x4_t **)(v188 + 24 * v85);
    if (v46 < 8) {
      goto LABEL_152;
    }
    if ((unint64_t)((char *)v150 - (char *)v84) <= 0x1F) {
      goto LABEL_152;
    }
    unint64_t v151 = v150 + 1;
    float v152 = v84 + 1;
    unint64_t v153 = v87;
    float v154 = 1.0 / _Q0.f32[0];
    do
    {
      float32x4_t v155 = vmulq_n_f32(*v152, v154);
      v151[-1] = vmulq_n_f32(v152[-1], v154);
      *unint64_t v151 = v155;
      v151 += 2;
      v152 += 2;
      v153 -= 8;
    }
    while (v153);
    unint64_t v149 = v87;
    if (v46 != v87)
    {
LABEL_152:
      unint64_t v156 = v89 - v149;
      uint64_t v157 = v149;
      float v158 = &v150->f32[v157];
      uint64_t v159 = &v84->f32[v157];
      float v160 = 1.0 / _Q0.f32[0];
      do
      {
        float v161 = *v159++;
        *v158++ = v161 * v160;
        --v156;
      }
      while (v156);
    }
LABEL_86:
    ++v85;
  }
  while (v85 != v11);
  unint64_t v169 = (_DWORD *)*v181;
  unint64_t v170 = (uint64_t)(v181[1] - *v181) >> 2;
  if (v182 + 5 <= v170)
  {
    if (v182 + 5 < v170) {
      v181[1] = &v169[v182 + 5];
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)v181, v182 + 5 - v170);
    unint64_t v169 = (_DWORD *)*v181;
  }
  _DWORD *v169 = -998637568;
  v169[v182 + 4] = 1148846080;
  if ((unint64_t)(v182 + 4) >= 2)
  {
    uint64_t v171 = v182 + 3;
    if ((unint64_t)(v182 + 3) > 7)
    {
      unint64_t v173 = v171 & 0xFFFFFFFFFFFFFFF8;
      int64x2_t v174 = (int64x2_t)xmmword_2591205B0;
      int64x2_t v175 = (int64x2_t)xmmword_2591205C0;
      int64x2_t v176 = (float32x4_t *)(v169 + 5);
      v177.i64[0] = -1;
      v177.i64[1] = -1;
      int64x2_t v178 = vdupq_n_s64(3uLL);
      int64x2_t v179 = vdupq_n_s64(8uLL);
      unint64_t v180 = v171 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        v176[-1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v175, v177))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v174, v177)));
        float32x4_t *v176 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vaddq_s64(v175, v178))), vcvtq_f64_u64((uint64x2_t)vaddq_s64(v174, v178)));
        int64x2_t v174 = vaddq_s64(v174, v179);
        int64x2_t v175 = vaddq_s64(v175, v179);
        v176 += 2;
        v180 -= 8;
      }
      while (v180);
      if (v171 != v173)
      {
        uint64_t v172 = v173 | 1;
        goto LABEL_170;
      }
    }
    else
    {
      uint64_t v172 = 1;
      do
      {
LABEL_170:
        *(float *)&v169[v172] = (float)(unint64_t)(v172 - 1);
        ++v172;
      }
      while (v172 - v182 != 4);
    }
  }
  operator delete(v84);
  if (v14)
  {
    operator delete(v14);
  }
}

void sub_259024050(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_259024158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25902433C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2590259E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a32);
  InstrumentsTraceGuard::~InstrumentsTraceGuard((InstrumentsTraceGuard *)&a24);

  _Unwind_Resume(a1);
}

void peridot::PeridotSpotRefDepth::~PeridotSpotRefDepth(peridot::PeridotSpotRefDepth *this)
{
  float64x2_t v2 = (void *)*((void *)this + 25);
  if (v2)
  {
    *((void *)this + 26) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 22);
  if (v3)
  {
    *((void *)this + 23) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 19);
  if (v4)
  {
    *((void *)this + 20) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 16);
  if (v5)
  {
    *((void *)this + 17) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 11);
  if (v6)
  {
    *((void *)this + 12) = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + 9) = v7;
    operator delete(v7);
  }
  int v8 = (void *)*((void *)this + 5);
  if (v8)
  {
    *((void *)this + 6) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    *((void *)this + 3) = v9;
    operator delete(v9);
  }
}

void sub_259025EE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void getInfoForDimensions(CGSize a1, uint64_t a2)
{
  double height = a1.height;
  double width = a1.width;
  id v11 = +[PDUserDefaults defaults];
  int v5 = [v11 storeRawFramesInPointCloud];
  *(double *)a2 = width;
  *(double *)(a2 + 8) = height;
  if (width == 512.0 && height == 768.0)
  {
    uint64_t v8 = 84;
    uint64_t v9 = 2;
  }
  else if (width == 1024.0 && height == 768.0)
  {
    uint64_t v8 = 168;
    uint64_t v9 = 4;
  }
  else if (width == 0.0 && height == 0.0)
  {
    uint64_t v8 = 336;
    uint64_t v9 = 8;
  }
  else
  {
    uint64_t v9 = 8;
    peridot_depth_log("Unknown raw sensor dimensions: %fx%f. Will allow up to %zu banks per frame.", width, height, 8uLL);
    uint64_t v8 = 336;
  }
  *(void *)(a2 + 16) = v9;
  *(void *)(a2 + 24) = v8;
  if (v5) {
    unint64_t v10 = (unint64_t)(width * height);
  }
  else {
    unint64_t v10 = 0;
  }
  *(void *)(a2 + 32) = v10;
  *(void *)(a2 + 40) = objc_msgSend(MEMORY[0x263F26C98], "requiredStorageBytesForLength:additionalDataSize:");
}

void sub_259026048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_2590260D0(_Unwind_Exception *a1)
{
}

void sub_259026190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_259026260(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t readPeridotCalibFromBuffer(char *__src, unint64_t a2, _PeridotCalib *__dst)
{
  if (a2 > 3)
  {
    p_jlnlVersiouint64_t n = &__dst->additionalParams.jlnlVersion;
    switch(*(_DWORD *)__src)
    {
      case 1:
        if (a2 == 77672) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 1, 77672, a2);
        break;
      case 2:
        if (a2 == 77768) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 2, 77768, a2);
        break;
      case 3:
        if (a2 == 76456) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 3, 76456, a2);
        break;
      case 4:
        if (a2 == 76456) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 4, 76456, a2);
        break;
      case 5:
        if (a2 == 361416) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 5, 361416, a2);
        break;
      case 6:
        if (a2 == 361424) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 6, 361424, a2);
        break;
      case 7:
        if (a2 == 366176) {
          operator new();
        }
        peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 7, 366176, a2);
        break;
      case 8:
        if (a2 == 402496)
        {
          unint64_t v7 = (unsigned __int8 *)(__src + 402488);
          *(void *)&__dst->versiouint64_t n = 9;
          long long v8 = *(_OWORD *)(__src + 8);
          long long v9 = *(_OWORD *)(__src + 24);
          *(_OWORD *)&__dst->vbdm.VBDadj[3] = *(_OWORD *)(__src + 40);
          *(_OWORD *)&__dst->vbdm.vbdSpBM = v9;
          *(_OWORD *)__dst->vbdm.vbdSpfloat x = v8;
          long long v10 = *(_OWORD *)(__src + 56);
          long long v11 = *(_OWORD *)(__src + 72);
          long long v12 = *(_OWORD *)(__src + 88);
          __dst->vbdm.Tx_VDDLAS = *((float *)__src + 26);
          *(_OWORD *)&__dst->vbdm.VBDadj[15] = v12;
          *(_OWORD *)&__dst->vbdm.VBDadj[11] = v11;
          *(_OWORD *)&__dst->vbdm.VBDadj[7] = v10;
          memcpy(&__dst->QE, __src + 108, sizeof(__dst->QE));
          long long v13 = *(_OWORD *)(__src + 36412);
          *(_OWORD *)__dst->nominalPDE.dtuint64_t m = *(_OWORD *)(__src + 36396);
          *(_OWORD *)&__dst->nominalPDE.dts[1] = v13;
          __dst->adcVoltageOffsets = *($D75F3596A3AB6C1B2FF65DC2DCDF6E94 *)(__src + 36428);
          memcpy(&__dst->pulseShape, __src + 36444, sizeof(__dst->pulseShape));
          memcpy(&__dst->spots, __src + 49068, sizeof(__dst->spots));
          memcpy(&__dst->factorySpotLocations, __src + 342588, sizeof(__dst->factorySpotLocations));
          memcpy(&__dst->operationalSpotLocations, __src + 344396, sizeof(__dst->operationalSpotLocations));
          long long v14 = *(_OWORD *)(__src + 346232);
          long long v15 = *(_OWORD *)(__src + 346220);
          *(_OWORD *)&__dst->nominalT0Ref.TRGOUTDLY = *(_OWORD *)(__src + 346204);
          *(_OWORD *)__dst->nominalT0Ref.nomRef.banks[1].refs = v15;
          *(_OWORD *)__dst->nominalT0Ref.nomRef.banks[4].refs = v14;
          memcpy(&__dst->skews, __src + 346248, sizeof(__dst->skews));
          memcpy(&__dst->nvm, __src + 364332, sizeof(__dst->nvm));
          memcpy(&__dst->irIntrinsics, __src + 398000, sizeof(__dst->irIntrinsics));
          long long v16 = *(_OWORD *)(__src + 402168);
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[0][0] = *(_OWORD *)(__src + 402152);
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[0][2] = v16;
          long long v17 = *(_OWORD *)(__src + 402184);
          long long v18 = *(_OWORD *)(__src + 402200);
          long long v19 = *(_OWORD *)(__src + 402232);
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[2][0] = *(_OWORD *)(__src + 402216);
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[2][2] = v19;
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[1][0] = v17;
          *(_OWORD *)&__dst->factoryWideExtrinsics.rows[1][2] = v18;
          long long v20 = *(_OWORD *)(__src + 402264);
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[0][0] = *(_OWORD *)(__src + 402248);
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[0][2] = v20;
          long long v21 = *(_OWORD *)(__src + 402328);
          long long v23 = *(_OWORD *)(__src + 402280);
          long long v22 = *(_OWORD *)(__src + 402296);
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[2][0] = *(_OWORD *)(__src + 402312);
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[2][2] = v21;
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[1][0] = v23;
          *(_OWORD *)&__dst->operationalWideExtrinsics.rows[1][2] = v22;
          long long v25 = *(_OWORD *)(__src + 402392);
          long long v24 = *(_OWORD *)(__src + 402408);
          long long v26 = *(_OWORD *)(__src + 402440);
          *(_OWORD *)&__dst->additionalParams.jlin.distortVendor[10] = *(_OWORD *)(__src + 402424);
          *(_OWORD *)&__dst->additionalParams.jlin.tempProjector = v26;
          *(_OWORD *)&__dst->additionalParams.jlin.distortVendor[6] = v25;
          *(_OWORD *)&__dst->additionalParams.jlin.distortVendor[8] = v24;
          long long v27 = *(_OWORD *)(__src + 402344);
          long long v28 = *(_OWORD *)(__src + 402376);
          *(_OWORD *)&__dst->additionalParams.jlin.distortVendor[2] = *(_OWORD *)(__src + 402360);
          *(_OWORD *)&__dst->additionalParams.jlin.distortVendor[4] = v28;
          *(_OWORD *)__dst->additionalParams.jlin.distortVendor = v27;
          *(_OWORD *)__dst->additionalParams.uuidFF = *(_OWORD *)(__src + 402456);
          *(_OWORD *)__dst->additionalParams.uuidMPC = *(_OWORD *)(__src + 402472);
          *p_jlnlVersiouint64_t n = *v7;
          p_jlnlVersion[1] = __src[402489];
          p_jlnlVersion[2] = __src[402490];
          p_jlnlVersion[3] = __src[402491];
          p_jlnlVersion[4] = __src[402492];
          p_jlnlVersion[5] = __src[402493];
          p_jlnlVersion[6] = __src[402494];
          p_jlnlVersion[7] = __src[402495];
          nvmGetModuleSerialNumber(__dst->nvm.quark, 0x8000, (char (*)[32])&__dst->additionalParams);
        }
        else
        {
          peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 8, 402496, a2);
        }
        break;
      case 9:
        if (a2 == 402528) {
          memcpy(__dst, __src, sizeof(_PeridotCalib));
        }
        else {
          peridot_depth_log("PeridotCalib version %d buffer has wrong size (expected: %lu, got %lu)", 9, 402528, a2);
        }
        break;
      default:
        peridot_depth_log("PeridotCalib buffer has an unknown version (%u)");
        return 0;
    }
    __dst->versiouint64_t n = 9;
    return 1;
  }
  else
  {
    peridot_depth_log("PeridotCalib buffer is too small (%lu)");
    return 0;
  }
}

void sub_259027CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  MEMORY[0x25A2D62D0](v16, 0x1000C40F649E89ALL);
  MEMORY[0x25A2D62D0](v15, 0x1000C40F649E89ALL);
  MEMORY[0x25A2D62D0](v14, 0x1000C409ADDD2DALL);
  MEMORY[0x25A2D62D0](v13, 0x1000C4050029A1CLL);
  MEMORY[0x25A2D62D0](a12, 0x1000C400C109996);
  MEMORY[0x25A2D62D0](v12, 0x1000C409BD17AFALL);
  _Unwind_Resume(a1);
}

void sub_259028040(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id peridot::CalibManager::getPeridotCamera(peridot::CalibManager *this, const _PeridotCalib *a2)
{
  uint64_t v4 = (float64x2_t *)((char *)this + 398000);
  LOWORD(v2) = *((_WORD *)this + 201072);
  LOWORD(v3) = *((_WORD *)this + 201073);
  double v5 = *((double *)this + 49750);
  uint64_t v40 = *((uint64_t *)this + 49751);
  float64x2_t v42 = *((float64x2_t *)this + 24876);
  double v6 = *((double *)this + 50266);
  double v7 = *((double *)this + 50267);
  long long v8 = [MEMORY[0x263EFF990] dataWithLength:1024];
  long long v9 = [MEMORY[0x263EFF990] dataWithLength:1024];
  id v10 = v8;
  uint64_t v11 = [v10 mutableBytes];
  uint64_t v12 = 0;
  double v13 = (double)v2;
  double v14 = (double)v3;
  double v15 = 1.0 / *(double *)&v40;
  *(float *)&unsigned int v16 = v5 * (1.0 / *(double *)&v40);
  *(void *)&double v39 = v16;
  LODWORD(v17) = 0;
  HIDWORD(v17) = v16;
  double v38 = v17;
  double v41 = COERCE_DOUBLE(vcvt_f32_f64(vdivq_f64(v42, (float64x2_t)vdupq_lane_s64(v40, 0))));
  double v18 = (v42.f64[0] + v6 * v5) * v15;
  double v19 = (v42.f64[1] + v7 * v5) * v15;
  long long v20 = v4 + 132;
  do
  {
    long long v21 = (float32x4_t *)(v11 + v12);
    float64x2_t v23 = v20[-2];
    float64x2_t v22 = v20[-1];
    float64x2_t v25 = *v20;
    float64x2_t v24 = v20[1];
    v20 += 4;
    *long long v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v23), v22);
    v21[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v25), v24);
    v12 += 32;
  }
  while (v12 != 1024);
  id v26 = v9;
  uint64_t v27 = [v26 mutableBytes];
  uint64_t v28 = 0;
  int32x2_t v29 = v4 + 4;
  do
  {
    int32x2_t v30 = (float32x4_t *)(v27 + v28);
    float64x2_t v32 = v29[-2];
    float64x2_t v31 = v29[-1];
    float64x2_t v34 = *v29;
    float64x2_t v33 = v29[1];
    v29 += 4;
    *int32x2_t v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v32), v31);
    v30[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v34), v33);
    v28 += 32;
  }
  while (v28 != 1024);
  uint64_t v35 = objc_msgSend(objc_alloc(MEMORY[0x263F26CB0]), "initWithDistortionCenter:distortedRadii:undistortedRadii:", v10, v26, v18, v19);
  uint64_t v36 = objc_msgSend(objc_alloc(MEMORY[0x263F26CB8]), "initWithIntrinsics:cameraToPlatformTransform:pixelSize:forReferenceDimensions:withDistortionModel:", v35, v39, v38, v41, *(double *)&_PromotedConst, unk_259137F00, 0.0, unk_259137F20, v4->f64[1], *(void *)&v13, *(void *)&v14);

  return v36;
}

void sub_259028258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t peridot::PeridotAlgo::Impl::init(uint64_t a1, _PeridotCalib *a2, void *a3, int a4, int a5)
{
  uint64_t v9 = a1 + 402536;
  id v10 = a3;
  uint64_t v11 = v10;
  if (a2)
  {
    memcpy((void *)(a1 + 8), a2, 0x62460uLL);
    if (!v11)
    {
      peridot::CalibManager::getPeridotCamera((peridot::CalibManager *)a2, v12);
      id v13 = (id)objc_claimAutoreleasedReturnValue();
      goto LABEL_6;
    }
LABEL_5:
    id v13 = v11;
LABEL_6:
    double v14 = *(void **)v9;
    *(void *)uint64_t v9 = v13;

    *(_DWORD *)(v9 + 920) = a4;
    uint64_t v15 = objc_opt_new();
    unsigned int v16 = *(void **)(v9 + 8);
    *(void *)(v9 + 8) = v15;

    bzero((void *)(a1 + 402552), 0x388uLL);
    *(_DWORD *)(v9 + 928) = a5;
    uint64_t v17 = peridot::presetToRunMode(a5);
    *(_WORD *)(a1 + 403473) = v17;
    *(unsigned char *)(a1 + 403475) = BYTE2(v17);
    double v18 = [[Gmo alloc] initWithUnitInfo:a1 + 8 sessionState:0];
    double v19 = *(void **)a1;
    *(void *)a1 = v18;

    *(void *)(a1 + 1866048) = 0;
    peridot::PeridotDXP::init(a1 + 403488, a2, *(void **)v9, 0, *(unsigned __int16 *)(a1 + 403473) | (*(unsigned __int8 *)(a1 + 403475) << 16));
  }
  if (v10) {
    goto LABEL_5;
  }
  peridot_depth_log("Both PeridotCalib and CameraCalibrationData are empty");

  return 1;
}

void sub_259028614(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

float peridot::PeridotT0::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(unsigned char *)(a1 + 764) = 0;
  *(_OWORD *)(a1 + 128) = xmmword_2591200C0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 528) = 0;
  if (a2)
  {
    uint64_t v4 = (unsigned __int16 *)(a2 + 363106);
    uint64_t v5 = a2 + 363864;
    uint64_t v6 = a2 + 363864 + 56 * a4;
    int8x16_t v7 = *(int8x16_t *)v6;
    *(_OWORD *)(a1 + 12) = *(_OWORD *)(v6 + 12);
    *(int8x16_t *)a1 = v7;
    int8x16_t v8 = *(int8x16_t *)v6;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(v6 + 12);
    *(int8x16_t *)(a1 + 28) = v8;
    unsigned __int16 v9 = *(_WORD *)(a1 + 2);
    unsigned __int16 v10 = *(_WORD *)(a1 + 4);
    __int16 v11 = *(_WORD *)(a1 + 6);
    v8.i64[0] = *(void *)(a1 + 8);
    __int16 v12 = *(_WORD *)(a1 + 16);
    __int16 v13 = *(_WORD *)(a1 + 20);
    __int16 v14 = *(_WORD *)(a1 + 22);
    int16x8_t v15 = (int16x8_t)vqtbl1q_s8(v8, (int8x16_t)xmmword_259120B40);
    v16.i64[1] = v15.i64[1];
    __int16 v17 = *(_WORD *)(a1 + 18);
    v16.i16[3] = v12;
    v16.i16[2] = v17;
    v16.i16[1] = v13;
    v16.i16[0] = v14;
    if (vmaxv_u8((uint8x8_t)vmovn_s16(vtstq_s16(v16, v16))) & 1 | (*(_WORD *)(a1 + 24) != 0) | (*(_WORD *)(a1 + 26) != 0
                                                                                              || v11 != 0)
      || v10 | v9
      || *(_WORD *)a1)
    {
      *(_WORD *)a1 += 150;
      *(_WORD *)(a1 + 2) = v9 + 150;
      *(_WORD *)(a1 + 4) = v10 + 150;
      v15.i16[4] = v12;
      v15.i16[5] = v17;
      v15.i16[6] = v13;
      *(_WORD *)(a1 + 6) = v11 + 150;
      v15.i16[7] = v14;
      v18.i64[0] = 0x96009600960096;
      v18.i64[1] = 0x96009600960096;
      *(int16x8_t *)(a1 + 8) = vaddq_s16(v15, v18);
      *(int16x8_t *)(a1 + 24) = vaddq_s16(*(int16x8_t *)(a1 + 24), v18);
      *(int16x8_t *)(a1 + 40) = vaddq_s16(*(int16x8_t *)(a1 + 40), v18);
    }
    unsigned int v19 = *(unsigned __int8 *)(a2 + 402524);
    int v20 = *(unsigned __int16 *)(a2 + 40 * a4 + 363106);
    float v21 = (float)(v20 - *(unsigned __int16 *)(a2 + 40 * a4 + 363126));
    *(float *)(a1 + 56) = v21;
    if (v19 > 0x64)
    {
      float v26 = (float)(v20 - *(unsigned __int16 *)(a2 + 363146));
      float v27 = (float)(v20 - *(unsigned __int16 *)(a2 + 363186));
      float v28 = (float)(v20 - *(unsigned __int16 *)(a2 + 363226));
      *(float *)(a1 + 60) = (float)(v20 - *v4);
      *(float *)(a1 + 64) = v26;
      float v29 = (float)(v20 - *(unsigned __int16 *)(a2 + 363266));
      *(float *)(a1 + 68) = v27;
      *(float *)(a1 + 72) = v28;
      float v30 = (float)(v20 - *(unsigned __int16 *)(a2 + 363306));
      *(float *)(a1 + 76) = v29;
      *(float *)(a1 + 80) = v30;
      float v31 = (float)(v20 - *(unsigned __int16 *)(a2 + 363386));
      *(float *)(a1 + 84) = (float)(v20 - *(unsigned __int16 *)(a2 + 363346));
      *(float *)(a1 + 88) = v31;
      if (v19 == 101)
      {
        float64x2_t v32 = (_WORD *)(v5 + 56 * a4);
        *(_WORD *)(a1 + 28) += v32[14] - *(_WORD *)v6;
        *(_WORD *)(a1 + 30) += v32[15] - *(_WORD *)(v6 + 2);
        *(_WORD *)(a1 + 32) += v32[16] - *(_WORD *)(v6 + 4);
        *(_WORD *)(a1 + 34) += v32[17] - *(_WORD *)(v6 + 6);
        *(_WORD *)(a1 + 36) += v32[18] - *(_WORD *)(v6 + 8);
        *(_WORD *)(a1 + 38) += v32[19] - *(_WORD *)(v6 + 10);
        *(_WORD *)(a1 + 40) += v32[20] - *(_WORD *)(v6 + 12);
        *(_WORD *)(a1 + 42) += v32[21] - *(_WORD *)(v6 + 14);
        *(_WORD *)(a1 + 44) += v32[22] - *(_WORD *)(v6 + 16);
        *(_WORD *)(a1 + 46) += v32[23] - *(_WORD *)(v6 + 18);
        *(_WORD *)(a1 + 48) += v32[24] - *(_WORD *)(v6 + 20);
        *(_WORD *)(a1 + 50) += v32[25] - *(_WORD *)(v6 + 22);
        *(_WORD *)(a1 + 52) += v32[26] - *(_WORD *)(v6 + 24);
        *(_WORD *)(a1 + 54) += v32[27] - *(_WORD *)(v6 + 26);
        *(float *)(a1 + 124) = v21;
        int v33 = *(unsigned __int16 *)(a2 + 40 * a4 + 363126);
        float v34 = (float)(v33 - *(unsigned __int16 *)(a2 + 363166));
        *(float *)(a1 + 92) = (float)(v33 - *(unsigned __int16 *)(a2 + 363126));
        *(float *)(a1 + 96) = v34;
        float v35 = (float)(v33 - *(unsigned __int16 *)(a2 + 363246));
        *(float *)(a1 + 100) = (float)(v33 - *(unsigned __int16 *)(a2 + 363206));
        *(float *)(a1 + 104) = v35;
        float v36 = (float)(v33 - *(unsigned __int16 *)(a2 + 363326));
        *(float *)(a1 + 108) = (float)(v33 - *(unsigned __int16 *)(a2 + 363286));
        *(float *)(a1 + 112) = v36;
        float v37 = (float)(v33 - *(unsigned __int16 *)(a2 + 363366));
        int v38 = *(unsigned __int16 *)(a2 + 363406);
      }
      else
      {
        *(unsigned char *)(a1 + 764) = 1;
        double v39 = (_WORD *)(v5 + 56 * a4);
        *(_WORD *)(a1 + 28) = v39[14];
        *(_WORD *)(a1 + 30) = v39[15];
        *(_WORD *)(a1 + 32) = v39[16];
        *(_WORD *)(a1 + 34) = v39[17];
        *(_WORD *)(a1 + 36) = v39[18];
        *(_WORD *)(a1 + 38) = v39[19];
        *(_WORD *)(a1 + 40) = v39[20];
        *(_WORD *)(a1 + 42) = v39[21];
        *(_WORD *)(a1 + 44) = v39[22];
        *(_WORD *)(a1 + 46) = v39[23];
        *(_WORD *)(a1 + 48) = v39[24];
        *(_WORD *)(a1 + 50) = v39[25];
        *(_WORD *)(a1 + 52) = v39[26];
        *(_WORD *)(a1 + 54) = v39[27];
        int v33 = *(unsigned __int16 *)(a2 + 40 * a4 + 363124);
        *(float *)(a1 + 124) = (float)(v33 - *(unsigned __int16 *)(a2 + 40 * a4 + 363104));
        *(_OWORD *)(a1 + 128) = xmmword_2591204E0;
        float v40 = (float)(v33 - *(unsigned __int16 *)(a2 + 363164));
        *(float *)(a1 + 92) = (float)(v33 - *(unsigned __int16 *)(a2 + 363124));
        *(float *)(a1 + 96) = v40;
        float v41 = (float)(v33 - *(unsigned __int16 *)(a2 + 363244));
        *(float *)(a1 + 100) = (float)(v33 - *(unsigned __int16 *)(a2 + 363204));
        *(float *)(a1 + 104) = v41;
        float v42 = (float)(v33 - *(unsigned __int16 *)(a2 + 363324));
        *(float *)(a1 + 108) = (float)(v33 - *(unsigned __int16 *)(a2 + 363284));
        *(float *)(a1 + 112) = v42;
        float v37 = (float)(v33 - *(unsigned __int16 *)(a2 + 363364));
        int v38 = *(unsigned __int16 *)(a2 + 363404);
      }
      *(float *)(a1 + 116) = v37;
      *(float *)(a1 + 120) = (float)(v33 - v38);
    }
    else
    {
      *(float *)(a1 + 124) = v21;
      float v22 = (float)(v20 - *(unsigned __int16 *)(a2 + 363146));
      *(float *)(a1 + 60) = (float)(v20 - *v4);
      *(float *)(a1 + 64) = v22;
      float v23 = (float)(v20 - *(unsigned __int16 *)(a2 + 363226));
      *(float *)(a1 + 68) = (float)(v20 - *(unsigned __int16 *)(a2 + 363186));
      *(float *)(a1 + 72) = v23;
      float v24 = (float)(v20 - *(unsigned __int16 *)(a2 + 363306));
      *(float *)(a1 + 76) = (float)(v20 - *(unsigned __int16 *)(a2 + 363266));
      *(float *)(a1 + 80) = v24;
      float v25 = (float)(v20 - *(unsigned __int16 *)(a2 + 363386));
      *(float *)(a1 + 84) = (float)(v20 - *(unsigned __int16 *)(a2 + 363346));
      *(float *)(a1 + 88) = v25;
    }
  }
  else
  {
    *(_DWORD *)(a1 + 124) = 0;
    *(_OWORD *)a1 = 0uLL;
    *(_OWORD *)(a1 + 16) = 0uLL;
    *(_OWORD *)(a1 + 32) = 0uLL;
    *(_OWORD *)(a1 + 48) = 0uLL;
    *(_OWORD *)(a1 + 64) = 0uLL;
    *(_OWORD *)(a1 + 76) = 0uLL;
  }
  *(_DWORD *)(a1 + 740) = *(_DWORD *)(a1 + 720);
  *(_DWORD *)(a1 + 744) = *(_DWORD *)(a1 + 728);
  float result = *(float *)(a1 + 736);
  *(float *)&long long v44 = result;
  DWORD1(v44) = *(_DWORD *)(a1 + 724);
  *((void *)&v44 + 1) = *(void *)(a1 + 732);
  *(_OWORD *)(a1 + 748) = v44;
  *(void *)(a1 + 768) = a3;
  return result;
}

float peridot::Reflectivity::initReflectivityCalc(peridot::Reflectivity *this, const _PeridotCalib *a2, const unint64_t (*a3)[4][2], peridot::Reflectivity *a4, unint64_t a5)
{
  p_jlnmVersiouint64_t n = &a2->additionalParams.jlnmVersion;
  p_meanPDE = &a2->nominalPDE.meanPDE;
  *(_OWORD *)((char *)this + 7448) = *(_OWORD *)a3;
  *(_OWORD *)((char *)this + 7464) = *(_OWORD *)&(*a3)[1][0];
  *(_OWORD *)((char *)this + 7480) = *(_OWORD *)&(*a3)[2][0];
  *(_OWORD *)((char *)this + 7496) = *(_OWORD *)&(*a3)[3][0];
  *(_OWORD *)((char *)this + 7512) = *(_OWORD *)&(*a3)[4][0];
  *(_OWORD *)((char *)this + 7528) = *(_OWORD *)&(*a3)[5][0];
  *(_OWORD *)((char *)this + 7544) = *(_OWORD *)&(*a3)[6][0];
  *(_OWORD *)((char *)this + 7560) = *(_OWORD *)&(*a3)[7][0];
  *(_OWORD *)((char *)this + 7576) = *(_OWORD *)&(*a3)[8][0];
  *(_OWORD *)((char *)this + 7592) = *(_OWORD *)&(*a3)[9][0];
  *(_OWORD *)((char *)this + 7608) = *(_OWORD *)&(*a3)[10][0];
  *(_OWORD *)((char *)this + 7624) = *(_OWORD *)&(*a3)[11][0];
  *(_OWORD *)((char *)this + 7640) = *(_OWORD *)&(*a3)[12][0];
  *(_OWORD *)((char *)this + 7656) = *(_OWORD *)&(*a3)[13][0];
  *(_OWORD *)((char *)this + 7672) = *(_OWORD *)&(*a3)[14][0];
  *(_OWORD *)((char *)this + 7688) = *(_OWORD *)&(*a3)[15][0];
  *(_OWORD *)((char *)this + 7704) = *(_OWORD *)&(*a3)[16][0];
  *(_OWORD *)((char *)this + 7720) = *(_OWORD *)&(*a3)[17][0];
  *(_OWORD *)((char *)this + 7736) = *(_OWORD *)&(*a3)[18][0];
  *(_OWORD *)((char *)this + 7752) = *(_OWORD *)&(*a3)[19][0];
  *(_OWORD *)((char *)this + 7768) = *(_OWORD *)&(*a3)[20][0];
  *(_OWORD *)((char *)this + 7784) = *(_OWORD *)&(*a3)[21][0];
  *(_OWORD *)((char *)this + 7800) = *(_OWORD *)&(*a3)[22][0];
  *(_OWORD *)((char *)this + 7816) = *(_OWORD *)&(*a3)[23][0];
  *(_OWORD *)((char *)this + 7832) = *(_OWORD *)&(*a3)[24][0];
  *(_OWORD *)((char *)this + 7848) = *(_OWORD *)&(*a3)[25][0];
  *(_OWORD *)((char *)this + 7864) = *(_OWORD *)&(*a3)[26][0];
  *(_OWORD *)((char *)this + 7880) = *(_OWORD *)&(*a3)[27][0];
  *(_OWORD *)((char *)this + 7896) = *(_OWORD *)&(*a3)[28][0];
  *(_OWORD *)((char *)this + 7912) = *(_OWORD *)&(*a3)[29][0];
  *(_OWORD *)((char *)this + 7928) = *(_OWORD *)&(*a3)[30][0];
  *(_OWORD *)((char *)this + 7944) = *(_OWORD *)&(*a3)[31][0];
  *(_OWORD *)((char *)this + 7960) = *(_OWORD *)&(*a3)[32][0];
  *(_OWORD *)((char *)this + 7976) = *(_OWORD *)&(*a3)[33][0];
  *(_OWORD *)((char *)this + 7992) = *(_OWORD *)&(*a3)[34][0];
  *(_OWORD *)((char *)this + 8008) = *(_OWORD *)&(*a3)[35][0];
  if (!a5) {
    goto LABEL_7;
  }
  if (a5 > 5 && (unint64_t)(this - a4 + 8024) >= 0x20)
  {
    unint64_t v8 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v69 = (_OWORD *)((char *)this + 8040);
    unint64_t v70 = (const unint64_t *)((char *)a4 + 16);
    unint64_t v71 = a5 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      long long v72 = *(_OWORD *)v70;
      *(v69 - 1) = *((_OWORD *)v70 - 1);
      _OWORD *v69 = v72;
      v69 += 2;
      v70 += 4;
      v71 -= 4;
    }
    while (v71);
    if (v8 == a5) {
      goto LABEL_7;
    }
  }
  else
  {
    unint64_t v8 = 0;
  }
  unint64_t v9 = a5 - v8;
  unint64_t v10 = 8 * v8;
  __int16 v11 = (void *)((char *)this + 8 * v8 + 8024);
  __int16 v12 = (const unint64_t *)((char *)a4 + v10);
  do
  {
    uint64_t v13 = *v12++;
    *v11++ = v13;
    --v9;
  }
  while (v9);
LABEL_7:
  p_strayWP2NP = &a2->spots.banks[1].strayWP2NP;
  unint64_t v81 = &a2->spots.banks[2].strayWP2NP;
  uint64_t v82 = &a2->spots.banks[3].strayWP2NP;
  unint64_t v83 = &a2->spots.banks[4].strayWP2NP;
  unint64_t v84 = &a2->spots.banks[5].strayWP2NP;
  uint64_t v85 = &a2->spots.banks[6].strayWP2NP;
  uint64_t v86 = &a2->spots.banks[7].strayWP2NP;
  *(void *)((char *)this + 4908) = 0x416E666641C80000;
  memcpy((char *)this + 4460, &peridot::gRefDataFile, 0x1C0uLL);
  memcpy((char *)this + 5812, &peridot::gPdeCurveTypicalInterpolated, 0x11CuLL);
  unint64_t v14 = 0;
  *((float *)this + 1524) = *p_meanPDE;
  p_spotPowerNarrow = &a2->spots.banks[7].spots[0].spotPowerNarrow;
  *((_DWORD *)this + 1525) = 1116471296;
  char v16 = 1;
  char v17 = 1;
  int v18 = 1;
  do
  {
    p_spotSizeNormal = &a2->spots.banks[0].spots[v14 / 0x1C].spotSizeNormal;
    int v20 = &a2->spots.banks[3].spots[v14 / 0x1C].spotSizeNormal;
    float v21 = &a2->spots.banks[4].spots[v14 / 0x1C].spotSizeNormal;
    float v22 = &p_spotPowerNarrow[v14 / 4];
    BOOL v23 = p_spotPowerNarrow[v14 / 4 - 1] == 0.0;
    if (a2->spots.banks[6].spots[v14 / 0x1C].spotPowerWide != 0.0) {
      BOOL v23 = 0;
    }
    if (a2->spots.banks[5].spots[v14 / 0x1C].spotPowerWide != 0.0) {
      BOOL v23 = 0;
    }
    if (v21[2] != 0.0) {
      BOOL v23 = 0;
    }
    if (v20[2] != 0.0) {
      BOOL v23 = 0;
    }
    if (a2->spots.banks[2].spots[v14 / 0x1C].spotPowerWide != 0.0) {
      BOOL v23 = 0;
    }
    if (a2->spots.banks[1].spots[v14 / 0x1C].spotPowerWide != 0.0) {
      BOOL v23 = 0;
    }
    if (p_spotSizeNormal[2] != 0.0) {
      BOOL v23 = 0;
    }
    BOOL v24 = *v22 == 0.0;
    if (a2->spots.banks[6].spots[v14 / 0x1C].spotPowerNarrow != 0.0) {
      BOOL v24 = 0;
    }
    if (a2->spots.banks[5].spots[v14 / 0x1C].spotPowerNarrow != 0.0) {
      BOOL v24 = 0;
    }
    if (v21[3] != 0.0) {
      BOOL v24 = 0;
    }
    if (v20[3] != 0.0) {
      BOOL v24 = 0;
    }
    if (a2->spots.banks[2].spots[v14 / 0x1C].spotPowerNarrow != 0.0) {
      BOOL v24 = 0;
    }
    float v25 = *v20;
    BOOL v26 = a2->spots.banks[1].spots[v14 / 0x1C].spotPowerNarrow == 0.0 && v24;
    float v27 = *v21;
    if (p_spotSizeNormal[3] != 0.0) {
      BOOL v26 = 0;
    }
    BOOL v28 = *(v22 - 3) == 0.0;
    if (a2->spots.banks[6].spots[v14 / 0x1C].spotSizeNormal != 0.0) {
      BOOL v28 = 0;
    }
    if (a2->spots.banks[5].spots[v14 / 0x1C].spotSizeNormal != 0.0) {
      BOOL v28 = 0;
    }
    if (v27 != 0.0) {
      BOOL v28 = 0;
    }
    float v29 = *p_spotSizeNormal;
    BOOL v30 = v25 == 0.0 && v28;
    if (a2->spots.banks[2].spots[v14 / 0x1C].spotSizeNormal != 0.0) {
      BOOL v30 = 0;
    }
    if (a2->spots.banks[1].spots[v14 / 0x1C].spotSizeNormal != 0.0) {
      BOOL v30 = 0;
    }
    v18 &= v23;
    v17 &= v26;
    if (v29 != 0.0) {
      BOOL v30 = 0;
    }
    v16 &= v30;
    v14 += 28;
  }
  while (v14 != 392);
  unsigned int v31 = *p_jlnmVersion;
  if (v31 < 0x66) {
    char v32 = 1;
  }
  else {
    char v32 = v17;
  }
  if (v31 < 0x66) {
    int v33 = 1;
  }
  else {
    int v33 = v18;
  }
  if (v32)
  {
    if (v33)
    {
      if (v16)
      {
        memset_pattern16((char *)this + 3976, &unk_259120E50, 0x20uLL);
        __asm { FMOV            V0.4S, #1.0 }
        long long v88 = _Q0;
        *(_OWORD *)((char *)this + 4916) = _Q0;
        *(_OWORD *)((char *)this + 5364) = _Q0;
        *(_OWORD *)((char *)this + 5380) = _Q0;
        *(_OWORD *)((char *)this + 4932) = _Q0;
        memset_pattern16((char *)this + 4008, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 4948) = v88;
        *(_OWORD *)((char *)this + 5396) = v88;
        *(_OWORD *)((char *)this + 5412) = v88;
        *(_OWORD *)((char *)this + 4964) = v88;
        memset_pattern16((char *)this + 4040, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 4980) = v88;
        *(_OWORD *)((char *)this + 5428) = v88;
        *(_OWORD *)((char *)this + 5444) = v88;
        *(_OWORD *)((char *)this + 4996) = v88;
        memset_pattern16((char *)this + 4072, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5012) = v88;
        *(_OWORD *)((char *)this + 5460) = v88;
        *(_OWORD *)((char *)this + 5476) = v88;
        *(_OWORD *)((char *)this + 5028) = v88;
        memset_pattern16((char *)this + 4104, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5044) = v88;
        *(_OWORD *)((char *)this + 5492) = v88;
        *(_OWORD *)((char *)this + 5508) = v88;
        *(_OWORD *)((char *)this + 5060) = v88;
        memset_pattern16((char *)this + 4136, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5076) = v88;
        *(_OWORD *)((char *)this + 5524) = v88;
        *(_OWORD *)((char *)this + 5540) = v88;
        *(_OWORD *)((char *)this + 5092) = v88;
        memset_pattern16((char *)this + 4168, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5108) = v88;
        *(_OWORD *)((char *)this + 5556) = v88;
        *(_OWORD *)((char *)this + 5572) = v88;
        *(_OWORD *)((char *)this + 5124) = v88;
        memset_pattern16((char *)this + 4200, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5140) = v88;
        *(_OWORD *)((char *)this + 5588) = v88;
        *(_OWORD *)((char *)this + 5604) = v88;
        *(_OWORD *)((char *)this + 5156) = v88;
        memset_pattern16((char *)this + 4232, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5620) = v88;
        *(_OWORD *)((char *)this + 5636) = v88;
        *(_OWORD *)((char *)this + 5172) = v88;
        *(_OWORD *)((char *)this + 5188) = v88;
        memset_pattern16((char *)this + 4264, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5652) = v88;
        *(_OWORD *)((char *)this + 5668) = v88;
        *(_OWORD *)((char *)this + 5204) = v88;
        *(_OWORD *)((char *)this + 5220) = v88;
        memset_pattern16((char *)this + 4296, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5684) = v88;
        *(_OWORD *)((char *)this + 5700) = v88;
        *(_OWORD *)((char *)this + 5236) = v88;
        *(_OWORD *)((char *)this + 5252) = v88;
        memset_pattern16((char *)this + 4328, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5716) = v88;
        *(_OWORD *)((char *)this + 5732) = v88;
        *(_OWORD *)((char *)this + 5268) = v88;
        *(_OWORD *)((char *)this + 5284) = v88;
        memset_pattern16((char *)this + 4360, &unk_259120E50, 0x20uLL);
        *(_OWORD *)((char *)this + 5748) = v88;
        *(_OWORD *)((char *)this + 5764) = v88;
        *(_OWORD *)((char *)this + 5300) = v88;
        *(_OWORD *)((char *)this + 5316) = v88;
        memset_pattern16((char *)this + 4392, &unk_259120E50, 0x20uLL);
        float result = *(float *)&v88;
        *(_OWORD *)((char *)this + 5780) = v88;
        *(_OWORD *)((char *)this + 5796) = v88;
        *(_OWORD *)((char *)this + 5332) = v88;
        *(_OWORD *)((char *)this + 5348) = v88;
      }
      else
      {
        uint64_t v73 = 0;
        uint64_t v74 = (char *)this + 3976;
        float result = 0.125;
        do
        {
          *((_DWORD *)v74 + 347) = 1065353216;
          *((_DWORD *)v74 + 235) = 1065353216;
          *(float *)uint64_t v74 = a2->spots.banks[0].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 348) = 1065353216;
          *((_DWORD *)v74 + 236) = 1065353216;
          *((float *)v74 + 1) = a2->spots.banks[1].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 349) = 1065353216;
          *((_DWORD *)v74 + 237) = 1065353216;
          *((float *)v74 + 2) = a2->spots.banks[2].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 350) = 1065353216;
          *((_DWORD *)v74 + 238) = 1065353216;
          *((float *)v74 + 3) = a2->spots.banks[3].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 351) = 1065353216;
          *((_DWORD *)v74 + 239) = 1065353216;
          *((float *)v74 + 4) = a2->spots.banks[4].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 352) = 1065353216;
          *((_DWORD *)v74 + 240) = 1065353216;
          *((float *)v74 + 5) = a2->spots.banks[5].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 353) = 1065353216;
          *((_DWORD *)v74 + 241) = 1065353216;
          *((float *)v74 + 6) = a2->spots.banks[6].spots[v73].spotSizeNormal * 0.125;
          *((_DWORD *)v74 + 354) = 1065353216;
          *((_DWORD *)v74 + 242) = 1065353216;
          *((float *)v74 + 7) = a2->spots.banks[7].spots[v73++].spotSizeNormal * 0.125;
          v74 += 32;
        }
        while (v73 != 14);
      }
    }
    else
    {
      float result = *((float *)this + 1228);
      if (v16)
      {
        uint64_t v66 = 0;
        unint64_t v67 = (char *)this + 3976;
        do
        {
          *((_DWORD *)v67 + 347) = 1065353216;
          float v68 = 1.0 / result;
          *((float *)v67 + 235) = a2->spots.banks[0].spots[v66].spotPowerWide * v68;
          *(_DWORD *)unint64_t v67 = 1051092582;
          *((_DWORD *)v67 + 348) = 1065353216;
          *((float *)v67 + 236) = a2->spots.banks[1].spots[v66].spotPowerWide * v68;
          *((_DWORD *)v67 + 1) = 1051092582;
          *((_DWORD *)v67 + 349) = 1065353216;
          *((float *)v67 + 237) = a2->spots.banks[2].spots[v66].spotPowerWide * v68;
          *((_DWORD *)v67 + 2) = 1051092582;
          *((_DWORD *)v67 + 350) = 1065353216;
          float result = *((float *)this + 1228);
          *((float *)v67 + 238) = a2->spots.banks[3].spots[v66].spotPowerWide * (float)(1.0 / result);
          *((_DWORD *)v67 + 3) = 1051092582;
          *((_DWORD *)v67 + 351) = 1065353216;
          *((float *)v67 + 239) = a2->spots.banks[4].spots[v66].spotPowerWide * (float)(1.0 / result);
          *((_DWORD *)v67 + 4) = 1051092582;
          *((_DWORD *)v67 + 352) = 1065353216;
          *((float *)v67 + 240) = a2->spots.banks[5].spots[v66].spotPowerWide * (float)(1.0 / result);
          *((_DWORD *)v67 + 5) = 1051092582;
          *((_DWORD *)v67 + 353) = 1065353216;
          *((float *)v67 + 241) = a2->spots.banks[6].spots[v66].spotPowerWide * (float)(1.0 / result);
          *((_DWORD *)v67 + 6) = 1051092582;
          *((_DWORD *)v67 + 354) = 1065353216;
          *((float *)v67 + 242) = a2->spots.banks[7].spots[v66].spotPowerWide * (float)(1.0 / result);
          *((_DWORD *)v67 + 7) = 1051092582;
          ++v66;
          v67 += 32;
        }
        while (v66 != 14);
      }
      else
      {
        unint64_t v75 = 0;
        p_spotPowerWide = &a2->spots.banks[7].spots[0].spotPowerWide;
        unint64_t v77 = &a2->spots.banks[3].spots[0].spotSizeNormal;
        uint64_t v78 = (char *)this + 3976;
        do
        {
          *((_DWORD *)v78 + 347) = 1065353216;
          float v79 = 1.0 / result;
          *((float *)v78 + 235) = a2->spots.banks[0].spots[v75 / 0x1C].spotPowerWide * v79;
          *(float *)uint64_t v78 = a2->spots.banks[0].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 348) = 1065353216;
          *((float *)v78 + 236) = a2->spots.banks[1].spots[v75 / 0x1C].spotPowerWide * v79;
          *((float *)v78 + 1) = a2->spots.banks[1].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 349) = 1065353216;
          *((float *)v78 + 237) = a2->spots.banks[2].spots[v75 / 0x1C].spotPowerWide * v79;
          *((float *)v78 + 2) = a2->spots.banks[2].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 350) = 1065353216;
          float result = *((float *)this + 1228);
          *((float *)v78 + 238) = v77[v75 / 4 + 2] * (float)(1.0 / result);
          *((float *)v78 + 3) = v77[v75 / 4] * 0.125;
          *((_DWORD *)v78 + 351) = 1065353216;
          *((float *)v78 + 239) = a2->spots.banks[4].spots[v75 / 0x1C].spotPowerWide * (float)(1.0 / result);
          *((float *)v78 + 4) = a2->spots.banks[4].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 352) = 1065353216;
          *((float *)v78 + 240) = a2->spots.banks[5].spots[v75 / 0x1C].spotPowerWide * (float)(1.0 / result);
          *((float *)v78 + 5) = a2->spots.banks[5].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 353) = 1065353216;
          *((float *)v78 + 241) = a2->spots.banks[6].spots[v75 / 0x1C].spotPowerWide * (float)(1.0 / result);
          *((float *)v78 + 6) = a2->spots.banks[6].spots[v75 / 0x1C].spotSizeNormal * 0.125;
          *((_DWORD *)v78 + 354) = 1065353216;
          *((float *)v78 + 242) = p_spotPowerWide[v75 / 4] * (float)(1.0 / result);
          *((float *)v78 + 7) = p_spotPowerWide[v75 / 4 - 2] * 0.125;
          v75 += 28;
          v78 += 32;
        }
        while (v75 != 392);
      }
    }
  }
  else
  {
    unint64_t v40 = 0;
    float result = *((float *)this + 1228);
    float v41 = &a2->spots.banks[0].spots[0].spotPowerWide;
    float v42 = &a2->spots.banks[1].spots[0].spotPowerWide;
    float v43 = &a2->spots.banks[2].spots[0].spotPowerWide;
    long long v44 = &a2->spots.banks[4].spots[0].spotPowerWide;
    uint64_t v45 = &a2->spots.banks[5].spots[0].spotPowerWide;
    unint64_t v46 = &a2->spots.banks[6].spots[0].spotPowerWide;
    unint64_t v47 = &a2->spots.banks[7].spots[0].spotPowerWide;
    float v48 = &a2->spots.banks[3].spots[0].spotSizeNormal;
    uint64_t v49 = (float *)((char *)this + 3976);
    do
    {
      v49[347] = v41[v40 / 4] / (float)(result * p_meanPDE[3260]);
      float v51 = 1.0;
      if ((v33 & 1) == 0) {
        float v51 = v41[v40 / 4] / result;
      }
      v49[235] = v51;
      if (v16) {
        float v52 = 0.325;
      }
      else {
        float v52 = a2->spots.banks[0].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      *uint64_t v49 = v52;
      v49[348] = v42[v40 / 4] / (float)(result * *p_strayWP2NP);
      float v53 = 1.0;
      if ((v33 & 1) == 0) {
        float v53 = v42[v40 / 4] / result;
      }
      v49[236] = v53;
      if (v16) {
        float v54 = 0.325;
      }
      else {
        float v54 = a2->spots.banks[1].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      v49[1] = v54;
      v49[349] = v43[v40 / 4] / (float)(result * *v81);
      float v55 = 1.0;
      if ((v33 & 1) == 0) {
        float v55 = v43[v40 / 4] / result;
      }
      v49[237] = v55;
      if (v16) {
        float v56 = 0.325;
      }
      else {
        float v56 = a2->spots.banks[2].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      v49[2] = v56;
      float result = *((float *)this + 1228);
      v49[350] = v48[v40 / 4 + 2] / (float)(result * *v82);
      float v57 = 1.0;
      if ((v33 & 1) == 0) {
        float v57 = v48[v40 / 4 + 2] / result;
      }
      v49[238] = v57;
      if (v16) {
        float v58 = 0.325;
      }
      else {
        float v58 = v48[v40 / 4] * 0.125;
      }
      v49[3] = v58;
      v49[351] = v44[v40 / 4] / (float)(result * *v83);
      float v59 = 1.0;
      if ((v33 & 1) == 0) {
        float v59 = v44[v40 / 4] / result;
      }
      v49[239] = v59;
      if (v16) {
        float v60 = 0.325;
      }
      else {
        float v60 = a2->spots.banks[4].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      v49[4] = v60;
      v49[352] = v45[v40 / 4] / (float)(result * *v84);
      float v61 = 1.0;
      if ((v33 & 1) == 0) {
        float v61 = v45[v40 / 4] / result;
      }
      v49[240] = v61;
      if (v16) {
        float v62 = 0.325;
      }
      else {
        float v62 = a2->spots.banks[5].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      v49[5] = v62;
      v49[353] = v46[v40 / 4] / (float)(result * *v85);
      float v63 = 1.0;
      if ((v33 & 1) == 0) {
        float v63 = v46[v40 / 4] / result;
      }
      v49[241] = v63;
      if (v16) {
        float v64 = 0.325;
      }
      else {
        float v64 = a2->spots.banks[6].spots[v40 / 0x1C].spotSizeNormal * 0.125;
      }
      v49[6] = v64;
      v49[354] = v47[v40 / 4] / (float)(result * *v86);
      float v65 = 1.0;
      if ((v33 & 1) == 0) {
        float v65 = v47[v40 / 4] / result;
      }
      v49[242] = v65;
      if (v16) {
        float v50 = 0.325;
      }
      else {
        float v50 = v47[v40 / 4 - 2] * 0.125;
      }
      v49[7] = v50;
      v40 += 28;
      v49 += 8;
    }
    while (v40 != 392);
  }
  return result;
}

uint64_t peridot::PeridotAlgo::Impl::processSuperFrame(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v45 = v5;
  int8x16_t v7 = v6;
  unint64_t v8 = (void *)v4;
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v67 = 0;
  unint64_t v57 = 0;
  uint64_t v56 = 0;
  if ((PeridotSuperFrame::loadFromBuffer((PeridotSuperFrame *)&v56, v9, v10, 0) & 1) == 0) {
    goto LABEL_6;
  }
  unint64_t v13 = v57;
  if (!v57)
  {
    peridot_depth_log("Empty frame");
    goto LABEL_6;
  }
  if (v57 > *v7)
  {
    peridot_depth_log("Number of banks provided by frame larger then requested");
LABEL_6:
    uint64_t v14 = 1;
    goto LABEL_7;
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  unint64_t *v7 = v57;
  if (v13)
  {
    do
    {
      unsigned int v19 = (char *)v45 + v17;
      float v46 = *((float *)&v8[22754 * (*(unsigned char *)(v59[v60[v18]] + 2) - 1) + 55740] + 1);
      *((unsigned char *)v45 + v17 + 4144) = *(unsigned char *)(v59[v60[v18]] + 2) - 1;
      bzero((char *)v45 + v17, 0x1030uLL);
      v19[588] = 1;
      v19[884] = 2;
      v19[1180] = 3;
      v19[1476] = 4;
      v19[1772] = 5;
      v19[2068] = 6;
      v19[2364] = 7;
      v19[2660] = 8;
      v19[2956] = 9;
      v19[3252] = 10;
      v19[3548] = 11;
      v19[3844] = 12;
      v19[4140] = 13;
      *((void *)v19 + 519) = v8[233329];
      *((void *)v19 + 520) = v8[233330];
      *((void *)v19 + 521) = v8[233331];
      *((void *)v19 + 522) = v8[233332];
      *((void *)v19 + 523) = v8[233333];
      *((void *)v19 + 524) = v8[233334];
      *((void *)v19 + 525) = v8[233335];
      *((void *)v19 + 526) = v8[233336];
      *((void *)v19 + 527) = v8[233337];
      *((float *)v19 + 1060) = v46;
      int v20 = (char *)v45 + v17 + 4240;
      *((float32x2_t *)v20 + 2) = vmul_n_f32((float32x2_t)0x3FC0000040400000, v46);
      double v12 = 2.3;
      double v11 = v46 * 2.3;
      *(float *)&double v11 = v11;
      *((_DWORD *)v19 + 1067) = LODWORD(v11);
      *(float *)&double v11 = v46 + v46;
      *((float *)v19 + 1068) = v46 + v46;
      *((_DWORD *)v20 + 17) = 1017370378;
      *(void *)(v20 + 60) = 0x4009999A3FD9999ALL;
      *(void *)(v20 + 76) = 0x3189705F2FA4ED3FLL;
      ++v18;
      v17 += 4336;
    }
    while (v13 != v18);
  }
  if (v63 == -1 || v65 == -1)
  {
    BOOL v22 = v63 == -1 && v65 == -1;
    BOOL v24 = v8 + 50318;
    uint64_t v25 = (uint64_t)v8;
    if (!v22)
    {
      peridot_depth_log("Only MNormal/Normal mode is supported currently");
      goto LABEL_6;
    }
    int v23 = 0;
  }
  else
  {
    int v23 = 2;
    BOOL v24 = v8 + 50318;
    uint64_t v25 = (uint64_t)v8;
  }
  *((_DWORD *)v24 + 231) = v23;
  uint64_t v47 = v25 + 8;
  if (v57 >> 1)
  {
    if (*(unsigned char *)(v59[0] + 75) && *(unsigned char *)(v59[1] + 75))
    {
      unsigned int v26 = *(unsigned __int16 *)(v58 + 9280 * v61 + 52);
      uint64_t v27 = (v26 >> 4) * (v26 >> 12);
      if (v27 != 12
        || (unsigned int v28 = *(unsigned __int16 *)(v58 + 9280 * v62 + 52), (v28 >> 4) * (v28 >> 12) != 12))
      {
        peridot_depth_log("Wrong super frame - expected %zu normal frames, got %zu", 0xCuLL, v27);
        goto LABEL_6;
      }
      uint64_t v53 = v58 + 9280 * v61;
      v52[0] = v58 + 9280 * v62;
      if ((*((_DWORD *)v24 + 231) - 1) > 1)
      {
        uint64_t v29 = 0;
        uint64_t v30 = 0;
        uint64_t v54 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v54 = v58 + 9280 * v63;
        uint64_t v55 = v58 + 9280 * v65;
        uint64_t v29 = v58 + 9280 * v64;
        uint64_t v30 = v58 + 9280 * v66;
      }
      v52[1] = v29;
      v52[2] = v30;
      unsigned __int8 v31 = *(unsigned char *)(v59[v60[0]] + 2) - 1;
      unsigned __int8 v32 = *(unsigned char *)(v59[v60[1]] + 2) - 1;
      peridot::PeridotAlgo::Impl::updateTempMeas(v25, &v53, v52, v31, v32, v11, v12);
      BOOL v51 = 0;
      peridot::PeridotDXP::configure(v25 + 182032 * v31 + 403488, (uint64_t)&v56, *((_DWORD *)v24 + 231), v47, 0, &v51);
      if (!v36)
      {
        LODWORD(v37) = peridot::PeridotT0::configure((peridot::PeridotT0 *)(v25 + 776 * v31 + 1859744), (const PeridotSuperFrame *)&v56, 0, &v51, v33, v34, v35).u32[0];
        uint64_t v38 = *((unsigned int *)v24 + 231);
        if ((v38 - 1) <= 1 && *(unsigned char *)(v25 + 182032 * v31 + 585304)) {
          peridot::PeridotAlgo::Impl::macroProcessingDelayCalib((peridot::PeridotAlgo::Impl *)v25, v31, v38, v37);
        }
        BOOL v50 = 0;
        peridot::PeridotDXP::configure(v25 + 182032 * v32 + 403488, (uint64_t)&v56, v38, v47, 1, &v50);
        LODWORD(v43) = peridot::PeridotT0::configure((peridot::PeridotT0 *)(v25 + 776 * v32 + 1859744), (const PeridotSuperFrame *)&v56, 1, &v50, v39, v40, v41).u32[0];
        int v44 = *((_DWORD *)v24 + 231);
        if ((v44 - 1) <= 1 && *(unsigned char *)(v25 + 182032 * v32 + 585304)) {
          peridot::PeridotAlgo::Impl::macroProcessingDelayCalib((peridot::PeridotAlgo::Impl *)v25, v32, *(void *)&v42, v43);
        }
        bzero(v49, 0x4CCuLL);
        bzero(v48, 0x4CCuLL);
        peridot::PeridotDXP::refPixelDetectorEstimator(v25 + 182032 * v31 + 403488, &v53, v44);
      }
      peridot_depth_log("Wrong Configuration: configuration failed for bank %d", v31);
      uint64_t v14 = 4;
    }
    else
    {
      peridot_depth_log("trgouten flag is null - projector is off");
      uint64_t v14 = 3;
    }
  }
  else
  {
    ++v8[233256];
    [(id)*v24 commit];
    PeridotTelemetry::frameProcessed((PeridotTelemetry *)(v25 + 1875032), (const PeridotSuperFrame *)&v56, v45);
    uint64_t v14 = 0;
  }
LABEL_7:
  uint64_t v15 = v67;
  uint64_t v67 = 0;
  if (v15) {
    MEMORY[0x25A2D62A0](v15, 0x1000C801E9FC43BLL);
  }
  return v14;
}

void sub_25902A464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  peridot::PeridotSpotRefDepth::~PeridotSpotRefDepth((peridot::PeridotSpotRefDepth *)&a48);
  peridot::PeridotSpotRefDepth::~PeridotSpotRefDepth((peridot::PeridotSpotRefDepth *)&STACK[0x218]);
  unint64_t v49 = STACK[0x6638];
  STACK[0x6638] = 0;
  if (v49) {
    MEMORY[0x25A2D62A0](v49, 0x1000C801E9FC43BLL);
  }
  _Unwind_Resume(a1);
}

uint64_t peridot::PeridotT0::calcT0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7, uint64_t a8)
{
  uint64_t v8 = 0;
  uint64_t v223 = *MEMORY[0x263EF8340];
  *(_DWORD *)(a8 + 1224) = 0;
  *(_OWORD *)(a8 + 1192) = 0u;
  *(_OWORD *)(a8 + 1208) = 0u;
  *(double *)&uint64_t v9 = *(float *)(a1 + 692);
  double v10 = *(float *)(a1 + 680);
  *(double *)&uint64_t v11 = *(float *)(a1 + 696);
  double v12 = *(double *)&v9 / (fmax(*(float *)(a2 + 4), 0.1) * v10) + *(double *)&v11;
  unint64_t v13 = *(float32x2_t **)(a2 + 16);
  *(float32x2_t *)v14.f32 = *v13;
  double v15 = *(double *)&v9 / (fmax(*(float *)(a2 + 116), 0.1) * v10) + *(double *)&v11;
  uint64_t v16 = *(void *)(a2 + 128);
  v14.i32[2] = v13[1].i32[0];
  v14.i32[3] = *(_DWORD *)v16;
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL);
  float64x2_t v18 = (float64x2_t)vdupq_lane_s64(v9, 0);
  float64x2_t v19 = vdivq_f64(v18, vmulq_n_f64(vmaxnmq_f64(vcvt_hight_f64_f32(v14), v17), v10));
  float64x2_t v20 = (float64x2_t)vdupq_lane_s64(v11, 0);
  float32x4_t v21 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(vdivq_f64(v18, vmulq_n_f64(vmaxnmq_f64(vcvtq_f64_f32(*v13), v17), v10)), v20)), vaddq_f64(v19, v20));
  v19.f64[0] = *(float64_t *)(a1 + 740);
  float32x4_t v22 = (float32x4_t)vzip1q_s32((int32x4_t)v19, (int32x4_t)v19);
  v22.i32[2] = LODWORD(v19.f64[0]);
  float32x4_t v23 = vmlaq_f32(v22, v21, v21);
  float64x2_t v24 = vmulq_n_f64(vmaxnmq_f64(vcvtq_f64_f32(*(float32x2_t *)(v16 + 4)), v17), v10);
  *(float32x2_t *)&v18.f64[0] = vcvt_f32_f64(vaddq_f64(vdivq_f64(v18, v24), v20));
  *(float32x2_t *)&v24.f64[0] = vmla_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)&v19.f64[0], 1), *(float32x2_t *)&v18.f64[0], *(float32x2_t *)&v18.f64[0]);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 3);
  __asm { FMOV            V5.4S, #1.0 }
  float32x4_t v31 = vdivq_f32(_Q5, (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v25, (int8x16_t)v25, 4uLL), (int8x16_t)v24, 0xCuLL));
  v20.f64[0] = (float)((float)(*(float *)(a1 + 660) - *(float *)(a1 + 664)) * *(float *)(a1 + 656));
  int32x4_t v32 = vmovl_s16(*(int16x4_t *)a1);
  v33.i64[0] = v32.i32[0];
  v33.i64[1] = v32.i32[1];
  float64x2_t v34 = vcvtq_f64_s64(v33);
  v33.i64[0] = v32.i32[2];
  v33.i64[1] = v32.i32[3];
  float64x2_t v35 = (float64x2_t)vdupq_n_s64(0x3D719799812DEA11uLL);
  float64x2_t v36 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v20.f64[0], 0);
  float32x4_t v37 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v36, v35, v34)), vmlaq_f64(v36, v35, vcvtq_f64_s64(v33)));
  int32x4_t v38 = vmovl_s16(*(int16x4_t *)(a1 + 8));
  v33.i64[0] = v38.i32[0];
  v33.i64[1] = v38.i32[1];
  float64x2_t v39 = vcvtq_f64_s64(v33);
  v33.i64[0] = v38.i32[2];
  v33.i64[1] = v38.i32[3];
  float32x4_t v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vmlaq_f64(v36, v35, v39)), vmlaq_f64(v36, v35, vcvtq_f64_s64(v33)));
  float32x4_t v219 = v37;
  float32x4_t v220 = v40;
  int32x4_t v41 = vmovl_s16(*(int16x4_t *)(a1 + 16));
  v33.i64[0] = v41.i32[0];
  v33.i64[1] = v41.i32[1];
  float64x2_t v42 = vcvtq_f64_s64(v33);
  v33.i64[0] = v41.i32[2];
  v33.i64[1] = v41.i32[3];
  float64x2_t v43 = vmlaq_f64(v36, v35, vcvtq_f64_s64(v33));
  float64x2_t v44 = vmlaq_f64(v36, v35, v42);
  float32x4_t v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v44), v43);
  float32x4_t v221 = v45;
  LOWORD(v44.f64[0]) = *(_WORD *)(a1 + 24);
  *(float *)v42.f64 = v20.f64[0] + (double)vmovl_s16(*(int16x4_t *)&v44.f64[0]).i32[0] * 1.0e-12;
  LOWORD(v43.f64[0]) = *(_WORD *)(a1 + 26);
  *(float *)v43.f64 = v20.f64[0] + (double)vmovl_s16(*(int16x4_t *)&v43.f64[0]).i32[0] * 1.0e-12;
  float32x2_t v222 = (float32x2_t)__PAIR64__(LODWORD(v43.f64[0]), LODWORD(v42.f64[0]));
  int32x4_t v46 = vmovl_s16(*(int16x4_t *)(a1 + 28));
  v33.i64[0] = v46.i32[0];
  v33.i64[1] = v46.i32[1];
  float64x2_t v47 = vcvtq_f64_s64(v33);
  v33.i64[0] = v46.i32[2];
  v33.i64[1] = v46.i32[3];
  float64x2_t v48 = vmlaq_f64(v36, v35, vcvtq_f64_s64(v33));
  float64x2_t v49 = vmlaq_f64(v36, v35, v47);
  int32x4_t v50 = vmovl_s16(*(int16x4_t *)(a1 + 36));
  v33.i64[0] = v50.i32[0];
  v33.i64[1] = v50.i32[1];
  float64x2_t v51 = vcvtq_f64_s64(v33);
  v33.i64[0] = v50.i32[2];
  v33.i64[1] = v50.i32[3];
  float64x2_t v52 = vmlaq_f64(v36, v35, vcvtq_f64_s64(v33));
  float64x2_t v53 = vmlaq_f64(v36, v35, v51);
  int32x4_t v54 = vmovl_s16(*(int16x4_t *)(a1 + 44));
  v33.i64[0] = v54.i32[0];
  v33.i64[1] = v54.i32[1];
  float64x2_t v55 = vcvtq_f64_s64(v33);
  v33.i64[0] = v54.i32[2];
  v33.i64[1] = v54.i32[3];
  float64x2_t v56 = vmlaq_f64(v36, v35, vcvtq_f64_s64(v33));
  float64x2_t v57 = vmlaq_f64(v36, v35, v55);
  LOWORD(v35.f64[0]) = *(_WORD *)(a1 + 52);
  v35.f64[0] = (double)vmovl_s16(*(int16x4_t *)&v35.f64[0]).i32[0];
  double v58 = v20.f64[0] + v35.f64[0] * 1.0e-12;
  LOWORD(v35.f64[0]) = *(_WORD *)(a1 + 54);
  double v59 = v20.f64[0] + (double)vmovl_s16(*(int16x4_t *)&v35.f64[0]).i32[0] * 1.0e-12;
  float v60 = *(float *)a2;
  float v61 = *(float *)(a2 + 112);
  double v62 = *(float *)(a1 + 56) * 1.0e-12;
  uint64_t v63 = *(float **)(a2 + 40);
  uint64_t v64 = *(float **)(a2 + 152);
  float v66 = *v63;
  float v65 = v63[1];
  float v67 = *v64;
  float v68 = v64[1];
  float v69 = v63[2];
  float v70 = v64[2];
  do
  {
    float v71 = v219.f32[v8];
    v218[v8] = v60 - v71;
    float v72 = v62 + (float)(v61 - v71);
    v217[v8] = v72;
    uint64_t v73 = &v207[0].f32[v8];
    float *v73 = v66 - v71;
    float v74 = v62 + (float)(v67 - v71);
    unint64_t v75 = &v197[0].f32[v8];
    *unint64_t v75 = v74;
    v73[14] = v65 - v71;
    float v76 = v62 + (float)(v68 - v71);
    v75[14] = v76;
    v73[28] = v69 - v71;
    float v77 = v62 + (float)(v70 - v71);
    v75[28] = v77;
    ++v8;
  }
  while (v8 != 14);
  int32x2_t v80 = (int32x2_t)vcvt_f32_f64(v49);
  int32x2_t v81 = (int32x2_t)vcvt_f32_f64(v53);
  int32x2_t v82 = (int32x2_t)vcvt_f32_f64(v57);
  float v83 = v217[0];
  float v84 = v218[0];
  float v85 = vabds_f32(v197[0].f32[0], v207[0].f32[0]);
  float v86 = vabds_f32(v199.f32[0], v209.f32[0]);
  float v87 = vabds_f32(v203.f32[0], v213.f32[0]);
  double v88 = vabds_f32(v217[0], v218[0]);
  *(unsigned char *)(a8 + 1192) = v88 > 5.0e-12;
  *(unsigned char *)(a8 + 1196) = v88 > 1.0e-11;
  *(unsigned char *)(a8 + 1200) = v88 > 2.0e-11;
  double v89 = v85;
  *(unsigned char *)(a8 + 1193) = v89 > 5.0e-12;
  *(unsigned char *)(a8 + 1197) = v89 > 1.0e-11;
  *(unsigned char *)(a8 + 1201) = v89 > 2.0e-11;
  double v90 = v86;
  *(unsigned char *)(a8 + 1205) = v90 > 5.0e-12;
  *(unsigned char *)(a8 + 1209) = v90 > 1.0e-11;
  *(unsigned char *)(a8 + 1213) = v90 > 2.0e-11;
  *(unsigned char *)(a8 + 1217) = v87 > 5.0e-12;
  *(unsigned char *)(a8 + 1221) = v87 > 1.0e-11;
  *(unsigned char *)(a8 + 1225) = v87 > 2.0e-11;
  if (a4) {
    float v91 = *(float *)(a1 + 692) / (fmax(*(float *)(a4 + 4), 0.1) * *(float *)(a1 + 680)) + *(float *)(a1 + 696);
  }
  else {
    float v91 = 0.0;
  }
  float32x4_t v92 = vdivq_f32(_Q5, v23);
  float v78 = v12;
  float v93 = 1.0 / (float)(*(float *)(a1 + 740) + (float)(v78 * v78));
  float v79 = v15;
  float v94 = 1.0 / (float)(*(float *)(a1 + 744) + (float)(v79 * v79));
  float v95 = v94 + v93;
  uint64_t v96 = a1 + 4 * a6;
  if (a4)
  {
    float v97 = *(float *)(a1 + 748) + (float)(v91 * v91);
    float v95 = (float)(1.0 / v97) + v95;
    float32x4_t v98 = vld1q_dup_f32((const float *)a4);
    float32x4_t v99 = vsubq_f32(v98, v37);
    float64x2_t v100 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v96 + 60) * 1.0e-12), 0);
    int32x2_t v101 = (int32x2_t)vcvt_f32_f64(vaddq_f64(v100, vcvtq_f64_f32(*(float32x2_t *)v99.f32)));
    float32x4_t v102 = vsubq_f32(v98, v40);
    float32x4_t v193 = vcvt_hight_f32_f64(v101, vaddq_f64(v100, vcvt_hight_f64_f32(v99)));
    float32x4_t v194 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v100, vcvtq_f64_f32(*(float32x2_t *)v102.f32))), vaddq_f64(v100, vcvt_hight_f64_f32(v102)));
    float32x4_t v103 = vsubq_f32(v98, v45);
    float32x4_t v195 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v100, vcvtq_f64_f32(*(float32x2_t *)v103.f32))), vaddq_f64(v100, vcvt_hight_f64_f32(v103)));
    float32x2_t v196 = vcvt_f32_f64(vaddq_f64(v100, vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v98.f32, v222))));
    *(double *)v103.i64 = vabds_f32(*(float *)v101.i32, v84);
    *(unsigned char *)(a8 + 1204) = *(double *)v103.i64 > 1.0e-11;
    *(unsigned char *)(a8 + 1208) = *(double *)v103.i64 > 1.5e-11;
    *(unsigned char *)(a8 + 1212) = *(double *)v103.i64 > 2.0e-11;
    *(double *)v103.i64 = vabds_f32(*(float *)v101.i32, v83);
    *(unsigned char *)(a8 + 1216) = *(double *)v103.i64 > 1.0e-11;
    *(unsigned char *)(a8 + 1220) = *(double *)v103.i64 > 1.5e-11;
    *(unsigned char *)(a8 + 1224) = *(double *)v103.i64 > 2.0e-11;
  }
  else
  {
    float32x2_t v196 = 0;
    float32x4_t v194 = 0u;
    float32x4_t v195 = 0u;
    float32x4_t v193 = 0u;
    float v97 = 0.0;
  }
  uint64_t v104 = 0;
  int32x4_t v105 = (int32x4_t)vaddq_f32(v31, v92);
  float32x4_t v106 = vcvt_hight_f32_f64(v80, v48);
  float32x4_t v107 = vcvt_hight_f32_f64(v81, v52);
  float32x4_t v108 = vcvt_hight_f32_f64(v82, v56);
  float v109 = v58;
  float v110 = v59;
  do
  {
    float v111 = (float)(v218[v104] * v93) + (float)(v217[v104] * v94);
    if (a4) {
      float v111 = v111 + (float)(v193.f32[v104] * (float)(1.0 / v97));
    }
    *(float *)(a8 + 16 + v104 * 4) = v111 * (float)(1.0 / v95);
    ++v104;
  }
  while (v104 != 14);
  float32x4_t v112 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0);
  float32x4_t v113 = vdivq_f32(_Q5, v112);
  float32x4_t v114 = v207[1];
  float32x4_t v115 = vdivq_f32(_Q5, v25);
  float32x4_t v116 = v197[1];
  float32x4_t v117 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.i8, 0);
  float32x4_t v118 = vdivq_f32(_Q5, v117);
  *(float32x4_t *)(a8 + 72) = vmulq_f32(vmlaq_f32(vmulq_f32(v207[0], v113), v115, v197[0]), v118);
  *(float32x4_t *)(a8 + 88) = vmulq_f32(vmlaq_f32(vmulq_f32(v114, v113), v115, v116), v118);
  *(float32x4_t *)(a8 + 104) = vmulq_f32(vmlaq_f32(vmulq_f32(v207[2], v113), v115, v197[2]), v118);
  float32x2_t v119 = v202;
  *(float32x2_t *)(a8 + 120) = vdiv_f32(vadd_f32(vdiv_f32(v198, *(float32x2_t *)v25.f32), vdiv_f32(v208, *(float32x2_t *)v112.f32)), *(float32x2_t *)v117.f32);
  float32x4_t v120 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1);
  float32x4_t v121 = vdivq_f32(_Q5, v120);
  float32x4_t v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v24.f64[0], 0);
  float32x4_t v123 = vdivq_f32(_Q5, v122);
  float32x4_t v124 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.i8, 1);
  float32x4_t v125 = vdivq_f32(_Q5, v124);
  float32x4_t v126 = vmulq_f32(vmlaq_f32(vmulq_f32(v209, v121), v123, v199), v125);
  float32x4_t v127 = vmulq_f32(vmlaq_f32(vmulq_f32(v210, v121), v123, v200), v125);
  *(float32x4_t *)(a8 + 128) = v126;
  *(float32x4_t *)(a8 + 144) = v127;
  *(float32x4_t *)(a8 + 160) = vmulq_f32(vmlaq_f32(vmulq_f32(v211, v121), v123, v201), v125);
  *(float32x2_t *)(a8 + 176) = vdiv_f32(vadd_f32(vdiv_f32(v119, *(float32x2_t *)v122.f32), vdiv_f32(v212, *(float32x2_t *)v120.f32)), *(float32x2_t *)v124.f32);
  float32x4_t v128 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2);
  float32x4_t v129 = vdivq_f32(_Q5, v128);
  float32x4_t v130 = v214;
  float32x4_t v131 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v24.f64[0], 1);
  float32x4_t v132 = vdivq_f32(_Q5, v131);
  float32x4_t v133 = v204;
  float32x4_t v134 = (float32x4_t)vdupq_laneq_s32(v105, 2);
  float32x4_t v135 = vdivq_f32(_Q5, v134);
  float32x4_t v136 = vmulq_f32(vmlaq_f32(vmulq_f32(v213, v129), v132, v203), v135);
  *(float32x4_t *)(a8 + 184) = v136;
  *(float32x4_t *)(a8 + 200) = vmulq_f32(vmlaq_f32(vmulq_f32(v130, v129), v132, v133), v135);
  *(float32x4_t *)(a8 + 216) = vmulq_f32(vmlaq_f32(vmulq_f32(v215, v129), v132, v205), v135);
  *(float32x2_t *)(a8 + 232) = vdiv_f32(vadd_f32(vdiv_f32(v206, *(float32x2_t *)v131.f32), vdiv_f32(v216, *(float32x2_t *)v128.f32)), *(float32x2_t *)v134.f32);
  v128.i32[0] = *(_DWORD *)(a8 + 72);
  v135.i64[0] = vsubq_f32(v136, v126).u64[0];
  *(double *)v131.i64 = vabds_f32(v126.f32[0], v128.f32[0]);
  *(unsigned char *)(a8 + 1194) = *(double *)v131.i64 > 2.0e-11;
  *(unsigned char *)(a8 + 1198) = *(double *)v131.i64 > 3.5e-11;
  *(unsigned char *)(a8 + 1202) = *(double *)v131.i64 > 5.0e-11;
  *(double *)v131.i64 = fabsf(v135.f32[0]);
  *(unsigned char *)(a8 + 1206) = *(double *)v131.i64 > 2.0e-11;
  *(unsigned char *)(a8 + 1210) = *(double *)v131.i64 > 3.5e-11;
  *(unsigned char *)(a8 + 1214) = *(double *)v131.i64 > 5.0e-11;
  *(double *)v128.i64 = vabds_f32(v128.f32[0], v136.f32[0]);
  *(unsigned char *)(a8 + 1218) = *(double *)v128.i64 > 2.0e-11;
  *(unsigned char *)(a8 + 1222) = *(double *)v128.i64 > 3.5e-11;
  *(unsigned char *)(a8 + 1226) = *(double *)v128.i64 > 5.0e-11;
  v128.i32[0] = *(_DWORD *)(a3 + 4);
  v128.i32[1] = *(_DWORD *)(a3 + 116);
  uint64_t v137 = *(void *)(a1 + 136);
  v135.i32[0] = *(_DWORD *)(a3 + 112 * *(void *)(a1 + 128));
  float32x2_t v191 = 0;
  float32x4_t v189 = 0u;
  float32x4_t v190 = 0u;
  float32x4_t v188 = 0u;
  float64x2_t v138 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 696)), 0);
  *(float32x2_t *)v128.f32 = vcvt_f32_f64(vaddq_f64(vdivq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(a1 + 692)), 0), vmulq_n_f64(vmaxnmq_f64(vcvtq_f64_f32(*(float32x2_t *)v128.f32), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL)), *(float *)(a1 + 684))), v138));
  LODWORD(v138.f64[0]) = *(_DWORD *)(a3 + 112 * v137);
  uint64_t v192 = v128.i64[0];
  *(double *)v134.i64 = *(float *)(a1 + 124) * 1.0e-12;
  float32x4_t v139 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 0);
  float32x4_t v140 = vsubq_f32(v139, v106);
  float32x4_t v141 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v138.f64[0], 0);
  float32x4_t v142 = vsubq_f32(v141, v106);
  float64x2_t v143 = (float64x2_t)vdupq_lane_s64(v134.i64[0], 0);
  float32x4_t v144 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v143, vcvtq_f64_f32(*(float32x2_t *)v142.f32))), vaddq_f64(v143, vcvt_hight_f64_f32(v142)));
  v185[0] = v140;
  v185[1] = vsubq_f32(v139, v107);
  float32x4_t v145 = vsubq_f32(v141, v107);
  v182[0] = v144;
  v182[1] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v143, vcvtq_f64_f32(*(float32x2_t *)v145.f32))), vaddq_f64(v143, vcvt_hight_f64_f32(v145)));
  v185[2] = vsubq_f32(v139, v108);
  float32x4_t v146 = vsubq_f32(v141, v108);
  v182[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v143, vcvtq_f64_f32(*(float32x2_t *)v146.f32))), vaddq_f64(v143, vcvt_hight_f64_f32(v146)));
  v145.f32[0] = *(double *)v134.i64 + (float)(*(float *)v138.f64 - v109);
  float v186 = v135.f32[0] - v109;
  float v187 = v135.f32[0] - v110;
  v135.f32[0] = *(double *)v134.i64 + (float)(*(float *)v138.f64 - v110);
  __int32 v183 = v145.i32[0];
  __int32 v184 = v135.i32[0];
  *(double *)v135.i64 = fabsf(vsubq_f32(v144, v140).f32[0]);
  *(unsigned char *)(a8 + 1195) = *(double *)v135.i64 > 5.0e-12;
  *(unsigned char *)(a8 + 1199) = *(double *)v135.i64 > 1.0e-11;
  *(unsigned char *)(a8 + 1203) = *(double *)v135.i64 > 2.0e-11;
  if (a4 && *(unsigned char *)(a1 + 764))
  {
    float v147 = *((float *)&v192 + *(void *)(a1 + 128));
    float v148 = (const float *)(a5 + 112);
    float v149 = (float)(*(float *)(a1 + 692) / (float)(fmaxf(*(float *)(a5 + 116), 1.0) * *(float *)(a1 + 684)))
         + *(float *)(a1 + 696);
    float v150 = *(float *)(a1 + 752) + (float)(v147 * v147);
    float v151 = *(float *)(a1 + 756)
         + (float)(*((float *)&v192 + *(void *)(a1 + 136)) * *((float *)&v192 + *(void *)(a1 + 136)));
    float v152 = *(float *)(a1 + 760) + (float)(v149 * v149);
    float32x4_t v153 = vld1q_dup_f32(v148);
    float32x4_t v154 = vsubq_f32(v153, v219);
    float64x2_t v155 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(*(float *)(v96 + 92) * 1.0e-12), 0);
    float32x4_t v156 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v155, vcvtq_f64_f32(*(float32x2_t *)v154.f32))), vaddq_f64(v155, vcvt_hight_f64_f32(v154)));
    float32x4_t v157 = vsubq_f32(v153, v220);
    float32x4_t v188 = v156;
    float32x4_t v189 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v155, vcvtq_f64_f32(*(float32x2_t *)v157.f32))), vaddq_f64(v155, vcvt_hight_f64_f32(v157)));
    float32x4_t v158 = vsubq_f32(v153, v221);
    float32x4_t v190 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vaddq_f64(v155, vcvtq_f64_f32(*(float32x2_t *)v158.f32))), vaddq_f64(v155, vcvt_hight_f64_f32(v158)));
    float32x2_t v191 = vcvt_f32_f64(vaddq_f64(v155, vcvtq_f64_f32(vsub_f32(*(float32x2_t *)v153.f32, v222))));
    v155.f64[0] = fabsf(vsubq_f32(v156, v140).f32[0]);
    *(unsigned char *)(a8 + 1207) = v155.f64[0] > 1.0e-11;
    *(unsigned char *)(a8 + 1211) = v155.f64[0] > 1.5e-11;
    *(unsigned char *)(a8 + 1215) = v155.f64[0] > 2.0e-11;
    v155.f64[0] = fabsf(vsubq_f32(v156, v144).f32[0]);
    *(unsigned char *)(a8 + 1219) = v155.f64[0] > 1.0e-11;
    *(unsigned char *)(a8 + 1223) = v155.f64[0] > 1.5e-11;
    *(unsigned char *)(a8 + 1227) = v155.f64[0] > 2.0e-11;
  }
  else
  {
    float v150 = *(float *)(a1 + 752)
         + (float)(*((float *)&v192 + *(void *)(a1 + 128)) * *((float *)&v192 + *(void *)(a1 + 128)));
    float v159 = *((float *)&v192 + *(void *)(a1 + 136));
    float v151 = *(float *)(a1 + 756) + (float)(v159 * v159);
    float v152 = 0.0;
  }
  unint64_t v160 = 0;
  if (v150 <= 0.0) {
    float v161 = 0.0;
  }
  else {
    float v161 = 1.0 / v150;
  }
  float v162 = 1.0 / v151;
  float v163 = (float)(1.0 / v151) + v161;
  if (v151 <= 0.0) {
    float v163 = v161;
  }
  float v164 = -0.0;
  if (v152 > 0.0) {
    float v164 = 1.0 / v152;
  }
  float v165 = 1.0 / (float)(v163 + v164);
  uint64_t v166 = a8 + 240;
  do
  {
    float v167 = (float)((float)(*(float *)((char *)v185 + v160) * (float)(1.0 / v150))
                 + (float)(*(float *)((char *)v182 + v160) * v162))
         * v165;
    *(float *)(v166 + v160) = v167;
    if (v152 > 0.0) {
      *(float *)(v166 + v160) = v167 + (float)((float)(v188.f32[v160 / 4] * v165) * (float)(1.0 / v152));
    }
    v160 += 4;
  }
  while (v160 != 56);
  uint64_t v168 = 0;
  float v169 = 1.0e-12;
  if (a7) {
    float v169 = 0.0;
  }
  uint64_t v170 = a1 + 56 * *(void *)(a1 + 536) + 144;
  uint64_t v171 = a1 + 56 * *(void *)(a1 + 552) + 144;
  uint64_t v172 = a1 + 56 * *(void *)(a1 + 544) + 144;
  uint64_t v173 = a1 + 56 * *(void *)(a1 + 640) + 144;
  do
  {
    uint64_t v174 = a8 + v168;
    float v175 = *(float *)(a8 + v168 + 16);
    *(float *)(v174 + 296) = v175 - (float)(*(float *)(v170 + v168) * v169);
    *(float *)(v174 + 352) = v175 - (float)(*(float *)(v171 + v168) * v169);
    float v176 = v175 - (float)(*(float *)(v172 + v168) * v169);
    *(float *)(v174 + 408) = v176;
    float v177 = v175 - (float)(*(float *)(v173 + v168) * v169);
    *(float *)(v174 + 464) = v177;
    *(_DWORD *)(v174 + 520) = 0;
    *(float *)(v174 + 576) = v176;
    *(float *)(v174 + 632) = v177;
    float v178 = *(float *)(a8 + v168 + 72);
    *(float *)(v174 + 688) = v178 - (float)(*(float *)(v170 + v168) * v169);
    *(float *)(v174 + 856) = v178 - (float)(*(float *)(v171 + v168) * v169);
    *(float *)(v174 + 1024) = v178 - (float)(*(float *)(v172 + v168) * v169);
    float v179 = *(float *)(a8 + v168 + 128);
    *(float *)(v174 + 744) = v179 - (float)(*(float *)(v170 + v168) * v169);
    *(float *)(v174 + 912) = v179 - (float)(*(float *)(v171 + v168) * v169);
    *(float *)(v174 + 1080) = v179 - (float)(*(float *)(v172 + v168) * v169);
    float v180 = *(float *)(a8 + v168 + 184);
    *(float *)(v174 + 800) = v180 - (float)(*(float *)(v170 + v168) * v169);
    *(float *)(v174 + 968) = v180 - (float)(*(float *)(v171 + v168) * v169);
    *(float *)(v174 + 1136) = v180 - (float)(*(float *)(v172 + v168) * v169);
    v168 += 4;
  }
  while (v168 != 56);
  return 0;
}

float32x2_t peridot::PeridotT0::configure(peridot::PeridotT0 *this, const PeridotSuperFrame *a2, uint64_t a3, BOOL *a4, float32x2_t result, double a6, float a7)
{
  uint64_t v7 = *((void *)a2 + *((void *)a2 + a3 + 494) + 227);
  result.i16[0] = *(_WORD *)(v7 + 4);
  LOBYTE(a7) = *((unsigned char *)a2 + 3616);
  *(float *)&unsigned int v8 = 0.000000020833
                / (float)((float)result.u32[0]
                        + (float)((float)((float)(*(unsigned __int8 *)(v7 + 6) << 8) + (float)LODWORD(a7)) * 0.000015259));
  *((float *)this + 164) = *(float *)&v8;
  LOWORD(v8) = *(_WORD *)(v7 + 16);
  float v9 = (float)v8;
  *((float *)this + 165) = v9;
  LOWORD(v9) = *(_WORD *)(v7 + 22);
  result.f32[0] = (float)LODWORD(v9);
  *((_DWORD *)this + 166) = result.i32[0];
  if (*a4)
  {
    uint64_t v11 = (char *)this + 144;
    result.i32[0] = 1.0;
    double v12 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)this, 0, *(unsigned __int8 *)(*((void *)this + 96) + 3520), *(unsigned __int8 *)(*((void *)this + 96) + 3521), (uint64_t)this + 56 * *((void *)this + 67) + 144, *(double *)&result, 0.000000020833);
    LODWORD(v12) = 3.0;
    double v14 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)this, 0, *(unsigned __int8 *)(*((void *)this + 96) + 3522), 0, (uint64_t)&v11[56 * *((void *)this + 68)], v12, v13);
    LODWORD(v14) = 2.0;
    peridot::PeridotT0::calcP2PPerChannel((uint64_t)this, 0, *(unsigned __int8 *)(*((void *)this + 96) + 3521), 0, (uint64_t)&v11[56 * *((void *)this + 69)], v14, v15);
    uint64_t v16 = &v11[56 * *((void *)this + 68)];
    float64x2_t v17 = &v11[56 * *((void *)this + 78)];
    long long v18 = *((_OWORD *)v16 + 1);
    *(_OWORD *)float64x2_t v17 = *(_OWORD *)v16;
    *((_OWORD *)v17 + 1) = v18;
    *((_OWORD *)v17 + 2) = *((_OWORD *)v16 + 2);
    double v19 = *((double *)v16 + 6);
    *((double *)v17 + 6) = v19;
    LODWORD(v19) = 2.0;
    double v20 = peridot::PeridotT0::calcP2PPerChannel((uint64_t)this, 1u, *(unsigned __int8 *)(*((void *)this + 96) + 3521), 0, (uint64_t)&v11[56 * *((void *)this + 80)], v19, *(float *)&v18);
    LODWORD(v20) = 3.0;
    peridot::PeridotT0::calcP2PPerChannel((uint64_t)this, 1u, *(unsigned __int8 *)(*((void *)this + 96) + 3522), 0, (uint64_t)&v11[56 * *((void *)this + 81)], v20, v21);
    float32x4_t v22 = &v11[56 * *((void *)this + 80)];
    float32x4_t v23 = &v11[56 * *((void *)this + 81)];
    v24.i64[0] = 0x3F0000003F000000;
    v24.i64[1] = 0x3F0000003F000000;
    float32x4_t v25 = vmulq_f32(vaddq_f32(*((float32x4_t *)v23 + 1), *((float32x4_t *)v22 + 1)), v24);
    *(float32x4_t *)float32x4_t v22 = vmulq_f32(vaddq_f32(*(float32x4_t *)v23, *(float32x4_t *)v22), v24);
    *((float32x4_t *)v22 + 1) = v25;
    *((float32x4_t *)v22 + 2) = vmulq_f32(vaddq_f32(*((float32x4_t *)v23 + 2), *((float32x4_t *)v22 + 2)), v24);
    float result = vmul_f32(vadd_f32(*(float32x2_t *)(v23 + 48), *(float32x2_t *)(v22 + 48)), (float32x2_t)0x3F0000003F000000);
    *((float32x2_t *)v22 + 6) = result;
  }
  return result;
}

double peridot::PeridotT0::calcP2PPerChannel(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, double result, float a7)
{
  if (a4 + a3 == 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 768);
    uint64_t v9 = v8 + 504 * a2;
    uint64_t v10 = v8 + 126 * a2 + 40484;
    while (1)
    {
      LOBYTE(a7) = *(unsigned char *)(v10 + v7 - 4);
      float v11 = (float)LODWORD(a7);
      if (v11 == *(float *)&result)
      {
        uint64_t v12 = 0;
      }
      else
      {
        LOBYTE(v11) = *(unsigned char *)(v10 + v7 - 3);
        float v13 = (float)LODWORD(v11);
        if (v13 == *(float *)&result)
        {
          uint64_t v12 = 1;
        }
        else
        {
          LOBYTE(v13) = *(unsigned char *)(v10 + v7 - 2);
          float v14 = (float)LODWORD(v13);
          if (v14 != *(float *)&result) {
            goto LABEL_10;
          }
          uint64_t v12 = 2;
        }
      }
      float v14 = (float)*(int *)(v9 + 4 * v12 + 4 * v7 + 1840);
      *(float *)a5 = v14;
LABEL_10:
      LOBYTE(v14) = *(unsigned char *)(v10 + v7 - 1);
      float v15 = (float)LODWORD(v14);
      if (v15 == *(float *)&result)
      {
        uint64_t v16 = 0;
      }
      else
      {
        LOBYTE(v15) = *(unsigned char *)(v10 + v7);
        float v17 = (float)LODWORD(v15);
        if (v17 == *(float *)&result)
        {
          uint64_t v16 = 1;
        }
        else
        {
          LOBYTE(v17) = *(unsigned char *)(v10 + v7 + 1);
          float v18 = (float)LODWORD(v17);
          if (v18 != *(float *)&result) {
            goto LABEL_17;
          }
          uint64_t v16 = 2;
        }
      }
      float v18 = (float)*(int *)(v9 + 4 * v16 + 4 * v7 + 1852);
      *(float *)a5 = v18;
LABEL_17:
      LOBYTE(v18) = *(unsigned char *)(v10 + v7 + 2);
      float v19 = (float)LODWORD(v18);
      if (v19 == *(float *)&result)
      {
        uint64_t v20 = 0;
LABEL_23:
        a7 = (float)*(int *)(v9 + 4 * v20 + 4 * v7 + 1864);
        *(float *)a5 = a7;
        goto LABEL_24;
      }
      LOBYTE(v19) = *(unsigned char *)(v10 + v7 + 3);
      float v21 = (float)LODWORD(v19);
      if (v21 == *(float *)&result)
      {
        uint64_t v20 = 1;
        goto LABEL_23;
      }
      LOBYTE(v21) = *(unsigned char *)(v10 + v7 + 4);
      a7 = (float)LODWORD(v21);
      if (a7 == *(float *)&result)
      {
        uint64_t v20 = 2;
        goto LABEL_23;
      }
LABEL_24:
      v7 += 9;
      a5 += 4;
      if (v7 == 126) {
        return result;
      }
    }
  }
  *(void *)(a5 + 48) = 0;
  float result = 0.0;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  return result;
}

void peridot::PeridotDXP::configure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned char *a6)
{
  uint64_t v12 = (const peridot::PeridotDXPCalib *)(a1 + 16);
  uint64_t v13 = *(void *)(a2 + 8 * a5 + 3952);
  unsigned int v14 = *(unsigned __int16 *)(*(void *)(a2 + 16) + 9280 * v13 + 52);
  unint64_t v15 = v14 >> 4;
  unsigned int v16 = v14 >> 12;
  if (*(unsigned char *)(a1 + 42449))
  {
    *(_DWORD *)(a1 + 16) = a3;
    *(unsigned char *)(a1 + 20) = v16;
    *(unsigned char *)(a1 + 21) = v15;
    *(unsigned char *)(a1 + 42449) = 0;
  }
  else
  {
    if (*(_DWORD *)v12 == a3)
    {
      uint64_t v17 = *(unsigned __int8 *)(a1 + 20);
      if (__PAIR64__(*(unsigned __int8 *)(a1 + 21), v17) == __PAIR64__(v15, v16)
        && !peridot::PeridotDXPCalib::InputConfig::isChanged(a1 + 32, a2, a3, v13, v15, v17))
      {
        *a6 = 0;
        return;
      }
    }
    peridot_depth_log("DXPCalib::configure: operation mode/ pri num/ phase num/frame config changed");
  }
  *a6 = 1;
  if (!peridot::PeridotDXPCalib::configure((uint64_t)v12, a2, a3, a4, a5))
  {
    peridot::PeridotDXPPreProcessor::configure((peridot::PeridotDXPPreProcessor *)(a1 + 42464), v12);
    if (!v18 && !peridot::PeridotDxpDetector::configure((peridot::PeridotDxpDetector *)(a1 + 93544), v12))
    {
      *(_DWORD *)(a1 + 118692) = *(_DWORD *)(a1 + 16);
      *(void *)(a1 + 118700) = *(void *)(a1 + 3440);
      *(_DWORD *)(a1 + 118708) = *(_DWORD *)(a1 + 3448);
      *(void *)(a1 + 118712) = *(void *)(a1 + 3452);
      *(_DWORD *)(a1 + 118720) = *(_DWORD *)(a1 + 3460);
      long long v19 = *(_OWORD *)(a1 + 3480);
      *(void *)(a1 + 118744) = *(void *)(a1 + 3496);
      long long v20 = *(_OWORD *)(a1 + 3464);
      char v21 = *(unsigned char *)(a1 + 21);
      *(unsigned char *)(a1 + 118696) = v21;
      *(_OWORD *)(a1 + 118728) = v19;
      long long v22 = *(_OWORD *)(a1 + 3792);
      *(_OWORD *)(a1 + 118784) = *(_OWORD *)(a1 + 3776);
      *(_OWORD *)(a1 + 118800) = v22;
      long long v23 = *(_OWORD *)(a1 + 3760);
      *(_OWORD *)(a1 + 118752) = v20;
      *(_OWORD *)(a1 + 118768) = v23;
      *(void *)(a1 + 118664) = 4;
      *(unsigned char *)(a1 + 118672) = 1;
      *(unsigned char *)(a1 + 118673) = v21;
      LODWORD(v23) = *(_DWORD *)(a1 + 3440);
      *(_DWORD *)(a1 + 150296) = v23;
      uint64_t v24 = *(void *)(a1 + 3960);
      *(void *)(a1 + 150304) = v24;
      *(_DWORD *)(a1 + 181744) = v23;
      *(void *)(a1 + 181752) = v24;
      *(void *)(a1 + 181786) = *(void *)(a1 + 4046);
      *(void *)(a1 + 181780) = *(void *)(a1 + 4040);
      *(void *)(a1 + 181794) = *(void *)(a1 + 4054);
      *(void *)(a1 + 181800) = *(void *)(a1 + 4060);
    }
  }
}

void peridot::PeridotAlgo::Impl::fillGmoInput(float a1, double a2, float a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, CMTime *a11)
{
  uint64_t v13 = (BOOL *)(a10 + 8952);
  unsigned int v14 = &a5[a8];
  uint64_t v15 = v14[494];
  uint64_t v16 = a5[2] + 9280 * v15;
  unint64_t v17 = *(_WORD *)(v16 + 52) >> 4;
  *(void *)(a10 + 32) = v17;
  unint64_t v18 = *(unsigned __int16 *)(v16 + 52);
  *(void *)(a10 + 24) = v18 >> 12;
  uint64_t v19 = a5[v15 + 227];
  LOWORD(a1) = *(_WORD *)(v19 + 4);
  LOBYTE(a3) = *((unsigned char *)a5 + v15 + 3616);
  float v20 = 0.000000020833
      / (float)((float)LODWORD(a1)
              + (float)((float)((float)(*(unsigned __int8 *)(v19 + 6) << 8) + (float)LODWORD(a3)) * 0.000015259));
  *(float *)(a10 + 40) = v20;
  *(float *)(a10 + 44) = v20;
  *(float *)(a10 + 48) = v20;
  if (v17)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 9280 * v15 + 10200;
    long long v23 = (float32x4_t *)(a10 + 1548);
    unint64_t v24 = v17;
    do
    {
      if (v24 && v18 >= 0x1000)
      {
        unint64_t v25 = 0;
        uint64_t v26 = a5[2];
        unint64_t v27 = *(void *)(a10 + 24);
        unint64_t v28 = *(void *)(a10 + 32);
        if (v27 <= 1) {
          uint64_t v29 = 1;
        }
        else {
          uint64_t v29 = *(void *)(a10 + 24);
        }
        uint64_t v30 = v29 - 1;
        float32x4_t v31 = (unsigned int *)(v26 + v22);
        int32x4_t v32 = v23;
        unint64_t v33 = v18 >> 12;
        do
        {
          if (v33)
          {
            uint64_t v34 = a10 + 860 + 48 * v21 + 2688 * v25;
            float64x2_t v35 = (uint16x4_t *)(v26 + 9280 * (v15 + v33 * v25) + 640 * v21);
            unsigned int v36 = v35[115].u32[0];
            uint32x4_t v37 = (uint32x4_t)vdupq_n_s32(v36);
            v38.i32[0] = v36;
            v38.i32[1] = v36 >> 2;
            v38.u64[1] = (unint64_t)vshl_u32(*(uint32x2_t *)v37.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFCLL);
            float32x4_t v39 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v37, (uint32x4_t)xmmword_259120450), (int32x4_t)vmovl_u16(v35[113]), 2uLL));
            *(float32x4_t *)uint64_t v34 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32(v38, (int32x4_t)vmovl_u16(v35[112]), 2uLL));
            *(float32x4_t *)(v34 + 16) = v39;
            uint32x4_t v40 = (uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v37, (uint32x4_t)xmmword_259120460), (int32x4_t)vmovl_u16(v35[114]), 2uLL);
            unint64_t v17 = v28;
            unint64_t v33 = v27;
            *(float32x4_t *)(v34 + 32) = vcvtq_f32_u32(v40);
            int32x4_t v41 = v32;
            float64x2_t v42 = v31;
            uint64_t v43 = v30;
            if (v27 >= 2)
            {
              do
              {
                uint32x4_t v44 = (uint32x4_t)vdupq_n_s32(*v42);
                v45.i32[0] = *v42;
                v45.i32[1] = *v42 >> 2;
                v45.u64[1] = (unint64_t)vshl_u32(*(uint32x2_t *)v44.i8, (uint32x2_t)0xFFFFFFFAFFFFFFFCLL);
                uint16x4_t v46 = *(uint16x4_t *)(v42 - 4);
                v41[-1] = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32(v45, (int32x4_t)vmovl_u16(*(uint16x4_t *)(v42 - 6)), 2uLL));
                float32x4_t v47 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v44, (uint32x4_t)xmmword_259120450), (int32x4_t)vmovl_u16(v46), 2uLL));
                float32x4_t v48 = vcvtq_f32_u32((uint32x4_t)vsliq_n_s32((int32x4_t)vshlq_u32(v44, (uint32x4_t)xmmword_259120460), (int32x4_t)vmovl_u16(*(uint16x4_t *)(v42 - 2)), 2uLL));
                float32x4_t *v41 = v47;
                v41[1] = v48;
                v41 += 42;
                v42 += 2320;
                --v43;
              }
              while (v43);
              unint64_t v17 = v28;
              unint64_t v33 = v27;
            }
          }
          ++v25;
          v31 += 2320 * v27;
          v32 += 168;
          unint64_t v24 = v17;
        }
        while (v25 < v17);
      }
      ++v21;
      v22 += 640;
      v23 += 3;
    }
    while (v21 != 14);
  }
  *(void *)a10 = (*(unsigned char *)(a5[v14[466] + 115] + 2) - 1);
  *(void *)(a10 + 8) = a8;
  *(void *)(a10 + 16) = a9;
  CMTime time = *a11;
  *(Float64 *)(a10 + 64) = CMTimeGetSeconds(&time);
  float64x2_t v49 = &a5[v15];
  uint64_t v50 = v49[3];
  uint64_t v51 = *(void *)(v50 + 4);
  *(void *)(a10 + 8930) = *(void *)(v50 + 10);
  *(void *)(a10 + 8924) = v51;
  uint64_t v52 = v49[3];
  uint64_t v53 = *(void *)(v52 + 32);
  *(void *)(a10 + 8944) = *(void *)(v52 + 38);
  *(void *)(a10 + 8938) = v53;
  int32x4_t v54 = (_DWORD *)a5[v15 + 115];
  *uint64_t v13 = (v54[2] & 0x120000) == 0x100000;
  v13[1] = (v54[3] & 0x120000) == 0x100000;
  v13[2] = (v54[4] & 0x120000) == 0x100000;
  v13[3] = (v54[5] & 0x120000) == 0x100000;
  v13[4] = (v54[6] & 0x120000) == 0x100000;
  v13[5] = (v54[7] & 0x120000) == 0x100000;
  v13[6] = (v54[8] & 0x120000) == 0x100000;
  v13[7] = (v54[9] & 0x120000) == 0x100000;
  v13[8] = (v54[10] & 0x120000) == 0x100000;
  v13[9] = (v54[11] & 0x120000) == 0x100000;
  v13[10] = (v54[12] & 0x120000) == 0x100000;
  v13[11] = (v54[13] & 0x120000) == 0x100000;
  v13[12] = (v54[14] & 0x120000) == 0x100000;
  v13[13] = (v54[15] & 0x120000) == 0x100000;
  uint64_t v55 = *(void *)(a10 + 24);
  unint64_t v56 = *(void *)(a10 + 32);
  if (v56)
  {
    if (!v55) {
      goto LABEL_26;
    }
    unint64_t v57 = 0;
    uint64_t v58 = a10 + 8974;
    uint64_t v59 = 8 * v55;
    uint64_t v60 = (uint64_t)&a5[v15 + 228];
    uint64_t v61 = *(void *)(a10 + 24);
    do
    {
      if (v61)
      {
        uint64_t v62 = v61 * v57;
        int16x4_t v63 = *(int16x4_t *)(a5[v62 + 227 + v15] + 48);
        *(int16x4_t *)(a10 + 8966 + 8 * v62) = vzip2_s16(vzip1_s16(v63, (int16x4_t)vext_s8((int8x8_t)v63, (int8x8_t)v63, 6uLL)), v63);
        uint64_t v61 = v55;
        if (v55 != 1)
        {
          uint64_t v64 = 0;
          do
          {
            *(int16x4_t *)(v58 + 8 * v64) = vzip2_s16(vzip1_s16(*(int16x4_t *)(*(void *)(v60 + 8 * v64) + 48), (int16x4_t)vext_s8(*(int8x8_t *)(*(void *)(v60 + 8 * v64) + 48), *(int8x8_t *)(*(void *)(v60 + 8 * v64) + 48), 6uLL)), *(int16x4_t *)(*(void *)(v60 + 8 * v64) + 48));
            ++v64;
          }
          while (v55 - 1 != v64);
          uint64_t v61 = v55;
        }
      }
      ++v57;
      v58 += v59;
      v60 += v59;
    }
    while (v57 < v56);
  }
  if (v55) {
    bzero((void *)(a10 + 24 * v55 + 8966), 8 * v55);
  }
LABEL_26:
  uint64_t v65 = 0;
  uint64_t v66 = a6 + 84;
  float v67 = (_DWORD **)(a7 + 64);
  uint64_t v68 = 412;
  do
  {
    uint64_t v69 = a10 + v65;
    float v70 = *(v67 - 8);
    float v71 = (_DWORD *)(a10 + v68);
    float v72 = *v67;
    v67 += 24;
    *(void *)(v69 + 76) = *(void *)(v66 - 84);
    *(_DWORD *)(v69 + 84) = *(_DWORD *)(v66 - 56);
    int v73 = v70[2];
    _DWORD *v71 = *v70;
    v71[1] = v73;
    int v74 = v72[2];
    v71[4] = *v72;
    _DWORD v71[5] = v74;
    *(void *)(v69 + 88) = *(void *)v66;
    *(_DWORD *)(v69 + 96) = *(_DWORD *)(v66 + 28);
    int v75 = v70[22];
    _OWORD v71[2] = v70[20];
    v71[3] = v75;
    int v76 = v72[22];
    v65 += 24;
    v71[6] = v72[20];
    v71[7] = v76;
    v66 += 296;
    v68 += 32;
  }
  while (v65 != 336);
  uint64_t v77 = a5[v15 + 339];
  *(_DWORD *)(a10 + 52) = *(_DWORD *)(v77 + 26);
  *(_DWORD *)(a10 + 56) = *(_DWORD *)(v77 + 8);
  *(unsigned char *)(a10 + 72) = 0;
  uint64_t v78 = *a5;
  uint64_t v79 = a5[339];
  while (v78)
  {
    if (*(unsigned char *)(v79 + 4)) {
      *(unsigned char *)(a10 + 72) = 1;
    }
    --v78;
  }
}

float32_t peridot::PeridotDXPPreProcessor::configure(peridot::PeridotDXPPreProcessor *this, const peridot::PeridotDXPCalib *a2)
{
  uint64_t v4 = (float32x4_t *)((char *)this + 49752);
  *((_DWORD *)this + 12660) = *(_DWORD *)a2;
  *((unsigned char *)this + 50645) = *((unsigned char *)a2 + 5);
  unsigned int v5 = *((unsigned __int8 *)a2 + 4);
  *((unsigned char *)this + 50644) = v5;
  *((float *)this + 12438) = *((float *)a2 + 862) * (float)v5;
  *((float *)this + 12439) = *((float *)a2 + 863) * (float)v5;
  float v6 = *((float *)a2 + 864);
  *((float *)this + 12440) = v6 * (float)v5;
  uint64_t v7 = *((void *)a2 + 431);
  *((_DWORD *)this + 12443) = *((_DWORD *)a2 + 864);
  *(void *)((char *)this + 49764) = v7;
  LOBYTE(v6) = *((unsigned char *)a2 + 6);
  float v8 = *((float *)a2 + 874) * (float)LODWORD(v6);
  *((float *)this + 12444) = v8;
  *((float *)this + 12445) = v8;
  *((unsigned char *)this + 50637) = *((unsigned char *)a2 + 3525);
  *((_DWORD *)this + 12658) = *((_DWORD *)a2 + 880);
  *((unsigned char *)this + 50636) = *((unsigned char *)a2 + 3524);
  uint64_t v9 = (void *)((char *)this + 49784);
  if (v9 != (void *)((char *)a2 + 3920)) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v9, *((char **)a2 + 490), *((char **)a2 + 491), (uint64_t)(*((void *)a2 + 491) - *((void *)a2 + 490)) >> 2);
  }
  uint64_t v10 = (float32x4_t *)*((void *)a2 + 484);
  if (*((void *)a2 + 485) - (void)v10 != 800 && os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    v63[0] = 0;
    _os_log_error_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_ERROR, "PeridotDXPPreProcessor::configure: _DTMmod_LSB wrong size", (uint8_t *)v63, 2u);
    uint64_t v10 = (float32x4_t *)*((void *)a2 + 484);
  }
  if ((unint64_t)(this - (peridot::PeridotDXPPreProcessor *)v10 + 49832) > 0x1F)
  {
    __asm { FMOV            V0.4S, #1.0 }
    float32x4_t v17 = vsubq_f32(_Q0, v10[1]);
    v4[5] = vsubq_f32(_Q0, *v10);
    v4[6] = v17;
    float32x4_t v18 = vsubq_f32(_Q0, v10[3]);
    v4[7] = vsubq_f32(_Q0, v10[2]);
    v4[8] = v18;
    float32x4_t v19 = vsubq_f32(_Q0, v10[5]);
    v4[9] = vsubq_f32(_Q0, v10[4]);
    v4[10] = v19;
    float32x4_t v20 = vsubq_f32(_Q0, v10[7]);
    v4[11] = vsubq_f32(_Q0, v10[6]);
    v4[12] = v20;
    float32x4_t v21 = vsubq_f32(_Q0, v10[9]);
    v4[13] = vsubq_f32(_Q0, v10[8]);
    v4[14] = v21;
    float32x4_t v22 = vsubq_f32(_Q0, v10[11]);
    v4[15] = vsubq_f32(_Q0, v10[10]);
    v4[16] = v22;
    float32x4_t v23 = vsubq_f32(_Q0, v10[13]);
    v4[17] = vsubq_f32(_Q0, v10[12]);
    v4[18] = v23;
    float32x4_t v24 = vsubq_f32(_Q0, v10[15]);
    v4[19] = vsubq_f32(_Q0, v10[14]);
    v4[20] = v24;
    float32x4_t v25 = vsubq_f32(_Q0, v10[17]);
    v4[21] = vsubq_f32(_Q0, v10[16]);
    v4[22] = v25;
    float32x4_t v26 = vsubq_f32(_Q0, v10[19]);
    v4[23] = vsubq_f32(_Q0, v10[18]);
    v4[24] = v26;
    float32x4_t v27 = vsubq_f32(_Q0, v10[21]);
    v4[25] = vsubq_f32(_Q0, v10[20]);
    v4[26] = v27;
    float32x4_t v28 = vsubq_f32(_Q0, v10[23]);
    v4[27] = vsubq_f32(_Q0, v10[22]);
    v4[28] = v28;
    float32x4_t v29 = vsubq_f32(_Q0, v10[25]);
    v4[29] = vsubq_f32(_Q0, v10[24]);
    v4[30] = v29;
    float32x4_t v30 = vsubq_f32(_Q0, v10[27]);
    v4[31] = vsubq_f32(_Q0, v10[26]);
    v4[32] = v30;
    float32x4_t v31 = vsubq_f32(_Q0, v10[29]);
    v4[33] = vsubq_f32(_Q0, v10[28]);
    v4[34] = v31;
    float32x4_t v32 = vsubq_f32(_Q0, v10[31]);
    v4[35] = vsubq_f32(_Q0, v10[30]);
    v4[36] = v32;
    float32x4_t v33 = vsubq_f32(_Q0, v10[33]);
    v4[37] = vsubq_f32(_Q0, v10[32]);
    v4[38] = v33;
    float32x4_t v34 = vsubq_f32(_Q0, v10[35]);
    v4[39] = vsubq_f32(_Q0, v10[34]);
    v4[40] = v34;
    float32x4_t v35 = vsubq_f32(_Q0, v10[37]);
    v4[41] = vsubq_f32(_Q0, v10[36]);
    v4[42] = v35;
    float32x4_t v36 = vsubq_f32(_Q0, v10[39]);
    v4[43] = vsubq_f32(_Q0, v10[38]);
    v4[44] = v36;
    float32x4_t v37 = vsubq_f32(_Q0, v10[41]);
    v4[45] = vsubq_f32(_Q0, v10[40]);
    v4[46] = v37;
    float32x4_t v38 = vsubq_f32(_Q0, v10[43]);
    v4[47] = vsubq_f32(_Q0, v10[42]);
    v4[48] = v38;
    float32x4_t v39 = vsubq_f32(_Q0, v10[45]);
    v4[49] = vsubq_f32(_Q0, v10[44]);
    v4[50] = v39;
    float32x4_t v40 = vsubq_f32(_Q0, v10[47]);
    v4[51] = vsubq_f32(_Q0, v10[46]);
    v4[52] = v40;
    float32x4_t v41 = vsubq_f32(_Q0, v10[48]);
    float32x4_t v42 = vsubq_f32(_Q0, v10[49]);
    v4[53] = v41;
    v4[54] = v42;
  }
  else
  {
    for (uint64_t i = 0; i != 200; ++i)
      *(float *)((char *)this + i * 4 + 49832) = 1.0 - v10->f32[i];
  }
  uint64_t v43 = v4[3].i64[1];
  uint32x4_t v44 = (float32x4_t *)*((void *)a2 + 487);
  unint64_t v45 = (uint64_t)(*((void *)a2 + 488) - (void)v44) >> 2;
  unint64_t v46 = (v4[4].i64[0] - v43) >> 2;
  if (v45 <= v46)
  {
    if (v45 < v46) {
      v4[4].i64[0] = v43 + 4 * v45;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)&v4[3].i64[1], v45 - v46);
    uint32x4_t v44 = (float32x4_t *)*((void *)a2 + 487);
  }
  float32x4_t v47 = (float32x4_t *)*((void *)a2 + 488);
  if (v47 != v44)
  {
    unint64_t v48 = ((char *)v47 - (char *)v44) >> 2;
    float64x2_t v49 = (float32x4_t *)v4[3].i64[1];
    if (v48 <= 1) {
      unint64_t v48 = 1;
    }
    if (v48 < 8 || (unint64_t)((char *)v49 - (char *)v44) <= 0x1F)
    {
      unint64_t v51 = 0;
LABEL_26:
      unint64_t v57 = v48 - v51;
      uint64_t v58 = v51;
      uint64_t v59 = &v49->f32[v58];
      uint64_t v60 = &v44->f32[v58];
      do
      {
        float v61 = *v60++;
        *v59++ = 1.0 - v61;
        --v57;
      }
      while (v57);
      return peridot::PeridotDXPBaselineRemoval::configure((peridot::PeridotDXPPreProcessor *)((char *)this + 56), a2);
    }
    unint64_t v51 = v48 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v52 = v49 + 1;
    uint64_t v53 = v44 + 1;
    __asm { FMOV            V0.4S, #1.0 }
    unint64_t v55 = v48 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v56 = vsubq_f32(_Q0, *v53);
      v52[-1] = vsubq_f32(_Q0, v53[-1]);
      float32x4_t *v52 = v56;
      v52 += 2;
      v53 += 2;
      v55 -= 8;
    }
    while (v55);
    if (v48 != v51) {
      goto LABEL_26;
    }
  }
  return peridot::PeridotDXPBaselineRemoval::configure((peridot::PeridotDXPPreProcessor *)((char *)this + 56), a2);
}

uint64_t peridot::PeridotDxpDetector::configure(peridot::PeridotDxpDetector *this, const peridot::PeridotDXPCalib *a2)
{
  *((_DWORD *)this + 130) = *(_DWORD *)a2;
  *((_WORD *)this + 262) = *((_WORD *)a2 + 2);
  uint64_t v4 = (void *)((char *)this + 528);
  if (v4 != (void *)((char *)a2 + 3792)) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v4, *((char **)a2 + 474), *((char **)a2 + 475), (uint64_t)(*((void *)a2 + 475) - *((void *)a2 + 474)) >> 2);
  }
  if ((char *)this + 552 != (char *)a2 + 3816) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 69, *((char **)a2 + 477), *((char **)a2 + 478), (uint64_t)(*((void *)a2 + 478) - *((void *)a2 + 477)) >> 2);
  }
  if ((char *)this + 576 != (char *)a2 + 3696) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 72, *((char **)a2 + 462), *((char **)a2 + 463), (uint64_t)(*((void *)a2 + 463) - *((void *)a2 + 462)) >> 2);
  }
  if ((char *)this + 600 != (char *)a2 + 3672) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 75, *((char **)a2 + 459), *((char **)a2 + 460), (uint64_t)(*((void *)a2 + 460) - *((void *)a2 + 459)) >> 2);
  }
  *((unsigned char *)this + 664) = *((unsigned char *)a2 + 3520);
  *(_WORD *)((char *)this + 665) = *(_WORD *)((char *)a2 + 3521);
  *(void *)((char *)this + 668) = *((void *)a2 + 502);
  uint64_t v5 = *((void *)a2 + 431);
  *((_DWORD *)this + 158) = *((_DWORD *)a2 + 864);
  *((void *)this + 78) = v5;
  long long v6 = *(_OWORD *)((char *)a2 + 3464);
  *((void *)this + 82) = *((void *)a2 + 435);
  *((_OWORD *)this + 40) = v6;
  return peridot::HDUnfoldClass::configure((peridot::PeridotDxpDetector *)((char *)this + 8), a2);
}

float32_t peridot::PeridotDXPBaselineRemoval::configure(peridot::PeridotDXPBaselineRemoval *this, const peridot::PeridotDXPCalib *a2)
{
  *((_DWORD *)this + 186) = *(_DWORD *)a2;
  uint64_t v4 = (char *)*((void *)this + 91);
  uint64_t v5 = (char *)*((void *)this + 90);
  uint64_t v6 = v4 - v5;
  if ((unint64_t)(v4 - v5) > 0x17)
  {
    if (v6 != 24) {
      *((void *)this + 91) = v5 + 24;
    }
  }
  else
  {
    unint64_t v7 = 3 - ((unint64_t)v6 >> 3);
    uint64_t v8 = *((void *)this + 92);
    if (v7 <= (v8 - (uint64_t)v4) >> 3)
    {
      bzero(*((void **)this + 91), 8 * v7);
      *((void *)this + 91) = &v4[8 * v7];
    }
    else
    {
      uint64_t v9 = v6 >> 3;
      unint64_t v10 = (v6 >> 3) + v7;
      if (v10 >> 61) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v11 = v8 - (void)v5;
      if (v11 >> 2 > v10) {
        unint64_t v10 = v11 >> 2;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v13 = operator new(8 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      unsigned int v14 = &v13[8 * v9];
      size_t v15 = 8 * v7;
      uint64_t v16 = &v13[8 * v12];
      bzero(v14, v15);
      float32x4_t v17 = &v14[v15];
      if (v4 != v5)
      {
        unint64_t v18 = v4 - v5 - 8;
        if (v18 < 0x58) {
          goto LABEL_128;
        }
        if ((unint64_t)(v5 - v13) < 0x20) {
          goto LABEL_128;
        }
        uint64_t v19 = (v18 >> 3) + 1;
        float32x4_t v20 = &v13[8 * v9 - 16];
        float32x4_t v21 = v4 - 16;
        uint64_t v22 = v19 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v23 = *(_OWORD *)v21;
          *(v20 - 1) = *((_OWORD *)v21 - 1);
          *float32x4_t v20 = v23;
          v20 -= 2;
          v21 -= 32;
          v22 -= 4;
        }
        while (v22);
        v14 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        v4 -= 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
        if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_128:
          do
          {
            uint64_t v24 = *((void *)v4 - 1);
            v4 -= 8;
            *((void *)v14 - 1) = v24;
            v14 -= 8;
          }
          while (v4 != v5);
        }
      }
      *((void *)this + 90) = v14;
      *((void *)this + 91) = v17;
      *((void *)this + 92) = v16;
      if (v5) {
        operator delete(v5);
      }
    }
    uint64_t v5 = (char *)*((void *)this + 90);
  }
  *((void *)this + 21) = 91;
  unint64_t v25 = *((void *)a2 + 433);
  *(void *)uint64_t v5 = v25--;
  *((void *)this + 51) = v25;
  *((void *)this + 81) = *(void *)v5 - 1;
  if (v25 > 0x170) {
    goto LABEL_32;
  }
  if (*((void *)this + 21) > 0x170uLL) {
    goto LABEL_32;
  }
  *((void *)this + 22) = 91;
  unint64_t v26 = *((void *)a2 + 434);
  *((void *)v5 + 1) = v26;
  *((void *)this + 52) = --v26;
  *((void *)this + 82) = *((void *)v5 + 1) - 1;
  if (v26 > 0x170
    || *((void *)this + 22) > 0x170uLL
    || (*((void *)this + 23) = 91,
        unint64_t v27 = *((void *)a2 + 435),
        *((void *)v5 + 2) = v27,
        --v27,
        *((void *)this + 53) = v27,
        *((void *)this + 83) = *((void *)v5 + 2) - 1,
        v27 > 0x170)
    || *((void *)this + 23) > 0x170uLL)
  {
LABEL_32:
    peridot_depth_log("Wrong Configuration: histEnd too large");
    return v28.f32[0];
  }
  if ((char *)this + 752 != (char *)a2 + 3672) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 94, *((char **)a2 + 459), *((char **)a2 + 460), (uint64_t)(*((void *)a2 + 460) - *((void *)a2 + 459)) >> 2);
  }
  if ((char *)this + 776 != (char *)a2 + 3696) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 97, *((char **)a2 + 462), *((char **)a2 + 463), (uint64_t)(*((void *)a2 + 463) - *((void *)a2 + 462)) >> 2);
  }
  *((unsigned char *)this + 800) = *((unsigned char *)a2 + 3520);
  *(_WORD *)((char *)this + 801) = *(_WORD *)((char *)a2 + 3521);
  if ((char *)this + 808 != (char *)a2 + 3952) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 101, *((char **)a2 + 494), *((char **)a2 + 495), (uint64_t)(*((void *)a2 + 495) - *((void *)a2 + 494)) >> 2);
  }
  if ((char *)this + 832 != (char *)a2 + 3976) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 104, *((char **)a2 + 497), *((char **)a2 + 498), (uint64_t)(*((void *)a2 + 498) - *((void *)a2 + 497)) >> 2);
  }
  uint64_t v29 = *(void *)((char *)a2 + 3436);
  *((_DWORD *)this + 243) = *((_DWORD *)a2 + 861);
  *(void *)((char *)this + 964) = v29;
  uint64_t v30 = *((void *)a2 + 428);
  *((_DWORD *)this + 240) = *((_DWORD *)a2 + 858);
  *((void *)this + 119) = v30;
  uint64_t v31 = *((void *)a2 + 431);
  *((_DWORD *)this + 246) = *((_DWORD *)a2 + 864);
  *((void *)this + 122) = v31;
  if ((char *)this + 856 != (char *)a2 + 3672) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 107, *((char **)a2 + 459), *((char **)a2 + 460), (uint64_t)(*((void *)a2 + 460) - *((void *)a2 + 459)) >> 2);
  }
  if ((char *)this + 880 != (char *)a2 + 3696) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((void *)this + 110, *((char **)a2 + 462), *((char **)a2 + 463), (uint64_t)(*((void *)a2 + 463) - *((void *)a2 + 462)) >> 2);
  }
  if (*((void *)this + 111) - *((void *)this + 110) < 0x10uLL
    || (float32x4_t v32 = (float32x4_t *)*((void *)this + 108),
        float32x4_t v33 = (float32x4_t *)*((void *)this + 107),
        uint64_t v34 = (char *)v32 - (char *)v33,
        (unint64_t)((char *)v32 - (char *)v33) < 0x10))
  {
    peridot_depth_log("Wrong Configuration: _HPFilter/_HSFilter size");
    return v28.f32[0];
  }
  if (v34 < 0) {
LABEL_124:
  }
    std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
  unint64_t v35 = v34 >> 2;
  float32x4_t v36 = (float32x4_t *)operator new((char *)v32 - (char *)v33);
  float32x4_t v37 = &v36->i8[4 * (v34 >> 2)];
  bzero(v36, (char *)v32 - (char *)v33);
  float32x4_t v38 = (char *)v36 + v34;
  float32x4_t v39 = (void *)*((void *)this + 113);
  if (v39)
  {
    *((void *)this + 114) = v39;
    operator delete(v39);
    *((void *)this + 113) = 0;
    *((void *)this + 114) = 0;
    *((void *)this + 115) = 0;
    float32x4_t v32 = (float32x4_t *)*((void *)this + 108);
    float32x4_t v33 = (float32x4_t *)*((void *)this + 107);
    unint64_t v35 = ((char *)v32 - (char *)v33) >> 2;
  }
  *((void *)this + 113) = v36;
  *((void *)this + 114) = v38;
  *((void *)this + 115) = v37;
  if (v32 != v33)
  {
    unint64_t v40 = 0;
    unint64_t v41 = v35 <= 1 ? 1 : v35;
    if (v41 < 8) {
      goto LABEL_60;
    }
    if ((unint64_t)((char *)v36 - (char *)v33) <= 0x1F) {
      goto LABEL_60;
    }
    unint64_t v40 = v41 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v42 = v36 + 1;
    uint64_t v43 = v33 + 1;
    unint64_t v44 = v41 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v28 = vmulq_f32(v43[-1], v43[-1]);
      float32x4_t v45 = vmulq_f32(*v43, *v43);
      v42[-1] = v28;
      float32x4_t *v42 = v45;
      v42 += 2;
      v43 += 2;
      v44 -= 8;
    }
    while (v44);
    if (v41 != v40)
    {
LABEL_60:
      unint64_t v46 = v41 - v40;
      uint64_t v47 = v40;
      unint64_t v48 = &v36->f32[v40];
      float64x2_t v49 = &v33->f32[v47];
      do
      {
        float v50 = *v49++;
        v28.f32[0] = v50 * v50;
        *v48++ = v50 * v50;
        --v46;
      }
      while (v46);
    }
  }
  unint64_t v51 = (float32x4_t *)*((void *)this + 111);
  uint64_t v52 = (float32x4_t *)*((void *)this + 110);
  int64_t v53 = (char *)v51 - (char *)v52;
  unint64_t v54 = ((char *)v51 - (char *)v52) >> 2;
  if (v51 == v52)
  {
    float32x4_t v56 = 0;
    unint64_t v55 = 0;
  }
  else
  {
    if (v53 < 0) {
      goto LABEL_124;
    }
    unint64_t v55 = (float32x4_t *)operator new((char *)v51 - (char *)v52);
    float32x4_t v56 = &v55->i8[4 * v54];
    bzero(v55, (char *)v51 - (char *)v52);
    v53 += (int64_t)v55;
  }
  unint64_t v57 = (void *)*((void *)this + 116);
  if (v57)
  {
    *((void *)this + 117) = v57;
    operator delete(v57);
    *((void *)this + 116) = 0;
    *((void *)this + 117) = 0;
    *((void *)this + 118) = 0;
    unint64_t v51 = (float32x4_t *)*((void *)this + 111);
    uint64_t v52 = (float32x4_t *)*((void *)this + 110);
    unint64_t v54 = ((char *)v51 - (char *)v52) >> 2;
  }
  *((void *)this + 116) = v55;
  *((void *)this + 117) = v53;
  *((void *)this + 118) = v56;
  if (v51 != v52)
  {
    if (v54 <= 1) {
      unint64_t v58 = 1;
    }
    else {
      unint64_t v58 = v54;
    }
    if (v58 < 8 || (unint64_t)((char *)v55 - (char *)v52) <= 0x1F)
    {
      unint64_t v60 = 0;
LABEL_80:
      unint64_t v65 = v58 - v60;
      uint64_t v66 = v60;
      float v67 = &v55->f32[v60];
      uint64_t v68 = &v52->f32[v66];
      do
      {
        float v69 = *v68++;
        v28.f32[0] = v69 * v69;
        *v67++ = v69 * v69;
        --v65;
      }
      while (v65);
      goto LABEL_82;
    }
    unint64_t v60 = v58 & 0xFFFFFFFFFFFFFFF8;
    float v61 = v55 + 1;
    uint64_t v62 = v52 + 1;
    unint64_t v63 = v58 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v28 = vmulq_f32(v62[-1], v62[-1]);
      float32x4_t v64 = vmulq_f32(*v62, *v62);
      v61[-1] = v28;
      *float v61 = v64;
      v61 += 2;
      v62 += 2;
      v63 -= 8;
    }
    while (v63);
    if (v58 != v60) {
      goto LABEL_80;
    }
  }
LABEL_82:
  uint64_t v70 = *((void *)a2 + 475);
  uint64_t v71 = *((void *)a2 + 474);
  int64_t v72 = v70 - v71;
  if (v70 == v71)
  {
    int v74 = 0;
    int v73 = 0;
  }
  else
  {
    if (v72 < 0) {
      goto LABEL_124;
    }
    int v73 = (float32x4_t *)operator new(v70 - v71);
    int v74 = &v73->i8[4 * (v72 >> 2)];
    bzero(v73, v72);
    v72 += (int64_t)v73;
  }
  int v75 = (void *)*((void *)this + 124);
  if (v75)
  {
    *((void *)this + 125) = v75;
    operator delete(v75);
    *((void *)this + 124) = 0;
    *((void *)this + 125) = 0;
    *((void *)this + 126) = 0;
  }
  *((void *)this + 124) = v73;
  *((void *)this + 125) = v72;
  *((void *)this + 126) = v74;
  int v76 = (float32x4_t *)*((void *)a2 + 475);
  uint64_t v77 = (float32x4_t *)*((void *)a2 + 474);
  int64_t v78 = (char *)v76 - (char *)v77;
  if (v76 == v77)
  {
    int32x2_t v82 = 0;
    float v83 = 0;
    goto LABEL_105;
  }
  if ((unint64_t)(v78 >> 2) <= 1) {
    unint64_t v79 = 1;
  }
  else {
    unint64_t v79 = v78 >> 2;
  }
  if (v79 < 8 || (unint64_t)((char *)v73 - (char *)v77) <= 0x1F)
  {
    unint64_t v81 = 0;
LABEL_101:
    unint64_t v88 = v79 - v81;
    uint64_t v89 = v81;
    double v90 = &v73->f32[v81];
    float v91 = &v77->f32[v89];
    do
    {
      float v92 = *v91++;
      *v90++ = v92 * v92;
      --v88;
    }
    while (v88);
    goto LABEL_103;
  }
  unint64_t v81 = v79 & 0xFFFFFFFFFFFFFFF8;
  float v84 = v73 + 1;
  float v85 = v77 + 1;
  unint64_t v86 = v79 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    float32x4_t v87 = vmulq_f32(*v85, *v85);
    v84[-1] = vmulq_f32(v85[-1], v85[-1]);
    *float v84 = v87;
    v84 += 2;
    v85 += 2;
    v86 -= 8;
  }
  while (v86);
  if (v79 != v81) {
    goto LABEL_101;
  }
LABEL_103:
  if (v78 < 0) {
    goto LABEL_124;
  }
  float v83 = (float32x4_t *)operator new(v78);
  int32x2_t v82 = &v83->i8[4 * (v78 >> 2)];
  bzero(v83, v78);
  v78 += (int64_t)v83;
LABEL_105:
  float v93 = (void *)*((void *)this + 127);
  if (v93)
  {
    *((void *)this + 128) = v93;
    operator delete(v93);
    *((void *)this + 127) = 0;
    *((void *)this + 128) = 0;
    *((void *)this + 129) = 0;
  }
  *((void *)this + 127) = v83;
  *((void *)this + 128) = v78;
  *((void *)this + 129) = v82;
  float v94 = (float32x4_t *)*((void *)a2 + 477);
  uint64_t v95 = *((void *)a2 + 478) - (void)v94;
  if (v95)
  {
    unint64_t v96 = v95 >> 2;
    if (v96 <= 1) {
      unint64_t v96 = 1;
    }
    if (v96 < 8 || (unint64_t)((char *)v83 - (char *)v94) <= 0x1F)
    {
      unint64_t v98 = 0;
LABEL_119:
      unint64_t v103 = v96 - v98;
      uint64_t v104 = v98;
      int32x4_t v105 = &v83->f32[v98];
      float32x4_t v106 = &v94->f32[v104];
      do
      {
        float v107 = *v106++;
        v28.f32[0] = v107 * v107;
        *v105++ = v107 * v107;
        --v103;
      }
      while (v103);
      return v28.f32[0];
    }
    unint64_t v98 = v96 & 0xFFFFFFFFFFFFFFF8;
    float32x4_t v99 = v83 + 1;
    float64x2_t v100 = v94 + 1;
    unint64_t v101 = v96 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v28 = vmulq_f32(v100[-1], v100[-1]);
      float32x4_t v102 = vmulq_f32(*v100, *v100);
      v99[-1] = v28;
      float32x4_t *v99 = v102;
      v99 += 2;
      v100 += 2;
      v101 -= 8;
    }
    while (v101);
    if (v96 != v98) {
      goto LABEL_119;
    }
  }
  return v28.f32[0];
}

void *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(void *result, char *__src, char *a3, size_t __sz)
{
  uint64_t v6 = __src;
  unint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    uint64_t v13 = 4 * v12;
    float result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      float result = memcpy(result, v6, v14);
    }
    size_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  size_t v15 = (void **)(result + 1);
  uint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    float result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    float result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    uint64_t __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  char *v15 = &v9[v14];
  return result;
}

uint64_t peridot::PeridotDXPCalib::InputConfig::isChanged(uint64_t a1, uint64_t a2, int a3, unsigned int a4, unint64_t a5, uint64_t a6)
{
  if (*(_DWORD *)a1 != a3) {
    return 1;
  }
  uint64_t v6 = *(void *)(a2 + 8 * a4 + 920);
  if (*(unsigned __int8 *)(a1 + 5) != *(unsigned __int8 *)(v6 + 70)) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 6) != *(unsigned __int8 *)(v6 + 69)) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 7) != *(unsigned __int8 *)(v6 + 71)) {
    return 1;
  }
  unint64_t v7 = *(unsigned __int16 **)(a2 + 8 * a4 + 1816);
  if (*(unsigned __int16 *)(a1 + 64) != v7[8]) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 66) != v7[9]) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 68) != v7[10]) {
    return 1;
  }
  if (*(unsigned __int16 *)(a1 + 70) != v7[11]) {
    return 1;
  }
  if (*(unsigned __int8 *)(a1 + 4) != *(unsigned __int8 *)(a2 + a4 + 3616)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a2 + 8 * a4 + 24);
  if (*(unsigned __int16 *)(a1 + 72) != *(unsigned __int16 *)(v8 + 60)
    || *(unsigned __int16 *)(a1 + 74) != *(unsigned __int16 *)(v8 + 62)
    || *(unsigned __int16 *)(a1 + 76) != *(unsigned __int16 *)(v8 + 64)
    || *(unsigned __int16 *)(a1 + 78) != *(unsigned __int16 *)(v8 + 66)
    || *(unsigned __int16 *)(a1 + 80) != *(unsigned __int16 *)(v8 + 68)
    || *(unsigned __int16 *)(a1 + 82) != *(unsigned __int16 *)(v8 + 70)
    || *(unsigned __int16 *)(a1 + 84) != *(unsigned __int16 *)(v8 + 72)
    || *(unsigned __int16 *)(a1 + 86) != *(unsigned __int16 *)(v8 + 74)
    || *(unsigned __int16 *)(a1 + 88) != *(unsigned __int16 *)(v8 + 76)
    || *(unsigned __int16 *)(a1 + 90) != *(unsigned __int16 *)(v8 + 78)
    || *(unsigned __int16 *)(a1 + 92) != *(unsigned __int16 *)(v8 + 80)
    || *(unsigned __int16 *)(a1 + 94) != *(unsigned __int16 *)(v8 + 82)
    || *(unsigned __int16 *)(a1 + 96) != *(unsigned __int16 *)(v8 + 84)
    || *(unsigned __int16 *)(a1 + 98) != *(unsigned __int16 *)(v8 + 86)
    || *(unsigned __int16 *)(a1 + 100) != *(unsigned __int16 *)(v8 + 88)
    || *(unsigned __int16 *)(a1 + 102) != *(unsigned __int16 *)(v8 + 90)
    || *(unsigned __int16 *)(a1 + 104) != *(unsigned __int16 *)(v8 + 92)
    || *(unsigned __int16 *)(a1 + 106) != *(unsigned __int16 *)(v8 + 94)
    || *(unsigned __int16 *)(a1 + 108) != *(unsigned __int16 *)(v8 + 96)
    || *(unsigned __int16 *)(a1 + 110) != *(unsigned __int16 *)(v8 + 98)
    || *(unsigned __int16 *)(a1 + 112) != *(unsigned __int16 *)(v8 + 100)
    || *(unsigned __int16 *)(a1 + 114) != *(unsigned __int16 *)(v8 + 102)
    || *(unsigned __int16 *)(a1 + 116) != *(unsigned __int16 *)(v8 + 104)
    || *(unsigned __int16 *)(a1 + 118) != *(unsigned __int16 *)(v8 + 106)
    || *(unsigned __int16 *)(a1 + 120) != *(unsigned __int16 *)(v8 + 108)
    || *(unsigned __int16 *)(a1 + 122) != *(unsigned __int16 *)(v8 + 110)
    || *(unsigned __int16 *)(a1 + 124) != *(unsigned __int16 *)(v8 + 112)
    || *(unsigned __int16 *)(a1 + 126) != *(unsigned __int16 *)(v8 + 114)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(v6 + 8)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(v6 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(v6 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(v6 + 20)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(v6 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(v6 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(v6 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(v6 + 36)
    || *(_DWORD *)(a1 + 40) != *(_DWORD *)(v6 + 40)
    || *(_DWORD *)(a1 + 44) != *(_DWORD *)(v6 + 44)
    || *(_DWORD *)(a1 + 48) != *(_DWORD *)(v6 + 48)
    || *(_DWORD *)(a1 + 52) != *(_DWORD *)(v6 + 52)
    || *(_DWORD *)(a1 + 56) != *(_DWORD *)(v6 + 56)
    || *(_DWORD *)(a1 + 60) != *(_DWORD *)(v6 + 60)
    || *(unsigned __int8 *)(a1 + 3336) != *(unsigned __int8 *)(v8 + 4)
    || *(unsigned __int8 *)(a1 + 3337) != *(unsigned __int8 *)(v8 + 5)
    || *(unsigned __int8 *)(a1 + 3338) != *(unsigned __int8 *)(v8 + 6)
    || *(unsigned __int8 *)(a1 + 3339) != *(unsigned __int8 *)(v8 + 7)
    || *(unsigned __int8 *)(a1 + 3340) != *(unsigned __int8 *)(v8 + 8)
    || *(unsigned __int8 *)(a1 + 3341) != *(unsigned __int8 *)(v8 + 9)
    || *(unsigned __int8 *)(a1 + 3342) != *(unsigned __int8 *)(v8 + 10)
    || *(unsigned __int8 *)(a1 + 3343) != *(unsigned __int8 *)(v8 + 11)
    || *(unsigned __int8 *)(a1 + 3344) != *(unsigned __int8 *)(v8 + 12)
    || *(unsigned __int8 *)(a1 + 3345) != *(unsigned __int8 *)(v8 + 13)
    || *(unsigned __int8 *)(a1 + 3346) != *(unsigned __int8 *)(v8 + 14)
    || *(unsigned __int8 *)(a1 + 3347) != *(unsigned __int8 *)(v8 + 15)
    || *(unsigned __int8 *)(a1 + 3348) != *(unsigned __int8 *)(v8 + 16)
    || *(unsigned __int8 *)(a1 + 3349) != *(unsigned __int8 *)(v8 + 17)
    || *(unsigned __int8 *)(a1 + 3350) != *(unsigned __int8 *)(v8 + 32)
    || *(unsigned __int8 *)(a1 + 3351) != *(unsigned __int8 *)(v8 + 33)
    || *(unsigned __int8 *)(a1 + 3352) != *(unsigned __int8 *)(v8 + 34)
    || *(unsigned __int8 *)(a1 + 3353) != *(unsigned __int8 *)(v8 + 35)
    || *(unsigned __int8 *)(a1 + 3354) != *(unsigned __int8 *)(v8 + 36)
    || *(unsigned __int8 *)(a1 + 3355) != *(unsigned __int8 *)(v8 + 37)
    || *(unsigned __int8 *)(a1 + 3356) != *(unsigned __int8 *)(v8 + 38)
    || *(unsigned __int8 *)(a1 + 3357) != *(unsigned __int8 *)(v8 + 39)
    || *(unsigned __int8 *)(a1 + 3358) != *(unsigned __int8 *)(v8 + 40)
    || *(unsigned __int8 *)(a1 + 3359) != *(unsigned __int8 *)(v8 + 41)
    || *(unsigned __int8 *)(a1 + 3360) != *(unsigned __int8 *)(v8 + 42)
    || *(unsigned __int8 *)(a1 + 3361) != *(unsigned __int8 *)(v8 + 43)
    || *(unsigned __int8 *)(a1 + 3362) != *(unsigned __int8 *)(v8 + 44)
    || *(unsigned __int8 *)(a1 + 3363) != *(unsigned __int8 *)(v8 + 45)
    || *(unsigned __int8 *)(a1 + 128) != *(unsigned __int8 *)(v8 + 120)
    || *(char *)(a1 + 3364) != *(unsigned __int8 *)(v6 + 5)
    || *(char *)(a1 + 3365) != *(unsigned __int8 *)(v6 + 6))
  {
    return 1;
  }
  if (a5)
  {
    uint64_t v9 = 0;
    int v10 = 0;
    uint64_t v11 = *(void *)(a1 + 256);
    while (1)
    {
      uint64_t v12 = a4 + v9 * a6;
      uint64_t v13 = *(void *)(a2 + 8 * v12 + 1816);
      if (*(unsigned __int8 *)(v11 + 16 * v9) != *(unsigned __int8 *)(v13 + 2)) {
        break;
      }
      uint64_t v14 = v11 + 16 * v9;
      if (*(unsigned __int8 *)(v14 + 1) != *(unsigned __int8 *)(v13 + 3)) {
        break;
      }
      if (*(unsigned __int16 *)(v14 + 2) != *(unsigned __int16 *)(v13 + 4)) {
        break;
      }
      uint64_t v15 = v11 + 16 * v9;
      if (*(unsigned __int8 *)(v15 + 4) != *(unsigned __int8 *)(v13 + 6)
        || *(_DWORD *)(v15 + 8) != *(_DWORD *)(v13 + 36)
        || *(unsigned __int8 *)(v11 + 16 * v9 + 12) != *(unsigned __int8 *)(a2 + v12 + 3616))
      {
        break;
      }
      uint64_t result = 0;
      uint64_t v9 = ++v10;
      if (v10 >= a5) {
        return result;
      }
    }
    return 1;
  }
  return 0;
}

uint64_t peridot::PeridotAlgo::Impl::updateTempMeas(uint64_t result, void *a2, void *a3, unsigned int a4, unsigned int a5, double a6, double a7)
{
  uint64_t v7 = *a2;
  if ((*(unsigned char *)(*a2 + 12) & 7) == 5)
  {
    LOWORD(a6) = *(_WORD *)(v7 + 8);
    a7 = -14.969;
    double v8 = (double)*(unint64_t *)&a6 * 0.051287 + -14.969;
    *(float *)&double v8 = v8;
    unint64_t v9 = 1;
  }
  else
  {
    unint64_t v9 = 0;
    double v8 = 0.0;
  }
  if ((*(unsigned char *)(*a2 + 9292) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(*a2 + 9288);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(*a2 + 18572) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(*a2 + 18568);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 27852) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 27848);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 37132) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 37128);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 46412) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 46408);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 55692) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 55688);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 64972) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 64968);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 74252) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 74248);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 83532) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 83528);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 92812) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 92808);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
  }
  if ((*(unsigned char *)(v7 + 102092) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v7 + 102088);
    a7 = (double)*(unint64_t *)&a7;
    double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    *(float *)&double v8 = v8;
    ++v9;
    int v10 = (_DWORD *)(result + 12 * a4 + 1865952);
  }
  else
  {
    int v10 = (_DWORD *)(result + 12 * a4 + 1865952);
    if (!v9) {
      goto LABEL_28;
    }
  }
  *(float *)&a7 = (float)v9;
  *(float *)&double v8 = *(float *)&v8 / (float)v9;
LABEL_28:
  *int v10 = LODWORD(v8);
  *(_DWORD *)(result + 12 * a4 + 1865960) = LODWORD(v8);
  uint64_t v11 = (_DWORD *)(result + 12 * a4 + 1865960);
  *(_DWORD *)(result + 12 * a4 + 1865956) = LODWORD(v8);
  int v12 = *(_DWORD *)(result + 403468);
  if (v12 == 2)
  {
    uint64_t v13 = a2[1];
    double v8 = 0.0;
    a7 = 0.0;
    if ((*(unsigned char *)(v13 + 12) & 7) == 5)
    {
      LOWORD(a7) = *(_WORD *)(v13 + 8);
      a7 = (double)*(unint64_t *)&a7 * 0.051287 + -14.969;
      *(float *)&a7 = a7;
    }
    *(_DWORD *)(result + 12 * a4 + 1865956) = LODWORD(a7);
    *uint64_t v11 = LODWORD(a7);
    uint64_t v14 = a2[2];
    if ((*(unsigned char *)(v14 + 12) & 7) == 5)
    {
      LOWORD(v8) = *(_WORD *)(v14 + 8);
      a7 = -14.969;
      double v8 = (double)*(unint64_t *)&v8 * 0.051287 + -14.969;
      *(float *)&double v8 = v8;
    }
    *uint64_t v11 = LODWORD(v8);
  }
  uint64_t v15 = *a3;
  if ((*(unsigned char *)(*a3 + 12) & 7) == 5)
  {
    LOWORD(v8) = *(_WORD *)(v15 + 8);
    a7 = -14.969;
    *(float *)&double v8 = (double)*(unint64_t *)&v8 * 0.051287 + -14.969;
    unint64_t v16 = 1;
  }
  else
  {
    unint64_t v16 = 0;
    LODWORD(v8) = 0;
  }
  if ((*(unsigned char *)(*a3 + 9292) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(*a3 + 9288);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(*a3 + 18572) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(*a3 + 18568);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 27852) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 27848);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 37132) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 37128);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 46412) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 46408);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 55692) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 55688);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 64972) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 64968);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 74252) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 74248);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 83532) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 83528);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 92812) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 92808);
    a7 = (double)*(unint64_t *)&a7;
    *(float *)&double v8 = *(float *)&v8 + -14.969 + a7 * 0.051287;
    ++v16;
  }
  if ((*(unsigned char *)(v15 + 102092) & 7) == 5)
  {
    LOWORD(a7) = *(_WORD *)(v15 + 102088);
    *(float *)&double v8 = *(float *)&v8 + -14.969 + (double)*(unint64_t *)&a7 * 0.051287;
    ++v16;
    unint64_t v17 = (_DWORD *)(result + 12 * a5 + 1865952);
  }
  else
  {
    unint64_t v17 = (_DWORD *)(result + 12 * a5 + 1865952);
    if (!v16) {
      goto LABEL_61;
    }
  }
  *(float *)&double v8 = *(float *)&v8 / (float)v16;
LABEL_61:
  _DWORD *v17 = LODWORD(v8);
  *(_DWORD *)(result + 12 * a5 + 1865960) = LODWORD(v8);
  unint64_t v18 = (_DWORD *)(result + 12 * a5 + 1865960);
  *(_DWORD *)(result + 12 * a5 + 1865956) = LODWORD(v8);
  if (v12 == 2)
  {
    uint64_t v19 = a3[1];
    unint64_t v20 = 0;
    unint64_t v21 = 0;
    if ((*(unsigned char *)(v19 + 12) & 7) == 5)
    {
      LOWORD(v21) = *(_WORD *)(v19 + 8);
      *(float *)&unint64_t v21 = (double)v21 * 0.051287 + -14.969;
    }
    *(_DWORD *)(result + 12 * a5 + 1865956) = v21;
    _DWORD *v18 = v21;
    uint64_t v22 = a3[2];
    if ((*(unsigned char *)(v22 + 12) & 7) == 5)
    {
      LOWORD(v20) = *(_WORD *)(v22 + 8);
      *(float *)&unint64_t v20 = (double)v20 * 0.051287 + -14.969;
    }
    _DWORD *v18 = v20;
  }
  return result;
}

void InstrumentsTraceGuard::~InstrumentsTraceGuard(InstrumentsTraceGuard *this)
{
}

__CFData *PDPeridotCalibCreateIspFirmwareCalibWithOptions(__CFData *a1, _PeridotCalib *a2)
{
  MutableBytePtr = CFDataGetMutableBytePtr(a1);
  return peridot::CalibManager::createIspFirmwareCalib((peridot::CalibManager *)MutableBytePtr, a2, v4);
}

void sub_25902E408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t peridot::presetToRunMode(int a1)
{
  int v1 = 0;
  int v2 = 256;
  switch(a1)
  {
    case 0:
      unint64_t v3 = +[PDUserDefaults defaults];
      int v1 = [v3 enableDepthPerPixel];

      CFDictionaryRef v4 = +[PDUserDefaults defaults];
      int v5 = [v4 enableMacroRanges];

      if (v5) {
        int v2 = 256;
      }
      else {
        int v2 = 0;
      }
      break;
    case 1:
      break;
    case 2:
    case 3:
      int v1 = 1;
      break;
    default:
      peridot_depth_log("Unknown preset: %d", a1);
      int v1 = 0;
      int v2 = 256;
      break;
  }
  uint64_t v6 = +[PDUserDefaults defaults];
  int v7 = [v6 doubleBounceFlagOnly];

  peridot_depth_log("doubleBounceFlagOnly: %d", v7);
  if (v7) {
    int v8 = 0x10000;
  }
  else {
    int v8 = 0;
  }
  return v2 | v1 | v8;
}

void sub_25902E530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void peridot_depth_log(const char *__format, ...)
{
  va_start(va, __format);
  uint64_t v2 = *MEMORY[0x263EF8340];
  vsnprintf(__str, 0x400uLL, __format, va);
  peridot_depth_log_function(__str);
  if (peridot_depth_log_print_to_stdout) {
    puts(__str);
  }
}

void log_to_os_log(const char *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v2 = 136315138;
    unint64_t v3 = a1;
    _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v2, 0xCu);
  }
}

void peridot::HDUnfoldClass::sDiffBLR::init(uint64_t a1, char a2, uint64_t a3, char **a4)
{
  *(unsigned char *)a1 = a2;
  uint64_t v6 = (char **)(a1 + 8);
  if (v6 != a4) {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v6, *a4, a4[1], (a4[1] - *a4) >> 2);
  }
  int v7 = *(float **)a3;
  uint64_t v8 = (*(void *)(a3 + 8) - *(void *)a3) >> 2;
  if (v8)
  {
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    uint64_t v11 = &v7[v8];
    float v12 = 0.0;
    do
    {
      float v13 = *v7++;
      float v14 = v13;
      if (v13 > v12)
      {
        float v12 = v14;
        unsigned int v10 = v9;
      }
      ++v9;
    }
    while (v7 < v11);
  }
  else
  {
    unsigned int v10 = 0;
  }
  *(_DWORD *)(a1 + 72) = v10 / v8;
  *(_DWORD *)(a1 + 76) = v10 % v8;
  if (v8) {
    operator new[]();
  }
  operator new[]();
}

void sub_25902F528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a27);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a32);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a37);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a42);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a47);
  MatrixNxPts<1u,float>::~MatrixNxPts((uint64_t)&a52);
  MatrixNxPts<1u,float>::~MatrixNxPts(v52 - 224);
  MatrixNxPts<1u,float>::~MatrixNxPts(v52 - 184);
  _Unwind_Resume(a1);
}

void vDSPVsadd<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsub<float>(const float *__A, int a2, const float *__B, int a4, float *a5, int a6, int a7)
{
}

void vDSPVsq<float>(const float *a1, int a2, float *a3, int a4, int a5)
{
}

void PeridotTelemetry::frameProcessed(PeridotTelemetry *this, const PeridotSuperFrame *a2, const peridot::PeridotUserOutput *a3)
{
  if (*(void *)this)
  {
    int v5 = this;
    unint64_t v6 = 0;
    while (1)
    {
      if (v6 >= *((void *)a2 + 1)) {
        return;
      }
      unint64_t v7 = v6;
      uint64_t v8 = 8 * v6;
      uint64_t v9 = (*(unsigned char *)(*((void *)a2 + *(void *)((char *)a2 + v8 + 3728) + 115) + 2) - 1);
      unsigned int v10 = (char *)v5 + 472 * v9;
      uint64_t v12 = *((void *)v10 + 3);
      uint64_t v11 = v10 + 24;
      *(void *)uint64_t v11 = v12 + 1;
      PeridotTelemetry::aggregateBankOutputStats((uint64_t)this, (uint64_t)a3 + 4336 * v7, (uint64_t *)v11 + 8);
      unint64_t v13 = *(void *)((char *)a2 + v8 + 3728);
      float v14 = (float *)(v11 + 40);
      uint64_t v15 = (float *)(v11 + 52);
      unint64_t v16 = (float *)(v11 + 44);
      unint64_t v17 = (float *)(v11 + 60);
      unint64_t v18 = (float *)(v11 + 16);
      uint64_t v19 = (float *)(v11 + 28);
      unint64_t v20 = (float *)(v11 + 20);
      this = (PeridotTelemetry *)(v11 + 32);
      unint64_t v21 = (const PeridotSuperFrame *)(v11 + 36);
      unint64_t v6 = v7 + 1;
      uint64_t v22 = (const PeridotSuperFrame *)((char *)a2 + 8 * v7 + 3736);
      if (*((void *)a2 + 1) - 1 <= v7) {
        uint64_t v22 = a2;
      }
      long long v23 = (unsigned char *)(*((void *)a2 + 2) + 9280 * v13 + 12);
      while (v13 < *(void *)v22)
      {
        ++*((void *)v11 + 1);
        int v28 = *v23 & 7;
        if (v28 == 5)
        {
          float v29 = *(float *)(*((void *)a2 + v13 + 339) + 8);
          float v30 = *v15;
          if (*v15 == 0.0)
          {
            *((float *)v11 + 14) = v29;
            float v24 = v29;
            float v25 = v29;
          }
          else
          {
            float v24 = *v14;
            if (*v14 > v29) {
              float v24 = *(float *)(*((void *)a2 + v13 + 339) + 8);
            }
            float v25 = *v16;
            if (*v16 < v29) {
              float v25 = *(float *)(*((void *)a2 + v13 + 339) + 8);
            }
          }
          *float v14 = v24;
          *unint64_t v16 = v25;
          unint64_t v26 = (float *)(v11 + 48);
          unint64_t v27 = (float *)(v11 + 52);
          float *v17 = v29;
          goto LABEL_12;
        }
        if (v28 == 4)
        {
          float v29 = *(float *)(*((void *)a2 + v13 + 339) + 8);
          float v30 = *v19;
          if (*v19 == 0.0)
          {
            *(float *)this = v29;
            float v31 = v29;
            float v32 = v29;
          }
          else
          {
            float v31 = *v18;
            if (*v18 > v29) {
              float v31 = *(float *)(*((void *)a2 + v13 + 339) + 8);
            }
            float v32 = *v20;
            if (*v20 < v29) {
              float v32 = *(float *)(*((void *)a2 + v13 + 339) + 8);
            }
          }
          float *v18 = v31;
          *unint64_t v20 = v32;
          unint64_t v26 = (float *)(v11 + 24);
          unint64_t v27 = (float *)(v11 + 28);
          *(float *)unint64_t v21 = v29;
LABEL_12:
          *unint64_t v26 = *v26 + v29;
          float *v27 = v30 + 1.0;
        }
        ++v13;
        v23 += 9280;
      }
      if (*(void *)v11 == *((void *)v5 + 59 * v9 + 23))
      {
        PeridotTelemetry::saveBankUserOutputData((uint64_t)v5, a3, v9);
        PeridotTelemetry::reportFrameStatistics(v5, a2, a3, v7);
        if ((v9 & 0xFFFFFFFB) == 3)
        {
          uint64_t v35 = *((void *)v5 + 3);
          if (*((void *)v5 + 62) == v35
            && *((void *)v5 + 121) == v35
            && *((void *)v5 + 180) == v35
            && *((void *)v5 + 239) == v35
            && *((void *)v5 + 298) == v35
            && *((void *)v5 + 357) == v35
            && *((void *)v5 + 416) == v35)
          {
            PeridotTelemetry::reportFrameStatisticsAllBanks(v5, (uint64_t)v21, v33, v34);
          }
        }
      }
      if (*(void *)v11 == *((void *)v5 + 59 * v9 + 24)) {
        PeridotTelemetry::reportSpotStatistics(v5, v21, a3, v7, *v17);
      }
    }
  }
}

uint64_t PeridotTelemetry::aggregateBankOutputStats(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[7];
  uint64_t v7 = a3[8];
  uint64_t v8 = a3[9];
  uint64_t v9 = a3[10];
  uint64_t v11 = a3[5];
  uint64_t result = a3[6];
  uint64_t v12 = a3[11];
  uint64_t v13 = -4144;
  do
  {
    double v14 = *(float *)(a2 + v13 + 4148);
    double v15 = *(float *)(a2 + v13 + 4232);
    if (v14 > 0.8 || v15 > 0.8) {
      *a3 = ++v3;
    }
    if (v14 > 0.8 && v15 > 0.8) {
      a3[1] = ++v4;
    }
    int v16 = *(_DWORD *)(a2 + v13 + 4224);
    int v17 = *(_DWORD *)(a2 + v13 + 4308);
    if ((((unsigned __int16)v16 | (unsigned __int16)v17) & 0x800) != 0) {
      a3[2] = ++v5;
    }
    unint64_t v18 = a3 + 4;
    if ((((unsigned __int16)v16 | (unsigned __int16)v17) & 0x100) != 0 || (unint64_t v18 = a3 + 3, ((v16 | v17) & 0x40) != 0))
    {
      ++*v18;
      int v19 = v16 | v17;
      if (((v16 | v17) & 0x1000) == 0)
      {
LABEL_14:
        if ((v19 & 0x40000) == 0) {
          goto LABEL_15;
        }
        goto LABEL_21;
      }
    }
    else
    {
      int v19 = v16 | v17;
      if (((v16 | v17) & 0x1000) == 0) {
        goto LABEL_14;
      }
    }
    a3[6] = ++result;
    if ((v19 & 0x40000) == 0)
    {
LABEL_15:
      __int16 v20 = v16 | v17;
      if (((v16 | v17) & 0x400000) == 0) {
        goto LABEL_16;
      }
      goto LABEL_22;
    }
LABEL_21:
    a3[7] = ++v6;
    __int16 v20 = v16 | v17;
    if (((v16 | v17) & 0x400000) == 0)
    {
LABEL_16:
      if ((v20 & 0x400) == 0) {
        goto LABEL_17;
      }
      goto LABEL_23;
    }
LABEL_22:
    a3[8] = ++v7;
    if ((v20 & 0x400) == 0)
    {
LABEL_17:
      if ((v16 & 0xC000) != 0) {
        goto LABEL_29;
      }
      goto LABEL_24;
    }
LABEL_23:
    a3[9] = ++v8;
    if ((v16 & 0xC000) != 0) {
      goto LABEL_29;
    }
LABEL_24:
    if ((v17 & 0x4000) == 0 && (v17 & 0x8000) == 0)
    {
      int v21 = v16 | v17;
      if ((v21 & 0x20000) != 0) {
        goto LABEL_30;
      }
      goto LABEL_27;
    }
LABEL_29:
    a3[10] = ++v9;
    int v21 = v16 | v17;
    if ((v21 & 0x20000) != 0)
    {
LABEL_30:
      a3[5] = ++v11;
      if ((v21 & 0x46C540) == 0) {
        goto LABEL_2;
      }
      goto LABEL_31;
    }
LABEL_27:
    if ((v21 & 0x46C540) == 0) {
      goto LABEL_2;
    }
LABEL_31:
    a3[11] = ++v12;
LABEL_2:
    v13 += 296;
  }
  while (v13);
  return result;
}

uint64_t peridot::PeridotAlgo::Impl::runBankWithT0(uint64_t a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](a1, a2, a3, a4);
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = (uint64_t)v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  unsigned int v16 = v15;
  unint64_t v18 = v17;
  uint64_t v19 = v4;
  uint64_t v42 = *MEMORY[0x263EF8340];
  __int16 v20 = (float32x4_t *)(v4 + 182032 * v15);
  peridot::PeridotDXP::strayPeakUpdate(v20[25218].f32, v9, v21, v22, v23);
  float v24 = (float)((float)(*(float *)(v12 + 120) / *(float *)(v14 + 120))
              + (float)(*(float *)(v12 + 8) / *(float *)(v14 + 8)))
      * 0.5;
  float v25 = (BOOL *)&v20[27867].i8[8];
  peridot::PeridotDXP::run(v20 + 25218, v18, v10, (uint64_t)&v20[27867].i64[1], (float *)(v19 + 112 * v16 + 402552), v41, v40, v6, v24, (float)((float)*(int *)v10 + (float)*(int *)(v10 + 4)) * 0.5);
  uint64_t v27 = v26;
  if (!v26)
  {
    peridot::PeridotT0::getAbsDepthWithT0(v26, (uint64_t)v6, v10);
    bzero((void *)v39, 0xBD0uLL);
    bzero(v36, 0x5E8uLL);
    uint64_t v28 = v19 + 182032 * v16;
    peridot::PeridotUserOutput::fusionOutput((uint64_t)v8, (uint64_t)v6, *(unsigned int *)(v19 + 403468), v29, 0, 1, v28 + 445908, v10, (uint64_t)v39, (uint64_t)v36);
    *(float *)&double v30 = peridot::PeridotAlgo::Impl::calcRxArrayCoords((peridot::PeridotAlgo::Impl *)v19, v16, v8);
    uint64_t v33 = (const signed __int8 *)(v28 + 407528);
    if (*(unsigned char *)(v19 + 403473)) {
      peridot::PeridotUserOutput::depthPerPixel((uint64_t)v8, v30, v31, v32, 0, (uint64_t)v6, (uint64_t)v33, (uint64_t)v36, (uint64_t)v25, (uint64_t)v39);
    }
    uint64_t v27 = peridot::Reflectivity::calcPDE((peridot::Reflectivity *)(v19 + 1866704), (const peridot::PeridotDXPCalib *)(v19 + 182032 * v16 + 403504), *(float *)(v19 + 12 * v16 + 1865952), *(float *)(v19 + 12 * v16 + 1865956));
    if (!v27)
    {
      uint64_t v34 = v19 + 182032 * v16;
      peridot::Reflectivity::calcReflectivity((peridot::Reflectivity *)(v19 + 1866704), v6, v8, (const unint64_t (*)[14][3][9])v39, v33, v16, v24, 0, (const BOOL *)(v34 + 445928), v25);
      peridot::PeridotUserOutput::setStray(v8, v41, v40, (const float *)(v34 + 444420), (const float *)(v34 + 444476));
      uint64_t v38 = 0;
      memset(v37, 0, sizeof(v37));
      peridot::AggressorsClassifier::classifyBankAggressors(v19 + 1874856, v8, 0, (uint64_t)v37);
      peridot::PeridotUserOutput::spotsFiltering(v8, *(unsigned __int8 *)(v19 + 1874848), (float *)(v34 + 444420), (const float *)(v34 + 444476), (const float *)(v34 + 444476), *(unsigned char *)(v19 + 403475));
      if (*v25)
      {
        *((_DWORD *)v8 + 20) |= 0x10000u;
        *((_DWORD *)v8 + 41) |= 0x10000u;
        *((_DWORD *)v8 + 62) |= 0x10000u;
      }
      if (v25[1])
      {
        *((_DWORD *)v8 + 94) |= 0x10000u;
        *((_DWORD *)v8 + 115) |= 0x10000u;
        *((_DWORD *)v8 + 136) |= 0x10000u;
      }
      if (v25[2])
      {
        *((_DWORD *)v8 + 168) |= 0x10000u;
        *((_DWORD *)v8 + 189) |= 0x10000u;
        *((_DWORD *)v8 + 210) |= 0x10000u;
      }
      if (v25[3])
      {
        *((_DWORD *)v8 + 242) |= 0x10000u;
        *((_DWORD *)v8 + 263) |= 0x10000u;
        *((_DWORD *)v8 + 284) |= 0x10000u;
      }
      if (v25[4])
      {
        *((_DWORD *)v8 + 316) |= 0x10000u;
        *((_DWORD *)v8 + 337) |= 0x10000u;
        *((_DWORD *)v8 + 358) |= 0x10000u;
      }
      if (v25[5])
      {
        *((_DWORD *)v8 + 390) |= 0x10000u;
        *((_DWORD *)v8 + 411) |= 0x10000u;
        *((_DWORD *)v8 + 432) |= 0x10000u;
      }
      if (v25[6])
      {
        *((_DWORD *)v8 + 464) |= 0x10000u;
        *((_DWORD *)v8 + 485) |= 0x10000u;
        *((_DWORD *)v8 + 506) |= 0x10000u;
      }
      if (v25[7])
      {
        *((_DWORD *)v8 + 538) |= 0x10000u;
        *((_DWORD *)v8 + 559) |= 0x10000u;
        *((_DWORD *)v8 + 580) |= 0x10000u;
      }
      if (v25[8])
      {
        *((_DWORD *)v8 + 612) |= 0x10000u;
        *((_DWORD *)v8 + 633) |= 0x10000u;
        *((_DWORD *)v8 + 654) |= 0x10000u;
      }
      if (v25[9])
      {
        *((_DWORD *)v8 + 686) |= 0x10000u;
        *((_DWORD *)v8 + 707) |= 0x10000u;
        *((_DWORD *)v8 + 728) |= 0x10000u;
      }
      if (v25[10])
      {
        *((_DWORD *)v8 + 760) |= 0x10000u;
        *((_DWORD *)v8 + 781) |= 0x10000u;
        *((_DWORD *)v8 + 802) |= 0x10000u;
      }
      if (v25[11])
      {
        *((_DWORD *)v8 + 834) |= 0x10000u;
        *((_DWORD *)v8 + 855) |= 0x10000u;
        *((_DWORD *)v8 + 876) |= 0x10000u;
      }
      if (v25[12])
      {
        *((_DWORD *)v8 + 908) |= 0x10000u;
        *((_DWORD *)v8 + 929) |= 0x10000u;
        *((_DWORD *)v8 + 950) |= 0x10000u;
      }
      if (v25[13])
      {
        *((_DWORD *)v8 + 982) |= 0x10000u;
        *((_DWORD *)v8 + 1003) |= 0x10000u;
        *((_DWORD *)v8 + 1024) |= 0x10000u;
      }
      peridot::PeridotUserOutput::setT0Flags((uint64_t)v8, (unsigned __int8 *)v10);
    }
  }
  return v27;
}

uint64_t peridot::PeridotDXP::strayPeakUpdate(float *a1, float *a2, double a3, double a4, float32x4_t a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  float v5 = (float)((float)(a2[31] + (float)(a2[30] + a2[29]))
             + (float)((float)(a2[28] + (float)(a2[27] + (float)(a2[26] + a2[25])))
                     + (float)((float)(a2[24] + (float)(a2[23] + a2[22]))
                             + (float)((float)(a2[21] + a2[20]) + (float)(a2[19] + a2[18])))))
     * 0.071429;
  if (v5 < 0.0) {
    float v5 = 0.0;
  }
  v6.f32[0] = v5 / a1[860];
  float v7 = (float)((float)(a2[45] + (float)(a2[44] + a2[43]))
             + (float)((float)(a2[42] + (float)(a2[41] + (float)(a2[40] + a2[39])))
                     + (float)((float)(a2[38] + (float)(a2[37] + a2[36]))
                             + (float)((float)(a2[35] + a2[34]) + (float)(a2[33] + a2[32])))))
     * 0.071429;
  if (v7 < 0.0) {
    float v7 = 0.0;
  }
  float v8 = v7 / a1[861];
  float v9 = (float)((float)(a2[59] + (float)(a2[58] + a2[57]))
             + (float)((float)(a2[56] + (float)(a2[55] + (float)(a2[54] + a2[53])))
                     + (float)((float)(a2[52] + (float)(a2[51] + a2[50]))
                             + (float)((float)(a2[49] + a2[48]) + (float)(a2[47] + a2[46])))))
     * 0.071429;
  if (v9 < 0.0) {
    float v9 = 0.0;
  }
  float v10 = v9 / a1[862];
  v26[0] = v6.f32[0];
  v26[1] = v8;
  a5.i64[0] = v6.u32[0];
  a5.f32[1] = v8;
  a5.f32[2] = v10;
  __asm
  {
    FMOV            V6.4S, #1.5
    FMOV            V7.4S, #-1.5
  }
  int8x16_t v17 = vbicq_s8((int8x16_t)vaddq_f32(a5, _Q7), (int8x16_t)vcgtq_f32(_Q6, a5));
  __int32 v25 = v17.i32[2];
  v26[2] = v10;
  uint64_t v24 = v17.i64[0];
  v6.f32[1] = v8;
  float32x2_t v22 = vcvt_f32_f64(vmulq_f64(vrndaq_f64(vmulq_f64(vcvtq_f64_f32(vsub_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6.u32[0], 0))), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL))), (float64x2_t)vdupq_n_s64(0x3F847AE147AE147BuLL)));
  float32x2_t v20 = v22;
  float v18 = round((float)(v10 - v6.f32[0]) * 100.0) * 0.01;
  float v23 = v18;
  float v21 = v18;
  peridot::PeridotDXPBaselineRemoval::strayPeakUpdate((peridot::PeridotDXPBaselineRemoval *)(a1 + 10630), v26, (float *)&v22, (float *)&v24, (float *)&v20);
  return 0;
}

uint64_t peridot::PeridotDXPBaselineRemoval::strayPeakUpdate(peridot::PeridotDXPBaselineRemoval *this, float *a2, float *a3, float *a4, float *a5)
{
  *((float *)this + 60) = *a5;
  unint64_t v5 = vcvtas_u32_f32(*a4);
  if (v5) {
    unint64_t v6 = v5 - 1;
  }
  else {
    unint64_t v6 = 0;
  }
  *((void *)this + 32) = v6;
  BOOL v7 = v5 >= 9;
  unint64_t v8 = v5 - 9;
  if (v7) {
    unint64_t v9 = v8;
  }
  else {
    unint64_t v9 = 0;
  }
  *((void *)this + 35) = v9;
  unint64_t v10 = v6 + 14;
  *((void *)this + 38) = v6 + 14;
  if (v6 <= 0x170 && v9 <= 0x170 && v10 < 0x171)
  {
    int v11 = *((_DWORD *)this + 102);
    if (v11 <= 219) {
      int v12 = 219;
    }
    else {
      int v12 = *((_DWORD *)this + 102);
    }
    *((void *)this + 41) = (v12 - 120);
    float v13 = (float)(unint64_t)((uint64_t)(*((void *)this + 95) - *((void *)this + 94)) >> 2) * 0.5;
    float v14 = floorf(v13);
    *((void *)this + 44) = (unint64_t)(float)(v14 + (float)v10);
    unsigned int v15 = vcvtms_s32_f32(v13);
    int v16 = v9 - v15;
    if (v16 >= -3) {
      int v16 = -3;
    }
    uint64_t v17 = (v11 + v16 + 3);
    if ((int)v17 < 0) {
      goto LABEL_72;
    }
    *((void *)this + 47) = v17;
    *((float *)this + 61) = a5[1];
    unint64_t v18 = vcvtas_u32_f32(a4[1]);
    if (v18) {
      unint64_t v19 = v18 - 1;
    }
    else {
      unint64_t v19 = 0;
    }
    *((void *)this + 33) = v19;
    BOOL v7 = v18 >= 9;
    unint64_t v20 = v18 - 9;
    if (!v7) {
      unint64_t v20 = 0;
    }
    *((void *)this + 36) = v20;
    unint64_t v21 = v19 + 14;
    *((void *)this + 39) = v19 + 14;
    if (v19 <= 0x170 && v20 <= 0x170 && v21 <= 0x170)
    {
      int v24 = *((_DWORD *)this + 104);
      if (v24 <= 219) {
        int v25 = 219;
      }
      else {
        int v25 = *((_DWORD *)this + 104);
      }
      *((void *)this + 42) = (v25 - 120);
      *((void *)this + 45) = (unint64_t)(float)(v14 + (float)v21);
      int v26 = v20 - v15;
      if (v26 >= -3) {
        int v26 = -3;
      }
      uint64_t v27 = (v24 + v26 + 3);
      if ((int)v27 < 0) {
        goto LABEL_72;
      }
      *((void *)this + 48) = v27;
      *((float *)this + 62) = a5[2];
      unint64_t v28 = vcvtas_u32_f32(a4[2]);
      if (v28) {
        unint64_t v29 = v28 - 1;
      }
      else {
        unint64_t v29 = 0;
      }
      *((void *)this + 34) = v29;
      BOOL v7 = v28 >= 9;
      unint64_t v30 = v28 - 9;
      if (!v7) {
        unint64_t v30 = 0;
      }
      *((void *)this + 37) = v30;
      unint64_t v31 = v29 + 14;
      *((void *)this + 40) = v29 + 14;
      if (v29 <= 0x170 && v30 <= 0x170 && v31 <= 0x170)
      {
        int v32 = *((_DWORD *)this + 106);
        if (v32 <= 219) {
          int v33 = 219;
        }
        else {
          int v33 = *((_DWORD *)this + 106);
        }
        *((void *)this + 43) = (v33 - 120);
        *((void *)this + 46) = (unint64_t)(float)(v14 + (float)v31);
        int v34 = v30 - v15;
        if (v34 >= -3) {
          int v34 = -3;
        }
        uint64_t v35 = (v32 + v34 + 3);
        if ((int)v35 >= 0)
        {
          *((void *)this + 49) = v35;
          long long v36 = *((_OWORD *)this + 20);
          *((_OWORD *)this + 34) = *((_OWORD *)this + 19);
          *((_OWORD *)this + 35) = v36;
          long long v37 = *((_OWORD *)this + 22);
          *((_OWORD *)this + 36) = *((_OWORD *)this + 21);
          *((_OWORD *)this + 37) = v37;
          long long v38 = *((_OWORD *)this + 16);
          *((_OWORD *)this + 30) = *((_OWORD *)this + 15);
          *((_OWORD *)this + 31) = v38;
          long long v39 = *((_OWORD *)this + 18);
          *((_OWORD *)this + 32) = *((_OWORD *)this + 17);
          *((_OWORD *)this + 33) = v39;
          long long v40 = *((_OWORD *)this + 28);
          *((_OWORD *)this + 42) = *((_OWORD *)this + 27);
          *((_OWORD *)this + 43) = v40;
          *((_OWORD *)this + 44) = *((_OWORD *)this + 29);
          long long v41 = *((_OWORD *)this + 24);
          *((_OWORD *)this + 38) = *((_OWORD *)this + 23);
          *((_OWORD *)this + 39) = v41;
          long long v42 = *((_OWORD *)this + 26);
          *((_OWORD *)this + 40) = *((_OWORD *)this + 25);
          *((_OWORD *)this + 41) = v42;
          *(float *)this = *a3;
          unint64_t v43 = vcvtas_u32_f32(*a2);
          unint64_t v44 = v43 - 1;
          if (!v43) {
            unint64_t v44 = 0;
          }
          *((void *)this + 2) = v44;
          BOOL v7 = v43 >= 9;
          unint64_t v45 = v43 - 9;
          if (v7) {
            unint64_t v46 = v45;
          }
          else {
            unint64_t v46 = 0;
          }
          *((void *)this + 5) = v46;
          unint64_t v47 = v44 + 14;
          *((void *)this + 8) = v44 + 14;
          if (v44 <= 0x5C && v46 <= 0x5C && v47 < 0x5D)
          {
            *((void *)this + 11) = v44 + 29;
            *((float *)this + 1) = a3[1];
            unint64_t v48 = vcvtas_u32_f32(a2[1]);
            unint64_t v49 = v48 - 1;
            if (!v48) {
              unint64_t v49 = 0;
            }
            *((void *)this + 3) = v49;
            BOOL v7 = v48 >= 9;
            unint64_t v50 = v48 - 9;
            unint64_t v51 = v7 ? v50 : 0;
            *((void *)this + 6) = v51;
            unint64_t v52 = v49 + 14;
            *((void *)this + 9) = v49 + 14;
            if (v49 <= 0x5C && v51 <= 0x5C && v52 <= 0x5C)
            {
              *((void *)this + 12) = v49 + 29;
              *((float *)this + 2) = a3[2];
              unint64_t v53 = vcvtas_u32_f32(a2[2]);
              unint64_t v54 = v53 ? v53 - 1 : 0;
              *((void *)this + 4) = v54;
              BOOL v7 = v53 >= 9;
              unint64_t v55 = v53 - 9;
              if (!v7) {
                unint64_t v55 = 0;
              }
              *((void *)this + 7) = v55;
              unint64_t v56 = v54 + 14;
              *((void *)this + 10) = v54 + 14;
              if (v54 <= 0x5C && v55 <= 0x5C && v56 <= 0x5C)
              {
                uint64_t v22 = 0;
                *(float *)&long long v42 = floorf((float)(unint64_t)((uint64_t)(*((void *)this + 98) - *((void *)this + 97)) >> 2)* 0.5);
                *((void *)this + 13) = v54 + 29;
                *((void *)this + 14) = (unint64_t)(float)(*(float *)&v42 + (float)v47);
                *(uint64x2_t *)((char *)this + 136) = vcvtq_u64_f64(vcvtq_f64_f32(vsub_f32(vcvt_f32_f64(vcvtq_f64_u64(*(uint64x2_t *)((char *)this + 168))), (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v42, 0))));
                *((void *)this + 15) = (unint64_t)(float)(*(float *)&v42 + (float)v52);
                *((void *)this + 16) = (unint64_t)(float)(*(float *)&v42 + (float)v56);
                *((void *)this + 19) = (unint64_t)(float)((float)*((unint64_t *)this + 23)
                                                                 - *(float *)&v42);
                return v22;
              }
            }
          }
          goto LABEL_22;
        }
LABEL_72:
        peridot_depth_log("Wrong Configuration: strayRisingEdge", a2, a3);
        return 4;
      }
    }
  }
LABEL_22:
  peridot_depth_log("Wrong Configuration: strayPeakUpdate", a2, a3);
  return 4;
}

float *peridot::PeridotT0::getAbsDepthWithT0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = a3 + 688;
  unint64_t v5 = (float *)(a3 + 576);
  do
  {
    unint64_t v6 = (uint64_t *)(a2 + 192 * v3);
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1] - *v6;
    if (v8)
    {
      unint64_t v9 = v8 / 80;
      if (v9 <= 1) {
        unint64_t v9 = 1;
      }
      uint64_t v10 = v4 + 4 * v3;
      int v11 = (float *)(v10 + 56);
      int v12 = (float *)(v10 + 112);
      float v13 = (float *)(v7 + 72);
      do
      {
        float v14 = *(v13 - 18);
        *(v13 - 14) = v14;
        if (v14 != 0.0) {
          *(v13 - 14) = v14
        }
                      - (float)((float)((float)(*(float *)(v4 + 4 * v3) * *(v13 - 2)) + (float)(*v11 * *(v13 - 1)))
                              + (float)(*v12 * *v13));
        v13 += 20;
        --v9;
      }
      while (v9);
    }
    uint64_t v15 = a2 + 192 * v3;
    uint64_t v16 = *(void *)(v15 + 32);
    uint64_t v17 = *(void *)(v15 + 40);
    if (v17 != v16)
    {
      unint64_t v18 = (v17 - v16) / 80;
      unint64_t v19 = (float *)(a3 + 4 * v3);
      if (v18 <= 1) {
        unint64_t v18 = 1;
      }
      unint64_t v20 = v19 + 214;
      unint64_t v21 = v19 + 228;
      uint64_t v22 = v19 + 242;
      float v23 = (float *)(v16 + 72);
      do
      {
        float v24 = *(v23 - 18);
        *(v23 - 14) = v24;
        if (v24 != 0.0) {
          *(v23 - 14) = v24
        }
                      - (float)((float)((float)(*v20 * *(v23 - 2)) + (float)(*v21 * *(v23 - 1))) + (float)(*v22 * *v23));
        v23 += 20;
        --v18;
      }
      while (v18);
    }
    uint64_t v25 = a2 + 192 * v3;
    uint64_t result = *(float **)(v25 + 64);
    uint64_t v27 = *(float **)(v25 + 72);
    if (v27 != result)
    {
      unint64_t v28 = ((char *)v27 - (char *)result) / 80;
      unint64_t v29 = (float *)(a3 + 4 * v3);
      if (v28 <= 1) {
        unint64_t v28 = 1;
      }
      unint64_t v30 = v29 + 256;
      unint64_t v31 = v29 + 270;
      int v32 = v29 + 284;
      result += 18;
      do
      {
        float v33 = *(result - 18);
        *(result - 14) = v33;
        if (v33 != 0.0) {
          *(result - 14) = v33
        }
                         - (float)((float)((float)(*v30 * *(result - 2)) + (float)(*v31 * *(result - 1)))
                                 + (float)(*v32 * *result));
        result += 20;
        --v28;
      }
      while (v28);
    }
    uint64_t v34 = a2 + 192 * v3;
    uint64_t v35 = *(void *)(v34 + 96);
    uint64_t v36 = *(void *)(v34 + 104);
    if (v36 != v35)
    {
      unint64_t v37 = (v36 - v35) / 80;
      if (v37 <= 1) {
        unint64_t v37 = 1;
      }
      long long v38 = (float *)(v35 + 16);
      long long v39 = v5;
      do
      {
        float v40 = *(v38 - 4);
        *long long v38 = v40;
        if (v40 != 0.0) {
          *long long v38 = v40 - *v39;
        }
        v39 += 14;
        v38 += 20;
        --v37;
      }
      while (v37);
    }
    uint64_t v41 = a2 + 192 * v3;
    uint64_t v42 = *(void *)(v41 + 128);
    uint64_t v43 = *(void *)(v41 + 136);
    if (v43 != v42)
    {
      unint64_t v44 = (v43 - v42) / 80;
      if (v44 <= 1) {
        unint64_t v44 = 1;
      }
      unint64_t v45 = (float *)(v42 + 16);
      do
      {
        float v46 = *(v45 - 4);
        *unint64_t v45 = v46;
        if (v46 != 0.0) {
          *unint64_t v45 = v46 - *(float *)(a3 + 632 + 4 * v3);
        }
        v45 += 20;
        --v44;
      }
      while (v44);
    }
    uint64_t v47 = a2 + 192 * v3;
    uint64_t v49 = *(void *)(v47 + 160);
    uint64_t v48 = *(void *)(v47 + 168);
    if (v48 != v49)
    {
      unint64_t v50 = (v48 - v49) / 80;
      if (v50 <= 1) {
        unint64_t v50 = 1;
      }
      unint64_t v51 = (float *)(v49 + 16);
      do
      {
        float v52 = *(v51 - 4);
        float *v51 = v52;
        if (v52 != 0.0) {
          float *v51 = v52 - *(float *)(a3 + 4 * v3 + 520);
        }
        v51 += 20;
        --v50;
      }
      while (v50);
    }
    ++v3;
    ++v5;
  }
  while (v3 != 14);
  return result;
}

uint64_t peridot::PeridotUserOutput::setT0Flags(uint64_t result, unsigned __int8 *a2)
{
  if (a2[1227] | a2[1226] | a2[1225] | a2[1224]
    || a2[1223] | a2[1222] | a2[1221] | a2[1220] | a2[1219] | a2[1218] | a2[1217] | a2[1216]
    || a2[1215] | a2[1214] | a2[1213] | a2[1212] | a2[1211] | a2[1210] | a2[1209] | a2[1208]
    || a2[1207] | a2[1206] | a2[1205] | a2[1204] | a2[1203] | a2[1202] | a2[1201] | a2[1200]
    || a2[1199] | a2[1198] | a2[1197] | a2[1196] | a2[1195] | a2[1194] | a2[1193] | a2[1192])
  {
    uint64_t v2 = 0;
    uint64_t v3 = (_DWORD *)(result + 164);
    uint64_t v4 = a2 + 1192;
    do
    {
      if (v4[v2]) {
        *(v3 - 21) |= 0x800000u;
      }
      if (v4[v2 + 12]) {
        *v3 |= 0x800000u;
      }
      if (v4[v2 + 24]) {
        v3[21] |= 0x800000u;
      }
      ++v2;
      v3 += 74;
    }
    while (v2 != 12);
  }
  return result;
}

void peridot::AggressorsClassifier::classifyBankAggressors(uint64_t a1, peridot::PeridotUserOutput *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  memset(v51, 0, 42);
  memset(v50, 0, 42);
  memset(v49, 0, 42);
  peridot::AggressorsClassifier::findGlareSpots(a1, (uint64_t)a2, 0, v51, v50);
  for (uint64_t i = 0; i != 42; i += 3)
  {
    int v12 = &v49[i];
    BOOL *v12 = *((unsigned char *)v50 + i) | *((unsigned char *)v51 + i);
    v12[1] = *((unsigned char *)v50 + i + 1) | *((unsigned char *)v51 + i + 1);
    v12[2] = *((unsigned char *)v50 + i + 2) | *((unsigned char *)v51 + i + 2);
  }
  uint64_t v13 = 0;
  float v14 = (_DWORD *)(a4 + 4);
  do
  {
    if (v49[v13]) {
      *(v14 - 1) = 6;
    }
    if (v49[v13 + 1]) {
      *float v14 = 6;
    }
    if (v49[v13 + 2]) {
      v14[1] = 6;
    }
    v13 += 3;
    v14 += 3;
  }
  while (v13 != 42);
  memset(v48, 0, 42);
  peridot::AggressorsClassifier::findGlareFa(a1, (uint64_t)a2, (uint64_t)v48, 0.0, v7, v8, v9, v10, 0, (uint64_t)v51, 0);
  peridot::AggressorsClassifier::findGlareFa(a1, (uint64_t)a2, (uint64_t)v48, v15, v16, v17, v18, v19, 0, (uint64_t)v50, 1);
  memset(v47, 0, sizeof(v47));
  peridot::AggressorsClassifier::findGroupGlareFa((peridot::AggressorsClassifier *)a1, a2, 0, (BOOL (*)[3])v49, (BOOL (*)[14][3])v47, &v42);
  unint64_t v20 = 0;
  unint64_t v21 = (_DWORD *)(a4 + 4);
  do
  {
    if (v47[v20 / 3][0])
    {
      if (v48[v20]) {
        *(v21 - 1) = 5;
      }
      else {
        *(v21 - 1) = 4;
      }
    }
    else if (v48[v20])
    {
      *(v21 - 1) = 1;
    }
    if (v47[v20 / 3][1])
    {
      if (v48[v20 + 1]) {
        *unint64_t v21 = 5;
      }
      else {
        *unint64_t v21 = 4;
      }
    }
    else if (v48[v20 + 1])
    {
      *unint64_t v21 = 1;
    }
    if (v47[v20 / 3][2])
    {
      if (v48[v20 + 2]) {
        v21[1] = 5;
      }
      else {
        v21[1] = 4;
      }
    }
    else if (v48[v20 + 2])
    {
      v21[1] = 1;
    }
    v20 += 3;
    v21 += 3;
  }
  while (v20 != 42);
  uint64_t v22 = 0;
  float v23 = *(float *)(a1 + 16);
  do
  {
    memset(v43, 0, 24);
    uint64_t v27 = (float *)((char *)a2 + 296 * v22);
    if (v23 <= v27[1])
    {
      BOOL v28 = *(_DWORD *)(a4 + 12 * v22) != 0;
      uint64_t v26 = 1;
    }
    else
    {
      uint64_t v26 = 0;
      BOOL v28 = 0;
    }
    if (v23 <= v27[22])
    {
      *((void *)v43 + v26++) = 1;
      if (*(_DWORD *)(a4 + 12 * v22 + 4)) {
        BOOL v28 = 1;
      }
    }
    if (v23 <= v27[43])
    {
      *((void *)v43 + v26++) = 2;
      if (*(_DWORD *)(a4 + 12 * v22 + 8)) {
        BOOL v28 = 1;
      }
    }
    if (v26 && !v28)
    {
      if (v26 == 2)
      {
        uint64_t v29 = *(void *)&v43[0];
        if (v27[21 * *(void *)&v43[0]] > v27[21 * *((void *)&v43[0] + 1)])
        {
          *(void *)&v43[0] = *((void *)&v43[0] + 1);
          *((void *)&v43[0] + 1) = v29;
        }
      }
      for (uint64_t j = 0; j != v26; ++j)
      {
        unint64_t v31 = &v27[21 * *((void *)v43 + j)];
        uint64_t v32 = j;
        v46[v32] = v31[5];
        *(float *)((char *)&v44 + v32 * 4) = v31[3];
      }
      float v33 = *(float *)(a1 + 20);
      if (v26 != 1)
      {
        if (v45 == 0.0 || v45 >= v33)
        {
          if (*(float *)(a1 + 28) >= (float)(v46[1] / v46[0]))
          {
            uint64_t v25 = *((void *)&v43[0] + 1);
            uint64_t v36 = *(void *)&v43[0];
          }
          else
          {
            uint64_t v25 = *((void *)&v43[0] + 1);
            uint64_t v36 = *(void *)&v43[0];
            if (v44 != 0.0 && v44 < *(float *)(a1 + 32))
            {
              *(_DWORD *)(a4 + 12 * v22 + 4 * *(void *)&v43[0]) = 12;
              int v24 = 13;
              goto LABEL_33;
            }
          }
          int v24 = 10;
          *(_DWORD *)(a4 + 12 * v22 + 4 * v36) = 10;
          goto LABEL_33;
        }
        int v24 = 8;
        uint64_t v25 = *((void *)&v43[0] + 1);
LABEL_33:
        uint64_t v26 = a4 + 12 * v22;
        *(_DWORD *)(v26 + 4 * v25) = v24;
        goto LABEL_34;
      }
      BOOL v34 = v44 != 0.0 && v44 < v33;
      if (v34 && *(unsigned char *)(a1 + 148))
      {
        int v24 = 8;
        uint64_t v25 = *(void *)&v43[0];
        goto LABEL_33;
      }
    }
LABEL_34:
    ++v22;
  }
  while (v22 != 14);
  uint64_t v37 = 0;
  unint64_t v38 = 0;
  memset(v43, 0, 42);
  long long v39 = (_DWORD *)(a4 + 4);
  do
  {
    if (*(v39 - 1) == 8)
    {
      *((unsigned char *)v43 + v37) = 1;
      ++v38;
    }
    if (*v39 == 8)
    {
      *((unsigned char *)v43 + v37 + 1) = 1;
      ++v38;
    }
    if (v39[1] == 8)
    {
      *((unsigned char *)v43 + v37 + 2) = 1;
      ++v38;
    }
    v37 += 3;
    v39 += 3;
  }
  while (v37 != 42);
  if (*(float *)(a1 + 24) < (float)v38)
  {
    float v40 = (_DWORD *)(a4 + 4);
    for (uint64_t k = 2; k != 44; k += 3)
    {
      if (*((unsigned char *)&v42 + k + 2)) {
        *(v40 - 1) = 0;
      }
      if (*((unsigned char *)v43 + k - 1)) {
        *float v40 = 0;
      }
      if (*((unsigned char *)v43 + k)) {
        v40[1] = 0;
      }
      v40 += 3;
    }
  }
  peridot::AggressorsClassifier::setAggressorsFlags(v26, (uint64_t)a2, a4);
}

uint64_t peridot::AggressorsClassifier::findGlareFa(uint64_t a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, int a11)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  if (!a11)
  {
    double v15 = (_DWORD *)(a1 + 36);
    double v16 = (float *)(a1 + 56);
    double v17 = (float *)(a1 + 60);
    double v18 = (float *)(a1 + 64);
    double v19 = (float *)(a1 + 48);
    goto LABEL_5;
  }
  a8 = 0.0;
  float v11 = 0.0;
  float v12 = 0.0;
  float v13 = 0.0;
  float v14 = 0.0;
  if (a11 == 1)
  {
    double v15 = (_DWORD *)(a1 + 76);
    double v16 = (float *)(a1 + 96);
    double v17 = (float *)(a1 + 100);
    double v18 = (float *)(a1 + 104);
    double v19 = (float *)(a1 + 88);
LABEL_5:
    float v13 = *v18;
    float v12 = *v17;
    float v11 = *v16;
    LODWORD(a8) = *v15;
    float v14 = *v19;
  }
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v22 = (unsigned char *)(a10 + 2);
  do
  {
    if (*(v22 - 2))
    {
      uint64_t v23 = 8 * v21;
      *(void *)&v74[v23 + 336] = v20;
      *(void *)&v74[v23] = 0;
      ++v21;
    }
    if (*(v22 - 1))
    {
      uint64_t v24 = 8 * v21;
      *(void *)&v74[v24 + 336] = v20;
      *(void *)&v74[v24] = 1;
      ++v21;
    }
    if (*v22)
    {
      uint64_t v25 = 8 * v21;
      *(void *)&v74[v25 + 336] = v20;
      *(void *)&v74[v25] = 2;
      ++v21;
    }
    ++v20;
    v22 += 3;
  }
  while (v20 != 14);
  v26.i64[0] = *(void *)(a2 + 4);
  v27.i32[0] = *(_DWORD *)(a2 + 384);
  v28.i32[0] = *(_DWORD *)(a2 + 764);
  uint64_t result = a2 + 1060;
  v30.i32[0] = *(_DWORD *)(a2 + 1188);
  float32x4_t v31 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a8, 0);
  v26.i32[1] = *(_DWORD *)(a2 + 88);
  v26.i32[2] = *(_DWORD *)(a2 + 172);
  v26.i32[3] = *(_DWORD *)(a2 + 300);
  v27.i32[1] = *(_DWORD *)(a2 + 468);
  v27.i32[2] = *(_DWORD *)(a2 + 596);
  v27.i32[3] = *(_DWORD *)(a2 + 680);
  v28.i32[1] = *(_DWORD *)(a2 + 892);
  v28.i32[2] = *(_DWORD *)(a2 + 976);
  v28.i32[3] = *(_DWORD *)(a2 + 1060);
  v30.i32[1] = *(_DWORD *)(a2 + 1272);
  v30.i32[2] = *(_DWORD *)(a2 + 1356);
  v30.i32[3] = *(_DWORD *)(a2 + 1484);
  int8x16_t v32 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v26, v31), (int16x8_t)vcgeq_f32(v27, v31)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v28, v31), (int16x8_t)vcgeq_f32(v30, v31)));
  v27.i64[0] = 0x101010101010101;
  v27.i64[1] = 0x101010101010101;
  v28.i64[0] = *(void *)(a2 + 1568);
  v30.i32[0] = *(_DWORD *)(a2 + 2372);
  v33.i32[0] = *(_DWORD *)(a2 + 2752);
  v30.i32[1] = *(_DWORD *)(a2 + 2456);
  v30.i32[2] = *(_DWORD *)(a2 + 2540);
  v30.i32[3] = *(_DWORD *)(a2 + 2668);
  v33.i32[1] = *(_DWORD *)(a2 + 2836);
  v33.i32[2] = *(_DWORD *)(a2 + 2964);
  v33.i32[3] = *(_DWORD *)(a2 + 3048);
  int8x16_t v34 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v30, v31), (int16x8_t)vcgeq_f32(v33, v31));
  v33.i32[0] = *(_DWORD *)(a2 + 1948);
  v28.i32[1] = *(_DWORD *)(a2 + 1652);
  v28.i32[2] = *(_DWORD *)(a2 + 1780);
  v28.i32[3] = *(_DWORD *)(a2 + 1864);
  v33.i32[1] = *(_DWORD *)(a2 + 2076);
  v33.i32[2] = *(_DWORD *)(a2 + 2160);
  v33.i32[3] = *(_DWORD *)(a2 + 2244);
  v63[0] = vandq_s8(v32, (int8x16_t)v27);
  v63[1] = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v28, v31), (int16x8_t)vcgeq_f32(v33, v31)), v34), (int8x16_t)v27);
  BOOL v64 = *(float *)&a8 <= *(float *)(a2 + 3132);
  BOOL v65 = *(float *)&a8 <= *(float *)(a2 + 3260);
  BOOL v66 = *(float *)&a8 <= *(float *)(a2 + 3344);
  BOOL v67 = *(float *)&a8 <= *(float *)(a2 + 3428);
  BOOL v68 = *(float *)&a8 <= *(float *)(a2 + 3556);
  BOOL v69 = *(float *)&a8 <= *(float *)(a2 + 3640);
  BOOL v70 = *(float *)&a8 <= *(float *)(a2 + 3724);
  BOOL v71 = *(float *)&a8 <= *(float *)(a2 + 3852);
  BOOL v72 = *(float *)&a8 <= *(float *)(a2 + 3936);
  BOOL v73 = *(float *)&a8 <= *(float *)(a2 + 4020);
  if (v21)
  {
    uint64_t v35 = 0;
    float v36 = v11 * -0.5;
    uint64_t result = a3 + 1;
    do
    {
      uint64_t v37 = 0;
      unint64_t v38 = (float *)(a2 + 296 * *(void *)&v74[8 * v35 + 336] + 84 * *(void *)&v74[8 * v35]);
      memset(v62, 0, 42);
      memset(v61, 0, 42);
      float v39 = *v38;
      float v40 = 1.0 / v38[5];
      uint64_t v41 = (float *)(a2 + 104);
      do
      {
        float v42 = *(v41 - 26) - v39;
        if (v36 <= v42 && v42 <= v11) {
          *((unsigned char *)v62 + v37) = 1;
        }
        if ((float)(*(v41 - 21) * v40) < v12) {
          *((unsigned char *)v61 + v37) = 1;
        }
        float v44 = *(v41 - 5) - v39;
        if (v36 <= v44 && v44 <= v11) {
          *((unsigned char *)v62 + v37 + 1) = 1;
        }
        if ((float)(*v41 * v40) < v12) {
          *((unsigned char *)v61 + v37 + 1) = 1;
        }
        float v46 = v41[16] - v39;
        if (v36 <= v46 && v46 <= v11) {
          *((unsigned char *)v62 + v37 + 2) = 1;
        }
        if ((float)(v41[21] * v40) < v12) {
          *((unsigned char *)v61 + v37 + 2) = 1;
        }
        v37 += 3;
        v41 += 74;
      }
      while (v37 != 42);
      memset(v60, 0, sizeof(v60));
      char v59 = 1;
      uint64_t v48 = 0;
      uint64_t v49 = (float *)(a2 + 96);
      do
      {
        float v51 = *(v49 - 21);
        BOOL v52 = v51 < v13 && (v51 != 0.0 || *(v49 - 19) < v14);
        v60[v48 - 1] = v52;
        BOOL v53 = *v49 < v13 && (*v49 != 0.0 || v49[2] < v14);
        v60[v48] = v53;
        float v54 = v49[21];
        BOOL v50 = v54 < v13 && (v54 != 0.0 || v49[23] < v14);
        v60[v48 + 1] = v50;
        v48 += 3;
        v49 += 74;
      }
      while (v48 != 42);
      for (uint64_t i = 0; i != 42; i += 3)
      {
        char v56 = *((unsigned char *)v63 + i);
        if (v56)
        {
          char v56 = *((unsigned char *)v62 + i);
          if (v56)
          {
            char v56 = *((unsigned char *)v61 + i);
            if (v56) {
              char v56 = v60[i - 1];
            }
          }
        }
        *(unsigned char *)(a3 + i) |= v56;
        char v57 = *((unsigned char *)v63 + i + 1);
        if (v57)
        {
          char v57 = *((unsigned char *)v62 + i + 1);
          if (v57)
          {
            char v57 = *((unsigned char *)v61 + i + 1);
            if (v57) {
              char v57 = v60[i];
            }
          }
        }
        *(unsigned char *)(result + i) |= v57;
        char v58 = *((unsigned char *)v63 + i + 2);
        if (v58)
        {
          char v58 = *((unsigned char *)v62 + i + 2);
          if (v58)
          {
            char v58 = *((unsigned char *)v61 + i + 2);
            if (v58) {
              char v58 = v60[i + 1];
            }
          }
        }
        *(unsigned char *)(result + i + 1) |= v58;
      }
      ++v35;
    }
    while (v35 != v21);
  }
  return result;
}

void peridot::AggressorsClassifier::setAggressorsFlags(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v49 = *MEMORY[0x263EF8340];
  memset(v48, 0, 42);
  unint64_t v5 = (_DWORD *)(a3 + 4);
  do
  {
    if (*(v5 - 1))
    {
      *((unsigned char *)v48 + v3) = 1;
      ++v4;
    }
    if (*v5)
    {
      *((unsigned char *)v48 + v3 + 1) = 1;
      ++v4;
    }
    if (v5[1])
    {
      *((unsigned char *)v48 + v3 + 2) = 1;
      ++v4;
    }
    v3 += 3;
    v5 += 3;
  }
  while (v3 != 42);
  if (v4)
  {
    uint64_t v6 = 0;
    memset(v47, 0, 42);
    memset(v46, 0, 42);
    memset(v45, 0, 42);
    memset(v44, 0, 42);
    memset(v43, 0, 42);
    double v7 = (int *)(a3 + 4);
    memset(v42, 0, 42);
    while (2)
    {
      int v9 = *(v7 - 1);
      double v10 = v45;
      switch(v9)
      {
        case 1:
        case 4:
        case 5:
          *((unsigned char *)v47 + v6) = 1;
          if ((v9 & 0xFFFFFFFE) == 4)
          {
            double v10 = v46;
            goto LABEL_21;
          }
          goto LABEL_22;
        case 6:
          double v10 = v44;
          goto LABEL_21;
        case 8:
          goto LABEL_21;
        case 10:
          double v10 = v43;
          goto LABEL_21;
        default:
          if ((v9 & 0xFFFFFFFE) != 0xC) {
            goto LABEL_22;
          }
          double v10 = v42;
LABEL_21:
          *((unsigned char *)v10 + v6) = 1;
LABEL_22:
          int v11 = *v7;
          float v12 = v43;
          switch(*v7)
          {
            case 1:
            case 4:
            case 5:
              *((unsigned char *)v47 + v6 + 1) = 1;
              if ((v11 & 0xFFFFFFFE) == 4)
              {
                float v12 = v46;
                goto LABEL_29;
              }
              goto LABEL_30;
            case 6:
              float v12 = v44;
              goto LABEL_29;
            case 8:
              float v12 = v45;
              goto LABEL_29;
            case 10:
              goto LABEL_29;
            default:
              if ((v11 & 0xFFFFFFFE) != 0xC) {
                goto LABEL_30;
              }
              float v12 = v42;
LABEL_29:
              *((unsigned char *)v12 + v6 + 1) = 1;
LABEL_30:
              int v13 = v7[1];
              double v8 = v43;
              switch(v13)
              {
                case 1:
                case 4:
                case 5:
                  *((unsigned char *)v47 + v6 + 2) = 1;
                  if ((v13 & 0xFFFFFFFE) == 4)
                  {
                    double v8 = v46;
                    goto LABEL_12;
                  }
                  goto LABEL_13;
                case 6:
                  double v8 = v44;
                  goto LABEL_12;
                case 8:
                  double v8 = v45;
                  goto LABEL_12;
                case 10:
                  goto LABEL_12;
                default:
                  if ((v13 & 0xFFFFFFFE) != 0xC) {
                    goto LABEL_13;
                  }
                  double v8 = v42;
LABEL_12:
                  *((unsigned char *)v8 + v6 + 2) = 1;
LABEL_13:
                  v6 += 3;
                  v7 += 3;
                  if (v6 != 42) {
                    continue;
                  }
                  uint64_t v14 = 0;
                  double v15 = (_DWORD *)(a2 + 164);
                  do
                  {
                    if (*((unsigned char *)v47 + v14)) {
                      *(v15 - 21) |= 0x40u;
                    }
                    if (*((unsigned char *)v47 + v14 + 1)) {
                      *v15 |= 0x40u;
                    }
                    if (*((unsigned char *)v47 + v14 + 2)) {
                      v15[21] |= 0x40u;
                    }
                    v14 += 3;
                    v15 += 74;
                  }
                  while (v14 != 42);
                  uint64_t v16 = 0;
                  double v17 = (_DWORD *)(a2 + 164);
                  do
                  {
                    if (*((unsigned char *)v46 + v16)) {
                      *(v17 - 21) |= 0x100u;
                    }
                    if (*((unsigned char *)v46 + v16 + 1)) {
                      *v17 |= 0x100u;
                    }
                    if (*((unsigned char *)v46 + v16 + 2)) {
                      v17[21] |= 0x100u;
                    }
                    v16 += 3;
                    v17 += 74;
                  }
                  while (v16 != 42);
                  uint64_t v18 = 0;
                  double v19 = (_DWORD *)(a2 + 164);
                  do
                  {
                    if (*((unsigned char *)v45 + v18)) {
                      *(v19 - 21) |= 0x400u;
                    }
                    if (*((unsigned char *)v45 + v18 + 1)) {
                      *v19 |= 0x400u;
                    }
                    if (*((unsigned char *)v45 + v18 + 2)) {
                      v19[21] |= 0x400u;
                    }
                    v18 += 3;
                    v19 += 74;
                  }
                  while (v18 != 42);
                  uint64_t v20 = 0;
                  uint64_t v21 = (_DWORD *)(a2 + 164);
                  do
                  {
                    if (*((unsigned char *)v44 + v20)) {
                      *(v21 - 21) |= 0x800u;
                    }
                    if (*((unsigned char *)v44 + v20 + 1)) {
                      *v21 |= 0x800u;
                    }
                    if (*((unsigned char *)v44 + v20 + 2)) {
                      v21[21] |= 0x800u;
                    }
                    v20 += 3;
                    v21 += 74;
                  }
                  while (v20 != 42);
                  uint64_t v22 = 0;
                  uint64_t v23 = 0;
                  unint64_t v24 = 0;
                  uint64_t v25 = (char *)v43 + 2;
                  do
                  {
                    if (*(v25 - 2))
                    {
                      *((void *)&v48[24] + ++v24) = 0;
                      *((void *)&v48[3] + ++v23) = v22;
                    }
                    if (*(v25 - 1))
                    {
                      *((void *)&v48[24] + ++v24) = 1;
                      *((void *)&v48[3] + ++v23) = v22;
                    }
                    if (*v25)
                    {
                      *((void *)&v48[24] + ++v24) = 2;
                      *((void *)&v48[3] + ++v23) = v22;
                    }
                    ++v22;
                    v25 += 3;
                  }
                  while (v22 != 14);
                  if (v24)
                  {
                    for (unint64_t i = 0; i < v24; i += 2)
                    {
                      float32x4_t v28 = (void *)&v48[i / 2 + 24] + 1;
                      uint64_t v29 = (void *)&v48[i / 2 + 3] + 1;
                      if (*(_DWORD *)(a3 + 12 * *v29 + 4 * *v28) == 10)
                      {
                        uint64_t v30 = a2 + 296 * *v29 + 84 * *v28;
                        *(_DWORD *)(v30 + 80) |= 0x10000000u;
                      }
                      uint64_t v27 = a2 + 296 * v29[1] + 84 * v28[1];
                      *(_DWORD *)(v27 + 80) |= 0x10000000u;
                    }
                  }
                  uint64_t v31 = 0;
                  uint64_t v32 = 0;
                  unint64_t v33 = 0;
                  int8x16_t v34 = (char *)v42 + 2;
                  do
                  {
                    if (*(v34 - 2))
                    {
                      *((void *)&v48[24] + ++v33) = 0;
                      *((void *)&v48[3] + ++v32) = v31;
                    }
                    if (*(v34 - 1))
                    {
                      *((void *)&v48[24] + ++v33) = 1;
                      *((void *)&v48[3] + ++v32) = v31;
                    }
                    if (*v34)
                    {
                      *((void *)&v48[24] + ++v33) = 2;
                      *((void *)&v48[3] + ++v32) = v31;
                    }
                    ++v31;
                    v34 += 3;
                  }
                  while (v31 != 14);
                  if (v33)
                  {
                    for (unint64_t j = 0; j < v33; j += 2)
                    {
                      uint64_t v37 = (void *)&v48[j / 2 + 24] + 1;
                      unint64_t v38 = (void *)&v48[j / 2 + 3] + 1;
                      if (*(_DWORD *)(a3 + 12 * *v38 + 4 * *v37) == 10)
                      {
                        uint64_t v39 = a2 + 296 * *v38 + 84 * *v37;
                        *(_DWORD *)(v39 + 80) |= 0x10000000u;
                      }
                      uint64_t v36 = a2 + 296 * v38[1] + 84 * v37[1];
                      *(_DWORD *)(v36 + 80) |= 0x10000000u;
                    }
                  }
                  uint64_t v40 = 0;
                  uint64_t v41 = (float *)(a2 + 248);
                  do
                  {
                    if (*((unsigned char *)v47 + v40)
                      && *((unsigned char *)v48 + v40)
                      && *(v41 - 19) >= 0.6
                      && vabds_f32(*(v41 - 20), *(v41 - 62)) < 0.000000001)
                    {
                      *(_DWORD *)v41 |= 0x40u;
                    }
                    if (*((unsigned char *)v47 + v40 + 1)
                      && *((unsigned char *)v48 + v40 + 1)
                      && *(v41 - 19) >= 0.6
                      && vabds_f32(*(v41 - 20), *(v41 - 41)) < 0.000000001)
                    {
                      *(_DWORD *)v41 |= 0x40u;
                    }
                    if (*((unsigned char *)v47 + v40 + 2)
                      && *((unsigned char *)v48 + v40 + 2)
                      && *(v41 - 19) >= 0.6
                      && vabds_f32(*(v41 - 20), *(v41 - 20)) < 0.000000001)
                    {
                      *(_DWORD *)v41 |= 0x40u;
                    }
                    v40 += 3;
                    v41 += 74;
                  }
                  while (v40 != 42);
                  break;
              }
              break;
          }
          break;
      }
      break;
    }
  }
}

uint64_t peridot::AggressorsClassifier::findGroupGlareFa(peridot::AggressorsClassifier *this, peridot::PeridotUserOutput *a2, unsigned __int8 a3, BOOL (*a4)[3], BOOL (*a5)[14][3], float *a6)
{
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v132 = *MEMORY[0x263EF8340];
  float v12 = &(*a4)[2];
  memset(v131, 0, 42);
  do
  {
    if (*(v12 - 2))
    {
      uint64_t v13 = 2 * v10;
      *(void *)&v130[v13 + 126] = v11;
      *(void *)&v130[v13 + 42] = 0;
      ++v10;
    }
    if (*(v12 - 1))
    {
      uint64_t v14 = 2 * v10;
      *(void *)&v130[v14 + 126] = v11;
      *(void *)&v130[v14 + 42] = 1;
      ++v10;
    }
    if (*v12)
    {
      uint64_t v15 = 2 * v10;
      *(void *)&v130[v15 + 126] = v11;
      *(void *)&v130[v15 + 42] = 2;
      ++v10;
    }
    ++v11;
    v12 += 3;
  }
  while (v11 != 14);
  if (v10)
  {
    uint64_t v16 = 0;
    float v17 = *((float *)this + 29);
    uint64_t v18 = (char *)a2 + 168;
    do
    {
      float v19 = *((float *)a2 + 74 * *(void *)&v130[2 * v16 + 126] + 21 * *(void *)&v130[2 * v16 + 42]);
      uint64_t v20 = -4144;
      uint64_t v21 = (char *)v131 + 2;
      do
      {
        *(v21 - 2) |= vabds_f32(*(float *)&v18[v20 + 3976], v19) < v17;
        *(v21 - 1) |= vabds_f32(*(float *)&v18[v20 + 4060], v19) < v17;
        *v21 |= vabds_f32(*(float *)&v18[v20 + 4144], v19) < v17;
        v21 += 3;
        v20 += 296;
      }
      while (v20);
      ++v16;
    }
    while (v16 != v10);
  }
  uint64_t v22 = 0;
  float v23 = *((float *)this + 27);
  unint64_t v24 = (float *)((char *)a2 + 88);
  do
  {
    uint64_t v25 = (BOOL *)v131 + v22;
    BOOL v27 = v23 <= *(v24 - 21) && *((unsigned char *)v131 + v22) != 0;
    BOOL *v25 = v27;
    BOOL v29 = v23 <= *v24 && v25[1];
    v25[1] = v29;
    BOOL v31 = v23 <= v24[21] && v25[2];
    v25[2] = v31;
    v22 += 3;
    v24 += 74;
  }
  while (v22 != 42);
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  int8x16_t v34 = (_DWORD *)((char *)a2 + 84);
  do
  {
    if (*((unsigned char *)v131 + v32)) {
      v130[v33++] = *(v34 - 21);
    }
    if (*((unsigned char *)v131 + v32 + 1)) {
      v130[v33++] = *v34;
    }
    if (*((unsigned char *)v131 + v32 + 2)) {
      v130[v33++] = v34[21];
    }
    v32 += 3;
    v34 += 74;
  }
  while (v32 != 42);
  uint64_t result = std::__sort<std::__less<float,float> &,float *>();
  v128[0] = 0;
  if (v33 <= 1)
  {
    v128[1] = v33;
    goto LABEL_77;
  }
  unint64_t v36 = 0;
  uint64_t v37 = 0;
  float v38 = *((float *)this + 28);
  float v39 = *(float *)v130;
  unint64_t v40 = 1;
  do
  {
    float v41 = v39;
    float v39 = *(float *)&v130[v36 + 1];
    if (v38 <= (float)(v39 - v41))
    {
      ++v37;
      v128[v40++] = v36;
    }
    ++v36;
  }
  while (v33 - 1 != v36);
  v128[v40] = v33;
  if (v37)
  {
    if (!v40)
    {
      unint64_t v44 = 0;
      uint64_t v45 = 0;
LABEL_63:
      unint64_t v59 = v128[v45];
      float v60 = *(float *)&v130[v59];
      float v61 = *(float *)&v130[v59 + v44];
      uint64_t v62 = (char *)a2 + 168;
      unint64_t v63 = (BOOL *)v131 + 2;
      uint64_t v64 = -4144;
      do
      {
        BOOL v65 = &v62[v64];
        float v66 = *(float *)&v62[v64 + 3976];
        BOOL v67 = v60 <= v66;
        if (v61 < v66) {
          BOOL v67 = 0;
        }
        if (!*(v63 - 2)) {
          BOOL v67 = 0;
        }
        *(v63 - 2) = v67;
        float v68 = *((float *)v65 + 1015);
        BOOL v69 = v60 <= v68;
        if (v61 < v68) {
          BOOL v69 = 0;
        }
        if (!*(v63 - 1)) {
          BOOL v69 = 0;
        }
        *(v63 - 1) = v69;
        float v70 = *((float *)v65 + 1036);
        BOOL v71 = v60 <= v70;
        if (v61 < v70) {
          BOOL v71 = 0;
        }
        if (!*v63) {
          BOOL v71 = 0;
        }
        BOOL *v63 = v71;
        v63 += 3;
        v64 += 296;
      }
      while (v64);
      goto LABEL_77;
    }
    unint64_t v42 = v128[0];
    if (v40 > 3)
    {
      int8x16_t v46 = (int8x16_t)vdupq_n_s64(v128[0]);
      unint64_t v43 = v40 & 0xFFFFFFFFFFFFFFFCLL;
      uint64_t v47 = (int64x2_t *)&v127;
      uint64_t v48 = (int64x2_t *)&v129;
      unint64_t v49 = v40 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v50 = v48[-1];
        int64x2_t v51 = (int64x2_t)vextq_s8(v46, (int8x16_t)v50, 8uLL);
        int64x2_t v52 = *v48;
        v48 += 2;
        int8x16_t v46 = (int8x16_t)v52;
        v47[-1] = vsubq_s64(v50, v51);
        int64x2_t *v47 = vsubq_s64(v52, (int64x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v52, 8uLL));
        v47 += 2;
        v49 -= 4;
      }
      while (v49);
      if (v40 == v43)
      {
LABEL_59:
        uint64_t v58 = 0;
        uint64_t v45 = 0;
        unint64_t v44 = 0;
        do
        {
          if (*(void *)&v126[8 * v58 + 148] > v44)
          {
            unint64_t v44 = *(void *)&v126[8 * v58 + 148];
            uint64_t v45 = v58;
          }
          ++v58;
        }
        while (v40 != v58);
        goto LABEL_63;
      }
      unint64_t v42 = v46.u64[1];
    }
    else
    {
      unint64_t v43 = 0;
    }
    unint64_t v53 = v43;
    float v54 = &v126[8 * v43 + 148];
    unint64_t v55 = v40 - v43;
    char v56 = &v128[v53 + 1];
    do
    {
      unint64_t v57 = *v56++;
      *v54++ = v57 - v42;
      unint64_t v42 = v57;
      --v55;
    }
    while (v55);
    goto LABEL_59;
  }
LABEL_77:
  if (!(BYTE9(v131[2]) | BYTE8(v131[2]))
    && !(BYTE7(v131[2]) | BYTE6(v131[2]) | BYTE5(v131[2]) | BYTE4(v131[2]) | BYTE3(v131[2]) | BYTE2(v131[2]) | BYTE1(v131[2]) | LOBYTE(v131[2]))
    && !(HIBYTE(v131[1]) | BYTE14(v131[1]) | BYTE13(v131[1]) | BYTE12(v131[1]) | BYTE11(v131[1]) | BYTE10(v131[1]) | BYTE9(v131[1]) | BYTE8(v131[1]))
    && !(BYTE7(v131[1]) | BYTE6(v131[1]) | BYTE5(v131[1]) | BYTE4(v131[1]) | BYTE3(v131[1]) | BYTE2(v131[1]) | BYTE1(v131[1]) | LOBYTE(v131[1]))
    && !(HIBYTE(v131[0]) | BYTE14(v131[0]) | BYTE13(v131[0]) | BYTE12(v131[0]) | BYTE11(v131[0]) | BYTE10(v131[0]) | BYTE9(v131[0]) | BYTE8(v131[0]))
    && !(BYTE7(v131[0]) | BYTE6(v131[0]) | BYTE5(v131[0]) | BYTE4(v131[0]) | BYTE3(v131[0]) | BYTE2(v131[0]) | BYTE1(v131[0]) | LOBYTE(v131[0])))
  {
    return result;
  }
  uint64_t v72 = 0;
  unint64_t v73 = 0;
  int v74 = (float *)((char *)a2 + 104);
  do
  {
    if (*((unsigned char *)v131 + v72)) {
      v125[v73++] = *(v74 - 21);
    }
    if (*((unsigned char *)v131 + v72 + 1)) {
      v125[v73++] = *v74;
    }
    if (*((unsigned char *)v131 + v72 + 2)) {
      v125[v73++] = v74[21];
    }
    v72 += 3;
    v74 += 74;
  }
  while (v72 != 42);
  uint64_t result = std::__sort<std::__less<float,float> &,float *>();
  if (v73)
  {
    uint64_t v76 = 4 * v73;
    uint64_t v77 = v125;
    while (*((float *)this + 30) > *v77)
    {
      ++v77;
      v76 -= 4;
      if (!v76)
      {
        unint64_t v78 = v73;
        goto LABEL_98;
      }
    }
  }
  else
  {
    uint64_t v77 = v125;
  }
  unint64_t v78 = v77 - v125;
  if (v77 == &v125[v73])
  {
LABEL_98:
    if (v125[v73] != 1.0) {
      return result;
    }
  }
  if (v78)
  {
    *(float *)v75.i32 = v125[0];
    if (v78 >= 8)
    {
      int8x16_t v75 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v75.i8, 0);
      unint64_t v79 = v78 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v81 = (float32x4_t *)&v124;
      int32x2_t v82 = (float32x4_t *)v126;
      unint64_t v83 = v78 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v84 = v82[-1];
        float32x4_t v85 = (float32x4_t)vextq_s8(v75, (int8x16_t)v84, 0xCuLL);
        float32x4_t v86 = *v82;
        v82 += 2;
        int8x16_t v75 = (int8x16_t)v86;
        v81[-1] = vsubq_f32(v84, v85);
        float32x4_t *v81 = vsubq_f32(v86, (float32x4_t)vextq_s8((int8x16_t)v84, (int8x16_t)v86, 0xCuLL));
        v81 += 2;
        v83 -= 8;
      }
      while (v83);
      if (v78 == v79)
      {
LABEL_109:
        int32x2_t v80 = (char *)&v122;
        if (v78 >= 2)
        {
          float v92 = (float *)v123;
          float v93 = v122;
          uint64_t v94 = 4 * v78 - 4;
          uint64_t v95 = (float *)v123;
          do
          {
            float v96 = *v95++;
            float v97 = v96;
            if (v93 < v96)
            {
              float v93 = v97;
              int32x2_t v80 = (char *)v92;
            }
            float v92 = v95;
            v94 -= 4;
          }
          while (v94);
        }
        goto LABEL_114;
      }
      v75.i32[0] = v75.i32[3];
    }
    else
    {
      unint64_t v79 = 0;
    }
    unint64_t v87 = v79;
    unint64_t v88 = (float *)&v123[4 * v79 - 4];
    unint64_t v89 = v78 - v79;
    double v90 = &v125[v87 + 1];
    do
    {
      float v91 = *v90++;
      *v88++ = v91 - *(float *)v75.i32;
      *(float *)v75.i32 = v91;
      --v89;
    }
    while (v89);
    goto LABEL_109;
  }
  int32x2_t v80 = (char *)&v122;
LABEL_114:
  uint64_t v98 = 0;
  unint64_t v99 = 0;
  unint64_t v100 = 0;
  float v101 = *(float *)((char *)v125 + v80 - (char *)&v122);
  float v102 = fminf(v101, *((float *)this + 33));
  memset(v121, 0, 42);
  unint64_t v103 = (float *)((char *)a2 + 96);
  memset(v120, 0, 42);
  do
  {
    if (*((unsigned char *)v131 + v98))
    {
      float v104 = *(v103 - 19);
      if (v104 <= v102) {
        BOOL v105 = *(v103 - 21) != 0.0 || v104 < *((float *)this + 32);
      }
      else {
        BOOL v105 = 0;
      }
      *((unsigned char *)v121 + v98) = v105;
      if (v104 <= v101)
      {
        uint64_t result = 0;
      }
      else
      {
        float v106 = *(v103 - 21);
        uint64_t result = v106 > *((float *)this + 31) || v106 == 0.0;
      }
      *((unsigned char *)v120 + v98) = result;
      v100 += v105;
      v99 += result;
    }
    if (*((unsigned char *)v131 + v98 + 1))
    {
      float v107 = v103[2];
      if (v107 <= v102) {
        BOOL v108 = *v103 != 0.0 || v107 < *((float *)this + 32);
      }
      else {
        BOOL v108 = 0;
      }
      *((unsigned char *)v121 + v98 + 1) = v108;
      if (v107 <= v101) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = *v103 > *((float *)this + 31) || *v103 == 0.0;
      }
      *((unsigned char *)v120 + v98 + 1) = result;
      v100 += v108;
      v99 += result;
    }
    if (*((unsigned char *)v131 + v98 + 2))
    {
      float v109 = v103[23];
      if (v109 <= v102) {
        BOOL v110 = v103[21] != 0.0 || v109 < *((float *)this + 32);
      }
      else {
        BOOL v110 = 0;
      }
      *((unsigned char *)v121 + v98 + 2) = v110;
      if (v109 <= v101)
      {
        uint64_t result = 0;
      }
      else
      {
        float v111 = v103[21];
        uint64_t result = v111 > *((float *)this + 31) || v111 == 0.0;
      }
      *((unsigned char *)v120 + v98 + 2) = result;
      v100 += v110;
      v99 += result;
    }
    v98 += 3;
    v103 += 74;
  }
  while (v98 != 42);
  float v112 = (float)v100;
  if (*((float *)this + 35) <= (float)v100 && *((float *)this + 36) <= (float)v99)
  {
    uint64_t v113 = 0;
    float32x4_t v114 = (float *)((char *)a2 + 104);
    float v115 = 0.0;
    float v116 = 0.0;
    do
    {
      if (*((unsigned char *)v121 + v113) && *((unsigned char *)v131 + v113)) {
        float v116 = *(v114 - 21) + v116;
      }
      if (*((unsigned char *)v120 + v113) && *((unsigned char *)v131 + v113)) {
        float v115 = *(v114 - 21) + v115;
      }
      if (*((unsigned char *)v121 + v113 + 1) && *((unsigned char *)v131 + v113 + 1)) {
        float v116 = *v114 + v116;
      }
      if (*((unsigned char *)v120 + v113 + 1) && *((unsigned char *)v131 + v113 + 1)) {
        float v115 = *v114 + v115;
      }
      if (*((unsigned char *)v121 + v113 + 2) && *((unsigned char *)v131 + v113 + 2)) {
        float v116 = v114[21] + v116;
      }
      if (*((unsigned char *)v120 + v113 + 2) && *((unsigned char *)v131 + v113 + 2)) {
        float v115 = v114[21] + v115;
      }
      v113 += 3;
      v114 += 74;
    }
    while (v113 != 42);
    float v117 = v116 / (float)(v115 * v112);
    *a6 = v117;
    if (v117 < *((float *)this + 34))
    {
      unint64_t v118 = 0;
      float32x2_t v119 = &(*a5)[0][1];
      do
      {
        if (*((unsigned char *)v121 + v118) && *((unsigned char *)v131 + v118)) {
          (*a5)[v118 / 3][0] = 1;
        }
        if (*((unsigned char *)v121 + v118 + 1) && *((unsigned char *)v131 + v118 + 1)) {
          v119[v118] = 1;
        }
        if (*((unsigned char *)v121 + v118 + 2))
        {
          if (*((unsigned char *)v131 + v118 + 2)) {
            v119[v118 + 1] = 1;
          }
        }
        v118 += 3;
      }
      while (v118 != 42);
    }
  }
  return result;
}

double peridot::AggressorsClassifier::findGlareSpots(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  unint64_t v7 = 0;
  LODWORD(result) = *(_DWORD *)(a1 + 36);
  float v9 = *(float *)(a1 + 76);
  uint64_t v10 = (float *)(a2 + 96);
  do
  {
    float v11 = *(v10 - 23);
    if (*(float *)&result <= v11)
    {
      if ((float v12 = *(v10 - 19), *(float *)(a1 + 40) <= v12)
        && ((float v13 = *(v10 - 21), *(float *)(a1 + 44) <= v13) || v13 == 0.0)
        || *(float *)(a1 + 68) <= v12 && ((float v14 = *(v10 - 21), *(float *)(a1 + 72) <= v14) || v14 == 0.0))
      {
        ++v7;
        *((unsigned char *)a4 + v5) = 1;
      }
    }
    if (v9 <= v11 && *(float *)(a1 + 80) <= *(v10 - 19))
    {
      float v15 = *(v10 - 21);
      if (*(float *)(a1 + 84) <= v15 || v15 == 0.0)
      {
        ++v6;
        *((unsigned char *)a5 + v5) = 1;
      }
    }
    float v16 = *(v10 - 2);
    if (*(float *)&result <= v16)
    {
      if ((float v17 = v10[2], *(float *)(a1 + 40) <= v17) && (*(float *)(a1 + 44) <= *v10 || *v10 == 0.0)
        || *(float *)(a1 + 68) <= v17 && (*(float *)(a1 + 72) <= *v10 || *v10 == 0.0))
      {
        ++v7;
        *((unsigned char *)a4 + v5 + 1) = 1;
      }
    }
    if (v9 <= v16 && *(float *)(a1 + 80) <= v10[2] && (*(float *)(a1 + 84) <= *v10 || *v10 == 0.0))
    {
      ++v6;
      *((unsigned char *)a5 + v5 + 1) = 1;
    }
    float v18 = v10[19];
    if (*(float *)&result <= v18)
    {
      if ((float v19 = v10[23], *(float *)(a1 + 40) <= v19) && ((v20 = v10[21], *(float *)(a1 + 44) <= v20) || v20 == 0.0)
        || *(float *)(a1 + 68) <= v19 && ((float v21 = v10[21], *(float *)(a1 + 72) <= v21) || v21 == 0.0))
      {
        ++v7;
        *((unsigned char *)a4 + v5 + 2) = 1;
      }
    }
    if (v9 <= v18 && *(float *)(a1 + 80) <= v10[23])
    {
      float v22 = v10[21];
      if (*(float *)(a1 + 84) <= v22 || v22 == 0.0)
      {
        ++v6;
        *((unsigned char *)a5 + v5 + 2) = 1;
      }
    }
    v5 += 3;
    v10 += 74;
  }
  while (v5 != 42);
  if (v7)
  {
    *(float *)&double result = (float)v7;
    if (*(float *)(a1 + 52) > (float)v7)
    {
      double result = 0.0;
      *(_OWORD *)((char *)a4 + 26) = 0u;
      *a4 = 0u;
      a4[1] = 0u;
    }
  }
  if (v6)
  {
    *(float *)&double result = (float)v6;
    if (*(float *)(a1 + 92) > (float)v6)
    {
      double result = 0.0;
      *(_OWORD *)((char *)a5 + 26) = 0u;
      *a5 = 0u;
      a5[1] = 0u;
    }
  }
  return result;
}

float peridot::PeridotUserOutput::setStray(peridot::PeridotUserOutput *this, float *a2, float *a3, const float *a4, const float *a5)
{
  float v5 = *a2;
  *((float *)this + 63) = *a2;
  float v6 = *a3;
  *((float *)this + 64) = *a3;
  if (v5 != 0.0) {
    *((float *)this + 65) = v5 - *a4;
  }
  if (v6 != 0.0) {
    *((float *)this + 66) = v6 - *a5;
  }
  float v7 = a2[1];
  *((float *)this + 137) = v7;
  float v8 = a3[1];
  *((float *)this + 138) = v8;
  if (v7 != 0.0) {
    *((float *)this + 139) = v7 - a4[1];
  }
  if (v8 != 0.0) {
    *((float *)this + 140) = v8 - a5[1];
  }
  float v9 = a2[2];
  *((float *)this + 211) = v9;
  float v10 = a3[2];
  *((float *)this + 212) = v10;
  if (v9 != 0.0) {
    *((float *)this + 213) = v9 - a4[2];
  }
  if (v10 != 0.0) {
    *((float *)this + 214) = v10 - a5[2];
  }
  float v11 = a2[3];
  *((float *)this + 285) = v11;
  float v12 = a3[3];
  *((float *)this + 286) = v12;
  if (v11 != 0.0) {
    *((float *)this + 287) = v11 - a4[3];
  }
  if (v12 != 0.0) {
    *((float *)this + 288) = v12 - a5[3];
  }
  float v13 = a2[4];
  *((float *)this + 359) = v13;
  float v14 = a3[4];
  *((float *)this + 360) = v14;
  if (v13 != 0.0) {
    *((float *)this + 361) = v13 - a4[4];
  }
  if (v14 != 0.0) {
    *((float *)this + 362) = v14 - a5[4];
  }
  float v15 = a2[5];
  *((float *)this + 433) = v15;
  float v16 = a3[5];
  *((float *)this + 434) = v16;
  if (v15 != 0.0) {
    *((float *)this + 435) = v15 - a4[5];
  }
  if (v16 != 0.0) {
    *((float *)this + 436) = v16 - a5[5];
  }
  float v17 = a2[6];
  *((float *)this + 507) = v17;
  float v18 = a3[6];
  *((float *)this + 508) = v18;
  if (v17 != 0.0) {
    *((float *)this + 509) = v17 - a4[6];
  }
  if (v18 != 0.0) {
    *((float *)this + 510) = v18 - a5[6];
  }
  float v19 = a2[7];
  *((float *)this + 581) = v19;
  float v20 = a3[7];
  *((float *)this + 582) = v20;
  if (v19 != 0.0) {
    *((float *)this + 583) = v19 - a4[7];
  }
  if (v20 != 0.0) {
    *((float *)this + 584) = v20 - a5[7];
  }
  float v21 = a2[8];
  *((float *)this + 655) = v21;
  float v22 = a3[8];
  *((float *)this + 656) = v22;
  if (v21 != 0.0) {
    *((float *)this + 657) = v21 - a4[8];
  }
  if (v22 != 0.0) {
    *((float *)this + 658) = v22 - a5[8];
  }
  float v23 = a2[9];
  *((float *)this + 729) = v23;
  float v24 = a3[9];
  *((float *)this + 730) = v24;
  if (v23 != 0.0) {
    *((float *)this + 731) = v23 - a4[9];
  }
  if (v24 != 0.0) {
    *((float *)this + 732) = v24 - a5[9];
  }
  float v25 = a2[10];
  *((float *)this + 803) = v25;
  float v26 = a3[10];
  *((float *)this + 804) = v26;
  if (v25 != 0.0) {
    *((float *)this + 805) = v25 - a4[10];
  }
  if (v26 != 0.0) {
    *((float *)this + 806) = v26 - a5[10];
  }
  float v27 = a2[11];
  *((float *)this + 877) = v27;
  float v28 = a3[11];
  *((float *)this + 878) = v28;
  if (v27 != 0.0) {
    *((float *)this + 879) = v27 - a4[11];
  }
  if (v28 != 0.0) {
    *((float *)this + 880) = v28 - a5[11];
  }
  float v29 = a2[12];
  *((float *)this + 951) = v29;
  float v30 = a3[12];
  *((float *)this + 952) = v30;
  if (v29 != 0.0) {
    *((float *)this + 953) = v29 - a4[12];
  }
  if (v30 != 0.0) {
    *((float *)this + 954) = v30 - a5[12];
  }
  float v31 = a2[13];
  *((float *)this + 1025) = v31;
  float result = a3[13];
  *((float *)this + 1026) = result;
  if (v31 != 0.0) {
    *((float *)this + 1027) = v31 - a4[13];
  }
  if (result != 0.0)
  {
    float result = result - a5[13];
    *((float *)this + 1028) = result;
  }
  return result;
}

unsigned char *peridot::PeridotUserOutput::spotsFiltering(peridot::PeridotUserOutput *this, int a2, float *a3, const float *a4, const float *a5, char a6)
{
  int v6 = a2;
  unint64_t v8 = 0;
  uint64_t v280 = *MEMORY[0x263EF8340];
  float v9 = (unsigned __int8 *)this + 4244;
  float v10 = *((float *)this + 1056);
  float v11 = (float *)((char *)this + 96);
  float v12 = v268;
  do
  {
    *(v12 - 1) = 0;
    float v14 = 1.0;
    float v15 = 1.0;
    if (*(v11 - 23) >= v10)
    {
      *(v12 - 1) = 1;
      float v15 = *(v11 - 24);
    }
    *(float *)((char *)&v271 + v8) = v15;
    int v16 = *((_DWORD *)v11 - 20);
    *(float *)&v269[v8 + 160] = *(v11 - 21);
    *(_DWORD *)&v268[v8 + 41] = v16;
    unsigned char *v12 = 0;
    if (*(v11 - 2) >= v10)
    {
      unsigned char *v12 = 1;
      float v14 = *(v11 - 3);
    }
    v273[v8 / 4 - 1] = v14;
    int v17 = *((_DWORD *)v11 + 1);
    *(float *)&v269[v8 + 164] = *v11;
    *(_DWORD *)&v268[v8 + 45] = v17;
    v12[1] = 0;
    float v18 = 1.0;
    if (v11[19] >= (float)(v10 * 0.75))
    {
      v12[1] = 1;
      float v18 = v11[18];
    }
    v273[v8 / 4] = v18;
    int v13 = *((_DWORD *)v11 + 22);
    *(float *)&v269[v8 + 168] = v11[21];
    *(_DWORD *)&v268[v8 + 49] = v13;
    v8 += 12;
    v11 += 74;
    v12 += 3;
  }
  while (v8 != 168);
  uint64_t v19 = 0;
  int v20 = *((_DWORD *)this + 63);
  int v21 = *((_DWORD *)this + 138);
  v266[0] = *((_DWORD *)this + 64);
  v266[1] = v21;
  int v22 = *((_DWORD *)this + 137);
  v265[0] = v20;
  v265[1] = v22;
  int v23 = *((_DWORD *)this + 211);
  int v24 = *((_DWORD *)this + 286);
  v266[2] = *((_DWORD *)this + 212);
  v266[3] = v24;
  int v25 = *((_DWORD *)this + 285);
  v265[2] = v23;
  v265[3] = v25;
  int v26 = *((_DWORD *)this + 359);
  int v27 = *((_DWORD *)this + 434);
  v266[4] = *((_DWORD *)this + 360);
  v266[5] = v27;
  int v28 = *((_DWORD *)this + 433);
  v265[4] = v26;
  v265[5] = v28;
  int v29 = *((_DWORD *)this + 507);
  int v30 = *((_DWORD *)this + 582);
  v266[6] = *((_DWORD *)this + 508);
  v266[7] = v30;
  int v31 = *((_DWORD *)this + 581);
  v265[6] = v29;
  v265[7] = v31;
  int v32 = *((_DWORD *)this + 655);
  int v33 = *((_DWORD *)this + 730);
  v266[8] = *((_DWORD *)this + 656);
  v266[9] = v33;
  int v34 = *((_DWORD *)this + 729);
  v265[8] = v32;
  v265[9] = v34;
  int v35 = *((_DWORD *)this + 803);
  int v36 = *((_DWORD *)this + 878);
  v266[10] = *((_DWORD *)this + 804);
  v266[11] = v36;
  int v37 = *((_DWORD *)this + 877);
  v265[10] = v35;
  v265[11] = v37;
  int v38 = *((_DWORD *)this + 951);
  int v39 = *((_DWORD *)this + 1026);
  v266[12] = *((_DWORD *)this + 952);
  v266[13] = v39;
  int v40 = *((_DWORD *)this + 1025);
  float v41 = &v272;
  v265[12] = v38;
  v265[13] = v40;
  float v42 = *((float *)this + 1066);
  float v43 = *((float *)this + 1063);
  do
  {
    *((unsigned char *)&v264[4] + v19 + 4) = 0;
    *((unsigned char *)&v264[3] + v19 + 6) = 0;
    float v44 = fminf(*(v41 - 1), *v41);
    if (v42 > v44 && *((float *)this + 1067) < *(float *)&v266[v19]
      || v42 <= v44 && *((float *)this + 1068) < *(float *)&v266[v19])
    {
      *((unsigned char *)&v264[4] + v19 + 4) = 1;
    }
    if (v43 > v44 && *((float *)this + 1064) < *(float *)&v265[v19]
      || v43 <= v44 && *((float *)this + 1065) < *(float *)&v265[v19])
    {
      *((unsigned char *)&v264[3] + v19 + 6) = 1;
    }
    ++v19;
    v41 += 3;
  }
  while (v19 != 14);
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  int v47 = *((unsigned __int8 *)this + 4245);
  uint64_t v48 = (_DWORD *)((char *)this + 164);
  int v49 = *v9;
  do
  {
    if (v47 && v268[v45 - 1])
    {
      BOOL v51 = *((unsigned char *)&v264[4] + v46 + 4) == 0;
      if (!v49) {
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v51 = 1;
      if (!v49) {
        goto LABEL_34;
      }
    }
    if (v268[v45 - 1] && *((unsigned char *)&v264[3] + v46 + 6))
    {
      int64x2_t v52 = (char *)&v264[5] + v45 + 2;
      *((unsigned char *)&v264[5] + v45 + 2) = 0;
LABEL_36:
      unsigned char *v52 = 1;
      *(v48 - 21) |= 0x400000u;
      goto LABEL_37;
    }
LABEL_34:
    *((unsigned char *)&v264[5] + v45 + 2) = 0;
    if (!v51)
    {
      int64x2_t v52 = (char *)&v264[5] + 3 * v46 + 2;
      goto LABEL_36;
    }
LABEL_37:
    if (v47 && v268[v45])
    {
      BOOL v53 = *((unsigned char *)&v264[4] + v46 + 4) == 0;
      if (!v49) {
        goto LABEL_45;
      }
    }
    else
    {
      BOOL v53 = 1;
      if (!v49) {
        goto LABEL_45;
      }
    }
    if (v268[v45] && *((unsigned char *)&v264[3] + v46 + 6))
    {
      *((unsigned char *)&v264[5] + v45 + 3) = 0;
      float v54 = (char *)&v264[5] + v45 + 3;
LABEL_47:
      unsigned char *v54 = 1;
      *v48 |= 0x400000u;
      goto LABEL_48;
    }
LABEL_45:
    *((unsigned char *)&v264[5] + v45 + 3) = 0;
    if (!v53)
    {
      float v54 = (char *)&v264[5] + 3 * v46 + 3;
      goto LABEL_47;
    }
LABEL_48:
    if (v47 && v268[v45 + 1])
    {
      BOOL v55 = *((unsigned char *)&v264[4] + v46 + 4) == 0;
      if (!v49) {
        goto LABEL_55;
      }
    }
    else
    {
      BOOL v55 = 1;
      if (!v49) {
        goto LABEL_55;
      }
    }
    if (v268[v45 + 1] && *((unsigned char *)&v264[3] + v46 + 6))
    {
      *((unsigned char *)&v264[5] + v45 + 4) = 0;
      int64x2_t v50 = (char *)&v264[5] + v45 + 4;
LABEL_24:
      *int64x2_t v50 = 1;
      v48[21] |= 0x400000u;
      goto LABEL_25;
    }
LABEL_55:
    *((unsigned char *)&v264[5] + v45 + 4) = 0;
    if (!v55)
    {
      int64x2_t v50 = (char *)&v264[5] + 3 * v46 + 4;
      goto LABEL_24;
    }
LABEL_25:
    ++v46;
    v45 += 3;
    v48 += 74;
  }
  while (v45 != 42);
  memset(v264, 0, 42);
  char v56 = (float *)((char *)this + 164);
  for (uint64_t i = 1; i != 43; i += 3)
  {
    if (*(v56 - 19) <= 0.0 || *(v56 - 17) >= 0.08 || *(v56 - 13) <= 0.0015)
    {
      *((unsigned char *)v264 + i) = 0;
    }
    else
    {
      double v58 = *(v56 - 10);
      *((unsigned char *)v264 + i) = v58 > 2.1;
      if (v58 > 2.1) {
        *(_DWORD *)v56 |= 0x4000u;
      }
    }
    v56 += 74;
  }
  uint64_t v59 = 0;
  char v60 = 0;
  float v61 = (_DWORD *)((char *)this + 164);
  do
  {
    int v62 = *(v61 - 21) & 0x8000;
    int v63 = (*(v61 - 21) >> 15) & 1;
    uint64_t v64 = &v268[v59 - 1];
    if (!v268[v59 - 1]) {
      LOBYTE(v63) = 0;
    }
    BOOL v65 = &v262[v59 + 42];
    v262[v59 + 42] = v63;
    int v66 = *v61 & 0x8000;
    int v67 = (*v61 >> 15) & 1;
    if (!v64[1]) {
      LOBYTE(v67) = 0;
    }
    v65[1] = v67;
    int v68 = (v61[21] >> 15) & 1;
    v60 |= (v61[21] & 0x8000 | v66 | v62) != 0;
    if (!v64[2]) {
      LOBYTE(v68) = 0;
    }
    v65[2] = v68;
    v59 += 3;
    v61 += 74;
  }
  while (v59 != 42);
  if (v60)
  {
    *((_DWORD *)this + 20) &= ~0x8000u;
    if (!v263[0]) {
      *((_DWORD *)this + 41) &= ~0x8000u;
    }
    *((_DWORD *)this + 62) &= ~0x8000u;
    *((_DWORD *)this + 94) &= ~0x8000u;
    if (!v263[3]) {
      *((_DWORD *)this + 115) &= ~0x8000u;
    }
    *((_DWORD *)this + 136) &= ~0x8000u;
    *((_DWORD *)this + 168) &= ~0x8000u;
    if (!v263[6]) {
      *((_DWORD *)this + 189) &= ~0x8000u;
    }
    *((_DWORD *)this + 210) &= ~0x8000u;
    *((_DWORD *)this + 242) &= ~0x8000u;
    if (!v263[9]) {
      *((_DWORD *)this + 263) &= ~0x8000u;
    }
    *((_DWORD *)this + 284) &= ~0x8000u;
    *((_DWORD *)this + 316) &= ~0x8000u;
    if (!v263[12]) {
      *((_DWORD *)this + 337) &= ~0x8000u;
    }
    *((_DWORD *)this + 358) &= ~0x8000u;
    *((_DWORD *)this + 390) &= ~0x8000u;
    if (!v263[15]) {
      *((_DWORD *)this + 411) &= ~0x8000u;
    }
    *((_DWORD *)this + 432) &= ~0x8000u;
    *((_DWORD *)this + 464) &= ~0x8000u;
    if (!v263[18]) {
      *((_DWORD *)this + 485) &= ~0x8000u;
    }
    *((_DWORD *)this + 506) &= ~0x8000u;
    *((_DWORD *)this + 538) &= ~0x8000u;
    if (!v263[21]) {
      *((_DWORD *)this + 559) &= ~0x8000u;
    }
    *((_DWORD *)this + 580) &= ~0x8000u;
    *((_DWORD *)this + 612) &= ~0x8000u;
    if (!v263[24]) {
      *((_DWORD *)this + 633) &= ~0x8000u;
    }
    *((_DWORD *)this + 654) &= ~0x8000u;
    *((_DWORD *)this + 686) &= ~0x8000u;
    if (!v263[27]) {
      *((_DWORD *)this + 707) &= ~0x8000u;
    }
    *((_DWORD *)this + 728) &= ~0x8000u;
    *((_DWORD *)this + 760) &= ~0x8000u;
    if (!v263[30]) {
      *((_DWORD *)this + 781) &= ~0x8000u;
    }
    *((_DWORD *)this + 802) &= ~0x8000u;
    *((_DWORD *)this + 834) &= ~0x8000u;
    if (!v263[33]) {
      *((_DWORD *)this + 855) &= ~0x8000u;
    }
    *((_DWORD *)this + 876) &= ~0x8000u;
    *((_DWORD *)this + 908) &= ~0x8000u;
    if (!v263[36]) {
      *((_DWORD *)this + 929) &= ~0x8000u;
    }
    *((_DWORD *)this + 950) &= ~0x8000u;
    *((_DWORD *)this + 982) &= ~0x8000u;
    if (!v263[39]) {
      *((_DWORD *)this + 1003) &= ~0x8000u;
    }
    *((_DWORD *)this + 1024) &= ~0x8000u;
  }
  uint64_t v69 = 0;
  float v70 = (_DWORD *)((char *)this + 164);
  while (2)
  {
    if (!v268[v69 - 1])
    {
      v262[v69] = 0;
      goto LABEL_113;
    }
    float v71 = *((float *)this + 1074);
    if (v71 <= *a3)
    {
      v262[v69] = 1;
      goto LABEL_112;
    }
    float v72 = *a5 * *a4;
    v262[v69] = v71 <= v72;
    if (v71 <= v72) {
LABEL_112:
    }
      *(v70 - 21) |= 0x20000u;
LABEL_113:
    if (!v268[v69])
    {
      v262[v69 + 1] = 0;
      goto LABEL_120;
    }
    float v73 = *((float *)this + 1074);
    if (v73 <= *a3)
    {
      v262[v69 + 1] = 1;
      goto LABEL_119;
    }
    float v74 = *a5 * *a4;
    v262[v69 + 1] = v73 <= v74;
    if (v73 <= v74) {
LABEL_119:
    }
      *v70 |= 0x20000u;
LABEL_120:
    if (v268[v69 + 1])
    {
      float v75 = *((float *)this + 1074);
      if (v75 <= *a3)
      {
        v262[v69 + 2] = 1;
        goto LABEL_125;
      }
      float v76 = *a5 * *a4;
      v262[v69 + 2] = v75 <= v76;
      if (v75 <= v76) {
LABEL_125:
      }
        v70[21] |= 0x20000u;
    }
    else
    {
      v262[v69 + 2] = 0;
    }
    v69 += 3;
    ++a3;
    ++a4;
    ++a5;
    v70 += 74;
    if (v69 != 42) {
      continue;
    }
    break;
  }
  long long v77 = 0uLL;
  long long v260 = 0u;
  memset(v261, 0, sizeof(v261));
  if (v268[2]) {
    BOOL v78 = v268[3] == 0;
  }
  else {
    BOOL v78 = 1;
  }
  int v79 = !v78;
  if (v267) {
    BOOL v80 = v268[0] == 0;
  }
  else {
    BOOL v80 = 1;
  }
  char v81 = !v80;
  char v246 = v81;
  char v247 = v79;
  if (v80) {
    int v82 = v79;
  }
  else {
    int v82 = 1;
  }
  if (v268[5]) {
    BOOL v83 = v268[6] == 0;
  }
  else {
    BOOL v83 = 1;
  }
  char v84 = !v83;
  char v248 = v84;
  if (!v83) {
    int v82 = 1;
  }
  if (v268[8]) {
    BOOL v85 = v268[9] == 0;
  }
  else {
    BOOL v85 = 1;
  }
  char v86 = !v85;
  char v249 = v86;
  if (!v85) {
    int v82 = 1;
  }
  if (v268[11]) {
    BOOL v87 = v268[12] == 0;
  }
  else {
    BOOL v87 = 1;
  }
  char v88 = !v87;
  char v250 = v88;
  if (!v87) {
    int v82 = 1;
  }
  if (v268[14]) {
    BOOL v89 = v268[15] == 0;
  }
  else {
    BOOL v89 = 1;
  }
  char v90 = !v89;
  char v251 = v90;
  if (!v89) {
    int v82 = 1;
  }
  if (v268[17]) {
    BOOL v91 = v268[18] == 0;
  }
  else {
    BOOL v91 = 1;
  }
  char v92 = !v91;
  char v252 = v92;
  if (!v91) {
    int v82 = 1;
  }
  if (v268[20]) {
    BOOL v93 = v268[21] == 0;
  }
  else {
    BOOL v93 = 1;
  }
  int v94 = !v93;
  char v253 = v94;
  if (v268[23]) {
    BOOL v95 = v268[24] == 0;
  }
  else {
    BOOL v95 = 1;
  }
  unint64_t StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  char v97 = !v95;
  char v254 = v97;
  if (v268[26]) {
    BOOL v98 = v268[27] == 0;
  }
  else {
    BOOL v98 = 1;
  }
  unint64_t v99 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  char v100 = !v98;
  char v255 = v100;
  if (v268[29]) {
    BOOL v101 = v268[30] == 0;
  }
  else {
    BOOL v101 = 1;
  }
  unint64_t v102 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  char v103 = !v101;
  char v256 = v103;
  if (v268[32]) {
    BOOL v104 = v268[33] == 0;
  }
  else {
    BOOL v104 = 1;
  }
  unint64_t v105 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  char v106 = !v104;
  char v257 = v106;
  if (v268[35]) {
    BOOL v107 = v268[36] == 0;
  }
  else {
    BOOL v107 = 1;
  }
  unint64_t v108 = _ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0));
  char v109 = !v107;
  char v258 = v109;
  if (v268[38]) {
    BOOL v110 = v268[39] == 0;
  }
  else {
    BOOL v110 = 1;
  }
  int v111 = !v110;
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v108);
  if (v110) {
    int v112 = v111;
  }
  else {
    int v112 = 1;
  }
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v105);
  if (v110) {
    int v113 = v112;
  }
  else {
    int v113 = 1;
  }
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v102);
  if (v110) {
    int v114 = v113;
  }
  else {
    int v114 = 1;
  }
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), v99);
  if (v110) {
    int v115 = v114;
  }
  else {
    int v115 = 1;
  }
  _WriteStatusReg(ARM64_SYSREG(3, 3, 4, 2, 0), StatusReg);
  if (v110) {
    int v116 = v115;
  }
  else {
    int v116 = 1;
  }
  char v259 = v111;
  if (v9[3] && ((v116 | v94 | v82) & 1) != 0)
  {
    uint64_t v218 = v9;
    BOOL v117 = v273[2] > v273[1];
    BOOL v118 = v273[5] > v273[4];
    BOOL v119 = v273[8] > v273[7];
    BOOL v120 = v273[11] > v273[10];
    BOOL v121 = v273[14] > v273[13];
    BOOL v122 = v273[17] > v273[16];
    BOOL v123 = v273[20] > v273[19];
    BOOL v124 = v273[23] > v273[22];
    BOOL v125 = v273[26] > v273[25];
    BOOL v126 = v273[29] > v273[28];
    BOOL v127 = v273[32] > v273[31];
    BOOL v128 = v273[35] > v273[34];
    BOOL v129 = v273[38] > v273[37];
    memset(v245, 0, 42);
    memset(v244, 0, sizeof(v244));
    long long v243 = 0u;
    *(unsigned char *)((unint64_t)v245 | (v272 > v271)) = 1;
    *((unsigned char *)v245 + v117 + 3) = 1;
    *(unsigned char *)(((unint64_t)v245 + 6) | v118) = 1;
    *(unsigned char *)(((unint64_t)v245 | 9) + v119) = 1;
    *(unsigned char *)((unint64_t)v245 | 0xC | v120) = 1;
    *(unsigned char *)(((unint64_t)v245 | 0xF) + v121) = 1;
    *(unsigned char *)(((unint64_t)&v245[1] + 2) | v122) = 1;
    *((unsigned char *)&v245[1] + v123 + 5) = 1;
    *(unsigned char *)(((unint64_t)&v245[1] + 8) | v124) = 1;
    *((unsigned char *)&v245[1] + v125 + 11) = 1;
    *(unsigned char *)(((unint64_t)&v245[1] + 14) | v126) = 1;
    *((unsigned char *)&v245[2] + v127 + 1) = 1;
    *(unsigned char *)(((unint64_t)&v245[2] + 4) | v128) = 1;
    *((unsigned char *)&v245[2] + v129 + 7) = 1;
    __int16 v242 = LOWORD(v245[0]) ^ 0x101;
    *(_WORD *)((char *)&v243 + 1) = *(_WORD *)((char *)v245 + 3) ^ 0x101;
    WORD2(v243) = WORD3(v245[0]) ^ 0x101;
    *(_WORD *)((char *)&v243 + 7) = *(_WORD *)((char *)v245 + 9) ^ 0x101;
    WORD5(v243) = WORD6(v245[0]) ^ 0x101;
    *(_WORD *)((char *)&v243 + 13) = *(_WORD *)((char *)v245 + 15) ^ 0x101;
    v244[0] = WORD1(v245[1]) ^ 0x101;
    *(_WORD *)((char *)&v244[1] + 1) = *(_WORD *)((char *)&v245[1] + 5) ^ 0x101;
    v244[3] = WORD4(v245[1]) ^ 0x101;
    *(_WORD *)((char *)&v244[4] + 1) = *(_WORD *)((char *)&v245[1] + 11) ^ 0x101;
    v244[6] = HIWORD(v245[1]) ^ 0x101;
    *(_WORD *)((char *)&v244[7] + 1) = *(_WORD *)((char *)&v245[2] + 1) ^ 0x101;
    v244[9] = WORD2(v245[2]) ^ 0x101;
    *(_WORD *)((char *)&v244[10] + 1) = *(_WORD *)((char *)&v245[2] + 7) ^ 0x101;
    if (!v246)
    {
      BYTE2(v245[0]) = 0;
      LOWORD(v245[0]) = 0;
      __int16 v242 = 0;
      LOBYTE(v243) = 0;
    }
    if (v247)
    {
      if (v248) {
        goto LABEL_244;
      }
LABEL_433:
      BYTE8(v245[0]) = 0;
      WORD3(v245[0]) = 0;
      WORD2(v243) = 0;
      BYTE6(v243) = 0;
      if (!v249) {
        goto LABEL_434;
      }
LABEL_245:
      if (v250) {
        goto LABEL_246;
      }
LABEL_435:
      *(unsigned char *)(((unint64_t)v245 | 0xC) + 2) = 0;
      *(_WORD *)((unint64_t)v245 | 0xC) = 0;
      WORD5(v243) = 0;
      BYTE12(v243) = 0;
      if (!v251) {
        goto LABEL_436;
      }
LABEL_247:
      if (v252) {
        goto LABEL_248;
      }
LABEL_437:
      BYTE4(v245[1]) = 0;
      WORD1(v245[1]) = 0;
      v244[0] = 0;
      LOBYTE(v244[1]) = 0;
      if (!v253) {
        goto LABEL_438;
      }
LABEL_249:
      if (v254) {
        goto LABEL_250;
      }
LABEL_439:
      BYTE10(v245[1]) = 0;
      WORD4(v245[1]) = 0;
      v244[3] = 0;
      LOBYTE(v244[4]) = 0;
      if (!v255) {
        goto LABEL_440;
      }
LABEL_251:
      if (v256) {
        goto LABEL_252;
      }
LABEL_441:
      LOBYTE(v245[2]) = 0;
      HIWORD(v245[1]) = 0;
      v244[6] = 0;
      LOBYTE(v244[7]) = 0;
      if (!v257) {
        goto LABEL_442;
      }
LABEL_253:
      if (v258) {
        goto LABEL_254;
      }
LABEL_443:
      BYTE6(v245[2]) = 0;
      WORD2(v245[2]) = 0;
      v244[9] = 0;
      LOBYTE(v244[10]) = 0;
      if (!v259) {
        goto LABEL_444;
      }
    }
    else
    {
      BYTE5(v245[0]) = 0;
      *(_WORD *)((char *)v245 + 3) = 0;
      *(_WORD *)((char *)&v243 + 1) = 0;
      BYTE3(v243) = 0;
      if (!v248) {
        goto LABEL_433;
      }
LABEL_244:
      if (v249) {
        goto LABEL_245;
      }
LABEL_434:
      *(unsigned char *)(((unint64_t)v245 | 9) + 2) = 0;
      *(_WORD *)((unint64_t)v245 | 9) = 0;
      *(_WORD *)((char *)&v243 + 7) = 0;
      BYTE9(v243) = 0;
      if (!v250) {
        goto LABEL_435;
      }
LABEL_246:
      if (v251) {
        goto LABEL_247;
      }
LABEL_436:
      *(unsigned char *)(((unint64_t)v245 | 0xF) + 2) = 0;
      *(_WORD *)((unint64_t)v245 | 0xF) = 0;
      *(_WORD *)((char *)&v243 + 13) = 0;
      HIBYTE(v243) = 0;
      if (!v252) {
        goto LABEL_437;
      }
LABEL_248:
      if (v253) {
        goto LABEL_249;
      }
LABEL_438:
      BYTE7(v245[1]) = 0;
      *(_WORD *)((char *)&v245[1] + 5) = 0;
      *(_WORD *)((char *)&v244[1] + 1) = 0;
      HIBYTE(v244[2]) = 0;
      if (!v254) {
        goto LABEL_439;
      }
LABEL_250:
      if (v255) {
        goto LABEL_251;
      }
LABEL_440:
      BYTE13(v245[1]) = 0;
      *(_WORD *)((char *)&v245[1] + 11) = 0;
      *(_WORD *)((char *)&v244[4] + 1) = 0;
      HIBYTE(v244[5]) = 0;
      if (!v256) {
        goto LABEL_441;
      }
LABEL_252:
      if (v257) {
        goto LABEL_253;
      }
LABEL_442:
      BYTE3(v245[2]) = 0;
      *(_WORD *)((char *)&v245[2] + 1) = 0;
      *(_WORD *)((char *)&v244[7] + 1) = 0;
      HIBYTE(v244[8]) = 0;
      if (!v258) {
        goto LABEL_443;
      }
LABEL_254:
      if (!v259)
      {
LABEL_444:
        BYTE9(v245[2]) = 0;
        *(_WORD *)((char *)&v245[2] + 7) = 0;
        *(_WORD *)((char *)&v244[10] + 1) = 0;
        HIBYTE(v244[11]) = 0;
      }
    }
    uint64_t v130 = 0;
    uint64_t v131 = 0;
    *(void *)&long long v277 = 0;
    long long v275 = 0uLL;
    long long v276 = 0uLL;
    long long v274 = 0uLL;
    uint64_t v241 = 0;
    memset(v240, 0, sizeof(v240));
    uint64_t v239 = 0;
    long long v237 = 0uLL;
    long long v238 = 0uLL;
    long long v236 = 0uLL;
    uint64_t v235 = 0;
    long long v233 = 0uLL;
    long long v234 = 0uLL;
    uint64_t v132 = v269;
    float32x4_t v133 = v273;
    long long v232 = 0uLL;
    float32x4_t v134 = &v270;
    uint64_t v231 = 0;
    memset(v230, 0, sizeof(v230));
    do
    {
      if (*((unsigned char *)v245 + v130))
      {
        *(float *)((char *)&v274 + v131) = *(v133 - 2);
        *(_DWORD *)((char *)&v236 + v131) = *(v132 - 2);
        *(_DWORD *)((char *)v230 + v131) = *((_DWORD *)v134 - 2);
      }
      if (*((unsigned char *)&v242 + v130))
      {
        *(float *)((char *)v240 + v131) = *(v133 - 2);
        *(_DWORD *)((char *)&v232 + v131) = *(v132 - 2);
      }
      if (*((unsigned char *)v245 + v130 + 1))
      {
        *(float *)((char *)&v274 + v131) = *(v133 - 1);
        *(_DWORD *)((char *)&v236 + v131) = *(v132 - 1);
        *(_DWORD *)((char *)v230 + v131) = *((_DWORD *)v134 - 1);
      }
      if (*((unsigned char *)&v242 + v130 + 1))
      {
        *(float *)((char *)v240 + v131) = *(v133 - 1);
        *(_DWORD *)((char *)&v232 + v131) = *(v132 - 1);
      }
      if (*((unsigned char *)v245 + v130 + 2))
      {
        *(float *)((char *)&v274 + v131) = *v133;
        *(_DWORD *)((char *)&v236 + v131) = *v132;
        *(_DWORD *)((char *)v230 + v131) = *(_DWORD *)v134;
      }
      if (*((unsigned char *)&v242 + v130 + 2))
      {
        *(float *)((char *)v240 + v131) = *v133;
        *(_DWORD *)((char *)&v232 + v131) = *v132;
      }
      v131 += 4;
      v132 += 3;
      v133 += 3;
      v130 += 3;
      float32x4_t v134 = (uint64_t *)((char *)v134 + 12);
    }
    while (v131 != 56);
    uint64_t v135 = 0;
    uint64_t v229 = 0;
    memset(v228, 0, sizeof(v228));
    uint64_t v227 = 0;
    memset(v226, 0, sizeof(v226));
    do
    {
      float v136 = *((float *)v240 + v135);
      float v137 = *((float *)&v274 + v135);
      if (v136 == 0.0)
      {
        if (v137 != 0.0) {
          printf("Warning: division by 0 (close_tofs[%d] is 0)\n", v135);
        }
      }
      else
      {
        *((float *)v228 + v135) = v137 / v136;
        float v138 = *((float *)&v232 + v135);
        if (v138 == 0.0)
        {
          if (v137 != 0.0) {
            printf("Warning: division by 0 (close_qs[%d] is 0)\n", v135);
          }
        }
        else
        {
          *((float *)v226 + v135) = *((float *)&v236 + v135) / v138;
        }
      }
      ++v135;
    }
    while (v135 != 14);
    uint64_t v139 = 0;
    uint64_t v140 = 0;
    memset(v225, 0, 42);
    memset(v224, 0, 42);
    memset(v223, 0, 42);
    memset(v222, 0, 42);
    *(void *)&long long v141 = 0x101010101010101;
    *((void *)&v141 + 1) = 0x101010101010101;
    *(_OWORD *)&v221[10] = v141;
    long long v220 = v141;
    *(_OWORD *)float32x4_t v221 = v141;
    int v6 = a2;
    float v9 = v218;
    do
    {
      if (*((unsigned char *)v245 + v140))
      {
        float v143 = *(float *)((char *)v228 + v139);
        BOOL v144 = v143 >= *((float *)this + 1075) && v143 <= *((float *)this + 1076);
        *((unsigned char *)v225 + v140) = v144;
        float v145 = *(float *)((char *)v230 + v139);
        BOOL v146 = v145 <= *((float *)this + 1077) && (v145 != 0.0 || v218[80] != 0);
        *((unsigned char *)v224 + v140) = v146;
        *((unsigned char *)v223 + v140) = *(float *)((char *)v226 + v139) <= *((float *)this + 1078);
        float v147 = *(float *)((char *)v240 + v139);
        BOOL v148 = v147 >= *((float *)this + 1079) && v147 <= *((float *)this + 1080);
        *((unsigned char *)v222 + v140) = v148;
      }
      if (*((unsigned char *)v245 + v140 + 1))
      {
        float v149 = *(float *)((char *)v228 + v139);
        BOOL v150 = v149 >= *((float *)this + 1075) && v149 <= *((float *)this + 1076);
        *((unsigned char *)v225 + v140 + 1) = v150;
        float v151 = *(float *)((char *)v230 + v139);
        BOOL v152 = v151 <= *((float *)this + 1077) && (v151 != 0.0 || v218[80] != 0);
        *((unsigned char *)v224 + v140 + 1) = v152;
        *((unsigned char *)v223 + v140 + 1) = *(float *)((char *)v226 + v139) <= *((float *)this + 1078);
        float v153 = *(float *)((char *)v240 + v139);
        BOOL v154 = v153 >= *((float *)this + 1079) && v153 <= *((float *)this + 1080);
        *((unsigned char *)v222 + v140 + 1) = v154;
      }
      if (*((unsigned char *)v245 + v140 + 2))
      {
        float v155 = *(float *)((char *)v228 + v139);
        BOOL v156 = v155 >= *((float *)this + 1075) && v155 <= *((float *)this + 1076);
        *((unsigned char *)v225 + v140 + 2) = v156;
        float v157 = *(float *)((char *)v230 + v139);
        BOOL v158 = v157 <= *((float *)this + 1077) && (v157 != 0.0 || v218[80] != 0);
        *((unsigned char *)v224 + v140 + 2) = v158;
        *((unsigned char *)v223 + v140 + 2) = *(float *)((char *)v226 + v139) <= *((float *)this + 1078);
        float v159 = *(float *)((char *)v240 + v139);
        BOOL v142 = v159 >= *((float *)this + 1079) && v159 <= *((float *)this + 1080);
        *((unsigned char *)v222 + v140 + 2) = v142;
      }
      v140 += 3;
      v139 += 4;
    }
    while (v140 != 42);
    if (!v218[81])
    {
      uint64_t v215 = 0;
      float32x2_t v216 = (float *)((char *)this + 148);
      do
      {
        if (*((unsigned char *)v245 + v215)) {
          v221[v215 - 16] = (float)(*(v216 - 21) + *(v216 - 21)) < 1.0;
        }
        if (*((unsigned char *)v245 + v215 + 1)) {
          v221[v215 - 15] = (float)(*v216 + *v216) < 1.0;
        }
        if (*((unsigned char *)v245 + v215 + 2)) {
          v221[v215 - 14] = (float)(v216[21] + v216[21]) < 1.0;
        }
        v215 += 3;
        v216 += 74;
      }
      while (v215 != 42);
    }
    uint64_t v160 = 0;
    float v161 = &v246;
    long long v77 = 0uLL;
    do
    {
      if (*v161++)
      {
        char v163 = *((unsigned char *)v225 + v160);
        if (v163)
        {
          char v163 = *((unsigned char *)v224 + v160);
          if (v163)
          {
            char v163 = *((unsigned char *)v223 + v160);
            if (v163)
            {
              char v163 = *((unsigned char *)v222 + v160);
              if (v163) {
                char v163 = v221[v160 - 16] != 0;
              }
            }
          }
        }
        v261[v160 - 16] = v163;
        BOOL v164 = *((unsigned char *)v225 + v160 + 1)
            && *((unsigned char *)v224 + v160 + 1)
            && *((unsigned char *)v223 + v160 + 1)
            && *((unsigned char *)v222 + v160 + 1)
            && v221[v160 - 15] != 0;
        v261[v160 - 15] = v164;
        char v165 = *((unsigned char *)v225 + v160 + 2);
        if (v165)
        {
          char v165 = *((unsigned char *)v224 + v160 + 2);
          if (v165)
          {
            char v165 = *((unsigned char *)v223 + v160 + 2);
            if (v165)
            {
              char v165 = *((unsigned char *)v222 + v160 + 2);
              if (v165) {
                char v165 = v221[v160 - 14] != 0;
              }
            }
          }
        }
        v261[v160 - 14] = v165;
      }
      else
      {
        uint64_t v166 = &v261[v160 - 16];
        _OWORD v166[2] = 0;
        *(_WORD *)uint64_t v166 = 0;
      }
      v160 += 3;
    }
    while (v160 != 42);
    uint64_t v167 = 0;
    uint64_t v168 = (_DWORD *)((char *)this + 164);
    do
    {
      if (v261[v167 - 16]) {
        *(v168 - 21) |= 1u;
      }
      if (v261[v167 - 15]) {
        *v168 |= 1u;
      }
      if (v261[v167 - 14]) {
        v168[21] |= 1u;
      }
      v167 += 3;
      v168 += 74;
    }
    while (v167 != 42);
    if (a6)
    {
      long long v77 = 0uLL;
      long long v260 = 0u;
      memset(v261, 0, sizeof(v261));
    }
  }
  uint64_t v169 = 0;
  unint64_t v170 = 0;
  *(_OWORD *)((char *)&v240[1] + 10) = v77;
  v240[0] = v77;
  v240[1] = v77;
  uint64_t v171 = (float *)((char *)this + 96);
  uint64_t v172 = v273;
  int v173 = v9[2];
  while (2)
  {
    if (!v173)
    {
      float v179 = (char *)v240 + v169;
      v179[2] = 0;
      *(_WORD *)float v179 = 0;
      goto LABEL_354;
    }
    if (!v268[v169 - 1]) {
      goto LABEL_363;
    }
    float v175 = *(v171 - 21);
    if (v175 <= 0.0) {
      goto LABEL_363;
    }
    float v176 = ceilf(v175 * 10000.0) * 0.0001;
    float v177 = *((float *)this + 1069);
    float v178 = *(v172 - 2);
    if (v177 > v178 && v176 < *((float *)this + 1070))
    {
      *((unsigned char *)v240 + v169) = 1;
      goto LABEL_366;
    }
    if (v177 <= v178)
    {
      float v181 = *((float *)this + 1071);
      *((unsigned char *)v240 + v169) = v176 < v181;
      if (v176 < v181) {
LABEL_366:
      }
        uint64_t v180 = v261[v169 - 16] ^ 1;
      else {
        uint64_t v180 = 0;
      }
    }
    else
    {
LABEL_363:
      uint64_t v180 = 0;
      *((unsigned char *)v240 + v169) = 0;
    }
    if (!v268[v169] || *v171 <= 0.0) {
      goto LABEL_373;
    }
    float v182 = ceilf(*v171 * 10000.0) * 0.0001;
    float v183 = *((float *)this + 1069);
    float v184 = *(v172 - 1);
    if (v183 > v184 && v182 < *((float *)this + 1070))
    {
      *((unsigned char *)v240 + v169 + 1) = 1;
      goto LABEL_376;
    }
    if (v183 <= v184)
    {
      float v186 = *((float *)this + 1071);
      *((unsigned char *)v240 + v169 + 1) = v182 < v186;
      if (v182 < v186) {
LABEL_376:
      }
        uint64_t v185 = v261[v169 - 15] ^ 1;
      else {
        uint64_t v185 = 0;
      }
    }
    else
    {
LABEL_373:
      uint64_t v185 = 0;
      *((unsigned char *)v240 + v169 + 1) = 0;
    }
    BOOL v174 = 0;
    v170 += v185 + v180;
    if (!v268[v169 + 1] || (float v187 = v171[21], v187 <= 0.0))
    {
LABEL_353:
      *((unsigned char *)v240 + v169 + 2) = v174;
      goto LABEL_354;
    }
    float v188 = ceilf(v187 * 10000.0) * 0.0001;
    float v189 = *((float *)this + 1069);
    if (v189 <= *v172 || v188 >= *((float *)this + 1070))
    {
      BOOL v174 = v189 <= *v172 && v188 < *((float *)this + 1071);
      goto LABEL_353;
    }
    *((unsigned char *)v240 + v169 + 2) = 1;
LABEL_354:
    v169 += 3;
    v171 += 74;
    v172 += 3;
    if (v169 != 42) {
      continue;
    }
    break;
  }
  if (*((float *)this + 1072) < (float)v170) {
    memset(v240, 0, 42);
  }
  uint64_t v190 = 0;
  float32x2_t v191 = (_DWORD *)((char *)this + 164);
  do
  {
    if (*((unsigned char *)v240 + v190)) {
      *(v191 - 21) |= 0x400u;
    }
    if (*((unsigned char *)v240 + v190 + 1)) {
      *v191 |= 0x400u;
    }
    if (*((unsigned char *)v240 + v190 + 2)) {
      v191[21] |= 0x400u;
    }
    v190 += 3;
    v191 += 74;
  }
  while (v190 != 42);
  uint64_t v192 = 0;
  float32x4_t v193 = (float *)((char *)this + 88);
  float result = v262;
  do
  {
    if (*((unsigned char *)&v264[5] + v192 + 2)
      || *((unsigned char *)v264 + v192)
      || *((unsigned char *)v240 + v192)
      || v262[v192 + 42]
      || v262[v192]
      || v261[v192 - 16])
    {
      *(v193 - 21) = *(v193 - 21) * *((float *)this + 1073);
    }
    if (*((unsigned char *)&v264[5] + v192 + 3)
      || *((unsigned char *)v264 + v192 + 1)
      || *((unsigned char *)v240 + v192 + 1)
      || v263[v192]
      || v262[v192 + 1]
      || v261[v192 - 15])
    {
      *float32x4_t v193 = *v193 * *((float *)this + 1073);
    }
    if (*((unsigned char *)&v264[5] + v192 + 4)
      || *((unsigned char *)v264 + v192 + 2)
      || *((unsigned char *)v240 + v192 + 2)
      || v263[v192 + 1]
      || v262[v192 + 2]
      || v261[v192 - 14])
    {
      v193[21] = v193[21] * *((float *)this + 1073);
    }
    v192 += 3;
    v193 += 74;
  }
  while (v192 != 42);
  uint64_t v195 = -4144;
  do
  {
    if (v6)
    {
      float32x2_t v196 = (char *)this + v195;
      if ((*((unsigned char *)this + v195 + 4224) & 0x40) != 0) {
        *((_DWORD *)v196 + 1037) = 0;
      }
      if ((v196[4308] & 0x40) != 0) {
        *(_DWORD *)((char *)this + v195 + 4232) = 0;
      }
      if ((*((unsigned char *)this + v195 + 4392) & 0x40) != 0) {
        *(_DWORD *)((char *)this + v195 + 4316) = 0;
      }
    }
    v195 += 296;
  }
  while (v195);
  uint64_t v197 = (char *)this + 84;
  uint64_t v198 = 14;
  do
  {
    if (*((float *)v197 - 20) < 0.999 && *((float *)v197 + 1) >= 0.999)
    {
      float32x4_t v199 = v197 - 84;
      long long v200 = *(_OWORD *)(v197 - 68);
      long long v236 = *(_OWORD *)(v197 - 84);
      long long v237 = v200;
      LODWORD(v238) = *((_DWORD *)v197 - 13);
      long long v201 = *((_OWORD *)v197 + 1);
      long long v232 = *(_OWORD *)v197;
      long long v202 = v232;
      long long v233 = v201;
      LODWORD(v234) = *((_DWORD *)v197 + 8);
      int v203 = *((_DWORD *)v197 - 1);
      int v204 = *((_DWORD *)v197 + 20);
      long long v205 = *(_OWORD *)(v197 - 36);
      long long v276 = *(_OWORD *)(v197 - 52);
      long long v277 = v205;
      long long v278 = *(_OWORD *)(v197 - 20);
      int v279 = *((_DWORD *)v197 - 1);
      long long v206 = *(_OWORD *)(v197 - 68);
      long long v274 = v236;
      long long v275 = v206;
      long long v207 = *((_OWORD *)v197 + 3);
      *((_OWORD *)v199 + 2) = *((_OWORD *)v197 + 2);
      *((_OWORD *)v199 + 3) = v207;
      *((_OWORD *)v199 + 4) = *((_OWORD *)v197 + 4);
      long long v208 = *((_OWORD *)v197 + 1);
      *(_OWORD *)float32x4_t v199 = v202;
      *((_OWORD *)v199 + 1) = v208;
      long long v209 = v278;
      long long v210 = v276;
      *((_OWORD *)v197 + 3) = v277;
      *((_OWORD *)v197 + 4) = v209;
      long long v211 = v275;
      *(_OWORD *)uint64_t v197 = v274;
      *((_OWORD *)v197 + 1) = v211;
      *((_OWORD *)v197 + 2) = v210;
      *((_DWORD *)v199 + 8) = v234;
      long long v212 = v233;
      *(_OWORD *)float32x4_t v199 = v232;
      *((_OWORD *)v199 + 1) = v212;
      long long v213 = v236;
      long long v214 = v237;
      *((_DWORD *)v197 + 8) = v238;
      *(_OWORD *)uint64_t v197 = v213;
      *((_OWORD *)v197 + 1) = v214;
      *((_DWORD *)v197 - 1) = v204;
      *((_DWORD *)v197 + 20) = v203;
    }
    v197 += 296;
    --v198;
  }
  while (v198);
  return result;
}

uint64_t peridot::Reflectivity::calcPDE(peridot::Reflectivity *this, const peridot::PeridotDXPCalib *a2, float a3, float a4)
{
  if (a4 < 70.0 && (a3 >= 0.0 ? (BOOL v4 = a3 < 70.0) : (BOOL v4 = 0), v4 && a4 >= 0.0))
  {
    uint64_t v5 = 0;
    float v6 = *((float *)this + 1524) / *((float *)this + vcvtas_u32_f32(*((float *)this + 1525)) + 1453);
    float v7 = v6 * *((float *)this + vcvtas_u32_f32(a3) + 1453);
    float v8 = v6 * *((float *)this + vcvtas_u32_f32(a4) + 1453);
    float v9 = (char *)a2 + 41032;
    float v10 = (char *)this + 6104;
    do
    {
      for (uint64_t i = 0; i != 12; i += 4)
      {
        float v12 = (float *)&v10[i];
        float *v12 = v7 * *(float *)&v9[i];
        v12[168] = v8 * *(float *)&v9[i + 672];
        v12[12] = v7 * *(float *)&v9[i + 48];
        v12[180] = v8 * *(float *)&v9[i + 720];
        v12[24] = v7 * *(float *)&v9[i + 96];
        v12[192] = v8 * *(float *)&v9[i + 768];
        v12[36] = v7 * *(float *)&v9[i + 144];
        v12[204] = v8 * *(float *)&v9[i + 816];
        v12[48] = v7 * *(float *)&v9[i + 192];
        v12[216] = v8 * *(float *)&v9[i + 864];
        v12[60] = v7 * *(float *)&v9[i + 240];
        v12[228] = v8 * *(float *)&v9[i + 912];
        v12[72] = v7 * *(float *)&v9[i + 288];
        v12[240] = v8 * *(float *)&v9[i + 960];
        v12[84] = v7 * *(float *)&v9[i + 336];
        v12[252] = v8 * *(float *)&v9[i + 1008];
        v12[96] = v7 * *(float *)&v9[i + 384];
        v12[264] = v8 * *(float *)&v9[i + 1056];
        v12[108] = v7 * *(float *)&v9[i + 432];
        v12[276] = v8 * *(float *)&v9[i + 1104];
        v12[120] = v7 * *(float *)&v9[i + 480];
        v12[288] = v8 * *(float *)&v9[i + 1152];
        v12[132] = v7 * *(float *)&v9[i + 528];
        v12[300] = v8 * *(float *)&v9[i + 1200];
        v12[144] = v7 * *(float *)&v9[i + 576];
        v12[312] = v8 * *(float *)&v9[i + 1248];
        v12[156] = v7 * *(float *)&v9[i + 624];
        v12[324] = v8 * *(float *)&v9[i + 1296];
      }
      ++v5;
      v9 += 12;
      v10 += 12;
    }
    while (v5 != 4);
    return 0;
  }
  else
  {
    peridot_depth_log("Wrong Temperature", a2);
    return 5;
  }
}

void sub_259034BBC(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x10F2C40D843ECF2);
  _Unwind_Resume(a1);
}

peridot::PeridotAlgo::Impl *peridot::PeridotAlgo::Impl::Impl(peridot::PeridotAlgo::Impl *this)
{
  uint64_t v2 = (char *)this + 403468;
  *(_OWORD *)((char *)this + 402536) = 0u;
  *(void *)this = 0;
  *(_WORD *)((char *)this + 403473) = 257;
  *((unsigned char *)this + 403475) = 0;
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 403488));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 585520));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 767552));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 949584));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 1131616));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 1313648));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 1495680));
  peridot::PeridotDXP::PeridotDXP((peridot::PeridotAlgo::Impl *)((char *)this + 1677712));
  *(_OWORD *)((char *)this + 1860344) = xmmword_259134900;
  *(_OWORD *)((char *)this + 1860360) = unk_259134910;
  *(_OWORD *)((char *)this + 1860376) = xmmword_259134920;
  *(_OWORD *)((char *)this + 1860280) = xmmword_2591348C0;
  *(_OWORD *)((char *)this + 1860296) = unk_2591348D0;
  *(_OWORD *)((char *)this + 1860312) = xmmword_2591348E0;
  *(_OWORD *)((char *)this + 1860328) = unk_2591348F0;
  *((void *)this + 232549) = 6;
  *((void *)this + 232552) = 0;
  *(_OWORD *)((char *)this + 1860424) = xmmword_259120370;
  *(_OWORD *)((char *)this + 1860440) = xmmword_259120380;
  *(_OWORD *)((char *)this + 1860456) = xmmword_259120390;
  *((void *)this + 232559) = 0x4319800042F48000;
  *((_DWORD *)this + 465120) = 1128611840;
  *((void *)this + 232646) = 6;
  *((_OWORD *)this + 116319) = unk_2591348F0;
  *((_OWORD *)this + 116320) = xmmword_259134900;
  *((_OWORD *)this + 116321) = unk_259134910;
  *((_OWORD *)this + 116322) = xmmword_259134920;
  *((_OWORD *)this + 116316) = xmmword_2591348C0;
  *((_OWORD *)this + 116317) = unk_2591348D0;
  *((_OWORD *)this + 116318) = xmmword_2591348E0;
  *((void *)this + 232649) = 0;
  *((_OWORD *)this + 116325) = xmmword_259120370;
  *((_OWORD *)this + 116326) = xmmword_259120380;
  *((_OWORD *)this + 116327) = xmmword_259120390;
  *((void *)this + 232656) = 0x4319800042F48000;
  *((_DWORD *)this + 465314) = 1128611840;
  *((void *)this + 232743) = 6;
  *(_OWORD *)((char *)this + 1861912) = unk_259134910;
  *(_OWORD *)((char *)this + 1861928) = xmmword_259134920;
  *(_OWORD *)((char *)this + 1861880) = unk_2591348F0;
  *(_OWORD *)((char *)this + 1861896) = xmmword_259134900;
  *(_OWORD *)((char *)this + 1861848) = unk_2591348D0;
  *(_OWORD *)((char *)this + 1861864) = xmmword_2591348E0;
  *(_OWORD *)((char *)this + 1861832) = xmmword_2591348C0;
  *((void *)this + 232746) = 0;
  *(_OWORD *)((char *)this + 1861976) = xmmword_259120370;
  *(_OWORD *)((char *)this + 1861992) = xmmword_259120380;
  *(_OWORD *)((char *)this + 1862008) = xmmword_259120390;
  *((void *)this + 232753) = 0x4319800042F48000;
  *((_DWORD *)this + 465508) = 1128611840;
  *((void *)this + 232840) = 6;
  *((_OWORD *)this + 116415) = xmmword_2591348E0;
  *((_OWORD *)this + 116414) = unk_2591348D0;
  *((_OWORD *)this + 116413) = xmmword_2591348C0;
  *((_OWORD *)this + 116419) = xmmword_259134920;
  *((_OWORD *)this + 116418) = unk_259134910;
  *((_OWORD *)this + 116417) = xmmword_259134900;
  *((_OWORD *)this + 116416) = unk_2591348F0;
  *((void *)this + 232843) = 0;
  *((_OWORD *)this + 116422) = xmmword_259120370;
  *((_OWORD *)this + 116423) = xmmword_259120380;
  *((_OWORD *)this + 116424) = xmmword_259120390;
  *((void *)this + 232850) = 0x4319800042F48000;
  *((_DWORD *)this + 465702) = 1128611840;
  *((void *)this + 232937) = 6;
  *(_OWORD *)((char *)this + 1863384) = xmmword_2591348C0;
  *(_OWORD *)((char *)this + 1863400) = unk_2591348D0;
  *(_OWORD *)((char *)this + 1863464) = unk_259134910;
  *(_OWORD *)((char *)this + 1863480) = xmmword_259134920;
  *(_OWORD *)((char *)this + 1863432) = unk_2591348F0;
  *(_OWORD *)((char *)this + 1863448) = xmmword_259134900;
  *(_OWORD *)((char *)this + 1863416) = xmmword_2591348E0;
  *((void *)this + 232940) = 0;
  *(_OWORD *)((char *)this + 1863528) = xmmword_259120370;
  *(_OWORD *)((char *)this + 1863544) = xmmword_259120380;
  *(_OWORD *)((char *)this + 1863560) = xmmword_259120390;
  *((void *)this + 232947) = 0x4319800042F48000;
  *((_DWORD *)this + 465896) = 1128611840;
  *((void *)this + 233034) = 6;
  *((_OWORD *)this + 116512) = xmmword_2591348E0;
  *((_OWORD *)this + 116511) = unk_2591348D0;
  *((_OWORD *)this + 116510) = xmmword_2591348C0;
  *((_OWORD *)this + 116516) = xmmword_259134920;
  *((_OWORD *)this + 116515) = unk_259134910;
  *((_OWORD *)this + 116514) = xmmword_259134900;
  *((_OWORD *)this + 116513) = unk_2591348F0;
  *((void *)this + 233037) = 0;
  *((_OWORD *)this + 116519) = xmmword_259120370;
  *((_OWORD *)this + 116520) = xmmword_259120380;
  *((_OWORD *)this + 116521) = xmmword_259120390;
  *((void *)this + 233044) = 0x4319800042F48000;
  *((_DWORD *)this + 466090) = 1128611840;
  *((void *)this + 233131) = 6;
  *(_OWORD *)((char *)this + 1864936) = xmmword_2591348C0;
  *(_OWORD *)((char *)this + 1864952) = unk_2591348D0;
  *(_OWORD *)((char *)this + 1865016) = unk_259134910;
  *(_OWORD *)((char *)this + 1865032) = xmmword_259134920;
  *(_OWORD *)((char *)this + 1864984) = unk_2591348F0;
  *(_OWORD *)((char *)this + 1865000) = xmmword_259134900;
  *(_OWORD *)((char *)this + 1864968) = xmmword_2591348E0;
  *((void *)this + 233134) = 0;
  *(_OWORD *)((char *)this + 1865080) = xmmword_259120370;
  *(_OWORD *)((char *)this + 1865096) = xmmword_259120380;
  *(_OWORD *)((char *)this + 1865112) = xmmword_259120390;
  *((void *)this + 233141) = 0x4319800042F48000;
  *((_DWORD *)this + 466284) = 1128611840;
  *((void *)this + 233228) = 6;
  *((_OWORD *)this + 116609) = xmmword_2591348E0;
  *((_OWORD *)this + 116608) = unk_2591348D0;
  *((_OWORD *)this + 116607) = xmmword_2591348C0;
  *((_OWORD *)this + 116613) = xmmword_259134920;
  *((_OWORD *)this + 116612) = unk_259134910;
  *((_OWORD *)this + 116611) = xmmword_259134900;
  *((_OWORD *)this + 116610) = unk_2591348F0;
  *((void *)this + 233231) = 0;
  *((_OWORD *)this + 116616) = xmmword_259120370;
  *((_OWORD *)this + 116617) = xmmword_259120380;
  *((_OWORD *)this + 116618) = xmmword_259120390;
  *((void *)this + 233238) = 0x4319800042F48000;
  *((_DWORD *)this + 466478) = 1128611840;
  unint64_t v3 = vdupq_n_s32(0x42200000u).u64[0];
  *((_DWORD *)this + 466490) = 1109393408;
  *((void *)this + 233244) = v3;
  *((_DWORD *)this + 466493) = 1109393408;
  *(void *)((char *)this + 1865964) = v3;
  *((_DWORD *)this + 466496) = 1109393408;
  *((void *)this + 233247) = v3;
  *((_DWORD *)this + 466499) = 1109393408;
  *(void *)((char *)this + 1865988) = v3;
  *((_DWORD *)this + 466502) = 1109393408;
  *((void *)this + 233250) = v3;
  *((_DWORD *)this + 466505) = 1109393408;
  *(void *)((char *)this + 1866012) = v3;
  *((_DWORD *)this + 466508) = 1109393408;
  *((void *)this + 233253) = v3;
  *((_DWORD *)this + 466511) = 1109393408;
  *(void *)((char *)this + 1866036) = v3;
  peridot::Reflectivity::Reflectivity((peridot::PeridotAlgo::Impl *)((char *)this + 1866704), 0.1, 0.1, 0.03, 0.2, 0.0, 3.3366e-10, 0.0000000026693, 1.15, 0.28284);
  *((unsigned char *)this + 1874848) = 1;
  *((_OWORD *)this + 117188) = xmmword_2591203A0;
  *((void *)this + 234378) = 0x1C0000001CLL;
  *((unsigned char *)this + 1875004) = 0;
  *((void *)this + 234359) = 0xBF8000003F4CCCCDLL;
  *((_DWORD *)this + 468720) = 1077936128;
  *((_DWORD *)this + 468723) = 1061997773;
  *(void *)((char *)this + 1874884) = 0x3D4CCCCD3F800000;
  *((void *)this + 234362) = 0x3F19999A40800000;
  *(_OWORD *)((char *)this + 1874904) = xmmword_2591203C0;
  *(_OWORD *)((char *)this + 1874920) = xmmword_2591203D0;
  *(_OWORD *)((char *)this + 1874936) = xmmword_2591203E0;
  *(_OWORD *)((char *)this + 1874952) = xmmword_2591203F0;
  *(_OWORD *)((char *)this + 1874968) = xmmword_259120400;
  *(_OWORD *)((char *)this + 1874984) = xmmword_259120410;
  *((_DWORD *)this + 468750) = 1065353216;
  *((void *)this + 234379) = 0;
  *(_DWORD *)uint64_t v2 = 0;
  v2[4] = 12;
  memcpy((char *)this + 1866056, &peridot::gChannelPositions, 0x240uLL);
  *(_OWORD *)((char *)this + 1866632) = xmmword_259120420;
  *((void *)this + 233331) = 1;
  *(int64x2_t *)((char *)this + 1866664) = vdupq_n_s64(1uLL);
  *((void *)this + 233335) = 1;
  *((void *)this + 233337) = 4;
  return this;
}

void sub_2590350CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, peridot::PeridotDXP *a10)
{
  peridot::PeridotDXP::~PeridotDXP(v14);
  peridot::PeridotDXP::~PeridotDXP(v17);
  peridot::PeridotDXP::~PeridotDXP(v16);
  peridot::PeridotDXP::~PeridotDXP(v15);
  peridot::PeridotDXP::~PeridotDXP(v13);
  peridot::PeridotDXP::~PeridotDXP(v12);
  peridot::PeridotDXP::~PeridotDXP(a10);
  peridot::PeridotDXP::~PeridotDXP(v11);
  peridot::PeridotAlgo::PeridotUnitInfo::~PeridotUnitInfo(v10 + 1);

  _Unwind_Resume(a1);
}

peridot::PeridotDXP *peridot::PeridotDXP::PeridotDXP(peridot::PeridotDXP *this)
{
  uint64_t v2 = (char *)this + 181760;
  unint64_t v3 = (char *)this + 150312;
  BOOL v4 = (char *)this + 118688;
  uint64_t v5 = (char *)this + 93808;
  float v6 = (char *)this + 93544;
  float v7 = (void *)((char *)this + 81864);
  float v8 = (void *)((char *)this + 49088);
  float v9 = (char *)this + 43268;
  *(_WORD *)this = 257;
  float v10 = (char *)this + 42464;
  *((unsigned char *)this + 2) = 0;
  peridot::PeridotDXPCalib::PeridotDXPCalib((peridot::PeridotDXP *)((char *)this + 16));
  *(_WORD *)float v10 = 257;
  double v10[2] = 0;
  *((void *)v10 + 97) = 0;
  *((void *)v10 + 99) = 0;
  *((void *)v10 + 98) = 0;
  *(_WORD *)float v9 = 257;
  double v9[2] = 0;
  *(_OWORD *)((char *)this + 43272) = 0u;
  *(_OWORD *)((char *)this + 43288) = 0u;
  *(_OWORD *)((char *)this + 43304) = 0u;
  *((_OWORD *)this + 2708) = 0u;
  *((_OWORD *)this + 2709) = 0u;
  *((_OWORD *)this + 2710) = 0u;
  *((_OWORD *)this + 2711) = 0u;
  *((_OWORD *)this + 2712) = 0u;
  *((_OWORD *)this + 2713) = 0u;
  *((_OWORD *)this + 2714) = 0u;
  *((_OWORD *)this + 2715) = 0u;
  *((_OWORD *)this + 2716) = 0u;
  *(_OWORD *)((char *)this + 43528) = 0u;
  *(_OWORD *)((char *)this + 43544) = 0u;
  *(_OWORD *)((char *)this + 43512) = 0u;
  *float v8 = 0;
  v8[185] = 0;
  v8[370] = 0;
  void *v7 = 0;
  v7[185] = 0;
  v7[370] = 0;
  v7[555] = 0;
  v7[740] = 0;
  v7[925] = 0;
  *(_OWORD *)((char *)this + 92248) = 0u;
  *(_OWORD *)((char *)this + 92264) = 0u;
  *(_OWORD *)((char *)this + 92280) = 0u;
  *(_OWORD *)((char *)this + 93112) = 0u;
  *(_OWORD *)((char *)this + 93128) = 0u;
  *(_OWORD *)((char *)this + 93144) = 0u;
  *(_OWORD *)((char *)this + 93160) = 0u;
  *(_OWORD *)((char *)this + 93176) = 0u;
  *(_OWORD *)((char *)this + 93192) = 0u;
  *(_OWORD *)((char *)this + 93208) = 0u;
  *(_OWORD *)((char *)this + 93224) = 0u;
  *(_OWORD *)((char *)this + 93240) = 0u;
  *(_OWORD *)((char *)this + 93256) = 0u;
  *(_OWORD *)((char *)this + 93272) = 0u;
  *(_OWORD *)((char *)this + 93288) = 0u;
  *(_OWORD *)((char *)this + 93304) = 0u;
  *(_OWORD *)((char *)this + 93320) = 0u;
  *(_OWORD *)((char *)this + 93336) = 0u;
  *(_OWORD *)((char *)this + 93352) = 0u;
  *(_OWORD *)((char *)this + 93368) = 0u;
  *(_OWORD *)((char *)this + 93384) = 0u;
  *(_OWORD *)((char *)this + 93400) = 0u;
  *(_OWORD *)((char *)this + 93416) = 0u;
  *(_OWORD *)((char *)this + 93432) = 0u;
  *(_OWORD *)((char *)this + 93448) = 0u;
  *(_OWORD *)((char *)this + 93464) = 0u;
  *(_OWORD *)((char *)this + 93480) = 0u;
  *(_OWORD *)((char *)this + 93496) = 0u;
  *(_OWORD *)((char *)this + 93512) = 0u;
  *(_OWORD *)((char *)this + 93528) = 0u;
  *(_WORD *)float v6 = 257;
  v6[2] = 0;
  *((void *)v6 + 1) = &unk_2707174A8;
  *((void *)v6 + 2) = 0;
  *((void *)v6 + 5) = 0;
  *((void *)v6 + 3) = 0;
  v6[32] = 0;
  *((void *)v6 + 12) = &unk_270717448;
  *((void *)v6 + 13) = 0;
  *((void *)v6 + 14) = 0;
  v6[120] = 0;
  *((void *)v6 + 16) = 0;
  *((void *)v6 + 17) = &unk_270717448;
  *((void *)v6 + 18) = 0;
  *((void *)v6 + 19) = 0;
  v6[160] = 0;
  *((void *)v6 + 21) = 0;
  *((void *)v6 + 22) = &unk_270717448;
  *((void *)v6 + 26) = 0;
  *((void *)v6 + 23) = 0;
  *((void *)v6 + 24) = 0;
  v6[200] = 0;
  *((void *)v6 + 28) = &unk_270717448;
  *((void *)v6 + 29) = 0;
  *((void *)v6 + 32) = 0;
  *((void *)v6 + 30) = 0;
  v6[248] = 0;
  *(void *)uint64_t v5 = &unk_270717448;
  *((void *)v5 + 4) = 0;
  *((void *)v6 + 34) = 0;
  *((void *)v6 + 35) = 0;
  v6[288] = 0;
  *((void *)v6 + 40) = 0;
  *((void *)v6 + 41) = 0;
  *((void *)v6 + 39) = 0;
  *((void *)v5 + 11) = 1;
  v5[96] = 0;
  *((void *)v5 + 13) = 0;
  *((void *)v5 + 9) = &unk_270717688;
  *((void *)v5 + 10) = 0;
  *((_OWORD *)v6 + 37) = 0u;
  *((_OWORD *)v6 + 38) = 0u;
  *((_OWORD *)v6 + 35) = 0u;
  *((_OWORD *)v6 + 36) = 0u;
  *((_OWORD *)v6 + 33) = 0u;
  *((_OWORD *)v6 + 34) = 0u;
  peridot::PeridotPreProcessOutput::PeridotPreProcessOutput((peridot::PeridotDXP *)((char *)this + 104320));
  *(_WORD *)BOOL v4 = 257;
  v4[2] = 0;
  *((void *)v4 + 17) = 0;
  *((void *)v4 + 18) = 0;
  *((void *)v4 + 16) = 0;
  *((_OWORD *)v4 + 11) = xmmword_259120590;
  *((void *)v4 + 24) = 0x3F00000041100000;
  *((void *)this + 14894) = 0;
  *((void *)this + 14895) = 0;
  *((void *)this + 14893) = 0;
  *(_OWORD *)((char *)this + 118888) = 0u;
  *(_OWORD *)((char *)this + 118904) = 0u;
  *(_OWORD *)((char *)this + 118920) = 0u;
  *(_OWORD *)((char *)this + 118936) = 0u;
  *(_OWORD *)((char *)this + 118952) = 0u;
  *(_OWORD *)((char *)this + 118968) = 0u;
  *(_OWORD *)((char *)this + 118984) = 0u;
  *(_OWORD *)((char *)this + 119000) = 0u;
  *(_OWORD *)((char *)this + 119016) = 0u;
  *((_OWORD *)this + 7444) = 0u;
  *((_OWORD *)this + 7445) = 0u;
  *((_OWORD *)this + 7442) = 0u;
  *((_OWORD *)this + 7443) = 0u;
  *((_OWORD *)this + 7440) = 0u;
  *((_OWORD *)this + 7441) = 0u;
  *((_OWORD *)this + 7724) = 0u;
  *((_OWORD *)this + 7725) = 0u;
  *((_OWORD *)this + 7726) = 0u;
  *((_OWORD *)this + 7727) = 0u;
  *((void *)this + 15456) = 0;
  *(_OWORD *)((char *)this + 150152) = 0u;
  *(_OWORD *)((char *)this + 150168) = 0u;
  *(_OWORD *)((char *)this + 150184) = 0u;
  *(_OWORD *)((char *)this + 150200) = 0u;
  *(_OWORD *)((char *)this + 150216) = 0u;
  *(_OWORD *)((char *)this + 150232) = 0u;
  *(_OWORD *)((char *)this + 150248) = 0u;
  *(_OWORD *)((char *)this + 150264) = 0u;
  *(_OWORD *)((char *)this + 150280) = 0u;
  *(_OWORD *)unint64_t v3 = xmmword_259120590;
  *((void *)v3 + 2) = 0x3F00000041100000;
  *((void *)v3 + 36) = 0;
  *((void *)v3 + 37) = 0;
  *((void *)v3 + 35) = 0;
  *(_OWORD *)(v3 + 152) = 0u;
  *(_OWORD *)(v3 + 136) = 0u;
  *(_OWORD *)(v3 + 120) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 24) = 0u;
  *((_OWORD *)v3 + 15) = 0u;
  *((_OWORD *)v3 + 16) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((void *)v3 + 598) = 0;
  *((_OWORD *)v3 + 298) = 0u;
  *((_OWORD *)v3 + 297) = 0u;
  *((_OWORD *)v3 + 296) = 0u;
  *((_OWORD *)v3 + 295) = 0u;
  *((_OWORD *)this + 11357) = 0u;
  *((_OWORD *)this + 11358) = 0u;
  *((_OWORD *)this + 11355) = 0u;
  *((_OWORD *)this + 11356) = 0u;
  *((_OWORD *)this + 11353) = 0u;
  *((_OWORD *)this + 11354) = 0u;
  *((_OWORD *)this + 11351) = 0u;
  *((_OWORD *)this + 11352) = 0u;
  *((_OWORD *)this + 11350) = 0u;
  *(_OWORD *)uint64_t v2 = xmmword_2591205A0;
  *((_DWORD *)v2 + 4) = 1092616192;
  *((void *)v2 + 6) = 0;
  v2[56] = 1;
  *(_OWORD *)((char *)this + 181992) = 0u;
  *(_OWORD *)((char *)this + 182008) = 0u;
  *(_OWORD *)((char *)this + 181960) = 0u;
  *(_OWORD *)((char *)this + 181976) = 0u;
  *(_OWORD *)((char *)this + 181928) = 0u;
  *(_OWORD *)((char *)this + 181944) = 0u;
  *(_OWORD *)((char *)this + 181896) = 0u;
  *(_OWORD *)((char *)this + 181912) = 0u;
  *(_OWORD *)((char *)this + 181864) = 0u;
  *(_OWORD *)((char *)this + 181880) = 0u;
  *(_OWORD *)((char *)this + 181832) = 0u;
  *(_OWORD *)((char *)this + 181848) = 0u;
  return this;
}

double peridot::PeridotPreProcessOutput::PeridotPreProcessOutput(peridot::PeridotPreProcessOutput *this)
{
  double result = 0.0;
  *((_OWORD *)this + 10) = 0u;
  *((_OWORD *)this + 11) = 0u;
  *((_OWORD *)this + 8) = 0u;
  *((_OWORD *)this + 9) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *((_OWORD *)this + 35) = 0u;
  *((_OWORD *)this + 36) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 27) = 0u;
  *((_OWORD *)this + 28) = 0u;
  *((_OWORD *)this + 25) = 0u;
  *((_OWORD *)this + 26) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *(_OWORD *)((char *)this + 760) = 0u;
  *(_OWORD *)((char *)this + 776) = 0u;
  *((_OWORD *)this + 60) = 0u;
  *((_OWORD *)this + 61) = 0u;
  *((_OWORD *)this + 58) = 0u;
  *((_OWORD *)this + 59) = 0u;
  *((_OWORD *)this + 56) = 0u;
  *((_OWORD *)this + 57) = 0u;
  *((_OWORD *)this + 54) = 0u;
  *((_OWORD *)this + 55) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 53) = 0u;
  *((_OWORD *)this + 50) = 0u;
  *((_OWORD *)this + 51) = 0u;
  *((unsigned char *)this + 1000) = 0;
  *(_OWORD *)((char *)this + 1240) = 0u;
  *(_OWORD *)((char *)this + 1256) = 0u;
  *(_OWORD *)((char *)this + 1272) = 0u;
  *(_OWORD *)((char *)this + 1224) = 0u;
  *(_OWORD *)((char *)this + 1288) = 0u;
  *(_OWORD *)((char *)this + 1304) = 0u;
  *(_OWORD *)((char *)this + 1320) = 0u;
  *(_OWORD *)((char *)this + 1336) = 0u;
  *(_OWORD *)((char *)this + 1352) = 0u;
  *(_OWORD *)((char *)this + 1368) = 0u;
  *(_OWORD *)((char *)this + 1384) = 0u;
  *(_OWORD *)((char *)this + 1400) = 0u;
  *((_OWORD *)this + 100) = 0u;
  *((_OWORD *)this + 99) = 0u;
  *((_OWORD *)this + 98) = 0u;
  *((_OWORD *)this + 97) = 0u;
  *((_OWORD *)this + 96) = 0u;
  *((_OWORD *)this + 95) = 0u;
  *((_OWORD *)this + 94) = 0u;
  *((_OWORD *)this + 93) = 0u;
  *((_OWORD *)this + 92) = 0u;
  *((_OWORD *)this + 91) = 0u;
  *((_OWORD *)this + 90) = 0u;
  *((_OWORD *)this + 89) = 0u;
  *(_OWORD *)((char *)this + 1784) = 0u;
  *(_OWORD *)((char *)this + 1800) = 0u;
  *(_OWORD *)((char *)this + 1752) = 0u;
  *(_OWORD *)((char *)this + 1768) = 0u;
  *(_OWORD *)((char *)this + 1720) = 0u;
  *(_OWORD *)((char *)this + 1736) = 0u;
  *(_OWORD *)((char *)this + 1688) = 0u;
  *(_OWORD *)((char *)this + 1704) = 0u;
  *(_OWORD *)((char *)this + 1656) = 0u;
  *(_OWORD *)((char *)this + 1672) = 0u;
  *(_OWORD *)((char *)this + 1624) = 0u;
  *(_OWORD *)((char *)this + 1640) = 0u;
  *((_OWORD *)this + 125) = 0u;
  *((_OWORD *)this + 124) = 0u;
  *((_OWORD *)this + 123) = 0u;
  *((_OWORD *)this + 122) = 0u;
  *((_OWORD *)this + 121) = 0u;
  *((_OWORD *)this + 120) = 0u;
  *((_OWORD *)this + 119) = 0u;
  *((_OWORD *)this + 118) = 0u;
  *((_OWORD *)this + 117) = 0u;
  *((_OWORD *)this + 116) = 0u;
  *((_OWORD *)this + 115) = 0u;
  *((_OWORD *)this + 114) = 0u;
  *((unsigned char *)this + 2024) = 0;
  *(_OWORD *)((char *)this + 2296) = 0u;
  *(_OWORD *)((char *)this + 2280) = 0u;
  *(_OWORD *)((char *)this + 2264) = 0u;
  *(_OWORD *)((char *)this + 2248) = 0u;
  *(_OWORD *)((char *)this + 2408) = 0u;
  *(_OWORD *)((char *)this + 2424) = 0u;
  *(_OWORD *)((char *)this + 2376) = 0u;
  *(_OWORD *)((char *)this + 2392) = 0u;
  *(_OWORD *)((char *)this + 2344) = 0u;
  *(_OWORD *)((char *)this + 2360) = 0u;
  *(_OWORD *)((char *)this + 2312) = 0u;
  *(_OWORD *)((char *)this + 2328) = 0u;
  *((_OWORD *)this + 164) = 0u;
  *((_OWORD *)this + 163) = 0u;
  *((_OWORD *)this + 162) = 0u;
  *((_OWORD *)this + 161) = 0u;
  *((_OWORD *)this + 160) = 0u;
  *((_OWORD *)this + 159) = 0u;
  *((_OWORD *)this + 158) = 0u;
  *((_OWORD *)this + 157) = 0u;
  *((_OWORD *)this + 156) = 0u;
  *((_OWORD *)this + 155) = 0u;
  *((_OWORD *)this + 154) = 0u;
  *((_OWORD *)this + 153) = 0u;
  *(_OWORD *)((char *)this + 2808) = 0u;
  *(_OWORD *)((char *)this + 2824) = 0u;
  *(_OWORD *)((char *)this + 2776) = 0u;
  *(_OWORD *)((char *)this + 2792) = 0u;
  *(_OWORD *)((char *)this + 2744) = 0u;
  *(_OWORD *)((char *)this + 2760) = 0u;
  *(_OWORD *)((char *)this + 2712) = 0u;
  *(_OWORD *)((char *)this + 2728) = 0u;
  *(_OWORD *)((char *)this + 2680) = 0u;
  *(_OWORD *)((char *)this + 2696) = 0u;
  *(_OWORD *)((char *)this + 2648) = 0u;
  *(_OWORD *)((char *)this + 2664) = 0u;
  *((_OWORD *)this + 189) = 0u;
  *((_OWORD *)this + 188) = 0u;
  *((_OWORD *)this + 187) = 0u;
  *((_OWORD *)this + 186) = 0u;
  *((_OWORD *)this + 185) = 0u;
  *((_OWORD *)this + 184) = 0u;
  *((_OWORD *)this + 183) = 0u;
  *((_OWORD *)this + 182) = 0u;
  *((_OWORD *)this + 181) = 0u;
  *((_OWORD *)this + 180) = 0u;
  *((_OWORD *)this + 179) = 0u;
  *((_OWORD *)this + 178) = 0u;
  *((unsigned char *)this + 3048) = 0;
  *(_OWORD *)((char *)this + 3320) = 0u;
  *(_OWORD *)((char *)this + 3304) = 0u;
  *(_OWORD *)((char *)this + 3288) = 0u;
  *(_OWORD *)((char *)this + 3272) = 0u;
  *(_OWORD *)((char *)this + 3432) = 0u;
  *(_OWORD *)((char *)this + 3448) = 0u;
  *(_OWORD *)((char *)this + 3400) = 0u;
  *(_OWORD *)((char *)this + 3416) = 0u;
  *(_OWORD *)((char *)this + 3368) = 0u;
  *(_OWORD *)((char *)this + 3384) = 0u;
  *(_OWORD *)((char *)this + 3336) = 0u;
  *(_OWORD *)((char *)this + 3352) = 0u;
  *((_OWORD *)this + 228) = 0u;
  *((_OWORD *)this + 227) = 0u;
  *((_OWORD *)this + 226) = 0u;
  *((_OWORD *)this + 225) = 0u;
  *((_OWORD *)this + 224) = 0u;
  *((_OWORD *)this + 223) = 0u;
  *((_OWORD *)this + 222) = 0u;
  *((_OWORD *)this + 221) = 0u;
  *((_OWORD *)this + 220) = 0u;
  *((_OWORD *)this + 219) = 0u;
  *((_OWORD *)this + 218) = 0u;
  *((_OWORD *)this + 217) = 0u;
  *(_OWORD *)((char *)this + 3832) = 0u;
  *(_OWORD *)((char *)this + 3848) = 0u;
  *(_OWORD *)((char *)this + 3800) = 0u;
  *(_OWORD *)((char *)this + 3816) = 0u;
  *(_OWORD *)((char *)this + 3768) = 0u;
  *(_OWORD *)((char *)this + 3784) = 0u;
  *(_OWORD *)((char *)this + 3736) = 0u;
  *(_OWORD *)((char *)this + 3752) = 0u;
  *(_OWORD *)((char *)this + 3704) = 0u;
  *(_OWORD *)((char *)this + 3720) = 0u;
  *(_OWORD *)((char *)this + 3672) = 0u;
  *(_OWORD *)((char *)this + 3688) = 0u;
  *((_OWORD *)this + 253) = 0u;
  *((_OWORD *)this + 252) = 0u;
  *((_OWORD *)this + 251) = 0u;
  *((_OWORD *)this + 250) = 0u;
  *((_OWORD *)this + 249) = 0u;
  *((_OWORD *)this + 248) = 0u;
  *((_OWORD *)this + 247) = 0u;
  *((_OWORD *)this + 246) = 0u;
  *((_OWORD *)this + 245) = 0u;
  *((_OWORD *)this + 244) = 0u;
  *((_OWORD *)this + 243) = 0u;
  *((_OWORD *)this + 242) = 0u;
  *((unsigned char *)this + 4072) = 0;
  *(_OWORD *)((char *)this + 4344) = 0u;
  *(_OWORD *)((char *)this + 4328) = 0u;
  *(_OWORD *)((char *)this + 4312) = 0u;
  *(_OWORD *)((char *)this + 4296) = 0u;
  *(_OWORD *)((char *)this + 4456) = 0u;
  *(_OWORD *)((char *)this + 4472) = 0u;
  *(_OWORD *)((char *)this + 4424) = 0u;
  *(_OWORD *)((char *)this + 4440) = 0u;
  *(_OWORD *)((char *)this + 4392) = 0u;
  *(_OWORD *)((char *)this + 4408) = 0u;
  *(_OWORD *)((char *)this + 4360) = 0u;
  *(_OWORD *)((char *)this + 4376) = 0u;
  *((_OWORD *)this + 292) = 0u;
  *((_OWORD *)this + 291) = 0u;
  *((_OWORD *)this + 290) = 0u;
  *((_OWORD *)this + 289) = 0u;
  *((_OWORD *)this + 288) = 0u;
  *((_OWORD *)this + 287) = 0u;
  *((_OWORD *)this + 286) = 0u;
  *((_OWORD *)this + 285) = 0u;
  *((_OWORD *)this + 284) = 0u;
  *((_OWORD *)this + 283) = 0u;
  *((_OWORD *)this + 282) = 0u;
  *((_OWORD *)this + 281) = 0u;
  *(_OWORD *)((char *)this + 4856) = 0u;
  *(_OWORD *)((char *)this + 4872) = 0u;
  *(_OWORD *)((char *)this + 4824) = 0u;
  *(_OWORD *)((char *)this + 4840) = 0u;
  *(_OWORD *)((char *)this + 4792) = 0u;
  *(_OWORD *)((char *)this + 4808) = 0u;
  *(_OWORD *)((char *)this + 4760) = 0u;
  *(_OWORD *)((char *)this + 4776) = 0u;
  *(_OWORD *)((char *)this + 4728) = 0u;
  *(_OWORD *)((char *)this + 4744) = 0u;
  *(_OWORD *)((char *)this + 4696) = 0u;
  *(_OWORD *)((char *)this + 4712) = 0u;
  *((_OWORD *)this + 317) = 0u;
  *((_OWORD *)this + 316) = 0u;
  *((_OWORD *)this + 315) = 0u;
  *((_OWORD *)this + 314) = 0u;
  *((_OWORD *)this + 313) = 0u;
  *((_OWORD *)this + 312) = 0u;
  *((_OWORD *)this + 311) = 0u;
  *((_OWORD *)this + 310) = 0u;
  *((_OWORD *)this + 309) = 0u;
  *((_OWORD *)this + 308) = 0u;
  *((_OWORD *)this + 307) = 0u;
  *((_OWORD *)this + 306) = 0u;
  *((unsigned char *)this + 5096) = 0;
  *(_OWORD *)((char *)this + 5368) = 0u;
  *(_OWORD *)((char *)this + 5352) = 0u;
  *(_OWORD *)((char *)this + 5336) = 0u;
  *(_OWORD *)((char *)this + 5320) = 0u;
  *(_OWORD *)((char *)this + 5480) = 0u;
  *(_OWORD *)((char *)this + 5496) = 0u;
  *(_OWORD *)((char *)this + 5448) = 0u;
  *(_OWORD *)((char *)this + 5464) = 0u;
  *(_OWORD *)((char *)this + 5416) = 0u;
  *(_OWORD *)((char *)this + 5432) = 0u;
  *(_OWORD *)((char *)this + 5384) = 0u;
  *(_OWORD *)((char *)this + 5400) = 0u;
  *((_OWORD *)this + 356) = 0u;
  *((_OWORD *)this + 355) = 0u;
  *(_OWORD *)((char *)this + 6392) = 0u;
  *(_OWORD *)((char *)this + 6376) = 0u;
  *(_OWORD *)((char *)this + 6360) = 0u;
  *(_OWORD *)((char *)this + 6344) = 0u;
  *(_OWORD *)((char *)this + 7416) = 0u;
  *(_OWORD *)((char *)this + 7400) = 0u;
  *(_OWORD *)((char *)this + 7384) = 0u;
  *(_OWORD *)((char *)this + 7368) = 0u;
  *((unsigned char *)this + 9192) = 0;
  *((unsigned char *)this + 10216) = 0;
  *((unsigned char *)this + 11240) = 0;
  *((unsigned char *)this + 12264) = 0;
  *(_OWORD *)((char *)this + 12536) = 0u;
  *(_OWORD *)((char *)this + 12520) = 0u;
  *(_OWORD *)((char *)this + 12504) = 0u;
  *(_OWORD *)((char *)this + 12488) = 0u;
  *(_OWORD *)((char *)this + 12600) = 0u;
  *(_OWORD *)((char *)this + 12616) = 0u;
  *(_OWORD *)((char *)this + 11864) = 0u;
  *(_OWORD *)((char *)this + 11880) = 0u;
  *((_OWORD *)this + 754) = 0u;
  *(_OWORD *)((char *)this + 12648) = 0u;
  *(_OWORD *)((char *)this + 12664) = 0u;
  *(_OWORD *)((char *)this + 12632) = 0u;
  *((_OWORD *)this + 760) = 0u;
  *((_OWORD *)this + 759) = 0u;
  *((_OWORD *)this + 758) = 0u;
  *((_OWORD *)this + 757) = 0u;
  *((_OWORD *)this + 756) = 0u;
  *((_OWORD *)this + 755) = 0u;
  *((_OWORD *)this + 765) = 0u;
  *((_OWORD *)this + 764) = 0u;
  *((_OWORD *)this + 763) = 0u;
  *((_OWORD *)this + 762) = 0u;
  *((_OWORD *)this + 761) = 0u;
  *(_OWORD *)((char *)this + 12024) = 0u;
  *(_OWORD *)((char *)this + 12040) = 0u;
  *(_OWORD *)((char *)this + 11928) = 0u;
  *(_OWORD *)((char *)this + 11944) = 0u;
  *(_OWORD *)((char *)this + 11896) = 0u;
  *(_OWORD *)((char *)this + 11912) = 0u;
  *(_OWORD *)((char *)this + 11992) = 0u;
  *(_OWORD *)((char *)this + 12008) = 0u;
  *(_OWORD *)((char *)this + 11960) = 0u;
  *(_OWORD *)((char *)this + 11976) = 0u;
  *(_OWORD *)((char *)this + 11512) = 0u;
  *((_OWORD *)this + 354) = 0u;
  *(_OWORD *)((char *)this + 11496) = 0u;
  *(_OWORD *)((char *)this + 11480) = 0u;
  *(_OWORD *)((char *)this + 11464) = 0u;
  *((_OWORD *)this + 729) = 0u;
  *((_OWORD *)this + 740) = 0u;
  *((_OWORD *)this + 734) = 0u;
  *((_OWORD *)this + 733) = 0u;
  *((_OWORD *)this + 732) = 0u;
  *((_OWORD *)this + 731) = 0u;
  *((_OWORD *)this + 730) = 0u;
  *((_OWORD *)this + 739) = 0u;
  *((_OWORD *)this + 738) = 0u;
  *((_OWORD *)this + 737) = 0u;
  *((_OWORD *)this + 736) = 0u;
  *((_OWORD *)this + 735) = 0u;
  *(_OWORD *)((char *)this + 11624) = 0u;
  *(_OWORD *)((char *)this + 11640) = 0u;
  *(_OWORD *)((char *)this + 11560) = 0u;
  *(_OWORD *)((char *)this + 11576) = 0u;
  *(_OWORD *)((char *)this + 11528) = 0u;
  *(_OWORD *)((char *)this + 11544) = 0u;
  *(_OWORD *)((char *)this + 11592) = 0u;
  *(_OWORD *)((char *)this + 11608) = 0u;
  *(_OWORD *)((char *)this + 10840) = 0u;
  *(_OWORD *)((char *)this + 10856) = 0u;
  *((_OWORD *)this + 690) = 0u;
  *((_OWORD *)this + 696) = 0u;
  *((_OWORD *)this + 695) = 0u;
  *((_OWORD *)this + 694) = 0u;
  *((_OWORD *)this + 693) = 0u;
  *((_OWORD *)this + 692) = 0u;
  *((_OWORD *)this + 691) = 0u;
  *((_OWORD *)this + 701) = 0u;
  *((_OWORD *)this + 700) = 0u;
  *((_OWORD *)this + 699) = 0u;
  *((_OWORD *)this + 698) = 0u;
  *((_OWORD *)this + 697) = 0u;
  *(_OWORD *)((char *)this + 11000) = 0u;
  *(_OWORD *)((char *)this + 11016) = 0u;
  *(_OWORD *)((char *)this + 10904) = 0u;
  *(_OWORD *)((char *)this + 10920) = 0u;
  *(_OWORD *)((char *)this + 10872) = 0u;
  *(_OWORD *)((char *)this + 10888) = 0u;
  *(_OWORD *)((char *)this + 10968) = 0u;
  *(_OWORD *)((char *)this + 10984) = 0u;
  *(_OWORD *)((char *)this + 10936) = 0u;
  *(_OWORD *)((char *)this + 10952) = 0u;
  *(_OWORD *)((char *)this + 10488) = 0u;
  *((_OWORD *)this + 353) = 0u;
  *(_OWORD *)((char *)this + 10472) = 0u;
  *(_OWORD *)((char *)this + 10456) = 0u;
  *(_OWORD *)((char *)this + 10440) = 0u;
  *((_OWORD *)this + 665) = 0u;
  *((_OWORD *)this + 676) = 0u;
  *((_OWORD *)this + 670) = 0u;
  *((_OWORD *)this + 669) = 0u;
  *((_OWORD *)this + 668) = 0u;
  *((_OWORD *)this + 667) = 0u;
  *((_OWORD *)this + 666) = 0u;
  *((_OWORD *)this + 675) = 0u;
  *((_OWORD *)this + 674) = 0u;
  *((_OWORD *)this + 673) = 0u;
  *((_OWORD *)this + 672) = 0u;
  *((_OWORD *)this + 671) = 0u;
  *(_OWORD *)((char *)this + 10600) = 0u;
  *(_OWORD *)((char *)this + 10616) = 0u;
  *(_OWORD *)((char *)this + 10536) = 0u;
  *(_OWORD *)((char *)this + 10552) = 0u;
  *(_OWORD *)((char *)this + 10504) = 0u;
  *(_OWORD *)((char *)this + 10520) = 0u;
  *(_OWORD *)((char *)this + 10568) = 0u;
  *(_OWORD *)((char *)this + 10584) = 0u;
  *(_OWORD *)((char *)this + 9816) = 0u;
  *(_OWORD *)((char *)this + 9832) = 0u;
  *((_OWORD *)this + 626) = 0u;
  *((_OWORD *)this + 632) = 0u;
  *((_OWORD *)this + 631) = 0u;
  *((_OWORD *)this + 630) = 0u;
  *((_OWORD *)this + 629) = 0u;
  *((_OWORD *)this + 628) = 0u;
  *((_OWORD *)this + 627) = 0u;
  *((_OWORD *)this + 637) = 0u;
  *((_OWORD *)this + 636) = 0u;
  *((_OWORD *)this + 635) = 0u;
  *((_OWORD *)this + 634) = 0u;
  *((_OWORD *)this + 633) = 0u;
  *(_OWORD *)((char *)this + 9976) = 0u;
  *(_OWORD *)((char *)this + 9992) = 0u;
  *(_OWORD *)((char *)this + 9880) = 0u;
  *(_OWORD *)((char *)this + 9896) = 0u;
  *(_OWORD *)((char *)this + 9848) = 0u;
  *(_OWORD *)((char *)this + 9864) = 0u;
  *(_OWORD *)((char *)this + 9944) = 0u;
  *(_OWORD *)((char *)this + 9960) = 0u;
  *(_OWORD *)((char *)this + 9912) = 0u;
  *(_OWORD *)((char *)this + 9928) = 0u;
  *(_OWORD *)((char *)this + 9464) = 0u;
  *((_OWORD *)this + 352) = 0u;
  *(_OWORD *)((char *)this + 9448) = 0u;
  *(_OWORD *)((char *)this + 9432) = 0u;
  *(_OWORD *)((char *)this + 9416) = 0u;
  *((_OWORD *)this + 601) = 0u;
  *((_OWORD *)this + 607) = 0u;
  *((_OWORD *)this + 606) = 0u;
  *((_OWORD *)this + 605) = 0u;
  *((_OWORD *)this + 604) = 0u;
  *((_OWORD *)this + 603) = 0u;
  *((_OWORD *)this + 602) = 0u;
  *((_OWORD *)this + 351) = 0u;
  *((_OWORD *)this + 612) = 0u;
  *((_OWORD *)this + 611) = 0u;
  *((_OWORD *)this + 610) = 0u;
  *((_OWORD *)this + 609) = 0u;
  *((_OWORD *)this + 608) = 0u;
  *(_OWORD *)((char *)this + 9544) = 0u;
  *(_OWORD *)((char *)this + 9560) = 0u;
  *(_OWORD *)((char *)this + 9512) = 0u;
  *(_OWORD *)((char *)this + 9528) = 0u;
  *(_OWORD *)((char *)this + 9480) = 0u;
  *(_OWORD *)((char *)this + 9496) = 0u;
  *(_OWORD *)((char *)this + 9576) = 0u;
  *(_OWORD *)((char *)this + 9592) = 0u;
  *((_OWORD *)this + 568) = 0u;
  *((_OWORD *)this + 562) = 0u;
  *((_OWORD *)this + 567) = 0u;
  *((_OWORD *)this + 566) = 0u;
  *((_OWORD *)this + 565) = 0u;
  *((_OWORD *)this + 564) = 0u;
  *((_OWORD *)this + 563) = 0u;
  *(_OWORD *)((char *)this + 8792) = 0u;
  *(_OWORD *)((char *)this + 8808) = 0u;
  *((_OWORD *)this + 573) = 0u;
  *((_OWORD *)this + 572) = 0u;
  *((_OWORD *)this + 571) = 0u;
  *((_OWORD *)this + 570) = 0u;
  *((_OWORD *)this + 569) = 0u;
  *(_OWORD *)((char *)this + 8952) = 0u;
  *(_OWORD *)((char *)this + 8968) = 0u;
  *(_OWORD *)((char *)this + 8856) = 0u;
  *(_OWORD *)((char *)this + 8872) = 0u;
  *(_OWORD *)((char *)this + 8824) = 0u;
  *(_OWORD *)((char *)this + 8840) = 0u;
  *(_OWORD *)((char *)this + 8920) = 0u;
  *(_OWORD *)((char *)this + 8936) = 0u;
  *(_OWORD *)((char *)this + 8888) = 0u;
  *(_OWORD *)((char *)this + 8904) = 0u;
  *(_OWORD *)((char *)this + 8440) = 0u;
  *(_OWORD *)((char *)this + 8424) = 0u;
  *(_OWORD *)((char *)this + 8408) = 0u;
  *(_OWORD *)((char *)this + 8392) = 0u;
  *((_OWORD *)this + 543) = 0u;
  *((_OWORD *)this + 537) = 0u;
  *((_OWORD *)this + 542) = 0u;
  *((_OWORD *)this + 541) = 0u;
  *((_OWORD *)this + 540) = 0u;
  *((_OWORD *)this + 539) = 0u;
  *((_OWORD *)this + 538) = 0u;
  *(_OWORD *)((char *)this + 8456) = 0u;
  *(_OWORD *)((char *)this + 8472) = 0u;
  *((_OWORD *)this + 548) = 0u;
  *((_OWORD *)this + 547) = 0u;
  *((_OWORD *)this + 546) = 0u;
  *((_OWORD *)this + 545) = 0u;
  *((_OWORD *)this + 544) = 0u;
  *(_OWORD *)((char *)this + 8552) = 0u;
  *(_OWORD *)((char *)this + 8568) = 0u;
  *(_OWORD *)((char *)this + 8520) = 0u;
  *(_OWORD *)((char *)this + 8536) = 0u;
  *(_OWORD *)((char *)this + 8488) = 0u;
  *(_OWORD *)((char *)this + 8504) = 0u;
  *((_OWORD *)this + 350) = 0u;
  *((_OWORD *)this + 500) = 0u;
  *((_OWORD *)this + 499) = 0u;
  *((_OWORD *)this + 498) = 0u;
  *((unsigned char *)this + 8168) = 0;
  *((_OWORD *)this + 505) = 0u;
  *((_OWORD *)this + 504) = 0u;
  *((_OWORD *)this + 503) = 0u;
  *((_OWORD *)this + 502) = 0u;
  *((_OWORD *)this + 501) = 0u;
  *(_OWORD *)((char *)this + 7768) = 0u;
  *(_OWORD *)((char *)this + 7784) = 0u;
  *((_OWORD *)this + 509) = 0u;
  *((_OWORD *)this + 508) = 0u;
  *((_OWORD *)this + 507) = 0u;
  *((_OWORD *)this + 506) = 0u;
  *(_OWORD *)((char *)this + 7864) = 0u;
  *(_OWORD *)((char *)this + 7880) = 0u;
  *(_OWORD *)((char *)this + 7832) = 0u;
  *(_OWORD *)((char *)this + 7848) = 0u;
  *(_OWORD *)((char *)this + 7800) = 0u;
  *(_OWORD *)((char *)this + 7816) = 0u;
  *((_OWORD *)this + 479) = 0u;
  *((_OWORD *)this + 473) = 0u;
  *(_OWORD *)((char *)this + 7928) = 0u;
  *(_OWORD *)((char *)this + 7944) = 0u;
  *(_OWORD *)((char *)this + 7896) = 0u;
  *(_OWORD *)((char *)this + 7912) = 0u;
  *((_OWORD *)this + 478) = 0u;
  *((_OWORD *)this + 477) = 0u;
  *((_OWORD *)this + 476) = 0u;
  *((_OWORD *)this + 475) = 0u;
  *((_OWORD *)this + 474) = 0u;
  *(_OWORD *)((char *)this + 7432) = 0u;
  *(_OWORD *)((char *)this + 7448) = 0u;
  *((_OWORD *)this + 484) = 0u;
  *((_OWORD *)this + 483) = 0u;
  *((_OWORD *)this + 482) = 0u;
  *((_OWORD *)this + 481) = 0u;
  *((_OWORD *)this + 480) = 0u;
  *(_OWORD *)((char *)this + 7528) = 0u;
  *(_OWORD *)((char *)this + 7544) = 0u;
  *(_OWORD *)((char *)this + 7496) = 0u;
  *(_OWORD *)((char *)this + 7512) = 0u;
  *(_OWORD *)((char *)this + 7464) = 0u;
  *(_OWORD *)((char *)this + 7480) = 0u;
  *((_OWORD *)this + 349) = 0u;
  *((_OWORD *)this + 436) = 0u;
  *((_OWORD *)this + 435) = 0u;
  *((_OWORD *)this + 434) = 0u;
  *((unsigned char *)this + 7144) = 0;
  *((_OWORD *)this + 441) = 0u;
  *((_OWORD *)this + 440) = 0u;
  *((_OWORD *)this + 439) = 0u;
  *((_OWORD *)this + 438) = 0u;
  *((_OWORD *)this + 437) = 0u;
  *(_OWORD *)((char *)this + 6744) = 0u;
  *(_OWORD *)((char *)this + 6760) = 0u;
  *((_OWORD *)this + 445) = 0u;
  *((_OWORD *)this + 444) = 0u;
  *((_OWORD *)this + 443) = 0u;
  *((_OWORD *)this + 442) = 0u;
  *(_OWORD *)((char *)this + 6840) = 0u;
  *(_OWORD *)((char *)this + 6856) = 0u;
  *(_OWORD *)((char *)this + 6808) = 0u;
  *(_OWORD *)((char *)this + 6824) = 0u;
  *(_OWORD *)((char *)this + 6776) = 0u;
  *(_OWORD *)((char *)this + 6792) = 0u;
  *((_OWORD *)this + 415) = 0u;
  *((_OWORD *)this + 409) = 0u;
  *(_OWORD *)((char *)this + 6904) = 0u;
  *(_OWORD *)((char *)this + 6920) = 0u;
  *(_OWORD *)((char *)this + 6872) = 0u;
  *(_OWORD *)((char *)this + 6888) = 0u;
  *((_OWORD *)this + 414) = 0u;
  *((_OWORD *)this + 413) = 0u;
  *((_OWORD *)this + 412) = 0u;
  *((_OWORD *)this + 411) = 0u;
  *((_OWORD *)this + 410) = 0u;
  *(_OWORD *)((char *)this + 6408) = 0u;
  *(_OWORD *)((char *)this + 6424) = 0u;
  *((_OWORD *)this + 420) = 0u;
  *((_OWORD *)this + 419) = 0u;
  *((_OWORD *)this + 418) = 0u;
  *((_OWORD *)this + 417) = 0u;
  *((_OWORD *)this + 416) = 0u;
  *(_OWORD *)((char *)this + 6504) = 0u;
  *(_OWORD *)((char *)this + 6520) = 0u;
  *(_OWORD *)((char *)this + 6472) = 0u;
  *(_OWORD *)((char *)this + 6488) = 0u;
  *(_OWORD *)((char *)this + 6440) = 0u;
  *(_OWORD *)((char *)this + 6456) = 0u;
  *((_OWORD *)this + 348) = 0u;
  *((_OWORD *)this + 372) = 0u;
  *((_OWORD *)this + 371) = 0u;
  *((_OWORD *)this + 370) = 0u;
  *((unsigned char *)this + 6120) = 0;
  *((_OWORD *)this + 377) = 0u;
  *((_OWORD *)this + 376) = 0u;
  *((_OWORD *)this + 375) = 0u;
  *((_OWORD *)this + 374) = 0u;
  *((_OWORD *)this + 373) = 0u;
  *(_OWORD *)((char *)this + 5720) = 0u;
  *(_OWORD *)((char *)this + 5736) = 0u;
  *((_OWORD *)this + 381) = 0u;
  *((_OWORD *)this + 380) = 0u;
  *((_OWORD *)this + 379) = 0u;
  *((_OWORD *)this + 378) = 0u;
  *(_OWORD *)((char *)this + 5816) = 0u;
  *(_OWORD *)((char *)this + 5832) = 0u;
  *(_OWORD *)((char *)this + 5784) = 0u;
  *(_OWORD *)((char *)this + 5800) = 0u;
  *(_OWORD *)((char *)this + 5752) = 0u;
  *(_OWORD *)((char *)this + 5768) = 0u;
  *((_OWORD *)this + 346) = 0u;
  *((_OWORD *)this + 345) = 0u;
  *(_OWORD *)((char *)this + 5880) = 0u;
  *(_OWORD *)((char *)this + 5896) = 0u;
  *(_OWORD *)((char *)this + 5848) = 0u;
  *(_OWORD *)((char *)this + 5864) = 0u;
  *((_OWORD *)this + 347) = 0u;
  *((_OWORD *)this + 804) = 0u;
  *((_OWORD *)this + 803) = 0u;
  *((_OWORD *)this + 802) = 0u;
  *((_OWORD *)this + 801) = 0u;
  *((_OWORD *)this + 800) = 0u;
  *((_OWORD *)this + 799) = 0u;
  *((_OWORD *)this + 798) = 0u;
  *((_OWORD *)this + 797) = 0u;
  *((_OWORD *)this + 796) = 0u;
  *((_OWORD *)this + 795) = 0u;
  *((_OWORD *)this + 794) = 0u;
  *((_OWORD *)this + 793) = 0u;
  *((_OWORD *)this + 829) = 0u;
  *((_OWORD *)this + 828) = 0u;
  *((_OWORD *)this + 827) = 0u;
  *((_OWORD *)this + 826) = 0u;
  *((_OWORD *)this + 825) = 0u;
  *((_OWORD *)this + 824) = 0u;
  *((_OWORD *)this + 823) = 0u;
  *((_OWORD *)this + 822) = 0u;
  *((_OWORD *)this + 821) = 0u;
  *((_OWORD *)this + 820) = 0u;
  *((_OWORD *)this + 819) = 0u;
  *((_OWORD *)this + 818) = 0u;
  *((_OWORD *)this + 868) = 0u;
  *((_OWORD *)this + 867) = 0u;
  *((_OWORD *)this + 866) = 0u;
  *((_OWORD *)this + 865) = 0u;
  *((_OWORD *)this + 864) = 0u;
  *((_OWORD *)this + 863) = 0u;
  *((_OWORD *)this + 862) = 0u;
  *((_OWORD *)this + 861) = 0u;
  *((_OWORD *)this + 860) = 0u;
  *((_OWORD *)this + 859) = 0u;
  *((_OWORD *)this + 858) = 0u;
  *((_OWORD *)this + 857) = 0u;
  *((_OWORD *)this + 893) = 0u;
  *((_OWORD *)this + 892) = 0u;
  *((_OWORD *)this + 891) = 0u;
  *((_OWORD *)this + 890) = 0u;
  *((_OWORD *)this + 889) = 0u;
  *((_OWORD *)this + 888) = 0u;
  *((_OWORD *)this + 887) = 0u;
  *((_OWORD *)this + 886) = 0u;
  *((_OWORD *)this + 885) = 0u;
  *((_OWORD *)this + 884) = 0u;
  *((_OWORD *)this + 883) = 0u;
  *((_OWORD *)this + 882) = 0u;
  *((_OWORD *)this + 75) = 0u;
  *((_OWORD *)this + 74) = 0u;
  *((_OWORD *)this + 73) = 0u;
  *((_OWORD *)this + 72) = 0u;
  *((_OWORD *)this + 71) = 0u;
  *((_OWORD *)this + 70) = 0u;
  *((_OWORD *)this + 69) = 0u;
  *((_OWORD *)this + 68) = 0u;
  *((_OWORD *)this + 67) = 0u;
  *((_OWORD *)this + 66) = 0u;
  *((_OWORD *)this + 65) = 0u;
  *((_OWORD *)this + 63) = 0u;
  *((_OWORD *)this + 64) = 0u;
  *((_OWORD *)this + 139) = 0u;
  *((_OWORD *)this + 138) = 0u;
  *((_OWORD *)this + 137) = 0u;
  *((_OWORD *)this + 136) = 0u;
  *((_OWORD *)this + 135) = 0u;
  *((_OWORD *)this + 134) = 0u;
  *((_OWORD *)this + 133) = 0u;
  *((_OWORD *)this + 132) = 0u;
  *((_OWORD *)this + 131) = 0u;
  *((_OWORD *)this + 130) = 0u;
  *((_OWORD *)this + 129) = 0u;
  *((_OWORD *)this + 128) = 0u;
  *((_OWORD *)this + 127) = 0u;
  *((_OWORD *)this + 203) = 0u;
  *((_OWORD *)this + 202) = 0u;
  *((_OWORD *)this + 201) = 0u;
  *((_OWORD *)this + 200) = 0u;
  *((_OWORD *)this + 199) = 0u;
  *((_OWORD *)this + 198) = 0u;
  *((_OWORD *)this + 197) = 0u;
  *((_OWORD *)this + 196) = 0u;
  *((_OWORD *)this + 195) = 0u;
  *((_OWORD *)this + 194) = 0u;
  *((_OWORD *)this + 193) = 0u;
  *((_OWORD *)this + 192) = 0u;
  *((_OWORD *)this + 191) = 0u;
  *((_OWORD *)this + 267) = 0u;
  *((_OWORD *)this + 266) = 0u;
  *((_OWORD *)this + 265) = 0u;
  *((_OWORD *)this + 264) = 0u;
  *((_OWORD *)this + 263) = 0u;
  *((_OWORD *)this + 262) = 0u;
  *((_OWORD *)this + 261) = 0u;
  *((_OWORD *)this + 260) = 0u;
  *((_OWORD *)this + 259) = 0u;
  *((_OWORD *)this + 258) = 0u;
  *((_OWORD *)this + 257) = 0u;
  *((_OWORD *)this + 256) = 0u;
  *((_OWORD *)this + 255) = 0u;
  *((_OWORD *)this + 331) = 0u;
  *((_OWORD *)this + 330) = 0u;
  *((_OWORD *)this + 329) = 0u;
  *((_OWORD *)this + 328) = 0u;
  *((_OWORD *)this + 327) = 0u;
  *((_OWORD *)this + 326) = 0u;
  *((_OWORD *)this + 325) = 0u;
  *((_OWORD *)this + 324) = 0u;
  *((_OWORD *)this + 323) = 0u;
  *((_OWORD *)this + 322) = 0u;
  *((_OWORD *)this + 321) = 0u;
  *((_OWORD *)this + 320) = 0u;
  *((_OWORD *)this + 319) = 0u;
  *((_OWORD *)this + 395) = 0u;
  *((_OWORD *)this + 394) = 0u;
  *((_OWORD *)this + 393) = 0u;
  *((_OWORD *)this + 392) = 0u;
  *((_OWORD *)this + 391) = 0u;
  *((_OWORD *)this + 390) = 0u;
  *((_OWORD *)this + 389) = 0u;
  *((_OWORD *)this + 388) = 0u;
  *((_OWORD *)this + 387) = 0u;
  *((_OWORD *)this + 386) = 0u;
  *((_OWORD *)this + 385) = 0u;
  *((_OWORD *)this + 384) = 0u;
  *((_OWORD *)this + 383) = 0u;
  *((_OWORD *)this + 459) = 0u;
  *((_OWORD *)this + 458) = 0u;
  *((_OWORD *)this + 457) = 0u;
  *((_OWORD *)this + 456) = 0u;
  *((_OWORD *)this + 455) = 0u;
  *((_OWORD *)this + 454) = 0u;
  *((_OWORD *)this + 453) = 0u;
  *((_OWORD *)this + 452) = 0u;
  *((_OWORD *)this + 451) = 0u;
  *((_OWORD *)this + 450) = 0u;
  *((_OWORD *)this + 449) = 0u;
  *((_OWORD *)this + 448) = 0u;
  *((_OWORD *)this + 447) = 0u;
  *((_OWORD *)this + 523) = 0u;
  *((_OWORD *)this + 522) = 0u;
  *((_OWORD *)this + 521) = 0u;
  *((_OWORD *)this + 520) = 0u;
  *((_OWORD *)this + 519) = 0u;
  *((_OWORD *)this + 518) = 0u;
  *((_OWORD *)this + 517) = 0u;
  *((_OWORD *)this + 516) = 0u;
  *((_OWORD *)this + 515) = 0u;
  *((_OWORD *)this + 514) = 0u;
  *((_OWORD *)this + 513) = 0u;
  *((_OWORD *)this + 512) = 0u;
  *((_OWORD *)this + 511) = 0u;
  *((_OWORD *)this + 587) = 0u;
  *((_OWORD *)this + 586) = 0u;
  *((_OWORD *)this + 585) = 0u;
  *((_OWORD *)this + 584) = 0u;
  *((_OWORD *)this + 583) = 0u;
  *((_OWORD *)this + 582) = 0u;
  *((_OWORD *)this + 581) = 0u;
  *((_OWORD *)this + 580) = 0u;
  *((_OWORD *)this + 579) = 0u;
  *((_OWORD *)this + 578) = 0u;
  *((_OWORD *)this + 577) = 0u;
  *((_OWORD *)this + 576) = 0u;
  *((_OWORD *)this + 575) = 0u;
  *((_OWORD *)this + 651) = 0u;
  *((_OWORD *)this + 650) = 0u;
  *((_OWORD *)this + 649) = 0u;
  *((_OWORD *)this + 648) = 0u;
  *((_OWORD *)this + 647) = 0u;
  *((_OWORD *)this + 646) = 0u;
  *((_OWORD *)this + 645) = 0u;
  *((_OWORD *)this + 644) = 0u;
  *((_OWORD *)this + 643) = 0u;
  *((_OWORD *)this + 642) = 0u;
  *((_OWORD *)this + 641) = 0u;
  *((_OWORD *)this + 640) = 0u;
  *((_OWORD *)this + 639) = 0u;
  *((_OWORD *)this + 715) = 0u;
  *((_OWORD *)this + 714) = 0u;
  *((_OWORD *)this + 713) = 0u;
  *((_OWORD *)this + 712) = 0u;
  *((_OWORD *)this + 711) = 0u;
  *((_OWORD *)this + 710) = 0u;
  *((_OWORD *)this + 709) = 0u;
  *((_OWORD *)this + 708) = 0u;
  *((_OWORD *)this + 707) = 0u;
  *((_OWORD *)this + 706) = 0u;
  *((_OWORD *)this + 705) = 0u;
  *((_OWORD *)this + 704) = 0u;
  *((_OWORD *)this + 703) = 0u;
  *((_OWORD *)this + 779) = 0u;
  *((_OWORD *)this + 778) = 0u;
  *((_OWORD *)this + 777) = 0u;
  *((_OWORD *)this + 776) = 0u;
  *((_OWORD *)this + 775) = 0u;
  *((_OWORD *)this + 774) = 0u;
  *((_OWORD *)this + 773) = 0u;
  *((_OWORD *)this + 772) = 0u;
  *((_OWORD *)this + 771) = 0u;
  *((_OWORD *)this + 770) = 0u;
  *((_OWORD *)this + 769) = 0u;
  *((_OWORD *)this + 768) = 0u;
  *((_OWORD *)this + 767) = 0u;
  *((_OWORD *)this + 843) = 0u;
  *((_OWORD *)this + 842) = 0u;
  *((_OWORD *)this + 841) = 0u;
  *((_OWORD *)this + 840) = 0u;
  *((_OWORD *)this + 839) = 0u;
  *((_OWORD *)this + 838) = 0u;
  *((_OWORD *)this + 837) = 0u;
  *((_OWORD *)this + 836) = 0u;
  *((_OWORD *)this + 835) = 0u;
  *((_OWORD *)this + 834) = 0u;
  *((_OWORD *)this + 833) = 0u;
  *((_OWORD *)this + 832) = 0u;
  *((_OWORD *)this + 831) = 0u;
  *((_OWORD *)this + 896) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *((_OWORD *)this + 895) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_OWORD *)((char *)this + 376) = 0u;
  *(_OWORD *)((char *)this + 12568) = 0u;
  *(_OWORD *)((char *)this + 12584) = 0u;
  *(_OWORD *)((char *)this + 12552) = 0u;
  *(_OWORD *)((char *)this + 13048) = 0u;
  *(_OWORD *)((char *)this + 13064) = 0u;
  *(_OWORD *)((char *)this + 13016) = 0u;
  *(_OWORD *)((char *)this + 13032) = 0u;
  *(_OWORD *)((char *)this + 12984) = 0u;
  *(_OWORD *)((char *)this + 13000) = 0u;
  *(_OWORD *)((char *)this + 12952) = 0u;
  *(_OWORD *)((char *)this + 12968) = 0u;
  *(_OWORD *)((char *)this + 12920) = 0u;
  *(_OWORD *)((char *)this + 12936) = 0u;
  *(_OWORD *)((char *)this + 13560) = 0u;
  *(_OWORD *)((char *)this + 13544) = 0u;
  *(_OWORD *)((char *)this + 12888) = 0u;
  *(_OWORD *)((char *)this + 12904) = 0u;
  *((unsigned char *)this + 13288) = 0;
  *(_OWORD *)((char *)this + 13528) = 0u;
  *(_OWORD *)((char *)this + 13512) = 0u;
  *(_OWORD *)((char *)this + 13672) = 0u;
  *(_OWORD *)((char *)this + 13688) = 0u;
  *(_OWORD *)((char *)this + 13640) = 0u;
  *(_OWORD *)((char *)this + 13656) = 0u;
  *(_OWORD *)((char *)this + 13608) = 0u;
  *(_OWORD *)((char *)this + 13624) = 0u;
  *(_OWORD *)((char *)this + 13576) = 0u;
  *(_OWORD *)((char *)this + 13592) = 0u;
  *(_OWORD *)((char *)this + 14072) = 0u;
  *(_OWORD *)((char *)this + 14088) = 0u;
  *(_OWORD *)((char *)this + 14040) = 0u;
  *(_OWORD *)((char *)this + 14056) = 0u;
  *(_OWORD *)((char *)this + 14008) = 0u;
  *(_OWORD *)((char *)this + 14024) = 0u;
  *(_OWORD *)((char *)this + 13976) = 0u;
  *(_OWORD *)((char *)this + 13992) = 0u;
  *(_OWORD *)((char *)this + 13944) = 0u;
  *(_OWORD *)((char *)this + 13960) = 0u;
  *(_OWORD *)((char *)this + 13912) = 0u;
  *(_OWORD *)((char *)this + 13928) = 0u;
  *((unsigned char *)this + 14312) = 0;
  *((_WORD *)this + 7176) = 1;
  return result;
}

peridot::PeridotDXPCalib *peridot::PeridotDXPCalib::PeridotDXPCalib(peridot::PeridotDXPCalib *this)
{
  *((void *)this + 34) = 0;
  *((void *)this + 35) = 0;
  *((void *)this + 36) = 0;
  *((_OWORD *)this + 212) = xmmword_259120720;
  *((void *)this + 426) = 0x2EDBE6FF3164D5FBLL;
  *((void *)this + 467) = 0;
  *(_OWORD *)((char *)this + 3528) = 0u;
  *(_OWORD *)((char *)this + 3544) = 0u;
  *(_OWORD *)((char *)this + 3560) = 0u;
  *(_OWORD *)((char *)this + 3576) = 0u;
  *(_OWORD *)((char *)this + 3592) = 0u;
  *(_OWORD *)((char *)this + 3608) = 0u;
  *(_OWORD *)((char *)this + 3624) = 0u;
  *(_OWORD *)((char *)this + 3640) = 0u;
  *(_OWORD *)((char *)this + 3656) = 0u;
  *(_OWORD *)((char *)this + 3672) = 0u;
  *(_OWORD *)((char *)this + 3688) = 0u;
  *(_OWORD *)((char *)this + 3704) = 0u;
  *(_OWORD *)((char *)this + 3720) = 0u;
  *((_OWORD *)this + 239) = 0u;
  *((_OWORD *)this + 238) = 0u;
  *((_OWORD *)this + 237) = 0u;
  *((void *)this + 492) = 0;
  *((_OWORD *)this + 245) = 0u;
  *((_OWORD *)this + 244) = 0u;
  *((_OWORD *)this + 243) = 0u;
  *((_OWORD *)this + 242) = 0u;
  *((_OWORD *)this + 249) = 0u;
  *((_OWORD *)this + 248) = 0u;
  *((_OWORD *)this + 247) = 0u;
  SparseMatrix::SparseMatrix((peridot::PeridotDXPCalib *)((char *)this + 40864));
  *((unsigned char *)this + 42433) = 1;
  return this;
}

void sub_259036244(_Unwind_Exception *exception_object)
{
  float v8 = (void *)v1[497];
  if (v8)
  {
    v1[498] = v8;
    operator delete(v8);
    float v9 = *v6;
    if (!*v6)
    {
LABEL_3:
      float v10 = (void *)v1[490];
      if (!v10) {
        goto LABEL_4;
      }
      goto LABEL_21;
    }
  }
  else
  {
    float v9 = *v6;
    if (!*v6) {
      goto LABEL_3;
    }
  }
  v1[495] = v9;
  operator delete(v9);
  float v10 = (void *)v1[490];
  if (!v10)
  {
LABEL_4:
    float v11 = (void *)v1[487];
    if (!v11) {
      goto LABEL_5;
    }
    goto LABEL_22;
  }
LABEL_21:
  v1[491] = v10;
  operator delete(v10);
  float v11 = (void *)v1[487];
  if (!v11)
  {
LABEL_5:
    float v12 = *v5;
    if (!*v5) {
      goto LABEL_6;
    }
    goto LABEL_23;
  }
LABEL_22:
  v1[488] = v11;
  operator delete(v11);
  float v12 = *v5;
  if (!*v5)
  {
LABEL_6:
    int v13 = (void *)v1[477];
    if (!v13) {
      goto LABEL_7;
    }
    goto LABEL_24;
  }
LABEL_23:
  v1[485] = v12;
  operator delete(v12);
  int v13 = (void *)v1[477];
  if (!v13)
  {
LABEL_7:
    float v14 = *v4;
    if (!*v4) {
      goto LABEL_8;
    }
    goto LABEL_25;
  }
LABEL_24:
  v1[478] = v13;
  operator delete(v13);
  float v14 = *v4;
  if (!*v4)
  {
LABEL_8:
    float v15 = (void *)v1[465];
    if (!v15) {
      goto LABEL_9;
    }
    goto LABEL_26;
  }
LABEL_25:
  v1[475] = v14;
  operator delete(v14);
  float v15 = (void *)v1[465];
  if (!v15)
  {
LABEL_9:
    int v16 = (void *)v1[462];
    if (!v16) {
      goto LABEL_10;
    }
    goto LABEL_27;
  }
LABEL_26:
  v1[466] = v15;
  operator delete(v15);
  int v16 = (void *)v1[462];
  if (!v16)
  {
LABEL_10:
    int v17 = (void *)v1[459];
    if (!v17) {
      goto LABEL_11;
    }
    goto LABEL_28;
  }
LABEL_27:
  v1[463] = v16;
  operator delete(v16);
  int v17 = (void *)v1[459];
  if (!v17)
  {
LABEL_11:
    float v18 = (void *)v1[456];
    if (!v18) {
      goto LABEL_12;
    }
    goto LABEL_29;
  }
LABEL_28:
  v1[460] = v17;
  operator delete(v17);
  float v18 = (void *)v1[456];
  if (!v18)
  {
LABEL_12:
    uint64_t v19 = (void *)v1[453];
    if (!v19) {
      goto LABEL_13;
    }
    goto LABEL_30;
  }
LABEL_29:
  v1[457] = v18;
  operator delete(v18);
  uint64_t v19 = (void *)v1[453];
  if (!v19)
  {
LABEL_13:
    int v20 = (void *)v1[450];
    if (!v20) {
      goto LABEL_14;
    }
    goto LABEL_31;
  }
LABEL_30:
  v1[454] = v19;
  operator delete(v19);
  int v20 = (void *)v1[450];
  if (!v20)
  {
LABEL_14:
    int v21 = (void *)v1[447];
    if (!v21) {
      goto LABEL_15;
    }
    goto LABEL_32;
  }
LABEL_31:
  v1[451] = v20;
  operator delete(v20);
  int v21 = (void *)v1[447];
  if (!v21)
  {
LABEL_15:
    int v22 = (void *)v1[444];
    if (!v22) {
      goto LABEL_16;
    }
    goto LABEL_33;
  }
LABEL_32:
  v1[448] = v21;
  operator delete(v21);
  int v22 = (void *)v1[444];
  if (!v22)
  {
LABEL_16:
    int v23 = *v3;
    if (!*v3) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }
LABEL_33:
  v1[445] = v22;
  operator delete(v22);
  int v23 = *v3;
  if (!*v3)
  {
LABEL_17:
    int v24 = *v2;
    if (!*v2) {
      goto LABEL_18;
    }
    goto LABEL_35;
  }
LABEL_34:
  v1[442] = v23;
  operator delete(v23);
  int v24 = *v2;
  if (!*v2) {
LABEL_18:
  }
    _Unwind_Resume(exception_object);
LABEL_35:
  v1[35] = v24;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

void SparseMatrix::SparseMatrix(SparseMatrix *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
}

peridot::Reflectivity *peridot::Reflectivity::Reflectivity(peridot::Reflectivity *this, float a2, float a3, float a4, float a5, float a6, float a7, float a8, float a9, float a10)
{
  *(void *)this = 0x409000003E19999ALL;
  float v18 = (_OWORD *)((char *)this + 3852);
  memcpy((char *)this + 8, &peridot::gPFactorLUTFixedDxAndMaxRange, 0xF04uLL);
  *(_OWORD *)((char *)this + 3916) = xmmword_2591234B0;
  *(_OWORD *)((char *)this + 3932) = unk_2591234C0;
  *(_OWORD *)((char *)this + 3948) = xmmword_2591234D0;
  *(_OWORD *)((char *)this + 3960) = *(long long *)((char *)&xmmword_2591234D0 + 12);
  _OWORD *v18 = peridot::gPFactorLUTRangeFixedDxAndMaxRange;
  *(_OWORD *)((char *)this + 3868) = unk_259123480;
  *(_OWORD *)((char *)this + 3884) = xmmword_259123490;
  *(_OWORD *)((char *)this + 3900) = unk_2591234A0;
  *((float *)this + 1106) = a2;
  *((float *)this + 1107) = a3;
  *((float *)this + 1108) = a4;
  *((float *)this + 1109) = a5;
  *((float *)this + 1110) = a6;
  *((float *)this + 1111) = a7;
  *((float *)this + 1112) = a8;
  *((float *)this + 1113) = a9;
  *((float *)this + 1114) = a10;
  *((_OWORD *)this + 507) = 0u;
  *((_OWORD *)this + 506) = 0u;
  *((_DWORD *)this + 2032) = 1065353216;
  *((_DWORD *)this + 2034) = 814322444;
  uint64_t v21 = 0;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 0, &v21)+ 6) = 0;
  uint64_t v21 = 1;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 1uLL, &v21)+ 6) = 1;
  uint64_t v21 = 2;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 2uLL, &v21)+ 6) = 2;
  uint64_t v21 = 3;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 3uLL, &v21)+ 6) = 3;
  uint64_t v21 = 4;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 4uLL, &v21)+ 6) = 3;
  uint64_t v21 = 5;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 5uLL, &v21)+ 6) = 4;
  uint64_t v21 = 6;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 6uLL, &v21)+ 6) = 6;
  uint64_t v21 = 7;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 7uLL, &v21)+ 6) = 6;
  uint64_t v21 = 8;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>((float *)this + 2024, 8uLL, &v21)+ 6) = 5;
  return this;
}

{
  return peridot::Reflectivity::Reflectivity(this, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_259036618(_Unwind_Exception *a1)
{
  std::unordered_map<unsigned long,peridot::ChannelsNames>::~unordered_map[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *std::__hash_table<std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,peridot::ChannelsNames>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,peridot::ChannelsNames>>>::__emplace_unique_key_args<unsigned long,std::piecewise_construct_t const&,std::tuple<unsigned long &&>,std::tuple<>>(float *a1, unint64_t a2, void *a3)
{
  unint64_t v5 = a2;
  unint64_t v7 = *((void *)a1 + 1);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v3 = a2;
      if (v7 <= a2) {
        unint64_t v3 = a2 % v7;
      }
    }
    else
    {
      unint64_t v3 = (v7 - 1) & a2;
    }
    float v9 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v9)
    {
      float v10 = *v9;
      if (*v9)
      {
        if (v8.u32[0] < 2uLL)
        {
          while (1)
          {
            uint64_t v12 = v10[1];
            if (v12 == a2)
            {
              if (v10[2] == a2) {
                return v10;
              }
            }
            else if ((v12 & (v7 - 1)) != v3)
            {
              goto LABEL_22;
            }
            float v10 = (void *)*v10;
            if (!v10) {
              goto LABEL_22;
            }
          }
        }
        do
        {
          unint64_t v11 = v10[1];
          if (v11 == a2)
          {
            if (v10[2] == a2) {
              return v10;
            }
          }
          else
          {
            if (v11 >= v7) {
              v11 %= v7;
            }
            if (v11 != v3) {
              break;
            }
          }
          float v10 = (void *)*v10;
        }
        while (v10);
      }
    }
  }
LABEL_22:
  float v10 = operator new(0x20uLL);
  *float v10 = 0;
  v10[1] = v5;
  double v10[2] = *a3;
  *((_DWORD *)v10 + 6) = 0;
  float v13 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v14 = a1[8];
  if (v7 && (float)(v14 * (float)v7) >= v13)
  {
    unint64_t v5 = v3;
    goto LABEL_72;
  }
  BOOL v15 = 1;
  if (v7 >= 3) {
    BOOL v15 = (v7 & (v7 - 1)) != 0;
  }
  unint64_t v16 = v15 | (2 * v7);
  unint64_t v17 = vcvtps_u32_f32(v13 / v14);
  if (v16 <= v17) {
    size_t prime = v17;
  }
  else {
    size_t prime = v16;
  }
  if (prime == 1)
  {
    size_t prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(prime);
    unint64_t v7 = *((void *)a1 + 1);
  }
  if (prime > v7)
  {
LABEL_35:
    if (prime >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v19 = operator new(8 * prime);
    int v20 = *(void **)a1;
    *(void *)a1 = v19;
    if (v20) {
      operator delete(v20);
    }
    uint64_t v21 = 0;
    *((void *)a1 + 1) = prime;
    do
      *(void *)(*(void *)a1 + 8 * v21++) = 0;
    while (prime != v21);
    int v23 = (uint64_t *)(a1 + 4);
    int v22 = (void *)*((void *)a1 + 2);
    if (!v22) {
      goto LABEL_59;
    }
    size_t v24 = v22[1];
    size_t v25 = prime - 1;
    if ((prime & (prime - 1)) == 0)
    {
      size_t v26 = v24 & v25;
      *(void *)(*(void *)a1 + 8 * v26) = v23;
      for (uint64_t i = (void *)*v22; *v22; uint64_t i = (void *)*v22)
      {
        size_t v28 = i[1] & v25;
        if (v28 == v26)
        {
          int v22 = i;
        }
        else if (*(void *)(*(void *)a1 + 8 * v28))
        {
          *int v22 = *i;
          uint64_t v29 = 8 * v28;
          *uint64_t i = **(void **)(*(void *)a1 + v29);
          **(void **)(*(void *)a1 + v29) = i;
        }
        else
        {
          *(void *)(*(void *)a1 + 8 * v28) = v22;
          int v22 = i;
          size_t v26 = v28;
        }
      }
LABEL_59:
      unint64_t v7 = prime;
      goto LABEL_60;
    }
    if (v24 >= prime) {
      v24 %= prime;
    }
    *(void *)(*(void *)a1 + 8 * v24) = v23;
    int v33 = (void *)*v22;
    if (!*v22) {
      goto LABEL_59;
    }
    while (1)
    {
      size_t v35 = v33[1];
      if (v35 >= prime) {
        v35 %= prime;
      }
      if (v35 != v24)
      {
        if (!*(void *)(*(void *)a1 + 8 * v35))
        {
          *(void *)(*(void *)a1 + 8 * v35) = v22;
          goto LABEL_64;
        }
        *int v22 = *v33;
        uint64_t v34 = 8 * v35;
        void *v33 = **(void **)(*(void *)a1 + v34);
        **(void **)(*(void *)a1 + v34) = v33;
        int v33 = v22;
      }
      size_t v35 = v24;
LABEL_64:
      int v22 = v33;
      int v33 = (void *)*v33;
      size_t v24 = v35;
      if (!v33) {
        goto LABEL_59;
      }
    }
  }
  if (prime >= v7) {
    goto LABEL_60;
  }
  unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
  if (v7 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
  {
    unint64_t v30 = std::__next_prime(v30);
  }
  else
  {
    uint64_t v32 = 1 << -(char)__clz(v30 - 1);
    if (v30 >= 2) {
      unint64_t v30 = v32;
    }
  }
  if (prime <= v30) {
    size_t prime = v30;
  }
  if (prime < v7)
  {
    if (!prime)
    {
      int v40 = *(void **)a1;
      *(void *)a1 = 0;
      if (v40) {
        operator delete(v40);
      }
      unint64_t v7 = 0;
      *((void *)a1 + 1) = 0;
      goto LABEL_60;
    }
    goto LABEL_35;
  }
  unint64_t v7 = *((void *)a1 + 1);
LABEL_60:
  if ((v7 & (v7 - 1)) != 0)
  {
    if (v7 <= v5) {
      v5 %= v7;
    }
  }
  else
  {
    v5 &= v7 - 1;
  }
LABEL_72:
  int v36 = *(void **)a1;
  int v37 = *(void **)(*(void *)a1 + 8 * v5);
  if (v37)
  {
    *float v10 = *v37;
LABEL_80:
    void *v37 = v10;
    goto LABEL_81;
  }
  *float v10 = *((void *)a1 + 2);
  *((void *)a1 + 2) = v10;
  v36[v5] = a1 + 4;
  if (*v10)
  {
    unint64_t v38 = *(void *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v38 >= v7) {
        v38 %= v7;
      }
    }
    else
    {
      v38 &= v7 - 1;
    }
    int v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_80;
  }
LABEL_81:
  ++*((void *)a1 + 3);
  return v10;
}

void sub_259036AA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void peridot::PeridotAlgo::Impl::macroProcessingDelayCalib(peridot::PeridotAlgo::Impl *this, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t v4 = MEMORY[0x270FA5388](this, a2, a3, a4);
  uint64_t v87 = *MEMORY[0x263EF8340];
  uint64_t v6 = v4 + 182032 * v5;
  uint64_t v7 = v4 + 776 * v5 + 1859744;
  v86[0] = *(_OWORD *)v7;
  *(_OWORD *)((char *)v86 + 12) = *(_OWORD *)(v4 + 776 * v5 + 1859756);
  v85[0] = *(_OWORD *)(v4 + 776 * v5 + 1859772);
  *(_OWORD *)((char *)v85 + 12) = *(_OWORD *)(v4 + 776 * v5 + 1859784);
  *(_DWORD *)(v6 + 407008) = 0;
  *(void *)(v4 + 776 * v5 + 1860404) = 0;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(void *)(v7 + 48) = 0;
  *(_DWORD *)(v4 + 776 * v5 + 1859800) = 0;
  v84[1] = *(_OWORD *)(v4 + 776 * v5 + 1859804);
  v84[2] = *(_OWORD *)(v4 + 776 * v5 + 1859820);
  *(_OWORD *)(v7 + 60) = 0u;
  *(_OWORD *)(v7 + 76) = 0u;
  unint64_t v8 = vdupq_n_s32(0x461E5800u).u64[0];
  *(_DWORD *)(v6 + 406960) = 1176393728;
  *(void *)(v6 + 406952) = v8;
  *(_OWORD *)(v6 + 495704) = xmmword_259120430;
  *(_DWORD *)(v6 + 522248) = 1176393728;
  *(void *)(v6 + 522240) = v8;
  *(_OWORD *)(v6 + 495720) = xmmword_259120440;
  *(int32x2_t *)(v6 + 407000) = vdup_n_s32(0x45EDD000u);
  *(_DWORD *)(v6 + 406936) = 786163455;
  *(void *)(v6 + 406928) = vdupq_n_s32(0x2EDBE6FFu).u64[0];
  *(_DWORD *)(v6 + 553784) = 786163455;
  *(_DWORD *)(v6 + 585232) = 786163455;
  float v9 = *(unsigned char **)(v6 + 407032);
  float v10 = *(unsigned char **)(v6 + 407040);
  int64_t v11 = v10 - v9;
  if (v10 == v9)
  {
    uint64_t __src = 0;
    float v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = (char *)operator new(v10 - v9);
    float v13 = &v12[4 * (v11 >> 2)];
    uint64_t __src = v12;
    memcpy(v12, v9, v11);
  }
  float v14 = (float32x4_t *)operator new(0x170uLL);
  BOOL v15 = v14;
  v14[21] = 0u;
  v14[22] = 0u;
  v14[19] = 0u;
  v14[20] = 0u;
  v14[17] = 0u;
  v14[18] = 0u;
  v14[15] = 0u;
  v14[16] = 0u;
  v14[13] = 0u;
  v14[14] = 0u;
  v14[11] = 0u;
  v14[12] = 0u;
  v14[9] = 0u;
  v14[10] = 0u;
  v14[7] = 0u;
  v14[8] = 0u;
  v14[5] = 0u;
  v14[6] = 0u;
  v14[3] = 0u;
  v14[4] = 0u;
  v14[1] = 0u;
  v14[2] = 0u;
  *float v14 = 0u;
  if (v13 == __src)
  {
    int32x2_t v16 = 0;
  }
  else
  {
    memcpy(&v14[5], __src, v13 - __src);
    *(float *)v16.i32 = (float)(v15[14].f32[0]
                              + (float)(v15[13].f32[3]
                                      + (float)(v15[13].f32[2]
                                              + (float)(v15[13].f32[1]
                                                      + (float)(v15[13].f32[0]
                                                              + (float)(v15[12].f32[3]
                                                                      + (float)(v15[12].f32[2] + v15[12].f32[1])))))))
                      + (float)((float)(v15[12].f32[0]
                                      + (float)(v15[11].f32[3]
                                              + (float)(v15[11].f32[2]
                                                      + (float)(v15[11].f32[1]
                                                              + (float)(v15[11].f32[0]
                                                                      + (float)(v15[10].f32[3] + v15[10].f32[2]))))))
                              + (float)((float)(v15[10].f32[1]
                                              + (float)(v15[10].f32[0]
                                                      + (float)(v15[9].f32[3]
                                                              + (float)(v15[9].f32[2]
                                                                      + (float)(v15[9].f32[1] + v15[9].f32[0])))))
                                      + (float)((float)(v15[8].f32[3]
                                                      + (float)(v15[8].f32[2]
                                                              + (float)(v15[8].f32[1]
                                                                      + (float)(v15[8].f32[0] + v15[7].f32[3]))))
                                              + (float)((float)(v15[7].f32[2]
                                                              + (float)(v15[7].f32[1]
                                                                      + (float)(v15[7].f32[0] + v15[6].f32[3])))
                                                      + (float)((float)(v15[6].f32[2]
                                                                      + (float)(v15[6].f32[1] + v15[6].f32[0]))
                                                              + (float)((float)(v15[5].f32[3] + v15[5].f32[2])
                                                                      + (float)(v15[5].f32[1] + v15[5].f32[0])))))));
    *(float *)v16.i32 = (float)(v15[19].f32[3] + (float)(v15[19].f32[2] + (float)(v15[19].f32[1] + v15[19].f32[0])))
                      + (float)((float)(v15[18].f32[3]
                                      + (float)(v15[18].f32[2]
                                              + (float)(v15[18].f32[1]
                                                      + (float)(v15[18].f32[0]
                                                              + (float)(v15[17].f32[3]
                                                                      + (float)(v15[17].f32[2]
                                                                              + (float)(v15[17].f32[1]
                                                                                      + (float)(v15[17].f32[0]
                                                                                              + (float)(v15[16].f32[3] + v15[16].f32[2])))))))))
                              + (float)((float)(v15[16].f32[1]
                                              + (float)(v15[16].f32[0]
                                                      + (float)(v15[15].f32[3]
                                                              + (float)(v15[15].f32[2]
                                                                      + (float)(v15[15].f32[1]
                                                                              + (float)(v15[15].f32[0]
                                                                                      + (float)(v15[14].f32[3]
                                                                                              + (float)(v15[14].f32[2] + v15[14].f32[1]))))))))
                                      + *(float *)v16.i32));
  }
  *(float *)v16.i32 = (float)(v15[22].f32[3] + v15[22].f32[2])
                    + (float)((float)(v15[22].f32[1] + (float)(v15[22].f32[0] + (float)(v15[21].f32[3] + v15[21].f32[2])))
                            + (float)((float)(v15[21].f32[1] + (float)(v15[21].f32[0] + v15[20].f32[3]))
                                    + (float)((float)(v15[20].f32[2] + v15[20].f32[1])
                                            + (float)(v15[20].f32[0] + *(float *)v16.i32))));
  float32x4_t v17 = (float32x4_t)vdupq_lane_s32(v16, 0);
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x43C80000u);
  __asm { FMOV            V4.4S, #1.0 }
  *(float32x4_t *)float v76 = _Q4;
  float32x4_t v24 = vdivq_f32(_Q4, v17);
  float32x4_t v25 = vmulq_f32(vmulq_f32(v15[1], v18), v24);
  float32x4_t *v15 = vmulq_f32(vmulq_f32(*v15, v18), v24);
  v15[1] = v25;
  float32x4_t v26 = vmulq_f32(vmulq_f32(v15[3], v18), v24);
  v15[2] = vmulq_f32(vmulq_f32(v15[2], v18), v24);
  v15[3] = v26;
  float32x4_t v27 = vmulq_f32(vmulq_f32(v15[5], v18), v24);
  v15[4] = vmulq_f32(vmulq_f32(v15[4], v18), v24);
  v15[5] = v27;
  float32x4_t v28 = vmulq_f32(vmulq_f32(v15[7], v18), v24);
  v15[6] = vmulq_f32(vmulq_f32(v15[6], v18), v24);
  v15[7] = v28;
  float32x4_t v29 = vmulq_f32(vmulq_f32(v15[9], v18), v24);
  v15[8] = vmulq_f32(vmulq_f32(v15[8], v18), v24);
  v15[9] = v29;
  float32x4_t v30 = vmulq_f32(vmulq_f32(v15[11], v18), v24);
  _OWORD v15[10] = vmulq_f32(vmulq_f32(v15[10], v18), v24);
  v15[11] = v30;
  float32x4_t v31 = vmulq_f32(vmulq_f32(v15[13], v18), v24);
  v15[12] = vmulq_f32(vmulq_f32(v15[12], v18), v24);
  v15[13] = v31;
  float32x4_t v32 = vmulq_f32(vmulq_f32(v15[15], v18), v24);
  v15[14] = vmulq_f32(vmulq_f32(v15[14], v18), v24);
  v15[15] = v32;
  float32x4_t v33 = vmulq_f32(vmulq_f32(v15[17], v18), v24);
  v15[16] = vmulq_f32(vmulq_f32(v15[16], v18), v24);
  v15[17] = v33;
  float32x4_t v34 = vmulq_f32(vmulq_f32(v15[19], v18), v24);
  v15[18] = vmulq_f32(vmulq_f32(v15[18], v18), v24);
  v15[19] = v34;
  float32x4_t v35 = vmulq_f32(vmulq_f32(v15[21], v18), v24);
  v15[20] = vmulq_f32(vmulq_f32(v15[20], v18), v24);
  v15[21] = v35;
  long long v77 = v15;
  v15[22] = vmulq_f32(vmulq_f32(v15[22], v18), v24);
  int v36 = operator new(0x150uLL);
  *int v36 = 0u;
  v36[1] = 0u;
  void v36[2] = 0u;
  v36[3] = 0u;
  v36[4] = 0u;
  v36[5] = 0u;
  v36[6] = 0u;
  v36[7] = 0u;
  v36[8] = 0u;
  v36[9] = 0u;
  v36[10] = 0u;
  v36[11] = 0u;
  v36[12] = 0u;
  v36[13] = 0u;
  v36[14] = 0u;
  v36[15] = 0u;
  v36[16] = 0u;
  v36[17] = 0u;
  v36[18] = 0u;
  v36[19] = 0u;
  v36[20] = 0u;
  int v37 = operator new(0x150uLL);
  _OWORD *v37 = 0u;
  v37[1] = 0u;
  v37[2] = 0u;
  v37[3] = 0u;
  v37[4] = 0u;
  v37[5] = 0u;
  v37[6] = 0u;
  v37[7] = 0u;
  v37[8] = 0u;
  v37[9] = 0u;
  v37[10] = 0u;
  v37[11] = 0u;
  v37[12] = 0u;
  v37[13] = 0u;
  v37[14] = 0u;
  v37[15] = 0u;
  v37[16] = 0u;
  v37[17] = 0u;
  v37[18] = 0u;
  v37[19] = 0u;
  v37[20] = 0u;
  unint64_t v38 = operator new(0x150uLL);
  uint64_t v39 = 0;
  *unint64_t v38 = 0u;
  v38[1] = 0u;
  v38[2] = 0u;
  v38[3] = 0u;
  v38[4] = 0u;
  v38[5] = 0u;
  v38[6] = 0u;
  v38[7] = 0u;
  v38[8] = 0u;
  v38[9] = 0u;
  v38[10] = 0u;
  v38[11] = 0u;
  v38[12] = 0u;
  v38[13] = 0u;
  v38[14] = 0u;
  v38[15] = 0u;
  v38[16] = 0u;
  v38[17] = 0u;
  v38[18] = 0u;
  v38[19] = 0u;
  v38[20] = 0u;
  v84[0] = xmmword_259120E80;
  long long v83 = 0u;
  long long v82 = 0u;
  long long v81 = 0u;
  long long v80 = 0u;
  long long v79 = 0u;
  float32x4_t v75 = (float32x4_t)vdupq_n_s32(0x43C80000u);
  *(_OWORD *)BOOL v78 = 0u;
  while (1)
  {
    int v67 = (char *)operator new(0x170uLL);
    *((_OWORD *)v67 + 21) = 0u;
    *((_OWORD *)v67 + 22) = 0u;
    *((_OWORD *)v67 + 19) = 0u;
    *((_OWORD *)v67 + 20) = 0u;
    *((_OWORD *)v67 + 17) = 0u;
    *((_OWORD *)v67 + 18) = 0u;
    *((_OWORD *)v67 + 15) = 0u;
    *((_OWORD *)v67 + 16) = 0u;
    *((_OWORD *)v67 + 13) = 0u;
    *((_OWORD *)v67 + 14) = 0u;
    *((_OWORD *)v67 + 11) = 0u;
    *((_OWORD *)v67 + 12) = 0u;
    *((_OWORD *)v67 + 9) = 0u;
    *((_OWORD *)v67 + 10) = 0u;
    *((_OWORD *)v67 + 7) = 0u;
    *((_OWORD *)v67 + 8) = 0u;
    *((_OWORD *)v67 + 5) = 0u;
    *((_OWORD *)v67 + 6) = 0u;
    *((_OWORD *)v67 + 3) = 0u;
    *((_OWORD *)v67 + 4) = 0u;
    *((_OWORD *)v67 + 1) = 0u;
    *((_OWORD *)v67 + 2) = 0u;
    *(_OWORD *)int v67 = 0u;
    int v68 = &v78[3 * v39];
    uint64_t v69 = *v68;
    if (*v68)
    {
      v78[3 * v39 + 1] = v69;
      operator delete(v69);
    }
    *int v68 = v67;
    *(int64x2_t *)&v78[3 * v39 + 1] = vdupq_n_s64((unint64_t)(v67 + 368));
    float v70 = (char *)operator new(0x5CuLL);
    *(_OWORD *)(v70 + 76) = 0u;
    *((_OWORD *)v70 + 3) = 0u;
    *((_OWORD *)v70 + 4) = 0u;
    *((_OWORD *)v70 + 2) = 0u;
    *(_OWORD *)float v70 = 0u;
    *((_OWORD *)v70 + 1) = 0u;
    conv<float,float const>((uint64_t)v77->i64 + 4 * v39, 92 - v39, (float *)v84, 4uLL, (float *)v67, 0);
    for (uint64_t i = 0; i != 89; ++i)
    {
      if ((i & 3) == 0) {
        *(_DWORD *)&v70[i & 0xFFFFFFFFFFFFFFFCLL] = *(_DWORD *)&v67[4 * i];
      }
    }
    v71.i32[0] = *(_DWORD *)v70;
    float v40 = *((float *)v70 + 1);
    *(_DWORD *)int v67 = *(_DWORD *)v70;
    *((float *)v67 + 1) = v40;
    float v41 = *((float *)v70 + 2);
    float v42 = *((float *)v70 + 3);
    *((float *)v67 + 2) = v41;
    *((float *)v67 + 3) = v42;
    float v43 = *((float *)v70 + 4);
    float v44 = *((float *)v70 + 5);
    *((float *)v67 + 4) = v43;
    *((float *)v67 + 5) = v44;
    float v45 = *((float *)v70 + 6);
    float v46 = *((float *)v70 + 7);
    *((float *)v67 + 6) = v45;
    *((float *)v67 + 7) = v46;
    float v47 = *((float *)v70 + 8);
    float v48 = *((float *)v70 + 9);
    *((float *)v67 + 8) = v47;
    *((float *)v67 + 9) = v48;
    float v49 = *((float *)v70 + 10);
    float v50 = *((float *)v70 + 11);
    *((float *)v67 + 10) = v49;
    *((float *)v67 + 11) = v50;
    float v51 = *((float *)v70 + 12);
    float v52 = *((float *)v70 + 13);
    *((float *)v67 + 12) = v51;
    *((float *)v67 + 13) = v52;
    float v53 = *((float *)v70 + 14);
    float v54 = *((float *)v70 + 15);
    *((float *)v67 + 14) = v53;
    *((float *)v67 + 15) = v54;
    float v55 = *((float *)v70 + 16);
    float v56 = *((float *)v70 + 17);
    *((float *)v67 + 16) = v55;
    *((float *)v67 + 17) = v56;
    float v57 = *((float *)v70 + 18);
    float v58 = *((float *)v70 + 19);
    *((float *)v67 + 18) = v57;
    *((float *)v67 + 19) = v58;
    float v59 = *((float *)v70 + 20);
    float v60 = *((float *)v70 + 21);
    *((float *)v67 + 20) = v59;
    *((float *)v67 + 21) = v60;
    float v61 = *((float *)v70 + 22);
    *((float *)v67 + 22) = v61;
    *((_DWORD *)v67 + 91) = 0;
    *(_OWORD *)(v67 + 252) = 0u;
    *(_OWORD *)(v67 + 236) = 0u;
    *(_OWORD *)(v67 + 220) = 0u;
    *(_OWORD *)(v67 + 204) = 0u;
    *(_OWORD *)(v67 + 188) = 0u;
    *(_OWORD *)(v67 + 172) = 0u;
    *(_OWORD *)(v67 + 156) = 0u;
    *(_OWORD *)(v67 + 140) = 0u;
    *(_OWORD *)(v67 + 124) = 0u;
    *(_OWORD *)(v67 + 108) = 0u;
    *(_OWORD *)(v67 + 92) = 0u;
    *(_OWORD *)(v67 + 332) = 0u;
    *(_OWORD *)(v67 + 348) = 0u;
    *(_OWORD *)(v67 + 300) = 0u;
    *(_OWORD *)(v67 + 316) = 0u;
    *(_OWORD *)(v67 + 268) = 0u;
    *(_OWORD *)(v67 + 284) = 0u;
    *(float *)v71.i32 = v61
                      + (float)((float)(v60 + (float)(v59 + (float)(v58 + (float)(v57 + (float)(v56 + v55)))))
                              + (float)((float)(v54 + (float)(v53 + (float)(v52 + (float)(v51 + v50))))
                                      + (float)((float)(v49 + (float)(v48 + (float)(v47 + v46)))
                                              + (float)((float)(v45 + (float)(v44 + v43))
                                                      + (float)((float)(v42 + v41) + (float)(v40 + *(float *)v71.i32))))));
    float32x4_t v62 = vdivq_f32(*(float32x4_t *)v76, (float32x4_t)vdupq_lane_s32(v71, 0));
    float32x4_t v63 = vmulq_f32(vmulq_f32(*((float32x4_t *)v67 + 1), v75), v62);
    *(float32x4_t *)int v67 = vmulq_f32(vmulq_f32(*(float32x4_t *)v67, v75), v62);
    *((float32x4_t *)v67 + 1) = v63;
    float32x4_t v64 = vmulq_f32(vmulq_f32(*((float32x4_t *)v67 + 3), v75), v62);
    *((float32x4_t *)v67 + 2) = vmulq_f32(vmulq_f32(*((float32x4_t *)v67 + 2), v75), v62);
    *((float32x4_t *)v67 + 3) = v64;
    float32x4_t v65 = vmulq_f32(vmulq_f32(*((float32x4_t *)v67 + 5), v75), v62);
    *((float32x4_t *)v67 + 4) = vmulq_f32(vmulq_f32(*((float32x4_t *)v67 + 4), v75), v62);
    *((float32x4_t *)v67 + 5) = v65;
    float32x4_t v66 = vmulq_f32(v62, (float32x4_t)0);
    *((float32x4_t *)v67 + 6) = v66;
    *((float32x4_t *)v67 + 7) = v66;
    *((float32x4_t *)v67 + 8) = v66;
    *((float32x4_t *)v67 + 9) = v66;
    *((float32x4_t *)v67 + 10) = v66;
    *((float32x4_t *)v67 + 11) = v66;
    *((float32x4_t *)v67 + 12) = v66;
    *((float32x4_t *)v67 + 13) = v66;
    *((float32x4_t *)v67 + 14) = v66;
    *((float32x4_t *)v67 + 15) = v66;
    *((float32x4_t *)v67 + 16) = v66;
    *((float32x4_t *)v67 + 17) = v66;
    *((float32x4_t *)v67 + 18) = v66;
    *((float32x4_t *)v67 + 19) = v66;
    *((float32x4_t *)v67 + 20) = v66;
    *((float32x4_t *)v67 + 21) = v66;
    *(float *)v71.i32 = 0.0 / *(float *)v71.i32;
    *((int32x4_t *)v67 + 22) = vdupq_lane_s32(v71, 0);
    operator delete(v70);
    if (++v39 == 4)
    {
      float v73 = operator new(0x120uLL);
      void *v73 = off_270717568;
      v73[2] = 92;
      operator new[]();
    }
  }
}

void sub_25903BE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,void *__p,void *a53,uint64_t a54,void *a55,uint64_t a56,void *a57,char a58)
{
  peridot::PeridotDepth::~PeridotDepth((peridot::PeridotDepth *)&a58);
  peridot::PeridotSpotRefDepth::~PeridotSpotRefDepth((peridot::PeridotSpotRefDepth *)&STACK[0xC10]);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1DE0]);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1DF8]);
  operator delete(v58);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E10]);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E28]);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E40]);
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E58]);
  operator delete(a53);
  if (a55) {
    operator delete(a55);
  }
  std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E70]);
  operator delete(__p);
  operator delete(a45);
  if (STACK[0x1F18])
  {
    operator delete((void *)STACK[0x1F18]);
    float v60 = (void *)STACK[0x1F00];
    if (!STACK[0x1F00])
    {
LABEL_5:
      float v61 = (void *)STACK[0x1EE8];
      if (!STACK[0x1EE8]) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  else
  {
    float v60 = (void *)STACK[0x1F00];
    if (!STACK[0x1F00]) {
      goto LABEL_5;
    }
  }
  operator delete(v60);
  float v61 = (void *)STACK[0x1EE8];
  if (!STACK[0x1EE8])
  {
LABEL_6:
    float32x4_t v62 = (void *)STACK[0x1ED0];
    if (!STACK[0x1ED0]) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_13:
  operator delete(v61);
  float32x4_t v62 = (void *)STACK[0x1ED0];
  if (!STACK[0x1ED0])
  {
LABEL_8:
    std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1E88]);
    std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1EA0]);
    std::vector<std::vector<peridot::RefHistogram>>::~vector[abi:ne180100]((void ***)&STACK[0x1EB8]);
    operator delete(a57);
    if (!a51) {
      _Unwind_Resume(a1);
    }
    operator delete(a51);
    _Unwind_Resume(a1);
  }
LABEL_7:
  operator delete(v62);
  goto LABEL_8;
}

void peridot::RefHistogram::~RefHistogram(peridot::RefHistogram *this)
{
  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

{
  uint64_t v2;
  uint64_t vars8;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
  JUMPOUT(0x25A2D62D0);
}

{
  uint64_t v2;

  *(void *)this = off_270717568;
  uint64_t v2 = *((void *)this + 1);
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
  }
  *((void *)this + 2) = 0;
}

void peridot::HDUnfoldClass::crtInit(peridot::HDUnfoldClass *this)
{
  unint64_t v2 = *((void *)this + 20);
  uint64_t v3 = *((void *)this + 17);
  if (v2 <= 2)
  {
    if (v3)
    {
      if (*((unsigned char *)this + 152)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *((void *)this + 18) = 0x300000001;
  *(unsigned char *)(v3 + 2) = 1;
  *(_WORD *)uint64_t v3 = peridot::HDUnfoldClass::_Cd_data;
  operator new[]();
}

void sub_25903D47C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  operator delete(v27);
  if (__p)
  {
    operator delete(__p);
    float32x4_t v29 = a19;
    if (a19)
    {
LABEL_7:
      operator delete(v29);
      if (!a11) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else
  {
    float32x4_t v29 = a19;
    if (a19) {
      goto LABEL_7;
    }
  }
  if (!a11)
  {
LABEL_9:
    Matrix<unsigned char>::~Matrix((uint64_t)&a27);
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a11);
  goto LABEL_9;
}

uint64_t Algo::Gcd(uint64_t this, uint64_t a2)
{
  if (a2)
  {
    do
    {
      uint64_t v2 = a2;
      a2 = this % a2;
      LODWORD(this) = v2;
    }
    while (a2);
    return v2;
  }
  return this;
}

char *std::__stable_sort<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(char *result, char *a2, unint64_t a3, char *a4, uint64_t a5)
{
  if (a3 >= 2)
  {
    uint64_t v6 = (uint64_t)result;
    if (a3 == 2)
    {
      int v7 = *((_DWORD *)a2 - 2);
      int v8 = *(_DWORD *)result;
      if (v7 > *(_DWORD *)result)
      {
        *(_DWORD *)double result = v7;
        *((_DWORD *)a2 - 2) = v8;
        int v9 = *((_DWORD *)result + 1);
        *((_DWORD *)result + 1) = *((_DWORD *)a2 - 1);
        *((_DWORD *)a2 - 1) = v9;
      }
      return result;
    }
    if ((uint64_t)a3 <= 0)
    {
      if (result != a2)
      {
        int32x2_t v16 = result + 8;
        if (result + 8 != a2)
        {
          uint64_t v17 = 0;
          float32x4_t v18 = result;
          do
          {
            int v20 = *(_DWORD *)v18;
            float32x4_t v18 = v16;
            if (*(_DWORD *)v16 > v20)
            {
              int v22 = *(_DWORD *)v16;
              int v21 = *((_DWORD *)v16 + 1);
              uint64_t v23 = v17;
              do
              {
                float32x4_t v24 = &result[v23];
                int v25 = *(_DWORD *)&result[v23 + 4];
                *((_DWORD *)v24 + 2) = v20;
                *((_DWORD *)v24 + 3) = v25;
                if (!v23)
                {
                  uint64_t v19 = result;
                  goto LABEL_15;
                }
                int v20 = *((_DWORD *)v24 - 2);
                v23 -= 8;
              }
              while (v20 < v22);
              uint64_t v19 = &result[v23 + 8];
LABEL_15:
              *(_DWORD *)uint64_t v19 = v22;
              *((_DWORD *)v19 + 1) = v21;
            }
            int32x2_t v16 = v18 + 8;
            v17 += 8;
          }
          while (v18 + 8 != a2);
        }
      }
    }
    else
    {
      unint64_t v13 = a3 >> 1;
      float v14 = &result[8 * (a3 >> 1)];
      unint64_t v15 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        std::__stable_sort_move<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(result, v14, v15, a4);
        float32x4_t v26 = &a4[8 * v13];
        double result = std::__stable_sort_move<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>((char *)(v6 + 8 * (a3 >> 1)), a2, a3 - (a3 >> 1), v26);
        uint64_t v27 = -1;
        float32x4_t v28 = (char *)v6;
        float32x4_t v29 = a4;
        float32x4_t v30 = v26;
        float32x4_t v31 = &a4[8 * a3];
        do
        {
          ++v27;
          if (v30 == v31)
          {
            if (v29 == v26) {
              return result;
            }
            unint64_t v36 = &a4[8 * v13] - v29 - 8;
            if (v36 >= 0x78)
            {
              if (v28 >= &v29[(v36 & 0xFFFFFFFFFFFFFFF8) + 8]
                || (unint64_t)v29 >= v6 + 8 * v27 + (v36 & 0xFFFFFFFFFFFFFFF8) + 8)
              {
                uint64_t v39 = 0;
                uint64_t v40 = (v36 >> 3) + 1;
                uint64_t v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFF8);
                int v37 = &v28[v41];
                uint64_t v42 = v40 & 0x3FFFFFFFFFFFFFF8;
                do
                {
                  float v43 = &v28[v39];
                  long long v44 = *(_OWORD *)&v29[v39 + 16];
                  long long v46 = *(_OWORD *)&v29[v39 + 32];
                  long long v45 = *(_OWORD *)&v29[v39 + 48];
                  *(_OWORD *)float v43 = *(_OWORD *)&v29[v39];
                  *((_OWORD *)v43 + 1) = v44;
                  *((_OWORD *)v43 + 2) = v46;
                  *((_OWORD *)v43 + 3) = v45;
                  v39 += 64;
                  v42 -= 8;
                }
                while (v42);
                if (v40 == (v40 & 0x3FFFFFFFFFFFFFF8)) {
                  return result;
                }
                v29 += v41;
              }
              else
              {
                int v37 = v28;
              }
            }
            else
            {
              int v37 = v28;
            }
            do
            {
              *(_DWORD *)int v37 = *(_DWORD *)v29;
              *((_DWORD *)v37 + 1) = *((_DWORD *)v29 + 1);
              v29 += 8;
              v37 += 8;
            }
            while (v29 != v26);
            return result;
          }
          int v32 = *(_DWORD *)v30;
          if (*(_DWORD *)v30 > *(_DWORD *)v29)
          {
            float32x4_t v33 = v30;
          }
          else
          {
            int v32 = *(_DWORD *)v29;
            float32x4_t v33 = v29;
          }
          if (*(_DWORD *)v30 <= *(_DWORD *)v29) {
            v29 += 8;
          }
          else {
            v30 += 8;
          }
          *(_DWORD *)float32x4_t v28 = v32;
          *((_DWORD *)v28 + 1) = *((_DWORD *)v33 + 1);
          v28 += 8;
        }
        while (v29 != v26);
        if (v30 == v31) {
          return result;
        }
        unint64_t v34 = &a4[8 * a3] - v30 - 8;
        if (v34 <= 0x77
          || v28 < &v30[(v34 & 0xFFFFFFFFFFFFFFF8) + 8]
          && (unint64_t)v30 < v6 + 8 * v27 + (v34 & 0xFFFFFFFFFFFFFFF8) + 16)
        {
          float32x4_t v35 = v28;
          goto LABEL_36;
        }
        uint64_t v47 = 0;
        uint64_t v48 = (v34 >> 3) + 1;
        uint64_t v49 = 8 * (v48 & 0x3FFFFFFFFFFFFFF8);
        float32x4_t v35 = &v28[v49];
        uint64_t v50 = v48 & 0x3FFFFFFFFFFFFFF8;
        do
        {
          float v51 = &v28[v47];
          double result = &v30[v47];
          long long v52 = *(_OWORD *)&v30[v47 + 16];
          long long v54 = *(_OWORD *)&v30[v47 + 32];
          long long v53 = *(_OWORD *)&v30[v47 + 48];
          *(_OWORD *)float v51 = *(_OWORD *)&v30[v47];
          *((_OWORD *)v51 + 1) = v52;
          *((_OWORD *)v51 + 2) = v54;
          *((_OWORD *)v51 + 3) = v53;
          v47 += 64;
          v50 -= 8;
        }
        while (v50);
        if (v48 != (v48 & 0x3FFFFFFFFFFFFFF8))
        {
          v30 += v49;
          do
          {
LABEL_36:
            *(_DWORD *)float32x4_t v35 = *(_DWORD *)v30;
            *((_DWORD *)v35 + 1) = *((_DWORD *)v30 + 1);
            v30 += 8;
            v35 += 8;
          }
          while (v30 != v31);
        }
      }
      else
      {
        std::__stable_sort<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(result, v14, v15, a4, a5);
        std::__stable_sort<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(v6 + 8 * (a3 >> 1), a2, a3 - (a3 >> 1), a4, a5);
        return (char *)std::__inplace_merge<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(v6, (char *)(v6 + 8 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (uint64_t)a4, a5);
      }
    }
  }
  return result;
}

char *std::__stable_sort_move<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(char *result, char *a2, unint64_t a3, void *a4)
{
  if (a3)
  {
    uint64_t v4 = a4;
    uint64_t v6 = result;
    if (a3 == 1)
    {
LABEL_10:
      *uint64_t v4 = *(void *)v6;
      return result;
    }
    if (a3 == 2)
    {
      int v8 = *((_DWORD *)a2 - 2);
      BOOL v9 = v8 <= *(_DWORD *)result;
      if (v8 <= *(_DWORD *)result) {
        float v10 = result;
      }
      else {
        float v10 = a2 - 8;
      }
      *a4 = *(void *)v10;
      uint64_t v4 = a4 + 1;
      if (v9) {
        uint64_t v6 = a2 - 8;
      }
      goto LABEL_10;
    }
    if ((uint64_t)a3 > 8)
    {
      unint64_t v21 = a3 >> 1;
      uint64_t v22 = 8 * (a3 >> 1);
      uint64_t v23 = &result[v22];
      std::__stable_sort<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(result, &result[v22], a3 >> 1, a4, a3 >> 1);
      double result = (char *)std::__stable_sort<std::_ClassicAlgPolicy,void Algo::SortWithIndex<int,unsigned char>(std::vector<int> const&,BOOL,std::vector<int>&,std::vector<unsigned char> &)::{lambda(std::pair<int,int> const&,std::pair<int,int> const&)#1} &,std::__wrap_iter<std::pair<int,unsigned int> *>>(&v6[v22], a2, a3 - v21, &v4[(unint64_t)v22 / 8], a3 - v21);
      uint64_t v24 = -1;
      int v25 = v4;
      float32x4_t v26 = v6;
      uint64_t v27 = &v6[v22];
      do
      {
        ++v24;
        if (v27 == a2)
        {
          if (v26 == v23) {
            return result;
          }
          unint64_t v43 = &v6[8 * v21] - v26 - 8;
          if (v43 >= 0x38)
          {
            if ((unint64_t)((char *)&v4[v24] - v26) >= 0x20)
            {
              uint64_t v45 = 0;
              uint64_t v46 = (v43 >> 3) + 1;
              uint64_t v47 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              long long v44 = &v25[v47];
              uint64_t v48 = v46 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                uint64_t v49 = &v25[v45];
                long long v50 = *(_OWORD *)&v26[v45 * 8 + 16];
                *uint64_t v49 = *(_OWORD *)&v26[v45 * 8];
                v49[1] = v50;
                v45 += 4;
                v48 -= 4;
              }
              while (v48);
              if (v46 == (v46 & 0x3FFFFFFFFFFFFFFCLL)) {
                return result;
              }
              v26 += v47 * 8;
            }
            else
            {
              long long v44 = v25;
            }
          }
          else
          {
            long long v44 = v25;
          }
          do
          {
            uint64_t v51 = *(void *)v26;
            v26 += 8;
            *v44++ = v51;
          }
          while (v26 != v23);
          return result;
        }
        float32x4_t v28 = v27;
        int v29 = *(_DWORD *)v27;
        int v30 = *(_DWORD *)v26;
        BOOL v31 = *(_DWORD *)v27 <= *(_DWORD *)v26;
        BOOL v32 = *(_DWORD *)v27 > *(_DWORD *)v26;
        if (v29 <= *(_DWORD *)v26) {
          float32x4_t v33 = v26;
        }
        else {
          float32x4_t v33 = v28;
        }
        uint64_t v27 = &v28[8 * v32];
        v26 += 8 * v31;
        *v25++ = *(void *)v33;
      }
      while (v26 != v23);
      if (v27 == a2) {
        return result;
      }
      uint64_t v34 = -8;
      if (v29 <= v30) {
        uint64_t v34 = 0;
      }
      unint64_t v35 = a2 - v28 + v34 - 8;
      if (v35 < 0x68 || (unint64_t)((char *)&v4[v24] - &v28[8 * (v29 > v30)] + 8) < 0x20) {
        goto LABEL_40;
      }
      uint64_t v36 = 0;
      uint64_t v37 = (v35 >> 3) + 1;
      uint64_t v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v39 = v37 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        uint64_t v40 = &v25[v36];
        long long v41 = *(_OWORD *)&v27[v36 * 8 + 16];
        *uint64_t v40 = *(_OWORD *)&v27[v36 * 8];
        v40[1] = v41;
        v36 += 4;
        v39 -= 4;
      }
      while (v39);
      if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
      {
        v27 += v38;
        int v25 = (void *)((char *)v25 + v38);
        do
        {
LABEL_40:
          uint64_t v42 = *(void *)v27;
          v27 += 8;
          *v25++ = v42;
        }
        while (v27 != a2);
      }
    }
    else if (result != a2)
    {
      int64_t v11 = result + 8;
      *a4 = *(void *)result;
      if (result + 8 != a2)
      {
        uint64_t v12 = 0;
        unint64_t v13 = a4;
        float v14 = a4;
        do
        {
          unint64_t v15 = v11;
          int v16 = *v14;
          v14 += 2;
          if (*(_DWORD *)v11 <= v16)
          {
            *(void *)float v14 = *v11;
          }
          else
          {
            v13[1] = *v13;
            uint64_t v17 = a4;
            if (v13 != a4)
            {
              uint64_t v18 = v12;
              while (1)
              {
                uint64_t v17 = (_DWORD *)((char *)a4 + v18);
                int v19 = *(_DWORD *)((char *)a4 + v18 - 8);
                if (*v15 <= v19) {
                  break;
                }
                int v20 = *(v17 - 1);
                _DWORD *v17 = v19;
                v17[1] = v20;
                v18 -= 8;
                if (!v18)
                {
                  uint64_t v17 = a4;
                  break;
                }
              }
            }
            _DWORD *v17 = *v15;
            v17[1] = *((_DWORD *)v6 + 3);
          }
          int64_t v11 = v15 + 2;
          v12 += 8;
          unint64_t v13 = v14;
          uint64_t v6 = (char *)v15;
        }
        while (v15 + 2 != (_DWORD *)a2);
      }
    }
  }
  return result;
}

void sub_25903DF28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25903E02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25903E0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25903E5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25903F0A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void peridot::compensateForParallax(void *a1, int32x2_t *a2, int a3, float32x4_t *a4, int32x2_t a5)
{
  id v60 = a1;
  int v8 = (char *)operator new(0x700uLL);
  bzero(v8, 0x700uLL);
  uint64_t v9 = 0;
  float v10 = (float32x2_t *)&a2[7];
  do
  {
    int64_t v11 = (float64x2_t *)&v8[v9];
    float64x2_t v12 = vcvtq_f64_f32(v10[-6]);
    *int64_t v11 = vcvtq_f64_f32(v10[-7]);
    v11[1] = v12;
    float64x2_t v13 = vcvtq_f64_f32(v10[-4]);
    v11[2] = vcvtq_f64_f32(v10[-5]);
    v11[3] = v13;
    float64x2_t v14 = vcvtq_f64_f32(v10[-2]);
    v11[4] = vcvtq_f64_f32(v10[-3]);
    v11[5] = v14;
    float32x2_t v15 = v10[1];
    float64x2_t v16 = vcvtq_f64_f32(*v10);
    v11[6] = vcvtq_f64_f32(v10[-1]);
    v11[7] = v16;
    float64x2_t v17 = vcvtq_f64_f32(v15);
    float32x2_t v18 = v10[3];
    float64x2_t v19 = vcvtq_f64_f32(v10[2]);
    v11[8] = v17;
    v11[9] = v19;
    float64x2_t v20 = vcvtq_f64_f32(v18);
    float32x2_t v21 = v10[5];
    float64x2_t v22 = vcvtq_f64_f32(v10[4]);
    v11[10] = v20;
    v11[11] = v22;
    float64x2_t v23 = vcvtq_f64_f32(v10[6]);
    v9 += 224;
    v10 += 14;
    v11[12] = vcvtq_f64_f32(v21);
    v11[13] = v23;
  }
  while (v9 != 1792);
  uint64_t v24 = operator new(0x1C0uLL);
  char v58 = BYTE4(*(void *)&a2[112]);
  int32x4_t v25 = vdupq_lane_s32(a2[112], 0);
  _OWORD *v24 = v25;
  v24[1] = v25;
  v24[2] = v25;
  v24[3] = v25;
  v24[4] = v25;
  v24[5] = v25;
  v24[6] = v25;
  v24[7] = v25;
  v24[8] = v25;
  v24[9] = v25;
  v24[10] = v25;
  v24[11] = v25;
  v24[12] = v25;
  v24[13] = v25;
  v24[14] = v25;
  v24[15] = v25;
  v24[16] = v25;
  v24[17] = v25;
  v24[18] = v25;
  v24[19] = v25;
  v24[20] = v25;
  v24[21] = v25;
  v24[22] = v25;
  v24[23] = v25;
  v24[24] = v25;
  v24[25] = v25;
  v24[26] = v25;
  v24[27] = v25;
  float32x4_t v26 = operator new(0x1C0uLL);
  int32x4_t v27 = vdupq_lane_s32(a5, 0);
  *float32x4_t v26 = v27;
  v26[1] = v27;
  v26[2] = v27;
  float v26[3] = v27;
  v26[4] = v27;
  v26[5] = v27;
  v26[6] = v27;
  v26[7] = v27;
  v26[8] = v27;
  v26[9] = v27;
  v26[10] = v27;
  v26[11] = v27;
  v26[12] = v27;
  v26[13] = v27;
  v26[14] = v27;
  v26[15] = v27;
  v26[16] = v27;
  v26[17] = v27;
  v26[18] = v27;
  v26[19] = v27;
  v26[20] = v27;
  v26[21] = v27;
  v26[22] = v27;
  v26[23] = v27;
  v26[24] = v27;
  v26[25] = v27;
  v26[26] = v27;
  v26[27] = v27;
  float32x4_t v28 = (float64x2_t *)operator new(0x700uLL);
  bzero(v28, 0x700uLL);
  peridot::compensateForParallax(v60, 0x70u, (uint64_t)v8, (uint64_t)v24, v58 == 0, (uint64_t)v26, a3, (uint64_t)v28);
  float32x4_t v29 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[2]), v28[3]);
  *a4 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*v28), v28[1]);
  a4[1] = v29;
  float32x4_t v30 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[6]), v28[7]);
  a4[2] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[4]), v28[5]);
  a4[3] = v30;
  float32x4_t v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[10]), v28[11]);
  a4[4] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[8]), v28[9]);
  a4[5] = v31;
  float32x4_t v32 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[14]), v28[15]);
  a4[6] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[12]), v28[13]);
  a4[7] = v32;
  float32x4_t v33 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[18]), v28[19]);
  a4[8] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[16]), v28[17]);
  a4[9] = v33;
  float32x4_t v34 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[22]), v28[23]);
  a4[10] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[20]), v28[21]);
  a4[11] = v34;
  float32x4_t v35 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[26]), v28[27]);
  a4[12] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[24]), v28[25]);
  a4[13] = v35;
  float32x4_t v36 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[30]), v28[31]);
  a4[14] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[28]), v28[29]);
  a4[15] = v36;
  float32x4_t v37 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[34]), v28[35]);
  a4[16] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[32]), v28[33]);
  a4[17] = v37;
  float32x4_t v38 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[38]), v28[39]);
  a4[18] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[36]), v28[37]);
  a4[19] = v38;
  float32x4_t v39 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[42]), v28[43]);
  a4[20] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[40]), v28[41]);
  a4[21] = v39;
  float32x4_t v40 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[46]), v28[47]);
  a4[22] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[44]), v28[45]);
  a4[23] = v40;
  float32x4_t v41 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[50]), v28[51]);
  a4[24] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[48]), v28[49]);
  a4[25] = v41;
  float32x4_t v42 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[54]), v28[55]);
  a4[26] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[52]), v28[53]);
  a4[27] = v42;
  float32x4_t v43 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[58]), v28[59]);
  a4[28] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[56]), v28[57]);
  a4[29] = v43;
  float32x4_t v44 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[62]), v28[63]);
  a4[30] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[60]), v28[61]);
  a4[31] = v44;
  float32x4_t v45 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[66]), v28[67]);
  a4[32] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[64]), v28[65]);
  a4[33] = v45;
  float32x4_t v46 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[70]), v28[71]);
  a4[34] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[68]), v28[69]);
  a4[35] = v46;
  float32x4_t v47 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[74]), v28[75]);
  a4[36] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[72]), v28[73]);
  a4[37] = v47;
  float32x4_t v48 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[78]), v28[79]);
  a4[38] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[76]), v28[77]);
  a4[39] = v48;
  float32x4_t v49 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[82]), v28[83]);
  a4[40] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[80]), v28[81]);
  a4[41] = v49;
  float32x4_t v50 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[86]), v28[87]);
  a4[42] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[84]), v28[85]);
  a4[43] = v50;
  float32x4_t v51 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[90]), v28[91]);
  a4[44] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[88]), v28[89]);
  a4[45] = v51;
  float32x4_t v52 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[94]), v28[95]);
  a4[46] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[92]), v28[93]);
  a4[47] = v52;
  float32x4_t v53 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[98]), v28[99]);
  a4[48] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[96]), v28[97]);
  a4[49] = v53;
  float32x4_t v54 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[102]), v28[103]);
  a4[50] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[100]), v28[101]);
  a4[51] = v54;
  float32x4_t v55 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[106]), v28[107]);
  a4[52] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[104]), v28[105]);
  a4[53] = v55;
  float32x4_t v56 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[110]), v28[111]);
  a4[54] = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v28[108]), v28[109]);
  a4[55] = v56;
  a4[56].i32[0] = a5.i32[0];
  if (a3)
  {
    if (a3 != 1) {
      goto LABEL_8;
    }
    char v57 = 0;
  }
  else
  {
    char v57 = 1;
  }
  a4[56].i8[4] = v57;
LABEL_8:
  operator delete(v28);
  operator delete(v26);
  operator delete(v24);
  operator delete(v8);
}

void sub_25903F670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  operator delete(v17);
  operator delete(v16);
  operator delete(v15);
  operator delete(v14);

  _Unwind_Resume(a1);
}

void gmoCoreAnalyticsTelemetry::init(gmoCoreAnalyticsTelemetry *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    uint64_t v4 = "init";
    __int16 v5 = 1024;
    int v6 = 8;
    _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "GMO: %s: GMO Core Analytics Init, ver: %d", (uint8_t *)&v3, 0x12u);
  }
  unsigned int v2 = time(0);
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)&v3, v2);
  *(void *)&this->_homogTrackingLongTermCounter = 0;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.highAmbient = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.spotsMovementFromNominal2 = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.spotsMovementFromOperationalPercentile = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam2 = 0u;
  *(_OWORD *)&this->_coreAnalyticsHomographyAzul.hokClassifierParam6 = 0u;
  *(_OWORD *)&this->_coreAnalyticsLongTerm.sstpSpotMoveP95LongTeruint64_t m = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.sessionCount = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.homogDoneCount = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[3] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[7] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[11] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[15] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[19] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[23] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP95Arr[27] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[1] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[5] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[9] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[13] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[17] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[21] = 0u;
  *(_OWORD *)&this->_longTermEventPersistentData.calibErrP50Arr[25] = 0u;
  *(void *)((char *)&this->_longTermEventPersistentData.calibErrP50Arr[28] + 1) = 0;
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)&v3);
}

void sub_259040B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  _Unwind_Resume(a1);
}

uint64_t peridot::anchorsForSpotLocations(uint64_t result, BOOL *a2)
{
  uint64_t v2 = 0;
  int v3 = a2 + 2;
  do
  {
    float v4 = *(float *)(result + v2 + 4);
    int v5 = vcvtms_s32_f32(*(float *)(result + v2));
    int v6 = llroundf(v4);
    if (v5 >= 82) {
      int v5 = 82;
    }
    *(v3 - 2) = v5 & ~(v5 >> 31);
    if (v6 >= 106) {
      int v7 = 106;
    }
    else {
      int v7 = v6;
    }
    int v8 = v7 & ~(v7 >> 31);
    *(v3 - 1) = v8;
    BOOL *v3 = v4 < (float)v8;
    v3 += 3;
    v2 += 8;
  }
  while (v2 != 112);
  uint64_t v9 = 0;
  uint64_t v10 = result + 116;
  int64_t v11 = a2 + 44;
  do
  {
    float v12 = *(float *)(v10 + v9);
    int v13 = vcvtms_s32_f32(*(float *)(v10 + v9 - 4));
    int v14 = llroundf(v12);
    if (v13 >= 82) {
      int v13 = 82;
    }
    *(v11 - 2) = v13 & ~(v13 >> 31);
    if (v14 >= 106) {
      int v15 = 106;
    }
    else {
      int v15 = v14;
    }
    int v16 = v15 & ~(v15 >> 31);
    *(v11 - 1) = v16;
    *int64_t v11 = v12 < (float)v16;
    v11 += 3;
    v9 += 8;
  }
  while (v9 != 112);
  uint64_t v17 = 0;
  uint64_t v18 = result + 228;
  float64x2_t v19 = a2 + 86;
  do
  {
    float v20 = *(float *)(v18 + v17);
    int v21 = vcvtms_s32_f32(*(float *)(v18 + v17 - 4));
    int v22 = llroundf(v20);
    if (v21 >= 82) {
      int v21 = 82;
    }
    *(v19 - 2) = v21 & ~(v21 >> 31);
    if (v22 >= 106) {
      int v23 = 106;
    }
    else {
      int v23 = v22;
    }
    int v24 = v23 & ~(v23 >> 31);
    *(v19 - 1) = v24;
    *float64x2_t v19 = v20 < (float)v24;
    v19 += 3;
    v17 += 8;
  }
  while (v17 != 112);
  uint64_t v25 = 0;
  uint64_t v26 = result + 340;
  int32x4_t v27 = a2 + 128;
  do
  {
    float v28 = *(float *)(v26 + v25);
    int v29 = vcvtms_s32_f32(*(float *)(v26 + v25 - 4));
    int v30 = llroundf(v28);
    if (v29 >= 82) {
      int v29 = 82;
    }
    *(v27 - 2) = v29 & ~(v29 >> 31);
    if (v30 >= 106) {
      int v31 = 106;
    }
    else {
      int v31 = v30;
    }
    int v32 = v31 & ~(v31 >> 31);
    *(v27 - 1) = v32;
    BOOL *v27 = v28 < (float)v32;
    v27 += 3;
    v25 += 8;
  }
  while (v25 != 112);
  uint64_t v33 = 0;
  uint64_t v34 = result + 452;
  float32x4_t v35 = a2 + 170;
  do
  {
    float v36 = *(float *)(v34 + v33);
    int v37 = vcvtms_s32_f32(*(float *)(v34 + v33 - 4));
    int v38 = llroundf(v36);
    if (v37 >= 82) {
      int v37 = 82;
    }
    *(v35 - 2) = v37 & ~(v37 >> 31);
    if (v38 >= 106) {
      int v39 = 106;
    }
    else {
      int v39 = v38;
    }
    int v40 = v39 & ~(v39 >> 31);
    *(v35 - 1) = v40;
    *float32x4_t v35 = v36 < (float)v40;
    v35 += 3;
    v33 += 8;
  }
  while (v33 != 112);
  uint64_t v41 = 0;
  uint64_t v42 = result + 564;
  float32x4_t v43 = a2 + 212;
  do
  {
    float v44 = *(float *)(v42 + v41);
    int v45 = vcvtms_s32_f32(*(float *)(v42 + v41 - 4));
    int v46 = llroundf(v44);
    if (v45 >= 82) {
      int v45 = 82;
    }
    *(v43 - 2) = v45 & ~(v45 >> 31);
    if (v46 >= 106) {
      int v47 = 106;
    }
    else {
      int v47 = v46;
    }
    int v48 = v47 & ~(v47 >> 31);
    *(v43 - 1) = v48;
    BOOL *v43 = v44 < (float)v48;
    v43 += 3;
    v41 += 8;
  }
  while (v41 != 112);
  uint64_t v49 = 0;
  uint64_t v50 = result + 676;
  float32x4_t v51 = a2 + 254;
  do
  {
    float v52 = *(float *)(v50 + v49);
    int v53 = vcvtms_s32_f32(*(float *)(v50 + v49 - 4));
    int v54 = llroundf(v52);
    if (v53 >= 82) {
      int v53 = 82;
    }
    *(v51 - 2) = v53 & ~(v53 >> 31);
    if (v54 >= 106) {
      int v55 = 106;
    }
    else {
      int v55 = v54;
    }
    int v56 = v55 & ~(v55 >> 31);
    *(v51 - 1) = v56;
    BOOL *v51 = v52 < (float)v56;
    v51 += 3;
    v49 += 8;
  }
  while (v49 != 112);
  uint64_t v57 = 0;
  uint64_t v58 = result + 788;
  float v59 = a2 + 296;
  do
  {
    float v60 = *(float *)(v58 + v57);
    int v61 = vcvtms_s32_f32(*(float *)(v58 + v57 - 4));
    int v62 = llroundf(v60);
    if (v61 >= 82) {
      int v61 = 82;
    }
    *(v59 - 2) = v61 & ~(v61 >> 31);
    if (v62 >= 106) {
      int v63 = 106;
    }
    else {
      int v63 = v62;
    }
    int v64 = v63 & ~(v63 >> 31);
    *(v59 - 1) = v64;
    *float v59 = v60 < (float)v64;
    v59 += 3;
    v57 += 8;
  }
  while (v57 != 112);
  return result;
}

void peridot::checkSpViolations(peridot *this, PDAnchors *a2, spViolations *a3)
{
  char x = 0;
  uint64_t v4 = 0;
  uint64_t v80 = *MEMORY[0x263EF8340];
  a2->banks[0].anchors[0].char x = 0;
  int v5 = (char *)this + 1;
  uint64_t v6 = 1;
  float32x4_t v66 = a2;
  do
  {
    uint64_t v7 = 0;
    uint64_t v59 = v6;
    int v63 = v5;
    do
    {
      int v8 = (char)*(v5 - 1);
      int v9 = (char)*v5;
      BOOL v10 = (*(v5 - 1) - 82) >= 0xB0u && (*v5 - 106) >= 0x98u;
      char v11 = !v10;
      if (v10)
      {
        *(&a2->banks[0].anchors[0].x + v6) = v11;
        char x = x != 0;
      }
      else
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136316930;
          int v68 = "checkSpViolations";
          __int16 v69 = 2048;
          uint64_t v70 = v4;
          __int16 v71 = 2048;
          uint64_t v72 = v7;
          __int16 v73 = 1024;
          int v74 = v8;
          __int16 v75 = 1024;
          int v76 = v9;
          __int16 v77 = 2048;
          *(void *)BOOL v78 = 0x3FF8000000000000;
          *(_WORD *)&v78[8] = 2048;
          *(void *)long long v79 = 0x4054600000000000;
          *(_WORD *)&v79[8] = 2048;
          *(void *)&v79[10] = 0x405A600000000000;
          _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "GMO: %s: validation failed (distance from boundaries) in bank:%zu, spot:%zu (x:%d, y:%d), BORDER_DISTANCE_MIN:%f, (SPAD_RES[0] - 1 - BORDER_DISTANCE_MIN):%f, (SPAD_RES[1] - 1 - BORDER_DISTANCE_MIN):%f", buf, 0x4Au);
        }
        a2 = v66;
        *(&v66->banks[0].anchors[0].x + v6) = v11;
        char x = 1;
      }
      v5 += 3;
      a2->banks[0].anchors[0].char x = x;
      ++v7;
      v6 += 4;
    }
    while (v7 != 14);
    ++v4;
    uint64_t v6 = v59 + 56;
    int v5 = v63 + 42;
  }
  while (v4 != 8);
  uint64_t v56 = 0;
  float v12 = (char *)this + 1;
  int v13 = &byte_259123818;
  uint64_t v14 = 2;
  while (2)
  {
    uint64_t v15 = 0;
    int v54 = v13;
    int v55 = v12;
    uint64_t v53 = v14;
    do
    {
      int v17 = (char)(*(v13 - 224) + 1);
      int v18 = (char)(*(v13 - 8) - 1);
      int v19 = (char)(*v13 - 2);
      int v20 = *(v12 - 1);
      int v21 = (char)(*(v13 - 232) + 1);
      if (v21 <= v20)
      {
        int v23 = *v12;
        BOOL v16 = v23 < v17 || v20 > v18 || v23 > v19;
        int v22 = (BOOL *)a2 + v14;
        *(&a2->banks[0].anchors[0].x + v14) = v16;
        if (!v16)
        {
          LOBYTE(v16) = 0;
          goto LABEL_20;
        }
        int v60 = v18;
        int v64 = v17;
      }
      else
      {
        int v60 = (char)(*(v13 - 8) - 1);
        int v64 = (char)(*(v13 - 224) + 1);
        int v22 = &a2->banks[0].anchors[0].useNorthHS2 + 56 * v56 + 4 * v15;
        LOBYTE(v16) = 1;
        *(&a2->banks[0].anchors[0].x + v14) = 1;
      }
      BOOL v26 = os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT);
      a2 = v66;
      if (v26)
      {
        int v27 = *v12;
        *(_DWORD *)buf = 136317186;
        int v68 = "checkSpViolations";
        __int16 v69 = 2048;
        uint64_t v70 = v56;
        __int16 v71 = 2048;
        uint64_t v72 = v15;
        __int16 v73 = 1024;
        int v74 = v20;
        __int16 v75 = 1024;
        int v76 = v27;
        __int16 v77 = 1024;
        *(_DWORD *)BOOL v78 = v21;
        *(_WORD *)&v78[4] = 1024;
        *(_DWORD *)&v78[6] = v64;
        *(_WORD *)long long v79 = 1024;
        *(_DWORD *)&v79[2] = v60;
        *(_WORD *)&v79[6] = 1024;
        *(_DWORD *)&v79[8] = v19;
        _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "GMO: %s: validation failed (bounding box boundaries) in bank:%zu, spot:%zu (x:%d, y:%d), min(x:%d, y:%d), max(x:%d, y:%d)", buf, 0x44u);
        a2 = v66;
        LOBYTE(v16) = *v22;
        char x = v66->banks[0].anchors[0].x;
      }
LABEL_20:
      v12 += 3;
      v13 += 16;
      char x = (v16 | x) != 0;
      a2->banks[0].anchors[0].char x = x;
      ++v15;
      v14 += 4;
    }
    while (v15 != 14);
    uint64_t v14 = v53 + 56;
    float v12 = v55 + 42;
    int v13 = v54 + 448;
    if (++v56 != 8) {
      continue;
    }
    break;
  }
  uint64_t v28 = 0;
  int v29 = (char *)this + 13;
  uint64_t v30 = 3;
  int v31 = &_os_log_internal;
  do
  {
    uint64_t v33 = 0;
    int v61 = v29;
    uint64_t v57 = v30;
    do
    {
      int v34 = *(v29 - 12);
      int v35 = *v29;
      char v36 = v35 - 12 < v34;
      *(&a2->banks[0].anchors[0].x + v30) = v36;
      if (v35 - 12 < v34)
      {
        BOOL v37 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
        a2 = v66;
        if (v37)
        {
          *(_DWORD *)buf = 136316418;
          int v68 = "checkSpViolations";
          __int16 v69 = 2048;
          uint64_t v70 = v28;
          __int16 v71 = 2048;
          uint64_t v72 = v33;
          __int16 v73 = 1024;
          int v74 = v34;
          __int16 v75 = 1024;
          int v76 = v35;
          __int16 v77 = 2048;
          *(void *)BOOL v78 = 0x4028000000000000;
          _os_log_impl(&dword_258FEE000, v31, OS_LOG_TYPE_DEFAULT, "GMO: %s: validation failed (minimum Y distance) in bank:%zu, spot:%zu (y:%d), (y+4:%d), (CENTER_DISTANCE_MIN:%f)", buf, 0x36u);
          a2 = v66;
          char v36 = *(&v66->banks[0].anchors[0].x + v30);
          char x = v66->banks[0].anchors[0].x;
        }
      }
      else
      {
        char v36 = 0;
      }
      v29 += 3;
      char x = (v36 | x) != 0;
      a2->banks[0].anchors[0].char x = x;
      ++v33;
      v30 += 4;
    }
    while (v33 != 10);
    int v32 = (char *)a2 + 56 * v28;
    v32[43] = 0;
    v32[47] = 0;
    v32[51] = 0;
    v32[55] = 0;
    ++v28;
    uint64_t v30 = v57 + 56;
    int v29 = v61 + 42;
  }
  while (v28 != 8);
  uint64_t v38 = 0;
  a2->banks[0].anchors[1].float y = 0;
  a2->banks[0].anchors[2].useNorthHS2 = 0;
  a2->banks[0].anchors[4].char x = 0;
  a2->banks[0].anchors[5].float y = 0;
  a2->banks[0].anchors[6].useNorthHS2 = 0;
  a2->banks[0].anchors[8].char x = 0;
  a2->banks[0].anchors[9].float y = 0;
  a2->banks[0].anchors[10].useNorthHS2 = 0;
  a2->banks[0].anchors[12].char x = 0;
  a2->banks[0].anchors[13].float y = 0;
  a2->banks[1].anchors[0].useNorthHS2 = 0;
  a2->banks[1].anchors[2].char x = 0;
  a2->banks[1].anchors[3].float y = 0;
  a2->banks[1].anchors[4].useNorthHS2 = 0;
  a2->banks[1].anchors[6].char x = 0;
  a2->banks[1].anchors[7].float y = 0;
  a2->banks[1].anchors[8].useNorthHS2 = 0;
  a2->banks[1].anchors[10].char x = 0;
  a2->banks[1].anchors[11].float y = 0;
  a2->banks[1].anchors[12].useNorthHS2 = 0;
  a2->banks[2].anchors[0].char x = 0;
  a2->banks[2].anchors[1].float y = 0;
  a2->banks[2].anchors[2].useNorthHS2 = 0;
  a2->banks[2].anchors[4].char x = 0;
  a2->banks[2].anchors[5].float y = 0;
  a2->banks[2].anchors[6].useNorthHS2 = 0;
  a2->banks[2].anchors[8].char x = 0;
  a2->banks[2].anchors[9].float y = 0;
  a2->banks[2].anchors[10].useNorthHS2 = 0;
  a2->banks[2].anchors[12].char x = 0;
  a2->banks[2].anchors[13].float y = 0;
  a2->banks[3].anchors[0].useNorthHS2 = 0;
  a2->banks[3].anchors[2].char x = 0;
  a2->banks[3].anchors[3].float y = 0;
  a2->banks[3].anchors[4].useNorthHS2 = 0;
  a2->banks[3].anchors[6].char x = 0;
  a2->banks[3].anchors[7].float y = 0;
  a2->banks[3].anchors[8].useNorthHS2 = 0;
  a2->banks[3].anchors[10].char x = 0;
  a2->banks[3].anchors[11].float y = 0;
  a2->banks[3].anchors[12].useNorthHS2 = 0;
  a2->banks[4].anchors[0].char x = 0;
  a2->banks[4].anchors[1].float y = 0;
  a2->banks[4].anchors[2].useNorthHS2 = 0;
  a2->banks[4].anchors[4].char x = 0;
  a2->banks[4].anchors[5].float y = 0;
  a2->banks[4].anchors[6].useNorthHS2 = 0;
  a2->banks[4].anchors[8].char x = 0;
  a2->banks[4].anchors[9].float y = 0;
  a2->banks[4].anchors[10].useNorthHS2 = 0;
  a2->banks[4].anchors[12].char x = 0;
  a2->banks[4].anchors[13].float y = 0;
  a2->banks[5].anchors[0].useNorthHS2 = 0;
  a2->banks[5].anchors[2].char x = 0;
  a2->banks[5].anchors[3].float y = 0;
  a2->banks[5].anchors[4].useNorthHS2 = 0;
  a2->banks[5].anchors[6].char x = 0;
  a2->banks[5].anchors[7].float y = 0;
  a2->banks[5].anchors[8].useNorthHS2 = 0;
  a2->banks[5].anchors[10].char x = 0;
  a2->banks[5].anchors[11].float y = 0;
  a2->banks[5].anchors[12].useNorthHS2 = 0;
  a2->banks[6].anchors[0].char x = 0;
  a2->banks[6].anchors[1].float y = 0;
  a2->banks[6].anchors[2].useNorthHS2 = 0;
  a2->banks[6].anchors[4].char x = 0;
  a2->banks[6].anchors[5].float y = 0;
  a2->banks[6].anchors[6].useNorthHS2 = 0;
  a2->banks[6].anchors[8].char x = 0;
  a2->banks[6].anchors[9].float y = 0;
  a2->banks[6].anchors[10].useNorthHS2 = 0;
  a2->banks[6].anchors[12].char x = 0;
  a2->banks[6].anchors[13].float y = 0;
  a2->banks[7].anchors[0].useNorthHS2 = 0;
  a2->banks[7].anchors[2].char x = 0;
  a2->banks[7].anchors[3].float y = 0;
  a2->banks[7].anchors[4].useNorthHS2 = 0;
  a2->banks[7].anchors[6].char x = 0;
  a2->banks[7].anchors[7].float y = 0;
  a2->banks[7].anchors[8].useNorthHS2 = 0;
  a2->banks[7].anchors[10].char x = 0;
  a2->banks[7].anchors[11].float y = 0;
  a2->banks[7].anchors[12].useNorthHS2 = 0;
  a2[1].banks[0].anchors[0].char x = 0;
  a2[1].banks[0].anchors[1].float y = 0;
  a2[1].banks[0].anchors[2].useNorthHS2 = 0;
  a2[1].banks[0].anchors[4].char x = 0;
  a2[1].banks[0].anchors[5].float y = 0;
  a2[1].banks[0].anchors[6].useNorthHS2 = 0;
  a2[1].banks[0].anchors[8].char x = 0;
  a2[1].banks[0].anchors[9].float y = 0;
  a2[1].banks[0].anchors[10].useNorthHS2 = 0;
  a2[1].banks[0].anchors[12].char x = 0;
  a2[1].banks[0].anchors[13].float y = 0;
  a2[1].banks[1].anchors[0].useNorthHS2 = 0;
  a2[1].banks[1].anchors[2].char x = 0;
  a2[1].banks[1].anchors[3].float y = 0;
  a2[1].banks[1].anchors[4].useNorthHS2 = 0;
  a2[1].banks[1].anchors[6].char x = 0;
  a2[1].banks[1].anchors[7].float y = 0;
  a2[1].banks[1].anchors[8].useNorthHS2 = 0;
  a2[1].banks[1].anchors[10].char x = 0;
  a2[1].banks[1].anchors[11].float y = 0;
  a2[1].banks[1].anchors[12].useNorthHS2 = 0;
  a2[1].banks[2].anchors[0].char x = 0;
  a2[1].banks[2].anchors[1].float y = 0;
  a2[1].banks[2].anchors[2].useNorthHS2 = 0;
  a2[1].banks[2].anchors[4].char x = 0;
  a2[1].banks[2].anchors[5].float y = 0;
  int v62 = (char *)this + 1;
  a2[1].banks[2].anchors[6].useNorthHS2 = 0;
  a2[1].banks[2].anchors[8].char x = 0;
  a2[1].banks[2].anchors[9].float y = 0;
  do
  {
    uint64_t v39 = 0;
    uint64_t v58 = (char *)this + 42 * v38;
    uint64_t v65 = v38;
    do
    {
      int v40 = (char *)a2 + 56 * v38 + 4 * v39;
      int v42 = v40[4];
      uint64_t v41 = v40 + 4;
      if (!v42)
      {
        uint64_t v43 = 0;
        float v44 = &v58[3 * v39];
        int v45 = v62;
        do
        {
          if (v39 != v43)
          {
            int v46 = *(v45 - 1);
            int v47 = *v44;
            unsigned int v48 = v46 - v47;
            if (v46 - v47 < 0) {
              unsigned int v48 = v47 - v46;
            }
            if (v48 <= 0xB)
            {
              int v49 = *v45;
              int v50 = v44[1];
              unsigned int v51 = v49 - v50;
              if (v49 - v50 < 0) {
                unsigned int v51 = v50 - v49;
              }
              if (v51 <= 0xB)
              {
                if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136316930;
                  int v68 = "checkSpViolations";
                  __int16 v69 = 2048;
                  uint64_t v70 = v65;
                  __int16 v71 = 2048;
                  uint64_t v72 = v39;
                  __int16 v73 = 1024;
                  int v74 = v47;
                  __int16 v75 = 1024;
                  int v76 = v50;
                  __int16 v77 = 1024;
                  *(_DWORD *)BOOL v78 = v46;
                  *(_WORD *)&v78[4] = 1024;
                  *(_DWORD *)&v78[6] = v49;
                  *(_WORD *)long long v79 = 2048;
                  *(void *)&v79[2] = 0x4028000000000000;
                  _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEFAULT, "GMO: %s: validation failed (nearest neighbor) in bank:%zu, spot:%zu (x:%d, y:%d), spotIdInner(x:%d, y:%d), CENTER_DISTANCE_MIN:%f", buf, 0x42u);
                }
                unsigned char *v41 = 1;
                a2 = v66;
                v66->banks[0].anchors[0].char x = 1;
              }
            }
          }
          ++v43;
          v45 += 3;
        }
        while (v43 != 14);
      }
      ++v39;
      uint64_t v38 = v65;
    }
    while (v39 != 14);
    uint64_t v38 = v65 + 1;
    v62 += 42;
  }
  while (v65 != 7);
}

void peridot::PeridotDXP::refPixelDetectorEstimator_inner(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  uint64_t v63 = 0;
  unint64_t v62 = *(unsigned __int8 *)(a1 + 21);
  if (*(unsigned char *)(a1 + 21))
  {
    if (0xAAAAAAAAAAAAAAABLL * (v63 >> 4) < v62)
    {
      unint64_t v4 = 0x5555555555555556 * (v63 >> 4);
      if (v4 <= v62) {
        unint64_t v4 = *(unsigned __int8 *)(a1 + 21);
      }
      if (0xAAAAAAAAAAAAAAABLL * (v63 >> 4) >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v5 = 0x555555555555555;
      }
      else {
        unint64_t v5 = v4;
      }
      int v67 = &v63;
      if (v5 <= 0x555555555555555)
      {
        int v64 = (char *)operator new(48 * v5);
        uint64_t v65 = v64;
        float32x4_t v66 = &v64[48 * v5];
        uint64_t v6 = v64;
        *(_OWORD *)(v64 + 8) = 0u;
        *((void *)v6 + 5) = 0;
        *(_OWORD *)(v6 + 24) = 0u;
        *(void *)uint64_t v6 = off_270717568;
        *((void *)v6 + 2) = 64;
        operator new[]();
      }
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    MEMORY[8] = 0u;
    MEMORY[0x28] = 0;
    MEMORY[0x18] = 0u;
    MEMORY[0] = off_270717568;
    MEMORY[0x10] = 64;
    operator new[]();
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 21);
  if (!*(unsigned char *)(a1 + 21) || (uint64_t v8 = *(unsigned __int8 *)(a1 + 20), !*(unsigned char *)(a1 + 20)))
  {
LABEL_130:
    *(void *)operator new(8uLL) = 0;
    *(void *)operator new(8uLL) = 0;
    *(void *)operator new(8uLL) = 0;
    operator new[]();
  }
  uint64_t v9 = 0;
  uint64_t v10 = *a4;
  *(float *)&a2 = 1.0 / (float)v8;
  float32x4_t v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a2, 0);
LABEL_16:
  uint64_t v12 = 0;
  int v13 = *(float32x4_t **)(48 * v9 + 8);
  uint64_t v14 = *(float32x4_t **)(48 * v9 + 0x20);
  uint64_t v15 = v13 + 16;
  BOOL v16 = v14 + 16;
  BOOL v18 = v13 < &v14[16] && v14 < v15;
  while (1)
  {
    uint64_t v19 = v10 + 48 * (v9 * v8 + v12);
    int v20 = *(float32x4_t **)(v19 + 8);
    int v21 = *(float32x4_t **)(v19 + 32);
    if (v12)
    {
      int v22 = v21 + 16;
      BOOL v24 = v13 < &v20[16] && v20 < v15;
      if (v13 < v22 && v21 < v15) {
        BOOL v24 = 1;
      }
      int v27 = v14 < &v20[16] && v20 < v16 || v24;
      if (v14 < v22 && v21 < v16) {
        int v27 = 1;
      }
      if ((v27 | v18) == 1)
      {
        for (uint64_t i = 0; i != 64; ++i)
        {
          v13->f32[i] = v13->f32[i] + (float)(v20->f32[i] * *(float *)&a2);
          v14->f32[i] = v14->f32[i] + (float)(v21->f32[i] * *(float *)&a2);
        }
        goto LABEL_24;
      }
      *int v13 = vmlaq_f32(*v13, v11, *v20);
      *uint64_t v14 = vmlaq_f32(*v14, v11, *v21);
      v13[1] = vmlaq_f32(v13[1], v11, v20[1]);
      v14[1] = vmlaq_f32(v14[1], v11, v21[1]);
      v13[2] = vmlaq_f32(v13[2], v11, v20[2]);
      v14[2] = vmlaq_f32(v14[2], v11, v21[2]);
      v13[3] = vmlaq_f32(v13[3], v11, v20[3]);
      v14[3] = vmlaq_f32(v14[3], v11, v21[3]);
      v13[4] = vmlaq_f32(v13[4], v11, v20[4]);
      v14[4] = vmlaq_f32(v14[4], v11, v21[4]);
      v13[5] = vmlaq_f32(v13[5], v11, v20[5]);
      v14[5] = vmlaq_f32(v14[5], v11, v21[5]);
      v13[6] = vmlaq_f32(v13[6], v11, v20[6]);
      v14[6] = vmlaq_f32(v14[6], v11, v21[6]);
      v13[7] = vmlaq_f32(v13[7], v11, v20[7]);
      v14[7] = vmlaq_f32(v14[7], v11, v21[7]);
      v13[8] = vmlaq_f32(v13[8], v11, v20[8]);
      v14[8] = vmlaq_f32(v14[8], v11, v21[8]);
      v13[9] = vmlaq_f32(v13[9], v11, v20[9]);
      v14[9] = vmlaq_f32(v14[9], v11, v21[9]);
      v13[10] = vmlaq_f32(v13[10], v11, v20[10]);
      v14[10] = vmlaq_f32(v14[10], v11, v21[10]);
      v13[11] = vmlaq_f32(v13[11], v11, v20[11]);
      v14[11] = vmlaq_f32(v14[11], v11, v21[11]);
      v13[12] = vmlaq_f32(v13[12], v11, v20[12]);
      v14[12] = vmlaq_f32(v14[12], v11, v21[12]);
      v13[13] = vmlaq_f32(v13[13], v11, v20[13]);
      v14[13] = vmlaq_f32(v14[13], v11, v21[13]);
      v13[14] = vmlaq_f32(v13[14], v11, v20[14]);
      v14[14] = vmlaq_f32(v14[14], v11, v21[14]);
    }
    else
    {
      uint64_t v30 = *(float32x4_t **)(48 * v9 + 8);
      int v31 = *(float32x4_t **)(48 * v9 + 0x20);
      int v32 = v30 + 16;
      uint64_t v33 = v31 + 16;
      int v34 = v20 + 16;
      int v35 = v21 + 16;
      BOOL v37 = v30 < &v31[16] && v31 < v32;
      if (v30 < v15 && v13 < v32) {
        BOOL v37 = 1;
      }
      if (v30 < v16 && v14 < v32) {
        BOOL v37 = 1;
      }
      if (v30 < v34 && v20 < v32) {
        BOOL v37 = 1;
      }
      int v42 = v30 < v35 && v21 < v32 || v37;
      if (v31 < v15 && v13 < v33) {
        int v42 = 1;
      }
      if (v31 < v16 && v14 < v33) {
        int v42 = 1;
      }
      BOOL v46 = v31 < v34 && v20 < v33;
      BOOL v48 = v31 < v35 && v21 < v33;
      int v49 = v46 || v48;
      BOOL v51 = v13 < v34 && v20 < v15;
      int v52 = v49 | v51;
      BOOL v54 = v13 < v35 && v21 < v15;
      int v55 = v52 | v54;
      BOOL v57 = v14 < v34 && v20 < v16;
      int v58 = v55 | v57;
      BOOL v60 = v14 < v35 && v21 < v16;
      if ((v42 | v58 | v60 | v18))
      {
        for (uint64_t j = 0; j != 64; ++j)
        {
          v30->i32[j] = 0;
          v31->i32[j] = 0;
          v13->f32[j] = v13->f32[j] + (float)(v20->f32[j] * *(float *)&a2);
          v14->f32[j] = v14->f32[j] + (float)(v21->f32[j] * *(float *)&a2);
        }
        goto LABEL_24;
      }
      *uint64_t v30 = 0u;
      *int v31 = 0u;
      *int v13 = vmlaq_f32(*v13, v11, *v20);
      *uint64_t v14 = vmlaq_f32(*v14, v11, *v21);
      v30[1] = 0u;
      v31[1] = 0u;
      v13[1] = vmlaq_f32(v13[1], v11, v20[1]);
      v14[1] = vmlaq_f32(v14[1], v11, v21[1]);
      v30[2] = 0u;
      v31[2] = 0u;
      v13[2] = vmlaq_f32(v13[2], v11, v20[2]);
      v14[2] = vmlaq_f32(v14[2], v11, v21[2]);
      v30[3] = 0u;
      v31[3] = 0u;
      v13[3] = vmlaq_f32(v13[3], v11, v20[3]);
      v14[3] = vmlaq_f32(v14[3], v11, v21[3]);
      v30[4] = 0u;
      v31[4] = 0u;
      v13[4] = vmlaq_f32(v13[4], v11, v20[4]);
      v14[4] = vmlaq_f32(v14[4], v11, v21[4]);
      v30[5] = 0u;
      v31[5] = 0u;
      v13[5] = vmlaq_f32(v13[5], v11, v20[5]);
      v14[5] = vmlaq_f32(v14[5], v11, v21[5]);
      v30[6] = 0u;
      v31[6] = 0u;
      v13[6] = vmlaq_f32(v13[6], v11, v20[6]);
      v14[6] = vmlaq_f32(v14[6], v11, v21[6]);
      v30[7] = 0u;
      v31[7] = 0u;
      v13[7] = vmlaq_f32(v13[7], v11, v20[7]);
      v14[7] = vmlaq_f32(v14[7], v11, v21[7]);
      v30[8] = 0u;
      v31[8] = 0u;
      v13[8] = vmlaq_f32(v13[8], v11, v20[8]);
      v14[8] = vmlaq_f32(v14[8], v11, v21[8]);
      v30[9] = 0u;
      v31[9] = 0u;
      v13[9] = vmlaq_f32(v13[9], v11, v20[9]);
      v14[9] = vmlaq_f32(v14[9], v11, v21[9]);
      v30[10] = 0u;
      v31[10] = 0u;
      v13[10] = vmlaq_f32(v13[10], v11, v20[10]);
      v14[10] = vmlaq_f32(v14[10], v11, v21[10]);
      v30[11] = 0u;
      v31[11] = 0u;
      v13[11] = vmlaq_f32(v13[11], v11, v20[11]);
      v14[11] = vmlaq_f32(v14[11], v11, v21[11]);
      v30[12] = 0u;
      v31[12] = 0u;
      v13[12] = vmlaq_f32(v13[12], v11, v20[12]);
      v14[12] = vmlaq_f32(v14[12], v11, v21[12]);
      v30[13] = 0u;
      v31[13] = 0u;
      v13[13] = vmlaq_f32(v13[13], v11, v20[13]);
      v14[13] = vmlaq_f32(v14[13], v11, v21[13]);
      v30[14] = 0u;
      v31[14] = 0u;
      v13[14] = vmlaq_f32(v13[14], v11, v20[14]);
      v14[14] = vmlaq_f32(v14[14], v11, v21[14]);
      v30[15] = 0u;
      v31[15] = 0u;
    }
    v13[15] = vmlaq_f32(v13[15], v11, v20[15]);
    v14[15] = vmlaq_f32(v14[15], v11, v21[15]);
LABEL_24:
    if (++v12 == v8)
    {
      if (++v9 == v7) {
        goto LABEL_130;
      }
      goto LABEL_16;
    }
  }
}

void sub_259044570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,void *__p)
{
  std::__split_buffer<peridot::RefHistogramAllSpots>::~__split_buffer(v32 - 184);
  uint64_t v34 = *(void *)(v32 - 216);
  if (v34)
  {
    uint64_t v35 = *(void *)(v32 - 208);
    char v36 = *(void **)(v32 - 216);
    if (v35 != v34)
    {
      uint64_t v37 = v35 - 48;
      do
      {
        *(void *)(v35 - 24) = off_270717568;
        uint64_t v38 = *(void *)(v35 - 16);
        if (v38) {
          MEMORY[0x25A2D62A0](v38, 0x1000C8052888210);
        }
        *(void *)(v35 - 8) = 0;
        *(void *)(v35 - 48) = off_270717568;
        uint64_t v39 = *(void *)(v35 - 40);
        if (v39) {
          MEMORY[0x25A2D62A0](v39, 0x1000C8052888210);
        }
        *(void *)(v35 - 32) = 0;
        v37 -= 48;
        v35 -= 48;
      }
      while (v35 != v34);
      char v36 = *(void **)(v32 - 216);
    }
    *(void *)(v32 - 208) = v34;
    operator delete(v36);
  }
  _Unwind_Resume(a1);
}

void peridot::PeridotDXP::getStrayRisingEdge(uint64_t a1, uint64_t a2, const float *a3, uint64_t a4)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  if (a4)
  {
    if (a4 == 1)
    {
      unint64_t v4 = 0;
LABEL_7:
      uint64_t v8 = a4 - v4;
      uint64_t v9 = &v12[v4];
      uint64_t v10 = (float *)&a3[2 * v4 + 1];
      do
      {
        _DWORD *v9 = vcvtas_u32_f32(*(v10 - 1));
        float v11 = *v10;
        v10 += 2;
        v9[3] = vcvtas_u32_f32(v11);
        ++v9;
        --v8;
      }
      while (v8);
      goto LABEL_9;
    }
    unint64_t v4 = a4 & 0xFFFFFFFFFFFFFFFELL;
    unint64_t v5 = v12;
    uint64_t v6 = a3;
    unint64_t v7 = a4 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      float32x2x2_t v14 = vld2_f32(v6);
      v6 += 4;
      *(uint32x2_t *)unint64_t v5 = vcvt_u32_f32(vrnda_f32(v14.val[0]));
      *(uint32x2_t *)(v5 + 3) = vcvt_u32_f32(vrnda_f32(v14.val[1]));
      v5 += 2;
      v7 -= 2;
    }
    while (v7);
    if (v4 != a4) {
      goto LABEL_7;
    }
  }
LABEL_9:
  operator new[]();
}

void sub_259044F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (!a16) {
    _Unwind_Resume(exception_object);
  }
  MEMORY[0x25A2D62A0](a16, 0x1000C8052888210);
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<peridot::RefHistogramAllSpots>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  uint64_t v2 = result[1];
  uint64_t v3 = a2[1];
  if (v2 != *result)
  {
    uint64_t v4 = *(void *)(v2 - 32);
    *(void *)(v3 - 48) = off_270717568;
    *(void *)(v3 - 32) = v4;
    operator new[]();
  }
  a2[1] = v3;
  uint64_t v5 = *result;
  *double result = v3;
  a2[1] = v5;
  uint64_t v6 = result[1];
  result[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = result[2];
  result[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
  return result;
}

void sub_2590451B4(_Unwind_Exception *exception_object)
{
  *(v3 - 6) = v1;
  uint64_t v5 = *(v3 - 5);
  if (v5) {
    MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
  }
  *(v3 - 4) = 0;
  if (v3 != v2)
  {
    uint64_t v6 = v3;
    do
    {
      v3[3] = off_270717568;
      uint64_t v7 = v3[4];
      if (v7) {
        MEMORY[0x25A2D62A0](v7, 0x1000C8052888210);
      }
      v3[5] = 0;
      void *v3 = off_270717568;
      uint64_t v8 = v3[1];
      if (v8) {
        MEMORY[0x25A2D62A0](v8, 0x1000C8052888210);
      }
      v3[2] = 0;
      v3 += 6;
      v6 += 6;
    }
    while (v3 != v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_2590453C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t PeridotTelemetry::startSession(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 8) = a2;
  bzero((void *)(a1 + 16), 0xEC0uLL);
  *(void *)(a1 + 184) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 192) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 656) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 664) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 1128) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 1136) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 1600) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 1608) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 2072) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 2080) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 2544) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 2552) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 3016) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 3024) = arc4random_uniform(0x29u) + 10;
  *(void *)(a1 + 3488) = arc4random_uniform(0x10Fu) + 30;
  *(void *)(a1 + 3496) = arc4random_uniform(0x29u) + 10;
  *(void *)a1 = [MEMORY[0x263EFF910] now];
  return MEMORY[0x270F9A758]();
}

void sub_25904566C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFData *peridot::CalibManager::createIspFirmwareCalib(peridot::CalibManager *this, _PeridotCalib *a2, const __CFDictionary *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = [(_PeridotCalib *)v4 objectForKeyedSubscript:@"Version"];
  uint64_t v7 = v5;
  if (!v5 || (int v8 = [v5 unsignedIntValue], v8 == -1) || v8 == 4)
  {
    IspFirmwareCalibV4 = peridot::CalibManager::createIspFirmwareCalibV4(this, v4, v6);
  }
  else
  {
    if (v8 != 3)
    {
      peridot_depth_log("Unknown firmware calib version requested: %u", v8);
      IspFirmwareCalibV4 = 0;
      goto LABEL_11;
    }
    Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 1104);
    IspFirmwareCalibV4 = Mutable;
    if (Mutable)
    {
      CFDataSetLength(Mutable, 1104);
      MutableBytePtr = CFDataGetMutableBytePtr(IspFirmwareCalibV4);
      bzero(MutableBytePtr, 0x450uLL);
      peridot::CalibManager::getFwSpotLocations((uint64_t)this, v4, (float32x4_t *)__src);
      *(_DWORD *)MutableBytePtr = 3;
      long long v12 = *(_OWORD *)((char *)this + 8);
      long long v13 = *(_OWORD *)((char *)this + 24);
      *(_OWORD *)(MutableBytePtr + 40) = *(_OWORD *)((char *)this + 40);
      *(_OWORD *)(MutableBytePtr + 24) = v13;
      *(_OWORD *)(MutableBytePtr + 8) = v12;
      long long v14 = *(_OWORD *)((char *)this + 56);
      long long v15 = *(_OWORD *)((char *)this + 72);
      long long v16 = *(_OWORD *)((char *)this + 88);
      *((_DWORD *)MutableBytePtr + 26) = *((_DWORD *)this + 26);
      *(_OWORD *)(MutableBytePtr + 88) = v16;
      *(_OWORD *)(MutableBytePtr + 72) = v15;
      *(_OWORD *)(MutableBytePtr + 56) = v14;
      long long v17 = *(_OWORD *)((char *)this + 346204);
      long long v18 = *(_OWORD *)((char *)this + 346220);
      *((_OWORD *)MutableBytePtr + 65) = *(_OWORD *)((char *)this + 346232);
      *(_OWORD *)(MutableBytePtr + 1012) = v17;
      *(_OWORD *)(MutableBytePtr + 1028) = v18;
      long long v19 = *(_OWORD *)((char *)this + 346204);
      long long v20 = *(_OWORD *)((char *)this + 346220);
      *(_OWORD *)(MutableBytePtr + 1084) = *(_OWORD *)((char *)this + 346232);
      *((_OWORD *)MutableBytePtr + 67) = v20;
      *((_OWORD *)MutableBytePtr + 66) = v19;
      memcpy(MutableBytePtr + 108, __src, 0x388uLL);
    }
  }
  int v21 = +[PDUserDefaults defaults];
  int v22 = [v21 dumpIspPeridotCalibPath];

  if (v22)
  {
    int v23 = NSString;
    BOOL v24 = +[PDInternalUtils currTimeAsString];
    uint64_t v25 = [v23 stringWithFormat:@"%@/%@_IspPeridotCalib.bin", v22, v24];

    [(__CFData *)IspFirmwareCalibV4 writeToFile:v25 atomically:1];
  }

LABEL_11:
  return IspFirmwareCalibV4;
}

void sub_2590458A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFData *peridot::CalibManager::createIspFirmwareCalibV4(peridot::CalibManager *this, _PeridotCalib *a2, const __CFDictionary *a3)
{
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 536);
  CFDictionaryRef v6 = Mutable;
  if (Mutable)
  {
    CFDataSetLength(Mutable, 536);
    MutableBytePtr = CFDataGetMutableBytePtr(v6);
    bzero(MutableBytePtr, 0x218uLL);
    peridot::CalibManager::getFwSpotLocations((uint64_t)this, a2, v78);
    uint64_t v8 = 0;
    *(_DWORD *)MutableBytePtr = 4;
    long long v9 = *(_OWORD *)((char *)this + 8);
    long long v10 = *(_OWORD *)((char *)this + 24);
    *(_OWORD *)(MutableBytePtr + 40) = *(_OWORD *)((char *)this + 40);
    *(_OWORD *)(MutableBytePtr + 24) = v10;
    *(_OWORD *)(MutableBytePtr + 8) = v9;
    long long v11 = *(_OWORD *)((char *)this + 56);
    long long v12 = *(_OWORD *)((char *)this + 72);
    long long v13 = *(_OWORD *)((char *)this + 88);
    *((_DWORD *)MutableBytePtr + 26) = *((_DWORD *)this + 26);
    *(_OWORD *)(MutableBytePtr + 88) = v13;
    *(_OWORD *)(MutableBytePtr + 72) = v12;
    *(_OWORD *)(MutableBytePtr + 56) = v11;
    long long v14 = *(_OWORD *)((char *)this + 346204);
    long long v15 = *(_OWORD *)((char *)this + 346220);
    *(_OWORD *)(MutableBytePtr + 360) = *(_OWORD *)((char *)this + 346232);
    *(_OWORD *)(MutableBytePtr + 332) = v14;
    *(_OWORD *)(MutableBytePtr + 348) = v15;
    long long v16 = *(_OWORD *)((char *)this + 346204);
    long long v17 = *(_OWORD *)((char *)this + 346220);
    *(_OWORD *)(MutableBytePtr + 404) = *(_OWORD *)((char *)this + 346232);
    *(_OWORD *)(MutableBytePtr + 392) = v17;
    *(_OWORD *)(MutableBytePtr + 376) = v16;
    long long v18 = (BOOL *)(MutableBytePtr + 420);
    long long v19 = MutableBytePtr + 109;
    do
    {
      float v20 = v78[0].f32[v8 + 1];
      int v21 = vcvtms_s32_f32(v78[0].f32[v8]);
      int v22 = llroundf(v20);
      if (v21 >= 82) {
        int v21 = 82;
      }
      *(v19 - 1) = v21 & ~(v21 >> 31);
      if (v22 >= 106) {
        int v23 = 106;
      }
      else {
        int v23 = v22;
      }
      int v24 = v23 & ~(v23 >> 31);
      *long long v19 = v24;
      v19 += 2;
      *v18++ = v20 < (float)v24;
      v8 += 2;
    }
    while (v8 != 28);
    uint64_t v25 = (BOOL *)(MutableBytePtr + 434);
    BOOL v26 = MutableBytePtr + 137;
    for (uint64_t i = 28; i != 56; i += 2)
    {
      float v28 = v78[0].f32[i + 1];
      int v29 = vcvtms_s32_f32(v78[0].f32[i]);
      int v30 = llroundf(v28);
      if (v29 >= 82) {
        int v29 = 82;
      }
      *(v26 - 1) = v29 & ~(v29 >> 31);
      if (v30 >= 106) {
        int v31 = 106;
      }
      else {
        int v31 = v30;
      }
      int v32 = v31 & ~(v31 >> 31);
      *BOOL v26 = v32;
      v26 += 2;
      *v25++ = v28 < (float)v32;
    }
    uint64_t v33 = (BOOL *)(MutableBytePtr + 448);
    uint64_t v34 = MutableBytePtr + 165;
    do
    {
      float v35 = v78[0].f32[i + 1];
      int v36 = vcvtms_s32_f32(v78[0].f32[i]);
      int v37 = llroundf(v35);
      if (v36 >= 82) {
        int v36 = 82;
      }
      *(v34 - 1) = v36 & ~(v36 >> 31);
      if (v37 >= 106) {
        int v38 = 106;
      }
      else {
        int v38 = v37;
      }
      int v39 = v38 & ~(v38 >> 31);
      unsigned char *v34 = v39;
      v34 += 2;
      *v33++ = v35 < (float)v39;
      i += 2;
    }
    while (i != 84);
    int v40 = (BOOL *)(MutableBytePtr + 462);
    uint64_t v41 = MutableBytePtr + 193;
    do
    {
      float v42 = v78[0].f32[i + 1];
      int v43 = vcvtms_s32_f32(v78[0].f32[i]);
      int v44 = llroundf(v42);
      if (v43 >= 82) {
        int v43 = 82;
      }
      *(v41 - 1) = v43 & ~(v43 >> 31);
      if (v44 >= 106) {
        int v45 = 106;
      }
      else {
        int v45 = v44;
      }
      int v46 = v45 & ~(v45 >> 31);
      unsigned char *v41 = v46;
      v41 += 2;
      *v40++ = v42 < (float)v46;
      i += 2;
    }
    while (i != 112);
    int v47 = (BOOL *)(MutableBytePtr + 476);
    BOOL v48 = MutableBytePtr + 221;
    do
    {
      float v49 = v78[0].f32[i + 1];
      int v50 = vcvtms_s32_f32(v78[0].f32[i]);
      int v51 = llroundf(v49);
      if (v50 >= 82) {
        int v50 = 82;
      }
      *(v48 - 1) = v50 & ~(v50 >> 31);
      if (v51 >= 106) {
        int v52 = 106;
      }
      else {
        int v52 = v51;
      }
      int v53 = v52 & ~(v52 >> 31);
      *BOOL v48 = v53;
      v48 += 2;
      *v47++ = v49 < (float)v53;
      i += 2;
    }
    while (i != 140);
    BOOL v54 = (BOOL *)(MutableBytePtr + 490);
    int v55 = MutableBytePtr + 249;
    do
    {
      float v56 = v78[0].f32[i + 1];
      int v57 = vcvtms_s32_f32(v78[0].f32[i]);
      int v58 = llroundf(v56);
      if (v57 >= 82) {
        int v57 = 82;
      }
      *(v55 - 1) = v57 & ~(v57 >> 31);
      if (v58 >= 106) {
        int v59 = 106;
      }
      else {
        int v59 = v58;
      }
      int v60 = v59 & ~(v59 >> 31);
      unsigned char *v55 = v60;
      v55 += 2;
      *v54++ = v56 < (float)v60;
      i += 2;
    }
    while (i != 168);
    int v61 = (BOOL *)(MutableBytePtr + 504);
    unint64_t v62 = MutableBytePtr + 277;
    do
    {
      float v63 = v78[0].f32[i + 1];
      int v64 = vcvtms_s32_f32(v78[0].f32[i]);
      int v65 = llroundf(v63);
      if (v64 >= 82) {
        int v64 = 82;
      }
      *(v62 - 1) = v64 & ~(v64 >> 31);
      if (v65 >= 106) {
        int v66 = 106;
      }
      else {
        int v66 = v65;
      }
      int v67 = v66 & ~(v66 >> 31);
      *unint64_t v62 = v67;
      v62 += 2;
      *v61++ = v63 < (float)v67;
      i += 2;
    }
    while (i != 196);
    uint64_t v68 = (BOOL *)(MutableBytePtr + 518);
    __int16 v69 = MutableBytePtr + 305;
    do
    {
      float v70 = v78[0].f32[i + 1];
      int v71 = vcvtms_s32_f32(v78[0].f32[i]);
      int v72 = llroundf(v70);
      if (v71 >= 82) {
        int v71 = 82;
      }
      *(v69 - 1) = v71 & ~(v71 >> 31);
      if (v72 >= 106) {
        int v73 = 106;
      }
      else {
        int v73 = v72;
      }
      int v74 = v73 & ~(v73 >> 31);
      unsigned char *v69 = v74;
      v69 += 2;
      *v68++ = v70 < (float)v74;
      i += 2;
    }
    while (i != 224);
    __int16 v75 = +[PDUserDefaults defaults];
    int v76 = [v75 disableDynamicHS2];

    if (v76)
    {
      *(_OWORD *)(MutableBytePtr + 500) = 0u;
      *(_OWORD *)(MutableBytePtr + 516) = 0u;
      *(_OWORD *)(MutableBytePtr + 468) = 0u;
      *(_OWORD *)(MutableBytePtr + 484) = 0u;
      *(_OWORD *)(MutableBytePtr + 436) = 0u;
      *(_OWORD *)(MutableBytePtr + 452) = 0u;
      *(_OWORD *)(MutableBytePtr + 420) = 0u;
    }
  }
  return v6;
}

void sub_259045D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void peridot::CalibManager::getFwSpotLocations(uint64_t a1, void *a2, float32x4_t *a3)
{
  id v17 = a2;
  uint64_t v5 = [v17 objectForKeyedSubscript:@"SpotsAtOriginalLocation"];
  CFDictionaryRef v6 = v5;
  if (v5) {
    int v7 = [v5 BOOLValue];
  }
  else {
    int v7 = 0;
  }
  uint64_t v8 = [v17 objectForKeyedSubscript:@"SpotsOptimizedForDistance"];
  long long v9 = v8;
  if (v8) {
    float v10 = (float)(unint64_t)[v8 unsignedLongValue];
  }
  else {
    float v10 = 3000.0;
  }
  long long v11 = [v17 objectForKeyedSubscript:@"SpotsOptimizedForPlane"];
  long long v13 = v11;
  if (v11)
  {
    int v14 = [v11 BOOLValue];
    if (v7)
    {
LABEL_9:
      memcpy(a3, (const void *)(a1 + 344396), 0x388uLL);
      goto LABEL_12;
    }
  }
  else
  {
    int v14 = 0;
    if (v7) {
      goto LABEL_9;
    }
  }
  long long v15 = peridot::CalibManager::getPeridotCamera((peridot::CalibManager *)a1, v12);
  *(float *)v16.i32 = v10;
  peridot::compensateForParallax(v15, (int32x2_t *)(a1 + 344396), v14, a3, v16);

LABEL_12:
}

void sub_259045EA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_259045EE8()
{
}

uint64_t PeridotSuperFrame::loadFromBuffer(PeridotSuperFrame *this, unsigned char *a2, unint64_t a3, unint64_t *a4)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  if (a3 <= 0x13F)
  {
    peridot_depth_log("Size of peridot frame is too small: %lu", a2);
    return 0;
  }
  unsigned int v5 = a2[63];
  if (v5 - 2 >= 3)
  {
    peridot_depth_log("Unknown Peridot DT1 version %u", a2);
    return 0;
  }
  uint64_t v6 = a2[51];
  if (v5 <= 3) {
    unint64_t v7 = 9664 * a2[51];
  }
  else {
    unint64_t v7 = 9664 * a2[51] + 1024;
  }
  if (v7 > a3)
  {
    peridot_depth_log("Size of peridot frame is too small: expected %lu (should be %lu frames), got %lu", a2);
    return 0;
  }
  if (v6 >= 0x71)
  {
    peridot_depth_log("Super frame contains more frames (%lu) than supported (%lu)", a2);
    return 0;
  }
  long long v11 = (unsigned __int16 *)&a2[9280 * a2[51]];
  int v12 = *v11;
  if (a2[51])
  {
    uint64_t v13 = 0;
    int v14 = a2 + 50;
    long long v15 = (unsigned __int16 *)&a2[9280 * a2[51]];
    do
    {
      if (v14[13] - 2 >= 3)
      {
        peridot_depth_log("Unknown Peridot DT1 version %u for frame %lu in super frame", a2);
        return 0;
      }
      if (*v15 != v12)
      {
        peridot_depth_log("Super frame contains frames of mixed versions. This is not supported", a2);
        return 0;
      }
      if (v13 != *v14)
      {
        peridot_depth_log("Mismatch in frameIdxSuperframe", a2);
        return 0;
      }
      ++v13;
      v15 += 192;
      v14 += 9280;
    }
    while (v6 != v13);
  }
  if ((v12 - 7) < 2) {
    PeridotSuperFrame::readFrameConfigs<peridot::frameV2_configV7::sCIspPeridotFrameConfig>((uint64_t)this, (unint64_t)&a2[9280 * a2[51]], a2[51]);
  }
  if ((v12 - 9) < 2) {
    PeridotSuperFrame::readFrameConfigs<peridot::frameV3_configV10::sCIspPeridotFrameConfig>((uint64_t)this, (unint64_t)&a2[9280 * a2[51]], a2[51]);
  }
  if (v12 != 11)
  {
    peridot_depth_log("Unknown frame config version %hu in super frame", a2);
    return 0;
  }
  PeridotSuperFrame::readFrameConfigs<sCIspPeridotFrameConfig>((uint64_t)this, (unint64_t)&a2[9280 * a2[51]], a2[51]);
  if (!v6)
  {
    LODWORD(v18) = -1;
LABEL_48:
    *(void *)this = v6;
    *((void *)this + 1) = (int)v18 + 1;
    *((void *)this + 2) = a2;
    if (a2[63] >= 4u) {
      *((void *)this + 451) = &v11[192 * v6];
    }
    if (a4) {
      *a4 = v7;
    }
    return 1;
  }
  uint64_t v16 = 0;
  id v17 = a2 + 52;
  LODWORD(v18) = -1;
  int v19 = 256;
  do
  {
    float v20 = (char *)this + 8 * v16;
    uint64_t v21 = *(unsigned __int8 *)(*((void *)v20 + 115) + 2);
    if (v19 != v21)
    {
      uint64_t v18 = (int)v18 + 1;
      if (v18 == 28)
      {
        peridot_depth_log("Too many banks in a single super frame. This is not supported.", v21);
        return 0;
      }
      uint64_t v22 = 8 * v18;
      int v23 = (void *)((char *)this + 8 * v18);
      v23[466] = v16;
      v23[494] = -1;
      v23[522] = -1;
      v23[550] = -1;
      *(void *)&v31[v22 + 224] = 0;
      *(void *)&v31[v22] = 0;
      int v19 = v21;
    }
    int v24 = *(unsigned __int8 *)(*((void *)v20 + 339) + 1);
    switch(v24)
    {
      case 3:
        float v28 = (char *)this + 8 * (int)v18;
        uint64_t v21 = *((void *)v28 + 522);
        if (v21 == -1)
        {
          int v27 = v28 + 4176;
          goto LABEL_27;
        }
        break;
      case 2:
        int v29 = (char *)this + 8 * (int)v18;
        uint64_t v21 = *((void *)v29 + 550);
        if (v21 == -1)
        {
          int v27 = v29 + 4400;
          goto LABEL_27;
        }
        break;
      case 0:
        uint64_t v25 = 8 * (int)v18;
        ++*(void *)&v31[v25];
        BOOL v26 = (char *)this + v25;
        uint64_t v21 = *((void *)v26 + 494);
        if (v21 == -1)
        {
          uint64_t v21 = (int)v18;
          int v27 = v26 + 3952;
          *(void *)&v31[8 * (int)v18 + 224] = (*v17 >> 4)
                                              * ((unint64_t)(unsigned __int16)*v17 >> 12);
LABEL_27:
          void *v27 = v16;
        }
        break;
    }
    ++v16;
    v17 += 4640;
  }
  while (v6 != v16);
  if ((v18 & 0x80000000) != 0) {
    goto LABEL_48;
  }
  uint64_t v30 = 0;
  while (*(void *)&v31[8 * v30 + 224] == *(void *)&v31[8 * v30])
  {
    if ((int)v18 < (int)++v30) {
      goto LABEL_48;
    }
  }
  peridot_depth_log("Expected %zu normal frames for bank, but got %zu", v21);
  return 0;
}

uint64_t PeridotSuperFrame::readFrameConfigs<sCIspPeridotFrameConfig>(uint64_t result, unint64_t a2, unint64_t a3)
{
  if (a3)
  {
    int64x2_t v3 = vdupq_n_s64(a2);
    if (a3 >= 4)
    {
      unint64_t v4 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      int64x2_t v5 = (int64x2_t)xmmword_2591200C0;
      uint64_t v6 = (int64x2_t *)(result + 40);
      int64x2_t v7 = vdupq_n_s64(2uLL);
      int64x2_t v8 = vdupq_n_s64(0x302uLL);
      int64x2_t v9 = vdupq_n_s64(4uLL);
      unint64_t v10 = a3 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        v11.i64[0] = 384 * v5.i64[0];
        v11.i64[1] = 384 * v5.i64[1];
        int64x2_t v12 = vaddq_s64(v3, v11);
        v6[-1] = vaddq_s64(v12, v7);
        int64x2_t *v6 = vaddq_s64(v12, v8);
        int64x2_t v5 = vaddq_s64(v5, v9);
        v6 += 2;
        v10 -= 4;
      }
      while (v10);
      if (v4 == a3)
      {
LABEL_9:
        if (a3 >= 4)
        {
          int64x2_t v17 = (int64x2_t)xmmword_2591200C0;
          int64x2_t v18 = vdupq_n_s64(0x82uLL);
          int64x2_t v19 = vdupq_n_s64(0x382uLL);
          unint64_t v16 = a3 & 0xFFFFFFFFFFFFFFFCLL;
          int64x2_t v20 = vdupq_n_s64(4uLL);
          uint64_t v21 = (int64x2_t *)(result + 936);
          unint64_t v22 = a3 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v23.i64[0] = 384 * v17.i64[0];
            v23.i64[1] = 384 * v17.i64[1];
            int64x2_t v24 = vaddq_s64(v3, v23);
            v21[-1] = vaddq_s64(v24, v18);
            *uint64_t v21 = vaddq_s64(v24, v19);
            int64x2_t v17 = vaddq_s64(v17, v20);
            v21 += 2;
            v22 -= 4;
          }
          while (v22);
          if (v16 == a3)
          {
LABEL_16:
            if (a3 >= 4)
            {
              unint64_t v28 = a3 & 0xFFFFFFFFFFFFFFFCLL;
              int64x2_t v29 = (int64x2_t)xmmword_2591200C0;
              uint64_t v30 = (int64x2_t *)(result + 1832);
              int64x2_t v31 = vdupq_n_s64(0xE2uLL);
              int64x2_t v32 = vdupq_n_s64(0x3E2uLL);
              int64x2_t v33 = vdupq_n_s64(4uLL);
              unint64_t v34 = a3 & 0xFFFFFFFFFFFFFFFCLL;
              do
              {
                v35.i64[0] = 384 * v29.i64[0];
                v35.i64[1] = 384 * v29.i64[1];
                int64x2_t v36 = vaddq_s64(v3, v35);
                v30[-1] = vaddq_s64(v36, v31);
                *uint64_t v30 = vaddq_s64(v36, v32);
                int64x2_t v29 = vaddq_s64(v29, v33);
                v30 += 2;
                v34 -= 4;
              }
              while (v34);
              if (v28 == a3)
              {
LABEL_23:
                if (a3 > 3)
                {
                  unint64_t v40 = a3 & 0xFFFFFFFFFFFFFFFCLL;
                  int64x2_t v41 = (int64x2_t)xmmword_2591200C0;
                  float v42 = (int64x2_t *)(result + 2728);
                  int64x2_t v43 = vdupq_n_s64(0x133uLL);
                  int64x2_t v44 = vdupq_n_s64(0x433uLL);
                  int64x2_t v45 = vdupq_n_s64(4uLL);
                  unint64_t v46 = a3 & 0xFFFFFFFFFFFFFFFCLL;
                  do
                  {
                    v47.i64[0] = 384 * v41.i64[0];
                    v47.i64[1] = 384 * v41.i64[1];
                    int64x2_t v48 = vaddq_s64(v3, v47);
                    v42[-1] = vaddq_s64(v48, v43);
                    int64x2_t *v42 = vaddq_s64(v48, v44);
                    int64x2_t v41 = vaddq_s64(v41, v45);
                    v42 += 2;
                    v46 -= 4;
                  }
                  while (v46);
                  if (v40 == a3) {
                    goto LABEL_30;
                  }
                }
                else
                {
                  unint64_t v40 = 0;
                }
                unint64_t v49 = a3 - v40;
                int v50 = (uint64_t *)(result + 8 * v40 + 2712);
                uint64_t v51 = a2 + 384 * v40 + 307;
                do
                {
                  *v50++ = v51;
                  v51 += 384;
                  --v49;
                }
                while (v49);
LABEL_30:
                int v52 = (unsigned char *)(result + 3616);
                int v53 = (unsigned char *)(a2 + 306);
                do
                {
                  *v52++ = *v53;
                  v53 += 384;
                  --a3;
                }
                while (a3);
                return result;
              }
            }
            else
            {
              unint64_t v28 = 0;
            }
            unint64_t v37 = a3 - v28;
            int v38 = (uint64_t *)(result + 8 * v28 + 1816);
            uint64_t v39 = a2 + 384 * v28 + 226;
            do
            {
              *v38++ = v39;
              v39 += 384;
              --v37;
            }
            while (v37);
            goto LABEL_23;
          }
        }
        else
        {
          unint64_t v16 = 0;
        }
        unint64_t v25 = a3 - v16;
        BOOL v26 = (uint64_t *)(result + 8 * v16 + 920);
        uint64_t v27 = a2 + 384 * v16 + 130;
        do
        {
          *v26++ = v27;
          v27 += 384;
          --v25;
        }
        while (v25);
        goto LABEL_16;
      }
    }
    else
    {
      unint64_t v4 = 0;
    }
    unint64_t v13 = a3 - v4;
    int v14 = (uint64_t *)(result + 8 * v4 + 24);
    uint64_t v15 = a2 + 384 * v4 + 2;
    do
    {
      *v14++ = v15;
      v15 += 384;
      --v13;
    }
    while (v13);
    goto LABEL_9;
  }
  return result;
}

void sub_259046798(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void peridot::PeridotDXP::init(uint64_t a1, const _PeridotCalib *a2, void *a3, uint64_t a4, int a5)
{
  id v9 = a3;
  *(void *)(a1 + 181824) = a4;
  *(_WORD *)a1 = a5;
  *(unsigned char *)(a1 + 2) = BYTE2(a5);
  peridot::PeridotDXPCalib::init((peridot::PeridotDXPCalib *)(a1 + 16), a2, a4, v10);
}

void sub_259046CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double peridot::PeridotDXPRangeEstimation::init(uint64_t a1, uint64_t a2, int a3)
{
  *(_WORD *)a1 = a3;
  *(unsigned char *)(a1 + 2) = BYTE2(a3);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 5);
  unint64_t v4 = (char **)(a1 + 128);
  int64x2_t v5 = *(char **)(a1 + 128);
  *(void *)(a1 + 160) = vcvtad_u64_f64((double)(unint64_t)((uint64_t)(*(void *)(a2 + 3680) - *(void *)(a2 + 3672)) >> 2)* 0.35);
  if (*(void *)(a1 + 144) - (void)v5 > 0x33uLL)
  {
    float v10 = v5;
    goto LABEL_13;
  }
  uint64_t v6 = *(char **)(a1 + 136);
  int64x2_t v7 = (char *)operator new(0x34uLL);
  uint64_t v8 = v6 - v5;
  id v9 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
  float v10 = v9;
  if (v6 != v5)
  {
    if ((unint64_t)(v8 - 4) < 0x2C)
    {
      float v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
      do
      {
LABEL_10:
        int v17 = *((_DWORD *)v6 - 1);
        v6 -= 4;
        *((_DWORD *)v10 - 1) = v17;
        v10 -= 4;
      }
      while (v6 != v5);
      goto LABEL_11;
    }
    float v10 = &v7[(v6 - v5) & 0xFFFFFFFFFFFFFFFCLL];
    if (v6 - v7 - (v8 & 0xFFFFFFFFFFFFFFFCLL) < 0x20) {
      goto LABEL_10;
    }
    uint64_t v11 = v8 >> 2;
    unint64_t v12 = ((unint64_t)(v8 - 4) >> 2) + 1;
    unint64_t v13 = &v7[4 * v11 - 16];
    int v14 = (long long *)(v6 - 16);
    uint64_t v15 = v12 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      long long v16 = *v14;
      *((_OWORD *)v13 - 1) = *(v14 - 1);
      *(_OWORD *)unint64_t v13 = v16;
      v13 -= 32;
      v14 -= 2;
      v15 -= 8;
    }
    while (v15);
    float v10 = &v9[-4 * (v12 & 0x7FFFFFFFFFFFFFF8)];
    v6 -= 4 * (v12 & 0x7FFFFFFFFFFFFFF8);
    if (v12 != (v12 & 0x7FFFFFFFFFFFFFF8)) {
      goto LABEL_10;
    }
  }
LABEL_11:
  *(void *)(a1 + 128) = v10;
  *(void *)(a1 + 136) = v9;
  *(void *)(a1 + 144) = v7 + 52;
  if (v5)
  {
    operator delete(v5);
    float v10 = *v4;
  }
LABEL_13:
  unint64_t v18 = *(void *)(a1 + 136) - (void)v10;
  if (v18 > 0xF)
  {
    if (v18 != 16) {
      *(void *)(a1 + 136) = v10 + 16;
    }
  }
  else
  {
    std::vector<float>::__append((uint64_t)v4, 4 - (v18 >> 2));
    float v10 = *v4;
  }
  *(_OWORD *)float v10 = peridot::PeridotDXPRangeEstimation::getPulseParams(std::vector<float> const&,std::vector<float>&)::pulseParamsResult;
  double result = 131072.03;
  *(void *)(a1 + 152) = 0x410000003E4CCCCDLL;
  return result;
}

uint64_t peridot::PeridotDXPPreProcessor::init(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  *(_WORD *)a1 = a3;
  *(unsigned char *)(a1 + 2) = BYTE2(a3);
  *(_OWORD *)(a1 + 8) = xmmword_259120070;
  *(_OWORD *)(a1 + 24) = xmmword_259120B10;
  *(int64x2_t *)(a1 + 40) = vdupq_n_s64(1uLL);
  unint64_t v4 = (_OWORD *)(a1 + 56);
  *(_WORD *)(a1 + 804) = a3;
  *(unsigned char *)(a1 + 806) = BYTE2(a3);
  int v23 = 0;
  uint64_t v22 = 0;
  int v21 = 0;
  uint64_t v20 = 0;
  v4[15] = 0u;
  int64x2_t v5 = v4 + 15;
  v4[16] = 0u;
  v4[17] = 0u;
  v4[18] = 0u;
  v4[19] = 0u;
  v4[20] = 0u;
  v4[21] = 0u;
  v4[22] = 0u;
  v4[23] = 0u;
  v4[24] = 0u;
  v4[25] = 0u;
  v4[26] = 0u;
  v4[27] = 0u;
  v4[28] = 0u;
  v4[29] = 0u;
  uint64_t result = peridot::PeridotDXPBaselineRemoval::strayPeakUpdate((peridot::PeridotDXPBaselineRemoval *)v4, flt_25913472C, (float *)&v22, flt_259134738, (float *)&v20);
  if (!result)
  {
    uint64_t v7 = 0;
    *(_DWORD *)(a1 + 456) = 1082130432;
    *(_OWORD *)(a1 + 488) = xmmword_259120AC0;
    *(_OWORD *)(a1 + 504) = xmmword_259120AD0;
    *(_OWORD *)(a1 + 520) = xmmword_259120AB0;
    long long v8 = v5[9];
    *(_OWORD *)(a1 + 664) = v5[8];
    *(_OWORD *)(a1 + 680) = v8;
    long long v9 = v5[5];
    *(_OWORD *)(a1 + 600) = v5[4];
    *(_OWORD *)(a1 + 616) = v9;
    long long v10 = v5[7];
    *(_OWORD *)(a1 + 632) = v5[6];
    *(_OWORD *)(a1 + 648) = v10;
    long long v11 = v5[1];
    *(_OWORD *)(a1 + 536) = *v5;
    *(_OWORD *)(a1 + 552) = v11;
    long long v12 = v5[3];
    *(_OWORD *)(a1 + 568) = v5[2];
    *(_OWORD *)(a1 + 584) = v12;
    long long v13 = v5[11];
    *(_OWORD *)(a1 + 696) = v5[10];
    *(_OWORD *)(a1 + 712) = v13;
    long long v14 = v5[13];
    *(_OWORD *)(a1 + 728) = v5[12];
    *(_OWORD *)(a1 + 744) = v14;
    *(_OWORD *)(a1 + 760) = v5[14];
    *(_DWORD *)(a1 + 216) = 1082130432;
    *(int64x2_t *)(a1 + 224) = vdupq_n_s64(0x5CuLL);
    *(_OWORD *)(a1 + 240) = xmmword_259120AE0;
    *(void *)(a1 + 288) = 12;
    *(_OWORD *)(a1 + 256) = xmmword_259120B00;
    *(_OWORD *)(a1 + 272) = xmmword_259120AF0;
    *(_DWORD *)(a1 + 1096) = 1058642330;
    int64x2_t v15 = (int64x2_t)xmmword_2591200C0;
    int64x2_t v16 = vdupq_n_s64(2uLL);
    int64x2_t v17 = vdupq_n_s64(4uLL);
    do
    {
      unint64_t v18 = (int64x2_t *)(a1 + v7);
      v18[69] = v15;
      v18[70] = vaddq_s64(v15, v16);
      int64x2_t v15 = vaddq_s64(v15, v17);
      v7 += 32;
    }
    while (v7 != 2944);
    int64x2_t v19 = operator new(0x48uLL);
    *int64x2_t v19 = off_270717568;
    v19[2] = 92;
    operator new[]();
  }
  return result;
}

void sub_25904B4C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_25904CC28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,long long a35)
{
  operator delete(v36);
  operator delete(v35);
  _Unwind_Resume(a1);
}

void peridot::HDUnfoldClass::crtUnfold2PRI(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(a6 + 16) = 0;
  if (*(_DWORD *)(a3 + 20)) {
    operator new[]();
  }
  operator new[]();
}

void sub_25904E0B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p,uint64_t a51)
{
  Matrix<unsigned short>::~Matrix((uint64_t)&a35);
  Matrix<unsigned short>::~Matrix((uint64_t)&a40);
  MatrixNxPts<1u,int>::~MatrixNxPts((uint64_t)&a45);
  if (__p)
  {
    a51 = (uint64_t)__p;
    operator delete(__p);
    int v53 = *(void **)(v51 - 256);
    if (!v53)
    {
LABEL_3:
      BOOL v54 = *(void **)(v51 - 232);
      if (!v54) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    int v53 = *(void **)(v51 - 256);
    if (!v53) {
      goto LABEL_3;
    }
  }
  *(void *)(v51 - 248) = v53;
  operator delete(v53);
  BOOL v54 = *(void **)(v51 - 232);
  if (!v54)
  {
LABEL_4:
    int v55 = *(void **)(v51 - 208);
    if (!v55) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  *(void *)(v51 - 224) = v54;
  operator delete(v54);
  int v55 = *(void **)(v51 - 208);
  if (!v55)
  {
LABEL_6:
    MatrixNxPts<1u,int>::~MatrixNxPts(v51 - 184);
    MatrixNxPts<1u,int>::~MatrixNxPts(v51 - 144);
    _Unwind_Resume(a1);
  }
LABEL_5:
  *(void *)(v51 - 200) = v55;
  operator delete(v55);
  goto LABEL_6;
}

void std::vector<int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  std::vector<int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  uint64_t v6 = end;
  if (__n <= value - end)
  {
    std::vector<int>::size_type v14 = __n;
    bzero(end, 4 * __n);
    this->__end_ = &end[v14];
  }
  else
  {
    begiuint64_t n = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      long long v13 = operator new(4 * v12);
    }
    else
    {
      long long v13 = 0;
    }
    int64x2_t v15 = &v13[4 * v9];
    size_t v16 = 4 * __n;
    int64x2_t v17 = (int *)&v13[4 * v12];
    bzero(v15, v16);
    unint64_t v18 = (int *)&v15[v16];
    if (end != begin)
    {
      unint64_t v19 = (char *)end - (char *)begin - 4;
      if (v19 < 0x2C) {
        goto LABEL_29;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_29;
      }
      uint64_t v20 = (v19 >> 2) + 1;
      uint64_t v6 = &end[-(v20 & 0x7FFFFFFFFFFFFFF8)];
      int v21 = &v13[4 * v9 - 16];
      uint64_t v22 = (long long *)(end - 4);
      uint64_t v23 = v20 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *int v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      v15 -= 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
      if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v15 - 1) = v25;
          v15 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v18;
    this->__end_cap_.__value_ = v17;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void SparseMatrix::allocateMem(SparseMatrix *this)
{
}

double SparseMatrix::freeMem(SparseMatrix *this)
{
  uint64_t v2 = *(void *)this;
  if (v2) {
    MEMORY[0x25A2D62A0](v2, 0x1000C8000313F17);
  }
  uint64_t v3 = *((void *)this + 1);
  if (v3) {
    MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 2);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
  }
  uint64_t v5 = *((void *)this + 3);
  if (v5) {
    MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
  }
  double result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

void SparseMatrix::SparseMatrix(SparseMatrix *this, const SparseMatrix *a2)
{
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  operator new[]();
}

{
  *((_OWORD *)this + 2) = *((_OWORD *)a2 + 2);
  operator new[]();
}

double SparseMatrix::SparseMatrix(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  long long v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

{
  long long v2;
  double result;

  *a1 = *a2;
  long long v2 = a2[2];
  a1[1] = a2[1];
  a1[2] = v2;
  double result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t SparseMatrix::Expand(uint64_t this, int a2, unint64_t a3)
{
  unint64_t v3 = *(int *)(this + 44);
  if (v3 < a3) {
    SparseMatrix::Expand();
  }
  *(_DWORD *)(this + 40) += a2;
  *(_DWORD *)(this + 44) = v3 - a3;
  return this;
}

uint64_t SparseMatrix::Squeeze(uint64_t this, int a2, int a3)
{
  int v3 = *(_DWORD *)(this + 36);
  int v4 = *(_DWORD *)(this + 44) + a3;
  *(_DWORD *)(this + 40) -= a2;
  *(_DWORD *)(this + 44) = v4;
  if (v3 >= 1)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)(this + 24);
    do
      *(_DWORD *)(v6 + 4 * v5++) -= a3;
    while (v5 < *(int *)(this + 36));
  }
  return this;
}

uint64_t SparseMatrix::GetMatrixHeight(SparseMatrix *this)
{
  return *((int *)this + 10);
}

uint64_t SparseMatrix::GetMatrixWidth(SparseMatrix *this)
{
  return *((int *)this + 9);
}

uint64_t SparseMatrix::MultATagxB@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *(_DWORD *)(a1 + 36);
  *(void *)a2 = &unk_2707171D8;
  if (v2) {
    operator new[]();
  }
  uint64_t result = 0;
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)a2 = &unk_270717208;
  *(void *)(a2 + 8) = 0;
  return result;
}

void SparseMatrix::operator*(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = *((_DWORD *)a1 + 10);
  *(void *)a3 = &unk_2707171D8;
  if (v6) {
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = &unk_270717208;
  *(void *)(a3 + 8) = 0;
  bzero(0, 0);
  uint64_t v7 = *((unsigned int *)a1 + 9);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = 0;
    uint64_t v9 = a1[2];
    uint64_t v10 = a1[3];
    do
    {
      uint64_t v11 = *(int *)(v10 + 4 * v8);
      if ((int)v11 >= 1)
      {
        uint64_t v12 = *(int *)(v9 + 4 * v8);
        uint64_t v13 = v11 + v12;
        uint64_t v14 = *a1;
        uint64_t v15 = a1[1];
        do
        {
          uint64_t v16 = 8 * *(unsigned int *)(v15 + 4 * v12);
          *(double *)(*(void *)(a3 + 8) + v16) = *(double *)(*(void *)(a3 + 8) + v16)
                                                 + *(double *)(v14 + 8 * v12++)
                                                 * *(double *)(*(void *)(a2 + 8) + 8 * v8);
        }
        while (v12 < v13);
      }
      ++v8;
    }
    while (v8 != v7);
  }
}

void *SparseMatrix::ReverseStorageOfColumn(void *this, int a2)
{
  uint64_t v2 = *(int *)(this[3] + 4 * a2);
  if (v2)
  {
    uint64_t v3 = *(int *)(this[2] + 4 * a2);
    int v4 = (uint64_t *)(*this + 8 * v3);
    uint64_t v5 = (uint64_t *)(8 * v3 + 8 * v2 + *this - 8);
    do
    {
      if (v5 == v4) {
        break;
      }
      uint64_t v6 = *v4;
      *v4++ = *v5;
      BOOL v7 = v5 == v4;
      *v5-- = v6;
    }
    while (!v7);
    uint64_t v8 = this[1];
    uint64_t v9 = 4 * v3;
    uint64_t v10 = (int *)(v8 + 4 * v3);
    uint64_t v11 = (int *)(v9 + 4 * v2 + v8 - 4);
    do
    {
      if (v11 == v10) {
        break;
      }
      int v12 = *v10;
      *v10++ = *v11;
      BOOL v7 = v11 == v10;
      *v11-- = v12;
    }
    while (!v7);
  }
  return this;
}

double SparseMatrix::GetColumnAsDenseVector@<D0>(SparseMatrix *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v6 = *((_DWORD *)this + 10);
  *(void *)a3 = &unk_2707171D8;
  if (v6) {
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)a3 = &unk_270717208;
  *(void *)(a3 + 8) = 0;
  bzero(0, 0);
  uint64_t v8 = *(int *)(*((void *)this + 3) + 4 * a2);
  if ((int)v8 >= 1)
  {
    uint64_t v9 = *((void *)this + 1);
    uint64_t v10 = *(int *)(*((void *)this + 2) + 4 * a2);
    uint64_t v11 = v8 + v10;
    uint64_t v12 = *(void *)this;
    do
    {
      double result = *(double *)(v12 + 8 * v10);
      *(double *)(*(void *)(a3 + 8) + 8 * *(unsigned int *)(v9 + 4 * v10++)) = result;
    }
    while (v10 < v11);
  }
  return result;
}

double SparseMatrix::CopyColumnToDenseVector(SparseMatrix *this, int a2, double *a3)
{
  bzero(a3, 8 * *((int *)this + 10));
  uint64_t v7 = *(int *)(*((void *)this + 3) + 4 * a2);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *((void *)this + 1);
    uint64_t v9 = *(int *)(*((void *)this + 2) + 4 * a2);
    uint64_t v10 = v7 + v9;
    uint64_t v11 = *(void *)this;
    do
    {
      double result = *(double *)(v11 + 8 * v9);
      a3[*(int *)(v8 + 4 * v9++)] = result;
    }
    while (v9 < v10);
  }
  return result;
}

uint64_t SparseMatrix::GetColumnAsSparseVector@<X0>(uint64_t this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(this + 40);
  uint64_t v4 = 4 * a2;
  int v5 = *(_DWORD *)(*(void *)(this + 24) + v4);
  uint64_t v6 = *(int *)(*(void *)(this + 16) + v4);
  uint64_t v7 = *(void *)(this + 8) + 4 * v6;
  uint64_t v8 = *(void *)this + 8 * v6;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v5;
  *(_DWORD *)(a3 + 24) = v3;
  *(unsigned char *)(a3 + 28) = 0;
  *(_DWORD *)(a3 + 32) = 0;
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v7;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  return this;
}

uint64_t SparseMatrix::SolveLTInPlace(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(result + 36);
  if ((int)v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(void *)(a2 + 8);
    uint64_t v5 = *(void *)result;
    uint64_t v6 = *(void *)(result + 16);
    uint64_t v7 = *(void *)(result + 24);
    uint64_t v8 = *(void *)result + 8;
    uint64_t v9 = *(void *)result + 24;
    uint64_t v10 = (float64x2_t *)(v4 + 24);
    do
    {
      uint64_t v11 = (double *)(v4 + 8 * v3);
      uint64_t v12 = *(int *)(v6 + 4 * v3);
      double v13 = *v11 / *(double *)(v5 + 8 * v12);
      *uint64_t v11 = v13;
      unint64_t v14 = (unint64_t)(v11 + 1);
      double result = *(unsigned int *)(v7 + 4 * v3);
      if ((int)result >= 2)
      {
        if (result >= 7
          && ((unint64_t v15 = (unint64_t)&v11[result], v14 < v5 + 8 * v12 + 8 * result)
            ? (BOOL v16 = v8 + 8 * v12 >= v15)
            : (BOOL v16 = 1),
              v16))
        {
          unint64_t v17 = (result - 1) & 0xFFFFFFFFFFFFFFFCLL;
          uint64_t v18 = v17 | 1;
          float64x2_t v19 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13, 0);
          uint64_t v20 = (float64x2_t *)(v9 + 8 * v12);
          unint64_t v21 = v17;
          uint64_t v22 = v10;
          do
          {
            float64x2_t v23 = vmlsq_f64(*v22, v19, *v20);
            v22[-1] = vmlsq_f64(v22[-1], v19, v20[-1]);
            *uint64_t v22 = v23;
            v20 += 2;
            v22 += 2;
            v21 -= 4;
          }
          while (v21);
          if (result - 1 == v17) {
            goto LABEL_3;
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        long long v24 = (double *)(v4 + 8 * (v18 + v3));
        int v25 = (double *)(v5 + 8 * v18 + 8 * v12);
        result -= v18;
        do
        {
          double v26 = *v25++;
          double *v24 = *v24 - v26 * v13;
          ++v24;
          --result;
        }
        while (result);
      }
LABEL_3:
      ++v3;
      uint64_t v10 = (float64x2_t *)((char *)v10 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void SparseMatrix::Zero(void **this)
{
}

void SparseMatrix::Serialize(uint64_t a1, uint64_t a2, char a3, int a4)
{
  v45[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v39 = *(std::string *)a2;
  }
  std::ofstream::basic_ofstream(&v43);
  unint64_t v8 = *(unsigned int *)(a1 + 36);
  unsigned int v9 = *(_DWORD *)(a1 + 40);
  int64x2_t v33 = &unk_2707171D8;
  if (v8 * v9) {
    operator new[]();
  }
  uint64_t v34 = 0;
  unsigned int v35 = v9;
  int v36 = v8;
  char v37 = 0;
  unint64_t v38 = 8 * v9 * (unint64_t)v8;
  bzero(0, 0);
  if ((int)v8 >= 1)
  {
    unint64_t v10 = 0;
    uint64_t v11 = *(void *)(a1 + 16);
    uint64_t v12 = *(void *)(a1 + 24);
    do
    {
      uint64_t v13 = *(int *)(v12 + 4 * v10);
      if ((int)v13 >= 1)
      {
        if (v10 < v8)
        {
          uint64_t v14 = *(int *)(v11 + 4 * v10);
          uint64_t v15 = v13 + v14;
          uint64_t v16 = *(void *)(a1 + 8);
          while (1)
          {
            unsigned int v17 = *(_DWORD *)(v16 + 4 * v14);
            if (v9 <= v17) {
              break;
            }
            *(void *)(v34 + 8 * v10 + 8 * v17 * v8) = *(void *)(*(void *)a1 + 8 * v14++);
            if (v14 >= v15) {
              goto LABEL_8;
            }
          }
        }
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      }
LABEL_8:
      ++v10;
    }
    while (v10 != (v8 & ~((int)v8 >> 31)));
  }
  if ((a3 & 1) != 0 && v9 && v8)
  {
    unsigned int v18 = 0;
    int v19 = 1;
    do
    {
      if (v19)
      {
        unsigned int v20 = 0;
        do
        {
          std::ostream::write();
          ++v20;
          int v19 = v35;
        }
        while (v20 < v35);
        LODWORD(v8) = v36;
      }
      ++v18;
    }
    while (v18 < v8);
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v44[*(void *)(v43 - 24) - 8], *(_DWORD *)&v44[*(void *)(v43 - 24) + 24] | 4);
  }
  if (a4)
  {
    int v21 = *(char *)(a2 + 23);
    if (v21 >= 0) {
      size_t v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v22 = *(void *)(a2 + 8);
    }
    unint64_t v23 = v22 + 5;
    if (v22 + 5 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    if (v23 >= 0x17)
    {
      uint64_t v25 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v23 | 7) != 0x17) {
        uint64_t v25 = v23 | 7;
      }
      uint64_t v26 = v25 + 1;
      p_dst = (std::locale::__imp *)operator new(v25 + 1);
      size_t v31 = v22 + 5;
      unint64_t v32 = v26 | 0x8000000000000000;
      __dst.__locale_ = p_dst;
    }
    else
    {
      size_t v31 = 0;
      unint64_t v32 = 0;
      __dst.__locale_ = 0;
      p_dst = (std::locale::__imp *)&__dst;
      HIBYTE(v32) = v22 + 5;
      if (!v22)
      {
LABEL_42:
        strcpy((char *)p_dst + v22, ".meta");
        std::ofstream::basic_ofstream(&v40);
        if (SHIBYTE(v32) < 0) {
          operator delete(__dst.__locale_);
        }
        unint64_t v28 = (void *)std::ostream::operator<<();
        std::ios_base::getloc((const std::ios_base *)((char *)v28 + *(void *)(*v28 - 24)));
        int64x2_t v29 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
        ((void (*)(const std::locale::facet *, uint64_t))v29->__vftable[2].~facet_0)(v29, 10);
        std::locale::~locale(&__dst);
        std::ostream::put();
        std::ostream::flush();
        std::ostream::operator<<();
        if (!std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)&v41[*(void *)(v40 - 24) - 8], *(_DWORD *)&v41[*(void *)(v40 - 24) + 24] | 4);
        }
        uint64_t v40 = *MEMORY[0x263F8C2B0];
        *(void *)&v41[*(void *)(v40 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
        MEMORY[0x25A2D6060](v41);
        std::ostream::~ostream();
        MEMORY[0x25A2D6270](&v42);
        goto LABEL_47;
      }
    }
    if (v21 >= 0) {
      uint64_t v27 = (const void *)a2;
    }
    else {
      uint64_t v27 = *(const void **)a2;
    }
    memmove(p_dst, v27, v22);
    goto LABEL_42;
  }
LABEL_47:
  int64x2_t v33 = &unk_2707171D8;
  if (v34 && v37) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v43 = *MEMORY[0x263F8C2B0];
  *(void *)&v44[*(void *)(v43 - 24) - 8] = *(void *)(MEMORY[0x263F8C2B0] + 24);
  MEMORY[0x25A2D6060](v44);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](v45);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v39.__r_.__value_.__l.__data_);
  }
}

void sub_25904F500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a18) {
    BOOL v28 = a20 == 0;
  }
  else {
    BOOL v28 = 1;
  }
  if (!v28) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v29 = MEMORY[0x263F8C2B0];
  uint64_t v30 = *MEMORY[0x263F8C2B0];
  STACK[0x2A8] = *MEMORY[0x263F8C2B0];
  *(unint64_t *)((char *)&STACK[0x2A8] + *(void *)(v30 - 24)) = *(void *)(v29 + 24);
  MEMORY[0x25A2D6060](&STACK[0x2B0]);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](&STACK[0x448]);
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::ofstream::basic_ofstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x25A2D6050](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;
  uint64_t v7;

  uint64_t v2 = MEMORY[0x263F8C310] + 64;
  a1[52] = MEMORY[0x263F8C310] + 64;
  uint64_t v3 = a1 + 1;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B0] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B0] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  uint64_t v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 1);
  uint64_t v7 = MEMORY[0x263F8C310] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[52] = v2;
  MEMORY[0x25A2D6050](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_25904F7D8(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](v1);
  _Unwind_Resume(a1);
}

void sub_25904F9B0(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](v1);
  _Unwind_Resume(a1);
}

void *std::ofstream::~ofstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2B0];
  uint64_t v3 = *MEMORY[0x263F8C2B0];
  *a1 = *MEMORY[0x263F8C2B0];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x25A2D6060](a1 + 1);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](a1 + 52);
  return a1;
}

uint64_t Matrix<double>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3, int *a4, double *a5, char a6)
{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = a3;
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = a6;
  *((_DWORD *)this + 8) = 0;
  if (a6) {
    operator new[]();
  }
  *(void *)this = a5;
  *((void *)this + 1) = a4;
  *((void *)this + 5) = 0;
  *((void *)this + 6) = 0;
}

void SparseVector::SparseVector(SparseVector *this, int a2, int a3)
{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

{
  *((_DWORD *)this + 4) = a3;
  *((_DWORD *)this + 5) = 0;
  *((_DWORD *)this + 6) = a2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

void SparseVector::~SparseVector(SparseVector *this)
{
  if (*((unsigned char *)this + 28))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
    }
    if (*(void *)this) {
      MEMORY[0x25A2D62A0](*(void *)this, 0x1000C8000313F17);
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8000313F17);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*((unsigned char *)this + 28))
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x25A2D62A0](v2, 0x1000C8052888210);
    }
    if (*(void *)this) {
      MEMORY[0x25A2D62A0](*(void *)this, 0x1000C8000313F17);
    }
  }
  uint64_t v3 = *((void *)this + 6);
  if (v3) {
    MEMORY[0x25A2D62A0](v3, 0x1000C8052888210);
  }
  uint64_t v4 = *((void *)this + 5);
  if (v4) {
    MEMORY[0x25A2D62A0](v4, 0x1000C8000313F17);
  }
}

__n128 SparseVector::SparseVector(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(unsigned char *)(a1 + 28) = *(unsigned char *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 40) = result;
  *(unsigned char *)(a2 + 28) = 0;
  return result;
}

void SparseVector::SparseVector(SparseVector *this, const SparseVector *a2)
{
  uint64_t v2 = *(void *)((char *)a2 + 20);
  *((_DWORD *)this + 4) = v2;
  *(void *)((char *)this + 20) = v2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)((char *)a2 + 20);
  *((_DWORD *)this + 4) = v2;
  *(void *)((char *)this + 20) = v2;
  *((unsigned char *)this + 28) = 1;
  *((_DWORD *)this + 8) = 0;
  operator new[]();
}

uint64_t SparseVector::operator=(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 28)) {
    SparseVector::operator=();
  }
  if (*(_DWORD *)(a1 + 16) < *(_DWORD *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    if (v4) {
      MEMORY[0x25A2D62A0](v4, 0x1000C8052888210);
    }
    if (*(void *)a1) {
      MEMORY[0x25A2D62A0](*(void *)a1, 0x1000C8000313F17);
    }
    uint64_t v5 = *(void *)(a1 + 48);
    if (v5) {
      MEMORY[0x25A2D62A0](v5, 0x1000C8052888210);
    }
    uint64_t v6 = *(void *)(a1 + 40);
    if (v6) {
      MEMORY[0x25A2D62A0](v6, 0x1000C8000313F17);
    }
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    operator new[]();
  }
  memcpy(*(void **)(a1 + 8), *(const void **)(a2 + 8), 4 * *(int *)(a2 + 20));
  memcpy(*(void **)a1, *(const void **)a2, 8 * *(int *)(a2 + 20));
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  return a1;
}

uint64_t SparseVector::MultATagxB(uint64_t this, const SparseVector *a2)
{
  int v2 = 0;
  LODWORD(v3) = 0;
  uint64_t v4 = *(int **)(this + 8);
  int v5 = *(_DWORD *)(this + 20);
  double v6 = 0.0;
  uint64_t v7 = (int *)*((void *)a2 + 1);
  while (2)
  {
    int v9 = *v7++;
    int v8 = v9;
    int v10 = *v4;
    uint64_t v3 = (int)v3;
    if (*v4 < v9) {
      goto LABEL_6;
    }
LABEL_3:
    while (v8 < v10)
    {
      if ((int)v3 + 1 >= v5) {
        return this;
      }
      int v11 = *v7++;
      int v8 = v11;
      ++v3;
      if (v10 < v11)
      {
LABEL_6:
        while (++v2 < v5)
        {
          int v12 = v4[1];
          ++v4;
          int v10 = v12;
          uint64_t v3 = (int)v3;
          if (v12 >= v8) {
            goto LABEL_3;
          }
        }
        return this;
      }
    }
    double v6 = v6 + *(double *)(*(void *)this + 8 * v2++) * *(double *)(*(void *)a2 + 8 * v3);
    if (v2 < v5)
    {
      LODWORD(v3) = v3 + 1;
      if ((int)v3 < *((_DWORD *)a2 + 5))
      {
        ++v4;
        continue;
      }
    }
    return this;
  }
}

uint64_t SparseVector::AddWithFactor(uint64_t this, const SparseVector *a2, double a3)
{
  if (!*(unsigned char *)(this + 28)) {
    SparseVector::AddWithFactor();
  }
  if (*(_DWORD *)(this + 24) != *((_DWORD *)a2 + 6)) {
    SparseVector::AddWithFactor();
  }
  *(_DWORD *)(this + 32) = 0;
  uint64_t v3 = *((int *)a2 + 5);
  uint64_t v4 = *(double **)this;
  uint64_t v5 = *(void *)(this + 8);
  uint64_t v6 = *(int *)(this + 20);
  unint64_t v7 = *(void *)this + 8 * v6;
  int v8 = *(double **)a2;
  int v9 = (int *)*((void *)a2 + 1);
  unint64_t v10 = *(void *)a2 + 8 * v3;
  int v11 = 0;
  if ((int)v6 >= 1 && (int)v3 >= 1)
  {
    uint64_t v13 = *(int **)(this + 8);
    uint64_t v14 = *(double **)this;
    while (1)
    {
      int v15 = *v13;
      int v16 = *v9;
      if (*v13 == *v9) {
        break;
      }
      if (v15 >= v16)
      {
        if (*(_DWORD *)(this + 24) <= v16 || v11 >= *(_DWORD *)(this + 16)) {
          SparseVector::AddWithFactor();
        }
        double v24 = *v8 * a3;
        uint64_t v25 = *(void *)(this + 40);
        *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v16;
        uint64_t v26 = *(int *)(this + 32);
        *(double *)(v25 + 8 * v26) = v24;
        int v11 = v26 + 1;
        *(_DWORD *)(this + 32) = v11;
LABEL_21:
        ++v8;
        ++v9;
        if ((unint64_t)v14 >= v7) {
          goto LABEL_27;
        }
        goto LABEL_22;
      }
      if (*(_DWORD *)(this + 24) <= v15 || v11 >= *(_DWORD *)(this + 16)) {
        SparseVector::AddWithFactor();
      }
      double v21 = *v14++;
      uint64_t v22 = *(void *)(this + 40);
      *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v15;
      uint64_t v23 = *(int *)(this + 32);
      *(double *)(v22 + 8 * v23) = v21;
      int v11 = v23 + 1;
      *(_DWORD *)(this + 32) = v11;
      ++v13;
      if ((unint64_t)v14 >= v7) {
        goto LABEL_27;
      }
LABEL_22:
      if ((unint64_t)v8 >= v10) {
        goto LABEL_27;
      }
    }
    if (*(_DWORD *)(this + 24) <= v15 || v11 >= *(_DWORD *)(this + 16)) {
      SparseVector::AddWithFactor();
    }
    double v17 = *v14++;
    double v18 = v17 + a3 * *v8;
    uint64_t v19 = *(void *)(this + 40);
    *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = v15;
    uint64_t v20 = *(int *)(this + 32);
    *(double *)(v19 + 8 * v20) = v18;
    int v11 = v20 + 1;
    *(_DWORD *)(this + 32) = v11;
    ++v13;
    goto LABEL_21;
  }
  uint64_t v14 = *(double **)this;
  uint64_t v13 = *(int **)(this + 8);
LABEL_27:
  while ((unint64_t)v14 < v7)
  {
    if (*(_DWORD *)(this + 24) <= *v13 || v11 >= *(_DWORD *)(this + 16)) {
      SparseVector::AddWithFactor();
    }
    uint64_t v27 = *(void *)v14++;
    uint64_t v28 = *(void *)(this + 40);
    *(_DWORD *)(*(void *)(this + 48) + 4 * v11) = *v13;
    uint64_t v29 = *(int *)(this + 32);
    *(void *)(v28 + 8 * v29) = v27;
    int v11 = v29 + 1;
    *(_DWORD *)(this + 32) = v11;
    ++v13;
  }
  if ((unint64_t)v8 >= v10)
  {
    uint64_t v34 = *(void *)(this + 48);
    *(void *)this = *(void *)(this + 40);
    *(void *)(this + 8) = v34;
    *(void *)(this + 40) = v4;
    *(void *)(this + 48) = v5;
    *(_DWORD *)(this + 20) = v11;
  }
  else
  {
    do
    {
      if (*(_DWORD *)(this + 24) <= *v9 || v11 >= *(_DWORD *)(this + 16)) {
        SparseVector::AddWithFactor();
      }
      double v30 = *v8++;
      uint64_t v32 = *(void *)(this + 40);
      uint64_t v31 = *(void *)(this + 48);
      *(_DWORD *)(v31 + 4 * v11) = *v9;
      uint64_t v33 = *(int *)(this + 32);
      *(double *)(v32 + 8 * v33) = v30 * a3;
      int v11 = v33 + 1;
      *(_DWORD *)(this + 32) = v11;
      ++v9;
    }
    while ((unint64_t)v8 < v10);
    *(void *)this = v32;
    *(void *)(this + 8) = v31;
    *(void *)(this + 40) = v4;
    *(void *)(this + 48) = v5;
    *(_DWORD *)(this + 20) = v11;
  }
  return this;
}

void SparseVector::operator-(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *(_DWORD *)(a1 + 24);
  *(void *)(a3 + 16) = (*(_DWORD *)(a2 + 20) + *(_DWORD *)(a1 + 20));
  *(_DWORD *)(a3 + 24) = v3;
  *(unsigned char *)(a3 + 28) = 1;
  *(_DWORD *)(a3 + 32) = 0;
  operator new[]();
}

void sub_2590508EC(_Unwind_Exception *a1)
{
  SparseVector::~SparseVector(v1);
  _Unwind_Resume(a1);
}

void sub_259050900(_Unwind_Exception *a1)
{
  SparseVector::~SparseVector(v1);
  _Unwind_Resume(a1);
}

double operator+=(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 20);
  if ((int)v2 >= 1)
  {
    int v3 = *(double **)a2;
    uint64_t v4 = *(_DWORD **)(a2 + 8);
    do
    {
      double v5 = *v3++;
      double v6 = v5;
      LODWORD(v5) = *v4++;
      uint64_t v7 = *(void *)(a1 + 8);
      uint64_t v8 = 8 * LODWORD(v5);
      double result = v6 + *(double *)(v7 + v8);
      *(double *)(v7 + v8) = result;
      --v2;
    }
    while (v2);
  }
  return result;
}

uint64_t SparseVector::Serialize(uint64_t a1, uint64_t a2, char a3)
{
  int v6 = *(_DWORD *)(a1 + 24);
  uint64_t v14 = &unk_2707171D8;
  if (v6) {
    operator new[]();
  }
  int v16 = 1;
  int v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  uint64_t v14 = &unk_270717208;
  uint64_t v15 = 0;
  bzero(0, 0);
  uint64_t v7 = *(unsigned int *)(a1 + 20);
  if ((int)v7 >= 1)
  {
    uint64_t v8 = *(uint64_t **)a1;
    int v9 = *(_DWORD **)(a1 + 8);
    do
    {
      uint64_t v10 = *v8++;
      uint64_t v11 = v10;
      LODWORD(v10) = *v9++;
      *(void *)(v15 + 8 * v10) = v11;
      --v7;
    }
    while (v7);
  }
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  Matrix<double>::Serialize((uint64_t)&v14, (uint64_t)&__p, a3, 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v14 = &unk_2707171D8;
  uint64_t result = v15;
  if (v15)
  {
    if (v18) {
      return MEMORY[0x25A2D62A0]();
    }
  }
  return result;
}

void sub_259050AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259050AD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a15);
  _Unwind_Resume(a1);
}

double SparseVector::GetAsDenseVector@<D0>(SparseVector *this@<X0>, uint64_t a2@<X8>)
{
  int v4 = *((_DWORD *)this + 6);
  *(void *)a2 = &unk_2707171D8;
  if (v4) {
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)a2 = &unk_270717208;
  *(void *)(a2 + 8) = 0;
  bzero(0, 0);
  uint64_t v6 = *((unsigned int *)this + 5);
  if ((int)v6 >= 1)
  {
    uint64_t v7 = *(double **)this;
    uint64_t v8 = (_DWORD *)*((void *)this + 1);
    do
    {
      double v9 = *v7++;
      double result = v9;
      LODWORD(v9) = *v8++;
      *(double *)(*(void *)(a2 + 8) + 8 * LODWORD(vbzero(this[3], 4 * *((int *)this + 9)) = result;
      --v6;
    }
    while (v6);
  }
  return result;
}

void Matrix<double>::Serialize(uint64_t a1, uint64_t a2, char a3, char a4)
{
  v37[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v31 = *(std::string *)a2;
  }
  std::ofstream::basic_ofstream(&v35);
  if (a3)
  {
    unint64_t v8 = *(unsigned int *)(a1 + 20);
    if (v8 && *(_DWORD *)(a1 + 16))
    {
      unint64_t v9 = 0;
      unsigned int v10 = 1;
      do
      {
        if (v10)
        {
          for (unsigned int i = 0; i < v10; ++i)
          {
            if (*(_DWORD *)(a1 + 20) <= v9) {
              __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
            }
            std::ostream::write();
            unsigned int v10 = *(_DWORD *)(a1 + 16);
          }
          unint64_t v8 = *(unsigned int *)(a1 + 20);
        }
        ++v9;
      }
      while (v9 < v8);
    }
  }
  else
  {
    unsigned int v12 = *(_DWORD *)(a1 + 16);
    if (v12)
    {
      LODWORD(v13) = *(_DWORD *)(a1 + 20);
      if (v13)
      {
        for (unsigned int j = 0; j < v12; ++j)
        {
          if (v13)
          {
            uint64_t v15 = 0;
            unint64_t v16 = 0;
            do
            {
              if (j >= *(_DWORD *)(a1 + 16)) {
                __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
              }
              std::ostream::write();
              ++v16;
              unint64_t v13 = *(unsigned int *)(a1 + 20);
              v15 += 8;
            }
            while (v16 < v13);
            unsigned int v12 = *(_DWORD *)(a1 + 16);
          }
        }
      }
    }
  }
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v36[*(void *)(v35 - 24) - 8], *(_DWORD *)&v36[*(void *)(v35 - 24) + 24] | 4);
  }
  if ((a4 & 1) == 0)
  {
    uint64_t v21 = *MEMORY[0x263F8C2B0];
    uint64_t v22 = *(void *)(MEMORY[0x263F8C2B0] + 24);
    goto LABEL_46;
  }
  int v17 = *(char *)(a2 + 23);
  if (v17 >= 0) {
    size_t v18 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v18 = *(void *)(a2 + 8);
  }
  unint64_t v19 = v18 + 5;
  if (v18 + 5 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (v19 >= 0x17)
  {
    uint64_t v23 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17) {
      uint64_t v23 = v19 | 7;
    }
    uint64_t v24 = v23 + 1;
    p_dst = (std::locale::__imp *)operator new(v23 + 1);
    size_t v29 = v18 + 5;
    unint64_t v30 = v24 | 0x8000000000000000;
    __dst.__locale_ = p_dst;
    goto LABEL_37;
  }
  size_t v29 = 0;
  unint64_t v30 = 0;
  __dst.__locale_ = 0;
  p_dst = (std::locale::__imp *)&__dst;
  HIBYTE(v30) = v18 + 5;
  if (v18)
  {
LABEL_37:
    if (v17 >= 0) {
      uint64_t v25 = (const void *)a2;
    }
    else {
      uint64_t v25 = *(const void **)a2;
    }
    memmove(p_dst, v25, v18);
  }
  strcpy((char *)p_dst + v18, ".meta");
  std::ofstream::basic_ofstream(&v32);
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst.__locale_);
  }
  uint64_t v26 = (void *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(void *)(*v26 - 24)));
  uint64_t v27 = std::locale::use_facet(&__dst, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
  std::locale::~locale(&__dst);
  std::ostream::put();
  std::ostream::flush();
  std::ostream::operator<<();
  if (!std::filebuf::close()) {
    std::ios_base::clear((std::ios_base *)&v33[*(void *)(v32 - 24) - 8], *(_DWORD *)&v33[*(void *)(v32 - 24) + 24] | 4);
  }
  uint64_t v21 = *MEMORY[0x263F8C2B0];
  uint64_t v32 = *MEMORY[0x263F8C2B0];
  uint64_t v22 = *(void *)(MEMORY[0x263F8C2B0] + 24);
  *(void *)&v33[*(void *)(v32 - 24) - 8] = v22;
  MEMORY[0x25A2D6060](v33);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](&v34);
LABEL_46:
  uint64_t v35 = v21;
  *(void *)&v36[*(void *)(v21 - 24) - 8] = v22;
  MEMORY[0x25A2D6060](v36);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](v37);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
}

void sub_25905113C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  uint64_t v22 = MEMORY[0x263F8C2B0];
  uint64_t v23 = *MEMORY[0x263F8C2B0];
  STACK[0x270] = *MEMORY[0x263F8C2B0];
  *(unint64_t *)((char *)&STACK[0x270] + *(void *)(v23 - 24)) = *(void *)(v22 + 24);
  MEMORY[0x25A2D6060](&STACK[0x278]);
  std::ostream::~ostream();
  MEMORY[0x25A2D6270](&STACK[0x410]);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void Matrix<double>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707171D8;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  double v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    std::string::size_type v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17) {
      std::string::size_type v6 = __sz | 7;
    }
    std::string::size_type v7 = v6 + 1;
    unint64_t v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    double v5 = v8;
  }
  else
  {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void std::string::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265447620, MEMORY[0x263F8C060]);
}

void sub_2590513EC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void SparseMatrix::AddValue()
{
  __assert_rtn("AddValue", "SparseMatrix.cpp", 124, "(col != m_width-1 && index < m_colIndices[col+1]) || (col == m_width-1 && index < m_maxNNZ)");
}

void SparseMatrix::Expand()
{
  __assert_rtn("Expand", "SparseMatrix.cpp", 134, "newNZPerCol <= (size_t)m_extraSpacePerCol");
}

void SparseMatrix::operator()()
{
}

void SparseVector::operator=()
{
  __assert_rtn("operator=", "SparseMatrix.cpp", 500, "m_ownsData");
}

void SparseVector::AddWithFactor()
{
}

{
  __assert_rtn("AddValueToHelper", "SparseMatrix.hpp", 175, "pos<m_size && m_helperNNZ<m_maxNNZ");
}

{
  __assert_rtn("AddWithFactor", "SparseMatrix.cpp", 595, "this->m_size == rhs.m_size");
}

uint64_t CRandomGenerator::Init(uint64_t this, unsigned int a2)
{
  *(_DWORD *)(this + 8) = a2;
  uint64_t v2 = 1;
  for (uint64_t i = 3; i != 626; ++i)
  {
    int v4 = 1812433253 * (a2 ^ (a2 >> 30));
    a2 = v4 + v2;
    *(_DWORD *)(this + 4 * i) = i + v4 - 2;
    ++v2;
  }
  *(void *)(this + 2504) = 0;
  return this;
}

void CRandomGenerator::~CRandomGenerator(CRandomGenerator *this)
{
}

float CRandomGenerator::NormalRand(CRandomGenerator *this, float a2)
{
  v3[0] = 0.0;
  v3[1] = a2;
  char v4 = 0;
  return std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((uint64_t)v3, (uint64_t)this + 8, v3);
}

float std::normal_distribution<float>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(uint64_t a1, uint64_t a2, float *a3)
{
  if (*(unsigned char *)(a1 + 12))
  {
    *(unsigned char *)(a1 + 12) = 0;
    float v5 = *(float *)(a1 + 8);
  }
  else
  {
    unint64_t v6 = *(void *)(a2 + 2496);
    int v7 = *(_DWORD *)(a2 + 4 * v6);
    do
    {
      unint64_t v8 = (v6 + 1) % 0x270;
      uint64_t v9 = 4 * v8;
      unsigned int v10 = *(_DWORD *)(a2 + 4 * ((v6 + 397) % 0x270)) ^ ((*(_DWORD *)(a2 + 4 * v8) & 0x7FFFFFFE | v7 & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a2 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
      *(_DWORD *)(a2 + 4 * v6) = v10;
      unsigned int v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
      unint64_t v6 = v8 - 623;
      if (v8 < 0x26F) {
        unint64_t v6 = v8 + 1;
      }
      int v7 = *(_DWORD *)(a2 + 4 * v6);
      unsigned int v12 = (v11 << 15) & 0xEFC60000 ^ v11;
      if (v8 >= 0xE3) {
        uint64_t v13 = -227;
      }
      else {
        uint64_t v13 = 397;
      }
      float v14 = (float)(v12 ^ (v12 >> 18));
      unsigned int v15 = *(_DWORD *)(a2 + 4 * (v13 + v8)) ^ ((v7 & 0x7FFFFFFE | *(_DWORD *)(a2 + 4 * v8) & 0x80000000) >> 1) ^ (v7 << 31 >> 31) & 0x9908B0DF;
      unsigned int v16 = ((v15 ^ (v15 >> 11)) << 7) & 0x9D2C5680 ^ v15 ^ (v15 >> 11);
      float v17 = (float)((float)(v14 * 2.3283e-10) * 2.0) + -1.0;
      float v18 = (float)((float)((float)((v16 << 15) & 0xEFC60000 ^ v16 ^ (((v16 << 15) & 0xEFC60000 ^ v16) >> 18))
                          * 2.3283e-10)
                  * 2.0)
          + -1.0;
      float v19 = (float)(v18 * v18) + (float)(v17 * v17);
      *(_DWORD *)(a2 + v9) = v15;
    }
    while (v19 > 1.0 || v19 == 0.0);
    *(void *)(a2 + 2496) = v6;
    float v20 = sqrtf((float)(logf((float)(v18 * v18) + (float)(v17 * v17)) * -2.0) / v19);
    *(float *)(a1 + 8) = v18 * v20;
    *(unsigned char *)(a1 + 12) = 1;
    float v5 = v17 * v20;
  }
  return *a3 + (float)(v5 * a3[1]);
}

void DisjointSet::DisjointSet(DisjointSet *this)
{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

{
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
}

void DisjointSet::~DisjointSet(DisjointSet *this)
{
  if (*(_DWORD *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x25A2D62A0](v2, 0x1000C80BDFB0063);
    }
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x25A2D62D0](v3, 0x1000C40BDFB0063);
  }
  *(_DWORD *)this = 0;
}

{
  uint64_t v2;
  uint64_t v3;

  if (*(_DWORD *)this)
  {
    uint64_t v2 = *((void *)this + 1);
    if (v2) {
      MEMORY[0x25A2D62A0](v2, 0x1000C80BDFB0063);
    }
  }
  uint64_t v3 = *((void *)this + 2);
  if (v3) {
    MEMORY[0x25A2D62D0](v3, 0x1000C40BDFB0063);
  }
  *(_DWORD *)this = 0;
}

uint64_t DisjointSet::SetCapacity(uint64_t this, unsigned int a2)
{
  if (*(_DWORD *)this < a2)
  {
    if (*(_DWORD *)this)
    {
      uint64_t v2 = *(void *)(this + 8);
      if (v2) {
        MEMORY[0x25A2D62A0](v2, 0x1000C80BDFB0063);
      }
    }
    operator new[]();
  }
  return this;
}

uint64_t DisjointSet::Compact(DisjointSet *this, unsigned int a2, int a3)
{
  if (a3)
  {
    uint64_t v4 = *((void *)this + 2);
    if (!v4) {
      operator new[]();
    }
    if (!a2) {
      goto LABEL_19;
    }
    uint64_t v5 = 0;
    uint64_t v6 = *((void *)this + 1);
    if (a2 < 0x10) {
      goto LABEL_11;
    }
    if ((unint64_t)(v4 - v6) < 0x20) {
      goto LABEL_11;
    }
    uint64_t v5 = (unsigned __int16)a2 & 0xFFF0;
    int v7 = (long long *)(v6 + 16);
    unint64_t v8 = (_OWORD *)(v4 + 16);
    uint64_t v9 = v5;
    do
    {
      long long v10 = *v7;
      *(v8 - 1) = *(v7 - 1);
      *unint64_t v8 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 16;
    }
    while (v9);
    if (v5 != a2)
    {
LABEL_11:
      unsigned int v11 = (__int16 *)(v6 + 2 * v5);
      unsigned int v12 = (_WORD *)(v4 + 2 * v5);
      uint64_t v13 = a2 - v5;
      do
      {
        __int16 v14 = *v11++;
        *v12++ = v14;
        --v13;
      }
      while (v13);
    }
  }
  if (!a2)
  {
LABEL_19:
    uint64_t result = 0;
    *((_WORD *)this + 12) = a2;
    return result;
  }
  unint64_t v15 = 0;
  uint64_t result = 0;
  uint64_t v17 = *((void *)this + 1);
  do
  {
    while (1)
    {
      unint64_t v19 = *(unsigned __int16 *)(v17 + 2 * v15);
      if (v15 > v19) {
        break;
      }
      __int16 v18 = result;
      uint64_t result = (result + 1);
      *(_WORD *)(v17 + 2 * v15++) = v18;
      if (a2 == v15) {
        goto LABEL_18;
      }
    }
    *(_WORD *)(v17 + 2 * v15++) = *(_WORD *)(v17 + 2 * v19);
  }
  while (a2 != v15);
LABEL_18:
  *((_WORD *)this + 12) = a2;
  return result;
}

uint64_t DisjointSet::UnCompact(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 16);
  if (!v1) {
    DisjointSet::UnCompact();
  }
  if (*(_WORD *)(this + 24))
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(this + 8);
    do
    {
      *(_WORD *)(v3 + 2 * v2) = *(_WORD *)(v1 + 2 * v2);
      ++v2;
    }
    while (v2 < *(unsigned __int16 *)(this + 24));
  }
  return this;
}

uint64_t DisjointSet::GetCompactedMap(uint64_t a1, unsigned int a2, std::vector<unsigned int> *this)
{
  uint64_t v6 = a2;
  begiuint64_t n = this->__begin_;
  unint64_t v8 = this->__end_ - this->__begin_;
  BOOL v9 = a2 >= v8;
  std::vector<unsigned int>::size_type v10 = a2 - v8;
  if (v10 != 0 && v9)
  {
    std::vector<unsigned int>::__append(this, v10);
    begiuint64_t n = this->__begin_;
  }
  else if (!v9)
  {
    this->__end_ = &begin[v6];
  }
  *begiuint64_t n = 0;
  if (a2 < 2) {
    return 1;
  }
  uint64_t v11 = *(void *)(a1 + 8);
  unint64_t v12 = 1;
  uint64_t result = 1;
  do
  {
    while (1)
    {
      unint64_t v15 = *(unsigned __int16 *)(v11 + 2 * v12);
      BOOL v16 = v12 == v15;
      if (v12 <= v15) {
        break;
      }
      begin[v12++] = begin[v15];
      if (v6 == v12) {
        return result;
      }
    }
    if (v12 == v15) {
      unsigned int v14 = result;
    }
    else {
      unsigned int v14 = 0;
    }
    if (v16) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    begin[v12++] = v14;
  }
  while (v6 != v12);
  return result;
}

uint64_t DisjointSet::GetCompactedMap(uint64_t a1, std::vector<unsigned int> *this)
{
  unint64_t v4 = *(unsigned __int16 *)(a1 + 4);
  begiuint64_t n = this->__begin_;
  unint64_t v6 = this->__end_ - this->__begin_;
  if (v4 <= v6)
  {
    if (v4 < v6) {
      this->__end_ = &begin[v4];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, v4 - v6);
    begiuint64_t n = this->__begin_;
  }
  *begiuint64_t n = 0;
  if ((v4 & 0xFFFE) == 0) {
    return 1;
  }
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = 1;
  uint64_t result = 1;
  do
  {
    while (1)
    {
      unint64_t v11 = *(unsigned __int16 *)(v7 + 2 * v8);
      BOOL v12 = v8 == v11;
      if (v8 <= v11) {
        break;
      }
      begin[v8++] = begin[v11];
      if (v4 == v8) {
        return result;
      }
    }
    if (v8 == v11) {
      unsigned int v10 = result;
    }
    else {
      unsigned int v10 = 0;
    }
    if (v12) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    begin[v8++] = v10;
  }
  while (v4 != v8);
  return result;
}

void std::vector<unsigned int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  unint64_t v6 = end;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(end, 4 * __n);
      unint64_t v6 = &end[__n];
    }
    this->__end_ = v6;
  }
  else
  {
    begiuint64_t n = this->__begin_;
    uint64_t v8 = (char *)end - (char *)this->__begin_;
    uint64_t v9 = v8 >> 2;
    unint64_t v10 = (v8 >> 2) + __n;
    if (v10 >> 62) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = (char *)value - (char *)begin;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 62) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v13 = operator new(4 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unsigned int v14 = &v13[4 * v9];
    size_t v15 = 4 * __n;
    BOOL v16 = (unsigned int *)&v13[4 * v12];
    bzero(v14, v15);
    uint64_t v17 = (unsigned int *)&v14[v15];
    if (end != begin)
    {
      unint64_t v18 = (char *)end - (char *)begin - 4;
      if (v18 < 0x2C) {
        goto LABEL_31;
      }
      if ((unint64_t)((char *)end - v13 - v8) < 0x20) {
        goto LABEL_31;
      }
      uint64_t v19 = (v18 >> 2) + 1;
      uint64_t v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      unint64_t v6 = &end[v20 / 0xFFFFFFFFFFFFFFFCLL];
      v14 -= v20;
      uint64_t v21 = &v13[4 * v9 - 16];
      uint64_t v22 = (long long *)(end - 4);
      uint64_t v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_31:
        do
        {
          int v25 = *--v6;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != begin);
      }
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v14;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::vector<unsigned int>::__throw_length_error[abi:ne180100]()
{
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  exceptiouint64_t n = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  uint64_t v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x263F8C208], MEMORY[0x263F8C090]);
}

void DisjointSet::UnCompact()
{
}

void vDSPMtranspose<double>(const double *a1, int a2, double *a3, int a4, int a5, int a6)
{
}

void vDSPVfill<double>(const double *a1, double *a2, int a3, int a4)
{
}

void vDSPVfill<int>(const int *a1, int *a2, int a3, int a4)
{
}

void vDSPMinv<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMinv<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPMax<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMax<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPSve<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPSve<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPVsq<double>(const double *a1, int a2, double *a3, int a4, int a5)
{
}

void vDSPVmul<float,float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7)
{
}

void vDSPVmul<double,double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7)
{
}

void vDSPVsmul<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsmul<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsadd<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsadd<int>(const int *a1, int a2, const int *a3, int *a4, int a5, int a6)
{
}

void vDSPMmul<double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7, int a8, vDSP_Length a9)
{
}

void vDSPVsdiv<float>(const float *a1, int a2, const float *a3, float *a4, int a5, int a6)
{
}

void vDSPVsdiv<double>(const double *a1, int a2, const double *a3, double *a4, int a5, int a6)
{
}

void vDSPVsdiv<int>(const int *a1, int a2, const int *a3, int *a4, int a5, int a6)
{
}

void vDSPVsort<float>(float *a1, int a2, int a3)
{
}

void vDSPVsort<double>(double *a1, int a2, int a3)
{
}

void vDSPVdiv<float>(const float *__A, int a2, const float *__B, int a4, float *a5, int a6, int a7)
{
}

void vDSPVdiv<double>(const double *__A, int a2, const double *__B, int a4, double *a5, int a6, int a7)
{
}

void vDSPVdiv<int>(int *__A, int a2, int *__B, int a4, int *a5, int a6, int a7)
{
}

void vDSPSvdiv<float>(const float *a1, const float *a2, uint64_t a3, float *a4, int a5, int a6)
{
}

void vDSPSvdiv<double>(const double *a1, const double *a2, uint64_t a3, double *a4, int a5, int a6)
{
}

void vDSPVadd<float>(const float *a1, int a2, const float *a3, int a4, float *a5, int a6, int a7)
{
}

void vDSPVadd<double>(const double *a1, int a2, const double *a3, int a4, double *a5, int a6, int a7)
{
}

void vDSPVadd<int>(const int *a1, int a2, const int *a3, int a4, int *a5, int a6, int a7)
{
}

void vDSPVsub<double>(const double *__A, int a2, const double *__B, int a4, double *a5, int a6, int a7)
{
}

void vDSPSvesq<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPSvesq<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPMmov<double>(const double *a1, double *a2, int a3, int a4, int a5, int a6)
{
}

void vDSPVsma<float>(const float *a1, int a2, const float *a3, const float *a4, int a5, float *a6, int a7, int a8)
{
}

void vDSPVsma<double>(const double *a1, int a2, const double *a3, const double *a4, int a5, double *a6, int a7, int a8)
{
}

void vDSPMeanv<float>(const float *a1, int a2, float *a3, int a4)
{
}

void vDSPMeanv<double>(const double *a1, int a2, double *a3, int a4)
{
}

void vDSPVabs<float>(const float *a1, int a2, float *a3, int a4, int a5)
{
}

void vDSPVabs<double>(const double *a1, int a2, double *a3, int a4, int a5)
{
}

void vDSPVabs<int>(const int *a1, int a2, int *a3, int a4, int a5)
{
}

void vDSPVramp<float>(const float *a1, const float *a2, float *a3, int a4, int a5)
{
}

void vDSPVramp<double>(const double *a1, const double *a2, double *a3, int a4, int a5)
{
}

void vDSPImgfir<float>(const float *a1, int a2, int a3, const float *a4, float *a5, int a6, int a7)
{
}

void vDSPImgfir<double>(const double *a1, int a2, int a3, const double *a4, double *a5, int a6, int a7)
{
}

void GeomUtils::FindSpots(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = 0;
  uint64_t v23 = 1;
  char v24 = 0;
  uint64_t v25 = 0;
  uint64_t v21 = &unk_270717208;
  uint64_t v17 = 0;
  uint64_t v18 = 1;
  char v19 = 0;
  uint64_t v20 = 0;
  BOOL v16 = &unk_270717208;
  uint64_t v12 = 0;
  uint64_t v13 = 1;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v11 = &unk_270717208;
  uint64_t v7 = 0;
  uint64_t v8 = 1;
  char v9 = 0;
  uint64_t v10 = 0;
  unint64_t v6 = &unk_270717208;
  v3[6] = 0;
  v3[7] = 1;
  char v4 = 0;
  uint64_t v5 = 0;
  v3[5] = &unk_270717208;
  Matrix<double>::Matrix((uint64_t)v3, a3, 0, -1);
}

void sub_2590540AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v62 - 256);
  MatrixNxPts<1u,double>::~MatrixNxPts(v62 - 216);
  MatrixNxPts<1u,double>::~MatrixNxPts(v62 - 176);
  Matrix<double>::~Matrix((uint64_t)&a62);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x270]);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x298]);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x2C0]);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x2E8]);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void GeomUtils::ImTxTy2AlphaBeta<double>(int a1, uint64_t a2, int a3, int a4, int a5, Algo *this, Algo *a7, int a8, double a9, double a10, double a11, double a12, double a13, uint64_t a14, uint64_t a15)
{
  unsigned int v16 = this;
  Algo::LinearSpace(this, a10, a11, (uint64_t)&v58);
  unsigned int v19 = v60;
  unsigned int v20 = v61;
  uint64_t v21 = *(void **)(a14 + 8);
  if (*(void *)(a14 + 32) < 8 * v60 * (unint64_t)v61)
  {
    if (v21)
    {
      if (*(unsigned char *)(a14 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a14 + 16) = v60;
  *(_DWORD *)(a14 + 20) = v20;
  memcpy(v21, v59, 8 * v19 * (unint64_t)v20);
  int v58 = &unk_2707171D8;
  if (v59 && v62) {
    MEMORY[0x25A2D62A0]();
  }
  Algo::LinearSpace(a7, a12, a13, (uint64_t)&v58);
  unsigned int v22 = v60;
  unsigned int v23 = v61;
  char v24 = *(void **)(a15 + 8);
  if (*(void *)(a15 + 32) < 8 * v60 * (unint64_t)v61)
  {
    if (v24 && *(unsigned char *)(a15 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a15 + 16) = v60;
  *(_DWORD *)(a15 + 20) = v23;
  memcpy(v24, v59, 8 * v22 * (unint64_t)v23);
  int v58 = &unk_2707171D8;
  if (v59 && v62) {
    MEMORY[0x25A2D62A0]();
  }
  int v58 = &unk_2707171D8;
  if (a7 * v16) {
    operator new[]();
  }
  int v59 = 0;
  unsigned int v60 = a7;
  unsigned int v61 = v16;
  char v62 = 0;
  unint64_t v63 = 8 * a7 * (unint64_t)v16;
  v53[0] = &unk_2707171D8;
  v53[1] = 0;
  int v54 = (int)a7;
  unsigned int v55 = v16;
  char v56 = 0;
  unint64_t v57 = v63;
  uint64_t v25 = *(void *)(a14 + 8);
  unsigned int v26 = *(_DWORD *)(a14 + 16);
  unsigned int v27 = *(_DWORD *)(a14 + 20);
  int64x2_t v48 = &unk_2707171D8;
  uint64_t v49 = v25;
  unint64_t v52 = 8 * v26 * (unint64_t)v27;
  unint64_t v50 = __PAIR64__(v27, v26);
  char v51 = 0;
  uint64_t v28 = *(void *)(a15 + 8);
  unsigned int v29 = *(_DWORD *)(a15 + 16);
  unsigned int v30 = *(_DWORD *)(a15 + 20);
  uint64_t v43 = &unk_2707171D8;
  uint64_t v44 = v28;
  unint64_t v47 = 8 * v29 * (unint64_t)v30;
  unint64_t v45 = __PAIR64__(v30, v29);
  char v46 = 0;
  Algo::MeshGrid<double>((uint64_t)&v48, (uint64_t)&v43, (uint64_t)&v58, (uint64_t)v53);
  uint64_t v43 = &unk_2707171D8;
  if (v44 && v46)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v44 = 0;
    unint64_t v47 = 0;
    char v46 = 0;
  }
  unint64_t v45 = 0;
  int64x2_t v48 = &unk_2707171D8;
  if (v49 && v51)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v49 = 0;
    unint64_t v52 = 0;
    char v51 = 0;
  }
  unint64_t v50 = 0;
  int v39 = 1;
  int v40 = 0;
  char v41 = 0;
  uint64_t v42 = 0;
  char v37 = &unk_270717208;
  uint64_t v38 = 0;
  int v33 = 1;
  int v34 = 0;
  char v35 = 0;
  uint64_t v36 = 0;
  v32[5] = &unk_270717208;
  v32[6] = 0;
  Matrix<double>::Matrix((uint64_t)v32, a2, 0, -1);
}

void sub_259054BD0(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_259054BE4(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_259054BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a55);
  Matrix<double>::~Matrix(v55 - 200);
  Matrix<double>::~Matrix(v55 - 160);
  _Unwind_Resume(a1);
}

void sub_259054CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  Matrix<double>::~Matrix((uint64_t)&a60);
  Matrix<double>::~Matrix(v60 - 240);
  Matrix<double>::~Matrix(v60 - 200);
  Matrix<double>::~Matrix(v60 - 160);
  _Unwind_Resume(a1);
}

void GeomUtils::GetLocationsOnWall<double>()
{
}

void sub_259055E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62,uint64_t a63)
{
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix((uint64_t)&a32);
  Matrix<double>::~Matrix((uint64_t)&a37);
  Matrix<double>::~Matrix((uint64_t)&a42);
  Matrix<double>::~Matrix((uint64_t)&a47);
  Matrix<double>::~Matrix((uint64_t)&a52);
  Matrix<double>::~Matrix((uint64_t)&a57);
  Matrix<double>::~Matrix((uint64_t)&a62);
  Matrix<double>::~Matrix((uint64_t)&a67);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&STACK[0x200]);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&STACK[0x228]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x250]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x278]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x2A0]);
  Matrix<double>::~Matrix((uint64_t)&STACK[0x2C8]);
  MatrixNxPts<3u,double>::~MatrixNxPts(v67 - 192);
  Matrix<double>::~Matrix(v67 - 152);
  _Unwind_Resume(a1);
}

void *GeomUtils::ApproxPolyDP(uint64_t a1, int a2, uint64_t a3, double a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (!v5)
  {
    unsigned int v19 = 0;
    uint64_t result = *(void **)(a3 + 8);
    if (*(void *)(a3 + 32) > 0xFuLL)
    {
LABEL_20:
      *(void *)(a3 + 16) = 0x100000002;
      *uint64_t result = *(void *)(*(void *)(a1 + 8) + 8 * v19);
      *(void *)(*(void *)(a3 + 8) + 8) = *(void *)(*(void *)(a1 + 8) + 8 * (v19 + v5));
      return result;
    }
LABEL_16:
    if (result)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  uint64_t v6 = 0;
  unsigned int v7 = 0;
  double v8 = a4 * a4;
  char v9 = *(double **)(a1 + 8);
  double v10 = *v9;
  double v11 = 0.0;
  do
  {
    double v12 = (v9[v5 + v6] - v9[v5]) * (v9[v5 + v6] - v9[v5]);
    if (v12 + (v9[v6] - v10) * (v9[v6] - v10) > v11)
    {
      unsigned int v7 = v6;
      double v11 = v12 + (v9[v6] - v10) * (v9[v6] - v10);
    }
    ++v6;
  }
  while (v5 != v6);
  if (!v7) {
    goto LABEL_12;
  }
  uint64_t v13 = 0;
  char v14 = &v9[v7];
  double v15 = *v14;
  double v16 = v14[v5];
  unsigned int v17 = v7;
  do
  {
    double v18 = (v9[v5 + v13] - v16) * (v9[v5 + v13] - v16);
    if (v18 + (v9[v13] - v15) * (v9[v13] - v15) > v11)
    {
      unsigned int v17 = v13;
      double v11 = v18 + (v9[v13] - v15) * (v9[v13] - v15);
    }
    ++v13;
  }
  while (v5 != v13);
  if (v7 != v17)
  {
    uint64_t v21 = 0;
    unsigned int v22 = &v9[v17];
    double v23 = *v22;
    unsigned int v24 = v17;
    do
    {
      double v25 = (v9[v5 + v21] - v22[v5]) * (v9[v5 + v21] - v22[v5]);
      if (v25 + (v9[v21] - v23) * (v9[v21] - v23) > v11)
      {
        unsigned int v24 = v21;
        double v11 = v25 + (v9[v21] - v23) * (v9[v21] - v23);
      }
      ++v21;
    }
    while (v5 != v21);
    if (v17 == v24) {
      unsigned int v26 = v7;
    }
    else {
      unsigned int v26 = v17;
    }
    if (v26 >= v24) {
      unsigned int v19 = v24;
    }
    else {
      unsigned int v19 = v26;
    }
    if (v26 <= v24) {
      unsigned int v7 = v24;
    }
    else {
      unsigned int v7 = v26;
    }
    if (v11 <= v8)
    {
LABEL_13:
      uint64_t result = *(void **)(a3 + 8);
      if (*(void *)(a3 + 32) > 0xFuLL) {
        goto LABEL_20;
      }
      goto LABEL_16;
    }
  }
  else
  {
LABEL_12:
    unsigned int v19 = 0;
    if (v11 <= v8) {
      goto LABEL_13;
    }
  }
  unsigned int v56 = v7;
  uint64_t v57 = 8 * v5;
  uint64_t v27 = v7 - v19 + 1;
  if (a2) {
    int v29 = 2;
  }
  else {
    int v29 = 1;
  }
  int v28 = v5 - v27;
  uint64_t v30 = (v5 - v27 + v29);
  int v71 = &unk_2707171D8;
  if (2 * v27) {
    operator new[]();
  }
  std::string v31 = 0;
  int v73 = 2;
  int v74 = v27;
  char v75 = 0;
  uint64_t v76 = 16 * v27;
  int v71 = &unk_270717308;
  int v72 = 0;
  int v65 = &unk_2707171D8;
  if (2 * v30) {
    operator new[]();
  }
  int v67 = 2;
  int v68 = v28 + v29;
  char v69 = 0;
  uint64_t v70 = 16 * (v28 + v29);
  int v65 = &unk_270717308;
  std::locale __dst = 0;
  uint64_t v32 = *(char **)(a1 + 8);
  uint64_t v55 = 8 * v19;
  memcpy(0, &v32[v55], 8 * v27);
  memcpy((void *)(8 * v27), &v32[v55 + v57], 8 * v27);
  uint64_t v33 = 8 * v56;
  size_t v34 = 8 * (v5 - v56);
  memcpy(0, &v32[v33], v34);
  char v35 = (char *)(8 * v30);
  memcpy(v35, &v32[v33 + v57], v34);
  memcpy((void *)(v57 - v33), v32, 8 * (v19 + 1));
  if (a2) {
    size_t v36 = 8 * (v19 + 1);
  }
  else {
    size_t v36 = 8 * v19;
  }
  memcpy(&v35[v57 - v33], &v32[v57], v36);
  std::string __p = 0;
  unint64_t v63 = 0;
  uint64_t v64 = 0;
  int v59 = 0;
  unint64_t v60 = 0;
  uint64_t v61 = 0;
  int v37 = GeomUtils::ApproxPolyDP((uint64_t)&v71, &__p, v8);
  int v38 = GeomUtils::ApproxPolyDP((uint64_t)&v65, &v59, v8);
  if (a2) {
    int v39 = -2;
  }
  else {
    int v39 = -1;
  }
  unsigned int v40 = v37 + v39 + v38;
  char v41 = *(void **)(a3 + 8);
  if (*(void *)(a3 + 32) < 16 * (unint64_t)v40)
  {
    if (v41 && *(unsigned char *)(a3 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = 2;
  *(_DWORD *)(a3 + 20) = v40;
  uint64_t v42 = (char *)__p;
  int v43 = v63 & 0x3F;
  if (v63 > 0x3F || (v63 & 0x3F) != 0)
  {
    int v47 = 0;
    int64x2_t v48 = (char *)__p + 8 * (v63 >> 6);
    do
    {
      if ((*(void *)v42 >> v47))
      {
        void *v41 = *v31;
        v41[v40] = v31[v27];
        ++v41;
      }
      v42 += 8 * (v47 == 63);
      if (v47 == 63) {
        int v47 = 0;
      }
      else {
        ++v47;
      }
      ++v31;
    }
    while (v42 != v48 || v47 != v43);
  }
  uint64_t v44 = v59;
  unint64_t v45 = &v59[8 * (v60 >> 6)];
  int v46 = v60 & 0x3F;
  if (a2)
  {
    if ((v60 & 0x3F) == 0)
    {
      v45 -= 8;
      int v46 = 63;
      goto LABEL_83;
    }
    --v46;
    if (v60 > 0x3F)
    {
LABEL_83:
      uint64_t v50 = 8;
      int v51 = 1;
      unint64_t v52 = v59;
      do
      {
        if ((*(void *)v52 >> v51))
        {
          void *v41 = *(void *)v50;
          v41[v40] = *(void *)(v50 + 8 * v30);
          ++v41;
        }
        v52 += 8 * (v51 == 63);
        if (v51 == 63) {
          int v51 = 0;
        }
        else {
          ++v51;
        }
        v50 += 8;
      }
      while (v52 != v45 || v51 != v46);
      goto LABEL_72;
    }
  }
  else if (v60 > 0x3F)
  {
    goto LABEL_83;
  }
  if (v46 != 1) {
    goto LABEL_83;
  }
LABEL_72:
  if (v44) {
    operator delete(v44);
  }
  if (__p) {
    operator delete(__p);
  }
  int v65 = &unk_2707171D8;
  if (__dst && v69) {
    MEMORY[0x25A2D62A0]();
  }
  int v71 = &unk_2707171D8;
  uint64_t result = v72;
  if (v72 && v75) {
    return (void *)MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_25905663C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  MatrixNxPts<2u,double>::~MatrixNxPts((uint64_t)&a24);
  MatrixNxPts<2u,double>::~MatrixNxPts(v24 - 144);
  _Unwind_Resume(a1);
}

unint64_t GeomUtils::ApproxPolyDP(uint64_t a1, void *a2, double a3)
{
  uint64_t v5 = a1;
  unint64_t v6 = *(unsigned int *)(a1 + 20);
  if (v6)
  {
    std::string __p = (char *)operator new(8 * v6);
    int v72 = &__p[8 * v6];
    *(void *)std::string __p = (unint64_t)(v6 - 1) << 32;
    unsigned int v7 = __p + 8;
  }
  else
  {
    double v8 = (char *)operator new(8uLL);
    *(void *)double v8 = 0xFFFFFFFF00000000;
    unsigned int v7 = v8 + 8;
    std::string __p = v8;
    int v72 = v8 + 8;
  }
  int v71 = v7;
  std::vector<BOOL>::resize((uint64_t)a2, v6, 0);
  if (a2[1])
  {
    int v9 = 0;
    double v10 = (void *)*a2;
    double v11 = (void *)*a2;
    do
    {
      *v11 |= 1 << v9;
      v11 += v9 == 63;
      if (v9 == 63) {
        int v9 = 0;
      }
      else {
        ++v9;
      }
    }
    while (v11 != &v10[a2[1] >> 6] || v9 != (a2[1] & 0x3F));
  }
  char v14 = __p;
  uint64_t v13 = v71;
  if (v71 != __p)
  {
    double v15 = v71;
    unsigned int v69 = v6;
    uint64_t v68 = v5;
    while (1)
    {
      unint64_t v17 = *((void *)v13 - 1);
      v13 -= 8;
      unint64_t v16 = v17;
      unint64_t v18 = HIDWORD(v17);
      uint64_t v19 = *(void *)(v5 + 8);
      double v20 = *(double *)(v19 + 8 * v17);
      double v21 = *(double *)(v19 + 8 * (v6 + v17));
      double v22 = *(double *)(v19 + 8 * HIDWORD(v17)) - v20;
      double v23 = *(double *)(v19 + 8 * (v6 + HIDWORD(v17))) - v21;
      unint64_t v24 = (v17 + 1);
      if (v24 >= HIDWORD(v17))
      {
        unint64_t v28 = v18;
        if (0.0 / (v23 * v23 + v22 * v22) <= a3) {
          goto LABEL_17;
        }
      }
      else
      {
        double v25 = (double *)(v19 + 8 * v24);
        double v26 = 0.0;
        unsigned int v27 = v24;
        LODWORD(v28) = v18;
        do
        {
          double v29 = fabs((*v25 - v20) * v23 - (v25[v6] - v21) * v22);
          if (v29 <= v26) {
            unint64_t v28 = v28;
          }
          else {
            unint64_t v28 = v27;
          }
          if (v29 > v26) {
            double v26 = v29;
          }
          ++v27;
          ++v25;
        }
        while (v18 != v27);
        if (v26 * v26 / (v23 * v23 + v22 * v22) <= a3)
        {
          unsigned int v30 = v69 + v16 - v18 + 1;
          int v31 = ~v16 + v18;
          do
          {
            if (a2[1] <= v24) {
              std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
            }
            *(void *)(*a2 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v24);
            ++v24;
            --v31;
          }
          while (v31);
          unsigned int v69 = v30;
          goto LABEL_17;
        }
      }
      uint64_t v32 = v16;
      if (v13 >= v72) {
        break;
      }
      *(void *)uint64_t v13 = v16 | (v28 << 32);
      uint64_t v33 = (unint64_t *)v72;
      size_t v34 = (unint64_t *)v15;
LABEL_52:
      if (v34 >= v33)
      {
        uint64_t v46 = ((char *)v34 - __p) >> 3;
        unint64_t v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 61) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        if (((char *)v33 - __p) >> 2 > v47) {
          unint64_t v47 = ((char *)v33 - __p) >> 2;
        }
        if ((unint64_t)((char *)v33 - __p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v48 = v47;
        }
        if (v48)
        {
          if (v48 >> 61) {
            std::__throw_bad_array_new_length[abi:ne180100]();
          }
          uint64_t v49 = operator new(8 * v48);
        }
        else
        {
          uint64_t v49 = 0;
        }
        uint64_t v50 = (unint64_t *)&v49[8 * v46];
        *uint64_t v50 = v16 & 0xFFFFFFFF00000000 | v28;
        uint64_t v13 = (char *)(v50 + 1);
        if (v34 == (unint64_t *)__p)
        {
          std::string __p = &v49[8 * v46];
          int v72 = &v49[8 * v48];
          uint64_t v5 = v68;
        }
        else
        {
          unint64_t v51 = (char *)(v34 - 1) - __p;
          if (v51 < 0x168
            || &v49[(char *)v34 - __p - 8 - (v51 & 0xFFFFFFFFFFFFFFF8)] > &v49[(char *)v34 - __p - 8]
            || (unint64_t *)((char *)v34 - (v51 & 0xFFFFFFFFFFFFFFF8) - 8) > v34 - 1
            || (unint64_t)(__p - v49) < 0x20)
          {
            unint64_t v52 = v34;
            uint64_t v5 = v68;
          }
          else
          {
            uint64_t v61 = (v51 >> 3) + 1;
            uint64_t v62 = 8 * (v61 & 0x3FFFFFFFFFFFFFFCLL);
            unint64_t v52 = &v34[v62 / 0xFFFFFFFFFFFFFFF8];
            uint64_t v50 = (unint64_t *)((char *)v50 - v62);
            unint64_t v63 = &v49[8 * v46 - 16];
            uint64_t v64 = v34 - 2;
            uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v5 = v68;
            do
            {
              long long v66 = *(_OWORD *)v64;
              *(v63 - 1) = *((_OWORD *)v64 - 1);
              _OWORD *v63 = v66;
              v63 -= 2;
              v64 -= 4;
              v65 -= 4;
            }
            while (v65);
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL)) {
              goto LABEL_67;
            }
          }
          do
          {
            unint64_t v53 = *--v52;
            *--uint64_t v50 = v53;
          }
          while (v52 != (unint64_t *)__p);
LABEL_67:
          size_t v34 = (unint64_t *)__p;
          std::string __p = (char *)v50;
          int v72 = &v49[8 * v48];
          if (!v34) {
            goto LABEL_17;
          }
        }
        operator delete(v34);
        goto LABEL_17;
      }
      unint64_t *v34 = v16 & 0xFFFFFFFF00000000 | v28;
      uint64_t v13 = (char *)(v34 + 1);
LABEL_17:
      char v14 = __p;
      double v15 = v13;
      if (v13 == __p) {
        goto LABEL_87;
      }
    }
    int64_t v35 = v13 - v14;
    uint64_t v36 = (v13 - v14) >> 3;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 61) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v38 = v72 - v14;
    if ((v72 - v14) >> 2 > v37) {
      unint64_t v37 = v38 >> 2;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      unsigned int v40 = (char *)operator new(8 * v39);
      int64_t v35 = v13 - v14;
      uint64_t v32 = v16;
    }
    else
    {
      unsigned int v40 = 0;
    }
    char v41 = &v40[8 * v36];
    uint64_t v33 = (unint64_t *)&v40[8 * v39];
    *(void *)char v41 = v32 | (v28 << 32);
    size_t v34 = (unint64_t *)(v41 + 8);
    if (v13 == v14)
    {
      std::string __p = &v40[8 * v36];
      int v72 = &v40[8 * v39];
      uint64_t v5 = v68;
LABEL_51:
      unint64_t v45 = v33;
      operator delete(v14);
      uint64_t v33 = v45;
      goto LABEL_52;
    }
    uint64_t v42 = v15 - 16;
    unint64_t v43 = v15 - 16 - v14;
    if (v43 >= 0x168)
    {
      if (&v40[v35 - 8 - (v43 & 0xFFFFFFFFFFFFFFF8)] > &v40[v35 - 8])
      {
        uint64_t v5 = v68;
      }
      else
      {
        uint64_t v5 = v68;
        if (&v42[-(v43 & 0xFFFFFFFFFFFFFFF8)] <= v42 && (unint64_t)(v42 - &v40[v35] + 8) >= 0x20)
        {
          uint64_t v54 = (v43 >> 3) + 1;
          uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
          v13 -= v55;
          v41 -= v55;
          unsigned int v56 = &v40[8 * v36 - 16];
          uint64_t v57 = v15 - 40;
          uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v60 = *(_OWORD *)v57;
            long long v59 = *((_OWORD *)v57 + 1);
            v57 -= 32;
            *((_OWORD *)v56 - 1) = v60;
            *(_OWORD *)unsigned int v56 = v59;
            v56 -= 32;
            v58 -= 4;
          }
          while (v58);
          if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_48:
            char v14 = __p;
            std::string __p = v41;
            int v72 = (char *)v33;
            if (!v14) {
              goto LABEL_52;
            }
            goto LABEL_51;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = v68;
    }
    do
    {
      uint64_t v44 = *((void *)v13 - 1);
      v13 -= 8;
      *((void *)v41 - 1) = v44;
      v41 -= 8;
    }
    while (v13 != v14);
    goto LABEL_48;
  }
  unsigned int v69 = v6;
  if (v71)
  {
LABEL_87:
    operator delete(v13);
    return v69;
  }
  return v6;
}

void sub_259056C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void GeomUtils::AlgebricCameraCalibration(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = -858993459 * ((unint64_t)(a1[1] - *a1) >> 3);
  memset(v13, 0, 24);
  if (v4)
  {
    unint64_t v16 = &unk_2707171D8;
    uint64_t v20 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    char v19 = 0;
    GeomUtils::ComputeHomography(v3, v2);
  }
  std::vector<Matrix<double>>::vector(&__p, (uint64_t *)v13);
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)__p) >> 3);
  unint64_t v16 = &unk_2707171D8;
  if (1717986920 * ((v12 - (uint64_t)__p) >> 3)) {
    operator new[]();
  }
  unint64_t v6 = 0;
  uint64_t v17 = 0;
  LODWORD(v18) = -1717986918 * ((v12 - (uint64_t)__p) >> 3);
  HIDWORD(v18) = 4;
  char v19 = 0;
  uint64_t v20 = 32 * v18;
  if (v5)
  {
    unsigned int v7 = (double **)((char *)__p + 8);
    uint64_t v8 = 4 * (v5 & 0x3FFFFFFF);
    do
    {
      int v9 = *v7;
      v7 += 5;
      double *v6 = v9[3] * v9[4] + *v9 * v9[1];
      v6[1] = v9[6] * v9[1] + *v9 * v9[7];
      v6[2] = v9[6] * v9[4] + v9[3] * v9[7];
      v6[3] = v9[6] * v9[7];
      double v10 = &v6[v8];
      *double v10 = v9[3] * v9[3] + *v9 * *v9 - v9[1] * v9[1] - v9[4] * v9[4];
      v10[1] = v9[1] * -2.0 * v9[7] + (*v9 + *v9) * v9[6];
      double v10[2] = v9[4] * -2.0 * v9[7] + (v9[3] + v9[3]) * v9[6];
      v10[3] = v9[6] * v9[6] - v9[7] * v9[7];
      v6 += 4;
      LODWORD(v5) = v5 - 1;
    }
    while (v5);
  }
  v13[5] = (void *)1;
  char v14 = 0;
  uint64_t v15 = 0;
  v13[3] = &unk_270717208;
  v13[4] = 0;
  Matrix<double>::Svd0LowestSingularVector((uint64_t)&v16);
}

void sub_259057378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  std::vector<Matrix<double>>::~vector[abi:ne180100]((void **)va);
  std::vector<Matrix<double>>::~vector[abi:ne180100]((void **)va1);
  _Unwind_Resume(a1);
}

void sub_2590573B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  std::vector<Matrix<double>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void sub_2590573C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,char a26)
{
  Matrix<double>::~Matrix((uint64_t)&a26);
  Matrix<double>::~Matrix(v26 - 144);
  Matrix<double>::~Matrix((uint64_t)&a18);
  std::vector<Matrix<double>>::~vector[abi:ne180100](&a23);
  _Unwind_Resume(a1);
}

void sub_259057438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  Matrix<double>::~Matrix(v15 - 144);
  std::vector<Matrix<double>>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

void GeomUtils::ComputeHomography(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a2 + 20);
  v9[0] = &unk_2707171D8;
  if (v2) {
    operator new[]();
  }
  int v10 = 3;
  int v11 = 0;
  char v12 = 0;
  uint64_t v13 = 24 * v2;
  v9[0] = &unk_2707172D0;
  v9[1] = 0;
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  v4[0] = &unk_2707171D8;
  if (v3) {
    operator new[]();
  }
  int v5 = 3;
  int v6 = 0;
  char v7 = 0;
  uint64_t v8 = 24 * v3;
  v4[0] = &unk_2707172D0;
  v4[1] = 0;
  GeomUtils::ComputeHomography((uint64_t)v4, (uint64_t)v9);
}

{
  uint64_t v4;
  const double *v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  void *v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  void *v33;
  void **v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  double v38[3];
  char v39;
  uint64_t v40;
  void *v41;
  const double *v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  void v47[2];
  int v48;
  int v49;
  char v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  double v54;
  uint64_t v55;
  double v56;
  double v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  const double *v62;
  double v63;
  uint64_t v64;
  double v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  uint64_t v70 = *MEMORY[0x263EF8340];
  int v4 = *(unsigned int *)(a1 + 20);
  int v5 = *(const double **)(a2 + 8);
  int v6 = *(unsigned int *)(a2 + 20);
  unint64_t v48 = 1;
  uint64_t v49 = v6;
  uint64_t v50 = 0;
  unint64_t v51 = 8 * v6;
  v47[0] = &unk_270717208;
  v47[1] = v5;
  unint64_t v43 = 1;
  uint64_t v44 = v6;
  unint64_t v45 = 0;
  uint64_t v46 = 8 * v6;
  char v41 = &unk_270717208;
  uint64_t v42 = &v5[v6];
  uint64_t v61 = 0.0;
  vDSPMeanv<double>(v5, 1, &v61, v6);
  char v7 = v61;
  uint64_t v61 = 0.0;
  vDSPMeanv<double>(v42, 1, &v61, v44);
  uint64_t v8 = v61;
  MatrixNxPts<1u,double>::operator-((uint64_t)v47, (uint64_t)&v52, v7);
  MatrixNxPts<1u,double>::Abs((uint64_t)&v52, (uint64_t)&v61);
  v38[0] = 0.0;
  vDSPMeanv<double>(v62, 1, v38, HIDWORD(v63) * LODWORD(v63));
  int v9 = v38[0];
  uint64_t v61 = COERCE_DOUBLE(&unk_2707171D8);
  if (v62 && (_BYTE)v64)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v62 = 0;
    uint64_t v65 = 0.0;
    LOBYTE(v64) = 0;
  }
  unint64_t v63 = 0.0;
  unint64_t v52 = COERCE_DOUBLE(&unk_2707171D8);
  if (v53 && (_BYTE)v55) {
    MEMORY[0x25A2D62A0]();
  }
  MatrixNxPts<1u,double>::operator-((uint64_t)&v41, (uint64_t)&v52, v8);
  MatrixNxPts<1u,double>::Abs((uint64_t)&v52, (uint64_t)&v61);
  v38[0] = 0.0;
  vDSPMeanv<double>(v62, 1, v38, HIDWORD(v63) * LODWORD(v63));
  int v10 = v38[0];
  uint64_t v61 = COERCE_DOUBLE(&unk_2707171D8);
  if (v62 && (_BYTE)v64)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v62 = 0;
    uint64_t v65 = 0.0;
    LOBYTE(v64) = 0;
  }
  unint64_t v63 = 0.0;
  unint64_t v52 = COERCE_DOUBLE(&unk_2707171D8);
  if (v53 && (_BYTE)v55) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v61 = 1.0 / v9;
  uint64_t v62 = 0;
  unint64_t v63 = -v7 / v9;
  uint64_t v64 = 0;
  uint64_t v65 = 1.0 / v10;
  long long v66 = -v8 / v10;
  int v67 = 0;
  uint64_t v68 = 0;
  unsigned int v69 = 0x3FF0000000000000;
  unint64_t v52 = v9;
  unint64_t v53 = 0;
  uint64_t v54 = v7;
  uint64_t v55 = 0;
  unsigned int v56 = v10;
  uint64_t v57 = v8;
  uint64_t v58 = 0;
  long long v59 = 0;
  long long v60 = 0x3FF0000000000000;
  *(void *)&v38[0] = &unk_2707171D8;
  *(void *)&v38[1] = &v61;
  *(void *)&v38[2] = 0x300000003;
  unint64_t v39 = 0;
  unsigned int v40 = 72;
  uint64_t v33 = &unk_2707171D8;
  size_t v34 = (void **)&v52;
  int64_t v35 = 0x300000003;
  uint64_t v36 = 0;
  unint64_t v37 = 72;
  int v11 = *(unsigned int *)(a2 + 20);
  double v21 = &unk_2707171D8;
  if (v11) {
    operator new[]();
  }
  double v22 = 0;
  double v23 = 3;
  unint64_t v24 = 0;
  double v25 = 0;
  uint64_t v26 = 24 * v11;
  Matrix<double>::MultAxBToC((uint64_t)v38, a2, (uint64_t)&v21);
  double v29 = 3;
  unsigned int v30 = v24;
  int v31 = v25;
  uint64_t v32 = v26;
  unsigned int v27 = &unk_2707172D0;
  unint64_t v28 = v22;
  double v21 = &unk_2707171D8;
  if (18 * v4) {
    operator new[]();
  }
  char v12 = 0;
  double v22 = 0;
  double v23 = 2 * v4;
  unint64_t v24 = 9;
  double v25 = 0;
  uint64_t v26 = 72 * (2 * v4);
  if (v4)
  {
    uint64_t v13 = 0;
    uint64_t v14 = v28;
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v16 = v28 + 8 * v4;
    do
    {
      uint64_t v17 = *(double *)(v15 + 8 * v13);
      uint64_t v18 = *(double *)(v15 + 8 * v4 + 8 * v13);
      char v19 = *(double *)(v14 + 8 * v13);
      uint64_t v20 = *(double *)(v16 + 8 * v13);
      *(double *)char v12 = v17;
      *(double *)(v12 + 8) = v18;
      *(void *)(v12 + 16) = 0x3FF0000000000000;
      *(void *)(v12 + 24) = 0;
      *(void *)(v12 + 32) = 0;
      *(void *)(v12 + 40) = 0;
      *(double *)(v12 + 48) = -(v19 * v17);
      *(double *)(v12 + 56) = -(v19 * v18);
      *(double *)(v12 + 64) = -v19;
      *(void *)(v12 + 80) = 0;
      *(void *)(v12 + 88) = 0;
      *(void *)(v12 + 72) = 0;
      *(double *)(v12 + 96) = v17;
      *(double *)(v12 + 104) = v18;
      *(void *)(v12 + 112) = 0x3FF0000000000000;
      *(double *)(v12 + 120) = -(v20 * v17);
      *(double *)(v12 + 128) = -(v20 * v18);
      *(double *)(v12 + 136) = -v20;
      ++v13;
      v12 += 144;
    }
    while (v4 != v13);
    if (v4 > 4) {
      Matrix<double>::Transpose((uint64_t)&v21);
    }
  }
  Matrix<double>::Svd0LowestSingularVector((uint64_t)&v21);
}

void sub_2590576CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590576E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void **std::vector<Matrix<double>>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    int v4 = *a1;
    if (v3 != v2)
    {
      int v5 = v3 - 40;
      int v6 = v3 - 40;
      char v7 = v3 - 40;
      do
      {
        uint64_t v8 = *(void (***)(char *))v7;
        v7 -= 40;
        (*v8)(v6);
        v5 -= 40;
        BOOL v9 = v6 == v2;
        int v6 = v7;
      }
      while (!v9);
      int v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void GeomUtils::estimatePlanePosition(uint64_t a1)
{
}

void sub_259057D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  Matrix<double>::~Matrix((uint64_t)&a9);
  Matrix<double>::~Matrix((uint64_t)&a14);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a19);
  Matrix<double>::~Matrix((uint64_t)&a24);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a29);
  MatrixNxPts<1u,double>::~MatrixNxPts(v29 - 184);
  MatrixNxPts<1u,double>::~MatrixNxPts(v29 - 144);
  Matrix<double>::~Matrix(v29 - 104);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::DistortRadialLiteInternal(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  if (*(_DWORD *)(a1 + 16) != 2) {
    GeomUtils::DistortRadialLiteInternal();
  }
  uint64_t v9 = *(void *)(a2 + 32);
  if (a5) {
    uint64_t v10 = *(void *)(a2 + 32);
  }
  else {
    uint64_t v10 = *(void *)(a2 + 40);
  }
  if (a5) {
    uint64_t v9 = *(void *)(a2 + 40);
  }
  uint64_t v11 = *(unsigned int *)(a2 + 24);
  uint64_t v63 = v9;
  int v64 = 1;
  int v65 = v11;
  char v66 = 0;
  uint64_t v67 = 8 * v11;
  uint64_t v61 = 8 * v11;
  uint64_t v62 = &unk_270717208;
  int v58 = 1;
  int v59 = v11;
  char v60 = 0;
  unsigned int v56 = &unk_270717208;
  uint64_t v57 = v10;
  int v12 = *(_DWORD *)(a1 + 20);
  uint64_t v50 = &unk_2707171D8;
  if (v12) {
    operator new[]();
  }
  int v52 = 1;
  int v53 = 0;
  char v54 = 0;
  uint64_t v55 = 0;
  uint64_t v50 = &unk_270717208;
  uint64_t v51 = 0;
  int v46 = 1;
  int v47 = 0;
  char v48 = 0;
  uint64_t v49 = 0;
  uint64_t v44 = &unk_270717208;
  uint64_t v45 = 0;
  uint64_t v38 = &unk_2707171D8;
  unint64_t v39 = 0;
  unsigned int v40 = 2;
  unsigned int v41 = 0;
  char v42 = 0;
  uint64_t v43 = 0;
  int v13 = *(_DWORD *)(a1 + 20);
  if (a5)
  {
    if (v13)
    {
      if (*(_DWORD *)(a1 + 16)) {
        int v28 = 120;
      }
      else {
        int v28 = 126;
      }
      __assert_rtn("operator()", "Matrix.hpp", v28, "row < m_rows && col < m_cols");
    }
  }
  else if (v13)
  {
    if (*(_DWORD *)(a1 + 16)) {
      int v29 = 120;
    }
    else {
      int v29 = 126;
    }
    __assert_rtn("operator()", "Matrix.hpp", v29, "row < m_rows && col < m_cols");
  }
  Matrix<double>::DotMult<double>((uint64_t)&v38, (uint64_t)&v38, (uint64_t)v36);
  if (a6)
  {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>((uint64_t)&v62, (uint64_t)&v56, (uint64_t)&v50, (uint64_t)&v44);
  }
  else
  {
    if (!v53) {
      __assert_rtn("Interp1WithExtrap", "Algo.hpp", 1355, "xq.GetNumOfPoints() > 0");
    }
    Interp1WithExtrap<double,LinearInterpolator<double>>((uint64_t)&v62, (uint64_t)&v56, (uint64_t)&v50, (uint64_t)&v44, 0);
  }
  Matrix<double>::DotDiv((uint64_t)&v44, (uint64_t)&v50, (uint64_t)v68);
  uint64_t v33 = v69;
  unsigned int v34 = v70;
  char v35 = v71;
  uint64_t v16 = v53;
  if (v53 >= 1)
  {
    if (!v52) {
      goto LABEL_28;
    }
    unint64_t v17 = 0;
    do
    {
      if (*(double *)(v51 + 8 * v17) == 0.0)
      {
        if (v17 >= v34) {
          goto LABEL_28;
        }
        v33[v17] = 1.0;
      }
      ++v17;
    }
    while (v16 != v17);
    if (!v40) {
LABEL_28:
    }
      __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
    uint64_t v18 = v41;
    if (v40 < 2)
    {
      if (!v41 || !v34 || !*(_DWORD *)(a3 + 16) || !*(_DWORD *)(a3 + 20)) {
        goto LABEL_28;
      }
      unsigned int v30 = *(double **)(a3 + 8);
      double v31 = *v39 * *v33;
      goto LABEL_78;
    }
    unint64_t v19 = 0;
    do
    {
      if (v18 == v19) {
        goto LABEL_28;
      }
      if (v19 >= v34) {
        goto LABEL_28;
      }
      unsigned int v20 = *(_DWORD *)(a3 + 16);
      if (!v20) {
        goto LABEL_28;
      }
      unint64_t v21 = *(unsigned int *)(a3 + 20);
      if (v19 >= v21) {
        goto LABEL_28;
      }
      *(double *)(*(void *)(a3 + 8) + 8 * v19) = v39[v19] * v33[v19];
      if (v20 < 2) {
        goto LABEL_28;
      }
      *(double *)(*(void *)(a3 + 8) + 8 * v21 + 8 * v19) = v33[v19] * v39[v18 + v19];
      ++v19;
    }
    while (v16 != v19);
    if (a5)
    {
      int v22 = *(_DWORD *)(a3 + 16);
      if (!v22) {
        goto LABEL_28;
      }
      uint64_t v23 = *(unsigned int *)(a3 + 20);
      if (v22 != 1)
      {
        uint64_t v24 = 0;
        uint64_t v25 = 8 * v23;
        uint64_t v26 = 8 * v16;
        while (v25 != v24)
        {
          *(double *)(*(void *)(a3 + 8) + v24) = *(double *)(*(void *)(a3 + 8) + v24)
                                                 + *(double *)(a2 + 216) * *(double *)a2;
          *(double *)(*(void *)(a3 + 8) + v25 + v24) = *(double *)(*(void *)(a3 + 8) + v25 + v24)
                                                       + *(double *)(a2 + 224) * *(double *)a2;
          v24 += 8;
          if (v26 == v24) {
            goto LABEL_43;
          }
        }
        goto LABEL_28;
      }
      if (!v23) {
        goto LABEL_28;
      }
      unsigned int v30 = *(double **)(a3 + 8);
      double v31 = *v30 + *(double *)(a2 + 216) * *(double *)a2;
LABEL_78:
      *unsigned int v30 = v31;
      goto LABEL_28;
    }
  }
LABEL_43:
  if (v33 && v35) {
    MEMORY[0x25A2D62A0]();
  }
  v36[0] = &unk_2707171D8;
  if (v36[1] && v37) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v38 = &unk_2707171D8;
  if (v39 && v42) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v44 = &unk_2707171D8;
  if (v45 && v48) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v50 = &unk_2707171D8;
  if (v51 && v54) {
    MEMORY[0x25A2D62A0]();
  }
  unsigned int v56 = &unk_2707171D8;
  if (v57 && v60) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v62 = &unk_2707171D8;
  if (v63 && v66) {
    MEMORY[0x25A2D62A0]();
  }
  return 0;
}

void sub_25905873C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a29);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a34);
  MatrixNxPts<1u,double>::~MatrixNxPts(v34 - 224);
  MatrixNxPts<1u,double>::~MatrixNxPts(v34 - 184);
  _Unwind_Resume(a1);
}

uint64_t Matrix<double>::operator()(uint64_t a1, _DWORD *a2, unsigned int *a3)
{
  if (*a2 >= *(_DWORD *)(a1 + 16) || (v3 = *a3, unsigned int v4 = *(_DWORD *)(a1 + 20), v3 >= v4)) {
    Matrix<double>::operator()();
  }
  return *(void *)(a1 + 8) + 8 * v3 + 8 * v4 * *a2;
}

void Matrix<double>::DotMult<double>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v3 != *(_DWORD *)(a1 + 20) || (unsigned int v4 = *(_DWORD *)(a2 + 16), v4 != *(_DWORD *)(a1 + 16))) {
    Matrix<double>::DotMult<double>();
  }
  *(void *)a3 = &unk_2707171D8;
  if (v4 * v3) {
    operator new[]();
  }
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 8 * v3 * (unint64_t)v4;
  vDSPVmul<double,double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, 0, 1, 0);
}

void sub_259058910(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::DistortRadialLite<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  return 0;
}

{
  GeomUtils::DistortRadialLiteInternal(a1, a2, a3, 1, a4, a5);
  return 0;
}

void GeomUtils::ToHomg(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(unsigned int *)(a1 + 20);
  *(void *)a2 = &unk_2707171D8;
  if (v2) {
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = 3;
  *(_DWORD *)(a2 + 20) = 0;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 24 * v2;
  *(void *)a2 = &unk_2707172D0;
  *(void *)(a2 + 8) = 0;
}

float64_t GeomUtils::ToNonHomg@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(unsigned int *)(a1 + 20);
  *(void *)a2 = &unk_2707171D8;
  uint64_t v4 = (2 * v3);
  if (v4) {
    operator new[]();
  }
  int v5 = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = v3;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 16 * v3;
  *(void *)a2 = &unk_270717308;
  *(void *)(a2 + 8) = 0;
  if (v3)
  {
    int v6 = *(float64x2_t **)(a1 + 8);
    uint64_t v7 = v4;
    unint64_t v8 = 8 * v3;
    if (v3 < 0x14)
    {
      LODWORD(v9) = 0;
LABEL_57:
      uint64_t v32 = *(double **)(a1 + 8);
      double v31 = 0;
LABEL_58:
      int v36 = v3 - v9;
      do
      {
        *double v31 = *v32 / v32[v4];
        v35.f64[0] = v32[v3] / v32[v4];
        v31[v3] = v35.f64[0];
        ++v31;
        ++v32;
        --v36;
      }
      while (v36);
      return v35.f64[0];
    }
    LODWORD(v9) = 0;
    uint64_t v10 = (v3 - 1);
    unint64_t v11 = v10 * 8 + 8;
    unint64_t v12 = v10 * 8 + 8 + v8;
    int v13 = &v6->f64[v10 + 1];
    uint64_t v14 = (char *)v6 + v7 * 8;
    unint64_t v15 = (unint64_t)&v6->f64[v10 + 1 + v7];
    uint64_t v16 = (char *)v6 + v8;
    unint64_t v17 = (char *)v6 + v12;
    if (v13) {
      BOOL v18 = (unint64_t)v6 >= v11;
    }
    else {
      BOOL v18 = 1;
    }
    char v19 = !v18;
    if (v15) {
      BOOL v20 = (unint64_t)v14 >= v11;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = !v20;
    if (v17) {
      BOOL v22 = (unint64_t)v16 >= v11;
    }
    else {
      BOOL v22 = 1;
    }
    char v23 = !v22;
    BOOL v25 = v8 < (unint64_t)v13 && (unint64_t)v6 < v12;
    BOOL v27 = v8 < v15 && (unint64_t)v14 < v12;
    BOOL v29 = v8 < (unint64_t)v17 && (unint64_t)v16 < v12;
    BOOL v30 = v8 >= v11 || v12 == 0;
    if (!v30 || (v19 & 1) != 0 || (v21 & 1) != 0 || (v23 & 1) != 0 || v25 || v27 || v29) {
      goto LABEL_57;
    }
    uint64_t v9 = v3 & 0xFFFFFFFE;
    double v31 = (double *)(8 * v9);
    uint64_t v32 = &v6->f64[v9];
    uint64_t v33 = v9;
    do
    {
      float64x2_t v34 = *(float64x2_t *)((char *)v6 + 8 * v4);
      float64x2_t *v5 = vdivq_f64(*v6, v34);
      float64x2_t v35 = vdivq_f64(*(float64x2_t *)((char *)v6 + 8 * v3), v34);
      *(float64x2_t *)((char *)v5++ + 8 * v3) = v35;
      ++v6;
      v33 -= 2;
    }
    while (v33);
    if (v9 != v3) {
      goto LABEL_58;
    }
  }
  return v35.f64[0];
}

{
  uint64_t v3;
  uint64_t v4;
  float64x2_t *v5;
  float64x2_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  float64_t *v13;
  char *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  BOOL v18;
  char v19;
  BOOL v20;
  char v21;
  BOOL v22;
  char v23;
  BOOL v25;
  BOOL v27;
  BOOL v29;
  BOOL v30;
  double *v31;
  double *v32;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int v36;

  uint64_t v3 = *(unsigned int *)(a1 + 20);
  *(void *)a2 = &unk_2707171D8;
  uint64_t v4 = (2 * v3);
  if (v4) {
    operator new[]();
  }
  int v5 = 0;
  *(_DWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 20) = v3;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 16 * v3;
  *(void *)a2 = &unk_270717308;
  *(void *)(a2 + 8) = 0;
  if (v3)
  {
    int v6 = *(float64x2_t **)(a1 + 8);
    uint64_t v7 = v4;
    unint64_t v8 = 8 * v3;
    if (v3 < 0x14)
    {
      LODWORD(v9) = 0;
LABEL_57:
      uint64_t v32 = *(double **)(a1 + 8);
      double v31 = 0;
LABEL_58:
      int v36 = v3 - v9;
      do
      {
        *double v31 = *v32 / v32[v4];
        v35.f64[0] = v32[v3] / v32[v4];
        v31[v3] = v35.f64[0];
        ++v31;
        ++v32;
        --v36;
      }
      while (v36);
      return v35.f64[0];
    }
    LODWORD(v9) = 0;
    uint64_t v10 = (v3 - 1);
    unint64_t v11 = v10 * 8 + 8;
    unint64_t v12 = v10 * 8 + 8 + v8;
    int v13 = &v6->f64[v10 + 1];
    uint64_t v14 = (char *)v6 + v7 * 8;
    unint64_t v15 = (unint64_t)&v6->f64[v10 + 1 + v7];
    uint64_t v16 = (char *)v6 + v8;
    unint64_t v17 = (char *)v6 + v12;
    if (v13) {
      BOOL v18 = (unint64_t)v6 >= v11;
    }
    else {
      BOOL v18 = 1;
    }
    char v19 = !v18;
    if (v15) {
      BOOL v20 = (unint64_t)v14 >= v11;
    }
    else {
      BOOL v20 = 1;
    }
    char v21 = !v20;
    if (v17) {
      BOOL v22 = (unint64_t)v16 >= v11;
    }
    else {
      BOOL v22 = 1;
    }
    char v23 = !v22;
    BOOL v25 = v8 < (unint64_t)v13 && (unint64_t)v6 < v12;
    BOOL v27 = v8 < v15 && (unint64_t)v14 < v12;
    BOOL v29 = v8 < (unint64_t)v17 && (unint64_t)v16 < v12;
    BOOL v30 = v8 >= v11 || v12 == 0;
    if (!v30 || (v19 & 1) != 0 || (v21 & 1) != 0 || (v23 & 1) != 0 || v25 || v27 || v29) {
      goto LABEL_57;
    }
    uint64_t v9 = v3 & 0xFFFFFFFE;
    double v31 = (double *)(8 * v9);
    uint64_t v32 = &v6->f64[v9];
    uint64_t v33 = v9;
    do
    {
      float64x2_t v34 = *(float64x2_t *)((char *)v6 + 8 * v4);
      float64x2_t *v5 = vdivq_f64(*v6, v34);
      float64x2_t v35 = vdivq_f64(*(float64x2_t *)((char *)v6 + 8 * v3), v34);
      *(float64x2_t *)((char *)v5++ + 8 * v3) = v35;
      ++v6;
      v33 -= 2;
    }
    while (v33);
    if (v9 != v3) {
      goto LABEL_58;
    }
  }
  return v35.f64[0];
}

void sub_259059900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
}

void MatrixNxPts<1u,double>::operator-(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (v5 * v4) {
    operator new[]();
  }
  double v6 = -a3;
  vDSPVsadd<double>(*(const double **)(a1 + 8), 1, &v6, 0, 1, 0);
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = v5;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 8 * v4 * (unint64_t)v5;
  *(void *)a2 = &unk_270717208;
  *(void *)(a2 + 8) = 0;
}

void sub_259059B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void MatrixNxPts<1u,double>::Abs(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (v4 * v3) {
    operator new[]();
  }
  vDSPVabs<double>(*(const double **)(a1 + 8), 1, 0, 1, 0);
  *(_DWORD *)(a2 + 16) = 1;
  *(_DWORD *)(a2 + 20) = v4;
  *(unsigned char *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 8 * v3 * (unint64_t)v4;
  *(void *)a2 = &unk_270717208;
  *(void *)(a2 + 8) = 0;
}

void sub_259059C4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Matrix<double>::Transpose(uint64_t a1)
{
  Matrix<double>::Matrix((uint64_t)&v1, a1, 0, -1);
}

void sub_259059D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259059D88(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix(v2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void Matrix<double>::Svd0LowestSingularVector(uint64_t a1)
{
  uint64_t v9 = 0;
  v7[1] = 0;
  v7[2] = 0;
  uint64_t v6 = 0;
  v7[0] = &unk_2707171D8;
  char v8 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  uint64_t v3 = 0;
  v4[0] = &unk_2707171D8;
  char v5 = 0;
  v1[2] = 1;
  char v2 = 0;
  v1[0] = &unk_270717208;
  v1[1] = 0;
  Matrix<double>::Svd(a1, (uint64_t)v7, (uint64_t)v1, (uint64_t)v4);
}

void sub_259059FE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

void GeomUtils::homography2d(void *a1@<X8>)
{
  uint64_t v10 = 0;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v5 = 0;
  long long v3 = 0u;
  long long v4 = 0u;
  long long v1 = 0u;
  long long v2 = 0u;
  *a1 = &unk_2707171D8;
  operator new[]();
}

void sub_25905A63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  Matrix<double>::~Matrix((uint64_t)&a14);
  Matrix<double>::~Matrix((uint64_t)&a9);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&a19);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&a24);
  Matrix<double>::~Matrix((uint64_t)&a29);
  Matrix<double>::~Matrix((uint64_t)&a34);
  Matrix<double>::~Matrix(v34);
  _Unwind_Resume(a1);
}

void GeomUtils::ransacComputeHomography(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20)) {
    operator new[]();
  }
  if (*(_DWORD *)(a2 + 20)) {
    operator new[]();
  }
  Algo::Normalize2DPts();
}

{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *__dst;
  int v7;
  int v8;
  char v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  int v13;
  int v14;
  char v15;
  uint64_t v16;

  long long v3 = *(unsigned int *)(a1 + 20);
  uint64_t v11 = &unk_2707171D8;
  if (v3) {
    operator new[]();
  }
  uint64_t v13 = 3;
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  uint64_t v16 = 24 * v3;
  uint64_t v11 = &unk_2707172D0;
  uint64_t v12 = 0;
  long long v4 = *(unsigned int *)(a2 + 20);
  uint64_t v5 = &unk_2707171D8;
  if (v4) {
    operator new[]();
  }
  std::locale __dst = 0;
  long long v7 = 3;
  long long v8 = 0;
  long long v9 = 0;
  uint64_t v10 = 24 * v4;
  uint64_t v5 = &unk_2707172D0;
  memcpy(0, *(const void **)(a1 + 8), 8 * (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)));
  memcpy(0, *(const void **)(a2 + 8), 8 * (*(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16)));
  __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
}

void sub_25905BE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
}

void sub_25905C1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905C1F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::ransacFitPlane(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, unsigned int *a5, _DWORD *a6)
{
  uint64_t result = Algo::RansacPlane(a1, 3, 10, 50, 1u, a4, a5, a6);
  unsigned int v11 = *a5;
  if (*a5 > 2)
  {
    if (v11 == 3) {
      uint64_t v12 = 4;
    }
    else {
      uint64_t v12 = v11;
    }
    uint64_t v24 = &unk_2707171D8;
    if (4 * v12) {
      operator new[]();
    }
    uint64_t v25 = 0;
    int v26 = v12;
    int v27 = 4;
    char v28 = 0;
    uint64_t v29 = 32 * v12;
    if (!v11) {
      goto LABEL_21;
    }
    int v13 = *(_DWORD *)(a1 + 16);
    if (v13)
    {
      uint64_t v14 = *(unsigned int *)(a1 + 20);
      if (v13 == 1)
      {
        uint64_t v21 = **(unsigned int **)(a4 + 8);
        if (v14 > v21) {
          MEMORY[0] = *(void *)(*(void *)(a1 + 8) + 8 * v21);
        }
      }
      else
      {
        if (v13 != 2)
        {
          uint64_t v15 = 0;
          do
          {
            uint64_t v16 = *(unsigned int *)(*(void *)(a4 + 8) + v15);
            if (v14 <= v16 || 4 * v12 == v15) {
              goto LABEL_26;
            }
            uint64_t v18 = 8 * v16;
            uint64_t v19 = (8 * v15) & 0x7FFFFFFE0;
            *(void *)(v25 + v19) = *(void *)(*(void *)(a1 + 8) + v18);
            *(void *)(v25 + v19 + 8) = *(void *)(*(void *)(a1 + 8) + v18 + 8 * v14);
            *(void *)(v25 + v19 + 16) = *(void *)(*(void *)(a1 + 8) + v18 + 8 * (2 * v14));
            *(void *)(v25 + v19 + 24) = 0x3FF0000000000000;
            v15 += 4;
          }
          while (4 * v11 != v15);
          if (v11 == 3)
          {
            if (v12 <= 3) {
              __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
            }
            uint64_t v20 = v25;
            *(_OWORD *)(v25 + 96) = 0u;
            *(_OWORD *)(v20 + 112) = 0u;
          }
LABEL_21:
          Matrix<double>::Svd0LowestSingularVector((uint64_t)&v24);
        }
        uint64_t v22 = **(unsigned int **)(a4 + 8);
        if (v14 > v22)
        {
          char v23 = (void *)(*(void *)(a1 + 8) + 8 * v22);
          MEMORY[0] = *v23;
          MEMORY[8] = v23[v14];
        }
      }
    }
LABEL_26:
    __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
  }
  *a5 = 0;
  *a3 = 0x4197D78400000000;
  return result;
}

void sub_25905C724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void sub_25905C778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void GeomUtils::estimateBestRotMat(uint64_t a1)
{
  uint64_t v9 = 0;
  v7[1] = 0;
  v7[2] = 0;
  v7[0] = &unk_2707171D8;
  char v8 = 0;
  uint64_t v6 = 0;
  v4[1] = 0;
  void v4[2] = 0;
  uint64_t v3 = 0;
  v4[0] = &unk_2707171D8;
  char v5 = 0;
  v1[2] = 1;
  char v2 = 0;
  v1[0] = &unk_270717208;
  v1[1] = 0;
  Matrix<double>::Svd(a1, (uint64_t)v7, (uint64_t)v1, (uint64_t)v4);
}

void sub_25905CA1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v16 = va_arg(va3, void);
  uint64_t v18 = va_arg(va3, void);
  uint64_t v19 = va_arg(va3, void);
  uint64_t v20 = va_arg(va3, void);
  uint64_t v21 = va_arg(va3, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va2);
  Matrix<double>::~Matrix((uint64_t)va3);
  Matrix<double>::~Matrix(v2 - 104);
  _Unwind_Resume(a1);
}

void Matrix<double>::Svd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  if (v4 * v5) {
    operator new[]();
  }
  if ((int)v4 >= 1)
  {
    unint64_t v6 = *(void *)(a1 + 8);
    unint64_t v7 = v6 + 8 * (int)v4;
    do
      v6 += 8;
    while (v6 < v7);
  }
  if (*(void *)(a3 + 32) < (unint64_t)(8 * v4))
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = 1;
  *(_DWORD *)(a3 + 20) = v4;
  if (*(void *)(a4 + 32) < (unint64_t)(8 * v4 * v4))
  {
    if (*(void *)(a4 + 8) && *(unsigned char *)(a4 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = v4;
  *(_DWORD *)(a4 + 20) = v4;
  if ((int)v5 >= (int)v4) {
    uint64_t v8 = v4;
  }
  else {
    uint64_t v8 = v5;
  }
  if (*(void *)(a2 + 32) < (unint64_t)(8 * v5 * v8))
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v8;
  operator new[]();
}

void sub_25905CE50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905CE64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905CE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905CE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905CEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25905CEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t GeomUtils::CalcRotTrans(uint64_t a1, double *a2, double *a3, uint64_t a4, double *a5, float64x2_t *a6)
{
  MatrixMxN<3u,3u,double>::svdLapack();
  _Q0 = 0u;
  _Q3.i64[0] = 0;
  double v13 = 0.0 * 0.0 + 0.0;
  *(double *)v14.i64 = vmlad_n_f64(v13 + 0.0, 0.0, 0.0);
  double v15 = vmlad_n_f64(0.0 - 0.0 + 0.0 * 0.0, 0.0, 0.0);
  double v16 = v13 + 0.0 * 0.0 + 0.0;
  __asm
  {
    FMLA            D10, D3, V0.D[1]
    FMLA            D11, D3, V0.D[1]
  }
  double v22 = 0.0;
  *(double *)v6.i64 = *(double *)v14.i64 * 0.0 + 0.0 + v15 * 0.0 + v16 * 0.0;
  double v23 = _D10 * 0.0 + 0.0 + _D11 * 0.0 + v16 * 0.0;
  if ((*(void *)&v23 ^ v6.i64[0]) < 0
    || (double v24 = v13 + 0.0 + 0.0 * 0.0,
        double v25 = 0.0 - 0.0 + 0.0 * 0.0 + 0.0 * 0.0,
        ((COERCE_UNSIGNED_INT64(v24 * 0.0 + 0.0 + v25 * 0.0 + v16 * 0.0) ^ v6.i64[0]) & 0x8000000000000000) != 0))
  {
    __asm
    {
      FMLA            D26, D3, V0.D[1]
      FMLA            D25, D3, V0.D[1]
    }
    *(double *)v14.i64 = vmlad_n_f64(v13 - 0.0, 0.0, 0.0) * 0.0
                       + 0.0
                       + vmlad_n_f64(0.0 + 0.0 + 0.0 * 0.0, 0.0, 0.0) * 0.0
                       + v16 * 0.0;
    double v42 = (v13 - 0.0 + 0.0 * 0.0) * 0.0 + 0.0 + (0.0 + 0.0 + 0.0 * 0.0 + 0.0 * 0.0) * 0.0 + v16 * 0.0;
    _Q3.i64[0] = 1.0;
    v43.f64[0] = NAN;
    v43.f64[1] = NAN;
    double v44 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v43), _Q3, v14).i64;
    double v31 = *(double *)v14.i64 * v44;
    double v32 = v44 * *(double *)v14.i64;
    double v33 = v44 * *(double *)v14.i64;
    double v34 = (_D26 * 0.0 + 0.0 + _D25 * 0.0 + v16 * 0.0) * v44;
    double v35 = v44 * (_D26 * 0.0 + 0.0 + _D25 * 0.0 + v16 * 0.0);
    double v36 = v35;
    double v37 = v42 * v44;
    double v38 = v44 * v42;
    double v39 = v44 * v42;
  }
  else
  {
    double v27 = _D10 * 0.0 + 0.0 + _D11 * 0.0 + v16 * 0.0;
    double v28 = v24 * 0.0 + 0.0 + v25 * 0.0 + v16 * 0.0;
    double v26 = v28;
    _Q3.i64[0] = 1.0;
    v29.f64[0] = NAN;
    v29.f64[1] = NAN;
    double v30 = *(double *)vbslq_s8((int8x16_t)vnegq_f64(v29), _Q3, v6).i64;
    double v31 = *(double *)v6.i64 * v30;
    double v32 = v30 * (*(double *)v14.i64 * 0.0 + 0.0 + v15 * 0.0 + v16 * 0.0);
    double v33 = v32;
    double v34 = v27 * v30;
    double v35 = v30 * v23;
    double v36 = v30 * v27;
    double v37 = v28 * v30;
    double v38 = v30 * v26;
    double v39 = v30 * v26;
  }
  *a5 = v31;
  a5[1] = v32;
  a5[2] = v33;
  a5[3] = v34;
  a5[4] = v35;
  a5[5] = v36;
  a5[6] = v37;
  a5[7] = v38;
  a5[8] = v39;
  double v45 = *a3 - *a2;
  double v46 = a3[1] - a2[1];
  double v47 = a3[2] - a2[2];
  double v48 = sqrt(v45 * v45 + 0.0 + v46 * v46 + v47 * v47);
  _NF = v45 / v48 * 0.0 + 0.0 + v46 / v48 * 0.0 + v47 / v48 * 0.0 < 0.0;
  int8x16_t v50 = (int8x16_t)vnegq_f64((float64x2_t)0);
  if (_NF) {
    double v22 = -0.0;
  }
  int32x2_t v51 = vdup_n_s32(_NF);
  v52.i64[0] = v51.u32[0];
  v52.i64[1] = v51.u32[1];
  *a6 = vmulq_n_f64((float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v52, 0x3FuLL)), v50, (int8x16_t)0), v48);
  a6[1].f64[0] = v48 * v22;
  return 0;
}

char *GeomUtils::homogDist2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  uint64_t v102 = 3;
  char v103 = 0;
  unint64_t v104 = 0;
  char v100 = &unk_2707172D0;
  BOOL v101 = 0;
  size_t v99 = 0;
  float v96 = 0;
  uint64_t v97 = 0;
  BOOL v95 = &unk_2707171D8;
  char v98 = 0;
  unsigned int v9 = *(_DWORD *)(a1 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 20);
  char v90 = &unk_2707171D8;
  if (v10 * v9) {
    operator new[]();
  }
  uint64_t __src = 0;
  unint64_t v92 = __PAIR64__(v10, v9);
  char v93 = 0;
  unint64_t v94 = 8 * v9 * (unint64_t)v10;
  Matrix<double>::MultAxBToC(a1, a2, (uint64_t)&v90);
  size_t v11 = 8 * v92 * (unint64_t)HIDWORD(v92);
  if (v99 < v11)
  {
    if (v96)
    {
      if (v98) {
        MEMORY[0x25A2D62A0](v96, 0x1000C8000313F17);
      }
    }
    operator new[]();
  }
  uint64_t v97 = v92;
  memcpy(v96, __src, v11);
  char v90 = &unk_2707171D8;
  if (__src && v93) {
    MEMORY[0x25A2D62A0]();
  }
  char v90 = &unk_2707171D8;
  if (HIDWORD(v97)) {
    operator new[]();
  }
  unint64_t v92 = 1;
  char v93 = 0;
  unint64_t v94 = 0;
  char v90 = &unk_270717208;
  uint64_t __src = 0;
  uint64_t v12 = *(unsigned int *)(a3 + 20);
  uint64_t v13 = (2 * v12);
  if (v13) {
    operator new[]();
  }
  int8x16_t v14 = 0;
  if (v12)
  {
    double v15 = *(float64x2_t **)(a3 + 8);
    uint64_t v16 = v13;
    unint64_t v17 = 8 * v12;
    if (v12 >= 0x14)
    {
      LODWORD(v18) = 0;
      uint64_t v43 = (v12 - 1);
      unint64_t v44 = v43 * 8 + 8;
      unint64_t v45 = v43 * 8 + 8 + v17;
      double v46 = &v15->f64[v43 + 1];
      double v47 = (char *)v15 + v16 * 8;
      unint64_t v48 = (unint64_t)&v15->f64[v43 + 1 + v16];
      uint64_t v49 = (char *)v15 + v17;
      int8x16_t v50 = (char *)v15 + v45;
      if (v46) {
        BOOL v51 = (unint64_t)v15 >= v44;
      }
      else {
        BOOL v51 = 1;
      }
      char v52 = !v51;
      if (v48) {
        BOOL v53 = (unint64_t)v47 >= v44;
      }
      else {
        BOOL v53 = 1;
      }
      char v54 = !v53;
      if (v50) {
        BOOL v55 = (unint64_t)v49 >= v44;
      }
      else {
        BOOL v55 = 1;
      }
      char v56 = !v55;
      BOOL v58 = v17 < (unint64_t)v46 && (unint64_t)v15 < v45;
      BOOL v60 = v17 < v48 && (unint64_t)v47 < v45;
      BOOL v62 = v17 < (unint64_t)v50 && (unint64_t)v49 < v45;
      BOOL v63 = v17 >= v44 || v45 == 0;
      if (v63 && (v52 & 1) == 0 && (v54 & 1) == 0 && (v56 & 1) == 0 && !v58 && !v60 && !v62)
      {
        uint64_t v18 = v12 & 0xFFFFFFFE;
        uint64_t v20 = (double *)(8 * v18);
        uint64_t v19 = &v15->f64[v18];
        uint64_t v64 = v18;
        do
        {
          float64x2_t v65 = *(float64x2_t *)((char *)v15 + 8 * v13);
          *int8x16_t v14 = vdivq_f64(*v15, v65);
          *(float64x2_t *)((char *)v14++ + 8 * v12) = vdivq_f64(*(float64x2_t *)((char *)v15++ + 8 * v12), v65);
          v64 -= 2;
        }
        while (v64);
        if (v18 == v12) {
LABEL_21:
        }
          operator new[]();
LABEL_19:
        int v21 = v12 - v18;
        do
        {
          *uint64_t v20 = *v19 / v19[v13];
          v20[v12] = v19[v12] / v19[v13];
          ++v20;
          ++v19;
          --v21;
        }
        while (v21);
        goto LABEL_21;
      }
    }
    else
    {
      LODWORD(v18) = 0;
    }
    uint64_t v19 = *(double **)(a3 + 8);
    uint64_t v20 = 0;
    goto LABEL_19;
  }
  if (v104 < 24 * v12)
  {
    if (v101 && v103) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  uint64_t v102 = 3;
  memcpy(v101, 0, 24 * v12);
  uint64_t v22 = HIDWORD(v97);
  uint64_t v23 = (2 * HIDWORD(v97));
  if (v23) {
    operator new[]();
  }
  double v24 = 0;
  if (HIDWORD(v97))
  {
    double v25 = v96;
    uint64_t v26 = v23;
    unint64_t v27 = 8 * HIDWORD(v97);
    if (HIDWORD(v97) >= 0x14)
    {
      LODWORD(v28) = 0;
      uint64_t v66 = (HIDWORD(v97) - 1);
      unint64_t v67 = v66 * 8 + 8;
      unint64_t v68 = v66 * 8 + 8 + v27;
      unsigned int v69 = (char *)&v96->f64[v66 + 1];
      unsigned int v70 = (char *)v96 + v26 * 8;
      char v71 = (char *)&v96->f64[v66 + 1 + v26];
      int v72 = (char *)v96 + v27;
      int v73 = (char *)v96 + v68;
      if (v69) {
        BOOL v74 = (unint64_t)v96 >= v67;
      }
      else {
        BOOL v74 = 1;
      }
      char v75 = !v74;
      if (v71) {
        BOOL v76 = (unint64_t)v70 >= v67;
      }
      else {
        BOOL v76 = 1;
      }
      char v77 = !v76;
      if (v73) {
        BOOL v78 = (unint64_t)v72 >= v67;
      }
      else {
        BOOL v78 = 1;
      }
      char v79 = !v78;
      BOOL v81 = v27 < (unint64_t)v69 && (unint64_t)v96 < v68;
      BOOL v83 = v27 < (unint64_t)v71 && (unint64_t)v70 < v68;
      BOOL v85 = v27 < (unint64_t)v73 && (unint64_t)v72 < v68;
      BOOL v86 = v27 >= v67 || v68 == 0;
      if (v86 && (v75 & 1) == 0 && (v77 & 1) == 0 && (v79 & 1) == 0 && !v81 && !v83 && !v85)
      {
        uint64_t v28 = HIDWORD(v97) & 0xFFFFFFFE;
        double v30 = (double *)(8 * v28);
        float64x2_t v29 = &v96->f64[v28];
        uint64_t v87 = v28;
        do
        {
          float64x2_t v88 = *(float64x2_t *)((char *)v25 + 8 * v23);
          float64x2_t *v24 = vdivq_f64(*v25, v88);
          *(float64x2_t *)((char *)v24++ + 8 * v22) = vdivq_f64(*(float64x2_t *)((char *)v25++ + 8 * v22), v88);
          v87 -= 2;
        }
        while (v87);
        if (v28 == v22) {
LABEL_35:
        }
          operator new[]();
LABEL_33:
        int v31 = v22 - v28;
        do
        {
          *double v30 = *v29 / v29[v23];
          v30[v22] = v29[v22] / v29[v23];
          ++v30;
          ++v29;
          --v31;
        }
        while (v31);
        goto LABEL_35;
      }
    }
    else
    {
      LODWORD(v28) = 0;
    }
    float64x2_t v29 = (double *)v96;
    double v30 = 0;
    goto LABEL_33;
  }
  uint64_t v97 = 3;
  memcpy(v96, 0, 24 * v22);
  int v32 = HIDWORD(v97);
  if (HIDWORD(v97))
  {
    unint64_t v33 = 0;
    unsigned int v34 = 0;
    double v35 = "row < m_rows && col < m_cols";
    while (v102 && v33 < HIDWORD(v102) && v97)
    {
      int v36 = 120;
      if (v102 < 2 || v97 == 1 || v102 < 3 || v97 < 3) {
        goto LABEL_165;
      }
      if (v33 >= (HIDWORD(v92) * v92)) {
        goto LABEL_50;
      }
      double v37 = (double *)&v101[8 * v33];
      double v38 = &v96->f64[v33];
      double v39 = v37[HIDWORD(v102)] - v38[v32];
      double v40 = v39 * v39 + (*v37 - *v38) * (*v37 - *v38);
      double v41 = *(double *)&v101[8 * (2 * HIDWORD(v102)) + 8 * v33] - v96->f64[(2 * v32) + v33];
      *((double *)__src + v33) = v40 + v41 * v41;
      if (*((double *)__src + v33) < a6)
      {
        if (*(_DWORD *)(a4 + 20) * *(_DWORD *)(a4 + 16) <= v34)
        {
LABEL_50:
          int v36 = 132;
          double v35 = "index < m_rows * m_cols";
          goto LABEL_165;
        }
        *(_DWORD *)(*(void *)(a4 + 8) + 4 * v34++) = v33;
      }
      ++v33;
      int v32 = HIDWORD(v97);
      if (v33 >= HIDWORD(v97)) {
        goto LABEL_52;
      }
    }
    int v36 = 120;
LABEL_165:
    __assert_rtn("operator()", "Matrix.hpp", v36, v35);
  }
  unsigned int v34 = 0;
LABEL_52:
  *a5 = v34;
  char v90 = &unk_2707171D8;
  if (__src && v93) {
    MEMORY[0x25A2D62A0]();
  }
  BOOL v95 = &unk_2707171D8;
  if (v96 && v98) {
    MEMORY[0x25A2D62A0]();
  }
  char v100 = &unk_2707171D8;
  uint64_t result = v101;
  if (v101 && v103) {
    return (char *)MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_25905DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&a16);
  MatrixNxPts<2u,double>::~MatrixNxPts((uint64_t)&a11);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a21);
  Matrix<double>::~Matrix((uint64_t)&a26);
  MatrixNxPts<3u,double>::~MatrixNxPts(v26 - 144);
  _Unwind_Resume(a1);
}

BOOL GeomUtils::check3of4SpotsOnSameLine(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20) != 4 || *(_DWORD *)(a1 + 16) != 3) {
    GeomUtils::check3of4SpotsOnSameLine();
  }
  if (*(_DWORD *)(a2 + 20) != 4 || *(_DWORD *)(a2 + 16) != 3) {
    GeomUtils::check3of4SpotsOnSameLine();
  }
  uint64_t v3 = *(double **)(a1 + 8);
  double v5 = *v3;
  double v4 = v3[1];
  double v6 = v3[4];
  double v7 = v3[5];
  double v9 = v3[8];
  double v8 = v3[9];
  double v10 = v3[2];
  double v11 = v3[6];
  double v12 = v3[10];
  double v13 = v7 * v12 - v11 * v8;
  double v14 = -(v11 * v9);
  double v15 = v6 * v8 - v7 * v9;
  if (fabs(*v3 * v13 - v4 * (v9 * v12 - v11 * v9) + v10 * v15) < 0.00000011920929) {
    return 1;
  }
  double v16 = v3[3];
  double v17 = v3[7];
  double v18 = v3[11];
  double v19 = v9 * v18 - v17 * v9;
  if (fabs(v19 * -v4 + v5 * (v7 * v18 - v17 * v8) + v16 * v15) < 0.00000011920929) {
    return 1;
  }
  double v20 = v12 * -v17 + v11 * v18;
  if (fabs(v5 * v20 - v10 * v19 + v16 * (v14 + v6 * v12)) < 0.00000011920929) {
    return 1;
  }
  if (fabs((v8 * v18 - v17 * v8) * -v10 + v4 * v20 + v16 * v13) < 0.00000011920929) {
    return 1;
  }
  int v21 = *(double **)(a2 + 8);
  double v22 = v21[1];
  double v23 = v21[5];
  double v24 = v21[8];
  double v25 = v21[9];
  double v26 = v21[4] * v25 - v23 * v24;
  if (fabs(*v21 * (v23 * v21[10] - v21[6] * v25) - v22 * (v24 * v21[10] - v21[6] * v24) + v21[2] * v26) < 0.00000011920929) {
    return 1;
  }
  uint64_t v27 = 1;
  if (fabs((v24 * v21[11] - v21[7] * v24) * -v22 + *v21 * (v23 * v21[11] - v21[7] * v25) + v21[3] * v26) >= 0.00000011920929)
  {
    uint64_t v47 = 0;
    double v29 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000000;
    double v30 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000000;
    double v31 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 2;
    double v32 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000002;
    double v33 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000002;
    double v34 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 3;
    double v35 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x100000003;
    double v36 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    uint64_t v47 = 0x200000003;
    double v37 = (double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
    if (fabs(v29 * (v33 * *v37 - v36 * v34) - v32 * (v31 * *v37 - v36 * v31) + v35 * (v30 * v34 - v33 * v31)) >= 0.00000011920929)
    {
      uint64_t v47 = 1;
      double v38 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000001;
      double v39 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000001;
      double v40 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 2;
      double v41 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000002;
      double v42 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000002;
      double v43 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 3;
      double v44 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x100000003;
      double v45 = *(double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      uint64_t v47 = 0x200000003;
      double v46 = (double *)Matrix<double>::operator()(a2, (_DWORD *)&v47 + 1, (unsigned int *)&v47);
      return fabs(v38 * (v42 * *v46 - v45 * v43) - v41 * (v40 * *v46 - v45 * v40) + v44 * (v39 * v43 - v42 * v40)) < 0.00000011920929;
    }
  }
  return v27;
}

float32x2_t GeomUtils::ExtrinsicsToSimd4x3(float64x2_t *a1)
{
  float64x2_t v1 = *a1;
  v1.f64[1] = a1[1].f64[1];
  return vcvt_f32_f64(v1);
}

double GeomUtils::ExtrinsicsFromSimd4x3(float64x2_t *a1, float64x2_t *a2, int8x16_t a3, int8x16_t a4, __n128 a5, __n128 a6)
{
  a1->f64[0] = *(float *)a3.i32;
  a1->f64[1] = *(float *)a4.i32;
  float64x2_t v6 = vcvtq_f64_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(a3, a3, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(a4, a4, 8uLL)));
  float32x2_t v7 = (float32x2_t)vzip2_s32(*(int32x2_t *)a4.i8, (int32x2_t)a5.n128_u64[0]);
  a5.n128_u32[1] = a3.u32[1];
  a1[1] = vcvtq_f64_f32((float32x2_t)a5.n128_u64[0]);
  a1[2] = vcvtq_f64_f32(v7);
  a1[3] = v6;
  a1[4].f64[0] = a5.n128_f32[2];
  *a2 = vcvtq_f64_f32((float32x2_t)a6.n128_u64[0]);
  double result = a6.n128_f32[2];
  a2[1].f64[0] = a6.n128_f32[2];
  return result;
}

void **std::vector<ImageUtils::Blob>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    double v4 = *a1;
    if (v3 != v2)
    {
      double v5 = (char *)a1[1];
      do
      {
        float32x2_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        float64x2_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      double v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t Matrix<BOOL>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717270;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t Matrix<unsigned short>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707172A0;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void Matrix<BOOL>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717270;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void Matrix<unsigned short>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_2707172A0;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void *std::vector<ImageUtils::Blob>::vector(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    if (v7 >= 0xAAAAAAAAAAAAAABLL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    double v8 = operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[3 * v7];
    a1[1] = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*,ImageUtils::Blob*,ImageUtils::Blob*>(v3, v4, v5, v8);
  }
  return a1;
}

void sub_25905E6F8(_Unwind_Exception *exception_object)
{
  v1[1] = v2;
  if (*v1) {
    std::vector<ImageUtils::Blob>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*,ImageUtils::Blob*,ImageUtils::Blob*>(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      double v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      int64_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if (v10 < 0) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        double v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_25905E7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25905E804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v11 = *(void **)v9;
  if (*(void *)v9)
  {
    *(void *)(v9 + 8) = v11;
    operator delete(v11);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<ImageUtils::Blob>,ImageUtils::Blob*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, size_t __len)
{
  unint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = a2 - v4;
  if (a2 <= v4)
  {
    *(void *)(a1 + 8) = a2;
    return;
  }
  int v6 = __len;
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = v7 << 6;
  if (v7 << 6 < v5 || v4 > (v7 << 6) - v5)
  {
    std::locale __dst = 0;
    long long v23 = 0uLL;
    if ((a2 & 0x8000000000000000) != 0) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = v7 << 7;
    if (v10 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
      unint64_t v10 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
    }
    if (v8 <= 0x3FFFFFFFFFFFFFFELL) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    std::vector<BOOL>::reserve((uint64_t)&__dst, v11);
    double v12 = *(void **)a1;
    uint64_t v13 = *(void *)(a1 + 8);
    *(void *)&long long v23 = v13 + v5;
    double v15 = __dst;
    if (v13 < 1)
    {
      LODWORD(v16) = 0;
    }
    else
    {
      unint64_t v14 = (unint64_t)v13 >> 6;
      if ((unint64_t)v13 >= 0x40) {
        memmove(__dst, v12, 8 * v14);
      }
      v15 += v14;
      uint64_t v16 = v13 & 0x3F;
      if (v16) {
        void *v15 = *v15 & ~(0xFFFFFFFFFFFFFFFFLL >> -(char)v16) | *((void *)v12 + v14) & (0xFFFFFFFFFFFFFFFFLL >> -(char)v16);
      }
      double v12 = *(void **)a1;
    }
    *(void *)a1 = __dst;
    std::locale __dst = v12;
    long long v17 = *(_OWORD *)(a1 + 8);
    *(_OWORD *)(a1 + 8) = v23;
    long long v23 = v17;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    double v15 = (void *)(*(void *)a1 + 8 * (v4 >> 6));
    uint64_t v16 = *(void *)(a1 + 8) & 0x3FLL;
    *(void *)(a1 + 8) = a2;
  }
  if (v5)
  {
    if (v6)
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v18 = v5;
        }
        else {
          unint64_t v18 = (64 - v16);
        }
        *v15++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v18)) & (-1 << v16);
        v5 -= v18;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        memset(v15, 255, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] | (0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
LABEL_43:
        v15[v19] = v20;
      }
    }
    else
    {
      if (v16)
      {
        if ((64 - v16) >= v5) {
          unint64_t v21 = v5;
        }
        else {
          unint64_t v21 = (64 - v16);
        }
        *v15++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v16 - v21)) & (-1 << v16));
        v5 -= v21;
      }
      uint64_t v19 = v5 >> 6;
      if (v5 >= 0x40) {
        bzero(v15, 8 * (v5 >> 6));
      }
      if ((v5 & 0x3F) != 0)
      {
        unint64_t v20 = v15[v19] & ~(0xFFFFFFFFFFFFFFFFLL >> -(v5 & 0x3F));
        goto LABEL_43;
      }
    }
  }
}

void sub_25905EAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<BOOL>::__throw_out_of_range[abi:ne180100]()
{
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  exceptiouint64_t n = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
  __cxa_throw(exception, (struct type_info *)off_265447628, MEMORY[0x263F8C068]);
}

void sub_25905EB64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  double result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t Algo::MeshGrid<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  unsigned int v6 = *(_DWORD *)(a2 + 20);
  unint64_t v7 = 8 * v6 * (unint64_t)v5;
  if (*(void *)(a3 + 32) < v7)
  {
    if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v6;
  *(_DWORD *)(a3 + 20) = v5;
  unint64_t v8 = *(void *)(a4 + 32);
  if (v8 < v7)
  {
    if (*(void *)(a4 + 8) && *(unsigned char *)(a4 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = v6;
  *(_DWORD *)(a4 + 20) = v5;
  if (v6 && v5)
  {
    uint64_t v9 = *(void **)(a1 + 8);
    unint64_t v10 = *(void **)(a3 + 8);
    if (v5 <= 3)
    {
      do
      {
        *unint64_t v10 = *v9;
        if (v5 == 1)
        {
          ++v10;
        }
        else
        {
          v10[1] = v9[1];
          if (v5 == 2)
          {
            v10 += 2;
          }
          else
          {
            double v10[2] = v9[2];
            v10 += 3;
          }
        }
        --v6;
      }
      while (v6);
    }
    else
    {
      uint64_t v11 = v5 & 0xFFFFFFFC;
      if ((v5 & 0xFFFFFFFC) == v5)
      {
        for (int i = 0; i != v6; ++i)
        {
          if ((unint64_t)((char *)v10 - (char *)v9) > 0x1F)
          {
            uint64_t v16 = &v10[v11];
            long long v17 = v10 + 2;
            unint64_t v18 = (long long *)(v9 + 2);
            uint64_t v19 = v5 & 0xFFFFFFFC;
            do
            {
              long long v20 = *v18;
              *(v17 - 1) = *(v18 - 1);
              _OWORD *v17 = v20;
              v17 += 2;
              v18 += 2;
              v19 -= 4;
            }
            while (v19);
            unint64_t v10 = v16;
          }
          else
          {
            int v13 = v5;
            unint64_t v14 = v9;
            do
            {
              uint64_t v15 = *v14++;
              *v10++ = v15;
              --v13;
            }
            while (v13);
          }
        }
      }
      else
      {
        for (int j = 0; j != v6; ++j)
        {
          if ((unint64_t)((char *)v10 - (char *)v9) >= 0x20)
          {
            double v24 = &v10[v11];
            double v25 = v10 + 2;
            uint64_t v26 = v5 & 0xFFFFFFFC;
            uint64_t v27 = (long long *)(v9 + 2);
            do
            {
              long long v28 = *v27;
              *(v25 - 1) = *(v27 - 1);
              _OWORD *v25 = v28;
              v25 += 2;
              v27 += 2;
              v26 -= 4;
            }
            while (v26);
            int v22 = v5 & 0xFFFFFFFC;
            long long v23 = &v9[v11];
            unint64_t v10 = v24;
          }
          else
          {
            int v22 = 0;
            long long v23 = v9;
          }
          int v29 = v5 - v22;
          do
          {
            uint64_t v30 = *v23++;
            *v10++ = v30;
            --v29;
          }
          while (v29);
        }
      }
    }
  }
  unsigned int v32 = *(_DWORD *)(a3 + 16);
  unsigned int v31 = *(_DWORD *)(a3 + 20);
  double v33 = *(double **)(a4 + 8);
  if (v8 < 8 * v31 * (unint64_t)v32)
  {
    if (v33)
    {
      if (*(unsigned char *)(a4 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a4 + 8), 0x1000C8000313F17);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = v31;
  *(_DWORD *)(a4 + 20) = v32;
  vDSPMtranspose<double>(*(const double **)(a3 + 8), 1, v33, 1, *(_DWORD *)(a3 + 20), *(_DWORD *)(a3 + 16));
  return 0;
}

uint64_t Interp2<double,CubicInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, double a8)
{
  unsigned int v8 = *(_DWORD *)(a1 + 20);
  if (v8 != *(_DWORD *)(a3 + 20)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  unsigned int v11 = *(_DWORD *)(a2 + 20);
  if (v11 != *(_DWORD *)(a3 + 16)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  if (v8 <= 1) {
    Interp2<double,CubicInterpolator<double>>();
  }
  if (v11 <= 1) {
    Interp2<double,CubicInterpolator<double>>();
  }
  uint64_t v14 = *(unsigned int *)(a4 + 20);
  if (v14 != *(_DWORD *)(a5 + 20)) {
    Interp2<double,CubicInterpolator<double>>();
  }
  if (*(void *)(a6 + 32) < (unint64_t)(8 * v14))
  {
    if (*(void *)(a6 + 8))
    {
      if (*(unsigned char *)(a6 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a6 + 16) = 1;
  *(_DWORD *)(a6 + 20) = v14;
  unint64_t v18 = *(double **)(a1 + 8);
  double v19 = *v18;
  double v20 = v18[*(_DWORD *)(a1 + 20) - 1];
  unint64_t v21 = *(double **)(a2 + 8);
  double v22 = *v21;
  double v23 = v21[*(_DWORD *)(a2 + 20) - 1];
  uint64_t v24 = *(unsigned int *)(a4 + 20);
  if ((a7 & 1) == 0)
  {
    if (!v24) {
      return 0;
    }
    uint64_t v40 = 0;
    while (1)
    {
      double v45 = *(double *)(*(void *)(a4 + 8) + 8 * v40);
      double v46 = *(double *)(*(void *)(a5 + 8) + 8 * v40);
      BOOL v49 = v45 > v20 || v45 < v19 || v46 > v23 || v46 < v22;
      double v44 = a8;
      if (v49) {
        goto LABEL_39;
      }
      uint64_t v50 = *(unsigned int *)(a1 + 20);
      int v51 = v50 - 1;
      char v52 = *(double **)(a1 + 8);
      if ((int)v50 - 1 >= 100)
      {
        int v61 = 0;
        while (1)
        {
          int v62 = (v51 + v61) >> 1;
          double v63 = v52[v62];
          if (v63 == v45) {
            break;
          }
          if (v63 <= v45) {
            int v61 = v62 + 1;
          }
          else {
            int v51 = v62 - 1;
          }
          if (v61 > v51) {
            goto LABEL_75;
          }
        }
        int v61 = (v51 + v61) >> 1;
LABEL_75:
        if (v51 >= v61) {
          int v51 = v61;
        }
        unsigned int v56 = v51 & ~(v51 >> 31);
        uint64_t v57 = *(unsigned int *)(a2 + 20);
        int v42 = v57 - 1;
        BOOL v58 = *(double **)(a2 + 8);
        if ((int)v57 - 1 < 100)
        {
LABEL_78:
          if ((int)v57 < 1)
          {
LABEL_82:
            LODWORD(v64) = 0;
          }
          else
          {
            uint64_t v64 = 0;
            while (v58[v64] <= v46)
            {
              if (v57 == ++v64) {
                goto LABEL_82;
              }
            }
          }
          BOOL v54 = v64 != 0;
          unsigned int v65 = v64 - 1;
          if (v54) {
            unsigned int v43 = v65;
          }
          else {
            unsigned int v43 = 0;
          }
          goto LABEL_38;
        }
      }
      else
      {
        if ((int)v50 < 1)
        {
LABEL_55:
          LODWORD(v53) = 0;
        }
        else
        {
          uint64_t v53 = 0;
          while (v52[v53] <= v45)
          {
            if (v50 == ++v53) {
              goto LABEL_55;
            }
          }
        }
        BOOL v54 = v53 != 0;
        unsigned int v55 = v53 - 1;
        if (v54) {
          unsigned int v56 = v55;
        }
        else {
          unsigned int v56 = 0;
        }
        uint64_t v57 = *(unsigned int *)(a2 + 20);
        int v42 = v57 - 1;
        BOOL v58 = *(double **)(a2 + 8);
        if ((int)v57 - 1 < 100) {
          goto LABEL_78;
        }
      }
      int v41 = 0;
      while (1)
      {
        int v59 = (v42 + v41) >> 1;
        double v60 = v58[v59];
        if (v60 == v46) {
          break;
        }
        if (v60 <= v46) {
          int v41 = v59 + 1;
        }
        else {
          int v42 = v59 - 1;
        }
        if (v41 > v42) {
          goto LABEL_35;
        }
      }
      int v41 = (v42 + v41) >> 1;
LABEL_35:
      if (v42 >= v41) {
        int v42 = v41;
      }
      unsigned int v43 = v42 & ~(v42 >> 31);
LABEL_38:
      double v44 = CubicInterpolator<double>::operator()(v45, v46, (uint64_t)&v67, v52, v58, *(double **)(a3 + 8), v50, v57, v56, v43);
LABEL_39:
      *(double *)(*(void *)(a6 + 8) + 8 * v40++) = v44;
      if (v40 == v24) {
        return 0;
      }
    }
  }
  if (v24)
  {
    uint64_t v25 = 0;
    double v26 = v18[1] - v19;
    double v27 = v21[1] - v22;
    uint64_t v28 = 8 * v24;
    do
    {
      double v30 = *(double *)(*(void *)(a4 + 8) + v25);
      double v31 = *(double *)(*(void *)(a5 + 8) + v25);
      BOOL v34 = v30 > v20 || v30 < v19 || v31 > v23 || v31 < v22;
      double v29 = a8;
      if (!v34)
      {
        unsigned int v35 = ((v30 - v19) / v26);
        unsigned int v36 = *(_DWORD *)(a1 + 20);
        if (v35 + 1 < v36 && *(double *)(*(void *)(a1 + 8) + 8 * (v35 + 1)) <= v30) {
          ++v35;
        }
        unsigned int v37 = ((v31 - v22) / v27);
        unsigned int v38 = *(_DWORD *)(a2 + 20);
        double v39 = *(double **)(a2 + 8);
        if (v37 + 1 < v38 && v39[v37 + 1] <= v31) {
          ++v37;
        }
        double v29 = CubicInterpolator<double>::operator()(v30, v31, (uint64_t)&v67, *(double **)(a1 + 8), v39, *(double **)(a3 + 8), v36, v38, v35, v37);
      }
      *(double *)(*(void *)(a6 + 8) + v25) = v29;
      v25 += 8;
    }
    while (v28 != v25);
  }
  return 0;
}

double CubicInterpolator<double>::operator()(double a1, double a2, uint64_t a3, double *a4, double *a5, double *a6, unsigned int a7, unsigned int a8, unsigned int a9, unsigned int a10)
{
  if (a8 >= 4)
  {
    if (a8 - 2 > a10)
    {
      if (a10)
      {
        unint64_t v10 = &a6[(a10 - 1) * a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v13 = *v10;
            double v15 = v10[1];
            double v11 = -(v15 - *v10 * 2.0);
            double v16 = -(*v10 - v15 * 2.0);
LABEL_120:
            double v54 = *a4;
            double v55 = a4[1];
            goto LABEL_121;
          }
          double v13 = *v10;
          double v15 = v10[1];
          if (a9)
          {
            double v16 = -(v15 - v10[2] * 2.0);
            double v54 = *a4;
            double v55 = a4[1];
            double v56 = v55;
            double v11 = *v10;
            double v13 = v10[1];
            double v15 = v10[2];
            goto LABEL_122;
          }
        }
        else
        {
          if (a7 - 2 <= a9)
          {
            double v11 = v10[a7 - 3];
            uint64_t v12 = a7 - 2;
            double v13 = v10[v12];
            uint64_t v14 = a7 - 1;
            double v15 = v10[v14];
            double v16 = -(v13 - v15 * 2.0);
            goto LABEL_55;
          }
          if (a9)
          {
            double v11 = v10[a9 - 1];
            uint64_t v12 = a9;
            double v13 = v10[v12];
            uint64_t v14 = a9 + 1;
            double v15 = v10[v14];
            double v16 = v10[a9 + 2];
LABEL_55:
            double v54 = a4[v12];
            double v55 = a4[v14];
LABEL_121:
            double v56 = v54;
LABEL_122:
            double v110 = (a1 - v56) / (v55 - v54);
            double v111 = v110 * (v110 * ((v13 - v15) * 1.5 + (v16 - v11) * 0.5));
            double v112 = v110 * (v110 * (v11 + v13 * -2.5 + v15 * 2.0 + v16 * -0.5));
            double v113 = v15 - v11;
            int v114 = &v10[a7];
            if (a7 < 4)
            {
              if (a7 != 3)
              {
                double v117 = *v114;
                double v119 = v114[1];
                double v115 = -(v119 - *v114 * 2.0);
                double v120 = -(*v114 - v119 * 2.0);
LABEL_148:
                double v121 = *a4;
                double v122 = a4[1];
                goto LABEL_149;
              }
              double v117 = *v114;
              double v119 = v114[1];
              if (a9)
              {
                double v120 = -(v119 - v114[2] * 2.0);
                double v121 = *a4;
                double v122 = a4[1];
                double v123 = v122;
                double v115 = *v114;
                double v117 = v114[1];
                double v119 = v114[2];
                goto LABEL_150;
              }
            }
            else
            {
              if (a7 - 2 <= a9)
              {
                double v115 = v114[a7 - 3];
                uint64_t v116 = a7 - 2;
                double v117 = v114[v116];
                uint64_t v118 = a7 - 1;
                double v119 = v114[v118];
                double v120 = -(v117 - v119 * 2.0);
                goto LABEL_130;
              }
              if (a9)
              {
                double v115 = v114[a9 - 1];
                uint64_t v116 = a9;
                double v117 = v114[v116];
                uint64_t v118 = a9 + 1;
                double v119 = v114[v118];
                double v120 = v114[a9 + 2];
LABEL_130:
                double v121 = a4[v116];
                double v122 = a4[v118];
LABEL_149:
                double v123 = v121;
LABEL_150:
                double v137 = v112 + v111 * v110;
                double v138 = v113 * 0.5;
                double v139 = (a1 - v123) / (v122 - v121);
                double v140 = v139 * (v139 * (v115 + v117 * -2.5 + v119 * 2.0 + v120 * -0.5))
                     + v139 * (v139 * ((v117 - v119) * 1.5 + (v120 - v115) * 0.5)) * v139;
                double v141 = (v119 - v115) * 0.5;
                BOOL v142 = &v10[2 * a7];
                if (a7 < 4)
                {
                  if (a7 != 3)
                  {
                    double v145 = *v142;
                    double v147 = v142[1];
                    double v143 = -(v147 - *v142 * 2.0);
                    double v148 = -(*v142 - v147 * 2.0);
LABEL_176:
                    double v149 = *a4;
                    double v150 = a4[1];
                    goto LABEL_177;
                  }
                  double v145 = *v142;
                  double v147 = v142[1];
                  if (a9)
                  {
                    double v148 = -(v147 - v142[2] * 2.0);
                    double v149 = *a4;
                    double v150 = a4[1];
                    double v151 = v150;
                    double v143 = *v142;
                    double v145 = v142[1];
                    double v147 = v142[2];
                    goto LABEL_178;
                  }
                }
                else
                {
                  if (a7 - 2 <= a9)
                  {
                    double v143 = v142[a7 - 3];
                    uint64_t v144 = a7 - 2;
                    double v145 = v142[v144];
                    uint64_t v146 = a7 - 1;
                    double v147 = v142[v146];
                    double v148 = -(v145 - v147 * 2.0);
                    goto LABEL_158;
                  }
                  if (a9)
                  {
                    double v143 = v142[a9 - 1];
                    uint64_t v144 = a9;
                    double v145 = v142[v144];
                    uint64_t v146 = a9 + 1;
                    double v147 = v142[v146];
                    double v148 = v142[a9 + 2];
LABEL_158:
                    double v149 = a4[v144];
                    double v150 = a4[v146];
LABEL_177:
                    double v151 = v149;
LABEL_178:
                    double v164 = v137 + v138 * v110;
                    double v165 = v140 + v141 * v139;
                    double v166 = (a1 - v151) / (v150 - v149);
                    double v167 = v166 * (v166 * (v143 + v145 * -2.5 + v147 * 2.0 + v148 * -0.5))
                         + v166 * (v166 * ((v145 - v147) * 1.5 + (v148 - v143) * 0.5)) * v166
                         + (v147 - v143) * 0.5 * v166;
                    uint64_t v168 = &v10[3 * a7];
                    if (a7 < 4)
                    {
                      if (a7 != 3)
                      {
                        double v171 = *v168;
                        double v173 = v168[1];
                        double v169 = -(v173 - *v168 * 2.0);
                        double v174 = -(*v168 - v173 * 2.0);
LABEL_195:
                        double v175 = *a4;
                        double v176 = a4[1];
                        goto LABEL_196;
                      }
                      double v171 = *v168;
                      double v173 = v168[1];
                      if (a9)
                      {
                        double v174 = -(v173 - v168[2] * 2.0);
                        double v175 = *a4;
                        double v176 = a4[1];
                        double v177 = v176;
                        double v169 = *v168;
                        double v171 = v168[1];
                        double v173 = v168[2];
LABEL_197:
                        double v105 = v13 + v164;
                        double v80 = v117 + v165;
                        double v104 = v145 + v167;
                        double v180 = (a1 - v177) / (v176 - v175);
                        double v106 = v171
                             + v180 * (v180 * (v169 + v171 * -2.5 + v173 * 2.0 + v174 * -0.5))
                             + v180 * (v180 * ((v171 - v173) * 1.5 + (v174 - v169) * 0.5)) * v180
                             + (v173 - v169) * 0.5 * v180;
                        double v108 = a5[a10];
                        double v109 = a5[a10 + 1];
                        goto LABEL_253;
                      }
                    }
                    else
                    {
                      if (a7 - 2 <= a9)
                      {
                        double v169 = v168[a7 - 3];
                        uint64_t v170 = a7 - 2;
                        double v171 = v168[v170];
                        uint64_t v172 = a7 - 1;
                        double v173 = v168[v172];
                        double v174 = -(v171 - v173 * 2.0);
                        goto LABEL_186;
                      }
                      if (a9)
                      {
                        double v169 = v168[a9 - 1];
                        uint64_t v170 = a9;
                        double v171 = v168[v170];
                        uint64_t v172 = a9 + 1;
                        double v173 = v168[v172];
                        double v174 = v168[a9 + 2];
LABEL_186:
                        double v175 = a4[v170];
                        double v176 = a4[v172];
LABEL_196:
                        double v177 = v175;
                        goto LABEL_197;
                      }
                      double v171 = *v168;
                      double v173 = v168[1];
                    }
                    double v169 = -(v173 - v171 * 2.0);
                    double v174 = v168[2];
                    goto LABEL_195;
                  }
                  double v145 = *v142;
                  double v147 = v142[1];
                }
                double v143 = -(v147 - v145 * 2.0);
                double v148 = v142[2];
                goto LABEL_176;
              }
              double v117 = *v114;
              double v119 = v114[1];
            }
            double v115 = -(v119 - v117 * 2.0);
            double v120 = v114[2];
            goto LABEL_148;
          }
          double v13 = *v10;
          double v15 = v10[1];
        }
        double v11 = -(v15 - v13 * 2.0);
        double v16 = v10[2];
        goto LABEL_120;
      }
      if (a7 < 4)
      {
        if (a7 != 3)
        {
          double v44 = *a6;
          double v46 = a6[1];
          double v42 = -(v46 - *a6 * 2.0);
          double v47 = -(*a6 - v46 * 2.0);
LABEL_200:
          double v60 = *a4;
          double v61 = a4[1];
          goto LABEL_201;
        }
        double v44 = *a6;
        double v46 = a6[1];
        if (a9)
        {
          double v47 = -(v46 - a6[2] * 2.0);
          double v60 = *a4;
          double v61 = a4[1];
          double v62 = v61;
          double v42 = *a6;
          double v44 = a6[1];
          double v46 = a6[2];
          goto LABEL_202;
        }
      }
      else
      {
        if (a7 - 2 <= a9)
        {
          double v42 = a6[a7 - 3];
          uint64_t v43 = a7 - 2;
          double v44 = a6[v43];
          uint64_t v45 = a7 - 1;
          double v46 = a6[v45];
          double v47 = -(v44 - v46 * 2.0);
          goto LABEL_89;
        }
        if (a9)
        {
          double v42 = a6[a9 - 1];
          uint64_t v43 = a9;
          double v44 = a6[v43];
          uint64_t v45 = a9 + 1;
          double v46 = a6[v45];
          double v47 = a6[a9 + 2];
LABEL_89:
          double v60 = a4[v43];
          double v61 = a4[v45];
LABEL_201:
          double v62 = v60;
LABEL_202:
          double v181 = (a1 - v62) / (v61 - v60);
          double v182 = v181 * (v181 * (v42 + v44 * -2.5 + v46 * 2.0 + v47 * -0.5))
               + v181 * (v181 * ((v44 - v46) * 1.5 + (v47 - v42) * 0.5)) * v181
               + (v46 - v42) * 0.5 * v181;
          float v183 = &a6[a7];
          if (a7 < 4)
          {
            if (a7 != 3)
            {
              double v186 = *v183;
              double v188 = v183[1];
              double v184 = -(v188 - *v183 * 2.0);
              double v189 = -(*v183 - v188 * 2.0);
LABEL_228:
              double v190 = *a4;
              double v191 = a4[1];
              goto LABEL_229;
            }
            double v186 = *v183;
            double v188 = v183[1];
            if (a9)
            {
              double v189 = -(v188 - v183[2] * 2.0);
              double v190 = *a4;
              double v191 = a4[1];
              double v192 = v191;
              double v184 = *v183;
              double v186 = v183[1];
              double v188 = v183[2];
              goto LABEL_230;
            }
          }
          else
          {
            if (a7 - 2 <= a9)
            {
              double v184 = v183[a7 - 3];
              uint64_t v185 = a7 - 2;
              double v186 = v183[v185];
              uint64_t v187 = a7 - 1;
              double v188 = v183[v187];
              double v189 = -(v186 - v188 * 2.0);
              goto LABEL_210;
            }
            if (a9)
            {
              double v184 = v183[a9 - 1];
              uint64_t v185 = a9;
              double v186 = v183[v185];
              uint64_t v187 = a9 + 1;
              double v188 = v183[v187];
              double v189 = v183[a9 + 2];
LABEL_210:
              double v190 = a4[v185];
              double v191 = a4[v187];
LABEL_229:
              double v192 = v190;
LABEL_230:
              double v80 = v44 + v182;
              double v205 = (a1 - v192) / (v191 - v190);
              double v206 = 2.0;
              double v104 = v186
                   + v205 * (v205 * (v184 + v186 * -2.5 + v188 * 2.0 + v189 * -0.5))
                   + v205 * (v205 * ((v186 - v188) * 1.5 + (v189 - v184) * 0.5)) * v205
                   + (v188 - v184) * 0.5 * v205;
              long long v207 = &a6[2 * a7];
              if (a7 >= 4)
              {
                unsigned int v208 = a7 - 2;
                if (a7 - 2 > a9)
                {
                  if (!a9)
                  {
LABEL_233:
                    double v209 = *v207;
                    double v210 = v207[1];
                    goto LABEL_248;
                  }
                  goto LABEL_241;
                }
                goto LABEL_245;
              }
              goto LABEL_242;
            }
            double v186 = *v183;
            double v188 = v183[1];
          }
          double v184 = -(v188 - v186 * 2.0);
          double v189 = v183[2];
          goto LABEL_228;
        }
        double v44 = *a6;
        double v46 = a6[1];
      }
      double v42 = -(v46 - v44 * 2.0);
      double v47 = a6[2];
      goto LABEL_200;
    }
    double v23 = &a6[(a8 - 3) * a7];
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v26 = *v23;
        double v28 = v23[1];
        double v24 = -(v28 - *v23 * 2.0);
        double v29 = -(*v23 - v28 * 2.0);
LABEL_62:
        double v36 = *a4;
        double v37 = a4[1];
        goto LABEL_63;
      }
      double v26 = *v23;
      double v28 = v23[1];
      if (a9)
      {
        double v29 = -(v28 - v23[2] * 2.0);
        double v36 = *a4;
        double v37 = a4[1];
        double v38 = v37;
        double v24 = *v23;
        double v26 = v23[1];
        double v28 = v23[2];
        goto LABEL_64;
      }
    }
    else
    {
      if (a7 - 2 <= a9)
      {
        double v24 = v23[a7 - 3];
        uint64_t v25 = a7 - 2;
        double v26 = v23[v25];
        uint64_t v27 = a7 - 1;
        double v28 = v23[v27];
        double v29 = -(v26 - v28 * 2.0);
        goto LABEL_43;
      }
      if (a9)
      {
        double v24 = v23[a9 - 1];
        uint64_t v25 = a9;
        double v26 = v23[v25];
        uint64_t v27 = a9 + 1;
        double v28 = v23[v27];
        double v29 = v23[a9 + 2];
LABEL_43:
        double v36 = a4[v25];
        double v37 = a4[v27];
LABEL_63:
        double v38 = v36;
LABEL_64:
        double v66 = (a1 - v38) / (v37 - v36);
        double v67 = v66 * (v66 * (v24 + v26 * -2.5 + v28 * 2.0 + v29 * -0.5))
            + v66 * (v66 * ((v26 - v28) * 1.5 + (v29 - v24) * 0.5)) * v66;
        double v68 = (v28 - v24) * 0.5;
        unsigned int v69 = &v23[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v72 = *v69;
            double v74 = v69[1];
            double v70 = -(v74 - *v69 * 2.0);
            double v75 = -(*v69 - v74 * 2.0);
LABEL_96:
            double v76 = *a4;
            double v77 = a4[1];
            goto LABEL_97;
          }
          double v72 = *v69;
          double v74 = v69[1];
          if (a9)
          {
            double v75 = -(v74 - v69[2] * 2.0);
            double v76 = *a4;
            double v77 = a4[1];
            double v78 = v77;
            double v70 = *v69;
            double v72 = v69[1];
            double v74 = v69[2];
            goto LABEL_98;
          }
        }
        else
        {
          if (a7 - 2 <= a9)
          {
            double v70 = v69[a7 - 3];
            uint64_t v71 = a7 - 2;
            double v72 = v69[v71];
            uint64_t v73 = a7 - 1;
            double v74 = v69[v73];
            double v75 = -(v72 - v74 * 2.0);
            goto LABEL_72;
          }
          if (a9)
          {
            double v70 = v69[a9 - 1];
            uint64_t v71 = a9;
            double v72 = v69[v71];
            uint64_t v73 = a9 + 1;
            double v74 = v69[v73];
            double v75 = v69[a9 + 2];
LABEL_72:
            double v76 = a4[v71];
            double v77 = a4[v73];
LABEL_97:
            double v78 = v76;
LABEL_98:
            double v91 = v67 + v68 * v66;
            double v92 = (a1 - v78) / (v77 - v76);
            double v80 = v72
                + v92 * (v92 * (v70 + v72 * -2.5 + v74 * 2.0 + v75 * -0.5))
                + v92 * (v92 * ((v72 - v74) * 1.5 + (v75 - v70) * 0.5)) * v92
                + (v74 - v70) * 0.5 * v92;
            char v93 = &v23[2 * a7];
            if (a7 < 4)
            {
              if (a7 != 3)
              {
                double v96 = *v93;
                double v98 = v93[1];
                double v94 = -(v98 - *v93 * 2.0);
                double v99 = -(*v93 - v98 * 2.0);
LABEL_115:
                double v100 = *a4;
                double v101 = a4[1];
                goto LABEL_116;
              }
              double v96 = *v93;
              double v98 = v93[1];
              if (a9)
              {
                double v99 = -(v98 - v93[2] * 2.0);
                double v100 = *a4;
                double v101 = a4[1];
                double v102 = v101;
                double v94 = *v93;
                double v96 = v93[1];
                double v98 = v93[2];
LABEL_117:
                double v105 = v26 + v91;
                double v107 = (a1 - v102) / (v101 - v100);
                double v104 = v96
                     + v107 * (v107 * (v94 + v96 * -2.5 + v98 * 2.0 + v99 * -0.5))
                     + v107 * (v107 * ((v96 - v98) * 1.5 + (v99 - v94) * 0.5)) * v107
                     + (v98 - v94) * 0.5 * v107;
                double v106 = -(v80 - v104 * 2.0);
                double v108 = a5[a8 - 2];
                double v109 = a5[a8 - 1];
LABEL_253:
                double v179 = v108;
                goto LABEL_254;
              }
            }
            else
            {
              if (a7 - 2 <= a9)
              {
                double v94 = v93[a7 - 3];
                uint64_t v95 = a7 - 2;
                double v96 = v93[v95];
                uint64_t v97 = a7 - 1;
                double v98 = v93[v97];
                double v99 = -(v96 - v98 * 2.0);
                goto LABEL_106;
              }
              if (a9)
              {
                double v94 = v93[a9 - 1];
                uint64_t v95 = a9;
                double v96 = v93[v95];
                uint64_t v97 = a9 + 1;
                double v98 = v93[v97];
                double v99 = v93[a9 + 2];
LABEL_106:
                double v100 = a4[v95];
                double v101 = a4[v97];
LABEL_116:
                double v102 = v100;
                goto LABEL_117;
              }
              double v96 = *v93;
              double v98 = v93[1];
            }
            double v94 = -(v98 - v96 * 2.0);
            double v99 = v93[2];
            goto LABEL_115;
          }
          double v72 = *v69;
          double v74 = v69[1];
        }
        double v70 = -(v74 - v72 * 2.0);
        double v75 = v69[2];
        goto LABEL_96;
      }
      double v26 = *v23;
      double v28 = v23[1];
    }
    double v24 = -(v28 - v26 * 2.0);
    double v29 = v23[2];
    goto LABEL_62;
  }
  if (a8 != 3)
  {
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v32 = *a6;
        double v34 = a6[1];
        double v30 = -(v34 - *a6 * 2.0);
        double v35 = -(*a6 - v34 * 2.0);
LABEL_76:
        double v39 = *a4;
        double v40 = a4[1];
        goto LABEL_77;
      }
      double v32 = *a6;
      double v34 = a6[1];
      if (a9)
      {
        double v35 = -(v34 - a6[2] * 2.0);
        double v39 = *a4;
        double v40 = a4[1];
        double v41 = v40;
        double v30 = *a6;
        double v32 = a6[1];
        double v34 = a6[2];
        goto LABEL_78;
      }
    }
    else
    {
      if (a7 - 2 <= a9)
      {
        double v30 = a6[a7 - 3];
        uint64_t v31 = a7 - 2;
        double v32 = a6[v31];
        uint64_t v33 = a7 - 1;
        double v34 = a6[v33];
        double v35 = -(v32 - v34 * 2.0);
        goto LABEL_45;
      }
      if (a9)
      {
        double v30 = a6[a9 - 1];
        uint64_t v31 = a9;
        double v32 = a6[v31];
        uint64_t v33 = a9 + 1;
        double v34 = a6[v33];
        double v35 = a6[a9 + 2];
LABEL_45:
        double v39 = a4[v31];
        double v40 = a4[v33];
LABEL_77:
        double v41 = v39;
LABEL_78:
        double v79 = (a1 - v41) / (v40 - v39);
        double v80 = v32
            + v79 * (v79 * (v30 + v32 * -2.5 + v34 * 2.0 + v35 * -0.5))
            + v79 * (v79 * ((v32 - v34) * 1.5 + (v35 - v30) * 0.5)) * v79
            + (v34 - v30) * 0.5 * v79;
        BOOL v81 = &a6[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v84 = *v81;
            double v86 = v81[1];
            double v82 = -(v86 - *v81 * 2.0);
            double v87 = -(*v81 - v86 * 2.0);
LABEL_110:
            double v88 = *a4;
            double v89 = a4[1];
            goto LABEL_111;
          }
          double v84 = *v81;
          double v86 = v81[1];
          if (a9)
          {
            double v87 = -(v86 - v81[2] * 2.0);
            double v88 = *a4;
            double v89 = a4[1];
            double v90 = v89;
            double v82 = *v81;
            double v84 = v81[1];
            double v86 = v81[2];
LABEL_112:
            double v103 = (a1 - v90) / (v89 - v88);
            double v104 = v84
                 + v103 * (v103 * (v82 + v84 * -2.5 + v86 * 2.0 + v87 * -0.5))
                 + v103 * (v103 * ((v84 - v86) * 1.5 + (v87 - v82) * 0.5)) * v103
                 + (v86 - v82) * 0.5 * v103;
            double v105 = -(v104 - v80 * 2.0);
            double v106 = -(v80 - v104 * 2.0);
LABEL_252:
            double v108 = *a5;
            double v109 = a5[1];
            goto LABEL_253;
          }
        }
        else
        {
          if (a7 - 2 <= a9)
          {
            double v82 = v81[a7 - 3];
            uint64_t v83 = a7 - 2;
            double v84 = v81[v83];
            uint64_t v85 = a7 - 1;
            double v86 = v81[v85];
            double v87 = -(v84 - v86 * 2.0);
            goto LABEL_86;
          }
          if (a9)
          {
            double v82 = v81[a9 - 1];
            uint64_t v83 = a9;
            double v84 = v81[v83];
            uint64_t v85 = a9 + 1;
            double v86 = v81[v85];
            double v87 = v81[a9 + 2];
LABEL_86:
            double v88 = a4[v83];
            double v89 = a4[v85];
LABEL_111:
            double v90 = v88;
            goto LABEL_112;
          }
          double v84 = *v81;
          double v86 = v81[1];
        }
        double v82 = -(v86 - v84 * 2.0);
        double v87 = v81[2];
        goto LABEL_110;
      }
      double v32 = *a6;
      double v34 = a6[1];
    }
    double v30 = -(v34 - v32 * 2.0);
    double v35 = a6[2];
    goto LABEL_76;
  }
  if (!a10)
  {
    if (a7 < 4)
    {
      if (a7 != 3)
      {
        double v50 = *a6;
        double v52 = a6[1];
        double v48 = -(v52 - *a6 * 2.0);
        double v53 = -(*a6 - v52 * 2.0);
LABEL_214:
        double v63 = *a4;
        double v64 = a4[1];
        goto LABEL_215;
      }
      double v50 = *a6;
      double v52 = a6[1];
      if (a9)
      {
        double v53 = -(v52 - a6[2] * 2.0);
        double v63 = *a4;
        double v64 = a4[1];
        double v65 = v64;
        double v48 = *a6;
        double v50 = a6[1];
        double v52 = a6[2];
        goto LABEL_216;
      }
    }
    else
    {
      if (a7 - 2 <= a9)
      {
        double v48 = a6[a7 - 3];
        uint64_t v49 = a7 - 2;
        double v50 = a6[v49];
        uint64_t v51 = a7 - 1;
        double v52 = a6[v51];
        double v53 = -(v50 - v52 * 2.0);
        goto LABEL_91;
      }
      if (a9)
      {
        double v48 = a6[a9 - 1];
        uint64_t v49 = a9;
        double v50 = a6[v49];
        uint64_t v51 = a9 + 1;
        double v52 = a6[v51];
        double v53 = a6[a9 + 2];
LABEL_91:
        double v63 = a4[v49];
        double v64 = a4[v51];
LABEL_215:
        double v65 = v63;
LABEL_216:
        double v193 = (a1 - v65) / (v64 - v63);
        double v194 = v193 * (v193 * (v48 + v50 * -2.5 + v52 * 2.0 + v53 * -0.5))
             + v193 * (v193 * ((v50 - v52) * 1.5 + (v53 - v48) * 0.5)) * v193
             + (v52 - v48) * 0.5 * v193;
        uint64_t v195 = &a6[a7];
        if (a7 < 4)
        {
          if (a7 != 3)
          {
            double v198 = *v195;
            double v200 = v195[1];
            double v196 = -(v200 - *v195 * 2.0);
            double v201 = -(*v195 - v200 * 2.0);
LABEL_236:
            double v202 = *a4;
            double v203 = a4[1];
            goto LABEL_237;
          }
          double v198 = *v195;
          double v200 = v195[1];
          if (a9)
          {
            double v201 = -(v200 - v195[2] * 2.0);
            double v202 = *a4;
            double v203 = a4[1];
            double v204 = v203;
            double v196 = *v195;
            double v198 = v195[1];
            double v200 = v195[2];
            goto LABEL_238;
          }
        }
        else
        {
          if (a7 - 2 <= a9)
          {
            double v196 = v195[a7 - 3];
            uint64_t v197 = a7 - 2;
            double v198 = v195[v197];
            uint64_t v199 = a7 - 1;
            double v200 = v195[v199];
            double v201 = -(v198 - v200 * 2.0);
            goto LABEL_224;
          }
          if (a9)
          {
            double v196 = v195[a9 - 1];
            uint64_t v197 = a9;
            double v198 = v195[v197];
            uint64_t v199 = a9 + 1;
            double v200 = v195[v199];
            double v201 = v195[a9 + 2];
LABEL_224:
            double v202 = a4[v197];
            double v203 = a4[v199];
LABEL_237:
            double v204 = v202;
LABEL_238:
            double v80 = v50 + v194;
            double v211 = (a1 - v204) / (v203 - v202);
            double v206 = 2.0;
            double v104 = v198
                 + v211 * (v211 * (v196 + v198 * -2.5 + v200 * 2.0 + v201 * -0.5))
                 + v211 * (v211 * ((v198 - v200) * 1.5 + (v201 - v196) * 0.5)) * v211
                 + (v200 - v196) * 0.5 * v211;
            long long v207 = &a6[2 * a7];
            if (a7 >= 4)
            {
              unsigned int v208 = a7 - 2;
              if (a7 - 2 > a9)
              {
                if (!a9) {
                  goto LABEL_233;
                }
LABEL_241:
                double v212 = v207[a9 - 1];
                uint64_t v213 = a9;
                double v209 = v207[v213];
                uint64_t v214 = a9 + 1;
                double v210 = v207[v214];
                double v215 = v207[a9 + 2];
LABEL_246:
                double v216 = a4[v213];
                double v217 = a4[v214];
LABEL_250:
                double v218 = v216;
                goto LABEL_251;
              }
LABEL_245:
              double v212 = v207[a7 - 3];
              uint64_t v213 = v208;
              double v209 = v207[v213];
              uint64_t v214 = a7 - 1;
              double v210 = v207[v214];
              double v215 = -(v209 - v210 * 2.0);
              goto LABEL_246;
            }
LABEL_242:
            if (a7 != 3)
            {
              double v209 = *v207;
              double v210 = v207[1];
              double v212 = -(v210 - *v207 * 2.0);
              double v215 = -(*v207 - v210 * 2.0);
LABEL_249:
              double v216 = *a4;
              double v217 = a4[1];
              goto LABEL_250;
            }
            double v209 = *v207;
            double v210 = v207[1];
            if (a9)
            {
              double v215 = -(v210 - v207[2] * 2.0);
              double v216 = *a4;
              double v217 = a4[1];
              double v218 = v217;
              double v212 = *v207;
              double v209 = v207[1];
              double v210 = v207[2];
LABEL_251:
              double v105 = -(v104 - v80 * v206);
              double v219 = (a1 - v218) / (v217 - v216);
              double v106 = v209
                   + v219 * (v219 * (v212 + v209 * -2.5 + v210 * 2.0 + v215 * -0.5))
                   + v219 * (v219 * ((v209 - v210) * 1.5 + (v215 - v212) * 0.5)) * v219
                   + (v210 - v212) * 0.5 * v219;
              goto LABEL_252;
            }
LABEL_248:
            double v212 = -(v210 - v209 * 2.0);
            double v215 = v207[2];
            goto LABEL_249;
          }
          double v198 = *v195;
          double v200 = v195[1];
        }
        double v196 = -(v200 - v198 * 2.0);
        double v201 = v195[2];
        goto LABEL_236;
      }
      double v50 = *a6;
      double v52 = a6[1];
    }
    double v48 = -(v52 - v50 * 2.0);
    double v53 = a6[2];
    goto LABEL_214;
  }
  if (a7 < 4)
  {
    if (a7 != 3)
    {
      double v19 = *a6;
      double v21 = a6[1];
      double v17 = -(v21 - *a6 * 2.0);
      double v22 = -(*a6 - v21 * 2.0);
LABEL_134:
      double v57 = *a4;
      double v58 = a4[1];
      goto LABEL_135;
    }
    double v19 = *a6;
    double v21 = a6[1];
    if (a9)
    {
      double v22 = -(v21 - a6[2] * 2.0);
      double v57 = *a4;
      double v58 = a4[1];
      double v59 = v58;
      double v17 = *a6;
      double v19 = a6[1];
      double v21 = a6[2];
      goto LABEL_136;
    }
LABEL_133:
    double v17 = -(v21 - v19 * 2.0);
    double v22 = a6[2];
    goto LABEL_134;
  }
  if (a7 - 2 <= a9)
  {
    double v17 = a6[a7 - 3];
    uint64_t v18 = a7 - 2;
    double v19 = a6[v18];
    uint64_t v20 = a7 - 1;
    double v21 = a6[v20];
    double v22 = -(v19 - v21 * 2.0);
    goto LABEL_57;
  }
  if (!a9)
  {
    double v19 = *a6;
    double v21 = a6[1];
    goto LABEL_133;
  }
  double v17 = a6[a9 - 1];
  uint64_t v18 = a9;
  double v19 = a6[v18];
  uint64_t v20 = a9 + 1;
  double v21 = a6[v20];
  double v22 = a6[a9 + 2];
LABEL_57:
  double v57 = a4[v18];
  double v58 = a4[v20];
LABEL_135:
  double v59 = v57;
LABEL_136:
  double v124 = (a1 - v59) / (v58 - v57);
  double v125 = v124 * (v124 * (v17 + v19 * -2.5 + v21 * 2.0 + v22 * -0.5))
       + v124 * (v124 * ((v19 - v21) * 1.5 + (v22 - v17) * 0.5)) * v124;
  double v126 = (v21 - v17) * 0.5;
  BOOL v127 = &a6[a7];
  if (a7 < 4)
  {
    if (a7 != 3)
    {
      double v130 = *v127;
      double v132 = v127[1];
      double v128 = -(v132 - *v127 * 2.0);
      double v133 = -(*v127 - v132 * 2.0);
LABEL_162:
      double v134 = *a4;
      double v135 = a4[1];
      goto LABEL_163;
    }
    double v130 = *v127;
    double v132 = v127[1];
    if (a9)
    {
      double v133 = -(v132 - v127[2] * 2.0);
      double v134 = *a4;
      double v135 = a4[1];
      double v136 = v135;
      double v128 = *v127;
      double v130 = v127[1];
      double v132 = v127[2];
      goto LABEL_164;
    }
LABEL_161:
    double v128 = -(v132 - v130 * 2.0);
    double v133 = v127[2];
    goto LABEL_162;
  }
  if (a7 - 2 <= a9)
  {
    double v128 = v127[a7 - 3];
    uint64_t v129 = a7 - 2;
    double v130 = v127[v129];
    uint64_t v131 = a7 - 1;
    double v132 = v127[v131];
    double v133 = -(v130 - v132 * 2.0);
    goto LABEL_144;
  }
  if (!a9)
  {
    double v130 = *v127;
    double v132 = v127[1];
    goto LABEL_161;
  }
  double v128 = v127[a9 - 1];
  uint64_t v129 = a9;
  double v130 = v127[v129];
  uint64_t v131 = a9 + 1;
  double v132 = v127[v131];
  double v133 = v127[a9 + 2];
LABEL_144:
  double v134 = a4[v129];
  double v135 = a4[v131];
LABEL_163:
  double v136 = v134;
LABEL_164:
  double v152 = v125 + v126 * v124;
  double v153 = (a1 - v136) / (v135 - v134);
  double v80 = v130
      + v153 * (v153 * (v128 + v130 * -2.5 + v132 * 2.0 + v133 * -0.5))
      + v153 * (v153 * ((v130 - v132) * 1.5 + (v133 - v128) * 0.5)) * v153
      + (v132 - v128) * 0.5 * v153;
  BOOL v154 = &a6[2 * a7];
  if (a7 >= 4)
  {
    if (a7 - 2 <= a9)
    {
      double v155 = v154[a7 - 3];
      uint64_t v156 = a7 - 2;
      double v157 = v154[v156];
      uint64_t v158 = a7 - 1;
      double v159 = v154[v158];
      double v160 = -(v157 - v159 * 2.0);
      goto LABEL_172;
    }
    if (a9)
    {
      double v155 = v154[a9 - 1];
      uint64_t v156 = a9;
      double v157 = v154[v156];
      uint64_t v158 = a9 + 1;
      double v159 = v154[v158];
      double v160 = v154[a9 + 2];
LABEL_172:
      double v161 = a4[v156];
      double v162 = a4[v158];
LABEL_191:
      double v163 = v161;
      goto LABEL_192;
    }
    double v157 = *v154;
    double v159 = v154[1];
    goto LABEL_189;
  }
  if (a7 != 3)
  {
    double v157 = *v154;
    double v159 = v154[1];
    double v155 = -(v159 - *v154 * 2.0);
    double v160 = -(*v154 - v159 * 2.0);
LABEL_190:
    double v161 = *a4;
    double v162 = a4[1];
    goto LABEL_191;
  }
  double v157 = *v154;
  double v159 = v154[1];
  if (!a9)
  {
LABEL_189:
    double v155 = -(v159 - v157 * 2.0);
    double v160 = v154[2];
    goto LABEL_190;
  }
  double v160 = -(v159 - v154[2] * 2.0);
  double v161 = *a4;
  double v162 = a4[1];
  double v163 = v162;
  double v155 = *v154;
  double v157 = v154[1];
  double v159 = v154[2];
LABEL_192:
  double v105 = v19 + v152;
  double v178 = (a1 - v163) / (v162 - v161);
  double v104 = v157
       + v178 * (v178 * (v155 + v157 * -2.5 + v159 * 2.0 + v160 * -0.5))
       + v178 * (v178 * ((v157 - v159) * 1.5 + (v160 - v155) * 0.5)) * v178
       + (v159 - v155) * 0.5 * v178;
  double v106 = -(v80 - v104 * 2.0);
  double v108 = *a5;
  double v109 = a5[1];
  double v179 = v109;
LABEL_254:
  double v220 = (a2 - v179) / (v109 - v108);
  return v80
       + v220 * (v220 * (v105 + v80 * -2.5 + v104 * 2.0 + v106 * -0.5))
       + v220 * (v220 * ((v80 - v104) * 1.5 + (v106 - v105) * 0.5)) * v220
       + (v104 - v105) * 0.5 * v220;
}

void Matrix<double>::Matrix(uint64_t a1, uint64_t a2, int a3, int a4)
{
  *(void *)a1 = &unk_2707171D8;
  int v4 = *(_DWORD *)(a2 + 20);
  int v5 = *(_DWORD *)(a2 + 16) - a3;
  if (a4 != -1) {
    int v5 = a4;
  }
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v4;
  operator new[]();
}

void sub_259060958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Interp1<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5 = *(unsigned int *)(a1 + 20);
  if (v5 != *(_DWORD *)(a2 + 20)) {
    Interp1<double,LinearInterpolator<double>>();
  }
  if (v5 <= 1) {
    Interp1<double,LinearInterpolator<double>>();
  }
  unsigned int v8 = *(double **)(a1 + 8);
  uint64_t v9 = *(double **)(a3 + 8);
  uint64_t v10 = *(void *)(a2 + 8);
  uint64_t v11 = *(unsigned int *)(a3 + 20);
  uint64_t v12 = *(double **)(a4 + 8);
  if (*(void *)(a4 + 32) < (unint64_t)(8 * v11))
  {
    if (v12)
    {
      if (*(unsigned char *)(a4 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v11;
  if ((int)v11 >= 1)
  {
    double v13 = *v8;
    double v14 = v8[v5 - 1];
    uint64_t v15 = *(unsigned int *)(a1 + 20);
    int v16 = v15 - 1;
    uint64_t v17 = v10 + 8 * v5;
    unsigned int v18 = v5 - 1;
    if ((int)v15 - 1 >= 100)
    {
      for (uint64_t i = 0; i != v11; ++i)
      {
        double v33 = v9[i];
        BOOL v34 = v33 > v14 || v33 < v13;
        double v32 = a5;
        if (!v34)
        {
          int v30 = 0;
          int v35 = v16;
          while (1)
          {
            int v36 = (v35 + v30) >> 1;
            double v37 = *(double *)(*(void *)(a1 + 8) + 8 * v36);
            if (v37 == v33) {
              break;
            }
            if (v37 <= v33) {
              int v30 = v36 + 1;
            }
            else {
              int v35 = v36 - 1;
            }
            if (v30 > v35)
            {
              if (v33 >= v14) {
                goto LABEL_56;
              }
              goto LABEL_37;
            }
          }
          int v30 = (v35 + v30) >> 1;
          if (v33 >= v14)
          {
LABEL_56:
            double v32 = *(double *)(v17 - 8);
            goto LABEL_42;
          }
LABEL_37:
          if (v35 < v30) {
            int v30 = v35;
          }
          unsigned int v31 = v30 & ~(v30 >> 31);
          if (v18 <= v31) {
            unsigned int v31 = v5 - 2;
          }
          double v32 = *(double *)(*(void *)(a2 + 8) + 8 * v31)
              + (*(double *)(*(void *)(a2 + 8) + 8 * (v31 + 1)) - *(double *)(*(void *)(a2 + 8) + 8 * v31))
              * ((v33 - v8[v31])
               / (v8[v31 + 1] - v8[v31]));
        }
LABEL_42:
        v12[i] = v32;
      }
    }
    else if ((int)v15 < 1)
    {
      do
      {
        double v27 = *v9;
        BOOL v28 = *v9 > v14 || v27 < v13;
        double v26 = a5;
        if (!v28)
        {
          if (v27 < v14) {
            double v26 = **(double **)(a2 + 8)
          }
                + (*(double *)(*(void *)(a2 + 8) + 8) - **(double **)(a2 + 8)) * ((v27 - *v8) / (v8[1] - *v8));
          else {
            double v26 = *(double *)(v17 - 8);
          }
        }
        *v12++ = v26;
        ++v9;
        --v11;
      }
      while (v11);
    }
    else
    {
      for (uint64_t j = 0; j != v11; ++j)
      {
        double v23 = v9[j];
        BOOL v24 = v23 > v14 || v23 < v13;
        double v22 = a5;
        if (!v24)
        {
          uint64_t v25 = 0;
          while (*(double *)(*(void *)(a1 + 8) + 8 * v25) <= v23)
          {
            if (v15 == ++v25)
            {
              LODWORD(v25) = 0;
              break;
            }
          }
          if (v23 < v14)
          {
            BOOL v20 = v25 != 0;
            unsigned int v21 = v25 - 1;
            if (!v20) {
              unsigned int v21 = 0;
            }
            if (v18 <= v21) {
              unsigned int v21 = v5 - 2;
            }
            double v22 = *(double *)(*(void *)(a2 + 8) + 8 * v21)
                + (*(double *)(*(void *)(a2 + 8) + 8 * (v21 + 1)) - *(double *)(*(void *)(a2 + 8) + 8 * v21))
                * ((v23 - v8[v21])
                 / (v8[v21 + 1] - v8[v21]));
          }
          else
          {
            double v22 = *(double *)(v17 - 8);
          }
        }
        v12[j] = v22;
      }
    }
  }
  return 0;
}

uint64_t GeomUtils::CalcRotationMatrix<double>(uint64_t a1, double a2, long double a3, long double a4)
{
  double v8 = cos(a3);
  double v9 = cos(a4);
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  if (!v10 || (uint64_t v11 = *(unsigned int *)(a1 + 20), !v11)) {
    GeomUtils::CalcRotationMatrix<double>();
  }
  double v12 = v9;
  **(double **)(a1 + 8) = v8 * v9;
  __double2 v13 = __sincos_stret(a2);
  double v14 = sin(a3);
  double v15 = sin(a4);
  if (v11 == 1) {
    GeomUtils::CalcRotationMatrix<double>();
  }
  *(double *)(*(void *)(a1 + 8) + 8) = v13.__sinval * v12 * v14 - v13.__cosval * v15;
  if (v11 <= 2) {
    GeomUtils::CalcRotationMatrix<double>();
  }
  *(double *)(*(void *)(a1 + 8) + 16) = v13.__cosval * v14 * v12 + v13.__sinval * v15;
  if (v10 <= 1) {
    GeomUtils::CalcRotationMatrix<double>();
  }
  *(double *)(*(void *)(a1 + 8) + 8 * v11) = v8 * v15;
  *(double *)(*(void *)(a1 + 8) + 8 * v11 + 8) = v13.__sinval * v14 * v15 + v13.__cosval * v12;
  *(double *)(*(void *)(a1 + 8) + 8 * v11 + 16) = v13.__cosval * v14 * v15 - v13.__sinval * v12;
  if (v10 == 2) {
    GeomUtils::CalcRotationMatrix<double>();
  }
  uint64_t v16 = 8 * (2 * v11);
  *(double *)(*(void *)(a1 + 8) + v16) = -v14;
  *(double *)(*(void *)(a1 + 8) + v16 + 8) = v13.__sinval * v8;
  *(double *)(*(void *)(a1 + 8) + v16 + 16) = v13.__cosval * v8;
  return 0;
}

void GeomUtils::ProjectWorldToCam<double>()
{
  uint64_t v0 = &unk_2707171D8;
  operator new[]();
}

void sub_259061710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  MatrixNxPts<2u,double>::~MatrixNxPts((uint64_t)&a22);
  Matrix<double>::~Matrix((uint64_t)&a27);
  Matrix<double>::~Matrix((uint64_t)&a32);
  Matrix<double>::~Matrix((uint64_t)&a37);
  Matrix<double>::~Matrix(v37 - 248);
  Matrix<double>::~Matrix(v37 - 208);
  Matrix<double>::~Matrix(v37 - 168);
  Matrix<double>::~Matrix(v37 - 128);
  _Unwind_Resume(a1);
}

uint64_t Matrix<double>::DotRepeatSubFromRightInPlace@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(unsigned int *)(a2 + 20);
  uint64_t v5 = *(unsigned int *)(result + 16);
  uint64_t v6 = *(unsigned int *)(result + 20);
  if (v5 == v4 && v3 == 1)
  {
    if (v6)
    {
      if (v5)
      {
        uint64_t v13 = 0;
        uint64_t v14 = 8 * v5;
        do
        {
          unsigned int v15 = 0;
          uint64_t v16 = 0;
          do
          {
            *(double *)(*(void *)(result + 8) + 8 * v13 + 8 * v15) = *(double *)(*(void *)(result + 8)
                                                                                   + 8 * v13
                                                                                   + 8 * v15)
                                                                       - *(double *)(*(void *)(a2 + 8) + v16);
            v16 += 8;
            v15 += v6;
          }
          while (v14 != v16);
          ++v13;
        }
        while (v13 != v6);
      }
      LODWORD(v3) = v6;
    }
    else
    {
      LODWORD(v3) = 0;
    }
  }
  else
  {
    if (v4 != 1 || v6 != v3) {
      Matrix<double>::DotRepeatSubFromRightInPlace();
    }
    if (v5 && v3)
    {
      unsigned int v9 = 0;
      for (uint64_t i = 0; i != v5; ++i)
      {
        uint64_t v11 = 0;
        do
        {
          uint64_t v12 = *(void *)(result + 8) + 8 * v9;
          *(double *)(v12 + v11) = *(double *)(v12 + v11) - *(double *)(*(void *)(a2 + 8) + v11);
          v11 += 8;
        }
        while (8 * v3 != v11);
        v9 += v3;
      }
    }
  }
  unsigned int v17 = *(_DWORD *)(result + 16);
  uint64_t v18 = *(void *)(result + 8);
  *(void *)a3 = &unk_2707171D8;
  *(void *)(a3 + 8) = v18;
  *(void *)(a3 + 32) = 8 * v17 * (unint64_t)v3;
  *(_DWORD *)(a3 + 16) = v17;
  *(_DWORD *)(a3 + 20) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

uint64_t Matrix<double>::DotRepeatProductFromRight@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(unsigned int *)(a1 + 16);
  unint64_t v4 = *(unsigned int *)(a1 + 20);
  *(void *)a3 = &unk_2707171D8;
  if (v4 * v5) {
    operator new[]();
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 8 * v5 * (unint64_t)v4;
  int v7 = *(_DWORD *)(a2 + 16);
  if (v5 == v7)
  {
    unsigned int v8 = *(_DWORD *)(a2 + 20);
    uint64_t v9 = *(unsigned int *)(a1 + 20);
    if (v8 == 1)
    {
      if (v9)
      {
        for (unint64_t i = 0; i != v9; ++i)
        {
          if (v5)
          {
            if (i < v4)
            {
              unsigned int v11 = 0;
              unsigned int v12 = 0;
              uint64_t v13 = 0;
              while (8 * v5 != v13)
              {
                *(double *)(*(void *)(a3 + 8) + 8 * i + 8 * v12) = *(double *)(*(void *)(a1 + 8)
                                                                                 + 8 * i
                                                                                 + 8 * v11)
                                                                     * *(double *)(*(void *)(a2 + 8) + v13);
                v13 += 8;
                v12 += v4;
                v11 += v9;
                if (8 * v5 == v13) {
                  goto LABEL_7;
                }
              }
            }
            __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
          }
LABEL_7:
          ;
        }
      }
      return result;
    }
  }
  else
  {
    LODWORD(v9) = *(_DWORD *)(a1 + 20);
    unsigned int v8 = *(_DWORD *)(a2 + 20);
  }
  if (v7 != 1 || v9 != v8) {
    __assert_rtn("DotRepeatProductFromRight", "Matrix.hpp", 1487, "0");
  }
  if (v5)
  {
    unsigned int v14 = 0;
    unsigned int v15 = 0;
    unint64_t v16 = 0;
    do
    {
      if (v8)
      {
        if (v16 < v5)
        {
          uint64_t v17 = 0;
          while (8 * v4 != v17)
          {
            uint64_t result = *(void *)(a3 + 8) + 8 * v14;
            *(double *)(result + v17) = *(double *)(*(void *)(a1 + 8) + 8 * v15 + v17)
                                      * *(double *)(*(void *)(a2 + 8) + v17);
            v17 += 8;
            if (8 * v8 == v17) {
              goto LABEL_19;
            }
          }
        }
        __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
      }
LABEL_19:
      ++v16;
      v15 += v8;
      v14 += v4;
    }
    while (v16 != v5);
  }
  return result;
}

void sub_259061B68(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void sub_259061B7C(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void sub_259061B90(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t DistortRadialLiteInternal<double>(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, int a7, int a8, char a9)
{
  if (*(_DWORD *)(a1 + 16) != 2) {
    DistortRadialLiteInternal<double>();
  }
  if (a7) {
    uint64_t v12 = a2;
  }
  else {
    uint64_t v12 = a3;
  }
  if (a7) {
    uint64_t v13 = a3;
  }
  else {
    uint64_t v13 = a2;
  }
  int v50 = 1;
  unsigned int v51 = a4;
  char v52 = 0;
  uint64_t v53 = 8 * a4;
  double v48 = &unk_270717208;
  uint64_t v49 = v12;
  int v44 = 1;
  unsigned int v45 = a4;
  char v46 = 0;
  uint64_t v47 = v53;
  double v42 = &unk_270717208;
  uint64_t v43 = v13;
  int v14 = *(_DWORD *)(a1 + 20);
  int v36 = &unk_2707171D8;
  if (v14) {
    operator new[]();
  }
  int v38 = 1;
  int v39 = 0;
  char v40 = 0;
  uint64_t v41 = 0;
  int v36 = &unk_270717208;
  uint64_t v37 = 0;
  int v32 = 1;
  int v33 = 0;
  char v34 = 0;
  uint64_t v35 = 0;
  int v30 = &unk_270717208;
  uint64_t v31 = 0;
  Matrix<double>::DotMult<double>(a1, a1, (uint64_t)v28);
  if (a8)
  {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>((uint64_t)&v48, (uint64_t)&v42, (uint64_t)&v36, (uint64_t)&v30);
  }
  else
  {
    if (!v39) {
      __assert_rtn("Interp1WithExtrap", "Algo.hpp", 1355, "xq.GetNumOfPoints() > 0");
    }
    Interp1WithExtrap<double,LinearInterpolator<double>>((uint64_t)&v48, (uint64_t)&v42, (uint64_t)&v36, (uint64_t)&v30, a9);
  }
  Matrix<double>::DotDiv((uint64_t)&v30, (uint64_t)&v36, (uint64_t)v54);
  uint64_t v25 = v55;
  unsigned int v26 = v56;
  char v27 = v57;
  uint64_t v15 = v39;
  if (v39 >= 1)
  {
    if (!v38) {
LABEL_21:
    }
      __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
    unint64_t v16 = 0;
    do
    {
      if (*(double *)(v37 + 8 * v16) == 0.0)
      {
        if (v16 >= v26) {
          goto LABEL_21;
        }
        v25[v16] = 1.0;
      }
      ++v16;
    }
    while (v15 != v16);
    unsigned int v17 = *(_DWORD *)(a1 + 16);
    if (!v17) {
      goto LABEL_60;
    }
    uint64_t v18 = *(unsigned int *)(a1 + 20);
    if (v17 >= 2)
    {
      unint64_t v19 = 0;
      while (1)
      {
        if (v18 == v19) {
          goto LABEL_60;
        }
        if (v19 >= v26) {
          goto LABEL_59;
        }
        unsigned int v20 = *(_DWORD *)(a5 + 16);
        if (!v20) {
          goto LABEL_59;
        }
        unint64_t v21 = *(unsigned int *)(a5 + 20);
        if (v19 >= v21) {
          goto LABEL_59;
        }
        *(double *)(*(void *)(a5 + 8) + 8 * v19) = *(double *)(*(void *)(a1 + 8) + 8 * v19) * v25[v19];
        if (v20 < 2) {
          break;
        }
        *(double *)(*(void *)(a5 + 8) + 8 * v21 + 8 * v19) = v25[v19]
                                                             * *(double *)(*(void *)(a1 + 8) + 8 * v18 + 8 * v19);
        if (v15 == ++v19) {
          goto LABEL_31;
        }
      }
      int v23 = 120;
LABEL_51:
      __assert_rtn("operator()", "Matrix.hpp", v23, "row < m_rows && col < m_cols");
    }
    if (v18)
    {
      if (v26 && *(_DWORD *)(a5 + 16) && *(_DWORD *)(a5 + 20))
      {
        **(double **)(a5 + 8) = **(double **)(a1 + 8) * *v25;
        int v23 = 126;
        goto LABEL_51;
      }
LABEL_59:
      int v24 = 120;
    }
    else
    {
LABEL_60:
      int v24 = 126;
    }
    __assert_rtn("operator()", "Matrix.hpp", v24, "row < m_rows && col < m_cols");
  }
LABEL_31:
  if (v25 && v27) {
    MEMORY[0x25A2D62A0]();
  }
  v28[0] = &unk_2707171D8;
  if (v28[1] && v29) {
    MEMORY[0x25A2D62A0]();
  }
  int v30 = &unk_2707171D8;
  if (v31 && v34) {
    MEMORY[0x25A2D62A0]();
  }
  int v36 = &unk_2707171D8;
  if (v37 && v40) {
    MEMORY[0x25A2D62A0]();
  }
  double v42 = &unk_2707171D8;
  if (v43 && v46) {
    MEMORY[0x25A2D62A0]();
  }
  double v48 = &unk_2707171D8;
  if (v49 && v52) {
    MEMORY[0x25A2D62A0]();
  }
  return 0;
}

void sub_259062274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a26);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a31);
  MatrixNxPts<1u,double>::~MatrixNxPts(v31 - 184);
  _Unwind_Resume(a1);
}

void std::vector<Matrix<double>>::__push_back_slow_path<Matrix<double> const&>(void *a1, uint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 <= 0x666666666666666)
  {
    if (0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
      unint64_t v3 = 0x999999999999999ALL * ((uint64_t)(a1[2] - *a1) >> 3);
    }
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[2] - *a1) >> 3) >= 0x333333333333333) {
      unint64_t v5 = 0x666666666666666;
    }
    else {
      unint64_t v5 = v3;
    }
    if (v5)
    {
      if (v5 > 0x666666666666666) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v6 = operator new(40 * v5);
    }
    else
    {
      uint64_t v6 = 0;
    }
    Matrix<double>::Matrix((uint64_t)v6 + 40 * v2, a2, 0, -1);
  }
  std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
}

void sub_259062494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<Matrix<double>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<Matrix<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 40);
    *(void *)(a1 + 16) = i - 40;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<Matrix<double>>::vector(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  int64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    if (v6 >= 0x666666666666667) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    int v7 = (char *)operator new(v5);
    uint64_t v8 = 0;
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[40 * v6];
    do
    {
      uint64_t v9 = &v7[v8];
      *(void *)uint64_t v9 = &unk_2707171D8;
      unsigned int v11 = *(_DWORD *)(v3 + v8 + 16);
      unsigned int v10 = *(_DWORD *)(v3 + v8 + 20);
      *((void *)v9 + 1) = *(void *)(v3 + v8 + 8);
      *((void *)v9 + 4) = 8 * v11 * (unint64_t)v10;
      *((_DWORD *)v9 + 4) = v11;
      *((_DWORD *)v9 + 5) = v10;
      v9[24] = 0;
      v8 += 40;
    }
    while (v3 + v8 != v4);
    a1[1] = &v7[v8];
  }
  return a1;
}

void sub_259062628(_Unwind_Exception *exception_object)
{
  if (*v1) {
    std::vector<Matrix<double>>::vector((uint64_t)(v1 + 1), *v1);
  }
  _Unwind_Resume(exception_object);
}

void Matrix<double>::MultAxBToC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  unsigned int v7 = *(_DWORD *)(a1 + 20);
  if (v6 == 1 && v7 == 1)
  {
    unsigned int v6 = *(_DWORD *)(a2 + 16);
    unsigned int v7 = *(_DWORD *)(a2 + 20);
    if (v7 * v6) {
      operator new[]();
    }
    vDSPVsmul<double>(*(const double **)(a2 + 8), 1, *(const double **)(a1 + 8), 0, 1, 0);
    size_t v12 = 8 * v6 * (unint64_t)v7;
    uint64_t v13 = *(void **)(a3 + 8);
    if (*(void *)(a3 + 32) < v12)
    {
      if (v13 && *(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
      operator new[]();
    }
    goto LABEL_27;
  }
  int v10 = *(_DWORD *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 20);
  if (v9 == 1 && v10 == 1)
  {
    if (v7 * v6) {
      operator new[]();
    }
    vDSPVsmul<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 0, 1, 0);
    size_t v12 = 8 * v6 * (unint64_t)v7;
    uint64_t v13 = *(void **)(a3 + 8);
    if (*(void *)(a3 + 32) < v12)
    {
      if (v13 && *(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
      operator new[]();
    }
LABEL_27:
    *(_DWORD *)(a3 + 16) = v6;
    *(_DWORD *)(a3 + 20) = v7;
    memcpy(v13, 0, v12);
    goto LABEL_28;
  }
  if (v7 != v10) {
    Matrix<double>::MultAxBToC();
  }
  if (v6 != *(_DWORD *)(a3 + 16) || v9 != *(_DWORD *)(a3 + 20)) {
    Matrix<double>::MultAxBToC();
  }
LABEL_28:
  LODWORD(v14) = *(_DWORD *)(a1 + 20);
  vDSPMmul<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, *(double **)(a3 + 8), 1, *(_DWORD *)(a1 + 16), *(_DWORD *)(a3 + 20), v14);
}

void sub_259062928(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906293C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259062950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259062964(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Interp1SortedWithExtrap<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>();
  }
  uint64_t v4 = *(unsigned int *)(a3 + 20);
  if (v4 <= 1) {
    Interp1SortedWithExtrap<double,LinearInterpolator<double>>();
  }
  if (*(void *)(a4 + 32) < (unint64_t)(8 * v4))
  {
    if (*(void *)(a4 + 8))
    {
      if (*(unsigned char *)(a4 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v4;
  uint64_t v5 = *(unsigned int *)(a3 + 20);
  if (v5)
  {
    uint64_t v6 = *(unsigned int *)(a1 + 20);
    unsigned int v7 = v6 - 1;
    double v8 = *(double *)(*(void *)(a1 + 8) + 8 * (v6 - 1));
    unsigned int v9 = v6 - 2;
    if ((int)v6 - 1 >= 100)
    {
      uint64_t v17 = 0;
      int v18 = 0;
      do
      {
        double v22 = *(double *)(*(void *)(a3 + 8) + 8 * v17);
        uint64_t v23 = *(void *)(a1 + 8);
        unsigned int v19 = v9;
        if (v22 < v8)
        {
          int v24 = v7;
          if ((int)v7 >= v18)
          {
            while (1)
            {
              int v25 = (v24 + v18) >> 1;
              double v26 = *(double *)(v23 + 8 * v25);
              if (v26 == v22) {
                break;
              }
              if (v26 <= v22) {
                int v18 = v25 + 1;
              }
              else {
                int v24 = v25 - 1;
              }
              if (v18 > v24) {
                goto LABEL_24;
              }
            }
            int v18 = (v24 + v18) >> 1;
          }
LABEL_24:
          if (v24 < v18) {
            int v18 = v24;
          }
          unsigned int v19 = v18 & ~(v18 >> 31);
        }
        if (v7 <= v19) {
          unsigned int v21 = v9;
        }
        else {
          unsigned int v21 = v19;
        }
        uint64_t v20 = *(void *)(a2 + 8);
        *(double *)(*(void *)(a4 + 8) + 8 * v17++) = *(double *)(v20 + 8 * v21)
                                                     + (*(double *)(v20 + 8 * (v21 + 1)) - *(double *)(v20 + 8 * v21))
                                                     * ((v22 - *(double *)(v23 + 8 * v21))
                                                      / (*(double *)(v23 + 8 * (v21 + 1))
                                                       - *(double *)(v23 + 8 * v21)));
        int v18 = v19;
      }
      while (v17 != v5);
    }
    else if ((int)v6 <= 0)
    {
      uint64_t v27 = 0;
      uint64_t v28 = 8 * v5;
      do
      {
        double v29 = *(double *)(*(void *)(a3 + 8) + v27);
        if (v29 >= v8) {
          unsigned int v30 = v9;
        }
        else {
          unsigned int v30 = 0;
        }
        if (v7 <= v30) {
          unsigned int v30 = v9;
        }
        uint64_t v31 = *(void *)(a1 + 8);
        *(double *)(*(void *)(a4 + 8) + v27) = *(double *)(*(void *)(a2 + 8) + 8 * v30)
                                               + (*(double *)(*(void *)(a2 + 8) + 8 * (v30 + 1))
                                                - *(double *)(*(void *)(a2 + 8) + 8 * v30))
                                               * ((v29 - *(double *)(v31 + 8 * v30))
                                                / (*(double *)(v31 + 8 * (v30 + 1)) - *(double *)(v31 + 8 * v30)));
        v27 += 8;
      }
      while (v28 != v27);
    }
    else
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        double v14 = *(double *)(*(void *)(a3 + 8) + 8 * i);
        uint64_t v15 = *(void *)(a1 + 8);
        unsigned int v12 = v6 - 2;
        if (v14 < v8)
        {
          uint64_t v16 = 0;
          while (*(double *)(v15 + 8 * v16) <= v14)
          {
            if (v6 == ++v16)
            {
              LODWORD(v16) = 0;
              break;
            }
          }
          BOOL v11 = v16 != 0;
          unsigned int v12 = v16 - 1;
          if (!v11) {
            unsigned int v12 = 0;
          }
        }
        if (v7 <= v12) {
          unsigned int v12 = v6 - 2;
        }
        uint64_t v13 = *(void *)(a2 + 8);
        *(double *)(*(void *)(a4 + 8) + 8 * i) = *(double *)(v13 + 8 * v12)
                                                 + (*(double *)(v13 + 8 * (v12 + 1)) - *(double *)(v13 + 8 * v12))
                                                 * ((v14 - *(double *)(v15 + 8 * v12))
                                                  / (*(double *)(v15 + 8 * (v12 + 1)) - *(double *)(v15 + 8 * v12)));
      }
    }
  }
  return 0;
}

uint64_t Interp1WithExtrap<double,LinearInterpolator<double>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)) {
    Interp1WithExtrap<double,LinearInterpolator<double>>();
  }
  uint64_t v6 = *(unsigned int *)(a3 + 20);
  unsigned int v7 = *(double **)(a4 + 8);
  if (*(void *)(a4 + 32) < (unint64_t)(8 * v6))
  {
    if (v7)
    {
      if (*(unsigned char *)(a4 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v6;
  uint64_t v8 = *(unsigned int *)(a1 + 20);
  unsigned int v9 = *(double **)(a3 + 8);
  uint64_t v10 = *(void *)(a2 + 8);
  BOOL v11 = *(double **)(a1 + 8);
  double v12 = v11[(int)v8 - 1];
  if (a5)
  {
    if ((int)v6 >= 1)
    {
      double v13 = *v11;
      double v14 = v11[1] - *v11;
      do
      {
        double v16 = *v9;
        unsigned int v15 = v8 - 2;
        if (*v9 < v12)
        {
          unsigned int v15 = ((v16 - v13) / v14);
          if (v15 + 1 < v8 && *(double *)(*(void *)(a1 + 8) + 8 * (v15 + 1)) <= v16) {
            ++v15;
          }
        }
        if ((int)v8 - 1 <= v15) {
          unsigned int v15 = v8 - 2;
        }
        *v7++ = *(double *)(v10 + 8 * v15)
              + (*(double *)(v10 + 8 * (v15 + 1)) - *(double *)(v10 + 8 * v15))
              * ((v16 - v11[v15])
               / (v11[v15 + 1] - v11[v15]));
        ++v9;
        --v6;
      }
      while (v6);
    }
  }
  else if ((int)v6 >= 1)
  {
    unsigned int v17 = v8 - 2;
    unsigned int v18 = v8 - 1;
    if ((int)v8 - 1 >= 100)
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        double v32 = v9[i];
        unsigned int v31 = v17;
        if (v32 < v12)
        {
          int v30 = 0;
          int v33 = v18;
          while (1)
          {
            int v34 = (v33 + v30) >> 1;
            double v35 = *(double *)(*(void *)(a1 + 8) + 8 * v34);
            if (v35 == v32) {
              break;
            }
            if (v35 <= v32) {
              int v30 = v34 + 1;
            }
            else {
              int v33 = v34 - 1;
            }
            if (v30 > v33) {
              goto LABEL_40;
            }
          }
          int v30 = (v33 + v30) >> 1;
LABEL_40:
          if (v33 < v30) {
            int v30 = v33;
          }
          unsigned int v31 = v30 & ~(v30 >> 31);
        }
        if (v18 <= v31) {
          unsigned int v31 = v17;
        }
        v7[i] = *(double *)(v10 + 8 * v31)
              + (*(double *)(v10 + 8 * (v31 + 1)) - *(double *)(v10 + 8 * v31))
              * ((v32 - v11[v31])
               / (v11[v31 + 1] - v11[v31]));
      }
    }
    else if ((int)v8 <= 0)
    {
      do
      {
        double v20 = *v9++;
        double v21 = v20;
        if (v20 >= v12) {
          unsigned int v22 = v17;
        }
        else {
          unsigned int v22 = 0;
        }
        if (v18 <= v22) {
          unsigned int v22 = v17;
        }
        uint64_t v23 = v22;
        *v7++ = *(double *)(v10 + v23 * 8)
              + (*(double *)(v10 + 8 * (v22 + 1)) - *(double *)(v10 + v23 * 8))
              * ((v21 - v11[v23])
               / (v11[v22 + 1] - v11[v23]));
        --v6;
      }
      while (v6);
    }
    else
    {
      for (uint64_t j = 0; j != v6; ++j)
      {
        double v27 = v9[j];
        unsigned int v26 = v8 - 2;
        if (v27 < v12)
        {
          uint64_t v28 = 0;
          while (*(double *)(*(void *)(a1 + 8) + 8 * v28) <= v27)
          {
            if (v8 == ++v28)
            {
              LODWORD(v28) = 0;
              break;
            }
          }
          BOOL v25 = v28 != 0;
          unsigned int v26 = v28 - 1;
          if (!v25) {
            unsigned int v26 = 0;
          }
        }
        if (v18 <= v26) {
          unsigned int v26 = v8 - 2;
        }
        v7[j] = *(double *)(v10 + 8 * v26)
              + (*(double *)(v10 + 8 * (v26 + 1)) - *(double *)(v10 + 8 * v26))
              * ((v27 - v11[v26])
               / (v11[v26 + 1] - v11[v26]));
      }
    }
  }
  return 0;
}

void Matrix<double>::DotDiv(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v3 != *(_DWORD *)(a1 + 20) || (unsigned int v4 = *(_DWORD *)(a2 + 16), v4 != *(_DWORD *)(a1 + 16))) {
    Matrix<double>::DotDiv();
  }
  *(void *)a3 = &unk_2707171D8;
  if (v4 * v3) {
    operator new[]();
  }
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 8 * v3 * (unint64_t)v4;
  vDSPVdiv<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, 0, 1, 0);
}

void sub_259063050(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

uint64_t MatrixMxN<3u,3u,double>::svdLapack()
{
  dgesvd_NEWLAPACK();
  uint64_t v0 = malloc_type_malloc(8 * (int)0.0, 0x100004000313F17uLL);
  dgesvd_NEWLAPACK();
  free(v0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_0(uint64_t a1, uint64_t a2)
{
  return a2;
}

void GeomUtils::DistortRadialLiteInternal()
{
  __assert_rtn("DistortRadialLiteInternal", "GeomUtils.cpp", 537, "pts.Rows() == 2");
}

void Matrix<double>::operator()()
{
}

void Matrix<double>::DotMult<double>()
{
  __assert_rtn("DotMult", "Matrix.hpp", 511, "rhs.Cols() == m_cols && rhs.Rows() == m_rows");
}

void GeomUtils::check3of4SpotsOnSameLine()
{
  __assert_rtn("check3of4SpotsOnSameLine", "GeomUtils.cpp", 1196, "x2.Cols()==4 && x2.Rows()==3");
}

{
  __assert_rtn("check3of4SpotsOnSameLine", "GeomUtils.cpp", 1195, "x1.Cols()==4 && x1.Rows()==3");
}

void std::vector<ImageUtils::Blob>::vector(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)OUTLINED_FUNCTION_0(a1, a2);
  if (!v7)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6;
    do
    {
      BOOL v11 = *(void **)(v9 - 24);
      v9 -= 24;
      uint64_t v10 = v11;
      if (v11)
      {
        *(void *)(v6 - 16) = v10;
        operator delete(v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != v2);
    unsigned int v4 = *v8;
  }
  void *v3 = v2;
  operator delete(v4);
}

void Interp2<double,CubicInterpolator<double>>()
{
  __assert_rtn("Interp2", "Algo.hpp", 757, "v.Cols() >= 2");
}

{
  __assert_rtn("Interp2", "Algo.hpp", 758, "v.Rows() >= 2");
}

{
  __assert_rtn("Interp2", "Algo.hpp", 759, "xq.GetNumOfPoints() == yq.GetNumOfPoints()");
}

{
  __assert_rtn("Interp2", "Algo.hpp", 756, "y.GetNumOfPoints() == v.Rows()");
}

{
  __assert_rtn("Interp2", "Algo.hpp", 755, "x.GetNumOfPoints() == v.Cols()");
}

void Interp1<double,LinearInterpolator<double>>()
{
}

{
  __assert_rtn("Interp1", "Algo.hpp", 1142, "xLen == v.GetNumOfPoints()");
}

void GeomUtils::CalcRotationMatrix<double>()
{
}

void Matrix<double>::DotRepeatSubFromRightInPlace()
{
}

void DistortRadialLiteInternal<double>()
{
  __assert_rtn("DistortRadialLiteInternal", "GeomUtils.hpp", 385, "pts.Rows() == 2");
}

void (***std::vector<Matrix<double>>::__push_back_slow_path<Matrix<double> const&>(void (***a1)(void), void (***a2)(void)))(void)
{
  unsigned int v3 = a1;
  unsigned int v4 = a1;
  do
  {
    uint64_t v5 = *v4;
    v4 += 5;
    (*v5)();
    v3 += 5;
    uint64_t result = v4;
  }
  while (v4 != a2);
  return result;
}

void std::vector<Matrix<double>>::vector(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = (void *)OUTLINED_FUNCTION_0(a1, a2);
  if (!v7)
  {
    uint64_t v8 = v5;
    uint64_t v9 = v6 - 40;
    uint64_t v10 = (void (***)(void))(v6 - 40);
    BOOL v11 = (void (***)(void))(v6 - 40);
    do
    {
      double v12 = *v11;
      v11 -= 5;
      (*v12)(v10);
      v9 -= 40;
      BOOL v7 = v10 == v2;
      uint64_t v10 = v11;
    }
    while (!v7);
    unsigned int v4 = *v8;
  }
  void *v3 = v2;
  operator delete(v4);
}

void Matrix<double>::MultAxBToC()
{
  __assert_rtn("MultAxBToC", "Matrix.hpp", 1581, "m_rows == C->Rows() && B.Cols() == C->Cols() && \"Output dimensions not legal\"");
}

{
  __assert_rtn("MultAxBToC", "Matrix.hpp", 1580, "m_cols == B.Rows() && \"Input dimensions not legal\"");
}

void Interp1SortedWithExtrap<double,LinearInterpolator<double>>()
{
}

{
  __assert_rtn("Interp1SortedWithExtrap", "Algo.hpp", 1450, "x.GetNumOfPoints() == v.GetNumOfPoints()");
}

void Interp1WithExtrap<double,LinearInterpolator<double>>()
{
  __assert_rtn("Interp1WithExtrap", "Algo.hpp", 1266, "x.GetNumOfPoints() == v.GetNumOfPoints()");
}

void Matrix<double>::DotDiv()
{
}

double *ImageUtils::IntegralImage<double>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  uint64_t result = *(double **)(a2 + 8);
  if (*(void *)(a2 + 32) < 8 * v3 * (unint64_t)v4)
  {
    if (result)
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  if (v4)
  {
    uint64_t v6 = *(double **)(a1 + 8);
    double v7 = 0.0;
    unsigned int v8 = v4;
    do
    {
      double v9 = *v6++;
      double v7 = v7 + v9;
      *result++ = v7;
      --v8;
    }
    while (v8);
    if (v3 >= 2)
    {
      uint64_t v10 = *(double **)(a2 + 8);
      for (int i = 1; i != v3; ++i)
      {
        double v12 = 0.0;
        unsigned int v13 = v4;
        do
        {
          double v14 = *v6++;
          double v12 = v12 + v14;
          double v15 = *v10++;
          *result++ = v12 + v15;
          --v13;
        }
        while (v13);
      }
    }
  }
  return result;
}

double *ImageUtils::IntegralImage<float>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  uint64_t result = *(double **)(a2 + 8);
  if (*(void *)(a2 + 32) < 8 * v3 * (unint64_t)v4)
  {
    if (result)
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  if (v4)
  {
    uint64_t v6 = *(float **)(a1 + 8);
    double v7 = 0.0;
    unsigned int v8 = v4;
    do
    {
      float v9 = *v6++;
      double v7 = v7 + v9;
      *result++ = v7;
      --v8;
    }
    while (v8);
    if (v3 >= 2)
    {
      uint64_t v10 = *(double **)(a2 + 8);
      for (int i = 1; i != v3; ++i)
      {
        double v12 = 0.0;
        unsigned int v13 = v4;
        do
        {
          float v14 = *v6++;
          double v12 = v12 + v14;
          double v15 = *v10++;
          *result++ = v15 + v12;
          --v13;
        }
        while (v13);
      }
    }
  }
  return result;
}

uint64_t ImageUtils::AdaptiveThreshold<double>(uint64_t a1, unsigned int a2, int a3, uint64_t a4, double a5)
{
  if (a3) {
    return AdaptiveThreshold<double,true>(a1, a2, a4, a5);
  }
  else {
    return AdaptiveThreshold<double,false>(a1, a2, a4, a5);
  }
}

uint64_t AdaptiveThreshold<double,true>(uint64_t a1, unsigned int a2, uint64_t a3, double a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (v4 <= a2 || (unsigned int v7 = *(_DWORD *)(a1 + 16), v7 <= a2)) {
    AdaptiveThreshold<double,true>();
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v10 = v9;
  unsigned int v11 = v8;
  if (*(void *)(a3 + 32) < v7 * (unint64_t)v4)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v4;
  if (8 * v8 * (unint64_t)v9) {
    operator new[]();
  }
  double v12 = 0;
  if (v9)
  {
    unsigned int v13 = 0;
    uint64_t v14 = *(void *)(a1 + 8);
    double v15 = 0.0;
    unsigned int v16 = v10;
    do
    {
      double v15 = v15 + *(double *)((char *)v13 + v14);
      *v13++ = v15;
      --v16;
    }
    while (v16);
    if (v11 >= 2)
    {
      unsigned int v17 = v13;
      unsigned int v18 = (double *)((char *)v13 + v14);
      for (int i = 1; i != v11; ++i)
      {
        double v20 = 0.0;
        unsigned int v21 = v10;
        do
        {
          double v22 = *v18++;
          double v20 = v20 + v22;
          double v23 = *v12++;
          *v17++ = v20 + v23;
          --v21;
        }
        while (v21);
      }
    }
  }
  uint64_t v24 = a2 - 1;
  if (v24 >= v11 || v24 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  unsigned int v25 = *(_DWORD *)(a1 + 20);
  uint64_t v185 = v25 - 1;
  if (v185 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v26 = ~a2;
  uint64_t v184 = v25 + ~a2;
  if (v184 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v27 = *(_DWORD *)(a1 + 16);
  if (v27 - 1 >= v11) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v28 = v27 + v26;
  if (v27 + v26 >= v11) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  unsigned int v183 = *(_DWORD *)(a1 + 16);
  LODWORD(v29) = 0;
  unsigned int v30 = a2 >> 1;
  int v31 = a2 & 1;
  unsigned int v32 = (a2 >> 1) + v31 - 1;
  unint64_t v33 = v4 - (a2 >> 1);
  unint64_t v187 = v7 - (a2 >> 1);
  uint64_t v34 = 8 * v24;
  uint64_t v35 = v10 * v24;
  uint64_t v36 = *(uint64_t *)(v34 + 8 * v35);
  uint64_t v37 = 8 * v185;
  uint64_t v38 = 8 * v35;
  uint64_t v39 = 8 * v184;
  uint64_t v40 = 8 * (v27 - 1) * v10;
  double v41 = *(double *)(v37 + 8 * v35) - *(double *)(v39 + 8 * v35);
  uint64_t v182 = v28 * v10;
  double v42 = *(double *)(v34 + v40) - *(double *)(v34 + 8 * v182);
  double v43 = *(double *)(v37 + v40) + *(double *)(v39 + 8 * v182) - *(double *)(v39 + v40) - *(double *)(v37 + 8 * v182);
  int v44 = *(double **)(a1 + 8);
  unsigned int v45 = *(int8x16_t **)(a3 + 8);
  double v46 = (double)(a2 * a2);
  int v186 = ~v32;
  unsigned int v47 = (a2 >> 1) + (a2 & 1);
  if (v47 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v47;
  }
  uint64_t v49 = v48 & 0xFFFFFFF0;
  float64x2_t v50 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
  float64x2_t v51 = (float64x2_t)vdupq_lane_s64(v36, 0);
  uint64_t v52 = v49;
  float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0);
  unsigned int v54 = v10 - v10 * v47;
  unsigned int v55 = v10 + v10 * v30;
  uint64_t v56 = v38 + 8 * (v48 + v30);
  unsigned int v57 = v48 - v30 - v31;
  uint64_t v58 = v38 + 8 * v57;
  int v59 = 1;
  v60.i64[0] = 0x101010101010101;
  v60.i64[1] = 0x101010101010101;
  do
  {
    unsigned int v61 = v59;
    unsigned int v62 = v54;
    unsigned int v63 = v55;
    if (v48 < 0x10)
    {
      int v64 = 0;
      double v65 = v45;
      double v66 = v44;
LABEL_35:
      int v76 = v48 - v64;
      do
      {
        double v77 = *v66++;
        v65->i8[0] = (v77 + a4) * v46 <= *(double *)&v36;
        double v65 = (int8x16_t *)((char *)v65 + 1);
        --v76;
      }
      while (v76);
      goto LABEL_37;
    }
    double v65 = (int8x16_t *)((char *)v45 + v49);
    double v66 = &v44[v52];
    uint64_t v67 = v48 & 0xFFFFFFF0;
    do
    {
      float64x2_t v69 = *(float64x2_t *)(v44 + 12);
      float64x2_t v68 = *(float64x2_t *)(v44 + 14);
      float64x2_t v71 = *(float64x2_t *)(v44 + 8);
      float64x2_t v70 = *(float64x2_t *)(v44 + 10);
      float64x2_t v73 = *(float64x2_t *)(v44 + 4);
      float64x2_t v72 = *(float64x2_t *)(v44 + 6);
      float64x2_t v74 = *(float64x2_t *)v44;
      float64x2_t v75 = *(float64x2_t *)(v44 + 2);
      v44 += 16;
      *v45++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v74, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v75, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v73, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v72, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v71, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v70, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v69, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v68, v50), v46))))), v60);
      v67 -= 16;
    }
    while (v67);
    int v64 = v48 & 0xFFFFFFF0;
    if (v49 != v48) {
      goto LABEL_35;
    }
LABEL_37:
    if (v48 >= v33)
    {
      double v79 = v66;
      int v80 = v48;
      if (v48 >= v25) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v78 = 0;
      double v79 = v66;
      do
      {
        if (v48 + v30 + v78 >= v10) {
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        }
        if (v57 + v78 >= v10) {
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        }
        v65->i8[v78] = (v66[v78] + a4) * v46 <= *(double *)(v56 + 8 * v78) - *(double *)(v58 + 8 * v78);
        ++v79;
        ++v78;
      }
      while (v48 + v78 < v33);
      int v80 = v48 + v78;
      double v65 = (int8x16_t *)((char *)v65 + v78);
      if ((int)v48 + (int)v78 >= v25)
      {
LABEL_28:
        int v44 = v79;
        unsigned int v45 = v65;
        goto LABEL_29;
      }
    }
    uint64_t v81 = v25 + ~v80;
    if (v81 < 0xF)
    {
      unsigned int v45 = v65;
      int v44 = v79;
LABEL_50:
      int v93 = v25 - v80;
      do
      {
        double v94 = *v44++;
        v45->i8[0] = (v94 + a4) * v46 <= v41;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v93;
      }
      while (v93);
      goto LABEL_29;
    }
    uint64_t v82 = v81 + 1;
    uint64_t v83 = (v81 + 1) & 0x1FFFFFFF0;
    v80 += v83;
    unsigned int v45 = (int8x16_t *)((char *)v65 + v83);
    int v44 = &v79[v83];
    uint64_t v84 = v83;
    do
    {
      float64x2_t v86 = *(float64x2_t *)(v79 + 12);
      float64x2_t v85 = *(float64x2_t *)(v79 + 14);
      float64x2_t v88 = *(float64x2_t *)(v79 + 8);
      float64x2_t v87 = *(float64x2_t *)(v79 + 10);
      float64x2_t v90 = *(float64x2_t *)(v79 + 4);
      float64x2_t v89 = *(float64x2_t *)(v79 + 6);
      float64x2_t v91 = *(float64x2_t *)v79;
      float64x2_t v92 = *(float64x2_t *)(v79 + 2);
      v79 += 16;
      *v65++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v91, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v92, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v90, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v89, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v88, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v87, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v86, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v85, v50), v46))))), v60);
      v84 -= 16;
    }
    while (v84);
    if (v82 != v83) {
      goto LABEL_50;
    }
LABEL_29:
    LODWORD(v29) = v29 + 1;
    int v59 = v61 + 1;
    unsigned int v54 = v62 + v10;
    unsigned int v55 = v63 + v10;
  }
  while (v29 <= v32);
  if (v29 < v187)
  {
    unint64_t v29 = v61;
    uint64_t v95 = 8 * (v48 + v30);
    uint64_t v96 = 8 * v57;
    v97.i64[0] = 0x101010101010101;
    v97.i64[1] = 0x101010101010101;
    while (1)
    {
      if (v30 + v29 >= v11) {
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
      if ((int)v29 + v186 >= v11) {
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
      uint64_t v98 = (v30 + v29) * v10;
      uint64_t v99 = (v29 + v186) * v10;
      double v100 = *(double *)(8 * v24 + 8 * v98) - *(double *)(8 * v24 + 8 * v99);
      if (v48 < 0x10) {
        break;
      }
      double v102 = (int8x16_t *)((char *)v45 + v49);
      double v103 = &v44[v52];
      float64x2_t v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
      uint64_t v105 = v48 & 0xFFFFFFF0;
      do
      {
        float64x2_t v107 = *(float64x2_t *)(v44 + 12);
        float64x2_t v106 = *(float64x2_t *)(v44 + 14);
        float64x2_t v109 = *(float64x2_t *)(v44 + 8);
        float64x2_t v108 = *(float64x2_t *)(v44 + 10);
        float64x2_t v111 = *(float64x2_t *)(v44 + 4);
        float64x2_t v110 = *(float64x2_t *)(v44 + 6);
        float64x2_t v112 = *(float64x2_t *)v44;
        float64x2_t v113 = *(float64x2_t *)(v44 + 2);
        v44 += 16;
        *v45++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v112, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v113, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v111, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v110, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v109, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v108, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v107, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v106, v50), v46))))), v97);
        v105 -= 16;
      }
      while (v105);
      int v101 = v48 & 0xFFFFFFF0;
      if (v49 != v48) {
        goto LABEL_64;
      }
LABEL_66:
      if (v48 >= v33)
      {
        double v123 = v103;
        int v124 = v48;
        if (v48 >= v25) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v116 = 0;
        uint64_t v117 = 8 * v63;
        uint64_t v118 = v96 + v117;
        uint64_t v119 = 8 * v62;
        uint64_t v120 = v96 + v119;
        uint64_t v121 = v95 + v117;
        uint64_t v122 = v95 + v119;
        double v123 = v103;
        do
        {
          if (v48 + v30 + v116 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          if (v57 + v116 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          v102->i8[v116] = (v103[v116] + a4) * v46 <= *(double *)(v121 + 8 * v116)
                                                    - *(double *)(v118 + 8 * v116)
                                                    - *(double *)(v122 + 8 * v116)
                                                    + *(double *)(v120 + 8 * v116);
          ++v123;
          ++v116;
        }
        while (v48 + v116 < v33);
        int v124 = v48 + v116;
        double v102 = (int8x16_t *)((char *)v102 + v116);
        if ((int)v48 + (int)v116 >= v25)
        {
LABEL_55:
          int v44 = v123;
          unsigned int v45 = v102;
          goto LABEL_56;
        }
      }
      double v125 = *(double *)(8 * v185 + 8 * v98)
           - *(double *)(8 * v184 + 8 * v98)
           - *(double *)(8 * v185 + 8 * v99)
           + *(double *)(8 * v184 + 8 * v99);
      uint64_t v126 = v25 + ~v124;
      if (v126 >= 0xF)
      {
        uint64_t v127 = v126 + 1;
        uint64_t v128 = (v126 + 1) & 0x1FFFFFFF0;
        v124 += v128;
        unsigned int v45 = (int8x16_t *)((char *)v102 + v128);
        int v44 = &v123[v128];
        float64x2_t v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v125, 0);
        uint64_t v130 = v128;
        do
        {
          float64x2_t v132 = *(float64x2_t *)(v123 + 12);
          float64x2_t v131 = *(float64x2_t *)(v123 + 14);
          float64x2_t v134 = *(float64x2_t *)(v123 + 8);
          float64x2_t v133 = *(float64x2_t *)(v123 + 10);
          float64x2_t v136 = *(float64x2_t *)(v123 + 4);
          float64x2_t v135 = *(float64x2_t *)(v123 + 6);
          float64x2_t v137 = *(float64x2_t *)v123;
          float64x2_t v138 = *(float64x2_t *)(v123 + 2);
          v123 += 16;
          *v102++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v137, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v138, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v136, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v135, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v134, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v133, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v132, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v131, v50), v46))))), v97);
          v130 -= 16;
        }
        while (v130);
        if (v127 == v128) {
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v45 = v102;
        int v44 = v123;
      }
      int v139 = v25 - v124;
      do
      {
        double v140 = *v44++;
        v45->i8[0] = (v140 + a4) * v46 <= v125;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v139;
      }
      while (v139);
LABEL_56:
      ++v29;
      v62 += v10;
      v63 += v10;
      if (v29 >= v187) {
        goto LABEL_82;
      }
    }
    int v101 = 0;
    double v102 = v45;
    double v103 = v44;
LABEL_64:
    int v114 = v48 - v101;
    do
    {
      double v115 = *v103++;
      v102->i8[0] = (v115 + a4) * v46 <= v100;
      double v102 = (int8x16_t *)((char *)v102 + 1);
      --v114;
    }
    while (v114);
    goto LABEL_66;
  }
LABEL_82:
  if (v29 < v183)
  {
    float64x2_t v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
    float64x2_t v142 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
    int v143 = v48 + v30;
    uint64_t v144 = 8 * (v48 + v30);
    uint64_t v145 = 8 * v182 + v144;
    uint64_t v146 = v40 + v144;
    uint64_t v147 = 8 * v57;
    uint64_t v148 = 8 * v182 + v147;
    uint64_t v149 = v40 + v147;
    v150.i64[0] = 0x101010101010101;
    v150.i64[1] = 0x101010101010101;
    while (v48 >= 0x10)
    {
      double v152 = (int8x16_t *)((char *)v45 + v49);
      double v153 = &v44[v52];
      uint64_t v154 = v48 & 0xFFFFFFF0;
      do
      {
        float64x2_t v156 = *(float64x2_t *)(v44 + 12);
        float64x2_t v155 = *(float64x2_t *)(v44 + 14);
        float64x2_t v158 = *(float64x2_t *)(v44 + 8);
        float64x2_t v157 = *(float64x2_t *)(v44 + 10);
        float64x2_t v160 = *(float64x2_t *)(v44 + 4);
        float64x2_t v159 = *(float64x2_t *)(v44 + 6);
        float64x2_t v161 = *(float64x2_t *)v44;
        float64x2_t v162 = *(float64x2_t *)(v44 + 2);
        v44 += 16;
        *v45++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v161, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v162, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v160, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v159, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v158, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v157, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v156, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v155, v50), v46))))), v150);
        v154 -= 16;
      }
      while (v154);
      int v151 = v48 & 0xFFFFFFF0;
      if (v49 != v48) {
        goto LABEL_91;
      }
LABEL_93:
      if (v48 >= v33)
      {
        double v166 = v153;
        int v167 = v48;
        if (v48 >= v25) {
          goto LABEL_84;
        }
      }
      else
      {
        uint64_t v165 = 0;
        double v166 = v153;
        do
        {
          if (v143 + (int)v165 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          if (v57 + v165 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          v152->i8[v165] = (v153[v165] + a4) * v46 <= *(double *)(v146 + 8 * v165)
                                                    - *(double *)(v149 + 8 * v165)
                                                    - *(double *)(v145 + 8 * v165)
                                                    + *(double *)(v148 + 8 * v165);
          ++v166;
          ++v165;
        }
        while (v48 + v165 < v33);
        int v167 = v48 + v165;
        double v152 = (int8x16_t *)((char *)v152 + v165);
        if ((int)v48 + (int)v165 >= v25)
        {
LABEL_84:
          int v44 = v166;
          unsigned int v45 = v152;
          goto LABEL_85;
        }
      }
      uint64_t v168 = v25 + ~v167;
      if (v168 >= 0xF)
      {
        uint64_t v169 = v168 + 1;
        v167 += v169 & 0xFFFFFFF0;
        unsigned int v45 = (int8x16_t *)((char *)v152 + (v169 & 0x1FFFFFFF0));
        int v44 = &v166[v169 & 0x1FFFFFFF0];
        uint64_t v170 = v169 & 0x1FFFFFFF0;
        do
        {
          float64x2_t v172 = *(float64x2_t *)(v166 + 12);
          float64x2_t v171 = *(float64x2_t *)(v166 + 14);
          float64x2_t v174 = *(float64x2_t *)(v166 + 8);
          float64x2_t v173 = *(float64x2_t *)(v166 + 10);
          float64x2_t v176 = *(float64x2_t *)(v166 + 4);
          float64x2_t v175 = *(float64x2_t *)(v166 + 6);
          float64x2_t v177 = *(float64x2_t *)v166;
          float64x2_t v178 = *(float64x2_t *)(v166 + 2);
          v166 += 16;
          *v152++ = vandq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v177, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v178, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v176, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v175, v50), v46)))), (int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v174, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v173, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v172, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v171, v50), v46))))), v150);
          v170 -= 16;
        }
        while (v170);
        if (v169 == (v169 & 0x1FFFFFFF0)) {
          goto LABEL_85;
        }
      }
      else
      {
        unsigned int v45 = v152;
        int v44 = v166;
      }
      int v179 = v25 - v167;
      do
      {
        double v180 = *v44++;
        v45->i8[0] = (v180 + a4) * v46 <= v43;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v179;
      }
      while (v179);
LABEL_85:
      LODWORD(v29) = v29 + 1;
      if (v29 == v183) {
        return 0;
      }
    }
    int v151 = 0;
    double v152 = v45;
    double v153 = v44;
LABEL_91:
    int v163 = v48 - v151;
    do
    {
      double v164 = *v153++;
      v152->i8[0] = (v164 + a4) * v46 <= v42;
      double v152 = (int8x16_t *)((char *)v152 + 1);
      --v163;
    }
    while (v163);
    goto LABEL_93;
  }
  return 0;
}

void sub_259064708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906471C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259064730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259064744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259064758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906476C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259064780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259064794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590647A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590647BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590647D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590647E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590647F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AdaptiveThreshold<double,false>(uint64_t a1, unsigned int a2, uint64_t a3, double a4)
{
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (v4 <= a2 || (unsigned int v7 = *(_DWORD *)(a1 + 16), v7 <= a2)) {
    AdaptiveThreshold<double,true>();
  }
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v10 = v9;
  unsigned int v11 = v8;
  if (*(void *)(a3 + 32) < v7 * (unint64_t)v4)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v4;
  if (8 * v8 * (unint64_t)v9) {
    operator new[]();
  }
  double v12 = 0;
  if (v9)
  {
    unsigned int v13 = 0;
    uint64_t v14 = *(void *)(a1 + 8);
    double v15 = 0.0;
    unsigned int v16 = v10;
    do
    {
      double v15 = v15 + *(double *)((char *)v13 + v14);
      *v13++ = v15;
      --v16;
    }
    while (v16);
    if (v11 >= 2)
    {
      unsigned int v17 = v13;
      unsigned int v18 = (double *)((char *)v13 + v14);
      for (int i = 1; i != v11; ++i)
      {
        double v20 = 0.0;
        unsigned int v21 = v10;
        do
        {
          double v22 = *v18++;
          double v20 = v20 + v22;
          double v23 = *v12++;
          *v17++ = v20 + v23;
          --v21;
        }
        while (v21);
      }
    }
  }
  uint64_t v24 = a2 - 1;
  if (v24 >= v11 || v24 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  unsigned int v25 = *(_DWORD *)(a1 + 20);
  uint64_t v185 = v25 - 1;
  if (v185 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v26 = ~a2;
  uint64_t v184 = v25 + ~a2;
  if (v184 >= v10) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v27 = *(_DWORD *)(a1 + 16);
  if (v27 - 1 >= v11) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  int v28 = v27 + v26;
  if (v27 + v26 >= v11) {
    __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
  }
  unsigned int v183 = *(_DWORD *)(a1 + 16);
  LODWORD(v29) = 0;
  unsigned int v30 = a2 >> 1;
  int v31 = a2 & 1;
  unsigned int v32 = (a2 >> 1) + v31 - 1;
  unint64_t v33 = v4 - (a2 >> 1);
  unint64_t v187 = v7 - (a2 >> 1);
  uint64_t v34 = 8 * v24;
  uint64_t v35 = v10 * v24;
  uint64_t v36 = *(uint64_t *)(v34 + 8 * v35);
  uint64_t v37 = 8 * v185;
  uint64_t v38 = 8 * v35;
  uint64_t v39 = 8 * v184;
  uint64_t v40 = 8 * (v27 - 1) * v10;
  double v41 = *(double *)(v37 + 8 * v35) - *(double *)(v39 + 8 * v35);
  uint64_t v182 = v28 * v10;
  double v42 = *(double *)(v34 + v40) - *(double *)(v34 + 8 * v182);
  double v43 = *(double *)(v37 + v40) + *(double *)(v39 + 8 * v182) - *(double *)(v39 + v40) - *(double *)(v37 + 8 * v182);
  int v44 = *(double **)(a1 + 8);
  unsigned int v45 = *(int8x16_t **)(a3 + 8);
  double v46 = (double)(a2 * a2);
  int v186 = ~v32;
  unsigned int v47 = (a2 >> 1) + (a2 & 1);
  if (v47 <= 1) {
    uint64_t v48 = 1;
  }
  else {
    uint64_t v48 = v47;
  }
  uint64_t v49 = v48 & 0xFFFFFFF0;
  float64x2_t v50 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
  float64x2_t v51 = (float64x2_t)vdupq_lane_s64(v36, 0);
  uint64_t v52 = v49;
  float64x2_t v53 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41, 0);
  unsigned int v54 = v10 - v10 * v47;
  unsigned int v55 = v10 + v10 * v30;
  uint64_t v56 = v38 + 8 * (v48 + v30);
  unsigned int v57 = v48 - v30 - v31;
  uint64_t v58 = v38 + 8 * v57;
  int v59 = 1;
  v60.i64[0] = 0x101010101010101;
  v60.i64[1] = 0x101010101010101;
  do
  {
    unsigned int v61 = v59;
    unsigned int v62 = v54;
    unsigned int v63 = v55;
    if (v48 < 0x10)
    {
      int v64 = 0;
      double v65 = v45;
      double v66 = v44;
LABEL_35:
      int v76 = v48 - v64;
      do
      {
        double v77 = *v66++;
        v65->i8[0] = (v77 + a4) * v46 > *(double *)&v36;
        double v65 = (int8x16_t *)((char *)v65 + 1);
        --v76;
      }
      while (v76);
      goto LABEL_37;
    }
    double v65 = (int8x16_t *)((char *)v45 + v49);
    double v66 = &v44[v52];
    uint64_t v67 = v48 & 0xFFFFFFF0;
    do
    {
      float64x2_t v69 = *(float64x2_t *)(v44 + 12);
      float64x2_t v68 = *(float64x2_t *)(v44 + 14);
      float64x2_t v71 = *(float64x2_t *)(v44 + 8);
      float64x2_t v70 = *(float64x2_t *)(v44 + 10);
      float64x2_t v73 = *(float64x2_t *)(v44 + 4);
      float64x2_t v72 = *(float64x2_t *)(v44 + 6);
      float64x2_t v74 = *(float64x2_t *)v44;
      float64x2_t v75 = *(float64x2_t *)(v44 + 2);
      v44 += 16;
      *v45++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v74, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v75, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v73, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v72, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v71, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v70, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v69, v50), v46)), (int32x4_t)vcgeq_f64(v51, vmulq_n_f64(vaddq_f64(v68, v50), v46)))))), v60);
      v67 -= 16;
    }
    while (v67);
    int v64 = v48 & 0xFFFFFFF0;
    if (v49 != v48) {
      goto LABEL_35;
    }
LABEL_37:
    if (v48 >= v33)
    {
      double v79 = v66;
      int v80 = v48;
      if (v48 >= v25) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v78 = 0;
      double v79 = v66;
      do
      {
        if (v48 + v30 + v78 >= v10) {
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        }
        if (v57 + v78 >= v10) {
          __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
        }
        v65->i8[v78] = (v66[v78] + a4) * v46 > *(double *)(v56 + 8 * v78) - *(double *)(v58 + 8 * v78);
        ++v79;
        ++v78;
      }
      while (v48 + v78 < v33);
      int v80 = v48 + v78;
      double v65 = (int8x16_t *)((char *)v65 + v78);
      if ((int)v48 + (int)v78 >= v25)
      {
LABEL_28:
        int v44 = v79;
        unsigned int v45 = v65;
        goto LABEL_29;
      }
    }
    uint64_t v81 = v25 + ~v80;
    if (v81 < 0xF)
    {
      unsigned int v45 = v65;
      int v44 = v79;
LABEL_50:
      int v93 = v25 - v80;
      do
      {
        double v94 = *v44++;
        v45->i8[0] = (v94 + a4) * v46 > v41;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v93;
      }
      while (v93);
      goto LABEL_29;
    }
    uint64_t v82 = v81 + 1;
    uint64_t v83 = (v81 + 1) & 0x1FFFFFFF0;
    v80 += v83;
    unsigned int v45 = (int8x16_t *)((char *)v65 + v83);
    int v44 = &v79[v83];
    uint64_t v84 = v83;
    do
    {
      float64x2_t v86 = *(float64x2_t *)(v79 + 12);
      float64x2_t v85 = *(float64x2_t *)(v79 + 14);
      float64x2_t v88 = *(float64x2_t *)(v79 + 8);
      float64x2_t v87 = *(float64x2_t *)(v79 + 10);
      float64x2_t v90 = *(float64x2_t *)(v79 + 4);
      float64x2_t v89 = *(float64x2_t *)(v79 + 6);
      float64x2_t v91 = *(float64x2_t *)v79;
      float64x2_t v92 = *(float64x2_t *)(v79 + 2);
      v79 += 16;
      *v65++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v91, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v92, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v90, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v89, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v88, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v87, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v86, v50), v46)), (int32x4_t)vcgeq_f64(v53, vmulq_n_f64(vaddq_f64(v85, v50), v46)))))), v60);
      v84 -= 16;
    }
    while (v84);
    if (v82 != v83) {
      goto LABEL_50;
    }
LABEL_29:
    LODWORD(v29) = v29 + 1;
    int v59 = v61 + 1;
    unsigned int v54 = v62 + v10;
    unsigned int v55 = v63 + v10;
  }
  while (v29 <= v32);
  if (v29 < v187)
  {
    unint64_t v29 = v61;
    uint64_t v95 = 8 * (v48 + v30);
    uint64_t v96 = 8 * v57;
    v97.i64[0] = 0x101010101010101;
    v97.i64[1] = 0x101010101010101;
    while (1)
    {
      if (v30 + v29 >= v11) {
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
      if ((int)v29 + v186 >= v11) {
        __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
      }
      uint64_t v98 = (v30 + v29) * v10;
      uint64_t v99 = (v29 + v186) * v10;
      double v100 = *(double *)(8 * v24 + 8 * v98) - *(double *)(8 * v24 + 8 * v99);
      if (v48 < 0x10) {
        break;
      }
      double v102 = (int8x16_t *)((char *)v45 + v49);
      double v103 = &v44[v52];
      float64x2_t v104 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v100, 0);
      uint64_t v105 = v48 & 0xFFFFFFF0;
      do
      {
        float64x2_t v107 = *(float64x2_t *)(v44 + 12);
        float64x2_t v106 = *(float64x2_t *)(v44 + 14);
        float64x2_t v109 = *(float64x2_t *)(v44 + 8);
        float64x2_t v108 = *(float64x2_t *)(v44 + 10);
        float64x2_t v111 = *(float64x2_t *)(v44 + 4);
        float64x2_t v110 = *(float64x2_t *)(v44 + 6);
        float64x2_t v112 = *(float64x2_t *)v44;
        float64x2_t v113 = *(float64x2_t *)(v44 + 2);
        v44 += 16;
        *v45++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v112, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v113, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v111, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v110, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                     v104,
                                                                     vmulq_n_f64(vaddq_f64(v109, v50), v46)),
                                                        (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v108, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v107, v50), v46)), (int32x4_t)vcgeq_f64(v104, vmulq_n_f64(vaddq_f64(v106, v50), v46)))))), v97);
        v105 -= 16;
      }
      while (v105);
      int v101 = v48 & 0xFFFFFFF0;
      if (v49 != v48) {
        goto LABEL_64;
      }
LABEL_66:
      if (v48 >= v33)
      {
        double v123 = v103;
        int v124 = v48;
        if (v48 >= v25) {
          goto LABEL_55;
        }
      }
      else
      {
        uint64_t v116 = 0;
        uint64_t v117 = 8 * v63;
        uint64_t v118 = v96 + v117;
        uint64_t v119 = 8 * v62;
        uint64_t v120 = v96 + v119;
        uint64_t v121 = v95 + v117;
        uint64_t v122 = v95 + v119;
        double v123 = v103;
        do
        {
          if (v48 + v30 + v116 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          if (v57 + v116 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          v102->i8[v116] = (v103[v116] + a4) * v46 > *(double *)(v121 + 8 * v116)
                                                   - *(double *)(v118 + 8 * v116)
                                                   - *(double *)(v122 + 8 * v116)
                                                   + *(double *)(v120 + 8 * v116);
          ++v123;
          ++v116;
        }
        while (v48 + v116 < v33);
        int v124 = v48 + v116;
        double v102 = (int8x16_t *)((char *)v102 + v116);
        if ((int)v48 + (int)v116 >= v25)
        {
LABEL_55:
          int v44 = v123;
          unsigned int v45 = v102;
          goto LABEL_56;
        }
      }
      double v125 = *(double *)(8 * v185 + 8 * v98)
           - *(double *)(8 * v184 + 8 * v98)
           - *(double *)(8 * v185 + 8 * v99)
           + *(double *)(8 * v184 + 8 * v99);
      uint64_t v126 = v25 + ~v124;
      if (v126 >= 0xF)
      {
        uint64_t v127 = v126 + 1;
        uint64_t v128 = (v126 + 1) & 0x1FFFFFFF0;
        v124 += v128;
        unsigned int v45 = (int8x16_t *)((char *)v102 + v128);
        int v44 = &v123[v128];
        float64x2_t v129 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v125, 0);
        uint64_t v130 = v128;
        do
        {
          float64x2_t v132 = *(float64x2_t *)(v123 + 12);
          float64x2_t v131 = *(float64x2_t *)(v123 + 14);
          float64x2_t v134 = *(float64x2_t *)(v123 + 8);
          float64x2_t v133 = *(float64x2_t *)(v123 + 10);
          float64x2_t v136 = *(float64x2_t *)(v123 + 4);
          float64x2_t v135 = *(float64x2_t *)(v123 + 6);
          float64x2_t v137 = *(float64x2_t *)v123;
          float64x2_t v138 = *(float64x2_t *)(v123 + 2);
          v123 += 16;
          *v102++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v137, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v138, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v136, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v135, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                        v129,
                                                                        vmulq_n_f64(vaddq_f64(v134, v50), v46)),
                                                           (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v133, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v132, v50), v46)), (int32x4_t)vcgeq_f64(v129, vmulq_n_f64(vaddq_f64(v131, v50), v46)))))), v97);
          v130 -= 16;
        }
        while (v130);
        if (v127 == v128) {
          goto LABEL_56;
        }
      }
      else
      {
        unsigned int v45 = v102;
        int v44 = v123;
      }
      int v139 = v25 - v124;
      do
      {
        double v140 = *v44++;
        v45->i8[0] = (v140 + a4) * v46 > v125;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v139;
      }
      while (v139);
LABEL_56:
      ++v29;
      v62 += v10;
      v63 += v10;
      if (v29 >= v187) {
        goto LABEL_82;
      }
    }
    int v101 = 0;
    double v102 = v45;
    double v103 = v44;
LABEL_64:
    int v114 = v48 - v101;
    do
    {
      double v115 = *v103++;
      v102->i8[0] = (v115 + a4) * v46 > v100;
      double v102 = (int8x16_t *)((char *)v102 + 1);
      --v114;
    }
    while (v114);
    goto LABEL_66;
  }
LABEL_82:
  if (v29 < v183)
  {
    float64x2_t v141 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42, 0);
    float64x2_t v142 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v43, 0);
    int v143 = v48 + v30;
    uint64_t v144 = 8 * (v48 + v30);
    uint64_t v145 = 8 * v182 + v144;
    uint64_t v146 = v40 + v144;
    uint64_t v147 = 8 * v57;
    uint64_t v148 = 8 * v182 + v147;
    uint64_t v149 = v40 + v147;
    v150.i64[0] = 0x101010101010101;
    v150.i64[1] = 0x101010101010101;
    while (v48 >= 0x10)
    {
      double v152 = (int8x16_t *)((char *)v45 + v49);
      double v153 = &v44[v52];
      uint64_t v154 = v48 & 0xFFFFFFF0;
      do
      {
        float64x2_t v156 = *(float64x2_t *)(v44 + 12);
        float64x2_t v155 = *(float64x2_t *)(v44 + 14);
        float64x2_t v158 = *(float64x2_t *)(v44 + 8);
        float64x2_t v157 = *(float64x2_t *)(v44 + 10);
        float64x2_t v160 = *(float64x2_t *)(v44 + 4);
        float64x2_t v159 = *(float64x2_t *)(v44 + 6);
        float64x2_t v161 = *(float64x2_t *)v44;
        float64x2_t v162 = *(float64x2_t *)(v44 + 2);
        v44 += 16;
        *v45++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v161, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v162, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v160, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v159, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                     v141,
                                                                     vmulq_n_f64(vaddq_f64(v158, v50), v46)),
                                                        (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v157, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v156, v50), v46)), (int32x4_t)vcgeq_f64(v141, vmulq_n_f64(vaddq_f64(v155, v50), v46)))))), v150);
        v154 -= 16;
      }
      while (v154);
      int v151 = v48 & 0xFFFFFFF0;
      if (v49 != v48) {
        goto LABEL_91;
      }
LABEL_93:
      if (v48 >= v33)
      {
        double v166 = v153;
        int v167 = v48;
        if (v48 >= v25) {
          goto LABEL_84;
        }
      }
      else
      {
        uint64_t v165 = 0;
        double v166 = v153;
        do
        {
          if (v143 + (int)v165 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          if (v57 + v165 >= v10) {
            __assert_rtn("operator()", "Matrix.hpp", 126, "row < m_rows && col < m_cols");
          }
          v152->i8[v165] = (v153[v165] + a4) * v46 > *(double *)(v146 + 8 * v165)
                                                   - *(double *)(v149 + 8 * v165)
                                                   - *(double *)(v145 + 8 * v165)
                                                   + *(double *)(v148 + 8 * v165);
          ++v166;
          ++v165;
        }
        while (v48 + v165 < v33);
        int v167 = v48 + v165;
        double v152 = (int8x16_t *)((char *)v152 + v165);
        if ((int)v48 + (int)v165 >= v25)
        {
LABEL_84:
          int v44 = v166;
          unsigned int v45 = v152;
          goto LABEL_85;
        }
      }
      uint64_t v168 = v25 + ~v167;
      if (v168 >= 0xF)
      {
        uint64_t v169 = v168 + 1;
        v167 += v169 & 0xFFFFFFF0;
        unsigned int v45 = (int8x16_t *)((char *)v152 + (v169 & 0x1FFFFFFF0));
        int v44 = &v166[v169 & 0x1FFFFFFF0];
        uint64_t v170 = v169 & 0x1FFFFFFF0;
        do
        {
          float64x2_t v172 = *(float64x2_t *)(v166 + 12);
          float64x2_t v171 = *(float64x2_t *)(v166 + 14);
          float64x2_t v174 = *(float64x2_t *)(v166 + 8);
          float64x2_t v173 = *(float64x2_t *)(v166 + 10);
          float64x2_t v176 = *(float64x2_t *)(v166 + 4);
          float64x2_t v175 = *(float64x2_t *)(v166 + 6);
          float64x2_t v177 = *(float64x2_t *)v166;
          float64x2_t v178 = *(float64x2_t *)(v166 + 2);
          v166 += 16;
          *v152++ = vandq_s8(vuzp1q_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v177, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v178, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v176, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v175, v50), v46))))), vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(
                                                                        v142,
                                                                        vmulq_n_f64(vaddq_f64(v174, v50), v46)),
                                                           (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v173, v50), v46))), (int16x8_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v172, v50), v46)), (int32x4_t)vcgeq_f64(v142, vmulq_n_f64(vaddq_f64(v171, v50), v46)))))), v150);
          v170 -= 16;
        }
        while (v170);
        if (v169 == (v169 & 0x1FFFFFFF0)) {
          goto LABEL_85;
        }
      }
      else
      {
        unsigned int v45 = v152;
        int v44 = v166;
      }
      int v179 = v25 - v167;
      do
      {
        double v180 = *v44++;
        v45->i8[0] = (v180 + a4) * v46 > v43;
        unsigned int v45 = (int8x16_t *)((char *)v45 + 1);
        --v179;
      }
      while (v179);
LABEL_85:
      LODWORD(v29) = v29 + 1;
      if (v29 == v183) {
        return 0;
      }
    }
    int v151 = 0;
    double v152 = v45;
    double v153 = v44;
LABEL_91:
    int v163 = v48 - v151;
    do
    {
      double v164 = *v153++;
      v152->i8[0] = (v164 + a4) * v46 > v42;
      double v152 = (int8x16_t *)((char *)v152 + 1);
      --v163;
    }
    while (v163);
    goto LABEL_93;
  }
  return 0;
}

void sub_25906568C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590656A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590656B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590656C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590656DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590656F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906572C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906577C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259065790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::TraceOuterBoundaries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  uint64_t v133 = 0;
  uint64_t v130 = 0;
  uint64_t v131 = 0;
  float64x2_t v129 = &unk_2707172A0;
  char v132 = 0;
  int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v6 = (*(_DWORD *)(a1 + 20) + 2);
  if (2 * (v5 + 2) * (unint64_t)v6) {
    operator new[]();
  }
  LODWORD(v131) = v5 + 2;
  HIDWORD(v131) = v6;
  size_t v7 = 2 * v6;
  unsigned int v8 = *(char **)(a1 + 8);
  bzero(0, 2 * v6);
  unsigned int v9 = (char *)(2 * v6);
  if (v5)
  {
    unsigned int v10 = 0;
    uint64_t v11 = *(unsigned int *)(a1 + 20);
    do
    {
      *(_WORD *)unsigned int v9 = 0;
      double v12 = v9 + 2;
      memcpy(v12, v8, 2 * v11);
      uint64_t v11 = *(unsigned int *)(a1 + 20);
      unsigned int v13 = &v12[2 * v11];
      v8 += 2 * v11;
      *(_WORD *)unsigned int v13 = 0;
      unsigned int v9 = v13 + 2;
      ++v10;
    }
    while (v10 < *(_DWORD *)(a1 + 16));
  }
  bzero(v9, v7);
  uint64_t v14 = HIDWORD(v131);
  unsigned int v15 = *(_DWORD *)(a1 + 20);
  int v108 = *(_DWORD *)(a1 + 16);
  v149[1] = 1;
  v149[2] = HIDWORD(v131);
  v149[3] = -1;
  v148[1] = 1;
  v148[2] = v15;
  v148[3] = -1;
  int32x2_t v16 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(HIDWORD(v131)));
  v149[0] = v16.i32[0];
  int32x2_t v141 = v16;
  int v142 = 1;
  int v143 = HIDWORD(v131) + 1;
  int v144 = HIDWORD(v131);
  int v145 = HIDWORD(v131) - 1;
  int v146 = -1;
  int v147 = ~HIDWORD(v131);
  int32x2_t v17 = vsub_s32((int32x2_t)0x100000000, vdup_n_s32(v15));
  v148[0] = v17.i32[0];
  int32x2_t v134 = v17;
  int v135 = 1;
  unsigned int v136 = v15 + 1;
  unsigned int v137 = v15;
  unsigned int v138 = v15 - 1;
  unsigned int v107 = v15;
  int v139 = -1;
  int v140 = ~v15;
  if (a2 == 4)
  {
    uint64_t v121 = (int32x2_t *)v148;
    uint64_t v122 = &unk_25911FA70;
    unsigned int v19 = (int32x2_t *)v149;
    uint64_t v18 = a3;
    int v20 = v108 * v15;
    if ((int)(v108 * v15) < 1) {
      goto LABEL_108;
    }
  }
  else
  {
    uint64_t v18 = a3;
    if (a2 != 8) {
      goto LABEL_108;
    }
    uint64_t v121 = &v134;
    uint64_t v122 = &unk_25911FA80;
    unsigned int v19 = &v141;
    int v20 = v108 * v15;
    if ((int)(v108 * v15) < 1) {
      goto LABEL_108;
    }
  }
  unsigned int v21 = *(uint16x8_t **)(a1 + 8);
  unint64_t v22 = (unint64_t)v21 + 2 * v20;
  if (v22 <= (unint64_t)v21->u64 + 2) {
    unint64_t v22 = (unint64_t)v21->u64 + 2;
  }
  unint64_t v23 = v22 + ~(unint64_t)v21;
  if (v23 >= 0x1E)
  {
    uint64_t v26 = (v23 >> 1) + 1;
    unsigned int v25 = (unsigned __int16 *)v21 + (v26 & 0xFFFFFFFFFFFFFFF0);
    int v27 = v21 + 1;
    uint16x8_t v28 = 0uLL;
    unint64_t v29 = v26 & 0xFFFFFFFFFFFFFFF0;
    uint16x8_t v30 = 0uLL;
    do
    {
      uint16x8_t v28 = vmaxq_u16(v27[-1], v28);
      uint16x8_t v30 = vmaxq_u16(*v27, v30);
      v27 += 2;
      v29 -= 16;
    }
    while (v29);
    unsigned __int16 v24 = vmaxvq_u16(vmaxq_u16(v28, v30));
    if (v26 == (v26 & 0xFFFFFFFFFFFFFFF0)) {
      goto LABEL_22;
    }
  }
  else
  {
    unsigned __int16 v24 = 0;
    unsigned int v25 = *(unsigned __int16 **)(a1 + 8);
  }
  unint64_t v31 = (unint64_t)v21 + 2 * v20;
  do
  {
    unsigned int v33 = *v25++;
    unsigned __int16 v32 = v33;
    if (v33 > v24) {
      unsigned __int16 v24 = v32;
    }
  }
  while ((unint64_t)v25 < v31);
LABEL_22:
  if (v24)
  {
    std::string __p = 0;
    uint64_t v127 = 0;
    uint64_t v128 = 0;
    unint64_t v34 = v24;
    uint64_t v35 = *(void *)(v18 + 8);
    unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((v35 - *(void *)v18) >> 3);
    if (v34 <= v36)
    {
      if (v34 < v36)
      {
        uint64_t v37 = *(void *)v18 + 24 * v34;
        if (v35 != v37)
        {
          uint64_t v38 = *(void *)(v18 + 8);
          do
          {
            uint64_t v40 = *(void **)(v38 - 24);
            v38 -= 24;
            uint64_t v39 = v40;
            if (v40)
            {
              *(void *)(v35 - 16) = v39;
              operator delete(v39);
            }
            uint64_t v35 = v38;
          }
          while (v38 != v37);
        }
        *(void *)(v18 + 8) = v37;
      }
    }
    else
    {
      std::vector<ImageUtils::Blob>::__append((char **)v18, v34 - v36, (uint64_t)&__p);
    }
    if (v108 && v107)
    {
      unsigned int v41 = a2;
      int v42 = 0;
      int v43 = 0;
      char v44 = a2 - 1;
      uint64_t v45 = v130 + 2 * v14;
      do
      {
        int v109 = v42;
        int v46 = v43;
        v43 += v107;
        int v115 = v43;
        do
        {
          uint64_t v47 = v45;
          int v49 = *(unsigned __int16 *)(v45 + 2);
          v45 += 2;
          int v48 = v49;
          if (v49)
          {
            unint64_t v50 = (v48 - 1);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v18 + 8) - *(void *)v18) >> 3) <= v50) {
              std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
            }
            uint64_t v51 = *(void *)v18 + 24 * v50;
            uint64_t v52 = *(char **)(v51 + 8);
            if (v52 == *(char **)v51)
            {
              LOBYTE(v53) = 0;
              unsigned int v54 = 0;
              int v55 = 255;
              int v56 = v46;
              uint64_t v57 = 1;
              for (int i = 0; ; int i = 0)
              {
                while (1)
                {
                  uint64_t v59 = v53;
                  uint64_t v60 = v57 + v19->i32[v53];
                  if (*(unsigned __int16 *)(v47 + 2 * v60) == v48) {
                    break;
                  }
                  LOBYTE(v53) = (v53 + 1) & v44;
                  if (++i >= v41)
                  {
                    if (v54) {
                      goto LABEL_38;
                    }
                    unint64_t v83 = *(void *)(v51 + 16);
                    if ((unint64_t)v52 < v83)
                    {
                      *(_DWORD *)uint64_t v52 = v56;
                      *(void *)(v51 + 8) = v52 + 4;
                      goto LABEL_38;
                    }
                    uint64_t v84 = *(char **)v51;
                    uint64_t v85 = (uint64_t)&v52[-*(void *)v51];
                    uint64_t v86 = v85 >> 2;
                    unint64_t v87 = (v85 >> 2) + 1;
                    if (v87 >> 62) {
LABEL_115:
                    }
                      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
                    uint64_t v88 = v83 - (void)v84;
                    if (v88 >> 1 > v87) {
                      unint64_t v87 = v88 >> 1;
                    }
                    if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                      unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                    }
                    else {
                      unint64_t v89 = v87;
                    }
                    uint64_t v125 = v45;
                    if (v89)
                    {
                      uint64_t v118 = v52;
                      if (v89 >> 62) {
LABEL_116:
                      }
                        std::__throw_bad_array_new_length[abi:ne180100]();
                      int v90 = v56;
                      uint64_t v91 = v51;
                      unint64_t v92 = v89;
                      int v93 = operator new(4 * v89);
                      uint64_t v51 = v91;
                      uint64_t v52 = v118;
                      unint64_t v89 = v92;
                      uint64_t v86 = v85 >> 2;
                      double v94 = &v93[4 * (v85 >> 2)];
                      *double v94 = v90;
                      uint64_t v95 = (uint64_t)(v94 + 1);
                      if (v118 == v84)
                      {
LABEL_103:
                        *(void *)uint64_t v51 = v94;
                        *(void *)(v51 + 8) = v95;
                        *(void *)(v51 + 16) = &v93[4 * v89];
                        if (v84)
                        {
                          uint64_t v104 = v51;
                          operator delete(v84);
                          uint64_t v51 = v104;
                        }
                        uint64_t v18 = a3;
                        int v43 = v115;
                        uint64_t v45 = v125;
                        *(void *)(v51 + 8) = v95;
                        goto LABEL_38;
                      }
                    }
                    else
                    {
                      int v93 = 0;
                      double v94 = (_DWORD *)(4 * v86);
                      *(_DWORD *)(4 * v86) = v56;
                      uint64_t v95 = 4 * v86 + 4;
                      if (v52 == v84) {
                        goto LABEL_103;
                      }
                    }
                    if ((unint64_t)(v85 - 4) >= 0x2C)
                    {
                      if ((unint64_t)(v52 - v93 - v85) >= 0x20)
                      {
                        unint64_t v97 = ((unint64_t)(v85 - 4) >> 2) + 1;
                        uint64_t v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
                        uint64_t v96 = &v52[-v98];
                        double v94 = (_DWORD *)((char *)v94 - v98);
                        uint64_t v99 = &v93[4 * v86 - 16];
                        double v100 = v52 - 16;
                        uint64_t v101 = v97 & 0x7FFFFFFFFFFFFFF8;
                        do
                        {
                          long long v102 = *(_OWORD *)v100;
                          *(v99 - 1) = *((_OWORD *)v100 - 1);
                          _OWORD *v99 = v102;
                          v99 -= 2;
                          v100 -= 32;
                          v101 -= 8;
                        }
                        while (v101);
                        if (v97 == (v97 & 0x7FFFFFFFFFFFFFF8)) {
                          goto LABEL_103;
                        }
                      }
                      else
                      {
                        uint64_t v96 = v52;
                      }
                    }
                    else
                    {
                      uint64_t v96 = v52;
                    }
                    do
                    {
                      int v103 = *((_DWORD *)v96 - 1);
                      v96 -= 4;
                      *--double v94 = v103;
                    }
                    while (v96 != v84);
                    goto LABEL_103;
                  }
                }
                int v53 = v122[v53];
                if (v57 == 1)
                {
                  ++v54;
                  if (v53 == v55 || v54 > 3) {
                    break;
                  }
                  int v55 = v122[v59];
                }
                unint64_t v62 = *(void *)(v51 + 16);
                if ((unint64_t)v52 < v62)
                {
                  *(_DWORD *)uint64_t v52 = v56;
                  uint64_t v63 = (uint64_t)(v52 + 4);
                  goto LABEL_71;
                }
                int v64 = *(char **)v51;
                uint64_t v65 = (uint64_t)&v52[-*(void *)v51];
                uint64_t v66 = v65 >> 2;
                unint64_t v67 = (v65 >> 2) + 1;
                if (v67 >> 62) {
                  goto LABEL_115;
                }
                uint64_t v68 = v62 - (void)v64;
                if (v68 >> 1 > v67) {
                  unint64_t v67 = v68 >> 1;
                }
                if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v67;
                }
                uint64_t v123 = v51;
                uint64_t v124 = v45;
                int v119 = v55;
                unsigned int v120 = v54;
                if (v69)
                {
                  float64x2_t v111 = &v52[-*(void *)v51];
                  uint64_t v112 = v65 >> 2;
                  uint64_t v116 = v52;
                  int v113 = v56;
                  if (v69 >> 62) {
                    goto LABEL_116;
                  }
                  unint64_t v110 = v69;
                  float64x2_t v70 = operator new(4 * v69);
                  uint64_t v51 = v123;
                  int v56 = v113;
                  uint64_t v52 = v116;
                  unint64_t v69 = v110;
                  uint64_t v65 = (uint64_t)v111;
                  uint64_t v66 = v112;
                  float64x2_t v71 = &v70[4 * v112];
                  _DWORD *v71 = v113;
                  uint64_t v63 = (uint64_t)(v71 + 1);
                  if (v116 == v64) {
                    goto LABEL_68;
                  }
                }
                else
                {
                  float64x2_t v70 = 0;
                  float64x2_t v71 = (_DWORD *)(4 * v66);
                  *(_DWORD *)(4 * v66) = v56;
                  uint64_t v63 = 4 * v66 + 4;
                  if (v52 == v64) {
                    goto LABEL_68;
                  }
                }
                unint64_t v72 = v52 - 4 - v64;
                if (v72 >= 0xBC)
                {
                  if (&v70[v65 - 4 - (v72 & 0xFFFFFFFFFFFFFFFCLL)] > &v70[v65 - 4])
                  {
                    float64x2_t v73 = v52;
                  }
                  else if (&v52[-(v72 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v52 - 4)
                  {
                    float64x2_t v73 = v52;
                  }
                  else if ((unint64_t)(v52 - v70 - v65) >= 0x20)
                  {
                    uint64_t v77 = (v72 >> 2) + 1;
                    uint64_t v78 = 4 * (v77 & 0x7FFFFFFFFFFFFFF8);
                    float64x2_t v73 = &v52[-v78];
                    float64x2_t v71 = (_DWORD *)((char *)v71 - v78);
                    double v79 = &v70[4 * v66 - 16];
                    int v80 = v52 - 16;
                    uint64_t v81 = v77 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      long long v82 = *(_OWORD *)v80;
                      *(v79 - 1) = *((_OWORD *)v80 - 1);
                      *double v79 = v82;
                      v79 -= 2;
                      v80 -= 32;
                      v81 -= 8;
                    }
                    while (v81);
                    if (v77 == (v77 & 0x7FFFFFFFFFFFFFF8)) {
                      goto LABEL_68;
                    }
                  }
                  else
                  {
                    float64x2_t v73 = v52;
                  }
                }
                else
                {
                  float64x2_t v73 = v52;
                }
                do
                {
                  int v74 = *((_DWORD *)v73 - 1);
                  v73 -= 4;
                  *--float64x2_t v71 = v74;
                }
                while (v73 != v64);
LABEL_68:
                *(void *)uint64_t v51 = v71;
                *(void *)(v51 + 8) = v63;
                *(void *)(v51 + 16) = &v70[4 * v69];
                if (v64)
                {
                  float64x2_t v75 = v64;
                  int v76 = v56;
                  uint64_t v117 = v63;
                  operator delete(v75);
                  uint64_t v63 = v117;
                  int v56 = v76;
                  uint64_t v51 = v123;
                }
                uint64_t v18 = a3;
                int v43 = v115;
                uint64_t v45 = v124;
                int v55 = v119;
                unsigned int v54 = v120;
LABEL_71:
                *(void *)(v51 + 8) = v63;
                v56 += v121->i32[v59];
                uint64_t v52 = (char *)v63;
                uint64_t v57 = v60;
              }
            }
          }
LABEL_38:
          ++v46;
        }
        while (v46 != v43);
        uint64_t v45 = v47 + 6;
        int v42 = v109 + 1;
      }
      while (v109 + 1 != v108);
    }
    if (__p)
    {
      uint64_t v127 = __p;
      operator delete(__p);
    }
  }
LABEL_108:
  float64x2_t v129 = &unk_2707172A0;
  uint64_t result = v130;
  if (v130) {
    BOOL v106 = v132 == 0;
  }
  else {
    BOOL v106 = 1;
  }
  if (!v106) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259066008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,char a28)
{
  if (__p) {
    operator delete(__p);
  }
  Matrix<unsigned short>::~Matrix((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::ErodeRect2x2(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < v4 * (unint64_t)v3)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  if (v6 < 3 || v5 <= 2) {
    ImageUtils::ErodeRect2x2();
  }
  unsigned int v8 = *(unsigned char **)(a1 + 8);
  unsigned int v9 = *(unsigned char **)(a2 + 8);
  memset(v9, 1, v6 * v5);
  if (!*v8) {
    unsigned char *v9 = 0;
  }
  unsigned int v10 = v9 + 1;
  uint64_t v11 = v6 - 2;
  uint64_t v12 = v11 + 2;
  unsigned int v13 = v8 + 1;
  unsigned int v14 = v6 - 1;
  unsigned int v15 = v6 - 1;
  do
  {
    if (!*v13++) {
      *(_WORD *)(v10 - 1) = 0;
    }
    ++v10;
    --v15;
  }
  while (v15);
  int32x2_t v17 = &v8[v12];
  uint64_t v18 = -(uint64_t)*(unsigned int *)(a1 + 20);
  uint64_t v19 = (uint64_t)&v8[2 * v11 + 5];
  uint64_t v20 = (uint64_t)&v8[v11 + 3];
  LODWORD(result) = 1;
  do
  {
    unint64_t v23 = v10;
    unsigned __int16 v24 = (unsigned __int8 *)v19;
    if (!*v17)
    {
      *unsigned int v10 = 0;
      v10[v18] = 0;
    }
    uint64_t v25 = 0;
    uint64_t v26 = &v10[-*(unsigned int *)(a1 + 20)];
    do
    {
      if (!*(unsigned char *)(v20 + v25))
      {
        *(_WORD *)&v23[v25] = 0;
        *(_WORD *)&v26[v25] = 0;
      }
      ++v25;
    }
    while (v14 != v25);
    v17 += v12;
    v19 += v12;
    v20 += v12;
    unsigned int v10 = &v23[v25 + 1];
    BOOL v22 = result == v5 - 2;
    uint64_t result = (result + 1);
  }
  while (!v22);
  if (!*v17)
  {
    v23[v25 + 1] = 0;
    v23[v25 - *(unsigned int *)(a1 + 20) + 1] = 0;
  }
  uint64_t v27 = 0;
  uint16x8_t v28 = &v23[-*(unsigned int *)(a1 + 20)];
  do
  {
    if (!*v24++)
    {
      uint16x8_t v30 = &v23[v27 + v25];
      v30[1] = 0;
      v30[2] = 0;
      unint64_t v31 = &v28[v27 + v25];
      v31[1] = 0;
      v31[2] = 0;
    }
    ++v27;
  }
  while (v14 != v27);
  return result;
}

unsigned char *ErodeOrDilateRect3x3<false>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < v4 * (unint64_t)v3)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = v6 - 3;
  if (v6 < 3 || v5 <= 2) {
    ErodeOrDilateRect3x3<false>();
  }
  unsigned int v9 = *(unsigned char **)(a1 + 8);
  unsigned int v10 = *(_WORD **)(a2 + 8);
  memset(v10, 1, v6 * v5);
  if (!*v9)
  {
    *unsigned int v10 = 0;
    *(_WORD *)((char *)v10 + *(unsigned int *)(a1 + 20)) = 0;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v7 + 2;
  unsigned int v13 = v6 - 2;
  unsigned int v14 = (char *)v10 + *(unsigned int *)(a1 + 20);
  do
  {
    if (!v9[v11 + 1])
    {
      unsigned int v15 = (char *)v10 + v11;
      *(_WORD *)unsigned int v15 = 0;
      v15[2] = 0;
      int32x2_t v16 = &v14[v11];
      *(_WORD *)int32x2_t v16 = 0;
      v16[2] = 0;
    }
    ++v11;
  }
  while (v13 != v11);
  int32x2_t v17 = &v9[v12];
  uint64_t v18 = (_WORD *)((char *)v10 + v11);
  uint64_t v19 = (char *)v18 + 1;
  if (!v9[v12])
  {
    _WORD *v18 = 0;
    *(_WORD *)((char *)v18 + *(unsigned int *)(a1 + 20)) = 0;
  }
  uint64_t v20 = v18 + 1;
  uint64_t result = v17 + 1;
  uint64_t v22 = *(unsigned int *)(a1 + 20);
  uint64_t v23 = v7 + 3;
  uint64_t v24 = (uint64_t)&v9[v7 + 4];
  int v25 = 1;
  do
  {
    unint64_t v29 = v19;
    if (!*result)
    {
      *uint64_t v20 = 0;
      v19[2] = 0;
      *(_WORD *)&v20[-v22] = 0;
      *(_WORD *)&v20[v22] = 0;
    }
    uint64_t v30 = 0;
    uint64_t v31 = *(unsigned int *)(a1 + 20);
    unsigned __int16 v32 = &v29[-v31 + 1];
    unsigned int v33 = &v29[v31 + 1];
    do
    {
      if (!*(unsigned char *)(v24 + v30))
      {
        unint64_t v34 = &v29[v30];
        v34[1] = 0;
        *((_WORD *)v34 + 1) = 0;
        uint64_t v35 = &v32[v30];
        *(_WORD *)uint64_t v35 = 0;
        v35[2] = 0;
        unint64_t v36 = &v33[v30];
        *(_WORD *)unint64_t v36 = 0;
        void v36[2] = 0;
      }
      ++v30;
    }
    while (v13 != v30);
    uint64_t v26 = &v29[v30];
    if (!v17[v23])
    {
      *(_WORD *)(v26 + 1) = 0;
      *(_WORD *)&v29[1 - v22 + v30] = 0;
      *(_WORD *)&v29[v22 + 1 + v30] = 0;
    }
    uint64_t v27 = &v17[v12];
    uint64_t v19 = v26 + 2;
    uint64_t v20 = v26 + 3;
    uint64_t result = &v17[v12 + 2];
    v24 += v23;
    v17 += v23;
  }
  while (v25++ != v5 - 2);
  uint64_t v37 = &v29[v30];
  uint64_t v38 = &v29[v30 + 3];
  if (!*result)
  {
    *uint64_t v38 = 0;
    v37[4] = 0;
    *(_WORD *)&v37[-*(unsigned int *)(a1 + 20) + 3] = 0;
  }
  uint64_t v39 = v27 + 3;
  uint64_t v40 = -(uint64_t)*(unsigned int *)(a1 + 20);
  do
  {
    if (!*v39)
    {
      *(_WORD *)uint64_t v38 = 0;
      v38[2] = 0;
      unsigned int v41 = &v38[v40];
      *(_WORD *)unsigned int v41 = 0;
      v41[2] = 0;
    }
    ++v39;
    ++v38;
    --v13;
  }
  while (v13);
  if (!result[v12])
  {
    *(_WORD *)uint64_t v38 = 0;
    *(_WORD *)&v38[-*(unsigned int *)(a1 + 20)] = 0;
  }
  return result;
}

void ErodeOrDilateRect2x2<true>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < v4 * (unint64_t)v3)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  unsigned int v6 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = v5 - 2;
  if (v5 < 2 || v6 <= 1) {
    ErodeOrDilateRect2x2<true>();
  }
  unsigned int v9 = v5 - 1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(char **)(a2 + 8);
  bzero(v11, v5 * v6);
  int v12 = 0;
  uint64_t v13 = *(unsigned int *)(a1 + 20);
  uint64_t v14 = v7 + 1;
  do
  {
    uint64_t v16 = 0;
    int32x2_t v17 = v11;
    uint64_t v18 = &v11[*(unsigned int *)(a1 + 20)];
    do
    {
      if (*(unsigned char *)(v10 + v16))
      {
        *(_WORD *)&v11[v16] = 257;
        *(_WORD *)&v18[v16] = 257;
      }
      ++v16;
    }
    while (v9 != v16);
    if (*(unsigned char *)(v10 + v14))
    {
      uint64_t v19 = &v11[v16];
      *uint64_t v19 = 1;
      v19[v13] = 1;
    }
    v10 += v7 + 2;
    v11 += v16 + 1;
  }
  while (v12++ != v6 - 2);
  uint64_t v20 = 0;
  do
  {
    if (*(unsigned char *)(v10 + v20))
    {
      unsigned int v21 = &v17[v20 + v16];
      v21[1] = 1;
      v21[2] = 1;
    }
    ++v20;
  }
  while (v9 != v20);
  if (*(unsigned char *)(v10 + v14)) {
    v17[v20 + 1 + v16] = 1;
  }
}

uint64_t ErodeOrDilateRect3x3<true>(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(_DWORD *)(a1 + 16);
  unsigned int v4 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < v4 * (unint64_t)v3)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v4;
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = v6 - 3;
  if (v6 < 3 || v5 <= 2) {
    ErodeOrDilateRect3x3<false>();
  }
  unsigned int v9 = *(unsigned char **)(a1 + 8);
  uint64_t v10 = *(_WORD **)(a2 + 8);
  bzero(v10, v6 * v5);
  if (*v9)
  {
    *uint64_t v10 = 257;
    *(_WORD *)((char *)v10 + *(unsigned int *)(a1 + 20)) = 257;
  }
  uint64_t v11 = 0;
  uint64_t v12 = v7 + 2;
  unsigned int v13 = v6 - 2;
  uint64_t v14 = (char *)v10 + *(unsigned int *)(a1 + 20);
  do
  {
    if (v9[v11 + 1])
    {
      unsigned int v15 = (char *)v10 + v11;
      unsigned char *v15 = 1;
      v15[1] = 1;
      v15[2] = 1;
      uint64_t v16 = &v14[v11];
      *(_WORD *)uint64_t v16 = 257;
      v16[2] = 1;
    }
    ++v11;
  }
  while (v13 != v11);
  int32x2_t v17 = &v9[v12];
  uint64_t v18 = (char *)v10 + v11;
  uint64_t v19 = v18 + 1;
  if (v9[v12])
  {
    v18[1] = 1;
    unsigned char *v18 = 1;
    uint64_t v20 = &v18[*(unsigned int *)(a1 + 20)];
    v20[1] = 1;
    *uint64_t v20 = 1;
  }
  unsigned int v21 = v18 + 2;
  uint64_t v22 = v17 + 1;
  uint64_t v23 = *(unsigned int *)(a1 + 20);
  uint64_t v24 = v7 + 3;
  uint64_t v25 = (uint64_t)&v9[v7 + 4];
  uint64_t result = 1;
  int v27 = 1;
  do
  {
    uint64_t v30 = v19;
    if (*v22)
    {
      *unsigned int v21 = 1;
      v19[2] = 1;
      *(_WORD *)&v21[-v23] = 257;
      *(_WORD *)&v21[v23] = 257;
    }
    uint64_t v31 = 0;
    uint64_t v32 = *(unsigned int *)(a1 + 20);
    unsigned int v33 = &v30[-v32 + 1];
    unint64_t v34 = &v30[v32 + 1];
    do
    {
      if (*(unsigned char *)(v25 + v31))
      {
        uint64_t v35 = &v30[v31];
        v35[1] = 1;
        v35[2] = 1;
        v35[3] = 1;
        unint64_t v36 = &v33[v31];
        *(_WORD *)unint64_t v36 = 257;
        void v36[2] = 1;
        uint64_t v37 = &v34[v31];
        *(_WORD *)uint64_t v37 = 257;
        v37[2] = 1;
      }
      ++v31;
    }
    while (v13 != v31);
    uint64_t v38 = &v30[v31];
    if (v17[v24])
    {
      *(_WORD *)(v38 + 1) = 257;
      *(_WORD *)&v30[1 - v23 + v31] = 257;
      *(_WORD *)&v30[v23 + 1 + v31] = 257;
    }
    uint16x8_t v28 = &v17[v12];
    uint64_t v19 = v38 + 2;
    unsigned int v21 = v38 + 3;
    uint64_t v22 = &v17[v12 + 2];
    v25 += v24;
    v17 += v24;
  }
  while (v27++ != v5 - 2);
  uint64_t v39 = &v30[v31];
  uint64_t v40 = &v30[v31 + 3];
  if (*v22)
  {
    *uint64_t v40 = 1;
    v39[4] = 1;
    *(_WORD *)&v39[-*(unsigned int *)(a1 + 20) + 3] = 257;
  }
  unsigned int v41 = v28 + 3;
  uint64_t v42 = -(uint64_t)*(unsigned int *)(a1 + 20);
  do
  {
    if (*v41)
    {
      *(_WORD *)uint64_t v40 = 257;
      v40[2] = 1;
      int v43 = &v40[v42];
      *(_WORD *)int v43 = 257;
      v43[2] = 1;
    }
    ++v41;
    ++v40;
    --v13;
  }
  while (v13);
  if (v22[v12])
  {
    *(_WORD *)uint64_t v40 = 257;
    *(_WORD *)&v40[-*(unsigned int *)(a1 + 20)] = 257;
  }
  return result;
}

uint64_t ImageUtils::CloseRect2x2(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unsigned int v5 = &unk_270717270;
  char v8 = 0;
  ErodeOrDilateRect2x2<true>(a1, (uint64_t)&v5);
  ImageUtils::ErodeRect2x2((uint64_t)&v5, a2);
  unsigned int v5 = &unk_270717270;
  uint64_t result = v6;
  if (v6) {
    BOOL v4 = v8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259066A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<BOOL>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::CloseRect3x3(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  unsigned int v5 = &unk_270717270;
  char v8 = 0;
  ErodeOrDilateRect3x3<true>(a1, (uint64_t)&v5);
  ErodeOrDilateRect3x3<false>((uint64_t)&v5, a2);
  unsigned int v5 = &unk_270717270;
  uint64_t result = v6;
  if (v6) {
    BOOL v4 = v8 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259066AF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<BOOL>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<double>(a1, 1, a2, a3, a3);
}

uint64_t Scale<double>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = vcvtpd_u64_f64((double)v8 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)*(int *)(a1 + 20) * a5);
  uint64_t v63 = &unk_2707171D8;
  if (v8 * v5) {
    operator new[]();
  }
  uint64_t v64 = 0;
  int v65 = v8;
  int v66 = v5;
  char v67 = 0;
  unint64_t v68 = 8 * v8 * (unint64_t)v5;
  if (*(void *)(a3 + 32) < 8 * v9 * (unint64_t)v5)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v5;
  BOOL v10 = a5 < 1.0;
  if ((v10 & a2) != 0) {
    double v11 = 4.0 / a5;
  }
  else {
    double v11 = 4.0;
  }
  if ((v10 & a2) != 0) {
    double v12 = a5;
  }
  else {
    double v12 = 1.0;
  }
  unsigned int v13 = vcvtpd_u64_f64(v11);
  BOOL v14 = a4 < 1.0;
  if ((v14 & a2) != 0) {
    double v15 = 4.0 / a4;
  }
  else {
    double v15 = 4.0;
  }
  if ((v14 & a2) != 0) {
    double v16 = a4;
  }
  else {
    double v16 = 1.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v15);
  if (v17 <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v57 = &unk_2707171D8;
  if (v18 != -4) {
    operator new[]();
  }
  int v59 = 1;
  int v60 = 0;
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = &unk_270717208;
  uint64_t v58 = 0;
  if (v5)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v56 = 0;
      CalculateWeightsForScale<double>((char *)&v57, v13, (signed int *)&v56 + 1, &v56, v11, ((double)v19++ + 0.5) / a5 + -0.5, v12);
    }
    while (v19 != v5);
  }
  if (v9)
  {
    unsigned int v20 = 0;
    unsigned int v21 = *(double **)(a3 + 8);
    uint64_t v22 = 8 * v5;
    do
    {
      uint64_t v56 = 0;
      CalculateWeightsForScale<double>((char *)&v57, v17, (signed int *)&v56 + 1, &v56, v15, ((double)v20 + 0.5) / a4 + -0.5, v16);
      if ((int)v56 >= v8) {
        int v23 = v8 - 1;
      }
      else {
        int v23 = v56;
      }
      if ((int)v56 >= v8) {
        int v24 = v56 - v8 + 1;
      }
      else {
        int v24 = 0;
      }
      if (v5)
      {
        uint64_t v25 = &v21[v5];
        uint64_t v26 = (double *)(v64 + 8 * (HIDWORD(v56) & ~(SHIDWORD(v56) >> 31)) * v5);
        unint64_t v27 = v64 + 8 * (v23 * v5);
        unsigned int v28 = (SHIDWORD(v56) >> 31) & -HIDWORD(v56);
        if (v28)
        {
          do
          {
            unsigned int v39 = 0;
            uint64_t v40 = v58;
            double v41 = *v26;
            double v42 = 0.0;
            do
            {
              double v43 = *v40++;
              double v42 = v42 + v43 * v41;
              ++v39;
            }
            while (v39 < v28);
            char v44 = v26;
            if ((unint64_t)v26 < v27)
            {
              do
              {
                double v45 = *v40++;
                double v42 = v42 + v45 * *v44;
                char v44 = (double *)((char *)v44 + v22);
              }
              while ((unint64_t)v44 < v27);
              double v41 = *v44;
            }
            double v46 = v42 + *v40 * v41;
            if (v24)
            {
              uint64_t v47 = v40 + 1;
              int v48 = v24;
              do
              {
                double v49 = *v47++;
                double v46 = v46 + v49 * v41;
                --v48;
              }
              while (v48);
            }
            *v21++ = v46;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
        else if (v24)
        {
          do
          {
            unint64_t v29 = v58;
            double v30 = 0.0;
            for (int i = v26; (unint64_t)i < v27; int i = (double *)((char *)i + v22))
            {
              double v32 = *v29++;
              double v30 = v30 + v32 * *i;
            }
            double v34 = *v29;
            unsigned int v33 = v29 + 1;
            double v35 = *i;
            double v36 = v30 + v34 * *i;
            int v37 = v24;
            do
            {
              double v38 = *v33++;
              double v36 = v36 + v38 * v35;
              --v37;
            }
            while (v37);
            *v21++ = v36;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
        else
        {
          do
          {
            unint64_t v50 = v58;
            double v51 = 0.0;
            for (uint64_t j = v26; (unint64_t)j < v27; uint64_t j = (double *)((char *)j + v22))
            {
              double v53 = *v50++;
              double v51 = v51 + v53 * *j;
            }
            *v21++ = v51 + *v50 * *j;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
      }
      ++v20;
    }
    while (v20 != v9);
  }
  uint64_t v57 = &unk_2707171D8;
  if (v58 && v61) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v63 = &unk_2707171D8;
  uint64_t result = v64;
  if (v64 && v67) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_2590671BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590671D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590671E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<unsigned short>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<unsigned short>(a1, 1, a2, a3, a3);
}

uint64_t Scale<unsigned short>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = vcvtpd_u64_f64((double)v8 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)*(int *)(a1 + 20) * a5);
  uint64_t v63 = &unk_2707171D8;
  if (v8 * v5) {
    operator new[]();
  }
  uint64_t v64 = 0;
  int v65 = v8;
  int v66 = v5;
  char v67 = 0;
  unint64_t v68 = 8 * v8 * (unint64_t)v5;
  if (*(void *)(a3 + 32) < 8 * v9 * (unint64_t)v5)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v5;
  BOOL v10 = a5 < 1.0;
  if ((v10 & a2) != 0) {
    double v11 = 4.0 / a5;
  }
  else {
    double v11 = 4.0;
  }
  if ((v10 & a2) != 0) {
    double v12 = a5;
  }
  else {
    double v12 = 1.0;
  }
  unsigned int v13 = vcvtpd_u64_f64(v11);
  BOOL v14 = a4 < 1.0;
  if ((v14 & a2) != 0) {
    double v15 = 4.0 / a4;
  }
  else {
    double v15 = 4.0;
  }
  if ((v14 & a2) != 0) {
    double v16 = a4;
  }
  else {
    double v16 = 1.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v15);
  if (v17 <= v13) {
    unsigned int v18 = v13;
  }
  else {
    unsigned int v18 = v17;
  }
  uint64_t v57 = &unk_2707171D8;
  if (v18 != -4) {
    operator new[]();
  }
  int v59 = 1;
  int v60 = 0;
  char v61 = 0;
  uint64_t v62 = 0;
  uint64_t v57 = &unk_270717208;
  uint64_t v58 = 0;
  if (v5)
  {
    uint64_t v19 = 0;
    do
    {
      uint64_t v56 = 0;
      CalculateWeightsForScale<double>((char *)&v57, v13, (signed int *)&v56 + 1, &v56, v11, ((double)v19++ + 0.5) / a5 + -0.5, v12);
    }
    while (v19 != v5);
  }
  if (v9)
  {
    unsigned int v20 = 0;
    unsigned int v21 = *(double **)(a3 + 8);
    uint64_t v22 = 8 * v5;
    do
    {
      uint64_t v56 = 0;
      CalculateWeightsForScale<double>((char *)&v57, v17, (signed int *)&v56 + 1, &v56, v15, ((double)v20 + 0.5) / a4 + -0.5, v16);
      if ((int)v56 >= v8) {
        int v23 = v8 - 1;
      }
      else {
        int v23 = v56;
      }
      if ((int)v56 >= v8) {
        int v24 = v56 - v8 + 1;
      }
      else {
        int v24 = 0;
      }
      if (v5)
      {
        uint64_t v25 = &v21[v5];
        uint64_t v26 = (double *)(v64 + 8 * (HIDWORD(v56) & ~(SHIDWORD(v56) >> 31)) * v5);
        unint64_t v27 = v64 + 8 * (v23 * v5);
        unsigned int v28 = (SHIDWORD(v56) >> 31) & -HIDWORD(v56);
        if (v28)
        {
          do
          {
            unsigned int v39 = 0;
            uint64_t v40 = v58;
            double v41 = *v26;
            double v42 = 0.0;
            do
            {
              double v43 = *v40++;
              double v42 = v42 + v43 * v41;
              ++v39;
            }
            while (v39 < v28);
            char v44 = v26;
            if ((unint64_t)v26 < v27)
            {
              do
              {
                double v45 = *v40++;
                double v42 = v42 + v45 * *v44;
                char v44 = (double *)((char *)v44 + v22);
              }
              while ((unint64_t)v44 < v27);
              double v41 = *v44;
            }
            double v46 = v42 + *v40 * v41;
            if (v24)
            {
              uint64_t v47 = v40 + 1;
              int v48 = v24;
              do
              {
                double v49 = *v47++;
                double v46 = v46 + v49 * v41;
                --v48;
              }
              while (v48);
            }
            *v21++ = v46;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
        else if (v24)
        {
          do
          {
            unint64_t v29 = v58;
            double v30 = 0.0;
            for (int i = v26; (unint64_t)i < v27; int i = (double *)((char *)i + v22))
            {
              double v32 = *v29++;
              double v30 = v30 + v32 * *i;
            }
            double v34 = *v29;
            unsigned int v33 = v29 + 1;
            double v35 = *i;
            double v36 = v30 + v34 * *i;
            int v37 = v24;
            do
            {
              double v38 = *v33++;
              double v36 = v36 + v38 * v35;
              --v37;
            }
            while (v37);
            *v21++ = v36;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
        else
        {
          do
          {
            unint64_t v50 = v58;
            double v51 = 0.0;
            for (uint64_t j = v26; (unint64_t)j < v27; uint64_t j = (double *)((char *)j + v22))
            {
              double v53 = *v50++;
              double v51 = v51 + v53 * *j;
            }
            *v21++ = v51 + *v50 * *j;
            ++v26;
            v27 += 8;
          }
          while (v21 < v25);
        }
      }
      ++v20;
    }
    while (v20 != v9);
  }
  uint64_t v57 = &unk_2707171D8;
  if (v58 && v61) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v63 = &unk_2707171D8;
  uint64_t result = v64;
  if (v64 && v67) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_2590678A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590678BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2590678D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<unsigned char>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<unsigned char>(a1, 1, a2, a3, a3);
}

uint64_t Scale<unsigned char>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v8 = *(_DWORD *)(a1 + 16);
  int v9 = *(_DWORD *)(a1 + 20);
  unsigned int v10 = vcvtpd_u64_f64((double)v8 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)v9 * a5);
  uint64_t v64 = &unk_2707171D8;
  if (v8 * v5) {
    operator new[]();
  }
  uint64_t v65 = 0;
  int v66 = v8;
  int v67 = v5;
  char v68 = 0;
  unint64_t v69 = 8 * v8 * (unint64_t)v5;
  if (*(void *)(a3 + 32) < 8 * v10 * (unint64_t)v5)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v5;
  BOOL v11 = a5 < 1.0;
  if ((v11 & a2) != 0) {
    double v12 = 4.0 / a5;
  }
  else {
    double v12 = 4.0;
  }
  if ((v11 & a2) != 0) {
    double v13 = a5;
  }
  else {
    double v13 = 1.0;
  }
  unsigned int v14 = vcvtpd_u64_f64(v12);
  BOOL v15 = a4 < 1.0;
  if ((v15 & a2) != 0) {
    double v16 = 4.0 / a4;
  }
  else {
    double v16 = 4.0;
  }
  if ((v15 & a2) != 0) {
    double v17 = a4;
  }
  else {
    double v17 = 1.0;
  }
  unsigned int v18 = vcvtpd_u64_f64(v16);
  if (v18 <= v14) {
    unsigned int v19 = v14;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v58 = &unk_2707171D8;
  if (v19 != -4) {
    operator new[]();
  }
  int v60 = 1;
  int v61 = 0;
  char v62 = 0;
  uint64_t v63 = 0;
  uint64_t v58 = &unk_270717208;
  int v59 = 0;
  if (v5)
  {
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v57 = 0;
      CalculateWeightsForScale<double>((char *)&v58, v14, (signed int *)&v57 + 1, &v57, v12, ((double)i + 0.5) / a5 + -0.5, v13);
      if (v57 < 0)
      {
        HIDWORD(v57) = 0;
        if ((int)v57 < v9) {
          continue;
        }
      }
      else if ((int)v57 < v9)
      {
        continue;
      }
      LODWORD(v57) = v9 - 1;
    }
  }
  if (v10)
  {
    unsigned int v21 = 0;
    uint64_t v22 = *(double **)(a3 + 8);
    uint64_t v23 = 8 * v5;
    do
    {
      uint64_t v57 = 0;
      CalculateWeightsForScale<double>((char *)&v58, v18, (signed int *)&v57 + 1, &v57, v16, ((double)v21 + 0.5) / a4 + -0.5, v17);
      if ((int)v57 >= v8) {
        int v24 = v8 - 1;
      }
      else {
        int v24 = v57;
      }
      if ((int)v57 >= v8) {
        int v25 = v57 - v8 + 1;
      }
      else {
        int v25 = 0;
      }
      if (v5)
      {
        uint64_t v26 = &v22[v5];
        unint64_t v27 = (double *)(v65 + 8 * (HIDWORD(v57) & ~(SHIDWORD(v57) >> 31)) * v5);
        unint64_t v28 = v65 + 8 * (v24 * v5);
        unsigned int v29 = (SHIDWORD(v57) >> 31) & -HIDWORD(v57);
        if (v29)
        {
          do
          {
            unsigned int v40 = 0;
            double v41 = v59;
            double v42 = *v27;
            double v43 = 0.0;
            do
            {
              double v44 = *v41++;
              double v43 = v43 + v44 * v42;
              ++v40;
            }
            while (v40 < v29);
            double v45 = v27;
            if ((unint64_t)v27 < v28)
            {
              do
              {
                double v46 = *v41++;
                double v43 = v43 + v46 * *v45;
                double v45 = (double *)((char *)v45 + v23);
              }
              while ((unint64_t)v45 < v28);
              double v42 = *v45;
            }
            double v47 = v43 + *v41 * v42;
            if (v25)
            {
              int v48 = v41 + 1;
              int v49 = v25;
              do
              {
                double v50 = *v48++;
                double v47 = v47 + v50 * v42;
                --v49;
              }
              while (v49);
            }
            *v22++ = v47;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
        else if (v25)
        {
          do
          {
            double v30 = v59;
            double v31 = 0.0;
            for (uint64_t j = v27; (unint64_t)j < v28; uint64_t j = (double *)((char *)j + v23))
            {
              double v33 = *v30++;
              double v31 = v31 + v33 * *j;
            }
            double v35 = *v30;
            double v34 = v30 + 1;
            double v36 = *j;
            double v37 = v31 + v35 * *j;
            int v38 = v25;
            do
            {
              double v39 = *v34++;
              double v37 = v37 + v39 * v36;
              --v38;
            }
            while (v38);
            *v22++ = v37;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
        else
        {
          do
          {
            double v51 = v59;
            double v52 = 0.0;
            for (uint64_t k = v27; (unint64_t)k < v28; uint64_t k = (double *)((char *)k + v23))
            {
              double v54 = *v51++;
              double v52 = v52 + v54 * *k;
            }
            *v22++ = v52 + *v51 * *k;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
      }
      ++v21;
    }
    while (v21 != v10);
  }
  uint64_t v58 = &unk_2707171D8;
  if (v59 && v62) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v64 = &unk_2707171D8;
  uint64_t result = v65;
  if (v65 && v68) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259067FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259068010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259068024(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<BOOL>(uint64_t a1, uint64_t a2, double a3)
{
  return Scale<BOOL>(a1, 1, a2, a3, a3);
}

uint64_t Scale<BOOL>(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = vcvtpd_u64_f64((double)v8 * a4);
  LODWORD(v5) = vcvtpd_u64_f64((double)*(int *)(a1 + 20) * a5);
  uint64_t v65 = &unk_2707171D8;
  if (v8 * v5) {
    operator new[]();
  }
  uint64_t v66 = 0;
  int v67 = v8;
  int v68 = v5;
  char v69 = 0;
  unint64_t v70 = 8 * v8 * (unint64_t)v5;
  if (*(void *)(a3 + 32) < 8 * v9 * (unint64_t)v5)
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  int v57 = v8;
  *(_DWORD *)(a3 + 16) = v9;
  *(_DWORD *)(a3 + 20) = v5;
  BOOL v10 = a5 < 1.0;
  if ((v10 & a2) != 0) {
    double v11 = 4.0 / a5;
  }
  else {
    double v11 = 4.0;
  }
  if ((v10 & a2) != 0) {
    double v12 = a5;
  }
  else {
    double v12 = 1.0;
  }
  unsigned int v13 = vcvtpd_u64_f64(v11);
  BOOL v14 = a4 < 1.0;
  if ((v14 & a2) != 0) {
    double v15 = 4.0 / a4;
  }
  else {
    double v15 = 4.0;
  }
  if ((v14 & a2) != 0) {
    double v16 = a4;
  }
  else {
    double v16 = 1.0;
  }
  unsigned int v17 = vcvtpd_u64_f64(v15);
  int v18 = v13;
  int v56 = v17;
  if (v17 <= v13) {
    unsigned int v17 = v13;
  }
  int v59 = &unk_2707171D8;
  if (v17 != -4) {
    operator new[]();
  }
  int v61 = 1;
  int v62 = 0;
  char v63 = 0;
  uint64_t v64 = 0;
  int v59 = &unk_270717208;
  int v60 = 0;
  if (v5)
  {
    uint64_t v20 = 0;
    do
    {
      uint64_t v58 = 0;
      CalculateWeightsForScale<double>((char *)&v59, v18, (signed int *)&v58 + 1, &v58, v11, ((double)v20++ + 0.5) / a5 + -0.5, v12);
    }
    while (v20 != v5);
  }
  if (v9)
  {
    if (v5)
    {
      unsigned int v21 = 0;
      uint64_t v22 = *(double **)(a3 + 8);
      uint64_t v23 = 8 * v5;
      do
      {
        uint64_t v58 = 0;
        CalculateWeightsForScale<double>((char *)&v59, v56, (signed int *)&v58 + 1, &v58, v15, ((double)v21 + 0.5) / a4 + -0.5, v16);
        if ((int)v58 >= v57) {
          int v24 = v57 - 1;
        }
        else {
          int v24 = v58;
        }
        if ((int)v58 >= v57) {
          int v25 = v58 - v57 + 1;
        }
        else {
          int v25 = 0;
        }
        uint64_t v26 = &v22[v5];
        unint64_t v27 = (double *)(v66 + 8 * (HIDWORD(v58) & ~(SHIDWORD(v58) >> 31)) * v5);
        unint64_t v28 = v66 + 8 * (v24 * v5);
        if (v58 < 0)
        {
          unsigned int v43 = -HIDWORD(v58);
          do
          {
            unsigned int v44 = 0;
            double v45 = v60;
            double v46 = *v27;
            double v47 = 0.0;
            do
            {
              double v48 = *v45++;
              double v47 = v47 + v48 * v46;
              ++v44;
            }
            while (v44 < v43);
            int v49 = v27;
            if ((unint64_t)v27 < v28)
            {
              do
              {
                double v50 = *v45++;
                double v47 = v47 + v50 * *v49;
                int v49 = (double *)((char *)v49 + v23);
              }
              while ((unint64_t)v49 < v28);
              double v46 = *v49;
            }
            double v51 = v47 + *v45 * v46;
            if (v25)
            {
              double v52 = v45 + 1;
              int v53 = v25;
              do
              {
                double v54 = *v52++;
                double v51 = v51 + v54 * v46;
                --v53;
              }
              while (v53);
            }
            *v22++ = v51;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
        else if (v25)
        {
          do
          {
            unsigned int v29 = v60;
            double v30 = 0.0;
            for (uint64_t i = v27; (unint64_t)i < v28; uint64_t i = (double *)((char *)i + v23))
            {
              double v32 = *v29++;
              double v30 = v30 + v32 * *i;
            }
            double v34 = *v29;
            double v33 = v29 + 1;
            double v35 = *i;
            double v36 = v30 + v34 * *i;
            int v37 = v25;
            do
            {
              double v38 = *v33++;
              double v36 = v36 + v38 * v35;
              --v37;
            }
            while (v37);
            *v22++ = v36;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
        else
        {
          do
          {
            double v39 = v60;
            double v40 = 0.0;
            for (uint64_t j = v27; (unint64_t)j < v28; uint64_t j = (double *)((char *)j + v23))
            {
              double v42 = *v39++;
              double v40 = v40 + v42 * *j;
            }
            *v22++ = v40 + *v39 * *j;
            ++v27;
            v28 += 8;
          }
          while (v22 < v26);
        }
        ++v21;
      }
      while (v21 != v9);
    }
    else
    {
      do
      {
        uint64_t v58 = 0;
        CalculateWeightsForScale<double>((char *)&v59, v56, (signed int *)&v58 + 1, &v58, v15, ((double)v5 + 0.5) / a4 + -0.5, v16);
        LODWORD(v5) = v5 + 1;
      }
      while (v9 != v5);
    }
  }
  int v59 = &unk_2707171D8;
  if (v60 && v63) {
    MEMORY[0x25A2D62A0]();
  }
  uint64_t v65 = &unk_2707171D8;
  uint64_t result = v66;
  if (v66 && v69) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259068EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259068ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259068EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va1, a8);
  va_start(va, a8);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ImageUtils::Scale<double>(uint64_t a1, double a2, double a3, uint64_t a4, uint64_t a5)
{
  return Scale<double>(a1, 1, a5, a2, a3);
}

double ImageUtils::Gradient<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  unint64_t v6 = 8 * v5 * (unint64_t)v4;
  if (*(void *)(a2 + 32) < v6)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  uint64_t v7 = *(double **)(a3 + 8);
  if (*(void *)(a3 + 32) < v6)
  {
    if (v7 && *(unsigned char *)(a3 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  int v8 = *(double **)(a1 + 8);
  uint64_t v9 = *(double **)(a2 + 8);
  BOOL v10 = v8 + 1;
  double *v9 = v8[1] - *v8;
  uint64_t v11 = (float64x2_t *)(v9 + 1);
  double *v7 = v8[v4] - *v8;
  uint64_t v12 = (float64x2_t *)(v7 + 1);
  uint64_t v13 = (v4 - 1);
  if (v13 < 2)
  {
    double v16 = v7 + 1;
    unsigned int v17 = (double *)v11;
    int v18 = v8 + 1;
    goto LABEL_56;
  }
  uint64_t v14 = (v4 - 3);
  if (v14 >= 0xF)
  {
    uint64_t v19 = 8 * v14 + 16;
    uint64_t v20 = (float64x2_t *)((char *)v9 + v19);
    unsigned int v21 = (float64x2_t *)((char *)v7 + v19);
    unint64_t v22 = (unint64_t)&v8[v14 + 3];
    uint64_t v23 = &v8[v4];
    int v24 = v23 + 1;
    unint64_t v25 = (unint64_t)v23 + v19;
    BOOL v27 = (unint64_t)v11 < v22 && v8 < (double *)v20;
    BOOL v29 = (unint64_t)v11 < v25 && v24 < (double *)v20;
    BOOL v31 = (unint64_t)v12 < v22 && v8 < (double *)v21;
    BOOL v33 = (unint64_t)v12 < v25 && v24 < (double *)v21;
    BOOL v34 = v12 >= v20 || v11 >= v21;
    int v15 = 1;
    if (v34 && !v27 && !v29 && !v31 && !v33)
    {
      uint64_t v35 = v14 + 1;
      uint64_t v36 = (v14 + 1) & 0x1FFFFFFFELL;
      int v18 = &v10[v36];
      unsigned int v17 = &v11->f64[v36];
      double v16 = &v12->f64[v36];
      int v15 = v35 | 1;
      v8 += v36;
      __asm { FMOV            V0.2D, #0.5 }
      uint64_t v41 = v36;
      double v42 = v10;
      do
      {
        *v11++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v42 + 1), *(float64x2_t *)(v42 - 1)), _Q0);
        float64x2_t v43 = *(float64x2_t *)&v42[v4];
        float64x2_t v44 = *(float64x2_t *)v42;
        v42 += 2;
        *v12++ = vsubq_f64(v43, v44);
        v41 -= 2;
      }
      while (v41);
      if (v35 == v36)
      {
        int v8 = &v10[v36 - 1];
        goto LABEL_56;
      }
      v10 += v36;
      uint64_t v11 = (float64x2_t *)v17;
      uint64_t v12 = (float64x2_t *)v16;
    }
  }
  else
  {
    int v15 = 1;
  }
  uint64_t v45 = 0;
  int v46 = ~v15 + v4;
  do
  {
    double v47 = v8[2];
    double v48 = *v8;
    int v8 = &v10[v45];
    v11->f64[v45] = (v47 - v48) * 0.5;
    v12->f64[v45] = v10[v4 + v45] - v10[v45];
    ++v45;
    --v46;
  }
  while (v46);
  int v18 = &v10[v45];
  int v8 = &v10[v45 - 1];
  unsigned int v17 = &v11->f64[v45];
  double v16 = &v12->f64[v45];
LABEL_56:
  double *v17 = *v18 - *v8;
  int v49 = v17 + 1;
  *double v16 = v18[v4] - *v18;
  double v50 = (float64x2_t *)(v16 + 1);
  double v51 = v18 + 1;
  if (v5 - 1 < 2)
  {
    f64 = v16 + 1;
    int v60 = v17 + 1;
    int v59 = v18 + 1;
    goto LABEL_176;
  }
  if (v13 > 1)
  {
    uint64_t v52 = (v4 - 3);
    uint64_t v53 = 8 * v52 + 24;
    uint64_t v54 = v53 - 8 * v4;
    uint64_t v55 = (v52 + 1) & 0x1FFFFFFFELL;
    uint64_t v56 = v55;
    uint64_t v175 = 8 * v55 - 8;
    int v57 = 1;
    __asm { FMOV            V1.2D, #0.5 }
    int v59 = v18 + 1;
    int v60 = v17 + 1;
    f64 = v16 + 1;
    while (1)
    {
      uint64_t v66 = v18 + 2;
      *int v60 = v18[2] - *v59;
      double *f64 = (v59[v4] - v59[-v4]) * 0.5;
      int v67 = (float64x2_t *)(v17 + 2);
      int v68 = (float64x2_t *)(v16 + 2);
      if (v52 < 0xD)
      {
        int v69 = 1;
        goto LABEL_115;
      }
      uint64_t v70 = v13;
      float64x2_t v71 = (float64x2_t *)((char *)v17 + v53);
      unint64_t v72 = (float64x2_t *)((char *)v16 + v53);
      float64x2_t v73 = (char *)v18 + 16 - 8 * v4;
      int v74 = (float64x2_t *)((char *)v18 + v54);
      float64x2_t v75 = &v18[v4 + 2];
      int v76 = &v18[v52 + 3 + v4];
      uint64_t v77 = v18 + 1;
      uint64_t v78 = &v18[v52 + 4];
      BOOL v79 = v67 >= (float64x2_t *)((char *)v18 + v54) || v73 >= (char *)v71;
      BOOL v80 = !v79;
      BOOL v81 = v67 >= (float64x2_t *)v76 || v75 >= (double *)v71;
      BOOL v82 = !v81;
      BOOL v83 = v67 >= (float64x2_t *)v78 || v77 >= (double *)v71;
      BOOL v84 = !v83;
      BOOL v85 = v68 >= v74 || v73 >= (char *)v72;
      BOOL v86 = !v85;
      BOOL v87 = v68 >= (float64x2_t *)v76 || v75 >= (double *)v72;
      BOOL v88 = !v87;
      BOOL v89 = v68 >= (float64x2_t *)v78 || v77 >= (double *)v72;
      BOOL v90 = !v89;
      BOOL v91 = v68 >= v71 || v67 >= v72;
      int v69 = 1;
      if (!v91 || v80 || v82 || v84 || v86 || v88 || v90) {
        break;
      }
      double v16 = &v68->f64[v56];
      unsigned int v17 = &v67->f64[v56];
      int v18 = &v66[v56];
      unint64_t v92 = v68;
      int v93 = v67;
      uint64_t v94 = (v52 + 1) & 0x1FFFFFFFELL;
      uint64_t v95 = v66;
      do
      {
        *v93++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v95 + 1), *(float64x2_t *)(v95 - 1)), _Q1);
        *v92++ = vmulq_f64(vsubq_f64(*(float64x2_t *)&v95[v4], *(float64x2_t *)&v95[-v4]), _Q1);
        v95 += 2;
        v94 -= 2;
      }
      while (v94);
      uint64_t v13 = v70;
      if (v52 + 1 != v55)
      {
        int v69 = (v4 - 2) | 1;
        int v68 = (float64x2_t *)((char *)v68 + v56 * 8);
        int v67 = (float64x2_t *)((char *)v67 + v56 * 8);
        uint64_t v66 = (double *)((char *)v66 + v56 * 8);
        goto LABEL_115;
      }
      uint64_t v62 = (uint64_t)v68 + v175;
      uint64_t v63 = (uint64_t)v67 + v175;
      uint64_t v64 = (double *)((char *)v66 + v175);
LABEL_60:
      *double v16 = (v18[v4] - v18[-v4]) * 0.5;
      double v65 = *v64;
      int v59 = v64 + 2;
      double *v17 = *v18 - v65;
      ++v57;
      f64 = (double *)(v62 + 16);
      int v60 = (double *)(v63 + 16);
      if (v57 == v5 - 1) {
        goto LABEL_176;
      }
    }
    uint64_t v13 = v70;
LABEL_115:
    uint64_t v96 = 0;
    int v97 = v13 - v69;
    do
    {
      v67->f64[v96] = (v66[v96 + 1] - v66[v96 - 1]) * 0.5;
      v68->f64[v96] = (v66[v4 + v96] - v66[v96 - v4]) * 0.5;
      ++v96;
      --v97;
    }
    while (v97);
    double v16 = &v68->f64[v96];
    uint64_t v62 = (uint64_t)v68 + v96 * 8 - 8;
    unsigned int v17 = &v67->f64[v96];
    uint64_t v63 = (uint64_t)v67 + v96 * 8 - 8;
    int v18 = &v66[v96];
    uint64_t v64 = v18 - 1;
    goto LABEL_60;
  }
  uint64_t v98 = v5 - 3;
  if (v98 < 0xB)
  {
    int v99 = 1;
LABEL_172:
    int v59 = v18 + 1;
    int v60 = v17 + 1;
    f64 = v16 + 1;
LABEL_173:
    uint64_t v130 = 0;
    unsigned int v131 = ~v99 + v5;
    char v132 = v16;
    uint64_t v133 = v17;
    int32x2_t v134 = v18;
    do
    {
      *int v60 = v18[v130 + 2] - *v59;
      double v135 = v59[v4];
      double v136 = v59[-v4];
      int v59 = v134 + 3;
      v134 += 2;
      double *f64 = (v135 - v136) * 0.5;
      int v60 = v133 + 3;
      v133 += 2;
      unsigned int v137 = &v17[v130];
      f64 = v132 + 3;
      v132 += 2;
      v16[v130 + 2] = (v18[v4 + 2 + v130] - v18[v130 + 2 - v4]) * 0.5;
      double v139 = v18[v130 + 1];
      double v138 = v18[v130 + 2];
      v130 += 2;
      v137[2] = v138 - v139;
      --v131;
    }
    while (v131);
    f64 = &v16[v130 + 1];
    int v60 = &v17[v130 + 1];
    int v18 = (double *)((char *)v18 + v130 * 8);
    int v59 = v18 + 1;
    goto LABEL_176;
  }
  uint64_t v100 = 16 * v98 + 24;
  uint64_t v101 = (float64x2_t *)((char *)v17 + v100);
  long long v102 = (double *)((char *)v16 + v100);
  int v103 = (float64x2_t *)((char *)v18 + v100);
  uint64_t v104 = 8 * v4;
  unint64_t v105 = (unint64_t)&v18[-v4 + 1];
  BOOL v106 = (float64x2_t *)((char *)v18 + v100 - 8 * v4);
  unsigned int v107 = &v18[v4];
  int v108 = v107 + 1;
  unint64_t v109 = (unint64_t)v107 + v100;
  BOOL v111 = v49 < (double *)v103 && v51 < (const double *)v101;
  BOOL v113 = v49 < (double *)v106 && v105 < (unint64_t)v101;
  BOOL v115 = (unint64_t)v49 < v109 && v108 < (double *)v101;
  BOOL v117 = v50 < v103 && v51 < v102;
  BOOL v119 = v50 < v106 && v105 < (unint64_t)v102;
  BOOL v121 = (unint64_t)v50 < v109 && v108 < v102;
  BOOL v122 = v50 >= v101 || v49 >= v102;
  int v99 = 1;
  if (!v122 || v111 || v113 || v115 || v117 || v119 || v121) {
    goto LABEL_172;
  }
  uint64_t v123 = v98 + 1;
  uint64_t v124 = (v98 + 1) & 0x1FFFFFFFELL;
  int v59 = (double *)&v51[2 * v124];
  int v60 = &v49[2 * v124];
  f64 = v50[v124].f64;
  int v99 = v123 | 1;
  v16 += 2 * v124;
  v17 += 2 * v124;
  v18 += 2 * v124;
  __asm { FMOV            V0.2D, #0.5 }
  uint64_t v126 = v124;
  do
  {
    uint64_t v127 = v51;
    float64x2x2_t v176 = vld2q_f64(v127);
    uint64_t v128 = (float64x2_t *)&v127[v104 / 0xFFFFFFFFFFFFFFF8];
    v176.val[0] = vsubq_f64(v176.val[1], v176.val[0]);
    float64x2_t v129 = vmulq_f64(vsubq_f64(*(float64x2_t *)&v51[(unint64_t)v104 / 8 + 2], v128[1]), _Q0);
    *double v50 = vmulq_f64(vsubq_f64(*(float64x2_t *)&v51[v4], *v128), _Q0);
    v50[1] = v129;
    v50 += 2;
    float64x2x2_t v177 = vld2q_f64(v51);
    v51 += 4;
    v176.val[1] = vsubq_f64(v177.val[1], v177.val[0]);
    vst2q_f64(v49, v176);
    v49 += 4;
    v126 -= 2;
  }
  while (v126);
  if (v123 != v124) {
    goto LABEL_173;
  }
LABEL_176:
  *int v60 = v18[2] - *v59;
  int v140 = (float64x2_t *)(v60 + 1);
  double *f64 = *v59 - v59[-v4];
  int32x2_t v141 = (float64x2_t *)(f64 + 1);
  int v142 = v59 + 1;
  if (v13 < 2)
  {
    int v145 = f64 + 1;
    int v146 = v60 + 1;
    int v147 = v59 + 1;
  }
  else
  {
    uint64_t v143 = (v4 - 3);
    if (v143 >= 0xF)
    {
      uint64_t v148 = 8 * v143 + 16;
      uint64_t v149 = (float64x2_t *)((char *)v60 + v148);
      uint64_t v150 = (float64x2_t *)((char *)f64 + v148);
      unint64_t v151 = (unint64_t)&v59[-v4 + 1];
      double v152 = (float64x2_t *)((char *)v59 + v148 - 8 * v4);
      unint64_t v153 = (unint64_t)&v59[v143 + 3];
      BOOL v155 = v140 < v152 && v151 < (unint64_t)v149;
      BOOL v157 = (unint64_t)v140 < v153 && v59 < (double *)v149;
      BOOL v159 = v141 < v152 && v151 < (unint64_t)v150;
      BOOL v161 = (unint64_t)v141 < v153 && v59 < (double *)v150;
      BOOL v162 = v141 >= v149 || v140 >= v150;
      int v144 = 1;
      if (v162 && !v155 && !v157 && !v159 && !v161)
      {
        uint64_t v163 = v143 + 1;
        uint64_t v164 = (v143 + 1) & 0x1FFFFFFFELL;
        int v147 = &v142[v164];
        int v146 = &v140->f64[v164];
        int v145 = &v141->f64[v164];
        int v144 = v163 | 1;
        v59 += v164;
        __asm { FMOV            V0.2D, #0.5 }
        uint64_t v166 = v164;
        int v167 = v142;
        do
        {
          *v140++ = vmulq_f64(vsubq_f64(*(float64x2_t *)(v167 + 1), *(float64x2_t *)(v167 - 1)), _Q0);
          float64x2_t v168 = *(float64x2_t *)&v167[-v4];
          float64x2_t v169 = *(float64x2_t *)v167;
          v167 += 2;
          *v141++ = vsubq_f64(v169, v168);
          v166 -= 2;
        }
        while (v166);
        if (v163 == v164)
        {
          int v59 = &v142[v164 - 1];
          goto LABEL_221;
        }
        v142 += v164;
        int v140 = (float64x2_t *)v146;
        int32x2_t v141 = (float64x2_t *)v145;
      }
    }
    else
    {
      int v144 = 1;
    }
    uint64_t v170 = 0;
    int v171 = ~v144 + v4;
    do
    {
      double v172 = v59[2];
      double v173 = *v59;
      int v59 = &v142[v170];
      v140->f64[v170] = (v172 - v173) * 0.5;
      v141->f64[v170] = v142[v170] - v142[v170 - v4];
      ++v170;
      --v171;
    }
    while (v171);
    int v147 = &v142[v170];
    int v59 = &v142[v170 - 1];
    int v146 = &v140->f64[v170];
    int v145 = &v141->f64[v170];
  }
LABEL_221:
  *int v146 = *v147 - *v59;
  double result = *v147 - v147[-v4];
  double *v145 = result;
  return result;
}

int8x16_t *ImageUtils::Fliplr<double>(int8x16_t *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v4 = result[1].u32[0];
  uint64_t v3 = result[1].u32[1];
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v3)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v3;
  if (v4) {
    BOOL v5 = v3 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5)
  {
    unint64_t v6 = *(int8x16_t **)(a2 + 8);
    if (v3 > 5)
    {
      uint64_t v9 = 8 * (v3 - 1);
      uint64_t v10 = v9 + 8;
      uint64_t v11 = 8 * v3;
      uint64_t v12 = 8 * v3 - 8;
      uint64_t v13 = v12 - v9;
      uint64_t v14 = 8 * (v3 & 0xFFFFFFFC);
      if ((v3 & 0xFFFFFFFC) == v3)
      {
        unsigned int v15 = 0;
        uint64_t v16 = 0;
        uint64_t v17 = v11 - 16;
        do
        {
          double result = (int8x16_t *)(8 * v15);
          uint64_t v18 = v2->i64[1];
          uint64_t v19 = v18 + 8 * (v3 * v16);
          unint64_t v20 = v19 + 8 * v3;
          unint64_t v21 = v19 + v13;
          if ((unint64_t)v6 >= v20 || v21 >= (unint64_t)v6->u64 + v10)
          {
            uint64_t v23 = (int8x16_t *)((char *)v6 + v14);
            int v24 = v6 + 1;
            double result = (int8x16_t *)((char *)result + v18 + v17);
            uint64_t v25 = v3 & 0xFFFFFFFC;
            do
            {
              int8x16_t v26 = vextq_s8(result[-1], result[-1], 8uLL);
              v24[-1] = vextq_s8(*result, *result, 8uLL);
              int8x16_t *v24 = v26;
              v24 += 2;
              result -= 2;
              v25 -= 4;
            }
            while (v25);
            unint64_t v6 = v23;
          }
          else
          {
            BOOL v27 = (uint64_t *)((char *)result->i64 + v18 + v12);
            LODWORD(result) = v3;
            do
            {
              uint64_t v28 = *v27--;
              v6->i64[0] = v28;
              unint64_t v6 = (int8x16_t *)((char *)v6 + 8);
              double result = (int8x16_t *)(result - 1);
            }
            while (result);
          }
          ++v16;
          v15 += v3;
        }
        while (v16 != v4);
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v30 = 0;
        uint64_t v31 = v11 - 16;
        do
        {
          uint64_t v32 = v2->i64[1];
          uint64_t v33 = v32 + 8 * (v3 * v30);
          unint64_t v34 = v33 + 8 * v3;
          unint64_t v35 = v33 + v13;
          if ((unint64_t)v6 >= v34 || v35 >= (unint64_t)v6->u64 + v10)
          {
            int v37 = (int8x16_t *)((char *)v6 + v14);
            v34 -= v14;
            double v38 = (int8x16_t *)(v32 + v31 + 8 * v29);
            double v39 = v6 + 1;
            uint64_t v40 = v3 & 0xFFFFFFFC;
            do
            {
              int8x16_t v41 = vextq_s8(v38[-1], v38[-1], 8uLL);
              v39[-1] = vextq_s8(*v38, *v38, 8uLL);
              *double v39 = v41;
              v38 -= 2;
              v39 += 2;
              v40 -= 4;
            }
            while (v40);
            int v42 = v3 & 0xFFFFFFFC;
            unint64_t v6 = v37;
          }
          else
          {
            int v42 = 0;
          }
          LODWORD(result) = v3 - v42;
          float64x2_t v43 = (uint64_t *)(v34 - 8);
          do
          {
            uint64_t v44 = *v43--;
            v6->i64[0] = v44;
            unint64_t v6 = (int8x16_t *)((char *)v6 + 8);
            double result = (int8x16_t *)(result - 1);
          }
          while (result);
          ++v30;
          v29 += v3;
        }
        while (v30 != v4);
      }
    }
    else
    {
      unsigned int v7 = 0;
      do
      {
        uint64_t v8 = result->i64[1] + 8 * v7 + 8 * v3;
        v6->i64[0] = *(void *)(v8 - 8);
        if (v3 == 1)
        {
          unint64_t v6 = (int8x16_t *)((char *)v6 + 8);
        }
        else
        {
          v6->i64[1] = *(void *)(v8 - 16);
          if (v3 == 2)
          {
            ++v6;
          }
          else
          {
            v6[1].i64[0] = *(void *)(v8 - 24);
            if (v3 == 3)
            {
              unint64_t v6 = (int8x16_t *)((char *)v6 + 24);
            }
            else
            {
              v6[1].i64[1] = *(void *)(v8 - 32);
              if (v3 == 4)
              {
                v6 += 2;
              }
              else
              {
                v6[2].i64[0] = *(void *)(v8 - 40);
                unint64_t v6 = (int8x16_t *)((char *)v6 + 40);
              }
            }
          }
        }
        v7 += v3;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t ImageUtils::Flipud<double>(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(unsigned int *)(result + 16);
  uint64_t v2 = *(unsigned int *)(result + 20);
  if (*(void *)(a2 + 32) < 8 * v3 * (unint64_t)v2)
  {
    if (*(void *)(a2 + 8))
    {
      if (*(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v3;
  *(_DWORD *)(a2 + 20) = v2;
  if (v3) {
    BOOL v4 = v2 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (!v4)
  {
    BOOL v5 = *(void **)(a2 + 8);
    if (v2 > 5)
    {
      uint64_t v8 = v2 & 0xFFFFFFFC;
      if ((v2 & 0xFFFFFFFC) == v2)
      {
        uint64_t v9 = 0;
        unsigned int v10 = v2 * (v3 - 1);
        do
        {
          uint64_t v11 = *(void *)(result + 8);
          uint64_t v12 = (char *)(v11 + 8 * ((v3 + ~v9) * v2));
          if ((unint64_t)((char *)v5 - v12) > 0x1F)
          {
            unsigned int v15 = &v5[v8];
            uint64_t v16 = (long long *)(v11 + 8 * v10 + 16);
            uint64_t v17 = v5 + 2;
            uint64_t v18 = v2 & 0xFFFFFFFC;
            do
            {
              long long v19 = *v16;
              *(v17 - 1) = *(v16 - 1);
              _OWORD *v17 = v19;
              v16 += 2;
              v17 += 2;
              v18 -= 4;
            }
            while (v18);
            BOOL v5 = v15;
          }
          else
          {
            int v13 = v2;
            do
            {
              uint64_t v14 = *(void *)v12;
              v12 += 8;
              *v5++ = v14;
              --v13;
            }
            while (v13);
          }
          ++v9;
          v10 -= v2;
        }
        while (v9 != v3);
      }
      else
      {
        uint64_t v20 = 0;
        unsigned int v21 = v2 * (v3 - 1);
        do
        {
          uint64_t v22 = *(void *)(result + 8);
          uint64_t v23 = (char *)(v22 + 8 * ((v3 + ~v20) * v2));
          if ((unint64_t)((char *)v5 - v23) >= 0x20)
          {
            uint64_t v25 = &v5[v8];
            v23 += v8 * 8;
            int8x16_t v26 = (long long *)(v22 + 8 * v21 + 16);
            BOOL v27 = v5 + 2;
            uint64_t v28 = v2 & 0xFFFFFFFC;
            do
            {
              long long v29 = *v26;
              *(v27 - 1) = *(v26 - 1);
              _OWORD *v27 = v29;
              v26 += 2;
              v27 += 2;
              v28 -= 4;
            }
            while (v28);
            int v24 = v2 & 0xFFFFFFFC;
            BOOL v5 = v25;
          }
          else
          {
            int v24 = 0;
          }
          int v30 = v2 - v24;
          do
          {
            uint64_t v31 = *(void *)v23;
            v23 += 8;
            *v5++ = v31;
            --v30;
          }
          while (v30);
          ++v20;
          v21 -= v2;
        }
        while (v20 != v3);
      }
    }
    else
    {
      unsigned int v6 = v2 * (v3 - 1);
      do
      {
        unsigned int v7 = (void *)(*(void *)(result + 8) + 8 * v6);
        void *v5 = *v7;
        if (v2 == 1)
        {
          ++v5;
        }
        else
        {
          v5[1] = v7[1];
          if (v2 == 2)
          {
            v5 += 2;
          }
          else
          {
            v5[2] = v7[2];
            if (v2 == 3)
            {
              v5 += 3;
            }
            else
            {
              v5[3] = v7[3];
              if (v2 == 4)
              {
                v5 += 4;
              }
              else
              {
                v5[4] = v7[4];
                v5 += 5;
              }
            }
          }
        }
        v6 -= v2;
        --v3;
      }
      while (v3);
    }
  }
  return result;
}

double ImageUtils::Rot90<double>(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  switch(a2)
  {
    case 0:
      unsigned int v6 = *(const void **)(a1 + 8);
      unsigned int v7 = *(void **)(a3 + 8);
      if (*(void *)(a3 + 32) < 8 * v5 * (unint64_t)v4)
      {
        if (v7)
        {
          if (*(unsigned char *)(a3 + 24)) {
            MEMORY[0x25A2D62A0]();
          }
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v4;
      memcpy(v7, v6, 8 * v5 * v4);
      return *(double *)v13.i64;
    case 1:
      if (*(void *)(a3 + 32) < 8 * v4 * (unint64_t)v5)
      {
        if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v5;
      if (v4 && v5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(uint64_t **)(a3 + 8);
        uint64_t v10 = 8 * (v4 - 1);
        do
        {
          uint64_t v11 = (uint64_t *)(*(void *)(a1 + 8) + v10);
          unsigned int v12 = v5;
          do
          {
            v13.i64[0] = *v11;
            *v9++ = *v11;
            v11 += v4;
            --v12;
          }
          while (v12);
          ++v8;
          v10 -= 8;
        }
        while (v8 != v4);
      }
      return *(double *)v13.i64;
    case 2:
      unint64_t v14 = *(void *)(a3 + 8);
      if (*(void *)(a3 + 32) < 8 * v5 * (unint64_t)v4)
      {
        if (v14 && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      unsigned int v20 = v5 * v4;
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v4;
      if (!(v5 * v4)) {
        return *(double *)v13.i64;
      }
      unint64_t v21 = *(void *)(a1 + 8);
      uint64_t v22 = v20 - 1;
      uint64_t v23 = (uint64_t *)(v21 + 8 * v22);
      if (v20 < 0xA || ((uint64_t v24 = 8 * v22 + 8, v14 < v21 + v24) ? (v25 = v21 >= v14 + v24) : (v25 = 1), !v25))
      {
        LODWORD(v26) = 0;
        BOOL v27 = (uint64_t *)v14;
LABEL_51:
        int v32 = v20 - v26;
        do
        {
          uint64_t v33 = *v23--;
          v13.i64[0] = v33;
          *v27++ = v33;
          --v32;
        }
        while (v32);
        return *(double *)v13.i64;
      }
      uint64_t v26 = v20 & 0xFFFFFFFC;
      BOOL v27 = (uint64_t *)(v14 + 8 * v26);
      v23 -= v26;
      uint64_t v28 = (int8x16_t *)(v21 + 8 * v22 - 8);
      long long v29 = (int8x16_t *)(v14 + 16);
      uint64_t v30 = v26;
      do
      {
        int8x16_t v13 = vextq_s8(*v28, *v28, 8uLL);
        int8x16_t v31 = vextq_s8(v28[-1], v28[-1], 8uLL);
        v29[-1] = v13;
        int8x16_t *v29 = v31;
        v28 -= 2;
        v29 += 2;
        v30 -= 4;
      }
      while (v30);
      if (v26 != v20) {
        goto LABEL_51;
      }
      return *(double *)v13.i64;
    case 3:
      if (*(void *)(a3 + 32) < 8 * v4 * (unint64_t)v5)
      {
        if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v5;
      if (v4 && v5)
      {
        uint64_t v15 = 0;
        uint64_t v16 = *(uint64_t **)(a3 + 8);
        uint64_t v17 = 8 * (v5 - 1) * v4;
        do
        {
          uint64_t v18 = (uint64_t *)(*(void *)(a1 + 8) + v17);
          unsigned int v19 = v5;
          do
          {
            v13.i64[0] = *v18;
            *v16++ = *v18;
            v18 -= v4;
            --v19;
          }
          while (v19);
          ++v15;
          v17 += 8;
        }
        while (v15 != v4);
      }
      return *(double *)v13.i64;
    default:
      return *(double *)v13.i64;
  }
}

double ImageUtils::Rot90<BOOL>(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(unsigned int *)(a1 + 20);
  switch(a2)
  {
    case 0:
      unsigned int v6 = *(const void **)(a1 + 8);
      unsigned int v7 = *(void **)(a3 + 8);
      if (*(void *)(a3 + 32) < v5 * (unint64_t)v4)
      {
        if (v7)
        {
          if (*(unsigned char *)(a3 + 24)) {
            MEMORY[0x25A2D62A0]();
          }
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v4;
      memcpy(v7, v6, v5 * v4);
      return *(double *)v17.i64;
    case 1:
      if (*(void *)(a3 + 32) < v5 * (unint64_t)v4)
      {
        if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v5;
      if (v4 && v5)
      {
        uint64_t v8 = 0;
        uint64_t v9 = *(unsigned char **)(a3 + 8);
        do
        {
          uint64_t v10 = (unsigned char *)(*(void *)(a1 + 8) + (v4 - 1) - v8);
          unsigned int v11 = v5;
          do
          {
            *v9++ = *v10;
            v10 += v4;
            --v11;
          }
          while (v11);
          ++v8;
        }
        while (v8 != v4);
      }
      return *(double *)v17.i64;
    case 2:
      unsigned int v12 = *(int8x16_t **)(a3 + 8);
      if (*(void *)(a3 + 32) < v5 * (unint64_t)v4)
      {
        if (v12 && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      unsigned int v18 = v5 * v4;
      *(_DWORD *)(a3 + 16) = v5;
      *(_DWORD *)(a3 + 20) = v4;
      if (!(v5 * v4)) {
        return *(double *)v17.i64;
      }
      unint64_t v19 = *(void *)(a1 + 8);
      uint64_t v20 = v18 - 1;
      unint64_t v21 = (__int8 *)(v19 + v20);
      if (v18 < 8
        || ((unint64_t)v12 < v19 + v18 ? (BOOL v22 = v19 >= (unint64_t)v12->u64 + v18) : (BOOL v22 = 1), !v22))
      {
        LODWORD(v24) = 0;
        BOOL v25 = v12;
        goto LABEL_49;
      }
      if (v18 >= 0x20)
      {
        uint64_t v23 = v18 & 0xFFFFFFE0;
        uint64_t v28 = (int8x16_t *)(v20 + v19 - 15);
        long long v29 = v12 + 1;
        uint64_t v30 = v23;
        do
        {
          int8x16_t v31 = vrev64q_s8(*v28);
          int8x16_t v17 = vextq_s8(v31, v31, 8uLL);
          int8x16_t v32 = vrev64q_s8(v28[-1]);
          v29[-1] = v17;
          int8x16_t *v29 = vextq_s8(v32, v32, 8uLL);
          v28 -= 2;
          v29 += 2;
          v30 -= 32;
        }
        while (v30);
        if (v23 == v18) {
          return *(double *)v17.i64;
        }
        if ((v18 & 0x18) == 0)
        {
          v21 -= v23;
          BOOL v25 = (int8x16_t *)((char *)v12 + v23);
          LODWORD(v24) = v18 & 0xFFFFFFE0;
LABEL_49:
          int v26 = v18 - v24;
          do
          {
            __int8 v27 = *v21--;
            v25->i8[0] = v27;
            BOOL v25 = (int8x16_t *)((char *)v25 + 1);
            --v26;
          }
          while (v26);
          return *(double *)v17.i64;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      uint64_t v24 = v18 & 0xFFFFFFF8;
      BOOL v25 = (int8x16_t *)((char *)v12 + v24);
      v21 -= v24;
      uint64_t v33 = (int8x8_t *)(v20 - v23 + v19 - 7);
      unint64_t v34 = (uint64_t *)((char *)v12->i64 + v23);
      uint64_t v35 = v23 - v24;
      do
      {
        int8x8_t v36 = *v33--;
        *(int8x8_t *)v17.i8 = vrev64_s8(v36);
        *v34++ = v17.i64[0];
        v35 += 8;
      }
      while (v35);
      if (v24 != v18) {
        goto LABEL_49;
      }
      return *(double *)v17.i64;
    case 3:
      if (*(void *)(a3 + 32) < v5 * (unint64_t)v4)
      {
        if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
        operator new[]();
      }
      *(_DWORD *)(a3 + 16) = v4;
      *(_DWORD *)(a3 + 20) = v5;
      if (v4 && v5)
      {
        uint64_t v13 = 0;
        unint64_t v14 = *(unsigned char **)(a3 + 8);
        do
        {
          uint64_t v15 = (unsigned char *)(*(void *)(a1 + 8) + (v5 - 1) * v4 + v13);
          unsigned int v16 = v5;
          do
          {
            *v14++ = *v15;
            v15 -= v4;
            --v16;
          }
          while (v16);
          ++v13;
        }
        while (v13 != v4);
      }
      return *(double *)v17.i64;
    default:
      return *(double *)v17.i64;
  }
}

void ImageUtils::OtsuThreshold(uint64_t a1)
{
  unsigned int v2 = *(_DWORD *)(a1 + 16);
  unsigned int v3 = *(_DWORD *)(a1 + 20);
  uint64_t v4 = *(double **)(a1 + 8);
  double v5 = *v4;
  int v6 = v3 * v2;
  if (v3 * v2 >= 2)
  {
    unsigned int v7 = v4 + 1;
    int v8 = v6 - 1;
    double v9 = v5;
    while (1)
    {
      double v10 = *v7;
      if (*v7 < v9)
      {
        double v9 = *v7;
      }
      else if (v10 > v5)
      {
        goto LABEL_5;
      }
      double v10 = v5;
LABEL_5:
      ++v7;
      double v5 = v10;
      if (!--v8) {
        goto LABEL_10;
      }
    }
  }
  double v9 = *v4;
  double v10 = *v4;
LABEL_10:
  if (v9 != v10)
  {
    unsigned int v11 = (double *)malloc_type_calloc(0x100uLL, 8uLL, 0x100004000313F17uLL);
    unsigned int v12 = v11;
    if (v6)
    {
      uint64_t v13 = *(double **)(a1 + 8);
      do
      {
        double v14 = *v13++;
        uint64_t v15 = vcvtad_u64_f64((v14 - v9) / (v10 - v9) * 255.0);
        v11[v15] = 1.0 / ((double)v2 * (double)v3) + v11[v15];
        --v6;
      }
      while (v6);
    }
    unsigned int v16 = (double *)malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    int8x16_t v17 = malloc_type_malloc(0x800uLL, 0x100004000313F17uLL);
    unsigned int v18 = v17;
    *unsigned int v16 = *v12;
    double v19 = *v12;
    void *v17 = *(void *)v12;
    if (v16 >= (double *)v17 + 256 || v17 >= (void *)v16 + 256)
    {
      uint64_t v20 = 0;
      double v22 = *v16;
      unsigned int v23 = 2;
      do
      {
        double v22 = v22 + v12[v20 + 1];
        v16[v20 + 1] = v22;
        double v19 = v19 + v12[v20 + 1] * (double)v23;
        *(double *)&v17[++v20] = v19;
        ++v23;
      }
      while ((v20 * 8) != 2040);
    }
    else
    {
      uint64_t v20 = 0;
      unsigned int v21 = 2;
      do
      {
        v16[v20 + 1] = v16[v20] + v12[v20 + 1];
        double v19 = *(double *)&v17[v20] + v12[v20 + 1] * (double)v21;
        *(double *)&v17[++v20] = v19;
        ++v21;
      }
      while ((v20 * 8) != 2040);
    }
    uint64_t v24 = (uint64_t)&v17[v20 - 1];
    uint64_t v25 = (uint64_t)&v16[v20 - 1];
    uint64_t v26 = (uint64_t)&v12[v20 - 1];
    int v27 = 0;
    double v28 = *(double *)(v25 - 2032);
    double v29 = -(*(double *)(v24 - 2032) - v19 * v28);
    double v30 = v29 * v29 / (v28 * (1.0 - v28));
    int v31 = 1;
    uint64_t v32 = -253;
    int v33 = 1;
    do
    {
      while (1)
      {
        double v34 = *(double *)(v25 + 8 * v32);
        double v35 = -(*(double *)(v24 + 8 * v32) - v19 * v34);
        double v36 = v35 * v35 / (v34 * (1.0 - v34));
        if (v36 <= v30) {
          break;
        }
        int v33 = 1;
        int v27 = v31++;
        ++v32;
        double v30 = v36;
        if (v32 == 1) {
          goto LABEL_27;
        }
      }
      if (v36 == v30)
      {
        v27 += v32 + 254;
        ++v33;
      }
      ++v31;
      ++v32;
    }
    while (v32 != 1);
LABEL_27:
    int v37 = (void *)(v26 - 2032);
    free(v16);
    free(v18);
    free(v37);
  }
}

uint64_t ImageUtils::ExtractPatch<double>(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  unsigned int v6 = a2;
  uint64_t v7 = *(unsigned int *)(result + 20);
  uint64_t v8 = *(void *)(result + 8);
  unsigned int v9 = a3 - a2 + 1;
  unsigned int v10 = a5 - a4 + 1;
  if (*(void *)(a6 + 32) < 8 * v9 * (unint64_t)v10)
  {
    if (*(void *)(a6 + 8))
    {
      if (*(unsigned char *)(a6 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a6 + 16) = v9;
  *(_DWORD *)(a6 + 20) = v10;
  if (a3 >= a2 && a5 >= a4)
  {
    unsigned int v11 = *(void **)(a6 + 8);
    uint64_t v12 = v7 * a2;
    uint64_t v13 = v8 + 8 * v12;
    unsigned int v14 = a5 + 1;
    if (a5 + 1 <= a4 + 1) {
      unsigned int v14 = a4 + 1;
    }
    uint64_t v15 = v14 + ~a4;
    if (v15 > 4)
    {
      if (v14 - 1 >= a4)
      {
        uint64_t v18 = v8 + 8 * (v12 + a4);
        uint64_t v19 = 8 * v7;
        uint64_t v20 = v15 + 1;
        uint64_t v21 = (v15 + 1) & 0x1FFFFFFFCLL;
        uint64_t v22 = v21;
        if (v20 == v21)
        {
          uint64_t v23 = 0;
          do
          {
            if ((unint64_t)v11 - v18 - v19 * v23 > 0x1F)
            {
              uint64_t v25 = &v11[v22];
              uint64_t v26 = v11 + 2;
              unsigned int v27 = a4;
              uint64_t v28 = v21;
              do
              {
                double result = v13 + 8 * v27;
                long long v29 = *(_OWORD *)(result + 16);
                *(v26 - 1) = *(_OWORD *)result;
                *uint64_t v26 = v29;
                v27 += 4;
                v26 += 2;
                v28 -= 4;
              }
              while (v28);
              unsigned int v11 = v25;
            }
            else
            {
              unsigned int v24 = a4;
              do
                *v11++ = *(void *)(v13 + 8 * v24++);
              while (v24 <= a5);
            }
            ++v6;
            v13 += 8 * v7;
            ++v23;
          }
          while (v6 <= a3);
        }
        else
        {
          uint64_t v30 = 0;
          do
          {
            if ((unint64_t)v11 - v18 - v19 * v30 > 0x1F)
            {
              uint64_t v32 = &v11[v22];
              int v33 = v11 + 2;
              unsigned int v34 = a4;
              double result = v21;
              do
              {
                double v35 = (_OWORD *)(v13 + 8 * v34);
                long long v36 = v35[1];
                *(v33 - 1) = *v35;
                _OWORD *v33 = v36;
                v33 += 2;
                v34 += 4;
                result -= 4;
              }
              while (result);
              unsigned int v31 = v21 + a4;
              unsigned int v11 = v32;
            }
            else
            {
              unsigned int v31 = a4;
            }
            do
              *v11++ = *(void *)(v13 + 8 * v31++);
            while (v31 <= a5);
            ++v6;
            v13 += 8 * v7;
            ++v30;
          }
          while (v6 <= a3);
        }
      }
      else
      {
        do
        {
          unsigned int v17 = a4;
          do
            *v11++ = *(void *)(v13 + 8 * v17++);
          while (v17 <= a5);
          ++v6;
          v13 += 8 * v7;
        }
        while (v6 <= a3);
      }
    }
    else
    {
      do
      {
        unsigned int v16 = a4;
        do
          *v11++ = *(void *)(v13 + 8 * v16++);
        while (v16 <= a5);
        ++v6;
        v13 += 8 * v7;
      }
      while (v6 <= a3);
    }
  }
  return result;
}

uint64_t ImageUtils::Conv2<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  uint64_t v21 = &unk_2707171D8;
  char v24 = 0;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 * v3;
  if (8 * v4 * (unint64_t)v3) {
    operator new[]();
  }
  LODWORD(v23) = *(_DWORD *)(a2 + 16);
  HIDWORD(v23) = v3;
  if (v5)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (v5 - 1);
    uint64_t v8 = (uint64_t *)(v6 + 8 * v7);
    if (v5 >= 0xA && ((v9 = 8 * v7 + 8, v6 + v9) ? (BOOL v10 = v6 >= v9) : (BOOL v10 = 1), v10))
    {
      uint64_t v11 = v5 & 0xFFFFFFFC;
      uint64_t v12 = (void *)(8 * v11);
      v8 -= v11;
      uint64_t v13 = (int8x16_t *)(v6 + 8 * v7 - 8);
      uint64_t v14 = 16;
      uint64_t v15 = v11;
      do
      {
        int8x16_t v16 = vextq_s8(v13[-1], v13[-1], 8uLL);
        *(int8x16_t *)(v14 - 16) = vextq_s8(*v13, *v13, 8uLL);
        *(int8x16_t *)uint64_t v14 = v16;
        v13 -= 2;
        v14 += 32;
        v15 -= 4;
      }
      while (v15);
      if (v11 == v5) {
        goto LABEL_17;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      uint64_t v12 = 0;
    }
    int v17 = v5 - v11;
    do
    {
      uint64_t v18 = *v8--;
      *v12++ = v18;
      --v17;
    }
    while (v17);
  }
LABEL_17:
  ImageUtils::Filter2<double>(a1, (uint64_t)&v21, a3);
  uint64_t v21 = &unk_2707171D8;
  uint64_t result = v22;
  if (v22) {
    BOOL v20 = v24 == 0;
  }
  else {
    BOOL v20 = 1;
  }
  if (!v20) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_25906AC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void ImageUtils::Filter2<double>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a3) {
    ImageUtils::Filter2<double>();
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = *(double **)(a3 + 8);
  if (*(void *)(a3 + 32) < 8 * v5 * (unint64_t)v6)
  {
    if (v7)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a3 + 8), 0x1000C8000313F17);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v6;
  uint64_t v8 = *(const double **)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  int v10 = *(_DWORD *)(a1 + 20);
  uint64_t v11 = *(const double **)(a2 + 8);
  int v12 = *(_DWORD *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 20);
  vDSPImgfir<double>(v8, v9, v10, v11, v7, v12, v13);
}

uint64_t ImageUtils::Conv2<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v26 = 0;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = &unk_270717340;
  char v25 = 0;
  unsigned int v4 = *(_DWORD *)(a2 + 16);
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  uint64_t v5 = v4 * v3;
  if (4 * v4 * (unint64_t)v3) {
    operator new[]();
  }
  LODWORD(v24) = *(_DWORD *)(a2 + 16);
  HIDWORD(v24) = v3;
  if (v5)
  {
    unint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = (v5 - 1);
    uint64_t v8 = (int *)(v6 + 4 * v7);
    if (v5 >= 0xC && ((v9 = 4 * v7 + 4, v6 + v9) ? (BOOL v10 = v6 >= v9) : (BOOL v10 = 1), v10))
    {
      uint64_t v11 = v5 & 0xFFFFFFF8;
      int v12 = (_DWORD *)(4 * v11);
      v8 -= v11;
      int v13 = (int32x4_t *)(v6 + 4 * v7 - 12);
      uint64_t v14 = 16;
      uint64_t v15 = v11;
      do
      {
        int8x16_t v16 = (int8x16_t)vrev64q_s32(*v13);
        int8x16_t v17 = (int8x16_t)vrev64q_s32(v13[-1]);
        *(int8x16_t *)(v14 - 16) = vextq_s8(v16, v16, 8uLL);
        *(int8x16_t *)uint64_t v14 = vextq_s8(v17, v17, 8uLL);
        v13 -= 2;
        v14 += 32;
        v15 -= 8;
      }
      while (v15);
      if (v11 == v5) {
        goto LABEL_17;
      }
    }
    else
    {
      LODWORD(v11) = 0;
      int v12 = 0;
    }
    int v18 = v5 - v11;
    do
    {
      int v19 = *v8--;
      *v12++ = v19;
      --v18;
    }
    while (v18);
  }
LABEL_17:
  ImageUtils::Filter2<float>(a1, (uint64_t)&v22, a3);
  uint64_t v22 = &unk_270717340;
  uint64_t result = v23;
  if (v23) {
    BOOL v21 = v25 == 0;
  }
  else {
    BOOL v21 = 1;
  }
  if (!v21) {
    return MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_25906AEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<float>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void ImageUtils::Filter2<float>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a3) {
    ImageUtils::Filter2<double>();
  }
  unsigned int v5 = *(_DWORD *)(a1 + 16);
  unsigned int v6 = *(_DWORD *)(a1 + 20);
  uint64_t v7 = *(float **)(a3 + 8);
  if (*(void *)(a3 + 32) < 4 * v5 * (unint64_t)v6)
  {
    if (v7)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a3 + 8), 0x1000C8052888210);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v6;
  uint64_t v8 = *(const float **)(a1 + 8);
  int v9 = *(_DWORD *)(a1 + 16);
  int v10 = *(_DWORD *)(a1 + 20);
  uint64_t v11 = *(const float **)(a2 + 8);
  int v12 = *(_DWORD *)(a2 + 16);
  int v13 = *(_DWORD *)(a2 + 20);
  vDSPImgfir<float>(v8, v9, v10, v11, v7, v12, v13);
}

uint64_t Matrix<float>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717340;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

uint64_t ImageUtils::ConnectedComp<BOOL>(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(unsigned char **)(a1 + 8);
  unsigned int v8 = *(_DWORD *)(a1 + 16);
  unsigned int v100 = *(_DWORD *)(a1 + 20);
  int v9 = *(_WORD **)(a3 + 8);
  if (*(void *)(a3 + 32) < 2 * v8 * (unint64_t)v100)
  {
    if (v9)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a3 + 8), 0x1000C80BDFB0063);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v8;
  *(_DWORD *)(a3 + 20) = v100;
  DisjointSet::DisjointSet((DisjointSet *)&v101);
  DisjointSet::SetCapacity((uint64_t)&v101, 0xFFFEu);
  *(_DWORD *)long long v102 = 0;
  unsigned int v10 = v101;
  if (!v101) {
    __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
  }
  uint64_t v11 = v103;
  *int v103 = 0;
  unsigned int v12 = 1;
  *(_DWORD *)long long v102 = 1;
  uint64_t v96 = a4;
  if (*v7)
  {
    if (v10 <= 1) {
      __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
    }
    int v13 = 1;
    v11[1] = 1;
    unsigned int v12 = 2;
    *(_DWORD *)long long v102 = 2;
    _WORD *v9 = 1;
    unsigned int v14 = v100 - 1;
    if (v100 != 1) {
      goto LABEL_88;
    }
  }
  else
  {
    int v13 = 0;
    _WORD *v9 = 0;
    unsigned int v14 = v100 - 1;
    if (v100 != 1)
    {
LABEL_88:
      for (uint64_t i = 0; v14 != i; ++i)
      {
        if (v7[i + 1])
        {
          if (!v9[(int)i] || !v7[(int)i] || (__int16 v42 = v9[i]) == 0)
          {
            if (v13 <= 65531)
            {
              if (v12 >= v10) {
                __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
              }
              v11[v12] = v12;
              *(_DWORD *)long long v102 = v12 + 1;
              v9[i + 1] = v12;
              ++v13;
              ++v12;
              continue;
            }
            __int16 v42 = v12 - 1;
          }
          v9[i + 1] = v42;
        }
        else
        {
          v9[i + 1] = 0;
        }
      }
    }
  }
  uint64_t v95 = a3;
  unsigned int v97 = v8;
  if (a2 == 4)
  {
    unsigned int v43 = v8 - 1;
    unsigned int v15 = v100;
    if (v8 == 1) {
      goto LABEL_136;
    }
    unsigned int v44 = 1 - v100;
    unsigned int v45 = v100;
    while (1)
    {
      while (1)
      {
        uint64_t v46 = v45;
        if (v7[v45]) {
          break;
        }
        v9[v45] = 0;
        if (v15 != 1) {
          goto LABEL_115;
        }
LABEL_102:
        unsigned int v45 = v46 + 1;
        if (!--v43) {
          goto LABEL_136;
        }
      }
      unsigned int v47 = v45 - v15;
      if (!v9[(int)(v46 - v15)] || !v7[v47] || (int v48 = (unsigned __int16)v9[v47]) == 0)
      {
        int v49 = *(_DWORD *)v102;
        if (v13 <= 65531)
        {
          if (*(_DWORD *)v102 >= v101) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v103[*(unsigned int *)v102] = v102[0];
          *(_DWORD *)long long v102 = v49 + 1;
          v9[v46] = v49;
          ++v13;
          if (v15 == 1) {
            goto LABEL_102;
          }
          goto LABEL_115;
        }
        LOWORD(v48) = v102[0] - 1;
      }
      v9[v46] = v48;
      if (v15 == 1) {
        goto LABEL_102;
      }
LABEL_115:
      int v50 = 0;
      int v51 = v44 + v46;
      do
      {
        int v52 = v46 + v50;
        uint64_t v53 = (v46 + v50 + 1);
        if (!v7[v53])
        {
          v9[v53] = 0;
          goto LABEL_117;
        }
        if (v9[v52] && v7[v52])
        {
          unsigned int v54 = (unsigned __int16)v9[v52];
          int v55 = v51 + v50;
          uint64_t v56 = (unsigned __int16)v9[v51 + v50];
          if (v54 == v56) {
            goto LABEL_129;
          }
        }
        else
        {
          unsigned int v54 = 0;
          int v55 = v51 + v50;
          uint64_t v56 = (unsigned __int16)v9[v51 + v50];
          if (!v9[v51 + v50]) {
            goto LABEL_129;
          }
        }
        if (v9[v55] && v7[v55])
        {
          if (v54)
          {
            DisjointSet::Unite((DisjointSet *)&v101, v56, v54);
LABEL_130:
            v9[v53] = v54;
            goto LABEL_117;
          }
          unsigned int v54 = v56;
        }
LABEL_129:
        if (v54) {
          goto LABEL_130;
        }
        int v57 = *(_DWORD *)v102;
        if (v13 > 65531)
        {
          v9[v53] = v102[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v102 >= v101) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v103[*(unsigned int *)v102] = v102[0];
          *(_DWORD *)long long v102 = v57 + 1;
          v9[v53] = v57;
          ++v13;
        }
LABEL_117:
        ++v50;
      }
      while (v44 + v50);
      unsigned int v45 = v46 + v50 + 1;
      unsigned int v15 = v100;
      if (!--v43) {
        goto LABEL_136;
      }
    }
  }
  unsigned int v15 = v100;
  if (a2 == 8)
  {
    unsigned int v16 = v8 - 1;
    if (v8 != 1)
    {
      unsigned int v17 = v100;
      while (!v7[v17])
      {
        v9[v17] = 0;
LABEL_32:
        if (v15 == 2)
        {
          uint64_t v22 = v17 + 1;
          if (!v7[v22]) {
            goto LABEL_16;
          }
LABEL_68:
          int v35 = v22 - v15;
          int v36 = v22 - v15 - 1;
          if (v9[v36] && v7[v36])
          {
            unsigned int v37 = (unsigned __int16)v9[v36];
            uint64_t v38 = (unsigned __int16)v9[v35];
            if (v37 == v38) {
              goto LABEL_82;
            }
LABEL_73:
            if (!v9[v35] || !v7[v35]) {
              goto LABEL_82;
            }
            if (v37)
            {
              DisjointSet::Unite((DisjointSet *)&v101, v38, v37);
              goto LABEL_83;
            }
            unsigned int v37 = v38;
          }
          else
          {
            unsigned int v37 = 0;
            uint64_t v38 = (unsigned __int16)v9[v35];
            if (v9[v35]) {
              goto LABEL_73;
            }
          }
LABEL_82:
          if (!v37)
          {
            int v40 = *(_DWORD *)v102;
            if (v13 > 65531)
            {
              v9[v22] = v102[0] - 1;
            }
            else
            {
              if (*(_DWORD *)v102 >= v101) {
                __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
              }
              v103[*(unsigned int *)v102] = v102[0];
              *(_DWORD *)long long v102 = v40 + 1;
              v9[v22] = v40;
              ++v13;
            }
            goto LABEL_17;
          }
LABEL_83:
          v9[v22] = v37;
          goto LABEL_17;
        }
        unsigned int v98 = v16;
        int v23 = 0;
        unsigned int v24 = v17 - v100;
        do
        {
          int v25 = v17 + v23;
          uint64_t v26 = v17 + v23 + 1;
          if (!v7[v26])
          {
            v9[v26] = 0;
            goto LABEL_37;
          }
          if (v9[v25] && v7[v25])
          {
            unsigned int v27 = (unsigned __int16)v9[v25];
            int v28 = v24 + v23;
            uint64_t v29 = (unsigned __int16)v9[v24 + v23];
            if (v27 == v29) {
              goto LABEL_48;
            }
          }
          else
          {
            unsigned int v27 = 0;
            int v28 = v24 + v23;
            uint64_t v29 = (unsigned __int16)v9[v24 + v23];
            if (!v9[v24 + v23]) {
              goto LABEL_48;
            }
          }
          if (!v9[v28] || !v7[v28]) {
            goto LABEL_48;
          }
          if (v27)
          {
            DisjointSet::Unite((DisjointSet *)&v101, v29, v27);
LABEL_48:
            int v30 = v28 + 1;
            uint64_t v31 = (unsigned __int16)v9[v28 + 1];
            if (v27 == v31) {
              goto LABEL_54;
            }
            goto LABEL_49;
          }
          unsigned int v27 = v29;
          int v30 = v28 + 1;
          uint64_t v31 = (unsigned __int16)v9[v28 + 1];
          if (v27 == v31) {
            goto LABEL_54;
          }
LABEL_49:
          if (!v9[v30] || !v7[v30]) {
            goto LABEL_54;
          }
          if (v27)
          {
            DisjointSet::Unite((DisjointSet *)&v101, v31, v27);
LABEL_54:
            int v32 = v28 + 2;
            uint64_t v33 = (unsigned __int16)v9[v28 + 2];
            if (v27 == v33) {
              goto LABEL_60;
            }
            goto LABEL_55;
          }
          unsigned int v27 = v31;
          int v32 = v28 + 2;
          uint64_t v33 = (unsigned __int16)v9[v28 + 2];
          if (v27 == v33) {
            goto LABEL_60;
          }
LABEL_55:
          if (!v9[v32] || !v7[v32])
          {
LABEL_60:
            if (v27) {
              goto LABEL_61;
            }
            goto LABEL_63;
          }
          if (v27)
          {
            DisjointSet::Unite((DisjointSet *)&v101, v33, v27);
LABEL_61:
            v9[v26] = v27;
            goto LABEL_37;
          }
          LOWORD(v27) = v33;
          if (v33) {
            goto LABEL_61;
          }
LABEL_63:
          int v34 = *(_DWORD *)v102;
          if (v13 > 65531)
          {
            v9[v26] = v102[0] - 1;
          }
          else
          {
            if (*(_DWORD *)v102 >= v101) {
              __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
            }
            v103[*(unsigned int *)v102] = v102[0];
            *(_DWORD *)long long v102 = v34 + 1;
            v9[v26] = v34;
            ++v13;
          }
LABEL_37:
          ++v23;
        }
        while (v100 - 2 != v23);
        v17 += v23;
        unsigned int v15 = v100;
        unsigned int v16 = v98;
        uint64_t v22 = v17 + 1;
        if (v7[v22]) {
          goto LABEL_68;
        }
LABEL_16:
        v9[v22] = 0;
LABEL_17:
        v17 += 2;
        if (!--v16) {
          goto LABEL_136;
        }
      }
      unsigned int v18 = v17 - v15;
      if (v9[v17 - v15] && v7[v18])
      {
        unsigned int v19 = (unsigned __int16)v9[v18];
        unsigned int v20 = v18 + 1;
        uint64_t v21 = (unsigned __int16)v9[v20];
        if (v19 == v21) {
          goto LABEL_30;
        }
      }
      else
      {
        unsigned int v19 = 0;
        unsigned int v20 = v18 + 1;
        uint64_t v21 = (unsigned __int16)v9[v20];
        if (!v9[v20]) {
          goto LABEL_30;
        }
      }
      if (v9[v20] && v7[v20])
      {
        if (v19)
        {
          DisjointSet::Unite((DisjointSet *)&v101, v21, v19);
LABEL_31:
          v9[v17] = v19;
          goto LABEL_32;
        }
        unsigned int v19 = v21;
      }
LABEL_30:
      if (!v19)
      {
        int v39 = *(_DWORD *)v102;
        if (v13 > 65531)
        {
          v9[v17] = v102[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v102 >= v101) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v103[*(unsigned int *)v102] = v102[0];
          *(_DWORD *)long long v102 = v39 + 1;
          v9[v17] = v39;
          ++v13;
        }
        goto LABEL_32;
      }
      goto LABEL_31;
    }
  }
LABEL_136:
  unsigned int v58 = DisjointSet::Compact((DisjointSet *)&v101, v102[0], 0);
  int v59 = *(_WORD **)(v95 + 8);
  int v60 = v97 * v15;
  unsigned int v99 = v58;
  if (v96)
  {
    unint64_t v61 = v58 - 1;
    uint64_t v62 = v96[1];
    unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((v62 - *v96) >> 3);
    if (v61 <= v63)
    {
      if (v61 < v63)
      {
        uint64_t v66 = *v96 + 24 * v61;
        if (v62 != v66)
        {
          uint64_t v67 = v96[1];
          do
          {
            int v69 = *(void **)(v67 - 24);
            v67 -= 24;
            int v68 = v69;
            if (v69)
            {
              *(void *)(v62 - 16) = v68;
              operator delete(v68);
            }
            uint64_t v62 = v67;
          }
          while (v67 != v66);
        }
        v96[1] = v66;
      }
    }
    else
    {
      std::vector<ImageUtils::Blob>::__append((uint64_t)v96, v61 - v63);
    }
    if (v60)
    {
      int v70 = 0;
      while (1)
      {
        uint64_t v72 = (unsigned __int16)v103[(unsigned __int16)*v59];
        *int v59 = v72;
        if (!v72) {
          goto LABEL_154;
        }
        unint64_t v73 = (v72 - 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96[1] - *v96) >> 3) <= v73) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v74 = *v96 + 24 * v73;
        int v76 = *(char **)(v74 + 8);
        unint64_t v75 = *(void *)(v74 + 16);
        if ((unint64_t)v76 >= v75) {
          break;
        }
        *(_DWORD *)int v76 = v70;
        uint64_t v71 = (uint64_t)(v76 + 4);
LABEL_153:
        *(void *)(v74 + 8) = v71;
LABEL_154:
        ++v70;
        ++v59;
        if (v70 == v60) {
          goto LABEL_178;
        }
      }
      uint64_t v77 = *(char **)v74;
      uint64_t v78 = (uint64_t)&v76[-*(void *)v74];
      uint64_t v79 = v78 >> 2;
      unint64_t v80 = (v78 >> 2) + 1;
      if (v80 >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v81 = v75 - (void)v77;
      if (v81 >> 1 > v80) {
        unint64_t v80 = v81 >> 1;
      }
      if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v82 = v80;
      }
      if (v82)
      {
        if (v82 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        BOOL v83 = operator new(4 * v82);
        BOOL v84 = &v83[4 * v79];
        *BOOL v84 = v70;
        uint64_t v71 = (uint64_t)(v84 + 1);
        if (v76 == v77) {
          goto LABEL_175;
        }
      }
      else
      {
        BOOL v83 = 0;
        BOOL v84 = (_DWORD *)(4 * v79);
        *(_DWORD *)(4 * v79) = v70;
        uint64_t v71 = 4 * v79 + 4;
        if (v76 == v77)
        {
LABEL_175:
          *(void *)uint64_t v74 = v84;
          *(void *)(v74 + 8) = v71;
          *(void *)(v74 + 16) = &v83[4 * v82];
          if (v77) {
            operator delete(v77);
          }
          int v60 = v97 * v15;
          goto LABEL_153;
        }
      }
      unint64_t v85 = v76 - 4 - v77;
      if (v85 < 0x2C) {
        goto LABEL_192;
      }
      if ((unint64_t)(v76 - &v83[v78]) < 0x20) {
        goto LABEL_192;
      }
      uint64_t v86 = (v85 >> 2) + 1;
      uint64_t v87 = 4 * (v86 & 0x7FFFFFFFFFFFFFF8);
      BOOL v88 = &v76[-v87];
      BOOL v84 = (_DWORD *)((char *)v84 - v87);
      BOOL v89 = &v83[4 * v79 - 16];
      BOOL v90 = v76 - 16;
      uint64_t v91 = v86 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v92 = *(_OWORD *)v90;
        *(v89 - 1) = *((_OWORD *)v90 - 1);
        *BOOL v89 = v92;
        v89 -= 2;
        v90 -= 32;
        v91 -= 8;
      }
      while (v91);
      int v76 = v88;
      if (v86 != (v86 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_192:
        do
        {
          int v93 = *((_DWORD *)v76 - 1);
          v76 -= 4;
          *--BOOL v84 = v93;
        }
        while (v76 != v77);
      }
      goto LABEL_175;
    }
  }
  else if (v60 >= 1)
  {
    uint64_t v64 = v103;
    unsigned int v65 = v60 + 1;
    do
    {
      *int v59 = v64[(unsigned __int16)*v59];
      ++v59;
      --v65;
    }
    while (v65 > 1);
  }
LABEL_178:
  DisjointSet::~DisjointSet((DisjointSet *)&v101);
  return v99;
}

void sub_25906BB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BB9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BBC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BBD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BBEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BC14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BC3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906BC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

uint64_t DisjointSet::Unite(DisjointSet *this, uint64_t a2, unsigned int a3)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = a2;
  do
  {
    uint64_t result = v4;
    uint64_t v4 = *(unsigned __int16 *)(v3 + 2 * v4);
  }
  while (result > v4);
  if (a2 != a3)
  {
    unsigned int v6 = a3;
    do
    {
      unsigned int v7 = v6;
      unsigned int v6 = *(unsigned __int16 *)(v3 + 2 * v6);
    }
    while (v7 > v6);
    if (result >= v7) {
      uint64_t result = v7;
    }
    else {
      uint64_t result = result;
    }
    unsigned int v8 = (_WORD *)(v3 + 2 * a3);
    for (unsigned int i = (unsigned __int16)*v8; a3 > i; unsigned int i = (unsigned __int16)*v8)
    {
      if (a3 < result) {
        DisjointSet::Unite();
      }
      a3 = i;
      *unsigned int v8 = result;
      unsigned int v8 = (_WORD *)(v3 + 2 * i);
    }
    if (a3 < result) {
      DisjointSet::Unite();
    }
    *unsigned int v8 = result;
  }
  unsigned int v10 = (_WORD *)(v3 + 2 * a2);
  for (unsigned int j = (unsigned __int16)*v10; a2 > j; unsigned int j = (unsigned __int16)*v10)
  {
    if (a2 < result) {
      DisjointSet::Unite();
    }
    LODWORD(a2) = j;
    *unsigned int v10 = result;
    unsigned int v10 = (_WORD *)(v3 + 2 * j);
  }
  if (a2 < result) {
    DisjointSet::Unite();
  }
  *unsigned int v10 = result;
  return result;
}

uint64_t ImageUtils::ConnectedComp<MatrixMxN<1u,3u,double>>(uint64_t a1, int a2, uint64_t a3, void *a4, double a5)
{
  unsigned int v8 = *(double **)(a1 + 8);
  unsigned int v10 = *(_DWORD *)(a1 + 16);
  unsigned int v9 = *(_DWORD *)(a1 + 20);
  uint64_t v11 = *(_WORD **)(a3 + 8);
  if (*(void *)(a3 + 32) < 2 * v10 * (unint64_t)v9)
  {
    if (v11)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a3 + 8), 0x1000C80BDFB0063);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v10;
  *(_DWORD *)(a3 + 20) = v9;
  DisjointSet::DisjointSet((DisjointSet *)&v113);
  DisjointSet::SetCapacity((uint64_t)&v113, 0xFFFEu);
  *(_DWORD *)int v114 = 0;
  unsigned int v12 = v113;
  if (!v113) {
    __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
  }
  int v13 = v115;
  *BOOL v115 = 0;
  unsigned int v14 = 1;
  *(_DWORD *)int v114 = 1;
  if (*v8 == 0.0 || v8[1] == 0.0 || v8[2] == 0.0)
  {
    int v15 = 0;
    *uint64_t v11 = 0;
    if (v9 != 1)
    {
LABEL_96:
      uint64_t v46 = v11 + 1;
      unsigned int v47 = v8 + 5;
      for (int i = 1; i != v9; ++i)
      {
        if (*(v47 - 2) == 0.0 || *(v47 - 1) == 0.0 || *v47 == 0.0)
        {
          _WORD *v46 = 0;
        }
        else
        {
          if (!v11[i - 1]
            || fabs(v8[3 * i] * v8[3 * i - 3] + 0.0 + v8[3 * i + 1] * v8[3 * i - 2] + v8[3 * i + 2] * v8[3 * i - 1]) <= (double)(int)a5 / 1000.0
            || (__int16 v49 = *(v46 - 1)) == 0)
          {
            if (v15 <= 65531)
            {
              if (v14 >= v12) {
                __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
              }
              v13[v14] = v14;
              *(_DWORD *)int v114 = v14 + 1;
              _WORD *v46 = v14;
              ++v15;
              ++v14;
              goto LABEL_98;
            }
            __int16 v49 = v14 - 1;
          }
          _WORD *v46 = v49;
        }
LABEL_98:
        ++v46;
        v47 += 3;
      }
    }
  }
  else
  {
    if (v12 <= 1) {
      __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
    }
    int v15 = 1;
    v13[1] = 1;
    unsigned int v14 = 2;
    *(_DWORD *)int v114 = 2;
    *uint64_t v11 = 1;
    if (v9 != 1) {
      goto LABEL_96;
    }
  }
  int v111 = v15;
  uint64_t v106 = a3;
  unsigned int v110 = v9;
  if (a2 == 4)
  {
    unsigned int v50 = v10 - 1;
    if (v10 == 1) {
      goto LABEL_150;
    }
    double v51 = (double)(int)a5 / 1000.0;
    unsigned int v52 = 1 - v9;
    unsigned int v53 = v9;
    while (1)
    {
      while (1)
      {
        uint64_t v54 = v53;
        int v55 = &v8[3 * v53];
        if (*v55 != 0.0 && v55[1] != 0.0 && v55[2] != 0.0) {
          break;
        }
        v11[v54] = 0;
        if (v9 != 1) {
          goto LABEL_127;
        }
LABEL_112:
        unsigned int v53 = v54 + 1;
        if (!--v50) {
          goto LABEL_150;
        }
      }
      int v56 = v54 - v9;
      if (!v11[(int)(v54 - v9)]
        || fabs(v8[3 * (int)v54] * v8[3 * v56]+ 0.0+ v8[3 * (int)v54 + 1] * v8[3 * v56 + 1]+ v8[3 * (int)v54 + 2] * v8[3 * v56 + 2]) <= v51|| (int v57 = (unsigned __int16)v11[v56]) == 0)
      {
        int v58 = *(_DWORD *)v114;
        if (v111 <= 65531)
        {
          if (*(_DWORD *)v114 >= v113) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v115[*(unsigned int *)v114] = v114[0];
          *(_DWORD *)int v114 = v58 + 1;
          v11[v54] = v58;
          ++v111;
          if (v9 == 1) {
            goto LABEL_112;
          }
          goto LABEL_127;
        }
        LOWORD(v57) = v114[0] - 1;
      }
      v11[v54] = v57;
      if (v9 == 1) {
        goto LABEL_112;
      }
LABEL_127:
      int v59 = 0;
      int v60 = v52 + v54;
      do
      {
        int v61 = v54 + v59;
        uint64_t v62 = (v54 + v59 + 1);
        unint64_t v63 = &v8[3 * v62];
        if (*v63 == 0.0 || v63[1] == 0.0 || v63[2] == 0.0)
        {
          v11[v62] = 0;
          goto LABEL_129;
        }
        if (v11[v61]
          && fabs(v8[3 * (int)v62] * v8[3 * v61]+ 0.0+ v8[3 * (int)v62 + 1] * v8[3 * v61 + 1]+ v8[3 * (int)v62 + 2] * v8[3 * v61 + 2]) > v51)
        {
          unsigned int v64 = (unsigned __int16)v11[v61];
          int v65 = v60 + v59;
          uint64_t v66 = (unsigned __int16)v11[v60 + v59];
          if (v64 == v66) {
            goto LABEL_143;
          }
        }
        else
        {
          unsigned int v64 = 0;
          int v65 = v60 + v59;
          uint64_t v66 = (unsigned __int16)v11[v60 + v59];
          if (!v11[v60 + v59]) {
            goto LABEL_143;
          }
        }
        if (v11[v65]
          && fabs(v8[3 * (int)v62] * v8[3 * v65]+ 0.0+ v8[3 * (int)v62 + 1] * v8[3 * v65 + 1]+ v8[3 * (int)v62 + 2] * v8[3 * v65 + 2]) > v51)
        {
          if (v64)
          {
            DisjointSet::Unite((DisjointSet *)&v113, v66, v64);
LABEL_144:
            v11[v62] = v64;
            goto LABEL_129;
          }
          unsigned int v64 = v66;
        }
LABEL_143:
        if (v64) {
          goto LABEL_144;
        }
        int v67 = *(_DWORD *)v114;
        if (v111 > 65531)
        {
          v11[v62] = v114[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v114 >= v113) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v115[*(unsigned int *)v114] = v114[0];
          *(_DWORD *)int v114 = v67 + 1;
          v11[v62] = v67;
          ++v111;
        }
LABEL_129:
        ++v59;
      }
      while (v52 + v59);
      unsigned int v53 = v54 + v59 + 1;
      unsigned int v9 = v110;
      if (!--v50) {
        goto LABEL_150;
      }
    }
  }
  if (a2 == 8)
  {
    unsigned int v16 = v10 - 1;
    if (v10 != 1)
    {
      double v17 = (double)(int)a5 / 1000.0;
      unsigned int v18 = v9 - 2;
      int v107 = -v9;
      unsigned int v19 = v9;
      do
      {
        unsigned int v20 = &v8[3 * v19];
        if (*v20 == 0.0 || v20[1] == 0.0 || v20[2] == 0.0)
        {
          v11[v19] = 0;
          goto LABEL_28;
        }
        unsigned int v21 = v19 - v9;
        if (v11[v19 - v9]
          && fabs(v8[3 * (int)v19] * v8[3 * (int)v21]+ 0.0+ v8[3 * (int)v19 + 1] * v8[3 * (int)v21 + 1]+ v8[3 * (int)v19 + 2] * v8[3 * (int)v21 + 2]) > v17)
        {
          unsigned int v22 = (unsigned __int16)v11[v21];
          unsigned int v23 = v21 + 1;
          uint64_t v24 = (unsigned __int16)v11[v23];
          if (v22 == v24) {
            goto LABEL_83;
          }
        }
        else
        {
          unsigned int v22 = 0;
          unsigned int v23 = v21 + 1;
          uint64_t v24 = (unsigned __int16)v11[v23];
          if (!v11[v23]) {
            goto LABEL_83;
          }
        }
        if (v11[v23]
          && fabs(v8[3 * (int)v19] * v8[3 * (int)v23]+ 0.0+ v8[3 * (int)v19 + 1] * v8[3 * (int)v23 + 1]+ v8[3 * (int)v19 + 2] * v8[3 * (int)v23 + 2]) > v17)
        {
          if (v22)
          {
            DisjointSet::Unite((DisjointSet *)&v113, v24, v22);
LABEL_84:
            v11[v19] = v22;
            goto LABEL_28;
          }
          unsigned int v22 = v24;
        }
LABEL_83:
        if (v22) {
          goto LABEL_84;
        }
        int v44 = *(_DWORD *)v114;
        if (v111 > 65531)
        {
          v11[v19] = v114[0] - 1;
        }
        else
        {
          if (*(_DWORD *)v114 >= v113) {
            __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
          }
          v115[*(unsigned int *)v114] = v114[0];
          *(_DWORD *)int v114 = v44 + 1;
          v11[v19] = v44;
          ++v111;
        }
LABEL_28:
        if (v9 != 2)
        {
          unsigned int v109 = v16;
          int v27 = 0;
          unsigned int v28 = v107 + v19;
          while (1)
          {
            int v29 = v19 + v27;
            uint64_t v30 = v19 + v27 + 1;
            uint64_t v31 = &v8[3 * v30];
            if (*v31 != 0.0 && v31[1] != 0.0 && v31[2] != 0.0) {
              break;
            }
            v11[v30] = 0;
LABEL_33:
            if (v18 == ++v27)
            {
              v19 += v27;
              unsigned int v9 = v110;
              unsigned int v16 = v109;
              uint64_t v25 = v19 + 1;
              uint64_t v26 = &v8[3 * v25];
              if (*v26 != 0.0) {
                goto LABEL_66;
              }
              goto LABEL_18;
            }
          }
          if (v11[v29]
            && fabs(v8[3 * (int)v30] * v8[3 * v29]+ 0.0+ v8[3 * (int)v30 + 1] * v8[3 * v29 + 1]+ v8[3 * (int)v30 + 2] * v8[3 * v29 + 2]) > v17)
          {
            unsigned int v32 = (unsigned __int16)v11[v29];
            int v33 = v28 + v27;
            uint64_t v34 = (unsigned __int16)v11[v28 + v27];
            if (v32 == v34) {
              goto LABEL_46;
            }
          }
          else
          {
            unsigned int v32 = 0;
            int v33 = v28 + v27;
            uint64_t v34 = (unsigned __int16)v11[v28 + v27];
            if (!v11[v28 + v27]) {
              goto LABEL_46;
            }
          }
          if (v11[v33]
            && fabs(v8[3 * (int)v30] * v8[3 * v33]+ 0.0+ v8[3 * (int)v30 + 1] * v8[3 * v33 + 1]+ v8[3 * (int)v30 + 2] * v8[3 * v33 + 2]) > v17)
          {
            if (v32)
            {
              DisjointSet::Unite((DisjointSet *)&v113, v34, v32);
              goto LABEL_46;
            }
            unsigned int v32 = v34;
            int v35 = v33 + 1;
            uint64_t v36 = (unsigned __int16)v11[v33 + 1];
            if (v32 == v36)
            {
LABEL_52:
              int v37 = v33 + 2;
              uint64_t v38 = (unsigned __int16)v11[v33 + 2];
              if (v32 != v38) {
                goto LABEL_53;
              }
LABEL_58:
              if (!v32) {
                goto LABEL_61;
              }
              goto LABEL_59;
            }
          }
          else
          {
LABEL_46:
            int v35 = v33 + 1;
            uint64_t v36 = (unsigned __int16)v11[v33 + 1];
            if (v32 == v36) {
              goto LABEL_52;
            }
          }
          if (!v11[v35]
            || fabs(v8[3 * (int)v30] * v8[3 * v35]+ 0.0+ v8[3 * (int)v30 + 1] * v8[3 * v35 + 1]+ v8[3 * (int)v30 + 2] * v8[3 * v35 + 2]) <= v17)
          {
            goto LABEL_52;
          }
          if (v32)
          {
            DisjointSet::Unite((DisjointSet *)&v113, v36, v32);
            goto LABEL_52;
          }
          unsigned int v32 = v36;
          int v37 = v33 + 2;
          uint64_t v38 = (unsigned __int16)v11[v33 + 2];
          if (v32 == v38) {
            goto LABEL_58;
          }
LABEL_53:
          if (!v11[v37]
            || fabs(v8[3 * (int)v30] * v8[3 * v37]+ 0.0+ v8[3 * (int)v30 + 1] * v8[3 * v37 + 1]+ v8[3 * (int)v30 + 2] * v8[3 * v37 + 2]) <= v17)
          {
            goto LABEL_58;
          }
          if (v32)
          {
            DisjointSet::Unite((DisjointSet *)&v113, v38, v32);
          }
          else
          {
            LOWORD(v32) = v38;
            if (!v38)
            {
LABEL_61:
              int v39 = *(_DWORD *)v114;
              if (v111 > 65531)
              {
                v11[v30] = v114[0] - 1;
              }
              else
              {
                if (*(_DWORD *)v114 >= v113) {
                  __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
                }
                v115[*(unsigned int *)v114] = v114[0];
                *(_DWORD *)int v114 = v39 + 1;
                v11[v30] = v39;
                ++v111;
              }
              goto LABEL_33;
            }
          }
LABEL_59:
          v11[v30] = v32;
          goto LABEL_33;
        }
        uint64_t v25 = v19 + 1;
        uint64_t v26 = &v8[3 * v25];
        if (*v26 == 0.0) {
          goto LABEL_18;
        }
LABEL_66:
        if (v26[1] != 0.0 && v26[2] != 0.0)
        {
          int v40 = v25 - v9;
          int v41 = v25 - v9 - 1;
          if (v11[v41]
            && fabs(v8[3 * (int)v25] * v8[3 * v41]+ 0.0+ v8[3 * (int)v25 + 1] * v8[3 * v41 + 1]+ v8[3 * (int)v25 + 2] * v8[3 * v41 + 2]) > v17)
          {
            unsigned int v42 = (unsigned __int16)v11[v41];
            uint64_t v43 = (unsigned __int16)v11[v40];
            if (v42 == v43) {
              goto LABEL_90;
            }
LABEL_78:
            if (!v11[v40]
              || fabs(v8[3 * (int)v25] * v8[3 * v40]+ 0.0+ v8[3 * (int)v25 + 1] * v8[3 * v40 + 1]+ v8[3 * (int)v25 + 2] * v8[3 * v40 + 2]) <= v17)
            {
              goto LABEL_90;
            }
            if (v42)
            {
              DisjointSet::Unite((DisjointSet *)&v113, v43, v42);
LABEL_91:
              v11[v25] = v42;
              goto LABEL_19;
            }
            unsigned int v42 = v43;
          }
          else
          {
            unsigned int v42 = 0;
            uint64_t v43 = (unsigned __int16)v11[v40];
            if (v11[v40]) {
              goto LABEL_78;
            }
          }
LABEL_90:
          if (!v42)
          {
            int v45 = *(_DWORD *)v114;
            if (v111 > 65531)
            {
              v11[v25] = v114[0] - 1;
            }
            else
            {
              if (*(_DWORD *)v114 >= v113) {
                __assert_rtn("AddSet", "DisjointSet.hpp", 38, "m_nSize<m_nCapacity");
              }
              v115[*(unsigned int *)v114] = v114[0];
              *(_DWORD *)int v114 = v45 + 1;
              v11[v25] = v45;
              ++v111;
            }
            goto LABEL_19;
          }
          goto LABEL_91;
        }
LABEL_18:
        v11[v25] = 0;
LABEL_19:
        v19 += 2;
        --v16;
      }
      while (v16);
    }
  }
LABEL_150:
  unsigned int v68 = DisjointSet::Compact((DisjointSet *)&v113, v114[0], 0);
  int v69 = *(_WORD **)(v106 + 8);
  int v70 = v10 * v9;
  uint64_t v71 = a4;
  unsigned int v112 = v68;
  if (a4)
  {
    unint64_t v72 = v68 - 1;
    uint64_t v73 = a4[1];
    unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * ((v73 - *a4) >> 3);
    if (v72 <= v74)
    {
      if (v72 < v74)
      {
        uint64_t v77 = *a4 + 24 * v72;
        if (v73 != v77)
        {
          uint64_t v78 = a4[1];
          do
          {
            unint64_t v80 = *(void **)(v78 - 24);
            v78 -= 24;
            uint64_t v79 = v80;
            if (v80)
            {
              *(void *)(v73 - 16) = v79;
              operator delete(v79);
            }
            uint64_t v73 = v78;
          }
          while (v78 != v77);
        }
        a4[1] = v77;
      }
    }
    else
    {
      std::vector<ImageUtils::Blob>::__append((uint64_t)a4, v72 - v74);
    }
    if (v70)
    {
      int v81 = 0;
      while (1)
      {
        uint64_t v83 = (unsigned __int16)v115[(unsigned __int16)*v69];
        _WORD *v69 = v83;
        if (!v83) {
          goto LABEL_168;
        }
        unint64_t v84 = (v83 - 1);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71[1] - *v71) >> 3) <= v84) {
          std::vector<BOOL>::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v85 = *v71 + 24 * v84;
        uint64_t v87 = *(char **)(v85 + 8);
        unint64_t v86 = *(void *)(v85 + 16);
        if ((unint64_t)v87 >= v86) {
          break;
        }
        *(_DWORD *)uint64_t v87 = v81;
        uint64_t v82 = (uint64_t)(v87 + 4);
LABEL_167:
        *(void *)(v85 + 8) = v82;
LABEL_168:
        ++v81;
        ++v69;
        if (v81 == v70) {
          goto LABEL_192;
        }
      }
      BOOL v88 = *(char **)v85;
      uint64_t v89 = (uint64_t)&v87[-*(void *)v85];
      uint64_t v90 = v89 >> 2;
      unint64_t v91 = (v89 >> 2) + 1;
      if (v91 >> 62) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v92 = v86 - (void)v88;
      if (v92 >> 1 > v91) {
        unint64_t v91 = v92 >> 1;
      }
      if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v93 = v91;
      }
      if (v93)
      {
        if (v93 >> 62) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v94 = operator new(4 * v93);
        uint64_t v95 = &v94[4 * v90];
        *uint64_t v95 = v81;
        uint64_t v82 = (uint64_t)(v95 + 1);
        if (v87 == v88) {
          goto LABEL_189;
        }
      }
      else
      {
        uint64_t v94 = 0;
        uint64_t v95 = (_DWORD *)(4 * v90);
        *(_DWORD *)(4 * v90) = v81;
        uint64_t v82 = 4 * v90 + 4;
        if (v87 == v88)
        {
LABEL_189:
          *(void *)uint64_t v85 = v95;
          *(void *)(v85 + 8) = v82;
          *(void *)(v85 + 16) = &v94[4 * v93];
          if (v88) {
            operator delete(v88);
          }
          uint64_t v71 = a4;
          goto LABEL_167;
        }
      }
      unint64_t v96 = v87 - 4 - v88;
      if (v96 < 0x2C) {
        goto LABEL_206;
      }
      if ((unint64_t)(v87 - &v94[v89]) < 0x20) {
        goto LABEL_206;
      }
      uint64_t v97 = (v96 >> 2) + 1;
      uint64_t v98 = 4 * (v97 & 0x7FFFFFFFFFFFFFF8);
      unsigned int v99 = &v87[-v98];
      uint64_t v95 = (_DWORD *)((char *)v95 - v98);
      unsigned int v100 = &v94[4 * v90 - 16];
      unsigned int v101 = v87 - 16;
      uint64_t v102 = v97 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v103 = *(_OWORD *)v101;
        *(v100 - 1) = *((_OWORD *)v101 - 1);
        *unsigned int v100 = v103;
        v100 -= 2;
        v101 -= 32;
        v102 -= 8;
      }
      while (v102);
      uint64_t v87 = v99;
      if (v97 != (v97 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_206:
        do
        {
          int v104 = *((_DWORD *)v87 - 1);
          v87 -= 4;
          *--uint64_t v95 = v104;
        }
        while (v87 != v88);
      }
      goto LABEL_189;
    }
  }
  else if (v70 >= 1)
  {
    unint64_t v75 = v115;
    unsigned int v76 = v70 + 1;
    do
    {
      _WORD *v69 = v75[(unsigned __int16)*v69];
      ++v69;
      --v76;
    }
    while (v76 > 1);
  }
LABEL_192:
  DisjointSet::~DisjointSet((DisjointSet *)&v113);
  return v112;
}

void sub_25906CB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CBA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CBC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void sub_25906CC90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  DisjointSet::~DisjointSet((DisjointSet *)va);
  _Unwind_Resume(a1);
}

void std::vector<ImageUtils::Blob>::__append(uint64_t a1, unint64_t a2)
{
  unsigned int v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      size_t v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      unsigned int v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unsigned int v6 = *(void **)a1;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(void *)a1) >> 3);
    unint64_t v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v11 = (char *)operator new(24 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    int v13 = &v11[24 * v7];
    unsigned int v14 = &v11[24 * v10];
    size_t v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    unsigned int v16 = &v13[v15];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v14;
      if (!v5) {
        return;
      }
      goto LABEL_24;
    }
    do
    {
      double v17 = v13;
      *((void *)v13 - 2) = 0;
      *((void *)v13 - 1) = 0;
      long long v18 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)(v13 - 24) = v18;
      v13 -= 24;
      *((void *)v17 - 1) = v5[2];
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v6);
    unsigned int v19 = *(void **)a1;
    unsigned int v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v14;
    if (v5 != v19)
    {
      unsigned int v20 = v5;
      do
      {
        unsigned int v22 = (void *)*(v20 - 3);
        v20 -= 3;
        unsigned int v21 = v22;
        if (v22)
        {
          *(v5 - 2) = v21;
          operator delete(v21);
        }
        unsigned int v5 = v20;
      }
      while (v20 != v19);
      unsigned int v5 = v19;
    }
    if (v5)
    {
LABEL_24:
      operator delete(v5);
    }
  }
}

uint64_t std::__split_buffer<ImageUtils::Blob>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = v2 - 24;
        uint64_t v4 = *(void **)(v2 - 24);
        *(void *)(a1 + 16) = v2 - 24;
        if (!v4) {
          break;
        }
        *(void *)(v2 - 16) = v4;
        operator delete(v4);
        uint64_t v2 = *(void *)(a1 + 16);
        if (v2 == v3) {
          goto LABEL_6;
        }
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<ImageUtils::Blob>::__append(char **a1, unint64_t a2, uint64_t a3)
{
  unsigned int v6 = a1[2];
  unint64_t v7 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[24 * a2];
      uint64_t v14 = 24 * a2;
      do
      {
        *(void *)unint64_t v7 = 0;
        *((void *)v7 + 1) = 0;
        *((void *)v7 + 2) = 0;
        double v17 = *(const void **)a3;
        uint64_t v16 = *(void *)(a3 + 8);
        int64_t v18 = v16 - *(void *)a3;
        if (v16 != *(void *)a3)
        {
          if (v18 < 0) {
            std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
          }
          unsigned int v19 = (char *)operator new(v16 - *(void *)a3);
          *(void *)unint64_t v7 = v19;
          *((void *)v7 + 1) = v19;
          size_t v15 = &v19[4 * (v18 >> 2)];
          *((void *)v7 + 2) = v15;
          memcpy(v19, v17, v18);
          *((void *)v7 + 1) = v15;
        }
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      unint64_t v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - *a1) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      size_t v12 = (char *)operator new(24 * v11);
    }
    else
    {
      size_t v12 = 0;
    }
    unsigned int v20 = &v12[24 * v8];
    uint64_t v36 = &v12[24 * v11];
    uint64_t v21 = 24 * a2;
    unsigned int v22 = &v20[24 * a2];
    unsigned int v23 = v20;
    do
    {
      *(void *)unsigned int v23 = 0;
      *((void *)v23 + 1) = 0;
      *((void *)v23 + 2) = 0;
      uint64_t v26 = *(const void **)a3;
      uint64_t v25 = *(void *)(a3 + 8);
      int64_t v27 = v25 - *(void *)a3;
      if (v25 != *(void *)a3)
      {
        if (v27 < 0) {
          std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
        }
        unsigned int v28 = (char *)operator new(v25 - *(void *)a3);
        *(void *)unsigned int v23 = v28;
        *((void *)v23 + 1) = v28;
        uint64_t v24 = &v28[4 * (v27 >> 2)];
        *((void *)v23 + 2) = v24;
        memcpy(v28, v26, v27);
        *((void *)v23 + 1) = v24;
      }
      v23 += 24;
      v21 -= 24;
    }
    while (v21);
    uint64_t v30 = *a1;
    int v29 = a1[1];
    if (v29 == *a1)
    {
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
    }
    else
    {
      do
      {
        *((void *)v20 - 3) = 0;
        *((void *)v20 - 2) = 0;
        v20 -= 24;
        *((void *)v20 + 2) = 0;
        long long v31 = *(_OWORD *)(v29 - 24);
        v29 -= 24;
        *(_OWORD *)unsigned int v20 = v31;
        *((void *)v20 + 2) = *((void *)v29 + 2);
        *(void *)int v29 = 0;
        *((void *)v29 + 1) = 0;
        *((void *)v29 + 2) = 0;
      }
      while (v29 != v30);
      unsigned int v32 = *a1;
      int v29 = a1[1];
      *a1 = v20;
      a1[1] = v22;
      a1[2] = v36;
      if (v29 != v32)
      {
        int v33 = v29;
        do
        {
          int v35 = (void *)*((void *)v33 - 3);
          v33 -= 24;
          uint64_t v34 = v35;
          if (v35)
          {
            *((void *)v29 - 2) = v34;
            operator delete(v34);
          }
          int v29 = v33;
        }
        while (v33 != v32);
        int v29 = v32;
      }
    }
    if (v29) {
      operator delete(v29);
    }
  }
}

void sub_25906D1C0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25906D1C8(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_25906D1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25906D200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14 = *(void **)v12;
  if (*(void *)v12)
  {
    *(void *)(v12 + 8) = v14;
    operator delete(v14);
  }
  a12 = v12;
  std::__split_buffer<ImageUtils::Blob>::~__split_buffer((uint64_t)&a10);
  _Unwind_Resume(a1);
}

char *CalculateWeightsForScale<double>(char *result, int a2, signed int *a3, _DWORD *a4, double a5, double a6, double a7)
{
  int v7 = vcvtmd_s64_f64(a6 + a5 * -0.5);
  signed int v8 = v7;
  signed int v9 = v7 + a2;
  double v10 = (a6 - (double)v7) * a7;
  double v11 = fabs(v10);
  double v12 = v10 * v10;
  double v13 = v10 * v10 * v11;
  if (v11 <= 1.0)
  {
    double v14 = v12 * -2.5 + v13 * 1.5 + 1.0;
    if (v14 != 0.0) {
      goto LABEL_12;
    }
  }
  else if (v11 <= 2.0)
  {
    double v14 = v12 * 2.5 + v13 * -0.5 + v11 * -4.0 + 2.0;
    if (v14 != 0.0) {
      goto LABEL_12;
    }
  }
  do
  {
    double v15 = (a6 - (double)++v8) * a7;
    double v16 = fabs(v15);
    double v17 = v15 * v15;
    double v18 = v15 * v15 * v16;
    if (v16 <= 1.0)
    {
      double v14 = v17 * -2.5 + v18 * 1.5 + 1.0;
    }
    else
    {
      double v14 = 0.0;
      if (v16 <= 2.0) {
        double v14 = v17 * 2.5 + v18 * -0.5 + v16 * -4.0 + 2.0;
      }
    }
  }
  while (v14 == 0.0);
LABEL_12:
  unsigned int v19 = (double *)*((void *)result + 1);
  *unsigned int v19 = v14;
  unsigned int v20 = v19 + 1;
  if (v8 >= v9) {
    goto LABEL_18;
  }
  uint64_t v21 = (v9 + ~v8);
  if (v21 >= 3)
  {
    int32x2_t v23 = vadd_s32(vdup_n_s32(v8), (int32x2_t)0x100000000);
    float64x2_t v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6, 0);
    uint64_t v25 = v21 + 1;
    __asm { FMOV            V7.2D, #1.0 }
    uint64_t v31 = (v21 + 1) & 0x1FFFFFFFCLL;
    __asm { FMOV            V16.2D, #-2.5 }
    v20 += v31;
    signed int v22 = v8 + v31;
    int v33 = (int8x16_t *)(v19 + 3);
    __asm
    {
      FMOV            V17.2D, #1.5
      FMOV            V18.2D, #2.0
      FMOV            V19.2D, #2.5
      FMOV            V20.2D, #-0.5
      FMOV            V21.2D, #-4.0
    }
    uint64_t v39 = v31;
    do
    {
      int32x2_t v40 = vadd_s32(v23, (int32x2_t)0x100000001);
      int32x2_t v41 = vadd_s32(v23, (int32x2_t)0x300000003);
      v42.i64[0] = v40.i32[0];
      v42.i64[1] = v40.i32[1];
      float64x2_t v43 = vcvtq_f64_s64(v42);
      v42.i64[0] = v41.i32[0];
      v42.i64[1] = v41.i32[1];
      float64x2_t v44 = vmulq_n_f64(vsubq_f64(v24, v43), a7);
      float64x2_t v45 = vmulq_n_f64(vsubq_f64(v24, vcvtq_f64_s64(v42)), a7);
      float64x2_t v46 = vabsq_f64(v44);
      float64x2_t v47 = vabsq_f64(v45);
      float64x2_t v48 = vmulq_f64(v44, v44);
      float64x2_t v49 = vmulq_f64(v45, v45);
      float64x2_t v50 = vmulq_f64(v48, v46);
      float64x2_t v51 = vmulq_f64(v49, v47);
      int8x16_t v52 = (int8x16_t)vcgeq_f64(_Q7, v46);
      int8x16_t v53 = (int8x16_t)vcgeq_f64(_Q7, v47);
      int8x16_t v54 = (int8x16_t)vcgeq_f64(_Q18, v46);
      int8x16_t v55 = (int8x16_t)vcgeq_f64(_Q18, v47);
      int8x16_t v56 = vbicq_s8(vbslq_s8(vbicq_s8(v54, v52), (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v48, _Q19), _Q20, v50), _Q21, v46), _Q18), (int8x16_t)vaddq_f64(vmlaq_f64(vmulq_f64(v48, _Q16), _Q17, v50), _Q7)), vbicq_s8(vmvnq_s8(v52), v54));
      int8x16_t v57 = vbicq_s8(vbslq_s8(vbicq_s8(v55, v53), (int8x16_t)vaddq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v49, _Q19), _Q20, v51), _Q21, v47), _Q18), (int8x16_t)vaddq_f64(vmlaq_f64(vmulq_f64(v49, _Q16), _Q17, v51), _Q7)), vbicq_s8(vmvnq_s8(v53), v55));
      v33[-1] = v56;
      int8x16_t *v33 = v57;
      double v14 = v14 + *(double *)v56.i64 + *(double *)&v56.i64[1] + *(double *)v57.i64 + *(double *)&v57.i64[1];
      int32x2_t v23 = vadd_s32(v23, (int32x2_t)0x400000004);
      v33 += 2;
      v39 -= 4;
    }
    while (v39);
    if (v25 == v31) {
      goto LABEL_18;
    }
  }
  else
  {
    signed int v22 = v8;
  }
  do
  {
    double v77 = (a6 - (double)++v22) * a7;
    double v78 = fabs(v77);
    double v79 = v77 * v77;
    double v80 = v77 * v77 * v78;
    if (v78 <= 1.0)
    {
      double v76 = v79 * -2.5 + v80 * 1.5 + 1.0;
    }
    else
    {
      double v76 = 0.0;
      if (v78 <= 2.0) {
        double v76 = v79 * 2.5 + v80 * -0.5 + v78 * -4.0 + 2.0;
      }
    }
    *v20++ = v76;
    double v14 = v14 + v76;
  }
  while (v9 != v22);
LABEL_18:
  uint64_t v58 = 0;
  int v59 = v20 - 1;
  do
    double v60 = v59[v58--];
  while (v60 == 0.0);
  int v61 = v7 + a2 - v8 + 2;
  int v62 = v58 + v7 + a2 + 1;
  int v63 = v61 + v58;
  if (v63)
  {
    unsigned int v64 = (float64x2_t *)*((void *)result + 1);
    unint64_t v65 = ~(unint64_t)v64;
    unint64_t v66 = (unint64_t)&v64->f64[v63];
    int v67 = &v64->f64[1];
    if (v66 <= (unint64_t)&v64->f64[1]) {
      unint64_t v66 = (unint64_t)&v64->f64[1];
    }
    unint64_t v68 = v66 + v65;
    int v69 = (double *)*((void *)result + 1);
    if (v68 < 0x18) {
      goto LABEL_29;
    }
    uint64_t v70 = (v68 >> 3) + 1;
    int v69 = &v64->f64[v70 & 0x3FFFFFFFFFFFFFFCLL];
    float64x2_t v71 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0);
    unint64_t v72 = v64 + 1;
    uint64_t result = (char *)&v64->f64[v63];
    if (result > (char *)v67) {
      int v67 = &v64->f64[v63];
    }
    uint64_t v73 = ((((unint64_t)v67 + v65) >> 3) + 1) & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v74 = vdivq_f64(*v72, v71);
      v72[-1] = vdivq_f64(v72[-1], v71);
      float64x2_t *v72 = v74;
      v72 += 2;
      v73 -= 4;
    }
    while (v73);
    if (v70 != (v70 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_29:
      unint64_t v75 = (unint64_t)&v64->f64[v63];
      do
      {
        double *v69 = *v69 / v14;
        ++v69;
      }
      while ((unint64_t)v69 < v75);
    }
  }
  *a3 = v8;
  *a4 = v62;
  return result;
}

void Matrix<float>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717340;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void AdaptiveThreshold<double,true>()
{
}

void ImageUtils::ErodeRect2x2()
{
}

void ErodeOrDilateRect3x3<false>()
{
}

void ErodeOrDilateRect2x2<true>()
{
}

void ImageUtils::Filter2<double>()
{
  __assert_rtn("Filter2", "ImageUtils.hpp", 196, "&im1 != res");
}

void DisjointSet::Unite()
{
  __assert_rtn("SetRoot", "DisjointSet.hpp", 105, "nRoot <= i");
}

{
  __assert_rtn("SetRoot", "DisjointSet.hpp", 109, "nRoot <= i");
}

uint64_t Algo::asin(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

void trigoThreadSingleArg(double *a1, double *a2, double (*a3)(double), int a4)
{
  if (a4 >= 1)
  {
    int v4 = a4;
    do
    {
      double v8 = *a1++;
      *a2++ = a3(v8);
      --v4;
    }
    while (v4);
  }
}

uint64_t Algo::sin(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::atan(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::atan2(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!qword_26A0E5058)
  {
    unsigned int v3 = std::thread::hardware_concurrency();
    if (v3) {
      int v4 = v3;
    }
    else {
      int v4 = 2;
    }
    _MergedGlobals = v4;
    operator new[]();
  }
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  unsigned int v6 = *(_DWORD *)(a2 + 20);
  if (*(void *)(a3 + 32) < 8 * v5 * (unint64_t)v6)
  {
    if (*(void *)(a3 + 8) && *(unsigned char *)(a3 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v6;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>();
  }
  return 0;
}

void trigoThreadMultipleArg(double *a1, double *a2, double *a3, double (*a4)(double, double), int a5)
{
  if (a5 >= 1)
  {
    int v5 = a5;
    do
    {
      double v10 = *a1++;
      double v11 = v10;
      double v12 = *a2++;
      *a3++ = a4(v11, v12);
      --v5;
    }
    while (v5);
  }
}

uint64_t Algo::tan(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::acos(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::cos(uint64_t a1, uint64_t a2)
{
  if (!qword_26A0E5058)
  {
    unsigned int v2 = std::thread::hardware_concurrency();
    if (v2) {
      int v3 = v2;
    }
    else {
      int v3 = 2;
    }
    _MergedGlobals = v3;
    operator new[]();
  }
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  unsigned int v5 = *(_DWORD *)(a1 + 20);
  if (*(void *)(a2 + 32) < 8 * v4 * (unint64_t)v5)
  {
    if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
      MEMORY[0x25A2D62A0]();
    }
    operator new[]();
  }
  *(_DWORD *)(a2 + 16) = v4;
  *(_DWORD *)(a2 + 20) = v5;
  if (_MergedGlobals)
  {
    if (_MergedGlobals == 1) {
      std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
    }
    std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>();
  }
  return 0;
}

uint64_t Algo::cart2sph(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v11 = *(_DWORD *)(a1 + 16);
  unsigned int v12 = *(_DWORD *)(a1 + 20);
  unint64_t v65 = &unk_2707171D8;
  if (v12 * v11) {
    operator new[]();
  }
  uint64_t v66 = 0;
  unint64_t v67 = __PAIR64__(v12, v11);
  char v68 = 0;
  unint64_t v69 = 8 * v11 * (unint64_t)v12;
  vDSPVsq<double>(*(const double **)(a1 + 8), 1, 0, 1, 0);
  unsigned int v13 = *(_DWORD *)(a2 + 16);
  unsigned int v14 = *(_DWORD *)(a2 + 20);
  double v60 = &unk_2707171D8;
  if (v14 * v13) {
    operator new[]();
  }
  uint64_t v61 = 0;
  unint64_t v62 = __PAIR64__(v14, v13);
  char v63 = 0;
  unint64_t v64 = 8 * v13 * (unint64_t)v14;
  vDSPVsq<double>(*(const double **)(a2 + 8), 1, 0, 1, 0);
  Matrix<double>::operator+((uint64_t)&v65, (uint64_t)&v60, (uint64_t)&v70);
  unint64_t v75 = &unk_2707171D8;
  if (HIDWORD(v72) * v72) {
    operator new[]();
  }
  double v76 = 0;
  unint64_t v77 = v72;
  char v78 = 0;
  unint64_t v79 = 8 * v72 * (unint64_t)HIDWORD(v72);
  uint64_t v70 = &unk_2707171D8;
  if (v71 && v73)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v71 = 0;
    size_t v74 = 0;
    char v73 = 0;
  }
  unint64_t v72 = 0;
  double v60 = &unk_2707171D8;
  if (v61 && v63) {
    MEMORY[0x25A2D62A0]();
  }
  unint64_t v65 = &unk_2707171D8;
  if (v66 && v68) {
    MEMORY[0x25A2D62A0]();
  }
  unsigned int v15 = v77;
  unsigned int v16 = HIDWORD(v77);
  if (a6)
  {
    double v60 = &unk_2707171D8;
    if (HIDWORD(v77) * v77) {
      operator new[]();
    }
    uint64_t v61 = 0;
    unint64_t v62 = v77;
    char v63 = 0;
    unint64_t v64 = 8 * v77 * (unint64_t)HIDWORD(v77);
    vDSPVsq<double>(v76, 1, 0, 1, 0);
    unsigned int v18 = *(_DWORD *)(a3 + 16);
    unsigned int v19 = *(_DWORD *)(a3 + 20);
    int8x16_t v54 = &unk_2707171D8;
    if (v19 * v18) {
      operator new[]();
    }
    uint64_t v55 = 0;
    unsigned int v56 = v18;
    unsigned int v57 = v19;
    char v58 = 0;
    unint64_t v59 = 8 * v18 * (unint64_t)v19;
    vDSPVsq<double>(*(const double **)(a3 + 8), 1, 0, 1, 0);
    Matrix<double>::operator+((uint64_t)&v60, (uint64_t)&v54, (uint64_t)&v65);
    int v20 = HIDWORD(v67);
    uint64_t v70 = &unk_2707171D8;
    if (HIDWORD(v67) * v67) {
      operator new[]();
    }
    uint64_t v71 = 0;
    unint64_t v72 = v67;
    char v73 = 0;
    size_t v21 = 8 * v67 * (unint64_t)HIDWORD(v67);
    size_t v74 = v21;
    signed int v22 = *(void **)(a6 + 8);
    if (*(void *)(a6 + 32) < v21)
    {
      if (v22)
      {
        if (*(unsigned char *)(a6 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
      }
      operator new[]();
    }
    *(_DWORD *)(a6 + 16) = v67;
    *(_DWORD *)(a6 + 20) = v20;
    memcpy(v22, 0, v21);
    uint64_t v70 = &unk_2707171D8;
    if (v71 && v73)
    {
      MEMORY[0x25A2D62A0]();
      uint64_t v71 = 0;
      size_t v74 = 0;
      char v73 = 0;
    }
    unint64_t v72 = 0;
    unint64_t v65 = &unk_2707171D8;
    uint64_t v17 = a5;
    if (v66 && v68)
    {
      MEMORY[0x25A2D62A0]();
      uint64_t v66 = 0;
      unint64_t v69 = 0;
      char v68 = 0;
    }
    unint64_t v67 = 0;
    int8x16_t v54 = &unk_2707171D8;
    if (v55 && v58) {
      MEMORY[0x25A2D62A0]();
    }
    double v60 = &unk_2707171D8;
    if (v61 && v63) {
      MEMORY[0x25A2D62A0]();
    }
    unsigned int v15 = v77;
    unsigned int v16 = HIDWORD(v77);
  }
  else
  {
    uint64_t v17 = a5;
  }
  uint64_t v23 = *(void *)(a3 + 8);
  unsigned int v24 = *(_DWORD *)(a3 + 16);
  unsigned int v25 = *(_DWORD *)(a3 + 20);
  float64x2_t v49 = &unk_2707171D8;
  uint64_t v50 = v23;
  unint64_t v53 = 8 * v24 * (unint64_t)v25;
  unint64_t v51 = __PAIR64__(v25, v24);
  char v52 = 0;
  float64x2_t v44 = &unk_2707171D8;
  float64x2_t v45 = v76;
  unint64_t v48 = 8 * v15 * (unint64_t)v16;
  unint64_t v46 = __PAIR64__(v16, v15);
  char v47 = 0;
  Algo::atan2((uint64_t)&v49, (uint64_t)&v44, v17);
  float64x2_t v44 = &unk_2707171D8;
  if (v45 && v47)
  {
    MEMORY[0x25A2D62A0]();
    float64x2_t v45 = 0;
    unint64_t v48 = 0;
    char v47 = 0;
  }
  unint64_t v46 = 0;
  float64x2_t v49 = &unk_2707171D8;
  if (v50 && v52)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v50 = 0;
    unint64_t v53 = 0;
    char v52 = 0;
  }
  unint64_t v51 = 0;
  uint64_t v26 = *(void *)(a2 + 8);
  unsigned int v27 = *(_DWORD *)(a2 + 16);
  unsigned int v28 = *(_DWORD *)(a2 + 20);
  uint64_t v39 = &unk_2707171D8;
  uint64_t v40 = v26;
  unint64_t v43 = 8 * v27 * (unint64_t)v28;
  unint64_t v41 = __PAIR64__(v28, v27);
  char v42 = 0;
  uint64_t v29 = *(void *)(a1 + 8);
  unsigned int v30 = *(_DWORD *)(a1 + 16);
  unsigned int v31 = *(_DWORD *)(a1 + 20);
  uint64_t v34 = &unk_2707171D8;
  uint64_t v35 = v29;
  unint64_t v38 = 8 * v30 * (unint64_t)v31;
  unint64_t v36 = __PAIR64__(v31, v30);
  char v37 = 0;
  Algo::atan2((uint64_t)&v39, (uint64_t)&v34, a4);
  uint64_t v34 = &unk_2707171D8;
  if (v35 && v37)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v35 = 0;
    unint64_t v38 = 0;
    char v37 = 0;
  }
  unint64_t v36 = 0;
  uint64_t v39 = &unk_2707171D8;
  if (v40 && v42)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v40 = 0;
    unint64_t v43 = 0;
    char v42 = 0;
  }
  unint64_t v41 = 0;
  unint64_t v75 = &unk_2707171D8;
  if (v76 && v78) {
    MEMORY[0x25A2D62A0]();
  }
  return 0;
}

void sub_25906F3E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  Matrix<double>::~Matrix(v38 - 168);
  Matrix<double>::~Matrix(v38 - 208);
  Matrix<double>::~Matrix((uint64_t)&a33);
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix(v38 - 128);
  _Unwind_Resume(a1);
}

void sub_25906F458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix(v38 - 128);
  _Unwind_Resume(a1);
}

void sub_25906F474(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  Matrix<double>::~Matrix(v38 - 168);
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix(v38 - 208);
  _Unwind_Resume(a1);
}

void sub_25906F498(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1 - 208);
  _Unwind_Resume(a1);
}

void sub_25906F4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix(v5 - 128);
  _Unwind_Resume(a1);
}

void sub_25906F4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  Matrix<double>::~Matrix((uint64_t)&a23);
  Matrix<double>::~Matrix((uint64_t)&a28);
  Matrix<double>::~Matrix(v28 - 128);
  _Unwind_Resume(a1);
}

void sub_25906F4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  Matrix<double>::~Matrix((uint64_t)&a38);
  Matrix<double>::~Matrix(v38 - 208);
  _Unwind_Resume(a1);
}

void sub_25906F514(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1 - 208);
  _Unwind_Resume(a1);
}

void Matrix<double>::operator+(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v3 = *(_DWORD *)(a2 + 20);
  if (v3 != *(_DWORD *)(a1 + 20) || (unsigned int v4 = *(_DWORD *)(a2 + 16), v4 != *(_DWORD *)(a1 + 16))) {
    Matrix<double>::DotDiv();
  }
  *(void *)a3 = &unk_2707171D8;
  if (v4 * v3) {
    operator new[]();
  }
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = v4;
  *(_DWORD *)(a3 + 20) = v3;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 8 * v3 * (unint64_t)v4;
  vDSPVadd<double>(*(const double **)(a1 + 8), 1, *(const double **)(a2 + 8), 1, 0, 1, 0);
}

void sub_25906F610(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Algo::LinearSpace(Algo *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  double v5 = a2;
  *(void *)a4 = &unk_2707171D8;
  if (this) {
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = 0;
  *(unsigned char *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = 0;
  *(void *)a4 = &unk_270717208;
  *(void *)(a4 + 8) = 0;
  double v4 = (a3 - a2) / ((double)0 + -1.0);
  vDSPVramp<double>(&v5, &v4, 0, 1, 0);
}

void sub_25906F718(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1);
  _Unwind_Resume(a1);
}

void Algo::LinearSpaceByStep(Algo *this@<X0>, double a2@<D0>, double a3@<D1>, uint64_t a4@<X8>)
{
  double v8 = a2;
  unsigned int v5 = (int)(a3 - a2) / this;
  *(void *)a4 = &unk_2707171D8;
  int v6 = v5 + 1;
  if (v5 != -1) {
    operator new[]();
  }
  *(_DWORD *)(a4 + 16) = 1;
  *(_DWORD *)(a4 + 20) = v6;
  *(unsigned char *)(a4 + 24) = v6 != 0;
  *(void *)(a4 + 32) = 0;
  *(void *)a4 = &unk_270717208;
  *(void *)(a4 + 8) = 0;
  double v7 = (double)this;
  vDSPVramp<double>(&v8, &v7, 0, 1, v6);
}

void sub_25906F810(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1);
  _Unwind_Resume(a1);
}

const double *Algo::Fspecial@<X0>(int a1@<W0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>)
{
  *(void *)a3 = &unk_2707171D8;
  if (a2 * a2) {
    operator new[]();
  }
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = a2;
  *(_DWORD *)(a3 + 20) = a2;
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 8 * a2 * a2;
  unint64_t v84 = &unk_2707171D8;
  uint64_t v85 = 0;
  unsigned int v86 = a2;
  unsigned int v87 = a2;
  char v88 = 0;
  uint64_t v89 = 8 * a2 * a2;
  char v78 = &unk_2707171D8;
  unint64_t v79 = 0;
  unsigned int v80 = a2;
  unsigned int v81 = a2;
  char v82 = 0;
  uint64_t v83 = 8 * a2 * a2;
  if (a1)
  {
    char v78 = &unk_2707171D8;
    goto LABEL_67;
  }
  double v6 = (double)(int)(a2 - 1) * 0.5;
  double v58 = -v6;
  char v73 = &unk_2707171D8;
  if (a2) {
    operator new[]();
  }
  uint64_t v75 = 1;
  char v76 = 0;
  uint64_t v77 = 0;
  char v73 = &unk_270717208;
  uint64_t v74 = 0;
  double v52 = (v6 + v6) / ((double)0 + -1.0);
  vDSPVramp<double>(&v58, &v52, 0, 1, 0);
  char v68 = &unk_2707171D8;
  uint64_t v69 = v74;
  unint64_t v72 = 8 * v75 * (unint64_t)HIDWORD(v75);
  uint64_t v70 = v75;
  char v71 = 0;
  char v63 = &unk_2707171D8;
  uint64_t v64 = v74;
  unint64_t v67 = v72;
  uint64_t v65 = v75;
  char v66 = 0;
  Algo::MeshGrid<double>((uint64_t)&v68, (uint64_t)&v63, (uint64_t)&v84, (uint64_t)&v78);
  char v63 = &unk_2707171D8;
  if (v64 && v66)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v64 = 0;
    unint64_t v67 = 0;
    char v66 = 0;
  }
  uint64_t v65 = 0;
  char v68 = &unk_2707171D8;
  if (v69 && v71)
  {
    MEMORY[0x25A2D62A0]();
    uint64_t v69 = 0;
    unint64_t v72 = 0;
    char v71 = 0;
  }
  uint64_t v70 = 0;
  double v52 = COERCE_DOUBLE(&unk_2707171D8);
  if (v87 * v86) {
    operator new[]();
  }
  uint64_t v53 = 0;
  unsigned int v54 = v86;
  unsigned int v55 = v87;
  char v56 = 0;
  unint64_t v57 = 8 * v86 * (unint64_t)v87;
  vDSPVsq<double>(v85, 1, 0, 1, 0);
  unint64_t v46 = &unk_2707171D8;
  if (v81 * v80) {
    operator new[]();
  }
  uint64_t v47 = 0;
  unsigned int v48 = v80;
  unsigned int v49 = v81;
  char v50 = 0;
  unint64_t v51 = 8 * v80 * (unint64_t)v81;
  vDSPVsq<double>(v79, 1, 0, 1, 0);
  Matrix<double>::operator+((uint64_t)&v52, (uint64_t)&v46, (uint64_t)&v58);
  unint64_t v46 = &unk_2707171D8;
  if (v47 && v50) {
    MEMORY[0x25A2D62A0]();
  }
  double v52 = COERCE_DOUBLE(&unk_2707171D8);
  if (v53 && v56) {
    MEMORY[0x25A2D62A0]();
  }
  unsigned int v7 = v60;
  unsigned int v8 = v61;
  uint64_t v9 = v61 * v60;
  if (v9)
  {
    double v10 = -1.0 / ((a4 + a4) * a4);
    uint64_t v11 = (char *)__src;
    uint64_t v12 = (char *)__src + 8 * v9;
    if (v12 <= (char *)__src + 8) {
      uint64_t v12 = (char *)__src + 8;
    }
    unint64_t v13 = (unint64_t)&v12[~(unint64_t)__src];
    unsigned int v14 = (double *)__src;
    if (v13 < 0x18) {
      goto LABEL_31;
    }
    uint64_t v15 = (v13 >> 3) + 1;
    unsigned int v14 = (double *)((char *)__src + 8 * (v15 & 0x3FFFFFFFFFFFFFFCLL));
    unsigned int v16 = (float64x2_t *)((char *)__src + 16);
    uint64_t v17 = v15 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v18 = vmulq_n_f64(*v16, v10);
      v16[-1] = vmulq_n_f64(v16[-1], v10);
      *unsigned int v16 = v18;
      v16 += 2;
      v17 -= 4;
    }
    while (v17);
    if (v15 != (v15 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      unsigned int v19 = (double *)&v11[8 * v9];
      do
      {
        *unsigned int v14 = v10 * *v14;
        ++v14;
      }
      while (v14 < v19);
    }
  }
  int v20 = *(void **)(a3 + 8);
  if (*(void *)(a3 + 32) < 8 * v7 * (unint64_t)v8)
  {
    if (v20)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v7;
  *(_DWORD *)(a3 + 20) = v8;
  memcpy(v20, __src, 8 * v7 * (unint64_t)v8);
  size_t v21 = *(const double **)(a3 + 8);
  uint64_t v22 = (*(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16));
  if (v22)
  {
    unint64_t v23 = (unint64_t)&v21[v22];
    if (v23 <= (unint64_t)(v21 + 1)) {
      unint64_t v23 = (unint64_t)(v21 + 1);
    }
    unint64_t v24 = v23 + ~(unint64_t)v21;
    if (v24 >= 8)
    {
      uint64_t v26 = (v24 >> 3) + 1;
      unsigned int v25 = (long double *)&v21[v26 & 0x3FFFFFFFFFFFFFFELL];
      uint64_t v27 = v26 & 0x3FFFFFFFFFFFFFFELL;
      uint64_t v28 = *(long double **)(a3 + 8);
      do
      {
        __char x = *(_OWORD *)v28;
        long double v45 = exp(v28[1]);
        *(double *)&long long v29 = exp(*(long double *)&__x);
        *((long double *)&v29 + 1) = v45;
        *(_OWORD *)uint64_t v28 = v29;
        v28 += 2;
        v27 -= 2;
      }
      while (v27);
      if (v26 == (v26 & 0x3FFFFFFFFFFFFFFELL)) {
        goto LABEL_48;
      }
    }
    else
    {
      unsigned int v25 = *(long double **)(a3 + 8);
    }
    unsigned int v30 = &v21[v22];
    do
    {
      long double *v25 = exp(*v25);
      ++v25;
    }
    while (v25 < v30);
LABEL_48:
    size_t v21 = *(const double **)(a3 + 8);
  }
  double v52 = 0.0;
  vDSPMax<double>(v21, 1, &v52, v22);
  unsigned int v31 = *(float64x2_t **)(a3 + 8);
  v32.n128_u64[0] = 0;
  uint64_t v33 = (*(_DWORD *)(a3 + 20) * *(_DWORD *)(a3 + 16));
  if (v33)
  {
    unint64_t v34 = (unint64_t)&v31->f64[v33];
    if (v34 <= (unint64_t)&v31->f64[1]) {
      unint64_t v34 = (unint64_t)&v31->f64[1];
    }
    unint64_t v35 = v34 + ~(unint64_t)v31;
    unint64_t v36 = *(double **)(a3 + 8);
    if (v35 < 0x18) {
      goto LABEL_56;
    }
    uint64_t v37 = (v35 >> 3) + 1;
    unint64_t v36 = &v31->f64[v37 & 0x3FFFFFFFFFFFFFFCLL];
    float64x2_t v38 = (float64x2_t)vdupq_lane_s64(0, 0);
    uint64_t v39 = v31 + 1;
    uint64_t v40 = v37 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v41 = vdivq_f64(*v39, v38);
      v39[-1] = vdivq_f64(v39[-1], v38);
      *uint64_t v39 = v41;
      v39 += 2;
      v40 -= 4;
    }
    while (v40);
    if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_56:
      unint64_t v42 = (unint64_t)&v31->f64[v33];
      do
      {
        *unint64_t v36 = *v36 / 0.0;
        ++v36;
      }
      while ((unint64_t)v36 < v42);
    }
  }
  double v58 = COERCE_DOUBLE(&unk_2707171D8);
  if (__src && v62) {
    MEMORY[0x25A2D62A0](v32);
  }
  char v73 = &unk_2707171D8;
  if (v74 && v76) {
    MEMORY[0x25A2D62A0](v32);
  }
  char v78 = &unk_2707171D8;
  if (v79 && v82) {
    MEMORY[0x25A2D62A0]();
  }
LABEL_67:
  unint64_t v84 = &unk_2707171D8;
  uint64_t result = v85;
  if (v85 && v88) {
    return (const double *)MEMORY[0x25A2D62A0]();
  }
  return result;
}

void sub_259070080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  Matrix<double>::~Matrix((uint64_t)&a26);
  MatrixNxPts<1u,double>::~MatrixNxPts(v27 - 224);
  Matrix<double>::~Matrix(v27 - 184);
  Matrix<double>::~Matrix(v27 - 144);
  Matrix<double>::~Matrix(v26);
  _Unwind_Resume(a1);
}

void sub_25907010C()
{
}

void sub_259070114(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v2 - 144);
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void sub_259070130(_Unwind_Exception *a1)
{
  Matrix<double>::~Matrix(v1);
  _Unwind_Resume(a1);
}

void Algo::calcWeightedCenterOfMass(uint64_t a1, void *a2, uint64_t a3, long double a4)
{
  uint64_t v6 = a2[1] - *a2;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
  uint64_t v23 = -1431655765 * (v6 >> 3);
  if (*(void *)(a3 + 32) < 8 * (v23 + 2 * (unint64_t)v7))
  {
    if (*(void *)(a3 + 8))
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = 3;
  *(_DWORD *)(a3 + 20) = v7;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  if (v7)
  {
    unsigned int v8 = 0;
    unsigned int v25 = 0;
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)(a1 + 8);
    int v11 = *(_DWORD *)(a1 + 16);
    while (1)
    {
      uint64_t v12 = (char **)(*a2 + 24 * v9);
      if (&v26 != (int **)v12)
      {
        std::vector<unsigned int>::__assign_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v26, *v12, v12[1], (v12[1] - *v12) >> 2);
        unsigned int v8 = (char *)v26;
        unsigned int v25 = v27;
      }
      unint64_t v13 = (unint64_t)(v25 - v8) >> 2;
      if ((int)v13 >= 1) {
        break;
      }
      double v18 = 0.0;
      double v17 = 0.0;
      double v15 = 0.0;
      if (v13) {
        goto LABEL_17;
      }
LABEL_9:
      if (++v9 == v23)
      {
        if (v8)
        {
          uint64_t v27 = v8;
          operator delete(v8);
        }
        return;
      }
    }
    uint64_t v14 = ((unint64_t)(v25 - v8) >> 2);
    double v15 = 0.0;
    unsigned int v16 = v8;
    double v17 = 0.0;
    double v18 = 0.0;
    do
    {
      uint64_t v19 = *(int *)v16;
      v16 += 4;
      long double v20 = pow(*(long double *)(v10 + 8 * v19), a4);
      double v18 = v18 + v20 * (double)((int)v19 % v11);
      double v17 = v17 + v20 * (double)((int)v19 / v11);
      double v15 = v15 + v20;
      --v14;
    }
    while (v14);
LABEL_17:
    unsigned int v21 = *(_DWORD *)(a3 + 16);
    if (!v21
      || (unint64_t v22 = *(unsigned int *)(a3 + 20), v9 >= v22)
      || (*(double *)(*(void *)(a3 + 8) + 8 * v9) = (double)(int)v13, v21 < 2)
      || (*(double *)(*(void *)(a3 + 8) + 8 * v9 + 8 * v22) = v18 / v15, v21 == 2))
    {
      __assert_rtn("operator()", "Matrix.hpp", 120, "row < m_rows && col < m_cols");
    }
    *(double *)(*(void *)(a3 + 8) + 8 * v9 + 8 * (2 * v22)) = v17 / v15;
    goto LABEL_9;
  }
}

void sub_259070394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void Algo::StdFilter(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 > 0)
  {
    unsigned int v4 = *(_DWORD *)(a1 + 16);
    unsigned int v3 = *(_DWORD *)(a1 + 20);
    if (*(void *)(a3 + 32) < 8 * v4 * (unint64_t)v3)
    {
      if (*(void *)(a3 + 8))
      {
        if (*(unsigned char *)(a3 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
      }
      operator new[]();
    }
    *(_DWORD *)(a3 + 16) = v4;
    *(_DWORD *)(a3 + 20) = v3;
    if (*(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16)) {
      operator new[]();
    }
    vDSPVsq<double>(*(const double **)(a1 + 8), 1, 0, 1, 0);
    ImageUtils::IntegralImage<double>();
  }
  Algo::StdFilter();
}

void sub_259070948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25907095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  Matrix<double>::~Matrix((uint64_t)va);
  Matrix<double>::~Matrix((uint64_t)va1);
  Matrix<double>::~Matrix((uint64_t)va2);
  _Unwind_Resume(a1);
}

void Algo::NormXcorr2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(_DWORD *)(a2 + 16);
  unsigned int v4 = *(_DWORD *)(a2 + 20);
  uint64_t v6 = *(double **)(a3 + 8);
  if (*(void *)(a3 + 32) < 8 * v5 * (unint64_t)v4)
  {
    if (v6)
    {
      if (*(unsigned char *)(a3 + 24)) {
        MEMORY[0x25A2D62A0](*(void *)(a3 + 8), 0x1000C8000313F17);
      }
    }
    operator new[]();
  }
  *(_DWORD *)(a3 + 16) = v5;
  *(_DWORD *)(a3 + 20) = v4;
  v9[0] = 0.0;
  vDSPVfill<double>(v9, v6, 1, v4 * v5);
  unsigned int v7 = *(_DWORD *)(a2 + 16);
  unsigned int v8 = *(_DWORD *)(a2 + 20);
  *(void *)&v9[0] = &unk_2707171D8;
  if (v8 * v7) {
    operator new[]();
  }
  v9[1] = 0.0;
  unsigned int v10 = v7;
  unsigned int v11 = v8;
  char v12 = 0;
  unint64_t v13 = 8 * v7 * (unint64_t)v8;
  vDSPVsq<double>(*(const double **)(a2 + 8), 1, 0, 1, 0);
  ImageUtils::IntegralImage<double>();
}

void sub_259071328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a27 && a29) {
    MEMORY[0x25A2D62A0]();
  }
  if (a32 && a34) {
    MEMORY[0x25A2D62A0]();
  }
  *(void *)(v34 - 152) = a19;
  if (*(void *)(v34 - 144))
  {
    if (*(unsigned char *)(v34 - 128)) {
      MEMORY[0x25A2D62A0]();
    }
  }
  _Unwind_Resume(exception_object);
}

void Algo::FundMatrix3x3(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 20)) {
    operator new[]();
  }
  if (*(_DWORD *)(a2 + 20)) {
    operator new[]();
  }
  Algo::Normalize2DPts();
}

void sub_25907273C(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x390]);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&STACK[0x618]);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&STACK[0x938]);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&STACK[0x960]);
  Matrix<double>::~Matrix(v1 - 232);
  _Unwind_Resume(a1);
}

void Algo::Normalize2DPts()
{
  uint64_t v0 = &unk_2707171D8;
  operator new[]();
}

void sub_259072DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
}

void sub_259072E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259072E18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259072E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259072E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_259072E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

double *MatrixNxPts<9u,double>::MultAxBTag<9u>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  bzero(a3, 0x288uLL);
  uint64_t v6 = *(unsigned int *)(a1 + 16);
  uint64_t v7 = *(unsigned int *)(a2 + 20);
  if (!v7 || (int v8 = *(_DWORD *)(a2 + 16)) == 0)
  {
    if (v6 && *(_DWORD *)(a1 + 20)) {
LABEL_82:
    }
      Matrix<double>::operator()();
LABEL_83:
    Matrix<double>::operator()();
  }
  uint64_t v9 = 0;
  unsigned int v10 = *(float64x2_t **)(a2 + 8);
  unsigned int v11 = &v10->f64[v7];
  uint64_t v12 = (2 * v7);
  unint64_t v13 = &v10->f64[v12];
  uint64_t v14 = (3 * v7);
  uint64_t v15 = &v10->f64[v14];
  uint64_t v16 = (4 * v7);
  uint64_t v17 = &v10->f64[v16];
  uint64_t v18 = (5 * v7);
  uint64_t v19 = &v10->f64[v18];
  uint64_t v20 = (6 * v7);
  unsigned int v21 = &v10->f64[v20];
  uint64_t v22 = (8 * v7);
  uint64_t v23 = (7 * v7);
  uint64_t result = &v10->f64[v23];
  unsigned int v25 = &v10->f64[v22];
  uint64_t v151 = (uint64_t)&v10[1].f64[v12];
  uint64_t v152 = (uint64_t)&v10[1].f64[v7];
  uint64_t v149 = (uint64_t)&v10[1].f64[v16];
  uint64_t v150 = (uint64_t)&v10[1].f64[v14];
  uint64_t v26 = (uint64_t)&v10[1].f64[v18];
  uint64_t v27 = (uint64_t)&v10[1].f64[v20];
  uint64_t v28 = (uint64_t)&v10[1].f64[v23];
  uint64_t v29 = (uint64_t)&v10[1].f64[v22];
  do
  {
    if (v9 == v6) {
      goto LABEL_83;
    }
    uint64_t v30 = *(unsigned int *)(a1 + 20);
    if (!v30) {
      goto LABEL_83;
    }
    uint64_t v31 = *(void *)(a1 + 8);
    __n128 v32 = (double *)(v31 + 8 * (v30 * v9));
    if (v30 < 4)
    {
      LODWORD(v33) = 0;
      double v34 = 0.0;
      unint64_t v35 = (double *)v10;
      unint64_t v36 = (double *)(v31 + 8 * (v30 * v9));
LABEL_12:
      int v42 = v30 - v33;
      do
      {
        double v43 = *v36++;
        double v44 = v43;
        double v45 = *v35++;
        double v34 = v34 + v44 * v45;
        --v42;
      }
      while (v42);
      goto LABEL_14;
    }
    uint64_t v33 = v30 & 0xFFFFFFFC;
    unint64_t v35 = &v10->f64[v33];
    unint64_t v36 = &v32[v33];
    uint64_t v37 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v34 = 0.0;
    uint64_t v38 = v33;
    uint64_t v39 = v10 + 1;
    do
    {
      float64x2_t v40 = vmulq_f64(v37[-1], v39[-1]);
      float64x2_t v41 = vmulq_f64(*v37, *v39);
      double v34 = v34 + v40.f64[0] + v40.f64[1] + v41.f64[0] + v41.f64[1];
      v37 += 2;
      v39 += 2;
      v38 -= 4;
    }
    while (v38);
    if (v33 != v30) {
      goto LABEL_12;
    }
LABEL_14:
    *((double *)a3 + 9 * v9) = v34;
    if (v8 == 1) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v46) = 0;
      double v47 = 0.0;
      unsigned int v48 = v11;
      unsigned int v49 = (double *)(v31 + 8 * (v30 * v9));
LABEL_20:
      int v55 = v30 - v46;
      do
      {
        double v56 = *v49++;
        double v57 = v56;
        double v58 = *v48++;
        double v47 = v47 + v57 * v58;
        --v55;
      }
      while (v55);
      goto LABEL_22;
    }
    uint64_t v46 = v30 & 0xFFFFFFFC;
    unsigned int v48 = &v11[v46];
    unsigned int v49 = &v32[v46];
    char v50 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v47 = 0.0;
    uint64_t v51 = v46;
    double v52 = (float64x2_t *)v152;
    do
    {
      float64x2_t v53 = vmulq_f64(v50[-1], v52[-1]);
      float64x2_t v54 = vmulq_f64(*v50, *v52);
      double v47 = v47 + v53.f64[0] + v53.f64[1] + v54.f64[0] + v54.f64[1];
      v50 += 2;
      v52 += 2;
      v51 -= 4;
    }
    while (v51);
    if (v46 != v30) {
      goto LABEL_20;
    }
LABEL_22:
    *((double *)a3 + 9 * v9 + 1) = v47;
    if (v8 == 2) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v59) = 0;
      double v60 = 0.0;
      unsigned int v61 = v13;
      char v62 = (double *)(v31 + 8 * (v30 * v9));
LABEL_28:
      int v68 = v30 - v59;
      do
      {
        double v69 = *v62++;
        double v70 = v69;
        double v71 = *v61++;
        double v60 = v60 + v70 * v71;
        --v68;
      }
      while (v68);
      goto LABEL_30;
    }
    uint64_t v59 = v30 & 0xFFFFFFFC;
    unsigned int v61 = &v13[v59];
    char v62 = &v32[v59];
    char v63 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v60 = 0.0;
    uint64_t v64 = v59;
    uint64_t v65 = (float64x2_t *)v151;
    do
    {
      float64x2_t v66 = vmulq_f64(v63[-1], v65[-1]);
      float64x2_t v67 = vmulq_f64(*v63, *v65);
      double v60 = v60 + v66.f64[0] + v66.f64[1] + v67.f64[0] + v67.f64[1];
      v63 += 2;
      v65 += 2;
      v64 -= 4;
    }
    while (v64);
    if (v59 != v30) {
      goto LABEL_28;
    }
LABEL_30:
    *((double *)a3 + 9 * v9 + 2) = v60;
    if (v8 == 3) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v72) = 0;
      double v73 = 0.0;
      uint64_t v74 = v15;
      uint64_t v75 = (double *)(v31 + 8 * (v30 * v9));
LABEL_36:
      int v81 = v30 - v72;
      do
      {
        double v82 = *v75++;
        double v83 = v82;
        double v84 = *v74++;
        double v73 = v73 + v83 * v84;
        --v81;
      }
      while (v81);
      goto LABEL_38;
    }
    uint64_t v72 = v30 & 0xFFFFFFFC;
    uint64_t v74 = &v15[v72];
    uint64_t v75 = &v32[v72];
    char v76 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v73 = 0.0;
    uint64_t v77 = v72;
    char v78 = (float64x2_t *)v150;
    do
    {
      float64x2_t v79 = vmulq_f64(v76[-1], v78[-1]);
      float64x2_t v80 = vmulq_f64(*v76, *v78);
      double v73 = v73 + v79.f64[0] + v79.f64[1] + v80.f64[0] + v80.f64[1];
      v76 += 2;
      v78 += 2;
      v77 -= 4;
    }
    while (v77);
    if (v72 != v30) {
      goto LABEL_36;
    }
LABEL_38:
    *((double *)a3 + 9 * v9 + 3) = v73;
    if (v8 == 4) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v85) = 0;
      double v86 = 0.0;
      unsigned int v87 = v17;
      char v88 = (double *)(v31 + 8 * (v30 * v9));
LABEL_44:
      int v94 = v30 - v85;
      do
      {
        double v95 = *v88++;
        double v96 = v95;
        double v97 = *v87++;
        double v86 = v86 + v96 * v97;
        --v94;
      }
      while (v94);
      goto LABEL_46;
    }
    uint64_t v85 = v30 & 0xFFFFFFFC;
    unsigned int v87 = &v17[v85];
    char v88 = &v32[v85];
    uint64_t v89 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v86 = 0.0;
    uint64_t v90 = v85;
    unint64_t v91 = (float64x2_t *)v149;
    do
    {
      float64x2_t v92 = vmulq_f64(v89[-1], v91[-1]);
      float64x2_t v93 = vmulq_f64(*v89, *v91);
      double v86 = v86 + v92.f64[0] + v92.f64[1] + v93.f64[0] + v93.f64[1];
      v89 += 2;
      v91 += 2;
      v90 -= 4;
    }
    while (v90);
    if (v85 != v30) {
      goto LABEL_44;
    }
LABEL_46:
    *((double *)a3 + 9 * v9 + 4) = v86;
    if (v8 == 5) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v98) = 0;
      double v99 = 0.0;
      unsigned int v100 = v19;
      unsigned int v101 = (double *)(v31 + 8 * (v30 * v9));
LABEL_52:
      int v107 = v30 - v98;
      do
      {
        double v108 = *v101++;
        double v109 = v108;
        double v110 = *v100++;
        double v99 = v99 + v109 * v110;
        --v107;
      }
      while (v107);
      goto LABEL_54;
    }
    uint64_t v98 = v30 & 0xFFFFFFFC;
    unsigned int v100 = &v19[v98];
    unsigned int v101 = &v32[v98];
    uint64_t v102 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v99 = 0.0;
    uint64_t v103 = v98;
    int v104 = (float64x2_t *)v26;
    do
    {
      float64x2_t v105 = vmulq_f64(v102[-1], v104[-1]);
      float64x2_t v106 = vmulq_f64(*v102, *v104);
      double v99 = v99 + v105.f64[0] + v105.f64[1] + v106.f64[0] + v106.f64[1];
      v102 += 2;
      v104 += 2;
      v103 -= 4;
    }
    while (v103);
    if (v98 != v30) {
      goto LABEL_52;
    }
LABEL_54:
    *((double *)a3 + 9 * v9 + 5) = v99;
    if (v8 == 6) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v111) = 0;
      double v112 = 0.0;
      unsigned int v113 = v21;
      int v114 = (double *)(v31 + 8 * (v30 * v9));
LABEL_60:
      int v120 = v30 - v111;
      do
      {
        double v121 = *v114++;
        double v122 = v121;
        double v123 = *v113++;
        double v112 = v112 + v122 * v123;
        --v120;
      }
      while (v120);
      goto LABEL_62;
    }
    uint64_t v111 = v30 & 0xFFFFFFFC;
    unsigned int v113 = &v21[v111];
    int v114 = &v32[v111];
    BOOL v115 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v112 = 0.0;
    uint64_t v116 = v111;
    BOOL v117 = (float64x2_t *)v27;
    do
    {
      float64x2_t v118 = vmulq_f64(v115[-1], v117[-1]);
      float64x2_t v119 = vmulq_f64(*v115, *v117);
      double v112 = v112 + v118.f64[0] + v118.f64[1] + v119.f64[0] + v119.f64[1];
      v115 += 2;
      v117 += 2;
      v116 -= 4;
    }
    while (v116);
    if (v111 != v30) {
      goto LABEL_60;
    }
LABEL_62:
    *((double *)a3 + 9 * v9 + 6) = v112;
    if (v8 == 7) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v124) = 0;
      double v125 = 0.0;
      uint64_t v126 = result;
      uint64_t v127 = (double *)(v31 + 8 * (v30 * v9));
LABEL_68:
      int v133 = v30 - v124;
      do
      {
        double v134 = *v127++;
        double v135 = v134;
        double v136 = *v126++;
        double v125 = v125 + v135 * v136;
        --v133;
      }
      while (v133);
      goto LABEL_70;
    }
    uint64_t v124 = v30 & 0xFFFFFFFC;
    uint64_t v126 = &result[v124];
    uint64_t v127 = &v32[v124];
    uint64_t v128 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v125 = 0.0;
    uint64_t v129 = v124;
    uint64_t v130 = (float64x2_t *)v28;
    do
    {
      float64x2_t v131 = vmulq_f64(v128[-1], v130[-1]);
      float64x2_t v132 = vmulq_f64(*v128, *v130);
      double v125 = v125 + v131.f64[0] + v131.f64[1] + v132.f64[0] + v132.f64[1];
      v128 += 2;
      v130 += 2;
      v129 -= 4;
    }
    while (v129);
    if (v124 != v30) {
      goto LABEL_68;
    }
LABEL_70:
    *((double *)a3 + 9 * v9 + 7) = v125;
    if (v8 == 8) {
      goto LABEL_82;
    }
    if (v30 < 4)
    {
      LODWORD(v137) = 0;
      double v138 = 0.0;
      double v139 = v25;
LABEL_76:
      int v145 = v30 - v137;
      do
      {
        double v146 = *v32++;
        double v147 = v146;
        double v148 = *v139++;
        double v138 = v138 + v147 * v148;
        --v145;
      }
      while (v145);
      goto LABEL_4;
    }
    uint64_t v137 = v30 & 0xFFFFFFFC;
    double v139 = &v25[v137];
    v32 += v137;
    int v140 = (float64x2_t *)(v31 + 8 * (v30 * v9) + 16);
    double v138 = 0.0;
    uint64_t v141 = v137;
    int v142 = (float64x2_t *)v29;
    do
    {
      float64x2_t v143 = vmulq_f64(v140[-1], v142[-1]);
      float64x2_t v144 = vmulq_f64(*v140, *v142);
      double v138 = v138 + v143.f64[0] + v143.f64[1] + v144.f64[0] + v144.f64[1];
      v140 += 2;
      v142 += 2;
      v141 -= 4;
    }
    while (v141);
    if (v137 != v30) {
      goto LABEL_76;
    }
LABEL_4:
    *((double *)a3 + 9 * v9++ + 8) = v138;
  }
  while (v9 != 9);
  return result;
}

uint64_t MatrixMxN<9u,9u,double>::SVDMxN<9u,void>(void *__src, uint64_t a2)
{
  memcpy(__dst, __src, sizeof(__dst));
  uint64_t v3 = __dst[1];
  uint64_t v4 = __dst[2];
  uint64_t v5 = __dst[19];
  __dst[1] = __dst[9];
  __dst[2] = __dst[18];
  __dst[18] = v4;
  __dst[19] = __dst[11];
  __dst[9] = v3;
  uint64_t v6 = __dst[27];
  uint64_t v7 = __dst[28];
  uint64_t v8 = __dst[4];
  float __dst[27] = __dst[3];
  __dst[28] = __dst[12];
  uint64_t v9 = __dst[37];
  __dst[3] = v6;
  float __dst[4] = __dst[36];
  __dst[36] = v8;
  __dst[37] = __dst[13];
  __dst[11] = v5;
  __dst[12] = v7;
  __dst[13] = v9;
  uint64_t v10 = __dst[21];
  uint64_t v11 = __dst[22];
  uint64_t v12 = __dst[39];
  __dst[21] = __dst[29];
  __dst[22] = __dst[38];
  __dst[38] = v11;
  __dst[39] = __dst[31];
  __dst[29] = v10;
  __dst[31] = v12;
  uint64_t v13 = __dst[45];
  uint64_t v14 = __dst[46];
  uint64_t v15 = __dst[6];
  __dst[45] = __dst[5];
  __dst[46] = __dst[14];
  uint64_t v16 = __dst[47];
  uint64_t v17 = __dst[48];
  uint64_t v18 = __dst[24];
  __dst[47] = __dst[23];
  unsigned char __dst[48] = __dst[32];
  uint64_t v19 = __dst[55];
  __dst[5] = v13;
  __dst[6] = __dst[54];
  __dst[54] = v15;
  __dst[55] = __dst[15];
  __dst[14] = v14;
  __dst[15] = v19;
  uint64_t v20 = __dst[57];
  __dst[23] = v16;
  __dst[24] = __dst[56];
  __dst[56] = v18;
  __dst[57] = __dst[33];
  __dst[32] = v17;
  __dst[33] = v20;
  uint64_t v21 = __dst[41];
  uint64_t v22 = __dst[42];
  uint64_t v23 = __dst[59];
  __dst[41] = __dst[49];
  __dst[42] = __dst[58];
  __dst[58] = v22;
  __dst[59] = __dst[51];
  __dst[49] = v21;
  __dst[51] = v23;
  uint64_t v24 = __dst[63];
  uint64_t v25 = __dst[64];
  __dst[63] = __dst[7];
  __dst[64] = __dst[16];
  uint64_t v26 = __dst[65];
  __dst[65] = __dst[25];
  uint64_t v27 = __dst[66];
  __dst[66] = __dst[34];
  uint64_t v28 = __dst[67];
  __dst[67] = __dst[43];
  uint64_t v29 = __dst[68];
  __dst[68] = __dst[52];
  uint64_t v30 = __dst[69];
  __dst[69] = __dst[61];
  uint64_t v31 = __dst[72];
  __dst[72] = __dst[8];
  __dst[7] = v24;
  __dst[8] = v31;
  uint64_t v32 = __dst[73];
  __dst[73] = __dst[17];
  unsigned char __dst[16] = v25;
  __dst[17] = v32;
  uint64_t v33 = __dst[74];
  __dst[74] = __dst[26];
  __dst[25] = v26;
  __dst[26] = v33;
  uint64_t v34 = __dst[75];
  __dst[75] = __dst[35];
  __dst[34] = v27;
  __dst[35] = v34;
  uint64_t v35 = __dst[76];
  __dst[76] = __dst[44];
  __dst[43] = v28;
  __dst[44] = v35;
  uint64_t v36 = __dst[77];
  __dst[77] = __dst[53];
  __dst[52] = v29;
  __dst[53] = v36;
  uint64_t v37 = __dst[78];
  __dst[78] = __dst[62];
  __dst[61] = v30;
  __dst[62] = v37;
  uint64_t v38 = __dst[79];
  __dst[79] = __dst[71];
  __dst[71] = v38;
  MatrixMxN<3u,3u,double>::svdLapack();
  MatrixMxN<9u,9u,double>::TransposeInplace<9u,void>(a2);
  return 0;
}

void MatrixMxN<3u,3u,double>::operator*<3u>(const double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(_DWORD *)(a2 + 16) == 3)
  {
    uint64_t v4 = *(unsigned int *)(a2 + 20);
    if (v4) {
      operator new[]();
    }
    LODWORD(v6) = 3;
    vDSPMmul<double>(a1, 1, *(const double **)(a2 + 8), 1, 0, 1, 3, 0, v6);
    uint64_t v5 = 24 * v4;
  }
  else
  {
    uint64_t v5 = 0;
  }
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = v5;
  *(void *)a3 = &unk_2707172D0;
  *(void *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 3;
  *(_DWORD *)(a3 + 20) = 0;
}

void sub_2590738B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  Matrix<double>::~Matrix((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Algo::RandomSample(unsigned int a1, CRandomGenerator *this, uint64_t a3)
{
  unsigned int v3 = *(_DWORD *)(a3 + 20);
  if (v3)
  {
    unsigned int v6 = 0;
    float v7 = (float)a1;
    do
    {
      unsigned int v8 = (float)(CRandomGenerator::UniformRand(this) * v7);
      if (v6)
      {
        uint64_t v9 = 0;
        while (*(_DWORD *)(*(void *)(a3 + 8) + 4 * v9) != v8)
        {
          if (v6 == ++v9) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        LODWORD(v9) = 0;
      }
      if (v9 == v6) {
LABEL_3:
      }
        *(_DWORD *)(*(void *)(a3 + 8) + 4 * v6++) = v8;
    }
    while (v6 < v3);
  }
  return 0;
}

uint64_t Algo::FundDist(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5, double a6)
{
  int v11 = *(_DWORD *)(a2 + 20);
  double v136 = &unk_2707171D8;
  if (v11) {
    operator new[]();
  }
  int v138 = 1;
  int v139 = 0;
  char v140 = 0;
  uint64_t v141 = 0;
  double v136 = &unk_270717208;
  uint64_t v137 = 0;
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)a1, a2, (uint64_t)&v131);
  uint64_t v12 = *(void *)(a1 + 8);
  uint64_t v13 = *(void *)(a1 + 16);
  unint64_t v14 = *(void *)(a1 + 24);
  BOOL v117 = *(void **)a1;
  unint64_t v118 = v14;
  uint64_t v15 = *(void *)(a1 + 32);
  uint64_t v16 = *(void *)(a1 + 40);
  uint64_t v123 = v13;
  uint64_t v124 = v16;
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v119 = *(void *)(a1 + 48);
  uint64_t v120 = v12;
  uint64_t v121 = v15;
  uint64_t v122 = v17;
  uint64_t v125 = *(void *)(a1 + 64);
  MatrixMxN<3u,3u,double>::operator*<3u>((const double *)&v117, a3, (uint64_t)&v126);
  uint64_t v18 = v133 * v134;
  if (v18)
  {
    uint64_t v19 = (float64x2_t *)v132;
    unint64_t v20 = v132 + 8 * v18;
    if (v20 <= v132 + 8) {
      unint64_t v20 = v132 + 8;
    }
    unint64_t v21 = v20 + ~v132;
    uint64_t v22 = (double *)v132;
    if (v21 < 0x18) {
      goto LABEL_10;
    }
    uint64_t v23 = (v21 >> 3) + 1;
    uint64_t v22 = (double *)(v132 + 8 * (v23 & 0x3FFFFFFFFFFFFFFCLL));
    uint64_t v24 = (float64x2_t *)(v132 + 16);
    uint64_t v25 = v23 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v26 = vmulq_f64(*v24, *v24);
      v24[-1] = vmulq_f64(v24[-1], v24[-1]);
      float64x2_t *v24 = v26;
      v24 += 2;
      v25 -= 4;
    }
    while (v25);
    if (v23 != (v23 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_10:
      unint64_t v27 = (unint64_t)&v19->f64[v18];
      do
      {
        *uint64_t v22 = *v22 * *v22;
        ++v22;
      }
      while ((unint64_t)v22 < v27);
    }
  }
  uint64_t v28 = v128 * v129;
  if (v28)
  {
    uint64_t v29 = v127;
    unint64_t v30 = (unint64_t)&v127->f64[v28];
    if (v30 <= (unint64_t)&v127->f64[1]) {
      unint64_t v30 = (unint64_t)&v127->f64[1];
    }
    unint64_t v31 = v30 + ~(unint64_t)v127;
    uint64_t v32 = (double *)v127;
    if (v31 < 0x18) {
      goto LABEL_19;
    }
    uint64_t v33 = (v31 >> 3) + 1;
    uint64_t v32 = &v127->f64[v33 & 0x3FFFFFFFFFFFFFFCLL];
    uint64_t v34 = v127 + 1;
    uint64_t v35 = v33 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v36 = vmulq_f64(*v34, *v34);
      v34[-1] = vmulq_f64(v34[-1], v34[-1]);
      float64x2_t *v34 = v36;
      v34 += 2;
      v35 -= 4;
    }
    while (v35);
    if (v33 != (v33 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_19:
      unint64_t v37 = (unint64_t)&v29->f64[v28];
      do
      {
        *uint64_t v32 = *v32 * *v32;
        ++v32;
      }
      while ((unint64_t)v32 < v37);
    }
  }
  Matrix<double>::DotMult<double>((uint64_t)&v136, (uint64_t)&v136, (uint64_t)&v117);
  unint64_t v42 = HIDWORD(v119);
  char v116 = v120;
  unint64_t v114 = v118;
  unsigned int v115 = HIDWORD(v119);
  double v43 = (float64x2_t *)v132;
  uint64_t v44 = v134;
  uint64_t v45 = 8 * v134;
  LODWORD(v119) = 1;
  HIDWORD(v119) = v134;
  LOBYTE(v120) = 0;
  uint64_t v121 = v45;
  BOOL v117 = &unk_270717208;
  unint64_t v118 = v132;
  if (!v134)
  {
    int v58 = 1;
    goto LABEL_38;
  }
  unint64_t v46 = v132 + v45;
  double v47 = (float64_t *)(v45 + v132);
  if (v45 + v132 <= v132 + 8) {
    double v47 = (float64_t *)(v132 + 8);
  }
  unint64_t v48 = (unint64_t)v47 + ~v132;
  if (v48 >= 0x98
    && ((unint64_t v49 = (v48 & 0xFFFFFFFFFFFFFFF8) + v132 + 8, v132 < v49 + v45) ? (v50 = v46 >= v49) : (v50 = 1), v50))
  {
    uint64_t v51 = (v48 >> 3) + 1;
    uint64_t v52 = 8 * (v51 & 0x3FFFFFFFFFFFFFFCLL);
    float64x2_t v53 = (double *)(v46 + v52);
    float64x2_t v54 = (double *)(v132 + v52);
    uint64_t v55 = v51 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v56 = vaddq_f64(v43[1], *(float64x2_t *)((char *)v43 + v45 + 16));
      float64x2_t *v43 = vaddq_f64(*v43, *(float64x2_t *)((char *)v43 + 8 * v44));
      v43[1] = v56;
      v43 += 2;
      v55 -= 4;
    }
    while (v55);
    if (v51 == (v51 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_36;
    }
  }
  else
  {
    float64x2_t v53 = (double *)(v132 + v45);
    float64x2_t v54 = (double *)v132;
  }
  do
  {
    double v57 = *v53++;
    double *v54 = *v54 + v57;
    ++v54;
  }
  while ((unint64_t)v54 < v46);
LABEL_36:
  int v58 = v119;
LABEL_38:
  uint64_t v59 = (double *)v127;
  uint64_t v60 = v129;
  if (v129 != v44 || v58 != 1) {
    __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1027, "0");
  }
  if (v44)
  {
    unint64_t v61 = v118;
    unint64_t v62 = 8 * v129 + v118;
    if (v62 <= v118 + 8) {
      unint64_t v62 = v118 + 8;
    }
    unint64_t v63 = v62 + ~v118;
    if (v63 >= 0x88)
    {
      unint64_t v67 = (v63 & 0xFFFFFFFFFFFFFFF8) + 8;
      BOOL v68 = v118 >= (unint64_t)v127 + v67 || (unint64_t)v127 >= v118 + v67;
      uint64_t v64 = (double *)v118;
      if (v68)
      {
        uint64_t v69 = (v63 >> 3) + 1;
        uint64_t v70 = v69 & 0x3FFFFFFFFFFFFFFCLL;
        double v71 = &v127->f64[v70];
        uint64_t v64 = (double *)(v118 + v70 * 8);
        uint64_t v72 = (float64x2_t *)(v118 + 16);
        double v73 = v127 + 1;
        uint64_t v74 = v69 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          float64x2_t v75 = vaddq_f64(*v72, *v73);
          v72[-1] = vaddq_f64(v72[-1], v73[-1]);
          float64x2_t *v72 = v75;
          v72 += 2;
          v73 += 2;
          v74 -= 4;
        }
        while (v74);
        uint64_t v59 = v71;
        if (v69 == (v69 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_56;
        }
      }
    }
    else
    {
      uint64_t v64 = (double *)v118;
    }
    unint64_t v76 = v61 + 8 * v60;
    do
    {
      double v77 = *v59++;
      *uint64_t v64 = *v64 + v77;
      ++v64;
    }
    while ((unint64_t)v64 < v76);
LABEL_56:
    uint64_t v59 = (double *)v127;
    uint64_t v65 = v129;
    int v66 = v119;
    goto LABEL_57;
  }
  uint64_t v65 = 0;
  int v66 = 1;
LABEL_57:
  uint64_t v78 = v65;
  float64x2_t v79 = &v59[v65];
  if (v65 != v44 || v66 != 1) {
    __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1027, "0");
  }
  if (v44)
  {
    unint64_t v80 = v118;
    unint64_t v81 = v78 * 8 + v118;
    if (v78 * 8 + v118 <= v118 + 8) {
      unint64_t v81 = v118 + 8;
    }
    unint64_t v82 = v81 + ~v118;
    if (v82 < 0x98)
    {
      double v83 = (double *)v118;
LABEL_72:
      unint64_t v92 = v80 + 8 * v65;
      do
      {
        double v93 = *v79++;
        *double v83 = *v83 + v93;
        ++v83;
      }
      while ((unint64_t)v83 < v92);
      goto LABEL_74;
    }
    double v84 = (float64x2_t *)&v59[v78];
    BOOL v85 = v118 >= (unint64_t)&v59[v78 + 1] + (v82 & 0xFFFFFFFFFFFFFFF8)
       || (unint64_t)v79 >= (v82 & 0xFFFFFFFFFFFFFFF8) + v118 + 8;
    double v83 = (double *)v118;
    if (!v85) {
      goto LABEL_72;
    }
    uint64_t v86 = (v82 >> 3) + 1;
    uint64_t v87 = 8 * (v86 & 0x3FFFFFFFFFFFFFFCLL);
    float64x2_t v79 = (double *)((char *)v79 + v87);
    double v83 = (double *)(v118 + v87);
    char v88 = (float64x2_t *)(v118 + 16);
    uint64_t v89 = v84 + 1;
    uint64_t v90 = v86 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v91 = vaddq_f64(*v88, *v89);
      v88[-1] = vaddq_f64(v88[-1], v89[-1]);
      *char v88 = v91;
      v88 += 2;
      v89 += 2;
      v90 -= 4;
    }
    while (v90);
    if (v86 != (v86 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_72;
    }
  }
LABEL_74:
  if (v44 != v42) {
    __assert_rtn("doDimensionsMatchTo", "Matrix.hpp", 1027, "0");
  }
  if (v42)
  {
    int v94 = (double *)v114;
    unint64_t v95 = v114 + 8 * v42;
    double v96 = (double *)v118;
    unint64_t v97 = v114 + 8;
    if (v95 > v114 + 8) {
      unint64_t v97 = v114 + 8 * v42;
    }
    unint64_t v98 = v97 + ~v114;
    if (v98 < 0x78) {
      goto LABEL_116;
    }
    unint64_t v99 = (v98 & 0xFFFFFFFFFFFFFFF8) + 8;
    if (v114 < v118 + v99 && v118 < v114 + v99) {
      goto LABEL_116;
    }
    uint64_t v101 = (v98 >> 3) + 1;
    uint64_t v102 = 8 * (v101 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v103 = (double *)(v118 + v102);
    int v104 = (double *)(v114 + v102);
    float64x2_t v105 = (float64x2_t *)(v114 + 16);
    float64x2_t v106 = (float64x2_t *)(v118 + 16);
    uint64_t v107 = v101 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v108 = vdivq_f64(*v105, *v106);
      v105[-1] = vdivq_f64(v105[-1], v106[-1]);
      *float64x2_t v105 = v108;
      v105 += 2;
      v106 += 2;
      v107 -= 4;
    }
    while (v107);
    double v96 = v103;
    int v94 = v104;
    if (v101 != (v101 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_116:
      do
      {
        double v109 = *v96++;
        *int v94 = *v94 / v109;
        ++v94;
      }
      while ((unint64_t)v94 < v95);
    }
    unsigned int v110 = 0;
    unint64_t v111 = 0;
    *a5 = 0;
    do
    {
      if (fabs(*(double *)(v114 + 8 * v111)) < a6)
      {
        *(_DWORD *)(*(void *)(a4 + 8) + 4 * v110) = v111;
        unsigned int v110 = *a5 + 1;
        *a5 = v110;
        unint64_t v42 = v115;
      }
      ++v111;
    }
    while (v111 < v42);
  }
  else
  {
    *a5 = 0;
  }
  BOOL v117 = &unk_2707171D8;
  if (v118) {
    BOOL v112 = v120 == 0;
  }
  else {
    BOOL v112 = 1;
  }
  if (!v112) {
    MEMORY[0x25A2D62A0](v118, 0x1000C8000313F17, v38, v39, v40, v41);
  }
  if (v114 && v116) {
    MEMORY[0x25A2D62A0](v114, 0x1000C8000313F17, v38, v39, v40, v41);
  }
  uint64_t v126 = &unk_2707171D8;
  if (v127 && v130) {
    MEMORY[0x25A2D62A0](v127, 0x1000C8000313F17, v38, v39, v40, v41);
  }
  float64x2_t v131 = &unk_2707171D8;
  if (v132 && v135) {
    MEMORY[0x25A2D62A0](v132, 0x1000C8000313F17, v38, v39, v40, v41);
  }
  double v136 = &unk_2707171D8;
  if (v137 && v140) {
    MEMORY[0x25A2D62A0](v137, 0x1000C8000313F17, v38, v39, v40, v41);
  }
  return 0;
}

void sub_2590742FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a19);
  MatrixNxPts<1u,double>::~MatrixNxPts((uint64_t)&a14);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)&a28);
  MatrixNxPts<3u,double>::~MatrixNxPts(v28 - 176);
  MatrixNxPts<1u,double>::~MatrixNxPts(v28 - 136);
  _Unwind_Resume(a1);
}

void sub_259074354(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_259074368(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_25907437C(_Unwind_Exception *a1)
{
  MatrixNxPts<1u,double>::~MatrixNxPts(v1 - 136);
  _Unwind_Resume(a1);
}

void Algo::Ransac()
{
}

void sub_2590745D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  MatrixNxPts<1u,BOOL>::~MatrixNxPts((uint64_t)va);
  MatrixNxPts<1u,BOOL>::~MatrixNxPts((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_2590745F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  Matrix<BOOL>::~Matrix((uint64_t)va1);
  MatrixNxPts<1u,BOOL>::~MatrixNxPts((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t Algo::Ransac(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, char a7, int a8, double a9, uint64_t a10, unsigned int *a11)
{
  unsigned int v15 = *(_DWORD *)(a1 + 20);
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v50, a6);
  unsigned int v16 = 0;
  char v26 = 0;
  *a11 = 0;
  uint64_t v49 = 0;
  char v48 = 0;
  double v17 = 1.0;
  do
  {
    if (v17 <= (double)v16) {
      break;
    }
    unsigned int v28 = v16;
    uint64_t v47 = 0;
    unsigned int v18 = 1;
    memset(v46, 0, sizeof(v46));
    do
    {
      uint64_t v41 = &unk_270717370;
      if (a3) {
        operator new[]();
      }
      uint64_t v43 = 1;
      BOOL v44 = a3 != 0;
      uint64_t v45 = 0;
      uint64_t v41 = &unk_270717410;
      uint64_t __src = 0;
      if ((a7 & 1) == 0)
      {
        int v37 = 3;
        int v38 = 0;
        BOOL v39 = a3 != 0;
        uint64_t v40 = 24 * a3;
        v36[0] = &unk_2707172D0;
        v36[1] = 0;
        int v32 = 3;
        int v33 = 0;
        BOOL v34 = a3 != 0;
        uint64_t v35 = v40;
        v31[0] = &unk_2707172D0;
        v31[1] = 0;
        Algo::FundMatrix3x3((uint64_t)v36, (uint64_t)v31);
      }
      uint64_t v41 = &unk_270717370;
      ++v18;
    }
    while (v18 <= a4);
    int v19 = *(_DWORD *)(a1 + 20);
    uint64_t v41 = &unk_270717370;
    if (v19) {
      operator new[]();
    }
    uint64_t v43 = 1;
    BOOL v44 = 0;
    uint64_t v45 = 0;
    uint64_t v41 = &unk_270717410;
    uint64_t __src = 0;
    LODWORD(v36[0]) = 0;
    Algo::FundDist((uint64_t)v46, a1, a2, (uint64_t)&v41, (unsigned int *)v36, a9);
    unsigned int v20 = v36[0];
    if (LODWORD(v36[0]) > *a11)
    {
      int v21 = HIDWORD(v43);
      size_t v22 = 4 * v43 * (unint64_t)HIDWORD(v43);
      uint64_t v23 = *(void **)(a10 + 8);
      if (*(void *)(a10 + 32) < v22)
      {
        if (v23)
        {
          if (*(unsigned char *)(a10 + 24)) {
            MEMORY[0x25A2D62A0]();
          }
        }
        operator new[]();
      }
      *(_DWORD *)(a10 + 16) = v43;
      *(_DWORD *)(a10 + 20) = v21;
      memcpy(v23, __src, v22);
      *a11 = v20;
      long double v24 = pow((double)v20 / (double)v15, (double)0);
      char v26 = 1;
      double v17 = -6.90775528 / log(fmin(fmax(1.0 - v24, 2.22044605e-16), 1.0));
    }
    uint64_t v41 = &unk_270717370;
    if (__src && v44) {
      MEMORY[0x25A2D62A0]();
    }
    unsigned int v16 = v28 + 1;
  }
  while (v28 + 1 <= a5);
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v50);
  return (v26 & 1u) - 1;
}

void sub_259074EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

void sub_259074F28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
}

void sub_259074F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  MatrixNxPts<3u,double>::~MatrixNxPts((uint64_t)va);
  JUMPOUT(0x259074F54);
}

uint64_t Algo::RansacHomography(int a1, int a2, int a3, int a4, int a5, unsigned int a6, int a7, _DWORD *a8, _DWORD *a9)
{
  *a8 = 0;
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v10, a6);
  if ((double)0 < 1.0) {
    operator new[]();
  }
  if (a9) {
    *a9 = -1;
  }
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v10);
  return 0xFFFFFFFFLL;
}

void sub_259075BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  MatrixNxPts<1u,unsigned int>::~MatrixNxPts(v59 - 192);
  Matrix<double>::~Matrix((uint64_t)&a54);
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)&a59);
  _Unwind_Resume(a1);
}

uint64_t Algo::RansacPlane(int a1, int a2, int a3, int a4, unsigned int a5, uint64_t a6, _DWORD *a7, _DWORD *a8)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  *a7 = 0;
  CRandomGenerator::CRandomGenerator((CRandomGenerator *)v10, a5);
  if ((double)0 < 1.0) {
    operator new[]();
  }
  if (a8) {
    *a8 = -1;
  }
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)v10);
  return 0xFFFFFFFFLL;
}

void sub_259076DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,unint64_t a22,unint64_t a23,unint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  MatrixNxPts<1u,unsigned int>::~MatrixNxPts((uint64_t)&a55);
  STACK[0xC08] = a22;
  if (STACK[0xC10] && LOBYTE(STACK[0xC20]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xC10] = 0;
    STACK[0xC28] = 0;
    LOBYTE(STACK[0xC20]) = 0;
  }
  STACK[0xC18] = 0;
  STACK[0xBE0] = a23;
  if (STACK[0xBE8] && LOBYTE(STACK[0xBF8]))
  {
    MEMORY[0x25A2D62A0]();
    STACK[0xBE8] = 0;
    STACK[0xC00] = 0;
    LOBYTE(STACK[0xBF8]) = 0;
  }
  STACK[0xBF0] = 0;
  STACK[0xBB8] = a24;
  if (STACK[0xBC0] && LOBYTE(STACK[0xBD0])) {
    MEMORY[0x25A2D62A0]();
  }
  a60 = a25;
  if (a61 && a63) {
    MEMORY[0x25A2D62A0]();
  }
  a65 = a26;
  if (a66)
  {
    if (a68) {
      MEMORY[0x25A2D62A0]();
    }
  }
  CRandomGenerator::~CRandomGenerator((CRandomGenerator *)&a70);
  _Unwind_Resume(a1);
}

double Algo::Mean(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(_DWORD *)(a1 + 16);
  if (v4 == 1)
  {
    if (*(void *)(a2 + 32) <= 7uLL)
    {
      if (*(void *)(a2 + 8) && *(unsigned char *)(a2 + 24)) {
        MEMORY[0x25A2D62A0]();
      }
      operator new[]();
    }
    *(void *)(a2 + 16) = 0x100000001;
    double v12 = 0.0;
    vDSPMeanv<double>(*(const double **)(a1 + 8), 1, &v12, *(_DWORD *)(a1 + 20) * *(_DWORD *)(a1 + 16));
    double result = v12;
    **(double **)(a2 + 8) = v12;
  }
  else
  {
    if (!v4) {
      Algo::Mean();
    }
    uint64_t v5 = *(unsigned int *)(a1 + 20);
    uint64_t v6 = *(void **)(a2 + 8);
    if (*(void *)(a2 + 32) < (unint64_t)(8 * v5))
    {
      if (v6)
      {
        if (*(unsigned char *)(a2 + 24)) {
          MEMORY[0x25A2D62A0]();
        }
      }
      operator new[]();
    }
    *(_DWORD *)(a2 + 16) = 1;
    *(_DWORD *)(a2 + 20) = v5;
    bzero(v6, 8 * v5);
    unsigned int v7 = 0;
    unsigned int v8 = *(_DWORD *)(a1 + 16);
    do
    {
      if (v5)
      {
        if (v7 < v8)
        {
          unint64_t v9 = 0;
          uint64_t v10 = *(unsigned int *)(a1 + 20);
          while (v10 != v9)
          {
            if (!*(_DWORD *)(a2 + 16) || v9 >= *(unsigned int *)(a2 + 20)) {
              GeomUtils::CalcRotationMatrix<double>();
            }
            *(double *)(*(void *)(a2 + 8) + 8 * v9) = *(double *)(*(void *)(a1 + 8)
                                                                  + 8 * v10 * v7
                                                                  + 8 * v9)
                                                      + *(double *)(*(void *)(a2 + 8) + 8 * v9);
            if (v5 == ++v9) {
              goto LABEL_10;
            }
          }
        }
        Matrix<double>::operator()();
      }
LABEL_10:
      ++v7;
    }
    while (v7 != v4);
    double v12 = (double)v4;
    vDSPVsdiv<double>(*(const double **)(a2 + 8), 1, &v12, *(double **)(a2 + 8), 1, *(_DWORD *)(a2 + 20) * *(_DWORD *)(a2 + 16));
  }
  return result;
}

uint64_t Algo::Lcm(Algo *this, unsigned int a2)
{
  unsigned int v2 = this;
  if (a2)
  {
    unsigned int v3 = a2;
    unsigned int v4 = this;
    do
    {
      unsigned int v2 = v3;
      unsigned int v3 = v4 % v3;
      unsigned int v4 = v2;
    }
    while (v3);
  }
  return this / v2 * a2;
}

float Algo::fMod(Algo *this, float result, float a3)
{
  float v3 = result;
  if (a3 != 0.0)
  {
    double result = fmodf(result, a3);
    if (a3 <= 0.0 || result < 0.0)
    {
      BOOL v5 = a3 >= 0.0 || v3 > 0.0;
      float v6 = -0.0;
      if (v5) {
        float v6 = a3;
      }
      return result + v6;
    }
  }
  return result;
}

double MatrixMxN<1u,9u,double>::Sort<1u,void>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = *(void *)(a1 + 64);
  long long v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v2;
  long long v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v3;
  unsigned int v4 = *(double *)(a2 + 8) < *(double *)a2;
  if (*(double *)(a2 + 16) < *(double *)(a2 + 8 * (*(double *)(a2 + 8) < *(double *)a2))) {
    unsigned int v4 = 2;
  }
  if (*(double *)(a2 + 24) < *(double *)(a2 + 8 * v4)) {
    unsigned int v4 = 3;
  }
  if (*(double *)(a2 + 32) < *(double *)(a2 + 8 * v4)) {
    unsigned int v4 = 4;
  }
  uint64_t v5 = 5;
  if (*(double *)(a2 + 40) >= *(double *)(a2 + 8 * v4)) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 5;
  }
  uint64_t v7 = 6;
  if (*(double *)(a2 + 48) >= *(double *)(a2 + 8 * v6)) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = 6;
  }
  if (*(double *)(a2 + 56) >= *(double *)(a2 + 8 * v8)) {
    uint64_t v9 = v8;
  }
  else {
    uint64_t v9 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v9)) {
    uint64_t v9 = 8;
  }
  uint64_t v10 = 8 * v9;
  uint64_t v11 = *(void *)(a2 + v10);
  *(void *)(a2 + v10) = *(void *)a2;
  double v12 = *(double *)(a2 + 48);
  double v13 = *(double *)(a2 + 8);
  if (*(double *)(a2 + 16) >= v13) {
    LODWORD(v14) = 1;
  }
  else {
    LODWORD(v14) = 2;
  }
  if (*(double *)(a2 + 24) < *(double *)(a2 + 8 * v14)) {
    LODWORD(v14) = 3;
  }
  if (*(double *)(a2 + 32) < *(double *)(a2 + 8 * v14)) {
    LODWORD(v14) = 4;
  }
  if (*(double *)(a2 + 40) >= *(double *)(a2 + 8 * v14)) {
    uint64_t v14 = v14;
  }
  else {
    uint64_t v14 = 5;
  }
  double v15 = *(double *)(a2 + 8 * v14);
  *(void *)a2 = v11;
  if (v12 < v15) {
    uint64_t v14 = 6;
  }
  if (*(double *)(a2 + 56) < *(double *)(a2 + 8 * v14)) {
    uint64_t v14 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v14)) {
    uint64_t v14 = 8;
  }
  uint64_t v16 = 8 * v14;
  uint64_t v17 = *(void *)(a2 + v16);
  *(double *)(a2 + v16) = v13;
  *(void *)(a2 + 8) = v17;
  double v18 = *(double *)(a2 + 16);
  if (*(double *)(a2 + 24) >= v18) {
    LODWORD(v19) = 2;
  }
  else {
    LODWORD(v19) = 3;
  }
  if (*(double *)(a2 + 32) < *(double *)(a2 + 8 * v19)) {
    LODWORD(v19) = 4;
  }
  if (*(double *)(a2 + 40) >= *(double *)(a2 + 8 * v19)) {
    uint64_t v19 = v19;
  }
  else {
    uint64_t v19 = 5;
  }
  if (*(double *)(a2 + 48) < *(double *)(a2 + 8 * v19)) {
    uint64_t v19 = 6;
  }
  if (*(double *)(a2 + 56) < *(double *)(a2 + 8 * v19)) {
    uint64_t v19 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v19)) {
    uint64_t v19 = 8;
  }
  uint64_t v20 = 8 * v19;
  uint64_t v21 = *(void *)(a2 + v20);
  *(double *)(a2 + v20) = v18;
  *(void *)(a2 + 16) = v21;
  double v22 = *(double *)(a2 + 24);
  if (*(double *)(a2 + 32) >= v22) {
    LODWORD(v23) = 3;
  }
  else {
    LODWORD(v23) = 4;
  }
  if (*(double *)(a2 + 40) >= *(double *)(a2 + 8 * v23)) {
    uint64_t v23 = v23;
  }
  else {
    uint64_t v23 = 5;
  }
  if (*(double *)(a2 + 48) < *(double *)(a2 + 8 * v23)) {
    uint64_t v23 = 6;
  }
  if (*(double *)(a2 + 56) < *(double *)(a2 + 8 * v23)) {
    uint64_t v23 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v23)) {
    uint64_t v23 = 8;
  }
  uint64_t v24 = 8 * v23;
  uint64_t v25 = *(void *)(a2 + v24);
  *(double *)(a2 + v24) = v22;
  *(void *)(a2 + 24) = v25;
  double v26 = *(double *)(a2 + 32);
  if (*(double *)(a2 + 40) >= v26) {
    uint64_t v27 = 4;
  }
  else {
    uint64_t v27 = 5;
  }
  if (*(double *)(a2 + 48) < *(double *)(a2 + 8 * v27)) {
    uint64_t v27 = 6;
  }
  if (*(double *)(a2 + 56) < *(double *)(a2 + 8 * v27)) {
    uint64_t v27 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v27)) {
    uint64_t v27 = 8;
  }
  uint64_t v28 = 8 * v27;
  uint64_t v29 = *(void *)(a2 + v28);
  *(double *)(a2 + v28) = v26;
  *(void *)(a2 + 32) = v29;
  double v30 = *(double *)(a2 + 40);
  if (*(double *)(a2 + 48) < v30) {
    uint64_t v5 = 6;
  }
  if (*(double *)(a2 + 56) < *(double *)(a2 + 8 * v5)) {
    uint64_t v5 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v5)) {
    uint64_t v5 = 8;
  }
  uint64_t v31 = 8 * v5;
  uint64_t v32 = *(void *)(a2 + v31);
  *(double *)(a2 + v31) = v30;
  *(void *)(a2 + 40) = v32;
  double v33 = *(double *)(a2 + 48);
  if (*(double *)(a2 + 56) < v33) {
    uint64_t v7 = 7;
  }
  if (*(double *)(a2 + 64) < *(double *)(a2 + 8 * v7)) {
    uint64_t v7 = 8;
  }
  uint64_t v34 = 8 * v7;
  uint64_t v35 = *(void *)(a2 + v34);
  *(double *)(a2 + v34) = v33;
  *(void *)(a2 + 48) = v35;
  double v36 = *(double *)(a2 + 56);
  uint64_t v37 = 56;
  if (*(double *)(a2 + 64) < v36) {
    uint64_t v37 = 64;
  }
  double result = *(double *)(a2 + v37);
  *(double *)(a2 + v37) = v36;
  *(double *)(a2 + 56) = result;
  return result;
}

uint64_t Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717370;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void Matrix<unsigned int>::~Matrix(uint64_t a1)
{
  *(void *)a1 = &unk_270717370;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

void std::thread::thread<void (&)(double const*,double *,double (*)(double),int),double const*&,double *&,double (*)(double),int &,void>()
{
}

void sub_2590777A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_2590777B8(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_2590777DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>(uint64_t a1)
{
  long long v2 = std::__thread_local_data();
  long long v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(void, void, void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
  unsigned int v4 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    uint64_t v5 = MEMORY[0x25A2D6160]();
    MEMORY[0x25A2D62D0](v5, 0x20C4093837F09);
  }
  MEMORY[0x25A2D62D0](a1, 0x10E0C40C6F9689ELL);
  return 0;
}

void sub_259077888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double *,double (*)(double),int),double const*,double *,double (*)(double),int>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  long long v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x25A2D6160]();
      MEMORY[0x25A2D62D0](v4, 0x20C4093837F09);
    }
    MEMORY[0x25A2D62D0](v2, 0x10E0C40C6F9689ELL);
  }
  return a1;
}

uint64_t *std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = MEMORY[0x25A2D6160]();
    MEMORY[0x25A2D62D0](v3, 0x20C4093837F09);
  }
  return a1;
}

void std::thread::thread<void (&)(double const*,double const*,double *,double (*)(double,double),int),double const*&,double const*&,double *&,double (*)(double,double),int &,void>()
{
}

void sub_259077A44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::__thread_struct>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_259077A58(_Unwind_Exception *a1)
{
  MEMORY[0x25A2D62D0](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_259077A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
}

uint64_t std::__thread_proxy[abi:ne180100]<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>(uint64_t a1)
{
  uint64_t v2 = std::__thread_local_data();
  uint64_t v3 = *(const void **)a1;
  *(void *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(void, void, void, void, void))(a1 + 8))(*(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
  uint64_t v4 = *(const void **)a1;
  *(void *)a1 = 0;
  if (v4)
  {
    uint64_t v5 = MEMORY[0x25A2D6160]();
    MEMORY[0x25A2D62D0](v5, 0x20C4093837F09);
  }
  MEMORY[0x25A2D62D0](a1, 0x10E0C40E17172BELL);
  return 0;
}

void sub_259077B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>::~unique_ptr[abi:ne180100]((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,void (*)(double const*,double const*,double *,double (*)(double,double),int),double const*,double const*,double *,double (*)(double,double),int>>::~unique_ptr[abi:ne180100](uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3)
    {
      uint64_t v4 = MEMORY[0x25A2D6160]();
      MEMORY[0x25A2D62D0](v4, 0x20C4093837F09);
    }
    MEMORY[0x25A2D62D0](v2, 0x10E0C40E17172BELL);
  }
  return a1;
}

double MatrixMxN<9u,9u,double>::TransposeInplace<9u,void>(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 72);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 72) = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 136);
  uint64_t v3 = *(void *)(a1 + 144);
  *(void *)(a1 + 8) = v1;
  *(void *)(a1 + 16) = v3;
  uint64_t v5 = *(void *)(a1 + 152);
  uint64_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 152) = *(void *)(a1 + 88);
  uint64_t v7 = *(void *)(a1 + 216);
  uint64_t v8 = *(void *)(a1 + 224);
  uint64_t v9 = *(void *)(a1 + 32);
  *(void *)(a1 + 216) = *(void *)(a1 + 24);
  *(void *)(a1 + 224) = v6;
  *(void *)(a1 + 88) = v5;
  *(void *)(a1 + 96) = v8;
  uint64_t v10 = *(void *)(a1 + 232);
  uint64_t v11 = *(void *)(a1 + 176);
  *(void *)(a1 + 232) = *(void *)(a1 + 168);
  uint64_t v13 = *(void *)(a1 + 280);
  uint64_t v12 = *(void *)(a1 + 288);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v12;
  uint64_t v14 = *(void *)(a1 + 296);
  uint64_t v15 = *(void *)(a1 + 304);
  uint64_t v16 = *(void *)(a1 + 112);
  *(void *)(a1 + 296) = *(void *)(a1 + 104);
  *(void *)(a1 + 304) = v11;
  *(void *)(a1 + 168) = v10;
  *(void *)(a1 + 176) = v15;
  uint64_t v17 = *(void *)(a1 + 312);
  uint64_t v18 = *(void *)(a1 + 256);
  *(void *)(a1 + 312) = *(void *)(a1 + 248);
  uint64_t v19 = *(void *)(a1 + 360);
  uint64_t v20 = *(void *)(a1 + 368);
  uint64_t v21 = *(void *)(a1 + 48);
  *(void *)(a1 + 360) = *(void *)(a1 + 40);
  *(void *)(a1 + 368) = v16;
  *(void *)(a1 + 104) = v14;
  *(void *)(a1 + 112) = v20;
  uint64_t v22 = *(void *)(a1 + 376);
  uint64_t v23 = *(void *)(a1 + 384);
  uint64_t v24 = *(void *)(a1 + 192);
  *(void *)(a1 + 376) = *(void *)(a1 + 184);
  *(void *)(a1 + 384) = v18;
  *(void *)(a1 + 248) = v17;
  *(void *)(a1 + 256) = v23;
  uint64_t v25 = *(void *)(a1 + 392);
  uint64_t v26 = *(void *)(a1 + 336);
  *(void *)(a1 + 392) = *(void *)(a1 + 328);
  uint64_t v28 = *(void *)(a1 + 424);
  uint64_t v27 = *(void *)(a1 + 432);
  *(void *)(a1 + 40) = v19;
  *(void *)(a1 + 48) = v27;
  uint64_t v29 = *(void *)(a1 + 440);
  uint64_t v30 = *(void *)(a1 + 448);
  uint64_t v31 = *(void *)(a1 + 128);
  *(void *)(a1 + 440) = *(void *)(a1 + 120);
  *(void *)(a1 + 448) = v24;
  *(void *)(a1 + 184) = v22;
  *(void *)(a1 + 192) = v30;
  uint64_t v32 = *(void *)(a1 + 456);
  uint64_t v33 = *(void *)(a1 + 464);
  uint64_t v34 = *(void *)(a1 + 272);
  *(void *)(a1 + 456) = *(void *)(a1 + 264);
  *(void *)(a1 + 464) = v26;
  *(void *)(a1 + 328) = v25;
  *(void *)(a1 + 336) = v33;
  uint64_t v35 = *(void *)(a1 + 472);
  uint64_t v36 = *(void *)(a1 + 416);
  *(void *)(a1 + 472) = *(void *)(a1 + 408);
  uint64_t v37 = *(void *)(a1 + 504);
  uint64_t v38 = *(void *)(a1 + 512);
  uint64_t v39 = *(void *)(a1 + 64);
  *(void *)(a1 + 504) = *(void *)(a1 + 56);
  *(void *)(a1 + 512) = v31;
  *(void *)(a1 + 120) = v29;
  *(void *)(a1 + 128) = v38;
  uint64_t v40 = *(void *)(a1 + 520);
  uint64_t v41 = *(void *)(a1 + 208);
  *(void *)(a1 + 520) = *(void *)(a1 + 200);
  uint64_t v42 = *(void *)(a1 + 528);
  *(void *)(a1 + 528) = v34;
  *(void *)(a1 + 264) = v32;
  *(void *)(a1 + 272) = v42;
  uint64_t v43 = *(void *)(a1 + 536);
  uint64_t v44 = *(void *)(a1 + 352);
  *(void *)(a1 + 536) = *(void *)(a1 + 344);
  uint64_t v45 = *(void *)(a1 + 544);
  *(void *)(a1 + 544) = v36;
  *(void *)(a1 + 408) = v35;
  *(void *)(a1 + 416) = v45;
  uint64_t v46 = *(void *)(a1 + 552);
  uint64_t v47 = *(void *)(a1 + 496);
  *(void *)(a1 + 552) = *(void *)(a1 + 488);
  uint64_t v48 = *(void *)(a1 + 576);
  *(void *)(a1 + 576) = v39;
  *(void *)(a1 + 56) = v37;
  *(void *)(a1 + 64) = v48;
  uint64_t v49 = *(void *)(a1 + 584);
  *(void *)(a1 + 584) = v4;
  *(void *)(a1 + 136) = v49;
  *(void *)(a1 + 144) = v2;
  uint64_t v50 = *(void *)(a1 + 592);
  *(void *)(a1 + 592) = v41;
  *(void *)(a1 + 200) = v40;
  *(void *)(a1 + 208) = v50;
  uint64_t v51 = *(void *)(a1 + 600);
  *(void *)(a1 + 600) = v13;
  *(void *)(a1 + 280) = v51;
  *(void *)(a1 + 288) = v9;
  uint64_t v52 = *(void *)(a1 + 608);
  *(void *)(a1 + 608) = v44;
  *(void *)(a1 + 344) = v43;
  *(void *)(a1 + 352) = v52;
  uint64_t v53 = *(void *)(a1 + 616);
  *(void *)(a1 + 616) = v28;
  *(void *)(a1 + 424) = v53;
  *(void *)(a1 + 432) = v21;
  uint64_t v54 = *(void *)(a1 + 624);
  *(void *)(a1 + 624) = v47;
  *(void *)(a1 + 488) = v46;
  *(void *)(a1 + 496) = v54;
  double result = *(double *)(a1 + 632);
  *(void *)(a1 + 632) = *(void *)(a1 + 568);
  *(double *)(a1 + 568) = result;
  return result;
}

void Algo::StdFilter()
{
}

void Algo::Mean()
{
}

peridot::Reflectivity *peridot::Reflectivity::Reflectivity(peridot::Reflectivity *this)
{
  return peridot::Reflectivity::Reflectivity(this, 0.1, 0.1, 0.03, 0.2, 0.0, 3.3366e-10, 0.0000000026693, 1.15, 0.28284);
}

{
  return peridot::Reflectivity::Reflectivity(this, 0.1, 0.1, 0.03, 0.2, 0.0, 3.3366e-10, 0.0000000026693, 1.15, 0.28284);
}

uint64_t std::unordered_map<unsigned long,peridot::ChannelsNames>::~unordered_map[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void peridot::Reflectivity::~Reflectivity(peridot::Reflectivity *this)
{
  uint64_t v2 = (void *)*((void *)this + 1014);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1012);
  *((void *)this + 1012) = 0;
  if (v4) {
    operator delete(v4);
  }
}

{
  void *v2;
  void *v3;
  void *v4;

  uint64_t v2 = (void *)*((void *)this + 1014);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = (void *)*((void *)this + 1012);
  *((void *)this + 1012) = 0;
  if (v4) {
    operator delete(v4);
  }
}

uint64_t MatrixNxPts<1u,float>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717340;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  return a1;
}

void MatrixNxPts<1u,float>::~MatrixNxPts(uint64_t a1)
{
  *(void *)a1 = &unk_270717340;
  if (*(void *)(a1 + 8) && *(unsigned char *)(a1 + 24))
  {
    MEMORY[0x25A2D62A0]();
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 32) = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
  *(void *)(a1 + 16) = 0;
  JUMPOUT(0x25A2D62D0);
}

unint64_t peridot::Reflectivity::calcChannelPde(peridot::Reflectivity *this, unsigned __int8 a2, uint64_t a3, const unint64_t *a4, unint64_t a5, const BOOL *a6, float *a7)
{
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  uint64_t v9 = (char *)this + 48 * a3;
  uint64_t v10 = v9 + 6788;
  uint64_t v11 = v9 + 6772;
  uint64_t v12 = v9 + 6116;
  uint64_t v13 = v9 + 6100;
  __asm { FMOV            V2.4S, #1.0 }
  do
  {
    unint64_t result = a6[v7];
    if (a6[v7])
    {
      uint64_t v22 = &a4[4 * v8];
      if ((unint64_t)(v7 - 7) < 0xFFFFFFFFFFFFFFFELL) {
        uint64_t v23 = -1;
      }
      else {
        uint64_t v23 = -3;
      }
      unint64_t v24 = v22[1];
      unint64_t v25 = *v22 + v23;
      unint64_t v26 = v22[3];
      unint64_t result = v22[2] + v25 - 1;
      if (result >= 3) {
        unint64_t result = 3;
      }
      unint64_t v27 = v26 + v24 - 1 - 1;
      if (v27 >= 2) {
        unint64_t v27 = 2;
      }
      float v28 = 0.0;
      BOOL v29 = v25 > result || v24 - 1 > v27;
      float v30 = 0.0;
      if (!v29)
      {
        unint64_t v31 = v27 - v24;
        unint64_t v32 = v27 - v24 + 2;
        unint64_t v33 = v32 & 0xFFFFFFFFFFFFFFF8;
        if ((unint64_t)(v7 - 7) >= 0xFFFFFFFFFFFFFFFELL)
        {
          if (v32 >= 8)
          {
            uint64_t v57 = 12 * v25 + 4 * v24;
            int v58 = (float32x4_t *)&v10[v57];
            uint64_t v59 = v31 - v33 + 2;
            uint64_t v60 = (float *)&v11[32 * (v32 >> 3) + v57];
            float v30 = 0.0;
            float v28 = 0.0;
            do
            {
              float32x4_t v61 = 0uLL;
              float32x4_t v62 = (float32x4_t)LODWORD(v30);
              float32x4_t v63 = (float32x4_t)LODWORD(v28);
              uint64_t v64 = v58;
              unint64_t v65 = v32 & 0xFFFFFFFFFFFFFFF8;
              float32x4_t v66 = 0uLL;
              do
              {
                float32x4_t v63 = vaddq_f32(v64[-1], v63);
                float32x4_t v66 = vaddq_f32(*v64, v66);
                float32x4_t v62 = vaddq_f32(v62, _Q2);
                float32x4_t v61 = vaddq_f32(v61, _Q2);
                v64 += 2;
                v65 -= 8;
              }
              while (v65);
              float32x4_t v67 = vaddq_f32(v66, v63);
              float v28 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v67, v67));
              float32x4_t v68 = vaddq_f32(v61, v62);
              float v30 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v68, v68));
              uint64_t v69 = v60;
              uint64_t v70 = v59;
              if (v32 != v33)
              {
                do
                {
                  float v71 = *v69++;
                  float v28 = v71 + v28;
                  float v30 = v30 + 1.0;
                  --v70;
                }
                while (v70);
              }
              int v58 = (float32x4_t *)((char *)v58 + 12);
              v60 += 3;
              _ZF = v25++ == result;
            }
            while (!_ZF);
          }
          else
          {
            uint64_t v38 = (float *)&v11[12 * v25 + 4 * v24];
            float v30 = 0.0;
            float v28 = 0.0;
            do
            {
              uint64_t v39 = v38;
              unint64_t v40 = v32;
              do
              {
                float v41 = *v39++;
                float v28 = v41 + v28;
                float v30 = v30 + 1.0;
                --v40;
              }
              while (v40);
              v38 += 3;
              _ZF = v25++ == result;
            }
            while (!_ZF);
          }
        }
        else if (v32 >= 8)
        {
          uint64_t v42 = 12 * v25 + 4 * v24;
          uint64_t v43 = (float32x4_t *)&v12[v42];
          uint64_t v44 = v31 - v33 + 2;
          uint64_t v45 = (float *)&v13[32 * (v32 >> 3) + v42];
          float v30 = 0.0;
          float v28 = 0.0;
          do
          {
            float32x4_t v46 = 0uLL;
            float32x4_t v47 = (float32x4_t)LODWORD(v30);
            float32x4_t v48 = (float32x4_t)LODWORD(v28);
            uint64_t v49 = v43;
            unint64_t v50 = v32 & 0xFFFFFFFFFFFFFFF8;
            float32x4_t v51 = 0uLL;
            do
            {
              float32x4_t v48 = vaddq_f32(v49[-1], v48);
              float32x4_t v51 = vaddq_f32(*v49, v51);
              float32x4_t v47 = vaddq_f32(v47, _Q2);
              float32x4_t v46 = vaddq_f32(v46, _Q2);
              v49 += 2;
              v50 -= 8;
            }
            while (v50);
            float32x4_t v52 = vaddq_f32(v51, v48);
            float v28 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v52, v52));
            float32x4_t v53 = vaddq_f32(v46, v47);
            float v30 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v53, v53));
            if (v32 != v33)
            {
              uint64_t v54 = v45;
              uint64_t v55 = v44;
              do
              {
                float v56 = *v54++;
                float v28 = v56 + v28;
                float v30 = v30 + 1.0;
                --v55;
              }
              while (v55);
            }
            uint64_t v43 = (float32x4_t *)((char *)v43 + 12);
            v45 += 3;
            _ZF = v25++ == result;
          }
          while (!_ZF);
        }
        else
        {
          uint64_t v34 = (float *)&v13[12 * v25 + 4 * v24];
          float v30 = 0.0;
          float v28 = 0.0;
          do
          {
            uint64_t v35 = v34;
            unint64_t v36 = v32;
            do
            {
              float v37 = *v35++;
              float v28 = v37 + v28;
              float v30 = v30 + 1.0;
              --v36;
            }
            while (v36);
            v34 += 3;
            _ZF = v25++ == result;
          }
          while (!_ZF);
        }
      }
      float v19 = v28 / v30;
      if (v30 <= 0.0) {
        float v20 = 0.0;
      }
      else {
        float v20 = v19;
      }
      a7[v8++] = v20;
    }
    ++v7;
  }
  while (v7 != 8);
  return result;
}

float peridot::Reflectivity::calcChannelReflectivity(int8x8_t *this, const peridot::PeridotDepth *a2, unsigned int a3, uint64_t a4, uint64_t a5, float result, unint64_t a7, float a8, float a9, const BOOL *a10, float *a11, float *a12)
{
  int8x8_t v12 = this[1013];
  if (!*(void *)&v12) {
    goto LABEL_39;
  }
  uint8x8_t v13 = (uint8x8_t)vcnt_s8(v12);
  v13.i16[0] = vaddlv_u8(v13);
  if (v13.u32[0] > 1uLL)
  {
    unint64_t v14 = a7;
    if (*(void *)&v12 <= a7) {
      unint64_t v14 = a7 % *(void *)&v12;
    }
  }
  else
  {
    unint64_t v14 = (*(void *)&v12 - 1) & a7;
  }
  uint64_t v15 = *(uint64_t ***)(*(void *)&this[1012] + 8 * v14);
  if (!v15 || (uint64_t v16 = *v15) == 0) {
LABEL_39:
  }
    std::__throw_out_of_range[abi:ne180100]("unordered_map::at: key not found");
  if (v13.u32[0] < 2uLL)
  {
    uint64_t v17 = *(void *)&v12 - 1;
    while (1)
    {
      uint64_t v19 = v16[1];
      if (v19 == a7)
      {
        if (v16[2] == a7) {
          goto LABEL_21;
        }
      }
      else if ((v19 & v17) != v14)
      {
        goto LABEL_39;
      }
      uint64_t v16 = (uint64_t *)*v16;
      if (!v16) {
        goto LABEL_39;
      }
    }
  }
  while (1)
  {
    unint64_t v18 = v16[1];
    if (v18 == a7) {
      break;
    }
    if (v18 >= *(void *)&v12) {
      v18 %= *(void *)&v12;
    }
    if (v18 != v14) {
      goto LABEL_39;
    }
LABEL_11:
    uint64_t v16 = (uint64_t *)*v16;
    if (!v16) {
      goto LABEL_39;
    }
  }
  if (v16[2] != a7) {
    goto LABEL_11;
  }
LABEL_21:
  switch(*((_DWORD *)v16 + 6))
  {
    case 0:
      float v20 = (char *)a2 + 192 * a5;
      goto LABEL_28;
    case 1:
      float v20 = (char *)a2 + 192 * a5 + 64;
      goto LABEL_28;
    case 2:
      float v20 = (char *)a2 + 192 * a5 + 32;
      goto LABEL_28;
    case 3:
      float v20 = (char *)a2 + 192 * a5 + 96;
      goto LABEL_28;
    case 4:
      float v20 = (char *)a2 + 192 * a5 + 128;
LABEL_28:
      uint64_t v23 = *(void *)v20 + 80 * a4;
      float v22 = *(float *)(v23 + 12) * (float)(unint64_t)this[a7 + 1003];
      float v21 = *(float *)(v23 + 16) * 149852322.0;
      break;
    default:
      float v21 = 0.0;
      float v22 = 0.0;
      break;
  }
  unint64_t v24 = &this[4 * a5];
  unint64_t v25 = (char *)v24 + 4 * a3;
  unint64_t v26 = (float *)(v25 + 5364);
  unint64_t v27 = (float *)(v25 + 4916);
  if (a7 - 5 >= 2) {
    float v28 = v27;
  }
  else {
    float v28 = v26;
  }
  float v29 = *v28;
  if (*(float *)&this[553].i32[1] <= a8 || v22 >= *(float *)&this[554].i32[1] && *(float *)this[554].i32 <= a8)
  {
    float v30 = *(float *)&v24[557].i32[a3 + 1];
    float v31 = v22 / a9;
    *a12 = v31;
    float v32 = (float)((float)((float)(v21 * v21) * v30) * v31) / (float)(v29 * a8);
    *a11 = v32;
    if (a10[a7])
    {
      unint64_t result = v32 / result;
      *a11 = result;
    }
  }
  else
  {
    *a11 = NAN;
    *a12 = NAN;
  }
  return result;
}

void TimeSync::TimeSync(TimeSync *this)
{
  *(_OWORD *)&this->m_images.__map_.__end_ = 0u;
  *(_OWORD *)&this->m_images.__start_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__start_ = 0u;
  *(_OWORD *)&this->m_images.__map_.__first_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__map_.__first_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__map_.__end_ = 0u;
  pthread_mutex_init(&this->m_lock, 0);
  this->m_numberOfBanksToMatch = 2;
}

{
  *(_OWORD *)&this->m_images.__map_.__end_ = 0u;
  *(_OWORD *)&this->m_images.__start_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__start_ = 0u;
  *(_OWORD *)&this->m_images.__map_.__first_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__map_.__first_ = 0u;
  *(_OWORD *)&this->m_pointClouds.__map_.__end_ = 0u;
  pthread_mutex_init(&this->m_lock, 0);
  this->m_numberOfBanksToMatch = 2;
}

void sub_259078638(_Unwind_Exception *a1)
{
  std::deque<TimeSync::TimestampedObject<TimeSync::Image>>::~deque[abi:ne180100](v1 + 48);
  std::deque<TimeSync::TimestampedObject<ADJasperPointCloud * {__strong}>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<TimeSync::TimestampedObject<TimeSync::Image>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 32;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 64;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::deque<TimeSync::TimestampedObject<ADJasperPointCloud * {__strong}>>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x49];
    uint64_t v7 = (void **)((char *)*v6 + 56 * (v5 % 0x49));
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x49] + 56 * ((*(void *)(a1 + 40) + v5) % 0x49);
    if (v7 != (void **)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        v7 += 7;

        if ((char *)v7 - (unsigned char *)*v6 == 4088)
        {
          uint64_t v10 = (void **)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (void **)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *unint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 36;
    goto LABEL_15;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 73;
LABEL_15:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2590788DC(_Unwind_Exception *a1)
{
  std::deque<TimeSync::TimestampedObject<TimeSync::Image>>::~deque[abi:ne180100](v1 + 48);
  std::deque<TimeSync::TimestampedObject<ADJasperPointCloud * {__strong}>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void TimeSync::~TimeSync(TimeSync *this)
{
  begiuint64_t n = this->m_images.__map_.__begin_;
  std::vector<unsigned int>::pointer end = this->m_images.__map_.__end_;
  unint64_t v4 = &begin[this->m_images.__start_ >> 6];
  if (end == begin) {
    unint64_t v5 = 0;
  }
  else {
    unint64_t v5 = (unint64_t)*v4 + 64 * (this->m_images.__start_ & 0x3F);
  }
  while (1)
  {
    unint64_t v6 = (char *)end - (char *)begin;
    if (!v6) {
      break;
    }
    unint64_t v7 = this->m_images.__size_.__value_ + this->m_images.__start_;
    if ((void *)v5 == *(char **)((char *)begin + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 64 * (v7 & 0x3F)) {
      goto LABEL_11;
    }
LABEL_9:
    CVPixelBufferRelease(*(CVPixelBufferRef *)v5);
    CFRelease(*(CFTypeRef *)(v5 + 8));
    v5 += 64;
    if (v5 - (void)*v4 == 4096)
    {
      unint64_t v8 = (unint64_t)v4[1];
      ++v4;
      unint64_t v5 = v8;
    }
    begiuint64_t n = this->m_images.__map_.__begin_;
    std::vector<unsigned int>::pointer end = this->m_images.__map_.__end_;
  }
  if (v5) {
    goto LABEL_9;
  }
LABEL_11:
  this->m_images.__size_.__value_ = 0;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*begin);
      uint64_t v9 = this->m_images.__map_.__end_;
      begiuint64_t n = this->m_images.__map_.__begin_ + 1;
      this->m_images.__map_.__begin_ = begin;
      unint64_t v6 = (char *)v9 - (char *)begin;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    unint64_t v10 = 32;
LABEL_17:
    this->m_images.__start_ = v10;
  }
  else if (v6 >> 3 == 2)
  {
    unint64_t v10 = 64;
    goto LABEL_17;
  }
  pthread_mutex_destroy(&this->m_lock);
  std::deque<TimeSync::TimestampedObject<TimeSync::Image>>::~deque[abi:ne180100]((uint64_t)&this->m_images);
  std::deque<TimeSync::TimestampedObject<ADJasperPointCloud * {__strong}>>::~deque[abi:ne180100]((uint64_t)this);
}

void __clang_call_terminate(void *a1)
{
}

uint64_t TimeSync::numberOfBanksToMatch(TimeSync *this)
{
  return this->m_numberOfBanksToMatch;
}

TimeSync *TimeSync::setNumberOfBanksToMatch(TimeSync *this, int a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if ((a2 - 5) <= 0xFFFFFFFB)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      int v4 = a2;
      _os_log_error_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_ERROR, "ERROR: Bad configuration for timesync: does not know how to match %d banks per image", buf, 8u);
    }
    __assert_rtn("setNumberOfBanksToMatch", "TimeSync.mm", 55, "false");
  }
  this->m_numberOfBanksToMatch = a2;
  return this;
}

void TimeSync::pushPeridotPointCloud(TimeSync *this, ADJasperPointCloud *a2, CMTime *a3, PushResults *a4)
{
  uint64_t v134 = *MEMORY[0x263EF8340];
  unint64_t v7 = a2;
  *(void *)&buf[12] = 0;
  *(void *)&uint8_t buf[4] = 0;
  *(_OWORD *)&a4->var0 = 0u;
  *(_OWORD *)&a4->var2.var0 = 0u;
  *(_OWORD *)&a4->var2.var2 = 0u;
  id v8 = a4->var4[0];
  a4->var4[0] = 0;

  id v9 = a4->var4[1];
  a4->var4[1] = 0;

  a4->var6 = 0;
  *(_OWORD *)&a4->var5[0].var3 = 0u;
  *(_OWORD *)&a4->var5[1].var1 = 0u;
  *(_OWORD *)&a4->var5[0].var0 = 0u;
  *(_OWORD *)(&a4->var6 + 1) = *(_OWORD *)buf;
  HIDWORD(a4->var7[1]) = *(_DWORD *)&buf[16];
  *(_OWORD *)&a4->var8[0].var0 = 0u;
  *(_OWORD *)&a4->var8[0].var3 = 0u;
  *(_OWORD *)&a4->var8[1].var1 = 0u;
  if (v7)
  {
    memset(&v132, 0, sizeof(v132));
    CMTimeMakeWithSeconds(&v132, 0.004, 1000000000);
    memset(&v131, 0, sizeof(v131));
    CMTime lhs = *a3;
    CMTime rhs = v132;
    CMTimeSubtract(&v131, &lhs, &rhs);
    p_m_locuint64_t k = &this->m_lock;
    pthread_mutex_lock(&this->m_lock);
    unint64_t value = this->m_pointClouds.__size_.__value_;
    if (value)
    {
      CMTime time1 = v131;
      unint64_t v12 = (char *)this->m_pointClouds.__map_.__begin_[(value + this->m_pointClouds.__start_ - 1) / 0x49]
          + 56 * ((value + this->m_pointClouds.__start_ - 1) % 0x49);
      CMTimeEpoch v13 = *((void *)v12 + 6);
      *(_OWORD *)&time2.unint64_t value = *((_OWORD *)v12 + 2);
      time2.CMTimeEpoch epoch = v13;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_INFO, "Peridot TimeSync: got a point cloud which is older than the ones in the queue. Dropping it...", buf, 2u);
        }
        goto LABEL_102;
      }
      if (this->m_pointClouds.__size_.__value_ >= 8)
      {
        objc_release(*((id *)this->m_pointClouds.__map_.__begin_[this->m_pointClouds.__start_ / 0x49]
                     + 7 * (this->m_pointClouds.__start_ % 0x49)));
        int64x2_t v14 = vaddq_s64(*(int64x2_t *)&this->m_pointClouds.__start_, (int64x2_t)xmmword_259120070);
        *(int64x2_t *)&this->m_pointClouds.__start_ = v14;
        if (v14.i64[0] >= 0x92uLL)
        {
          operator delete(*this->m_pointClouds.__map_.__begin_);
          ++this->m_pointClouds.__map_.__begin_;
          this->m_pointClouds.__start_ -= 73;
        }
      }
    }
    uint64_t v126 = v7;
    uint64_t v125 = v7;
    std::vector<unsigned int>::pointer end = this->m_pointClouds.__map_.__end_;
    begiuint64_t n = this->m_pointClouds.__map_.__begin_;
    uint64_t v17 = (char *)end - (char *)begin;
    *(_OWORD *)buf = *(_OWORD *)&a3->value;
    CMTimeEpoch epoch = a3->epoch;
    *(CMTime *)&buf[24] = v131;
    *(void *)&buf[16] = epoch;
    if (end == begin) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = 73 * (end - begin) - 1;
    }
    unint64_t start = this->m_pointClouds.__start_;
    unint64_t v21 = this->m_pointClouds.__size_.__value_ + start;
    if (v19 != v21)
    {
LABEL_100:
      unint64_t v99 = (unint64_t)begin[v21 / 0x49] + 56 * (v21 % 0x49);
      unint64_t v7 = v126;
      *(void *)unint64_t v99 = v125;
      *(_OWORD *)(v99 + 8) = *(_OWORD *)buf;
      *(_OWORD *)(v99 + 24) = *(_OWORD *)&buf[16];
      *(_OWORD *)(v99 + 40) = *(_OWORD *)&buf[32];
      ++this->m_pointClouds.__size_.__value_;
      p_m_locuint64_t k = &this->m_lock;
      while ((TimeSync::checkForSyncOnce(this, a4) & 1) != 0)
        ;
LABEL_102:
      pthread_mutex_unlock(p_m_lock);
      goto LABEL_103;
    }
    if (start >= 0x49)
    {
      this->m_pointClouds.__start_ = start - 73;
      float v22 = (char *)(begin + 1);
      uint64_t v23 = *begin;
      this->m_pointClouds.__map_.__begin_ = begin + 1;
      if (this->m_pointClouds.__map_.__end_cap_.__value_ != end)
      {
LABEL_97:
        *std::vector<unsigned int>::pointer end = v23;
        goto LABEL_98;
      }
      first = this->m_pointClouds.__map_.__first_;
      if ((void **)v22 > this->m_pointClouds.__map_.__first_)
      {
        uint64_t v25 = (v22 - (char *)this->m_pointClouds.__map_.__first_) >> 3;
        if (v25 >= -1) {
          uint64_t v26 = v25 + 1;
        }
        else {
          uint64_t v26 = v25 + 2;
        }
        uint64_t v27 = v26 >> 1;
        uint64_t v28 = -v27;
        float v29 = &v22[-8 * v27];
        int64_t v30 = (char *)end - v22;
        if (end == (void **)v22)
        {
          float v31 = end;
        }
        else
        {
          memmove(&v22[-8 * v27], v22, (char *)end - v22);
          float v31 = this->m_pointClouds.__map_.__begin_;
        }
        std::vector<unsigned int>::pointer end = (void **)&v29[v30];
        this->m_pointClouds.__map_.__begin_ = &v31[v28];
        this->m_pointClouds.__map_.__end_ = (void **)&v29[v30];
        goto LABEL_97;
      }
      if (end == first) {
        unint64_t v43 = 1;
      }
      else {
        unint64_t v43 = ((char *)end - (char *)first) >> 2;
      }
      if (!(v43 >> 61))
      {
        uint64_t v44 = (void **)operator new(8 * v43);
        uint64_t v45 = &v44[v43 >> 2];
        int64_t v47 = (char *)end - v22;
        BOOL v46 = end == (void **)v22;
        std::vector<unsigned int>::pointer end = v45;
        if (v46) {
          goto LABEL_95;
        }
        std::vector<unsigned int>::pointer end = (void **)((char *)v45 + (v47 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v48 = v47 - 8;
        if (v48 >= 0x38)
        {
          float64x2_t v91 = &v44[v43 >> 2];
          uint64_t v49 = v91;
          if ((unint64_t)((char *)v91 - v22) >= 0x20)
          {
            uint64_t v92 = (v48 >> 3) + 1;
            uint64_t v93 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v49 = &v45[v93];
            int v94 = (long long *)(begin + 3);
            unint64_t v95 = v91 + 2;
            uint64_t v96 = v92 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v97 = *v94;
              *(v95 - 1) = *(v94 - 1);
              *unint64_t v95 = v97;
              v94 += 2;
              v95 += 2;
              v96 -= 4;
            }
            while (v96);
            if (v92 == (v92 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_95:
              this->m_pointClouds.__map_.__first_ = v44;
              this->m_pointClouds.__map_.__begin_ = v45;
              this->m_pointClouds.__map_.__end_ = end;
              this->m_pointClouds.__map_.__end_cap_.__value_ = &v44[v43];
              if (first)
              {
                operator delete(first);
                std::vector<unsigned int>::pointer end = this->m_pointClouds.__map_.__end_;
              }
              goto LABEL_97;
            }
            v22 += v93 * 8;
          }
        }
        else
        {
          uint64_t v49 = &v44[v43 >> 2];
        }
        do
        {
          unint64_t v98 = *(void **)v22;
          v22 += 8;
          *v49++ = v98;
        }
        while (v49 != end);
        goto LABEL_95;
      }
LABEL_133:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v32 = v17 >> 3;
    unint64_t v33 = this->m_pointClouds.__map_.__end_cap_.__value_;
    uint64_t v34 = this->m_pointClouds.__map_.__first_;
    uint64_t v35 = (char *)v33 - (char *)this->m_pointClouds.__map_.__first_;
    if (v17 >> 3 < (unint64_t)(v35 >> 3))
    {
      if (v33 != end)
      {
        *std::vector<unsigned int>::pointer end = operator new(0xFF8uLL);
LABEL_98:
        ++this->m_pointClouds.__map_.__end_;
LABEL_99:
        begiuint64_t n = this->m_pointClouds.__map_.__begin_;
        unint64_t v21 = this->m_pointClouds.__size_.__value_ + this->m_pointClouds.__start_;
        goto LABEL_100;
      }
      unint64_t v50 = operator new(0xFF8uLL);
      float32x4_t v51 = begin;
      if (v34 != begin)
      {
LABEL_108:
        *(v51 - 1) = v50;
        uint64_t v102 = this->m_pointClouds.__map_.__begin_;
        uint64_t v101 = this->m_pointClouds.__map_.__end_;
        this->m_pointClouds.__map_.__begin_ = v102 - 1;
        uint64_t v103 = *(v102 - 1);
        this->m_pointClouds.__map_.__begin_ = v102;
        if (v101 != this->m_pointClouds.__map_.__end_cap_.__value_)
        {
LABEL_109:
          *uint64_t v101 = v103;
          goto LABEL_98;
        }
        int v104 = this->m_pointClouds.__map_.__first_;
        if (v102 > this->m_pointClouds.__map_.__first_)
        {
          uint64_t v105 = v102 - this->m_pointClouds.__map_.__first_;
          if (v105 >= -1) {
            uint64_t v106 = v105 + 1;
          }
          else {
            uint64_t v106 = v105 + 2;
          }
          uint64_t v107 = v106 >> 1;
          uint64_t v108 = -v107;
          double v109 = &v102[-v107];
          int64_t v110 = (char *)v101 - (char *)v102;
          if (v101 != v102)
          {
            memmove(&v102[-v107], v102, (char *)v101 - (char *)v102);
            uint64_t v102 = this->m_pointClouds.__map_.__begin_;
          }
          this->m_pointClouds.__map_.__begin_ = &v102[v108];
          this->m_pointClouds.__map_.__end_ = (void **)((char *)v109 + v110);
          *(void **)((char *)v109 + v110) = v103;
          goto LABEL_98;
        }
        if (v101 == v104) {
          unint64_t v111 = 1;
        }
        else {
          unint64_t v111 = ((char *)v101 - (char *)v104) >> 2;
        }
        if (v111 >> 61) {
          goto LABEL_133;
        }
        BOOL v112 = (void **)operator new(8 * v111);
        unsigned int v113 = &v112[v111 >> 2];
        int64_t v114 = (char *)v101 - (char *)v102;
        BOOL v46 = v101 == v102;
        uint64_t v101 = v113;
        if (!v46)
        {
          uint64_t v101 = (void **)((char *)v113 + (v114 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v115 = v114 - 8;
          if (v115 < 0x38)
          {
            char v116 = &v112[v111 >> 2];
            goto LABEL_129;
          }
          BOOL v117 = &v112[v111 >> 2];
          char v116 = v117;
          if ((unint64_t)((char *)v117 - (char *)v102) < 0x20)
          {
            do
            {
LABEL_129:
              uint64_t v124 = *v102++;
              *v116++ = v124;
            }
            while (v116 != v101);
            goto LABEL_130;
          }
          uint64_t v118 = (v115 >> 3) + 1;
          uint64_t v119 = v118 & 0x3FFFFFFFFFFFFFFCLL;
          char v116 = &v113[v119];
          uint64_t v120 = (long long *)(v102 + 2);
          uint64_t v121 = v117 + 2;
          uint64_t v122 = v118 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v123 = *v120;
            *(v121 - 1) = *(v120 - 1);
            *uint64_t v121 = v123;
            v120 += 2;
            v121 += 2;
            v122 -= 4;
          }
          while (v122);
          if (v118 != (v118 & 0x3FFFFFFFFFFFFFFCLL))
          {
            uint64_t v102 = (void **)((char *)v102 + v119 * 8);
            goto LABEL_129;
          }
        }
LABEL_130:
        this->m_pointClouds.__map_.__first_ = v112;
        this->m_pointClouds.__map_.__begin_ = v113;
        this->m_pointClouds.__map_.__end_ = v101;
        this->m_pointClouds.__map_.__end_cap_.__value_ = &v112[v111];
        if (v104)
        {
          operator delete(v104);
          uint64_t v101 = this->m_pointClouds.__map_.__end_;
        }
        goto LABEL_109;
      }
      if (end == begin) {
        unint64_t v52 = 1;
      }
      else {
        unint64_t v52 = v35 >> 2;
      }
      if (v52 >> 61) {
        goto LABEL_133;
      }
      float32x4_t v53 = (void **)operator new(8 * v52);
      unint64_t v54 = (v52 + 3) >> 2;
      float32x4_t v51 = &v53[v54];
      uint64_t v55 = &v53[v52];
      float v56 = v51;
      if (end != begin)
      {
        float v56 = (void **)((char *)v51 + (((char *)end - (char *)v34) & 0xFFFFFFFFFFFFFFF8));
        unint64_t v57 = (char *)end - (char *)v34 - 8;
        int v58 = &v53[v54];
        uint64_t v59 = begin;
        if (v57 > 0x37)
        {
          uint64_t v60 = &v53[v54];
          int v58 = v60;
          uint64_t v59 = begin;
          if ((unint64_t)((char *)v60 - (char *)v34) >= 0x20)
          {
            uint64_t v61 = (v57 >> 3) + 1;
            uint64_t v62 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            int v58 = &v51[v62];
            float32x4_t v63 = (long long *)(begin + 2);
            uint64_t v64 = v60 + 2;
            uint64_t v65 = v61 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v66 = *v63;
              *(v64 - 1) = *(v63 - 1);
              *uint64_t v64 = v66;
              v63 += 2;
              v64 += 2;
              v65 -= 4;
            }
            while (v65);
            if (v61 == (v61 & 0x3FFFFFFFFFFFFFFCLL))
            {
              this->m_pointClouds.__map_.__first_ = v53;
              this->m_pointClouds.__map_.__begin_ = v51;
              this->m_pointClouds.__map_.__end_ = v56;
              this->m_pointClouds.__map_.__end_cap_.__value_ = v55;
LABEL_107:
              operator delete(begin);
              float32x4_t v51 = this->m_pointClouds.__map_.__begin_;
              goto LABEL_108;
            }
            uint64_t v59 = &begin[v62];
          }
        }
        do
        {
          unsigned int v100 = *v59++;
          *v58++ = v100;
        }
        while (v58 != v56);
      }
      this->m_pointClouds.__map_.__first_ = v53;
      this->m_pointClouds.__map_.__begin_ = v51;
      this->m_pointClouds.__map_.__end_ = v56;
      this->m_pointClouds.__map_.__end_cap_.__value_ = v55;
      if (!begin) {
        goto LABEL_108;
      }
      goto LABEL_107;
    }
    if (v33 == v34) {
      unint64_t v36 = 1;
    }
    else {
      unint64_t v36 = v35 >> 2;
    }
    if (v36 >> 61) {
      goto LABEL_133;
    }
    float v37 = (void **)operator new(8 * v36);
    uint64_t v38 = operator new(0xFF8uLL);
    uint64_t v39 = &v37[v32];
    unint64_t v40 = &v37[v36];
    if (v32 == v36)
    {
      float v41 = v38;
      if (v17 < 1)
      {
        if (end == begin) {
          unint64_t v67 = 1;
        }
        else {
          unint64_t v67 = v17 >> 2;
        }
        if (v67 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        uint64_t v39 = (void **)operator new(8 * v67);
        unint64_t v40 = &v39[v67];
        operator delete(v37);
        begiuint64_t n = this->m_pointClouds.__map_.__begin_;
        std::vector<unsigned int>::pointer end = this->m_pointClouds.__map_.__end_;
        float v37 = v39;
      }
      else
      {
        unint64_t v42 = v32 + 2;
        if (v32 >= -1) {
          unint64_t v42 = v32 + 1;
        }
        v39 -= v42 >> 1;
      }
      uint64_t v38 = v41;
    }
    *uint64_t v39 = v38;
    float32x4_t v68 = v39 + 1;
    if (end == begin)
    {
      uint64_t v69 = v39;
      uint64_t v70 = v39 + 1;
LABEL_62:
      float v71 = this->m_pointClouds.__map_.__first_;
      this->m_pointClouds.__map_.__first_ = v37;
      this->m_pointClouds.__map_.__begin_ = v69;
      this->m_pointClouds.__map_.__end_ = v70;
      this->m_pointClouds.__map_.__end_cap_.__value_ = v40;
      if (v71) {
        operator delete(v71);
      }
      goto LABEL_99;
    }
    while (v39 != v37)
    {
      uint64_t v72 = v39;
      uint64_t v70 = v68;
LABEL_65:
      double v73 = *--end;
      *(v72 - 1) = v73;
      uint64_t v69 = v72 - 1;
      float32x4_t v68 = v70;
      uint64_t v39 = v69;
      if (end == this->m_pointClouds.__map_.__begin_) {
        goto LABEL_62;
      }
    }
    if (v68 < v40)
    {
      uint64_t v74 = v40 - v68;
      if (v74 >= -1) {
        unint64_t v75 = v74 + 1;
      }
      else {
        unint64_t v75 = v74 + 2;
      }
      uint64_t v70 = &v68[v75 >> 1];
      uint64_t v72 = &v39[v75 >> 1];
      if (v68 == v39)
      {
        float v37 = v68;
      }
      else
      {
        memmove(&v39[v75 >> 1], v39, (char *)v68 - (char *)v39);
        float v37 = v39;
      }
      goto LABEL_65;
    }
    if (v40 == v39) {
      unint64_t v76 = 1;
    }
    else {
      unint64_t v76 = ((char *)v40 - (char *)v39) >> 2;
    }
    if (v76 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    double v77 = (void **)operator new(8 * v76);
    float v37 = v77;
    unint64_t v78 = (v76 + 3) >> 2;
    uint64_t v72 = &v77[v78];
    uint64_t v70 = v72;
    int64_t v79 = (char *)v68 - (char *)v39;
    if (v68 != v39)
    {
      uint64_t v70 = (void **)((char *)v72 + (v79 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v80 = v79 - 8;
      unint64_t v81 = (char *)&v77[v78];
      unint64_t v82 = v39;
      if (v80 >= 0x38)
      {
        uint64_t v83 = v78;
        unint64_t v81 = (char *)&v77[v78];
        unint64_t v82 = v39;
        if ((unint64_t)(v81 - (char *)v39) >= 0x20)
        {
          uint64_t v84 = (v80 >> 3) + 1;
          uint64_t v85 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          unint64_t v81 = (char *)&v72[v85];
          uint64_t v86 = (long long *)(v39 + 2);
          uint64_t v87 = (char *)&v77[v83 + 2];
          uint64_t v88 = v84 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v89 = *v86;
            *((_OWORD *)v87 - 1) = *(v86 - 1);
            *(_OWORD *)uint64_t v87 = v89;
            v86 += 2;
            v87 += 32;
            v88 -= 4;
          }
          while (v88);
          if (v84 == (v84 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_85;
          }
          unint64_t v82 = &v39[v85];
        }
      }
      do
      {
        uint64_t v90 = (uint64_t)*v82++;
        *(void *)unint64_t v81 = v90;
        v81 += 8;
      }
      while (v81 != (char *)v70);
    }
LABEL_85:
    unint64_t v40 = &v77[v76];
    operator delete(v39);
    goto LABEL_65;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Peridot TimeSync: got null point cloud", buf, 2u);
  }
LABEL_103:
}

void sub_259079504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, pthread_mutex_t *a12)
{
  operator delete(v12);
  operator delete(v13);

  pthread_mutex_unlock(a12);
  _Unwind_Resume(a1);
}

uint64_t TimeSync::checkForSyncOnce(TimeSync *this, PushResults *a2)
{
  if (!this->m_images.__size_.__value_ || !this->m_pointClouds.__size_.__value_) {
    return 0;
  }
  uint64_t v4 = *(uint64_t *)((char *)this->m_images.__map_.__begin_ + ((this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8));
  unint64_t v5 = this->m_images.__start_ & 0x3F;
  uint64_t v6 = v4 + (v5 << 6);
  CMTimeEpoch v7 = *(void *)(v6 + 56);
  *(_OWORD *)&time.unint64_t value = *(_OWORD *)(v6 + 40);
  time.CMTimeEpoch epoch = v7;
  double Seconds = CMTimeGetSeconds(&time);
  unint64_t m_numberOfBanksToMatch = this->m_numberOfBanksToMatch;
  int v10 = m_numberOfBanksToMatch + 2;
  if ((int)m_numberOfBanksToMatch >= -1) {
    int v10 = m_numberOfBanksToMatch + 1;
  }
  if (this->m_pointClouds.__size_.__value_ < m_numberOfBanksToMatch) {
    return 0;
  }
  double v12 = Seconds;
  uint64_t v86 = (_OWORD *)(v4 + (v5 << 6));
  int v13 = v10 >> 1;
  unsigned int v14 = 2 * v13;
  unint64_t v15 = (2 * v13 - 1);
  int v88 = v13;
  unint64_t v16 = this->m_pointClouds.__start_ + (v15 - v13);
  uint64_t v17 = (char *)this->m_pointClouds.__map_.__begin_[v16 / 0x49] + 56 * (v16 % 0x49);
  CMTimeEpoch v18 = *((void *)v17 + 6);
  *(_OWORD *)&v99.unint64_t value = *((_OWORD *)v17 + 2);
  v99.CMTimeEpoch epoch = v18;
  double v19 = CMTimeGetSeconds(&v99);
  float v20 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v15) / 0x49]
      + 56 * ((this->m_pointClouds.__start_ + v15) % 0x49);
  long long v21 = *((_OWORD *)v20 + 2);
  v98.CMTimeEpoch epoch = *((void *)v20 + 6);
  *(_OWORD *)&v98.unint64_t value = v21;
  double v22 = CMTimeGetSeconds(&v98);
  if (v19 <= v12 || (double v22 = vabdd_f64(v22, v12), v22 <= 0.135))
  {
    if (this->m_pointClouds.__size_.__value_ > v15)
    {
      unint64_t v83 = v5;
      uint64_t v84 = v4;
      uint64_t v85 = a2;
      uint64_t v89 = 0;
      unsigned int v30 = 0;
      unsigned int v31 = 0;
      uint64_t v82 = v6 + 40;
      unsigned int v32 = v88 - 1;
      double v33 = 135.0;
      do
      {
        if (m_numberOfBanksToMatch != 4
          || (v39 = 1 << *(unsigned char *)objc_msgSend(*((id *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v30)/ 0x49]+ 7 * ((this->m_pointClouds.__start_ + v30) % 0x49)), "bankIds", v22), uint64_t v38 = v30 + 1, v40 = (1 << *(unsigned char *)objc_msgSend(*((id *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v38)/ 0x49]+ 7 * ((this->m_pointClouds.__start_ + v38) % 0x49)), "bankIds")) | v39, v41 = this->m_pointClouds.__start_ + v30 + 2, v42 = 1 << *(unsigned char *)objc_msgSend(*((id *)this->m_pointClouds.__map_.__begin_[v41 / 0x49] + 7 * (v41 % 0x49)), "bankIds"), v43 = this->m_pointClouds.__start_ + v30 + 3, (v40 | v42 | (1 << *(unsigned char *)objc_msgSend(*((id *)this->m_pointClouds.__map_.__begin_[v43 / 0x49]+ 7 * (v43 % 0x49)),
                                                              "bankIds"))) == 0xF))
        {
          uint64_t v87 = v30 + v88;
          uint64_t v44 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v87) / 0x49]
              + 56 * ((this->m_pointClouds.__start_ + v87) % 0x49);
          CMTimeEpoch v45 = *((void *)v44 + 6);
          *(_OWORD *)&v97.unint64_t value = *((_OWORD *)v44 + 2);
          v97.CMTimeEpoch epoch = v45;
          double v46 = CMTimeGetSeconds(&v97);
          int64_t v47 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v32) / 0x49]
              + 56 * ((this->m_pointClouds.__start_ + v32) % 0x49);
          long long v48 = *((_OWORD *)v47 + 2);
          v96.CMTimeEpoch epoch = *((void *)v47 + 6);
          *(_OWORD *)&v96.unint64_t value = v48;
          double v49 = CMTimeGetSeconds(&v96);
          unint64_t v50 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v30) / 0x49]
              + 56 * ((this->m_pointClouds.__start_ + v30) % 0x49);
          long long v51 = *((_OWORD *)v50 + 2);
          CMTimeEpoch v52 = *((void *)v50 + 6);
          unsigned int v53 = HIDWORD(v89);
          if (v49 < v12) {
            unsigned int v53 = v30;
          }
          HIDWORD(v89) = v53;
          v95.CMTimeEpoch epoch = v52;
          *(_OWORD *)&v95.unint64_t value = v51;
          double v54 = CMTimeGetSeconds(&v95);
          uint64_t v55 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v15) / 0x49]
              + 56 * ((this->m_pointClouds.__start_ + v15) % 0x49);
          long long v56 = *((_OWORD *)v55 + 2);
          v94.CMTimeEpoch epoch = *((void *)v55 + 6);
          *(_OWORD *)&v94.unint64_t value = v56;
          double v57 = CMTimeGetSeconds(&v94);
          double v58 = v57 - v54;
          double v59 = vabdd_f64(v54, v12);
          double v60 = vabdd_f64(v57, v12);
          BOOL v34 = v59 < 0.135;
          if (v60 >= 0.135) {
            BOOL v34 = 0;
          }
          if (v46 > v12 && v49 < v12 && v34 && v58 < 0.155)
          {
            int v61 = HIDWORD(v89);
            if (m_numberOfBanksToMatch)
            {
              uint64_t v62 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v32) / 0x49]
                  + 56 * ((this->m_pointClouds.__start_ + v32) % 0x49);
              CMTimeEpoch v63 = *((void *)v62 + 6);
              *(_OWORD *)&v93.unint64_t value = *((_OWORD *)v62 + 2);
              v93.CMTimeEpoch epoch = v63;
              double v64 = CMTimeGetSeconds(&v93);
              uint64_t v65 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v87) / 0x49]
                  + 56 * ((this->m_pointClouds.__start_ + v87) % 0x49);
              long long v66 = *((_OWORD *)v65 + 2);
              v92.CMTimeEpoch epoch = *((void *)v65 + 6);
              *(_OWORD *)&v92.unint64_t value = v66;
              double v67 = CMTimeGetSeconds(&v92);
              CMTimeEpoch v68 = *(void *)(v82 + 16);
              *(_OWORD *)&v91.unint64_t value = *(_OWORD *)v82;
              v91.CMTimeEpoch epoch = v68;
              Float64 v69 = CMTimeGetSeconds(&v91);
              if (v67 - v69 >= v69 - v64) {
                unsigned int v31 = v30;
              }
              else {
                unsigned int v31 = v30 + 1;
              }
            }
            else
            {
              unsigned int v31 = v30;
            }
            goto LABEL_42;
          }
          if (v58 >= 0.155) {
            BOOL v34 = 0;
          }
          if (v59 >= v33) {
            BOOL v34 = 0;
          }
          BOOL v35 = v60 < v33;
          double v22 = fmax(v59, v60);
          BOOL v36 = !v34 || !v35;
          if (v34 && v35)
          {
            double v33 = v22;
            unsigned int v31 = v30;
          }
          int v37 = v89;
          if (!v36) {
            int v37 = 1;
          }
          LODWORD(v89) = v37;
          LODWORD(v38) = v30 + 1;
        }
        unint64_t v15 = v14++;
        ++v32;
        unsigned int v30 = v38;
      }
      while (this->m_pointClouds.__size_.__value_ > v15);
      int v61 = HIDWORD(v89);
      if (!v89) {
        goto LABEL_47;
      }
LABEL_42:
      *(_OWORD *)&v85->var0 = *v86;
      uint64_t v70 = v84 + (v83 << 6);
      long long v71 = *(_OWORD *)(v70 + 16);
      v85->var2.var3 = *(void *)(v70 + 32);
      *(_OWORD *)&v85->var2.var0 = v71;
      v85->var3 = m_numberOfBanksToMatch;
      if ((int)m_numberOfBanksToMatch >= 1)
      {
        var5 = v85->var5;
        var4 = v85->var4;
        do
        {
          objc_storeStrong(var4, *((id *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v31) / 0x49]+ 7 * ((this->m_pointClouds.__start_ + v31) % 0x49)));
          uint64_t v74 = (char *)this->m_pointClouds.__map_.__begin_[(this->m_pointClouds.__start_ + v31) / 0x49]
              + 56 * ((this->m_pointClouds.__start_ + v31) % 0x49);
          long long v75 = *(_OWORD *)(v74 + 8);
          var5->var3 = *((void *)v74 + 3);
          *(_OWORD *)&var5->var0 = v75;
          ++var5;
          ++var4;
          ++v31;
          --m_numberOfBanksToMatch;
        }
        while (m_numberOfBanksToMatch);
      }
      begiuint64_t n = this->m_images.__map_.__begin_;
      int64x2_t v77 = vaddq_s64(*(int64x2_t *)&this->m_images.__start_, (int64x2_t)xmmword_259120070);
      *(int64x2_t *)&this->m_images.__start_ = v77;
      if (v77.i64[0] >= 0x80uLL)
      {
        operator delete(*begin);
        ++this->m_images.__map_.__begin_;
        this->m_images.__start_ -= 64;
      }
LABEL_47:
      if (v61)
      {
        unint64_t start = this->m_pointClouds.__start_;
        while (1)
        {
          int64_t v79 = (char *)this->m_pointClouds.__map_.__begin_[start / 0x49] + 56 * (start % 0x49);
          CMTimeEpoch v80 = *((void *)v79 + 6);
          *(_OWORD *)&v90.unint64_t value = *((_OWORD *)v79 + 2);
          v90.CMTimeEpoch epoch = v80;
          if (vabdd_f64(CMTimeGetSeconds(&v90), v12) <= 0.135) {
            break;
          }
          objc_release(*((id *)this->m_pointClouds.__map_.__begin_[this->m_pointClouds.__start_ / 0x49]
                       + 7 * (this->m_pointClouds.__start_ % 0x49)));
          int64x2_t v81 = vaddq_s64(*(int64x2_t *)&this->m_pointClouds.__start_, (int64x2_t)xmmword_259120070);
          *(int64x2_t *)&this->m_pointClouds.__start_ = v81;
          unint64_t start = v81.i64[0];
          if (v81.i64[0] >= 0x92uLL)
          {
            operator delete(*this->m_pointClouds.__map_.__begin_);
            ++this->m_pointClouds.__map_.__begin_;
            unint64_t start = this->m_pointClouds.__start_ - 73;
            this->m_pointClouds.__start_ = start;
          }
          uint64_t result = 0;
          if (!--v61) {
            return result;
          }
        }
      }
    }
    return 0;
  }
  unint64_t v23 = (this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8;
  unint64_t v24 = (this->m_images.__start_ & 0x3F) << 6;
  a2->var7[a2->var6] = *(__CVBuffer **)(*(char **)((char *)this->m_images.__map_.__begin_ + v23) + v24);
  CFRelease(*(CFTypeRef *)(*(char **)((char *)this->m_images.__map_.__begin_ + v23) + v24 + 8));
  uint64_t v25 = *(char **)((char *)this->m_images.__map_.__begin_ + ((this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8))
      + 64 * (this->m_images.__start_ & 0x3F);
  uint64_t v26 = (char *)a2 + 24 * a2->var6;
  long long v27 = *((_OWORD *)v25 + 1);
  *((void *)v26 + 19) = *((void *)v25 + 4);
  *(_OWORD *)(v26 + 136) = v27;
  ++a2->var6;
  uint64_t v28 = this->m_images.__map_.__begin_;
  int64x2_t v29 = vaddq_s64(*(int64x2_t *)&this->m_images.__start_, (int64x2_t)xmmword_259120070);
  *(int64x2_t *)&this->m_images.__start_ = v29;
  if (v29.i64[0] >= 0x80uLL)
  {
    operator delete(*v28);
    ++this->m_images.__map_.__begin_;
    this->m_images.__start_ -= 64;
  }
  return 1;
}

uint64_t TimeSync::checkForSync(TimeSync *this, PushResults *a2)
{
  do
    uint64_t result = TimeSync::checkForSyncOnce(this, a2);
  while ((result & 1) != 0);
  return result;
}

void TimeSync::pushImage(TimeSync *this, __CVBuffer *a2, const __CFDictionary *a3, CMTime *a4, PushResults *a5)
{
  uint64_t v154 = *MEMORY[0x263EF8340];
  *(void *)&buf.flags = 0;
  *(CMTimeValue *)((char *)&buf.value + 4) = 0;
  *(_OWORD *)&a5->var0 = 0u;
  *(_OWORD *)&a5->var2.var0 = 0u;
  *(_OWORD *)&a5->var2.var2 = 0u;
  id v10 = a5->var4[0];
  a5->var4[0] = 0;

  id v11 = a5->var4[1];
  a5->var4[1] = 0;

  a5->var6 = 0;
  *(_OWORD *)&a5->var5[0].var3 = 0u;
  *(_OWORD *)&a5->var5[1].var1 = 0u;
  *(_OWORD *)&a5->var5[0].var0 = 0u;
  *(_OWORD *)(&a5->var6 + 1) = *(_OWORD *)&buf.value;
  HIDWORD(a5->var7[1]) = buf.epoch;
  *(_OWORD *)&a5->var8[0].var0 = 0u;
  *(_OWORD *)&a5->var8[0].var3 = 0u;
  *(_OWORD *)&a5->var8[1].var1 = 0u;
  if (a2 && a3)
  {
    CVPixelBufferRetain(a2);
    CFRetain(a3);
    int valuePtr = 0;
    double v150 = 0.0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F2D458]);
    if (Value)
    {
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_INFO, "Peridot TimeSync: RollingShutterSkew not in metadata", (uint8_t *)&buf, 2u);
    }
    CFNumberRef v13 = (const __CFNumber *)CFDictionaryGetValue(a3, (const void *)*MEMORY[0x263F2D090]);
    if (v13)
    {
      CFNumberGetValue(v13, kCFNumberFloat64Type, &v150);
    }
    else if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.value) = 0;
      _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_INFO, "Peridot TimeSync: ExposureTime not in metadata", (uint8_t *)&buf, 2u);
    }
    memset(&buf, 0, sizeof(buf));
    CMTime lhs = *a4;
    CMTimeMakeWithSeconds(&rhs, (double)valuePtr * 0.0000005, 1000000000);
    CMTimeAdd(&buf, &lhs, &rhs);
    CMTime v147 = buf;
    CMTimeMakeWithSeconds(&v146, v150 * 0.5, 1000000000);
    CMTimeSubtract(&v152, &v147, &v146);
    CMTime buf = v152;
    p_m_locuint64_t k = &this->m_lock;
    pthread_mutex_lock(&this->m_lock);
    unint64_t v15 = this->m_images.__size_.__value_;
    uint64_t v141 = a2;
    if (v15)
    {
      CMTime time1 = buf;
      unint64_t v16 = *(char **)((char *)this->m_images.__map_.__begin_
                     + (((v15 + this->m_images.__start_ - 1) >> 3) & 0x1FFFFFFFFFFFFFF8))
          + 64 * ((v15 + this->m_images.__start_ - 1) & 0x3F);
      CMTimeEpoch v17 = *((void *)v16 + 7);
      *(_OWORD *)&time2.unint64_t value = *(_OWORD *)(v16 + 40);
      time2.CMTimeEpoch epoch = v17;
      if (CMTimeCompare(&time1, &time2) < 0)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_INFO))
        {
          LOWORD(v152.value) = 0;
          _os_log_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_INFO, "Peridot TimeSync: got a frame which is older than the ones in the queue. Dropping it...", (uint8_t *)&v152, 2u);
        }
        a5->var7[a5->var6] = a2;
        CFRelease(a3);
        int v42 = (char *)a5 + 24 * a5->var6;
        long long v43 = *(_OWORD *)&a4->value;
        *((void *)v42 + 19) = a4->epoch;
        *(_OWORD *)(v42 + 136) = v43;
        ++a5->var6;
        goto LABEL_115;
      }
      unint64_t v15 = this->m_images.__size_.__value_;
      if (v15 >= 2)
      {
        if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v103 = *(char **)((char *)this->m_images.__map_.__begin_
                          + ((this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8))
               + 64 * (this->m_images.__start_ & 0x3F);
          CMTimeEpoch v104 = *((void *)v103 + 7);
          *(_OWORD *)&time.unint64_t value = *(_OWORD *)(v103 + 40);
          time.CMTimeEpoch epoch = v104;
          Float64 Seconds = CMTimeGetSeconds(&time);
          LODWORD(v152.value) = 134217984;
          *(Float64 *)((char *)&v152.value + 4) = Seconds;
          _os_log_debug_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_DEBUG, "Peridot TimeSync: discarded unpaired old image (%f)", (uint8_t *)&v152, 0xCu);
        }
        unint64_t v18 = (this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8;
        unint64_t v19 = (this->m_images.__start_ & 0x3F) << 6;
        a5->var7[a5->var6] = *(__CVBuffer **)(*(char **)((char *)this->m_images.__map_.__begin_ + v18) + v19);
        CFRelease(*(CFTypeRef *)(*(char **)((char *)this->m_images.__map_.__begin_ + v18) + v19 + 8));
        float v20 = *(char **)((char *)this->m_images.__map_.__begin_ + ((this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8))
            + 64 * (this->m_images.__start_ & 0x3F);
        long long v21 = (char *)a5 + 24 * a5->var6;
        long long v22 = *((_OWORD *)v20 + 1);
        *((void *)v21 + 19) = *((void *)v20 + 4);
        *(_OWORD *)(v21 + 136) = v22;
        ++a5->var6;
        begiuint64_t n = this->m_images.__map_.__begin_;
        unint64_t v15 = this->m_images.__size_.__value_ - 1;
        unint64_t v24 = this->m_images.__start_ + 1;
        this->m_images.__start_ = v24;
        this->m_images.__size_.__value_ = v15;
        if (v24 >= 0x80)
        {
          operator delete(*begin);
          ++this->m_images.__map_.__begin_;
          unint64_t v15 = this->m_images.__size_.__value_;
          this->m_images.__start_ -= 64;
        }
      }
    }
    std::vector<unsigned int>::pointer end = this->m_images.__map_.__end_;
    uint64_t v26 = this->m_images.__map_.__begin_;
    uint64_t v27 = (char *)end - (char *)v26;
    CMTime v152 = *a4;
    CMTime v142 = buf;
    if (end == v26) {
      uint64_t v28 = 0;
    }
    else {
      uint64_t v28 = 8 * ((char *)end - (char *)v26) - 1;
    }
    unint64_t start = this->m_images.__start_;
    unint64_t v30 = v15 + start;
    if (v28 != v30)
    {
      p_m_locuint64_t k = &this->m_lock;
      unint64_t v41 = a2;
      goto LABEL_113;
    }
    CFDictionaryRef v140 = a3;
    if (start >= 0x40)
    {
      this->m_images.__start_ = start - 64;
      unsigned int v31 = (char *)(v26 + 1);
      unsigned int v32 = *v26;
      this->m_images.__map_.__begin_ = v26 + 1;
      if (this->m_images.__map_.__end_cap_.__value_ != end)
      {
LABEL_110:
        *std::vector<unsigned int>::pointer end = v32;
        goto LABEL_111;
      }
      first = this->m_images.__map_.__first_;
      if (v31 > (char *)first)
      {
        uint64_t v34 = (v31 - (char *)first) >> 3;
        if (v34 >= -1) {
          uint64_t v35 = v34 + 1;
        }
        else {
          uint64_t v35 = v34 + 2;
        }
        uint64_t v36 = v35 >> 1;
        uint64_t v37 = -v36;
        uint64_t v38 = &v31[-8 * v36];
        int64_t v39 = (char *)end - v31;
        if (end == (void **)v31)
        {
          int v40 = end;
        }
        else
        {
          memmove(&v31[-8 * v36], v31, (char *)end - v31);
          int v40 = this->m_images.__map_.__begin_;
        }
        std::vector<unsigned int>::pointer end = (void **)&v38[v39];
        this->m_images.__map_.__begin_ = &v40[v37];
        this->m_images.__map_.__end_ = (void **)&v38[v39];
        goto LABEL_110;
      }
      if (end == first) {
        unint64_t v55 = 1;
      }
      else {
        unint64_t v55 = ((char *)end - (char *)first) >> 2;
      }
      if (!(v55 >> 61))
      {
        long long v56 = (void **)operator new(8 * v55);
        double v57 = &v56[v55 >> 2];
        int64_t v59 = (char *)end - v31;
        BOOL v58 = end == (void **)v31;
        std::vector<unsigned int>::pointer end = v57;
        if (v58) {
          goto LABEL_108;
        }
        std::vector<unsigned int>::pointer end = (void **)((char *)v57 + (v59 & 0xFFFFFFFFFFFFFFF8));
        unint64_t v60 = v59 - 8;
        if (v60 >= 0x38)
        {
          uint64_t v106 = &v56[v55 >> 2];
          int v61 = v106;
          if ((unint64_t)((char *)v106 - v31) >= 0x20)
          {
            uint64_t v107 = (v60 >> 3) + 1;
            uint64_t v108 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            int v61 = &v57[v108];
            double v109 = (long long *)(v26 + 3);
            int64_t v110 = v106 + 2;
            uint64_t v111 = v107 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v112 = *v109;
              *(v110 - 1) = *(v109 - 1);
              *int64_t v110 = v112;
              v109 += 2;
              v110 += 2;
              v111 -= 4;
            }
            while (v111);
            if (v107 == (v107 & 0x3FFFFFFFFFFFFFFCLL))
            {
LABEL_108:
              this->m_images.__map_.__first_ = v56;
              this->m_images.__map_.__begin_ = v57;
              this->m_images.__map_.__end_ = end;
              this->m_images.__map_.__end_cap_.__value_ = &v56[v55];
              if (first)
              {
                operator delete(first);
                std::vector<unsigned int>::pointer end = this->m_images.__map_.__end_;
              }
              goto LABEL_110;
            }
            v31 += v108 * 8;
          }
        }
        else
        {
          int v61 = &v56[v55 >> 2];
        }
        do
        {
          unsigned int v113 = *(void **)v31;
          v31 += 8;
          *v61++ = v113;
        }
        while (v61 != end);
        goto LABEL_108;
      }
LABEL_146:
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v44 = v27 >> 3;
    CMTimeEpoch v45 = this->m_images.__map_.__end_cap_.__value_;
    double v46 = this->m_images.__map_.__first_;
    uint64_t v47 = (char *)v45 - (char *)v46;
    if (v27 >> 3 < (unint64_t)(v45 - v46))
    {
      if (v45 != end)
      {
        *std::vector<unsigned int>::pointer end = operator new(0x1000uLL);
LABEL_111:
        ++this->m_images.__map_.__end_;
        p_m_locuint64_t k = &this->m_lock;
        unint64_t v41 = v141;
LABEL_112:
        uint64_t v26 = this->m_images.__map_.__begin_;
        unint64_t v30 = this->m_images.__size_.__value_ + this->m_images.__start_;
        a3 = v140;
LABEL_113:
        int64_t v114 = *(char **)((char *)v26 + ((v30 >> 3) & 0x1FFFFFFFFFFFFFF8)) + 64 * (v30 & 0x3F);
        *(void *)int64_t v114 = v41;
        *((void *)v114 + 1) = a3;
        *(CMTime *)(v114 + 16) = v152;
        *(CMTime *)(v114 + 40) = v142;
        ++this->m_images.__size_.__value_;
        while ((TimeSync::checkForSyncOnce(this, a5) & 1) != 0)
          ;
LABEL_115:
        pthread_mutex_unlock(p_m_lock);
        return;
      }
      uint64_t v62 = operator new(0x1000uLL);
      CMTimeEpoch v63 = v26;
      if (v46 != v26)
      {
LABEL_121:
        *(v63 - 1) = v62;
        BOOL v117 = this->m_images.__map_.__begin_;
        char v116 = this->m_images.__map_.__end_;
        this->m_images.__map_.__begin_ = v117 - 1;
        uint64_t v118 = *(v117 - 1);
        this->m_images.__map_.__begin_ = v117;
        p_m_locuint64_t k = &this->m_lock;
        unint64_t v41 = v141;
        if (v116 != this->m_images.__map_.__end_cap_.__value_)
        {
LABEL_144:
          *char v116 = v118;
          ++this->m_images.__map_.__end_;
          goto LABEL_112;
        }
        uint64_t v119 = this->m_images.__map_.__first_;
        if (v117 > v119)
        {
          uint64_t v120 = v117 - v119;
          if (v120 >= -1) {
            uint64_t v121 = v120 + 1;
          }
          else {
            uint64_t v121 = v120 + 2;
          }
          uint64_t v122 = v121 >> 1;
          uint64_t v123 = -v122;
          uint64_t v124 = &v117[-v122];
          int64_t v125 = (char *)v116 - (char *)v117;
          if (v116 != v117)
          {
            memmove(&v117[-v122], v117, (char *)v116 - (char *)v117);
            BOOL v117 = this->m_images.__map_.__begin_;
          }
          char v116 = (void **)((char *)v124 + v125);
          this->m_images.__map_.__begin_ = &v117[v123];
          this->m_images.__map_.__end_ = (void **)((char *)v124 + v125);
          goto LABEL_144;
        }
        if (v116 == v119) {
          unint64_t v126 = 1;
        }
        else {
          unint64_t v126 = ((char *)v116 - (char *)v119) >> 2;
        }
        if (v126 >> 61) {
          goto LABEL_146;
        }
        uint64_t v127 = (void **)operator new(8 * v126);
        int v128 = &v127[v126 >> 2];
        int64_t v129 = (char *)v116 - (char *)v117;
        BOOL v58 = v116 == v117;
        char v116 = v128;
        p_m_locuint64_t k = &this->m_lock;
        if (!v58)
        {
          char v116 = (void **)((char *)v128 + (v129 & 0xFFFFFFFFFFFFFFF8));
          unint64_t v130 = v129 - 8;
          if (v130 < 0x38)
          {
            CMTime v131 = &v127[v126 >> 2];
            goto LABEL_141;
          }
          CMTime v132 = &v127[v126 >> 2];
          CMTime v131 = v132;
          if ((unint64_t)((char *)v132 - (char *)v117) < 0x20)
          {
            do
            {
LABEL_141:
              int v139 = *v117++;
              *v131++ = v139;
            }
            while (v131 != v116);
            goto LABEL_142;
          }
          uint64_t v133 = (v130 >> 3) + 1;
          uint64_t v134 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          CMTime v131 = &v128[v134];
          char v135 = (long long *)(v117 + 2);
          double v136 = v132 + 2;
          uint64_t v137 = v133 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v138 = *v135;
            *(v136 - 1) = *(v135 - 1);
            _OWORD *v136 = v138;
            v135 += 2;
            v136 += 2;
            v137 -= 4;
          }
          while (v137);
          if (v133 != (v133 & 0x3FFFFFFFFFFFFFFCLL))
          {
            BOOL v117 = (void **)((char *)v117 + v134 * 8);
            goto LABEL_141;
          }
        }
LABEL_142:
        this->m_images.__map_.__first_ = v127;
        this->m_images.__map_.__begin_ = v128;
        this->m_images.__map_.__end_ = v116;
        this->m_images.__map_.__end_cap_.__value_ = &v127[v126];
        if (v119)
        {
          operator delete(v119);
          char v116 = this->m_images.__map_.__end_;
        }
        goto LABEL_144;
      }
      if (end == v26) {
        unint64_t v64 = 1;
      }
      else {
        unint64_t v64 = v47 >> 2;
      }
      if (v64 >> 61) {
        goto LABEL_146;
      }
      uint64_t v65 = (void **)operator new(8 * v64);
      unint64_t v66 = (v64 + 3) >> 2;
      CMTimeEpoch v63 = &v65[v66];
      double v67 = &v65[v64];
      CMTimeEpoch v68 = v63;
      if (end != v26)
      {
        CMTimeEpoch v68 = (void **)((char *)v63 + (((char *)end - (char *)v46) & 0xFFFFFFFFFFFFFFF8));
        unint64_t v69 = (char *)end - (char *)v46 - 8;
        uint64_t v70 = &v65[v66];
        long long v71 = v26;
        if (v69 > 0x37)
        {
          uint64_t v72 = &v65[v66];
          uint64_t v70 = v72;
          long long v71 = v26;
          if ((unint64_t)((char *)v72 - (char *)v46) >= 0x20)
          {
            uint64_t v73 = (v69 >> 3) + 1;
            uint64_t v74 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            uint64_t v70 = &v63[v74];
            long long v75 = (long long *)(v26 + 2);
            unint64_t v76 = v72 + 2;
            uint64_t v77 = v73 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              long long v78 = *v75;
              *(v76 - 1) = *(v75 - 1);
              _OWORD *v76 = v78;
              v75 += 2;
              v76 += 2;
              v77 -= 4;
            }
            while (v77);
            if (v73 == (v73 & 0x3FFFFFFFFFFFFFFCLL))
            {
              this->m_images.__map_.__first_ = v65;
              this->m_images.__map_.__begin_ = v63;
              this->m_images.__map_.__end_ = v68;
              this->m_images.__map_.__end_cap_.__value_ = v67;
LABEL_120:
              operator delete(v26);
              CMTimeEpoch v63 = this->m_images.__map_.__begin_;
              goto LABEL_121;
            }
            long long v71 = &v26[v74];
          }
        }
        do
        {
          unint64_t v115 = *v71++;
          *v70++ = v115;
        }
        while (v70 != v68);
      }
      this->m_images.__map_.__first_ = v65;
      this->m_images.__map_.__begin_ = v63;
      this->m_images.__map_.__end_ = v68;
      this->m_images.__map_.__end_cap_.__value_ = v67;
      if (!v26) {
        goto LABEL_121;
      }
      goto LABEL_120;
    }
    if (v45 == v46) {
      unint64_t v48 = 1;
    }
    else {
      unint64_t v48 = v47 >> 2;
    }
    if (v48 >> 61) {
      goto LABEL_146;
    }
    double v49 = (void **)operator new(8 * v48);
    unint64_t v50 = operator new(0x1000uLL);
    long long v51 = &v49[v44];
    CMTimeEpoch v52 = &v49[v48];
    if (v44 == v48)
    {
      unsigned int v53 = v50;
      if (v27 < 1)
      {
        if (end == v26) {
          unint64_t v79 = 1;
        }
        else {
          unint64_t v79 = v27 >> 2;
        }
        if (v79 >> 61) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        long long v51 = (void **)operator new(8 * v79);
        CMTimeEpoch v52 = &v51[v79];
        operator delete(v49);
        uint64_t v26 = this->m_images.__map_.__begin_;
        std::vector<unsigned int>::pointer end = this->m_images.__map_.__end_;
        double v49 = v51;
      }
      else
      {
        unint64_t v54 = v44 + 2;
        if (v44 >= -1) {
          unint64_t v54 = v44 + 1;
        }
        v51 -= v54 >> 1;
      }
      unint64_t v50 = v53;
    }
    const double *v51 = v50;
    CMTimeEpoch v80 = v51 + 1;
    if (end == v26)
    {
      int64x2_t v81 = v51;
      uint64_t v82 = v51 + 1;
LABEL_75:
      unint64_t v83 = this->m_images.__map_.__first_;
      this->m_images.__map_.__first_ = v49;
      this->m_images.__map_.__begin_ = v81;
      this->m_images.__map_.__end_ = v82;
      this->m_images.__map_.__end_cap_.__value_ = v52;
      p_m_locuint64_t k = &this->m_lock;
      unint64_t v41 = v141;
      if (v83) {
        operator delete(v83);
      }
      goto LABEL_112;
    }
    while (v51 != v49)
    {
      uint64_t v84 = v51;
      uint64_t v82 = v80;
LABEL_78:
      uint64_t v85 = *--end;
      *(v84 - 1) = v85;
      int64x2_t v81 = v84 - 1;
      CMTimeEpoch v80 = v82;
      long long v51 = v81;
      if (end == this->m_images.__map_.__begin_) {
        goto LABEL_75;
      }
    }
    if (v80 < v52)
    {
      uint64_t v86 = v52 - v80;
      if (v86 >= -1) {
        unint64_t v87 = v86 + 1;
      }
      else {
        unint64_t v87 = v86 + 2;
      }
      uint64_t v82 = &v80[v87 >> 1];
      uint64_t v84 = &v51[v87 >> 1];
      if (v80 == v51)
      {
        double v49 = v80;
      }
      else
      {
        memmove(&v51[v87 >> 1], v51, (char *)v80 - (char *)v51);
        double v49 = v51;
      }
      goto LABEL_78;
    }
    if (v52 == v51) {
      unint64_t v88 = 1;
    }
    else {
      unint64_t v88 = ((char *)v52 - (char *)v51) >> 2;
    }
    if (v88 >> 61) {
      std::__throw_bad_array_new_length[abi:ne180100]();
    }
    uint64_t v89 = (void **)operator new(8 * v88);
    double v49 = v89;
    unint64_t v90 = (v88 + 3) >> 2;
    uint64_t v84 = &v89[v90];
    uint64_t v82 = v84;
    int64_t v91 = (char *)v80 - (char *)v51;
    if (v80 != v51)
    {
      uint64_t v82 = (void **)((char *)v84 + (v91 & 0xFFFFFFFFFFFFFFF8));
      unint64_t v92 = v91 - 8;
      CMTime v93 = (char *)&v89[v90];
      CMTime v94 = v51;
      if (v92 >= 0x38)
      {
        uint64_t v95 = v90;
        CMTime v93 = (char *)&v89[v90];
        CMTime v94 = v51;
        if ((unint64_t)(v93 - (char *)v51) >= 0x20)
        {
          uint64_t v96 = (v92 >> 3) + 1;
          uint64_t v97 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          CMTime v93 = (char *)&v84[v97];
          CMTime v98 = (long long *)(v51 + 2);
          CMTime v99 = (char *)&v89[v95 + 2];
          uint64_t v100 = v96 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v101 = *v98;
            *((_OWORD *)v99 - 1) = *(v98 - 1);
            *(_OWORD *)CMTime v99 = v101;
            v98 += 2;
            v99 += 32;
            v100 -= 4;
          }
          while (v100);
          if (v96 == (v96 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_98;
          }
          CMTime v94 = &v51[v97];
        }
      }
      do
      {
        uint64_t v102 = (uint64_t)*v94++;
        *(void *)CMTime v93 = v102;
        v93 += 8;
      }
      while (v93 != (char *)v82);
    }
LABEL_98:
    CMTimeEpoch v52 = &v89[v88];
    operator delete(v51);
    goto LABEL_78;
  }
  if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.value) = 0;
    _os_log_error_impl(&dword_258FEE000, &_os_log_internal, OS_LOG_TYPE_ERROR, "Peridot TimeSync: got null image or metadata", (uint8_t *)&buf, 2u);
  }
}

void sub_25907AA5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, pthread_mutex_t *a11)
{
  operator delete(v11);
  operator delete(v12);
  pthread_mutex_unlock(a11);
  _Unwind_Resume(a1);
}

uint64_t TimeSync::purgeAllImages(TimeSync *this, PushResults *a2)
{
  *(_OWORD *)&a2->var0 = 0u;
  *(_OWORD *)&a2->var2.var0 = 0u;
  *(_OWORD *)&a2->var2.var2 = 0u;
  id v4 = a2->var4[0];
  a2->var4[0] = 0;

  id v5 = a2->var4[1];
  a2->var4[1] = 0;

  a2->var6 = 0;
  *(_OWORD *)&a2->var5[0].var3 = 0u;
  *(_OWORD *)&a2->var5[1].var1 = 0u;
  *(_OWORD *)&a2->var5[0].var0 = 0u;
  *(_OWORD *)(&a2->var6 + 1) = v15;
  HIDWORD(a2->var7[1]) = 0;
  *(_OWORD *)&a2->var8[0].var0 = 0u;
  *(_OWORD *)&a2->var8[0].var3 = 0u;
  *(_OWORD *)&a2->var8[1].var1 = 0u;
  pthread_mutex_lock(&this->m_lock);
  if (this->m_images.__size_.__value_)
  {
    begiuint64_t n = this->m_images.__map_.__begin_;
    unint64_t start = this->m_images.__start_;
    do
    {
      uint64_t v8 = (start >> 3) & 0x1FFFFFFFFFFFFFF8;
      unint64_t v9 = (start & 0x3F) << 6;
      a2->var7[a2->var6] = *(__CVBuffer **)(*(char **)((char *)begin + v8) + v9);
      CFRelease(*(CFTypeRef *)(*(char **)((char *)this->m_images.__map_.__begin_ + v8) + v9 + 8));
      id v10 = *(char **)((char *)this->m_images.__map_.__begin_ + ((this->m_images.__start_ >> 3) & 0x1FFFFFFFFFFFFFF8))
          + 64 * (this->m_images.__start_ & 0x3F);
      id v11 = (char *)a2 + 24 * a2->var6;
      long long v12 = *((_OWORD *)v10 + 1);
      *((void *)v11 + 19) = *((void *)v10 + 4);
      *(_OWORD *)(v11 + 136) = v12;
      ++a2->var6;
      begiuint64_t n = this->m_images.__map_.__begin_;
      unint64_t value = this->m_images.__size_.__value_ - 1;
      unint64_t start = this->m_images.__start_ + 1;
      this->m_images.__start_ = start;
      this->m_images.__size_.__value_ = value;
      if (start >= 0x80)
      {
        operator delete(*begin);
        begiuint64_t n = this->m_images.__map_.__begin_ + 1;
        this->m_images.__map_.__begin_ = begin;
        unint64_t value = this->m_images.__size_.__value_;
        unint64_t start = this->m_images.__start_ - 64;
        this->m_images.__start_ = start;
      }
    }
    while (value);
  }
  return pthread_mutex_unlock(&this->m_lock);
}

void sub_25907AC74(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

void sub_25907AE00(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_25907B1E0(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_25907BAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25907BE8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25907C00C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25907C0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25907C168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)PDTimestampedImage;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_25907C23C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25907C3D8(_Unwind_Exception *a1)
{
  std::deque<TimeSync::TimestampedObject<TimeSync::Image>>::~deque[abi:ne180100](v2 + 56);
  std::deque<TimeSync::TimestampedObject<ADJasperPointCloud * {__strong}>>::~deque[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void sub_25907C4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  _Unwind_Resume(a1);
}

void sub_25907C884(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_25907CA18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_25907CAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_25907CBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void peridot::CalibManager::getCalibClassNames(char **a1)
{
  uint64_t v2 = *a1;
  for (int i = a1[1]; i != v2; i -= 24)
  {
    if (*(i - 1) < 0) {
      operator delete(*((void **)i - 3));
    }
  }
  uint64_t v4 = 0;
  a1[1] = v2;
  do
  {
    size_t v7 = strlen(&CalibrationDataTypeName[256 * v4]);
    if (v7 >= 0x7FFFFFFFFFFFFFF8) {
      std::string::__throw_length_error[abi:ne180100]();
    }
    size_t v8 = v7;
    if (v7 >= 0x17)
    {
      uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v10 = v7 | 7;
      }
      uint64_t v11 = v10 + 1;
      p_dst = (long long *)operator new(v10 + 1);
      *((void *)&__dst + 1) = v8;
      unint64_t v25 = v11 | 0x8000000000000000;
      *(void *)&long long __dst = p_dst;
LABEL_16:
      memcpy(p_dst, &CalibrationDataTypeName[256 * v4], v8);
      goto LABEL_17;
    }
    HIBYTE(v25) = v7;
    p_dst = &__dst;
    if (v7) {
      goto LABEL_16;
    }
LABEL_17:
    *((unsigned char *)p_dst + v8) = 0;
    CFNumberRef v13 = (void **)a1[1];
    unint64_t v12 = (unint64_t)a1[2];
    if ((unint64_t)v13 < v12)
    {
      long long v5 = __dst;
      v13[2] = (void *)v25;
      *(_OWORD *)CFNumberRef v13 = v5;
      uint64_t v6 = (char *)(v13 + 3);
    }
    else
    {
      unsigned int v14 = (void **)*a1;
      unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - *a1) >> 3);
      unint64_t v16 = v15 + 1;
      if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned int>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (void)v14) >> 3);
      if (2 * v17 > v16) {
        unint64_t v16 = 2 * v17;
      }
      if (v17 >= 0x555555555555555) {
        unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v18 = v16;
      }
      if (v18)
      {
        if (v18 > 0xAAAAAAAAAAAAAAALL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        unint64_t v19 = (char *)operator new(24 * v18);
      }
      else
      {
        unint64_t v19 = 0;
      }
      float v20 = &v19[24 * v15];
      *(_OWORD *)float v20 = __dst;
      *((void *)v20 + 2) = v25;
      long long v21 = &v19[24 * v18];
      unint64_t v25 = 0;
      long long __dst = 0uLL;
      uint64_t v6 = v20 + 24;
      if (v13 == v14)
      {
        *a1 = v20;
        a1[1] = v6;
        a1[2] = v21;
      }
      else
      {
        do
        {
          long long v22 = *(_OWORD *)(v13 - 3);
          *((void *)v20 - 1) = *(v13 - 1);
          *(_OWORD *)(v20 - 24) = v22;
          v20 -= 24;
          *(v13 - 2) = 0;
          *(v13 - 1) = 0;
          *(v13 - 3) = 0;
          v13 -= 3;
        }
        while (v13 != v14);
        CFNumberRef v13 = (void **)*a1;
        unint64_t v23 = (void **)a1[1];
        *a1 = v20;
        a1[1] = v6;
        a1[2] = v21;
        while (v23 != v13)
        {
          if (*((char *)v23 - 1) < 0) {
            operator delete(*(v23 - 3));
          }
          v23 -= 3;
        }
      }
      if (v13) {
        operator delete(v13);
      }
    }
    a1[1] = v6;
    ++v4;
  }
  while (v4 != 9);
}

void sub_25907CF08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double copyJLNM_refData<jlnm_v100>(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 4100);
  *(double *)(a2 + 346204) = result;
  *(_WORD *)(a2 + 346212) = *(_WORD *)(a1 + 4108);
  *(unsigned char *)(a2 + 346216) = *(unsigned char *)(a1 + 4068);
  *(unsigned char *)(a2 + 346217) = *(unsigned char *)(a1 + 4069);
  *(unsigned char *)(a2 + 346218) = *(unsigned char *)(a1 + 4070);
  *(unsigned char *)(a2 + 346219) = *(unsigned char *)(a1 + 4071);
  *(unsigned char *)(a2 + 346220) = *(unsigned char *)(a1 + 4072);
  *(unsigned char *)(a2 + 346221) = *(unsigned char *)(a1 + 4073);
  *(unsigned char *)(a2 + 346222) = *(unsigned char *)(a1 + 4074);
  *(unsigned char *)(a2 + 346223) = *(unsigned char *)(a1 + 4075);
  *(unsigned char *)(a2 + 346224) = *(unsigned char *)(a1 + 4076);
  *(unsigned char *)(a2 + 346225) = *(unsigned char *)(a1 + 4077);
  *(unsigned char *)(a2 + 346226) = *(unsigned char *)(a1 + 4078);
  *(unsigned char *)(a2 + 346227) = *(unsigned char *)(a1 + 4079);
  *(unsigned char *)(a2 + 346228) = *(unsigned char *)(a1 + 4080);
  *(unsigned char *)(a2 + 346229) = *(unsigned char *)(a1 + 4081);
  *(unsigned char *)(a2 + 346230) = *(unsigned char *)(a1 + 4082);
  *(unsigned char *)(a2 + 346231) = *(unsigned char *)(a1 + 4083);
  *(unsigned char *)(a2 + 346232) = *(unsigned char *)(a1 + 4084);
  *(unsigned char *)(a2 + 346233) = *(unsigned char *)(a1 + 4085);
  *(unsigned char *)(a2 + 346234) = *(unsigned char *)(a1 + 4086);
  *(unsigned char *)(a2 + 346235) = *(unsigned char *)(a1 + 4087);
  *(unsigned char *)(a2 + 346236) = *(unsigned char *)(a1 + 4088);
  *(unsigned char *)(a2 + 346237) = *(unsigned char *)(a1 + 4089);
  *(unsigned char *)(a2 + 346238) = *(unsigned char *)(a1 + 4090);
  *(unsigned char *)(a2 + 346239) = *(unsigned char *)(a1 + 4091);
  *(unsigned char *)(a2 + 346240) = *(unsigned char *)(a1 + 4092);
  *(unsigned char *)(a2 + 346241) = *(unsigned char *)(a1 + 4093);
  *(unsigned char *)(a2 + 346242) = *(unsigned char *)(a1 + 4094);
  *(unsigned char *)(a2 + 346243) = *(unsigned char *)(a1 + 4095);
  *(unsigned char *)(a2 + 346244) = *(unsigned char *)(a1 + 4096);
  *(unsigned char *)(a2 + 346245) = *(unsigned char *)(a1 + 4097);
  *(unsigned char *)(a2 + 346246) = *(unsigned char *)(a1 + 4098);
  *(unsigned char *)(a2 + 346247) = *(unsigned char *)(a1 + 4099);
  return result;
}

double copyJLNM_refData<jlnm_v101>(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 3652);
  *(double *)(a2 + 346204) = result;
  *(_WORD *)(a2 + 346212) = *(_WORD *)(a1 + 3660);
  *(unsigned char *)(a2 + 346216) = *(unsigned char *)(a1 + 3620);
  *(unsigned char *)(a2 + 346217) = *(unsigned char *)(a1 + 3621);
  *(unsigned char *)(a2 + 346218) = *(unsigned char *)(a1 + 3622);
  *(unsigned char *)(a2 + 346219) = *(unsigned char *)(a1 + 3623);
  *(unsigned char *)(a2 + 346220) = *(unsigned char *)(a1 + 3624);
  *(unsigned char *)(a2 + 346221) = *(unsigned char *)(a1 + 3625);
  *(unsigned char *)(a2 + 346222) = *(unsigned char *)(a1 + 3626);
  *(unsigned char *)(a2 + 346223) = *(unsigned char *)(a1 + 3627);
  *(unsigned char *)(a2 + 346224) = *(unsigned char *)(a1 + 3628);
  *(unsigned char *)(a2 + 346225) = *(unsigned char *)(a1 + 3629);
  *(unsigned char *)(a2 + 346226) = *(unsigned char *)(a1 + 3630);
  *(unsigned char *)(a2 + 346227) = *(unsigned char *)(a1 + 3631);
  *(unsigned char *)(a2 + 346228) = *(unsigned char *)(a1 + 3632);
  *(unsigned char *)(a2 + 346229) = *(unsigned char *)(a1 + 3633);
  *(unsigned char *)(a2 + 346230) = *(unsigned char *)(a1 + 3634);
  *(unsigned char *)(a2 + 346231) = *(unsigned char *)(a1 + 3635);
  *(unsigned char *)(a2 + 346232) = *(unsigned char *)(a1 + 3636);
  *(unsigned char *)(a2 + 346233) = *(unsigned char *)(a1 + 3637);
  *(unsigned char *)(a2 + 346234) = *(unsigned char *)(a1 + 3638);
  *(unsigned char *)(a2 + 346235) = *(unsigned char *)(a1 + 3639);
  *(unsigned char *)(a2 + 346236) = *(unsigned char *)(a1 + 3640);
  *(unsigned char *)(a2 + 346237) = *(unsigned char *)(a1 + 3641);
  *(unsigned char *)(a2 + 346238) = *(unsigned char *)(a1 + 3642);
  *(unsigned char *)(a2 + 346239) = *(unsigned char *)(a1 + 3643);
  *(unsigned char *)(a2 + 346240) = *(unsigned char *)(a1 + 3644);
  *(unsigned char *)(a2 + 346241) = *(unsigned char *)(a1 + 3645);
  *(unsigned char *)(a2 + 346242) = *(unsigned char *)(a1 + 3646);
  *(unsigned char *)(a2 + 346243) = *(unsigned char *)(a1 + 3647);
  *(unsigned char *)(a2 + 346244) = *(unsigned char *)(a1 + 3648);
  *(unsigned char *)(a2 + 346245) = *(unsigned char *)(a1 + 3649);
  *(unsigned char *)(a2 + 346246) = *(unsigned char *)(a1 + 3650);
  *(unsigned char *)(a2 + 346247) = *(unsigned char *)(a1 + 3651);
  return result;
}

double copyJLNM_refData<jlnm_v102>(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 2784);
  *(double *)(a2 + 346204) = result;
  *(_WORD *)(a2 + 346212) = *(_WORD *)(a1 + 2792);
  *(unsigned char *)(a2 + 346216) = *(unsigned char *)(a1 + 2752);
  *(unsigned char *)(a2 + 346217) = *(unsigned char *)(a1 + 2753);
  *(unsigned char *)(a2 + 346218) = *(unsigned char *)(a1 + 2754);
  *(unsigned char *)(a2 + 346219) = *(unsigned char *)(a1 + 2755);
  *(unsigned char *)(a2 + 346220) = *(unsigned char *)(a1 + 2756);
  *(unsigned char *)(a2 + 346221) = *(unsigned char *)(a1 + 2757);
  *(unsigned char *)(a2 + 346222) = *(unsigned char *)(a1 + 2758);
  *(unsigned char *)(a2 + 346223) = *(unsigned char *)(a1 + 2759);
  *(unsigned char *)(a2 + 346224) = *(unsigned char *)(a1 + 2760);
  *(unsigned char *)(a2 + 346225) = *(unsigned char *)(a1 + 2761);
  *(unsigned char *)(a2 + 346226) = *(unsigned char *)(a1 + 2762);
  *(unsigned char *)(a2 + 346227) = *(unsigned char *)(a1 + 2763);
  *(unsigned char *)(a2 + 346228) = *(unsigned char *)(a1 + 2764);
  *(unsigned char *)(a2 + 346229) = *(unsigned char *)(a1 + 2765);
  *(unsigned char *)(a2 + 346230) = *(unsigned char *)(a1 + 2766);
  *(unsigned char *)(a2 + 346231) = *(unsigned char *)(a1 + 2767);
  *(unsigned char *)(a2 + 346232) = *(unsigned char *)(a1 + 2768);
  *(unsigned char *)(a2 + 346233) = *(unsigned char *)(a1 + 2769);
  *(unsigned char *)(a2 + 346234) = *(unsigned char *)(a1 + 2770);
  *(unsigned char *)(a2 + 346235) = *(unsigned char *)(a1 + 2771);
  *(unsigned char *)(a2 + 346236) = *(unsigned char *)(a1 + 2772);
  *(unsigned char *)(a2 + 346237) = *(unsigned char *)(a1 + 2773);
  *(unsigned char *)(a2 + 346238) = *(unsigned char *)(a1 + 2774);
  *(unsigned char *)(a2 + 346239) = *(unsigned char *)(a1 + 2775);
  *(unsigned char *)(a2 + 346240) = *(unsigned char *)(a1 + 2776);
  *(unsigned char *)(a2 + 346241) = *(unsigned char *)(a1 + 2777);
  *(unsigned char *)(a2 + 346242) = *(unsigned char *)(a1 + 2778);
  *(unsigned char *)(a2 + 346243) = *(unsigned char *)(a1 + 2779);
  *(unsigned char *)(a2 + 346244) = *(unsigned char *)(a1 + 2780);
  *(unsigned char *)(a2 + 346245) = *(unsigned char *)(a1 + 2781);
  *(unsigned char *)(a2 + 346246) = *(unsigned char *)(a1 + 2782);
  *(unsigned char *)(a2 + 346247) = *(unsigned char *)(a1 + 2783);
  return result;
}

uint64_t peridot::CalibManager::blobsFromNVM(peridot::CalibManager *this, const __CFData *a2, const __CFData *a3, const char *a4, float a5)
{
  uint64_t v5 = MEMORY[0x270FA5388](this, a2, a3, a5);
  v28[4209] = *MEMORY[0x263EF8340];
  if (!nvmToFDR(v5, v6, v7, v8)) {
    return 0;
  }
  unint64_t v9 = objc_msgSend(MEMORY[0x263EFF8F8], "dataWithBytes:length:", v21, 104, @"jlnl");
  v20[0] = v9;
  v19[1] = @"jlpq";
  uint64_t v10 = [MEMORY[0x263EFF8F8] dataWithBytes:&v22 length:9124];
  v20[1] = v10;
  v19[2] = @"jlps";
  uint64_t v11 = [MEMORY[0x263EFF8F8] dataWithBytes:&v23 length:12628];
  v20[2] = v11;
  v19[3] = @"jlnm";
  unint64_t v12 = [MEMORY[0x263EFF8F8] dataWithBytes:&v24 length:75388];
  v20[3] = v12;
  v19[4] = @"jlsk";
  CFNumberRef v13 = [MEMORY[0x263EFF8F8] dataWithBytes:&v25 length:18080];
  v20[4] = v13;
  v19[5] = @"jlin";
  unsigned int v14 = [MEMORY[0x263EFF8F8] dataWithBytes:&v26 length:4172];
  v20[5] = v14;
  v19[6] = @"jlex";
  unint64_t v15 = [MEMORY[0x263EFF8F8] dataWithBytes:&v27 length:116];
  v20[6] = v15;
  v19[7] = @"jlnv";
  unint64_t v16 = [MEMORY[0x263EFF8F8] dataWithBytes:v28 length:33672];
  v20[7] = v16;
  uint64_t v17 = [NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:8];

  return v17;
}

void sub_25907D4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

peridot::CalibManager *peridot::CalibManager::fillPeridotCalib(peridot::CalibManager *this, const __CFData *a2, const __CFData *a3, char *a4, _PeridotCalib *a5, float a6)
{
  double result = (peridot::CalibManager *)peridot::CalibManager::blobsFromNVM(this, a2, a3, a4, a6);
  if (result)
  {
    return (peridot::CalibManager *)peridot::CalibManager::fillPeridotCalib(result, (_PeridotCalib *)a4, v8);
  }
  return result;
}

uint64_t peridot::CalibManager::fillPeridotCalib(peridot::CalibManager *this, _PeridotCalib *a2, _PeridotCalib *a3)
{
  uint64_t v3 = 0;
  if (!this || !a2) {
    return v3;
  }
  CFAllocatorRef v6 = (const __CFAllocator *)*MEMORY[0x263EFFB08];
  CFStringRef v7 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x263EFFB08], "JasperLCalib", 0x8000100u);
  CFDataRef Value = (const __CFData *)CFDictionaryGetValue(this, v7);
  CFRelease(v7);
  if (!Value)
  {
    std::string __p = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    peridot::CalibManager::getCalibClassNames((char **)&__p);
    v21[0] = 0;
    v21[1] = 0;
    float v20 = v21;
    for (int i = (char *)__p; i != v23; i += 24)
    {
      CFNumberRef v13 = i;
      if (i[23] < 0) {
        CFNumberRef v13 = *(const char **)i;
      }
      CFStringRef v14 = CFStringCreateWithCString(v6, v13, 0x8000100u);
      CFDataRef v15 = (const __CFData *)CFDictionaryGetValue(this, v14);
      CFRelease(v14);
      if (v15)
      {
        BytePtr = CFDataGetBytePtr(v15);
        CFIndex Length = CFDataGetLength(v15);
        unint64_t v18 = std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&v20, (const void **)i, (uint64_t)i);
        v18[7] = (uint64_t *)BytePtr;
        v18[8] = (uint64_t *)Length;
      }
    }
    uint64_t v3 = peridot::CalibManager::fillPeridotCalib((uint64_t)&v20, a2);
    std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(v21[0]);
    unint64_t v19 = (char *)__p;
    if (__p)
    {
      while (i != v19)
      {
        if (*(i - 1) < 0) {
          operator delete(*((void **)i - 3));
        }
        i -= 24;
      }
      operator delete(v19);
    }
    return v3;
  }
  unint64_t v9 = (char *)CFDataGetBytePtr(Value);
  CFIndex v10 = CFDataGetLength(Value);
  return readPeridotCalibFromBuffer(v9, v10, a2);
}

{
  void *v5;
  peridot::CalibManager *v6;
  _PeridotCalib *v7;
  peridot::CalibManager *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  FILE *v12;
  FILE *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char **v18;
  BOOL v19;
  char **v21;
  char *v22[2];
  void *__p;
  void *v24;
  uint64_t v25;
  char __str[2048];
  uint64_t v27;

  int v27 = *MEMORY[0x263EF8340];
  uint64_t v5 = objc_msgSend(NSString, "stringWithFormat:", @"%s/JpCl.bin", this);
  CFAllocatorRef v6 = [NSDictionary dictionaryWithContentsOfFile:v5];
  float v8 = v6;
  if (v6)
  {
    unint64_t v9 = peridot::CalibManager::fillPeridotCalib(v6, a2, v7);
  }
  else
  {
    std::string __p = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    peridot::CalibManager::getCalibClassNames((char **)&__p);
    v22[0] = 0;
    v22[1] = 0;
    long long v21 = v22;
    CFIndex v10 = (const char *)__p;
    if (__p != v24)
    {
      do
      {
        uint64_t v11 = v10;
        if (v10[23] < 0) {
          uint64_t v11 = *(const char **)v10;
        }
        snprintf(__str, 0x800uLL, "%s/%s.bin", (const char *)this, v11);
        unint64_t v12 = fopen(__str, "r");
        CFNumberRef v13 = v12;
        if (v12)
        {
          fseek(v12, 0, 2);
          MEMORY[0x25A2D6600](v13);
          fseek(v13, 0, 0);
          operator new[]();
        }
        v10 += 24;
      }
      while (v10 != v24);
    }
    unint64_t v9 = peridot::CalibManager::fillPeridotCalib((uint64_t)&v21, a2);
    CFStringRef v14 = (char *)v21;
    if (v21 != v22)
    {
      do
      {
        unint64_t v16 = *((void *)v14 + 7);
        if (v16) {
          MEMORY[0x25A2D62A0](v16, 0x1000C8077774924);
        }
        uint64_t v17 = (char *)*((void *)v14 + 1);
        if (v17)
        {
          do
          {
            unint64_t v18 = (char **)v17;
            uint64_t v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            unint64_t v18 = (char **)*((void *)v14 + 2);
            unint64_t v19 = *v18 == v14;
            CFStringRef v14 = (char *)v18;
          }
          while (!v19);
        }
        CFStringRef v14 = (char *)v18;
      }
      while (v18 != v22);
    }
    std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(v22[0]);
    CFDataRef v15 = (char *)__p;
    if (__p)
    {
      while (v10 != v15)
      {
        if (*(v10 - 1) < 0) {
          operator delete(*((void **)v10 - 3));
        }
        v10 -= 24;
      }
      operator delete(v15);
    }
  }

  return v9;
}

void sub_25907D75C(_Unwind_Exception *a1, uint64_t a2, char *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(a3);
  std::vector<std::string>::~vector[abi:ne180100]((void **)va);
  _Unwind_Resume(a1);
}

uint64_t peridot::CalibManager::fillPeridotCalib(uint64_t a1, _DWORD *a2)
{
  bzero(a2, 0x62460uLL);
  *a2 = 9;
  unsigned int v63 = 0;
  if (getBlobVersion(a1, "jlnl", &v63, 1))
  {
    uint64_t v4 = v63;
    *((unsigned char *)a2 + 402520) = v63;
    switch(v4)
    {
      case 'd':
        char v65 = 4;
        strcpy(__s2, "jlnl");
        uint64_t v43 = a1 + 8;
        uint64_t v44 = *(void *)(a1 + 8);
        if (v44)
        {
          uint64_t v45 = a1 + 8;
          do
          {
            unint64_t v46 = *(unsigned __int8 *)(v44 + 55);
            int v47 = (char)v46;
            if ((v46 & 0x80u) != 0) {
              unint64_t v46 = *(void *)(v44 + 40);
            }
            if (v47 >= 0) {
              unint64_t v48 = (const void *)(v44 + 32);
            }
            else {
              unint64_t v48 = *(const void **)(v44 + 32);
            }
            if (v46 >= 4) {
              size_t v49 = 4;
            }
            else {
              size_t v49 = v46;
            }
            BOOL v50 = v46 < 4;
            int v51 = memcmp(v48, __s2, v49);
            BOOL v52 = v51 < 0;
            if (!v51) {
              BOOL v52 = v50;
            }
            BOOL v53 = !v52;
            if (v52) {
              unint64_t v54 = (uint64_t *)(v44 + 8);
            }
            else {
              unint64_t v54 = (uint64_t *)v44;
            }
            if (v53) {
              uint64_t v45 = v44;
            }
            uint64_t v44 = *v54;
          }
          while (*v54);
          if (v45 != v43)
          {
            unint64_t v55 = *(unsigned __int8 *)(v45 + 55);
            int v56 = (char)v55;
            if ((v55 & 0x80u) != 0) {
              unint64_t v55 = *(void *)(v45 + 40);
            }
            if (v56 >= 0) {
              double v57 = (const void *)(v45 + 32);
            }
            else {
              double v57 = *(const void **)(v45 + 32);
            }
            if (v55 >= 4) {
              size_t v58 = 4;
            }
            else {
              size_t v58 = v55;
            }
            BOOL v59 = v55 > 4;
            int v60 = memcmp(__s2, v57, v58);
            BOOL v61 = v60 < 0;
            if (!v60) {
              BOOL v61 = v59;
            }
            if (!v61 && v45 != v43)
            {
              if (*(void *)(v45 + 64) == 24) {
                operator new();
              }
              peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnl", *(void *)(v45 + 64), 24);
            }
          }
        }
        break;
      case 'e':
        char v65 = 4;
        strcpy(__s2, "jlnl");
        uint64_t v24 = a1 + 8;
        uint64_t v25 = *(void *)(a1 + 8);
        if (v25)
        {
          uint64_t v26 = a1 + 8;
          do
          {
            unint64_t v27 = *(unsigned __int8 *)(v25 + 55);
            int v28 = (char)v27;
            if ((v27 & 0x80u) != 0) {
              unint64_t v27 = *(void *)(v25 + 40);
            }
            if (v28 >= 0) {
              int64x2_t v29 = (const void *)(v25 + 32);
            }
            else {
              int64x2_t v29 = *(const void **)(v25 + 32);
            }
            if (v27 >= 4) {
              size_t v30 = 4;
            }
            else {
              size_t v30 = v27;
            }
            BOOL v31 = v27 < 4;
            int v32 = memcmp(v29, __s2, v30);
            BOOL v33 = v32 < 0;
            if (!v32) {
              BOOL v33 = v31;
            }
            BOOL v34 = !v33;
            if (v33) {
              uint64_t v35 = (uint64_t *)(v25 + 8);
            }
            else {
              uint64_t v35 = (uint64_t *)v25;
            }
            if (v34) {
              uint64_t v26 = v25;
            }
            uint64_t v25 = *v35;
          }
          while (*v35);
          if (v26 != v24)
          {
            unint64_t v36 = *(unsigned __int8 *)(v26 + 55);
            int v37 = (char)v36;
            if ((v36 & 0x80u) != 0) {
              unint64_t v36 = *(void *)(v26 + 40);
            }
            if (v37 >= 0) {
              uint64_t v38 = (const void *)(v26 + 32);
            }
            else {
              uint64_t v38 = *(const void **)(v26 + 32);
            }
            if (v36 >= 4) {
              size_t v39 = 4;
            }
            else {
              size_t v39 = v36;
            }
            BOOL v40 = v36 > 4;
            int v41 = memcmp(__s2, v38, v39);
            BOOL v42 = v41 < 0;
            if (!v41) {
              BOOL v42 = v40;
            }
            if (!v42 && v26 != v24)
            {
              if (*(void *)(v26 + 64) == 100) {
                operator new();
              }
              peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnl", *(void *)(v26 + 64), 100);
            }
          }
        }
        break;
      case 'f':
        char v65 = 4;
        strcpy(__s2, "jlnl");
        uint64_t v5 = a1 + 8;
        uint64_t v6 = *(void *)(a1 + 8);
        if (v6)
        {
          uint64_t v7 = a1 + 8;
          do
          {
            unint64_t v8 = *(unsigned __int8 *)(v6 + 55);
            int v9 = (char)v8;
            if ((v8 & 0x80u) != 0) {
              unint64_t v8 = *(void *)(v6 + 40);
            }
            if (v9 >= 0) {
              CFIndex v10 = (const void *)(v6 + 32);
            }
            else {
              CFIndex v10 = *(const void **)(v6 + 32);
            }
            if (v8 >= 4) {
              size_t v11 = 4;
            }
            else {
              size_t v11 = v8;
            }
            BOOL v12 = v8 < 4;
            int v13 = memcmp(v10, __s2, v11);
            BOOL v14 = v13 < 0;
            if (!v13) {
              BOOL v14 = v12;
            }
            BOOL v15 = !v14;
            if (v14) {
              unint64_t v16 = (uint64_t *)(v6 + 8);
            }
            else {
              unint64_t v16 = (uint64_t *)v6;
            }
            if (v15) {
              uint64_t v7 = v6;
            }
            uint64_t v6 = *v16;
          }
          while (*v16);
          if (v7 != v5)
          {
            unint64_t v17 = *(unsigned __int8 *)(v7 + 55);
            int v18 = (char)v17;
            if ((v17 & 0x80u) != 0) {
              unint64_t v17 = *(void *)(v7 + 40);
            }
            if (v18 >= 0) {
              unint64_t v19 = (const void *)(v7 + 32);
            }
            else {
              unint64_t v19 = *(const void **)(v7 + 32);
            }
            if (v17 >= 4) {
              size_t v20 = 4;
            }
            else {
              size_t v20 = v17;
            }
            BOOL v21 = v17 > 4;
            int v22 = memcmp(__s2, v19, v20);
            BOOL v23 = v22 < 0;
            if (!v22) {
              BOOL v23 = v21;
            }
            if (!v23 && v7 != v5)
            {
              if (*(void *)(v7 + 64) == 104) {
                operator new();
              }
              peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnl", *(void *)(v7 + 64), 104);
            }
          }
        }
        break;
      default:
        peridot_depth_log("jlnl: unsupported version %d", v4);
        break;
    }
  }
  return 0;
}

void sub_259080324(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void *)(v1 - 112);
  if (v3)
  {
    MEMORY[0x25A2D62D0](v3, 0x1000C4026781B21);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      size_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v8 = (size_t)a2[1];
    }
    if (v7 >= 0) {
      int v9 = a2;
    }
    else {
      int v9 = *a2;
    }
    while (1)
    {
      while (1)
      {
        CFIndex v10 = (uint64_t **)v5;
        int v13 = (const void *)v5[4];
        size_t v11 = v5 + 4;
        BOOL v12 = v13;
        int v14 = *((char *)v11 + 23);
        if (v14 >= 0) {
          size_t v15 = *((unsigned __int8 *)v11 + 23);
        }
        else {
          size_t v15 = v11[1];
        }
        if (v14 >= 0) {
          unint64_t v16 = v11;
        }
        else {
          unint64_t v16 = v12;
        }
        if (v15 >= v8) {
          size_t v17 = v8;
        }
        else {
          size_t v17 = v15;
        }
        int v18 = memcmp(v9, v16, v17);
        BOOL v19 = v8 < v15;
        if (v18) {
          BOOL v19 = v18 < 0;
        }
        if (!v19) {
          break;
        }
        uint64_t v5 = *v10;
        uint64_t v6 = v10;
        if (!*v10) {
          goto LABEL_27;
        }
      }
      int v20 = memcmp(v16, v9, v17);
      BOOL v21 = v15 < v8;
      if (v20) {
        BOOL v21 = v20 < 0;
      }
      if (!v21) {
        return v10;
      }
      uint64_t v5 = v10[1];
      if (!v5)
      {
        uint64_t v6 = v10 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    CFIndex v10 = a1 + 1;
LABEL_27:
    int v22 = operator new(0x48uLL);
    BOOL v23 = (std::string *)(v22 + 4);
    if (*(char *)(a3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v23, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)&v23->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
      v22[6] = *(void *)(a3 + 16);
    }
    v22[7] = 0;
    v22[8] = 0;
    *int v22 = 0;
    v22[1] = 0;
    v22[2] = v10;
    void *v6 = v22;
    uint64_t v24 = (uint64_t *)**a1;
    uint64_t v25 = v22;
    if (v24)
    {
      *a1 = v24;
      uint64_t v25 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v25);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v22;
}

void sub_2590805A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<std::string,peridot::DataBuffer>,std::__map_value_compare<std::string,std::__value_type<std::string,peridot::DataBuffer>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,peridot::DataBuffer>>>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void **std::vector<std::string>::~vector[abi:ne180100](void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t getBlobVersion(uint64_t a1, char *__s, _DWORD *a3, int a4)
{
  size_t v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  size_t v9 = v8;
  if (v8 >= 0x17)
  {
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (void ***)operator new(v11 + 1);
    size_t v36 = v9;
    int64_t v37 = v12 | 0x8000000000000000;
    long long __dst = (void **)p_dst;
  }
  else
  {
    HIBYTE(v37) = v8;
    p_dst = &__dst;
    if (!v8) {
      goto LABEL_9;
    }
  }
  memcpy(p_dst, __s, v9);
LABEL_9:
  *((unsigned char *)p_dst + v9) = 0;
  uint64_t v15 = *(void *)(a1 + 8);
  uint64_t v13 = a1 + 8;
  uint64_t v14 = v15;
  char v16 = HIBYTE(v37);
  if (!v15) {
    goto LABEL_48;
  }
  size_t v17 = v37 >= 0 ? HIBYTE(v37) : v36;
  int v18 = v37 >= 0 ? (void **)&__dst : __dst;
  uint64_t v19 = v13;
  do
  {
    int v20 = *(char *)(v14 + 55);
    if (v20 >= 0) {
      size_t v21 = *(unsigned __int8 *)(v14 + 55);
    }
    else {
      size_t v21 = *(void *)(v14 + 40);
    }
    if (v20 >= 0) {
      int v22 = (const void *)(v14 + 32);
    }
    else {
      int v22 = *(const void **)(v14 + 32);
    }
    if (v17 >= v21) {
      size_t v23 = v21;
    }
    else {
      size_t v23 = v17;
    }
    int v24 = memcmp(v22, v18, v23);
    BOOL v25 = v21 < v17;
    if (v24) {
      BOOL v25 = v24 < 0;
    }
    BOOL v26 = !v25;
    if (v25) {
      unint64_t v27 = (uint64_t *)(v14 + 8);
    }
    else {
      unint64_t v27 = (uint64_t *)v14;
    }
    if (v26) {
      uint64_t v19 = v14;
    }
    uint64_t v14 = *v27;
  }
  while (*v27);
  if (v19 == v13) {
    goto LABEL_48;
  }
  int v28 = *(char *)(v19 + 55);
  size_t v29 = v28 >= 0 ? *(unsigned __int8 *)(v19 + 55) : *(void *)(v19 + 40);
  size_t v30 = v28 >= 0 ? (const void *)(v19 + 32) : *(const void **)(v19 + 32);
  size_t v31 = v29 >= v17 ? v17 : v29;
  int v32 = memcmp(v18, v30, v31);
  BOOL v33 = v17 < v29;
  if (v32) {
    BOOL v33 = v32 < 0;
  }
  if (v33)
  {
LABEL_48:
    uint64_t v19 = v13;
    if (v16 < 0) {
      goto LABEL_49;
    }
  }
  else if (v16 < 0)
  {
LABEL_49:
    operator delete(__dst);
    if (v19 == v13) {
      goto LABEL_50;
    }
    goto LABEL_54;
  }
  if (v19 == v13)
  {
LABEL_50:
    if (a4) {
      peridot_depth_log("%s: blob is missing");
    }
    return 0;
  }
LABEL_54:
  if (*(void *)(v19 + 64) <= 3uLL)
  {
    peridot_depth_log("%s: blob too short (%lu bytes)");
    return 0;
  }
  *a3 = **(_DWORD **)(v19 + 56);
  return 1;
}

uint64_t getBlobAsExact<jlps_v101>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlps");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        uint64_t v15 = (const void *)(v3 + 32);
      }
      else {
        uint64_t v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 12628) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlps", *(void *)(v3 + 64), 12628);
      }
    }
  }
  return 0;
}

__n128 copyPulseShapeData_v101(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (_OWORD *)(a2 + 788);
  if (a1 + 2464 <= a2 || a2 + 512 <= a1)
  {
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    long long v6 = *(_OWORD *)(a1 + 2224);
    *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 2208);
    *(_OWORD *)(a2 + 272) = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 48) = v7;
    long long v8 = *(_OWORD *)(a1 + 2256);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(a1 + 2240);
    *(_OWORD *)(a2 + 304) = v8;
    long long v9 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 80) = v9;
    long long v10 = *(_OWORD *)(a1 + 2288);
    *(_OWORD *)(a2 + 320) = *(_OWORD *)(a1 + 2272);
    *(_OWORD *)(a2 + 336) = v10;
    long long v11 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 112) = v11;
    long long v12 = *(_OWORD *)(a1 + 2320);
    *(_OWORD *)(a2 + 352) = *(_OWORD *)(a1 + 2304);
    *(_OWORD *)(a2 + 368) = v12;
    long long v13 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a2 + 144) = v13;
    long long v14 = *(_OWORD *)(a1 + 2352);
    *(_OWORD *)(a2 + 384) = *(_OWORD *)(a1 + 2336);
    *(_OWORD *)(a2 + 400) = v14;
    long long v15 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 176) = v15;
    long long v16 = *(_OWORD *)(a1 + 2384);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)(a1 + 2368);
    *(_OWORD *)(a2 + 432) = v16;
    long long v17 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a2 + 208) = v17;
    long long v18 = *(_OWORD *)(a1 + 2416);
    *(_OWORD *)(a2 + 448) = *(_OWORD *)(a1 + 2400);
    *(_OWORD *)(a2 + 464) = v18;
    long long v19 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a2 + 240) = v19;
    __n128 result = *(__n128 *)(a1 + 2432);
    long long v21 = *(_OWORD *)(a1 + 2448);
    *(__n128 *)(a2 + 480) = result;
    *(_OWORD *)(a2 + 496) = v21;
  }
  else
  {
    for (uint64_t i = 0; i != 256; i += 4)
    {
      unint64_t v4 = (_DWORD *)(a2 + i);
      *unint64_t v4 = *(_DWORD *)(a1 + i);
      v4[64] = *(_DWORD *)(a1 + i + 2208);
    }
  }
  char v22 = (_OWORD *)(a2 + 1576);
  *(_DWORD *)(a2 + 768) = *(_DWORD *)(a1 + 2048);
  *(_DWORD *)(a2 + 772) = *(_DWORD *)(a1 + 2052);
  *(_DWORD *)(a2 + 776) = *(_DWORD *)(a1 + 2056);
  *(_DWORD *)(a2 + 780) = *(_DWORD *)(a1 + 2060);
  *(_DWORD *)(a2 + 784) = *(_DWORD *)(a1 + 2064);
  if ((unint64_t)v2 >= a1 + 2720 || a1 + 256 >= a2 + 1300)
  {
    long long v25 = *(_OWORD *)(a1 + 272);
    _OWORD *v2 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a2 + 804) = v25;
    long long v26 = *(_OWORD *)(a1 + 2480);
    *(_OWORD *)(a2 + 1044) = *(_OWORD *)(a1 + 2464);
    *(_OWORD *)(a2 + 1060) = v26;
    long long v27 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a2 + 820) = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a2 + 836) = v27;
    long long v28 = *(_OWORD *)(a1 + 2512);
    *(_OWORD *)(a2 + 1076) = *(_OWORD *)(a1 + 2496);
    *(_OWORD *)(a2 + 1092) = v28;
    long long v29 = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a2 + 852) = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a2 + 868) = v29;
    long long v30 = *(_OWORD *)(a1 + 2544);
    *(_OWORD *)(a2 + 1108) = *(_OWORD *)(a1 + 2528);
    *(_OWORD *)(a2 + 1124) = v30;
    long long v31 = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a2 + 884) = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a2 + 900) = v31;
    long long v32 = *(_OWORD *)(a1 + 2576);
    *(_OWORD *)(a2 + 1140) = *(_OWORD *)(a1 + 2560);
    *(_OWORD *)(a2 + 1156) = v32;
    long long v33 = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a2 + 916) = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a2 + 932) = v33;
    long long v34 = *(_OWORD *)(a1 + 2608);
    *(_OWORD *)(a2 + 1172) = *(_OWORD *)(a1 + 2592);
    *(_OWORD *)(a2 + 1188) = v34;
    long long v35 = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a2 + 948) = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a2 + 964) = v35;
    long long v36 = *(_OWORD *)(a1 + 2640);
    *(_OWORD *)(a2 + 1204) = *(_OWORD *)(a1 + 2624);
    *(_OWORD *)(a2 + 1220) = v36;
    long long v37 = *(_OWORD *)(a1 + 464);
    *(_OWORD *)(a2 + 980) = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a2 + 996) = v37;
    long long v38 = *(_OWORD *)(a1 + 2672);
    *(_OWORD *)(a2 + 1236) = *(_OWORD *)(a1 + 2656);
    *(_OWORD *)(a2 + 1252) = v38;
    long long v39 = *(_OWORD *)(a1 + 496);
    *(_OWORD *)(a2 + 1012) = *(_OWORD *)(a1 + 480);
    *(_OWORD *)(a2 + 1028) = v39;
    __n128 result = *(__n128 *)(a1 + 2688);
    long long v40 = *(_OWORD *)(a1 + 2704);
    *(__n128 *)(a2 + 1268) = result;
    *(_OWORD *)(a2 + 1284) = v40;
  }
  else
  {
    for (uint64_t j = 0; j != 256; j += 4)
    {
      int v24 = (_DWORD *)((char *)v2 + j);
      _DWORD *v24 = *(_DWORD *)(a1 + j + 256);
      v24[64] = *(_DWORD *)(a1 + j + 2464);
    }
  }
  int v41 = (_OWORD *)(a2 + 2364);
  *(_DWORD *)(a2 + 1556) = *(_DWORD *)(a1 + 2068);
  *(_DWORD *)(a2 + 1560) = *(_DWORD *)(a1 + 2072);
  *(_DWORD *)(a2 + 1564) = *(_DWORD *)(a1 + 2076);
  *(_DWORD *)(a2 + 1568) = *(_DWORD *)(a1 + 2080);
  *(_DWORD *)(a2 + 1572) = *(_DWORD *)(a1 + 2084);
  if ((unint64_t)v22 >= a1 + 2976 || a1 + 512 >= a2 + 2088)
  {
    long long v44 = *(_OWORD *)(a1 + 528);
    *char v22 = *(_OWORD *)(a1 + 512);
    *(_OWORD *)(a2 + 1592) = v44;
    long long v45 = *(_OWORD *)(a1 + 2736);
    *(_OWORD *)(a2 + 1832) = *(_OWORD *)(a1 + 2720);
    *(_OWORD *)(a2 + 1848) = v45;
    long long v46 = *(_OWORD *)(a1 + 560);
    *(_OWORD *)(a2 + 1608) = *(_OWORD *)(a1 + 544);
    *(_OWORD *)(a2 + 1624) = v46;
    long long v47 = *(_OWORD *)(a1 + 2768);
    *(_OWORD *)(a2 + 1864) = *(_OWORD *)(a1 + 2752);
    *(_OWORD *)(a2 + 1880) = v47;
    long long v48 = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(a2 + 1640) = *(_OWORD *)(a1 + 576);
    *(_OWORD *)(a2 + 1656) = v48;
    long long v49 = *(_OWORD *)(a1 + 2800);
    *(_OWORD *)(a2 + 1896) = *(_OWORD *)(a1 + 2784);
    *(_OWORD *)(a2 + 1912) = v49;
    long long v50 = *(_OWORD *)(a1 + 624);
    *(_OWORD *)(a2 + 1672) = *(_OWORD *)(a1 + 608);
    *(_OWORD *)(a2 + 1688) = v50;
    long long v51 = *(_OWORD *)(a1 + 2832);
    *(_OWORD *)(a2 + 1928) = *(_OWORD *)(a1 + 2816);
    *(_OWORD *)(a2 + 1944) = v51;
    long long v52 = *(_OWORD *)(a1 + 656);
    *(_OWORD *)(a2 + 1704) = *(_OWORD *)(a1 + 640);
    *(_OWORD *)(a2 + 1720) = v52;
    long long v53 = *(_OWORD *)(a1 + 2864);
    *(_OWORD *)(a2 + 1960) = *(_OWORD *)(a1 + 2848);
    *(_OWORD *)(a2 + 1976) = v53;
    long long v54 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a2 + 1736) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a2 + 1752) = v54;
    long long v55 = *(_OWORD *)(a1 + 2896);
    *(_OWORD *)(a2 + 1992) = *(_OWORD *)(a1 + 2880);
    *(_OWORD *)(a2 + 2008) = v55;
    long long v56 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a2 + 1768) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a2 + 1784) = v56;
    long long v57 = *(_OWORD *)(a1 + 2928);
    *(_OWORD *)(a2 + 2024) = *(_OWORD *)(a1 + 2912);
    *(_OWORD *)(a2 + 2040) = v57;
    long long v58 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a2 + 1800) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a2 + 1816) = v58;
    __n128 result = *(__n128 *)(a1 + 2944);
    long long v59 = *(_OWORD *)(a1 + 2960);
    *(__n128 *)(a2 + 2056) = result;
    *(_OWORD *)(a2 + 2072) = v59;
  }
  else
  {
    for (uint64_t k = 0; k != 256; k += 4)
    {
      uint64_t v43 = (_DWORD *)((char *)v22 + k);
      _DWORD *v43 = *(_DWORD *)(a1 + k + 512);
      v43[64] = *(_DWORD *)(a1 + k + 2720);
    }
  }
  *(_DWORD *)(a2 + 2344) = *(_DWORD *)(a1 + 2088);
  *(_DWORD *)(a2 + 2348) = *(_DWORD *)(a1 + 2092);
  *(_DWORD *)(a2 + 2352) = *(_DWORD *)(a1 + 2096);
  *(_DWORD *)(a2 + 2356) = *(_DWORD *)(a1 + 2100);
  *(_DWORD *)(a2 + 2360) = *(_DWORD *)(a1 + 2104);
  if ((unint64_t)v41 >= a1 + 3232 || a1 + 768 >= a2 + 2876)
  {
    long long v62 = *(_OWORD *)(a1 + 784);
    _OWORD *v41 = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a2 + 2380) = v62;
    long long v63 = *(_OWORD *)(a1 + 2992);
    *(_OWORD *)(a2 + 2620) = *(_OWORD *)(a1 + 2976);
    *(_OWORD *)(a2 + 2636) = v63;
    long long v64 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a2 + 2396) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a2 + 2412) = v64;
    long long v65 = *(_OWORD *)(a1 + 3024);
    *(_OWORD *)(a2 + 2652) = *(_OWORD *)(a1 + 3008);
    *(_OWORD *)(a2 + 2668) = v65;
    long long v66 = *(_OWORD *)(a1 + 848);
    *(_OWORD *)(a2 + 2428) = *(_OWORD *)(a1 + 832);
    *(_OWORD *)(a2 + 2444) = v66;
    long long v67 = *(_OWORD *)(a1 + 3056);
    *(_OWORD *)(a2 + 2684) = *(_OWORD *)(a1 + 3040);
    *(_OWORD *)(a2 + 2700) = v67;
    long long v68 = *(_OWORD *)(a1 + 880);
    *(_OWORD *)(a2 + 2460) = *(_OWORD *)(a1 + 864);
    *(_OWORD *)(a2 + 2476) = v68;
    long long v69 = *(_OWORD *)(a1 + 3088);
    *(_OWORD *)(a2 + 2716) = *(_OWORD *)(a1 + 3072);
    *(_OWORD *)(a2 + 2732) = v69;
    long long v70 = *(_OWORD *)(a1 + 912);
    *(_OWORD *)(a2 + 2492) = *(_OWORD *)(a1 + 896);
    *(_OWORD *)(a2 + 2508) = v70;
    long long v71 = *(_OWORD *)(a1 + 3120);
    *(_OWORD *)(a2 + 2748) = *(_OWORD *)(a1 + 3104);
    *(_OWORD *)(a2 + 2764) = v71;
    long long v72 = *(_OWORD *)(a1 + 944);
    *(_OWORD *)(a2 + 2524) = *(_OWORD *)(a1 + 928);
    *(_OWORD *)(a2 + 2540) = v72;
    long long v73 = *(_OWORD *)(a1 + 3152);
    *(_OWORD *)(a2 + 2780) = *(_OWORD *)(a1 + 3136);
    *(_OWORD *)(a2 + 2796) = v73;
    long long v74 = *(_OWORD *)(a1 + 976);
    *(_OWORD *)(a2 + 2556) = *(_OWORD *)(a1 + 960);
    *(_OWORD *)(a2 + 2572) = v74;
    long long v75 = *(_OWORD *)(a1 + 3184);
    *(_OWORD *)(a2 + 2812) = *(_OWORD *)(a1 + 3168);
    *(_OWORD *)(a2 + 2828) = v75;
    long long v76 = *(_OWORD *)(a1 + 1008);
    *(_OWORD *)(a2 + 2588) = *(_OWORD *)(a1 + 992);
    *(_OWORD *)(a2 + 2604) = v76;
    __n128 result = *(__n128 *)(a1 + 3200);
    long long v77 = *(_OWORD *)(a1 + 3216);
    *(__n128 *)(a2 + 2844) = result;
    *(_OWORD *)(a2 + 2860) = v77;
  }
  else
  {
    for (uint64_t m = 0; m != 256; m += 4)
    {
      BOOL v61 = (_DWORD *)((char *)v41 + m);
      *BOOL v61 = *(_DWORD *)(a1 + m + 768);
      v61[64] = *(_DWORD *)(a1 + m + 2976);
    }
  }
  long long v78 = (_OWORD *)(a2 + 3940);
  *(_DWORD *)(a2 + 3132) = *(_DWORD *)(a1 + 2108);
  *(_DWORD *)(a2 + 3136) = *(_DWORD *)(a1 + 2112);
  *(_DWORD *)(a2 + 3140) = *(_DWORD *)(a1 + 2116);
  *(_DWORD *)(a2 + 3144) = *(_DWORD *)(a1 + 2120);
  *(_DWORD *)(a2 + 3148) = *(_DWORD *)(a1 + 2124);
  if (a2 + 3152 >= a1 + 3488 || a1 + 1024 >= a2 + 3664)
  {
    long long v81 = *(_OWORD *)(a1 + 1040);
    *(_OWORD *)(a2 + 3152) = *(_OWORD *)(a1 + 1024);
    *(_OWORD *)(a2 + 3168) = v81;
    long long v82 = *(_OWORD *)(a1 + 3248);
    *(_OWORD *)(a2 + 3408) = *(_OWORD *)(a1 + 3232);
    *(_OWORD *)(a2 + 3424) = v82;
    long long v83 = *(_OWORD *)(a1 + 1072);
    *(_OWORD *)(a2 + 3184) = *(_OWORD *)(a1 + 1056);
    *(_OWORD *)(a2 + 3200) = v83;
    long long v84 = *(_OWORD *)(a1 + 3280);
    *(_OWORD *)(a2 + 3440) = *(_OWORD *)(a1 + 3264);
    *(_OWORD *)(a2 + 3456) = v84;
    long long v85 = *(_OWORD *)(a1 + 1104);
    *(_OWORD *)(a2 + 3216) = *(_OWORD *)(a1 + 1088);
    *(_OWORD *)(a2 + 3232) = v85;
    long long v86 = *(_OWORD *)(a1 + 3312);
    *(_OWORD *)(a2 + 3472) = *(_OWORD *)(a1 + 3296);
    *(_OWORD *)(a2 + 3488) = v86;
    long long v87 = *(_OWORD *)(a1 + 1136);
    *(_OWORD *)(a2 + 3248) = *(_OWORD *)(a1 + 1120);
    *(_OWORD *)(a2 + 3264) = v87;
    long long v88 = *(_OWORD *)(a1 + 3344);
    *(_OWORD *)(a2 + 3504) = *(_OWORD *)(a1 + 3328);
    *(_OWORD *)(a2 + 3520) = v88;
    long long v89 = *(_OWORD *)(a1 + 1168);
    *(_OWORD *)(a2 + 3280) = *(_OWORD *)(a1 + 1152);
    *(_OWORD *)(a2 + 3296) = v89;
    long long v90 = *(_OWORD *)(a1 + 3376);
    *(_OWORD *)(a2 + 3536) = *(_OWORD *)(a1 + 3360);
    *(_OWORD *)(a2 + 3552) = v90;
    long long v91 = *(_OWORD *)(a1 + 1200);
    *(_OWORD *)(a2 + 3312) = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a2 + 3328) = v91;
    long long v92 = *(_OWORD *)(a1 + 3408);
    *(_OWORD *)(a2 + 3568) = *(_OWORD *)(a1 + 3392);
    *(_OWORD *)(a2 + 3584) = v92;
    long long v93 = *(_OWORD *)(a1 + 1232);
    *(_OWORD *)(a2 + 3344) = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a2 + 3360) = v93;
    long long v94 = *(_OWORD *)(a1 + 3440);
    *(_OWORD *)(a2 + 3600) = *(_OWORD *)(a1 + 3424);
    *(_OWORD *)(a2 + 3616) = v94;
    long long v95 = *(_OWORD *)(a1 + 1264);
    *(_OWORD *)(a2 + 3376) = *(_OWORD *)(a1 + 1248);
    *(_OWORD *)(a2 + 3392) = v95;
    __n128 result = *(__n128 *)(a1 + 3456);
    long long v96 = *(_OWORD *)(a1 + 3472);
    *(__n128 *)(a2 + 3632) = result;
    *(_OWORD *)(a2 + 3648) = v96;
  }
  else
  {
    for (uint64_t n = 0; n != 256; n += 4)
    {
      CMTimeEpoch v80 = (_DWORD *)(a2 + 3152 + n);
      *CMTimeEpoch v80 = *(_DWORD *)(a1 + n + 1024);
      v80[64] = *(_DWORD *)(a1 + n + 3232);
    }
  }
  uint64_t v97 = (_OWORD *)(a2 + 4728);
  *(_DWORD *)(a2 + 3920) = *(_DWORD *)(a1 + 2128);
  *(_DWORD *)(a2 + 3924) = *(_DWORD *)(a1 + 2132);
  *(_DWORD *)(a2 + 3928) = *(_DWORD *)(a1 + 2136);
  *(_DWORD *)(a2 + 3932) = *(_DWORD *)(a1 + 2140);
  *(_DWORD *)(a2 + 3936) = *(_DWORD *)(a1 + 2144);
  if ((unint64_t)v78 >= a1 + 3744 || a1 + 1280 >= a2 + 4452)
  {
    long long v100 = *(_OWORD *)(a1 + 1296);
    *long long v78 = *(_OWORD *)(a1 + 1280);
    *(_OWORD *)(a2 + 3956) = v100;
    long long v101 = *(_OWORD *)(a1 + 3504);
    *(_OWORD *)(a2 + 4196) = *(_OWORD *)(a1 + 3488);
    *(_OWORD *)(a2 + 4212) = v101;
    long long v102 = *(_OWORD *)(a1 + 1328);
    *(_OWORD *)(a2 + 3972) = *(_OWORD *)(a1 + 1312);
    *(_OWORD *)(a2 + 3988) = v102;
    long long v103 = *(_OWORD *)(a1 + 3536);
    *(_OWORD *)(a2 + 4228) = *(_OWORD *)(a1 + 3520);
    *(_OWORD *)(a2 + 4244) = v103;
    long long v104 = *(_OWORD *)(a1 + 1360);
    *(_OWORD *)(a2 + 4004) = *(_OWORD *)(a1 + 1344);
    *(_OWORD *)(a2 + 4020) = v104;
    long long v105 = *(_OWORD *)(a1 + 3568);
    *(_OWORD *)(a2 + 4260) = *(_OWORD *)(a1 + 3552);
    *(_OWORD *)(a2 + 4276) = v105;
    long long v106 = *(_OWORD *)(a1 + 1392);
    *(_OWORD *)(a2 + 4036) = *(_OWORD *)(a1 + 1376);
    *(_OWORD *)(a2 + 4052) = v106;
    long long v107 = *(_OWORD *)(a1 + 3600);
    *(_OWORD *)(a2 + 4292) = *(_OWORD *)(a1 + 3584);
    *(_OWORD *)(a2 + 4308) = v107;
    long long v108 = *(_OWORD *)(a1 + 1424);
    *(_OWORD *)(a2 + 4068) = *(_OWORD *)(a1 + 1408);
    *(_OWORD *)(a2 + 4084) = v108;
    long long v109 = *(_OWORD *)(a1 + 3632);
    *(_OWORD *)(a2 + 4324) = *(_OWORD *)(a1 + 3616);
    *(_OWORD *)(a2 + 4340) = v109;
    long long v110 = *(_OWORD *)(a1 + 1456);
    *(_OWORD *)(a2 + 4100) = *(_OWORD *)(a1 + 1440);
    *(_OWORD *)(a2 + 4116) = v110;
    long long v111 = *(_OWORD *)(a1 + 3664);
    *(_OWORD *)(a2 + 4356) = *(_OWORD *)(a1 + 3648);
    *(_OWORD *)(a2 + 4372) = v111;
    long long v112 = *(_OWORD *)(a1 + 1488);
    *(_OWORD *)(a2 + 4132) = *(_OWORD *)(a1 + 1472);
    *(_OWORD *)(a2 + 4148) = v112;
    long long v113 = *(_OWORD *)(a1 + 3696);
    *(_OWORD *)(a2 + 4388) = *(_OWORD *)(a1 + 3680);
    *(_OWORD *)(a2 + 4404) = v113;
    long long v114 = *(_OWORD *)(a1 + 1520);
    *(_OWORD *)(a2 + 4164) = *(_OWORD *)(a1 + 1504);
    *(_OWORD *)(a2 + 4180) = v114;
    __n128 result = *(__n128 *)(a1 + 3712);
    long long v115 = *(_OWORD *)(a1 + 3728);
    *(__n128 *)(a2 + 4420) = result;
    *(_OWORD *)(a2 + 4436) = v115;
  }
  else
  {
    for (iuint64_t i = 0; ii != 256; ii += 4)
    {
      CMTime v99 = (_DWORD *)((char *)v78 + ii);
      _DWORD *v99 = *(_DWORD *)(a1 + ii + 1280);
      v99[64] = *(_DWORD *)(a1 + ii + 3488);
    }
  }
  char v116 = (_OWORD *)(a2 + 5516);
  *(_DWORD *)(a2 + 4708) = *(_DWORD *)(a1 + 2148);
  *(_DWORD *)(a2 + 4712) = *(_DWORD *)(a1 + 2152);
  *(_DWORD *)(a2 + 4716) = *(_DWORD *)(a1 + 2156);
  *(_DWORD *)(a2 + 4720) = *(_DWORD *)(a1 + 2160);
  *(_DWORD *)(a2 + 4724) = *(_DWORD *)(a1 + 2164);
  if ((unint64_t)v97 >= a1 + 4000 || a1 + 1536 >= a2 + 5240)
  {
    long long v119 = *(_OWORD *)(a1 + 1552);
    *uint64_t v97 = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)(a2 + 4744) = v119;
    long long v120 = *(_OWORD *)(a1 + 3760);
    *(_OWORD *)(a2 + 4984) = *(_OWORD *)(a1 + 3744);
    *(_OWORD *)(a2 + 5000) = v120;
    long long v121 = *(_OWORD *)(a1 + 1584);
    *(_OWORD *)(a2 + 4760) = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)(a2 + 4776) = v121;
    long long v122 = *(_OWORD *)(a1 + 3792);
    *(_OWORD *)(a2 + 5016) = *(_OWORD *)(a1 + 3776);
    *(_OWORD *)(a2 + 5032) = v122;
    long long v123 = *(_OWORD *)(a1 + 1616);
    *(_OWORD *)(a2 + 4792) = *(_OWORD *)(a1 + 1600);
    *(_OWORD *)(a2 + 4808) = v123;
    long long v124 = *(_OWORD *)(a1 + 3824);
    *(_OWORD *)(a2 + 5048) = *(_OWORD *)(a1 + 3808);
    *(_OWORD *)(a2 + 5064) = v124;
    long long v125 = *(_OWORD *)(a1 + 1648);
    *(_OWORD *)(a2 + 4824) = *(_OWORD *)(a1 + 1632);
    *(_OWORD *)(a2 + 4840) = v125;
    long long v126 = *(_OWORD *)(a1 + 3856);
    *(_OWORD *)(a2 + 5080) = *(_OWORD *)(a1 + 3840);
    *(_OWORD *)(a2 + 5096) = v126;
    long long v127 = *(_OWORD *)(a1 + 1680);
    *(_OWORD *)(a2 + 4856) = *(_OWORD *)(a1 + 1664);
    *(_OWORD *)(a2 + 4872) = v127;
    long long v128 = *(_OWORD *)(a1 + 3888);
    *(_OWORD *)(a2 + 5112) = *(_OWORD *)(a1 + 3872);
    *(_OWORD *)(a2 + 5128) = v128;
    long long v129 = *(_OWORD *)(a1 + 1712);
    *(_OWORD *)(a2 + 4888) = *(_OWORD *)(a1 + 1696);
    *(_OWORD *)(a2 + 4904) = v129;
    long long v130 = *(_OWORD *)(a1 + 3920);
    *(_OWORD *)(a2 + 5144) = *(_OWORD *)(a1 + 3904);
    *(_OWORD *)(a2 + 5160) = v130;
    long long v131 = *(_OWORD *)(a1 + 1744);
    *(_OWORD *)(a2 + 4920) = *(_OWORD *)(a1 + 1728);
    *(_OWORD *)(a2 + 4936) = v131;
    long long v132 = *(_OWORD *)(a1 + 3952);
    *(_OWORD *)(a2 + 5176) = *(_OWORD *)(a1 + 3936);
    *(_OWORD *)(a2 + 5192) = v132;
    long long v133 = *(_OWORD *)(a1 + 1776);
    *(_OWORD *)(a2 + 4952) = *(_OWORD *)(a1 + 1760);
    *(_OWORD *)(a2 + 4968) = v133;
    __n128 result = *(__n128 *)(a1 + 3968);
    long long v134 = *(_OWORD *)(a1 + 3984);
    *(__n128 *)(a2 + 5208) = result;
    *(_OWORD *)(a2 + 5224) = v134;
  }
  else
  {
    for (juint64_t j = 0; jj != 256; jj += 4)
    {
      uint64_t v118 = (_DWORD *)((char *)v97 + jj);
      *uint64_t v118 = *(_DWORD *)(a1 + jj + 1536);
      v118[64] = *(_DWORD *)(a1 + jj + 3744);
    }
  }
  *(_DWORD *)(a2 + 5496) = *(_DWORD *)(a1 + 2168);
  *(_DWORD *)(a2 + 5500) = *(_DWORD *)(a1 + 2172);
  *(_DWORD *)(a2 + 5504) = *(_DWORD *)(a1 + 2176);
  *(_DWORD *)(a2 + 5508) = *(_DWORD *)(a1 + 2180);
  *(_DWORD *)(a2 + 5512) = *(_DWORD *)(a1 + 2184);
  if ((unint64_t)v116 >= a1 + 4256 || a1 + 1792 >= a2 + 6028)
  {
    long long v137 = *(_OWORD *)(a1 + 1808);
    *char v116 = *(_OWORD *)(a1 + 1792);
    *(_OWORD *)(a2 + 5532) = v137;
    long long v138 = *(_OWORD *)(a1 + 4016);
    *(_OWORD *)(a2 + 5772) = *(_OWORD *)(a1 + 4000);
    *(_OWORD *)(a2 + 5788) = v138;
    long long v139 = *(_OWORD *)(a1 + 1840);
    *(_OWORD *)(a2 + 5548) = *(_OWORD *)(a1 + 1824);
    *(_OWORD *)(a2 + 5564) = v139;
    long long v140 = *(_OWORD *)(a1 + 4048);
    *(_OWORD *)(a2 + 5804) = *(_OWORD *)(a1 + 4032);
    *(_OWORD *)(a2 + 5820) = v140;
    long long v141 = *(_OWORD *)(a1 + 1872);
    *(_OWORD *)(a2 + 5580) = *(_OWORD *)(a1 + 1856);
    *(_OWORD *)(a2 + 5596) = v141;
    long long v142 = *(_OWORD *)(a1 + 4080);
    *(_OWORD *)(a2 + 5836) = *(_OWORD *)(a1 + 4064);
    *(_OWORD *)(a2 + 5852) = v142;
    long long v143 = *(_OWORD *)(a1 + 1904);
    *(_OWORD *)(a2 + 5612) = *(_OWORD *)(a1 + 1888);
    *(_OWORD *)(a2 + 5628) = v143;
    long long v144 = *(_OWORD *)(a1 + 4112);
    *(_OWORD *)(a2 + 5868) = *(_OWORD *)(a1 + 4096);
    *(_OWORD *)(a2 + 5884) = v144;
    long long v145 = *(_OWORD *)(a1 + 1936);
    *(_OWORD *)(a2 + 5644) = *(_OWORD *)(a1 + 1920);
    *(_OWORD *)(a2 + 5660) = v145;
    long long v146 = *(_OWORD *)(a1 + 4144);
    *(_OWORD *)(a2 + 5900) = *(_OWORD *)(a1 + 4128);
    *(_OWORD *)(a2 + 5916) = v146;
    long long v147 = *(_OWORD *)(a1 + 1968);
    *(_OWORD *)(a2 + 5676) = *(_OWORD *)(a1 + 1952);
    *(_OWORD *)(a2 + 5692) = v147;
    long long v148 = *(_OWORD *)(a1 + 4176);
    *(_OWORD *)(a2 + 5932) = *(_OWORD *)(a1 + 4160);
    *(_OWORD *)(a2 + 5948) = v148;
    long long v149 = *(_OWORD *)(a1 + 2000);
    *(_OWORD *)(a2 + 5708) = *(_OWORD *)(a1 + 1984);
    *(_OWORD *)(a2 + 5724) = v149;
    long long v150 = *(_OWORD *)(a1 + 4208);
    *(_OWORD *)(a2 + 5964) = *(_OWORD *)(a1 + 4192);
    *(_OWORD *)(a2 + 5980) = v150;
    long long v151 = *(_OWORD *)(a1 + 2032);
    *(_OWORD *)(a2 + 5740) = *(_OWORD *)(a1 + 2016);
    *(_OWORD *)(a2 + 5756) = v151;
    __n128 result = *(__n128 *)(a1 + 4224);
    long long v152 = *(_OWORD *)(a1 + 4240);
    *(__n128 *)(a2 + 5996) = result;
    *(_OWORD *)(a2 + 6012) = v152;
  }
  else
  {
    for (kuint64_t k = 0; kk != 256; kk += 4)
    {
      double v136 = (_DWORD *)((char *)v116 + kk);
      _DWORD *v136 = *(_DWORD *)(a1 + kk + 1792);
      v136[64] = *(_DWORD *)(a1 + kk + 4000);
    }
  }
  *(_DWORD *)(a2 + 6284) = *(_DWORD *)(a1 + 2188);
  *(_DWORD *)(a2 + 6288) = *(_DWORD *)(a1 + 2192);
  *(_DWORD *)(a2 + 6292) = *(_DWORD *)(a1 + 2196);
  *(_DWORD *)(a2 + 6296) = *(_DWORD *)(a1 + 2200);
  *(_DWORD *)(a2 + 6300) = *(_DWORD *)(a1 + 2204);
  unint64_t v153 = a2 - a1;
  if (((a2 - a1) & 0xFFFFFFFFFFFFFFE0) == 0xEA0)
  {
    for (muint64_t m = 0; mm != 256; mm += 4)
      *(_DWORD *)(a2 + 512 + mm) = *(_DWORD *)(a1 + 4256 + mm);
  }
  else
  {
    long long v155 = *(_OWORD *)(a1 + 4272);
    *(_OWORD *)(a2 + 512) = *(_OWORD *)(a1 + 4256);
    *(_OWORD *)(a2 + 528) = v155;
    long long v156 = *(_OWORD *)(a1 + 4304);
    *(_OWORD *)(a2 + 544) = *(_OWORD *)(a1 + 4288);
    *(_OWORD *)(a2 + 560) = v156;
    long long v157 = *(_OWORD *)(a1 + 4336);
    *(_OWORD *)(a2 + 576) = *(_OWORD *)(a1 + 4320);
    *(_OWORD *)(a2 + 592) = v157;
    long long v158 = *(_OWORD *)(a1 + 4368);
    *(_OWORD *)(a2 + 608) = *(_OWORD *)(a1 + 4352);
    *(_OWORD *)(a2 + 624) = v158;
    long long v159 = *(_OWORD *)(a1 + 4400);
    *(_OWORD *)(a2 + 640) = *(_OWORD *)(a1 + 4384);
    *(_OWORD *)(a2 + 656) = v159;
    long long v160 = *(_OWORD *)(a1 + 4432);
    *(_OWORD *)(a2 + 672) = *(_OWORD *)(a1 + 4416);
    *(_OWORD *)(a2 + 688) = v160;
    long long v161 = *(_OWORD *)(a1 + 4464);
    *(_OWORD *)(a2 + 704) = *(_OWORD *)(a1 + 4448);
    *(_OWORD *)(a2 + 720) = v161;
    __n128 result = *(__n128 *)(a1 + 4480);
    long long v162 = *(_OWORD *)(a1 + 4496);
    *(__n128 *)(a2 + 736) = result;
    *(_OWORD *)(a2 + 752) = v162;
  }
  if (v153 - 3212 > 0x1F)
  {
    long long v164 = *(_OWORD *)(a1 + 4528);
    *(_OWORD *)(a2 + 1300) = *(_OWORD *)(a1 + 4512);
    *(_OWORD *)(a2 + 1316) = v164;
    long long v165 = *(_OWORD *)(a1 + 4560);
    *(_OWORD *)(a2 + 1332) = *(_OWORD *)(a1 + 4544);
    *(_OWORD *)(a2 + 1348) = v165;
    long long v166 = *(_OWORD *)(a1 + 4592);
    *(_OWORD *)(a2 + 1364) = *(_OWORD *)(a1 + 4576);
    *(_OWORD *)(a2 + 1380) = v166;
    long long v167 = *(_OWORD *)(a1 + 4624);
    *(_OWORD *)(a2 + 1396) = *(_OWORD *)(a1 + 4608);
    *(_OWORD *)(a2 + 1412) = v167;
    long long v168 = *(_OWORD *)(a1 + 4656);
    *(_OWORD *)(a2 + 1428) = *(_OWORD *)(a1 + 4640);
    *(_OWORD *)(a2 + 1444) = v168;
    long long v169 = *(_OWORD *)(a1 + 4688);
    *(_OWORD *)(a2 + 1460) = *(_OWORD *)(a1 + 4672);
    *(_OWORD *)(a2 + 1476) = v169;
    long long v170 = *(_OWORD *)(a1 + 4720);
    *(_OWORD *)(a2 + 1492) = *(_OWORD *)(a1 + 4704);
    *(_OWORD *)(a2 + 1508) = v170;
    __n128 result = *(__n128 *)(a1 + 4736);
    long long v171 = *(_OWORD *)(a1 + 4752);
    *(__n128 *)(a2 + 1524) = result;
    *(_OWORD *)(a2 + 1540) = v171;
  }
  else
  {
    for (nuint64_t n = 0; nn != 256; nn += 4)
      *(_DWORD *)(a2 + 1300 + nn) = *(_DWORD *)(a1 + 4512 + nn);
  }
  if (v153 - 2680 > 0x1F)
  {
    long long v173 = *(_OWORD *)(a1 + 4784);
    *(_OWORD *)(a2 + 2088) = *(_OWORD *)(a1 + 4768);
    *(_OWORD *)(a2 + 2104) = v173;
    long long v174 = *(_OWORD *)(a1 + 4816);
    *(_OWORD *)(a2 + 2120) = *(_OWORD *)(a1 + 4800);
    *(_OWORD *)(a2 + 2136) = v174;
    long long v175 = *(_OWORD *)(a1 + 4848);
    *(_OWORD *)(a2 + 2152) = *(_OWORD *)(a1 + 4832);
    *(_OWORD *)(a2 + 2168) = v175;
    long long v176 = *(_OWORD *)(a1 + 4880);
    *(_OWORD *)(a2 + 2184) = *(_OWORD *)(a1 + 4864);
    *(_OWORD *)(a2 + 2200) = v176;
    long long v177 = *(_OWORD *)(a1 + 4912);
    *(_OWORD *)(a2 + 2216) = *(_OWORD *)(a1 + 4896);
    *(_OWORD *)(a2 + 2232) = v177;
    long long v178 = *(_OWORD *)(a1 + 4944);
    *(_OWORD *)(a2 + 2248) = *(_OWORD *)(a1 + 4928);
    *(_OWORD *)(a2 + 2264) = v178;
    long long v179 = *(_OWORD *)(a1 + 4976);
    *(_OWORD *)(a2 + 2280) = *(_OWORD *)(a1 + 4960);
    *(_OWORD *)(a2 + 2296) = v179;
    __n128 result = *(__n128 *)(a1 + 4992);
    long long v180 = *(_OWORD *)(a1 + 5008);
    *(__n128 *)(a2 + 2312) = result;
    *(_OWORD *)(a2 + 2328) = v180;
  }
  else
  {
    for (uint64_t i1 = 0; i1 != 256; i1 += 4)
      *(_DWORD *)(a2 + 2088 + i1) = *(_DWORD *)(a1 + 4768 + i1);
  }
  if (v153 - 2148 > 0x1F)
  {
    long long v182 = *(_OWORD *)(a1 + 5040);
    *(_OWORD *)(a2 + 2876) = *(_OWORD *)(a1 + 5024);
    *(_OWORD *)(a2 + 2892) = v182;
    long long v183 = *(_OWORD *)(a1 + 5072);
    *(_OWORD *)(a2 + 2908) = *(_OWORD *)(a1 + 5056);
    *(_OWORD *)(a2 + 2924) = v183;
    long long v184 = *(_OWORD *)(a1 + 5104);
    *(_OWORD *)(a2 + 2940) = *(_OWORD *)(a1 + 5088);
    *(_OWORD *)(a2 + 2956) = v184;
    long long v185 = *(_OWORD *)(a1 + 5136);
    *(_OWORD *)(a2 + 2972) = *(_OWORD *)(a1 + 5120);
    *(_OWORD *)(a2 + 2988) = v185;
    long long v186 = *(_OWORD *)(a1 + 5168);
    *(_OWORD *)(a2 + 3004) = *(_OWORD *)(a1 + 5152);
    *(_OWORD *)(a2 + 3020) = v186;
    long long v187 = *(_OWORD *)(a1 + 5200);
    *(_OWORD *)(a2 + 3036) = *(_OWORD *)(a1 + 5184);
    *(_OWORD *)(a2 + 3052) = v187;
    long long v188 = *(_OWORD *)(a1 + 5232);
    *(_OWORD *)(a2 + 3068) = *(_OWORD *)(a1 + 5216);
    *(_OWORD *)(a2 + 3084) = v188;
    __n128 result = *(__n128 *)(a1 + 5248);
    long long v189 = *(_OWORD *)(a1 + 5264);
    *(__n128 *)(a2 + 3100) = result;
    *(_OWORD *)(a2 + 3116) = v189;
  }
  else
  {
    for (uint64_t i2 = 0; i2 != 256; i2 += 4)
      *(_DWORD *)(a2 + 2876 + i2) = *(_DWORD *)(a1 + 5024 + i2);
  }
  if (v153 - 1616 > 0x1F)
  {
    long long v191 = *(_OWORD *)(a1 + 5296);
    *(_OWORD *)(a2 + 3664) = *(_OWORD *)(a1 + 5280);
    *(_OWORD *)(a2 + 3680) = v191;
    long long v192 = *(_OWORD *)(a1 + 5328);
    *(_OWORD *)(a2 + 3696) = *(_OWORD *)(a1 + 5312);
    *(_OWORD *)(a2 + 3712) = v192;
    long long v193 = *(_OWORD *)(a1 + 5360);
    *(_OWORD *)(a2 + 3728) = *(_OWORD *)(a1 + 5344);
    *(_OWORD *)(a2 + 3744) = v193;
    long long v194 = *(_OWORD *)(a1 + 5392);
    *(_OWORD *)(a2 + 3760) = *(_OWORD *)(a1 + 5376);
    *(_OWORD *)(a2 + 3776) = v194;
    long long v195 = *(_OWORD *)(a1 + 5424);
    *(_OWORD *)(a2 + 3792) = *(_OWORD *)(a1 + 5408);
    *(_OWORD *)(a2 + 3808) = v195;
    long long v196 = *(_OWORD *)(a1 + 5456);
    *(_OWORD *)(a2 + 3824) = *(_OWORD *)(a1 + 5440);
    *(_OWORD *)(a2 + 3840) = v196;
    long long v197 = *(_OWORD *)(a1 + 5488);
    *(_OWORD *)(a2 + 3856) = *(_OWORD *)(a1 + 5472);
    *(_OWORD *)(a2 + 3872) = v197;
    __n128 result = *(__n128 *)(a1 + 5504);
    long long v198 = *(_OWORD *)(a1 + 5520);
    *(__n128 *)(a2 + 3888) = result;
    *(_OWORD *)(a2 + 3904) = v198;
  }
  else
  {
    for (uint64_t i3 = 0; i3 != 256; i3 += 4)
      *(_DWORD *)(a2 + 3664 + i3) = *(_DWORD *)(a1 + 5280 + i3);
  }
  if (v153 - 1084 > 0x1F)
  {
    long long v200 = *(_OWORD *)(a1 + 5552);
    *(_OWORD *)(a2 + 4452) = *(_OWORD *)(a1 + 5536);
    *(_OWORD *)(a2 + 4468) = v200;
    long long v201 = *(_OWORD *)(a1 + 5584);
    *(_OWORD *)(a2 + 4484) = *(_OWORD *)(a1 + 5568);
    *(_OWORD *)(a2 + 4500) = v201;
    long long v202 = *(_OWORD *)(a1 + 5616);
    *(_OWORD *)(a2 + 4516) = *(_OWORD *)(a1 + 5600);
    *(_OWORD *)(a2 + 4532) = v202;
    long long v203 = *(_OWORD *)(a1 + 5648);
    *(_OWORD *)(a2 + 4548) = *(_OWORD *)(a1 + 5632);
    *(_OWORD *)(a2 + 4564) = v203;
    long long v204 = *(_OWORD *)(a1 + 5680);
    *(_OWORD *)(a2 + 4580) = *(_OWORD *)(a1 + 5664);
    *(_OWORD *)(a2 + 4596) = v204;
    long long v205 = *(_OWORD *)(a1 + 5712);
    *(_OWORD *)(a2 + 4612) = *(_OWORD *)(a1 + 5696);
    *(_OWORD *)(a2 + 4628) = v205;
    long long v206 = *(_OWORD *)(a1 + 5744);
    *(_OWORD *)(a2 + 4644) = *(_OWORD *)(a1 + 5728);
    *(_OWORD *)(a2 + 4660) = v206;
    __n128 result = *(__n128 *)(a1 + 5760);
    long long v207 = *(_OWORD *)(a1 + 5776);
    *(__n128 *)(a2 + 4676) = result;
    *(_OWORD *)(a2 + 4692) = v207;
  }
  else
  {
    for (uint64_t i4 = 0; i4 != 256; i4 += 4)
      *(_DWORD *)(a2 + 4452 + i4) = *(_DWORD *)(a1 + 5536 + i4);
  }
  if (v153 - 552 > 0x1F)
  {
    long long v209 = *(_OWORD *)(a1 + 5808);
    *(_OWORD *)(a2 + 5240) = *(_OWORD *)(a1 + 5792);
    *(_OWORD *)(a2 + 5256) = v209;
    long long v210 = *(_OWORD *)(a1 + 5840);
    *(_OWORD *)(a2 + 5272) = *(_OWORD *)(a1 + 5824);
    *(_OWORD *)(a2 + 5288) = v210;
    long long v211 = *(_OWORD *)(a1 + 5872);
    *(_OWORD *)(a2 + 5304) = *(_OWORD *)(a1 + 5856);
    *(_OWORD *)(a2 + 5320) = v211;
    long long v212 = *(_OWORD *)(a1 + 5904);
    *(_OWORD *)(a2 + 5336) = *(_OWORD *)(a1 + 5888);
    *(_OWORD *)(a2 + 5352) = v212;
    long long v213 = *(_OWORD *)(a1 + 5936);
    *(_OWORD *)(a2 + 5368) = *(_OWORD *)(a1 + 5920);
    *(_OWORD *)(a2 + 5384) = v213;
    long long v214 = *(_OWORD *)(a1 + 5968);
    *(_OWORD *)(a2 + 5400) = *(_OWORD *)(a1 + 5952);
    *(_OWORD *)(a2 + 5416) = v214;
    long long v215 = *(_OWORD *)(a1 + 6000);
    *(_OWORD *)(a2 + 5432) = *(_OWORD *)(a1 + 5984);
    *(_OWORD *)(a2 + 5448) = v215;
    __n128 result = *(__n128 *)(a1 + 6016);
    long long v216 = *(_OWORD *)(a1 + 6032);
    *(__n128 *)(a2 + 5464) = result;
    *(_OWORD *)(a2 + 5480) = v216;
  }
  else
  {
    for (uint64_t i5 = 0; i5 != 256; i5 += 4)
      *(_DWORD *)(a2 + 5240 + i5) = *(_DWORD *)(a1 + 5792 + i5);
  }
  if (v153 - 20 > 0x1F)
  {
    long long v218 = *(_OWORD *)(a1 + 6064);
    *(_OWORD *)(a2 + 6028) = *(_OWORD *)(a1 + 6048);
    *(_OWORD *)(a2 + 6044) = v218;
    long long v219 = *(_OWORD *)(a1 + 6096);
    *(_OWORD *)(a2 + 6060) = *(_OWORD *)(a1 + 6080);
    *(_OWORD *)(a2 + 6076) = v219;
    long long v220 = *(_OWORD *)(a1 + 6128);
    *(_OWORD *)(a2 + 6092) = *(_OWORD *)(a1 + 6112);
    *(_OWORD *)(a2 + 6108) = v220;
    long long v221 = *(_OWORD *)(a1 + 6160);
    *(_OWORD *)(a2 + 6124) = *(_OWORD *)(a1 + 6144);
    *(_OWORD *)(a2 + 6140) = v221;
    long long v222 = *(_OWORD *)(a1 + 6192);
    *(_OWORD *)(a2 + 6156) = *(_OWORD *)(a1 + 6176);
    *(_OWORD *)(a2 + 6172) = v222;
    long long v223 = *(_OWORD *)(a1 + 6224);
    *(_OWORD *)(a2 + 6188) = *(_OWORD *)(a1 + 6208);
    *(_OWORD *)(a2 + 6204) = v223;
    long long v224 = *(_OWORD *)(a1 + 6256);
    *(_OWORD *)(a2 + 6220) = *(_OWORD *)(a1 + 6240);
    *(_OWORD *)(a2 + 6236) = v224;
    __n128 result = *(__n128 *)(a1 + 6272);
    long long v225 = *(_OWORD *)(a1 + 6288);
    *(__n128 *)(a2 + 6252) = result;
    *(_OWORD *)(a2 + 6268) = v225;
  }
  else
  {
    for (uint64_t i6 = 0; i6 != 256; i6 += 4)
    {
      result.n128_u32[0] = *(_DWORD *)(a1 + 6048 + i6);
      *(_DWORD *)(a2 + 6028 + i6) = result.n128_u32[0];
    }
  }
  return result;
}

uint64_t getBlobAsExact<jlps_v100>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlps");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        long long v6 = (const void *)(v2 + 32);
      }
      else {
        long long v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        long long v12 = (uint64_t *)(v2 + 8);
      }
      else {
        long long v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        long long v15 = (const void *)(v3 + 32);
      }
      else {
        long long v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 8532) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlps", *(void *)(v3 + 64), 8532);
      }
    }
  }
  return 0;
}

float copyPulseShapeData_v100<jlps_v100_ps>(unint64_t a1, unint64_t a2)
{
  uint64_t v2 = (_OWORD *)(a2 + 788);
  if (a1 + 2464 <= a2 || a2 + 512 <= a1)
  {
    long long v5 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_OWORD *)(a2 + 16) = v5;
    long long v6 = *(_OWORD *)(a1 + 2224);
    *(_OWORD *)(a2 + 256) = *(_OWORD *)(a1 + 2208);
    *(_OWORD *)(a2 + 272) = v6;
    long long v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a2 + 48) = v7;
    long long v8 = *(_OWORD *)(a1 + 2256);
    *(_OWORD *)(a2 + 288) = *(_OWORD *)(a1 + 2240);
    *(_OWORD *)(a2 + 304) = v8;
    long long v9 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(a2 + 80) = v9;
    long long v10 = *(_OWORD *)(a1 + 2288);
    *(_OWORD *)(a2 + 320) = *(_OWORD *)(a1 + 2272);
    *(_OWORD *)(a2 + 336) = v10;
    long long v11 = *(_OWORD *)(a1 + 112);
    *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
    *(_OWORD *)(a2 + 112) = v11;
    long long v12 = *(_OWORD *)(a1 + 2320);
    *(_OWORD *)(a2 + 352) = *(_OWORD *)(a1 + 2304);
    *(_OWORD *)(a2 + 368) = v12;
    long long v13 = *(_OWORD *)(a1 + 144);
    *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
    *(_OWORD *)(a2 + 144) = v13;
    long long v14 = *(_OWORD *)(a1 + 2352);
    *(_OWORD *)(a2 + 384) = *(_OWORD *)(a1 + 2336);
    *(_OWORD *)(a2 + 400) = v14;
    long long v15 = *(_OWORD *)(a1 + 176);
    *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
    *(_OWORD *)(a2 + 176) = v15;
    long long v16 = *(_OWORD *)(a1 + 2384);
    *(_OWORD *)(a2 + 416) = *(_OWORD *)(a1 + 2368);
    *(_OWORD *)(a2 + 432) = v16;
    long long v17 = *(_OWORD *)(a1 + 208);
    *(_OWORD *)(a2 + 192) = *(_OWORD *)(a1 + 192);
    *(_OWORD *)(a2 + 208) = v17;
    long long v18 = *(_OWORD *)(a1 + 2416);
    *(_OWORD *)(a2 + 448) = *(_OWORD *)(a1 + 2400);
    *(_OWORD *)(a2 + 464) = v18;
    long long v19 = *(_OWORD *)(a1 + 240);
    *(_OWORD *)(a2 + 224) = *(_OWORD *)(a1 + 224);
    *(_OWORD *)(a2 + 240) = v19;
    long long v20 = *(_OWORD *)(a1 + 2448);
    *(_OWORD *)(a2 + 480) = *(_OWORD *)(a1 + 2432);
    *(_OWORD *)(a2 + 496) = v20;
  }
  else
  {
    for (uint64_t i = 0; i != 256; i += 4)
    {
      unint64_t v4 = (_DWORD *)(a2 + i);
      *unint64_t v4 = *(_DWORD *)(a1 + i);
      v4[64] = *(_DWORD *)(a1 + i + 2208);
    }
  }
  long long v21 = (_OWORD *)(a2 + 1576);
  *(_DWORD *)(a2 + 768) = *(_DWORD *)(a1 + 2048);
  *(_DWORD *)(a2 + 772) = *(_DWORD *)(a1 + 2052);
  *(_DWORD *)(a2 + 776) = *(_DWORD *)(a1 + 2056);
  *(_DWORD *)(a2 + 780) = *(_DWORD *)(a1 + 2060);
  *(_DWORD *)(a2 + 784) = *(_DWORD *)(a1 + 2064);
  if ((unint64_t)v2 >= a1 + 2720 || a1 + 256 >= a2 + 1300)
  {
    long long v24 = *(_OWORD *)(a1 + 272);
    _OWORD *v2 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a2 + 804) = v24;
    long long v25 = *(_OWORD *)(a1 + 2480);
    *(_OWORD *)(a2 + 1044) = *(_OWORD *)(a1 + 2464);
    *(_OWORD *)(a2 + 1060) = v25;
    long long v26 = *(_OWORD *)(a1 + 304);
    *(_OWORD *)(a2 + 820) = *(_OWORD *)(a1 + 288);
    *(_OWORD *)(a2 + 836) = v26;
    long long v27 = *(_OWORD *)(a1 + 2512);
    *(_OWORD *)(a2 + 1076) = *(_OWORD *)(a1 + 2496);
    *(_OWORD *)(a2 + 1092) = v27;
    long long v28 = *(_OWORD *)(a1 + 336);
    *(_OWORD *)(a2 + 852) = *(_OWORD *)(a1 + 320);
    *(_OWORD *)(a2 + 868) = v28;
    long long v29 = *(_OWORD *)(a1 + 2544);
    *(_OWORD *)(a2 + 1108) = *(_OWORD *)(a1 + 2528);
    *(_OWORD *)(a2 + 1124) = v29;
    long long v30 = *(_OWORD *)(a1 + 368);
    *(_OWORD *)(a2 + 884) = *(_OWORD *)(a1 + 352);
    *(_OWORD *)(a2 + 900) = v30;
    long long v31 = *(_OWORD *)(a1 + 2576);
    *(_OWORD *)(a2 + 1140) = *(_OWORD *)(a1 + 2560);
    *(_OWORD *)(a2 + 1156) = v31;
    long long v32 = *(_OWORD *)(a1 + 400);
    *(_OWORD *)(a2 + 916) = *(_OWORD *)(a1 + 384);
    *(_OWORD *)(a2 + 932) = v32;
    long long v33 = *(_OWORD *)(a1 + 2608);
    *(_OWORD *)(a2 + 1172) = *(_OWORD *)(a1 + 2592);
    *(_OWORD *)(a2 + 1188) = v33;
    long long v34 = *(_OWORD *)(a1 + 432);
    *(_OWORD *)(a2 + 948) = *(_OWORD *)(a1 + 416);
    *(_OWORD *)(a2 + 964) = v34;
    long long v35 = *(_OWORD *)(a1 + 2640);
    *(_OWORD *)(a2 + 1204) = *(_OWORD *)(a1 + 2624);
    *(_OWORD *)(a2 + 1220) = v35;
    long long v36 = *(_OWORD *)(a1 + 464);
    *(_OWORD *)(a2 + 980) = *(_OWORD *)(a1 + 448);
    *(_OWORD *)(a2 + 996) = v36;
    long long v37 = *(_OWORD *)(a1 + 2672);
    *(_OWORD *)(a2 + 1236) = *(_OWORD *)(a1 + 2656);
    *(_OWORD *)(a2 + 1252) = v37;
    long long v38 = *(_OWORD *)(a1 + 496);
    *(_OWORD *)(a2 + 1012) = *(_OWORD *)(a1 + 480);
    *(_OWORD *)(a2 + 1028) = v38;
    long long v39 = *(_OWORD *)(a1 + 2704);
    *(_OWORD *)(a2 + 1268) = *(_OWORD *)(a1 + 2688);
    *(_OWORD *)(a2 + 1284) = v39;
  }
  else
  {
    for (uint64_t j = 0; j != 256; j += 4)
    {
      size_t v23 = (_DWORD *)((char *)v2 + j);
      _DWORD *v23 = *(_DWORD *)(a1 + j + 256);
      v23[64] = *(_DWORD *)(a1 + j + 2464);
    }
  }
  long long v40 = (_OWORD *)(a2 + 2364);
  *(_DWORD *)(a2 + 1556) = *(_DWORD *)(a1 + 2068);
  *(_DWORD *)(a2 + 1560) = *(_DWORD *)(a1 + 2072);
  *(_DWORD *)(a2 + 1564) = *(_DWORD *)(a1 + 2076);
  *(_DWORD *)(a2 + 1568) = *(_DWORD *)(a1 + 2080);
  *(_DWORD *)(a2 + 1572) = *(_DWORD *)(a1 + 2084);
  if ((unint64_t)v21 >= a1 + 2976 || a1 + 512 >= a2 + 2088)
  {
    long long v43 = *(_OWORD *)(a1 + 528);
    *long long v21 = *(_OWORD *)(a1 + 512);
    *(_OWORD *)(a2 + 1592) = v43;
    long long v44 = *(_OWORD *)(a1 + 2736);
    *(_OWORD *)(a2 + 1832) = *(_OWORD *)(a1 + 2720);
    *(_OWORD *)(a2 + 1848) = v44;
    long long v45 = *(_OWORD *)(a1 + 560);
    *(_OWORD *)(a2 + 1608) = *(_OWORD *)(a1 + 544);
    *(_OWORD *)(a2 + 1624) = v45;
    long long v46 = *(_OWORD *)(a1 + 2768);
    *(_OWORD *)(a2 + 1864) = *(_OWORD *)(a1 + 2752);
    *(_OWORD *)(a2 + 1880) = v46;
    long long v47 = *(_OWORD *)(a1 + 592);
    *(_OWORD *)(a2 + 1640) = *(_OWORD *)(a1 + 576);
    *(_OWORD *)(a2 + 1656) = v47;
    long long v48 = *(_OWORD *)(a1 + 2800);
    *(_OWORD *)(a2 + 1896) = *(_OWORD *)(a1 + 2784);
    *(_OWORD *)(a2 + 1912) = v48;
    long long v49 = *(_OWORD *)(a1 + 624);
    *(_OWORD *)(a2 + 1672) = *(_OWORD *)(a1 + 608);
    *(_OWORD *)(a2 + 1688) = v49;
    long long v50 = *(_OWORD *)(a1 + 2832);
    *(_OWORD *)(a2 + 1928) = *(_OWORD *)(a1 + 2816);
    *(_OWORD *)(a2 + 1944) = v50;
    long long v51 = *(_OWORD *)(a1 + 656);
    *(_OWORD *)(a2 + 1704) = *(_OWORD *)(a1 + 640);
    *(_OWORD *)(a2 + 1720) = v51;
    long long v52 = *(_OWORD *)(a1 + 2864);
    *(_OWORD *)(a2 + 1960) = *(_OWORD *)(a1 + 2848);
    *(_OWORD *)(a2 + 1976) = v52;
    long long v53 = *(_OWORD *)(a1 + 688);
    *(_OWORD *)(a2 + 1736) = *(_OWORD *)(a1 + 672);
    *(_OWORD *)(a2 + 1752) = v53;
    long long v54 = *(_OWORD *)(a1 + 2896);
    *(_OWORD *)(a2 + 1992) = *(_OWORD *)(a1 + 2880);
    *(_OWORD *)(a2 + 2008) = v54;
    long long v55 = *(_OWORD *)(a1 + 720);
    *(_OWORD *)(a2 + 1768) = *(_OWORD *)(a1 + 704);
    *(_OWORD *)(a2 + 1784) = v55;
    long long v56 = *(_OWORD *)(a1 + 2928);
    *(_OWORD *)(a2 + 2024) = *(_OWORD *)(a1 + 2912);
    *(_OWORD *)(a2 + 2040) = v56;
    long long v57 = *(_OWORD *)(a1 + 752);
    *(_OWORD *)(a2 + 1800) = *(_OWORD *)(a1 + 736);
    *(_OWORD *)(a2 + 1816) = v57;
    long long v58 = *(_OWORD *)(a1 + 2960);
    *(_OWORD *)(a2 + 2056) = *(_OWORD *)(a1 + 2944);
    *(_OWORD *)(a2 + 2072) = v58;
  }
  else
  {
    for (uint64_t k = 0; k != 256; k += 4)
    {
      BOOL v42 = (_DWORD *)((char *)v21 + k);
      _DWORD *v42 = *(_DWORD *)(a1 + k + 512);
      v42[64] = *(_DWORD *)(a1 + k + 2720);
    }
  }
  *(_DWORD *)(a2 + 2344) = *(_DWORD *)(a1 + 2088);
  *(_DWORD *)(a2 + 2348) = *(_DWORD *)(a1 + 2092);
  *(_DWORD *)(a2 + 2352) = *(_DWORD *)(a1 + 2096);
  *(_DWORD *)(a2 + 2356) = *(_DWORD *)(a1 + 2100);
  *(_DWORD *)(a2 + 2360) = *(_DWORD *)(a1 + 2104);
  if ((unint64_t)v40 >= a1 + 3232 || a1 + 768 >= a2 + 2876)
  {
    long long v61 = *(_OWORD *)(a1 + 784);
    *long long v40 = *(_OWORD *)(a1 + 768);
    *(_OWORD *)(a2 + 2380) = v61;
    long long v62 = *(_OWORD *)(a1 + 2992);
    *(_OWORD *)(a2 + 2620) = *(_OWORD *)(a1 + 2976);
    *(_OWORD *)(a2 + 2636) = v62;
    long long v63 = *(_OWORD *)(a1 + 816);
    *(_OWORD *)(a2 + 2396) = *(_OWORD *)(a1 + 800);
    *(_OWORD *)(a2 + 2412) = v63;
    long long v64 = *(_OWORD *)(a1 + 3024);
    *(_OWORD *)(a2 + 2652) = *(_OWORD *)(a1 + 3008);
    *(_OWORD *)(a2 + 2668) = v64;
    long long v65 = *(_OWORD *)(a1 + 848);
    *(_OWORD *)(a2 + 2428) = *(_OWORD *)(a1 + 832);
    *(_OWORD *)(a2 + 2444) = v65;
    long long v66 = *(_OWORD *)(a1 + 3056);
    *(_OWORD *)(a2 + 2684) = *(_OWORD *)(a1 + 3040);
    *(_OWORD *)(a2 + 2700) = v66;
    long long v67 = *(_OWORD *)(a1 + 880);
    *(_OWORD *)(a2 + 2460) = *(_OWORD *)(a1 + 864);
    *(_OWORD *)(a2 + 2476) = v67;
    long long v68 = *(_OWORD *)(a1 + 3088);
    *(_OWORD *)(a2 + 2716) = *(_OWORD *)(a1 + 3072);
    *(_OWORD *)(a2 + 2732) = v68;
    long long v69 = *(_OWORD *)(a1 + 912);
    *(_OWORD *)(a2 + 2492) = *(_OWORD *)(a1 + 896);
    *(_OWORD *)(a2 + 2508) = v69;
    long long v70 = *(_OWORD *)(a1 + 3120);
    *(_OWORD *)(a2 + 2748) = *(_OWORD *)(a1 + 3104);
    *(_OWORD *)(a2 + 2764) = v70;
    long long v71 = *(_OWORD *)(a1 + 944);
    *(_OWORD *)(a2 + 2524) = *(_OWORD *)(a1 + 928);
    *(_OWORD *)(a2 + 2540) = v71;
    long long v72 = *(_OWORD *)(a1 + 3152);
    *(_OWORD *)(a2 + 2780) = *(_OWORD *)(a1 + 3136);
    *(_OWORD *)(a2 + 2796) = v72;
    long long v73 = *(_OWORD *)(a1 + 976);
    *(_OWORD *)(a2 + 2556) = *(_OWORD *)(a1 + 960);
    *(_OWORD *)(a2 + 2572) = v73;
    long long v74 = *(_OWORD *)(a1 + 3184);
    *(_OWORD *)(a2 + 2812) = *(_OWORD *)(a1 + 3168);
    *(_OWORD *)(a2 + 2828) = v74;
    long long v75 = *(_OWORD *)(a1 + 1008);
    *(_OWORD *)(a2 + 2588) = *(_OWORD *)(a1 + 992);
    *(_OWORD *)(a2 + 2604) = v75;
    long long v76 = *(_OWORD *)(a1 + 3216);
    *(_OWORD *)(a2 + 2844) = *(_OWORD *)(a1 + 3200);
    *(_OWORD *)(a2 + 2860) = v76;
  }
  else
  {
    for (uint64_t m = 0; m != 256; m += 4)
    {
      int v60 = (_DWORD *)((char *)v40 + m);
      *int v60 = *(_DWORD *)(a1 + m + 768);
      v60[64] = *(_DWORD *)(a1 + m + 2976);
    }
  }
  long long v77 = (_OWORD *)(a2 + 3940);
  *(_DWORD *)(a2 + 3132) = *(_DWORD *)(a1 + 2108);
  *(_DWORD *)(a2 + 3136) = *(_DWORD *)(a1 + 2112);
  *(_DWORD *)(a2 + 3140) = *(_DWORD *)(a1 + 2116);
  *(_DWORD *)(a2 + 3144) = *(_DWORD *)(a1 + 2120);
  *(_DWORD *)(a2 + 3148) = *(_DWORD *)(a1 + 2124);
  if (a2 + 3152 >= a1 + 3488 || a1 + 1024 >= a2 + 3664)
  {
    long long v80 = *(_OWORD *)(a1 + 1040);
    *(_OWORD *)(a2 + 3152) = *(_OWORD *)(a1 + 1024);
    *(_OWORD *)(a2 + 3168) = v80;
    long long v81 = *(_OWORD *)(a1 + 3248);
    *(_OWORD *)(a2 + 3408) = *(_OWORD *)(a1 + 3232);
    *(_OWORD *)(a2 + 3424) = v81;
    long long v82 = *(_OWORD *)(a1 + 1072);
    *(_OWORD *)(a2 + 3184) = *(_OWORD *)(a1 + 1056);
    *(_OWORD *)(a2 + 3200) = v82;
    long long v83 = *(_OWORD *)(a1 + 3280);
    *(_OWORD *)(a2 + 3440) = *(_OWORD *)(a1 + 3264);
    *(_OWORD *)(a2 + 3456) = v83;
    long long v84 = *(_OWORD *)(a1 + 1104);
    *(_OWORD *)(a2 + 3216) = *(_OWORD *)(a1 + 1088);
    *(_OWORD *)(a2 + 3232) = v84;
    long long v85 = *(_OWORD *)(a1 + 3312);
    *(_OWORD *)(a2 + 3472) = *(_OWORD *)(a1 + 3296);
    *(_OWORD *)(a2 + 3488) = v85;
    long long v86 = *(_OWORD *)(a1 + 1136);
    *(_OWORD *)(a2 + 3248) = *(_OWORD *)(a1 + 1120);
    *(_OWORD *)(a2 + 3264) = v86;
    long long v87 = *(_OWORD *)(a1 + 3344);
    *(_OWORD *)(a2 + 3504) = *(_OWORD *)(a1 + 3328);
    *(_OWORD *)(a2 + 3520) = v87;
    long long v88 = *(_OWORD *)(a1 + 1168);
    *(_OWORD *)(a2 + 3280) = *(_OWORD *)(a1 + 1152);
    *(_OWORD *)(a2 + 3296) = v88;
    long long v89 = *(_OWORD *)(a1 + 3376);
    *(_OWORD *)(a2 + 3536) = *(_OWORD *)(a1 + 3360);
    *(_OWORD *)(a2 + 3552) = v89;
    long long v90 = *(_OWORD *)(a1 + 1200);
    *(_OWORD *)(a2 + 3312) = *(_OWORD *)(a1 + 1184);
    *(_OWORD *)(a2 + 3328) = v90;
    long long v91 = *(_OWORD *)(a1 + 3408);
    *(_OWORD *)(a2 + 3568) = *(_OWORD *)(a1 + 3392);
    *(_OWORD *)(a2 + 3584) = v91;
    long long v92 = *(_OWORD *)(a1 + 1232);
    *(_OWORD *)(a2 + 3344) = *(_OWORD *)(a1 + 1216);
    *(_OWORD *)(a2 + 3360) = v92;
    long long v93 = *(_OWORD *)(a1 + 3440);
    *(_OWORD *)(a2 + 3600) = *(_OWORD *)(a1 + 3424);
    *(_OWORD *)(a2 + 3616) = v93;
    long long v94 = *(_OWORD *)(a1 + 1264);
    *(_OWORD *)(a2 + 3376) = *(_OWORD *)(a1 + 1248);
    *(_OWORD *)(a2 + 3392) = v94;
    long long v95 = *(_OWORD *)(a1 + 3472);
    *(_OWORD *)(a2 + 3632) = *(_OWORD *)(a1 + 3456);
    *(_OWORD *)(a2 + 3648) = v95;
  }
  else
  {
    for (uint64_t n = 0; n != 256; n += 4)
    {
      unint64_t v79 = (_DWORD *)(a2 + 3152 + n);
      *unint64_t v79 = *(_DWORD *)(a1 + n + 1024);
      v79[64] = *(_DWORD *)(a1 + n + 3232);
    }
  }
  long long v96 = (_OWORD *)(a2 + 4728);
  *(_DWORD *)(a2 + 3920) = *(_DWORD *)(a1 + 2128);
  *(_DWORD *)(a2 + 3924) = *(_DWORD *)(a1 + 2132);
  *(_DWORD *)(a2 + 3928) = *(_DWORD *)(a1 + 2136);
  *(_DWORD *)(a2 + 3932) = *(_DWORD *)(a1 + 2140);
  *(_DWORD *)(a2 + 3936) = *(_DWORD *)(a1 + 2144);
  if ((unint64_t)v77 >= a1 + 3744 || a1 + 1280 >= a2 + 4452)
  {
    long long v99 = *(_OWORD *)(a1 + 1296);
    _OWORD *v77 = *(_OWORD *)(a1 + 1280);
    *(_OWORD *)(a2 + 3956) = v99;
    long long v100 = *(_OWORD *)(a1 + 3504);
    *(_OWORD *)(a2 + 4196) = *(_OWORD *)(a1 + 3488);
    *(_OWORD *)(a2 + 4212) = v100;
    long long v101 = *(_OWORD *)(a1 + 1328);
    *(_OWORD *)(a2 + 3972) = *(_OWORD *)(a1 + 1312);
    *(_OWORD *)(a2 + 3988) = v101;
    long long v102 = *(_OWORD *)(a1 + 3536);
    *(_OWORD *)(a2 + 4228) = *(_OWORD *)(a1 + 3520);
    *(_OWORD *)(a2 + 4244) = v102;
    long long v103 = *(_OWORD *)(a1 + 1360);
    *(_OWORD *)(a2 + 4004) = *(_OWORD *)(a1 + 1344);
    *(_OWORD *)(a2 + 4020) = v103;
    long long v104 = *(_OWORD *)(a1 + 3568);
    *(_OWORD *)(a2 + 4260) = *(_OWORD *)(a1 + 3552);
    *(_OWORD *)(a2 + 4276) = v104;
    long long v105 = *(_OWORD *)(a1 + 1392);
    *(_OWORD *)(a2 + 4036) = *(_OWORD *)(a1 + 1376);
    *(_OWORD *)(a2 + 4052) = v105;
    long long v106 = *(_OWORD *)(a1 + 3600);
    *(_OWORD *)(a2 + 4292) = *(_OWORD *)(a1 + 3584);
    *(_OWORD *)(a2 + 4308) = v106;
    long long v107 = *(_OWORD *)(a1 + 1424);
    *(_OWORD *)(a2 + 4068) = *(_OWORD *)(a1 + 1408);
    *(_OWORD *)(a2 + 4084) = v107;
    long long v108 = *(_OWORD *)(a1 + 3632);
    *(_OWORD *)(a2 + 4324) = *(_OWORD *)(a1 + 3616);
    *(_OWORD *)(a2 + 4340) = v108;
    long long v109 = *(_OWORD *)(a1 + 1456);
    *(_OWORD *)(a2 + 4100) = *(_OWORD *)(a1 + 1440);
    *(_OWORD *)(a2 + 4116) = v109;
    long long v110 = *(_OWORD *)(a1 + 3664);
    *(_OWORD *)(a2 + 4356) = *(_OWORD *)(a1 + 3648);
    *(_OWORD *)(a2 + 4372) = v110;
    long long v111 = *(_OWORD *)(a1 + 1488);
    *(_OWORD *)(a2 + 4132) = *(_OWORD *)(a1 + 1472);
    *(_OWORD *)(a2 + 4148) = v111;
    long long v112 = *(_OWORD *)(a1 + 3696);
    *(_OWORD *)(a2 + 4388) = *(_OWORD *)(a1 + 3680);
    *(_OWORD *)(a2 + 4404) = v112;
    long long v113 = *(_OWORD *)(a1 + 1520);
    *(_OWORD *)(a2 + 4164) = *(_OWORD *)(a1 + 1504);
    *(_OWORD *)(a2 + 4180) = v113;
    long long v114 = *(_OWORD *)(a1 + 3728);
    *(_OWORD *)(a2 + 4420) = *(_OWORD *)(a1 + 3712);
    *(_OWORD *)(a2 + 4436) = v114;
  }
  else
  {
    for (iuint64_t i = 0; ii != 256; ii += 4)
    {
      CMTime v98 = (_DWORD *)((char *)v77 + ii);
      *CMTime v98 = *(_DWORD *)(a1 + ii + 1280);
      v98[64] = *(_DWORD *)(a1 + ii + 3488);
    }
  }
  long long v115 = (_OWORD *)(a2 + 5516);
  *(_DWORD *)(a2 + 4708) = *(_DWORD *)(a1 + 2148);
  *(_DWORD *)(a2 + 4712) = *(_DWORD *)(a1 + 2152);
  *(_DWORD *)(a2 + 4716) = *(_DWORD *)(a1 + 2156);
  *(_DWORD *)(a2 + 4720) = *(_DWORD *)(a1 + 2160);
  *(_DWORD *)(a2 + 4724) = *(_DWORD *)(a1 + 2164);
  if ((unint64_t)v96 >= a1 + 4000 || a1 + 1536 >= a2 + 5240)
  {
    long long v118 = *(_OWORD *)(a1 + 1552);
    *long long v96 = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)(a2 + 4744) = v118;
    long long v119 = *(_OWORD *)(a1 + 3760);
    *(_OWORD *)(a2 + 4984) = *(_OWORD *)(a1 + 3744);
    *(_OWORD *)(a2 + 5000) = v119;
    long long v120 = *(_OWORD *)(a1 + 1584);
    *(_OWORD *)(a2 + 4760) = *(_OWORD *)(a1 + 1568);
    *(_OWORD *)(a2 + 4776) = v120;
    long long v121 = *(_OWORD *)(a1 + 3792);
    *(_OWORD *)(a2 + 5016) = *(_OWORD *)(a1 + 3776);
    *(_OWORD *)(a2 + 5032) = v121;
    long long v122 = *(_OWORD *)(a1 + 1616);
    *(_OWORD *)(a2 + 4792) = *(_OWORD *)(a1 + 1600);
    *(_OWORD *)(a2 + 4808) = v122;
    long long v123 = *(_OWORD *)(a1 + 3824);
    *(_OWORD *)(a2 + 5048) = *(_OWORD *)(a1 + 3808);
    *(_OWORD *)(a2 + 5064) = v123;
    long long v124 = *(_OWORD *)(a1 + 1648);
    *(_OWORD *)(a2 + 4824) = *(_OWORD *)(a1 + 1632);
    *(_OWORD *)(a2 + 4840) = v124;
    long long v125 = *(_OWORD *)(a1 + 3856);
    *(_OWORD *)(a2 + 5080) = *(_OWORD *)(a1 + 3840);
    *(_OWORD *)(a2 + 5096) = v125;
    long long v126 = *(_OWORD *)(a1 + 1680);
    *(_OWORD *)(a2 + 4856) = *(_OWORD *)(a1 + 1664);
    *(_OWORD *)(a2 + 4872) = v126;
    long long v127 = *(_OWORD *)(a1 + 3888);
    *(_OWORD *)(a2 + 5112) = *(_OWORD *)(a1 + 3872);
    *(_OWORD *)(a2 + 5128) = v127;
    long long v128 = *(_OWORD *)(a1 + 1712);
    *(_OWORD *)(a2 + 4888) = *(_OWORD *)(a1 + 1696);
    *(_OWORD *)(a2 + 4904) = v128;
    long long v129 = *(_OWORD *)(a1 + 3920);
    *(_OWORD *)(a2 + 5144) = *(_OWORD *)(a1 + 3904);
    *(_OWORD *)(a2 + 5160) = v129;
    long long v130 = *(_OWORD *)(a1 + 1744);
    *(_OWORD *)(a2 + 4920) = *(_OWORD *)(a1 + 1728);
    *(_OWORD *)(a2 + 4936) = v130;
    long long v131 = *(_OWORD *)(a1 + 3952);
    *(_OWORD *)(a2 + 5176) = *(_OWORD *)(a1 + 3936);
    *(_OWORD *)(a2 + 5192) = v131;
    long long v132 = *(_OWORD *)(a1 + 1776);
    *(_OWORD *)(a2 + 4952) = *(_OWORD *)(a1 + 1760);
    *(_OWORD *)(a2 + 4968) = v132;
    long long v133 = *(_OWORD *)(a1 + 3984);
    *(_OWORD *)(a2 + 5208) = *(_OWORD *)(a1 + 3968);
    *(_OWORD *)(a2 + 5224) = v133;
  }
  else
  {
    for (juint64_t j = 0; jj != 256; jj += 4)
    {
      BOOL v117 = (_DWORD *)((char *)v96 + jj);
      *BOOL v117 = *(_DWORD *)(a1 + jj + 1536);
      v117[64] = *(_DWORD *)(a1 + jj + 3744);
    }
  }
  *(_DWORD *)(a2 + 5496) = *(_DWORD *)(a1 + 2168);
  *(_DWORD *)(a2 + 5500) = *(_DWORD *)(a1 + 2172);
  *(_DWORD *)(a2 + 5504) = *(_DWORD *)(a1 + 2176);
  *(_DWORD *)(a2 + 5508) = *(_DWORD *)(a1 + 2180);
  *(_DWORD *)(a2 + 5512) = *(_DWORD *)(a1 + 2184);
  if ((unint64_t)v115 >= a1 + 4256 || a1 + 1792 >= a2 + 6028)
  {
    long long v136 = *(_OWORD *)(a1 + 1808);
    *long long v115 = *(_OWORD *)(a1 + 1792);
    *(_OWORD *)(a2 + 5532) = v136;
    long long v137 = *(_OWORD *)(a1 + 4016);
    *(_OWORD *)(a2 + 5772) = *(_OWORD *)(a1 + 4000);
    *(_OWORD *)(a2 + 5788) = v137;
    long long v138 = *(_OWORD *)(a1 + 1840);
    *(_OWORD *)(a2 + 5548) = *(_OWORD *)(a1 + 1824);
    *(_OWORD *)(a2 + 5564) = v138;
    long long v139 = *(_OWORD *)(a1 + 4048);
    *(_OWORD *)(a2 + 5804) = *(_OWORD *)(a1 + 4032);
    *(_OWORD *)(a2 + 5820) = v139;
    long long v140 = *(_OWORD *)(a1 + 1872);
    *(_OWORD *)(a2 + 5580) = *(_OWORD *)(a1 + 1856);
    *(_OWORD *)(a2 + 5596) = v140;
    long long v141 = *(_OWORD *)(a1 + 4080);
    *(_OWORD *)(a2 + 5836) = *(_OWORD *)(a1 + 4064);
    *(_OWORD *)(a2 + 5852) = v141;
    long long v142 = *(_OWORD *)(a1 + 1904);
    *(_OWORD *)(a2 + 5612) = *(_OWORD *)(a1 + 1888);
    *(_OWORD *)(a2 + 5628) = v142;
    long long v143 = *(_OWORD *)(a1 + 4112);
    *(_OWORD *)(a2 + 5868) = *(_OWORD *)(a1 + 4096);
    *(_OWORD *)(a2 + 5884) = v143;
    long long v144 = *(_OWORD *)(a1 + 1936);
    *(_OWORD *)(a2 + 5644) = *(_OWORD *)(a1 + 1920);
    *(_OWORD *)(a2 + 5660) = v144;
    long long v145 = *(_OWORD *)(a1 + 4144);
    *(_OWORD *)(a2 + 5900) = *(_OWORD *)(a1 + 4128);
    *(_OWORD *)(a2 + 5916) = v145;
    long long v146 = *(_OWORD *)(a1 + 1968);
    *(_OWORD *)(a2 + 5676) = *(_OWORD *)(a1 + 1952);
    *(_OWORD *)(a2 + 5692) = v146;
    long long v147 = *(_OWORD *)(a1 + 4176);
    *(_OWORD *)(a2 + 5932) = *(_OWORD *)(a1 + 4160);
    *(_OWORD *)(a2 + 5948) = v147;
    long long v148 = *(_OWORD *)(a1 + 2000);
    *(_OWORD *)(a2 + 5708) = *(_OWORD *)(a1 + 1984);
    *(_OWORD *)(a2 + 5724) = v148;
    long long v149 = *(_OWORD *)(a1 + 4208);
    *(_OWORD *)(a2 + 5964) = *(_OWORD *)(a1 + 4192);
    *(_OWORD *)(a2 + 5980) = v149;
    long long v150 = *(_OWORD *)(a1 + 2032);
    *(_OWORD *)(a2 + 5740) = *(_OWORD *)(a1 + 2016);
    *(_OWORD *)(a2 + 5756) = v150;
    long long v151 = *(_OWORD *)(a1 + 4240);
    *(_OWORD *)(a2 + 5996) = *(_OWORD *)(a1 + 4224);
    *(_OWORD *)(a2 + 6012) = v151;
  }
  else
  {
    for (kuint64_t k = 0; kk != 256; kk += 4)
    {
      char v135 = (_DWORD *)((char *)v115 + kk);
      *char v135 = *(_DWORD *)(a1 + kk + 1792);
      v135[64] = *(_DWORD *)(a1 + kk + 4000);
    }
  }
  *(_DWORD *)(a2 + 6284) = *(_DWORD *)(a1 + 2188);
  *(_DWORD *)(a2 + 6288) = *(_DWORD *)(a1 + 2192);
  *(_DWORD *)(a2 + 6292) = *(_DWORD *)(a1 + 2196);
  *(_DWORD *)(a2 + 6296) = *(_DWORD *)(a1 + 2200);
  float result = *(float *)(a1 + 2204);
  *(float *)(a2 + 6300) = result;
  return result;
}

uint64_t getBlobAsExact<jlnm_v102>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlnm");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        long long v6 = (const void *)(v2 + 32);
      }
      else {
        long long v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        long long v12 = (uint64_t *)(v2 + 8);
      }
      else {
        long long v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        long long v15 = (const void *)(v3 + 32);
      }
      else {
        long long v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 75388) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnm", *(void *)(v3 + 64), 75388);
      }
    }
  }
  return 0;
}

void readJLNM_v102_stray_map(unsigned __int8 *a1, float *a2)
{
  uint64_t v2 = 0;
  long long v77 = a2 + 76571;
  long long v69 = a2 + 39883;
  long long v67 = a2 + 30711;
  uint64_t v3 = a2 + 21539;
  unint64_t v4 = a2 + 12367;
  long long v75 = a2 + 67399;
  long long v76 = a1 + 66300;
  long long v73 = a2 + 58227;
  long long v74 = a1 + 57228;
  long long v71 = a2 + 49055;
  long long v72 = a1 + 48156;
  long long v70 = a1 + 39084;
  long long v68 = a1 + 30012;
  long long v66 = a1 + 20940;
  int v5 = a1 + 11868;
  long long v6 = a1 + 2796;
  do
  {
    size_t v7 = v6;
    BOOL v8 = v4;
    uint64_t v9 = 84;
    do
    {
      unsigned int v10 = *v7;
      v7 += 108;
      float v11 = pow(10000.0, (double)v10 * 0.00392156863) * 0.00079999998;
      *BOOL v8 = v11;
      v8 += 108;
      --v9;
    }
    while (v9);
    ++v2;
    ++v4;
    ++v6;
  }
  while (v2 != 108);
  uint64_t v12 = 0;
  int v14 = v66;
  unint64_t v13 = v67;
  do
  {
    long long v15 = v5;
    size_t v16 = v3;
    uint64_t v17 = 84;
    do
    {
      unsigned int v18 = *v15;
      v15 += 108;
      float v19 = pow(10000.0, (double)v18 * 0.00392156863) * 0.00079999998;
      *size_t v16 = v19;
      v16 += 108;
      --v17;
    }
    while (v17);
    ++v12;
    ++v3;
    ++v5;
  }
  while (v12 != 108);
  uint64_t v20 = 0;
  char v22 = v76;
  long long v21 = v77;
  do
  {
    size_t v23 = v14;
    long long v24 = v13;
    uint64_t v25 = 84;
    do
    {
      unsigned int v26 = *v23;
      v23 += 108;
      float v27 = pow(10000.0, (double)v26 * 0.00392156863) * 0.00079999998;
      float *v24 = v27;
      v24 += 108;
      --v25;
    }
    while (v25);
    ++v20;
    ++v13;
    ++v14;
  }
  while (v20 != 108);
  uint64_t v28 = 0;
  long long v29 = v68;
  long long v30 = v69;
  do
  {
    long long v31 = v29;
    long long v32 = v30;
    uint64_t v33 = 84;
    do
    {
      unsigned int v34 = *v29;
      v29 += 108;
      float v35 = pow(10000.0, (double)v34 * 0.00392156863) * 0.00079999998;
      *long long v30 = v35;
      v30 += 108;
      --v33;
    }
    while (v33);
    ++v28;
    long long v30 = v32 + 1;
    long long v29 = v31 + 1;
  }
  while (v28 != 108);
  uint64_t v36 = 0;
  long long v38 = v70;
  long long v37 = v71;
  do
  {
    long long v39 = v38;
    long long v40 = v37;
    uint64_t v41 = 84;
    do
    {
      unsigned int v42 = *v39;
      v39 += 108;
      float v43 = pow(10000.0, (double)v42 * 0.00392156863) * 0.00079999998;
      *long long v40 = v43;
      v40 += 108;
      --v41;
    }
    while (v41);
    ++v36;
    ++v37;
    ++v38;
  }
  while (v36 != 108);
  uint64_t v44 = 0;
  long long v45 = v72;
  long long v46 = v73;
  do
  {
    long long v47 = v45;
    long long v48 = v46;
    uint64_t v49 = 84;
    do
    {
      unsigned int v50 = *v45;
      v45 += 108;
      float v51 = pow(10000.0, (double)v50 * 0.00392156863) * 0.00079999998;
      float *v46 = v51;
      v46 += 108;
      --v49;
    }
    while (v49);
    ++v44;
    long long v46 = v48 + 1;
    long long v45 = v47 + 1;
  }
  while (v44 != 108);
  uint64_t v52 = 0;
  long long v54 = v74;
  long long v53 = v75;
  do
  {
    long long v55 = v54;
    long long v56 = v53;
    uint64_t v57 = 84;
    do
    {
      unsigned int v58 = *v55;
      v55 += 108;
      float v59 = pow(10000.0, (double)v58 * 0.00392156863) * 0.00079999998;
      float *v56 = v59;
      v56 += 108;
      --v57;
    }
    while (v57);
    ++v52;
    ++v53;
    ++v54;
  }
  while (v52 != 108);
  for (uint64_t i = 0; i != 108; ++i)
  {
    long long v61 = v22;
    long long v62 = v21;
    uint64_t v63 = 84;
    do
    {
      unsigned int v64 = *v61;
      v61 += 108;
      float v65 = pow(10000.0, (double)v64 * 0.00392156863) * 0.00079999998;
      *long long v62 = v65;
      v62 += 108;
      --v63;
    }
    while (v63);
    ++v21;
    ++v22;
  }
}

uint64_t getBlobAsExact<jlnm_v101>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlnm");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        long long v6 = (const void *)(v2 + 32);
      }
      else {
        long long v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        long long v15 = (const void *)(v3 + 32);
      }
      else {
        long long v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 8160) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnm", *(void *)(v3 + 64), 8160);
      }
    }
  }
  return 0;
}

double readJLNM_v100_v101<jlnm_v101>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (double *)(a1 + 3652);
  unint64_t v4 = (unsigned char *)(a2 + 402488);
  uint64_t v5 = a2 + 346204;
  uint64_t v6 = a2 + 342572;
  size_t v7 = (_DWORD *)(a2 + 306276);
  BOOL v8 = (_DWORD *)(a2 + 269588);
  int v9 = (_DWORD *)(a2 + 232900);
  BOOL v10 = (_DWORD *)(a2 + 196212);
  BOOL v11 = (_DWORD *)(a2 + 159524);
  uint64_t v12 = (_DWORD *)(a2 + 122836);
  unint64_t v13 = (_DWORD *)(a2 + 86148);
  uint64_t v14 = a2 + 49084;
  long long v15 = (float32x2_t *)(a2 + 342588);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL);
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
  uint64_t v18 = v14;
  uint64_t v19 = a1;
  do
  {
    uint64_t v20 = 0;
    uint64_t v21 = v18;
    char v22 = v15;
    do
    {
      *(unsigned char *)(v21 - 16) = *(unsigned char *)(v19 + v20 + 32);
      v23.i64[0] = *(unsigned __int8 *)(v19 + v20 + 33);
      v23.i64[1] = *(unsigned __int8 *)(v19 + v20 + 34);
      float32x2_t v24 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v23), v16));
      *(float32x2_t *)(v21 - 12) = v24;
      v24.i8[0] = *(unsigned char *)(v19 + v20 + 35);
      *(float *)(v21 - 4) = (float)v24.u32[0];
      uint64_t v25 = *(void *)(v19 + v20 + 44);
      *(_DWORD *)(v21 + 8) = *(_DWORD *)(v19 + v20 + 52);
      *(void *)uint64_t v21 = v25;
      v21 += 28;
      v23.i64[0] = *(__int16 *)(v19 + v20 + 36);
      v23.i64[1] = *(__int16 *)(v19 + v20 + 38);
      v22[113] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64((int64x2_t)v23), v17));
      v23.i64[0] = *(__int16 *)(v19 + v20 + 40);
      v23.i64[1] = *(__int16 *)(v19 + v20 + 42);
      *v22++ = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64((int64x2_t)v23), v17));
      v20 += 32;
    }
    while (v20 != 448);
    ++v2;
    v15 += 14;
    v19 += 448;
    v18 += 36688;
  }
  while (v2 != 8);
  int v26 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v6 + 1816) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(v6 + 1820) = *(unsigned char *)(a1 + 12);
  *(_DWORD *)(v6 + 912) = v26;
  *(unsigned char *)(v6 + 916) = *(unsigned char *)(a1 + 13);
  *(_OWORD *)uint64_t v6 = *(_OWORD *)(a1 + 16);
  int v27 = *(_DWORD *)(a1 + 3616);
  *(_DWORD *)(v14 + 376) = v27;
  *unint64_t v13 = v27;
  _DWORD *v12 = v27;
  *BOOL v11 = v27;
  *BOOL v10 = v27;
  _DWORD *v9 = v27;
  *BOOL v8 = v27;
  _DWORD *v7 = v27;
  double result = *v3;
  *(double *)uint64_t v5 = *v3;
  *(_WORD *)(v5 + 8) = *(_WORD *)(a1 + 3660);
  *(unsigned char *)(v5 + 12) = *(unsigned char *)(a1 + 3620);
  *(unsigned char *)(v5 + 13) = *(unsigned char *)(a1 + 3621);
  *(unsigned char *)(v5 + 14) = *(unsigned char *)(a1 + 3622);
  *(unsigned char *)(v5 + 15) = *(unsigned char *)(a1 + 3623);
  *(unsigned char *)(v5 + 16) = *(unsigned char *)(a1 + 3624);
  *(unsigned char *)(v5 + 17) = *(unsigned char *)(a1 + 3625);
  *(unsigned char *)(v5 + 18) = *(unsigned char *)(a1 + 3626);
  *(unsigned char *)(v5 + 19) = *(unsigned char *)(a1 + 3627);
  *(unsigned char *)(v5 + 20) = *(unsigned char *)(a1 + 3628);
  *(unsigned char *)(v5 + 21) = *(unsigned char *)(a1 + 3629);
  *(unsigned char *)(v5 + 22) = *(unsigned char *)(a1 + 3630);
  *(unsigned char *)(v5 + 23) = *(unsigned char *)(a1 + 3631);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(a1 + 3632);
  *(unsigned char *)(v5 + 25) = *(unsigned char *)(a1 + 3633);
  *(unsigned char *)(v5 + 26) = *(unsigned char *)(a1 + 3634);
  *(unsigned char *)(v5 + 27) = *(unsigned char *)(a1 + 3635);
  *(unsigned char *)(v5 + 28) = *(unsigned char *)(a1 + 3636);
  *(unsigned char *)(v5 + 29) = *(unsigned char *)(a1 + 3637);
  *(unsigned char *)(v5 + 30) = *(unsigned char *)(a1 + 3638);
  *(unsigned char *)(v5 + 31) = *(unsigned char *)(a1 + 3639);
  *(unsigned char *)(v5 + 32) = *(unsigned char *)(a1 + 3640);
  *(unsigned char *)(v5 + 33) = *(unsigned char *)(a1 + 3641);
  *(unsigned char *)(v5 + 34) = *(unsigned char *)(a1 + 3642);
  *(unsigned char *)(v5 + 35) = *(unsigned char *)(a1 + 3643);
  *(unsigned char *)(v5 + 36) = *(unsigned char *)(a1 + 3644);
  *(unsigned char *)(v5 + 37) = *(unsigned char *)(a1 + 3645);
  *(unsigned char *)(v5 + 38) = *(unsigned char *)(a1 + 3646);
  *(unsigned char *)(v5 + 39) = *(unsigned char *)(a1 + 3647);
  *(unsigned char *)(v5 + 40) = *(unsigned char *)(a1 + 3648);
  *(unsigned char *)(v5 + 41) = *(unsigned char *)(a1 + 3649);
  *(unsigned char *)(v5 + 42) = *(unsigned char *)(a1 + 3650);
  *(unsigned char *)(v5 + 43) = *(unsigned char *)(a1 + 3651);
  *unint64_t v4 = *(unsigned char *)(a1 + 8144);
  return result;
}

uint64_t getBlobAsExact<jlnm_v100>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlnm");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        long long v15 = (const void *)(v3 + 32);
      }
      else {
        long long v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 8652) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnm", *(void *)(v3 + 64), 8652);
      }
    }
  }
  return 0;
}

double readJLNM_v100_v101<jlnm_v100>(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = (unsigned char *)(a2 + 402488);
  uint64_t v4 = a2 + 346204;
  uint64_t v5 = a2 + 342572;
  uint64_t v6 = (_DWORD *)(a2 + 306276);
  size_t v7 = (_DWORD *)(a2 + 269588);
  BOOL v8 = (_DWORD *)(a2 + 232900);
  int v9 = (_DWORD *)(a2 + 196212);
  BOOL v10 = (_DWORD *)(a2 + 159524);
  BOOL v11 = (_DWORD *)(a2 + 122836);
  uint64_t v12 = (_DWORD *)(a2 + 86148);
  uint64_t v13 = a2 + 49084;
  int v14 = (float32x2_t *)(a2 + 342588);
  float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x3FA0000000000000uLL);
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3F70000000000000uLL);
  uint64_t v17 = v13;
  uint64_t v18 = a1;
  do
  {
    uint64_t v19 = 0;
    uint64_t v20 = v17;
    uint64_t v21 = v14;
    do
    {
      *(unsigned char *)(v20 - 16) = *(unsigned char *)(v18 + v19 + 32);
      v22.i64[0] = *(unsigned __int8 *)(v18 + v19 + 33);
      v22.i64[1] = *(unsigned __int8 *)(v18 + v19 + 34);
      float32x2_t v23 = vcvt_f32_f64(vmulq_f64(vcvtq_f64_u64(v22), v15));
      *(float32x2_t *)(v20 - 12) = v23;
      v23.i8[0] = *(unsigned char *)(v18 + v19 + 35);
      *(float *)(v20 - 4) = (float)v23.u32[0];
      uint64_t v24 = *(void *)(v18 + v19 + 48);
      *(_DWORD *)(v20 + 8) = *(_DWORD *)(v18 + v19 + 56);
      *(void *)uint64_t v20 = v24;
      v20 += 28;
      v22.i64[0] = *(__int16 *)(v18 + v19 + 36);
      v22.i64[1] = *(__int16 *)(v18 + v19 + 38);
      v21[113] = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64((int64x2_t)v22), v16));
      v22.i64[0] = *(__int16 *)(v18 + v19 + 40);
      v22.i64[1] = *(__int16 *)(v18 + v19 + 42);
      *v21++ = vcvt_f32_f64(vmulq_f64(vcvtq_f64_s64((int64x2_t)v22), v16));
      v19 += 36;
    }
    while (v19 != 504);
    ++v2;
    v14 += 14;
    v18 += 504;
    v17 += 36688;
  }
  while (v2 != 8);
  int v25 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(v5 + 1816) = *(_DWORD *)(a1 + 4);
  *(unsigned char *)(v5 + 1820) = *(unsigned char *)(a1 + 12);
  *(_DWORD *)(v5 + 912) = v25;
  *(unsigned char *)(v5 + 916) = *(unsigned char *)(a1 + 13);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)(a1 + 16);
  int v26 = *(_DWORD *)(a1 + 4064);
  *(_DWORD *)(v13 + 376) = v26;
  _DWORD *v12 = v26;
  *BOOL v11 = v26;
  *BOOL v10 = v26;
  _DWORD *v9 = v26;
  *BOOL v8 = v26;
  _DWORD *v7 = v26;
  _DWORD *v6 = v26;
  double result = *(double *)(a1 + 4100);
  *(double *)uint64_t v4 = result;
  *(_WORD *)(v4 + 8) = *(_WORD *)(a1 + 4108);
  *(unsigned char *)(v4 + 12) = *(unsigned char *)(a1 + 4068);
  *(unsigned char *)(v4 + 13) = *(unsigned char *)(a1 + 4069);
  *(unsigned char *)(v4 + 14) = *(unsigned char *)(a1 + 4070);
  *(unsigned char *)(v4 + 15) = *(unsigned char *)(a1 + 4071);
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(a1 + 4072);
  *(unsigned char *)(v4 + 17) = *(unsigned char *)(a1 + 4073);
  *(unsigned char *)(v4 + 18) = *(unsigned char *)(a1 + 4074);
  *(unsigned char *)(v4 + 19) = *(unsigned char *)(a1 + 4075);
  *(unsigned char *)(v4 + 20) = *(unsigned char *)(a1 + 4076);
  *(unsigned char *)(v4 + 21) = *(unsigned char *)(a1 + 4077);
  *(unsigned char *)(v4 + 22) = *(unsigned char *)(a1 + 4078);
  *(unsigned char *)(v4 + 23) = *(unsigned char *)(a1 + 4079);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)(a1 + 4080);
  *(unsigned char *)(v4 + 25) = *(unsigned char *)(a1 + 4081);
  *(unsigned char *)(v4 + 26) = *(unsigned char *)(a1 + 4082);
  *(unsigned char *)(v4 + 27) = *(unsigned char *)(a1 + 4083);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(a1 + 4084);
  *(unsigned char *)(v4 + 29) = *(unsigned char *)(a1 + 4085);
  *(unsigned char *)(v4 + 30) = *(unsigned char *)(a1 + 4086);
  *(unsigned char *)(v4 + 31) = *(unsigned char *)(a1 + 4087);
  *(unsigned char *)(v4 + 32) = *(unsigned char *)(a1 + 4088);
  *(unsigned char *)(v4 + 33) = *(unsigned char *)(a1 + 4089);
  *(unsigned char *)(v4 + 34) = *(unsigned char *)(a1 + 4090);
  *(unsigned char *)(v4 + 35) = *(unsigned char *)(a1 + 4091);
  *(unsigned char *)(v4 + 36) = *(unsigned char *)(a1 + 4092);
  *(unsigned char *)(v4 + 37) = *(unsigned char *)(a1 + 4093);
  *(unsigned char *)(v4 + 38) = *(unsigned char *)(a1 + 4094);
  *(unsigned char *)(v4 + 39) = *(unsigned char *)(a1 + 4095);
  *(unsigned char *)(v4 + 40) = *(unsigned char *)(a1 + 4096);
  *(unsigned char *)(v4 + 41) = *(unsigned char *)(a1 + 4097);
  *(unsigned char *)(v4 + 42) = *(unsigned char *)(a1 + 4098);
  *(unsigned char *)(v4 + 43) = *(unsigned char *)(a1 + 4099);
  unsigned char *v3 = *(unsigned char *)(a1 + 8636);
  return result;
}

uint64_t getBlobAsExact<jlsk_v102>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlsk");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        float64x2_t v15 = (const void *)(v3 + 32);
      }
      else {
        float64x2_t v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 18080) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlsk", *(void *)(v3 + 64), 18080);
      }
    }
  }
  return 0;
}

uint64_t getBlobAsExact<jlsk_v101>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlsk");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        float64x2_t v15 = (const void *)(v3 + 32);
      }
      else {
        float64x2_t v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 17424) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlsk", *(void *)(v3 + 64), 17424);
      }
    }
  }
  return 0;
}

uint64_t getBlobAsExact<jlsk_v100>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlsk");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        float64x2_t v15 = (const void *)(v3 + 32);
      }
      else {
        float64x2_t v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 18689) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlsk", *(void *)(v3 + 64), 18689);
      }
    }
  }
  return 0;
}

uint64_t getBlobAsExact<jlnv_v100>(uint64_t a1)
{
  char v22 = 4;
  strcpy((char *)__s2, "jlnv");
  uint64_t v1 = a1 + 8;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = a1 + 8;
    do
    {
      unint64_t v4 = *(unsigned __int8 *)(v2 + 55);
      int v5 = (char)v4;
      if ((v4 & 0x80u) != 0) {
        unint64_t v4 = *(void *)(v2 + 40);
      }
      if (v5 >= 0) {
        uint64_t v6 = (const void *)(v2 + 32);
      }
      else {
        uint64_t v6 = *(const void **)(v2 + 32);
      }
      if (v4 >= 4) {
        size_t v7 = 4;
      }
      else {
        size_t v7 = v4;
      }
      BOOL v8 = v4 < 4;
      int v9 = memcmp(v6, __s2, v7);
      BOOL v10 = v9 < 0;
      if (!v9) {
        BOOL v10 = v8;
      }
      BOOL v11 = !v10;
      if (v10) {
        uint64_t v12 = (uint64_t *)(v2 + 8);
      }
      else {
        uint64_t v12 = (uint64_t *)v2;
      }
      if (v11) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = *v12;
    }
    while (*v12);
    if (v3 != v1)
    {
      unint64_t v13 = *(unsigned __int8 *)(v3 + 55);
      int v14 = (char)v13;
      if ((v13 & 0x80u) != 0) {
        unint64_t v13 = *(void *)(v3 + 40);
      }
      if (v14 >= 0) {
        float64x2_t v15 = (const void *)(v3 + 32);
      }
      else {
        float64x2_t v15 = *(const void **)(v3 + 32);
      }
      if (v13 >= 4) {
        size_t v16 = 4;
      }
      else {
        size_t v16 = v13;
      }
      BOOL v17 = v13 > 4;
      int v18 = memcmp(__s2, v15, v16);
      BOOL v19 = v18 < 0;
      if (!v18) {
        BOOL v19 = v17;
      }
      if (!v19 && v3 != v1)
      {
        if (*(void *)(v3 + 64) == 33672) {
          operator new();
        }
        peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)", "jlnv", *(void *)(v3 + 64), 33672);
      }
    }
  }
  return 0;
}

uint64_t readJLIN(uint64_t a1, uint64_t a2)
{
  int v27 = 0;
  BlobVersiouint64_t n = getBlobVersion(a1, "jlin", &v27, 1);
  uint64_t result = 0;
  if (BlobVersion)
  {
    int v6 = v27;
    *(unsigned char *)(a2 + 402526) = v27;
    if (v6 == 100)
    {
      char v29 = 4;
      strcpy((char *)__s2, "jlin");
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v7 = a1 + 8;
      uint64_t v8 = v9;
      if (v9)
      {
        uint64_t v10 = v7;
        do
        {
          unint64_t v11 = *(unsigned __int8 *)(v8 + 55);
          int v12 = (char)v11;
          if ((v11 & 0x80u) != 0) {
            unint64_t v11 = *(void *)(v8 + 40);
          }
          if (v12 >= 0) {
            unint64_t v13 = (const void *)(v8 + 32);
          }
          else {
            unint64_t v13 = *(const void **)(v8 + 32);
          }
          if (v11 >= 4) {
            size_t v14 = 4;
          }
          else {
            size_t v14 = v11;
          }
          BOOL v15 = v11 < 4;
          int v16 = memcmp(v13, __s2, v14);
          BOOL v17 = v16 < 0;
          if (!v16) {
            BOOL v17 = v15;
          }
          BOOL v18 = !v17;
          if (v17) {
            BOOL v19 = (uint64_t *)(v8 + 8);
          }
          else {
            BOOL v19 = (uint64_t *)v8;
          }
          if (v18) {
            uint64_t v10 = v8;
          }
          uint64_t v8 = *v19;
        }
        while (*v19);
        if (v10 != v7)
        {
          unint64_t v20 = *(unsigned __int8 *)(v10 + 55);
          int v21 = (char)v20;
          if ((v20 & 0x80u) != 0) {
            unint64_t v20 = *(void *)(v10 + 40);
          }
          if (v21 >= 0) {
            char v22 = (const void *)(v10 + 32);
          }
          else {
            char v22 = *(const void **)(v10 + 32);
          }
          if (v20 >= 4) {
            size_t v23 = 4;
          }
          else {
            size_t v23 = v20;
          }
          BOOL v24 = v20 > 4;
          int v25 = memcmp(__s2, v22, v23);
          BOOL v26 = v25 < 0;
          if (!v25) {
            BOOL v26 = v24;
          }
          if (!v26 && v10 != v7)
          {
            if (*(void *)(v10 + 64) == 4172) {
              operator new();
            }
            peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)");
          }
        }
      }
    }
    else
    {
      peridot_depth_log("jlin: unsupported version %d");
    }
    return 0;
  }
  return result;
}

uint64_t readJLEX(uint64_t a1, uint64_t a2)
{
  int v67 = 0;
  BlobVersiouint64_t n = getBlobVersion(a1, "jlex", &v67, 1);
  uint64_t result = 0;
  if (BlobVersion)
  {
    int v6 = v67;
    *(unsigned char *)(a2 + 402527) = v67;
    switch(v6)
    {
      case 'd':
        char v69 = 4;
        strcpy((char *)__s2, "jlex");
        uint64_t v29 = *(void *)(a1 + 8);
        uint64_t v27 = a1 + 8;
        uint64_t v28 = v29;
        if (!v29) {
          return 0;
        }
        uint64_t v30 = v27;
        do
        {
          unint64_t v31 = *(unsigned __int8 *)(v28 + 55);
          int v32 = (char)v31;
          if ((v31 & 0x80u) != 0) {
            unint64_t v31 = *(void *)(v28 + 40);
          }
          if (v32 >= 0) {
            uint64_t v33 = (const void *)(v28 + 32);
          }
          else {
            uint64_t v33 = *(const void **)(v28 + 32);
          }
          if (v31 >= 4) {
            size_t v34 = 4;
          }
          else {
            size_t v34 = v31;
          }
          BOOL v35 = v31 < 4;
          int v36 = memcmp(v33, __s2, v34);
          BOOL v37 = v36 < 0;
          if (!v36) {
            BOOL v37 = v35;
          }
          BOOL v38 = !v37;
          if (v37) {
            long long v39 = (uint64_t *)(v28 + 8);
          }
          else {
            long long v39 = (uint64_t *)v28;
          }
          if (v38) {
            uint64_t v30 = v28;
          }
          uint64_t v28 = *v39;
        }
        while (*v39);
        if (v30 == v27) {
          return 0;
        }
        unint64_t v40 = *(unsigned __int8 *)(v30 + 55);
        int v41 = (char)v40;
        if ((v40 & 0x80u) != 0) {
          unint64_t v40 = *(void *)(v30 + 40);
        }
        if (v41 >= 0) {
          unsigned int v42 = (const void *)(v30 + 32);
        }
        else {
          unsigned int v42 = *(const void **)(v30 + 32);
        }
        if (v40 >= 4) {
          size_t v43 = 4;
        }
        else {
          size_t v43 = v40;
        }
        BOOL v44 = v40 > 4;
        int v45 = memcmp(__s2, v42, v43);
        BOOL v46 = v45 < 0;
        if (!v45) {
          BOOL v46 = v44;
        }
        if (v46 || v30 == v27) {
          return 0;
        }
        if (*(void *)(v30 + 64) == 116) {
          operator new();
        }
        break;
      case 'e':
        char v69 = 4;
        strcpy((char *)__s2, "jlex");
        uint64_t v49 = *(void *)(a1 + 8);
        uint64_t v47 = a1 + 8;
        uint64_t v48 = v49;
        if (!v49) {
          return 0;
        }
        uint64_t v50 = v47;
        do
        {
          unint64_t v51 = *(unsigned __int8 *)(v48 + 55);
          int v52 = (char)v51;
          if ((v51 & 0x80u) != 0) {
            unint64_t v51 = *(void *)(v48 + 40);
          }
          if (v52 >= 0) {
            long long v53 = (const void *)(v48 + 32);
          }
          else {
            long long v53 = *(const void **)(v48 + 32);
          }
          if (v51 >= 4) {
            size_t v54 = 4;
          }
          else {
            size_t v54 = v51;
          }
          BOOL v55 = v51 < 4;
          int v56 = memcmp(v53, __s2, v54);
          BOOL v57 = v56 < 0;
          if (!v56) {
            BOOL v57 = v55;
          }
          BOOL v58 = !v57;
          if (v57) {
            float v59 = (uint64_t *)(v48 + 8);
          }
          else {
            float v59 = (uint64_t *)v48;
          }
          if (v58) {
            uint64_t v50 = v48;
          }
          uint64_t v48 = *v59;
        }
        while (*v59);
        if (v50 == v47) {
          return 0;
        }
        unint64_t v60 = *(unsigned __int8 *)(v50 + 55);
        int v61 = (char)v60;
        if ((v60 & 0x80u) != 0) {
          unint64_t v60 = *(void *)(v50 + 40);
        }
        if (v61 >= 0) {
          long long v62 = (const void *)(v50 + 32);
        }
        else {
          long long v62 = *(const void **)(v50 + 32);
        }
        if (v60 >= 4) {
          size_t v63 = 4;
        }
        else {
          size_t v63 = v60;
        }
        BOOL v64 = v60 > 4;
        int v65 = memcmp(__s2, v62, v63);
        BOOL v66 = v65 < 0;
        if (!v65) {
          BOOL v66 = v64;
        }
        if (v66 || v50 == v47) {
          return 0;
        }
        if (*(void *)(v50 + 64) == 116) {
          operator new();
        }
        break;
      case 'f':
        char v69 = 4;
        strcpy((char *)__s2, "jlex");
        uint64_t v9 = *(void *)(a1 + 8);
        uint64_t v7 = a1 + 8;
        uint64_t v8 = v9;
        if (!v9) {
          return 0;
        }
        uint64_t v10 = v7;
        do
        {
          unint64_t v11 = *(unsigned __int8 *)(v8 + 55);
          int v12 = (char)v11;
          if ((v11 & 0x80u) != 0) {
            unint64_t v11 = *(void *)(v8 + 40);
          }
          if (v12 >= 0) {
            unint64_t v13 = (const void *)(v8 + 32);
          }
          else {
            unint64_t v13 = *(const void **)(v8 + 32);
          }
          if (v11 >= 4) {
            size_t v14 = 4;
          }
          else {
            size_t v14 = v11;
          }
          BOOL v15 = v11 < 4;
          int v16 = memcmp(v13, __s2, v14);
          BOOL v17 = v16 < 0;
          if (!v16) {
            BOOL v17 = v15;
          }
          BOOL v18 = !v17;
          if (v17) {
            BOOL v19 = (uint64_t *)(v8 + 8);
          }
          else {
            BOOL v19 = (uint64_t *)v8;
          }
          if (v18) {
            uint64_t v10 = v8;
          }
          uint64_t v8 = *v19;
        }
        while (*v19);
        if (v10 == v7) {
          return 0;
        }
        unint64_t v20 = *(unsigned __int8 *)(v10 + 55);
        int v21 = (char)v20;
        if ((v20 & 0x80u) != 0) {
          unint64_t v20 = *(void *)(v10 + 40);
        }
        char v22 = v21 >= 0 ? (const void *)(v10 + 32) : *(const void **)(v10 + 32);
        size_t v23 = v20 >= 4 ? 4 : v20;
        BOOL v24 = v20 > 4;
        int v25 = memcmp(__s2, v22, v23);
        BOOL v26 = v25 < 0;
        if (!v25) {
          BOOL v26 = v24;
        }
        if (v26 || v10 == v7) {
          return 0;
        }
        if (*(void *)(v10 + 64) == 116) {
          operator new();
        }
        break;
      default:
        peridot_depth_log("jlex: unsupported version %d");
        return 0;
    }
    peridot_depth_log("%s: blob of wrong size (%lu bytes - expected it to be %lu)");
    return 0;
  }
  return result;
}

__n128 bumpPeridotCalibOneVersion<peridot::CalibHistory::v7::_PeridotCalib,peridot::CalibHistory::v8::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (_OWORD *)(a2 + 342572);
  int v5 = (_DWORD *)(a2 + 49468);
  *(void *)a2 = 8;
  long long v6 = *(_OWORD *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 8) = v6;
  long long v8 = *(_OWORD *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v10;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  long long v11 = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a2 + 36396) = *(_OWORD *)(a1 + 108);
  *(_OWORD *)(a2 + 36412) = v11;
  *(_OWORD *)(a2 + 36428) = *(_OWORD *)(a1 + 140);
  memcpy((void *)(a2 + 36444), (const void *)(a1 + 156), 0x3150uLL);
  uint64_t v12 = 0;
  uint64_t v13 = a1 + 12780;
  uint64_t v14 = a2 + 49068;
  uint64_t v15 = a1 + 13176;
  do
  {
    uint64_t v16 = 0;
    uint64_t v17 = v13 + 36684 * v12;
    uint64_t v18 = v14 + 36688 * v12;
    *(unsigned char *)uint64_t v18 = *(unsigned char *)v17;
    *(float32x2_t *)(v18 + 4) = vmul_f32(*(float32x2_t *)(v17 + 4), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 12) = *(_OWORD *)(v17 + 12);
    *(unsigned char *)(v18 + 28) = *(unsigned char *)(v17 + 28);
    *(float32x2_t *)(v18 + 32) = vmul_f32(*(float32x2_t *)(v17 + 32), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v17 + 40);
    *(unsigned char *)(v18 + 56) = *(unsigned char *)(v17 + 56);
    *(float32x2_t *)(v18 + 60) = vmul_f32(*(float32x2_t *)(v17 + 60), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 68) = *(_OWORD *)(v17 + 68);
    *(unsigned char *)(v18 + 84) = *(unsigned char *)(v17 + 84);
    *(float32x2_t *)(v18 + 88) = vmul_f32(*(float32x2_t *)(v17 + 88), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 96) = *(_OWORD *)(v17 + 96);
    *(unsigned char *)(v18 + 112) = *(unsigned char *)(v17 + 112);
    *(float32x2_t *)(v18 + 116) = vmul_f32(*(float32x2_t *)(v17 + 116), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 124) = *(_OWORD *)(v17 + 124);
    *(unsigned char *)(v18 + 140) = *(unsigned char *)(v17 + 140);
    *(float32x2_t *)(v18 + 144) = vmul_f32(*(float32x2_t *)(v17 + 144), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 152) = *(_OWORD *)(v17 + 152);
    *(unsigned char *)(v18 + 168) = *(unsigned char *)(v17 + 168);
    *(float32x2_t *)(v18 + 172) = vmul_f32(*(float32x2_t *)(v17 + 172), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 180) = *(_OWORD *)(v17 + 180);
    *(unsigned char *)(v18 + 196) = *(unsigned char *)(v17 + 196);
    *(float32x2_t *)(v18 + 200) = vmul_f32(*(float32x2_t *)(v17 + 200), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 208) = *(_OWORD *)(v17 + 208);
    *(unsigned char *)(v18 + 224) = *(unsigned char *)(v17 + 224);
    *(float32x2_t *)(v18 + 228) = vmul_f32(*(float32x2_t *)(v17 + 228), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 236) = *(_OWORD *)(v17 + 236);
    char v19 = *(unsigned char *)(v17 + 252);
    v17 += 252;
    *(unsigned char *)(v18 + 252) = v19;
    v18 += 252;
    *(unsigned char *)(v18 + 28) = *(unsigned char *)(v17 + 28);
    *(unsigned char *)(v18 + 56) = *(unsigned char *)(v17 + 56);
    *(unsigned char *)(v18 + 84) = *(unsigned char *)(v17 + 84);
    *(unsigned char *)(v18 + 112) = *(unsigned char *)(v17 + 112);
    *(float32x2_t *)(v18 + 4) = vmul_f32(*(float32x2_t *)(v17 + 4), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 12) = *(_OWORD *)(v17 + 12);
    *(float32x2_t *)(v18 + 32) = vmul_f32(*(float32x2_t *)(v17 + 32), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 40) = *(_OWORD *)(v17 + 40);
    *(float32x2_t *)(v18 + 60) = vmul_f32(*(float32x2_t *)(v17 + 60), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 68) = *(_OWORD *)(v17 + 68);
    *(float32x2_t *)(v18 + 88) = vmul_f32(*(float32x2_t *)(v17 + 88), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 96) = *(_OWORD *)(v17 + 96);
    *(float32x2_t *)(v18 + 116) = vmul_f32(*(float32x2_t *)(v17 + 116), (float32x2_t)0x3D0000003D000000);
    *(_OWORD *)(v18 + 124) = *(_OWORD *)(v17 + 124);
    uint64_t v20 = v15;
    int v21 = v5;
    do
    {
      uint64_t v22 = 0;
      size_t v23 = v21;
      do
      {
        _DWORD *v23 = *(_DWORD *)(v20 + v22);
        v22 += 4;
        v23 += 108;
      }
      while (v22 != 336);
      ++v16;
      ++v21;
      v20 += 336;
    }
    while (v16 != 108);
    *(_DWORD *)(v14 + 36688 * v12 + 392) = *(_DWORD *)(v13 + 36684 * v12 + 392);
    ++v12;
    v5 += 9172;
    v15 += 36684;
  }
  while (v12 != 8);
  *unint64_t v4 = *(_OWORD *)(a1 + 306252);
  memcpy((void *)(a2 + 342588), (const void *)(a1 + 306268), 0x710uLL);
  memcpy((void *)(a2 + 344396), (const void *)(a1 + 308076), 0x710uLL);
  long long v24 = *(_OWORD *)(a1 + 309912);
  long long v25 = *(_OWORD *)(a1 + 309900);
  *(_OWORD *)(a2 + 346204) = *(_OWORD *)(a1 + 309884);
  *(_OWORD *)(a2 + 346220) = v25;
  *(_OWORD *)(a2 + 346232) = v24;
  memcpy((void *)(a2 + 346248), (const void *)(a1 + 309928), 0x46A4uLL);
  memcpy((void *)(a2 + 364332), (const void *)(a1 + 328012), 0x8380uLL);
  memcpy((void *)(a2 + 398000), (const void *)(a1 + 361680), 0x1038uLL);
  long long v26 = *(_OWORD *)(a1 + 365848);
  *(_OWORD *)(a2 + 402152) = *(_OWORD *)(a1 + 365832);
  *(_OWORD *)(a2 + 402168) = v26;
  long long v27 = *(_OWORD *)(a1 + 365864);
  long long v28 = *(_OWORD *)(a1 + 365880);
  long long v29 = *(_OWORD *)(a1 + 365912);
  *(_OWORD *)(a2 + 402216) = *(_OWORD *)(a1 + 365896);
  *(_OWORD *)(a2 + 402232) = v29;
  *(_OWORD *)(a2 + 402184) = v27;
  *(_OWORD *)(a2 + 402200) = v28;
  long long v30 = *(_OWORD *)(a1 + 365944);
  *(_OWORD *)(a2 + 402248) = *(_OWORD *)(a1 + 365928);
  *(_OWORD *)(a2 + 402264) = v30;
  long long v31 = *(_OWORD *)(a1 + 366008);
  long long v33 = *(_OWORD *)(a1 + 365960);
  long long v32 = *(_OWORD *)(a1 + 365976);
  *(_OWORD *)(a2 + 402312) = *(_OWORD *)(a1 + 365992);
  *(_OWORD *)(a2 + 402328) = v31;
  *(_OWORD *)(a2 + 402280) = v33;
  *(_OWORD *)(a2 + 402296) = v32;
  long long v35 = *(_OWORD *)(a1 + 366136);
  long long v34 = *(_OWORD *)(a1 + 366152);
  long long v36 = *(_OWORD *)(a1 + 366120);
  *(void *)(a2 + 402488) = *(void *)(a1 + 366168);
  *(_OWORD *)(a2 + 402456) = v35;
  *(_OWORD *)(a2 + 402472) = v34;
  *(_OWORD *)(a2 + 402440) = v36;
  long long v38 = *(_OWORD *)(a1 + 366056);
  long long v37 = *(_OWORD *)(a1 + 366072);
  long long v39 = *(_OWORD *)(a1 + 366104);
  *(_OWORD *)(a2 + 402408) = *(_OWORD *)(a1 + 366088);
  *(_OWORD *)(a2 + 402424) = v39;
  *(_OWORD *)(a2 + 402376) = v38;
  *(_OWORD *)(a2 + 402392) = v37;
  __n128 result = *(__n128 *)(a1 + 366024);
  long long v41 = *(_OWORD *)(a1 + 366040);
  *(__n128 *)(a2 + 402344) = result;
  *(_OWORD *)(a2 + 402360) = v41;
  return result;
}

__n128 bumpPeridotCalibOneVersion<peridot::CalibHistory::v6::_PeridotCalib,peridot::CalibHistory::v7::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (_DWORD *)(a2 + 327992);
  uint64_t v5 = a1 + 323028;
  *(void *)a2 = 7;
  long long v6 = *(_OWORD *)(a1 + 8);
  long long v7 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v7;
  *(_OWORD *)(a2 + 8) = v6;
  long long v8 = *(_OWORD *)(a1 + 56);
  long long v9 = *(_OWORD *)(a1 + 72);
  long long v10 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v10;
  *(_OWORD *)(a2 + 72) = v9;
  *(_OWORD *)(a2 + 56) = v8;
  long long v11 = *(_OWORD *)(a1 + 108);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a2 + 108) = v11;
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 140);
  long long v12 = *(_OWORD *)(a1 + 236);
  long long v13 = *(_OWORD *)(a1 + 252);
  long long v14 = *(_OWORD *)(a1 + 268);
  *(_OWORD *)(a2 + 220) = *(_OWORD *)(a1 + 220);
  *(_OWORD *)(a2 + 268) = v14;
  *(_OWORD *)(a2 + 252) = v13;
  *(_OWORD *)(a2 + 236) = v12;
  long long v15 = *(_OWORD *)(a1 + 316);
  long long v16 = *(_OWORD *)(a1 + 332);
  long long v17 = *(_OWORD *)(a1 + 300);
  *(_OWORD *)(a2 + 284) = *(_OWORD *)(a1 + 284);
  *(_OWORD *)(a2 + 300) = v17;
  *(_OWORD *)(a2 + 316) = v15;
  *(_OWORD *)(a2 + 332) = v16;
  long long v18 = *(_OWORD *)(a1 + 380);
  long long v19 = *(_OWORD *)(a1 + 396);
  long long v20 = *(_OWORD *)(a1 + 364);
  *(_OWORD *)(a2 + 348) = *(_OWORD *)(a1 + 348);
  *(_OWORD *)(a2 + 364) = v20;
  *(_OWORD *)(a2 + 380) = v18;
  *(_OWORD *)(a2 + 396) = v19;
  long long v21 = *(_OWORD *)(a1 + 156);
  long long v22 = *(_OWORD *)(a1 + 172);
  long long v23 = *(_OWORD *)(a1 + 188);
  *(_OWORD *)(a2 + 204) = *(_OWORD *)(a1 + 204);
  *(_OWORD *)(a2 + 188) = v23;
  *(_OWORD *)(a2 + 172) = v22;
  *(_OWORD *)(a2 + 156) = v21;
  long long v24 = *(_OWORD *)(a1 + 412);
  long long v25 = *(_OWORD *)(a1 + 428);
  long long v26 = *(_OWORD *)(a1 + 460);
  *(_OWORD *)(a2 + 444) = *(_OWORD *)(a1 + 444);
  *(_OWORD *)(a2 + 460) = v26;
  *(_OWORD *)(a2 + 412) = v24;
  *(_OWORD *)(a2 + 428) = v25;
  long long v27 = *(_OWORD *)(a1 + 476);
  long long v28 = *(_OWORD *)(a1 + 492);
  long long v29 = *(_OWORD *)(a1 + 524);
  *(_OWORD *)(a2 + 508) = *(_OWORD *)(a1 + 508);
  *(_OWORD *)(a2 + 524) = v29;
  *(_OWORD *)(a2 + 476) = v27;
  *(_OWORD *)(a2 + 492) = v28;
  long long v30 = *(_OWORD *)(a1 + 540);
  long long v31 = *(_OWORD *)(a1 + 556);
  long long v32 = *(_OWORD *)(a1 + 588);
  *(_OWORD *)(a2 + 572) = *(_OWORD *)(a1 + 572);
  *(_OWORD *)(a2 + 588) = v32;
  *(_OWORD *)(a2 + 540) = v30;
  *(_OWORD *)(a2 + 556) = v31;
  long long v33 = *(_OWORD *)(a1 + 604);
  long long v34 = *(_OWORD *)(a1 + 636);
  long long v35 = *(_OWORD *)(a1 + 652);
  *(_OWORD *)(a2 + 620) = *(_OWORD *)(a1 + 620);
  *(_OWORD *)(a2 + 636) = v34;
  *(_OWORD *)(a2 + 604) = v33;
  *(_OWORD *)(a2 + 876) = 0u;
  *(_OWORD *)(a2 + 892) = 0u;
  *(_OWORD *)(a2 + 844) = 0u;
  *(_OWORD *)(a2 + 860) = 0u;
  *(_OWORD *)(a2 + 812) = 0u;
  *(_OWORD *)(a2 + 828) = 0u;
  *(_OWORD *)(a2 + 780) = 0u;
  *(_OWORD *)(a2 + 796) = 0u;
  *(_OWORD *)(a2 + 748) = 0u;
  *(_OWORD *)(a2 + 764) = 0u;
  *(_OWORD *)(a2 + 716) = 0u;
  *(_OWORD *)(a2 + 732) = 0u;
  *(_OWORD *)(a2 + 684) = 0u;
  *(_OWORD *)(a2 + 700) = 0u;
  *(_OWORD *)(a2 + 652) = v35;
  *(_OWORD *)(a2 + 668) = 0u;
  *(_OWORD *)(a2 + 908) = 0u;
  long long v36 = *(_OWORD *)(a1 + 668);
  *(_DWORD *)(a2 + 940) = *(_DWORD *)(a1 + 684);
  *(_OWORD *)(a2 + 924) = v36;
  long long v37 = *(_OWORD *)(a1 + 784);
  long long v39 = *(_OWORD *)(a1 + 752);
  long long v38 = *(_OWORD *)(a1 + 768);
  *(_OWORD *)(a2 + 1056) = *(_OWORD *)(a1 + 800);
  *(_OWORD *)(a2 + 1040) = v37;
  *(_OWORD *)(a2 + 1008) = v39;
  *(_OWORD *)(a2 + 1024) = v38;
  long long v40 = *(_OWORD *)(a1 + 848);
  long long v41 = *(_OWORD *)(a1 + 864);
  long long v42 = *(_OWORD *)(a1 + 832);
  *(_OWORD *)(a2 + 1072) = *(_OWORD *)(a1 + 816);
  *(_OWORD *)(a2 + 1120) = v41;
  *(_OWORD *)(a2 + 1104) = v40;
  *(_OWORD *)(a2 + 1088) = v42;
  long long v43 = *(_OWORD *)(a1 + 912);
  long long v44 = *(_OWORD *)(a1 + 928);
  long long v45 = *(_OWORD *)(a1 + 896);
  *(_OWORD *)(a2 + 1136) = *(_OWORD *)(a1 + 880);
  *(_OWORD *)(a2 + 1184) = v44;
  *(_OWORD *)(a2 + 1168) = v43;
  *(_OWORD *)(a2 + 1152) = v45;
  long long v46 = *(_OWORD *)(a1 + 688);
  long long v47 = *(_OWORD *)(a1 + 704);
  long long v48 = *(_OWORD *)(a1 + 736);
  *(_OWORD *)(a2 + 976) = *(_OWORD *)(a1 + 720);
  *(_OWORD *)(a2 + 992) = v48;
  *(_OWORD *)(a2 + 944) = v46;
  *(_OWORD *)(a2 + 960) = v47;
  long long v49 = *(_OWORD *)(a1 + 944);
  long long v50 = *(_OWORD *)(a1 + 960);
  long long v51 = *(_OWORD *)(a1 + 976);
  *(_OWORD *)(a2 + 1248) = *(_OWORD *)(a1 + 992);
  *(_OWORD *)(a2 + 1232) = v51;
  *(_OWORD *)(a2 + 1216) = v50;
  *(_OWORD *)(a2 + 1200) = v49;
  long long v52 = *(_OWORD *)(a1 + 1008);
  long long v53 = *(_OWORD *)(a1 + 1024);
  long long v54 = *(_OWORD *)(a1 + 1040);
  *(_OWORD *)(a2 + 1312) = *(_OWORD *)(a1 + 1056);
  *(_OWORD *)(a2 + 1296) = v54;
  *(_OWORD *)(a2 + 1280) = v53;
  *(_OWORD *)(a2 + 1264) = v52;
  long long v55 = *(_OWORD *)(a1 + 1072);
  long long v56 = *(_OWORD *)(a1 + 1088);
  long long v57 = *(_OWORD *)(a1 + 1104);
  *(_OWORD *)(a2 + 1376) = *(_OWORD *)(a1 + 1120);
  *(_OWORD *)(a2 + 1360) = v57;
  *(_OWORD *)(a2 + 1344) = v56;
  *(_OWORD *)(a2 + 1328) = v55;
  long long v58 = *(_OWORD *)(a1 + 1136);
  long long v59 = *(_OWORD *)(a1 + 1152);
  long long v60 = *(_OWORD *)(a1 + 1168);
  *(_OWORD *)(a2 + 1440) = *(_OWORD *)(a1 + 1184);
  *(_OWORD *)(a2 + 1424) = v60;
  *(_OWORD *)(a2 + 1408) = v59;
  *(_OWORD *)(a2 + 1392) = v58;
  *(_OWORD *)(a2 + 1696) = 0u;
  *(_OWORD *)(a2 + 1680) = 0u;
  *(_OWORD *)(a2 + 1664) = 0u;
  *(_OWORD *)(a2 + 1648) = 0u;
  *(_OWORD *)(a2 + 1632) = 0u;
  *(_OWORD *)(a2 + 1616) = 0u;
  *(_OWORD *)(a2 + 1600) = 0u;
  *(_OWORD *)(a2 + 1584) = 0u;
  *(_OWORD *)(a2 + 1568) = 0u;
  *(_OWORD *)(a2 + 1552) = 0u;
  *(_OWORD *)(a2 + 1536) = 0u;
  *(_OWORD *)(a2 + 1520) = 0u;
  *(_OWORD *)(a2 + 1504) = 0u;
  *(_OWORD *)(a2 + 1488) = 0u;
  *(_OWORD *)(a2 + 1472) = 0u;
  *(_OWORD *)(a2 + 1456) = 0u;
  long long v61 = *(_OWORD *)(a1 + 1200);
  *(_DWORD *)(a2 + 1728) = *(_DWORD *)(a1 + 1216);
  *(_OWORD *)(a2 + 1712) = v61;
  long long v62 = *(_OWORD *)(a1 + 1332);
  long long v64 = *(_OWORD *)(a1 + 1284);
  long long v63 = *(_OWORD *)(a1 + 1300);
  *(_OWORD *)(a2 + 1828) = *(_OWORD *)(a1 + 1316);
  *(_OWORD *)(a2 + 1844) = v62;
  *(_OWORD *)(a2 + 1796) = v64;
  *(_OWORD *)(a2 + 1812) = v63;
  long long v65 = *(_OWORD *)(a1 + 1396);
  long long v67 = *(_OWORD *)(a1 + 1348);
  long long v66 = *(_OWORD *)(a1 + 1364);
  *(_OWORD *)(a2 + 1892) = *(_OWORD *)(a1 + 1380);
  *(_OWORD *)(a2 + 1908) = v65;
  *(_OWORD *)(a2 + 1860) = v67;
  *(_OWORD *)(a2 + 1876) = v66;
  long long v68 = *(_OWORD *)(a1 + 1460);
  long long v70 = *(_OWORD *)(a1 + 1412);
  long long v69 = *(_OWORD *)(a1 + 1428);
  *(_OWORD *)(a2 + 1956) = *(_OWORD *)(a1 + 1444);
  *(_OWORD *)(a2 + 1972) = v68;
  *(_OWORD *)(a2 + 1924) = v70;
  *(_OWORD *)(a2 + 1940) = v69;
  long long v71 = *(_OWORD *)(a1 + 1220);
  long long v72 = *(_OWORD *)(a1 + 1236);
  long long v73 = *(_OWORD *)(a1 + 1268);
  *(_OWORD *)(a2 + 1764) = *(_OWORD *)(a1 + 1252);
  *(_OWORD *)(a2 + 1780) = v73;
  *(_OWORD *)(a2 + 1732) = v71;
  *(_OWORD *)(a2 + 1748) = v72;
  long long v74 = *(_OWORD *)(a1 + 1476);
  long long v75 = *(_OWORD *)(a1 + 1492);
  long long v76 = *(_OWORD *)(a1 + 1524);
  *(_OWORD *)(a2 + 2020) = *(_OWORD *)(a1 + 1508);
  *(_OWORD *)(a2 + 2036) = v76;
  *(_OWORD *)(a2 + 1988) = v74;
  *(_OWORD *)(a2 + 2004) = v75;
  long long v77 = *(_OWORD *)(a1 + 1540);
  long long v78 = *(_OWORD *)(a1 + 1556);
  long long v79 = *(_OWORD *)(a1 + 1588);
  *(_OWORD *)(a2 + 2084) = *(_OWORD *)(a1 + 1572);
  *(_OWORD *)(a2 + 2100) = v79;
  *(_OWORD *)(a2 + 2052) = v77;
  *(_OWORD *)(a2 + 2068) = v78;
  long long v80 = *(_OWORD *)(a1 + 1604);
  long long v81 = *(_OWORD *)(a1 + 1620);
  long long v82 = *(_OWORD *)(a1 + 1652);
  *(_OWORD *)(a2 + 2148) = *(_OWORD *)(a1 + 1636);
  *(_OWORD *)(a2 + 2164) = v82;
  *(_OWORD *)(a2 + 2116) = v80;
  *(_OWORD *)(a2 + 2132) = v81;
  long long v83 = *(_OWORD *)(a1 + 1668);
  long long v84 = *(_OWORD *)(a1 + 1684);
  long long v85 = *(_OWORD *)(a1 + 1716);
  *(_OWORD *)(a2 + 2212) = *(_OWORD *)(a1 + 1700);
  *(_OWORD *)(a2 + 2228) = v85;
  *(_OWORD *)(a2 + 2180) = v83;
  *(_OWORD *)(a2 + 2196) = v84;
  *(_OWORD *)(a2 + 2468) = 0u;
  *(_OWORD *)(a2 + 2484) = 0u;
  *(_OWORD *)(a2 + 2436) = 0u;
  *(_OWORD *)(a2 + 2452) = 0u;
  *(_OWORD *)(a2 + 2404) = 0u;
  *(_OWORD *)(a2 + 2420) = 0u;
  *(_OWORD *)(a2 + 2372) = 0u;
  *(_OWORD *)(a2 + 2388) = 0u;
  *(_OWORD *)(a2 + 2340) = 0u;
  *(_OWORD *)(a2 + 2356) = 0u;
  *(_OWORD *)(a2 + 2308) = 0u;
  *(_OWORD *)(a2 + 2324) = 0u;
  *(_OWORD *)(a2 + 2276) = 0u;
  *(_OWORD *)(a2 + 2292) = 0u;
  *(_OWORD *)(a2 + 2244) = 0u;
  *(_OWORD *)(a2 + 2260) = 0u;
  long long v86 = *(_OWORD *)(a1 + 1732);
  *(_DWORD *)(a2 + 2516) = *(_DWORD *)(a1 + 1748);
  *(_OWORD *)(a2 + 2500) = v86;
  long long v87 = *(_OWORD *)(a1 + 1864);
  long long v89 = *(_OWORD *)(a1 + 1816);
  long long v88 = *(_OWORD *)(a1 + 1832);
  *(_OWORD *)(a2 + 2616) = *(_OWORD *)(a1 + 1848);
  *(_OWORD *)(a2 + 2632) = v87;
  *(_OWORD *)(a2 + 2584) = v89;
  *(_OWORD *)(a2 + 2600) = v88;
  long long v90 = *(_OWORD *)(a1 + 1928);
  long long v92 = *(_OWORD *)(a1 + 1880);
  long long v91 = *(_OWORD *)(a1 + 1896);
  *(_OWORD *)(a2 + 2680) = *(_OWORD *)(a1 + 1912);
  *(_OWORD *)(a2 + 2696) = v90;
  *(_OWORD *)(a2 + 2648) = v92;
  *(_OWORD *)(a2 + 2664) = v91;
  long long v93 = *(_OWORD *)(a1 + 1992);
  long long v95 = *(_OWORD *)(a1 + 1944);
  long long v94 = *(_OWORD *)(a1 + 1960);
  *(_OWORD *)(a2 + 2744) = *(_OWORD *)(a1 + 1976);
  *(_OWORD *)(a2 + 2760) = v93;
  *(_OWORD *)(a2 + 2712) = v95;
  *(_OWORD *)(a2 + 2728) = v94;
  long long v96 = *(_OWORD *)(a1 + 1752);
  long long v97 = *(_OWORD *)(a1 + 1768);
  long long v98 = *(_OWORD *)(a1 + 1800);
  *(_OWORD *)(a2 + 2552) = *(_OWORD *)(a1 + 1784);
  *(_OWORD *)(a2 + 2568) = v98;
  *(_OWORD *)(a2 + 2520) = v96;
  *(_OWORD *)(a2 + 2536) = v97;
  long long v99 = *(_OWORD *)(a1 + 2008);
  long long v100 = *(_OWORD *)(a1 + 2024);
  long long v101 = *(_OWORD *)(a1 + 2056);
  *(_OWORD *)(a2 + 2808) = *(_OWORD *)(a1 + 2040);
  *(_OWORD *)(a2 + 2824) = v101;
  *(_OWORD *)(a2 + 2776) = v99;
  *(_OWORD *)(a2 + 2792) = v100;
  long long v102 = *(_OWORD *)(a1 + 2072);
  long long v103 = *(_OWORD *)(a1 + 2088);
  long long v104 = *(_OWORD *)(a1 + 2120);
  *(_OWORD *)(a2 + 2872) = *(_OWORD *)(a1 + 2104);
  *(_OWORD *)(a2 + 2888) = v104;
  *(_OWORD *)(a2 + 2840) = v102;
  *(_OWORD *)(a2 + 2856) = v103;
  long long v105 = *(_OWORD *)(a1 + 2136);
  long long v106 = *(_OWORD *)(a1 + 2152);
  long long v107 = *(_OWORD *)(a1 + 2184);
  *(_OWORD *)(a2 + 2936) = *(_OWORD *)(a1 + 2168);
  *(_OWORD *)(a2 + 2952) = v107;
  *(_OWORD *)(a2 + 2904) = v105;
  *(_OWORD *)(a2 + 2920) = v106;
  long long v108 = *(_OWORD *)(a1 + 2200);
  long long v109 = *(_OWORD *)(a1 + 2216);
  long long v110 = *(_OWORD *)(a1 + 2248);
  *(_OWORD *)(a2 + 3000) = *(_OWORD *)(a1 + 2232);
  *(_OWORD *)(a2 + 3016) = v110;
  *(_OWORD *)(a2 + 2968) = v108;
  *(_OWORD *)(a2 + 2984) = v109;
  *(_OWORD *)(a2 + 3256) = 0u;
  *(_OWORD *)(a2 + 3272) = 0u;
  *(_OWORD *)(a2 + 3224) = 0u;
  *(_OWORD *)(a2 + 3240) = 0u;
  *(_OWORD *)(a2 + 3192) = 0u;
  *(_OWORD *)(a2 + 3208) = 0u;
  *(_OWORD *)(a2 + 3160) = 0u;
  *(_OWORD *)(a2 + 3176) = 0u;
  *(_OWORD *)(a2 + 3128) = 0u;
  *(_OWORD *)(a2 + 3144) = 0u;
  *(_OWORD *)(a2 + 3096) = 0u;
  *(_OWORD *)(a2 + 3112) = 0u;
  *(_OWORD *)(a2 + 3064) = 0u;
  *(_OWORD *)(a2 + 3080) = 0u;
  *(_OWORD *)(a2 + 3032) = 0u;
  *(_OWORD *)(a2 + 3048) = 0u;
  long long v111 = *(_OWORD *)(a1 + 2264);
  *(_DWORD *)(a2 + 3304) = *(_DWORD *)(a1 + 2280);
  *(_OWORD *)(a2 + 3288) = v111;
  long long v112 = *(_OWORD *)(a1 + 2364);
  long long v113 = *(_OWORD *)(a1 + 2380);
  long long v114 = *(_OWORD *)(a1 + 2396);
  *(_OWORD *)(a2 + 3372) = *(_OWORD *)(a1 + 2348);
  *(_OWORD *)(a2 + 3420) = v114;
  *(_OWORD *)(a2 + 3404) = v113;
  *(_OWORD *)(a2 + 3388) = v112;
  long long v115 = *(_OWORD *)(a1 + 2428);
  long long v116 = *(_OWORD *)(a1 + 2444);
  long long v117 = *(_OWORD *)(a1 + 2460);
  *(_OWORD *)(a2 + 3436) = *(_OWORD *)(a1 + 2412);
  *(_OWORD *)(a2 + 3484) = v117;
  *(_OWORD *)(a2 + 3468) = v116;
  *(_OWORD *)(a2 + 3452) = v115;
  long long v118 = *(_OWORD *)(a1 + 2492);
  long long v119 = *(_OWORD *)(a1 + 2508);
  long long v120 = *(_OWORD *)(a1 + 2524);
  *(_OWORD *)(a2 + 3500) = *(_OWORD *)(a1 + 2476);
  *(_OWORD *)(a2 + 3548) = v120;
  *(_OWORD *)(a2 + 3532) = v119;
  *(_OWORD *)(a2 + 3516) = v118;
  long long v121 = *(_OWORD *)(a1 + 2284);
  long long v122 = *(_OWORD *)(a1 + 2300);
  long long v123 = *(_OWORD *)(a1 + 2316);
  *(_OWORD *)(a2 + 3356) = *(_OWORD *)(a1 + 2332);
  *(_OWORD *)(a2 + 3340) = v123;
  *(_OWORD *)(a2 + 3324) = v122;
  *(_OWORD *)(a2 + 3308) = v121;
  long long v124 = *(_OWORD *)(a1 + 2540);
  long long v125 = *(_OWORD *)(a1 + 2556);
  long long v126 = *(_OWORD *)(a1 + 2572);
  *(_OWORD *)(a2 + 3612) = *(_OWORD *)(a1 + 2588);
  *(_OWORD *)(a2 + 3596) = v126;
  *(_OWORD *)(a2 + 3580) = v125;
  *(_OWORD *)(a2 + 3564) = v124;
  long long v127 = *(_OWORD *)(a1 + 2604);
  long long v128 = *(_OWORD *)(a1 + 2620);
  long long v129 = *(_OWORD *)(a1 + 2636);
  *(_OWORD *)(a2 + 3676) = *(_OWORD *)(a1 + 2652);
  *(_OWORD *)(a2 + 3660) = v129;
  *(_OWORD *)(a2 + 3644) = v128;
  *(_OWORD *)(a2 + 3628) = v127;
  long long v130 = *(_OWORD *)(a1 + 2668);
  long long v131 = *(_OWORD *)(a1 + 2684);
  long long v132 = *(_OWORD *)(a1 + 2700);
  *(_OWORD *)(a2 + 3740) = *(_OWORD *)(a1 + 2716);
  *(_OWORD *)(a2 + 3724) = v132;
  *(_OWORD *)(a2 + 3708) = v131;
  *(_OWORD *)(a2 + 3692) = v130;
  long long v133 = *(_OWORD *)(a1 + 2732);
  long long v134 = *(_OWORD *)(a1 + 2748);
  long long v135 = *(_OWORD *)(a1 + 2764);
  *(_OWORD *)(a2 + 3804) = *(_OWORD *)(a1 + 2780);
  *(_OWORD *)(a2 + 3788) = v135;
  *(_OWORD *)(a2 + 3772) = v134;
  *(_OWORD *)(a2 + 3756) = v133;
  *(_OWORD *)(a2 + 4060) = 0u;
  *(_OWORD *)(a2 + 4044) = 0u;
  *(_OWORD *)(a2 + 4028) = 0u;
  *(_OWORD *)(a2 + 4012) = 0u;
  *(_OWORD *)(a2 + 3996) = 0u;
  *(_OWORD *)(a2 + 3980) = 0u;
  *(_OWORD *)(a2 + 3964) = 0u;
  *(_OWORD *)(a2 + 3948) = 0u;
  *(_OWORD *)(a2 + 3932) = 0u;
  *(_OWORD *)(a2 + 3916) = 0u;
  *(_OWORD *)(a2 + 3900) = 0u;
  *(_OWORD *)(a2 + 3884) = 0u;
  *(_OWORD *)(a2 + 3868) = 0u;
  *(_OWORD *)(a2 + 3852) = 0u;
  *(_OWORD *)(a2 + 3836) = 0u;
  *(_OWORD *)(a2 + 3820) = 0u;
  long long v136 = *(_OWORD *)(a1 + 2796);
  *(_DWORD *)(a2 + 4092) = *(_DWORD *)(a1 + 2812);
  *(_OWORD *)(a2 + 4076) = v136;
  long long v137 = *(_OWORD *)(a1 + 2896);
  long long v138 = *(_OWORD *)(a1 + 2912);
  long long v139 = *(_OWORD *)(a1 + 2928);
  *(_OWORD *)(a2 + 4160) = *(_OWORD *)(a1 + 2880);
  *(_OWORD *)(a2 + 4208) = v139;
  *(_OWORD *)(a2 + 4192) = v138;
  *(_OWORD *)(a2 + 4176) = v137;
  long long v140 = *(_OWORD *)(a1 + 2960);
  long long v141 = *(_OWORD *)(a1 + 2976);
  long long v142 = *(_OWORD *)(a1 + 2992);
  *(_OWORD *)(a2 + 4224) = *(_OWORD *)(a1 + 2944);
  *(_OWORD *)(a2 + 4272) = v142;
  *(_OWORD *)(a2 + 4256) = v141;
  *(_OWORD *)(a2 + 4240) = v140;
  long long v143 = *(_OWORD *)(a1 + 3024);
  long long v144 = *(_OWORD *)(a1 + 3040);
  long long v145 = *(_OWORD *)(a1 + 3056);
  *(_OWORD *)(a2 + 4288) = *(_OWORD *)(a1 + 3008);
  *(_OWORD *)(a2 + 4336) = v145;
  *(_OWORD *)(a2 + 4320) = v144;
  *(_OWORD *)(a2 + 4304) = v143;
  long long v146 = *(_OWORD *)(a1 + 2816);
  long long v147 = *(_OWORD *)(a1 + 2832);
  long long v148 = *(_OWORD *)(a1 + 2848);
  *(_OWORD *)(a2 + 4144) = *(_OWORD *)(a1 + 2864);
  *(_OWORD *)(a2 + 4128) = v148;
  *(_OWORD *)(a2 + 4112) = v147;
  *(_OWORD *)(a2 + 4096) = v146;
  long long v149 = *(_OWORD *)(a1 + 3072);
  long long v150 = *(_OWORD *)(a1 + 3088);
  long long v151 = *(_OWORD *)(a1 + 3104);
  *(_OWORD *)(a2 + 4400) = *(_OWORD *)(a1 + 3120);
  *(_OWORD *)(a2 + 4384) = v151;
  *(_OWORD *)(a2 + 4368) = v150;
  *(_OWORD *)(a2 + 4352) = v149;
  long long v152 = *(_OWORD *)(a1 + 3136);
  long long v153 = *(_OWORD *)(a1 + 3152);
  long long v154 = *(_OWORD *)(a1 + 3168);
  *(_OWORD *)(a2 + 4464) = *(_OWORD *)(a1 + 3184);
  *(_OWORD *)(a2 + 4448) = v154;
  *(_OWORD *)(a2 + 4432) = v153;
  *(_OWORD *)(a2 + 4416) = v152;
  long long v155 = *(_OWORD *)(a1 + 3200);
  long long v156 = *(_OWORD *)(a1 + 3216);
  long long v157 = *(_OWORD *)(a1 + 3232);
  *(_OWORD *)(a2 + 4528) = *(_OWORD *)(a1 + 3248);
  *(_OWORD *)(a2 + 4512) = v157;
  *(_OWORD *)(a2 + 4496) = v156;
  *(_OWORD *)(a2 + 4480) = v155;
  long long v158 = *(_OWORD *)(a1 + 3264);
  long long v159 = *(_OWORD *)(a1 + 3280);
  long long v160 = *(_OWORD *)(a1 + 3296);
  *(_OWORD *)(a2 + 4592) = *(_OWORD *)(a1 + 3312);
  *(_OWORD *)(a2 + 4576) = v160;
  *(_OWORD *)(a2 + 4560) = v159;
  *(_OWORD *)(a2 + 4544) = v158;
  *(_OWORD *)(a2 + 4848) = 0u;
  *(_OWORD *)(a2 + 4832) = 0u;
  *(_OWORD *)(a2 + 4816) = 0u;
  *(_OWORD *)(a2 + 4800) = 0u;
  *(_OWORD *)(a2 + 4784) = 0u;
  *(_OWORD *)(a2 + 4768) = 0u;
  *(_OWORD *)(a2 + 4752) = 0u;
  *(_OWORD *)(a2 + 4736) = 0u;
  *(_OWORD *)(a2 + 4720) = 0u;
  *(_OWORD *)(a2 + 4704) = 0u;
  *(_OWORD *)(a2 + 4688) = 0u;
  *(_OWORD *)(a2 + 4672) = 0u;
  *(_OWORD *)(a2 + 4656) = 0u;
  *(_OWORD *)(a2 + 4640) = 0u;
  *(_OWORD *)(a2 + 4624) = 0u;
  *(_OWORD *)(a2 + 4608) = 0u;
  long long v161 = *(_OWORD *)(a1 + 3328);
  *(_DWORD *)(a2 + 4880) = *(_DWORD *)(a1 + 3344);
  *(_OWORD *)(a2 + 4864) = v161;
  long long v162 = *(_OWORD *)(a1 + 3460);
  long long v164 = *(_OWORD *)(a1 + 3412);
  long long v163 = *(_OWORD *)(a1 + 3428);
  *(_OWORD *)(a2 + 4980) = *(_OWORD *)(a1 + 3444);
  *(_OWORD *)(a2 + 4996) = v162;
  *(_OWORD *)(a2 + 4948) = v164;
  *(_OWORD *)(a2 + 4964) = v163;
  long long v165 = *(_OWORD *)(a1 + 3524);
  long long v167 = *(_OWORD *)(a1 + 3476);
  long long v166 = *(_OWORD *)(a1 + 3492);
  *(_OWORD *)(a2 + 5044) = *(_OWORD *)(a1 + 3508);
  *(_OWORD *)(a2 + 5060) = v165;
  *(_OWORD *)(a2 + 5012) = v167;
  *(_OWORD *)(a2 + 5028) = v166;
  long long v168 = *(_OWORD *)(a1 + 3588);
  long long v170 = *(_OWORD *)(a1 + 3540);
  long long v169 = *(_OWORD *)(a1 + 3556);
  *(_OWORD *)(a2 + 5108) = *(_OWORD *)(a1 + 3572);
  *(_OWORD *)(a2 + 5124) = v168;
  *(_OWORD *)(a2 + 5076) = v170;
  *(_OWORD *)(a2 + 5092) = v169;
  long long v171 = *(_OWORD *)(a1 + 3348);
  long long v172 = *(_OWORD *)(a1 + 3364);
  long long v173 = *(_OWORD *)(a1 + 3396);
  *(_OWORD *)(a2 + 4916) = *(_OWORD *)(a1 + 3380);
  *(_OWORD *)(a2 + 4932) = v173;
  *(_OWORD *)(a2 + 4884) = v171;
  *(_OWORD *)(a2 + 4900) = v172;
  long long v174 = *(_OWORD *)(a1 + 3604);
  long long v175 = *(_OWORD *)(a1 + 3620);
  long long v176 = *(_OWORD *)(a1 + 3652);
  *(_OWORD *)(a2 + 5172) = *(_OWORD *)(a1 + 3636);
  *(_OWORD *)(a2 + 5188) = v176;
  *(_OWORD *)(a2 + 5140) = v174;
  *(_OWORD *)(a2 + 5156) = v175;
  long long v177 = *(_OWORD *)(a1 + 3668);
  long long v178 = *(_OWORD *)(a1 + 3684);
  long long v179 = *(_OWORD *)(a1 + 3716);
  *(_OWORD *)(a2 + 5236) = *(_OWORD *)(a1 + 3700);
  *(_OWORD *)(a2 + 5252) = v179;
  *(_OWORD *)(a2 + 5204) = v177;
  *(_OWORD *)(a2 + 5220) = v178;
  long long v180 = *(_OWORD *)(a1 + 3732);
  long long v181 = *(_OWORD *)(a1 + 3748);
  long long v182 = *(_OWORD *)(a1 + 3780);
  *(_OWORD *)(a2 + 5300) = *(_OWORD *)(a1 + 3764);
  *(_OWORD *)(a2 + 5316) = v182;
  *(_OWORD *)(a2 + 5268) = v180;
  *(_OWORD *)(a2 + 5284) = v181;
  long long v183 = *(_OWORD *)(a1 + 3796);
  long long v184 = *(_OWORD *)(a1 + 3812);
  long long v185 = *(_OWORD *)(a1 + 3844);
  *(_OWORD *)(a2 + 5364) = *(_OWORD *)(a1 + 3828);
  *(_OWORD *)(a2 + 5380) = v185;
  *(_OWORD *)(a2 + 5332) = v183;
  *(_OWORD *)(a2 + 5348) = v184;
  *(_OWORD *)(a2 + 5620) = 0u;
  *(_OWORD *)(a2 + 5636) = 0u;
  *(_OWORD *)(a2 + 5588) = 0u;
  *(_OWORD *)(a2 + 5604) = 0u;
  *(_OWORD *)(a2 + 5556) = 0u;
  *(_OWORD *)(a2 + 5572) = 0u;
  *(_OWORD *)(a2 + 5524) = 0u;
  *(_OWORD *)(a2 + 5540) = 0u;
  *(_OWORD *)(a2 + 5492) = 0u;
  *(_OWORD *)(a2 + 5508) = 0u;
  *(_OWORD *)(a2 + 5460) = 0u;
  *(_OWORD *)(a2 + 5476) = 0u;
  *(_OWORD *)(a2 + 5428) = 0u;
  *(_OWORD *)(a2 + 5444) = 0u;
  *(_OWORD *)(a2 + 5396) = 0u;
  *(_OWORD *)(a2 + 5412) = 0u;
  long long v186 = *(_OWORD *)(a1 + 3860);
  *(_DWORD *)(a2 + 5668) = *(_DWORD *)(a1 + 3876);
  *(_OWORD *)(a2 + 5652) = v186;
  long long v187 = *(_OWORD *)(a1 + 3992);
  long long v189 = *(_OWORD *)(a1 + 3944);
  long long v188 = *(_OWORD *)(a1 + 3960);
  *(_OWORD *)(a2 + 5768) = *(_OWORD *)(a1 + 3976);
  *(_OWORD *)(a2 + 5784) = v187;
  *(_OWORD *)(a2 + 5736) = v189;
  *(_OWORD *)(a2 + 5752) = v188;
  long long v190 = *(_OWORD *)(a1 + 4056);
  long long v192 = *(_OWORD *)(a1 + 4008);
  long long v191 = *(_OWORD *)(a1 + 4024);
  *(_OWORD *)(a2 + 5832) = *(_OWORD *)(a1 + 4040);
  *(_OWORD *)(a2 + 5848) = v190;
  *(_OWORD *)(a2 + 5800) = v192;
  *(_OWORD *)(a2 + 5816) = v191;
  long long v193 = *(_OWORD *)(a1 + 4120);
  long long v195 = *(_OWORD *)(a1 + 4072);
  long long v194 = *(_OWORD *)(a1 + 4088);
  *(_OWORD *)(a2 + 5896) = *(_OWORD *)(a1 + 4104);
  *(_OWORD *)(a2 + 5912) = v193;
  *(_OWORD *)(a2 + 5864) = v195;
  *(_OWORD *)(a2 + 5880) = v194;
  long long v196 = *(_OWORD *)(a1 + 3880);
  long long v197 = *(_OWORD *)(a1 + 3896);
  long long v198 = *(_OWORD *)(a1 + 3928);
  *(_OWORD *)(a2 + 5704) = *(_OWORD *)(a1 + 3912);
  *(_OWORD *)(a2 + 5720) = v198;
  *(_OWORD *)(a2 + 5672) = v196;
  *(_OWORD *)(a2 + 5688) = v197;
  long long v199 = *(_OWORD *)(a1 + 4136);
  long long v200 = *(_OWORD *)(a1 + 4152);
  long long v201 = *(_OWORD *)(a1 + 4184);
  *(_OWORD *)(a2 + 5960) = *(_OWORD *)(a1 + 4168);
  *(_OWORD *)(a2 + 5976) = v201;
  *(_OWORD *)(a2 + 5928) = v199;
  *(_OWORD *)(a2 + 5944) = v200;
  long long v202 = *(_OWORD *)(a1 + 4200);
  long long v203 = *(_OWORD *)(a1 + 4216);
  long long v204 = *(_OWORD *)(a1 + 4248);
  *(_OWORD *)(a2 + 6024) = *(_OWORD *)(a1 + 4232);
  *(_OWORD *)(a2 + 6040) = v204;
  *(_OWORD *)(a2 + 5992) = v202;
  *(_OWORD *)(a2 + 6008) = v203;
  long long v205 = *(_OWORD *)(a1 + 4264);
  long long v206 = *(_OWORD *)(a1 + 4280);
  long long v207 = *(_OWORD *)(a1 + 4312);
  *(_OWORD *)(a2 + 6088) = *(_OWORD *)(a1 + 4296);
  *(_OWORD *)(a2 + 6104) = v207;
  *(_OWORD *)(a2 + 6056) = v205;
  *(_OWORD *)(a2 + 6072) = v206;
  long long v208 = *(_OWORD *)(a1 + 4328);
  long long v209 = *(_OWORD *)(a1 + 4344);
  long long v210 = *(_OWORD *)(a1 + 4376);
  *(_OWORD *)(a2 + 6152) = *(_OWORD *)(a1 + 4360);
  *(_OWORD *)(a2 + 6168) = v210;
  *(_OWORD *)(a2 + 6120) = v208;
  *(_OWORD *)(a2 + 6136) = v209;
  *(_OWORD *)(a2 + 6408) = 0u;
  *(_OWORD *)(a2 + 6424) = 0u;
  *(_OWORD *)(a2 + 6376) = 0u;
  *(_OWORD *)(a2 + 6392) = 0u;
  *(_OWORD *)(a2 + 6344) = 0u;
  *(_OWORD *)(a2 + 6360) = 0u;
  *(_OWORD *)(a2 + 6312) = 0u;
  *(_OWORD *)(a2 + 6328) = 0u;
  *(_OWORD *)(a2 + 6280) = 0u;
  *(_OWORD *)(a2 + 6296) = 0u;
  *(_OWORD *)(a2 + 6248) = 0u;
  *(_OWORD *)(a2 + 6264) = 0u;
  *(_OWORD *)(a2 + 6216) = 0u;
  *(_OWORD *)(a2 + 6232) = 0u;
  *(_OWORD *)(a2 + 6184) = 0u;
  *(_OWORD *)(a2 + 6200) = 0u;
  long long v211 = *(_OWORD *)(a1 + 4392);
  *(_DWORD *)(a2 + 6456) = *(_DWORD *)(a1 + 4408);
  *(_OWORD *)(a2 + 6440) = v211;
  long long v212 = *(_OWORD *)(a1 + 4492);
  long long v213 = *(_OWORD *)(a1 + 4508);
  long long v214 = *(_OWORD *)(a1 + 4524);
  *(_OWORD *)(a2 + 6524) = *(_OWORD *)(a1 + 4476);
  *(_OWORD *)(a2 + 6572) = v214;
  *(_OWORD *)(a2 + 6556) = v213;
  *(_OWORD *)(a2 + 6540) = v212;
  long long v215 = *(_OWORD *)(a1 + 4556);
  long long v216 = *(_OWORD *)(a1 + 4572);
  long long v217 = *(_OWORD *)(a1 + 4588);
  *(_OWORD *)(a2 + 6588) = *(_OWORD *)(a1 + 4540);
  *(_OWORD *)(a2 + 6636) = v217;
  *(_OWORD *)(a2 + 6620) = v216;
  *(_OWORD *)(a2 + 6604) = v215;
  long long v218 = *(_OWORD *)(a1 + 4620);
  long long v219 = *(_OWORD *)(a1 + 4636);
  long long v220 = *(_OWORD *)(a1 + 4652);
  *(_OWORD *)(a2 + 6652) = *(_OWORD *)(a1 + 4604);
  *(_OWORD *)(a2 + 6700) = v220;
  *(_OWORD *)(a2 + 6684) = v219;
  *(_OWORD *)(a2 + 6668) = v218;
  long long v221 = *(_OWORD *)(a1 + 4412);
  long long v222 = *(_OWORD *)(a1 + 4428);
  long long v223 = *(_OWORD *)(a1 + 4444);
  *(_OWORD *)(a2 + 6508) = *(_OWORD *)(a1 + 4460);
  *(_OWORD *)(a2 + 6492) = v223;
  *(_OWORD *)(a2 + 6476) = v222;
  *(_OWORD *)(a2 + 6460) = v221;
  long long v224 = *(_OWORD *)(a1 + 4668);
  long long v225 = *(_OWORD *)(a1 + 4684);
  long long v226 = *(_OWORD *)(a1 + 4700);
  *(_OWORD *)(a2 + 6764) = *(_OWORD *)(a1 + 4716);
  *(_OWORD *)(a2 + 6748) = v226;
  *(_OWORD *)(a2 + 6732) = v225;
  *(_OWORD *)(a2 + 6716) = v224;
  long long v227 = *(_OWORD *)(a1 + 4732);
  long long v228 = *(_OWORD *)(a1 + 4748);
  long long v229 = *(_OWORD *)(a1 + 4764);
  *(_OWORD *)(a2 + 6828) = *(_OWORD *)(a1 + 4780);
  *(_OWORD *)(a2 + 6812) = v229;
  *(_OWORD *)(a2 + 6796) = v228;
  *(_OWORD *)(a2 + 6780) = v227;
  long long v230 = *(_OWORD *)(a1 + 4796);
  long long v231 = *(_OWORD *)(a1 + 4812);
  long long v232 = *(_OWORD *)(a1 + 4828);
  *(_OWORD *)(a2 + 6892) = *(_OWORD *)(a1 + 4844);
  *(_OWORD *)(a2 + 6876) = v232;
  *(_OWORD *)(a2 + 6860) = v231;
  *(_OWORD *)(a2 + 6844) = v230;
  long long v233 = *(_OWORD *)(a1 + 4860);
  long long v234 = *(_OWORD *)(a1 + 4876);
  long long v235 = *(_OWORD *)(a1 + 4892);
  *(_OWORD *)(a2 + 6956) = *(_OWORD *)(a1 + 4908);
  *(_OWORD *)(a2 + 6940) = v235;
  *(_OWORD *)(a2 + 6924) = v234;
  *(_OWORD *)(a2 + 6908) = v233;
  *(_OWORD *)(a2 + 7212) = 0u;
  *(_OWORD *)(a2 + 7196) = 0u;
  *(_OWORD *)(a2 + 7180) = 0u;
  *(_OWORD *)(a2 + 7164) = 0u;
  *(_OWORD *)(a2 + 7148) = 0u;
  *(_OWORD *)(a2 + 7132) = 0u;
  *(_OWORD *)(a2 + 7116) = 0u;
  *(_OWORD *)(a2 + 7100) = 0u;
  *(_OWORD *)(a2 + 7084) = 0u;
  *(_OWORD *)(a2 + 7068) = 0u;
  *(_OWORD *)(a2 + 7052) = 0u;
  *(_OWORD *)(a2 + 7036) = 0u;
  *(_OWORD *)(a2 + 7020) = 0u;
  *(_OWORD *)(a2 + 7004) = 0u;
  *(_OWORD *)(a2 + 6988) = 0u;
  *(_OWORD *)(a2 + 6972) = 0u;
  long long v236 = *(_OWORD *)(a1 + 4924);
  *(_DWORD *)(a2 + 7244) = *(_DWORD *)(a1 + 4940);
  *(_OWORD *)(a2 + 7228) = v236;
  long long v237 = *(_OWORD *)(a1 + 5024);
  long long v238 = *(_OWORD *)(a1 + 5040);
  long long v239 = *(_OWORD *)(a1 + 5056);
  *(_OWORD *)(a2 + 7312) = *(_OWORD *)(a1 + 5008);
  *(_OWORD *)(a2 + 7360) = v239;
  *(_OWORD *)(a2 + 7344) = v238;
  *(_OWORD *)(a2 + 7328) = v237;
  long long v240 = *(_OWORD *)(a1 + 5088);
  long long v241 = *(_OWORD *)(a1 + 5104);
  long long v242 = *(_OWORD *)(a1 + 5120);
  *(_OWORD *)(a2 + 7376) = *(_OWORD *)(a1 + 5072);
  *(_OWORD *)(a2 + 7424) = v242;
  *(_OWORD *)(a2 + 7408) = v241;
  *(_OWORD *)(a2 + 7392) = v240;
  long long v243 = *(_OWORD *)(a1 + 5152);
  long long v244 = *(_OWORD *)(a1 + 5168);
  long long v245 = *(_OWORD *)(a1 + 5184);
  *(_OWORD *)(a2 + 7440) = *(_OWORD *)(a1 + 5136);
  *(_OWORD *)(a2 + 7488) = v245;
  *(_OWORD *)(a2 + 7472) = v244;
  *(_OWORD *)(a2 + 7456) = v243;
  long long v246 = *(_OWORD *)(a1 + 4944);
  long long v247 = *(_OWORD *)(a1 + 4960);
  long long v248 = *(_OWORD *)(a1 + 4976);
  *(_OWORD *)(a2 + 7296) = *(_OWORD *)(a1 + 4992);
  *(_OWORD *)(a2 + 7280) = v248;
  *(_OWORD *)(a2 + 7264) = v247;
  *(_OWORD *)(a2 + 7248) = v246;
  long long v249 = *(_OWORD *)(a1 + 5200);
  long long v250 = *(_OWORD *)(a1 + 5216);
  long long v251 = *(_OWORD *)(a1 + 5232);
  *(_OWORD *)(a2 + 7552) = *(_OWORD *)(a1 + 5248);
  *(_OWORD *)(a2 + 7536) = v251;
  *(_OWORD *)(a2 + 7520) = v250;
  *(_OWORD *)(a2 + 7504) = v249;
  long long v252 = *(_OWORD *)(a1 + 5264);
  long long v253 = *(_OWORD *)(a1 + 5280);
  long long v254 = *(_OWORD *)(a1 + 5296);
  *(_OWORD *)(a2 + 7616) = *(_OWORD *)(a1 + 5312);
  *(_OWORD *)(a2 + 7600) = v254;
  *(_OWORD *)(a2 + 7584) = v253;
  *(_OWORD *)(a2 + 7568) = v252;
  long long v255 = *(_OWORD *)(a1 + 5328);
  long long v256 = *(_OWORD *)(a1 + 5344);
  long long v257 = *(_OWORD *)(a1 + 5360);
  *(_OWORD *)(a2 + 7680) = *(_OWORD *)(a1 + 5376);
  *(_OWORD *)(a2 + 7664) = v257;
  *(_OWORD *)(a2 + 7648) = v256;
  *(_OWORD *)(a2 + 7632) = v255;
  long long v258 = *(_OWORD *)(a1 + 5392);
  long long v259 = *(_OWORD *)(a1 + 5408);
  long long v260 = *(_OWORD *)(a1 + 5424);
  *(_OWORD *)(a2 + 7744) = *(_OWORD *)(a1 + 5440);
  *(_OWORD *)(a2 + 7728) = v260;
  *(_OWORD *)(a2 + 7712) = v259;
  *(_OWORD *)(a2 + 7696) = v258;
  *(_OWORD *)(a2 + 8000) = 0u;
  *(_OWORD *)(a2 + 7984) = 0u;
  *(_OWORD *)(a2 + 7968) = 0u;
  *(_OWORD *)(a2 + 7952) = 0u;
  *(_OWORD *)(a2 + 7936) = 0u;
  *(_OWORD *)(a2 + 7920) = 0u;
  *(_OWORD *)(a2 + 7904) = 0u;
  *(_OWORD *)(a2 + 7888) = 0u;
  *(_OWORD *)(a2 + 7872) = 0u;
  *(_OWORD *)(a2 + 7856) = 0u;
  *(_OWORD *)(a2 + 7840) = 0u;
  *(_OWORD *)(a2 + 7824) = 0u;
  *(_OWORD *)(a2 + 7808) = 0u;
  *(_OWORD *)(a2 + 7792) = 0u;
  *(_OWORD *)(a2 + 7776) = 0u;
  *(_OWORD *)(a2 + 7760) = 0u;
  long long v261 = *(_OWORD *)(a1 + 5456);
  *(_DWORD *)(a2 + 8032) = *(_DWORD *)(a1 + 5472);
  *(_OWORD *)(a2 + 8016) = v261;
  long long v262 = *(_OWORD *)(a1 + 5588);
  long long v264 = *(_OWORD *)(a1 + 5540);
  long long v263 = *(_OWORD *)(a1 + 5556);
  *(_OWORD *)(a2 + 8132) = *(_OWORD *)(a1 + 5572);
  *(_OWORD *)(a2 + 8148) = v262;
  *(_OWORD *)(a2 + 8100) = v264;
  *(_OWORD *)(a2 + 8116) = v263;
  long long v265 = *(_OWORD *)(a1 + 5636);
  long long v266 = *(_OWORD *)(a1 + 5652);
  long long v267 = *(_OWORD *)(a1 + 5620);
  *(_OWORD *)(a2 + 8164) = *(_OWORD *)(a1 + 5604);
  *(_OWORD *)(a2 + 8180) = v267;
  *(_OWORD *)(a2 + 8196) = v265;
  *(_OWORD *)(a2 + 8212) = v266;
  long long v268 = *(_OWORD *)(a1 + 5700);
  long long v269 = *(_OWORD *)(a1 + 5716);
  long long v270 = *(_OWORD *)(a1 + 5684);
  *(_OWORD *)(a2 + 8228) = *(_OWORD *)(a1 + 5668);
  *(_OWORD *)(a2 + 8244) = v270;
  *(_OWORD *)(a2 + 8260) = v268;
  *(_OWORD *)(a2 + 8276) = v269;
  long long v271 = *(_OWORD *)(a1 + 5476);
  long long v272 = *(_OWORD *)(a1 + 5492);
  long long v273 = *(_OWORD *)(a1 + 5524);
  *(_OWORD *)(a2 + 8068) = *(_OWORD *)(a1 + 5508);
  *(_OWORD *)(a2 + 8084) = v273;
  *(_OWORD *)(a2 + 8036) = v271;
  *(_OWORD *)(a2 + 8052) = v272;
  long long v274 = *(_OWORD *)(a1 + 5732);
  long long v275 = *(_OWORD *)(a1 + 5748);
  long long v276 = *(_OWORD *)(a1 + 5780);
  *(_OWORD *)(a2 + 8324) = *(_OWORD *)(a1 + 5764);
  *(_OWORD *)(a2 + 8340) = v276;
  *(_OWORD *)(a2 + 8292) = v274;
  *(_OWORD *)(a2 + 8308) = v275;
  long long v277 = *(_OWORD *)(a1 + 5796);
  long long v278 = *(_OWORD *)(a1 + 5812);
  long long v279 = *(_OWORD *)(a1 + 5844);
  *(_OWORD *)(a2 + 8388) = *(_OWORD *)(a1 + 5828);
  *(_OWORD *)(a2 + 8404) = v279;
  *(_OWORD *)(a2 + 8356) = v277;
  *(_OWORD *)(a2 + 8372) = v278;
  long long v280 = *(_OWORD *)(a1 + 5860);
  long long v281 = *(_OWORD *)(a1 + 5876);
  long long v282 = *(_OWORD *)(a1 + 5908);
  *(_OWORD *)(a2 + 8452) = *(_OWORD *)(a1 + 5892);
  *(_OWORD *)(a2 + 8468) = v282;
  *(_OWORD *)(a2 + 8420) = v280;
  *(_OWORD *)(a2 + 8436) = v281;
  long long v283 = *(_OWORD *)(a1 + 5924);
  long long v284 = *(_OWORD *)(a1 + 5956);
  long long v285 = *(_OWORD *)(a1 + 5972);
  *(_OWORD *)(a2 + 8500) = *(_OWORD *)(a1 + 5940);
  *(_OWORD *)(a2 + 8516) = v284;
  *(_OWORD *)(a2 + 8484) = v283;
  *(_OWORD *)(a2 + 8756) = 0u;
  *(_OWORD *)(a2 + 8772) = 0u;
  *(_OWORD *)(a2 + 8724) = 0u;
  *(_OWORD *)(a2 + 8740) = 0u;
  *(_OWORD *)(a2 + 8692) = 0u;
  *(_OWORD *)(a2 + 8708) = 0u;
  *(_OWORD *)(a2 + 8660) = 0u;
  *(_OWORD *)(a2 + 8676) = 0u;
  *(_OWORD *)(a2 + 8628) = 0u;
  *(_OWORD *)(a2 + 8644) = 0u;
  *(_OWORD *)(a2 + 8596) = 0u;
  *(_OWORD *)(a2 + 8612) = 0u;
  *(_OWORD *)(a2 + 8564) = 0u;
  *(_OWORD *)(a2 + 8580) = 0u;
  *(_OWORD *)(a2 + 8532) = v285;
  *(_OWORD *)(a2 + 8548) = 0u;
  *(_OWORD *)(a2 + 8788) = 0u;
  long long v286 = *(_OWORD *)(a1 + 5988);
  *(_DWORD *)(a2 + 8820) = *(_DWORD *)(a1 + 6004);
  *(_OWORD *)(a2 + 8804) = v286;
  long long v287 = *(_OWORD *)(a1 + 6120);
  long long v289 = *(_OWORD *)(a1 + 6072);
  long long v288 = *(_OWORD *)(a1 + 6088);
  *(_OWORD *)(a2 + 8920) = *(_OWORD *)(a1 + 6104);
  *(_OWORD *)(a2 + 8936) = v287;
  *(_OWORD *)(a2 + 8888) = v289;
  *(_OWORD *)(a2 + 8904) = v288;
  long long v290 = *(_OWORD *)(a1 + 6184);
  long long v292 = *(_OWORD *)(a1 + 6136);
  long long v291 = *(_OWORD *)(a1 + 6152);
  *(_OWORD *)(a2 + 8984) = *(_OWORD *)(a1 + 6168);
  *(_OWORD *)(a2 + 9000) = v290;
  *(_OWORD *)(a2 + 8952) = v292;
  *(_OWORD *)(a2 + 8968) = v291;
  long long v293 = *(_OWORD *)(a1 + 6248);
  long long v295 = *(_OWORD *)(a1 + 6200);
  long long v294 = *(_OWORD *)(a1 + 6216);
  *(_OWORD *)(a2 + 9048) = *(_OWORD *)(a1 + 6232);
  *(_OWORD *)(a2 + 9064) = v293;
  *(_OWORD *)(a2 + 9016) = v295;
  *(_OWORD *)(a2 + 9032) = v294;
  long long v296 = *(_OWORD *)(a1 + 6008);
  long long v297 = *(_OWORD *)(a1 + 6024);
  long long v298 = *(_OWORD *)(a1 + 6056);
  *(_OWORD *)(a2 + 8856) = *(_OWORD *)(a1 + 6040);
  *(_OWORD *)(a2 + 8872) = v298;
  *(_OWORD *)(a2 + 8824) = v296;
  *(_OWORD *)(a2 + 8840) = v297;
  long long v299 = *(_OWORD *)(a1 + 6264);
  long long v300 = *(_OWORD *)(a1 + 6280);
  long long v301 = *(_OWORD *)(a1 + 6312);
  *(_OWORD *)(a2 + 9112) = *(_OWORD *)(a1 + 6296);
  *(_OWORD *)(a2 + 9128) = v301;
  *(_OWORD *)(a2 + 9080) = v299;
  *(_OWORD *)(a2 + 9096) = v300;
  long long v302 = *(_OWORD *)(a1 + 6328);
  long long v303 = *(_OWORD *)(a1 + 6344);
  long long v304 = *(_OWORD *)(a1 + 6376);
  *(_OWORD *)(a2 + 9176) = *(_OWORD *)(a1 + 6360);
  *(_OWORD *)(a2 + 9192) = v304;
  *(_OWORD *)(a2 + 9144) = v302;
  *(_OWORD *)(a2 + 9160) = v303;
  long long v305 = *(_OWORD *)(a1 + 6392);
  long long v306 = *(_OWORD *)(a1 + 6408);
  long long v307 = *(_OWORD *)(a1 + 6440);
  *(_OWORD *)(a2 + 9240) = *(_OWORD *)(a1 + 6424);
  *(_OWORD *)(a2 + 9256) = v307;
  *(_OWORD *)(a2 + 9208) = v305;
  *(_OWORD *)(a2 + 9224) = v306;
  long long v308 = *(_OWORD *)(a1 + 6456);
  long long v309 = *(_OWORD *)(a1 + 6472);
  long long v310 = *(_OWORD *)(a1 + 6504);
  *(_OWORD *)(a2 + 9304) = *(_OWORD *)(a1 + 6488);
  *(_OWORD *)(a2 + 9320) = v310;
  *(_OWORD *)(a2 + 9272) = v308;
  *(_OWORD *)(a2 + 9288) = v309;
  *(_OWORD *)(a2 + 9560) = 0u;
  *(_OWORD *)(a2 + 9576) = 0u;
  *(_OWORD *)(a2 + 9528) = 0u;
  *(_OWORD *)(a2 + 9544) = 0u;
  *(_OWORD *)(a2 + 9496) = 0u;
  *(_OWORD *)(a2 + 9512) = 0u;
  *(_OWORD *)(a2 + 9464) = 0u;
  *(_OWORD *)(a2 + 9480) = 0u;
  *(_OWORD *)(a2 + 9432) = 0u;
  *(_OWORD *)(a2 + 9448) = 0u;
  *(_OWORD *)(a2 + 9400) = 0u;
  *(_OWORD *)(a2 + 9416) = 0u;
  *(_OWORD *)(a2 + 9368) = 0u;
  *(_OWORD *)(a2 + 9384) = 0u;
  *(_OWORD *)(a2 + 9336) = 0u;
  *(_OWORD *)(a2 + 9352) = 0u;
  long long v311 = *(_OWORD *)(a1 + 6520);
  *(_DWORD *)(a2 + 9608) = *(_DWORD *)(a1 + 6536);
  *(_OWORD *)(a2 + 9592) = v311;
  long long v312 = *(_OWORD *)(a1 + 6620);
  long long v313 = *(_OWORD *)(a1 + 6636);
  long long v314 = *(_OWORD *)(a1 + 6652);
  *(_OWORD *)(a2 + 9676) = *(_OWORD *)(a1 + 6604);
  *(_OWORD *)(a2 + 9724) = v314;
  *(_OWORD *)(a2 + 9708) = v313;
  *(_OWORD *)(a2 + 9692) = v312;
  long long v315 = *(_OWORD *)(a1 + 6684);
  long long v316 = *(_OWORD *)(a1 + 6700);
  long long v317 = *(_OWORD *)(a1 + 6716);
  *(_OWORD *)(a2 + 9740) = *(_OWORD *)(a1 + 6668);
  *(_OWORD *)(a2 + 9788) = v317;
  *(_OWORD *)(a2 + 9772) = v316;
  *(_OWORD *)(a2 + 9756) = v315;
  long long v318 = *(_OWORD *)(a1 + 6748);
  long long v319 = *(_OWORD *)(a1 + 6764);
  long long v320 = *(_OWORD *)(a1 + 6780);
  *(_OWORD *)(a2 + 9804) = *(_OWORD *)(a1 + 6732);
  *(_OWORD *)(a2 + 9852) = v320;
  *(_OWORD *)(a2 + 9836) = v319;
  *(_OWORD *)(a2 + 9820) = v318;
  long long v321 = *(_OWORD *)(a1 + 6540);
  long long v322 = *(_OWORD *)(a1 + 6556);
  long long v323 = *(_OWORD *)(a1 + 6572);
  *(_OWORD *)(a2 + 9660) = *(_OWORD *)(a1 + 6588);
  *(_OWORD *)(a2 + 9644) = v323;
  *(_OWORD *)(a2 + 9628) = v322;
  *(_OWORD *)(a2 + 9612) = v321;
  long long v324 = *(_OWORD *)(a1 + 6796);
  long long v325 = *(_OWORD *)(a1 + 6812);
  long long v326 = *(_OWORD *)(a1 + 6828);
  *(_OWORD *)(a2 + 9916) = *(_OWORD *)(a1 + 6844);
  *(_OWORD *)(a2 + 9900) = v326;
  *(_OWORD *)(a2 + 9884) = v325;
  *(_OWORD *)(a2 + 9868) = v324;
  long long v327 = *(_OWORD *)(a1 + 6860);
  long long v328 = *(_OWORD *)(a1 + 6876);
  long long v329 = *(_OWORD *)(a1 + 6892);
  *(_OWORD *)(a2 + 9980) = *(_OWORD *)(a1 + 6908);
  *(_OWORD *)(a2 + 9964) = v329;
  *(_OWORD *)(a2 + 9948) = v328;
  *(_OWORD *)(a2 + 9932) = v327;
  long long v330 = *(_OWORD *)(a1 + 6924);
  long long v331 = *(_OWORD *)(a1 + 6940);
  long long v332 = *(_OWORD *)(a1 + 6956);
  *(_OWORD *)(a2 + 10044) = *(_OWORD *)(a1 + 6972);
  *(_OWORD *)(a2 + 10028) = v332;
  *(_OWORD *)(a2 + 10012) = v331;
  *(_OWORD *)(a2 + 9996) = v330;
  long long v333 = *(_OWORD *)(a1 + 6988);
  long long v334 = *(_OWORD *)(a1 + 7004);
  long long v335 = *(_OWORD *)(a1 + 7020);
  *(_OWORD *)(a2 + 10108) = *(_OWORD *)(a1 + 7036);
  *(_OWORD *)(a2 + 10092) = v335;
  *(_OWORD *)(a2 + 10076) = v334;
  *(_OWORD *)(a2 + 10060) = v333;
  *(_OWORD *)(a2 + 10364) = 0u;
  *(_OWORD *)(a2 + 10348) = 0u;
  *(_OWORD *)(a2 + 10332) = 0u;
  *(_OWORD *)(a2 + 10316) = 0u;
  *(_OWORD *)(a2 + 10300) = 0u;
  *(_OWORD *)(a2 + 10284) = 0u;
  *(_OWORD *)(a2 + 10268) = 0u;
  *(_OWORD *)(a2 + 10252) = 0u;
  *(_OWORD *)(a2 + 10236) = 0u;
  *(_OWORD *)(a2 + 10220) = 0u;
  *(_OWORD *)(a2 + 10204) = 0u;
  *(_OWORD *)(a2 + 10188) = 0u;
  *(_OWORD *)(a2 + 10172) = 0u;
  *(_OWORD *)(a2 + 10156) = 0u;
  *(_OWORD *)(a2 + 10140) = 0u;
  *(_OWORD *)(a2 + 10124) = 0u;
  long long v336 = *(_OWORD *)(a1 + 7052);
  *(_DWORD *)(a2 + 10396) = *(_DWORD *)(a1 + 7068);
  *(_OWORD *)(a2 + 10380) = v336;
  long long v337 = *(_OWORD *)(a1 + 7152);
  long long v338 = *(_OWORD *)(a1 + 7168);
  long long v339 = *(_OWORD *)(a1 + 7184);
  *(_OWORD *)(a2 + 10464) = *(_OWORD *)(a1 + 7136);
  *(_OWORD *)(a2 + 10512) = v339;
  *(_OWORD *)(a2 + 10496) = v338;
  *(_OWORD *)(a2 + 10480) = v337;
  long long v340 = *(_OWORD *)(a1 + 7216);
  long long v341 = *(_OWORD *)(a1 + 7232);
  long long v342 = *(_OWORD *)(a1 + 7248);
  *(_OWORD *)(a2 + 10528) = *(_OWORD *)(a1 + 7200);
  *(_OWORD *)(a2 + 10576) = v342;
  *(_OWORD *)(a2 + 10560) = v341;
  *(_OWORD *)(a2 + 10544) = v340;
  long long v343 = *(_OWORD *)(a1 + 7280);
  long long v344 = *(_OWORD *)(a1 + 7296);
  long long v345 = *(_OWORD *)(a1 + 7312);
  *(_OWORD *)(a2 + 10592) = *(_OWORD *)(a1 + 7264);
  *(_OWORD *)(a2 + 10640) = v345;
  *(_OWORD *)(a2 + 10624) = v344;
  *(_OWORD *)(a2 + 10608) = v343;
  long long v346 = *(_OWORD *)(a1 + 7072);
  long long v347 = *(_OWORD *)(a1 + 7088);
  long long v348 = *(_OWORD *)(a1 + 7104);
  *(_OWORD *)(a2 + 10448) = *(_OWORD *)(a1 + 7120);
  *(_OWORD *)(a2 + 10432) = v348;
  *(_OWORD *)(a2 + 10416) = v347;
  *(_OWORD *)(a2 + 10400) = v346;
  long long v349 = *(_OWORD *)(a1 + 7328);
  long long v350 = *(_OWORD *)(a1 + 7344);
  long long v351 = *(_OWORD *)(a1 + 7360);
  *(_OWORD *)(a2 + 10704) = *(_OWORD *)(a1 + 7376);
  *(_OWORD *)(a2 + 10688) = v351;
  *(_OWORD *)(a2 + 10672) = v350;
  *(_OWORD *)(a2 + 10656) = v349;
  long long v352 = *(_OWORD *)(a1 + 7392);
  long long v353 = *(_OWORD *)(a1 + 7408);
  long long v354 = *(_OWORD *)(a1 + 7424);
  *(_OWORD *)(a2 + 10768) = *(_OWORD *)(a1 + 7440);
  *(_OWORD *)(a2 + 10752) = v354;
  *(_OWORD *)(a2 + 10736) = v353;
  *(_OWORD *)(a2 + 10720) = v352;
  long long v355 = *(_OWORD *)(a1 + 7456);
  long long v356 = *(_OWORD *)(a1 + 7472);
  long long v357 = *(_OWORD *)(a1 + 7488);
  *(_OWORD *)(a2 + 10832) = *(_OWORD *)(a1 + 7504);
  *(_OWORD *)(a2 + 10816) = v357;
  *(_OWORD *)(a2 + 10800) = v356;
  *(_OWORD *)(a2 + 10784) = v355;
  long long v358 = *(_OWORD *)(a1 + 7520);
  long long v359 = *(_OWORD *)(a1 + 7536);
  long long v360 = *(_OWORD *)(a1 + 7552);
  *(_OWORD *)(a2 + 10896) = *(_OWORD *)(a1 + 7568);
  *(_OWORD *)(a2 + 10880) = v360;
  *(_OWORD *)(a2 + 10864) = v359;
  *(_OWORD *)(a2 + 10848) = v358;
  *(_OWORD *)(a2 + 11152) = 0u;
  *(_OWORD *)(a2 + 11136) = 0u;
  *(_OWORD *)(a2 + 11120) = 0u;
  *(_OWORD *)(a2 + 11104) = 0u;
  *(_OWORD *)(a2 + 11088) = 0u;
  *(_OWORD *)(a2 + 11072) = 0u;
  *(_OWORD *)(a2 + 11056) = 0u;
  *(_OWORD *)(a2 + 11040) = 0u;
  *(_OWORD *)(a2 + 11024) = 0u;
  *(_OWORD *)(a2 + 11008) = 0u;
  *(_OWORD *)(a2 + 10992) = 0u;
  *(_OWORD *)(a2 + 10976) = 0u;
  *(_OWORD *)(a2 + 10960) = 0u;
  *(_OWORD *)(a2 + 10944) = 0u;
  *(_OWORD *)(a2 + 10928) = 0u;
  *(_OWORD *)(a2 + 10912) = 0u;
  long long v361 = *(_OWORD *)(a1 + 7584);
  *(_DWORD *)(a2 + 11184) = *(_DWORD *)(a1 + 7600);
  *(_OWORD *)(a2 + 11168) = v361;
  long long v362 = *(_OWORD *)(a1 + 7716);
  long long v364 = *(_OWORD *)(a1 + 7668);
  long long v363 = *(_OWORD *)(a1 + 7684);
  *(_OWORD *)(a2 + 11284) = *(_OWORD *)(a1 + 7700);
  *(_OWORD *)(a2 + 11300) = v362;
  *(_OWORD *)(a2 + 11252) = v364;
  *(_OWORD *)(a2 + 11268) = v363;
  long long v365 = *(_OWORD *)(a1 + 7780);
  long long v367 = *(_OWORD *)(a1 + 7732);
  long long v366 = *(_OWORD *)(a1 + 7748);
  *(_OWORD *)(a2 + 11348) = *(_OWORD *)(a1 + 7764);
  *(_OWORD *)(a2 + 11364) = v365;
  *(_OWORD *)(a2 + 11316) = v367;
  *(_OWORD *)(a2 + 11332) = v366;
  long long v368 = *(_OWORD *)(a1 + 7844);
  long long v370 = *(_OWORD *)(a1 + 7796);
  long long v369 = *(_OWORD *)(a1 + 7812);
  *(_OWORD *)(a2 + 11412) = *(_OWORD *)(a1 + 7828);
  *(_OWORD *)(a2 + 11428) = v368;
  *(_OWORD *)(a2 + 11380) = v370;
  *(_OWORD *)(a2 + 11396) = v369;
  long long v371 = *(_OWORD *)(a1 + 7604);
  long long v372 = *(_OWORD *)(a1 + 7620);
  long long v373 = *(_OWORD *)(a1 + 7652);
  *(_OWORD *)(a2 + 11220) = *(_OWORD *)(a1 + 7636);
  *(_OWORD *)(a2 + 11236) = v373;
  *(_OWORD *)(a2 + 11188) = v371;
  *(_OWORD *)(a2 + 11204) = v372;
  long long v374 = *(_OWORD *)(a1 + 7860);
  long long v375 = *(_OWORD *)(a1 + 7876);
  long long v376 = *(_OWORD *)(a1 + 7908);
  *(_OWORD *)(a2 + 11476) = *(_OWORD *)(a1 + 7892);
  *(_OWORD *)(a2 + 11492) = v376;
  *(_OWORD *)(a2 + 11444) = v374;
  *(_OWORD *)(a2 + 11460) = v375;
  long long v377 = *(_OWORD *)(a1 + 7924);
  long long v378 = *(_OWORD *)(a1 + 7940);
  long long v379 = *(_OWORD *)(a1 + 7972);
  *(_OWORD *)(a2 + 11540) = *(_OWORD *)(a1 + 7956);
  *(_OWORD *)(a2 + 11556) = v379;
  *(_OWORD *)(a2 + 11508) = v377;
  *(_OWORD *)(a2 + 11524) = v378;
  long long v380 = *(_OWORD *)(a1 + 7988);
  long long v381 = *(_OWORD *)(a1 + 8004);
  long long v382 = *(_OWORD *)(a1 + 8036);
  *(_OWORD *)(a2 + 11604) = *(_OWORD *)(a1 + 8020);
  *(_OWORD *)(a2 + 11620) = v382;
  *(_OWORD *)(a2 + 11572) = v380;
  *(_OWORD *)(a2 + 11588) = v381;
  long long v383 = *(_OWORD *)(a1 + 8052);
  long long v384 = *(_OWORD *)(a1 + 8068);
  long long v385 = *(_OWORD *)(a1 + 8100);
  *(_OWORD *)(a2 + 11668) = *(_OWORD *)(a1 + 8084);
  *(_OWORD *)(a2 + 11684) = v385;
  *(_OWORD *)(a2 + 11636) = v383;
  *(_OWORD *)(a2 + 11652) = v384;
  *(_OWORD *)(a2 + 11924) = 0u;
  *(_OWORD *)(a2 + 11940) = 0u;
  *(_OWORD *)(a2 + 11892) = 0u;
  *(_OWORD *)(a2 + 11908) = 0u;
  *(_OWORD *)(a2 + 11860) = 0u;
  *(_OWORD *)(a2 + 11876) = 0u;
  *(_OWORD *)(a2 + 11828) = 0u;
  *(_OWORD *)(a2 + 11844) = 0u;
  *(_OWORD *)(a2 + 11796) = 0u;
  *(_OWORD *)(a2 + 11812) = 0u;
  *(_OWORD *)(a2 + 11764) = 0u;
  *(_OWORD *)(a2 + 11780) = 0u;
  *(_OWORD *)(a2 + 11732) = 0u;
  *(_OWORD *)(a2 + 11748) = 0u;
  *(_OWORD *)(a2 + 11700) = 0u;
  *(_OWORD *)(a2 + 11716) = 0u;
  long long v386 = *(_OWORD *)(a1 + 8116);
  *(_DWORD *)(a2 + 11972) = *(_DWORD *)(a1 + 8132);
  *(_OWORD *)(a2 + 11956) = v386;
  long long v387 = *(_OWORD *)(a1 + 8248);
  long long v389 = *(_OWORD *)(a1 + 8200);
  long long v388 = *(_OWORD *)(a1 + 8216);
  *(_OWORD *)(a2 + 12072) = *(_OWORD *)(a1 + 8232);
  *(_OWORD *)(a2 + 12088) = v387;
  *(_OWORD *)(a2 + 12040) = v389;
  *(_OWORD *)(a2 + 12056) = v388;
  long long v390 = *(_OWORD *)(a1 + 8312);
  long long v392 = *(_OWORD *)(a1 + 8264);
  long long v391 = *(_OWORD *)(a1 + 8280);
  *(_OWORD *)(a2 + 12136) = *(_OWORD *)(a1 + 8296);
  *(_OWORD *)(a2 + 12152) = v390;
  *(_OWORD *)(a2 + 12104) = v392;
  *(_OWORD *)(a2 + 12120) = v391;
  long long v393 = *(_OWORD *)(a1 + 8376);
  long long v395 = *(_OWORD *)(a1 + 8328);
  long long v394 = *(_OWORD *)(a1 + 8344);
  *(_OWORD *)(a2 + 12200) = *(_OWORD *)(a1 + 8360);
  *(_OWORD *)(a2 + 12216) = v393;
  *(_OWORD *)(a2 + 12168) = v395;
  *(_OWORD *)(a2 + 12184) = v394;
  long long v396 = *(_OWORD *)(a1 + 8136);
  long long v397 = *(_OWORD *)(a1 + 8152);
  long long v398 = *(_OWORD *)(a1 + 8184);
  *(_OWORD *)(a2 + 12008) = *(_OWORD *)(a1 + 8168);
  *(_OWORD *)(a2 + 12024) = v398;
  *(_OWORD *)(a2 + 11976) = v396;
  *(_OWORD *)(a2 + 11992) = v397;
  long long v399 = *(_OWORD *)(a1 + 8392);
  long long v400 = *(_OWORD *)(a1 + 8408);
  long long v401 = *(_OWORD *)(a1 + 8440);
  *(_OWORD *)(a2 + 12264) = *(_OWORD *)(a1 + 8424);
  *(_OWORD *)(a2 + 12280) = v401;
  *(_OWORD *)(a2 + 12232) = v399;
  *(_OWORD *)(a2 + 12248) = v400;
  long long v402 = *(_OWORD *)(a1 + 8456);
  long long v403 = *(_OWORD *)(a1 + 8472);
  long long v404 = *(_OWORD *)(a1 + 8504);
  *(_OWORD *)(a2 + 12328) = *(_OWORD *)(a1 + 8488);
  *(_OWORD *)(a2 + 12344) = v404;
  *(_OWORD *)(a2 + 12296) = v402;
  *(_OWORD *)(a2 + 12312) = v403;
  long long v405 = *(_OWORD *)(a1 + 8520);
  long long v406 = *(_OWORD *)(a1 + 8536);
  long long v407 = *(_OWORD *)(a1 + 8568);
  *(_OWORD *)(a2 + 12392) = *(_OWORD *)(a1 + 8552);
  *(_OWORD *)(a2 + 12408) = v407;
  *(_OWORD *)(a2 + 12360) = v405;
  *(_OWORD *)(a2 + 12376) = v406;
  long long v408 = *(_OWORD *)(a1 + 8584);
  long long v409 = *(_OWORD *)(a1 + 8600);
  long long v410 = *(_OWORD *)(a1 + 8632);
  *(_OWORD *)(a2 + 12456) = *(_OWORD *)(a1 + 8616);
  *(_OWORD *)(a2 + 12472) = v410;
  *(_OWORD *)(a2 + 12424) = v408;
  *(_OWORD *)(a2 + 12440) = v409;
  *(_OWORD *)(a2 + 12712) = 0u;
  *(_OWORD *)(a2 + 12728) = 0u;
  *(_OWORD *)(a2 + 12680) = 0u;
  *(_OWORD *)(a2 + 12696) = 0u;
  *(_OWORD *)(a2 + 12648) = 0u;
  *(_OWORD *)(a2 + 12664) = 0u;
  *(_OWORD *)(a2 + 12616) = 0u;
  *(_OWORD *)(a2 + 12632) = 0u;
  *(_OWORD *)(a2 + 12584) = 0u;
  *(_OWORD *)(a2 + 12600) = 0u;
  *(_OWORD *)(a2 + 12552) = 0u;
  *(_OWORD *)(a2 + 12568) = 0u;
  *(_OWORD *)(a2 + 12520) = 0u;
  *(_OWORD *)(a2 + 12536) = 0u;
  *(_OWORD *)(a2 + 12488) = 0u;
  *(_OWORD *)(a2 + 12504) = 0u;
  long long v411 = *(_OWORD *)(a1 + 8648);
  *(_DWORD *)(a2 + 12760) = *(_DWORD *)(a1 + 8664);
  *(_OWORD *)(a2 + 12744) = v411;
  *(_DWORD *)(a2 + 12764) = *(_DWORD *)(a1 + 8668);
  *(_DWORD *)(a2 + 12768) = *(_DWORD *)(a1 + 8672);
  *(_DWORD *)(a2 + 12772) = *(_DWORD *)(a1 + 8676);
  *(_DWORD *)(a2 + 12776) = *(_DWORD *)(a1 + 8680);
  memcpy((void *)(a2 + 12780), (const void *)(a1 + 8684), 0x47A70uLL);
  memcpy((void *)(a2 + 306268), (const void *)(a1 + 302172), 0x710uLL);
  memcpy((void *)(a2 + 308076), (const void *)(a1 + 303980), 0x710uLL);
  long long v412 = *(_OWORD *)(a1 + 305816);
  long long v413 = *(_OWORD *)(a1 + 305804);
  *(_OWORD *)(a2 + 309884) = *(_OWORD *)(a1 + 305788);
  *(_OWORD *)(a2 + 309900) = v413;
  *(_OWORD *)(a2 + 309912) = v412;
  memcpy((void *)(a2 + 309928), (const void *)(a1 + 305832), 0x41C0uLL);
  memcpy((void *)(a2 + 326760), (const void *)(a1 + 322664), 0x150uLL);
  *(_OWORD *)(a2 + 327096) = 0u;
  *(_OWORD *)(a2 + 327112) = 0u;
  *(_OWORD *)(a2 + 327128) = 0u;
  *(_OWORD *)(a2 + 327144) = 0u;
  *(_OWORD *)(a2 + 327160) = 0u;
  *(_OWORD *)(a2 + 327176) = 0u;
  *(_OWORD *)(a2 + 327192) = 0u;
  *(_OWORD *)(a2 + 327208) = 0u;
  *(_OWORD *)(a2 + 327224) = 0u;
  *(_OWORD *)(a2 + 327240) = 0u;
  *(_OWORD *)(a2 + 327256) = 0u;
  *(_OWORD *)(a2 + 327272) = 0u;
  *(_OWORD *)(a2 + 327288) = 0u;
  *(_OWORD *)(a2 + 327304) = 0u;
  *(_OWORD *)(a2 + 327320) = 0u;
  *(_OWORD *)(a2 + 327336) = 0u;
  *(_OWORD *)(a2 + 327352) = 0u;
  *(_OWORD *)(a2 + 327368) = 0u;
  *(_OWORD *)(a2 + 327384) = 0u;
  *(_OWORD *)(a2 + 327400) = 0u;
  *(_OWORD *)(a2 + 327416) = 0u;
  *(_OWORD *)(a2 + 327432) = 0u;
  *(_OWORD *)(a2 + 327448) = 0u;
  *(_OWORD *)(a2 + 327464) = 0u;
  *(_OWORD *)(a2 + 327480) = 0u;
  *(_OWORD *)(a2 + 327496) = 0u;
  *(_OWORD *)(a2 + 327512) = 0u;
  *(_OWORD *)(a2 + 327528) = 0u;
  if (*(_WORD *)v5
    || *(_WORD *)(v5 + 30)
    || *(_WORD *)(v5 + 60)
    || *(_WORD *)(v5 + 90)
    || *(_WORD *)(v5 + 120)
    || *(_WORD *)(v5 + 150)
    || *(_WORD *)(v5 + 180)
    || *(_WORD *)(v5 + 210))
  {
    uint64_t v417 = 0;
    unint64_t v418 = (__int16 *)v5;
    do
    {
      long long v419 = (_WORD *)(a2 + 327544 + v417);
      *long long v419 = *(v418 - 14);
      v419[14] = *v418 + *(v418 - 14);
      v419[1] = *(v418 - 13);
      v419[15] = *v418 + *(v418 - 13);
      v419[2] = *(v418 - 12);
      v419[16] = *v418 + *(v418 - 12);
      v419[3] = *(v418 - 11);
      v419[17] = *v418 + *(v418 - 11);
      v419[4] = *(v418 - 10);
      v419[18] = *v418 + *(v418 - 10);
      v419[5] = *(v418 - 9);
      v419[19] = *v418 + *(v418 - 9);
      v419[6] = *(v418 - 8);
      v419[20] = *v418 + *(v418 - 8);
      v419[7] = *(v418 - 7);
      v419[21] = *v418 + *(v418 - 7);
      v419[8] = *(v418 - 6);
      v419[22] = *v418 + *(v418 - 6);
      v419[9] = *(v418 - 5);
      v419[23] = *v418 + *(v418 - 5);
      v419[10] = *(v418 - 4);
      v419[24] = *v418 + *(v418 - 4);
      v419[11] = *(v418 - 3);
      v419[25] = *v418 + *(v418 - 3);
      v419[12] = *(v418 - 2);
      v419[26] = *v418 + *(v418 - 2);
      v419[13] = *(v418 - 1);
      __int16 v420 = *(v418 - 1);
      __int16 v421 = *v418;
      v418 += 15;
      v419[27] = v421 + v420;
      v417 += 56;
    }
    while (v417 != 448);
  }
  else
  {
    uint64_t v414 = 0;
    uint64_t v415 = (_WORD *)(a2 + 327598);
    uint64_t v416 = a1 + 323026;
    do
    {
      *(v415 - 27) = *(_WORD *)(v416 + v414 - 26);
      *(v415 - 13) = 0;
      *(v415 - 26) = *(_WORD *)(v416 + v414 - 24);
      *(v415 - 12) = 0;
      *(v415 - 25) = *(_WORD *)(v416 + v414 - 22);
      *(v415 - 11) = 0;
      *(v415 - 24) = *(_WORD *)(v416 + v414 - 20);
      *(v415 - 10) = 0;
      *(v415 - 23) = *(_WORD *)(v416 + v414 - 18);
      *(v415 - 9) = 0;
      *(v415 - 22) = *(_WORD *)(v416 + v414 - 16);
      *(v415 - 8) = 0;
      *(v415 - 21) = *(_WORD *)(v416 + v414 - 14);
      *(v415 - 7) = 0;
      *(v415 - 20) = *(_WORD *)(v416 + v414 - 12);
      *(v415 - 6) = 0;
      *(v415 - 19) = *(_WORD *)(v416 + v414 - 10);
      *(v415 - 5) = 0;
      *(v415 - 18) = *(_WORD *)(v416 + v414 - 8);
      *(v415 - 4) = 0;
      *(v415 - 17) = *(_WORD *)(v416 + v414 - 6);
      *(v415 - 3) = 0;
      *(v415 - 16) = *(_WORD *)(v416 + v414 - 4);
      *(v415 - 2) = 0;
      *(v415 - 15) = *(_WORD *)(v416 + v414 - 2);
      *(v415 - 1) = 0;
      *(v415 - 14) = *(_WORD *)(v416 + v414);
      _WORD *v415 = 0;
      v415 += 28;
      v414 += 30;
    }
    while (v414 != 240);
  }
  *unint64_t v4 = *(_DWORD *)(v5 + 212);
  v4[1] = *(_DWORD *)(v5 + 216);
  void v4[2] = *(_DWORD *)(v5 + 220);
  void v4[3] = *(_DWORD *)(v5 + 224);
  memcpy((void *)(a2 + 328012), (const void *)(a1 + 323260), 0x8380uLL);
  memcpy((void *)(a2 + 361680), (const void *)(a1 + 356928), 0x1038uLL);
  long long v422 = *(_OWORD *)(a1 + 361096);
  *(_OWORD *)(a2 + 365832) = *(_OWORD *)(a1 + 361080);
  *(_OWORD *)(a2 + 365848) = v422;
  long long v423 = *(_OWORD *)(a1 + 361112);
  long long v424 = *(_OWORD *)(a1 + 361128);
  long long v425 = *(_OWORD *)(a1 + 361160);
  *(_OWORD *)(a2 + 365896) = *(_OWORD *)(a1 + 361144);
  *(_OWORD *)(a2 + 365912) = v425;
  *(_OWORD *)(a2 + 365864) = v423;
  *(_OWORD *)(a2 + 365880) = v424;
  long long v426 = *(_OWORD *)(a1 + 361192);
  *(_OWORD *)(a2 + 365928) = *(_OWORD *)(a1 + 361176);
  *(_OWORD *)(a2 + 365944) = v426;
  long long v427 = *(_OWORD *)(a1 + 361256);
  long long v429 = *(_OWORD *)(a1 + 361208);
  long long v428 = *(_OWORD *)(a1 + 361224);
  *(_OWORD *)(a2 + 365992) = *(_OWORD *)(a1 + 361240);
  *(_OWORD *)(a2 + 366008) = v427;
  *(_OWORD *)(a2 + 365960) = v429;
  *(_OWORD *)(a2 + 365976) = v428;
  long long v431 = *(_OWORD *)(a1 + 361384);
  long long v430 = *(_OWORD *)(a1 + 361400);
  long long v432 = *(_OWORD *)(a1 + 361368);
  *(void *)(a2 + 366168) = *(void *)(a1 + 361416);
  *(_OWORD *)(a2 + 366136) = v431;
  *(_OWORD *)(a2 + 366152) = v430;
  *(_OWORD *)(a2 + 366120) = v432;
  long long v434 = *(_OWORD *)(a1 + 361304);
  long long v433 = *(_OWORD *)(a1 + 361320);
  long long v435 = *(_OWORD *)(a1 + 361352);
  *(_OWORD *)(a2 + 366088) = *(_OWORD *)(a1 + 361336);
  *(_OWORD *)(a2 + 366104) = v435;
  *(_OWORD *)(a2 + 366056) = v434;
  *(_OWORD *)(a2 + 366072) = v433;
  __n128 result = *(__n128 *)(a1 + 361272);
  long long v437 = *(_OWORD *)(a1 + 361288);
  *(__n128 *)(a2 + 366024) = result;
  *(_OWORD *)(a2 + 366040) = v437;
  return result;
}

void bumpPeridotCalibOneVersion<peridot::CalibHistory::v5::_PeridotCalib,peridot::CalibHistory::v6::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 361080;
  *(void *)a2 = 6;
  long long v5 = *(_OWORD *)(a1 + 8);
  long long v6 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v6;
  *(_OWORD *)(a2 + 8) = v5;
  long long v7 = *(_OWORD *)(a1 + 56);
  long long v8 = *(_OWORD *)(a1 + 72);
  long long v9 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  *(_OWORD *)(a2 + 88) = v9;
  *(_OWORD *)(a2 + 72) = v8;
  *(_OWORD *)(a2 + 56) = v7;
  long long v10 = *(_OWORD *)(a1 + 108);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a2 + 108) = v10;
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 140);
  memcpy((void *)(a2 + 156), (const void *)(a1 + 156), 0x2150uLL);
  memcpy((void *)(a2 + 8684), (const void *)(a1 + 8684), 0x47A70uLL);
  memcpy((void *)(a2 + 302172), (const void *)(a1 + 302172), 0x710uLL);
  memcpy((void *)(a2 + 303980), (const void *)(a1 + 303980), 0x710uLL);
  long long v11 = *(_OWORD *)(a1 + 305816);
  long long v12 = *(_OWORD *)(a1 + 305804);
  *(_OWORD *)(a2 + 305788) = *(_OWORD *)(a1 + 305788);
  *(_OWORD *)(a2 + 305804) = v12;
  *(_OWORD *)(a2 + 305816) = v11;
  memcpy((void *)(a2 + 305832), (const void *)(a1 + 305832), 0x4414uLL);
  memcpy((void *)(a2 + 323260), (const void *)(a1 + 323260), 0x8380uLL);
  memcpy((void *)(a2 + 356928), (const void *)(a1 + 356928), 0x1038uLL);
  long long v13 = *(_OWORD *)(a1 + 361096);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 361080);
  *(_OWORD *)(v4 + 16) = v13;
  long long v14 = *(_OWORD *)(a1 + 361112);
  long long v15 = *(_OWORD *)(a1 + 361128);
  long long v16 = *(_OWORD *)(a1 + 361160);
  *(_OWORD *)(v4 + 64) = *(_OWORD *)(a1 + 361144);
  *(_OWORD *)(v4 + 80) = v16;
  *(_OWORD *)(v4 + 32) = v14;
  *(_OWORD *)(v4 + 48) = v15;
  long long v17 = *(_OWORD *)(a1 + 361192);
  *(_OWORD *)(a2 + 361176) = *(_OWORD *)(a1 + 361176);
  *(_OWORD *)(a2 + 361192) = v17;
  long long v18 = *(_OWORD *)(a1 + 361256);
  long long v20 = *(_OWORD *)(a1 + 361208);
  long long v19 = *(_OWORD *)(a1 + 361224);
  *(_OWORD *)(a2 + 361240) = *(_OWORD *)(a1 + 361240);
  *(_OWORD *)(a2 + 361256) = v18;
  *(_OWORD *)(a2 + 361208) = v20;
  *(_OWORD *)(a2 + 361224) = v19;
  long long v22 = *(_OWORD *)(a1 + 361320);
  long long v21 = *(_OWORD *)(a1 + 361336);
  long long v23 = *(_OWORD *)(a1 + 361368);
  *(_OWORD *)(a2 + 361352) = *(_OWORD *)(a1 + 361352);
  *(_OWORD *)(a2 + 361368) = v23;
  *(_OWORD *)(a2 + 361320) = v22;
  *(_OWORD *)(a2 + 361336) = v21;
  long long v24 = *(_OWORD *)(a1 + 361272);
  long long v25 = *(_OWORD *)(a1 + 361304);
  *(_OWORD *)(a2 + 361288) = *(_OWORD *)(a1 + 361288);
  *(_OWORD *)(a2 + 361304) = v25;
  *(_OWORD *)(a2 + 361272) = v24;
  *(_OWORD *)(a2 + 361384) = *(_OWORD *)(a1 + 361384);
  *(_OWORD *)(a2 + 361400) = *(_OWORD *)(a1 + 361400);
  if (*(float *)(a2 + 9080) != 0.0 && *(double *)(v4 + 152) > -2.0)
  {
    if (*(double *)(v4 + 24) != 0.0)
    {
      float64x2_t v26 = *(float64x2_t *)v4;
      v26.f64[1] = *(float64_t *)(v4 + 32);
      float32x2_t v47 = vcvt_f32_f64(v26);
      float v27 = *(double *)(v4 + 64);
      float v28 = *(double *)(v4 + 72);
      float v29 = *(double *)(v4 + 80);
      *(float *)&uint64_t v30 = atan2f(v28, v29);
      v46.i64[0] = v30;
      float v45 = atan2f(-v27, sqrtf((float)(v28 * v28) + (float)(v29 * v29)));
      float v31 = atan2f(v47.f32[1], v47.f32[0]);
      float32x4_t v32 = v46;
      v32.f32[1] = v45;
      v32.f32[2] = v31;
      float32x4_t v48 = vaddq_f32(v32, (float32x4_t)xmmword_259120080);
      __float2 v33 = __sincosf_stret(v48.f32[0]);
      __float2 v34 = __sincosf_stret(v48.f32[1]);
      __float2 v35 = __sincosf_stret(v48.f32[2]);
      int32x2_t v36 = (int32x2_t)vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v35.__sinval), LODWORD(v35.__cosval)), v34.__cosval);
      v37.f32[0] = -v34.__sinval;
      double v38 = -(v33.__cosval * v35.__sinval - v35.__cosval * v33.__sinval * v34.__sinval);
      *(float *)&double v38 = v38;
      double v39 = v33.__cosval * v35.__cosval + v35.__sinval * v33.__sinval * v34.__sinval;
      *(float *)&double v39 = v39;
      float v40 = v35.__sinval * v33.__sinval + v33.__cosval * v34.__sinval * v35.__cosval;
      float v41 = -(v35.__cosval * v33.__sinval - v33.__cosval * v34.__sinval * v35.__sinval);
      *(float64x2_t *)uint64_t v4 = vcvtq_f64_f32((float32x2_t)vzip1_s32(v36, *(int32x2_t *)&v38));
      *(float64x2_t *)(v4 + 32) = vcvtq_f64_f32((float32x2_t)vzip2_s32(v36, vdup_lane_s32(*(int32x2_t *)&v39, 0)));
      v37.f32[1] = v33.__sinval * v34.__cosval;
      *(float64x2_t *)(v4 + 64) = vcvtq_f64_f32(v37);
      *(double *)(v4 + 16) = v40;
      *(double *)(v4 + 48) = v41;
      *(double *)(v4 + 80) = (float)(v33.__cosval * v34.__cosval);
    }
    long long v42 = *(_OWORD *)(v4 + 48);
    *(_OWORD *)(a2 + 361208) = *(_OWORD *)(v4 + 32);
    *(_OWORD *)(a2 + 361224) = v42;
    long long v43 = *(_OWORD *)(v4 + 80);
    *(_OWORD *)(a2 + 361240) = *(_OWORD *)(v4 + 64);
    *(_OWORD *)(a2 + 361256) = v43;
    long long v44 = *(_OWORD *)(v4 + 16);
    *(_OWORD *)(a2 + 361176) = *(_OWORD *)v4;
    *(_OWORD *)(a2 + 361192) = v44;
  }
}

__n128 bumpPeridotCalibOneVersion<peridot::CalibHistory::v4::_PeridotCalib,peridot::CalibHistory::v5::_PeridotCalib>(uint64_t a1, uint64_t a2)
{
  long long v61 = (void *)(a2 + 361080);
  uint64_t v59 = a2 + 265752;
  uint64_t v56 = a2 + 229068;
  uint64_t v57 = a2 + 265472;
  uint64_t v54 = a2 + 228788;
  uint64_t v52 = a2 + 192384;
  uint64_t v49 = a2 + 155700;
  uint64_t v50 = a2 + 192104;
  uint64_t v45 = a2 + 119016;
  uint64_t v46 = a2 + 155420;
  uint64_t v3 = a2 + 118736;
  uint64_t v42 = a2 + 82332;
  uint64_t v4 = a2 + 82052;
  uint64_t v40 = a2 + 45648;
  uint64_t v5 = a2 + 45368;
  uint64_t v39 = a2 + 8964;
  long long v60 = (void *)(a1 + 76120);
  uint64_t v58 = a1 + 12428;
  uint64_t v55 = a1 + 12140;
  uint64_t v53 = a1 + 11852;
  uint64_t v51 = a1 + 11564;
  uint64_t v48 = a1 + 11276;
  uint64_t v47 = a1 + 10988;
  uint64_t v44 = a1 + 10700;
  uint64_t v43 = a1 + 10412;
  uint64_t v41 = a1 + 10124;
  uint64_t v6 = a1 + 9836;
  uint64_t v7 = a1 + 9548;
  *(void *)a2 = 5;
  long long v8 = *(_OWORD *)(a1 + 8);
  long long v9 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v9;
  *(_OWORD *)(a2 + 8) = v8;
  long long v10 = *(_OWORD *)(a1 + 56);
  long long v11 = *(_OWORD *)(a1 + 72);
  long long v12 = *(_OWORD *)(a1 + 88);
  *(_DWORD *)(a2 + 104) = *(_DWORD *)(a1 + 104);
  uint64_t v13 = a1 + 9260;
  uint64_t v14 = a1 + 8972;
  uint64_t v15 = a2 + 8684;
  uint64_t v16 = a1 + 8684;
  *(_OWORD *)(a2 + 88) = v12;
  *(_OWORD *)(a2 + 72) = v11;
  *(_OWORD *)(a2 + 56) = v10;
  long long v17 = *(_OWORD *)(a1 + 108);
  *(_OWORD *)(a2 + 124) = *(_OWORD *)(a1 + 124);
  *(_OWORD *)(a2 + 108) = v17;
  *(_OWORD *)(a2 + 140) = *(_OWORD *)(a1 + 140);
  memcpy((void *)(a2 + 156), (const void *)(a1 + 156), 0x2150uLL);
  *(unsigned char *)uint64_t v15 = *(unsigned char *)v16;
  *(unsigned char *)(v15 + 28) = *(unsigned char *)(v16 + 36);
  *(unsigned char *)(v15 + 56) = *(unsigned char *)(v16 + 72);
  *(unsigned char *)(v15 + 84) = *(unsigned char *)(v16 + 108);
  *(unsigned char *)(v15 + 112) = *(unsigned char *)(v16 + 144);
  *(unsigned char *)(v15 + 140) = *(unsigned char *)(v16 + 180);
  *(unsigned char *)(v15 + 168) = *(unsigned char *)(v16 + 216);
  *(unsigned char *)(v15 + 196) = *(unsigned char *)(v16 + 252);
  int v18 = *(_DWORD *)(a1 + 12732);
  *(_OWORD *)(a2 + 8688) = *(_OWORD *)(a1 + 8688);
  *(void *)(a2 + 8704) = *(void *)(a1 + 8704);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 40);
  *(void *)(v15 + 48) = *(void *)(v16 + 56);
  *(_OWORD *)(v15 + 60) = *(_OWORD *)(v16 + 76);
  *(void *)(a2 + 8760) = *(void *)(a1 + 8776);
  *(_OWORD *)(v15 + 88) = *(_OWORD *)(v16 + 112);
  *(void *)(v15 + 104) = *(void *)(v16 + 128);
  *(_OWORD *)(a2 + 8800) = *(_OWORD *)(a1 + 8832);
  *(void *)(a2 + 8816) = *(void *)(a1 + 8848);
  *(_OWORD *)(v15 + 144) = *(_OWORD *)(v16 + 184);
  *(void *)(v15 + 160) = *(void *)(v16 + 200);
  *(_OWORD *)(v15 + 172) = *(_OWORD *)(v16 + 220);
  *(void *)(a2 + 8872) = *(void *)(a1 + 8920);
  *(_OWORD *)(v15 + 200) = *(_OWORD *)(v16 + 256);
  uint64_t v19 = *(void *)(v16 + 272);
  *(unsigned char *)(v15 + 224) = *(unsigned char *)v14;
  *(unsigned char *)(v15 + 252) = *(unsigned char *)(v14 + 36);
  *(void *)(v15 + 216) = v19;
  *(_OWORD *)(a2 + 8912) = *(_OWORD *)(a1 + 8976);
  *(void *)(a2 + 8928) = *(void *)(a1 + 8992);
  *(_OWORD *)(v15 + 256) = *(_OWORD *)(v14 + 40);
  *(void *)(v15 + 272) = *(void *)(v14 + 56);
  *(unsigned char *)uint64_t v39 = *(unsigned char *)(v14 + 72);
  *(unsigned char *)(v39 + 28) = *(unsigned char *)(v14 + 108);
  *(unsigned char *)(v39 + 56) = *(unsigned char *)(v14 + 144);
  *(unsigned char *)(v39 + 84) = *(unsigned char *)(v14 + 180);
  *(_OWORD *)(v39 + 4) = *(_OWORD *)(v14 + 76);
  *(void *)(a2 + 8984) = *(void *)(a1 + 9064);
  *(_OWORD *)(v39 + 32) = *(_OWORD *)(v14 + 112);
  *(void *)(v39 + 48) = *(void *)(v14 + 128);
  *(_OWORD *)(a2 + 9024) = *(_OWORD *)(a1 + 9120);
  *(void *)(a2 + 9040) = *(void *)(a1 + 9136);
  *(_OWORD *)(v39 + 88) = *(_OWORD *)(v14 + 184);
  *(void *)(v39 + 104) = *(void *)(v14 + 200);
  *(unsigned char *)uint64_t v5 = *(unsigned char *)(v14 + 216);
  *(unsigned char *)(v5 + 28) = *(unsigned char *)(v14 + 252);
  *(_DWORD *)(a2 + 9076) = v18;
  *(_OWORD *)(v5 + 4) = *(_OWORD *)(v14 + 220);
  *(void *)(v5 + 20) = *(void *)(a1 + 9208);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v14 + 256);
  uint64_t v20 = *(void *)(v14 + 272);
  *(unsigned char *)(v5 + 56) = *(unsigned char *)v13;
  *(unsigned char *)(v5 + 84) = *(unsigned char *)(v13 + 36);
  *(unsigned char *)(v5 + 112) = *(unsigned char *)(v13 + 72);
  *(unsigned char *)(v5 + 140) = *(unsigned char *)(v13 + 108);
  *(unsigned char *)(v5 + 168) = *(unsigned char *)(v13 + 144);
  *(unsigned char *)(v5 + 196) = *(unsigned char *)(v13 + 180);
  *(unsigned char *)(v5 + 224) = *(unsigned char *)(v13 + 216);
  *(unsigned char *)(v5 + 252) = *(unsigned char *)(v13 + 252);
  *(void *)(v5 + 48) = v20;
  *(_OWORD *)(v5 + 60) = *(_OWORD *)(a1 + 9264);
  *(void *)(v5 + 76) = *(void *)(a1 + 9280);
  *(_OWORD *)(a2 + 45456) = *(_OWORD *)(v13 + 40);
  *(void *)(v5 + 104) = *(void *)(v13 + 56);
  *(_OWORD *)(v5 + 116) = *(_OWORD *)(v13 + 76);
  *(void *)(v5 + 132) = *(void *)(a1 + 9352);
  *(_OWORD *)(v5 + 144) = *(_OWORD *)(v13 + 112);
  *(void *)(v5 + 160) = *(void *)(v13 + 128);
  *(_OWORD *)(v5 + 172) = *(_OWORD *)(a1 + 9408);
  *(void *)(v5 + 188) = *(void *)(a1 + 9424);
  *(_OWORD *)(a2 + 45568) = *(_OWORD *)(v13 + 184);
  *(void *)(v5 + 216) = *(void *)(v13 + 200);
  *(_OWORD *)(v5 + 228) = *(_OWORD *)(v13 + 220);
  *(void *)(v5 + 244) = *(void *)(a1 + 9496);
  *(_OWORD *)(v5 + 256) = *(_OWORD *)(v13 + 256);
  *(void *)(v5 + 272) = *(void *)(v13 + 272);
  *(unsigned char *)uint64_t v40 = *(unsigned char *)v7;
  *(unsigned char *)(v40 + 28) = *(unsigned char *)(v7 + 36);
  *(unsigned char *)(v40 + 56) = *(unsigned char *)(v7 + 72);
  *(unsigned char *)(v40 + 84) = *(unsigned char *)(v7 + 108);
  *(_OWORD *)(v40 + 4) = *(_OWORD *)(a1 + 9552);
  *(void *)(v40 + 20) = *(void *)(a1 + 9568);
  *(_OWORD *)(a2 + 45680) = *(_OWORD *)(v7 + 40);
  *(void *)(v40 + 48) = *(void *)(v7 + 56);
  *(_OWORD *)(v40 + 60) = *(_OWORD *)(v7 + 76);
  *(void *)(v40 + 76) = *(void *)(a1 + 9640);
  *(_OWORD *)(v40 + 88) = *(_OWORD *)(v7 + 112);
  *(void *)(v40 + 104) = *(void *)(v7 + 128);
  *(_DWORD *)(v40 + 112) = v18;
  *(unsigned char *)uint64_t v4 = *(unsigned char *)(v7 + 144);
  *(unsigned char *)(v4 + 28) = *(unsigned char *)(v7 + 180);
  *(unsigned char *)(v4 + 56) = *(unsigned char *)(v7 + 216);
  *(unsigned char *)(v4 + 84) = *(unsigned char *)(v7 + 252);
  *(_OWORD *)(v4 + 4) = *(_OWORD *)(a1 + 9696);
  *(void *)(v4 + 20) = *(void *)(a1 + 9712);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(v7 + 184);
  *(void *)(v4 + 48) = *(void *)(v7 + 200);
  *(_OWORD *)(v4 + 60) = *(_OWORD *)(v7 + 220);
  *(void *)(v4 + 76) = *(void *)(a1 + 9784);
  *(_OWORD *)(v4 + 88) = *(_OWORD *)(v7 + 256);
  uint64_t v21 = *(void *)(v7 + 272);
  *(unsigned char *)(v4 + 112) = *(unsigned char *)v6;
  *(unsigned char *)(v4 + 140) = *(unsigned char *)(v6 + 36);
  *(unsigned char *)(v4 + 168) = *(unsigned char *)(v6 + 72);
  *(unsigned char *)(v4 + 196) = *(unsigned char *)(v6 + 108);
  *(unsigned char *)(v4 + 224) = *(unsigned char *)(v6 + 144);
  *(unsigned char *)(v4 + 252) = *(unsigned char *)(v6 + 180);
  *(void *)(v4 + 104) = v21;
  *(_OWORD *)(v4 + 116) = *(_OWORD *)(a1 + 9840);
  *(void *)(v4 + 132) = *(void *)(a1 + 9856);
  *(_OWORD *)(v4 + 144) = *(_OWORD *)(v6 + 40);
  *(void *)(v4 + 160) = *(void *)(v6 + 56);
  *(_OWORD *)(v4 + 172) = *(_OWORD *)(v6 + 76);
  *(void *)(v4 + 188) = *(void *)(a1 + 9928);
  *(_OWORD *)(v4 + 200) = *(_OWORD *)(v6 + 112);
  *(void *)(v4 + 216) = *(void *)(v6 + 128);
  *(_OWORD *)(v4 + 228) = *(_OWORD *)(a1 + 9984);
  *(void *)(v4 + 244) = *(void *)(a1 + 10000);
  *(_OWORD *)(v4 + 256) = *(_OWORD *)(v6 + 184);
  *(void *)(v4 + 272) = *(void *)(v6 + 200);
  *(unsigned char *)uint64_t v42 = *(unsigned char *)(v6 + 216);
  *(unsigned char *)(v42 + 28) = *(unsigned char *)(v6 + 252);
  *(_OWORD *)(v42 + 4) = *(_OWORD *)(v6 + 220);
  *(void *)(v42 + 20) = *(void *)(a1 + 10072);
  *(_OWORD *)(v42 + 32) = *(_OWORD *)(v6 + 256);
  uint64_t v22 = *(void *)(v6 + 272);
  *(unsigned char *)(v42 + 56) = *(unsigned char *)v41;
  *(unsigned char *)(v42 + 84) = *(unsigned char *)(v41 + 36);
  *(void *)(v42 + 48) = v22;
  *(_OWORD *)(v42 + 60) = *(_OWORD *)(a1 + 10128);
  *(void *)(v42 + 76) = *(void *)(a1 + 10144);
  *(_OWORD *)(v42 + 88) = *(_OWORD *)(v41 + 40);
  *(void *)(v42 + 104) = *(void *)(v41 + 56);
  *(_DWORD *)(v42 + 112) = v18;
  *(unsigned char *)uint64_t v3 = *(unsigned char *)(v41 + 72);
  *(unsigned char *)(v3 + 28) = *(unsigned char *)(v41 + 108);
  *(unsigned char *)(v3 + 56) = *(unsigned char *)(v41 + 144);
  *(unsigned char *)(v3 + 84) = *(unsigned char *)(v41 + 180);
  *(unsigned char *)(v3 + 112) = *(unsigned char *)(v41 + 216);
  *(unsigned char *)(v3 + 140) = *(unsigned char *)(v41 + 252);
  *(_OWORD *)(v3 + 4) = *(_OWORD *)(v41 + 76);
  *(void *)(v3 + 20) = *(void *)(a1 + 10216);
  *(_OWORD *)(v3 + 32) = *(_OWORD *)(v41 + 112);
  *(void *)(v3 + 48) = *(void *)(v41 + 128);
  *(_OWORD *)(v3 + 60) = *(_OWORD *)(a1 + 10272);
  *(void *)(v3 + 76) = *(void *)(a1 + 10288);
  *(_OWORD *)(v3 + 88) = *(_OWORD *)(v41 + 184);
  *(void *)(v3 + 104) = *(void *)(v41 + 200);
  *(_OWORD *)(v3 + 116) = *(_OWORD *)(v41 + 220);
  *(void *)(v3 + 132) = *(void *)(a1 + 10360);
  *(_OWORD *)(v3 + 144) = *(_OWORD *)(v41 + 256);
  uint64_t v23 = *(void *)(v41 + 272);
  *(unsigned char *)(v3 + 168) = *(unsigned char *)v43;
  *(unsigned char *)(v3 + 196) = *(unsigned char *)(v43 + 36);
  *(unsigned char *)(v3 + 224) = *(unsigned char *)(v43 + 72);
  *(unsigned char *)(v3 + 252) = *(unsigned char *)(v43 + 108);
  *(void *)(v3 + 160) = v23;
  *(_OWORD *)(v3 + 172) = *(_OWORD *)(a1 + 10416);
  *(void *)(v3 + 188) = *(void *)(a1 + 10432);
  *(_OWORD *)(v3 + 200) = *(_OWORD *)(v43 + 40);
  *(void *)(v3 + 216) = *(void *)(v43 + 56);
  *(_OWORD *)(v3 + 228) = *(_OWORD *)(v43 + 76);
  *(void *)(v3 + 244) = *(void *)(a1 + 10504);
  *(_OWORD *)(v3 + 256) = *(_OWORD *)(v43 + 112);
  *(void *)(v3 + 272) = *(void *)(v43 + 128);
  *(unsigned char *)uint64_t v45 = *(unsigned char *)(v43 + 144);
  *(unsigned char *)(v45 + 28) = *(unsigned char *)(v43 + 180);
  *(unsigned char *)(v45 + 56) = *(unsigned char *)(v43 + 216);
  *(unsigned char *)(v45 + 84) = *(unsigned char *)(v43 + 252);
  *(_OWORD *)(v45 + 4) = *(_OWORD *)(a1 + 10560);
  *(void *)(v45 + 20) = *(void *)(a1 + 10576);
  *(_OWORD *)(v45 + 32) = *(_OWORD *)(v43 + 184);
  *(void *)(v45 + 48) = *(void *)(v43 + 200);
  *(_OWORD *)(v45 + 60) = *(_OWORD *)(v43 + 220);
  *(void *)(v45 + 76) = *(void *)(a1 + 10648);
  *(_OWORD *)(v45 + 88) = *(_OWORD *)(v43 + 256);
  *(void *)(v45 + 104) = *(void *)(v43 + 272);
  *(_DWORD *)(v45 + 112) = v18;
  *(unsigned char *)uint64_t v46 = *(unsigned char *)v44;
  *(unsigned char *)(v46 + 28) = *(unsigned char *)(v44 + 36);
  *(unsigned char *)(v46 + 56) = *(unsigned char *)(v44 + 72);
  *(unsigned char *)(v46 + 84) = *(unsigned char *)(v44 + 108);
  *(unsigned char *)(v46 + 112) = *(unsigned char *)(v44 + 144);
  *(unsigned char *)(v46 + 140) = *(unsigned char *)(v44 + 180);
  *(unsigned char *)(v46 + 168) = *(unsigned char *)(v44 + 216);
  *(unsigned char *)(v46 + 196) = *(unsigned char *)(v44 + 252);
  *(_OWORD *)(v46 + 4) = *(_OWORD *)(a1 + 10704);
  *(void *)(v46 + 20) = *(void *)(a1 + 10720);
  *(_OWORD *)(v46 + 32) = *(_OWORD *)(v44 + 40);
  *(void *)(v46 + 48) = *(void *)(v44 + 56);
  *(_OWORD *)(v46 + 60) = *(_OWORD *)(v44 + 76);
  *(void *)(v46 + 76) = *(void *)(a1 + 10792);
  *(_OWORD *)(v46 + 88) = *(_OWORD *)(v44 + 112);
  *(void *)(v46 + 104) = *(void *)(v44 + 128);
  *(_OWORD *)(v46 + 116) = *(_OWORD *)(a1 + 10848);
  *(void *)(v46 + 132) = *(void *)(a1 + 10864);
  *(_OWORD *)(v46 + 144) = *(_OWORD *)(v44 + 184);
  *(void *)(v46 + 160) = *(void *)(v44 + 200);
  *(_OWORD *)(v46 + 172) = *(_OWORD *)(v44 + 220);
  *(void *)(v46 + 188) = *(void *)(a1 + 10936);
  *(_OWORD *)(v46 + 200) = *(_OWORD *)(v44 + 256);
  uint64_t v24 = *(void *)(v44 + 272);
  *(unsigned char *)(v46 + 224) = *(unsigned char *)v47;
  *(unsigned char *)(v46 + 252) = *(unsigned char *)(v47 + 36);
  *(void *)(v46 + 216) = v24;
  *(_OWORD *)(v46 + 228) = *(_OWORD *)(a1 + 10992);
  *(void *)(v46 + 244) = *(void *)(a1 + 11008);
  *(_OWORD *)(v46 + 256) = *(_OWORD *)(v47 + 40);
  *(void *)(v46 + 272) = *(void *)(v47 + 56);
  *(unsigned char *)uint64_t v49 = *(unsigned char *)(v47 + 72);
  *(unsigned char *)(v49 + 28) = *(unsigned char *)(v47 + 108);
  *(unsigned char *)(v49 + 56) = *(unsigned char *)(v47 + 144);
  *(unsigned char *)(v49 + 84) = *(unsigned char *)(v47 + 180);
  *(_OWORD *)(v49 + 4) = *(_OWORD *)(v47 + 76);
  *(void *)(v49 + 20) = *(void *)(a1 + 11080);
  *(_OWORD *)(v49 + 32) = *(_OWORD *)(v47 + 112);
  *(void *)(v49 + 48) = *(void *)(v47 + 128);
  *(_OWORD *)(v49 + 60) = *(_OWORD *)(a1 + 11136);
  *(void *)(v49 + 76) = *(void *)(a1 + 11152);
  *(_OWORD *)(v49 + 88) = *(_OWORD *)(v47 + 184);
  *(void *)(v49 + 104) = *(void *)(v47 + 200);
  *(_DWORD *)(v49 + 112) = v18;
  *(unsigned char *)uint64_t v50 = *(unsigned char *)(v47 + 216);
  *(unsigned char *)(v50 + 28) = *(unsigned char *)(v47 + 252);
  *(_OWORD *)(v50 + 4) = *(_OWORD *)(v47 + 220);
  *(void *)(v50 + 20) = *(void *)(a1 + 11224);
  *(_OWORD *)(v50 + 32) = *(_OWORD *)(v47 + 256);
  uint64_t v25 = *(void *)(v47 + 272);
  *(unsigned char *)(v50 + 56) = *(unsigned char *)v48;
  *(unsigned char *)(v50 + 84) = *(unsigned char *)(v48 + 36);
  *(unsigned char *)(v50 + 112) = *(unsigned char *)(v48 + 72);
  *(unsigned char *)(v50 + 140) = *(unsigned char *)(v48 + 108);
  *(unsigned char *)(v50 + 168) = *(unsigned char *)(v48 + 144);
  *(unsigned char *)(v50 + 196) = *(unsigned char *)(v48 + 180);
  *(unsigned char *)(v50 + 224) = *(unsigned char *)(v48 + 216);
  *(unsigned char *)(v50 + 252) = *(unsigned char *)(v48 + 252);
  *(void *)(v50 + 48) = v25;
  *(_OWORD *)(v50 + 60) = *(_OWORD *)(a1 + 11280);
  *(void *)(v50 + 76) = *(void *)(a1 + 11296);
  *(_OWORD *)(v50 + 88) = *(_OWORD *)(v48 + 40);
  *(void *)(v50 + 104) = *(void *)(v48 + 56);
  *(_OWORD *)(v50 + 116) = *(_OWORD *)(v48 + 76);
  *(void *)(v50 + 132) = *(void *)(a1 + 11368);
  *(_OWORD *)(v50 + 144) = *(_OWORD *)(v48 + 112);
  *(void *)(v50 + 160) = *(void *)(v48 + 128);
  *(_OWORD *)(v50 + 172) = *(_OWORD *)(a1 + 11424);
  *(void *)(v50 + 188) = *(void *)(a1 + 11440);
  *(_OWORD *)(v50 + 200) = *(_OWORD *)(v48 + 184);
  *(void *)(v50 + 216) = *(void *)(v48 + 200);
  *(_OWORD *)(v50 + 228) = *(_OWORD *)(v48 + 220);
  *(void *)(v50 + 244) = *(void *)(a1 + 11512);
  *(_OWORD *)(v50 + 256) = *(_OWORD *)(v48 + 256);
  *(void *)(v50 + 272) = *(void *)(v48 + 272);
  *(unsigned char *)uint64_t v52 = *(unsigned char *)v51;
  *(unsigned char *)(v52 + 28) = *(unsigned char *)(v51 + 36);
  *(unsigned char *)(v52 + 56) = *(unsigned char *)(v51 + 72);
  *(unsigned char *)(v52 + 84) = *(unsigned char *)(v51 + 108);
  *(_OWORD *)(v52 + 4) = *(_OWORD *)(a1 + 11568);
  *(void *)(v52 + 20) = *(void *)(a1 + 11584);
  *(_OWORD *)(v52 + 32) = *(_OWORD *)(v51 + 40);
  *(void *)(v52 + 48) = *(void *)(v51 + 56);
  *(_OWORD *)(v52 + 60) = *(_OWORD *)(v51 + 76);
  *(void *)(v52 + 76) = *(void *)(a1 + 11656);
  *(_OWORD *)(v52 + 88) = *(_OWORD *)(v51 + 112);
  *(void *)(v52 + 104) = *(void *)(v51 + 128);
  *(_DWORD *)(v52 + 112) = v18;
  *(unsigned char *)uint64_t v54 = *(unsigned char *)(v51 + 144);
  *(unsigned char *)(v54 + 28) = *(unsigned char *)(v51 + 180);
  *(unsigned char *)(v54 + 56) = *(unsigned char *)(v51 + 216);
  *(unsigned char *)(v54 + 84) = *(unsigned char *)(v51 + 252);
  *(_OWORD *)(v54 + 4) = *(_OWORD *)(a1 + 11712);
  *(void *)(v54 + 20) = *(void *)(a1 + 11728);
  *(_OWORD *)(v54 + 32) = *(_OWORD *)(v51 + 184);
  *(void *)(v54 + 48) = *(void *)(v51 + 200);
  *(_OWORD *)(v54 + 60) = *(_OWORD *)(v51 + 220);
  *(void *)(v54 + 76) = *(void *)(a1 + 11800);
  *(_OWORD *)(v54 + 88) = *(_OWORD *)(v51 + 256);
  uint64_t v26 = *(void *)(v51 + 272);
  *(unsigned char *)(v54 + 112) = *(unsigned char *)v53;
  *(unsigned char *)(v54 + 140) = *(unsigned char *)(v53 + 36);
  *(unsigned char *)(v54 + 168) = *(unsigned char *)(v53 + 72);
  *(unsigned char *)(v54 + 196) = *(unsigned char *)(v53 + 108);
  *(unsigned char *)(v54 + 224) = *(unsigned char *)(v53 + 144);
  *(unsigned char *)(v54 + 252) = *(unsigned char *)(v53 + 180);
  *(void *)(v54 + 104) = v26;
  *(_OWORD *)(v54 + 116) = *(_OWORD *)(a1 + 11856);
  *(void *)(v54 + 132) = *(void *)(a1 + 11872);
  *(_OWORD *)(v54 + 144) = *(_OWORD *)(v53 + 40);
  *(void *)(v54 + 160) = *(void *)(v53 + 56);
  *(_OWORD *)(v54 + 172) = *(_OWORD *)(v53 + 76);
  *(void *)(v54 + 188) = *(void *)(a1 + 11944);
  *(_OWORD *)(v54 + 200) = *(_OWORD *)(v53 + 112);
  *(void *)(v54 + 216) = *(void *)(v53 + 128);
  *(_OWORD *)(v54 + 228) = *(_OWORD *)(a1 + 12000);
  *(void *)(v54 + 244) = *(void *)(a1 + 12016);
  *(_OWORD *)(v54 + 256) = *(_OWORD *)(v53 + 184);
  *(void *)(v54 + 272) = *(void *)(v53 + 200);
  *(unsigned char *)uint64_t v56 = *(unsigned char *)(v53 + 216);
  *(unsigned char *)(v56 + 28) = *(unsigned char *)(v53 + 252);
  *(_OWORD *)(v56 + 4) = *(_OWORD *)(v53 + 220);
  *(void *)(v56 + 20) = *(void *)(a1 + 12088);
  *(_OWORD *)(v56 + 32) = *(_OWORD *)(v53 + 256);
  uint64_t v27 = *(void *)(v53 + 272);
  *(unsigned char *)(v56 + 56) = *(unsigned char *)v55;
  *(unsigned char *)(v56 + 84) = *(unsigned char *)(v55 + 36);
  *(void *)(v56 + 48) = v27;
  *(_OWORD *)(v56 + 60) = *(_OWORD *)(a1 + 12144);
  *(void *)(v56 + 76) = *(void *)(a1 + 12160);
  *(_OWORD *)(v56 + 88) = *(_OWORD *)(v55 + 40);
  *(void *)(v56 + 104) = *(void *)(v55 + 56);
  *(_DWORD *)(v56 + 112) = v18;
  *(unsigned char *)uint64_t v57 = *(unsigned char *)(v55 + 72);
  *(unsigned char *)(v57 + 28) = *(unsigned char *)(v55 + 108);
  *(unsigned char *)(v57 + 56) = *(unsigned char *)(v55 + 144);
  *(unsigned char *)(v57 + 84) = *(unsigned char *)(v55 + 180);
  *(unsigned char *)(v57 + 112) = *(unsigned char *)(v55 + 216);
  *(unsigned char *)(v57 + 140) = *(unsigned char *)(v55 + 252);
  *(_OWORD *)(v57 + 4) = *(_OWORD *)(v55 + 76);
  *(void *)(v57 + 20) = *(void *)(a1 + 12232);
  *(_OWORD *)(v57 + 32) = *(_OWORD *)(v55 + 112);
  *(void *)(v57 + 48) = *(void *)(v55 + 128);
  *(_OWORD *)(v57 + 60) = *(_OWORD *)(a1 + 12288);
  *(void *)(v57 + 76) = *(void *)(a1 + 12304);
  *(_OWORD *)(v57 + 88) = *(_OWORD *)(v55 + 184);
  *(void *)(v57 + 104) = *(void *)(v55 + 200);
  *(_OWORD *)(v57 + 116) = *(_OWORD *)(v55 + 220);
  *(void *)(v57 + 132) = *(void *)(a1 + 12376);
  *(_OWORD *)(v57 + 144) = *(_OWORD *)(v55 + 256);
  uint64_t v28 = *(void *)(v55 + 272);
  *(unsigned char *)(v57 + 168) = *(unsigned char *)v58;
  *(unsigned char *)(v57 + 196) = *(unsigned char *)(v58 + 36);
  *(unsigned char *)(v57 + 224) = *(unsigned char *)(v58 + 72);
  *(unsigned char *)(v57 + 252) = *(unsigned char *)(v58 + 108);
  *(void *)(v57 + 160) = v28;
  *(_OWORD *)(v57 + 172) = *(_OWORD *)(a1 + 12432);
  *(void *)(v57 + 188) = *(void *)(a1 + 12448);
  *(_OWORD *)(v57 + 200) = *(_OWORD *)(v58 + 40);
  *(void *)(v57 + 216) = *(void *)(v58 + 56);
  *(_OWORD *)(v57 + 228) = *(_OWORD *)(v58 + 76);
  *(void *)(v57 + 244) = *(void *)(a1 + 12520);
  *(_OWORD *)(v57 + 256) = *(_OWORD *)(v58 + 112);
  *(void *)(v57 + 272) = *(void *)(v58 + 128);
  *(unsigned char *)uint64_t v59 = *(unsigned char *)(v58 + 144);
  *(unsigned char *)(v59 + 28) = *(unsigned char *)(v58 + 180);
  *(unsigned char *)(v59 + 56) = *(unsigned char *)(v58 + 216);
  *(unsigned char *)(v59 + 84) = *(unsigned char *)(v58 + 252);
  *(_OWORD *)(v59 + 4) = *(_OWORD *)(a1 + 12576);
  *(void *)(v59 + 20) = *(void *)(a1 + 12592);
  *(_OWORD *)(v59 + 32) = *(_OWORD *)(v58 + 184);
  *(void *)(v59 + 48) = *(void *)(v58 + 200);
  *(_OWORD *)(v59 + 60) = *(_OWORD *)(v58 + 220);
  *(void *)(v59 + 76) = *(void *)(a1 + 12664);
  *(_OWORD *)(v59 + 88) = *(_OWORD *)(v58 + 256);
  *(void *)(v59 + 104) = *(void *)(v58 + 272);
  *(_DWORD *)(v59 + 112) = v18;
  *(_OWORD *)(a2 + 302156) = *(_OWORD *)(v58 + 288);
  memcpy((void *)(a2 + 302172), (const void *)(a1 + 12736), 0x710uLL);
  memcpy((void *)(a2 + 303980), (const void *)(a1 + 14544), 0x710uLL);
  long long v29 = *(_OWORD *)(a1 + 16380);
  long long v30 = *(_OWORD *)(a1 + 16368);
  *(_OWORD *)(a2 + 305788) = *(_OWORD *)(a1 + 16352);
  *(_OWORD *)(a2 + 305804) = v30;
  *(_OWORD *)(a2 + 305816) = v29;
  memcpy((void *)(a2 + 305832), (const void *)(a1 + 20876), 0x4414uLL);
  memcpy((void *)(a2 + 323260), (const void *)(a1 + 38304), 0x8380uLL);
  memcpy((void *)(a2 + 356928), (const void *)(a1 + 71968), 0x1038uLL);
  *long long v61 = *v60;
  v61[1] = v60[1];
  v61[2] = v60[2];
  _OWORD v61[3] = v60[9];
  v61[4] = v60[3];
  v61[5] = v60[4];
  v61[6] = v60[5];
  v61[7] = v60[10];
  v61[8] = v60[6];
  v61[9] = v60[7];
  v61[10] = v60[8];
  v61[11] = v60[11];
  v61[12] = v60[12];
  v61[13] = v60[13];
  v61[14] = v60[14];
  v61[15] = v60[21];
  v61[16] = v60[15];
  v61[17] = v60[16];
  v61[18] = v60[17];
  v61[19] = v60[22];
  v61[20] = v60[18];
  v61[21] = v60[19];
  v61[22] = v60[20];
  v61[23] = v60[23];
  long long v31 = *(_OWORD *)(a1 + 76392);
  long long v32 = *(_OWORD *)(a1 + 76408);
  long long v33 = *(_OWORD *)(a1 + 76440);
  *(_OWORD *)(a2 + 361384) = *(_OWORD *)(a1 + 76424);
  *(_OWORD *)(a2 + 361400) = v33;
  *(_OWORD *)(a2 + 361352) = v31;
  *(_OWORD *)(a2 + 361368) = v32;
  long long v34 = *(_OWORD *)(a1 + 76328);
  long long v35 = *(_OWORD *)(a1 + 76344);
  long long v36 = *(_OWORD *)(a1 + 76376);
  *(_OWORD *)(a2 + 361320) = *(_OWORD *)(a1 + 76360);
  *(_OWORD *)(a2 + 361336) = v36;
  *(_OWORD *)(a2 + 361288) = v34;
  *(_OWORD *)(a2 + 361304) = v35;
  __n128 result = *(__n128 *)(a1 + 76312);
  *(__n128 *)(a2 + 361272) = result;
  return result;
}