uint64_t sub_2550E938C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  void *v10;
  unsigned char *v11;
  FILE **v12;
  unsigned char *v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned char *v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned char *v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  long long *v37;
  uint64_t v38;
  long long v39;
  unsigned char *v40;
  void *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  unint64_t v48;
  int v49;
  int v50;
  char *v51;
  void *v52;
  char *v53;
  int v54;
  uint64_t v55;
  unint64_t v56;
  FILE **v57;
  size_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unsigned char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  unsigned char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t result;
  size_t v86;
  char *v87;
  unsigned char *v88;
  uint64_t v89;
  void *v90;

  v3 = a3;
  *(void *)(a3 + 152) = a1;
  *(void *)(a3 + 160) = a2;
  if (*(_DWORD *)(a3 + 80)) {
    goto LABEL_15;
  }
  *(_DWORD *)(a3 + 80) = 1;
  if (*(_DWORD *)(a3 + 84))
  {
    if (*(void *)(a3 + 8)) {
      goto LABEL_4;
    }
  }
  else
  {
    *(_DWORD *)(a3 + 84) = 1;
    if (*(void *)(a3 + 8))
    {
LABEL_4:
      if (*(void *)(a3 + 16)) {
        goto LABEL_5;
      }
LABEL_9:
      *(void *)(a3 + 16) = *MEMORY[0x263EF8358];
      v4 = *(void *)(a3 + 40);
      if (!v4) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
  *(void *)(a3 + 8) = *MEMORY[0x263EF8350];
  if (!*(void *)(a3 + 16)) {
    goto LABEL_9;
  }
LABEL_5:
  v4 = *(void *)(a3 + 40);
  if (!v4)
  {
LABEL_11:
    sub_2550E9FC4((void *)a3);
    v7 = *(void *)(v3 + 8);
    v8 = malloc_type_malloc(0x48uLL, 0xA4E4DD95uLL);
    if (!v8
      || (v9 = (uint64_t)v8,
          v8[6] = 0x4000,
          v10 = malloc_type_malloc(0x4002uLL, 0xA4E4DD95uLL),
          (*(void *)(v9 + 8) = v10) == 0))
    {
      sub_2550EA068("out of dynamic memory in yy_create_buffer()");
    }
    *(_DWORD *)(v9 + 40) = 1;
    sub_2550EA1AC(v9, v7, v3);
    v5 = *(void *)(v3 + 24);
    *(void *)(*(void *)(v3 + 40) + 8 * v5) = v9;
    v4 = *(void *)(v3 + 40);
    v6 = *(void *)(v4 + 8 * v5);
    goto LABEL_14;
  }
LABEL_10:
  v5 = *(void *)(a3 + 24);
  v6 = *(void *)(v4 + 8 * v5);
  if (!v6) {
    goto LABEL_11;
  }
LABEL_14:
  *(void *)(v3 + 56) = *(void *)(v6 + 32);
  v11 = *(unsigned char **)(v6 + 16);
  *(void *)(v3 + 72) = v11;
  *(void *)(v3 + 136) = v11;
  *(void *)(v3 + 8) = **(void **)(v4 + 8 * v5);
  *(unsigned char *)(v3 + 48) = *v11;
LABEL_15:
  v12 = (FILE **)MEMORY[0x263EF8348];
  while (2)
  {
    v13 = *(unsigned char **)(v3 + 72);
    *v13 = *(unsigned char *)(v3 + 48);
    v14 = *(_DWORD *)(v3 + 84);
    v15 = (unint64_t)v13;
LABEL_17:
    LODWORD(v16) = v14;
    do
    {
      v17 = byte_25513E048[*v13];
      if (word_25513E148[(int)v16])
      {
        *(_DWORD *)(v3 + 112) = v16;
        *(void *)(v3 + 120) = v13;
      }
      v18 = (int)v16;
      v19 = word_25513E4E8[(int)v16] + v17;
      if (v16 != (__int16)word_25513E1DC[v19])
      {
        do
        {
          v18 = (__int16)word_25513E58C[v18];
          if (v18 >= 74) {
            v17 = *((unsigned __int8 *)&unk_25513E630 + v17);
          }
          v19 = word_25513E4E8[v18] + v17;
        }
        while (word_25513E1DC[v19] != (unsigned __int16)v18);
      }
      v16 = (__int16)word_25513E65C[v19];
      ++v13;
    }
    while (word_25513E4E8[v16] != 347);
LABEL_26:
    v20 = v16;
    v21 = (unsigned char *)v15;
LABEL_27:
    v88 = v21;
    v22 = word_25513E148[v20];
    if (v22) {
      goto LABEL_29;
    }
LABEL_28:
    v13 = *(unsigned char **)(v3 + 120);
    v22 = word_25513E148[*(int *)(v3 + 112)];
LABEL_29:
    v23 = v22;
    *(void *)(v3 + 136) = v88;
    *(void *)(v3 + 64) = v13 - v88;
    *(unsigned char *)(v3 + 48) = *v13;
    *v13 = 0;
    *(void *)(v3 + 72) = v13;
    if (!*(_DWORD *)(v3 + 132)) {
      goto LABEL_37;
    }
    while (1)
    {
      if (!v23)
      {
        fwrite("--scanner backing up\n", 0x15uLL, 1uLL, *v12);
LABEL_89:
        *v13 = *(unsigned char *)(v3 + 48);
        v13 = *(unsigned char **)(v3 + 120);
        v22 = word_25513E148[*(int *)(v3 + 112)];
        if (!v22) {
          goto LABEL_28;
        }
        goto LABEL_29;
      }
      if (v23 <= 14)
      {
        fprintf(*v12, "--accepting rule at line %ld (\"%s\")\n");
        goto LABEL_37;
      }
      if (v23 != 16) {
        break;
      }
      fwrite("--(end of buffer or a NUL)\n", 0x1BuLL, 1uLL, *v12);
LABEL_38:
      v89 = *(void *)(v3 + 136);
      *v13 = *(unsigned char *)(v3 + 48);
      v24 = *(void *)(v3 + 40);
      v25 = *(void *)(v3 + 24);
      v26 = *(void *)(v24 + 8 * v25);
      if (*(_DWORD *)(v26 + 64))
      {
        v27 = *(void *)(v3 + 56);
      }
      else
      {
        v27 = *(void *)(v26 + 32);
        *(void *)(v3 + 56) = v27;
        *(void *)v26 = *(void *)(v3 + 8);
        v26 = *(void *)(v24 + 8 * v25);
        *(_DWORD *)(v26 + 64) = 1;
      }
      v28 = *(void *)(v3 + 72);
      v29 = *(unsigned char **)(v26 + 8);
      if (v28 <= (unint64_t)&v29[v27])
      {
        v67 = v13 - v89;
        v21 = *(unsigned char **)(v3 + 136);
        v13 = &v21[(int)v13 - (int)v89 - 1];
        *(void *)(v3 + 72) = v13;
        v20 = *(_DWORD *)(v3 + 84);
        if (v67 >= 2)
        {
          v68 = v21;
          while (*v68)
          {
            v69 = byte_25513E048[*v68];
            if (word_25513E148[v20]) {
              goto LABEL_100;
            }
LABEL_101:
            v70 = v20;
            v71 = word_25513E4E8[v20] + v69;
            if (v20 != (__int16)word_25513E1DC[v71])
            {
              do
              {
                v70 = (__int16)word_25513E58C[v70];
                if (v70 >= 74) {
                  v69 = *((unsigned __int8 *)&unk_25513E630 + v69);
                }
                v71 = word_25513E4E8[v70] + v69;
              }
              while (word_25513E1DC[v71] != (unsigned __int16)v70);
            }
            v20 = (__int16)word_25513E65C[v71];
            if (++v68 == v13) {
              goto LABEL_108;
            }
          }
          v69 = 1u;
          if (!word_25513E148[v20]) {
            goto LABEL_101;
          }
LABEL_100:
          *(_DWORD *)(v3 + 112) = v20;
          *(void *)(v3 + 120) = v68;
          goto LABEL_101;
        }
LABEL_108:
        if (word_25513E148[v20])
        {
          *(_DWORD *)(v3 + 112) = v20;
          *(void *)(v3 + 120) = v13;
        }
        v72 = v20;
        v73 = word_25513E4E8[v20] + 1;
        if (v20 != (__int16)word_25513E1DC[v73])
        {
          do
          {
            v74 = word_25513E58C[v72];
            v72 = (__int16)v74;
            v73 = word_25513E4E8[(__int16)v74] + 1;
          }
          while (v74 != word_25513E1DC[v73]);
        }
        if (!v73) {
          goto LABEL_27;
        }
        v75 = word_25513E65C[v73];
        if (v75 == 73) {
          goto LABEL_27;
        }
        v14 = (__int16)v75;
        *(void *)(v3 + 72) = ++v13;
        v15 = (unint64_t)v21;
        goto LABEL_17;
      }
      if (v28 > (unint64_t)&v29[v27 + 1]) {
        sub_2550EA068("fatal flex scanner internal error--end of buffer missed");
      }
      v15 = *(void *)(v3 + 136);
      if (!*(_DWORD *)(v26 + 60))
      {
        if (v28 - v15 != 1) {
          goto LABEL_93;
        }
        goto LABEL_84;
      }
      v30 = ~v15 + v28;
      if (v30 >= 1)
      {
        LODWORD(v31) = 0;
        v32 = (v28 - v15 - 2);
        if (v32 < 7)
        {
          v33 = *(char **)(v3 + 136);
        }
        else
        {
          v33 = *(char **)(v3 + 136);
          if ((unint64_t)&v29[-v15] >= 0x20)
          {
            v34 = v32 + 1;
            if (v32 >= 0x1F)
            {
              v35 = v34 & 0x1FFFFFFE0;
              v36 = v29 + 16;
              v37 = (long long *)(v15 + 16);
              v38 = v34 & 0x1FFFFFFE0;
              do
              {
                v39 = *v37;
                *(v36 - 1) = *(v37 - 1);
                *v36 = v39;
                v36 += 2;
                v37 += 2;
                v38 -= 32;
              }
              while (v38);
              if (v34 == v35) {
                goto LABEL_64;
              }
              if ((v34 & 0x18) != 0) {
                goto LABEL_56;
              }
              v29 += v35;
              v33 = (char *)(v15 + v35);
              LODWORD(v31) = v34 & 0xFFFFFFE0;
            }
            else
            {
              v35 = 0;
LABEL_56:
              v31 = v34 & 0x1FFFFFFF8;
              v33 = (char *)(v15 + (v34 & 0x1FFFFFFF8));
              v40 = &v29[v34 & 0x1FFFFFFF8];
              v41 = &v29[v35];
              v42 = (uint64_t *)(v15 + v35);
              v43 = v35 - (v34 & 0x1FFFFFFF8);
              do
              {
                v44 = *v42++;
                *v41++ = v44;
                v43 += 8;
              }
              while (v43);
              v29 = v40;
              if (v34 == v31)
              {
LABEL_64:
                v26 = *(void *)(*(void *)(v3 + 40) + 8 * *(void *)(v3 + 24));
                goto LABEL_65;
              }
            }
          }
        }
        v45 = v31 + v15 - v28 + 1;
        do
        {
          v46 = *v33++;
          *v29++ = v46;
        }
        while (!__CFADD__(v45++, 1));
        goto LABEL_64;
      }
LABEL_65:
      if (*(_DWORD *)(v26 + 64) == 2)
      {
        *(void *)(v3 + 56) = 0;
        *(void *)(v26 + 32) = 0;
        if (v30) {
          goto LABEL_67;
        }
LABEL_78:
        sub_2550EA0A0(*(void *)(v3 + 8), v3);
        v48 = *(void *)(v3 + 56);
        v26 = *(void *)(*(void *)(v3 + 40) + 8 * *(void *)(v3 + 24));
        v49 = 1;
        goto LABEL_79;
      }
      v90 = (void *)v3;
      v50 = v30 + 1;
      if (*(_DWORD *)(v26 + 24) == v30 + 1)
      {
        v51 = *(char **)(v3 + 72);
        do
        {
          if (!*(_DWORD *)(v26 + 40))
          {
            *(void *)(v26 + 8) = 0;
LABEL_160:
            sub_2550EA068("fatal error - scanner input buffer overflow");
          }
          v52 = *(void **)(v26 + 8);
          *(_DWORD *)(v26 + 24) = 2 * v50;
          v53 = (char *)malloc_type_realloc(v52, 2 * v50 + 2, 0x6B63ED5uLL);
          *(void *)(v26 + 8) = v53;
          if (!v53) {
            goto LABEL_160;
          }
          v51 = &v53[(int)v51 - (int)v52];
          v90[9] = v51;
          v26 = *(void *)(v90[5] + 8 * v90[3]);
        }
        while (*(_DWORD *)(v26 + 24) == v50);
      }
      v3 = (uint64_t)v90;
      v54 = std::istream::get();
      if (v54 == -1)
      {
        v90[7] = 0;
        ++*(_DWORD *)(v90[20] + 12);
        v26 = *(void *)(v90[5] + 8 * v90[3]);
        v12 = (FILE **)MEMORY[0x263EF8348];
        *(void *)(v26 + 32) = 0;
        if (v30)
        {
LABEL_67:
          v48 = 0;
          v49 = 2;
          *(_DWORD *)(v26 + 64) = 2;
          goto LABEL_79;
        }
        goto LABEL_78;
      }
      *(unsigned char *)(*(void *)(*(void *)(v90[5] + 8 * v90[3]) + 8) + v30) = v54;
      v90[7] = 1;
      v55 = v90[20];
      ++*(_DWORD *)(v55 + 12);
      if (v54 == 10) {
        *(void *)(v55 + 8) = (*(_DWORD *)(v55 + 8) + 1);
      }
      v49 = 0;
      v26 = *(void *)(v90[5] + 8 * v90[3]);
      *(void *)(v26 + 32) = 1;
      v48 = 1;
      v12 = (FILE **)MEMORY[0x263EF8348];
LABEL_79:
      v56 = v48 + v30;
      if (v56 <= *(int *)(v26 + 24))
      {
        v63 = *(void *)(v26 + 8);
      }
      else
      {
        v57 = v12;
        v58 = v56 + (v48 >> 1);
        v59 = malloc_type_realloc(*(void **)(v26 + 8), v58, 0x6B63ED5uLL);
        v60 = *(void *)(v3 + 40);
        v61 = 8 * *(void *)(v3 + 24);
        *(void *)(*(void *)(v60 + v61) + 8) = v59;
        v62 = *(void *)(v60 + v61);
        v63 = *(void *)(v62 + 8);
        if (!v63) {
          sub_2550EA068("out of dynamic memory in yy_get_next_buffer()");
        }
        *(_DWORD *)(v62 + 24) = v58 - 2;
        v56 = *(void *)(v3 + 56) + v30;
        v12 = v57;
      }
      *(void *)(v3 + 56) = v56;
      *(unsigned char *)(v63 + v56) = 0;
      *(unsigned char *)(*(void *)(v3 + 56)
               + *(void *)(*(void *)(*(void *)(v3 + 40) + 8 * *(void *)(v3 + 24)) + 8)
               + 1) = 0;
      v64 = *(void *)(v3 + 40);
      v65 = *(void *)(v3 + 24);
      v15 = *(void *)(*(void *)(v64 + 8 * v65) + 8);
      *(void *)(v3 + 136) = v15;
      if (v49 != 1)
      {
        if (v49)
        {
          v29 = *(unsigned char **)(*(void *)(v64 + 8 * v65) + 8);
          v27 = *(void *)(v3 + 56);
LABEL_93:
          v13 = &v29[v27];
          *(void *)(v3 + 72) = &v29[v27];
          v20 = *(_DWORD *)(v3 + 84);
          v21 = (unsigned char *)v15;
          if (v15 < (unint64_t)v13)
          {
            v76 = (unsigned char *)v15;
            LODWORD(v16) = *(_DWORD *)(v3 + 84);
            while (*v76)
            {
              v77 = byte_25513E048[*v76];
              if (word_25513E148[(int)v16]) {
                goto LABEL_118;
              }
LABEL_119:
              v78 = (int)v16;
              v79 = word_25513E4E8[(int)v16] + v77;
              if (v16 != (__int16)word_25513E1DC[v79])
              {
                do
                {
                  v78 = (__int16)word_25513E58C[v78];
                  if (v78 >= 74) {
                    v77 = *((unsigned __int8 *)&unk_25513E630 + v77);
                  }
                  v79 = word_25513E4E8[v78] + v77;
                }
                while (word_25513E1DC[v79] != (unsigned __int16)v78);
              }
              LODWORD(v16) = (__int16)word_25513E65C[v79];
              if (++v76 == v13) {
                goto LABEL_26;
              }
            }
            v77 = 1u;
            if (!word_25513E148[(int)v16]) {
              goto LABEL_119;
            }
LABEL_118:
            *(_DWORD *)(v3 + 112) = v16;
            *(void *)(v3 + 120) = v76;
            goto LABEL_119;
          }
          goto LABEL_27;
        }
        v80 = v13 - v89;
        v13 = (unsigned char *)(v15 + (int)v13 - (int)v89 - 1);
        *(void *)(v3 + 72) = v13;
        v14 = *(_DWORD *)(v3 + 84);
        if (v80 >= 2)
        {
          v81 = (unsigned char *)v15;
          while (*v81)
          {
            v82 = byte_25513E048[*v81];
            if (word_25513E148[v14]) {
              goto LABEL_131;
            }
LABEL_132:
            v83 = v14;
            v84 = word_25513E4E8[v14] + v82;
            if (v14 != (__int16)word_25513E1DC[v84])
            {
              do
              {
                v83 = (__int16)word_25513E58C[v83];
                if (v83 >= 74) {
                  v82 = *((unsigned __int8 *)&unk_25513E630 + v82);
                }
                v84 = word_25513E4E8[v83] + v82;
              }
              while (word_25513E1DC[v84] != (unsigned __int16)v83);
            }
            v14 = (__int16)word_25513E65C[v84];
            if (++v81 == v13) {
              goto LABEL_17;
            }
          }
          v82 = 1u;
          if (!word_25513E148[v14]) {
            goto LABEL_132;
          }
LABEL_131:
          *(_DWORD *)(v3 + 112) = v14;
          *(void *)(v3 + 120) = v81;
          goto LABEL_132;
        }
        goto LABEL_17;
      }
LABEL_84:
      *(_DWORD *)(v3 + 88) = 0;
      *(void *)(v3 + 72) = v15;
      v66 = *(_DWORD *)(v3 + 84);
      if (v66 >= 1) {
        --v66;
      }
      v23 = (v66 >> 1) + 17;
      if (!*(_DWORD *)(v3 + 132)) {
        goto LABEL_37;
      }
    }
    if (v23 == 15)
    {
      fprintf(*v12, "--accepting default rule (\"%s\")\n", *(const char **)(v3 + 136));
LABEL_165:
      sub_2550EA068("flex scanner jammed");
    }
    fprintf(*v12, "--EOF (start condition %d)\n");
LABEL_37:
    switch(v23)
    {
      case 0:
        goto LABEL_89;
      case 1:
      case 12:
      case 13:
        continue;
      case 2:
        return 262;
      case 3:
        return 263;
      case 4:
        return 264;
      case 5:
        return 265;
      case 6:
        v86 = strlen(*(const char **)(v3 + 136));
        v87 = strndup((const char *)(*(void *)(v3 + 136) + 1), v86 - 2);
        goto LABEL_153;
      case 7:
        *__error() = 0;
        **(double **)(v3 + 152) = strtod(*(const char **)(v3 + 136), 0);
        if (*__error() == 34)
        {
          fprintf(*v12, "Error converting '%s' to an fp64 value.\n");
          goto LABEL_150;
        }
        result = 259;
        break;
      case 8:
        *__error() = 0;
        **(void **)(v3 + 152) = strtoll(*(const char **)(v3 + 136), 0, 10);
        if (*__error() != 34) {
          goto LABEL_156;
        }
        fprintf(*v12, "Error converting '%s' to an i64 value.\n");
        goto LABEL_150;
      case 9:
        *__error() = 0;
        **(void **)(v3 + 152) = strtoll(*(const char **)(v3 + 136), 0, 16);
        if (*__error() == 34)
        {
          fprintf(*v12, "Error converting hex value '%s' to an i64.\n");
LABEL_150:
          result = 0;
        }
        else
        {
LABEL_156:
          result = 260;
        }
        break;
      case 10:
        **(void **)(v3 + 152) = strdup(*(const char **)(v3 + 136));
        return 258;
      case 11:
        v87 = strdup(*(const char **)(v3 + 136));
LABEL_153:
        **(void **)(v3 + 152) = v87;
        return 261;
      case 14:
        **(unsigned char **)(v3 + 152) = **(unsigned char **)(v3 + 136);
        return **(char **)(v3 + 136);
      case 15:
        goto LABEL_165;
      case 16:
        goto LABEL_38;
      case 17:
        return 0;
      default:
        sub_2550EA068("fatal flex scanner internal error--no action found");
    }
    return result;
  }
}

double sub_2550E9FC4(void *a1)
{
  v2 = (void *)a1[5];
  if (v2)
  {
    uint64_t v3 = a1[4];
    if (a1[3] >= (unint64_t)(v3 - 1))
    {
      uint64_t v4 = v3 + 8;
      v5 = (char *)malloc_type_realloc(v2, 8 * (v3 + 8), 0x6B63ED5uLL);
      a1[5] = v5;
      if (v5)
      {
        v6 = &v5[8 * a1[4]];
        double result = 0.0;
        *((_OWORD *)v6 + 2) = 0u;
        *((_OWORD *)v6 + 3) = 0u;
        *(_OWORD *)v6 = 0u;
        *((_OWORD *)v6 + 1) = 0u;
        a1[4] = v4;
        return result;
      }
LABEL_8:
      sub_2550EA068("out of dynamic memory in yyensure_buffer_stack()");
    }
  }
  else
  {
    v8 = malloc_type_malloc(8uLL, 0xA4E4DD95uLL);
    a1[5] = v8;
    if (!v8) {
      goto LABEL_8;
    }
    void *v8 = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 3) = xmmword_25513E030;
  }
  return result;
}

void sub_2550EA068(const char *a1)
{
}

int *sub_2550EA0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (*(void *)(v4 + 8 * v5)) {
      goto LABEL_6;
    }
  }
  sub_2550E9FC4((void *)a2);
  uint64_t v6 = *(void *)(a2 + 8);
  v7 = malloc_type_malloc(0x48uLL, 0xA4E4DD95uLL);
  if (!v7
    || (uint64_t v8 = (uint64_t)v7,
        v7[6] = 0x4000,
        v9 = malloc_type_malloc(0x4002uLL, 0xA4E4DD95uLL),
        (*(void *)(v8 + 8) = v9) == 0))
  {
    sub_2550EA068("out of dynamic memory in yy_create_buffer()");
  }
  *(_DWORD *)(v8 + 40) = 1;
  sub_2550EA1AC(v8, v6, a2);
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(*(void *)(a2 + 40) + 8 * v5) = v8;
  uint64_t v4 = *(void *)(a2 + 40);
  if (v4) {
LABEL_6:
  }
    uint64_t v10 = *(void *)(v4 + 8 * v5);
  else {
    uint64_t v10 = 0;
  }
  double result = sub_2550EA1AC(v10, a1, a2);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v13 = 8 * *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(v12 + v13);
  *(void *)(a2 + 56) = *(void *)(v14 + 32);
  v15 = *(unsigned char **)(v14 + 16);
  *(void *)(a2 + 72) = v15;
  *(void *)(a2 + 136) = v15;
  *(void *)(a2 + 8) = **(void **)(v12 + v13);
  *(unsigned char *)(a2 + 48) = *v15;
  return result;
}

int *sub_2550EA1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *__error();
  if (a1)
  {
    *(void *)(a1 + 32) = 0;
    **(unsigned char **)(a1 + 8) = 0;
    *(unsigned char *)(*(void *)(a1 + 8) + 1) = 0;
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(_DWORD *)(a1 + 48) = 1;
    *(_DWORD *)(a1 + 64) = 0;
    uint64_t v7 = *(void *)(a3 + 40);
    if (v7 && *(void *)(v7 + 8 * *(void *)(a3 + 24)) == a1)
    {
      uint64_t v9 = 8 * *(void *)(a3 + 24);
      uint64_t v10 = *(void *)(v7 + v9);
      *(void *)(a3 + 56) = *(void *)(v10 + 32);
      v11 = *(unsigned char **)(v10 + 16);
      *(void *)(a3 + 72) = v11;
      *(void *)(a3 + 136) = v11;
      *(void *)(a3 + 8) = **(void **)(v7 + v9);
      *(unsigned char *)(a3 + 48) = *v11;
      *(void *)a1 = a2;
      *(_DWORD *)(a1 + 60) = 1;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(a3 + 40);
  }
  *(void *)a1 = a2;
  *(_DWORD *)(a1 + 60) = 1;
  if (v7)
  {
LABEL_10:
    if (*(void *)(v7 + 8 * *(void *)(a3 + 24)) == a1) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (a1) {
LABEL_8:
  }
    *(void *)(a1 + 52) = 1;
LABEL_9:
  *(_DWORD *)(a1 + 44) = 0;
  double result = __error();
  *double result = v6;
  return result;
}

uint64_t sub_2550EA2C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v4 = malloc_type_malloc(0xA8uLL, 0xA4E4DD95uLL);
    *a2 = v4;
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t result = 0;
      v5[20] = 0;
      *((_OWORD *)v5 + 8) = 0u;
      *((_OWORD *)v5 + 9) = 0u;
      *((_OWORD *)v5 + 6) = 0u;
      *((_OWORD *)v5 + 7) = 0u;
      *((_OWORD *)v5 + 4) = 0u;
      *((_OWORD *)v5 + 5) = 0u;
      *((_OWORD *)v5 + 2) = 0u;
      *((_OWORD *)v5 + 3) = 0u;
      *(_OWORD *)uint64_t v5 = 0u;
      *((_OWORD *)v5 + 1) = 0u;
      *(void *)*a2 = a1;
      uint64_t v7 = (void *)*a2;
      *((_DWORD *)v7 + 23) = 0;
      *((_DWORD *)v7 + 24) = 0;
      v7[13] = 0;
      *(_OWORD *)(v7 + 1) = 0u;
      *(_OWORD *)(v7 + 3) = 0u;
      v7[5] = 0;
      v7[9] = 0;
      v7[10] = 0;
      return result;
    }
    uint64_t v8 = __error();
    int v9 = 12;
  }
  else
  {
    uint64_t v8 = __error();
    int v9 = 22;
  }
  int *v8 = v9;
  return 1;
}

uint64_t sub_2550EA36C(uint64_t a1)
{
  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = &v2[*(void *)(a1 + 24)];
    for (uint64_t i = *v3; *v3; uint64_t i = *v3)
    {
      *uint64_t v3 = 0;
      if (*(_DWORD *)(i + 40)) {
        free(*(void **)(i + 8));
      }
      free((void *)i);
      uint64_t v5 = *(void *)(a1 + 24);
      *(void *)(*(void *)(a1 + 40) + 8 * v5) = 0;
      v2 = *(void **)(a1 + 40);
      if (!v2) {
        break;
      }
      uint64_t v6 = v2[v5];
      if (v6)
      {
        v2[v5] = 0;
        if (*(_DWORD *)(v6 + 40)) {
          free(*(void **)(v6 + 8));
        }
        free((void *)v6);
        uint64_t v5 = *(void *)(a1 + 24);
        *(void *)(*(void *)(a1 + 40) + 8 * v5) = 0;
        if (v5) {
          *(void *)(a1 + 24) = --v5;
        }
        v2 = *(void **)(a1 + 40);
        if (!v2) {
          break;
        }
        uint64_t v7 = v2[v5];
        if (v7)
        {
          uint64_t v8 = *(void *)(v7 + 32);
          int v9 = *(unsigned char **)(v7 + 16);
          *(void *)(a1 + 72) = v9;
          *(void *)(a1 + 136) = v9;
          uint64_t v10 = (void *)v2[v5];
          *(void *)(a1 + 56) = v8;
          *(void *)(a1 + 8) = *v10;
          *(unsigned char *)(a1 + 48) = *v9;
          *(_DWORD *)(a1 + 88) = 1;
        }
      }
      uint64_t v3 = &v2[v5];
    }
  }
  free(v2);
  *(void *)(a1 + 40) = 0;
  free(*(void **)(a1 + 104));
  free((void *)a1);
  return 0;
}

void sub_2550EA488(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  sub_25510F8A8(a1, &v13);
  uint64_t v3 = v13;
  uint64_t v4 = v14;
  if (v13 != v14)
  {
    do
    {
      uint64_t v5 = *(void *)v3;
      if ((*(unsigned int (**)(void))(**(void **)v3 + 16))(*(void *)v3) == 1)
      {
        switch(*(_DWORD *)(v5 + 96))
        {
          case 0:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_2550EABB0(__p, *(void **)(v5 + 48), *(void *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              uint64_t v10 = *(void *)(v5 + 64);
            }
            *(void *)&long long v11 = *(void *)(v5 + 72);
            sub_2550EB29C(a2, (uint64_t)__p, (long long *)__p);
            goto LABEL_6;
          case 1:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_2550EABB0(__p, *(void **)(v5 + 48), *(void *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              uint64_t v10 = *(void *)(v5 + 64);
            }
            *(void *)&long long v11 = *(void *)(v5 + 72);
            sub_2550EBC44(a2, (uint64_t)__p, (uint64_t)__p);
            goto LABEL_6;
          case 2:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_2550EABB0(__p, *(void **)(v5 + 48), *(void *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              uint64_t v10 = *(void *)(v5 + 64);
            }
            if (*(char *)(v5 + 95) < 0)
            {
              sub_2550EABB0(&v11, *(void **)(v5 + 72), *(void *)(v5 + 80));
            }
            else
            {
              long long v11 = *(_OWORD *)(v5 + 72);
              uint64_t v12 = *(void *)(v5 + 88);
            }
            sub_2550EBFD4(a2, (uint64_t)__p, (uint64_t)__p);
            if (SHIBYTE(v12) < 0) {
              operator delete((void *)v11);
            }
            goto LABEL_6;
          case 3:
            if (*(char *)(v5 + 71) < 0)
            {
              sub_2550EABB0(__p, *(void **)(v5 + 48), *(void *)(v5 + 56));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v5 + 48);
              uint64_t v10 = *(void *)(v5 + 64);
            }
            long long v11 = 0uLL;
            uint64_t v12 = 0;
            sub_2550EAD40((char *)&v11, *(void *)(v5 + 72), *(void *)(v5 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 80) - *(void *)(v5 + 72)) >> 3));
            sub_2550EC374(a2, (uint64_t)__p, (uint64_t)__p);
            uint64_t v6 = v11;
            if ((void)v11)
            {
              uint64_t v7 = *((void *)&v11 + 1);
              uint64_t v8 = (void *)v11;
              if (*((void *)&v11 + 1) != (void)v11)
              {
                do
                {
                  if (*(char *)(v7 - 1) < 0) {
                    operator delete(*(void **)(v7 - 24));
                  }
                  v7 -= 24;
                }
                while (v7 != v6);
                uint64_t v8 = (void *)v11;
              }
              *((void *)&v11 + 1) = v6;
              operator delete(v8);
            }
            goto LABEL_6;
          case 4:
            sub_2550EAF04(__p, (long long *)(v5 + 48), v5 + 72);
            sub_2550EC714(a2, (uint64_t)__p, (uint64_t)__p);
            if ((void)v11)
            {
              *((void *)&v11 + 1) = v11;
              operator delete((void *)v11);
            }
LABEL_6:
            if (SHIBYTE(v10) < 0) {
              operator delete(__p[0]);
            }
            break;
          default:
            break;
        }
      }
      v3 += 8;
    }
    while (v3 != v4);
    uint64_t v3 = v13;
  }
  if (v3)
  {
    uint64_t v14 = v3;
    operator delete(v3);
  }
}

void sub_2550EA778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  sub_2550EB130(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_2550EA820(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_5:
    operator delete(*(void **)a1);
    return a1;
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_5;
  }
  return a1;
}

uint64_t sub_2550EA870(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void **)(a1 + 24);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0) {
          operator delete(*(void **)(v3 - 24));
        }
        v3 -= 24;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v2;
    operator delete(v4);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2550EA8F4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_2550EA938(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  uint64_t v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    while (1)
    {
      sub_25512298C(a2, v3, &v14);
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      uint64_t v7 = v15;
      if (v15)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v15);
        uint64_t v13 = v7;
        if (v7) {
          uint64_t v12 = v14;
        }
      }
      uint64_t v8 = *(uint64_t **)(a3 + 8);
      if ((unint64_t)v8 < *(void *)(a3 + 16)) {
        break;
      }
      uint64_t v10 = sub_2550EAFD4((char **)a3, (uint64_t)&v12);
      long long v11 = v13;
      *(void *)(a3 + 8) = v10;
      if (v11 && !atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        int v9 = v15;
        if (!v15) {
          goto LABEL_3;
        }
LABEL_13:
        std::__shared_weak_count::__release_weak(v9);
        goto LABEL_3;
      }
      int v9 = v15;
      if (v15) {
        goto LABEL_13;
      }
LABEL_3:
      v3 += 24;
      if (v3 == v4) {
        return;
      }
    }
    uint64_t *v8 = v12;
    v8[1] = (uint64_t)v7;
    *(void *)(a3 + 8) = v8 + 2;
    int v9 = v15;
    if (!v15) {
      goto LABEL_3;
    }
    goto LABEL_13;
  }
}

void sub_2550EAA60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  sub_2550EAA90((uint64_t)&a9);
  if (a12) {
    std::__shared_weak_count::__release_weak(a12);
  }
  sub_2550EAAFC(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_2550EAA90(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void **sub_2550EAAFC(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    uint64_t v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = (std::__shared_weak_count *)*((void *)v3 - 1);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_2550EABB0(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    void *v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_2550EAC50()
{
}

void sub_2550EAC68(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_2550EACC4(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_2704446C8, MEMORY[0x263F8C060]);
}

void sub_2550EACB0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_2550EACC4(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C388] + 16);
  return result;
}

void sub_2550EACF8()
{
  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, (struct type_info *)&unk_2704446F8, MEMORY[0x263F8C090]);
}

void sub_2550EAD2C(void *a1)
{
}

char *sub_2550EAD40(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2550EAEEC();
    }
    uint64_t result = (char *)operator new(24 * a4);
    uint64_t v8 = result;
    void *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      uint64_t v9 = 0;
      do
      {
        uint64_t result = &v8[v9];
        uint64_t v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          uint64_t result = (char *)sub_2550EABB0(result, *(void **)v10, *(void *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)uint64_t result = *(_OWORD *)v10;
          *((void *)result + 2) = *(void *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_2550EAE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void ***sub_2550EAE68(void ***a1)
{
  if (!*((unsigned char *)a1 + 8))
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (void **)**a1;
    if (v3)
    {
      uint64_t v4 = (void **)v2[1];
      uint64_t v5 = **a1;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0) {
            operator delete(*(v4 - 3));
          }
          v4 -= 3;
        }
        while (v4 != v3);
        uint64_t v5 = **a1;
      }
      v2[1] = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_2550EAEEC()
{
}

void *sub_2550EAF04(void *__dst, long long *a2, uint64_t a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2550EABB0(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  uint64_t v6 = *(const void **)a3;
  int64_t v7 = *(void *)(a3 + 8) - *(void *)a3;
  if (v7)
  {
    if (v7 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v8 = (char *)operator new(v7);
    __dst[3] = v8;
    __dst[4] = v8;
    uint64_t v9 = &v8[8 * (v7 >> 3)];
    __dst[5] = v9;
    memcpy(v8, v6, v7);
    __dst[4] = v9;
  }
  return __dst;
}

void sub_2550EAFB0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_25513D520(v1);
  _Unwind_Resume(a1);
}

char *sub_2550EAFD4(char **a1, uint64_t a2)
{
  uint64_t v3 = (a1[1] - *a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    sub_2550EAEEC();
  }
  uint64_t v5 = a1[2] - *a1;
  if (v5 >> 3 > v4) {
    unint64_t v4 = v5 >> 3;
  }
  BOOL v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  unint64_t v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6) {
    unint64_t v7 = v4;
  }
  if (v7 >> 60) {
    sub_2550EACF8();
  }
  uint64_t v9 = 16 * v7;
  uint64_t v10 = (char *)operator new(16 * v7);
  long long v11 = &v10[16 * v3];
  *(_OWORD *)long long v11 = *(_OWORD *)a2;
  uint64_t v12 = v11 + 16;
  uint64_t v13 = &v10[v9];
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v14 = *a1;
  v15 = a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v13;
    if (!v15) {
      return v12;
    }
    goto LABEL_17;
  }
  do
  {
    long long v16 = *((_OWORD *)v15 - 1);
    v15 -= 16;
    *((_OWORD *)v11 - 1) = v16;
    v11 -= 16;
    *(void *)v15 = 0;
    *((void *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v17 = *a1;
  v15 = a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v13;
  if (v15 != v17)
  {
    do
    {
      v18 = (std::__shared_weak_count *)*((void *)v15 - 1);
      if (v18 && !atomic_fetch_add(&v18->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      v15 -= 16;
    }
    while (v15 != v17);
    v15 = v17;
  }
  if (v15) {
LABEL_17:
  }
    operator delete(v15);
  return v12;
}

uint64_t sub_2550EB130(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_270444710[v4])(&v7, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_2550EB1E8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_2550EB1FC(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)*a2;
  if (*a2)
  {
    uint64_t v4 = (void **)a2[1];
    uint64_t v5 = *a2;
    if (v4 != v2)
    {
      do
      {
        if (*((char *)v4 - 1) < 0) {
          operator delete(*(v4 - 3));
        }
        v4 -= 3;
      }
      while (v4 != v2);
      uint64_t v5 = *a2;
    }
    a2[1] = v2;
    operator delete(v5);
  }
}

void sub_2550EB288(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v2;
    operator delete(v2);
  }
}

unsigned __int8 *sub_2550EB29C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  v22 = (void *)(a1 + 16);
  v15 = (unsigned __int8 *)operator new(0x48uLL);
  long long v23 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v24 = *((void *)a3 + 2);
  uint64_t v25 = *((void *)a3 + 3);
  *((void *)a3 + 2) = 0;
  v40[0] = v15;
  v40[1] = a1 + 16;
  *(void *)v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = v23;
  *((void *)v15 + 4) = v24;
  *((void *)v15 + 5) = v25;
  *((_DWORD *)v15 + 16) = 0;
  char v41 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    BOOL v28 = 1;
    if (v11 >= 3) {
      BOOL v28 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v11);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v36 = *(void *)a1;
  v37 = *(void **)(*(void *)a1 + 8 * v3);
  if (v37)
  {
    *(void *)v15 = *v37;
LABEL_73:
    void *v37 = v15;
    goto LABEL_74;
  }
  *(void *)v15 = *v22;
  void *v22 = v15;
  *(void *)(v36 + 8 * v3) = v22;
  if (*(void *)v15)
  {
    unint64_t v38 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v38 >= v11) {
        v38 %= v11;
      }
    }
    else
    {
      v38 &= v11 - 1;
    }
    v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550EB60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2550EB624(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 64);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_270444710[v3])(&v5, v2 + 40);
      }
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

unint64_t sub_2550EB6AC(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 <= 0x40)
    {
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v7 = *a2 - 0x3C5A37A36834CED9 * (v6 + a3);
      uint64_t v9 = a2[2];
      uint64_t v8 = a2[3];
      uint64_t v10 = __ROR8__(v7 + v8, 52);
      uint64_t v11 = v7 + a2[1];
      uint64_t v12 = __ROR8__(v11, 7);
      uint64_t v13 = v11 + v9;
      uint64_t v14 = *(uint64_t *)((char *)a2 + a3 - 32) + v9;
      uint64_t v15 = *(uint64_t *)((char *)a2 + a3 - 8) + v8;
      uint64_t v16 = __ROR8__(v15 + v14, 52);
      uint64_t v17 = v12 + __ROR8__(*a2 - 0x3C5A37A36834CED9 * (v6 + a3), 37) + v10 + __ROR8__(v13, 31);
      uint64_t v18 = *(uint64_t *)((char *)a2 + a3 - 24) + v14 + v6;
      uint64_t v19 = v18 + v15;
      unint64_t v20 = 0x9AE16A3B2F90404FLL;
      unint64_t v21 = 0xC3A5C85C97CB3127 * (v19 + v17)
          - 0x651E95C4D06FBFB1
          * (v13
           + v8
           + __ROR8__(v14, 37)
           + __ROR8__(*(uint64_t *)((char *)a2 + a3 - 24) + v14, 7)
           + v16
           + __ROR8__(v18, 31));
      unint64_t v22 = v17 - 0x3C5A37A36834CED9 * (v21 ^ (v21 >> 47));
      return (v22 ^ (v22 >> 47)) * v20;
    }
    uint64_t v29 = *(uint64_t *)((char *)a2 + a3 - 48);
    uint64_t v30 = *(uint64_t *)((char *)a2 + a3 - 40);
    uint64_t v31 = *(uint64_t *)((char *)a2 + a3 - 24);
    uint64_t v33 = *(uint64_t *)((char *)a2 + a3 - 64);
    uint64_t v32 = *(uint64_t *)((char *)a2 + a3 - 56);
    uint64_t v34 = *(uint64_t *)((char *)a2 + a3 - 16);
    uint64_t v35 = *(uint64_t *)((char *)a2 + a3 - 8);
    unint64_t v36 = v32 + v34;
    unint64_t v37 = 0x9DDFEA08EB382D69
        * (v31 ^ ((0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v31 ^ (v29 + a3))));
    unint64_t v38 = 0x9DDFEA08EB382D69 * (v37 ^ (v37 >> 47));
    unint64_t v39 = v33 + a3 + v32 + v29;
    uint64_t v40 = v39 + v30;
    unint64_t v41 = __ROR8__(v39, 44) + v33 + a3 + __ROR8__(v30 + v33 + a3 - 0x622015F714C7D297 * (v37 ^ (v37 >> 47)), 21);
    uint64_t v42 = v32 + v34 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
    uint64_t v43 = v42 + v31 + v34;
    uint64_t v44 = __ROR8__(v43, 44);
    uint64_t v45 = v43 + v35;
    uint64_t v46 = v44 + v42 + __ROR8__(v42 + v30 + v35, 21);
    uint64_t v48 = *a2;
    v47 = a2 + 4;
    unint64_t v49 = v48 - 0x4B6D499041670D8DLL * v30;
    uint64_t v50 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
    do
    {
      uint64_t v51 = *(v47 - 3);
      uint64_t v52 = v49 + v40 + v36 + v51;
      uint64_t v53 = v47[2];
      uint64_t v54 = v47[3];
      uint64_t v55 = v47[1];
      unint64_t v36 = v55 + v40 - 0x4B6D499041670D8DLL * __ROR8__(v36 + v41 + v53, 42);
      uint64_t v56 = v38 + v45;
      uint64_t v57 = *(v47 - 2);
      uint64_t v58 = *(v47 - 1);
      uint64_t v59 = *(v47 - 4) - 0x4B6D499041670D8DLL * v41;
      uint64_t v60 = v59 + v45 + v58;
      uint64_t v61 = v59 + v51 + v57;
      uint64_t v40 = v61 + v58;
      uint64_t v62 = __ROR8__(v61, 44) + v59;
      unint64_t v63 = (0xB492B66FBE98F273 * __ROR8__(v52, 37)) ^ v46;
      unint64_t v49 = 0xB492B66FBE98F273 * __ROR8__(v56, 33);
      unint64_t v41 = v62 + __ROR8__(v60 + v63, 21);
      unint64_t v64 = v49 + v46 + *v47;
      uint64_t v45 = v64 + v55 + v53 + v54;
      uint64_t v46 = __ROR8__(v64 + v55 + v53, 44) + v64 + __ROR8__(v36 + v57 + v64 + v54, 21);
      v47 += 8;
      unint64_t v38 = v63;
      v50 += 64;
    }
    while (v50);
    unint64_t v65 = v49
        - 0x622015F714C7D297
        * ((0x9DDFEA08EB382D69
          * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) ^ ((0x9DDFEA08EB382D69 * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v41)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v41)))) >> 47));
    unint64_t v66 = 0x9DDFEA08EB382D69
        * (v65 ^ (v63
                - 0x4B6D499041670D8DLL * (v36 ^ (v36 >> 47))
                - 0x622015F714C7D297
                * ((0x9DDFEA08EB382D69
                  * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) ^ ((0x9DDFEA08EB382D69 * (v45 ^ ((0x9DDFEA08EB382D69 * (v45 ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * (v45 ^ v40)))) >> 47))));
    return 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) ^ ((0x9DDFEA08EB382D69 * (v65 ^ (v66 >> 47) ^ v66)) >> 47));
  }
  else
  {
    if (a3 > 0x10)
    {
      uint64_t v23 = a2[1];
      unint64_t v24 = 0xB492B66FBE98F273 * *a2;
      uint64_t v25 = __ROR8__(0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8), 30) + __ROR8__(v24 - v23, 43);
      unint64_t v26 = v24
          + a3
          + __ROR8__(v23 ^ 0xC949D7C7509E6557, 20)
          - 0x9AE16A3B2F90404FLL * *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v27 = 0x9DDFEA08EB382D69 * ((v25 - 0x3C5A37A36834CED9 * *(uint64_t *)((char *)a2 + a3 - 16)) ^ v26);
      unint64_t v28 = v26 ^ (v27 >> 47) ^ v27;
LABEL_8:
      unint64_t v22 = 0x9DDFEA08EB382D69 * v28;
      return (v22 ^ (v22 >> 47)) * v20;
    }
    if (a3 >= 9)
    {
      uint64_t v3 = *(uint64_t *)((char *)a2 + a3 - 8);
      uint64_t v4 = __ROR8__(v3 + a3, a3);
      return (0x9DDFEA08EB382D69
            * ((0x9DDFEA08EB382D69
              * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *a2)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *a2)))) >> 47))) ^ v3;
    }
    if (a3 >= 4)
    {
      uint64_t v67 = *(unsigned int *)((char *)a2 + a3 - 4);
      unint64_t v20 = 0x9DDFEA08EB382D69;
      unint64_t v68 = 0x9DDFEA08EB382D69 * (((8 * *(_DWORD *)a2) + a3) ^ v67);
      unint64_t v28 = v67 ^ (v68 >> 47) ^ v68;
      goto LABEL_8;
    }
    unint64_t result = 0x9AE16A3B2F90404FLL;
    if (a3)
    {
      unint64_t v69 = (0xC949D7C7509E6557 * (a3 + 4 * *((unsigned __int8 *)a2 + a3 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                     * (*(unsigned __int8 *)a2 | ((unint64_t)*((unsigned __int8 *)a2 + (a3 >> 1)) << 8)));
      return 0x9AE16A3B2F90404FLL * (v69 ^ (v69 >> 47));
    }
  }
  return result;
}

void sub_2550EBAE4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_2550EACF8();
    }
    uint64_t v4 = operator new(8 * a2);
    char v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      uint64_t v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v13 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= a2) {
              v13 %= a2;
            }
          }
          else
          {
            v13 &= a2 - 1;
          }
          if (v13 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v13))
            {
              *(void *)(*(void *)a1 + 8 * v13) = v7;
              goto LABEL_19;
            }
            void *v7 = *v11;
            uint64_t v12 = 8 * v13;
            void *v11 = **(void **)(*(void *)a1 + v12);
            **(void **)(*(void *)a1 + v12) = v11;
            uint64_t v11 = v7;
          }
          unint64_t v13 = v8;
LABEL_19:
          uint64_t v7 = v11;
          uint64_t v11 = (void *)*v11;
          unint64_t v8 = v13;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

unsigned __int8 *sub_2550EBC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((void *)v15 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((void *)v15 + 5) = *(void *)(a3 + 24);
  *((_DWORD *)v15 + 16) = 1;
  char v38 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)uint64_t v15 = *v34;
LABEL_73:
    *uint64_t v34 = v15;
    goto LABEL_74;
  }
  *(void *)uint64_t v15 = *v22;
  void *v22 = v15;
  *(void *)(v33 + 8 * v3) = v22;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550EBFBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2550EBFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((void *)v15 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v15 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *((_DWORD *)v15 + 16) = 2;
  char v38 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)uint64_t v15 = *v34;
LABEL_73:
    *uint64_t v34 = v15;
    goto LABEL_74;
  }
  *(void *)uint64_t v15 = *v22;
  void *v22 = v15;
  *(void *)(v33 + 8 * v3) = v22;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550EC35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2550EC374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((void *)v15 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v15 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *((_DWORD *)v15 + 16) = 3;
  char v38 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)uint64_t v15 = *v34;
LABEL_73:
    *uint64_t v34 = v15;
    goto LABEL_74;
  }
  *(void *)uint64_t v15 = *v22;
  void *v22 = v15;
  *(void *)(v33 + 8 * v3) = v22;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550EC6FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_2550EC714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)*v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          char v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = *((void *)v15 + 1);
          if (v18 == v10)
          {
            uint64_t v19 = v15[39];
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = v15[39];
            }
            else {
              uint64_t v20 = *((void *)v15 + 3);
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v15 + 2), v5, *((void *)v15 + 3))) {
                  return v15;
                }
              }
              else
              {
                if (!v15[39]) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (v15[v21 + 16] == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = *(unsigned __int8 **)v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (void *)(a1 + 16);
  uint64_t v15 = (unsigned __int8 *)operator new(0x48uLL);
  v37[0] = v15;
  v37[1] = a1 + 16;
  *(void *)uint64_t v15 = 0;
  *((void *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = *(_OWORD *)a3;
  *((void *)v15 + 4) = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(a3 + 24);
  *((void *)v15 + 7) = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *((_DWORD *)v15 + 16) = 4;
  char v38 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void *)a1;
  uint64_t v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)uint64_t v15 = *v34;
LABEL_73:
    *uint64_t v34 = v15;
    goto LABEL_74;
  }
  *(void *)uint64_t v15 = *v22;
  void *v22 = v15;
  *(void *)(v33 + 8 * v3) = v22;
  if (*(void *)v15)
  {
    unint64_t v35 = *(void *)(*(void *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v35 >= v11) {
        v35 %= v11;
      }
    }
    else
    {
      v35 &= v11 - 1;
    }
    uint64_t v34 = (void *)(*(void *)a1 + 8 * v35);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550ECA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

double sub_2550ECAB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 4)
  {
    uint64_t v6 = *(void **)(a3 + 32);
    *(void *)&double result = sub_25513A900(v6, 5, a2 + 48).n128_u64[0];
  }
  return result;
}

void sub_2550ECB34()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_2550ECB5C(uint64_t a1, uint64_t a2, void *a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 5)
  {
    sub_2550EA488(a2, (uint64_t)v18);
    int v15 = 0;
    sub_2550ECD5C((uint64_t)v16, (uint64_t)v18);
    char v5 = (_DWORD *)a3[26];
    if ((unint64_t)v5 >= a3[27])
    {
      uint64_t v6 = sub_2550ED40C(a3 + 25, &v15);
    }
    else
    {
      _DWORD *v5 = v15;
      sub_2550ECD5C((uint64_t)(v5 + 2), (uint64_t)v16);
      uint64_t v6 = (char *)(v5 + 12);
      a3[26] = v5 + 12;
    }
    a3[26] = v6;
    unint64_t v7 = (void **)__p;
    if (__p)
    {
      do
      {
        unint64_t v8 = (void **)*v7;
        uint64_t v9 = *((unsigned int *)v7 + 16);
        if (v9 != -1) {
          ((void (*)(char *, void **))off_270444788[v9])(&v20, v7 + 5);
        }
        *((_DWORD *)v7 + 16) = -1;
        if (*((char *)v7 + 39) < 0) {
          operator delete(v7[2]);
        }
        operator delete(v7);
        unint64_t v7 = v8;
      }
      while (v8);
    }
    unint64_t v10 = v16[0];
    v16[0] = 0;
    if (v10) {
      operator delete(v10);
    }
    unint64_t v11 = (void **)v19;
    if (v19)
    {
      do
      {
        uint8x8_t v12 = (void **)*v11;
        uint64_t v13 = *((unsigned int *)v11 + 16);
        if (v13 != -1) {
          ((void (*)(int *, void **))off_270444788[v13])(&v15, v11 + 5);
        }
        *((_DWORD *)v11 + 16) = -1;
        if (*((char *)v11 + 39) < 0) {
          operator delete(v11[2]);
        }
        operator delete(v11);
        unint64_t v11 = v12;
      }
      while (v12);
    }
    uint64_t v14 = v18[0];
    v18[0] = 0;
    if (v14) {
      operator delete(v14);
    }
  }
}

void sub_2550ECCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_2550EB130(v7);
  sub_2550EB130((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_2550ECD34()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

uint64_t sub_2550ECD5C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_2550EBAE4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_2550ECE90(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_2550ECE78(_Unwind_Exception *a1)
{
  sub_2550EB130(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2550ECE90(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v36, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      int v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          int v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = operator new(0x48uLL);
  v36[0] = v22;
  v36[1] = a1 + 16;
  char v37 = 0;
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = v10;
  sub_2550ED228((char *)v22 + 16, a3);
  char v37 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *(void *)v36[0] = *v33;
    *uint64_t v33 = v36[0];
  }
  else
  {
    *(void *)v36[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v36[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v36[0])
    {
      unint64_t v34 = *(void *)(*(void *)v36[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v34 >= v11) {
          v34 %= v11;
        }
      }
      else
      {
        v34 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v36[0];
    }
  }
  int v15 = (uint64_t *)v36[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550ED20C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *sub_2550ED228(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2550EABB0(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  __dst[24] = 0;
  *((_DWORD *)__dst + 12) = -1;
  uint64_t v5 = *((unsigned int *)a2 + 12);
  if (v5 != -1)
  {
    ((void (*)(unsigned char *, char *, char *))off_2704447B0[v5])(v7, __dst + 24, (char *)a2 + 24);
    *((_DWORD *)__dst + 12) = v5;
  }
  return __dst;
}

void sub_2550ED2C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_270444788[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_2550ED310(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

double sub_2550ED31C(uint64_t a1, void *a2, double *a3)
{
  double result = *a3;
  *a2 = *(void *)a3;
  return result;
}

void *sub_2550ED328(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_2550EABB0(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)__dst = v3;
  return result;
}

char *sub_2550ED354(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  return sub_2550EAD40((char *)a2, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
}

void sub_2550ED37C(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  long long v4 = *(const void **)a3;
  uint64_t v3 = *(void *)(a3 + 8);
  int64_t v5 = v3 - *(void *)a3;
  if (v3 != *(void *)a3)
  {
    if (v5 < 0) {
      sub_2550EAEEC();
    }
    unint64_t v7 = (char *)operator new(v3 - *(void *)a3);
    *a2 = v7;
    a2[1] = v7;
    unint64_t v8 = &v7[8 * (v5 >> 3)];
    a2[2] = v8;
    memcpy(v7, v4, v5);
    a2[1] = v8;
  }
}

void sub_2550ED3F0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_2550ED40C(void *a1, _DWORD *a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2550EAEEC();
  }
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_2550EACF8();
    }
    unint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    unint64_t v7 = 0;
  }
  uint64_t v17 = &v7[48 * v3];
  *((void *)&v18 + 1) = &v7[48 * v6];
  *(_DWORD *)uint64_t v17 = *a2;
  sub_2550ECD5C((uint64_t)(v17 + 8), (uint64_t)(a2 + 2));
  unint64_t v9 = (char *)*a1;
  uint64_t v8 = a1[1];
  for (uint64_t i = 56; ; i -= 48)
  {
    uint64_t v11 = v8 + i;
    if ((char *)(v8 + i - 56) == v9) {
      break;
    }
    *(_DWORD *)&v17[i - 104] = *(_DWORD *)(v11 - 104);
    uint64_t v12 = (uint64_t)&v17[i - 96];
    sub_2550ECD5C(v12, v11 - 96);
  }
  uint64_t v14 = (char *)*a1;
  uint64_t v13 = (char *)a1[1];
  *a1 = &v17[i - 56];
  *(void *)&long long v18 = v17 + 48;
  *(_OWORD *)(a1 + 1) = v18;
  if (v13 != v14)
  {
    do
    {
      int v15 = v13 - 48;
      sub_2550EB130((uint64_t)(v13 - 40));
      uint64_t v13 = v15;
    }
    while (v15 != v14);
  }
  if (v14) {
    operator delete(v14);
  }
  return v17 + 48;
}

void sub_2550ED590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_2550ED5C8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2550ED5C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_2550EB130(i - 40);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2550ED620(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 6
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2), !result))
  {
    sub_2550EA488(a2, (uint64_t)&v4);
    operator new();
  }
  return result;
}

void sub_2550EDE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,int a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40)
{
  sub_2550EAA90(v40 - 160);
  sub_2550EB130(v40 - 144);
  _Unwind_Resume(a1);
}

void **sub_2550EDF8C(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    uint64_t v3 = (void **)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0) {
          operator delete(*(v3 - 3));
        }
        v3 -= 3;
      }
      while (v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_2550EE000(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270444818[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

uint64_t sub_2550EE05C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270444878;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  sub_2550EE494((void *)(a1 + 16), (uint64_t *)(a2 + 16));
  sub_2550EE494((void *)(a1 + 40), (uint64_t *)(a2 + 40));
  sub_2550ECD5C(a1 + 64, a2 + 64);
  return a1;
}

void sub_2550EE0EC(_Unwind_Exception *a1)
{
  if (*v3) {
    sub_25513D56C(v1, *v3, (void **)(v1 + 40));
  }
  int64_t v5 = (char *)*v2;
  if (*v2)
  {
    unint64_t v6 = *(char **)(v1 + 24);
    unint64_t v7 = *v2;
    if (v6 != v5)
    {
      do
      {
        uint64_t v8 = (std::__shared_weak_count *)*((void *)v6 - 1);
        if (v8)
        {
          if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        v6 -= 16;
      }
      while (v6 != v5);
      unint64_t v7 = *v2;
    }
    *(void *)(v1 + 24) = v5;
    operator delete(v7);
  }
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2550EE1A4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 128);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270444888[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 128) = -1;
  return a1;
}

void sub_2550EE204()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

void *sub_2550EE22C(void *__dst, void *__src, size_t __len)
{
  if (__len > 0x16)
  {
    if (__len - 0x7FFFFFFFFFFFFFF7 <= 0x800000000000001ELL) {
      sub_2550EAC50();
    }
    size_t v7 = 44;
    if (__len > 0x2C) {
      size_t v7 = __len;
    }
    size_t v8 = (v7 | 7) + 1;
    unint64_t v6 = operator new(v8);
    memcpy(v6, __src, __len);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((unsigned char *)__dst + 23) = __len;
    unint64_t v6 = __dst;
    if (__len)
    {
      memmove(__dst, __src, __len);
      unint64_t v6 = __dst;
    }
  }
  *((unsigned char *)v6 + __len) = 0;
  return __dst;
}

void **sub_2550EE2F4(void **a1, void *__src, size_t __len)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v7 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  if ((v6 & 0x7FFFFFFFFFFFFFFFLL) <= __len)
  {
    size_t v9 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v7 < __len - v7 + 1) {
      sub_2550EAC50();
    }
    unint64_t v10 = v7 - 1;
    uint64_t v11 = a1;
    if ((v6 & 0x8000000000000000) != 0) {
      uint64_t v11 = *a1;
    }
    if (v10 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v12 = 2 * v10;
      if (__len > 2 * v10) {
        unint64_t v12 = __len;
      }
      uint64_t v13 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v12 | 7) != 0x17) {
        uint64_t v13 = v12 | 7;
      }
      if (v12 >= 0x17) {
        size_t v9 = v13 + 1;
      }
      else {
        size_t v9 = 23;
      }
    }
    uint64_t v14 = operator new(v9);
    size_t v8 = v14;
    if (__len) {
      memcpy(v14, __src, __len);
    }
    if (v10 != 22) {
      operator delete(v11);
    }
    a1[1] = (void *)__len;
    a1[2] = (void *)(v9 | 0x8000000000000000);
    *a1 = v8;
  }
  else
  {
    size_t v8 = *a1;
    a1[1] = (void *)__len;
    if (__len) {
      memmove(v8, __src, __len);
    }
  }
  *((unsigned char *)v8 + __len) = 0;
  return a1;
}

void sub_2550EE418()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = MEMORY[0x263F8C3A8] + 16;
  __cxa_throw(exception, (struct type_info *)&unk_270444800, (void (*)(void *))std::exception::~exception);
}

void sub_2550EE46C(void *a1)
{
  uint64_t v1 = (void *)sub_2550EE560(a1);
  j__free(v1);
}

void *sub_2550EE494(void *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0) {
      sub_2550EAEEC();
    }
    unint64_t v6 = (char *)operator new(v4 - *a2);
    uint64_t v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[16 * (v5 >> 4)];
    do
    {
      uint64_t v8 = v3 + v7;
      size_t v9 = &v6[v7];
      uint64_t v10 = *(void *)(v3 + v7 + 8);
      *(void *)size_t v9 = *(void *)(v3 + v7);
      *((void *)v9 + 1) = v10;
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      v7 += 16;
    }
    while (v8 + 16 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_2550EE540(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_25513D620((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2550EE560(void *a1)
{
  *a1 = &unk_270444878;
  sub_2550EB130((uint64_t)(a1 + 8));
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[2];
  if (v6)
  {
    uint64_t v7 = a1[3];
    uint64_t v8 = (void *)a1[2];
    if (v7 != v6)
    {
      do
      {
        size_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[2];
    }
    a1[3] = v6;
    operator delete(v8);
  }
  return nullsub_34(a1);
}

_OWORD *sub_2550EE6C4(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void **)a1;
  uint64_t v4 = *(void **)(a1 + 8);
  uint64_t v5 = ((uint64_t)v4 - *(void *)a1) >> 4;
  unint64_t v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60) {
    sub_2550EAEEC();
  }
  uint64_t v7 = *(void *)(a1 + 16) - (void)v3;
  if (v7 >> 3 > v6) {
    unint64_t v6 = v7 >> 3;
  }
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v6 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v6 >> 60) {
    sub_2550EACF8();
  }
  uint64_t v9 = 16 * v6;
  uint64_t v10 = (char *)operator new(16 * v6);
  uint64_t v11 = &v10[16 * v5];
  long long v12 = *a2;
  *(_OWORD *)uint64_t v11 = *a2;
  if (*((void *)&v12 + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v12 + 1) + 8), 1uLL, memory_order_relaxed);
    uint64_t v3 = *(void **)a1;
    uint64_t v4 = *(void **)(a1 + 8);
  }
  uint64_t v13 = &v10[v9];
  uint64_t v14 = v11 + 16;
  if (v4 == v3)
  {
    *(void *)a1 = v11;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = v13;
    if (!v3) {
      return v14;
    }
    goto LABEL_19;
  }
  do
  {
    long long v15 = *((_OWORD *)v4 - 1);
    v4 -= 2;
    *((_OWORD *)v11 - 1) = v15;
    v11 -= 16;
    *uint64_t v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  uint64_t v16 = *(void **)a1;
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)a1 = v11;
  *(void *)(a1 + 8) = v14;
  *(void *)(a1 + 16) = v13;
  if (v3 != v16)
  {
    do
    {
      uint64_t v17 = (std::__shared_weak_count *)*(v3 - 1);
      if (v17 && !atomic_fetch_add(&v17->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
      v3 -= 2;
    }
    while (v3 != v16);
    uint64_t v3 = v16;
  }
  if (v3) {
LABEL_19:
  }
    operator delete(v3);
  return v14;
}

uint64_t sub_2550EE830(uint64_t a1, void *a2)
{
  return sub_2550EE560(a2);
}

uint64_t sub_2550EE838(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_2704448A8;
  if (*(char *)(a2 + 127) < 0) {
    operator delete(*(void **)(a2 + 104));
  }
  return sub_2550EE560((void *)a2);
}

uint64_t sub_2550EE898(uint64_t a1)
{
  *(void *)a1 = &unk_2704448A8;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  return sub_2550EE560((void *)a1);
}

void sub_2550EE8F8(uint64_t a1)
{
  *(void *)a1 = &unk_2704448A8;
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  uint64_t v2 = (void *)sub_2550EE560((void *)a1);
  j__free(v2);
}

void sub_2550EE960(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_2550EE998(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    sub_2550EE9E4(result);
    JUMPOUT(0x25A2886C0);
  }
  return result;
}

uint64_t sub_2550EE9E4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 112);
  if (v2)
  {
    do
    {
      uint64_t v7 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v7;
    }
    while (v7);
  }
  uint64_t v3 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v3) {
    operator delete(v3);
  }
  uint64_t v4 = *(void *)(a1 + 72);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 80);
    unint64_t v6 = *(void **)(a1 + 72);
    if (v5 != v4)
    {
      do
      {
        uint64_t v8 = *(std::__shared_weak_count **)(v5 - 8);
        if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      unint64_t v6 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v4;
    operator delete(v6);
  }
  uint64_t v9 = *(void *)(a1 + 48);
  if (v9)
  {
    uint64_t v10 = *(void *)(a1 + 56);
    uint64_t v11 = *(void **)(a1 + 48);
    if (v10 != v9)
    {
      do
      {
        long long v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
        v10 -= 16;
      }
      while (v10 != v9);
      uint64_t v11 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v9;
    operator delete(v11);
  }
  uint64_t v13 = *(void *)(a1 + 24);
  if (v13)
  {
    uint64_t v14 = *(void *)(a1 + 32);
    long long v15 = *(void **)(a1 + 24);
    if (v14 != v13)
    {
      do
      {
        uint64_t v16 = *(std::__shared_weak_count **)(v14 - 8);
        if (v16 && !atomic_fetch_add(&v16->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        v14 -= 16;
      }
      while (v14 != v13);
      long long v15 = *(void **)(a1 + 24);
    }
    *(void *)(a1 + 32) = v13;
    operator delete(v15);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned __int8 *sub_2550EEBE8(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v11)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  float v23 = (void *)(a1 + 16);
  uint64_t v16 = (unsigned __int8 *)operator new(0x48uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v11;
  float v24 = *a4;
  long long v25 = **a4;
  *((void *)v16 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = 0;
  *(void *)float v24 = 0;
  *((void *)v16 + 5) = 0;
  *((_DWORD *)v16 + 16) = 0;
  char v41 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v36 = *(void *)a1;
  char v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)uint64_t v16 = *v37;
LABEL_73:
    void *v37 = v16;
    goto LABEL_74;
  }
  *(void *)uint64_t v16 = *v23;
  *float v23 = v16;
  *(void *)(v36 + 8 * v4) = v23;
  if (*(void *)v16)
  {
    unint64_t v38 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }
    else
    {
      v38 &= v12 - 1;
    }
    char v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_2550EEF60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EB624((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2550EEF78(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  unint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          unint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  float v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *float v23 = 0;
  v23[1] = v11;
  float v24 = v23 + 2;
  long long v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v23[4] = *((void *)v25 + 2);
    *(_OWORD *)float v24 = v26;
  }
  v23[5] = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  char v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  uint64_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_2550EF314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EF330((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_2550EF330(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16) && *(char *)(v2 + 39) < 0) {
      operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_2550EF384(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_2550EF3BC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_2550EF3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 7)
  {
    sub_2550EA488(a2, (uint64_t)v31);
    char v30 = 9;
    strcpy((char *)__p, "n_filters");
    uint64_t v5 = sub_2550EFEAC(v31, (uint64_t)__p);
    if (*((_DWORD *)v5 + 16)) {
      sub_2550EE418();
    }
    unint64_t v6 = v5[5];
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v7 = *(void *)(a3 + 224);
    unint64_t v8 = (*(void *)(a3 + 232) - v7) >> 3;
    if (v6 <= v8)
    {
      if (v6 < v8) {
        *(void *)(a3 + 232) = v7 + 8 * v6;
      }
    }
    else
    {
      sub_2550EF9FC((void **)(a3 + 224), v6 - v8);
    }
    char v30 = 9;
    strcpy((char *)__p, "n_threads");
    unint64_t v9 = sub_2550EFEAC(v31, (uint64_t)__p);
    if (*((_DWORD *)v9 + 16)) {
      sub_2550EE418();
    }
    uint64_t v10 = v9[5];
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    *(void *)(a3 + 472) = v10;
    char v30 = 15;
    strcpy((char *)__p, "bnns_graph_args");
    unint64_t v11 = sub_2550EFEAC(v31, (uint64_t)__p);
    if (*((_DWORD *)v11 + 16)) {
      sub_2550EE418();
    }
    unint64_t v12 = v11[5];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = 0uLL;
    uint64_t v13 = *(void *)(a3 + 248);
    unint64_t v14 = (*(void *)(a3 + 256) - v13) >> 4;
    if (v12 <= v14)
    {
      if (v12 < v14) {
        *(void *)(a3 + 256) = v13 + 16 * v12;
      }
    }
    else
    {
      sub_2550EFBB0((char **)(a3 + 248), v12 - v14, &v28);
    }
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    char v30 = 6;
    strcpy((char *)__p, "events");
    long long v15 = sub_2550EFEAC(v31, (uint64_t)__p);
    if (*((_DWORD *)v15 + 16)) {
      sub_2550EE418();
    }
    unint64_t v16 = v15[5];
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = *(void *)(a3 + 128);
    uint64_t v18 = *(void *)(a3 + 136);
    unint64_t v19 = (v18 - v17) >> 4;
    unint64_t v20 = v16 - v19;
    if (v16 > v19)
    {
      sub_2550EFD04(a3 + 128, v20);
      goto LABEL_33;
    }
    if (v16 < v19)
    {
      for (uint64_t i = v17 + 16 * v16; v18 != i; v18 -= 16)
      {
        uint64_t v22 = *(std::__shared_weak_count **)(v18 - 8);
        if (v22 && !atomic_fetch_add(&v22->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *, unint64_t))v22->__on_zero_shared)(v22, v20);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      *(void *)(a3 + 136) = i;
    }
    if (v16) {
LABEL_33:
    }
      mlc_event_create();
    char v30 = 10;
    strcpy((char *)__p, "lk_buffers");
    float v23 = sub_2550EFEAC(v31, (uint64_t)__p);
    if (*((_DWORD *)v23 + 16)) {
      sub_2550EE418();
    }
    *(unsigned char *)(a3 + 384) = v23[5] != 0;
    if (v30 < 0)
    {
      operator delete(__p[0]);
      float v24 = (void **)v32;
      if (!v32) {
        goto LABEL_45;
      }
    }
    else
    {
      float v24 = (void **)v32;
      if (!v32)
      {
LABEL_45:
        float v27 = v31[0];
        v31[0] = 0;
        if (v27) {
          operator delete(v27);
        }
        return;
      }
    }
    do
    {
      long long v25 = (void **)*v24;
      uint64_t v26 = *((unsigned int *)v24 + 16);
      if (v26 != -1) {
        ((void (*)(void **, void **))off_270444950[v26])(__p, v24 + 5);
      }
      *((_DWORD *)v24 + 16) = -1;
      if (*((char *)v24 + 39) < 0) {
        operator delete(v24[2]);
      }
      operator delete(v24);
      float v24 = v25;
    }
    while (v25);
    goto LABEL_45;
  }
}

void sub_2550EF858(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
}

void sub_2550EF8D4()
{
}

void sub_2550EF9A8(void *a1)
{
  __cxa_begin_catch(a1);
  v2(v1);
  __cxa_rethrow();
}

void sub_2550EF9BC(_Unwind_Exception *a1)
{
}

void sub_2550EF9D4()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_2550EF9FC(void **a1, unint64_t a2)
{
  uint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  unint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      unint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_2550EACF8();
      }
      uint64_t v13 = operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    unint64_t v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 != v7)
    {
      unint64_t v18 = v5 - v7 - 8;
      if (v18 < 0x58) {
        goto LABEL_32;
      }
      if ((unint64_t)(v5 - v13 - v8) < 0x20) {
        goto LABEL_32;
      }
      uint64_t v19 = (v18 >> 3) + 1;
      uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      unint64_t v6 = &v5[-v20];
      v14 -= v20;
      uint64_t v21 = &v13[8 * v9 - 16];
      uint64_t v22 = v5 - 16;
      uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *uint64_t v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_32:
        do
        {
          uint64_t v25 = *((void *)v6 - 1);
          v6 -= 8;
          *((void *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      unint64_t v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
    {
      operator delete(v6);
    }
  }
}

void sub_2550EFBB0(char **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v7 = a1[1];
  unint64_t v6 = a1[2];
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      uint64_t v13 = 16 * a2;
      unint64_t v14 = &v7[16 * a2];
      do
      {
        *(_OWORD *)uint64_t v7 = *a3;
        v7 += 16;
        v13 -= 16;
      }
      while (v13);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (v7 - *a1) >> 4;
    if ((v8 + a2) >> 60) {
      sub_2550EAEEC();
    }
    uint64_t v9 = v6 - *a1;
    uint64_t v10 = v9 >> 3;
    if (v9 >> 3 <= v8 + a2) {
      uint64_t v10 = v8 + a2;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11)
    {
      if (v11 >> 60) {
        sub_2550EACF8();
      }
      unint64_t v12 = (char *)operator new(16 * v11);
    }
    else
    {
      unint64_t v12 = 0;
    }
    size_t v15 = &v12[16 * v8];
    uint64_t v16 = 16 * a2;
    uint64_t v17 = &v15[16 * a2];
    unint64_t v18 = v15;
    do
    {
      *(_OWORD *)unint64_t v18 = *a3;
      v18 += 16;
      v16 -= 16;
    }
    while (v16);
    uint64_t v19 = *a1;
    if (v7 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v7 - 1);
        v15 -= 16;
        v7 -= 16;
      }
      while (v7 != v19);
      uint64_t v7 = *a1;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = &v12[16 * v11];
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_2550EFD04(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  if (a2 <= (v4 - (uint64_t)v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(*(void **)(a1 + 8), 16 * a2);
      uint64_t v5 = (void *)((char *)v5 + v12);
    }
    *(void *)(a1 + 8) = v5;
  }
  else
  {
    unint64_t v6 = *(void **)a1;
    uint64_t v7 = ((uint64_t)v5 - *(void *)a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_2550EAEEC();
    }
    uint64_t v9 = v4 - (void)v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_2550EACF8();
      }
      unint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      unint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    size_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 == v6)
    {
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v15;
      if (!v5) {
        return;
      }
      goto LABEL_25;
    }
    do
    {
      long long v17 = *((_OWORD *)v5 - 1);
      v5 -= 2;
      *((_OWORD *)v13 - 1) = v17;
      v13 -= 16;
      void *v5 = 0;
      v5[1] = 0;
    }
    while (v5 != v6);
    unint64_t v18 = *(void **)a1;
    uint64_t v5 = *(void **)(a1 + 8);
    *(void *)a1 = v13;
    *(void *)(a1 + 8) = v16;
    *(void *)(a1 + 16) = v15;
    if (v5 != v18)
    {
      do
      {
        uint64_t v19 = (std::__shared_weak_count *)*(v5 - 1);
        if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
        v5 -= 2;
      }
      while (v5 != v18);
      uint64_t v5 = v18;
    }
    if (v5)
    {
LABEL_25:
      operator delete(v5);
    }
  }
}

uint64_t *sub_2550EFEAC(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_2550F0034(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_2550F006C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))(*(void *)(a1 + 24));
}

void sub_2550F0090(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v132[1] = *MEMORY[0x263EF8340];
  BYTE7(v35) = 3;
  LODWORD(v33) = 6579297;
  *((void *)&v35 + 1) = &unk_270444A10;
  *(void *)&v36[0] = sub_2550F16CC;
  *(void *)&v36[1] = (char *)&v35 + 8;
  HIBYTE(v36[2]) = 7;
  strcpy((char *)&v36[1] + 8, "acquire");
  *(void *)&long long v37 = &unk_270444A10;
  *((void *)&v37 + 1) = sub_2550F1D24;
  *(void *)&long long __p = &v37;
  char v41 = 7;
  strcpy((char *)&__p + 8, "address");
  v42[0] = &unk_270444A10;
  v42[1] = sub_2550F1EE8;
  v43[23] = 8;
  v42[3] = v42;
  strcpy(v43, "allocate");
  v44[0] = &unk_270444A10;
  v44[1] = sub_2550F2558;
  v44[3] = v44;
  v45[23] = 7;
  strcpy(v45, "avgpool");
  v46[0] = &unk_270444A10;
  v46[1] = sub_2550F2720;
  v46[3] = v46;
  v47[23] = 7;
  strcpy(v47, "bnns-md");
  v48[0] = &unk_270444A10;
  v48[1] = sub_2550F2D78;
  v48[3] = v48;
  v49[23] = 11;
  strcpy(v49, "bnns-filter");
  v50[0] = &unk_270444A10;
  v50[1] = sub_2550F319C;
  v50[3] = v50;
  strcpy(v51, "bnns-graph-infer-shape");
  v51[23] = 22;
  v52[0] = &unk_270444A10;
  v52[1] = sub_2550F37F4;
  v52[3] = v52;
  uint64_t v3 = (char *)operator new(0x19uLL);
  v52[6] = 0x8000000000000019;
  v52[4] = v3;
  v52[5] = 23;
  strcpy(v3, "bnns-graph-context-init");
  v53[0] = &unk_270444A10;
  v53[1] = sub_2550F3E4C;
  v53[3] = v53;
  uint64_t v54 = (char *)operator new(0x20uLL);
  long long v55 = xmmword_25513E9B0;
  strcpy(v54, "bnns-graph-context-destroy");
  v56[0] = &unk_270444A10;
  v56[1] = sub_2550F4014;
  v56[3] = v56;
  uint64_t v57 = (char *)operator new(0x19uLL);
  unint64_t v59 = 0x8000000000000019;
  uint64_t v58 = 23;
  strcpy(v57, "bnns-graph-context-exec");
  v60[0] = &unk_270444A10;
  v60[1] = sub_2550F41DC;
  v60[3] = v60;
  v61[23] = 9;
  strcpy(v61, "broadcast");
  v62[0] = &unk_270444A10;
  v62[1] = sub_2550F4834;
  v62[3] = v62;
  v63[23] = 4;
  strcpy(v63, "conv");
  v64[0] = &unk_270444A10;
  v64[1] = sub_2550F4E8C;
  v64[3] = v64;
  v65[23] = 11;
  strcpy(v65, "convolution");
  v66[0] = &unk_270444A10;
  v66[1] = sub_2550F4E8C;
  v66[3] = v66;
  v67[23] = 4;
  strcpy(v67, "copy");
  v68[0] = &unk_270444A10;
  v68[1] = sub_2550F54E4;
  v68[3] = v68;
  char v70 = 3;
  int v69 = 7760228;
  v71[0] = &unk_270444A10;
  v71[1] = sub_2550F5B3C;
  v71[3] = v71;
  v72[23] = 10;
  strcpy(v72, "deallocate");
  v73[0] = &unk_270444A10;
  v73[1] = sub_2550F6194;
  v73[3] = v73;
  char v75 = 3;
  int v74 = 7695461;
  v76[0] = &unk_270444A10;
  v76[1] = sub_2550F635C;
  v76[3] = v76;
  v77[23] = 14;
  strcpy(v77, "external_const");
  v78[0] = &unk_270444A10;
  v78[1] = sub_2550F69B4;
  v78[3] = v78;
  char v80 = 6;
  strcpy((char *)v79, "matmul");
  v81[0] = &unk_270444A10;
  v81[1] = sub_2550F6DD8;
  v81[3] = v81;
  v82[23] = 4;
  strcpy(v82, "gemm");
  v83[0] = &unk_270444A10;
  v83[1] = sub_2550F6DD8;
  v83[3] = v83;
  v84[23] = 11;
  strcpy(v84, "infer-shape");
  v85[0] = &unk_270444A10;
  v85[1] = sub_2550F7430;
  v85[3] = v85;
  v86[23] = 9;
  strcpy(v86, "init-addr");
  v87[0] = &unk_270444A10;
  v87[1] = sub_2550F1EE8;
  v87[3] = v87;
  v88[23] = 12;
  strcpy(v88, "init-address");
  v89[0] = &unk_270444A10;
  v89[1] = sub_2550F1EE8;
  v89[3] = v89;
  v90[23] = 14;
  strcpy(v90, "execute-kernel");
  v91[0] = &unk_270444A10;
  v91[1] = sub_2550F7A88;
  v91[3] = v91;
  v92[23] = 10;
  strcpy(v92, "leaky_relu");
  v93[0] = &unk_270444A10;
  v93[1] = sub_2550F80E0;
  v93[3] = v93;
  v94[23] = 4;
  strcpy(v94, "load");
  v95[0] = &unk_270444A10;
  v95[1] = sub_2550F8738;
  v95[3] = v95;
  v96[23] = 11;
  strcpy(v96, "load-kernel");
  v97[0] = &unk_270444A10;
  v97[1] = sub_2550F8B5C;
  v97[3] = v97;
  v98[23] = 10;
  strcpy(v98, "loopkit-md");
  v99[0] = &unk_270444A10;
  v99[1] = sub_2550F8D24;
  v99[3] = v99;
  uint64_t v4 = 0;
  v100 = (char *)operator new(0x20uLL);
  long long v101 = xmmword_25513E9C0;
  strcpy(v100, "scratchbuffer-metakernel");
  v102[0] = &unk_270444A10;
  v102[1] = sub_2550F9148;
  v102[3] = v102;
  v103[23] = 4;
  strcpy(v103, "lstm");
  v104[0] = &unk_270444A10;
  v104[1] = sub_2550F97A0;
  v104[3] = v104;
  v105[23] = 3;
  strcpy(v105, "mul");
  v106[0] = &unk_270444A10;
  v106[1] = sub_2550F9DF8;
  v106[3] = v106;
  char v108 = 3;
  int v107 = 7233902;
  v109[0] = &unk_270444A10;
  v109[1] = sub_2550FA450;
  v109[3] = v109;
  v110[23] = 8;
  strcpy(v110, "nancheck");
  v111[0] = &unk_270444A10;
  v111[1] = sub_2550FA450;
  v111[3] = v111;
  v112[23] = 7;
  strcpy(v112, "nanfill");
  v113[0] = &unk_270444A10;
  v113[1] = sub_2550FA878;
  v113[3] = v113;
  v114[23] = 5;
  strcpy(v114, "print");
  v115[0] = &unk_270444A10;
  v115[1] = sub_2550FAC9C;
  v115[3] = v115;
  v116[23] = 7;
  strcpy(v116, "release");
  v117[0] = &unk_270444A10;
  v117[1] = sub_2550FB0C4;
  v117[3] = v117;
  v118[23] = 4;
  strcpy(v118, "relu");
  v119[0] = &unk_270444A10;
  v119[1] = sub_2550FB28C;
  v119[3] = v119;
  v120[23] = 7;
  strcpy(v120, "sigmoid");
  v121[0] = &unk_270444A10;
  v121[1] = sub_2550FB8E4;
  v121[3] = v121;
  v122[23] = 7;
  strcpy(v122, "softmax");
  v123[0] = &unk_270444A10;
  v123[1] = sub_2550FBF3C;
  v123[3] = v123;
  v124[23] = 3;
  strcpy(v124, "sub");
  v125[0] = &unk_270444A10;
  v125[1] = sub_2550FC594;
  v125[3] = v125;
  v126[23] = 4;
  strcpy(v126, "tanh");
  v127[0] = &unk_270444A10;
  v127[1] = sub_2550FCBEC;
  v127[3] = v127;
  v128[23] = 22;
  strcpy(v128, "pixel_buffer_to_tensor");
  v129[0] = &unk_270444A10;
  v129[1] = sub_2550FD244;
  v129[3] = v129;
  v130[23] = 22;
  strcpy(v130, "tensor_to_pixel_buffer");
  v131[0] = &unk_270444A10;
  v131[1] = sub_2550FD89C;
  v132[0] = v131;
  int v32 = 1065353216;
  *(_OWORD *)char v30 = 0u;
  long long v31 = 0u;
  do
  {
    sub_2550FE1B4((uint64_t)v30, (uint64_t)&v33 + v4, (uint64_t)&v33 + v4);
    v4 += 56;
  }
  while (v4 != 2464);
  for (uint64_t i = 0; i != -308; i -= 7)
  {
    unint64_t v6 = (void *)v132[i];
    if (&v131[i] == v6)
    {
      (*(void (**)(void *))(v131[i] + 32))(&v131[i]);
    }
    else if (v6)
    {
      (*(void (**)(void *))(*v6 + 40))(v6);
    }
    if (v130[i * 8 + 23] < 0) {
      operator delete(*(void **)&v130[i * 8]);
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1) == 11)
  {
    long long v7 = 0uLL;
    long long v37 = 0u;
    memset(v36, 0, sizeof(v36));
    long long v35 = 0u;
    int v38 = 1065353216;
    int8x8_t v33 = &unk_2704448A8;
    if (*(char *)(a1 + 71) < 0)
    {
      sub_2550EABB0(&__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
      long long v7 = v35;
      long long v13 = v36[0];
      long long v14 = v36[1];
      unint64_t v10 = *((void *)&v36[2] + 1);
      uint64_t v11 = *(void *)&v36[2];
      uint64_t v8 = *((void *)&v37 + 1);
      uint64_t v9 = v37;
      int v12 = v38;
    }
    else
    {
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      unint64_t v10 = 0;
      uint64_t v11 = 0;
      long long __p = *(_OWORD *)(a1 + 48);
      uint64_t v40 = *(void *)(a1 + 64);
      int v12 = 1065353216;
      long long v13 = 0uLL;
      long long v14 = 0uLL;
    }
    int v34 = 25;
    *(void *)a2 = &unk_270444878;
    *(_DWORD *)(a2 + 8) = 25;
    *(void *)&v36[0] = 0;
    long long v35 = 0uLL;
    *(_OWORD *)(a2 + 16) = v7;
    *(_OWORD *)(a2 + 32) = v13;
    *(_OWORD *)(a2 + 48) = v14;
    memset((char *)v36 + 8, 0, 32);
    *(void *)(a2 + 64) = v11;
    *(void *)(a2 + 72) = v10;
    *((void *)&v36[2] + 1) = 0;
    *(void *)(a2 + 80) = v9;
    *(void *)(a2 + 88) = v8;
    *(_DWORD *)(a2 + 96) = v12;
    if (v8)
    {
      unint64_t v22 = *(void *)(v9 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v22 >= v10) {
          v22 %= v10;
        }
      }
      else
      {
        v22 &= v10 - 1;
      }
      *(void *)(v11 + 8 * v22) = a2 + 80;
      long long v37 = 0uLL;
    }
    *(void *)a2 = &unk_2704448A8;
    uint64_t v23 = (unsigned char *)(a2 + 104);
    if (SHIBYTE(v40) < 0)
    {
      sub_2550EABB0(v23, (void *)__p, *((unint64_t *)&__p + 1));
      int v24 = SHIBYTE(v40);
      *(_DWORD *)(a2 + 128) = 1;
      int8x8_t v33 = &unk_2704448A8;
      if (v24 < 0) {
        operator delete((void *)__p);
      }
    }
    else
    {
      *(_OWORD *)uint64_t v23 = __p;
      *(void *)(a2 + 120) = v40;
      *(_DWORD *)(a2 + 128) = 1;
      int8x8_t v33 = &unk_2704448A8;
    }
  }
  else
  {
    uint64_t v15 = sub_2550FE7E8(v30, a1 + 48)[8];
    if (!v15) {
      sub_2550FE96C();
    }
    (*(void (**)(void **__return_ptr))(*(void *)v15 + 48))(&v33);
    *(void *)a2 = &unk_270444878;
    *(_DWORD *)(a2 + 8) = v34;
    *(_OWORD *)(a2 + 16) = v35;
    *(void *)(a2 + 32) = *(void *)&v36[0];
    long long v35 = 0uLL;
    *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v36 + 8);
    uint64_t v17 = *((void *)&v36[1] + 1);
    uint64_t v16 = *(void *)&v36[2];
    memset(v36, 0, 32);
    *(void *)(a2 + 56) = v17;
    *(void *)(a2 + 64) = v16;
    unint64_t v18 = *((void *)&v36[2] + 1);
    uint64_t v19 = v37;
    *(void *)(a2 + 72) = *((void *)&v36[2] + 1);
    void v36[2] = 0uLL;
    uint64_t v20 = *((void *)&v37 + 1);
    *(void *)(a2 + 80) = v19;
    *(void *)(a2 + 88) = v20;
    *(_DWORD *)(a2 + 96) = v38;
    if (v20)
    {
      unint64_t v21 = *(void *)(v19 + 8);
      if ((v18 & (v18 - 1)) != 0)
      {
        if (v21 >= v18) {
          v21 %= v18;
        }
      }
      else
      {
        v21 &= v18 - 1;
      }
      *(void *)(v16 + 8 * v21) = a2 + 80;
      long long v37 = 0uLL;
    }
    *(_DWORD *)(a2 + 128) = 0;
  }
  sub_2550EE560(&v33);
  uint64_t v25 = (uint64_t **)v31;
  if ((void)v31)
  {
    while (1)
    {
      float v27 = *v25;
      std::string v28 = v25[8];
      if (v28 != (uint64_t *)(v25 + 5)) {
        break;
      }
      ((void (*)(uint64_t *))v25[5][4])((uint64_t *)v25 + 5);
      if (*((char *)v25 + 39) < 0) {
        goto LABEL_43;
      }
LABEL_38:
      operator delete(v25);
      uint64_t v25 = (uint64_t **)v27;
      if (!v27) {
        goto LABEL_34;
      }
    }
    if (v28) {
      (*(void (**)(uint64_t *))(*v28 + 40))(v28);
    }
    if ((*((char *)v25 + 39) & 0x80000000) == 0) {
      goto LABEL_38;
    }
LABEL_43:
    operator delete(v25[2]);
    goto LABEL_38;
  }
LABEL_34:
  uint64_t v26 = v30[0];
  v30[0] = 0;
  if (v26) {
    operator delete(v26);
  }
}

void sub_2550F14F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
  sub_2550EE560(v52);
  sub_2550EE898((uint64_t)&a52);
  sub_2550FE710((uint64_t)&a47);
  _Unwind_Resume(a1);
}

void sub_2550F153C(_Unwind_Exception *a1)
{
  do
  {
    v2 -= 56;
    sub_2550FDEF4(v2);
  }
  while (v2 != v1);
  _Unwind_Resume(a1);
}

void sub_2550F16CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  unint64_t v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 1;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        long long v7 = (int *)(i + 2);
      }
      else {
        long long v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  unint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    unint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  BOOL v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    int v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        int8x8_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      int v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *BOOL v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v34 = (void **)__p;
  if (__p)
  {
    long long v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    int v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F1C30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F1D24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 0;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  unint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F1EC0(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F1EE8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 3;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        long long v7 = (int *)(i + 2);
      }
      else {
        long long v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  HIBYTE(v53) = 6;
  strcpy((char *)__p, "inputs");
  unint64_t v18 = sub_2550FDF94(v54, (uint64_t)__p);
  if (SHIBYTE(v53) < 0) {
    operator delete(__p[0]);
  }
  if (v18)
  {
    LOBYTE(v46) = 0;
    int v48 = -1;
    uint64_t v19 = *((unsigned int *)v18 + 16);
    if (v19 == -1
      || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v57, &v46, v18 + 5),
          int v48 = v19,
          v19 != 3))
    {
      sub_2550EE418();
    }
    unint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    sub_2550EAD40((char *)&v49, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
    sub_2550EA938((uint64_t *)&v49, a2, (uint64_t)__p);
    uint64_t v20 = (char *)*v5;
    if (*v5)
    {
      char v21 = *(char **)(a3 + 24);
      unint64_t v22 = *v5;
      if (v21 != v20)
      {
        do
        {
          uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
          if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
          v21 -= 16;
        }
        while (v21 != v20);
        unint64_t v22 = *v5;
      }
      *(void *)(a3 + 24) = v20;
      operator delete(v22);
      void *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    *(_OWORD *)(a3 + 16) = *(_OWORD *)__p;
    *(void *)(a3 + 32) = v53;
    __p[1] = 0;
    uint64_t v53 = 0;
    __p[0] = 0;
    int v24 = (void **)v49;
    if (v49)
    {
      uint64_t v25 = v50;
      uint64_t v26 = v49;
      if (v50 != v49)
      {
        do
        {
          if (*((char *)v25 - 1) < 0) {
            operator delete(*(v25 - 3));
          }
          v25 -= 3;
        }
        while (v25 != v24);
        uint64_t v26 = v49;
      }
      uint64_t v50 = v24;
      operator delete(v26);
    }
    if (v48 != -1) {
      ((void (*)(void **, uint64_t *))off_2704449B0[v48])(v41, &v46);
    }
    int v48 = -1;
  }
  char v42 = 7;
  strcpy((char *)v41, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v41);
  LOBYTE(v43) = 0;
  int v45 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v43, v27 + 5),
        int v45 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  unint64_t v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&v49, v43, v44, 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3));
  sub_2550EA938((uint64_t *)&v49, a2, (uint64_t)__p);
  BOOL v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    int v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        int8x8_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      int v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *BOOL v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = *(_OWORD *)__p;
  *(void *)(a3 + 56) = v53;
  __p[1] = 0;
  uint64_t v53 = 0;
  __p[0] = 0;
  int v34 = (void **)v49;
  if (v49)
  {
    long long v35 = v50;
    uint64_t v36 = v49;
    if (v50 != v49)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = v49;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v45 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v45])(&v57, &v43);
  }
  int v45 = -1;
  if (v42 < 0)
  {
    operator delete(v41[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_81;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_81;
    }
  }
  do
  {
    int v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(void **, void **))off_2704449B0[v39])(__p, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_81:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F2454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, char a20,uint64_t a21,uint64_t a22,int a23,int a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_2550EDF8C(&a25);
  sub_2550EE000((uint64_t)&a20);
  sub_2550EB130(v34 - 128);
  sub_2550EE560(v33);
  _Unwind_Resume(a1);
}

void sub_2550F2558(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 2;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  unint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F26F8(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F2720(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 5;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        long long v7 = (int *)(i + 2);
      }
      else {
        long long v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  unint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  BOOL v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    int v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        int8x8_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      int v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *BOOL v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    long long v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    int v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F2C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F2D78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 11;
  sub_2550EA488(a1, (uint64_t)v41);
  int v5 = v42;
  if (v42)
  {
    do
    {
      int v10 = (int **)(v5 + 2);
      uint64_t v11 = *((unsigned __int8 *)v5 + 39);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v5[3];
      }
      if (v11 == 7)
      {
        if (v12 >= 0) {
          int v6 = (int *)(v5 + 2);
        }
        else {
          int v6 = *v10;
        }
        int v7 = *v6;
        int v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v11 == 6)
      {
        uint64_t v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        int v14 = *(_DWORD *)v13;
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v10, (long long *)v5 + 1);
LABEL_11:
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  char v32 = 7;
  strcpy((char *)v31, "outputs");
  uint64_t v17 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v18 = *((unsigned int *)v17 + 16);
  if (v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v18])(&v43, &v33, v17 + 5),
        int v35 = v18,
        v18 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v19 = (void **)(a3 + 40);
  uint64_t v20 = *(void *)(a3 + 40);
  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 48);
    unint64_t v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v19;
    }
    *(void *)(a3 + 48) = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v39;
  *(void *)(a3 + 56) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550F3104(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550F319C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 6;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F3700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F37F4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 9;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F3D58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F3E4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 7;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F3FEC(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F4014(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 10;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F41B4(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F41DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 8;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F4740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F4834(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 12;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F4D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F4E8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 15;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F53F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F54E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 14;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F5A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F5B3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 16;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F60A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F6194(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 17;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F6334(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F635C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 18;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F68C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F69B4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 42;
  sub_2550EA488(a1, (uint64_t)v41);
  int v5 = v42;
  if (v42)
  {
    do
    {
      int v10 = (int **)(v5 + 2);
      uint64_t v11 = *((unsigned __int8 *)v5 + 39);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v5[3];
      }
      if (v11 == 7)
      {
        if (v12 >= 0) {
          int v6 = (int *)(v5 + 2);
        }
        else {
          int v6 = *v10;
        }
        int v7 = *v6;
        int v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v11 == 6)
      {
        uint64_t v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        int v14 = *(_DWORD *)v13;
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v10, (long long *)v5 + 1);
LABEL_11:
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  char v32 = 7;
  strcpy((char *)v31, "outputs");
  uint64_t v17 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v18 = *((unsigned int *)v17 + 16);
  if (v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v18])(&v43, &v33, v17 + 5),
        int v35 = v18,
        v18 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v19 = (void **)(a3 + 40);
  uint64_t v20 = *(void *)(a3 + 40);
  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 48);
    unint64_t v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v19;
    }
    *(void *)(a3 + 48) = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v39;
  *(void *)(a3 + 56) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550F6D40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550F6DD8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 20;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F733C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F7430(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 21;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F7994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F7A88(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 24;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F7FEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F80E0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 26;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F8644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F8738(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 27;
  sub_2550EA488(a1, (uint64_t)v41);
  int v5 = v42;
  if (v42)
  {
    do
    {
      int v10 = (int **)(v5 + 2);
      uint64_t v11 = *((unsigned __int8 *)v5 + 39);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v5[3];
      }
      if (v11 == 7)
      {
        if (v12 >= 0) {
          int v6 = (int *)(v5 + 2);
        }
        else {
          int v6 = *v10;
        }
        int v7 = *v6;
        int v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v11 == 6)
      {
        uint64_t v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        int v14 = *(_DWORD *)v13;
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v10, (long long *)v5 + 1);
LABEL_11:
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  char v32 = 7;
  strcpy((char *)v31, "outputs");
  uint64_t v17 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v18 = *((unsigned int *)v17 + 16);
  if (v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v18])(&v43, &v33, v17 + 5),
        int v35 = v18,
        v18 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v19 = (void **)(a3 + 40);
  uint64_t v20 = *(void *)(a3 + 40);
  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 48);
    unint64_t v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v19;
    }
    *(void *)(a3 + 48) = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v39;
  *(void *)(a3 + 56) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550F8AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550F8B5C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 28;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550F8CFC(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550F8D24(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 29;
  sub_2550EA488(a1, (uint64_t)v41);
  int v5 = v42;
  if (v42)
  {
    do
    {
      int v10 = (int **)(v5 + 2);
      uint64_t v11 = *((unsigned __int8 *)v5 + 39);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v5[3];
      }
      if (v11 == 7)
      {
        if (v12 >= 0) {
          int v6 = (int *)(v5 + 2);
        }
        else {
          int v6 = *v10;
        }
        int v7 = *v6;
        int v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v11 == 6)
      {
        uint64_t v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        int v14 = *(_DWORD *)v13;
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v10, (long long *)v5 + 1);
LABEL_11:
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  char v32 = 7;
  strcpy((char *)v31, "outputs");
  uint64_t v17 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v18 = *((unsigned int *)v17 + 16);
  if (v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v18])(&v43, &v33, v17 + 5),
        int v35 = v18,
        v18 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v19 = (void **)(a3 + 40);
  uint64_t v20 = *(void *)(a3 + 40);
  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 48);
    unint64_t v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v19;
    }
    *(void *)(a3 + 48) = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v39;
  *(void *)(a3 + 56) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550F90B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550F9148(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 37;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F96AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F97A0(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 30;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550F9D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550F9DF8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 31;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FA35C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FA450(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 32;
  sub_2550EA488(a1, (uint64_t)v41);
  int v6 = v42;
  if (v42)
  {
    do
    {
      uint64_t v11 = (int **)(v6 + 2);
      uint64_t v12 = *((unsigned __int8 *)v6 + 39);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = v6[3];
      }
      if (v12 == 7)
      {
        if (v13 >= 0) {
          int v7 = (int *)(v6 + 2);
        }
        else {
          int v7 = *v11;
        }
        int v8 = *v7;
        int v9 = *(int *)((char *)v7 + 3);
        if (v8 == 1886680431 && v9 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v12 == 6)
      {
        uint64_t v14 = (uint64_t)(v13 >= 0 ? v6 + 2 : *v11);
        int v15 = *(_DWORD *)v14;
        int v16 = *(unsigned __int16 *)(v14 + 4);
        if (v15 == 1970302569 && v16 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)v6 + 1);
LABEL_11:
      int v6 = (void *)*v6;
    }
    while (v6);
  }
  char v32 = 6;
  strcpy((char *)v31, "inputs");
  uint64_t v18 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v43, &v33, v18 + 5),
        int v35 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v39;
  *(void *)(a3 + 32) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550FA7E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550FA878(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 33;
  sub_2550EA488(a1, (uint64_t)v41);
  int v5 = v42;
  if (v42)
  {
    do
    {
      int v10 = (int **)(v5 + 2);
      uint64_t v11 = *((unsigned __int8 *)v5 + 39);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v5[3];
      }
      if (v11 == 7)
      {
        if (v12 >= 0) {
          int v6 = (int *)(v5 + 2);
        }
        else {
          int v6 = *v10;
        }
        int v7 = *v6;
        int v8 = *(int *)((char *)v6 + 3);
        if (v7 == 1886680431 && v8 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v11 == 6)
      {
        uint64_t v13 = (uint64_t)(v12 >= 0 ? v5 + 2 : *v10);
        int v14 = *(_DWORD *)v13;
        int v15 = *(unsigned __int16 *)(v13 + 4);
        if (v14 == 1970302569 && v15 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v10, (long long *)v5 + 1);
LABEL_11:
      int v5 = (void *)*v5;
    }
    while (v5);
  }
  char v32 = 7;
  strcpy((char *)v31, "outputs");
  uint64_t v17 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v18 = *((unsigned int *)v17 + 16);
  if (v18 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v18])(&v43, &v33, v17 + 5),
        int v35 = v18,
        v18 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v19 = (void **)(a3 + 40);
  uint64_t v20 = *(void *)(a3 + 40);
  if (v20)
  {
    uint64_t v21 = *(void *)(a3 + 48);
    unint64_t v22 = *(void **)(a3 + 40);
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = *(std::__shared_weak_count **)(v21 - 8);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v19;
    }
    *(void *)(a3 + 48) = v20;
    operator delete(v22);
    *uint64_t v19 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v39;
  *(void *)(a3 + 56) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550FAC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550FAC9C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 34;
  sub_2550EA488(a1, (uint64_t)v41);
  int v6 = v42;
  if (v42)
  {
    do
    {
      uint64_t v11 = (int **)(v6 + 2);
      uint64_t v12 = *((unsigned __int8 *)v6 + 39);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = v6[3];
      }
      if (v12 == 7)
      {
        if (v13 >= 0) {
          int v7 = (int *)(v6 + 2);
        }
        else {
          int v7 = *v11;
        }
        int v8 = *v7;
        int v9 = *(int *)((char *)v7 + 3);
        if (v8 == 1886680431 && v9 == 1937012080) {
          goto LABEL_11;
        }
      }
      else if (v12 == 6)
      {
        uint64_t v14 = (uint64_t)(v13 >= 0 ? v6 + 2 : *v11);
        int v15 = *(_DWORD *)v14;
        int v16 = *(unsigned __int16 *)(v14 + 4);
        if (v15 == 1970302569 && v16 == 29556) {
          goto LABEL_11;
        }
      }
      sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)v6 + 1);
LABEL_11:
      int v6 = (void *)*v6;
    }
    while (v6);
  }
  char v32 = 6;
  strcpy((char *)v31, "inputs");
  uint64_t v18 = sub_2550FDF94(v41, (uint64_t)v31);
  LOBYTE(v33) = 0;
  int v35 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v43, &v33, v18 + 5),
        int v35 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  long long v37 = 0;
  uint64_t v38 = 0;
  sub_2550EAD40((char *)&__p, v33, v34, 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v39);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    uint64_t v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v39;
  *(void *)(a3 + 32) = v40;
  uint64_t v40 = 0;
  long long v39 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v37;
    uint64_t v26 = __p;
    if (v37 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    long long v37 = v24;
    operator delete(v26);
  }
  if (v35 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v35])(&v44, &v33);
  }
  int v35 = -1;
  if (v32 < 0)
  {
    operator delete(v31[0]);
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  else
  {
    float v27 = (void **)v42;
    if (!v42) {
      goto LABEL_56;
    }
  }
  do
  {
    uint64_t v28 = (void **)*v27;
    uint64_t v29 = *((unsigned int *)v27 + 16);
    if (v29 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v29])(&v39, v27 + 5);
    }
    *((_DWORD *)v27 + 16) = -1;
    if (*((char *)v27 + 39) < 0) {
      operator delete(v27[2]);
    }
    operator delete(v27);
    float v27 = v28;
  }
  while (v28);
LABEL_56:
  uint64_t v30 = v41[0];
  v41[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550FB02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, int a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_2550EDF8C(&a20);
  sub_2550EE000((uint64_t)&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a27);
  sub_2550EE560(v27);
  _Unwind_Resume(a1);
}

void sub_2550FB0C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = &unk_270444878;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_DWORD *)(a2 + 96) = 1065353216;
  *(_DWORD *)(a2 + 8) = 35;
  sub_2550EA488(a1, (uint64_t)&v19);
  uint64_t v3 = __p;
  if (!__p) {
    goto LABEL_32;
  }
  do
  {
    int v8 = (int **)(v3 + 2);
    uint64_t v9 = *((unsigned __int8 *)v3 + 39);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = v3[3];
    }
    if (v9 == 7)
    {
      if (v10 >= 0) {
        uint64_t v4 = (int *)(v3 + 2);
      }
      else {
        uint64_t v4 = *v8;
      }
      int v5 = *v4;
      int v6 = *(int *)((char *)v4 + 3);
      if (v5 != 1886680431 || v6 != 1937012080) {
LABEL_10:
      }
        sub_2550ECE90(a2 + 64, (uint64_t)v8, (long long *)v3 + 1);
    }
    else
    {
      if (v9 != 6) {
        goto LABEL_10;
      }
      uint64_t v11 = (uint64_t)(v10 >= 0 ? v3 + 2 : *v8);
      int v12 = *(_DWORD *)v11;
      int v13 = *(unsigned __int16 *)(v11 + 4);
      if (v12 != 1970302569 || v13 != 29556) {
        goto LABEL_10;
      }
    }
    uint64_t v3 = (void *)*v3;
  }
  while (v3);
  int v15 = (void **)__p;
  if (__p)
  {
    do
    {
      int v16 = (void **)*v15;
      uint64_t v17 = *((unsigned int *)v15 + 16);
      if (v17 != -1) {
        ((void (*)(char *, void **))off_2704449B0[v17])(&v21, v15 + 5);
      }
      *((_DWORD *)v15 + 16) = -1;
      if (*((char *)v15 + 39) < 0) {
        operator delete(v15[2]);
      }
      operator delete(v15);
      int v15 = v16;
    }
    while (v16);
  }
LABEL_32:
  uint64_t v18 = v19;
  uint64_t v19 = 0;
  if (v18) {
    operator delete(v18);
  }
}

void sub_2550FB264(_Unwind_Exception *a1)
{
  sub_2550EE560(v1);
  _Unwind_Resume(a1);
}

void sub_2550FB28C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 36;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FB7F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FB8E4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 38;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FBE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FBF3C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 39;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FC4A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FC594(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 40;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FCAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FCBEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 41;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FD150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FD244(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 43;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FD7A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

void sub_2550FD89C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = &unk_270444878;
  *(_OWORD *)(a3 + 16) = 0u;
  int v5 = (void **)(a3 + 16);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(_OWORD *)(a3 + 80) = 0u;
  *(_DWORD *)(a3 + 96) = 1065353216;
  *(_DWORD *)(a3 + 8) = 44;
  sub_2550EA488(a1, (uint64_t)v54);
  for (uint64_t i = v55; i; uint64_t i = (void **)*i)
  {
    uint64_t v11 = (int **)(i + 2);
    int v12 = (void *)*((unsigned __int8 *)i + 39);
    int v13 = (char)v12;
    if ((char)v12 < 0) {
      int v12 = i[3];
    }
    if (v12 == (void *)7)
    {
      if (v13 >= 0) {
        int v7 = (int *)(i + 2);
      }
      else {
        int v7 = *v11;
      }
      int v8 = *v7;
      int v9 = *(int *)((char *)v7 + 3);
      if (v8 == 1886680431 && v9 == 1937012080) {
        continue;
      }
    }
    else if (v12 == (void *)6)
    {
      uint64_t v14 = v13 >= 0 ? (uint64_t)(i + 2) : (uint64_t)*v11;
      int v15 = *(_DWORD *)v14;
      int v16 = *(unsigned __int16 *)(v14 + 4);
      if (v15 == 1970302569 && v16 == 29556) {
        continue;
      }
    }
    sub_2550ECE90(a3 + 64, (uint64_t)v11, (long long *)i + 1);
  }
  char v45 = 6;
  strcpy((char *)v44, "inputs");
  uint64_t v18 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v46) = 0;
  int v48 = -1;
  uint64_t v19 = *((unsigned int *)v18 + 16);
  if (v19 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v19])(&v56, &v46, v18 + 5),
        int v48 = v19,
        v19 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v46, v47, 0xAAAAAAAAAAAAAAABLL * ((v47 - v46) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v20 = (char *)*v5;
  if (*v5)
  {
    char v21 = *(char **)(a3 + 24);
    unint64_t v22 = *v5;
    if (v21 != v20)
    {
      do
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v21 - 1);
        if (v23 && !atomic_fetch_add(&v23->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        v21 -= 16;
      }
      while (v21 != v20);
      unint64_t v22 = *v5;
    }
    *(void *)(a3 + 24) = v20;
    operator delete(v22);
    void *v5 = 0;
    v5[1] = 0;
    v5[2] = 0;
  }
  *(_OWORD *)(a3 + 16) = v52;
  *(void *)(a3 + 32) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  int v24 = (void **)__p;
  if (__p)
  {
    uint64_t v25 = v50;
    uint64_t v26 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v25 - 1) < 0) {
          operator delete(*(v25 - 3));
        }
        v25 -= 3;
      }
      while (v25 != v24);
      uint64_t v26 = __p;
    }
    uint64_t v50 = v24;
    operator delete(v26);
  }
  if (v48 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v48])(&v57, &v46);
  }
  int v48 = -1;
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  char v45 = 7;
  strcpy((char *)v44, "outputs");
  float v27 = sub_2550FDF94(v54, (uint64_t)v44);
  LOBYTE(v41) = 0;
  int v43 = -1;
  uint64_t v28 = *((unsigned int *)v27 + 16);
  if (v28 == -1
    || (((void (*)(char *, uint64_t *, uint64_t *))off_2704449D8[v28])(&v56, &v41, v27 + 5),
        int v43 = v28,
        v28 != 3))
  {
    sub_2550EE418();
  }
  long long __p = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  sub_2550EAD40((char *)&__p, v41, v42, 0xAAAAAAAAAAAAAAABLL * ((v42 - v41) >> 3));
  sub_2550EA938((uint64_t *)&__p, a2, (uint64_t)&v52);
  uint64_t v29 = (void **)(a3 + 40);
  uint64_t v30 = *(void *)(a3 + 40);
  if (v30)
  {
    uint64_t v31 = *(void *)(a3 + 48);
    char v32 = *(void **)(a3 + 40);
    if (v31 != v30)
    {
      do
      {
        uint64_t v33 = *(std::__shared_weak_count **)(v31 - 8);
        if (v33 && !atomic_fetch_add(&v33->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
        v31 -= 16;
      }
      while (v31 != v30);
      char v32 = *v29;
    }
    *(void *)(a3 + 48) = v30;
    operator delete(v32);
    *uint64_t v29 = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
  }
  *(_OWORD *)(a3 + 40) = v52;
  *(void *)(a3 + 56) = v53;
  uint64_t v53 = 0;
  long long v52 = 0uLL;
  uint64_t v34 = (void **)__p;
  if (__p)
  {
    int v35 = v50;
    uint64_t v36 = __p;
    if (v50 != __p)
    {
      do
      {
        if (*((char *)v35 - 1) < 0) {
          operator delete(*(v35 - 3));
        }
        v35 -= 3;
      }
      while (v35 != v34);
      uint64_t v36 = __p;
    }
    uint64_t v50 = v34;
    operator delete(v36);
  }
  if (v43 != -1) {
    ((void (*)(char *, uint64_t *))off_2704449B0[v43])(&v57, &v41);
  }
  int v43 = -1;
  if (v45 < 0)
  {
    operator delete(v44[0]);
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  else
  {
    long long v37 = v55;
    if (!v55) {
      goto LABEL_79;
    }
  }
  do
  {
    uint64_t v38 = (void **)*v37;
    uint64_t v39 = *((unsigned int *)v37 + 16);
    if (v39 != -1) {
      ((void (*)(long long *, void **))off_2704449B0[v39])(&v52, v37 + 5);
    }
    *((_DWORD *)v37 + 16) = -1;
    if (*((char *)v37 + 39) < 0) {
      operator delete(v37[2]);
    }
    operator delete(v37);
    long long v37 = v38;
  }
  while (v38);
LABEL_79:
  uint64_t v40 = (void *)v54[0];
  v54[0] = 0;
  if (v40) {
    operator delete(v40);
  }
}

void sub_2550FDE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,int a23,void *a24)
{
  sub_2550EDF8C(&a24);
  sub_2550EE000((uint64_t)&a9);
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_2550EB130(v25 - 128);
  sub_2550EE560(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_2550FDEF4(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_7:
    operator delete(*(void **)a1);
    return a1;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_7;
  }
  return a1;
}

uint64_t *sub_2550FDF94(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  int v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  int v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v16 == v8)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      int v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_2550FE11C()
{
}

void *sub_2550FE130(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444A10;
  result[1] = v3;
  return result;
}

uint64_t sub_2550FE178(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444A10;
  a2[1] = v2;
  return result;
}

uint64_t sub_2550FE1A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t *sub_2550FE1B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v35, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_2550FE534(a1, v10, a3, (uint64_t)v35);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  char v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *(void *)v35[0] = *v32;
    *char v32 = v35[0];
  }
  else
  {
    *(void *)v35[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v35[0])
    {
      unint64_t v33 = *(void *)(*(void *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11) {
          v33 %= v11;
        }
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v35[0];
    }
  }
  uint64_t v15 = (uint64_t *)v35[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2550FE51C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550FE654((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2550FE534@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0((unsigned char *)v8 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  uint64_t result = *(void *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
      goto LABEL_9;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_2550FE628(_Unwind_Exception *a1)
{
  sub_2550FE654(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_2550FE654(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (v3 != v2 + 40)
      {
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
        }
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      (*(void (**)(uint64_t))(*(void *)(v2 + 40) + 32))(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
LABEL_10:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_2550FE710(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      unint64_t v5 = *v2;
      unint64_t v6 = v2[8];
      if (v6 != (uint64_t *)(v2 + 5)) {
        break;
      }
      ((void (*)(uint64_t *))v2[5][4])((uint64_t *)v2 + 5);
      if (*((char *)v2 + 39) < 0) {
        goto LABEL_12;
      }
LABEL_5:
      operator delete(v2);
      uint64_t v2 = (uint64_t **)v5;
      if (!v5) {
        goto LABEL_2;
      }
    }
    if (v6) {
      (*(void (**)(uint64_t *))(*v6 + 40))(v6);
    }
    if ((*((char *)v2 + 39) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    operator delete(v2[2]);
    goto LABEL_5;
  }
LABEL_2:
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_2550FE7E8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_2550FE96C()
{
  exception = __cxa_allocate_exception(8uLL);
  void *exception = &unk_270444A70;
  __cxa_throw(exception, (struct type_info *)&unk_270444A48, (void (*)(void *))std::exception::~exception);
}

void sub_2550FE9BC(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x25A2886C0);
}

void sub_2550FE9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 10)
  {
    sub_2550EA488(a2, (uint64_t)v29);
    HIBYTE(v25) = 6;
    strcpy((char *)__p, "kindex");
    sub_25512974C(v29, (uint64_t)__p, (uint64_t)&v26);
    if (v28) {
      sub_2550EE418();
    }
    unint64_t v5 = v26;
    int v28 = -1;
    if (SHIBYTE(v25) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = *(void *)(a3 + 176);
    unint64_t v8 = *(void **)(a3 + 184);
    int8x8_t v7 = (void *)(a3 + 176);
    unint64_t v9 = ((uint64_t)v8 - v6) >> 3;
    if (v5 >= v9)
    {
      unint64_t v10 = v5 + 1 - v9;
      if (v5 + 1 <= v9)
      {
        if (v5 + 1 < v9)
        {
          unint64_t v11 = (void *)(v6 + 8 * (v5 + 1));
          while (v8 != v11)
          {
            uint64_t v13 = *--v8;
            uint64_t v12 = v13;
            void *v8 = 0;
            if (v13) {
              (*(void (**)(uint64_t, unint64_t))(*(void *)v12 + 8))(v12, v10);
            }
          }
          *(void *)(a3 + 184) = v11;
        }
      }
      else
      {
        sub_2550FEE44((void **)(a3 + 176), v10);
      }
    }
    char v23 = 5;
    strcpy((char *)v22, "kname");
    sub_25512974C(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28 != 2) {
      sub_2550EE418();
    }
    *(_OWORD *)long long __p = v26;
    uint64_t v25 = v27;
    long long v26 = 0uLL;
    uint64_t v27 = 0;
    int v28 = -1;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    char v14 = sub_25513B0B8(0x60uLL);
    sub_2551292E0((uint64_t)v14, (long long *)__p, *(unsigned char *)(a3 + 384));
    uint64_t v15 = *(void *)(*v7 + 8 * v5);
    *(void *)(*v7 + 8 * v5) = v14;
    if (v15) {
      (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
    }
    char v23 = 9;
    strcpy((char *)v22, "arguments");
    sub_25512974C(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28) {
      sub_2550EE418();
    }
    unint64_t v16 = v26;
    int v28 = -1;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    sub_2551293A8(*(void *)(*v7 + 8 * v5), v16);
    char v23 = 13;
    strcpy((char *)v22, "scratchbuffer");
    sub_25512974C(v29, (uint64_t)v22, (uint64_t)&v26);
    if (v28) {
      sub_2550EE418();
    }
    uint64_t v17 = v26;
    int v28 = -1;
    if (v23 < 0) {
      operator delete(v22[0]);
    }
    sub_255129420(*(void *)(*v7 + 8 * v5), v17 != 0);
    if (SHIBYTE(v25) < 0)
    {
      operator delete(__p[0]);
      uint64_t v18 = (void **)v30;
      if (!v30) {
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v18 = (void **)v30;
      if (!v30)
      {
LABEL_35:
        char v21 = v29[0];
        v29[0] = 0;
        if (v21) {
          operator delete(v21);
        }
        return;
      }
    }
    do
    {
      uint64_t v19 = (void **)*v18;
      uint64_t v20 = *((unsigned int *)v18 + 16);
      if (v20 != -1) {
        ((void (*)(long long *, void **))off_270444AB0[v20])(&v26, v18 + 5);
      }
      *((_DWORD *)v18 + 16) = -1;
      if (*((char *)v18 + 39) < 0) {
        operator delete(v18[2]);
      }
      operator delete(v18);
      uint64_t v18 = v19;
    }
    while (v19);
    goto LABEL_35;
  }
}

void sub_2550FED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
}

void sub_2550FEE1C()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_2550FEE44(void **a1, unint64_t a2)
{
  unint64_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      uint64_t v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    int8x8_t v7 = (char *)*a1;
    uint64_t v8 = v5 - (unsigned char *)*a1;
    uint64_t v9 = v8 >> 3;
    unint64_t v10 = (v8 >> 3) + a2;
    if (v10 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v11 = v4 - v7;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      if (v12 >> 61) {
        sub_2550EACF8();
      }
      uint64_t v13 = (char *)operator new(8 * v12);
    }
    else
    {
      uint64_t v13 = 0;
    }
    char v14 = &v13[8 * v9];
    size_t v15 = 8 * a2;
    unint64_t v16 = &v13[8 * v12];
    bzero(v14, v15);
    uint64_t v17 = &v14[v15];
    if (v5 == v7)
    {
      *a1 = v14;
      a1[1] = v17;
      a1[2] = v16;
      if (!v5) {
        return;
      }
      goto LABEL_30;
    }
    unint64_t v18 = v5 - v7 - 8;
    if (v18 < 0x78 || &v5[-(v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v14 && &v13[v8 - (v18 & 0xFFFFFFFFFFFFFFF8) - 8] < v5) {
      goto LABEL_39;
    }
    uint64_t v19 = (v18 >> 3) + 1;
    uint64_t v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
    v14 -= v20;
    uint64_t v6 = &v5[-v20];
    char v21 = v5 - 16;
    float v22 = &v13[8 * v9 - 16];
    uint64_t v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v25 = *((_OWORD *)v21 - 1);
      long long v24 = *(_OWORD *)v21;
      *((_OWORD *)v21 - 1) = 0uLL;
      *(_OWORD *)char v21 = 0uLL;
      *((_OWORD *)v22 - 1) = v25;
      *(_OWORD *)float v22 = v24;
      v21 -= 32;
      v22 -= 32;
      v23 -= 4;
    }
    while (v23);
    if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_39:
      do
      {
        uint64_t v26 = *((void *)v6 - 1);
        v6 -= 8;
        *(void *)uint64_t v6 = 0;
        *((void *)v14 - 1) = v26;
        v14 -= 8;
      }
      while (v6 != v7);
    }
    uint64_t v27 = (char *)*a1;
    uint64_t v6 = (char *)a1[1];
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6 != v27)
    {
      do
      {
        uint64_t v29 = *((void *)v6 - 1);
        v6 -= 8;
        uint64_t v28 = v29;
        *(void *)uint64_t v6 = 0;
        if (v29) {
          (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
        }
      }
      while (v6 != v27);
      uint64_t v6 = v27;
    }
    if (v6)
    {
LABEL_30:
      operator delete(v6);
    }
  }
}

void sub_2550FF074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) != 14) {
    return;
  }
  sub_2550EA488(a2, (uint64_t)v36);
  long long __dst = 0uLL;
  uint64_t v34 = 0;
  memset((char *)v35 + 8, 0, 48);
  if (&__dst != (long long *)(a2 + 48))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_2550EE22C(&__dst, *(void **)(a2 + 48), *(void *)(a2 + 56));
    }
    else
    {
      long long __dst = *(_OWORD *)(a2 + 48);
      uint64_t v34 = *(void *)(a2 + 64);
    }
  }
  char v32 = 5;
  strcpy((char *)__p, "place");
  *(void *)&long long v38 = __p;
  unint64_t v5 = sub_2550EEBE8((uint64_t)v36, (uint64_t)__p, (uint64_t)&unk_25513EFB0, (long long **)&v38);
  if (*((_DWORD *)v5 + 16) != 2) {
    sub_2550EE418();
  }
  if ((char)v5[63] < 0)
  {
    sub_2550EABB0(&v38, *((void **)v5 + 5), *((void *)v5 + 6));
  }
  else
  {
    long long v38 = *(_OWORD *)(v5 + 40);
    uint64_t v39 = *((void *)v5 + 7);
  }
  uint64_t v6 = HIBYTE(v39);
  char v7 = HIBYTE(v39);
  uint64_t v8 = *((void *)&v38 + 1);
  if (v39 >= 0) {
    uint64_t v9 = (char *)&v38 + HIBYTE(v39);
  }
  else {
    uint64_t v9 = (char *)(v38 + *((void *)&v38 + 1));
  }
  if (v39 >= 0) {
    unint64_t v10 = (char *)&v38;
  }
  else {
    unint64_t v10 = (char *)v38;
  }
  if (v10 != v9)
  {
    do
    {
      *unint64_t v10 = __tolower(*v10);
      ++v10;
    }
    while (v10 != v9);
    uint64_t v6 = HIBYTE(v39);
    uint64_t v8 = *((void *)&v38 + 1);
    char v7 = HIBYTE(v39);
  }
  if (v7 < 0) {
    uint64_t v6 = v8;
  }
  if (v6 == 3)
  {
    size_t v15 = (unsigned __int16 *)v38;
    if (v7 >= 0) {
      size_t v15 = (unsigned __int16 *)&v38;
    }
    unsigned int v16 = bswap32(*v15) >> 16;
    if (v16 == 26480)
    {
      int v17 = *((unsigned __int8 *)v15 + 2) - 117;
    }
    else if (v16 >> 4 < 0x677)
    {
      int v17 = -1;
    }
    else
    {
      int v17 = 1;
    }
    BOOL v14 = v17 == 0;
LABEL_38:
    int v18 = v14;
    if ((v7 & 0x80) == 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }
  if (v6 == 6)
  {
    uint64_t v11 = (long long *)v38;
    if (v7 >= 0) {
      uint64_t v11 = &v38;
    }
    int v12 = *(_DWORD *)v11;
    int v13 = *((unsigned __int16 *)v11 + 2);
    BOOL v14 = v12 == 1769366884 && v13 == 25955;
    goto LABEL_38;
  }
  int v18 = 0;
  if (v7 < 0) {
LABEL_42:
  }
    operator delete((void *)v38);
LABEL_43:
  LODWORD(v35[0]) = v18;
  if (v32 < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v39) = 9;
  strcpy((char *)&v38, "alignment");
  __p[0] = &v38;
  uint64_t v19 = sub_2550EEBE8((uint64_t)v36, (uint64_t)&v38, (uint64_t)&unk_25513EFB0, (long long **)__p);
  if (*((_DWORD *)v19 + 16)) {
    sub_2550EE418();
  }
  *(void *)&v35[2] = *((void *)v19 + 5);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  HIBYTE(v39) = 4;
  strcpy((char *)&v38, "size");
  __p[0] = &v38;
  uint64_t v20 = sub_2550EEBE8((uint64_t)v36, (uint64_t)&v38, (uint64_t)&unk_25513EFB0, (long long **)__p);
  if (*((_DWORD *)v20 + 16)) {
    sub_2550EE418();
  }
  *((void *)&v35[1] + 1) = *((void *)v20 + 5);
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  *(void *)&v35[1] = 0;
  unint64_t v21 = *(void *)(a3 + 88);
  if (v21 >= *(void *)(a3 + 96))
  {
    uint64_t v23 = sub_2550FF524((char **)(a3 + 80), (uint64_t)&__dst);
  }
  else
  {
    if (SHIBYTE(v34) < 0)
    {
      sub_2550EABB0(*(unsigned char **)(a3 + 88), (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v22 = __dst;
      *(void *)(v21 + 16) = v34;
      *(_OWORD *)unint64_t v21 = v22;
    }
    long long v24 = v35[0];
    long long v25 = v35[1];
    long long v26 = v35[2];
    *(void *)(v21 + 72) = *(void *)&v35[3];
    *(_OWORD *)(v21 + 56) = v26;
    *(_OWORD *)(v21 + 40) = v25;
    *(_OWORD *)(v21 + 24) = v24;
    uint64_t v23 = (char *)(v21 + 80);
    *(void *)(a3 + 88) = v21 + 80;
  }
  *(void *)(a3 + 88) = v23;
  sub_255129844((uint64_t)&__dst);
  uint64_t v27 = v37;
  if (v37)
  {
    do
    {
      uint64_t v28 = (void **)*v27;
      uint64_t v29 = *((unsigned int *)v27 + 16);
      if (v29 != -1) {
        ((void (*)(long long *, void **))off_270444B00[v29])(&__dst, v27 + 5);
      }
      *((_DWORD *)v27 + 16) = -1;
      if (*((char *)v27 + 39) < 0) {
        operator delete(v27[2]);
      }
      operator delete(v27);
      uint64_t v27 = v28;
    }
    while (v28);
  }
  uint8x8_t v30 = (void *)v36[0];
  v36[0] = 0;
  if (v30) {
    operator delete(v30);
  }
}

void sub_2550FF480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  uint64_t v8 = v6;
  *(void *)(v5 + 88) = v8;
  sub_255129844((uint64_t)va);
  sub_2550EB130(v7 - 104);
  _Unwind_Resume(a1);
}

void sub_2550FF4FC()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

char *sub_2550FF524(char **a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0x333333333333333) {
    sub_2550EAEEC();
  }
  if (0x999999999999999ALL * ((a1[2] - v3) >> 4) > v6) {
    unint64_t v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 4);
  }
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 4) >= 0x199999999999999) {
    unint64_t v8 = 0x333333333333333;
  }
  else {
    unint64_t v8 = v6;
  }
  if (v8)
  {
    if (v8 > 0x333333333333333) {
      sub_2550EACF8();
    }
    uint64_t v9 = operator new(80 * v8);
  }
  else
  {
    uint64_t v9 = 0;
  }
  unint64_t v10 = &v9[80 * v5];
  long long v24 = &v9[80 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_2550EABB0(&v9[80 * v5], *(void **)a2, *(void *)(a2 + 8));
    uint64_t v3 = *a1;
    unint64_t v4 = a1[1];
    unint64_t v10 = &v9[80 * v5];
  }
  else
  {
    *(_OWORD *)unint64_t v10 = *(_OWORD *)a2;
    *((void *)v10 + 2) = *(void *)(a2 + 16);
  }
  uint64_t v11 = &v9[80 * v5];
  *(_OWORD *)(v11 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v11 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  int v12 = v11 + 80;
  uint64_t v23 = v11 + 80;
  if (v4 == v3)
  {
    unint64_t v21 = v3;
  }
  else
  {
    uint64_t v13 = 0;
    do
    {
      uint64_t v19 = &v10[v13 - 80];
      uint64_t v20 = (void **)&v4[v13 - 80];
      if (v4[v13 - 57] < 0)
      {
        sub_2550EABB0(v19, *v20, *(void *)&v4[v13 - 72]);
      }
      else
      {
        long long v14 = *(_OWORD *)v20;
        *(void *)&v10[v13 - 64] = *(void *)&v4[v13 - 64];
        *(_OWORD *)uint64_t v19 = v14;
      }
      size_t v15 = &v10[v13];
      long long v16 = *(_OWORD *)&v4[v13 - 56];
      long long v17 = *(_OWORD *)&v4[v13 - 40];
      long long v18 = *(_OWORD *)&v4[v13 - 24];
      *((void *)v15 - 1) = *(void *)&v4[v13 - 8];
      *(_OWORD *)(v15 - 24) = v18;
      *(_OWORD *)(v15 - 40) = v17;
      *(_OWORD *)(v15 - 56) = v16;
      v13 -= 80;
    }
    while (&v4[v13] != v3);
    unint64_t v21 = *a1;
    uint64_t v3 = a1[1];
    v10 += v13;
    int v12 = v23;
  }
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v24;
  if (v3 != v21)
  {
    do
    {
      v3 -= 80;
      sub_255129844((uint64_t)v3);
    }
    while (v3 != v21);
    uint64_t v3 = v21;
  }
  if (v3) {
    operator delete(v3);
  }
  return v12;
}

void sub_2550FF740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550FF770((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2550FF770(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_255129844(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_2550FF7C4(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 15
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2), result == 9))
  {
    sub_2550EA488(a2, (uint64_t)&v5);
    unint64_t v4 = sub_25513B0B8(0xA8uLL);
    (*(void (**)(uint64_t))(*(void *)a2 + 16))(a2);
    sub_255129878((uint64_t)v4);
  }
  return result;
}

void sub_255100700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,char a38)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  sub_2550EAA90((uint64_t)&a36);
  sub_2550EB130((uint64_t)&a38);
  _Unwind_Resume(a1);
}

BOOL sub_255100850(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    unint64_t v6 = a1;
  }
  else {
    unint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

void sub_2551008CC()
{
  v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_2551008F8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_255100930(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void mlc_binary_create()
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  v0 = sub_25513B0B8(0xC8uLL);
  sub_255103144((uint64_t)v0);
}

void sub_2551010C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  sub_255102C14(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_255101160@<X0>(void *a1@<X8>)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  a1[3] = 0;
  a1[7] = 0;
  a1[11] = 0;
  a1[15] = 0;
  a1[19] = 0;
  a1[23] = 0;
  a1[27] = 0;
  a1[31] = 0;
  a1[35] = 0;
  a1[39] = 0;
  a1[43] = 0;
  a1[47] = 0;
  a1[51] = 0;
  a1[55] = 0;
  a1[59] = 0;
  a1[63] = 0;
  a1[67] = 0;
  a1[71] = 0;
  a1[75] = 0;
  uint64_t v7 = (void (**)(void **))&unk_270444CB8;
  unint64_t v8 = (uint64_t (*)())sub_2551056BC;
  uint64_t v9 = (void **)&v7;
  sub_255106744(&v7, a1);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444D00;
  unint64_t v8 = (uint64_t (*)())sub_2551056E4;
  uint64_t v9 = (void **)&v7;
  sub_255106A48(&v7, a1 + 4);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444D48;
  unint64_t v8 = (uint64_t (*)())sub_255105710;
  uint64_t v9 = (void **)&v7;
  sub_255106D4C(&v7, a1 + 8);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444D90;
  unint64_t v8 = (uint64_t (*)())sub_255105738;
  uint64_t v9 = (void **)&v7;
  sub_255107050(&v7, a1 + 12);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444DD8;
  unint64_t v8 = (uint64_t (*)())sub_255105740;
  uint64_t v9 = (void **)&v7;
  sub_255107358(&v7, a1 + 16);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444DD8;
  unint64_t v8 = (uint64_t (*)())sub_255105790;
  uint64_t v9 = (void **)&v7;
  sub_255107358(&v7, a1 + 20);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444E20;
  unint64_t v8 = (uint64_t (*)())sub_2551057E0;
  uint64_t v9 = (void **)&v7;
  sub_25510765C(&v7, a1 + 24);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444D90;
  unint64_t v8 = (uint64_t (*)())sub_255105808;
  uint64_t v9 = (void **)&v7;
  sub_255107050(&v7, a1 + 28);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444E68;
  unint64_t v8 = (uint64_t (*)())sub_255105830;
  uint64_t v9 = (void **)&v7;
  sub_255107960(&v7, a1 + 32);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444CB8;
  unint64_t v8 = (uint64_t (*)())sub_255105858;
  uint64_t v9 = (void **)&v7;
  sub_255106744(&v7, a1 + 36);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v2 = (void *)a1[43];
  a1[43] = 0;
  if (v2 == a1 + 40)
  {
    (*(void (**)(void *))(a1[40] + 32))(a1 + 40);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  uint64_t v3 = (void *)a1[47];
  a1[47] = 0;
  if (v3 == a1 + 44)
  {
    (*(void (**)(void *))(a1[44] + 32))(a1 + 44);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  int v4 = (void *)a1[51];
  a1[51] = 0;
  if (v4 == a1 + 48)
  {
    (*(void (**)(void *))(a1[48] + 32))(a1 + 48);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  uint64_t v7 = (void (**)(void **))&unk_270444EB0;
  unint64_t v8 = (uint64_t (*)())sub_255105860;
  uint64_t v9 = (void **)&v7;
  sub_255108A08(&v7, a1 + 52);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444EB0;
  unint64_t v8 = (uint64_t (*)())sub_255105AF8;
  uint64_t v9 = (void **)&v7;
  sub_255108A08(&v7, a1 + 56);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  size_t v5 = (void *)a1[63];
  a1[63] = 0;
  if (v5 == a1 + 60)
  {
    (*(void (**)(void *))(a1[60] + 32))(a1 + 60);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v7 = (void (**)(void **))&unk_270444EF8;
  unint64_t v8 = (uint64_t (*)())sub_255105D90;
  uint64_t v9 = (void **)&v7;
  sub_255108D14(&v7, a1 + 64);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t v7 = (void (**)(void **))&unk_270444F40;
  unint64_t v8 = nullsub_7;
  uint64_t v9 = (void **)&v7;
  sub_255109018(&v7, a1 + 68);
  if (v9 == (void **)&v7)
  {
    v7[4]((void **)&v7);
  }
  else if (v9)
  {
    (*((void (**)(void))*v9 + 5))();
  }
  uint64_t result = a1[75];
  a1[75] = 0;
  if ((void *)result == a1 + 72) {
    return (*(uint64_t (**)(void *))(a1[72] + 32))(a1 + 72);
  }
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 40))(result);
  }
  return result;
}

void *sub_255101CC8(void *a1, void *a2)
{
  size_t v5 = a1 + 3;
  int v4 = (void *)a1[3];
  void *v5 = 0;
  if (v4 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  unint64_t v6 = a2 + 3;
  uint64_t v7 = (void *)a2[3];
  if (!v7)
  {
    unint64_t v6 = v5;
    goto LABEL_9;
  }
  if (v7 != a2)
  {
    void *v5 = v7;
LABEL_9:
    void *v6 = 0;
    goto LABEL_11;
  }
  a1[3] = a1;
  (*(void (**)(void, void *))(*(void *)*v6 + 24))(*v6, a1);
LABEL_11:
  uint64_t v9 = a1 + 7;
  unint64_t v8 = (void *)a1[7];
  uint64_t v10 = a1 + 4;
  a1[7] = 0;
  if (v8 == a1 + 4)
  {
    (*(void (**)(void *))(*v10 + 32))(a1 + 4);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  uint64_t v11 = a2 + 7;
  int v12 = (void *)a2[7];
  if (!v12)
  {
    uint64_t v11 = a1 + 7;
    goto LABEL_19;
  }
  if (v12 != a2 + 4)
  {
    void *v9 = v12;
LABEL_19:
    void *v11 = 0;
    goto LABEL_21;
  }
  void *v9 = v10;
  (*(void (**)(void, void *))(*(void *)*v11 + 24))(*v11, a1 + 4);
LABEL_21:
  long long v14 = a1 + 11;
  uint64_t v13 = (void *)a1[11];
  size_t v15 = a1 + 8;
  a1[11] = 0;
  if (v13 == a1 + 8)
  {
    (*(void (**)(void *))(*v15 + 32))(a1 + 8);
  }
  else if (v13)
  {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
  long long v16 = a2 + 11;
  long long v17 = (void *)a2[11];
  if (!v17)
  {
    long long v16 = a1 + 11;
    goto LABEL_29;
  }
  if (v17 != a2 + 8)
  {
    *long long v14 = v17;
LABEL_29:
    *long long v16 = 0;
    goto LABEL_31;
  }
  *long long v14 = v15;
  (*(void (**)(void, void *))(*(void *)*v16 + 24))(*v16, a1 + 8);
LABEL_31:
  uint64_t v19 = a1 + 15;
  long long v18 = (void *)a1[15];
  uint64_t v20 = a1 + 12;
  a1[15] = 0;
  if (v18 == a1 + 12)
  {
    (*(void (**)(void *))(*v20 + 32))(a1 + 12);
  }
  else if (v18)
  {
    (*(void (**)(void *))(*v18 + 40))(v18);
  }
  unint64_t v21 = a2 + 15;
  long long v22 = (void *)a2[15];
  if (!v22)
  {
    unint64_t v21 = a1 + 15;
    goto LABEL_39;
  }
  if (v22 != a2 + 12)
  {
    *uint64_t v19 = v22;
LABEL_39:
    *unint64_t v21 = 0;
    goto LABEL_41;
  }
  *uint64_t v19 = v20;
  (*(void (**)(void, void *))(*(void *)*v21 + 24))(*v21, a1 + 12);
LABEL_41:
  long long v24 = a1 + 19;
  uint64_t v23 = (void *)a1[19];
  long long v25 = a1 + 16;
  a1[19] = 0;
  if (v23 == a1 + 16)
  {
    (*(void (**)(void *))(*v25 + 32))(a1 + 16);
  }
  else if (v23)
  {
    (*(void (**)(void *))(*v23 + 40))(v23);
  }
  long long v26 = a2 + 19;
  uint64_t v27 = (void *)a2[19];
  if (!v27)
  {
    long long v26 = a1 + 19;
    goto LABEL_49;
  }
  if (v27 != a2 + 16)
  {
    *long long v24 = v27;
LABEL_49:
    *long long v26 = 0;
    goto LABEL_51;
  }
  *long long v24 = v25;
  (*(void (**)(void, void *))(*(void *)*v26 + 24))(*v26, a1 + 16);
LABEL_51:
  uint64_t v29 = a1 + 23;
  uint64_t v28 = (void *)a1[23];
  uint8x8_t v30 = a1 + 20;
  a1[23] = 0;
  if (v28 == a1 + 20)
  {
    (*(void (**)(void *))(*v30 + 32))(a1 + 20);
  }
  else if (v28)
  {
    (*(void (**)(void *))(*v28 + 40))(v28);
  }
  uint64_t v31 = a2 + 23;
  char v32 = (void *)a2[23];
  if (!v32)
  {
    uint64_t v31 = a1 + 23;
    goto LABEL_59;
  }
  if (v32 != a2 + 20)
  {
    *uint64_t v29 = v32;
LABEL_59:
    *uint64_t v31 = 0;
    goto LABEL_61;
  }
  *uint64_t v29 = v30;
  (*(void (**)(void, void *))(*(void *)*v31 + 24))(*v31, a1 + 20);
LABEL_61:
  uint64_t v34 = a1 + 27;
  unint64_t v33 = (void *)a1[27];
  int v35 = a1 + 24;
  a1[27] = 0;
  if (v33 == a1 + 24)
  {
    (*(void (**)(void *))(*v35 + 32))(a1 + 24);
  }
  else if (v33)
  {
    (*(void (**)(void *))(*v33 + 40))(v33);
  }
  uint64_t v36 = a2 + 27;
  long long v37 = (void *)a2[27];
  if (!v37)
  {
    uint64_t v36 = a1 + 27;
    goto LABEL_69;
  }
  if (v37 != a2 + 24)
  {
    *uint64_t v34 = v37;
LABEL_69:
    *uint64_t v36 = 0;
    goto LABEL_71;
  }
  *uint64_t v34 = v35;
  (*(void (**)(void, void *))(*(void *)*v36 + 24))(*v36, a1 + 24);
LABEL_71:
  uint64_t v39 = a1 + 31;
  long long v38 = (void *)a1[31];
  uint64_t v40 = a1 + 28;
  a1[31] = 0;
  if (v38 == a1 + 28)
  {
    (*(void (**)(void *))(*v40 + 32))(a1 + 28);
  }
  else if (v38)
  {
    (*(void (**)(void *))(*v38 + 40))(v38);
  }
  uint64_t v41 = a2 + 31;
  uint64_t v42 = (void *)a2[31];
  if (!v42)
  {
    uint64_t v41 = a1 + 31;
    goto LABEL_79;
  }
  if (v42 != a2 + 28)
  {
    *uint64_t v39 = v42;
LABEL_79:
    *uint64_t v41 = 0;
    goto LABEL_81;
  }
  *uint64_t v39 = v40;
  (*(void (**)(void, void *))(*(void *)*v41 + 24))(*v41, a1 + 28);
LABEL_81:
  int v43 = a1 + 32;
  char v44 = (void *)a1[35];
  a1[35] = 0;
  if (v44 == a1 + 32)
  {
    (*(void (**)(void *))(*v43 + 32))(a1 + 32);
  }
  else if (v44)
  {
    (*(void (**)(void *))(*v44 + 40))(v44);
  }
  char v45 = a1 + 35;
  uint64_t v46 = (void *)a2[35];
  if (!v46)
  {
    uint64_t v47 = a1 + 35;
    goto LABEL_89;
  }
  uint64_t v47 = a2 + 35;
  if (v46 != a2 + 32)
  {
    *char v45 = v46;
LABEL_89:
    void *v47 = 0;
    goto LABEL_91;
  }
  *char v45 = v43;
  (*(void (**)(void, void *))(*(void *)*v47 + 24))(*v47, a1 + 32);
LABEL_91:
  int v48 = a1 + 36;
  unint64_t v49 = (void *)a1[39];
  a1[39] = 0;
  if (v49 == a1 + 36)
  {
    (*(void (**)(void *))(*v48 + 32))(a1 + 36);
  }
  else if (v49)
  {
    (*(void (**)(void *))(*v49 + 40))(v49);
  }
  uint64_t v50 = a1 + 39;
  uint64_t v51 = (void *)a2[39];
  if (!v51)
  {
    long long v52 = a1 + 39;
    goto LABEL_99;
  }
  long long v52 = a2 + 39;
  if (v51 != a2 + 36)
  {
    *uint64_t v50 = v51;
LABEL_99:
    *long long v52 = 0;
    goto LABEL_101;
  }
  *uint64_t v50 = v48;
  (*(void (**)(void, void *))(*(void *)*v52 + 24))(*v52, a1 + 36);
LABEL_101:
  uint64_t v53 = a1 + 40;
  uint64_t v54 = (void *)a1[43];
  a1[43] = 0;
  if (v54 == a1 + 40)
  {
    (*(void (**)(void *))(*v53 + 32))(a1 + 40);
  }
  else if (v54)
  {
    (*(void (**)(void *))(*v54 + 40))(v54);
  }
  long long v55 = a1 + 43;
  char v56 = (void *)a2[43];
  if (!v56)
  {
    char v57 = a1 + 43;
    goto LABEL_109;
  }
  char v57 = a2 + 43;
  if (v56 != a2 + 40)
  {
    *long long v55 = v56;
LABEL_109:
    *char v57 = 0;
    goto LABEL_111;
  }
  *long long v55 = v53;
  (*(void (**)(void, void *))(*(void *)*v57 + 24))(*v57, a1 + 40);
LABEL_111:
  uint64_t v58 = a1 + 44;
  unint64_t v59 = (void *)a1[47];
  a1[47] = 0;
  if (v59 == a1 + 44)
  {
    (*(void (**)(void *))(*v58 + 32))(a1 + 44);
  }
  else if (v59)
  {
    (*(void (**)(void *))(*v59 + 40))(v59);
  }
  uint64_t v60 = a1 + 47;
  uint64_t v61 = (void *)a2[47];
  if (!v61)
  {
    uint64_t v62 = a1 + 47;
    goto LABEL_119;
  }
  uint64_t v62 = a2 + 47;
  if (v61 != a2 + 44)
  {
    *uint64_t v60 = v61;
LABEL_119:
    *uint64_t v62 = 0;
    goto LABEL_121;
  }
  *uint64_t v60 = v58;
  (*(void (**)(void, void *))(*(void *)*v62 + 24))(*v62, a1 + 44);
LABEL_121:
  unint64_t v63 = a1 + 48;
  unint64_t v64 = (void *)a1[51];
  a1[51] = 0;
  if (v64 == a1 + 48)
  {
    (*(void (**)(void *))(*v63 + 32))(a1 + 48);
  }
  else if (v64)
  {
    (*(void (**)(void *))(*v64 + 40))(v64);
  }
  unint64_t v65 = a1 + 51;
  unint64_t v66 = (void *)a2[51];
  if (!v66)
  {
    uint64_t v67 = a1 + 51;
    goto LABEL_129;
  }
  uint64_t v67 = a2 + 51;
  if (v66 != a2 + 48)
  {
    *unint64_t v65 = v66;
LABEL_129:
    *uint64_t v67 = 0;
    goto LABEL_131;
  }
  *unint64_t v65 = v63;
  (*(void (**)(void, void *))(*(void *)*v67 + 24))(*v67, a1 + 48);
LABEL_131:
  unint64_t v68 = a1 + 52;
  int v69 = (void *)a1[55];
  a1[55] = 0;
  if (v69 == a1 + 52)
  {
    (*(void (**)(void *))(*v68 + 32))(a1 + 52);
  }
  else if (v69)
  {
    (*(void (**)(void *))(*v69 + 40))(v69);
  }
  char v70 = a1 + 55;
  v71 = (void *)a2[55];
  if (!v71)
  {
    v72 = a1 + 55;
    goto LABEL_139;
  }
  v72 = a2 + 55;
  if (v71 != a2 + 52)
  {
    *char v70 = v71;
LABEL_139:
    void *v72 = 0;
    goto LABEL_141;
  }
  *char v70 = v68;
  (*(void (**)(void, void *))(*(void *)*v72 + 24))(*v72, a1 + 52);
LABEL_141:
  v73 = a1 + 56;
  int v74 = (void *)a1[59];
  a1[59] = 0;
  if (v74 == a1 + 56)
  {
    (*(void (**)(void *))(*v73 + 32))(a1 + 56);
  }
  else if (v74)
  {
    (*(void (**)(void *))(*v74 + 40))(v74);
  }
  char v75 = a1 + 59;
  v76 = (void *)a2[59];
  if (!v76)
  {
    v77 = a1 + 59;
    goto LABEL_149;
  }
  v77 = a2 + 59;
  if (v76 != a2 + 56)
  {
    *char v75 = v76;
LABEL_149:
    void *v77 = 0;
    goto LABEL_151;
  }
  *char v75 = v73;
  (*(void (**)(void, void *))(*(void *)*v77 + 24))(*v77, a1 + 56);
LABEL_151:
  v78 = a1 + 60;
  v79 = (void *)a1[63];
  a1[63] = 0;
  if (v79 == a1 + 60)
  {
    (*(void (**)(void *))(*v78 + 32))(a1 + 60);
  }
  else if (v79)
  {
    (*(void (**)(void *))(*v79 + 40))(v79);
  }
  char v80 = a1 + 63;
  v81 = (void *)a2[63];
  if (!v81)
  {
    v82 = a1 + 63;
    goto LABEL_159;
  }
  v82 = a2 + 63;
  if (v81 != a2 + 60)
  {
    *char v80 = v81;
LABEL_159:
    void *v82 = 0;
    goto LABEL_161;
  }
  *char v80 = v78;
  (*(void (**)(void, void *))(*(void *)*v82 + 24))(*v82, a1 + 60);
LABEL_161:
  v83 = a1 + 64;
  v84 = (void *)a1[67];
  a1[67] = 0;
  if (v84 == a1 + 64)
  {
    (*(void (**)(void *))(*v83 + 32))(a1 + 64);
  }
  else if (v84)
  {
    (*(void (**)(void *))(*v84 + 40))(v84);
  }
  v85 = a1 + 67;
  v86 = (void *)a2[67];
  if (!v86)
  {
    v87 = a1 + 67;
    goto LABEL_169;
  }
  v87 = a2 + 67;
  if (v86 != a2 + 64)
  {
    void *v85 = v86;
LABEL_169:
    void *v87 = 0;
    goto LABEL_171;
  }
  void *v85 = v83;
  (*(void (**)(void, void *))(*(void *)*v87 + 24))(*v87, a1 + 64);
LABEL_171:
  v88 = a1 + 68;
  v89 = (void *)a1[71];
  a1[71] = 0;
  if (v89 == a1 + 68)
  {
    (*(void (**)(void *))(*v88 + 32))(a1 + 68);
  }
  else if (v89)
  {
    (*(void (**)(void *))(*v89 + 40))(v89);
  }
  v90 = a1 + 71;
  v91 = (void *)a2[71];
  if (!v91)
  {
    v92 = a1 + 71;
    goto LABEL_179;
  }
  v92 = a2 + 71;
  if (v91 != a2 + 68)
  {
    void *v90 = v91;
LABEL_179:
    void *v92 = 0;
    goto LABEL_181;
  }
  void *v90 = v88;
  (*(void (**)(void, void *))(*(void *)*v92 + 24))(*v92, a1 + 68);
LABEL_181:
  v93 = a1 + 72;
  v94 = (void *)a1[75];
  a1[75] = 0;
  if (v94 == a1 + 72)
  {
    (*(void (**)(void *))(*v93 + 32))(a1 + 72);
  }
  else if (v94)
  {
    (*(void (**)(void *))(*v94 + 40))(v94);
  }
  v95 = a1 + 75;
  v96 = (void *)a2[75];
  if (v96)
  {
    v97 = a2 + 75;
    if (v96 == a2 + 72)
    {
      void *v95 = v93;
      (*(void (**)(void, void *))(*(void *)*v97 + 24))(*v97, a1 + 72);
      return a1;
    }
    void *v95 = v96;
  }
  else
  {
    v97 = a1 + 75;
  }
  void *v97 = 0;
  return a1;
}

uint64_t sub_255102C14(void *a1)
{
  *a1 = &unk_270444C98;
  sub_2551055F8((uint64_t)(a1 + 8));
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    int v4 = (void *)a1[5];
    if (v3 != v2)
    {
      uint64_t v5 = a1[6];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        unint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      int v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  unint64_t v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  return nullsub_34(a1);
}

uint64_t mlc_binary_destroy(void *context)
{
  uint64_t v2 = *((void *)context + 10);
  if (v2)
  {
    dispatch_async_and_wait_f(v2, context, (dispatch_function_t)sub_255102D50);
    mlc_event_record(*((void *)context + 13));
    dispatch_release(*((dispatch_object_t *)context + 10));
  }
  uint64_t v3 = *(uint64_t (**)(void *))(*(void *)context + 8);
  return v3(context);
}

void sub_255102D50(uint64_t a1)
{
}

uint64_t mlc_binary_error@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(result + 56);
  if (v3)
  {
    uint64_t v4 = sub_25513AA04(result + 16);
    int v5 = *(char *)(v4 + 31);
    LODWORD(v3) = *(_DWORD *)v4;
    uint64_t v7 = *(void *)(v4 + 8);
    uint64_t result = v4 + 8;
    uint64_t v6 = v7;
    if (v5 >= 0) {
      uint64_t v8 = result;
    }
    else {
      uint64_t v8 = v6;
    }
    *a2 = 0;
    a2[1] = v8;
    a2[2] = 0;
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  *((_DWORD *)a2 + 4) = v3;
  return result;
}

uint64_t mlc_binary_drop_error(uint64_t a1)
{
  sub_25513AA24(a1 + 16, &v3);
  if (v5 < 0) {
    operator delete(__p);
  }
  return *(void *)(a1 + 56);
}

NSObject *mlc_binary_load(void *context)
{
  uint64_t result = context[10];
  if (result)
  {
    dispatch_async_f(result, context, (dispatch_function_t)sub_255102E40);
    return context[11];
  }
  return result;
}

uint64_t sub_255102E40(uint64_t a1)
{
  sub_25512D988(*(void *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 88);
  return mlc_event_record(v2);
}

uint64_t mlc_binary_load_sync(uint64_t a1)
{
  sub_25512D988(*(void *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 88);
  return mlc_event_record(v2);
}

void mlc_binary_validate(uint64_t a1)
{
}

int64_t mlc_binary_n_inputs(uint64_t a1)
{
  return sub_25512E120(*(void *)(a1 + 64));
}

uint64_t mlc_binary_input(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 152) + 16 * a2);
}

int64_t mlc_binary_n_outputs(uint64_t a1)
{
  return sub_25512E400(*(void *)(a1 + 64));
}

uint64_t mlc_binary_output(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(a1 + 176) + 16 * a2);
}

uint64_t mlc_binary_execute(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

uint64_t sub_255102F38(uint64_t a1)
{
  sub_25512E6E0(*(void *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 136);
  return mlc_event_record(v2);
}

void mlc_binary_execute_sync(uint64_t a1)
{
}

void mlc_binary_set_allocator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t mlc_binary_reshape(uint64_t a1)
{
  if (!*(void *)(a1 + 80)) {
    return 0;
  }
  mlc_event_reset(*(void *)(a1 + 120));
  dispatch_async_f(*(dispatch_queue_t *)(a1 + 80), (void *)a1, (dispatch_function_t)sub_255102FDC);
  return *(void *)(a1 + 120);
}

uint64_t sub_255102FDC(uint64_t a1)
{
  sub_25512E850(*(void *)(a1 + 64));
  uint64_t v2 = *(void *)(a1 + 120);
  return mlc_event_record(v2);
}

BOOL mlc_binary_reshape_sync(void *a1)
{
  return a1[7] == 0;
}

void mlc_binary_set_kernel_dylib(uint64_t a1, char *__s)
{
  uint64_t v3 = *(void *)(a1 + 64);
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  char v5 = (void *)v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = (void **)operator new(v7 + 1);
    __dst[1] = v5;
    unint64_t v10 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v10) = v4;
  uint64_t v6 = __dst;
  if (v4) {
LABEL_8:
  }
    memcpy(v6, __s, (size_t)v5);
  *((unsigned char *)v5 + (void)v6) = 0;
  sub_25512EAD4(v3, (uint64_t)__dst);
  if (SHIBYTE(v10) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_255103128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_255103144(uint64_t a1)
{
  *(void *)a1 = &unk_270444BC0;
  *(_DWORD *)(a1 + 8) = -1168773808;
  *(_OWORD *)(a1 + 16) = 0u;
  uint64_t v2 = a1 + 16;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  uint64_t v3 = sub_25513B0B8(0x30uLL);
  sub_25512D338((uint64_t)v3, v2);
  *(void *)(a1 + 64) = v3;
  operator new();
}

void sub_255103334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v12 = *(void *)(v10 - 88);
  *(void *)(v10 - 88) = 0;
  if (v12) {
    sub_25513D534(v12);
  }
  sub_255104730((uint64_t)va);
  sub_2550EAAFC(v8);
  sub_2550EAAFC(v8 - 3);
  sub_2550EAA90(v9);
  sub_2550EAA90(v7);
  sub_2550EAA90(v6);
  sub_2550EAA90(v5);
  sub_2550EAA90(v4);
  sub_255104828(v3);
  nullsub_34(v2);
  _Unwind_Resume(a1);
}

void sub_2551033F8(void *a1)
{
  uint64_t v1 = (void *)sub_255104994(a1);
  j__free(v1);
}

void sub_255103424(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25510345C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_255103490(uint64_t a1, void *a2)
{
  *(void *)a1 = &unk_270444C18;
  sub_25510363C(a1 + 8, (uint64_t)(a2 + 1));
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)(a1 + 64) = 0;
  uint64_t v4 = (const void **)a2[6];
  if (v4 != a2 + 7)
  {
    do
    {
      sub_255103D88((uint64_t **)(a1 + 48), (uint64_t *)(a1 + 56), v4 + 4, (uint64_t)(v4 + 4));
      uint64_t v6 = (const void **)v4[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = (const void ***)v6;
          uint64_t v6 = (const void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const void ***)v4[2];
          BOOL v8 = *v7 == v4;
          uint64_t v4 = (const void **)v7;
        }
        while (!v8);
      }
      uint64_t v4 = (const void **)v7;
    }
    while (v7 != a2 + 7);
  }
  *(void *)a1 = &unk_2704454F0;
  sub_25510441C((void *)(a1 + 72), a2 + 9);
  return a1;
}

void sub_255103598(_Unwind_Exception *a1)
{
  sub_2551035DC(v1);
  _Unwind_Resume(a1);
}

void sub_2551035AC(_Unwind_Exception *a1)
{
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2551035DC(uint64_t a1)
{
  *(void *)a1 = &unk_270444C18;
  sub_2551043B8(a1 + 48, *(char **)(a1 + 56));
  sub_255103CD8(a1 + 8);
  return nullsub_34(a1);
}

uint64_t sub_25510363C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  size_t prime = *(void *)(a2 + 8);
  if (prime == 1)
  {
    size_t prime = 2;
LABEL_17:
    sub_2550EBAE4(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    size_t prime = std::__next_prime(*(void *)(a2 + 8));
    int8x8_t v5 = *(int8x8_t *)(a1 + 8);
    BOOL v6 = prime >= *(void *)&v5;
    if (prime > *(void *)&v5) {
      goto LABEL_17;
    }
  }
  else
  {
    int8x8_t v5 = 0;
    BOOL v6 = 1;
    if (prime) {
      goto LABEL_17;
    }
  }
  if (!v6)
  {
    unint64_t v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v5 < 3uLL || (uint8x8_t v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      unint64_t v7 = std::__next_prime(v7);
    }
    else
    {
      uint64_t v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2) {
        unint64_t v7 = v9;
      }
    }
    if (prime <= v7) {
      size_t prime = v7;
    }
    if (prime < *(void *)&v5) {
      goto LABEL_17;
    }
  }
LABEL_18:
  for (uint64_t i = *(long long **)(a2 + 16); i; uint64_t i = *(long long **)i)
    sub_255103770(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_255103758(_Unwind_Exception *a1)
{
  sub_255103CD8(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_255103770(uint64_t a1, uint64_t a2, long long *a3)
{
  int8x8_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v36, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    long long v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      size_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          int8x8_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          size_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  long long v22 = operator new(0x48uLL);
  v36[0] = v22;
  v36[1] = a1 + 16;
  char v37 = 0;
  *(void *)long long v22 = 0;
  *((void *)v22 + 1) = v10;
  sub_255103B90((char *)v22 + 16, a3);
  char v37 = 1;
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v11 || (float)(v24 * (float)v11) < v23)
  {
    BOOL v25 = 1;
    if (v11 >= 3) {
      BOOL v25 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v11);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *(void *)v36[0] = *v33;
    *unint64_t v33 = v36[0];
  }
  else
  {
    *(void *)v36[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v36[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v36[0])
    {
      unint64_t v34 = *(void *)(*(void *)v36[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v34 >= v11) {
          v34 %= v11;
        }
      }
      else
      {
        v34 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v36[0];
    }
  }
  size_t v15 = (uint64_t *)v36[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_255103AEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255103B08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_255103B08(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(unsigned int *)(v2 + 64);
      if (v3 != -1) {
        ((void (*)(char *, uint64_t))off_270444C38[v3])(&v5, v2 + 40);
      }
      *(_DWORD *)(v2 + 64) = -1;
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

char *sub_255103B90(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_2550EABB0(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  __dst[24] = 0;
  *((_DWORD *)__dst + 12) = -1;
  uint64_t v5 = *((unsigned int *)a2 + 12);
  if (v5 != -1)
  {
    ((void (*)(unsigned char *, char *, char *))off_270444C50[v5])(v7, __dst + 24, (char *)a2 + 24);
    *((_DWORD *)__dst + 12) = v5;
  }
  return __dst;
}

void sub_255103C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v16 = *(unsigned int *)(v13 + 48);
  if (v16 != -1) {
    ((void (*)(char *, uint64_t))off_270444C38[v16])(&a13, v14);
  }
  *(_DWORD *)(v13 + 48) = -1;
  if (*(char *)(v13 + 23) < 0) {
    operator delete(*(void **)v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_255103C80(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void sub_255103C94(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void sub_255103CA0(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

void *sub_255103CAC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0) {
    return sub_2550EABB0(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  long long v3 = *a3;
  __dst[2] = *((void *)a3 + 2);
  *(_OWORD *)long long __dst = v3;
  return result;
}

uint64_t sub_255103CD8(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      long long v3 = (void **)*v2;
      uint64_t v4 = *((unsigned int *)v2 + 16);
      if (v4 != -1) {
        ((void (*)(char *, void **))off_270444C38[v4])(&v7, v2 + 5);
      }
      *((_DWORD *)v2 + 16) = -1;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void *sub_255103D88(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  BOOL v6 = sub_255103E6C(a1, a2, &v15, &v14, a3);
  char v7 = (void *)*v6;
  if (!*v6)
  {
    unint64_t v8 = v6;
    char v7 = operator new(0x38uLL);
    unint64_t v9 = v7 + 4;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_2550EABB0(v9, *(void **)a4, *(void *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)unint64_t v9 = *(_OWORD *)a4;
      v7[6] = *(void *)(a4 + 16);
    }
    unint64_t v10 = v15;
    void *v7 = 0;
    v7[1] = 0;
    unsigned char v7[2] = v10;
    uint64_t *v8 = (uint64_t)v7;
    unint64_t v11 = (uint64_t *)**a1;
    uint8x8_t v12 = v7;
    if (v11)
    {
      *a1 = v11;
      uint8x8_t v12 = (uint64_t *)*v8;
    }
    sub_255104218(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_255103E58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_255103E6C(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  unint64_t v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_23;
  }
  int v10 = *((char *)a5 + 23);
  if (v10 >= 0) {
    unint64_t v11 = a5;
  }
  else {
    unint64_t v11 = *a5;
  }
  if (v10 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  int v13 = *((char *)a2 + 55);
  if (v13 >= 0) {
    uint64_t v14 = a2 + 4;
  }
  else {
    uint64_t v14 = (const void *)a2[4];
  }
  if (v13 >= 0) {
    size_t v15 = *((unsigned __int8 *)a2 + 55);
  }
  else {
    size_t v15 = a2[5];
  }
  if (v15 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v15;
  }
  int v17 = memcmp(v11, v14, v16);
  if (!v17)
  {
    if (v12 >= v15) {
      goto LABEL_19;
    }
LABEL_23:
    uint64_t v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      uint64_t v21 = a2;
    }
    else
    {
      if (v19)
      {
        uint64_t v20 = (uint64_t *)*a2;
        do
        {
          uint64_t v21 = v20;
          uint64_t v20 = (uint64_t *)v20[1];
        }
        while (v20);
      }
      else
      {
        long long v22 = a2;
        do
        {
          uint64_t v21 = (uint64_t *)v22[2];
          BOOL v23 = *v21 == (void)v22;
          long long v22 = v21;
        }
        while (v23);
      }
      int v24 = *((char *)v21 + 55);
      if (v24 >= 0) {
        BOOL v25 = v21 + 4;
      }
      else {
        BOOL v25 = (const void *)v21[4];
      }
      if (v24 >= 0) {
        size_t v26 = *((unsigned __int8 *)v21 + 55);
      }
      else {
        size_t v26 = v21[5];
      }
      int v27 = *((char *)a5 + 23);
      if (v27 >= 0) {
        uint64_t v28 = a5;
      }
      else {
        uint64_t v28 = *a5;
      }
      if (v27 >= 0) {
        size_t v29 = *((unsigned __int8 *)a5 + 23);
      }
      else {
        size_t v29 = (size_t)a5[1];
      }
      if (v29 >= v26) {
        size_t v30 = v26;
      }
      else {
        size_t v30 = v29;
      }
      int v31 = memcmp(v25, v28, v30);
      if (v31)
      {
        if ((v31 & 0x80000000) == 0) {
          goto LABEL_48;
        }
      }
      else if (v26 >= v29)
      {
LABEL_48:
        uint64_t v32 = *v8;
        if (!*v8)
        {
          unint64_t v33 = v8;
LABEL_69:
          *a3 = (uint64_t *)v33;
          return (uint64_t *)v8;
        }
        while (1)
        {
          unint64_t v33 = (uint64_t **)v32;
          uint64_t v36 = (const void *)v32[4];
          unint64_t v34 = v32 + 4;
          int v35 = v36;
          int v37 = *((char *)v34 + 23);
          if (v37 >= 0) {
            long long v38 = v34;
          }
          else {
            long long v38 = v35;
          }
          if (v37 >= 0) {
            size_t v39 = *((unsigned __int8 *)v34 + 23);
          }
          else {
            size_t v39 = v34[1];
          }
          if (v39 >= v29) {
            size_t v40 = v29;
          }
          else {
            size_t v40 = v39;
          }
          int v41 = memcmp(v28, v38, v40);
          if (v41)
          {
            if (v41 < 0) {
              goto LABEL_50;
            }
LABEL_64:
            int v42 = memcmp(v38, v28, v40);
            if (v42)
            {
              if ((v42 & 0x80000000) == 0) {
                goto LABEL_69;
              }
            }
            else if (v39 >= v29)
            {
              goto LABEL_69;
            }
            unint64_t v8 = v33 + 1;
            uint64_t v32 = v33[1];
            if (!v32) {
              goto LABEL_69;
            }
          }
          else
          {
            if (v29 >= v39) {
              goto LABEL_64;
            }
LABEL_50:
            uint64_t v32 = *v33;
            unint64_t v8 = v33;
            if (!*v33) {
              goto LABEL_69;
            }
          }
        }
      }
    }
    if (v19)
    {
      *a3 = v21;
      return v21 + 1;
    }
    else
    {
      *a3 = a2;
      return a2;
    }
  }
  if (v17 < 0) {
    goto LABEL_23;
  }
LABEL_19:
  int v18 = memcmp(v14, v11, v16);
  if (v18)
  {
    if ((v18 & 0x80000000) == 0)
    {
LABEL_21:
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
  }
  else if (v15 >= v12)
  {
    goto LABEL_21;
  }
  uint64_t v43 = a2[1];
  if (v43)
  {
    char v44 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v44;
      char v44 = (uint64_t *)*v44;
    }
    while (v44);
  }
  else
  {
    char v45 = a2;
    do
    {
      a4 = (uint64_t **)v45[2];
      BOOL v23 = *a4 == v45;
      char v45 = (uint64_t *)a4;
    }
    while (!v23);
  }
  if (a4 != v8)
  {
    int v46 = *((char *)a4 + 55);
    if (v46 >= 0) {
      uint64_t v47 = (uint64_t *)(a4 + 4);
    }
    else {
      uint64_t v47 = a4[4];
    }
    if (v46 >= 0) {
      size_t v48 = *((unsigned __int8 *)a4 + 55);
    }
    else {
      size_t v48 = (size_t)a4[5];
    }
    if (v48 >= v12) {
      size_t v49 = v12;
    }
    else {
      size_t v49 = v48;
    }
    int v50 = memcmp(v11, v47, v49);
    if (v50)
    {
      if ((v50 & 0x80000000) == 0)
      {
LABEL_95:
        uint64_t v51 = *v8;
        if (*v8)
        {
          long long v52 = a3;
          while (1)
          {
            uint64_t v53 = (uint64_t **)v51;
            char v56 = (const void *)v51[4];
            uint64_t v54 = v51 + 4;
            long long v55 = v56;
            int v57 = *((char *)v54 + 23);
            if (v57 >= 0) {
              uint64_t v58 = v54;
            }
            else {
              uint64_t v58 = v55;
            }
            if (v57 >= 0) {
              size_t v59 = *((unsigned __int8 *)v54 + 23);
            }
            else {
              size_t v59 = v54[1];
            }
            if (v59 >= v12) {
              size_t v60 = v12;
            }
            else {
              size_t v60 = v59;
            }
            int v61 = memcmp(v11, v58, v60);
            if (v61)
            {
              if (v61 < 0) {
                goto LABEL_97;
              }
LABEL_111:
              int v62 = memcmp(v58, v11, v60);
              if (v62)
              {
                if ((v62 & 0x80000000) == 0) {
                  goto LABEL_123;
                }
              }
              else if (v59 >= v12)
              {
                goto LABEL_123;
              }
              unint64_t v8 = v53 + 1;
              uint64_t v51 = v53[1];
              if (!v51) {
                goto LABEL_123;
              }
            }
            else
            {
              if (v12 >= v59) {
                goto LABEL_111;
              }
LABEL_97:
              uint64_t v51 = *v53;
              unint64_t v8 = v53;
              if (!*v53) {
                goto LABEL_123;
              }
            }
          }
        }
        uint64_t v53 = v8;
        long long v52 = a3;
LABEL_123:
        *long long v52 = (uint64_t *)v53;
        return (uint64_t *)v8;
      }
    }
    else if (v12 >= v48)
    {
      goto LABEL_95;
    }
  }
  if (v43)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

uint64_t *sub_255104218(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = a2[2];
      if (*(unsigned char *)(v2 + 24)) {
        break;
      }
      long long v3 = *(uint64_t **)(v2 + 16);
      uint64_t v4 = *v3;
      if (*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), uint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if (*(uint64_t **)v2 == a2)
          {
            unint64_t v9 = (uint64_t *)a2[2];
          }
          else
          {
            unint64_t v9 = *(uint64_t **)(v2 + 8);
            uint64_t v10 = *v9;
            *(void *)(v2 + 8) = *v9;
            if (v10)
            {
              *(void *)(v10 + 16) = v2;
              long long v3 = *(uint64_t **)(v2 + 16);
            }
            v9[2] = (uint64_t)v3;
            *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = v9;
            uint64_t *v9 = v2;
            *(void *)(v2 + 16) = v9;
            long long v3 = (uint64_t *)v9[2];
            uint64_t v2 = *v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v14 = *(void *)(v2 + 8);
          *long long v3 = v14;
          if (v14) {
            *(void *)(v14 + 16) = v3;
          }
          *(void *)(v2 + 16) = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          *(void *)(v2 + 8) = v3;
          v3[2] = v2;
          return result;
        }
      }
      else if (!v4 || (v6 = *(unsigned __int8 *)(v4 + 24), uint64_t v5 = (unsigned char *)(v4 + 24), v6))
      {
        if (*(uint64_t **)v2 == a2)
        {
          uint64_t v11 = a2[1];
          *(void *)uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            long long v3 = *(uint64_t **)(v2 + 16);
          }
          a2[2] = (uint64_t)v3;
          *(void *)(*(void *)(v2 + 16) + 8 * (**(void **)(v2 + 16) != v2)) = a2;
          a2[1] = v2;
          *(void *)(v2 + 16) = a2;
          long long v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        size_t v12 = (uint64_t *)v3[1];
        uint64_t v13 = *v12;
        v3[1] = *v12;
        if (v13) {
          *(void *)(v13 + 16) = v3;
        }
        v12[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v12;
        *size_t v12 = (uint64_t)v3;
        v3[2] = (uint64_t)v12;
        return result;
      }
      *(unsigned char *)(v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      unsigned char *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void sub_2551043B8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_2551043B8(a1, *(void *)a2);
    sub_2551043B8(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void *sub_25510441C(void *a1, uint64_t *a2)
{
  a1[2] = 0;
  uint64_t v3 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  int64_t v6 = v5 - *a2;
  if (v5 != *a2)
  {
    unint64_t v7 = 0x6DB6DB6DB6DB6DB7 * (v6 >> 3);
    if (v7 >= 0x492492492492493) {
      sub_2550EAEEC();
    }
    int v8 = (char *)operator new(v6);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[56 * v7];
    a1[1] = sub_255104560(v3, v4, v5, (uint64_t)v8);
  }
  return a1;
}

void sub_2551044DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v13[1] = v14;
  size_t v16 = *v13;
  if (*v13)
  {
    int v17 = v13[1];
    int v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        uint64_t v19 = *(v17 - 4);
        if (v19 != -1) {
          ((void (*)(char *, _DWORD *))off_270444C38[v19])(&a13, v17 - 10);
        }
        *(v17 - 4) = -1;
        v17 -= 14;
      }
      while (v17 != v16);
      int v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255104560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      uint64_t v8 = v6 - 16;
      uint64_t v7 = *(void *)(v6 - 16);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 - 8);
      *(void *)uint64_t v4 = v7;
      *(unsigned char *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 40) = -1;
      uint64_t v9 = *(unsigned int *)(v6 + 24);
      uint64_t v10 = v4;
      if (v9 != -1)
      {
        ((void (*)(unsigned char *, uint64_t, uint64_t))off_270444C50[v9])(v13, v4 + 16, v6);
        *(_DWORD *)(v4 + 40) = v9;
        uint64_t v10 = v12;
      }
      *(void *)(v4 + 48) = *(void *)(v6 + 32);
      uint64_t v4 = v10 + 56;
      uint64_t v12 = v10 + 56;
      v6 += 56;
    }
    while (v8 + 56 != a3);
  }
  return v4;
}

void sub_25510464C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v22 = *(unsigned int *)(v19 + 40);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))off_270444C38[v22])(&a19, v20);
  }
  *(_DWORD *)(v19 + 40) = -1;
  sub_255104690((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_255104690(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(uint64_t **)(a1 + 8);
    uint64_t v3 = *(uint64_t **)(a1 + 16);
    uint64_t v5 = *v3;
    for (uint64_t i = *v4; v5 != i; v5 -= 56)
    {
      uint64_t v7 = *(unsigned int *)(v5 - 16);
      if (v7 != -1) {
        ((void (*)(char *, uint64_t))off_270444C38[v7])(&v8, v5 - 40);
      }
      *(_DWORD *)(v5 - 16) = -1;
    }
  }
  return a1;
}

uint64_t sub_255104730(uint64_t a1)
{
  *(void *)a1 = &unk_2704454F0;
  uint64_t v2 = *(void *)(a1 + 72);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    uint64_t v4 = *(void **)(a1 + 72);
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(unsigned int *)(v3 - 16);
        if (v5 != -1) {
          ((void (*)(char *, uint64_t))off_270444C38[v5])(&v7, v3 - 40);
        }
        *(_DWORD *)(v3 - 16) = -1;
        v3 -= 56;
      }
      while (v3 != v2);
      uint64_t v4 = *(void **)(a1 + 72);
    }
    *(void *)(a1 + 80) = v2;
    operator delete(v4);
  }
  *(void *)a1 = &unk_270444C18;
  sub_2551043B8(a1 + 48, *(char **)(a1 + 56));
  sub_255103CD8(a1 + 8);
  return nullsub_34(a1);
}

uint64_t sub_255104828(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 7];
    uint64_t v7 = (uint64_t)*v6;
    uint64_t v8 = (uint64_t)*v6 + 32 * (v5 & 0x7F);
    uint64_t v9 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * ((*(void *)(a1 + 40) + v5) & 0x7F);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 31) < 0)
        {
          operator delete(*(void **)(v8 + 8));
          uint64_t v7 = (uint64_t)*v6;
        }
        v8 += 32;
        if (v8 - v7 == 4096)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
          uint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 64;
    goto LABEL_17;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 128;
LABEL_17:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_255104994(void *a1)
{
  *a1 = &unk_270444BC0;
  uint64_t v2 = a1[22];
  if (v2)
  {
    uint64_t v3 = a1[23];
    uint64_t v4 = (void *)a1[22];
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5 && !atomic_fetch_add(&v5->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[22];
    }
    a1[23] = v2;
    operator delete(v4);
  }
  uint64_t v6 = a1[19];
  if (v6)
  {
    uint64_t v7 = a1[20];
    uint64_t v8 = (void *)a1[19];
    if (v7 != v6)
    {
      do
      {
        uint64_t v9 = *(std::__shared_weak_count **)(v7 - 8);
        if (v9 && !atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        v7 -= 16;
      }
      while (v7 != v6);
      uint64_t v8 = (void *)a1[19];
    }
    a1[20] = v6;
    operator delete(v8);
  }
  uint64_t v10 = (std::__shared_weak_count *)a1[18];
  if (v10 && !atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
    unint64_t v11 = (std::__shared_weak_count *)a1[16];
    if (!v11) {
      goto LABEL_25;
    }
  }
  else
  {
    unint64_t v11 = (std::__shared_weak_count *)a1[16];
    if (!v11) {
      goto LABEL_25;
    }
  }
  if (!atomic_fetch_add(&v11->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_25:
  unint64_t v12 = (std::__shared_weak_count *)a1[14];
  if (v12 && !atomic_fetch_add(&v12->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    uint64_t v13 = (std::__shared_weak_count *)a1[12];
    if (!v13) {
      goto LABEL_31;
    }
  }
  else
  {
    uint64_t v13 = (std::__shared_weak_count *)a1[12];
    if (!v13) {
      goto LABEL_31;
    }
  }
  if (!atomic_fetch_add(&v13->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
LABEL_31:
  uint64_t v14 = (std::__shared_weak_count *)a1[9];
  if (v14 && !atomic_fetch_add(&v14->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  sub_255104828((uint64_t)(a1 + 2));
  return nullsub_34(a1);
}

uint64_t sub_255104C7C(void *a1)
{
  *a1 = &unk_270444C78;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  return nullsub_34(a1);
}

void sub_255104D14(void *a1)
{
  *a1 = &unk_270444C78;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (void *)nullsub_34(a1);
  j__free(v3);
}

void *sub_255104DB0(void *a1)
{
  uint64_t v2 = a1 + 72;
  uint64_t v3 = (void *)a1[75];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
  }
  else if (v3)
  {
    (*(void (**)(void *))(*v3 + 40))(v3);
  }
  uint64_t v4 = (void *)a1[71];
  if (v4 == a1 + 68)
  {
    (*(void (**)(void *))(a1[68] + 32))(a1 + 68);
  }
  else if (v4)
  {
    (*(void (**)(void *))(*v4 + 40))(v4);
  }
  unint64_t v5 = (void *)a1[67];
  if (v5 == a1 + 64)
  {
    (*(void (**)(void *))(a1[64] + 32))(a1 + 64);
  }
  else if (v5)
  {
    (*(void (**)(void *))(*v5 + 40))(v5);
  }
  uint64_t v6 = (void *)a1[63];
  if (v6 == a1 + 60)
  {
    (*(void (**)(void *))(a1[60] + 32))(a1 + 60);
  }
  else if (v6)
  {
    (*(void (**)(void *))(*v6 + 40))(v6);
  }
  uint64_t v7 = (void *)a1[59];
  if (v7 == a1 + 56)
  {
    (*(void (**)(void *))(a1[56] + 32))(a1 + 56);
  }
  else if (v7)
  {
    (*(void (**)(void *))(*v7 + 40))(v7);
  }
  uint64_t v8 = (void *)a1[55];
  if (v8 == a1 + 52)
  {
    (*(void (**)(void *))(a1[52] + 32))(a1 + 52);
  }
  else if (v8)
  {
    (*(void (**)(void *))(*v8 + 40))(v8);
  }
  uint64_t v9 = (void *)a1[51];
  if (v9 == a1 + 48)
  {
    (*(void (**)(void *))(a1[48] + 32))(a1 + 48);
  }
  else if (v9)
  {
    (*(void (**)(void *))(*v9 + 40))(v9);
  }
  uint64_t v10 = (void *)a1[47];
  if (v10 == a1 + 44)
  {
    (*(void (**)(void *))(a1[44] + 32))(a1 + 44);
  }
  else if (v10)
  {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  unint64_t v11 = (void *)a1[43];
  if (v11 == a1 + 40)
  {
    (*(void (**)(void *))(a1[40] + 32))(a1 + 40);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  unint64_t v12 = (void *)a1[39];
  if (v12 == a1 + 36)
  {
    (*(void (**)(void *))(a1[36] + 32))(a1 + 36);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  uint64_t v13 = (void *)a1[35];
  if (v13 == a1 + 32)
  {
    (*(void (**)(void *))(a1[32] + 32))(a1 + 32);
  }
  else if (v13)
  {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
  uint64_t v14 = (void *)a1[31];
  if (v14 == a1 + 28)
  {
    (*(void (**)(void *))(a1[28] + 32))(a1 + 28);
  }
  else if (v14)
  {
    (*(void (**)(void *))(*v14 + 40))(v14);
  }
  uint64_t v15 = (void *)a1[27];
  if (v15 == a1 + 24)
  {
    (*(void (**)(void *))(a1[24] + 32))(a1 + 24);
  }
  else if (v15)
  {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  uint64_t v16 = (void *)a1[23];
  if (v16 == a1 + 20)
  {
    (*(void (**)(void *))(a1[20] + 32))(a1 + 20);
  }
  else if (v16)
  {
    (*(void (**)(void *))(*v16 + 40))(v16);
  }
  int v17 = (void *)a1[19];
  if (v17 == a1 + 16)
  {
    (*(void (**)(void *))(a1[16] + 32))(a1 + 16);
  }
  else if (v17)
  {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  int v18 = (void *)a1[15];
  if (v18 == a1 + 12)
  {
    (*(void (**)(void *))(a1[12] + 32))(a1 + 12);
  }
  else if (v18)
  {
    (*(void (**)(void *))(*v18 + 40))(v18);
  }
  uint64_t v19 = (void *)a1[11];
  if (v19 == a1 + 8)
  {
    (*(void (**)(void *))(a1[8] + 32))(a1 + 8);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  uint64_t v20 = (void *)a1[7];
  if (v20 == a1 + 4)
  {
    (*(void (**)(void *))(a1[4] + 32))(a1 + 4);
  }
  else if (v20)
  {
    (*(void (**)(void *))(*v20 + 40))(v20);
  }
  uint64_t v21 = (void *)a1[3];
  if (v21 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v21)
  {
    (*(void (**)(void *))(*v21 + 40))(v21);
  }
  return a1;
}

void sub_25510553C(void *a1)
{
  *a1 = &unk_270444C98;
  sub_2551055F8((uint64_t)(a1 + 8));
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    uint64_t v4 = (void *)a1[5];
    if (v3 != v2)
    {
      uint64_t v5 = a1[6];
      do
      {
        uint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v8 = (void *)a1[2];
  if (v8)
  {
    a1[3] = v8;
    operator delete(v8);
  }
  uint64_t v9 = (void *)nullsub_34(a1);
  j__free(v9);
}

uint64_t sub_2551055F8(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = *(char **)v2;
      uint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
      if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v5 = *(void **)a1;
  *(void *)a1 = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_2551056BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))();
}

char *sub_2551056E4(uint64_t a1)
{
  uint64_t result = (char *)sub_255129418(*(void *)(a1 + 16));
  if (result[23] < 0) {
    return *(char **)result;
  }
  return result;
}

uint64_t sub_255105710(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 16))();
}

uint64_t sub_255105738(uint64_t a1)
{
  return sub_25513D048(*(void *)(a1 + 16));
}

uint64_t sub_255105740(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16))
                   + 8 * a2);
}

uint64_t sub_255105790(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16))
                   + 8 * a2);
}

uint64_t sub_2551057E0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))();
}

uint64_t sub_255105808(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

uint64_t sub_255105830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 80))();
}

uint64_t sub_255105858(uint64_t a1)
{
  return sub_25512AB74(*(void *)(a1 + 16));
}

void sub_255105860(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 40))(*(void *)(a1 + 16));
  uint64_t v7 = (void *)sub_25512A9DC(*(void *)(a1 + 16));
  if (a2 >= (uint64_t)(v6[1] - *v6) >> 3)
  {
    unint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = sub_255129418(*(void *)(a1 + 16));
    if (*(char *)(v13 + 23) < 0)
    {
      sub_2550EABB0(&__dst, *(void **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v21 = *(void *)(v13 + 16);
      long long __dst = v14;
    }
    uint64_t v16 = sub_25513D048(*(void *)(a1 + 16));
    sub_255107BCC("set dimension on tensor '", (uint64_t)&__dst, "' cannot change dimension ", a2, " of rank ", v16, " tensor.", __p);
    sub_25513A900(v12, 5, (uint64_t)__p);
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      return;
    }
    int v17 = (void *)__dst;
LABEL_22:
    operator delete(v17);
    return;
  }
  uint64_t v8 = v7;
  if (*(void *)(*v7 + 8 * a2) < a3)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = sub_255129418(*(void *)(a1 + 16));
    if (*(char *)(v10 + 23) < 0)
    {
      sub_2550EABB0(v18, *(void **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      uint64_t v19 = *(void *)(v10 + 16);
      *(_OWORD *)int v18 = v11;
    }
    sub_255107E54("set dimension on tensor '", (uint64_t)v18, "' cannot exceed the maximum size (", *(void *)(*v8 + 8 * a2), ") of dimension ", __p);
    sub_25513A900(v9, 5, (uint64_t)__p);
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      return;
    }
    int v17 = v18[0];
    goto LABEL_22;
  }
  uint64_t v15 = *(void (**)(void))(**(void **)(a1 + 16) + 192);
  v15();
}

void sub_255105A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_255105AF8(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v6 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16));
  uint64_t v7 = (void *)sub_25512AA08(*(void *)(a1 + 16));
  if (a2 >= (uint64_t)(v6[1] - *v6) >> 3)
  {
    unint64_t v12 = *(void **)(a1 + 32);
    uint64_t v13 = sub_255129418(*(void *)(a1 + 16));
    if (*(char *)(v13 + 23) < 0)
    {
      sub_2550EABB0(&__dst, *(void **)v13, *(void *)(v13 + 8));
    }
    else
    {
      long long v14 = *(_OWORD *)v13;
      uint64_t v21 = *(void *)(v13 + 16);
      long long __dst = v14;
    }
    uint64_t v16 = sub_25513D048(*(void *)(a1 + 16));
    sub_255107BCC("set stride on tensor '", (uint64_t)&__dst, "' cannot change stride ", a2, " of rank ", v16, " tensor.", __p);
    sub_25513A900(v12, 5, (uint64_t)__p);
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      return;
    }
    int v17 = (void *)__dst;
LABEL_22:
    operator delete(v17);
    return;
  }
  uint64_t v8 = v7;
  if (*(void *)(*v7 + 8 * a2) < a3)
  {
    uint64_t v9 = *(void **)(a1 + 32);
    uint64_t v10 = sub_255129418(*(void *)(a1 + 16));
    if (*(char *)(v10 + 23) < 0)
    {
      sub_2550EABB0(v18, *(void **)v10, *(void *)(v10 + 8));
    }
    else
    {
      long long v11 = *(_OWORD *)v10;
      uint64_t v19 = *(void *)(v10 + 16);
      *(_OWORD *)int v18 = v11;
    }
    sub_255107E54("set stride on tensor '", (uint64_t)v18, "' cannot exceed the maximum stride (", *(void *)(*v8 + 8 * a2), ") of dimension ", __p);
    sub_25513A900(v9, 5, (uint64_t)__p);
    if (v23 < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v19) & 0x80000000) == 0) {
        return;
      }
    }
    else if ((SHIBYTE(v19) & 0x80000000) == 0)
    {
      return;
    }
    int v17 = v18[0];
    goto LABEL_22;
  }
  uint64_t v15 = *(void (**)(void))(**(void **)(a1 + 16) + 200);
  v15();
}

void sub_255105D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255105D90(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) != 11
    || (*(unsigned int (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16)) == 1)
  {
    goto LABEL_29;
  }
  sub_2551080CC((uint64_t)&v61);
  uint64_t v6 = sub_2551084AC(&v61, (uint64_t)"tensor_set_data", 15);
  uint64_t v7 = sub_2551084AC(v6, (uint64_t)": Tensor ", 9);
  uint64_t v8 = sub_255129418(*(void *)(a1 + 16));
  int v9 = *(char *)(v8 + 23);
  if (v9 >= 0) {
    uint64_t v10 = v8;
  }
  else {
    uint64_t v10 = *(void *)v8;
  }
  if (v9 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    uint64_t v11 = *(void *)(v8 + 8);
  }
  unint64_t v12 = sub_2551084AC(v7, v10, v11);
  sub_2551084AC(v12, (uint64_t)" is OPAQUE and not user allocated.", 34);
  uint64_t v13 = *(void **)(a1 + 32);
  if ((v70 & 0x10) != 0)
  {
    unint64_t v16 = v69;
    if (v69 < v66)
    {
      unint64_t v69 = v66;
      unint64_t v16 = v66;
    }
    int v17 = (const void **)&v65;
  }
  else
  {
    if ((v70 & 8) == 0)
    {
      size_t v14 = 0;
      HIBYTE(v60) = 0;
      p_p = &__p;
      goto LABEL_24;
    }
    int v17 = (const void **)v63;
    unint64_t v16 = v64;
  }
  int v18 = *v17;
  size_t v14 = v16 - (void)*v17;
  if (v14 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  if (v14 >= 0x17)
  {
    uint64_t v19 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17) {
      uint64_t v19 = v14 | 7;
    }
    uint64_t v20 = v19 + 1;
    p_p = operator new(v19 + 1);
    size_t v59 = v14;
    unint64_t v60 = v20 | 0x8000000000000000;
    long long __p = p_p;
  }
  else
  {
    HIBYTE(v60) = v16 - *(unsigned char *)v17;
    p_p = &__p;
    if (!v14) {
      goto LABEL_24;
    }
  }
  memmove(p_p, v18, v14);
LABEL_24:
  *((unsigned char *)p_p + v14) = 0;
  sub_25513A900(v13, 5, (uint64_t)&__p);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p);
  }
  uint64_t v61 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v61 + *(void *)(v61 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v62 = MEMORY[0x263F8C318] + 16;
  if (v68 < 0) {
    operator delete(v67);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](v71);
LABEL_29:
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 16) + 16))(*(void *)(a1 + 16)) == 11)
  {
LABEL_30:
    uint64_t result = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 104))(*(void *)(a1 + 16));
    if (result) {
      BOOL v22 = result == 2;
    }
    else {
      BOOL v22 = 1;
    }
    if (v22)
    {
      size_t v23 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
      int v24 = (void *)(*(uint64_t (**)(void))(**(void **)(a1 + 16) + 168))(*(void *)(a1 + 16));
      return memcpy(v24, (const void *)a2, v23);
    }
    else if (result == 1)
    {
      return (void *)(*(uint64_t (**)(void, unint64_t))(**(void **)(a1 + 16) + 224))(*(void *)(a1 + 16), a2);
    }
    return result;
  }
  if ((((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))(*(void *)(a1 + 16)) - 1) & a2) == 0)
  {
    if ((*(uint64_t (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16)) <= a3) {
      goto LABEL_30;
    }
    sub_2551080CC((uint64_t)&v61);
    long long v38 = sub_2551084AC(&v61, (uint64_t)"tensor_set_data", 15);
    sub_2551084AC(v38, (uint64_t)": memory block is ", 18);
    size_t v39 = (void *)std::ostream::operator<<();
    size_t v40 = sub_2551084AC(v39, (uint64_t)" bytes, but ", 12);
    int v41 = sub_2551084AC(v40, (uint64_t)"tensor ", 7);
    uint64_t v42 = sub_255129418(*(void *)(a1 + 16));
    int v43 = *(char *)(v42 + 23);
    if (v43 >= 0) {
      uint64_t v44 = v42;
    }
    else {
      uint64_t v44 = *(void *)v42;
    }
    if (v43 >= 0) {
      uint64_t v45 = *(unsigned __int8 *)(v42 + 23);
    }
    else {
      uint64_t v45 = *(void *)(v42 + 8);
    }
    int v46 = sub_2551084AC(v41, v44, v45);
    sub_2551084AC(v46, (uint64_t)" is ", 4);
    (*(void (**)(void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16));
    uint64_t v47 = (void *)std::ostream::operator<<();
    size_t v48 = sub_2551084AC(v47, (uint64_t)" ", 1);
    sub_2551084AC(v48, (uint64_t)"bytes.", 6);
    int v35 = *(void **)(a1 + 32);
    if ((v70 & 0x10) != 0)
    {
      unint64_t v54 = v69;
      if (v69 < v66)
      {
        unint64_t v69 = v66;
        unint64_t v54 = v66;
      }
      long long v55 = (const void **)&v65;
    }
    else
    {
      if ((v70 & 8) == 0)
      {
        size_t v36 = 0;
        HIBYTE(v60) = 0;
        int v37 = &__p;
        goto LABEL_82;
      }
      long long v55 = (const void **)v63;
      unint64_t v54 = v64;
    }
    uint64_t v51 = *v55;
    size_t v36 = v54 - (void)*v55;
    if (v36 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    if (v36 >= 0x17)
    {
      uint64_t v56 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v56 = v36 | 7;
      }
      uint64_t v57 = v56 + 1;
      int v37 = operator new(v56 + 1);
      size_t v59 = v36;
      unint64_t v60 = v57 | 0x8000000000000000;
      long long __p = v37;
    }
    else
    {
      HIBYTE(v60) = v54 - *(unsigned char *)v55;
      int v37 = &__p;
      if (!v36) {
        goto LABEL_82;
      }
    }
LABEL_81:
    memmove(v37, v51, v36);
    goto LABEL_82;
  }
  sub_2551080CC((uint64_t)&v61);
  BOOL v25 = sub_2551084AC(&v61, (uint64_t)"tensor_set_data", 15);
  size_t v26 = sub_2551084AC(v25, (uint64_t)": pointer 0x", 12);
  *(_DWORD *)((char *)v26 + *(void *)(*v26 - 24) + 8) = *(_DWORD *)((unsigned char *)v26 + *(void *)(*v26 - 24) + 8) & 0xFFFFFFB5 | 8;
  int v27 = (void *)std::ostream::operator<<();
  *(_DWORD *)((char *)v27 + *(void *)(*v27 - 24) + 8) = *(_DWORD *)((unsigned char *)v27 + *(void *)(*v27 - 24) + 8) & 0xFFFFFFB5 | 2;
  uint64_t v28 = sub_2551084AC(v27, (uint64_t)" does not satisfy tensor ", 25);
  uint64_t v29 = sub_255129418(*(void *)(a1 + 16));
  int v30 = *(char *)(v29 + 23);
  if (v30 >= 0) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = *(void *)v29;
  }
  if (v30 >= 0) {
    uint64_t v32 = *(unsigned __int8 *)(v29 + 23);
  }
  else {
    uint64_t v32 = *(void *)(v29 + 8);
  }
  unint64_t v33 = sub_2551084AC(v28, v31, v32);
  sub_2551084AC(v33, (uint64_t)"'s ", 3);
  unint64_t v34 = (void *)std::ostream::operator<<();
  sub_2551084AC(v34, (uint64_t)"-byte alignment requirement.", 28);
  int v35 = *(void **)(a1 + 32);
  if ((v70 & 0x10) != 0)
  {
    unint64_t v49 = v69;
    if (v69 < v66)
    {
      unint64_t v69 = v66;
      unint64_t v49 = v66;
    }
    int v50 = (const void **)&v65;
LABEL_62:
    uint64_t v51 = *v50;
    size_t v36 = v49 - (void)*v50;
    if (v36 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    if (v36 >= 0x17)
    {
      uint64_t v52 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v36 | 7) != 0x17) {
        uint64_t v52 = v36 | 7;
      }
      uint64_t v53 = v52 + 1;
      int v37 = operator new(v52 + 1);
      size_t v59 = v36;
      unint64_t v60 = v53 | 0x8000000000000000;
      long long __p = v37;
    }
    else
    {
      HIBYTE(v60) = v49 - *(unsigned char *)v50;
      int v37 = &__p;
      if (!v36) {
        goto LABEL_82;
      }
    }
    goto LABEL_81;
  }
  if ((v70 & 8) != 0)
  {
    int v50 = (const void **)v63;
    unint64_t v49 = v64;
    goto LABEL_62;
  }
  size_t v36 = 0;
  HIBYTE(v60) = 0;
  int v37 = &__p;
LABEL_82:
  *((unsigned char *)v37 + v36) = 0;
  sub_25513A900(v35, 5, (uint64_t)&__p);
  if (SHIBYTE(v60) < 0) {
    operator delete(__p);
  }
  uint64_t v61 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&v61 + *(void *)(v61 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  uint64_t v62 = MEMORY[0x263F8C318] + 16;
  if (v68 < 0) {
    operator delete(v67);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (void *)MEMORY[0x25A288660](v71);
}

void sub_255106660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_2551066B0()
{
}

void *sub_2551066C4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444CB8;
  result[1] = v3;
  return result;
}

uint64_t sub_25510670C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444CB8;
  a2[1] = v2;
  return result;
}

uint64_t sub_255106738(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255106744(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2551069A4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_2551069B4()
{
}

void *sub_2551069C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444D00;
  result[1] = v3;
  return result;
}

uint64_t sub_255106A10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444D00;
  a2[1] = v2;
  return result;
}

uint64_t sub_255106A3C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255106A48(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255106CA8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_255106CB8()
{
}

void *sub_255106CCC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444D48;
  result[1] = v3;
  return result;
}

uint64_t sub_255106D14(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444D48;
  a2[1] = v2;
  return result;
}

uint64_t sub_255106D40(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255106D4C(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255106FAC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_255106FBC()
{
}

void *sub_255106FD0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444D90;
  result[1] = v3;
  return result;
}

uint64_t sub_255107018(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444D90;
  a2[1] = v2;
  return result;
}

uint64_t sub_255107044(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255107050(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2551072B0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_2551072C0()
{
}

void *sub_2551072D4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444DD8;
  result[1] = v3;
  return result;
}

uint64_t sub_25510731C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444DD8;
  a2[1] = v2;
  return result;
}

uint64_t sub_255107348(uint64_t a1, void *a2, void *a3)
{
  return (*(uint64_t (**)(void, void))(a1 + 8))(*a2, *a3);
}

void *sub_255107358(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2551075B8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_2551075C8()
{
}

void *sub_2551075DC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444E20;
  result[1] = v3;
  return result;
}

uint64_t sub_255107624(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444E20;
  a2[1] = v2;
  return result;
}

uint64_t sub_255107650(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_25510765C(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2551078BC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_2551078CC()
{
}

void *sub_2551078E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444E68;
  result[1] = v3;
  return result;
}

uint64_t sub_255107928(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444E68;
  a2[1] = v2;
  return result;
}

uint64_t sub_255107954(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255107960(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255107BC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

uint64_t sub_255107BCC@<X0>(char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, uint64_t a6@<X5>, const char *a7@<X6>, unsigned char *a8@<X8>)
{
  sub_2551080CC((uint64_t)v27);
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  uint64_t v26 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_255108264(v27, a1, (uint64_t)__p, a3, a4, a5, a6, a7);
  if (SHIBYTE(v26) < 0)
  {
    operator delete(__p[0]);
    char v16 = v34;
    if ((v34 & 0x10) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v18 = v33;
    if (v33 < v30)
    {
      unint64_t v33 = v30;
      unint64_t v18 = v30;
    }
    uint64_t v19 = (const void **)&v29;
    goto LABEL_10;
  }
  char v16 = v34;
  if ((v34 & 0x10) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v16 & 8) == 0)
  {
    size_t v17 = 0;
    a8[23] = 0;
    goto LABEL_18;
  }
  uint64_t v19 = (const void **)v28;
  unint64_t v18 = v28[2];
LABEL_10:
  uint64_t v20 = *v19;
  size_t v17 = v18 - (void)*v19;
  if (v17 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v17 >= 0x17)
  {
    uint64_t v21 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17) {
      uint64_t v21 = v17 | 7;
    }
    uint64_t v22 = v21 + 1;
    size_t v23 = operator new(v21 + 1);
    *((void *)a8 + 1) = v17;
    *((void *)a8 + 2) = v22 | 0x8000000000000000;
    *(void *)a8 = v23;
    a8 = v23;
    goto LABEL_17;
  }
  a8[23] = v17;
  if (v17) {
LABEL_17:
  }
    memmove(a8, v20, v17);
LABEL_18:
  a8[v17] = 0;
  v27[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v27 + *(void *)(v27[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v27[1] = MEMORY[0x263F8C318] + 16;
  if (v32 < 0) {
    operator delete(v31);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25A288660](&v35);
}

void sub_255107E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_255107E54@<X0>(char *a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X3>, const char *a5@<X4>, unsigned char *a6@<X8>)
{
  sub_2551080CC((uint64_t)v23);
  *(_OWORD *)long long __p = *(_OWORD *)a2;
  uint64_t v22 = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_255108840(v23, a1, (uint64_t)__p, a3, a4, a5);
  if (SHIBYTE(v22) < 0)
  {
    operator delete(__p[0]);
    char v12 = v30;
    if ((v30 & 0x10) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    unint64_t v14 = v29;
    if (v29 < v26)
    {
      unint64_t v29 = v26;
      unint64_t v14 = v26;
    }
    uint64_t v15 = (const void **)&v25;
    goto LABEL_10;
  }
  char v12 = v30;
  if ((v30 & 0x10) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v12 & 8) == 0)
  {
    size_t v13 = 0;
    a6[23] = 0;
    goto LABEL_18;
  }
  uint64_t v15 = (const void **)v24;
  unint64_t v14 = v24[2];
LABEL_10:
  char v16 = *v15;
  size_t v13 = v14 - (void)*v15;
  if (v13 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v13 >= 0x17)
  {
    uint64_t v17 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v17 = v13 | 7;
    }
    uint64_t v18 = v17 + 1;
    uint64_t v19 = operator new(v17 + 1);
    *((void *)a6 + 1) = v13;
    *((void *)a6 + 2) = v18 | 0x8000000000000000;
    *(void *)a6 = v19;
    a6 = v19;
    goto LABEL_17;
  }
  a6[23] = v13;
  if (v13) {
LABEL_17:
  }
    memmove(a6, v16, v13);
LABEL_18:
  a6[v13] = 0;
  v23[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v23 + *(void *)(v23[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v23[1] = MEMORY[0x263F8C318] + 16;
  if (v28 < 0) {
    operator delete(v27);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x25A288660](&v31);
}

void sub_2551080A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2551080CC(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C340] + 64;
  *(void *)(a1 + 112) = MEMORY[0x263F8C340] + 64;
  uint64_t v3 = *(void *)(MEMORY[0x263F8C2C8] + 16);
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2C8] + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  uint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  uint64_t v6 = MEMORY[0x263F8C340] + 24;
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)a1 = v6;
  *(void *)(a1 + 112) = v2;
  std::streambuf::basic_streambuf();
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_25510823C(_Unwind_Exception *a1)
{
  std::ostream::~ostream();
  MEMORY[0x25A288660](v1);
  _Unwind_Resume(a1);
}

void *sub_255108264(void *a1, char *__s, uint64_t a3, const char *a4, uint64_t a5, const char *a6, uint64_t a7, const char *a8)
{
  size_t v14 = strlen(__s);
  sub_2551084AC(a1, (uint64_t)__s, v14);
  unint64_t v25 = *(void *)(a3 + 16);
  unint64_t v15 = v25;
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  char v16 = (void *)HIBYTE(v15);
  if ((char)v16 >= 0) {
    uint64_t v17 = __p;
  }
  else {
    uint64_t v17 = (void **)__p[0];
  }
  if ((char)v16 >= 0) {
    uint64_t v18 = v16;
  }
  else {
    uint64_t v18 = __p[1];
  }
  sub_2551084AC(a1, (uint64_t)v17, (uint64_t)v18);
  size_t v19 = strlen(a4);
  sub_2551084AC(a1, (uint64_t)a4, v19);
  std::ostream::operator<<();
  size_t v20 = strlen(a6);
  sub_2551084AC(a1, (uint64_t)a6, v20);
  std::ostream::operator<<();
  size_t v21 = strlen(a8);
  uint64_t v22 = sub_2551084AC(a1, (uint64_t)a8, v21);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p[0]);
  }
  return v22;
}

void sub_25510838C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2551083A8(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C8];
  uint64_t v3 = *MEMORY[0x263F8C2C8];
  *(void *)a1 = *MEMORY[0x263F8C2C8];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 8) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](a1 + 112);
  return a1;
}

void *sub_2551084AC(void *a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x25A288550](v13, a1);
  if (v13[0])
  {
    uint64_t v6 = (uint64_t)a1 + *(void *)(*a1 - 24);
    uint64_t v7 = *(void *)(v6 + 40);
    int v8 = *(_DWORD *)(v6 + 8);
    int v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
      uint64_t v10 = std::locale::use_facet(&v14, MEMORY[0x263F8C108]);
      int v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20) {
      uint64_t v11 = a2 + a3;
    }
    else {
      uint64_t v11 = a2;
    }
    if (!sub_255108650(v7, a2, v11, a2 + a3, v6, (char)v9)) {
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 5);
    }
  }
  MEMORY[0x25A288560](v13);
  return a1;
}

void sub_2551085E8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x25A288560](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(void *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x2551085C8);
}

void sub_25510863C(_Unwind_Exception *a1)
{
}

uint64_t sub_255108650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      size_t v12 = 0;
    }
    else {
      size_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if ((uint64_t)v12 >= 1)
    {
      if (v12 >= 0x7FFFFFFFFFFFFFF8) {
        sub_2550EAC50();
      }
      if (v12 >= 0x17)
      {
        uint64_t v14 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v12 | 7) != 0x17) {
          uint64_t v14 = v12 | 7;
        }
        uint64_t v15 = v14 + 1;
        size_t v13 = (void **)operator new(v14 + 1);
        __b[1] = (void *)v12;
        int64_t v22 = v15 | 0x8000000000000000;
        __b[0] = v13;
      }
      else
      {
        HIBYTE(v22) = v12;
        size_t v13 = __b;
      }
      memset(v13, __c, v12);
      *((unsigned char *)v13 + v12) = 0;
      if (v22 >= 0) {
        char v16 = __b;
      }
      else {
        char v16 = (void **)__b[0];
      }
      uint64_t v17 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(void *)v6 + 96))(v6, v16, v12);
      uint64_t v18 = v17;
      if (SHIBYTE(v22) < 0)
      {
        operator delete(__b[0]);
        if (v18 != v12) {
          return 0;
        }
      }
      else if (v17 != v12)
      {
        return 0;
      }
    }
    uint64_t v19 = a4 - a3;
    if (v19 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v19) == v19)
    {
      *(void *)(a5 + 24) = 0;
      return v6;
    }
    return 0;
  }
  return v6;
}

void sub_255108824(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255108840(void *a1, char *__s, uint64_t a3, const char *a4, uint64_t a5, const char *a6)
{
  size_t v11 = strlen(__s);
  sub_2551084AC(a1, (uint64_t)__s, v11);
  unint64_t v21 = *(void *)(a3 + 16);
  unint64_t v12 = v21;
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  size_t v13 = (void *)HIBYTE(v12);
  if ((char)v13 >= 0) {
    uint64_t v14 = __p;
  }
  else {
    uint64_t v14 = (void **)__p[0];
  }
  if ((char)v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = __p[1];
  }
  sub_2551084AC(a1, (uint64_t)v14, (uint64_t)v15);
  size_t v16 = strlen(a4);
  sub_2551084AC(a1, (uint64_t)a4, v16);
  std::ostream::operator<<();
  size_t v17 = strlen(a6);
  sub_2551084AC(a1, (uint64_t)a6, v17);
  uint64_t v18 = std::ostream::operator<<();
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  return v18;
}

void sub_25510894C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25510896C()
{
}

void *sub_255108980(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444EB0;
  result[1] = v3;
  return result;
}

uint64_t sub_2551089C8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444EB0;
  a2[1] = v2;
  return result;
}

uint64_t sub_2551089F4(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

void *sub_255108A08(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255108C68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_255108C78()
{
}

void *sub_255108C8C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444EF8;
  result[1] = v3;
  return result;
}

uint64_t sub_255108CD4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444EF8;
  a2[1] = v2;
  return result;
}

uint64_t sub_255108D00(uint64_t a1, void *a2, void *a3, void *a4)
{
  return (*(uint64_t (**)(void, void, void))(a1 + 8))(*a2, *a3, *a4);
}

void *sub_255108D14(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255108F74(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_255108F84()
{
}

void *sub_255108F98(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270444F40;
  result[1] = v3;
  return result;
}

uint64_t sub_255108FE0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270444F40;
  a2[1] = v2;
  return result;
}

uint64_t sub_25510900C(uint64_t a1, void *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

void *sub_255109018(void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255109278(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void sub_255109288(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_2551092C0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    sub_255104DB0((void *)(v1 + 8));
    JUMPOUT(0x25A2886C0);
  }
  return result;
}

uint64_t sub_255109320(uint64_t a1, uint64_t a2, char ***a3)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  *(_OWORD *)v89 = 0u;
  *(void *)&v89[16] = 0x100000001;
  long long v90 = *(_OWORD *)&v89[8];
  v85[0] = 0;
  unint64_t v88 = 0xFFFFFFFE00000000;
  uint64_t v94 = 200;
  uint64_t v6 = malloc_type_malloc(0x3840uLL, 0x10F2040C712DE25uLL);
  v92 = v6;
  if (!v6) {
    goto LABEL_10;
  }
  uint64_t i = 0;
  v93 = (char *)v6;
  uint64_t v95 = 0;
  long long __len = xmmword_25513EA10;
  uint64_t v7 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  v97 = v7;
  if (!v7) {
    goto LABEL_10;
  }
  void *v7 = 0;
  int v8 = malloc_type_malloc(*((size_t *)&__len + 1), 0x100004077774924uLL);
  __b = v8;
  if (!v8)
  {
    free(v97);
    goto LABEL_10;
  }
  bzero(v8, *((size_t *)&__len + 1));
  int v9 = setjmp(v91);
  if (v9 == 2)
  {
LABEL_10:
    sub_25510AFDC((uint64_t)&v89[8], a1, "memory exhausted");
    uint64_t result = 2;
    goto LABEL_11;
  }
  if (v9)
  {
LABEL_121:
    uint64_t result = 1;
    goto LABEL_11;
  }
  uint64_t v10 = v93;
  v93 += 72;
  --v94;
  *((_DWORD *)v10 + 1) = 0;
  *uint64_t v10 = 1;
  *((void *)v10 + 2) = 0;
  v10[1] = 1;
  *((void *)v10 + 1) = *(void *)v97;
  *((void *)v10 + 3) = *(void *)v89;
  long long v11 = v90;
  *((_OWORD *)v10 + 2) = *(_OWORD *)&v89[8];
  *((_OWORD *)v10 + 3) = v11;
  *(void *)v97 = v10;
  if (v94 <= 1) {
    sub_25510B39C((uint64_t)v85);
  }
  uint64_t v12 = 0;
LABEL_32:
  while (2)
  {
    uint64_t v22 = *(int *)(*(void *)v97 + 4);
    if (v22 != 6)
    {
      int v23 = byte_25513EB2A[v22];
      if (v23 == -55)
      {
        if (byte_25513EB7B[v22])
        {
          sub_25510A60C((uint64_t)v85, 0, byte_25513EB7B[v22], 1, a1, a3);
LABEL_116:
          int v25 = 7;
          goto LABEL_57;
        }
      }
      else
      {
        int v24 = HIDWORD(v88);
        if (HIDWORD(v88) == -2)
        {
          HIDWORD(v88) = sub_2550E938C((uint64_t)v89, (uint64_t)&v89[8], a2);
          int v24 = HIDWORD(v88);
        }
        if (v24 <= 0)
        {
          HIDWORD(v88) = 0;
          int v26 = 0;
        }
        else if (v24 >= 0x10A)
        {
          int v26 = 2;
        }
        else
        {
          if (v24 == 256)
          {
            long long v86 = *(_OWORD *)&v89[8];
            long long v87 = v90;
            int v25 = 15;
LABEL_57:
            uint64_t v31 = v12;
            int v32 = v25;
            goto LABEL_58;
          }
          int v26 = byte_25513EA20[v24];
        }
        int v27 = v26 + v23;
        if ((v26 + v23) <= 0x44 && v26 == byte_25513EBCC[v27])
        {
          int v28 = byte_25513EC66[v27];
          if (word_25513ED24[byte_25513ED2E[v27]])
          {
            int v25 = 11;
            goto LABEL_57;
          }
        }
        else
        {
          int v28 = -byte_25513EB7B[v22];
        }
        if (v28 >= 1)
        {
          HIDWORD(v88) = -2;
          unint64_t v29 = v93;
          v93 += 72;
          --v94;
          *unint64_t v29 = 1;
          *((_DWORD *)v29 + 1) = v28;
          *((void *)v29 + 2) = v12 + 1;
          v29[1] = 1;
          *((void *)v29 + 1) = *(void *)v97;
          *((void *)v29 + 3) = *(void *)v89;
          long long v30 = v90;
          *((_OWORD *)v29 + 2) = *(_OWORD *)&v89[8];
          *((_OWORD *)v29 + 3) = v30;
          *(void *)v97 = v29;
          if (v94 <= 1) {
            sub_25510B39C((uint64_t)v85);
          }
          if (v85[0] >= 1) {
            --v85[0];
          }
          uint64_t v31 = v12 + 1;
          int v32 = 0;
LABEL_58:
          uint64_t result = 0;
          uint64_t v12 = v31;
          switch(v32)
          {
            case 0:
              continue;
            case 4:
              goto LABEL_10;
            case 6:
            case 7:
              goto LABEL_121;
            case 11:
              int64_t v33 = __len;
              break;
            case 14:
              goto LABEL_11;
            case 15:
              goto LABEL_96;
            default:
              return result;
          }
          while (1)
          {
            uint64_t v34 = v31;
            if (v33 >= 1) {
              break;
            }
            uint64_t v37 = v33;
LABEL_71:
            if (!v33)
            {
LABEL_92:
              if (i)
              {
                *(void *)v97 = i;
                *(void *)&long long __len = 1;
                uint64_t i = 0;
              }
              else if (!v37)
              {
                sub_25510AE58((uint64_t)v85, (uint64_t)&v89[8], a1, "syntax error");
              }
              sub_25510AE8C((uint64_t)v85, a1, a3);
              long long v86 = *(_OWORD *)&v89[8];
              long long v87 = v90;
              sub_25510A1D8((uint64_t)v85, a1);
LABEL_96:
              if (v85[0] != 3)
              {
                uint64_t v61 = __len;
                if ((uint64_t)__len >= 1)
                {
                  uint64_t v62 = 0;
                  do
                  {
                    uint64_t v63 = v62 + 1;
                    if (*((void *)v97 + v62))
                    {
                      if (v63 < (uint64_t)__len)
                      {
                        uint64_t v64 = v62 + 1;
                        do
                        {
                          if (*((void *)v97 + v64)) {
                            uint64_t i = *((void *)v97 + v64);
                          }
                          *((void *)v97 + v64++) = 0;
                        }
                        while (v61 != v64);
                      }
                      uint64_t v65 = 0;
                      uint64_t v66 = 0;
                      uint64_t v67 = v61;
                      do
                      {
                        uint64_t v69 = v65;
                        uint64_t v68 = v66;
                        uint64_t v70 = *((void *)v97 + v65);
                        if (v70)
                        {
                          *((void *)v97 + v66) = v70;
                          *((unsigned char *)__b + v66) = *((unsigned char *)__b + v69);
                          uint64_t v68 = v66 + 1;
                        }
                        else
                        {
                          *(void *)&long long __len = --v67;
                        }
                        uint64_t v65 = v69 + 1;
                        uint64_t v66 = v68;
                      }
                      while (v68 < v67);
                      if (v67 == 1)
                      {
                        uint64_t v71 = v95;
                        if (v95)
                        {
                          if (*(void *)v97 == v95)
                          {
                            v72 = 0;
                          }
                          else
                          {
                            v73 = *(long long **)v97;
                            int v74 = 0;
                            do
                            {
                              char v75 = (long long *)*((void *)v73 + 1);
                              *((void *)v73 + 1) = v74;
                              v72 = v73;
                              int v74 = v73;
                              v73 = v75;
                            }
                            while (v75 != (long long *)v71);
                          }
                          v76 = (char *)(v71 + 72);
                          uint64_t v77 = v94
                              - 0x71C71C71C71C71C7 * ((v93 - (unsigned char *)v92) >> 3)
                              + 0x71C71C71C71C71C7 * ((v76 - (unsigned char *)v92) >> 3);
                          v93 = v76;
                          uint64_t v94 = v77;
                          uint64_t v95 = 0;
                          for (uint64_t i = 0; v72; --v94)
                          {
                            long long v78 = *v72;
                            long long v79 = v72[1];
                            long long v80 = v72[3];
                            *((_OWORD *)v76 + 2) = v72[2];
                            *((_OWORD *)v76 + 3) = v80;
                            *(_OWORD *)v76 = v78;
                            *((_OWORD *)v76 + 1) = v79;
                            v72 = (long long *)*((void *)v72 + 1);
                            *((void *)v93 + 1) = v93 - 72;
                            *(void *)v97 = v93;
                            v76 = v93 + 72;
                            v93 += 72;
                          }
                        }
                      }
                      v85[0] = 3;
                      uint64_t v81 = *(void *)v97;
                      if (*(void *)v97)
                      {
                        v82 = v97;
                        do
                        {
                          long long v84 = *(_OWORD *)(v81 + 48);
                          long long v86 = *(_OWORD *)(v81 + 32);
                          long long v87 = v84;
                          uint64_t v83 = *(void *)(v81 + 8);
                          if (v83)
                          {
                            sub_25510B2B0(v81);
                            uint64_t v83 = *(void *)(v81 + 8);
                            v82 = v97;
                          }
                          void *v82 = v83;
                          v93 -= 72;
                          ++v94;
                          uint64_t v81 = *(void *)v97;
                          v82 = v97;
                        }
                        while (*(void *)v97);
                      }
                      longjmp(v91, 1);
                    }
                    ++v62;
                  }
                  while ((void)__len != v63);
                }
                longjmp(v91, 1);
              }
              int v54 = HIDWORD(v88);
              do
              {
                if (v54 != -2)
                {
                  if (!v54) {
                    longjmp(v91, 1);
                  }
                  uint64_t v55 = *(void *)v97;
                  long long v100 = *(_OWORD *)&v89[8];
                  long long v101 = v90;
                  *(_OWORD *)(v55 + 48) = v90;
                  if (HIDWORD(v88) > 0x109) {
                    int v56 = 2;
                  }
                  else {
                    int v56 = byte_25513EA20[HIDWORD(v88)];
                  }
                  sub_25510B0F4(v56, (void **)v89);
                  HIDWORD(v88) = -2;
                }
                int v54 = sub_2550E938C((uint64_t)v89, (uint64_t)&v89[8], a2);
                HIDWORD(v88) = v54;
                if (v54 <= 0)
                {
                  HIDWORD(v88) = 0;
                  int v57 = 0;
                  int v54 = 0;
                }
                else if (v54 > 0x109)
                {
                  int v57 = 2;
                }
                else
                {
                  int v57 = byte_25513EA20[v54];
                }
                uint64_t v58 = *(int *)(*(void *)v97 + 4);
                int v59 = byte_25513EB2A[v58];
                if (v59 == -55) {
                  break;
                }
                unsigned int v60 = v57 + v59;
                if (v60 <= 0x44 && v57 == byte_25513EBCC[v60]) {
                  break;
                }
              }
              while (!byte_25513EB7B[v58]);
              uint64_t v12 = *(void *)(*(void *)v97 + 16);
              goto LABEL_32;
            }
LABEL_72:
            if (HIDWORD(v88) > 0x109) {
              int v45 = 2;
            }
            else {
              int v45 = byte_25513EA20[HIDWORD(v88)];
            }
            HIDWORD(v88) = -2;
            uint64_t v46 = v34 + 1;
            int64_t v47 = v37;
            if (v37 >= 1)
            {
              uint64_t v48 = 0;
              do
              {
                if (v45 == 1)
                {
                  int v49 = 0;
                }
                else
                {
                  uint64_t v50 = *(int *)(*((void *)v97 + v48) + 4);
                  if (byte_25513EB2A[v50] == 201
                    || (uint64_t v51 = (v45 + byte_25513EB2A[v50]), (v51 & 0x80000000) != 0)
                    || (int)v51 > 68
                    || v45 != byte_25513EBCC[v51])
                  {
                    int v49 = -byte_25513EB7B[v50];
                  }
                  else
                  {
                    int v49 = byte_25513EC66[v51];
                  }
                }
                uint64_t v52 = v93;
                v93 += 72;
                --v94;
                *uint64_t v52 = 1;
                *((_DWORD *)v52 + 1) = v49;
                *((void *)v52 + 2) = v46;
                v52[1] = 1;
                *((void *)v52 + 1) = *((void *)v97 + v48);
                *((void *)v52 + 3) = *(void *)v89;
                long long v53 = v90;
                *((_OWORD *)v52 + 2) = *(_OWORD *)&v89[8];
                *((_OWORD *)v52 + 3) = v53;
                *((void *)v97 + v48) = v52;
                if (v94 <= 1) {
                  sub_25510B39C((uint64_t)v85);
                }
                ++v48;
              }
              while (v48 < (uint64_t)__len);
              int64_t v47 = __len;
            }
            int64_t v33 = v47;
            uint64_t v31 = v46;
            if (v47 == 1)
            {
              sub_25510AE8C((uint64_t)v85, a1, a3);
              sub_25510AEFC((uint64_t)v85);
              uint64_t v12 = v46;
              goto LABEL_32;
            }
          }
          memset(__b, HIDWORD(v88) != -2, v33);
          uint64_t v35 = 0;
          while (1)
          {
            int v36 = sub_25510AA84((uint64_t)v85, v35, a1, a2, a3);
            if (v36) {
              break;
            }
            ++v35;
            uint64_t v37 = __len;
            if (v35 >= (uint64_t)__len)
            {
              if ((uint64_t)__len >= 1)
              {
                int64_t v38 = 0;
                uint64_t v39 = __len;
                uint64_t v40 = 0;
                int64_t v41 = __len;
                do
                {
                  uint64_t v43 = v40;
                  int64_t v42 = v38;
                  uint64_t v44 = *((void *)v97 + v40);
                  if (v44)
                  {
                    *((void *)v97 + v38) = v44;
                    *((unsigned char *)__b + v38) = *((unsigned char *)__b + v43);
                    int64_t v42 = v38 + 1;
                  }
                  else
                  {
                    *(void *)&long long __len = --v41;
                    uint64_t v39 = v41;
                  }
                  uint64_t v40 = v43 + 1;
                  uint64_t v37 = v39;
                  int64_t v38 = v42;
                  int64_t v33 = v41;
                }
                while (v42 < v41);
                goto LABEL_71;
              }
              if ((void)__len) {
                goto LABEL_72;
              }
              goto LABEL_92;
            }
          }
          switch(v36)
          {
            case 1:
              goto LABEL_122;
            case 3:
              goto LABEL_96;
            case 4:
              goto LABEL_10;
          }
          goto LABEL_121;
        }
        if (v28)
        {
          sub_25510A60C((uint64_t)v85, 0, -v28, 1, a1, a3);
          goto LABEL_116;
        }
      }
      long long v86 = *(_OWORD *)&v89[8];
      long long v87 = v90;
      sub_25510A1D8((uint64_t)v85, a1);
      int v25 = 15;
      goto LABEL_57;
    }
    break;
  }
LABEL_122:
  uint64_t result = 0;
LABEL_11:
  uint64_t v14 = result;
  if (HIDWORD(v88) != -2)
  {
    if (HIDWORD(v88) > 0x109) {
      int v15 = 2;
    }
    else {
      int v15 = byte_25513EA20[HIDWORD(v88)];
    }
    sub_25510B0F4(v15, (void **)v89);
  }
  size_t v16 = v92;
  if (v92)
  {
    if (v97 && (uint64_t)__len >= 1)
    {
      size_t v17 = (uint64_t *)v97;
      uint64_t v18 = __len;
      while (1)
      {
        uint64_t v19 = *v17;
        if (*v17) {
          break;
        }
        ++v17;
        if (!--v18) {
          goto LABEL_29;
        }
      }
      do
      {
        long long v21 = *(_OWORD *)(v19 + 48);
        long long v86 = *(_OWORD *)(v19 + 32);
        long long v87 = v21;
        uint64_t v20 = *(void *)(v19 + 8);
        if (v20)
        {
          sub_25510B2B0(v19);
          uint64_t v20 = *(void *)(v19 + 8);
        }
        uint64_t *v17 = v20;
        v93 -= 72;
        ++v94;
        uint64_t v19 = *v17;
      }
      while (*v17);
      size_t v16 = v92;
    }
LABEL_29:
    free(v16);
    free(v97);
    free(__b);
  }
  return v14;
}

void sub_25510A118(_Unwind_Exception *a1)
{
}

void sub_25510A1D8(uint64_t a1, uint64_t a2)
{
  uint64_t v46 = *MEMORY[0x263EF8340];
  if (!*(_DWORD *)a1)
  {
    uint64_t v4 = *(unsigned int *)(a1 + 228);
    if (v4 == -2)
    {
      int v5 = 0;
      uint64_t v6 = "syntax error";
    }
    else
    {
      if (v4 > 0x109) {
        int v7 = 2;
      }
      else {
        int v7 = byte_25513EA20[v4];
      }
      int v44 = v7;
      int v8 = byte_25513EB2A[*(int *)(**(void **)(a1 + 504) + 4)];
      if (v8 != -55)
      {
        LODWORD(v9) = -v8 & (v8 >> 31);
        int v10 = 69 - v8 >= 15 ? 15 : 69 - v8;
        if ((int)v9 < v10)
        {
          int v11 = 0;
          uint64_t v9 = (int)v9;
          uint64_t v12 = (char *)&unk_25513EBCC + byte_25513EB2A[*(int *)(**(void **)(a1 + 504) + 4)];
          uint64_t v6 = "syntax error, unexpected %s";
          do
          {
            if (v9 != 1)
            {
              int v13 = v12[v9];
              if (v9 == v13)
              {
                if (v11 == 4) {
                  goto LABEL_23;
                }
                v45[v11++] = v13;
              }
            }
            ++v9;
          }
          while (v10 != v9);
          if (v11)
          {
            if (v11 != -2)
            {
              int v5 = v11 + 1;
              uint64_t v6 = "syntax error";
              switch(v11)
              {
                case -3:
                  goto LABEL_76;
                case 1:
                  uint64_t v6 = "syntax error, unexpected %s, expecting %s";
                  int v5 = 2;
                  goto LABEL_24;
                case 2:
                  uint64_t v6 = "syntax error, unexpected %s, expecting %s or %s";
                  int v5 = 3;
                  goto LABEL_24;
                case 3:
                  uint64_t v6 = "syntax error, unexpected %s, expecting %s or %s or %s";
                  int v5 = 4;
                  goto LABEL_24;
                case 4:
                  uint64_t v6 = "syntax error, unexpected %s, expecting %s or %s or %s or %s";
                  int v5 = 5;
                  goto LABEL_24;
                default:
                  goto LABEL_24;
              }
            }
            goto LABEL_76;
          }
        }
      }
      v45[0] = -2;
      uint64_t v6 = "syntax error, unexpected %s";
LABEL_23:
      int v5 = 1;
    }
LABEL_24:
    size_t v14 = strlen(v6) - 2 * v5 + 1;
    if (v5 < 1) {
      goto LABEL_79;
    }
    uint64_t v15 = 0;
    char v16 = 0;
    do
    {
      if (*off_2653BFFF0[v45[v15 - 1]] == 34)
      {
        int64_t v17 = 0;
        uint64_t v19 = off_2653BFFF0[v45[v15 - 1]];
        for (uint64_t i = v19; ; v19 = i)
        {
          int v22 = *++i;
          int v21 = v22;
          if (v22 <= 91)
          {
            if (v21 == 34) {
              goto LABEL_27;
            }
            if (v21 == 39 || v21 == 44) {
              break;
            }
          }
          else if (v21 == 92)
          {
            int v24 = v19[2];
            int v23 = v19 + 2;
            if (v24 != 92) {
              break;
            }
            uint64_t i = v23;
          }
          ++v17;
        }
      }
      int64_t v17 = strlen(off_2653BFFF0[v45[v15 - 1]]);
LABEL_27:
      v16 |= (uint64_t)(v14 ^ 0x7FFFFFFFFFFFFFFFLL) < v17;
      if ((uint64_t)(v14 ^ 0x7FFFFFFFFFFFFFFFLL) >= v17) {
        int64_t v18 = v17;
      }
      else {
        int64_t v18 = 0;
      }
      v14 += v18;
      ++v15;
    }
    while (v15 != v5);
    if ((v16 & 1) == 0)
    {
LABEL_79:
      int v25 = (char *)malloc_type_malloc(v14, 0xF2FAB3D5uLL);
      if (v25)
      {
        int v26 = v25;
        int v27 = 0;
        int v28 = v25;
        while (1)
        {
          int v31 = *(unsigned __int8 *)v6;
          *int v28 = v31;
          if (v31 != 37) {
            break;
          }
          if (v6[1] != 115 || v27 >= v5) {
            goto LABEL_47;
          }
          int v33 = v27 + 1;
          uint64_t v34 = off_2653BFFF0[v45[v27 - 1]];
          if (*v34 == 34)
          {
            uint64_t v29 = 0;
            uint64_t v35 = v34;
            for (j = v34; ; uint64_t v35 = j)
            {
              int v38 = *++j;
              int v37 = v38;
              char v39 = v38;
              if (v38 <= 91)
              {
                if (v37 == 34)
                {
                  v28[v29] = 0;
                  goto LABEL_68;
                }
                if (v37 == 39 || v37 == 44) {
                  break;
                }
              }
              else if (v37 == 92)
              {
                int v41 = v35[2];
                uint64_t v40 = v35 + 2;
                if (v41 != 92) {
                  break;
                }
                char v39 = 92;
                j = v40;
              }
              v28[v29++] = v39;
            }
          }
          uint64_t v42 = 0;
          do
          {
            int v43 = v34[v42];
            v28[v42++] = v43;
          }
          while (v43);
          uint64_t v29 = v42 - 1;
LABEL_68:
          uint64_t v30 = 2;
          int v27 = v33;
LABEL_48:
          v28 += v29;
          v6 += v30;
        }
        if (!v31)
        {
          sub_25510AFDC(a1 + 240, a2, v25);
          free(v26);
          ++*(_DWORD *)(a1 + 224);
          return;
        }
LABEL_47:
        uint64_t v29 = 1;
        uint64_t v30 = 1;
        goto LABEL_48;
      }
    }
    sub_25510AFDC(a1 + 240, a2, "syntax error");
LABEL_76:
    sub_25510B5E0(a1);
  }
}

uint64_t sub_25510A60C(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5, char ***a6)
{
  uint64_t v57 = *MEMORY[0x263EF8340];
  int v8 = *(void **)(a1 + 504);
  uint64_t v9 = (_OWORD *)v8[a2];
  uint64_t v10 = *((void *)v9 + 2);
  unint64_t v11 = *(void *)(a1 + 488);
  if (a4)
  {
    uint64_t v12 = a3;
    int v13 = byte_25513ECF4[a3];
    if (v11)
    {
      int v56 = v9;
      if ((0x412100091221uLL >> a3))
      {
        long long v14 = v9[3];
        v55[2] = v9[2];
        v55[3] = v14;
      }
      if ((0xBEDEFFF6EDDEuLL >> a3))
      {
        if (v13 <= 1) {
          int v15 = 1;
        }
        else {
          int v15 = v13;
        }
        do
        {
          uint64_t v9 = (_OWORD *)*((void *)v9 + 1);
          --v15;
        }
        while (v15);
      }
      if (v11 > (unint64_t)v9) {
        *(void *)(a1 + 488) = v9;
      }
      v8[a2] = v9;
      uint64_t v9 = v55;
      goto LABEL_49;
    }
  }
  else
  {
    if (v11)
    {
      unint64_t v16 = v8[a2];
      if ((0xBEDEFFF6EDDEuLL >> a3))
      {
        int v17 = byte_25513ECF4[a3] + 1;
        unint64_t v16 = v8[a2];
        do
        {
          unint64_t v16 = *(void *)(v16 + 8);
          --v17;
        }
        while (v17 > 1);
      }
      if (v11 > v16)
      {
        *(void *)(a1 + 488) = v16;
        unint64_t v11 = v16;
      }
      int v18 = *(_DWORD *)(v16 + 4);
      uint64_t v19 = byte_25513ECC4[a3] - 15;
      uint64_t v20 = (v18 + byte_25513EC4D[v19]);
      if (v20 <= 0x44 && v18 == byte_25513EBCC[v20]) {
        int v21 = (char *)&unk_25513EC66 + v20;
      }
      else {
        int v21 = (char *)&unk_25513ECAB + v19;
      }
      int v22 = *v21;
      uint64_t v23 = *(void *)(a1 + 520);
      if (v23 >= 1)
      {
        for (uint64_t i = 0; i != v23; ++i)
        {
          if (i != a2)
          {
            uint64_t v25 = v8[i];
            BOOL v26 = !v25 || v25 == v16;
            if (!v26 && v25 != v11)
            {
              while (*(void *)(v25 + 16) >= v10)
              {
                uint64_t v28 = *(void *)(v25 + 8);
                if (*(_DWORD *)(v25 + 4) == v22 && v28 == v16)
                {
                  uint64_t v48 = *(void *)(a1 + 472);
                  uint64_t v49 = *(void *)(a1 + 480) - 1;
                  *(void *)(a1 + 472) = v48 + 72;
                  *(void *)(a1 + 480) = v49;
                  *(unsigned char *)uint64_t v48 = 0;
                  *(void *)(v48 + 8) = v9;
                  *(_DWORD *)(v48 + 4) = a3;
                  if (*(unsigned char *)(*(void *)(a1 + 512) + a2))
                  {
                    *(_DWORD *)(v48 + 16) = *(_DWORD *)(a1 + 228);
                    *(void *)(v48 + 24) = *(void *)(a1 + 232);
                    long long v50 = *(_OWORD *)(a1 + 256);
                    *(_OWORD *)(v48 + 32) = *(_OWORD *)(a1 + 240);
                    *(_OWORD *)(v48 + 48) = v50;
                  }
                  else
                  {
                    *(_DWORD *)(v48 + 16) = -2;
                  }
                  *(void *)(v48 + 64) = *(void *)(v25 + 24);
                  *(void *)(v25 + 24) = v48;
                  if (*(uint64_t *)(a1 + 480) <= 1) {
                    sub_25510B39C(a1);
                  }
                  uint64_t v51 = *(void *)(a1 + 504);
                  uint64_t v52 = *(void *)(v51 + 8 * a2);
                  if (v52) {
                    *(void *)(a1 + 496) = v52;
                  }
                  uint64_t result = 0;
                  *(void *)(v51 + 8 * a2) = 0;
                  return result;
                }
                BOOL v30 = v28 == v16 || v28 == v11;
                uint64_t v25 = *(void *)(v25 + 8);
                if (v30) {
                  break;
                }
              }
            }
          }
        }
      }
      uint64_t v31 = a2;
      v8[v31] = v16;
      uint64_t v32 = *(void *)(a1 + 472);
      uint64_t v33 = *(void *)(a1 + 480) - 1;
      *(void *)(a1 + 472) = v32 + 72;
      *(void *)(a1 + 480) = v33;
      *(unsigned char *)uint64_t v32 = 1;
      *(_DWORD *)(v32 + 4) = v22;
      *(void *)(v32 + 16) = v10;
      *(unsigned char *)(v32 + 1) = 0;
      *(void *)(v32 + 8) = *(void *)(*(void *)(a1 + 504) + 8 * a2);
      *(void *)(v32 + 24) = 0;
      *(void *)(*(void *)(a1 + 504) + v31 * 8) = v32;
      uint64_t v34 = *(void *)(a1 + 472);
      uint64_t v35 = *(void *)(a1 + 480) - 1;
      *(void *)(a1 + 472) = v34 + 72;
      *(void *)(a1 + 480) = v35;
      *(unsigned char *)uint64_t v34 = 0;
      *(void *)(v34 + 8) = v9;
      *(_DWORD *)(v34 + 4) = a3;
      if (*(unsigned char *)(*(void *)(a1 + 512) + a2))
      {
        *(_DWORD *)(v34 + 16) = *(_DWORD *)(a1 + 228);
        *(void *)(v34 + 24) = *(void *)(a1 + 232);
        long long v36 = *(_OWORD *)(a1 + 256);
        *(_OWORD *)(v34 + 32) = *(_OWORD *)(a1 + 240);
        *(_OWORD *)(v34 + 48) = v36;
      }
      else
      {
        *(_DWORD *)(v34 + 16) = -2;
      }
      *(void *)(v34 + 64) = *(void *)(v32 + 24);
      *(void *)(v32 + 24) = v34;
      goto LABEL_59;
    }
    uint64_t v12 = a3;
    int v13 = byte_25513ECF4[a3];
  }
  uint64_t v37 = *(void *)(a1 + 480);
  uint64_t v38 = *(void *)(a1 + 472) + 72 * -(char)v13;
  *(void *)(a1 + 472) = v38;
  *(void *)(a1 + 480) = v37 + (char)v13;
  void *v8 = v38 - 72;
LABEL_49:
  uint64_t result = sub_25510B5F8(a3, v13, (uint64_t)v9, a1, &v54, v53, a5, a6);
  if (result) {
    return result;
  }
  int v40 = *(_DWORD *)(*(void *)(*(void *)(a1 + 504) + 8 * a2) + 4);
  uint64_t v41 = byte_25513ECC4[v12] - 15;
  uint64_t v42 = (v40 + byte_25513EC4D[v41]);
  if (v42 <= 0x44 && v40 == byte_25513EBCC[v42]) {
    int v43 = (char *)&unk_25513EC66 + v42;
  }
  else {
    int v43 = (char *)&unk_25513ECAB + v41;
  }
  int v44 = *v43;
  uint64_t v45 = *(void *)(a1 + 472);
  uint64_t v46 = *(void *)(a1 + 480) - 1;
  *(void *)(a1 + 472) = v45 + 72;
  *(void *)(a1 + 480) = v46;
  *(unsigned char *)uint64_t v45 = 1;
  *(_DWORD *)(v45 + 4) = v44;
  *(void *)(v45 + 16) = v10;
  *(unsigned char *)(v45 + 1) = 1;
  *(void *)(v45 + 8) = *(void *)(*(void *)(a1 + 504) + 8 * a2);
  *(void *)(v45 + 24) = v54;
  long long v47 = v53[1];
  *(_OWORD *)(v45 + 32) = v53[0];
  *(_OWORD *)(v45 + 48) = v47;
  *(void *)(*(void *)(a1 + 504) + 8 * a2) = v45;
LABEL_59:
  if (*(uint64_t *)(a1 + 480) <= 1) {
    sub_25510B39C(a1);
  }
  return 0;
}

uint64_t sub_25510AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char ***a5)
{
  uint64_t v34 = a1 + 232;
  uint64_t v35 = a1 + 240;
  while (1)
  {
    uint64_t v12 = *(void *)(a1 + 504);
    uint64_t v13 = *(void *)(v12 + 8 * a2);
    if (!v13) {
      return 0;
    }
    uint64_t v14 = *(int *)(v13 + 4);
    int v15 = byte_25513EB2A[v14];
    if (v15 != -55)
    {
      int v16 = *(_DWORD *)(a1 + 228);
      if (v16 == -2)
      {
        int v16 = sub_2550E938C(v34, v35, a4);
        *(_DWORD *)(a1 + 228) = v16;
      }
      if (v16 <= 0)
      {
        int v18 = 0;
        *(_DWORD *)(a1 + 228) = 0;
      }
      else if (v16 >= 0x10A)
      {
        int v18 = 2;
      }
      else
      {
        if (v16 == 256)
        {
          int v17 = 0;
          goto LABEL_30;
        }
        int v18 = byte_25513EA20[v16];
      }
      unsigned int v20 = v18 + v15;
      if ((v18 + v15) <= 0x44 && v18 == byte_25513EBCC[v20])
      {
        int v21 = &word_25513ED24[byte_25513ED2E[v20]];
        int v17 = byte_25513EC66[v20];
        goto LABEL_31;
      }
      int v17 = -byte_25513EB7B[v14];
LABEL_30:
      int v21 = word_25513ED24;
LABEL_31:
      *(unsigned char *)(*(void *)(a1 + 512) + a2) = 1;
      __int16 v22 = *v21;
      if (*v21)
      {
        uint64_t v23 = (unsigned __int16 *)(v21 + 1);
        do
        {
          if (!*(void *)(a1 + 488)) {
            *(void *)(a1 + 488) = *(void *)(*(void *)(a1 + 504) + 8 * a2);
          }
          uint64_t v25 = *(void *)(a1 + 528);
          uint64_t v26 = *(void *)(a1 + 520);
          if (v25 <= v26)
          {
            if (v25 >= 0x800000000000000
              || (*(void *)(a1 + 528) = 2 * v25,
                  (int v27 = malloc_type_realloc(*(void **)(a1 + 504), 16 * v25, 0x2004093837F09uLL)) == 0)
              || (*(void *)(a1 + 504) = v27,
                  (uint64_t v28 = malloc_type_realloc(*(void **)(a1 + 512), *(void *)(a1 + 528), 0x100004077774924uLL)) == 0))
            {
              sub_25510B5E0(a1);
            }
            *(void *)(a1 + 512) = v28;
            uint64_t v26 = *(void *)(a1 + 520);
          }
          *(void *)(*(void *)(a1 + 504) + 8 * v26) = *(void *)(*(void *)(a1 + 504) + 8 * a2);
          *(unsigned char *)(*(void *)(a1 + 512) + v26) = *(unsigned char *)(*(void *)(a1 + 512) + a2);
          *(void *)(a1 + 520) = v26 + 1;
          LODWORD(result) = sub_25510A60C(a1, v26, v22, 0, a3, a5);
          if (result == 3)
          {
            uint64_t v29 = *(void *)(a1 + 504);
            uint64_t v30 = *(void *)(v29 + 8 * v26);
            if (v30) {
              *(void *)(a1 + 496) = v30;
            }
            *(void *)(v29 + 8 * v26) = 0;
          }
          else
          {
            if (result) {
              goto LABEL_48;
            }
            LODWORD(result) = sub_25510AA84(a1, v26, a3, a4, a5);
            if (result) {
              goto LABEL_48;
            }
          }
          int v24 = *v23++;
          __int16 v22 = v24;
        }
        while (v24);
      }
      if (v17 <= 0)
      {
        if (v17)
        {
          LODWORD(result) = sub_25510A60C(a1, a2, -v17, 0, a3, a5);
          if (!result) {
            goto LABEL_5;
          }
          if (result != 3)
          {
LABEL_48:
            int v10 = 1;
            unsigned int v33 = result;
            goto LABEL_4;
          }
        }
        uint64_t v19 = (void *)(*(void *)(a1 + 504) + 8 * a2);
        if (*v19) {
          *(void *)(a1 + 496) = *v19;
        }
        *uint64_t v19 = 0;
      }
      int v10 = 3;
LABEL_4:
      LODWORD(result) = v10;
      goto LABEL_5;
    }
    if (!byte_25513EB7B[v14])
    {
      uint64_t result = 0;
      *(void *)(a1 + 496) = v13;
      goto LABEL_56;
    }
    uint64_t result = sub_25510A60C(a1, a2, byte_25513EB7B[v14], 0, a3, a5);
    if (result) {
      break;
    }
LABEL_5:
    if (result)
    {
      BOOL v31 = result == 1;
      uint64_t result = v33;
      if (v31) {
        return result;
      }
      return 0;
    }
  }
  if (result != 3) {
    return result;
  }
  uint64_t v12 = *(void *)(a1 + 504);
  uint64_t v32 = *(void *)(v12 + 8 * a2);
  if (v32) {
    *(void *)(a1 + 496) = v32;
  }
  uint64_t result = 0;
LABEL_56:
  *(void *)(v12 + 8 * a2) = 0;
  return result;
}

void sub_25510AE44()
{
}

void sub_25510AE58(uint64_t a1, uint64_t a2, uint64_t a3, char *__s)
{
  if (__s) {
    sub_25510AFDC(a2, a3, __s);
  }
  longjmp((int *)(a1 + 272), 1);
}

uint64_t sub_25510AE8C(uint64_t a1, uint64_t a2, char ***a3)
{
  uint64_t v3 = *(void *)(a1 + 488);
  if (!v3) {
    return 0;
  }
  uint64_t v7 = **(void **)(a1 + 504);
  if (v7 == v3)
  {
    uint64_t result = sub_25510F24C(v7, 0, a1, a2, a3);
    if (result) {
      return result;
    }
    return 0;
  }
  int v8 = 0;
  uint64_t v9 = v7;
  do
  {
    ++v8;
    uint64_t v9 = *(void *)(v9 + 8);
  }
  while (v9 != v3);
  uint64_t result = sub_25510F24C(v7, v8, a1, a2, a3);
  if (!result) {
    return 0;
  }
  return result;
}

__n128 sub_25510AEFC(uint64_t a1)
{
  if (*(void *)(a1 + 520) == 1)
  {
    uint64_t v1 = *(void *)(a1 + 488);
    if (v1)
    {
      uint64_t v2 = **(void **)(a1 + 504);
      if (v2 == v1)
      {
        uint64_t v4 = 0;
      }
      else
      {
        uint64_t v3 = 0;
        do
        {
          uint64_t v4 = v2;
          uint64_t v2 = *(void *)(v2 + 8);
          *(void *)(v4 + 8) = v3;
          uint64_t v3 = v4;
        }
        while (v2 != v1);
      }
      uint64_t v5 = v1 + 72;
      uint64_t v6 = *(void *)(a1 + 480)
         - 0x71C71C71C71C71C7 * ((uint64_t)(*(void *)(a1 + 472) - *(void *)(a1 + 464)) >> 3)
         + 0x71C71C71C71C71C7 * ((v5 - *(void *)(a1 + 464)) >> 3);
      *(void *)(a1 + 472) = v5;
      *(void *)(a1 + 480) = v6;
      *(void *)(a1 + 488) = 0;
      for (*(void *)(a1 + 496) = 0; v4; *(void *)(a1 + 480) = v10 - 1)
      {
        __n128 result = *(__n128 *)v4;
        long long v8 = *(_OWORD *)(v4 + 16);
        long long v9 = *(_OWORD *)(v4 + 48);
        *(_OWORD *)(v5 + 32) = *(_OWORD *)(v4 + 32);
        *(_OWORD *)(v5 + 48) = v9;
        *(__n128 *)uint64_t v5 = result;
        *(_OWORD *)(v5 + 16) = v8;
        uint64_t v4 = *(void *)(v4 + 8);
        *(void *)(*(void *)(a1 + 472) + 8) = *(void *)(a1 + 472) - 72;
        uint64_t v10 = *(void *)(a1 + 480);
        **(void **)(a1 + 504) = *(void *)(a1 + 472);
        uint64_t v5 = *(void *)(a1 + 472) + 72;
        *(void *)(a1 + 472) = v5;
      }
    }
  }
  return result;
}

void sub_25510AFDC(uint64_t a1, uint64_t a2, char *__s)
{
  size_t v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  uint64_t v7 = (void *)v6;
  if (v6 >= 0x17)
  {
    uint64_t v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v9 = v6 | 7;
    }
    uint64_t v10 = v9 + 1;
    long long v8 = (void **)operator new(v9 + 1);
    __dst[1] = v7;
    unint64_t v12 = v10 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_8;
  }
  HIBYTE(v12) = v6;
  long long v8 = __dst;
  if (v6) {
LABEL_8:
  }
    memcpy(v8, __s, (size_t)v7);
  *((unsigned char *)v7 + (void)v8) = 0;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)a2 + 24))(a2, a1, __dst);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_25510B0D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25510B0F4(int a1, void **a2)
{
  switch(a1)
  {
    case 3:
    case 6:
      uint64_t v4 = *a2;
      free(v4);
      return;
    case 21:
    case 25:
    case 30:
      uint64_t v2 = (void **)*a2;
      if (!*a2) {
        return;
      }
      uint64_t v3 = *v2;
      if (*v2)
      {
        v2[1] = v3;
        operator delete(v3);
      }
      break;
    case 39:
      uint64_t v5 = (void **)*a2;
      if (!*a2) {
        return;
      }
      size_t v6 = (void **)*v5;
      if (*v5)
      {
        uint64_t v7 = (void **)v5[1];
        long long v8 = *v5;
        if (v7 != v6)
        {
          do
          {
            if (*((char *)v7 - 1) < 0) {
              operator delete(*(v7 - 3));
            }
            v7 -= 3;
          }
          while (v7 != v6);
          long long v8 = *v5;
        }
        v5[1] = v6;
        operator delete(v8);
      }
      break;
    default:
      return;
  }
  JUMPOUT(0x25A2886C0);
}

void sub_25510B2B0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1))
  {
    uint64_t v1 = (void **)(a1 + 24);
    int v2 = byte_25513ED73[*(int *)(a1 + 4)];
    sub_25510B0F4(v2, v1);
  }
  else
  {
    uint64_t v3 = *(void *)(a1 + 24);
    if (v3)
    {
      uint64_t v4 = *(int *)(v3 + 4);
      if ((0xBEDEFFF6EDDEuLL >> v4))
      {
        uint64_t v5 = (void *)(v3 + 8);
        int v6 = byte_25513ECF4[v4] + 1;
        do
        {
          uint64_t v7 = *v5;
          sub_25510B2B0(*v5);
          uint64_t v5 = (void *)(v7 + 8);
          --v6;
        }
        while (v6 > 1);
      }
    }
  }
}

void *sub_25510B358(void *result, uint64_t a2, uint64_t a3)
{
  *__n128 result = &unk_270444FC0;
  result[1] = a2;
  result[2] = a3;
  return result;
}

void sub_25510B380()
{
}

uint64_t sub_25510B394(uint64_t a1)
{
  return sub_255109320(a1, *(void *)(a1 + 8), *(char ****)(a1 + 16));
}

void sub_25510B39C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 472) - *(void *)(a1 + 464);
  if (v2 >= 719857
    || ((uint64_t v3 = v2 / 72, 2 * (v2 / 72) >= 10000) ? (v4 = 10000) : (v4 = 2 * (v2 / 72)),
        (uint64_t v5 = (char *)malloc_type_malloc(72 * v4, 0x10F2040C712DE25uLL)) == 0))
  {
    sub_25510B5E0(a1);
  }
  int v6 = v5;
  if (v2 >= 1)
  {
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(a1 + 464);
    uint64_t v9 = v3 + 1;
    do
    {
      uint64_t v10 = &v5[v7];
      uint64_t v11 = v8 + v7;
      *(_OWORD *)uint64_t v10 = *(_OWORD *)(v8 + v7);
      long long v12 = *(_OWORD *)(v8 + v7 + 16);
      long long v13 = *(_OWORD *)(v8 + v7 + 32);
      long long v14 = *(_OWORD *)(v8 + v7 + 48);
      *((void *)v10 + 8) = *(void *)(v8 + v7 + 64);
      *((_OWORD *)v10 + 2) = v13;
      *((_OWORD *)v10 + 3) = v14;
      *((_OWORD *)v10 + 1) = v12;
      if (*(unsigned char *)(v8 + v7))
      {
        uint64_t v15 = *(void *)(v11 + 8);
        if (v15)
        {
          uint64_t v16 = (unsigned __int128)((v8 + v7 - v15) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(void *)&v5[v7 + 8] = &v5[72 * (v16 >> 2) + 72 * ((unint64_t)v16 >> 63) + v7];
        }
        if (!*(unsigned char *)(v8 + v7 + 1))
        {
          uint64_t v17 = *(void *)(v8 + v7 + 24);
          if (v17)
          {
            uint64_t v18 = (unsigned __int128)((v8 + v7 - v17) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
            *(void *)&v5[v7 + 24] = &v5[72 * (v18 >> 2) + 72 * ((unint64_t)v18 >> 63) + v7];
          }
        }
      }
      else
      {
        uint64_t v19 = *(void *)(v11 + 8);
        if (v19)
        {
          uint64_t v20 = (unsigned __int128)((v8 + v7 - v19) * (__int128)(uint64_t)0xF1C71C71C71C71C7) >> 64;
          *(void *)&v5[v7 + 8] = &v5[72 * (v20 >> 2) + 72 * ((unint64_t)v20 >> 63) + v7];
        }
        uint64_t v21 = *(void *)(v8 + v7 + 64);
        if (v21) {
          *(void *)&v5[v7 + 64] = &v5[72 * ((v8 + v7 - v21) / -72) + v7];
        }
      }
      --v9;
      v7 += 72;
    }
    while (v9 > 1);
  }
  uint64_t v22 = *(void *)(a1 + 488);
  if (v22) {
    *(void *)(a1 + 488) = &v5[v22 - *(void *)(a1 + 464)];
  }
  uint64_t v23 = *(void *)(a1 + 520);
  if (v23 >= 1)
  {
    for (uint64_t i = 0; i != v23; ++i)
    {
      uint64_t v25 = *(void *)(a1 + 504);
      uint64_t v26 = *(void *)(v25 + 8 * i);
      if (v26) {
        *(void *)(v25 + 8 * i) = &v5[v26 - *(void *)(a1 + 464)];
      }
    }
  }
  free(*(void **)(a1 + 464));
  *(void *)(a1 + 464) = v6;
  *(void *)(a1 + 472) = &v6[72 * v3];
  *(void *)(a1 + 480) = v4 - v3;
}

void sub_25510B5E0(uint64_t a1)
{
}

uint64_t sub_25510B5F8(int a1, int a2, uint64_t a3, uint64_t a4, char ***a5, _OWORD *a6, uint64_t a7, char ***a8)
{
  uint64_t v588 = *MEMORY[0x263EF8340];
  uint64_t v12 = *(void *)(a4 + 488);
  int v585 = 1;
  if (a2)
  {
    int v13 = 1 - a2;
    if (a2 >= 1 && v12)
    {
      uint64_t v14 = *(void *)(a3 + 80);
      int v15 = 1 - a2;
      uint64_t v16 = (_OWORD *)(a3 + 32);
      uint64_t v17 = 1;
      do
      {
        *((unsigned char *)v16 - 31) = *(unsigned char *)(v14 + 1);
        if (*(unsigned char *)(v14 + 1)) {
          uint64_t v18 = *(void *)(v14 + 24);
        }
        else {
          uint64_t v18 = 0;
        }
        --v17;
        *((void *)v16 - 1) = v18;
        long long v19 = *(_OWORD *)(v14 + 48);
        *uint64_t v16 = *(_OWORD *)(v14 + 32);
        v16[1] = v19;
        uint64_t v14 = *(void *)(v14 + 8);
        *((void *)v16 - 3) = v14;
        uint64_t v16 = (_OWORD *)((char *)v16 - 72);
      }
      while (v17 > v13);
      int v585 = 1 - a2;
    }
    else
    {
      int v15 = 1 - a2;
      int v13 = 1;
    }
    *a5 = *(char ***)(a3 + 72 * v15 + 24);
    *a6 = *(_OWORD *)(a3 - 72 * a2 + 104);
    a6[1] = *(_OWORD *)(a3 + 48);
  }
  else
  {
    *a5 = 0;
    a6[1] = *(_OWORD *)(a3 + 48);
    *a6 = *(_OWORD *)(a3 + 48);
    int v13 = 1;
  }
  long long v20 = a6[1];
  *(_OWORD *)(a4 + 112) = *a6;
  *(_OWORD *)(a4 + 128) = v20;
  switch(a1)
  {
    case 2:
      uint64_t v21 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v22 = v21;
      if (v12 && v585 >= -2)
      {
        uint64_t v23 = a3 + 72 * v585;
        uint64_t v24 = *(void *)(v23 + 8);
        uint64_t v25 = v585 + 1;
        uint64_t v26 = v23 - 71;
        do
        {
          *(unsigned char *)uint64_t v26 = *(unsigned char *)(v24 + 1);
          if (*(unsigned char *)(v24 + 1)) {
            uint64_t v27 = *(void *)(v24 + 24);
          }
          else {
            uint64_t v27 = 0;
          }
          *(void *)(v26 + 23) = v27;
          long long v28 = *(_OWORD *)(v24 + 32);
          *(_OWORD *)(v26 + 47) = *(_OWORD *)(v24 + 48);
          *(_OWORD *)(v26 + 31) = v28;
          uint64_t v24 = *(void *)(v24 + 8);
          *(void *)(v26 + 7) = v24;
          --v25;
          v26 -= 72;
        }
        while (v25 > -2);
        int v585 = -3;
      }
      sub_255111174(v21, *(void *)(a3 - 192), *(void *)(a3 - 48), *(void *)(a3 + 24));
      uint64_t result = 0;
      *a5 = v22;
      *a8 = v22;
      return result;
    case 3:
      if (v12 && v13 >= -2)
      {
        uint64_t v127 = a3 + 72 * v13;
        uint64_t v128 = *(void *)(v127 + 8);
        uint64_t v129 = v13 + 1;
        uint64_t v130 = v127 - 71;
        do
        {
          *(unsigned char *)uint64_t v130 = *(unsigned char *)(v128 + 1);
          if (*(unsigned char *)(v128 + 1)) {
            uint64_t v131 = *(void *)(v128 + 24);
          }
          else {
            uint64_t v131 = 0;
          }
          *(void *)(v130 + 23) = v131;
          long long v132 = *(_OWORD *)(v128 + 32);
          *(_OWORD *)(v130 + 47) = *(_OWORD *)(v128 + 48);
          *(_OWORD *)(v130 + 31) = v132;
          uint64_t v128 = *(void *)(v128 + 8);
          *(void *)(v130 + 7) = v128;
          --v129;
          v130 -= 72;
        }
        while (v129 > -2);
        int v585 = -3;
      }
      v314 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v314;
      if (v12 && v585 >= -1)
      {
        uint64_t v315 = a3 + 72 * v585;
        uint64_t v316 = *(void *)(v315 + 8);
        uint64_t v317 = v585 + 1;
        uint64_t v318 = v315 - 71;
        do
        {
          *(unsigned char *)uint64_t v318 = *(unsigned char *)(v316 + 1);
          if (*(unsigned char *)(v316 + 1)) {
            uint64_t v319 = *(void *)(v316 + 24);
          }
          else {
            uint64_t v319 = 0;
          }
          *(void *)(v318 + 23) = v319;
          long long v320 = *(_OWORD *)(v316 + 32);
          *(_OWORD *)(v318 + 47) = *(_OWORD *)(v316 + 48);
          *(_OWORD *)(v318 + 31) = v320;
          uint64_t v316 = *(void *)(v316 + 8);
          *(void *)(v318 + 7) = v316;
          --v317;
          v318 -= 72;
        }
        while ((v317 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      sub_25510FD14(v314, *(void *)(a3 - 120), *(void *)(a3 - 48), *(void *)(a3 + 24));
      goto LABEL_541;
    case 4:
      if (v12 && v13 >= -1)
      {
        uint64_t v114 = a3 + 72 * v13;
        uint64_t v115 = *(void *)(v114 + 8);
        uint64_t v116 = v13 + 1;
        uint64_t v117 = v114 - 71;
        do
        {
          *(unsigned char *)uint64_t v117 = *(unsigned char *)(v115 + 1);
          if (*(unsigned char *)(v115 + 1)) {
            uint64_t v118 = *(void *)(v115 + 24);
          }
          else {
            uint64_t v118 = 0;
          }
          *(void *)(v117 + 23) = v118;
          long long v119 = *(_OWORD *)(v115 + 32);
          *(_OWORD *)(v117 + 47) = *(_OWORD *)(v115 + 48);
          *(_OWORD *)(v117 + 31) = v119;
          uint64_t v115 = *(void *)(v115 + 8);
          *(void *)(v117 + 7) = v115;
          --v116;
          v117 -= 72;
        }
        while ((v116 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      if (*(void *)(a3 + 24) != 9)
      {
        sub_25510E66C(a3, &v585, 0, v12 == 0);
        snprintf(__str, 0x60uLL, "invalid version '%d'", *(void *)(a3 + 24));
        sub_25510E66C(a3, &v585, 0, v12 == 0);
        sub_25510AFDC(a3 + 32, a7, __str);
      }
      if (v12 && v585 >= 1)
      {
        uint64_t v297 = a3 + 72 * v585;
        uint64_t v298 = *(void *)(v297 + 8);
        unint64_t v299 = v585 + 1;
        uint64_t v300 = v297 - 71;
        do
        {
          *(unsigned char *)uint64_t v300 = *(unsigned char *)(v298 + 1);
          if (*(unsigned char *)(v298 + 1)) {
            uint64_t v301 = *(void *)(v298 + 24);
          }
          else {
            uint64_t v301 = 0;
          }
          *(void *)(v300 + 23) = v301;
          long long v302 = *(_OWORD *)(v298 + 32);
          *(_OWORD *)(v300 + 47) = *(_OWORD *)(v298 + 48);
          *(_OWORD *)(v300 + 31) = v302;
          uint64_t v298 = *(void *)(v298 + 8);
          *(void *)(v300 + 7) = v298;
          --v299;
          v300 -= 72;
        }
        while (v299 > 1);
      }
      uint64_t result = 0;
      *a5 = *(char ***)(a3 + 24);
      return result;
    case 5:
      operator new();
    case 6:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v83 = 72 * v13;
        uint64_t v84 = *(void *)(a3 + v83 + 8);
        do
        {
          uint64_t v87 = a3 + v83;
          *(unsigned char *)(a3 + v83 - 71) = *(unsigned char *)(v84 + 1);
          if (*(unsigned char *)(v84 + 1)) {
            uint64_t v85 = *(void *)(v84 + 24);
          }
          else {
            uint64_t v85 = 0;
          }
          *(void *)(v87 - 48) = v85;
          long long v86 = *(_OWORD *)(v84 + 32);
          *(_OWORD *)(v87 - 24) = *(_OWORD *)(v84 + 48);
          *(_OWORD *)(v87 - 40) = v86;
          uint64_t v84 = *(void *)(v84 + 8);
          *(void *)(v87 - 64) = v84;
          v83 -= 72;
        }
        while (v83 != -72);
        int v585 = -1;
      }
      v266 = *a5;
      v268 = (*a5)[1];
      unint64_t v275 = (unint64_t)(*a5)[2];
      if ((unint64_t)v268 < v275) {
        goto LABEL_389;
      }
      v276 = *v266;
      uint64_t v277 = v268 - *v266;
      unint64_t v278 = (v277 >> 3) + 1;
      if (v278 >> 61) {
        goto LABEL_714;
      }
      uint64_t v279 = v275 - (void)v276;
      if (v279 >> 2 > v278) {
        unint64_t v278 = v279 >> 2;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v280 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (!v280)
      {
        v281 = 0;
        goto LABEL_590;
      }
      if (!(v280 >> 61))
      {
        v281 = operator new(8 * v280);
LABEL_590:
        v454 = &v281[8 * (v277 >> 3)];
        v455 = &v281[8 * v280];
        *(void *)v454 = *(void *)(a3 + 24);
        v340 = v454 + 8;
        if (v268 == v276) {
          goto LABEL_669;
        }
        unint64_t v465 = v268 - v276 - 8;
        if (v465 < 0x58) {
          goto LABEL_727;
        }
        if ((unint64_t)(v268 - v281 - v277) < 0x20) {
          goto LABEL_727;
        }
        uint64_t v466 = (v465 >> 3) + 1;
        uint64_t v467 = 8 * (v466 & 0x3FFFFFFFFFFFFFFCLL);
        v468 = &v268[-v467];
        v454 -= v467;
        v469 = &v281[v277 - 16];
        v470 = v268 - 16;
        uint64_t v471 = v466 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v472 = *(_OWORD *)v470;
          *(v469 - 1) = *((_OWORD *)v470 - 1);
          _OWORD *v469 = v472;
          v469 -= 2;
          v470 -= 32;
          v471 -= 4;
        }
        while (v471);
        v268 = v468;
        if (v466 != (v466 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_727:
          do
          {
            uint64_t v473 = *((void *)v268 - 1);
            v268 -= 8;
            *((void *)v454 - 1) = v473;
            v454 -= 8;
          }
          while (v268 != v276);
        }
        goto LABEL_668;
      }
      goto LABEL_713;
    case 7:
      unint64_t v88 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v88;
      if (v12 && v585 >= -1)
      {
        uint64_t v153 = a3 + 72 * v585;
        uint64_t v154 = *(void *)(v153 + 8);
        uint64_t v155 = v585 + 1;
        uint64_t v156 = v153 - 71;
        do
        {
          *(unsigned char *)uint64_t v156 = *(unsigned char *)(v154 + 1);
          if (*(unsigned char *)(v154 + 1)) {
            uint64_t v157 = *(void *)(v154 + 24);
          }
          else {
            uint64_t v157 = 0;
          }
          *(void *)(v156 + 23) = v157;
          long long v158 = *(_OWORD *)(v154 + 32);
          *(_OWORD *)(v156 + 47) = *(_OWORD *)(v154 + 48);
          *(_OWORD *)(v156 + 31) = v158;
          uint64_t v154 = *(void *)(v154 + 8);
          *(void *)(v156 + 7) = v154;
          --v155;
          v156 -= 72;
        }
        while ((v155 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_534;
    case 8:
      uint64_t v29 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v29;
      if (v12 && v585 >= -1)
      {
        uint64_t v171 = a3 + 72 * v585;
        uint64_t v172 = *(void *)(v171 + 8);
        uint64_t v173 = v585 + 1;
        uint64_t v174 = v171 - 71;
        do
        {
          *(unsigned char *)uint64_t v174 = *(unsigned char *)(v172 + 1);
          if (*(unsigned char *)(v172 + 1)) {
            uint64_t v175 = *(void *)(v172 + 24);
          }
          else {
            uint64_t v175 = 0;
          }
          *(void *)(v174 + 23) = v175;
          long long v176 = *(_OWORD *)(v172 + 32);
          *(_OWORD *)(v174 + 47) = *(_OWORD *)(v172 + 48);
          *(_OWORD *)(v174 + 31) = v176;
          uint64_t v172 = *(void *)(v172 + 8);
          *(void *)(v174 + 7) = v172;
          --v173;
          v174 -= 72;
        }
        while ((v173 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_530;
    case 9:
      operator new();
    case 10:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v182 = 72 * v13;
        uint64_t v183 = *(void *)(a3 + v182 + 8);
        do
        {
          uint64_t v186 = a3 + v182;
          *(unsigned char *)(a3 + v182 - 71) = *(unsigned char *)(v183 + 1);
          if (*(unsigned char *)(v183 + 1)) {
            uint64_t v184 = *(void *)(v183 + 24);
          }
          else {
            uint64_t v184 = 0;
          }
          *(void *)(v186 - 48) = v184;
          long long v185 = *(_OWORD *)(v183 + 32);
          *(_OWORD *)(v186 - 24) = *(_OWORD *)(v183 + 48);
          *(_OWORD *)(v186 - 40) = v185;
          uint64_t v183 = *(void *)(v183 + 8);
          *(void *)(v186 - 64) = v183;
          v182 -= 72;
        }
        while (v182 != -72);
        int v585 = -1;
      }
      v266 = *a5;
      v268 = (*a5)[1];
      unint64_t v339 = (unint64_t)(*a5)[2];
      if ((unint64_t)v268 < v339) {
        goto LABEL_389;
      }
      v341 = *v266;
      uint64_t v342 = v268 - *v266;
      unint64_t v343 = (v342 >> 3) + 1;
      if (v343 >> 61) {
        goto LABEL_715;
      }
      uint64_t v344 = v339 - (void)v341;
      if (v344 >> 2 > v343) {
        unint64_t v343 = v344 >> 2;
      }
      if ((unint64_t)v344 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v345 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v345 = v343;
      }
      if (!v345)
      {
        v346 = 0;
        goto LABEL_661;
      }
      if (!(v345 >> 61))
      {
        v346 = operator new(8 * v345);
LABEL_661:
        v454 = &v346[8 * (v342 >> 3)];
        v455 = &v346[8 * v345];
        *(void *)v454 = *(void *)(a3 + 24);
        v340 = v454 + 8;
        if (v268 == v341) {
          goto LABEL_669;
        }
        unint64_t v528 = v268 - v341 - 8;
        if (v528 < 0x58) {
          goto LABEL_728;
        }
        if ((unint64_t)(v268 - v346 - v342) < 0x20) {
          goto LABEL_728;
        }
        uint64_t v529 = (v528 >> 3) + 1;
        uint64_t v530 = 8 * (v529 & 0x3FFFFFFFFFFFFFFCLL);
        v531 = &v268[-v530];
        v454 -= v530;
        v532 = &v346[v342 - 16];
        v533 = v268 - 16;
        uint64_t v534 = v529 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v535 = *(_OWORD *)v533;
          *(v532 - 1) = *((_OWORD *)v533 - 1);
          _OWORD *v532 = v535;
          v532 -= 2;
          v533 -= 32;
          v534 -= 4;
        }
        while (v534);
        v268 = v531;
        if (v529 != (v529 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_728:
          do
          {
            uint64_t v536 = *((void *)v268 - 1);
            v268 -= 8;
            *((void *)v454 - 1) = v536;
            v454 -= 8;
          }
          while (v268 != v341);
        }
LABEL_668:
        v268 = *v266;
LABEL_669:
        *v266 = v454;
        v266[1] = v340;
        v266[2] = v455;
        if (v268) {
          operator delete(v268);
        }
        goto LABEL_671;
      }
      goto LABEL_713;
    case 11:
      if (v12 && v13 >= -3)
      {
        uint64_t v101 = a3 + 72 * v13;
        uint64_t v102 = *(void *)(v101 + 8);
        uint64_t v103 = v13 + 1;
        uint64_t v104 = v101 - 71;
        do
        {
          *(unsigned char *)uint64_t v104 = *(unsigned char *)(v102 + 1);
          if (*(unsigned char *)(v102 + 1)) {
            uint64_t v105 = *(void *)(v102 + 24);
          }
          else {
            uint64_t v105 = 0;
          }
          *(void *)(v104 + 23) = v105;
          long long v106 = *(_OWORD *)(v102 + 32);
          *(_OWORD *)(v104 + 47) = *(_OWORD *)(v102 + 48);
          *(_OWORD *)(v104 + 31) = v106;
          uint64_t v102 = *(void *)(v102 + 8);
          *(void *)(v104 + 7) = v102;
          --v103;
          v104 -= 72;
        }
        while (v103 > -3);
        int v585 = -4;
      }
      v282 = (const char **)(a3 - 264);
      v283 = *(const char **)(a3 - 264);
      size_t v284 = strlen(v283);
      if (v284 > 0x7FFFFFFFFFFFFFF7) {
        sub_2550EAC50();
      }
      size_t v285 = v284;
      if (v284 >= 0x17)
      {
        uint64_t v376 = (v284 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v284 | 7) != 0x17) {
          uint64_t v376 = v284 | 7;
        }
        uint64_t v377 = v376 + 1;
        v286 = operator new(v376 + 1);
        *(void *)&__str[8] = v285;
        int64_t v587 = v377 | 0x8000000000000000;
        *(void *)__str = v286;
      }
      else
      {
        HIBYTE(v587) = v284;
        v286 = __str;
        if (!v284) {
          goto LABEL_437;
        }
      }
      memmove(v286, v283, v285);
LABEL_437:
      BOOL v378 = 0;
      *((unsigned char *)v286 + v285) = 0;
      char v584 = 6;
      strcpy((char *)&__s2, "region");
      if (v587 >= 0) {
        uint64_t v379 = HIBYTE(v587);
      }
      else {
        uint64_t v379 = *(void *)&__str[8];
      }
      if (v379 != 6) {
        goto LABEL_449;
      }
      if (v587 < 0)
      {
        v567 = *(void **)__str;
        int v568 = memcmp(*(const void **)__str, &__s2, *(size_t *)&__str[8]);
        operator delete(v567);
        if (!v568) {
          goto LABEL_452;
        }
LABEL_709:
        sub_2551080CC((uint64_t)__str);
        v569 = sub_2551084AC(__str, (uint64_t)"Expecting 'region', not '", 25);
        sub_25510E66C(a3, &v585, 4294967292, v12 == 0);
        size_t v570 = strlen(*v282);
        v571 = sub_2551084AC(v569, (uint64_t)*v282, v570);
        sub_2551084AC(v571, (uint64_t)"'.", 2);
        v403 = (char **)sub_25513B0B8(0x48uLL);
        sub_25510E6E4(__str, &__s2);
        sub_25510E7C0((uint64_t)v403, &__s2);
        goto LABEL_710;
      }
      if (HIBYTE(v587))
      {
        uint64_t v380 = HIBYTE(v587) - 1;
        v381 = __str;
        p_s2 = &__s2;
        do
        {
          int v384 = *v381++;
          int v383 = v384;
          int v386 = *(unsigned __int8 *)p_s2;
          p_s2 = (long long *)((char *)p_s2 + 1);
          int v385 = v386;
          BOOL v388 = v380-- != 0;
          BOOL v378 = v383 == v385;
        }
        while (v383 == v385 && v388);
LABEL_449:
        if (v587 < 0) {
          operator delete(*(void **)__str);
        }
        if (!v378) {
          goto LABEL_709;
        }
      }
LABEL_452:
      uint64_t v30 = (char **)sub_25513B0B8(0x60uLL);
      sub_25510E66C(a3, &v585, 4294967293, v12 == 0);
      v389 = *(char **)(a3 - 192);
      sub_25510E66C(a3, &v585, 0xFFFFFFFFLL, v12 == 0);
      sub_255110068((int)v30, v389);
LABEL_541:
      uint64_t result = 0;
LABEL_542:
      *a5 = v30;
      return result;
    case 12:
      operator new();
    case 13:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v78 = 72 * v13;
        uint64_t v79 = *(void *)(a3 + v78 + 8);
        do
        {
          uint64_t v82 = a3 + v78;
          *(unsigned char *)(a3 + v78 - 71) = *(unsigned char *)(v79 + 1);
          if (*(unsigned char *)(v79 + 1)) {
            uint64_t v80 = *(void *)(v79 + 24);
          }
          else {
            uint64_t v80 = 0;
          }
          *(void *)(v82 - 48) = v80;
          long long v81 = *(_OWORD *)(v79 + 32);
          *(_OWORD *)(v82 - 24) = *(_OWORD *)(v79 + 48);
          *(_OWORD *)(v82 - 40) = v81;
          uint64_t v79 = *(void *)(v79 + 8);
          *(void *)(v82 - 64) = v79;
          v78 -= 72;
        }
        while (v78 != -72);
        int v585 = -1;
      }
      v266 = *a5;
      v268 = (*a5)[1];
      unint64_t v267 = (unint64_t)(*a5)[2];
      if ((unint64_t)v268 < v267) {
        goto LABEL_389;
      }
      v269 = *v266;
      uint64_t v270 = v268 - *v266;
      unint64_t v271 = (v270 >> 3) + 1;
      if (v271 >> 61) {
        goto LABEL_714;
      }
      uint64_t v272 = v267 - (void)v269;
      if (v272 >> 2 > v271) {
        unint64_t v271 = v272 >> 2;
      }
      if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v273 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v273 = v271;
      }
      if (!v273)
      {
        v274 = 0;
        goto LABEL_581;
      }
      if (!(v273 >> 61))
      {
        v274 = operator new(8 * v273);
LABEL_581:
        v454 = &v274[8 * (v270 >> 3)];
        v455 = &v274[8 * v273];
        *(void *)v454 = *(void *)(a3 + 24);
        v340 = v454 + 8;
        if (v268 == v269) {
          goto LABEL_669;
        }
        unint64_t v456 = v268 - v269 - 8;
        if (v456 < 0x58) {
          goto LABEL_729;
        }
        if ((unint64_t)(v268 - v274 - v270) < 0x20) {
          goto LABEL_729;
        }
        uint64_t v457 = (v456 >> 3) + 1;
        uint64_t v458 = 8 * (v457 & 0x3FFFFFFFFFFFFFFCLL);
        v459 = &v268[-v458];
        v454 -= v458;
        v460 = &v274[v270 - 16];
        v461 = v268 - 16;
        uint64_t v462 = v457 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v463 = *(_OWORD *)v461;
          *(v460 - 1) = *((_OWORD *)v461 - 1);
          _OWORD *v460 = v463;
          v460 -= 2;
          v461 -= 32;
          v462 -= 4;
        }
        while (v462);
        v268 = v459;
        if (v457 != (v457 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_729:
          do
          {
            uint64_t v464 = *((void *)v268 - 1);
            v268 -= 8;
            *((void *)v454 - 1) = v464;
            v454 -= 8;
          }
          while (v268 != v269);
        }
        goto LABEL_668;
      }
      goto LABEL_713;
    case 14:
      uint64_t v29 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v29;
      if (v12 && v585 >= -1)
      {
        uint64_t v95 = a3 + 72 * v585;
        uint64_t v96 = *(void *)(v95 + 8);
        uint64_t v97 = v585 + 1;
        uint64_t v98 = v95 - 71;
        do
        {
          *(unsigned char *)uint64_t v98 = *(unsigned char *)(v96 + 1);
          if (*(unsigned char *)(v96 + 1)) {
            uint64_t v99 = *(void *)(v96 + 24);
          }
          else {
            uint64_t v99 = 0;
          }
          *(void *)(v98 + 23) = v99;
          long long v100 = *(_OWORD *)(v96 + 32);
          *(_OWORD *)(v98 + 47) = *(_OWORD *)(v96 + 48);
          *(_OWORD *)(v98 + 31) = v100;
          uint64_t v96 = *(void *)(v96 + 8);
          *(void *)(v98 + 7) = v96;
          --v97;
          v98 -= 72;
        }
        while ((v97 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_530;
    case 15:
      unint64_t v88 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v88;
      if (v12 && v585 >= -1)
      {
        uint64_t v165 = a3 + 72 * v585;
        uint64_t v166 = *(void *)(v165 + 8);
        uint64_t v167 = v585 + 1;
        uint64_t v168 = v165 - 71;
        do
        {
          *(unsigned char *)uint64_t v168 = *(unsigned char *)(v166 + 1);
          if (*(unsigned char *)(v166 + 1)) {
            uint64_t v169 = *(void *)(v166 + 24);
          }
          else {
            uint64_t v169 = 0;
          }
          *(void *)(v168 + 23) = v169;
          long long v170 = *(_OWORD *)(v166 + 32);
          *(_OWORD *)(v168 + 47) = *(_OWORD *)(v166 + 48);
          *(_OWORD *)(v168 + 31) = v170;
          uint64_t v166 = *(void *)(v166 + 8);
          *(void *)(v168 + 7) = v166;
          --v167;
          v168 -= 72;
        }
        while ((v167 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_534;
    case 16:
      operator new();
    case 17:
      v120 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v121 = a3 + 72 * v13;
        uint64_t v122 = *(void *)(v121 + 8);
        unint64_t v123 = v13 + 1;
        uint64_t v124 = v121 - 71;
        do
        {
          *(unsigned char *)uint64_t v124 = *(unsigned char *)(v122 + 1);
          if (*(unsigned char *)(v122 + 1)) {
            uint64_t v125 = *(void *)(v122 + 24);
          }
          else {
            uint64_t v125 = 0;
          }
          *(void *)(v124 + 23) = v125;
          long long v126 = *(_OWORD *)(v122 + 32);
          *(_OWORD *)(v124 + 47) = *(_OWORD *)(v122 + 48);
          *(_OWORD *)(v124 + 31) = v126;
          uint64_t v122 = *(void *)(v122 + 8);
          *(void *)(v124 + 7) = v122;
          --v123;
          v124 -= 72;
        }
        while (v123 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      v305 = v120[1];
      unint64_t v304 = (unint64_t)v120[2];
      if ((unint64_t)v305 < v304)
      {
        *(void *)v305 = *(void *)(a3 + 24);
        v306 = v305 + 8;
LABEL_626:
        uint64_t result = 0;
        v120[1] = v306;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          uint64_t v499 = 72 * v13;
          uint64_t v500 = *(void *)(a3 + v499 + 8);
          do
          {
            uint64_t v503 = a3 + v499;
            *(unsigned char *)(a3 + v499 - 71) = *(unsigned char *)(v500 + 1);
            if (*(unsigned char *)(v500 + 1)) {
              uint64_t v501 = *(void *)(v500 + 24);
            }
            else {
              uint64_t v501 = 0;
            }
            uint64_t result = 0;
            *(void *)(v503 - 48) = v501;
            long long v502 = *(_OWORD *)(v500 + 32);
            *(_OWORD *)(v503 - 24) = *(_OWORD *)(v500 + 48);
            *(_OWORD *)(v503 - 40) = v502;
            uint64_t v500 = *(void *)(v500 + 8);
            *(void *)(v503 - 64) = v500;
            v499 -= 72;
          }
          while (v499 != -72);
        }
        return result;
      }
      v307 = *v120;
      uint64_t v308 = v305 - *v120;
      uint64_t v309 = v308 >> 3;
      unint64_t v310 = (v308 >> 3) + 1;
      if (v310 >> 61) {
        goto LABEL_715;
      }
      uint64_t v311 = v304 - (void)v307;
      if (v311 >> 2 > v310) {
        unint64_t v310 = v311 >> 2;
      }
      if ((unint64_t)v311 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v312 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v312 = v310;
      }
      if (!v312)
      {
        v313 = 0;
        goto LABEL_616;
      }
      v577 = (char *)(v305 - *v120);
      if (!(v312 >> 61))
      {
        v313 = operator new(8 * v312);
        uint64_t v308 = (uint64_t)v577;
LABEL_616:
        v489 = &v313[8 * v309];
        *(void *)v489 = *(void *)(a3 + 24);
        v306 = v489 + 8;
        if (v305 != v307)
        {
          unint64_t v490 = v305 - v307 - 8;
          if (v490 < 0x58) {
            goto LABEL_730;
          }
          if ((unint64_t)(v305 - &v313[v308]) < 0x20) {
            goto LABEL_730;
          }
          uint64_t v491 = (v490 >> 3) + 1;
          uint64_t v492 = 8 * (v491 & 0x3FFFFFFFFFFFFFFCLL);
          v493 = &v305[-v492];
          v489 -= v492;
          v494 = &v313[v308 - 16];
          v495 = v305 - 16;
          uint64_t v496 = v491 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v497 = *(_OWORD *)v495;
            *(v494 - 1) = *((_OWORD *)v495 - 1);
            _OWORD *v494 = v497;
            v494 -= 2;
            v495 -= 32;
            v496 -= 4;
          }
          while (v496);
          v305 = v493;
          if (v491 != (v491 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_730:
            do
            {
              uint64_t v498 = *((void *)v305 - 1);
              v305 -= 8;
              *((void *)v489 - 1) = v498;
              v489 -= 8;
            }
            while (v305 != v307);
          }
          v305 = *v120;
        }
        *v120 = v489;
        v120[1] = v306;
        v120[2] = &v313[8 * v312];
        if (v305) {
          operator delete(v305);
        }
        goto LABEL_626;
      }
      goto LABEL_713;
    case 18:
      uint64_t v65 = (char **)sub_25513B0B8(0x50uLL);
      if (v12 && v585 >= -2)
      {
        uint64_t v66 = a3 + 72 * v585;
        uint64_t v67 = *(void *)(v66 + 8);
        uint64_t v68 = v585 + 1;
        uint64_t v69 = v66 - 71;
        do
        {
          *(unsigned char *)uint64_t v69 = *(unsigned char *)(v67 + 1);
          if (*(unsigned char *)(v67 + 1)) {
            uint64_t v70 = *(void *)(v67 + 24);
          }
          else {
            uint64_t v70 = 0;
          }
          *(void *)(v69 + 23) = v70;
          long long v71 = *(_OWORD *)(v67 + 32);
          *(_OWORD *)(v69 + 47) = *(_OWORD *)(v67 + 48);
          *(_OWORD *)(v69 + 31) = v71;
          uint64_t v67 = *(void *)(v67 + 8);
          *(void *)(v69 + 7) = v67;
          --v68;
          v69 -= 72;
        }
        while (v68 > -2);
        int v585 = -3;
      }
      v413 = *(const char **)(a3 - 192);
      size_t v414 = strlen(v413);
      if (v414 > 0x7FFFFFFFFFFFFFF7) {
        sub_2550EAC50();
      }
      v415 = (void *)v414;
      if (v414 >= 0x17)
      {
        uint64_t v417 = (v414 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v414 | 7) != 0x17) {
          uint64_t v417 = v414 | 7;
        }
        uint64_t v418 = v417 + 1;
        v416 = (void **)operator new(v417 + 1);
        __dst[1] = v415;
        unint64_t v582 = v418 | 0x8000000000000000;
        __dst[0] = v416;
      }
      else
      {
        HIBYTE(v582) = v414;
        v416 = __dst;
        if (!v414) {
          goto LABEL_500;
        }
      }
      memmove(v416, v413, (size_t)v415);
LABEL_500:
      *((unsigned char *)v415 + (void)v416) = 0;
      if (v12 && (v585 & 0x80000000) == 0)
      {
        uint64_t v419 = 72 * v585;
        uint64_t v420 = *(void *)(a3 + v419 + 8);
        do
        {
          uint64_t v423 = a3 + v419;
          *(unsigned char *)(a3 + v419 - 71) = *(unsigned char *)(v420 + 1);
          if (*(unsigned char *)(v420 + 1)) {
            uint64_t v421 = *(void *)(v420 + 24);
          }
          else {
            uint64_t v421 = 0;
          }
          *(void *)(v423 - 48) = v421;
          long long v422 = *(_OWORD *)(v420 + 32);
          *(_OWORD *)(v423 - 24) = *(_OWORD *)(v420 + 48);
          *(_OWORD *)(v423 - 40) = v422;
          uint64_t v420 = *(void *)(v420 + 8);
          *(void *)(v423 - 64) = v420;
          v419 -= 72;
        }
        while (v419 != -72);
        int v585 = -1;
      }
      sub_2551104A0(v65, __dst, *(void *)(a3 - 48));
      *a5 = v65;
      if (SHIBYTE(v582) < 0) {
        operator delete(__dst[0]);
      }
      return 0;
    case 19:
      operator new();
    case 20:
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v177 = 72 * v13;
        uint64_t v178 = *(void *)(a3 + v177 + 8);
        do
        {
          uint64_t v181 = a3 + v177;
          *(unsigned char *)(a3 + v177 - 71) = *(unsigned char *)(v178 + 1);
          if (*(unsigned char *)(v178 + 1)) {
            uint64_t v179 = *(void *)(v178 + 24);
          }
          else {
            uint64_t v179 = 0;
          }
          *(void *)(v181 - 48) = v179;
          long long v180 = *(_OWORD *)(v178 + 32);
          *(_OWORD *)(v181 - 24) = *(_OWORD *)(v178 + 48);
          *(_OWORD *)(v181 - 40) = v180;
          uint64_t v178 = *(void *)(v178 + 8);
          *(void *)(v181 - 64) = v178;
          v177 -= 72;
        }
        while (v177 != -72);
        int v585 = -1;
      }
      v266 = *(char ***)(a3 - 48);
      v268 = v266[1];
      unint64_t v332 = (unint64_t)v266[2];
      if ((unint64_t)v268 < v332)
      {
LABEL_389:
        *(void *)v268 = *(void *)(a3 + 24);
        v340 = v268 + 8;
LABEL_671:
        uint64_t result = 0;
        v266[1] = v340;
        return result;
      }
      v333 = *v266;
      uint64_t v334 = v268 - *v266;
      unint64_t v335 = (v334 >> 3) + 1;
      if (v335 >> 61) {
        goto LABEL_714;
      }
      uint64_t v336 = v332 - (void)v333;
      if (v336 >> 2 > v335) {
        unint64_t v335 = v336 >> 2;
      }
      if ((unint64_t)v336 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v337 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v337 = v335;
      }
      if (!v337)
      {
        v338 = 0;
        goto LABEL_652;
      }
      if (!(v337 >> 61))
      {
        v338 = operator new(8 * v337);
LABEL_652:
        v454 = &v338[8 * (v334 >> 3)];
        v455 = &v338[8 * v337];
        *(void *)v454 = *(void *)(a3 + 24);
        v340 = v454 + 8;
        if (v268 == v333) {
          goto LABEL_669;
        }
        unint64_t v519 = v268 - v333 - 8;
        if (v519 < 0x58) {
          goto LABEL_731;
        }
        if ((unint64_t)(v268 - v338 - v334) < 0x20) {
          goto LABEL_731;
        }
        uint64_t v520 = (v519 >> 3) + 1;
        uint64_t v521 = 8 * (v520 & 0x3FFFFFFFFFFFFFFCLL);
        v522 = &v268[-v521];
        v454 -= v521;
        v523 = &v338[v334 - 16];
        v524 = v268 - 16;
        uint64_t v525 = v520 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v526 = *(_OWORD *)v524;
          *(v523 - 1) = *((_OWORD *)v524 - 1);
          _OWORD *v523 = v526;
          v523 -= 2;
          v524 -= 32;
          v525 -= 4;
        }
        while (v525);
        v268 = v522;
        if (v520 != (v520 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_731:
          do
          {
            uint64_t v527 = *((void *)v268 - 1);
            v268 -= 8;
            *((void *)v454 - 1) = v527;
            v454 -= 8;
          }
          while (v268 != v333);
        }
        goto LABEL_668;
      }
      goto LABEL_713;
    case 21:
      unint64_t v88 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v88;
      if (v12 && v585 >= -1)
      {
        uint64_t v215 = a3 + 72 * v585;
        uint64_t v216 = *(void *)(v215 + 8);
        uint64_t v217 = v585 + 1;
        uint64_t v218 = v215 - 71;
        do
        {
          *(unsigned char *)uint64_t v218 = *(unsigned char *)(v216 + 1);
          if (*(unsigned char *)(v216 + 1)) {
            uint64_t v219 = *(void *)(v216 + 24);
          }
          else {
            uint64_t v219 = 0;
          }
          *(void *)(v218 + 23) = v219;
          long long v220 = *(_OWORD *)(v216 + 32);
          *(_OWORD *)(v218 + 47) = *(_OWORD *)(v216 + 48);
          *(_OWORD *)(v218 + 31) = v220;
          uint64_t v216 = *(void *)(v216 + 8);
          *(void *)(v218 + 7) = v216;
          --v217;
          v218 -= 72;
        }
        while ((v217 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_534;
    case 22:
      uint64_t v29 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v29;
      if (v12 && v585 >= -1)
      {
        uint64_t v147 = a3 + 72 * v585;
        uint64_t v148 = *(void *)(v147 + 8);
        uint64_t v149 = v585 + 1;
        uint64_t v150 = v147 - 71;
        do
        {
          *(unsigned char *)uint64_t v150 = *(unsigned char *)(v148 + 1);
          if (*(unsigned char *)(v148 + 1)) {
            uint64_t v151 = *(void *)(v148 + 24);
          }
          else {
            uint64_t v151 = 0;
          }
          *(void *)(v150 + 23) = v151;
          long long v152 = *(_OWORD *)(v148 + 32);
          *(_OWORD *)(v150 + 47) = *(_OWORD *)(v148 + 48);
          *(_OWORD *)(v150 + 31) = v152;
          uint64_t v148 = *(void *)(v148 + 8);
          *(void *)(v150 + 7) = v148;
          --v149;
          v150 -= 72;
        }
        while ((v149 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      goto LABEL_530;
    case 23:
      uint64_t v37 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v37;
      if (v12 && v585 >= -3)
      {
        uint64_t v159 = a3 + 72 * v585;
        uint64_t v160 = *(void *)(v159 + 8);
        uint64_t v161 = v585 + 1;
        uint64_t v162 = v159 - 71;
        do
        {
          *(unsigned char *)uint64_t v162 = *(unsigned char *)(v160 + 1);
          if (*(unsigned char *)(v160 + 1)) {
            uint64_t v163 = *(void *)(v160 + 24);
          }
          else {
            uint64_t v163 = 0;
          }
          *(void *)(v162 + 23) = v163;
          long long v164 = *(_OWORD *)(v160 + 32);
          *(_OWORD *)(v162 + 47) = *(_OWORD *)(v160 + 48);
          *(_OWORD *)(v162 + 31) = v164;
          uint64_t v160 = *(void *)(v160 + 8);
          *(void *)(v162 + 7) = v160;
          --v161;
          v162 -= 72;
        }
        while (v161 > -3);
        int v585 = -4;
      }
      goto LABEL_536;
    case 24:
      v201 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v201;
      if (v12 && v585 >= -1)
      {
        uint64_t v202 = a3 + 72 * v585;
        uint64_t v203 = *(void *)(v202 + 8);
        uint64_t v204 = v585 + 1;
        uint64_t v205 = v202 - 71;
        do
        {
          *(unsigned char *)uint64_t v205 = *(unsigned char *)(v203 + 1);
          if (*(unsigned char *)(v203 + 1)) {
            uint64_t v206 = *(void *)(v203 + 24);
          }
          else {
            uint64_t v206 = 0;
          }
          *(void *)(v205 + 23) = v206;
          long long v207 = *(_OWORD *)(v203 + 32);
          *(_OWORD *)(v205 + 47) = *(_OWORD *)(v203 + 48);
          *(_OWORD *)(v205 + 31) = v207;
          uint64_t v203 = *(void *)(v203 + 8);
          *(void *)(v205 + 7) = v203;
          --v204;
          v205 -= 72;
        }
        while ((v204 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      sub_25510EDE0((uint64_t)v201, *(char **)(a3 - 120), *(double *)(a3 + 24));
      goto LABEL_541;
    case 25:
      v140 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v140;
      if (v12 && v585 >= -3)
      {
        uint64_t v227 = a3 + 72 * v585;
        uint64_t v228 = *(void *)(v227 + 8);
        uint64_t v229 = v585 + 1;
        uint64_t v230 = v227 - 71;
        do
        {
          *(unsigned char *)uint64_t v230 = *(unsigned char *)(v228 + 1);
          if (*(unsigned char *)(v228 + 1)) {
            uint64_t v231 = *(void *)(v228 + 24);
          }
          else {
            uint64_t v231 = 0;
          }
          *(void *)(v230 + 23) = v231;
          long long v232 = *(_OWORD *)(v228 + 32);
          *(_OWORD *)(v230 + 47) = *(_OWORD *)(v228 + 48);
          *(_OWORD *)(v230 + 31) = v232;
          uint64_t v228 = *(void *)(v228 + 8);
          *(void *)(v230 + 7) = v228;
          --v229;
          v230 -= 72;
        }
        while (v229 > -3);
        int v585 = -4;
      }
      goto LABEL_520;
    case 26:
      operator new();
    case 27:
      int v107 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v108 = a3 + 72 * v13;
        uint64_t v109 = *(void *)(v108 + 8);
        unint64_t v110 = v13 + 1;
        uint64_t v111 = v108 - 71;
        do
        {
          *(unsigned char *)uint64_t v111 = *(unsigned char *)(v109 + 1);
          if (*(unsigned char *)(v109 + 1)) {
            uint64_t v112 = *(void *)(v109 + 24);
          }
          else {
            uint64_t v112 = 0;
          }
          *(void *)(v111 + 23) = v112;
          long long v113 = *(_OWORD *)(v109 + 32);
          *(_OWORD *)(v111 + 47) = *(_OWORD *)(v109 + 48);
          *(_OWORD *)(v111 + 31) = v113;
          uint64_t v109 = *(void *)(v109 + 8);
          *(void *)(v111 + 7) = v109;
          --v110;
          v111 -= 72;
        }
        while (v110 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      v288 = v107[1];
      unint64_t v287 = (unint64_t)v107[2];
      if ((unint64_t)v288 < v287)
      {
        *(void *)v288 = *(void *)(a3 + 24);
        v289 = v288 + 8;
LABEL_608:
        uint64_t result = 0;
        v107[1] = v289;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          uint64_t v484 = 72 * v13;
          uint64_t v485 = *(void *)(a3 + v484 + 8);
          do
          {
            uint64_t v488 = a3 + v484;
            *(unsigned char *)(a3 + v484 - 71) = *(unsigned char *)(v485 + 1);
            if (*(unsigned char *)(v485 + 1)) {
              uint64_t v486 = *(void *)(v485 + 24);
            }
            else {
              uint64_t v486 = 0;
            }
            uint64_t result = 0;
            *(void *)(v488 - 48) = v486;
            long long v487 = *(_OWORD *)(v485 + 32);
            *(_OWORD *)(v488 - 24) = *(_OWORD *)(v485 + 48);
            *(_OWORD *)(v488 - 40) = v487;
            uint64_t v485 = *(void *)(v485 + 8);
            *(void *)(v488 - 64) = v485;
            v484 -= 72;
          }
          while (v484 != -72);
        }
        return result;
      }
      v290 = *v107;
      uint64_t v291 = v288 - *v107;
      uint64_t v292 = v291 >> 3;
      unint64_t v293 = (v291 >> 3) + 1;
      if (v293 >> 61) {
        sub_2550EAEEC();
      }
      uint64_t v294 = v287 - (void)v290;
      if (v294 >> 2 > v293) {
        unint64_t v293 = v294 >> 2;
      }
      if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v295 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v295 = v293;
      }
      if (!v295)
      {
        v296 = 0;
LABEL_599:
        v474 = &v296[8 * v292];
        *(void *)v474 = *(void *)(a3 + 24);
        v289 = v474 + 8;
        if (v288 != v290)
        {
          unint64_t v475 = v288 - v290 - 8;
          if (v475 < 0x58) {
            goto LABEL_732;
          }
          if ((unint64_t)(v288 - &v296[v291]) < 0x20) {
            goto LABEL_732;
          }
          uint64_t v476 = (v475 >> 3) + 1;
          uint64_t v477 = 8 * (v476 & 0x3FFFFFFFFFFFFFFCLL);
          v478 = &v288[-v477];
          v474 -= v477;
          v479 = &v296[v291 - 16];
          v480 = v288 - 16;
          uint64_t v481 = v476 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v482 = *(_OWORD *)v480;
            *(v479 - 1) = *((_OWORD *)v480 - 1);
            _OWORD *v479 = v482;
            v479 -= 2;
            v480 -= 32;
            v481 -= 4;
          }
          while (v481);
          v288 = v478;
          if (v476 != (v476 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_732:
            do
            {
              uint64_t v483 = *((void *)v288 - 1);
              v288 -= 8;
              *((void *)v474 - 1) = v483;
              v474 -= 8;
            }
            while (v288 != v290);
          }
        }
        *int v107 = v474;
        v107[1] = v289;
        v107[2] = &v296[8 * v295];
        if (v290) {
          operator delete(v290);
        }
        goto LABEL_608;
      }
      v576 = (char *)(v288 - *v107);
      if (!(v295 >> 61))
      {
        v296 = operator new(8 * v295);
        uint64_t v291 = (uint64_t)v576;
        goto LABEL_599;
      }
      goto LABEL_713;
    case 28:
      operator new();
    case 29:
      uint64_t v51 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v52 = a3 + 72 * v13;
        uint64_t v53 = *(void *)(v52 + 8);
        unint64_t v54 = v13 + 1;
        uint64_t v55 = v52 - 71;
        do
        {
          *(unsigned char *)uint64_t v55 = *(unsigned char *)(v53 + 1);
          if (*(unsigned char *)(v53 + 1)) {
            uint64_t v56 = *(void *)(v53 + 24);
          }
          else {
            uint64_t v56 = 0;
          }
          *(void *)(v55 + 23) = v56;
          long long v57 = *(_OWORD *)(v53 + 32);
          *(_OWORD *)(v55 + 47) = *(_OWORD *)(v53 + 48);
          *(_OWORD *)(v55 + 31) = v57;
          uint64_t v53 = *(void *)(v53 + 8);
          *(void *)(v55 + 7) = v53;
          --v54;
          v55 -= 72;
        }
        while (v54 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      v257 = v51[1];
      unint64_t v256 = (unint64_t)v51[2];
      if ((unint64_t)v257 < v256)
      {
        *(void *)v257 = *(void *)(a3 + 24);
        v258 = v257 + 8;
LABEL_573:
        uint64_t result = 0;
        v51[1] = v258;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          uint64_t v449 = 72 * v13;
          uint64_t v450 = *(void *)(a3 + v449 + 8);
          do
          {
            uint64_t v453 = a3 + v449;
            *(unsigned char *)(a3 + v449 - 71) = *(unsigned char *)(v450 + 1);
            if (*(unsigned char *)(v450 + 1)) {
              uint64_t v451 = *(void *)(v450 + 24);
            }
            else {
              uint64_t v451 = 0;
            }
            uint64_t result = 0;
            *(void *)(v453 - 48) = v451;
            long long v452 = *(_OWORD *)(v450 + 32);
            *(_OWORD *)(v453 - 24) = *(_OWORD *)(v450 + 48);
            *(_OWORD *)(v453 - 40) = v452;
            uint64_t v450 = *(void *)(v450 + 8);
            *(void *)(v453 - 64) = v450;
            v449 -= 72;
          }
          while (v449 != -72);
        }
        return result;
      }
      v259 = *v51;
      uint64_t v260 = v257 - *v51;
      uint64_t v261 = v260 >> 3;
      unint64_t v262 = (v260 >> 3) + 1;
      if (v262 >> 61) {
LABEL_715:
      }
        sub_2550EAEEC();
      uint64_t v263 = v256 - (void)v259;
      if (v263 >> 2 > v262) {
        unint64_t v262 = v263 >> 2;
      }
      if ((unint64_t)v263 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v264 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v264 = v262;
      }
      if (!v264)
      {
        v265 = 0;
        goto LABEL_563;
      }
      v575 = (char *)(v257 - *v51);
      if (!(v264 >> 61))
      {
        v265 = operator new(8 * v264);
        uint64_t v260 = (uint64_t)v575;
LABEL_563:
        v439 = &v265[8 * v261];
        *(void *)v439 = *(void *)(a3 + 24);
        v258 = v439 + 8;
        if (v257 != v259)
        {
          unint64_t v440 = v257 - v259 - 8;
          if (v440 < 0x58) {
            goto LABEL_733;
          }
          if ((unint64_t)(v257 - &v265[v260]) < 0x20) {
            goto LABEL_733;
          }
          uint64_t v441 = (v440 >> 3) + 1;
          uint64_t v442 = 8 * (v441 & 0x3FFFFFFFFFFFFFFCLL);
          v443 = &v257[-v442];
          v439 -= v442;
          v444 = &v265[v260 - 16];
          v445 = v257 - 16;
          uint64_t v446 = v441 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v447 = *(_OWORD *)v445;
            *(v444 - 1) = *((_OWORD *)v445 - 1);
            _OWORD *v444 = v447;
            v444 -= 2;
            v445 -= 32;
            v446 -= 4;
          }
          while (v446);
          v257 = v443;
          if (v441 != (v441 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_733:
            do
            {
              uint64_t v448 = *((void *)v257 - 1);
              v257 -= 8;
              *((void *)v439 - 1) = v448;
              v439 -= 8;
            }
            while (v257 != v259);
          }
          v257 = *v51;
        }
        *uint64_t v51 = v439;
        v51[1] = v258;
        v51[2] = &v265[8 * v264];
        if (v257) {
          operator delete(v257);
        }
        goto LABEL_573;
      }
      goto LABEL_713;
    case 30:
      v233 = (char **)sub_25513B0B8(0x78uLL);
      uint64_t v30 = v233;
      if (v12 && v585 >= -1)
      {
        uint64_t v234 = a3 + 72 * v585;
        uint64_t v235 = *(void *)(v234 + 8);
        uint64_t v236 = v585 + 1;
        uint64_t v237 = v234 - 71;
        do
        {
          *(unsigned char *)uint64_t v237 = *(unsigned char *)(v235 + 1);
          if (*(unsigned char *)(v235 + 1)) {
            uint64_t v238 = *(void *)(v235 + 24);
          }
          else {
            uint64_t v238 = 0;
          }
          *(void *)(v237 + 23) = v238;
          long long v239 = *(_OWORD *)(v235 + 32);
          *(_OWORD *)(v237 + 47) = *(_OWORD *)(v235 + 48);
          *(_OWORD *)(v237 + 31) = v239;
          uint64_t v235 = *(void *)(v235 + 8);
          *(void *)(v237 + 7) = v235;
          --v236;
          v237 -= 72;
        }
        while ((v236 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      sub_255110B44((int)v233, *(char **)(a3 - 120));
      goto LABEL_541;
    case 31:
      if (v12 && v13 >= -1)
      {
        uint64_t v240 = a3 + 72 * v13;
        uint64_t v241 = *(void *)(v240 + 8);
        uint64_t v242 = v13 + 1;
        uint64_t v243 = v240 - 71;
        do
        {
          *(unsigned char *)uint64_t v243 = *(unsigned char *)(v241 + 1);
          if (*(unsigned char *)(v241 + 1)) {
            uint64_t v244 = *(void *)(v241 + 24);
          }
          else {
            uint64_t v244 = 0;
          }
          *(void *)(v243 + 23) = v244;
          long long v245 = *(_OWORD *)(v241 + 32);
          *(_OWORD *)(v243 + 47) = *(_OWORD *)(v241 + 48);
          *(_OWORD *)(v243 + 31) = v245;
          uint64_t v241 = *(void *)(v241 + 8);
          *(void *)(v243 + 7) = v241;
          --v242;
          v243 -= 72;
        }
        while ((v242 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
      v372 = *(const char **)(a3 - 120);
      size_t v373 = strlen(v372);
      if (v373 > 0x7FFFFFFFFFFFFFF7) {
        sub_2550EAC50();
      }
      size_t v374 = v373;
      if (v373 >= 0x17)
      {
        uint64_t v394 = (v373 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v373 | 7) != 0x17) {
          uint64_t v394 = v373 | 7;
        }
        uint64_t v395 = v394 + 1;
        v375 = operator new(v394 + 1);
        *(void *)&__str[8] = v374;
        int64_t v587 = v395 | 0x8000000000000000;
        *(void *)__str = v375;
      }
      else
      {
        HIBYTE(v587) = v373;
        v375 = __str;
        if (!v373) {
          goto LABEL_463;
        }
      }
      memmove(v375, v372, v374);
LABEL_463:
      BOOL v396 = 0;
      *((unsigned char *)v375 + v374) = 0;
      uint64_t v397 = HIBYTE(v587);
      if (v587 < 0) {
        uint64_t v397 = *(void *)&__str[8];
      }
      if (v397 == 4)
      {
        v398 = *(char **)__str;
        if (v587 >= 0) {
          v398 = __str;
        }
        BOOL v396 = *(_DWORD *)v398 == 1701732654;
        if (SHIBYTE(v587) < 0)
        {
LABEL_469:
          operator delete(*(void **)__str);
          if (!v396) {
            goto LABEL_470;
          }
          goto LABEL_473;
        }
      }
      else if (SHIBYTE(v587) < 0)
      {
        goto LABEL_469;
      }
      if (!v396)
      {
LABEL_470:
        sub_2551080CC((uint64_t)__str);
        v399 = sub_2551084AC(__str, (uint64_t)"Expecting a function or the '.ane' directive (not ", 50);
        sub_25510E66C(a3, &v585, 4294967294, v12 == 0);
        v400 = *(const char **)(a3 - 120);
        size_t v401 = strlen(v400);
        v402 = sub_2551084AC(v399, (uint64_t)v400, v401);
        sub_2551084AC(v402, (uint64_t)")", 1);
        v403 = (char **)sub_25513B0B8(0x48uLL);
        sub_25510E6E4(__str, &__s2);
        sub_25510E7C0((uint64_t)v403, &__s2);
LABEL_710:
        *a5 = v403;
        if (v584 < 0) {
          operator delete((void *)__s2);
        }
        sub_2551083A8((uint64_t)__str);
        return 0;
      }
LABEL_473:
      uint64_t v30 = (char **)sub_25513B0B8(0x80uLL);
      sub_25510E66C(a3, &v585, 0xFFFFFFFFLL, v12 == 0);
      v404 = *(char **)(a3 - 48);
      sub_25510E66C(a3, &v585, 0, v12 == 0);
      v405 = *(char **)(a3 + 24);
      sub_2551104A4((uint64_t)v30, v404);
      uint64_t result = 0;
      *uint64_t v30 = (char *)&unk_270445070;
      v30[15] = v405;
      goto LABEL_542;
    case 32:
      operator new();
    case 33:
      v133 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v134 = a3 + 72 * v13;
        uint64_t v135 = *(void *)(v134 + 8);
        unint64_t v136 = v13 + 1;
        uint64_t v137 = v134 - 71;
        do
        {
          *(unsigned char *)uint64_t v137 = *(unsigned char *)(v135 + 1);
          if (*(unsigned char *)(v135 + 1)) {
            uint64_t v138 = *(void *)(v135 + 24);
          }
          else {
            uint64_t v138 = 0;
          }
          *(void *)(v137 + 23) = v138;
          long long v139 = *(_OWORD *)(v135 + 32);
          *(_OWORD *)(v137 + 47) = *(_OWORD *)(v135 + 48);
          *(_OWORD *)(v137 + 31) = v139;
          uint64_t v135 = *(void *)(v135 + 8);
          *(void *)(v137 + 7) = v135;
          --v136;
          v137 -= 72;
        }
        while (v136 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      uint64_t v321 = *(void *)(a3 + 24);
      v323 = v133[1];
      unint64_t v322 = (unint64_t)v133[2];
      if ((unint64_t)v323 >= v322)
      {
        v325 = *v133;
        uint64_t v326 = v323 - *v133;
        uint64_t v327 = v326 >> 3;
        unint64_t v328 = (v326 >> 3) + 1;
        if (v328 >> 61) {
          sub_2550EAEEC();
        }
        uint64_t v329 = v322 - (void)v325;
        if (v329 >> 2 > v328) {
          unint64_t v328 = v329 >> 2;
        }
        if ((unint64_t)v329 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v330 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v330 = v328;
        }
        if (v330)
        {
          uint64_t v572 = v326 >> 3;
          v578 = (char *)(v323 - *v133);
          if (v330 >> 61) {
            sub_2550EACF8();
          }
          v331 = operator new(8 * v330);
          uint64_t v327 = v572;
          uint64_t v326 = (uint64_t)v578;
        }
        else
        {
          v331 = 0;
        }
        v504 = &v331[8 * v327];
        *(void *)v504 = v321;
        v324 = v504 + 8;
        if (v323 != v325)
        {
          unint64_t v505 = v323 - v325 - 8;
          if (v505 < 0x58) {
            goto LABEL_734;
          }
          if ((unint64_t)(v323 - &v331[v326]) < 0x20) {
            goto LABEL_734;
          }
          uint64_t v506 = (v505 >> 3) + 1;
          uint64_t v507 = 8 * (v506 & 0x3FFFFFFFFFFFFFFCLL);
          v508 = &v323[-v507];
          v504 -= v507;
          v509 = &v331[v326 - 16];
          v510 = v323 - 16;
          uint64_t v511 = v506 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v512 = *(_OWORD *)v510;
            *(v509 - 1) = *((_OWORD *)v510 - 1);
            _OWORD *v509 = v512;
            v509 -= 2;
            v510 -= 32;
            v511 -= 4;
          }
          while (v511);
          v323 = v508;
          if (v506 != (v506 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_734:
            do
            {
              uint64_t v513 = *((void *)v323 - 1);
              v323 -= 8;
              *((void *)v504 - 1) = v513;
              v504 -= 8;
            }
            while (v323 != v325);
          }
          v323 = *v133;
        }
        *v133 = v504;
        v133[1] = v324;
        v133[2] = &v331[8 * v330];
        if (v323) {
          operator delete(v323);
        }
      }
      else
      {
        *(void *)v323 = v321;
        v324 = v323 + 8;
      }
      uint64_t result = 0;
      v133[1] = v324;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v514 = 72 * v13;
        uint64_t v515 = *(void *)(a3 + v514 + 8);
        do
        {
          uint64_t v518 = a3 + v514;
          *(unsigned char *)(a3 + v514 - 71) = *(unsigned char *)(v515 + 1);
          if (*(unsigned char *)(v515 + 1)) {
            uint64_t v516 = *(void *)(v515 + 24);
          }
          else {
            uint64_t v516 = 0;
          }
          uint64_t result = 0;
          *(void *)(v518 - 48) = v516;
          long long v517 = *(_OWORD *)(v515 + 32);
          *(_OWORD *)(v518 - 24) = *(_OWORD *)(v515 + 48);
          *(_OWORD *)(v518 - 40) = v517;
          uint64_t v515 = *(void *)(v515 + 8);
          *(void *)(v518 - 64) = v515;
          v514 -= 72;
        }
        while (v514 != -72);
      }
      return result;
    case 34:
      v187 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v188 = a3 + 72 * v13;
        uint64_t v189 = *(void *)(v188 + 8);
        unint64_t v190 = v13 + 1;
        uint64_t v191 = v188 - 71;
        do
        {
          *(unsigned char *)uint64_t v191 = *(unsigned char *)(v189 + 1);
          if (*(unsigned char *)(v189 + 1)) {
            uint64_t v192 = *(void *)(v189 + 24);
          }
          else {
            uint64_t v192 = 0;
          }
          *(void *)(v191 + 23) = v192;
          long long v193 = *(_OWORD *)(v189 + 32);
          *(_OWORD *)(v191 + 47) = *(_OWORD *)(v189 + 48);
          *(_OWORD *)(v191 + 31) = v193;
          uint64_t v189 = *(void *)(v189 + 8);
          *(void *)(v191 + 7) = v189;
          --v190;
          v191 -= 72;
        }
        while (v190 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      uint64_t v347 = *(void *)(a3 + 24);
      v349 = v187[1];
      unint64_t v348 = (unint64_t)v187[2];
      if ((unint64_t)v349 >= v348)
      {
        v351 = *v187;
        uint64_t v352 = v349 - *v187;
        uint64_t v353 = v352 >> 3;
        unint64_t v354 = (v352 >> 3) + 1;
        if (v354 >> 61) {
          sub_2550EAEEC();
        }
        uint64_t v355 = v348 - (void)v351;
        if (v355 >> 2 > v354) {
          unint64_t v354 = v355 >> 2;
        }
        if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v356 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v356 = v354;
        }
        if (v356)
        {
          uint64_t v573 = v352 >> 3;
          v579 = (char *)(v349 - *v187);
          if (v356 >> 61) {
            sub_2550EACF8();
          }
          v357 = operator new(8 * v356);
          uint64_t v353 = v573;
          uint64_t v352 = (uint64_t)v579;
        }
        else
        {
          v357 = 0;
        }
        v537 = &v357[8 * v353];
        *(void *)v537 = v347;
        v350 = v537 + 8;
        if (v349 != v351)
        {
          unint64_t v538 = v349 - v351 - 8;
          if (v538 < 0x58) {
            goto LABEL_735;
          }
          if ((unint64_t)(v349 - &v357[v352]) < 0x20) {
            goto LABEL_735;
          }
          uint64_t v539 = (v538 >> 3) + 1;
          uint64_t v540 = 8 * (v539 & 0x3FFFFFFFFFFFFFFCLL);
          v541 = &v349[-v540];
          v537 -= v540;
          v542 = &v357[v352 - 16];
          v543 = v349 - 16;
          uint64_t v544 = v539 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v545 = *(_OWORD *)v543;
            *(v542 - 1) = *((_OWORD *)v543 - 1);
            _OWORD *v542 = v545;
            v542 -= 2;
            v543 -= 32;
            v544 -= 4;
          }
          while (v544);
          v349 = v541;
          if (v539 != (v539 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_735:
            do
            {
              uint64_t v546 = *((void *)v349 - 1);
              v349 -= 8;
              *((void *)v537 - 1) = v546;
              v537 -= 8;
            }
            while (v349 != v351);
          }
          v349 = *v187;
        }
        *v187 = v537;
        v187[1] = v350;
        v187[2] = &v357[8 * v356];
        if (v349) {
          operator delete(v349);
        }
      }
      else
      {
        *(void *)v349 = v347;
        v350 = v349 + 8;
      }
      uint64_t result = 0;
      v187[1] = v350;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v547 = 72 * v13;
        uint64_t v548 = *(void *)(a3 + v547 + 8);
        do
        {
          uint64_t v551 = a3 + v547;
          *(unsigned char *)(a3 + v547 - 71) = *(unsigned char *)(v548 + 1);
          if (*(unsigned char *)(v548 + 1)) {
            uint64_t v549 = *(void *)(v548 + 24);
          }
          else {
            uint64_t v549 = 0;
          }
          uint64_t result = 0;
          *(void *)(v551 - 48) = v549;
          long long v550 = *(_OWORD *)(v548 + 32);
          *(_OWORD *)(v551 - 24) = *(_OWORD *)(v548 + 48);
          *(_OWORD *)(v551 - 40) = v550;
          uint64_t v548 = *(void *)(v548 + 8);
          *(void *)(v551 - 64) = v548;
          v547 -= 72;
        }
        while (v547 != -72);
      }
      return result;
    case 35:
      v72 = (char **)sub_25513B0B8(0x60uLL);
      uint64_t v30 = v72;
      if (v12 && (v585 & 0x80000000) == 0)
      {
        uint64_t v73 = 72 * v585;
        uint64_t v74 = *(void *)(a3 + v73 + 8);
        do
        {
          uint64_t v77 = a3 + v73;
          *(unsigned char *)(a3 + v73 - 71) = *(unsigned char *)(v74 + 1);
          if (*(unsigned char *)(v74 + 1)) {
            uint64_t v75 = *(void *)(v74 + 24);
          }
          else {
            uint64_t v75 = 0;
          }
          *(void *)(v77 - 48) = v75;
          long long v76 = *(_OWORD *)(v74 + 32);
          *(_OWORD *)(v77 - 24) = *(_OWORD *)(v74 + 48);
          *(_OWORD *)(v77 - 40) = v76;
          uint64_t v74 = *(void *)(v74 + 8);
          *(void *)(v77 - 64) = v74;
          v73 -= 72;
        }
        while (v73 != -72);
        int v585 = -1;
      }
      sub_255110B48((uint64_t)v72, *(char **)(a3 - 48));
      uint64_t result = 0;
      *uint64_t v30 = (char *)&unk_270445098;
      goto LABEL_542;
    case 36:
      uint64_t v58 = (char **)sub_25513B0B8(0x60uLL);
      uint64_t v30 = v58;
      if (v12 && v585 >= -2)
      {
        uint64_t v59 = a3 + 72 * v585;
        uint64_t v60 = *(void *)(v59 + 8);
        uint64_t v61 = v585 + 1;
        uint64_t v62 = v59 - 71;
        do
        {
          *(unsigned char *)uint64_t v62 = *(unsigned char *)(v60 + 1);
          if (*(unsigned char *)(v60 + 1)) {
            uint64_t v63 = *(void *)(v60 + 24);
          }
          else {
            uint64_t v63 = 0;
          }
          *(void *)(v62 + 23) = v63;
          long long v64 = *(_OWORD *)(v60 + 32);
          *(_OWORD *)(v62 + 47) = *(_OWORD *)(v60 + 48);
          *(_OWORD *)(v62 + 31) = v64;
          uint64_t v60 = *(void *)(v60 + 8);
          *(void *)(v62 + 7) = v60;
          --v61;
          v62 -= 72;
        }
        while (v61 > -2);
        int v585 = -3;
      }
      sub_255110F98((int)v58, *(char **)(a3 - 192));
      goto LABEL_541;
    case 37:
      operator new();
    case 38:
      int v44 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v45 = a3 + 72 * v13;
        uint64_t v46 = *(void *)(v45 + 8);
        unint64_t v47 = v13 + 1;
        uint64_t v48 = v45 - 71;
        do
        {
          *(unsigned char *)uint64_t v48 = *(unsigned char *)(v46 + 1);
          if (*(unsigned char *)(v46 + 1)) {
            uint64_t v49 = *(void *)(v46 + 24);
          }
          else {
            uint64_t v49 = 0;
          }
          *(void *)(v48 + 23) = v49;
          long long v50 = *(_OWORD *)(v46 + 32);
          *(_OWORD *)(v48 + 47) = *(_OWORD *)(v46 + 48);
          *(_OWORD *)(v48 + 31) = v50;
          uint64_t v46 = *(void *)(v46 + 8);
          *(void *)(v48 + 7) = v46;
          --v47;
          v48 -= 72;
        }
        while (v47 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      v247 = v44[1];
      unint64_t v246 = (unint64_t)v44[2];
      if ((unint64_t)v247 < v246)
      {
        *(void *)v247 = *(void *)(a3 + 24);
        v248 = v247 + 8;
LABEL_555:
        uint64_t result = 0;
        v44[1] = v248;
        if (v12 && (v13 & 0x80000000) == 0)
        {
          uint64_t v434 = 72 * v13;
          uint64_t v435 = *(void *)(a3 + v434 + 8);
          do
          {
            uint64_t v438 = a3 + v434;
            *(unsigned char *)(a3 + v434 - 71) = *(unsigned char *)(v435 + 1);
            if (*(unsigned char *)(v435 + 1)) {
              uint64_t v436 = *(void *)(v435 + 24);
            }
            else {
              uint64_t v436 = 0;
            }
            uint64_t result = 0;
            *(void *)(v438 - 48) = v436;
            long long v437 = *(_OWORD *)(v435 + 32);
            *(_OWORD *)(v438 - 24) = *(_OWORD *)(v435 + 48);
            *(_OWORD *)(v438 - 40) = v437;
            uint64_t v435 = *(void *)(v435 + 8);
            *(void *)(v438 - 64) = v435;
            v434 -= 72;
          }
          while (v434 != -72);
        }
        return result;
      }
      v249 = *v44;
      uint64_t v250 = v247 - *v44;
      uint64_t v251 = v250 >> 3;
      unint64_t v252 = (v250 >> 3) + 1;
      if (v252 >> 61) {
        goto LABEL_714;
      }
      uint64_t v253 = v246 - (void)v249;
      if (v253 >> 2 > v252) {
        unint64_t v252 = v253 >> 2;
      }
      if ((unint64_t)v253 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v254 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v254 = v252;
      }
      if (!v254)
      {
        v255 = 0;
        goto LABEL_545;
      }
      v574 = (char *)(v247 - *v44);
      if (!(v254 >> 61))
      {
        v255 = operator new(8 * v254);
        uint64_t v250 = (uint64_t)v574;
LABEL_545:
        v424 = &v255[8 * v251];
        *(void *)v424 = *(void *)(a3 + 24);
        v248 = v424 + 8;
        if (v247 != v249)
        {
          unint64_t v425 = v247 - v249 - 8;
          if (v425 < 0x58) {
            goto LABEL_736;
          }
          if ((unint64_t)(v247 - &v255[v250]) < 0x20) {
            goto LABEL_736;
          }
          uint64_t v426 = (v425 >> 3) + 1;
          uint64_t v427 = 8 * (v426 & 0x3FFFFFFFFFFFFFFCLL);
          v428 = &v247[-v427];
          v424 -= v427;
          v429 = &v255[v250 - 16];
          v430 = v247 - 16;
          uint64_t v431 = v426 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v432 = *(_OWORD *)v430;
            *(v429 - 1) = *((_OWORD *)v430 - 1);
            _OWORD *v429 = v432;
            v429 -= 2;
            v430 -= 32;
            v431 -= 4;
          }
          while (v431);
          v247 = v428;
          if (v426 != (v426 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_736:
            do
            {
              uint64_t v433 = *((void *)v247 - 1);
              v247 -= 8;
              *((void *)v424 - 1) = v433;
              v424 -= 8;
            }
            while (v247 != v249);
          }
          v247 = *v44;
        }
        *int v44 = v424;
        v44[1] = v248;
        v44[2] = &v255[8 * v254];
        if (v247) {
          operator delete(v247);
        }
        goto LABEL_555;
      }
      goto LABEL_713;
    case 39:
      uint64_t v37 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v37;
      if (v12 && v585 >= -3)
      {
        uint64_t v38 = a3 + 72 * v585;
        uint64_t v39 = *(void *)(v38 + 8);
        uint64_t v40 = v585 + 1;
        uint64_t v41 = v38 - 71;
        do
        {
          *(unsigned char *)uint64_t v41 = *(unsigned char *)(v39 + 1);
          if (*(unsigned char *)(v39 + 1)) {
            uint64_t v42 = *(void *)(v39 + 24);
          }
          else {
            uint64_t v42 = 0;
          }
          *(void *)(v41 + 23) = v42;
          long long v43 = *(_OWORD *)(v39 + 32);
          *(_OWORD *)(v41 + 47) = *(_OWORD *)(v39 + 48);
          *(_OWORD *)(v41 + 31) = v43;
          uint64_t v39 = *(void *)(v39 + 8);
          *(void *)(v41 + 7) = v39;
          --v40;
          v41 -= 72;
        }
        while (v40 > -3);
        int v585 = -4;
      }
      goto LABEL_536;
    case 40:
      operator new();
    case 41:
      v208 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v209 = a3 + 72 * v13;
        uint64_t v210 = *(void *)(v209 + 8);
        unint64_t v211 = v13 + 1;
        uint64_t v212 = v209 - 71;
        do
        {
          *(unsigned char *)uint64_t v212 = *(unsigned char *)(v210 + 1);
          if (*(unsigned char *)(v210 + 1)) {
            uint64_t v213 = *(void *)(v210 + 24);
          }
          else {
            uint64_t v213 = 0;
          }
          *(void *)(v212 + 23) = v213;
          long long v214 = *(_OWORD *)(v210 + 32);
          *(_OWORD *)(v212 + 47) = *(_OWORD *)(v210 + 48);
          *(_OWORD *)(v212 + 31) = v214;
          uint64_t v210 = *(void *)(v210 + 8);
          *(void *)(v212 + 7) = v210;
          --v211;
          v212 -= 72;
        }
        while (v211 > 1);
        int v13 = 0;
        int v585 = 0;
      }
      v363 = v208[1];
      unint64_t v362 = (unint64_t)v208[2];
      if ((unint64_t)v363 >= v362)
      {
        v365 = *v208;
        uint64_t v366 = v363 - *v208;
        uint64_t v367 = v366 >> 3;
        unint64_t v368 = (v366 >> 3) + 1;
        if (v368 >> 61) {
LABEL_714:
        }
          sub_2550EAEEC();
        uint64_t v369 = v362 - (void)v365;
        if (v369 >> 2 > v368) {
          unint64_t v368 = v369 >> 2;
        }
        if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v370 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v370 = v368;
        }
        if (v370)
        {
          v580 = (char *)(v363 - *v208);
          if (v370 >> 61) {
LABEL_713:
          }
            sub_2550EACF8();
          v371 = operator new(8 * v370);
          uint64_t v366 = (uint64_t)v580;
        }
        else
        {
          v371 = 0;
        }
        v552 = &v371[8 * v367];
        *(void *)v552 = *(void *)(a3 + 24);
        v364 = v552 + 8;
        if (v363 != v365)
        {
          unint64_t v553 = v363 - v365 - 8;
          if (v553 < 0x58) {
            goto LABEL_737;
          }
          if ((unint64_t)(v363 - &v371[v366]) < 0x20) {
            goto LABEL_737;
          }
          uint64_t v554 = (v553 >> 3) + 1;
          uint64_t v555 = 8 * (v554 & 0x3FFFFFFFFFFFFFFCLL);
          v556 = &v363[-v555];
          v552 -= v555;
          v557 = &v371[v366 - 16];
          v558 = v363 - 16;
          uint64_t v559 = v554 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v560 = *(_OWORD *)v558;
            *(v557 - 1) = *((_OWORD *)v558 - 1);
            _OWORD *v557 = v560;
            v557 -= 2;
            v558 -= 32;
            v559 -= 4;
          }
          while (v559);
          v363 = v556;
          if (v554 != (v554 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_737:
            do
            {
              uint64_t v561 = *((void *)v363 - 1);
              v363 -= 8;
              *((void *)v552 - 1) = v561;
              v552 -= 8;
            }
            while (v363 != v365);
          }
          v363 = *v208;
        }
        *v208 = v552;
        v208[1] = v364;
        v208[2] = &v371[8 * v370];
        if (v363) {
          operator delete(v363);
        }
      }
      else
      {
        *(void *)v363 = *(void *)(a3 + 24);
        v364 = v363 + 8;
      }
      uint64_t result = 0;
      v208[1] = v364;
      if (v12 && (v13 & 0x80000000) == 0)
      {
        uint64_t v562 = 72 * v13;
        uint64_t v563 = *(void *)(a3 + v562 + 8);
        do
        {
          uint64_t v566 = a3 + v562;
          *(unsigned char *)(a3 + v562 - 71) = *(unsigned char *)(v563 + 1);
          if (*(unsigned char *)(v563 + 1)) {
            uint64_t v564 = *(void *)(v563 + 24);
          }
          else {
            uint64_t v564 = 0;
          }
          uint64_t result = 0;
          *(void *)(v566 - 48) = v564;
          long long v565 = *(_OWORD *)(v563 + 32);
          *(_OWORD *)(v566 - 24) = *(_OWORD *)(v563 + 48);
          *(_OWORD *)(v566 - 40) = v565;
          uint64_t v563 = *(void *)(v563 + 8);
          *(void *)(v566 - 64) = v563;
          v562 -= 72;
        }
        while (v562 != -72);
      }
      return result;
    case 42:
      unint64_t v88 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v88;
      if (v12 && v585 >= -1)
      {
        uint64_t v89 = a3 + 72 * v585;
        uint64_t v90 = *(void *)(v89 + 8);
        uint64_t v91 = v585 + 1;
        uint64_t v92 = v89 - 71;
        do
        {
          *(unsigned char *)uint64_t v92 = *(unsigned char *)(v90 + 1);
          if (*(unsigned char *)(v90 + 1)) {
            uint64_t v93 = *(void *)(v90 + 24);
          }
          else {
            uint64_t v93 = 0;
          }
          *(void *)(v92 + 23) = v93;
          long long v94 = *(_OWORD *)(v90 + 32);
          *(_OWORD *)(v92 + 47) = *(_OWORD *)(v90 + 48);
          *(_OWORD *)(v92 + 31) = v94;
          uint64_t v90 = *(void *)(v90 + 8);
          *(void *)(v92 + 7) = v90;
          --v91;
          v92 -= 72;
        }
        while ((v91 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
LABEL_534:
      sub_25510E84C((uint64_t)v88, *(char **)(a3 - 120), *(const char **)(a3 + 24));
      goto LABEL_541;
    case 43:
      v140 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v140;
      if (v12 && v585 >= -3)
      {
        uint64_t v141 = a3 + 72 * v585;
        uint64_t v142 = *(void *)(v141 + 8);
        uint64_t v143 = v585 + 1;
        uint64_t v144 = v141 - 71;
        do
        {
          *(unsigned char *)uint64_t v144 = *(unsigned char *)(v142 + 1);
          if (*(unsigned char *)(v142 + 1)) {
            uint64_t v145 = *(void *)(v142 + 24);
          }
          else {
            uint64_t v145 = 0;
          }
          *(void *)(v144 + 23) = v145;
          long long v146 = *(_OWORD *)(v142 + 32);
          *(_OWORD *)(v144 + 47) = *(_OWORD *)(v142 + 48);
          *(_OWORD *)(v144 + 31) = v146;
          uint64_t v142 = *(void *)(v142 + 8);
          *(void *)(v144 + 7) = v142;
          --v143;
          v144 -= 72;
        }
        while (v143 > -3);
        int v585 = -4;
      }
LABEL_520:
      sub_25510EEF0((uint64_t)v140, *(char **)(a3 - 264), *(void *)(a3 - 48));
      goto LABEL_541;
    case 44:
      uint64_t v37 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v37;
      if (v12 && v585 >= -3)
      {
        uint64_t v221 = a3 + 72 * v585;
        uint64_t v222 = *(void *)(v221 + 8);
        uint64_t v223 = v585 + 1;
        uint64_t v224 = v221 - 71;
        do
        {
          *(unsigned char *)uint64_t v224 = *(unsigned char *)(v222 + 1);
          if (*(unsigned char *)(v222 + 1)) {
            uint64_t v225 = *(void *)(v222 + 24);
          }
          else {
            uint64_t v225 = 0;
          }
          *(void *)(v224 + 23) = v225;
          long long v226 = *(_OWORD *)(v222 + 32);
          *(_OWORD *)(v224 + 47) = *(_OWORD *)(v222 + 48);
          *(_OWORD *)(v224 + 31) = v226;
          uint64_t v222 = *(void *)(v222 + 8);
          *(void *)(v224 + 7) = v222;
          --v223;
          v224 -= 72;
        }
        while (v223 > -3);
        int v585 = -4;
      }
LABEL_536:
      sub_25510EC90((uint64_t)v37, *(char **)(a3 - 264), *(uint64_t **)(a3 - 48));
      goto LABEL_541;
    case 45:
      uint64_t v29 = (char **)sub_25513B0B8(0x68uLL);
      uint64_t v30 = v29;
      if (v12 && v585 >= -1)
      {
        uint64_t v31 = a3 + 72 * v585;
        uint64_t v32 = *(void *)(v31 + 8);
        uint64_t v33 = v585 + 1;
        uint64_t v34 = v31 - 71;
        do
        {
          *(unsigned char *)uint64_t v34 = *(unsigned char *)(v32 + 1);
          if (*(unsigned char *)(v32 + 1)) {
            uint64_t v35 = *(void *)(v32 + 24);
          }
          else {
            uint64_t v35 = 0;
          }
          *(void *)(v34 + 23) = v35;
          long long v36 = *(_OWORD *)(v32 + 32);
          *(_OWORD *)(v34 + 47) = *(_OWORD *)(v32 + 48);
          *(_OWORD *)(v34 + 31) = v36;
          uint64_t v32 = *(void *)(v32 + 8);
          *(void *)(v34 + 7) = v32;
          --v33;
          v34 -= 72;
        }
        while ((v33 & 0x8000000000000000) == 0);
        int v585 = -2;
      }
LABEL_530:
      sub_25510EAC0((uint64_t)v29, *(char **)(a3 - 120), *(void *)(a3 + 24));
      goto LABEL_541;
    case 46:
      operator new();
    case 47:
      v194 = *a5;
      if (v12 && v13 >= 1)
      {
        uint64_t v195 = a3 + 72 * v13;
        uint64_t v196 = *(void *)(v195 + 8);
        unint64_t v197 = v13 + 1;
        uint64_t v198 = v195 - 71;
        do
        {
          *(unsigned char *)uint64_t v198 = *(unsigned char *)(v196 + 1);
          if (*(unsigned char *)(v196 + 1)) {
            uint64_t v199 = *(void *)(v196 + 24);
          }
          else {
            uint64_t v199 = 0;
          }
          *(void *)(v198 + 23) = v199;
          long long v200 = *(_OWORD *)(v196 + 32);
          *(_OWORD *)(v198 + 47) = *(_OWORD *)(v196 + 48);
          *(_OWORD *)(v198 + 31) = v200;
          uint64_t v196 = *(void *)(v196 + 8);
          *(void *)(v198 + 7) = v196;
          --v197;
          v198 -= 72;
        }
        while (v197 > 1);
        int v585 = 0;
      }
      v358 = *(const char **)(a3 + 24);
      size_t v359 = strlen(v358);
      if (v359 > 0x7FFFFFFFFFFFFFF7) {
        sub_2550EAC50();
      }
      size_t v360 = v359;
      if (v359 >= 0x17)
      {
        uint64_t v390 = (v359 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v359 | 7) != 0x17) {
          uint64_t v390 = v359 | 7;
        }
        uint64_t v391 = v390 + 1;
        v361 = operator new(v390 + 1);
        *(void *)&__str[8] = v360;
        int64_t v587 = v391 | 0x8000000000000000;
        *(void *)__str = v361;
      }
      else
      {
        HIBYTE(v587) = v359;
        v361 = __str;
        if (!v359) {
          goto LABEL_457;
        }
      }
      memmove(v361, v358, v360);
LABEL_457:
      *((unsigned char *)v361 + v360) = 0;
      v392 = v194[1];
      if (v392 >= v194[2])
      {
        v406 = sub_25510F0E0((void **)v194, (uint64_t)__str);
        int v407 = SHIBYTE(v587);
        v194[1] = v406;
        if (v407 < 0) {
          operator delete(*(void **)__str);
        }
      }
      else
      {
        long long v393 = *(_OWORD *)__str;
        *((void *)v392 + 2) = v587;
        *(_OWORD *)v392 = v393;
        v194[1] = v392 + 24;
      }
      if (!v12 || v585 < 0) {
        return 0;
      }
      uint64_t v408 = 72 * v585;
      uint64_t v409 = *(void *)(a3 + v408 + 8);
      do
      {
        uint64_t v412 = a3 + v408;
        *(unsigned char *)(a3 + v408 - 71) = *(unsigned char *)(v409 + 1);
        if (*(unsigned char *)(v409 + 1)) {
          uint64_t v410 = *(void *)(v409 + 24);
        }
        else {
          uint64_t v410 = 0;
        }
        uint64_t result = 0;
        *(void *)(v412 - 48) = v410;
        long long v411 = *(_OWORD *)(v409 + 32);
        *(_OWORD *)(v412 - 24) = *(_OWORD *)(v409 + 48);
        *(_OWORD *)(v412 - 40) = v411;
        uint64_t v409 = *(void *)(v409 + 8);
        *(void *)(v412 - 64) = v409;
        v408 -= 72;
      }
      while (v408 != -72);
      return result;
    default:
      return 0;
  }
}

void sub_25510E3FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  j__free(v33);
  sub_2551083A8((uint64_t)&a26);
  if (a2 == 1)
  {
    long long v36 = __cxa_begin_catch(a1);
    long long v37 = v36[2];
    *uint64_t v32 = v36[1];
    v32[1] = v37;
    uint64_t v38 = (char *)(*(uint64_t (**)(_OWORD *))(*(void *)v36 + 16))(v36);
    sub_25510AFDC((uint64_t)v32, a12, v38);
    *uint64_t v31 = 0;
    __cxa_end_catch();
    JUMPOUT(0x25510D844);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25510E66C(uint64_t a1, int *a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
  {
    uint64_t v4 = *a2;
    if ((int)v4 > (int)a3)
    {
      uint64_t v5 = a1 + 72 * (int)v4;
      uint64_t v6 = *(void *)(v5 + 8);
      uint64_t v7 = v5 - 71;
      do
      {
        *(unsigned char *)uint64_t v7 = *(unsigned char *)(v6 + 1);
        if (*(unsigned char *)(v6 + 1)) {
          uint64_t v8 = *(void *)(v6 + 24);
        }
        else {
          uint64_t v8 = 0;
        }
        --v4;
        *(void *)(v7 + 23) = v8;
        long long v9 = *(_OWORD *)(v6 + 32);
        *(_OWORD *)(v7 + 47) = *(_OWORD *)(v6 + 48);
        *(_OWORD *)(v7 + 31) = v9;
        uint64_t v6 = *(void *)(v6 + 8);
        *(void *)(v7 + 7) = v6;
        v7 -= 72;
      }
      while (v4 > (int)a3);
      *a2 = a3;
    }
  }
  return a3;
}

char *sub_25510E6E4@<X0>(char *result@<X0>, unsigned char *a2@<X8>)
{
  int v3 = *((_DWORD *)result + 26);
  if ((v3 & 0x10) != 0)
  {
    unint64_t v5 = *((void *)result + 12);
    unint64_t v6 = *((void *)result + 7);
    if (v5 < v6)
    {
      *((void *)result + 12) = v6;
      unint64_t v5 = v6;
    }
    uint64_t v7 = (const void **)(result + 48);
  }
  else
  {
    if ((v3 & 8) == 0)
    {
      size_t v4 = 0;
      a2[23] = 0;
      goto LABEL_16;
    }
    uint64_t v7 = (const void **)(result + 24);
    unint64_t v5 = *((void *)result + 5);
  }
  uint64_t v8 = *v7;
  size_t v4 = v5 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v11 = operator new(v9 + 1);
    *((void *)a2 + 1) = v4;
    *((void *)a2 + 2) = v10 | 0x8000000000000000;
    *(void *)a2 = v11;
    a2 = v11;
  }
  else
  {
    a2[23] = v4;
    if (!v4) {
      goto LABEL_16;
    }
  }
  uint64_t result = (char *)memmove(a2, v8, v4);
LABEL_16:
  a2[v4] = 0;
  return result;
}

uint64_t sub_25510E7C0(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445048;
  uint64_t v3 = a1 + 48;
  if (*((char *)a2 + 23) < 0)
  {
    sub_2550EABB0((unsigned char *)v3, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  return a1;
}

void sub_25510E838(_Unwind_Exception *a1)
{
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25510E84C(uint64_t a1, char *__s, const char *a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445020;
  unint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v11 | 0x8000000000000000;
    *(void *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 71) = v7;
  uint64_t v9 = v6;
  if (v7) {
LABEL_8:
  }
    memmove(v9, __s, v8);
  *((unsigned char *)v9 + v8) = 0;
  uint64_t v12 = (void *)(a1 + 72);
  size_t v13 = strlen(a3);
  if (v13 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  size_t v14 = v13;
  if (v13 >= 0x17)
  {
    uint64_t v15 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17) {
      uint64_t v15 = v13 | 7;
    }
    uint64_t v16 = v15 + 1;
    uint64_t v12 = operator new(v15 + 1);
    *(void *)(a1 + 80) = v14;
    *(void *)(a1 + 88) = v16 | 0x8000000000000000;
    *(void *)(a1 + 72) = v12;
  }
  else
  {
    *(unsigned char *)(a1 + 95) = v13;
    if (!v13) {
      goto LABEL_17;
    }
  }
  memmove(v12, a3, v14);
LABEL_17:
  *((unsigned char *)v12 + v14) = 0;
  *(_DWORD *)(a1 + 96) = 2;
  return a1;
}

void sub_25510E9C8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  sub_25510F7E0((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25510E9F4(uint64_t a1)
{
  *(void *)a1 = &unk_270445020;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return sub_25510F7E0((void *)a1);
}

void sub_25510EA54(uint64_t a1)
{
  *(void *)a1 = &unk_270445020;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = (void *)sub_25510F7E0((void *)a1);
  j__free(v2);
}

uint64_t sub_25510EAB8()
{
  return 1;
}

uint64_t sub_25510EAC0(uint64_t a1, char *__s, uint64_t a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445020;
  unint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v6 = operator new(v9 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v10 | 0x8000000000000000;
    *(void *)(a1 + 48) = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v7;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((unsigned char *)v6 + v8) = 0;
  *(void *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 96) = 0;
  return a1;
}

void sub_25510EBB0(_Unwind_Exception *a1)
{
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25510EBC4(uint64_t a1)
{
  *(void *)a1 = &unk_270445048;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  return sub_25510F7E0((void *)a1);
}

void sub_25510EC24(uint64_t a1)
{
  *(void *)a1 = &unk_270445048;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = (void *)sub_25510F7E0((void *)a1);
  j__free(v2);
}

uint64_t sub_25510EC88()
{
  return 4;
}

uint64_t sub_25510EC90(uint64_t a1, char *__s, uint64_t *a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445020;
  unint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v11 | 0x8000000000000000;
    *(void *)(a1 + 48) = v9;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v7;
    uint64_t v9 = v6;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(v9, __s, v8);
LABEL_9:
  *((unsigned char *)v9 + v8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_2550EAD40((char *)(a1 + 72), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
  *(_DWORD *)(a1 + 96) = 3;
  return a1;
}

void sub_25510EDB4(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  sub_25510F7E0((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25510EDE0(uint64_t a1, char *__s, double a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445020;
  unint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v6 = operator new(v9 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v10 | 0x8000000000000000;
    *(void *)(a1 + 48) = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v7;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((unsigned char *)v6 + v8) = 0;
  *(double *)(a1 + 72) = a3;
  *(_DWORD *)(a1 + 96) = 1;
  return a1;
}

void sub_25510EEDC(_Unwind_Exception *a1)
{
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25510EEF0(uint64_t a1, char *__s, uint64_t a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445020;
  unint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v10 = v7 | 7;
    }
    uint64_t v11 = v10 + 1;
    uint64_t v9 = operator new(v10 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v11 | 0x8000000000000000;
    *(void *)(a1 + 48) = v9;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 71) = v7;
  uint64_t v9 = v6;
  if (v7) {
LABEL_8:
  }
    memmove(v9, __s, v8);
  *((unsigned char *)v9 + v8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v12 = *(const void **)a3;
  int64_t v13 = *(void *)(a3 + 8) - *(void *)a3;
  if (v13)
  {
    if (v13 < 0) {
      sub_2550EAEEC();
    }
    size_t v14 = (char *)operator new(v13);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 80) = v15;
  }
  *(_DWORD *)(a1 + 96) = 4;
  return a1;
}

void sub_25510F03C(_Unwind_Exception *a1)
{
  unint64_t v5 = *v3;
  if (*v3)
  {
    *(void *)(v1 + 80) = v5;
    operator delete(v5);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  sub_25510F7E0((void *)v1);
  _Unwind_Resume(a1);
}

void sub_25510F07C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551115B0(a1);
  j__free(v1);
}

uint64_t sub_25510F0A4()
{
  return 0;
}

void sub_25510F0B0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551116E8(a1);
  j__free(v1);
}

uint64_t sub_25510F0D8()
{
  return 11;
}

char *sub_25510F0E0(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_2550EAEEC();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 3) >= 0x555555555555555) {
    unint64_t v6 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL) {
      sub_2550EACF8();
    }
    size_t v7 = (char *)operator new(24 * v6);
  }
  else
  {
    size_t v7 = 0;
  }
  size_t v8 = &v7[24 * v3];
  uint64_t v9 = &v7[24 * v6];
  *(_OWORD *)size_t v8 = *(_OWORD *)a2;
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v10 = v8 + 24;
  uint64_t v11 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    if (!v12) {
      return v10;
    }
    goto LABEL_20;
  }
  do
  {
    long long v13 = *(_OWORD *)(v12 - 24);
    *((void *)v8 - 1) = *((void *)v12 - 1);
    *(_OWORD *)(v8 - 24) = v13;
    v8 -= 24;
    *((void *)v12 - 2) = 0;
    *((void *)v12 - 1) = 0;
    *((void *)v12 - 3) = 0;
    v12 -= 24;
  }
  while (v12 != v11);
  size_t v14 = (char *)*a1;
  uint64_t v12 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  if (v12 != v14)
  {
    do
    {
      if (*(v12 - 1) < 0) {
        operator delete(*((void **)v12 - 3));
      }
      v12 -= 24;
    }
    while (v12 != v14);
    uint64_t v12 = v14;
  }
  if (v12) {
LABEL_20:
  }
    operator delete(v12);
  return v10;
}

uint64_t sub_25510F24C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char ***a5)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  if (a2 < 1) {
    return 0;
  }
  uint64_t v9 = sub_25510F24C(*(void *)(a1 + 8));
  if (!v9)
  {
    if (*(unsigned char *)(a1 + 1)) {
      return 0;
    }
    uint64_t v11 = *(void *)(a1 + 24);
    uint64_t v12 = *(void *)(v11 + 64);
    if (v12)
    {
      long long v13 = (uint64_t *)(v11 + 8);
      while (1)
      {
        uint64_t v14 = *(int *)(v11 + 4);
        if (v14 != *(_DWORD *)(v12 + 4))
        {
LABEL_37:
          sub_25510F58C(a1, 1);
          sub_25510AFDC(a1 + 32, a4, "syntax is ambiguous");
          return 2;
        }
        if (((0x412100091221uLL >> v14) & 1) == 0)
        {
          int v15 = byte_25513ECF4[v14] + 1;
          uint64_t v16 = (uint64_t *)(v11 + 8);
          uint64_t v17 = (uint64_t *)(v12 + 8);
          do
          {
            uint64_t v18 = *v17;
            uint64_t v19 = *v16;
            if (*(void *)(v19 + 16) != *(void *)(v18 + 16)) {
              goto LABEL_37;
            }
            uint64_t v16 = (uint64_t *)(v19 + 8);
            uint64_t v17 = (uint64_t *)(v18 + 8);
            --v15;
          }
          while (v15 > 1);
          if (((0x412100091221uLL >> v14) & 1) == 0)
          {
            uint64_t v20 = *v13;
            uint64_t v21 = *(void *)(v12 + 8);
            if (*v13 != v21) {
              break;
            }
          }
        }
LABEL_8:
        uint64_t v12 = *(void *)(v12 + 64);
        *(void *)(v11 + 64) = v12;
        if (!v12) {
          goto LABEL_38;
        }
      }
      int v22 = byte_25513ECF4[v14];
      while (1)
      {
        if (*(unsigned char *)(v20 + 1))
        {
          *(unsigned char *)(v21 + 1) = 1;
          uint64_t v23 = *(void *)(v20 + 24);
        }
        else
        {
          if (*(unsigned char *)(v21 + 1))
          {
            *(unsigned char *)(v20 + 1) = 1;
            *(void *)(v20 + 24) = *(void *)(v21 + 24);
            if (v22 < 2) {
              goto LABEL_8;
            }
            goto LABEL_19;
          }
          unint64_t v24 = *(void *)(v20 + 24);
          unint64_t v25 = *(void *)(v21 + 24);
          if (v25) {
            BOOL v26 = v25 == v24;
          }
          else {
            BOOL v26 = 1;
          }
          if (!v26)
          {
            uint64_t v27 = (unint64_t *)(v20 + 24);
            while (v24)
            {
              if (v24 < v25)
              {
                *uint64_t v27 = v25;
                unint64_t v28 = *(void *)(v25 + 64);
                *(void *)(v25 + 64) = v24;
                unint64_t v24 = *v27;
                unint64_t v25 = v28;
              }
              if (v25)
              {
                uint64_t v27 = (unint64_t *)(v24 + 64);
                unint64_t v24 = *(void *)(v24 + 64);
                if (v25 != v24) {
                  continue;
                }
              }
              goto LABEL_36;
            }
            *uint64_t v27 = v25;
          }
LABEL_36:
          uint64_t v23 = *(void *)(v20 + 24);
        }
        *(void *)(v21 + 24) = v23;
        if (v22 < 2) {
          goto LABEL_8;
        }
LABEL_19:
        --v22;
        uint64_t v20 = *(void *)(v20 + 8);
        uint64_t v21 = *(void *)(v21 + 8);
        if (v20 == v21) {
          goto LABEL_8;
        }
      }
    }
LABEL_38:
    uint64_t v29 = (uint64_t *)(v11 + 8);
    uint64_t v30 = *(int *)(v11 + 4);
    int v31 = byte_25513ECF4[v30];
    uint64_t v32 = sub_25510F24C(*(void *)(v11 + 8));
    if (v32)
    {
      uint64_t v9 = v32;
      if (((0xBEDEFFF6EDDEuLL >> v30) & 1) == 0)
      {
LABEL_47:
        *(void *)(a1 + 24) = 0;
        return v9;
      }
      int v33 = v31 + 1;
      do
      {
        uint64_t v34 = *v29;
        sub_25510B2B0(*v29);
        uint64_t v29 = (uint64_t *)(v34 + 8);
        --v33;
      }
      while (v33 > 1);
    }
    else
    {
      uint64_t v35 = *v29;
      uint64_t v46 = *v29;
      if ((0x412100091221uLL >> v30))
      {
        long long v36 = *(_OWORD *)(v35 + 48);
        v45[2] = *(_OWORD *)(v35 + 32);
        v45[3] = v36;
      }
      int v37 = *(_DWORD *)(a3 + 228);
      uint64_t v38 = *(void *)(a3 + 232);
      long long v39 = *(_OWORD *)(a3 + 256);
      long long v43 = *(_OWORD *)(a3 + 240);
      long long v44 = v39;
      *(_DWORD *)(a3 + 228) = *(_DWORD *)(v11 + 16);
      *(void *)(a3 + 232) = *(void *)(v11 + 24);
      long long v40 = *(_OWORD *)(v11 + 48);
      *(_OWORD *)(a3 + 240) = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(a3 + 256) = v40;
      uint64_t v9 = sub_25510B5F8(*(_DWORD *)(v11 + 4), v31, (uint64_t)v45, a3, &v42, (_OWORD *)(a1 + 32), a4, a5);
      *(_DWORD *)(a3 + 228) = v37;
      *(void *)(a3 + 232) = v38;
      long long v41 = v44;
      *(_OWORD *)(a3 + 240) = v43;
      *(_OWORD *)(a3 + 256) = v41;
    }
    if (!v9)
    {
      *(unsigned char *)(a1 + 1) = 1;
      *(void *)(a1 + 24) = v42;
      return v9;
    }
    goto LABEL_47;
  }
  return v9;
}

__n128 sub_25510F58C(uint64_t a1, int a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (a2 >= 1)
  {
    sub_25510F58C(*(void *)(a1 + 8));
    if (!*(unsigned char *)(a1 + 1))
    {
      uint64_t v4 = *(void *)(a1 + 24);
      uint64_t v5 = *(int *)(v4 + 4);
      unsigned int v6 = byte_25513ECF4[v5];
      if ((0xBEDEFFF6EDDEuLL >> v5))
      {
        uint64_t v10 = *(void *)(v4 + 8);
        uint64_t v9 = (uint64_t *)(v4 + 8);
        sub_25510F58C(v10);
        int v11 = v6 + 1;
        uint64_t v12 = &v16[9 * v6 + 4];
        do
        {
          uint64_t v13 = *v9;
          long long v14 = *(_OWORD *)(*v9 + 48);
          *uint64_t v12 = *(_OWORD *)(*v9 + 32);
          v12[1] = v14;
          uint64_t v9 = (uint64_t *)(v13 + 8);
          --v11;
          uint64_t v12 = (_OWORD *)((char *)v12 - 72);
        }
        while (v11 > 1);
      }
      else
      {
        uint64_t v7 = *(void *)(v4 + 8);
        long long v8 = *(_OWORD *)(v7 + 48);
        long long v17 = *(_OWORD *)(v7 + 32);
        v18[0] = v8;
      }
      int v15 = (__n128 *)(a1 + 32);
      if ((0x412100091221uLL >> v5))
      {
        __n128 result = (__n128)v18[0];
        *(_OWORD *)(a1 + 48) = v18[0];
        __n128 *v15 = result;
      }
      else
      {
        __n128 *v15 = *(__n128 *)((char *)&v18[3] + 8);
        __n128 result = *(__n128 *)((char *)v18 + 72 * (int)v6);
        *(__n128 *)(a1 + 48) = result;
      }
    }
  }
  return result;
}

size_t sub_25510F6C8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v6 = 0;
  if (sub_2550EA2C4(a1, &v6))
  {
    size_t result = fwrite("Lex initialization failed.\n", 0x1BuLL, 1uLL, (FILE *)*MEMORY[0x263EF8348]);
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    sub_2550EA0A0(*MEMORY[0x263EF8350], v6);
    uint64_t v5 = 0;
    sub_25510B358(v4, v6, (uint64_t)&v5);
    if (!sub_25510B394((uint64_t)v4))
    {
      sub_2550EA36C(v6);
      *a2 = v5;
      operator new();
    }
    *a2 = 0;
    a2[1] = 0;
    return nullsub_28(v4);
  }
  return result;
}

void sub_25510F7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_25513D534(v2);
  }
  nullsub_28(va);
  _Unwind_Resume(a1);
}

uint64_t sub_25510F7E0(void *a1)
{
  *a1 = &unk_2704450C0;
  uint64_t v2 = (void *)a1[3];
  unint64_t v3 = (void *)a1[4];
  if (v2 == v3)
  {
    a1[4] = v2;
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  do
  {
    if (*v2) {
      (*(void (**)(void))(*(void *)*v2 + 8))(*v2);
    }
    ++v2;
  }
  while (v2 != v3);
  uint64_t v2 = (void *)a1[3];
  a1[4] = v2;
  if (v2) {
LABEL_3:
  }
    operator delete(v2);
LABEL_4:
  return nullsub_34(a1);
}

void sub_25510F8A8(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 32);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  int64_t v5 = v3 - v4;
  if (v3 != v4)
  {
    if (v5 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v7 = (char *)operator new(v3 - v4);
    *a2 = v7;
    a2[2] = &v7[8 * (v5 >> 3)];
    bzero(v7, v5);
    unint64_t v8 = 0;
    a2[1] = &v7[v5];
    do
    {
      *(void *)&v7[8 * v8] = *(void *)(*(void *)(a1 + 24) + 8 * v8);
      ++v8;
      uint64_t v7 = *a2;
    }
    while (v8 < (a2[1] - *a2) >> 3);
  }
}

void sub_25510F94C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25510F968(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v46 = (char **)(a1 + 24);
  *(void *)a1 = &unk_2704450C0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 40) = 0;
  uint64_t v9 = *(const void **)a4;
  uint64_t v8 = *(void *)(a4 + 8);
  int64_t v10 = v8 - *(void *)a4;
  if (v8 == *(void *)a4)
  {
    uint64_t v12 = 0;
  }
  else
  {
    if (v10 < 0) {
      sub_2550EAEEC();
    }
    int v11 = (char *)operator new(v8 - *(void *)a4);
    *(void *)(a1 + 24) = v11;
    *(void *)(a1 + 32) = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 40) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 32) = v12;
  }
  *(void *)a1 = &unk_2704450E8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v14 = *a3;
  uint64_t v13 = a3[1];
  int64_t v15 = (char *)v13 - (char *)*a3;
  if (v13 != *a3)
  {
    if (v15 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v16 = (char *)operator new((char *)v13 - (char *)*a3);
    *(void *)(a1 + 56) = v16;
    *(void *)(a1 + 64) = v16;
    long long v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 72) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 64) = v17;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  uint64_t v18 = *(const void **)a4;
  int64_t v19 = *(void *)(a4 + 8) - *(void *)a4;
  if (v19)
  {
    if (v19 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v20 = (char *)operator new(v19);
    *(void *)(a1 + 80) = v20;
    *(void *)(a1 + 88) = v20;
    uint64_t v21 = &v20[8 * (v19 >> 3)];
    *(void *)(a1 + 96) = v21;
    memcpy(v20, v18, v19);
    *(void *)(a1 + 88) = v21;
  }
  uint64_t v23 = *a3;
  int v22 = a3[1];
  while (v23 != v22)
  {
    uint64_t v25 = *v23;
    unint64_t v26 = *(void *)(a1 + 40);
    if ((unint64_t)v12 < v26)
    {
      *(void *)uint64_t v12 = v25;
      unint64_t v24 = v12 + 8;
      goto LABEL_13;
    }
    uint64_t v27 = *v46;
    uint64_t v28 = v12 - *v46;
    uint64_t v29 = v28 >> 3;
    unint64_t v30 = (v28 >> 3) + 1;
    if (v30 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v31 = v26 - (void)v27;
    if (v31 >> 2 > v30) {
      unint64_t v30 = v31 >> 2;
    }
    if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v30;
    }
    if (v32)
    {
      if (v32 >> 61) {
        sub_2550EACF8();
      }
      int v33 = operator new(8 * v32);
    }
    else
    {
      int v33 = 0;
    }
    uint64_t v34 = &v33[8 * v29];
    *uint64_t v34 = v25;
    unint64_t v24 = (char *)(v34 + 1);
    if (v12 != v27)
    {
      unint64_t v35 = v12 - v27 - 8;
      if (v35 < 0x168)
      {
        long long v36 = v12;
        goto LABEL_29;
      }
      unint64_t v38 = (v12 - 8 - v27) & 0xFFFFFFFFFFFFFFF8;
      if (&v33[v28 - 8 - v38] > &v33[v28 - 8])
      {
        long long v36 = v12;
        goto LABEL_29;
      }
      if (&v12[-v38 - 8] > v12 - 8)
      {
        long long v36 = v12;
        goto LABEL_29;
      }
      if ((unint64_t)(v12 - v33 - v28) < 0x20)
      {
        long long v36 = v12;
        goto LABEL_29;
      }
      uint64_t v39 = (v35 >> 3) + 1;
      uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      long long v36 = &v12[-v40];
      uint64_t v34 = (void *)((char *)v34 - v40);
      long long v41 = &v33[8 * v29 - 16];
      uint64_t v42 = v12 - 16;
      uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *long long v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      if (v39 != (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
        do
        {
LABEL_29:
          uint64_t v37 = *((void *)v36 - 1);
          v36 -= 8;
          *--uint64_t v34 = v37;
        }
        while (v36 != v27);
      }
      uint64_t v12 = *v46;
    }
    *(void *)(a1 + 24) = v34;
    *(void *)(a1 + 32) = v24;
    *(void *)(a1 + 40) = &v33[8 * v32];
    if (v12) {
      operator delete(v12);
    }
LABEL_13:
    *(void *)(a1 + 32) = v24;
    ++v23;
    uint64_t v12 = v24;
  }
  return a1;
}

void sub_25510FCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  uint64_t v13 = *a10;
  if (*a10)
  {
    v11[11] = v13;
    operator delete(v13);
  }
  long long v14 = *a11;
  if (*a11)
  {
    v11[8] = v14;
    operator delete(v14);
  }
  sub_25510F7E0(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_25510FD18(uint64_t a1, char *__s, uint64_t **a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445110;
  uint64_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v6 = operator new(v9 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v10 | 0x8000000000000000;
    *(void *)(a1 + 48) = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v7;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((unsigned char *)v6 + v8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v12 = *a3;
  int v11 = a3[1];
  int64_t v13 = (char *)v11 - (char *)*a3;
  if (v11 != *a3)
  {
    if (v13 < 0) {
      sub_2550EAEEC();
    }
    long long v14 = (char *)operator new((char *)v11 - (char *)*a3);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v14;
    int64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 80) = v15;
    uint64_t v16 = *a3;
    long long v17 = a3[1];
    if (*a3 != v17)
    {
      long long v41 = (char **)(a1 + 24);
      uint64_t v18 = *(void **)(a1 + 32);
      while (1)
      {
        uint64_t v20 = *v16;
        unint64_t v21 = *(void *)(a1 + 40);
        if ((unint64_t)v18 >= v21) {
          break;
        }
        void *v18 = v20;
        int64_t v19 = v18 + 1;
LABEL_14:
        *(void *)(a1 + 32) = v19;
        ++v16;
        uint64_t v18 = v19;
        if (v16 == v17) {
          return a1;
        }
      }
      int v22 = *v41;
      uint64_t v23 = (char *)v18 - *v41;
      uint64_t v24 = v23 >> 3;
      unint64_t v25 = (v23 >> 3) + 1;
      if (v25 >> 61) {
        sub_2550EAEEC();
      }
      uint64_t v26 = v21 - (void)v22;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 61) {
          sub_2550EACF8();
        }
        uint64_t v28 = operator new(8 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      uint64_t v29 = &v28[8 * v24];
      *uint64_t v29 = v20;
      int64_t v19 = v29 + 1;
      if (v18 == (void *)v22)
      {
LABEL_31:
        *(void *)(a1 + 24) = v29;
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = &v28[8 * v27];
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_14;
      }
      unint64_t v30 = (char *)v18 - v22 - 8;
      if (v30 >= 0x168)
      {
        unint64_t v33 = ((char *)(v18 - 1) - v22) & 0xFFFFFFFFFFFFFFF8;
        if (&v28[v23 - 8 - v33] > &v28[v23 - 8])
        {
          uint64_t v31 = (char *)v18;
        }
        else if ((void *)((char *)v18 - v33 - 8) > v18 - 1)
        {
          uint64_t v31 = (char *)v18;
        }
        else if ((unint64_t)((char *)v18 - v28 - v23) >= 0x20)
        {
          uint64_t v34 = (v30 >> 3) + 1;
          uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v31 = (char *)&v18[v35 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v29 = (void *)((char *)v29 - v35);
          long long v36 = &v28[8 * v24 - 16];
          uint64_t v37 = (long long *)(v18 - 2);
          uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *long long v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v31 = (char *)v18;
        }
      }
      else
      {
        uint64_t v31 = (char *)v18;
      }
      do
      {
        uint64_t v32 = *((void *)v31 - 1);
        v31 -= 8;
        *--uint64_t v29 = v32;
      }
      while (v31 != v22);
LABEL_30:
      uint64_t v18 = *v41;
      goto LABEL_31;
    }
  }
  return a1;
}

void sub_25511001C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  int64_t v13 = *a11;
  if (*a11)
  {
    *(void *)(v11 + 80) = v13;
    operator delete(v13);
  }
  if (*(char *)(v11 + 71) < 0) {
    operator delete(*a10);
  }
  sub_25510F7E0((void *)v11);
  _Unwind_Resume(a1);
}

uint64_t sub_25511006C(uint64_t a1, _WORD **a2, uint64_t **a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_270445138;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  int64_t v5 = *a3;
  uint64_t v4 = a3[1];
  int64_t v6 = (char *)v4 - (char *)*a3;
  if (v4 != *a3)
  {
    if (v6 < 0) {
      sub_2550EAEEC();
    }
    size_t v8 = (char *)operator new((char *)v4 - (char *)*a3);
    *(void *)(a1 + 48) = v8;
    *(void *)(a1 + 56) = v8;
    uint64_t v9 = &v8[8 * (v6 >> 3)];
    *(void *)(a1 + 64) = v9;
    memcpy(v8, v5, v6);
    *(void *)(a1 + 56) = v9;
    uint64_t v10 = *a3;
    uint64_t v11 = a3[1];
    if (*a3 != v11)
    {
      uint64_t v12 = 0;
      int64_t v13 = (char **)(a1 + 24);
      while (1)
      {
        uint64_t v15 = *v10;
        unint64_t v16 = *(void *)(a1 + 40);
        if ((unint64_t)v12 >= v16) {
          break;
        }
        *uint64_t v12 = v15;
        long long v14 = v12 + 1;
LABEL_6:
        *(void *)(a1 + 32) = v14;
        ++v10;
        uint64_t v12 = v14;
        if (v10 == v11) {
          goto LABEL_35;
        }
      }
      long long v17 = *v13;
      uint64_t v18 = (char *)v12 - *v13;
      unint64_t v19 = (v18 >> 3) + 1;
      if (v19 >> 61) {
        sub_2550EAEEC();
      }
      uint64_t v20 = v16 - (void)v17;
      if (v20 >> 2 > v19) {
        unint64_t v19 = v20 >> 2;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v21 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        if (v21 >> 61) {
          sub_2550EACF8();
        }
        int v22 = operator new(8 * v21);
      }
      else
      {
        int v22 = 0;
      }
      uint64_t v23 = &v22[8 * (v18 >> 3)];
      *uint64_t v23 = v15;
      long long v14 = v23 + 1;
      if (v12 == (void *)v17)
      {
LABEL_23:
        *(void *)(a1 + 24) = v23;
        *(void *)(a1 + 32) = v14;
        *(void *)(a1 + 40) = &v22[8 * v21];
        if (v12) {
          operator delete(v12);
        }
        goto LABEL_6;
      }
      unint64_t v24 = (char *)v12 - v17 - 8;
      if (v24 >= 0x168)
      {
        unint64_t v27 = ((char *)(v12 - 1) - v17) & 0xFFFFFFFFFFFFFFF8;
        if (&v22[v18 - 8 - v27] > &v22[v18 - 8])
        {
          unint64_t v25 = (char *)v12;
        }
        else if ((void *)((char *)v12 - v27 - 8) > v12 - 1)
        {
          unint64_t v25 = (char *)v12;
        }
        else if ((unint64_t)((char *)v12 - v22 - v18) >= 0x20)
        {
          uint64_t v28 = (v24 >> 3) + 1;
          uint64_t v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
          unint64_t v25 = (char *)&v12[v29 / 0xFFFFFFFFFFFFFFF8];
          uint64_t v23 = (void *)((char *)v23 - v29);
          unint64_t v30 = &v22[v18 - 16];
          uint64_t v31 = (long long *)(v12 - 2);
          uint64_t v32 = v28 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v33 = *v31;
            *(v30 - 1) = *(v31 - 1);
            *unint64_t v30 = v33;
            v30 -= 2;
            v31 -= 2;
            v32 -= 4;
          }
          while (v32);
          if (v28 == (v28 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_22;
          }
        }
        else
        {
          unint64_t v25 = (char *)v12;
        }
      }
      else
      {
        unint64_t v25 = (char *)v12;
      }
      do
      {
        uint64_t v26 = *((void *)v25 - 1);
        v25 -= 8;
        *--uint64_t v23 = v26;
      }
      while (v25 != v17);
LABEL_22:
      uint64_t v12 = *v13;
      goto LABEL_23;
    }
  }
LABEL_35:
  int v34 = *((char *)a2 + 23);
  if (v34 >= 0) {
    size_t v35 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v35 = (size_t)a2[1];
  }
  switch(v35)
  {
    case 6uLL:
      if (v34 >= 0) {
        long long v36 = a2;
      }
      else {
        long long v36 = *a2;
      }
      if (!memcmp(v36, "filter", v35))
      {
        int v38 = 5;
      }
      else if (!memcmp(v36, "kernel", v35))
      {
        int v38 = 10;
      }
      else
      {
        if (*(_DWORD *)v36 != 1936614772 || v36[2] != 29295) {
          goto LABEL_70;
        }
        int v38 = 15;
      }
      break;
    case 7uLL:
      if (v34 >= 0) {
        uint64_t v40 = a2;
      }
      else {
        uint64_t v40 = *a2;
      }
      if (memcmp(v40, "library", v35)) {
        goto LABEL_70;
      }
      int v38 = 12;
      break;
    case 8uLL:
      if (v34 >= 0) {
        long long v39 = a2;
      }
      else {
        long long v39 = *a2;
      }
      if (memcmp(v39, "iterator", v35)) {
        goto LABEL_70;
      }
      int v38 = 9;
      break;
    case 0x12uLL:
      if (v34 >= 0) {
        long long v41 = a2;
      }
      else {
        long long v41 = *a2;
      }
      uint64_t v42 = *(void *)v41;
      uint64_t v43 = *((void *)v41 + 1);
      int v44 = (unsigned __int16)v41[8];
      if (v42 != 0x6172672D736E6E62 || v43 != 0x65746E6F632D6870 || v44 != 29816) {
        goto LABEL_70;
      }
      int v38 = 2;
      break;
    default:
LABEL_70:
      int v38 = 4;
      break;
  }
  *(_DWORD *)(a1 + 72) = v38;
  return a1;
}

void sub_25511043C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v11 = *a9;
  if (*a9)
  {
    v9[7] = v11;
    operator delete(v11);
  }
  sub_25510F7E0(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_2551104A4(uint64_t a1, char *__s)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445160;
  uint64_t v4 = (void *)(a1 + 48);
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v4 = operator new(v7 + 1);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = v8 | 0x8000000000000000;
    *(void *)(a1 + 48) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  memmove(v4, __s, v6);
LABEL_9:
  *((unsigned char *)v4 + v6) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void sub_255110598(_Unwind_Exception *a1)
{
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_2551105AC(uint64_t a1, char *__s, uint64_t **a3, uint64_t **a4)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445160;
  uint64_t v8 = (void *)(a1 + 48);
  size_t v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v10 = v9;
  if (v9 >= 0x17)
  {
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    uint64_t v11 = operator new(v12 + 1);
    *(void *)(a1 + 56) = v10;
    *(void *)(a1 + 64) = v13 | 0x8000000000000000;
    *(void *)(a1 + 48) = v11;
    goto LABEL_8;
  }
  *(unsigned char *)(a1 + 71) = v9;
  uint64_t v11 = v8;
  if (v9) {
LABEL_8:
  }
    memmove(v11, __s, v10);
  *((unsigned char *)v11 + v10) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v15 = *a3;
  long long v14 = a3[1];
  int64_t v16 = (char *)v14 - (char *)*a3;
  if (v14 != *a3)
  {
    if (v16 < 0) {
      sub_2550EAEEC();
    }
    long long v17 = (char *)operator new(v16);
    *(void *)(a1 + 72) = v17;
    *(void *)(a1 + 80) = v17;
    uint64_t v18 = &v17[8 * (v16 >> 3)];
    *(void *)(a1 + 88) = v18;
    memcpy(v17, v15, v16);
    *(void *)(a1 + 80) = v18;
  }
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = 0;
  uint64_t v20 = *a4;
  unint64_t v19 = a4[1];
  int64_t v21 = (char *)v19 - (char *)*a4;
  if (v19 != *a4)
  {
    if (v21 < 0) {
      sub_2550EAEEC();
    }
    int v22 = (char *)operator new(v21);
    *(void *)(a1 + 96) = v22;
    *(void *)(a1 + 104) = v22;
    uint64_t v23 = &v22[8 * (v21 >> 3)];
    *(void *)(a1 + 112) = v23;
    memcpy(v22, v20, v21);
    *(void *)(a1 + 104) = v23;
  }
  uint64_t v73 = a4;
  unint64_t v24 = *a3;
  unint64_t v25 = a3[1];
  if (*a3 != v25)
  {
    uint64_t v74 = (char **)(a1 + 24);
    uint64_t v26 = *(void **)(a1 + 32);
    while (1)
    {
      uint64_t v28 = *v24;
      unint64_t v29 = *(void *)(a1 + 40);
      if ((unint64_t)v26 >= v29) {
        break;
      }
      *uint64_t v26 = v28;
      unint64_t v27 = v26 + 1;
LABEL_18:
      *(void *)(a1 + 32) = v27;
      ++v24;
      uint64_t v26 = v27;
      if (v24 == v25) {
        goto LABEL_47;
      }
    }
    unint64_t v30 = *v74;
    uint64_t v31 = (char *)v26 - *v74;
    uint64_t v32 = v31 >> 3;
    unint64_t v33 = (v31 >> 3) + 1;
    if (v33 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v34 = v29 - (void)v30;
    if (v34 >> 2 > v33) {
      unint64_t v33 = v34 >> 2;
    }
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v35 = v33;
    }
    if (v35)
    {
      if (v35 >> 61) {
        sub_2550EACF8();
      }
      long long v36 = operator new(8 * v35);
    }
    else
    {
      long long v36 = 0;
    }
    uint64_t v37 = &v36[8 * v32];
    void *v37 = v28;
    unint64_t v27 = v37 + 1;
    if (v26 == (void *)v30)
    {
LABEL_35:
      *(void *)(a1 + 24) = v37;
      *(void *)(a1 + 32) = v27;
      *(void *)(a1 + 40) = &v36[8 * v35];
      if (v26) {
        operator delete(v26);
      }
      goto LABEL_18;
    }
    unint64_t v38 = (char *)v26 - v30 - 8;
    if (v38 >= 0x168)
    {
      unint64_t v41 = ((char *)(v26 - 1) - v30) & 0xFFFFFFFFFFFFFFF8;
      if (&v36[v31 - 8 - v41] > &v36[v31 - 8])
      {
        long long v39 = (char *)v26;
      }
      else if ((void *)((char *)v26 - v41 - 8) > v26 - 1)
      {
        long long v39 = (char *)v26;
      }
      else if ((unint64_t)((char *)v26 - v36 - v31) >= 0x20)
      {
        uint64_t v42 = (v38 >> 3) + 1;
        uint64_t v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
        long long v39 = (char *)&v26[v43 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v37 = (void *)((char *)v37 - v43);
        int v44 = &v36[8 * v32 - 16];
        uint64_t v45 = (long long *)(v26 - 2);
        uint64_t v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v47 = *v45;
          *(v44 - 1) = *(v45 - 1);
          *int v44 = v47;
          v44 -= 2;
          v45 -= 2;
          v46 -= 4;
        }
        while (v46);
        if (v42 == (v42 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
      }
      else
      {
        long long v39 = (char *)v26;
      }
    }
    else
    {
      long long v39 = (char *)v26;
    }
    do
    {
      uint64_t v40 = *((void *)v39 - 1);
      v39 -= 8;
      *--uint64_t v37 = v40;
    }
    while (v39 != v30);
LABEL_34:
    uint64_t v26 = *v74;
    goto LABEL_35;
  }
LABEL_47:
  uint64_t v48 = *v73;
  uint64_t v49 = v73[1];
  if (*v73 != v49)
  {
    uint64_t v75 = (char **)(a1 + 24);
    long long v50 = *(void **)(a1 + 32);
    while (1)
    {
      uint64_t v52 = *v48;
      unint64_t v53 = *(void *)(a1 + 40);
      if ((unint64_t)v50 >= v53) {
        break;
      }
      *long long v50 = v52;
      uint64_t v51 = v50 + 1;
LABEL_50:
      *(void *)(a1 + 32) = v51;
      ++v48;
      long long v50 = v51;
      if (v48 == v49) {
        return a1;
      }
    }
    unint64_t v54 = *v75;
    uint64_t v55 = (char *)v50 - *v75;
    uint64_t v56 = v55 >> 3;
    unint64_t v57 = (v55 >> 3) + 1;
    if (v57 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v58 = v53 - (void)v54;
    if (v58 >> 2 > v57) {
      unint64_t v57 = v58 >> 2;
    }
    if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v59 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v59 = v57;
    }
    if (v59)
    {
      if (v59 >> 61) {
        sub_2550EACF8();
      }
      uint64_t v60 = operator new(8 * v59);
    }
    else
    {
      uint64_t v60 = 0;
    }
    uint64_t v61 = &v60[8 * v56];
    *uint64_t v61 = v52;
    uint64_t v51 = v61 + 1;
    if (v50 == (void *)v54)
    {
LABEL_67:
      *(void *)(a1 + 24) = v61;
      *(void *)(a1 + 32) = v51;
      *(void *)(a1 + 40) = &v60[8 * v59];
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_50;
    }
    unint64_t v62 = (char *)v50 - v54 - 8;
    if (v62 >= 0x168)
    {
      unint64_t v65 = ((char *)(v50 - 1) - v54) & 0xFFFFFFFFFFFFFFF8;
      if (&v60[v55 - 8 - v65] > &v60[v55 - 8])
      {
        uint64_t v63 = (char *)v50;
      }
      else if ((void *)((char *)v50 - v65 - 8) > v50 - 1)
      {
        uint64_t v63 = (char *)v50;
      }
      else if ((unint64_t)((char *)v50 - v60 - v55) >= 0x20)
      {
        uint64_t v66 = (v62 >> 3) + 1;
        uint64_t v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
        uint64_t v63 = (char *)&v50[v67 / 0xFFFFFFFFFFFFFFF8];
        uint64_t v61 = (void *)((char *)v61 - v67);
        uint64_t v68 = &v60[8 * v56 - 16];
        uint64_t v69 = (long long *)(v50 - 2);
        uint64_t v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v71 = *v69;
          *(v68 - 1) = *(v69 - 1);
          *uint64_t v68 = v71;
          v68 -= 2;
          v69 -= 2;
          v70 -= 4;
        }
        while (v70);
        if (v66 == (v66 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v63 = (char *)v50;
      }
    }
    else
    {
      uint64_t v63 = (char *)v50;
    }
    do
    {
      uint64_t v64 = *((void *)v63 - 1);
      v63 -= 8;
      *--uint64_t v61 = v64;
    }
    while (v63 != v54);
LABEL_66:
    long long v50 = *v75;
    goto LABEL_67;
  }
  return a1;
}

void sub_255110AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, void **a12)
{
  uint64_t v15 = *v13;
  if (*v13)
  {
    *(void *)(v12 + 104) = v15;
    operator delete(v15);
  }
  int64_t v16 = *a12;
  if (*a12)
  {
    *(void *)(v12 + 80) = v16;
    operator delete(v16);
  }
  if (*(char *)(v12 + 71) < 0) {
    operator delete(*a10);
  }
  sub_25510F7E0((void *)v12);
  _Unwind_Resume(a1);
}

uint64_t sub_255110B48(uint64_t a1, char *__s)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445188;
  uint64_t v4 = (void *)(a1 + 48);
  size_t v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v6 = v5;
  if (v5 >= 0x17)
  {
    uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17) {
      uint64_t v7 = v5 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v4 = operator new(v7 + 1);
    *(void *)(a1 + 56) = v6;
    *(void *)(a1 + 64) = v8 | 0x8000000000000000;
    *(void *)(a1 + 48) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v5;
    if (!v5) {
      goto LABEL_9;
    }
  }
  memmove(v4, __s, v6);
LABEL_9:
  *((unsigned char *)v4 + v6) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_255110C34(_Unwind_Exception *a1)
{
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255110C48(uint64_t a1, char *__s, uint64_t **a3)
{
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_270445188;
  size_t v6 = (void *)(a1 + 48);
  size_t v7 = strlen(__s);
  if (v7 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v8 = v7;
  if (v7 >= 0x17)
  {
    uint64_t v9 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17) {
      uint64_t v9 = v7 | 7;
    }
    uint64_t v10 = v9 + 1;
    size_t v6 = operator new(v9 + 1);
    *(void *)(a1 + 56) = v8;
    *(void *)(a1 + 64) = v10 | 0x8000000000000000;
    *(void *)(a1 + 48) = v6;
  }
  else
  {
    *(unsigned char *)(a1 + 71) = v7;
    if (!v7) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v8);
LABEL_9:
  *((unsigned char *)v6 + v8) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v12 = *a3;
  uint64_t v11 = a3[1];
  int64_t v13 = (char *)v11 - (char *)*a3;
  if (v11 != *a3)
  {
    if (v13 < 0) {
      sub_2550EAEEC();
    }
    long long v14 = (char *)operator new((char *)v11 - (char *)*a3);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v14;
    uint64_t v15 = &v14[8 * (v13 >> 3)];
    *(void *)(a1 + 88) = v15;
    memcpy(v14, v12, v13);
    *(void *)(a1 + 80) = v15;
    int64_t v16 = *a3;
    long long v17 = a3[1];
    if (*a3 != v17)
    {
      unint64_t v41 = (char **)(a1 + 24);
      uint64_t v18 = *(void **)(a1 + 32);
      while (1)
      {
        uint64_t v20 = *v16;
        unint64_t v21 = *(void *)(a1 + 40);
        if ((unint64_t)v18 >= v21) {
          break;
        }
        void *v18 = v20;
        unint64_t v19 = v18 + 1;
LABEL_14:
        *(void *)(a1 + 32) = v19;
        ++v16;
        uint64_t v18 = v19;
        if (v16 == v17) {
          return a1;
        }
      }
      int v22 = *v41;
      uint64_t v23 = (char *)v18 - *v41;
      uint64_t v24 = v23 >> 3;
      unint64_t v25 = (v23 >> 3) + 1;
      if (v25 >> 61) {
        sub_2550EAEEC();
      }
      uint64_t v26 = v21 - (void)v22;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        if (v27 >> 61) {
          sub_2550EACF8();
        }
        uint64_t v28 = operator new(8 * v27);
      }
      else
      {
        uint64_t v28 = 0;
      }
      unint64_t v29 = &v28[8 * v24];
      *unint64_t v29 = v20;
      unint64_t v19 = v29 + 1;
      if (v18 == (void *)v22)
      {
LABEL_31:
        *(void *)(a1 + 24) = v29;
        *(void *)(a1 + 32) = v19;
        *(void *)(a1 + 40) = &v28[8 * v27];
        if (v18) {
          operator delete(v18);
        }
        goto LABEL_14;
      }
      unint64_t v30 = (char *)v18 - v22 - 8;
      if (v30 >= 0x168)
      {
        unint64_t v33 = ((char *)(v18 - 1) - v22) & 0xFFFFFFFFFFFFFFF8;
        if (&v28[v23 - 8 - v33] > &v28[v23 - 8])
        {
          uint64_t v31 = (char *)v18;
        }
        else if ((void *)((char *)v18 - v33 - 8) > v18 - 1)
        {
          uint64_t v31 = (char *)v18;
        }
        else if ((unint64_t)((char *)v18 - v28 - v23) >= 0x20)
        {
          uint64_t v34 = (v30 >> 3) + 1;
          uint64_t v35 = 8 * (v34 & 0x3FFFFFFFFFFFFFFCLL);
          uint64_t v31 = (char *)&v18[v35 / 0xFFFFFFFFFFFFFFF8];
          unint64_t v29 = (void *)((char *)v29 - v35);
          long long v36 = &v28[8 * v24 - 16];
          uint64_t v37 = (long long *)(v18 - 2);
          uint64_t v38 = v34 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v39 = *v37;
            *(v36 - 1) = *(v37 - 1);
            *long long v36 = v39;
            v36 -= 2;
            v37 -= 2;
            v38 -= 4;
          }
          while (v38);
          if (v34 == (v34 & 0x3FFFFFFFFFFFFFFCLL)) {
            goto LABEL_30;
          }
        }
        else
        {
          uint64_t v31 = (char *)v18;
        }
      }
      else
      {
        uint64_t v31 = (char *)v18;
      }
      do
      {
        uint64_t v32 = *((void *)v31 - 1);
        v31 -= 8;
        *--unint64_t v29 = v32;
      }
      while (v31 != v22);
LABEL_30:
      uint64_t v18 = *v41;
      goto LABEL_31;
    }
  }
  return a1;
}

void sub_255110F4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, void **a11)
{
  int64_t v13 = *a11;
  if (*a11)
  {
    *(void *)(v11 + 80) = v13;
    operator delete(v13);
  }
  if (*(char *)(v11 + 71) < 0) {
    operator delete(*a10);
  }
  sub_25510F7E0((void *)v11);
  _Unwind_Resume(a1);
}

uint64_t sub_255110F9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = &unk_2704451B0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v9 = *(void **)a3;
  uint64_t v8 = *(void *)(a3 + 8);
  int64_t v10 = v8 - *(void *)a3;
  if (v8 != *(void *)a3)
  {
    if (v10 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v11 = (char *)operator new(v8 - *(void *)a3);
    *(void *)(a1 + 56) = v11;
    *(void *)(a1 + 64) = v11;
    uint64_t v12 = &v11[8 * (v10 >> 3)];
    *(void *)(a1 + 72) = v12;
    memcpy(v11, v9, v10);
    *(void *)(a1 + 64) = v12;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  long long v14 = *(void **)a4;
  uint64_t v13 = *(void *)(a4 + 8);
  int64_t v15 = v13 - *(void *)a4;
  if (v13 != *(void *)a4)
  {
    if (v15 < 0) {
      sub_2550EAEEC();
    }
    int64_t v16 = (char *)operator new(v13 - *(void *)a4);
    *(void *)(a1 + 80) = v16;
    *(void *)(a1 + 88) = v16;
    long long v17 = &v16[8 * (v15 >> 3)];
    *(void *)(a1 + 96) = v17;
    memcpy(v16, v14, v15);
    *(void *)(a1 + 88) = v17;
  }
  uint64_t v18 = operator new(8uLL);
  void *v18 = a2;
  *(void *)(a1 + 32) = v18 + 1;
  *(void *)(a1 + 40) = v18 + 1;
  *(void *)(a1 + 24) = v18;
  uint64_t v20 = *(void **)a3;
  unint64_t v19 = *(void **)(a3 + 8);
  for (uint64_t i = (void **)(a1 + 24); v20 != v19; ++v20)
    sub_255111978(&i, v20);
  int v22 = *(void **)a4;
  unint64_t v21 = *(void **)(a4 + 8);
  for (uint64_t i = (void **)(a1 + 24); v22 != v21; ++v22)
    sub_255111978(&i, v22);
  return a1;
}

void sub_25511112C(_Unwind_Exception *a1)
{
  size_t v5 = *v3;
  if (*v3)
  {
    v1[11] = v5;
    operator delete(v5);
  }
  size_t v6 = *v2;
  if (*v2)
  {
    v1[8] = v6;
    operator delete(v6);
  }
  sub_25510F7E0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255111178(void *a1)
{
  *a1 = &unk_2704450E8;
  uint64_t v2 = (void *)a1[7];
  a1[8] = v2;
  uint64_t v3 = (void *)a1[10];
  a1[11] = v3;
  if (v3)
  {
    operator delete(v3);
    uint64_t v2 = (void *)a1[7];
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_2704450C0;
  uint64_t v4 = (void *)a1[3];
  size_t v5 = (void *)a1[4];
  if (v4 == v5)
  {
    a1[4] = v4;
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  uint64_t v4 = (void *)a1[3];
  a1[4] = v4;
  if (v4) {
LABEL_7:
  }
    operator delete(v4);
LABEL_8:
  return nullsub_34(a1);
}

void sub_255111284(void *a1)
{
  uint64_t v1 = (void *)sub_255111178(a1);
  j__free(v1);
}

uint64_t sub_2551112AC(uint64_t a1)
{
  *(void *)a1 = &unk_270445110;
  uint64_t v2 = *(void **)(a1 + 72);
  *(void *)(a1 + 80) = v2;
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = &unk_2704450C0;
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 == v4)
  {
    *(void *)(a1 + 32) = v3;
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  do
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v3;
  if (v3) {
LABEL_7:
  }
    operator delete(v3);
LABEL_8:
  return nullsub_34(a1);
}

void sub_2551113AC(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551112AC(a1);
  j__free(v1);
}

uint64_t sub_2551113D4(void *a1)
{
  *a1 = &unk_270445138;
  uint64_t v2 = (void *)a1[6];
  a1[7] = v2;
  if (v2) {
    operator delete(v2);
  }
  *a1 = &unk_2704450C0;
  uint64_t v3 = (void *)a1[3];
  uint64_t v4 = (void *)a1[4];
  if (v3 == v4)
  {
    a1[4] = v3;
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  do
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = (void *)a1[3];
  a1[4] = v3;
  if (v3) {
LABEL_5:
  }
    operator delete(v3);
LABEL_6:
  return nullsub_34(a1);
}

void sub_2551114C0(void *a1)
{
  *a1 = &unk_270445138;
  uint64_t v2 = (void *)a1[6];
  a1[7] = v2;
  if (v2) {
    operator delete(v2);
  }
  *a1 = &unk_2704450C0;
  uint64_t v3 = (void *)a1[3];
  uint64_t v4 = (void *)a1[4];
  if (v3 == v4)
  {
    a1[4] = v3;
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  do
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = (void *)a1[3];
  a1[4] = v3;
  if (v3) {
LABEL_5:
  }
    operator delete(v3);
LABEL_6:
  size_t v5 = (void *)nullsub_34(a1);
  j__free(v5);
}

uint64_t sub_2551115B0(uint64_t a1)
{
  *(void *)a1 = &unk_270445160;
  uint64_t v2 = *(void **)(a1 + 96);
  *(void *)(a1 + 104) = v2;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 72);
  if (v3)
  {
    *(void *)(a1 + 80) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = &unk_2704450C0;
  uint64_t v4 = *(void **)(a1 + 24);
  size_t v5 = *(void **)(a1 + 32);
  if (v4 == v5)
  {
    *(void *)(a1 + 32) = v4;
    if (!v4) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  uint64_t v4 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v4;
  if (v4) {
LABEL_9:
  }
    operator delete(v4);
LABEL_10:
  return nullsub_34(a1);
}

void sub_2551116C0(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551115B0(a1);
  j__free(v1);
}

uint64_t sub_2551116E8(uint64_t a1)
{
  *(void *)a1 = &unk_270445188;
  uint64_t v2 = *(void **)(a1 + 72);
  *(void *)(a1 + 80) = v2;
  if (v2) {
    operator delete(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  *(void *)a1 = &unk_2704450C0;
  uint64_t v3 = *(void **)(a1 + 24);
  uint64_t v4 = *(void **)(a1 + 32);
  if (v3 == v4)
  {
    *(void *)(a1 + 32) = v3;
    if (!v3) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  do
  {
    if (*v3) {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
    }
    ++v3;
  }
  while (v3 != v4);
  uint64_t v3 = *(void **)(a1 + 24);
  *(void *)(a1 + 32) = v3;
  if (v3) {
LABEL_7:
  }
    operator delete(v3);
LABEL_8:
  return nullsub_34(a1);
}

void sub_2551117E8(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551116E8(a1);
  j__free(v1);
}

uint64_t sub_255111810(void *a1)
{
  *a1 = &unk_2704451B0;
  a1[6] = 0;
  uint64_t v2 = (void *)a1[7];
  a1[8] = v2;
  uint64_t v3 = (void *)a1[10];
  a1[11] = v3;
  if (v3)
  {
    operator delete(v3);
    uint64_t v2 = (void *)a1[7];
  }
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  *a1 = &unk_2704450C0;
  uint64_t v4 = (void *)a1[3];
  size_t v5 = (void *)a1[4];
  if (v4 == v5)
  {
    a1[4] = v4;
    if (!v4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  do
  {
    if (*v4) {
      (*(void (**)(void))(*(void *)*v4 + 8))(*v4);
    }
    ++v4;
  }
  while (v4 != v5);
  uint64_t v4 = (void *)a1[3];
  a1[4] = v4;
  if (v4) {
LABEL_7:
  }
    operator delete(v4);
LABEL_8:
  return nullsub_34(a1);
}

void sub_255111920(void *a1)
{
  uint64_t v1 = (void *)sub_255111810(a1);
  j__free(v1);
}

uint64_t sub_255111948()
{
  return 7;
}

uint64_t sub_255111950()
{
  return 14;
}

uint64_t sub_255111958(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_255111960()
{
  return 6;
}

uint64_t sub_255111968()
{
  return 8;
}

uint64_t sub_255111970()
{
  return 13;
}

void ***sub_255111978(void ***a1, void *a2)
{
  uint64_t v4 = *a1;
  size_t v6 = (char *)(*a1)[1];
  unint64_t v5 = (unint64_t)(*a1)[2];
  size_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = (char *)*v4;
    uint64_t v10 = v6 - (unsigned char *)*v4;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + 1;
    if (v12 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_2550EACF8();
      }
      int64_t v15 = operator new(8 * v14);
    }
    else
    {
      int64_t v15 = 0;
    }
    int64_t v16 = &v15[8 * v11];
    *int64_t v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 8;
      if (v17 < 0x58) {
        goto LABEL_28;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_28;
      }
      uint64_t v18 = (v17 >> 3) + 1;
      uint64_t v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
      size_t v7 = &v6[-v19];
      int64_t v16 = (void *)((char *)v16 - v19);
      uint64_t v20 = &v15[8 * v11 - 16];
      unint64_t v21 = (long long *)(v6 - 16);
      uint64_t v22 = v18 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v23 = *v21;
        *(v20 - 1) = *(v21 - 1);
        *uint64_t v20 = v23;
        v20 -= 2;
        v21 -= 2;
        v22 -= 4;
      }
      while (v22);
      if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_28:
        do
        {
          uint64_t v24 = *((void *)v7 - 1);
          v7 -= 8;
          *--int64_t v16 = v24;
        }
        while (v7 != v9);
      }
      size_t v7 = (char *)*v4;
    }
    *uint64_t v4 = v16;
    v4[1] = v8;
    v4[2] = &v15[8 * v14];
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *(void *)size_t v6 = *a2;
    uint64_t v8 = v6 + 8;
  }
  v4[1] = v8;
  return a1;
}

void sub_255111AF4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_255111B2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_255111B60(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v2[0] = &unk_270445210;
  v2[1] = sub_255111C78;
  uint64_t v3 = v2;
  sub_255112BE4(a1, 0, 0, 3, 0, 0, v2);
  uint64_t result = (uint64_t)v3;
  if (v3 == v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void sub_255111C64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_255111C78(uint64_t **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t **a5)
{
  uint64_t v8 = a5[1] - *a5;
  if (v8 != 1)
  {
    if (!v8)
    {
      sub_25512AAC4((void *)**a1, (uint64_t)&v42[32]);
      uint64_t v9 = (unsigned __int8 *)a3[10];
      uint64_t v10 = (unsigned __int8 *)a3[11];
      if (v9 != v10)
      {
        uint64_t v11 = v42[55];
        uint64_t v13 = *(const void **)&v42[32];
        size_t v12 = *(void *)&v42[40];
        if (v42[55] >= 0) {
          uint64_t v14 = v42[55];
        }
        else {
          uint64_t v14 = *(void *)&v42[40];
        }
        do
        {
          uint64_t v19 = v9[23];
          int v20 = (char)v19;
          if ((v19 & 0x80u) != 0) {
            uint64_t v19 = *((void *)v9 + 1);
          }
          if (v14 == v19)
          {
            if (v20 >= 0) {
              unint64_t v21 = v9;
            }
            else {
              unint64_t v21 = *(unsigned __int8 **)v9;
            }
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(v13, v21, v12)) {
                goto LABEL_22;
              }
            }
            else
            {
              if (!v11) {
                goto LABEL_22;
              }
              uint64_t v22 = &v42[32];
              uint64_t v23 = v11;
              while (*v22 == *v21)
              {
                ++v22;
                ++v21;
                if (!--v23) {
                  goto LABEL_22;
                }
              }
            }
          }
          v9 += 80;
        }
        while (v9 != v10);
        uint64_t v9 = v10;
      }
LABEL_22:
      uint64_t v24 = *((void *)v9 + 5);
      uint64_t v25 = sub_25512AA60(**a1);
      (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, v25 + v24);
      if ((v42[55] & 0x80000000) != 0)
      {
        uint64_t v26 = *(void **)&v42[32];
LABEL_56:
        operator delete(v26);
        return a2 + 1;
      }
    }
    return a2 + 1;
  }
  uint64_t v16 = (*(uint64_t (**)(void))(*(void *)**a5 + 216))();
  if (v16)
  {
    uint64_t v17 = v16;
    uint64_t v18 = sub_25512AA60(**a1);
    (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, v18 + v17);
    return a2 + 1;
  }
  unint64_t v27 = (void *)a3[4];
  uint64_t v28 = sub_255129418(**a5);
  int v29 = *(char *)(v28 + 23);
  if (v29 >= 0) {
    size_t v30 = *(unsigned __int8 *)(v28 + 23);
  }
  else {
    size_t v30 = *(void *)(v28 + 8);
  }
  unint64_t v31 = v30 + 75;
  if (v30 + 75 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  uint64_t v32 = (const void **)v28;
  if (v31 <= 0x16)
  {
    unint64_t v33 = v43;
    qmemcpy(v42, "All tensors must be allocated before initialization (user-allocated tensor ", sizeof(v42));
LABEL_33:
    if (v29 >= 0) {
      uint64_t v35 = v32;
    }
    else {
      uint64_t v35 = *v32;
    }
    memmove(v33, v35, v30);
    goto LABEL_37;
  }
  uint64_t v34 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v31 | 7) != 0x17) {
    uint64_t v34 = v31 | 7;
  }
  *(void *)&v42[8] = v30 + 75;
  *(void *)&v42[16] = (v34 + 1) | 0x8000000000000000;
  *(void *)uint64_t v42 = operator new(v34 + 1);
  unint64_t v33 = (unsigned char *)(*(void *)v42 + 75);
  qmemcpy(*(void **)v42, "All tensors must be allocated before initialization (user-allocated tensor ", 75);
  if (v30) {
    goto LABEL_33;
  }
LABEL_37:
  v33[v30] = 0;
  uint64_t v36 = *(void *)&v42[16];
  if (v42[23] >= 0) {
    std::string::size_type v37 = 22;
  }
  else {
    std::string::size_type v37 = (*(void *)&v42[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (v42[23] >= 0) {
    std::string::size_type v38 = v42[23];
  }
  else {
    std::string::size_type v38 = *(void *)&v42[8];
  }
  if (v37 - v38 >= 0x19)
  {
    long long v39 = v42;
    if (v42[23] < 0) {
      long long v39 = *(unsigned char **)v42;
    }
    qmemcpy(&v39[v38], " had no address assigned)", 25);
    std::string::size_type v40 = v38 + 25;
    if (v36 < 0) {
      *(void *)&v42[8] = v38 + 25;
    }
    else {
      v42[23] = v40 & 0x7F;
    }
    v39[v40] = 0;
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)v42, v37, v38 - v37 + 25, v38, v38, 0, 0x19uLL, " had no address assigned)");
  }
  *(_OWORD *)&v42[32] = *(_OWORD *)v42;
  *(void *)&v42[48] = *(void *)&v42[16];
  memset(v42, 0, 24);
  sub_25513A900(v27, 1, (uint64_t)&v42[32]);
  if ((v42[55] & 0x80000000) != 0) {
    operator delete(*(void **)&v42[32]);
  }
  if ((v42[23] & 0x80000000) != 0)
  {
    uint64_t v26 = *(void **)v42;
    goto LABEL_56;
  }
  return a2 + 1;
}

void sub_25511201C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255112064(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_2551120EC()
{
}

void *sub_255112100(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_270445210;
  result[1] = v3;
  return result;
}

uint64_t sub_255112148(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_270445210;
  a2[1] = v2;
  return result;
}

uint64_t sub_255112174(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t))(a1 + 8))(a2, *a3, *a4, a5, a6);
}

uint64_t sub_255112194(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v2[0] = &unk_270445210;
  v2[1] = sub_2551122AC;
  uint64_t v3 = v2;
  sub_255112BE4(a1, 0, 0, 2, 0, 0, v2);
  uint64_t result = (uint64_t)v3;
  if (v3 == v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void sub_255112298(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2551122AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v40) = 6;
  strcpy((char *)__dst, "region");
  sub_25512974C(a4, (uint64_t)__dst, (uint64_t)&v27);
  if (v29 != 2) {
    sub_2550EE418();
  }
  long long v41 = v27;
  uint64_t v42 = v28;
  uint64_t v28 = 0;
  long long v27 = 0uLL;
  int v29 = -1;
  if (SHIBYTE(v40) < 0) {
    operator delete(__dst[0]);
  }
  size_t v6 = *(unsigned __int8 **)(a3 + 80);
  size_t v7 = *(unsigned __int8 **)(a3 + 88);
  if (v6 != v7)
  {
    uint64_t v8 = HIBYTE(v42);
    long long v9 = v41;
    if (v42 >= 0) {
      uint64_t v10 = HIBYTE(v42);
    }
    else {
      uint64_t v10 = *((void *)&v41 + 1);
    }
    do
    {
      uint64_t v11 = v6[23];
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *((void *)v6 + 1);
      }
      if (v10 == v11)
      {
        if (v12 >= 0) {
          uint64_t v13 = v6;
        }
        else {
          uint64_t v13 = *(unsigned __int8 **)v6;
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp((const void *)v9, v13, *((size_t *)&v9 + 1))) {
            goto LABEL_21;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_21;
          }
          uint64_t v14 = (unsigned __int8 *)&v41;
          uint64_t v15 = v8;
          while (*v14 == *v13)
          {
            ++v14;
            ++v13;
            if (!--v15) {
              goto LABEL_21;
            }
          }
        }
      }
      v6 += 80;
    }
    while (v6 != v7);
    size_t v6 = v7;
  }
LABEL_21:
  uint64_t v38 = 0;
  if ((*(unsigned int (**)(uint64_t *, void, void, void, void, void))(a3 + 8))(&v38, *((void *)v6 + 6), *((void *)v6 + 7), *((unsigned int *)v6 + 6), *((void *)v6 + 4), *(void *)(a3 + 24)))
  {
    sub_2551080CC((uint64_t)&v27);
    uint64_t v16 = (void *)std::ostream::operator<<();
    sub_2551084AC(v16, (uint64_t)"-byte region allocation failed.", 31);
    uint64_t v17 = *(void **)(a3 + 32);
    if ((v36 & 0x10) != 0)
    {
      unint64_t v21 = v35;
      if (v35 < v32)
      {
        unint64_t v35 = v32;
        unint64_t v21 = v32;
      }
      uint64_t v22 = (const void **)&v31;
    }
    else
    {
      if ((v36 & 8) == 0)
      {
        size_t v18 = 0;
        HIBYTE(v40) = 0;
        uint64_t v19 = __dst;
        goto LABEL_39;
      }
      uint64_t v22 = (const void **)&v29;
      unint64_t v21 = v30;
    }
    uint64_t v23 = *v22;
    size_t v18 = v21 - (void)*v22;
    if (v18 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    if (v18 >= 0x17)
    {
      uint64_t v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17) {
        uint64_t v24 = v18 | 7;
      }
      uint64_t v25 = v24 + 1;
      uint64_t v19 = (void **)operator new(v24 + 1);
      __dst[1] = (void *)v18;
      unint64_t v40 = v25 | 0x8000000000000000;
      __dst[0] = v19;
    }
    else
    {
      HIBYTE(v40) = v21 - *(unsigned char *)v22;
      uint64_t v19 = __dst;
      if (!v18)
      {
LABEL_39:
        *((unsigned char *)v19 + v18) = 0;
        sub_25513A900(v17, 1, (uint64_t)__dst);
        if (SHIBYTE(v40) < 0) {
          operator delete(__dst[0]);
        }
        *(void *)&long long v27 = *MEMORY[0x263F8C2C8];
        *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        *((void *)&v27 + 1) = MEMORY[0x263F8C318] + 16;
        if (v34 < 0) {
          operator delete(__p);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x25A288660](&v37);
        uint64_t v20 = -1;
        if (SHIBYTE(v42) < 0) {
          goto LABEL_44;
        }
        return v20;
      }
    }
    memmove(v19, v23, v18);
    goto LABEL_39;
  }
  *((void *)v6 + 5) = v38;
  *((_OWORD *)v6 + 4) = *(_OWORD *)(a3 + 24);
  uint64_t v20 = a2 + 1;
  if (SHIBYTE(v42) < 0) {
LABEL_44:
  }
    operator delete((void *)v41);
  return v20;
}

void sub_255112654(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 - 113) < 0) {
    operator delete(*(void **)(v2 - 136));
  }
  sub_2551083A8((uint64_t)va);
  if (*(char *)(v2 - 89) < 0) {
    operator delete(*(void **)(v2 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_2551126C4(uint64_t *a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  v2[0] = &unk_270445210;
  v2[1] = sub_2551127DC;
  uint64_t v3 = v2;
  sub_255112BE4(a1, 0, 0, 17, 0, 0, v2);
  uint64_t result = (uint64_t)v3;
  if (v3 == v2) {
    return (*(uint64_t (**)(void *))(v2[0] + 32))(v2);
  }
  if (v3) {
    return (*(uint64_t (**)(void))(*v3 + 40))();
  }
  return result;
}

void sub_2551127C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_2551127DC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v39) = 6;
  strcpy((char *)__dst, "region");
  sub_25512974C(a4, (uint64_t)__dst, (uint64_t)&v27);
  if (v29 != 2) {
    sub_2550EE418();
  }
  long long v40 = v27;
  uint64_t v41 = v28;
  uint64_t v28 = 0;
  long long v27 = 0uLL;
  int v29 = -1;
  if (SHIBYTE(v39) < 0) {
    operator delete(__dst[0]);
  }
  size_t v6 = *(unsigned __int8 **)(a3 + 80);
  size_t v7 = *(unsigned __int8 **)(a3 + 88);
  if (v6 == v7)
  {
LABEL_21:
    uint64_t v16 = *((void *)v6 + 5);
    if (!v16) {
      goto LABEL_43;
    }
LABEL_22:
    if (!(*(unsigned int (**)(uint64_t, void, void))(a3 + 16))(v16, *((unsigned int *)v6 + 6), *((void *)v6 + 8)))goto LABEL_43; {
    sub_2551080CC((uint64_t)&v27);
    }
    sub_2551084AC(&v27, (uint64_t)"Deallocation function returned ", 31);
    uint64_t v17 = (void *)std::ostream::operator<<();
    sub_2551084AC(v17, (uint64_t)", not 0.", 8);
    size_t v18 = *(void **)(a3 + 32);
    if ((v36 & 0x10) != 0)
    {
      unint64_t v21 = v35;
      if (v35 < v32)
      {
        unint64_t v35 = v32;
        unint64_t v21 = v32;
      }
      uint64_t v22 = (const void **)&v31;
    }
    else
    {
      if ((v36 & 8) == 0)
      {
        size_t v19 = 0;
        HIBYTE(v39) = 0;
        uint64_t v20 = __dst;
        goto LABEL_38;
      }
      uint64_t v22 = (const void **)&v29;
      unint64_t v21 = v30;
    }
    uint64_t v23 = *v22;
    size_t v19 = v21 - (void)*v22;
    if (v19 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    if (v19 >= 0x17)
    {
      uint64_t v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v24 = v19 | 7;
      }
      uint64_t v25 = v24 + 1;
      uint64_t v20 = (void **)operator new(v24 + 1);
      __dst[1] = (void *)v19;
      unint64_t v39 = v25 | 0x8000000000000000;
      __dst[0] = v20;
    }
    else
    {
      HIBYTE(v39) = v21 - *(unsigned char *)v22;
      uint64_t v20 = __dst;
      if (!v19) {
        goto LABEL_38;
      }
    }
    memmove(v20, v23, v19);
LABEL_38:
    *((unsigned char *)v20 + v19) = 0;
    sub_25513A900(v18, 1, (uint64_t)__dst);
    if (SHIBYTE(v39) < 0) {
      operator delete(__dst[0]);
    }
    *(void *)&long long v27 = *MEMORY[0x263F8C2C8];
    *(void *)((char *)&v27 + *(void *)(v27 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    *((void *)&v27 + 1) = MEMORY[0x263F8C318] + 16;
    if (v34 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x25A288660](&v37);
    goto LABEL_43;
  }
  uint64_t v8 = HIBYTE(v41);
  long long v9 = v40;
  if (v41 >= 0) {
    uint64_t v10 = HIBYTE(v41);
  }
  else {
    uint64_t v10 = *((void *)&v40 + 1);
  }
  do
  {
    uint64_t v11 = v6[23];
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)v6 + 1);
    }
    if (v10 == v11)
    {
      if (v12 >= 0) {
        uint64_t v13 = v6;
      }
      else {
        uint64_t v13 = *(unsigned __int8 **)v6;
      }
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp((const void *)v9, v13, *((size_t *)&v9 + 1))) {
          goto LABEL_21;
        }
      }
      else
      {
        if (!v8) {
          goto LABEL_21;
        }
        uint64_t v14 = (unsigned __int8 *)&v40;
        uint64_t v15 = v8;
        while (*v14 == *v13)
        {
          ++v14;
          ++v13;
          if (!--v15) {
            goto LABEL_21;
          }
        }
      }
    }
    v6 += 80;
  }
  while (v6 != v7);
  size_t v6 = v7;
  uint64_t v16 = *((void *)v7 + 5);
  if (v16) {
    goto LABEL_22;
  }
LABEL_43:
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  return a2 + 1;
}

void sub_255112B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 113) < 0) {
    operator delete(*(void **)(v9 - 136));
  }
  sub_2551083A8((uint64_t)&a9);
  if (*(char *)(v9 - 89) < 0) {
    operator delete(*(void **)(v9 - 112));
  }
  _Unwind_Resume(a1);
}

void sub_255112BE4(uint64_t *a1, char *a2, uint64_t a3, int a4, char *__src, uint64_t a6, void *a7)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  long long v71 = 0u;
  long long v70 = 0u;
  long long v69 = 0u;
  long long v68 = 0u;
  long long v67 = 0u;
  *(_OWORD *)uint64_t v66 = 0u;
  int v65 = a4;
  sub_255113218(v66, __src, &__src[4 * a6], (4 * a6) >> 2);
  sub_255113218((void *)&v67 + 1, a2, &a2[4 * a3], (4 * a3) >> 2);
  if (a3)
  {
    uint64_t v10 = 0;
    uint64_t v11 = (char *)v71;
    while ((unint64_t)v11 < *((void *)&v71 + 1))
    {
      *(_DWORD *)uint64_t v11 = 0;
      int v12 = v11 + 4;
LABEL_4:
      *(void *)&long long v71 = v12;
      ++v10;
      uint64_t v11 = v12;
      if (v10 == a3) {
        goto LABEL_32;
      }
    }
    uint64_t v13 = (char *)*((void *)&v70 + 1);
    uint64_t v14 = &v11[-*((void *)&v70 + 1)];
    uint64_t v15 = (uint64_t)&v11[-*((void *)&v70 + 1)] >> 2;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      sub_2550EAEEC();
    }
    uint64_t v17 = *((void *)&v71 + 1) - *((void *)&v70 + 1);
    if ((uint64_t)(*((void *)&v71 + 1) - *((void *)&v70 + 1)) >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 62) {
        sub_2550EACF8();
      }
      size_t v19 = operator new(4 * v18);
    }
    else
    {
      size_t v19 = 0;
    }
    uint64_t v20 = &v19[4 * v15];
    *uint64_t v20 = 0;
    int v12 = (char *)(v20 + 1);
    if (v11 == v13) {
      goto LABEL_20;
    }
    unint64_t v21 = v11 - v13 - 4;
    if (v21 < 0xBC)
    {
      uint64_t v22 = v11;
      goto LABEL_19;
    }
    unint64_t v24 = (v11 - 4 - v13) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v14[(void)v19 - 4 - v24] > &v14[(void)v19 - 4])
    {
      uint64_t v22 = v11;
    }
    else
    {
      if (&v11[-v24 - 4] <= v11 - 4)
      {
        if ((unint64_t)(v11 - v19 - (void)v14) < 0x20)
        {
          uint64_t v22 = v11;
          goto LABEL_19;
        }
        uint64_t v25 = (v21 >> 2) + 1;
        uint64_t v26 = 4 * (v25 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v22 = &v11[-v26];
        uint64_t v20 = (_DWORD *)((char *)v20 - v26);
        long long v27 = &v19[4 * v15 - 16];
        uint64_t v28 = v11 - 16;
        uint64_t v29 = v25 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *long long v27 = v30;
          v27 -= 2;
          v28 -= 32;
          v29 -= 8;
        }
        while (v29);
        if (v25 != (v25 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_19;
        }
LABEL_20:
        *((void *)&v70 + 1) = v20;
        *(void *)&long long v71 = v12;
        *((void *)&v71 + 1) = &v19[4 * v18];
        if (v13) {
          operator delete(v13);
        }
        goto LABEL_4;
      }
      uint64_t v22 = v11;
    }
    do
    {
LABEL_19:
      int v23 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *--uint64_t v20 = v23;
    }
    while (v22 != v13);
    goto LABEL_20;
  }
LABEL_32:
  if (a6)
  {
    uint64_t v31 = 0;
    unint64_t v32 = (char *)*((void *)&v69 + 1);
    while ((unint64_t)v32 < (unint64_t)v70)
    {
      *(_DWORD *)unint64_t v32 = 0;
      unint64_t v33 = v32 + 4;
LABEL_35:
      *((void *)&v69 + 1) = v33;
      ++v31;
      unint64_t v32 = v33;
      if (v31 == a6) {
        goto LABEL_63;
      }
    }
    char v34 = (char *)v69;
    unint64_t v35 = &v32[-v69];
    uint64_t v36 = (uint64_t)&v32[-v69] >> 2;
    unint64_t v37 = v36 + 1;
    if ((unint64_t)(v36 + 1) >> 62) {
      sub_2550EAEEC();
    }
    uint64_t v38 = v70 - v69;
    if ((uint64_t)(v70 - v69) >> 1 > v37) {
      unint64_t v37 = v38 >> 1;
    }
    if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v39 = v37;
    }
    if (v39)
    {
      if (v39 >> 62) {
        sub_2550EACF8();
      }
      long long v40 = operator new(4 * v39);
    }
    else
    {
      long long v40 = 0;
    }
    uint64_t v41 = &v40[4 * v36];
    *uint64_t v41 = 0;
    unint64_t v33 = (char *)(v41 + 1);
    if (v32 == v34) {
      goto LABEL_51;
    }
    unint64_t v42 = v32 - v34 - 4;
    if (v42 < 0xBC)
    {
      uint64_t v43 = v32;
      goto LABEL_50;
    }
    unint64_t v45 = (v32 - 4 - v34) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v35[(void)v40 - 4 - v45] > &v35[(void)v40 - 4])
    {
      uint64_t v43 = v32;
    }
    else
    {
      if (&v32[-v45 - 4] <= v32 - 4)
      {
        if ((unint64_t)(v32 - v40 - (void)v35) < 0x20)
        {
          uint64_t v43 = v32;
          goto LABEL_50;
        }
        uint64_t v46 = (v42 >> 2) + 1;
        uint64_t v47 = 4 * (v46 & 0x7FFFFFFFFFFFFFF8);
        uint64_t v43 = &v32[-v47];
        uint64_t v41 = (_DWORD *)((char *)v41 - v47);
        uint64_t v48 = &v40[4 * v36 - 16];
        uint64_t v49 = v32 - 16;
        uint64_t v50 = v46 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          long long v51 = *(_OWORD *)v49;
          *(v48 - 1) = *((_OWORD *)v49 - 1);
          *uint64_t v48 = v51;
          v48 -= 2;
          v49 -= 32;
          v50 -= 8;
        }
        while (v50);
        if (v46 != (v46 & 0x7FFFFFFFFFFFFFF8)) {
          goto LABEL_50;
        }
LABEL_51:
        *(void *)&long long v69 = v41;
        *((void *)&v69 + 1) = v33;
        *(void *)&long long v70 = &v40[4 * v39];
        if (v34) {
          operator delete(v34);
        }
        goto LABEL_35;
      }
      uint64_t v43 = v32;
    }
    do
    {
LABEL_50:
      int v44 = *((_DWORD *)v43 - 1);
      v43 -= 4;
      *--uint64_t v41 = v44;
    }
    while (v43 != v34);
    goto LABEL_51;
  }
LABEL_63:
  sub_255113360((uint64_t)&v56, &v65);
  uint64_t v52 = a7[3];
  if (!v52) {
    goto LABEL_66;
  }
  if ((void *)v52 != a7)
  {
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)v52 + 16))(v52);
LABEL_66:
    uint64_t v73 = (void *)v52;
    goto LABEL_68;
  }
  uint64_t v73 = v72;
  (*(void (**)(void *, void *))(*a7 + 24))(a7, v72);
LABEL_68:
  sub_255126C44(a1, &v56, (uint64_t)v72);
  if (v73 == v72)
  {
    (*(void (**)(void *))(v72[0] + 32))(v72);
    unint64_t v53 = __p;
    if (__p)
    {
LABEL_72:
      uint64_t v64 = v53;
      operator delete(v53);
    }
  }
  else
  {
    if (v73) {
      (*(void (**)(void))(*v73 + 40))();
    }
    unint64_t v53 = __p;
    if (__p) {
      goto LABEL_72;
    }
  }
  if (v61)
  {
    unint64_t v62 = v61;
    operator delete(v61);
  }
  if (v59)
  {
    uint64_t v60 = v59;
    operator delete(v59);
  }
  if (v57)
  {
    uint64_t v58 = v57;
    operator delete(v57);
  }
  if (*((void *)&v70 + 1))
  {
    *(void *)&long long v71 = *((void *)&v70 + 1);
    operator delete(*((void **)&v70 + 1));
  }
  if ((void)v69)
  {
    *((void *)&v69 + 1) = v69;
    operator delete((void *)v69);
  }
  if (*((void *)&v67 + 1))
  {
    *(void *)&long long v68 = *((void *)&v67 + 1);
    operator delete(*((void **)&v67 + 1));
  }
  if (v66[0])
  {
    v66[1] = v66[0];
    operator delete(v66[0]);
  }
}

void sub_255113170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void *sub_2551131B4(void *a1)
{
  uint64_t v2 = (void *)a1[10];
  if (v2)
  {
    a1[11] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[7];
  if (v3)
  {
    a1[8] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[4];
  if (v4)
  {
    a1[5] = v4;
    operator delete(v4);
  }
  unint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_255113218(void *result, char *__src, char *a3, size_t __sz)
{
  size_t v6 = __src;
  size_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned char v7[2] = 0;
    }
    if (__sz >> 62) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 62) {
LABEL_22:
    }
      sub_2550EAEEC();
    uint64_t v13 = 4 * v12;
    uint64_t result = operator new(4 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    unsigned char v7[2] = (char *)result + v13;
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    size_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  unint64_t v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    size_t v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  unsigned char *v15 = &v9[v14];
  return result;
}

uint64_t sub_255113360(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  size_t v6 = (unsigned char *)*((void *)a2 + 1);
  unint64_t v5 = (unsigned char *)*((void *)a2 + 2);
  int64_t v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v8 = (char *)operator new(v5 - v6);
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v8;
    uint64_t v9 = &v8[4 * (v7 >> 2)];
    *(void *)(a1 + 24) = v9;
    memcpy(v8, v6, v7);
    *(void *)(a1 + 16) = v9;
  }
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  BOOL v11 = (unsigned char *)*((void *)a2 + 4);
  uint64_t v10 = (unsigned char *)*((void *)a2 + 5);
  int64_t v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v13 = (char *)operator new(v10 - v11);
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v13;
    size_t v14 = &v13[4 * (v12 >> 2)];
    *(void *)(a1 + 48) = v14;
    memcpy(v13, v11, v12);
    *(void *)(a1 + 40) = v14;
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  unint64_t v16 = (unsigned char *)*((void *)a2 + 7);
  uint64_t v15 = (unsigned char *)*((void *)a2 + 8);
  int64_t v17 = v15 - v16;
  if (v15 != v16)
  {
    if (v17 < 0) {
      sub_2550EAEEC();
    }
    unint64_t v18 = (char *)operator new(v15 - v16);
    *(void *)(a1 + 56) = v18;
    *(void *)(a1 + 64) = v18;
    size_t v19 = &v18[4 * (v17 >> 2)];
    *(void *)(a1 + 72) = v19;
    memcpy(v18, v16, v17);
    *(void *)(a1 + 64) = v19;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  unint64_t v21 = (unsigned char *)*((void *)a2 + 10);
  uint64_t v20 = (unsigned char *)*((void *)a2 + 11);
  int64_t v22 = v20 - v21;
  if (v20 != v21)
  {
    if (v22 < 0) {
      sub_2550EAEEC();
    }
    int v23 = (char *)operator new(v20 - v21);
    *(void *)(a1 + 80) = v23;
    *(void *)(a1 + 88) = v23;
    unint64_t v24 = &v23[4 * (v22 >> 2)];
    *(void *)(a1 + 96) = v24;
    memcpy(v23, v21, v22);
    *(void *)(a1 + 88) = v24;
  }
  return a1;
}

void sub_2551134E8(_Unwind_Exception *exception_object)
{
  int64_t v7 = *v5;
  if (*v5)
  {
    v1[11] = v7;
    operator delete(v7);
    uint64_t v8 = *v4;
    if (!*v4)
    {
LABEL_3:
      uint64_t v9 = *v3;
      if (!*v3) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v8 = *v4;
    if (!*v4) {
      goto LABEL_3;
    }
  }
  v1[8] = v8;
  operator delete(v8);
  uint64_t v9 = *v3;
  if (!*v3)
  {
LABEL_4:
    uint64_t v10 = *v2;
    if (!*v2) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  v1[5] = v9;
  operator delete(v9);
  uint64_t v10 = *v2;
  if (!*v2) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  v1[2] = v10;
  operator delete(v10);
  goto LABEL_6;
}

void sub_255113570()
{
  if (!*v0) {
    JUMPOUT(0x255113514);
  }
  JUMPOUT(0x25511350CLL);
}

void sub_255113580(uint64_t *a1)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  long long v18 = 0u;
  long long v17 = 0u;
  long long v16 = 0u;
  long long v15 = 0u;
  long long v14 = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  int v12 = 24;
  sub_255113360((uint64_t)&v3, &v12);
  v19[0] = &unk_270445210;
  v19[1] = sub_25511376C;
  uint64_t v20 = v19;
  sub_255126C44(a1, &v3, (uint64_t)v19);
  if (v20 == v19)
  {
    (*(void (**)(void *))(v19[0] + 32))(v19);
    uint64_t v2 = __p;
    if (__p)
    {
LABEL_5:
      BOOL v11 = v2;
      operator delete(v2);
    }
  }
  else
  {
    if (v20) {
      (*(void (**)(void *))(*v20 + 40))(v20);
    }
    uint64_t v2 = __p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    int64_t v7 = v6;
    operator delete(v6);
  }
  if (v4)
  {
    unint64_t v5 = v4;
    operator delete(v4);
  }
  if (*((void *)&v17 + 1))
  {
    *(void *)&long long v18 = *((void *)&v17 + 1);
    operator delete(*((void **)&v17 + 1));
  }
  if ((void)v16)
  {
    *((void *)&v16 + 1) = v16;
    operator delete((void *)v16);
  }
  if (*((void *)&v14 + 1))
  {
    *(void *)&long long v15 = *((void *)&v14 + 1);
    operator delete(*((void **)&v14 + 1));
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_255113740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  sub_255112064((void *)(v2 - 72));
  sub_2551131B4((uint64_t *)va);
  sub_2551131B4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_25511376C(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  char v12 = 6;
  strcpy((char *)__p, "kindex");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v13);
  if (v14) {
    sub_2550EE418();
  }
  uint64_t v9 = v13[0];
  int v14 = -1;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  sub_255129428(*(void *)(*(void *)(a3 + 176) + 8 * v9), a1, a5);
  return a2 + 1;
}

void sub_255113824(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_255113850(uint64_t *a1)
{
  uint64_t v145 = *MEMORY[0x263EF8340];
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  int v25 = 0;
  sub_255113360((uint64_t)&v16, &v25);
  v143[0] = &unk_270445210;
  v143[1] = sub_2551167E4;
  uint64_t v144 = v143;
  sub_255126C44(a1, &v16, (uint64_t)v143);
  if (v144 == v143)
  {
    (*(void (**)(void *))(v143[0] + 32))(v143);
    uint64_t v2 = v23;
    if (v23)
    {
LABEL_5:
      unint64_t v24 = v2;
      operator delete(v2);
    }
  }
  else
  {
    if (v144) {
      (*(void (**)(void *))(*v144 + 40))(v144);
    }
    uint64_t v2 = v23;
    if (v23) {
      goto LABEL_5;
    }
  }
  if (v21)
  {
    int64_t v22 = v21;
    operator delete(v21);
  }
  if (v19)
  {
    uint64_t v20 = v19;
    operator delete(v19);
  }
  if (__p)
  {
    long long v18 = __p;
    operator delete(__p);
  }
  int v25 = 35;
  sub_255113360((uint64_t)&v7, &v25);
  v141[0] = &unk_270445210;
  v141[1] = sub_255116958;
  uint64_t v142 = v141;
  sub_255126C44(a1, &v7, (uint64_t)v141);
  if (v142 == v141)
  {
    (*(void (**)(void *))(v141[0] + 32))(v141);
    int v3 = v14;
    if (v14)
    {
LABEL_16:
      uint64_t v15 = v3;
      operator delete(v3);
    }
  }
  else
  {
    if (v142) {
      (*(void (**)(void *))(*v142 + 40))(v142);
    }
    int v3 = v14;
    if (v14) {
      goto LABEL_16;
    }
  }
  if (v12)
  {
    uint64_t v13 = v12;
    operator delete(v12);
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  int v6 = 0;
  uint64_t __src = 0;
  v138[0] = &unk_270445210;
  v138[1] = sub_255116ACC;
  long long v139 = v138;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v138);
  if (v139 == v138)
  {
    (*(void (**)(void *))(v138[0] + 32))(v138);
  }
  else if (v139)
  {
    (*(void (**)(void *))(*v139 + 40))(v139);
  }
  int v6 = 1;
  uint64_t __src = 0x100000001;
  v136[0] = &unk_270445210;
  v136[1] = sub_255116CB0;
  uint64_t v137 = v136;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v136);
  if (v137 == v136)
  {
    (*(void (**)(void *))(v136[0] + 32))(v136);
  }
  else if (v137)
  {
    (*(void (**)(void *))(*v137 + 40))(v137);
  }
  int v6 = 2;
  uint64_t __src = 0x200000002;
  v134[0] = &unk_270445210;
  v134[1] = sub_255116E48;
  uint64_t v135 = v134;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v134);
  if (v135 == v134)
  {
    (*(void (**)(void *))(v134[0] + 32))(v134);
  }
  else if (v135)
  {
    (*(void (**)(void *))(*v135 + 40))(v135);
  }
  int v6 = 3;
  uint64_t __src = 0x300000003;
  v132[0] = &unk_270445210;
  v132[1] = sub_255116FE0;
  v133 = v132;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v132);
  if (v133 == v132)
  {
    (*(void (**)(void *))(v132[0] + 32))(v132);
  }
  else if (v133)
  {
    (*(void (**)(void *))(*v133 + 40))(v133);
  }
  int v6 = 4;
  uint64_t __src = 0x400000004;
  v130[0] = &unk_270445210;
  v130[1] = sub_255117178;
  uint64_t v131 = v130;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v130);
  if (v131 == v130)
  {
    (*(void (**)(void *))(v130[0] + 32))(v130);
  }
  else if (v131)
  {
    (*(void (**)(void *))(*v131 + 40))(v131);
  }
  int v6 = 5;
  uint64_t __src = 0x500000005;
  v128[0] = &unk_270445210;
  v128[1] = sub_25511735C;
  uint64_t v129 = v128;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v128);
  if (v129 == v128)
  {
    (*(void (**)(void *))(v128[0] + 32))(v128);
  }
  else if (v129)
  {
    (*(void (**)(void *))(*v129 + 40))(v129);
  }
  int v6 = 6;
  uint64_t __src = 0x600000006;
  v126[0] = &unk_270445210;
  v126[1] = sub_2551174F4;
  uint64_t v127 = v126;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v126);
  if (v127 == v126)
  {
    (*(void (**)(void *))(v126[0] + 32))(v126);
  }
  else if (v127)
  {
    (*(void (**)(void *))(*v127 + 40))(v127);
  }
  int v6 = 7;
  uint64_t __src = 0x700000007;
  v124[0] = &unk_270445210;
  v124[1] = sub_25511768C;
  uint64_t v125 = v124;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v124);
  if (v125 == v124)
  {
    (*(void (**)(void *))(v124[0] + 32))(v124);
  }
  else if (v125)
  {
    (*(void (**)(void *))(*v125 + 40))(v125);
  }
  int v6 = 9;
  uint64_t __src = 0x900000009;
  v122[0] = &unk_270445210;
  v122[1] = sub_255117824;
  unint64_t v123 = v122;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v122);
  if (v123 == v122)
  {
    (*(void (**)(void *))(v122[0] + 32))(v122);
  }
  else if (v123)
  {
    (*(void (**)(void *))(*v123 + 40))(v123);
  }
  int v6 = 10;
  uint64_t __src = 0xA0000000ALL;
  v120[0] = &unk_270445210;
  v120[1] = sub_2551179BC;
  uint64_t v121 = v120;
  sub_255112BE4(a1, (char *)&v6, 1, 1, (char *)&__src, 2, v120);
  if (v121 == v120)
  {
    (*(void (**)(void *))(v120[0] + 32))(v120);
  }
  else if (v121)
  {
    (*(void (**)(void *))(*v121 + 40))(v121);
  }
  int v6 = 0;
  uint64_t __src = 0;
  v118[0] = &unk_270445210;
  v118[1] = sub_255117B54;
  long long v119 = v118;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v118);
  if (v119 == v118)
  {
    (*(void (**)(void *))(v118[0] + 32))(v118);
  }
  else if (v119)
  {
    (*(void (**)(void *))(*v119 + 40))(v119);
  }
  int v6 = 1;
  uint64_t __src = 0x100000001;
  v116[0] = &unk_270445210;
  v116[1] = sub_255117C68;
  uint64_t v117 = v116;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v116);
  if (v117 == v116)
  {
    (*(void (**)(void *))(v116[0] + 32))(v116);
  }
  else if (v117)
  {
    (*(void (**)(void *))(*v117 + 40))(v117);
  }
  int v6 = 2;
  uint64_t __src = 0x200000002;
  v114[0] = &unk_270445210;
  v114[1] = sub_255117D7C;
  uint64_t v115 = v114;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v114);
  if (v115 == v114)
  {
    (*(void (**)(void *))(v114[0] + 32))(v114);
  }
  else if (v115)
  {
    (*(void (**)(void *))(*v115 + 40))(v115);
  }
  int v6 = 3;
  uint64_t __src = 0x300000003;
  v112[0] = &unk_270445210;
  v112[1] = sub_255117E90;
  long long v113 = v112;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v112);
  if (v113 == v112)
  {
    (*(void (**)(void *))(v112[0] + 32))(v112);
  }
  else if (v113)
  {
    (*(void (**)(void *))(*v113 + 40))(v113);
  }
  int v6 = 4;
  uint64_t __src = 0x400000004;
  v110[0] = &unk_270445210;
  v110[1] = sub_255117FA4;
  uint64_t v111 = v110;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v110);
  if (v111 == v110)
  {
    (*(void (**)(void *))(v110[0] + 32))(v110);
  }
  else if (v111)
  {
    (*(void (**)(void *))(*v111 + 40))(v111);
  }
  int v6 = 5;
  uint64_t __src = 0x500000005;
  v108[0] = &unk_270445210;
  v108[1] = sub_2551180B8;
  uint64_t v109 = v108;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v108);
  if (v109 == v108)
  {
    (*(void (**)(void *))(v108[0] + 32))(v108);
  }
  else if (v109)
  {
    (*(void (**)(void *))(*v109 + 40))(v109);
  }
  int v6 = 6;
  uint64_t __src = 0x600000006;
  v106[0] = &unk_270445210;
  v106[1] = sub_2551181CC;
  int v107 = v106;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v106);
  if (v107 == v106)
  {
    (*(void (**)(void *))(v106[0] + 32))(v106);
  }
  else if (v107)
  {
    (*(void (**)(void *))(*v107 + 40))(v107);
  }
  int v6 = 7;
  uint64_t __src = 0x700000007;
  v104[0] = &unk_270445210;
  v104[1] = sub_2551182E0;
  uint64_t v105 = v104;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v104);
  if (v105 == v104)
  {
    (*(void (**)(void *))(v104[0] + 32))(v104);
  }
  else if (v105)
  {
    (*(void (**)(void *))(*v105 + 40))(v105);
  }
  int v6 = 9;
  uint64_t __src = 0x900000009;
  v102[0] = &unk_270445210;
  v102[1] = sub_2551183F4;
  uint64_t v103 = v102;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v102);
  if (v103 == v102)
  {
    (*(void (**)(void *))(v102[0] + 32))(v102);
  }
  else if (v103)
  {
    (*(void (**)(void *))(*v103 + 40))(v103);
  }
  int v6 = 10;
  uint64_t __src = 0xA0000000ALL;
  v100[0] = &unk_270445210;
  v100[1] = sub_25511858C;
  uint64_t v101 = v100;
  sub_255112BE4(a1, (char *)&v6, 1, 16, (char *)&__src, 2, v100);
  if (v101 == v100)
  {
    (*(void (**)(void *))(v100[0] + 32))(v100);
  }
  else if (v101)
  {
    (*(void (**)(void *))(*v101 + 40))(v101);
  }
  int v6 = 0;
  uint64_t __src = 0;
  v98[0] = &unk_270445210;
  v98[1] = sub_255118724;
  uint64_t v99 = v98;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v98);
  if (v99 == v98)
  {
    (*(void (**)(void *))(v98[0] + 32))(v98);
  }
  else if (v99)
  {
    (*(void (**)(void *))(*v99 + 40))(v99);
  }
  int v6 = 1;
  uint64_t __src = 0x100000001;
  v96[0] = &unk_270445210;
  v96[1] = sub_255118908;
  uint64_t v97 = v96;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v96);
  if (v97 == v96)
  {
    (*(void (**)(void *))(v96[0] + 32))(v96);
  }
  else if (v97)
  {
    (*(void (**)(void *))(*v97 + 40))(v97);
  }
  int v6 = 2;
  uint64_t __src = 0x200000002;
  v94[0] = &unk_270445210;
  v94[1] = sub_255118AA0;
  uint64_t v95 = v94;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v94);
  if (v95 == v94)
  {
    (*(void (**)(void *))(v94[0] + 32))(v94);
  }
  else if (v95)
  {
    (*(void (**)(void *))(*v95 + 40))(v95);
  }
  int v6 = 3;
  uint64_t __src = 0x300000003;
  v92[0] = &unk_270445210;
  v92[1] = sub_255118C38;
  uint64_t v93 = v92;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v92);
  if (v93 == v92)
  {
    (*(void (**)(void *))(v92[0] + 32))(v92);
  }
  else if (v93)
  {
    (*(void (**)(void *))(*v93 + 40))(v93);
  }
  int v6 = 4;
  uint64_t __src = 0x400000004;
  v90[0] = &unk_270445210;
  v90[1] = sub_255118D4C;
  uint64_t v91 = v90;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v90);
  if (v91 == v90)
  {
    (*(void (**)(void *))(v90[0] + 32))(v90);
  }
  else if (v91)
  {
    (*(void (**)(void *))(*v91 + 40))(v91);
  }
  int v6 = 5;
  uint64_t __src = 0x500000005;
  v88[0] = &unk_270445210;
  v88[1] = sub_255118F30;
  uint64_t v89 = v88;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v88);
  if (v89 == v88)
  {
    (*(void (**)(void *))(v88[0] + 32))(v88);
  }
  else if (v89)
  {
    (*(void (**)(void *))(*v89 + 40))(v89);
  }
  int v6 = 6;
  uint64_t __src = 0x600000006;
  v86[0] = &unk_270445210;
  v86[1] = sub_2551190C8;
  uint64_t v87 = v86;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v86);
  if (v87 == v86)
  {
    (*(void (**)(void *))(v86[0] + 32))(v86);
  }
  else if (v87)
  {
    (*(void (**)(void *))(*v87 + 40))(v87);
  }
  int v6 = 7;
  uint64_t __src = 0x700000007;
  v84[0] = &unk_270445210;
  v84[1] = sub_255119260;
  uint64_t v85 = v84;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v84);
  if (v85 == v84)
  {
    (*(void (**)(void *))(v84[0] + 32))(v84);
  }
  else if (v85)
  {
    (*(void (**)(void *))(*v85 + 40))(v85);
  }
  int v6 = 9;
  uint64_t __src = 0x900000009;
  v82[0] = &unk_270445210;
  v82[1] = sub_255119374;
  uint64_t v83 = v82;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v82);
  if (v83 == v82)
  {
    (*(void (**)(void *))(v82[0] + 32))(v82);
  }
  else if (v83)
  {
    (*(void (**)(void *))(*v83 + 40))(v83);
  }
  int v6 = 10;
  uint64_t __src = 0xA0000000ALL;
  v80[0] = &unk_270445210;
  v80[1] = sub_25511950C;
  long long v81 = v80;
  sub_255112BE4(a1, (char *)&v6, 1, 31, (char *)&__src, 2, v80);
  if (v81 == v80)
  {
    (*(void (**)(void *))(v80[0] + 32))(v80);
  }
  else if (v81)
  {
    (*(void (**)(void *))(*v81 + 40))(v81);
  }
  int v6 = 0;
  uint64_t __src = 0;
  v78[0] = &unk_270445210;
  v78[1] = sub_2551196A4;
  uint64_t v79 = v78;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v78);
  if (v79 == v78)
  {
    (*(void (**)(void *))(v78[0] + 32))(v78);
  }
  else if (v79)
  {
    (*(void (**)(void *))(*v79 + 40))(v79);
  }
  int v6 = 1;
  uint64_t __src = 0x100000001;
  v76[0] = &unk_270445210;
  v76[1] = sub_255119888;
  uint64_t v77 = v76;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v76);
  if (v77 == v76)
  {
    (*(void (**)(void *))(v76[0] + 32))(v76);
  }
  else if (v77)
  {
    (*(void (**)(void *))(*v77 + 40))(v77);
  }
  int v6 = 2;
  uint64_t __src = 0x200000002;
  v74[0] = &unk_270445210;
  v74[1] = sub_255119A20;
  uint64_t v75 = v74;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v74);
  if (v75 == v74)
  {
    (*(void (**)(void *))(v74[0] + 32))(v74);
  }
  else if (v75)
  {
    (*(void (**)(void *))(*v75 + 40))(v75);
  }
  int v6 = 3;
  uint64_t __src = 0x300000003;
  v72[0] = &unk_270445210;
  v72[1] = sub_255119BB8;
  uint64_t v73 = v72;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v72);
  if (v73 == v72)
  {
    (*(void (**)(void *))(v72[0] + 32))(v72);
  }
  else if (v73)
  {
    (*(void (**)(void *))(*v73 + 40))(v73);
  }
  int v6 = 4;
  uint64_t __src = 0x400000004;
  v70[0] = &unk_270445210;
  v70[1] = sub_255119D50;
  long long v71 = v70;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v70);
  if (v71 == v70)
  {
    (*(void (**)(void *))(v70[0] + 32))(v70);
  }
  else if (v71)
  {
    (*(void (**)(void *))(*v71 + 40))(v71);
  }
  int v6 = 5;
  uint64_t __src = 0x500000005;
  v68[0] = &unk_270445210;
  v68[1] = sub_255119F34;
  long long v69 = v68;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v68);
  if (v69 == v68)
  {
    (*(void (**)(void *))(v68[0] + 32))(v68);
  }
  else if (v69)
  {
    (*(void (**)(void *))(*v69 + 40))(v69);
  }
  int v6 = 6;
  uint64_t __src = 0x600000006;
  v66[0] = &unk_270445210;
  v66[1] = sub_25511A0CC;
  long long v67 = v66;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v66);
  if (v67 == v66)
  {
    (*(void (**)(void *))(v66[0] + 32))(v66);
  }
  else if (v67)
  {
    (*(void (**)(void *))(*v67 + 40))(v67);
  }
  int v6 = 7;
  uint64_t __src = 0x700000007;
  v64[0] = &unk_270445210;
  v64[1] = sub_25511A264;
  int v65 = v64;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v64);
  if (v65 == v64)
  {
    (*(void (**)(void *))(v64[0] + 32))(v64);
  }
  else if (v65)
  {
    (*(void (**)(void *))(*v65 + 40))(v65);
  }
  int v6 = 9;
  uint64_t __src = 0x900000009;
  v62[0] = &unk_270445210;
  v62[1] = sub_25511A3FC;
  uint64_t v63 = v62;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v62);
  if (v63 == v62)
  {
    (*(void (**)(void *))(v62[0] + 32))(v62);
  }
  else if (v63)
  {
    (*(void (**)(void *))(*v63 + 40))(v63);
  }
  int v6 = 10;
  uint64_t __src = 0xA0000000ALL;
  v60[0] = &unk_270445210;
  v60[1] = sub_25511A594;
  uint64_t v61 = v60;
  sub_255112BE4(a1, (char *)&v6, 1, 40, (char *)&__src, 2, v60);
  if (v61 == v60)
  {
    (*(void (**)(void *))(v60[0] + 32))(v60);
  }
  else if (v61)
  {
    (*(void (**)(void *))(*v61 + 40))(v61);
  }
  for (uint64_t i = 0; i != 10; ++i)
  {
    int v5 = dword_25513EDC4[i];
    LODWORD(__src) = v5;
    int v6 = v5;
    v58[0] = &unk_270445210;
    v58[1] = sub_25511A72C;
    unint64_t v59 = v58;
    sub_255112BE4(a1, (char *)&__src, 1, 5, (char *)&v6, 1, v58);
    if (v59 == v58)
    {
      (*(void (**)(void *))(v58[0] + 32))(v58);
    }
    else if (v59)
    {
      (*(void (**)(void *))(*v59 + 40))(v59);
    }
    LODWORD(__src) = v5;
    int v6 = v5;
    v56[0] = &unk_270445210;
    v56[1] = sub_25511A734;
    unint64_t v57 = v56;
    sub_255112BE4(a1, (char *)&__src, 1, 12, (char *)&v6, 1, v56);
    if (v57 == v56)
    {
      (*(void (**)(void *))(v56[0] + 32))(v56);
    }
    else if (v57)
    {
      (*(void (**)(void *))(*v57 + 40))(v57);
    }
    LODWORD(__src) = v5;
    int v6 = v5;
    v54[0] = &unk_270445210;
    v54[1] = sub_25511A73C;
    uint64_t v55 = v54;
    sub_255112BE4(a1, (char *)&__src, 1, 14, (char *)&v6, 1, v54);
    if (v55 == v54)
    {
      (*(void (**)(void *))(v54[0] + 32))(v54);
    }
    else if (v55)
    {
      (*(void (**)(void *))(*v55 + 40))(v55);
    }
    LODWORD(__src) = v5;
    int v6 = v5;
    v52[0] = &unk_270445210;
    v52[1] = sub_25511A808;
    unint64_t v53 = v52;
    sub_255112BE4(a1, (char *)&__src, 1, 30, (char *)&v6, 1, v52);
    if (v53 == v52)
    {
      (*(void (**)(void *))(v52[0] + 32))(v52);
    }
    else if (v53)
    {
      (*(void (**)(void *))(*v53 + 40))(v53);
    }
  }
  LODWORD(__src) = 0;
  v50[0] = &unk_270445210;
  v50[1] = sub_25511A810;
  long long v51 = v50;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v50);
  if (v51 == v50)
  {
    (*(void (**)(void *))(v50[0] + 32))(v50);
  }
  else if (v51)
  {
    (*(void (**)(void *))(*v51 + 40))(v51);
  }
  LODWORD(__src) = 1;
  v48[0] = &unk_270445210;
  v48[1] = sub_25511A8CC;
  uint64_t v49 = v48;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v48);
  if (v49 == v48)
  {
    (*(void (**)(void *))(v48[0] + 32))(v48);
  }
  else if (v49)
  {
    (*(void (**)(void *))(*v49 + 40))(v49);
  }
  LODWORD(__src) = 2;
  v46[0] = &unk_270445210;
  v46[1] = sub_25511A988;
  uint64_t v47 = v46;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v46);
  if (v47 == v46)
  {
    (*(void (**)(void *))(v46[0] + 32))(v46);
  }
  else if (v47)
  {
    (*(void (**)(void *))(*v47 + 40))(v47);
  }
  LODWORD(__src) = 3;
  v44[0] = &unk_270445210;
  v44[1] = sub_25511AA44;
  unint64_t v45 = v44;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v44);
  if (v45 == v44)
  {
    (*(void (**)(void *))(v44[0] + 32))(v44);
  }
  else if (v45)
  {
    (*(void (**)(void *))(*v45 + 40))(v45);
  }
  LODWORD(__src) = 4;
  v42[0] = &unk_270445210;
  v42[1] = sub_25511AB00;
  uint64_t v43 = v42;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v42);
  if (v43 == v42)
  {
    (*(void (**)(void *))(v42[0] + 32))(v42);
  }
  else if (v43)
  {
    (*(void (**)(void *))(*v43 + 40))(v43);
  }
  LODWORD(__src) = 5;
  v40[0] = &unk_270445210;
  v40[1] = sub_25511ABBC;
  uint64_t v41 = v40;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v40);
  if (v41 == v40)
  {
    (*(void (**)(void *))(v40[0] + 32))(v40);
  }
  else if (v41)
  {
    (*(void (**)(void *))(*v41 + 40))(v41);
  }
  LODWORD(__src) = 6;
  v38[0] = &unk_270445210;
  v38[1] = sub_25511AC78;
  unint64_t v39 = v38;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v38);
  if (v39 == v38)
  {
    (*(void (**)(void *))(v38[0] + 32))(v38);
  }
  else if (v39)
  {
    (*(void (**)(void *))(*v39 + 40))(v39);
  }
  LODWORD(__src) = 7;
  v36[0] = &unk_270445210;
  v36[1] = sub_25511AD34;
  unint64_t v37 = v36;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v36);
  if (v37 == v36)
  {
    (*(void (**)(void *))(v36[0] + 32))(v36);
  }
  else if (v37)
  {
    (*(void (**)(void *))(*v37 + 40))(v37);
  }
  LODWORD(__src) = 9;
  v34[0] = &unk_270445210;
  v34[1] = sub_25511ADF0;
  unint64_t v35 = v34;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v34);
  if (v35 == v34)
  {
    (*(void (**)(void *))(v34[0] + 32))(v34);
  }
  else if (v35)
  {
    (*(void (**)(void *))(*v35 + 40))(v35);
  }
  LODWORD(__src) = 10;
  v32[0] = &unk_270445210;
  v32[1] = sub_25511B044;
  unint64_t v33 = v32;
  sub_255112BE4(a1, 0, 0, 32, (char *)&__src, 1, v32);
  if (v33 == v32)
  {
    (*(void (**)(void *))(v32[0] + 32))(v32);
  }
  else if (v33)
  {
    (*(void (**)(void *))(*v33 + 40))(v33);
  }
  sub_25511F0EC(a1);
  sub_255111B60(a1);
  sub_255112194(a1);
  sub_2551126C4(a1);
  sub_25511F80C(a1);
  if (*((void *)&v30 + 1))
  {
    *(void *)&long long v31 = *((void *)&v30 + 1);
    operator delete(*((void **)&v30 + 1));
  }
  if ((void)v29)
  {
    *((void *)&v29 + 1) = v29;
    operator delete((void *)v29);
  }
  if (*((void *)&v27 + 1))
  {
    *(void *)&long long v28 = *((void *)&v27 + 1);
    operator delete(*((void **)&v27 + 1));
  }
  if ((void)v26)
  {
    *((void *)&v26 + 1) = v26;
    operator delete((void *)v26);
  }
}

void sub_255116514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50)
{
}

uint64_t sub_2551167E4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v12 = 5;
  strcpy((char *)__p, "queue");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v14);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_2550EE418();
  }
  char v10 = 5;
  strcpy((char *)v9, "event");
  sub_25512974C(a4, (uint64_t)v9, (uint64_t)__p);
  if (v13) {
    sub_2550EE418();
  }
  int v7 = __p[0];
  int v13 = -1;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  mlc_event_wait(*(void *)(*(void *)(a3 + 128) + 16 * (void)v7));
  if (v15 != -1) {
    ((void (*)(void **, unsigned char *))off_270445248[v15])(__p, v14);
  }
  return a2 + 1;
}

void sub_2551168FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_25511693C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x255116934);
}

uint64_t sub_255116958(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v12 = 5;
  strcpy((char *)__p, "queue");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v14);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15) {
    sub_2550EE418();
  }
  char v10 = 5;
  strcpy((char *)v9, "event");
  sub_25512974C(a4, (uint64_t)v9, (uint64_t)__p);
  if (v13) {
    sub_2550EE418();
  }
  int v7 = __p[0];
  int v13 = -1;
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  mlc_event_record(*(void *)(*(void *)(a3 + 128) + 16 * (void)v7));
  if (v15 != -1) {
    ((void (*)(void **, unsigned char *))off_270445248[v15])(__p, v14);
  }
  return a2 + 1;
}

void sub_255116A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
}

void sub_255116AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x255116AA8);
}

uint64_t sub_255116ACC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      int v13 = (int8x16_t *)(v10 + 16);
      int v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vaddq_s8(*v14, *v13);
        v15[-1] = vaddq_s8(v14[-1], v13[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v32 + v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    size_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vadd_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_255116CB0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    int v13 = (int16x8_t *)(v10 + 16);
    int v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vaddq_s16(*v14, *v13);
      v15[-1] = vaddq_s16(v14[-1], v13[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255116E48(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    int v13 = (int32x4_t *)(v10 + 16);
    int v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vaddq_s32(*v14, *v13);
      v15[-1] = vaddq_s32(v14[-1], v13[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255116FE0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (void *)(v9 + 8 * v12);
      uint64_t v21 = (uint64_t *)(v11 + v19);
      unint64_t v22 = (uint64_t *)(v10 + v19);
      do
      {
        uint64_t v24 = *v22++;
        uint64_t v23 = v24;
        uint64_t v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    int v13 = (int64x2_t *)(v10 + 16);
    int v14 = (int64x2_t *)(v11 + 16);
    int v15 = (int64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v17 = vaddq_s64(*v14, *v13);
      v15[-1] = vaddq_s64(v14[-1], v13[-1]);
      int64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255117178(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      int v13 = (int8x16_t *)(v10 + 16);
      int v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vaddq_s8(*v14, *v13);
        v15[-1] = vaddq_s8(v14[-1], v13[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v32 + v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vadd_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511735C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    int v13 = (int16x8_t *)(v10 + 16);
    int v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vaddq_s16(*v14, *v13);
      v15[-1] = vaddq_s16(v14[-1], v13[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_2551174F4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    int v13 = (int32x4_t *)(v10 + 16);
    int v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vaddq_s32(*v14, *v13);
      v15[-1] = vaddq_s32(v14[-1], v13[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511768C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (void *)(v9 + 8 * v12);
      uint64_t v21 = (uint64_t *)(v11 + v19);
      unint64_t v22 = (uint64_t *)(v10 + v19);
      do
      {
        uint64_t v24 = *v22++;
        uint64_t v23 = v24;
        uint64_t v25 = *v21++;
        *v20++ = v25 + v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    int v13 = (int64x2_t *)(v10 + 16);
    int v14 = (int64x2_t *)(v11 + 16);
    int v15 = (int64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v17 = vaddq_s64(*v14, *v13);
      v15[-1] = vaddq_s64(v14[-1], v13[-1]);
      int64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255117824(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (float *)(v9 + 4 * v12);
      uint64_t v21 = (float *)(v11 + v19);
      unint64_t v22 = (float *)(v10 + v19);
      do
      {
        float v23 = *v22++;
        float v24 = v23;
        float v25 = *v21++;
        *v20++ = v24 + v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    int v13 = (float32x4_t *)(v10 + 16);
    int v14 = (float32x4_t *)(v11 + 16);
    int v15 = (float32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v17 = vaddq_f32(*v13, *v14);
      v15[-1] = vaddq_f32(v13[-1], v14[-1]);
      float32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_2551179BC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (double *)(v9 + 8 * v12);
      uint64_t v21 = (double *)(v11 + v19);
      unint64_t v22 = (double *)(v10 + v19);
      do
      {
        double v23 = *v22++;
        double v24 = v23;
        double v25 = *v21++;
        *v20++ = v24 + v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    int v13 = (float64x2_t *)(v10 + 16);
    int v14 = (float64x2_t *)(v11 + 16);
    int v15 = (float64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v17 = vaddq_f64(*v13, *v14);
      v15[-1] = vaddq_f64(v13[-1], v14[-1]);
      float64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255117B54(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (char *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (char *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    int v13 = *v10++;
    int v12 = v13;
    int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_255117C68(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (_WORD *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (__int16 *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (__int16 *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    int v13 = *v10++;
    int v12 = v13;
    int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_255117D7C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (int *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (int *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (int *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    int v13 = *v10++;
    int v12 = v13;
    int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_255117E90(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    uint64_t v13 = *v10++;
    uint64_t v12 = v13;
    uint64_t v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_255117FA4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (unsigned char *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (unsigned __int8 *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    unsigned int v13 = *v10++;
    unsigned int v12 = v13;
    unsigned int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_2551180B8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (_WORD *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (unsigned __int16 *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (unsigned __int16 *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    unsigned int v13 = *v10++;
    unsigned int v12 = v13;
    unsigned int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_2551181CC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (int *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (int *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (unsigned int *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    unsigned int v13 = *v10++;
    unsigned int v12 = v13;
    unsigned int v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_2551182E0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (unint64_t *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (unint64_t *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    unint64_t v13 = *v10++;
    unint64_t v12 = v13;
    unint64_t v14 = *i++;
    *v9++ = v12 / v14;
  }
  return a2 + 1;
}

uint64_t sub_2551183F4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (float *)(v9 + 4 * v12);
      uint64_t v21 = (float *)(v11 + v19);
      unint64_t v22 = (float *)(v10 + v19);
      do
      {
        float v23 = *v22++;
        float v24 = v23;
        float v25 = *v21++;
        *v20++ = v24 / v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (float32x4_t *)(v10 + 16);
    unint64_t v14 = (float32x4_t *)(v11 + 16);
    int v15 = (float32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v17 = vdivq_f32(*v13, *v14);
      v15[-1] = vdivq_f32(v13[-1], v14[-1]);
      float32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511858C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (double *)(v9 + 8 * v12);
      uint64_t v21 = (double *)(v11 + v19);
      unint64_t v22 = (double *)(v10 + v19);
      do
      {
        double v23 = *v22++;
        double v24 = v23;
        double v25 = *v21++;
        *v20++ = v24 / v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    unint64_t v13 = (float64x2_t *)(v10 + 16);
    unint64_t v14 = (float64x2_t *)(v11 + 16);
    int v15 = (float64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v17 = vdivq_f64(*v13, *v14);
      v15[-1] = vdivq_f64(v13[-1], v14[-1]);
      float64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255118724(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      unint64_t v13 = (int8x16_t *)(v10 + 16);
      unint64_t v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vmulq_s8(*v14, *v13);
        v15[-1] = vmulq_s8(v14[-1], v13[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v32 * v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vmul_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_255118908(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    unint64_t v13 = (int16x8_t *)(v10 + 16);
    unint64_t v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vmulq_s16(*v14, *v13);
      v15[-1] = vmulq_s16(v14[-1], v13[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255118AA0(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = (int32x4_t *)(v10 + 16);
    unint64_t v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vmulq_s32(*v14, *v13);
      v15[-1] = vmulq_s32(v14[-1], v13[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255118C38(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    uint64_t v13 = *v10++;
    uint64_t v12 = v13;
    uint64_t v14 = *i++;
    *v9++ = v14 * v12;
  }
  return a2 + 1;
}

uint64_t sub_255118D4C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v13 = (int8x16_t *)(v10 + 16);
      uint64_t v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vmulq_s8(*v14, *v13);
        v15[-1] = vmulq_s8(v14[-1], v13[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v32 * v30;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vmul_s8(v25, v24);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_255118F30(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (int16x8_t *)(v10 + 16);
    uint64_t v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vmulq_s16(*v14, *v13);
      v15[-1] = vmulq_s16(v14[-1], v13[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_2551190C8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v25 * v23;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = (int32x4_t *)(v10 + 16);
    uint64_t v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vmulq_s32(*v14, *v13);
      v15[-1] = vmulq_s32(v14[-1], v13[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119260(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  for (uint64_t i = (uint64_t *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]); v8; --v8)
  {
    uint64_t v13 = *v10++;
    uint64_t v12 = v13;
    uint64_t v14 = *i++;
    *v9++ = v14 * v12;
  }
  return a2 + 1;
}

uint64_t sub_255119374(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (float *)(v9 + 4 * v12);
      uint64_t v21 = (float *)(v11 + v19);
      unint64_t v22 = (float *)(v10 + v19);
      do
      {
        float v23 = *v22++;
        float v24 = v23;
        float v25 = *v21++;
        *v20++ = v24 * v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = (float32x4_t *)(v10 + 16);
    uint64_t v14 = (float32x4_t *)(v11 + 16);
    int v15 = (float32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v17 = vmulq_f32(*v13, *v14);
      v15[-1] = vmulq_f32(v13[-1], v14[-1]);
      float32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511950C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (double *)(v9 + 8 * v12);
      uint64_t v21 = (double *)(v11 + v19);
      unint64_t v22 = (double *)(v10 + v19);
      do
      {
        double v23 = *v22++;
        double v24 = v23;
        double v25 = *v21++;
        *v20++ = v24 * v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v13 = (float64x2_t *)(v10 + 16);
    uint64_t v14 = (float64x2_t *)(v11 + 16);
    int v15 = (float64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v17 = vmulq_f64(*v13, *v14);
      v15[-1] = vmulq_f64(v13[-1], v14[-1]);
      float64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_2551196A4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v13 = (int8x16_t *)(v10 + 16);
      uint64_t v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vsubq_s8(*v13, *v14);
        v15[-1] = vsubq_s8(v13[-1], v14[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v30 - v32;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vsub_s8(v24, v25);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119888(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (int16x8_t *)(v10 + 16);
    uint64_t v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vsubq_s16(*v13, *v14);
      v15[-1] = vsubq_s16(v13[-1], v14[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119A20(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = (int32x4_t *)(v10 + 16);
    uint64_t v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vsubq_s32(*v13, *v14);
      v15[-1] = vsubq_s32(v13[-1], v14[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119BB8(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (void *)(v9 + 8 * v12);
      uint64_t v21 = (uint64_t *)(v11 + v19);
      unint64_t v22 = (uint64_t *)(v10 + v19);
      do
      {
        uint64_t v24 = *v22++;
        uint64_t v23 = v24;
        uint64_t v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v13 = (int64x2_t *)(v10 + 16);
    uint64_t v14 = (int64x2_t *)(v11 + 16);
    int v15 = (int64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v17 = vsubq_s64(*v13, *v14);
      v15[-1] = vsubq_s64(v13[-1], v14[-1]);
      int64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119D50(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
      goto LABEL_15;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20 || (unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_15;
    }
    if (v8 >= 0x20)
    {
      unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFE0;
      uint64_t v13 = (int8x16_t *)(v10 + 16);
      uint64_t v14 = (int8x16_t *)(v11 + 16);
      int v15 = (int8x16_t *)(v9 + 16);
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        int8x16_t v17 = vsubq_s8(*v13, *v14);
        v15[-1] = vsubq_s8(v13[-1], v14[-1]);
        int8x16_t *v15 = v17;
        v13 += 2;
        v14 += 2;
        v15 += 2;
        v16 -= 32;
      }
      while (v16);
      if (v8 == v12) {
        return a2 + 1;
      }
      if ((v8 & 0x18) == 0)
      {
LABEL_15:
        unint64_t v26 = v8 - v12;
        long long v27 = (unsigned char *)(v9 + v12);
        long long v28 = (char *)(v11 + v12);
        long long v29 = (char *)(v10 + v12);
        do
        {
          char v31 = *v29++;
          char v30 = v31;
          char v32 = *v28++;
          *v27++ = v30 - v32;
          --v26;
        }
        while (v26);
        return a2 + 1;
      }
    }
    else
    {
      unint64_t v12 = 0;
    }
    unint64_t v18 = v12;
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = (int8x8_t *)(v10 + v18);
    uint64_t v20 = (int8x8_t *)(v11 + v18);
    uint64_t v21 = (int8x8_t *)(v9 + v18);
    unint64_t v22 = v18 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      int8x8_t v23 = *v19++;
      int8x8_t v24 = v23;
      int8x8_t v25 = *v20++;
      *v21++ = vsub_s8(v24, v25);
      v22 += 8;
    }
    while (v22);
    if (v8 != v12) {
      goto LABEL_15;
    }
  }
  return a2 + 1;
}

uint64_t sub_255119F34(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 0x10)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 2 * v12;
      uint64_t v20 = (_WORD *)(v9 + 2 * v12);
      uint64_t v21 = (__int16 *)(v11 + v19);
      unint64_t v22 = (__int16 *)(v10 + v19);
      do
      {
        __int16 v24 = *v22++;
        __int16 v23 = v24;
        __int16 v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (int16x8_t *)(v10 + 16);
    uint64_t v14 = (int16x8_t *)(v11 + 16);
    int v15 = (int16x8_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      int16x8_t v17 = vsubq_s16(*v13, *v14);
      v15[-1] = vsubq_s16(v13[-1], v14[-1]);
      int16x8_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 16;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511A0CC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (_DWORD *)(v9 + 4 * v12);
      uint64_t v21 = (int *)(v11 + v19);
      unint64_t v22 = (int *)(v10 + v19);
      do
      {
        int v24 = *v22++;
        int v23 = v24;
        int v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = (int32x4_t *)(v10 + 16);
    uint64_t v14 = (int32x4_t *)(v11 + 16);
    int v15 = (int32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      int32x4_t v17 = vsubq_s32(*v13, *v14);
      v15[-1] = vsubq_s32(v13[-1], v14[-1]);
      int32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511A264(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (void *)(v9 + 8 * v12);
      uint64_t v21 = (uint64_t *)(v11 + v19);
      unint64_t v22 = (uint64_t *)(v10 + v19);
      do
      {
        uint64_t v24 = *v22++;
        uint64_t v23 = v24;
        uint64_t v25 = *v21++;
        *v20++ = v23 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v13 = (int64x2_t *)(v10 + 16);
    uint64_t v14 = (int64x2_t *)(v11 + 16);
    int v15 = (int64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int64x2_t v17 = vsubq_s64(*v13, *v14);
      v15[-1] = vsubq_s64(v13[-1], v14[-1]);
      int64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511A3FC(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 8)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 4 * v12;
      uint64_t v20 = (float *)(v9 + 4 * v12);
      uint64_t v21 = (float *)(v11 + v19);
      unint64_t v22 = (float *)(v10 + v19);
      do
      {
        float v23 = *v22++;
        float v24 = v23;
        float v25 = *v21++;
        *v20++ = v24 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = (float32x4_t *)(v10 + 16);
    uint64_t v14 = (float32x4_t *)(v11 + 16);
    int v15 = (float32x4_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      float32x4_t v17 = vsubq_f32(*v13, *v14);
      v15[-1] = vsubq_f32(v13[-1], v14[-1]);
      float32x4_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 8;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511A594(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  unint64_t v8 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
  uint64_t v9 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  uint64_t v10 = (*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v11 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
  if (v8)
  {
    if (v8 < 6)
    {
      unint64_t v12 = 0;
LABEL_9:
      unint64_t v18 = v8 - v12;
      uint64_t v19 = 8 * v12;
      uint64_t v20 = (double *)(v9 + 8 * v12);
      uint64_t v21 = (double *)(v11 + v19);
      unint64_t v22 = (double *)(v10 + v19);
      do
      {
        double v23 = *v22++;
        double v24 = v23;
        double v25 = *v21++;
        *v20++ = v24 - v25;
        --v18;
      }
      while (v18);
      return a2 + 1;
    }
    unint64_t v12 = 0;
    if ((unint64_t)(v9 - v10) < 0x20) {
      goto LABEL_9;
    }
    if ((unint64_t)(v9 - v11) < 0x20) {
      goto LABEL_9;
    }
    unint64_t v12 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v13 = (float64x2_t *)(v10 + 16);
    uint64_t v14 = (float64x2_t *)(v11 + 16);
    int v15 = (float64x2_t *)(v9 + 16);
    unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      float64x2_t v17 = vsubq_f64(*v13, *v14);
      v15[-1] = vsubq_f64(v13[-1], v14[-1]);
      float64x2_t *v15 = v17;
      v13 += 2;
      v14 += 2;
      v15 += 2;
      v16 -= 4;
    }
    while (v16);
    if (v8 != v12) {
      goto LABEL_9;
    }
  }
  return a2 + 1;
}

uint64_t sub_25511A72C()
{
  return -1;
}

uint64_t sub_25511A734()
{
  return -1;
}

uint64_t sub_25511A73C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  int v7 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  unint64_t v8 = (const void *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  size_t v9 = (*(uint64_t (**)(void))(*(void *)**a5 + 128))(**a5);
  memcpy(v7, v8, v9);
  return a2 + 1;
}

uint64_t sub_25511A808()
{
  return -1;
}

uint64_t sub_25511A810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511A8CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511A988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511AA44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511AB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511ABBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511AC78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511AD34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t **a5)
{
  (*(void (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v7)
  {
    uint64_t v8 = v7;
    unint64_t v9 = 0;
    do
    {
      sub_255129418(**a5);
      unint64_t v9 = sub_25511F47C(**a5, v9);
      --v8;
    }
    while (v8);
  }
  return a2 + 1;
}

uint64_t sub_25511ADF0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = (FILE **)MEMORY[0x263EF8348];
    do
    {
      uint64_t v14 = sub_255129418(**a5);
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(void *)v14;
      }
      if (fabsf(*(float *)(v8 + 4 * v12)) == INFINITY)
      {
        fprintf(*v13, "Inf in %s at index %zu\n", v15, v12);
        char v11 = 1;
      }
      unint64_t v12 = sub_25511F47C(**a5, v12);
      --v10;
    }
    while (v10);
    if (v11)
    {
      sub_25511B298(__p, "name");
      sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v25);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (v27 == 2)
      {
        if (SHIBYTE(v26) < 0)
        {
          sub_2550EABB0(__p, (void *)v25, *((unint64_t *)&v25 + 1));
        }
        else
        {
          *(_OWORD *)long long __p = v25;
          uint64_t v24 = v26;
        }
        float64x2_t v17 = *v13;
        int v18 = SHIBYTE(v24);
        uint64_t v19 = (void **)__p[0];
        uint64_t v20 = sub_255129418(**a5);
        uint64_t v21 = __p;
        if (v18 < 0) {
          uint64_t v21 = v19;
        }
        if (*(char *)(v20 + 23) >= 0) {
          unint64_t v22 = (const char *)v20;
        }
        else {
          unint64_t v22 = *(const char **)v20;
        }
        fprintf(v17, "%s: found invalid values in %s.\n", (const char *)v21, v22);
        abort();
      }
      sub_2550EE418();
    }
  }
  return a2 + 1;
}

void sub_25511AFFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_2550EE000((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_25511B028(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25511B044(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 176))(**a5);
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)**a5 + 120))(**a5);
  if (v9)
  {
    uint64_t v10 = v9;
    char v11 = 0;
    unint64_t v12 = 0;
    uint64_t v13 = (FILE **)MEMORY[0x263EF8348];
    do
    {
      uint64_t v14 = sub_255129418(**a5);
      if (*(char *)(v14 + 23) >= 0) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = *(void *)v14;
      }
      if (fabs(*(double *)(v8 + 8 * v12)) == INFINITY)
      {
        fprintf(*v13, "Inf in %s at index %zu\n", v15, v12);
        char v11 = 1;
      }
      unint64_t v12 = sub_25511F47C(**a5, v12);
      --v10;
    }
    while (v10);
    if (v11)
    {
      sub_25511B298(__p, "name");
      sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v25);
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (v27 == 2)
      {
        if (SHIBYTE(v26) < 0)
        {
          sub_2550EABB0(__p, (void *)v25, *((unint64_t *)&v25 + 1));
        }
        else
        {
          *(_OWORD *)long long __p = v25;
          uint64_t v24 = v26;
        }
        float64x2_t v17 = *v13;
        int v18 = SHIBYTE(v24);
        uint64_t v19 = (void **)__p[0];
        uint64_t v20 = sub_255129418(**a5);
        uint64_t v21 = __p;
        if (v18 < 0) {
          uint64_t v21 = v19;
        }
        if (*(char *)(v20 + 23) >= 0) {
          unint64_t v22 = (const char *)v20;
        }
        else {
          unint64_t v22 = *(const char **)v20;
        }
        fprintf(v17, "%s: found invalid values in %s.\n", (const char *)v21, v22);
        abort();
      }
      sub_2550EE418();
    }
  }
  return a2 + 1;
}

void sub_25511B250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_2550EE000((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_25511B27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_25511B298(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    int v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    int v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_25511B34C(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  int v6 = (void *)(a3 + 320);
  uint64_t v7 = sub_255129418(**a1);
  uint64_t v8 = sub_25511E0D0(v6, v7);
  if (v8)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, v8[5]);
    uint64_t v9 = sub_255123ECC(a3);
    char v31 = 14;
    strcpy((char *)__p, "debug-constant");
    int v10 = sub_25513B2F0(v9, (uint64_t)__p);
    int v11 = v10;
    if (v31 < 0)
    {
      operator delete(__p[0]);
      if (!v11) {
        goto LABEL_5;
      }
    }
    else if (!v10)
    {
LABEL_5:
      (*(void (**)(uint64_t, void))(*(void *)**a1 + 112))(**a1, 0);
      return a2 + 1;
    }
    sub_25511B700(**a1);
    goto LABEL_5;
  }
  sub_2551080CC((uint64_t)__p);
  uint64_t v13 = sub_2551084AC(__p, (uint64_t)"ICE: no constant for '", 22);
  uint64_t v14 = sub_255129418(**a1);
  int v15 = *(char *)(v14 + 23);
  if (v15 >= 0) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = *(void *)v14;
  }
  if (v15 >= 0) {
    uint64_t v17 = *(unsigned __int8 *)(v14 + 23);
  }
  else {
    uint64_t v17 = *(void *)(v14 + 8);
  }
  int v18 = sub_2551084AC(v13, v16, v17);
  sub_2551084AC(v18, (uint64_t)"' in ", 5);
  uint64_t v19 = (void *)std::ostream::operator<<();
  sub_2551084AC(v19, (uint64_t)"-element constant table.", 24);
  uint64_t v20 = *(void **)(a3 + 32);
  if ((v38 & 0x10) != 0)
  {
    unint64_t v23 = v37;
    if (v37 < v34)
    {
      unint64_t v37 = v34;
      unint64_t v23 = v34;
    }
    uint64_t v24 = (const void **)&v33;
  }
  else
  {
    if ((v38 & 8) == 0)
    {
      size_t v21 = 0;
      HIBYTE(v29) = 0;
      unint64_t v22 = v28;
      goto LABEL_29;
    }
    uint64_t v24 = (const void **)v32;
    unint64_t v23 = v32[2];
  }
  long long v25 = *v24;
  size_t v21 = v23 - (void)*v24;
  if (v21 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v21 >= 0x17)
  {
    uint64_t v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17) {
      uint64_t v26 = v21 | 7;
    }
    uint64_t v27 = v26 + 1;
    unint64_t v22 = operator new(v26 + 1);
    v28[1] = (void *)v21;
    unint64_t v29 = v27 | 0x8000000000000000;
    v28[0] = v22;
  }
  else
  {
    HIBYTE(v29) = v23 - *(unsigned char *)v24;
    unint64_t v22 = v28;
    if (!v21) {
      goto LABEL_29;
    }
  }
  memmove(v22, v25, v21);
LABEL_29:
  *((unsigned char *)v22 + v21) = 0;
  sub_25513A900(v20, 4, (uint64_t)v28);
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  __p[0] = *(void **)MEMORY[0x263F8C2C8];
  *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
  if (v36 < 0) {
    operator delete(v35);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v39);
  return -1;
}

void sub_25511B6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_25511B700(uint64_t a1)
{
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v3 = sub_255129418(a1);
  if (*(char *)(v3 + 23) >= 0) {
    size_t v4 = (const char *)v3;
  }
  else {
    size_t v4 = *(const char **)v3;
  }
  if (v2 != 9) {
    return printf("%s is not fp32. skipping.\n", v4);
  }
  size_t v5 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  printf("load %s(%p) = {\n", v4, v5);
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 176))(a1);
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1))
  {
    unint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      if (!v8) {
        putchar(9);
      }
      printf("%10.8f ", *(float *)(v6 + 4 * v7));
      if (v8 >= 5)
      {
        putchar(10);
        unint64_t v8 = 0;
      }
      else
      {
        ++v8;
      }
      ++v7;
    }
    while (v7 < (*(uint64_t (**)(uint64_t))(*(void *)a1 + 120))(a1));
    if (v8) {
      putchar(10);
    }
  }
  return puts("}");
}

uint64_t sub_25511B8E4(uint64_t *a1)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  v10[0] = &unk_270445210;
  v10[1] = sub_25511B34C;
  int v11 = v10;
  sub_255112BE4(a1, 0, 0, 27, 0, 0, v10);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void *))(*v11 + 40))(v11);
  }
  int v3 = 4;
  v8[0] = &unk_270445210;
  v8[1] = sub_25511BC64;
  uint64_t v9 = v8;
  sub_255112BE4(a1, (char *)&v3, 1, 42, 0, 0, v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  int v3 = 8;
  v6[0] = &unk_270445210;
  v6[1] = sub_25511C888;
  unint64_t v7 = v6;
  sub_255112BE4(a1, (char *)&v3, 1, 42, 0, 0, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  int v3 = 9;
  v4[0] = &unk_270445210;
  v4[1] = sub_25511D4AC;
  size_t v5 = v4;
  sub_255112BE4(a1, (char *)&v3, 1, 42, 0, 0, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_25511BC2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

uint64_t sub_25511BC64(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v62) = 6;
  strcpy((char *)&v61, "offset");
  sub_25512974C(a4, (uint64_t)&v61, (uint64_t)&v63);
  if (v65) {
    sub_2550EE418();
  }
  off_t v8 = v63;
  int v65 = -1;
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  HIBYTE(v60) = 4;
  strcpy((char *)__p, "path");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  long long v61 = v63;
  uint64_t v62 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SHIBYTE(v60) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v58[1]) = 4;
  strcpy((char *)v58, "type");
  sub_25512974C(a4, (uint64_t)v58, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)long long __p = v63;
  uint64_t v60 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  uint64_t v9 = sub_255123ECC(a3);
  BYTE7(v58[1]) = 18;
  strcpy((char *)v58, "load-constant-path");
  sub_25513B3A0(v9, (uint64_t)v58, (uint64_t)&v63);
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  memset(v56, 0, 24);
  uint64_t v10 = HIBYTE(v64);
  if (v64 >= 0) {
    int v11 = (std::string *)&v63;
  }
  else {
    int v11 = (std::string *)v63;
  }
  if (v64 < 0) {
    uint64_t v10 = *((void *)&v63 + 1);
  }
  sub_25511E3B0((std::string *)v56, v11, (std::string *)((char *)v11 + v10));
  memset(&v55, 0, sizeof(v55));
  uint64_t v12 = HIBYTE(v62);
  if (v62 >= 0) {
    uint64_t v13 = (std::string *)&v61;
  }
  else {
    uint64_t v13 = (std::string *)v61;
  }
  if (v62 < 0) {
    uint64_t v12 = *((void *)&v61 + 1);
  }
  sub_25511E3B0(&v55.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v56[23] & 0x80000000) != 0)
  {
    sub_2550EABB0(&v56[32], *(void **)v56, *(unint64_t *)&v56[8]);
  }
  else
  {
    *(_OWORD *)&v56[32] = *(_OWORD *)v56;
    uint64_t __dst_16 = *(void *)&v56[16];
  }
  sub_25511E254((std::__fs::filesystem::path *)&v56[32], &v55);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_2550EABB0(v58, *(void **)&v56[32], *(unint64_t *)&v56[40]);
  }
  else
  {
    v58[0] = *(_OWORD *)&v56[32];
    *(void *)&v58[1] = __dst_16;
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  long long v61 = v58[0];
  uint64_t v62 = *(void *)&v58[1];
  BYTE7(v58[1]) = 0;
  LOBYTE(v58[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_46:
    operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_47;
  }
  operator delete(*(void **)&v56[32]);
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_32:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_47:
  operator delete(*(void **)v56);
LABEL_33:
  uint64_t v14 = (void *)HIBYTE(v60);
  if (v60 < 0) {
    uint64_t v14 = __p[1];
  }
  if (v14 != (void *)8)
  {
LABEL_57:
    uint64_t v27 = sub_255123ECC(a3);
    BYTE7(v58[1]) = 14;
    strcpy((char *)v58, "debug-constant");
    int v28 = sub_25513B2F0(v27, (uint64_t)v58);
    int v29 = v28;
    if (SBYTE7(v58[1]) < 0)
    {
      operator delete(*(void **)&v58[0]);
      if (!v29) {
        goto LABEL_62;
      }
    }
    else if (!v28)
    {
LABEL_62:
      (*(void (**)(uint64_t, void))(*(void *)**a1 + 112))(**a1, 0);
      uint64_t v30 = a2 + 1;
      if (SHIBYTE(v64) < 0) {
        goto LABEL_124;
      }
LABEL_63:
      if (SHIBYTE(v60) < 0) {
        goto LABEL_125;
      }
      goto LABEL_64;
    }
    sub_25511B700(**a1);
    goto LABEL_62;
  }
  int v15 = __p;
  if (v60 < 0) {
    int v15 = (void **)__p[0];
  }
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(void *)&v58[0] = &v61;
    if (!sub_25511E730(a3 + 392, (uint64_t)&v61, (uint64_t)&unk_25513EFB0, (long long **)v58)[5]) {
      operator new();
    }
    uint64_t Data = MIL::Blob::StorageReader::GetDataView<unsigned char>();
    (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, Data);
    goto LABEL_57;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL) {
    goto LABEL_57;
  }
  size_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 128))(**a1);
  if (v62 >= 0) {
    uint64_t v17 = (const char *)&v61;
  }
  else {
    uint64_t v17 = (const char *)v61;
  }
  int v18 = open(v17, 0);
  if (v18 != -1)
  {
    uint64_t v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(void *)**a1 + 224))(**a1, v19);
    *(void *)&v58[0] = v19;
    operator new();
  }
  size_t v20 = 0x7FFFFFFFFFFFFFF7;
  int v21 = SHIBYTE(v62);
  if (v62 >= 0) {
    size_t v22 = HIBYTE(v62);
  }
  else {
    size_t v22 = *((void *)&v61 + 1);
  }
  unint64_t v23 = v22 + 36;
  if (v22 + 36 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  uint64_t v24 = *(void **)(a3 + 32);
  if (v23 <= 0x16)
  {
    qmemcpy(v56, "Could not open external constant at ", 36);
    long long v25 = &v56[36];
LABEL_69:
    if (v21 >= 0) {
      unint64_t v35 = &v61;
    }
    else {
      unint64_t v35 = (long long *)v61;
    }
    memmove(v25, v35, v22);
    goto LABEL_73;
  }
  uint64_t v32 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v32 = v23 | 7;
  }
  uint64_t v33 = v32 + 1;
  unint64_t v34 = (char *)operator new(v32 + 1);
  *(void *)&v56[8] = v22 + 36;
  *(void *)&v56[16] = v33 | 0x8000000000000000;
  *(void *)int v56 = v34;
  qmemcpy(v34, "Could not open external constant at ", 36);
  long long v25 = v34 + 36;
  if (v22) {
    goto LABEL_69;
  }
LABEL_73:
  v25[v22] = 0;
  uint64_t v36 = v56[23];
  if (v56[23] >= 0) {
    size_t v37 = 22;
  }
  else {
    size_t v37 = (*(void *)&v56[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (v56[23] < 0) {
    uint64_t v36 = *(void *)&v56[8];
  }
  if (v37 == v36)
  {
    if (v37 == 0x7FFFFFFFFFFFFFF6) {
      sub_2550EAC50();
    }
    if (v56[23] >= 0) {
      int v38 = v56;
    }
    else {
      int v38 = *(unsigned char **)v56;
    }
    if (v37 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v37 + 1 > 2 * v37) {
        unint64_t v39 = v37 + 1;
      }
      else {
        unint64_t v39 = 2 * v37;
      }
      if (v39 >= 0x17)
      {
        unint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v44 = v39 | 7;
        if (v44 == 23) {
          uint64_t v44 = v43;
        }
        size_t v20 = v44 + 1;
      }
      else
      {
        size_t v20 = 23;
      }
    }
    unint64_t v45 = operator new(v20);
    uint64_t v46 = v45;
    if (v37)
    {
      memmove(v45, v38, v37);
      v46[v37] = 58;
      if (v37 == 22) {
        goto LABEL_103;
      }
    }
    else
    {
      *unint64_t v45 = 58;
    }
    operator delete(v38);
LABEL_103:
    *(void *)int v56 = v46;
    *(void *)&v56[8] = v37 + 1;
    *(void *)&v56[16] = v20 | 0x8000000000000000;
    unint64_t v42 = &v46[v37 + 1];
    goto LABEL_104;
  }
  long long v40 = v56;
  if (v56[23] < 0) {
    long long v40 = *(unsigned char **)v56;
  }
  v40[v36] = 58;
  uint64_t v41 = v36 + 1;
  if ((v56[23] & 0x80000000) != 0) {
    *(void *)&v56[8] = v41;
  }
  else {
    v56[23] = v41 & 0x7F;
  }
  unint64_t v42 = &v40[v41];
LABEL_104:
  *unint64_t v42 = 0;
  *(_OWORD *)&v56[32] = *(_OWORD *)v56;
  uint64_t __dst_16 = *(void *)&v56[16];
  memset(v56, 0, 24);
  uint64_t v47 = __error();
  uint64_t v48 = strerror(*v47);
  size_t v49 = strlen(v48);
  size_t v50 = v49;
  if (__dst_16 >= 0) {
    std::string::size_type v51 = 22;
  }
  else {
    std::string::size_type v51 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (__dst_16 >= 0) {
    std::string::size_type v52 = HIBYTE(__dst_16);
  }
  else {
    std::string::size_type v52 = *(void *)&v56[40];
  }
  if (v51 - v52 >= v49)
  {
    if (v49)
    {
      if (__dst_16 >= 0) {
        unint64_t v53 = &v56[32];
      }
      else {
        unint64_t v53 = *(unsigned char **)&v56[32];
      }
      memmove(&v53[v52], v48, v49);
      std::string::size_type v54 = v52 + v50;
      if (SHIBYTE(__dst_16) < 0) {
        *(void *)&v56[40] = v52 + v50;
      }
      else {
        HIBYTE(__dst_16) = v54 & 0x7F;
      }
      v53[v54] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v56[32], v51, v52 + v49 - v51, v52, v52, 0, v49, v48);
  }
  v58[0] = *(_OWORD *)&v56[32];
  *(void *)&v58[1] = __dst_16;
  uint64_t __dst_16 = 0;
  *(_OWORD *)&v56[32] = 0uLL;
  sub_25513A900(v24, 5, (uint64_t)v58);
  if ((SBYTE7(v58[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0) {
      goto LABEL_122;
    }
LABEL_128:
    operator delete(*(void **)&v56[32]);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_129;
  }
  operator delete(*(void **)&v58[0]);
  if (SHIBYTE(__dst_16) < 0) {
    goto LABEL_128;
  }
LABEL_122:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_123;
  }
LABEL_129:
  operator delete(*(void **)v56);
LABEL_123:
  uint64_t v30 = -1;
  if ((SHIBYTE(v64) & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_124:
  operator delete((void *)v63);
  if (SHIBYTE(v60) < 0)
  {
LABEL_125:
    operator delete(__p[0]);
    if (SHIBYTE(v62) < 0) {
      goto LABEL_126;
    }
    return v30;
  }
LABEL_64:
  if (SHIBYTE(v62) < 0) {
LABEL_126:
  }
    operator delete((void *)v61);
  return v30;
}

void sub_25511C698(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  MEMORY[0x25A2886C0](v44, 0x20C4093837F09);
  JUMPOUT(0x25511C850);
}

void sub_25511C6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2550EAA90((uint64_t)va);
  close(v14);
  JUMPOUT(0x25511C850);
}

void sub_25511C704(void *a1)
{
  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_25511C71C()
{
  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x25511C850);
}

void sub_25511C768(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    JUMPOUT(0x25511C7B0);
  }
  JUMPOUT(0x25511C7BCLL);
}

void sub_25511C7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x25511C85CLL);
  }
  JUMPOUT(0x25511C860);
}

void sub_25511C7E4()
{
}

void sub_25511C7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_2550EE000(v28 - 96);
  if (a28 < 0) {
    JUMPOUT(0x25511C86CLL);
  }
  JUMPOUT(0x25511C870);
}

void sub_25511C810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_2550EE000(v32 - 96);
  if (a32 < 0) {
    JUMPOUT(0x25511C87CLL);
  }
  JUMPOUT(0x25511C880);
}

void sub_25511C834()
{
  sub_2550EE000(v0 - 96);
  JUMPOUT(0x25511C870);
}

void sub_25511C844()
{
}

void sub_25511C84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25511C888(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v62) = 6;
  strcpy((char *)&v61, "offset");
  sub_25512974C(a4, (uint64_t)&v61, (uint64_t)&v63);
  if (v65) {
    sub_2550EE418();
  }
  off_t v8 = v63;
  int v65 = -1;
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  HIBYTE(v60) = 4;
  strcpy((char *)__p, "path");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  long long v61 = v63;
  uint64_t v62 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SHIBYTE(v60) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v58[1]) = 4;
  strcpy((char *)v58, "type");
  sub_25512974C(a4, (uint64_t)v58, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)long long __p = v63;
  uint64_t v60 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  uint64_t v9 = sub_255123ECC(a3);
  BYTE7(v58[1]) = 18;
  strcpy((char *)v58, "load-constant-path");
  sub_25513B3A0(v9, (uint64_t)v58, (uint64_t)&v63);
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  memset(v56, 0, 24);
  uint64_t v10 = HIBYTE(v64);
  if (v64 >= 0) {
    int v11 = (std::string *)&v63;
  }
  else {
    int v11 = (std::string *)v63;
  }
  if (v64 < 0) {
    uint64_t v10 = *((void *)&v63 + 1);
  }
  sub_25511E3B0((std::string *)v56, v11, (std::string *)((char *)v11 + v10));
  memset(&v55, 0, sizeof(v55));
  uint64_t v12 = HIBYTE(v62);
  if (v62 >= 0) {
    uint64_t v13 = (std::string *)&v61;
  }
  else {
    uint64_t v13 = (std::string *)v61;
  }
  if (v62 < 0) {
    uint64_t v12 = *((void *)&v61 + 1);
  }
  sub_25511E3B0(&v55.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v56[23] & 0x80000000) != 0)
  {
    sub_2550EABB0(&v56[32], *(void **)v56, *(unint64_t *)&v56[8]);
  }
  else
  {
    *(_OWORD *)&v56[32] = *(_OWORD *)v56;
    uint64_t __dst_16 = *(void *)&v56[16];
  }
  sub_25511E254((std::__fs::filesystem::path *)&v56[32], &v55);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_2550EABB0(v58, *(void **)&v56[32], *(unint64_t *)&v56[40]);
  }
  else
  {
    v58[0] = *(_OWORD *)&v56[32];
    *(void *)&v58[1] = __dst_16;
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  long long v61 = v58[0];
  uint64_t v62 = *(void *)&v58[1];
  BYTE7(v58[1]) = 0;
  LOBYTE(v58[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_46:
    operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_47;
  }
  operator delete(*(void **)&v56[32]);
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_32:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_47:
  operator delete(*(void **)v56);
LABEL_33:
  int v14 = (void *)HIBYTE(v60);
  if (v60 < 0) {
    int v14 = __p[1];
  }
  if (v14 != (void *)8)
  {
LABEL_57:
    uint64_t v27 = sub_255123ECC(a3);
    BYTE7(v58[1]) = 14;
    strcpy((char *)v58, "debug-constant");
    int v28 = sub_25513B2F0(v27, (uint64_t)v58);
    int v29 = v28;
    if (SBYTE7(v58[1]) < 0)
    {
      operator delete(*(void **)&v58[0]);
      if (!v29) {
        goto LABEL_62;
      }
    }
    else if (!v28)
    {
LABEL_62:
      (*(void (**)(uint64_t, void))(*(void *)**a1 + 112))(**a1, 0);
      uint64_t v30 = a2 + 1;
      if (SHIBYTE(v64) < 0) {
        goto LABEL_124;
      }
LABEL_63:
      if (SHIBYTE(v60) < 0) {
        goto LABEL_125;
      }
      goto LABEL_64;
    }
    sub_25511B700(**a1);
    goto LABEL_62;
  }
  int v15 = __p;
  if (v60 < 0) {
    int v15 = (void **)__p[0];
  }
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(void *)&v58[0] = &v61;
    if (!sub_25511E730(a3 + 392, (uint64_t)&v61, (uint64_t)&unk_25513EFB0, (long long **)v58)[5]) {
      operator new();
    }
    uint64_t v26 = MIL::Blob::StorageReader::GetDataView<MIL::Fp16>();
    (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, v26);
    goto LABEL_57;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL) {
    goto LABEL_57;
  }
  size_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 128))(**a1);
  if (v62 >= 0) {
    uint64_t v17 = (const char *)&v61;
  }
  else {
    uint64_t v17 = (const char *)v61;
  }
  int v18 = open(v17, 0);
  if (v18 != -1)
  {
    uint64_t v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(void *)**a1 + 224))(**a1, v19);
    *(void *)&v58[0] = v19;
    operator new();
  }
  size_t v20 = 0x7FFFFFFFFFFFFFF7;
  int v21 = SHIBYTE(v62);
  if (v62 >= 0) {
    size_t v22 = HIBYTE(v62);
  }
  else {
    size_t v22 = *((void *)&v61 + 1);
  }
  unint64_t v23 = v22 + 36;
  if (v22 + 36 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  uint64_t v24 = *(void **)(a3 + 32);
  if (v23 <= 0x16)
  {
    qmemcpy(v56, "Could not open external constant at ", 36);
    long long v25 = &v56[36];
LABEL_69:
    if (v21 >= 0) {
      unint64_t v35 = &v61;
    }
    else {
      unint64_t v35 = (long long *)v61;
    }
    memmove(v25, v35, v22);
    goto LABEL_73;
  }
  uint64_t v32 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v32 = v23 | 7;
  }
  uint64_t v33 = v32 + 1;
  unint64_t v34 = (char *)operator new(v32 + 1);
  *(void *)&v56[8] = v22 + 36;
  *(void *)&v56[16] = v33 | 0x8000000000000000;
  *(void *)int v56 = v34;
  qmemcpy(v34, "Could not open external constant at ", 36);
  long long v25 = v34 + 36;
  if (v22) {
    goto LABEL_69;
  }
LABEL_73:
  v25[v22] = 0;
  uint64_t v36 = v56[23];
  if (v56[23] >= 0) {
    size_t v37 = 22;
  }
  else {
    size_t v37 = (*(void *)&v56[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (v56[23] < 0) {
    uint64_t v36 = *(void *)&v56[8];
  }
  if (v37 == v36)
  {
    if (v37 == 0x7FFFFFFFFFFFFFF6) {
      sub_2550EAC50();
    }
    if (v56[23] >= 0) {
      int v38 = v56;
    }
    else {
      int v38 = *(unsigned char **)v56;
    }
    if (v37 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v37 + 1 > 2 * v37) {
        unint64_t v39 = v37 + 1;
      }
      else {
        unint64_t v39 = 2 * v37;
      }
      if (v39 >= 0x17)
      {
        unint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v44 = v39 | 7;
        if (v44 == 23) {
          uint64_t v44 = v43;
        }
        size_t v20 = v44 + 1;
      }
      else
      {
        size_t v20 = 23;
      }
    }
    unint64_t v45 = operator new(v20);
    uint64_t v46 = v45;
    if (v37)
    {
      memmove(v45, v38, v37);
      v46[v37] = 58;
      if (v37 == 22) {
        goto LABEL_103;
      }
    }
    else
    {
      *unint64_t v45 = 58;
    }
    operator delete(v38);
LABEL_103:
    *(void *)int v56 = v46;
    *(void *)&v56[8] = v37 + 1;
    *(void *)&v56[16] = v20 | 0x8000000000000000;
    unint64_t v42 = &v46[v37 + 1];
    goto LABEL_104;
  }
  long long v40 = v56;
  if (v56[23] < 0) {
    long long v40 = *(unsigned char **)v56;
  }
  v40[v36] = 58;
  uint64_t v41 = v36 + 1;
  if ((v56[23] & 0x80000000) != 0) {
    *(void *)&v56[8] = v41;
  }
  else {
    v56[23] = v41 & 0x7F;
  }
  unint64_t v42 = &v40[v41];
LABEL_104:
  *unint64_t v42 = 0;
  *(_OWORD *)&v56[32] = *(_OWORD *)v56;
  uint64_t __dst_16 = *(void *)&v56[16];
  memset(v56, 0, 24);
  uint64_t v47 = __error();
  uint64_t v48 = strerror(*v47);
  size_t v49 = strlen(v48);
  size_t v50 = v49;
  if (__dst_16 >= 0) {
    std::string::size_type v51 = 22;
  }
  else {
    std::string::size_type v51 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (__dst_16 >= 0) {
    std::string::size_type v52 = HIBYTE(__dst_16);
  }
  else {
    std::string::size_type v52 = *(void *)&v56[40];
  }
  if (v51 - v52 >= v49)
  {
    if (v49)
    {
      if (__dst_16 >= 0) {
        unint64_t v53 = &v56[32];
      }
      else {
        unint64_t v53 = *(unsigned char **)&v56[32];
      }
      memmove(&v53[v52], v48, v49);
      std::string::size_type v54 = v52 + v50;
      if (SHIBYTE(__dst_16) < 0) {
        *(void *)&v56[40] = v52 + v50;
      }
      else {
        HIBYTE(__dst_16) = v54 & 0x7F;
      }
      v53[v54] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v56[32], v51, v52 + v49 - v51, v52, v52, 0, v49, v48);
  }
  v58[0] = *(_OWORD *)&v56[32];
  *(void *)&v58[1] = __dst_16;
  uint64_t __dst_16 = 0;
  *(_OWORD *)&v56[32] = 0uLL;
  sub_25513A900(v24, 5, (uint64_t)v58);
  if ((SBYTE7(v58[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0) {
      goto LABEL_122;
    }
LABEL_128:
    operator delete(*(void **)&v56[32]);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_129;
  }
  operator delete(*(void **)&v58[0]);
  if (SHIBYTE(__dst_16) < 0) {
    goto LABEL_128;
  }
LABEL_122:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_123;
  }
LABEL_129:
  operator delete(*(void **)v56);
LABEL_123:
  uint64_t v30 = -1;
  if ((SHIBYTE(v64) & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_124:
  operator delete((void *)v63);
  if (SHIBYTE(v60) < 0)
  {
LABEL_125:
    operator delete(__p[0]);
    if (SHIBYTE(v62) < 0) {
      goto LABEL_126;
    }
    return v30;
  }
LABEL_64:
  if (SHIBYTE(v62) < 0) {
LABEL_126:
  }
    operator delete((void *)v61);
  return v30;
}

void sub_25511D2BC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  MEMORY[0x25A2886C0](v44, 0x20C4093837F09);
  JUMPOUT(0x25511D474);
}

void sub_25511D318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2550EAA90((uint64_t)va);
  close(v14);
  JUMPOUT(0x25511D474);
}

void sub_25511D328(void *a1)
{
  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_25511D340()
{
  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x25511D474);
}

void sub_25511D38C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    JUMPOUT(0x25511D3D4);
  }
  JUMPOUT(0x25511D3E0);
}

void sub_25511D3F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x25511D480);
  }
  JUMPOUT(0x25511D484);
}

void sub_25511D408()
{
}

void sub_25511D410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_2550EE000(v28 - 96);
  if (a28 < 0) {
    JUMPOUT(0x25511D490);
  }
  JUMPOUT(0x25511D494);
}

void sub_25511D434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_2550EE000(v32 - 96);
  if (a32 < 0) {
    JUMPOUT(0x25511D4A0);
  }
  JUMPOUT(0x25511D4A4);
}

void sub_25511D458()
{
  sub_2550EE000(v0 - 96);
  JUMPOUT(0x25511D494);
}

void sub_25511D468()
{
}

void sub_25511D470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25511D4AC(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v62) = 6;
  strcpy((char *)&v61, "offset");
  sub_25512974C(a4, (uint64_t)&v61, (uint64_t)&v63);
  if (v65) {
    sub_2550EE418();
  }
  off_t v8 = v63;
  int v65 = -1;
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  HIBYTE(v60) = 4;
  strcpy((char *)__p, "path");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  long long v61 = v63;
  uint64_t v62 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SHIBYTE(v60) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v58[1]) = 4;
  strcpy((char *)v58, "type");
  sub_25512974C(a4, (uint64_t)v58, (uint64_t)&v63);
  if (v65 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)long long __p = v63;
  uint64_t v60 = v64;
  uint64_t v64 = 0;
  long long v63 = 0uLL;
  int v65 = -1;
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  uint64_t v9 = sub_255123ECC(a3);
  BYTE7(v58[1]) = 18;
  strcpy((char *)v58, "load-constant-path");
  sub_25513B3A0(v9, (uint64_t)v58, (uint64_t)&v63);
  if (SBYTE7(v58[1]) < 0) {
    operator delete(*(void **)&v58[0]);
  }
  memset(v56, 0, 24);
  uint64_t v10 = HIBYTE(v64);
  if (v64 >= 0) {
    int v11 = (std::string *)&v63;
  }
  else {
    int v11 = (std::string *)v63;
  }
  if (v64 < 0) {
    uint64_t v10 = *((void *)&v63 + 1);
  }
  sub_25511E3B0((std::string *)v56, v11, (std::string *)((char *)v11 + v10));
  memset(&v55, 0, sizeof(v55));
  uint64_t v12 = HIBYTE(v62);
  if (v62 >= 0) {
    uint64_t v13 = (std::string *)&v61;
  }
  else {
    uint64_t v13 = (std::string *)v61;
  }
  if (v62 < 0) {
    uint64_t v12 = *((void *)&v61 + 1);
  }
  sub_25511E3B0(&v55.__pn_, v13, (std::string *)((char *)v13 + v12));
  if ((v56[23] & 0x80000000) != 0)
  {
    sub_2550EABB0(&v56[32], *(void **)v56, *(unint64_t *)&v56[8]);
  }
  else
  {
    *(_OWORD *)&v56[32] = *(_OWORD *)v56;
    uint64_t __dst_16 = *(void *)&v56[16];
  }
  sub_25511E254((std::__fs::filesystem::path *)&v56[32], &v55);
  if (SHIBYTE(__dst_16) < 0)
  {
    sub_2550EABB0(v58, *(void **)&v56[32], *(unint64_t *)&v56[40]);
  }
  else
  {
    v58[0] = *(_OWORD *)&v56[32];
    *(void *)&v58[1] = __dst_16;
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)v61);
  }
  long long v61 = v58[0];
  uint64_t v62 = *(void *)&v58[1];
  BYTE7(v58[1]) = 0;
  LOBYTE(v58[0]) = 0;
  if ((SHIBYTE(__dst_16) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
LABEL_46:
    operator delete(v55.__pn_.__r_.__value_.__l.__data_);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_47;
  }
  operator delete(*(void **)&v56[32]);
  if (SHIBYTE(v55.__pn_.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_46;
  }
LABEL_32:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_33;
  }
LABEL_47:
  operator delete(*(void **)v56);
LABEL_33:
  int v14 = (void *)HIBYTE(v60);
  if (v60 < 0) {
    int v14 = __p[1];
  }
  if (v14 != (void *)8)
  {
LABEL_57:
    uint64_t v27 = sub_255123ECC(a3);
    BYTE7(v58[1]) = 14;
    strcpy((char *)v58, "debug-constant");
    int v28 = sub_25513B2F0(v27, (uint64_t)v58);
    int v29 = v28;
    if (SBYTE7(v58[1]) < 0)
    {
      operator delete(*(void **)&v58[0]);
      if (!v29) {
        goto LABEL_62;
      }
    }
    else if (!v28)
    {
LABEL_62:
      (*(void (**)(uint64_t, void))(*(void *)**a1 + 112))(**a1, 0);
      uint64_t v30 = a2 + 1;
      if (SHIBYTE(v64) < 0) {
        goto LABEL_124;
      }
LABEL_63:
      if (SHIBYTE(v60) < 0) {
        goto LABEL_125;
      }
      goto LABEL_64;
    }
    sub_25511B700(**a1);
    goto LABEL_62;
  }
  int v15 = __p;
  if (v60 < 0) {
    int v15 = (void **)__p[0];
  }
  if (*v15 == (void *)0x626F6C625F6C696DLL)
  {
    *(void *)&v58[0] = &v61;
    if (!sub_25511E730(a3 + 392, (uint64_t)&v61, (uint64_t)&unk_25513EFB0, (long long **)v58)[5]) {
      operator new();
    }
    uint64_t Data = MIL::Blob::StorageReader::GetDataView<float>();
    (*(void (**)(uint64_t, uint64_t))(*(void *)**a1 + 224))(**a1, Data);
    goto LABEL_57;
  }
  if (*v15 != (void *)0x7761725F70616D6DLL) {
    goto LABEL_57;
  }
  size_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 128))(**a1);
  if (v62 >= 0) {
    uint64_t v17 = (const char *)&v61;
  }
  else {
    uint64_t v17 = (const char *)v61;
  }
  int v18 = open(v17, 0);
  if (v18 != -1)
  {
    uint64_t v19 = mmap(0, v16, 1, 2, v18, v8);
    (*(void (**)(uint64_t, void *))(*(void *)**a1 + 224))(**a1, v19);
    *(void *)&v58[0] = v19;
    operator new();
  }
  size_t v20 = 0x7FFFFFFFFFFFFFF7;
  int v21 = SHIBYTE(v62);
  if (v62 >= 0) {
    size_t v22 = HIBYTE(v62);
  }
  else {
    size_t v22 = *((void *)&v61 + 1);
  }
  unint64_t v23 = v22 + 36;
  if (v22 + 36 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  uint64_t v24 = *(void **)(a3 + 32);
  if (v23 <= 0x16)
  {
    qmemcpy(v56, "Could not open external constant at ", 36);
    long long v25 = &v56[36];
LABEL_69:
    if (v21 >= 0) {
      unint64_t v35 = &v61;
    }
    else {
      unint64_t v35 = (long long *)v61;
    }
    memmove(v25, v35, v22);
    goto LABEL_73;
  }
  uint64_t v32 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v23 | 7) != 0x17) {
    uint64_t v32 = v23 | 7;
  }
  uint64_t v33 = v32 + 1;
  unint64_t v34 = (char *)operator new(v32 + 1);
  *(void *)&v56[8] = v22 + 36;
  *(void *)&v56[16] = v33 | 0x8000000000000000;
  *(void *)int v56 = v34;
  qmemcpy(v34, "Could not open external constant at ", 36);
  long long v25 = v34 + 36;
  if (v22) {
    goto LABEL_69;
  }
LABEL_73:
  v25[v22] = 0;
  uint64_t v36 = v56[23];
  if (v56[23] >= 0) {
    size_t v37 = 22;
  }
  else {
    size_t v37 = (*(void *)&v56[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (v56[23] < 0) {
    uint64_t v36 = *(void *)&v56[8];
  }
  if (v37 == v36)
  {
    if (v37 == 0x7FFFFFFFFFFFFFF6) {
      sub_2550EAC50();
    }
    if (v56[23] >= 0) {
      int v38 = v56;
    }
    else {
      int v38 = *(unsigned char **)v56;
    }
    if (v37 <= 0x3FFFFFFFFFFFFFF2)
    {
      if (v37 + 1 > 2 * v37) {
        unint64_t v39 = v37 + 1;
      }
      else {
        unint64_t v39 = 2 * v37;
      }
      if (v39 >= 0x17)
      {
        unint64_t v43 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v44 = v39 | 7;
        if (v44 == 23) {
          uint64_t v44 = v43;
        }
        size_t v20 = v44 + 1;
      }
      else
      {
        size_t v20 = 23;
      }
    }
    unint64_t v45 = operator new(v20);
    uint64_t v46 = v45;
    if (v37)
    {
      memmove(v45, v38, v37);
      v46[v37] = 58;
      if (v37 == 22) {
        goto LABEL_103;
      }
    }
    else
    {
      *unint64_t v45 = 58;
    }
    operator delete(v38);
LABEL_103:
    *(void *)int v56 = v46;
    *(void *)&v56[8] = v37 + 1;
    *(void *)&v56[16] = v20 | 0x8000000000000000;
    unint64_t v42 = &v46[v37 + 1];
    goto LABEL_104;
  }
  long long v40 = v56;
  if (v56[23] < 0) {
    long long v40 = *(unsigned char **)v56;
  }
  v40[v36] = 58;
  uint64_t v41 = v36 + 1;
  if ((v56[23] & 0x80000000) != 0) {
    *(void *)&v56[8] = v41;
  }
  else {
    v56[23] = v41 & 0x7F;
  }
  unint64_t v42 = &v40[v41];
LABEL_104:
  *unint64_t v42 = 0;
  *(_OWORD *)&v56[32] = *(_OWORD *)v56;
  uint64_t __dst_16 = *(void *)&v56[16];
  memset(v56, 0, 24);
  uint64_t v47 = __error();
  uint64_t v48 = strerror(*v47);
  size_t v49 = strlen(v48);
  size_t v50 = v49;
  if (__dst_16 >= 0) {
    std::string::size_type v51 = 22;
  }
  else {
    std::string::size_type v51 = (__dst_16 & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if (__dst_16 >= 0) {
    std::string::size_type v52 = HIBYTE(__dst_16);
  }
  else {
    std::string::size_type v52 = *(void *)&v56[40];
  }
  if (v51 - v52 >= v49)
  {
    if (v49)
    {
      if (__dst_16 >= 0) {
        unint64_t v53 = &v56[32];
      }
      else {
        unint64_t v53 = *(unsigned char **)&v56[32];
      }
      memmove(&v53[v52], v48, v49);
      std::string::size_type v54 = v52 + v50;
      if (SHIBYTE(__dst_16) < 0) {
        *(void *)&v56[40] = v52 + v50;
      }
      else {
        HIBYTE(__dst_16) = v54 & 0x7F;
      }
      v53[v54] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace((std::string *)&v56[32], v51, v52 + v49 - v51, v52, v52, 0, v49, v48);
  }
  v58[0] = *(_OWORD *)&v56[32];
  *(void *)&v58[1] = __dst_16;
  uint64_t __dst_16 = 0;
  *(_OWORD *)&v56[32] = 0uLL;
  sub_25513A900(v24, 5, (uint64_t)v58);
  if ((SBYTE7(v58[1]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__dst_16) & 0x80000000) == 0) {
      goto LABEL_122;
    }
LABEL_128:
    operator delete(*(void **)&v56[32]);
    if ((v56[23] & 0x80000000) == 0) {
      goto LABEL_123;
    }
    goto LABEL_129;
  }
  operator delete(*(void **)&v58[0]);
  if (SHIBYTE(__dst_16) < 0) {
    goto LABEL_128;
  }
LABEL_122:
  if ((v56[23] & 0x80000000) == 0) {
    goto LABEL_123;
  }
LABEL_129:
  operator delete(*(void **)v56);
LABEL_123:
  uint64_t v30 = -1;
  if ((SHIBYTE(v64) & 0x80000000) == 0) {
    goto LABEL_63;
  }
LABEL_124:
  operator delete((void *)v63);
  if (SHIBYTE(v60) < 0)
  {
LABEL_125:
    operator delete(__p[0]);
    if (SHIBYTE(v62) < 0) {
      goto LABEL_126;
    }
    return v30;
  }
LABEL_64:
  if (SHIBYTE(v62) < 0) {
LABEL_126:
  }
    operator delete((void *)v61);
  return v30;
}

void sub_25511DEE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  MEMORY[0x25A2886C0](v44, 0x20C4093837F09);
  JUMPOUT(0x25511E098);
}

void sub_25511DF3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_2550EAA90((uint64_t)va);
  close(v14);
  JUMPOUT(0x25511E098);
}

void sub_25511DF4C(void *a1)
{
  __cxa_begin_catch(a1);
  munmap(v1, v2);
  __cxa_rethrow();
}

void sub_25511DF64()
{
  __cxa_end_catch();
  close(v0);
  JUMPOUT(0x25511E098);
}

void sub_25511DFB0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    JUMPOUT(0x25511DFF8);
  }
  JUMPOUT(0x25511E004);
}

void sub_25511E018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    JUMPOUT(0x25511E0A4);
  }
  JUMPOUT(0x25511E0A8);
}

void sub_25511E02C()
{
}

void sub_25511E034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_2550EE000(v28 - 96);
  if (a28 < 0) {
    JUMPOUT(0x25511E0B4);
  }
  JUMPOUT(0x25511E0B8);
}

void sub_25511E058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  sub_2550EE000(v32 - 96);
  if (a32 < 0) {
    JUMPOUT(0x25511E0C4);
  }
  JUMPOUT(0x25511E0C8);
}

void sub_25511E07C()
{
  sub_2550EE000(v0 - 96);
  JUMPOUT(0x25511E0B8);
}

void sub_25511E08C()
{
}

void sub_25511E094(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (*(char *)(v32 - 73) < 0) {
    operator delete(*(void **)(v32 - 96));
  }
  if (a32 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 105) < 0) {
    operator delete(*(void **)(v32 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25511E0D0(void *a1, uint64_t a2)
{
  size_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  uint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      size_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      uint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

std::__fs::filesystem::path *sub_25511E254(std::__fs::filesystem::path *a1, std::__fs::filesystem::path *this)
{
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
  {
    if (a1 != this)
    {
      char v4 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v4 >= 0) {
          unint64_t v11 = this;
        }
        else {
          unint64_t v11 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
        }
        if (v4 >= 0) {
          size_t size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t size = this->__pn_.__r_.__value_.__l.__size_;
        }
        sub_2550EE2F4((void **)&a1->__pn_.__r_.__value_.__l.__data_, v11, size);
      }
      else if ((*((unsigned char *)&this->__pn_.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        sub_2550EE22C(a1, this->__pn_.__r_.__value_.__l.__data_, this->__pn_.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v5 = *(_OWORD *)&this->__pn_.__r_.__value_.__l.__data_;
        a1->__pn_.__r_.__value_.__r.__words[2] = this->__pn_.__r_.__value_.__r.__words[2];
        *(_OWORD *)&a1->__pn_.__r_.__value_.__l.__data_ = v5;
      }
    }
  }
  else
  {
    if (std::__fs::filesystem::path::__filename(a1).__size_) {
      std::string::push_back(&a1->__pn_, 47);
    }
    int v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    if (v6 >= 0) {
      int8x8_t v7 = this;
    }
    else {
      int8x8_t v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
    }
    if (v6 >= 0) {
      size_t v8 = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v8 = this->__pn_.__r_.__value_.__l.__size_;
    }
    if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v10 = a1->__pn_.__r_.__value_.__l.__size_;
      std::string::size_type v9 = (a1->__pn_.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    }
    else
    {
      std::string::size_type v9 = 22;
      std::string::size_type v10 = HIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]);
    }
    if (v9 - v10 >= v8)
    {
      if (v8)
      {
        uint64_t v13 = a1;
        if ((*((unsigned char *)&a1->__pn_.__r_.__value_.__s + 23) & 0x80) != 0) {
          uint64_t v13 = (std::__fs::filesystem::path *)a1->__pn_.__r_.__value_.__r.__words[0];
        }
        memmove((char *)v13 + v10, v7, v8);
        std::string::size_type v14 = v10 + v8;
        if (SHIBYTE(a1->__pn_.__r_.__value_.__r.__words[2]) < 0) {
          a1->__pn_.__r_.__value_.__l.__size_ = v14;
        }
        else {
          *((unsigned char *)&a1->__pn_.__r_.__value_.__s + 23) = v14 & 0x7F;
        }
        v13->__pn_.__r_.__value_.__s.__data_[v14] = 0;
      }
    }
    else
    {
      std::string::__grow_by_and_replace(&a1->__pn_, v9, v8 - v9 + v10, v10, v10, 0, v8, (const std::string::value_type *)v7);
    }
  }
  return a1;
}

std::string *sub_25511E3B0(std::string *this, std::string *__src, std::string *a3)
{
  int v6 = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  size_t v7 = (char *)a3 - (char *)__src;
  if (v6 < 0)
  {
    if (a3 == __src) {
      return this;
    }
    size_t size = this->__r_.__value_.__l.__size_;
    unint64_t v12 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    unint64_t v11 = (std::string *)this->__r_.__value_.__r.__words[0];
    unint64_t v10 = HIBYTE(v12);
    if (this->__r_.__value_.__r.__words[0] > (unint64_t)__src) {
      goto LABEL_12;
    }
LABEL_7:
    if ((std::string *)((char *)&v11->__r_.__value_.__l.__data_ + size + 1) <= __src) {
      goto LABEL_12;
    }
    if (v7 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    if (v7 > 0x16)
    {
      uint64_t v24 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17) {
        uint64_t v24 = v7 | 7;
      }
      uint64_t v25 = v24 + 1;
      uint64_t v13 = (void **)operator new(v24 + 1);
      size_t v40 = v7;
      int64_t v41 = v25 | 0x8000000000000000;
      long long __dst = v13;
      if (a3 == __src)
      {
LABEL_38:
        *(unsigned char *)uint64_t v13 = 0;
        if (v41 >= 0) {
          p_dst = (void **)&__dst;
        }
        else {
          p_dst = __dst;
        }
        if (v41 >= 0) {
          size_t v27 = HIBYTE(v41);
        }
        else {
          size_t v27 = v40;
        }
        if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::size_type v29 = this->__r_.__value_.__l.__size_;
          std::string::size_type v28 = (this->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
        }
        else
        {
          std::string::size_type v28 = 22;
          std::string::size_type v29 = HIBYTE(this->__r_.__value_.__r.__words[2]);
        }
        if (v28 - v29 >= v27)
        {
          if (v27)
          {
            uint64_t v30 = this;
            if ((*((unsigned char *)&this->__r_.__value_.__s + 23) & 0x80) != 0) {
              uint64_t v30 = (std::string *)this->__r_.__value_.__r.__words[0];
            }
            memmove((char *)v30 + v29, p_dst, v27);
            std::string::size_type v31 = v29 + v27;
            if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
            {
              this->__r_.__value_.__l.__size_ = v31;
              v30->__r_.__value_.__s.__data_[v31] = 0;
              if ((SHIBYTE(v41) & 0x80000000) == 0) {
                return this;
              }
              goto LABEL_55;
            }
            *((unsigned char *)&this->__r_.__value_.__s + 23) = v31 & 0x7F;
            v30->__r_.__value_.__s.__data_[v31] = 0;
          }
        }
        else
        {
          std::string::__grow_by_and_replace(this, v28, v27 - v28 + v29, v29, v29, 0, v27, (const std::string::value_type *)p_dst);
        }
        if ((SHIBYTE(v41) & 0x80000000) == 0) {
          return this;
        }
LABEL_55:
        operator delete(__dst);
        return this;
      }
    }
    else
    {
      HIBYTE(v41) = (_BYTE)a3 - (_BYTE)__src;
      uint64_t v13 = (void **)&__dst;
      if (a3 == __src) {
        goto LABEL_38;
      }
    }
    memcpy(v13, __src, v7);
    uint64_t v13 = (void **)((char *)v13 + v7);
    goto LABEL_38;
  }
  if (a3 == __src) {
    return this;
  }
  size_t size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  unint64_t v9 = 22;
  LOBYTE(v10) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  unint64_t v11 = this;
  if (this <= __src) {
    goto LABEL_7;
  }
LABEL_12:
  if (v9 - size >= v7)
  {
    size_t v20 = this;
    if ((v10 & 0x80) == 0) {
      goto LABEL_31;
    }
  }
  else
  {
    size_t v14 = 0x7FFFFFFFFFFFFFF7;
    if (0x7FFFFFFFFFFFFFF7 - v9 < v7 + size - v9) {
      sub_2550EAC50();
    }
    uint64_t v15 = this;
    if (v6 < 0) {
      uint64_t v15 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    if (v9 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v16 = 2 * v9;
      if (v7 + size > 2 * v9) {
        unint64_t v16 = v7 + size;
      }
      uint64_t v17 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v16 | 7) != 0x17) {
        uint64_t v17 = v16 | 7;
      }
      if (v16 >= 0x17) {
        size_t v14 = v17 + 1;
      }
      else {
        size_t v14 = 23;
      }
    }
    uint64_t v18 = operator new(v14);
    std::string::size_type v19 = (std::string::size_type)v18;
    if (size) {
      memmove(v18, v15, size);
    }
    if (v9 != 22) {
      operator delete(v15);
    }
    this->__r_.__value_.__l.__size_ = size;
    this->__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    this->__r_.__value_.__r.__words[0] = v19;
  }
  size_t v20 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_31:
  char v21 = (char *)v20 + size;
  unint64_t v22 = (char *)a3 - (char *)__src;
  if (a3 != __src)
  {
    if (v22 >= 0x20)
    {
      if ((unint64_t)((char *)v20 + size - (char *)__src) >= 0x20)
      {
        unint64_t v23 = (std::string *)((char *)__src + (v22 & 0xFFFFFFFFFFFFFFE0));
        v21 += v22 & 0xFFFFFFFFFFFFFFE0;
        uint64_t v32 = (_OWORD *)((char *)&v20->__r_.__value_.__r.__words[2] + size);
        uint64_t v33 = &__src->__r_.__value_.__r.__words[2];
        unint64_t v34 = v22 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          long long v35 = *(_OWORD *)v33;
          *(v32 - 1) = *((_OWORD *)v33 - 1);
          *uint64_t v32 = v35;
          v32 += 2;
          v33 += 4;
          v34 -= 32;
        }
        while (v34);
        if (v22 == (v22 & 0xFFFFFFFFFFFFFFE0)) {
          goto LABEL_62;
        }
      }
      else
      {
        unint64_t v23 = __src;
      }
    }
    else
    {
      unint64_t v23 = __src;
    }
    do
    {
      std::string::value_type v36 = v23->__r_.__value_.__s.__data_[0];
      unint64_t v23 = (std::string *)((char *)v23 + 1);
      *v21++ = v36;
    }
    while (v23 != a3);
  }
LABEL_62:
  *char v21 = 0;
  std::string::size_type v37 = v7 + size;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    this->__r_.__value_.__l.__size_ = v37;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = v37 & 0x7F;
  }
  return this;
}

void sub_25511E714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25511E730(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  unint64_t v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *unint64_t v23 = 0;
  v23[1] = v11;
  uint64_t v24 = v23 + 2;
  uint64_t v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v23[4] = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v24 = v26;
  }
  v23[5] = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  std::string::size_type v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  unint64_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25511EACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25511EAE8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25511EAE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      int v3 = *(MIL::Blob::StorageReader **)(v2 + 40);
      *(void *)(v2 + 40) = 0;
      if (v3)
      {
        MIL::Blob::StorageReader::~StorageReader(v3);
        MEMORY[0x25A2886C0]();
      }
      if (*(char *)(v2 + 39) < 0) {
        operator delete(*(void **)(v2 + 16));
      }
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_25511EB60(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25511EB98(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t *sub_25511EBC0(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  int v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          int v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  unint64_t v23 = operator new(0x38uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *unint64_t v23 = 0;
  v23[1] = v11;
  uint64_t v24 = v23 + 2;
  uint64_t v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v23[4] = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v24 = v26;
  }
  v23[5] = 0;
  v23[6] = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  std::string::size_type v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  unint64_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25511EF5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25511EF78((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25511EF78(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      int v3 = *(std::__shared_weak_count **)(v2 + 48);
      if (v3 && !atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_6;
      }
      if (*(char *)(v2 + 39) < 0) {
LABEL_6:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

void sub_25511F028(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25511F060(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(void *)(a1 + 32));
}

void sub_25511F08C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25511F0C4(uint64_t a1)
{
  return munmap(*(void **)(a1 + 24), *(void *)(a1 + 32));
}

uint64_t sub_25511F0EC(uint64_t *a1)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  int v3 = 9;
  v6[0] = &unk_270445210;
  v6[1] = sub_25511F2DC;
  size_t v7 = v6;
  sub_255112BE4(a1, (char *)&v3, 1, 33, 0, 0, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  int v3 = 10;
  v4[0] = &unk_270445210;
  v4[1] = sub_25511F3AC;
  long long v5 = v4;
  sub_255112BE4(a1, (char *)&v3, 1, 33, 0, 0, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_25511F2BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

uint64_t sub_25511F2DC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 168))(**a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 120))(**a1);
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = 0;
    do
    {
      *(float *)(v4 + 4 * v7) = nanf((const char *)&unk_25513FB65);
      unint64_t v7 = sub_25511F47C(**a1, v7);
      --v6;
    }
    while (v6);
  }
  return a2 + 1;
}

uint64_t sub_25511F3AC(uint64_t **a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 168))(**a1);
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)**a1 + 120))(**a1);
  if (v5)
  {
    uint64_t v6 = v5;
    unint64_t v7 = 0;
    do
    {
      *(double *)(v4 + 8 * v7) = nan((const char *)&unk_25513FB65);
      unint64_t v7 = sub_25511F47C(**a1, v7);
      --v6;
    }
    while (v6);
  }
  return a2 + 1;
}

uint64_t sub_25511F47C(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v6 = *(const void **)v4;
  uint64_t v5 = *(void *)(v4 + 8);
  size_t v7 = v5 - *(void *)v4;
  if (v5 == *(void *)v4)
  {
    uint64_t v8 = 0;
  }
  else
  {
    if ((v7 & 0x8000000000000000) != 0) {
      sub_2550EAEEC();
    }
    uint64_t v8 = operator new(v5 - *(void *)v4);
    memcpy(v8, v6, v7);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  unint64_t v11 = *(const void **)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  size_t v12 = v10 - *(void *)v9;
  if (v10 == *(void *)v9)
  {
    uint8x8_t v13 = 0;
  }
  else
  {
    if ((v12 & 0x8000000000000000) != 0) {
      sub_2550EAEEC();
    }
    uint8x8_t v13 = operator new(v10 - *(void *)v9);
    memcpy(v13, v11, v12);
  }
  switch(sub_25513D048(a1))
  {
    case 1:
      uint64_t v14 = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1) + a2;
      if (v13) {
        goto LABEL_56;
      }
      goto LABEL_57;
    case 2:
      unint64_t v53 = v8[1];
      unint64_t v54 = a2 / v53 % *v8;
      unint64_t v55 = a2 % v53 + 1;
      if (v55 >= v53) {
        uint64_t v14 = *v13 + *v13 * v54;
      }
      else {
        uint64_t v14 = *v13 * v54 + v13[1] * v55;
      }
      goto LABEL_56;
    case 3:
      unint64_t v31 = v8[1];
      unint64_t v30 = v8[2];
      unint64_t v32 = a2 / v30 % v31;
      unint64_t v33 = a2 / v30 / v31 % *v8;
      unint64_t v34 = a2 % v30 + 1;
      BOOL v35 = v34 >= v30;
      if (v34 < v30) {
        uint64_t v36 = a2 % v30 + 1;
      }
      else {
        uint64_t v36 = 0;
      }
      if (v35) {
        ++v32;
      }
      if (v32 < v31)
      {
        unint64_t v37 = v33;
      }
      else
      {
        unint64_t v32 = 0;
        unint64_t v37 = v33 + 1;
      }
      uint64_t v14 = *v13 * v37 + v13[1] * v32 + v13[2] * v36;
      goto LABEL_56;
    case 4:
      unint64_t v39 = v8[2];
      unint64_t v38 = v8[3];
      unint64_t v40 = a2 / v38 / v39;
      unint64_t v41 = a2 / v38 % v39;
      unint64_t v42 = v8[1];
      unint64_t v43 = v40 / v42;
      unint64_t v44 = v40 % v42;
      unint64_t v45 = v43 % *v8;
      unint64_t v46 = a2 % v38 + 1;
      BOOL v47 = v46 >= v38;
      if (v46 < v38) {
        uint64_t v48 = a2 % v38 + 1;
      }
      else {
        uint64_t v48 = 0;
      }
      if (v47) {
        ++v41;
      }
      BOOL v49 = v41 >= v39;
      if (v41 < v39) {
        unint64_t v50 = v41;
      }
      else {
        unint64_t v50 = 0;
      }
      if (v49) {
        unint64_t v51 = v44 + 1;
      }
      else {
        unint64_t v51 = v44;
      }
      if (v51 < v42)
      {
        unint64_t v52 = v45;
      }
      else
      {
        unint64_t v51 = 0;
        unint64_t v52 = v45 + 1;
      }
      uint64_t v14 = *v13 * v52 + v13[1] * v51 + v13[2] * v50 + v13[3] * v48;
      goto LABEL_56;
    case 5:
      unint64_t v16 = v8[3];
      unint64_t v15 = v8[4];
      unint64_t v18 = v8[1];
      unint64_t v17 = v8[2];
      unint64_t v19 = a2 / v15 / v16;
      unint64_t v20 = a2 / v15 % v16;
      unint64_t v21 = v19 / v17;
      unint64_t v22 = v19 % v17;
      unint64_t v23 = v21 / v18;
      unint64_t v24 = a2 % v15 + 1;
      BOOL v25 = v24 >= v15;
      if (v24 < v15) {
        uint64_t v26 = a2 % v15 + 1;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v25) {
        ++v20;
      }
      if (v20 < v16)
      {
        unint64_t v27 = v22;
      }
      else
      {
        unint64_t v20 = 0;
        unint64_t v27 = v22 + 1;
      }
      if (v27 < v17)
      {
        unint64_t v28 = v23;
      }
      else
      {
        unint64_t v27 = 0;
        unint64_t v28 = v23 + 1;
      }
      if (v28 < v18)
      {
        uint64_t v29 = v23 % *v8;
      }
      else
      {
        unint64_t v28 = 0;
        uint64_t v29 = v23 % *v8 + 1;
      }
      uint64_t v14 = v29 * *v13 + v13[1] * v28 + v13[2] * v27 + v13[3] * v20 + v13[4] * v26;
      goto LABEL_56;
    default:
      uint64_t v14 = a2 + 1;
      if (!v13) {
        goto LABEL_57;
      }
LABEL_56:
      operator delete(v13);
LABEL_57:
      if (v8) {
        operator delete(v8);
      }
      return v14;
  }
}

void sub_25511F7A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (v13) {
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25511F80C(uint64_t *a1)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  int __src = 8;
  v24[0] = &unk_270445210;
  v24[1] = sub_255120130;
  BOOL v25 = v24;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v24);
  if (v25 == v24)
  {
    (*(void (**)(void *))(v24[0] + 32))(v24);
  }
  else if (v25)
  {
    (*(void (**)(void *))(*v25 + 40))(v25);
  }
  int __src = 9;
  v22[0] = &unk_270445210;
  v22[1] = sub_255120378;
  unint64_t v23 = v22;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v22);
  if (v23 == v22)
  {
    (*(void (**)(void *))(v22[0] + 32))(v22);
  }
  else if (v23)
  {
    (*(void (**)(void *))(*v23 + 40))(v23);
  }
  int __src = 10;
  v20[0] = &unk_270445210;
  v20[1] = sub_2551205C0;
  unint64_t v21 = v20;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v20);
  if (v21 == v20)
  {
    (*(void (**)(void *))(v20[0] + 32))(v20);
  }
  else if (v21)
  {
    (*(void (**)(void *))(*v21 + 40))(v21);
  }
  int __src = 4;
  v18[0] = &unk_270445210;
  v18[1] = sub_255120804;
  unint64_t v19 = v18;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v18);
  if (v19 == v18)
  {
    (*(void (**)(void *))(v18[0] + 32))(v18);
  }
  else if (v19)
  {
    (*(void (**)(void *))(*v19 + 40))(v19);
  }
  int __src = 5;
  v16[0] = &unk_270445210;
  v16[1] = sub_255120A48;
  unint64_t v17 = v16;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v16);
  if (v17 == v16)
  {
    (*(void (**)(void *))(v16[0] + 32))(v16);
  }
  else if (v17)
  {
    (*(void (**)(void *))(*v17 + 40))(v17);
  }
  int __src = 6;
  v14[0] = &unk_270445210;
  v14[1] = sub_255120C8C;
  unint64_t v15 = v14;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v14);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
  }
  else if (v15)
  {
    (*(void (**)(void *))(*v15 + 40))(v15);
  }
  int __src = 7;
  v12[0] = &unk_270445210;
  v12[1] = sub_255120ED0;
  uint8x8_t v13 = v12;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v12);
  if (v13 == v12)
  {
    (*(void (**)(void *))(v12[0] + 32))(v12);
  }
  else if (v13)
  {
    (*(void (**)(void *))(*v13 + 40))(v13);
  }
  int __src = 0;
  v10[0] = &unk_270445210;
  v10[1] = sub_255121114;
  unint64_t v11 = v10;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v10);
  if (v11 == v10)
  {
    (*(void (**)(void *))(v10[0] + 32))(v10);
  }
  else if (v11)
  {
    (*(void (**)(void))(*v11 + 40))();
  }
  int __src = 1;
  v8[0] = &unk_270445210;
  v8[1] = sub_255121358;
  uint64_t v9 = v8;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v8);
  if (v9 == v8)
  {
    (*(void (**)(void *))(v8[0] + 32))(v8);
  }
  else if (v9)
  {
    (*(void (**)(void))(*v9 + 40))();
  }
  int __src = 2;
  v6[0] = &unk_270445210;
  v6[1] = sub_25512159C;
  size_t v7 = v6;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v6);
  if (v7 == v6)
  {
    (*(void (**)(void *))(v6[0] + 32))(v6);
  }
  else if (v7)
  {
    (*(void (**)(void))(*v7 + 40))();
  }
  int __src = 3;
  v4[0] = &unk_270445210;
  v4[1] = sub_2551217E0;
  uint64_t v5 = v4;
  sub_255112BE4(a1, 0, 0, 34, (char *)&__src, 1, v4);
  uint64_t result = (uint64_t)v5;
  if (v5 == v4) {
    return (*(uint64_t (**)(void *))(v4[0] + 32))(v4);
  }
  if (v5) {
    return (*(uint64_t (**)(void))(*v5 + 40))();
  }
  return result;
}

void sub_2551200A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

uint64_t sub_255120130(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v25 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v26);
  if (v28 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)uint64_t v29 = v26;
  uint64_t v30 = v27;
  uint64_t v27 = 0;
  long long v26 = 0uLL;
  int v28 = -1;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v30 >= 0) {
    uint64_t v8 = v29;
  }
  else {
    uint64_t v8 = (void **)v29[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    _H0 = *(_WORD *)(v14 + 2 * i);
    __asm { FCVT            D0, H0 }
    printf("%10.8f ", _D0);
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  return a2 + 1;
}

void sub_255120330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255120378(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10.8f ", *(float *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255120578(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2551205C0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10.8f ", *(double *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_2551207BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255120804(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10hhu ", *(unsigned __int8 *)(v14 + i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255120A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255120A48(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10hu ", *(unsigned __int16 *)(v14 + 2 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255120C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255120C8C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10u ", *(_DWORD *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255120E88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255120ED0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10llu ", *(void *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_2551210CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255121114(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10hhi ", *(char *)(v14 + i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255121310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255121358(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10hi ", *(__int16 *)(v14 + 2 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255121554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25512159C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10i ", *(_DWORD *)(v14 + 4 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_255121798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2551217E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t **a5)
{
  char v19 = 4;
  strcpy((char *)__p, "name");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v23 = v20;
  uint64_t v24 = v21;
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  int v22 = -1;
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = **a5;
  if (v24 >= 0) {
    uint64_t v8 = v23;
  }
  else {
    uint64_t v8 = (void **)v23[0];
  }
  uint64_t v9 = sub_255129418(v7);
  int v10 = *(char *)(v9 + 23);
  unint64_t v11 = *(const char **)v9;
  size_t v12 = (const void *)(*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  if (v10 >= 0) {
    uint8x8_t v13 = (const char *)v9;
  }
  else {
    uint8x8_t v13 = v11;
  }
  printf("%s %s(%p) = {\n", (const char *)v8, v13, v12);
  uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 176))(v7);
  unint64_t v15 = 0;
  for (unint64_t i = 0; i < (*(uint64_t (**)(uint64_t))(*(void *)v7 + 120))(v7); ++i)
  {
    if (!v15) {
      putchar(9);
    }
    printf("%10lli ", *(void *)(v14 + 8 * i));
    if (v15 >= 5)
    {
      putchar(10);
      unint64_t v15 = 0;
    }
    else
    {
      ++v15;
    }
  }
  if (v15) {
    putchar(10);
  }
  puts("}");
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  return a2 + 1;
}

void sub_2551219DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255121A24(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = &unk_270445210;
  v5[1] = sub_255121C04;
  uint64_t v6 = v5;
  sub_255112BE4(a1, 0, 0, 11, 0, 0, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  v3[0] = &unk_270445210;
  v3[1] = sub_255121C6C;
  uint64_t v4 = v3;
  sub_255112BE4(a1, 0, 0, 29, 0, 0, v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_255121BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

uint64_t sub_255121C04(uint64_t **a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      (*(void (**)(uint64_t))(*(void *)v5 + 136))(v5);
    }
    while (v3 != v4);
  }
  return a2 + 1;
}

uint64_t sub_255121C6C(uint64_t **a1, uint64_t a2)
{
  int v3 = *a1;
  uint64_t v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      uint64_t v5 = *v3++;
      (*(void (**)(uint64_t))(*(void *)v5 + 144))(v5);
    }
    while (v3 != v4);
  }
  return a2 + 1;
}

void *sub_255121CD8(size_t a1)
{
  return malloc_type_malloc(a1, 0x492E9D94uLL);
}

uint64_t sub_255121CE4(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  char v12 = 6;
  strcpy((char *)__p, "kindex");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v13);
  if (v14) {
    sub_2550EE418();
  }
  uint64_t v6 = v13[0];
  int v14 = -1;
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v7 = *(void *)(a3[22] + 8 * v6);
  uint64_t v8 = (const char *)sub_255129418(v7);
  uint64_t v9 = sub_255121DD0(a3, v8, v6);
  sub_255129738(v7, (uint64_t)v9);
  return a2 + 1;
}

void sub_255121DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_255121DD0(void *a1, const char *a2, uint64_t a3)
{
  uint64_t v4 = (uint64_t *)a2;
  uint64_t v6 = (void *)a1[37];
  if (!v6)
  {
    uint64_t v12 = a1[38];
    if (!v12)
    {
      if (!MEMORY[0x263F53128])
      {
        sub_2551080CC((uint64_t)v28);
        sub_2551084AC(v28, (uint64_t)"JIT library not loaded", 22);
        uint64_t v9 = (void *)a1[4];
        if ((v36 & 0x10) != 0)
        {
          unint64_t v21 = v35;
          if (v35 < v32)
          {
            unint64_t v35 = v32;
            unint64_t v21 = v32;
          }
          int v22 = (const void **)&v31;
        }
        else
        {
          if ((v36 & 8) == 0)
          {
            size_t v10 = 0;
            HIBYTE(v27) = 0;
            p_p = &__p;
            goto LABEL_42;
          }
          int v22 = (const void **)v29;
          unint64_t v21 = v30;
        }
        unint64_t v18 = *v22;
        size_t v10 = v21 - (void)*v22;
        if (v10 > 0x7FFFFFFFFFFFFFF7) {
          sub_2550EAC50();
        }
        if (v10 >= 0x17)
        {
          uint64_t v23 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v10 | 7) != 0x17) {
            uint64_t v23 = v10 | 7;
          }
          uint64_t v24 = v23 + 1;
          p_p = operator new(v23 + 1);
          size_t v26 = v10;
          unint64_t v27 = v24 | 0x8000000000000000;
          long long __p = p_p;
        }
        else
        {
          HIBYTE(v27) = v21 - *(unsigned char *)v22;
          p_p = &__p;
          if (!v10) {
            goto LABEL_42;
          }
        }
LABEL_41:
        memmove(p_p, v18, v10);
        goto LABEL_42;
      }
      mlc::rt::JIT::create_orcjit();
      uint64_t v15 = v28[0];
      v28[0] = 0;
      uint64_t v16 = a1[38];
      a1[38] = v15;
      if (v16)
      {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
        uint64_t v17 = v28[0];
        v28[0] = 0;
        if (v17) {
          (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
        }
      }
      uint64_t v12 = a1[38];
    }
    return (void *)(*(uint64_t (**)(uint64_t, void, void, uint64_t *))(*(void *)v12 + 16))(v12, *(void *)(a1[19] + 24 * a3), *(void *)(a1[19] + 24 * a3 + 8) - *(void *)(a1[19] + 24 * a3), v4);
  }
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  uint64_t result = dlsym(v6, a2);
  if (!result)
  {
    sub_2551080CC((uint64_t)v28);
    sub_2551084AC(v28, (uint64_t)"dylib kernel symbol lookup failed ", 34);
    uint64_t v8 = (void *)std::ostream::operator<<();
    sub_2551084AC(v8, (uint64_t)".", 1);
    uint64_t v9 = (void *)a1[4];
    if ((v36 & 0x10) != 0)
    {
      unint64_t v13 = v35;
      if (v35 < v32)
      {
        unint64_t v35 = v32;
        unint64_t v13 = v32;
      }
      int v14 = (const void **)&v31;
    }
    else
    {
      if ((v36 & 8) == 0)
      {
        size_t v10 = 0;
        HIBYTE(v27) = 0;
        p_p = &__p;
LABEL_42:
        *((unsigned char *)p_p + v10) = 0;
        sub_25513A900(v9, 0xFFFF, (uint64_t)&__p);
        if (SHIBYTE(v27) < 0) {
          operator delete(__p);
        }
        v28[0] = *MEMORY[0x263F8C2C8];
        *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
        v28[1] = MEMORY[0x263F8C318] + 16;
        if (v34 < 0) {
          operator delete(v33);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x25A288660](&v37);
        return 0;
      }
      int v14 = (const void **)v29;
      unint64_t v13 = v30;
    }
    unint64_t v18 = *v14;
    size_t v10 = v13 - (void)*v14;
    if (v10 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    if (v10 >= 0x17)
    {
      uint64_t v19 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v10 | 7) != 0x17) {
        uint64_t v19 = v10 | 7;
      }
      uint64_t v20 = v19 + 1;
      p_p = operator new(v19 + 1);
      size_t v26 = v10;
      unint64_t v27 = v20 | 0x8000000000000000;
      long long __p = p_p;
    }
    else
    {
      HIBYTE(v27) = v13 - *(unsigned char *)v14;
      p_p = &__p;
      if (!v10) {
        goto LABEL_42;
      }
    }
    goto LABEL_41;
  }
  return result;
}

void sub_255122200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  a15 = *MEMORY[0x263F8C2C8];
  *(uint64_t *)((char *)&a15 + *(void *)(a15 - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  a16 = MEMORY[0x263F8C318] + 16;
  if (a29 < 0) {
    operator delete(a24);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_255122310(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  HIBYTE(v35) = 5;
  strcpy((char *)__p, "index");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v40);
  if (v42) {
    sub_2550EE418();
  }
  uint64_t v10 = v40;
  int v42 = -1;
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v35) = 5;
  strcpy((char *)__p, "kname");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)&v40);
  if (v42 != 2) {
    sub_2550EE418();
  }
  long long v47 = v40;
  uint64_t v48 = v41;
  uint64_t v41 = 0;
  long long v40 = 0uLL;
  int v42 = -1;
  if (SHIBYTE(v35) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = sub_255121DD0((void *)a3, (const char *)&v47, v10);
  sub_2551292E0((uint64_t)&v40, &v47, *(unsigned char *)(a3 + 384));
  sub_255129738((uint64_t)&v40, (uint64_t)v11);
  sub_255129420((uint64_t)&v40, 0);
  sub_2551293A8((uint64_t)&v40, ((a1[1] - *a1) >> 3) + ((uint64_t)(a5[1] - *a5) >> 3));
  int v12 = sub_255129428((uint64_t)&v40, a1, a5);
  __s2[23] = 20;
  strcpy(__s2, "scratchbuffer_region");
  uint64_t v14 = *(void *)(a3 + 80);
  unint64_t v13 = *(void *)(a3 + 88);
  if (v14 != v13)
  {
    while (1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v14 + 23);
      if ((v15 & 0x80u) == 0) {
        uint64_t v16 = *(unsigned __int8 *)(v14 + 23);
      }
      else {
        uint64_t v16 = *(void *)(v14 + 8);
      }
      if (v16 == 20)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v14, __s2, *(void *)(v14 + 8))) {
            break;
          }
        }
        else
        {
          if (!*(unsigned char *)(v14 + 23)) {
            break;
          }
          uint64_t v17 = 0;
          while (*(unsigned __int8 *)(v14 + v17) == __s2[v17])
          {
            if (v15 == ++v17) {
              goto LABEL_20;
            }
          }
        }
      }
      v14 += 80;
      if (v14 == v13) {
        goto LABEL_22;
      }
    }
  }
LABEL_20:
  if (v14 == v13)
  {
LABEL_22:
    *((void *)&v36 + 1) = 0;
    *(void *)&long long v37 = 0;
    *(_OWORD *)long long __p = *(_OWORD *)__s2;
    unint64_t v35 = *(void **)&__s2[16];
    unint64_t v18 = *(void *)(a3 + 96);
    LODWORD(v36) = 0;
    *((void *)&v37 + 1) = v12;
    *(void *)unint64_t v38 = 32;
    *(_OWORD *)&v38[8] = *(_OWORD *)(a3 + 24);
    if (v13 >= v18)
    {
      uint64_t v20 = sub_2550FF524((char **)(a3 + 80), (uint64_t)__p);
    }
    else
    {
      if (SHIBYTE(v35) < 0)
      {
        sub_2550EABB0((unsigned char *)v13, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v19 = *(_OWORD *)__s2;
        *(void *)(v13 + 16) = *(void *)&__s2[16];
        *(_OWORD *)unint64_t v13 = v19;
      }
      long long v21 = v36;
      long long v22 = v37;
      long long v23 = *(_OWORD *)v38;
      *(void *)(v13 + 72) = *(void *)&v38[16];
      *(_OWORD *)(v13 + 56) = v23;
      *(_OWORD *)(v13 + 40) = v22;
      *(_OWORD *)(v13 + 24) = v21;
      uint64_t v20 = (char *)(v13 + 80);
      *(void *)(a3 + 88) = v13 + 80;
    }
    *(void *)(a3 + 88) = v20;
    sub_255129844((uint64_t)__p);
  }
  else
  {
    *(void *)(v14 + 48) += v12;
  }
  char v31 = 13;
  strcpy((char *)v30, "scratchbuffer");
  sub_25512974C(a4, (uint64_t)v30, (uint64_t)__p);
  if (v36 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v32 = *(_OWORD *)__p;
  unint64_t v33 = v35;
  __p[1] = 0;
  unint64_t v35 = 0;
  __p[0] = 0;
  LODWORD(v36) = -1;
  if (v31 < 0) {
    operator delete((void *)v30[0]);
  }
  sub_25512298C(a3, (uint64_t)v32, v30);
  if (v30[1])
  {
    uint64_t v24 = std::__shared_weak_count::lock((std::__shared_weak_count *)v30[1]);
    if (v24)
    {
      char v25 = v24;
      uint64_t v26 = v30[0];
      if (v30[0])
      {
        sub_25512AA6C(v30[0], __s2);
        unint64_t v27 = operator new(8uLL);
        __p[0] = v27;
        *unint64_t v27 = v12;
        __p[1] = v27 + 1;
        unint64_t v35 = v27 + 1;
        (*(void (**)(uint64_t, void **))(*(void *)v26 + 56))(v26, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        int v28 = operator new(8uLL);
        __p[0] = v28;
        *int v28 = 1;
        __p[1] = v28 + 1;
        unint64_t v35 = v28 + 1;
        (*(void (**)(uint64_t, void **))(*(void *)v26 + 64))(v26, __p);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 88))(v26, 32);
        sub_25512AA54(v26, 0);
      }
      if (!atomic_fetch_add(&v25->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if (v30[1]) {
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v30[1]);
    }
  }
  if (SHIBYTE(v33) < 0)
  {
    operator delete(v32[0]);
    if ((__s2[23] & 0x80000000) == 0) {
      goto LABEL_46;
    }
  }
  else if ((__s2[23] & 0x80000000) == 0)
  {
    goto LABEL_46;
  }
  operator delete(*(void **)__s2);
LABEL_46:
  *(void *)&long long v40 = &unk_270445348;
  if (v46 < 0) {
    operator delete(v45);
  }
  if (v43)
  {
    unint64_t v44 = v43;
    operator delete(v43);
  }
  if (*((void *)&v40 + 1))
  {
    uint64_t v41 = *((void *)&v40 + 1);
    operator delete(*((void **)&v40 + 1));
  }
  nullsub_34(&v40);
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)v47);
  }
  return a2 + 1;
}

void sub_255122884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,char a45)
{
  *(void *)(v45 + 88) = v46;
  sub_255129844((uint64_t)&a25);
  if (a43 < 0) {
    operator delete(__p);
  }
  sub_255122A6C((uint64_t)&a45);
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25512298C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(uint64_t **)(result + 104);
  uint64_t v5 = *(uint64_t **)(result + 112);
  if (v4 == v5)
  {
LABEL_20:
    *a3 = 0;
    a3[1] = 0;
    return result;
  }
  while (1)
  {
    uint64_t result = sub_255129418(*v4);
    uint64_t v7 = *(unsigned __int8 *)(result + 23);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(result + 23);
    }
    else {
      uint64_t v8 = *(void *)(result + 8);
    }
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (v8 != v9) {
      goto LABEL_4;
    }
    unint64_t v11 = v10 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    if ((v7 & 0x80) == 0) {
      break;
    }
    uint64_t result = memcmp(*(const void **)result, v11, *(void *)(result + 8));
    if (!result) {
      goto LABEL_18;
    }
LABEL_4:
    v4 += 2;
    if (v4 == v5) {
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(result + 23))
  {
    while (*(unsigned __int8 *)result == *v11)
    {
      ++result;
      ++v11;
      if (!--v7) {
        goto LABEL_18;
      }
    }
    goto LABEL_4;
  }
LABEL_18:
  uint64_t v12 = v4[1];
  *a3 = *v4;
  a3[1] = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_255122A6C(uint64_t a1)
{
  *(void *)a1 = &unk_270445348;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  int v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

uint64_t sub_255122AF8(uint64_t *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  HIBYTE(v27) = 5;
  strcpy((char *)&v26, "index");
  sub_25512974C(a4, (uint64_t)&v26, (uint64_t)v17);
  if (v19) {
    sub_2550EE418();
  }
  int v10 = v17[0];
  int v19 = -1;
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  char v25 = 5;
  strcpy((char *)__p, "kname");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v17);
  if (v19 != 2) {
    sub_2550EE418();
  }
  long long v26 = *(_OWORD *)v17;
  unint64_t v27 = v18;
  v17[1] = 0;
  unint64_t v18 = 0;
  v17[0] = 0;
  int v19 = -1;
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v11 = sub_255121DD0((void *)a3, (const char *)&v26, (uint64_t)v10);
  sub_2551292E0((uint64_t)v17, &v26, *(unsigned char *)(a3 + 384));
  sub_255129738((uint64_t)v17, (uint64_t)v11);
  sub_255129420((uint64_t)v17, 0);
  sub_2551293A8((uint64_t)v17, ((a1[1] - *a1) >> 3) + ((uint64_t)(a5[1] - *a5) >> 3));
  sub_255129428((uint64_t)v17, a1, a5);
  uint64_t v12 = (void **)*a1;
  unint64_t v13 = (void **)a1[1];
  if ((void **)*a1 != v13)
  {
    do
    {
      uint64_t v14 = (uint64_t)*v12;
      uint64_t v15 = sub_25512AB04(*v12);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 152))(v14, v15);
      ++v12;
    }
    while (v12 != v13);
  }
  v17[0] = &unk_270445348;
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v20)
  {
    long long v21 = v20;
    operator delete(v20);
  }
  if (v17[1])
  {
    unint64_t v18 = v17[1];
    operator delete(v17[1]);
  }
  nullsub_34(v17);
  if (SHIBYTE(v27) < 0) {
    operator delete((void *)v26);
  }
  return a2 + 1;
}

void sub_255122D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (*(char *)(v27 - 57) < 0) {
    operator delete(*(void **)(v27 - 80));
  }
  _Unwind_Resume(exception_object);
}

void sub_255122DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  *(void *)a1 = &unk_270445328;
  *(void *)(a1 + 8) = sub_255123308;
  *(void *)(a1 + 16) = sub_2551236B4;
  *(void *)(a1 + 24) = a1;
  *(void *)(a1 + 32) = a2;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  operator new();
}

void sub_255123170(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  sub_2551055F8((uint64_t)(v3 + 44));
  sub_255125EE0(v8);
  if (*(char *)(v2 + 383) < 0) {
    operator delete(v3[35]);
  }
  sub_2551236F4(v7);
  uint64_t v11 = *(void *)(v2 + 304);
  *(void *)(v2 + 304) = 0;
  if (v11) {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
  }
  sub_255123760(v3 + 27);
  uint64_t v12 = *(void **)(v2 + 272);
  if (v12)
  {
    *(void *)(v2 + 280) = v12;
    operator delete(v12);
  }
  unint64_t v13 = *(void **)(v2 + 248);
  if (v13)
  {
    *(void *)(v2 + 256) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(v2 + 224);
  if (v14)
  {
    *(void *)(v2 + 232) = v14;
    operator delete(v14);
  }
  sub_255123798(v3 + 15);
  sub_255123800(v6);
  sub_255123890(v3 + 9);
  sub_2550EAAFC(v5);
  sub_2550EAAFC(v3 + 3);
  sub_255123908(v3);
  sub_255123964(v4);
  sub_2550EAAFC((void **)(v2 + 48));
  uint64_t v15 = *v9;
  uint64_t *v9 = 0;
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 8))(v15);
  }
  nullsub_34(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_255123308(void **a1, size_t size, size_t alignment, int a4, uint64_t a5, uint64_t a6)
{
  if (a4 == 2)
  {
    uint64_t v14 = (void *)sub_25512D568(a6);
    long long __p = operator new(0x19uLL);
    long long v24 = xmmword_25513EDF0;
    strcpy((char *)__p, "ANE alloc unimplemented");
    sub_25513A900(v14, 1, (uint64_t)&__p);
    goto LABEL_10;
  }
  if (a4 == 1)
  {
    unint64_t v13 = (void *)sub_25512D568(a6);
    long long __p = operator new(0x20uLL);
    long long v24 = xmmword_25513E9B0;
    strcpy((char *)__p, "device alloc unimplemented");
    sub_25513A900(v13, 1, (uint64_t)&__p);
LABEL_10:
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    return 0xFFFFFFFFLL;
  }
  if (a4) {
    return 1;
  }
  uint64_t v7 = malloc_type_posix_memalign(a1, alignment, size, 0x8ACD2EAFuLL);
  if (v7)
  {
    sub_2551080CC((uint64_t)&__p);
    sub_2551084AC(&__p, (uint64_t)"Error allocating ", 17);
    uint64_t v8 = (void *)std::ostream::operator<<();
    sub_2551084AC(v8, (uint64_t)"-byte, ", 7);
    uint64_t v9 = (void *)std::ostream::operator<<();
    sub_2551084AC(v9, (uint64_t)"-aligned memory.", 16);
    int v10 = (void *)sub_25512D568(a6);
    if ((v31 & 0x10) != 0)
    {
      unint64_t v15 = v30;
      if (v30 < v27)
      {
        unint64_t v30 = v27;
        unint64_t v15 = v27;
      }
      uint64_t v16 = (const void **)&v26;
    }
    else
    {
      if ((v31 & 8) == 0)
      {
        size_t v11 = 0;
        HIBYTE(v22) = 0;
        uint64_t v12 = v21;
        goto LABEL_26;
      }
      uint64_t v16 = (const void **)v25;
      unint64_t v15 = v25[2];
    }
    uint64_t v17 = *v16;
    size_t v11 = v15 - (void)*v16;
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    if (v11 >= 0x17)
    {
      uint64_t v18 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v18 = v11 | 7;
      }
      uint64_t v19 = v18 + 1;
      uint64_t v12 = operator new(v18 + 1);
      v21[1] = (void *)v11;
      unint64_t v22 = v19 | 0x8000000000000000;
      v21[0] = v12;
    }
    else
    {
      HIBYTE(v22) = v15 - *(unsigned char *)v16;
      uint64_t v12 = v21;
      if (!v11) {
        goto LABEL_26;
      }
    }
    memmove(v12, v17, v11);
LABEL_26:
    *((unsigned char *)v12 + v11) = 0;
    sub_25513A900(v10, 1, (uint64_t)v21);
    if (SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    long long __p = (void *)*MEMORY[0x263F8C2C8];
    *(void **)((char *)&__p + *((void *)__p - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
    *(void *)&long long v24 = MEMORY[0x263F8C318] + 16;
    if (v29 < 0) {
      operator delete(v28);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x25A288660](&v32);
  }
  return v7;
}

void sub_255123664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_2551236B4(void *a1, int a2)
{
  if ((a2 - 1) < 2) {
    return 0xFFFFFFFFLL;
  }
  if (a2) {
    return 1;
  }
  free(a1);
  return 0;
}

uint64_t sub_2551236F4(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0) {
        operator delete(v2[2]);
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  int v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void **sub_255123760(void **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    dlclose(v2);
    *a1 = 0;
  }
  return a1;
}

void **sub_255123798(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = v3 - 48;
        sub_2550EB130((uint64_t)(v3 - 40));
        int v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void *sub_255123800(void *a1)
{
  uint64_t v2 = (void *)*a1;
  if (*a1)
  {
    int v3 = (void *)a1[1];
    uint64_t v4 = (void *)*a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v6 = *--v3;
        uint64_t v5 = v6;
        *int v3 = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
        }
      }
      while (v3 != v2);
      uint64_t v4 = (void *)*a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_255123890(void **a1)
{
  uint64_t v2 = (char *)*a1;
  if (*a1)
  {
    int v3 = (char *)a1[1];
    uint64_t v4 = *a1;
    if (v3 != v2)
    {
      uint64_t v5 = (char *)a1[1];
      do
      {
        uint64_t v7 = (void *)*((void *)v5 - 3);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *((void *)v3 - 2) = v6;
          operator delete(v6);
        }
        int v3 = v5;
      }
      while (v5 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **sub_255123908(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = v2;
    if ((void *)v3 != v2)
    {
      do
        uint64_t v3 = sub_255129844(v3 - 80);
      while ((void *)v3 != v2);
      uint64_t v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t **sub_255123964(uint64_t **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *v2;
    uint64_t *v2 = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    MEMORY[0x25A2886C0](v2, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_2551239E0(uint64_t a1)
{
  *(void *)a1 = &unk_270445328;
  uint64_t v2 = *(void ***)(a1 + 224);
  for (unint64_t i = *(void ***)(a1 + 232); v2 != i; ++v2)
    BNNSFilterDestroy(*v2);
  sub_2551055F8(a1 + 432);
  sub_255125EE0(a1 + 392);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  uint64_t v4 = *(void ***)(a1 + 336);
  if (v4)
  {
    do
    {
      uint64_t v18 = (void **)*v4;
      if (*((char *)v4 + 39) < 0) {
        operator delete(v4[2]);
      }
      operator delete(v4);
      uint64_t v4 = v18;
    }
    while (v18);
  }
  uint64_t v5 = *(void **)(a1 + 320);
  *(void *)(a1 + 320) = 0;
  if (v5) {
    operator delete(v5);
  }
  uint64_t v6 = *(void *)(a1 + 304);
  *(void *)(a1 + 304) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  uint64_t v7 = *(void **)(a1 + 296);
  if (v7)
  {
    dlclose(v7);
    *(void *)(a1 + 296) = 0;
  }
  uint64_t v8 = *(void **)(a1 + 272);
  if (v8)
  {
    *(void *)(a1 + 280) = v8;
    operator delete(v8);
  }
  uint64_t v9 = *(void **)(a1 + 248);
  if (v9)
  {
    *(void *)(a1 + 256) = v9;
    operator delete(v9);
  }
  int v10 = *(void **)(a1 + 224);
  if (v10)
  {
    *(void *)(a1 + 232) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void *)(a1 + 200);
  if (v11)
  {
    uint64_t v12 = *(void *)(a1 + 208);
    unint64_t v13 = *(void **)(a1 + 200);
    if (v12 != v11)
    {
      do
      {
        uint64_t v14 = v12 - 48;
        sub_2550EB130(v12 - 40);
        uint64_t v12 = v14;
      }
      while (v14 != v11);
      unint64_t v13 = *(void **)(a1 + 200);
    }
    *(void *)(a1 + 208) = v11;
    operator delete(v13);
  }
  unint64_t v15 = *(void **)(a1 + 176);
  if (v15)
  {
    uint64_t v16 = *(void **)(a1 + 184);
    uint64_t v17 = *(void **)(a1 + 176);
    if (v16 != v15)
    {
      do
      {
        uint64_t v20 = *--v16;
        uint64_t v19 = v20;
        *uint64_t v16 = 0;
        if (v20) {
          (*(void (**)(uint64_t))(*(void *)v19 + 8))(v19);
        }
      }
      while (v16 != v15);
      uint64_t v17 = *(void **)(a1 + 176);
    }
    *(void *)(a1 + 184) = v15;
    operator delete(v17);
  }
  uint64_t v21 = *(void *)(a1 + 152);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 160);
    char v23 = *(void **)(a1 + 152);
    if (v22 != v21)
    {
      uint64_t v24 = *(void *)(a1 + 160);
      do
      {
        uint64_t v26 = *(void **)(v24 - 24);
        v24 -= 24;
        char v25 = v26;
        if (v26)
        {
          *(void *)(v22 - 16) = v25;
          operator delete(v25);
        }
        uint64_t v22 = v24;
      }
      while (v24 != v21);
      char v23 = *(void **)(a1 + 152);
    }
    *(void *)(a1 + 160) = v21;
    operator delete(v23);
  }
  uint64_t v27 = *(void *)(a1 + 128);
  if (v27)
  {
    uint64_t v28 = *(void *)(a1 + 136);
    char v29 = *(void **)(a1 + 128);
    if (v28 != v27)
    {
      do
      {
        unint64_t v30 = *(std::__shared_weak_count **)(v28 - 8);
        if (v30 && !atomic_fetch_add(&v30->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
        v28 -= 16;
      }
      while (v28 != v27);
      char v29 = *(void **)(a1 + 128);
    }
    *(void *)(a1 + 136) = v27;
    operator delete(v29);
  }
  uint64_t v31 = *(void *)(a1 + 104);
  if (v31)
  {
    uint64_t v32 = *(void *)(a1 + 112);
    unint64_t v33 = *(void **)(a1 + 104);
    if (v32 != v31)
    {
      do
      {
        char v34 = *(std::__shared_weak_count **)(v32 - 8);
        if (v34 && !atomic_fetch_add(&v34->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
        v32 -= 16;
      }
      while (v32 != v31);
      unint64_t v33 = *(void **)(a1 + 104);
    }
    *(void *)(a1 + 112) = v31;
    operator delete(v33);
  }
  uint64_t v35 = *(void *)(a1 + 80);
  if (v35)
  {
    uint64_t v36 = *(void *)(a1 + 88);
    long long v37 = *(void **)(a1 + 80);
    if (v36 != v35)
    {
      do
        uint64_t v36 = sub_255129844(v36 - 80);
      while (v36 != v35);
      long long v37 = *(void **)(a1 + 80);
    }
    *(void *)(a1 + 88) = v35;
    operator delete(v37);
  }
  unint64_t v38 = *(uint64_t **)(a1 + 72);
  *(void *)(a1 + 72) = 0;
  if (v38)
  {
    uint64_t v39 = *v38;
    *unint64_t v38 = 0;
    if (v39) {
      (*(void (**)(uint64_t))(*(void *)v39 + 8))(v39);
    }
    MEMORY[0x25A2886C0](v38, 0x20C4093837F09);
  }
  uint64_t v40 = *(void *)(a1 + 48);
  if (v40)
  {
    uint64_t v41 = *(void *)(a1 + 56);
    int v42 = *(void **)(a1 + 48);
    if (v41 != v40)
    {
      do
      {
        unint64_t v43 = *(std::__shared_weak_count **)(v41 - 8);
        if (v43 && !atomic_fetch_add(&v43->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
        v41 -= 16;
      }
      while (v41 != v40);
      int v42 = *(void **)(a1 + 48);
    }
    *(void *)(a1 + 56) = v40;
    operator delete(v42);
  }
  uint64_t v44 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = 0;
  if (v44) {
    (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
  }
  return nullsub_34(a1);
}

void sub_255123E64(uint64_t a1)
{
  uint64_t v1 = (void *)sub_2551239E0(a1);
  j__free(v1);
}

uint64_t sub_255123E8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  uint64_t result = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v3;
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_255123ECC(uint64_t a1)
{
  return *(void *)(a1 + 40);
}

uint64_t sub_255123ED4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v103 = (void (**)(void **, uint64_t, void))&unk_270444748;
  long long v107 = 0u;
  long long v108 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255125F70((uint64_t)__p);
  uint64_t v5 = *((void *)&v108 + 1);
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v108 + 1) + (void)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v108 + 1) + v108) & 0x1FF)) = v4;
  BOOL v6 = __CFADD__(v5, 1);
  uint64_t v7 = v5 + 1;
  if (!v6)
  {
    do
    {
      uint64_t v13 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v108 + v7 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v7 - 1) & 0x1FF));
      if ((void *)v107 == __p[1]) {
        unint64_t v14 = 0;
      }
      else {
        unint64_t v14 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
      }
      *((void *)&v108 + 1) = v7 - 1;
      if (v14 - (v7 + (void)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(void *)&long long v107 = v107 - 8;
      }
      if (sub_25513A9F4(*(void *)(a1 + 32))) {
        v103[2]((void **)&v103, v13, a1);
      }
      sub_25510F8A8(v13, &v104);
      unint64_t v15 = v104;
      uint64_t v16 = v105;
      if (v104 != v105)
      {
        uint64_t v17 = *((void *)&v108 + 1);
        uint64_t v18 = v108;
        do
        {
          uint64_t v19 = (char *)__p[1];
          unint64_t v20 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
          uint64_t v21 = *(void *)v15;
          if ((void *)v107 == __p[1]) {
            unint64_t v20 = 0;
          }
          unint64_t v22 = v18 + v17;
          if (v20 == v18 + v17)
          {
            sub_255125F70((uint64_t)__p);
            uint64_t v17 = *((void *)&v108 + 1);
            uint64_t v18 = v108;
            uint64_t v19 = (char *)__p[1];
            unint64_t v22 = v108 + *((void *)&v108 + 1);
          }
          *(void *)(*(void *)&v19[(v22 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v22 & 0x1FF)) = v21;
          *((void *)&v108 + 1) = ++v17;
          v15 += 8;
        }
        while (v15 != v16);
        unint64_t v15 = v104;
      }
      if (v15)
      {
        uint64_t v105 = v15;
        operator delete(v15);
      }
      uint64_t v7 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
  }
  uint64_t v8 = (void **)__p[1];
  uint64_t v9 = (void **)v107;
  *((void *)&v108 + 1) = 0;
  unint64_t v10 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v8);
      uint64_t v9 = (void **)v107;
      uint64_t v8 = (void **)((char *)__p[1] + 8);
      __p[1] = v8;
      unint64_t v10 = v107 - (void)v8;
    }
    while ((void)v107 - (void)v8 > 0x10uLL);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 256;
    goto LABEL_27;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 512;
LABEL_27:
    *(void *)&long long v108 = v12;
  }
  if (v8 != v9)
  {
    do
    {
      char v23 = *v8++;
      operator delete(v23);
    }
    while (v8 != v9);
    if ((void *)v107 != __p[1]) {
      *(void *)&long long v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  nullsub_34(&v103);
  uint64_t v24 = *a2;
  uint64_t v103 = (void (**)(void **, uint64_t, void))&unk_270444938;
  uint64_t v102 = (void (**)(void **, uint64_t, void))&unk_270444AE8;
  long long v107 = 0u;
  long long v108 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255125F70((uint64_t)__p);
  uint64_t v25 = *((void *)&v108 + 1);
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v108 + 1) + (void)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v108 + 1) + v108) & 0x1FF)) = v24;
  BOOL v6 = __CFADD__(v25, 1);
  uint64_t v26 = v25 + 1;
  if (!v6)
  {
    do
    {
      uint64_t v32 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v108 + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v26 - 1) & 0x1FF));
      if ((void *)v107 == __p[1]) {
        unint64_t v33 = 0;
      }
      else {
        unint64_t v33 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
      }
      *((void *)&v108 + 1) = v26 - 1;
      if (v33 - (v26 + (void)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(void *)&long long v107 = v107 - 8;
      }
      if (sub_25513A9F4(*(void *)(a1 + 32)))
      {
        v103[2]((void **)&v103, v32, a1);
        if (sub_25513A9F4(*(void *)(a1 + 32))) {
          v102[2]((void **)&v102, v32, a1);
        }
      }
      sub_25510F8A8(v32, &v104);
      char v34 = v104;
      uint64_t v35 = v105;
      if (v104 != v105)
      {
        uint64_t v36 = *((void *)&v108 + 1);
        uint64_t v37 = v108;
        do
        {
          unint64_t v38 = (char *)__p[1];
          unint64_t v39 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
          uint64_t v40 = *(void *)v34;
          if ((void *)v107 == __p[1]) {
            unint64_t v39 = 0;
          }
          unint64_t v41 = v37 + v36;
          if (v39 == v37 + v36)
          {
            sub_255125F70((uint64_t)__p);
            uint64_t v36 = *((void *)&v108 + 1);
            uint64_t v37 = v108;
            unint64_t v38 = (char *)__p[1];
            unint64_t v41 = v108 + *((void *)&v108 + 1);
          }
          *(void *)(*(void *)&v38[(v41 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v41 & 0x1FF)) = v40;
          *((void *)&v108 + 1) = ++v36;
          v34 += 8;
        }
        while (v34 != v35);
        char v34 = v104;
      }
      if (v34)
      {
        uint64_t v105 = v34;
        operator delete(v34);
      }
      uint64_t v26 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
  }
  uint64_t v27 = (void **)__p[1];
  uint64_t v28 = (void **)v107;
  *((void *)&v108 + 1) = 0;
  unint64_t v29 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v27);
      uint64_t v28 = (void **)v107;
      uint64_t v27 = (void **)((char *)__p[1] + 8);
      __p[1] = v27;
      unint64_t v29 = v107 - (void)v27;
    }
    while ((void)v107 - (void)v27 > 0x10uLL);
  }
  unint64_t v30 = v29 >> 3;
  if (v30 == 1)
  {
    uint64_t v31 = 256;
    goto LABEL_61;
  }
  if (v30 == 2)
  {
    uint64_t v31 = 512;
LABEL_61:
    *(void *)&long long v108 = v31;
  }
  if (v27 != v28)
  {
    do
    {
      int v42 = *v27++;
      operator delete(v42);
    }
    while (v27 != v28);
    if ((void *)v107 != __p[1]) {
      *(void *)&long long v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  nullsub_34(&v102);
  nullsub_34(&v103);
  uint64_t v43 = *a2;
  uint64_t v103 = (void (**)(void **, uint64_t, void))&unk_270444B38;
  uint64_t v102 = (void (**)(void **, uint64_t, void))&unk_270444770;
  uint64_t v101 = (void (**)(void **, uint64_t, void))&unk_270444A98;
  long long v107 = 0u;
  long long v108 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255125F70((uint64_t)__p);
  uint64_t v44 = *((void *)&v108 + 1);
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v108 + 1) + (void)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v108 + 1) + v108) & 0x1FF)) = v43;
  BOOL v6 = __CFADD__(v44, 1);
  uint64_t v45 = v44 + 1;
  if (!v6)
  {
    do
    {
      uint64_t v51 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v108 + v45 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v45 - 1) & 0x1FF));
      if ((void *)v107 == __p[1]) {
        unint64_t v52 = 0;
      }
      else {
        unint64_t v52 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
      }
      *((void *)&v108 + 1) = v45 - 1;
      if (v52 - (v45 + (void)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(void *)&long long v107 = v107 - 8;
      }
      if (sub_25513A9F4(*(void *)(a1 + 32)))
      {
        v103[2]((void **)&v103, v51, a1);
        if (sub_25513A9F4(*(void *)(a1 + 32)))
        {
          v102[2]((void **)&v102, v51, a1);
          if (sub_25513A9F4(*(void *)(a1 + 32))) {
            v101[2]((void **)&v101, v51, a1);
          }
        }
      }
      sub_25510F8A8(v51, &v104);
      unint64_t v53 = v104;
      unint64_t v54 = v105;
      if (v104 != v105)
      {
        uint64_t v55 = *((void *)&v108 + 1);
        uint64_t v56 = v108;
        do
        {
          unint64_t v57 = (char *)__p[1];
          unint64_t v58 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
          uint64_t v59 = *(void *)v53;
          if ((void *)v107 == __p[1]) {
            unint64_t v58 = 0;
          }
          unint64_t v60 = v56 + v55;
          if (v58 == v56 + v55)
          {
            sub_255125F70((uint64_t)__p);
            uint64_t v55 = *((void *)&v108 + 1);
            uint64_t v56 = v108;
            unint64_t v57 = (char *)__p[1];
            unint64_t v60 = v108 + *((void *)&v108 + 1);
          }
          *(void *)(*(void *)&v57[(v60 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v60 & 0x1FF)) = v59;
          *((void *)&v108 + 1) = ++v55;
          v53 += 8;
        }
        while (v53 != v54);
        unint64_t v53 = v104;
      }
      if (v53)
      {
        uint64_t v105 = v53;
        operator delete(v53);
      }
      uint64_t v45 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
  }
  uint64_t v46 = (void **)__p[1];
  uint64_t v47 = (void **)v107;
  *((void *)&v108 + 1) = 0;
  unint64_t v48 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v46);
      uint64_t v47 = (void **)v107;
      uint64_t v46 = (void **)((char *)__p[1] + 8);
      __p[1] = v46;
      unint64_t v48 = v107 - (void)v46;
    }
    while ((void)v107 - (void)v46 > 0x10uLL);
  }
  unint64_t v49 = v48 >> 3;
  if (v49 == 1)
  {
    uint64_t v50 = 256;
    goto LABEL_96;
  }
  if (v49 == 2)
  {
    uint64_t v50 = 512;
LABEL_96:
    *(void *)&long long v108 = v50;
  }
  if (v46 != v47)
  {
    do
    {
      long long v61 = *v46++;
      operator delete(v61);
    }
    while (v46 != v47);
    if ((void *)v107 != __p[1]) {
      *(void *)&long long v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  nullsub_34(&v101);
  nullsub_34(&v102);
  nullsub_34(&v103);
  uint64_t v62 = *a2;
  uint64_t v103 = (void (**)(void **, uint64_t, void))&unk_270445758;
  long long v107 = 0u;
  long long v108 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255125F70((uint64_t)__p);
  uint64_t v63 = *((void *)&v108 + 1);
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v108 + 1) + (void)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v108 + 1) + v108) & 0x1FF)) = v62;
  BOOL v6 = __CFADD__(v63, 1);
  uint64_t v64 = v63 + 1;
  if (!v6)
  {
    do
    {
      uint64_t v70 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v108 + v64 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v64 - 1) & 0x1FF));
      if ((void *)v107 == __p[1]) {
        unint64_t v71 = 0;
      }
      else {
        unint64_t v71 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
      }
      *((void *)&v108 + 1) = v64 - 1;
      if (v71 - (v64 + (void)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(void *)&long long v107 = v107 - 8;
      }
      if (sub_25513A9F4(*(void *)(a1 + 32))) {
        v103[2]((void **)&v103, v70, a1);
      }
      sub_25510F8A8(v70, &v104);
      v72 = v104;
      uint64_t v73 = v105;
      if (v104 != v105)
      {
        uint64_t v74 = *((void *)&v108 + 1);
        uint64_t v75 = v108;
        do
        {
          long long v76 = (char *)__p[1];
          unint64_t v77 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
          uint64_t v78 = *(void *)v72;
          if ((void *)v107 == __p[1]) {
            unint64_t v77 = 0;
          }
          unint64_t v79 = v75 + v74;
          if (v77 == v75 + v74)
          {
            sub_255125F70((uint64_t)__p);
            uint64_t v74 = *((void *)&v108 + 1);
            uint64_t v75 = v108;
            long long v76 = (char *)__p[1];
            unint64_t v79 = v108 + *((void *)&v108 + 1);
          }
          *(void *)(*(void *)&v76[(v79 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v79 & 0x1FF)) = v78;
          *((void *)&v108 + 1) = ++v74;
          v72 += 8;
        }
        while (v72 != v73);
        v72 = v104;
      }
      if (v72)
      {
        uint64_t v105 = v72;
        operator delete(v72);
      }
      uint64_t v64 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
  }
  int v65 = (void **)__p[1];
  uint64_t v66 = (void **)v107;
  *((void *)&v108 + 1) = 0;
  unint64_t v67 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v65);
      uint64_t v66 = (void **)v107;
      int v65 = (void **)((char *)__p[1] + 8);
      __p[1] = v65;
      unint64_t v67 = v107 - (void)v65;
    }
    while ((void)v107 - (void)v65 > 0x10uLL);
  }
  unint64_t v68 = v67 >> 3;
  if (v68 == 1)
  {
    uint64_t v69 = 256;
    goto LABEL_129;
  }
  if (v68 == 2)
  {
    uint64_t v69 = 512;
LABEL_129:
    *(void *)&long long v108 = v69;
  }
  if (v65 != v66)
  {
    do
    {
      uint64_t v80 = *v65++;
      operator delete(v80);
    }
    while (v65 != v66);
    if ((void *)v107 != __p[1]) {
      *(void *)&long long v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  nullsub_34(&v103);
  uint64_t v81 = *a2;
  uint64_t v103 = (void (**)(void **, uint64_t, void))&unk_2704447E8;
  long long v107 = 0u;
  long long v108 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255125F70((uint64_t)__p);
  uint64_t v82 = *((void *)&v108 + 1);
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v108 + 1) + (void)v108) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v108 + 1) + v108) & 0x1FF)) = v81;
  BOOL v6 = __CFADD__(v82, 1);
  uint64_t v83 = v82 + 1;
  if (!v6)
  {
    do
    {
      uint64_t v89 = *(void *)(*(void *)((char *)__p[1] + (((unint64_t)(v108 + v83 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((v108 + v83 - 1) & 0x1FF));
      if ((void *)v107 == __p[1]) {
        unint64_t v90 = 0;
      }
      else {
        unint64_t v90 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
      }
      *((void *)&v108 + 1) = v83 - 1;
      if (v90 - (v83 + (void)v108) + 1 >= 0x400)
      {
        operator delete(*(void **)(v107 - 8));
        *(void *)&long long v107 = v107 - 8;
      }
      if (sub_25513A9F4(*(void *)(a1 + 32))) {
        v103[2]((void **)&v103, v89, a1);
      }
      sub_25510F8A8(v89, &v104);
      uint64_t v91 = v104;
      uint64_t v92 = v105;
      if (v104 != v105)
      {
        uint64_t v93 = *((void *)&v108 + 1);
        uint64_t v94 = v108;
        do
        {
          uint64_t v95 = (char *)__p[1];
          unint64_t v96 = (((void)v107 - (unint64_t)__p[1]) << 6) - 1;
          uint64_t v97 = *(void *)v91;
          if ((void *)v107 == __p[1]) {
            unint64_t v96 = 0;
          }
          unint64_t v98 = v94 + v93;
          if (v96 == v94 + v93)
          {
            sub_255125F70((uint64_t)__p);
            uint64_t v93 = *((void *)&v108 + 1);
            uint64_t v94 = v108;
            uint64_t v95 = (char *)__p[1];
            unint64_t v98 = v108 + *((void *)&v108 + 1);
          }
          *(void *)(*(void *)&v95[(v98 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v98 & 0x1FF)) = v97;
          *((void *)&v108 + 1) = ++v93;
          v91 += 8;
        }
        while (v91 != v92);
        uint64_t v91 = v104;
      }
      if (v91)
      {
        uint64_t v105 = v91;
        operator delete(v91);
      }
      uint64_t v83 = *((void *)&v108 + 1);
    }
    while (*((void *)&v108 + 1));
  }
  uint64_t v84 = (void **)__p[1];
  uint64_t v85 = (void **)v107;
  *((void *)&v108 + 1) = 0;
  unint64_t v86 = v107 - (unint64_t)__p[1];
  if ((unint64_t)v107 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v84);
      uint64_t v85 = (void **)v107;
      uint64_t v84 = (void **)((char *)__p[1] + 8);
      __p[1] = v84;
      unint64_t v86 = v107 - (void)v84;
    }
    while ((void)v107 - (void)v84 > 0x10uLL);
  }
  unint64_t v87 = v86 >> 3;
  if (v87 == 1)
  {
    uint64_t v88 = 256;
    goto LABEL_162;
  }
  if (v87 == 2)
  {
    uint64_t v88 = 512;
LABEL_162:
    *(void *)&long long v108 = v88;
  }
  if (v84 != v85)
  {
    do
    {
      uint64_t v99 = *v84++;
      operator delete(v99);
    }
    while (v84 != v85);
    if ((void *)v107 != __p[1]) {
      *(void *)&long long v107 = v107 + (((unint64_t)__p[1] - v107 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  return nullsub_34(&v103);
}

void sub_255124C1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, uint64_t a17, char a18)
{
}

void sub_255124CE8(void *a1)
{
  uint64_t v1 = (_DWORD *)a1[25];
  for (unint64_t i = (_DWORD *)a1[26]; v1 != i; v1 += 12)
  {
    if (*v1)
    {
      if ((*v1 - 1) < 2)
      {
        uint64_t v4 = (void *)a1[4];
        long long __p = operator new(0x20uLL);
        long long v6 = xmmword_25513EE00;
        strcpy((char *)__p, "insn metadata not implemented.");
        sub_25513A900(v4, 6, (uint64_t)&__p);
        if (SHIBYTE(v6) < 0) {
          operator delete(__p);
        }
        return;
      }
    }
    else
    {
      sub_255131240((uint64_t)v1, (uint64_t)a1);
    }
  }
}

void sub_255124DAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_255124DC8(uint64_t a1)
{
  uint64_t v1 = *(uint64_t **)(a1 + 48);
  for (unint64_t i = *(uint64_t **)(a1 + 56); v1 != i; v1 += 2)
  {
    uint64_t v4 = *v1;
    if (*(void *)(*v1 + 80) != *(void *)(*v1 + 72))
    {
      unint64_t v5 = 0;
      do
      {
        sub_255126F04(*(uint64_t **)(a1 + 72), a1, v4, v5++);
        uint64_t v4 = *v1;
      }
      while (v5 < (uint64_t)(*(void *)(*v1 + 80) - *(void *)(*v1 + 72)) >> 4);
    }
  }
}

void sub_255124E4C(void *a1)
{
  uint64_t v1 = (uint64_t *)a1[13];
  uint64_t v2 = (uint64_t *)a1[14];
  if (v1 != v2)
  {
    while (1)
    {
      uint64_t v4 = *v1;
      if ((*(unsigned int (**)(uint64_t))(*(void *)*v1 + 104))(*v1) != 1
        || (sub_25512AAFC(v4) & 1) != 0
        || (*(uint64_t (**)(void))(*(void *)*v1 + 168))())
      {
        goto LABEL_4;
      }
      unint64_t v5 = (void *)a1[4];
      uint64_t v6 = sub_255129418(*v1);
      int v7 = *(char *)(v6 + 23);
      if (v7 >= 0) {
        size_t v8 = *(unsigned __int8 *)(v6 + 23);
      }
      else {
        size_t v8 = *(void *)(v6 + 8);
      }
      unint64_t v9 = v8 + 64;
      if (v8 + 64 >= 0x7FFFFFFFFFFFFFF8) {
        sub_2550EAC50();
      }
      unint64_t v10 = (const void **)v6;
      if (v9 <= 0x16) {
        break;
      }
      uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17) {
        uint64_t v12 = v9 | 7;
      }
      uint64_t v13 = v12 + 1;
      unint64_t v14 = (uint64_t *)operator new(v12 + 1);
      *(void *)&v20[8] = v8 + 64;
      *(void *)&v20[16] = v13 | 0x8000000000000000;
      *(void *)unint64_t v20 = v14;
      unint64_t v11 = v14 + 8;
      qmemcpy(v14, "Cannot validate because the address of Client-allocated tensor '", 64);
      if (v8) {
        goto LABEL_17;
      }
LABEL_21:
      *((unsigned char *)v11 + v8) = 0;
      if (v20[23] >= 0) {
        std::string::size_type v16 = 22;
      }
      else {
        std::string::size_type v16 = (*(void *)&v20[16] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      }
      if (v20[23] >= 0) {
        std::string::size_type v17 = v20[23];
      }
      else {
        std::string::size_type v17 = *(void *)&v20[8];
      }
      if (v16 - v17 >= 0xD)
      {
        uint64_t v18 = v20;
        if (v20[23] < 0) {
          uint64_t v18 = *(unsigned char **)v20;
        }
        qmemcpy(&v18[v17], "' is not set.", 13);
        std::string::size_type v19 = v17 + 13;
        if ((v20[23] & 0x80000000) != 0) {
          *(void *)&v20[8] = v17 + 13;
        }
        else {
          v20[23] = v19 & 0x7F;
        }
        v18[v19] = 0;
      }
      else
      {
        std::string::__grow_by_and_replace((std::string *)v20, v16, v17 - v16 + 13, v17, v17, 0, 0xDuLL, "' is not set.");
      }
      *(_OWORD *)&v20[32] = *(_OWORD *)v20;
      *(void *)&v20[48] = *(void *)&v20[16];
      memset(v20, 0, 24);
      sub_25513A900(v5, 5, (uint64_t)&v20[32]);
      if ((v20[55] & 0x80000000) != 0)
      {
        operator delete(*(void **)&v20[32]);
        if ((v20[23] & 0x80000000) != 0) {
          goto LABEL_37;
        }
      }
      else if ((v20[23] & 0x80000000) != 0)
      {
LABEL_37:
        operator delete(*(void **)v20);
      }
LABEL_4:
      v1 += 2;
      if (v1 == v2) {
        return;
      }
    }
    qmemcpy(v20, "Cannot validate because the address of Client-allocated tensor '", sizeof(v20));
    unint64_t v11 = &v21;
LABEL_17:
    if (v7 >= 0) {
      unint64_t v15 = v10;
    }
    else {
      unint64_t v15 = *v10;
    }
    memmove(v11, v15, v8);
    goto LABEL_21;
  }
}

void sub_2551250E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if ((a16 & 0x80000000) == 0) {
    _Unwind_Resume(exception_object);
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_255125130(uint64_t a1)
{
  HIBYTE(__p[2]) = 4;
  strcpy((char *)__p, "init");
  uint64_t v2 = *(const void ****)(a1 + 48);
  uint64_t v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      }
      else {
        uint64_t v6 = (*v2)[1];
      }
      if (v6 == (const void *)4)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)*v2 + 23)) {
            break;
          }
          int v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            uint64_t v4 = (const void **)((char *)v4 + 1);
            int v7 = (void **)((char *)v7 + 1);
            if (!--v5) {
              goto LABEL_14;
            }
          }
        }
      }
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_19;
      }
    }
  }
LABEL_14:
  if (v2 != v3)
  {
    size_t v8 = (std::__shared_weak_count *)v2[1];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t shared_owners = v8->__shared_owners_;
      std::__shared_weak_count::__release_weak(v8);
      if (shared_owners != -1)
      {
        HIBYTE(__p[2]) = 4;
        strcpy((char *)__p, "init");
        unint64_t v10 = *(const void ****)(a1 + 48);
        unint64_t v11 = *(const void ****)(a1 + 56);
        if (v10 != v11)
        {
          while (1)
          {
            uint64_t v13 = *v10;
            uint64_t v14 = *((unsigned __int8 *)*v10 + 23);
            if ((v14 & 0x80u) == 0) {
              unint64_t v15 = (const void *)*((unsigned __int8 *)*v10 + 23);
            }
            else {
              unint64_t v15 = (*v10)[1];
            }
            if (v15 == (const void *)4)
            {
              if ((v14 & 0x80) != 0)
              {
                if (!memcmp(*v13, __p, (size_t)(*v10)[1])) {
                  break;
                }
              }
              else
              {
                if (!*((unsigned char *)*v10 + 23)) {
                  break;
                }
                std::string::size_type v16 = __p;
                while (*(unsigned __int8 *)v13 == *(unsigned __int8 *)v16)
                {
                  uint64_t v13 = (const void **)((char *)v13 + 1);
                  std::string::size_type v16 = (void **)((char *)v16 + 1);
                  if (!--v14) {
                    goto LABEL_32;
                  }
                }
              }
            }
            v10 += 2;
            if (v10 == v11) {
              goto LABEL_36;
            }
          }
        }
LABEL_32:
        if (v10 == v11 || (std::string::size_type v17 = (std::__shared_weak_count *)v10[1]) == 0)
        {
LABEL_36:
          uint64_t v18 = 0;
          uint64_t v35 = 0;
          uint64_t v36 = 0;
        }
        else
        {
          uint64_t v18 = (uint64_t)*v10;
          atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          uint64_t v35 = 0;
          uint64_t v36 = std::__shared_weak_count::lock(v17);
          if (v36) {
            uint64_t v35 = v18;
          }
          else {
            uint64_t v18 = 0;
          }
          std::__shared_weak_count::__release_weak(v17);
        }
        if (*(void *)(v18 + 80) != *(void *)(v18 + 72))
        {
          unint64_t v19 = 0;
          do
          {
            sub_255126F04(*(uint64_t **)(a1 + 72), a1, v18, v19++);
            uint64_t v18 = v35;
          }
          while (v19 < (uint64_t)(*(void *)(v35 + 80) - *(void *)(v35 + 72)) >> 4);
        }
        long long v34 = 0u;
        memset(__p, 0, sizeof(__p));
        sub_255126734((uint64_t)__p);
        uint64_t v20 = *(void *)(v18 + 80);
        uint64_t v21 = (void **)__p[2];
        unint64_t v22 = (void **)__p[1];
        *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v34 + 1) + (void)v34) >> 6) & 0x3FFFFFFFFFFFFF8))
                  + 8 * ((*((void *)&v34 + 1) + v34) & 0x1FF)) = 0;
        uint64_t v23 = (*((void *)&v34 + 1))++;
        unint64_t v24 = (v20 - *(void *)(v18 + 72)) >> 4;
        if ((*(void **)((char *)v22 + (((unint64_t)(v23 + v34) >> 6) & 0x3FFFFFFFFFFFFF8)))[((_WORD)v23 + (_WORD)v34) & 0x1FF] >= v24)
        {
          uint64_t v27 = v21;
        }
        else
        {
          do
          {
            BOOL v25 = sub_25513A9F4(*(void *)(a1 + 32));
            unint64_t v22 = (void **)__p[1];
            if (!v25) {
              break;
            }
            uint64_t v26 = sub_255128010(*(int8x8_t ***)(a1 + 72), a1, v18, *(void *)(*(void *)((char *)__p[1]+ (((unint64_t)(*((void *)&v34 + 1) + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v34 + 1) + v34 - 1) & 0x1FF)));
            unint64_t v22 = (void **)__p[1];
            *(void *)(*(void *)((char *)__p[1]
                                  + (((unint64_t)(*((void *)&v34 + 1) + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((*((void *)&v34 + 1) + v34 - 1) & 0x1FF)) = v26;
          }
          while ((*(void **)((char *)v22
                              + (((unint64_t)(*((void *)&v34 + 1) + v34 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((void *)&v34 + 1) + v34 - 1) & 0x1FF] < v24);
          uint64_t v27 = (void **)__p[2];
        }
        *((void *)&v34 + 1) = 0;
        unint64_t v28 = (char *)v27 - (char *)v22;
        if ((unint64_t)((char *)v27 - (char *)v22) >= 0x11)
        {
          do
          {
            operator delete(*v22);
            uint64_t v27 = (void **)__p[2];
            unint64_t v22 = (void **)((char *)__p[1] + 8);
            __p[1] = v22;
            unint64_t v28 = (char *)__p[2] - (char *)v22;
          }
          while ((void *)((char *)__p[2] - (char *)v22) > (void *)0x10);
        }
        unint64_t v29 = v28 >> 3;
        if (v29 == 1)
        {
          uint64_t v30 = 256;
        }
        else
        {
          if (v29 != 2) {
            goto LABEL_54;
          }
          uint64_t v30 = 512;
        }
        *(void *)&long long v34 = v30;
LABEL_54:
        if (v22 != v27)
        {
          do
          {
            uint64_t v31 = *v22++;
            operator delete(v31);
          }
          while (v22 != v27);
          if (__p[2] != __p[1]) {
            __p[2] = (char *)__p[2] + (((char *)__p[1] - (char *)__p[2] + 7) & 0xFFFFFFFFFFFFFFF8);
          }
        }
        if (__p[0]) {
          operator delete(__p[0]);
        }
        uint64_t v32 = v36;
        if (v36)
        {
          if (!atomic_fetch_add(&v36->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        return;
      }
    }
  }
LABEL_19:
  uint64_t v12 = *(void **)(a1 + 32);
  __p[0] = operator new(0x40uLL);
  *(_OWORD *)&__p[1] = xmmword_25513EE10;
  strcpy((char *)__p[0], "Cannot initialize VM, init function expired or does not exist");
  sub_25513A900(v12, 5, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_255125584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
}

uint64_t sub_2551255C8@<X0>(uint64_t result@<X0>, unsigned __int8 **a2@<X1>, const void ***a3@<X8>)
{
  uint64_t v4 = *(const void ****)(result + 48);
  uint64_t v5 = *(const void ****)(result + 56);
  if (v4 != v5)
  {
    char v6 = *((unsigned char *)a2 + 23);
    if (v6 >= 0) {
      int v7 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      int v7 = a2[1];
    }
    if (v6 >= 0) {
      size_t v8 = (unsigned __int8 *)a2;
    }
    else {
      size_t v8 = *a2;
    }
    while (1)
    {
      unint64_t v9 = *v4;
      uint64_t v10 = *((unsigned __int8 *)*v4 + 23);
      if ((v10 & 0x80u) == 0) {
        unint64_t v11 = (unsigned __int8 *)*((unsigned __int8 *)*v4 + 23);
      }
      else {
        unint64_t v11 = (unsigned __int8 *)(*v4)[1];
      }
      if (v11 == v7)
      {
        if ((v10 & 0x80) != 0)
        {
          uint64_t result = memcmp(*v9, v8, (size_t)(*v4)[1]);
          if (!result) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)*v4 + 23)) {
            break;
          }
          uint64_t v12 = v8;
          while (*(unsigned __int8 *)v9 == *v12)
          {
            unint64_t v9 = (const void **)((char *)v9 + 1);
            ++v12;
            if (!--v10) {
              goto LABEL_19;
            }
          }
        }
      }
      v4 += 2;
      if (v4 == v5) {
        goto LABEL_22;
      }
    }
  }
LABEL_19:
  if (v4 == v5)
  {
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    uint64_t v13 = v4[1];
    *a3 = *v4;
    a3[1] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 2, 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

void sub_2551256B0(uint64_t a1)
{
  BYTE7(v25) = 6;
  strcpy((char *)__p, "deinit");
  uint64_t v2 = *(const void ****)(a1 + 48);
  uint64_t v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0) {
        char v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      }
      else {
        char v6 = (*v2)[1];
      }
      if (v6 == (const void *)6)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)*v2 + 23)) {
            break;
          }
          int v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            uint64_t v4 = (const void **)((char *)v4 + 1);
            int v7 = (void **)((char *)v7 + 1);
            if (!--v5) {
              goto LABEL_14;
            }
          }
        }
      }
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_18;
      }
    }
  }
LABEL_14:
  if (v2 == v3 || (size_t v8 = (std::__shared_weak_count *)v2[1]) == 0)
  {
LABEL_18:
    uint64_t v9 = 0;
    uint64_t v27 = 0;
    unint64_t v28 = 0;
  }
  else
  {
    uint64_t v9 = (uint64_t)*v2;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v27 = 0;
    unint64_t v28 = std::__shared_weak_count::lock(v8);
    if (v28) {
      uint64_t v27 = v9;
    }
    else {
      uint64_t v9 = 0;
    }
    std::__shared_weak_count::__release_weak(v8);
  }
  if (*(void *)(v9 + 80) != *(void *)(v9 + 72))
  {
    unint64_t v10 = 0;
    do
    {
      sub_255126F04(*(uint64_t **)(a1 + 72), a1, v9, v10++);
      uint64_t v9 = v27;
    }
    while (v10 < (uint64_t)(*(void *)(v27 + 80) - *(void *)(v27 + 72)) >> 4);
  }
  long long v25 = 0u;
  long long v26 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255126734((uint64_t)__p);
  uint64_t v11 = *(void *)(v9 + 80);
  uint64_t v12 = (void **)v25;
  uint64_t v13 = (void **)__p[1];
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v26 + 1) + (void)v26) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v26 + 1) + v26) & 0x1FF)) = 0;
  uint64_t v14 = (*((void *)&v26 + 1))++;
  unint64_t v15 = (v11 - *(void *)(v9 + 72)) >> 4;
  if ((*(void **)((char *)v13 + (((unint64_t)(v14 + v26) >> 6) & 0x3FFFFFFFFFFFFF8)))[((_WORD)v14
                                                                                                 + (_WORD)v26) & 0x1FF] >= v15)
  {
    uint64_t v18 = v12;
  }
  else
  {
    do
    {
      BOOL v16 = sub_25513A9F4(*(void *)(a1 + 32));
      uint64_t v13 = (void **)__p[1];
      if (!v16) {
        break;
      }
      uint64_t v17 = sub_255128010(*(int8x8_t ***)(a1 + 72), a1, v9, *(void *)(*(void *)((char *)__p[1]+ (((unint64_t)(*((void *)&v26 + 1) + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v26 + 1) + v26 - 1) & 0x1FF)));
      uint64_t v13 = (void **)__p[1];
      *(void *)(*(void *)((char *)__p[1]
                            + (((unint64_t)(*((void *)&v26 + 1) + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((void *)&v26 + 1) + v26 - 1) & 0x1FF)) = v17;
    }
    while ((*(void **)((char *)v13
                        + (((unint64_t)(*((void *)&v26 + 1) + v26 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((void *)&v26 + 1) + v26 - 1) & 0x1FF] < v15);
    uint64_t v18 = (void **)v25;
  }
  *((void *)&v26 + 1) = 0;
  unint64_t v19 = (char *)v18 - (char *)v13;
  if ((unint64_t)((char *)v18 - (char *)v13) >= 0x11)
  {
    do
    {
      operator delete(*v13);
      uint64_t v18 = (void **)v25;
      uint64_t v13 = (void **)((char *)__p[1] + 8);
      __p[1] = v13;
      unint64_t v19 = v25 - (void)v13;
    }
    while ((void)v25 - (void)v13 > 0x10uLL);
  }
  unint64_t v20 = v19 >> 3;
  if (v20 == 1)
  {
    uint64_t v21 = 256;
    goto LABEL_35;
  }
  if (v20 == 2)
  {
    uint64_t v21 = 512;
LABEL_35:
    *(void *)&long long v26 = v21;
  }
  if (v13 != v18)
  {
    do
    {
      unint64_t v22 = *v13++;
      operator delete(v22);
    }
    while (v13 != v18);
    if ((void *)v25 != __p[1]) {
      *(void *)&long long v25 = v25 + (((unint64_t)__p[1] - v25 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v23 = v28;
  if (v28)
  {
    if (!atomic_fetch_add(&v28->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_2551259F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

void sub_255125A1C(uint64_t a1)
{
  BYTE7(v23) = 7;
  strcpy((char *)__p, "reshape");
  uint64_t v2 = *(const void ****)(a1 + 48);
  uint64_t v3 = *(const void ****)(a1 + 56);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = *((unsigned __int8 *)*v2 + 23);
      if ((v5 & 0x80u) == 0) {
        char v6 = (const void *)*((unsigned __int8 *)*v2 + 23);
      }
      else {
        char v6 = (*v2)[1];
      }
      if (v6 == (const void *)7)
      {
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*v4, __p, (size_t)(*v2)[1])) {
            break;
          }
        }
        else
        {
          if (!*((unsigned char *)*v2 + 23)) {
            break;
          }
          int v7 = __p;
          while (*(unsigned __int8 *)v4 == *(unsigned __int8 *)v7)
          {
            uint64_t v4 = (const void **)((char *)v4 + 1);
            int v7 = (void **)((char *)v7 + 1);
            if (!--v5) {
              goto LABEL_14;
            }
          }
        }
      }
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_18;
      }
    }
  }
LABEL_14:
  if (v2 == v3 || (size_t v8 = (std::__shared_weak_count *)v2[1]) == 0)
  {
LABEL_18:
    uint64_t v9 = 0;
    uint64_t v25 = 0;
    long long v26 = 0;
  }
  else
  {
    uint64_t v9 = (uint64_t)*v2;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v25 = 0;
    long long v26 = std::__shared_weak_count::lock(v8);
    if (v26) {
      uint64_t v25 = v9;
    }
    else {
      uint64_t v9 = 0;
    }
    std::__shared_weak_count::__release_weak(v8);
  }
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)long long __p = 0u;
  sub_255126734((uint64_t)__p);
  unint64_t v10 = (void **)v23;
  uint64_t v11 = (void **)__p[1];
  *(void *)(*(void *)((char *)__p[1] + (((*((void *)&v24 + 1) + (void)v24) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*((void *)&v24 + 1) + v24) & 0x1FF)) = 0;
  uint64_t v12 = (*((void *)&v24 + 1))++;
  unint64_t v13 = (uint64_t)(*(void *)(v9 + 80) - *(void *)(v9 + 72)) >> 4;
  if ((*(void **)((char *)v11 + (((unint64_t)(v12 + v24) >> 6) & 0x3FFFFFFFFFFFFF8)))[(v12 + v24) & 0x1FF] >= v13)
  {
    BOOL v16 = v10;
  }
  else
  {
    do
    {
      BOOL v14 = sub_25513A9F4(*(void *)(a1 + 32));
      uint64_t v11 = (void **)__p[1];
      if (!v14) {
        break;
      }
      uint64_t v15 = sub_255128010(*(int8x8_t ***)(a1 + 72), a1, v9, *(void *)(*(void *)((char *)__p[1]+ (((unint64_t)(*((void *)&v24 + 1) + v24 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * ((*((void *)&v24 + 1) + v24 - 1) & 0x1FF)));
      uint64_t v11 = (void **)__p[1];
      *(void *)(*(void *)((char *)__p[1]
                            + (((unint64_t)(*((void *)&v24 + 1) + v24 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                + 8 * ((*((void *)&v24 + 1) + v24 - 1) & 0x1FF)) = v15;
    }
    while ((*(void **)((char *)v11
                        + (((unint64_t)(*((void *)&v24 + 1) + v24 - 1) >> 6) & 0x3FFFFFFFFFFFFF8)))[(*((void *)&v24 + 1) + v24 - 1) & 0x1FF] < v13);
    BOOL v16 = (void **)v23;
  }
  *((void *)&v24 + 1) = 0;
  unint64_t v17 = (char *)v16 - (char *)v11;
  if ((unint64_t)((char *)v16 - (char *)v11) >= 0x11)
  {
    do
    {
      operator delete(*v11);
      BOOL v16 = (void **)v23;
      uint64_t v11 = (void **)((char *)__p[1] + 8);
      __p[1] = v11;
      unint64_t v17 = v23 - (void)v11;
    }
    while ((void)v23 - (void)v11 > 0x10uLL);
  }
  unint64_t v18 = v17 >> 3;
  if (v18 == 1)
  {
    uint64_t v19 = 256;
    goto LABEL_32;
  }
  if (v18 == 2)
  {
    uint64_t v19 = 512;
LABEL_32:
    *(void *)&long long v24 = v19;
  }
  if (v11 != v16)
  {
    do
    {
      unint64_t v20 = *v11++;
      operator delete(v20);
    }
    while (v11 != v16);
    if ((void *)v23 != __p[1]) {
      *(void *)&long long v23 = v23 + (((unint64_t)__p[1] - v23 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v21 = v26;
  if (v26)
  {
    if (!atomic_fetch_add(&v26->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_255125D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

BOOL sub_255125D44(void *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v3 = (const char *)a2;
  }
  else {
    uint64_t v3 = *(const char **)a2;
  }
  uint64_t v4 = dlopen(v3, 262);
  *a1 = v4;
  return v4 != 0;
}

void sub_255125D88(uint64_t a1)
{
  *(void *)a1 = &unk_270445348;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)nullsub_34(a1);
  j__free(v4);
}

uint64_t sub_255125E18(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  *(void *)(a1 + 40) = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    uint64_t v6 = 512;
LABEL_7:
    *(void *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      int v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    if (v8 != v9) {
      *(void *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_255125EE0(uint64_t a1)
{
  uint64_t v2 = *(char **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v5 = *(char **)v2;
      uint64_t v6 = (MIL::Blob::StorageReader *)*((void *)v2 + 5);
      *((void *)v2 + 5) = 0;
      if (v6)
      {
        MIL::Blob::StorageReader::~StorageReader(v6);
        MEMORY[0x25A2886C0]();
      }
      if (v2[39] < 0) {
        operator delete(*((void **)v2 + 2));
      }
      operator delete(v2);
      uint64_t v2 = v5;
    }
    while (v5);
  }
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

void sub_255125F70(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v29 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v29 = 1;
      }
      if (!(v29 >> 61))
      {
        unint64_t v30 = v29 >> 2;
        uint64_t v31 = 8 * v29;
        uint64_t v32 = (char *)operator new(8 * v29);
        unint64_t v33 = &v32[8 * v30];
        long long v34 = &v32[v31];
        int64_t v36 = v5 - v7;
        BOOL v35 = v5 == v7;
        unint64_t v5 = v33;
        if (!v35)
        {
          unint64_t v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            unint64_t v53 = &v32[8 * v30];
            unint64_t v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              uint64_t v54 = (v37 >> 3) + 1;
              uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v38 = &v33[v55];
              v7 += v55;
              uint64_t v56 = (long long *)(v6 + 3);
              unint64_t v57 = v53 + 16;
              uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *unint64_t v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            unint64_t v38 = &v32[8 * v30];
          }
          do
          {
            uint64_t v60 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_2550EACF8();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    uint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      int v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  unint64_t v18 = *(char **)(a1 + 8);
  unint64_t v17 = *(char **)(a1 + 16);
  uint64_t v19 = v17 - v18;
  uint64_t v20 = (v17 - v18) >> 3;
  uint64_t v21 = *(char **)(a1 + 24);
  uint64_t v22 = (uint64_t)&v21[-*(void *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(void *)&long long v69 = operator new(0x1000uLL);
      sub_255126408((char **)a1, &v69);
      return;
    }
    *(void *)&long long v69 = operator new(0x1000uLL);
    sub_255126598((void **)a1, &v69);
    unint64_t v39 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    int v7 = (char *)(v39 + 1);
    uint64_t v8 = *v39;
    *(void *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_56;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v40 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v40 = 1;
      }
      if (!(v40 >> 61))
      {
        unint64_t v41 = v40 >> 2;
        uint64_t v42 = 8 * v40;
        uint64_t v32 = (char *)operator new(8 * v40);
        unint64_t v33 = &v32[8 * v41];
        long long v34 = &v32[v42];
        int64_t v43 = v5 - v7;
        BOOL v35 = v5 == v7;
        unint64_t v5 = v33;
        if (!v35)
        {
          unint64_t v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            long long v61 = &v32[8 * v41];
            uint64_t v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              uint64_t v62 = (v44 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v45 = &v33[v63];
              v7 += v63;
              uint64_t v64 = (long long *)(v39 + 3);
              int v65 = v61 + 16;
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *int v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            uint64_t v45 = &v32[8 * v41];
          }
          do
          {
            uint64_t v68 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(void *)a1 = v32;
        *(void *)(a1 + 8) = v33;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v21 == *(char **)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  uint64_t v71 = a1 + 24;
  if (v24 >> 61) {
    goto LABEL_64;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  long long v26 = &v25[8 * v20];
  *(void *)&long long v69 = v25;
  *((void *)&v69 + 1) = v26;
  *(void *)&long long v70 = v26;
  *((void *)&v70 + 1) = &v25[8 * v24];
  uint64_t v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = v19 >> 2;
      }
      if (v46 >> 61) {
        sub_2550EACF8();
      }
      uint64_t v47 = (char *)operator new(8 * v46);
      long long v26 = &v47[8 * (v46 >> 2)];
      *(void *)&long long v69 = v47;
      *((void *)&v69 + 1) = v26;
      *((void *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      unint64_t v17 = *(char **)(a1 + 16);
    }
    else
    {
      unint64_t v28 = v20 + 2;
      if (v20 >= -1) {
        unint64_t v28 = v20 + 1;
      }
      v26 -= 8 * (v28 >> 1);
      *((void *)&v69 + 1) = v26;
    }
  }
  *(void *)long long v26 = v27;
  *(void *)&long long v70 = v26 + 8;
  uint64_t v48 = -7 - (void)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_255126598((void **)&v69, v17);
  }
  unint64_t v49 = *(char **)a1;
  long long v50 = v69;
  long long v51 = v70;
  *(void *)&long long v69 = *(void *)a1;
  *((void *)&v69 + 1) = v17;
  long long v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  long long v70 = v52;
  if (v17 != (char *)v52) {
    *(void *)&long long v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v49) {
    operator delete(v49);
  }
}

void sub_255126398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_255126408(char **a1, void *a2)
{
  unint64_t v4 = a1[2];
  if (v4 != a1[3]) {
    goto LABEL_22;
  }
  unint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  if (v6 > *a1)
  {
    uint64_t v7 = (v6 - *a1) >> 3;
    if (v7 >= -1) {
      uint64_t v8 = v7 + 1;
    }
    else {
      uint64_t v8 = v7 + 2;
    }
    uint64_t v9 = v8 >> 1;
    uint64_t v10 = -v9;
    uint64_t v11 = &v6[-8 * v9];
    int64_t v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      unint64_t v4 = a1[1];
    }
    uint64_t v13 = &v4[8 * v10];
    unint64_t v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  unint64_t v14 = (v4 - v5) >> 2;
  if (v4 == v5) {
    unint64_t v14 = 1;
  }
  if (v14 >> 61) {
    sub_2550EACF8();
  }
  unint64_t v15 = v14 >> 2;
  uint64_t v16 = 8 * v14;
  unint64_t v17 = (char *)operator new(8 * v14);
  unint64_t v18 = &v17[8 * v15];
  int64_t v20 = v4 - v6;
  BOOL v19 = v4 == v6;
  unint64_t v4 = v18;
  if (!v19)
  {
    unint64_t v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      uint64_t v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        uint64_t v31 = *(void *)v6;
        v6 += 8;
        *(void *)uint64_t v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    uint64_t v23 = &v17[8 * v15];
    uint64_t v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20) {
      goto LABEL_19;
    }
    uint64_t v24 = (v21 >> 3) + 1;
    uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    uint64_t v22 = &v18[v25];
    long long v26 = &v6[v25];
    uint64_t v27 = (long long *)(v6 + 16);
    unint64_t v28 = v23 + 16;
    uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      long long v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *unint64_t v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    uint64_t v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
      goto LABEL_19;
    }
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    unint64_t v4 = a1[2];
  }
LABEL_22:
  *(void *)unint64_t v4 = *a2;
  a1[2] += 8;
}

void sub_255126598(void **a1, void *a2)
{
  unint64_t v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    uint64_t v7 = a1[2];
    uint64_t v6 = a1[3];
    if (v7 >= v6)
    {
      uint64_t v13 = v6 - v4;
      BOOL v12 = v13 == 0;
      unint64_t v14 = v13 >> 2;
      if (v12) {
        unint64_t v14 = 1;
      }
      if (v14 >> 61) {
        sub_2550EACF8();
      }
      unint64_t v15 = (v14 + 3) >> 2;
      uint64_t v16 = 8 * v14;
      unint64_t v17 = (char *)operator new(8 * v14);
      unint64_t v5 = &v17[8 * v15];
      unint64_t v18 = v5;
      uint64_t v19 = v7 - v4;
      if (v7 != v4)
      {
        unint64_t v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v20 = v19 - 8;
        unint64_t v21 = &v17[8 * v15];
        uint64_t v22 = v4;
        if (v20 < 0x38) {
          goto LABEL_27;
        }
        uint64_t v23 = &v17[8 * v15];
        unint64_t v21 = v23;
        uint64_t v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20) {
          goto LABEL_27;
        }
        uint64_t v24 = (v20 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        unint64_t v21 = &v5[v25];
        uint64_t v22 = &v4[v25];
        long long v26 = (long long *)(v4 + 16);
        uint64_t v27 = v23 + 16;
        uint64_t v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *uint64_t v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            uint64_t v30 = *(void *)v22;
            v22 += 8;
            *(void *)unint64_t v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        unint64_t v5 = (char *)a1[1];
      }
    }
    else
    {
      uint64_t v8 = (v6 - v7) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v11 = &v7[8 * (v9 >> 1)];
      unint64_t v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        unint64_t v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    unint64_t v5 = (char *)a1[1];
  }
  *((void *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

void sub_255126734(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(void *)unint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v29 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v29 = 1;
      }
      if (!(v29 >> 61))
      {
        unint64_t v30 = v29 >> 2;
        uint64_t v31 = 8 * v29;
        uint64_t v32 = (char *)operator new(8 * v29);
        unint64_t v33 = &v32[8 * v30];
        long long v34 = &v32[v31];
        int64_t v36 = v5 - v7;
        BOOL v35 = v5 == v7;
        unint64_t v5 = v33;
        if (!v35)
        {
          unint64_t v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            unint64_t v53 = &v32[8 * v30];
            unint64_t v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              uint64_t v54 = (v37 >> 3) + 1;
              uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v38 = &v33[v55];
              v7 += v55;
              uint64_t v56 = (long long *)(v6 + 3);
              unint64_t v57 = v53 + 16;
              uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *unint64_t v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            unint64_t v38 = &v32[8 * v30];
          }
          do
          {
            uint64_t v60 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_2550EACF8();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    unint64_t v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      uint64_t v7 = *(char **)(a1 + 8);
    }
    unint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  unint64_t v18 = *(char **)(a1 + 8);
  unint64_t v17 = *(char **)(a1 + 16);
  uint64_t v19 = v17 - v18;
  uint64_t v20 = (v17 - v18) >> 3;
  unint64_t v21 = *(char **)(a1 + 24);
  uint64_t v22 = (uint64_t)&v21[-*(void *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(void *)&long long v69 = operator new(0x1000uLL);
      sub_255126408((char **)a1, &v69);
      return;
    }
    *(void *)&long long v69 = operator new(0x1000uLL);
    sub_255126598((void **)a1, &v69);
    unint64_t v39 = *(void **)(a1 + 8);
    unint64_t v5 = *(char **)(a1 + 16);
    uint64_t v7 = (char *)(v39 + 1);
    uint64_t v8 = *v39;
    *(void *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_56;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v40 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v40 = 1;
      }
      if (!(v40 >> 61))
      {
        unint64_t v41 = v40 >> 2;
        uint64_t v42 = 8 * v40;
        uint64_t v32 = (char *)operator new(8 * v40);
        unint64_t v33 = &v32[8 * v41];
        long long v34 = &v32[v42];
        int64_t v43 = v5 - v7;
        BOOL v35 = v5 == v7;
        unint64_t v5 = v33;
        if (!v35)
        {
          unint64_t v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            long long v61 = &v32[8 * v41];
            uint64_t v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              uint64_t v62 = (v44 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v45 = &v33[v63];
              v7 += v63;
              uint64_t v64 = (long long *)(v39 + 3);
              int v65 = v61 + 16;
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *int v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            uint64_t v45 = &v32[8 * v41];
          }
          do
          {
            uint64_t v68 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(void *)a1 = v32;
        *(void *)(a1 + 8) = v33;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          unint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v21 == *(char **)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  uint64_t v71 = a1 + 24;
  if (v24 >> 61) {
    goto LABEL_64;
  }
  uint64_t v25 = (char *)operator new(8 * v24);
  long long v26 = &v25[8 * v20];
  *(void *)&long long v69 = v25;
  *((void *)&v69 + 1) = v26;
  *(void *)&long long v70 = v26;
  *((void *)&v70 + 1) = &v25[8 * v24];
  uint64_t v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = v19 >> 2;
      }
      if (v46 >> 61) {
        sub_2550EACF8();
      }
      uint64_t v47 = (char *)operator new(8 * v46);
      long long v26 = &v47[8 * (v46 >> 2)];
      *(void *)&long long v69 = v47;
      *((void *)&v69 + 1) = v26;
      *((void *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      unint64_t v17 = *(char **)(a1 + 16);
    }
    else
    {
      unint64_t v28 = v20 + 2;
      if (v20 >= -1) {
        unint64_t v28 = v20 + 1;
      }
      v26 -= 8 * (v28 >> 1);
      *((void *)&v69 + 1) = v26;
    }
  }
  *(void *)long long v26 = v27;
  *(void *)&long long v70 = v26 + 8;
  uint64_t v48 = -7 - (void)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_255126598((void **)&v69, v17);
  }
  unint64_t v49 = *(char **)a1;
  long long v50 = v69;
  long long v51 = v70;
  *(void *)&long long v69 = *(void *)a1;
  *((void *)&v69 + 1) = v17;
  long long v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  long long v70 = v52;
  if (v17 != (char *)v52) {
    *(void *)&long long v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v49) {
    operator delete(v49);
  }
}

void sub_255126B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_255126BCC()
{
}

void sub_255126C44(uint64_t *a1, int *a2, uint64_t a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  sub_255126D78((uint64_t)&v5, a2, a3);
  sub_255128564(v3 + 8, &v5, (uint64_t)&v5);
  if (v15 == v14)
  {
    (*(void (**)(void *))(v14[0] + 32))(v14);
    unint64_t v4 = __p;
    if (__p)
    {
LABEL_5:
      uint64_t v13 = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v15) {
      (*(void (**)(void))(*v15 + 40))();
    }
    unint64_t v4 = __p;
    if (__p) {
      goto LABEL_5;
    }
  }
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  if (v6)
  {
    uint64_t v7 = v6;
    operator delete(v6);
  }
}

void sub_255126D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_255126D78(uint64_t a1, int *a2, uint64_t a3)
{
  sub_255113360(a1, a2);
  uint64_t v5 = *(void *)(a3 + 24);
  if (v5)
  {
    if (v5 == a3)
    {
      *(void *)(a1 + 128) = a1 + 104;
      (*(void (**)(void))(**(void **)(a3 + 24) + 24))(*(void *)(a3 + 24));
      return a1;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *(void *)(a1 + 128) = v5;
  return a1;
}

void sub_255126E10(_Unwind_Exception *a1)
{
  uint64_t v3 = (void *)v1[10];
  if (v3)
  {
    v1[11] = v3;
    operator delete(v3);
  }
  sub_25513D700(v1);
  _Unwind_Resume(a1);
}

void *sub_255126E34(void *a1)
{
  unint64_t v2 = a1 + 13;
  uint64_t v3 = (void *)a1[16];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    unint64_t v4 = (void *)a1[10];
    if (v4)
    {
LABEL_5:
      a1[11] = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    unint64_t v4 = (void *)a1[10];
    if (v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
  return a1;
}

void sub_255126F04(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v172 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(void *)(*(void *)(a3 + 72) + 16 * a4);
  uint64_t v171 = 0;
  long long v168 = 0u;
  long long v169 = 0u;
  long long v167 = 0u;
  uint64_t v7 = *(void *)(v6 + 24) - *(void *)(v6 + 16);
  if (v7)
  {
    sub_2550EF9FC((void **)&v168 + 1, v7 >> 4);
    uint64_t v8 = *((void *)&v167 + 1);
    uint64_t v7 = v167;
  }
  else
  {
    uint64_t v8 = 0;
  }
  unint64_t v9 = (uint64_t)(*(void *)(v6 + 48) - *(void *)(v6 + 40)) >> 4;
  unint64_t v10 = (v8 - v7) >> 3;
  if (v9 <= v10)
  {
    if (v9 < v10) {
      *((void *)&v167 + 1) = v7 + 8 * v9;
    }
  }
  else
  {
    sub_2550EF9FC((void **)&v167, v9 - v10);
  }
  uint64_t v11 = *(void *)(v6 + 16);
  uint64_t v12 = *(void *)(v6 + 24);
  if (v12 == v11)
  {
    uint64_t v11 = *(void *)(v6 + 24);
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    do
    {
      *(void *)(*((void *)&v168 + 1) + 8 * v14++) = *(void *)(v11 + v13);
      uint64_t v11 = *(void *)(v6 + 16);
      uint64_t v12 = *(void *)(v6 + 24);
      v13 += 16;
    }
    while (v14 < (v12 - v11) >> 4);
  }
  uint64_t v15 = *(void *)(v6 + 40);
  uint64_t v16 = *(void *)(v6 + 48);
  uint64_t v137 = a1;
  uint64_t v135 = a2;
  if (v16 == v15)
  {
    uint64_t v15 = *(void *)(v6 + 48);
  }
  else
  {
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    do
    {
      *(void *)(v167 + 8 * v18++) = *(void *)(v15 + v17);
      uint64_t v15 = *(void *)(v6 + 40);
      uint64_t v16 = *(void *)(v6 + 48);
      v17 += 16;
    }
    while (v18 < (v16 - v15) >> 4);
    uint64_t v11 = *(void *)(v6 + 16);
    uint64_t v12 = *(void *)(v6 + 24);
  }
  long long v151 = 0u;
  *(_OWORD *)uint64_t v150 = 0u;
  *(_OWORD *)uint64_t v149 = 0u;
  long long v148 = 0u;
  *(_OWORD *)uint64_t v147 = 0u;
  *(_OWORD *)long long v146 = 0u;
  uint64_t v138 = v6;
  LODWORD(v145) = *(_DWORD *)(v6 + 8);
  if (v11 != v12)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    unint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    unint64_t v24 = 0;
    uint64_t v141 = v12;
    while (1)
    {
      int v27 = (*(uint64_t (**)(void))(**(void **)v11 + 16))();
      int v28 = v27;
      if (v24 < v23)
      {
        uint64_t v143 = v23;
        *(_DWORD *)unint64_t v24 = v27;
        v24 += 4;
        goto LABEL_41;
      }
      uint64_t v29 = (v24 - v22) >> 2;
      unint64_t v30 = v29 + 1;
      if ((unint64_t)(v29 + 1) >> 62) {
        sub_2550EAEEC();
      }
      if ((v23 - v22) >> 1 > v30) {
        unint64_t v30 = (v23 - v22) >> 1;
      }
      if ((unint64_t)(v23 - v22) >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v30;
      }
      long long v139 = v20;
      if (v31)
      {
        if (v31 >> 62) {
          sub_2550EACF8();
        }
        unint64_t v32 = v31;
        unint64_t v33 = operator new(4 * v31);
        unint64_t v31 = v32;
      }
      else
      {
        unint64_t v33 = 0;
      }
      long long v34 = &v33[4 * v29];
      *(_DWORD *)long long v34 = v28;
      BOOL v35 = v34 + 4;
      if (v24 != v22)
      {
        unint64_t v36 = v24 - v22 - 4;
        if (v36 >= 0xBC)
        {
          unint64_t v51 = (v24 - 4 - v22) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v33[v24 - v22 - 4 - v51] > &v33[v24 - v22 - 4])
          {
            unint64_t v37 = v24;
          }
          else if (&v24[-v51 - 4] > v24 - 4)
          {
            unint64_t v37 = v24;
          }
          else if ((unint64_t)(v22 - v33) >= 0x20)
          {
            uint64_t v59 = (v36 >> 2) + 1;
            uint64_t v60 = 4 * (v59 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v37 = &v24[-v60];
            v34 -= v60;
            long long v61 = &v33[4 * v29 - 16];
            uint64_t v62 = v24 - 16;
            uint64_t v63 = v59 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v64 = *(_OWORD *)v62;
              *(v61 - 1) = *((_OWORD *)v62 - 1);
              *long long v61 = v64;
              v61 -= 2;
              v62 -= 32;
              v63 -= 8;
            }
            while (v63);
            if (v59 == (v59 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_38;
            }
          }
          else
          {
            unint64_t v37 = v24;
          }
        }
        else
        {
          unint64_t v37 = v24;
        }
        do
        {
          int v38 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v34 - 1) = v38;
          v34 -= 4;
        }
        while (v37 != v22);
      }
LABEL_38:
      v146[0] = v34;
      uint64_t v143 = &v33[4 * v31];
      v147[0] = v143;
      if (v22) {
        operator delete(v22);
      }
      uint64_t v22 = v34;
      unint64_t v24 = v35;
      uint64_t v20 = v139;
LABEL_41:
      v146[1] = v24;
      int v39 = (*(uint64_t (**)(void))(**(void **)v11 + 80))();
      int v40 = v39;
      if (v21 >= v20)
      {
        uint64_t v41 = (v21 - v19) >> 2;
        unint64_t v42 = v41 + 1;
        if ((unint64_t)(v41 + 1) >> 62) {
          sub_2550EAEEC();
        }
        if ((v20 - v19) >> 1 > v42) {
          unint64_t v42 = (v20 - v19) >> 1;
        }
        if ((unint64_t)(v20 - v19) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          if (v43 >> 62) {
            sub_2550EACF8();
          }
          unint64_t v44 = v43;
          uint64_t v45 = operator new(4 * v43);
          unint64_t v43 = v44;
        }
        else
        {
          uint64_t v45 = 0;
        }
        unint64_t v46 = &v45[4 * v41];
        *unint64_t v46 = v40;
        uint64_t v25 = v46 + 1;
        if (v21 == v19)
        {
          uint64_t v26 = v141;
        }
        else
        {
          unint64_t v47 = v21 - v19 - 4;
          if (v47 < 0xBC
            || (unint64_t v52 = (v21 - 4 - v19) & 0xFFFFFFFFFFFFFFFCLL, &v45[v21 - v19 - 4 - v52] > &v45[v21 - v19 - 4])
            || &v21[-v52 - 4] > v21 - 4
            || (unint64_t)(v19 - v45) < 0x20)
          {
            uint64_t v48 = v21;
            uint64_t v26 = v141;
          }
          else
          {
            uint64_t v53 = (v47 >> 2) + 1;
            uint64_t v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            uint64_t v48 = &v21[-v54];
            unint64_t v46 = (_DWORD *)((char *)v46 - v54);
            uint64_t v55 = &v45[4 * v41 - 16];
            uint64_t v56 = v21 - 16;
            uint64_t v57 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v58 = *(_OWORD *)v56;
              *(v55 - 1) = *((_OWORD *)v56 - 1);
              *uint64_t v55 = v58;
              v55 -= 2;
              v56 -= 32;
              v57 -= 8;
            }
            while (v57);
            uint64_t v26 = v141;
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_58;
            }
          }
          do
          {
            int v49 = *((_DWORD *)v48 - 1);
            v48 -= 4;
            *--unint64_t v46 = v49;
          }
          while (v48 != v19);
        }
LABEL_58:
        v149[0] = v46;
        long long v50 = &v45[4 * v43];
        v150[0] = v50;
        if (v19) {
          operator delete(v19);
        }
        uint64_t v19 = (char *)v46;
        uint64_t v20 = v50;
        goto LABEL_21;
      }
      *(_DWORD *)unint64_t v21 = v39;
      uint64_t v25 = v21 + 4;
      uint64_t v26 = v141;
LABEL_21:
      v149[1] = v25;
      v11 += 16;
      unint64_t v21 = (char *)v25;
      uint64_t v23 = v143;
      if (v11 == v26)
      {
        uint64_t v15 = *(void *)(v138 + 40);
        uint64_t v16 = *(void *)(v138 + 48);
        break;
      }
    }
  }
  if (v15 != v16)
  {
    int v65 = 0;
    uint64_t v66 = 0;
    long long v67 = 0;
    uint64_t v68 = 0;
    long long v69 = 0;
    long long v70 = 0;
    uint64_t v144 = v16;
    do
    {
      int v73 = (*(uint64_t (**)(void))(**(void **)v15 + 16))();
      int v74 = v73;
      if (v70 < v69)
      {
        *(_DWORD *)long long v70 = v73;
        v70 += 4;
        goto LABEL_102;
      }
      uint64_t v75 = v69;
      uint64_t v76 = (v70 - v68) >> 2;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 62) {
        sub_2550EAEEC();
      }
      unint64_t v78 = v75 - v68;
      unint64_t v79 = (v75 - v68) >> 1;
      if (v79 > v77) {
        unint64_t v77 = v79;
      }
      if (v78 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v80 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v80 = v77;
      }
      uint64_t v142 = v66;
      if (v80)
      {
        if (v80 >> 62) {
          sub_2550EACF8();
        }
        unint64_t v81 = v80;
        uint64_t v82 = operator new(4 * v80);
        unint64_t v80 = v81;
      }
      else
      {
        uint64_t v82 = 0;
      }
      uint64_t v83 = &v82[4 * v76];
      *(_DWORD *)uint64_t v83 = v74;
      uint64_t v84 = v83 + 4;
      if (v70 != v68)
      {
        unint64_t v85 = v70 - v68 - 4;
        if (v85 >= 0xBC)
        {
          unint64_t v99 = (v70 - 4 - v68) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v82[v70 - v68 - 4 - v99] > &v82[v70 - v68 - 4])
          {
            unint64_t v86 = v70;
          }
          else if (&v70[-v99 - 4] > v70 - 4)
          {
            unint64_t v86 = v70;
          }
          else if ((unint64_t)(v68 - v82) >= 0x20)
          {
            uint64_t v101 = (v85 >> 2) + 1;
            uint64_t v102 = 4 * (v101 & 0x7FFFFFFFFFFFFFF8);
            unint64_t v86 = &v70[-v102];
            v83 -= v102;
            uint64_t v103 = &v82[4 * v76 - 16];
            uint64_t v104 = v70 - 16;
            uint64_t v105 = v101 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              long long v106 = *(_OWORD *)v104;
              *(v103 - 1) = *((_OWORD *)v104 - 1);
              *uint64_t v103 = v106;
              v103 -= 2;
              v104 -= 32;
              v105 -= 8;
            }
            while (v105);
            if (v101 == (v101 & 0x7FFFFFFFFFFFFFF8)) {
              goto LABEL_99;
            }
          }
          else
          {
            unint64_t v86 = v70;
          }
        }
        else
        {
          unint64_t v86 = v70;
        }
        do
        {
          int v87 = *((_DWORD *)v86 - 1);
          v86 -= 4;
          *((_DWORD *)v83 - 1) = v87;
          v83 -= 4;
        }
        while (v86 != v68);
      }
LABEL_99:
      long long v69 = &v82[4 * v80];
      v147[1] = v83;
      *((void *)&v148 + 1) = v69;
      if (v68) {
        operator delete(v68);
      }
      uint64_t v68 = v83;
      long long v70 = v84;
      uint64_t v66 = v142;
LABEL_102:
      *(void *)&long long v148 = v70;
      int v88 = (*(uint64_t (**)(void))(**(void **)v15 + 80))();
      int v89 = v88;
      if (v67 >= v66)
      {
        uint64_t v90 = (v67 - v65) >> 2;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 62) {
          sub_2550EAEEC();
        }
        if ((v66 - v65) >> 1 > v91) {
          unint64_t v91 = (v66 - v65) >> 1;
        }
        if ((unint64_t)(v66 - v65) >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        v140 = v69;
        if (v92)
        {
          if (v92 >> 62) {
            sub_2550EACF8();
          }
          unint64_t v93 = v92;
          uint64_t v94 = operator new(4 * v92);
          unint64_t v92 = v93;
        }
        else
        {
          uint64_t v94 = 0;
        }
        uint64_t v95 = &v94[4 * v90];
        *(_DWORD *)uint64_t v95 = v89;
        uint64_t v71 = v95 + 4;
        if (v67 == v65)
        {
          uint64_t v72 = v144;
        }
        else
        {
          unint64_t v96 = v67 - v65 - 4;
          uint64_t v72 = v144;
          if (v96 < 0xBC)
          {
            uint64_t v97 = v67;
            goto LABEL_116;
          }
          unint64_t v100 = (v67 - 4 - v65) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v94[v67 - v65 - 4 - v100] > &v94[v67 - v65 - 4])
          {
            uint64_t v97 = v67;
            goto LABEL_116;
          }
          if (&v67[-v100 - 4] > v67 - 4)
          {
            uint64_t v97 = v67;
            goto LABEL_116;
          }
          if ((unint64_t)(v65 - v94) < 0x20)
          {
            uint64_t v97 = v67;
            goto LABEL_116;
          }
          uint64_t v107 = (v96 >> 2) + 1;
          uint64_t v108 = 4 * (v107 & 0x7FFFFFFFFFFFFFF8);
          uint64_t v97 = &v67[-v108];
          v95 -= v108;
          uint64_t v109 = &v94[4 * v90 - 16];
          unint64_t v110 = v67 - 16;
          uint64_t v111 = v107 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            long long v112 = *(_OWORD *)v110;
            *(v109 - 1) = *((_OWORD *)v110 - 1);
            *uint64_t v109 = v112;
            v109 -= 2;
            v110 -= 32;
            v111 -= 8;
          }
          while (v111);
          if (v107 != (v107 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_116:
              int v98 = *((_DWORD *)v97 - 1);
              v97 -= 4;
              *((_DWORD *)v95 - 1) = v98;
              v95 -= 4;
            }
            while (v97 != v65);
          }
        }
        uint64_t v66 = &v94[4 * v92];
        v150[1] = v95;
        *((void *)&v151 + 1) = v66;
        if (v65) {
          operator delete(v65);
        }
        int v65 = v95;
        long long v69 = v140;
        goto LABEL_82;
      }
      *(_DWORD *)long long v67 = v88;
      uint64_t v71 = v67 + 4;
      uint64_t v72 = v144;
LABEL_82:
      *(void *)&long long v151 = v71;
      v15 += 16;
      long long v67 = v71;
    }
    while (v15 != v72);
  }
  long long v113 = sub_255128AA0((void *)(*v137 + 8), &v145);
  if (v113
    || (uint64_t v114 = *v137,
        v149[1] = v149[0],
        *(void **)&long long v151 = v150[1],
        v146[1] = v146[0],
        *(void **)&long long v148 = v147[1],
        (long long v113 = sub_255128AA0((void *)(v114 + 8), &v145)) != 0))
  {
    uint64_t v115 = (void **)v113[18];
    if (v115)
    {
      if (v115 == (void **)(v113 + 15))
      {
        uint64_t v154 = __dst;
        (*((void (**)(void **, void **))*v115 + 3))(v115, __dst);
        uint64_t v115 = v154;
      }
      else
      {
        uint64_t v115 = (void **)(*((uint64_t (**)(void **))*v115 + 2))(v115);
        uint64_t v154 = v115;
      }
      if (v115)
      {
        if (v115 == __dst)
        {
          uint64_t v157 = (void **)&v155;
          (*((void (**)(void **, uint64_t *))__dst[0] + 3))(__dst, &v155);
LABEL_153:
          sub_255128C08(&v155, v170);
          if (v157 == (void **)&v155)
          {
            (*(void (**)(uint64_t *))(v155 + 32))(&v155);
          }
          else if (v157)
          {
            (*((void (**)(void))*v157 + 5))();
          }
          uint64_t v116 = *v137;
          uint64_t v155 = v138;
          sub_2551283E8(v156, (uint64_t)&v167);
          sub_255128E74(v116 + 48, &v155, (uint64_t)&v155);
          if (v162 == v161)
          {
            (*(void (**)(void *))(v161[0] + 32))(v161);
            uint64_t v117 = __p;
            if (__p)
            {
LABEL_161:
              uint64_t v159 = v117;
              operator delete(v117);
            }
          }
          else
          {
            if (v162) {
              (*(void (**)(void))(*v162 + 40))();
            }
            uint64_t v117 = __p;
            if (__p) {
              goto LABEL_161;
            }
          }
          if (v156[0])
          {
            v156[1] = v156[0];
            operator delete(v156[0]);
          }
          if (v154 == __dst)
          {
            (*((void (**)(void **))__dst[0] + 4))(__dst);
          }
          else if (v154)
          {
            (*((void (**)(void))*v154 + 5))();
            uint64_t v118 = v150[1];
            if (!v150[1]) {
              goto LABEL_173;
            }
LABEL_172:
            *(void *)&long long v151 = v118;
            operator delete(v118);
            goto LABEL_173;
          }
          uint64_t v118 = v150[1];
          if (!v150[1]) {
            goto LABEL_173;
          }
          goto LABEL_172;
        }
        uint64_t v115 = (void **)(*((uint64_t (**)(void **))*v115 + 2))(v115);
      }
    }
    else
    {
      uint64_t v154 = 0;
    }
    uint64_t v157 = v115;
    goto LABEL_153;
  }
  sub_2551080CC((uint64_t)&v155);
  int v120 = *(char *)(a3 + 23);
  if (v120 >= 0) {
    uint64_t v121 = a3;
  }
  else {
    uint64_t v121 = *(void *)a3;
  }
  if (v120 >= 0) {
    uint64_t v122 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v122 = *(void *)(a3 + 8);
  }
  unint64_t v123 = sub_2551084AC(&v155, v121, v122);
  sub_2551084AC(v123, (uint64_t)":", 1);
  uint64_t v124 = (void *)std::ostream::operator<<();
  sub_2551084AC(v124, (uint64_t)", of type ", 10);
  uint64_t v125 = (void *)std::ostream::operator<<();
  long long v126 = sub_2551084AC(v125, (uint64_t)", did not have a ", 17);
  sub_2551084AC(v126, (uint64_t)"valid implementation.", 21);
  uint64_t v127 = *(void **)(v135 + 32);
  if ((v165 & 0x10) != 0)
  {
    uint64_t v130 = v164;
    if ((unint64_t)v164 < v161[0])
    {
      long long v164 = (unsigned char *)v161[0];
      uint64_t v130 = (unsigned char *)v161[0];
    }
    uint64_t v131 = (const void **)&v160;
  }
  else
  {
    if ((v165 & 8) == 0)
    {
      size_t v128 = 0;
      HIBYTE(v153) = 0;
      uint64_t v129 = __dst;
      goto LABEL_211;
    }
    uint64_t v131 = (const void **)&v157;
    uint64_t v130 = v159;
  }
  long long v132 = *v131;
  size_t v128 = v130 - (unsigned char *)*v131;
  if (v128 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v128 >= 0x17)
  {
    uint64_t v133 = (v128 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v128 | 7) != 0x17) {
      uint64_t v133 = v128 | 7;
    }
    uint64_t v134 = v133 + 1;
    uint64_t v129 = (void **)operator new(v133 + 1);
    __dst[1] = (void *)v128;
    unint64_t v153 = v134 | 0x8000000000000000;
    __dst[0] = v129;
    goto LABEL_210;
  }
  HIBYTE(v153) = (_BYTE)v130 - *(unsigned char *)v131;
  uint64_t v129 = __dst;
  if (v128) {
LABEL_210:
  }
    memmove(v129, v132, v128);
LABEL_211:
  *((unsigned char *)v129 + v128) = 0;
  sub_25513A900(v127, 0xFFFF, (uint64_t)__dst);
  if (SHIBYTE(v153) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v155 = *MEMORY[0x263F8C2C8];
  *(void **)((char *)&v156[-1] + *(void *)(v155 - 24)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
  v156[0] = (void *)(MEMORY[0x263F8C318] + 16);
  if (v163 < 0) {
    operator delete((void *)v161[2]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v166);
  uint64_t v118 = v150[1];
  if (v150[1]) {
    goto LABEL_172;
  }
LABEL_173:
  if (v149[0])
  {
    v149[1] = v149[0];
    operator delete(v149[0]);
  }
  if (v147[1])
  {
    *(void **)&long long v148 = v147[1];
    operator delete(v147[1]);
  }
  if (v146[0])
  {
    v146[1] = v146[0];
    operator delete(v146[0]);
  }
  if (v171 == v170)
  {
    (*(void (**)(void *))(v170[0] + 32))(v170);
    long long v119 = (void *)*((void *)&v168 + 1);
    if (*((void *)&v168 + 1))
    {
LABEL_183:
      *(void *)&long long v169 = v119;
      operator delete(v119);
    }
  }
  else
  {
    if (v171) {
      (*(void (**)(void))(*v171 + 40))();
    }
    long long v119 = (void *)*((void *)&v168 + 1);
    if (*((void *)&v168 + 1)) {
      goto LABEL_183;
    }
  }
  if ((void)v167)
  {
    *((void *)&v167 + 1) = v167;
    operator delete((void *)v167);
  }
}

void sub_255127E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,char a39)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a39);
  sub_2551131B4(&a19);
  sub_255127F60(v39 - 176);
  _Unwind_Resume(a1);
}

void *sub_255127EB0(void *a1)
{
  unint64_t v2 = a1 + 7;
  uint64_t v3 = (void *)a1[10];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    unint64_t v4 = (void *)a1[4];
    if (v4)
    {
LABEL_5:
      a1[5] = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    unint64_t v4 = (void *)a1[4];
    if (v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = (void *)a1[1];
  if (v5)
  {
    a1[2] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_255127F60(uint64_t a1)
{
  uint64_t v2 = a1 + 48;
  uint64_t v3 = *(void *)(a1 + 72);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    unint64_t v4 = *(void **)(a1 + 24);
    if (v4)
    {
LABEL_5:
      *(void *)(a1 + 32) = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
    }
    unint64_t v4 = *(void **)(a1 + 24);
    if (v4) {
      goto LABEL_5;
    }
  }
  uint64_t v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_255128010(int8x8_t **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(*(void *)(a3 + 72) + 16 * a4);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
  unint64_t v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
  unint64_t v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  int8x8_t v8 = (*a1)[7];
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v8);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v10 = v7;
    if (v7 >= *(void *)&v8) {
      unint64_t v10 = v7 % *(void *)&v8;
    }
  }
  else
  {
    unint64_t v10 = v7 & (*(void *)&v8 - 1);
  }
  uint64_t v11 = *(void **)(*(void *)&(*a1)[6] + 8 * v10);
  do
  {
    do
      uint64_t v11 = (void *)*v11;
    while (v11[1] != v7);
  }
  while (v11[2] != v4);
  uint64_t v14 = a2;
  uint64_t v15 = a4;
  uint64_t v12 = v11[12];
  if (!v12) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, void *, uint64_t *, uint64_t *, unint64_t, void *))(*(void *)v12 + 48))(v12, v11 + 3, &v15, &v14, v4 + 64, v11 + 6);
}

uint64_t sub_25512811C(uint64_t a1)
{
  sub_255128234(a1 + 48, *(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      sub_255128304(v3 + 2);
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  unint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    operator delete(v5);
  }
  return a1;
}

void sub_255128198(uint64_t a1)
{
  sub_255128234(a1 + 48, *(void **)(a1 + 64));
  uint64_t v2 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v2) {
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    do
    {
      unint64_t v4 = (void *)*v3;
      sub_255128304(v3 + 2);
      operator delete(v3);
      uint64_t v3 = v4;
    }
    while (v4);
  }
  unint64_t v5 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v5) {
    operator delete(v5);
  }
  JUMPOUT(0x25A2886C0);
}

void sub_255128234(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      unint64_t v4 = (void *)v2[12];
      if (v4 == v2 + 9)
      {
        (*(void (**)(void *))(v2[9] + 32))(v2 + 9);
        unint64_t v5 = (void *)v2[6];
        if (!v5) {
          goto LABEL_9;
        }
      }
      else
      {
        if (v4) {
          (*(void (**)(void *))(*v4 + 40))(v4);
        }
        unint64_t v5 = (void *)v2[6];
        if (!v5) {
          goto LABEL_9;
        }
      }
      v2[7] = v5;
      operator delete(v5);
LABEL_9:
      unint64_t v6 = (void *)v2[3];
      if (v6)
      {
        v2[4] = v6;
        operator delete(v6);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void sub_255128304(void *a1)
{
  uint64_t v2 = a1 + 13;
  uint64_t v3 = (void *)a1[16];
  if (v3 == v2)
  {
    (*(void (**)(void *))(*v2 + 32))(v2);
    unint64_t v4 = (void *)a1[10];
    if (v4)
    {
LABEL_5:
      a1[11] = v4;
      operator delete(v4);
    }
  }
  else
  {
    if (v3) {
      (*(void (**)(void *))(*v3 + 40))(v3);
    }
    unint64_t v4 = (void *)a1[10];
    if (v4) {
      goto LABEL_5;
    }
  }
  unint64_t v5 = (void *)a1[7];
  if (v5)
  {
    a1[8] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[4];
  if (v6)
  {
    a1[5] = v6;
    operator delete(v6);
  }
  unint64_t v7 = (void *)a1[1];
  if (v7)
  {
    a1[2] = v7;
    operator delete(v7);
  }
}

void *sub_2551283E8(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  unint64_t v5 = *(const void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = v4 - *(void *)a2;
  if (v4 != *(void *)a2)
  {
    if (v6 < 0) {
      sub_2550EAEEC();
    }
    unint64_t v7 = (char *)operator new(v4 - *(void *)a2);
    *a1 = v7;
    a1[1] = v7;
    int8x8_t v8 = &v7[8 * (v6 >> 3)];
    a1[2] = v8;
    memcpy(v7, v5, v6);
    a1[1] = v8;
  }
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  unint64_t v10 = *(unsigned char **)(a2 + 24);
  uint8x8_t v9 = *(unsigned char **)(a2 + 32);
  int64_t v11 = v9 - v10;
  if (v9 != v10)
  {
    if (v11 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v12 = (char *)operator new(v9 - v10);
    a1[3] = v12;
    a1[4] = v12;
    uint64_t v13 = &v12[8 * (v11 >> 3)];
    a1[5] = v13;
    memcpy(v12, v10, v11);
    a1[4] = v13;
  }
  uint64_t v14 = *(void *)(a2 + 72);
  if (v14)
  {
    if (v14 == a2 + 48)
    {
      a1[9] = a1 + 6;
      (*(void (**)(void))(**(void **)(a2 + 72) + 24))(*(void *)(a2 + 72));
      return a1;
    }
    uint64_t v14 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 16))(v14);
  }
  a1[9] = v14;
  return a1;
}

void sub_25512852C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 32) = v4;
    operator delete(v4);
  }
  unint64_t v5 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255128564(uint64_t a1, void *a2, uint64_t a3)
{
  unint64_t v7 = (void *)(a1 + 24);
  unint64_t v8 = sub_2551289A8(a1 + 24, a2);
  unint64_t v9 = v8;
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v3 = v8;
      if (v8 >= v10) {
        unint64_t v3 = v8 % v10;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v8;
    }
    uint64_t v12 = *(void **)(*(void *)a1 + 8 * v3);
    if (v12)
    {
      uint64_t result = (void *)*v12;
      if (*v12)
      {
        do
        {
          unint64_t v14 = result[1];
          if (v14 == v9)
          {
            if (*((_DWORD *)result + 4) == *(_DWORD *)a2)
            {
              uint64_t v16 = (char *)result[3];
              uint64_t v15 = (char *)result[4];
              if (v15 - v16 == a2[2] - a2[1])
              {
                if (v16 == v15)
                {
LABEL_20:
                  uint64_t v19 = (char *)result[6];
                  unint64_t v18 = (char *)result[7];
                  if (v18 - v19 == a2[5] - a2[4])
                  {
                    if (v19 == v18) {
                      return result;
                    }
                    for (unint64_t i = (_DWORD *)a2[4]; *(_DWORD *)v19 == *i; ++i)
                    {
                      v19 += 4;
                      if (v19 == v18) {
                        return result;
                      }
                    }
                  }
                }
                else
                {
                  uint64_t v17 = (_DWORD *)a2[1];
                  while (*(_DWORD *)v16 == *v17)
                  {
                    v16 += 4;
                    ++v17;
                    if (v16 == v15) {
                      goto LABEL_20;
                    }
                  }
                }
              }
            }
          }
          else
          {
            if (v11.u32[0] <= 1uLL)
            {
              v14 &= v10 - 1;
            }
            else if (v14 >= v10)
            {
              v14 %= v10;
            }
            if (v14 != v3) {
              break;
            }
          }
          uint64_t result = (void *)*result;
        }
        while (result);
      }
    }
  }
  unint64_t v21 = operator new(0x98uLL);
  BOOL v35 = v21;
  *unint64_t v21 = 0;
  v21[1] = v9;
  sub_255113360((uint64_t)(v21 + 2), (int *)a3);
  uint64_t v22 = *(void *)(a3 + 128);
  if (v22)
  {
    if (v22 == a3 + 104)
    {
      v21[18] = v21 + 15;
      (*(void (**)(uint64_t))(*(void *)v22 + 24))(v22);
    }
    else
    {
      v21[18] = v22;
      *(void *)(a3 + 128) = 0;
    }
  }
  else
  {
    v21[18] = 0;
  }
  float v23 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v24 = *(float *)(a1 + 32);
  if (!v10 || (float)(v24 * (float)v10) < v23)
  {
    BOOL v25 = 1;
    if (v10 >= 3) {
      BOOL v25 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v26 = v25 | (2 * v10);
    unint64_t v27 = vcvtps_u32_f32(v23 / v24);
    if (v26 <= v27) {
      size_t prime = v27;
    }
    else {
      size_t prime = v26;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v29 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v29) {
      goto LABEL_46;
    }
    if (prime < *(void *)&v29)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v29 < 3uLL || (uint8x8_t v31 = (uint8x8_t)vcnt_s8(v29), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (prime <= v30) {
        size_t prime = v30;
      }
      if (prime < *(void *)&v29) {
LABEL_46:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v3 = v9 % v10;
      }
      else {
        unint64_t v3 = v9;
      }
    }
    else
    {
      unint64_t v3 = (v10 - 1) & v9;
    }
  }
  unint64_t v33 = *(void **)(*(void *)a1 + 8 * v3);
  if (v33)
  {
    *BOOL v35 = *v33;
    *unint64_t v33 = v35;
  }
  else
  {
    *BOOL v35 = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35;
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*v35)
    {
      unint64_t v34 = *(void *)(*v35 + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v34 >= v10) {
          v34 %= v10;
        }
      }
      else
      {
        v34 &= v10 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v34) = v35;
    }
  }
  uint64_t result = v35;
  ++*v7;
  return result;
}

void sub_255128948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255128960((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_255128960(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_255128304(v2 + 2);
    }
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_2551289A8(uint64_t a1, void *a2)
{
  uint64_t v2 = (unsigned int *)a2[1];
  uint64_t v3 = a2[2] - (void)v2;
  if (v3)
  {
    unint64_t v4 = v3 >> 2;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    unint64_t v6 = 1;
    do
    {
      unsigned int v7 = *v2++;
      unint64_t v6 = v7 ^ (2 * v6);
      --v5;
    }
    while (v5);
    uint64_t v8 = 2 * v6;
  }
  else
  {
    uint64_t v8 = 2;
  }
  unint64_t v9 = (unsigned int *)a2[4];
  uint64_t v10 = a2[5] - (void)v9;
  if (v10)
  {
    unint64_t v11 = v10 >> 2;
    if (v11 <= 1) {
      uint64_t v12 = 1;
    }
    else {
      uint64_t v12 = v11;
    }
    unint64_t v13 = 1;
    do
    {
      unsigned int v14 = *v9++;
      unint64_t v13 = v14 ^ (2 * v13);
      --v12;
    }
    while (v12);
    uint64_t v15 = 4 * v13;
  }
  else
  {
    uint64_t v15 = 4;
  }
  uint64_t v16 = (unsigned int *)a2[7];
  uint64_t v17 = a2[8] - (void)v16;
  if (v17)
  {
    unint64_t v18 = v17 >> 2;
    if (v18 <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = v18;
    }
    unint64_t v20 = 1;
    do
    {
      unsigned int v21 = *v16++;
      unint64_t v20 = v21 ^ (2 * v20);
      --v19;
    }
    while (v19);
    uint64_t v22 = 8 * v20;
  }
  else
  {
    uint64_t v22 = 8;
  }
  float v23 = (unsigned int *)a2[10];
  uint64_t v24 = a2[11] - (void)v23;
  if (v24)
  {
    unint64_t v25 = v24 >> 2;
    if (v25 <= 1) {
      uint64_t v26 = 1;
    }
    else {
      uint64_t v26 = v25;
    }
    unint64_t v27 = 1;
    do
    {
      unsigned int v28 = *v23++;
      unint64_t v27 = v28 ^ (2 * v27);
      --v26;
    }
    while (v26);
    uint64_t v29 = 32 * v27;
  }
  else
  {
    uint64_t v29 = 32;
  }
  return v8 ^ *(int *)a2 ^ v15 ^ v22 ^ v29;
}

uint64_t *sub_255128AA0(void *a1, void *a2)
{
  unint64_t v4 = sub_2551289A8((uint64_t)(a1 + 3), a2);
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v5);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v7 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v7 = (*(void *)&v5 - 1) & v4;
  }
  unint64_t i = *(uint64_t **)(*a1 + 8 * v7);
  if (i)
  {
    for (unint64_t i = (uint64_t *)*i; i; unint64_t i = (uint64_t *)*i)
    {
      unint64_t v9 = i[1];
      if (v9 == v4)
      {
        if (*((_DWORD *)i + 4) == *(_DWORD *)a2)
        {
          unint64_t v11 = (char *)i[3];
          uint64_t v10 = (char *)i[4];
          if (v10 - v11 == a2[2] - a2[1])
          {
            if (v11 == v10)
            {
LABEL_19:
              unsigned int v14 = (char *)i[6];
              unint64_t v13 = (char *)i[7];
              if (v13 - v14 == a2[5] - a2[4])
              {
                if (v14 == v13) {
                  return i;
                }
                for (j = (_DWORD *)a2[4]; *(_DWORD *)v14 == *j; ++j)
                {
                  v14 += 4;
                  if (v14 == v13) {
                    return i;
                  }
                }
              }
            }
            else
            {
              uint64_t v12 = (_DWORD *)a2[1];
              while (*(_DWORD *)v11 == *v12)
              {
                v11 += 4;
                ++v12;
                if (v11 == v10) {
                  goto LABEL_19;
                }
              }
            }
          }
        }
      }
      else
      {
        if (v6.u32[0] <= 1uLL)
        {
          v9 &= *(void *)&v5 - 1;
        }
        else if (v9 >= *(void *)&v5)
        {
          v9 %= *(void *)&v5;
        }
        if (v9 != v7) {
          return 0;
        }
      }
    }
  }
  return i;
}

void *sub_255128C08(void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    int8x8_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_255128E68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_2550EAD2C(a1);
}

void *sub_255128E74(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = HIDWORD(*a2);
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      uint64_t v12 = *v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            if (v12[2] == *a2) {
              return v12;
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v3) {
              break;
            }
          }
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unsigned int v14 = (void *)(a1 + 16);
  uint64_t v12 = operator new(0x68uLL);
  *uint64_t v12 = 0;
  v12[1] = v8;
  long long v15 = *(_OWORD *)(a3 + 16);
  *((_OWORD *)v12 + 1) = *(_OWORD *)a3;
  *((_OWORD *)v12 + 2) = v15;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *((_OWORD *)v12 + 3) = *(_OWORD *)(a3 + 32);
  v12[8] = *(void *)(a3 + 48);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  uint64_t v17 = (void *)(a3 + 80);
  uint64_t v16 = *(void *)(a3 + 80);
  if (v16)
  {
    if (v16 == a3 + 56)
    {
      v12[12] = v12 + 9;
      (*(void (**)(uint64_t))(*(void *)v16 + 24))(v16);
      goto LABEL_24;
    }
    v12[12] = v16;
  }
  else
  {
    uint64_t v17 = v12 + 12;
  }
  void *v17 = 0;
LABEL_24:
  float v18 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v19 = *(float *)(a1 + 32);
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = 1;
    if (v9 >= 3) {
      BOOL v20 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v21 = v20 | (2 * v9);
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      size_t prime = v22;
    }
    else {
      size_t prime = v21;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v24 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v24) {
      goto LABEL_36;
    }
    if (prime < *(void *)&v24)
    {
      unint64_t v25 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v24 < 3uLL || (uint8x8_t v26 = (uint8x8_t)vcnt_s8(v24), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        unint64_t v25 = std::__next_prime(v25);
      }
      else
      {
        uint64_t v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2) {
          unint64_t v25 = v27;
        }
      }
      if (prime <= v25) {
        size_t prime = v25;
      }
      if (prime < *(void *)&v24) {
LABEL_36:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v3);
  if (v29)
  {
    *uint64_t v12 = *v29;
LABEL_61:
    *uint64_t v29 = v12;
    goto LABEL_62;
  }
  *uint64_t v12 = *v14;
  *unsigned int v14 = v12;
  *(void *)(v28 + 8 * v3) = v14;
  if (*v12)
  {
    unint64_t v30 = *(void *)(*v12 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v30 >= v9) {
        v30 %= v9;
      }
    }
    else
    {
      v30 &= v9 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_61;
  }
LABEL_62:
  ++*(void *)(a1 + 24);
  return v12;
}

void sub_2551291EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255129204((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_255129204(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (!v2) {
    return;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    unint64_t v3 = (void *)v2[12];
    if (v3 == v2 + 9)
    {
      (*(void (**)(void *))(v2[9] + 32))(v2 + 9);
      unint64_t v4 = (void *)v2[6];
      if (!v4)
      {
LABEL_8:
        int8x8_t v5 = (void *)v2[3];
        if (v5)
        {
          v2[4] = v5;
          operator delete(v5);
        }
        goto LABEL_10;
      }
    }
    else
    {
      if (v3) {
        (*(void (**)(void *))(*v3 + 40))(v3);
      }
      unint64_t v4 = (void *)v2[6];
      if (!v4) {
        goto LABEL_8;
      }
    }
    v2[7] = v4;
    operator delete(v4);
    goto LABEL_8;
  }
LABEL_10:
  operator delete(v2);
}

uint64_t sub_2551292E0(uint64_t a1, long long *a2, char a3)
{
  *(void *)a1 = &unk_270445348;
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v5 = a1 + 56;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  if (*((char *)a2 + 23) < 0)
  {
    sub_2550EABB0((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(unsigned char *)(a1 + 88) = a3;
  return a1;
}

void sub_255129374(_Unwind_Exception *a1)
{
  unint64_t v4 = (void *)v1[4];
  if (v4)
  {
    v1[5] = v4;
    operator delete(v4);
  }
  uint64_t v5 = *v2;
  if (*v2)
  {
    v1[2] = v5;
    operator delete(v5);
  }
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

void sub_2551293A8(uint64_t a1, unint64_t a2)
{
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v2 = *(void *)(a1 + 8);
    unint64_t v3 = (*(void *)(a1 + 16) - v2) >> 3;
    BOOL v4 = a2 >= v3;
    unint64_t v5 = a2 - v3;
    if (v5 != 0 && v4)
    {
      sub_2550EF9FC((void **)(a1 + 8), v5);
    }
    else if (!v4)
    {
      *(void *)(a1 + 16) = v2 + 8 * a2;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    unint64_t v7 = (*(void *)(a1 + 40) - v6) >> 3;
    BOOL v8 = a2 >= v7;
    unint64_t v9 = a2 - v7;
    if (v9 != 0 && v8)
    {
      sub_2550EF9FC((void **)(a1 + 32), v9);
    }
    else if (!v8)
    {
      *(void *)(a1 + 40) = v6 + 8 * a2;
    }
  }
}

uint64_t sub_255129418(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_255129420(uint64_t result, char a2)
{
  *(unsigned char *)(result + 89) = a2;
  return result;
}

uint64_t sub_255129428(uint64_t a1, uint64_t *a2, void *a3)
{
  unint64_t v44 = *(uint64_t (**)(_OWORD *))(a1 + 80);
  uint64_t v5 = a3[1] - *a3;
  unint64_t v6 = v5 >> 3;
  if (v5)
  {
    uint64_t v8 = 0;
    if (v6 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v5 >> 3;
    }
    do
    {
      uint64_t v12 = *(void **)(*a3 + 8 * v8);
      if (*(unsigned char *)(a1 + 88))
      {
        uint64_t v10 = sub_25512AB04(v12);
        unint64_t v11 = (void *)(a1 + 8);
      }
      else
      {
        uint64_t v10 = (*(uint64_t (**)(void *))(*v12 + 176))(v12);
        unint64_t v11 = (void *)(a1 + 32);
      }
      *(void *)(*v11 + 8 * v8++) = v10;
    }
    while (v9 != v8);
  }
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  uint64_t v15 = v13 - *a2;
  uint64_t v45 = 0;
  if (*(unsigned char *)(a1 + 89) && *(unsigned char *)(a1 + 88)) {
    uint64_t v45 = (*(uint64_t (**)(void))(**(void **)(v13 - 8) + 168))(*(void *)(v13 - 8));
  }
  unint64_t v16 = v15 >> 3;
  if (v13 != v14)
  {
    uint64_t v17 = 0;
    if (v16 <= 1) {
      uint64_t v18 = 1;
    }
    else {
      uint64_t v18 = v16;
    }
    do
    {
      unint64_t v21 = *(void **)(*a2 + 8 * v17);
      if (*(unsigned char *)(a1 + 88))
      {
        uint64_t v19 = sub_25512AB04(v21);
        BOOL v20 = (void *)(a1 + 8);
      }
      else
      {
        uint64_t v19 = (*(uint64_t (**)(void *))(*v21 + 168))(v21);
        BOOL v20 = (void *)(a1 + 32);
      }
      *(void *)(*v20 + 8 * v6 + 8 * v17++) = v19;
    }
    while (v18 != v17);
  }
  int v22 = *(unsigned __int8 *)(a1 + 89);
  if (*(unsigned char *)(a1 + 89)) {
    uint64_t v23 = -1;
  }
  else {
    uint64_t v23 = 0;
  }
  if (*(unsigned char *)(a1 + 88))
  {
    uint64_t v25 = *(void *)(a1 + 8);
    uint64_t v24 = *(void *)(a1 + 16);
    size_t v26 = v24 - v25;
    if (v24 == v25)
    {
      uint64_t v28 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      if ((v26 & 0x8000000000000000) != 0) {
        sub_2550EAEEC();
      }
      uint64_t v27 = operator new(v24 - v25);
      bzero(v27, v26);
      uint64_t v28 = (char *)v27 + v26;
    }
    unint64_t v31 = v16 + v6 + v23;
    if (v31)
    {
      unint64_t v32 = 0;
      uint64_t v33 = *(void *)(a1 + 8);
      if (v31 < 4) {
        goto LABEL_37;
      }
      if ((unint64_t)v27 - v33 < 0x20) {
        goto LABEL_37;
      }
      unint64_t v32 = v31 & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v34 = (long long *)(v33 + 16);
      BOOL v35 = v27 + 1;
      unint64_t v36 = v31 & 0xFFFFFFFFFFFFFFFCLL;
      do
      {
        long long v37 = *v34;
        *(v35 - 1) = *(v34 - 1);
        *BOOL v35 = v37;
        v34 += 2;
        v35 += 2;
        v36 -= 4;
      }
      while (v36);
      if (v31 != v32)
      {
LABEL_37:
        unint64_t v38 = v16 + v6 + v23 - v32;
        uint64_t v39 = 8 * v32;
        int v40 = (uint64_t *)(v33 + v39);
        uint64_t v41 = (void *)((char *)v27 + v39);
        do
        {
          uint64_t v42 = *v40++;
          *v41++ = v42;
          --v38;
        }
        while (v38);
      }
    }
    if (v22) {
      *((void *)v28 - 1) = &v45;
    }
    uint64_t v43 = v44(v27);
    if (v27) {
      operator delete(v27);
    }
    return v43;
  }
  else
  {
    uint64_t v29 = *(_OWORD **)(a1 + 32);
    return v44(v29);
  }
}

void sub_25512970C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255129738(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 80)) {
    *(void *)(result + 80) = a2;
  }
  return result;
}

uint64_t *sub_25512974C@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = sub_2550EFEAC(a1, a2);
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 24) = -1;
  uint64_t v5 = *((unsigned int *)result + 16);
  if (v5 != -1)
  {
    uint64_t result = (uint64_t *)((uint64_t (*)(unsigned char *, uint64_t, uint64_t *))off_2704453A0[v5])(v6, a3, result + 5);
    *(_DWORD *)(a3 + 24) = v5;
  }
  return result;
}

void sub_2551297B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v15 = *(unsigned int *)(v13 + 24);
  if (v15 != -1) {
    ((void (*)(char *, uint64_t))off_270445378[v15])(&a13, v13);
  }
  *(_DWORD *)(v13 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_2551297EC(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) >= 0) {
    unint64_t v3 = (const char *)a3;
  }
  else {
    unint64_t v3 = *(const char **)a3;
  }
  return fprintf((FILE *)*MEMORY[0x263EF8348], "error %d-%d:%d-%d: %s\n", a2[2], a2[6], a2[3], a2[7], v3);
}

uint64_t sub_255129844(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_255129878(uint64_t a1)
{
  sub_25513CD60(a1);
  void *v1 = &unk_2704453D8;
  operator new();
}

void sub_25512993C(_Unwind_Exception *a1)
{
  sub_25513CDA8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255129950(void *a1)
{
  *a1 = &unk_2704453D8;
  uint64_t v2 = a1[13];
  a1[13] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  unint64_t v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  BOOL v4 = (void *)a1[14];
  if (v4)
  {
    a1[15] = v4;
    operator delete(v4);
  }
  uint64_t v5 = a1[13];
  a1[13] = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  return sub_25513CDA8((uint64_t)a1);
}

void sub_255129A24(void *a1)
{
  uint64_t v1 = (void *)sub_255129950(a1);
  j__free(v1);
}

double sub_255129A4C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (sub_25513D048(a2) == 1)
  {
    int v4 = 0x10000;
  }
  else
  {
    int v4 = 131073;
    if (sub_25513D048(a2) != 2)
    {
      if (sub_25513D048(a2) == 3)
      {
        int v4 = 196608;
      }
      else if (sub_25513D048(a2) == 4)
      {
        int v4 = 0x40000;
      }
      else
      {
        int v4 = 360448;
        if (sub_25513D048(a2) != 5)
        {
          if (sub_25513D048(a2) == 6)
          {
            int v4 = 425984;
          }
          else if (sub_25513D048(a2) == 7)
          {
            int v4 = 491520;
          }
          else if (sub_25513D048(a2) == 8)
          {
            int v4 = 557056;
          }
          else
          {
            int v4 = 0x10000;
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 60) = v4;
  memset_pattern16((void *)(a1 + 64), &unk_25513EEA0, 0x40uLL);
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  uint64_t v5 = sub_25513D048(a2);
  if (sub_25513D048(a2))
  {
    uint64_t v6 = a1 + 8 * v5;
    *(void *)(v6 + 56) = **(void **)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2);
    if ((unint64_t)sub_25513D048(a2) >= 2)
    {
      *(void *)(v6 + 48) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2) + 8);
      if ((unint64_t)sub_25513D048(a2) >= 3)
      {
        uint64_t v7 = a1 + 8 * v5;
        *(void *)(v7 + 40) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                         + 16);
        if ((unint64_t)sub_25513D048(a2) >= 4)
        {
          *(void *)(v7 + 32) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                           + 24);
          if ((unint64_t)sub_25513D048(a2) >= 5)
          {
            uint64_t v8 = a1 + 8 * v5;
            *(void *)(v8 + 24) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                             + 32);
            if ((unint64_t)sub_25513D048(a2) >= 6)
            {
              *(void *)(v8 + 16) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                               + 40);
              if ((unint64_t)sub_25513D048(a2) >= 7)
              {
                *(void *)(a1 + 8 * v5 + 8) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                                         + 48);
                if ((unint64_t)sub_25513D048(a2) >= 8)
                {
                  *(void *)(a1 + 8 * v5) = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 40))(a2)
                                                       + 56);
                  sub_25513D048(a2);
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
  if (v9[1] != *v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = (void *)(a1 + 8 * v5 + 120);
    do
    {
      *v11-- = *(void *)(*(void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2) + 8 * v10);
      uint64_t v12 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 48))(a2);
      if (v10 > 6) {
        break;
      }
      ++v10;
    }
    while (v10 < (uint64_t)(v12[1] - *v12) >> 3);
  }
  *(void *)(a1 + 192) = *(void *)(a1 + 16);
  unsigned int v13 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 16))(a2) - 1;
  if (v13 > 0xB) {
    int v14 = 131080;
  }
  else {
    int v14 = dword_25513EE44[v13];
  }
  *(_DWORD *)(a1 + 200) = v14;
  *(void *)(a1 + 208) = 0;
  *(void *)&double result = 1065353216;
  *(void *)(a1 + 220) = 1065353216;
  return result;
}

double sub_255129EF4(uint64_t a1)
{
  return sub_255129A4C(*(void *)(a1 + 104), a1);
}

void sub_255129F00(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  uint64_t v2 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  int v4 = *(const void **)v2;
  uint64_t v3 = *(void *)(v2 + 8);
  int64_t v5 = v3 - *(void *)v2;
  if (v3 == *(void *)v2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v5 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v6 = (char *)operator new(v3 - *(void *)v2);
    uint64_t v7 = &v6[8 * (v5 >> 3)];
    memcpy(v6, v4, v5);
  }
  uint64_t v8 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 48))(a1);
  unint64_t v30 = 0;
  unint64_t v31 = 0;
  unint64_t v32 = 0;
  unint64_t v10 = *(const void **)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  int64_t v11 = v9 - *(void *)v8;
  if (v9 == *(void *)v8)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
  }
  else
  {
    if (v11 < 0) {
      sub_2550EAEEC();
    }
    uint64_t v12 = (char *)operator new(v9 - *(void *)v8);
    unsigned int v13 = &v12[8 * (v11 >> 3)];
    unint64_t v30 = v12;
    unint64_t v32 = v13;
    memcpy(v12, v10, v11);
    unint64_t v31 = v13;
  }
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  long long __p = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  p_p = &v27;
  if (v7 != v6)
  {
    int v14 = v7;
    do
    {
      uint64_t v15 = *((void *)v14 - 1);
      v14 -= 8;
      int v36 = v15;
      sub_25512ACC8((uint64_t *)&p_p, &v36);
    }
    while (v14 != v6);
  }
  p_p = &__p;
  while (v13 != v12)
  {
    uint64_t v16 = *((void *)v13 - 1);
    v13 -= 8;
    int v36 = v16;
    sub_25512ACC8((uint64_t *)&p_p, &v36);
  }
  uint64_t v17 = v7 - v6;
  if (v17)
  {
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF9) {
      sub_2550EAEEC();
    }
    uint64_t v18 = (char *)operator new(2 * v17);
    bzero(v18, 2 * v17);
    uint64_t v19 = 0;
    BOOL v20 = (char *)__p;
    unint64_t v21 = (char *)v27;
    if ((unint64_t)(v17 >> 3) <= 1) {
      uint64_t v22 = 1;
    }
    else {
      uint64_t v22 = v17 >> 3;
    }
    do
    {
      uint64_t v23 = &v18[4 * v19];
      *(_DWORD *)uint64_t v23 = 0;
      *((_DWORD *)v23 + 1) = *(_DWORD *)&v21[v19];
      *((_DWORD *)v23 + 2) = *(_DWORD *)&v20[v19];
      v19 += 4;
      --v22;
    }
    while (v22);
  }
  else
  {
    BOOL v20 = (char *)__p;
    if (!__p) {
      goto LABEL_24;
    }
  }
  uint64_t v25 = v20;
  operator delete(v20);
LABEL_24:
  if (v27)
  {
    uint64_t v28 = v27;
    operator delete(v27);
  }
  if (v12) {
    operator delete(v12);
  }
  if (v6) {
    operator delete(v6);
  }
  operator new();
}

void sub_25512A2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (v23) {
    operator delete(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512A38C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1;
  long long v61 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  long long __p = 0;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v55 = *(int *)(a2 + 36);
  if ((int)v55 >= 1)
  {
    uint64_t v3 = 0;
    int v4 = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = v62;
    int64_t v11 = v59;
    uint64_t v54 = a2;
    while (1)
    {
      uint64_t v12 = *(void *)(a2 + 40) + 16 * (~v5 + v55);
      uint64_t v14 = *(int *)(v12 + 4);
      uint64_t v13 = *(int *)(v12 + 8);
      unint64_t v57 = (unint64_t)v6;
      if (v4 < v7)
      {
        *(void *)int v4 = v14;
        unint64_t v10 = v4 + 8;
        if (v3 >= v6) {
          goto LABEL_25;
        }
        goto LABEL_3;
      }
      uint64_t v53 = v11;
      uint64_t v15 = (v4 - v8) >> 3;
      unint64_t v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
      {
        uint64_t v62 = v10;
        uint64_t v63 = v7;
        uint64_t v60 = v6;
        long long v61 = v8;
        long long __p = v9;
        uint64_t v59 = v53;
        sub_2550EAEEC();
      }
      if ((v7 - v8) >> 2 > v16) {
        unint64_t v16 = (v7 - v8) >> 2;
      }
      unint64_t v17 = (unint64_t)(v7 - v8) >= 0x7FFFFFFFFFFFFFF8 ? 0x1FFFFFFFFFFFFFFFLL : v16;
      if (v17)
      {
        if (v17 >> 61)
        {
          uint64_t v60 = v6;
          long long v61 = v8;
          uint64_t v62 = v10;
          uint64_t v63 = v7;
          long long __p = v9;
          uint64_t v59 = v53;
          sub_2550EACF8();
        }
        uint64_t v18 = v13;
        unint64_t v19 = v17;
        BOOL v20 = operator new(8 * v17);
        uint64_t v13 = v18;
        unint64_t v17 = v19;
      }
      else
      {
        BOOL v20 = 0;
      }
      unint64_t v21 = &v20[8 * v15];
      *unint64_t v21 = v14;
      uint64_t v22 = v21 + 1;
      if (v4 != v8) {
        break;
      }
      int64_t v11 = v53;
      uint64_t v7 = &v20[8 * v17];
      if (v8) {
        goto LABEL_23;
      }
LABEL_24:
      uint64_t v8 = (char *)v21;
      unint64_t v10 = v22;
      a2 = v54;
      uint64_t v6 = (char *)v57;
      if ((unint64_t)v3 >= v57)
      {
LABEL_25:
        uint64_t v28 = (v3 - v9) >> 3;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 61)
        {
          uint64_t v62 = v10;
          uint64_t v63 = v7;
          uint64_t v60 = v6;
          long long v61 = v8;
          long long __p = v9;
          uint64_t v59 = v11;
          sub_2550EAEEC();
        }
        if ((v6 - v9) >> 2 > v29) {
          unint64_t v29 = (v6 - v9) >> 2;
        }
        if ((unint64_t)(v6 - v9) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        uint64_t v56 = v7;
        unint64_t v31 = v10;
        if (v30)
        {
          if (v30 >> 61)
          {
            uint64_t v62 = v10;
            uint64_t v63 = v7;
            uint64_t v60 = (char *)v57;
            long long v61 = v8;
            long long __p = v9;
            uint64_t v59 = v11;
            sub_2550EACF8();
          }
          uint64_t v32 = v13;
          uint64_t v33 = operator new(8 * v30);
          uint64_t v13 = v32;
        }
        else
        {
          uint64_t v33 = 0;
        }
        uint64_t v34 = &v33[8 * v28];
        *uint64_t v34 = v13;
        int64_t v11 = v34 + 1;
        if (v3 != v9)
        {
          unint64_t v35 = v3 - v9 - 8;
          if (v35 < 0x168)
          {
            int v36 = v3;
            goto LABEL_38;
          }
          unint64_t v45 = (v3 - 8 - v9) & 0xFFFFFFFFFFFFFFF8;
          if (&v33[v3 - v9 - 8 - v45] > &v33[v3 - v9 - 8])
          {
            int v36 = v3;
            goto LABEL_38;
          }
          if (&v3[-v45 - 8] > v3 - 8)
          {
            int v36 = v3;
            goto LABEL_38;
          }
          if ((unint64_t)(v9 - v33) < 0x20)
          {
            int v36 = v3;
            goto LABEL_38;
          }
          uint64_t v46 = (v35 >> 3) + 1;
          uint64_t v47 = 8 * (v46 & 0x3FFFFFFFFFFFFFFCLL);
          int v36 = &v3[-v47];
          uint64_t v34 = (void *)((char *)v34 - v47);
          uint64_t v48 = &v33[8 * v28 - 16];
          int v49 = v3 - 16;
          uint64_t v50 = v46 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            long long v51 = *(_OWORD *)v49;
            *(v48 - 1) = *((_OWORD *)v49 - 1);
            *uint64_t v48 = v51;
            v48 -= 2;
            v49 -= 32;
            v50 -= 4;
          }
          while (v50);
          if (v46 != (v46 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_38:
              uint64_t v37 = *((void *)v36 - 1);
              v36 -= 8;
              *--uint64_t v34 = v37;
            }
            while (v36 != v9);
          }
        }
        uint64_t v6 = &v33[8 * v30];
        if (v9) {
          operator delete(v9);
        }
        uint64_t v9 = (char *)v34;
        unint64_t v10 = v31;
        a2 = v54;
        uint64_t v7 = v56;
        goto LABEL_4;
      }
LABEL_3:
      *(void *)uint64_t v3 = v13;
      int64_t v11 = v3 + 8;
LABEL_4:
      ++v5;
      uint64_t v3 = (char *)v11;
      int v4 = (char *)v10;
      if (v5 >= *(int *)(a2 + 36))
      {
        uint64_t v62 = v10;
        uint64_t v63 = v7;
        uint64_t v59 = v11;
        uint64_t v60 = v6;
        uint64_t v2 = a1;
        goto LABEL_63;
      }
    }
    unint64_t v23 = v4 - v8 - 8;
    if (v23 < 0x168
      || (unint64_t v38 = (v4 - 8 - v8) & 0xFFFFFFFFFFFFFFF8, &v20[v4 - v8 - 8 - v38] > &v20[v4 - v8 - 8])
      || &v4[-v38 - 8] > v4 - 8
      || (unint64_t)(v8 - v20) < 0x20)
    {
      uint64_t v24 = v4;
      int64_t v11 = v53;
    }
    else
    {
      uint64_t v39 = (v23 >> 3) + 1;
      uint64_t v40 = 8 * (v39 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v24 = &v4[-v40];
      unint64_t v21 = (void *)((char *)v21 - v40);
      uint64_t v41 = &v20[8 * v15 - 16];
      uint64_t v42 = v4 - 16;
      uint64_t v43 = v39 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v44 = *(_OWORD *)v42;
        *(v41 - 1) = *((_OWORD *)v42 - 1);
        *uint64_t v41 = v44;
        v41 -= 2;
        v42 -= 32;
        v43 -= 4;
      }
      while (v43);
      int64_t v11 = v53;
      if (v39 == (v39 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_22:
        uint64_t v7 = &v20[8 * v17];
        if (!v8) {
          goto LABEL_24;
        }
LABEL_23:
        uint64_t v26 = v7;
        uint64_t v27 = v13;
        operator delete(v8);
        uint64_t v13 = v27;
        uint64_t v7 = v26;
        goto LABEL_24;
      }
    }
    do
    {
      uint64_t v25 = *((void *)v24 - 1);
      v24 -= 8;
      *--unint64_t v21 = v25;
    }
    while (v24 != v8);
    goto LABEL_22;
  }
  uint64_t v9 = 0;
  uint64_t v8 = 0;
LABEL_63:
  long long v61 = v8;
  long long __p = v9;
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 56))(v2, &v61);
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, &__p);
  if (__p)
  {
    uint64_t v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    uint64_t v62 = v61;
    operator delete(v61);
  }
}

void sub_25512A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22)
{
  if (__p)
  {
    operator delete(__p);
    unint64_t v23 = a20;
    if (!a20) {
LABEL_3:
    }
      _Unwind_Resume(exception_object);
  }
  else
  {
    unint64_t v23 = a20;
    if (!a20) {
      goto LABEL_3;
    }
  }
  operator delete(v23);
  _Unwind_Resume(exception_object);
}

void sub_25512A8F0(void *a1, char **a2)
{
  uint64_t v2 = *a2;
  int64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    uint64_t v5 = (void *)a1[14];
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      if (!*v5) {
        void *v5 = *(void *)v2;
      }
      ++v5;
      v2 += 8;
      --v4;
    }
    while (v4);
  }
  sub_25513D09C(a1, a2);
}

uint64_t sub_25512A938(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 112);
  if (!*(void *)(v3 + 8 * a2)) {
    *(void *)(v3 + 8 * a2) = a3;
  }
  *(void *)(*(void *)(result + 8) + 8 * a2) = a3;
  return result;
}

char **sub_25512A954(uint64_t a1, char **a2)
{
  uint64_t v2 = *a2;
  int64_t v3 = a2[1] - *a2;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    uint64_t v5 = *(void **)(a1 + 136);
    if (v4 <= 1) {
      unint64_t v4 = 1;
    }
    do
    {
      if (!*v5) {
        void *v5 = *(void *)v2;
      }
      ++v5;
      v2 += 8;
      --v4;
    }
    while (v4);
  }
  return sub_25513D124(a1, a2);
}

uint64_t sub_25512A99C(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(result + 136);
  if (!*(void *)(v3 + 8 * a2)) {
    *(void *)(v3 + 8 * a2) = a3;
  }
  *(void *)(*(void *)(result + 32) + 8 * a2) = a3;
  return result;
}

char **sub_25512A9B8(uint64_t a1, char **a2)
{
  double result = (char **)(a1 + 112);
  if (result != a2) {
    return (char **)sub_25512AE3C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t sub_25512A9DC(uint64_t a1)
{
  return a1 + 112;
}

char **sub_25512A9E4(uint64_t a1, char **a2)
{
  double result = (char **)(a1 + 136);
  if (result != a2) {
    return (char **)sub_25512AE3C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t sub_25512AA08(uint64_t a1)
{
  return a1 + 136;
}

uint64_t sub_25512AA10(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 16);
}

uint64_t sub_25512AA1C(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 16);
}

uint64_t sub_25512AA28(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 16);
}

uint64_t sub_25512AA34(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 16);
}

uint64_t sub_25512AA40(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 104) + 16) = a2;
  return result;
}

uint64_t sub_25512AA4C()
{
  return 0;
}

uint64_t sub_25512AA54(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 104) + 24) = a2;
  return result;
}

uint64_t sub_25512AA60(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 24);
}

void **sub_25512AA6C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 104);
  double result = (void **)(v2 + 32);
  if ((void *)(v2 + 32) != a2)
  {
    if (*(char *)(v2 + 55) < 0)
    {
      size_t v5 = a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void *)*a2;
        size_t v6 = v5;
      }
      return sub_2550EE2F4(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_2550EE22C(result, (void *)*a2, a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      *(void *)(v2 + 48) = a2[2];
      *(_OWORD *)double result = v4;
    }
  }
  return result;
}

void *sub_25512AAC4@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[13];
  if (*(char *)(v2 + 55) < 0) {
    return sub_2550EABB0((unsigned char *)a2, *(void **)(v2 + 32), *(void *)(v2 + 40));
  }
  long long v3 = *(_OWORD *)(v2 + 32);
  *(void *)(a2 + 16) = *(void *)(v2 + 48);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_25512AAF0(uint64_t a1)
{
  return *(void *)(a1 + 104) + 56;
}

uint64_t sub_25512AAFC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 160);
}

uint64_t sub_25512AB04(void *a1)
{
  *(void *)(*(void *)(a1[13] + 240) + 16) = (*(uint64_t (**)(void *))(*a1 + 176))(a1);
  uint64_t result = *(void *)(a1[13] + 240);
  *(void *)(result + 24) |= 1uLL;
  return result;
}

uint64_t sub_25512AB68(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(result + 104) + 232) = a2;
  return result;
}

uint64_t sub_25512AB74(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 104) + 232);
}

uint64_t sub_25512AB80()
{
  return 0;
}

uint64_t sub_25512AB88(uint64_t a1)
{
  *(void *)a1 = &unk_2704454D0;
  uint64_t v2 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3) {
      MEMORY[0x25A2886A0](v3, 0x1000C80451B5BE8);
    }
    MEMORY[0x25A2886C0](v2, 0x10A0C40A8DA58FELL);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_25512AC18(uint64_t a1)
{
  *(void *)a1 = &unk_2704454D0;
  uint64_t v2 = *(void *)(a1 + 240);
  *(void *)(a1 + 240) = 0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    if (v3) {
      MEMORY[0x25A2886A0](v3, 0x1000C80451B5BE8);
    }
    MEMORY[0x25A2886C0](v2, 0x10A0C40A8DA58FELL);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  JUMPOUT(0x25A2886C0);
}

uint64_t *sub_25512ACC8(uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  size_t v6 = *(char **)(*a1 + 8);
  unint64_t v5 = *(void *)(*a1 + 16);
  uint64_t v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v9 = *(char **)v4;
    uint64_t v10 = (uint64_t)&v6[-*(void *)v4];
    uint64_t v11 = v10 >> 2;
    unint64_t v12 = (v10 >> 2) + 1;
    if (v12 >> 62) {
      sub_2550EAEEC();
    }
    uint64_t v13 = v5 - (void)v9;
    if (v13 >> 1 > v12) {
      unint64_t v12 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 62) {
        sub_2550EACF8();
      }
      uint64_t v15 = operator new(4 * v14);
    }
    else
    {
      uint64_t v15 = 0;
    }
    unint64_t v16 = &v15[4 * v11];
    *unint64_t v16 = *a2;
    uint64_t v8 = v16 + 1;
    if (v6 != v9)
    {
      unint64_t v17 = v6 - v9 - 4;
      if (v17 < 0x2C) {
        goto LABEL_27;
      }
      if ((unint64_t)(v6 - v15 - v10) < 0x20) {
        goto LABEL_27;
      }
      uint64_t v18 = (v17 >> 2) + 1;
      uint64_t v19 = 4 * (v18 & 0x7FFFFFFFFFFFFFF8);
      uint64_t v7 = &v6[-v19];
      unint64_t v16 = (_DWORD *)((char *)v16 - v19);
      BOOL v20 = &v15[4 * v11 - 16];
      unint64_t v21 = v6 - 16;
      uint64_t v22 = v18 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        long long v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *BOOL v20 = v23;
        v20 -= 2;
        v21 -= 32;
        v22 -= 8;
      }
      while (v22);
      if (v18 != (v18 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          int v24 = *((_DWORD *)v7 - 1);
          v7 -= 4;
          *--unint64_t v16 = v24;
        }
        while (v7 != v9);
      }
    }
    *(void *)uint64_t v4 = v16;
    *(void *)(v4 + 8) = v8;
    *(void *)(v4 + 16) = &v15[4 * v14];
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_DWORD *)size_t v6 = *a2;
    uint64_t v8 = v6 + 4;
  }
  *(void *)(v4 + 8) = v8;
  return a1;
}

void *sub_25512AE3C(void *result, char *__src, char *a3, size_t __sz)
{
  size_t v6 = __src;
  uint64_t v7 = result;
  uint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned char v7[2] = 0;
    }
    if (__sz >> 61) {
      goto LABEL_22;
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= __sz) {
      uint64_t v10 = __sz;
    }
    BOOL v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11) {
      unint64_t v12 = v10;
    }
    if (v12 >> 61) {
LABEL_22:
    }
      sub_2550EAEEC();
    uint64_t v13 = v12;
    uint64_t result = operator new(8 * v12);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    unsigned char v7[2] = &result[v13];
    size_t v14 = a3 - v6;
    if (v14) {
      uint64_t result = memcpy(result, v6, v14);
    }
    uint64_t v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  uint64_t v15 = (void **)(result + 1);
  unint64_t v16 = (unsigned char *)result[1];
  unint64_t v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    size_t v14 = a3 - __src;
    if (a3 == __src) {
      goto LABEL_21;
    }
    uint64_t v19 = (void *)*result;
LABEL_20:
    uint64_t result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  uint64_t v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    uint64_t result = memmove((void *)*result, __src, v16 - v9);
    uint64_t v9 = (char *)*v15;
  }
  size_t v14 = a3 - v18;
  if (v14)
  {
    uint64_t v19 = v9;
    int __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  unsigned char *v15 = &v9[v14];
  return result;
}

uint64_t sub_25512AF84(uint64_t a1)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  *(_OWORD *)(a1 + 8) = 0u;
  uint64_t v2 = a1 + 8;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 48) = a1 + 56;
  *(void *)a1 = &unk_2704454F0;
  *(void *)&long long __dst = "--bnns";
  DWORD2(__dst) = 0;
  LOBYTE(v28) = 1;
  int v29 = 0;
  unint64_t v30 = "enable the use of BNNS";
  unint64_t v31 = "--debug-constant";
  int v32 = 0;
  v33[0] = 0;
  int v34 = 0;
  unint64_t v35 = "debugging for constant values";
  int v36 = "--kcompile";
  int v37 = 0;
  v38[0] = 1;
  int v39 = 0;
  uint64_t v40 = "enable LLVM compilation of kernels";
  uint64_t v41 = "--load-constant-path";
  int v42 = 2;
  memset(v43, 0, sizeof(v43));
  int v44 = 2;
  unint64_t v45 = "base path used for relative paths in load-constant ops";
  uint64_t v46 = "--memory";
  int v47 = 2;
  uint64_t v48 = 0x636974617473;
  char v49 = 6;
  int v50 = 2;
  long long v51 = "method to allocate memory";
  sub_25512B484((void *)(a1 + 72), (uint64_t)&__dst, 5uLL);
  if (v50 != -1) {
    ((void (*)(long long **, uint64_t *))off_270445510[v50])(&v26, &v48);
  }
  int v50 = -1;
  if (v44 != -1) {
    ((void (*)(long long **, unsigned char *))off_270445510[v44])(&v26, v43);
  }
  int v44 = -1;
  if (v39 != -1) {
    ((void (*)(long long **, char *))off_270445510[v39])(&v26, v38);
  }
  int v39 = -1;
  if (v34 != -1) {
    ((void (*)(long long **, unsigned char *))off_270445510[v34])(&v26, v33);
  }
  int v34 = -1;
  if (v29 != -1) {
    ((void (*)(long long **, unint64_t *))off_270445510[v29])(&v26, &v28);
  }
  uint64_t v3 = *(void *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 80);
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 16;
    while (1)
    {
      uint64_t v6 = v5 - 16;
      uint64_t v7 = *(const char **)(v5 - 16);
      size_t v8 = strlen(v7);
      if (v8 > 0x7FFFFFFFFFFFFFF7) {
        sub_2550EAC50();
      }
      size_t v9 = v8;
      if (v8 >= 0x17) {
        break;
      }
      HIBYTE(v28) = v8;
      p_dst = &__dst;
      if (v8) {
        goto LABEL_21;
      }
LABEL_22:
      *((unsigned char *)p_dst + v9) = 0;
      uint64_t v26 = &__dst;
      uint64_t v13 = sub_25512C2CC(v2, (uint64_t)&__dst, (uint64_t)&unk_25513EFB0, &v26);
      size_t v14 = v13;
      uint64_t v15 = *((unsigned int *)v13 + 16);
      uint64_t v16 = *(unsigned int *)(v5 + 24);
      if (v15 == -1)
      {
        if (v16 != -1)
        {
LABEL_26:
          uint64_t v26 = (long long *)(v13 + 40);
          ((void (*)(long long **))off_270445540[v16])(&v26);
        }
      }
      else
      {
        if (v16 != -1) {
          goto LABEL_26;
        }
        ((void (*)(long long **, unsigned __int8 *))off_270445510[v15])(&v26, v13 + 40);
        *((_DWORD *)v14 + 16) = -1;
      }
      if (SHIBYTE(v28) < 0) {
        operator delete((void *)__dst);
      }
      v5 += 56;
      if (v6 + 56 == v4) {
        goto LABEL_29;
      }
    }
    uint64_t v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17) {
      uint64_t v11 = v8 | 7;
    }
    uint64_t v12 = v11 + 1;
    p_dst = (long long *)operator new(v11 + 1);
    *((void *)&__dst + 1) = v9;
    unint64_t v28 = v12 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
LABEL_21:
    memmove(p_dst, v7, v9);
    goto LABEL_22;
  }
LABEL_29:
  unint64_t v17 = getenv("__UNOWUD_RT");
  if (v17)
  {
    uint64_t v18 = v17;
    size_t v19 = strlen(v17);
    if (v19 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    size_t v20 = v19;
    if (v19 >= 0x17)
    {
      uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17) {
        uint64_t v22 = v19 | 7;
      }
      uint64_t v23 = v22 + 1;
      unint64_t v21 = (long long *)operator new(v22 + 1);
      *((void *)&__dst + 1) = v20;
      unint64_t v28 = v23 | 0x8000000000000000;
      *(void *)&long long __dst = v21;
    }
    else
    {
      HIBYTE(v28) = v19;
      unint64_t v21 = &__dst;
      if (!v19)
      {
LABEL_38:
        *((unsigned char *)v21 + v20) = 0;
        sub_25513B408((char **)a1, &__dst);
        if (SHIBYTE(v28) < 0) {
          operator delete((void *)__dst);
        }
        return a1;
      }
    }
    memmove(v21, v18, v20);
    goto LABEL_38;
  }
  return a1;
}

void sub_25512B400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_25512B610(a10);
  sub_2551035DC(a11);
  _Unwind_Resume(a1);
}

void *sub_25512B484(void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  uint64_t v4 = (uint64_t)(a1 + 2);
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    if (a3 >= 0x492492492492493) {
      sub_2550EAEEC();
    }
    uint64_t v6 = 56 * a3;
    uint64_t v7 = (char *)operator new(56 * a3);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[v6];
    a1[1] = sub_25512BF74(v4, a2, a2 + v6, (uint64_t)v7);
  }
  return a1;
}

void sub_25512B530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  v13[1] = v14;
  uint64_t v16 = *v13;
  if (*v13)
  {
    unint64_t v17 = v13[1];
    uint64_t v18 = *v13;
    if (v17 != v16)
    {
      do
      {
        uint64_t v19 = *(v17 - 4);
        if (v19 != -1) {
          ((void (*)(char *, _DWORD *))off_270445510[v19])(&a13, v17 - 10);
        }
        *(v17 - 4) = -1;
        v17 -= 14;
      }
      while (v17 != v16);
      uint64_t v18 = *v13;
    }
    v13[1] = v16;
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25512B5B4(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270445510[v2])(&v4, a1 + 16);
  }
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

void **sub_25512B610(void **a1)
{
  uint64_t v2 = *a1;
  if (*a1)
  {
    uint64_t v3 = a1[1];
    char v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        uint64_t v5 = *(v3 - 4);
        if (v5 != -1) {
          ((void (*)(char *, _DWORD *))off_270445510[v5])(&v7, v3 - 10);
        }
        *(v3 - 4) = -1;
        v3 -= 14;
      }
      while (v3 != v2);
      char v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_25512B6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(void *)(a1 + 80);
  if (v6 == v7) {
    goto LABEL_32;
  }
  do
  {
    uint64_t v10 = *(const char **)v6;
    size_t v11 = strlen(*(const char **)v6);
    if (v11 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    uint64_t v12 = (void *)v11;
    if (v11 >= 0x17)
    {
      uint64_t v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v14 = v11 | 7;
      }
      uint64_t v15 = v14 + 1;
      uint64_t v13 = operator new(v14 + 1);
      __s1[1] = v12;
      int64_t v38 = v15 | 0x8000000000000000;
      __s1[0] = v13;
LABEL_12:
      memmove(v13, v10, (size_t)v12);
      goto LABEL_13;
    }
    HIBYTE(v38) = v11;
    uint64_t v13 = __s1;
    if (v11) {
      goto LABEL_12;
    }
LABEL_13:
    *((unsigned char *)v12 + (void)v13) = 0;
    if (v38 >= 0) {
      uint64_t v16 = (void *)HIBYTE(v38);
    }
    else {
      uint64_t v16 = __s1[1];
    }
    unint64_t v17 = (void *)*(unsigned __int8 *)(a2 + 23);
    int v18 = (char)v17;
    if ((char)v17 < 0) {
      unint64_t v17 = *(void **)(a2 + 8);
    }
    if (v16 != v17) {
      goto LABEL_28;
    }
    if (v18 >= 0) {
      uint64_t v19 = (const char *)a2;
    }
    else {
      uint64_t v19 = *(const char **)a2;
    }
    if ((v38 & 0x8000000000000000) == 0)
    {
      if (!HIBYTE(v38)) {
        goto LABEL_31;
      }
      uint64_t v20 = 0;
      while (*((unsigned __int8 *)__s1 + v20) == v19[v20])
      {
        if (HIBYTE(v38) == ++v20) {
          goto LABEL_31;
        }
      }
LABEL_28:
      if (v38 < 0) {
        operator delete(__s1[0]);
      }
      goto LABEL_4;
    }
    size_t v8 = __s1[0];
    int v9 = memcmp(__s1[0], v19, (size_t)__s1[1]);
    operator delete(v8);
    if (!v9) {
      goto LABEL_31;
    }
LABEL_4:
    v6 += 56;
  }
  while (v6 != v7);
  uint64_t v6 = v7;
LABEL_31:
  uint64_t v3 = a3;
LABEL_32:
  if (v6 == *(void *)(a1 + 80))
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v27 = (const char *)a2;
    }
    else {
      uint64_t v27 = *(const char **)a2;
    }
    if (*(char *)(v3 + 23) >= 0) {
      unint64_t v28 = (const char *)v3;
    }
    else {
      unint64_t v28 = *(const char **)v3;
    }
    fprintf((FILE *)*MEMORY[0x263EF8348], "Unknown option %s=%s\n", v27, v28);
    return;
  }
  int v21 = *(_DWORD *)(v6 + 8);
  if (v21 == 2)
  {
    __s1[0] = (void *)a2;
    int v29 = sub_25512C65C(a1 + 8, a2, (uint64_t)&unk_25513EFB0, (long long **)__s1);
    sub_25512C194((void **)v29 + 5, (uint64_t)(v29 + 5), (long long *)v3);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
      goto LABEL_60;
    }
LABEL_63:
    sub_2550EABB0(__s1, *(void **)a2, *(void *)(a2 + 8));
    goto LABEL_64;
  }
  if (v21 == 1)
  {
    sub_25512CA18((uint64_t *)__s1, (long long *)v3, 8);
    uint64_t v36 = 0;
    *(_DWORD *)((char *)&__s1[1] + *((void *)__s1[0] - 3)) |= 1u;
    MEMORY[0x25A288540](__s1, &v36);
    uint64_t v30 = v36;
    __s1[0] = *(void **)MEMORY[0x263F8C2C0];
    *(void **)((char *)__s1 + *((void *)__s1[0] - 3)) = *(void **)(MEMORY[0x263F8C2C0] + 24);
    int64_t v38 = MEMORY[0x263F8C318] + 16;
    if (v43 < 0) {
      operator delete(__p);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x25A288660](v44);
    __s1[0] = (void *)a2;
    unint64_t v31 = sub_25512C65C(a1 + 8, a2, (uint64_t)&unk_25513EFB0, (long long **)__s1);
    int v32 = v31;
    uint64_t v33 = *((unsigned int *)v31 + 16);
    if (v33 != -1)
    {
      int v34 = v31 + 5;
      if (v33 == 1)
      {
        *int v34 = v30;
        if ((*(char *)(a2 + 23) & 0x80000000) == 0) {
          goto LABEL_60;
        }
        goto LABEL_63;
      }
      ((void (*)(void **, uint64_t *))off_270445510[v33])(__s1, v34);
    }
    v32[5] = v30;
    *((_DWORD *)v32 + 16) = 1;
LABEL_59:
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_63;
    }
    goto LABEL_60;
  }
  if (v21) {
    goto LABEL_59;
  }
  sub_25512CA18((uint64_t *)__s1, (long long *)v3, 8);
  LOBYTE(v36) = 0;
  *(_DWORD *)((char *)&__s1[1] + *((void *)__s1[0] - 3)) |= 1u;
  MEMORY[0x25A288530](__s1, &v36);
  char v22 = v36;
  __s1[0] = *(void **)MEMORY[0x263F8C2C0];
  *(void **)((char *)__s1 + *((void *)__s1[0] - 3)) = *(void **)(MEMORY[0x263F8C2C0] + 24);
  int64_t v38 = MEMORY[0x263F8C318] + 16;
  if (v43 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A288660](v44);
  __s1[0] = (void *)a2;
  uint64_t v23 = sub_25512C65C(a1 + 8, a2, (uint64_t)&unk_25513EFB0, (long long **)__s1);
  int v24 = v23;
  uint64_t v25 = *((unsigned int *)v23 + 16);
  if (v25 == -1)
  {
LABEL_62:
    *((unsigned char *)v24 + 40) = v22;
    *((_DWORD *)v24 + 16) = 0;
    if (*(char *)(a2 + 23) < 0) {
      goto LABEL_63;
    }
    goto LABEL_60;
  }
  uint64_t v26 = v23 + 5;
  if (v25)
  {
    ((void (*)(void **, unsigned char *))off_270445510[v25])(__s1, v26);
    goto LABEL_62;
  }
  *uint64_t v26 = v22;
  if (*(char *)(a2 + 23) < 0) {
    goto LABEL_63;
  }
LABEL_60:
  *(_OWORD *)__s1 = *(_OWORD *)a2;
  int64_t v38 = *(void *)(a2 + 16);
LABEL_64:
  if (*(char *)(v3 + 23) < 0)
  {
    sub_2550EABB0(&v39, *(void **)v3, *(void *)(v3 + 8));
  }
  else
  {
    long long v39 = *(_OWORD *)v3;
    uint64_t v40 = *(void *)(v3 + 16);
  }
  int v41 = 2;
  sub_25512CEAC(a1 + 8, (uint64_t)__s1, (uint64_t)__s1);
  if (v41 != -1) {
    ((void (*)(uint64_t *, long long *))off_270445510[v41])(&v36, &v39);
  }
  int v41 = -1;
  if (SHIBYTE(v38) < 0) {
    operator delete(__s1[0]);
  }
}

void sub_25512BCC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_25512CB9C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_25512BCE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_25512BD14((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_25512BD14(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 48);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270445510[v2])(&v4, a1 + 24);
  }
  *(_DWORD *)(a1 + 48) = -1;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_25512BD80(uint64_t a1, const char *a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  uint64_t v5 = *(void *)(a1 + 80);
  if (v4 != v5)
  {
    while (1)
    {
      size_t v8 = *(const char **)v4;
      size_t v9 = strlen(*(const char **)v4);
      if (v9 >= 0x7FFFFFFFFFFFFFF8) {
        sub_2550EAC50();
      }
      size_t v10 = v9;
      if (v9 >= 0x17) {
        break;
      }
      HIBYTE(v23) = v9;
      p_s1 = &__s1;
      if (v9) {
        goto LABEL_12;
      }
LABEL_13:
      p_s1[v10] = 0;
      if (v23 >= 0) {
        size_t v14 = HIBYTE(v23);
      }
      else {
        size_t v14 = __n;
      }
      uint64_t v15 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v16 = (char)v15;
      if ((char)v15 < 0) {
        uint64_t v15 = (unsigned __int8 *)*((void *)a2 + 1);
      }
      if ((unsigned __int8 *)v14 == v15)
      {
        if (v16 >= 0) {
          unint64_t v17 = a2;
        }
        else {
          unint64_t v17 = *(const char **)a2;
        }
        if (v23 < 0)
        {
          uint64_t v6 = __s1;
          int v7 = memcmp(__s1, v17, __n);
          operator delete(v6);
          if (!v7) {
            goto LABEL_31;
          }
          goto LABEL_4;
        }
        if (!HIBYTE(v23)) {
          goto LABEL_31;
        }
        uint64_t v18 = 0;
        while (*((unsigned __int8 *)&__s1 + v18) == v17[v18])
        {
          if (HIBYTE(v23) == ++v18) {
            goto LABEL_31;
          }
        }
      }
      if (v23 < 0) {
        operator delete(__s1);
      }
LABEL_4:
      v4 += 56;
      if (v4 == v5)
      {
        uint64_t v4 = v5;
        goto LABEL_31;
      }
    }
    uint64_t v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v12 = v9 | 7;
    }
    uint64_t v13 = v12 + 1;
    p_s1 = operator new(v12 + 1);
    size_t __n = v10;
    int64_t v23 = v13 | 0x8000000000000000;
    __s1 = p_s1;
LABEL_12:
    memmove(p_s1, v8, v10);
    goto LABEL_13;
  }
LABEL_31:
  if (v4 != *(void *)(a1 + 80)) {
    return *(unsigned int *)(v4 + 8);
  }
  if (a2[23] >= 0) {
    uint64_t v20 = a2;
  }
  else {
    uint64_t v20 = *(const char **)a2;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "Unknown RT option key %s!\n", v20);
  return 0;
}

void sub_25512BF4C(uint64_t a1)
{
  uint64_t v1 = (void *)sub_255104730(a1);
  j__free(v1);
}

uint64_t sub_25512BF74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v12 = a4;
  if (a2 != a3)
  {
    uint64_t v6 = a2 + 16;
    do
    {
      uint64_t v8 = v6 - 16;
      uint64_t v7 = *(void *)(v6 - 16);
      *(_DWORD *)(v4 + 8) = *(_DWORD *)(v6 - 8);
      *(void *)uint64_t v4 = v7;
      *(unsigned char *)(v4 + 16) = 0;
      *(_DWORD *)(v4 + 40) = -1;
      uint64_t v9 = *(unsigned int *)(v6 + 24);
      uint64_t v10 = v4;
      if (v9 != -1)
      {
        ((void (*)(unsigned char *, uint64_t, uint64_t))off_270445528[v9])(v13, v4 + 16, v6);
        *(_DWORD *)(v4 + 40) = v9;
        uint64_t v10 = v12;
      }
      *(void *)(v4 + 48) = *(void *)(v6 + 32);
      uint64_t v4 = v10 + 56;
      uint64_t v12 = v10 + 56;
      v6 += 56;
    }
    while (v8 + 56 != a3);
  }
  return v4;
}

void sub_25512C060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v22 = *(unsigned int *)(v19 + 40);
  if (v22 != -1) {
    ((void (*)(char *, uint64_t))off_270445510[v22])(&a19, v20);
  }
  *(_DWORD *)(v19 + 40) = -1;
  sub_255104690((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_25512C0A4(uint64_t result, unsigned char *a2, unsigned char *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (!v5)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_270445510[v5])(&v6, v4);
  }
  *(unsigned char *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 0;
  return result;
}

uint64_t sub_25512C114(uint64_t result, void *a2, void *a3)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(unsigned int *)(*(void *)result + 24);
  if (v5 != -1)
  {
    if (v5 == 1)
    {
      *a2 = *a3;
      return result;
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))off_270445510[v5])(&v6, v4);
  }
  *(void *)uint64_t v4 = *a3;
  *(_DWORD *)(v4 + 24) = 1;
  return result;
}

void **sub_25512C18C(void ***a1, uint64_t a2, long long *a3)
{
  return sub_25512C194(*a1, a2, a3);
}

void **sub_25512C194(void **result, uint64_t a2, long long *a3)
{
  int v3 = *((_DWORD *)result + 6);
  if (v3 != 2)
  {
    uint64_t v6 = (uint64_t)result;
    if (*((char *)a3 + 23) < 0)
    {
      uint64_t result = (void **)sub_2550EABB0(&v11, *(void **)a3, *((void *)a3 + 1));
      int v3 = *(_DWORD *)(v6 + 24);
      if (v3 == -1)
      {
LABEL_11:
        *(_OWORD *)uint64_t v6 = v11;
        *(void *)(v6 + 16) = v12;
        *(_DWORD *)(v6 + 24) = 2;
        return result;
      }
    }
    else
    {
      long long v11 = *a3;
      uint64_t v12 = *((void *)a3 + 2);
      if (v3 == -1) {
        goto LABEL_11;
      }
    }
    uint64_t result = (void **)((uint64_t (*)(char *, uint64_t))off_270445510[v3])(&v13, v6);
    goto LABEL_11;
  }
  if ((long long *)a2 != a3)
  {
    char v4 = *((unsigned char *)a3 + 23);
    if (*(char *)(a2 + 23) < 0)
    {
      if (v4 >= 0) {
        uint64_t v7 = a3;
      }
      else {
        uint64_t v7 = *(long long **)a3;
      }
      if (v4 >= 0) {
        size_t v8 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v8 = *((void *)a3 + 1);
      }
      return sub_2550EE2F4((void **)a2, v7, v8);
    }
    else if ((*((unsigned char *)a3 + 23) & 0x80) != 0)
    {
      uint64_t v10 = *(void **)a3;
      size_t v9 = *((void *)a3 + 1);
      return (void **)sub_2550EE22C((void *)a2, v10, v9);
    }
    else
    {
      long long v5 = *a3;
      *(void *)(a2 + 16) = *((void *)a3 + 2);
      *(_OWORD *)a2 = v5;
    }
  }
  return result;
}

unsigned __int8 *sub_25512C2CC(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v11)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          int v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  int64_t v23 = (void *)(a1 + 16);
  int v16 = (unsigned __int8 *)operator new(0x48uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(void *)int v16 = 0;
  *((void *)v16 + 1) = v11;
  int v24 = *a4;
  long long v25 = **a4;
  *((void *)v16 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = 0;
  *(void *)int v24 = 0;
  v16[40] = 0;
  *((_DWORD *)v16 + 16) = 0;
  char v41 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v36 = *(void *)a1;
  int v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)int v16 = *v37;
LABEL_73:
    void *v37 = v16;
    goto LABEL_74;
  }
  *(void *)int v16 = *v23;
  *int64_t v23 = v16;
  *(void *)(v36 + 8 * v4) = v23;
  if (*(void *)v16)
  {
    unint64_t v38 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }
    else
    {
      v38 &= v12 - 1;
    }
    int v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25512C644(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255103B08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25512C65C(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    uint64_t v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      int v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          int v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  int64_t v23 = (char *)operator new(0x48uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *(void *)int64_t v23 = 0;
  *((void *)v23 + 1) = v11;
  int v24 = v23 + 16;
  long long v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    *((void *)v23 + 4) = *((void *)v25 + 2);
    *(_OWORD *)int v24 = v26;
  }
  v23[40] = 0;
  *((_DWORD *)v23 + 16) = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  int v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  int v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25512C9FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255103B08((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25512CA18(uint64_t *a1, long long *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C338] + 64;
  a1[15] = MEMORY[0x263F8C338] + 64;
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2C0] + 16);
  uint64_t v9 = *(void *)(MEMORY[0x263F8C2C0] + 8);
  *a1 = v9;
  *(uint64_t *)((char *)a1 + *(void *)(v9 - 24)) = v8;
  a1[1] = 0;
  unint64_t v10 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v10, a1 + 2);
  uint64_t v11 = MEMORY[0x263F8C338] + 24;
  v10[1].__vftable = 0;
  v10[1].__fmtflags_ = -1;
  *a1 = v11;
  a1[15] = v6;
  sub_25512CCA0(v7, a2, a3 | 8);
  return a1;
}

void sub_25512CB74(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x25A288660](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25512CB9C(uint64_t a1)
{
  uint64_t v2 = MEMORY[0x263F8C2C0];
  uint64_t v3 = *MEMORY[0x263F8C2C0];
  *(void *)a1 = *MEMORY[0x263F8C2C0];
  *(void *)(a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  *(void *)(a1 + 16) = MEMORY[0x263F8C318] + 16;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A288660](a1 + 120);
  return a1;
}

uint64_t sub_25512CCA0(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  if ((long long *)(v6 + 64) != a2)
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_2550EE22C((void *)(v6 + 64), *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v7 = *a2;
      *(void *)(v6 + 80) = *((void *)a2 + 2);
      *(_OWORD *)(v6 + 64) = v7;
    }
  }
  sub_25512CD64(a1);
  return a1;
}

void sub_25512CD40(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

std::string *sub_25512CD64(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t result = (std::string *)(a1 + 64);
  unint64_t v3 = *(unsigned __int8 *)(a1 + 87);
  if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    unint64_t v4 = result;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
    int v6 = *(_DWORD *)(a1 + 96);
    if ((v6 & 8) == 0) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  unint64_t v4 = *(std::string **)(a1 + 64);
  unint64_t v5 = *(void *)(a1 + 72);
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
LABEL_3:
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
LABEL_4:
  if ((v6 & 0x10) == 0) {
    return result;
  }
  *(void *)(a1 + 88) = (char *)v4 + v5;
  if ((v3 & 0x80) != 0)
  {
    unint64_t v3 = *(void *)(a1 + 72);
    unint64_t v7 = (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v3 >= v7)
    {
      uint64_t result = *(std::string **)(a1 + 64);
      *(void *)(a1 + 72) = v7;
LABEL_14:
      result->__r_.__value_.__s.__data_[v7] = 0;
      LODWORD(v8) = *(char *)(a1 + 87);
      if ((v8 & 0x80000000) != 0) {
        goto LABEL_15;
      }
LABEL_12:
      uint64_t v8 = v8;
      goto LABEL_16;
    }
  }
  else
  {
    unint64_t v7 = 22;
    if (v3 > 0x15)
    {
      *(unsigned char *)(a1 + 87) = 22;
      goto LABEL_14;
    }
  }
  uint64_t result = std::string::append(result, v7 - v3, 0);
  LODWORD(v8) = *(char *)(a1 + 87);
  if ((v8 & 0x80000000) == 0) {
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v8 = *(void *)(a1 + 72);
LABEL_16:
  *(void *)(a1 + 40) = v4;
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = (char *)v4 + v8;
  if ((*(unsigned char *)(a1 + 96) & 3) != 0)
  {
    if (v5 >> 31)
    {
      uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
      unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
      unint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
      unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
      *(void *)(a1 + 48) = v4;
    }
    if (v5) {
      *(void *)(a1 + 48) = (char *)v4 + v5;
    }
  }
  return result;
}

uint64_t *sub_25512CEAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v35, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    unint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_25512D22C(a1, v10, a3, (uint64_t)v35);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  int8x8_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *(void *)v35[0] = *v32;
    *int8x8_t v32 = v35[0];
  }
  else
  {
    *(void *)v35[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v35[0])
    {
      unint64_t v33 = *(void *)(*(void *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11) {
          v33 %= v11;
        }
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v35[0];
    }
  }
  uint64_t v15 = (uint64_t *)v35[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_25512D214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255103B08((uint64_t *)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_25512D22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = (char *)operator new(0x48uLL);
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = v8 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_2550EABB0(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    *((void *)v8 + 4) = *(void *)(a3 + 16);
  }
  v8[40] = 0;
  *((_DWORD *)v8 + 16) = -1;
  uint64_t v10 = *(unsigned int *)(a3 + 48);
  if (v10 != -1)
  {
    uint64_t result = (unsigned char *)((uint64_t (*)(char *))off_270445558[v10])(&v11);
    *((_DWORD *)v8 + 16) = v10;
  }
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_25512D2EC(_Unwind_Exception *a1)
{
  sub_255103B08(v1);
  _Unwind_Resume(a1);
}

void sub_25512D304(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  *a2 = *a3;
}

void sub_25512D310(uint64_t a1, void *a2, void *a3)
{
  *a2 = *a3;
}

__n128 sub_25512D31C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

uint64_t sub_25512D338(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270445580;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a2;
  unint64_t v4 = sub_25513B0B8(0x1E0uLL);
  sub_2551239DC(v4, a2);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_25512D3A8(_Unwind_Exception *a1)
{
  j__free(v2);
  nullsub_34(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_25512D3CC(void *a1)
{
  *a1 = &unk_270445580;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  return nullsub_34(a1);
}

void sub_25512D494(void *a1)
{
  *a1 = &unk_270445580;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = a1[3];
  a1[3] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  unint64_t v4 = (void *)nullsub_34(a1);
  j__free(v4);
}

uint64_t sub_25512D560(uint64_t a1, uint64_t *a2)
{
  return sub_255123E8C(*(void *)(a1 + 24), a2);
}

uint64_t sub_25512D568(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void sub_25512D570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void **)(a1 + 24);
  uint64_t v5 = v4[10];
  uint64_t v6 = v4[11];
  if (v5 == v6)
  {
LABEL_4:
    v4[1] = a2;
    *(void *)(*(void *)(a1 + 24) + 16) = a3;
    *(void *)(*(void *)(a1 + 24) + 24) = a4;
  }
  else
  {
    while (!*(void *)(v5 + 40))
    {
      v5 += 80;
      if (v5 == v6) {
        goto LABEL_4;
      }
    }
    uint64_t v7 = *(void **)(a1 + 16);
    long long __p = operator new(0x28uLL);
    long long v9 = xmmword_25513EEB0;
    strcpy((char *)__p, "Allocator cannot be set after loading.");
    sub_25513A900(v7, 1, (uint64_t)&__p);
    if (SHIBYTE(v9) < 0) {
      operator delete(__p);
    }
  }
}

void sub_25512D628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25512D644(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (uint64_t *)sub_255139818(a2);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  uint64_t v7 = v6 - *v4;
  std::streambuf::basic_streambuf();
  v21[8] = v5;
  v21[9] = v7;
  v21[2] = v5;
  v21[3] = v5;
  v21[4] = v6;
  v20[1] = 0;
  v21[0] = &unk_270445638;
  v22.__vftable = (std::ios_base_vtbl *)&unk_270445738;
  std::ios_base::init(&v22, v21);
  int v24 = -1;
  v20[0] = &unk_2704455B0;
  v21[0] = &unk_270445638;
  uint64_t v23 = 0;
  v22.__vftable = (std::ios_base_vtbl *)&unk_2704456C0;
  sub_25510F6C8((uint64_t)v20, &v18);
  if (!v18)
  {
    unint64_t v13 = *(void **)(a1 + 16);
    char v16 = operator new(0x20uLL);
    long long v17 = xmmword_25513E9C0;
    strcpy((char *)v16, "Could not parse program.");
    sub_25513A900(v13, 5, (uint64_t)&v16);
    if ((SHIBYTE(v17) & 0x80000000) == 0) {
      goto LABEL_14;
    }
    char v11 = v16;
LABEL_13:
    operator delete(v11);
    goto LABEL_14;
  }
  sub_255123ED4(*(void *)(a1 + 24), &v18);
  if (sub_25513A9F4(*(void *)(a1 + 16)))
  {
    uint64_t v8 = sub_255139820(a2);
    uint64_t v9 = *(void *)(a1 + 24) + 152;
    if (v9 != v8) {
      sub_25512ED04(v9, *(char ***)v8, *(void *)(v8 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v8 + 8) - *(void *)v8) >> 3));
    }
    sub_255139828(a2, (uint64_t)&v16);
    sub_25512F1FC(*(void *)(a1 + 24) + 320, (uint64_t *)&v16);
    uint64_t v10 = (void **)*((void *)&v17 + 1);
    if (*((void *)&v17 + 1))
    {
      do
      {
        uint8x8_t v12 = (void **)*v10;
        if (*((char *)v10 + 39) < 0) {
          operator delete(v10[2]);
        }
        operator delete(v10);
        uint64_t v10 = v12;
      }
      while (v12);
    }
    char v11 = v16;
    char v16 = 0;
    if (v11) {
      goto LABEL_13;
    }
  }
LABEL_14:
  unint64_t v14 = v19;
  if (v19 && !atomic_fetch_add(&v19->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  std::istream::~istream();
  MEMORY[0x25A288660](&v22);
  return std::streambuf::~streambuf();
}

void sub_25512D8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19)
{
}

uint64_t sub_25512D948(uint64_t a1)
{
  uint64_t v2 = std::istream::~istream();
  MEMORY[0x25A288660](v2 + 96);
  std::streambuf::~streambuf();
  return a1;
}

void sub_25512D988(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8))
  {
    sub_2551080CC((uint64_t)v12);
    sub_2551084AC(v12, (uint64_t)"Cannot load binary; it has already been loaded.", 47);
    uint64_t v2 = *(void **)(a1 + 16);
    if ((v19 & 0x10) != 0)
    {
      unint64_t v5 = v18;
      if (v18 < v15)
      {
        unint64_t v18 = v15;
        unint64_t v5 = v15;
      }
      uint64_t v6 = (const void **)&v14;
    }
    else
    {
      if ((v19 & 8) == 0)
      {
        size_t v3 = 0;
        HIBYTE(v11) = 0;
        unint64_t v4 = __p;
        goto LABEL_20;
      }
      uint64_t v6 = (const void **)v13;
      unint64_t v5 = v13[2];
    }
    uint64_t v7 = *v6;
    size_t v3 = v5 - (void)*v6;
    if (v3 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    if (v3 >= 0x17)
    {
      uint64_t v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v3 | 7) != 0x17) {
        uint64_t v8 = v3 | 7;
      }
      uint64_t v9 = v8 + 1;
      unint64_t v4 = operator new(v8 + 1);
      __p[1] = (void *)v3;
      unint64_t v11 = v9 | 0x8000000000000000;
      __p[0] = v4;
    }
    else
    {
      HIBYTE(v11) = v5 - *(unsigned char *)v6;
      unint64_t v4 = __p;
      if (!v3) {
        goto LABEL_20;
      }
    }
    memmove(v4, v7, v3);
LABEL_20:
    *((unsigned char *)v4 + v3) = 0;
    sub_25513A900(v2, 5, (uint64_t)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    v12[0] = *MEMORY[0x263F8C2C8];
    *(void *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
    v12[1] = MEMORY[0x263F8C318] + 16;
    if (v17 < 0) {
      operator delete(v16);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x25A288660](&v20);
    return;
  }
  sub_255125130(*(void *)(a1 + 24));
  if (sub_25513A9F4(*(void *)(a1 + 16)))
  {
    sub_255124CE8(*(void **)(a1 + 24));
    if (!*(void *)(*(void *)(a1 + 16) + 40))
    {
      sub_255124DC8(*(void *)(a1 + 24));
      *(_DWORD *)(a1 + 8) = 1;
    }
  }
}

void sub_25512DBE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_25512DC18(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    sub_2551256B0(v2);
    return;
  }
  sub_2551080CC((uint64_t)v13);
  sub_2551084AC(v13, (uint64_t)"Cannot unload binary; it has not been loaded.", 45);
  size_t v3 = *(void **)(a1 + 16);
  if ((v20 & 0x10) != 0)
  {
    unint64_t v6 = v19;
    if (v19 < v16)
    {
      unint64_t v19 = v16;
      unint64_t v6 = v16;
    }
    uint64_t v7 = (const void **)&v15;
  }
  else
  {
    if ((v20 & 8) == 0)
    {
      size_t v4 = 0;
      HIBYTE(v12) = 0;
      unint64_t v5 = __p;
      goto LABEL_20;
    }
    uint64_t v7 = (const void **)v14;
    unint64_t v6 = v14[2];
  }
  uint64_t v8 = *v7;
  size_t v4 = v6 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v5 = operator new(v9 + 1);
    __p[1] = (void *)v4;
    unint64_t v12 = v10 | 0x8000000000000000;
    __p[0] = v5;
  }
  else
  {
    HIBYTE(v12) = v6 - *(unsigned char *)v7;
    unint64_t v5 = __p;
    if (!v4) {
      goto LABEL_20;
    }
  }
  memmove(v5, v8, v4);
LABEL_20:
  *((unsigned char *)v5 + v4) = 0;
  sub_25513A900(v3, 5, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete(v17);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v21);
}

void sub_25512DE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_25512DE9C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    sub_255124E4C(v2);
    return;
  }
  sub_2551080CC((uint64_t)v13);
  sub_2551084AC(v13, (uint64_t)"Cannot validate binary; it hasn't been loaded.", 46);
  size_t v3 = *(void **)(a1 + 16);
  if ((v20 & 0x10) != 0)
  {
    unint64_t v6 = v19;
    if (v19 < v16)
    {
      unint64_t v19 = v16;
      unint64_t v6 = v16;
    }
    uint64_t v7 = (const void **)&v15;
  }
  else
  {
    if ((v20 & 8) == 0)
    {
      size_t v4 = 0;
      HIBYTE(v12) = 0;
      unint64_t v5 = __p;
      goto LABEL_20;
    }
    uint64_t v7 = (const void **)v14;
    unint64_t v6 = v14[2];
  }
  uint64_t v8 = *v7;
  size_t v4 = v6 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    unint64_t v5 = operator new(v9 + 1);
    __p[1] = (void *)v4;
    unint64_t v12 = v10 | 0x8000000000000000;
    __p[0] = v5;
  }
  else
  {
    HIBYTE(v12) = v6 - *(unsigned char *)v7;
    unint64_t v5 = __p;
    if (!v4) {
      goto LABEL_20;
    }
  }
  memmove(v5, v8, v4);
LABEL_20:
  *((unsigned char *)v5 + v4) = 0;
  sub_25513A900(v3, 5, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete(v17);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v21);
}

void sub_25512E0F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

int64_t sub_25512E120(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  char v11 = 4;
  strcpy((char *)__p, "main");
  sub_2551255C8(v1, (unsigned __int8 **)__p, &v12);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v2 = v13;
    if (v13) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete(__p[0]);
  uint64_t v2 = v13;
  if (!v13) {
    return 0;
  }
LABEL_3:
  if (v2->__shared_owners_ == -1) {
    goto LABEL_19;
  }
  size_t v3 = std::__shared_weak_count::lock(v2);
  int64_t v4 = (int64_t)v3;
  if (!v3) {
    goto LABEL_15;
  }
  unint64_t v5 = v12;
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    if (v5) {
      goto LABEL_7;
    }
LABEL_19:
    int64_t v4 = 0;
    uint64_t v8 = v13;
    if (!v13) {
      return v4;
    }
    goto LABEL_16;
  }
  if (!v5) {
    goto LABEL_19;
  }
LABEL_7:
  if (v13 && (unint64_t v6 = std::__shared_weak_count::lock(v13)) != 0)
  {
    uint64_t v7 = v6;
    int64_t v4 = ((unsigned char *)v12[4] - (unsigned char *)v12[3]) >> 4;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v13;
      if (!v13) {
        return v4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    int64_t v4 = (uint64_t)(MEMORY[0x20] - MEMORY[0x18]) >> 4;
  }
LABEL_15:
  uint64_t v8 = v13;
  if (v13) {
LABEL_16:
  }
    std::__shared_weak_count::__release_weak(v8);
  return v4;
}

void sub_25512E2A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512E2BC(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  char v15 = 4;
  strcpy((char *)__p, "main");
  sub_2551255C8(v5, (unsigned __int8 **)__p, &v16);
  if ((v15 & 0x80000000) == 0)
  {
    unint64_t v6 = v17;
    if (v17) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  unint64_t v6 = v17;
  if (!v17) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v8 = v7;
  uint64_t v9 = v16;
  if (!v7) {
    uint64_t v9 = 0;
  }
  if (!v17 || (v17->__shared_owners_ != -1 ? (BOOL v10 = v9 == 0) : (BOOL v10 = 1), v10))
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    if (!v8) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  char v11 = v9[3];
  *a3 = 0;
  a3[1] = 0;
  long long v12 = v11[a2];
  uint64_t v13 = *((void *)&v11[a2] + 1);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)a3 = v12;
  if (v7)
  {
LABEL_17:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_19:
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_25512E3E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

int64_t sub_25512E400(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  char v11 = 4;
  strcpy((char *)__p, "main");
  sub_2551255C8(v1, (unsigned __int8 **)__p, &v12);
  if ((v11 & 0x80000000) == 0)
  {
    uint64_t v2 = v13;
    if (v13) {
      goto LABEL_3;
    }
    return 0;
  }
  operator delete(__p[0]);
  uint64_t v2 = v13;
  if (!v13) {
    return 0;
  }
LABEL_3:
  if (v2->__shared_owners_ == -1) {
    goto LABEL_19;
  }
  size_t v3 = std::__shared_weak_count::lock(v2);
  int64_t v4 = (int64_t)v3;
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v5 = v12;
  if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    if (v5) {
      goto LABEL_7;
    }
LABEL_19:
    int64_t v4 = 0;
    uint64_t v8 = v13;
    if (!v13) {
      return v4;
    }
    goto LABEL_16;
  }
  if (!v5) {
    goto LABEL_19;
  }
LABEL_7:
  if (v13 && (unint64_t v6 = std::__shared_weak_count::lock(v13)) != 0)
  {
    uint64_t v7 = v6;
    int64_t v4 = ((unsigned char *)v12[7] - (unsigned char *)v12[6]) >> 4;
    if (!atomic_fetch_add(&v6->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
      uint64_t v8 = v13;
      if (!v13) {
        return v4;
      }
      goto LABEL_16;
    }
  }
  else
  {
    int64_t v4 = (uint64_t)(MEMORY[0x38] - MEMORY[0x30]) >> 4;
  }
LABEL_15:
  uint64_t v8 = v13;
  if (v13) {
LABEL_16:
  }
    std::__shared_weak_count::__release_weak(v8);
  return v4;
}

void sub_25512E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512E59C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  char v15 = 4;
  strcpy((char *)__p, "main");
  sub_2551255C8(v5, (unsigned __int8 **)__p, &v16);
  if ((v15 & 0x80000000) == 0)
  {
    unint64_t v6 = v17;
    if (v17) {
      goto LABEL_3;
    }
LABEL_15:
    uint64_t v8 = 0;
    goto LABEL_16;
  }
  operator delete(__p[0]);
  unint64_t v6 = v17;
  if (!v17) {
    goto LABEL_15;
  }
LABEL_3:
  uint64_t v7 = std::__shared_weak_count::lock(v6);
  uint64_t v8 = v7;
  uint64_t v9 = v16;
  if (!v7) {
    uint64_t v9 = 0;
  }
  if (!v17 || (v17->__shared_owners_ != -1 ? (BOOL v10 = v9 == 0) : (BOOL v10 = 1), v10))
  {
LABEL_16:
    *a3 = 0;
    a3[1] = 0;
    if (!v8) {
      goto LABEL_19;
    }
    goto LABEL_17;
  }
  char v11 = v9[6];
  *a3 = 0;
  a3[1] = 0;
  long long v12 = v11[a2];
  uint64_t v13 = *((void *)&v11[a2] + 1);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)a3 = v12;
  if (v7)
  {
LABEL_17:
    if (!atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
LABEL_19:
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
}

void sub_25512E6C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512E6E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  char v9 = 4;
  strcpy((char *)__p, "main");
  sub_2551255C8(v2, (unsigned __int8 **)__p, &v10);
  long long v12 = 0;
  uint64_t v13 = 0;
  if (!v11)
  {
    size_t v3 = 0;
    int64_t v4 = 0;
    goto LABEL_8;
  }
  size_t v3 = std::__shared_weak_count::lock(v11);
  uint64_t v13 = v3;
  if (!v3)
  {
    int64_t v4 = 0;
    uint64_t v5 = v11;
    if (!v11) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  int64_t v4 = v10;
  long long v12 = v10;
  uint64_t v5 = v11;
  if (v11) {
LABEL_7:
  }
    std::__shared_weak_count::__release_weak(v5);
LABEL_8:
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  unint64_t v6 = 0;
  unint64_t v7 = ((unsigned char *)v4[10] - (unsigned char *)v4[9]) >> 4;
  while (v6 < v7 && sub_25513A9F4(*(void *)(a1 + 16)))
    unint64_t v6 = sub_255128010(*(int8x8_t ***)(*(void *)(a1 + 24) + 72), *(void *)(a1 + 24), (uint64_t)v4, v6);
  if (v3)
  {
    if (!atomic_fetch_add(&v3->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_25512E820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_25512E850(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 8) == 1)
  {
    uint64_t v2 = *(void *)(a1 + 24);
    sub_255125A1C(v2);
    return;
  }
  sub_2551080CC((uint64_t)v13);
  sub_2551084AC(v13, (uint64_t)"Cannot reshape binary; it has not been loaded.", 46);
  size_t v3 = *(void **)(a1 + 16);
  if ((v20 & 0x10) != 0)
  {
    unint64_t v6 = v19;
    if (v19 < v16)
    {
      unint64_t v19 = v16;
      unint64_t v6 = v16;
    }
    unint64_t v7 = (const void **)&v15;
  }
  else
  {
    if ((v20 & 8) == 0)
    {
      size_t v4 = 0;
      HIBYTE(v12) = 0;
      uint64_t v5 = __p;
      goto LABEL_20;
    }
    unint64_t v7 = (const void **)v14;
    unint64_t v6 = v14[2];
  }
  uint64_t v8 = *v7;
  size_t v4 = v6 - (void)*v7;
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v4 >= 0x17)
  {
    uint64_t v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v9 = v4 | 7;
    }
    uint64_t v10 = v9 + 1;
    uint64_t v5 = operator new(v9 + 1);
    __p[1] = (void *)v4;
    unint64_t v12 = v10 | 0x8000000000000000;
    __p[0] = v5;
  }
  else
  {
    HIBYTE(v12) = v6 - *(unsigned char *)v7;
    uint64_t v5 = __p;
    if (!v4) {
      goto LABEL_20;
    }
  }
  memmove(v5, v8, v4);
LABEL_20:
  *((unsigned char *)v5 + v4) = 0;
  sub_25513A900(v3, 5, (uint64_t)__p);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  v13[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v13 + *(void *)(v13[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v13[1] = MEMORY[0x263F8C318] + 16;
  if (v18 < 0) {
    operator delete(v17);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v21);
}

void sub_25512EAA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&a15);
  _Unwind_Resume(a1);
}

BOOL sub_25512EAD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 24);
  return v2[19] != v2[20] || sub_255125D44(v2 + 37, a2);
}

void sub_25512EAF4()
{
  uint64_t v0 = std::istream::~istream();
  MEMORY[0x25A288660](v0 + 96);
  std::streambuf::~streambuf();
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25512EB54(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x25A288660](v1 + 96);
  return std::streambuf::~streambuf();
}

void sub_25512EBB4(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x25A288660](v1 + 96);
  std::streambuf::~streambuf();
  JUMPOUT(0x25A2886C0);
}

uint64_t sub_25512EC2C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x25A288660](v1 + 96);
  return std::streambuf::~streambuf();
}

void sub_25512EC8C(void *a1)
{
  uint64_t v1 = (char *)a1 + *(void *)(*a1 - 24);
  std::istream::~istream();
  MEMORY[0x25A288660](v1 + 96);
  std::streambuf::~streambuf();
  JUMPOUT(0x25A2886C0);
}

void sub_25512ED04(uint64_t a1, char **a2, uint64_t a3, size_t __sz)
{
  unint64_t v6 = a2;
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(char ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < __sz)
  {
    if (v10)
    {
      char v11 = *(char ***)(a1 + 8);
      unint64_t v12 = *(char ***)a1;
      if (v11 != v10)
      {
        uint64_t v13 = *(char ***)(a1 + 8);
        do
        {
          uint64_t v15 = *(v13 - 3);
          v13 -= 3;
          uint64_t v14 = v15;
          if (v15)
          {
            *(v11 - 2) = v14;
            operator delete(v14);
          }
          char v11 = v13;
        }
        while (v13 != v10);
        unint64_t v12 = *(char ***)a1;
      }
      *(void *)(a1 + 8) = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_40;
    }
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v21 = 2 * v20;
    if (2 * v20 <= __sz) {
      uint64_t v21 = __sz;
    }
    unint64_t v22 = v20 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v21;
    if (v22 > 0xAAAAAAAAAAAAAAALL) {
LABEL_40:
    }
      sub_2550EAEEC();
    uint64_t v23 = 3 * v22;
    int v24 = operator new(24 * v22);
    *(void *)a1 = v24;
    *(void *)(a1 + 8) = v24;
    *(void *)(a1 + 16) = &v24[v23];
    unint64_t v25 = sub_25512EF60(v9, (uint64_t)v6, a3, v24);
LABEL_31:
    *(void *)(a1 + 8) = v25;
    return;
  }
  unint64_t v16 = *(char ***)(a1 + 8);
  if (0xAAAAAAAAAAAAAAABLL * (v16 - v10) < __sz)
  {
    uint64_t v17 = (uint64_t)&a2[v16 - v10];
    if (v16 != v10)
    {
      uint64_t v18 = 8 * (v16 - v10);
      do
      {
        if (v6 != v10) {
          sub_25512F0C4(v10, *v6, v6[1], v6[1] - *v6);
        }
        v6 += 3;
        v10 += 3;
        v18 -= 24;
      }
      while (v18);
      uint64_t v10 = *(char ***)(a1 + 8);
    }
    unint64_t v25 = sub_25512EF60(v9, v17, a3, v10);
    goto LABEL_31;
  }
  if (a2 != (char **)a3)
  {
    unint64_t v19 = *(char ***)a1;
    do
    {
      if (v6 != v10) {
        sub_25512F0C4(v10, *v6, v6[1], v6[1] - *v6);
      }
      v6 += 3;
      v10 += 3;
      v19 += 3;
    }
    while (v6 != (char **)a3);
    unint64_t v16 = *(char ***)(a1 + 8);
    if (v16 == v19) {
      goto LABEL_39;
    }
    goto LABEL_35;
  }
  unint64_t v19 = *(char ***)a1;
  if (v16 != v10)
  {
LABEL_35:
    unint64_t v26 = v16;
    do
    {
      int8x8_t v28 = *(v26 - 3);
      v26 -= 3;
      float v27 = v28;
      if (v28)
      {
        *(v16 - 2) = v27;
        operator delete(v27);
      }
      unint64_t v16 = v26;
    }
    while (v26 != v19);
  }
LABEL_39:
  *(void *)(a1 + 8) = v19;
}

void sub_25512EF50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_25512EF58(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *sub_25512EF60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      uint64_t v9 = *(const void **)v6;
      uint64_t v8 = *(void *)(v6 + 8);
      size_t v10 = v8 - *(void *)v6;
      if (v8 != *(void *)v6)
      {
        if ((v10 & 0x8000000000000000) != 0) {
          sub_2550EAEEC();
        }
        char v11 = (char *)operator new(v8 - *(void *)v6);
        *a4 = v11;
        a4[1] = v11;
        unint64_t v7 = &v11[v10];
        a4[2] = &v11[v10];
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_25512F028(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25512F054(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 16);
    uint64_t v4 = **(void **)(a1 + 8);
    if (v3 != v4)
    {
      uint64_t v5 = **(void **)(a1 + 16);
      do
      {
        unint64_t v7 = *(void **)(v5 - 24);
        v5 -= 24;
        uint64_t v6 = v7;
        if (v7)
        {
          *(void *)(v3 - 16) = v6;
          operator delete(v6);
        }
        uint64_t v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void *sub_25512F0C4(void *result, char *__src, char *a3, unint64_t a4)
{
  unint64_t v7 = result;
  unint64_t v8 = result[2];
  uint64_t v9 = (char *)*result;
  if (v8 - *result < a4)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      void *v7 = 0;
      v7[1] = 0;
      unsigned char v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      goto LABEL_23;
    }
    uint64_t v10 = 2 * v8;
    if (2 * v8 <= a4) {
      uint64_t v10 = a4;
    }
    size_t v11 = v8 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v10;
    if ((v11 & 0x8000000000000000) != 0) {
LABEL_23:
    }
      sub_2550EAEEC();
    __n128 result = operator new(v11);
    uint64_t v9 = (char *)result;
    void *v7 = result;
    v7[1] = result;
    unsigned char v7[2] = (char *)result + v11;
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memcpy(result, __src, v12);
    }
LABEL_21:
    unint64_t v16 = &v9[v12];
    goto LABEL_22;
  }
  uint64_t v13 = (unsigned char *)result[1];
  size_t v14 = v13 - v9;
  if (v13 - v9 >= a4)
  {
    size_t v12 = a3 - __src;
    if (v12) {
      __n128 result = memmove((void *)*result, __src, v12);
    }
    goto LABEL_21;
  }
  uint64_t v15 = &__src[v14];
  if (v13 != v9)
  {
    __n128 result = memmove((void *)*result, __src, v14);
    uint64_t v9 = (char *)v7[1];
  }
  if (a3 != v15) {
    __n128 result = memmove(v9, v15, a3 - v15);
  }
  unint64_t v16 = &v9[a3 - v15];
LABEL_22:
  v7[1] = v16;
  return result;
}

void sub_25512F1FC(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    uint64_t v4 = *(void ***)(a1 + 16);
    if (v4)
    {
      do
      {
        unint64_t v16 = (void **)*v4;
        if (*((char *)v4 + 39) < 0) {
          operator delete(v4[2]);
        }
        operator delete(v4);
        uint64_t v4 = v16;
      }
      while (v16);
    }
    *(void *)(a1 + 16) = 0;
    uint64_t v5 = *(void *)(a1 + 8);
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
  uint64_t v7 = *a2;
  *a2 = 0;
  unint64_t v8 = *(void **)a1;
  *(void *)a1 = v7;
  if (v8) {
    operator delete(v8);
  }
  uint64_t v11 = a2[2];
  uint64_t v10 = a2 + 2;
  uint64_t v9 = v11;
  uint64_t v12 = *(v10 - 1);
  *(void *)(a1 + 16) = v11;
  *(void *)(a1 + 8) = v12;
  *(v10 - 1) = 0;
  uint64_t v13 = v10[1];
  *(void *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 32) = *((_DWORD *)v10 + 4);
  if (v13)
  {
    unint64_t v14 = *(void *)(v9 + 8);
    unint64_t v15 = *(void *)(a1 + 8);
    if ((v15 & (v15 - 1)) != 0)
    {
      if (v14 >= v15) {
        v14 %= v15;
      }
    }
    else
    {
      v14 &= v15 - 1;
    }
    *(void *)(*(void *)a1 + 8 * v14) = a1 + 16;
    *uint64_t v10 = 0;
    v10[1] = 0;
  }
}

void sub_25512F304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2) == 2)
  {
    sub_2550EA488(a2, (uint64_t)v17);
    char v14 = 4;
    strcpy((char *)__p, "name");
    unint64_t v19 = __p;
    uint64_t v5 = sub_2550EEBE8((uint64_t)v17, (uint64_t)__p, (uint64_t)&unk_25513EFB0, (long long **)&v19);
    if (*((_DWORD *)v5 + 16) != 2) {
      sub_2550EE418();
    }
    if ((char)v5[63] < 0)
    {
      sub_2550EABB0(__dst, *((void **)v5 + 5), *((void *)v5 + 6));
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)(v5 + 40);
      uint64_t v16 = *((void *)v5 + 7);
    }
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    char v14 = 4;
    strcpy((char *)__p, "slot");
    unint64_t v19 = __p;
    uint64_t v6 = sub_2550EEBE8((uint64_t)v17, (uint64_t)__p, (uint64_t)&unk_25513EFB0, (long long **)&v19);
    if (*((_DWORD *)v6 + 16)) {
      sub_2550EE418();
    }
    uint64_t v7 = *((void *)v6 + 5);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v8 = (uint64_t)(*(void *)(a3 + 280) - *(void *)(a3 + 272)) >> 4;
    if (v7 + 1 > v8) {
      sub_25512F58C((char **)(a3 + 272), v7 + 1 - v8);
    }
    if (SHIBYTE(v16) < 0)
    {
      operator delete(__dst[0]);
      uint64_t v9 = (void **)v18;
      if (!v18) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v9 = (void **)v18;
      if (!v18)
      {
LABEL_23:
        uint64_t v12 = v17[0];
        v17[0] = 0;
        if (v12) {
          operator delete(v12);
        }
        return;
      }
    }
    do
    {
      uint64_t v10 = (void **)*v9;
      uint64_t v11 = *((unsigned int *)v9 + 16);
      if (v11 != -1) {
        ((void (*)(void **, void **))off_270445770[v11])(__dst, v9 + 5);
      }
      *((_DWORD *)v9 + 16) = -1;
      if (*((char *)v9 + 39) < 0) {
        operator delete(v9[2]);
      }
      operator delete(v9);
      uint64_t v9 = v10;
    }
    while (v10);
    goto LABEL_23;
  }
}

void sub_25512F50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2550EB130((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_25512F564()
{
  uint64_t v0 = (void *)nullsub_34();
  j__free(v0);
}

void sub_25512F58C(char **a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      uint64_t v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    uint64_t v6 = *a1;
    uint64_t v7 = (v5 - *a1) >> 4;
    unint64_t v8 = v7 + a2;
    if ((v7 + a2) >> 60) {
      sub_2550EAEEC();
    }
    uint64_t v9 = v4 - v6;
    if (v9 >> 3 > v8) {
      unint64_t v8 = v9 >> 3;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v10)
    {
      if (v10 >> 60) {
        sub_2550EACF8();
      }
      uint64_t v11 = (char *)operator new(16 * v10);
    }
    else
    {
      uint64_t v11 = 0;
    }
    uint64_t v13 = &v11[16 * v7];
    size_t v14 = 16 * a2;
    unint64_t v15 = &v11[16 * v10];
    bzero(v13, v14);
    uint64_t v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      uint64_t v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t sub_25512F6C8(uint64_t *a1)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  v11[0] = &unk_270445210;
  v11[1] = sub_25512FAF4;
  uint64_t v12 = v11;
  sub_255112BE4(a1, 0, 0, 6, 0, 0, v11);
  if (v12 == v11)
  {
    (*(void (**)(void *))(v11[0] + 32))(v11);
  }
  else if (v12)
  {
    (*(void (**)(void *))(*v12 + 40))(v12);
  }
  v9[0] = &unk_270445210;
  v9[1] = sub_25513045C;
  unint64_t v10 = v9;
  sub_255112BE4(a1, 0, 0, 9, 0, 0, v9);
  if (v10 == v9)
  {
    (*(void (**)(void *))(v9[0] + 32))(v9);
  }
  else if (v10)
  {
    (*(void (**)(void *))(*v10 + 40))(v10);
  }
  v7[0] = &unk_270445210;
  v7[1] = sub_255130984;
  unint64_t v8 = v7;
  sub_255112BE4(a1, 0, 0, 7, 0, 0, v7);
  if (v8 == v7)
  {
    (*(void (**)(void *))(v7[0] + 32))(v7);
  }
  else if (v8)
  {
    (*(void (**)(void))(*v8 + 40))();
  }
  v5[0] = &unk_270445210;
  v5[1] = sub_255130C20;
  uint64_t v6 = v5;
  sub_255112BE4(a1, 0, 0, 10, 0, 0, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  v3[0] = &unk_270445210;
  v3[1] = sub_255130D00;
  uint64_t v4 = v3;
  sub_255112BE4(a1, 0, 0, 8, 0, 0, v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_25512FAB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

uint64_t sub_25512FAF4(void **a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  v78[19] = *MEMORY[0x263EF8340];
  HIBYTE(v66) = 4;
  strcpy((char *)__p, "filt");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)in);
  if (v70) {
    sub_2550EE418();
  }
  unint64_t v10 = in[0];
  int v70 = -1;
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v11 = *(void *)(a3 + 224);
  HIBYTE(v66) = 10;
  strcpy((char *)__p, "batch_size");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)in);
  if (v70) {
    sub_2550EE418();
  }
  uint64_t v12 = in[0];
  int v70 = -1;
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(v66) = 4;
  strcpy((char *)__p, "kind");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)in);
  if (v70 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)uint64_t v63 = *(_OWORD *)in;
  uint64_t v64 = v69;
  in[1] = 0;
  uint64_t v69 = 0;
  in[0] = 0;
  int v70 = -1;
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v13 = (void *)HIBYTE(v64);
  if (v64 < 0) {
    uint64_t v13 = v63[1];
  }
  if (v13 != (void *)10)
  {
    if (v13 == (void *)15)
    {
      size_t v14 = v63;
      if (v64 < 0) {
        size_t v14 = (void **)v63[0];
      }
      unint64_t v15 = *v14;
      uint64_t v16 = *(uint64_t *)((char *)v14 + 7);
      BOOL v17 = v15 == (void *)0x73616364616F7242 && v16 == 0x6C754D74614D7473;
      uint64_t v18 = *a5;
      if (v17)
      {
        filter = *(void **)(v11 + 8 * (void)v10);
        unint64_t v19 = (const void *)(*(uint64_t (**)(void))(*(void *)*v18 + 176))();
        size_t v20 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
        uint64_t v21 = (const void *)(*(uint64_t (**)(void))(*(void *)(*a5)[1] + 176))((*a5)[1]);
        size_t v22 = (*(uint64_t (**)(void))(*(void *)(*a5)[1] + 120))((*a5)[1]);
        uint64_t v23 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
        size_t v24 = (*(uint64_t (**)(void))(*(void *)**a1 + 120))(**a1);
        int v25 = BNNSFilterApplyTwoInputBatch(filter, (size_t)v12, v19, v20, v21, v22, v23, v24);
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v18 = *a5;
    }
    goto LABEL_34;
  }
  unint64_t v26 = v63;
  if (v64 < 0) {
    unint64_t v26 = (void **)v63[0];
  }
  float v27 = *v26;
  int v28 = *((unsigned __int16 *)v26 + 4);
  BOOL v29 = v27 == (void *)0x74656D6874697241 && v28 == 25449;
  uint64_t v18 = *a5;
  if (!v29)
  {
LABEL_34:
    int8x8_t v32 = *(void **)(v11 + 8 * (void)v10);
    unint64_t v33 = (const void *)(*(uint64_t (**)(void))(*(void *)*v18 + 176))();
    size_t v34 = (*(uint64_t (**)(void))(*(void *)**a5 + 120))(**a5);
    uint8x8_t v35 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
    size_t v36 = (*(uint64_t (**)(void))(*(void *)**a1 + 120))(**a1);
    int v25 = BNNSFilterApplyBatch(v32, (size_t)v12, v33, v34, v35, v36);
    goto LABEL_35;
  }
  in[0] = 0;
  in[1] = 0;
  uint64_t v69 = 0;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v66 = 0;
  if (a5[1] == v18)
  {
    size_t v31 = 0;
  }
  else
  {
    size_t v30 = 0;
    do
    {
      in[v30] = (void *)(*(uint64_t (**)(void))(*(void *)v18[v30] + 176))(v18[v30]);
      __p[v30] = (void *)(*(uint64_t (**)(void))(*(void *)(*a5)[v30] + 120))((*a5)[v30]);
      ++v30;
      uint64_t v18 = *a5;
      size_t v31 = a5[1] - *a5;
    }
    while (v30 < v31);
  }
  uint64_t v55 = *(void **)(v11 + 8 * (void)v10);
  uint64_t v56 = (void *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  size_t v57 = (*(uint64_t (**)(void))(*(void *)**a1 + 120))(**a1);
  int v25 = BNNSArithmeticFilterApplyBatch(v55, (size_t)v12, v31, (const void **)in, (const size_t *)__p, v56, v57);
LABEL_35:
  if (v25)
  {
    sub_2551080CC((uint64_t)in);
    char v60 = 4;
    strcpy((char *)v59, "name");
    sub_25512974C(a4, (uint64_t)v59, (uint64_t)__p);
    if (v67 != 2) {
      sub_2550EE418();
    }
    *(_OWORD *)long long v61 = *(_OWORD *)__p;
    int64_t v62 = v66;
    __p[1] = 0;
    unint64_t v66 = 0;
    __p[0] = 0;
    int v67 = -1;
    if (v60 < 0) {
      operator delete(v59[0]);
    }
    if (v64 >= 0) {
      int v37 = v63;
    }
    else {
      int v37 = (void **)v63[0];
    }
    if (v64 >= 0) {
      uint64_t v38 = HIBYTE(v64);
    }
    else {
      uint64_t v38 = (uint64_t)v63[1];
    }
    long long v39 = sub_2551084AC(in, (uint64_t)v37, v38);
    uint64_t v40 = sub_2551084AC(v39, (uint64_t)" '", 2);
    if (v62 >= 0) {
      char v41 = v61;
    }
    else {
      char v41 = (void **)v61[0];
    }
    if (v62 >= 0) {
      uint64_t v42 = HIBYTE(v62);
    }
    else {
      uint64_t v42 = (uint64_t)v61[1];
    }
    char v43 = sub_2551084AC(v40, (uint64_t)v41, v42);
    sub_2551084AC(v43, (uint64_t)"' failed (code ", 15);
    int v44 = (void *)std::ostream::operator<<();
    sub_2551084AC(v44, (uint64_t)").", 2);
    unint64_t v45 = *(void **)(a3 + 32);
    if ((v77 & 0x10) != 0)
    {
      unint64_t v49 = v76;
      if (v76 < v73)
      {
        unint64_t v76 = v73;
        unint64_t v49 = v73;
      }
      int v50 = (const void **)&v72;
    }
    else
    {
      if ((v77 & 8) == 0)
      {
        size_t v46 = 0;
        HIBYTE(v66) = 0;
        int v47 = __p;
        goto LABEL_68;
      }
      int v50 = (const void **)&v70;
      unint64_t v49 = v71;
    }
    long long v51 = *v50;
    size_t v46 = v49 - (void)*v50;
    if (v46 >= 0x7FFFFFFFFFFFFFF8) {
      sub_2550EAC50();
    }
    if (v46 >= 0x17)
    {
      uint64_t v52 = (v46 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v46 | 7) != 0x17) {
        uint64_t v52 = v46 | 7;
      }
      uint64_t v53 = v52 + 1;
      int v47 = operator new(v52 + 1);
      __p[1] = (void *)v46;
      unint64_t v66 = v53 | 0x8000000000000000;
      __p[0] = v47;
    }
    else
    {
      HIBYTE(v66) = v49 - *(unsigned char *)v50;
      int v47 = __p;
      if (!v46)
      {
LABEL_68:
        *((unsigned char *)v47 + v46) = 0;
        sub_25513A900(v45, 2, (uint64_t)__p);
        if (SHIBYTE(v66) < 0)
        {
          operator delete(__p[0]);
          if ((SHIBYTE(v62) & 0x80000000) == 0) {
            goto LABEL_70;
          }
        }
        else if ((SHIBYTE(v62) & 0x80000000) == 0)
        {
          goto LABEL_70;
        }
        operator delete(v61[0]);
LABEL_70:
        in[0] = *(void **)MEMORY[0x263F8C2C8];
        *(void **)((char *)in + *((void *)in[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
        in[1] = (void *)(MEMORY[0x263F8C318] + 16);
        if (v75 < 0) {
          operator delete(v74);
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x25A288660](v78);
        uint64_t v48 = 0;
        if (SHIBYTE(v64) < 0) {
          goto LABEL_73;
        }
        return v48;
      }
    }
    memmove(v47, v51, v46);
    goto LABEL_68;
  }
  uint64_t v48 = a2 + 1;
  if (SHIBYTE(v64) < 0) {
LABEL_73:
  }
    operator delete(v63[0]);
  return v48;
}

void sub_2551303A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,char a38)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_25513045C(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  HIBYTE(v41) = 6;
  strcpy((char *)__p, "cindex");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v42);
  if (v43) {
    sub_2550EE418();
  }
  int v43 = -1;
  if (SHIBYTE(v41) < 0) {
    operator delete(__p[0]);
  }
  char v39 = 4;
  strcpy((char *)v38, "func");
  sub_25512974C(a4, (uint64_t)v38, (uint64_t)v42);
  if (v43 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)long long __p = *(_OWORD *)v42;
  char v41 = v42[2];
  memset(v42, 0, sizeof(v42));
  int v43 = -1;
  if (v39 < 0) {
    operator delete(v38[0]);
  }
  uint64_t v11 = *a5;
  uint64_t v10 = a5[1];
  uint64_t v12 = a1[1] - *a1;
  unint64_t v13 = (v10 - *a5) >> 3;
  if ((*(uint64_t (**)(void))(*(void *)**a1 + 128))(**a1) >= 16 * (v13 + v12 - 1))
  {
    uint64_t v36 = a3;
    uint64_t v37 = a2;
    uint64_t v15 = (*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
    uint64_t v16 = v15;
    if (v12 != 1)
    {
      BOOL v17 = (void *)(v15 + 8);
      for (uint64_t i = 1; i != v12; ++i)
      {
        *(v17 - 1) = sub_25513D048((*a1)[i]);
        void *v17 = *(void *)(*(uint64_t (**)(void))(*(void *)(*a1)[i] + 40))((*a1)[i]);
        v17 += 2;
      }
    }
    if (v10 != v11)
    {
      uint64_t v19 = 0;
      if (v13 <= 1) {
        unint64_t v13 = 1;
      }
      size_t v20 = (void *)(v16 + 16 * v12 - 8);
      do
      {
        *(v20 - 1) = sub_25513D048(*(void *)(*a5 + 8 * v19));
        *size_t v20 = *(void *)(*(uint64_t (**)(void))(**(void **)(*a5 + 8 * v19) + 40))(*(void *)(*a5 + 8 * v19));
        v20 += 2;
        ++v19;
      }
      while (v13 != v19);
    }
    if ((BNNSGraphContextSetDynamicShapes_v2() & 0x80000000) == 0)
    {
      uint64_t v21 = *a1;
      size_t v22 = a1[1];
      if (*a1 != v22)
      {
        do
        {
          uint64_t v23 = *v21;
          size_t v24 = (uint64_t *)(*(uint64_t (**)(void))(*(void *)*v21 + 48))(*v21);
          int v25 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v23 + 40))(v23);
          uint64_t v26 = *v24;
          uint64_t v27 = (v24[1] - *v24) >> 3;
          *(void *)(*v24 + 8 * (v27 - 1)) = 1;
          if (v27 != 1)
          {
            uint64_t v28 = v26 - 16;
            uint64_t v29 = *v25 - 8;
            uint64_t v30 = 1;
            do
            {
              v30 *= *(void *)(v29 + 8 * v27);
              *(void *)(v28 + 8 * v27--) = v30;
            }
            while (v27 != 1);
          }
          ++v21;
        }
        while (v21 != v22);
        size_t v31 = *a1;
        for (j = a1[1]; v31 != j; ++v31)
          (*(void (**)(void))(*(void *)*v31 + 136))();
      }
      uint64_t v33 = v37 + 1;
      if (SHIBYTE(v41) < 0) {
        goto LABEL_33;
      }
      return v33;
    }
    size_t v34 = *(void **)(v36 + 32);
    v42[0] = operator new(0x38uLL);
    *(_OWORD *)&v42[1] = xmmword_25513EEC0;
    strcpy((char *)v42[0], "BNNSGraphContextSetDynamicShapes returned an error");
    sub_25513A900(v34, 2, (uint64_t)v42);
  }
  else
  {
    size_t v14 = *(void **)(a3 + 32);
    v42[0] = operator new(0x88uLL);
    *(_OWORD *)&v42[1] = xmmword_25513EED0;
    strcpy((char *)v42[0], "Not enough memory allocated for BNNS shape inference args. This is likely a compiler bug, please file a radar against MLCompiler|all.");
    sub_25513A900(v14, 0xFFFF, (uint64_t)v42);
  }
  if (SHIBYTE(v42[2]) < 0) {
    operator delete(v42[0]);
  }
  uint64_t v33 = 0;
  if (SHIBYTE(v41) < 0) {
LABEL_33:
  }
    operator delete(__p[0]);
  return v33;
}

void sub_2551308F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255130984(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  HIBYTE(v19) = 6;
  strcpy((char *)__p, "cindex");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v20);
  if (v22) {
    sub_2550EE418();
  }
  uint64_t v7 = v20[0];
  int v22 = -1;
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  char v17 = 5;
  strcpy((char *)v16, "graph");
  sub_25512974C(a4, (uint64_t)v16, (uint64_t)v20);
  if (v22 != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)long long __p = *(_OWORD *)v20;
  uint64_t v19 = v21;
  v20[1] = 0;
  uint64_t v21 = 0;
  v20[0] = 0;
  int v22 = -1;
  if (v17 < 0) {
    operator delete(v16[0]);
  }
  sub_25512298C(a3, (uint64_t)__p, (uint64_t *)v20);
  if (v20[1])
  {
    unint64_t v8 = std::__shared_weak_count::lock(v20[1]);
    v16[1] = v8;
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = v20[0];
      v16[0] = v20[0];
      if (v20[0])
      {
        ((void (*)(std::__shared_weak_count *))v20[0]->__vftable[4].~__shared_weak_count_0)(v20[0]);
        ((void (*)(std::__shared_weak_count *))v10->__vftable[3].~__shared_weak_count_0)(v10);
        uint64_t v11 = BNNSGraphContextMake();
        uint64_t v12 = (uint64_t *)(*(void *)(a3 + 272) + 16 * (void)v7);
        *uint64_t v12 = v11;
        v12[1] = v13;
        uint64_t v14 = a2 + 1;
      }
      else
      {
        uint64_t v14 = 0;
      }
      if (!atomic_fetch_add(&v9->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    if (v20[1]) {
      std::__shared_weak_count::__release_weak(v20[1]);
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  return v14;
}

void sub_255130BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_255130C20(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v10 = 6;
  strcpy((char *)__p, "cindex");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v11);
  if (v12) {
    sub_2550EE418();
  }
  uint64_t v6 = v11[0];
  int v12 = -1;
  if (v10 < 0) {
    operator delete(__p[0]);
  }
  BNNSGraphContextDestroy_v2();
  uint64_t v7 = (void *)(*(void *)(a3 + 272) + 16 * v6);
  uint64_t result = a2 + 1;
  void *v7 = 0;
  v7[1] = 0;
  return result;
}

void sub_255130CD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_255130D00(void **a1, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  HIBYTE(v48) = 6;
  strcpy((char *)&__dst, "cindex");
  sub_25512974C(a4, (uint64_t)&__dst, (uint64_t)v37);
  if (v38) {
    sub_2550EE418();
  }
  int v38 = -1;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)__dst);
  }
  HIBYTE(v48) = 14;
  strcpy((char *)&__dst, "workspace_size");
  sub_25512974C(a4, (uint64_t)&__dst, (uint64_t)v37);
  if (v38) {
    sub_2550EE418();
  }
  uint64_t v10 = v37[0];
  int v38 = -1;
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v36 = a2;
  if (v10 >= 1) {
    (*(void (**)(void))(*(void *)**a1 + 168))(**a1);
  }
  unint64_t v11 = v10 != 0;
  uint64_t v12 = (uint64_t)*a1;
  if (v11 >= a1[1] - *a1)
  {
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    do
    {
      uint64_t v15 = *(void *)(v12 + 8 * v11);
      uint64_t v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 168))(v15);
      uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 128))(v15);
      ++v14;
      uint64_t v18 = (uint64_t *)(*(void *)(a3 + 248) + v13);
      uint64_t *v18 = v16;
      v18[1] = v17;
      ++v11;
      uint64_t v12 = (uint64_t)*a1;
      v13 += 16;
    }
    while (v11 < a1[1] - *a1);
  }
  uint64_t v19 = *a5;
  if ((unint64_t)(a5[1] - *a5) >= 9)
  {
    uint64_t v20 = 16 * v14;
    unint64_t v21 = 1;
    do
    {
      uint64_t v22 = *(void *)(v19 + 8 * v21);
      uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 176))(v22);
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 128))(v22);
      int v25 = (uint64_t *)(*(void *)(a3 + 248) + v20);
      *int v25 = v23;
      v25[1] = v24;
      ++v21;
      uint64_t v19 = *a5;
      v20 += 16;
    }
    while (v21 < (a5[1] - *a5) >> 3);
  }
  if (!BNNSGraphContextExecute_v2()) {
    return v36 + 1;
  }
  sub_2551080CC((uint64_t)v37);
  sub_2551084AC(v37, (uint64_t)"BNNSGraphExecute failed (code ", 30);
  uint64_t v26 = (void *)std::ostream::operator<<();
  sub_2551084AC(v26, (uint64_t)")", 1);
  uint64_t v27 = *(void **)(a3 + 32);
  if ((v45 & 0x10) != 0)
  {
    unint64_t v31 = v44;
    if (v44 < v41)
    {
      unint64_t v44 = v41;
      unint64_t v31 = v41;
    }
    int8x8_t v32 = (const void **)&v40;
  }
  else
  {
    if ((v45 & 8) == 0)
    {
      size_t v28 = 0;
      HIBYTE(v48) = 0;
      p_dst = &__dst;
      goto LABEL_34;
    }
    int8x8_t v32 = (const void **)&v38;
    unint64_t v31 = v39;
  }
  uint64_t v33 = *v32;
  size_t v28 = v31 - (void)*v32;
  if (v28 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v28 >= 0x17)
  {
    uint64_t v34 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v28 | 7) != 0x17) {
      uint64_t v34 = v28 | 7;
    }
    uint64_t v35 = v34 + 1;
    p_dst = (long long *)operator new(v34 + 1);
    *((void *)&__dst + 1) = v28;
    unint64_t v48 = v35 | 0x8000000000000000;
    *(void *)&long long __dst = p_dst;
  }
  else
  {
    HIBYTE(v48) = v31 - *(unsigned char *)v32;
    p_dst = &__dst;
    if (!v28) {
      goto LABEL_34;
    }
  }
  memmove(p_dst, v33, v28);
LABEL_34:
  *((unsigned char *)p_dst + v28) = 0;
  sub_25513A900(v27, 2, (uint64_t)&__dst);
  if (SHIBYTE(v48) < 0) {
    operator delete((void *)__dst);
  }
  v37[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v37 + *(void *)(v37[0] - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  v37[1] = MEMORY[0x263F8C318] + 16;
  if (v43 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x25A288660](&v46);
  return 0;
}

void sub_2551311DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  if (*(char *)(v4 - 89) < 0) {
    operator delete(*(void **)(v4 - 112));
  }
  sub_2551083A8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_255131240(uint64_t a1, uint64_t a2)
{
  v69[2] = *MEMORY[0x263EF8340];
  BYTE7(v53) = 4;
  uint64_t v3 = (void *)(a1 + 8);
  strcpy((char *)__p, "name");
  sub_25512974C((void *)(a1 + 8), (uint64_t)__p, (uint64_t)&v56);
  if (LODWORD(v57[0]) != 2) {
    sub_2550EE418();
  }
  uint64_t v4 = (void *)v56.__r_.__value_.__r.__words[0];
  int v5 = SHIBYTE(v56.__r_.__value_.__r.__words[2]);
  memset(&v56, 0, sizeof(v56));
  LODWORD(v57[0]) = -1;
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v53) = 4;
  strcpy((char *)__p, "kind");
  sub_25512974C(v3, (uint64_t)__p, (uint64_t)&v56);
  if (LODWORD(v57[0]) != 2) {
    sub_2550EE418();
  }
  std::string v55 = v56;
  memset(&v56, 0, sizeof(v56));
  LODWORD(v57[0]) = -1;
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  *((unsigned char *)&v56.__r_.__value_.__s + 23) = 10;
  strcpy((char *)&v56, "Activation");
  v57[0] = &unk_2704457D0;
  v57[1] = sub_255131E50;
  v57[3] = v57;
  v58[23] = 15;
  strcpy(v58, "BroadcastMatMul");
  v59[0] = &unk_2704457D0;
  v59[1] = sub_255132484;
  v60[23] = 11;
  v59[3] = v59;
  strcpy(v60, "Convolution");
  v61[0] = &unk_2704457D0;
  v61[1] = sub_255132EC4;
  v61[3] = v61;
  v62[23] = 14;
  strcpy(v62, "FullyConnected");
  v63[0] = &unk_2704457D0;
  v63[1] = sub_255133BFC;
  v63[3] = v63;
  v64[23] = 7;
  strcpy(v64, "Permute");
  v65[0] = &unk_2704457D0;
  v65[1] = sub_2551343A8;
  char v67 = 10;
  v65[3] = v65;
  strcpy(v66, "Arithmetic");
  v68[0] = &unk_2704457D0;
  v68[1] = sub_255134818;
  v69[0] = v68;
  *(_OWORD *)long long __p = 0u;
  long long v53 = 0u;
  int v54 = 1065353216;
  sub_255136998((uint64_t)__p, (uint64_t)&v56, (uint64_t)&v56);
  sub_255136998((uint64_t)__p, (uint64_t)v58, (uint64_t)v58);
  sub_255136998((uint64_t)__p, (uint64_t)v60, (uint64_t)v60);
  sub_255136998((uint64_t)__p, (uint64_t)v62, (uint64_t)v62);
  sub_255136998((uint64_t)__p, (uint64_t)v64, (uint64_t)v64);
  sub_255136998((uint64_t)__p, (uint64_t)v66, (uint64_t)v66);
  for (uint64_t i = 0; i != -42; i -= 7)
  {
    uint64_t v7 = (void *)v69[i];
    if (&v68[i] == v7)
    {
      (*(void (**)(void *))(v68[i] + 32))(&v68[i]);
    }
    else if (v7)
    {
      (*(void (**)(void *))(*v7 + 40))(v7);
    }
    if (*(&v67 + i * 8) < 0) {
      operator delete(*(void **)&v66[i * 8]);
    }
  }
  unint64_t v8 = sub_255136FCC(__p, (uint64_t)&v55);
  if (v8)
  {
    sub_2550ECD5C((uint64_t)&v56, (uint64_t)v3);
    uint64_t v9 = v8[8];
    if (!v9) {
      sub_2550FE96C();
    }
    uint64_t v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(void *)v9 + 48))(v9, &v56, a2);
    unint64_t v11 = (void **)v56.__r_.__value_.__r.__words[2];
    if (v56.__r_.__value_.__r.__words[2])
    {
      do
      {
        uint64_t v12 = (void **)*v11;
        uint64_t v13 = *((unsigned int *)v11 + 16);
        if (v13 != -1) {
          ((void (*)(std::string *, void **))off_270445798[v13])(&v51, v11 + 5);
        }
        *((_DWORD *)v11 + 16) = -1;
        if (*((char *)v11 + 39) < 0) {
          operator delete(v11[2]);
        }
        operator delete(v11);
        unint64_t v11 = v12;
      }
      while (v12);
    }
    uint64_t v14 = (void *)v56.__r_.__value_.__r.__words[0];
    v56.__r_.__value_.__r.__words[0] = 0;
    if (v14) {
      operator delete(v14);
    }
    uint64_t v15 = (uint64_t **)v53;
    if (!(void)v53) {
      goto LABEL_101;
    }
LABEL_113:
    while (1)
    {
      int v45 = *v15;
      uint64_t v46 = v15[8];
      if (v46 != (uint64_t *)(v15 + 5)) {
        break;
      }
      ((void (*)(uint64_t *))v15[5][4])((uint64_t *)v15 + 5);
      if (*((char *)v15 + 39) < 0) {
        goto LABEL_117;
      }
LABEL_112:
      operator delete(v15);
      uint64_t v15 = (uint64_t **)v45;
      if (!v45) {
        goto LABEL_101;
      }
    }
    if (v46) {
      (*(void (**)(uint64_t *))(*v46 + 40))(v46);
    }
    if ((*((char *)v15 + 39) & 0x80000000) == 0) {
      goto LABEL_112;
    }
LABEL_117:
    operator delete(v15[2]);
    goto LABEL_112;
  }
  *((unsigned char *)&v50.__r_.__value_.__s + 23) = 4;
  strcpy((char *)&v50, "name");
  int v47 = v4;
  int v48 = v5;
  sub_25512974C(v3, (uint64_t)&v50, (uint64_t)&v56);
  if (LODWORD(v57[0]) != 2) {
    sub_2550EE418();
  }
  std::string v51 = v56;
  memset(&v56, 0, sizeof(v56));
  LODWORD(v57[0]) = -1;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  size_t v16 = 0x7FFFFFFFFFFFFFF7;
  int v17 = SHIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t size = v51.__r_.__value_.__l.__size_;
  }
  size_t v19 = size + 23;
  if (size + 23 > 0x7FFFFFFFFFFFFFF7) {
    sub_2550EAC50();
  }
  uint64_t v20 = *(void **)(a2 + 32);
  if (size >= 0xFFFFFFFFFFFFFFE9)
  {
    memset(&__dst, 0, sizeof(__dst));
    p_dst = &__dst;
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = size + 23;
LABEL_40:
    if (v17 >= 0) {
      uint64_t v24 = &v51;
    }
    else {
      uint64_t v24 = (std::string *)v51.__r_.__value_.__r.__words[0];
    }
    memmove(p_dst, v24, size);
    goto LABEL_44;
  }
  uint64_t v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v19 | 7) != 0x17) {
    uint64_t v22 = v19 | 7;
  }
  uint64_t v23 = v22 + 1;
  p_dst = (std::string *)operator new(v22 + 1);
  __dst.__r_.__value_.__l.__size_ = size + 23;
  __dst.__r_.__value_.__r.__words[2] = v23 | 0x8000000000000000;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  if (size) {
    goto LABEL_40;
  }
LABEL_44:
  strcpy((char *)p_dst + size, ": unknown filter type '");
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v25 = &v55;
  }
  else {
    int v25 = (std::string *)v55.__r_.__value_.__r.__words[0];
  }
  if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v26 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v26 = v55.__r_.__value_.__l.__size_;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v27 = 22;
  }
  else {
    std::string::size_type v27 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v28 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v28 = __dst.__r_.__value_.__l.__size_;
  }
  int v5 = v48;
  if (v27 - v28 >= v26)
  {
    if (v26)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v29 = &__dst;
      }
      else {
        uint64_t v29 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      memmove((char *)v29 + v28, v25, v26);
      std::string::size_type v30 = v28 + v26;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        __dst.__r_.__value_.__l.__size_ = v28 + v26;
      }
      else {
        *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v30 & 0x7F;
      }
      v29->__r_.__value_.__s.__data_[v30] = 0;
    }
  }
  else
  {
    std::string::__grow_by_and_replace(&__dst, v27, v28 + v26 - v27, v28, v28, 0, v26, (const std::string::value_type *)v25);
  }
  std::string v50 = __dst;
  memset(&__dst, 0, sizeof(__dst));
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v31 = 22;
  }
  else {
    std::string::size_type v31 = (v50.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
  }
  if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v32 = HIBYTE(v50.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v32 = v50.__r_.__value_.__l.__size_;
  }
  if (v31 - v32 >= 2)
  {
    uint64_t v36 = &v50;
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v36 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    *(_WORD *)((char *)&v36->__r_.__value_.__l.__data_ + v32) = 11815;
    size_t v37 = v32 + 2;
    uint64_t v4 = v47;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      v50.__r_.__value_.__l.__size_ = v32 + 2;
    }
    else {
      *((unsigned char *)&v50.__r_.__value_.__s + 23) = v37 & 0x7F;
    }
    int v38 = (char *)v36 + v37;
  }
  else
  {
    unint64_t v33 = v32 + 2;
    if (0x7FFFFFFFFFFFFFF6 - v31 < v32 + 2 - v31) {
      sub_2550EAC50();
    }
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v34 = &v50;
    }
    else {
      uint64_t v34 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v31 <= 0x3FFFFFFFFFFFFFF2)
    {
      unint64_t v35 = 2 * v31;
      if (v33 > 2 * v31) {
        unint64_t v35 = v32 + 2;
      }
      if (v35 >= 0x17)
      {
        unint64_t v39 = (v35 & 0xFFFFFFFFFFFFFFF8) + 8;
        uint64_t v40 = v35 | 7;
        if (v40 == 23) {
          uint64_t v40 = v39;
        }
        size_t v16 = v40 + 1;
      }
      else
      {
        size_t v16 = 23;
      }
    }
    unint64_t v41 = operator new(v16);
    std::string::size_type v42 = (std::string::size_type)v41;
    if (v32) {
      memmove(v41, v34, v32);
    }
    *(_WORD *)(v42 + v32) = 11815;
    if (v31 != 22) {
      operator delete(v34);
    }
    v50.__r_.__value_.__l.__size_ = v32 + 2;
    v50.__r_.__value_.__r.__words[2] = v16 | 0x8000000000000000;
    v50.__r_.__value_.__r.__words[0] = v42;
    int v38 = (unsigned char *)(v42 + v33);
    uint64_t v4 = v47;
    int v5 = v48;
  }
  *int v38 = 0;
  std::string v56 = v50;
  memset(&v50, 0, sizeof(v50));
  sub_25513A900(v20, 5, (uint64_t)&v56);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v56.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_98:
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_99;
      }
LABEL_120:
      operator delete(__dst.__r_.__value_.__l.__data_);
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_100;
      }
      goto LABEL_121;
    }
  }
  else if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_98;
  }
  operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_120;
  }
LABEL_99:
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_100;
  }
LABEL_121:
  operator delete(v51.__r_.__value_.__l.__data_);
LABEL_100:
  uint64_t v10 = 0;
  uint64_t v15 = (uint64_t **)v53;
  if ((void)v53) {
    goto LABEL_113;
  }
LABEL_101:
  char v43 = __p[0];
  __p[0] = 0;
  if (v43) {
    operator delete(v43);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  BYTE7(v53) = 4;
  strcpy((char *)__p, "slot");
  sub_25512974C(v3, (uint64_t)__p, (uint64_t)&v56);
  if (LODWORD(v57[0])) {
    sub_2550EE418();
  }
  std::string::size_type v44 = v56.__r_.__value_.__r.__words[0];
  LODWORD(v57[0]) = -1;
  if (SBYTE7(v53) < 0) {
    operator delete(__p[0]);
  }
  *(void *)(*(void *)(a2 + 224) + 8 * v44) = v10;
  if (v5 < 0) {
    operator delete(v4);
  }
}

void sub_255131C94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, int a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if ((v51 & 0x80000000) == 0) {
      goto LABEL_6;
    }
  }
  else if ((v51 & 0x80000000) == 0)
  {
LABEL_6:
    sub_255136EF4((uint64_t)&a30);
    if (a44 < 0) {
      operator delete(a39);
    }
    if (a12 < 0)
    {
      operator delete(a10);
      _Unwind_Resume(a1);
    }
    _Unwind_Resume(a1);
  }
  operator delete(a26);
  goto LABEL_6;
}

uint64_t sub_255131E50(void *a1, uint64_t a2)
{
  uint64_t v69 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  long long v61 = 0u;
  long long v62 = 0u;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v44 = 0u;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "inputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v40);
  sub_2551354A4((uint64_t)v40, a2, (uint64_t **)&v42);
  if (v41 != -1) {
    ((void (*)(void **, unsigned char *))off_270445798[v41])(&v38, v40);
  }
  int v41 = -1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "outputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v36);
  sub_2551354A4((uint64_t)v36, a2, (uint64_t **)&v38);
  if (v37 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v37])(v35, v36);
  }
  int v37 = -1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  if (v43 - (unsigned char *)v42 == 8)
  {
    if (v39 - (unsigned char *)v38 == 8)
    {
      uint64_t v4 = (long long *)sub_25512AAF0(*(void *)v42);
      long long v5 = *v4;
      long long v6 = v4[2];
      long long v45 = v4[1];
      long long v46 = v6;
      long long v44 = v5;
      long long v7 = v4[3];
      long long v8 = v4[4];
      long long v9 = v4[6];
      long long v49 = v4[5];
      long long v50 = v9;
      long long v47 = v7;
      long long v48 = v8;
      long long v10 = v4[7];
      long long v11 = v4[8];
      long long v12 = v4[10];
      long long v53 = v4[9];
      long long v54 = v12;
      long long v51 = v10;
      long long v52 = v11;
      uint64_t v13 = (long long *)sub_25512AAF0(*(void *)v38);
      long long v14 = *v13;
      long long v15 = v13[2];
      long long v56 = v13[1];
      long long v57 = v15;
      long long v55 = v14;
      long long v16 = v13[3];
      long long v17 = v13[4];
      long long v18 = v13[6];
      long long v60 = v13[5];
      long long v61 = v18;
      long long v58 = v16;
      long long v59 = v17;
      long long v19 = v13[7];
      long long v20 = v13[8];
      long long v21 = v13[10];
      long long v64 = v13[9];
      long long v65 = v21;
      long long v62 = v19;
      long long v63 = v20;
      char v33 = 3;
      LODWORD(v32[0]) = 7627617;
      sub_25512974C(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 2) {
        sub_2550EE418();
      }
      *(_OWORD *)unint64_t v35 = *(_OWORD *)__p;
      *(void **)&v35[16] = __p[2];
      memset(__p, 0, 24);
      LODWORD(__p[3]) = -1;
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      unsigned int v22 = sub_2551357BC((uint64_t)v35);
      char v33 = 5;
      strcpy((char *)v32, "alpha");
      sub_25512974C(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 1) {
        sub_2550EE418();
      }
      uint64_t v23 = __p[0];
      LODWORD(__p[3]) = -1;
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      char v33 = 4;
      strcpy((char *)v32, "beta");
      sub_25512974C(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3]) != 1) {
        sub_2550EE418();
      }
      float v24 = *(double *)&v23;
      float v25 = *(double *)__p;
      LODWORD(__p[3]) = -1;
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      *(void *)&long long v66 = __PAIR64__(LODWORD(v24), v22);
      *((void *)&v66 + 1) = LODWORD(v25) | 0x100000000;
      long long v67 = 0u;
      long long v68 = 0u;
      char v33 = 4;
      strcpy((char *)v32, "axis");
      sub_25512974C(a1, (uint64_t)v32, (uint64_t)__p);
      if (LODWORD(__p[3])) {
        sub_2550EE418();
      }
      char v26 = (char)__p[0];
      LODWORD(__p[3]) = -1;
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      LODWORD(v69) = 1 << v26;
      if ((v35[23] & 0x80000000) != 0) {
        operator delete(*(void **)v35);
      }
      memset(__p, 0, sizeof(__p));
      LODWORD(__p[0]) = 1;
      __p[1] = *(void **)(a2 + 472);
      uint64_t v27 = MEMORY[0x25A2882E0](&v44, __p);
      if (!v27)
      {
        std::string::size_type v28 = *(void **)(a2 + 32);
        *(void *)unint64_t v35 = operator new(0x20uLL);
        *(_OWORD *)&v35[8] = xmmword_25513EF00;
        strcpy(*(char **)v35, "Error creating BNNSFilter");
        sub_25513A900(v28, 0xFFFF, (uint64_t)v35);
        if ((v35[23] & 0x80000000) != 0) {
          operator delete(*(void **)v35);
        }
      }
      goto LABEL_33;
    }
    std::string::size_type v30 = *(void **)(a2 + 32);
    __p[0] = operator new(0x28uLL);
    *(_OWORD *)&__p[1] = xmmword_25513EEF0;
    strcpy((char *)__p[0], "ICE: activation produces 1 output");
    sub_25513A900(v30, 0xFFFF, (uint64_t)__p);
  }
  else
  {
    uint64_t v29 = *(void **)(a2 + 32);
    __p[0] = operator new(0x20uLL);
    *(_OWORD *)&__p[1] = xmmword_25513EEE0;
    strcpy((char *)__p[0], "ICE: activation takes 1 input");
    sub_25513A900(v29, 0xFFFF, (uint64_t)__p);
  }
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v27 = 0;
LABEL_33:
  if (v38)
  {
    unint64_t v39 = v38;
    operator delete(v38);
  }
  if (v42)
  {
    char v43 = v42;
    operator delete(v42);
  }
  return v27;
}

void sub_255132360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a41) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255132484(void *a1, uint64_t a2)
{
  bzero(&layer_params, 0x220uLL);
  HIBYTE(__p.alloc_memory) = 6;
  strcpy((char *)&__p, "inputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v79);
  sub_2551354A4((uint64_t)v79, a2, (uint64_t **)&v81);
  if (v80 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v80])(v72, v79);
  }
  int v80 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  HIBYTE(__p.alloc_memory) = 7;
  strcpy((char *)&__p, "outputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v75);
  sub_2551354A4((uint64_t)v75, a2, (uint64_t **)&v77);
  if (v76 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v76])(v72, v75);
  }
  int v76 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  if (v82 - (unsigned char *)v81 == 16)
  {
    if (v78 - (unsigned char *)v77 == 8)
    {
      uint64_t v4 = (long long *)sub_25512AAF0(*(void *)v81);
      long long v5 = *v4;
      long long v6 = v4[2];
      *(_OWORD *)&layer_params.iA_desc.size[1] = v4[1];
      *(_OWORD *)&layer_params.iA_desc.size[3] = v6;
      *(_OWORD *)&layer_params.iA_desc.flags = v5;
      long long v7 = v4[3];
      long long v8 = v4[4];
      long long v9 = v4[6];
      *(_OWORD *)&layer_params.iA_desc.stride[1] = v4[5];
      *(_OWORD *)&layer_params.iA_desc.stride[3] = v9;
      *(_OWORD *)&layer_params.iA_desc.size[5] = v7;
      *(_OWORD *)&layer_params.iA_desc.size[7] = v8;
      long long v10 = v4[7];
      long long v11 = v4[8];
      long long v12 = v4[10];
      *(_OWORD *)&layer_params.iA_desc.data_type = v4[9];
      *(_OWORD *)&layer_params.iA_desc.table_data_type = v12;
      *(_OWORD *)&layer_params.iA_desc.stride[5] = v10;
      *(_OWORD *)&layer_params.iA_desc.stride[7] = v11;
      uint64_t v13 = sub_25513D048(*(void *)v81);
      if ((unint64_t)(v13 - 1) < 5) {
        layer_params.iA_desc.layout = dword_25513EF78[v13 - 1];
      }
      uint64_t v14 = sub_25513D048(*(void *)v81);
      if (v14)
      {
        long long v15 = (size_t *)((char *)&layer_params.iA_desc + 8 * v14);
        if (v15 > layer_params.iA_desc.size)
        {
          long long v16 = &layer_params.iA_desc.size[1];
          do
          {
            size_t v17 = *(v16 - 1);
            *(v16 - 1) = *v15;
            *v15-- = v17;
            BOOL v18 = v16++ >= v15;
          }
          while (!v18);
        }
      }
      uint64_t v19 = sub_25513D048(*(void *)v81);
      long long v20 = &layer_params.iA_desc.size[v19 + 7];
      if (v19) {
        BOOL v21 = v20 > layer_params.iA_desc.stride;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        unsigned int v22 = &layer_params.iA_desc.stride[1];
        do
        {
          size_t v23 = *(v22 - 1);
          *(v22 - 1) = *v20;
          *v20-- = v23;
          BOOL v18 = v22++ >= v20;
        }
        while (!v18);
      }
      float v24 = (long long *)sub_25512AAF0(*((void *)v81 + 1));
      long long v25 = *v24;
      long long v26 = v24[2];
      *(_OWORD *)&layer_params.iB_desc.size[1] = v24[1];
      *(_OWORD *)&layer_params.iB_desc.size[3] = v26;
      *(_OWORD *)&layer_params.iB_desc.flags = v25;
      long long v27 = v24[3];
      long long v28 = v24[4];
      long long v29 = v24[6];
      *(_OWORD *)&layer_params.iB_desc.stride[1] = v24[5];
      *(_OWORD *)&layer_params.iB_desc.stride[3] = v29;
      *(_OWORD *)&layer_params.iB_desc.size[5] = v27;
      *(_OWORD *)&layer_params.iB_desc.size[7] = v28;
      long long v30 = v24[7];
      long long v31 = v24[8];
      long long v32 = v24[10];
      *(_OWORD *)&layer_params.iB_desc.data_type = v24[9];
      *(_OWORD *)&layer_params.iB_desc.table_data_type = v32;
      *(_OWORD *)&layer_params.iB_desc.stride[5] = v30;
      *(_OWORD *)&layer_params.iB_desc.stride[7] = v31;
      uint64_t v33 = sub_25513D048(*((void *)v81 + 1));
      if ((unint64_t)(v33 - 1) <= 4) {
        layer_params.iB_desc.layout = dword_25513EF78[v33 - 1];
      }
      uint64_t v34 = sub_25513D048(*((void *)v81 + 1));
      if (v34)
      {
        unint64_t v35 = (size_t *)((char *)&layer_params.iB_desc + 8 * v34);
        if (v35 > layer_params.iB_desc.size)
        {
          uint64_t v36 = &layer_params.iB_desc.size[1];
          do
          {
            size_t v37 = *(v36 - 1);
            *(v36 - 1) = *v35;
            *v35-- = v37;
            BOOL v18 = v36++ >= v35;
          }
          while (!v18);
        }
      }
      uint64_t v38 = sub_25513D048(*((void *)v81 + 1));
      unint64_t v39 = &layer_params.iB_desc.size[v38 + 7];
      if (v38) {
        BOOL v40 = v39 > layer_params.iB_desc.stride;
      }
      else {
        BOOL v40 = 0;
      }
      if (v40)
      {
        int v41 = &layer_params.iB_desc.stride[1];
        do
        {
          size_t v42 = *(v41 - 1);
          *(v41 - 1) = *v39;
          *v39-- = v42;
          BOOL v18 = v41++ >= v39;
        }
        while (!v18);
      }
      char v43 = (long long *)sub_25512AAF0(*(void *)v77);
      long long v44 = *v43;
      long long v45 = v43[2];
      *(_OWORD *)&layer_params.o_desc.size[1] = v43[1];
      *(_OWORD *)&layer_params.o_desc.size[3] = v45;
      *(_OWORD *)&layer_params.o_desc.flags = v44;
      long long v46 = v43[3];
      long long v47 = v43[4];
      long long v48 = v43[6];
      *(_OWORD *)&layer_params.o_desc.stride[1] = v43[5];
      *(_OWORD *)&layer_params.o_desc.stride[3] = v48;
      *(_OWORD *)&layer_params.o_desc.size[5] = v46;
      *(_OWORD *)&layer_params.o_desc.size[7] = v47;
      long long v49 = v43[7];
      long long v50 = v43[8];
      long long v51 = v43[10];
      *(_OWORD *)&layer_params.o_desc.data_type = v43[9];
      *(_OWORD *)&layer_params.o_desc.table_data_type = v51;
      *(_OWORD *)&layer_params.o_desc.stride[5] = v49;
      *(_OWORD *)&layer_params.o_desc.stride[7] = v50;
      uint64_t v52 = sub_25513D048(*(void *)v77);
      if ((unint64_t)(v52 - 1) <= 4) {
        layer_params.o_desc.layout = dword_25513EF78[v52 - 1];
      }
      uint64_t v53 = sub_25513D048(*(void *)v77);
      if (v53)
      {
        long long v54 = (size_t *)((char *)&layer_params.o_desc + 8 * v53);
        if (v54 > layer_params.o_desc.size)
        {
          long long v55 = &layer_params.o_desc.size[1];
          do
          {
            size_t v56 = *(v55 - 1);
            *(v55 - 1) = *v54;
            *v54-- = v56;
            BOOL v18 = v55++ >= v54;
          }
          while (!v18);
        }
      }
      uint64_t v57 = sub_25513D048(*(void *)v77);
      long long v58 = &layer_params.o_desc.size[v57 + 7];
      if (v57) {
        BOOL v59 = v58 > layer_params.o_desc.stride;
      }
      else {
        BOOL v59 = 0;
      }
      if (v59)
      {
        long long v60 = &layer_params.o_desc.stride[1];
        do
        {
          size_t v61 = *(v60 - 1);
          *(v60 - 1) = *v58;
          *v58-- = v61;
          BOOL v18 = v60++ >= v58;
        }
        while (!v18);
      }
      v72[23] = 5;
      strcpy(v72, "alpha");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory) != 1) {
        sub_2550EE418();
      }
      float v62 = *(double *)&__p.flags;
      layer_params.alpha = v62;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 4;
      strcpy(v72, "beta");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory) != 1) {
        sub_2550EE418();
      }
      float v63 = *(double *)&__p.flags;
      layer_params.beta = v63;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 6;
      strcpy(v72, "transA");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory)) {
        sub_2550EE418();
      }
      layer_params.transA = *(void *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 6;
      strcpy(v72, "transB");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory)) {
        sub_2550EE418();
      }
      layer_params.transB = *(void *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 9;
      strcpy(v72, "quadratic");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory)) {
        sub_2550EE418();
      }
      layer_params.quadratic = *(void *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 12;
      strcpy(v72, "a_is_weights");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory)) {
        sub_2550EE418();
      }
      layer_params.a_is_weights = *(void *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      v72[23] = 12;
      strcpy(v72, "b_is_weights");
      sub_25512974C(a1, (uint64_t)v72, (uint64_t)&__p);
      if (LODWORD(__p.free_memory)) {
        sub_2550EE418();
      }
      layer_params.b_is_weights = *(void *)&__p.flags != 0;
      LODWORD(__p.free_memory) = -1;
      if ((v72[23] & 0x80000000) != 0) {
        operator delete(*(void **)v72);
      }
      memset(&__p, 0, sizeof(__p));
      __p.flags = 1;
      int v70 = operator new(0x20uLL);
      long long v71 = xmmword_25513E9B0;
      strcpy((char *)v70, "low_precision_accumulation");
      sub_25512974C(a1, (uint64_t)&v70, (uint64_t)v72);
      if (v73) {
        sub_2550EE418();
      }
      uint64_t v64 = *(void *)v72;
      int v73 = -1;
      if (SHIBYTE(v71) < 0) {
        operator delete(v70);
      }
      if (v64) {
        __p.flags = 3145729;
      }
      __p.n_threads = *(void *)(a2 + 472);
      long long v65 = BNNSFilterCreateLayerBroadcastMatMul(&layer_params, &__p);
      if (!v65)
      {
        long long v66 = *(void **)(a2 + 32);
        *(void *)uint64_t v72 = operator new(0x20uLL);
        *(_OWORD *)&v72[8] = xmmword_25513EF00;
        strcpy(*(char **)v72, "Error creating BNNSFilter");
        sub_25513A900(v66, 0xFFFF, (uint64_t)v72);
        if ((v72[23] & 0x80000000) != 0) {
          operator delete(*(void **)v72);
        }
      }
      goto LABEL_90;
    }
    long long v68 = *(void **)(a2 + 32);
    *(void *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.n_threads = xmmword_25513EEB0;
    strcpy(*(char **)&__p.flags, "ICE: BroadcastMatMul produces 1 output");
    sub_25513A900(v68, 0xFFFF, (uint64_t)&__p);
  }
  else
  {
    long long v67 = *(void **)(a2 + 32);
    *(void *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.n_threads = xmmword_25513EF10;
    strcpy(*(char **)&__p.flags, "ICE: BroadcastMatMul takes 2 inputs");
    sub_25513A900(v67, 0xFFFF, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  long long v65 = 0;
LABEL_90:
  if (v77)
  {
    unint64_t v78 = v77;
    operator delete(v77);
  }
  if (v81)
  {
    uint64_t v82 = v81;
    operator delete(v81);
  }
  return v65;
}

void sub_255132D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a41) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255132EC4(void *a1, uint64_t a2)
{
  HIBYTE(__p.i_desc.size[1]) = 6;
  strcpy((char *)&__p, "inputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v88);
  sub_2551354A4((uint64_t)v88, a2, (uint64_t **)&v90);
  if (v89 != -1) {
    ((void (*)(BNNSFilterParameters *, unsigned char *))off_270445798[v89])(&filter_params, v88);
  }
  int v89 = -1;
  if (SHIBYTE(__p.i_desc.size[1]) < 0) {
    operator delete(*(void **)&__p.i_desc.flags);
  }
  HIBYTE(__p.i_desc.size[1]) = 7;
  strcpy((char *)&__p, "outputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v84);
  sub_2551354A4((uint64_t)v84, a2, (uint64_t **)&v86);
  if (v85 != -1) {
    ((void (*)(BNNSFilterParameters *, unsigned char *))off_270445798[v85])(&filter_params, v84);
  }
  int v85 = -1;
  if (SHIBYTE(__p.i_desc.size[1]) < 0) {
    operator delete(*(void **)&__p.i_desc.flags);
  }
  if ((((char *)v91 - v90) & 0xFFFFFFFFFFFFFFF0) != 0x10)
  {
    long long v46 = *(void **)(a2 + 32);
    *(void *)&__p.i_desc.flags = operator new(0x20uLL);
    *(_OWORD *)__p.i_desc.size_t size = xmmword_25513EEE0;
    strcpy(*(char **)&__p.i_desc.flags, "ICE: conv takes 2-3 arguments");
    sub_25513A900(v46, 0xFFFF, (uint64_t)&__p);
LABEL_29:
    if ((SHIBYTE(__p.i_desc.size[1]) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    long long v48 = *(void **)&__p.i_desc.flags;
LABEL_31:
    operator delete(v48);
    goto LABEL_32;
  }
  if ((char *)v87 - v86 != 8)
  {
    long long v47 = *(void **)(a2 + 32);
    *(void *)&__p.i_desc.flags = operator new(0x20uLL);
    *(_OWORD *)__p.i_desc.size_t size = xmmword_25513EF20;
    strcpy(*(char **)&__p.i_desc.flags, "ICE: conv produces 1 output");
    sub_25513A900(v47, 0xFFFF, (uint64_t)&__p);
    goto LABEL_29;
  }
  memset(&__p.bias, 0, 312);
  uint64_t v4 = sub_25512AAF0(*((void *)v90 + 1));
  if (!*(void *)(v4 + 136))
  {
    long long v51 = *(void **)(a2 + 32);
    *(void *)&filter_params.flags = operator new(0x30uLL);
    *(_OWORD *)&filter_params.size_t n_threads = xmmword_25513EF30;
    strcpy(*(char **)&filter_params.flags, "Weight data uninitialized in BNNS metadata");
    sub_25513A900(v51, 0xFFFF, (uint64_t)&filter_params);
    if ((SHIBYTE(filter_params.alloc_memory) & 0x80000000) == 0) {
      goto LABEL_32;
    }
    long long v48 = *(void **)&filter_params.flags;
    goto LABEL_31;
  }
  long long v5 = (long long *)sub_25512AAF0(*(void *)v90);
  long long v6 = *v5;
  long long v7 = v5[2];
  *(_OWORD *)&__p.i_desc.size[1] = v5[1];
  *(_OWORD *)&__p.i_desc.size[3] = v7;
  *(_OWORD *)&__p.i_desc.flags = v6;
  long long v8 = v5[3];
  long long v9 = v5[4];
  long long v10 = v5[6];
  *(_OWORD *)&__p.i_desc.stride[1] = v5[5];
  *(_OWORD *)&__p.i_desc.stride[3] = v10;
  *(_OWORD *)&__p.i_desc.size[5] = v8;
  *(_OWORD *)&__p.i_desc.size[7] = v9;
  long long v11 = v5[7];
  long long v12 = v5[8];
  long long v13 = v5[10];
  *(_OWORD *)&__p.i_desc.data_type = v5[9];
  *(_OWORD *)&__p.i_desc.table_data_type = v13;
  *(_OWORD *)&__p.i_desc.stride[5] = v11;
  *(_OWORD *)&__p.i_desc.stride[7] = v12;
  long long v14 = *(_OWORD *)v4;
  long long v15 = *(_OWORD *)(v4 + 32);
  *(_OWORD *)&__p.w_desc.size[1] = *(_OWORD *)(v4 + 16);
  *(_OWORD *)&__p.w_desc.size[3] = v15;
  *(_OWORD *)&__p.w_desc.flags = v14;
  long long v16 = *(_OWORD *)(v4 + 48);
  long long v17 = *(_OWORD *)(v4 + 64);
  long long v18 = *(_OWORD *)(v4 + 96);
  *(_OWORD *)&__p.w_desc.stride[1] = *(_OWORD *)(v4 + 80);
  *(_OWORD *)&__p.w_desc.stride[3] = v18;
  *(_OWORD *)&__p.w_desc.size[5] = v16;
  *(_OWORD *)&__p.w_desc.size[7] = v17;
  long long v19 = *(_OWORD *)(v4 + 112);
  long long v20 = *(_OWORD *)(v4 + 128);
  long long v21 = *(_OWORD *)(v4 + 160);
  *(_OWORD *)&__p.w_desc.data_type = *(_OWORD *)(v4 + 144);
  *(_OWORD *)&__p.w_desc.table_data_type = v21;
  *(_OWORD *)&__p.w_desc.stride[5] = v19;
  *(_OWORD *)&__p.w_desc.stride[7] = v20;
  unsigned int v22 = (long long *)sub_25512AAF0(*(void *)v86);
  long long v23 = *v22;
  long long v24 = v22[2];
  *(_OWORD *)&__p.o_desc.size[1] = v22[1];
  *(_OWORD *)&__p.o_desc.size[3] = v24;
  *(_OWORD *)&__p.o_desc.flags = v23;
  long long v25 = v22[3];
  long long v26 = v22[4];
  long long v27 = v22[6];
  *(_OWORD *)&__p.o_desc.stride[1] = v22[5];
  *(_OWORD *)&__p.o_desc.stride[3] = v27;
  *(_OWORD *)&__p.o_desc.size[5] = v25;
  *(_OWORD *)&__p.o_desc.size[7] = v26;
  long long v28 = v22[7];
  long long v29 = v22[8];
  long long v30 = v22[10];
  *(_OWORD *)&__p.o_desc.data_type = v22[9];
  *(_OWORD *)&__p.o_desc.table_data_type = v30;
  *(_OWORD *)&__p.o_desc.stride[5] = v28;
  *(_OWORD *)&__p.o_desc.stride[7] = v29;
  if ((char *)v91 - v90 == 24)
  {
    long long v31 = (long long *)sub_25512AAF0(*((void *)v90 + 2));
    long long v32 = *v31;
    long long v33 = v31[2];
    *(_OWORD *)&__p.bias.size[1] = v31[1];
    *(_OWORD *)&__p.bias.size[3] = v33;
    *(_OWORD *)&__p.bias.flags = v32;
    long long v34 = v31[3];
    long long v35 = v31[4];
    long long v36 = v31[6];
    *(_OWORD *)&__p.bias.stride[1] = v31[5];
    *(_OWORD *)&__p.bias.stride[3] = v36;
    *(_OWORD *)&__p.bias.size[5] = v34;
    *(_OWORD *)&__p.bias.size[7] = v35;
    long long v37 = v31[7];
    long long v38 = v31[8];
    long long v39 = v31[10];
    *(_OWORD *)&__p.bias.data_type = v31[9];
    *(_OWORD *)&__p.bias.table_data_type = v39;
    *(_OWORD *)&__p.bias.stride[5] = v37;
    *(_OWORD *)&__p.bias.stride[7] = v38;
  }
  HIBYTE(filter_params.alloc_memory) = 3;
  filter_params.flags = 7627617;
  BOOL v40 = sub_2550EFEAC(a1, (uint64_t)&filter_params);
  int v41 = v40;
  if (SHIBYTE(filter_params.alloc_memory) < 0)
  {
    operator delete(*(void **)&filter_params.flags);
    if (v41) {
      goto LABEL_16;
    }
LABEL_41:
    memset(&__p.activation.ioffset, 0, 32);
    *(void *)&__p.activation.function = 0x3F80000000000000;
    *(void *)&__p.activation.beta = 0x100000000;
    goto LABEL_42;
  }
  if (!v40) {
    goto LABEL_41;
  }
LABEL_16:
  v81[23] = 3;
  strcpy(v81, "act");
  sub_25512974C(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)unint64_t v78 = *(_OWORD *)&filter_params.flags;
  BNNSAlloc alloc_memory = filter_params.alloc_memory;
  memset(&filter_params, 0, 24);
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  BNNSActivationFunction v42 = sub_2551357BC((uint64_t)v78);
  v81[23] = 9;
  strcpy(v81, "act_alpha");
  sub_25512974C(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 1) {
    sub_2550EE418();
  }
  double v43 = *(double *)&filter_params.flags;
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  v81[23] = 8;
  strcpy(v81, "act_beta");
  sub_25512974C(a1, (uint64_t)v81, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory) != 1) {
    sub_2550EE418();
  }
  float v44 = v43;
  float v45 = *(double *)&filter_params.flags;
  LODWORD(filter_params.free_memory) = -1;
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  __p.activation.function = v42;
  __p.activation.alpha = v44;
  __p.activation.beta = v45;
  __p.activation.iscale = 1;
  memset(&__p.activation.ioffset, 0, 32);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
LABEL_42:
  HIBYTE(alloc_memory) = 7;
  strcpy((char *)v78, "strides");
  sub_25512974C(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
  if (LODWORD(filter_params.free_memory) != 4) {
    sub_2550EE418();
  }
  v78[0] = 0;
  v78[1] = 0;
  BNNSAlloc alloc_memory = 0;
  uint64_t v52 = *(const void **)&filter_params.flags;
  size_t v53 = filter_params.n_threads - *(void *)&filter_params.flags;
  if (filter_params.n_threads == *(void *)&filter_params.flags)
  {
    float v62 = *(void **)(a2 + 32);
    *(void *)unint64_t v81 = operator new(0x20uLL);
    *(_OWORD *)&v81[8] = xmmword_25513EF00;
    strcpy(*(char **)v81, "ICE: conv with no strides");
    __n128 v63 = sub_25513A900(v62, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) == 0) {
      goto LABEL_63;
    }
    uint64_t v64 = *(size_t **)v81;
LABEL_62:
    operator delete(v64);
LABEL_63:
    if (LODWORD(filter_params.free_memory) != -1) {
LABEL_64:
    }
      ((void (*)(void **, BNNSFilterParameters *, __n128))off_270445798[LODWORD(filter_params.free_memory)])(v78, &filter_params, v63);
LABEL_32:
    long long v49 = 0;
    goto LABEL_33;
  }
  if ((v53 & 0x8000000000000000) != 0) {
    sub_2550EAEEC();
  }
  long long v54 = (size_t *)operator new(filter_params.n_threads - *(void *)&filter_params.flags);
  memcpy(v54, v52, v53);
  if (v53 >= 0x18)
  {
    long long v65 = *(void **)(a2 + 32);
    *(void *)unint64_t v81 = operator new(0x30uLL);
    *(_OWORD *)&v81[8] = xmmword_25513EF30;
    strcpy(*(char **)v81, "ICE: BNNS does not support >2D convolution");
    sub_25513A900(v65, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) != 0) {
      operator delete(*(void **)v81);
    }
    uint64_t v64 = v54;
    goto LABEL_62;
  }
  size_t v55 = *v54;
  __p.x_stride = v54[1];
  __p.y_stride = v55;
  operator delete(v54);
  if (LODWORD(filter_params.free_memory) != -1) {
    ((void (*)(void **, BNNSFilterParameters *))off_270445798[LODWORD(filter_params.free_memory)])(v78, &filter_params);
  }
  HIBYTE(alloc_memory) = 8;
  strcpy((char *)v78, "dilation");
  sub_25512974C(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
  if (LODWORD(filter_params.free_memory) != 4) {
    sub_2550EE418();
  }
  v78[0] = 0;
  v78[1] = 0;
  BNNSAlloc alloc_memory = 0;
  size_t v56 = *(const void **)&filter_params.flags;
  size_t n_threads = filter_params.n_threads;
  int64_t v58 = filter_params.n_threads - *(void *)&filter_params.flags;
  if (filter_params.n_threads != *(void *)&filter_params.flags)
  {
    if (v58 < 0) {
      sub_2550EAEEC();
    }
    BOOL v59 = (size_t *)operator new(filter_params.n_threads - *(void *)&filter_params.flags);
    v78[0] = v59;
    v78[1] = v59;
    BNNSAlloc alloc_memory = (BNNSAlloc)&v59[v58 >> 3];
    memcpy(v59, v56, v58);
    size_t v60 = *v59;
    __p.x_dilation_stride = v59[1];
    __p.y_dilation_stride = v60;
    size_t v61 = v59;
    goto LABEL_56;
  }
  long long v66 = *(void **)(a2 + 32);
  *(void *)unint64_t v81 = operator new(0x20uLL);
  *(_OWORD *)&v81[8] = xmmword_25513E9B0;
  strcpy(*(char **)v81, "ICE: conv with no dilation");
  sub_25513A900(v66, 0xFFFF, (uint64_t)v81);
  if ((v81[23] & 0x80000000) != 0)
  {
    size_t v61 = *(size_t **)v81;
LABEL_56:
    operator delete(v61);
  }
  if (LODWORD(filter_params.free_memory) != -1) {
    ((void (*)(void **, BNNSFilterParameters *))off_270445798[LODWORD(filter_params.free_memory)])(v78, &filter_params);
  }
  if ((const void *)n_threads == v56) {
    goto LABEL_32;
  }
  HIBYTE(alloc_memory) = 3;
  LODWORD(v78[0]) = 6578544;
  sub_25512974C(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
  if (LODWORD(filter_params.free_memory) != 4) {
    sub_2550EE418();
  }
  v78[0] = 0;
  v78[1] = 0;
  BNNSAlloc alloc_memory = 0;
  long long v67 = *(const void **)&filter_params.flags;
  size_t v68 = filter_params.n_threads - *(void *)&filter_params.flags;
  if (filter_params.n_threads == *(void *)&filter_params.flags)
  {
    int v74 = *(void **)(a2 + 32);
    sub_25511B298(v81, "ICE: conv with no padding specification");
    __n128 v63 = sub_25513A900(v74, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) == 0) {
      goto LABEL_94;
    }
    char v75 = *(void **)v81;
LABEL_93:
    operator delete(v75);
LABEL_94:
    if (LODWORD(filter_params.free_memory) == -1) {
      goto LABEL_32;
    }
    goto LABEL_64;
  }
  if ((v68 & 0x8000000000000000) != 0) {
    sub_2550EAEEC();
  }
  uint64_t v69 = operator new(filter_params.n_threads - *(void *)&filter_params.flags);
  memcpy(v69, v67, v68);
  if (v68 != 32)
  {
    int v76 = *(void **)(a2 + 32);
    sub_25511B298(v81, "ICE: Must provide 2D asymmetric pad for convolution");
    sub_25513A900(v76, 0xFFFF, (uint64_t)v81);
    if ((v81[23] & 0x80000000) != 0) {
      operator delete(*(void **)v81);
    }
    char v75 = v69;
    goto LABEL_93;
  }
  long long v70 = v69[1];
  *(_OWORD *)__p.pad = *v69;
  *(_OWORD *)&__p.pad[2] = v70;
  operator delete(v69);
  sub_2550EE000((uint64_t)&filter_params);
  sub_25511B298(v78, "groups");
  sub_25512974C(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
  if (LODWORD(filter_params.free_memory)) {
    sub_2550EE418();
  }
  __p.groups = *(void *)&filter_params.flags;
  sub_2550EE000((uint64_t)&filter_params);
  sub_25511B298(v78, "transposed");
  sub_25512974C(a1, (uint64_t)v78, (uint64_t)&filter_params);
  if (LODWORD(filter_params.free_memory)) {
    sub_2550EE418();
  }
  uint64_t v71 = *(void *)&filter_params.flags;
  sub_2550EE000((uint64_t)&filter_params);
  if (SHIBYTE(alloc_memory) < 0) {
    operator delete(v78[0]);
  }
  memset(&filter_params, 0, sizeof(filter_params));
  filter_params.flags = 1;
  sub_25511B298(v81, "low_precision_accumulation");
  sub_25512974C(a1, (uint64_t)v81, (uint64_t)v78);
  if (v80) {
    sub_2550EE418();
  }
  uint64_t v72 = v78[0];
  sub_2550EE000((uint64_t)v78);
  if ((v81[23] & 0x80000000) != 0) {
    operator delete(*(void **)v81);
  }
  if (v72) {
    filter_params.flags = 3145729;
  }
  filter_params.size_t n_threads = *(void *)(a2 + 472);
  if (v71) {
    int v73 = BNNSFilterCreateLayerTransposedConvolution(&__p, &filter_params);
  }
  else {
    int v73 = (void *)MEMORY[0x25A288310](&__p, &filter_params);
  }
  long long v49 = v73;
  if (!v73)
  {
    int v77 = *(void **)(a2 + 32);
    sub_25511B298(v78, "Error creating BNNSFilter");
    sub_25513A900(v77, 0xFFFF, (uint64_t)v78);
    if (SHIBYTE(alloc_memory) < 0) {
      operator delete(v78[0]);
    }
  }
LABEL_33:
  if (v86)
  {
    int v87 = (uint64_t *)v86;
    operator delete(v86);
  }
  if (v90)
  {
    unint64_t v91 = (uint64_t *)v90;
    operator delete(v90);
  }
  return v49;
}

void sub_2551339C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  long long v37 = *(void **)(v35 - 160);
  if (v37)
  {
    *(void *)(v35 - 152) = v37;
    operator delete(v37);
  }
  long long v38 = *(void **)(v35 - 104);
  if (v38)
  {
    *(void *)(v35 - 96) = v38;
    operator delete(v38);
  }
  _Unwind_Resume(exception_object);
}

void *sub_255133BFC(void *a1, uint64_t a2)
{
  bzero(&layer_params, 0x2F0uLL);
  HIBYTE(__p.alloc_memory) = 6;
  strcpy((char *)&__p, "inputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v61);
  sub_2551354A4((uint64_t)v61, a2, (uint64_t **)&v63);
  if (v62 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v62])(v53, v61);
  }
  int v62 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  HIBYTE(__p.alloc_memory) = 7;
  strcpy((char *)&__p, "outputs");
  sub_25512974C(a1, (uint64_t)&__p, (uint64_t)v57);
  sub_2551354A4((uint64_t)v57, a2, (uint64_t **)&v59);
  if (v58 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v58])(v53, v57);
  }
  int v58 = -1;
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  if ((unint64_t)(v64 - (unsigned char *)v63 - 9) >= 0x17)
  {
    BOOL v40 = *(void **)(a2 + 32);
    *(void *)&__p.flags = operator new(0x30uLL);
    *(_OWORD *)&__p.size_t n_threads = xmmword_25513EF40;
    strcpy(*(char **)&__p.flags, "ICE: FullyConnected takes at least 2 inputs");
    sub_25513A900(v40, 0xFFFF, (uint64_t)&__p);
  }
  else if (v60 - (unsigned char *)v59 == 8)
  {
    uint64_t v4 = sub_25512AAF0(*((void *)v63 + 1));
    if (*(void *)(v4 + 136))
    {
      long long v5 = (long long *)sub_25512AAF0(*(void *)v63);
      long long v6 = *v5;
      long long v7 = v5[2];
      *(_OWORD *)&layer_params.i_desc.size[1] = v5[1];
      *(_OWORD *)&layer_params.i_desc.size[3] = v7;
      *(_OWORD *)&layer_params.i_desc.flags = v6;
      long long v8 = v5[3];
      long long v9 = v5[4];
      long long v10 = v5[6];
      *(_OWORD *)&layer_params.i_desc.stride[1] = v5[5];
      *(_OWORD *)&layer_params.i_desc.stride[3] = v10;
      *(_OWORD *)&layer_params.i_desc.size[5] = v8;
      *(_OWORD *)&layer_params.i_desc.size[7] = v9;
      long long v11 = v5[7];
      long long v12 = v5[8];
      long long v13 = v5[10];
      *(_OWORD *)&layer_params.i_desc.data_type = v5[9];
      *(_OWORD *)&layer_params.i_desc.table_data_type = v13;
      *(_OWORD *)&layer_params.i_desc.stride[5] = v11;
      *(_OWORD *)&layer_params.i_desc.stride[7] = v12;
      long long v14 = *(_OWORD *)v4;
      long long v15 = *(_OWORD *)(v4 + 32);
      *(_OWORD *)&layer_params.w_desc.size[1] = *(_OWORD *)(v4 + 16);
      *(_OWORD *)&layer_params.w_desc.size[3] = v15;
      *(_OWORD *)&layer_params.w_desc.flags = v14;
      long long v16 = *(_OWORD *)(v4 + 48);
      long long v17 = *(_OWORD *)(v4 + 64);
      long long v18 = *(_OWORD *)(v4 + 96);
      *(_OWORD *)&layer_params.w_desc.stride[1] = *(_OWORD *)(v4 + 80);
      *(_OWORD *)&layer_params.w_desc.stride[3] = v18;
      *(_OWORD *)&layer_params.w_desc.size[5] = v16;
      *(_OWORD *)&layer_params.w_desc.size[7] = v17;
      long long v19 = *(_OWORD *)(v4 + 112);
      long long v20 = *(_OWORD *)(v4 + 128);
      long long v21 = *(_OWORD *)(v4 + 160);
      *(_OWORD *)&layer_params.w_desc.data_type = *(_OWORD *)(v4 + 144);
      *(_OWORD *)&layer_params.w_desc.table_data_type = v21;
      *(_OWORD *)&layer_params.w_desc.stride[5] = v19;
      *(_OWORD *)&layer_params.w_desc.stride[7] = v20;
      unsigned int v22 = (long long *)sub_25512AAF0(*(void *)v59);
      long long v23 = *v22;
      long long v24 = v22[2];
      *(_OWORD *)&layer_params.o_desc.size[1] = v22[1];
      *(_OWORD *)&layer_params.o_desc.size[3] = v24;
      *(_OWORD *)&layer_params.o_desc.flags = v23;
      long long v25 = v22[3];
      long long v26 = v22[4];
      long long v27 = v22[6];
      *(_OWORD *)&layer_params.o_desc.stride[1] = v22[5];
      *(_OWORD *)&layer_params.o_desc.stride[3] = v27;
      *(_OWORD *)&layer_params.o_desc.size[5] = v25;
      *(_OWORD *)&layer_params.o_desc.size[7] = v26;
      long long v28 = v22[7];
      long long v29 = v22[8];
      long long v30 = v22[10];
      *(_OWORD *)&layer_params.o_desc.data_type = v22[9];
      *(_OWORD *)&layer_params.o_desc.table_data_type = v30;
      *(_OWORD *)&layer_params.o_desc.stride[5] = v28;
      *(_OWORD *)&layer_params.o_desc.stride[7] = v29;
      if (v64 - (unsigned char *)v63 == 24)
      {
        long long v31 = (long long *)sub_25512AAF0(*((void *)v63 + 2));
        long long v32 = *v31;
        long long v33 = v31[2];
        *(_OWORD *)&layer_params.bias.size[1] = v31[1];
        *(_OWORD *)&layer_params.bias.size[3] = v33;
        *(_OWORD *)&layer_params.bias.flags = v32;
        long long v34 = v31[3];
        long long v35 = v31[4];
        long long v36 = v31[6];
        *(_OWORD *)&layer_params.bias.stride[1] = v31[5];
        *(_OWORD *)&layer_params.bias.stride[3] = v36;
        *(_OWORD *)&layer_params.bias.size[5] = v34;
        *(_OWORD *)&layer_params.bias.size[7] = v35;
        long long v37 = v31[7];
        long long v38 = v31[8];
        long long v39 = v31[10];
        *(_OWORD *)&layer_params.bias.data_type = v31[9];
        *(_OWORD *)&layer_params.bias.table_data_type = v39;
        *(_OWORD *)&layer_params.bias.stride[5] = v37;
        *(_OWORD *)&layer_params.bias.stride[7] = v38;
      }
      else
      {
        memset(&layer_params.bias, 0, sizeof(layer_params.bias));
      }
      HIBYTE(__p.alloc_memory) = 3;
      __p.flags = 7627617;
      float v45 = sub_2550EFEAC(a1, (uint64_t)&__p);
      long long v46 = v45;
      if (SHIBYTE(__p.alloc_memory) < 0)
      {
        operator delete(*(void **)&__p.flags);
        if (v46) {
          goto LABEL_28;
        }
      }
      else if (v45)
      {
LABEL_28:
        v55[23] = 3;
        strcpy(v55, "act");
        sub_25512974C(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 2) {
          sub_2550EE418();
        }
        *(_OWORD *)size_t v53 = *(_OWORD *)&__p.flags;
        *(void *)&v53[16] = __p.alloc_memory;
        memset(&__p, 0, 24);
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
        BNNSActivationFunction v47 = sub_2551357BC((uint64_t)v53);
        v55[23] = 9;
        strcpy(v55, "act_alpha");
        sub_25512974C(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 1) {
          sub_2550EE418();
        }
        double v48 = *(double *)&__p.flags;
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
        v55[23] = 8;
        strcpy(v55, "act_beta");
        sub_25512974C(a1, (uint64_t)v55, (uint64_t)&__p);
        if (LODWORD(__p.free_memory) != 1) {
          sub_2550EE418();
        }
        float v49 = v48;
        float v50 = *(double *)&__p.flags;
        LODWORD(__p.free_memory) = -1;
        if ((v55[23] & 0x80000000) != 0) {
          operator delete(*(void **)v55);
        }
        layer_params.activation.function = v47;
        layer_params.activation.alpha = v49;
        layer_params.activation.beta = v50;
        layer_params.activation.iscale = 1;
        memset(&layer_params.activation.ioffset, 0, 32);
        if ((v53[23] & 0x80000000) != 0) {
          operator delete(*(void **)v53);
        }
        goto LABEL_41;
      }
      memset(&layer_params.activation.iscale, 0, 36);
      layer_params.activation.function = BNNSActivationFunctionIdentity;
      *(void *)&layer_params.activation.alpha = 1065353216;
LABEL_41:
      memset(&__p, 0, sizeof(__p));
      __p.flags = 1;
      *(void *)size_t v55 = operator new(0x20uLL);
      *(_OWORD *)&v55[8] = xmmword_25513E9B0;
      strcpy(*(char **)v55, "low_precision_accumulation");
      sub_25512974C(a1, (uint64_t)v55, (uint64_t)v53);
      if (v54) {
        sub_2550EE418();
      }
      uint64_t v51 = *(void *)v53;
      int v54 = -1;
      if ((v55[23] & 0x80000000) != 0) {
        operator delete(*(void **)v55);
      }
      if (v51) {
        __p.flags = 3145729;
      }
      __p.size_t n_threads = *(void *)(a2 + 472);
      double v43 = BNNSFilterCreateLayerFullyConnected(&layer_params, &__p);
      if (!v43)
      {
        uint64_t v52 = *(void **)(a2 + 32);
        *(void *)size_t v53 = operator new(0x20uLL);
        *(_OWORD *)&v53[8] = xmmword_25513EF00;
        strcpy(*(char **)v53, "Error creating BNNSFilter");
        sub_25513A900(v52, 0xFFFF, (uint64_t)v53);
        if ((v53[23] & 0x80000000) != 0) {
          operator delete(*(void **)v53);
        }
      }
      goto LABEL_20;
    }
    BNNSActivationFunction v42 = *(void **)(a2 + 32);
    *(void *)&__p.flags = operator new(0x30uLL);
    *(_OWORD *)&__p.size_t n_threads = xmmword_25513EF30;
    strcpy(*(char **)&__p.flags, "Weight data uninitialized in BNNS metadata");
    sub_25513A900(v42, 0xFFFF, (uint64_t)&__p);
  }
  else
  {
    int v41 = *(void **)(a2 + 32);
    *(void *)&__p.flags = operator new(0x28uLL);
    *(_OWORD *)&__p.size_t n_threads = xmmword_25513EF50;
    strcpy(*(char **)&__p.flags, "ICE: FullyConnected produces 1 output");
    sub_25513A900(v41, 0xFFFF, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.alloc_memory) < 0) {
    operator delete(*(void **)&__p.flags);
  }
  double v43 = 0;
LABEL_20:
  if (v59)
  {
    size_t v60 = v59;
    operator delete(v59);
  }
  if (v63)
  {
    uint64_t v64 = v63;
    operator delete(v63);
  }
  return v43;
}

void sub_25513426C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a34) {
    operator delete(a34);
  }
  if (a41) {
    operator delete(a41);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_2551343A8(void *a1, uint64_t a2)
{
  memset(v59, 0, sizeof(v59));
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  long long v41 = 0u;
  long long v42 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  HIBYTE(__p[2]) = 6;
  strcpy((char *)__p, "inputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v34);
  sub_2551354A4((uint64_t)v34, a2, (uint64_t **)v36);
  if (v35 != -1) {
    ((void (*)(void **, unsigned char *))off_270445798[v35])(v33, v34);
  }
  int v35 = -1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  HIBYTE(__p[2]) = 7;
  strcpy((char *)__p, "outputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v31);
  sub_2551354A4((uint64_t)v31, a2, (uint64_t **)v33);
  if (v32 != -1) {
    ((void (*)(void **, unsigned char *))off_270445798[v32])(&v28, v31);
  }
  int v32 = -1;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v4 = (long long *)sub_25512AAF0(*(void *)v36[0]);
  long long v5 = *v4;
  long long v6 = v4[2];
  long long v38 = v4[1];
  long long v39 = v6;
  long long v37 = v5;
  long long v7 = v4[3];
  long long v8 = v4[4];
  long long v9 = v4[6];
  long long v42 = v4[5];
  long long v43 = v9;
  long long v40 = v7;
  long long v41 = v8;
  long long v10 = v4[7];
  long long v11 = v4[8];
  long long v12 = v4[10];
  long long v46 = v4[9];
  long long v47 = v12;
  long long v44 = v10;
  long long v45 = v11;
  long long v13 = (long long *)sub_25512AAF0(*(void *)v33[0]);
  long long v14 = *v13;
  long long v15 = v13[2];
  long long v49 = v13[1];
  long long v50 = v15;
  long long v48 = v14;
  long long v16 = v13[3];
  long long v17 = v13[4];
  long long v18 = v13[6];
  long long v53 = v13[5];
  long long v54 = v18;
  long long v51 = v16;
  long long v52 = v17;
  long long v19 = v13[7];
  long long v20 = v13[8];
  long long v21 = v13[10];
  long long v57 = v13[9];
  long long v58 = v21;
  long long v55 = v19;
  long long v56 = v20;
  HIBYTE(v29) = 7;
  strcpy((char *)&v28, "permute");
  sub_25512974C(a1, (uint64_t)&v28, (uint64_t)__p);
  if (LODWORD(__p[3]) != 4) {
    sub_2550EE418();
  }
  unsigned int v22 = __p[0];
  long long v23 = __p[1];
  memset(__p, 0, 24);
  LODWORD(__p[3]) = -1;
  if (SHIBYTE(v29) < 0) {
    operator delete(v28);
  }
  if ((unint64_t)(v23 - v22) >= 0x48)
  {
    long long v26 = *(void **)(a2 + 32);
    __p[0] = operator new(0x30uLL);
    *(_OWORD *)&__p[1] = xmmword_25513EF40;
    strcpy((char *)__p[0], "ICE: too many permute axes for BNNS permute");
    sub_25513A900(v26, 0xFFFF, (uint64_t)__p);
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v24 = 0;
  }
  else
  {
    if (v23 != v22) {
      memmove(v59, v22, v23 - v22);
    }
    memset(__p, 0, sizeof(__p));
    LODWORD(__p[0]) = 1;
    __p[1] = *(void **)(a2 + 472);
    uint64_t v24 = MEMORY[0x25A288330](&v37, __p);
    if (!v24)
    {
      long long v25 = *(void **)(a2 + 32);
      long long v28 = operator new(0x20uLL);
      long long v29 = xmmword_25513EF00;
      strcpy((char *)v28, "Error creating BNNSFilter");
      sub_25513A900(v25, 0xFFFF, (uint64_t)&v28);
      if (SHIBYTE(v29) < 0) {
        operator delete(v28);
      }
    }
  }
  if (v22) {
    operator delete(v22);
  }
  if (v33[0])
  {
    v33[1] = v33[0];
    operator delete(v33[0]);
  }
  if (v36[0])
  {
    v36[1] = v36[0];
    operator delete(v36[0]);
  }
  return v24;
}

void sub_25513472C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v35) {
    operator delete(v35);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a34) {
    operator delete(a34);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_255134818(void *a1, uint64_t a2)
{
  uint64_t v167 = *MEMORY[0x263EF8340];
  memset(v155, 0, sizeof(v155));
  BYTE7(v59) = 6;
  strcpy((char *)__p, "inputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v74);
  sub_2551354A4((uint64_t)v74, a2, (uint64_t **)v76);
  if (v75 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v75])(v157, v74);
  }
  int v75 = -1;
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  BYTE7(v59) = 7;
  strcpy((char *)__p, "outputs");
  sub_25512974C(a1, (uint64_t)__p, (uint64_t)v71);
  sub_2551354A4((uint64_t)v71, a2, (uint64_t **)v73);
  if (v72 != -1) {
    ((void (*)(unsigned char *, unsigned char *))off_270445798[v72])(v157, v71);
  }
  int v72 = -1;
  if (SBYTE7(v59) < 0) {
    operator delete(__p[0]);
  }
  v157[23] = 4;
  strcpy(v157, "func");
  sub_25512974C(a1, (uint64_t)v157, (uint64_t)__p);
  if (DWORD2(v59) != 2) {
    sub_2550EE418();
  }
  *(_OWORD *)uint64_t v69 = *(_OWORD *)__p;
  uint64_t v70 = v59;
  __p[1] = 0;
  *(void *)&long long v59 = 0;
  __p[0] = 0;
  DWORD2(v59) = -1;
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
  v157[23] = 4;
  strcpy(v157, "nary");
  sub_25512974C(a1, (uint64_t)v157, (uint64_t)__p);
  if (DWORD2(v59)) {
    sub_2550EE418();
  }
  uint64_t v4 = __p[0];
  DWORD2(v59) = -1;
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
  if (v4 == (void *)1)
  {
    long long v15 = (_OWORD *)sub_25512AAF0(*(void *)v76[0]);
    long long v65 = v15[7];
    long long v66 = v15[8];
    long long v67 = v15[9];
    long long v68 = v15[10];
    long long v61 = v15[3];
    long long v62 = v15[4];
    long long v63 = v15[5];
    long long v64 = v15[6];
    *(_OWORD *)BNNSFilterParameters __p = *v15;
    long long v59 = v15[1];
    long long v60 = v15[2];
    long long v16 = (_OWORD *)sub_25512AAF0(*(void *)v73[0]);
    long long v163 = v16[7];
    long long v164 = v16[8];
    long long v165 = v16[9];
    long long v166 = v16[10];
    long long v159 = v16[3];
    long long v160 = v16[4];
    long long v161 = v16[5];
    long long v162 = v16[6];
    *(_OWORD *)uint64_t v157 = *v16;
    *(_OWORD *)&v157[16] = v16[1];
    long long v158 = v16[2];
    *(_OWORD *)&v154[8] = 0u;
    v142[1] = v59;
    v142[0] = *(_OWORD *)__p;
    v142[5] = v63;
    v142[4] = v62;
    v142[2] = v60;
    v142[3] = v61;
    uint64_t v143 = 1;
    v142[10] = v68;
    v142[9] = v67;
    v142[8] = v66;
    v142[6] = v64;
    v142[7] = v65;
    long long v151 = v163;
    long long v152 = v164;
    long long v153 = v165;
    *(_OWORD *)uint64_t v154 = v166;
    long long v149 = v161;
    long long v150 = v162;
    long long v147 = v159;
    long long v148 = v160;
    long long v144 = *(_OWORD *)v157;
    long long v145 = *(_OWORD *)&v157[16];
    long long v146 = v158;
    *(_DWORD *)&v154[16] = 1;
    *((void *)&v155[0] + 1) = v142;
  }
  else if (v4 == (void *)2)
  {
    long long v12 = (_OWORD *)sub_25512AAF0(*(void *)v76[0]);
    long long v65 = v12[7];
    long long v66 = v12[8];
    long long v67 = v12[9];
    long long v68 = v12[10];
    long long v61 = v12[3];
    long long v62 = v12[4];
    long long v63 = v12[5];
    long long v64 = v12[6];
    *(_OWORD *)BNNSFilterParameters __p = *v12;
    long long v59 = v12[1];
    long long v60 = v12[2];
    long long v13 = (_OWORD *)sub_25512AAF0(*((void *)v76[0] + 1));
    long long v163 = v13[7];
    long long v164 = v13[8];
    long long v165 = v13[9];
    long long v166 = v13[10];
    long long v159 = v13[3];
    long long v160 = v13[4];
    long long v161 = v13[5];
    long long v162 = v13[6];
    *(_OWORD *)uint64_t v157 = *v13;
    *(_OWORD *)&v157[16] = v13[1];
    long long v158 = v13[2];
    long long v14 = (long long *)sub_25512AAF0(*(void *)v73[0]);
    long long v52 = v14[8];
    long long v54 = v14[9];
    long long v56 = v14[10];
    long long v44 = v14[4];
    long long v46 = v14[5];
    long long v48 = v14[6];
    long long v50 = v14[7];
    long long v36 = *v14;
    long long v38 = v14[1];
    long long v40 = v14[2];
    long long v42 = v14[3];
    *(_OWORD *)&v129[8] = 0u;
    v117[8] = v66;
    v117[9] = v67;
    uint64_t v118 = 1;
    v117[10] = v68;
    void v117[4] = v62;
    v117[5] = v63;
    v117[7] = v65;
    v117[6] = v64;
    v117[0] = *(_OWORD *)__p;
    v117[1] = v59;
    v117[3] = v61;
    v117[2] = v60;
    long long v126 = v163;
    long long v127 = v164;
    long long v128 = v165;
    *(_OWORD *)uint64_t v129 = v166;
    long long v124 = v161;
    long long v125 = v162;
    long long v122 = v159;
    long long v123 = v160;
    long long v119 = *(_OWORD *)v157;
    long long v120 = *(_OWORD *)&v157[16];
    long long v121 = v158;
    long long v137 = v50;
    long long v138 = v52;
    long long v139 = v54;
    long long v140 = v56;
    long long v133 = v42;
    long long v134 = v44;
    long long v135 = v46;
    long long v136 = v48;
    long long v130 = v36;
    long long v131 = v38;
    *(_DWORD *)&v129[16] = 1;
    long long v132 = v40;
    uint64_t v141 = 1;
    *((void *)&v155[0] + 1) = v117;
  }
  else if (v4 == (void *)3)
  {
    uint64_t v5 = sub_25512AAF0(*(void *)v76[0]);
    long long v33 = *(_OWORD *)(v5 + 96);
    long long v34 = *(_OWORD *)(v5 + 112);
    long long v35 = *(_OWORD *)(v5 + 128);
    long long v29 = *(_OWORD *)(v5 + 32);
    long long v30 = *(_OWORD *)(v5 + 48);
    long long v31 = *(_OWORD *)(v5 + 64);
    long long v32 = *(_OWORD *)(v5 + 80);
    long long v27 = *(_OWORD *)v5;
    long long v28 = *(_OWORD *)(v5 + 16);
    int v6 = *(_DWORD *)(v5 + 144);
    v156[0] = *(_OWORD *)(v5 + 148);
    long long v7 = (void *)HIBYTE(v70);
    if (v70 < 0) {
      long long v7 = v69[1];
    }
    *(_OWORD *)((char *)v156 + 12) = *(_OWORD *)(v5 + 160);
    if (v7 == (void *)6)
    {
      long long v8 = v70 >= 0 ? v69 : (void **)v69[0];
      unsigned int v9 = 1936026725;
      unsigned int v10 = bswap32(*(_DWORD *)v8);
      if (v10 == 1936026725 && (unsigned int v10 = bswap32(*((unsigned __int16 *)v8 + 2)) >> 16, v9 = 25460, v10 == 25460)) {
        int v11 = 0;
      }
      else {
        int v11 = v10 < v9 ? -1 : 1;
      }
      if (!v11) {
        int v6 = 1048584;
      }
    }
    long long v17 = (_OWORD *)sub_25512AAF0(*((void *)v76[0] + 1));
    long long v65 = v17[7];
    long long v66 = v17[8];
    long long v67 = v17[9];
    long long v68 = v17[10];
    long long v61 = v17[3];
    long long v62 = v17[4];
    long long v63 = v17[5];
    long long v64 = v17[6];
    *(_OWORD *)BNNSFilterParameters __p = *v17;
    long long v59 = v17[1];
    long long v60 = v17[2];
    long long v18 = (_OWORD *)sub_25512AAF0(*((void *)v76[0] + 2));
    long long v163 = v18[7];
    long long v164 = v18[8];
    long long v165 = v18[9];
    long long v166 = v18[10];
    long long v159 = v18[3];
    long long v160 = v18[4];
    long long v161 = v18[5];
    long long v162 = v18[6];
    *(_OWORD *)uint64_t v157 = *v18;
    *(_OWORD *)&v157[16] = v18[1];
    long long v158 = v18[2];
    long long v19 = (long long *)sub_25512AAF0(*(void *)v73[0]);
    long long v53 = v19[8];
    long long v55 = v19[9];
    long long v57 = v19[10];
    long long v45 = v19[4];
    long long v47 = v19[5];
    long long v49 = v19[6];
    long long v51 = v19[7];
    long long v37 = *v19;
    long long v39 = v19[1];
    long long v41 = v19[2];
    long long v43 = v19[3];
    bzero(&v80, 0x230uLL);
    v77[6] = v33;
    v77[7] = v34;
    v77[8] = v35;
    v77[2] = v29;
    v77[3] = v30;
    v77[4] = v31;
    v77[5] = v32;
    v77[0] = v27;
    v77[1] = v28;
    *(_OWORD *)unint64_t v79 = v156[0];
    *(_OWORD *)&v79[12] = *(_OWORD *)((char *)v156 + 12);
    long long v88 = v65;
    long long v89 = v66;
    long long v90 = v67;
    long long v91 = v68;
    long long v86 = v63;
    long long v87 = v64;
    long long v84 = v61;
    long long v85 = v62;
    long long v81 = *(_OWORD *)__p;
    int v78 = v6;
    long long v82 = v59;
    long long v83 = v60;
    int v80 = 1;
    int v92 = 1;
    long long v101 = v164;
    long long v102 = v165;
    long long v103 = v166;
    long long v97 = v160;
    long long v98 = v161;
    long long v100 = v163;
    long long v99 = v162;
    long long v93 = *(_OWORD *)v157;
    long long v94 = *(_OWORD *)&v157[16];
    long long v96 = v159;
    long long v95 = v158;
    int v104 = 1;
    long long v113 = v53;
    long long v114 = v55;
    long long v115 = v57;
    long long v109 = v45;
    long long v110 = v47;
    long long v111 = v49;
    long long v112 = v51;
    long long v105 = v37;
    long long v106 = v39;
    long long v107 = v41;
    long long v108 = v43;
    int v116 = 1;
    *((void *)&v155[0] + 1) = v77;
  }
  v157[23] = 6;
  strcpy(v157, "select");
  *(_DWORD *)&v157[24] = 31;
  *(_OWORD *)BNNSFilterParameters __p = 0u;
  long long v59 = 0u;
  LODWORD(v60) = 1065353216;
  sub_25513645C((uint64_t)__p, (uint64_t)v157, (uint64_t)v157);
  if ((v157[23] & 0x80000000) != 0) {
    operator delete(*(void **)v157);
  }
  int v20 = *((_DWORD *)sub_255136814(__p, (uint64_t)v69) + 10);
  long long v21 = (void **)v59;
  if ((void)v59)
  {
    do
    {
      long long v26 = (void **)*v21;
      if (*((char *)v21 + 39) < 0) {
        operator delete(v21[2]);
      }
      operator delete(v21);
      long long v21 = v26;
    }
    while (v26);
  }
  unsigned int v22 = __p[0];
  __p[0] = 0;
  if (v22) {
    operator delete(v22);
  }
  memset((char *)&v155[1] + 12, 0, 36);
  LODWORD(v155[0]) = v20;
  LODWORD(v155[1]) = 0;
  *(void *)((char *)&v155[1] + 4) = 1065353216;
  *(_OWORD *)BNNSFilterParameters __p = 0u;
  long long v59 = 0u;
  LODWORD(__p[0]) = 1;
  uint64_t v23 = MEMORY[0x25A2882F0](v155, __p);
  if (v23
    || (uint64_t v24 = *(void **)(a2 + 32),
        *(void *)uint64_t v157 = operator new(0x20uLL),
        *(_OWORD *)&v157[8] = xmmword_25513EF00,
        strcpy(*(char **)v157, "Error creating BNNSFilter"),
        sub_25513A900(v24, 0xFFFF, (uint64_t)v157),
        (v157[23] & 0x80000000) == 0))
  {
    if ((SHIBYTE(v70) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  operator delete(*(void **)v157);
  if (SHIBYTE(v70) < 0) {
LABEL_43:
  }
    operator delete(v69[0]);
LABEL_44:
  if (v73[0])
  {
    v73[1] = v73[0];
    operator delete(v73[0]);
  }
  if (v76[0])
  {
    v76[1] = v76[0];
    operator delete(v76[0]);
  }
  return v23;
}

void sub_2551352B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x207]) < 0) {
    operator delete(__p);
  }
  int v72 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v72;
    operator delete(v72);
  }
  int v73 = (void *)STACK[0x268];
  if (STACK[0x268])
  {
    STACK[0x270] = (unint64_t)v73;
    operator delete(v73);
  }
  _Unwind_Resume(a1);
}

void sub_2551353BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    JUMPOUT(0x2551353A0);
  }
  JUMPOUT(0x2551353A4);
}

void sub_2551353E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a54 < 0) {
    JUMPOUT(0x2551353B0);
  }
  JUMPOUT(0x2551353B4);
}

uint64_t sub_255135404(uint64_t a1)
{
  uint64_t v2 = a1 + 24;
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3 == v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
LABEL_7:
    operator delete(*(void **)a1);
    return a1;
  }
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
  }
  if (*(char *)(a1 + 23) < 0) {
    goto LABEL_7;
  }
  return a1;
}

void sub_2551354A4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  if (*(_DWORD *)(a1 + 24) != 3) {
    sub_2550EE418();
  }
  BNNSFilterParameters __p = 0;
  long long v40 = 0;
  uint64_t v41 = 0;
  sub_2550EAD40((char *)&__p, *(void *)a1, *(void *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3));
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v5 = (void **)__p;
  int v6 = v40;
  if (__p == v40)
  {
    if (__p) {
      goto LABEL_41;
    }
    return;
  }
  do
  {
    sub_25512298C(a2, (uint64_t)v5, &v35);
    uint64_t v37 = 0;
    long long v38 = 0;
    if (!v36)
    {
      uint64_t v7 = 0;
      goto LABEL_13;
    }
    long long v38 = std::__shared_weak_count::lock(v36);
    if (!v38)
    {
      uint64_t v7 = 0;
      long long v8 = v36;
      if (!v36) {
        goto LABEL_13;
      }
LABEL_12:
      std::__shared_weak_count::__release_weak(v8);
      goto LABEL_13;
    }
    uint64_t v7 = v35;
    uint64_t v37 = v35;
    long long v8 = v36;
    if (v36) {
      goto LABEL_12;
    }
LABEL_13:
    unsigned int v10 = a3[1];
    unint64_t v9 = (unint64_t)a3[2];
    if ((unint64_t)v10 < v9)
    {
      *unsigned int v10 = v7;
      int v11 = v10 + 1;
      goto LABEL_37;
    }
    uint64_t v12 = a2;
    long long v13 = *a3;
    uint64_t v14 = (char *)v10 - (char *)*a3;
    uint64_t v15 = v14 >> 3;
    unint64_t v16 = (v14 >> 3) + 1;
    if (v16 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v17 = v9 - (void)v13;
    if (v17 >> 2 > v16) {
      unint64_t v16 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      if (v18 >> 61) {
        sub_2550EACF8();
      }
      unint64_t v19 = v18;
      int v20 = operator new(8 * v18);
      unint64_t v18 = v19;
    }
    else
    {
      int v20 = 0;
    }
    long long v21 = (uint64_t *)&v20[8 * v15];
    *long long v21 = v7;
    int v11 = v21 + 1;
    if (v10 == v13)
    {
      a2 = v12;
      goto LABEL_35;
    }
    unint64_t v22 = (char *)v10 - (char *)v13 - 8;
    if (v22 >= 0x58)
    {
      unint64_t v23 = (char *)v10 - v20 - v14;
      a2 = v12;
      if (v23 >= 0x20)
      {
        uint64_t v24 = (v22 >> 3) + 1;
        uint64_t v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        long long v26 = &v10[v25 / 0xFFFFFFFFFFFFFFF8];
        long long v21 = (uint64_t *)((char *)v21 - v25);
        long long v27 = &v20[8 * v15 - 16];
        long long v28 = v10 - 2;
        uint64_t v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          long long v30 = *(_OWORD *)v28;
          *(v27 - 1) = *((_OWORD *)v28 - 1);
          *long long v27 = v30;
          v27 -= 2;
          v28 -= 4;
          v29 -= 4;
        }
        while (v29);
        unsigned int v10 = v26;
        if (v24 == (v24 & 0x3FFFFFFFFFFFFFFCLL)) {
          goto LABEL_34;
        }
      }
    }
    else
    {
      a2 = v12;
    }
    do
    {
      uint64_t v31 = *--v10;
      *--long long v21 = v31;
    }
    while (v10 != v13);
LABEL_34:
    unsigned int v10 = *a3;
LABEL_35:
    *a3 = v21;
    a3[1] = v11;
    a3[2] = (uint64_t *)&v20[8 * v18];
    if (v10) {
      operator delete(v10);
    }
LABEL_37:
    a3[1] = v11;
    long long v32 = v38;
    if (v38 && !atomic_fetch_add(&v38->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
    v5 += 3;
  }
  while (v5 != v6);
  uint64_t v5 = (void **)__p;
  if (__p)
  {
LABEL_41:
    long long v33 = v40;
    long long v34 = v5;
    if (v40 != v5)
    {
      do
      {
        if (*((char *)v33 - 1) < 0) {
          operator delete(*(v33 - 3));
        }
        v33 -= 3;
      }
      while (v33 != v5);
      long long v34 = __p;
    }
    long long v40 = v5;
    operator delete(v34);
  }
}

void sub_255135784(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_2550EAA90((uint64_t)va);
  int v6 = *(void **)v4;
  if (*(void *)v4)
  {
    *(void *)(v4 + 8) = v6;
    operator delete(v6);
  }
  sub_2550EDF8C((void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_2551357BC(uint64_t a1)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) < 0)
  {
    sub_2550EABB0(__dst, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)a1;
    uint64_t v14 = *(void *)(a1 + 16);
  }
  if (v14 >= 0) {
    uint64_t v1 = (void **)((char *)__dst + HIBYTE(v14));
  }
  else {
    uint64_t v1 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
  }
  if (v14 >= 0) {
    uint64_t v2 = __dst;
  }
  else {
    uint64_t v2 = (void **)__dst[0];
  }
  for (; v2 != v1; uint64_t v2 = (void **)((char *)v2 + 1))
    *(unsigned char *)uint64_t v2 = __tolower(*(char *)v2);
  char v16 = 3;
  v15[0] = 7561825;
  int v17 = 6;
  v18[23] = 16;
  strcpy(v18, "channel-saturate");
  v20[23] = 5;
  int v19 = 10;
  strcpy(v20, "clamp");
  char v23 = 3;
  int v21 = 8;
  v22[0] = 7695461;
  int v24 = 18;
  v25[23] = 8;
  strcpy(v25, "identity");
  int v26 = 0;
  long long v27 = (char *)operator new(0x19uLL);
  long long v28 = xmmword_25513EDF0;
  strcpy(v27, "integer-linear-saturate");
  int v29 = 9;
  long long v30 = (char *)operator new(0x19uLL);
  long long v31 = xmmword_25513EDF0;
  strcpy(v30, "integer_linear_saturate");
  int v32 = 9;
  v33[23] = 10;
  strcpy(v33, "leaky-relu");
  int v34 = 2;
  v35[23] = 10;
  strcpy(v35, "leaky_relu");
  int v36 = 2;
  v37[23] = 9;
  strcpy(v37, "leakyrelu");
  int v38 = 2;
  v39[23] = 6;
  strcpy(v39, "linear");
  int v40 = 7;
  v41[23] = 4;
  strcpy(v41, "null");
  int v42 = 0;
  v43[23] = 4;
  strcpy(v43, "tanh");
  int v44 = 4;
  v45[23] = 4;
  strcpy(v45, "relu");
  int v46 = 1;
  v47[23] = 8;
  strcpy(v47, "saturate");
  int v48 = 9;
  v49[23] = 11;
  strcpy(v49, "scaled-tanh");
  int v50 = 5;
  v51[23] = 11;
  strcpy(v51, "scaled_tanh");
  int v52 = 5;
  v53[23] = 7;
  strcpy(v53, "sigmoid");
  int v54 = 3;
  v55[23] = 7;
  strcpy(v55, "softmax");
  int v56 = 11;
  v57[23] = 8;
  strcpy(v57, "softplus");
  int v58 = 16;
  v59[23] = 8;
  strcpy(v59, "softsign");
  int v60 = 17;
  v61[23] = 16;
  strcpy(v61, "thresholded_relu");
  int v62 = 28;
  v63[23] = 4;
  strcpy(v63, "tanh");
  int v64 = 4;
  *(_OWORD *)BNNSFilterParameters __p = 0u;
  *(_OWORD *)unsigned int v10 = 0u;
  int v11 = 1065353216;
  sub_255135E84((uint64_t)__p, (uint64_t)v15, (uint64_t)v15);
  sub_255135E84((uint64_t)__p, (uint64_t)v18, (uint64_t)v18);
  sub_255135E84((uint64_t)__p, (uint64_t)v20, (uint64_t)v20);
  sub_255135E84((uint64_t)__p, (uint64_t)v22, (uint64_t)v22);
  sub_255135E84((uint64_t)__p, (uint64_t)v25, (uint64_t)v25);
  sub_255135E84((uint64_t)__p, (uint64_t)&v27, (uint64_t)&v27);
  sub_255135E84((uint64_t)__p, (uint64_t)&v30, (uint64_t)&v30);
  sub_255135E84((uint64_t)__p, (uint64_t)v33, (uint64_t)v33);
  sub_255135E84((uint64_t)__p, (uint64_t)v35, (uint64_t)v35);
  sub_255135E84((uint64_t)__p, (uint64_t)v37, (uint64_t)v37);
  sub_255135E84((uint64_t)__p, (uint64_t)v39, (uint64_t)v39);
  sub_255135E84((uint64_t)__p, (uint64_t)v41, (uint64_t)v41);
  sub_255135E84((uint64_t)__p, (uint64_t)v43, (uint64_t)v43);
  sub_255135E84((uint64_t)__p, (uint64_t)v45, (uint64_t)v45);
  sub_255135E84((uint64_t)__p, (uint64_t)v47, (uint64_t)v47);
  sub_255135E84((uint64_t)__p, (uint64_t)v49, (uint64_t)v49);
  sub_255135E84((uint64_t)__p, (uint64_t)v51, (uint64_t)v51);
  sub_255135E84((uint64_t)__p, (uint64_t)v53, (uint64_t)v53);
  sub_255135E84((uint64_t)__p, (uint64_t)v55, (uint64_t)v55);
  sub_255135E84((uint64_t)__p, (uint64_t)v57, (uint64_t)v57);
  sub_255135E84((uint64_t)__p, (uint64_t)v59, (uint64_t)v59);
  sub_255135E84((uint64_t)__p, (uint64_t)v61, (uint64_t)v61);
  sub_255135E84((uint64_t)__p, (uint64_t)v63, (uint64_t)v63);
  uint64_t v3 = 92;
  do
  {
    if (SHIBYTE(__dst[v3 + 1]) < 0) {
      operator delete(*(void **)&v12[v3 * 8]);
    }
    v3 -= 4;
  }
  while (v3 * 8);
  uint64_t v4 = *((unsigned int *)sub_25513623C(__p, (uint64_t)__dst) + 10);
  uint64_t v5 = (void **)v10[0];
  if (v10[0])
  {
    do
    {
      long long v8 = (void **)*v5;
      if (*((char *)v5 + 39) < 0) {
        operator delete(v5[2]);
      }
      operator delete(v5);
      uint64_t v5 = v8;
    }
    while (v8);
  }
  int v6 = __p[0];
  __p[0] = 0;
  if (v6) {
    operator delete(v6);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
  return v4;
}

void sub_255135DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_255135E84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    uint64_t v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          uint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (char *)operator new(0x30uLL);
  v37[0] = v22;
  v37[1] = a1 + 16;
  char v38 = 0;
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = v10;
  char v23 = v22 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0(v23, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)char v23 = *(_OWORD *)a3;
    *((void *)v22 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v22 + 10) = *(_DWORD *)(a3 + 24);
  char v38 = 1;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    BOOL v26 = 1;
    if (v11 >= 3) {
      BOOL v26 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v11);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  int v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)v37[0] = *v34;
    *int v34 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v37[0])
    {
      unint64_t v35 = *(void *)(*(void *)v37[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v35 >= v11) {
          v35 %= v11;
        }
      }
      else
      {
        v35 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v37[0];
    }
  }
  uint64_t v15 = (uint64_t *)v37[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_255136220(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EF330((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25513623C(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_2551363C4()
{
}

void *sub_2551363D8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_2704457D0;
  result[1] = v3;
  return result;
}

uint64_t sub_255136420(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_2704457D0;
  a2[1] = v2;
  return result;
}

uint64_t sub_25513644C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 8))(a2, a3);
}

uint64_t *sub_25513645C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v37, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  unint64_t v22 = (char *)operator new(0x30uLL);
  v37[0] = v22;
  v37[1] = a1 + 16;
  char v38 = 0;
  *(void *)unint64_t v22 = 0;
  *((void *)v22 + 1) = v10;
  char v23 = v22 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0(v23, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)char v23 = *(_OWORD *)a3;
    *((void *)v22 + 4) = *(void *)(a3 + 16);
  }
  *((_DWORD *)v22 + 10) = *(_DWORD *)(a3 + 24);
  char v38 = 1;
  float v24 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v25 = *(float *)(a1 + 32);
  if (!v11 || (float)(v25 * (float)v11) < v24)
  {
    BOOL v26 = 1;
    if (v11 >= 3) {
      BOOL v26 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v27 = v26 | (2 * v11);
    unint64_t v28 = vcvtps_u32_f32(v24 / v25);
    if (v27 <= v28) {
      size_t prime = v28;
    }
    else {
      size_t prime = v27;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v30 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v30) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v30)
    {
      unint64_t v31 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v30 < 3uLL || (uint8x8_t v32 = (uint8x8_t)vcnt_s8(v30), v32.i16[0] = vaddlv_u8(v32), v32.u32[0] > 1uLL))
      {
        unint64_t v31 = std::__next_prime(v31);
      }
      else
      {
        uint64_t v33 = 1 << -(char)__clz(v31 - 1);
        if (v31 >= 2) {
          unint64_t v31 = v33;
        }
      }
      if (prime <= v31) {
        size_t prime = v31;
      }
      if (prime < *(void *)&v30) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  int v34 = *(void **)(*(void *)a1 + 8 * v3);
  if (v34)
  {
    *(void *)v37[0] = *v34;
    *int v34 = v37[0];
  }
  else
  {
    *(void *)v37[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v37[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v37[0])
    {
      unint64_t v35 = *(void *)(*(void *)v37[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v35 >= v11) {
          v35 %= v11;
        }
      }
      else
      {
        v35 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v35) = v37[0];
    }
  }
  uint64_t v15 = (uint64_t *)v37[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_2551367F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EF330((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_255136814(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t *sub_255136998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5 = (unsigned char *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v8 = v7;
  }
  unint64_t v9 = sub_2550EB6AC((uint64_t)v35, (uint64_t *)a2, v8);
  unint64_t v10 = v9;
  unint64_t v11 = *(void *)(a1 + 8);
  if (v11)
  {
    uint8x8_t v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    unint64_t v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      unint64_t v3 = v9;
      if (v9 >= v11) {
        unint64_t v3 = v9 % v11;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v9;
    }
    char v14 = *(uint64_t ***)(*(void *)a1 + 8 * v3);
    if (v14)
    {
      uint64_t v15 = *v14;
      if (*v14)
      {
        char v16 = v5[23];
        if (v16 >= 0) {
          uint64_t v17 = v5[23];
        }
        else {
          uint64_t v17 = *((void *)v5 + 1);
        }
        if (v16 < 0) {
          unint64_t v5 = *(unsigned char **)v5;
        }
        do
        {
          unint64_t v18 = v15[1];
          if (v18 == v10)
          {
            uint64_t v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0) {
              uint64_t v20 = *((unsigned __int8 *)v15 + 39);
            }
            else {
              uint64_t v20 = v15[3];
            }
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v5, v15[3])) {
                  return v15;
                }
              }
              else
              {
                if (!*((unsigned char *)v15 + 39)) {
                  return v15;
                }
                uint64_t v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v5[v21])
                {
                  if (v19 == ++v21) {
                    return v15;
                  }
                }
              }
            }
          }
          else
          {
            if (v13 <= 1)
            {
              v18 &= v11 - 1;
            }
            else if (v18 >= v11)
            {
              v18 %= v11;
            }
            if (v18 != v3) {
              break;
            }
          }
          uint64_t v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
  sub_255136D18(a1, v10, a3, (uint64_t)v35);
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v11 || (float)(v23 * (float)v11) < v22)
  {
    BOOL v24 = 1;
    if (v11 >= 3) {
      BOOL v24 = (v11 & (v11 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v11);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t prime = v26;
    }
    else {
      size_t prime = v25;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v28 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v28) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v28)
    {
      unint64_t v29 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v28 < 3uLL || (uint8x8_t v30 = (uint8x8_t)vcnt_s8(v28), v30.i16[0] = vaddlv_u8(v30), v30.u32[0] > 1uLL))
      {
        unint64_t v29 = std::__next_prime(v29);
      }
      else
      {
        uint64_t v31 = 1 << -(char)__clz(v29 - 1);
        if (v29 >= 2) {
          unint64_t v29 = v31;
        }
      }
      if (prime <= v29) {
        size_t prime = v29;
      }
      if (prime < *(void *)&v28) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v11 = *(void *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11) {
        unint64_t v3 = v10 % v11;
      }
      else {
        unint64_t v3 = v10;
      }
    }
    else
    {
      unint64_t v3 = (v11 - 1) & v10;
    }
  }
  uint8x8_t v32 = *(void **)(*(void *)a1 + 8 * v3);
  if (v32)
  {
    *(void *)v35[0] = *v32;
    *uint8x8_t v32 = v35[0];
  }
  else
  {
    *(void *)v35[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v35[0];
    *(void *)(*(void *)a1 + 8 * v3) = a1 + 16;
    if (*(void *)v35[0])
    {
      unint64_t v33 = *(void *)(*(void *)v35[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v33 >= v11) {
          v33 %= v11;
        }
      }
      else
      {
        v33 &= v11 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v33) = v35[0];
    }
  }
  uint64_t v15 = (uint64_t *)v35[0];
  ++*(void *)(a1 + 24);
  return v15;
}

void sub_255136D00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255136E38((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_255136D18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  unint64_t v8 = operator new(0x48uLL);
  unint64_t v9 = v8;
  *(void *)a4 = v8;
  *(void *)(a4 + 8) = v7;
  *(unsigned char *)(a4 + 16) = 0;
  void *v8 = 0;
  v8[1] = a2;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0((unsigned char *)v8 + 16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v8 + 1) = *(_OWORD *)a3;
    v8[4] = *(void *)(a3 + 16);
  }
  uint64_t result = *(void *)(a3 + 48);
  if (result)
  {
    if (result == a3 + 24)
    {
      v9[8] = v9 + 5;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 24))(result);
      goto LABEL_9;
    }
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 16))(result);
  }
  v9[8] = result;
LABEL_9:
  *(unsigned char *)(a4 + 16) = 1;
  return result;
}

void sub_255136E0C(_Unwind_Exception *a1)
{
  sub_255136E38(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_255136E38(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16))
    {
      uint64_t v3 = *(void *)(v2 + 64);
      if (v3 != v2 + 40)
      {
        if (v3) {
          (*(void (**)(uint64_t))(*(void *)v3 + 40))(v3);
        }
        if ((*(char *)(v2 + 39) & 0x80000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_10;
      }
      (*(void (**)(uint64_t))(*(void *)(v2 + 40) + 32))(v2 + 40);
      if (*(char *)(v2 + 39) < 0) {
LABEL_10:
      }
        operator delete(*(void **)(v2 + 16));
    }
LABEL_7:
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_255136EF4(uint64_t a1)
{
  uint64_t v2 = *(uint64_t ***)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      unint64_t v5 = *v2;
      unint64_t v6 = v2[8];
      if (v6 != (uint64_t *)(v2 + 5)) {
        break;
      }
      ((void (*)(uint64_t *))v2[5][4])((uint64_t *)v2 + 5);
      if (*((char *)v2 + 39) < 0) {
        goto LABEL_12;
      }
LABEL_5:
      operator delete(v2);
      uint64_t v2 = (uint64_t **)v5;
      if (!v5) {
        goto LABEL_2;
      }
    }
    if (v6) {
      (*(void (**)(uint64_t *))(*v6 + 40))(v6);
    }
    if ((*((char *)v2 + 39) & 0x80000000) == 0) {
      goto LABEL_5;
    }
LABEL_12:
    operator delete(v2[2]);
    goto LABEL_5;
  }
LABEL_2:
  uint64_t v3 = *(void **)a1;
  *(void *)a1 = 0;
  if (v3) {
    operator delete(v3);
  }
  return a1;
}

uint64_t *sub_255136FCC(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint8x8_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  unint64_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      unint64_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

uint64_t sub_255137150(uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  return result;
}

uint64_t sub_255137168(uint64_t **a1, uint64_t a2, uint64_t a3, void *a4, void **a5)
{
  char v14 = 11;
  strcpy((char *)__p, "plane_index");
  sub_25512974C(a4, (uint64_t)__p, (uint64_t)v15);
  if (v16) {
    sub_2550EE418();
  }
  size_t v8 = v15[0];
  int v16 = -1;
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  uint8x8_t v9 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)**a5 + 176))(**a5);
  uint64_t v10 = **a1;
  BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v9, v8);
  (*(void (**)(uint64_t, void *))(*(void *)v10 + 224))(v10, BaseAddressOfPlane);
  return a2 + 1;
}

void sub_255137270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_25513729C(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  int8x8_t v7 = (__CVBuffer *)(*(uint64_t (**)(void))(*(void *)**a1 + 168))(**a1);
  if (CVPixelBufferIsPlanar(v7))
  {
    size_t PlaneCount = CVPixelBufferGetPlaneCount(v7);
    if (!PlaneCount) {
      return a2 + 1;
    }
  }
  else
  {
    size_t PlaneCount = 1;
  }
  for (size_t i = 0; i != PlaneCount; ++i)
  {
    uint64_t v10 = *(void *)(*a5 + 8 * i);
    BaseAddressOfPlane = CVPixelBufferGetBaseAddressOfPlane(v7, i);
    (*(void (**)(uint64_t))(*(void *)v10 + 136))(v10);
    uint64_t v12 = sub_25512AAF0(v10);
    long long v13 = *(_OWORD *)(v12 + 144);
    long long v14 = *(_OWORD *)(v12 + 160);
    long long v15 = *(_OWORD *)(v12 + 112);
    *(_OWORD *)&v22.stride[7] = *(_OWORD *)(v12 + 128);
    long long v16 = *(_OWORD *)v12;
    long long v17 = *(_OWORD *)(v12 + 32);
    *(_OWORD *)&v22.size[1] = *(_OWORD *)(v12 + 16);
    *(_OWORD *)&v22.size[3] = v17;
    *(_OWORD *)&v22.flags = v16;
    long long v18 = *(_OWORD *)(v12 + 48);
    long long v19 = *(_OWORD *)(v12 + 64);
    long long v20 = *(_OWORD *)(v12 + 96);
    *(_OWORD *)&v22.stride[1] = *(_OWORD *)(v12 + 80);
    *(_OWORD *)&v22.stride[3] = v20;
    *(_OWORD *)&v22.size[5] = v18;
    *(_OWORD *)&v22.size[7] = v19;
    *(_OWORD *)&v22.data_type = v13;
    *(_OWORD *)&v22.table_data_type = v14;
    *(_OWORD *)&v22.stride[5] = v15;
    v22.data = BaseAddressOfPlane;
    BNNSCopy(&v22, (const BNNSNDArrayDescriptor *)v12, 0);
  }
  return a2 + 1;
}

uint64_t sub_2551373D4(uint64_t *a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  v5[0] = &unk_270445210;
  v5[1] = sub_255137168;
  unint64_t v6 = v5;
  sub_255112BE4(a1, 0, 0, 43, 0, 0, v5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(v5[0] + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))();
  }
  v3[0] = &unk_270445210;
  v3[1] = sub_25513729C;
  unint64_t v4 = v3;
  sub_255112BE4(a1, 0, 0, 44, 0, 0, v3);
  uint64_t result = (uint64_t)v4;
  if (v4 == v3) {
    return (*(uint64_t (**)(void *))(v3[0] + 32))(v3);
  }
  if (v4) {
    return (*(uint64_t (**)(void))(*v4 + 40))();
  }
  return result;
}

void sub_255137594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_255112064(va);
  _Unwind_Resume(a1);
}

void sub_2551375B4(const char *a1)
{
  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_255137610(exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_270445808, MEMORY[0x263F8C068]);
}

void sub_2551375FC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_255137610(std::logic_error *a1, const char *a2)
{
  uint64_t result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x263F8C390] + 16);
  return result;
}

uint64_t mlc_tensor_destroy(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)(a1 + 576);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_data(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 32);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_name(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 64);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_type(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 96);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_rank(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 128);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_dimension(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 616);
  uint64_t v5 = a2;
  uint64_t v6 = v2;
  uint64_t v3 = *(void *)(a1 + 160);
  if (!v3) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t mlc_tensor_stride(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 616);
  uint64_t v5 = a2;
  uint64_t v6 = v2;
  uint64_t v3 = *(void *)(a1 + 192);
  if (!v3) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t mlc_tensor_set_dimension(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 616);
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 448);
  if (!v3) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_set_stride(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 616);
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 480);
  if (!v3) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_alloc(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 224);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_set_data(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a1 + 616);
  uint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v3 = *(void *)(a1 + 544);
  if (!v3) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *, uint64_t *))(*(void *)v3 + 48))(v3, &v7, &v6, &v5);
}

uint64_t mlc_tensor_alignment(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 256);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_location(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 288);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

uint64_t mlc_tensor_event(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 616);
  uint64_t v1 = *(void *)(a1 + 320);
  if (!v1) {
    sub_2550FE96C();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 48))(v1, &v3);
}

double sub_255137B3C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = &unk_270444C98;
  *(void *)(a1 + 8) = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065353216;
  return result;
}

void sub_255137B74(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  if (a3)
  {
    std::streambuf::basic_streambuf();
    v104[8] = a2;
    v104[9] = a3;
    v104[2] = a2;
    void v104[3] = a2;
    uint64_t v98 = a2;
    void v104[4] = a2 + a3;
    v104[0] = &unk_270445638;
    uint64_t v103 = 0;
    v105.__vftable = (std::ios_base_vtbl *)&unk_270445738;
    std::ios_base::init(&v105, v104);
    int v107 = -1;
    long long v102 = &unk_2704455B0;
    v104[0] = &unk_270445638;
    uint64_t v106 = 0;
    v105.__vftable = (std::ios_base_vtbl *)&unk_2704456C0;
    uint64_t v6 = a1;
    uint64_t v7 = (void *)a1[1];
    std::streambuf::basic_streambuf();
    uint64_t v110 = a2;
    uint64_t v111 = a2;
    uint64_t v113 = a2;
    uint64_t v114 = a3;
    uint64_t v112 = a2 + a3;
    v108[1] = 0;
    *(void *)&long long v109 = &unk_270445638;
    v108[0] = &unk_270445710;
    v115.__vftable = (std::ios_base_vtbl *)&unk_270445738;
    std::ios_base::init(&v115, &v109);
    int v117 = -1;
    v108[0] = &unk_2704455B0;
    *(void *)&long long v109 = &unk_270445638;
    uint64_t v116 = 0;
    v115.__vftable = (std::ios_base_vtbl *)&unk_2704456C0;
    LODWORD(__sz) = 0;
    std::istream::read();
    sub_2551080CC((uint64_t)__p);
    uint8x8_t v9 = (void *)std::ostream::operator<<();
    uint64_t v10 = sub_2551084AC(v9, (uint64_t)"-byte binary does not begin with the proper magic. ", 51);
    sub_2551084AC(v10, (uint64_t)"Invalid pointer given for binary data.", 38);
    if ((BYTE8(v126) & 0x10) != 0)
    {
      uint64_t v13 = v126;
      if ((unint64_t)v126 < *((void *)&v123 + 1))
      {
        *(void *)&long long v126 = *((void *)&v123 + 1);
        uint64_t v13 = *((void *)&v123 + 1);
      }
      long long v14 = (const void **)&v123;
    }
    else
    {
      if ((BYTE8(v126) & 8) == 0)
      {
        size_t v11 = 0;
        HIBYTE(v100) = 0;
        p_dst = (void **)&__dst;
        goto LABEL_20;
      }
      long long v14 = (const void **)&__p[3];
      uint64_t v13 = *((void *)&v122 + 1);
    }
    long long v15 = *v14;
    size_t v11 = v13 - (void)*v14;
    if (v11 > 0x7FFFFFFFFFFFFFF7) {
      sub_2550EAC50();
    }
    if (v11 >= 0x17)
    {
      uint64_t v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17) {
        uint64_t v16 = v11 | 7;
      }
      uint64_t v17 = v16 + 1;
      p_dst = (void **)operator new(v16 + 1);
      *(void *)&long long v100 = v11;
      *((void *)&v100 + 1) = v17 | 0x8000000000000000;
      std::string __dst = p_dst;
    }
    else
    {
      HIBYTE(v100) = v13 - *(unsigned char *)v14;
      p_dst = (void **)&__dst;
      if (!v11)
      {
LABEL_20:
        *((unsigned char *)p_dst + v11) = 0;
        sub_25513A900(v7, 5, (uint64_t)&__dst);
        if (SHIBYTE(v100) < 0) {
          operator delete(__dst);
        }
        __p[0] = *(void **)MEMORY[0x263F8C2C8];
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
        __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
        if (SHIBYTE(v125) < 0) {
          operator delete(*((void **)&v124 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x25A288660](v127);
        std::istream::~istream();
        MEMORY[0x25A288660](&v115);
        std::streambuf::~streambuf();
        if (!sub_25513A9F4((uint64_t)v7))
        {
          char v21 = 0;
          BNNSNDArrayDescriptor v22 = 0;
          float v23 = 0;
          BOOL v24 = 0;
          goto LABEL_50;
        }
        std::streambuf::basic_streambuf();
        uint64_t v110 = a2;
        uint64_t v111 = a2;
        uint64_t v113 = a2;
        uint64_t v114 = a3;
        uint64_t v112 = a2 + a3;
        v108[1] = 0;
        *(void *)&long long v109 = &unk_270445638;
        v108[0] = &unk_270445710;
        v115.__vftable = (std::ios_base_vtbl *)&unk_270445738;
        std::ios_base::init(&v115, &v109);
        int v117 = -1;
        v108[0] = &unk_2704455B0;
        *(void *)&long long v109 = &unk_270445638;
        uint64_t v116 = 0;
        v115.__vftable = (std::ios_base_vtbl *)&unk_2704456C0;
        *__error() = 0;
        long long v18 = (void **)((char *)v108 + *((void *)v108[0] - 4));
        uint64_t v19 = v18[8];
        uint64_t v20 = v19 + v18[9];
        v18[2] = v19;
        void v18[3] = v19;
        v18[4] = v20;
        LODWORD(__sz) = -1;
        std::istream::read();
        if ((*((unsigned char *)&v110 + *((void *)v108[0] - 3)) & 5) == 0 && __sz == 1885728080)
        {
          __p[0] = 0;
          std::istream::read();
          char v21 = (char *)__p[0];
          std::istream::read();
          BNNSNDArrayDescriptor v22 = (char *)__p[0];
          std::istream::read();
          float v23 = __p[0];
          std::istream::read();
          BOOL v24 = (char *)__p[0];
LABEL_49:
          std::istream::~istream();
          MEMORY[0x25A288660](&v115);
          std::streambuf::~streambuf();
LABEL_50:
          if (!sub_25513A9F4(v6[1])) {
            goto LABEL_147;
          }
          unint64_t v35 = (void *)v6[1];
          int v36 = (void **)((char *)&v102 + *(v102 - 4));
          uint64_t v37 = v36[8];
          uint64_t v38 = v37 + v36[9];
          void v36[2] = v37;
          void v36[3] = &v21[v37];
          v36[4] = v38;
          size_t __sz = 0;
          std::istream::read();
          sub_2551080CC((uint64_t)__p);
          sub_2551084AC(__p, (uint64_t)"'", 1);
          long long v39 = (void *)std::ostream::operator<<();
          sub_2551084AC(v39, (uint64_t)"'-byte buffer is too large for listing.", 39);
          if ((BYTE8(v126) & 0x10) != 0)
          {
            uint64_t v42 = v126;
            if ((unint64_t)v126 < *((void *)&v123 + 1))
            {
              *(void *)&long long v126 = *((void *)&v123 + 1);
              uint64_t v42 = *((void *)&v123 + 1);
            }
            long long v43 = (const void **)&v123;
          }
          else
          {
            if ((BYTE8(v126) & 8) == 0)
            {
              size_t v40 = 0;
              BYTE7(v109) = 0;
              uint64_t v41 = v108;
              goto LABEL_66;
            }
            long long v43 = (const void **)&__p[3];
            uint64_t v42 = *((void *)&v122 + 1);
          }
          int v44 = *v43;
          size_t v40 = v42 - (void)*v43;
          if (v40 > 0x7FFFFFFFFFFFFFF7) {
            sub_2550EAC50();
          }
          if (v40 >= 0x17)
          {
            uint64_t v45 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17) {
              uint64_t v45 = v40 | 7;
            }
            uint64_t v46 = v45 + 1;
            uint64_t v41 = operator new(v45 + 1);
            v108[1] = (void *)v40;
            *(void *)&long long v109 = v46 | 0x8000000000000000;
            v108[0] = v41;
          }
          else
          {
            BYTE7(v109) = v42 - *(unsigned char *)v43;
            uint64_t v41 = v108;
            if (!v40)
            {
LABEL_66:
              *((unsigned char *)v41 + v40) = 0;
              sub_25513A900(v35, 5, (uint64_t)v108);
              if (SBYTE7(v109) < 0) {
                operator delete(v108[0]);
              }
              long long v100 = 0uLL;
              std::string __dst = 0;
              __p[0] = *(void **)MEMORY[0x263F8C2C8];
              *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
              __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
              if (SHIBYTE(v125) < 0) {
                operator delete(*((void **)&v124 + 1));
              }
              std::streambuf::~streambuf();
              std::ostream::~ostream();
              MEMORY[0x25A288660](v127);
              long long v47 = (void *)v6[2];
              if (v47)
              {
                void v6[3] = (uint64_t)v47;
                operator delete(v47);
                unsigned char v6[2] = 0;
                void v6[3] = 0;
                void v6[4] = 0;
              }
              int v48 = __dst;
              unsigned char v6[2] = (uint64_t)__dst;
              long long v49 = (void **)v100;
              *(_OWORD *)(v6 + 3) = v100;
              if (v48 != v49)
              {
                int v50 = (void *)v6[1];
                long long v51 = (void **)((char *)&v102 + *(v102 - 4));
                uint64_t v52 = v51[8];
                uint64_t v53 = v52 + v51[9];
                v51[2] = v52;
                v51[3] = &v22[v52];
                v51[4] = v53;
                size_t __sz = 0;
                std::istream::read();
                sub_255139A1C(v108, __sz);
                long long v97 = v23;
                if (!__sz)
                {
                  long long v54 = *(_OWORD *)v108;
                  long long v55 = (char *)v109;
LABEL_119:
                  int v77 = (void **)(v6 + 5);
                  uint64_t v78 = v6[5];
                  if (v78)
                  {
                    long long v96 = v54;
                    uint64_t v79 = v6[6];
                    int v80 = (void *)v6[5];
                    if (v79 != v78)
                    {
                      uint64_t v81 = v6[6];
                      do
                      {
                        long long v83 = *(void **)(v81 - 24);
                        v81 -= 24;
                        long long v82 = v83;
                        if (v83)
                        {
                          *(void *)(v79 - 16) = v82;
                          operator delete(v82);
                        }
                        uint64_t v79 = v81;
                      }
                      while (v81 != v78);
                      int v80 = *v77;
                    }
                    v6[6] = v78;
                    operator delete(v80);
                    void *v77 = 0;
                    v6[6] = 0;
                    v6[7] = 0;
                    long long v54 = v96;
                  }
                  *(_OWORD *)(v6 + 5) = v54;
                  v6[7] = (uint64_t)v55;
                  long long v84 = (void **)((char *)&v102 + *(v102 - 4));
                  uint64_t v85 = v84[8];
                  uint64_t v86 = v85 + v84[9];
                  v84[2] = v85;
                  void v84[3] = &v24[v85];
                  v84[4] = v86;
                  unint64_t v120 = 0;
                  std::istream::read();
                  *(_OWORD *)long long v108 = 0u;
                  long long v109 = 0u;
                  LODWORD(v110) = 1065353216;
                  std::istream::read();
                  if (v120)
                  {
                    for (unint64_t i = 0; i < v120; ++i)
                    {
                      int v119 = 0;
                      std::istream::read();
                      long long v126 = 0u;
                      memset(v127, 0, 144);
                      long long v124 = 0u;
                      long long v125 = 0u;
                      long long v122 = 0u;
                      long long v123 = 0u;
                      memset(__p, 0, sizeof(__p));
                      std::istream::read();
                      uint64_t v118 = 0;
                      std::istream::read();
                      uint64_t v88 = v118;
                      size_t v89 = strlen((const char *)__p);
                      if (v89 > 0x7FFFFFFFFFFFFFF7) {
                        sub_2550EAC50();
                      }
                      size_t v90 = v89;
                      if (v89 >= 0x17)
                      {
                        uint64_t v92 = (v89 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v89 | 7) != 0x17) {
                          uint64_t v92 = v89 | 7;
                        }
                        uint64_t v93 = v92 + 1;
                        long long v91 = (void **)operator new(v92 + 1);
                        *(void *)&long long v100 = v90;
                        *((void *)&v100 + 1) = v93 | 0x8000000000000000;
                        std::string __dst = v91;
                      }
                      else
                      {
                        HIBYTE(v100) = v89;
                        long long v91 = (void **)&__dst;
                        if (!v89) {
                          goto LABEL_138;
                        }
                      }
                      memcpy(v91, __p, v90);
LABEL_138:
                      *((unsigned char *)v91 + v90) = 0;
                      size_t __sz = (size_t)&__dst;
                      *((void *)sub_255139AE8((uint64_t)v108, (uint64_t)&__dst, (uint64_t)&unk_25513EFB0, (long long **)&__sz)+ 5) = v88;
                      if (SHIBYTE(v100) < 0) {
                        operator delete(__dst);
                      }
                    }
                  }
                  sub_25513A064(v6 + 8);
                  uint64_t v94 = v109;
                  if ((void)v109)
                  {
                    if (*(char *)(v109 + 39) < 0)
                    {
                      sub_2550EABB0(__p, *(void **)(v109 + 16), *(void *)(v109 + 24));
                    }
                    else
                    {
                      *(_OWORD *)BNNSFilterParameters __p = *(_OWORD *)(v109 + 16);
                      __p[2] = *(void **)(v109 + 32);
                    }
                    __p[3] = *(void **)(v94 + 40);
                    size_t __sz = (size_t)v97 + v98 + (unint64_t)__p[3];
                    operator new();
                  }
                  long long v95 = v108[0];
                  v108[0] = 0;
                  if (v95) {
                    operator delete(v95);
                  }
                  goto LABEL_147;
                }
                unint64_t v120 = 0;
                std::istream::read();
                if (v103 == 8)
                {
                  sub_2551080CC((uint64_t)__p);
                  long long v61 = (void *)std::ostream::operator<<();
                  sub_2551084AC(v61, (uint64_t)"-byte kernel #", 14);
                  int v62 = (void *)std::ostream::operator<<();
                  sub_2551084AC(v62, (uint64_t)" is too large for binary.", 25);
                  if ((BYTE8(v126) & 0x10) != 0)
                  {
                    uint64_t v65 = v126;
                    if ((unint64_t)v126 < *((void *)&v123 + 1))
                    {
                      *(void *)&long long v126 = *((void *)&v123 + 1);
                      uint64_t v65 = *((void *)&v123 + 1);
                    }
                    long long v66 = (const void **)&v123;
                  }
                  else
                  {
                    if ((BYTE8(v126) & 8) == 0)
                    {
                      size_t v59 = 0;
                      HIBYTE(v100) = 0;
                      int v60 = (void **)&__dst;
                      goto LABEL_107;
                    }
                    long long v66 = (const void **)&__p[3];
                    uint64_t v65 = *((void *)&v122 + 1);
                  }
                  long long v67 = *v66;
                  size_t v59 = v65 - (void)*v66;
                  if (v59 > 0x7FFFFFFFFFFFFFF7) {
                    sub_2550EAC50();
                  }
                  if (v59 >= 0x17)
                  {
                    uint64_t v70 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v59 | 7) != 0x17) {
                      uint64_t v70 = v59 | 7;
                    }
                    uint64_t v71 = v70 + 1;
                    int v60 = (void **)operator new(v70 + 1);
                    *(void *)&long long v100 = v59;
                    *((void *)&v100 + 1) = v71 | 0x8000000000000000;
                    std::string __dst = v60;
                  }
                  else
                  {
                    HIBYTE(v100) = v65 - *(unsigned char *)v66;
                    int v60 = (void **)&__dst;
                    if (!v59) {
                      goto LABEL_107;
                    }
                  }
                }
                else
                {
                  sub_2551080CC((uint64_t)__p);
                  sub_2551084AC(__p, (uint64_t)"Read only ", 10);
                  int v56 = (void *)std::ostream::operator<<();
                  sub_2551084AC(v56, (uint64_t)" bytes (instead of ", 19);
                  long long v57 = (void *)std::ostream::operator<<();
                  sub_2551084AC(v57, (uint64_t)") for kernel ", 13);
                  int v58 = (void *)std::ostream::operator<<();
                  sub_2551084AC(v58, (uint64_t)".", 1);
                  if ((BYTE8(v126) & 0x10) != 0)
                  {
                    uint64_t v63 = v126;
                    if ((unint64_t)v126 < *((void *)&v123 + 1))
                    {
                      *(void *)&long long v126 = *((void *)&v123 + 1);
                      uint64_t v63 = *((void *)&v123 + 1);
                    }
                    int v64 = (const void **)&v123;
                  }
                  else
                  {
                    if ((BYTE8(v126) & 8) == 0)
                    {
                      size_t v59 = 0;
                      HIBYTE(v100) = 0;
                      int v60 = (void **)&__dst;
LABEL_107:
                      *((unsigned char *)v60 + v59) = 0;
                      sub_25513A900(v50, 5, (uint64_t)&__dst);
                      if (SHIBYTE(v100) < 0) {
                        operator delete(__dst);
                      }
                      __p[0] = *(void **)MEMORY[0x263F8C2C8];
                      *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
                      __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
                      if (SHIBYTE(v125) < 0) {
                        operator delete(*((void **)&v124 + 1));
                      }
                      std::streambuf::~streambuf();
                      std::ostream::~ostream();
                      MEMORY[0x25A288660](v127);
                      long long v55 = (char *)v108[0];
                      long long v54 = 0uLL;
                      if (v108[0])
                      {
                        int v72 = v108[1];
                        int v73 = v108[0];
                        if (v108[1] != v108[0])
                        {
                          int v74 = (char *)v108[1];
                          do
                          {
                            int v76 = (void *)*((void *)v74 - 3);
                            v74 -= 24;
                            int v75 = v76;
                            if (v76)
                            {
                              *(v72 - 2) = v75;
                              operator delete(v75);
                            }
                            int v72 = v74;
                          }
                          while (v74 != v55);
                          int v73 = v108[0];
                        }
                        v108[1] = v55;
                        operator delete(v73);
                        long long v55 = 0;
                        long long v54 = 0uLL;
                      }
                      goto LABEL_119;
                    }
                    int v64 = (const void **)&__p[3];
                    uint64_t v63 = *((void *)&v122 + 1);
                  }
                  long long v67 = *v64;
                  size_t v59 = v63 - (void)*v64;
                  if (v59 > 0x7FFFFFFFFFFFFFF7) {
                    sub_2550EAC50();
                  }
                  if (v59 >= 0x17)
                  {
                    uint64_t v68 = (v59 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v59 | 7) != 0x17) {
                      uint64_t v68 = v59 | 7;
                    }
                    uint64_t v69 = v68 + 1;
                    int v60 = (void **)operator new(v68 + 1);
                    *(void *)&long long v100 = v59;
                    *((void *)&v100 + 1) = v69 | 0x8000000000000000;
                    std::string __dst = v60;
                  }
                  else
                  {
                    HIBYTE(v100) = v63 - *(unsigned char *)v64;
                    int v60 = (void **)&__dst;
                    if (!v59) {
                      goto LABEL_107;
                    }
                  }
                }
                memmove(v60, v67, v59);
                goto LABEL_107;
              }
LABEL_147:
              std::istream::~istream();
              MEMORY[0x25A288660](&v105);
              std::streambuf::~streambuf();
              return;
            }
          }
          memmove(v41, v44, v40);
          goto LABEL_66;
        }
        sub_2551080CC((uint64_t)__p);
        unint64_t v25 = sub_2551084AC(__p, (uint64_t)"Segment table starts with 0x", 28);
        *(_DWORD *)((char *)v25 + *(void *)(*v25 - 24) + 8) = *(_DWORD *)((unsigned char *)v25 + *(void *)(*v25 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 8;
        unint64_t v26 = (void *)std::ostream::operator<<();
        unint64_t v27 = sub_2551084AC(v26, (uint64_t)" instead ", 9);
        sub_2551084AC(v27, (uint64_t)"of magic value.", 15);
        if ((BYTE8(v126) & 0x10) != 0)
        {
          uint64_t v30 = v126;
          if ((unint64_t)v126 < *((void *)&v123 + 1))
          {
            *(void *)&long long v126 = *((void *)&v123 + 1);
            uint64_t v30 = *((void *)&v123 + 1);
          }
          uint64_t v31 = (const void **)&v123;
        }
        else
        {
          if ((BYTE8(v126) & 8) == 0)
          {
            size_t v28 = 0;
            HIBYTE(v100) = 0;
            unint64_t v29 = (void **)&__dst;
            goto LABEL_44;
          }
          uint64_t v31 = (const void **)&__p[3];
          uint64_t v30 = *((void *)&v122 + 1);
        }
        uint8x8_t v32 = *v31;
        size_t v28 = v30 - (void)*v31;
        if (v28 > 0x7FFFFFFFFFFFFFF7) {
          sub_2550EAC50();
        }
        if (v28 >= 0x17)
        {
          uint64_t v33 = (v28 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v28 | 7) != 0x17) {
            uint64_t v33 = v28 | 7;
          }
          uint64_t v34 = v33 + 1;
          unint64_t v29 = (void **)operator new(v33 + 1);
          *(void *)&long long v100 = v28;
          *((void *)&v100 + 1) = v34 | 0x8000000000000000;
          std::string __dst = v29;
        }
        else
        {
          HIBYTE(v100) = v30 - *(unsigned char *)v31;
          unint64_t v29 = (void **)&__dst;
          if (!v28) {
            goto LABEL_44;
          }
        }
        memmove(v29, v32, v28);
LABEL_44:
        *((unsigned char *)v29 + v28) = 0;
        sub_25513A900(v7, 5, (uint64_t)&__dst);
        if (SHIBYTE(v100) < 0) {
          operator delete(__dst);
        }
        __p[0] = *(void **)MEMORY[0x263F8C2C8];
        *(void **)((char *)__p + *((void *)__p[0] - 3)) = *(void **)(MEMORY[0x263F8C2C8] + 24);
        __p[1] = (void *)(MEMORY[0x263F8C318] + 16);
        if (SHIBYTE(v125) < 0) {
          operator delete(*((void **)&v124 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x25A288660](v127);
        char v21 = 0;
        BNNSNDArrayDescriptor v22 = 0;
        float v23 = 0;
        BOOL v24 = 0;
        goto LABEL_49;
      }
    }
    memmove(p_dst, v15, v11);
    goto LABEL_20;
  }
  size_t v8 = (void *)a1[1];
  __p[0] = operator new(0x20uLL);
  *(_OWORD *)&__p[1] = xmmword_25513EFA0;
  strcpy((char *)__p[0], "Deserializing 0-byte buffer?");
  sub_25513A900(v8, 5, (uint64_t)__p);
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2551395B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_2551083A8((uint64_t)&STACK[0x270]);
  sub_255123890(&a56);
  JUMPOUT(0x255139808);
}

void sub_255139784(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    __cxa_rethrow();
  }
  JUMPOUT(0x255139810);
}

void sub_25513979C()
{
  if (SLOBYTE(STACK[0x287]) < 0) {
    operator delete((void *)STACK[0x270]);
  }
  JUMPOUT(0x255139800);
}

void sub_2551397FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
}

uint64_t sub_255139818(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_255139820(uint64_t a1)
{
  return a1 + 40;
}

void sub_255139828(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (unint64_t i = *(uint64_t **)(a1 + 80); i; unint64_t i = (uint64_t *)*i)
  {
    while (1)
    {
      if (*((char *)i + 39) < 0)
      {
        sub_2550EABB0(__p, (void *)i[2], i[3]);
      }
      else
      {
        *(_OWORD *)BNNSFilterParameters __p = *((_OWORD *)i + 1);
        uint64_t v8 = i[4];
      }
      uint64_t v5 = i[5];
      unint64_t v4 = (std::__shared_weak_count *)i[6];
      uint64_t v9 = v5;
      uint64_t v10 = v4;
      if (v4)
      {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v5 = v9;
      }
      long long v11 = *(_OWORD *)(i + 7);
      uint64_t v12 = __p;
      sub_25513A548(a2, (uint64_t)__p, (uint64_t)&unk_25513EFB0, (long long **)&v12)[5] = v5;
      uint64_t v6 = v10;
      if (v10)
      {
        if (!atomic_fetch_add(&v10->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (SHIBYTE(v8) < 0) {
        break;
      }
      unint64_t i = (uint64_t *)*i;
      if (!i) {
        return;
      }
    }
    operator delete(__p[0]);
  }
}

void sub_255139970(_Unwind_Exception *a1)
{
  sub_2551236F4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_255139994(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2 && !atomic_fetch_add(&v2->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if ((*(char *)(a1 + 23) & 0x80000000) == 0) {
      return a1;
    }
    goto LABEL_4;
  }
  if (*(char *)(a1 + 23) < 0) {
LABEL_4:
  }
    operator delete(*(void **)a1);
  return a1;
}

void *sub_255139A1C(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL) {
      sub_2550EAEEC();
    }
    unint64_t v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    size_t v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_255139AC8(_Unwind_Exception *exception_object)
{
  if (*(void *)v1) {
    sub_25513D828((void **)(v1 + 8), *(char **)v1, (void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_255139AE8(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)*v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = *((void *)v16 + 1);
          if (v19 == v11)
          {
            uint64_t v20 = v16[39];
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = v16[39];
            }
            else {
              uint64_t v21 = *((void *)v16 + 3);
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v16 + 2), v6, *((void *)v16 + 3))) {
                  return v16;
                }
              }
              else
              {
                if (!v16[39]) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (v16[v22 + 16] == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          uint64_t v16 = *(unsigned __int8 **)v16;
        }
        while (v16);
      }
    }
  }
  float v23 = (void *)(a1 + 16);
  uint64_t v16 = (unsigned __int8 *)operator new(0x30uLL);
  v40[0] = v16;
  v40[1] = a1 + 16;
  *(void *)uint64_t v16 = 0;
  *((void *)v16 + 1) = v11;
  BOOL v24 = *a4;
  long long v25 = **a4;
  *((void *)v16 + 4) = *((void *)*a4 + 2);
  *((_OWORD *)v16 + 1) = v25;
  *((void *)v24 + 1) = 0;
  *((void *)v24 + 2) = 0;
  *(void *)BOOL v24 = 0;
  *((void *)v16 + 5) = 0;
  char v41 = 1;
  float v26 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v27 = *(float *)(a1 + 32);
  if (!v12 || (float)(v27 * (float)v12) < v26)
  {
    BOOL v28 = 1;
    if (v12 >= 3) {
      BOOL v28 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v29 = v28 | (2 * v12);
    unint64_t v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30) {
      size_t prime = v30;
    }
    else {
      size_t prime = v29;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v32 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v32) {
      goto LABEL_49;
    }
    if (prime < *(void *)&v32)
    {
      unint64_t v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v32 < 3uLL || (uint8x8_t v34 = (uint8x8_t)vcnt_s8(v32), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (prime <= v33) {
        size_t prime = v33;
      }
      if (prime < *(void *)&v32) {
LABEL_49:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v36 = *(void *)a1;
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)uint64_t v16 = *v37;
LABEL_73:
    void *v37 = v16;
    goto LABEL_74;
  }
  *(void *)uint64_t v16 = *v23;
  *float v23 = v16;
  *(void *)(v36 + 8 * v4) = v23;
  if (*(void *)v16)
  {
    unint64_t v38 = *(void *)(*(void *)v16 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v38 >= v12) {
        v38 %= v12;
      }
    }
    else
    {
      v38 &= v12 - 1;
    }
    uint64_t v37 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_73;
  }
LABEL_74:
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_255139E5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EF330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_255139E74(void **a1, size_t a2)
{
  size_t v5 = (char *)a1[1];
  unint64_t v4 = a1[2];
  uint64_t v6 = v5;
  if (v4 - v5 < a2)
  {
    uint64_t v7 = (char *)*a1;
    unint64_t v8 = v5 - (unsigned char *)*a1;
    unint64_t v9 = v8 + a2;
    if ((uint64_t)(v8 + a2) < 0) {
      sub_2550EAEEC();
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint8x8_t v13 = &v12[v8];
    unint64_t v14 = &v12[v11];
    long long v15 = &v12[v8 + a2];
    bzero(&v12[v8], a2);
    if (v5 == v7)
    {
      v12 += v8;
      goto LABEL_32;
    }
    if (v8 >= 8 && (unint64_t)(v7 - v12) >= 0x20)
    {
      if (v8 < 0x20)
      {
        unint64_t v16 = 0;
        goto LABEL_24;
      }
      unint64_t v16 = v8 & 0xFFFFFFFFFFFFFFE0;
      char v17 = v5 - 16;
      uint64_t v18 = &v12[v5 - 16 - v7];
      unint64_t v19 = v8 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        long long v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)uint64_t v18 = v20;
        v18 -= 32;
        v17 -= 32;
        v19 -= 32;
      }
      while (v19);
      if (v8 == v16) {
        goto LABEL_31;
      }
      if ((v8 & 0x18) != 0)
      {
LABEL_24:
        uint64_t v6 = &v5[-(v8 & 0xFFFFFFFFFFFFFFF8)];
        v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
        uint64_t v21 = &v5[-v16 - 8];
        uint64_t v22 = &v12[v21 - v7];
        unint64_t v23 = v16 - (v8 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          uint64_t v24 = *(void *)v21;
          v21 -= 8;
          *(void *)uint64_t v22 = v24;
          v22 -= 8;
          v23 += 8;
        }
        while (v23);
        if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8)) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      v13 -= v16;
      uint64_t v6 = &v5[-v16];
    }
LABEL_29:
    long long v25 = v13 - 1;
    do
    {
      char v26 = *--v6;
      *v25-- = v26;
    }
    while (v6 != v7);
LABEL_31:
    uint64_t v6 = (char *)*a1;
LABEL_32:
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v14;
    if (v6)
    {
      operator delete(v6);
    }
    return;
  }
  if (a2)
  {
    bzero(v5, a2);
    uint64_t v6 = &v5[a2];
  }
  a1[1] = v6;
}

void sub_25513A064(void *a1)
{
  if (a1[3])
  {
    uint64_t v2 = (char *)a1[2];
    if (v2)
    {
      do
      {
        uint64_t v3 = *(char **)v2;
        unint64_t v4 = (std::__shared_weak_count *)*((void *)v2 + 6);
        if (v4 && !atomic_fetch_add(&v4->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        if (v2[39] < 0) {
          operator delete(*((void **)v2 + 2));
        }
        operator delete(v2);
        uint64_t v2 = v3;
      }
      while (v3);
    }
    a1[2] = 0;
    uint64_t v5 = a1[1];
    if (v5)
    {
      for (uint64_t i = 0; i != v5; ++i)
        *(void *)(*a1 + 8 * i) = 0;
    }
    a1[3] = 0;
  }
}

void sub_25513A148(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x25A2886C0);
}

uint64_t *sub_25513A188(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  unint64_t v23 = (char *)operator new(0x48uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *(void *)unint64_t v23 = 0;
  *((void *)v23 + 1) = v11;
  uint64_t v24 = v23 + 16;
  long long v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    *((void *)v23 + 4) = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v24 = v26;
  }
  *(_OWORD *)(v23 + 56) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  unint64_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25513A52C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_25511EF78((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_25513A548(uint64_t a1, uint64_t a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (unsigned char *)a2;
  unint64_t v8 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v9 = v8;
  }
  unint64_t v10 = sub_2550EB6AC((uint64_t)v40, (uint64_t *)a2, v9);
  unint64_t v11 = v10;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    unint64_t v14 = v13.u32[0];
    if (v13.u32[0] > 1uLL)
    {
      unint64_t v4 = v10;
      if (v10 >= v12) {
        unint64_t v4 = v10 % v12;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v10;
    }
    long long v15 = *(uint64_t ***)(*(void *)a1 + 8 * v4);
    if (v15)
    {
      unint64_t v16 = *v15;
      if (*v15)
      {
        char v17 = v6[23];
        if (v17 >= 0) {
          uint64_t v18 = v6[23];
        }
        else {
          uint64_t v18 = *((void *)v6 + 1);
        }
        if (v17 < 0) {
          uint64_t v6 = *(unsigned char **)v6;
        }
        do
        {
          unint64_t v19 = v16[1];
          if (v19 == v11)
          {
            uint64_t v20 = *((unsigned __int8 *)v16 + 39);
            if ((v20 & 0x80u) == 0) {
              uint64_t v21 = *((unsigned __int8 *)v16 + 39);
            }
            else {
              uint64_t v21 = v16[3];
            }
            if (v21 == v18)
            {
              if ((v20 & 0x80) != 0)
              {
                if (!memcmp((const void *)v16[2], v6, v16[3])) {
                  return v16;
                }
              }
              else
              {
                if (!*((unsigned char *)v16 + 39)) {
                  return v16;
                }
                uint64_t v22 = 0;
                while (*((unsigned __int8 *)v16 + v22 + 16) == v6[v22])
                {
                  if (v20 == ++v22) {
                    return v16;
                  }
                }
              }
            }
          }
          else
          {
            if (v14 <= 1)
            {
              v19 &= v12 - 1;
            }
            else if (v19 >= v12)
            {
              v19 %= v12;
            }
            if (v19 != v4) {
              break;
            }
          }
          unint64_t v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
    }
  }
  unint64_t v23 = operator new(0x30uLL);
  v40[0] = v23;
  v40[1] = a1 + 16;
  char v41 = 0;
  *unint64_t v23 = 0;
  v23[1] = v11;
  uint64_t v24 = v23 + 2;
  long long v25 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_2550EABB0(v24, *(void **)v25, *((void *)v25 + 1));
  }
  else
  {
    long long v26 = *v25;
    v23[4] = *((void *)v25 + 2);
    *(_OWORD *)uint64_t v24 = v26;
  }
  v23[5] = 0;
  char v41 = 1;
  float v27 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v28 = *(float *)(a1 + 32);
  if (!v12 || (float)(v28 * (float)v12) < v27)
  {
    BOOL v29 = 1;
    if (v12 >= 3) {
      BOOL v29 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v30 = v29 | (2 * v12);
    unint64_t v31 = vcvtps_u32_f32(v27 / v28);
    if (v30 <= v31) {
      size_t prime = v31;
    }
    else {
      size_t prime = v30;
    }
    if (prime == 1)
    {
      size_t prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      size_t prime = std::__next_prime(prime);
    }
    int8x8_t v33 = *(int8x8_t *)(a1 + 8);
    if (prime > *(void *)&v33) {
      goto LABEL_52;
    }
    if (prime < *(void *)&v33)
    {
      unint64_t v34 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(void *)&v33 < 3uLL || (uint8x8_t v35 = (uint8x8_t)vcnt_s8(v33), v35.i16[0] = vaddlv_u8(v35), v35.u32[0] > 1uLL))
      {
        unint64_t v34 = std::__next_prime(v34);
      }
      else
      {
        uint64_t v36 = 1 << -(char)__clz(v34 - 1);
        if (v34 >= 2) {
          unint64_t v34 = v36;
        }
      }
      if (prime <= v34) {
        size_t prime = v34;
      }
      if (prime < *(void *)&v33) {
LABEL_52:
      }
        sub_2550EBAE4(a1, prime);
    }
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        unint64_t v4 = v11 % v12;
      }
      else {
        unint64_t v4 = v11;
      }
    }
    else
    {
      unint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v37 = *(void **)(*(void *)a1 + 8 * v4);
  if (v37)
  {
    *(void *)v40[0] = *v37;
    void *v37 = v40[0];
  }
  else
  {
    *(void *)v40[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v40[0];
    *(void *)(*(void *)a1 + 8 * v4) = a1 + 16;
    if (*(void *)v40[0])
    {
      unint64_t v38 = *(void *)(*(void *)v40[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v38 >= v12) {
          v38 %= v12;
        }
      }
      else
      {
        v38 &= v12 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v38) = v40[0];
    }
  }
  unint64_t v16 = (uint64_t *)v40[0];
  ++*(void *)(a1 + 24);
  return v16;
}

void sub_25513A8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_2550EF330((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_25513A900(void *a1, int a2, uint64_t a3)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0(&v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    __n128 v11 = *(__n128 *)a3;
    uint64_t v12 = *(void *)(a3 + 16);
  }
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_25513AB18((uint64_t)a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  uint64_t v8 = *(void *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F);
  *(_DWORD *)uint64_t v8 = a2;
  __n128 result = v11;
  *(void *)(v8 + 24) = v12;
  *(__n128 *)(v8 + 8) = result;
  ++a1[5];
  return result;
}

void sub_25513A9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_25513A9F4(uint64_t a1)
{
  return *(void *)(a1 + 40) == 0;
}

uint64_t sub_25513AA04(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + ((*(void *)(a1 + 32) >> 4) & 0xFFFFFFFFFFFFFF8))
       + 32 * (*(void *)(a1 + 32) & 0x7FLL);
}

void sub_25513AA24(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (!*(void *)(a1 + 40)) {
    sub_2551375B4("deque");
  }
  unint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
  *a2 = *(_DWORD *)v4;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = (void **)(v4 + 8);
  if (*(char *)(v4 + 31) < 0)
  {
    sub_2550EABB0(v5, *v6, *(void *)(v4 + 16));
    unint64_t v3 = *(void *)(a1 + 32);
    uint64_t v8 = *(void *)(*(void *)(a1 + 8) + ((v3 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v3 & 0x7F);
    if (*(char *)(v8 + 31) < 0)
    {
      operator delete(*(void **)(v8 + 8));
      unint64_t v3 = *(void *)(a1 + 32);
    }
  }
  else
  {
    long long v7 = *(_OWORD *)v6;
    *((void *)v5 + 2) = *(void *)(v4 + 24);
    *(_OWORD *)uint64_t v5 = v7;
  }
  uint64_t v9 = *(void *)(a1 + 40) - 1;
  unint64_t v10 = v3 + 1;
  *(void *)(a1 + 32) = v10;
  *(void *)(a1 + 40) = v9;
  if (v10 >= 0x100)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 128;
  }
}

void sub_25513AB18(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = v2 >= 0x80;
  unint64_t v4 = v2 - 128;
  if (v3)
  {
    *(void *)(a1 + 32) = v4;
    uint64_t v6 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    long long v7 = (char *)(v6 + 1);
    uint64_t v8 = *v6;
    *(void *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_56:
      *(void *)uint64_t v5 = v8;
      *(void *)(a1 + 16) += 8;
      return;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v29 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v29 = 1;
      }
      if (!(v29 >> 61))
      {
        unint64_t v30 = v29 >> 2;
        uint64_t v31 = 8 * v29;
        int8x8_t v32 = (char *)operator new(8 * v29);
        int8x8_t v33 = &v32[8 * v30];
        unint64_t v34 = &v32[v31];
        int64_t v36 = v5 - v7;
        BOOL v35 = v5 == v7;
        uint64_t v5 = v33;
        if (!v35)
        {
          uint64_t v5 = &v33[v36 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v37 = v36 - 8;
          if ((unint64_t)(v36 - 8) >= 0x38)
          {
            uint64_t v53 = &v32[8 * v30];
            unint64_t v38 = v53;
            if ((unint64_t)(v53 - v7) >= 0x20)
            {
              uint64_t v54 = (v37 >> 3) + 1;
              uint64_t v55 = 8 * (v54 & 0x3FFFFFFFFFFFFFFCLL);
              unint64_t v38 = &v33[v55];
              v7 += v55;
              int v56 = (long long *)(v6 + 3);
              long long v57 = v53 + 16;
              uint64_t v58 = v54 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v59 = *v56;
                *(v57 - 1) = *(v56 - 1);
                *long long v57 = v59;
                v56 += 2;
                v57 += 2;
                v58 -= 4;
              }
              while (v58);
              if (v54 == (v54 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            unint64_t v38 = &v32[8 * v30];
          }
          do
          {
            uint64_t v60 = *(void *)v7;
            v7 += 8;
            *(void *)unint64_t v38 = v60;
            v38 += 8;
          }
          while (v38 != v5);
        }
        goto LABEL_54;
      }
LABEL_64:
      sub_2550EACF8();
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    if (v11 >= -1) {
      uint64_t v12 = v11 + 1;
    }
    else {
      uint64_t v12 = v11 + 2;
    }
    uint64_t v13 = v12 >> 1;
    uint64_t v14 = -v13;
    long long v15 = &v7[-8 * v13];
    int64_t v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      long long v7 = *(char **)(a1 + 8);
    }
    uint64_t v5 = &v15[v16];
    *(void *)(a1 + 8) = &v7[8 * v14];
    *(void *)(a1 + 16) = &v15[v16];
    goto LABEL_56;
  }
  uint64_t v18 = *(char **)(a1 + 8);
  char v17 = *(char **)(a1 + 16);
  uint64_t v19 = v17 - v18;
  uint64_t v20 = (v17 - v18) >> 3;
  uint64_t v21 = *(char **)(a1 + 24);
  uint64_t v22 = (uint64_t)&v21[-*(void *)a1];
  if (v20 < (unint64_t)(v22 >> 3))
  {
    if (v21 != v17)
    {
      *(void *)&long long v69 = operator new(0x1000uLL);
      sub_255126408((char **)a1, &v69);
      return;
    }
    *(void *)&long long v69 = operator new(0x1000uLL);
    sub_255126598((void **)a1, &v69);
    long long v39 = *(void **)(a1 + 8);
    uint64_t v5 = *(char **)(a1 + 16);
    long long v7 = (char *)(v39 + 1);
    uint64_t v8 = *v39;
    *(void *)(a1 + 8) = v39 + 1;
    if (v5 != *(char **)(a1 + 24)) {
      goto LABEL_56;
    }
    uint64_t v9 = *(char **)a1;
    uint64_t v10 = (uint64_t)&v7[-*(void *)a1];
    if ((unint64_t)v7 <= *(void *)a1)
    {
      unint64_t v40 = (v5 - v9) >> 2;
      if (v5 == v9) {
        unint64_t v40 = 1;
      }
      if (!(v40 >> 61))
      {
        unint64_t v41 = v40 >> 2;
        uint64_t v42 = 8 * v40;
        int8x8_t v32 = (char *)operator new(8 * v40);
        int8x8_t v33 = &v32[8 * v41];
        unint64_t v34 = &v32[v42];
        int64_t v43 = v5 - v7;
        BOOL v35 = v5 == v7;
        uint64_t v5 = v33;
        if (!v35)
        {
          uint64_t v5 = &v33[v43 & 0xFFFFFFFFFFFFFFF8];
          unint64_t v44 = v43 - 8;
          if ((unint64_t)(v43 - 8) >= 0x38)
          {
            long long v61 = &v32[8 * v41];
            uint64_t v45 = v61;
            if ((unint64_t)(v61 - v7) >= 0x20)
            {
              uint64_t v62 = (v44 >> 3) + 1;
              uint64_t v63 = 8 * (v62 & 0x3FFFFFFFFFFFFFFCLL);
              uint64_t v45 = &v33[v63];
              v7 += v63;
              int v64 = (long long *)(v39 + 3);
              uint64_t v65 = v61 + 16;
              uint64_t v66 = v62 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                long long v67 = *v64;
                *(v65 - 1) = *(v64 - 1);
                *uint64_t v65 = v67;
                v64 += 2;
                v65 += 2;
                v66 -= 4;
              }
              while (v66);
              if (v62 == (v62 & 0x3FFFFFFFFFFFFFFCLL)) {
                goto LABEL_54;
              }
            }
          }
          else
          {
            uint64_t v45 = &v32[8 * v41];
          }
          do
          {
            uint64_t v68 = *(void *)v7;
            v7 += 8;
            *(void *)uint64_t v45 = v68;
            v45 += 8;
          }
          while (v45 != v5);
        }
LABEL_54:
        *(void *)a1 = v32;
        *(void *)(a1 + 8) = v33;
        *(void *)(a1 + 16) = v5;
        *(void *)(a1 + 24) = v34;
        if (v9)
        {
          operator delete(v9);
          uint64_t v5 = *(char **)(a1 + 16);
        }
        goto LABEL_56;
      }
      goto LABEL_64;
    }
    goto LABEL_5;
  }
  uint64_t v23 = v22 >> 2;
  if (v21 == *(char **)a1) {
    unint64_t v24 = 1;
  }
  else {
    unint64_t v24 = v23;
  }
  uint64_t v71 = a1 + 24;
  if (v24 >> 61) {
    goto LABEL_64;
  }
  long long v25 = (char *)operator new(8 * v24);
  long long v26 = &v25[8 * v20];
  *(void *)&long long v69 = v25;
  *((void *)&v69 + 1) = v26;
  *(void *)&long long v70 = v26;
  *((void *)&v70 + 1) = &v25[8 * v24];
  float v27 = operator new(0x1000uLL);
  if (v20 == v24)
  {
    if (v19 < 1)
    {
      if (v17 == v18) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = v19 >> 2;
      }
      if (v46 >> 61) {
        sub_2550EACF8();
      }
      long long v47 = (char *)operator new(8 * v46);
      long long v26 = &v47[8 * (v46 >> 2)];
      *(void *)&long long v69 = v47;
      *((void *)&v69 + 1) = v26;
      *((void *)&v70 + 1) = &v47[8 * v46];
      operator delete(v25);
      char v17 = *(char **)(a1 + 16);
    }
    else
    {
      unint64_t v28 = v20 + 2;
      if (v20 >= -1) {
        unint64_t v28 = v20 + 1;
      }
      v26 -= 8 * (v28 >> 1);
      *((void *)&v69 + 1) = v26;
    }
  }
  *(void *)long long v26 = v27;
  *(void *)&long long v70 = v26 + 8;
  uint64_t v48 = -7 - (void)v17;
  while (v17 != *(char **)(a1 + 8))
  {
    v17 -= 8;
    v48 += 8;
    sub_255126598((void **)&v69, v17);
  }
  long long v49 = *(char **)a1;
  long long v50 = v69;
  long long v51 = v70;
  *(void *)&long long v69 = *(void *)a1;
  *((void *)&v69 + 1) = v17;
  long long v52 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a1 = v50;
  *(_OWORD *)(a1 + 16) = v51;
  long long v70 = v52;
  if (v17 != (char *)v52) {
    *(void *)&long long v70 = v52 + (-(v52 + v48) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v49) {
    operator delete(v49);
  }
}

void sub_25513AF40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11)
{
  operator delete(v11);
  if (!__p) {
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  _Unwind_Resume(a1);
}

void mlc_event_create()
{
}

uint64_t mlc_event_record(uint64_t result)
{
  if (result) {
    atomic_store(1uLL, (unint64_t *)(result + 8));
  }
  return result;
}

uint64_t mlc_event_reset(uint64_t result)
{
  if (result) {
    atomic_store(0, (unint64_t *)(result + 8));
  }
  return result;
}

unint64_t mlc_event_query(uint64_t a1)
{
  if (a1) {
    return atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire);
  }
  else {
    return -1;
  }
}

unint64_t mlc_event_wait(uint64_t a1)
{
  if (!a1) {
    return -1;
  }
  long long v4 = xmmword_25513E030;
  unint64_t v2 = (atomic_ullong *)(a1 + 8);
  while (!atomic_load_explicit((atomic_ullong *volatile)(a1 + 8), memory_order_acquire))
    nanosleep((const timespec *)&v4, 0);
  return atomic_load_explicit(v2, memory_order_acquire);
}

uint64_t mlc_event_destroy(uint64_t result)
{
  if (result) {
    JUMPOUT(0x25A2886C0);
  }
  return result;
}

void *sub_25513B0B8(size_t size)
{
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x10uLL, size, 0x54CC857uLL)) {
    return 0;
  }
  else {
    return memptr;
  }
}

void sub_25513B0FC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v6 = sub_25513C7E8((void *)(a1 + 8), a2);
  if (v6) {
    goto LABEL_18;
  }
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  unint64_t v9 = v8 + 2;
  if (v8 + 2 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  if (v9 >= 0x17)
  {
    uint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17) {
      uint64_t v11 = v9 | 7;
    }
    uint64_t v12 = v11 + 1;
    uint64_t v13 = (char *)operator new(v11 + 1);
    size_t v19 = v8 + 2;
    unint64_t v20 = v12 | 0x8000000000000000;
    BNNSFilterParameters __p = v13;
    *(_WORD *)uint64_t v13 = 11565;
    uint64_t v10 = v13 + 2;
  }
  else
  {
    size_t v19 = 0;
    unint64_t v20 = 0;
    HIBYTE(v20) = v8 + 2;
    uint64_t v10 = (char *)&__p + 2;
    BNNSFilterParameters __p = (void *)11565;
    if (!v8) {
      goto LABEL_16;
    }
  }
  if (v7 >= 0) {
    uint64_t v14 = (const char *)a2;
  }
  else {
    uint64_t v14 = *(const char **)a2;
  }
  memmove(v10, v14, v8);
LABEL_16:
  v10[v8] = 0;
  long long v15 = sub_25513C7E8(v5, (uint64_t)&__p);
  uint64_t v6 = v15;
  if (SHIBYTE(v20) < 0)
  {
    operator delete(__p);
    if (v6)
    {
LABEL_18:
      *(unsigned char *)a3 = 0;
      *(_DWORD *)(a3 + 24) = -1;
      uint64_t v16 = *((unsigned int *)v6 + 16);
      if (v16 != -1)
      {
        ((void (*)(char *, uint64_t, uint64_t *))off_270445870[v16])(&v21, a3, v6 + 5);
        *(_DWORD *)(a3 + 24) = v16;
      }
      return;
    }
  }
  else if (v15)
  {
    goto LABEL_18;
  }
  if (*(char *)(a2 + 23) >= 0) {
    char v17 = (const char *)a2;
  }
  else {
    char v17 = *(const char **)a2;
  }
  fprintf((FILE *)*MEMORY[0x263EF8348], "ICE: option '%s' not found.\n", v17);
  *(unsigned char *)a3 = 0;
  *(_DWORD *)(a3 + 24) = 0;
}

void sub_25513B298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_25513B2B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v13 = *(unsigned int *)(v11 + 24);
  if (v13 != -1) {
    ((void (*)(char *, uint64_t))off_270445858[v13])(&a11, v11);
  }
  *(_DWORD *)(v11 + 24) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_25513B2F0(uint64_t a1, uint64_t a2)
{
  sub_25513B0FC(a1, a2, (uint64_t)v3);
  if (v4) {
    sub_2550EE418();
  }
  return v3[0];
}

void sub_25513B330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_25513B344(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 24);
  if (v2 != -1) {
    ((void (*)(char *, uint64_t))off_270445858[v2])(&v4, a1);
  }
  *(_DWORD *)(a1 + 24) = -1;
  return a1;
}

double sub_25513B3A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_25513B0FC(a1, a2, (uint64_t)&v5);
  if (v7 != 2) {
    sub_2550EE418();
  }
  double result = *(double *)&v5;
  *(_OWORD *)a3 = v5;
  *(void *)(a3 + 16) = v6;
  return result;
}

void sub_25513B3F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_25513B408(char **a1, long long *a2)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  char v4 = a1 + 7;
  uint64_t v31 = (uint64_t **)(a1 + 6);
  sub_2551043B8((uint64_t)(a1 + 6), a1[7]);
  *(v4 - 1) = v4;
  *char v4 = 0;
  v4[1] = 0;
  unint64_t v41 = 0;
  uint64_t v42 = 0;
  unint64_t v43 = 0;
  sub_25512CA18((uint64_t *)v35, a2, 8);
  std::string::value_type v5 = 0;
  memset(&v34, 0, sizeof(v34));
  memset(&__p, 0, sizeof(__p));
  do
  {
    std::string::value_type v6 = std::istream::get();
    if (v6 <= 33)
    {
      if (v6 != -1)
      {
        if (v6 != 32 || v5)
        {
LABEL_3:
          std::string::append(&v34, 1uLL, v6);
          continue;
        }
        std::string::size_type size = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v34.__r_.__value_.__l.__size_;
        }
        if (!size)
        {
LABEL_21:
          std::string::value_type v5 = 0;
          continue;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_2550EABB0(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) != 0) {
            goto LABEL_52;
          }
LABEL_19:
          std::string v48 = v34;
        }
        else
        {
          std::string __dst = __p;
          if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0) {
            goto LABEL_19;
          }
LABEL_52:
          sub_2550EABB0(&v48, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
        }
        uint64_t v14 = v42;
        if ((unint64_t)v42 >= v43)
        {
          uint64_t v42 = sub_25513C548((void **)&v41, (uint64_t)&__dst);
          if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v48.__r_.__value_.__l.__data_);
            if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_58;
            }
          }
          else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_58;
          }
LABEL_55:
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        else
        {
          long long v15 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
          *((void *)v42 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
          *(_OWORD *)uint64_t v14 = v15;
          memset(&__dst, 0, sizeof(__dst));
          std::string::size_type v16 = v48.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v14 + 24) = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
          *((void *)v14 + 5) = v16;
          memset(&v48, 0, sizeof(v48));
          uint64_t v42 = v14 + 48;
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
            goto LABEL_55;
          }
        }
LABEL_58:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v17 = &v34;
          }
          else {
            char v17 = (std::string *)v34.__r_.__value_.__r.__words[0];
          }
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v18 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v18 = v34.__r_.__value_.__l.__size_;
          }
          sub_2550EE2F4((void **)&__p.__r_.__value_.__l.__data_, v17, v18);
        }
        else
        {
          if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0)
          {
            std::string __p = v34;
LABEL_70:
            std::string::value_type v5 = 0;
LABEL_71:
            *((unsigned char *)&v34.__r_.__value_.__s + 23) = 0;
            v34.__r_.__value_.__s.__data_[0] = 0;
            continue;
          }
          sub_2550EE22C(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
        }
        if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_70;
        }
        std::string::value_type v5 = 0;
        goto LABEL_73;
      }
    }
    else
    {
      if (v6 == 34 || v6 == 39)
      {
        if (v6 == v5) {
          goto LABEL_21;
        }
        if (v5) {
          goto LABEL_3;
        }
        std::string::value_type v5 = v6;
        continue;
      }
      if (v6 != 92) {
        goto LABEL_3;
      }
      std::string::value_type v6 = std::istream::get();
      if (v6 != -1) {
        goto LABEL_3;
      }
    }
    std::string::size_type v8 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v8 = v34.__r_.__value_.__l.__size_;
    }
    if (v8)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_2550EABB0(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_30;
        }
LABEL_27:
        std::string v48 = v34;
      }
      else
      {
        std::string __dst = __p;
        if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0) {
          goto LABEL_27;
        }
LABEL_30:
        sub_2550EABB0(&v48, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      }
      unint64_t v9 = v42;
      if ((unint64_t)v42 >= v43)
      {
        uint64_t v42 = sub_25513C548((void **)&v41, (uint64_t)&__dst);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v48.__r_.__value_.__l.__data_);
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_36;
          }
        }
        else if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          goto LABEL_36;
        }
LABEL_33:
        operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_36;
      }
      long long v10 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *((void *)v42 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v9 = v10;
      memset(&__dst, 0, sizeof(__dst));
      std::string::size_type v11 = v48.__r_.__value_.__r.__words[2];
      *(_OWORD *)(v9 + 24) = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
      *((void *)v9 + 5) = v11;
      memset(&v48, 0, sizeof(v48));
      uint64_t v42 = v9 + 48;
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_33;
      }
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v34;
        }
        else {
          uint64_t v12 = (std::string *)v34.__r_.__value_.__r.__words[0];
        }
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v13 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v13 = v34.__r_.__value_.__l.__size_;
        }
        sub_2550EE2F4((void **)&__p.__r_.__value_.__l.__data_, v12, v13);
      }
      else
      {
        if ((*((unsigned char *)&v34.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          std::string __p = v34;
          goto LABEL_71;
        }
        sub_2550EE22C(&__p, v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
      }
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_71;
      }
LABEL_73:
      v34.__r_.__value_.__l.__size_ = 0;
      *v34.__r_.__value_.__l.__data_ = 0;
    }
  }
  while ((v37[*((void *)v35[0] - 3)] & 2) == 0);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_2550EABB0(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v45 = __p;
  }
  unint64_t v46 = (std::string *)&unk_25513FB65;
  sub_25513C6FC((uint64_t)&__dst, (long long *)&v45);
  size_t v19 = v42;
  if ((unint64_t)v42 < v43)
  {
    long long v20 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    *((void *)v42 + 2) = *((void *)&__dst.__r_.__value_.__l + 2);
    *(_OWORD *)size_t v19 = v20;
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = 0uLL;
    std::string::size_type v21 = v48.__r_.__value_.__r.__words[2];
    *(_OWORD *)(v19 + 24) = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
    *((void *)v19 + 5) = v21;
    __dst.__r_.__value_.__r.__words[2] = 0;
    memset(&v48, 0, sizeof(v48));
    uint64_t v42 = v19 + 48;
    goto LABEL_87;
  }
  uint64_t v42 = sub_25513C548((void **)&v41, (uint64_t)&__dst);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v48.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_81;
    }
LABEL_87:
    if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_88;
    }
LABEL_82:
    operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_83;
    }
LABEL_89:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
LABEL_84:
    }
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  else
  {
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_87;
    }
LABEL_81:
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_82;
    }
LABEL_88:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_89;
    }
LABEL_83:
    operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_84;
    }
  }
  v35[0] = *(void **)MEMORY[0x263F8C2C0];
  int8x8_t v32 = v35[0];
  uint64_t v22 = *(void **)(MEMORY[0x263F8C2C0] + 24);
  *(void **)((char *)v35 + *((void *)v35[0] - 3)) = v22;
  uint64_t v36 = MEMORY[0x263F8C318] + 16;
  if (v39 < 0) {
    operator delete(v38);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x25A288660](v40);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_270445898;
  v48.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_2704458E0;
  unint64_t v46 = &v45;
  unint64_t v24 = v41;
  uint64_t v23 = v42;
  if (v41 == v42)
  {
LABEL_149:
    (*(void (**)(std::string *))(v45.__r_.__value_.__r.__words[0] + 32))(&v45);
    goto LABEL_150;
  }
  char v25 = 0;
  while (2)
  {
    if (!v46) {
LABEL_168:
    }
      sub_2550FE96C();
    if (!(*(unsigned int (**)(std::string *, char *))(v46->__r_.__value_.__r.__words[0] + 48))(v46, v24))
    {
      if (!v48.__r_.__value_.__r.__words[0]) {
        goto LABEL_168;
      }
      if (!(*(unsigned int (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                           + 48))(v48.__r_.__value_.__r.__words[0], v24))goto LABEL_107;
      if (!v48.__r_.__value_.__r.__words[0]) {
        goto LABEL_168;
      }
      if (((*(uint64_t (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_ + 48))(v48.__r_.__value_.__r.__words[0], v24 + 24) & 1) == 0)
      {
        if (v24[47] < 0)
        {
          if (!*((void *)v24 + 4)) {
            goto LABEL_134;
          }
        }
        else if (!v24[47])
        {
          goto LABEL_134;
        }
        if ((*((unsigned int (**)(char **, char *))*a1 + 3))(a1, v24))
        {
          (*((void (**)(char **, char *, char *))*a1 + 2))(a1, v24, v24 + 24);
LABEL_140:
          char v25 = 1;
          goto LABEL_96;
        }
      }
      else
      {
LABEL_107:
        if (!v48.__r_.__value_.__r.__words[0]) {
          goto LABEL_168;
        }
        if (!(*(unsigned int (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                             + 48))(v48.__r_.__value_.__r.__words[0], v24))goto LABEL_111;
        if (!v48.__r_.__value_.__r.__words[0]) {
          goto LABEL_168;
        }
        if (!(*(unsigned int (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                             + 48))(v48.__r_.__value_.__r.__words[0], v24 + 24))
        {
LABEL_111:
          if (!v48.__r_.__value_.__r.__words[0]) {
            goto LABEL_168;
          }
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                          + 48))(v48.__r_.__value_.__r.__words[0], v24) & 1) == 0)
          {
            if (!v48.__r_.__value_.__r.__words[0]) {
              goto LABEL_168;
            }
            if ((*(unsigned int (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                                + 48))(v48.__r_.__value_.__r.__words[0], v24 + 24))
            {
              if (v25) {
                goto LABEL_95;
              }
              if (v24[23] < 0)
              {
                if (!*((void *)v24 + 1)) {
                  goto LABEL_95;
                }
              }
              else if (!v24[23])
              {
                goto LABEL_95;
              }
LABEL_145:
              sub_25513CBD8(v31, (const void **)v24, (uint64_t)v24);
              goto LABEL_95;
            }
          }
          if (!v48.__r_.__value_.__r.__words[0]) {
            goto LABEL_168;
          }
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                          + 48))(v48.__r_.__value_.__r.__words[0], v24) & 1) != 0)goto LABEL_96;
          if (!v48.__r_.__value_.__r.__words[0]) {
            goto LABEL_168;
          }
          if (((*(uint64_t (**)(std::string::size_type, char *))(*(void *)v48.__r_.__value_.__l.__data_
                                                                          + 48))(v48.__r_.__value_.__r.__words[0], v24 + 24) & 1) != 0)goto LABEL_96;
          if (v24[23] < 0)
          {
            if (*((void *)v24 + 1)) {
              goto LABEL_144;
            }
          }
          else if (v24[23])
          {
            goto LABEL_144;
          }
          if (v24[47] < 0)
          {
            if (*((void *)v24 + 4)) {
              goto LABEL_139;
            }
          }
          else if (v24[47])
          {
LABEL_139:
            sub_25513CBD8(v31, (const void **)v24 + 3, (uint64_t)(v24 + 24));
            goto LABEL_140;
          }
LABEL_144:
          if (v25) {
            goto LABEL_95;
          }
          goto LABEL_145;
        }
      }
LABEL_134:
      HIBYTE(v36) = 4;
      strcpy((char *)v35, "true");
      (*((void (**)(char **, char *, void **))*a1 + 2))(a1, v24, v35);
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      goto LABEL_95;
    }
    sub_25512CA18((uint64_t *)v35, (long long *)v24, 8);
    memset(&v34, 0, sizeof(v34));
    memset(&__p, 0, sizeof(__p));
    sub_25513C244(v35, (uint64_t)&v34, 0x3Du);
    std::ios_base::getloc((const std::ios_base *)((char *)v35 + *((void *)v35[0] - 3)));
    long long v26 = std::locale::use_facet(&v44, MEMORY[0x263F8C108]);
    unsigned __int8 v27 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v26->__vftable[2].~facet_0)(v26, 10);
    std::locale::~locale(&v44);
    sub_25513C244(v35, (uint64_t)&__p, v27);
    (*((void (**)(char **, std::string *, std::string *))*a1 + 2))(a1, &v34, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_127;
      }
    }
    else
    {
      if ((SHIBYTE(v34.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_101;
      }
LABEL_127:
      operator delete(v34.__r_.__value_.__l.__data_);
    }
LABEL_101:
    v35[0] = v32;
    *(void **)((char *)v35 + *((void *)v32 - 3)) = v22;
    uint64_t v36 = MEMORY[0x263F8C318] + 16;
    if (v39 < 0) {
      operator delete(v38);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    MEMORY[0x25A288660](v40);
LABEL_95:
    char v25 = 0;
LABEL_96:
    v24 += 48;
    if (v24 != v23) {
      continue;
    }
    break;
  }
  if (v46 == &v45) {
    goto LABEL_149;
  }
  if (v46) {
    (*(void (**)(void))(v46->__r_.__value_.__r.__words[0] + 40))();
  }
LABEL_150:
  if ((std::string *)v48.__r_.__value_.__l.__data_ == &__dst)
  {
    (*(void (**)(std::string *))(__dst.__r_.__value_.__r.__words[0] + 32))(&__dst);
    unint64_t v28 = v41;
    if (!v41) {
      return;
    }
LABEL_156:
    unint64_t v29 = v42;
    unint64_t v30 = v28;
    if (v42 == v28)
    {
LABEL_164:
      uint64_t v42 = v28;
      operator delete(v30);
      return;
    }
    while (1)
    {
      if (*(v29 - 1) < 0)
      {
        operator delete(*((void **)v29 - 3));
        if (*(v29 - 25) < 0) {
          goto LABEL_162;
        }
      }
      else if (*(v29 - 25) < 0)
      {
LABEL_162:
        operator delete(*((void **)v29 - 6));
      }
      v29 -= 48;
      if (v29 == v28)
      {
        unint64_t v30 = v41;
        goto LABEL_164;
      }
    }
  }
  if (v48.__r_.__value_.__r.__words[0]) {
    (*(void (**)(void))(*(void *)v48.__r_.__value_.__l.__data_ + 40))();
  }
  unint64_t v28 = v41;
  if (v41) {
    goto LABEL_156;
  }
}

void sub_25513C120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  sub_25512CB9C((uint64_t)&a25);
  sub_25513C4B8((void **)(v30 - 208));
  _Unwind_Resume(a1);
}

void *sub_25513C244(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x25A288510](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    int v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    std::string::size_type v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_25513C3A4(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x25513C364);
  }
  __cxa_rethrow();
}

void sub_25513C420(_Unwind_Exception *a1)
{
}

void *sub_25513C434(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void **sub_25513C4B8(void **a1)
{
  uint64_t v2 = (void **)*a1;
  if (*a1)
  {
    BOOL v3 = (void **)a1[1];
    char v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0) {
LABEL_9:
        }
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        char v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

char *sub_25513C548(void **a1, uint64_t a2)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[1] - (unsigned char *)*a1) >> 4);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555) {
    sub_2550EAEEC();
  }
  if (0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) > v4) {
    unint64_t v4 = 0x5555555555555556 * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v4;
  }
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_2550EACF8();
    }
    int v7 = (char *)operator new(48 * v6);
  }
  else
  {
    int v7 = 0;
  }
  std::string::size_type v8 = &v7[48 * v3];
  *((void *)v8 + 2) = *(void *)(a2 + 16);
  *(_OWORD *)std::string::size_type v8 = *(_OWORD *)a2;
  int v9 = &v7[48 * v6];
  long long v10 = *(_OWORD *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((void *)v8 + 5) = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  char v11 = v8 + 48;
  uint64_t v12 = (char *)*a1;
  size_t v13 = (char *)a1[1];
  if (v13 == *a1)
  {
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    if (!v13) {
      return v11;
    }
    goto LABEL_23;
  }
  do
  {
    long long v14 = *((_OWORD *)v13 - 3);
    *((void *)v8 - 4) = *((void *)v13 - 4);
    *((_OWORD *)v8 - 3) = v14;
    *((void *)v13 - 5) = 0;
    *((void *)v13 - 4) = 0;
    *((void *)v13 - 6) = 0;
    long long v15 = *(_OWORD *)(v13 - 24);
    *((void *)v8 - 1) = *((void *)v13 - 1);
    *(_OWORD *)(v8 - 24) = v15;
    v8 -= 48;
    *((void *)v13 - 2) = 0;
    *((void *)v13 - 1) = 0;
    *((void *)v13 - 3) = 0;
    v13 -= 48;
  }
  while (v13 != v12);
  std::string::size_type v16 = (char *)*a1;
  size_t v13 = (char *)a1[1];
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
  if (v13 != v16)
  {
    while (1)
    {
      if (*(v13 - 1) < 0)
      {
        operator delete(*((void **)v13 - 3));
        if (*(v13 - 25) < 0) {
LABEL_20:
        }
          operator delete(*((void **)v13 - 6));
      }
      else if (*(v13 - 25) < 0)
      {
        goto LABEL_20;
      }
      v13 -= 48;
      if (v13 == v16)
      {
        size_t v13 = v16;
        break;
      }
    }
  }
  if (v13) {
LABEL_23:
  }
    operator delete(v13);
  return v11;
}

uint64_t sub_25513C6FC(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = (void *)(a1 + 24);
  std::string::value_type v5 = (const char *)*((void *)a2 + 3);
  size_t v6 = strlen(v5);
  if (v6 >= 0x7FFFFFFFFFFFFFF8) {
    sub_2550EAC50();
  }
  size_t v7 = v6;
  if (v6 >= 0x17)
  {
    uint64_t v8 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17) {
      uint64_t v8 = v6 | 7;
    }
    uint64_t v9 = v8 + 1;
    unint64_t v4 = operator new(v8 + 1);
    *(void *)(a1 + 32) = v7;
    *(void *)(a1 + 40) = v9 | 0x8000000000000000;
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    *(unsigned char *)(a1 + 47) = v6;
    if (!v6) {
      goto LABEL_9;
    }
  }
  memmove(v4, v5, v7);
LABEL_9:
  *((unsigned char *)v4 + v7) = 0;
  return a1;
}

void sub_25513C7CC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_25513C7E8(void *a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    unint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(void *)a2;
    unint64_t v5 = v4;
  }
  unint64_t v6 = sub_2550EB6AC((uint64_t)&v21, (uint64_t *)a2, v5);
  int8x8_t v7 = (int8x8_t)a1[1];
  if (!*(void *)&v7) {
    return 0;
  }
  unint64_t v8 = v6;
  uint8x8_t v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  unint64_t v10 = v9.u32[0];
  if (v9.u32[0] > 1uLL)
  {
    unint64_t v11 = v6;
    if (v6 >= *(void *)&v7) {
      unint64_t v11 = v6 % *(void *)&v7;
    }
  }
  else
  {
    unint64_t v11 = (*(void *)&v7 - 1) & v6;
  }
  uint64_t v12 = *(uint64_t ***)(*a1 + 8 * v11);
  if (!v12) {
    return 0;
  }
  size_t v13 = *v12;
  if (*v12)
  {
    char v14 = v2[23];
    if (v14 >= 0) {
      uint64_t v15 = v2[23];
    }
    else {
      uint64_t v15 = *((void *)v2 + 1);
    }
    if (v14 < 0) {
      uint64_t v2 = *(unsigned char **)v2;
    }
    do
    {
      unint64_t v16 = v13[1];
      if (v8 == v16)
      {
        uint64_t v17 = *((unsigned __int8 *)v13 + 39);
        if ((v17 & 0x80u) == 0) {
          uint64_t v18 = *((unsigned __int8 *)v13 + 39);
        }
        else {
          uint64_t v18 = v13[3];
        }
        if (v18 == v15)
        {
          if ((v17 & 0x80) != 0)
          {
            if (!memcmp((const void *)v13[2], v2, v13[3])) {
              return v13;
            }
          }
          else
          {
            if (!*((unsigned char *)v13 + 39)) {
              return v13;
            }
            uint64_t v19 = 0;
            while (*((unsigned __int8 *)v13 + v19 + 16) == v2[v19])
            {
              if (v17 == ++v19) {
                return v13;
              }
            }
          }
        }
      }
      else
      {
        if (v10 <= 1)
        {
          v16 &= *(void *)&v7 - 1;
        }
        else if (v16 >= *(void *)&v7)
        {
          v16 %= *(void *)&v7;
        }
        if (v16 != v11) {
          return 0;
        }
      }
      size_t v13 = (uint64_t *)*v13;
    }
    while (v13);
  }
  return v13;
}

void sub_25513C970()
{
}

void *sub_25513C984()
{
  double result = operator new(0x10uLL);
  *double result = &unk_270445898;
  return result;
}

void sub_25513C9BC(uint64_t a1, void *a2)
{
  *a2 = &unk_270445898;
}

uint64_t sub_25513C9E4(uint64_t a1, const void **a2, const void *a3)
{
  unint64_t v3 = *((unsigned __int8 *)a2 + 23);
  int v4 = (char)v3;
  unint64_t v5 = (const void **)*a2;
  if ((v3 & 0x80u) != 0) {
    unint64_t v3 = (unint64_t)a2[1];
  }
  if (v3 >= 2) {
    size_t v6 = 2;
  }
  else {
    size_t v6 = v3;
  }
  unsigned __int8 v23 = v6;
  if (v6)
  {
    if (v4 < 0) {
      a2 = v5;
    }
    memcpy(__dst, a2, v6);
    unsigned int v7 = v23;
    a3 = __dst[1];
  }
  else
  {
    unsigned int v7 = 0;
  }
  BOOL v8 = 0;
  *((unsigned char *)__dst + v6) = 0;
  v21[23] = 2;
  strcpy(v21, "--");
  if ((v7 & 0x80u) == 0) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = (unint64_t)a3;
  }
  if (v9 == 2)
  {
    if ((v7 & 0x80) != 0)
    {
      uint64_t v19 = (void *)__dst[0];
      BOOL v8 = memcmp(__dst[0], v21, (size_t)a3) == 0;
      goto LABEL_26;
    }
    if (!v7) {
      return 1;
    }
    uint64_t v10 = v7 - 1;
    unint64_t v11 = __dst;
    uint64_t v12 = v21;
    do
    {
      int v14 = *(unsigned __int8 *)v11;
      unint64_t v11 = (const void **)((char *)v11 + 1);
      int v13 = v14;
      int v16 = *v12++;
      int v15 = v16;
      BOOL v18 = v10-- != 0;
      BOOL v8 = v13 == v15;
    }
    while (v13 == v15 && v18);
  }
  if ((v7 & 0x80) != 0)
  {
    uint64_t v19 = (void *)__dst[0];
LABEL_26:
    operator delete(v19);
  }
  return v8;
}

void sub_25513CB00()
{
}

void *sub_25513CB14()
{
  double result = operator new(0x10uLL);
  *double result = &unk_2704458E0;
  return result;
}

void sub_25513CB4C(uint64_t a1, void *a2)
{
  *a2 = &unk_2704458E0;
}

BOOL sub_25513CB74(uint64_t a1, void **a2)
{
  int v2 = *((char *)a2 + 23);
  if (v2 >= 0) {
    size_t v3 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v3 = (size_t)a2[1];
  }
  if (!v3) {
    return 0;
  }
  if (v2 >= 0) {
    int v4 = a2;
  }
  else {
    int v4 = *a2;
  }
  unint64_t v5 = memchr(v4, 61, v3);
  if (v5) {
    BOOL v6 = v5 - (unsigned char *)v4 == -1;
  }
  else {
    BOOL v6 = 1;
  }
  return !v6;
}

uint64_t **sub_25513CBD8(uint64_t **a1, const void **a2, uint64_t a3)
{
  BOOL v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *((char *)a2 + 23);
    if (v7 >= 0) {
      BOOL v8 = a2;
    }
    else {
      BOOL v8 = *a2;
    }
    if (v7 >= 0) {
      size_t v9 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v9 = (size_t)a2[1];
    }
    while (1)
    {
      uint64_t v10 = (uint64_t **)v5;
      int v13 = (const void *)v5[4];
      unint64_t v11 = v5 + 4;
      uint64_t v12 = v13;
      int v14 = *((char *)v11 + 23);
      if (v14 >= 0) {
        int v15 = v11;
      }
      else {
        int v15 = v12;
      }
      if (v14 >= 0) {
        size_t v16 = *((unsigned __int8 *)v11 + 23);
      }
      else {
        size_t v16 = v11[1];
      }
      if (v16 >= v9) {
        size_t v17 = v9;
      }
      else {
        size_t v17 = v16;
      }
      int v18 = memcmp(v8, v15, v17);
      if (v18)
      {
        if (v18 < 0) {
          goto LABEL_8;
        }
LABEL_22:
        int v19 = memcmp(v15, v8, v17);
        if (v19)
        {
          if ((v19 & 0x80000000) == 0) {
            return v10;
          }
        }
        else if (v16 >= v9)
        {
          return v10;
        }
        unint64_t v5 = v10[1];
        if (!v5)
        {
          BOOL v6 = v10 + 1;
          goto LABEL_29;
        }
      }
      else
      {
        if (v9 >= v16) {
          goto LABEL_22;
        }
LABEL_8:
        unint64_t v5 = *v10;
        BOOL v6 = v10;
        if (!*v10) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v10 = a1 + 1;
LABEL_29:
  long long v20 = operator new(0x38uLL);
  char v21 = v20 + 4;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_2550EABB0(v21, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)char v21 = *(_OWORD *)a3;
    v20[6] = *(void *)(a3 + 16);
  }
  *long long v20 = 0;
  v20[1] = 0;
  void v20[2] = v10;
  uint64_t *v6 = v20;
  uint64_t v22 = (uint64_t *)**a1;
  unsigned __int8 v23 = v20;
  if (v22)
  {
    *a1 = v22;
    unsigned __int8 v23 = *v6;
  }
  sub_255104218(a1[1], v23);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return (uint64_t **)v20;
}

void sub_25513CD4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

double sub_25513CD60(uint64_t a1)
{
  *(void *)a1 = &unk_270445928;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 68) = 0u;
  *(_DWORD *)(a1 + 84) = 12;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  return result;
}

uint64_t sub_25513CDA8(uint64_t a1)
{
  *(void *)a1 = &unk_270445928;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 32);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  size_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

uint64_t sub_25513CE34(uint64_t a1)
{
  *(void *)a1 = &unk_270445928;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 32);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  size_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  return nullsub_34(a1);
}

void sub_25513CEC0(uint64_t a1)
{
  *(void *)a1 = &unk_270445928;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    int v2 = *(void **)(a1 + 32);
    if (!v2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 56));
  int v2 = *(void **)(a1 + 32);
  if (v2)
  {
LABEL_3:
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
LABEL_4:
  size_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    *(void *)(a1 + 16) = v3;
    operator delete(v3);
  }
  int v4 = (void *)nullsub_34(a1);
  j__free(v4);
}

void **sub_25513CF50(uint64_t a1, void **a2)
{
  double result = (void **)(a1 + 56);
  if (result != a2)
  {
    if (*(char *)(a1 + 79) < 0)
    {
      size_t v5 = (size_t)a2[1];
      if (*((char *)a2 + 23) >= 0)
      {
        size_t v6 = *((unsigned __int8 *)a2 + 23);
      }
      else
      {
        a2 = (void **)*a2;
        size_t v6 = v5;
      }
      return sub_2550EE2F4(result, a2, v6);
    }
    else if ((*((unsigned char *)a2 + 23) & 0x80) != 0)
    {
      return (void **)sub_2550EE22C(result, *a2, (size_t)a2[1]);
    }
    else
    {
      long long v4 = *(_OWORD *)a2;
      result[2] = a2[2];
      *(_OWORD *)double result = v4;
    }
  }
  return result;
}

uint64_t sub_25513CFA8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_25513CFB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 84) = a2;
  return result;
}

void sub_25513CFB8(void *a1, unint64_t a2)
{
  uint64_t v5 = a1[1];
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 1);
  uint64_t v14 = 0;
  unint64_t v7 = (v6 - v5) >> 3;
  BOOL v8 = a2 >= v7;
  BOOL v9 = a2 > v7;
  unint64_t v10 = a2 - v7;
  if (v9)
  {
    sub_25513D2A4(v4, v10, &v14);
  }
  else if (!v8)
  {
    a1[2] = v5 + 8 * a2;
  }
  uint64_t v11 = a1[4];
  uint64_t v12 = a1[5];
  uint64_t v14 = 0;
  unint64_t v13 = (v12 - v11) >> 3;
  if (a2 <= v13)
  {
    if (a2 < v13) {
      a1[5] = v11 + 8 * a2;
    }
  }
  else
  {
    sub_25513D2A4((uint64_t)(a1 + 4), a2 - v13, &v14);
  }
}

uint64_t sub_25513D048(uint64_t a1)
{
  uint64_t v1 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1);
  return (uint64_t)(v1[1] - *v1) >> 3;
}

uint64_t sub_25513D08C(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_25513D094(uint64_t a1)
{
  return a1 + 32;
}

void sub_25513D09C(void *a1, char **a2)
{
  uint64_t v4 = (char **)(a1 + 1);
  if (v4 != a2) {
    sub_25512AE3C(v4, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  unint64_t v5 = (a2[1] - *a2) >> 3;
  uint64_t v8 = 0;
  uint64_t v6 = a1[4];
  unint64_t v7 = (a1[5] - v6) >> 3;
  if (v5 <= v7)
  {
    if (v5 < v7) {
      a1[5] = v6 + 8 * v5;
    }
  }
  else
  {
    sub_25513D2A4((uint64_t)(a1 + 4), v5 - v7, &v8);
  }
}

char **sub_25513D124(uint64_t a1, char **a2)
{
  double result = (char **)(a1 + 32);
  if (result != a2) {
    return (char **)sub_25512AE3C(result, *a2, a2[1], (a2[1] - *a2) >> 3);
  }
  return result;
}

uint64_t sub_25513D148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_25513D150(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_25513D158(uint64_t result, uint64_t a2)
{
  *(void *)(result + 88) = a2;
  return result;
}

uint64_t sub_25513D160(uint64_t a1)
{
  return *(void *)(a1 + 88);
}

uint64_t sub_25513D168(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_25513D170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 96) = a2;
  return result;
}

uint64_t sub_25513D178(uint64_t a1)
{
  int v2 = *(int32x4_t **)(a1 + 8);
  uint64_t v1 = *(int32x4_t **)(a1 + 16);
  if (v2 == v1) {
    return 1;
  }
  unint64_t v3 = (char *)v1 - (char *)v2 - 8;
  if (v3 >= 0x38)
  {
    uint64_t v7 = (v3 >> 3) + 1;
    unint64_t v5 = (int32x4_t *)((char *)v2 + 8 * (v7 & 0x3FFFFFFFFFFFFFF8));
    uint64_t v8 = v2 + 2;
    v9.i64[0] = 0x100000001;
    v9.i64[1] = 0x100000001;
    uint64_t v10 = v7 & 0x3FFFFFFFFFFFFFF8;
    v11.i64[0] = 0x100000001;
    v11.i64[1] = 0x100000001;
    do
    {
      int32x4_t v13 = v8[-2];
      int32x4_t v12 = v8[-1];
      int32x4_t v15 = *v8;
      int32x4_t v14 = v8[1];
      v8 += 4;
      int32x4_t v9 = vmulq_s32(v9, vuzp1q_s32(v13, v12));
      int32x4_t v11 = vmulq_s32(v11, vuzp1q_s32(v15, v14));
      v10 -= 8;
    }
    while (v10);
    int8x16_t v16 = (int8x16_t)vmulq_s32(v11, v9);
    *(int32x2_t *)v16.i8 = vmul_s32(*(int32x2_t *)v16.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL));
    int v4 = v16.i32[0] * v16.i32[1];
    if (v7 == (v7 & 0x3FFFFFFFFFFFFFF8)) {
      return v4;
    }
  }
  else
  {
    int v4 = 1;
    unint64_t v5 = *(int32x4_t **)(a1 + 8);
  }
  do
  {
    int v17 = v5->i32[0];
    unint64_t v5 = (int32x4_t *)((char *)v5 + 8);
    v4 *= v17;
  }
  while (v5 != v1);
  return v4;
}

uint64_t sub_25513D220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = v2 - v1;
  if (v2 == v1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = v3 >> 3;
    if (v7 <= 1) {
      unint64_t v7 = 1;
    }
    do
    {
      if (*(void *)(v1 + 8 * v4) > v5)
      {
        uint64_t v6 = v4;
        unint64_t v5 = *(void *)(v1 + 8 * v4);
      }
      ++v4;
    }
    while (v7 != v4);
  }
  uint64_t v8 = 8 * v6;
  uint64_t v9 = *(void *)(v1 + v8);
  uint64_t v10 = *(void *)(*(void *)(a1 + 8) + v8);
  uint64_t v11 = *(int *)(a1 + 84);
  if (v11 > 0xC) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = qword_25513EFD0[v11];
  }
  return v10 * v9 * v12;
}

void sub_25513D2A4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  unint64_t v7 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v8 = (uint64_t *)v7;
  if (a2 <= (uint64_t)(v6 - v7) >> 3)
  {
    if (a2)
    {
      unint64_t v16 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
      if (v16 < 0xF || v7 < (unint64_t)(a3 + 1) && v7 + 8 * a2 > (unint64_t)a3) {
        goto LABEL_45;
      }
      unint64_t v17 = v16 + 1;
      uint64_t v8 = (uint64_t *)(v7 + 8 * (v17 & 0x3FFFFFFFFFFFFFFCLL));
      int v18 = (int64x2_t *)(v7 + 16);
      uint64_t v19 = v17 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        int64x2_t v20 = vdupq_lane_s64(*a3, 0);
        v18[-1] = v20;
        int64x2_t *v18 = v20;
        v18 += 2;
        v19 -= 4;
      }
      while (v19);
      if (v17 != (v17 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_45:
        do
          *v8++ = *a3;
        while (v8 != (uint64_t *)(v7 + 8 * a2));
      }
      uint64_t v8 = (uint64_t *)(v7 + 8 * a2);
    }
    *(void *)(a1 + 8) = v8;
  }
  else
  {
    uint64_t v9 = *(uint64_t **)a1;
    uint64_t v10 = v7 - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    unint64_t v12 = (v10 >> 3) + a2;
    if (v12 >> 61) {
      sub_2550EAEEC();
    }
    uint64_t v13 = v6 - (void)v9;
    if (v13 >> 2 > v12) {
      unint64_t v12 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v12;
    }
    if (v14)
    {
      if (v14 >> 61) {
        sub_2550EACF8();
      }
      int32x4_t v15 = (char *)operator new(8 * v14);
    }
    else
    {
      int32x4_t v15 = 0;
    }
    unint64_t v21 = (unint64_t)&v15[8 * v11];
    uint64_t v22 = (uint64_t *)(v21 + 8 * a2);
    unint64_t v23 = (a2 - 1) & 0x1FFFFFFFFFFFFFFFLL;
    unint64_t v24 = (uint64_t *)v21;
    if (v23 < 0x13) {
      goto LABEL_46;
    }
    if (v21 < (unint64_t)(a3 + 1))
    {
      unint64_t v24 = (uint64_t *)&v15[8 * v11];
      if (&v15[8 * a2 + v10] > (char *)a3) {
        goto LABEL_46;
      }
    }
    unint64_t v25 = v23 + 1;
    unint64_t v24 = (uint64_t *)(v21 + 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL));
    int64x2_t v26 = vdupq_lane_s64(*a3, 0);
    unsigned __int8 v27 = (int64x2_t *)&v15[8 * v11 + 16];
    uint64_t v28 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v27[-1] = v26;
      *unsigned __int8 v27 = v26;
      v27 += 2;
      v28 -= 4;
    }
    while (v28);
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_46:
      do
        *v24++ = *a3;
      while (v24 != v22);
    }
    if ((uint64_t *)v7 != v9)
    {
      unint64_t v29 = v7 - (void)v9 - 8;
      if (v29 < 0x58) {
        goto LABEL_47;
      }
      if (v7 - (unint64_t)&v15[v10] < 0x20) {
        goto LABEL_47;
      }
      uint64_t v30 = (v29 >> 3) + 1;
      uint64_t v31 = 8 * (v30 & 0x3FFFFFFFFFFFFFFCLL);
      uint64_t v8 = (uint64_t *)(v7 - v31);
      v21 -= v31;
      int8x8_t v32 = &v15[8 * v11 - 16];
      int8x8_t v33 = (long long *)(v7 - 16);
      uint64_t v34 = v30 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        long long v35 = *v33;
        *((_OWORD *)v32 - 1) = *(v33 - 1);
        *(_OWORD *)int8x8_t v32 = v35;
        v32 -= 32;
        v33 -= 2;
        v34 -= 4;
      }
      while (v34);
      if (v30 != (v30 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_47:
        do
        {
          uint64_t v36 = *--v8;
          *(void *)(v21 - 8) = v36;
          v21 -= 8;
        }
        while (v8 != v9);
      }
    }
    *(void *)a1 = v21;
    *(void *)(a1 + 8) = v22;
    *(void *)(a1 + 16) = &v15[8 * v14];
    if (v9)
    {
      operator delete(v9);
    }
  }
}

void sub_25513D520(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

uint64_t sub_25513D534(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 8))(a1);
}

void sub_25513D56C(uint64_t a1, char *a2, void **a3)
{
  unint64_t v5 = *(char **)(a1 + 48);
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v5 -= 16;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *(void *)(a1 + 48) = a2;
  operator delete(v6);
}

void sub_25513D620(void **a1, char *a2, void **a3)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    do
    {
      uint64_t v8 = (std::__shared_weak_count *)*((void *)v5 - 1);
      if (v8 && !atomic_fetch_add(&v8->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      v5 -= 16;
    }
    while (v5 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

uint64_t sub_25513D6DC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 8))();
}

void sub_25513D700(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[1];
  if (v4)
  {
    a1[2] = v4;
    operator delete(v4);
  }
}

void sub_25513D768(uint64_t *a1)
{
  uint64_t v3 = (void *)sub_255137150(a1);
  if (v3) {
    operator delete(v3);
  }
  if (*v2 < 0) {
    operator delete(*v1);
  }
}

void sub_25513D7A0(void **__p)
{
  do
  {
    uint64_t v2 = (void **)*__p;
    if (*((char *)__p + 39) < 0) {
      operator delete(__p[2]);
    }
    operator delete(__p);
    std::string __p = v2;
  }
  while (v2);
}

void sub_25513D7E4(uint64_t *a1)
{
  uint64_t v3 = (void *)sub_255137150(a1);
  if (v3) {
    operator delete(v3);
  }
  do
  {
    if (*(char *)(v2 - 9) < 0) {
      operator delete(*(void **)(v2 - 32));
    }
    v2 -= 32;
  }
  while (v2 != v1);
}

void sub_25513D828(void **a1, char *a2, void **a3)
{
  unint64_t v5 = (char *)*a1;
  uint64_t v6 = a2;
  if (v5 != a2)
  {
    uint64_t v8 = v5;
    do
    {
      uint64_t v10 = (void *)*((void *)v8 - 3);
      v8 -= 24;
      uint64_t v9 = v10;
      if (v10)
      {
        *((void *)v5 - 2) = v9;
        operator delete(v9);
      }
      unint64_t v5 = v8;
    }
    while (v8 != a2);
    uint64_t v6 = *a3;
  }
  *a1 = a2;
  operator delete(v6);
}

int BNNSArithmeticFilterApplyBatch(void *filter, size_t batch_size, size_t number_of_inputs, const void **in, const size_t *in_stride, void *out, size_t out_stride)
{
  return MEMORY[0x270EDDFF8](filter, batch_size, number_of_inputs, in, in_stride, out, out_stride);
}

int BNNSCopy(BNNSNDArrayDescriptor *dest, const BNNSNDArrayDescriptor *src, const BNNSFilterParameters *filter_params)
{
  return MEMORY[0x270EDE010](dest, src, filter_params);
}

int BNNSFilterApplyBatch(void *filter, size_t batch_size, const void *in, size_t in_stride, void *out, size_t out_stride)
{
  return MEMORY[0x270EDE040](filter, batch_size, in, in_stride, out, out_stride);
}

int BNNSFilterApplyTwoInputBatch(void *filter, size_t batch_size, const void *inA, size_t inA_stride, const void *inB, size_t inB_stride, void *out, size_t out_stride)
{
  return MEMORY[0x270EDE050](filter, batch_size, inA, inA_stride, inB, inB_stride, out, out_stride);
}

void *__cdecl BNNSFilterCreateLayerActivation(const BNNSLayerParametersActivation *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE068](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerArithmetic(const BNNSLayerParametersArithmetic *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE070](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerBroadcastMatMul(const BNNSLayerParametersBroadcastMatMul *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE078](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerConvolution(const BNNSLayerParametersConvolution *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE080](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerFullyConnected(const BNNSLayerParametersFullyConnected *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE088](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerPermute(const BNNSLayerParametersPermute *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE090](layer_params, filter_params);
}

void *__cdecl BNNSFilterCreateLayerTransposedConvolution(const BNNSLayerParametersConvolution *layer_params, const BNNSFilterParameters *filter_params)
{
  return (void *)MEMORY[0x270EDE098](layer_params, filter_params);
}

void BNNSFilterDestroy(void *filter)
{
}

uint64_t BNNSGraphContextDestroy_v2()
{
  return MEMORY[0x270EDE108]();
}

uint64_t BNNSGraphContextExecute_v2()
{
  return MEMORY[0x270EDE110]();
}

uint64_t BNNSGraphContextMake()
{
  return MEMORY[0x270EDE128]();
}

uint64_t BNNSGraphContextSetDynamicShapes_v2()
{
  return MEMORY[0x270EDE138]();
}

void *__cdecl CVPixelBufferGetBaseAddressOfPlane(CVPixelBufferRef pixelBuffer, size_t planeIndex)
{
  return (void *)MEMORY[0x270EEA1A0](pixelBuffer, planeIndex);
}

size_t CVPixelBufferGetPlaneCount(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA220](pixelBuffer);
}

Boolean CVPixelBufferIsPlanar(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x270EEA258](pixelBuffer);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
}

uint64_t MIL::Blob::StorageReader::StorageReader()
{
  return MEMORY[0x270F47E08]();
}

void MIL::Blob::StorageReader::~StorageReader(MIL::Blob::StorageReader *this)
{
}

uint64_t mlc::rt::JIT::create_orcjit()
{
  return MEMORY[0x270F48840]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<MIL::Fp16>()
{
  return MEMORY[0x270F484D0]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<float>()
{
  return MEMORY[0x270F484D8]();
}

uint64_t MIL::Blob::StorageReader::GetDataView<unsigned char>()
{
  return MEMORY[0x270F484E0]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F98288](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  uint64_t v1 = (const std::string_view::value_type *)MEMORY[0x270F982A0](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x270F982E8](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x270F982F8](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x270F98330](this, a2);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x270F98428](this);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x270F98458](__n);
}

void std::string::__grow_by_and_replace(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add, const std::string::value_type *__p_new_stuff)
{
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x270F984B0](this, __n, __c);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x270F984E8](this, __pos, __s, __n);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
}

uint64_t std::istream::get()
{
  return MEMORY[0x270F98668]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x270F98678]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x270F986B0]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x270F986D0]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x270F986D8]();
}

{
  return MEMORY[0x270F98720]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x270F98758]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x270F98760]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x270F98770]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x270F98778]();
}

{
  return MEMORY[0x270F987A8]();
}

{
  return MEMORY[0x270F987B0]();
}

{
  return MEMORY[0x270F987C0]();
}

{
  return MEMORY[0x270F987E0]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x270F988A8]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x270F988B0]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x270F989E8](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
}

void std::locale::~locale(std::locale *this)
{
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x270F98DE8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x270F98E20](retstr, __val);
}

void std::exception::~exception(std::exception *this)
{
}

void std::terminate(void)
{
}

void operator delete[]()
{
  while (1)
    ;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void operator delete()
{
  while (1)
    ;
}

void operator new[]()
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

void operator new()
{
  while (1)
    ;
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x270F98EC0](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x270F98ED8](a1);
}

void __cxa_end_catch(void)
{
}

void __cxa_free_exception(void *a1)
{
}

void __cxa_rethrow(void)
{
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
}

int *__error(void)
{
  return (int *)MEMORY[0x270ED7DC0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x270ED7F00](*(void *)&a1);
}

void abort(void)
{
}

void bzero(void *a1, size_t a2)
{
}

int close(int a1)
{
  return MEMORY[0x270ED8F18](*(void *)&a1);
}

void dispatch_async_and_wait_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

void dispatch_async_f(dispatch_queue_t queue, void *context, dispatch_function_t work)
{
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x270ED9460](label, attr);
}

void dispatch_release(dispatch_object_t object)
{
}

int dlclose(void *__handle)
{
  return MEMORY[0x270ED9618](__handle);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x270ED9628](__path, *(void *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x270ED9648](__handle, __symbol);
}

void exit(int a1)
{
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x270ED9A08](a1, a2);
}

void free(void *a1)
{
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x270ED9B88](__ptr, __size, __nitems, __stream);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x270ED9BE8](a1);
}

void longjmp(jmp_buf a1, int a2)
{
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA390](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x270EDA398](memptr, alignment, size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x270EDA3A0](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x270EDA458](__s, *(void *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x270EDA468](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x270EDA470](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x270EDA488](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x270EDA498](__b, *(void *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x270EDA598](a1, a2, *(void *)&a3, *(void *)&a4, *(void *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x270EDA5F8](a1, a2);
}

double nan(const char *a1)
{
  MEMORY[0x270EDA600](a1);
  return result;
}

float nanf(const char *a1)
{
  MEMORY[0x270EDA608](a1);
  return result;
}

int nanosleep(const timespec *__rqtp, timespec *__rmtp)
{
  return MEMORY[0x270EDA618](__rqtp, __rmtp);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x270EDA828](a1, *(void *)&a2);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x270EDAD20](a1);
}

int putchar(int a1)
{
  return MEMORY[0x270EDB090](*(void *)&a1);
}

int puts(const char *a1)
{
  return MEMORY[0x270EDB098](a1);
}

int setjmp(jmp_buf a1)
{
  return MEMORY[0x270EDB3F8](a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x270EDB510](__str, __size, __format);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x270EDB5D0](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x270EDB5D8](*(void *)&__errnum);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x270EDB610](__s);
}

char *__cdecl strndup(const char *__s1, size_t __n)
{
  return (char *)MEMORY[0x270EDB650](__s1, __n);
}

double strtod(const char *a1, char **a2)
{
  MEMORY[0x270EDB6A8](a1, a2);
  return result;
}